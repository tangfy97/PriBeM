public final class org.apache.lucene.index.MultiFields extends org.apache.lucene.index.Fields
{
    private final org.apache.lucene.index.Fields[] subs;
    private final org.apache.lucene.index.ReaderSlice[] subSlices;
    private final java.util.Map terms;
    static final boolean $assertionsDisabled;

    public static org.apache.lucene.index.Fields getFields(org.apache.lucene.index.IndexReader) throws java.io.IOException
    {
        java.lang.Object[] $r11, $r14;
        org.apache.lucene.index.Fields $r5, $r17, $r21;
        org.apache.lucene.index.MultiFields $r9;
        org.apache.lucene.index.ReaderSlice $r22;
        java.util.ArrayList $r6, $r7;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        boolean $z0, $z1;
        org.apache.lucene.index.ReaderSlice[] $r12, $r15;
        java.util.Iterator $r8;
        java.util.List $r1;
        java.lang.Object $r2, $r16, $r18;
        org.apache.lucene.index.Fields[] $r10, $r13;
        org.apache.lucene.index.IndexReader r0;
        org.apache.lucene.index.AtomicReaderContext $r3, r19;
        org.apache.lucene.index.AtomicReader $r4, $r20;

        r0 := @parameter0: org.apache.lucene.index.IndexReader;

        $r1 = virtualinvoke r0.<org.apache.lucene.index.IndexReader: java.util.List leaves()>();

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        lookupswitch($i0)
        {
            case 0: goto label1;
            case 1: goto label2;
            default: goto label3;
        };

     label1:
        return null;

     label2:
        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(0);

        $r3 = (org.apache.lucene.index.AtomicReaderContext) $r2;

        $r4 = virtualinvoke $r3.<org.apache.lucene.index.AtomicReaderContext: org.apache.lucene.index.AtomicReader reader()>();

        $r5 = virtualinvoke $r4.<org.apache.lucene.index.AtomicReader: org.apache.lucene.index.Fields fields()>();

        return $r5;

     label3:
        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>()>();

        $r8 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label4:
        $z0 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r18 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        r19 = (org.apache.lucene.index.AtomicReaderContext) $r18;

        $r20 = virtualinvoke r19.<org.apache.lucene.index.AtomicReaderContext: org.apache.lucene.index.AtomicReader reader()>();

        $r21 = virtualinvoke $r20.<org.apache.lucene.index.AtomicReader: org.apache.lucene.index.Fields fields()>();

        if $r21 == null goto label5;

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>($r21);

        $r22 = new org.apache.lucene.index.ReaderSlice;

        $i2 = r19.<org.apache.lucene.index.AtomicReaderContext: int docBase>;

        $i3 = virtualinvoke $r20.<org.apache.lucene.index.AtomicReader: int maxDoc()>();

        $i4 = interfaceinvoke $r6.<java.util.List: int size()>();

        $i5 = $i4 - 1;

        specialinvoke $r22.<org.apache.lucene.index.ReaderSlice: void <init>(int,int,int)>($i2, $i3, $i5);

        interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>($r22);

     label5:
        goto label4;

     label6:
        $z1 = interfaceinvoke $r6.<java.util.List: boolean isEmpty()>();

        if $z1 == 0 goto label7;

        return null;

     label7:
        $i1 = interfaceinvoke $r6.<java.util.List: int size()>();

        if $i1 != 1 goto label8;

        $r16 = interfaceinvoke $r6.<java.util.List: java.lang.Object get(int)>(0);

        $r17 = (org.apache.lucene.index.Fields) $r16;

        return $r17;

     label8:
        $r9 = new org.apache.lucene.index.MultiFields;

        $r10 = <org.apache.lucene.index.Fields: org.apache.lucene.index.Fields[] EMPTY_ARRAY>;

        $r11 = interfaceinvoke $r6.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r10);

        $r13 = (org.apache.lucene.index.Fields[]) $r11;

        $r12 = <org.apache.lucene.index.ReaderSlice: org.apache.lucene.index.ReaderSlice[] EMPTY_ARRAY>;

        $r14 = interfaceinvoke $r7.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r12);

        $r15 = (org.apache.lucene.index.ReaderSlice[]) $r14;

        specialinvoke $r9.<org.apache.lucene.index.MultiFields: void <init>(org.apache.lucene.index.Fields[],org.apache.lucene.index.ReaderSlice[])>($r13, $r15);

        return $r9;
    }

    public static org.apache.lucene.util.Bits getLiveDocs(org.apache.lucene.index.IndexReader)
    {
        java.lang.AssertionError $r13;
        int[] r3;
        int $i0, $i1, $i2, $i3, i4;
        org.apache.lucene.util.Bits $r8, $r12;
        boolean $z0, $z1;
        java.util.List $r1;
        org.apache.lucene.util.Bits[] r2;
        java.lang.Object $r5, $r9;
        org.apache.lucene.index.IndexReader r0;
        org.apache.lucene.index.AtomicReaderContext r6, $r10;
        org.apache.lucene.index.AtomicReader $r7, $r11;
        org.apache.lucene.index.MultiBits $r4;

        r0 := @parameter0: org.apache.lucene.index.IndexReader;

        $z0 = virtualinvoke r0.<org.apache.lucene.index.IndexReader: boolean hasDeletions()>();

        if $z0 == 0 goto label5;

        $r1 = virtualinvoke r0.<org.apache.lucene.index.IndexReader: java.util.List leaves()>();

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        $z1 = <org.apache.lucene.index.MultiFields: boolean $assertionsDisabled>;

        if $z1 != 0 goto label1;

        if $i0 > 0 goto label1;

        $r13 = new java.lang.AssertionError;

        specialinvoke $r13.<java.lang.AssertionError: void <init>(java.lang.Object)>("A reader with deletions must have at least one leave");

        throw $r13;

     label1:
        if $i0 != 1 goto label2;

        $r9 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(0);

        $r10 = (org.apache.lucene.index.AtomicReaderContext) $r9;

        $r11 = virtualinvoke $r10.<org.apache.lucene.index.AtomicReaderContext: org.apache.lucene.index.AtomicReader reader()>();

        $r12 = virtualinvoke $r11.<org.apache.lucene.index.AtomicReader: org.apache.lucene.util.Bits getLiveDocs()>();

        return $r12;

     label2:
        r2 = newarray (org.apache.lucene.util.Bits)[$i0];

        $i1 = $i0 + 1;

        r3 = newarray (int)[$i1];

        i4 = 0;

     label3:
        if i4 >= $i0 goto label4;

        $r5 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i4);

        r6 = (org.apache.lucene.index.AtomicReaderContext) $r5;

        $r7 = virtualinvoke r6.<org.apache.lucene.index.AtomicReaderContext: org.apache.lucene.index.AtomicReader reader()>();

        $r8 = virtualinvoke $r7.<org.apache.lucene.index.AtomicReader: org.apache.lucene.util.Bits getLiveDocs()>();

        r2[i4] = $r8;

        $i3 = r6.<org.apache.lucene.index.AtomicReaderContext: int docBase>;

        r3[i4] = $i3;

        i4 = i4 + 1;

        goto label3;

     label4:
        $i2 = virtualinvoke r0.<org.apache.lucene.index.IndexReader: int maxDoc()>();

        r3[$i0] = $i2;

        $r4 = new org.apache.lucene.index.MultiBits;

        specialinvoke $r4.<org.apache.lucene.index.MultiBits: void <init>(org.apache.lucene.util.Bits[],int[],boolean)>(r2, r3, 1);

        return $r4;

     label5:
        return null;
    }

    public static org.apache.lucene.index.Terms getTerms(org.apache.lucene.index.IndexReader, java.lang.String) throws java.io.IOException
    {
        org.apache.lucene.index.Terms $r3;
        org.apache.lucene.index.Fields $r1;
        java.lang.String r2;
        org.apache.lucene.index.IndexReader r0;

        r0 := @parameter0: org.apache.lucene.index.IndexReader;

        r2 := @parameter1: java.lang.String;

        $r1 = staticinvoke <org.apache.lucene.index.MultiFields: org.apache.lucene.index.Fields getFields(org.apache.lucene.index.IndexReader)>(r0);

        if $r1 != null goto label1;

        return null;

     label1:
        $r3 = virtualinvoke $r1.<org.apache.lucene.index.Fields: org.apache.lucene.index.Terms terms(java.lang.String)>(r2);

        return $r3;
    }

    public static org.apache.lucene.index.DocsEnum getTermDocsEnum(org.apache.lucene.index.IndexReader, org.apache.lucene.util.Bits, java.lang.String, org.apache.lucene.util.BytesRef) throws java.io.IOException
    {
        org.apache.lucene.util.BytesRef r3;
        java.lang.String r2;
        org.apache.lucene.index.DocsEnum $r4;
        org.apache.lucene.util.Bits r1;
        org.apache.lucene.index.IndexReader r0;

        r0 := @parameter0: org.apache.lucene.index.IndexReader;

        r1 := @parameter1: org.apache.lucene.util.Bits;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: org.apache.lucene.util.BytesRef;

        $r4 = staticinvoke <org.apache.lucene.index.MultiFields: org.apache.lucene.index.DocsEnum getTermDocsEnum(org.apache.lucene.index.IndexReader,org.apache.lucene.util.Bits,java.lang.String,org.apache.lucene.util.BytesRef,int)>(r0, r1, r2, r3, 1);

        return $r4;
    }

    public static org.apache.lucene.index.DocsEnum getTermDocsEnum(org.apache.lucene.index.IndexReader, org.apache.lucene.util.Bits, java.lang.String, org.apache.lucene.util.BytesRef, int) throws java.io.IOException
    {
        org.apache.lucene.index.Terms $r2;
        org.apache.lucene.util.BytesRef r4;
        java.lang.AssertionError $r7, $r8;
        org.apache.lucene.index.DocsEnum $r6;
        org.apache.lucene.index.TermsEnum $r3;
        int i0;
        java.lang.String r1;
        org.apache.lucene.util.Bits r5;
        org.apache.lucene.index.IndexReader r0;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: org.apache.lucene.index.IndexReader;

        r5 := @parameter1: org.apache.lucene.util.Bits;

        r1 := @parameter2: java.lang.String;

        r4 := @parameter3: org.apache.lucene.util.BytesRef;

        i0 := @parameter4: int;

        $z0 = <org.apache.lucene.index.MultiFields: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if r1 != null goto label1;

        $r8 = new java.lang.AssertionError;

        specialinvoke $r8.<java.lang.AssertionError: void <init>()>();

        throw $r8;

     label1:
        $z1 = <org.apache.lucene.index.MultiFields: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        if r4 != null goto label2;

        $r7 = new java.lang.AssertionError;

        specialinvoke $r7.<java.lang.AssertionError: void <init>()>();

        throw $r7;

     label2:
        $r2 = staticinvoke <org.apache.lucene.index.MultiFields: org.apache.lucene.index.Terms getTerms(org.apache.lucene.index.IndexReader,java.lang.String)>(r0, r1);

        if $r2 == null goto label3;

        $r3 = virtualinvoke $r2.<org.apache.lucene.index.Terms: org.apache.lucene.index.TermsEnum iterator(org.apache.lucene.index.TermsEnum)>(null);

        $z2 = virtualinvoke $r3.<org.apache.lucene.index.TermsEnum: boolean seekExact(org.apache.lucene.util.BytesRef,boolean)>(r4, 1);

        if $z2 == 0 goto label3;

        $r6 = virtualinvoke $r3.<org.apache.lucene.index.TermsEnum: org.apache.lucene.index.DocsEnum docs(org.apache.lucene.util.Bits,org.apache.lucene.index.DocsEnum,int)>(r5, null, i0);

        return $r6;

     label3:
        return null;
    }

    public static org.apache.lucene.index.DocsAndPositionsEnum getTermPositionsEnum(org.apache.lucene.index.IndexReader, org.apache.lucene.util.Bits, java.lang.String, org.apache.lucene.util.BytesRef) throws java.io.IOException
    {
        org.apache.lucene.index.DocsAndPositionsEnum $r4;
        org.apache.lucene.util.BytesRef r3;
        java.lang.String r2;
        org.apache.lucene.util.Bits r1;
        org.apache.lucene.index.IndexReader r0;

        r0 := @parameter0: org.apache.lucene.index.IndexReader;

        r1 := @parameter1: org.apache.lucene.util.Bits;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: org.apache.lucene.util.BytesRef;

        $r4 = staticinvoke <org.apache.lucene.index.MultiFields: org.apache.lucene.index.DocsAndPositionsEnum getTermPositionsEnum(org.apache.lucene.index.IndexReader,org.apache.lucene.util.Bits,java.lang.String,org.apache.lucene.util.BytesRef,int)>(r0, r1, r2, r3, 3);

        return $r4;
    }

    public static org.apache.lucene.index.DocsAndPositionsEnum getTermPositionsEnum(org.apache.lucene.index.IndexReader, org.apache.lucene.util.Bits, java.lang.String, org.apache.lucene.util.BytesRef, int) throws java.io.IOException
    {
        org.apache.lucene.index.Terms $r2;
        org.apache.lucene.util.BytesRef r4;
        java.lang.AssertionError $r7, $r8;
        org.apache.lucene.index.DocsAndPositionsEnum $r6;
        org.apache.lucene.index.TermsEnum $r3;
        int i0;
        java.lang.String r1;
        org.apache.lucene.util.Bits r5;
        org.apache.lucene.index.IndexReader r0;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: org.apache.lucene.index.IndexReader;

        r5 := @parameter1: org.apache.lucene.util.Bits;

        r1 := @parameter2: java.lang.String;

        r4 := @parameter3: org.apache.lucene.util.BytesRef;

        i0 := @parameter4: int;

        $z0 = <org.apache.lucene.index.MultiFields: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if r1 != null goto label1;

        $r8 = new java.lang.AssertionError;

        specialinvoke $r8.<java.lang.AssertionError: void <init>()>();

        throw $r8;

     label1:
        $z1 = <org.apache.lucene.index.MultiFields: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        if r4 != null goto label2;

        $r7 = new java.lang.AssertionError;

        specialinvoke $r7.<java.lang.AssertionError: void <init>()>();

        throw $r7;

     label2:
        $r2 = staticinvoke <org.apache.lucene.index.MultiFields: org.apache.lucene.index.Terms getTerms(org.apache.lucene.index.IndexReader,java.lang.String)>(r0, r1);

        if $r2 == null goto label3;

        $r3 = virtualinvoke $r2.<org.apache.lucene.index.Terms: org.apache.lucene.index.TermsEnum iterator(org.apache.lucene.index.TermsEnum)>(null);

        $z2 = virtualinvoke $r3.<org.apache.lucene.index.TermsEnum: boolean seekExact(org.apache.lucene.util.BytesRef,boolean)>(r4, 1);

        if $z2 == 0 goto label3;

        $r6 = virtualinvoke $r3.<org.apache.lucene.index.TermsEnum: org.apache.lucene.index.DocsAndPositionsEnum docsAndPositions(org.apache.lucene.util.Bits,org.apache.lucene.index.DocsAndPositionsEnum,int)>(r5, null, i0);

        return $r6;

     label3:
        return null;
    }

    public void <init>(org.apache.lucene.index.Fields[], org.apache.lucene.index.ReaderSlice[])
    {
        org.apache.lucene.index.ReaderSlice[] r3;
        java.util.concurrent.ConcurrentHashMap $r1;
        org.apache.lucene.index.MultiFields r0;
        org.apache.lucene.index.Fields[] r2;

        r0 := @this: org.apache.lucene.index.MultiFields;

        r2 := @parameter0: org.apache.lucene.index.Fields[];

        r3 := @parameter1: org.apache.lucene.index.ReaderSlice[];

        specialinvoke r0.<org.apache.lucene.index.Fields: void <init>()>();

        $r1 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r1.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        r0.<org.apache.lucene.index.MultiFields: java.util.Map terms> = $r1;

        r0.<org.apache.lucene.index.MultiFields: org.apache.lucene.index.Fields[] subs> = r2;

        r0.<org.apache.lucene.index.MultiFields: org.apache.lucene.index.ReaderSlice[] subSlices> = r3;

        return;
    }

    public java.util.Iterator iterator()
    {
        java.util.Iterator $r7;
        org.apache.lucene.index.Fields $r6;
        org.apache.lucene.index.MultiFields r0;
        org.apache.lucene.index.MergedIterator $r4;
        java.util.Iterator[] r2;
        int $i0, $i1, i2;
        org.apache.lucene.index.Fields[] $r1, $r3, $r5;

        r0 := @this: org.apache.lucene.index.MultiFields;

        $r1 = r0.<org.apache.lucene.index.MultiFields: org.apache.lucene.index.Fields[] subs>;

        $i0 = lengthof $r1;

        r2 = newarray (java.util.Iterator)[$i0];

        i2 = 0;

     label1:
        $r3 = r0.<org.apache.lucene.index.MultiFields: org.apache.lucene.index.Fields[] subs>;

        $i1 = lengthof $r3;

        if i2 >= $i1 goto label2;

        $r5 = r0.<org.apache.lucene.index.MultiFields: org.apache.lucene.index.Fields[] subs>;

        $r6 = $r5[i2];

        $r7 = virtualinvoke $r6.<org.apache.lucene.index.Fields: java.util.Iterator iterator()>();

        r2[i2] = $r7;

        i2 = i2 + 1;

        goto label1;

     label2:
        $r4 = new org.apache.lucene.index.MergedIterator;

        specialinvoke $r4.<org.apache.lucene.index.MergedIterator: void <init>(java.util.Iterator[])>(r2);

        return $r4;
    }

    public org.apache.lucene.index.Terms terms(java.lang.String) throws java.io.IOException
    {
        java.lang.Object[] $r9, $r12;
        org.apache.lucene.index.Fields $r16;
        org.apache.lucene.index.MultiFields r0;
        org.apache.lucene.index.ReaderSlice $r19;
        java.util.ArrayList $r4, $r5;
        java.util.Map $r2, $r14;
        int $i0, $i1, i2;
        java.lang.String r1;
        org.apache.lucene.index.ReaderSlice[] $r10, $r13, $r18;
        org.apache.lucene.index.Terms $r17, r20;
        org.apache.lucene.index.MultiTerms $r7, r21;
        org.apache.lucene.index.Terms[] $r8, $r11;
        java.lang.Object $r3;
        org.apache.lucene.index.Fields[] $r6, $r15;

        r0 := @this: org.apache.lucene.index.MultiFields;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.apache.lucene.index.MultiFields: java.util.Map terms>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r20 = (org.apache.lucene.index.Terms) $r3;

        if r20 == null goto label1;

        return r20;

     label1:
        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        i2 = 0;

     label2:
        $r6 = r0.<org.apache.lucene.index.MultiFields: org.apache.lucene.index.Fields[] subs>;

        $i0 = lengthof $r6;

        if i2 >= $i0 goto label4;

        $r15 = r0.<org.apache.lucene.index.MultiFields: org.apache.lucene.index.Fields[] subs>;

        $r16 = $r15[i2];

        $r17 = virtualinvoke $r16.<org.apache.lucene.index.Fields: org.apache.lucene.index.Terms terms(java.lang.String)>(r1);

        if $r17 == null goto label3;

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r17);

        $r18 = r0.<org.apache.lucene.index.MultiFields: org.apache.lucene.index.ReaderSlice[] subSlices>;

        $r19 = $r18[i2];

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r19);

     label3:
        i2 = i2 + 1;

        goto label2;

     label4:
        $i1 = interfaceinvoke $r4.<java.util.List: int size()>();

        if $i1 != 0 goto label5;

        r21 = null;

        goto label6;

     label5:
        $r7 = new org.apache.lucene.index.MultiTerms;

        $r8 = <org.apache.lucene.index.Terms: org.apache.lucene.index.Terms[] EMPTY_ARRAY>;

        $r9 = interfaceinvoke $r4.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r8);

        $r11 = (org.apache.lucene.index.Terms[]) $r9;

        $r10 = <org.apache.lucene.index.ReaderSlice: org.apache.lucene.index.ReaderSlice[] EMPTY_ARRAY>;

        $r12 = interfaceinvoke $r5.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r10);

        $r13 = (org.apache.lucene.index.ReaderSlice[]) $r12;

        specialinvoke $r7.<org.apache.lucene.index.MultiTerms: void <init>(org.apache.lucene.index.Terms[],org.apache.lucene.index.ReaderSlice[])>($r11, $r13);

        r21 = $r7;

        $r14 = r0.<org.apache.lucene.index.MultiFields: java.util.Map terms>;

        interfaceinvoke $r14.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r7);

     label6:
        return r21;
    }

    public int size()
    {
        int $i1;
        org.apache.lucene.index.MultiFields r0;

        r0 := @this: org.apache.lucene.index.MultiFields;

        $i1 = (int) -1;

        return $i1;
    }

    public static org.apache.lucene.index.FieldInfos getMergedFieldInfos(org.apache.lucene.index.IndexReader)
    {
        java.util.Iterator $r3;
        org.apache.lucene.index.FieldInfos$Builder $r0;
        java.util.List $r2;
        java.lang.Object $r5;
        org.apache.lucene.index.FieldInfos $r4, $r8;
        org.apache.lucene.index.IndexReader r1;
        org.apache.lucene.index.AtomicReaderContext r6;
        org.apache.lucene.index.AtomicReader $r7;
        boolean $z0;

        r1 := @parameter0: org.apache.lucene.index.IndexReader;

        $r0 = new org.apache.lucene.index.FieldInfos$Builder;

        specialinvoke $r0.<org.apache.lucene.index.FieldInfos$Builder: void <init>()>();

        $r2 = virtualinvoke r1.<org.apache.lucene.index.IndexReader: java.util.List leaves()>();

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r6 = (org.apache.lucene.index.AtomicReaderContext) $r5;

        $r7 = virtualinvoke r6.<org.apache.lucene.index.AtomicReaderContext: org.apache.lucene.index.AtomicReader reader()>();

        $r8 = virtualinvoke $r7.<org.apache.lucene.index.AtomicReader: org.apache.lucene.index.FieldInfos getFieldInfos()>();

        virtualinvoke $r0.<org.apache.lucene.index.FieldInfos$Builder: void add(org.apache.lucene.index.FieldInfos)>($r8);

        goto label1;

     label2:
        $r4 = virtualinvoke $r0.<org.apache.lucene.index.FieldInfos$Builder: org.apache.lucene.index.FieldInfos finish()>();

        return $r4;
    }

    public static java.util.Collection getIndexedFields(org.apache.lucene.index.IndexReader)
    {
        java.util.Iterator $r3;
        java.util.HashSet $r0;
        org.apache.lucene.index.FieldInfo r5;
        java.lang.Object $r4;
        java.lang.String $r6;
        org.apache.lucene.index.FieldInfos $r2;
        org.apache.lucene.index.IndexReader r1;
        boolean $z0, $z1;

        r1 := @parameter0: org.apache.lucene.index.IndexReader;

        $r0 = new java.util.HashSet;

        specialinvoke $r0.<java.util.HashSet: void <init>()>();

        $r2 = staticinvoke <org.apache.lucene.index.MultiFields: org.apache.lucene.index.FieldInfos getMergedFieldInfos(org.apache.lucene.index.IndexReader)>(r1);

        $r3 = virtualinvoke $r2.<org.apache.lucene.index.FieldInfos: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.apache.lucene.index.FieldInfo) $r4;

        $z1 = virtualinvoke r5.<org.apache.lucene.index.FieldInfo: boolean isIndexed()>();

        if $z1 == 0 goto label2;

        $r6 = r5.<org.apache.lucene.index.FieldInfo: java.lang.String name>;

        interfaceinvoke $r0.<java.util.Collection: boolean add(java.lang.Object)>($r6);

     label2:
        goto label1;

     label3:
        return $r0;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/apache/lucene/index/MultiFields;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.lucene.index.MultiFields: boolean $assertionsDisabled> = $z1;

        return;
    }
}
