public class org.xmpp.packet.Presence extends org.xmpp.packet.Packet
{

    public void <init>()
    {
        org.xmpp.packet.Presence r0;
        org.dom4j.Document $r2;
        org.dom4j.Element $r3;
        org.dom4j.DocumentFactory $r1;

        r0 := @this: org.xmpp.packet.Presence;

        specialinvoke r0.<org.xmpp.packet.Packet: void <init>()>();

        $r1 = <org.xmpp.packet.Presence: org.dom4j.DocumentFactory docFactory>;

        $r2 = virtualinvoke $r1.<org.dom4j.DocumentFactory: org.dom4j.Document createDocument()>();

        $r3 = interfaceinvoke $r2.<org.dom4j.Document: org.dom4j.Element addElement(java.lang.String)>("presence");

        r0.<org.xmpp.packet.Presence: org.dom4j.Element element> = $r3;

        return;
    }

    public void <init>(org.xmpp.packet.Presence$Type)
    {
        org.xmpp.packet.Presence r0;
        org.xmpp.packet.Presence$Type r1;

        r0 := @this: org.xmpp.packet.Presence;

        r1 := @parameter0: org.xmpp.packet.Presence$Type;

        specialinvoke r0.<org.xmpp.packet.Presence: void <init>()>();

        virtualinvoke r0.<org.xmpp.packet.Presence: void setType(org.xmpp.packet.Presence$Type)>(r1);

        return;
    }

    public void <init>(org.dom4j.Element)
    {
        org.xmpp.packet.Presence r0;
        org.dom4j.Element r1;

        r0 := @this: org.xmpp.packet.Presence;

        r1 := @parameter0: org.dom4j.Element;

        specialinvoke r0.<org.xmpp.packet.Packet: void <init>(org.dom4j.Element)>(r1);

        return;
    }

    public void <init>(org.dom4j.Element, boolean)
    {
        org.xmpp.packet.Presence r0;
        org.dom4j.Element r1;
        boolean z0;

        r0 := @this: org.xmpp.packet.Presence;

        r1 := @parameter0: org.dom4j.Element;

        z0 := @parameter1: boolean;

        specialinvoke r0.<org.xmpp.packet.Packet: void <init>(org.dom4j.Element,boolean)>(r1, z0);

        return;
    }

    private void <init>(org.xmpp.packet.Presence)
    {
        org.xmpp.packet.Presence r0, r1;
        org.dom4j.Document $r5;
        org.xmpp.packet.JID $r6, $r7;
        org.dom4j.DocumentFactory $r4;
        org.dom4j.Element $r2, $r3;

        r0 := @this: org.xmpp.packet.Presence;

        r1 := @parameter0: org.xmpp.packet.Presence;

        specialinvoke r0.<org.xmpp.packet.Packet: void <init>()>();

        $r2 = r1.<org.xmpp.packet.Presence: org.dom4j.Element element>;

        $r3 = interfaceinvoke $r2.<org.dom4j.Element: org.dom4j.Element createCopy()>();

        $r4 = <org.xmpp.packet.Presence: org.dom4j.DocumentFactory docFactory>;

        $r5 = virtualinvoke $r4.<org.dom4j.DocumentFactory: org.dom4j.Document createDocument()>();

        interfaceinvoke $r5.<org.dom4j.Document: void add(org.dom4j.Element)>($r3);

        r0.<org.xmpp.packet.Presence: org.dom4j.Element element> = $r3;

        $r6 = r1.<org.xmpp.packet.Presence: org.xmpp.packet.JID toJID>;

        r0.<org.xmpp.packet.Presence: org.xmpp.packet.JID toJID> = $r6;

        $r7 = r1.<org.xmpp.packet.Presence: org.xmpp.packet.JID fromJID>;

        r0.<org.xmpp.packet.Presence: org.xmpp.packet.JID fromJID> = $r7;

        return;
    }

    public boolean isAvailable()
    {
        org.xmpp.packet.Presence r0;
        org.xmpp.packet.Presence$Type $r1;
        boolean $z0;

        r0 := @this: org.xmpp.packet.Presence;

        $r1 = virtualinvoke r0.<org.xmpp.packet.Presence: org.xmpp.packet.Presence$Type getType()>();

        if $r1 != null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public org.xmpp.packet.Presence$Type getType()
    {
        org.xmpp.packet.Presence r0;
        org.xmpp.packet.Presence$Type $r3;
        org.dom4j.Element $r1;
        java.lang.String $r2;

        r0 := @this: org.xmpp.packet.Presence;

        $r1 = r0.<org.xmpp.packet.Presence: org.dom4j.Element element>;

        $r2 = interfaceinvoke $r1.<org.dom4j.Element: java.lang.String attributeValue(java.lang.String)>("type");

        if $r2 != null goto label1;

        return null;

     label1:
        $r3 = staticinvoke <org.xmpp.packet.Presence$Type: org.xmpp.packet.Presence$Type valueOf(java.lang.String)>($r2);

        return $r3;
    }

    public void setType(org.xmpp.packet.Presence$Type)
    {
        org.xmpp.packet.Presence r0;
        org.xmpp.packet.Presence$Type r1;
        org.dom4j.Element $r2;
        java.lang.String $r3;

        r0 := @this: org.xmpp.packet.Presence;

        r1 := @parameter0: org.xmpp.packet.Presence$Type;

        $r2 = r0.<org.xmpp.packet.Presence: org.dom4j.Element element>;

        if r1 != null goto label1;

        $r3 = null;

        goto label2;

     label1:
        $r3 = virtualinvoke r1.<org.xmpp.packet.Presence$Type: java.lang.String toString()>();

     label2:
        interfaceinvoke $r2.<org.dom4j.Element: org.dom4j.Element addAttribute(java.lang.String,java.lang.String)>("type", $r3);

        return;
    }

    public org.xmpp.packet.Presence$Show getShow()
    {
        org.xmpp.packet.Presence r0;
        org.xmpp.packet.Presence$Show $r3;
        org.dom4j.Element $r1;
        java.lang.String $r2;

        r0 := @this: org.xmpp.packet.Presence;

        $r1 = r0.<org.xmpp.packet.Presence: org.dom4j.Element element>;

        $r2 = interfaceinvoke $r1.<org.dom4j.Element: java.lang.String elementText(java.lang.String)>("show");

        if $r2 != null goto label1;

        return null;

     label1:
        $r3 = staticinvoke <org.xmpp.packet.Presence$Show: org.xmpp.packet.Presence$Show valueOf(java.lang.String)>($r2);

        return $r3;
    }

    public void setShow(org.xmpp.packet.Presence$Show)
    {
        org.xmpp.packet.Presence r0;
        org.xmpp.packet.Presence$Show r3;
        java.lang.IllegalArgumentException $r6;
        org.dom4j.Element $r1, $r2, $r5, $r7, r8;
        java.lang.String $r4;
        boolean $z0;

        r0 := @this: org.xmpp.packet.Presence;

        r3 := @parameter0: org.xmpp.packet.Presence$Show;

        $r1 = r0.<org.xmpp.packet.Presence: org.dom4j.Element element>;

        $r2 = interfaceinvoke $r1.<org.dom4j.Element: org.dom4j.Element element(java.lang.String)>("show");

        r8 = $r2;

        if r3 != null goto label2;

        if $r2 == null goto label1;

        $r7 = r0.<org.xmpp.packet.Presence: org.dom4j.Element element>;

        interfaceinvoke $r7.<org.dom4j.Element: boolean remove(org.dom4j.Element)>($r2);

     label1:
        return;

     label2:
        if $r2 != null goto label4;

        $z0 = virtualinvoke r0.<org.xmpp.packet.Presence: boolean isAvailable()>();

        if $z0 != 0 goto label3;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Cannot set \'show\' if \'type\' attribute is set.");

        throw $r6;

     label3:
        $r5 = r0.<org.xmpp.packet.Presence: org.dom4j.Element element>;

        r8 = interfaceinvoke $r5.<org.dom4j.Element: org.dom4j.Element addElement(java.lang.String)>("show");

     label4:
        $r4 = virtualinvoke r3.<org.xmpp.packet.Presence$Show: java.lang.String toString()>();

        interfaceinvoke r8.<org.dom4j.Element: void setText(java.lang.String)>($r4);

        return;
    }

    public java.lang.String getStatus()
    {
        org.xmpp.packet.Presence r0;
        org.dom4j.Element $r1;
        java.lang.String $r2;

        r0 := @this: org.xmpp.packet.Presence;

        $r1 = r0.<org.xmpp.packet.Presence: org.dom4j.Element element>;

        $r2 = interfaceinvoke $r1.<org.dom4j.Element: java.lang.String elementText(java.lang.String)>("status");

        return $r2;
    }

    public void setStatus(java.lang.String)
    {
        org.xmpp.packet.Presence r0;
        org.dom4j.Element $r1, $r2, $r4, $r5, r6;
        java.lang.String r3;

        r0 := @this: org.xmpp.packet.Presence;

        r3 := @parameter0: java.lang.String;

        $r1 = r0.<org.xmpp.packet.Presence: org.dom4j.Element element>;

        $r2 = interfaceinvoke $r1.<org.dom4j.Element: org.dom4j.Element element(java.lang.String)>("status");

        r6 = $r2;

        if r3 != null goto label2;

        if $r2 == null goto label1;

        $r5 = r0.<org.xmpp.packet.Presence: org.dom4j.Element element>;

        interfaceinvoke $r5.<org.dom4j.Element: boolean remove(org.dom4j.Element)>($r2);

     label1:
        return;

     label2:
        if $r2 != null goto label3;

        $r4 = r0.<org.xmpp.packet.Presence: org.dom4j.Element element>;

        r6 = interfaceinvoke $r4.<org.dom4j.Element: org.dom4j.Element addElement(java.lang.String)>("status");

     label3:
        interfaceinvoke r6.<org.dom4j.Element: void setText(java.lang.String)>(r3);

        return;
    }

    public int getPriority()
    {
        org.xmpp.packet.Presence r0;
        int $i0;
        org.dom4j.Element $r1;
        java.lang.String $r2;
        java.lang.Exception $r3;

        r0 := @this: org.xmpp.packet.Presence;

        $r1 = r0.<org.xmpp.packet.Presence: org.dom4j.Element element>;

        $r2 = interfaceinvoke $r1.<org.dom4j.Element: java.lang.String elementText(java.lang.String)>("priority");

        if $r2 != null goto label1;

        return 0;

     label1:
        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r2);

     label2:
        return $i0;

     label3:
        $r3 := @caughtexception;

        return 0;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void setPriority(int)
    {
        org.xmpp.packet.Presence r6;
        java.lang.IllegalArgumentException $r13;
        int i0, $i2;
        java.lang.StringBuilder $r2, $r3, $r4, $r12;
        org.dom4j.Element $r7, $r8, $r10, r11;
        java.lang.String $r5, $r9;

        r6 := @this: org.xmpp.packet.Presence;

        i0 := @parameter0: int;

        $i2 = (int) -128;

        if i0 < $i2 goto label1;

        if i0 <= 128 goto label2;

     label1:
        $r13 = new java.lang.IllegalArgumentException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Priority value of ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is outside the valid range of -128 through 128");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r13;

     label2:
        $r7 = r6.<org.xmpp.packet.Presence: org.dom4j.Element element>;

        $r8 = interfaceinvoke $r7.<org.dom4j.Element: org.dom4j.Element element(java.lang.String)>("priority");

        r11 = $r8;

        if $r8 != null goto label3;

        $r10 = r6.<org.xmpp.packet.Presence: org.dom4j.Element element>;

        r11 = interfaceinvoke $r10.<org.dom4j.Element: org.dom4j.Element addElement(java.lang.String)>("priority");

     label3:
        $r9 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        interfaceinvoke r11.<org.dom4j.Element: void setText(java.lang.String)>($r9);

        return;
    }

    public org.dom4j.Element getChildElement(java.lang.String, java.lang.String)
    {
        org.xmpp.packet.Presence r0;
        java.util.Iterator $r3;
        org.dom4j.Element $r2, r5;
        java.lang.Object $r4;
        java.lang.String r1, $r6, r7;
        boolean $z0, $z1;

        r0 := @this: org.xmpp.packet.Presence;

        r1 := @parameter0: java.lang.String;

        r7 := @parameter1: java.lang.String;

        $r2 = r0.<org.xmpp.packet.Presence: org.dom4j.Element element>;

        $r3 = interfaceinvoke $r2.<org.dom4j.Element: java.util.Iterator elementIterator(java.lang.String)>(r1);

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.dom4j.Element) $r4;

        $r6 = interfaceinvoke r5.<org.dom4j.Element: java.lang.String getNamespaceURI()>();

        $z1 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>(r7);

        if $z1 == 0 goto label2;

        return r5;

     label2:
        goto label1;

     label3:
        return null;
    }

    public org.dom4j.Element addChildElement(java.lang.String, java.lang.String)
    {
        org.xmpp.packet.Presence r0;
        org.dom4j.Element $r3, $r4;
        java.lang.String r1, r2;

        r0 := @this: org.xmpp.packet.Presence;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = r0.<org.xmpp.packet.Presence: org.dom4j.Element element>;

        $r4 = interfaceinvoke $r3.<org.dom4j.Element: org.dom4j.Element addElement(java.lang.String,java.lang.String)>(r1, r2);

        return $r4;
    }

    public org.xmpp.packet.Presence createCopy()
    {
        org.xmpp.packet.Presence $r0, r1;

        r1 := @this: org.xmpp.packet.Presence;

        $r0 = new org.xmpp.packet.Presence;

        specialinvoke $r0.<org.xmpp.packet.Presence: void <init>(org.xmpp.packet.Presence)>(r1);

        return $r0;
    }

    public volatile org.xmpp.packet.Packet createCopy()
    {
        org.xmpp.packet.Presence r0, $r1;

        r0 := @this: org.xmpp.packet.Presence;

        $r1 = virtualinvoke r0.<org.xmpp.packet.Presence: org.xmpp.packet.Presence createCopy()>();

        return $r1;
    }
}
