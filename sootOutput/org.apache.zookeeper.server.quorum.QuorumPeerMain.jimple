public class org.apache.zookeeper.server.quorum.QuorumPeerMain extends java.lang.Object
{
    private static final org.slf4j.Logger LOG;
    private static final java.lang.String USAGE;
    protected org.apache.zookeeper.server.quorum.QuorumPeer quorumPeer;

    public void <init>()
    {
        org.apache.zookeeper.server.quorum.QuorumPeerMain r0;

        r0 := @this: org.apache.zookeeper.server.quorum.QuorumPeerMain;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void main(java.lang.String[])
    {
        java.io.PrintStream $r6, $r10;
        org.apache.zookeeper.server.quorum.QuorumPeerMain $r0;
        org.slf4j.Logger $r3, $r5, $r8, $r9, $r11;
        java.lang.String[] r1;
        java.lang.IllegalArgumentException $r7;
        java.lang.Exception $r2;
        org.apache.zookeeper.server.quorum.QuorumPeerConfig$ConfigException $r4;

        r1 := @parameter0: java.lang.String[];

        $r0 = new org.apache.zookeeper.server.quorum.QuorumPeerMain;

        specialinvoke $r0.<org.apache.zookeeper.server.quorum.QuorumPeerMain: void <init>()>();

     label1:
        virtualinvoke $r0.<org.apache.zookeeper.server.quorum.QuorumPeerMain: void initializeAndRun(java.lang.String[])>(r1);

     label2:
        goto label6;

     label3:
        $r7 := @caughtexception;

        $r8 = <org.apache.zookeeper.server.quorum.QuorumPeerMain: org.slf4j.Logger LOG>;

        interfaceinvoke $r8.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>("Invalid arguments, exiting abnormally", $r7);

        $r9 = <org.apache.zookeeper.server.quorum.QuorumPeerMain: org.slf4j.Logger LOG>;

        interfaceinvoke $r9.<org.slf4j.Logger: void info(java.lang.String)>("Usage: QuorumPeerMain configfile");

        $r10 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>("Usage: QuorumPeerMain configfile");

        staticinvoke <java.lang.System: void exit(int)>(2);

        goto label6;

     label4:
        $r4 := @caughtexception;

        $r5 = <org.apache.zookeeper.server.quorum.QuorumPeerMain: org.slf4j.Logger LOG>;

        interfaceinvoke $r5.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>("Invalid config, exiting abnormally", $r4);

        $r6 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r6.<java.io.PrintStream: void println(java.lang.String)>("Invalid config, exiting abnormally");

        staticinvoke <java.lang.System: void exit(int)>(2);

        goto label6;

     label5:
        $r2 := @caughtexception;

        $r3 = <org.apache.zookeeper.server.quorum.QuorumPeerMain: org.slf4j.Logger LOG>;

        interfaceinvoke $r3.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>("Unexpected exception, exiting abnormally", $r2);

        staticinvoke <java.lang.System: void exit(int)>(1);

     label6:
        $r11 = <org.apache.zookeeper.server.quorum.QuorumPeerMain: org.slf4j.Logger LOG>;

        interfaceinvoke $r11.<org.slf4j.Logger: void info(java.lang.String)>("Exiting normally");

        staticinvoke <java.lang.System: void exit(int)>(0);

        return;

        catch java.lang.IllegalArgumentException from label1 to label2 with label3;
        catch org.apache.zookeeper.server.quorum.QuorumPeerConfig$ConfigException from label1 to label2 with label4;
        catch java.lang.Exception from label1 to label2 with label5;
    }

    protected void initializeAndRun(java.lang.String[]) throws org.apache.zookeeper.server.quorum.QuorumPeerConfig$ConfigException, java.io.IOException
    {
        org.apache.zookeeper.server.quorum.QuorumPeerConfig $r0;
        org.slf4j.Logger $r5;
        org.apache.zookeeper.server.quorum.QuorumPeerMain r7;
        org.apache.zookeeper.server.DatadirCleanupManager $r2;
        java.lang.String[] r1;
        java.util.HashMap $r6;
        int $i0, $i1, $i2, $i3, $i4;
        java.lang.String $r3, $r4, $r8;

        r7 := @this: org.apache.zookeeper.server.quorum.QuorumPeerMain;

        r1 := @parameter0: java.lang.String[];

        $r0 = new org.apache.zookeeper.server.quorum.QuorumPeerConfig;

        specialinvoke $r0.<org.apache.zookeeper.server.quorum.QuorumPeerConfig: void <init>()>();

        $i0 = lengthof r1;

        if $i0 != 1 goto label1;

        $r8 = r1[0];

        virtualinvoke $r0.<org.apache.zookeeper.server.quorum.QuorumPeerConfig: void parse(java.lang.String)>($r8);

     label1:
        $r2 = new org.apache.zookeeper.server.DatadirCleanupManager;

        $r3 = virtualinvoke $r0.<org.apache.zookeeper.server.quorum.QuorumPeerConfig: java.lang.String getDataDir()>();

        $r4 = virtualinvoke $r0.<org.apache.zookeeper.server.quorum.QuorumPeerConfig: java.lang.String getDataLogDir()>();

        $i1 = virtualinvoke $r0.<org.apache.zookeeper.server.quorum.QuorumPeerConfig: int getSnapRetainCount()>();

        $i2 = virtualinvoke $r0.<org.apache.zookeeper.server.quorum.QuorumPeerConfig: int getPurgeInterval()>();

        specialinvoke $r2.<org.apache.zookeeper.server.DatadirCleanupManager: void <init>(java.lang.String,java.lang.String,int,int)>($r3, $r4, $i1, $i2);

        virtualinvoke $r2.<org.apache.zookeeper.server.DatadirCleanupManager: void start()>();

        $i3 = lengthof r1;

        if $i3 != 1 goto label2;

        $r6 = $r0.<org.apache.zookeeper.server.quorum.QuorumPeerConfig: java.util.HashMap servers>;

        $i4 = virtualinvoke $r6.<java.util.HashMap: int size()>();

        if $i4 <= 0 goto label2;

        virtualinvoke r7.<org.apache.zookeeper.server.quorum.QuorumPeerMain: void runFromConfig(org.apache.zookeeper.server.quorum.QuorumPeerConfig)>($r0);

        goto label3;

     label2:
        $r5 = <org.apache.zookeeper.server.quorum.QuorumPeerMain: org.slf4j.Logger LOG>;

        interfaceinvoke $r5.<org.slf4j.Logger: void warn(java.lang.String)>("Either no config or no quorum defined in config, running  in standalone mode");

        staticinvoke <org.apache.zookeeper.server.ZooKeeperServerMain: void main(java.lang.String[])>(r1);

     label3:
        return;
    }

    public void runFromConfig(org.apache.zookeeper.server.quorum.QuorumPeerConfig) throws java.io.IOException
    {
        org.apache.zookeeper.server.quorum.QuorumPeer $r5, $r6, $r10, $r14, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r25, $r27, $r28, $r30, $r32, $r33;
        org.apache.zookeeper.server.quorum.QuorumPeer$LearnerType $r31;
        java.util.Map $r15;
        org.apache.zookeeper.server.quorum.QuorumPeerConfig r2;
        java.net.InetSocketAddress $r3, $r7;
        javax.management.JMException $r36;
        org.apache.zookeeper.server.quorum.QuorumPeerMain r4;
        org.apache.zookeeper.server.ZKDatabase $r26;
        org.apache.zookeeper.server.quorum.flexible.QuorumVerifier $r24;
        org.apache.zookeeper.server.ServerCnxnFactory $r1;
        long $l2;
        org.apache.zookeeper.server.persistence.FileTxnSnapLog $r8, $r29;
        int $i0, $i1, $i3, $i4, $i5, $i6, $i7;
        java.lang.String $r11, $r13;
        org.slf4j.Logger $r0, $r35, $r37;
        java.io.File $r9, $r12;
        java.lang.InterruptedException $r34;

        r4 := @this: org.apache.zookeeper.server.quorum.QuorumPeerMain;

        r2 := @parameter0: org.apache.zookeeper.server.quorum.QuorumPeerConfig;

     label1:
        staticinvoke <org.apache.zookeeper.jmx.ManagedUtil: void registerLog4jMBeans()>();

     label2:
        goto label4;

     label3:
        $r36 := @caughtexception;

        $r37 = <org.apache.zookeeper.server.quorum.QuorumPeerMain: org.slf4j.Logger LOG>;

        interfaceinvoke $r37.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>("Unable to register log4j JMX control", $r36);

     label4:
        $r0 = <org.apache.zookeeper.server.quorum.QuorumPeerMain: org.slf4j.Logger LOG>;

        interfaceinvoke $r0.<org.slf4j.Logger: void info(java.lang.String)>("Starting quorum peer");

     label5:
        $r1 = staticinvoke <org.apache.zookeeper.server.ServerCnxnFactory: org.apache.zookeeper.server.ServerCnxnFactory createFactory()>();

        $r3 = virtualinvoke r2.<org.apache.zookeeper.server.quorum.QuorumPeerConfig: java.net.InetSocketAddress getClientPortAddress()>();

        $i0 = virtualinvoke r2.<org.apache.zookeeper.server.quorum.QuorumPeerConfig: int getMaxClientCnxns()>();

        virtualinvoke $r1.<org.apache.zookeeper.server.ServerCnxnFactory: void configure(java.net.InetSocketAddress,int)>($r3, $i0);

        $r5 = new org.apache.zookeeper.server.quorum.QuorumPeer;

        specialinvoke $r5.<org.apache.zookeeper.server.quorum.QuorumPeer: void <init>()>();

        r4.<org.apache.zookeeper.server.quorum.QuorumPeerMain: org.apache.zookeeper.server.quorum.QuorumPeer quorumPeer> = $r5;

        $r6 = r4.<org.apache.zookeeper.server.quorum.QuorumPeerMain: org.apache.zookeeper.server.quorum.QuorumPeer quorumPeer>;

        $r7 = virtualinvoke r2.<org.apache.zookeeper.server.quorum.QuorumPeerConfig: java.net.InetSocketAddress getClientPortAddress()>();

        virtualinvoke $r6.<org.apache.zookeeper.server.quorum.QuorumPeer: void setClientPortAddress(java.net.InetSocketAddress)>($r7);

        $r10 = r4.<org.apache.zookeeper.server.quorum.QuorumPeerMain: org.apache.zookeeper.server.quorum.QuorumPeer quorumPeer>;

        $r8 = new org.apache.zookeeper.server.persistence.FileTxnSnapLog;

        $r9 = new java.io.File;

        $r11 = virtualinvoke r2.<org.apache.zookeeper.server.quorum.QuorumPeerConfig: java.lang.String getDataLogDir()>();

        specialinvoke $r9.<java.io.File: void <init>(java.lang.String)>($r11);

        $r12 = new java.io.File;

        $r13 = virtualinvoke r2.<org.apache.zookeeper.server.quorum.QuorumPeerConfig: java.lang.String getDataDir()>();

        specialinvoke $r12.<java.io.File: void <init>(java.lang.String)>($r13);

        specialinvoke $r8.<org.apache.zookeeper.server.persistence.FileTxnSnapLog: void <init>(java.io.File,java.io.File)>($r9, $r12);

        virtualinvoke $r10.<org.apache.zookeeper.server.quorum.QuorumPeer: void setTxnFactory(org.apache.zookeeper.server.persistence.FileTxnSnapLog)>($r8);

        $r14 = r4.<org.apache.zookeeper.server.quorum.QuorumPeerMain: org.apache.zookeeper.server.quorum.QuorumPeer quorumPeer>;

        $r15 = virtualinvoke r2.<org.apache.zookeeper.server.quorum.QuorumPeerConfig: java.util.Map getServers()>();

        virtualinvoke $r14.<org.apache.zookeeper.server.quorum.QuorumPeer: void setQuorumPeers(java.util.Map)>($r15);

        $r16 = r4.<org.apache.zookeeper.server.quorum.QuorumPeerMain: org.apache.zookeeper.server.quorum.QuorumPeer quorumPeer>;

        $i1 = virtualinvoke r2.<org.apache.zookeeper.server.quorum.QuorumPeerConfig: int getElectionAlg()>();

        virtualinvoke $r16.<org.apache.zookeeper.server.quorum.QuorumPeer: void setElectionType(int)>($i1);

        $r17 = r4.<org.apache.zookeeper.server.quorum.QuorumPeerMain: org.apache.zookeeper.server.quorum.QuorumPeer quorumPeer>;

        $l2 = virtualinvoke r2.<org.apache.zookeeper.server.quorum.QuorumPeerConfig: long getServerId()>();

        virtualinvoke $r17.<org.apache.zookeeper.server.quorum.QuorumPeer: void setMyid(long)>($l2);

        $r18 = r4.<org.apache.zookeeper.server.quorum.QuorumPeerMain: org.apache.zookeeper.server.quorum.QuorumPeer quorumPeer>;

        $i3 = virtualinvoke r2.<org.apache.zookeeper.server.quorum.QuorumPeerConfig: int getTickTime()>();

        virtualinvoke $r18.<org.apache.zookeeper.server.quorum.QuorumPeer: void setTickTime(int)>($i3);

        $r19 = r4.<org.apache.zookeeper.server.quorum.QuorumPeerMain: org.apache.zookeeper.server.quorum.QuorumPeer quorumPeer>;

        $i4 = virtualinvoke r2.<org.apache.zookeeper.server.quorum.QuorumPeerConfig: int getMinSessionTimeout()>();

        virtualinvoke $r19.<org.apache.zookeeper.server.quorum.QuorumPeer: void setMinSessionTimeout(int)>($i4);

        $r20 = r4.<org.apache.zookeeper.server.quorum.QuorumPeerMain: org.apache.zookeeper.server.quorum.QuorumPeer quorumPeer>;

        $i5 = virtualinvoke r2.<org.apache.zookeeper.server.quorum.QuorumPeerConfig: int getMaxSessionTimeout()>();

        virtualinvoke $r20.<org.apache.zookeeper.server.quorum.QuorumPeer: void setMaxSessionTimeout(int)>($i5);

        $r21 = r4.<org.apache.zookeeper.server.quorum.QuorumPeerMain: org.apache.zookeeper.server.quorum.QuorumPeer quorumPeer>;

        $i6 = virtualinvoke r2.<org.apache.zookeeper.server.quorum.QuorumPeerConfig: int getInitLimit()>();

        virtualinvoke $r21.<org.apache.zookeeper.server.quorum.QuorumPeer: void setInitLimit(int)>($i6);

        $r22 = r4.<org.apache.zookeeper.server.quorum.QuorumPeerMain: org.apache.zookeeper.server.quorum.QuorumPeer quorumPeer>;

        $i7 = virtualinvoke r2.<org.apache.zookeeper.server.quorum.QuorumPeerConfig: int getSyncLimit()>();

        virtualinvoke $r22.<org.apache.zookeeper.server.quorum.QuorumPeer: void setSyncLimit(int)>($i7);

        $r23 = r4.<org.apache.zookeeper.server.quorum.QuorumPeerMain: org.apache.zookeeper.server.quorum.QuorumPeer quorumPeer>;

        $r24 = virtualinvoke r2.<org.apache.zookeeper.server.quorum.QuorumPeerConfig: org.apache.zookeeper.server.quorum.flexible.QuorumVerifier getQuorumVerifier()>();

        virtualinvoke $r23.<org.apache.zookeeper.server.quorum.QuorumPeer: void setQuorumVerifier(org.apache.zookeeper.server.quorum.flexible.QuorumVerifier)>($r24);

        $r25 = r4.<org.apache.zookeeper.server.quorum.QuorumPeerMain: org.apache.zookeeper.server.quorum.QuorumPeer quorumPeer>;

        virtualinvoke $r25.<org.apache.zookeeper.server.quorum.QuorumPeer: void setCnxnFactory(org.apache.zookeeper.server.ServerCnxnFactory)>($r1);

        $r28 = r4.<org.apache.zookeeper.server.quorum.QuorumPeerMain: org.apache.zookeeper.server.quorum.QuorumPeer quorumPeer>;

        $r26 = new org.apache.zookeeper.server.ZKDatabase;

        $r27 = r4.<org.apache.zookeeper.server.quorum.QuorumPeerMain: org.apache.zookeeper.server.quorum.QuorumPeer quorumPeer>;

        $r29 = virtualinvoke $r27.<org.apache.zookeeper.server.quorum.QuorumPeer: org.apache.zookeeper.server.persistence.FileTxnSnapLog getTxnFactory()>();

        specialinvoke $r26.<org.apache.zookeeper.server.ZKDatabase: void <init>(org.apache.zookeeper.server.persistence.FileTxnSnapLog)>($r29);

        virtualinvoke $r28.<org.apache.zookeeper.server.quorum.QuorumPeer: void setZKDatabase(org.apache.zookeeper.server.ZKDatabase)>($r26);

        $r30 = r4.<org.apache.zookeeper.server.quorum.QuorumPeerMain: org.apache.zookeeper.server.quorum.QuorumPeer quorumPeer>;

        $r31 = virtualinvoke r2.<org.apache.zookeeper.server.quorum.QuorumPeerConfig: org.apache.zookeeper.server.quorum.QuorumPeer$LearnerType getPeerType()>();

        virtualinvoke $r30.<org.apache.zookeeper.server.quorum.QuorumPeer: void setLearnerType(org.apache.zookeeper.server.quorum.QuorumPeer$LearnerType)>($r31);

        $r32 = r4.<org.apache.zookeeper.server.quorum.QuorumPeerMain: org.apache.zookeeper.server.quorum.QuorumPeer quorumPeer>;

        virtualinvoke $r32.<org.apache.zookeeper.server.quorum.QuorumPeer: void start()>();

        $r33 = r4.<org.apache.zookeeper.server.quorum.QuorumPeerMain: org.apache.zookeeper.server.quorum.QuorumPeer quorumPeer>;

        virtualinvoke $r33.<org.apache.zookeeper.server.quorum.QuorumPeer: void join()>();

     label6:
        goto label8;

     label7:
        $r34 := @caughtexception;

        $r35 = <org.apache.zookeeper.server.quorum.QuorumPeerMain: org.slf4j.Logger LOG>;

        interfaceinvoke $r35.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>("Quorum Peer interrupted", $r34);

     label8:
        return;

        catch javax.management.JMException from label1 to label2 with label3;
        catch java.lang.InterruptedException from label5 to label6 with label7;
    }

    static void <clinit>()
    {
        org.slf4j.Logger $r0;

        <org.apache.zookeeper.server.quorum.QuorumPeerMain: java.lang.String USAGE> = "Usage: QuorumPeerMain configfile";

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lorg/apache/zookeeper/server/quorum/QuorumPeerMain;");

        <org.apache.zookeeper.server.quorum.QuorumPeerMain: org.slf4j.Logger LOG> = $r0;

        return;
    }
}
