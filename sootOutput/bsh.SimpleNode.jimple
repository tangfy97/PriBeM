class bsh.SimpleNode extends java.lang.Object implements bsh.Node
{
    public static bsh.SimpleNode JAVACODE;
    protected bsh.Node parent;
    protected bsh.Node[] children;
    protected int id;
    bsh.Token firstToken;
    bsh.Token lastToken;
    java.lang.String sourceFile;

    public void <init>(int)
    {
        int i0;
        bsh.SimpleNode r0;

        r0 := @this: bsh.SimpleNode;

        i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<bsh.SimpleNode: int id> = i0;

        return;
    }

    public void jjtOpen()
    {
        bsh.SimpleNode r0;

        r0 := @this: bsh.SimpleNode;

        return;
    }

    public void jjtClose()
    {
        bsh.SimpleNode r0;

        r0 := @this: bsh.SimpleNode;

        return;
    }

    public void jjtSetParent(bsh.Node)
    {
        bsh.SimpleNode r0;
        bsh.Node r1;

        r0 := @this: bsh.SimpleNode;

        r1 := @parameter0: bsh.Node;

        r0.<bsh.SimpleNode: bsh.Node parent> = r1;

        return;
    }

    public bsh.Node jjtGetParent()
    {
        bsh.SimpleNode r0;
        bsh.Node $r1;

        r0 := @this: bsh.SimpleNode;

        $r1 = r0.<bsh.SimpleNode: bsh.Node parent>;

        return $r1;
    }

    public void jjtAddChild(bsh.Node, int)
    {
        bsh.Node[] $r1, $r2, r4, $r5, $r6, $r7, $r8;
        bsh.SimpleNode r0;
        int i0, $i1, $i2, $i3, $i4;
        bsh.Node r3;

        r0 := @this: bsh.SimpleNode;

        r3 := @parameter0: bsh.Node;

        i0 := @parameter1: int;

        $r1 = r0.<bsh.SimpleNode: bsh.Node[] children>;

        if $r1 != null goto label1;

        $i4 = i0 + 1;

        $r7 = newarray (bsh.Node)[$i4];

        r0.<bsh.SimpleNode: bsh.Node[] children> = $r7;

        goto label2;

     label1:
        $r2 = r0.<bsh.SimpleNode: bsh.Node[] children>;

        $i1 = lengthof $r2;

        if i0 < $i1 goto label2;

        $i2 = i0 + 1;

        r4 = newarray (bsh.Node)[$i2];

        $r6 = r0.<bsh.SimpleNode: bsh.Node[] children>;

        $r5 = r0.<bsh.SimpleNode: bsh.Node[] children>;

        $i3 = lengthof $r5;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r6, 0, r4, 0, $i3);

        r0.<bsh.SimpleNode: bsh.Node[] children> = r4;

     label2:
        $r8 = r0.<bsh.SimpleNode: bsh.Node[] children>;

        $r8[i0] = r3;

        return;
    }

    public bsh.Node jjtGetChild(int)
    {
        int i0;
        bsh.Node[] $r1;
        bsh.SimpleNode r0;
        bsh.Node $r2;

        r0 := @this: bsh.SimpleNode;

        i0 := @parameter0: int;

        $r1 = r0.<bsh.SimpleNode: bsh.Node[] children>;

        $r2 = $r1[i0];

        return $r2;
    }

    public bsh.SimpleNode getChild(int)
    {
        int i0;
        bsh.SimpleNode r0, $r2;
        bsh.Node $r1;

        r0 := @this: bsh.SimpleNode;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<bsh.SimpleNode: bsh.Node jjtGetChild(int)>(i0);

        $r2 = (bsh.SimpleNode) $r1;

        return $r2;
    }

    public int jjtGetNumChildren()
    {
        int $i0;
        bsh.Node[] $r1, $r2;
        bsh.SimpleNode r0;

        r0 := @this: bsh.SimpleNode;

        $r1 = r0.<bsh.SimpleNode: bsh.Node[] children>;

        if $r1 != null goto label1;

        $i0 = 0;

        goto label2;

     label1:
        $r2 = r0.<bsh.SimpleNode: bsh.Node[] children>;

        $i0 = lengthof $r2;

     label2:
        return $i0;
    }

    public java.lang.String toString()
    {
        int $i0;
        bsh.SimpleNode r0;
        java.lang.String[] $r1;
        java.lang.String $r2;

        r0 := @this: bsh.SimpleNode;

        $r1 = <bsh.ParserTreeConstants: java.lang.String[] jjtNodeName>;

        $i0 = r0.<bsh.SimpleNode: int id>;

        $r2 = $r1[$i0];

        return $r2;
    }

    public java.lang.String toString(java.lang.String)
    {
        java.lang.StringBuffer $r0, $r2, $r5;
        bsh.SimpleNode r3;
        java.lang.String r1, $r4, $r6;

        r3 := @this: bsh.SimpleNode;

        r1 := @parameter0: java.lang.String;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1);

        $r4 = virtualinvoke r3.<bsh.SimpleNode: java.lang.String toString()>();

        $r5 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r6;
    }

    public void dump(java.lang.String)
    {
        java.io.PrintStream $r2;
        bsh.Node[] $r4, $r5, $r12;
        bsh.SimpleNode r0, r7;
        java.lang.StringBuffer $r8, $r9, $r10;
        int i0, $i1;
        java.lang.String r1, $r3, $r11;
        bsh.Node $r6;

        r0 := @this: bsh.SimpleNode;

        r1 := @parameter0: java.lang.String;

        $r2 = <java.lang.System: java.io.PrintStream out>;

        $r3 = virtualinvoke r0.<bsh.SimpleNode: java.lang.String toString(java.lang.String)>(r1);

        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>($r3);

        $r4 = r0.<bsh.SimpleNode: bsh.Node[] children>;

        if $r4 == null goto label4;

        i0 = 0;

        goto label3;

     label1:
        $r5 = r0.<bsh.SimpleNode: bsh.Node[] children>;

        $r6 = $r5[i0];

        r7 = (bsh.SimpleNode) $r6;

        if r7 == null goto label2;

        $r8 = new java.lang.StringBuffer;

        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r7.<bsh.SimpleNode: void dump(java.lang.String)>($r11);

     label2:
        i0 = i0 + 1;

     label3:
        $r12 = r0.<bsh.SimpleNode: bsh.Node[] children>;

        $i1 = lengthof $r12;

        if i0 < $i1 goto label1;

     label4:
        return;
    }

    public void prune()
    {
        bsh.SimpleNode r0;

        r0 := @this: bsh.SimpleNode;

        virtualinvoke r0.<bsh.SimpleNode: void jjtSetParent(bsh.Node)>(null);

        return;
    }

    public java.lang.Object eval(bsh.CallStack, bsh.Interpreter) throws bsh.EvalError
    {
        bsh.Interpreter r9;
        bsh.SimpleNode r3;
        bsh.CallStack r8;
        java.lang.StringBuffer $r1, $r2, $r6;
        java.lang.Class $r4;
        bsh.InterpreterError $r0;
        java.lang.String $r5, $r7;

        r3 := @this: bsh.SimpleNode;

        r8 := @parameter0: bsh.CallStack;

        r9 := @parameter1: bsh.Interpreter;

        $r0 = new bsh.InterpreterError;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Unimplemented or inappropriate for ");

        $r4 = virtualinvoke r3.<java.lang.Object: java.lang.Class getClass()>();

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.String getName()>();

        $r6 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r0.<bsh.InterpreterError: void <init>(java.lang.String)>($r7);

        throw $r0;
    }

    public void setSourceFile(java.lang.String)
    {
        bsh.SimpleNode r0;
        java.lang.String r1;

        r0 := @this: bsh.SimpleNode;

        r1 := @parameter0: java.lang.String;

        r0.<bsh.SimpleNode: java.lang.String sourceFile> = r1;

        return;
    }

    public java.lang.String getSourceFile()
    {
        bsh.SimpleNode r0, $r5;
        java.lang.String $r1, $r2, $r6;
        bsh.Node $r3, $r4;

        r0 := @this: bsh.SimpleNode;

        $r1 = r0.<bsh.SimpleNode: java.lang.String sourceFile>;

        if $r1 != null goto label2;

        $r3 = r0.<bsh.SimpleNode: bsh.Node parent>;

        if $r3 == null goto label1;

        $r4 = r0.<bsh.SimpleNode: bsh.Node parent>;

        $r5 = (bsh.SimpleNode) $r4;

        $r6 = virtualinvoke $r5.<bsh.SimpleNode: java.lang.String getSourceFile()>();

        return $r6;

     label1:
        return "<unknown file>";

     label2:
        $r2 = r0.<bsh.SimpleNode: java.lang.String sourceFile>;

        return $r2;
    }

    public int getLineNumber()
    {
        int $i0;
        bsh.SimpleNode r0;
        bsh.Token $r1;

        r0 := @this: bsh.SimpleNode;

        $r1 = r0.<bsh.SimpleNode: bsh.Token firstToken>;

        $i0 = $r1.<bsh.Token: int beginLine>;

        return $i0;
    }

    public java.lang.String getText()
    {
        bsh.SimpleNode r1;
        java.lang.StringBuffer $r0;
        bsh.Token $r4, r7;
        java.lang.String $r2, $r3, $r5, $r6, $r8;
        boolean $z0, $z1, $z2;

        r1 := @this: bsh.SimpleNode;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        r7 = r1.<bsh.SimpleNode: bsh.Token firstToken>;

        goto label4;

     label1:
        $r2 = r7.<bsh.Token: java.lang.String image>;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $r3 = r7.<bsh.Token: java.lang.String image>;

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(".");

        if $z0 != 0 goto label2;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");

     label2:
        $r4 = r1.<bsh.SimpleNode: bsh.Token lastToken>;

        if r7 == $r4 goto label5;

        $r5 = r7.<bsh.Token: java.lang.String image>;

        $z1 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>("{");

        if $z1 != 0 goto label5;

        $r6 = r7.<bsh.Token: java.lang.String image>;

        $z2 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>(";");

        if $z2 == 0 goto label3;

        goto label5;

     label3:
        r7 = r7.<bsh.Token: bsh.Token next>;

     label4:
        if r7 != null goto label1;

     label5:
        $r8 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r8;
    }

    static void <clinit>()
    {
        int $i1;
        bsh.SimpleNode$1 $r1;

        $r1 = new bsh.SimpleNode$1;

        $i1 = (int) -1;

        specialinvoke $r1.<bsh.SimpleNode$1: void <init>(int)>($i1);

        <bsh.SimpleNode: bsh.SimpleNode JAVACODE> = $r1;

        return;
    }
}
