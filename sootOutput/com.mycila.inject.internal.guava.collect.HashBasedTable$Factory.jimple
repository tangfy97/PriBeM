class com.mycila.inject.internal.guava.collect.HashBasedTable$Factory extends java.lang.Object implements com.mycila.inject.internal.guava.base.Supplier, java.io.Serializable
{
    final int expectedSize;
    private static final long serialVersionUID;

    void <init>(int)
    {
        int i0;
        com.mycila.inject.internal.guava.collect.HashBasedTable$Factory r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.HashBasedTable$Factory;

        i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.mycila.inject.internal.guava.collect.HashBasedTable$Factory: int expectedSize> = i0;

        return;
    }

    public java.util.Map get()
    {
        int $i0;
        java.util.HashMap $r1;
        com.mycila.inject.internal.guava.collect.HashBasedTable$Factory r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.HashBasedTable$Factory;

        $i0 = r0.<com.mycila.inject.internal.guava.collect.HashBasedTable$Factory: int expectedSize>;

        $r1 = staticinvoke <com.mycila.inject.internal.guava.collect.Maps: java.util.HashMap newHashMapWithExpectedSize(int)>($i0);

        return $r1;
    }

    public volatile java.lang.Object get()
    {
        com.mycila.inject.internal.guava.collect.HashBasedTable$Factory r0;
        java.util.Map $r1;

        r0 := @this: com.mycila.inject.internal.guava.collect.HashBasedTable$Factory;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.HashBasedTable$Factory: java.util.Map get()>();

        return $r1;
    }

    public static void <clinit>()
    {
        <com.mycila.inject.internal.guava.collect.HashBasedTable$Factory: long serialVersionUID> = 0L;

        return;
    }
}
