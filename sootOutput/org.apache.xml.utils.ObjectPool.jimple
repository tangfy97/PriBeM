public class org.apache.xml.utils.ObjectPool extends java.lang.Object implements java.io.Serializable
{
    private final java.lang.Class objectType;
    private final java.util.Vector freeStack;

    public void <init>(java.lang.Class)
    {
        java.lang.Class r1;
        java.util.Vector $r2;
        org.apache.xml.utils.ObjectPool r0;

        r0 := @this: org.apache.xml.utils.ObjectPool;

        r1 := @parameter0: java.lang.Class;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.xml.utils.ObjectPool: java.lang.Class objectType> = r1;

        $r2 = new java.util.Vector;

        specialinvoke $r2.<java.util.Vector: void <init>()>();

        r0.<org.apache.xml.utils.ObjectPool: java.util.Vector freeStack> = $r2;

        return;
    }

    public void <init>(java.lang.String)
    {
        org.apache.xml.utils.WrappedRuntimeException $r6;
        java.util.Vector $r4;
        java.lang.Class $r3;
        java.lang.ClassNotFoundException $r5;
        java.lang.String r1;
        java.lang.ClassLoader $r2;
        org.apache.xml.utils.ObjectPool r0;

        r0 := @this: org.apache.xml.utils.ObjectPool;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

     label1:
        $r2 = staticinvoke <org.apache.xml.utils.ObjectFactory: java.lang.ClassLoader findClassLoader()>();

        $r3 = staticinvoke <org.apache.xml.utils.ObjectFactory: java.lang.Class findProviderClass(java.lang.String,java.lang.ClassLoader,boolean)>(r1, $r2, 1);

        r0.<org.apache.xml.utils.ObjectPool: java.lang.Class objectType> = $r3;

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        $r6 = new org.apache.xml.utils.WrappedRuntimeException;

        specialinvoke $r6.<org.apache.xml.utils.WrappedRuntimeException: void <init>(java.lang.Exception)>($r5);

        throw $r6;

     label4:
        $r4 = new java.util.Vector;

        specialinvoke $r4.<java.util.Vector: void <init>()>();

        r0.<org.apache.xml.utils.ObjectPool: java.util.Vector freeStack> = $r4;

        return;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    public void <init>(java.lang.Class, int)
    {
        java.util.Vector $r2;
        int i0;
        java.lang.Class r1;
        org.apache.xml.utils.ObjectPool r0;

        r0 := @this: org.apache.xml.utils.ObjectPool;

        r1 := @parameter0: java.lang.Class;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.xml.utils.ObjectPool: java.lang.Class objectType> = r1;

        $r2 = new java.util.Vector;

        specialinvoke $r2.<java.util.Vector: void <init>(int)>(i0);

        r0.<org.apache.xml.utils.ObjectPool: java.util.Vector freeStack> = $r2;

        return;
    }

    public void <init>()
    {
        java.util.Vector $r1;
        org.apache.xml.utils.ObjectPool r0;

        r0 := @this: org.apache.xml.utils.ObjectPool;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.xml.utils.ObjectPool: java.lang.Class objectType> = null;

        $r1 = new java.util.Vector;

        specialinvoke $r1.<java.util.Vector: void <init>()>();

        r0.<org.apache.xml.utils.ObjectPool: java.util.Vector freeStack> = $r1;

        return;
    }

    public synchronized java.lang.Object getInstanceIfFree()
    {
        java.util.Vector $r1, $r2, $r4, $r5;
        int $i0, $i1;
        java.lang.Object $r3;
        org.apache.xml.utils.ObjectPool r0;
        boolean $z0;

        r0 := @this: org.apache.xml.utils.ObjectPool;

        $r1 = r0.<org.apache.xml.utils.ObjectPool: java.util.Vector freeStack>;

        $z0 = virtualinvoke $r1.<java.util.Vector: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $r2 = r0.<org.apache.xml.utils.ObjectPool: java.util.Vector freeStack>;

        $r3 = virtualinvoke $r2.<java.util.Vector: java.lang.Object lastElement()>();

        $r5 = r0.<org.apache.xml.utils.ObjectPool: java.util.Vector freeStack>;

        $r4 = r0.<org.apache.xml.utils.ObjectPool: java.util.Vector freeStack>;

        $i0 = virtualinvoke $r4.<java.util.Vector: int size()>();

        $i1 = $i0 - 1;

        virtualinvoke $r5.<java.util.Vector: void setSize(int)>($i1);

        return $r3;

     label1:
        return null;
    }

    public synchronized java.lang.Object getInstance()
    {
        java.lang.IllegalAccessException $r8;
        java.lang.RuntimeException $r9;
        java.util.Vector $r1, $r2, $r4, $r5;
        int $i0, $i1;
        java.lang.InstantiationException $r11;
        java.lang.Object $r3, $r7;
        java.lang.Class $r6;
        java.lang.String $r10;
        org.apache.xml.utils.ObjectPool r0;
        boolean $z0;

        r0 := @this: org.apache.xml.utils.ObjectPool;

        $r1 = r0.<org.apache.xml.utils.ObjectPool: java.util.Vector freeStack>;

        $z0 = virtualinvoke $r1.<java.util.Vector: boolean isEmpty()>();

        if $z0 == 0 goto label5;

     label1:
        $r6 = r0.<org.apache.xml.utils.ObjectPool: java.lang.Class objectType>;

        $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.Object newInstance()>();

        return $r7;

     label2:
        $r11 := @caughtexception;

        goto label4;

     label3:
        $r8 := @caughtexception;

     label4:
        $r9 = new java.lang.RuntimeException;

        $r10 = staticinvoke <org.apache.xml.res.XMLMessages: java.lang.String createXMLMessage(java.lang.String,java.lang.Object[])>("ER_EXCEPTION_CREATING_POOL", null);

        specialinvoke $r9.<java.lang.RuntimeException: void <init>(java.lang.String)>($r10);

        throw $r9;

     label5:
        $r2 = r0.<org.apache.xml.utils.ObjectPool: java.util.Vector freeStack>;

        $r3 = virtualinvoke $r2.<java.util.Vector: java.lang.Object lastElement()>();

        $r5 = r0.<org.apache.xml.utils.ObjectPool: java.util.Vector freeStack>;

        $r4 = r0.<org.apache.xml.utils.ObjectPool: java.util.Vector freeStack>;

        $i0 = virtualinvoke $r4.<java.util.Vector: int size()>();

        $i1 = $i0 - 1;

        virtualinvoke $r5.<java.util.Vector: void setSize(int)>($i1);

        return $r3;

        catch java.lang.InstantiationException from label1 to label2 with label2;
        catch java.lang.IllegalAccessException from label1 to label2 with label3;
    }

    public synchronized void freeInstance(java.lang.Object)
    {
        java.lang.Object r1;
        java.util.Vector $r2;
        org.apache.xml.utils.ObjectPool r0;

        r0 := @this: org.apache.xml.utils.ObjectPool;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.apache.xml.utils.ObjectPool: java.util.Vector freeStack>;

        virtualinvoke $r2.<java.util.Vector: void addElement(java.lang.Object)>(r1);

        return;
    }
}
