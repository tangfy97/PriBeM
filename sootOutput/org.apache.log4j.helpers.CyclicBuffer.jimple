public class org.apache.log4j.helpers.CyclicBuffer extends java.lang.Object
{
    org.apache.log4j.spi.LoggingEvent[] ea;
    int first;
    int last;
    int numElems;
    int maxSize;

    public void <init>(int) throws java.lang.IllegalArgumentException
    {
        java.lang.IllegalArgumentException $r2;
        org.apache.log4j.spi.LoggingEvent[] $r1;
        java.lang.StringBuffer $r3, $r4, $r5, $r6;
        org.apache.log4j.helpers.CyclicBuffer r0;
        int i0;
        java.lang.String $r7;

        r0 := @this: org.apache.log4j.helpers.CyclicBuffer;

        i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if i0 >= 1 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("The maxSize argument (");

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(") is not a positive integer.");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r2;

     label1:
        r0.<org.apache.log4j.helpers.CyclicBuffer: int maxSize> = i0;

        $r1 = newarray (org.apache.log4j.spi.LoggingEvent)[i0];

        r0.<org.apache.log4j.helpers.CyclicBuffer: org.apache.log4j.spi.LoggingEvent[] ea> = $r1;

        r0.<org.apache.log4j.helpers.CyclicBuffer: int first> = 0;

        r0.<org.apache.log4j.helpers.CyclicBuffer: int last> = 0;

        r0.<org.apache.log4j.helpers.CyclicBuffer: int numElems> = 0;

        return;
    }

    public void add(org.apache.log4j.spi.LoggingEvent)
    {
        org.apache.log4j.spi.LoggingEvent r1;
        org.apache.log4j.spi.LoggingEvent[] $r2;
        org.apache.log4j.helpers.CyclicBuffer r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10;

        r0 := @this: org.apache.log4j.helpers.CyclicBuffer;

        r1 := @parameter0: org.apache.log4j.spi.LoggingEvent;

        $r2 = r0.<org.apache.log4j.helpers.CyclicBuffer: org.apache.log4j.spi.LoggingEvent[] ea>;

        $i0 = r0.<org.apache.log4j.helpers.CyclicBuffer: int last>;

        $r2[$i0] = r1;

        $i1 = r0.<org.apache.log4j.helpers.CyclicBuffer: int last>;

        $i2 = $i1 + 1;

        r0.<org.apache.log4j.helpers.CyclicBuffer: int last> = $i2;

        $i3 = r0.<org.apache.log4j.helpers.CyclicBuffer: int maxSize>;

        if $i2 != $i3 goto label1;

        r0.<org.apache.log4j.helpers.CyclicBuffer: int last> = 0;

     label1:
        $i5 = r0.<org.apache.log4j.helpers.CyclicBuffer: int numElems>;

        $i4 = r0.<org.apache.log4j.helpers.CyclicBuffer: int maxSize>;

        if $i5 >= $i4 goto label2;

        $i9 = r0.<org.apache.log4j.helpers.CyclicBuffer: int numElems>;

        $i10 = $i9 + 1;

        r0.<org.apache.log4j.helpers.CyclicBuffer: int numElems> = $i10;

        goto label3;

     label2:
        $i6 = r0.<org.apache.log4j.helpers.CyclicBuffer: int first>;

        $i7 = $i6 + 1;

        r0.<org.apache.log4j.helpers.CyclicBuffer: int first> = $i7;

        $i8 = r0.<org.apache.log4j.helpers.CyclicBuffer: int maxSize>;

        if $i7 != $i8 goto label3;

        r0.<org.apache.log4j.helpers.CyclicBuffer: int first> = 0;

     label3:
        return;
    }

    public org.apache.log4j.spi.LoggingEvent get(int)
    {
        org.apache.log4j.spi.LoggingEvent $r2;
        org.apache.log4j.spi.LoggingEvent[] $r1;
        org.apache.log4j.helpers.CyclicBuffer r0;
        int i0, $i1, $i2, $i3, $i4, $i5;

        r0 := @this: org.apache.log4j.helpers.CyclicBuffer;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        $i1 = r0.<org.apache.log4j.helpers.CyclicBuffer: int numElems>;

        if i0 < $i1 goto label2;

     label1:
        return null;

     label2:
        $r1 = r0.<org.apache.log4j.helpers.CyclicBuffer: org.apache.log4j.spi.LoggingEvent[] ea>;

        $i2 = r0.<org.apache.log4j.helpers.CyclicBuffer: int first>;

        $i4 = $i2 + i0;

        $i3 = r0.<org.apache.log4j.helpers.CyclicBuffer: int maxSize>;

        $i5 = $i4 % $i3;

        $r2 = $r1[$i5];

        return $r2;
    }

    public int getMaxSize()
    {
        int $i0;
        org.apache.log4j.helpers.CyclicBuffer r0;

        r0 := @this: org.apache.log4j.helpers.CyclicBuffer;

        $i0 = r0.<org.apache.log4j.helpers.CyclicBuffer: int maxSize>;

        return $i0;
    }

    public org.apache.log4j.spi.LoggingEvent get()
    {
        org.apache.log4j.spi.LoggingEvent r3;
        org.apache.log4j.spi.LoggingEvent[] $r1, $r2;
        org.apache.log4j.helpers.CyclicBuffer r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;

        r0 := @this: org.apache.log4j.helpers.CyclicBuffer;

        r3 = null;

        $i0 = r0.<org.apache.log4j.helpers.CyclicBuffer: int numElems>;

        if $i0 <= 0 goto label1;

        $i1 = r0.<org.apache.log4j.helpers.CyclicBuffer: int numElems>;

        $i2 = $i1 - 1;

        r0.<org.apache.log4j.helpers.CyclicBuffer: int numElems> = $i2;

        $r1 = r0.<org.apache.log4j.helpers.CyclicBuffer: org.apache.log4j.spi.LoggingEvent[] ea>;

        $i3 = r0.<org.apache.log4j.helpers.CyclicBuffer: int first>;

        r3 = $r1[$i3];

        $r2 = r0.<org.apache.log4j.helpers.CyclicBuffer: org.apache.log4j.spi.LoggingEvent[] ea>;

        $i4 = r0.<org.apache.log4j.helpers.CyclicBuffer: int first>;

        $r2[$i4] = null;

        $i5 = r0.<org.apache.log4j.helpers.CyclicBuffer: int first>;

        $i6 = $i5 + 1;

        r0.<org.apache.log4j.helpers.CyclicBuffer: int first> = $i6;

        $i7 = r0.<org.apache.log4j.helpers.CyclicBuffer: int maxSize>;

        if $i6 != $i7 goto label1;

        r0.<org.apache.log4j.helpers.CyclicBuffer: int first> = 0;

     label1:
        return r3;
    }

    public int length()
    {
        int $i0;
        org.apache.log4j.helpers.CyclicBuffer r0;

        r0 := @this: org.apache.log4j.helpers.CyclicBuffer;

        $i0 = r0.<org.apache.log4j.helpers.CyclicBuffer: int numElems>;

        return $i0;
    }

    public void resize(int)
    {
        org.apache.log4j.spi.LoggingEvent[] r1, $r2, $r4;
        java.lang.StringBuffer $r6, $r7, $r8, $r9;
        org.apache.log4j.helpers.CyclicBuffer r0;
        int i0, $i1, $i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, i10;
        java.lang.String $r10;
        org.apache.log4j.spi.LoggingEvent $r3;
        java.lang.IllegalArgumentException $r5;

        r0 := @this: org.apache.log4j.helpers.CyclicBuffer;

        i0 := @parameter0: int;

        if i0 >= 0 goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Negative array size [");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("] not allowed.");

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r5;

     label1:
        $i1 = r0.<org.apache.log4j.helpers.CyclicBuffer: int numElems>;

        if i0 != $i1 goto label2;

        return;

     label2:
        r1 = newarray (org.apache.log4j.spi.LoggingEvent)[i0];

        $i2 = r0.<org.apache.log4j.helpers.CyclicBuffer: int numElems>;

        if i0 >= $i2 goto label3;

        $i9 = i0;

        goto label4;

     label3:
        $i9 = r0.<org.apache.log4j.helpers.CyclicBuffer: int numElems>;

     label4:
        i3 = $i9;

        i10 = 0;

     label5:
        if i10 >= i3 goto label7;

        $r2 = r0.<org.apache.log4j.helpers.CyclicBuffer: org.apache.log4j.spi.LoggingEvent[] ea>;

        $i4 = r0.<org.apache.log4j.helpers.CyclicBuffer: int first>;

        $r3 = $r2[$i4];

        r1[i10] = $r3;

        $r4 = r0.<org.apache.log4j.helpers.CyclicBuffer: org.apache.log4j.spi.LoggingEvent[] ea>;

        $i5 = r0.<org.apache.log4j.helpers.CyclicBuffer: int first>;

        $r4[$i5] = null;

        $i6 = r0.<org.apache.log4j.helpers.CyclicBuffer: int first>;

        $i7 = $i6 + 1;

        r0.<org.apache.log4j.helpers.CyclicBuffer: int first> = $i7;

        $i8 = r0.<org.apache.log4j.helpers.CyclicBuffer: int numElems>;

        if $i7 != $i8 goto label6;

        r0.<org.apache.log4j.helpers.CyclicBuffer: int first> = 0;

     label6:
        i10 = i10 + 1;

        goto label5;

     label7:
        r0.<org.apache.log4j.helpers.CyclicBuffer: org.apache.log4j.spi.LoggingEvent[] ea> = r1;

        r0.<org.apache.log4j.helpers.CyclicBuffer: int first> = 0;

        r0.<org.apache.log4j.helpers.CyclicBuffer: int numElems> = i3;

        r0.<org.apache.log4j.helpers.CyclicBuffer: int maxSize> = i0;

        if i3 != i0 goto label8;

        r0.<org.apache.log4j.helpers.CyclicBuffer: int last> = 0;

        goto label9;

     label8:
        r0.<org.apache.log4j.helpers.CyclicBuffer: int last> = i3;

     label9:
        return;
    }
}
