public class org.apache.commons.codec.binary.BinaryCodec extends java.lang.Object implements org.apache.commons.codec.BinaryDecoder, org.apache.commons.codec.BinaryEncoder
{
    private static final char[] EMPTY_CHAR_ARRAY;
    private static final byte[] EMPTY_BYTE_ARRAY;
    private static final int BIT_0;
    private static final int BIT_1;
    private static final int BIT_2;
    private static final int BIT_3;
    private static final int BIT_4;
    private static final int BIT_5;
    private static final int BIT_6;
    private static final int BIT_7;
    private static final int[] BITS;

    public void <init>()
    {
        org.apache.commons.codec.binary.BinaryCodec r0;

        r0 := @this: org.apache.commons.codec.binary.BinaryCodec;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public byte[] encode(byte[])
    {
        byte[] r0, $r1;
        org.apache.commons.codec.binary.BinaryCodec r2;

        r2 := @this: org.apache.commons.codec.binary.BinaryCodec;

        r0 := @parameter0: byte[];

        $r1 = staticinvoke <org.apache.commons.codec.binary.BinaryCodec: byte[] toAsciiBytes(byte[])>(r0);

        return $r1;
    }

    public java.lang.Object encode(java.lang.Object) throws org.apache.commons.codec.EncoderException
    {
        byte[] $r1, $r2;
        org.apache.commons.codec.EncoderException $r4;
        org.apache.commons.codec.binary.BinaryCodec r5;
        char[] $r3;
        java.lang.Object r0;
        boolean $z0;

        r5 := @this: org.apache.commons.codec.binary.BinaryCodec;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof byte[];

        if $z0 != 0 goto label1;

        $r4 = new org.apache.commons.codec.EncoderException;

        specialinvoke $r4.<org.apache.commons.codec.EncoderException: void <init>(java.lang.String)>("argument not a byte array");

        throw $r4;

     label1:
        $r1 = (byte[]) r0;

        $r2 = (byte[]) $r1;

        $r3 = staticinvoke <org.apache.commons.codec.binary.BinaryCodec: char[] toAsciiChars(byte[])>($r2);

        return $r3;
    }

    public java.lang.Object decode(java.lang.Object) throws org.apache.commons.codec.DecoderException
    {
        byte[] $r4, $r7, $r8, $r9, $r10, $r11;
        java.lang.String $r2;
        boolean $z0, $z1, $z2;
        org.apache.commons.codec.DecoderException $r1;
        org.apache.commons.codec.binary.BinaryCodec r12;
        char[] $r3, $r5, $r6;
        java.lang.Object r0;

        r12 := @this: org.apache.commons.codec.binary.BinaryCodec;

        r0 := @parameter0: java.lang.Object;

        if r0 != null goto label1;

        $r11 = <org.apache.commons.codec.binary.BinaryCodec: byte[] EMPTY_BYTE_ARRAY>;

        return $r11;

     label1:
        $z0 = r0 instanceof byte[];

        if $z0 == 0 goto label2;

        $r8 = (byte[]) r0;

        $r9 = (byte[]) $r8;

        $r10 = staticinvoke <org.apache.commons.codec.binary.BinaryCodec: byte[] fromAscii(byte[])>($r9);

        return $r10;

     label2:
        $z1 = r0 instanceof char[];

        if $z1 == 0 goto label3;

        $r5 = (char[]) r0;

        $r6 = (char[]) $r5;

        $r7 = staticinvoke <org.apache.commons.codec.binary.BinaryCodec: byte[] fromAscii(char[])>($r6);

        return $r7;

     label3:
        $z2 = r0 instanceof java.lang.String;

        if $z2 == 0 goto label4;

        $r2 = (java.lang.String) r0;

        $r3 = virtualinvoke $r2.<java.lang.String: char[] toCharArray()>();

        $r4 = staticinvoke <org.apache.commons.codec.binary.BinaryCodec: byte[] fromAscii(char[])>($r3);

        return $r4;

     label4:
        $r1 = new org.apache.commons.codec.DecoderException;

        specialinvoke $r1.<org.apache.commons.codec.DecoderException: void <init>(java.lang.String)>("argument not a byte array");

        throw $r1;
    }

    public byte[] decode(byte[])
    {
        byte[] r0, $r1;
        org.apache.commons.codec.binary.BinaryCodec r2;

        r2 := @this: org.apache.commons.codec.binary.BinaryCodec;

        r0 := @parameter0: byte[];

        $r1 = staticinvoke <org.apache.commons.codec.binary.BinaryCodec: byte[] fromAscii(byte[])>(r0);

        return $r1;
    }

    public byte[] toByteArray(java.lang.String)
    {
        byte[] $r2, $r3;
        org.apache.commons.codec.binary.BinaryCodec r4;
        char[] $r1;
        java.lang.String r0;

        r4 := @this: org.apache.commons.codec.binary.BinaryCodec;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        $r3 = <org.apache.commons.codec.binary.BinaryCodec: byte[] EMPTY_BYTE_ARRAY>;

        return $r3;

     label1:
        $r1 = virtualinvoke r0.<java.lang.String: char[] toCharArray()>();

        $r2 = staticinvoke <org.apache.commons.codec.binary.BinaryCodec: byte[] fromAscii(char[])>($r1);

        return $r2;
    }

    public static byte[] fromAscii(char[])
    {
        byte[] $r1, r2;
        byte $b9, $b11;
        int[] $r3, $r4;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i8, $i10, i12, i13, i14, $i15, $i16, $i18;
        char $c7;
        char[] r0;

        r0 := @parameter0: char[];

        if r0 == null goto label1;

        $i0 = lengthof r0;

        if $i0 != 0 goto label2;

     label1:
        $r1 = <org.apache.commons.codec.binary.BinaryCodec: byte[] EMPTY_BYTE_ARRAY>;

        return $r1;

     label2:
        $i1 = lengthof r0;

        $i2 = $i1 >> 3;

        r2 = newarray (byte)[$i2];

        i12 = 0;

        $i3 = lengthof r0;

        i13 = $i3 - 1;

     label3:
        $i4 = lengthof r2;

        if i12 >= $i4 goto label7;

        i14 = 0;

     label4:
        $r3 = <org.apache.commons.codec.binary.BinaryCodec: int[] BITS>;

        $i5 = lengthof $r3;

        if i14 >= $i5 goto label6;

        $i6 = i13 - i14;

        $c7 = r0[$i6];

        $i15 = (int) $c7;

        if $i15 != 49 goto label5;

        $b9 = r2[i12];

        $r4 = <org.apache.commons.codec.binary.BinaryCodec: int[] BITS>;

        $i8 = $r4[i14];

        $i16 = (int) $b9;

        $i10 = $i16 | $i8;

        $b11 = (byte) $i10;

        r2[i12] = $b11;

     label5:
        i14 = i14 + 1;

        goto label4;

     label6:
        i12 = i12 + 1;

        $i18 = (int) -8;

        i13 = i13 + $i18;

        goto label3;

     label7:
        return r2;
    }

    public static byte[] fromAscii(byte[])
    {
        byte[] r0, r1, $r4;
        byte $b6, $b8, $b10;
        int[] $r2, $r3;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i7, $i9, i11, i12, i13, $i14, $i15, $i17;
        boolean $z0;

        r0 := @parameter0: byte[];

        $z0 = staticinvoke <org.apache.commons.codec.binary.BinaryCodec: boolean isEmpty(byte[])>(r0);

        if $z0 == 0 goto label1;

        $r4 = <org.apache.commons.codec.binary.BinaryCodec: byte[] EMPTY_BYTE_ARRAY>;

        return $r4;

     label1:
        $i0 = lengthof r0;

        $i1 = $i0 >> 3;

        r1 = newarray (byte)[$i1];

        i11 = 0;

        $i2 = lengthof r0;

        i12 = $i2 - 1;

     label2:
        $i3 = lengthof r1;

        if i11 >= $i3 goto label6;

        i13 = 0;

     label3:
        $r2 = <org.apache.commons.codec.binary.BinaryCodec: int[] BITS>;

        $i4 = lengthof $r2;

        if i13 >= $i4 goto label5;

        $i5 = i12 - i13;

        $b6 = r0[$i5];

        $i14 = (int) $b6;

        if $i14 != 49 goto label4;

        $b8 = r1[i11];

        $r3 = <org.apache.commons.codec.binary.BinaryCodec: int[] BITS>;

        $i7 = $r3[i13];

        $i15 = (int) $b8;

        $i9 = $i15 | $i7;

        $b10 = (byte) $i9;

        r1[i11] = $b10;

     label4:
        i13 = i13 + 1;

        goto label3;

     label5:
        i11 = i11 + 1;

        $i17 = (int) -8;

        i12 = i12 + $i17;

        goto label2;

     label6:
        return r1;
    }

    private static boolean isEmpty(byte[])
    {
        int $i0;
        byte[] r0;
        boolean $z0;

        r0 := @parameter0: byte[];

        if r0 == null goto label1;

        $i0 = lengthof r0;

        if $i0 != 0 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public static byte[] toAsciiBytes(byte[])
    {
        byte[] r0, r1, $r4;
        byte $b6;
        int[] $r2, $r3;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i7, $i8, $i9, i10, i11, i12, $i13, $i15;
        boolean $z0;

        r0 := @parameter0: byte[];

        $z0 = staticinvoke <org.apache.commons.codec.binary.BinaryCodec: boolean isEmpty(byte[])>(r0);

        if $z0 == 0 goto label1;

        $r4 = <org.apache.commons.codec.binary.BinaryCodec: byte[] EMPTY_BYTE_ARRAY>;

        return $r4;

     label1:
        $i0 = lengthof r0;

        $i1 = $i0 << 3;

        r1 = newarray (byte)[$i1];

        i10 = 0;

        $i2 = lengthof r1;

        i11 = $i2 - 1;

     label2:
        $i3 = lengthof r0;

        if i10 >= $i3 goto label7;

        i12 = 0;

     label3:
        $r2 = <org.apache.commons.codec.binary.BinaryCodec: int[] BITS>;

        $i4 = lengthof $r2;

        if i12 >= $i4 goto label6;

        $b6 = r0[i10];

        $r3 = <org.apache.commons.codec.binary.BinaryCodec: int[] BITS>;

        $i5 = $r3[i12];

        $i13 = (int) $b6;

        $i7 = $i13 & $i5;

        if $i7 != 0 goto label4;

        $i9 = i11 - i12;

        r1[$i9] = 48;

        goto label5;

     label4:
        $i8 = i11 - i12;

        r1[$i8] = 49;

     label5:
        i12 = i12 + 1;

        goto label3;

     label6:
        i10 = i10 + 1;

        $i15 = (int) -8;

        i11 = i11 + $i15;

        goto label2;

     label7:
        return r1;
    }

    public static char[] toAsciiChars(byte[])
    {
        byte[] r0;
        byte $b6;
        int[] $r2, $r3;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i7, $i8, $i9, i10, i11, i12, $i13, $i15;
        boolean $z0;
        char[] r1, $r4;

        r0 := @parameter0: byte[];

        $z0 = staticinvoke <org.apache.commons.codec.binary.BinaryCodec: boolean isEmpty(byte[])>(r0);

        if $z0 == 0 goto label1;

        $r4 = <org.apache.commons.codec.binary.BinaryCodec: char[] EMPTY_CHAR_ARRAY>;

        return $r4;

     label1:
        $i0 = lengthof r0;

        $i1 = $i0 << 3;

        r1 = newarray (char)[$i1];

        i10 = 0;

        $i2 = lengthof r1;

        i11 = $i2 - 1;

     label2:
        $i3 = lengthof r0;

        if i10 >= $i3 goto label7;

        i12 = 0;

     label3:
        $r2 = <org.apache.commons.codec.binary.BinaryCodec: int[] BITS>;

        $i4 = lengthof $r2;

        if i12 >= $i4 goto label6;

        $b6 = r0[i10];

        $r3 = <org.apache.commons.codec.binary.BinaryCodec: int[] BITS>;

        $i5 = $r3[i12];

        $i13 = (int) $b6;

        $i7 = $i13 & $i5;

        if $i7 != 0 goto label4;

        $i9 = i11 - i12;

        r1[$i9] = 48;

        goto label5;

     label4:
        $i8 = i11 - i12;

        r1[$i8] = 49;

     label5:
        i12 = i12 + 1;

        goto label3;

     label6:
        i10 = i10 + 1;

        $i15 = (int) -8;

        i11 = i11 + $i15;

        goto label2;

     label7:
        return r1;
    }

    public static java.lang.String toAsciiString(byte[])
    {
        byte[] r1;
        char[] $r2;
        java.lang.String $r0;

        r1 := @parameter0: byte[];

        $r0 = new java.lang.String;

        $r2 = staticinvoke <org.apache.commons.codec.binary.BinaryCodec: char[] toAsciiChars(byte[])>(r1);

        specialinvoke $r0.<java.lang.String: void <init>(char[])>($r2);

        return $r0;
    }

    static void <clinit>()
    {
        char[] $r0;
        byte[] $r1;
        int[] $r2;

        <org.apache.commons.codec.binary.BinaryCodec: int BIT_7> = 128;

        <org.apache.commons.codec.binary.BinaryCodec: int BIT_6> = 64;

        <org.apache.commons.codec.binary.BinaryCodec: int BIT_5> = 32;

        <org.apache.commons.codec.binary.BinaryCodec: int BIT_4> = 16;

        <org.apache.commons.codec.binary.BinaryCodec: int BIT_3> = 8;

        <org.apache.commons.codec.binary.BinaryCodec: int BIT_2> = 4;

        <org.apache.commons.codec.binary.BinaryCodec: int BIT_1> = 2;

        <org.apache.commons.codec.binary.BinaryCodec: int BIT_0> = 1;

        $r0 = newarray (char)[0];

        <org.apache.commons.codec.binary.BinaryCodec: char[] EMPTY_CHAR_ARRAY> = $r0;

        $r1 = newarray (byte)[0];

        <org.apache.commons.codec.binary.BinaryCodec: byte[] EMPTY_BYTE_ARRAY> = $r1;

        $r2 = newarray (int)[8];

        $r2[0] = 1;

        $r2[1] = 2;

        $r2[2] = 4;

        $r2[3] = 8;

        $r2[4] = 16;

        $r2[5] = 32;

        $r2[6] = 64;

        $r2[7] = 128;

        <org.apache.commons.codec.binary.BinaryCodec: int[] BITS> = $r2;

        return;
    }
}
