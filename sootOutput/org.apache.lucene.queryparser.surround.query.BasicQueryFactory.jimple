public class org.apache.lucene.queryparser.surround.query.BasicQueryFactory extends java.lang.Object
{
    private int maxBasicQueries;
    private int queriesMade;

    public void <init>(int)
    {
        int i0;
        org.apache.lucene.queryparser.surround.query.BasicQueryFactory r0;

        r0 := @this: org.apache.lucene.queryparser.surround.query.BasicQueryFactory;

        i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.lucene.queryparser.surround.query.BasicQueryFactory: int maxBasicQueries> = i0;

        r0.<org.apache.lucene.queryparser.surround.query.BasicQueryFactory: int queriesMade> = 0;

        return;
    }

    public void <init>()
    {
        org.apache.lucene.queryparser.surround.query.BasicQueryFactory r0;

        r0 := @this: org.apache.lucene.queryparser.surround.query.BasicQueryFactory;

        specialinvoke r0.<org.apache.lucene.queryparser.surround.query.BasicQueryFactory: void <init>(int)>(1024);

        return;
    }

    public int getNrQueriesMade()
    {
        int $i0;
        org.apache.lucene.queryparser.surround.query.BasicQueryFactory r0;

        r0 := @this: org.apache.lucene.queryparser.surround.query.BasicQueryFactory;

        $i0 = r0.<org.apache.lucene.queryparser.surround.query.BasicQueryFactory: int queriesMade>;

        return $i0;
    }

    public int getMaxBasicQueries()
    {
        int $i0;
        org.apache.lucene.queryparser.surround.query.BasicQueryFactory r0;

        r0 := @this: org.apache.lucene.queryparser.surround.query.BasicQueryFactory;

        $i0 = r0.<org.apache.lucene.queryparser.surround.query.BasicQueryFactory: int maxBasicQueries>;

        return $i0;
    }

    public java.lang.String toString()
    {
        org.apache.lucene.queryparser.surround.query.BasicQueryFactory r1;
        int $i0, $i1;
        java.lang.StringBuilder $r0, $r4, $r5, $r6, $r7, $r8, $r9;
        java.lang.Class $r2;
        java.lang.String $r3, $r10;

        r1 := @this: org.apache.lucene.queryparser.surround.query.BasicQueryFactory;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        $r4 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(maxBasicQueries: ");

        $i0 = r1.<org.apache.lucene.queryparser.surround.query.BasicQueryFactory: int maxBasicQueries>;

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", queriesMade: ");

        $i1 = r1.<org.apache.lucene.queryparser.surround.query.BasicQueryFactory: int queriesMade>;

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r10;
    }

    private boolean atMax()
    {
        int $i0, $i1;
        org.apache.lucene.queryparser.surround.query.BasicQueryFactory r0;
        boolean $z0;

        r0 := @this: org.apache.lucene.queryparser.surround.query.BasicQueryFactory;

        $i1 = r0.<org.apache.lucene.queryparser.surround.query.BasicQueryFactory: int queriesMade>;

        $i0 = r0.<org.apache.lucene.queryparser.surround.query.BasicQueryFactory: int maxBasicQueries>;

        if $i1 < $i0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    protected synchronized void checkMax() throws org.apache.lucene.queryparser.surround.query.TooManyBasicQueries
    {
        org.apache.lucene.queryparser.surround.query.TooManyBasicQueries $r1;
        int $i0, $i1, $i2;
        org.apache.lucene.queryparser.surround.query.BasicQueryFactory r0;
        boolean $z0;

        r0 := @this: org.apache.lucene.queryparser.surround.query.BasicQueryFactory;

        $z0 = specialinvoke r0.<org.apache.lucene.queryparser.surround.query.BasicQueryFactory: boolean atMax()>();

        if $z0 == 0 goto label1;

        $r1 = new org.apache.lucene.queryparser.surround.query.TooManyBasicQueries;

        $i2 = virtualinvoke r0.<org.apache.lucene.queryparser.surround.query.BasicQueryFactory: int getMaxBasicQueries()>();

        specialinvoke $r1.<org.apache.lucene.queryparser.surround.query.TooManyBasicQueries: void <init>(int)>($i2);

        throw $r1;

     label1:
        $i0 = r0.<org.apache.lucene.queryparser.surround.query.BasicQueryFactory: int queriesMade>;

        $i1 = $i0 + 1;

        r0.<org.apache.lucene.queryparser.surround.query.BasicQueryFactory: int queriesMade> = $i1;

        return;
    }

    public org.apache.lucene.search.TermQuery newTermQuery(org.apache.lucene.index.Term) throws org.apache.lucene.queryparser.surround.query.TooManyBasicQueries
    {
        org.apache.lucene.index.Term r2;
        org.apache.lucene.queryparser.surround.query.BasicQueryFactory r0;
        org.apache.lucene.search.TermQuery $r1;

        r0 := @this: org.apache.lucene.queryparser.surround.query.BasicQueryFactory;

        r2 := @parameter0: org.apache.lucene.index.Term;

        virtualinvoke r0.<org.apache.lucene.queryparser.surround.query.BasicQueryFactory: void checkMax()>();

        $r1 = new org.apache.lucene.search.TermQuery;

        specialinvoke $r1.<org.apache.lucene.search.TermQuery: void <init>(org.apache.lucene.index.Term)>(r2);

        return $r1;
    }

    public org.apache.lucene.search.spans.SpanTermQuery newSpanTermQuery(org.apache.lucene.index.Term) throws org.apache.lucene.queryparser.surround.query.TooManyBasicQueries
    {
        org.apache.lucene.search.spans.SpanTermQuery $r1;
        org.apache.lucene.index.Term r2;
        org.apache.lucene.queryparser.surround.query.BasicQueryFactory r0;

        r0 := @this: org.apache.lucene.queryparser.surround.query.BasicQueryFactory;

        r2 := @parameter0: org.apache.lucene.index.Term;

        virtualinvoke r0.<org.apache.lucene.queryparser.surround.query.BasicQueryFactory: void checkMax()>();

        $r1 = new org.apache.lucene.search.spans.SpanTermQuery;

        specialinvoke $r1.<org.apache.lucene.search.spans.SpanTermQuery: void <init>(org.apache.lucene.index.Term)>(r2);

        return $r1;
    }

    public int hashCode()
    {
        short $s2;
        int $i0, $i1;
        org.apache.lucene.queryparser.surround.query.BasicQueryFactory r0;
        java.lang.Class $r1;
        boolean $z0;

        r0 := @this: org.apache.lucene.queryparser.surround.query.BasicQueryFactory;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>();

        $z0 = specialinvoke r0.<org.apache.lucene.queryparser.surround.query.BasicQueryFactory: boolean atMax()>();

        if $z0 == 0 goto label1;

        $s2 = 7;

        goto label2;

     label1:
        $s2 = 992;

     label2:
        $i1 = $i0 ^ $s2;

        return $i1;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.lucene.queryparser.surround.query.BasicQueryFactory r1, r2;
        java.lang.Object r0;
        boolean $z0, $z1, $z2, $z3;

        r2 := @this: org.apache.lucene.queryparser.surround.query.BasicQueryFactory;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof org.apache.lucene.queryparser.surround.query.BasicQueryFactory;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        r1 = (org.apache.lucene.queryparser.surround.query.BasicQueryFactory) r0;

        $z1 = specialinvoke r2.<org.apache.lucene.queryparser.surround.query.BasicQueryFactory: boolean atMax()>();

        $z2 = specialinvoke r1.<org.apache.lucene.queryparser.surround.query.BasicQueryFactory: boolean atMax()>();

        if $z1 != $z2 goto label2;

        $z3 = 1;

        goto label3;

     label2:
        $z3 = 0;

     label3:
        return $z3;
    }
}
