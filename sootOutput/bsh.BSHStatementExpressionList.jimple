class bsh.BSHStatementExpressionList extends bsh.SimpleNode
{

    void <init>(int)
    {
        int i0;
        bsh.BSHStatementExpressionList r0;

        r0 := @this: bsh.BSHStatementExpressionList;

        i0 := @parameter0: int;

        specialinvoke r0.<bsh.SimpleNode: void <init>(int)>(i0);

        return;
    }

    public java.lang.Object eval(bsh.CallStack, bsh.Interpreter) throws bsh.EvalError
    {
        bsh.Interpreter r4;
        bsh.SimpleNode r2;
        bsh.CallStack r3;
        bsh.BSHStatementExpressionList r0;
        bsh.Primitive $r5;
        int $i0, i1;
        bsh.Node $r1;

        r0 := @this: bsh.BSHStatementExpressionList;

        r3 := @parameter0: bsh.CallStack;

        r4 := @parameter1: bsh.Interpreter;

        $i0 = virtualinvoke r0.<bsh.BSHStatementExpressionList: int jjtGetNumChildren()>();

        i1 = 0;

        goto label2;

     label1:
        $r1 = virtualinvoke r0.<bsh.BSHStatementExpressionList: bsh.Node jjtGetChild(int)>(i1);

        r2 = (bsh.SimpleNode) $r1;

        virtualinvoke r2.<bsh.SimpleNode: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)>(r3, r4);

        i1 = i1 + 1;

     label2:
        if i1 < $i0 goto label1;

        $r5 = <bsh.Primitive: bsh.Primitive VOID>;

        return $r5;
    }
}
