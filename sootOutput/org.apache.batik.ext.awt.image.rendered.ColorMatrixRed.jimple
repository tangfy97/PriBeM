public class org.apache.batik.ext.awt.image.rendered.ColorMatrixRed extends org.apache.batik.ext.awt.image.rendered.AbstractRed
{
    private float[][] matrix;

    public float[][] getMatrix()
    {
        float[][] $r1, $r2;
        org.apache.batik.ext.awt.image.rendered.ColorMatrixRed r0;

        r0 := @this: org.apache.batik.ext.awt.image.rendered.ColorMatrixRed;

        $r1 = r0.<org.apache.batik.ext.awt.image.rendered.ColorMatrixRed: float[][] matrix>;

        $r2 = specialinvoke r0.<org.apache.batik.ext.awt.image.rendered.ColorMatrixRed: float[][] copyMatrix(float[][])>($r1);

        return $r2;
    }

    public void setMatrix(float[][])
    {
        float[] $r3, $r9;
        java.lang.StringBuffer $r5, $r7, $r8, $r10;
        int $i0, $i1, $i2, i3;
        java.lang.String $r6, $r11;
        float[][] r1, $r2;
        java.lang.IllegalArgumentException $r4, $r12, $r13;
        org.apache.batik.ext.awt.image.rendered.ColorMatrixRed r0;

        r0 := @this: org.apache.batik.ext.awt.image.rendered.ColorMatrixRed;

        r1 := @parameter0: float[][];

        $r2 = specialinvoke r0.<org.apache.batik.ext.awt.image.rendered.ColorMatrixRed: float[][] copyMatrix(float[][])>(r1);

        if $r2 != null goto label1;

        $r13 = new java.lang.IllegalArgumentException;

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r13;

     label1:
        $i0 = lengthof $r2;

        if $i0 == 4 goto label2;

        $r12 = new java.lang.IllegalArgumentException;

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r12;

     label2:
        i3 = 0;

        goto label5;

     label3:
        $r3 = $r2[i3];

        $i1 = lengthof $r3;

        if $i1 == 5 goto label4;

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuffer;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();

        $r6 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(i3);

        $r7 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" : ");

        $r9 = $r2[i3];

        $i2 = lengthof $r9;

        $r10 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i2);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);

        throw $r4;

     label4:
        i3 = i3 + 1;

     label5:
        if i3 < 4 goto label3;

        r0.<org.apache.batik.ext.awt.image.rendered.ColorMatrixRed: float[][] matrix> = r1;

        return;
    }

    private float[][] copyMatrix(float[][])
    {
        float[][] r0, r1;
        float[] $r2, $r3, $r4, $r5, $r6, $r7;
        int $i0, $i1, $i2, i3, $i4;
        org.apache.batik.ext.awt.image.rendered.ColorMatrixRed r8;

        r8 := @this: org.apache.batik.ext.awt.image.rendered.ColorMatrixRed;

        r0 := @parameter0: float[][];

        if r0 != null goto label1;

        return null;

     label1:
        $i0 = lengthof r0;

        r1 = newarray (float[])[$i0];

        i3 = 0;

        goto label4;

     label2:
        $r2 = r0[i3];

        if $r2 == null goto label3;

        $r3 = r0[i3];

        $i1 = lengthof $r3;

        $r4 = newarray (float)[$i1];

        r1[i3] = $r4;

        $r7 = r0[i3];

        $r6 = r1[i3];

        $r5 = r0[i3];

        $i2 = lengthof $r5;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r7, 0, $r6, 0, $i2);

     label3:
        i3 = i3 + 1;

     label4:
        $i4 = lengthof r0;

        if i3 < $i4 goto label2;

        return r1;
    }

    public void <init>(org.apache.batik.ext.awt.image.rendered.CachableRed, float[][])
    {
        java.awt.Rectangle $r8;
        float[][] r1;
        java.awt.color.ColorSpace $r4, r5;
        java.awt.image.SampleModel $r7;
        org.apache.batik.ext.awt.image.rendered.CachableRed r2;
        java.awt.image.ColorModel $r3, r6;
        int $i0, $i1, $i2, $i3;
        org.apache.batik.ext.awt.image.rendered.ColorMatrixRed r0;

        r0 := @this: org.apache.batik.ext.awt.image.rendered.ColorMatrixRed;

        r2 := @parameter0: org.apache.batik.ext.awt.image.rendered.CachableRed;

        r1 := @parameter1: float[][];

        specialinvoke r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: void <init>()>();

        virtualinvoke r0.<org.apache.batik.ext.awt.image.rendered.ColorMatrixRed: void setMatrix(float[][])>(r1);

        $r3 = interfaceinvoke r2.<java.awt.image.RenderedImage: java.awt.image.ColorModel getColorModel()>();

        r5 = null;

        if $r3 == null goto label1;

        r5 = virtualinvoke $r3.<java.awt.image.ColorModel: java.awt.color.ColorSpace getColorSpace()>();

     label1:
        if r5 != null goto label2;

        r6 = <org.apache.batik.ext.awt.image.GraphicsUtil: java.awt.image.ColorModel Linear_sRGB_Unpre>;

        goto label4;

     label2:
        $r4 = staticinvoke <java.awt.color.ColorSpace: java.awt.color.ColorSpace getInstance(int)>(1004);

        if r5 != $r4 goto label3;

        r6 = <org.apache.batik.ext.awt.image.GraphicsUtil: java.awt.image.ColorModel Linear_sRGB_Unpre>;

        goto label4;

     label3:
        r6 = <org.apache.batik.ext.awt.image.GraphicsUtil: java.awt.image.ColorModel sRGB_Unpre>;

     label4:
        $i0 = interfaceinvoke r2.<java.awt.image.RenderedImage: int getWidth()>();

        $i1 = interfaceinvoke r2.<java.awt.image.RenderedImage: int getHeight()>();

        $r7 = virtualinvoke r6.<java.awt.image.ColorModel: java.awt.image.SampleModel createCompatibleSampleModel(int,int)>($i0, $i1);

        $r8 = interfaceinvoke r2.<org.apache.batik.ext.awt.image.rendered.CachableRed: java.awt.Rectangle getBounds()>();

        $i2 = interfaceinvoke r2.<java.awt.image.RenderedImage: int getTileGridXOffset()>();

        $i3 = interfaceinvoke r2.<java.awt.image.RenderedImage: int getTileGridYOffset()>();

        virtualinvoke r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: void init(org.apache.batik.ext.awt.image.rendered.CachableRed,java.awt.Rectangle,java.awt.image.ColorModel,java.awt.image.SampleModel,int,int,java.util.Map)>(r2, $r8, r6, $r7, $i2, $i3, null);

        return;
    }

    public java.awt.image.WritableRaster copyData(java.awt.image.WritableRaster)
    {
        java.awt.image.SampleModel $r10, $r12;
        java.util.Vector $r1;
        float[] $r15, $r17, $r19, $r21, $r23, $r25, $r27, $r29, $r31, $r33, $r35, $r37, $r39, $r41, $r43, $r45, $r47, $r49, $r51, $r53;
        java.awt.image.DataBufferInt r7;
        short $s32, $s34, $s36, $s38;
        int[] r9;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10, $i11, i12, i13, i14, $i15, i16, $i17, i18, i19, $i20, $i21, $i22, $i23, $i24, i25, i26, i27, i28, i29, i30, i31, $i33, $i35, $i37, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i47, $i49, $i51, $i53;
        float[][] $r14, $r16, $r18, $r20, $r22, $r24, $r26, $r28, $r30, $r32, $r34, $r36, $r38, $r40, $r42, $r44, $r46, $r48, $r50, $r52;
        java.lang.Object $r2;
        java.awt.image.WritableRaster $r4, r54;
        org.apache.batik.ext.awt.image.rendered.CachableRed r3;
        java.awt.image.SinglePixelPackedSampleModel r11, $r13;
        org.apache.batik.ext.awt.image.rendered.ColorMatrixRed r0;
        int[][] $r8;
        float $f0, f1, $f2, f3, $f4, f5, $f6, f7, $f8, f9, $f10, f11, $f12, f13, $f14, f15, $f16, f17, $f18, f19, $f20, f21, $f22, f23, $f24, f25, $f26, f27, $f28, f29, $f30, f31, $f32, f33, $f34, f35, $f36, f37, $f38, f39, $f40, $f41, $f42, $f43, $f44, $f45, $f46, $f47, $f48, $f49, $f50, $f51, $f52, $f53, $f54, $f55, $f56, $f57, $f58, $f59, $f60, $f61, $f62, $f63, $f64, $f65, $f66, $f67, $f68, $f69, $f70, $f71, $f72, $f73, $f74, $f75, $f76, $f77, $f78, $f79, $f80, $f81, $f82, $f83, $f84, $f85, $f86, $f87, $f88, $f89, $f90, $f91;
        java.awt.image.DataBuffer $r6;
        java.awt.image.ColorModel $r5;

        r0 := @this: org.apache.batik.ext.awt.image.rendered.ColorMatrixRed;

        r54 := @parameter0: java.awt.image.WritableRaster;

        $r1 = virtualinvoke r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: java.util.Vector getSources()>();

        $r2 = virtualinvoke $r1.<java.util.Vector: java.lang.Object get(int)>(0);

        r3 = (org.apache.batik.ext.awt.image.rendered.CachableRed) $r2;

        $r4 = interfaceinvoke r3.<java.awt.image.RenderedImage: java.awt.image.WritableRaster copyData(java.awt.image.WritableRaster)>(r54);

        $r5 = interfaceinvoke r3.<java.awt.image.RenderedImage: java.awt.image.ColorModel getColorModel()>();

        staticinvoke <org.apache.batik.ext.awt.image.GraphicsUtil: java.awt.image.ColorModel coerceData(java.awt.image.WritableRaster,java.awt.image.ColorModel,boolean)>($r4, $r5, 0);

        $i0 = virtualinvoke $r4.<java.awt.image.Raster: int getMinX()>();

        $i1 = virtualinvoke $r4.<java.awt.image.Raster: int getMinY()>();

        $i2 = virtualinvoke $r4.<java.awt.image.Raster: int getWidth()>();

        $i3 = virtualinvoke $r4.<java.awt.image.Raster: int getHeight()>();

        $r6 = virtualinvoke $r4.<java.awt.image.Raster: java.awt.image.DataBuffer getDataBuffer()>();

        r7 = (java.awt.image.DataBufferInt) $r6;

        $r8 = virtualinvoke r7.<java.awt.image.DataBufferInt: int[][] getBankData()>();

        r9 = $r8[0];

        $r10 = virtualinvoke $r4.<java.awt.image.Raster: java.awt.image.SampleModel getSampleModel()>();

        r11 = (java.awt.image.SinglePixelPackedSampleModel) $r10;

        $i4 = virtualinvoke r7.<java.awt.image.DataBuffer: int getOffset()>();

        $i5 = virtualinvoke $r4.<java.awt.image.Raster: int getSampleModelTranslateX()>();

        $i6 = $i0 - $i5;

        $i7 = virtualinvoke $r4.<java.awt.image.Raster: int getSampleModelTranslateY()>();

        $i8 = $i1 - $i7;

        $i9 = virtualinvoke r11.<java.awt.image.SinglePixelPackedSampleModel: int getOffset(int,int)>($i6, $i8);

        i10 = $i4 + $i9;

        $r12 = virtualinvoke $r4.<java.awt.image.Raster: java.awt.image.SampleModel getSampleModel()>();

        $r13 = (java.awt.image.SinglePixelPackedSampleModel) $r12;

        $i11 = virtualinvoke $r13.<java.awt.image.SinglePixelPackedSampleModel: int getScanlineStride()>();

        i12 = $i11 - $i2;

        i25 = i10;

        $r14 = r0.<org.apache.batik.ext.awt.image.rendered.ColorMatrixRed: float[][] matrix>;

        $r15 = $r14[0];

        $f0 = $r15[0];

        f1 = $f0 / 255.0F;

        $r16 = r0.<org.apache.batik.ext.awt.image.rendered.ColorMatrixRed: float[][] matrix>;

        $r17 = $r16[0];

        $f2 = $r17[1];

        f3 = $f2 / 255.0F;

        $r18 = r0.<org.apache.batik.ext.awt.image.rendered.ColorMatrixRed: float[][] matrix>;

        $r19 = $r18[0];

        $f4 = $r19[2];

        f5 = $f4 / 255.0F;

        $r20 = r0.<org.apache.batik.ext.awt.image.rendered.ColorMatrixRed: float[][] matrix>;

        $r21 = $r20[0];

        $f6 = $r21[3];

        f7 = $f6 / 255.0F;

        $r22 = r0.<org.apache.batik.ext.awt.image.rendered.ColorMatrixRed: float[][] matrix>;

        $r23 = $r22[0];

        $f8 = $r23[4];

        f9 = $f8 / 255.0F;

        $r24 = r0.<org.apache.batik.ext.awt.image.rendered.ColorMatrixRed: float[][] matrix>;

        $r25 = $r24[1];

        $f10 = $r25[0];

        f11 = $f10 / 255.0F;

        $r26 = r0.<org.apache.batik.ext.awt.image.rendered.ColorMatrixRed: float[][] matrix>;

        $r27 = $r26[1];

        $f12 = $r27[1];

        f13 = $f12 / 255.0F;

        $r28 = r0.<org.apache.batik.ext.awt.image.rendered.ColorMatrixRed: float[][] matrix>;

        $r29 = $r28[1];

        $f14 = $r29[2];

        f15 = $f14 / 255.0F;

        $r30 = r0.<org.apache.batik.ext.awt.image.rendered.ColorMatrixRed: float[][] matrix>;

        $r31 = $r30[1];

        $f16 = $r31[3];

        f17 = $f16 / 255.0F;

        $r32 = r0.<org.apache.batik.ext.awt.image.rendered.ColorMatrixRed: float[][] matrix>;

        $r33 = $r32[1];

        $f18 = $r33[4];

        f19 = $f18 / 255.0F;

        $r34 = r0.<org.apache.batik.ext.awt.image.rendered.ColorMatrixRed: float[][] matrix>;

        $r35 = $r34[2];

        $f20 = $r35[0];

        f21 = $f20 / 255.0F;

        $r36 = r0.<org.apache.batik.ext.awt.image.rendered.ColorMatrixRed: float[][] matrix>;

        $r37 = $r36[2];

        $f22 = $r37[1];

        f23 = $f22 / 255.0F;

        $r38 = r0.<org.apache.batik.ext.awt.image.rendered.ColorMatrixRed: float[][] matrix>;

        $r39 = $r38[2];

        $f24 = $r39[2];

        f25 = $f24 / 255.0F;

        $r40 = r0.<org.apache.batik.ext.awt.image.rendered.ColorMatrixRed: float[][] matrix>;

        $r41 = $r40[2];

        $f26 = $r41[3];

        f27 = $f26 / 255.0F;

        $r42 = r0.<org.apache.batik.ext.awt.image.rendered.ColorMatrixRed: float[][] matrix>;

        $r43 = $r42[2];

        $f28 = $r43[4];

        f29 = $f28 / 255.0F;

        $r44 = r0.<org.apache.batik.ext.awt.image.rendered.ColorMatrixRed: float[][] matrix>;

        $r45 = $r44[3];

        $f30 = $r45[0];

        f31 = $f30 / 255.0F;

        $r46 = r0.<org.apache.batik.ext.awt.image.rendered.ColorMatrixRed: float[][] matrix>;

        $r47 = $r46[3];

        $f32 = $r47[1];

        f33 = $f32 / 255.0F;

        $r48 = r0.<org.apache.batik.ext.awt.image.rendered.ColorMatrixRed: float[][] matrix>;

        $r49 = $r48[3];

        $f34 = $r49[2];

        f35 = $f34 / 255.0F;

        $r50 = r0.<org.apache.batik.ext.awt.image.rendered.ColorMatrixRed: float[][] matrix>;

        $r51 = $r50[3];

        $f36 = $r51[3];

        f37 = $f36 / 255.0F;

        $r52 = r0.<org.apache.batik.ext.awt.image.rendered.ColorMatrixRed: float[][] matrix>;

        $r53 = $r52[3];

        $f38 = $r53[4];

        f39 = $f38 / 255.0F;

        i26 = 0;

        goto label16;

     label01:
        i27 = 0;

        goto label15;

     label02:
        i13 = r9[i25];

        i14 = i13 >>> 24;

        $i15 = i13 >> 16;

        i16 = $i15 & 255;

        $i17 = i13 >> 8;

        i18 = $i17 & 255;

        i19 = i13 & 255;

        $f40 = (float) i16;

        $f43 = f1 * $f40;

        $f41 = (float) i18;

        $f42 = f3 * $f41;

        $f46 = $f43 + $f42;

        $f44 = (float) i19;

        $f45 = f5 * $f44;

        $f49 = $f46 + $f45;

        $f47 = (float) i14;

        $f48 = f7 * $f47;

        $f50 = $f49 + $f48;

        $f51 = $f50 + f9;

        $f52 = $f51 * 255.0F;

        i28 = (int) $f52;

        $f53 = (float) i16;

        $f56 = f11 * $f53;

        $f54 = (float) i18;

        $f55 = f13 * $f54;

        $f59 = $f56 + $f55;

        $f57 = (float) i19;

        $f58 = f15 * $f57;

        $f62 = $f59 + $f58;

        $f60 = (float) i14;

        $f61 = f17 * $f60;

        $f63 = $f62 + $f61;

        $f64 = $f63 + f19;

        $f65 = $f64 * 255.0F;

        i29 = (int) $f65;

        $f66 = (float) i16;

        $f69 = f21 * $f66;

        $f67 = (float) i18;

        $f68 = f23 * $f67;

        $f72 = $f69 + $f68;

        $f70 = (float) i19;

        $f71 = f25 * $f70;

        $f75 = $f72 + $f71;

        $f73 = (float) i14;

        $f74 = f27 * $f73;

        $f76 = $f75 + $f74;

        $f77 = $f76 + f29;

        $f78 = $f77 * 255.0F;

        i30 = (int) $f78;

        $f79 = (float) i16;

        $f82 = f31 * $f79;

        $f80 = (float) i18;

        $f81 = f33 * $f80;

        $f85 = $f82 + $f81;

        $f83 = (float) i19;

        $f84 = f35 * $f83;

        $f88 = $f85 + $f84;

        $f86 = (float) i14;

        $f87 = f37 * $f86;

        $f89 = $f88 + $f87;

        $f90 = $f89 + f39;

        $f91 = $f90 * 255.0F;

        i31 = (int) $f91;

        $i47 = (int) -256;

        $i20 = i28 & $i47;

        if $i20 == 0 goto label05;

        $i24 = i28 & -2147483648;

        if $i24 == 0 goto label03;

        $s32 = 0;

        goto label04;

     label03:
        $s32 = 255;

     label04:
        i28 = $s32;

     label05:
        $i49 = (int) -256;

        $i33 = i29 & $i49;

        if $i33 == 0 goto label08;

        $i23 = i29 & -2147483648;

        if $i23 == 0 goto label06;

        $s34 = 0;

        goto label07;

     label06:
        $s34 = 255;

     label07:
        i29 = $s34;

     label08:
        $i51 = (int) -256;

        $i35 = i30 & $i51;

        if $i35 == 0 goto label11;

        $i22 = i30 & -2147483648;

        if $i22 == 0 goto label09;

        $s36 = 0;

        goto label10;

     label09:
        $s36 = 255;

     label10:
        i30 = $s36;

     label11:
        $i53 = (int) -256;

        $i37 = i31 & $i53;

        if $i37 == 0 goto label14;

        $i21 = i31 & -2147483648;

        if $i21 == 0 goto label12;

        $s38 = 0;

        goto label13;

     label12:
        $s38 = 255;

     label13:
        i31 = $s38;

     label14:
        $i39 = i25;

        i25 = i25 + 1;

        $i40 = i31 << 24;

        $i41 = i28 << 16;

        $i42 = $i40 | $i41;

        $i43 = i29 << 8;

        $i44 = $i42 | $i43;

        $i45 = $i44 | i30;

        r9[$i39] = $i45;

        i27 = i27 + 1;

     label15:
        if i27 < $i2 goto label02;

        i25 = i25 + i12;

        i26 = i26 + 1;

     label16:
        if i26 < $i3 goto label01;

        return $r4;
    }
}
