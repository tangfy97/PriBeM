public class org.apache.xalan.processor.ProcessorExsltFunction extends org.apache.xalan.processor.ProcessorTemplateElem
{

    public void <init>()
    {
        org.apache.xalan.processor.ProcessorExsltFunction r0;

        r0 := @this: org.apache.xalan.processor.ProcessorExsltFunction;

        specialinvoke r0.<org.apache.xalan.processor.ProcessorTemplateElem: void <init>()>();

        return;
    }

    public void startElement(org.apache.xalan.processor.StylesheetHandler, java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes) throws org.xml.sax.SAXException
    {
        org.xml.sax.helpers.NamespaceSupport $r10;
        org.apache.xalan.templates.ElemTemplateElement $r1;
        org.apache.xalan.processor.ProcessorExsltFunction r2;
        org.apache.xalan.processor.StylesheetHandler r0;
        org.xml.sax.SAXException $r8, $r11;
        org.xml.sax.Attributes r6;
        int $i0, $i1;
        java.lang.String r3, r4, r5, $r7, $r9;
        boolean $z0;

        r2 := @this: org.apache.xalan.processor.ProcessorExsltFunction;

        r0 := @parameter0: org.apache.xalan.processor.StylesheetHandler;

        r3 := @parameter1: java.lang.String;

        r4 := @parameter2: java.lang.String;

        r5 := @parameter3: java.lang.String;

        r6 := @parameter4: org.xml.sax.Attributes;

        $r1 = virtualinvoke r0.<org.apache.xalan.processor.StylesheetHandler: org.apache.xalan.templates.ElemTemplateElement getElemTemplateElement()>();

        $z0 = $r1 instanceof org.apache.xalan.templates.Stylesheet;

        if $z0 != 0 goto label1;

        $r11 = new org.xml.sax.SAXException;

        specialinvoke $r11.<org.xml.sax.SAXException: void <init>(java.lang.String)>("func:function element must be top level.");

        virtualinvoke r0.<org.apache.xalan.processor.StylesheetHandler: void error(java.lang.String,java.lang.Exception)>("func:function element must be top level.", $r11);

     label1:
        specialinvoke r2.<org.apache.xalan.processor.ProcessorTemplateElem: void startElement(org.apache.xalan.processor.StylesheetHandler,java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)>(r0, r3, r4, r5, r6);

        $r7 = interfaceinvoke r6.<org.xml.sax.Attributes: java.lang.String getValue(java.lang.String)>("name");

        $i0 = virtualinvoke $r7.<java.lang.String: int indexOf(java.lang.String)>(":");

        if $i0 <= 0 goto label2;

        $r9 = virtualinvoke $r7.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        $i1 = $i0 + 1;

        virtualinvoke $r7.<java.lang.String: java.lang.String substring(int)>($i1);

        $r10 = virtualinvoke r0.<org.apache.xalan.processor.StylesheetHandler: org.xml.sax.helpers.NamespaceSupport getNamespaceSupport()>();

        virtualinvoke $r10.<org.xml.sax.helpers.NamespaceSupport: java.lang.String getURI(java.lang.String)>($r9);

        goto label3;

     label2:
        $r8 = new org.xml.sax.SAXException;

        specialinvoke $r8.<org.xml.sax.SAXException: void <init>(java.lang.String)>("func:function name must have namespace");

        virtualinvoke r0.<org.apache.xalan.processor.StylesheetHandler: void error(java.lang.String,java.lang.Exception)>("func:function name must have namespace", $r8);

     label3:
        return;
    }

    protected void appendAndPush(org.apache.xalan.processor.StylesheetHandler, org.apache.xalan.templates.ElemTemplateElement) throws org.xml.sax.SAXException
    {
        org.apache.xalan.processor.StylesheetHandler r1;
        org.apache.xalan.templates.ElemTemplateElement r2;
        org.apache.xalan.templates.ElemTemplate $r5;
        org.w3c.dom.Node $r3;
        org.apache.xalan.processor.ProcessorExsltFunction r0;
        org.apache.xalan.templates.Stylesheet $r4;

        r0 := @this: org.apache.xalan.processor.ProcessorExsltFunction;

        r1 := @parameter0: org.apache.xalan.processor.StylesheetHandler;

        r2 := @parameter1: org.apache.xalan.templates.ElemTemplateElement;

        specialinvoke r0.<org.apache.xalan.processor.ProcessorTemplateElem: void appendAndPush(org.apache.xalan.processor.StylesheetHandler,org.apache.xalan.templates.ElemTemplateElement)>(r1, r2);

        $r3 = virtualinvoke r1.<org.apache.xalan.processor.StylesheetHandler: org.w3c.dom.Node getOriginatingNode()>();

        virtualinvoke r2.<org.apache.xalan.templates.ElemTemplateElement: void setDOMBackPointer(org.w3c.dom.Node)>($r3);

        $r4 = virtualinvoke r1.<org.apache.xalan.processor.StylesheetHandler: org.apache.xalan.templates.Stylesheet getStylesheet()>();

        $r5 = (org.apache.xalan.templates.ElemTemplate) r2;

        virtualinvoke $r4.<org.apache.xalan.templates.Stylesheet: void setTemplate(org.apache.xalan.templates.ElemTemplate)>($r5);

        return;
    }

    public void endElement(org.apache.xalan.processor.StylesheetHandler, java.lang.String, java.lang.String, java.lang.String) throws org.xml.sax.SAXException
    {
        org.apache.xalan.processor.StylesheetHandler r0;
        org.apache.xalan.templates.ElemTemplateElement $r1;
        org.apache.xalan.processor.ProcessorExsltFunction r2;
        java.lang.String r3, r4, r5;

        r2 := @this: org.apache.xalan.processor.ProcessorExsltFunction;

        r0 := @parameter0: org.apache.xalan.processor.StylesheetHandler;

        r3 := @parameter1: java.lang.String;

        r4 := @parameter2: java.lang.String;

        r5 := @parameter3: java.lang.String;

        $r1 = virtualinvoke r0.<org.apache.xalan.processor.StylesheetHandler: org.apache.xalan.templates.ElemTemplateElement getElemTemplateElement()>();

        virtualinvoke r0.<org.apache.xalan.processor.StylesheetHandler: org.apache.xml.utils.SAXSourceLocator getLocator()>();

        virtualinvoke r2.<org.apache.xalan.processor.ProcessorExsltFunction: void validate(org.apache.xalan.templates.ElemTemplateElement,org.apache.xalan.processor.StylesheetHandler)>($r1, r0);

        specialinvoke r2.<org.apache.xalan.processor.ProcessorTemplateElem: void endElement(org.apache.xalan.processor.StylesheetHandler,java.lang.String,java.lang.String,java.lang.String)>(r0, r3, r4, r5);

        return;
    }

    public void validate(org.apache.xalan.templates.ElemTemplateElement, org.apache.xalan.processor.StylesheetHandler) throws org.xml.sax.SAXException
    {
        org.apache.xalan.processor.StylesheetHandler r2;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17;
        org.apache.xalan.templates.ElemTemplateElement $r1, $r4, $r5, r7, r8;
        org.apache.xalan.processor.ProcessorExsltFunction r0;
        org.xml.sax.SAXException $r3, $r6;

        r0 := @this: org.apache.xalan.processor.ProcessorExsltFunction;

        r7 := @parameter0: org.apache.xalan.templates.ElemTemplateElement;

        r2 := @parameter1: org.apache.xalan.processor.StylesheetHandler;

        goto label9;

     label1:
        $z0 = r7 instanceof org.apache.xalan.templates.ElemExsltFuncResult;

        if $z0 == 0 goto label2;

        $r4 = virtualinvoke r7.<org.apache.xalan.templates.ElemTemplateElement: org.apache.xalan.templates.ElemTemplateElement getNextSiblingElem()>();

        if $r4 == null goto label2;

        $r5 = virtualinvoke r7.<org.apache.xalan.templates.ElemTemplateElement: org.apache.xalan.templates.ElemTemplateElement getNextSiblingElem()>();

        $z15 = $r5 instanceof org.apache.xalan.templates.ElemFallback;

        if $z15 != 0 goto label2;

        $r6 = new org.xml.sax.SAXException;

        specialinvoke $r6.<org.xml.sax.SAXException: void <init>(java.lang.String)>("func:result has an illegal following sibling (only xsl:fallback allowed)");

        virtualinvoke r2.<org.apache.xalan.processor.StylesheetHandler: void error(java.lang.String,java.lang.Exception)>("func:result has an illegal following sibling (only xsl:fallback allowed)", $r6);

     label2:
        $z16 = r7 instanceof org.apache.xalan.templates.ElemApplyImport;

        if $z16 != 0 goto label3;

        $z2 = r7 instanceof org.apache.xalan.templates.ElemApplyTemplates;

        if $z2 != 0 goto label3;

        $z3 = r7 instanceof org.apache.xalan.templates.ElemAttribute;

        if $z3 != 0 goto label3;

        $z4 = r7 instanceof org.apache.xalan.templates.ElemCallTemplate;

        if $z4 != 0 goto label3;

        $z5 = r7 instanceof org.apache.xalan.templates.ElemComment;

        if $z5 != 0 goto label3;

        $z6 = r7 instanceof org.apache.xalan.templates.ElemCopy;

        if $z6 != 0 goto label3;

        $z7 = r7 instanceof org.apache.xalan.templates.ElemCopyOf;

        if $z7 != 0 goto label3;

        $z8 = r7 instanceof org.apache.xalan.templates.ElemElement;

        if $z8 != 0 goto label3;

        $z9 = r7 instanceof org.apache.xalan.templates.ElemLiteralResult;

        if $z9 != 0 goto label3;

        $z10 = r7 instanceof org.apache.xalan.templates.ElemNumber;

        if $z10 != 0 goto label3;

        $z11 = r7 instanceof org.apache.xalan.templates.ElemPI;

        if $z11 != 0 goto label3;

        $z12 = r7 instanceof org.apache.xalan.templates.ElemText;

        if $z12 != 0 goto label3;

        $z13 = r7 instanceof org.apache.xalan.templates.ElemTextLiteral;

        if $z13 != 0 goto label3;

        $z14 = r7 instanceof org.apache.xalan.templates.ElemValueOf;

        if $z14 == 0 goto label4;

     label3:
        $z17 = virtualinvoke r0.<org.apache.xalan.processor.ProcessorExsltFunction: boolean ancestorIsOk(org.apache.xalan.templates.ElemTemplateElement)>(r7);

        if $z17 != 0 goto label4;

        $r3 = new org.xml.sax.SAXException;

        specialinvoke $r3.<org.xml.sax.SAXException: void <init>(java.lang.String)>("misplaced literal result in a func:function container.");

        virtualinvoke r2.<org.apache.xalan.processor.StylesheetHandler: void error(java.lang.String,java.lang.Exception)>("misplaced literal result in a func:function container.", $r3);

     label4:
        r8 = virtualinvoke r7.<org.apache.xalan.templates.ElemTemplateElement: org.apache.xalan.templates.ElemTemplateElement getFirstChildElem()>();

        goto label8;

     label5:
        $r1 = virtualinvoke r7.<org.apache.xalan.templates.ElemTemplateElement: org.apache.xalan.templates.ElemTemplateElement getNextSiblingElem()>();

        r8 = $r1;

        if $r1 != null goto label6;

        r7 = virtualinvoke r7.<org.apache.xalan.templates.ElemTemplateElement: org.apache.xalan.templates.ElemTemplateElement getParentElem()>();

     label6:
        if r7 == null goto label7;

        $z1 = r7 instanceof org.apache.xalan.templates.ElemExsltFunction;

        if $z1 == 0 goto label8;

     label7:
        return;

     label8:
        if r8 == null goto label5;

        r7 = r8;

     label9:
        if r7 != null goto label1;

        return;
    }

    boolean ancestorIsOk(org.apache.xalan.templates.ElemTemplateElement)
    {
        org.apache.xalan.templates.ElemTemplateElement $r0, $r1, $r2, r4;
        org.apache.xalan.processor.ProcessorExsltFunction r3;
        boolean $z0, $z1, $z2, $z3, $z4;

        r3 := @this: org.apache.xalan.processor.ProcessorExsltFunction;

        r4 := @parameter0: org.apache.xalan.templates.ElemTemplateElement;

        goto label4;

     label1:
        $r2 = virtualinvoke r4.<org.apache.xalan.templates.ElemTemplateElement: org.apache.xalan.templates.ElemTemplateElement getParentElem()>();

        $z1 = $r2 instanceof org.apache.xalan.templates.ElemExsltFuncResult;

        if $z1 != 0 goto label2;

        $z2 = $r2 instanceof org.apache.xalan.templates.ElemVariable;

        if $z2 != 0 goto label2;

        $z3 = $r2 instanceof org.apache.xalan.templates.ElemParam;

        if $z3 != 0 goto label2;

        $z4 = $r2 instanceof org.apache.xalan.templates.ElemMessage;

        if $z4 == 0 goto label3;

     label2:
        return 1;

     label3:
        r4 = $r2;

     label4:
        $r0 = virtualinvoke r4.<org.apache.xalan.templates.ElemTemplateElement: org.apache.xalan.templates.ElemTemplateElement getParentElem()>();

        if $r0 == null goto label5;

        $r1 = virtualinvoke r4.<org.apache.xalan.templates.ElemTemplateElement: org.apache.xalan.templates.ElemTemplateElement getParentElem()>();

        $z0 = $r1 instanceof org.apache.xalan.templates.ElemExsltFunction;

        if $z0 == 0 goto label1;

     label5:
        return 0;
    }
}
