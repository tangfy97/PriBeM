public abstract class org.apache.batik.css.engine.value.AbstractValueManager extends org.apache.batik.css.engine.value.AbstractValueFactory implements org.apache.batik.css.engine.value.ValueManager
{

    public void <init>()
    {
        org.apache.batik.css.engine.value.AbstractValueManager r0;

        r0 := @this: org.apache.batik.css.engine.value.AbstractValueManager;

        specialinvoke r0.<org.apache.batik.css.engine.value.AbstractValueFactory: void <init>()>();

        return;
    }

    public org.apache.batik.css.engine.value.Value createFloatValue(short, float) throws org.w3c.dom.DOMException
    {
        short s0;
        org.apache.batik.css.engine.value.AbstractValueManager r0;
        org.w3c.dom.DOMException $r1;
        float f0;

        r0 := @this: org.apache.batik.css.engine.value.AbstractValueManager;

        s0 := @parameter0: short;

        f0 := @parameter1: float;

        $r1 = virtualinvoke r0.<org.apache.batik.css.engine.value.AbstractValueFactory: org.w3c.dom.DOMException createDOMException()>();

        throw $r1;
    }

    public org.apache.batik.css.engine.value.Value createStringValue(short, java.lang.String, org.apache.batik.css.engine.CSSEngine) throws org.w3c.dom.DOMException
    {
        short s0;
        org.apache.batik.css.engine.value.AbstractValueManager r0;
        org.w3c.dom.DOMException $r1;
        java.lang.String r2;
        org.apache.batik.css.engine.CSSEngine r3;

        r0 := @this: org.apache.batik.css.engine.value.AbstractValueManager;

        s0 := @parameter0: short;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: org.apache.batik.css.engine.CSSEngine;

        $r1 = virtualinvoke r0.<org.apache.batik.css.engine.value.AbstractValueFactory: org.w3c.dom.DOMException createDOMException()>();

        throw $r1;
    }

    public org.apache.batik.css.engine.value.Value computeValue(org.apache.batik.css.engine.CSSStylableElement, java.lang.String, org.apache.batik.css.engine.CSSEngine, int, org.apache.batik.css.engine.StyleMap, org.apache.batik.css.engine.value.Value)
    {
        org.apache.batik.css.engine.value.AbstractValueManager r4;
        org.apache.batik.css.engine.CSSStylableElement r5;
        org.apache.batik.css.engine.value.Value r0;
        org.apache.batik.css.engine.CSSEngine r7;
        short $s0, $s1;
        org.apache.batik.css.engine.StyleMap r8;
        int i2, $i3;
        org.apache.batik.css.engine.value.URIValue $r9;
        java.lang.String $r2, $r3, r6;

        r4 := @this: org.apache.batik.css.engine.value.AbstractValueManager;

        r5 := @parameter0: org.apache.batik.css.engine.CSSStylableElement;

        r6 := @parameter1: java.lang.String;

        r7 := @parameter2: org.apache.batik.css.engine.CSSEngine;

        i2 := @parameter3: int;

        r8 := @parameter4: org.apache.batik.css.engine.StyleMap;

        r0 := @parameter5: org.apache.batik.css.engine.value.Value;

        $s0 = interfaceinvoke r0.<org.apache.batik.css.engine.value.Value: short getCssValueType()>();

        if $s0 != 1 goto label1;

        $s1 = interfaceinvoke r0.<org.apache.batik.css.engine.value.Value: short getPrimitiveType()>();

        $i3 = (int) $s1;

        if $i3 != 20 goto label1;

        $r9 = new org.apache.batik.css.engine.value.URIValue;

        $r2 = interfaceinvoke r0.<org.apache.batik.css.engine.value.Value: java.lang.String getStringValue()>();

        $r3 = interfaceinvoke r0.<org.apache.batik.css.engine.value.Value: java.lang.String getStringValue()>();

        specialinvoke $r9.<org.apache.batik.css.engine.value.URIValue: void <init>(java.lang.String,java.lang.String)>($r2, $r3);

        return $r9;

     label1:
        return r0;
    }

    public abstract org.apache.batik.css.engine.value.Value createValue(org.w3c.css.sac.LexicalUnit, org.apache.batik.css.engine.CSSEngine) throws org.w3c.dom.DOMException;

    public abstract org.apache.batik.css.engine.value.Value getDefaultValue();

    public abstract int getPropertyType();

    public abstract boolean isAdditiveProperty();

    public abstract boolean isAnimatableProperty();

    public abstract boolean isInheritedProperty();
}
