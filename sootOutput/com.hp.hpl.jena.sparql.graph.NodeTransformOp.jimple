class com.hp.hpl.jena.sparql.graph.NodeTransformOp extends com.hp.hpl.jena.sparql.algebra.TransformCopy
{
    private final com.hp.hpl.jena.sparql.graph.NodeTransform transform;

    void <init>(com.hp.hpl.jena.sparql.graph.NodeTransform)
    {
        com.hp.hpl.jena.sparql.graph.NodeTransformOp r0;
        com.hp.hpl.jena.sparql.graph.NodeTransform r1;

        r0 := @this: com.hp.hpl.jena.sparql.graph.NodeTransformOp;

        r1 := @parameter0: com.hp.hpl.jena.sparql.graph.NodeTransform;

        specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.TransformCopy: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.graph.NodeTransformOp: com.hp.hpl.jena.sparql.graph.NodeTransform transform> = r1;

        return;
    }

    public com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpTriple)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpTriple r1, $r6;
        com.hp.hpl.jena.sparql.graph.NodeTransform $r2;
        com.hp.hpl.jena.graph.Triple $r3, $r4, $r5;
        com.hp.hpl.jena.sparql.graph.NodeTransformOp r0;
        com.hp.hpl.jena.sparql.algebra.Op $r7;

        r0 := @this: com.hp.hpl.jena.sparql.graph.NodeTransformOp;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpTriple;

        $r2 = r0.<com.hp.hpl.jena.sparql.graph.NodeTransformOp: com.hp.hpl.jena.sparql.graph.NodeTransform transform>;

        $r3 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpTriple: com.hp.hpl.jena.graph.Triple getTriple()>();

        $r4 = staticinvoke <com.hp.hpl.jena.sparql.graph.NodeTransformLib: com.hp.hpl.jena.graph.Triple transform(com.hp.hpl.jena.sparql.graph.NodeTransform,com.hp.hpl.jena.graph.Triple)>($r2, $r3);

        $r5 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpTriple: com.hp.hpl.jena.graph.Triple getTriple()>();

        if $r4 != $r5 goto label1;

        $r7 = specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.TransformCopy: com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpTriple)>(r1);

        return $r7;

     label1:
        $r6 = new com.hp.hpl.jena.sparql.algebra.op.OpTriple;

        specialinvoke $r6.<com.hp.hpl.jena.sparql.algebra.op.OpTriple: void <init>(com.hp.hpl.jena.graph.Triple)>($r4);

        return $r6;
    }

    public com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpFilter, com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpFilter r0;
        com.hp.hpl.jena.sparql.graph.NodeTransform $r3;
        com.hp.hpl.jena.sparql.expr.ExprList $r1, $r4;
        com.hp.hpl.jena.sparql.graph.NodeTransformOp r2;
        com.hp.hpl.jena.sparql.algebra.Op r5, $r6, $r7;

        r2 := @this: com.hp.hpl.jena.sparql.graph.NodeTransformOp;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpFilter;

        r5 := @parameter1: com.hp.hpl.jena.sparql.algebra.Op;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpFilter: com.hp.hpl.jena.sparql.expr.ExprList getExprs()>();

        $r3 = r2.<com.hp.hpl.jena.sparql.graph.NodeTransformOp: com.hp.hpl.jena.sparql.graph.NodeTransform transform>;

        $r4 = staticinvoke <com.hp.hpl.jena.sparql.graph.NodeTransformLib: com.hp.hpl.jena.sparql.expr.ExprList transform(com.hp.hpl.jena.sparql.graph.NodeTransform,com.hp.hpl.jena.sparql.expr.ExprList)>($r3, $r1);

        if $r4 != $r1 goto label1;

        $r7 = specialinvoke r2.<com.hp.hpl.jena.sparql.algebra.TransformCopy: com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpFilter,com.hp.hpl.jena.sparql.algebra.Op)>(r0, r5);

        return $r7;

     label1:
        $r6 = staticinvoke <com.hp.hpl.jena.sparql.algebra.op.OpFilter: com.hp.hpl.jena.sparql.algebra.Op filter(com.hp.hpl.jena.sparql.expr.ExprList,com.hp.hpl.jena.sparql.algebra.Op)>($r4, r5);

        return $r6;
    }

    public com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpBGP)
    {
        com.hp.hpl.jena.sparql.core.BasicPattern $r3, $r4, $r5;
        com.hp.hpl.jena.sparql.graph.NodeTransform $r2;
        com.hp.hpl.jena.sparql.algebra.op.OpBGP r1, $r6;
        com.hp.hpl.jena.sparql.graph.NodeTransformOp r0;
        com.hp.hpl.jena.sparql.algebra.Op $r7;

        r0 := @this: com.hp.hpl.jena.sparql.graph.NodeTransformOp;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpBGP;

        $r2 = r0.<com.hp.hpl.jena.sparql.graph.NodeTransformOp: com.hp.hpl.jena.sparql.graph.NodeTransform transform>;

        $r3 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpBGP: com.hp.hpl.jena.sparql.core.BasicPattern getPattern()>();

        $r4 = staticinvoke <com.hp.hpl.jena.sparql.graph.NodeTransformLib: com.hp.hpl.jena.sparql.core.BasicPattern transform(com.hp.hpl.jena.sparql.graph.NodeTransform,com.hp.hpl.jena.sparql.core.BasicPattern)>($r2, $r3);

        $r5 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpBGP: com.hp.hpl.jena.sparql.core.BasicPattern getPattern()>();

        if $r4 != $r5 goto label1;

        $r7 = specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.TransformCopy: com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpBGP)>(r1);

        return $r7;

     label1:
        $r6 = new com.hp.hpl.jena.sparql.algebra.op.OpBGP;

        specialinvoke $r6.<com.hp.hpl.jena.sparql.algebra.op.OpBGP: void <init>(com.hp.hpl.jena.sparql.core.BasicPattern)>($r4);

        return $r6;
    }

    public com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpPath)
    {
        com.hp.hpl.jena.graph.Node $r2, $r5, $r6, $r8, $r11;
        com.hp.hpl.jena.sparql.path.Path $r9;
        com.hp.hpl.jena.sparql.algebra.Op $r15;
        com.hp.hpl.jena.sparql.algebra.op.OpPath r0, $r13;
        com.hp.hpl.jena.sparql.core.TriplePath $r1, $r12, $r14, r16;
        com.hp.hpl.jena.sparql.graph.NodeTransform $r4, $r7;
        com.hp.hpl.jena.graph.Triple $r10;
        com.hp.hpl.jena.sparql.graph.NodeTransformOp r3;

        r3 := @this: com.hp.hpl.jena.sparql.graph.NodeTransformOp;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpPath;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpPath: com.hp.hpl.jena.sparql.core.TriplePath getTriplePath()>();

        $r2 = virtualinvoke $r1.<com.hp.hpl.jena.sparql.core.TriplePath: com.hp.hpl.jena.graph.Node getSubject()>();

        $r4 = r3.<com.hp.hpl.jena.sparql.graph.NodeTransformOp: com.hp.hpl.jena.sparql.graph.NodeTransform transform>;

        $r5 = interfaceinvoke $r4.<com.hp.hpl.jena.sparql.graph.NodeTransform: com.hp.hpl.jena.graph.Node convert(com.hp.hpl.jena.graph.Node)>($r2);

        $r6 = virtualinvoke $r1.<com.hp.hpl.jena.sparql.core.TriplePath: com.hp.hpl.jena.graph.Node getObject()>();

        $r7 = r3.<com.hp.hpl.jena.sparql.graph.NodeTransformOp: com.hp.hpl.jena.sparql.graph.NodeTransform transform>;

        $r8 = interfaceinvoke $r7.<com.hp.hpl.jena.sparql.graph.NodeTransform: com.hp.hpl.jena.graph.Node convert(com.hp.hpl.jena.graph.Node)>($r6);

        if $r5 != $r2 goto label1;

        if $r8 != $r6 goto label1;

        $r15 = specialinvoke r3.<com.hp.hpl.jena.sparql.algebra.TransformCopy: com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpPath)>(r0);

        return $r15;

     label1:
        $r9 = virtualinvoke $r1.<com.hp.hpl.jena.sparql.core.TriplePath: com.hp.hpl.jena.sparql.path.Path getPath()>();

        if $r9 == null goto label2;

        $r14 = new com.hp.hpl.jena.sparql.core.TriplePath;

        specialinvoke $r14.<com.hp.hpl.jena.sparql.core.TriplePath: void <init>(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.path.Path,com.hp.hpl.jena.graph.Node)>($r5, $r9, $r8);

        r16 = $r14;

        goto label3;

     label2:
        $r10 = new com.hp.hpl.jena.graph.Triple;

        $r11 = virtualinvoke $r1.<com.hp.hpl.jena.sparql.core.TriplePath: com.hp.hpl.jena.graph.Node getPredicate()>();

        specialinvoke $r10.<com.hp.hpl.jena.graph.Triple: void <init>(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r5, $r11, $r8);

        $r12 = new com.hp.hpl.jena.sparql.core.TriplePath;

        specialinvoke $r12.<com.hp.hpl.jena.sparql.core.TriplePath: void <init>(com.hp.hpl.jena.graph.Triple)>($r10);

        r16 = $r12;

     label3:
        $r13 = new com.hp.hpl.jena.sparql.algebra.op.OpPath;

        specialinvoke $r13.<com.hp.hpl.jena.sparql.algebra.op.OpPath: void <init>(com.hp.hpl.jena.sparql.core.TriplePath)>(r16);

        return $r13;
    }

    public com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern)
    {
        com.hp.hpl.jena.sparql.core.BasicPattern $r3, $r4, $r10;
        com.hp.hpl.jena.graph.Node $r5, $r7, $r8;
        com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern r1, $r9;
        com.hp.hpl.jena.sparql.graph.NodeTransform $r2, $r6;
        com.hp.hpl.jena.sparql.graph.NodeTransformOp r0;
        com.hp.hpl.jena.sparql.algebra.Op $r11;

        r0 := @this: com.hp.hpl.jena.sparql.graph.NodeTransformOp;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern;

        $r2 = r0.<com.hp.hpl.jena.sparql.graph.NodeTransformOp: com.hp.hpl.jena.sparql.graph.NodeTransform transform>;

        $r3 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern: com.hp.hpl.jena.sparql.core.BasicPattern getBasicPattern()>();

        $r4 = staticinvoke <com.hp.hpl.jena.sparql.graph.NodeTransformLib: com.hp.hpl.jena.sparql.core.BasicPattern transform(com.hp.hpl.jena.sparql.graph.NodeTransform,com.hp.hpl.jena.sparql.core.BasicPattern)>($r2, $r3);

        $r5 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern: com.hp.hpl.jena.graph.Node getGraphNode()>();

        $r6 = r0.<com.hp.hpl.jena.sparql.graph.NodeTransformOp: com.hp.hpl.jena.sparql.graph.NodeTransform transform>;

        $r7 = interfaceinvoke $r6.<com.hp.hpl.jena.sparql.graph.NodeTransform: com.hp.hpl.jena.graph.Node convert(com.hp.hpl.jena.graph.Node)>($r5);

        $r8 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern: com.hp.hpl.jena.graph.Node getGraphNode()>();

        if $r7 != $r8 goto label1;

        $r10 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern: com.hp.hpl.jena.sparql.core.BasicPattern getBasicPattern()>();

        if $r4 != $r10 goto label1;

        $r11 = specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.TransformCopy: com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern)>(r1);

        return $r11;

     label1:
        $r9 = new com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern;

        specialinvoke $r9.<com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern: void <init>(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.core.BasicPattern)>($r7, $r4);

        return $r9;
    }

    public com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpGraph, com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpGraph r1, $r6;
        com.hp.hpl.jena.graph.Node $r3, $r4, $r5;
        com.hp.hpl.jena.sparql.graph.NodeTransform $r2;
        com.hp.hpl.jena.sparql.graph.NodeTransformOp r0;
        com.hp.hpl.jena.sparql.algebra.Op r7, $r8;

        r0 := @this: com.hp.hpl.jena.sparql.graph.NodeTransformOp;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpGraph;

        r7 := @parameter1: com.hp.hpl.jena.sparql.algebra.Op;

        $r2 = r0.<com.hp.hpl.jena.sparql.graph.NodeTransformOp: com.hp.hpl.jena.sparql.graph.NodeTransform transform>;

        $r3 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpGraph: com.hp.hpl.jena.graph.Node getNode()>();

        $r4 = interfaceinvoke $r2.<com.hp.hpl.jena.sparql.graph.NodeTransform: com.hp.hpl.jena.graph.Node convert(com.hp.hpl.jena.graph.Node)>($r3);

        $r5 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpGraph: com.hp.hpl.jena.graph.Node getNode()>();

        if $r4 != $r5 goto label1;

        $r8 = specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.TransformCopy: com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpGraph,com.hp.hpl.jena.sparql.algebra.Op)>(r1, r7);

        return $r8;

     label1:
        $r6 = new com.hp.hpl.jena.sparql.algebra.op.OpGraph;

        specialinvoke $r6.<com.hp.hpl.jena.sparql.algebra.op.OpGraph: void <init>(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.algebra.Op)>($r4, r7);

        return $r6;
    }

    public com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpDatasetNames)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpDatasetNames r1, $r6;
        com.hp.hpl.jena.graph.Node $r3, $r4, $r5;
        com.hp.hpl.jena.sparql.graph.NodeTransform $r2;
        com.hp.hpl.jena.sparql.graph.NodeTransformOp r0;
        com.hp.hpl.jena.sparql.algebra.Op $r7;

        r0 := @this: com.hp.hpl.jena.sparql.graph.NodeTransformOp;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpDatasetNames;

        $r2 = r0.<com.hp.hpl.jena.sparql.graph.NodeTransformOp: com.hp.hpl.jena.sparql.graph.NodeTransform transform>;

        $r3 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpDatasetNames: com.hp.hpl.jena.graph.Node getGraphNode()>();

        $r4 = interfaceinvoke $r2.<com.hp.hpl.jena.sparql.graph.NodeTransform: com.hp.hpl.jena.graph.Node convert(com.hp.hpl.jena.graph.Node)>($r3);

        $r5 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpDatasetNames: com.hp.hpl.jena.graph.Node getGraphNode()>();

        if $r4 != $r5 goto label1;

        $r7 = specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.TransformCopy: com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpDatasetNames)>(r1);

        return $r7;

     label1:
        $r6 = new com.hp.hpl.jena.sparql.algebra.op.OpDatasetNames;

        specialinvoke $r6.<com.hp.hpl.jena.sparql.algebra.op.OpDatasetNames: void <init>(com.hp.hpl.jena.graph.Node)>($r4);

        return $r6;
    }

    public com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpTable)
    {
        com.hp.hpl.jena.sparql.graph.NodeTransform $r4;
        java.util.List $r2;
        com.hp.hpl.jena.sparql.algebra.op.OpTable r0, $r6;
        int $i0;
        com.hp.hpl.jena.sparql.algebra.Table $r1, $r5;
        com.hp.hpl.jena.sparql.graph.NodeTransformOp r3;
        boolean $z0, $z1, $z2;

        r3 := @this: com.hp.hpl.jena.sparql.graph.NodeTransformOp;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpTable;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpTable: boolean isJoinIdentity()>();

        if $z0 == 0 goto label1;

        return r0;

     label1:
        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpTable: com.hp.hpl.jena.sparql.algebra.Table getTable()>();

        $z1 = interfaceinvoke $r1.<com.hp.hpl.jena.sparql.algebra.Table: boolean isEmpty()>();

        if $z1 == 0 goto label2;

        return r0;

     label2:
        $z2 = staticinvoke <com.hp.hpl.jena.sparql.algebra.table.TableUnit: boolean isTableUnit(com.hp.hpl.jena.sparql.algebra.Table)>($r1);

        if $z2 == 0 goto label3;

        return r0;

     label3:
        $r2 = interfaceinvoke $r1.<com.hp.hpl.jena.sparql.algebra.Table: java.util.List getVars()>();

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        if $i0 != 0 goto label4;

        return r0;

     label4:
        $r4 = r3.<com.hp.hpl.jena.sparql.graph.NodeTransformOp: com.hp.hpl.jena.sparql.graph.NodeTransform transform>;

        $r5 = staticinvoke <com.hp.hpl.jena.sparql.graph.NodeTransformLib: com.hp.hpl.jena.sparql.algebra.Table transform(com.hp.hpl.jena.sparql.algebra.Table,com.hp.hpl.jena.sparql.graph.NodeTransform)>($r1, $r4);

        $r6 = staticinvoke <com.hp.hpl.jena.sparql.algebra.op.OpTable: com.hp.hpl.jena.sparql.algebra.op.OpTable create(com.hp.hpl.jena.sparql.algebra.Table)>($r5);

        return $r6;
    }

    public com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpLeftJoin, com.hp.hpl.jena.sparql.algebra.Op, com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.graph.NodeTransform $r7;
        com.hp.hpl.jena.sparql.expr.ExprList $r1, r8;
        com.hp.hpl.jena.sparql.algebra.op.OpLeftJoin r0;
        com.hp.hpl.jena.sparql.graph.NodeTransformOp r5;
        com.hp.hpl.jena.sparql.algebra.Op r2, r3, $r4, $r6;

        r5 := @this: com.hp.hpl.jena.sparql.graph.NodeTransformOp;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpLeftJoin;

        r2 := @parameter1: com.hp.hpl.jena.sparql.algebra.Op;

        r3 := @parameter2: com.hp.hpl.jena.sparql.algebra.Op;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpLeftJoin: com.hp.hpl.jena.sparql.expr.ExprList getExprs()>();

        r8 = $r1;

        if $r1 == null goto label1;

        $r7 = r5.<com.hp.hpl.jena.sparql.graph.NodeTransformOp: com.hp.hpl.jena.sparql.graph.NodeTransform transform>;

        r8 = staticinvoke <com.hp.hpl.jena.sparql.graph.NodeTransformLib: com.hp.hpl.jena.sparql.expr.ExprList transform(com.hp.hpl.jena.sparql.graph.NodeTransform,com.hp.hpl.jena.sparql.expr.ExprList)>($r7, $r1);

     label1:
        if r8 != $r1 goto label2;

        $r6 = specialinvoke r5.<com.hp.hpl.jena.sparql.algebra.TransformCopy: com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpLeftJoin,com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.algebra.Op)>(r0, r2, r3);

        return $r6;

     label2:
        $r4 = staticinvoke <com.hp.hpl.jena.sparql.algebra.op.OpLeftJoin: com.hp.hpl.jena.sparql.algebra.Op create(com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.expr.ExprList)>(r2, r3, r8);

        return $r4;
    }

    public com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpProject, com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpProject r0, $r5;
        com.hp.hpl.jena.sparql.graph.NodeTransform $r3;
        java.util.List $r1, $r4;
        com.hp.hpl.jena.sparql.graph.NodeTransformOp r2;
        com.hp.hpl.jena.sparql.algebra.Op r6, $r7;

        r2 := @this: com.hp.hpl.jena.sparql.graph.NodeTransformOp;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpProject;

        r6 := @parameter1: com.hp.hpl.jena.sparql.algebra.Op;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpProject: java.util.List getVars()>();

        $r3 = r2.<com.hp.hpl.jena.sparql.graph.NodeTransformOp: com.hp.hpl.jena.sparql.graph.NodeTransform transform>;

        $r4 = staticinvoke <com.hp.hpl.jena.sparql.graph.NodeTransformLib: java.util.List transformVars(com.hp.hpl.jena.sparql.graph.NodeTransform,java.util.List)>($r3, $r1);

        if $r1 != $r4 goto label1;

        $r7 = specialinvoke r2.<com.hp.hpl.jena.sparql.algebra.TransformCopy: com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpProject,com.hp.hpl.jena.sparql.algebra.Op)>(r0, r6);

        return $r7;

     label1:
        $r5 = new com.hp.hpl.jena.sparql.algebra.op.OpProject;

        specialinvoke $r5.<com.hp.hpl.jena.sparql.algebra.op.OpProject: void <init>(com.hp.hpl.jena.sparql.algebra.Op,java.util.List)>(r6, $r4);

        return $r5;
    }

    public com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpAssign, com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpAssign r0;
        com.hp.hpl.jena.sparql.graph.NodeTransform $r3;
        com.hp.hpl.jena.sparql.core.VarExprList $r1, $r4;
        com.hp.hpl.jena.sparql.graph.NodeTransformOp r2;
        com.hp.hpl.jena.sparql.algebra.Op r5, $r6, $r7;

        r2 := @this: com.hp.hpl.jena.sparql.graph.NodeTransformOp;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpAssign;

        r5 := @parameter1: com.hp.hpl.jena.sparql.algebra.Op;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpAssign: com.hp.hpl.jena.sparql.core.VarExprList getVarExprList()>();

        $r3 = r2.<com.hp.hpl.jena.sparql.graph.NodeTransformOp: com.hp.hpl.jena.sparql.graph.NodeTransform transform>;

        $r4 = staticinvoke <com.hp.hpl.jena.sparql.graph.NodeTransformLib: com.hp.hpl.jena.sparql.core.VarExprList transform(com.hp.hpl.jena.sparql.graph.NodeTransform,com.hp.hpl.jena.sparql.core.VarExprList)>($r3, $r1);

        if $r1 != $r4 goto label1;

        $r7 = specialinvoke r2.<com.hp.hpl.jena.sparql.algebra.TransformCopy: com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpAssign,com.hp.hpl.jena.sparql.algebra.Op)>(r0, r5);

        return $r7;

     label1:
        $r6 = staticinvoke <com.hp.hpl.jena.sparql.algebra.op.OpAssign: com.hp.hpl.jena.sparql.algebra.Op assign(com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.core.VarExprList)>(r5, $r4);

        return $r6;
    }

    public com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpExtend, com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpExtend r0;
        com.hp.hpl.jena.sparql.graph.NodeTransform $r3;
        com.hp.hpl.jena.sparql.core.VarExprList $r1, $r4;
        com.hp.hpl.jena.sparql.graph.NodeTransformOp r2;
        com.hp.hpl.jena.sparql.algebra.Op r5, $r6, $r7;

        r2 := @this: com.hp.hpl.jena.sparql.graph.NodeTransformOp;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpExtend;

        r5 := @parameter1: com.hp.hpl.jena.sparql.algebra.Op;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpExtend: com.hp.hpl.jena.sparql.core.VarExprList getVarExprList()>();

        $r3 = r2.<com.hp.hpl.jena.sparql.graph.NodeTransformOp: com.hp.hpl.jena.sparql.graph.NodeTransform transform>;

        $r4 = staticinvoke <com.hp.hpl.jena.sparql.graph.NodeTransformLib: com.hp.hpl.jena.sparql.core.VarExprList transform(com.hp.hpl.jena.sparql.graph.NodeTransform,com.hp.hpl.jena.sparql.core.VarExprList)>($r3, $r1);

        if $r1 != $r4 goto label1;

        $r7 = specialinvoke r2.<com.hp.hpl.jena.sparql.algebra.TransformCopy: com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpExtend,com.hp.hpl.jena.sparql.algebra.Op)>(r0, r5);

        return $r7;

     label1:
        $r6 = staticinvoke <com.hp.hpl.jena.sparql.algebra.op.OpExtend: com.hp.hpl.jena.sparql.algebra.Op extend(com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.core.VarExprList)>(r5, $r4);

        return $r6;
    }

    public com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpOrder, com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.graph.NodeTransform $r2;
        com.hp.hpl.jena.sparql.algebra.op.OpOrder r1, $r6;
        java.util.List $r3, $r4, $r5;
        com.hp.hpl.jena.sparql.graph.NodeTransformOp r0;
        com.hp.hpl.jena.sparql.algebra.Op r7, $r8;

        r0 := @this: com.hp.hpl.jena.sparql.graph.NodeTransformOp;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpOrder;

        r7 := @parameter1: com.hp.hpl.jena.sparql.algebra.Op;

        $r2 = r0.<com.hp.hpl.jena.sparql.graph.NodeTransformOp: com.hp.hpl.jena.sparql.graph.NodeTransform transform>;

        $r3 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpOrder: java.util.List getConditions()>();

        $r4 = staticinvoke <com.hp.hpl.jena.sparql.graph.NodeTransformLib: java.util.List transform(com.hp.hpl.jena.sparql.graph.NodeTransform,java.util.List)>($r2, $r3);

        $r5 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpOrder: java.util.List getConditions()>();

        if $r4 != $r5 goto label1;

        $r8 = specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.TransformCopy: com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpOrder,com.hp.hpl.jena.sparql.algebra.Op)>(r1, r7);

        return $r8;

     label1:
        $r6 = new com.hp.hpl.jena.sparql.algebra.op.OpOrder;

        specialinvoke $r6.<com.hp.hpl.jena.sparql.algebra.op.OpOrder: void <init>(com.hp.hpl.jena.sparql.algebra.Op,java.util.List)>(r7, $r4);

        return $r6;
    }

    public com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpGroup, com.hp.hpl.jena.sparql.algebra.Op)
    {
        java.util.ArrayList $r5;
        com.hp.hpl.jena.sparql.algebra.op.OpGroup r1, $r9;
        com.hp.hpl.jena.sparql.expr.ExprAggregator r14, $r16;
        com.hp.hpl.jena.sparql.core.VarExprList $r3, $r4, $r11;
        com.hp.hpl.jena.sparql.algebra.Op r10, $r12;
        boolean $z0, $z1;
        java.util.Iterator $r7;
        com.hp.hpl.jena.sparql.graph.NodeTransform $r2, $r15;
        java.util.List $r6, $r8;
        java.lang.Object $r13;
        com.hp.hpl.jena.sparql.graph.NodeTransformOp r0;

        r0 := @this: com.hp.hpl.jena.sparql.graph.NodeTransformOp;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpGroup;

        r10 := @parameter1: com.hp.hpl.jena.sparql.algebra.Op;

        $r2 = r0.<com.hp.hpl.jena.sparql.graph.NodeTransformOp: com.hp.hpl.jena.sparql.graph.NodeTransform transform>;

        $r3 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpGroup: com.hp.hpl.jena.sparql.core.VarExprList getGroupVars()>();

        $r4 = staticinvoke <com.hp.hpl.jena.sparql.graph.NodeTransformLib: com.hp.hpl.jena.sparql.core.VarExprList transform(com.hp.hpl.jena.sparql.graph.NodeTransform,com.hp.hpl.jena.sparql.core.VarExprList)>($r2, $r3);

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        $r6 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpGroup: java.util.List getAggregators()>();

        $r7 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r13 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r14 = (com.hp.hpl.jena.sparql.expr.ExprAggregator) $r13;

        $r15 = r0.<com.hp.hpl.jena.sparql.graph.NodeTransformOp: com.hp.hpl.jena.sparql.graph.NodeTransform transform>;

        $r16 = virtualinvoke r14.<com.hp.hpl.jena.sparql.expr.ExprAggregator: com.hp.hpl.jena.sparql.expr.ExprAggregator applyNodeTransform(com.hp.hpl.jena.sparql.graph.NodeTransform)>($r15);

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r16);

        goto label1;

     label2:
        $r8 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpGroup: java.util.List getAggregators()>();

        $z1 = interfaceinvoke $r5.<java.util.List: boolean equals(java.lang.Object)>($r8);

        if $z1 == 0 goto label3;

        $r11 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpGroup: com.hp.hpl.jena.sparql.core.VarExprList getGroupVars()>();

        if $r4 != $r11 goto label3;

        $r12 = specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.TransformCopy: com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpGroup,com.hp.hpl.jena.sparql.algebra.Op)>(r1, r10);

        return $r12;

     label3:
        $r9 = new com.hp.hpl.jena.sparql.algebra.op.OpGroup;

        specialinvoke $r9.<com.hp.hpl.jena.sparql.algebra.op.OpGroup: void <init>(com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.core.VarExprList,java.util.List)>(r10, $r4, $r5);

        return $r9;
    }
}
