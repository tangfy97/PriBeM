public final class org.apache.poi.hssf.record.common.FeatFormulaErr2 extends java.lang.Object implements org.apache.poi.hssf.record.common.SharedFeature
{
    static org.apache.poi.util.BitField checkCalculationErrors;
    static org.apache.poi.util.BitField checkEmptyCellRef;
    static org.apache.poi.util.BitField checkNumbersAsText;
    static org.apache.poi.util.BitField checkInconsistentRanges;
    static org.apache.poi.util.BitField checkInconsistentFormulas;
    static org.apache.poi.util.BitField checkDateTimeFormats;
    static org.apache.poi.util.BitField checkUnprotectedFormulas;
    static org.apache.poi.util.BitField performDataValidation;
    private int errorCheck;

    public void <init>()
    {
        org.apache.poi.hssf.record.common.FeatFormulaErr2 r0;

        r0 := @this: org.apache.poi.hssf.record.common.FeatFormulaErr2;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void <init>(org.apache.poi.hssf.record.RecordInputStream)
    {
        org.apache.poi.hssf.record.common.FeatFormulaErr2 r0;
        int $i0;
        org.apache.poi.hssf.record.RecordInputStream r1;

        r0 := @this: org.apache.poi.hssf.record.common.FeatFormulaErr2;

        r1 := @parameter0: org.apache.poi.hssf.record.RecordInputStream;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i0 = virtualinvoke r1.<org.apache.poi.hssf.record.RecordInputStream: int readInt()>();

        r0.<org.apache.poi.hssf.record.common.FeatFormulaErr2: int errorCheck> = $i0;

        return;
    }

    public java.lang.String toString()
    {
        org.apache.poi.hssf.record.common.FeatFormulaErr2 r2;
        java.lang.String $r1;
        java.lang.StringBuffer $r0;

        r2 := @this: org.apache.poi.hssf.record.common.FeatFormulaErr2;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" [FEATURE FORMULA ERRORS]\n");

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("  checkCalculationErrors    = ");

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("  checkEmptyCellRef         = ");

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("  checkNumbersAsText        = ");

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("  checkInconsistentRanges   = ");

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("  checkInconsistentFormulas = ");

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("  checkDateTimeFormats      = ");

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("  checkUnprotectedFormulas  = ");

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("  performDataValidation     = ");

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" [/FEATURE FORMULA ERRORS]\n");

        $r1 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r1;
    }

    public void serialize(org.apache.poi.util.LittleEndianOutput)
    {
        org.apache.poi.hssf.record.common.FeatFormulaErr2 r1;
        int $i0;
        org.apache.poi.util.LittleEndianOutput r0;

        r1 := @this: org.apache.poi.hssf.record.common.FeatFormulaErr2;

        r0 := @parameter0: org.apache.poi.util.LittleEndianOutput;

        $i0 = r1.<org.apache.poi.hssf.record.common.FeatFormulaErr2: int errorCheck>;

        interfaceinvoke r0.<org.apache.poi.util.LittleEndianOutput: void writeInt(int)>($i0);

        return;
    }

    public int getDataSize()
    {
        org.apache.poi.hssf.record.common.FeatFormulaErr2 r0;

        r0 := @this: org.apache.poi.hssf.record.common.FeatFormulaErr2;

        return 4;
    }

    public int _getRawErrorCheckValue()
    {
        org.apache.poi.hssf.record.common.FeatFormulaErr2 r0;
        int $i0;

        r0 := @this: org.apache.poi.hssf.record.common.FeatFormulaErr2;

        $i0 = r0.<org.apache.poi.hssf.record.common.FeatFormulaErr2: int errorCheck>;

        return $i0;
    }

    public boolean getCheckCalculationErrors()
    {
        org.apache.poi.util.BitField $r1;
        org.apache.poi.hssf.record.common.FeatFormulaErr2 r0;
        int $i0;
        boolean $z0;

        r0 := @this: org.apache.poi.hssf.record.common.FeatFormulaErr2;

        $r1 = <org.apache.poi.hssf.record.common.FeatFormulaErr2: org.apache.poi.util.BitField checkCalculationErrors>;

        $i0 = r0.<org.apache.poi.hssf.record.common.FeatFormulaErr2: int errorCheck>;

        $z0 = virtualinvoke $r1.<org.apache.poi.util.BitField: boolean isSet(int)>($i0);

        return $z0;
    }

    public void setCheckCalculationErrors(boolean)
    {
        org.apache.poi.util.BitField $r1;
        org.apache.poi.hssf.record.common.FeatFormulaErr2 r0;
        int $i0;
        boolean z0;

        r0 := @this: org.apache.poi.hssf.record.common.FeatFormulaErr2;

        z0 := @parameter0: boolean;

        $r1 = <org.apache.poi.hssf.record.common.FeatFormulaErr2: org.apache.poi.util.BitField checkCalculationErrors>;

        $i0 = r0.<org.apache.poi.hssf.record.common.FeatFormulaErr2: int errorCheck>;

        virtualinvoke $r1.<org.apache.poi.util.BitField: int setBoolean(int,boolean)>($i0, z0);

        return;
    }

    public boolean getCheckEmptyCellRef()
    {
        org.apache.poi.util.BitField $r1;
        org.apache.poi.hssf.record.common.FeatFormulaErr2 r0;
        int $i0;
        boolean $z0;

        r0 := @this: org.apache.poi.hssf.record.common.FeatFormulaErr2;

        $r1 = <org.apache.poi.hssf.record.common.FeatFormulaErr2: org.apache.poi.util.BitField checkEmptyCellRef>;

        $i0 = r0.<org.apache.poi.hssf.record.common.FeatFormulaErr2: int errorCheck>;

        $z0 = virtualinvoke $r1.<org.apache.poi.util.BitField: boolean isSet(int)>($i0);

        return $z0;
    }

    public void setCheckEmptyCellRef(boolean)
    {
        org.apache.poi.util.BitField $r1;
        org.apache.poi.hssf.record.common.FeatFormulaErr2 r0;
        int $i0;
        boolean z0;

        r0 := @this: org.apache.poi.hssf.record.common.FeatFormulaErr2;

        z0 := @parameter0: boolean;

        $r1 = <org.apache.poi.hssf.record.common.FeatFormulaErr2: org.apache.poi.util.BitField checkEmptyCellRef>;

        $i0 = r0.<org.apache.poi.hssf.record.common.FeatFormulaErr2: int errorCheck>;

        virtualinvoke $r1.<org.apache.poi.util.BitField: int setBoolean(int,boolean)>($i0, z0);

        return;
    }

    public boolean getCheckNumbersAsText()
    {
        org.apache.poi.util.BitField $r1;
        org.apache.poi.hssf.record.common.FeatFormulaErr2 r0;
        int $i0;
        boolean $z0;

        r0 := @this: org.apache.poi.hssf.record.common.FeatFormulaErr2;

        $r1 = <org.apache.poi.hssf.record.common.FeatFormulaErr2: org.apache.poi.util.BitField checkNumbersAsText>;

        $i0 = r0.<org.apache.poi.hssf.record.common.FeatFormulaErr2: int errorCheck>;

        $z0 = virtualinvoke $r1.<org.apache.poi.util.BitField: boolean isSet(int)>($i0);

        return $z0;
    }

    public void setCheckNumbersAsText(boolean)
    {
        org.apache.poi.util.BitField $r1;
        org.apache.poi.hssf.record.common.FeatFormulaErr2 r0;
        int $i0;
        boolean z0;

        r0 := @this: org.apache.poi.hssf.record.common.FeatFormulaErr2;

        z0 := @parameter0: boolean;

        $r1 = <org.apache.poi.hssf.record.common.FeatFormulaErr2: org.apache.poi.util.BitField checkNumbersAsText>;

        $i0 = r0.<org.apache.poi.hssf.record.common.FeatFormulaErr2: int errorCheck>;

        virtualinvoke $r1.<org.apache.poi.util.BitField: int setBoolean(int,boolean)>($i0, z0);

        return;
    }

    public boolean getCheckInconsistentRanges()
    {
        org.apache.poi.util.BitField $r1;
        org.apache.poi.hssf.record.common.FeatFormulaErr2 r0;
        int $i0;
        boolean $z0;

        r0 := @this: org.apache.poi.hssf.record.common.FeatFormulaErr2;

        $r1 = <org.apache.poi.hssf.record.common.FeatFormulaErr2: org.apache.poi.util.BitField checkInconsistentRanges>;

        $i0 = r0.<org.apache.poi.hssf.record.common.FeatFormulaErr2: int errorCheck>;

        $z0 = virtualinvoke $r1.<org.apache.poi.util.BitField: boolean isSet(int)>($i0);

        return $z0;
    }

    public void setCheckInconsistentRanges(boolean)
    {
        org.apache.poi.util.BitField $r1;
        org.apache.poi.hssf.record.common.FeatFormulaErr2 r0;
        int $i0;
        boolean z0;

        r0 := @this: org.apache.poi.hssf.record.common.FeatFormulaErr2;

        z0 := @parameter0: boolean;

        $r1 = <org.apache.poi.hssf.record.common.FeatFormulaErr2: org.apache.poi.util.BitField checkInconsistentRanges>;

        $i0 = r0.<org.apache.poi.hssf.record.common.FeatFormulaErr2: int errorCheck>;

        virtualinvoke $r1.<org.apache.poi.util.BitField: int setBoolean(int,boolean)>($i0, z0);

        return;
    }

    public boolean getCheckInconsistentFormulas()
    {
        org.apache.poi.util.BitField $r1;
        org.apache.poi.hssf.record.common.FeatFormulaErr2 r0;
        int $i0;
        boolean $z0;

        r0 := @this: org.apache.poi.hssf.record.common.FeatFormulaErr2;

        $r1 = <org.apache.poi.hssf.record.common.FeatFormulaErr2: org.apache.poi.util.BitField checkInconsistentFormulas>;

        $i0 = r0.<org.apache.poi.hssf.record.common.FeatFormulaErr2: int errorCheck>;

        $z0 = virtualinvoke $r1.<org.apache.poi.util.BitField: boolean isSet(int)>($i0);

        return $z0;
    }

    public void setCheckInconsistentFormulas(boolean)
    {
        org.apache.poi.util.BitField $r1;
        org.apache.poi.hssf.record.common.FeatFormulaErr2 r0;
        int $i0;
        boolean z0;

        r0 := @this: org.apache.poi.hssf.record.common.FeatFormulaErr2;

        z0 := @parameter0: boolean;

        $r1 = <org.apache.poi.hssf.record.common.FeatFormulaErr2: org.apache.poi.util.BitField checkInconsistentFormulas>;

        $i0 = r0.<org.apache.poi.hssf.record.common.FeatFormulaErr2: int errorCheck>;

        virtualinvoke $r1.<org.apache.poi.util.BitField: int setBoolean(int,boolean)>($i0, z0);

        return;
    }

    public boolean getCheckDateTimeFormats()
    {
        org.apache.poi.util.BitField $r1;
        org.apache.poi.hssf.record.common.FeatFormulaErr2 r0;
        int $i0;
        boolean $z0;

        r0 := @this: org.apache.poi.hssf.record.common.FeatFormulaErr2;

        $r1 = <org.apache.poi.hssf.record.common.FeatFormulaErr2: org.apache.poi.util.BitField checkDateTimeFormats>;

        $i0 = r0.<org.apache.poi.hssf.record.common.FeatFormulaErr2: int errorCheck>;

        $z0 = virtualinvoke $r1.<org.apache.poi.util.BitField: boolean isSet(int)>($i0);

        return $z0;
    }

    public void setCheckDateTimeFormats(boolean)
    {
        org.apache.poi.util.BitField $r1;
        org.apache.poi.hssf.record.common.FeatFormulaErr2 r0;
        int $i0;
        boolean z0;

        r0 := @this: org.apache.poi.hssf.record.common.FeatFormulaErr2;

        z0 := @parameter0: boolean;

        $r1 = <org.apache.poi.hssf.record.common.FeatFormulaErr2: org.apache.poi.util.BitField checkDateTimeFormats>;

        $i0 = r0.<org.apache.poi.hssf.record.common.FeatFormulaErr2: int errorCheck>;

        virtualinvoke $r1.<org.apache.poi.util.BitField: int setBoolean(int,boolean)>($i0, z0);

        return;
    }

    public boolean getCheckUnprotectedFormulas()
    {
        org.apache.poi.util.BitField $r1;
        org.apache.poi.hssf.record.common.FeatFormulaErr2 r0;
        int $i0;
        boolean $z0;

        r0 := @this: org.apache.poi.hssf.record.common.FeatFormulaErr2;

        $r1 = <org.apache.poi.hssf.record.common.FeatFormulaErr2: org.apache.poi.util.BitField checkUnprotectedFormulas>;

        $i0 = r0.<org.apache.poi.hssf.record.common.FeatFormulaErr2: int errorCheck>;

        $z0 = virtualinvoke $r1.<org.apache.poi.util.BitField: boolean isSet(int)>($i0);

        return $z0;
    }

    public void setCheckUnprotectedFormulas(boolean)
    {
        org.apache.poi.util.BitField $r1;
        org.apache.poi.hssf.record.common.FeatFormulaErr2 r0;
        int $i0;
        boolean z0;

        r0 := @this: org.apache.poi.hssf.record.common.FeatFormulaErr2;

        z0 := @parameter0: boolean;

        $r1 = <org.apache.poi.hssf.record.common.FeatFormulaErr2: org.apache.poi.util.BitField checkUnprotectedFormulas>;

        $i0 = r0.<org.apache.poi.hssf.record.common.FeatFormulaErr2: int errorCheck>;

        virtualinvoke $r1.<org.apache.poi.util.BitField: int setBoolean(int,boolean)>($i0, z0);

        return;
    }

    public boolean getPerformDataValidation()
    {
        org.apache.poi.util.BitField $r1;
        org.apache.poi.hssf.record.common.FeatFormulaErr2 r0;
        int $i0;
        boolean $z0;

        r0 := @this: org.apache.poi.hssf.record.common.FeatFormulaErr2;

        $r1 = <org.apache.poi.hssf.record.common.FeatFormulaErr2: org.apache.poi.util.BitField performDataValidation>;

        $i0 = r0.<org.apache.poi.hssf.record.common.FeatFormulaErr2: int errorCheck>;

        $z0 = virtualinvoke $r1.<org.apache.poi.util.BitField: boolean isSet(int)>($i0);

        return $z0;
    }

    public void setPerformDataValidation(boolean)
    {
        org.apache.poi.util.BitField $r1;
        org.apache.poi.hssf.record.common.FeatFormulaErr2 r0;
        int $i0;
        boolean z0;

        r0 := @this: org.apache.poi.hssf.record.common.FeatFormulaErr2;

        z0 := @parameter0: boolean;

        $r1 = <org.apache.poi.hssf.record.common.FeatFormulaErr2: org.apache.poi.util.BitField performDataValidation>;

        $i0 = r0.<org.apache.poi.hssf.record.common.FeatFormulaErr2: int errorCheck>;

        virtualinvoke $r1.<org.apache.poi.util.BitField: int setBoolean(int,boolean)>($i0, z0);

        return;
    }

    static void <clinit>()
    {
        org.apache.poi.util.BitField $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7;

        $r0 = staticinvoke <org.apache.poi.util.BitFieldFactory: org.apache.poi.util.BitField getInstance(int)>(1);

        <org.apache.poi.hssf.record.common.FeatFormulaErr2: org.apache.poi.util.BitField checkCalculationErrors> = $r0;

        $r1 = staticinvoke <org.apache.poi.util.BitFieldFactory: org.apache.poi.util.BitField getInstance(int)>(2);

        <org.apache.poi.hssf.record.common.FeatFormulaErr2: org.apache.poi.util.BitField checkEmptyCellRef> = $r1;

        $r2 = staticinvoke <org.apache.poi.util.BitFieldFactory: org.apache.poi.util.BitField getInstance(int)>(4);

        <org.apache.poi.hssf.record.common.FeatFormulaErr2: org.apache.poi.util.BitField checkNumbersAsText> = $r2;

        $r3 = staticinvoke <org.apache.poi.util.BitFieldFactory: org.apache.poi.util.BitField getInstance(int)>(8);

        <org.apache.poi.hssf.record.common.FeatFormulaErr2: org.apache.poi.util.BitField checkInconsistentRanges> = $r3;

        $r4 = staticinvoke <org.apache.poi.util.BitFieldFactory: org.apache.poi.util.BitField getInstance(int)>(16);

        <org.apache.poi.hssf.record.common.FeatFormulaErr2: org.apache.poi.util.BitField checkInconsistentFormulas> = $r4;

        $r5 = staticinvoke <org.apache.poi.util.BitFieldFactory: org.apache.poi.util.BitField getInstance(int)>(32);

        <org.apache.poi.hssf.record.common.FeatFormulaErr2: org.apache.poi.util.BitField checkDateTimeFormats> = $r5;

        $r6 = staticinvoke <org.apache.poi.util.BitFieldFactory: org.apache.poi.util.BitField getInstance(int)>(64);

        <org.apache.poi.hssf.record.common.FeatFormulaErr2: org.apache.poi.util.BitField checkUnprotectedFormulas> = $r6;

        $r7 = staticinvoke <org.apache.poi.util.BitFieldFactory: org.apache.poi.util.BitField getInstance(int)>(128);

        <org.apache.poi.hssf.record.common.FeatFormulaErr2: org.apache.poi.util.BitField performDataValidation> = $r7;

        return;
    }
}
