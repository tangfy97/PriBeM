public abstract class org.eclipse.jdt.internal.compiler.batch.ClasspathLocation extends java.lang.Object implements org.eclipse.jdt.internal.compiler.batch.FileSystem$Classpath, org.eclipse.jdt.internal.compiler.util.SuffixConstants
{
    public static final int SOURCE;
    public static final int BINARY;
    java.lang.String path;
    char[] normalizedPath;
    public org.eclipse.jdt.internal.compiler.env.AccessRuleSet accessRuleSet;
    public java.lang.String destinationPath;

    protected void <init>(org.eclipse.jdt.internal.compiler.env.AccessRuleSet, java.lang.String)
    {
        org.eclipse.jdt.internal.compiler.env.AccessRuleSet r1;
        org.eclipse.jdt.internal.compiler.batch.ClasspathLocation r0;
        java.lang.String r2;

        r0 := @this: org.eclipse.jdt.internal.compiler.batch.ClasspathLocation;

        r1 := @parameter0: org.eclipse.jdt.internal.compiler.env.AccessRuleSet;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.eclipse.jdt.internal.compiler.batch.ClasspathLocation: org.eclipse.jdt.internal.compiler.env.AccessRuleSet accessRuleSet> = r1;

        r0.<org.eclipse.jdt.internal.compiler.batch.ClasspathLocation: java.lang.String destinationPath> = r2;

        return;
    }

    protected org.eclipse.jdt.internal.compiler.env.AccessRestriction fetchAccessRestriction(java.lang.String)
    {
        org.eclipse.jdt.internal.compiler.env.AccessRuleSet $r1, $r6;
        char $c3, $c4;
        org.eclipse.jdt.internal.compiler.env.AccessRestriction $r7;
        int $i0, $i1, $i2, $i5;
        char[] $r3, $r5;
        org.eclipse.jdt.internal.compiler.batch.ClasspathLocation r0;
        java.lang.String r2, $r4;

        r0 := @this: org.eclipse.jdt.internal.compiler.batch.ClasspathLocation;

        r2 := @parameter0: java.lang.String;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.batch.ClasspathLocation: org.eclipse.jdt.internal.compiler.env.AccessRuleSet accessRuleSet>;

        if $r1 != null goto label1;

        return null;

     label1:
        $i0 = virtualinvoke r2.<java.lang.String: int length()>();

        $r3 = <org.eclipse.jdt.internal.compiler.batch.ClasspathLocation: char[] SUFFIX_CLASS>;

        $i1 = lengthof $r3;

        $i2 = $i0 - $i1;

        $r4 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int,int)>(0, $i2);

        $r5 = virtualinvoke $r4.<java.lang.String: char[] toCharArray()>();

        $c3 = <java.io.File: char separatorChar>;

        $i5 = (int) $c3;

        if $i5 != 92 goto label2;

        $c4 = <java.io.File: char separatorChar>;

        staticinvoke <org.eclipse.jdt.core.compiler.CharOperation: void replace(char[],char,char)>($r5, $c4, 47);

     label2:
        $r6 = r0.<org.eclipse.jdt.internal.compiler.batch.ClasspathLocation: org.eclipse.jdt.internal.compiler.env.AccessRuleSet accessRuleSet>;

        $r7 = virtualinvoke $r6.<org.eclipse.jdt.internal.compiler.env.AccessRuleSet: org.eclipse.jdt.internal.compiler.env.AccessRestriction getViolatedRestriction(char[])>($r5);

        return $r7;
    }

    public static void <clinit>()
    {
        <org.eclipse.jdt.internal.compiler.batch.ClasspathLocation: int BINARY> = 2;

        <org.eclipse.jdt.internal.compiler.batch.ClasspathLocation: int SOURCE> = 1;

        return;
    }
}
