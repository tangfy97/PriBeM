public class org.apache.pdfbox.pdmodel.font.PDType1CFont extends org.apache.pdfbox.pdmodel.font.PDSimpleFont
{
    private org.apache.fontbox.cff.CFFFont cffFont;
    private java.lang.String fontname;
    private java.util.Map sidToName;
    private java.util.Map codeToSID;
    private java.util.Map sidToCharacter;
    private java.util.Map characterToSID;
    private org.apache.fontbox.afm.FontMetric fontMetric;
    private java.awt.Font awtFont;
    private java.util.Map glyphWidths;
    private java.util.Map glyphHeights;
    private java.lang.Float avgWidth;
    private org.apache.pdfbox.pdmodel.common.PDRectangle fontBBox;
    private static final org.apache.commons.logging.Log log;
    private static final byte[] SPACE_BYTES;

    public void <init>(org.apache.pdfbox.cos.COSDictionary) throws java.io.IOException
    {
        java.util.HashMap $r2, $r3, $r4, $r5, $r6, $r7;
        org.apache.pdfbox.cos.COSDictionary r1;
        org.apache.pdfbox.pdmodel.font.PDType1CFont r0;

        r0 := @this: org.apache.pdfbox.pdmodel.font.PDType1CFont;

        r1 := @parameter0: org.apache.pdfbox.cos.COSDictionary;

        specialinvoke r0.<org.apache.pdfbox.pdmodel.font.PDSimpleFont: void <init>(org.apache.pdfbox.cos.COSDictionary)>(r1);

        r0.<org.apache.pdfbox.pdmodel.font.PDType1CFont: org.apache.fontbox.cff.CFFFont cffFont> = null;

        r0.<org.apache.pdfbox.pdmodel.font.PDType1CFont: java.lang.String fontname> = null;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<org.apache.pdfbox.pdmodel.font.PDType1CFont: java.util.Map sidToName> = $r2;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        r0.<org.apache.pdfbox.pdmodel.font.PDType1CFont: java.util.Map codeToSID> = $r3;

        $r4 = new java.util.HashMap;

        specialinvoke $r4.<java.util.HashMap: void <init>()>();

        r0.<org.apache.pdfbox.pdmodel.font.PDType1CFont: java.util.Map sidToCharacter> = $r4;

        $r5 = new java.util.HashMap;

        specialinvoke $r5.<java.util.HashMap: void <init>()>();

        r0.<org.apache.pdfbox.pdmodel.font.PDType1CFont: java.util.Map characterToSID> = $r5;

        r0.<org.apache.pdfbox.pdmodel.font.PDType1CFont: org.apache.fontbox.afm.FontMetric fontMetric> = null;

        r0.<org.apache.pdfbox.pdmodel.font.PDType1CFont: java.awt.Font awtFont> = null;

        $r6 = new java.util.HashMap;

        specialinvoke $r6.<java.util.HashMap: void <init>()>();

        r0.<org.apache.pdfbox.pdmodel.font.PDType1CFont: java.util.Map glyphWidths> = $r6;

        $r7 = new java.util.HashMap;

        specialinvoke $r7.<java.util.HashMap: void <init>()>();

        r0.<org.apache.pdfbox.pdmodel.font.PDType1CFont: java.util.Map glyphHeights> = $r7;

        r0.<org.apache.pdfbox.pdmodel.font.PDType1CFont: java.lang.Float avgWidth> = null;

        r0.<org.apache.pdfbox.pdmodel.font.PDType1CFont: org.apache.pdfbox.pdmodel.common.PDRectangle fontBBox> = null;

        specialinvoke r0.<org.apache.pdfbox.pdmodel.font.PDType1CFont: void load()>();

        return;
    }

    public java.lang.String encode(byte[], int, int) throws java.io.IOException
    {
        byte[] r1;
        short $s3, $s4;
        byte $b2;
        int i0, i1, $i5;
        java.lang.String $r2, $r8, $r10;
        org.apache.commons.logging.Log $r4;
        java.lang.StringBuilder $r5, $r6, $r7, $r9, $r11;
        org.apache.pdfbox.pdmodel.font.PDType1CFont r0;

        r0 := @this: org.apache.pdfbox.pdmodel.font.PDType1CFont;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = specialinvoke r0.<org.apache.pdfbox.pdmodel.font.PDType1CFont: java.lang.String getCharacter(byte[],int,int)>(r1, i0, i1);

        if $r2 != null goto label1;

        $r4 = <org.apache.pdfbox.pdmodel.font.PDType1CFont: org.apache.commons.logging.Log log>;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No character for code ");

        $b2 = r1[i0];

        $s4 = (short) $b2;

        $s3 = $s4 & 255;

        $i5 = (int) $s3;

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in ");

        $r8 = r0.<org.apache.pdfbox.pdmodel.font.PDType1CFont: java.lang.String fontname>;

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r4.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r10);

        return null;

     label1:
        return $r2;
    }

    private java.lang.String getCharacter(byte[], int, int)
    {
        byte[] r1;
        java.lang.Integer $r3, $r5, $r7, $r10, $r12;
        java.util.Map $r2, $r4, $r6, $r9;
        int i0, i1, $i2, i3;
        java.lang.String r13;
        boolean $z0, $z1;
        java.lang.Object $r8, $r11;
        org.apache.pdfbox.pdmodel.font.PDType1CFont r0;

        r0 := @this: org.apache.pdfbox.pdmodel.font.PDType1CFont;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i2 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.font.PDType1CFont: int getCodeFromArray(byte[],int,int)>(r1, i0, i1);

        i3 = $i2;

        r13 = null;

        $r2 = r0.<org.apache.pdfbox.pdmodel.font.PDType1CFont: java.util.Map codeToSID>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>($r3);

        if $z0 == 0 goto label1;

        $r9 = r0.<org.apache.pdfbox.pdmodel.font.PDType1CFont: java.util.Map codeToSID>;

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r11 = interfaceinvoke $r9.<java.util.Map: java.lang.Object get(java.lang.Object)>($r10);

        $r12 = (java.lang.Integer) $r11;

        i3 = virtualinvoke $r12.<java.lang.Integer: int intValue()>();

     label1:
        $r4 = r0.<org.apache.pdfbox.pdmodel.font.PDType1CFont: java.util.Map sidToCharacter>;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i3);

        $z1 = interfaceinvoke $r4.<java.util.Map: boolean containsKey(java.lang.Object)>($r5);

        if $z1 == 0 goto label2;

        $r6 = r0.<org.apache.pdfbox.pdmodel.font.PDType1CFont: java.util.Map sidToCharacter>;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i3);

        $r8 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>($r7);

        r13 = (java.lang.String) $r8;

     label2:
        return r13;
    }

    public int encodeToCID(byte[], int, int)
    {
        byte[] r0;
        byte $b2, $b4;
        int i0, i1, $i3, $i5, $i6, i7, $i9, $i10, $i11;
        org.apache.pdfbox.pdmodel.font.PDType1CFont r1;

        r1 := @this: org.apache.pdfbox.pdmodel.font.PDType1CFont;

        r0 := @parameter0: byte[];

        i1 := @parameter1: int;

        i0 := @parameter2: int;

        if i0 <= 2 goto label1;

        $i9 = (int) -1;

        return $i9;

     label1:
        $b2 = r0[i1];

        $i10 = (int) $b2;

        i7 = $i10 & 255;

        if i0 != 2 goto label2;

        $i5 = i7 * 256;

        $i3 = i1 + 1;

        $b4 = r0[$i3];

        $i11 = (int) $b4;

        $i6 = $i5 + $i11;

        i7 = $i6 & 255;

     label2:
        return i7;
    }

    public float getFontWidth(byte[], int, int) throws java.io.IOException
    {
        byte[] r1, $r8;
        java.lang.Float $r6, $r9, r19;
        org.apache.fontbox.cff.CFFFont $r15;
        short $s3, $s4;
        byte $b2;
        java.util.Map $r3, $r7;
        int i0, i1, $i5;
        org.apache.fontbox.afm.FontMetric $r5;
        java.lang.String $r2, $r16, $r18;
        boolean $z0;
        float $f0, $f1;
        java.lang.Object $r4;
        org.apache.commons.logging.Log $r11;
        java.lang.StringBuilder $r12, $r13, $r14, $r17, $r20;
        org.apache.pdfbox.pdmodel.font.PDType1CFont r0;

        r0 := @this: org.apache.pdfbox.pdmodel.font.PDType1CFont;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = specialinvoke r0.<org.apache.pdfbox.pdmodel.font.PDType1CFont: java.lang.String getName(byte[],int,int)>(r1, i0, i1);

        if $r2 != null goto label1;

        $r8 = <org.apache.pdfbox.pdmodel.font.PDType1CFont: byte[] SPACE_BYTES>;

        $z0 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>($r8, r1);

        if $z0 != 0 goto label1;

        $r11 = <org.apache.pdfbox.pdmodel.font.PDType1CFont: org.apache.commons.logging.Log log>;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No name for code ");

        $b2 = r1[i0];

        $s4 = (short) $b2;

        $s3 = $s4 & 255;

        $i5 = (int) $s3;

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in ");

        $r15 = r0.<org.apache.pdfbox.pdmodel.font.PDType1CFont: org.apache.fontbox.cff.CFFFont cffFont>;

        $r16 = virtualinvoke $r15.<org.apache.fontbox.cff.CFFFont: java.lang.String getName()>();

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r11.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r18);

        return 0.0F;

     label1:
        $r3 = r0.<org.apache.pdfbox.pdmodel.font.PDType1CFont: java.util.Map glyphWidths>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r2);

        $r9 = (java.lang.Float) $r4;

        r19 = $r9;

        if $r9 != null goto label2;

        $r5 = specialinvoke r0.<org.apache.pdfbox.pdmodel.font.PDType1CFont: org.apache.fontbox.afm.FontMetric getFontMetric()>();

        $f1 = virtualinvoke $r5.<org.apache.fontbox.afm.FontMetric: float getCharacterWidth(java.lang.String)>($r2);

        $r6 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f1);

        r19 = $r6;

        $r7 = r0.<org.apache.pdfbox.pdmodel.font.PDType1CFont: java.util.Map glyphWidths>;

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r6);

     label2:
        $f0 = virtualinvoke r19.<java.lang.Float: float floatValue()>();

        return $f0;
    }

    public float getFontHeight(byte[], int, int) throws java.io.IOException
    {
        byte[] r1;
        java.lang.Float $r6, r17;
        org.apache.fontbox.cff.CFFFont $r13;
        short $s3, $s4;
        byte $b2;
        java.util.Map $r3, $r7;
        int i0, i1, $i5;
        org.apache.fontbox.afm.FontMetric $r5;
        java.lang.String $r2, $r14, $r16;
        float $f0, $f1;
        java.lang.Object $r4;
        org.apache.commons.logging.Log $r9;
        java.lang.StringBuilder $r10, $r11, $r12, $r15, $r18;
        org.apache.pdfbox.pdmodel.font.PDType1CFont r0;

        r0 := @this: org.apache.pdfbox.pdmodel.font.PDType1CFont;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = specialinvoke r0.<org.apache.pdfbox.pdmodel.font.PDType1CFont: java.lang.String getName(byte[],int,int)>(r1, i0, i1);

        if $r2 != null goto label1;

        $r9 = <org.apache.pdfbox.pdmodel.font.PDType1CFont: org.apache.commons.logging.Log log>;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No name for code ");

        $b2 = r1[i0];

        $s4 = (short) $b2;

        $s3 = $s4 & 255;

        $i5 = (int) $s3;

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in ");

        $r13 = r0.<org.apache.pdfbox.pdmodel.font.PDType1CFont: org.apache.fontbox.cff.CFFFont cffFont>;

        $r14 = virtualinvoke $r13.<org.apache.fontbox.cff.CFFFont: java.lang.String getName()>();

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r9.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r16);

        return 0.0F;

     label1:
        $r3 = r0.<org.apache.pdfbox.pdmodel.font.PDType1CFont: java.util.Map glyphHeights>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r2);

        r17 = (java.lang.Float) $r4;

        if r17 != null goto label2;

        $r5 = specialinvoke r0.<org.apache.pdfbox.pdmodel.font.PDType1CFont: org.apache.fontbox.afm.FontMetric getFontMetric()>();

        $f1 = virtualinvoke $r5.<org.apache.fontbox.afm.FontMetric: float getCharacterHeight(java.lang.String)>($r2);

        $r6 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f1);

        r17 = $r6;

        $r7 = r0.<org.apache.pdfbox.pdmodel.font.PDType1CFont: java.util.Map glyphHeights>;

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r6);

     label2:
        $f0 = virtualinvoke r17.<java.lang.Float: float floatValue()>();

        return $f0;
    }

    private java.lang.String getName(byte[], int, int)
    {
        byte[] r0;
        java.lang.Integer $r3;
        byte $b2, $b4;
        java.util.Map $r2;
        int i0, i1, $i3, $i5, $i6, i7, $i8, $i9;
        java.lang.String $r5;
        java.lang.Object $r4;
        org.apache.pdfbox.pdmodel.font.PDType1CFont r1;

        r1 := @this: org.apache.pdfbox.pdmodel.font.PDType1CFont;

        r0 := @parameter0: byte[];

        i1 := @parameter1: int;

        i0 := @parameter2: int;

        if i0 <= 2 goto label1;

        return null;

     label1:
        $b2 = r0[i1];

        $i8 = (int) $b2;

        i7 = $i8 & 255;

        if i0 != 2 goto label2;

        $i5 = i7 * 256;

        $i3 = i1 + 1;

        $b4 = r0[$i3];

        $i9 = (int) $b4;

        $i6 = $i5 + $i9;

        i7 = $i6 & 255;

     label2:
        $r2 = r1.<org.apache.pdfbox.pdmodel.font.PDType1CFont: java.util.Map sidToName>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i7);

        $r4 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r3);

        $r5 = (java.lang.String) $r4;

        return $r5;
    }

    public float getStringWidth(java.lang.String) throws java.io.IOException
    {
        byte[] $r4;
        java.lang.Integer $r3;
        byte $b3;
        int $i0, $i1, $i2, i4;
        java.lang.String r0, $r1, $r9;
        float $f0, f1;
        java.lang.StringBuilder $r5, $r7, $r8;
        org.apache.commons.logging.Log $r6;
        org.apache.pdfbox.pdmodel.font.PDType1CFont r2;

        r2 := @this: org.apache.pdfbox.pdmodel.font.PDType1CFont;

        r0 := @parameter0: java.lang.String;

        f1 = 0.0F;

        i4 = 0;

     label1:
        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if i4 >= $i0 goto label3;

        $i1 = i4 + 1;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(i4, $i1);

        $r3 = specialinvoke r2.<org.apache.pdfbox.pdmodel.font.PDType1CFont: java.lang.Integer getCode(java.lang.String)>($r1);

        if $r3 != null goto label2;

        $r6 = <org.apache.pdfbox.pdmodel.font.PDType1CFont: org.apache.commons.logging.Log log>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No code for character ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r6.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r9);

        return 0.0F;

     label2:
        $r4 = newarray (byte)[1];

        $i2 = virtualinvoke $r3.<java.lang.Integer: int intValue()>();

        $b3 = (byte) $i2;

        $r4[0] = $b3;

        $f0 = virtualinvoke r2.<org.apache.pdfbox.pdmodel.font.PDType1CFont: float getFontWidth(byte[],int,int)>($r4, 0, 1);

        f1 = f1 + $f0;

        i4 = i4 + 1;

        goto label1;

     label3:
        return f1;
    }

    private java.lang.Integer getCode(java.lang.String)
    {
        java.util.Map $r2;
        java.lang.Object $r3;
        java.lang.String r1;
        org.apache.pdfbox.pdmodel.font.PDType1CFont r0;
        java.lang.Integer $r4;

        r0 := @this: org.apache.pdfbox.pdmodel.font.PDType1CFont;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.apache.pdfbox.pdmodel.font.PDType1CFont: java.util.Map characterToSID>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (java.lang.Integer) $r3;

        return $r4;
    }

    public float getAverageFontWidth() throws java.io.IOException
    {
        java.lang.Float $r1, $r2, $r4;
        float $f0, $f1;
        org.apache.fontbox.afm.FontMetric $r3;
        org.apache.pdfbox.pdmodel.font.PDType1CFont r0;

        r0 := @this: org.apache.pdfbox.pdmodel.font.PDType1CFont;

        $r1 = r0.<org.apache.pdfbox.pdmodel.font.PDType1CFont: java.lang.Float avgWidth>;

        if $r1 != null goto label1;

        $r3 = specialinvoke r0.<org.apache.pdfbox.pdmodel.font.PDType1CFont: org.apache.fontbox.afm.FontMetric getFontMetric()>();

        $f1 = virtualinvoke $r3.<org.apache.fontbox.afm.FontMetric: float getAverageCharacterWidth()>();

        $r4 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f1);

        r0.<org.apache.pdfbox.pdmodel.font.PDType1CFont: java.lang.Float avgWidth> = $r4;

     label1:
        $r2 = r0.<org.apache.pdfbox.pdmodel.font.PDType1CFont: java.lang.Float avgWidth>;

        $f0 = virtualinvoke $r2.<java.lang.Float: float floatValue()>();

        return $f0;
    }

    public org.apache.pdfbox.pdmodel.common.PDRectangle getFontBoundingBox() throws java.io.IOException
    {
        org.apache.pdfbox.pdmodel.common.PDRectangle $r1, $r2, $r3;
        org.apache.fontbox.util.BoundingBox $r5;
        org.apache.fontbox.afm.FontMetric $r4;
        org.apache.pdfbox.pdmodel.font.PDType1CFont r0;

        r0 := @this: org.apache.pdfbox.pdmodel.font.PDType1CFont;

        $r1 = r0.<org.apache.pdfbox.pdmodel.font.PDType1CFont: org.apache.pdfbox.pdmodel.common.PDRectangle fontBBox>;

        if $r1 != null goto label1;

        $r3 = new org.apache.pdfbox.pdmodel.common.PDRectangle;

        $r4 = specialinvoke r0.<org.apache.pdfbox.pdmodel.font.PDType1CFont: org.apache.fontbox.afm.FontMetric getFontMetric()>();

        $r5 = virtualinvoke $r4.<org.apache.fontbox.afm.FontMetric: org.apache.fontbox.util.BoundingBox getFontBBox()>();

        specialinvoke $r3.<org.apache.pdfbox.pdmodel.common.PDRectangle: void <init>(org.apache.fontbox.util.BoundingBox)>($r5);

        r0.<org.apache.pdfbox.pdmodel.font.PDType1CFont: org.apache.pdfbox.pdmodel.common.PDRectangle fontBBox> = $r3;

     label1:
        $r2 = r0.<org.apache.pdfbox.pdmodel.font.PDType1CFont: org.apache.pdfbox.pdmodel.common.PDRectangle fontBBox>;

        return $r2;
    }

    public org.apache.pdfbox.pdmodel.common.PDMatrix getFontMatrix()
    {
        org.apache.pdfbox.cos.COSArray $r5;
        java.util.Iterator $r6;
        org.apache.pdfbox.cos.COSFloat $r10;
        org.apache.fontbox.cff.CFFFont $r2;
        org.apache.pdfbox.pdmodel.common.PDMatrix $r1, $r7, $r11;
        java.util.List r4;
        int $i0;
        float $f0;
        java.lang.Object $r3, $r8;
        org.apache.pdfbox.pdmodel.font.PDType1CFont r0;
        java.lang.Number r9;
        boolean $z0;

        r0 := @this: org.apache.pdfbox.pdmodel.font.PDType1CFont;

        $r1 = r0.<org.apache.pdfbox.pdmodel.font.PDType1CFont: org.apache.pdfbox.pdmodel.common.PDMatrix fontMatrix>;

        if $r1 != null goto label4;

        $r2 = r0.<org.apache.pdfbox.pdmodel.font.PDType1CFont: org.apache.fontbox.cff.CFFFont cffFont>;

        $r3 = virtualinvoke $r2.<org.apache.fontbox.cff.CFFFont: java.lang.Object getProperty(java.lang.String)>("FontMatrix");

        r4 = (java.util.List) $r3;

        if r4 == null goto label3;

        $i0 = interfaceinvoke r4.<java.util.List: int size()>();

        if $i0 != 6 goto label3;

        $r5 = new org.apache.pdfbox.cos.COSArray;

        specialinvoke $r5.<org.apache.pdfbox.cos.COSArray: void <init>()>();

        $r6 = interfaceinvoke r4.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r8 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r9 = (java.lang.Number) $r8;

        $r10 = new org.apache.pdfbox.cos.COSFloat;

        $f0 = virtualinvoke r9.<java.lang.Number: float floatValue()>();

        specialinvoke $r10.<org.apache.pdfbox.cos.COSFloat: void <init>(float)>($f0);

        virtualinvoke $r5.<org.apache.pdfbox.cos.COSArray: void add(org.apache.pdfbox.cos.COSBase)>($r10);

        goto label1;

     label2:
        $r7 = new org.apache.pdfbox.pdmodel.common.PDMatrix;

        specialinvoke $r7.<org.apache.pdfbox.pdmodel.common.PDMatrix: void <init>(org.apache.pdfbox.cos.COSArray)>($r5);

        r0.<org.apache.pdfbox.pdmodel.font.PDType1CFont: org.apache.pdfbox.pdmodel.common.PDMatrix fontMatrix> = $r7;

        goto label4;

     label3:
        specialinvoke r0.<org.apache.pdfbox.pdmodel.font.PDSimpleFont: org.apache.pdfbox.pdmodel.common.PDMatrix getFontMatrix()>();

     label4:
        $r11 = r0.<org.apache.pdfbox.pdmodel.font.PDType1CFont: org.apache.pdfbox.pdmodel.common.PDMatrix fontMatrix>;

        return $r11;
    }

    public java.awt.Font getawtFont() throws java.io.IOException
    {
        java.awt.Font $r1, $r2, $r4;
        org.apache.fontbox.cff.CFFFont $r3;
        org.apache.pdfbox.pdmodel.font.PDType1CFont r0;

        r0 := @this: org.apache.pdfbox.pdmodel.font.PDType1CFont;

        $r1 = r0.<org.apache.pdfbox.pdmodel.font.PDType1CFont: java.awt.Font awtFont>;

        if $r1 != null goto label1;

        $r3 = r0.<org.apache.pdfbox.pdmodel.font.PDType1CFont: org.apache.fontbox.cff.CFFFont cffFont>;

        $r4 = staticinvoke <org.apache.pdfbox.pdmodel.font.PDType1CFont: java.awt.Font prepareAwtFont(org.apache.fontbox.cff.CFFFont)>($r3);

        r0.<org.apache.pdfbox.pdmodel.font.PDType1CFont: java.awt.Font awtFont> = $r4;

     label1:
        $r2 = r0.<org.apache.pdfbox.pdmodel.font.PDType1CFont: java.awt.Font awtFont>;

        return $r2;
    }

    private org.apache.fontbox.afm.FontMetric getFontMetric()
    {
        org.apache.fontbox.cff.CFFFont $r2;
        org.apache.fontbox.afm.FontMetric $r1, $r3, $r6;
        java.io.IOException $r4;
        org.apache.commons.logging.Log $r5;
        org.apache.pdfbox.pdmodel.font.PDType1CFont r0;

        r0 := @this: org.apache.pdfbox.pdmodel.font.PDType1CFont;

        $r1 = r0.<org.apache.pdfbox.pdmodel.font.PDType1CFont: org.apache.fontbox.afm.FontMetric fontMetric>;

        if $r1 != null goto label4;

     label1:
        $r2 = r0.<org.apache.pdfbox.pdmodel.font.PDType1CFont: org.apache.fontbox.cff.CFFFont cffFont>;

        $r3 = specialinvoke r0.<org.apache.pdfbox.pdmodel.font.PDType1CFont: org.apache.fontbox.afm.FontMetric prepareFontMetric(org.apache.fontbox.cff.CFFFont)>($r2);

        r0.<org.apache.pdfbox.pdmodel.font.PDType1CFont: org.apache.fontbox.afm.FontMetric fontMetric> = $r3;

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        $r5 = <org.apache.pdfbox.pdmodel.font.PDType1CFont: org.apache.commons.logging.Log log>;

        interfaceinvoke $r5.<org.apache.commons.logging.Log: void error(java.lang.Object,java.lang.Throwable)>("An error occured while extracting the font metrics!", $r4);

     label4:
        $r6 = r0.<org.apache.pdfbox.pdmodel.font.PDType1CFont: org.apache.fontbox.afm.FontMetric fontMetric>;

        return $r6;

        catch java.io.IOException from label1 to label2 with label3;
    }

    private void load() throws java.io.IOException
    {
        byte[] $r1;
        java.lang.Float $r10;
        org.apache.fontbox.cff.CFFFont$Mapping r81, r93;
        java.lang.Integer $r42, $r44, $r45, $r47, $r49, $r51, $r69, r83, r87;
        java.util.Map $r9, $r18, $r27, $r41, $r43, $r46, $r48, r85, $r91, r92;
        java.util.Set $r28, $r33;
        org.apache.pdfbox.pdmodel.font.PDType1CFont$PDFEncoding $r96;
        java.lang.Exception $r77;
        org.apache.fontbox.cff.charset.CFFCharset $r15;
        java.lang.StringBuilder $r57, $r59, $r62, $r64, $r102, $r103;
        org.apache.fontbox.cff.CFFParser $r95;
        java.util.LinkedHashMap $r98, $r99;
        java.lang.String $r4, $r6, $r40, $r58, $r63, $r70, $r76, r84, r88, r89, r90, r94;
        java.lang.Number $r73;
        java.util.Map$Entry r82, r86;
        java.lang.RuntimeException $r101;
        java.lang.reflect.Field $r31;
        org.apache.fontbox.cff.encoding.CFFEncoding $r12;
        org.apache.pdfbox.encoding.Encoding $r37;
        org.apache.fontbox.cff.CFFFont $r5, $r7, $r11, $r14, $r17, $r22, $r35, $r36, $r72, r79, $r80;
        org.apache.pdfbox.pdmodel.font.PDType1CFont$PDFCharset $r97;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        java.util.Collection $r23, $r26;
        java.util.List $r3;
        float $f0;
        org.apache.pdfbox.pdmodel.font.PDType1CFont r0;
        java.util.HashSet $r100;
        int $i0, $i1, $i2, $i3, $i5, $i6, $i7, $i8, $i10, i11, i12, $i13;
        java.util.Iterator $r24, $r29, $r34, $r38, $r74;
        char $c4, $c9;
        java.lang.Object $r8, $r20, $r32, $r39, $r50, $r52, $r53, $r54, $r55, $r60, $r65, $r66, $r67, $r68, $r71, $r75;
        java.lang.Class $r30;

        r0 := @this: org.apache.pdfbox.pdmodel.font.PDType1CFont;

        $r1 = specialinvoke r0.<org.apache.pdfbox.pdmodel.font.PDType1CFont: byte[] loadBytes()>();

        $r95 = new org.apache.fontbox.cff.CFFParser;

        specialinvoke $r95.<org.apache.fontbox.cff.CFFParser: void <init>()>();

        $r3 = virtualinvoke $r95.<org.apache.fontbox.cff.CFFParser: java.util.List parse(byte[])>($r1);

        $r4 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.font.PDType1CFont: java.lang.String getBaseFont()>();

        $i0 = interfaceinvoke $r3.<java.util.List: int size()>();

        if $i0 <= 1 goto label03;

        if $r4 == null goto label03;

        $r74 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label01:
        $z4 = interfaceinvoke $r74.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label03;

        $r75 = interfaceinvoke $r74.<java.util.Iterator: java.lang.Object next()>();

        r79 = (org.apache.fontbox.cff.CFFFont) $r75;

        $r76 = virtualinvoke r79.<org.apache.fontbox.cff.CFFFont: java.lang.String getName()>();

        $z5 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r76);

        if $z5 == 0 goto label02;

        r0.<org.apache.pdfbox.pdmodel.font.PDType1CFont: org.apache.fontbox.cff.CFFFont cffFont> = r79;

        goto label03;

     label02:
        goto label01;

     label03:
        $r80 = r0.<org.apache.pdfbox.pdmodel.font.PDType1CFont: org.apache.fontbox.cff.CFFFont cffFont>;

        if $r80 != null goto label04;

        $r71 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(0);

        $r72 = (org.apache.fontbox.cff.CFFFont) $r71;

        r0.<org.apache.pdfbox.pdmodel.font.PDType1CFont: org.apache.fontbox.cff.CFFFont cffFont> = $r72;

     label04:
        $r5 = r0.<org.apache.pdfbox.pdmodel.font.PDType1CFont: org.apache.fontbox.cff.CFFFont cffFont>;

        $r6 = virtualinvoke $r5.<org.apache.fontbox.cff.CFFFont: java.lang.String getName()>();

        r0.<org.apache.pdfbox.pdmodel.font.PDType1CFont: java.lang.String fontname> = $r6;

        $r7 = r0.<org.apache.pdfbox.pdmodel.font.PDType1CFont: org.apache.fontbox.cff.CFFFont cffFont>;

        $r8 = virtualinvoke $r7.<org.apache.fontbox.cff.CFFFont: java.lang.Object getProperty(java.lang.String)>("defaultWidthX");

        $r73 = (java.lang.Number) $r8;

        $r9 = r0.<org.apache.pdfbox.pdmodel.font.PDType1CFont: java.util.Map glyphWidths>;

        $f0 = virtualinvoke $r73.<java.lang.Number: float floatValue()>();

        $r10 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f0);

        interfaceinvoke $r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(null, $r10);

        $r11 = r0.<org.apache.pdfbox.pdmodel.font.PDType1CFont: org.apache.fontbox.cff.CFFFont cffFont>;

        $r12 = virtualinvoke $r11.<org.apache.fontbox.cff.CFFFont: org.apache.fontbox.cff.encoding.CFFEncoding getEncoding()>();

        $r96 = new org.apache.pdfbox.pdmodel.font.PDType1CFont$PDFEncoding;

        specialinvoke $r96.<org.apache.pdfbox.pdmodel.font.PDType1CFont$PDFEncoding: void <init>(org.apache.fontbox.cff.encoding.CFFEncoding,org.apache.pdfbox.pdmodel.font.PDType1CFont$1)>($r12, null);

        $r14 = r0.<org.apache.pdfbox.pdmodel.font.PDType1CFont: org.apache.fontbox.cff.CFFFont cffFont>;

        $r15 = virtualinvoke $r14.<org.apache.fontbox.cff.CFFFont: org.apache.fontbox.cff.charset.CFFCharset getCharset()>();

        $r97 = new org.apache.pdfbox.pdmodel.font.PDType1CFont$PDFCharset;

        specialinvoke $r97.<org.apache.pdfbox.pdmodel.font.PDType1CFont$PDFCharset: void <init>(org.apache.fontbox.cff.charset.CFFCharset,org.apache.pdfbox.pdmodel.font.PDType1CFont$1)>($r15, null);

        $r17 = r0.<org.apache.pdfbox.pdmodel.font.PDType1CFont: org.apache.fontbox.cff.CFFFont cffFont>;

        $r18 = virtualinvoke $r17.<org.apache.fontbox.cff.CFFFont: java.util.Map getCharStringsDict()>();

        $r98 = new java.util.LinkedHashMap;

        specialinvoke $r98.<java.util.LinkedHashMap: void <init>()>();

        $r20 = interfaceinvoke $r18.<java.util.Map: java.lang.Object get(java.lang.Object)>(".notdef");

        interfaceinvoke $r98.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(".notdef", $r20);

        $r99 = new java.util.LinkedHashMap;

        specialinvoke $r99.<java.util.LinkedHashMap: void <init>()>();

        $r22 = r0.<org.apache.pdfbox.pdmodel.font.PDType1CFont: org.apache.fontbox.cff.CFFFont cffFont>;

        $r23 = virtualinvoke $r22.<org.apache.fontbox.cff.CFFFont: java.util.Collection getMappings()>();

        $r24 = interfaceinvoke $r23.<java.util.Collection: java.util.Iterator iterator()>();

     label05:
        $z6 = interfaceinvoke $r24.<java.util.Iterator: boolean hasNext()>();

        if $z6 == 0 goto label06;

        $r68 = interfaceinvoke $r24.<java.util.Iterator: java.lang.Object next()>();

        r81 = (org.apache.fontbox.cff.CFFFont$Mapping) $r68;

        $i10 = virtualinvoke r81.<org.apache.fontbox.cff.CFFFont$Mapping: int getCode()>();

        $r69 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i10);

        $r70 = virtualinvoke r81.<org.apache.fontbox.cff.CFFFont$Mapping: java.lang.String getName()>();

        interfaceinvoke $r99.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r69, $r70);

        goto label05;

     label06:
        $r100 = new java.util.HashSet;

        $r26 = interfaceinvoke $r99.<java.util.Map: java.util.Collection values()>();

        specialinvoke $r100.<java.util.HashSet: void <init>(java.util.Collection)>($r26);

        $r27 = specialinvoke r0.<org.apache.pdfbox.pdmodel.font.PDType1CFont: java.util.Map loadOverride()>();

        $r28 = interfaceinvoke $r27.<java.util.Map: java.util.Set entrySet()>();

        $r29 = interfaceinvoke $r28.<java.util.Set: java.util.Iterator iterator()>();

     label07:
        $z0 = interfaceinvoke $r29.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label09;

        $r65 = interfaceinvoke $r29.<java.util.Iterator: java.lang.Object next()>();

        r82 = (java.util.Map$Entry) $r65;

        $r66 = interfaceinvoke r82.<java.util.Map$Entry: java.lang.Object getKey()>();

        r83 = (java.lang.Integer) $r66;

        $r67 = interfaceinvoke r82.<java.util.Map$Entry: java.lang.Object getValue()>();

        r84 = (java.lang.String) $r67;

        $z3 = interfaceinvoke $r100.<java.util.Set: boolean contains(java.lang.Object)>(r84);

        if $z3 == 0 goto label08;

        interfaceinvoke $r99.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r83, r84);

     label08:
        goto label07;

     label09:
        $r30 = class "Lorg/apache/pdfbox/encoding/Encoding;";

        $r31 = virtualinvoke $r30.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("NAME_TO_CHARACTER");

        virtualinvoke $r31.<java.lang.reflect.Field: void setAccessible(boolean)>(1);

        $r32 = virtualinvoke $r31.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(null);

        r85 = (java.util.Map) $r32;

     label10:
        goto label12;

     label11:
        $r77 := @caughtexception;

        $r101 = new java.lang.RuntimeException;

        specialinvoke $r101.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r77);

        throw $r101;

     label12:
        $r33 = interfaceinvoke $r99.<java.util.Map: java.util.Set entrySet()>();

        $r34 = interfaceinvoke $r33.<java.util.Set: java.util.Iterator iterator()>();

     label13:
        $z1 = interfaceinvoke $r34.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label18;

        $r52 = interfaceinvoke $r34.<java.util.Iterator: java.lang.Object next()>();

        r86 = (java.util.Map$Entry) $r52;

        $r53 = interfaceinvoke r86.<java.util.Map$Entry: java.lang.Object getKey()>();

        r87 = (java.lang.Integer) $r53;

        $r54 = interfaceinvoke r86.<java.util.Map$Entry: java.lang.Object getValue()>();

        r88 = (java.lang.String) $r54;

        r89 = "uni";

        $r55 = interfaceinvoke r85.<java.util.Map: java.lang.Object get(java.lang.Object)>(r88);

        r90 = (java.lang.String) $r55;

        if r90 == null goto label16;

        i11 = 0;

     label14:
        $i8 = virtualinvoke r90.<java.lang.String: int length()>();

        if i11 >= $i8 goto label15;

        $r102 = new java.lang.StringBuilder;

        specialinvoke $r102.<java.lang.StringBuilder: void <init>()>();

        $r62 = virtualinvoke $r102.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r89);

        $c9 = virtualinvoke r90.<java.lang.String: char charAt(int)>(i11);

        $i13 = (int) $c9;

        $r63 = staticinvoke <org.apache.pdfbox.pdmodel.font.PDType1CFont: java.lang.String hexString(int,int)>($i13, 4);

        $r64 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r63);

        r89 = virtualinvoke $r64.<java.lang.StringBuilder: java.lang.String toString()>();

        i11 = i11 + 1;

        goto label14;

     label15:
        goto label17;

     label16:
        $r103 = new java.lang.StringBuilder;

        specialinvoke $r103.<java.lang.StringBuilder: void <init>()>();

        $r57 = virtualinvoke $r103.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("uni");

        $i2 = virtualinvoke r87.<java.lang.Integer: int intValue()>();

        $r58 = staticinvoke <org.apache.pdfbox.pdmodel.font.PDType1CFont: java.lang.String hexString(int,int)>($i2, 4);

        $r59 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r58);

        r89 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.String toString()>();

        $i3 = virtualinvoke r87.<java.lang.Integer: int intValue()>();

        $c4 = (char) $i3;

        staticinvoke <java.lang.String: java.lang.String valueOf(char)>($c4);

     label17:
        $i5 = virtualinvoke r87.<java.lang.Integer: int intValue()>();

        $i6 = virtualinvoke r87.<java.lang.Integer: int intValue()>();

        virtualinvoke $r96.<org.apache.pdfbox.pdmodel.font.PDType1CFont$PDFEncoding: void register(int,int)>($i5, $i6);

        $i7 = virtualinvoke r87.<java.lang.Integer: int intValue()>();

        virtualinvoke $r97.<org.apache.pdfbox.pdmodel.font.PDType1CFont$PDFCharset: void register(int,java.lang.String)>($i7, r89);

        $r60 = interfaceinvoke $r18.<java.util.Map: java.lang.Object get(java.lang.Object)>(r88);

        interfaceinvoke $r98.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r89, $r60);

        goto label13;

     label18:
        $r35 = r0.<org.apache.pdfbox.pdmodel.font.PDType1CFont: org.apache.fontbox.cff.CFFFont cffFont>;

        virtualinvoke $r35.<org.apache.fontbox.cff.CFFFont: void setEncoding(org.apache.fontbox.cff.encoding.CFFEncoding)>($r96);

        $r36 = r0.<org.apache.pdfbox.pdmodel.font.PDType1CFont: org.apache.fontbox.cff.CFFFont cffFont>;

        virtualinvoke $r36.<org.apache.fontbox.cff.CFFFont: void setCharset(org.apache.fontbox.cff.charset.CFFCharset)>($r97);

        interfaceinvoke $r18.<java.util.Map: void clear()>();

        interfaceinvoke $r18.<java.util.Map: void putAll(java.util.Map)>($r98);

        $r37 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.font.PDType1CFont: org.apache.pdfbox.encoding.Encoding getFontEncoding()>();

        if $r37 == null goto label19;

        $r91 = virtualinvoke $r37.<org.apache.pdfbox.encoding.Encoding: java.util.Map getNameToCodeMap()>();

        goto label20;

     label19:
        $r91 = null;

     label20:
        r92 = $r91;

        $r38 = interfaceinvoke $r23.<java.util.Collection: java.util.Iterator iterator()>();

     label21:
        $z7 = interfaceinvoke $r38.<java.util.Iterator: boolean hasNext()>();

        if $z7 == 0 goto label25;

        $r39 = interfaceinvoke $r38.<java.util.Iterator: java.lang.Object next()>();

        r93 = (org.apache.fontbox.cff.CFFFont$Mapping) $r39;

        i12 = virtualinvoke r93.<org.apache.fontbox.cff.CFFFont$Mapping: int getSID()>();

        $r40 = virtualinvoke r93.<org.apache.fontbox.cff.CFFFont$Mapping: java.lang.String getName()>();

        r94 = null;

        if r92 == null goto label22;

        $z2 = interfaceinvoke r92.<java.util.Map: boolean containsKey(java.lang.Object)>($r40);

        if $z2 == 0 goto label22;

        $r50 = interfaceinvoke r92.<java.util.Map: java.lang.Object get(java.lang.Object)>($r40);

        $r51 = (java.lang.Integer) $r50;

        i12 = virtualinvoke $r51.<java.lang.Integer: int intValue()>();

        r94 = virtualinvoke $r37.<org.apache.pdfbox.encoding.Encoding: java.lang.String getCharacter(java.lang.String)>($r40);

     label22:
        if r94 != null goto label23;

        r94 = staticinvoke <org.apache.pdfbox.encoding.Encoding: java.lang.String getCharacterForName(java.lang.String)>($r40);

     label23:
        $r41 = r0.<org.apache.pdfbox.pdmodel.font.PDType1CFont: java.util.Map sidToName>;

        $r42 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i12);

        interfaceinvoke $r41.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r42, $r40);

        $r43 = r0.<org.apache.pdfbox.pdmodel.font.PDType1CFont: java.util.Map codeToSID>;

        $i1 = virtualinvoke r93.<org.apache.fontbox.cff.CFFFont$Mapping: int getCode()>();

        $r44 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r45 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i12);

        interfaceinvoke $r43.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r44, $r45);

        if r94 == null goto label24;

        $r46 = r0.<org.apache.pdfbox.pdmodel.font.PDType1CFont: java.util.Map sidToCharacter>;

        $r47 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i12);

        interfaceinvoke $r46.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r47, r94);

        $r48 = r0.<org.apache.pdfbox.pdmodel.font.PDType1CFont: java.util.Map characterToSID>;

        $r49 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i12);

        interfaceinvoke $r48.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r94, $r49);

     label24:
        goto label21;

     label25:
        return;

        catch java.lang.Exception from label09 to label10 with label11;
    }

    private byte[] loadBytes() throws java.io.IOException
    {
        java.lang.Throwable $r8;
        byte[] r6, $r7;
        org.apache.pdfbox.pdmodel.font.PDFontDescriptorDictionary $r2;
        java.io.ByteArrayOutputStream $r4;
        java.io.IOException $r9;
        org.apache.pdfbox.pdmodel.common.PDStream $r3;
        org.apache.pdfbox.pdmodel.font.PDFontDescriptor $r1;
        int $i0;
        org.apache.pdfbox.pdmodel.font.PDType1CFont r0;
        boolean $z0;
        java.io.InputStream $r5;

        r0 := @this: org.apache.pdfbox.pdmodel.font.PDType1CFont;

        $r1 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.font.PDType1CFont: org.apache.pdfbox.pdmodel.font.PDFontDescriptor getFontDescriptor()>();

        if $r1 == null goto label09;

        $z0 = $r1 instanceof org.apache.pdfbox.pdmodel.font.PDFontDescriptorDictionary;

        if $z0 == 0 goto label09;

        $r2 = (org.apache.pdfbox.pdmodel.font.PDFontDescriptorDictionary) $r1;

        $r3 = virtualinvoke $r2.<org.apache.pdfbox.pdmodel.font.PDFontDescriptorDictionary: org.apache.pdfbox.pdmodel.common.PDStream getFontFile3()>();

        if $r3 == null goto label09;

        $r4 = new java.io.ByteArrayOutputStream;

        specialinvoke $r4.<java.io.ByteArrayOutputStream: void <init>()>();

        $r5 = virtualinvoke $r3.<org.apache.pdfbox.pdmodel.common.PDStream: java.io.InputStream createInputStream()>();

     label01:
        r6 = newarray (byte)[512];

     label02:
        $i0 = virtualinvoke $r5.<java.io.InputStream: int read(byte[])>(r6);

        if $i0 >= 0 goto label03;

        goto label04;

     label03:
        virtualinvoke $r4.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>(r6, 0, $i0);

        goto label02;

     label04:
        goto label10;

     label05:
        goto label08;

     label06:
        $r8 := @caughtexception;

        goto label11;

     label07:
        throw $r8;

     label08:
        $r7 = virtualinvoke $r4.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        return $r7;

     label09:
        $r9 = new java.io.IOException;

        specialinvoke $r9.<java.io.IOException: void <init>()>();

        throw $r9;

     label10:
        virtualinvoke $r5.<java.io.InputStream: void close()>();

        goto label05;

     label11:
        virtualinvoke $r5.<java.io.InputStream: void close()>();

        goto label07;

        catch java.lang.Throwable from label01 to label05 with label06;
        catch java.lang.Throwable from label06 to label07 with label06;
    }

    private static java.lang.String hexString(int, int)
    {
        int i0, $i1, i2;
        java.lang.StringBuilder $r0, $r1, $r2;
        java.lang.String r3;

        i0 := @parameter0: int;

        i2 := @parameter1: int;

        r3 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i0);

     label1:
        $i1 = virtualinvoke r3.<java.lang.String: int length()>();

        if $i1 >= i2 goto label2;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("0");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label1;

     label2:
        return r3;
    }

    private org.apache.fontbox.afm.FontMetric prepareFontMetric(org.apache.fontbox.cff.CFFFont) throws java.io.IOException
    {
        java.lang.Throwable $r12;
        byte[] $r1;
        org.apache.fontbox.util.BoundingBox $r5;
        org.apache.fontbox.cff.CFFFont r0;
        java.lang.Integer $r7, $r8, $r9, $r10;
        java.io.ByteArrayInputStream $r2;
        int $i0, $i1, $i2, $i3;
        org.apache.fontbox.afm.AFMParser $r3;
        org.apache.fontbox.afm.FontMetric $r4;
        java.util.List $r11;
        float $f0, $f1, $f2, $f3;
        org.apache.pdfbox.pdmodel.font.PDType1CFont r13;
        java.lang.Integer[] $r6;

        r13 := @this: org.apache.pdfbox.pdmodel.font.PDType1CFont;

        r0 := @parameter0: org.apache.fontbox.cff.CFFFont;

        $r1 = staticinvoke <org.apache.fontbox.cff.AFMFormatter: byte[] format(org.apache.fontbox.cff.CFFFont)>(r0);

        $r2 = new java.io.ByteArrayInputStream;

        specialinvoke $r2.<java.io.ByteArrayInputStream: void <init>(byte[])>($r1);

     label1:
        $r3 = new org.apache.fontbox.afm.AFMParser;

        specialinvoke $r3.<org.apache.fontbox.afm.AFMParser: void <init>(java.io.InputStream)>($r2);

        virtualinvoke $r3.<org.apache.fontbox.afm.AFMParser: void parse()>();

        $r4 = virtualinvoke $r3.<org.apache.fontbox.afm.AFMParser: org.apache.fontbox.afm.FontMetric getResult()>();

        $r5 = virtualinvoke $r4.<org.apache.fontbox.afm.FontMetric: org.apache.fontbox.util.BoundingBox getFontBBox()>();

        $r6 = newarray (java.lang.Integer)[4];

        $f0 = virtualinvoke $r5.<org.apache.fontbox.util.BoundingBox: float getLowerLeftX()>();

        $i0 = (int) $f0;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r6[0] = $r7;

        $f1 = virtualinvoke $r5.<org.apache.fontbox.util.BoundingBox: float getLowerLeftY()>();

        $i1 = (int) $f1;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r6[1] = $r8;

        $f2 = virtualinvoke $r5.<org.apache.fontbox.util.BoundingBox: float getUpperRightX()>();

        $i2 = (int) $f2;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r6[2] = $r9;

        $f3 = virtualinvoke $r5.<org.apache.fontbox.util.BoundingBox: float getUpperRightY()>();

        $i3 = (int) $f3;

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r6[3] = $r10;

        $r11 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r6);

        virtualinvoke r0.<org.apache.fontbox.cff.CFFFont: void addValueToTopDict(java.lang.String,java.lang.Object)>("FontBBox", $r11);

        goto label5;

     label2:
        return $r4;

     label3:
        $r12 := @caughtexception;

        goto label6;

     label4:
        throw $r12;

     label5:
        virtualinvoke $r2.<java.io.InputStream: void close()>();

        goto label2;

     label6:
        virtualinvoke $r2.<java.io.InputStream: void close()>();

        goto label4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private java.util.Map loadOverride() throws java.io.IOException
    {
        org.apache.pdfbox.cos.COSArray $r10;
        java.util.LinkedHashMap $r0;
        java.util.Map $r8, $r9, $r11;
        boolean $z0, $z1;
        org.apache.pdfbox.cos.COSName $r3, r5, $r6, r12;
        org.apache.pdfbox.cos.COSDictionary r13;
        org.apache.pdfbox.cos.COSBase $r2, $r4, $r7;
        org.apache.pdfbox.pdmodel.font.PDType1CFont r1;

        r1 := @this: org.apache.pdfbox.pdmodel.font.PDType1CFont;

        $r0 = new java.util.LinkedHashMap;

        specialinvoke $r0.<java.util.LinkedHashMap: void <init>()>();

        $r2 = virtualinvoke r1.<org.apache.pdfbox.pdmodel.font.PDType1CFont: org.apache.pdfbox.cos.COSBase getEncoding()>();

        $z0 = $r2 instanceof org.apache.pdfbox.cos.COSName;

        if $z0 == 0 goto label1;

        r12 = (org.apache.pdfbox.cos.COSName) $r2;

        $r11 = specialinvoke r1.<org.apache.pdfbox.pdmodel.font.PDType1CFont: java.util.Map loadEncoding(org.apache.pdfbox.cos.COSName)>(r12);

        interfaceinvoke $r0.<java.util.Map: void putAll(java.util.Map)>($r11);

        goto label3;

     label1:
        $z1 = $r2 instanceof org.apache.pdfbox.cos.COSDictionary;

        if $z1 == 0 goto label3;

        r13 = (org.apache.pdfbox.cos.COSDictionary) $r2;

        $r3 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName BASE_ENCODING>;

        $r4 = virtualinvoke r13.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>($r3);

        r5 = (org.apache.pdfbox.cos.COSName) $r4;

        if r5 == null goto label2;

        $r9 = specialinvoke r1.<org.apache.pdfbox.pdmodel.font.PDType1CFont: java.util.Map loadEncoding(org.apache.pdfbox.cos.COSName)>(r5);

        interfaceinvoke $r0.<java.util.Map: void putAll(java.util.Map)>($r9);

     label2:
        $r6 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName DIFFERENCES>;

        $r7 = virtualinvoke r13.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>($r6);

        $r10 = (org.apache.pdfbox.cos.COSArray) $r7;

        if $r10 == null goto label3;

        $r8 = specialinvoke r1.<org.apache.pdfbox.pdmodel.font.PDType1CFont: java.util.Map loadDifferences(org.apache.pdfbox.cos.COSArray)>($r10);

        interfaceinvoke $r0.<java.util.Map: void putAll(java.util.Map)>($r8);

     label3:
        return $r0;
    }

    private java.util.Map loadEncoding(org.apache.pdfbox.cos.COSName) throws java.io.IOException
    {
        org.apache.pdfbox.cos.COSName r1;
        java.util.Map$Entry r8;
        org.apache.pdfbox.encoding.EncodingManager $r2;
        org.apache.pdfbox.encoding.Encoding $r3;
        java.util.Iterator $r6;
        java.util.Set $r5;
        java.util.LinkedHashMap $r0;
        java.util.Map $r4;
        java.lang.Object $r7, $r9, $r10;
        org.apache.pdfbox.pdmodel.font.PDType1CFont r11;
        boolean $z0;

        r11 := @this: org.apache.pdfbox.pdmodel.font.PDType1CFont;

        r1 := @parameter0: org.apache.pdfbox.cos.COSName;

        $r0 = new java.util.LinkedHashMap;

        specialinvoke $r0.<java.util.LinkedHashMap: void <init>()>();

        $r2 = <org.apache.pdfbox.encoding.EncodingManager: org.apache.pdfbox.encoding.EncodingManager INSTANCE>;

        $r3 = virtualinvoke $r2.<org.apache.pdfbox.encoding.EncodingManager: org.apache.pdfbox.encoding.Encoding getEncoding(org.apache.pdfbox.cos.COSName)>(r1);

        $r4 = virtualinvoke $r3.<org.apache.pdfbox.encoding.Encoding: java.util.Map getCodeToNameMap()>();

        $r5 = interfaceinvoke $r4.<java.util.Map: java.util.Set entrySet()>();

        $r6 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r8 = (java.util.Map$Entry) $r7;

        $r9 = interfaceinvoke r8.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r10 = interfaceinvoke r8.<java.util.Map$Entry: java.lang.Object getValue()>();

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, $r10);

        goto label1;

     label2:
        return $r0;
    }

    private java.util.Map loadDifferences(org.apache.pdfbox.cos.COSArray)
    {
        org.apache.pdfbox.cos.COSName r7;
        org.apache.pdfbox.cos.COSArray r1;
        java.lang.Integer r5;
        java.util.LinkedHashMap $r0;
        org.apache.pdfbox.cos.COSBase $r2;
        org.apache.pdfbox.cos.COSNumber r6;
        int $i0, $i1, $i2, $i3, i4;
        java.lang.String $r3;
        org.apache.pdfbox.pdmodel.font.PDType1CFont r4;
        boolean $z0, $z1;

        r4 := @this: org.apache.pdfbox.pdmodel.font.PDType1CFont;

        r1 := @parameter0: org.apache.pdfbox.cos.COSArray;

        $r0 = new java.util.LinkedHashMap;

        specialinvoke $r0.<java.util.LinkedHashMap: void <init>()>();

        r5 = null;

        i4 = 0;

     label1:
        $i0 = virtualinvoke r1.<org.apache.pdfbox.cos.COSArray: int size()>();

        if i4 >= $i0 goto label4;

        $r2 = virtualinvoke r1.<org.apache.pdfbox.cos.COSArray: org.apache.pdfbox.cos.COSBase get(int)>(i4);

        $z0 = $r2 instanceof org.apache.pdfbox.cos.COSNumber;

        if $z0 == 0 goto label2;

        r6 = (org.apache.pdfbox.cos.COSNumber) $r2;

        $i3 = virtualinvoke r6.<org.apache.pdfbox.cos.COSNumber: int intValue()>();

        r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        goto label3;

     label2:
        $z1 = $r2 instanceof org.apache.pdfbox.cos.COSName;

        if $z1 == 0 goto label3;

        r7 = (org.apache.pdfbox.cos.COSName) $r2;

        $r3 = virtualinvoke r7.<org.apache.pdfbox.cos.COSName: java.lang.String getName()>();

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r5, $r3);

        $i1 = virtualinvoke r5.<java.lang.Integer: int intValue()>();

        $i2 = $i1 + 1;

        r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

     label3:
        i4 = i4 + 1;

        goto label1;

     label4:
        return $r0;
    }

    private static java.awt.Font prepareAwtFont(org.apache.fontbox.cff.CFFFont) throws java.io.IOException
    {
        java.lang.Throwable $r4;
        byte[] $r1;
        java.io.ByteArrayInputStream $r2;
        java.awt.Font $r3;
        org.apache.fontbox.cff.CFFFont r0;
        org.apache.pdfbox.exceptions.WrappedIOException $r6;
        java.awt.FontFormatException $r5;

        r0 := @parameter0: org.apache.fontbox.cff.CFFFont;

        $r1 = staticinvoke <org.apache.fontbox.cff.Type1FontFormatter: byte[] format(org.apache.fontbox.cff.CFFFont)>(r0);

        $r2 = new java.io.ByteArrayInputStream;

        specialinvoke $r2.<java.io.ByteArrayInputStream: void <init>(byte[])>($r1);

     label1:
        $r3 = staticinvoke <java.awt.Font: java.awt.Font createFont(int,java.io.InputStream)>(1, $r2);

        goto label6;

     label2:
        return $r3;

     label3:
        $r5 := @caughtexception;

        $r6 = new org.apache.pdfbox.exceptions.WrappedIOException;

        specialinvoke $r6.<org.apache.pdfbox.exceptions.WrappedIOException: void <init>(java.lang.Throwable)>($r5);

        throw $r6;

     label4:
        $r4 := @caughtexception;

        goto label7;

     label5:
        throw $r4;

     label6:
        virtualinvoke $r2.<java.io.InputStream: void close()>();

        goto label2;

     label7:
        virtualinvoke $r2.<java.io.InputStream: void close()>();

        goto label5;

        catch java.awt.FontFormatException from label1 to label2 with label3;
        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label3 to label5 with label4;
    }

    public void clear()
    {
        java.util.Map $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12;
        org.apache.pdfbox.pdmodel.font.PDType1CFont r0;

        r0 := @this: org.apache.pdfbox.pdmodel.font.PDType1CFont;

        specialinvoke r0.<org.apache.pdfbox.pdmodel.font.PDSimpleFont: void clear()>();

        r0.<org.apache.pdfbox.pdmodel.font.PDType1CFont: org.apache.fontbox.cff.CFFFont cffFont> = null;

        r0.<org.apache.pdfbox.pdmodel.font.PDType1CFont: org.apache.fontbox.afm.FontMetric fontMetric> = null;

        r0.<org.apache.pdfbox.pdmodel.font.PDType1CFont: org.apache.pdfbox.pdmodel.common.PDRectangle fontBBox> = null;

        $r1 = r0.<org.apache.pdfbox.pdmodel.font.PDType1CFont: java.util.Map characterToSID>;

        if $r1 == null goto label1;

        $r12 = r0.<org.apache.pdfbox.pdmodel.font.PDType1CFont: java.util.Map characterToSID>;

        interfaceinvoke $r12.<java.util.Map: void clear()>();

        r0.<org.apache.pdfbox.pdmodel.font.PDType1CFont: java.util.Map characterToSID> = null;

     label1:
        $r2 = r0.<org.apache.pdfbox.pdmodel.font.PDType1CFont: java.util.Map codeToSID>;

        if $r2 == null goto label2;

        $r11 = r0.<org.apache.pdfbox.pdmodel.font.PDType1CFont: java.util.Map codeToSID>;

        interfaceinvoke $r11.<java.util.Map: void clear()>();

        r0.<org.apache.pdfbox.pdmodel.font.PDType1CFont: java.util.Map codeToSID> = null;

     label2:
        $r3 = r0.<org.apache.pdfbox.pdmodel.font.PDType1CFont: java.util.Map glyphHeights>;

        if $r3 == null goto label3;

        $r10 = r0.<org.apache.pdfbox.pdmodel.font.PDType1CFont: java.util.Map glyphHeights>;

        interfaceinvoke $r10.<java.util.Map: void clear()>();

        r0.<org.apache.pdfbox.pdmodel.font.PDType1CFont: java.util.Map glyphHeights> = null;

     label3:
        $r4 = r0.<org.apache.pdfbox.pdmodel.font.PDType1CFont: java.util.Map glyphWidths>;

        if $r4 == null goto label4;

        $r9 = r0.<org.apache.pdfbox.pdmodel.font.PDType1CFont: java.util.Map glyphWidths>;

        interfaceinvoke $r9.<java.util.Map: void clear()>();

        r0.<org.apache.pdfbox.pdmodel.font.PDType1CFont: java.util.Map glyphWidths> = null;

     label4:
        $r5 = r0.<org.apache.pdfbox.pdmodel.font.PDType1CFont: java.util.Map sidToCharacter>;

        if $r5 == null goto label5;

        $r8 = r0.<org.apache.pdfbox.pdmodel.font.PDType1CFont: java.util.Map sidToCharacter>;

        interfaceinvoke $r8.<java.util.Map: void clear()>();

        r0.<org.apache.pdfbox.pdmodel.font.PDType1CFont: java.util.Map sidToCharacter> = null;

     label5:
        $r6 = r0.<org.apache.pdfbox.pdmodel.font.PDType1CFont: java.util.Map sidToName>;

        if $r6 == null goto label6;

        $r7 = r0.<org.apache.pdfbox.pdmodel.font.PDType1CFont: java.util.Map sidToName>;

        interfaceinvoke $r7.<java.util.Map: void clear()>();

        r0.<org.apache.pdfbox.pdmodel.font.PDType1CFont: java.util.Map sidToName> = null;

     label6:
        return;
    }

    static void <clinit>()
    {
        byte[] $r1;
        org.apache.commons.logging.Log $r0;

        $r0 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>(class "Lorg/apache/pdfbox/pdmodel/font/PDType1CFont;");

        <org.apache.pdfbox.pdmodel.font.PDType1CFont: org.apache.commons.logging.Log log> = $r0;

        $r1 = newarray (byte)[1];

        $r1[0] = 32;

        <org.apache.pdfbox.pdmodel.font.PDType1CFont: byte[] SPACE_BYTES> = $r1;

        return;
    }
}
