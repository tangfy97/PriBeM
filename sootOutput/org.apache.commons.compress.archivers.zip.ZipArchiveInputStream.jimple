public class org.apache.commons.compress.archivers.zip.ZipArchiveInputStream extends org.apache.commons.compress.archivers.ArchiveInputStream
{
    private final org.apache.commons.compress.archivers.zip.ZipEncoding zipEncoding;
    private final boolean useUnicodeExtraFields;
    private final java.io.InputStream in;
    private final java.util.zip.Inflater inf;
    private final java.nio.ByteBuffer buf;
    private org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current;
    private boolean closed;
    private boolean hitCentralDirectory;
    private java.io.ByteArrayInputStream lastStoredEntry;
    private boolean allowStoredEntriesWithDataDescriptor;
    private static final int LFH_LEN;
    private static final int CFH_LEN;
    private static final long TWO_EXP_32;
    private final byte[] LFH_BUF;
    private final byte[] SKIP_BUF;
    private final byte[] SHORT_BUF;
    private final byte[] WORD_BUF;
    private final byte[] TWO_DWORD_BUF;
    private int entriesRead;
    private static final byte[] LFH;
    private static final byte[] CFH;
    private static final byte[] DD;

    public void <init>(java.io.InputStream)
    {
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream r0;
        java.io.InputStream r1;

        r0 := @this: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;

        r1 := @parameter0: java.io.InputStream;

        specialinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: void <init>(java.io.InputStream,java.lang.String)>(r1, "UTF8");

        return;
    }

    public void <init>(java.io.InputStream, java.lang.String)
    {
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream r0;
        java.lang.String r2;
        java.io.InputStream r1;

        r0 := @this: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;

        r1 := @parameter0: java.io.InputStream;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: void <init>(java.io.InputStream,java.lang.String,boolean)>(r1, r2, 1);

        return;
    }

    public void <init>(java.io.InputStream, java.lang.String, boolean)
    {
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream r0;
        java.lang.String r2;
        java.io.InputStream r1;
        boolean z0;

        r0 := @this: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;

        r1 := @parameter0: java.io.InputStream;

        r2 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        specialinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: void <init>(java.io.InputStream,java.lang.String,boolean,boolean)>(r1, r2, z0, 0);

        return;
    }

    public void <init>(java.io.InputStream, java.lang.String, boolean, boolean)
    {
        byte[] $r3, $r4, $r5, $r6, $r7;
        java.util.zip.Inflater $r1;
        java.io.PushbackInputStream $r10;
        java.nio.ByteBuffer $r2, $r12, $r13;
        int $i0;
        java.lang.String r8;
        boolean z0, z1;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream r0;
        org.apache.commons.compress.archivers.zip.ZipEncoding $r9;
        java.io.InputStream r11;

        r0 := @this: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;

        r11 := @parameter0: java.io.InputStream;

        r8 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        specialinvoke r0.<org.apache.commons.compress.archivers.ArchiveInputStream: void <init>()>();

        $r1 = new java.util.zip.Inflater;

        specialinvoke $r1.<java.util.zip.Inflater: void <init>(boolean)>(1);

        r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: java.util.zip.Inflater inf> = $r1;

        $r2 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>(512);

        r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: java.nio.ByteBuffer buf> = $r2;

        r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current> = null;

        r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: boolean closed> = 0;

        r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: boolean hitCentralDirectory> = 0;

        r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: java.io.ByteArrayInputStream lastStoredEntry> = null;

        r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: boolean allowStoredEntriesWithDataDescriptor> = 0;

        $r3 = newarray (byte)[30];

        r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: byte[] LFH_BUF> = $r3;

        $r4 = newarray (byte)[1024];

        r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: byte[] SKIP_BUF> = $r4;

        $r5 = newarray (byte)[2];

        r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: byte[] SHORT_BUF> = $r5;

        $r6 = newarray (byte)[4];

        r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: byte[] WORD_BUF> = $r6;

        $r7 = newarray (byte)[16];

        r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: byte[] TWO_DWORD_BUF> = $r7;

        r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: int entriesRead> = 0;

        $r9 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipEncodingHelper: org.apache.commons.compress.archivers.zip.ZipEncoding getZipEncoding(java.lang.String)>(r8);

        r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipEncoding zipEncoding> = $r9;

        r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: boolean useUnicodeExtraFields> = z0;

        $r10 = new java.io.PushbackInputStream;

        $r12 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: java.nio.ByteBuffer buf>;

        $i0 = virtualinvoke $r12.<java.nio.ByteBuffer: int capacity()>();

        specialinvoke $r10.<java.io.PushbackInputStream: void <init>(java.io.InputStream,int)>(r11, $i0);

        r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: java.io.InputStream in> = $r10;

        r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: boolean allowStoredEntriesWithDataDescriptor> = z1;

        $r13 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: java.nio.ByteBuffer buf>;

        virtualinvoke $r13.<java.nio.ByteBuffer: java.nio.Buffer limit(int)>(0);

        return;
    }

    public org.apache.commons.compress.archivers.zip.ZipArchiveEntry getNextZipEntry() throws java.io.IOException
    {
        byte[] $r2, $r4, $r7, $r10, $r18, $r19, $r23, $r24, $r58, $r60, $r62, $r63, $r64, $r66;
        byte $b19;
        org.apache.commons.compress.archivers.zip.ZipLong $r3, $r5, $r59, $r61, $r65, $r68, r70, r71;
        org.apache.commons.compress.archivers.zip.GeneralPurposeBit $r11, $r40, $r43;
        long $l4, $l5, $l14, $l15, $l16, $l18;
        java.lang.String $r27;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream r0;
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry $r9, $r15, $r17, $r21, $r26, $r29, $r31, $r34, $r39, $r42, $r47, $r53, $r55, $r57, $r73, $r75;
        org.apache.commons.compress.archivers.zip.UnshrinkingInputStream $r48;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, z8, $z9;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry $r1, $r6, $r8, $r13, $r14, $r16, $r20, $r22, $r25, $r28, $r30, $r33, $r37, $r38, $r41, $r45, $r50, $r51, $r54, $r56, $r72, $r74;
        org.apache.commons.compress.archivers.zip.ZipEncoding r12, $r69;
        java.io.EOFException $r67;
        org.apache.commons.compress.archivers.zip.ZipMethod $r32, $r35;
        org.apache.commons.compress.archivers.zip.ExplodingInputStream $r36;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$BoundedInputStream $r44, $r49;
        int $i0, $i1, $i2, $i3, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, i17, $i20, $i21;
        java.io.InputStream $r46, $r52;

        r0 := @this: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;

        z8 = 1;

        $z0 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: boolean closed>;

        if $z0 != 0 goto label01;

        $z1 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: boolean hitCentralDirectory>;

        if $z1 == 0 goto label02;

     label01:
        return null;

     label02:
        $r1 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>;

        if $r1 == null goto label03;

        specialinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: void closeEntry()>();

        z8 = 0;

     label03:
        if z8 == 0 goto label04;

        $r66 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: byte[] LFH_BUF>;

        specialinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: void readFirstLocalFileHeader(byte[])>($r66);

        goto label05;

     label04:
        $r2 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: byte[] LFH_BUF>;

        specialinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: void readFully(byte[])>($r2);

     label05:
        goto label07;

     label06:
        $r67 := @caughtexception;

        return null;

     label07:
        $r3 = new org.apache.commons.compress.archivers.zip.ZipLong;

        $r4 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: byte[] LFH_BUF>;

        specialinvoke $r3.<org.apache.commons.compress.archivers.zip.ZipLong: void <init>(byte[])>($r4);

        $r5 = <org.apache.commons.compress.archivers.zip.ZipLong: org.apache.commons.compress.archivers.zip.ZipLong CFH_SIG>;

        $z2 = virtualinvoke $r3.<org.apache.commons.compress.archivers.zip.ZipLong: boolean equals(java.lang.Object)>($r5);

        if $z2 != 0 goto label08;

        $r65 = <org.apache.commons.compress.archivers.zip.ZipLong: org.apache.commons.compress.archivers.zip.ZipLong AED_SIG>;

        $z7 = virtualinvoke $r3.<org.apache.commons.compress.archivers.zip.ZipLong: boolean equals(java.lang.Object)>($r65);

        if $z7 == 0 goto label09;

     label08:
        r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: boolean hitCentralDirectory> = 1;

        specialinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: void skipRemainderOfArchive()>();

     label09:
        $r68 = <org.apache.commons.compress.archivers.zip.ZipLong: org.apache.commons.compress.archivers.zip.ZipLong LFH_SIG>;

        $z9 = virtualinvoke $r3.<org.apache.commons.compress.archivers.zip.ZipLong: boolean equals(java.lang.Object)>($r68);

        if $z9 != 0 goto label10;

        return null;

     label10:
        $r6 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry;

        specialinvoke $r6.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: void <init>(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$1)>(null);

        r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current> = $r6;

        $r7 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: byte[] LFH_BUF>;

        $i0 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipShort: int getValue(byte[],int)>($r7, 4);

        $r8 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>;

        $r9 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: org.apache.commons.compress.archivers.zip.ZipArchiveEntry access$100(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry)>($r8);

        $i1 = $i0 >> 8;

        $i2 = $i1 & 15;

        virtualinvoke $r9.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: void setPlatform(int)>($i2);

        $r10 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: byte[] LFH_BUF>;

        $r11 = staticinvoke <org.apache.commons.compress.archivers.zip.GeneralPurposeBit: org.apache.commons.compress.archivers.zip.GeneralPurposeBit parse(byte[],int)>($r10, 6);

        $z3 = virtualinvoke $r11.<org.apache.commons.compress.archivers.zip.GeneralPurposeBit: boolean usesUTF8ForNames()>();

        if $z3 == 0 goto label11;

        $r69 = <org.apache.commons.compress.archivers.zip.ZipEncodingHelper: org.apache.commons.compress.archivers.zip.ZipEncoding UTF8_ZIP_ENCODING>;

        goto label12;

     label11:
        $r69 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipEncoding zipEncoding>;

     label12:
        r12 = $r69;

        $r13 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>;

        $z4 = virtualinvoke $r11.<org.apache.commons.compress.archivers.zip.GeneralPurposeBit: boolean usesDataDescriptor()>();

        staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: boolean access$202(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry,boolean)>($r13, $z4);

        $r14 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>;

        $r15 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: org.apache.commons.compress.archivers.zip.ZipArchiveEntry access$100(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry)>($r14);

        virtualinvoke $r15.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: void setGeneralPurposeBit(org.apache.commons.compress.archivers.zip.GeneralPurposeBit)>($r11);

        $r16 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>;

        $r17 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: org.apache.commons.compress.archivers.zip.ZipArchiveEntry access$100(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry)>($r16);

        $r18 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: byte[] LFH_BUF>;

        $i3 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipShort: int getValue(byte[],int)>($r18, 8);

        virtualinvoke $r17.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: void setMethod(int)>($i3);

        $r19 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: byte[] LFH_BUF>;

        $l4 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipLong: long getValue(byte[],int)>($r19, 10);

        $l5 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipUtil: long dosToJavaTime(long)>($l4);

        $r20 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>;

        $r21 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: org.apache.commons.compress.archivers.zip.ZipArchiveEntry access$100(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry)>($r20);

        virtualinvoke $r21.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: void setTime(long)>($l5);

        r70 = null;

        r71 = null;

        $r22 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>;

        $z5 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: boolean access$200(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry)>($r22);

        if $z5 != 0 goto label13;

        $r56 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>;

        $r57 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: org.apache.commons.compress.archivers.zip.ZipArchiveEntry access$100(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry)>($r56);

        $r58 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: byte[] LFH_BUF>;

        $l16 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipLong: long getValue(byte[],int)>($r58, 14);

        virtualinvoke $r57.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: void setCrc(long)>($l16);

        $r59 = new org.apache.commons.compress.archivers.zip.ZipLong;

        $r60 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: byte[] LFH_BUF>;

        specialinvoke $r59.<org.apache.commons.compress.archivers.zip.ZipLong: void <init>(byte[],int)>($r60, 18);

        r71 = $r59;

        $r61 = new org.apache.commons.compress.archivers.zip.ZipLong;

        $r62 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: byte[] LFH_BUF>;

        specialinvoke $r61.<org.apache.commons.compress.archivers.zip.ZipLong: void <init>(byte[],int)>($r62, 22);

        r70 = $r61;

        goto label13;

     label13:
        $r23 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: byte[] LFH_BUF>;

        $i6 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipShort: int getValue(byte[],int)>($r23, 26);

        i17 = 26 + 2;

        $r24 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: byte[] LFH_BUF>;

        $i7 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipShort: int getValue(byte[],int)>($r24, i17);

        $r63 = newarray (byte)[$i6];

        specialinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: void readFully(byte[])>($r63);

        $r25 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>;

        $r26 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: org.apache.commons.compress.archivers.zip.ZipArchiveEntry access$100(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry)>($r25);

        $r27 = interfaceinvoke r12.<org.apache.commons.compress.archivers.zip.ZipEncoding: java.lang.String decode(byte[])>($r63);

        virtualinvoke $r26.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: void setName(java.lang.String,byte[])>($r27, $r63);

        $r64 = newarray (byte)[$i7];

        specialinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: void readFully(byte[])>($r64);

        $r28 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>;

        $r29 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: org.apache.commons.compress.archivers.zip.ZipArchiveEntry access$100(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry)>($r28);

        virtualinvoke $r29.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: void setExtra(byte[])>($r64);

        if $z3 != 0 goto label14;

        $z6 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: boolean useUnicodeExtraFields>;

        if $z6 == 0 goto label14;

        $r54 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>;

        $r55 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: org.apache.commons.compress.archivers.zip.ZipArchiveEntry access$100(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry)>($r54);

        staticinvoke <org.apache.commons.compress.archivers.zip.ZipUtil: void setNameAndCommentFromExtraFields(org.apache.commons.compress.archivers.zip.ZipArchiveEntry,byte[],byte[])>($r55, $r63, null);

     label14:
        specialinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: void processZip64Extra(org.apache.commons.compress.archivers.zip.ZipLong,org.apache.commons.compress.archivers.zip.ZipLong)>(r70, r71);

        $r72 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>;

        $r73 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: org.apache.commons.compress.archivers.zip.ZipArchiveEntry access$100(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry)>($r72);

        $l18 = virtualinvoke $r73.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: long getCompressedSize()>();

        $b19 = $l18 cmp -1L;

        if $b19 == 0 goto label16;

        $r30 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>;

        $r31 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: org.apache.commons.compress.archivers.zip.ZipArchiveEntry access$100(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry)>($r30);

        $i8 = virtualinvoke $r31.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: int getMethod()>();

        $r32 = <org.apache.commons.compress.archivers.zip.ZipMethod: org.apache.commons.compress.archivers.zip.ZipMethod UNSHRINKING>;

        $i9 = virtualinvoke $r32.<org.apache.commons.compress.archivers.zip.ZipMethod: int getCode()>();

        if $i8 != $i9 goto label15;

        $r51 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>;

        $r48 = new org.apache.commons.compress.archivers.zip.UnshrinkingInputStream;

        $r49 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$BoundedInputStream;

        $r52 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: java.io.InputStream in>;

        $r50 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>;

        $r53 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: org.apache.commons.compress.archivers.zip.ZipArchiveEntry access$100(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry)>($r50);

        $l15 = virtualinvoke $r53.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: long getCompressedSize()>();

        specialinvoke $r49.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$BoundedInputStream: void <init>(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream,java.io.InputStream,long)>(r0, $r52, $l15);

        specialinvoke $r48.<org.apache.commons.compress.archivers.zip.UnshrinkingInputStream: void <init>(java.io.InputStream)>($r49);

        staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: java.io.InputStream access$302(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry,java.io.InputStream)>($r51, $r48);

        goto label16;

     label15:
        $r33 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>;

        $r34 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: org.apache.commons.compress.archivers.zip.ZipArchiveEntry access$100(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry)>($r33);

        $i10 = virtualinvoke $r34.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: int getMethod()>();

        $r35 = <org.apache.commons.compress.archivers.zip.ZipMethod: org.apache.commons.compress.archivers.zip.ZipMethod IMPLODING>;

        $i11 = virtualinvoke $r35.<org.apache.commons.compress.archivers.zip.ZipMethod: int getCode()>();

        if $i10 != $i11 goto label16;

        $r38 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>;

        $r36 = new org.apache.commons.compress.archivers.zip.ExplodingInputStream;

        $r37 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>;

        $r39 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: org.apache.commons.compress.archivers.zip.ZipArchiveEntry access$100(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry)>($r37);

        $r40 = virtualinvoke $r39.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: org.apache.commons.compress.archivers.zip.GeneralPurposeBit getGeneralPurposeBit()>();

        $i12 = virtualinvoke $r40.<org.apache.commons.compress.archivers.zip.GeneralPurposeBit: int getSlidingDictionarySize()>();

        $r41 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>;

        $r42 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: org.apache.commons.compress.archivers.zip.ZipArchiveEntry access$100(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry)>($r41);

        $r43 = virtualinvoke $r42.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: org.apache.commons.compress.archivers.zip.GeneralPurposeBit getGeneralPurposeBit()>();

        $i13 = virtualinvoke $r43.<org.apache.commons.compress.archivers.zip.GeneralPurposeBit: int getNumberOfShannonFanoTrees()>();

        $r44 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$BoundedInputStream;

        $r46 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: java.io.InputStream in>;

        $r45 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>;

        $r47 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: org.apache.commons.compress.archivers.zip.ZipArchiveEntry access$100(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry)>($r45);

        $l14 = virtualinvoke $r47.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: long getCompressedSize()>();

        specialinvoke $r44.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$BoundedInputStream: void <init>(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream,java.io.InputStream,long)>(r0, $r46, $l14);

        specialinvoke $r36.<org.apache.commons.compress.archivers.zip.ExplodingInputStream: void <init>(int,int,java.io.InputStream)>($i12, $i13, $r44);

        staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: java.io.InputStream access$302(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry,java.io.InputStream)>($r38, $r36);

     label16:
        $i20 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: int entriesRead>;

        $i21 = $i20 + 1;

        r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: int entriesRead> = $i21;

        $r74 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>;

        $r75 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: org.apache.commons.compress.archivers.zip.ZipArchiveEntry access$100(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry)>($r74);

        return $r75;

        catch java.io.EOFException from label03 to label05 with label06;
    }

    private void readFirstLocalFileHeader(byte[]) throws java.io.IOException
    {
        org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException$Feature $r7;
        byte[] r1, r5;
        org.apache.commons.compress.archivers.zip.ZipLong $r2, $r3, $r4;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream r0;
        org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException $r6;
        boolean $z0, $z1;

        r0 := @this: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;

        r1 := @parameter0: byte[];

        specialinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: void readFully(byte[])>(r1);

        $r2 = new org.apache.commons.compress.archivers.zip.ZipLong;

        specialinvoke $r2.<org.apache.commons.compress.archivers.zip.ZipLong: void <init>(byte[])>(r1);

        $r3 = <org.apache.commons.compress.archivers.zip.ZipLong: org.apache.commons.compress.archivers.zip.ZipLong DD_SIG>;

        $z0 = virtualinvoke $r2.<org.apache.commons.compress.archivers.zip.ZipLong: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label1;

        $r6 = new org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException;

        $r7 = <org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException$Feature: org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException$Feature SPLITTING>;

        specialinvoke $r6.<org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException: void <init>(org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException$Feature)>($r7);

        throw $r6;

     label1:
        $r4 = <org.apache.commons.compress.archivers.zip.ZipLong: org.apache.commons.compress.archivers.zip.ZipLong SINGLE_SEGMENT_SPLIT_MARKER>;

        $z1 = virtualinvoke $r2.<org.apache.commons.compress.archivers.zip.ZipLong: boolean equals(java.lang.Object)>($r4);

        if $z1 == 0 goto label2;

        r5 = newarray (byte)[4];

        specialinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: void readFully(byte[])>(r5);

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 4, r1, 0, 26);

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r5, 0, r1, 26, 4);

     label2:
        return;
    }

    private void processZip64Extra(org.apache.commons.compress.archivers.zip.ZipLong, org.apache.commons.compress.archivers.zip.ZipLong)
    {
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry $r2, $r9, $r12, $r16, $r19;
        long $l0, $l1, $l2, $l3;
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField r5;
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger $r17, $r20;
        boolean $z0, $z1, $z2, $z3;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry $r1, $r6, $r7, $r8, $r11, $r15, $r18;
        org.apache.commons.compress.archivers.zip.ZipLong r10, r13, $r14, $r21;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream r0;
        org.apache.commons.compress.archivers.zip.ZipExtraField $r4;
        org.apache.commons.compress.archivers.zip.ZipShort $r3;

        r0 := @this: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;

        r13 := @parameter0: org.apache.commons.compress.archivers.zip.ZipLong;

        r10 := @parameter1: org.apache.commons.compress.archivers.zip.ZipLong;

        $r1 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>;

        $r2 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: org.apache.commons.compress.archivers.zip.ZipArchiveEntry access$100(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry)>($r1);

        $r3 = <org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField: org.apache.commons.compress.archivers.zip.ZipShort HEADER_ID>;

        $r4 = virtualinvoke $r2.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: org.apache.commons.compress.archivers.zip.ZipExtraField getExtraField(org.apache.commons.compress.archivers.zip.ZipShort)>($r3);

        r5 = (org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField) $r4;

        $r6 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>;

        if r5 == null goto label1;

        $z3 = 1;

        goto label2;

     label1:
        $z3 = 0;

     label2:
        staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: boolean access$402(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry,boolean)>($r6, $z3);

        $r7 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>;

        $z0 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: boolean access$200(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry)>($r7);

        if $z0 != 0 goto label5;

        if r5 == null goto label4;

        $r14 = <org.apache.commons.compress.archivers.zip.ZipLong: org.apache.commons.compress.archivers.zip.ZipLong ZIP64_MAGIC>;

        $z1 = virtualinvoke r10.<org.apache.commons.compress.archivers.zip.ZipLong: boolean equals(java.lang.Object)>($r14);

        if $z1 != 0 goto label3;

        $r21 = <org.apache.commons.compress.archivers.zip.ZipLong: org.apache.commons.compress.archivers.zip.ZipLong ZIP64_MAGIC>;

        $z2 = virtualinvoke r13.<org.apache.commons.compress.archivers.zip.ZipLong: boolean equals(java.lang.Object)>($r21);

        if $z2 == 0 goto label4;

     label3:
        $r15 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>;

        $r16 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: org.apache.commons.compress.archivers.zip.ZipArchiveEntry access$100(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry)>($r15);

        $r17 = virtualinvoke r5.<org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField: org.apache.commons.compress.archivers.zip.ZipEightByteInteger getCompressedSize()>();

        $l2 = virtualinvoke $r17.<org.apache.commons.compress.archivers.zip.ZipEightByteInteger: long getLongValue()>();

        virtualinvoke $r16.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: void setCompressedSize(long)>($l2);

        $r18 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>;

        $r19 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: org.apache.commons.compress.archivers.zip.ZipArchiveEntry access$100(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry)>($r18);

        $r20 = virtualinvoke r5.<org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField: org.apache.commons.compress.archivers.zip.ZipEightByteInteger getSize()>();

        $l3 = virtualinvoke $r20.<org.apache.commons.compress.archivers.zip.ZipEightByteInteger: long getLongValue()>();

        virtualinvoke $r19.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: void setSize(long)>($l3);

        goto label5;

     label4:
        $r8 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>;

        $r9 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: org.apache.commons.compress.archivers.zip.ZipArchiveEntry access$100(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry)>($r8);

        $l0 = virtualinvoke r10.<org.apache.commons.compress.archivers.zip.ZipLong: long getValue()>();

        virtualinvoke $r9.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: void setCompressedSize(long)>($l0);

        $r11 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>;

        $r12 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: org.apache.commons.compress.archivers.zip.ZipArchiveEntry access$100(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry)>($r11);

        $l1 = virtualinvoke r13.<org.apache.commons.compress.archivers.zip.ZipLong: long getValue()>();

        virtualinvoke $r12.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: void setSize(long)>($l1);

     label5:
        return;
    }

    public org.apache.commons.compress.archivers.ArchiveEntry getNextEntry() throws java.io.IOException
    {
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry $r1;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream r0;

        r0 := @this: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;

        $r1 = virtualinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveEntry getNextZipEntry()>();

        return $r1;
    }

    public boolean canReadEntryData(org.apache.commons.compress.archivers.ArchiveEntry)
    {
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry r1;
        org.apache.commons.compress.archivers.ArchiveEntry r0;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream r2;
        boolean $z0, $z1, $z2, $z3;

        r2 := @this: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;

        r0 := @parameter0: org.apache.commons.compress.archivers.ArchiveEntry;

        $z0 = r0 instanceof org.apache.commons.compress.archivers.zip.ZipArchiveEntry;

        if $z0 == 0 goto label3;

        r1 = (org.apache.commons.compress.archivers.zip.ZipArchiveEntry) r0;

        $z1 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipUtil: boolean canHandleEntryData(org.apache.commons.compress.archivers.zip.ZipArchiveEntry)>(r1);

        if $z1 == 0 goto label1;

        $z2 = specialinvoke r2.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: boolean supportsDataDescriptorFor(org.apache.commons.compress.archivers.zip.ZipArchiveEntry)>(r1);

        if $z2 == 0 goto label1;

        $z3 = 1;

        goto label2;

     label1:
        $z3 = 0;

     label2:
        return $z3;

     label3:
        return 0;
    }

    public int read(byte[], int, int) throws java.io.IOException
    {
        org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException$Feature $r29;
        byte[] r2;
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry $r4, $r6, $r8, $r10, $r12, $r19, $r23, $r26, $r30;
        org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException $r35, $r36;
        boolean $z0, $z1;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry $r1, $r3, $r5, $r7, $r9, $r11, $r14, $r16, $r18, $r22, $r25, $r28;
        org.apache.commons.compress.archivers.zip.ZipMethod $r13, $r20, $r24;
        int i0, $i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i12, $i14;
        java.io.IOException $r33;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream r0;
        java.lang.ArrayIndexOutOfBoundsException $r34;
        java.util.zip.CRC32 $r17;
        java.io.InputStream $r15;

        r0 := @this: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;

        r2 := @parameter0: byte[];

        i0 := @parameter1: int;

        i2 := @parameter2: int;

        $z0 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: boolean closed>;

        if $z0 == 0 goto label01;

        $r33 = new java.io.IOException;

        specialinvoke $r33.<java.io.IOException: void <init>(java.lang.String)>("The stream is closed");

        throw $r33;

     label01:
        $r1 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>;

        if $r1 != null goto label02;

        $i14 = (int) -1;

        return $i14;

     label02:
        $i1 = lengthof r2;

        if i0 > $i1 goto label03;

        if i2 < 0 goto label03;

        if i0 < 0 goto label03;

        $i3 = lengthof r2;

        $i4 = $i3 - i0;

        if $i4 >= i2 goto label04;

     label03:
        $r34 = new java.lang.ArrayIndexOutOfBoundsException;

        specialinvoke $r34.<java.lang.ArrayIndexOutOfBoundsException: void <init>()>();

        throw $r34;

     label04:
        $r3 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>;

        $r4 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: org.apache.commons.compress.archivers.zip.ZipArchiveEntry access$100(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry)>($r3);

        staticinvoke <org.apache.commons.compress.archivers.zip.ZipUtil: void checkRequestedFeatures(org.apache.commons.compress.archivers.zip.ZipArchiveEntry)>($r4);

        $r5 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>;

        $r6 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: org.apache.commons.compress.archivers.zip.ZipArchiveEntry access$100(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry)>($r5);

        $z1 = specialinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: boolean supportsDataDescriptorFor(org.apache.commons.compress.archivers.zip.ZipArchiveEntry)>($r6);

        if $z1 != 0 goto label05;

        $r35 = new org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException;

        $r29 = <org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException$Feature: org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException$Feature DATA_DESCRIPTOR>;

        $r28 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>;

        $r30 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: org.apache.commons.compress.archivers.zip.ZipArchiveEntry access$100(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry)>($r28);

        specialinvoke $r35.<org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException: void <init>(org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException$Feature,org.apache.commons.compress.archivers.zip.ZipArchiveEntry)>($r29, $r30);

        throw $r35;

     label05:
        $r7 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>;

        $r8 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: org.apache.commons.compress.archivers.zip.ZipArchiveEntry access$100(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry)>($r7);

        $i5 = virtualinvoke $r8.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: int getMethod()>();

        if $i5 != 0 goto label06;

        i12 = specialinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: int readStored(byte[],int,int)>(r2, i0, i2);

        goto label10;

     label06:
        $r9 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>;

        $r10 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: org.apache.commons.compress.archivers.zip.ZipArchiveEntry access$100(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry)>($r9);

        $i6 = virtualinvoke $r10.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: int getMethod()>();

        if $i6 != 8 goto label07;

        i12 = specialinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: int readDeflated(byte[],int,int)>(r2, i0, i2);

        goto label10;

     label07:
        $r11 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>;

        $r12 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: org.apache.commons.compress.archivers.zip.ZipArchiveEntry access$100(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry)>($r11);

        $i7 = virtualinvoke $r12.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: int getMethod()>();

        $r13 = <org.apache.commons.compress.archivers.zip.ZipMethod: org.apache.commons.compress.archivers.zip.ZipMethod UNSHRINKING>;

        $i8 = virtualinvoke $r13.<org.apache.commons.compress.archivers.zip.ZipMethod: int getCode()>();

        if $i7 == $i8 goto label08;

        $r18 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>;

        $r19 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: org.apache.commons.compress.archivers.zip.ZipArchiveEntry access$100(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry)>($r18);

        $i9 = virtualinvoke $r19.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: int getMethod()>();

        $r20 = <org.apache.commons.compress.archivers.zip.ZipMethod: org.apache.commons.compress.archivers.zip.ZipMethod IMPLODING>;

        $i10 = virtualinvoke $r20.<org.apache.commons.compress.archivers.zip.ZipMethod: int getCode()>();

        if $i9 != $i10 goto label09;

     label08:
        $r14 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>;

        $r15 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: java.io.InputStream access$300(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry)>($r14);

        i12 = virtualinvoke $r15.<java.io.InputStream: int read(byte[],int,int)>(r2, i0, i2);

        goto label10;

     label09:
        $r36 = new org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException;

        $r22 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>;

        $r23 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: org.apache.commons.compress.archivers.zip.ZipArchiveEntry access$100(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry)>($r22);

        $i11 = virtualinvoke $r23.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: int getMethod()>();

        $r24 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipMethod: org.apache.commons.compress.archivers.zip.ZipMethod getMethodByCode(int)>($i11);

        $r25 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>;

        $r26 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: org.apache.commons.compress.archivers.zip.ZipArchiveEntry access$100(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry)>($r25);

        specialinvoke $r36.<org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException: void <init>(org.apache.commons.compress.archivers.zip.ZipMethod,org.apache.commons.compress.archivers.zip.ZipArchiveEntry)>($r24, $r26);

        throw $r36;

     label10:
        if i12 < 0 goto label11;

        $r16 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>;

        $r17 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: java.util.zip.CRC32 access$500(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry)>($r16);

        virtualinvoke $r17.<java.util.zip.CRC32: void update(byte[],int,int)>(r2, i0, i12);

     label11:
        return i12;
    }

    private int readStored(byte[], int, int) throws java.io.IOException
    {
        byte[] r9, $r16;
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry $r3;
        java.nio.ByteBuffer $r5, $r6, $r7, $r10, $r13, $r14, $r17;
        byte $b2, $b11;
        java.io.ByteArrayInputStream $r19, $r20;
        boolean $z0;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry $r1, $r2, $r4, $r8, $r11, $r12, $r18;
        long $l0, $l1, $l8, $l9, $l10, $l13, $l14, $l15, $l17;
        int $i3, $i4, $i5, i6, $i7, i12, $i16, $i18, i19, $i20, $i22, $i24, $i26, $i27;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream r0;
        java.io.InputStream $r15;

        r0 := @this: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;

        r9 := @parameter0: byte[];

        i12 := @parameter1: int;

        i6 := @parameter2: int;

        $r1 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>;

        $z0 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: boolean access$200(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry)>($r1);

        if $z0 == 0 goto label2;

        $r19 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: java.io.ByteArrayInputStream lastStoredEntry>;

        if $r19 != null goto label1;

        specialinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: void readStoredEntry()>();

     label1:
        $r20 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: java.io.ByteArrayInputStream lastStoredEntry>;

        $i18 = virtualinvoke $r20.<java.io.ByteArrayInputStream: int read(byte[],int,int)>(r9, i12, i6);

        return $i18;

     label2:
        $r2 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>;

        $r3 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: org.apache.commons.compress.archivers.zip.ZipArchiveEntry access$100(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry)>($r2);

        $l0 = virtualinvoke $r3.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: long getSize()>();

        $r4 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>;

        $l1 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: long access$600(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry)>($r4);

        $b2 = $l1 cmp $l0;

        $i20 = (int) $b2;

        if $i20 < 0 goto label3;

        $i22 = (int) -1;

        return $i22;

     label3:
        $r5 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: java.nio.ByteBuffer buf>;

        $i3 = virtualinvoke $r5.<java.nio.ByteBuffer: int position()>();

        $r6 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: java.nio.ByteBuffer buf>;

        $i4 = virtualinvoke $r6.<java.nio.ByteBuffer: int limit()>();

        if $i3 < $i4 goto label5;

        $r13 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: java.nio.ByteBuffer buf>;

        virtualinvoke $r13.<java.nio.ByteBuffer: java.nio.Buffer position(int)>(0);

        $r15 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: java.io.InputStream in>;

        $r14 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: java.nio.ByteBuffer buf>;

        $r16 = virtualinvoke $r14.<java.nio.ByteBuffer: byte[] array()>();

        $i16 = virtualinvoke $r15.<java.io.InputStream: int read(byte[])>($r16);

        $i24 = (int) -1;

        if $i16 != $i24 goto label4;

        $i26 = (int) -1;

        return $i26;

     label4:
        $r17 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: java.nio.ByteBuffer buf>;

        virtualinvoke $r17.<java.nio.ByteBuffer: java.nio.Buffer limit(int)>($i16);

        virtualinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: void count(int)>($i16);

        $r18 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>;

        $l17 = (long) $i16;

        staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: long access$714(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry,long)>($r18, $l17);

     label5:
        $r7 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: java.nio.ByteBuffer buf>;

        $i5 = virtualinvoke $r7.<java.nio.ByteBuffer: int remaining()>();

        $i7 = staticinvoke <java.lang.Math: int min(int,int)>($i5, i6);

        i19 = $i7;

        $r8 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>;

        $l8 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: long access$600(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry)>($r8);

        $l10 = $l0 - $l8;

        $l9 = (long) $i7;

        $b11 = $l10 cmp $l9;

        $i27 = (int) $b11;

        if $i27 >= 0 goto label6;

        $r12 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>;

        $l14 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: long access$600(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry)>($r12);

        $l15 = $l0 - $l14;

        i19 = (int) $l15;

     label6:
        $r10 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: java.nio.ByteBuffer buf>;

        virtualinvoke $r10.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[],int,int)>(r9, i12, i19);

        $r11 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>;

        $l13 = (long) i19;

        staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: long access$614(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry,long)>($r11, $l13);

        return i19;
    }

    private int readDeflated(byte[], int, int) throws java.io.IOException
    {
        byte[] r1;
        java.util.zip.ZipException $r6;
        java.util.zip.Inflater $r2, $r3;
        java.io.IOException $r7;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream r0;
        int i0, i1, $i2, $i4, $i6;
        boolean $z0, $z1;

        r0 := @this: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i2 = specialinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: int readFromInflater(byte[],int,int)>(r1, i0, i1);

        if $i2 > 0 goto label3;

        $r2 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: java.util.zip.Inflater inf>;

        $z0 = virtualinvoke $r2.<java.util.zip.Inflater: boolean finished()>();

        if $z0 == 0 goto label1;

        $i4 = (int) -1;

        return $i4;

     label1:
        $r3 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: java.util.zip.Inflater inf>;

        $z1 = virtualinvoke $r3.<java.util.zip.Inflater: boolean needsDictionary()>();

        if $z1 == 0 goto label2;

        $r6 = new java.util.zip.ZipException;

        specialinvoke $r6.<java.util.zip.ZipException: void <init>(java.lang.String)>("This archive needs a preset dictionary which is not supported by Commons Compress.");

        throw $r6;

     label2:
        $i6 = (int) -1;

        if $i2 != $i6 goto label3;

        $r7 = new java.io.IOException;

        specialinvoke $r7.<java.io.IOException: void <init>(java.lang.String)>("Truncated ZIP file");

        throw $r7;

     label3:
        return $i2;
    }

    private int readFromInflater(byte[], int, int) throws java.io.IOException
    {
        java.lang.Throwable $r10;
        byte[] r2;
        java.util.zip.Inflater $r1, $r3, $r4;
        long $l5;
        java.nio.ByteBuffer $r5;
        int i0, i1, $i2, $i3, $i4, i6, $i8, $i10;
        java.util.zip.DataFormatException $r7;
        java.lang.String $r9;
        boolean $z0, $z1;
        java.util.zip.ZipException $r12;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry $r6;
        java.io.IOException $r11;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream r0;

        r0 := @this: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;

        r2 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i6 = 0;

     label1:
        $r1 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: java.util.zip.Inflater inf>;

        $z0 = virtualinvoke $r1.<java.util.zip.Inflater: boolean needsInput()>();

        if $z0 == 0 goto label3;

        $i3 = specialinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: int fill()>();

        if $i3 <= 0 goto label2;

        $r6 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>;

        $r5 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: java.nio.ByteBuffer buf>;

        $i4 = virtualinvoke $r5.<java.nio.ByteBuffer: int limit()>();

        $l5 = (long) $i4;

        staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: long access$714(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry,long)>($r6, $l5);

        goto label3;

     label2:
        $i8 = (int) -1;

        if $i3 != $i8 goto label7;

        $i10 = (int) -1;

        return $i10;

     label3:
        $r3 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: java.util.zip.Inflater inf>;

        $i2 = virtualinvoke $r3.<java.util.zip.Inflater: int inflate(byte[],int,int)>(r2, i0, i1);

        i6 = $i2;

     label4:
        goto label6;

     label5:
        $r7 := @caughtexception;

        $r12 = new java.util.zip.ZipException;

        $r9 = virtualinvoke $r7.<java.util.zip.DataFormatException: java.lang.String getMessage()>();

        specialinvoke $r12.<java.util.zip.ZipException: void <init>(java.lang.String)>($r9);

        $r10 = virtualinvoke $r12.<java.util.zip.ZipException: java.lang.Throwable initCause(java.lang.Throwable)>($r7);

        $r11 = (java.io.IOException) $r10;

        throw $r11;

     label6:
        if $i2 != 0 goto label7;

        $r4 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: java.util.zip.Inflater inf>;

        $z1 = virtualinvoke $r4.<java.util.zip.Inflater: boolean needsInput()>();

        if $z1 != 0 goto label1;

     label7:
        return i6;

        catch java.util.zip.DataFormatException from label3 to label4 with label5;
    }

    public void close() throws java.io.IOException
    {
        java.util.zip.Inflater $r2;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream r0;
        boolean $z0;
        java.io.InputStream $r1;

        r0 := @this: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;

        $z0 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: boolean closed>;

        if $z0 != 0 goto label1;

        r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: boolean closed> = 1;

        $r1 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: java.io.InputStream in>;

        virtualinvoke $r1.<java.io.InputStream: void close()>();

        $r2 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: java.util.zip.Inflater inf>;

        virtualinvoke $r2.<java.util.zip.Inflater: void end()>();

     label1:
        return;
    }

    public long skip(long) throws java.io.IOException
    {
        byte[] $r2, $r3, $r4;
        long l0, l3, $l5, $l10, l11, $l12;
        byte $b1, $b2, $b6;
        int $i4, $i7, $i8, $i9, $i13, $i14, $i15, $i17;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream r1;
        java.lang.IllegalArgumentException $r5;

        r1 := @this: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;

        l0 := @parameter0: long;

        $b1 = l0 cmp 0L;

        $i13 = (int) $b1;

        if $i13 < 0 goto label6;

        l11 = 0L;

     label1:
        $b2 = l11 cmp l0;

        $i14 = (int) $b2;

        if $i14 >= 0 goto label5;

        l3 = l0 - l11;

        $r4 = r1.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: byte[] SKIP_BUF>;

        $r2 = r1.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: byte[] SKIP_BUF>;

        $i4 = lengthof $r2;

        $l5 = (long) $i4;

        $b6 = $l5 cmp l3;

        $i15 = (int) $b6;

        if $i15 <= 0 goto label2;

        $l12 = l3;

        goto label3;

     label2:
        $r3 = r1.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: byte[] SKIP_BUF>;

        $i7 = lengthof $r3;

        $l12 = (long) $i7;

     label3:
        $i8 = (int) $l12;

        $i9 = virtualinvoke r1.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: int read(byte[],int,int)>($r4, 0, $i8);

        $i17 = (int) -1;

        if $i9 != $i17 goto label4;

        return l11;

     label4:
        $l10 = (long) $i9;

        l11 = l11 + $l10;

        goto label1;

     label5:
        return l11;

     label6:
        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r5;
    }

    public static boolean matches(byte[], int)
    {
        byte[] $r0, r1, $r2, $r3, $r4, $r6;
        org.apache.commons.compress.archivers.zip.ZipLong $r5;
        int i0, $i1;
        boolean $z0, $z1, $z2, $z3, $z4;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        $r0 = <org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: byte[] LFH_SIG>;

        $i1 = lengthof $r0;

        if i0 >= $i1 goto label1;

        return 0;

     label1:
        $r2 = <org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: byte[] LFH_SIG>;

        $z0 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: boolean checksig(byte[],byte[])>(r1, $r2);

        if $z0 != 0 goto label2;

        $r3 = <org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: byte[] EOCD_SIG>;

        $z1 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: boolean checksig(byte[],byte[])>(r1, $r3);

        if $z1 != 0 goto label2;

        $r4 = <org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: byte[] DD_SIG>;

        $z2 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: boolean checksig(byte[],byte[])>(r1, $r4);

        if $z2 != 0 goto label2;

        $r5 = <org.apache.commons.compress.archivers.zip.ZipLong: org.apache.commons.compress.archivers.zip.ZipLong SINGLE_SEGMENT_SPLIT_MARKER>;

        $r6 = virtualinvoke $r5.<org.apache.commons.compress.archivers.zip.ZipLong: byte[] getBytes()>();

        $z3 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: boolean checksig(byte[],byte[])>(r1, $r6);

        if $z3 == 0 goto label3;

     label2:
        $z4 = 1;

        goto label4;

     label3:
        $z4 = 0;

     label4:
        return $z4;
    }

    private static boolean checksig(byte[], byte[])
    {
        byte[] r0, r1;
        byte $b1, $b2;
        int $i0, i3, $i4, $i5;

        r1 := @parameter0: byte[];

        r0 := @parameter1: byte[];

        i3 = 0;

     label1:
        $i0 = lengthof r0;

        if i3 >= $i0 goto label3;

        $b2 = r1[i3];

        $b1 = r0[i3];

        $i4 = (int) $b2;

        $i5 = (int) $b1;

        if $i4 == $i5 goto label2;

        return 0;

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        return 1;
    }

    private void closeEntry() throws java.io.IOException
    {
        byte[] $r11;
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry $r4, $r6;
        java.util.zip.Inflater $r16;
        java.nio.ByteBuffer $r10, $r12, $r17;
        byte $b2;
        java.io.ByteArrayInputStream $r15;
        boolean $z0, $z1, $z2;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry $r1, $r2, $r3, $r5, $r7, $r8, $r9, $r13;
        long $l0, $l1, $l4, $l5, $l9;
        java.nio.Buffer $r18;
        int $i3, $i6, $i7, $i8, $i10;
        java.io.IOException $r19;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream r0;

        r0 := @this: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;

        $z0 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: boolean closed>;

        if $z0 == 0 goto label1;

        $r19 = new java.io.IOException;

        specialinvoke $r19.<java.io.IOException: void <init>(java.lang.String)>("The stream is closed");

        throw $r19;

     label1:
        $r1 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>;

        if $r1 != null goto label2;

        return;

     label2:
        $r2 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>;

        $l0 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: long access$700(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry)>($r2);

        $r3 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>;

        $r4 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: org.apache.commons.compress.archivers.zip.ZipArchiveEntry access$100(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry)>($r3);

        $l1 = virtualinvoke $r4.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: long getCompressedSize()>();

        $b2 = $l0 cmp $l1;

        $i10 = (int) $b2;

        if $i10 > 0 goto label3;

        $r13 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>;

        $z2 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: boolean access$200(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry)>($r13);

        if $z2 != 0 goto label3;

        specialinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: void drainCurrentEntryData()>();

        goto label6;

     label3:
        virtualinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: long skip(long)>(9223372036854775807L);

        $r5 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>;

        $r6 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: org.apache.commons.compress.archivers.zip.ZipArchiveEntry access$100(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry)>($r5);

        $i3 = virtualinvoke $r6.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: int getMethod()>();

        if $i3 != 8 goto label4;

        $l9 = specialinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: long getBytesInflated()>();

        goto label5;

     label4:
        $r7 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>;

        $l9 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: long access$600(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry)>($r7);

     label5:
        $r8 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>;

        $l4 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: long access$700(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry)>($r8);

        $l5 = $l4 - $l9;

        $i8 = (int) $l5;

        if $i8 <= 0 goto label6;

        $r10 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: java.nio.ByteBuffer buf>;

        $r11 = virtualinvoke $r10.<java.nio.ByteBuffer: byte[] array()>();

        $r12 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: java.nio.ByteBuffer buf>;

        $i6 = virtualinvoke $r12.<java.nio.ByteBuffer: int limit()>();

        $i7 = $i6 - $i8;

        specialinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: void pushback(byte[],int,int)>($r11, $i7, $i8);

     label6:
        $r15 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: java.io.ByteArrayInputStream lastStoredEntry>;

        if $r15 != null goto label7;

        $r9 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>;

        $z1 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: boolean access$200(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry)>($r9);

        if $z1 == 0 goto label7;

        specialinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: void readDataDescriptor()>();

     label7:
        $r16 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: java.util.zip.Inflater inf>;

        virtualinvoke $r16.<java.util.zip.Inflater: void reset()>();

        $r17 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: java.nio.ByteBuffer buf>;

        $r18 = virtualinvoke $r17.<java.nio.ByteBuffer: java.nio.Buffer clear()>();

        virtualinvoke $r18.<java.nio.Buffer: java.nio.Buffer flip()>();

        r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current> = null;

        r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: java.io.ByteArrayInputStream lastStoredEntry> = null;

        return;
    }

    private void drainCurrentEntryData() throws java.io.IOException
    {
        byte[] $r6;
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry $r2, $r12;
        long $l0, $l1, $l4, $l5, l8, l10;
        java.nio.ByteBuffer $r4, $r7;
        byte $b2, $b9;
        int $i3, $i6, $i7, $i11, $i12;
        java.lang.String $r13, $r15;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry $r1, $r3, $r11;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream r0;
        java.io.EOFException $r17;
        java.lang.StringBuilder $r10, $r14, $r16;
        java.io.InputStream $r5;

        r0 := @this: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;

        $r1 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>;

        $r2 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: org.apache.commons.compress.archivers.zip.ZipArchiveEntry access$100(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry)>($r1);

        $l0 = virtualinvoke $r2.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: long getCompressedSize()>();

        $r3 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>;

        $l1 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: long access$700(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry)>($r3);

        l10 = $l0 - $l1;

     label1:
        $b2 = l10 cmp 0L;

        $i11 = (int) $b2;

        if $i11 <= 0 goto label3;

        $r5 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: java.io.InputStream in>;

        $r4 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: java.nio.ByteBuffer buf>;

        $r6 = virtualinvoke $r4.<java.nio.ByteBuffer: byte[] array()>();

        $r7 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: java.nio.ByteBuffer buf>;

        $i3 = virtualinvoke $r7.<java.nio.ByteBuffer: int capacity()>();

        $l4 = (long) $i3;

        $l5 = staticinvoke <java.lang.Math: long min(long,long)>($l4, l10);

        $i6 = (int) $l5;

        $i7 = virtualinvoke $r5.<java.io.InputStream: int read(byte[],int,int)>($r6, 0, $i6);

        l8 = (long) $i7;

        $b9 = l8 cmp 0L;

        $i12 = (int) $b9;

        if $i12 >= 0 goto label2;

        $r17 = new java.io.EOFException;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Truncated ZIP entry: ");

        $r11 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>;

        $r12 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: org.apache.commons.compress.archivers.zip.ZipArchiveEntry access$100(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry)>($r11);

        $r13 = virtualinvoke $r12.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: java.lang.String getName()>();

        $r14 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r17.<java.io.EOFException: void <init>(java.lang.String)>($r15);

        throw $r17;

     label2:
        virtualinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: void count(long)>(l8);

        l10 = l10 - l8;

        goto label1;

     label3:
        return;
    }

    private long getBytesInflated()
    {
        java.util.zip.Inflater $r1;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry $r2, $r3;
        long $l0, $l2, $l3, l5;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream r0;
        byte $b1, $b4;
        int $i6, $i7;

        r0 := @this: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;

        $r1 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: java.util.zip.Inflater inf>;

        l5 = virtualinvoke $r1.<java.util.zip.Inflater: long getBytesRead()>();

        $r2 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>;

        $l0 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: long access$700(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry)>($r2);

        $b1 = $l0 cmp 4294967296L;

        $i6 = (int) $b1;

        if $i6 < 0 goto label2;

     label1:
        $l2 = l5 + 4294967296L;

        $r3 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>;

        $l3 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: long access$700(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry)>($r3);

        $b4 = $l2 cmp $l3;

        $i7 = (int) $b4;

        if $i7 > 0 goto label2;

        l5 = l5 + 4294967296L;

        goto label1;

     label2:
        return l5;
    }

    private int fill() throws java.io.IOException
    {
        byte[] $r3, $r8;
        java.util.zip.Inflater $r7;
        java.io.IOException $r10;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream r0;
        java.nio.ByteBuffer $r1, $r4, $r5, $r6, $r9;
        int $i0, $i1, $i2;
        boolean $z0;
        java.io.InputStream $r2;

        r0 := @this: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;

        $z0 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: boolean closed>;

        if $z0 == 0 goto label1;

        $r10 = new java.io.IOException;

        specialinvoke $r10.<java.io.IOException: void <init>(java.lang.String)>("The stream is closed");

        throw $r10;

     label1:
        $r2 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: java.io.InputStream in>;

        $r1 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: java.nio.ByteBuffer buf>;

        $r3 = virtualinvoke $r1.<java.nio.ByteBuffer: byte[] array()>();

        $i0 = virtualinvoke $r2.<java.io.InputStream: int read(byte[])>($r3);

        if $i0 <= 0 goto label2;

        $r4 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: java.nio.ByteBuffer buf>;

        virtualinvoke $r4.<java.nio.ByteBuffer: java.nio.Buffer limit(int)>($i0);

        $r5 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: java.nio.ByteBuffer buf>;

        $i1 = virtualinvoke $r5.<java.nio.ByteBuffer: int limit()>();

        virtualinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: void count(int)>($i1);

        $r7 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: java.util.zip.Inflater inf>;

        $r6 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: java.nio.ByteBuffer buf>;

        $r8 = virtualinvoke $r6.<java.nio.ByteBuffer: byte[] array()>();

        $r9 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: java.nio.ByteBuffer buf>;

        $i2 = virtualinvoke $r9.<java.nio.ByteBuffer: int limit()>();

        virtualinvoke $r7.<java.util.zip.Inflater: void setInput(byte[],int,int)>($r8, 0, $i2);

     label2:
        return $i0;
    }

    private void readFully(byte[]) throws java.io.IOException
    {
        byte[] r1;
        int $i0, $i1;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream r0;
        java.io.EOFException $r3;
        java.io.InputStream $r2;

        r0 := @this: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;

        r1 := @parameter0: byte[];

        $r2 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: java.io.InputStream in>;

        $i0 = staticinvoke <org.apache.commons.compress.utils.IOUtils: int readFully(java.io.InputStream,byte[])>($r2, r1);

        virtualinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: void count(int)>($i0);

        $i1 = lengthof r1;

        if $i0 >= $i1 goto label1;

        $r3 = new java.io.EOFException;

        specialinvoke $r3.<java.io.EOFException: void <init>()>();

        throw $r3;

     label1:
        return;
    }

    private void readDataDescriptor() throws java.io.IOException
    {
        byte[] $r1, $r3, $r7, $r9, $r11, $r14, $r17, $r21, $r24, $r25, $r27;
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry $r6, $r13, $r16, $r20, $r23;
        boolean $z0, $z1, $z2;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry $r5, $r12, $r15, $r19, $r22;
        org.apache.commons.compress.archivers.zip.ZipLong $r2, $r4, $r8, $r10, $r18, $r26, r28;
        long $l0, $l1, $l2, $l3, $l4;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream r0;

        r0 := @this: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;

        $r1 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: byte[] WORD_BUF>;

        specialinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: void readFully(byte[])>($r1);

        $r2 = new org.apache.commons.compress.archivers.zip.ZipLong;

        $r3 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: byte[] WORD_BUF>;

        specialinvoke $r2.<org.apache.commons.compress.archivers.zip.ZipLong: void <init>(byte[])>($r3);

        r28 = $r2;

        $r4 = <org.apache.commons.compress.archivers.zip.ZipLong: org.apache.commons.compress.archivers.zip.ZipLong DD_SIG>;

        $z0 = virtualinvoke $r4.<org.apache.commons.compress.archivers.zip.ZipLong: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label1;

        $r25 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: byte[] WORD_BUF>;

        specialinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: void readFully(byte[])>($r25);

        $r26 = new org.apache.commons.compress.archivers.zip.ZipLong;

        $r27 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: byte[] WORD_BUF>;

        specialinvoke $r26.<org.apache.commons.compress.archivers.zip.ZipLong: void <init>(byte[])>($r27);

        r28 = $r26;

     label1:
        $r5 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>;

        $r6 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: org.apache.commons.compress.archivers.zip.ZipArchiveEntry access$100(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry)>($r5);

        $l0 = virtualinvoke r28.<org.apache.commons.compress.archivers.zip.ZipLong: long getValue()>();

        virtualinvoke $r6.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: void setCrc(long)>($l0);

        $r7 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: byte[] TWO_DWORD_BUF>;

        specialinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: void readFully(byte[])>($r7);

        $r8 = new org.apache.commons.compress.archivers.zip.ZipLong;

        $r9 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: byte[] TWO_DWORD_BUF>;

        specialinvoke $r8.<org.apache.commons.compress.archivers.zip.ZipLong: void <init>(byte[],int)>($r9, 8);

        $r10 = <org.apache.commons.compress.archivers.zip.ZipLong: org.apache.commons.compress.archivers.zip.ZipLong CFH_SIG>;

        $z1 = virtualinvoke $r8.<org.apache.commons.compress.archivers.zip.ZipLong: boolean equals(java.lang.Object)>($r10);

        if $z1 != 0 goto label2;

        $r18 = <org.apache.commons.compress.archivers.zip.ZipLong: org.apache.commons.compress.archivers.zip.ZipLong LFH_SIG>;

        $z2 = virtualinvoke $r8.<org.apache.commons.compress.archivers.zip.ZipLong: boolean equals(java.lang.Object)>($r18);

        if $z2 == 0 goto label3;

     label2:
        $r11 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: byte[] TWO_DWORD_BUF>;

        specialinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: void pushback(byte[],int,int)>($r11, 8, 8);

        $r12 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>;

        $r13 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: org.apache.commons.compress.archivers.zip.ZipArchiveEntry access$100(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry)>($r12);

        $r14 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: byte[] TWO_DWORD_BUF>;

        $l1 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipLong: long getValue(byte[])>($r14);

        virtualinvoke $r13.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: void setCompressedSize(long)>($l1);

        $r15 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>;

        $r16 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: org.apache.commons.compress.archivers.zip.ZipArchiveEntry access$100(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry)>($r15);

        $r17 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: byte[] TWO_DWORD_BUF>;

        $l2 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipLong: long getValue(byte[],int)>($r17, 4);

        virtualinvoke $r16.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: void setSize(long)>($l2);

        goto label4;

     label3:
        $r19 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>;

        $r20 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: org.apache.commons.compress.archivers.zip.ZipArchiveEntry access$100(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry)>($r19);

        $r21 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: byte[] TWO_DWORD_BUF>;

        $l3 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipEightByteInteger: long getLongValue(byte[])>($r21);

        virtualinvoke $r20.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: void setCompressedSize(long)>($l3);

        $r22 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>;

        $r23 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: org.apache.commons.compress.archivers.zip.ZipArchiveEntry access$100(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry)>($r22);

        $r24 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: byte[] TWO_DWORD_BUF>;

        $l4 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipEightByteInteger: long getLongValue(byte[],int)>($r24, 8);

        virtualinvoke $r23.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: void setSize(long)>($l4);

     label4:
        return;
    }

    private boolean supportsDataDescriptorFor(org.apache.commons.compress.archivers.zip.ZipArchiveEntry)
    {
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry r0;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream r2;
        int $i0, $i1;
        org.apache.commons.compress.archivers.zip.GeneralPurposeBit $r1;
        boolean $z0, $z1, $z2;

        r2 := @this: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;

        r0 := @parameter0: org.apache.commons.compress.archivers.zip.ZipArchiveEntry;

        $r1 = virtualinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: org.apache.commons.compress.archivers.zip.GeneralPurposeBit getGeneralPurposeBit()>();

        $z0 = virtualinvoke $r1.<org.apache.commons.compress.archivers.zip.GeneralPurposeBit: boolean usesDataDescriptor()>();

        if $z0 == 0 goto label2;

        $z1 = r2.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: boolean allowStoredEntriesWithDataDescriptor>;

        if $z1 == 0 goto label1;

        $i1 = virtualinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: int getMethod()>();

        if $i1 == 0 goto label2;

     label1:
        $i0 = virtualinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: int getMethod()>();

        if $i0 != 8 goto label3;

     label2:
        $z2 = 1;

        goto label4;

     label3:
        $z2 = 0;

     label4:
        return $z2;
    }

    private void readStoredEntry() throws java.io.IOException
    {
        byte[] $r3, $r7;
        java.io.ByteArrayOutputStream $r0;
        java.nio.ByteBuffer $r5;
        byte b0, $b5;
        java.io.ByteArrayInputStream $r4;
        int $i1, $i2, $i3, i4;
        boolean $z0, $z1, z2;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry $r2;
        java.io.IOException $r8;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream r1;
        java.io.InputStream $r6;

        r1 := @this: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;

        $r0 = new java.io.ByteArrayOutputStream;

        specialinvoke $r0.<java.io.ByteArrayOutputStream: void <init>()>();

        i4 = 0;

        z2 = 0;

        $r2 = r1.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>;

        $z0 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: boolean access$400(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry)>($r2);

        if $z0 == 0 goto label1;

        $b5 = 20;

        goto label2;

     label1:
        $b5 = 12;

     label2:
        b0 = $b5;

     label3:
        if z2 != 0 goto label7;

        $r6 = r1.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: java.io.InputStream in>;

        $r5 = r1.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: java.nio.ByteBuffer buf>;

        $r7 = virtualinvoke $r5.<java.nio.ByteBuffer: byte[] array()>();

        $i1 = 512 - i4;

        $i2 = virtualinvoke $r6.<java.io.InputStream: int read(byte[],int,int)>($r7, i4, $i1);

        if $i2 > 0 goto label4;

        $r8 = new java.io.IOException;

        specialinvoke $r8.<java.io.IOException: void <init>(java.lang.String)>("Truncated ZIP file");

        throw $r8;

     label4:
        $i3 = $i2 + i4;

        if $i3 >= 4 goto label5;

        i4 = i4 + $i2;

        goto label3;

     label5:
        $z1 = specialinvoke r1.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: boolean bufferContainsSignature(java.io.ByteArrayOutputStream,int,int,int)>($r0, i4, $i2, b0);

        z2 = $z1;

        if $z1 != 0 goto label6;

        i4 = specialinvoke r1.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: int cacheBytesRead(java.io.ByteArrayOutputStream,int,int,int)>($r0, i4, $i2, b0);

     label6:
        goto label3;

     label7:
        $r3 = virtualinvoke $r0.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        $r4 = new java.io.ByteArrayInputStream;

        specialinvoke $r4.<java.io.ByteArrayInputStream: void <init>(byte[])>($r3);

        r1.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: java.io.ByteArrayInputStream lastStoredEntry> = $r4;

        return;
    }

    private boolean bufferContainsSignature(java.io.ByteArrayOutputStream, int, int, int) throws java.io.IOException
    {
        byte[] $r2, $r3, $r5, $r6, $r8, $r9, $r11, $r12, $r14, $r15, $r17, $r20, $r22, $r23, $r25, $r26, $r28, $r29;
        byte $b2, $b3, $b5, $b6, $b8, $b9, $b10, $b11, $b13, $b14, $b19, $b20, $b23, $b24, $b29, $b30;
        java.io.ByteArrayOutputStream r18;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream r0;
        java.nio.ByteBuffer $r1, $r4, $r7, $r10, $r13, $r16, $r19, $r21, $r24, $r27;
        boolean z0, z1, z2, z3;
        int i0, $i1, $i4, $i7, $i12, i15, $i16, $i17, $i18, $i21, $i22, $i25, i26, $i27, $i28, i31, i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48;

        r0 := @this: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;

        r18 := @parameter0: java.io.ByteArrayOutputStream;

        i15 := @parameter1: int;

        i0 := @parameter2: int;

        i26 := @parameter3: int;

        z0 = 0;

        z3 = 0;

        z2 = 0;

        z1 = 0;

        i31 = 0;

        i32 = 0;

     label1:
        if z2 != 0 goto label7;

        $i1 = i0 - 4;

        if i32 >= $i1 goto label7;

        $r1 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: java.nio.ByteBuffer buf>;

        $r2 = virtualinvoke $r1.<java.nio.ByteBuffer: byte[] array()>();

        $b3 = $r2[i32];

        $r3 = <org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: byte[] LFH>;

        $b2 = $r3[0];

        $i33 = (int) $b3;

        $i34 = (int) $b2;

        if $i33 != $i34 goto label6;

        $r4 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: java.nio.ByteBuffer buf>;

        $r5 = virtualinvoke $r4.<java.nio.ByteBuffer: byte[] array()>();

        $i4 = i32 + 1;

        $b6 = $r5[$i4];

        $r6 = <org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: byte[] LFH>;

        $b5 = $r6[1];

        $i35 = (int) $b6;

        $i36 = (int) $b5;

        if $i35 != $i36 goto label6;

        $r7 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: java.nio.ByteBuffer buf>;

        $r8 = virtualinvoke $r7.<java.nio.ByteBuffer: byte[] array()>();

        $i7 = i32 + 2;

        $b9 = $r8[$i7];

        $r9 = <org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: byte[] LFH>;

        $b8 = $r9[2];

        $i37 = (int) $b9;

        $i38 = (int) $b8;

        if $i37 != $i38 goto label2;

        $r27 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: java.nio.ByteBuffer buf>;

        $r28 = virtualinvoke $r27.<java.nio.ByteBuffer: byte[] array()>();

        $i28 = i32 + 3;

        $b30 = $r28[$i28];

        $r29 = <org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: byte[] LFH>;

        $b29 = $r29[3];

        $i39 = (int) $b30;

        $i40 = (int) $b29;

        if $i39 == $i40 goto label3;

     label2:
        $r10 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: java.nio.ByteBuffer buf>;

        $r11 = virtualinvoke $r10.<java.nio.ByteBuffer: byte[] array()>();

        $b11 = $r11[i32];

        $r12 = <org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: byte[] CFH>;

        $b10 = $r12[2];

        $i41 = (int) $b11;

        $i42 = (int) $b10;

        if $i41 != $i42 goto label4;

        $r24 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: java.nio.ByteBuffer buf>;

        $r25 = virtualinvoke $r24.<java.nio.ByteBuffer: byte[] array()>();

        $i22 = i32 + 3;

        $b24 = $r25[$i22];

        $r26 = <org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: byte[] CFH>;

        $b23 = $r26[3];

        $i43 = (int) $b24;

        $i44 = (int) $b23;

        if $i43 != $i44 goto label4;

     label3:
        $i25 = i15 + i0;

        $i27 = $i25 - i32;

        i31 = $i27 - i26;

        z0 = 1;

        z3 = 1;

        z2 = 1;

        z1 = 1;

        goto label5;

     label4:
        $r13 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: java.nio.ByteBuffer buf>;

        $r14 = virtualinvoke $r13.<java.nio.ByteBuffer: byte[] array()>();

        $i12 = i32 + 2;

        $b14 = $r14[$i12];

        $r15 = <org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: byte[] DD>;

        $b13 = $r15[2];

        $i45 = (int) $b14;

        $i46 = (int) $b13;

        if $i45 != $i46 goto label5;

        $r21 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: java.nio.ByteBuffer buf>;

        $r22 = virtualinvoke $r21.<java.nio.ByteBuffer: byte[] array()>();

        $i18 = i32 + 3;

        $b20 = $r22[$i18];

        $r23 = <org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: byte[] DD>;

        $b19 = $r23[3];

        $i47 = (int) $b20;

        $i48 = (int) $b19;

        if $i47 != $i48 goto label5;

        $i21 = i15 + i0;

        i31 = $i21 - i32;

        z0 = 1;

        z3 = 1;

        z2 = 1;

        z1 = 1;

     label5:
        if z3 == 0 goto label6;

        $r16 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: java.nio.ByteBuffer buf>;

        $r17 = virtualinvoke $r16.<java.nio.ByteBuffer: byte[] array()>();

        $i16 = i15 + i0;

        $i17 = $i16 - i31;

        specialinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: void pushback(byte[],int,int)>($r17, $i17, i31);

        $r19 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: java.nio.ByteBuffer buf>;

        $r20 = virtualinvoke $r19.<java.nio.ByteBuffer: byte[] array()>();

        virtualinvoke r18.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>($r20, 0, i32);

        specialinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: void readDataDescriptor()>();

     label6:
        i32 = i32 + 1;

        goto label1;

     label7:
        return z1;
    }

    private int cacheBytesRead(java.io.ByteArrayOutputStream, int, int, int)
    {
        byte[] $r3, $r5, $r7;
        java.io.ByteArrayOutputStream r0;
        java.nio.ByteBuffer $r2, $r4, $r6;
        int i0, i1, $i2, $i3, i4, $i5, i6, i7;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream r1;

        r1 := @this: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;

        r0 := @parameter0: java.io.ByteArrayOutputStream;

        i6 := @parameter1: int;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        $i2 = i6 + i0;

        $i3 = $i2 - i1;

        i4 = $i3 - 3;

        if i4 <= 0 goto label1;

        $r2 = r1.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: java.nio.ByteBuffer buf>;

        $r3 = virtualinvoke $r2.<java.nio.ByteBuffer: byte[] array()>();

        virtualinvoke r0.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>($r3, 0, i4);

        $r4 = r1.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: java.nio.ByteBuffer buf>;

        $r5 = virtualinvoke $r4.<java.nio.ByteBuffer: byte[] array()>();

        $r6 = r1.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: java.nio.ByteBuffer buf>;

        $r7 = virtualinvoke $r6.<java.nio.ByteBuffer: byte[] array()>();

        $i5 = i1 + 3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, i4, $r7, 0, $i5);

        i7 = i1 + 3;

        goto label2;

     label1:
        i7 = i6 + i0;

     label2:
        return i7;
    }

    private void pushback(byte[], int, int) throws java.io.IOException
    {
        byte[] r2;
        java.io.PushbackInputStream $r3;
        int i0, i1;
        long $l2;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream r0;
        java.io.InputStream $r1;

        r0 := @this: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;

        r2 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r1 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: java.io.InputStream in>;

        $r3 = (java.io.PushbackInputStream) $r1;

        virtualinvoke $r3.<java.io.PushbackInputStream: void unread(byte[],int,int)>(r2, i0, i1);

        $l2 = (long) i1;

        virtualinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: void pushedBackBytes(long)>($l2);

        return;
    }

    private void skipRemainderOfArchive() throws java.io.IOException
    {
        byte[] $r1, $r2;
        long $l3, $l5;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream r0;
        int $i0, $i1, $i2, $i4;

        r0 := @this: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;

        $i0 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: int entriesRead>;

        $i1 = $i0 * 46;

        $i2 = $i1 - 30;

        $l3 = (long) $i2;

        specialinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: void realSkip(long)>($l3);

        specialinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: void findEocdRecord()>();

        specialinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: void realSkip(long)>(16L);

        $r1 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: byte[] SHORT_BUF>;

        specialinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: void readFully(byte[])>($r1);

        $r2 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: byte[] SHORT_BUF>;

        $i4 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipShort: int getValue(byte[])>($r2);

        $l5 = (long) $i4;

        specialinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: void realSkip(long)>($l5);

        return;
    }

    private void findEocdRecord() throws java.io.IOException
    {
        byte[] $r1, $r2, $r3;
        byte $b1, $b3, $b5;
        int $i0, $i2, $i4, $i6, i7, $i9, $i11, $i12, $i14, $i15, $i17, $i19, $i20;
        boolean $z0, z1;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream r0;

        r0 := @this: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;

        $i9 = (int) -1;

        i7 = $i9;

        z1 = 0;

     label1:
        if z1 != 0 goto label2;

        $i6 = specialinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: int readOneByte()>();

        i7 = $i6;

        $i11 = (int) -1;

        if $i6 <= $i11 goto label9;

     label2:
        z1 = 0;

        $z0 = specialinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: boolean isFirstByteOfEocdSig(int)>(i7);

        if $z0 != 0 goto label3;

        goto label1;

     label3:
        $i0 = specialinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: int readOneByte()>();

        i7 = $i0;

        $r1 = <org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: byte[] EOCD_SIG>;

        $b1 = $r1[1];

        $i12 = (int) $b1;

        if $i0 == $i12 goto label5;

        $i14 = (int) -1;

        if $i0 != $i14 goto label4;

        goto label9;

     label4:
        z1 = specialinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: boolean isFirstByteOfEocdSig(int)>($i0);

        goto label1;

     label5:
        $i2 = specialinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: int readOneByte()>();

        i7 = $i2;

        $r2 = <org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: byte[] EOCD_SIG>;

        $b3 = $r2[2];

        $i15 = (int) $b3;

        if $i2 == $i15 goto label7;

        $i17 = (int) -1;

        if $i2 != $i17 goto label6;

        goto label9;

     label6:
        z1 = specialinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: boolean isFirstByteOfEocdSig(int)>($i2);

        goto label1;

     label7:
        $i4 = specialinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: int readOneByte()>();

        i7 = $i4;

        $i19 = (int) -1;

        if $i4 == $i19 goto label9;

        $r3 = <org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: byte[] EOCD_SIG>;

        $b5 = $r3[3];

        $i20 = (int) $b5;

        if $i4 != $i20 goto label8;

        goto label9;

     label8:
        z1 = specialinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: boolean isFirstByteOfEocdSig(int)>($i4);

        goto label1;

     label9:
        return;
    }

    private void realSkip(long) throws java.io.IOException
    {
        byte[] $r2, $r3, $r4;
        long l0, l3, $l5, $l10, l11, $l12;
        byte $b1, $b2, $b6;
        int $i4, $i7, $i8, $i9, $i13, $i14, $i15, $i17;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream r1;
        java.lang.IllegalArgumentException $r6;
        java.io.InputStream $r5;

        r1 := @this: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;

        l0 := @parameter0: long;

        $b1 = l0 cmp 0L;

        $i13 = (int) $b1;

        if $i13 < 0 goto label6;

        l11 = 0L;

     label1:
        $b2 = l11 cmp l0;

        $i14 = (int) $b2;

        if $i14 >= 0 goto label5;

        l3 = l0 - l11;

        $r5 = r1.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: java.io.InputStream in>;

        $r4 = r1.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: byte[] SKIP_BUF>;

        $r2 = r1.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: byte[] SKIP_BUF>;

        $i4 = lengthof $r2;

        $l5 = (long) $i4;

        $b6 = $l5 cmp l3;

        $i15 = (int) $b6;

        if $i15 <= 0 goto label2;

        $l12 = l3;

        goto label3;

     label2:
        $r3 = r1.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: byte[] SKIP_BUF>;

        $i7 = lengthof $r3;

        $l12 = (long) $i7;

     label3:
        $i8 = (int) $l12;

        $i9 = virtualinvoke $r5.<java.io.InputStream: int read(byte[],int,int)>($r4, 0, $i8);

        $i17 = (int) -1;

        if $i9 != $i17 goto label4;

        return;

     label4:
        virtualinvoke r1.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: void count(int)>($i9);

        $l10 = (long) $i9;

        l11 = l11 + $l10;

        goto label1;

     label5:
        return;

     label6:
        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r6;
    }

    private int readOneByte() throws java.io.IOException
    {
        int $i0, $i2;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream r0;
        java.io.InputStream $r1;

        r0 := @this: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;

        $r1 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: java.io.InputStream in>;

        $i0 = virtualinvoke $r1.<java.io.InputStream: int read()>();

        $i2 = (int) -1;

        if $i0 == $i2 goto label1;

        virtualinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: void count(int)>(1);

     label1:
        return $i0;
    }

    private boolean isFirstByteOfEocdSig(int)
    {
        byte[] $r0;
        byte $b1;
        int i0, $i2;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream r1;
        boolean $z0;

        r1 := @this: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;

        i0 := @parameter0: int;

        $r0 = <org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream: byte[] EOCD_SIG>;

        $b1 = $r0[0];

        $i2 = (int) $b1;

        if i0 != $i2 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    static void access$800(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream, int)
    {
        int i0;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream r0;

        r0 := @parameter0: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;

        i0 := @parameter1: int;

        virtualinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: void count(int)>(i0);

        return;
    }

    static org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry access$900(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream)
    {
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream r0;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry $r1;

        r0 := @parameter0: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;

        $r1 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>;

        return $r1;
    }

    static void access$1000(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream, int)
    {
        int i0;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream r0;

        r0 := @parameter0: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;

        i0 := @parameter1: int;

        virtualinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: void count(int)>(i0);

        return;
    }

    static void <clinit>()
    {
        byte[] $r1, $r3, $r5;
        org.apache.commons.compress.archivers.zip.ZipLong $r0, $r2, $r4;

        <org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: long TWO_EXP_32> = 4294967296L;

        <org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: int CFH_LEN> = 46;

        <org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: int LFH_LEN> = 30;

        $r0 = <org.apache.commons.compress.archivers.zip.ZipLong: org.apache.commons.compress.archivers.zip.ZipLong LFH_SIG>;

        $r1 = virtualinvoke $r0.<org.apache.commons.compress.archivers.zip.ZipLong: byte[] getBytes()>();

        <org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: byte[] LFH> = $r1;

        $r2 = <org.apache.commons.compress.archivers.zip.ZipLong: org.apache.commons.compress.archivers.zip.ZipLong CFH_SIG>;

        $r3 = virtualinvoke $r2.<org.apache.commons.compress.archivers.zip.ZipLong: byte[] getBytes()>();

        <org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: byte[] CFH> = $r3;

        $r4 = <org.apache.commons.compress.archivers.zip.ZipLong: org.apache.commons.compress.archivers.zip.ZipLong DD_SIG>;

        $r5 = virtualinvoke $r4.<org.apache.commons.compress.archivers.zip.ZipLong: byte[] getBytes()>();

        <org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: byte[] DD> = $r5;

        return;
    }
}
