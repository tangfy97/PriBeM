class org.apache.poi.xslf.usermodel.RenderableShape extends java.lang.Object
{
    public static final java.awt.Color NO_PAINT;
    private org.apache.poi.xslf.usermodel.XSLFSimpleShape _shape;

    public void <init>(org.apache.poi.xslf.usermodel.XSLFSimpleShape)
    {
        org.apache.poi.xslf.usermodel.XSLFSimpleShape r1;
        org.apache.poi.xslf.usermodel.RenderableShape r0;

        r0 := @this: org.apache.poi.xslf.usermodel.RenderableShape;

        r1 := @parameter0: org.apache.poi.xslf.usermodel.XSLFSimpleShape;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.poi.xslf.usermodel.RenderableShape: org.apache.poi.xslf.usermodel.XSLFSimpleShape _shape> = r1;

        return;
    }

    public java.awt.Paint selectPaint(java.awt.Graphics2D, org.apache.xmlbeans.XmlObject, org.openxmlformats.schemas.drawingml.x2006.main.CTSchemeColor, org.apache.poi.openxml4j.opc.PackagePart)
    {
        java.awt.geom.Rectangle2D $r6;
        org.openxmlformats.schemas.drawingml.x2006.main.STPathShadeType$Enum $r8, $r9, $r10, $r11;
        org.apache.poi.xslf.usermodel.RenderableShape r0;
        org.apache.poi.xslf.usermodel.XSLFSimpleShape $r1;
        org.apache.poi.xslf.usermodel.XSLFSheet $r2;
        org.openxmlformats.schemas.drawingml.x2006.main.CTSolidColorFillProperties r16;
        java.awt.Graphics2D r5;
        org.apache.poi.xslf.usermodel.XSLFTheme $r3;
        org.openxmlformats.schemas.drawingml.x2006.main.CTGradientFillProperties r18;
        org.apache.poi.openxml4j.opc.PackagePart r13;
        org.apache.xmlbeans.XmlObject r4;
        org.openxmlformats.schemas.drawingml.x2006.main.CTPathShadeProperties $r7;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        org.openxmlformats.schemas.drawingml.x2006.main.CTBlipFillProperties r17;
        org.apache.poi.xslf.usermodel.XSLFColor $r14;
        java.awt.Paint r15;
        org.openxmlformats.schemas.drawingml.x2006.main.CTSchemeColor r12;

        r0 := @this: org.apache.poi.xslf.usermodel.RenderableShape;

        r5 := @parameter0: java.awt.Graphics2D;

        r4 := @parameter1: org.apache.xmlbeans.XmlObject;

        r12 := @parameter2: org.openxmlformats.schemas.drawingml.x2006.main.CTSchemeColor;

        r13 := @parameter3: org.apache.poi.openxml4j.opc.PackagePart;

        $r1 = r0.<org.apache.poi.xslf.usermodel.RenderableShape: org.apache.poi.xslf.usermodel.XSLFSimpleShape _shape>;

        $r2 = virtualinvoke $r1.<org.apache.poi.xslf.usermodel.XSLFSimpleShape: org.apache.poi.xslf.usermodel.XSLFSheet getSheet()>();

        $r3 = virtualinvoke $r2.<org.apache.poi.xslf.usermodel.XSLFSheet: org.apache.poi.xslf.usermodel.XSLFTheme getTheme()>();

        r15 = null;

        $z0 = r4 instanceof org.openxmlformats.schemas.drawingml.x2006.main.CTNoFillProperties;

        if $z0 == 0 goto label1;

        r15 = <org.apache.poi.xslf.usermodel.RenderableShape: java.awt.Color NO_PAINT>;

        goto label6;

     label1:
        $z1 = r4 instanceof org.openxmlformats.schemas.drawingml.x2006.main.CTSolidColorFillProperties;

        if $z1 == 0 goto label2;

        r16 = (org.openxmlformats.schemas.drawingml.x2006.main.CTSolidColorFillProperties) r4;

        $r14 = new org.apache.poi.xslf.usermodel.XSLFColor;

        specialinvoke $r14.<org.apache.poi.xslf.usermodel.XSLFColor: void <init>(org.apache.xmlbeans.XmlObject,org.apache.poi.xslf.usermodel.XSLFTheme,org.openxmlformats.schemas.drawingml.x2006.main.CTSchemeColor)>(r16, $r3, r12);

        r15 = virtualinvoke $r14.<org.apache.poi.xslf.usermodel.XSLFColor: java.awt.Color getColor()>();

        goto label6;

     label2:
        $z2 = r4 instanceof org.openxmlformats.schemas.drawingml.x2006.main.CTBlipFillProperties;

        if $z2 == 0 goto label3;

        r17 = (org.openxmlformats.schemas.drawingml.x2006.main.CTBlipFillProperties) r4;

        r15 = specialinvoke r0.<org.apache.poi.xslf.usermodel.RenderableShape: java.awt.Paint createTexturePaint(org.openxmlformats.schemas.drawingml.x2006.main.CTBlipFillProperties,java.awt.Graphics2D,org.apache.poi.openxml4j.opc.PackagePart)>(r17, r5, r13);

        goto label6;

     label3:
        $z3 = r4 instanceof org.openxmlformats.schemas.drawingml.x2006.main.CTGradientFillProperties;

        if $z3 == 0 goto label6;

        $r6 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.RenderableShape: java.awt.geom.Rectangle2D getAnchor(java.awt.Graphics2D)>(r5);

        r18 = (org.openxmlformats.schemas.drawingml.x2006.main.CTGradientFillProperties) r4;

        $z4 = interfaceinvoke r18.<org.openxmlformats.schemas.drawingml.x2006.main.CTGradientFillProperties: boolean isSetLin()>();

        if $z4 == 0 goto label4;

        r15 = specialinvoke r0.<org.apache.poi.xslf.usermodel.RenderableShape: java.awt.Paint createLinearGradientPaint(java.awt.Graphics2D,org.openxmlformats.schemas.drawingml.x2006.main.CTGradientFillProperties,java.awt.geom.Rectangle2D,org.apache.poi.xslf.usermodel.XSLFTheme,org.openxmlformats.schemas.drawingml.x2006.main.CTSchemeColor)>(r5, r18, $r6, $r3, r12);

        goto label6;

     label4:
        $z5 = interfaceinvoke r18.<org.openxmlformats.schemas.drawingml.x2006.main.CTGradientFillProperties: boolean isSetPath()>();

        if $z5 == 0 goto label6;

        $r7 = interfaceinvoke r18.<org.openxmlformats.schemas.drawingml.x2006.main.CTGradientFillProperties: org.openxmlformats.schemas.drawingml.x2006.main.CTPathShadeProperties getPath()>();

        $r8 = interfaceinvoke $r7.<org.openxmlformats.schemas.drawingml.x2006.main.CTPathShadeProperties: org.openxmlformats.schemas.drawingml.x2006.main.STPathShadeType$Enum getPath()>();

        $r9 = <org.openxmlformats.schemas.drawingml.x2006.main.STPathShadeType: org.openxmlformats.schemas.drawingml.x2006.main.STPathShadeType$Enum CIRCLE>;

        if $r8 != $r9 goto label5;

        r15 = staticinvoke <org.apache.poi.xslf.usermodel.RenderableShape: java.awt.Paint createRadialGradientPaint(org.openxmlformats.schemas.drawingml.x2006.main.CTGradientFillProperties,java.awt.geom.Rectangle2D,org.apache.poi.xslf.usermodel.XSLFTheme,org.openxmlformats.schemas.drawingml.x2006.main.CTSchemeColor)>(r18, $r6, $r3, r12);

        goto label6;

     label5:
        $r10 = interfaceinvoke $r7.<org.openxmlformats.schemas.drawingml.x2006.main.CTPathShadeProperties: org.openxmlformats.schemas.drawingml.x2006.main.STPathShadeType$Enum getPath()>();

        $r11 = <org.openxmlformats.schemas.drawingml.x2006.main.STPathShadeType: org.openxmlformats.schemas.drawingml.x2006.main.STPathShadeType$Enum SHAPE>;

        if $r10 != $r11 goto label6;

        r15 = staticinvoke <org.apache.poi.xslf.usermodel.RenderableShape: java.awt.Paint toRadialGradientPaint(org.openxmlformats.schemas.drawingml.x2006.main.CTGradientFillProperties,java.awt.geom.Rectangle2D,org.apache.poi.xslf.usermodel.XSLFTheme,org.openxmlformats.schemas.drawingml.x2006.main.CTSchemeColor)>(r18, $r6, $r3, r12);

     label6:
        return r15;
    }

    private java.awt.Paint createTexturePaint(org.openxmlformats.schemas.drawingml.x2006.main.CTBlipFillProperties, java.awt.Graphics2D, org.apache.poi.openxml4j.opc.PackagePart)
    {
        java.awt.TexturePaint $r8, r17;
        org.apache.poi.xslf.usermodel.RenderableShape r16;
        org.apache.poi.openxml4j.opc.PackageRelationship $r4;
        org.apache.poi.xslf.usermodel.XSLFRenderingHint $r13;
        java.awt.AlphaComposite $r11;
        java.awt.Graphics2D r5;
        int $i0, $i1, $i2, $i3;
        org.openxmlformats.schemas.drawingml.x2006.main.CTAlphaModulateFixedEffect $r10;
        org.apache.poi.openxml4j.opc.PackagePart r3, $r6;
        java.lang.String $r2;
        java.awt.geom.Rectangle2D$Double $r9;
        double $d0, $d1;
        java.awt.image.BufferedImage $r7;
        org.apache.poi.xslf.usermodel.XSLFImageRenderer $r12, r18;
        org.openxmlformats.schemas.drawingml.x2006.main.CTBlipFillProperties r0;
        java.lang.Exception $r15;
        org.openxmlformats.schemas.drawingml.x2006.main.CTBlip $r1;
        float $f0, f1;
        java.lang.Object $r14;

        r16 := @this: org.apache.poi.xslf.usermodel.RenderableShape;

        r0 := @parameter0: org.openxmlformats.schemas.drawingml.x2006.main.CTBlipFillProperties;

        r5 := @parameter1: java.awt.Graphics2D;

        r3 := @parameter2: org.apache.poi.openxml4j.opc.PackagePart;

        r17 = null;

        $r1 = interfaceinvoke r0.<org.openxmlformats.schemas.drawingml.x2006.main.CTBlipFillProperties: org.openxmlformats.schemas.drawingml.x2006.main.CTBlip getBlip()>();

        $r2 = interfaceinvoke $r1.<org.openxmlformats.schemas.drawingml.x2006.main.CTBlip: java.lang.String getEmbed()>();

        $r4 = virtualinvoke r3.<org.apache.poi.openxml4j.opc.PackagePart: org.apache.poi.openxml4j.opc.PackageRelationship getRelationship(java.lang.String)>($r2);

        if $r4 == null goto label6;

        r18 = null;

        if r5 == null goto label1;

        $r13 = <org.apache.poi.xslf.usermodel.XSLFRenderingHint: org.apache.poi.xslf.usermodel.XSLFRenderingHint IMAGE_RENDERER>;

        $r14 = virtualinvoke r5.<java.awt.Graphics2D: java.lang.Object getRenderingHint(java.awt.RenderingHints$Key)>($r13);

        r18 = (org.apache.poi.xslf.usermodel.XSLFImageRenderer) $r14;

     label1:
        if r18 != null goto label2;

        $r12 = new org.apache.poi.xslf.usermodel.XSLFImageRenderer;

        specialinvoke $r12.<org.apache.poi.xslf.usermodel.XSLFImageRenderer: void <init>()>();

        r18 = $r12;

     label2:
        $r6 = virtualinvoke r3.<org.apache.poi.openxml4j.opc.PackagePart: org.apache.poi.openxml4j.opc.PackagePart getRelatedPart(org.apache.poi.openxml4j.opc.PackageRelationship)>($r4);

        $r7 = virtualinvoke r18.<org.apache.poi.xslf.usermodel.XSLFImageRenderer: java.awt.image.BufferedImage readImage(org.apache.poi.openxml4j.opc.PackagePart)>($r6);

        $i0 = interfaceinvoke $r1.<org.openxmlformats.schemas.drawingml.x2006.main.CTBlip: int sizeOfAlphaModFixArray()>();

        if $i0 <= 0 goto label3;

        $r10 = interfaceinvoke $r1.<org.openxmlformats.schemas.drawingml.x2006.main.CTBlip: org.openxmlformats.schemas.drawingml.x2006.main.CTAlphaModulateFixedEffect getAlphaModFixArray(int)>(0);

        $i3 = interfaceinvoke $r10.<org.openxmlformats.schemas.drawingml.x2006.main.CTAlphaModulateFixedEffect: int getAmt()>();

        $f0 = (float) $i3;

        f1 = $f0 / 100000.0F;

        $r11 = staticinvoke <java.awt.AlphaComposite: java.awt.AlphaComposite getInstance(int,float)>(3, f1);

        if r5 == null goto label3;

        virtualinvoke r5.<java.awt.Graphics2D: void setComposite(java.awt.Composite)>($r11);

     label3:
        if $r7 == null goto label4;

        $r8 = new java.awt.TexturePaint;

        $r9 = new java.awt.geom.Rectangle2D$Double;

        $i1 = virtualinvoke $r7.<java.awt.image.BufferedImage: int getWidth()>();

        $d0 = (double) $i1;

        $i2 = virtualinvoke $r7.<java.awt.image.BufferedImage: int getHeight()>();

        $d1 = (double) $i2;

        specialinvoke $r9.<java.awt.geom.Rectangle2D$Double: void <init>(double,double,double,double)>(0.0, 0.0, $d0, $d1);

        specialinvoke $r8.<java.awt.TexturePaint: void <init>(java.awt.image.BufferedImage,java.awt.geom.Rectangle2D)>($r7, $r9);

        r17 = $r8;

     label4:
        goto label6;

     label5:
        $r15 := @caughtexception;

        virtualinvoke $r15.<java.lang.Exception: void printStackTrace()>();

     label6:
        return r17;

        catch java.lang.Exception from label2 to label4 with label5;
    }

    private java.awt.Paint createLinearGradientPaint(java.awt.Graphics2D, org.openxmlformats.schemas.drawingml.x2006.main.CTGradientFillProperties, java.awt.geom.Rectangle2D, org.apache.poi.xslf.usermodel.XSLFTheme, org.openxmlformats.schemas.drawingml.x2006.main.CTSchemeColor)
    {
        java.awt.Color $r19, $r24, $r25;
        java.awt.geom.Rectangle2D r8;
        org.apache.poi.xslf.usermodel.RenderableShape r5;
        org.openxmlformats.schemas.drawingml.x2006.main.CTGradientStop r27;
        byte $b5;
        org.openxmlformats.schemas.drawingml.x2006.main.CTGradientFillProperties r0;
        org.apache.poi.xslf.usermodel.XSLFTheme r17;
        java.awt.geom.AffineTransform $r9, $r42;
        java.lang.Exception $r20;
        org.openxmlformats.schemas.drawingml.x2006.main.CTGradientStop[] $r3;
        java.lang.Object[] $r33;
        float[] r7;
        java.lang.reflect.Constructor $r32;
        java.awt.geom.Point2D$Double $r39, $r40;
        java.lang.Class[] $r31;
        java.lang.RuntimeException $r44;
        org.apache.poi.xslf.usermodel.XSLFColor $r41;
        java.awt.GradientPaint $r43;
        java.lang.ClassNotFoundException $r22;
        java.awt.Color[] r6;
        java.awt.geom.Point2D $r11, $r13;
        org.apache.poi.xslf.usermodel.XSLFSimpleShape $r15;
        java.lang.Enum $r34, $r35;
        org.openxmlformats.schemas.drawingml.x2006.main.CTGradientStopList $r2;
        boolean $z0, $z1;
        org.apache.poi.xslf.usermodel.RenderableShape$1 $r38;
        java.awt.Paint r37;
        org.openxmlformats.schemas.drawingml.x2006.main.CTLinearShadeProperties $r1;
        float $f0, $f1;
        org.openxmlformats.schemas.drawingml.x2006.main.CTSchemeColor r18;
        java.awt.Graphics2D r26;
        int $i0, $i1, $i2, $i3, $i4, $i6, $i7, $i8, i9, $i11;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38, $d39, $d40, $d41, $d42, $d43, $d44, $d45, d46, d47;
        java.lang.Class $r28, $r29, $r30;
        java.lang.Object $r36;

        r5 := @this: org.apache.poi.xslf.usermodel.RenderableShape;

        r26 := @parameter0: java.awt.Graphics2D;

        r0 := @parameter1: org.openxmlformats.schemas.drawingml.x2006.main.CTGradientFillProperties;

        r8 := @parameter2: java.awt.geom.Rectangle2D;

        r17 := @parameter3: org.apache.poi.xslf.usermodel.XSLFTheme;

        r18 := @parameter4: org.openxmlformats.schemas.drawingml.x2006.main.CTSchemeColor;

        $r1 = interfaceinvoke r0.<org.openxmlformats.schemas.drawingml.x2006.main.CTGradientFillProperties: org.openxmlformats.schemas.drawingml.x2006.main.CTLinearShadeProperties getLin()>();

        $i0 = interfaceinvoke $r1.<org.openxmlformats.schemas.drawingml.x2006.main.CTLinearShadeProperties: int getAng()>();

        $i11 = (int) 60000;

        $i1 = $i0 / $i11;

        d0 = (double) $i1;

        $r2 = interfaceinvoke r0.<org.openxmlformats.schemas.drawingml.x2006.main.CTGradientFillProperties: org.openxmlformats.schemas.drawingml.x2006.main.CTGradientStopList getGsLst()>();

        $r3 = interfaceinvoke $r2.<org.openxmlformats.schemas.drawingml.x2006.main.CTGradientStopList: org.openxmlformats.schemas.drawingml.x2006.main.CTGradientStop[] getGsArray()>();

        $r38 = new org.apache.poi.xslf.usermodel.RenderableShape$1;

        specialinvoke $r38.<org.apache.poi.xslf.usermodel.RenderableShape$1: void <init>(org.apache.poi.xslf.usermodel.RenderableShape)>(r5);

        staticinvoke <java.util.Arrays: void sort(java.lang.Object[],java.util.Comparator)>($r3, $r38);

        $i2 = lengthof $r3;

        r6 = newarray (java.awt.Color)[$i2];

        $i3 = lengthof $r3;

        r7 = newarray (float)[$i3];

        $d1 = staticinvoke <java.lang.Math: double toRadians(double)>(d0);

        $d2 = virtualinvoke r8.<java.awt.geom.Rectangle2D: double getX()>();

        $d3 = virtualinvoke r8.<java.awt.geom.Rectangle2D: double getWidth()>();

        $d4 = $d3 / 2.0;

        $d5 = $d2 + $d4;

        $d6 = virtualinvoke r8.<java.awt.geom.Rectangle2D: double getY()>();

        $d7 = virtualinvoke r8.<java.awt.geom.Rectangle2D: double getHeight()>();

        $d8 = $d7 / 2.0;

        $d9 = $d6 + $d8;

        $r9 = staticinvoke <java.awt.geom.AffineTransform: java.awt.geom.AffineTransform getRotateInstance(double,double,double)>($d1, $d5, $d9);

        $d10 = virtualinvoke r8.<java.awt.geom.Rectangle2D: double getHeight()>();

        $d11 = virtualinvoke r8.<java.awt.geom.Rectangle2D: double getHeight()>();

        $d12 = $d10 * $d11;

        $d13 = virtualinvoke r8.<java.awt.geom.Rectangle2D: double getWidth()>();

        $d14 = virtualinvoke r8.<java.awt.geom.Rectangle2D: double getWidth()>();

        $d15 = $d13 * $d14;

        $d16 = $d12 + $d15;

        $d17 = staticinvoke <java.lang.Math: double sqrt(double)>($d16);

        $r39 = new java.awt.geom.Point2D$Double;

        $d18 = virtualinvoke r8.<java.awt.geom.Rectangle2D: double getX()>();

        $d19 = virtualinvoke r8.<java.awt.geom.Rectangle2D: double getWidth()>();

        $d20 = $d19 / 2.0;

        $d22 = $d18 + $d20;

        $d21 = $d17 / 2.0;

        $d23 = $d22 - $d21;

        $d24 = virtualinvoke r8.<java.awt.geom.Rectangle2D: double getY()>();

        $d25 = virtualinvoke r8.<java.awt.geom.Rectangle2D: double getHeight()>();

        $d26 = $d25 / 2.0;

        $d27 = $d24 + $d26;

        specialinvoke $r39.<java.awt.geom.Point2D$Double: void <init>(double,double)>($d23, $d27);

        $r11 = virtualinvoke $r9.<java.awt.geom.AffineTransform: java.awt.geom.Point2D transform(java.awt.geom.Point2D,java.awt.geom.Point2D)>($r39, null);

        $r40 = new java.awt.geom.Point2D$Double;

        $d28 = virtualinvoke r8.<java.awt.geom.Rectangle2D: double getX()>();

        $d29 = virtualinvoke r8.<java.awt.geom.Rectangle2D: double getWidth()>();

        $d30 = $d28 + $d29;

        $d31 = virtualinvoke r8.<java.awt.geom.Rectangle2D: double getY()>();

        $d32 = virtualinvoke r8.<java.awt.geom.Rectangle2D: double getHeight()>();

        $d33 = $d32 / 2.0;

        $d34 = $d31 + $d33;

        specialinvoke $r40.<java.awt.geom.Point2D$Double: void <init>(double,double)>($d30, $d34);

        $r13 = virtualinvoke $r9.<java.awt.geom.AffineTransform: java.awt.geom.Point2D transform(java.awt.geom.Point2D,java.awt.geom.Point2D)>($r40, null);

        staticinvoke <org.apache.poi.xslf.usermodel.RenderableShape: void snapToAnchor(java.awt.geom.Point2D,java.awt.geom.Rectangle2D)>($r11, r8);

        staticinvoke <org.apache.poi.xslf.usermodel.RenderableShape: void snapToAnchor(java.awt.geom.Point2D,java.awt.geom.Rectangle2D)>($r13, r8);

        i9 = 0;

     label1:
        $i4 = lengthof $r3;

        if i9 >= $i4 goto label2;

        r27 = $r3[i9];

        $r41 = new org.apache.poi.xslf.usermodel.XSLFColor;

        specialinvoke $r41.<org.apache.poi.xslf.usermodel.XSLFColor: void <init>(org.apache.xmlbeans.XmlObject,org.apache.poi.xslf.usermodel.XSLFTheme,org.openxmlformats.schemas.drawingml.x2006.main.CTSchemeColor)>(r27, r17, r18);

        $r19 = virtualinvoke $r41.<org.apache.poi.xslf.usermodel.XSLFColor: java.awt.Color getColor()>();

        r6[i9] = $r19;

        $i6 = interfaceinvoke r27.<org.openxmlformats.schemas.drawingml.x2006.main.CTGradientStop: int getPos()>();

        $f0 = (float) $i6;

        $f1 = $f0 / 100000.0F;

        r7[i9] = $f1;

        i9 = i9 + 1;

        goto label1;

     label2:
        $r42 = new java.awt.geom.AffineTransform;

        specialinvoke $r42.<java.awt.geom.AffineTransform: void <init>()>();

        $z0 = interfaceinvoke r0.<org.openxmlformats.schemas.drawingml.x2006.main.CTGradientFillProperties: boolean isSetRotWithShape()>();

        if $z0 != 0 goto label3;

        $z1 = interfaceinvoke r0.<org.openxmlformats.schemas.drawingml.x2006.main.CTGradientFillProperties: boolean getRotWithShape()>();

        if $z1 != 0 goto label4;

     label3:
        $r15 = r5.<org.apache.poi.xslf.usermodel.RenderableShape: org.apache.poi.xslf.usermodel.XSLFSimpleShape _shape>;

        $d35 = virtualinvoke $r15.<org.apache.poi.xslf.usermodel.XSLFSimpleShape: double getRotation()>();

        $b5 = $d35 cmpl 0.0;

        if $b5 == 0 goto label4;

        $d36 = virtualinvoke r8.<java.awt.geom.Rectangle2D: double getX()>();

        $d37 = virtualinvoke r8.<java.awt.geom.Rectangle2D: double getWidth()>();

        $d38 = $d37 / 2.0;

        d46 = $d36 + $d38;

        $d39 = virtualinvoke r8.<java.awt.geom.Rectangle2D: double getY()>();

        $d40 = virtualinvoke r8.<java.awt.geom.Rectangle2D: double getHeight()>();

        $d41 = $d40 / 2.0;

        d47 = $d39 + $d41;

        virtualinvoke $r42.<java.awt.geom.AffineTransform: void translate(double,double)>(d46, d47);

        $d42 = neg $d35;

        $d43 = staticinvoke <java.lang.Math: double toRadians(double)>($d42);

        virtualinvoke $r42.<java.awt.geom.AffineTransform: void rotate(double)>($d43);

        $d45 = neg d46;

        $d44 = neg d47;

        virtualinvoke $r42.<java.awt.geom.AffineTransform: void translate(double,double)>($d45, $d44);

     label4:
        $r28 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("java.awt.LinearGradientPaint");

        $r29 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("java.awt.MultipleGradientPaint$CycleMethod");

        $r30 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("java.awt.MultipleGradientPaint$ColorSpaceType");

        $r31 = newarray (java.lang.Class)[7];

        $r31[0] = class "Ljava/awt/geom/Point2D;";

        $r31[1] = class "Ljava/awt/geom/Point2D;";

        $r31[2] = class "[F";

        $r31[3] = class "[Ljava/awt/Color;";

        $r31[4] = $r29;

        $r31[5] = $r30;

        $r31[6] = class "Ljava/awt/geom/AffineTransform;";

        $r32 = virtualinvoke $r28.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r31);

        $r33 = newarray (java.lang.Object)[7];

        $r33[0] = $r11;

        $r33[1] = $r13;

        $r33[2] = r7;

        $r33[3] = r6;

        $r34 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>($r29, "NO_CYCLE");

        $r33[4] = $r34;

        $r35 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>($r30, "SRGB");

        $r33[5] = $r35;

        $r33[6] = $r42;

        $r36 = virtualinvoke $r32.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r33);

        r37 = (java.awt.Paint) $r36;

     label5:
        goto label8;

     label6:
        $r22 := @caughtexception;

        $r43 = new java.awt.GradientPaint;

        $r25 = r6[0];

        $i7 = lengthof r6;

        $i8 = $i7 - 1;

        $r24 = r6[$i8];

        specialinvoke $r43.<java.awt.GradientPaint: void <init>(java.awt.geom.Point2D,java.awt.Color,java.awt.geom.Point2D,java.awt.Color)>($r11, $r25, $r13, $r24);

        r37 = $r43;

        goto label8;

     label7:
        $r20 := @caughtexception;

        $r44 = new java.lang.RuntimeException;

        specialinvoke $r44.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r20);

        throw $r44;

     label8:
        return r37;

        catch java.lang.ClassNotFoundException from label4 to label5 with label6;
        catch java.lang.Exception from label4 to label5 with label7;
    }

    private static java.awt.Paint toRadialGradientPaint(org.openxmlformats.schemas.drawingml.x2006.main.CTGradientFillProperties, java.awt.geom.Rectangle2D, org.apache.poi.xslf.usermodel.XSLFTheme, org.openxmlformats.schemas.drawingml.x2006.main.CTSchemeColor)
    {
        java.awt.geom.Rectangle2D r10;
        org.apache.poi.xslf.usermodel.RenderableShape$2 $r14;
        org.openxmlformats.schemas.drawingml.x2006.main.CTGradientStop $r4, $r8, $r9;
        java.awt.Paint $r13;
        org.openxmlformats.schemas.drawingml.x2006.main.CTGradientFillProperties r0, $r5;
        org.apache.poi.xslf.usermodel.XSLFTheme r11;
        int $i1;
        org.openxmlformats.schemas.drawingml.x2006.main.CTGradientStopList $r1, $r6;
        org.openxmlformats.schemas.drawingml.x2006.main.CTGradientStop[] $r2, $r7;
        org.openxmlformats.schemas.drawingml.x2006.main.CTSchemeColor r12;

        r0 := @parameter0: org.openxmlformats.schemas.drawingml.x2006.main.CTGradientFillProperties;

        r10 := @parameter1: java.awt.geom.Rectangle2D;

        r11 := @parameter2: org.apache.poi.xslf.usermodel.XSLFTheme;

        r12 := @parameter3: org.openxmlformats.schemas.drawingml.x2006.main.CTSchemeColor;

        $r1 = interfaceinvoke r0.<org.openxmlformats.schemas.drawingml.x2006.main.CTGradientFillProperties: org.openxmlformats.schemas.drawingml.x2006.main.CTGradientStopList getGsLst()>();

        $r2 = interfaceinvoke $r1.<org.openxmlformats.schemas.drawingml.x2006.main.CTGradientStopList: org.openxmlformats.schemas.drawingml.x2006.main.CTGradientStop[] getGsArray()>();

        $r14 = new org.apache.poi.xslf.usermodel.RenderableShape$2;

        specialinvoke $r14.<org.apache.poi.xslf.usermodel.RenderableShape$2: void <init>()>();

        staticinvoke <java.util.Arrays: void sort(java.lang.Object[],java.util.Comparator)>($r2, $r14);

        $r4 = $r2[1];

        $i1 = (int) 50000;

        interfaceinvoke $r4.<org.openxmlformats.schemas.drawingml.x2006.main.CTGradientStop: void setPos(int)>($i1);

        $r5 = staticinvoke <org.openxmlformats.schemas.drawingml.x2006.main.CTGradientFillProperties$Factory: org.openxmlformats.schemas.drawingml.x2006.main.CTGradientFillProperties newInstance()>();

        interfaceinvoke $r5.<org.openxmlformats.schemas.drawingml.x2006.main.CTGradientFillProperties: org.apache.xmlbeans.XmlObject set(org.apache.xmlbeans.XmlObject)>(r0);

        $r6 = interfaceinvoke $r5.<org.openxmlformats.schemas.drawingml.x2006.main.CTGradientFillProperties: org.openxmlformats.schemas.drawingml.x2006.main.CTGradientStopList getGsLst()>();

        $r7 = newarray (org.openxmlformats.schemas.drawingml.x2006.main.CTGradientStop)[2];

        $r8 = $r2[0];

        $r7[0] = $r8;

        $r9 = $r2[1];

        $r7[1] = $r9;

        interfaceinvoke $r6.<org.openxmlformats.schemas.drawingml.x2006.main.CTGradientStopList: void setGsArray(org.openxmlformats.schemas.drawingml.x2006.main.CTGradientStop[])>($r7);

        $r13 = staticinvoke <org.apache.poi.xslf.usermodel.RenderableShape: java.awt.Paint createRadialGradientPaint(org.openxmlformats.schemas.drawingml.x2006.main.CTGradientFillProperties,java.awt.geom.Rectangle2D,org.apache.poi.xslf.usermodel.XSLFTheme,org.openxmlformats.schemas.drawingml.x2006.main.CTSchemeColor)>($r5, r10, r11, r12);

        return $r13;
    }

    private static java.awt.Paint createRadialGradientPaint(org.openxmlformats.schemas.drawingml.x2006.main.CTGradientFillProperties, java.awt.geom.Rectangle2D, org.apache.poi.xslf.usermodel.XSLFTheme, org.openxmlformats.schemas.drawingml.x2006.main.CTSchemeColor)
    {
        java.awt.Color $r18, $r24, $r25;
        java.lang.Float $r13;
        java.awt.geom.Rectangle2D r4;
        org.openxmlformats.schemas.drawingml.x2006.main.CTGradientStop r26;
        org.openxmlformats.schemas.drawingml.x2006.main.CTGradientFillProperties r0;
        org.apache.poi.xslf.usermodel.XSLFTheme r16;
        org.openxmlformats.schemas.drawingml.x2006.main.CTGradientStopList $r1;
        org.apache.poi.xslf.usermodel.RenderableShape$3 $r5;
        java.lang.Exception $r19;
        java.awt.Paint r27;
        float f0, $f1, $f2;
        org.openxmlformats.schemas.drawingml.x2006.main.CTGradientStop[] $r2;
        org.openxmlformats.schemas.drawingml.x2006.main.CTSchemeColor r17;
        java.lang.Object[] $r12;
        float[] r7;
        java.lang.reflect.Constructor $r11;
        java.awt.geom.Point2D$Double $r3, $r23;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12;
        java.lang.Class[] $r9;
        java.lang.RuntimeException $r20;
        org.apache.poi.xslf.usermodel.XSLFColor $r15;
        java.awt.GradientPaint $r22;
        java.lang.Class $r8, $r10;
        java.lang.Object $r14;
        java.lang.ClassNotFoundException $r21;
        java.awt.Color[] r6;

        r0 := @parameter0: org.openxmlformats.schemas.drawingml.x2006.main.CTGradientFillProperties;

        r4 := @parameter1: java.awt.geom.Rectangle2D;

        r16 := @parameter2: org.apache.poi.xslf.usermodel.XSLFTheme;

        r17 := @parameter3: org.openxmlformats.schemas.drawingml.x2006.main.CTSchemeColor;

        $r1 = interfaceinvoke r0.<org.openxmlformats.schemas.drawingml.x2006.main.CTGradientFillProperties: org.openxmlformats.schemas.drawingml.x2006.main.CTGradientStopList getGsLst()>();

        $r2 = interfaceinvoke $r1.<org.openxmlformats.schemas.drawingml.x2006.main.CTGradientStopList: org.openxmlformats.schemas.drawingml.x2006.main.CTGradientStop[] getGsArray()>();

        $r3 = new java.awt.geom.Point2D$Double;

        $d0 = virtualinvoke r4.<java.awt.geom.Rectangle2D: double getX()>();

        $d1 = virtualinvoke r4.<java.awt.geom.Rectangle2D: double getWidth()>();

        $d2 = $d1 / 2.0;

        $d3 = $d0 + $d2;

        $d4 = virtualinvoke r4.<java.awt.geom.Rectangle2D: double getY()>();

        $d5 = virtualinvoke r4.<java.awt.geom.Rectangle2D: double getHeight()>();

        $d6 = $d5 / 2.0;

        $d7 = $d4 + $d6;

        specialinvoke $r3.<java.awt.geom.Point2D$Double: void <init>(double,double)>($d3, $d7);

        $d8 = virtualinvoke r4.<java.awt.geom.Rectangle2D: double getWidth()>();

        $d9 = virtualinvoke r4.<java.awt.geom.Rectangle2D: double getHeight()>();

        $d10 = staticinvoke <java.lang.Math: double max(double,double)>($d8, $d9);

        f0 = (float) $d10;

        $r5 = new org.apache.poi.xslf.usermodel.RenderableShape$3;

        specialinvoke $r5.<org.apache.poi.xslf.usermodel.RenderableShape$3: void <init>()>();

        staticinvoke <java.util.Arrays: void sort(java.lang.Object[],java.util.Comparator)>($r2, $r5);

        $i0 = lengthof $r2;

        r6 = newarray (java.awt.Color)[$i0];

        $i1 = lengthof $r2;

        r7 = newarray (float)[$i1];

        i6 = 0;

     label1:
        $i2 = lengthof $r2;

        if i6 >= $i2 goto label2;

        r26 = $r2[i6];

        $r15 = new org.apache.poi.xslf.usermodel.XSLFColor;

        specialinvoke $r15.<org.apache.poi.xslf.usermodel.XSLFColor: void <init>(org.apache.xmlbeans.XmlObject,org.apache.poi.xslf.usermodel.XSLFTheme,org.openxmlformats.schemas.drawingml.x2006.main.CTSchemeColor)>(r26, r16, r17);

        $r18 = virtualinvoke $r15.<org.apache.poi.xslf.usermodel.XSLFColor: java.awt.Color getColor()>();

        r6[i6] = $r18;

        $i3 = interfaceinvoke r26.<org.openxmlformats.schemas.drawingml.x2006.main.CTGradientStop: int getPos()>();

        $f1 = (float) $i3;

        $f2 = $f1 / 100000.0F;

        r7[i6] = $f2;

        i6 = i6 + 1;

        goto label1;

     label2:
        $r8 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("java.awt.RadialGradientPaint");

        $r9 = newarray (java.lang.Class)[4];

        $r9[0] = class "Ljava/awt/geom/Point2D;";

        $r10 = <java.lang.Float: java.lang.Class TYPE>;

        $r9[1] = $r10;

        $r9[2] = class "[F";

        $r9[3] = class "[Ljava/awt/Color;";

        $r11 = virtualinvoke $r8.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r9);

        $r12 = newarray (java.lang.Object)[4];

        $r12[0] = $r3;

        $r13 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(f0);

        $r12[1] = $r13;

        $r12[2] = r7;

        $r12[3] = r6;

        $r14 = virtualinvoke $r11.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r12);

        r27 = (java.awt.Paint) $r14;

     label3:
        goto label6;

     label4:
        $r21 := @caughtexception;

        $r22 = new java.awt.GradientPaint;

        $r23 = new java.awt.geom.Point2D$Double;

        $d11 = virtualinvoke r4.<java.awt.geom.Rectangle2D: double getX()>();

        $d12 = virtualinvoke r4.<java.awt.geom.Rectangle2D: double getY()>();

        specialinvoke $r23.<java.awt.geom.Point2D$Double: void <init>(double,double)>($d11, $d12);

        $r25 = r6[0];

        $i4 = lengthof r6;

        $i5 = $i4 - 1;

        $r24 = r6[$i5];

        specialinvoke $r22.<java.awt.GradientPaint: void <init>(java.awt.geom.Point2D,java.awt.Color,java.awt.geom.Point2D,java.awt.Color)>($r23, $r25, $r3, $r24);

        r27 = $r22;

        goto label6;

     label5:
        $r19 := @caughtexception;

        $r20 = new java.lang.RuntimeException;

        specialinvoke $r20.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r19);

        throw $r20;

     label6:
        return r27;

        catch java.lang.ClassNotFoundException from label2 to label3 with label4;
        catch java.lang.Exception from label2 to label3 with label5;
    }

    private static void snapToAnchor(java.awt.geom.Point2D, java.awt.geom.Rectangle2D)
    {
        java.awt.geom.Point2D r0;
        java.awt.geom.Rectangle2D r1;
        byte $b0, $b1, $b2, $b3;
        int $i4, $i5, $i6, $i7;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23;

        r0 := @parameter0: java.awt.geom.Point2D;

        r1 := @parameter1: java.awt.geom.Rectangle2D;

        $d0 = virtualinvoke r0.<java.awt.geom.Point2D: double getX()>();

        $d1 = virtualinvoke r1.<java.awt.geom.Rectangle2D: double getX()>();

        $b0 = $d0 cmpg $d1;

        $i4 = (int) $b0;

        if $i4 >= 0 goto label1;

        $d20 = virtualinvoke r1.<java.awt.geom.Rectangle2D: double getX()>();

        $d21 = virtualinvoke r0.<java.awt.geom.Point2D: double getY()>();

        virtualinvoke r0.<java.awt.geom.Point2D: void setLocation(double,double)>($d20, $d21);

        goto label2;

     label1:
        $d2 = virtualinvoke r0.<java.awt.geom.Point2D: double getX()>();

        $d3 = virtualinvoke r1.<java.awt.geom.Rectangle2D: double getX()>();

        $d4 = virtualinvoke r1.<java.awt.geom.Rectangle2D: double getWidth()>();

        $d5 = $d3 + $d4;

        $b1 = $d2 cmpl $d5;

        $i5 = (int) $b1;

        if $i5 <= 0 goto label2;

        $d16 = virtualinvoke r1.<java.awt.geom.Rectangle2D: double getX()>();

        $d17 = virtualinvoke r1.<java.awt.geom.Rectangle2D: double getWidth()>();

        $d18 = $d16 + $d17;

        $d19 = virtualinvoke r0.<java.awt.geom.Point2D: double getY()>();

        virtualinvoke r0.<java.awt.geom.Point2D: void setLocation(double,double)>($d18, $d19);

     label2:
        $d22 = virtualinvoke r0.<java.awt.geom.Point2D: double getY()>();

        $d23 = virtualinvoke r1.<java.awt.geom.Rectangle2D: double getY()>();

        $b3 = $d22 cmpg $d23;

        $i6 = (int) $b3;

        if $i6 >= 0 goto label3;

        $d14 = virtualinvoke r0.<java.awt.geom.Point2D: double getX()>();

        $d15 = virtualinvoke r1.<java.awt.geom.Rectangle2D: double getY()>();

        virtualinvoke r0.<java.awt.geom.Point2D: void setLocation(double,double)>($d14, $d15);

        goto label4;

     label3:
        $d6 = virtualinvoke r0.<java.awt.geom.Point2D: double getY()>();

        $d7 = virtualinvoke r1.<java.awt.geom.Rectangle2D: double getY()>();

        $d8 = virtualinvoke r1.<java.awt.geom.Rectangle2D: double getHeight()>();

        $d9 = $d7 + $d8;

        $b2 = $d6 cmpl $d9;

        $i7 = (int) $b2;

        if $i7 <= 0 goto label4;

        $d10 = virtualinvoke r0.<java.awt.geom.Point2D: double getX()>();

        $d11 = virtualinvoke r1.<java.awt.geom.Rectangle2D: double getY()>();

        $d12 = virtualinvoke r1.<java.awt.geom.Rectangle2D: double getHeight()>();

        $d13 = $d11 + $d12;

        virtualinvoke r0.<java.awt.geom.Point2D: void setLocation(double,double)>($d10, $d13);

     label4:
        return;
    }

    java.awt.Paint getPaint(java.awt.Graphics2D, org.apache.xmlbeans.XmlObject, org.openxmlformats.schemas.drawingml.x2006.main.CTSchemeColor)
    {
        java.awt.Color $r2;
        org.apache.poi.xslf.usermodel.RenderableShape r4;
        org.apache.poi.xslf.usermodel.XSLFSimpleShape $r7;
        org.apache.xmlbeans.XmlObject[] $r1;
        org.apache.poi.xslf.usermodel.XSLFSheet $r8;
        java.awt.Graphics2D r5;
        java.awt.Paint $r10, r11, $r12;
        int i0, i1;
        org.apache.poi.openxml4j.opc.PackagePart $r9;
        org.apache.xmlbeans.XmlObject r0, r3;
        org.openxmlformats.schemas.drawingml.x2006.main.CTSchemeColor r6;

        r4 := @this: org.apache.poi.xslf.usermodel.RenderableShape;

        r5 := @parameter0: java.awt.Graphics2D;

        r0 := @parameter1: org.apache.xmlbeans.XmlObject;

        r6 := @parameter2: org.openxmlformats.schemas.drawingml.x2006.main.CTSchemeColor;

        r11 = null;

        $r1 = interfaceinvoke r0.<org.apache.xmlbeans.XmlObject: org.apache.xmlbeans.XmlObject[] selectPath(java.lang.String)>("*");

        i0 = lengthof $r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r3 = $r1[i1];

        $r7 = r4.<org.apache.poi.xslf.usermodel.RenderableShape: org.apache.poi.xslf.usermodel.XSLFSimpleShape _shape>;

        $r8 = virtualinvoke $r7.<org.apache.poi.xslf.usermodel.XSLFSimpleShape: org.apache.poi.xslf.usermodel.XSLFSheet getSheet()>();

        $r9 = virtualinvoke $r8.<org.apache.poi.xslf.usermodel.XSLFSheet: org.apache.poi.openxml4j.opc.PackagePart getPackagePart()>();

        $r10 = virtualinvoke r4.<org.apache.poi.xslf.usermodel.RenderableShape: java.awt.Paint selectPaint(java.awt.Graphics2D,org.apache.xmlbeans.XmlObject,org.openxmlformats.schemas.drawingml.x2006.main.CTSchemeColor,org.apache.poi.openxml4j.opc.PackagePart)>(r5, r3, r6, $r9);

        r11 = $r10;

        if $r10 == null goto label2;

        goto label3;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        $r2 = <org.apache.poi.xslf.usermodel.RenderableShape: java.awt.Color NO_PAINT>;

        if r11 != $r2 goto label4;

        $r12 = null;

        goto label5;

     label4:
        $r12 = r11;

     label5:
        return $r12;
    }

    java.awt.Paint getFillPaint(java.awt.Graphics2D)
    {
        java.awt.Color $r25;
        org.openxmlformats.schemas.drawingml.x2006.main.CTOfficeStyleSheet $r13, $r18;
        long $l0;
        org.apache.poi.xslf.usermodel.RenderableShape r1;
        org.openxmlformats.schemas.drawingml.x2006.main.CTFillStyleList $r21;
        org.openxmlformats.schemas.drawingml.x2006.main.CTBackgroundFillStyleList $r16;
        org.apache.poi.xslf.usermodel.XSLFSimpleShape $r3, $r5, $r9;
        org.apache.poi.xslf.usermodel.XSLFSheet $r10;
        java.awt.Graphics2D r2;
        int i1, $i2, $i3;
        org.apache.poi.xslf.usermodel.XSLFTheme $r11;
        org.openxmlformats.schemas.drawingml.x2006.main.CTShapeStyle $r6;
        org.apache.poi.openxml4j.opc.PackagePart $r12;
        org.apache.xmlbeans.XmlObject r24;
        org.openxmlformats.schemas.drawingml.x2006.main.CTBaseStyles $r14, $r19;
        org.openxmlformats.schemas.drawingml.x2006.main.CTStyleMatrix $r15, $r20;
        org.apache.poi.xslf.usermodel.RenderableShape$4 $r0;
        org.apache.xmlbeans.XmlObject[] $r17, $r22;
        java.awt.Paint r23, $r26;
        org.openxmlformats.schemas.drawingml.x2006.main.CTStyleMatrixReference $r7;
        java.lang.Object $r4;
        org.openxmlformats.schemas.drawingml.x2006.main.CTSchemeColor $r8;

        r1 := @this: org.apache.poi.xslf.usermodel.RenderableShape;

        r2 := @parameter0: java.awt.Graphics2D;

        $r0 = new org.apache.poi.xslf.usermodel.RenderableShape$4;

        specialinvoke $r0.<org.apache.poi.xslf.usermodel.RenderableShape$4: void <init>(org.apache.poi.xslf.usermodel.RenderableShape,java.awt.Graphics2D)>(r1, r2);

        $r3 = r1.<org.apache.poi.xslf.usermodel.RenderableShape: org.apache.poi.xslf.usermodel.XSLFSimpleShape _shape>;

        virtualinvoke $r3.<org.apache.poi.xslf.usermodel.XSLFSimpleShape: boolean fetchShapeProperty(org.apache.poi.xslf.model.PropertyFetcher)>($r0);

        $r4 = virtualinvoke $r0.<org.apache.poi.xslf.model.PropertyFetcher: java.lang.Object getValue()>();

        r23 = (java.awt.Paint) $r4;

        if r23 != null goto label3;

        $r5 = r1.<org.apache.poi.xslf.usermodel.RenderableShape: org.apache.poi.xslf.usermodel.XSLFSimpleShape _shape>;

        $r6 = virtualinvoke $r5.<org.apache.poi.xslf.usermodel.XSLFSimpleShape: org.openxmlformats.schemas.drawingml.x2006.main.CTShapeStyle getSpStyle()>();

        if $r6 == null goto label3;

        $r7 = interfaceinvoke $r6.<org.openxmlformats.schemas.drawingml.x2006.main.CTShapeStyle: org.openxmlformats.schemas.drawingml.x2006.main.CTStyleMatrixReference getFillRef()>();

        $l0 = interfaceinvoke $r7.<org.openxmlformats.schemas.drawingml.x2006.main.CTStyleMatrixReference: long getIdx()>();

        i1 = (int) $l0;

        $r8 = interfaceinvoke $r7.<org.openxmlformats.schemas.drawingml.x2006.main.CTStyleMatrixReference: org.openxmlformats.schemas.drawingml.x2006.main.CTSchemeColor getSchemeClr()>();

        $r9 = r1.<org.apache.poi.xslf.usermodel.RenderableShape: org.apache.poi.xslf.usermodel.XSLFSimpleShape _shape>;

        $r10 = virtualinvoke $r9.<org.apache.poi.xslf.usermodel.XSLFSimpleShape: org.apache.poi.xslf.usermodel.XSLFSheet getSheet()>();

        $r11 = virtualinvoke $r10.<org.apache.poi.xslf.usermodel.XSLFSheet: org.apache.poi.xslf.usermodel.XSLFTheme getTheme()>();

        r24 = null;

        if i1 < 1 goto label1;

        if i1 > 999 goto label1;

        $r18 = virtualinvoke $r11.<org.apache.poi.xslf.usermodel.XSLFTheme: org.openxmlformats.schemas.drawingml.x2006.main.CTOfficeStyleSheet getXmlObject()>();

        $r19 = interfaceinvoke $r18.<org.openxmlformats.schemas.drawingml.x2006.main.CTOfficeStyleSheet: org.openxmlformats.schemas.drawingml.x2006.main.CTBaseStyles getThemeElements()>();

        $r20 = interfaceinvoke $r19.<org.openxmlformats.schemas.drawingml.x2006.main.CTBaseStyles: org.openxmlformats.schemas.drawingml.x2006.main.CTStyleMatrix getFmtScheme()>();

        $r21 = interfaceinvoke $r20.<org.openxmlformats.schemas.drawingml.x2006.main.CTStyleMatrix: org.openxmlformats.schemas.drawingml.x2006.main.CTFillStyleList getFillStyleLst()>();

        $r22 = interfaceinvoke $r21.<org.openxmlformats.schemas.drawingml.x2006.main.CTFillStyleList: org.apache.xmlbeans.XmlObject[] selectPath(java.lang.String)>("*");

        $i3 = i1 - 1;

        r24 = $r22[$i3];

        goto label2;

     label1:
        if i1 < 1001 goto label2;

        $r13 = virtualinvoke $r11.<org.apache.poi.xslf.usermodel.XSLFTheme: org.openxmlformats.schemas.drawingml.x2006.main.CTOfficeStyleSheet getXmlObject()>();

        $r14 = interfaceinvoke $r13.<org.openxmlformats.schemas.drawingml.x2006.main.CTOfficeStyleSheet: org.openxmlformats.schemas.drawingml.x2006.main.CTBaseStyles getThemeElements()>();

        $r15 = interfaceinvoke $r14.<org.openxmlformats.schemas.drawingml.x2006.main.CTBaseStyles: org.openxmlformats.schemas.drawingml.x2006.main.CTStyleMatrix getFmtScheme()>();

        $r16 = interfaceinvoke $r15.<org.openxmlformats.schemas.drawingml.x2006.main.CTStyleMatrix: org.openxmlformats.schemas.drawingml.x2006.main.CTBackgroundFillStyleList getBgFillStyleLst()>();

        $r17 = interfaceinvoke $r16.<org.openxmlformats.schemas.drawingml.x2006.main.CTBackgroundFillStyleList: org.apache.xmlbeans.XmlObject[] selectPath(java.lang.String)>("*");

        $i2 = i1 - 1001;

        r24 = $r17[$i2];

     label2:
        if r24 == null goto label3;

        $r12 = virtualinvoke $r10.<org.apache.poi.xslf.usermodel.XSLFSheet: org.apache.poi.openxml4j.opc.PackagePart getPackagePart()>();

        r23 = virtualinvoke r1.<org.apache.poi.xslf.usermodel.RenderableShape: java.awt.Paint selectPaint(java.awt.Graphics2D,org.apache.xmlbeans.XmlObject,org.openxmlformats.schemas.drawingml.x2006.main.CTSchemeColor,org.apache.poi.openxml4j.opc.PackagePart)>(r2, r24, $r8, $r12);

     label3:
        $r25 = <org.apache.poi.xslf.usermodel.RenderableShape: java.awt.Color NO_PAINT>;

        if r23 != $r25 goto label4;

        $r26 = null;

        goto label5;

     label4:
        $r26 = r23;

     label5:
        return $r26;
    }

    public java.awt.Paint getLinePaint(java.awt.Graphics2D)
    {
        java.awt.Color $r19;
        org.openxmlformats.schemas.drawingml.x2006.main.CTOfficeStyleSheet $r12;
        long $l0;
        org.apache.poi.xslf.usermodel.RenderableShape r1;
        org.apache.poi.xslf.usermodel.XSLFSimpleShape $r3, $r5, $r9;
        org.apache.poi.xslf.usermodel.XSLFSheet $r10;
        java.awt.Graphics2D r2;
        int i1, $i2;
        org.apache.poi.xslf.usermodel.XSLFTheme $r11;
        org.openxmlformats.schemas.drawingml.x2006.main.CTShapeStyle $r6;
        org.apache.xmlbeans.XmlObject r17;
        org.openxmlformats.schemas.drawingml.x2006.main.CTBaseStyles $r13;
        org.openxmlformats.schemas.drawingml.x2006.main.CTLineStyleList $r15;
        org.openxmlformats.schemas.drawingml.x2006.main.CTStyleMatrix $r14;
        org.apache.poi.xslf.usermodel.RenderableShape$5 $r0;
        org.apache.xmlbeans.XmlObject[] $r16;
        java.awt.Paint r18, $r20;
        org.openxmlformats.schemas.drawingml.x2006.main.CTStyleMatrixReference $r7;
        java.lang.Object $r4;
        org.openxmlformats.schemas.drawingml.x2006.main.CTSchemeColor $r8;

        r1 := @this: org.apache.poi.xslf.usermodel.RenderableShape;

        r2 := @parameter0: java.awt.Graphics2D;

        $r0 = new org.apache.poi.xslf.usermodel.RenderableShape$5;

        specialinvoke $r0.<org.apache.poi.xslf.usermodel.RenderableShape$5: void <init>(org.apache.poi.xslf.usermodel.RenderableShape,java.awt.Graphics2D)>(r1, r2);

        $r3 = r1.<org.apache.poi.xslf.usermodel.RenderableShape: org.apache.poi.xslf.usermodel.XSLFSimpleShape _shape>;

        virtualinvoke $r3.<org.apache.poi.xslf.usermodel.XSLFSimpleShape: boolean fetchShapeProperty(org.apache.poi.xslf.model.PropertyFetcher)>($r0);

        $r4 = virtualinvoke $r0.<org.apache.poi.xslf.model.PropertyFetcher: java.lang.Object getValue()>();

        r18 = (java.awt.Paint) $r4;

        if r18 != null goto label1;

        $r5 = r1.<org.apache.poi.xslf.usermodel.RenderableShape: org.apache.poi.xslf.usermodel.XSLFSimpleShape _shape>;

        $r6 = virtualinvoke $r5.<org.apache.poi.xslf.usermodel.XSLFSimpleShape: org.openxmlformats.schemas.drawingml.x2006.main.CTShapeStyle getSpStyle()>();

        if $r6 == null goto label1;

        $r7 = interfaceinvoke $r6.<org.openxmlformats.schemas.drawingml.x2006.main.CTShapeStyle: org.openxmlformats.schemas.drawingml.x2006.main.CTStyleMatrixReference getLnRef()>();

        $l0 = interfaceinvoke $r7.<org.openxmlformats.schemas.drawingml.x2006.main.CTStyleMatrixReference: long getIdx()>();

        i1 = (int) $l0;

        $r8 = interfaceinvoke $r7.<org.openxmlformats.schemas.drawingml.x2006.main.CTStyleMatrixReference: org.openxmlformats.schemas.drawingml.x2006.main.CTSchemeColor getSchemeClr()>();

        if i1 <= 0 goto label1;

        $r9 = r1.<org.apache.poi.xslf.usermodel.RenderableShape: org.apache.poi.xslf.usermodel.XSLFSimpleShape _shape>;

        $r10 = virtualinvoke $r9.<org.apache.poi.xslf.usermodel.XSLFSimpleShape: org.apache.poi.xslf.usermodel.XSLFSheet getSheet()>();

        $r11 = virtualinvoke $r10.<org.apache.poi.xslf.usermodel.XSLFSheet: org.apache.poi.xslf.usermodel.XSLFTheme getTheme()>();

        $r12 = virtualinvoke $r11.<org.apache.poi.xslf.usermodel.XSLFTheme: org.openxmlformats.schemas.drawingml.x2006.main.CTOfficeStyleSheet getXmlObject()>();

        $r13 = interfaceinvoke $r12.<org.openxmlformats.schemas.drawingml.x2006.main.CTOfficeStyleSheet: org.openxmlformats.schemas.drawingml.x2006.main.CTBaseStyles getThemeElements()>();

        $r14 = interfaceinvoke $r13.<org.openxmlformats.schemas.drawingml.x2006.main.CTBaseStyles: org.openxmlformats.schemas.drawingml.x2006.main.CTStyleMatrix getFmtScheme()>();

        $r15 = interfaceinvoke $r14.<org.openxmlformats.schemas.drawingml.x2006.main.CTStyleMatrix: org.openxmlformats.schemas.drawingml.x2006.main.CTLineStyleList getLnStyleLst()>();

        $r16 = interfaceinvoke $r15.<org.openxmlformats.schemas.drawingml.x2006.main.CTLineStyleList: org.apache.xmlbeans.XmlObject[] selectPath(java.lang.String)>("*");

        $i2 = i1 - 1;

        r17 = $r16[$i2];

        r18 = virtualinvoke r1.<org.apache.poi.xslf.usermodel.RenderableShape: java.awt.Paint getPaint(java.awt.Graphics2D,org.apache.xmlbeans.XmlObject,org.openxmlformats.schemas.drawingml.x2006.main.CTSchemeColor)>(r2, r17, $r8);

     label1:
        $r19 = <org.apache.poi.xslf.usermodel.RenderableShape: java.awt.Color NO_PAINT>;

        if r18 != $r19 goto label2;

        $r20 = null;

        goto label3;

     label2:
        $r20 = r18;

     label3:
        return $r20;
    }

    private static float[] getDashPattern(org.apache.poi.xslf.usermodel.LineDash, float)
    {
        float[] $r2, $r3, $r4, $r5, $r6, $r7, $r8, r9;
        int[] $r1;
        int $i0, $i1;
        float f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16;
        org.apache.poi.xslf.usermodel.LineDash r0;

        r0 := @parameter0: org.apache.poi.xslf.usermodel.LineDash;

        f0 := @parameter1: float;

        r9 = null;

        $r1 = <org.apache.poi.xslf.usermodel.RenderableShape$7: int[] $SwitchMap$org$apache$poi$xslf$usermodel$LineDash>;

        $i0 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.LineDash: int ordinal()>();

        $i1 = $r1[$i0];

        tableswitch($i1)
        {
            case 1: goto label1;
            case 2: goto label2;
            case 3: goto label3;
            case 4: goto label4;
            case 5: goto label5;
            case 6: goto label6;
            case 7: goto label7;
            default: goto label8;
        };

     label1:
        $r8 = newarray (float)[2];

        $r8[0] = f0;

        $r8[1] = f0;

        r9 = $r8;

        goto label8;

     label2:
        $r7 = newarray (float)[2];

        $f15 = 2.0F * f0;

        $r7[0] = $f15;

        $f16 = 2.0F * f0;

        $r7[1] = $f16;

        r9 = $r7;

        goto label8;

     label3:
        $r6 = newarray (float)[2];

        $f13 = 3.0F * f0;

        $r6[0] = $f13;

        $f14 = 4.0F * f0;

        $r6[1] = $f14;

        r9 = $r6;

        goto label8;

     label4:
        $r5 = newarray (float)[4];

        $f10 = 4.0F * f0;

        $r5[0] = $f10;

        $f11 = 3.0F * f0;

        $r5[1] = $f11;

        $r5[2] = f0;

        $f12 = 3.0F * f0;

        $r5[3] = $f12;

        r9 = $r5;

        goto label8;

     label5:
        $r4 = newarray (float)[2];

        $f8 = 8.0F * f0;

        $r4[0] = $f8;

        $f9 = 3.0F * f0;

        $r4[1] = $f9;

        r9 = $r4;

        goto label8;

     label6:
        $r3 = newarray (float)[4];

        $f5 = 8.0F * f0;

        $r3[0] = $f5;

        $f6 = 3.0F * f0;

        $r3[1] = $f6;

        $r3[2] = f0;

        $f7 = 3.0F * f0;

        $r3[3] = $f7;

        r9 = $r3;

        goto label8;

     label7:
        $r2 = newarray (float)[6];

        $f1 = 8.0F * f0;

        $r2[0] = $f1;

        $f2 = 3.0F * f0;

        $r2[1] = $f2;

        $r2[2] = f0;

        $f3 = 3.0F * f0;

        $r2[3] = $f3;

        $r2[4] = f0;

        $f4 = 3.0F * f0;

        $r2[5] = $f4;

        r9 = $r2;

     label8:
        return r9;
    }

    public java.awt.Stroke applyStroke(java.awt.Graphics2D)
    {
        float[] r8;
        org.apache.poi.xslf.usermodel.RenderableShape r0;
        org.apache.poi.xslf.usermodel.XSLFSimpleShape $r1, $r2, $r4;
        byte $b0, b3;
        java.awt.Graphics2D r6;
        int[] $r7;
        org.apache.poi.xslf.usermodel.LineCap $r5;
        int $i1, $i2;
        double $d0;
        float f0, $f1;
        org.apache.poi.xslf.usermodel.LineDash $r3;
        java.awt.BasicStroke $r9;

        r0 := @this: org.apache.poi.xslf.usermodel.RenderableShape;

        r6 := @parameter0: java.awt.Graphics2D;

        $r1 = r0.<org.apache.poi.xslf.usermodel.RenderableShape: org.apache.poi.xslf.usermodel.XSLFSimpleShape _shape>;

        $d0 = virtualinvoke $r1.<org.apache.poi.xslf.usermodel.XSLFSimpleShape: double getLineWidth()>();

        f0 = (float) $d0;

        $b0 = f0 cmpl 0.0F;

        if $b0 != 0 goto label1;

        f0 = 0.25F;

     label1:
        $r2 = r0.<org.apache.poi.xslf.usermodel.RenderableShape: org.apache.poi.xslf.usermodel.XSLFSimpleShape _shape>;

        $r3 = virtualinvoke $r2.<org.apache.poi.xslf.usermodel.XSLFSimpleShape: org.apache.poi.xslf.usermodel.LineDash getLineDash()>();

        r8 = null;

        if $r3 == null goto label2;

        r8 = staticinvoke <org.apache.poi.xslf.usermodel.RenderableShape: float[] getDashPattern(org.apache.poi.xslf.usermodel.LineDash,float)>($r3, f0);

     label2:
        b3 = 0;

        $r4 = r0.<org.apache.poi.xslf.usermodel.RenderableShape: org.apache.poi.xslf.usermodel.XSLFSimpleShape _shape>;

        $r5 = virtualinvoke $r4.<org.apache.poi.xslf.usermodel.XSLFSimpleShape: org.apache.poi.xslf.usermodel.LineCap getLineCap()>();

        if $r5 == null goto label6;

        $r7 = <org.apache.poi.xslf.usermodel.RenderableShape$7: int[] $SwitchMap$org$apache$poi$xslf$usermodel$LineCap>;

        $i1 = virtualinvoke $r5.<org.apache.poi.xslf.usermodel.LineCap: int ordinal()>();

        $i2 = $r7[$i1];

        lookupswitch($i2)
        {
            case 1: goto label3;
            case 2: goto label4;
            default: goto label5;
        };

     label3:
        b3 = 1;

        goto label6;

     label4:
        b3 = 2;

        goto label6;

     label5:
        b3 = 0;

     label6:
        $r9 = new java.awt.BasicStroke;

        $f1 = staticinvoke <java.lang.Math: float max(float,float)>(1.0F, f0);

        specialinvoke $r9.<java.awt.BasicStroke: void <init>(float,int,int,float,float[],float)>(f0, b3, 1, $f1, r8, 0.0F);

        virtualinvoke r6.<java.awt.Graphics2D: void setStroke(java.awt.Stroke)>($r9);

        return $r9;
    }

    public void render(java.awt.Graphics2D)
    {
        org.apache.poi.xslf.usermodel.XSLFShadow $r4;
        org.apache.poi.xslf.usermodel.RenderableShape r0;
        org.apache.poi.xslf.model.geom.Outline r21, r22, r23;
        org.apache.poi.xslf.usermodel.XSLFSimpleShape $r3, $r7;
        java.awt.Graphics2D r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        org.apache.poi.xslf.model.geom.Path $r10, $r14, $r18;
        java.awt.Shape $r11, $r15, $r19, $r20;
        java.util.Iterator $r8, $r12, $r16;
        java.util.Collection $r2;
        java.awt.Paint $r5, $r6;
        java.lang.Object $r9, $r13, $r17;

        r0 := @this: org.apache.poi.xslf.usermodel.RenderableShape;

        r1 := @parameter0: java.awt.Graphics2D;

        $r2 = specialinvoke r0.<org.apache.poi.xslf.usermodel.RenderableShape: java.util.Collection computeOutlines(java.awt.Graphics2D)>(r1);

        $r3 = r0.<org.apache.poi.xslf.usermodel.RenderableShape: org.apache.poi.xslf.usermodel.XSLFSimpleShape _shape>;

        $r4 = virtualinvoke $r3.<org.apache.poi.xslf.usermodel.XSLFSimpleShape: org.apache.poi.xslf.usermodel.XSLFShadow getShadow()>();

        $r5 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.RenderableShape: java.awt.Paint getFillPaint(java.awt.Graphics2D)>(r1);

        $r6 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.RenderableShape: java.awt.Paint getLinePaint(java.awt.Graphics2D)>(r1);

        virtualinvoke r0.<org.apache.poi.xslf.usermodel.RenderableShape: java.awt.Stroke applyStroke(java.awt.Graphics2D)>(r1);

        if $r4 == null goto label04;

        $r16 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>();

     label01:
        $z4 = interfaceinvoke $r16.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label04;

        $r17 = interfaceinvoke $r16.<java.util.Iterator: java.lang.Object next()>();

        r21 = (org.apache.poi.xslf.model.geom.Outline) $r17;

        $r18 = virtualinvoke r21.<org.apache.poi.xslf.model.geom.Outline: org.apache.poi.xslf.model.geom.Path getPath()>();

        $z5 = virtualinvoke $r18.<org.apache.poi.xslf.model.geom.Path: boolean isFilled()>();

        if $z5 == 0 goto label03;

        if $r5 == null goto label02;

        $r20 = virtualinvoke r21.<org.apache.poi.xslf.model.geom.Outline: java.awt.Shape getOutline()>();

        virtualinvoke $r4.<org.apache.poi.xslf.usermodel.XSLFShadow: void fill(java.awt.Graphics2D,java.awt.Shape)>(r1, $r20);

        goto label03;

     label02:
        if $r6 == null goto label03;

        $r19 = virtualinvoke r21.<org.apache.poi.xslf.model.geom.Outline: java.awt.Shape getOutline()>();

        virtualinvoke $r4.<org.apache.poi.xslf.usermodel.XSLFShadow: void draw(java.awt.Graphics2D,java.awt.Shape)>(r1, $r19);

     label03:
        goto label01;

     label04:
        if $r5 == null goto label07;

        $r12 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>();

     label05:
        $z2 = interfaceinvoke $r12.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label07;

        $r13 = interfaceinvoke $r12.<java.util.Iterator: java.lang.Object next()>();

        r22 = (org.apache.poi.xslf.model.geom.Outline) $r13;

        $r14 = virtualinvoke r22.<org.apache.poi.xslf.model.geom.Outline: org.apache.poi.xslf.model.geom.Path getPath()>();

        $z3 = virtualinvoke $r14.<org.apache.poi.xslf.model.geom.Path: boolean isFilled()>();

        if $z3 == 0 goto label06;

        virtualinvoke r1.<java.awt.Graphics2D: void setPaint(java.awt.Paint)>($r5);

        $r15 = virtualinvoke r22.<org.apache.poi.xslf.model.geom.Outline: java.awt.Shape getOutline()>();

        virtualinvoke r1.<java.awt.Graphics2D: void fill(java.awt.Shape)>($r15);

     label06:
        goto label05;

     label07:
        $r7 = r0.<org.apache.poi.xslf.usermodel.RenderableShape: org.apache.poi.xslf.usermodel.XSLFSimpleShape _shape>;

        virtualinvoke $r7.<org.apache.poi.xslf.usermodel.XSLFSimpleShape: void drawContent(java.awt.Graphics2D)>(r1);

        if $r6 == null goto label10;

        $r8 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>();

     label08:
        $z0 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label10;

        $r9 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        r23 = (org.apache.poi.xslf.model.geom.Outline) $r9;

        $r10 = virtualinvoke r23.<org.apache.poi.xslf.model.geom.Outline: org.apache.poi.xslf.model.geom.Path getPath()>();

        $z1 = virtualinvoke $r10.<org.apache.poi.xslf.model.geom.Path: boolean isStroked()>();

        if $z1 == 0 goto label09;

        virtualinvoke r1.<java.awt.Graphics2D: void setPaint(java.awt.Paint)>($r6);

        $r11 = virtualinvoke r23.<org.apache.poi.xslf.model.geom.Outline: java.awt.Shape getOutline()>();

        virtualinvoke r1.<java.awt.Graphics2D: void draw(java.awt.Shape)>($r11);

     label09:
        goto label08;

     label10:
        return;
    }

    private java.util.Collection computeOutlines(java.awt.Graphics2D)
    {
        org.apache.poi.xslf.model.geom.CustomGeometry $r3;
        java.awt.geom.Rectangle2D $r5;
        org.apache.poi.xslf.usermodel.RenderableShape r1;
        org.apache.poi.xslf.model.geom.Outline $r15;
        org.apache.poi.xslf.usermodel.XSLFSimpleShape $r2;
        byte $b1, $b4, $b7, $b9;
        java.awt.geom.Rectangle2D$Double $r9;
        boolean $z0;
        org.apache.poi.xslf.model.geom.Path r8;
        java.awt.Shape $r14;
        org.apache.poi.xslf.usermodel.RenderableShape$6 $r11;
        java.awt.geom.AffineTransform $r13;
        java.awt.geom.GeneralPath $r12;
        org.apache.poi.xslf.model.geom.Context $r10;
        long $l0, $l2, $l3, $l5, $l6, $l8, $l10, $l11;
        java.util.ArrayList $r0;
        java.awt.Graphics2D r4;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, d11, d12;
        java.util.Iterator $r6;
        java.lang.Object $r7;

        r1 := @this: org.apache.poi.xslf.usermodel.RenderableShape;

        r4 := @parameter0: java.awt.Graphics2D;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r2 = r1.<org.apache.poi.xslf.usermodel.RenderableShape: org.apache.poi.xslf.usermodel.XSLFSimpleShape _shape>;

        $r3 = virtualinvoke $r2.<org.apache.poi.xslf.usermodel.XSLFSimpleShape: org.apache.poi.xslf.model.geom.CustomGeometry getGeometry()>();

        if $r3 != null goto label01;

        return $r0;

     label01:
        $r5 = virtualinvoke r1.<org.apache.poi.xslf.usermodel.RenderableShape: java.awt.geom.Rectangle2D getAnchor(java.awt.Graphics2D)>(r4);

        $r6 = virtualinvoke $r3.<org.apache.poi.xslf.model.geom.CustomGeometry: java.util.Iterator iterator()>();

     label02:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label11;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r8 = (org.apache.poi.xslf.model.geom.Path) $r7;

        $l0 = virtualinvoke r8.<org.apache.poi.xslf.model.geom.Path: long getW()>();

        $b1 = $l0 cmp -1L;

        if $b1 != 0 goto label03;

        $d8 = virtualinvoke $r5.<java.awt.geom.Rectangle2D: double getWidth()>();

        $d9 = $d8 * 12700.0;

        goto label04;

     label03:
        $l2 = virtualinvoke r8.<org.apache.poi.xslf.model.geom.Path: long getW()>();

        $d9 = (double) $l2;

     label04:
        d0 = $d9;

        $l3 = virtualinvoke r8.<org.apache.poi.xslf.model.geom.Path: long getH()>();

        $b4 = $l3 cmp -1L;

        if $b4 != 0 goto label05;

        $d7 = virtualinvoke $r5.<java.awt.geom.Rectangle2D: double getHeight()>();

        $d10 = $d7 * 12700.0;

        goto label06;

     label05:
        $l5 = virtualinvoke r8.<org.apache.poi.xslf.model.geom.Path: long getH()>();

        $d10 = (double) $l5;

     label06:
        $r9 = new java.awt.geom.Rectangle2D$Double;

        specialinvoke $r9.<java.awt.geom.Rectangle2D$Double: void <init>(double,double,double,double)>(0.0, 0.0, d0, $d10);

        $r10 = new org.apache.poi.xslf.model.geom.Context;

        $r11 = new org.apache.poi.xslf.usermodel.RenderableShape$6;

        specialinvoke $r11.<org.apache.poi.xslf.usermodel.RenderableShape$6: void <init>(org.apache.poi.xslf.usermodel.RenderableShape)>(r1);

        specialinvoke $r10.<org.apache.poi.xslf.model.geom.Context: void <init>(org.apache.poi.xslf.model.geom.CustomGeometry,java.awt.geom.Rectangle2D,org.apache.poi.xslf.model.geom.IAdjustableShape)>($r3, $r9, $r11);

        $r12 = virtualinvoke r8.<org.apache.poi.xslf.model.geom.Path: java.awt.geom.GeneralPath getPath(org.apache.poi.xslf.model.geom.Context)>($r10);

        $r13 = new java.awt.geom.AffineTransform;

        specialinvoke $r13.<java.awt.geom.AffineTransform: void <init>()>();

        $d1 = virtualinvoke $r5.<java.awt.geom.Rectangle2D: double getX()>();

        $d2 = virtualinvoke $r5.<java.awt.geom.Rectangle2D: double getY()>();

        virtualinvoke $r13.<java.awt.geom.AffineTransform: void translate(double,double)>($d1, $d2);

        $l6 = virtualinvoke r8.<org.apache.poi.xslf.model.geom.Path: long getW()>();

        $b7 = $l6 cmp -1L;

        if $b7 == 0 goto label07;

        $d5 = virtualinvoke $r5.<java.awt.geom.Rectangle2D: double getWidth()>();

        $l11 = virtualinvoke r8.<org.apache.poi.xslf.model.geom.Path: long getW()>();

        $d6 = (double) $l11;

        d11 = $d5 / $d6;

        goto label08;

     label07:
        d11 = 7.874015748031496E-5;

     label08:
        $l8 = virtualinvoke r8.<org.apache.poi.xslf.model.geom.Path: long getH()>();

        $b9 = $l8 cmp -1L;

        if $b9 == 0 goto label09;

        $d3 = virtualinvoke $r5.<java.awt.geom.Rectangle2D: double getHeight()>();

        $l10 = virtualinvoke r8.<org.apache.poi.xslf.model.geom.Path: long getH()>();

        $d4 = (double) $l10;

        d12 = $d3 / $d4;

        goto label10;

     label09:
        d12 = 7.874015748031496E-5;

     label10:
        virtualinvoke $r13.<java.awt.geom.AffineTransform: void scale(double,double)>(d11, d12);

        $r14 = virtualinvoke $r13.<java.awt.geom.AffineTransform: java.awt.Shape createTransformedShape(java.awt.Shape)>($r12);

        $r15 = new org.apache.poi.xslf.model.geom.Outline;

        specialinvoke $r15.<org.apache.poi.xslf.model.geom.Outline: void <init>(java.awt.Shape,org.apache.poi.xslf.model.geom.Path)>($r14, r8);

        interfaceinvoke $r0.<java.util.Collection: boolean add(java.lang.Object)>($r15);

        goto label02;

     label11:
        return $r0;
    }

    public java.awt.geom.Rectangle2D getAnchor(java.awt.Graphics2D)
    {
        java.awt.Shape $r7;
        java.awt.geom.Rectangle2D $r2, r8;
        org.apache.poi.xslf.usermodel.RenderableShape r0;
        java.awt.geom.AffineTransform r6;
        org.apache.poi.xslf.usermodel.XSLFRenderingHint $r4;
        org.apache.poi.xslf.usermodel.XSLFSimpleShape $r1;
        java.awt.Graphics2D r3;
        java.lang.Object $r5;

        r0 := @this: org.apache.poi.xslf.usermodel.RenderableShape;

        r3 := @parameter0: java.awt.Graphics2D;

        $r1 = r0.<org.apache.poi.xslf.usermodel.RenderableShape: org.apache.poi.xslf.usermodel.XSLFSimpleShape _shape>;

        $r2 = virtualinvoke $r1.<org.apache.poi.xslf.usermodel.XSLFSimpleShape: java.awt.geom.Rectangle2D getAnchor()>();

        r8 = $r2;

        if r3 != null goto label1;

        return $r2;

     label1:
        $r4 = <org.apache.poi.xslf.usermodel.XSLFRenderingHint: org.apache.poi.xslf.usermodel.XSLFRenderingHint GROUP_TRANSFORM>;

        $r5 = virtualinvoke r3.<java.awt.Graphics2D: java.lang.Object getRenderingHint(java.awt.RenderingHints$Key)>($r4);

        r6 = (java.awt.geom.AffineTransform) $r5;

        if r6 == null goto label2;

        $r7 = virtualinvoke r6.<java.awt.geom.AffineTransform: java.awt.Shape createTransformedShape(java.awt.Shape)>($r2);

        r8 = interfaceinvoke $r7.<java.awt.Shape: java.awt.geom.Rectangle2D getBounds2D()>();

     label2:
        return r8;
    }

    static org.apache.poi.xslf.usermodel.XSLFSimpleShape access$000(org.apache.poi.xslf.usermodel.RenderableShape)
    {
        org.apache.poi.xslf.usermodel.XSLFSimpleShape $r1;
        org.apache.poi.xslf.usermodel.RenderableShape r0;

        r0 := @parameter0: org.apache.poi.xslf.usermodel.RenderableShape;

        $r1 = r0.<org.apache.poi.xslf.usermodel.RenderableShape: org.apache.poi.xslf.usermodel.XSLFSimpleShape _shape>;

        return $r1;
    }

    static void <clinit>()
    {
        java.awt.Color $r0;

        $r0 = new java.awt.Color;

        specialinvoke $r0.<java.awt.Color: void <init>(int,int,int,int)>(255, 255, 255, 0);

        <org.apache.poi.xslf.usermodel.RenderableShape: java.awt.Color NO_PAINT> = $r0;

        return;
    }
}
