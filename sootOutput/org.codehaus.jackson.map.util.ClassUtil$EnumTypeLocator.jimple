class org.codehaus.jackson.map.util.ClassUtil$EnumTypeLocator extends java.lang.Object
{
    static final org.codehaus.jackson.map.util.ClassUtil$EnumTypeLocator instance;
    private final java.lang.reflect.Field enumSetTypeField;
    private final java.lang.reflect.Field enumMapTypeField;

    private void <init>()
    {
        org.codehaus.jackson.map.util.ClassUtil$EnumTypeLocator r0;
        java.lang.reflect.Field $r1, $r2;

        r0 := @this: org.codehaus.jackson.map.util.ClassUtil$EnumTypeLocator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = staticinvoke <org.codehaus.jackson.map.util.ClassUtil$EnumTypeLocator: java.lang.reflect.Field locateField(java.lang.Class,java.lang.String,java.lang.Class)>(class "Ljava/util/EnumSet;", "elementType", class "Ljava/lang/Class;");

        r0.<org.codehaus.jackson.map.util.ClassUtil$EnumTypeLocator: java.lang.reflect.Field enumSetTypeField> = $r1;

        $r2 = staticinvoke <org.codehaus.jackson.map.util.ClassUtil$EnumTypeLocator: java.lang.reflect.Field locateField(java.lang.Class,java.lang.String,java.lang.Class)>(class "Ljava/util/EnumMap;", "elementType", class "Ljava/lang/Class;");

        r0.<org.codehaus.jackson.map.util.ClassUtil$EnumTypeLocator: java.lang.reflect.Field enumMapTypeField> = $r2;

        return;
    }

    public java.lang.Class enumTypeFor(java.util.EnumSet)
    {
        java.lang.IllegalStateException $r2;
        org.codehaus.jackson.map.util.ClassUtil$EnumTypeLocator r0;
        java.lang.Object $r5;
        java.lang.Class $r6;
        java.lang.reflect.Field $r1, $r4;
        java.util.EnumSet r3;

        r0 := @this: org.codehaus.jackson.map.util.ClassUtil$EnumTypeLocator;

        r3 := @parameter0: java.util.EnumSet;

        $r1 = r0.<org.codehaus.jackson.map.util.ClassUtil$EnumTypeLocator: java.lang.reflect.Field enumSetTypeField>;

        if $r1 == null goto label1;

        $r4 = r0.<org.codehaus.jackson.map.util.ClassUtil$EnumTypeLocator: java.lang.reflect.Field enumSetTypeField>;

        $r5 = specialinvoke r0.<org.codehaus.jackson.map.util.ClassUtil$EnumTypeLocator: java.lang.Object get(java.lang.Object,java.lang.reflect.Field)>(r3, $r4);

        $r6 = (java.lang.Class) $r5;

        return $r6;

     label1:
        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Can not figure out type for EnumSet (odd JDK platform?)");

        throw $r2;
    }

    public java.lang.Class enumTypeFor(java.util.EnumMap)
    {
        java.lang.IllegalStateException $r2;
        org.codehaus.jackson.map.util.ClassUtil$EnumTypeLocator r0;
        java.util.EnumMap r3;
        java.lang.Object $r5;
        java.lang.Class $r6;
        java.lang.reflect.Field $r1, $r4;

        r0 := @this: org.codehaus.jackson.map.util.ClassUtil$EnumTypeLocator;

        r3 := @parameter0: java.util.EnumMap;

        $r1 = r0.<org.codehaus.jackson.map.util.ClassUtil$EnumTypeLocator: java.lang.reflect.Field enumMapTypeField>;

        if $r1 == null goto label1;

        $r4 = r0.<org.codehaus.jackson.map.util.ClassUtil$EnumTypeLocator: java.lang.reflect.Field enumMapTypeField>;

        $r5 = specialinvoke r0.<org.codehaus.jackson.map.util.ClassUtil$EnumTypeLocator: java.lang.Object get(java.lang.Object,java.lang.reflect.Field)>(r3, $r4);

        $r6 = (java.lang.Class) $r5;

        return $r6;

     label1:
        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Can not figure out type for EnumMap (odd JDK platform?)");

        throw $r2;
    }

    private java.lang.Object get(java.lang.Object, java.lang.reflect.Field)
    {
        org.codehaus.jackson.map.util.ClassUtil$EnumTypeLocator r5;
        java.lang.Object r1, $r2;
        java.lang.reflect.Field r0;
        java.lang.IllegalArgumentException $r4;
        java.lang.Exception $r3;

        r5 := @this: org.codehaus.jackson.map.util.ClassUtil$EnumTypeLocator;

        r1 := @parameter0: java.lang.Object;

        r0 := @parameter1: java.lang.reflect.Field;

     label1:
        $r2 = virtualinvoke r0.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(r1);

     label2:
        return $r2;

     label3:
        $r3 := @caughtexception;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.Throwable)>($r3);

        throw $r4;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    private static java.lang.reflect.Field locateField(java.lang.Class, java.lang.String, java.lang.Class)
    {
        java.lang.Throwable $r7;
        int i0, i1, i2, i3;
        java.lang.String r4, $r5;
        boolean $z0;
        java.lang.reflect.Field r8, r9, r10;
        java.lang.reflect.Field[] $r1;
        java.lang.Class r0, $r2, r3, $r6;

        r0 := @parameter0: java.lang.Class;

        r4 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.Class;

        r8 = null;

        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>();

        i0 = lengthof $r1;

        i1 = 0;

     label01:
        if i1 >= i0 goto label03;

        r9 = $r1[i1];

        $r5 = virtualinvoke r9.<java.lang.reflect.Field: java.lang.String getName()>();

        $z0 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z0 == 0 goto label02;

        $r6 = virtualinvoke r9.<java.lang.reflect.Field: java.lang.Class getType()>();

        if $r6 != r3 goto label02;

        r8 = r9;

        goto label03;

     label02:
        i1 = i1 + 1;

        goto label01;

     label03:
        if r8 != null goto label07;

        i2 = lengthof $r1;

        i3 = 0;

     label04:
        if i3 >= i2 goto label07;

        r10 = $r1[i3];

        $r2 = virtualinvoke r10.<java.lang.reflect.Field: java.lang.Class getType()>();

        if $r2 != r3 goto label06;

        if r8 == null goto label05;

        return null;

     label05:
        r8 = r10;

     label06:
        i3 = i3 + 1;

        goto label04;

     label07:
        if r8 == null goto label11;

     label08:
        virtualinvoke r8.<java.lang.reflect.Field: void setAccessible(boolean)>(1);

     label09:
        goto label11;

     label10:
        $r7 := @caughtexception;

     label11:
        return r8;

        catch java.lang.Throwable from label08 to label09 with label10;
    }

    static void <clinit>()
    {
        org.codehaus.jackson.map.util.ClassUtil$EnumTypeLocator $r0;

        $r0 = new org.codehaus.jackson.map.util.ClassUtil$EnumTypeLocator;

        specialinvoke $r0.<org.codehaus.jackson.map.util.ClassUtil$EnumTypeLocator: void <init>()>();

        <org.codehaus.jackson.map.util.ClassUtil$EnumTypeLocator: org.codehaus.jackson.map.util.ClassUtil$EnumTypeLocator instance> = $r0;

        return;
    }
}
