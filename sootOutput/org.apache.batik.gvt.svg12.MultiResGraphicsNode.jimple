public class org.apache.batik.gvt.svg12.MultiResGraphicsNode extends org.apache.batik.gvt.AbstractGraphicsNode implements org.apache.batik.util.SVGConstants
{
    java.lang.ref.SoftReference[] srcs;
    org.w3c.dom.Element[] srcElems;
    java.awt.Dimension[] minSz;
    java.awt.Dimension[] maxSz;
    java.awt.geom.Rectangle2D bounds;
    org.apache.batik.bridge.BridgeContext ctx;
    org.w3c.dom.Element multiImgElem;

    public void <init>(org.w3c.dom.Element, java.awt.geom.Rectangle2D, org.w3c.dom.Element[], java.awt.Dimension[], java.awt.Dimension[], org.apache.batik.bridge.BridgeContext)
    {
        java.awt.geom.Rectangle2D r16;
        org.apache.batik.gvt.svg12.MultiResGraphicsNode r0;
        int $i0, $i1, $i2, $i3, $i4, i5;
        java.lang.ref.SoftReference[] $r15;
        org.apache.batik.bridge.BridgeContext r6;
        java.awt.Dimension[] $r4, $r5, r9, $r11, r12, $r14;
        java.awt.Dimension $r10, $r13;
        org.w3c.dom.Element r1, $r7;
        org.w3c.dom.Element[] r2, $r3, $r8;

        r0 := @this: org.apache.batik.gvt.svg12.MultiResGraphicsNode;

        r1 := @parameter0: org.w3c.dom.Element;

        r16 := @parameter1: java.awt.geom.Rectangle2D;

        r2 := @parameter2: org.w3c.dom.Element[];

        r9 := @parameter3: java.awt.Dimension[];

        r12 := @parameter4: java.awt.Dimension[];

        r6 := @parameter5: org.apache.batik.bridge.BridgeContext;

        specialinvoke r0.<org.apache.batik.gvt.AbstractGraphicsNode: void <init>()>();

        r0.<org.apache.batik.gvt.svg12.MultiResGraphicsNode: org.w3c.dom.Element multiImgElem> = r1;

        $i0 = lengthof r2;

        $r3 = newarray (org.w3c.dom.Element)[$i0];

        r0.<org.apache.batik.gvt.svg12.MultiResGraphicsNode: org.w3c.dom.Element[] srcElems> = $r3;

        $i1 = lengthof r2;

        $r4 = newarray (java.awt.Dimension)[$i1];

        r0.<org.apache.batik.gvt.svg12.MultiResGraphicsNode: java.awt.Dimension[] minSz> = $r4;

        $i2 = lengthof r2;

        $r5 = newarray (java.awt.Dimension)[$i2];

        r0.<org.apache.batik.gvt.svg12.MultiResGraphicsNode: java.awt.Dimension[] maxSz> = $r5;

        r0.<org.apache.batik.gvt.svg12.MultiResGraphicsNode: org.apache.batik.bridge.BridgeContext ctx> = r6;

        i5 = 0;

        goto label2;

     label1:
        $r8 = r0.<org.apache.batik.gvt.svg12.MultiResGraphicsNode: org.w3c.dom.Element[] srcElems>;

        $r7 = r2[i5];

        $r8[i5] = $r7;

        $r11 = r0.<org.apache.batik.gvt.svg12.MultiResGraphicsNode: java.awt.Dimension[] minSz>;

        $r10 = r9[i5];

        $r11[i5] = $r10;

        $r14 = r0.<org.apache.batik.gvt.svg12.MultiResGraphicsNode: java.awt.Dimension[] maxSz>;

        $r13 = r12[i5];

        $r14[i5] = $r13;

        i5 = i5 + 1;

     label2:
        $i3 = lengthof r2;

        if i5 < $i3 goto label1;

        $i4 = lengthof r2;

        $r15 = newarray (java.lang.ref.SoftReference)[$i4];

        r0.<org.apache.batik.gvt.svg12.MultiResGraphicsNode: java.lang.ref.SoftReference[] srcs> = $r15;

        r0.<org.apache.batik.gvt.svg12.MultiResGraphicsNode: java.awt.geom.Rectangle2D bounds> = r16;

        return;
    }

    public void primitivePaint(java.awt.Graphics2D)
    {
        java.awt.geom.Rectangle2D $r3, $r21;
        org.apache.batik.gvt.svg12.MultiResGraphicsNode r2;
        byte $b0, $b2, $b4, $b5, $b6;
        org.apache.batik.gvt.GraphicsNode $r20;
        java.awt.geom.AffineTransform $r1, $r22, $r25;
        java.awt.Dimension[] $r4, $r5, $r8, $r9, $r12, $r14, $r16, $r18, $r24;
        java.awt.Dimension $r6, $r7, $r10, $r11, $r13, $r15, $r17, $r19;
        java.awt.Graphics2D r0;
        int $i1, $i3, $i7, $i8, i9, i10, i11, $i12, $i14, $i15, $i16, $i17, $i19, $i21, $i22, $i23;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, d17, $d18, $d19, $d20, $d21, $d22, $d23, d24, $d25, d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38, $d39, $d40, $d41, $d42, $d43, $d44, $d45, $d46, $d47, $d48, $d49, $d50, d51, d52, d53, d54, d55, d56, d57;

        r2 := @this: org.apache.batik.gvt.svg12.MultiResGraphicsNode;

        r0 := @parameter0: java.awt.Graphics2D;

        $r1 = virtualinvoke r0.<java.awt.Graphics2D: java.awt.geom.AffineTransform getTransform()>();

        $d0 = virtualinvoke $r1.<java.awt.geom.AffineTransform: double getShearY()>();

        $d1 = virtualinvoke $r1.<java.awt.geom.AffineTransform: double getShearY()>();

        $d2 = $d0 * $d1;

        $d3 = virtualinvoke $r1.<java.awt.geom.AffineTransform: double getScaleX()>();

        $d4 = virtualinvoke $r1.<java.awt.geom.AffineTransform: double getScaleX()>();

        $d5 = $d3 * $d4;

        $d6 = $d2 + $d5;

        $d7 = staticinvoke <java.lang.Math: double sqrt(double)>($d6);

        $d8 = virtualinvoke $r1.<java.awt.geom.AffineTransform: double getShearX()>();

        $d9 = virtualinvoke $r1.<java.awt.geom.AffineTransform: double getShearX()>();

        $d10 = $d8 * $d9;

        $d11 = virtualinvoke $r1.<java.awt.geom.AffineTransform: double getScaleY()>();

        $d12 = virtualinvoke $r1.<java.awt.geom.AffineTransform: double getScaleY()>();

        $d13 = $d11 * $d12;

        $d14 = $d10 + $d13;

        $d15 = staticinvoke <java.lang.Math: double sqrt(double)>($d14);

        $i14 = (int) -1;

        i9 = $i14;

        $r3 = r2.<org.apache.batik.gvt.svg12.MultiResGraphicsNode: java.awt.geom.Rectangle2D bounds>;

        $d16 = virtualinvoke $r3.<java.awt.geom.RectangularShape: double getWidth()>();

        d17 = $d16 * $d7;

        $r4 = r2.<org.apache.batik.gvt.svg12.MultiResGraphicsNode: java.awt.Dimension[] minSz>;

        $r7 = $r4[0];

        $r5 = r2.<org.apache.batik.gvt.svg12.MultiResGraphicsNode: java.awt.Dimension[] maxSz>;

        $r6 = $r5[0];

        d51 = virtualinvoke r2.<org.apache.batik.gvt.svg12.MultiResGraphicsNode: double calcDist(double,java.awt.Dimension,java.awt.Dimension)>(d17, $r7, $r6);

        i10 = 0;

        i11 = 0;

        goto label07;

     label01:
        $r8 = r2.<org.apache.batik.gvt.svg12.MultiResGraphicsNode: java.awt.Dimension[] minSz>;

        $r11 = $r8[i11];

        $r9 = r2.<org.apache.batik.gvt.svg12.MultiResGraphicsNode: java.awt.Dimension[] maxSz>;

        $r10 = $r9[i11];

        $d18 = virtualinvoke r2.<org.apache.batik.gvt.svg12.MultiResGraphicsNode: double calcDist(double,java.awt.Dimension,java.awt.Dimension)>(d17, $r11, $r10);

        $b0 = $d18 cmpg d51;

        $i15 = (int) $b0;

        if $i15 >= 0 goto label02;

        d51 = $d18;

        i10 = i11;

     label02:
        $r12 = r2.<org.apache.batik.gvt.svg12.MultiResGraphicsNode: java.awt.Dimension[] minSz>;

        $r13 = $r12[i11];

        if $r13 == null goto label03;

        $r18 = r2.<org.apache.batik.gvt.svg12.MultiResGraphicsNode: java.awt.Dimension[] minSz>;

        $r19 = $r18[i11];

        $i3 = $r19.<java.awt.Dimension: int width>;

        $d20 = (double) $i3;

        $b4 = d17 cmpl $d20;

        $i16 = (int) $b4;

        if $i16 < 0 goto label06;

     label03:
        $r14 = r2.<org.apache.batik.gvt.svg12.MultiResGraphicsNode: java.awt.Dimension[] maxSz>;

        $r15 = $r14[i11];

        if $r15 == null goto label04;

        $r16 = r2.<org.apache.batik.gvt.svg12.MultiResGraphicsNode: java.awt.Dimension[] maxSz>;

        $r17 = $r16[i11];

        $i1 = $r17.<java.awt.Dimension: int width>;

        $d19 = (double) $i1;

        $b2 = d17 cmpg $d19;

        $i17 = (int) $b2;

        if $i17 > 0 goto label06;

     label04:
        $i19 = (int) -1;

        if i9 == $i19 goto label05;

        if i10 != i11 goto label06;

     label05:
        i9 = i11;

     label06:
        i11 = i11 + 1;

     label07:
        $r24 = r2.<org.apache.batik.gvt.svg12.MultiResGraphicsNode: java.awt.Dimension[] minSz>;

        $i12 = lengthof $r24;

        if i11 < $i12 goto label01;

        $i21 = (int) -1;

        if i9 != $i21 goto label08;

        i9 = i10;

     label08:
        $r20 = virtualinvoke r2.<org.apache.batik.gvt.svg12.MultiResGraphicsNode: org.apache.batik.gvt.GraphicsNode getGraphicsNode(int)>(i9);

        if $r20 != null goto label09;

        return;

     label09:
        $r21 = interfaceinvoke $r20.<org.apache.batik.gvt.GraphicsNode: java.awt.geom.Rectangle2D getBounds()>();

        if $r21 != null goto label10;

        return;

     label10:
        $d21 = virtualinvoke $r21.<java.awt.geom.RectangularShape: double getWidth()>();

        d52 = $d21 * $d7;

        $d22 = virtualinvoke $r21.<java.awt.geom.RectangularShape: double getHeight()>();

        d53 = $d22 * $d15;

        $d23 = virtualinvoke $r21.<java.awt.geom.RectangularShape: double getX()>();

        d24 = $d23 * $d7;

        $d25 = virtualinvoke $r21.<java.awt.geom.RectangularShape: double getY()>();

        d26 = $d25 * $d15;

        $b5 = d52 cmpg 0.0;

        $i22 = (int) $b5;

        if $i22 >= 0 goto label11;

        d54 = d24 + d52;

        d55 = d24;

        goto label12;

     label11:
        d54 = d24;

        d55 = d24 + d52;

     label12:
        $b6 = d53 cmpg 0.0;

        $i23 = (int) $b6;

        if $i23 >= 0 goto label13;

        d56 = d26 + d53;

        d57 = d26;

        goto label14;

     label13:
        d56 = d26;

        d57 = d26 + d53;

     label14:
        $d27 = staticinvoke <java.lang.Math: double ceil(double)>(d55);

        $d28 = staticinvoke <java.lang.Math: double floor(double)>(d54);

        $d29 = $d27 - $d28;

        $i7 = (int) $d29;

        $d47 = (double) $i7;

        $d30 = staticinvoke <java.lang.Math: double ceil(double)>(d57);

        $d31 = staticinvoke <java.lang.Math: double floor(double)>(d56);

        $d32 = $d30 - $d31;

        $i8 = (int) $d32;

        $d48 = (double) $i8;

        $d33 = virtualinvoke $r21.<java.awt.geom.RectangularShape: double getWidth()>();

        $d34 = $d47 / $d33;

        $d49 = $d34 / $d7;

        $d35 = virtualinvoke $r21.<java.awt.geom.RectangularShape: double getHeight()>();

        $d36 = $d48 / $d35;

        $d50 = $d36 / $d15;

        $r22 = virtualinvoke r0.<java.awt.Graphics2D: java.awt.geom.AffineTransform getTransform()>();

        $r25 = new java.awt.geom.AffineTransform;

        $d37 = virtualinvoke $r22.<java.awt.geom.AffineTransform: double getScaleX()>();

        $d38 = $d37 * $d49;

        $d39 = virtualinvoke $r22.<java.awt.geom.AffineTransform: double getShearY()>();

        $d40 = $d39 * $d49;

        $d41 = virtualinvoke $r22.<java.awt.geom.AffineTransform: double getShearX()>();

        $d42 = $d41 * $d50;

        $d43 = virtualinvoke $r22.<java.awt.geom.AffineTransform: double getScaleY()>();

        $d44 = $d43 * $d50;

        $d45 = virtualinvoke $r22.<java.awt.geom.AffineTransform: double getTranslateX()>();

        $d46 = virtualinvoke $r22.<java.awt.geom.AffineTransform: double getTranslateY()>();

        specialinvoke $r25.<java.awt.geom.AffineTransform: void <init>(double,double,double,double,double,double)>($d38, $d40, $d42, $d44, $d45, $d46);

        virtualinvoke r0.<java.awt.Graphics2D: void setTransform(java.awt.geom.AffineTransform)>($r25);

        interfaceinvoke $r20.<org.apache.batik.gvt.GraphicsNode: void paint(java.awt.Graphics2D)>(r0);

        return;
    }

    public double calcDist(double, java.awt.Dimension, java.awt.Dimension)
    {
        org.apache.batik.gvt.svg12.MultiResGraphicsNode r2;
        int $i0, $i1, $i2, $i3, $i4;
        double $d0, d1, d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10;
        java.awt.Dimension r0, r1;

        r2 := @this: org.apache.batik.gvt.svg12.MultiResGraphicsNode;

        d2 := @parameter0: double;

        r0 := @parameter1: java.awt.Dimension;

        r1 := @parameter2: java.awt.Dimension;

        if r0 != null goto label2;

        if r1 != null goto label1;

        return 1.0E11;

     label1:
        $i4 = r1.<java.awt.Dimension: int width>;

        $d8 = (double) $i4;

        $d9 = d2 - $d8;

        $d10 = staticinvoke <java.lang.Math: double abs(double)>($d9);

        return $d10;

     label2:
        if r1 != null goto label3;

        $i3 = r0.<java.awt.Dimension: int width>;

        $d5 = (double) $i3;

        $d6 = d2 - $d5;

        $d7 = staticinvoke <java.lang.Math: double abs(double)>($d6);

        return $d7;

     label3:
        $i1 = r1.<java.awt.Dimension: int width>;

        $i0 = r0.<java.awt.Dimension: int width>;

        $i2 = $i1 + $i0;

        $d0 = (double) $i2;

        d1 = $d0 / 2.0;

        $d3 = d2 - d1;

        $d4 = staticinvoke <java.lang.Math: double abs(double)>($d3);

        return $d4;
    }

    public java.awt.geom.Rectangle2D getPrimitiveBounds()
    {
        org.apache.batik.gvt.svg12.MultiResGraphicsNode r0;
        java.awt.geom.Rectangle2D $r1;

        r0 := @this: org.apache.batik.gvt.svg12.MultiResGraphicsNode;

        $r1 = r0.<org.apache.batik.gvt.svg12.MultiResGraphicsNode: java.awt.geom.Rectangle2D bounds>;

        return $r1;
    }

    public java.awt.geom.Rectangle2D getGeometryBounds()
    {
        org.apache.batik.gvt.svg12.MultiResGraphicsNode r0;
        java.awt.geom.Rectangle2D $r1;

        r0 := @this: org.apache.batik.gvt.svg12.MultiResGraphicsNode;

        $r1 = r0.<org.apache.batik.gvt.svg12.MultiResGraphicsNode: java.awt.geom.Rectangle2D bounds>;

        return $r1;
    }

    public java.awt.geom.Rectangle2D getSensitiveBounds()
    {
        org.apache.batik.gvt.svg12.MultiResGraphicsNode r0;
        java.awt.geom.Rectangle2D $r1;

        r0 := @this: org.apache.batik.gvt.svg12.MultiResGraphicsNode;

        $r1 = r0.<org.apache.batik.gvt.svg12.MultiResGraphicsNode: java.awt.geom.Rectangle2D bounds>;

        return $r1;
    }

    public java.awt.Shape getOutline()
    {
        org.apache.batik.gvt.svg12.MultiResGraphicsNode r0;
        java.awt.geom.Rectangle2D $r1;

        r0 := @this: org.apache.batik.gvt.svg12.MultiResGraphicsNode;

        $r1 = r0.<org.apache.batik.gvt.svg12.MultiResGraphicsNode: java.awt.geom.Rectangle2D bounds>;

        return $r1;
    }

    public org.apache.batik.gvt.GraphicsNode getGraphicsNode(int)
    {
        org.apache.batik.gvt.svg12.MultiResGraphicsNode r0;
        int i0;
        java.lang.ref.SoftReference $r2, $r9, $r12;
        java.lang.ref.SoftReference[] $r1, $r10, $r11;
        org.apache.batik.gvt.GraphicsNode $r8, $r14;
        org.apache.batik.bridge.GVTBuilder $r4;
        org.apache.batik.bridge.BridgeContext $r3, $r7;
        java.lang.Exception $r15;
        org.w3c.dom.Element $r6;
        org.w3c.dom.Element[] $r5;
        java.lang.Object $r13;

        r0 := @this: org.apache.batik.gvt.svg12.MultiResGraphicsNode;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.batik.gvt.svg12.MultiResGraphicsNode: java.lang.ref.SoftReference[] srcs>;

        $r2 = $r1[i0];

        if $r2 == null goto label1;

        $r11 = r0.<org.apache.batik.gvt.svg12.MultiResGraphicsNode: java.lang.ref.SoftReference[] srcs>;

        $r12 = $r11[i0];

        $r13 = virtualinvoke $r12.<java.lang.ref.SoftReference: java.lang.Object get()>();

        if $r13 == null goto label1;

        $r14 = (org.apache.batik.gvt.GraphicsNode) $r13;

        return $r14;

     label1:
        $r3 = r0.<org.apache.batik.gvt.svg12.MultiResGraphicsNode: org.apache.batik.bridge.BridgeContext ctx>;

        $r4 = virtualinvoke $r3.<org.apache.batik.bridge.BridgeContext: org.apache.batik.bridge.GVTBuilder getGVTBuilder()>();

        $r7 = r0.<org.apache.batik.gvt.svg12.MultiResGraphicsNode: org.apache.batik.bridge.BridgeContext ctx>;

        $r5 = r0.<org.apache.batik.gvt.svg12.MultiResGraphicsNode: org.w3c.dom.Element[] srcElems>;

        $r6 = $r5[i0];

        $r8 = virtualinvoke $r4.<org.apache.batik.bridge.GVTBuilder: org.apache.batik.gvt.GraphicsNode build(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element)>($r7, $r6);

        $r10 = r0.<org.apache.batik.gvt.svg12.MultiResGraphicsNode: java.lang.ref.SoftReference[] srcs>;

        $r9 = new java.lang.ref.SoftReference;

        specialinvoke $r9.<java.lang.ref.SoftReference: void <init>(java.lang.Object)>($r8);

        $r10[i0] = $r9;

        return $r8;

     label2:
        $r15 := @caughtexception;

        virtualinvoke $r15.<java.lang.Throwable: void printStackTrace()>();

        return null;

        catch java.lang.Exception from label1 to label2 with label2;
    }
}
