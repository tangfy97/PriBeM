public class org.waveprotocol.wave.client.editor.extract.DomMutationReverter extends java.lang.Object
{
    private final org.waveprotocol.wave.client.editor.extract.DomMutationReverter$RevertListener listener;
    private final java.util.List entries;

    public void <init>(org.waveprotocol.wave.client.editor.extract.DomMutationReverter$RevertListener)
    {
        org.waveprotocol.wave.client.editor.extract.DomMutationReverter r0;
        org.waveprotocol.wave.client.editor.extract.DomMutationReverter$RevertListener r2;
        java.util.ArrayList $r1;

        r0 := @this: org.waveprotocol.wave.client.editor.extract.DomMutationReverter;

        r2 := @parameter0: org.waveprotocol.wave.client.editor.extract.DomMutationReverter$RevertListener;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<org.waveprotocol.wave.client.editor.extract.DomMutationReverter: java.util.List entries> = $r1;

        r0.<org.waveprotocol.wave.client.editor.extract.DomMutationReverter: org.waveprotocol.wave.client.editor.extract.DomMutationReverter$RevertListener listener> = r2;

        return;
    }

    public void handleMutationEvent(org.waveprotocol.wave.client.common.util.SignalEvent)
    {
        com.google.gwt.dom.client.Text $r16;
        boolean $z0, $z1, z2, $z3, $z4, $z5, $z7, $z8;
        org.waveprotocol.wave.common.logging.LoggerBundle $r3;
        java.util.List $r17;
        com.google.gwt.dom.client.Element $r2, $r8, $r13, $r19;
        java.lang.StringBuilder $r6, $r9, $r21;
        org.waveprotocol.wave.common.logging.Logger $r4;
        org.waveprotocol.wave.client.editor.extract.DomMutationReverter r11;
        java.lang.String $r1, $r10, $r20;
        com.google.gwt.core.client.JavaScriptObject $r7, $r15, $r18;
        org.waveprotocol.wave.client.common.util.SignalEvent r0;
        com.google.gwt.dom.client.Node $r14, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r30;
        org.waveprotocol.wave.client.editor.extract.DomMutationReverter$RemovalEntry $r22;

        r11 := @this: org.waveprotocol.wave.client.editor.extract.DomMutationReverter;

        r0 := @parameter0: org.waveprotocol.wave.client.common.util.SignalEvent;

        $r1 = interfaceinvoke r0.<org.waveprotocol.wave.client.common.util.SignalEvent: java.lang.String getType()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("DOMNodeRemoved");

        if $z0 == 0 goto label7;

        $r2 = interfaceinvoke r0.<org.waveprotocol.wave.client.common.util.SignalEvent: com.google.gwt.dom.client.Element getTarget()>();

        $r23 = (com.google.gwt.dom.client.Node) $r2;

        $z1 = staticinvoke <org.waveprotocol.wave.client.common.util.DomHelper: boolean isTextNode(com.google.gwt.dom.client.Node)>($r23);

        if $z1 != 0 goto label1;

        $r24 = (com.google.gwt.dom.client.Node) $r2;

        $r18 = virtualinvoke $r24.<com.google.gwt.dom.client.Node: com.google.gwt.core.client.JavaScriptObject cast()>();

        $r19 = (com.google.gwt.dom.client.Element) $r18;

        $z5 = staticinvoke <org.waveprotocol.wave.client.editor.impl.NodeManager: boolean hasBackReference(com.google.gwt.dom.client.Element)>($r19);

        if $z5 != 0 goto label2;

     label1:
        $z8 = 1;

        $z7 = 1;

        goto label3;

     label2:
        $z8 = 0;

        $z7 = 0;

     label3:
        z2 = $z8;

        if $z7 == 0 goto label4;

        $r17 = r11.<org.waveprotocol.wave.client.editor.extract.DomMutationReverter: java.util.List entries>;

        $z4 = interfaceinvoke $r17.<java.util.List: boolean isEmpty()>();

        if $z4 == 0 goto label4;

        goto label7;

     label4:
        $r3 = <org.waveprotocol.wave.client.editor.EditorStaticDeps: org.waveprotocol.wave.common.logging.LoggerBundle logger>;

        $r4 = interfaceinvoke $r3.<org.waveprotocol.wave.common.logging.LoggerBundle: org.waveprotocol.wave.common.logging.Logger trace()>();

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("REVERT REMOVAL: ");

        $r25 = (com.google.gwt.dom.client.Node) $r2;

        $z3 = staticinvoke <org.waveprotocol.wave.client.common.util.DomHelper: boolean isTextNode(com.google.gwt.dom.client.Node)>($r25);

        if $z3 == 0 goto label5;

        $r26 = (com.google.gwt.dom.client.Node) $r2;

        $r15 = virtualinvoke $r26.<com.google.gwt.dom.client.Node: com.google.gwt.core.client.JavaScriptObject cast()>();

        $r16 = (com.google.gwt.dom.client.Text) $r15;

        $r20 = virtualinvoke $r16.<com.google.gwt.dom.client.Text: java.lang.String getData()>();

        goto label6;

     label5:
        $r27 = (com.google.gwt.dom.client.Node) $r2;

        $r7 = virtualinvoke $r27.<com.google.gwt.dom.client.Node: com.google.gwt.core.client.JavaScriptObject cast()>();

        $r8 = (com.google.gwt.dom.client.Element) $r7;

        $r20 = virtualinvoke $r8.<com.google.gwt.dom.client.Element: java.lang.String getTagName()>();

     label6:
        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r4.<org.waveprotocol.wave.common.logging.Logger: void log(java.lang.String)>($r10);

        $r22 = new org.waveprotocol.wave.client.editor.extract.DomMutationReverter$RemovalEntry;

        $r28 = (com.google.gwt.dom.client.Node) $r2;

        $r13 = virtualinvoke $r28.<com.google.gwt.dom.client.Node: com.google.gwt.dom.client.Element getParentElement()>();

        $r29 = (com.google.gwt.dom.client.Node) $r2;

        $r14 = virtualinvoke $r29.<com.google.gwt.dom.client.Node: com.google.gwt.dom.client.Node getNextSibling()>();

        $r30 = (com.google.gwt.dom.client.Node) $r2;

        specialinvoke $r22.<org.waveprotocol.wave.client.editor.extract.DomMutationReverter$RemovalEntry: void <init>(com.google.gwt.dom.client.Node,com.google.gwt.dom.client.Element,com.google.gwt.dom.client.Node,boolean)>($r30, $r13, $r14, z2);

        specialinvoke r11.<org.waveprotocol.wave.client.editor.extract.DomMutationReverter: void addEntry(org.waveprotocol.wave.client.editor.extract.DomMutationReverter$Undoable)>($r22);

     label7:
        return;
    }

    private void addEntry(org.waveprotocol.wave.client.editor.extract.DomMutationReverter$Undoable)
    {
        java.util.List $r2;
        org.waveprotocol.wave.client.editor.extract.DomMutationReverter r0;
        org.waveprotocol.wave.client.editor.extract.DomMutationReverter$RevertListener $r3;
        org.waveprotocol.wave.client.editor.extract.DomMutationReverter$Undoable r1;

        r0 := @this: org.waveprotocol.wave.client.editor.extract.DomMutationReverter;

        r1 := @parameter0: org.waveprotocol.wave.client.editor.extract.DomMutationReverter$Undoable;

        $r2 = r0.<org.waveprotocol.wave.client.editor.extract.DomMutationReverter: java.util.List entries>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        $r3 = r0.<org.waveprotocol.wave.client.editor.extract.DomMutationReverter: org.waveprotocol.wave.client.editor.extract.DomMutationReverter$RevertListener listener>;

        interfaceinvoke $r3.<org.waveprotocol.wave.client.editor.extract.DomMutationReverter$RevertListener: void scheduleRevert()>();

        return;
    }

    public void flush()
    {
        org.waveprotocol.wave.common.logging.Logger $r11;
        org.waveprotocol.wave.client.editor.extract.DomMutationReverter$Undoable $r6, $r9;
        org.waveprotocol.wave.client.editor.extract.DomMutationReverter r0;
        int $i0, $i1, $i2, $i3, i4, i5, $i7;
        java.lang.String $r17;
        org.waveprotocol.wave.common.logging.LoggerBundle $r10;
        java.util.List $r1, $r2, $r3, $r4, $r7, $r14;
        java.lang.Object $r5, $r8;
        java.lang.StringBuilder $r13, $r15, $r16, $r18;

        r0 := @this: org.waveprotocol.wave.client.editor.extract.DomMutationReverter;

        $r1 = r0.<org.waveprotocol.wave.client.editor.extract.DomMutationReverter: java.util.List entries>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        if $i0 <= 0 goto label1;

        $r10 = <org.waveprotocol.wave.client.editor.EditorStaticDeps: org.waveprotocol.wave.common.logging.LoggerBundle logger>;

        $r11 = interfaceinvoke $r10.<org.waveprotocol.wave.common.logging.LoggerBundle: org.waveprotocol.wave.common.logging.Logger trace()>();

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("DomMutation Flush of ");

        $r14 = r0.<org.waveprotocol.wave.client.editor.extract.DomMutationReverter: java.util.List entries>;

        $i3 = interfaceinvoke $r14.<java.util.List: int size()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" mutations.");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r11.<org.waveprotocol.wave.common.logging.Logger: void log(java.lang.String)>($r17);

     label1:
        $r2 = r0.<org.waveprotocol.wave.client.editor.extract.DomMutationReverter: java.util.List entries>;

        $i1 = interfaceinvoke $r2.<java.util.List: int size()>();

        i4 = $i1 - 1;

     label2:
        if i4 < 0 goto label3;

        $r7 = r0.<org.waveprotocol.wave.client.editor.extract.DomMutationReverter: java.util.List entries>;

        $r8 = interfaceinvoke $r7.<java.util.List: java.lang.Object get(int)>(i4);

        $r9 = (org.waveprotocol.wave.client.editor.extract.DomMutationReverter$Undoable) $r8;

        interfaceinvoke $r9.<org.waveprotocol.wave.client.editor.extract.DomMutationReverter$Undoable: void undo()>();

        $i7 = (int) -1;

        i4 = i4 + $i7;

        goto label2;

     label3:
        i5 = 0;

     label4:
        $r3 = r0.<org.waveprotocol.wave.client.editor.extract.DomMutationReverter: java.util.List entries>;

        $i2 = interfaceinvoke $r3.<java.util.List: int size()>();

        if i5 >= $i2 goto label5;

        $r4 = r0.<org.waveprotocol.wave.client.editor.extract.DomMutationReverter: java.util.List entries>;

        $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>(i5);

        $r6 = (org.waveprotocol.wave.client.editor.extract.DomMutationReverter$Undoable) $r5;

        interfaceinvoke $r6.<org.waveprotocol.wave.client.editor.extract.DomMutationReverter$Undoable: void cleanup()>();

        i5 = i5 + 1;

        goto label4;

     label5:
        virtualinvoke r0.<org.waveprotocol.wave.client.editor.extract.DomMutationReverter: void clear()>();

        return;
    }

    public void clear()
    {
        org.waveprotocol.wave.client.editor.extract.DomMutationReverter r0;
        java.util.List $r1;

        r0 := @this: org.waveprotocol.wave.client.editor.extract.DomMutationReverter;

        $r1 = r0.<org.waveprotocol.wave.client.editor.extract.DomMutationReverter: java.util.List entries>;

        interfaceinvoke $r1.<java.util.List: void clear()>();

        return;
    }

    public boolean hasPendingReverts()
    {
        java.util.List $r1;
        org.waveprotocol.wave.client.editor.extract.DomMutationReverter r0;
        boolean $z0, $z1;

        r0 := @this: org.waveprotocol.wave.client.editor.extract.DomMutationReverter;

        $r1 = r0.<org.waveprotocol.wave.client.editor.extract.DomMutationReverter: java.util.List entries>;

        $z0 = interfaceinvoke $r1.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }
}
