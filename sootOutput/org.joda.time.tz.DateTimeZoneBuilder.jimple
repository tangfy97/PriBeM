public class org.joda.time.tz.DateTimeZoneBuilder extends java.lang.Object
{
    private final java.util.ArrayList iRuleSets;

    public static org.joda.time.DateTimeZone readFrom(java.io.InputStream, java.lang.String) throws java.io.IOException
    {
        java.io.DataInputStream $r1;
        org.joda.time.DateTimeZone $r3, $r5;
        java.io.DataInput $r4;
        java.lang.String r2;
        java.io.InputStream r0;
        boolean $z0;

        r0 := @parameter0: java.io.InputStream;

        r2 := @parameter1: java.lang.String;

        $z0 = r0 instanceof java.io.DataInput;

        if $z0 == 0 goto label1;

        $r4 = (java.io.DataInput) r0;

        $r5 = staticinvoke <org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone readFrom(java.io.DataInput,java.lang.String)>($r4, r2);

        return $r5;

     label1:
        $r1 = new java.io.DataInputStream;

        specialinvoke $r1.<java.io.DataInputStream: void <init>(java.io.InputStream)>(r0);

        $r3 = staticinvoke <org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone readFrom(java.io.DataInput,java.lang.String)>($r1, r2);

        return $r3;
    }

    public static org.joda.time.DateTimeZone readFrom(java.io.DataInput, java.lang.String) throws java.io.IOException
    {
        org.joda.time.DateTimeZone $r5, r9;
        long $l1, $l3;
        int $i0, $i2, $i4;
        java.lang.String r1, $r4;
        boolean $z0;
        java.io.IOException $r8;
        org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone $r2, $r6;
        org.joda.time.tz.FixedDateTimeZone $r3;
        org.joda.time.tz.CachedDateTimeZone $r7;
        java.io.DataInput r0;

        r0 := @parameter0: java.io.DataInput;

        r1 := @parameter1: java.lang.String;

        $i0 = interfaceinvoke r0.<java.io.DataInput: int readUnsignedByte()>();

        lookupswitch($i0)
        {
            case 67: goto label3;
            case 70: goto label1;
            case 80: goto label4;
            default: goto label5;
        };

     label1:
        $r3 = new org.joda.time.tz.FixedDateTimeZone;

        $r4 = interfaceinvoke r0.<java.io.DataInput: java.lang.String readUTF()>();

        $l1 = staticinvoke <org.joda.time.tz.DateTimeZoneBuilder: long readMillis(java.io.DataInput)>(r0);

        $i2 = (int) $l1;

        $l3 = staticinvoke <org.joda.time.tz.DateTimeZoneBuilder: long readMillis(java.io.DataInput)>(r0);

        $i4 = (int) $l3;

        specialinvoke $r3.<org.joda.time.tz.FixedDateTimeZone: void <init>(java.lang.String,java.lang.String,int,int)>(r1, $r4, $i2, $i4);

        r9 = $r3;

        $r5 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC>;

        $z0 = virtualinvoke $r3.<org.joda.time.DateTimeZone: boolean equals(java.lang.Object)>($r5);

        if $z0 == 0 goto label2;

        r9 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC>;

     label2:
        return r9;

     label3:
        $r6 = staticinvoke <org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone readFrom(java.io.DataInput,java.lang.String)>(r0, r1);

        $r7 = staticinvoke <org.joda.time.tz.CachedDateTimeZone: org.joda.time.tz.CachedDateTimeZone forZone(org.joda.time.DateTimeZone)>($r6);

        return $r7;

     label4:
        $r2 = staticinvoke <org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone readFrom(java.io.DataInput,java.lang.String)>(r0, r1);

        return $r2;

     label5:
        $r8 = new java.io.IOException;

        specialinvoke $r8.<java.io.IOException: void <init>(java.lang.String)>("Invalid encoding");

        throw $r8;
    }

    static void writeMillis(java.io.DataOutput, long) throws java.io.IOException
    {
        byte $b2, $b4, $b6, $b7, $b10, $b19, $b25;
        long l0, $l1, $l3, $l5, $l8, $l9, $l11, $l12, $l15, $l17, $l18, $l20, $l23, $l24, $l26, l28, l29, l30;
        short $s31;
        int $i13, $i14, $i16, $i21, $i22, $i27, $i32;
        java.io.DataOutput r0;

        r0 := @parameter0: java.io.DataOutput;

        l0 := @parameter1: long;

        $l1 = l0 % 1800000L;

        $b2 = $l1 cmp 0L;

        if $b2 != 0 goto label1;

        l28 = l0 / 1800000L;

        $l23 = l28 << 58;

        $l24 = $l23 >> 58;

        $b25 = $l24 cmp l28;

        if $b25 != 0 goto label1;

        $l26 = l28 & 63L;

        $i27 = (int) $l26;

        interfaceinvoke r0.<java.io.DataOutput: void writeByte(int)>($i27);

        return;

     label1:
        $l3 = l0 % 60000L;

        $b4 = $l3 cmp 0L;

        if $b4 != 0 goto label2;

        l29 = l0 / 60000L;

        $l17 = l29 << 34;

        $l18 = $l17 >> 34;

        $b19 = $l18 cmp l29;

        if $b19 != 0 goto label2;

        $l20 = l29 & 1073741823L;

        $i21 = (int) $l20;

        $i22 = 1073741824 | $i21;

        interfaceinvoke r0.<java.io.DataOutput: void writeInt(int)>($i22);

        return;

     label2:
        $l5 = l0 % 1000L;

        $b6 = $l5 cmp 0L;

        if $b6 != 0 goto label3;

        l30 = l0 / 1000L;

        $l8 = l30 << 26;

        $l9 = $l8 >> 26;

        $b10 = $l9 cmp l30;

        if $b10 != 0 goto label3;

        $l11 = l30 >> 32;

        $l12 = $l11 & 63L;

        $i13 = (int) $l12;

        $i14 = 128 | $i13;

        interfaceinvoke r0.<java.io.DataOutput: void writeByte(int)>($i14);

        $l15 = l30 & -1L;

        $i16 = (int) $l15;

        interfaceinvoke r0.<java.io.DataOutput: void writeInt(int)>($i16);

        return;

     label3:
        $b7 = l0 cmp 0L;

        $i32 = (int) $b7;

        if $i32 >= 0 goto label4;

        $s31 = 255;

        goto label5;

     label4:
        $s31 = 192;

     label5:
        interfaceinvoke r0.<java.io.DataOutput: void writeByte(int)>($s31);

        interfaceinvoke r0.<java.io.DataOutput: void writeLong(long)>(l0);

        return;
    }

    static long readMillis(java.io.DataInput) throws java.io.IOException
    {
        java.io.DataInput r0;
        long $l2, $l3, $l4, $l7, $l10, $l13, $l15, $l16, $l23, $l24, $l26, $l27, l33, l34, l35, l36, l37;
        int $i0, $i1, $i5, $i6, $i8, $i9, $i11, $i12, $i14, $i17, $i18, $i19, $i20, $i21, $i22, $i25, i28, i29, i30, i31, i32;

        r0 := @parameter0: java.io.DataInput;

        $i0 = interfaceinvoke r0.<java.io.DataInput: int readUnsignedByte()>();

        $i1 = $i0 >> 6;

        tableswitch($i1)
        {
            case 0: goto label1;
            case 1: goto label2;
            case 2: goto label3;
            case 3: goto label4;
            default: goto label1;
        };

     label1:
        $i25 = $i0 << 26;

        i28 = $i25 >> 26;

        $l26 = (long) i28;

        $l27 = $l26 * 1800000L;

        return $l27;

     label2:
        $i17 = $i0 << 26;

        i29 = $i17 >> 2;

        $i18 = interfaceinvoke r0.<java.io.DataInput: int readUnsignedByte()>();

        $i19 = $i18 << 16;

        i30 = i29 | $i19;

        $i20 = interfaceinvoke r0.<java.io.DataInput: int readUnsignedByte()>();

        $i21 = $i20 << 8;

        i31 = i30 | $i21;

        $i22 = interfaceinvoke r0.<java.io.DataInput: int readUnsignedByte()>();

        i32 = i31 | $i22;

        $l23 = (long) i32;

        $l24 = $l23 * 60000L;

        return $l24;

     label3:
        $l3 = (long) $i0;

        $l4 = $l3 << 58;

        l33 = $l4 >> 26;

        $i5 = interfaceinvoke r0.<java.io.DataInput: int readUnsignedByte()>();

        $i6 = $i5 << 24;

        $l7 = (long) $i6;

        l34 = l33 | $l7;

        $i8 = interfaceinvoke r0.<java.io.DataInput: int readUnsignedByte()>();

        $i9 = $i8 << 16;

        $l10 = (long) $i9;

        l35 = l34 | $l10;

        $i11 = interfaceinvoke r0.<java.io.DataInput: int readUnsignedByte()>();

        $i12 = $i11 << 8;

        $l13 = (long) $i12;

        l36 = l35 | $l13;

        $i14 = interfaceinvoke r0.<java.io.DataInput: int readUnsignedByte()>();

        $l15 = (long) $i14;

        l37 = l36 | $l15;

        $l16 = l37 * 1000L;

        return $l16;

     label4:
        $l2 = interfaceinvoke r0.<java.io.DataInput: long readLong()>();

        return $l2;
    }

    private static org.joda.time.DateTimeZone buildFixedZone(java.lang.String, java.lang.String, int, int)
    {
        org.joda.time.DateTimeZone $r3;
        org.joda.time.tz.FixedDateTimeZone $r4;
        int i0, i1;
        java.lang.String r0, $r1, r2;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        $r1 = "UTC";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z1 == 0 goto label1;

        if i0 != 0 goto label1;

        if i1 != 0 goto label1;

        $r3 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC>;

        return $r3;

     label1:
        $r4 = new org.joda.time.tz.FixedDateTimeZone;

        specialinvoke $r4.<org.joda.time.tz.FixedDateTimeZone: void <init>(java.lang.String,java.lang.String,int,int)>(r0, r2, i0, i1);

        return $r4;
    }

    public void <init>()
    {
        org.joda.time.tz.DateTimeZoneBuilder r0;
        java.util.ArrayList $r1;

        r0 := @this: org.joda.time.tz.DateTimeZoneBuilder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>(int)>(10);

        r0.<org.joda.time.tz.DateTimeZoneBuilder: java.util.ArrayList iRuleSets> = $r1;

        return;
    }

    public org.joda.time.tz.DateTimeZoneBuilder addCutover(int, char, int, int, int, boolean, int)
    {
        org.joda.time.tz.DateTimeZoneBuilder$RuleSet $r3, r8;
        java.util.ArrayList $r2, $r4, $r5, $r6;
        int i1, i2, i3, i4, $i5, $i6, $i7, i8;
        org.joda.time.tz.DateTimeZoneBuilder r1;
        boolean z0;
        org.joda.time.tz.DateTimeZoneBuilder$OfYear $r0;
        char c0;
        java.lang.Object $r7;

        r1 := @this: org.joda.time.tz.DateTimeZoneBuilder;

        i8 := @parameter0: int;

        c0 := @parameter1: char;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        z0 := @parameter5: boolean;

        i4 := @parameter6: int;

        $r0 = new org.joda.time.tz.DateTimeZoneBuilder$OfYear;

        specialinvoke $r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: void <init>(char,int,int,int,boolean,int)>(c0, i1, i2, i3, z0, i4);

        $r2 = r1.<org.joda.time.tz.DateTimeZoneBuilder: java.util.ArrayList iRuleSets>;

        $i5 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

        if $i5 <= 0 goto label1;

        $r6 = r1.<org.joda.time.tz.DateTimeZoneBuilder: java.util.ArrayList iRuleSets>;

        $r5 = r1.<org.joda.time.tz.DateTimeZoneBuilder: java.util.ArrayList iRuleSets>;

        $i6 = virtualinvoke $r5.<java.util.ArrayList: int size()>();

        $i7 = $i6 - 1;

        $r7 = virtualinvoke $r6.<java.util.ArrayList: java.lang.Object get(int)>($i7);

        r8 = (org.joda.time.tz.DateTimeZoneBuilder$RuleSet) $r7;

        virtualinvoke r8.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void setUpperLimit(int,org.joda.time.tz.DateTimeZoneBuilder$OfYear)>(i8, $r0);

     label1:
        $r4 = r1.<org.joda.time.tz.DateTimeZoneBuilder: java.util.ArrayList iRuleSets>;

        $r3 = new org.joda.time.tz.DateTimeZoneBuilder$RuleSet;

        specialinvoke $r3.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void <init>()>();

        virtualinvoke $r4.<java.util.ArrayList: boolean add(java.lang.Object)>($r3);

        return r1;
    }

    public org.joda.time.tz.DateTimeZoneBuilder setStandardOffset(int)
    {
        int i0;
        org.joda.time.tz.DateTimeZoneBuilder r0;
        org.joda.time.tz.DateTimeZoneBuilder$RuleSet $r1;

        r0 := @this: org.joda.time.tz.DateTimeZoneBuilder;

        i0 := @parameter0: int;

        $r1 = specialinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.tz.DateTimeZoneBuilder$RuleSet getLastRuleSet()>();

        virtualinvoke $r1.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void setStandardOffset(int)>(i0);

        return r0;
    }

    public org.joda.time.tz.DateTimeZoneBuilder setFixedSavings(java.lang.String, int)
    {
        org.joda.time.tz.DateTimeZoneBuilder$RuleSet $r1;
        int i0;
        org.joda.time.tz.DateTimeZoneBuilder r0;
        java.lang.String r2;

        r0 := @this: org.joda.time.tz.DateTimeZoneBuilder;

        r2 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.tz.DateTimeZoneBuilder$RuleSet getLastRuleSet()>();

        virtualinvoke $r1.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void setFixedSavings(java.lang.String,int)>(r2, i0);

        return r0;
    }

    public org.joda.time.tz.DateTimeZoneBuilder addRecurringSavings(java.lang.String, int, int, int, char, int, int, int, boolean, int)
    {
        org.joda.time.tz.DateTimeZoneBuilder$OfYear $r1;
        org.joda.time.tz.DateTimeZoneBuilder$RuleSet $r5;
        org.joda.time.tz.DateTimeZoneBuilder$Recurrence $r2;
        char c2;
        org.joda.time.tz.DateTimeZoneBuilder$Rule $r4;
        int i0, i1, i3, i4, i5, i6, i7;
        org.joda.time.tz.DateTimeZoneBuilder r0;
        java.lang.String r3;
        boolean z0;

        r0 := @this: org.joda.time.tz.DateTimeZoneBuilder;

        r3 := @parameter0: java.lang.String;

        i7 := @parameter1: int;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        c2 := @parameter4: char;

        i3 := @parameter5: int;

        i4 := @parameter6: int;

        i5 := @parameter7: int;

        z0 := @parameter8: boolean;

        i6 := @parameter9: int;

        if i0 > i1 goto label1;

        $r1 = new org.joda.time.tz.DateTimeZoneBuilder$OfYear;

        specialinvoke $r1.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: void <init>(char,int,int,int,boolean,int)>(c2, i3, i4, i5, z0, i6);

        $r2 = new org.joda.time.tz.DateTimeZoneBuilder$Recurrence;

        specialinvoke $r2.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: void <init>(org.joda.time.tz.DateTimeZoneBuilder$OfYear,java.lang.String,int)>($r1, r3, i7);

        $r4 = new org.joda.time.tz.DateTimeZoneBuilder$Rule;

        specialinvoke $r4.<org.joda.time.tz.DateTimeZoneBuilder$Rule: void <init>(org.joda.time.tz.DateTimeZoneBuilder$Recurrence,int,int)>($r2, i0, i1);

        $r5 = specialinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.tz.DateTimeZoneBuilder$RuleSet getLastRuleSet()>();

        virtualinvoke $r5.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void addRule(org.joda.time.tz.DateTimeZoneBuilder$Rule)>($r4);

     label1:
        return r0;
    }

    private org.joda.time.tz.DateTimeZoneBuilder$RuleSet getLastRuleSet()
    {
        org.joda.time.tz.DateTimeZoneBuilder$RuleSet $r5;
        java.util.ArrayList $r1, $r2, $r3;
        int $i0, $i1, $i2;
        org.joda.time.tz.DateTimeZoneBuilder r0;
        java.lang.Object $r4;

        r0 := @this: org.joda.time.tz.DateTimeZoneBuilder;

        $r1 = r0.<org.joda.time.tz.DateTimeZoneBuilder: java.util.ArrayList iRuleSets>;

        $i0 = virtualinvoke $r1.<java.util.ArrayList: int size()>();

        if $i0 != 0 goto label1;

        virtualinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.tz.DateTimeZoneBuilder addCutover(int,char,int,int,int,boolean,int)>(-2147483648, 119, 1, 1, 0, 0, 0);

     label1:
        $r3 = r0.<org.joda.time.tz.DateTimeZoneBuilder: java.util.ArrayList iRuleSets>;

        $r2 = r0.<org.joda.time.tz.DateTimeZoneBuilder: java.util.ArrayList iRuleSets>;

        $i1 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

        $i2 = $i1 - 1;

        $r4 = virtualinvoke $r3.<java.util.ArrayList: java.lang.Object get(int)>($i2);

        $r5 = (org.joda.time.tz.DateTimeZoneBuilder$RuleSet) $r4;

        return $r5;
    }

    public org.joda.time.DateTimeZone toDateTimeZone(java.lang.String, boolean)
    {
        org.joda.time.DateTimeZone $r8, $r9;
        org.joda.time.tz.DateTimeZoneBuilder$RuleSet $r13, r16;
        org.joda.time.tz.DateTimeZoneBuilder$Transition $r12, $r17, r18;
        boolean z0, $z1, $z2;
        org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone $r4;
        long l6, l8;
        org.joda.time.tz.DateTimeZoneBuilder$DSTZone r15;
        java.util.ArrayList $r1, $r3, $r10;
        int $i0, $i1, $i2, $i3, $i4, $i5, i7, i9;
        org.joda.time.tz.DateTimeZoneBuilder r2;
        java.lang.String r0, $r7;
        java.lang.IllegalArgumentException $r14;
        org.joda.time.tz.CachedDateTimeZone $r5;
        java.lang.Object $r6, $r11;

        r2 := @this: org.joda.time.tz.DateTimeZoneBuilder;

        r0 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        if r0 != null goto label01;

        $r14 = new java.lang.IllegalArgumentException;

        specialinvoke $r14.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r14;

     label01:
        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r15 = null;

        l6 = -9223372036854775808L;

        $r3 = r2.<org.joda.time.tz.DateTimeZoneBuilder: java.util.ArrayList iRuleSets>;

        $i0 = virtualinvoke $r3.<java.util.ArrayList: int size()>();

        i7 = 0;

     label02:
        if i7 >= $i0 goto label08;

        $r10 = r2.<org.joda.time.tz.DateTimeZoneBuilder: java.util.ArrayList iRuleSets>;

        $r11 = virtualinvoke $r10.<java.util.ArrayList: java.lang.Object get(int)>(i7);

        r16 = (org.joda.time.tz.DateTimeZoneBuilder$RuleSet) $r11;

        $r12 = virtualinvoke r16.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition firstTransition(long)>(l6);

        if $r12 != null goto label03;

        goto label07;

     label03:
        specialinvoke r2.<org.joda.time.tz.DateTimeZoneBuilder: boolean addTransition(java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$Transition)>($r1, $r12);

        l8 = virtualinvoke $r12.<org.joda.time.tz.DateTimeZoneBuilder$Transition: long getMillis()>();

        i9 = virtualinvoke $r12.<org.joda.time.tz.DateTimeZoneBuilder$Transition: int getSaveMillis()>();

        $r13 = new org.joda.time.tz.DateTimeZoneBuilder$RuleSet;

        specialinvoke $r13.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void <init>(org.joda.time.tz.DateTimeZoneBuilder$RuleSet)>(r16);

     label04:
        $r17 = virtualinvoke $r13.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition nextTransition(long,int)>(l8, i9);

        if $r17 == null goto label06;

        $z2 = specialinvoke r2.<org.joda.time.tz.DateTimeZoneBuilder: boolean addTransition(java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$Transition)>($r1, $r17);

        if $z2 == 0 goto label05;

        if r15 == null goto label05;

        goto label06;

     label05:
        l8 = virtualinvoke $r17.<org.joda.time.tz.DateTimeZoneBuilder$Transition: long getMillis()>();

        i9 = virtualinvoke $r17.<org.joda.time.tz.DateTimeZoneBuilder$Transition: int getSaveMillis()>();

        if r15 != null goto label04;

        $i5 = $i0 - 1;

        if i7 != $i5 goto label04;

        r15 = virtualinvoke $r13.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$DSTZone buildTailZone(java.lang.String)>(r0);

        goto label04;

     label06:
        l6 = virtualinvoke $r13.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: long getUpperLimit(int)>(i9);

     label07:
        i7 = i7 + 1;

        goto label02;

     label08:
        $i1 = virtualinvoke $r1.<java.util.ArrayList: int size()>();

        if $i1 != 0 goto label10;

        if r15 == null goto label09;

        return r15;

     label09:
        $r9 = staticinvoke <org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone buildFixedZone(java.lang.String,java.lang.String,int,int)>(r0, "UTC", 0, 0);

        return $r9;

     label10:
        $i2 = virtualinvoke $r1.<java.util.ArrayList: int size()>();

        if $i2 != 1 goto label11;

        if r15 != null goto label11;

        $r6 = virtualinvoke $r1.<java.util.ArrayList: java.lang.Object get(int)>(0);

        r18 = (org.joda.time.tz.DateTimeZoneBuilder$Transition) $r6;

        $r7 = virtualinvoke r18.<org.joda.time.tz.DateTimeZoneBuilder$Transition: java.lang.String getNameKey()>();

        $i3 = virtualinvoke r18.<org.joda.time.tz.DateTimeZoneBuilder$Transition: int getWallOffset()>();

        $i4 = virtualinvoke r18.<org.joda.time.tz.DateTimeZoneBuilder$Transition: int getStandardOffset()>();

        $r8 = staticinvoke <org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone buildFixedZone(java.lang.String,java.lang.String,int,int)>(r0, $r7, $i3, $i4);

        return $r8;

     label11:
        $r4 = staticinvoke <org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>(r0, z0, $r1, r15);

        $z1 = virtualinvoke $r4.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: boolean isCachable()>();

        if $z1 == 0 goto label12;

        $r5 = staticinvoke <org.joda.time.tz.CachedDateTimeZone: org.joda.time.tz.CachedDateTimeZone forZone(org.joda.time.DateTimeZone)>($r4);

        return $r5;

     label12:
        return $r4;
    }

    private boolean addTransition(java.util.ArrayList, org.joda.time.tz.DateTimeZoneBuilder$Transition)
    {
        long $l3, $l4, $l5, $l6, $l10, $l11;
        java.util.ArrayList r0;
        byte $b7;
        org.joda.time.tz.DateTimeZoneBuilder$Transition r2, r3, $r6;
        int $i0, $i1, $i2, $i8, $i9, i12;
        org.joda.time.tz.DateTimeZoneBuilder r4;
        boolean $z0, $z1;
        java.lang.Object $r1, $r5;

        r4 := @this: org.joda.time.tz.DateTimeZoneBuilder;

        r0 := @parameter0: java.util.ArrayList;

        r3 := @parameter1: org.joda.time.tz.DateTimeZoneBuilder$Transition;

        $i0 = virtualinvoke r0.<java.util.ArrayList: int size()>();

        if $i0 != 0 goto label1;

        virtualinvoke r0.<java.util.ArrayList: boolean add(java.lang.Object)>(r3);

        return 1;

     label1:
        $i1 = $i0 - 1;

        $r1 = virtualinvoke r0.<java.util.ArrayList: java.lang.Object get(int)>($i1);

        r2 = (org.joda.time.tz.DateTimeZoneBuilder$Transition) $r1;

        $z0 = virtualinvoke r3.<org.joda.time.tz.DateTimeZoneBuilder$Transition: boolean isTransitionFrom(org.joda.time.tz.DateTimeZoneBuilder$Transition)>(r2);

        if $z0 != 0 goto label2;

        return 0;

     label2:
        i12 = 0;

        if $i0 < 2 goto label3;

        $i9 = $i0 - 2;

        $r5 = virtualinvoke r0.<java.util.ArrayList: java.lang.Object get(int)>($i9);

        $r6 = (org.joda.time.tz.DateTimeZoneBuilder$Transition) $r5;

        i12 = virtualinvoke $r6.<org.joda.time.tz.DateTimeZoneBuilder$Transition: int getWallOffset()>();

     label3:
        $i2 = virtualinvoke r2.<org.joda.time.tz.DateTimeZoneBuilder$Transition: int getWallOffset()>();

        $l3 = virtualinvoke r2.<org.joda.time.tz.DateTimeZoneBuilder$Transition: long getMillis()>();

        $l4 = (long) i12;

        $l10 = $l3 + $l4;

        $l5 = virtualinvoke r3.<org.joda.time.tz.DateTimeZoneBuilder$Transition: long getMillis()>();

        $l6 = (long) $i2;

        $l11 = $l5 + $l6;

        $b7 = $l11 cmp $l10;

        if $b7 == 0 goto label4;

        virtualinvoke r0.<java.util.ArrayList: boolean add(java.lang.Object)>(r3);

        return 1;

     label4:
        $i8 = $i0 - 1;

        virtualinvoke r0.<java.util.ArrayList: java.lang.Object remove(int)>($i8);

        $z1 = specialinvoke r4.<org.joda.time.tz.DateTimeZoneBuilder: boolean addTransition(java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$Transition)>(r0, r3);

        return $z1;
    }

    public void writeTo(java.lang.String, java.io.OutputStream) throws java.io.IOException
    {
        java.io.OutputStream r0;
        java.io.DataOutput $r4;
        java.io.DataOutputStream $r3;
        org.joda.time.tz.DateTimeZoneBuilder r1;
        java.lang.String r2;
        boolean $z0;

        r1 := @this: org.joda.time.tz.DateTimeZoneBuilder;

        r2 := @parameter0: java.lang.String;

        r0 := @parameter1: java.io.OutputStream;

        $z0 = r0 instanceof java.io.DataOutput;

        if $z0 == 0 goto label1;

        $r4 = (java.io.DataOutput) r0;

        virtualinvoke r1.<org.joda.time.tz.DateTimeZoneBuilder: void writeTo(java.lang.String,java.io.DataOutput)>(r2, $r4);

        goto label2;

     label1:
        $r3 = new java.io.DataOutputStream;

        specialinvoke $r3.<java.io.DataOutputStream: void <init>(java.io.OutputStream)>(r0);

        virtualinvoke r1.<org.joda.time.tz.DateTimeZoneBuilder: void writeTo(java.lang.String,java.io.DataOutput)>(r2, $r3);

     label2:
        return;
    }

    public void writeTo(java.lang.String, java.io.DataOutput) throws java.io.IOException
    {
        org.joda.time.DateTimeZone $r2, r7;
        java.io.DataOutput r3;
        long $l1, $l3;
        org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone $r4;
        org.joda.time.tz.CachedDateTimeZone $r5;
        int $i0, $i2;
        org.joda.time.tz.DateTimeZoneBuilder r0;
        java.lang.String r1, $r6;
        boolean $z0, $z1;

        r0 := @this: org.joda.time.tz.DateTimeZoneBuilder;

        r1 := @parameter0: java.lang.String;

        r3 := @parameter1: java.io.DataOutput;

        $r2 = virtualinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone toDateTimeZone(java.lang.String,boolean)>(r1, 0);

        r7 = $r2;

        $z0 = $r2 instanceof org.joda.time.tz.FixedDateTimeZone;

        if $z0 == 0 goto label1;

        interfaceinvoke r3.<java.io.DataOutput: void writeByte(int)>(70);

        $r6 = virtualinvoke $r2.<org.joda.time.DateTimeZone: java.lang.String getNameKey(long)>(0L);

        interfaceinvoke r3.<java.io.DataOutput: void writeUTF(java.lang.String)>($r6);

        $i0 = virtualinvoke $r2.<org.joda.time.DateTimeZone: int getOffset(long)>(0L);

        $l1 = (long) $i0;

        staticinvoke <org.joda.time.tz.DateTimeZoneBuilder: void writeMillis(java.io.DataOutput,long)>(r3, $l1);

        $i2 = virtualinvoke $r2.<org.joda.time.DateTimeZone: int getStandardOffset(long)>(0L);

        $l3 = (long) $i2;

        staticinvoke <org.joda.time.tz.DateTimeZoneBuilder: void writeMillis(java.io.DataOutput,long)>(r3, $l3);

        goto label4;

     label1:
        $z1 = $r2 instanceof org.joda.time.tz.CachedDateTimeZone;

        if $z1 == 0 goto label2;

        interfaceinvoke r3.<java.io.DataOutput: void writeByte(int)>(67);

        $r5 = (org.joda.time.tz.CachedDateTimeZone) $r2;

        r7 = virtualinvoke $r5.<org.joda.time.tz.CachedDateTimeZone: org.joda.time.DateTimeZone getUncachedZone()>();

        goto label3;

     label2:
        interfaceinvoke r3.<java.io.DataOutput: void writeByte(int)>(80);

     label3:
        $r4 = (org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone) r7;

        virtualinvoke $r4.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>(r3);

     label4:
        return;
    }
}
