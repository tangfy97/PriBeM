class org.mozilla.javascript.tools.debugger.VariableModel extends java.lang.Object implements org.mozilla.javascript.tools.debugger.downloaded.TreeTableModel
{
    private static final java.lang.String[] cNames;
    private static final java.lang.Class[] cTypes;
    private static final org.mozilla.javascript.tools.debugger.VariableModel$VariableNode[] CHILDLESS;
    private org.mozilla.javascript.tools.debugger.Dim debugger;
    private org.mozilla.javascript.tools.debugger.VariableModel$VariableNode root;
    static java.lang.Class class$org$mozilla$javascript$tools$debugger$downloaded$TreeTableModel;
    static java.lang.Class class$java$lang$String;

    public void <init>()
    {
        org.mozilla.javascript.tools.debugger.VariableModel r0;

        r0 := @this: org.mozilla.javascript.tools.debugger.VariableModel;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void <init>(org.mozilla.javascript.tools.debugger.Dim, java.lang.Object)
    {
        org.mozilla.javascript.tools.debugger.VariableModel$VariableNode $r2;
        java.lang.Object r3;
        org.mozilla.javascript.tools.debugger.VariableModel r0;
        org.mozilla.javascript.tools.debugger.Dim r1;

        r0 := @this: org.mozilla.javascript.tools.debugger.VariableModel;

        r1 := @parameter0: org.mozilla.javascript.tools.debugger.Dim;

        r3 := @parameter1: java.lang.Object;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.mozilla.javascript.tools.debugger.VariableModel: org.mozilla.javascript.tools.debugger.Dim debugger> = r1;

        $r2 = new org.mozilla.javascript.tools.debugger.VariableModel$VariableNode;

        specialinvoke $r2.<org.mozilla.javascript.tools.debugger.VariableModel$VariableNode: void <init>(java.lang.Object,java.lang.Object)>(r3, "this");

        r0.<org.mozilla.javascript.tools.debugger.VariableModel: org.mozilla.javascript.tools.debugger.VariableModel$VariableNode root> = $r2;

        return;
    }

    public java.lang.Object getRoot()
    {
        org.mozilla.javascript.tools.debugger.VariableModel$VariableNode $r2;
        org.mozilla.javascript.tools.debugger.VariableModel r0;
        org.mozilla.javascript.tools.debugger.Dim $r1;

        r0 := @this: org.mozilla.javascript.tools.debugger.VariableModel;

        $r1 = r0.<org.mozilla.javascript.tools.debugger.VariableModel: org.mozilla.javascript.tools.debugger.Dim debugger>;

        if $r1 != null goto label1;

        return null;

     label1:
        $r2 = r0.<org.mozilla.javascript.tools.debugger.VariableModel: org.mozilla.javascript.tools.debugger.VariableModel$VariableNode root>;

        return $r2;
    }

    public int getChildCount(java.lang.Object)
    {
        org.mozilla.javascript.tools.debugger.VariableModel$VariableNode r3;
        org.mozilla.javascript.tools.debugger.VariableModel$VariableNode[] $r4;
        int $i0;
        java.lang.Object r2;
        org.mozilla.javascript.tools.debugger.VariableModel r0;
        org.mozilla.javascript.tools.debugger.Dim $r1;

        r0 := @this: org.mozilla.javascript.tools.debugger.VariableModel;

        r2 := @parameter0: java.lang.Object;

        $r1 = r0.<org.mozilla.javascript.tools.debugger.VariableModel: org.mozilla.javascript.tools.debugger.Dim debugger>;

        if $r1 != null goto label1;

        return 0;

     label1:
        r3 = (org.mozilla.javascript.tools.debugger.VariableModel$VariableNode) r2;

        $r4 = specialinvoke r0.<org.mozilla.javascript.tools.debugger.VariableModel: org.mozilla.javascript.tools.debugger.VariableModel$VariableNode[] children(org.mozilla.javascript.tools.debugger.VariableModel$VariableNode)>(r3);

        $i0 = lengthof $r4;

        return $i0;
    }

    public java.lang.Object getChild(java.lang.Object, int)
    {
        org.mozilla.javascript.tools.debugger.VariableModel$VariableNode r3, $r5;
        org.mozilla.javascript.tools.debugger.VariableModel$VariableNode[] $r4;
        int i0;
        java.lang.Object r2;
        org.mozilla.javascript.tools.debugger.VariableModel r0;
        org.mozilla.javascript.tools.debugger.Dim $r1;

        r0 := @this: org.mozilla.javascript.tools.debugger.VariableModel;

        r2 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        $r1 = r0.<org.mozilla.javascript.tools.debugger.VariableModel: org.mozilla.javascript.tools.debugger.Dim debugger>;

        if $r1 != null goto label1;

        return null;

     label1:
        r3 = (org.mozilla.javascript.tools.debugger.VariableModel$VariableNode) r2;

        $r4 = specialinvoke r0.<org.mozilla.javascript.tools.debugger.VariableModel: org.mozilla.javascript.tools.debugger.VariableModel$VariableNode[] children(org.mozilla.javascript.tools.debugger.VariableModel$VariableNode)>(r3);

        $r5 = $r4[i0];

        return $r5;
    }

    public boolean isLeaf(java.lang.Object)
    {
        org.mozilla.javascript.tools.debugger.VariableModel$VariableNode r3;
        org.mozilla.javascript.tools.debugger.VariableModel$VariableNode[] $r4;
        int $i0;
        java.lang.Object r2;
        org.mozilla.javascript.tools.debugger.VariableModel r0;
        org.mozilla.javascript.tools.debugger.Dim $r1;
        boolean $z0;

        r0 := @this: org.mozilla.javascript.tools.debugger.VariableModel;

        r2 := @parameter0: java.lang.Object;

        $r1 = r0.<org.mozilla.javascript.tools.debugger.VariableModel: org.mozilla.javascript.tools.debugger.Dim debugger>;

        if $r1 != null goto label1;

        return 1;

     label1:
        r3 = (org.mozilla.javascript.tools.debugger.VariableModel$VariableNode) r2;

        $r4 = specialinvoke r0.<org.mozilla.javascript.tools.debugger.VariableModel: org.mozilla.javascript.tools.debugger.VariableModel$VariableNode[] children(org.mozilla.javascript.tools.debugger.VariableModel$VariableNode)>(r3);

        $i0 = lengthof $r4;

        if $i0 != 0 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public int getIndexOfChild(java.lang.Object, java.lang.Object)
    {
        org.mozilla.javascript.tools.debugger.VariableModel$VariableNode r3, r5, $r7;
        org.mozilla.javascript.tools.debugger.VariableModel r0;
        org.mozilla.javascript.tools.debugger.VariableModel$VariableNode[] $r6;
        int $i0, i1, $i3, $i5;
        java.lang.Object r2, r4;
        org.mozilla.javascript.tools.debugger.Dim $r1;

        r0 := @this: org.mozilla.javascript.tools.debugger.VariableModel;

        r2 := @parameter0: java.lang.Object;

        r4 := @parameter1: java.lang.Object;

        $r1 = r0.<org.mozilla.javascript.tools.debugger.VariableModel: org.mozilla.javascript.tools.debugger.Dim debugger>;

        if $r1 != null goto label1;

        $i3 = (int) -1;

        return $i3;

     label1:
        r3 = (org.mozilla.javascript.tools.debugger.VariableModel$VariableNode) r2;

        r5 = (org.mozilla.javascript.tools.debugger.VariableModel$VariableNode) r4;

        $r6 = specialinvoke r0.<org.mozilla.javascript.tools.debugger.VariableModel: org.mozilla.javascript.tools.debugger.VariableModel$VariableNode[] children(org.mozilla.javascript.tools.debugger.VariableModel$VariableNode)>(r3);

        i1 = 0;

     label2:
        $i0 = lengthof $r6;

        if i1 == $i0 goto label4;

        $r7 = $r6[i1];

        if $r7 != r5 goto label3;

        return i1;

     label3:
        i1 = i1 + 1;

        goto label2;

     label4:
        $i5 = (int) -1;

        return $i5;
    }

    public boolean isCellEditable(java.lang.Object, int)
    {
        int i0;
        java.lang.Object r1;
        org.mozilla.javascript.tools.debugger.VariableModel r0;
        boolean $z0;

        r0 := @this: org.mozilla.javascript.tools.debugger.VariableModel;

        r1 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        if i0 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void setValueAt(java.lang.Object, java.lang.Object, int)
    {
        int i0;
        java.lang.Object r1, r2;
        org.mozilla.javascript.tools.debugger.VariableModel r0;

        r0 := @this: org.mozilla.javascript.tools.debugger.VariableModel;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        i0 := @parameter2: int;

        return;
    }

    public void addTreeModelListener(javax.swing.event.TreeModelListener)
    {
        javax.swing.event.TreeModelListener r1;
        org.mozilla.javascript.tools.debugger.VariableModel r0;

        r0 := @this: org.mozilla.javascript.tools.debugger.VariableModel;

        r1 := @parameter0: javax.swing.event.TreeModelListener;

        return;
    }

    public void removeTreeModelListener(javax.swing.event.TreeModelListener)
    {
        javax.swing.event.TreeModelListener r1;
        org.mozilla.javascript.tools.debugger.VariableModel r0;

        r0 := @this: org.mozilla.javascript.tools.debugger.VariableModel;

        r1 := @parameter0: javax.swing.event.TreeModelListener;

        return;
    }

    public void valueForPathChanged(javax.swing.tree.TreePath, java.lang.Object)
    {
        java.lang.Object r2;
        javax.swing.tree.TreePath r1;
        org.mozilla.javascript.tools.debugger.VariableModel r0;

        r0 := @this: org.mozilla.javascript.tools.debugger.VariableModel;

        r1 := @parameter0: javax.swing.tree.TreePath;

        r2 := @parameter1: java.lang.Object;

        return;
    }

    public int getColumnCount()
    {
        int $i0;
        java.lang.String[] $r0;
        org.mozilla.javascript.tools.debugger.VariableModel r1;

        r1 := @this: org.mozilla.javascript.tools.debugger.VariableModel;

        $r0 = <org.mozilla.javascript.tools.debugger.VariableModel: java.lang.String[] cNames>;

        $i0 = lengthof $r0;

        return $i0;
    }

    public java.lang.String getColumnName(int)
    {
        int i0;
        java.lang.String[] $r0;
        java.lang.String $r1;
        org.mozilla.javascript.tools.debugger.VariableModel r2;

        r2 := @this: org.mozilla.javascript.tools.debugger.VariableModel;

        i0 := @parameter0: int;

        $r0 = <org.mozilla.javascript.tools.debugger.VariableModel: java.lang.String[] cNames>;

        $r1 = $r0[i0];

        return $r1;
    }

    public java.lang.Class getColumnClass(int)
    {
        int i0;
        java.lang.Class[] $r0;
        java.lang.Class $r1;
        org.mozilla.javascript.tools.debugger.VariableModel r2;

        r2 := @this: org.mozilla.javascript.tools.debugger.VariableModel;

        i0 := @parameter0: int;

        $r0 = <org.mozilla.javascript.tools.debugger.VariableModel: java.lang.Class[] cTypes>;

        $r1 = $r0[i0];

        return $r1;
    }

    public java.lang.Object getValueAt(java.lang.Object, int)
    {
        org.mozilla.javascript.tools.debugger.VariableModel$VariableNode r3;
        org.mozilla.javascript.tools.debugger.VariableModel r0;
        java.lang.StringBuffer $r6;
        int i0, $i1, i3;
        java.lang.String $r7, $r8, r10;
        boolean $z0;
        char $c2, c4;
        java.lang.RuntimeException $r9;
        java.lang.Object r2, $r5;
        org.mozilla.javascript.tools.debugger.Dim $r1, $r4;

        r0 := @this: org.mozilla.javascript.tools.debugger.VariableModel;

        r2 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        $r1 = r0.<org.mozilla.javascript.tools.debugger.VariableModel: org.mozilla.javascript.tools.debugger.Dim debugger>;

        if $r1 != null goto label01;

        return null;

     label01:
        r3 = (org.mozilla.javascript.tools.debugger.VariableModel$VariableNode) r2;

        lookupswitch(i0)
        {
            case 0: goto label02;
            case 1: goto label03;
            default: goto label10;
        };

     label02:
        $r8 = virtualinvoke r3.<org.mozilla.javascript.tools.debugger.VariableModel$VariableNode: java.lang.String toString()>();

        return $r8;

     label03:
        $r4 = r0.<org.mozilla.javascript.tools.debugger.VariableModel: org.mozilla.javascript.tools.debugger.Dim debugger>;

        $r5 = virtualinvoke r0.<org.mozilla.javascript.tools.debugger.VariableModel: java.lang.Object getValue(org.mozilla.javascript.tools.debugger.VariableModel$VariableNode)>(r3);

        r10 = virtualinvoke $r4.<org.mozilla.javascript.tools.debugger.Dim: java.lang.String objectToString(java.lang.Object)>($r5);

     label04:
        goto label06;

     label05:
        $r9 := @caughtexception;

        r10 = virtualinvoke $r9.<java.lang.RuntimeException: java.lang.String getMessage()>();

     label06:
        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $i1 = virtualinvoke r10.<java.lang.String: int length()>();

        i3 = 0;

     label07:
        if i3 >= $i1 goto label09;

        $c2 = virtualinvoke r10.<java.lang.String: char charAt(int)>(i3);

        c4 = $c2;

        $z0 = staticinvoke <java.lang.Character: boolean isISOControl(char)>($c2);

        if $z0 == 0 goto label08;

        c4 = 32;

     label08:
        virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c4);

        i3 = i3 + 1;

        goto label07;

     label09:
        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r7;

     label10:
        return null;

        catch java.lang.RuntimeException from label03 to label04 with label05;
    }

    private org.mozilla.javascript.tools.debugger.VariableModel$VariableNode[] children(org.mozilla.javascript.tools.debugger.VariableModel$VariableNode)
    {
        java.lang.Object[] $r5;
        org.mozilla.javascript.tools.debugger.VariableModel$VariableNode r0, $r7;
        org.mozilla.javascript.tools.debugger.VariableModel r2;
        org.mozilla.javascript.tools.debugger.VariableModel$VariableNode[] $r1, $r9, r10;
        int $i0, $i1, $i2, i3;
        org.mozilla.javascript.tools.debugger.VariableModel$1 $r6;
        java.lang.Object $r3, $r8;
        org.mozilla.javascript.tools.debugger.Dim $r4;

        r2 := @this: org.mozilla.javascript.tools.debugger.VariableModel;

        r0 := @parameter0: org.mozilla.javascript.tools.debugger.VariableModel$VariableNode;

        $r1 = staticinvoke <org.mozilla.javascript.tools.debugger.VariableModel$VariableNode: org.mozilla.javascript.tools.debugger.VariableModel$VariableNode[] access$000(org.mozilla.javascript.tools.debugger.VariableModel$VariableNode)>(r0);

        if $r1 == null goto label1;

        $r9 = staticinvoke <org.mozilla.javascript.tools.debugger.VariableModel$VariableNode: org.mozilla.javascript.tools.debugger.VariableModel$VariableNode[] access$000(org.mozilla.javascript.tools.debugger.VariableModel$VariableNode)>(r0);

        return $r9;

     label1:
        $r3 = virtualinvoke r2.<org.mozilla.javascript.tools.debugger.VariableModel: java.lang.Object getValue(org.mozilla.javascript.tools.debugger.VariableModel$VariableNode)>(r0);

        $r4 = r2.<org.mozilla.javascript.tools.debugger.VariableModel: org.mozilla.javascript.tools.debugger.Dim debugger>;

        $r5 = virtualinvoke $r4.<org.mozilla.javascript.tools.debugger.Dim: java.lang.Object[] getObjectIds(java.lang.Object)>($r3);

        $i0 = lengthof $r5;

        if $i0 != 0 goto label2;

        r10 = <org.mozilla.javascript.tools.debugger.VariableModel: org.mozilla.javascript.tools.debugger.VariableModel$VariableNode[] CHILDLESS>;

        goto label4;

     label2:
        $r6 = new org.mozilla.javascript.tools.debugger.VariableModel$1;

        specialinvoke $r6.<org.mozilla.javascript.tools.debugger.VariableModel$1: void <init>(org.mozilla.javascript.tools.debugger.VariableModel)>(r2);

        staticinvoke <java.util.Arrays: void sort(java.lang.Object[],java.util.Comparator)>($r5, $r6);

        $i1 = lengthof $r5;

        r10 = newarray (org.mozilla.javascript.tools.debugger.VariableModel$VariableNode)[$i1];

        i3 = 0;

     label3:
        $i2 = lengthof $r5;

        if i3 == $i2 goto label4;

        $r7 = new org.mozilla.javascript.tools.debugger.VariableModel$VariableNode;

        $r8 = $r5[i3];

        specialinvoke $r7.<org.mozilla.javascript.tools.debugger.VariableModel$VariableNode: void <init>(java.lang.Object,java.lang.Object)>($r3, $r8);

        r10[i3] = $r7;

        i3 = i3 + 1;

        goto label3;

     label4:
        staticinvoke <org.mozilla.javascript.tools.debugger.VariableModel$VariableNode: org.mozilla.javascript.tools.debugger.VariableModel$VariableNode[] access$002(org.mozilla.javascript.tools.debugger.VariableModel$VariableNode,org.mozilla.javascript.tools.debugger.VariableModel$VariableNode[])>(r0, r10);

        return r10;
    }

    public java.lang.Object getValue(org.mozilla.javascript.tools.debugger.VariableModel$VariableNode)
    {
        org.mozilla.javascript.tools.debugger.VariableModel$VariableNode r1;
        java.lang.Object $r3, $r4, $r5;
        org.mozilla.javascript.tools.debugger.VariableModel r0;
        org.mozilla.javascript.tools.debugger.Dim $r2;
        java.lang.Exception $r6;

        r0 := @this: org.mozilla.javascript.tools.debugger.VariableModel;

        r1 := @parameter0: org.mozilla.javascript.tools.debugger.VariableModel$VariableNode;

     label1:
        $r2 = r0.<org.mozilla.javascript.tools.debugger.VariableModel: org.mozilla.javascript.tools.debugger.Dim debugger>;

        $r3 = staticinvoke <org.mozilla.javascript.tools.debugger.VariableModel$VariableNode: java.lang.Object access$100(org.mozilla.javascript.tools.debugger.VariableModel$VariableNode)>(r1);

        $r4 = staticinvoke <org.mozilla.javascript.tools.debugger.VariableModel$VariableNode: java.lang.Object access$200(org.mozilla.javascript.tools.debugger.VariableModel$VariableNode)>(r1);

        $r5 = virtualinvoke $r2.<org.mozilla.javascript.tools.debugger.Dim: java.lang.Object getObjectProperty(java.lang.Object,java.lang.Object)>($r3, $r4);

     label2:
        return $r5;

     label3:
        $r6 := @caughtexception;

        return "undefined";

        catch java.lang.Exception from label1 to label2 with label3;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0, $r4;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        $r4 = virtualinvoke $r2.<java.lang.ClassNotFoundException: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r4);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        org.mozilla.javascript.tools.debugger.VariableModel$VariableNode[] $r4;
        java.lang.Class[] $r1;
        java.lang.String[] $r0;
        java.lang.Class $r2, $r3, $r5, $r6;

        $r0 = newarray (java.lang.String)[2];

        $r0[0] = " Name";

        $r0[1] = " Value";

        <org.mozilla.javascript.tools.debugger.VariableModel: java.lang.String[] cNames> = $r0;

        $r1 = newarray (java.lang.Class)[2];

        $r2 = <org.mozilla.javascript.tools.debugger.VariableModel: java.lang.Class class$org$mozilla$javascript$tools$debugger$downloaded$TreeTableModel>;

        if $r2 != null goto label1;

        $r5 = staticinvoke <org.mozilla.javascript.tools.debugger.VariableModel: java.lang.Class class$(java.lang.String)>("org.mozilla.javascript.tools.debugger.downloaded.TreeTableModel");

        <org.mozilla.javascript.tools.debugger.VariableModel: java.lang.Class class$org$mozilla$javascript$tools$debugger$downloaded$TreeTableModel> = $r5;

        goto label2;

     label1:
        $r5 = <org.mozilla.javascript.tools.debugger.VariableModel: java.lang.Class class$org$mozilla$javascript$tools$debugger$downloaded$TreeTableModel>;

     label2:
        $r1[0] = $r5;

        $r3 = <org.mozilla.javascript.tools.debugger.VariableModel: java.lang.Class class$java$lang$String>;

        if $r3 != null goto label3;

        $r6 = staticinvoke <org.mozilla.javascript.tools.debugger.VariableModel: java.lang.Class class$(java.lang.String)>("java.lang.String");

        <org.mozilla.javascript.tools.debugger.VariableModel: java.lang.Class class$java$lang$String> = $r6;

        goto label4;

     label3:
        $r6 = <org.mozilla.javascript.tools.debugger.VariableModel: java.lang.Class class$java$lang$String>;

     label4:
        $r1[1] = $r6;

        <org.mozilla.javascript.tools.debugger.VariableModel: java.lang.Class[] cTypes> = $r1;

        $r4 = newarray (org.mozilla.javascript.tools.debugger.VariableModel$VariableNode)[0];

        <org.mozilla.javascript.tools.debugger.VariableModel: org.mozilla.javascript.tools.debugger.VariableModel$VariableNode[] CHILDLESS> = $r4;

        return;
    }
}
