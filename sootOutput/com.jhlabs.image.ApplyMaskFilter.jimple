public class com.jhlabs.image.ApplyMaskFilter extends com.jhlabs.image.AbstractBufferedImageOp
{
    private java.awt.image.BufferedImage destination;
    private java.awt.image.BufferedImage maskImage;

    public void <init>()
    {
        com.jhlabs.image.ApplyMaskFilter r0;

        r0 := @this: com.jhlabs.image.ApplyMaskFilter;

        specialinvoke r0.<com.jhlabs.image.AbstractBufferedImageOp: void <init>()>();

        return;
    }

    public void setDestination(java.awt.image.BufferedImage)
    {
        com.jhlabs.image.ApplyMaskFilter r0;
        java.awt.image.BufferedImage r1;

        r0 := @this: com.jhlabs.image.ApplyMaskFilter;

        r1 := @parameter0: java.awt.image.BufferedImage;

        r0.<com.jhlabs.image.ApplyMaskFilter: java.awt.image.BufferedImage destination> = r1;

        return;
    }

    public java.awt.image.BufferedImage getDestination()
    {
        com.jhlabs.image.ApplyMaskFilter r0;
        java.awt.image.BufferedImage $r1;

        r0 := @this: com.jhlabs.image.ApplyMaskFilter;

        $r1 = r0.<com.jhlabs.image.ApplyMaskFilter: java.awt.image.BufferedImage destination>;

        return $r1;
    }

    public void setMaskImage(java.awt.image.BufferedImage)
    {
        com.jhlabs.image.ApplyMaskFilter r0;
        java.awt.image.BufferedImage r1;

        r0 := @this: com.jhlabs.image.ApplyMaskFilter;

        r1 := @parameter0: java.awt.image.BufferedImage;

        r0.<com.jhlabs.image.ApplyMaskFilter: java.awt.image.BufferedImage maskImage> = r1;

        return;
    }

    public java.awt.image.BufferedImage getMaskImage()
    {
        com.jhlabs.image.ApplyMaskFilter r0;
        java.awt.image.BufferedImage $r1;

        r0 := @this: com.jhlabs.image.ApplyMaskFilter;

        $r1 = r0.<com.jhlabs.image.ApplyMaskFilter: java.awt.image.BufferedImage maskImage>;

        return $r1;
    }

    public static void composeThroughMask(java.awt.image.Raster, java.awt.image.WritableRaster, java.awt.image.Raster)
    {
        int[] $r1, $r3, $r5, r6, r7, r8;
        float $f0, f1, f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17, $f18, $f19, $f20, $f21, $f22;
        java.awt.image.Raster r0, r2;
        int $i0, $i1, $i2, i3, i4, $i5, i6, $i7, i8, $i9, i10, $i11, i12, $i13, i14, $i15, i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, i26, i27, i28, i29;
        java.awt.image.WritableRaster r4;

        r0 := @parameter0: java.awt.image.Raster;

        r4 := @parameter1: java.awt.image.WritableRaster;

        r2 := @parameter2: java.awt.image.Raster;

        $i0 = virtualinvoke r0.<java.awt.image.Raster: int getMinX()>();

        i26 = virtualinvoke r0.<java.awt.image.Raster: int getMinY()>();

        $i1 = virtualinvoke r0.<java.awt.image.Raster: int getWidth()>();

        $i2 = virtualinvoke r0.<java.awt.image.Raster: int getHeight()>();

        r6 = null;

        r7 = null;

        r8 = null;

        i27 = 0;

     label1:
        if i27 >= $i2 goto label4;

        $r1 = virtualinvoke r0.<java.awt.image.Raster: int[] getPixels(int,int,int,int,int[])>($i0, i26, $i1, 1, r6);

        r6 = $r1;

        $r3 = virtualinvoke r2.<java.awt.image.Raster: int[] getPixels(int,int,int,int,int[])>($i0, i26, $i1, 1, r7);

        r7 = $r3;

        $r5 = virtualinvoke r4.<java.awt.image.Raster: int[] getPixels(int,int,int,int,int[])>($i0, i26, $i1, 1, r8);

        r8 = $r5;

        i28 = $i0;

        i29 = 0;

     label2:
        if i29 >= $i1 goto label3;

        i3 = $r1[i28];

        i4 = $r5[i28];

        $i5 = i28 + 1;

        i6 = $r1[$i5];

        $i7 = i28 + 1;

        i8 = $r5[$i7];

        $i9 = i28 + 2;

        i10 = $r1[$i9];

        $i11 = i28 + 2;

        i12 = $r5[$i11];

        $i13 = i28 + 3;

        i14 = $r1[$i13];

        $i15 = i28 + 3;

        i16 = $r5[$i15];

        $i17 = i28 + 3;

        $i18 = $r3[$i17];

        $f0 = (float) $i18;

        f1 = $f0 / 255.0F;

        f2 = 1.0F - f1;

        $f3 = (float) i3;

        $f6 = f1 * $f3;

        $f4 = (float) i4;

        $f5 = f2 * $f4;

        $f7 = $f6 + $f5;

        $i19 = (int) $f7;

        $r5[i28] = $i19;

        $i21 = i28 + 1;

        $f8 = (float) i6;

        $f11 = f1 * $f8;

        $f9 = (float) i8;

        $f10 = f2 * $f9;

        $f12 = $f11 + $f10;

        $i20 = (int) $f12;

        $r5[$i21] = $i20;

        $i23 = i28 + 2;

        $f13 = (float) i10;

        $f16 = f1 * $f13;

        $f14 = (float) i12;

        $f15 = f2 * $f14;

        $f17 = $f16 + $f15;

        $i22 = (int) $f17;

        $r5[$i23] = $i22;

        $i25 = i28 + 3;

        $f18 = (float) i14;

        $f21 = f1 * $f18;

        $f19 = (float) i16;

        $f20 = f2 * $f19;

        $f22 = $f21 + $f20;

        $i24 = (int) $f22;

        $r5[$i25] = $i24;

        i28 = i28 + 4;

        i29 = i29 + 1;

        goto label2;

     label3:
        virtualinvoke r4.<java.awt.image.WritableRaster: void setPixels(int,int,int,int,int[])>($i0, i26, $i1, 1, $r5);

        i26 = i26 + 1;

        i27 = i27 + 1;

        goto label1;

     label4:
        return;
    }

    public java.awt.image.BufferedImage filter(java.awt.image.BufferedImage, java.awt.image.BufferedImage)
    {
        java.awt.image.BufferedImage r0, $r2, $r3, $r6, r8;
        com.jhlabs.image.ApplyMaskFilter r1;
        java.awt.image.WritableRaster $r4, $r5, $r7;

        r1 := @this: com.jhlabs.image.ApplyMaskFilter;

        r0 := @parameter0: java.awt.image.BufferedImage;

        r8 := @parameter1: java.awt.image.BufferedImage;

        virtualinvoke r0.<java.awt.image.BufferedImage: int getWidth()>();

        virtualinvoke r0.<java.awt.image.BufferedImage: int getHeight()>();

        virtualinvoke r0.<java.awt.image.BufferedImage: int getType()>();

        virtualinvoke r0.<java.awt.image.BufferedImage: java.awt.image.WritableRaster getRaster()>();

        if r8 != null goto label1;

        r8 = virtualinvoke r1.<com.jhlabs.image.AbstractBufferedImageOp: java.awt.image.BufferedImage createCompatibleDestImage(java.awt.image.BufferedImage,java.awt.image.ColorModel)>(r0, null);

     label1:
        virtualinvoke r8.<java.awt.image.BufferedImage: java.awt.image.WritableRaster getRaster()>();

        $r2 = r1.<com.jhlabs.image.ApplyMaskFilter: java.awt.image.BufferedImage destination>;

        if $r2 == null goto label2;

        $r3 = r1.<com.jhlabs.image.ApplyMaskFilter: java.awt.image.BufferedImage maskImage>;

        if $r3 == null goto label2;

        $r4 = virtualinvoke r0.<java.awt.image.BufferedImage: java.awt.image.WritableRaster getRaster()>();

        $r5 = virtualinvoke r8.<java.awt.image.BufferedImage: java.awt.image.WritableRaster getRaster()>();

        $r6 = r1.<com.jhlabs.image.ApplyMaskFilter: java.awt.image.BufferedImage maskImage>;

        $r7 = virtualinvoke $r6.<java.awt.image.BufferedImage: java.awt.image.WritableRaster getRaster()>();

        staticinvoke <com.jhlabs.image.ApplyMaskFilter: void composeThroughMask(java.awt.image.Raster,java.awt.image.WritableRaster,java.awt.image.Raster)>($r4, $r5, $r7);

     label2:
        return r8;
    }

    public java.lang.String toString()
    {
        com.jhlabs.image.ApplyMaskFilter r0;

        r0 := @this: com.jhlabs.image.ApplyMaskFilter;

        return "Keying/Key...";
    }
}
