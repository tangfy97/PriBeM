public class com.hp.hpl.jena.n3.turtle.parser.TurtleParser extends com.hp.hpl.jena.n3.turtle.ParserBase implements com.hp.hpl.jena.n3.turtle.parser.TurtleParserConstants
{
    public com.hp.hpl.jena.n3.turtle.parser.TurtleParserTokenManager token_source;
    com.hp.hpl.jena.n3.turtle.parser.JavaCharStream jj_input_stream;
    public com.hp.hpl.jena.n3.turtle.parser.Token token;
    public com.hp.hpl.jena.n3.turtle.parser.Token jj_nt;
    private int jj_ntk;
    private int jj_gen;
    private final int[] jj_la1;
    private static int[] jj_la1_0;
    private static int[] jj_la1_1;
    private static int[] jj_la1_2;
    private java.util.List jj_expentries;
    private int[] jj_expentry;
    private int jj_kind;

    public final void parse() throws com.hp.hpl.jena.n3.turtle.parser.ParseException
    {
        com.hp.hpl.jena.n3.turtle.parser.TurtleParser r0;
        int[] $r1, $r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i7, $i9;

        r0 := @this: com.hp.hpl.jena.n3.turtle.parser.TurtleParser;

        $i0 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int jj_ntk>;

        $i7 = (int) -1;

        if $i0 != $i7 goto label01;

        $i3 = specialinvoke r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int jj_ntk()>();

        goto label02;

     label01:
        $i3 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int jj_ntk>;

     label02:
        lookupswitch($i3)
        {
            case 58: goto label03;
            default: goto label04;
        };

     label03:
        specialinvoke r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: com.hp.hpl.jena.n3.turtle.parser.Token jj_consume_token(int)>(58);

        goto label05;

     label04:
        $r2 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int[] jj_la1>;

        $i2 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int jj_gen>;

        $r2[0] = $i2;

     label05:
        $i4 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int jj_ntk>;

        $i9 = (int) -1;

        if $i4 != $i9 goto label06;

        $i5 = specialinvoke r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int jj_ntk()>();

        goto label07;

     label06:
        $i5 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int jj_ntk>;

     label07:
        tableswitch($i5)
        {
            case 14: goto label08;
            case 15: goto label08;
            case 16: goto label08;
            case 17: goto label08;
            case 18: goto label08;
            case 19: goto label08;
            case 20: goto label08;
            case 21: goto label09;
            case 22: goto label09;
            case 23: goto label09;
            case 24: goto label09;
            case 25: goto label08;
            case 26: goto label08;
            case 27: goto label08;
            case 28: goto label08;
            case 29: goto label09;
            case 30: goto label08;
            case 31: goto label08;
            case 32: goto label08;
            case 33: goto label08;
            case 34: goto label08;
            case 35: goto label09;
            case 36: goto label09;
            case 37: goto label09;
            case 38: goto label08;
            case 39: goto label09;
            case 40: goto label08;
            case 41: goto label08;
            case 42: goto label09;
            case 43: goto label08;
            case 44: goto label09;
            case 45: goto label08;
            default: goto label09;
        };

     label08:
        goto label10;

     label09:
        $r1 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int[] jj_la1>;

        $i1 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int jj_gen>;

        $r1[1] = $i1;

        goto label11;

     label10:
        virtualinvoke r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: void Statement()>();

        goto label05;

     label11:
        specialinvoke r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: com.hp.hpl.jena.n3.turtle.parser.Token jj_consume_token(int)>(0);

        return;
    }

    public final void Statement() throws com.hp.hpl.jena.n3.turtle.parser.ParseException
    {
        com.hp.hpl.jena.n3.turtle.parser.TurtleParser r0;
        com.hp.hpl.jena.n3.turtle.parser.ParseException $r3;
        int[] $r1;
        int $i0, $i1, $i2, $i4, $i6;

        r0 := @this: com.hp.hpl.jena.n3.turtle.parser.TurtleParser;

        $i0 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int jj_ntk>;

        $i4 = (int) -1;

        if $i0 != $i4 goto label1;

        $i2 = specialinvoke r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int jj_ntk()>();

        goto label2;

     label1:
        $i2 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int jj_ntk>;

     label2:
        tableswitch($i2)
        {
            case 14: goto label3;
            case 15: goto label3;
            case 16: goto label4;
            case 17: goto label4;
            case 18: goto label4;
            case 19: goto label4;
            case 20: goto label4;
            case 21: goto label5;
            case 22: goto label5;
            case 23: goto label5;
            case 24: goto label5;
            case 25: goto label4;
            case 26: goto label4;
            case 27: goto label4;
            case 28: goto label4;
            case 29: goto label5;
            case 30: goto label4;
            case 31: goto label4;
            case 32: goto label4;
            case 33: goto label4;
            case 34: goto label4;
            case 35: goto label5;
            case 36: goto label5;
            case 37: goto label5;
            case 38: goto label4;
            case 39: goto label5;
            case 40: goto label4;
            case 41: goto label4;
            case 42: goto label5;
            case 43: goto label4;
            case 44: goto label5;
            case 45: goto label4;
            default: goto label5;
        };

     label3:
        virtualinvoke r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: void Directive()>();

        goto label6;

     label4:
        virtualinvoke r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: void TriplesSameSubject()>();

        goto label6;

     label5:
        $r1 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int[] jj_la1>;

        $i1 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int jj_gen>;

        $r1[2] = $i1;

        $i6 = (int) -1;

        specialinvoke r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: com.hp.hpl.jena.n3.turtle.parser.Token jj_consume_token(int)>($i6);

        $r3 = new com.hp.hpl.jena.n3.turtle.parser.ParseException;

        specialinvoke $r3.<com.hp.hpl.jena.n3.turtle.parser.ParseException: void <init>()>();

        throw $r3;

     label6:
        specialinvoke r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: com.hp.hpl.jena.n3.turtle.parser.Token jj_consume_token(int)>(48);

        return;
    }

    public final void Directive() throws com.hp.hpl.jena.n3.turtle.parser.ParseException
    {
        com.hp.hpl.jena.n3.turtle.parser.Token $r1, $r3;
        com.hp.hpl.jena.n3.turtle.parser.ParseException $r9;
        int[] $r7;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i10, $i12;
        java.lang.String $r2, $r4, $r5, $r6;
        com.hp.hpl.jena.n3.turtle.parser.TurtleParser r0;

        r0 := @this: com.hp.hpl.jena.n3.turtle.parser.TurtleParser;

        $i0 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int jj_ntk>;

        $i10 = (int) -1;

        if $i0 != $i10 goto label1;

        $i8 = specialinvoke r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int jj_ntk()>();

        goto label2;

     label1:
        $i8 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int jj_ntk>;

     label2:
        lookupswitch($i8)
        {
            case 14: goto label3;
            case 15: goto label4;
            default: goto label5;
        };

     label3:
        specialinvoke r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: com.hp.hpl.jena.n3.turtle.parser.Token jj_consume_token(int)>(14);

        $r3 = specialinvoke r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: com.hp.hpl.jena.n3.turtle.parser.Token jj_consume_token(int)>(31);

        $r4 = virtualinvoke r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: java.lang.String IRI_REF()>();

        $r5 = $r3.<com.hp.hpl.jena.n3.turtle.parser.Token: java.lang.String image>;

        $i4 = $r3.<com.hp.hpl.jena.n3.turtle.parser.Token: int beginLine>;

        $i3 = $r3.<com.hp.hpl.jena.n3.turtle.parser.Token: int beginColumn>;

        $r6 = virtualinvoke r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: java.lang.String fixupPrefix(java.lang.String,int,int)>($r5, $i4, $i3);

        $i6 = $r3.<com.hp.hpl.jena.n3.turtle.parser.Token: int beginLine>;

        $i5 = $r3.<com.hp.hpl.jena.n3.turtle.parser.Token: int beginColumn>;

        virtualinvoke r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: void setPrefix(int,int,java.lang.String,java.lang.String)>($i6, $i5, $r6, $r4);

        goto label6;

     label4:
        $r1 = specialinvoke r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: com.hp.hpl.jena.n3.turtle.parser.Token jj_consume_token(int)>(15);

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: java.lang.String IRI_REF()>();

        $i2 = $r1.<com.hp.hpl.jena.n3.turtle.parser.Token: int beginLine>;

        $i1 = $r1.<com.hp.hpl.jena.n3.turtle.parser.Token: int beginColumn>;

        virtualinvoke r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: void setBase(java.lang.String,int,int)>($r2, $i2, $i1);

        goto label6;

     label5:
        $r7 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int[] jj_la1>;

        $i7 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int jj_gen>;

        $r7[3] = $i7;

        $i12 = (int) -1;

        specialinvoke r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: com.hp.hpl.jena.n3.turtle.parser.Token jj_consume_token(int)>($i12);

        $r9 = new com.hp.hpl.jena.n3.turtle.parser.ParseException;

        specialinvoke $r9.<com.hp.hpl.jena.n3.turtle.parser.ParseException: void <init>()>();

        throw $r9;

     label6:
        return;
    }

    public final void TriplesSameSubject() throws com.hp.hpl.jena.n3.turtle.parser.ParseException
    {
        com.hp.hpl.jena.n3.turtle.parser.TurtleParser r0;
        com.hp.hpl.jena.graph.Node $r1, $r2;
        com.hp.hpl.jena.n3.turtle.parser.ParseException $r5;
        int[] $r3;
        int $i0, $i1, $i2, $i4, $i6;

        r0 := @this: com.hp.hpl.jena.n3.turtle.parser.TurtleParser;

        $i0 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int jj_ntk>;

        $i4 = (int) -1;

        if $i0 != $i4 goto label1;

        $i2 = specialinvoke r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int jj_ntk()>();

        goto label2;

     label1:
        $i2 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int jj_ntk>;

     label2:
        tableswitch($i2)
        {
            case 16: goto label3;
            case 17: goto label3;
            case 18: goto label3;
            case 19: goto label3;
            case 20: goto label3;
            case 21: goto label5;
            case 22: goto label5;
            case 23: goto label5;
            case 24: goto label5;
            case 25: goto label3;
            case 26: goto label3;
            case 27: goto label3;
            case 28: goto label3;
            case 29: goto label5;
            case 30: goto label3;
            case 31: goto label3;
            case 32: goto label3;
            case 33: goto label3;
            case 34: goto label3;
            case 35: goto label5;
            case 36: goto label5;
            case 37: goto label5;
            case 38: goto label4;
            case 39: goto label5;
            case 40: goto label3;
            case 41: goto label3;
            case 42: goto label5;
            case 43: goto label4;
            case 44: goto label5;
            case 45: goto label3;
            default: goto label5;
        };

     label3:
        $r2 = virtualinvoke r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: com.hp.hpl.jena.graph.Node VarOrTerm()>();

        virtualinvoke r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: void PropertyListNotEmpty(com.hp.hpl.jena.graph.Node)>($r2);

        goto label6;

     label4:
        $r1 = virtualinvoke r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: com.hp.hpl.jena.graph.Node TriplesNode()>();

        virtualinvoke r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: void PropertyList(com.hp.hpl.jena.graph.Node)>($r1);

        goto label6;

     label5:
        $r3 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int[] jj_la1>;

        $i1 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int jj_gen>;

        $r3[4] = $i1;

        $i6 = (int) -1;

        specialinvoke r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: com.hp.hpl.jena.n3.turtle.parser.Token jj_consume_token(int)>($i6);

        $r5 = new com.hp.hpl.jena.n3.turtle.parser.ParseException;

        specialinvoke $r5.<com.hp.hpl.jena.n3.turtle.parser.ParseException: void <init>()>();

        throw $r5;

     label6:
        return;
    }

    public final void PropertyList(com.hp.hpl.jena.graph.Node) throws com.hp.hpl.jena.n3.turtle.parser.ParseException
    {
        com.hp.hpl.jena.n3.turtle.parser.TurtleParser r0;
        int[] $r2;
        int $i0, $i1, $i2, $i4;
        com.hp.hpl.jena.graph.Node r1;

        r0 := @this: com.hp.hpl.jena.n3.turtle.parser.TurtleParser;

        r1 := @parameter0: com.hp.hpl.jena.graph.Node;

        $i0 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int jj_ntk>;

        $i4 = (int) -1;

        if $i0 != $i4 goto label1;

        $i2 = specialinvoke r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int jj_ntk()>();

        goto label2;

     label1:
        $i2 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int jj_ntk>;

     label2:
        lookupswitch($i2)
        {
            case 13: goto label3;
            case 30: goto label3;
            case 31: goto label3;
            case 32: goto label3;
            case 49: goto label3;
            case 50: goto label3;
            default: goto label4;
        };

     label3:
        virtualinvoke r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: void PropertyListNotEmpty(com.hp.hpl.jena.graph.Node)>(r1);

        goto label5;

     label4:
        $r2 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int[] jj_la1>;

        $i1 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int jj_gen>;

        $r2[5] = $i1;

     label5:
        return;
    }

    public final void PropertyListNotEmpty(com.hp.hpl.jena.graph.Node) throws com.hp.hpl.jena.n3.turtle.parser.ParseException
    {
        com.hp.hpl.jena.n3.turtle.parser.TurtleParser r0;
        com.hp.hpl.jena.graph.Node $r1, r2, $r3;
        int[] $r4, $r5;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i7, $i9;

        r0 := @this: com.hp.hpl.jena.n3.turtle.parser.TurtleParser;

        r2 := @parameter0: com.hp.hpl.jena.graph.Node;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: com.hp.hpl.jena.graph.Node Verb()>();

        virtualinvoke r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: void ObjectList(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r2, $r1);

     label01:
        $i3 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int jj_ntk>;

        $i7 = (int) -1;

        if $i3 != $i7 goto label02;

        $i4 = specialinvoke r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int jj_ntk()>();

        goto label03;

     label02:
        $i4 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int jj_ntk>;

     label03:
        lookupswitch($i4)
        {
            case 46: goto label04;
            default: goto label05;
        };

     label04:
        goto label06;

     label05:
        $r5 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int[] jj_la1>;

        $i2 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int jj_gen>;

        $r5[6] = $i2;

        goto label11;

     label06:
        specialinvoke r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: com.hp.hpl.jena.n3.turtle.parser.Token jj_consume_token(int)>(46);

        $i0 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int jj_ntk>;

        $i9 = (int) -1;

        if $i0 != $i9 goto label07;

        $i5 = specialinvoke r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int jj_ntk()>();

        goto label08;

     label07:
        $i5 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int jj_ntk>;

     label08:
        lookupswitch($i5)
        {
            case 13: goto label09;
            case 30: goto label09;
            case 31: goto label09;
            case 32: goto label09;
            case 49: goto label09;
            case 50: goto label09;
            default: goto label10;
        };

     label09:
        $r3 = virtualinvoke r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: com.hp.hpl.jena.graph.Node Verb()>();

        virtualinvoke r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: void ObjectList(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r2, $r3);

        goto label01;

     label10:
        $r4 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int[] jj_la1>;

        $i1 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int jj_gen>;

        $r4[7] = $i1;

        goto label01;

     label11:
        return;
    }

    public final void ObjectList(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node) throws com.hp.hpl.jena.n3.turtle.parser.ParseException
    {
        com.hp.hpl.jena.n3.turtle.parser.TurtleParser r0;
        com.hp.hpl.jena.graph.Node r1, r2;
        int[] $r3;
        int $i0, $i1, $i2, $i4;

        r0 := @this: com.hp.hpl.jena.n3.turtle.parser.TurtleParser;

        r1 := @parameter0: com.hp.hpl.jena.graph.Node;

        r2 := @parameter1: com.hp.hpl.jena.graph.Node;

        virtualinvoke r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: void Object(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r1, r2);

     label1:
        $i0 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int jj_ntk>;

        $i4 = (int) -1;

        if $i0 != $i4 goto label2;

        $i2 = specialinvoke r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int jj_ntk()>();

        goto label3;

     label2:
        $i2 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int jj_ntk>;

     label3:
        lookupswitch($i2)
        {
            case 47: goto label4;
            default: goto label5;
        };

     label4:
        goto label6;

     label5:
        $r3 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int[] jj_la1>;

        $i1 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int jj_gen>;

        $r3[8] = $i1;

        goto label7;

     label6:
        specialinvoke r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: com.hp.hpl.jena.n3.turtle.parser.Token jj_consume_token(int)>(47);

        virtualinvoke r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: void Object(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r1, r2);

        goto label1;

     label7:
        return;
    }

    public final void Object(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node) throws com.hp.hpl.jena.n3.turtle.parser.ParseException
    {
        com.hp.hpl.jena.n3.turtle.parser.TurtleParser r0;
        com.hp.hpl.jena.graph.Node $r1, r3, r4;
        com.hp.hpl.jena.n3.turtle.parser.Token $r5, $r6;
        com.hp.hpl.jena.graph.Triple $r2;
        int $i0, $i1;

        r0 := @this: com.hp.hpl.jena.n3.turtle.parser.TurtleParser;

        r3 := @parameter0: com.hp.hpl.jena.graph.Node;

        r4 := @parameter1: com.hp.hpl.jena.graph.Node;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: com.hp.hpl.jena.graph.Node GraphNode()>();

        $r2 = new com.hp.hpl.jena.graph.Triple;

        specialinvoke $r2.<com.hp.hpl.jena.graph.Triple: void <init>(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r3, r4, $r1);

        $r5 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: com.hp.hpl.jena.n3.turtle.parser.Token token>;

        $i1 = $r5.<com.hp.hpl.jena.n3.turtle.parser.Token: int beginLine>;

        $r6 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: com.hp.hpl.jena.n3.turtle.parser.Token token>;

        $i0 = $r6.<com.hp.hpl.jena.n3.turtle.parser.Token: int beginColumn>;

        virtualinvoke r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: void emitTriple(int,int,com.hp.hpl.jena.graph.Triple)>($i1, $i0, $r2);

        return;
    }

    public final com.hp.hpl.jena.graph.Node Verb() throws com.hp.hpl.jena.n3.turtle.parser.ParseException
    {
        com.hp.hpl.jena.n3.turtle.parser.Token $r1, $r2, $r3, $r4;
        com.hp.hpl.jena.graph.Node r8;
        com.hp.hpl.jena.n3.turtle.parser.ParseException $r9;
        int[] $r6;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i8, $i10;
        java.lang.String $r5;
        boolean $z0, $z1;
        com.hp.hpl.jena.n3.turtle.parser.TurtleParser r0;

        r0 := @this: com.hp.hpl.jena.n3.turtle.parser.TurtleParser;

        $i0 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int jj_ntk>;

        $i8 = (int) -1;

        if $i0 != $i8 goto label1;

        $i6 = specialinvoke r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int jj_ntk()>();

        goto label2;

     label1:
        $i6 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int jj_ntk>;

     label2:
        lookupswitch($i6)
        {
            case 13: goto label4;
            case 30: goto label3;
            case 31: goto label3;
            case 32: goto label3;
            case 49: goto label5;
            case 50: goto label6;
            default: goto label7;
        };

     label3:
        $r5 = virtualinvoke r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: java.lang.String IRIref()>();

        r8 = virtualinvoke r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: com.hp.hpl.jena.graph.Node createNode(java.lang.String)>($r5);

        goto label8;

     label4:
        specialinvoke r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: com.hp.hpl.jena.n3.turtle.parser.Token jj_consume_token(int)>(13);

        r8 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: com.hp.hpl.jena.graph.Node nRDFtype>;

        goto label8;

     label5:
        specialinvoke r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: com.hp.hpl.jena.n3.turtle.parser.Token jj_consume_token(int)>(49);

        r8 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: com.hp.hpl.jena.graph.Node nOwlSameAs>;

        $z1 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: boolean strictTurtle>;

        if $z1 == 0 goto label8;

        $r3 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: com.hp.hpl.jena.n3.turtle.parser.Token token>;

        $i4 = $r3.<com.hp.hpl.jena.n3.turtle.parser.Token: int beginLine>;

        $r4 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: com.hp.hpl.jena.n3.turtle.parser.Token token>;

        $i3 = $r4.<com.hp.hpl.jena.n3.turtle.parser.Token: int beginColumn>;

        virtualinvoke r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: void throwParseException(java.lang.String,int,int)>("= (owl:sameAs) not legal in Turtle", $i4, $i3);

        goto label8;

     label6:
        specialinvoke r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: com.hp.hpl.jena.n3.turtle.parser.Token jj_consume_token(int)>(50);

        r8 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: com.hp.hpl.jena.graph.Node nLogImplies>;

        $z0 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: boolean strictTurtle>;

        if $z0 == 0 goto label8;

        $r1 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: com.hp.hpl.jena.n3.turtle.parser.Token token>;

        $i2 = $r1.<com.hp.hpl.jena.n3.turtle.parser.Token: int beginLine>;

        $r2 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: com.hp.hpl.jena.n3.turtle.parser.Token token>;

        $i1 = $r2.<com.hp.hpl.jena.n3.turtle.parser.Token: int beginColumn>;

        virtualinvoke r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: void throwParseException(java.lang.String,int,int)>("=> (log:implies) not legal in Turtle", $i2, $i1);

        goto label8;

     label7:
        $r6 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int[] jj_la1>;

        $i5 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int jj_gen>;

        $r6[9] = $i5;

        $i10 = (int) -1;

        specialinvoke r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: com.hp.hpl.jena.n3.turtle.parser.Token jj_consume_token(int)>($i10);

        $r9 = new com.hp.hpl.jena.n3.turtle.parser.ParseException;

        specialinvoke $r9.<com.hp.hpl.jena.n3.turtle.parser.ParseException: void <init>()>();

        throw $r9;

     label8:
        return r8;
    }

    public final com.hp.hpl.jena.graph.Node TriplesNode() throws com.hp.hpl.jena.n3.turtle.parser.ParseException
    {
        com.hp.hpl.jena.n3.turtle.parser.TurtleParser r0;
        com.hp.hpl.jena.graph.Node $r1, $r2;
        com.hp.hpl.jena.n3.turtle.parser.ParseException $r5;
        int[] $r3;
        int $i0, $i1, $i2, $i4, $i6;

        r0 := @this: com.hp.hpl.jena.n3.turtle.parser.TurtleParser;

        $i0 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int jj_ntk>;

        $i4 = (int) -1;

        if $i0 != $i4 goto label1;

        $i2 = specialinvoke r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int jj_ntk()>();

        goto label2;

     label1:
        $i2 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int jj_ntk>;

     label2:
        lookupswitch($i2)
        {
            case 38: goto label3;
            case 43: goto label4;
            default: goto label5;
        };

     label3:
        $r2 = virtualinvoke r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: com.hp.hpl.jena.graph.Node Collection()>();

        return $r2;

     label4:
        $r1 = virtualinvoke r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: com.hp.hpl.jena.graph.Node BlankNodePropertyList()>();

        return $r1;

     label5:
        $r3 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int[] jj_la1>;

        $i1 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int jj_gen>;

        $r3[10] = $i1;

        $i6 = (int) -1;

        specialinvoke r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: com.hp.hpl.jena.n3.turtle.parser.Token jj_consume_token(int)>($i6);

        $r5 = new com.hp.hpl.jena.n3.turtle.parser.ParseException;

        specialinvoke $r5.<com.hp.hpl.jena.n3.turtle.parser.ParseException: void <init>()>();

        throw $r5;
    }

    public final com.hp.hpl.jena.graph.Node BlankNodePropertyList() throws com.hp.hpl.jena.n3.turtle.parser.ParseException
    {
        com.hp.hpl.jena.n3.turtle.parser.TurtleParser r0;
        com.hp.hpl.jena.graph.Node $r1;

        r0 := @this: com.hp.hpl.jena.n3.turtle.parser.TurtleParser;

        specialinvoke r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: com.hp.hpl.jena.n3.turtle.parser.Token jj_consume_token(int)>(43);

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: com.hp.hpl.jena.graph.Node createBNode()>();

        virtualinvoke r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: void PropertyListNotEmpty(com.hp.hpl.jena.graph.Node)>($r1);

        specialinvoke r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: com.hp.hpl.jena.n3.turtle.parser.Token jj_consume_token(int)>(44);

        return $r1;
    }

    public final com.hp.hpl.jena.graph.Node Collection() throws com.hp.hpl.jena.n3.turtle.parser.ParseException
    {
        com.hp.hpl.jena.graph.Node $r1, $r2, $r3, $r7, $r12, $r13, $r17, r18, r19;
        com.hp.hpl.jena.n3.turtle.parser.Token $r4, $r5, $r9, $r10, $r14, $r15;
        int[] $r8;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i10;
        com.hp.hpl.jena.n3.turtle.parser.TurtleParser r0;
        com.hp.hpl.jena.graph.Triple $r20, $r21, $r22;

        r0 := @this: com.hp.hpl.jena.n3.turtle.parser.TurtleParser;

        r18 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: com.hp.hpl.jena.graph.Node nRDFnil>;

        r19 = null;

        specialinvoke r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: com.hp.hpl.jena.n3.turtle.parser.Token jj_consume_token(int)>(38);

     label01:
        $r1 = virtualinvoke r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: com.hp.hpl.jena.graph.Node createBNode()>();

        $r2 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: com.hp.hpl.jena.graph.Node nRDFnil>;

        if r18 != $r2 goto label02;

        r18 = $r1;

     label02:
        if r19 == null goto label03;

        $r14 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: com.hp.hpl.jena.n3.turtle.parser.Token token>;

        $i6 = $r14.<com.hp.hpl.jena.n3.turtle.parser.Token: int beginLine>;

        $r15 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: com.hp.hpl.jena.n3.turtle.parser.Token token>;

        $i7 = $r15.<com.hp.hpl.jena.n3.turtle.parser.Token: int beginColumn>;

        $r20 = new com.hp.hpl.jena.graph.Triple;

        $r17 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: com.hp.hpl.jena.graph.Node nRDFrest>;

        specialinvoke $r20.<com.hp.hpl.jena.graph.Triple: void <init>(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r19, $r17, $r1);

        virtualinvoke r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: void emitTriple(int,int,com.hp.hpl.jena.graph.Triple)>($i6, $i7, $r20);

     label03:
        $r3 = virtualinvoke r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: com.hp.hpl.jena.graph.Node GraphNode()>();

        $r4 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: com.hp.hpl.jena.n3.turtle.parser.Token token>;

        $i0 = $r4.<com.hp.hpl.jena.n3.turtle.parser.Token: int beginLine>;

        $r5 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: com.hp.hpl.jena.n3.turtle.parser.Token token>;

        $i1 = $r5.<com.hp.hpl.jena.n3.turtle.parser.Token: int beginColumn>;

        $r21 = new com.hp.hpl.jena.graph.Triple;

        $r7 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: com.hp.hpl.jena.graph.Node nRDFfirst>;

        specialinvoke $r21.<com.hp.hpl.jena.graph.Triple: void <init>(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r1, $r7, $r3);

        virtualinvoke r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: void emitTriple(int,int,com.hp.hpl.jena.graph.Triple)>($i0, $i1, $r21);

        r19 = $r1;

        $i2 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int jj_ntk>;

        $i10 = (int) -1;

        if $i2 != $i10 goto label04;

        $i8 = specialinvoke r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int jj_ntk()>();

        goto label05;

     label04:
        $i8 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int jj_ntk>;

     label05:
        tableswitch($i8)
        {
            case 16: goto label06;
            case 17: goto label06;
            case 18: goto label06;
            case 19: goto label06;
            case 20: goto label06;
            case 21: goto label07;
            case 22: goto label07;
            case 23: goto label07;
            case 24: goto label07;
            case 25: goto label06;
            case 26: goto label06;
            case 27: goto label06;
            case 28: goto label06;
            case 29: goto label07;
            case 30: goto label06;
            case 31: goto label06;
            case 32: goto label06;
            case 33: goto label06;
            case 34: goto label06;
            case 35: goto label07;
            case 36: goto label07;
            case 37: goto label07;
            case 38: goto label06;
            case 39: goto label07;
            case 40: goto label06;
            case 41: goto label06;
            case 42: goto label07;
            case 43: goto label06;
            case 44: goto label07;
            case 45: goto label06;
            default: goto label07;
        };

     label06:
        goto label08;

     label07:
        $r8 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int[] jj_la1>;

        $i3 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int jj_gen>;

        $r8[11] = $i3;

        goto label09;

     label08:
        goto label01;

     label09:
        specialinvoke r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: com.hp.hpl.jena.n3.turtle.parser.Token jj_consume_token(int)>(39);

        if $r1 == null goto label10;

        $r9 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: com.hp.hpl.jena.n3.turtle.parser.Token token>;

        $i4 = $r9.<com.hp.hpl.jena.n3.turtle.parser.Token: int beginLine>;

        $r10 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: com.hp.hpl.jena.n3.turtle.parser.Token token>;

        $i5 = $r10.<com.hp.hpl.jena.n3.turtle.parser.Token: int beginColumn>;

        $r22 = new com.hp.hpl.jena.graph.Triple;

        $r13 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: com.hp.hpl.jena.graph.Node nRDFrest>;

        $r12 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: com.hp.hpl.jena.graph.Node nRDFnil>;

        specialinvoke $r22.<com.hp.hpl.jena.graph.Triple: void <init>(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r1, $r13, $r12);

        virtualinvoke r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: void emitTriple(int,int,com.hp.hpl.jena.graph.Triple)>($i4, $i5, $r22);

     label10:
        return r18;
    }

    public final com.hp.hpl.jena.graph.Node GraphNode() throws com.hp.hpl.jena.n3.turtle.parser.ParseException
    {
        com.hp.hpl.jena.n3.turtle.parser.TurtleParser r0;
        com.hp.hpl.jena.graph.Node $r1, $r2;
        com.hp.hpl.jena.n3.turtle.parser.ParseException $r5;
        int[] $r3;
        int $i0, $i1, $i2, $i4, $i6;

        r0 := @this: com.hp.hpl.jena.n3.turtle.parser.TurtleParser;

        $i0 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int jj_ntk>;

        $i4 = (int) -1;

        if $i0 != $i4 goto label1;

        $i2 = specialinvoke r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int jj_ntk()>();

        goto label2;

     label1:
        $i2 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int jj_ntk>;

     label2:
        tableswitch($i2)
        {
            case 16: goto label3;
            case 17: goto label3;
            case 18: goto label3;
            case 19: goto label3;
            case 20: goto label3;
            case 21: goto label5;
            case 22: goto label5;
            case 23: goto label5;
            case 24: goto label5;
            case 25: goto label3;
            case 26: goto label3;
            case 27: goto label3;
            case 28: goto label3;
            case 29: goto label5;
            case 30: goto label3;
            case 31: goto label3;
            case 32: goto label3;
            case 33: goto label3;
            case 34: goto label3;
            case 35: goto label5;
            case 36: goto label5;
            case 37: goto label5;
            case 38: goto label4;
            case 39: goto label5;
            case 40: goto label3;
            case 41: goto label3;
            case 42: goto label5;
            case 43: goto label4;
            case 44: goto label5;
            case 45: goto label3;
            default: goto label5;
        };

     label3:
        $r2 = virtualinvoke r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: com.hp.hpl.jena.graph.Node VarOrTerm()>();

        return $r2;

     label4:
        $r1 = virtualinvoke r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: com.hp.hpl.jena.graph.Node TriplesNode()>();

        return $r1;

     label5:
        $r3 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int[] jj_la1>;

        $i1 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int jj_gen>;

        $r3[12] = $i1;

        $i6 = (int) -1;

        specialinvoke r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: com.hp.hpl.jena.n3.turtle.parser.Token jj_consume_token(int)>($i6);

        $r5 = new com.hp.hpl.jena.n3.turtle.parser.ParseException;

        specialinvoke $r5.<com.hp.hpl.jena.n3.turtle.parser.ParseException: void <init>()>();

        throw $r5;
    }

    public final com.hp.hpl.jena.graph.Node VarOrTerm() throws com.hp.hpl.jena.n3.turtle.parser.ParseException
    {
        com.hp.hpl.jena.n3.turtle.parser.TurtleParser r0;
        com.hp.hpl.jena.graph.Node r3;
        com.hp.hpl.jena.n3.turtle.parser.ParseException $r4;
        int[] $r1;
        int $i0, $i1, $i2, $i4, $i6;

        r0 := @this: com.hp.hpl.jena.n3.turtle.parser.TurtleParser;

        $i0 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int jj_ntk>;

        $i4 = (int) -1;

        if $i0 != $i4 goto label1;

        $i2 = specialinvoke r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int jj_ntk()>();

        goto label2;

     label1:
        $i2 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int jj_ntk>;

     label2:
        tableswitch($i2)
        {
            case 16: goto label4;
            case 17: goto label4;
            case 18: goto label4;
            case 19: goto label4;
            case 20: goto label4;
            case 21: goto label6;
            case 22: goto label6;
            case 23: goto label6;
            case 24: goto label6;
            case 25: goto label4;
            case 26: goto label4;
            case 27: goto label4;
            case 28: goto label4;
            case 29: goto label6;
            case 30: goto label4;
            case 31: goto label4;
            case 32: goto label4;
            case 33: goto label4;
            case 34: goto label3;
            case 35: goto label6;
            case 36: goto label6;
            case 37: goto label6;
            case 38: goto label6;
            case 39: goto label6;
            case 40: goto label4;
            case 41: goto label5;
            case 42: goto label6;
            case 43: goto label6;
            case 44: goto label6;
            case 45: goto label4;
            default: goto label6;
        };

     label3:
        r3 = virtualinvoke r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: com.hp.hpl.jena.graph.Node Var()>();

        goto label7;

     label4:
        r3 = virtualinvoke r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: com.hp.hpl.jena.graph.Node GraphTerm()>();

        goto label7;

     label5:
        r3 = virtualinvoke r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: com.hp.hpl.jena.graph.Node Formula()>();

        goto label7;

     label6:
        $r1 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int[] jj_la1>;

        $i1 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int jj_gen>;

        $r1[13] = $i1;

        $i6 = (int) -1;

        specialinvoke r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: com.hp.hpl.jena.n3.turtle.parser.Token jj_consume_token(int)>($i6);

        $r4 = new com.hp.hpl.jena.n3.turtle.parser.ParseException;

        specialinvoke $r4.<com.hp.hpl.jena.n3.turtle.parser.ParseException: void <init>()>();

        throw $r4;

     label7:
        return r3;
    }

    public final com.hp.hpl.jena.graph.Node Formula() throws com.hp.hpl.jena.n3.turtle.parser.ParseException
    {
        com.hp.hpl.jena.n3.turtle.parser.Token $r1, $r4;
        int[] $r2, $r3;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i11, $i13;
        com.hp.hpl.jena.n3.turtle.parser.TurtleParser r0;

        r0 := @this: com.hp.hpl.jena.n3.turtle.parser.TurtleParser;

        $r1 = specialinvoke r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: com.hp.hpl.jena.n3.turtle.parser.Token jj_consume_token(int)>(41);

        $i1 = $r1.<com.hp.hpl.jena.n3.turtle.parser.Token: int beginLine>;

        $i0 = $r1.<com.hp.hpl.jena.n3.turtle.parser.Token: int beginColumn>;

        virtualinvoke r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: void startFormula(int,int)>($i1, $i0);

        virtualinvoke r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: void TriplesSameSubject()>();

     label01:
        $i7 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int jj_ntk>;

        $i11 = (int) -1;

        if $i7 != $i11 goto label02;

        $i8 = specialinvoke r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int jj_ntk()>();

        goto label03;

     label02:
        $i8 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int jj_ntk>;

     label03:
        lookupswitch($i8)
        {
            case 48: goto label04;
            default: goto label05;
        };

     label04:
        goto label06;

     label05:
        $r3 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int[] jj_la1>;

        $i4 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int jj_gen>;

        $r3[14] = $i4;

        goto label11;

     label06:
        specialinvoke r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: com.hp.hpl.jena.n3.turtle.parser.Token jj_consume_token(int)>(48);

        $i2 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int jj_ntk>;

        $i13 = (int) -1;

        if $i2 != $i13 goto label07;

        $i9 = specialinvoke r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int jj_ntk()>();

        goto label08;

     label07:
        $i9 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int jj_ntk>;

     label08:
        tableswitch($i9)
        {
            case 16: goto label09;
            case 17: goto label09;
            case 18: goto label09;
            case 19: goto label09;
            case 20: goto label09;
            case 21: goto label10;
            case 22: goto label10;
            case 23: goto label10;
            case 24: goto label10;
            case 25: goto label09;
            case 26: goto label09;
            case 27: goto label09;
            case 28: goto label09;
            case 29: goto label10;
            case 30: goto label09;
            case 31: goto label09;
            case 32: goto label09;
            case 33: goto label09;
            case 34: goto label09;
            case 35: goto label10;
            case 36: goto label10;
            case 37: goto label10;
            case 38: goto label09;
            case 39: goto label10;
            case 40: goto label09;
            case 41: goto label09;
            case 42: goto label10;
            case 43: goto label09;
            case 44: goto label10;
            case 45: goto label09;
            default: goto label10;
        };

     label09:
        virtualinvoke r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: void TriplesSameSubject()>();

        goto label01;

     label10:
        $r2 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int[] jj_la1>;

        $i3 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int jj_gen>;

        $r2[15] = $i3;

        goto label01;

     label11:
        $r4 = specialinvoke r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: com.hp.hpl.jena.n3.turtle.parser.Token jj_consume_token(int)>(42);

        $i6 = $r4.<com.hp.hpl.jena.n3.turtle.parser.Token: int beginLine>;

        $i5 = $r4.<com.hp.hpl.jena.n3.turtle.parser.Token: int beginColumn>;

        virtualinvoke r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: void endFormula(int,int)>($i6, $i5);

        return null;
    }

    public final com.hp.hpl.jena.graph.Node Var() throws com.hp.hpl.jena.n3.turtle.parser.ParseException
    {
        com.hp.hpl.jena.n3.turtle.parser.TurtleParser r0;
        int $i0, $i1;
        com.hp.hpl.jena.n3.turtle.parser.Token $r1;
        java.lang.String $r2;
        com.hp.hpl.jena.graph.Node $r3;

        r0 := @this: com.hp.hpl.jena.n3.turtle.parser.TurtleParser;

        $r1 = specialinvoke r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: com.hp.hpl.jena.n3.turtle.parser.Token jj_consume_token(int)>(34);

        $r2 = $r1.<com.hp.hpl.jena.n3.turtle.parser.Token: java.lang.String image>;

        $i1 = $r1.<com.hp.hpl.jena.n3.turtle.parser.Token: int beginLine>;

        $i0 = $r1.<com.hp.hpl.jena.n3.turtle.parser.Token: int beginColumn>;

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: com.hp.hpl.jena.graph.Node createVariable(java.lang.String,int,int)>($r2, $i1, $i0);

        return $r3;
    }

    public final com.hp.hpl.jena.graph.Node GraphTerm() throws com.hp.hpl.jena.n3.turtle.parser.ParseException
    {
        com.hp.hpl.jena.n3.turtle.parser.TurtleParser r0;
        com.hp.hpl.jena.graph.Node $r1, $r2, $r4, $r5, $r6, $r7;
        com.hp.hpl.jena.n3.turtle.parser.ParseException $r10;
        int[] $r8;
        int $i0, $i1, $i2, $i4, $i6;
        java.lang.String $r3;

        r0 := @this: com.hp.hpl.jena.n3.turtle.parser.TurtleParser;

        $i0 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int jj_ntk>;

        $i4 = (int) -1;

        if $i0 != $i4 goto label1;

        $i2 = specialinvoke r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int jj_ntk()>();

        goto label2;

     label1:
        $i2 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int jj_ntk>;

     label2:
        tableswitch($i2)
        {
            case 16: goto label6;
            case 17: goto label6;
            case 18: goto label5;
            case 19: goto label5;
            case 20: goto label5;
            case 21: goto label9;
            case 22: goto label9;
            case 23: goto label9;
            case 24: goto label9;
            case 25: goto label4;
            case 26: goto label4;
            case 27: goto label4;
            case 28: goto label4;
            case 29: goto label9;
            case 30: goto label3;
            case 31: goto label3;
            case 32: goto label3;
            case 33: goto label7;
            case 34: goto label9;
            case 35: goto label9;
            case 36: goto label9;
            case 37: goto label9;
            case 38: goto label9;
            case 39: goto label9;
            case 40: goto label8;
            case 41: goto label9;
            case 42: goto label9;
            case 43: goto label9;
            case 44: goto label9;
            case 45: goto label7;
            default: goto label9;
        };

     label3:
        $r3 = virtualinvoke r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: java.lang.String IRIref()>();

        $r4 = virtualinvoke r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: com.hp.hpl.jena.graph.Node createNode(java.lang.String)>($r3);

        return $r4;

     label4:
        $r5 = virtualinvoke r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: com.hp.hpl.jena.graph.Node RDFLiteral()>();

        return $r5;

     label5:
        $r6 = virtualinvoke r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: com.hp.hpl.jena.graph.Node NumericLiteral()>();

        return $r6;

     label6:
        $r7 = virtualinvoke r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: com.hp.hpl.jena.graph.Node BooleanLiteral()>();

        return $r7;

     label7:
        $r2 = virtualinvoke r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: com.hp.hpl.jena.graph.Node BlankNode()>();

        return $r2;

     label8:
        specialinvoke r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: com.hp.hpl.jena.n3.turtle.parser.Token jj_consume_token(int)>(40);

        $r1 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: com.hp.hpl.jena.graph.Node nRDFnil>;

        return $r1;

     label9:
        $r8 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int[] jj_la1>;

        $i1 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int jj_gen>;

        $r8[16] = $i1;

        $i6 = (int) -1;

        specialinvoke r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: com.hp.hpl.jena.n3.turtle.parser.Token jj_consume_token(int)>($i6);

        $r10 = new com.hp.hpl.jena.n3.turtle.parser.ParseException;

        specialinvoke $r10.<com.hp.hpl.jena.n3.turtle.parser.ParseException: void <init>()>();

        throw $r10;
    }

    public final com.hp.hpl.jena.graph.Node NumericLiteral() throws com.hp.hpl.jena.n3.turtle.parser.ParseException
    {
        com.hp.hpl.jena.n3.turtle.parser.Token $r1, $r4, $r7;
        com.hp.hpl.jena.graph.Node $r3, $r6, $r9;
        com.hp.hpl.jena.n3.turtle.parser.ParseException $r12;
        int[] $r10;
        int $i0, $i1, $i2, $i4, $i6;
        java.lang.String $r2, $r5, $r8;
        com.hp.hpl.jena.n3.turtle.parser.TurtleParser r0;

        r0 := @this: com.hp.hpl.jena.n3.turtle.parser.TurtleParser;

        $i0 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int jj_ntk>;

        $i4 = (int) -1;

        if $i0 != $i4 goto label1;

        $i2 = specialinvoke r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int jj_ntk()>();

        goto label2;

     label1:
        $i2 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int jj_ntk>;

     label2:
        tableswitch($i2)
        {
            case 18: goto label3;
            case 19: goto label4;
            case 20: goto label5;
            default: goto label6;
        };

     label3:
        $r7 = specialinvoke r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: com.hp.hpl.jena.n3.turtle.parser.Token jj_consume_token(int)>(18);

        $r8 = $r7.<com.hp.hpl.jena.n3.turtle.parser.Token: java.lang.String image>;

        $r9 = virtualinvoke r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: com.hp.hpl.jena.graph.Node createLiteralInteger(java.lang.String)>($r8);

        return $r9;

     label4:
        $r4 = specialinvoke r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: com.hp.hpl.jena.n3.turtle.parser.Token jj_consume_token(int)>(19);

        $r5 = $r4.<com.hp.hpl.jena.n3.turtle.parser.Token: java.lang.String image>;

        $r6 = virtualinvoke r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: com.hp.hpl.jena.graph.Node createLiteralDecimal(java.lang.String)>($r5);

        return $r6;

     label5:
        $r1 = specialinvoke r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: com.hp.hpl.jena.n3.turtle.parser.Token jj_consume_token(int)>(20);

        $r2 = $r1.<com.hp.hpl.jena.n3.turtle.parser.Token: java.lang.String image>;

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: com.hp.hpl.jena.graph.Node createLiteralDouble(java.lang.String)>($r2);

        return $r3;

     label6:
        $r10 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int[] jj_la1>;

        $i1 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int jj_gen>;

        $r10[17] = $i1;

        $i6 = (int) -1;

        specialinvoke r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: com.hp.hpl.jena.n3.turtle.parser.Token jj_consume_token(int)>($i6);

        $r12 = new com.hp.hpl.jena.n3.turtle.parser.ParseException;

        specialinvoke $r12.<com.hp.hpl.jena.n3.turtle.parser.ParseException: void <init>()>();

        throw $r12;
    }

    public final com.hp.hpl.jena.graph.Node RDFLiteral() throws com.hp.hpl.jena.n3.turtle.parser.ParseException
    {
        com.hp.hpl.jena.graph.Node $r7;
        com.hp.hpl.jena.n3.turtle.parser.ParseException $r8;
        int[] $r2, $r4;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i7, $i9, $i11;
        java.lang.String $r1, r5, r6;
        com.hp.hpl.jena.n3.turtle.parser.TurtleParser r0;

        r0 := @this: com.hp.hpl.jena.n3.turtle.parser.TurtleParser;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: java.lang.String String()>();

        r5 = null;

        r6 = null;

        $i0 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int jj_ntk>;

        $i7 = (int) -1;

        if $i0 != $i7 goto label01;

        $i4 = specialinvoke r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int jj_ntk()>();

        goto label02;

     label01:
        $i4 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int jj_ntk>;

     label02:
        lookupswitch($i4)
        {
            case 14: goto label03;
            case 15: goto label03;
            case 35: goto label03;
            case 59: goto label03;
            default: goto label09;
        };

     label03:
        $i1 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int jj_ntk>;

        $i9 = (int) -1;

        if $i1 != $i9 goto label04;

        $i5 = specialinvoke r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int jj_ntk()>();

        goto label05;

     label04:
        $i5 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int jj_ntk>;

     label05:
        lookupswitch($i5)
        {
            case 14: goto label06;
            case 15: goto label06;
            case 35: goto label06;
            case 59: goto label07;
            default: goto label08;
        };

     label06:
        r5 = virtualinvoke r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: java.lang.String Langtag()>();

        goto label10;

     label07:
        specialinvoke r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: com.hp.hpl.jena.n3.turtle.parser.Token jj_consume_token(int)>(59);

        r6 = virtualinvoke r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: java.lang.String IRIref()>();

        goto label10;

     label08:
        $r2 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int[] jj_la1>;

        $i2 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int jj_gen>;

        $r2[18] = $i2;

        $i11 = (int) -1;

        specialinvoke r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: com.hp.hpl.jena.n3.turtle.parser.Token jj_consume_token(int)>($i11);

        $r8 = new com.hp.hpl.jena.n3.turtle.parser.ParseException;

        specialinvoke $r8.<com.hp.hpl.jena.n3.turtle.parser.ParseException: void <init>()>();

        throw $r8;

     label09:
        $r4 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int[] jj_la1>;

        $i3 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int jj_gen>;

        $r4[19] = $i3;

     label10:
        $r7 = virtualinvoke r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: com.hp.hpl.jena.graph.Node createLiteral(java.lang.String,java.lang.String,java.lang.String)>($r1, r5, r6);

        return $r7;
    }

    public final java.lang.String Langtag() throws com.hp.hpl.jena.n3.turtle.parser.ParseException
    {
        com.hp.hpl.jena.n3.turtle.parser.TurtleParser r0;
        com.hp.hpl.jena.n3.turtle.parser.Token r5;
        com.hp.hpl.jena.n3.turtle.parser.ParseException $r6;
        int[] $r3;
        int $i0, $i1, $i2, $i4, $i6;
        java.lang.String $r1, $r2;

        r0 := @this: com.hp.hpl.jena.n3.turtle.parser.TurtleParser;

        $i0 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int jj_ntk>;

        $i4 = (int) -1;

        if $i0 != $i4 goto label1;

        $i2 = specialinvoke r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int jj_ntk()>();

        goto label2;

     label1:
        $i2 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int jj_ntk>;

     label2:
        lookupswitch($i2)
        {
            case 14: goto label4;
            case 15: goto label4;
            case 35: goto label3;
            default: goto label5;
        };

     label3:
        r5 = specialinvoke r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: com.hp.hpl.jena.n3.turtle.parser.Token jj_consume_token(int)>(35);

        goto label6;

     label4:
        r5 = virtualinvoke r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: com.hp.hpl.jena.n3.turtle.parser.Token AnyDirective()>();

        goto label6;

     label5:
        $r3 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int[] jj_la1>;

        $i1 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int jj_gen>;

        $r3[20] = $i1;

        $i6 = (int) -1;

        specialinvoke r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: com.hp.hpl.jena.n3.turtle.parser.Token jj_consume_token(int)>($i6);

        $r6 = new com.hp.hpl.jena.n3.turtle.parser.ParseException;

        specialinvoke $r6.<com.hp.hpl.jena.n3.turtle.parser.ParseException: void <init>()>();

        throw $r6;

     label6:
        $r1 = r5.<com.hp.hpl.jena.n3.turtle.parser.Token: java.lang.String image>;

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: java.lang.String stripChars(java.lang.String,int)>($r1, 1);

        return $r2;
    }

    public final com.hp.hpl.jena.n3.turtle.parser.Token AnyDirective() throws com.hp.hpl.jena.n3.turtle.parser.ParseException
    {
        com.hp.hpl.jena.n3.turtle.parser.TurtleParser r0;
        com.hp.hpl.jena.n3.turtle.parser.Token r3;
        com.hp.hpl.jena.n3.turtle.parser.ParseException $r4;
        int[] $r1;
        int $i0, $i1, $i2, $i4, $i6;

        r0 := @this: com.hp.hpl.jena.n3.turtle.parser.TurtleParser;

        $i0 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int jj_ntk>;

        $i4 = (int) -1;

        if $i0 != $i4 goto label1;

        $i2 = specialinvoke r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int jj_ntk()>();

        goto label2;

     label1:
        $i2 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int jj_ntk>;

     label2:
        lookupswitch($i2)
        {
            case 14: goto label3;
            case 15: goto label4;
            default: goto label5;
        };

     label3:
        r3 = specialinvoke r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: com.hp.hpl.jena.n3.turtle.parser.Token jj_consume_token(int)>(14);

        goto label6;

     label4:
        r3 = specialinvoke r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: com.hp.hpl.jena.n3.turtle.parser.Token jj_consume_token(int)>(15);

        goto label6;

     label5:
        $r1 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int[] jj_la1>;

        $i1 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int jj_gen>;

        $r1[21] = $i1;

        $i6 = (int) -1;

        specialinvoke r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: com.hp.hpl.jena.n3.turtle.parser.Token jj_consume_token(int)>($i6);

        $r4 = new com.hp.hpl.jena.n3.turtle.parser.ParseException;

        specialinvoke $r4.<com.hp.hpl.jena.n3.turtle.parser.ParseException: void <init>()>();

        throw $r4;

     label6:
        return r3;
    }

    public final com.hp.hpl.jena.graph.Node BooleanLiteral() throws com.hp.hpl.jena.n3.turtle.parser.ParseException
    {
        com.hp.hpl.jena.n3.turtle.parser.TurtleParser r0;
        com.hp.hpl.jena.graph.Node $r1, $r2;
        com.hp.hpl.jena.n3.turtle.parser.ParseException $r5;
        int[] $r3;
        int $i0, $i1, $i2, $i4, $i6;

        r0 := @this: com.hp.hpl.jena.n3.turtle.parser.TurtleParser;

        $i0 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int jj_ntk>;

        $i4 = (int) -1;

        if $i0 != $i4 goto label1;

        $i2 = specialinvoke r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int jj_ntk()>();

        goto label2;

     label1:
        $i2 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int jj_ntk>;

     label2:
        lookupswitch($i2)
        {
            case 16: goto label3;
            case 17: goto label4;
            default: goto label5;
        };

     label3:
        specialinvoke r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: com.hp.hpl.jena.n3.turtle.parser.Token jj_consume_token(int)>(16);

        $r2 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: com.hp.hpl.jena.graph.Node XSD_TRUE>;

        return $r2;

     label4:
        specialinvoke r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: com.hp.hpl.jena.n3.turtle.parser.Token jj_consume_token(int)>(17);

        $r1 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: com.hp.hpl.jena.graph.Node XSD_FALSE>;

        return $r1;

     label5:
        $r3 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int[] jj_la1>;

        $i1 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int jj_gen>;

        $r3[22] = $i1;

        $i6 = (int) -1;

        specialinvoke r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: com.hp.hpl.jena.n3.turtle.parser.Token jj_consume_token(int)>($i6);

        $r5 = new com.hp.hpl.jena.n3.turtle.parser.ParseException;

        specialinvoke $r5.<com.hp.hpl.jena.n3.turtle.parser.ParseException: void <init>()>();

        throw $r5;
    }

    public final java.lang.String String() throws com.hp.hpl.jena.n3.turtle.parser.ParseException
    {
        com.hp.hpl.jena.n3.turtle.parser.Token $r1, $r3, $r5, $r7, r11;
        com.hp.hpl.jena.n3.turtle.parser.ParseException $r14;
        int[] $r9;
        int $i0, $i1, $i2, $i3, $i4, $i6, $i8;
        java.lang.String $r2, $r4, $r6, $r8, r12, $r13;
        com.hp.hpl.jena.n3.turtle.parser.TurtleParser r0;

        r0 := @this: com.hp.hpl.jena.n3.turtle.parser.TurtleParser;

        $i0 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int jj_ntk>;

        $i6 = (int) -1;

        if $i0 != $i6 goto label1;

        $i2 = specialinvoke r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int jj_ntk()>();

        goto label2;

     label1:
        $i2 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int jj_ntk>;

     label2:
        tableswitch($i2)
        {
            case 25: goto label3;
            case 26: goto label4;
            case 27: goto label5;
            case 28: goto label6;
            default: goto label7;
        };

     label3:
        $r7 = specialinvoke r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: com.hp.hpl.jena.n3.turtle.parser.Token jj_consume_token(int)>(25);

        r11 = $r7;

        $r8 = $r7.<com.hp.hpl.jena.n3.turtle.parser.Token: java.lang.String image>;

        r12 = virtualinvoke r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: java.lang.String stripQuotes(java.lang.String)>($r8);

        goto label8;

     label4:
        $r5 = specialinvoke r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: com.hp.hpl.jena.n3.turtle.parser.Token jj_consume_token(int)>(26);

        r11 = $r5;

        $r6 = $r5.<com.hp.hpl.jena.n3.turtle.parser.Token: java.lang.String image>;

        r12 = virtualinvoke r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: java.lang.String stripQuotes(java.lang.String)>($r6);

        goto label8;

     label5:
        $r3 = specialinvoke r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: com.hp.hpl.jena.n3.turtle.parser.Token jj_consume_token(int)>(27);

        r11 = $r3;

        $r4 = $r3.<com.hp.hpl.jena.n3.turtle.parser.Token: java.lang.String image>;

        r12 = virtualinvoke r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: java.lang.String stripQuotes3(java.lang.String)>($r4);

        goto label8;

     label6:
        $r1 = specialinvoke r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: com.hp.hpl.jena.n3.turtle.parser.Token jj_consume_token(int)>(28);

        r11 = $r1;

        $r2 = $r1.<com.hp.hpl.jena.n3.turtle.parser.Token: java.lang.String image>;

        r12 = virtualinvoke r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: java.lang.String stripQuotes3(java.lang.String)>($r2);

        goto label8;

     label7:
        $r9 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int[] jj_la1>;

        $i1 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int jj_gen>;

        $r9[23] = $i1;

        $i8 = (int) -1;

        specialinvoke r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: com.hp.hpl.jena.n3.turtle.parser.Token jj_consume_token(int)>($i8);

        $r14 = new com.hp.hpl.jena.n3.turtle.parser.ParseException;

        specialinvoke $r14.<com.hp.hpl.jena.n3.turtle.parser.ParseException: void <init>()>();

        throw $r14;

     label8:
        $i3 = r11.<com.hp.hpl.jena.n3.turtle.parser.Token: int beginLine>;

        $i4 = r11.<com.hp.hpl.jena.n3.turtle.parser.Token: int beginColumn>;

        $r13 = virtualinvoke r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: java.lang.String unescapeStr(java.lang.String,int,int)>(r12, $i3, $i4);

        return $r13;
    }

    public final java.lang.String IRIref() throws com.hp.hpl.jena.n3.turtle.parser.ParseException
    {
        com.hp.hpl.jena.n3.turtle.parser.TurtleParser r0;
        com.hp.hpl.jena.n3.turtle.parser.ParseException $r5;
        int[] $r3;
        int $i0, $i1, $i2, $i4, $i6;
        java.lang.String $r1, $r2;

        r0 := @this: com.hp.hpl.jena.n3.turtle.parser.TurtleParser;

        $i0 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int jj_ntk>;

        $i4 = (int) -1;

        if $i0 != $i4 goto label1;

        $i2 = specialinvoke r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int jj_ntk()>();

        goto label2;

     label1:
        $i2 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int jj_ntk>;

     label2:
        tableswitch($i2)
        {
            case 30: goto label3;
            case 31: goto label4;
            case 32: goto label4;
            default: goto label5;
        };

     label3:
        $r2 = virtualinvoke r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: java.lang.String IRI_REF()>();

        return $r2;

     label4:
        $r1 = virtualinvoke r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: java.lang.String PrefixedName()>();

        return $r1;

     label5:
        $r3 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int[] jj_la1>;

        $i1 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int jj_gen>;

        $r3[24] = $i1;

        $i6 = (int) -1;

        specialinvoke r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: com.hp.hpl.jena.n3.turtle.parser.Token jj_consume_token(int)>($i6);

        $r5 = new com.hp.hpl.jena.n3.turtle.parser.ParseException;

        specialinvoke $r5.<com.hp.hpl.jena.n3.turtle.parser.ParseException: void <init>()>();

        throw $r5;
    }

    public final java.lang.String PrefixedName() throws com.hp.hpl.jena.n3.turtle.parser.ParseException
    {
        com.hp.hpl.jena.n3.turtle.parser.Token $r1, $r4;
        com.hp.hpl.jena.n3.turtle.parser.ParseException $r9;
        int[] $r7;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i8, $i10;
        java.lang.String $r2, $r3, $r5, $r6;
        com.hp.hpl.jena.n3.turtle.parser.TurtleParser r0;

        r0 := @this: com.hp.hpl.jena.n3.turtle.parser.TurtleParser;

        $i0 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int jj_ntk>;

        $i8 = (int) -1;

        if $i0 != $i8 goto label1;

        $i6 = specialinvoke r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int jj_ntk()>();

        goto label2;

     label1:
        $i6 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int jj_ntk>;

     label2:
        lookupswitch($i6)
        {
            case 31: goto label4;
            case 32: goto label3;
            default: goto label5;
        };

     label3:
        $r1 = specialinvoke r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: com.hp.hpl.jena.n3.turtle.parser.Token jj_consume_token(int)>(32);

        $r2 = $r1.<com.hp.hpl.jena.n3.turtle.parser.Token: java.lang.String image>;

        $i2 = $r1.<com.hp.hpl.jena.n3.turtle.parser.Token: int beginLine>;

        $i1 = $r1.<com.hp.hpl.jena.n3.turtle.parser.Token: int beginColumn>;

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: java.lang.String resolvePName(java.lang.String,int,int)>($r2, $i2, $i1);

        return $r3;

     label4:
        $r4 = specialinvoke r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: com.hp.hpl.jena.n3.turtle.parser.Token jj_consume_token(int)>(31);

        $r5 = $r4.<com.hp.hpl.jena.n3.turtle.parser.Token: java.lang.String image>;

        $i4 = $r4.<com.hp.hpl.jena.n3.turtle.parser.Token: int beginLine>;

        $i3 = $r4.<com.hp.hpl.jena.n3.turtle.parser.Token: int beginColumn>;

        $r6 = virtualinvoke r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: java.lang.String resolvePName(java.lang.String,int,int)>($r5, $i4, $i3);

        return $r6;

     label5:
        $r7 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int[] jj_la1>;

        $i5 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int jj_gen>;

        $r7[25] = $i5;

        $i10 = (int) -1;

        specialinvoke r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: com.hp.hpl.jena.n3.turtle.parser.Token jj_consume_token(int)>($i10);

        $r9 = new com.hp.hpl.jena.n3.turtle.parser.ParseException;

        specialinvoke $r9.<com.hp.hpl.jena.n3.turtle.parser.ParseException: void <init>()>();

        throw $r9;
    }

    public final com.hp.hpl.jena.graph.Node BlankNode() throws com.hp.hpl.jena.n3.turtle.parser.ParseException
    {
        com.hp.hpl.jena.n3.turtle.parser.TurtleParser r0;
        com.hp.hpl.jena.graph.Node $r1, $r4;
        com.hp.hpl.jena.n3.turtle.parser.Token $r2;
        com.hp.hpl.jena.n3.turtle.parser.ParseException $r7;
        int[] $r5;
        int $i0, $i1, $i2, $i3, $i4, $i6, $i8;
        java.lang.String $r3;

        r0 := @this: com.hp.hpl.jena.n3.turtle.parser.TurtleParser;

        $i0 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int jj_ntk>;

        $i6 = (int) -1;

        if $i0 != $i6 goto label1;

        $i4 = specialinvoke r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int jj_ntk()>();

        goto label2;

     label1:
        $i4 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int jj_ntk>;

     label2:
        lookupswitch($i4)
        {
            case 33: goto label3;
            case 45: goto label4;
            default: goto label5;
        };

     label3:
        $r2 = specialinvoke r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: com.hp.hpl.jena.n3.turtle.parser.Token jj_consume_token(int)>(33);

        $r3 = $r2.<com.hp.hpl.jena.n3.turtle.parser.Token: java.lang.String image>;

        $i2 = $r2.<com.hp.hpl.jena.n3.turtle.parser.Token: int beginLine>;

        $i1 = $r2.<com.hp.hpl.jena.n3.turtle.parser.Token: int beginColumn>;

        $r4 = virtualinvoke r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: com.hp.hpl.jena.graph.Node createBNode(java.lang.String,int,int)>($r3, $i2, $i1);

        return $r4;

     label4:
        specialinvoke r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: com.hp.hpl.jena.n3.turtle.parser.Token jj_consume_token(int)>(45);

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: com.hp.hpl.jena.graph.Node createBNode()>();

        return $r1;

     label5:
        $r5 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int[] jj_la1>;

        $i3 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int jj_gen>;

        $r5[26] = $i3;

        $i8 = (int) -1;

        specialinvoke r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: com.hp.hpl.jena.n3.turtle.parser.Token jj_consume_token(int)>($i8);

        $r7 = new com.hp.hpl.jena.n3.turtle.parser.ParseException;

        specialinvoke $r7.<com.hp.hpl.jena.n3.turtle.parser.ParseException: void <init>()>();

        throw $r7;
    }

    public final java.lang.String IRI_REF() throws com.hp.hpl.jena.n3.turtle.parser.ParseException
    {
        com.hp.hpl.jena.n3.turtle.parser.TurtleParser r0;
        int $i0, $i1;
        com.hp.hpl.jena.n3.turtle.parser.Token $r1;
        java.lang.String $r2, $r3;

        r0 := @this: com.hp.hpl.jena.n3.turtle.parser.TurtleParser;

        $r1 = specialinvoke r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: com.hp.hpl.jena.n3.turtle.parser.Token jj_consume_token(int)>(30);

        $r2 = $r1.<com.hp.hpl.jena.n3.turtle.parser.Token: java.lang.String image>;

        $i1 = $r1.<com.hp.hpl.jena.n3.turtle.parser.Token: int beginLine>;

        $i0 = $r1.<com.hp.hpl.jena.n3.turtle.parser.Token: int beginColumn>;

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: java.lang.String resolveQuotedIRI(java.lang.String,int,int)>($r2, $i1, $i0);

        return $r3;
    }

    private static void jj_la1_init_0()
    {
        int[] $r0;
        int $i1, $i3, $i5, $i7, $i9;

        $r0 = newarray (int)[27];

        $r0[0] = 0;

        $r0[1] = -568344576;

        $r0[2] = -568344576;

        $i1 = (int) 49152;

        $r0[3] = $i1;

        $r0[4] = -568393728;

        $r0[5] = -1073733632;

        $r0[6] = 0;

        $r0[7] = -1073733632;

        $r0[8] = 0;

        $r0[9] = -1073733632;

        $r0[10] = 0;

        $r0[11] = -568393728;

        $r0[12] = -568393728;

        $r0[13] = -568393728;

        $r0[14] = 0;

        $r0[15] = -568393728;

        $r0[16] = -568393728;

        $r0[17] = 1835008;

        $i3 = (int) 49152;

        $r0[18] = $i3;

        $i5 = (int) 49152;

        $r0[19] = $i5;

        $i7 = (int) 49152;

        $r0[20] = $i7;

        $i9 = (int) 49152;

        $r0[21] = $i9;

        $r0[22] = 196608;

        $r0[23] = 503316480;

        $r0[24] = -1073741824;

        $r0[25] = -2147483648;

        $r0[26] = 0;

        <com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int[] jj_la1_0> = $r0;

        return;
    }

    private static void jj_la1_init_1()
    {
        int $i1;
        int[] $r0;

        $r0 = newarray (int)[27];

        $r0[0] = 67108864;

        $r0[1] = 11079;

        $r0[2] = 11079;

        $r0[3] = 0;

        $r0[4] = 11079;

        $r0[5] = 393217;

        $r0[6] = 16384;

        $r0[7] = 393217;

        $i1 = (int) 32768;

        $r0[8] = $i1;

        $r0[9] = 393217;

        $r0[10] = 2112;

        $r0[11] = 11079;

        $r0[12] = 11079;

        $r0[13] = 8967;

        $r0[14] = 65536;

        $r0[15] = 11079;

        $r0[16] = 8451;

        $r0[17] = 0;

        $r0[18] = 134217736;

        $r0[19] = 134217736;

        $r0[20] = 8;

        $r0[21] = 0;

        $r0[22] = 0;

        $r0[23] = 0;

        $r0[24] = 1;

        $r0[25] = 1;

        $r0[26] = 8194;

        <com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int[] jj_la1_1> = $r0;

        return;
    }

    private static void jj_la1_init_2()
    {
        int[] $r0;

        $r0 = newarray (int)[27];

        $r0[0] = 0;

        $r0[1] = 0;

        $r0[2] = 0;

        $r0[3] = 0;

        $r0[4] = 0;

        $r0[5] = 0;

        $r0[6] = 0;

        $r0[7] = 0;

        $r0[8] = 0;

        $r0[9] = 0;

        $r0[10] = 0;

        $r0[11] = 0;

        $r0[12] = 0;

        $r0[13] = 0;

        $r0[14] = 0;

        $r0[15] = 0;

        $r0[16] = 0;

        $r0[17] = 0;

        $r0[18] = 0;

        $r0[19] = 0;

        $r0[20] = 0;

        $r0[21] = 0;

        $r0[22] = 0;

        $r0[23] = 0;

        $r0[24] = 0;

        $r0[25] = 0;

        $r0[26] = 0;

        <com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int[] jj_la1_2> = $r0;

        return;
    }

    public void <init>(java.io.InputStream)
    {
        com.hp.hpl.jena.n3.turtle.parser.TurtleParser r0;
        java.io.InputStream r1;

        r0 := @this: com.hp.hpl.jena.n3.turtle.parser.TurtleParser;

        r1 := @parameter0: java.io.InputStream;

        specialinvoke r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: void <init>(java.io.InputStream,java.lang.String)>(r1, null);

        return;
    }

    public void <init>(java.io.InputStream, java.lang.String)
    {
        com.hp.hpl.jena.n3.turtle.parser.JavaCharStream $r7, $r13;
        com.hp.hpl.jena.n3.turtle.parser.Token $r16;
        java.util.ArrayList $r12;
        int[] $r1, $r9;
        int i0, $i2, $i4, $i6;
        java.lang.String r5;
        com.hp.hpl.jena.n3.turtle.parser.TurtleParserTokenManager $r15;
        com.hp.hpl.jena.n3.turtle.parser.TurtleParser r0;
        java.lang.RuntimeException $r14;
        java.io.UnsupportedEncodingException $r10;
        java.io.InputStream r4;

        r0 := @this: com.hp.hpl.jena.n3.turtle.parser.TurtleParser;

        r4 := @parameter0: java.io.InputStream;

        r5 := @parameter1: java.lang.String;

        specialinvoke r0.<com.hp.hpl.jena.n3.turtle.ParserBase: void <init>()>();

        $r1 = newarray (int)[27];

        r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int[] jj_la1> = $r1;

        $r12 = new java.util.ArrayList;

        specialinvoke $r12.<java.util.ArrayList: void <init>()>();

        r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: java.util.List jj_expentries> = $r12;

        $i2 = (int) -1;

        r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int jj_kind> = $i2;

     label1:
        $r13 = new com.hp.hpl.jena.n3.turtle.parser.JavaCharStream;

        specialinvoke $r13.<com.hp.hpl.jena.n3.turtle.parser.JavaCharStream: void <init>(java.io.InputStream,java.lang.String,int,int)>(r4, r5, 1, 1);

        r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: com.hp.hpl.jena.n3.turtle.parser.JavaCharStream jj_input_stream> = $r13;

     label2:
        goto label4;

     label3:
        $r10 := @caughtexception;

        $r14 = new java.lang.RuntimeException;

        specialinvoke $r14.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r10);

        throw $r14;

     label4:
        $r15 = new com.hp.hpl.jena.n3.turtle.parser.TurtleParserTokenManager;

        $r7 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: com.hp.hpl.jena.n3.turtle.parser.JavaCharStream jj_input_stream>;

        specialinvoke $r15.<com.hp.hpl.jena.n3.turtle.parser.TurtleParserTokenManager: void <init>(com.hp.hpl.jena.n3.turtle.parser.JavaCharStream)>($r7);

        r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: com.hp.hpl.jena.n3.turtle.parser.TurtleParserTokenManager token_source> = $r15;

        $r16 = new com.hp.hpl.jena.n3.turtle.parser.Token;

        specialinvoke $r16.<com.hp.hpl.jena.n3.turtle.parser.Token: void <init>()>();

        r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: com.hp.hpl.jena.n3.turtle.parser.Token token> = $r16;

        $i4 = (int) -1;

        r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int jj_ntk> = $i4;

        r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int jj_gen> = 0;

        i0 = 0;

     label5:
        if i0 >= 27 goto label6;

        $r9 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int[] jj_la1>;

        $i6 = (int) -1;

        $r9[i0] = $i6;

        i0 = i0 + 1;

        goto label5;

     label6:
        return;

        catch java.io.UnsupportedEncodingException from label1 to label2 with label3;
    }

    public void ReInit(java.io.InputStream)
    {
        com.hp.hpl.jena.n3.turtle.parser.TurtleParser r0;
        java.io.InputStream r1;

        r0 := @this: com.hp.hpl.jena.n3.turtle.parser.TurtleParser;

        r1 := @parameter0: java.io.InputStream;

        virtualinvoke r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: void ReInit(java.io.InputStream,java.lang.String)>(r1, null);

        return;
    }

    public void ReInit(java.io.InputStream, java.lang.String)
    {
        com.hp.hpl.jena.n3.turtle.parser.TurtleParser r0;
        com.hp.hpl.jena.n3.turtle.parser.JavaCharStream $r3, $r4;
        java.lang.RuntimeException $r10;
        com.hp.hpl.jena.n3.turtle.parser.Token $r11;
        int[] $r7;
        int i0, $i2, $i4;
        java.lang.String r2;
        java.io.UnsupportedEncodingException $r8;
        com.hp.hpl.jena.n3.turtle.parser.TurtleParserTokenManager $r5;
        java.io.InputStream r1;

        r0 := @this: com.hp.hpl.jena.n3.turtle.parser.TurtleParser;

        r1 := @parameter0: java.io.InputStream;

        r2 := @parameter1: java.lang.String;

     label1:
        $r3 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: com.hp.hpl.jena.n3.turtle.parser.JavaCharStream jj_input_stream>;

        virtualinvoke $r3.<com.hp.hpl.jena.n3.turtle.parser.JavaCharStream: void ReInit(java.io.InputStream,java.lang.String,int,int)>(r1, r2, 1, 1);

     label2:
        goto label4;

     label3:
        $r8 := @caughtexception;

        $r10 = new java.lang.RuntimeException;

        specialinvoke $r10.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r8);

        throw $r10;

     label4:
        $r5 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: com.hp.hpl.jena.n3.turtle.parser.TurtleParserTokenManager token_source>;

        $r4 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: com.hp.hpl.jena.n3.turtle.parser.JavaCharStream jj_input_stream>;

        virtualinvoke $r5.<com.hp.hpl.jena.n3.turtle.parser.TurtleParserTokenManager: void ReInit(com.hp.hpl.jena.n3.turtle.parser.JavaCharStream)>($r4);

        $r11 = new com.hp.hpl.jena.n3.turtle.parser.Token;

        specialinvoke $r11.<com.hp.hpl.jena.n3.turtle.parser.Token: void <init>()>();

        r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: com.hp.hpl.jena.n3.turtle.parser.Token token> = $r11;

        $i2 = (int) -1;

        r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int jj_ntk> = $i2;

        r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int jj_gen> = 0;

        i0 = 0;

     label5:
        if i0 >= 27 goto label6;

        $r7 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int[] jj_la1>;

        $i4 = (int) -1;

        $r7[i0] = $i4;

        i0 = i0 + 1;

        goto label5;

     label6:
        return;

        catch java.io.UnsupportedEncodingException from label1 to label2 with label3;
    }

    public void <init>(java.io.Reader)
    {
        com.hp.hpl.jena.n3.turtle.parser.TurtleParser r0;
        com.hp.hpl.jena.n3.turtle.parser.JavaCharStream $r6, $r10;
        java.io.Reader r4;
        com.hp.hpl.jena.n3.turtle.parser.Token $r12;
        java.util.ArrayList $r9;
        int[] $r1, $r8;
        int i0, $i2, $i4, $i6;
        com.hp.hpl.jena.n3.turtle.parser.TurtleParserTokenManager $r11;

        r0 := @this: com.hp.hpl.jena.n3.turtle.parser.TurtleParser;

        r4 := @parameter0: java.io.Reader;

        specialinvoke r0.<com.hp.hpl.jena.n3.turtle.ParserBase: void <init>()>();

        $r1 = newarray (int)[27];

        r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int[] jj_la1> = $r1;

        $r9 = new java.util.ArrayList;

        specialinvoke $r9.<java.util.ArrayList: void <init>()>();

        r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: java.util.List jj_expentries> = $r9;

        $i2 = (int) -1;

        r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int jj_kind> = $i2;

        $r10 = new com.hp.hpl.jena.n3.turtle.parser.JavaCharStream;

        specialinvoke $r10.<com.hp.hpl.jena.n3.turtle.parser.JavaCharStream: void <init>(java.io.Reader,int,int)>(r4, 1, 1);

        r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: com.hp.hpl.jena.n3.turtle.parser.JavaCharStream jj_input_stream> = $r10;

        $r11 = new com.hp.hpl.jena.n3.turtle.parser.TurtleParserTokenManager;

        $r6 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: com.hp.hpl.jena.n3.turtle.parser.JavaCharStream jj_input_stream>;

        specialinvoke $r11.<com.hp.hpl.jena.n3.turtle.parser.TurtleParserTokenManager: void <init>(com.hp.hpl.jena.n3.turtle.parser.JavaCharStream)>($r6);

        r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: com.hp.hpl.jena.n3.turtle.parser.TurtleParserTokenManager token_source> = $r11;

        $r12 = new com.hp.hpl.jena.n3.turtle.parser.Token;

        specialinvoke $r12.<com.hp.hpl.jena.n3.turtle.parser.Token: void <init>()>();

        r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: com.hp.hpl.jena.n3.turtle.parser.Token token> = $r12;

        $i4 = (int) -1;

        r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int jj_ntk> = $i4;

        r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int jj_gen> = 0;

        i0 = 0;

     label1:
        if i0 >= 27 goto label2;

        $r8 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int[] jj_la1>;

        $i6 = (int) -1;

        $r8[i0] = $i6;

        i0 = i0 + 1;

        goto label1;

     label2:
        return;
    }

    public void ReInit(java.io.Reader)
    {
        com.hp.hpl.jena.n3.turtle.parser.TurtleParser r0;
        com.hp.hpl.jena.n3.turtle.parser.JavaCharStream $r2, $r3;
        java.io.Reader r1;
        com.hp.hpl.jena.n3.turtle.parser.Token $r7;
        int[] $r6;
        int i0, $i2, $i4;
        com.hp.hpl.jena.n3.turtle.parser.TurtleParserTokenManager $r4;

        r0 := @this: com.hp.hpl.jena.n3.turtle.parser.TurtleParser;

        r1 := @parameter0: java.io.Reader;

        $r2 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: com.hp.hpl.jena.n3.turtle.parser.JavaCharStream jj_input_stream>;

        virtualinvoke $r2.<com.hp.hpl.jena.n3.turtle.parser.JavaCharStream: void ReInit(java.io.Reader,int,int)>(r1, 1, 1);

        $r4 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: com.hp.hpl.jena.n3.turtle.parser.TurtleParserTokenManager token_source>;

        $r3 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: com.hp.hpl.jena.n3.turtle.parser.JavaCharStream jj_input_stream>;

        virtualinvoke $r4.<com.hp.hpl.jena.n3.turtle.parser.TurtleParserTokenManager: void ReInit(com.hp.hpl.jena.n3.turtle.parser.JavaCharStream)>($r3);

        $r7 = new com.hp.hpl.jena.n3.turtle.parser.Token;

        specialinvoke $r7.<com.hp.hpl.jena.n3.turtle.parser.Token: void <init>()>();

        r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: com.hp.hpl.jena.n3.turtle.parser.Token token> = $r7;

        $i2 = (int) -1;

        r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int jj_ntk> = $i2;

        r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int jj_gen> = 0;

        i0 = 0;

     label1:
        if i0 >= 27 goto label2;

        $r6 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int[] jj_la1>;

        $i4 = (int) -1;

        $r6[i0] = $i4;

        i0 = i0 + 1;

        goto label1;

     label2:
        return;
    }

    public void <init>(com.hp.hpl.jena.n3.turtle.parser.TurtleParserTokenManager)
    {
        com.hp.hpl.jena.n3.turtle.parser.TurtleParser r0;
        com.hp.hpl.jena.n3.turtle.parser.Token $r7;
        java.util.ArrayList $r6;
        int[] $r1, $r5;
        int i0, $i2, $i4, $i6;
        com.hp.hpl.jena.n3.turtle.parser.TurtleParserTokenManager r3;

        r0 := @this: com.hp.hpl.jena.n3.turtle.parser.TurtleParser;

        r3 := @parameter0: com.hp.hpl.jena.n3.turtle.parser.TurtleParserTokenManager;

        specialinvoke r0.<com.hp.hpl.jena.n3.turtle.ParserBase: void <init>()>();

        $r1 = newarray (int)[27];

        r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int[] jj_la1> = $r1;

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: java.util.List jj_expentries> = $r6;

        $i2 = (int) -1;

        r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int jj_kind> = $i2;

        r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: com.hp.hpl.jena.n3.turtle.parser.TurtleParserTokenManager token_source> = r3;

        $r7 = new com.hp.hpl.jena.n3.turtle.parser.Token;

        specialinvoke $r7.<com.hp.hpl.jena.n3.turtle.parser.Token: void <init>()>();

        r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: com.hp.hpl.jena.n3.turtle.parser.Token token> = $r7;

        $i4 = (int) -1;

        r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int jj_ntk> = $i4;

        r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int jj_gen> = 0;

        i0 = 0;

     label1:
        if i0 >= 27 goto label2;

        $r5 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int[] jj_la1>;

        $i6 = (int) -1;

        $r5[i0] = $i6;

        i0 = i0 + 1;

        goto label1;

     label2:
        return;
    }

    public void ReInit(com.hp.hpl.jena.n3.turtle.parser.TurtleParserTokenManager)
    {
        com.hp.hpl.jena.n3.turtle.parser.TurtleParser r0;
        int[] $r3;
        int i0, $i2, $i4;
        com.hp.hpl.jena.n3.turtle.parser.Token $r4;
        com.hp.hpl.jena.n3.turtle.parser.TurtleParserTokenManager r1;

        r0 := @this: com.hp.hpl.jena.n3.turtle.parser.TurtleParser;

        r1 := @parameter0: com.hp.hpl.jena.n3.turtle.parser.TurtleParserTokenManager;

        r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: com.hp.hpl.jena.n3.turtle.parser.TurtleParserTokenManager token_source> = r1;

        $r4 = new com.hp.hpl.jena.n3.turtle.parser.Token;

        specialinvoke $r4.<com.hp.hpl.jena.n3.turtle.parser.Token: void <init>()>();

        r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: com.hp.hpl.jena.n3.turtle.parser.Token token> = $r4;

        $i2 = (int) -1;

        r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int jj_ntk> = $i2;

        r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int jj_gen> = 0;

        i0 = 0;

     label1:
        if i0 >= 27 goto label2;

        $r3 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int[] jj_la1>;

        $i4 = (int) -1;

        $r3[i0] = $i4;

        i0 = i0 + 1;

        goto label1;

     label2:
        return;
    }

    private com.hp.hpl.jena.n3.turtle.parser.Token jj_consume_token(int) throws com.hp.hpl.jena.n3.turtle.parser.ParseException
    {
        com.hp.hpl.jena.n3.turtle.parser.Token $r1, $r2, $r4, $r5, $r6, $r8, $r9, $r10;
        com.hp.hpl.jena.n3.turtle.parser.ParseException $r7;
        int i0, $i1, $i2, $i3, $i5;
        com.hp.hpl.jena.n3.turtle.parser.TurtleParserTokenManager $r3;
        com.hp.hpl.jena.n3.turtle.parser.TurtleParser r0;

        r0 := @this: com.hp.hpl.jena.n3.turtle.parser.TurtleParser;

        i0 := @parameter0: int;

        $r1 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: com.hp.hpl.jena.n3.turtle.parser.Token token>;

        $r2 = $r1.<com.hp.hpl.jena.n3.turtle.parser.Token: com.hp.hpl.jena.n3.turtle.parser.Token next>;

        if $r2 == null goto label1;

        $r9 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: com.hp.hpl.jena.n3.turtle.parser.Token token>;

        $r10 = $r9.<com.hp.hpl.jena.n3.turtle.parser.Token: com.hp.hpl.jena.n3.turtle.parser.Token next>;

        r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: com.hp.hpl.jena.n3.turtle.parser.Token token> = $r10;

        goto label2;

     label1:
        $r4 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: com.hp.hpl.jena.n3.turtle.parser.Token token>;

        $r3 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: com.hp.hpl.jena.n3.turtle.parser.TurtleParserTokenManager token_source>;

        $r5 = virtualinvoke $r3.<com.hp.hpl.jena.n3.turtle.parser.TurtleParserTokenManager: com.hp.hpl.jena.n3.turtle.parser.Token getNextToken()>();

        $r4.<com.hp.hpl.jena.n3.turtle.parser.Token: com.hp.hpl.jena.n3.turtle.parser.Token next> = $r5;

        r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: com.hp.hpl.jena.n3.turtle.parser.Token token> = $r5;

     label2:
        $i5 = (int) -1;

        r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int jj_ntk> = $i5;

        $r6 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: com.hp.hpl.jena.n3.turtle.parser.Token token>;

        $i1 = $r6.<com.hp.hpl.jena.n3.turtle.parser.Token: int kind>;

        if $i1 != i0 goto label3;

        $i2 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int jj_gen>;

        $i3 = $i2 + 1;

        r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int jj_gen> = $i3;

        $r8 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: com.hp.hpl.jena.n3.turtle.parser.Token token>;

        return $r8;

     label3:
        r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: com.hp.hpl.jena.n3.turtle.parser.Token token> = $r1;

        r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int jj_kind> = i0;

        $r7 = virtualinvoke r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: com.hp.hpl.jena.n3.turtle.parser.ParseException generateParseException()>();

        throw $r7;
    }

    public final com.hp.hpl.jena.n3.turtle.parser.Token getNextToken()
    {
        com.hp.hpl.jena.n3.turtle.parser.TurtleParser r0;
        com.hp.hpl.jena.n3.turtle.parser.Token $r1, $r2, $r4, $r5, $r6, $r7, $r8;
        int $i0, $i1, $i3;
        com.hp.hpl.jena.n3.turtle.parser.TurtleParserTokenManager $r3;

        r0 := @this: com.hp.hpl.jena.n3.turtle.parser.TurtleParser;

        $r1 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: com.hp.hpl.jena.n3.turtle.parser.Token token>;

        $r2 = $r1.<com.hp.hpl.jena.n3.turtle.parser.Token: com.hp.hpl.jena.n3.turtle.parser.Token next>;

        if $r2 == null goto label1;

        $r7 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: com.hp.hpl.jena.n3.turtle.parser.Token token>;

        $r8 = $r7.<com.hp.hpl.jena.n3.turtle.parser.Token: com.hp.hpl.jena.n3.turtle.parser.Token next>;

        r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: com.hp.hpl.jena.n3.turtle.parser.Token token> = $r8;

        goto label2;

     label1:
        $r4 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: com.hp.hpl.jena.n3.turtle.parser.Token token>;

        $r3 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: com.hp.hpl.jena.n3.turtle.parser.TurtleParserTokenManager token_source>;

        $r5 = virtualinvoke $r3.<com.hp.hpl.jena.n3.turtle.parser.TurtleParserTokenManager: com.hp.hpl.jena.n3.turtle.parser.Token getNextToken()>();

        $r4.<com.hp.hpl.jena.n3.turtle.parser.Token: com.hp.hpl.jena.n3.turtle.parser.Token next> = $r5;

        r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: com.hp.hpl.jena.n3.turtle.parser.Token token> = $r5;

     label2:
        $i3 = (int) -1;

        r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int jj_ntk> = $i3;

        $i0 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int jj_gen>;

        $i1 = $i0 + 1;

        r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int jj_gen> = $i1;

        $r6 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: com.hp.hpl.jena.n3.turtle.parser.Token token>;

        return $r6;
    }

    public final com.hp.hpl.jena.n3.turtle.parser.Token getToken(int)
    {
        com.hp.hpl.jena.n3.turtle.parser.TurtleParser r0;
        int i0, i1;
        com.hp.hpl.jena.n3.turtle.parser.Token $r1, $r3, r4;
        com.hp.hpl.jena.n3.turtle.parser.TurtleParserTokenManager $r2;

        r0 := @this: com.hp.hpl.jena.n3.turtle.parser.TurtleParser;

        i0 := @parameter0: int;

        r4 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: com.hp.hpl.jena.n3.turtle.parser.Token token>;

        i1 = 0;

     label1:
        if i1 >= i0 goto label4;

        $r1 = r4.<com.hp.hpl.jena.n3.turtle.parser.Token: com.hp.hpl.jena.n3.turtle.parser.Token next>;

        if $r1 == null goto label2;

        r4 = r4.<com.hp.hpl.jena.n3.turtle.parser.Token: com.hp.hpl.jena.n3.turtle.parser.Token next>;

        goto label3;

     label2:
        $r2 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: com.hp.hpl.jena.n3.turtle.parser.TurtleParserTokenManager token_source>;

        $r3 = virtualinvoke $r2.<com.hp.hpl.jena.n3.turtle.parser.TurtleParserTokenManager: com.hp.hpl.jena.n3.turtle.parser.Token getNextToken()>();

        r4.<com.hp.hpl.jena.n3.turtle.parser.Token: com.hp.hpl.jena.n3.turtle.parser.Token next> = $r3;

        r4 = $r3;

     label3:
        i1 = i1 + 1;

        goto label1;

     label4:
        return r4;
    }

    private int jj_ntk()
    {
        com.hp.hpl.jena.n3.turtle.parser.TurtleParser r0;
        com.hp.hpl.jena.n3.turtle.parser.Token $r1, $r2, $r3, $r5, $r6;
        int $i0, $i1;
        com.hp.hpl.jena.n3.turtle.parser.TurtleParserTokenManager $r4;

        r0 := @this: com.hp.hpl.jena.n3.turtle.parser.TurtleParser;

        $r1 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: com.hp.hpl.jena.n3.turtle.parser.Token token>;

        $r2 = $r1.<com.hp.hpl.jena.n3.turtle.parser.Token: com.hp.hpl.jena.n3.turtle.parser.Token next>;

        r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: com.hp.hpl.jena.n3.turtle.parser.Token jj_nt> = $r2;

        if $r2 != null goto label1;

        $r5 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: com.hp.hpl.jena.n3.turtle.parser.Token token>;

        $r4 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: com.hp.hpl.jena.n3.turtle.parser.TurtleParserTokenManager token_source>;

        $r6 = virtualinvoke $r4.<com.hp.hpl.jena.n3.turtle.parser.TurtleParserTokenManager: com.hp.hpl.jena.n3.turtle.parser.Token getNextToken()>();

        $r5.<com.hp.hpl.jena.n3.turtle.parser.Token: com.hp.hpl.jena.n3.turtle.parser.Token next> = $r6;

        $i1 = $r6.<com.hp.hpl.jena.n3.turtle.parser.Token: int kind>;

        r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int jj_ntk> = $i1;

        return $i1;

     label1:
        $r3 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: com.hp.hpl.jena.n3.turtle.parser.Token jj_nt>;

        $i0 = $r3.<com.hp.hpl.jena.n3.turtle.parser.Token: int kind>;

        r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int jj_ntk> = $i0;

        return $i0;
    }

    public com.hp.hpl.jena.n3.turtle.parser.ParseException generateParseException()
    {
        int[][] r19;
        com.hp.hpl.jena.n3.turtle.parser.Token $r7;
        com.hp.hpl.jena.n3.turtle.parser.ParseException $r20;
        int[] $r10, $r11, $r12, $r13, $r15, $r16, $r17, $r18;
        boolean $z0;
        com.hp.hpl.jena.n3.turtle.parser.TurtleParser r0;
        java.util.List $r1, $r3, $r4, $r8, $r14;
        java.lang.String[] $r6;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, i17, i18, i19, i20, $i22;
        boolean[] r2;
        java.lang.Object $r9;

        r0 := @this: com.hp.hpl.jena.n3.turtle.parser.TurtleParser;

        $r1 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: java.util.List jj_expentries>;

        interfaceinvoke $r1.<java.util.List: void clear()>();

        r2 = newarray (boolean)[68];

        $i0 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int jj_kind>;

        if $i0 < 0 goto label01;

        $i16 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int jj_kind>;

        r2[$i16] = 1;

        $i22 = (int) -1;

        r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int jj_kind> = $i22;

     label01:
        i17 = 0;

     label02:
        if i17 >= 27 goto label08;

        $r15 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int[] jj_la1>;

        $i4 = $r15[i17];

        $i3 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int jj_gen>;

        if $i4 != $i3 goto label07;

        i18 = 0;

     label03:
        if i18 >= 32 goto label07;

        $r16 = <com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int[] jj_la1_0>;

        $i6 = $r16[i17];

        $i5 = 1 << i18;

        $i7 = $i6 & $i5;

        if $i7 == 0 goto label04;

        r2[i18] = 1;

     label04:
        $r17 = <com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int[] jj_la1_1>;

        $i9 = $r17[i17];

        $i8 = 1 << i18;

        $i10 = $i9 & $i8;

        if $i10 == 0 goto label05;

        $i15 = 32 + i18;

        r2[$i15] = 1;

     label05:
        $r18 = <com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int[] jj_la1_2>;

        $i12 = $r18[i17];

        $i11 = 1 << i18;

        $i13 = $i12 & $i11;

        if $i13 == 0 goto label06;

        $i14 = 64 + i18;

        r2[$i14] = 1;

     label06:
        i18 = i18 + 1;

        goto label03;

     label07:
        i17 = i17 + 1;

        goto label02;

     label08:
        i19 = 0;

     label09:
        if i19 >= 68 goto label11;

        $z0 = r2[i19];

        if $z0 == 0 goto label10;

        $r11 = newarray (int)[1];

        r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int[] jj_expentry> = $r11;

        $r12 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int[] jj_expentry>;

        $r12[0] = i19;

        $r14 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: java.util.List jj_expentries>;

        $r13 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: int[] jj_expentry>;

        interfaceinvoke $r14.<java.util.List: boolean add(java.lang.Object)>($r13);

     label10:
        i19 = i19 + 1;

        goto label09;

     label11:
        $r3 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: java.util.List jj_expentries>;

        $i1 = interfaceinvoke $r3.<java.util.List: int size()>();

        r19 = newarray (int[])[$i1];

        i20 = 0;

     label12:
        $r4 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: java.util.List jj_expentries>;

        $i2 = interfaceinvoke $r4.<java.util.List: int size()>();

        if i20 >= $i2 goto label13;

        $r8 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: java.util.List jj_expentries>;

        $r9 = interfaceinvoke $r8.<java.util.List: java.lang.Object get(int)>(i20);

        $r10 = (int[]) $r9;

        r19[i20] = $r10;

        i20 = i20 + 1;

        goto label12;

     label13:
        $r20 = new com.hp.hpl.jena.n3.turtle.parser.ParseException;

        $r7 = r0.<com.hp.hpl.jena.n3.turtle.parser.TurtleParser: com.hp.hpl.jena.n3.turtle.parser.Token token>;

        $r6 = <com.hp.hpl.jena.n3.turtle.parser.TurtleParser: java.lang.String[] tokenImage>;

        specialinvoke $r20.<com.hp.hpl.jena.n3.turtle.parser.ParseException: void <init>(com.hp.hpl.jena.n3.turtle.parser.Token,int[][],java.lang.String[])>($r7, r19, $r6);

        return $r20;
    }

    public final void enable_tracing()
    {
        com.hp.hpl.jena.n3.turtle.parser.TurtleParser r0;

        r0 := @this: com.hp.hpl.jena.n3.turtle.parser.TurtleParser;

        return;
    }

    public final void disable_tracing()
    {
        com.hp.hpl.jena.n3.turtle.parser.TurtleParser r0;

        r0 := @this: com.hp.hpl.jena.n3.turtle.parser.TurtleParser;

        return;
    }

    static void <clinit>()
    {
        staticinvoke <com.hp.hpl.jena.n3.turtle.parser.TurtleParser: void jj_la1_init_0()>();

        staticinvoke <com.hp.hpl.jena.n3.turtle.parser.TurtleParser: void jj_la1_init_1()>();

        staticinvoke <com.hp.hpl.jena.n3.turtle.parser.TurtleParser: void jj_la1_init_2()>();

        return;
    }
}
