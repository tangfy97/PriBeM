public class com.google.inject.internal.cglib.core.$CollectionUtils extends java.lang.Object
{

    private void <init>()
    {
        com.google.inject.internal.cglib.core.$CollectionUtils r0;

        r0 := @this: com.google.inject.internal.cglib.core.$CollectionUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.util.Map bucket(java.util.Collection, com.google.inject.internal.cglib.core.$Transformer)
    {
        java.util.Iterator $r2;
        java.util.Collection r1;
        java.util.HashMap $r0;
        java.util.List r8;
        com.google.inject.internal.cglib.core.$Transformer r4;
        java.lang.Object $r3, $r5, $r6;
        java.util.LinkedList $r7;
        boolean $z0;

        r1 := @parameter0: java.util.Collection;

        r4 := @parameter1: com.google.inject.internal.cglib.core.$Transformer;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        $r2 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r5 = interfaceinvoke r4.<com.google.inject.internal.cglib.core.$Transformer: java.lang.Object transform(java.lang.Object)>($r3);

        $r6 = interfaceinvoke $r0.<java.util.Map: java.lang.Object get(java.lang.Object)>($r5);

        r8 = (java.util.List) $r6;

        if r8 != null goto label2;

        $r7 = new java.util.LinkedList;

        specialinvoke $r7.<java.util.LinkedList: void <init>()>();

        r8 = $r7;

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, $r7);

     label2:
        interfaceinvoke r8.<java.util.List: boolean add(java.lang.Object)>($r3);

        goto label1;

     label3:
        return $r0;
    }

    public static void reverse(java.util.Map, java.util.Map)
    {
        java.util.Iterator $r2;
        java.util.Map r0, r4;
        java.util.Set $r1;
        java.lang.Object $r3, $r5;
        boolean $z0;

        r0 := @parameter0: java.util.Map;

        r4 := @parameter1: java.util.Map;

        $r1 = interfaceinvoke r0.<java.util.Map: java.util.Set keySet()>();

        $r2 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r5 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>($r3);

        interfaceinvoke r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, $r3);

        goto label1;

     label2:
        return;
    }

    public static java.util.Collection filter(java.util.Collection, com.google.inject.internal.cglib.core.$Predicate)
    {
        java.util.Iterator $r1;
        com.google.inject.internal.cglib.core.$Predicate r2;
        java.util.Collection r0;
        java.lang.Object $r3;
        boolean $z0, $z1;

        r0 := @parameter0: java.util.Collection;

        r2 := @parameter1: com.google.inject.internal.cglib.core.$Predicate;

        $r1 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        $r3 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $z0 = interfaceinvoke r2.<com.google.inject.internal.cglib.core.$Predicate: boolean evaluate(java.lang.Object)>($r3);

        if $z0 != 0 goto label1;

        interfaceinvoke $r1.<java.util.Iterator: void remove()>();

        goto label1;

     label2:
        return r0;
    }

    public static java.util.List transform(java.util.Collection, com.google.inject.internal.cglib.core.$Transformer)
    {
        java.util.Iterator $r2;
        java.util.Collection r1;
        java.util.ArrayList $r0;
        com.google.inject.internal.cglib.core.$Transformer r3;
        int $i0;
        java.lang.Object $r4, $r5;
        boolean $z0;

        r1 := @parameter0: java.util.Collection;

        r3 := @parameter1: com.google.inject.internal.cglib.core.$Transformer;

        $r0 = new java.util.ArrayList;

        $i0 = interfaceinvoke r1.<java.util.Collection: int size()>();

        specialinvoke $r0.<java.util.ArrayList: void <init>(int)>($i0);

        $r2 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r5 = interfaceinvoke r3.<com.google.inject.internal.cglib.core.$Transformer: java.lang.Object transform(java.lang.Object)>($r4);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r5);

        goto label1;

     label2:
        return $r0;
    }

    public static java.util.Map getIndexMap(java.util.List)
    {
        java.util.Iterator $r2;
        java.util.HashMap $r0;
        java.lang.Integer $r4;
        java.util.List r1;
        int $i0, i1;
        java.lang.Object $r3;
        boolean $z0;

        r1 := @parameter0: java.util.List;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        i1 = 0;

        $r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r4 = new java.lang.Integer;

        $i0 = i1;

        i1 = i1 + 1;

        specialinvoke $r4.<java.lang.Integer: void <init>(int)>($i0);

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, $r4);

        goto label1;

     label2:
        return $r0;
    }
}
