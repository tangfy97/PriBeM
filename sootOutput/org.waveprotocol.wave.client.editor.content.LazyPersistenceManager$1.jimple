class org.waveprotocol.wave.client.editor.content.LazyPersistenceManager$1 extends java.lang.Object implements org.waveprotocol.wave.model.operation.SilentOperationSink
{
    final org.waveprotocol.wave.model.document.operation.ModifiableDocument val$localCorrectionSink;
    final org.waveprotocol.wave.model.operation.SilentOperationSink val$outgoingSink;
    final org.waveprotocol.wave.client.editor.content.LazyPersistenceManager this$0;

    void <init>(org.waveprotocol.wave.client.editor.content.LazyPersistenceManager, org.waveprotocol.wave.model.document.operation.ModifiableDocument, org.waveprotocol.wave.model.operation.SilentOperationSink)
    {
        org.waveprotocol.wave.model.operation.SilentOperationSink r3;
        org.waveprotocol.wave.client.editor.content.LazyPersistenceManager$1 r0;
        org.waveprotocol.wave.model.document.operation.ModifiableDocument r2;
        org.waveprotocol.wave.client.editor.content.LazyPersistenceManager r1;

        r0 := @this: org.waveprotocol.wave.client.editor.content.LazyPersistenceManager$1;

        r1 := @parameter0: org.waveprotocol.wave.client.editor.content.LazyPersistenceManager;

        r2 := @parameter1: org.waveprotocol.wave.model.document.operation.ModifiableDocument;

        r3 := @parameter2: org.waveprotocol.wave.model.operation.SilentOperationSink;

        r0.<org.waveprotocol.wave.client.editor.content.LazyPersistenceManager$1: org.waveprotocol.wave.client.editor.content.LazyPersistenceManager this$0> = r1;

        r0.<org.waveprotocol.wave.client.editor.content.LazyPersistenceManager$1: org.waveprotocol.wave.model.document.operation.ModifiableDocument val$localCorrectionSink> = r2;

        r0.<org.waveprotocol.wave.client.editor.content.LazyPersistenceManager$1: org.waveprotocol.wave.model.operation.SilentOperationSink val$outgoingSink> = r3;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void consume(org.waveprotocol.wave.model.document.operation.DocOp)
    {
        org.waveprotocol.wave.model.operation.SilentOperationSink $r3;
        org.waveprotocol.wave.client.editor.content.LazyPersistenceManager$1 r0;
        org.waveprotocol.wave.model.operation.OperationException $r4;
        org.waveprotocol.wave.common.logging.Logger $r6;
        org.waveprotocol.wave.model.document.operation.DocOp r1;
        org.waveprotocol.wave.model.document.operation.ModifiableDocument $r2;
        org.waveprotocol.wave.common.logging.LoggerBundle $r5;

        r0 := @this: org.waveprotocol.wave.client.editor.content.LazyPersistenceManager$1;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.DocOp;

     label1:
        $r2 = r0.<org.waveprotocol.wave.client.editor.content.LazyPersistenceManager$1: org.waveprotocol.wave.model.document.operation.ModifiableDocument val$localCorrectionSink>;

        interfaceinvoke $r2.<org.waveprotocol.wave.model.document.operation.ModifiableDocument: void consume(org.waveprotocol.wave.model.document.operation.DocOp)>(r1);

        $r3 = r0.<org.waveprotocol.wave.client.editor.content.LazyPersistenceManager$1: org.waveprotocol.wave.model.operation.SilentOperationSink val$outgoingSink>;

        interfaceinvoke $r3.<org.waveprotocol.wave.model.operation.SilentOperationSink: void consume(org.waveprotocol.wave.model.operation.Operation)>(r1);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        $r5 = <org.waveprotocol.wave.client.editor.EditorStaticDeps: org.waveprotocol.wave.common.logging.LoggerBundle logger>;

        $r6 = interfaceinvoke $r5.<org.waveprotocol.wave.common.logging.LoggerBundle: org.waveprotocol.wave.common.logging.Logger fatal()>();

        interfaceinvoke $r6.<org.waveprotocol.wave.common.logging.Logger: void log(java.lang.Throwable)>($r4);

     label4:
        return;

        catch org.waveprotocol.wave.model.operation.OperationException from label1 to label2 with label3;
    }

    public volatile void consume(org.waveprotocol.wave.model.operation.Operation)
    {
        org.waveprotocol.wave.model.operation.Operation r1;
        org.waveprotocol.wave.model.document.operation.DocOp $r2;
        org.waveprotocol.wave.client.editor.content.LazyPersistenceManager$1 r0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.LazyPersistenceManager$1;

        r1 := @parameter0: org.waveprotocol.wave.model.operation.Operation;

        $r2 = (org.waveprotocol.wave.model.document.operation.DocOp) r1;

        virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.LazyPersistenceManager$1: void consume(org.waveprotocol.wave.model.document.operation.DocOp)>($r2);

        return;
    }
}
