public class org.codehaus.groovy.tools.javac.JavaStubGenerator extends java.lang.Object
{
    private boolean java5;
    private boolean requireSuperResolved;
    private java.io.File outputPath;
    private java.util.List toCompile;
    private java.util.ArrayList propertyMethods;

    public void <init>(java.io.File, boolean, boolean)
    {
        org.codehaus.groovy.tools.javac.JavaStubGenerator r0;
        java.io.File r3;
        java.util.ArrayList $r1, $r2;
        boolean z0, z1;

        r0 := @this: org.codehaus.groovy.tools.javac.JavaStubGenerator;

        r3 := @parameter0: java.io.File;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.codehaus.groovy.tools.javac.JavaStubGenerator: boolean java5> = 0;

        r0.<org.codehaus.groovy.tools.javac.JavaStubGenerator: boolean requireSuperResolved> = 0;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<org.codehaus.groovy.tools.javac.JavaStubGenerator: java.util.List toCompile> = $r1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<org.codehaus.groovy.tools.javac.JavaStubGenerator: java.util.ArrayList propertyMethods> = $r2;

        r0.<org.codehaus.groovy.tools.javac.JavaStubGenerator: java.io.File outputPath> = r3;

        r0.<org.codehaus.groovy.tools.javac.JavaStubGenerator: boolean requireSuperResolved> = z0;

        r0.<org.codehaus.groovy.tools.javac.JavaStubGenerator: boolean java5> = z1;

        return;
    }

    public void <init>(java.io.File)
    {
        org.codehaus.groovy.tools.javac.JavaStubGenerator r0;
        java.io.File r1;

        r0 := @this: org.codehaus.groovy.tools.javac.JavaStubGenerator;

        r1 := @parameter0: java.io.File;

        specialinvoke r0.<org.codehaus.groovy.tools.javac.JavaStubGenerator: void <init>(java.io.File,boolean,boolean)>(r1, 0, 0);

        return;
    }

    private void mkdirs(java.io.File, java.lang.String)
    {
        int $i0, $i2;
        java.lang.String r0, $r3;
        org.codehaus.groovy.tools.javac.JavaStubGenerator r4;
        java.io.File r2, $r5;

        r4 := @this: org.codehaus.groovy.tools.javac.JavaStubGenerator;

        r2 := @parameter0: java.io.File;

        r0 := @parameter1: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int lastIndexOf(int)>(47);

        $i2 = (int) -1;

        if $i0 != $i2 goto label1;

        return;

     label1:
        $r5 = new java.io.File;

        $r3 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        specialinvoke $r5.<java.io.File: void <init>(java.io.File,java.lang.String)>(r2, $r3);

        virtualinvoke $r5.<java.io.File: boolean mkdirs()>();

        return;
    }

    public void generateClass(org.codehaus.groovy.ast.ClassNode) throws java.io.FileNotFoundException
    {
        boolean $z0, $z1, z2, $z3, $z4;
        java.io.PrintWriter $r37;
        org.codehaus.groovy.tools.javac.JavaStubGenerator$1 $r38;
        java.lang.Exception $r25, $r29;
        java.util.List $r5;
        org.codehaus.groovy.tools.javac.JavaStubGenerator r0;
        java.lang.Throwable $r26;
        java.util.ArrayList $r27, $r33;
        short $s3, $s8, $s13;
        java.lang.StringBuffer $r9, $r10, $r19, $r20, $r21, $r34, $r39;
        int $i0, $i1, $i2, $i4, $i5, $i6, $i7, i9, $i10, $i11, $i14;
        org.codehaus.groovy.ast.ClassNode[] $r32;
        java.lang.String $r2, $r3, $r11, $r15, $r22, $r30;
        org.codehaus.groovy.ast.ClassNode r1, $r16, $r17, $r23, $r31;
        java.io.FileOutputStream $r36;
        java.io.IOException $r24, $r28;
        java.io.File $r4, $r8, $r35;

        r0 := @this: org.codehaus.groovy.tools.javac.JavaStubGenerator;

        r1 := @parameter0: org.codehaus.groovy.ast.ClassNode;

        $z0 = r0.<org.codehaus.groovy.tools.javac.JavaStubGenerator: boolean requireSuperResolved>;

        if $z0 == 0 goto label01;

        $r23 = virtualinvoke r1.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode getSuperClass()>();

        $z3 = virtualinvoke $r23.<org.codehaus.groovy.ast.ClassNode: boolean isResolved()>();

        if $z3 != 0 goto label01;

        return;

     label01:
        $r2 = virtualinvoke r1.<org.codehaus.groovy.ast.ClassNode: java.lang.String getName()>();

        $r3 = virtualinvoke $r2.<java.lang.String: java.lang.String replace(char,char)>(46, 47);

        $r4 = r0.<org.codehaus.groovy.tools.javac.JavaStubGenerator: java.io.File outputPath>;

        specialinvoke r0.<org.codehaus.groovy.tools.javac.JavaStubGenerator: void mkdirs(java.io.File,java.lang.String)>($r4, $r3);

        $r5 = r0.<org.codehaus.groovy.tools.javac.JavaStubGenerator: java.util.List toCompile>;

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r3);

        $r35 = new java.io.File;

        $r8 = r0.<org.codehaus.groovy.tools.javac.JavaStubGenerator: java.io.File outputPath>;

        $r34 = new java.lang.StringBuffer;

        specialinvoke $r34.<java.lang.StringBuffer: void <init>()>();

        $r9 = virtualinvoke $r34.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".java");

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r35.<java.io.File: void <init>(java.io.File,java.lang.String)>($r8, $r11);

        $r36 = new java.io.FileOutputStream;

        specialinvoke $r36.<java.io.FileOutputStream: void <init>(java.io.File)>($r35);

        $r37 = new java.io.PrintWriter;

        specialinvoke $r37.<java.io.PrintWriter: void <init>(java.io.OutputStream)>($r36);

        $r38 = new org.codehaus.groovy.tools.javac.JavaStubGenerator$1;

        specialinvoke $r38.<org.codehaus.groovy.tools.javac.JavaStubGenerator$1: void <init>(org.codehaus.groovy.tools.javac.JavaStubGenerator)>(r0);

        virtualinvoke $r38.<org.codehaus.groovy.classgen.Verifier: void visitClass(org.codehaus.groovy.ast.ClassNode)>(r1);

     label02:
        $r15 = virtualinvoke r1.<org.codehaus.groovy.ast.ClassNode: java.lang.String getPackageName()>();

        if $r15 == null goto label03;

        $r39 = new java.lang.StringBuffer;

        specialinvoke $r39.<java.lang.StringBuffer: void <init>()>();

        $r19 = virtualinvoke $r39.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("package ");

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r15);

        $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(";\n");

        $r22 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r37.<java.io.PrintWriter: void println(java.lang.String)>($r22);

     label03:
        specialinvoke r0.<org.codehaus.groovy.tools.javac.JavaStubGenerator: void genImports(org.codehaus.groovy.ast.ClassNode,java.io.PrintWriter)>(r1, $r37);

        $z1 = virtualinvoke r1.<org.codehaus.groovy.ast.ClassNode: boolean isInterface()>();

        $i0 = virtualinvoke r1.<org.codehaus.groovy.ast.ClassNode: int getModifiers()>();

        $i1 = $i0 & 16384;

        if $i1 == 0 goto label04;

        $z4 = 1;

        goto label05;

     label04:
        $z4 = 0;

     label05:
        z2 = $z4;

        $i2 = virtualinvoke r1.<org.codehaus.groovy.ast.ClassNode: int getModifiers()>();

        if $z1 == 0 goto label06;

        $s8 = 1024;

        goto label07;

     label06:
        $s8 = 0;

     label07:
        $s13 = (short) -1;

        $s3 = $s8 ^ $s13;

        $i14 = (int) $s3;

        $i4 = $i2 & $i14;

        specialinvoke r0.<org.codehaus.groovy.tools.javac.JavaStubGenerator: void printModifiers(java.io.PrintWriter,int)>($r37, $i4);

        if $z1 == 0 goto label08;

        virtualinvoke $r37.<java.io.PrintWriter: void print(java.lang.String)>("interface ");

        goto label10;

     label08:
        if z2 == 0 goto label09;

        virtualinvoke $r37.<java.io.PrintWriter: void print(java.lang.String)>("enum ");

        goto label10;

     label09:
        virtualinvoke $r37.<java.io.PrintWriter: void print(java.lang.String)>("class ");

     label10:
        $r30 = virtualinvoke r1.<org.codehaus.groovy.ast.ClassNode: java.lang.String getNameWithoutPackage()>();

        virtualinvoke $r37.<java.io.PrintWriter: void println(java.lang.String)>($r30);

        specialinvoke r0.<org.codehaus.groovy.tools.javac.JavaStubGenerator: void writeGenericsBounds(java.io.PrintWriter,org.codehaus.groovy.ast.ClassNode,boolean)>($r37, r1, 1);

        $r31 = virtualinvoke r1.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode getUnresolvedSuperClass(boolean)>(0);

        if $z1 != 0 goto label11;

        if z2 != 0 goto label11;

        virtualinvoke $r37.<java.io.PrintWriter: void print(java.lang.String)>("  extends ");

        specialinvoke r0.<org.codehaus.groovy.tools.javac.JavaStubGenerator: void printType(org.codehaus.groovy.ast.ClassNode,java.io.PrintWriter)>($r31, $r37);

     label11:
        $r32 = virtualinvoke r1.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode[] getInterfaces()>();

        if $r32 == null goto label16;

        $i5 = lengthof $r32;

        if $i5 <= 0 goto label16;

        if $z1 == 0 goto label12;

        virtualinvoke $r37.<java.io.PrintWriter: void println(java.lang.String)>("  extends");

        goto label13;

     label12:
        virtualinvoke $r37.<java.io.PrintWriter: void println(java.lang.String)>("  implements");

     label13:
        i9 = 0;

     label14:
        $i10 = lengthof $r32;

        $i11 = $i10 - 1;

        if i9 >= $i11 goto label15;

        virtualinvoke $r37.<java.io.PrintWriter: void print(java.lang.String)>("    ");

        $r17 = $r32[i9];

        specialinvoke r0.<org.codehaus.groovy.tools.javac.JavaStubGenerator: void printType(org.codehaus.groovy.ast.ClassNode,java.io.PrintWriter)>($r17, $r37);

        virtualinvoke $r37.<java.io.PrintWriter: void print(java.lang.String)>(",");

        i9 = i9 + 1;

        goto label14;

     label15:
        virtualinvoke $r37.<java.io.PrintWriter: void print(java.lang.String)>("    ");

        $i6 = lengthof $r32;

        $i7 = $i6 - 1;

        $r16 = $r32[$i7];

        specialinvoke r0.<org.codehaus.groovy.tools.javac.JavaStubGenerator: void printType(org.codehaus.groovy.ast.ClassNode,java.io.PrintWriter)>($r16, $r37);

     label16:
        virtualinvoke $r37.<java.io.PrintWriter: void println(java.lang.String)>(" {");

        specialinvoke r0.<org.codehaus.groovy.tools.javac.JavaStubGenerator: void genFields(org.codehaus.groovy.ast.ClassNode,java.io.PrintWriter,boolean)>(r1, $r37, z2);

        specialinvoke r0.<org.codehaus.groovy.tools.javac.JavaStubGenerator: void genMethods(org.codehaus.groovy.ast.ClassNode,java.io.PrintWriter,boolean)>(r1, $r37, z2);

        virtualinvoke $r37.<java.io.PrintWriter: void println(java.lang.String)>("}");

     label17:
        $r33 = r0.<org.codehaus.groovy.tools.javac.JavaStubGenerator: java.util.ArrayList propertyMethods>;

        virtualinvoke $r33.<java.util.ArrayList: void clear()>();

     label18:
        virtualinvoke $r37.<java.io.PrintWriter: void close()>();

     label19:
        goto label21;

     label20:
        $r29 := @caughtexception;

     label21:
        virtualinvoke $r36.<java.io.FileOutputStream: void close()>();

     label22:
        goto label33;

     label23:
        $r28 := @caughtexception;

        goto label33;

     label24:
        $r26 := @caughtexception;

     label25:
        $r27 = r0.<org.codehaus.groovy.tools.javac.JavaStubGenerator: java.util.ArrayList propertyMethods>;

        virtualinvoke $r27.<java.util.ArrayList: void clear()>();

     label26:
        virtualinvoke $r37.<java.io.PrintWriter: void close()>();

     label27:
        goto label29;

     label28:
        $r25 := @caughtexception;

     label29:
        virtualinvoke $r36.<java.io.FileOutputStream: void close()>();

     label30:
        goto label32;

     label31:
        $r24 := @caughtexception;

     label32:
        throw $r26;

     label33:
        return;

        catch java.lang.Exception from label18 to label19 with label20;
        catch java.io.IOException from label21 to label22 with label23;
        catch java.lang.Throwable from label02 to label17 with label24;
        catch java.lang.Exception from label26 to label27 with label28;
        catch java.io.IOException from label29 to label30 with label31;
        catch java.lang.Throwable from label24 to label25 with label24;
    }

    private void genMethods(org.codehaus.groovy.ast.ClassNode, java.io.PrintWriter, boolean)
    {
        java.util.ArrayList $r1;
        org.codehaus.groovy.ast.MethodNode r7;
        int $i0, $i1;
        java.lang.String $r9;
        boolean z0, $z1, $z2, $z3, $z4, $z5;
        java.io.PrintWriter r8;
        org.codehaus.groovy.ast.Parameter $r11;
        java.util.Iterator $r5;
        org.codehaus.groovy.ast.ClassNode r3, $r12, $r13;
        java.util.List $r4, $r14;
        org.codehaus.groovy.ast.Parameter[] $r10;
        java.lang.Object $r2, $r6;
        org.codehaus.groovy.tools.javac.JavaStubGenerator r0;

        r0 := @this: org.codehaus.groovy.tools.javac.JavaStubGenerator;

        r3 := @parameter0: org.codehaus.groovy.ast.ClassNode;

        r8 := @parameter1: java.io.PrintWriter;

        z0 := @parameter2: boolean;

        if z0 != 0 goto label1;

        specialinvoke r0.<org.codehaus.groovy.tools.javac.JavaStubGenerator: void getConstructors(org.codehaus.groovy.ast.ClassNode,java.io.PrintWriter)>(r3, r8);

     label1:
        $r1 = r0.<org.codehaus.groovy.tools.javac.JavaStubGenerator: java.util.ArrayList propertyMethods>;

        $r2 = virtualinvoke $r1.<java.util.ArrayList: java.lang.Object clone()>();

        $r14 = (java.util.List) $r2;

        $r4 = virtualinvoke r3.<org.codehaus.groovy.ast.ClassNode: java.util.List getMethods()>();

        interfaceinvoke $r14.<java.util.List: boolean addAll(java.util.Collection)>($r4);

        if $r14 == null goto label5;

        $r5 = interfaceinvoke $r14.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z5 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label5;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (org.codehaus.groovy.ast.MethodNode) $r6;

        if z0 == 0 goto label4;

        $z1 = virtualinvoke r7.<org.codehaus.groovy.ast.MethodNode: boolean isSynthetic()>();

        if $z1 == 0 goto label4;

        $r9 = virtualinvoke r7.<org.codehaus.groovy.ast.MethodNode: java.lang.String getName()>();

        $r10 = virtualinvoke r7.<org.codehaus.groovy.ast.MethodNode: org.codehaus.groovy.ast.Parameter[] getParameters()>();

        $z2 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>("values");

        if $z2 == 0 goto label3;

        $i1 = lengthof $r10;

        if $i1 != 0 goto label3;

        goto label2;

     label3:
        $z3 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>("valueOf");

        if $z3 == 0 goto label4;

        $i0 = lengthof $r10;

        if $i0 != 1 goto label4;

        $r11 = $r10[0];

        $r12 = virtualinvoke $r11.<org.codehaus.groovy.ast.Parameter: org.codehaus.groovy.ast.ClassNode getType()>();

        $r13 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode STRING_TYPE>;

        $z4 = virtualinvoke $r12.<org.codehaus.groovy.ast.ClassNode: boolean equals(java.lang.Object)>($r13);

        if $z4 == 0 goto label4;

        goto label2;

     label4:
        specialinvoke r0.<org.codehaus.groovy.tools.javac.JavaStubGenerator: void genMethod(org.codehaus.groovy.ast.ClassNode,org.codehaus.groovy.ast.MethodNode,java.io.PrintWriter)>(r3, r7, r8);

        goto label2;

     label5:
        return;
    }

    private void getConstructors(org.codehaus.groovy.ast.ClassNode, java.io.PrintWriter)
    {
        java.io.PrintWriter r6;
        java.util.Iterator $r2;
        org.codehaus.groovy.ast.ClassNode r0;
        java.util.List $r1;
        java.lang.Object $r3;
        org.codehaus.groovy.ast.ConstructorNode r4;
        org.codehaus.groovy.tools.javac.JavaStubGenerator r5;
        boolean $z0;

        r5 := @this: org.codehaus.groovy.tools.javac.JavaStubGenerator;

        r0 := @parameter0: org.codehaus.groovy.ast.ClassNode;

        r6 := @parameter1: java.io.PrintWriter;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: java.util.List getDeclaredConstructors()>();

        if $r1 == null goto label2;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.codehaus.groovy.ast.ConstructorNode) $r3;

        specialinvoke r5.<org.codehaus.groovy.tools.javac.JavaStubGenerator: void genConstructor(org.codehaus.groovy.ast.ClassNode,org.codehaus.groovy.ast.ConstructorNode,java.io.PrintWriter)>(r0, r4, r6);

        goto label1;

     label2:
        return;
    }

    private void genFields(org.codehaus.groovy.ast.ClassNode, java.io.PrintWriter, boolean)
    {
        java.util.ArrayList $r2, $r3;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        boolean $z0, $z1, z2, z3, $z4, $z5;
        java.io.PrintWriter r6;
        java.util.Iterator $r4, $r7;
        org.codehaus.groovy.ast.ClassNode r0;
        java.util.List $r1;
        org.codehaus.groovy.ast.FieldNode r10, r11;
        java.lang.Object $r8, $r9;
        org.codehaus.groovy.tools.javac.JavaStubGenerator r5;

        r5 := @this: org.codehaus.groovy.tools.javac.JavaStubGenerator;

        r0 := @parameter0: org.codehaus.groovy.ast.ClassNode;

        r6 := @parameter1: java.io.PrintWriter;

        z3 := @parameter2: boolean;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: java.util.List getFields()>();

        if $r1 != null goto label01;

        return;

     label01:
        $r2 = new java.util.ArrayList;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        specialinvoke $r2.<java.util.ArrayList: void <init>(int)>($i0);

        $r3 = new java.util.ArrayList;

        $i1 = interfaceinvoke $r1.<java.util.List: int size()>();

        specialinvoke $r3.<java.util.ArrayList: void <init>(int)>($i1);

        $r4 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label02:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label09;

        $r9 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r10 = (org.codehaus.groovy.ast.FieldNode) $r9;

        $i2 = virtualinvoke r10.<org.codehaus.groovy.ast.FieldNode: int getModifiers()>();

        $i3 = $i2 & 16384;

        if $i3 == 0 goto label03;

        $z4 = 1;

        goto label04;

     label03:
        $z4 = 0;

     label04:
        z2 = $z4;

        $i4 = virtualinvoke r10.<org.codehaus.groovy.ast.FieldNode: int getModifiers()>();

        $i5 = $i4 & 4096;

        if $i5 == 0 goto label05;

        $z5 = 1;

        goto label06;

     label05:
        $z5 = 0;

     label06:
        if z2 == 0 goto label07;

        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>(r10);

        goto label08;

     label07:
        if $z5 != 0 goto label08;

        virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>(r10);

     label08:
        goto label02;

     label09:
        specialinvoke r5.<org.codehaus.groovy.tools.javac.JavaStubGenerator: void genEnumFields(java.util.List,java.io.PrintWriter)>($r2, r6);

        $r7 = virtualinvoke $r3.<java.util.ArrayList: java.util.Iterator iterator()>();

     label10:
        $z1 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label11;

        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r11 = (org.codehaus.groovy.ast.FieldNode) $r8;

        specialinvoke r5.<org.codehaus.groovy.tools.javac.JavaStubGenerator: void genField(org.codehaus.groovy.ast.FieldNode,java.io.PrintWriter)>(r11, r6);

        goto label10;

     label11:
        return;
    }

    private void genEnumFields(java.util.List, java.io.PrintWriter)
    {
        java.io.PrintWriter r2;
        java.util.Iterator $r1;
        java.util.List r0;
        org.codehaus.groovy.ast.FieldNode r4;
        int $i0;
        java.lang.Object $r3;
        java.lang.String $r5;
        org.codehaus.groovy.tools.javac.JavaStubGenerator r6;
        boolean $z0, z1;

        r6 := @this: org.codehaus.groovy.tools.javac.JavaStubGenerator;

        r0 := @parameter0: java.util.List;

        r2 := @parameter1: java.io.PrintWriter;

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        if $i0 != 0 goto label1;

        return;

     label1:
        z1 = 1;

        $r1 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r3 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.codehaus.groovy.ast.FieldNode) $r3;

        if z1 != 0 goto label3;

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(", ");

        goto label4;

     label3:
        z1 = 0;

     label4:
        $r5 = virtualinvoke r4.<org.codehaus.groovy.ast.FieldNode: java.lang.String getName()>();

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>($r5);

        goto label2;

     label5:
        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>(";");

        return;
    }

    private void genField(org.codehaus.groovy.ast.FieldNode, java.io.PrintWriter)
    {
        java.io.PrintWriter r2;
        org.codehaus.groovy.ast.ClassNode $r3;
        org.codehaus.groovy.ast.FieldNode r0;
        int $i0, $i1, $i2;
        java.lang.String $r4;
        org.codehaus.groovy.tools.javac.JavaStubGenerator r1;

        r1 := @this: org.codehaus.groovy.tools.javac.JavaStubGenerator;

        r0 := @parameter0: org.codehaus.groovy.ast.FieldNode;

        r2 := @parameter1: java.io.PrintWriter;

        $i0 = virtualinvoke r0.<org.codehaus.groovy.ast.FieldNode: int getModifiers()>();

        $i1 = $i0 & 2;

        if $i1 == 0 goto label1;

        return;

     label1:
        $i2 = virtualinvoke r0.<org.codehaus.groovy.ast.FieldNode: int getModifiers()>();

        specialinvoke r1.<org.codehaus.groovy.tools.javac.JavaStubGenerator: void printModifiers(java.io.PrintWriter,int)>(r2, $i2);

        $r3 = virtualinvoke r0.<org.codehaus.groovy.ast.FieldNode: org.codehaus.groovy.ast.ClassNode getType()>();

        specialinvoke r1.<org.codehaus.groovy.tools.javac.JavaStubGenerator: void printType(org.codehaus.groovy.ast.ClassNode,java.io.PrintWriter)>($r3, r2);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(" ");

        $r4 = virtualinvoke r0.<org.codehaus.groovy.ast.FieldNode: java.lang.String getName()>();

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>($r4);

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>(";");

        return;
    }

    private org.codehaus.groovy.ast.expr.ConstructorCallExpression getConstructorCallExpression(org.codehaus.groovy.ast.ConstructorNode)
    {
        org.codehaus.groovy.ast.stmt.Statement $r1, r5;
        org.codehaus.groovy.ast.expr.ConstructorCallExpression $r8;
        java.util.List $r3;
        org.codehaus.groovy.ast.stmt.ExpressionStatement $r6;
        org.codehaus.groovy.ast.stmt.BlockStatement r2;
        int $i0;
        java.lang.Object $r4;
        org.codehaus.groovy.ast.expr.Expression $r7;
        org.codehaus.groovy.ast.ConstructorNode r0;
        org.codehaus.groovy.tools.javac.JavaStubGenerator r9;
        boolean $z0, $z1, $z2;

        r9 := @this: org.codehaus.groovy.tools.javac.JavaStubGenerator;

        r0 := @parameter0: org.codehaus.groovy.ast.ConstructorNode;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.ConstructorNode: org.codehaus.groovy.ast.stmt.Statement getCode()>();

        $z0 = $r1 instanceof org.codehaus.groovy.ast.stmt.BlockStatement;

        if $z0 != 0 goto label1;

        return null;

     label1:
        r2 = (org.codehaus.groovy.ast.stmt.BlockStatement) $r1;

        $r3 = virtualinvoke r2.<org.codehaus.groovy.ast.stmt.BlockStatement: java.util.List getStatements()>();

        if $r3 == null goto label2;

        $i0 = interfaceinvoke $r3.<java.util.List: int size()>();

        if $i0 != 0 goto label3;

     label2:
        return null;

     label3:
        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(0);

        r5 = (org.codehaus.groovy.ast.stmt.Statement) $r4;

        $z1 = r5 instanceof org.codehaus.groovy.ast.stmt.ExpressionStatement;

        if $z1 != 0 goto label4;

        return null;

     label4:
        $r6 = (org.codehaus.groovy.ast.stmt.ExpressionStatement) r5;

        $r7 = virtualinvoke $r6.<org.codehaus.groovy.ast.stmt.ExpressionStatement: org.codehaus.groovy.ast.expr.Expression getExpression()>();

        $z2 = $r7 instanceof org.codehaus.groovy.ast.expr.ConstructorCallExpression;

        if $z2 != 0 goto label5;

        return null;

     label5:
        $r8 = (org.codehaus.groovy.ast.expr.ConstructorCallExpression) $r7;

        return $r8;
    }

    private void genConstructor(org.codehaus.groovy.ast.ClassNode, org.codehaus.groovy.ast.ConstructorNode, java.io.PrintWriter)
    {
        java.io.PrintWriter r0;
        org.codehaus.groovy.ast.expr.ConstructorCallExpression $r5;
        org.codehaus.groovy.ast.ClassNode r1;
        java.lang.String $r2;
        org.codehaus.groovy.tools.javac.JavaStubGenerator r3;
        org.codehaus.groovy.ast.ConstructorNode r4;
        boolean $z0;

        r3 := @this: org.codehaus.groovy.tools.javac.JavaStubGenerator;

        r1 := @parameter0: org.codehaus.groovy.ast.ClassNode;

        r4 := @parameter1: org.codehaus.groovy.ast.ConstructorNode;

        r0 := @parameter2: java.io.PrintWriter;

        virtualinvoke r0.<java.io.PrintWriter: void print(java.lang.String)>("public ");

        $r2 = virtualinvoke r1.<org.codehaus.groovy.ast.ClassNode: java.lang.String getNameWithoutPackage()>();

        virtualinvoke r0.<java.io.PrintWriter: void print(java.lang.String)>($r2);

        specialinvoke r3.<org.codehaus.groovy.tools.javac.JavaStubGenerator: void printParams(org.codehaus.groovy.ast.MethodNode,java.io.PrintWriter)>(r4, r0);

        $r5 = specialinvoke r3.<org.codehaus.groovy.tools.javac.JavaStubGenerator: org.codehaus.groovy.ast.expr.ConstructorCallExpression getConstructorCallExpression(org.codehaus.groovy.ast.ConstructorNode)>(r4);

        if $r5 == null goto label1;

        $z0 = virtualinvoke $r5.<org.codehaus.groovy.ast.expr.ConstructorCallExpression: boolean isSpecialCall()>();

        if $z0 != 0 goto label2;

     label1:
        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>(" {}");

        goto label3;

     label2:
        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>(" {");

        specialinvoke r3.<org.codehaus.groovy.tools.javac.JavaStubGenerator: void genSpecialConstructorArgs(java.io.PrintWriter,org.codehaus.groovy.ast.ConstructorNode,org.codehaus.groovy.ast.expr.ConstructorCallExpression)>(r0, r4, $r5);

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("}");

     label3:
        return;
    }

    private org.codehaus.groovy.ast.Parameter[] selectAccessibleConstructorFromSuper(org.codehaus.groovy.ast.ConstructorNode)
    {
        java.util.Iterator $r4;
        org.codehaus.groovy.ast.ClassNode $r1, $r2;
        java.util.List $r3;
        org.codehaus.groovy.ast.Parameter[] $r5, $r8;
        java.lang.Object $r6;
        org.codehaus.groovy.ast.ConstructorNode r0, r7;
        org.codehaus.groovy.tools.javac.JavaStubGenerator r9;
        boolean $z0, $z1, $z2, $z3;

        r9 := @this: org.codehaus.groovy.tools.javac.JavaStubGenerator;

        r0 := @parameter0: org.codehaus.groovy.ast.ConstructorNode;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.ConstructorNode: org.codehaus.groovy.ast.ClassNode getDeclaringClass()>();

        $r2 = virtualinvoke $r1.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode getSuperClass()>();

        $r3 = virtualinvoke $r2.<org.codehaus.groovy.ast.ClassNode: java.util.List getDeclaredConstructors()>();

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r6 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r7 = (org.codehaus.groovy.ast.ConstructorNode) $r6;

        $z2 = virtualinvoke r7.<org.codehaus.groovy.ast.ConstructorNode: boolean isPublic()>();

        if $z2 != 0 goto label2;

        $z3 = virtualinvoke r7.<org.codehaus.groovy.ast.ConstructorNode: boolean isProtected()>();

        if $z3 == 0 goto label3;

     label2:
        $r8 = virtualinvoke r7.<org.codehaus.groovy.ast.ConstructorNode: org.codehaus.groovy.ast.Parameter[] getParameters()>();

        return $r8;

     label3:
        goto label1;

     label4:
        $z1 = virtualinvoke $r2.<org.codehaus.groovy.ast.ClassNode: boolean isPrimaryClassNode()>();

        if $z1 == 0 goto label5;

        $r5 = <org.codehaus.groovy.ast.Parameter: org.codehaus.groovy.ast.Parameter[] EMPTY_ARRAY>;

        return $r5;

     label5:
        return null;
    }

    private void genSpecialConstructorArgs(java.io.PrintWriter, org.codehaus.groovy.ast.ConstructorNode, org.codehaus.groovy.ast.expr.ConstructorCallExpression)
    {
        org.codehaus.groovy.ast.expr.ConstantExpression r17;
        int $i0, $i1, $i2, $i3, $i4, i5;
        org.codehaus.groovy.ast.expr.Expression $r4, r10;
        java.lang.String $r14;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.io.PrintWriter r5;
        org.codehaus.groovy.ast.Parameter $r15;
        org.codehaus.groovy.ast.expr.ConstructorCallExpression r3;
        java.util.Iterator $r8;
        org.codehaus.groovy.ast.ClassNode $r11, $r16;
        org.codehaus.groovy.ast.expr.ArgumentListExpression r6;
        org.codehaus.groovy.ast.Parameter[] $r2;
        java.util.List $r7;
        java.lang.Object $r9, $r12, $r13;
        org.codehaus.groovy.tools.javac.JavaStubGenerator r0;
        org.codehaus.groovy.ast.ConstructorNode r1;

        r0 := @this: org.codehaus.groovy.tools.javac.JavaStubGenerator;

        r5 := @parameter0: java.io.PrintWriter;

        r1 := @parameter1: org.codehaus.groovy.ast.ConstructorNode;

        r3 := @parameter2: org.codehaus.groovy.ast.expr.ConstructorCallExpression;

        $r2 = specialinvoke r0.<org.codehaus.groovy.tools.javac.JavaStubGenerator: org.codehaus.groovy.ast.Parameter[] selectAccessibleConstructorFromSuper(org.codehaus.groovy.ast.ConstructorNode)>(r1);

        if $r2 == null goto label04;

        virtualinvoke r5.<java.io.PrintWriter: void print(java.lang.String)>("super (");

        i5 = 0;

     label01:
        $i2 = lengthof $r2;

        if i5 >= $i2 goto label03;

        $r15 = $r2[i5];

        $r16 = virtualinvoke $r15.<org.codehaus.groovy.ast.Parameter: org.codehaus.groovy.ast.ClassNode getType()>();

        specialinvoke r0.<org.codehaus.groovy.tools.javac.JavaStubGenerator: void printDefaultValue(java.io.PrintWriter,org.codehaus.groovy.ast.ClassNode)>(r5, $r16);

        $i4 = i5 + 1;

        $i3 = lengthof $r2;

        if $i4 >= $i3 goto label02;

        virtualinvoke r5.<java.io.PrintWriter: void print(java.lang.String)>(", ");

     label02:
        i5 = i5 + 1;

        goto label01;

     label03:
        virtualinvoke r5.<java.io.PrintWriter: void println(java.lang.String)>(");");

        return;

     label04:
        $r4 = virtualinvoke r3.<org.codehaus.groovy.ast.expr.ConstructorCallExpression: org.codehaus.groovy.ast.expr.Expression getArguments()>();

        $z0 = virtualinvoke r3.<org.codehaus.groovy.ast.expr.ConstructorCallExpression: boolean isSuperCall()>();

        if $z0 == 0 goto label05;

        virtualinvoke r5.<java.io.PrintWriter: void print(java.lang.String)>("super(");

        goto label06;

     label05:
        virtualinvoke r5.<java.io.PrintWriter: void print(java.lang.String)>("this(");

     label06:
        $z1 = $r4 instanceof org.codehaus.groovy.ast.expr.ArgumentListExpression;

        if $z1 == 0 goto label13;

        r6 = (org.codehaus.groovy.ast.expr.ArgumentListExpression) $r4;

        $r7 = virtualinvoke r6.<org.codehaus.groovy.ast.expr.ArgumentListExpression: java.util.List getExpressions()>();

        $r8 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>();

     label07:
        $z2 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label13;

        $r9 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        r10 = (org.codehaus.groovy.ast.expr.Expression) $r9;

        $z3 = r10 instanceof org.codehaus.groovy.ast.expr.ConstantExpression;

        if $z3 == 0 goto label10;

        r17 = (org.codehaus.groovy.ast.expr.ConstantExpression) r10;

        $r13 = virtualinvoke r17.<org.codehaus.groovy.ast.expr.ConstantExpression: java.lang.Object getValue()>();

        $z4 = $r13 instanceof java.lang.String;

        if $z4 == 0 goto label08;

        virtualinvoke r5.<java.io.PrintWriter: void print(java.lang.String)>("(String)null");

        goto label09;

     label08:
        $r14 = virtualinvoke r17.<org.codehaus.groovy.ast.expr.ConstantExpression: java.lang.String getText()>();

        virtualinvoke r5.<java.io.PrintWriter: void print(java.lang.String)>($r14);

     label09:
        goto label11;

     label10:
        $r11 = specialinvoke r0.<org.codehaus.groovy.tools.javac.JavaStubGenerator: org.codehaus.groovy.ast.ClassNode getConstructorArgumentType(org.codehaus.groovy.ast.expr.Expression,org.codehaus.groovy.ast.ConstructorNode)>(r10, r1);

        specialinvoke r0.<org.codehaus.groovy.tools.javac.JavaStubGenerator: void printDefaultValue(java.io.PrintWriter,org.codehaus.groovy.ast.ClassNode)>(r5, $r11);

     label11:
        $i0 = interfaceinvoke $r7.<java.util.List: int size()>();

        $i1 = $i0 - 1;

        $r12 = interfaceinvoke $r7.<java.util.List: java.lang.Object get(int)>($i1);

        if r10 == $r12 goto label12;

        virtualinvoke r5.<java.io.PrintWriter: void print(java.lang.String)>(", ");

     label12:
        goto label07;

     label13:
        virtualinvoke r5.<java.io.PrintWriter: void println(java.lang.String)>(");");

        return;
    }

    private org.codehaus.groovy.ast.ClassNode getConstructorArgumentType(org.codehaus.groovy.ast.expr.Expression, org.codehaus.groovy.ast.ConstructorNode)
    {
        int $i0, i1;
        org.codehaus.groovy.ast.expr.Expression r0;
        java.lang.String $r2, $r7;
        boolean $z0, $z1;
        org.codehaus.groovy.ast.Parameter $r6, $r8;
        org.codehaus.groovy.ast.expr.VariableExpression r1;
        org.codehaus.groovy.ast.ClassNode $r5, $r9, $r10;
        org.codehaus.groovy.ast.Parameter[] $r4;
        org.codehaus.groovy.ast.ConstructorNode r3;
        org.codehaus.groovy.tools.javac.JavaStubGenerator r11;

        r11 := @this: org.codehaus.groovy.tools.javac.JavaStubGenerator;

        r0 := @parameter0: org.codehaus.groovy.ast.expr.Expression;

        r3 := @parameter1: org.codehaus.groovy.ast.ConstructorNode;

        $z0 = r0 instanceof org.codehaus.groovy.ast.expr.VariableExpression;

        if $z0 != 0 goto label1;

        $r10 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.Expression: org.codehaus.groovy.ast.ClassNode getType()>();

        return $r10;

     label1:
        r1 = (org.codehaus.groovy.ast.expr.VariableExpression) r0;

        $r2 = virtualinvoke r1.<org.codehaus.groovy.ast.expr.VariableExpression: java.lang.String getName()>();

        $r4 = virtualinvoke r3.<org.codehaus.groovy.ast.ConstructorNode: org.codehaus.groovy.ast.Parameter[] getParameters()>();

        i1 = 0;

     label2:
        $i0 = lengthof $r4;

        if i1 >= $i0 goto label4;

        $r6 = $r4[i1];

        $r7 = virtualinvoke $r6.<org.codehaus.groovy.ast.Parameter: java.lang.String getName()>();

        $z1 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z1 == 0 goto label3;

        $r8 = $r4[i1];

        $r9 = virtualinvoke $r8.<org.codehaus.groovy.ast.Parameter: org.codehaus.groovy.ast.ClassNode getType()>();

        return $r9;

     label3:
        i1 = i1 + 1;

        goto label2;

     label4:
        $r5 = virtualinvoke r1.<org.codehaus.groovy.ast.expr.VariableExpression: org.codehaus.groovy.ast.ClassNode getType()>();

        return $r5;
    }

    private void genMethod(org.codehaus.groovy.ast.ClassNode, org.codehaus.groovy.ast.MethodNode, java.io.PrintWriter)
    {
        org.codehaus.groovy.ast.MethodNode r0;
        org.codehaus.groovy.ast.ClassNode[] $r8;
        int $i0, $i1, $i2, i3, $i4;
        org.codehaus.groovy.ast.GenericsType[] $r5;
        java.lang.String $r1, $r7;
        boolean $z0, $z1;
        java.io.PrintWriter r4;
        org.codehaus.groovy.ast.ClassNode r2, $r6, $r9, r10;
        org.codehaus.groovy.tools.javac.JavaStubGenerator r3;

        r3 := @this: org.codehaus.groovy.tools.javac.JavaStubGenerator;

        r2 := @parameter0: org.codehaus.groovy.ast.ClassNode;

        r0 := @parameter1: org.codehaus.groovy.ast.MethodNode;

        r4 := @parameter2: java.io.PrintWriter;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.MethodNode: java.lang.String getName()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("<clinit>");

        if $z0 == 0 goto label1;

        return;

     label1:
        $z1 = virtualinvoke r2.<org.codehaus.groovy.ast.ClassNode: boolean isInterface()>();

        if $z1 != 0 goto label2;

        $i2 = virtualinvoke r0.<org.codehaus.groovy.ast.MethodNode: int getModifiers()>();

        specialinvoke r3.<org.codehaus.groovy.tools.javac.JavaStubGenerator: void printModifiers(java.io.PrintWriter,int)>(r4, $i2);

     label2:
        $r5 = virtualinvoke r0.<org.codehaus.groovy.ast.MethodNode: org.codehaus.groovy.ast.GenericsType[] getGenericsTypes()>();

        specialinvoke r3.<org.codehaus.groovy.tools.javac.JavaStubGenerator: void writeGenericsBounds(java.io.PrintWriter,org.codehaus.groovy.ast.GenericsType[])>(r4, $r5);

        virtualinvoke r4.<java.io.PrintWriter: void print(java.lang.String)>(" ");

        $r6 = virtualinvoke r0.<org.codehaus.groovy.ast.MethodNode: org.codehaus.groovy.ast.ClassNode getReturnType()>();

        specialinvoke r3.<org.codehaus.groovy.tools.javac.JavaStubGenerator: void printType(org.codehaus.groovy.ast.ClassNode,java.io.PrintWriter)>($r6, r4);

        virtualinvoke r4.<java.io.PrintWriter: void print(java.lang.String)>(" ");

        $r7 = virtualinvoke r0.<org.codehaus.groovy.ast.MethodNode: java.lang.String getName()>();

        virtualinvoke r4.<java.io.PrintWriter: void print(java.lang.String)>($r7);

        specialinvoke r3.<org.codehaus.groovy.tools.javac.JavaStubGenerator: void printParams(org.codehaus.groovy.ast.MethodNode,java.io.PrintWriter)>(r0, r4);

        $r8 = virtualinvoke r0.<org.codehaus.groovy.ast.MethodNode: org.codehaus.groovy.ast.ClassNode[] getExceptions()>();

        i3 = 0;

     label3:
        $i4 = lengthof $r8;

        if i3 >= $i4 goto label6;

        r10 = $r8[i3];

        if i3 != 0 goto label4;

        virtualinvoke r4.<java.io.PrintWriter: void print(java.lang.String)>("throws ");

        goto label5;

     label4:
        virtualinvoke r4.<java.io.PrintWriter: void print(java.lang.String)>(", ");

     label5:
        specialinvoke r3.<org.codehaus.groovy.tools.javac.JavaStubGenerator: void printType(org.codehaus.groovy.ast.ClassNode,java.io.PrintWriter)>(r10, r4);

        i3 = i3 + 1;

        goto label3;

     label6:
        $i0 = virtualinvoke r0.<org.codehaus.groovy.ast.MethodNode: int getModifiers()>();

        $i1 = $i0 & 1024;

        if $i1 == 0 goto label7;

        virtualinvoke r4.<java.io.PrintWriter: void println(java.lang.String)>(";");

        goto label8;

     label7:
        virtualinvoke r4.<java.io.PrintWriter: void print(java.lang.String)>(" { ");

        $r9 = virtualinvoke r0.<org.codehaus.groovy.ast.MethodNode: org.codehaus.groovy.ast.ClassNode getReturnType()>();

        specialinvoke r3.<org.codehaus.groovy.tools.javac.JavaStubGenerator: void printReturn(java.io.PrintWriter,org.codehaus.groovy.ast.ClassNode)>(r4, $r9);

        virtualinvoke r4.<java.io.PrintWriter: void println(java.lang.String)>("}");

     label8:
        return;
    }

    private void printReturn(java.io.PrintWriter, org.codehaus.groovy.ast.ClassNode)
    {
        java.io.PrintWriter r2;
        org.codehaus.groovy.ast.ClassNode r0;
        java.lang.String $r1;
        org.codehaus.groovy.tools.javac.JavaStubGenerator r3;
        boolean $z0;

        r3 := @this: org.codehaus.groovy.tools.javac.JavaStubGenerator;

        r2 := @parameter0: java.io.PrintWriter;

        r0 := @parameter1: org.codehaus.groovy.ast.ClassNode;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: java.lang.String getName()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("void");

        if $z0 != 0 goto label1;

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("return ");

        specialinvoke r3.<org.codehaus.groovy.tools.javac.JavaStubGenerator: void printDefaultValue(java.io.PrintWriter,org.codehaus.groovy.ast.ClassNode)>(r2, r0);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(";");

     label1:
        return;
    }

    private void printDefaultValue(java.io.PrintWriter, org.codehaus.groovy.ast.ClassNode)
    {
        java.io.PrintWriter r3;
        org.codehaus.groovy.ast.ClassNode r0, $r1, $r2, $r4;
        org.codehaus.groovy.tools.javac.JavaStubGenerator r5;
        boolean $z0;

        r5 := @this: org.codehaus.groovy.tools.javac.JavaStubGenerator;

        r3 := @parameter0: java.io.PrintWriter;

        r0 := @parameter1: org.codehaus.groovy.ast.ClassNode;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode redirect()>();

        $r2 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode OBJECT_TYPE>;

        if $r1 == $r2 goto label1;

        virtualinvoke r3.<java.io.PrintWriter: void print(java.lang.String)>("(");

        specialinvoke r5.<org.codehaus.groovy.tools.javac.JavaStubGenerator: void printType(org.codehaus.groovy.ast.ClassNode,java.io.PrintWriter)>(r0, r3);

        virtualinvoke r3.<java.io.PrintWriter: void print(java.lang.String)>(")");

     label1:
        $z0 = staticinvoke <org.codehaus.groovy.ast.ClassHelper: boolean isPrimitiveType(org.codehaus.groovy.ast.ClassNode)>(r0);

        if $z0 == 0 goto label3;

        $r4 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode boolean_TYPE>;

        if r0 != $r4 goto label2;

        virtualinvoke r3.<java.io.PrintWriter: void print(java.lang.String)>("false");

        goto label4;

     label2:
        virtualinvoke r3.<java.io.PrintWriter: void print(java.lang.String)>("0");

        goto label4;

     label3:
        virtualinvoke r3.<java.io.PrintWriter: void print(java.lang.String)>("null");

     label4:
        return;
    }

    private void printType(org.codehaus.groovy.ast.ClassNode, java.io.PrintWriter)
    {
        java.io.PrintWriter r2;
        org.codehaus.groovy.ast.ClassNode r0, $r6;
        org.codehaus.groovy.ast.GenericsType $r4;
        org.codehaus.groovy.ast.GenericsType[] $r3;
        java.lang.String $r5;
        org.codehaus.groovy.tools.javac.JavaStubGenerator r1;
        boolean $z0, $z1, $z2;

        r1 := @this: org.codehaus.groovy.tools.javac.JavaStubGenerator;

        r0 := @parameter0: org.codehaus.groovy.ast.ClassNode;

        r2 := @parameter1: java.io.PrintWriter;

        $z0 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: boolean isArray()>();

        if $z0 == 0 goto label1;

        $r6 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode getComponentType()>();

        specialinvoke r1.<org.codehaus.groovy.tools.javac.JavaStubGenerator: void printType(org.codehaus.groovy.ast.ClassNode,java.io.PrintWriter)>($r6, r2);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("[]");

        goto label3;

     label1:
        $z1 = r1.<org.codehaus.groovy.tools.javac.JavaStubGenerator: boolean java5>;

        if $z1 == 0 goto label2;

        $z2 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: boolean isGenericsPlaceHolder()>();

        if $z2 == 0 goto label2;

        $r3 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.GenericsType[] getGenericsTypes()>();

        $r4 = $r3[0];

        $r5 = virtualinvoke $r4.<org.codehaus.groovy.ast.GenericsType: java.lang.String getName()>();

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>($r5);

        goto label3;

     label2:
        specialinvoke r1.<org.codehaus.groovy.tools.javac.JavaStubGenerator: void writeGenericsBounds(java.io.PrintWriter,org.codehaus.groovy.ast.ClassNode,boolean)>(r2, r0, 0);

     label3:
        return;
    }

    private void printTypeName(org.codehaus.groovy.ast.ClassNode, java.io.PrintWriter)
    {
        java.io.PrintWriter r1;
        org.codehaus.groovy.ast.ClassNode r0, $r2, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12;
        java.lang.String $r3, $r4;
        org.codehaus.groovy.tools.javac.JavaStubGenerator r13;
        boolean $z0;

        r13 := @this: org.codehaus.groovy.tools.javac.JavaStubGenerator;

        r0 := @parameter0: org.codehaus.groovy.ast.ClassNode;

        r1 := @parameter1: java.io.PrintWriter;

        $z0 = staticinvoke <org.codehaus.groovy.ast.ClassHelper: boolean isPrimitiveType(org.codehaus.groovy.ast.ClassNode)>(r0);

        if $z0 == 0 goto label09;

        $r5 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode boolean_TYPE>;

        if r0 != $r5 goto label01;

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("boolean");

        goto label10;

     label01:
        $r6 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode char_TYPE>;

        if r0 != $r6 goto label02;

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("char");

        goto label10;

     label02:
        $r7 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode int_TYPE>;

        if r0 != $r7 goto label03;

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("int");

        goto label10;

     label03:
        $r8 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode short_TYPE>;

        if r0 != $r8 goto label04;

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("short");

        goto label10;

     label04:
        $r9 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode long_TYPE>;

        if r0 != $r9 goto label05;

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("long");

        goto label10;

     label05:
        $r10 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode float_TYPE>;

        if r0 != $r10 goto label06;

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("float");

        goto label10;

     label06:
        $r11 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode double_TYPE>;

        if r0 != $r11 goto label07;

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("double");

        goto label10;

     label07:
        $r12 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode byte_TYPE>;

        if r0 != $r12 goto label08;

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("byte");

        goto label10;

     label08:
        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("void");

        goto label10;

     label09:
        $r2 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode redirect()>();

        $r3 = virtualinvoke $r2.<org.codehaus.groovy.ast.ClassNode: java.lang.String getName()>();

        $r4 = virtualinvoke $r3.<java.lang.String: java.lang.String replace(char,char)>(36, 46);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>($r4);

     label10:
        return;
    }

    private void writeGenericsBounds(java.io.PrintWriter, org.codehaus.groovy.ast.ClassNode, boolean)
    {
        java.io.PrintWriter r2;
        org.codehaus.groovy.ast.ClassNode r1;
        org.codehaus.groovy.ast.GenericsType[] $r3;
        org.codehaus.groovy.tools.javac.JavaStubGenerator r0;
        boolean z0, $z1, $z2;

        r0 := @this: org.codehaus.groovy.tools.javac.JavaStubGenerator;

        r2 := @parameter0: java.io.PrintWriter;

        r1 := @parameter1: org.codehaus.groovy.ast.ClassNode;

        z0 := @parameter2: boolean;

        if z0 != 0 goto label1;

        specialinvoke r0.<org.codehaus.groovy.tools.javac.JavaStubGenerator: void printTypeName(org.codehaus.groovy.ast.ClassNode,java.io.PrintWriter)>(r1, r2);

     label1:
        $z1 = r0.<org.codehaus.groovy.tools.javac.JavaStubGenerator: boolean java5>;

        if $z1 != 0 goto label2;

        return;

     label2:
        $z2 = staticinvoke <org.codehaus.groovy.ast.ClassHelper: boolean isCachedType(org.codehaus.groovy.ast.ClassNode)>(r1);

        if $z2 != 0 goto label3;

        $r3 = virtualinvoke r1.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.GenericsType[] getGenericsTypes()>();

        specialinvoke r0.<org.codehaus.groovy.tools.javac.JavaStubGenerator: void writeGenericsBounds(java.io.PrintWriter,org.codehaus.groovy.ast.GenericsType[])>(r2, $r3);

     label3:
        return;
    }

    private void writeGenericsBounds(java.io.PrintWriter, org.codehaus.groovy.ast.GenericsType[])
    {
        java.io.PrintWriter r1;
        int $i0, $i1, i2;
        org.codehaus.groovy.ast.GenericsType $r3;
        org.codehaus.groovy.ast.GenericsType[] r0;
        org.codehaus.groovy.tools.javac.JavaStubGenerator r2;

        r2 := @this: org.codehaus.groovy.tools.javac.JavaStubGenerator;

        r1 := @parameter0: java.io.PrintWriter;

        r0 := @parameter1: org.codehaus.groovy.ast.GenericsType[];

        if r0 == null goto label1;

        $i0 = lengthof r0;

        if $i0 != 0 goto label2;

     label1:
        return;

     label2:
        virtualinvoke r1.<java.io.PrintWriter: void print(char)>(60);

        i2 = 0;

     label3:
        $i1 = lengthof r0;

        if i2 >= $i1 goto label5;

        if i2 == 0 goto label4;

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(", ");

     label4:
        $r3 = r0[i2];

        specialinvoke r2.<org.codehaus.groovy.tools.javac.JavaStubGenerator: void writeGenericsBounds(java.io.PrintWriter,org.codehaus.groovy.ast.GenericsType)>(r1, $r3);

        i2 = i2 + 1;

        goto label3;

     label5:
        virtualinvoke r1.<java.io.PrintWriter: void print(char)>(62);

        return;
    }

    private void writeGenericsBounds(java.io.PrintWriter, org.codehaus.groovy.ast.GenericsType)
    {
        java.io.PrintWriter r3;
        org.codehaus.groovy.ast.ClassNode $r2, $r5, $r6;
        org.codehaus.groovy.ast.GenericsType r0;
        org.codehaus.groovy.ast.ClassNode[] $r4;
        int $i0, $i1, $i2, i3;
        java.lang.String $r7;
        org.codehaus.groovy.tools.javac.JavaStubGenerator r1;
        boolean $z0;

        r1 := @this: org.codehaus.groovy.tools.javac.JavaStubGenerator;

        r3 := @parameter0: java.io.PrintWriter;

        r0 := @parameter1: org.codehaus.groovy.ast.GenericsType;

        $z0 = virtualinvoke r0.<org.codehaus.groovy.ast.GenericsType: boolean isPlaceholder()>();

        if $z0 == 0 goto label1;

        $r7 = virtualinvoke r0.<org.codehaus.groovy.ast.GenericsType: java.lang.String getName()>();

        virtualinvoke r3.<java.io.PrintWriter: void print(java.lang.String)>($r7);

        goto label2;

     label1:
        $r2 = virtualinvoke r0.<org.codehaus.groovy.ast.GenericsType: org.codehaus.groovy.ast.ClassNode getType()>();

        specialinvoke r1.<org.codehaus.groovy.tools.javac.JavaStubGenerator: void printType(org.codehaus.groovy.ast.ClassNode,java.io.PrintWriter)>($r2, r3);

     label2:
        $r4 = virtualinvoke r0.<org.codehaus.groovy.ast.GenericsType: org.codehaus.groovy.ast.ClassNode[] getUpperBounds()>();

        $r5 = virtualinvoke r0.<org.codehaus.groovy.ast.GenericsType: org.codehaus.groovy.ast.ClassNode getLowerBound()>();

        if $r4 == null goto label6;

        virtualinvoke r3.<java.io.PrintWriter: void print(java.lang.String)>(" extends ");

        i3 = 0;

     label3:
        $i0 = lengthof $r4;

        if i3 >= $i0 goto label5;

        $r6 = $r4[i3];

        specialinvoke r1.<org.codehaus.groovy.tools.javac.JavaStubGenerator: void printType(org.codehaus.groovy.ast.ClassNode,java.io.PrintWriter)>($r6, r3);

        $i2 = i3 + 1;

        $i1 = lengthof $r4;

        if $i2 >= $i1 goto label4;

        virtualinvoke r3.<java.io.PrintWriter: void print(java.lang.String)>(" & ");

     label4:
        i3 = i3 + 1;

        goto label3;

     label5:
        goto label7;

     label6:
        if $r5 == null goto label7;

        virtualinvoke r3.<java.io.PrintWriter: void print(java.lang.String)>(" super ");

        specialinvoke r1.<org.codehaus.groovy.tools.javac.JavaStubGenerator: void printType(org.codehaus.groovy.ast.ClassNode,java.io.PrintWriter)>($r5, r3);

     label7:
        return;
    }

    private void printParams(org.codehaus.groovy.ast.MethodNode, java.io.PrintWriter)
    {
        java.io.PrintWriter r0;
        org.codehaus.groovy.ast.Parameter $r4, $r6;
        org.codehaus.groovy.ast.ClassNode $r5;
        org.codehaus.groovy.ast.Parameter[] $r2;
        org.codehaus.groovy.ast.MethodNode r1;
        int $i0, $i1, $i2, $i3, i4;
        java.lang.String $r7;
        org.codehaus.groovy.tools.javac.JavaStubGenerator r3;

        r3 := @this: org.codehaus.groovy.tools.javac.JavaStubGenerator;

        r1 := @parameter0: org.codehaus.groovy.ast.MethodNode;

        r0 := @parameter1: java.io.PrintWriter;

        virtualinvoke r0.<java.io.PrintWriter: void print(java.lang.String)>("(");

        $r2 = virtualinvoke r1.<org.codehaus.groovy.ast.MethodNode: org.codehaus.groovy.ast.Parameter[] getParameters()>();

        if $r2 == null goto label3;

        $i0 = lengthof $r2;

        if $i0 == 0 goto label3;

        i4 = 0;

     label1:
        $i1 = lengthof $r2;

        if i4 == $i1 goto label3;

        $r4 = $r2[i4];

        $r5 = virtualinvoke $r4.<org.codehaus.groovy.ast.Parameter: org.codehaus.groovy.ast.ClassNode getType()>();

        specialinvoke r3.<org.codehaus.groovy.tools.javac.JavaStubGenerator: void printType(org.codehaus.groovy.ast.ClassNode,java.io.PrintWriter)>($r5, r0);

        virtualinvoke r0.<java.io.PrintWriter: void print(java.lang.String)>(" ");

        $r6 = $r2[i4];

        $r7 = virtualinvoke $r6.<org.codehaus.groovy.ast.Parameter: java.lang.String getName()>();

        virtualinvoke r0.<java.io.PrintWriter: void print(java.lang.String)>($r7);

        $i3 = i4 + 1;

        $i2 = lengthof $r2;

        if $i3 >= $i2 goto label2;

        virtualinvoke r0.<java.io.PrintWriter: void print(java.lang.String)>(", ");

     label2:
        i4 = i4 + 1;

        goto label1;

     label3:
        virtualinvoke r0.<java.io.PrintWriter: void print(java.lang.String)>(")");

        return;
    }

    private void printModifiers(java.io.PrintWriter, int)
    {
        java.io.PrintWriter r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6;
        org.codehaus.groovy.tools.javac.JavaStubGenerator r1;

        r1 := @this: org.codehaus.groovy.tools.javac.JavaStubGenerator;

        r0 := @parameter0: java.io.PrintWriter;

        i0 := @parameter1: int;

        $i1 = i0 & 1;

        if $i1 == 0 goto label1;

        virtualinvoke r0.<java.io.PrintWriter: void print(java.lang.String)>("public ");

     label1:
        $i2 = i0 & 4;

        if $i2 == 0 goto label2;

        virtualinvoke r0.<java.io.PrintWriter: void print(java.lang.String)>("protected ");

     label2:
        $i3 = i0 & 2;

        if $i3 == 0 goto label3;

        virtualinvoke r0.<java.io.PrintWriter: void print(java.lang.String)>("private ");

     label3:
        $i4 = i0 & 8;

        if $i4 == 0 goto label4;

        virtualinvoke r0.<java.io.PrintWriter: void print(java.lang.String)>("static ");

     label4:
        $i5 = i0 & 32;

        if $i5 == 0 goto label5;

        virtualinvoke r0.<java.io.PrintWriter: void print(java.lang.String)>("synchronized ");

     label5:
        $i6 = i0 & 1024;

        if $i6 == 0 goto label6;

        virtualinvoke r0.<java.io.PrintWriter: void print(java.lang.String)>("abstract ");

     label6:
        return;
    }

    private void genImports(org.codehaus.groovy.ast.ClassNode, java.io.PrintWriter)
    {
        java.lang.String[] $r1;
        org.codehaus.groovy.ast.ModuleNode $r4;
        java.util.HashSet $r20;
        int $i0, $i1, $i3;
        java.lang.String $r14, $r15, r19;
        boolean $z0, $z1, $z2;
        java.io.PrintWriter r10;
        java.util.Iterator $r6, $r8, $r9;
        org.codehaus.groovy.ast.ClassNode r3, $r13;
        java.util.List $r2, $r5, $r7;
        org.codehaus.groovy.ast.ImportNode r18;
        java.lang.Object $r11, $r12, $r16;
        org.codehaus.groovy.tools.javac.JavaStubGenerator r17;

        r17 := @this: org.codehaus.groovy.tools.javac.JavaStubGenerator;

        r3 := @parameter0: org.codehaus.groovy.ast.ClassNode;

        r10 := @parameter1: java.io.PrintWriter;

        $r20 = new java.util.HashSet;

        specialinvoke $r20.<java.util.HashSet: void <init>()>();

        $r1 = <org.codehaus.groovy.control.ResolveVisitor: java.lang.String[] DEFAULT_IMPORTS>;

        $r2 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r1);

        interfaceinvoke $r20.<java.util.Set: boolean addAll(java.util.Collection)>($r2);

        $r4 = virtualinvoke r3.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ModuleNode getModule()>();

        $r5 = virtualinvoke $r4.<org.codehaus.groovy.ast.ModuleNode: java.util.List getImportPackages()>();

        $r6 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r16 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        interfaceinvoke $r20.<java.util.Set: boolean add(java.lang.Object)>($r16);

        goto label1;

     label2:
        $r7 = virtualinvoke $r4.<org.codehaus.groovy.ast.ModuleNode: java.util.List getImports()>();

        $r8 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label5;

        $r12 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        r18 = (org.codehaus.groovy.ast.ImportNode) $r12;

        $r13 = virtualinvoke r18.<org.codehaus.groovy.ast.ImportNode: org.codehaus.groovy.ast.ClassNode getType()>();

        $r14 = virtualinvoke $r13.<org.codehaus.groovy.ast.ClassNode: java.lang.String getName()>();

        $i0 = virtualinvoke $r14.<java.lang.String: int lastIndexOf(int)>(46);

        $i3 = (int) -1;

        if $i0 == $i3 goto label4;

        $i1 = $i0 + 1;

        $r15 = virtualinvoke $r14.<java.lang.String: java.lang.String substring(int,int)>(0, $i1);

        interfaceinvoke $r20.<java.util.Set: boolean add(java.lang.Object)>($r15);

     label4:
        goto label3;

     label5:
        $r9 = interfaceinvoke $r20.<java.util.Set: java.util.Iterator iterator()>();

     label6:
        $z2 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label7;

        $r11 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        r19 = (java.lang.String) $r11;

        virtualinvoke r10.<java.io.PrintWriter: void print(java.lang.String)>("import ");

        virtualinvoke r10.<java.io.PrintWriter: void print(java.lang.String)>(r19);

        virtualinvoke r10.<java.io.PrintWriter: void println(java.lang.String)>("*;");

        goto label6;

     label7:
        virtualinvoke r10.<java.io.PrintWriter: void println()>();

        return;
    }

    public void clean()
    {
        java.util.Iterator $r2;
        java.io.File $r5, $r7;
        java.util.List $r1;
        java.lang.StringBuffer $r6, $r8, $r9;
        java.lang.Object $r3;
        java.lang.String r4, $r10;
        org.codehaus.groovy.tools.javac.JavaStubGenerator r0;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.tools.javac.JavaStubGenerator;

        $r1 = r0.<org.codehaus.groovy.tools.javac.JavaStubGenerator: java.util.List toCompile>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.lang.String) $r3;

        $r5 = new java.io.File;

        $r7 = r0.<org.codehaus.groovy.tools.javac.JavaStubGenerator: java.io.File outputPath>;

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r4);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".java");

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r5.<java.io.File: void <init>(java.io.File,java.lang.String)>($r7, $r10);

        virtualinvoke $r5.<java.io.File: boolean delete()>();

        goto label1;

     label2:
        return;
    }

    static java.util.ArrayList access$000(org.codehaus.groovy.tools.javac.JavaStubGenerator)
    {
        org.codehaus.groovy.tools.javac.JavaStubGenerator r0;
        java.util.ArrayList $r1;

        r0 := @parameter0: org.codehaus.groovy.tools.javac.JavaStubGenerator;

        $r1 = r0.<org.codehaus.groovy.tools.javac.JavaStubGenerator: java.util.ArrayList propertyMethods>;

        return $r1;
    }
}
