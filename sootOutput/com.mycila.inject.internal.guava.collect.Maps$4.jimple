final class com.mycila.inject.internal.guava.collect.Maps$4 extends java.lang.Object implements com.mycila.inject.internal.guava.base.Predicate
{
    final com.mycila.inject.internal.guava.base.Predicate val$valuePredicate;

    void <init>(com.mycila.inject.internal.guava.base.Predicate)
    {
        com.mycila.inject.internal.guava.base.Predicate r1;
        com.mycila.inject.internal.guava.collect.Maps$4 r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.Maps$4;

        r1 := @parameter0: com.mycila.inject.internal.guava.base.Predicate;

        r0.<com.mycila.inject.internal.guava.collect.Maps$4: com.mycila.inject.internal.guava.base.Predicate val$valuePredicate> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public boolean apply(java.util.Map$Entry)
    {
        com.mycila.inject.internal.guava.base.Predicate $r2;
        java.util.Map$Entry r1;
        java.lang.Object $r3;
        com.mycila.inject.internal.guava.collect.Maps$4 r0;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.guava.collect.Maps$4;

        r1 := @parameter0: java.util.Map$Entry;

        $r2 = r0.<com.mycila.inject.internal.guava.collect.Maps$4: com.mycila.inject.internal.guava.base.Predicate val$valuePredicate>;

        $r3 = interfaceinvoke r1.<java.util.Map$Entry: java.lang.Object getValue()>();

        $z0 = interfaceinvoke $r2.<com.mycila.inject.internal.guava.base.Predicate: boolean apply(java.lang.Object)>($r3);

        return $z0;
    }

    public volatile boolean apply(java.lang.Object)
    {
        java.util.Map$Entry $r2;
        java.lang.Object r1;
        com.mycila.inject.internal.guava.collect.Maps$4 r0;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.guava.collect.Maps$4;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.util.Map$Entry) r1;

        $z0 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.Maps$4: boolean apply(java.util.Map$Entry)>($r2);

        return $z0;
    }
}
