public class org.bouncycastle.jce.provider.JDKKeyStore extends java.security.KeyStoreSpi implements org.bouncycastle.jce.interfaces.BCKeyStore
{
    private static final int STORE_VERSION;
    private static final int STORE_SALT_SIZE;
    private static final java.lang.String STORE_CIPHER;
    private static final int KEY_SALT_SIZE;
    private static final int MIN_ITERATIONS;
    private static final java.lang.String KEY_CIPHER;
    static final int NULL;
    static final int CERTIFICATE;
    static final int KEY;
    static final int SECRET;
    static final int SEALED;
    static final int KEY_PRIVATE;
    static final int KEY_PUBLIC;
    static final int KEY_SECRET;
    protected java.util.Hashtable table;
    protected java.security.SecureRandom random;

    public void <init>()
    {
        java.security.SecureRandom $r2;
        java.util.Hashtable $r1;
        org.bouncycastle.jce.provider.JDKKeyStore r0;

        r0 := @this: org.bouncycastle.jce.provider.JDKKeyStore;

        specialinvoke r0.<java.security.KeyStoreSpi: void <init>()>();

        $r1 = new java.util.Hashtable;

        specialinvoke $r1.<java.util.Hashtable: void <init>()>();

        r0.<org.bouncycastle.jce.provider.JDKKeyStore: java.util.Hashtable table> = $r1;

        $r2 = new java.security.SecureRandom;

        specialinvoke $r2.<java.security.SecureRandom: void <init>()>();

        r0.<org.bouncycastle.jce.provider.JDKKeyStore: java.security.SecureRandom random> = $r2;

        return;
    }

    private void encodeCertificate(java.security.cert.Certificate, java.io.DataOutputStream) throws java.io.IOException
    {
        byte[] $r1;
        java.io.IOException $r5;
        java.security.cert.Certificate r0;
        java.io.DataOutputStream r2;
        org.bouncycastle.jce.provider.JDKKeyStore r7;
        int $i0;
        java.lang.String $r3, $r6;
        java.security.cert.CertificateEncodingException $r4;

        r7 := @this: org.bouncycastle.jce.provider.JDKKeyStore;

        r0 := @parameter0: java.security.cert.Certificate;

        r2 := @parameter1: java.io.DataOutputStream;

     label1:
        $r1 = virtualinvoke r0.<java.security.cert.Certificate: byte[] getEncoded()>();

        $r3 = virtualinvoke r0.<java.security.cert.Certificate: java.lang.String getType()>();

        virtualinvoke r2.<java.io.DataOutputStream: void writeUTF(java.lang.String)>($r3);

        $i0 = lengthof $r1;

        virtualinvoke r2.<java.io.DataOutputStream: void writeInt(int)>($i0);

        virtualinvoke r2.<java.io.DataOutputStream: void write(byte[])>($r1);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        $r5 = new java.io.IOException;

        $r6 = virtualinvoke $r4.<java.security.cert.CertificateEncodingException: java.lang.String toString()>();

        specialinvoke $r5.<java.io.IOException: void <init>(java.lang.String)>($r6);

        throw $r5;

     label4:
        return;

        catch java.security.cert.CertificateEncodingException from label1 to label2 with label3;
    }

    private java.security.cert.Certificate decodeCertificate(java.io.DataInputStream) throws java.io.IOException
    {
        java.io.DataInputStream r0;
        byte[] r2;
        java.security.cert.CertificateFactory $r3;
        java.io.IOException $r7, $r10;
        java.security.cert.CertificateException $r6;
        java.security.cert.Certificate $r5;
        java.io.ByteArrayInputStream $r4;
        org.bouncycastle.jce.provider.JDKKeyStore r12;
        int $i0;
        java.lang.String $r1, $r8, $r11;
        java.security.NoSuchProviderException $r9;

        r12 := @this: org.bouncycastle.jce.provider.JDKKeyStore;

        r0 := @parameter0: java.io.DataInputStream;

        $r1 = virtualinvoke r0.<java.io.DataInputStream: java.lang.String readUTF()>();

        $i0 = virtualinvoke r0.<java.io.DataInputStream: int readInt()>();

        r2 = newarray (byte)[$i0];

        virtualinvoke r0.<java.io.DataInputStream: void readFully(byte[])>(r2);

     label1:
        $r3 = staticinvoke <java.security.cert.CertificateFactory: java.security.cert.CertificateFactory getInstance(java.lang.String,java.lang.String)>($r1, "BC");

        $r4 = new java.io.ByteArrayInputStream;

        specialinvoke $r4.<java.io.ByteArrayInputStream: void <init>(byte[])>(r2);

        $r5 = virtualinvoke $r3.<java.security.cert.CertificateFactory: java.security.cert.Certificate generateCertificate(java.io.InputStream)>($r4);

     label2:
        return $r5;

     label3:
        $r9 := @caughtexception;

        $r10 = new java.io.IOException;

        $r11 = virtualinvoke $r9.<java.security.NoSuchProviderException: java.lang.String toString()>();

        specialinvoke $r10.<java.io.IOException: void <init>(java.lang.String)>($r11);

        throw $r10;

     label4:
        $r6 := @caughtexception;

        $r7 = new java.io.IOException;

        $r8 = virtualinvoke $r6.<java.security.cert.CertificateException: java.lang.String toString()>();

        specialinvoke $r7.<java.io.IOException: void <init>(java.lang.String)>($r8);

        throw $r7;

        catch java.security.NoSuchProviderException from label1 to label2 with label3;
        catch java.security.cert.CertificateException from label1 to label2 with label4;
    }

    private void encodeKey(java.security.Key, java.io.DataOutputStream) throws java.io.IOException
    {
        byte[] $r1;
        java.security.Key r0;
        java.io.DataOutputStream r2;
        org.bouncycastle.jce.provider.JDKKeyStore r3;
        int $i0;
        java.lang.String $r4, $r5;
        boolean $z0, $z1;

        r3 := @this: org.bouncycastle.jce.provider.JDKKeyStore;

        r0 := @parameter0: java.security.Key;

        r2 := @parameter1: java.io.DataOutputStream;

        $r1 = interfaceinvoke r0.<java.security.Key: byte[] getEncoded()>();

        $z0 = r0 instanceof java.security.PrivateKey;

        if $z0 == 0 goto label1;

        virtualinvoke r2.<java.io.DataOutputStream: void write(int)>(0);

        goto label3;

     label1:
        $z1 = r0 instanceof java.security.PublicKey;

        if $z1 == 0 goto label2;

        virtualinvoke r2.<java.io.DataOutputStream: void write(int)>(1);

        goto label3;

     label2:
        virtualinvoke r2.<java.io.DataOutputStream: void write(int)>(2);

     label3:
        $r4 = interfaceinvoke r0.<java.security.Key: java.lang.String getFormat()>();

        virtualinvoke r2.<java.io.DataOutputStream: void writeUTF(java.lang.String)>($r4);

        $r5 = interfaceinvoke r0.<java.security.Key: java.lang.String getAlgorithm()>();

        virtualinvoke r2.<java.io.DataOutputStream: void writeUTF(java.lang.String)>($r5);

        $i0 = lengthof $r1;

        virtualinvoke r2.<java.io.DataOutputStream: void writeInt(int)>($i0);

        virtualinvoke r2.<java.io.DataOutputStream: void write(byte[])>($r1);

        return;
    }

    private java.security.Key decodeKey(java.io.DataInputStream) throws java.io.IOException
    {
        byte[] r3;
        java.security.spec.EncodedKeySpec r33;
        javax.crypto.spec.SecretKeySpec $r24;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.security.spec.X509EncodedKeySpec $r17;
        java.lang.Exception $r25;
        java.security.KeyFactory $r7, $r9;
        java.security.PrivateKey $r10;
        org.bouncycastle.jce.provider.JDKKeyStore r32;
        java.lang.StringBuilder $r12, $r13, $r14, $r15, $r19, $r20, $r21, $r22, $r27, $r28, $r30;
        javax.crypto.SecretKey $r6;
        java.io.DataInputStream r0;
        javax.crypto.SecretKeyFactory $r5;
        int $i0, $i1;
        java.lang.String $r1, $r2, $r16, $r23, $r29, $r31;
        java.security.spec.PKCS8EncodedKeySpec $r4;
        java.security.PublicKey $r8;
        java.io.IOException $r11, $r18, $r26;

        r32 := @this: org.bouncycastle.jce.provider.JDKKeyStore;

        r0 := @parameter0: java.io.DataInputStream;

        $i0 = virtualinvoke r0.<java.io.DataInputStream: int read()>();

        $r1 = virtualinvoke r0.<java.io.DataInputStream: java.lang.String readUTF()>();

        $r2 = virtualinvoke r0.<java.io.DataInputStream: java.lang.String readUTF()>();

        $i1 = virtualinvoke r0.<java.io.DataInputStream: int readInt()>();

        r3 = newarray (byte)[$i1];

        virtualinvoke r0.<java.io.DataInputStream: void readFully(byte[])>(r3);

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("PKCS#8");

        if $z0 != 0 goto label01;

        $z1 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("PKCS8");

        if $z1 == 0 goto label02;

     label01:
        $r4 = new java.security.spec.PKCS8EncodedKeySpec;

        specialinvoke $r4.<java.security.spec.PKCS8EncodedKeySpec: void <init>(byte[])>(r3);

        r33 = $r4;

        goto label06;

     label02:
        $z2 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("X.509");

        if $z2 != 0 goto label03;

        $z3 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("X509");

        if $z3 == 0 goto label04;

     label03:
        $r17 = new java.security.spec.X509EncodedKeySpec;

        specialinvoke $r17.<java.security.spec.X509EncodedKeySpec: void <init>(byte[])>(r3);

        r33 = $r17;

        goto label06;

     label04:
        $z4 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("RAW");

        if $z4 == 0 goto label05;

        $r24 = new javax.crypto.spec.SecretKeySpec;

        specialinvoke $r24.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r3, $r2);

        return $r24;

     label05:
        $r18 = new java.io.IOException;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Key format ");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not recognised!");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r18.<java.io.IOException: void <init>(java.lang.String)>($r23);

        throw $r18;

     label06:
        tableswitch($i0)
        {
            case 0: goto label07;
            case 1: goto label09;
            case 2: goto label11;
            default: goto label13;
        };

     label07:
        $r9 = staticinvoke <java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String,java.lang.String)>($r2, "BC");

        $r10 = virtualinvoke $r9.<java.security.KeyFactory: java.security.PrivateKey generatePrivate(java.security.spec.KeySpec)>(r33);

     label08:
        return $r10;

     label09:
        $r7 = staticinvoke <java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String,java.lang.String)>($r2, "BC");

        $r8 = virtualinvoke $r7.<java.security.KeyFactory: java.security.PublicKey generatePublic(java.security.spec.KeySpec)>(r33);

     label10:
        return $r8;

     label11:
        $r5 = staticinvoke <javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactory getInstance(java.lang.String,java.lang.String)>($r2, "BC");

        $r6 = virtualinvoke $r5.<javax.crypto.SecretKeyFactory: javax.crypto.SecretKey generateSecret(java.security.spec.KeySpec)>(r33);

     label12:
        return $r6;

     label13:
        $r11 = new java.io.IOException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Key type ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not recognised!");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.io.IOException: void <init>(java.lang.String)>($r16);

        throw $r11;

     label14:
        $r25 := @caughtexception;

        $r26 = new java.io.IOException;

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>()>();

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception creating key: ");

        $r29 = virtualinvoke $r25.<java.lang.Exception: java.lang.String toString()>();

        $r30 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r29);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r26.<java.io.IOException: void <init>(java.lang.String)>($r31);

        throw $r26;

        catch java.lang.Exception from label06 to label08 with label14;
        catch java.lang.Exception from label09 to label10 with label14;
        catch java.lang.Exception from label11 to label12 with label14;
        catch java.lang.Exception from label13 to label14 with label14;
    }

    protected javax.crypto.Cipher makePBECipher(java.lang.String, int, char[], byte[], int) throws java.io.IOException
    {
        byte[] r5;
        javax.crypto.Cipher $r6;
        javax.crypto.SecretKeyFactory $r3;
        javax.crypto.spec.PBEKeySpec $r0;
        int i0, i1;
        java.lang.String r2, $r13;
        javax.crypto.spec.PBEParameterSpec $r4;
        java.io.IOException $r9;
        java.lang.Exception $r8;
        org.bouncycastle.jce.provider.JDKKeyStore r14;
        char[] r1;
        java.lang.StringBuilder $r10, $r11, $r12;
        javax.crypto.SecretKey $r7;

        r14 := @this: org.bouncycastle.jce.provider.JDKKeyStore;

        r2 := @parameter0: java.lang.String;

        i1 := @parameter1: int;

        r1 := @parameter2: char[];

        r5 := @parameter3: byte[];

        i0 := @parameter4: int;

     label1:
        $r0 = new javax.crypto.spec.PBEKeySpec;

        specialinvoke $r0.<javax.crypto.spec.PBEKeySpec: void <init>(char[])>(r1);

        $r3 = staticinvoke <javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactory getInstance(java.lang.String,java.lang.String)>(r2, "BC");

        $r4 = new javax.crypto.spec.PBEParameterSpec;

        specialinvoke $r4.<javax.crypto.spec.PBEParameterSpec: void <init>(byte[],int)>(r5, i0);

        $r6 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String,java.lang.String)>(r2, "BC");

        $r7 = virtualinvoke $r3.<javax.crypto.SecretKeyFactory: javax.crypto.SecretKey generateSecret(java.security.spec.KeySpec)>($r0);

        virtualinvoke $r6.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(i1, $r7, $r4);

     label2:
        return $r6;

     label3:
        $r8 := @caughtexception;

        $r9 = new java.io.IOException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error initialising store of key store: ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.io.IOException: void <init>(java.lang.String)>($r13);

        throw $r9;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void setRandom(java.security.SecureRandom)
    {
        java.security.SecureRandom r1;
        org.bouncycastle.jce.provider.JDKKeyStore r0;

        r0 := @this: org.bouncycastle.jce.provider.JDKKeyStore;

        r1 := @parameter0: java.security.SecureRandom;

        r0.<org.bouncycastle.jce.provider.JDKKeyStore: java.security.SecureRandom random> = r1;

        return;
    }

    public java.util.Enumeration engineAliases()
    {
        java.util.Enumeration $r2;
        java.util.Hashtable $r1;
        org.bouncycastle.jce.provider.JDKKeyStore r0;

        r0 := @this: org.bouncycastle.jce.provider.JDKKeyStore;

        $r1 = r0.<org.bouncycastle.jce.provider.JDKKeyStore: java.util.Hashtable table>;

        $r2 = virtualinvoke $r1.<java.util.Hashtable: java.util.Enumeration keys()>();

        return $r2;
    }

    public boolean engineContainsAlias(java.lang.String)
    {
        org.bouncycastle.jce.provider.JDKKeyStore r0;
        java.lang.Object $r3;
        java.lang.String r1;
        java.util.Hashtable $r2;
        boolean $z0;

        r0 := @this: org.bouncycastle.jce.provider.JDKKeyStore;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.bouncycastle.jce.provider.JDKKeyStore: java.util.Hashtable table>;

        $r3 = virtualinvoke $r2.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r1);

        if $r3 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void engineDeleteEntry(java.lang.String) throws java.security.KeyStoreException
    {
        java.security.KeyStoreException $r5;
        org.bouncycastle.jce.provider.JDKKeyStore r0;
        java.lang.Object $r3;
        java.lang.StringBuilder $r6, $r7, $r8;
        java.lang.String r1, $r9;
        java.util.Hashtable $r2, $r4;

        r0 := @this: org.bouncycastle.jce.provider.JDKKeyStore;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.bouncycastle.jce.provider.JDKKeyStore: java.util.Hashtable table>;

        $r3 = virtualinvoke $r2.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r1);

        if $r3 != null goto label1;

        $r5 = new java.security.KeyStoreException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("no such entry as ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.security.KeyStoreException: void <init>(java.lang.String)>($r9);

        throw $r5;

     label1:
        $r4 = r0.<org.bouncycastle.jce.provider.JDKKeyStore: java.util.Hashtable table>;

        virtualinvoke $r4.<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>(r1);

        return;
    }

    public java.security.cert.Certificate engineGetCertificate(java.lang.String)
    {
        java.security.cert.Certificate $r6, $r8;
        org.bouncycastle.jce.provider.JDKKeyStore r0;
        int $i0;
        java.lang.Object $r3, $r7;
        java.security.cert.Certificate[] $r5;
        java.lang.String r1;
        java.util.Hashtable $r2;
        org.bouncycastle.jce.provider.JDKKeyStore$StoreEntry r4;

        r0 := @this: org.bouncycastle.jce.provider.JDKKeyStore;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.bouncycastle.jce.provider.JDKKeyStore: java.util.Hashtable table>;

        $r3 = virtualinvoke $r2.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (org.bouncycastle.jce.provider.JDKKeyStore$StoreEntry) $r3;

        if r4 == null goto label2;

        $i0 = virtualinvoke r4.<org.bouncycastle.jce.provider.JDKKeyStore$StoreEntry: int getType()>();

        if $i0 != 1 goto label1;

        $r7 = virtualinvoke r4.<org.bouncycastle.jce.provider.JDKKeyStore$StoreEntry: java.lang.Object getObject()>();

        $r8 = (java.security.cert.Certificate) $r7;

        return $r8;

     label1:
        $r5 = virtualinvoke r4.<org.bouncycastle.jce.provider.JDKKeyStore$StoreEntry: java.security.cert.Certificate[] getCertificateChain()>();

        if $r5 == null goto label2;

        $r6 = $r5[0];

        return $r6;

     label2:
        return null;
    }

    public java.lang.String engineGetCertificateAlias(java.security.cert.Certificate)
    {
        java.util.Enumeration $r2;
        java.lang.String $r9, $r11;
        java.util.Hashtable $r1;
        org.bouncycastle.jce.provider.JDKKeyStore$StoreEntry r4;
        boolean $z0, $z1, $z2, $z3;
        java.security.cert.Certificate r7, $r8, r12;
        org.bouncycastle.jce.provider.JDKKeyStore r0;
        java.lang.Object $r3, $r5, $r10;
        java.security.cert.Certificate[] $r6;

        r0 := @this: org.bouncycastle.jce.provider.JDKKeyStore;

        r7 := @parameter0: java.security.cert.Certificate;

        $r1 = r0.<org.bouncycastle.jce.provider.JDKKeyStore: java.util.Hashtable table>;

        $r2 = virtualinvoke $r1.<java.util.Hashtable: java.util.Enumeration elements()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 == 0 goto label5;

        $r3 = interfaceinvoke $r2.<java.util.Enumeration: java.lang.Object nextElement()>();

        r4 = (org.bouncycastle.jce.provider.JDKKeyStore$StoreEntry) $r3;

        $r5 = virtualinvoke r4.<org.bouncycastle.jce.provider.JDKKeyStore$StoreEntry: java.lang.Object getObject()>();

        $z1 = $r5 instanceof java.security.cert.Certificate;

        if $z1 == 0 goto label3;

        $r10 = virtualinvoke r4.<org.bouncycastle.jce.provider.JDKKeyStore$StoreEntry: java.lang.Object getObject()>();

        r12 = (java.security.cert.Certificate) $r10;

        $z3 = virtualinvoke r12.<java.security.cert.Certificate: boolean equals(java.lang.Object)>(r7);

        if $z3 == 0 goto label2;

        $r11 = virtualinvoke r4.<org.bouncycastle.jce.provider.JDKKeyStore$StoreEntry: java.lang.String getAlias()>();

        return $r11;

     label2:
        goto label4;

     label3:
        $r6 = virtualinvoke r4.<org.bouncycastle.jce.provider.JDKKeyStore$StoreEntry: java.security.cert.Certificate[] getCertificateChain()>();

        if $r6 == null goto label4;

        $r8 = $r6[0];

        $z2 = virtualinvoke $r8.<java.security.cert.Certificate: boolean equals(java.lang.Object)>(r7);

        if $z2 == 0 goto label4;

        $r9 = virtualinvoke r4.<org.bouncycastle.jce.provider.JDKKeyStore$StoreEntry: java.lang.String getAlias()>();

        return $r9;

     label4:
        goto label1;

     label5:
        return null;
    }

    public java.security.cert.Certificate[] engineGetCertificateChain(java.lang.String)
    {
        org.bouncycastle.jce.provider.JDKKeyStore r0;
        java.lang.Object $r3;
        java.security.cert.Certificate[] $r5;
        java.lang.String r1;
        java.util.Hashtable $r2;
        org.bouncycastle.jce.provider.JDKKeyStore$StoreEntry r4;

        r0 := @this: org.bouncycastle.jce.provider.JDKKeyStore;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.bouncycastle.jce.provider.JDKKeyStore: java.util.Hashtable table>;

        $r3 = virtualinvoke $r2.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (org.bouncycastle.jce.provider.JDKKeyStore$StoreEntry) $r3;

        if r4 == null goto label1;

        $r5 = virtualinvoke r4.<org.bouncycastle.jce.provider.JDKKeyStore$StoreEntry: java.security.cert.Certificate[] getCertificateChain()>();

        return $r5;

     label1:
        return null;
    }

    public java.util.Date engineGetCreationDate(java.lang.String)
    {
        java.util.Date $r5;
        org.bouncycastle.jce.provider.JDKKeyStore r0;
        java.lang.Object $r3;
        java.lang.String r1;
        java.util.Hashtable $r2;
        org.bouncycastle.jce.provider.JDKKeyStore$StoreEntry r4;

        r0 := @this: org.bouncycastle.jce.provider.JDKKeyStore;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.bouncycastle.jce.provider.JDKKeyStore: java.util.Hashtable table>;

        $r3 = virtualinvoke $r2.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (org.bouncycastle.jce.provider.JDKKeyStore$StoreEntry) $r3;

        if r4 == null goto label1;

        $r5 = virtualinvoke r4.<org.bouncycastle.jce.provider.JDKKeyStore$StoreEntry: java.util.Date getDate()>();

        return $r5;

     label1:
        return null;
    }

    public java.security.Key engineGetKey(java.lang.String, char[]) throws java.security.NoSuchAlgorithmException, java.security.UnrecoverableKeyException
    {
        java.security.Key $r7;
        org.bouncycastle.jce.provider.JDKKeyStore r0;
        int $i0;
        char[] r5;
        java.lang.Object $r3, $r6;
        java.lang.String r1;
        java.util.Hashtable $r2;
        org.bouncycastle.jce.provider.JDKKeyStore$StoreEntry r4;

        r0 := @this: org.bouncycastle.jce.provider.JDKKeyStore;

        r1 := @parameter0: java.lang.String;

        r5 := @parameter1: char[];

        $r2 = r0.<org.bouncycastle.jce.provider.JDKKeyStore: java.util.Hashtable table>;

        $r3 = virtualinvoke $r2.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (org.bouncycastle.jce.provider.JDKKeyStore$StoreEntry) $r3;

        if r4 == null goto label1;

        $i0 = virtualinvoke r4.<org.bouncycastle.jce.provider.JDKKeyStore$StoreEntry: int getType()>();

        if $i0 != 1 goto label2;

     label1:
        return null;

     label2:
        $r6 = virtualinvoke r4.<org.bouncycastle.jce.provider.JDKKeyStore$StoreEntry: java.lang.Object getObject(char[])>(r5);

        $r7 = (java.security.Key) $r6;

        return $r7;
    }

    public boolean engineIsCertificateEntry(java.lang.String)
    {
        org.bouncycastle.jce.provider.JDKKeyStore r0;
        int $i0;
        java.lang.Object $r3;
        java.lang.String r1;
        java.util.Hashtable $r2;
        org.bouncycastle.jce.provider.JDKKeyStore$StoreEntry r4;

        r0 := @this: org.bouncycastle.jce.provider.JDKKeyStore;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.bouncycastle.jce.provider.JDKKeyStore: java.util.Hashtable table>;

        $r3 = virtualinvoke $r2.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (org.bouncycastle.jce.provider.JDKKeyStore$StoreEntry) $r3;

        if r4 == null goto label1;

        $i0 = virtualinvoke r4.<org.bouncycastle.jce.provider.JDKKeyStore$StoreEntry: int getType()>();

        if $i0 != 1 goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean engineIsKeyEntry(java.lang.String)
    {
        org.bouncycastle.jce.provider.JDKKeyStore r0;
        int $i0;
        java.lang.Object $r3;
        java.lang.String r1;
        java.util.Hashtable $r2;
        org.bouncycastle.jce.provider.JDKKeyStore$StoreEntry r4;

        r0 := @this: org.bouncycastle.jce.provider.JDKKeyStore;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.bouncycastle.jce.provider.JDKKeyStore: java.util.Hashtable table>;

        $r3 = virtualinvoke $r2.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (org.bouncycastle.jce.provider.JDKKeyStore$StoreEntry) $r3;

        if r4 == null goto label1;

        $i0 = virtualinvoke r4.<org.bouncycastle.jce.provider.JDKKeyStore$StoreEntry: int getType()>();

        if $i0 == 1 goto label1;

        return 1;

     label1:
        return 0;
    }

    public void engineSetCertificateEntry(java.lang.String, java.security.cert.Certificate) throws java.security.KeyStoreException
    {
        java.security.KeyStoreException $r8;
        java.security.cert.Certificate r6;
        org.bouncycastle.jce.provider.JDKKeyStore r0;
        int $i0;
        java.lang.Object $r3;
        java.lang.StringBuilder $r9, $r10, $r11;
        java.lang.String r1, $r12;
        java.util.Hashtable $r2, $r7;
        org.bouncycastle.jce.provider.JDKKeyStore$StoreEntry r4, $r5;

        r0 := @this: org.bouncycastle.jce.provider.JDKKeyStore;

        r1 := @parameter0: java.lang.String;

        r6 := @parameter1: java.security.cert.Certificate;

        $r2 = r0.<org.bouncycastle.jce.provider.JDKKeyStore: java.util.Hashtable table>;

        $r3 = virtualinvoke $r2.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (org.bouncycastle.jce.provider.JDKKeyStore$StoreEntry) $r3;

        if r4 == null goto label1;

        $i0 = virtualinvoke r4.<org.bouncycastle.jce.provider.JDKKeyStore$StoreEntry: int getType()>();

        if $i0 == 1 goto label1;

        $r8 = new java.security.KeyStoreException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("key store already has a key entry with alias ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.security.KeyStoreException: void <init>(java.lang.String)>($r12);

        throw $r8;

     label1:
        $r7 = r0.<org.bouncycastle.jce.provider.JDKKeyStore: java.util.Hashtable table>;

        $r5 = new org.bouncycastle.jce.provider.JDKKeyStore$StoreEntry;

        specialinvoke $r5.<org.bouncycastle.jce.provider.JDKKeyStore$StoreEntry: void <init>(org.bouncycastle.jce.provider.JDKKeyStore,java.lang.String,java.security.cert.Certificate)>(r0, r1, r6);

        virtualinvoke $r7.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r5);

        return;
    }

    public void engineSetKeyEntry(java.lang.String, byte[], java.security.cert.Certificate[]) throws java.security.KeyStoreException
    {
        byte[] r3;
        org.bouncycastle.jce.provider.JDKKeyStore r0;
        java.security.cert.Certificate[] r4;
        java.lang.String r1;
        org.bouncycastle.jce.provider.JDKKeyStore$StoreEntry $r2;
        java.util.Hashtable $r5;

        r0 := @this: org.bouncycastle.jce.provider.JDKKeyStore;

        r1 := @parameter0: java.lang.String;

        r3 := @parameter1: byte[];

        r4 := @parameter2: java.security.cert.Certificate[];

        $r5 = r0.<org.bouncycastle.jce.provider.JDKKeyStore: java.util.Hashtable table>;

        $r2 = new org.bouncycastle.jce.provider.JDKKeyStore$StoreEntry;

        specialinvoke $r2.<org.bouncycastle.jce.provider.JDKKeyStore$StoreEntry: void <init>(org.bouncycastle.jce.provider.JDKKeyStore,java.lang.String,byte[],java.security.cert.Certificate[])>(r0, r1, r3, r4);

        virtualinvoke $r5.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r2);

        return;
    }

    public void engineSetKeyEntry(java.lang.String, java.security.Key, char[], java.security.cert.Certificate[]) throws java.security.KeyStoreException
    {
        java.security.KeyStoreException $r7, $r9;
        java.lang.Exception $r8;
        java.security.Key r0;
        org.bouncycastle.jce.provider.JDKKeyStore r1;
        char[] r4;
        java.security.cert.Certificate[] r5;
        java.lang.String r2, $r10;
        org.bouncycastle.jce.provider.JDKKeyStore$StoreEntry $r3;
        java.util.Hashtable $r6;
        boolean $z0;

        r1 := @this: org.bouncycastle.jce.provider.JDKKeyStore;

        r2 := @parameter0: java.lang.String;

        r0 := @parameter1: java.security.Key;

        r4 := @parameter2: char[];

        r5 := @parameter3: java.security.cert.Certificate[];

        $z0 = r0 instanceof java.security.PrivateKey;

        if $z0 == 0 goto label1;

        if r5 != null goto label1;

        $r7 = new java.security.KeyStoreException;

        specialinvoke $r7.<java.security.KeyStoreException: void <init>(java.lang.String)>("no certificate chain for private key");

        throw $r7;

     label1:
        $r6 = r1.<org.bouncycastle.jce.provider.JDKKeyStore: java.util.Hashtable table>;

        $r3 = new org.bouncycastle.jce.provider.JDKKeyStore$StoreEntry;

        specialinvoke $r3.<org.bouncycastle.jce.provider.JDKKeyStore$StoreEntry: void <init>(org.bouncycastle.jce.provider.JDKKeyStore,java.lang.String,java.security.Key,char[],java.security.cert.Certificate[])>(r1, r2, r0, r4, r5);

        virtualinvoke $r6.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, $r3);

     label2:
        goto label4;

     label3:
        $r8 := @caughtexception;

        $r9 = new java.security.KeyStoreException;

        $r10 = virtualinvoke $r8.<java.lang.Exception: java.lang.String toString()>();

        specialinvoke $r9.<java.security.KeyStoreException: void <init>(java.lang.String)>($r10);

        throw $r9;

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public int engineSize()
    {
        int $i0;
        java.util.Hashtable $r1;
        org.bouncycastle.jce.provider.JDKKeyStore r0;

        r0 := @this: org.bouncycastle.jce.provider.JDKKeyStore;

        $r1 = r0.<org.bouncycastle.jce.provider.JDKKeyStore: java.util.Hashtable table>;

        $i0 = virtualinvoke $r1.<java.util.Hashtable: int size()>();

        return $i0;
    }

    protected void loadStore(java.io.InputStream) throws java.io.IOException
    {
        java.io.DataInputStream $r0;
        byte[] r4;
        java.util.Date $r3;
        long $l0;
        int $i1, $i2, i3, i4;
        java.lang.String $r2;
        org.bouncycastle.jce.provider.JDKKeyStore$StoreEntry $r6, $r9, $r12;
        java.util.Hashtable $r7, $r10, $r13;
        java.lang.RuntimeException $r14;
        java.security.Key $r8;
        java.security.cert.Certificate $r11, $r15;
        org.bouncycastle.jce.provider.JDKKeyStore r5;
        java.security.cert.Certificate[] r16;
        java.io.InputStream r1;

        r5 := @this: org.bouncycastle.jce.provider.JDKKeyStore;

        r1 := @parameter0: java.io.InputStream;

        $r0 = new java.io.DataInputStream;

        specialinvoke $r0.<java.io.DataInputStream: void <init>(java.io.InputStream)>(r1);

        i3 = virtualinvoke $r0.<java.io.DataInputStream: int read()>();

     label1:
        if i3 <= 0 goto label9;

        $r2 = virtualinvoke $r0.<java.io.DataInputStream: java.lang.String readUTF()>();

        $r3 = new java.util.Date;

        $l0 = virtualinvoke $r0.<java.io.DataInputStream: long readLong()>();

        specialinvoke $r3.<java.util.Date: void <init>(long)>($l0);

        $i1 = virtualinvoke $r0.<java.io.DataInputStream: int readInt()>();

        r16 = null;

        if $i1 == 0 goto label3;

        r16 = newarray (java.security.cert.Certificate)[$i1];

        i4 = 0;

     label2:
        if i4 == $i1 goto label3;

        $r15 = specialinvoke r5.<org.bouncycastle.jce.provider.JDKKeyStore: java.security.cert.Certificate decodeCertificate(java.io.DataInputStream)>($r0);

        r16[i4] = $r15;

        i4 = i4 + 1;

        goto label2;

     label3:
        tableswitch(i3)
        {
            case 1: goto label4;
            case 2: goto label5;
            case 3: goto label6;
            case 4: goto label6;
            default: goto label7;
        };

     label4:
        $r11 = specialinvoke r5.<org.bouncycastle.jce.provider.JDKKeyStore: java.security.cert.Certificate decodeCertificate(java.io.DataInputStream)>($r0);

        $r13 = r5.<org.bouncycastle.jce.provider.JDKKeyStore: java.util.Hashtable table>;

        $r12 = new org.bouncycastle.jce.provider.JDKKeyStore$StoreEntry;

        specialinvoke $r12.<org.bouncycastle.jce.provider.JDKKeyStore$StoreEntry: void <init>(org.bouncycastle.jce.provider.JDKKeyStore,java.lang.String,java.util.Date,int,java.lang.Object)>(r5, $r2, $r3, 1, $r11);

        virtualinvoke $r13.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r12);

        goto label8;

     label5:
        $r8 = specialinvoke r5.<org.bouncycastle.jce.provider.JDKKeyStore: java.security.Key decodeKey(java.io.DataInputStream)>($r0);

        $r10 = r5.<org.bouncycastle.jce.provider.JDKKeyStore: java.util.Hashtable table>;

        $r9 = new org.bouncycastle.jce.provider.JDKKeyStore$StoreEntry;

        specialinvoke $r9.<org.bouncycastle.jce.provider.JDKKeyStore$StoreEntry: void <init>(org.bouncycastle.jce.provider.JDKKeyStore,java.lang.String,java.util.Date,int,java.lang.Object,java.security.cert.Certificate[])>(r5, $r2, $r3, 2, $r8, r16);

        virtualinvoke $r10.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r9);

        goto label8;

     label6:
        $i2 = virtualinvoke $r0.<java.io.DataInputStream: int readInt()>();

        r4 = newarray (byte)[$i2];

        virtualinvoke $r0.<java.io.DataInputStream: void readFully(byte[])>(r4);

        $r7 = r5.<org.bouncycastle.jce.provider.JDKKeyStore: java.util.Hashtable table>;

        $r6 = new org.bouncycastle.jce.provider.JDKKeyStore$StoreEntry;

        specialinvoke $r6.<org.bouncycastle.jce.provider.JDKKeyStore$StoreEntry: void <init>(org.bouncycastle.jce.provider.JDKKeyStore,java.lang.String,java.util.Date,int,java.lang.Object,java.security.cert.Certificate[])>(r5, $r2, $r3, i3, r4, r16);

        virtualinvoke $r7.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r6);

        goto label8;

     label7:
        $r14 = new java.lang.RuntimeException;

        specialinvoke $r14.<java.lang.RuntimeException: void <init>(java.lang.String)>("Unknown object type in store.");

        throw $r14;

     label8:
        i3 = virtualinvoke $r0.<java.io.DataInputStream: int read()>();

        goto label1;

     label9:
        return;
    }

    protected void saveStore(java.io.OutputStream) throws java.io.IOException
    {
        byte[] $r11, r18;
        java.util.Enumeration $r2;
        java.util.Date $r8;
        long $l1;
        java.io.DataOutputStream $r3;
        int $i0, $i2, $i3, $i4, $i5, i6;
        java.lang.String $r7;
        java.util.Hashtable $r1;
        org.bouncycastle.jce.provider.JDKKeyStore$StoreEntry r6;
        boolean $z0;
        java.io.OutputStream r4;
        java.lang.RuntimeException $r16;
        java.security.Key $r13;
        java.security.cert.Certificate $r15, $r17;
        org.bouncycastle.jce.provider.JDKKeyStore r0;
        java.lang.Object $r5, $r10, $r12, $r14;
        java.security.cert.Certificate[] $r9;

        r0 := @this: org.bouncycastle.jce.provider.JDKKeyStore;

        r4 := @parameter0: java.io.OutputStream;

        $r1 = r0.<org.bouncycastle.jce.provider.JDKKeyStore: java.util.Hashtable table>;

        $r2 = virtualinvoke $r1.<java.util.Hashtable: java.util.Enumeration elements()>();

        $r3 = new java.io.DataOutputStream;

        specialinvoke $r3.<java.io.DataOutputStream: void <init>(java.io.OutputStream)>(r4);

     label01:
        $z0 = interfaceinvoke $r2.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 == 0 goto label10;

        $r5 = interfaceinvoke $r2.<java.util.Enumeration: java.lang.Object nextElement()>();

        r6 = (org.bouncycastle.jce.provider.JDKKeyStore$StoreEntry) $r5;

        $i0 = virtualinvoke r6.<org.bouncycastle.jce.provider.JDKKeyStore$StoreEntry: int getType()>();

        virtualinvoke $r3.<java.io.DataOutputStream: void write(int)>($i0);

        $r7 = virtualinvoke r6.<org.bouncycastle.jce.provider.JDKKeyStore$StoreEntry: java.lang.String getAlias()>();

        virtualinvoke $r3.<java.io.DataOutputStream: void writeUTF(java.lang.String)>($r7);

        $r8 = virtualinvoke r6.<org.bouncycastle.jce.provider.JDKKeyStore$StoreEntry: java.util.Date getDate()>();

        $l1 = virtualinvoke $r8.<java.util.Date: long getTime()>();

        virtualinvoke $r3.<java.io.DataOutputStream: void writeLong(long)>($l1);

        $r9 = virtualinvoke r6.<org.bouncycastle.jce.provider.JDKKeyStore$StoreEntry: java.security.cert.Certificate[] getCertificateChain()>();

        if $r9 != null goto label02;

        virtualinvoke $r3.<java.io.DataOutputStream: void writeInt(int)>(0);

        goto label04;

     label02:
        $i2 = lengthof $r9;

        virtualinvoke $r3.<java.io.DataOutputStream: void writeInt(int)>($i2);

        i6 = 0;

     label03:
        $i3 = lengthof $r9;

        if i6 == $i3 goto label04;

        $r17 = $r9[i6];

        specialinvoke r0.<org.bouncycastle.jce.provider.JDKKeyStore: void encodeCertificate(java.security.cert.Certificate,java.io.DataOutputStream)>($r17, $r3);

        i6 = i6 + 1;

        goto label03;

     label04:
        $i4 = virtualinvoke r6.<org.bouncycastle.jce.provider.JDKKeyStore$StoreEntry: int getType()>();

        tableswitch($i4)
        {
            case 1: goto label05;
            case 2: goto label06;
            case 3: goto label07;
            case 4: goto label07;
            default: goto label08;
        };

     label05:
        $r14 = virtualinvoke r6.<org.bouncycastle.jce.provider.JDKKeyStore$StoreEntry: java.lang.Object getObject()>();

        $r15 = (java.security.cert.Certificate) $r14;

        specialinvoke r0.<org.bouncycastle.jce.provider.JDKKeyStore: void encodeCertificate(java.security.cert.Certificate,java.io.DataOutputStream)>($r15, $r3);

        goto label09;

     label06:
        $r12 = virtualinvoke r6.<org.bouncycastle.jce.provider.JDKKeyStore$StoreEntry: java.lang.Object getObject()>();

        $r13 = (java.security.Key) $r12;

        specialinvoke r0.<org.bouncycastle.jce.provider.JDKKeyStore: void encodeKey(java.security.Key,java.io.DataOutputStream)>($r13, $r3);

        goto label09;

     label07:
        $r10 = virtualinvoke r6.<org.bouncycastle.jce.provider.JDKKeyStore$StoreEntry: java.lang.Object getObject()>();

        $r11 = (byte[]) $r10;

        r18 = (byte[]) $r11;

        $i5 = lengthof r18;

        virtualinvoke $r3.<java.io.DataOutputStream: void writeInt(int)>($i5);

        virtualinvoke $r3.<java.io.DataOutputStream: void write(byte[])>(r18);

        goto label09;

     label08:
        $r16 = new java.lang.RuntimeException;

        specialinvoke $r16.<java.lang.RuntimeException: void <init>(java.lang.String)>("Unknown object type in store.");

        throw $r16;

     label09:
        goto label01;

     label10:
        virtualinvoke $r3.<java.io.DataOutputStream: void write(int)>(0);

        return;
    }

    public void engineLoad(java.io.InputStream, char[]) throws java.io.IOException
    {
        java.io.DataInputStream $r3;
        byte[] $r7, $r8, r13, r14, $r17;
        org.bouncycastle.crypto.macs.HMac $r4;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        java.util.Hashtable $r1, $r15;
        org.bouncycastle.crypto.digests.SHA1Digest $r5, $r10;
        org.bouncycastle.crypto.CipherParameters $r11;
        boolean $z0;
        java.io.IOException $r16, $r18;
        org.bouncycastle.crypto.generators.PKCS12ParametersGenerator $r9;
        org.bouncycastle.jce.provider.JDKKeyStore r0;
        char[] r6;
        org.bouncycastle.crypto.io.MacInputStream $r12;
        java.io.InputStream r2;

        r0 := @this: org.bouncycastle.jce.provider.JDKKeyStore;

        r2 := @parameter0: java.io.InputStream;

        r6 := @parameter1: char[];

        $r1 = r0.<org.bouncycastle.jce.provider.JDKKeyStore: java.util.Hashtable table>;

        virtualinvoke $r1.<java.util.Hashtable: void clear()>();

        if r2 != null goto label1;

        return;

     label1:
        $r3 = new java.io.DataInputStream;

        specialinvoke $r3.<java.io.DataInputStream: void <init>(java.io.InputStream)>(r2);

        $i0 = virtualinvoke $r3.<java.io.DataInputStream: int readInt()>();

        if $i0 == 1 goto label2;

        if $i0 == 0 goto label2;

        $r18 = new java.io.IOException;

        specialinvoke $r18.<java.io.IOException: void <init>(java.lang.String)>("Wrong version of key store.");

        throw $r18;

     label2:
        $i1 = virtualinvoke $r3.<java.io.DataInputStream: int readInt()>();

        $r17 = newarray (byte)[$i1];

        virtualinvoke $r3.<java.io.DataInputStream: void readFully(byte[])>($r17);

        $i2 = virtualinvoke $r3.<java.io.DataInputStream: int readInt()>();

        $r4 = new org.bouncycastle.crypto.macs.HMac;

        $r5 = new org.bouncycastle.crypto.digests.SHA1Digest;

        specialinvoke $r5.<org.bouncycastle.crypto.digests.SHA1Digest: void <init>()>();

        specialinvoke $r4.<org.bouncycastle.crypto.macs.HMac: void <init>(org.bouncycastle.crypto.Digest)>($r5);

        if r6 == null goto label4;

        $i4 = lengthof r6;

        if $i4 == 0 goto label4;

        $r8 = staticinvoke <org.bouncycastle.crypto.PBEParametersGenerator: byte[] PKCS12PasswordToBytes(char[])>(r6);

        $r9 = new org.bouncycastle.crypto.generators.PKCS12ParametersGenerator;

        $r10 = new org.bouncycastle.crypto.digests.SHA1Digest;

        specialinvoke $r10.<org.bouncycastle.crypto.digests.SHA1Digest: void <init>()>();

        specialinvoke $r9.<org.bouncycastle.crypto.generators.PKCS12ParametersGenerator: void <init>(org.bouncycastle.crypto.Digest)>($r10);

        virtualinvoke $r9.<org.bouncycastle.crypto.PBEParametersGenerator: void init(byte[],byte[],int)>($r8, $r17, $i2);

        $i5 = virtualinvoke $r4.<org.bouncycastle.crypto.macs.HMac: int getMacSize()>();

        $r11 = virtualinvoke $r9.<org.bouncycastle.crypto.PBEParametersGenerator: org.bouncycastle.crypto.CipherParameters generateDerivedMacParameters(int)>($i5);

        staticinvoke <org.bouncycastle.util.Arrays: void fill(byte[],byte)>($r8, 0);

        virtualinvoke $r4.<org.bouncycastle.crypto.macs.HMac: void init(org.bouncycastle.crypto.CipherParameters)>($r11);

        $r12 = new org.bouncycastle.crypto.io.MacInputStream;

        specialinvoke $r12.<org.bouncycastle.crypto.io.MacInputStream: void <init>(java.io.InputStream,org.bouncycastle.crypto.Mac)>($r3, $r4);

        virtualinvoke r0.<org.bouncycastle.jce.provider.JDKKeyStore: void loadStore(java.io.InputStream)>($r12);

        $i6 = virtualinvoke $r4.<org.bouncycastle.crypto.macs.HMac: int getMacSize()>();

        r13 = newarray (byte)[$i6];

        virtualinvoke $r4.<org.bouncycastle.crypto.macs.HMac: int doFinal(byte[],int)>(r13, 0);

        $i7 = virtualinvoke $r4.<org.bouncycastle.crypto.macs.HMac: int getMacSize()>();

        r14 = newarray (byte)[$i7];

        virtualinvoke $r3.<java.io.DataInputStream: void readFully(byte[])>(r14);

        $z0 = staticinvoke <org.bouncycastle.util.Arrays: boolean constantTimeAreEqual(byte[],byte[])>(r13, r14);

        if $z0 != 0 goto label3;

        $r15 = r0.<org.bouncycastle.jce.provider.JDKKeyStore: java.util.Hashtable table>;

        virtualinvoke $r15.<java.util.Hashtable: void clear()>();

        $r16 = new java.io.IOException;

        specialinvoke $r16.<java.io.IOException: void <init>(java.lang.String)>("KeyStore integrity check failed.");

        throw $r16;

     label3:
        goto label5;

     label4:
        virtualinvoke r0.<org.bouncycastle.jce.provider.JDKKeyStore: void loadStore(java.io.InputStream)>($r3);

        $i3 = virtualinvoke $r4.<org.bouncycastle.crypto.macs.HMac: int getMacSize()>();

        $r7 = newarray (byte)[$i3];

        virtualinvoke $r3.<java.io.DataInputStream: void readFully(byte[])>($r7);

     label5:
        return;
    }

    public void engineStore(java.io.OutputStream, char[]) throws java.io.IOException
    {
        byte[] r2, $r12, r14;
        java.security.SecureRandom $r4, $r5;
        org.bouncycastle.crypto.macs.HMac $r6;
        java.io.DataOutputStream $r0;
        int $i0, $i1, i2, $i3, $i4, $i5, $i6, i7;
        org.bouncycastle.crypto.digests.SHA1Digest $r7, $r10;
        org.bouncycastle.crypto.CipherParameters $r13;
        java.io.OutputStream r1;
        org.bouncycastle.crypto.io.MacOutputStream $r8;
        org.bouncycastle.crypto.generators.PKCS12ParametersGenerator $r9;
        org.bouncycastle.jce.provider.JDKKeyStore r3;
        char[] r11;

        r3 := @this: org.bouncycastle.jce.provider.JDKKeyStore;

        r1 := @parameter0: java.io.OutputStream;

        r11 := @parameter1: char[];

        $r0 = new java.io.DataOutputStream;

        specialinvoke $r0.<java.io.DataOutputStream: void <init>(java.io.OutputStream)>(r1);

        r2 = newarray (byte)[20];

        $r4 = r3.<org.bouncycastle.jce.provider.JDKKeyStore: java.security.SecureRandom random>;

        $i0 = virtualinvoke $r4.<java.security.SecureRandom: int nextInt()>();

        $i1 = $i0 & 1023;

        i2 = 1024 + $i1;

        $r5 = r3.<org.bouncycastle.jce.provider.JDKKeyStore: java.security.SecureRandom random>;

        virtualinvoke $r5.<java.security.SecureRandom: void nextBytes(byte[])>(r2);

        virtualinvoke $r0.<java.io.DataOutputStream: void writeInt(int)>(1);

        $i3 = lengthof r2;

        virtualinvoke $r0.<java.io.DataOutputStream: void writeInt(int)>($i3);

        virtualinvoke $r0.<java.io.DataOutputStream: void write(byte[])>(r2);

        virtualinvoke $r0.<java.io.DataOutputStream: void writeInt(int)>(i2);

        $r6 = new org.bouncycastle.crypto.macs.HMac;

        $r7 = new org.bouncycastle.crypto.digests.SHA1Digest;

        specialinvoke $r7.<org.bouncycastle.crypto.digests.SHA1Digest: void <init>()>();

        specialinvoke $r6.<org.bouncycastle.crypto.macs.HMac: void <init>(org.bouncycastle.crypto.Digest)>($r7);

        $r8 = new org.bouncycastle.crypto.io.MacOutputStream;

        specialinvoke $r8.<org.bouncycastle.crypto.io.MacOutputStream: void <init>(java.io.OutputStream,org.bouncycastle.crypto.Mac)>($r0, $r6);

        $r9 = new org.bouncycastle.crypto.generators.PKCS12ParametersGenerator;

        $r10 = new org.bouncycastle.crypto.digests.SHA1Digest;

        specialinvoke $r10.<org.bouncycastle.crypto.digests.SHA1Digest: void <init>()>();

        specialinvoke $r9.<org.bouncycastle.crypto.generators.PKCS12ParametersGenerator: void <init>(org.bouncycastle.crypto.Digest)>($r10);

        $r12 = staticinvoke <org.bouncycastle.crypto.PBEParametersGenerator: byte[] PKCS12PasswordToBytes(char[])>(r11);

        virtualinvoke $r9.<org.bouncycastle.crypto.PBEParametersGenerator: void init(byte[],byte[],int)>($r12, r2, i2);

        $i4 = virtualinvoke $r6.<org.bouncycastle.crypto.macs.HMac: int getMacSize()>();

        $r13 = virtualinvoke $r9.<org.bouncycastle.crypto.PBEParametersGenerator: org.bouncycastle.crypto.CipherParameters generateDerivedMacParameters(int)>($i4);

        virtualinvoke $r6.<org.bouncycastle.crypto.macs.HMac: void init(org.bouncycastle.crypto.CipherParameters)>($r13);

        i7 = 0;

     label1:
        $i5 = lengthof $r12;

        if i7 == $i5 goto label2;

        $r12[i7] = 0;

        i7 = i7 + 1;

        goto label1;

     label2:
        virtualinvoke r3.<org.bouncycastle.jce.provider.JDKKeyStore: void saveStore(java.io.OutputStream)>($r8);

        $i6 = virtualinvoke $r6.<org.bouncycastle.crypto.macs.HMac: int getMacSize()>();

        r14 = newarray (byte)[$i6];

        virtualinvoke $r6.<org.bouncycastle.crypto.macs.HMac: int doFinal(byte[],int)>(r14, 0);

        virtualinvoke $r0.<java.io.DataOutputStream: void write(byte[])>(r14);

        virtualinvoke $r0.<java.io.DataOutputStream: void close()>();

        return;
    }

    static void access$000(org.bouncycastle.jce.provider.JDKKeyStore, java.security.Key, java.io.DataOutputStream) throws java.io.IOException
    {
        java.security.Key r1;
        java.io.DataOutputStream r2;
        org.bouncycastle.jce.provider.JDKKeyStore r0;

        r0 := @parameter0: org.bouncycastle.jce.provider.JDKKeyStore;

        r1 := @parameter1: java.security.Key;

        r2 := @parameter2: java.io.DataOutputStream;

        specialinvoke r0.<org.bouncycastle.jce.provider.JDKKeyStore: void encodeKey(java.security.Key,java.io.DataOutputStream)>(r1, r2);

        return;
    }

    static java.security.Key access$100(org.bouncycastle.jce.provider.JDKKeyStore, java.io.DataInputStream) throws java.io.IOException
    {
        java.security.Key $r2;
        java.io.DataInputStream r1;
        org.bouncycastle.jce.provider.JDKKeyStore r0;

        r0 := @parameter0: org.bouncycastle.jce.provider.JDKKeyStore;

        r1 := @parameter1: java.io.DataInputStream;

        $r2 = specialinvoke r0.<org.bouncycastle.jce.provider.JDKKeyStore: java.security.Key decodeKey(java.io.DataInputStream)>(r1);

        return $r2;
    }

    public static void <clinit>()
    {
        <org.bouncycastle.jce.provider.JDKKeyStore: int KEY_SECRET> = 2;

        <org.bouncycastle.jce.provider.JDKKeyStore: int KEY_PUBLIC> = 1;

        <org.bouncycastle.jce.provider.JDKKeyStore: int KEY_PRIVATE> = 0;

        <org.bouncycastle.jce.provider.JDKKeyStore: int SEALED> = 4;

        <org.bouncycastle.jce.provider.JDKKeyStore: int SECRET> = 3;

        <org.bouncycastle.jce.provider.JDKKeyStore: int KEY> = 2;

        <org.bouncycastle.jce.provider.JDKKeyStore: int CERTIFICATE> = 1;

        <org.bouncycastle.jce.provider.JDKKeyStore: int NULL> = 0;

        <org.bouncycastle.jce.provider.JDKKeyStore: java.lang.String KEY_CIPHER> = "PBEWithSHAAnd3-KeyTripleDES-CBC";

        <org.bouncycastle.jce.provider.JDKKeyStore: int MIN_ITERATIONS> = 1024;

        <org.bouncycastle.jce.provider.JDKKeyStore: int KEY_SALT_SIZE> = 20;

        <org.bouncycastle.jce.provider.JDKKeyStore: java.lang.String STORE_CIPHER> = "PBEWithSHAAndTwofish-CBC";

        <org.bouncycastle.jce.provider.JDKKeyStore: int STORE_SALT_SIZE> = 20;

        <org.bouncycastle.jce.provider.JDKKeyStore: int STORE_VERSION> = 1;

        return;
    }
}
