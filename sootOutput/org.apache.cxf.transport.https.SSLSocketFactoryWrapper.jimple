class org.apache.cxf.transport.https.SSLSocketFactoryWrapper extends javax.net.ssl.SSLSocketFactory
{
    private static final java.util.logging.Logger LOG;
    private javax.net.ssl.SSLSocketFactory sslSocketFactory;
    private java.lang.String[] ciphers;
    private java.lang.String protocol;

    public void <init>(javax.net.ssl.SSLSocketFactory, java.lang.String[], java.lang.String)
    {
        java.lang.String[] r2;
        java.lang.String r3;
        org.apache.cxf.transport.https.SSLSocketFactoryWrapper r0;
        javax.net.ssl.SSLSocketFactory r1;

        r0 := @this: org.apache.cxf.transport.https.SSLSocketFactoryWrapper;

        r1 := @parameter0: javax.net.ssl.SSLSocketFactory;

        r2 := @parameter1: java.lang.String[];

        r3 := @parameter2: java.lang.String;

        specialinvoke r0.<javax.net.ssl.SSLSocketFactory: void <init>()>();

        r0.<org.apache.cxf.transport.https.SSLSocketFactoryWrapper: javax.net.ssl.SSLSocketFactory sslSocketFactory> = r1;

        r0.<org.apache.cxf.transport.https.SSLSocketFactoryWrapper: java.lang.String[] ciphers> = r2;

        r0.<org.apache.cxf.transport.https.SSLSocketFactoryWrapper: java.lang.String protocol> = r3;

        return;
    }

    public java.lang.String[] getDefaultCipherSuites()
    {
        java.lang.String[] $r2;
        org.apache.cxf.transport.https.SSLSocketFactoryWrapper r0;
        javax.net.ssl.SSLSocketFactory $r1;

        r0 := @this: org.apache.cxf.transport.https.SSLSocketFactoryWrapper;

        $r1 = r0.<org.apache.cxf.transport.https.SSLSocketFactoryWrapper: javax.net.ssl.SSLSocketFactory sslSocketFactory>;

        $r2 = virtualinvoke $r1.<javax.net.ssl.SSLSocketFactory: java.lang.String[] getDefaultCipherSuites()>();

        return $r2;
    }

    public java.lang.String[] getSupportedCipherSuites()
    {
        java.lang.String[] $r2;
        org.apache.cxf.transport.https.SSLSocketFactoryWrapper r0;
        javax.net.ssl.SSLSocketFactory $r1;

        r0 := @this: org.apache.cxf.transport.https.SSLSocketFactoryWrapper;

        $r1 = r0.<org.apache.cxf.transport.https.SSLSocketFactoryWrapper: javax.net.ssl.SSLSocketFactory sslSocketFactory>;

        $r2 = virtualinvoke $r1.<javax.net.ssl.SSLSocketFactory: java.lang.String[] getSupportedCipherSuites()>();

        return $r2;
    }

    public java.net.Socket createSocket() throws java.io.IOException
    {
        java.net.Socket $r2, $r4;
        java.lang.Object[] $r3;
        org.apache.cxf.transport.https.SSLSocketFactoryWrapper r0;
        javax.net.ssl.SSLSocketFactory $r1;

        r0 := @this: org.apache.cxf.transport.https.SSLSocketFactoryWrapper;

        $r1 = r0.<org.apache.cxf.transport.https.SSLSocketFactoryWrapper: javax.net.ssl.SSLSocketFactory sslSocketFactory>;

        $r2 = virtualinvoke $r1.<javax.net.ssl.SSLSocketFactory: java.net.Socket createSocket()>();

        $r3 = newarray (java.lang.Object)[2];

        $r3[0] = "unconnected";

        $r3[1] = "unconnected";

        $r4 = specialinvoke r0.<org.apache.cxf.transport.https.SSLSocketFactoryWrapper: java.net.Socket enableCipherSuites(java.net.Socket,java.lang.Object[])>($r2, $r3);

        return $r4;
    }

    public java.net.Socket createSocket(java.net.Socket, java.lang.String, int, boolean) throws java.io.IOException, java.net.UnknownHostException
    {
        java.net.Socket r1, $r4, $r7;
        java.lang.Object[] $r5;
        org.apache.cxf.transport.https.SSLSocketFactoryWrapper r0;
        java.lang.Integer $r6;
        javax.net.ssl.SSLSocketFactory $r3;
        int i0;
        java.lang.String r2;
        boolean z0;

        r0 := @this: org.apache.cxf.transport.https.SSLSocketFactoryWrapper;

        r1 := @parameter0: java.net.Socket;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        z0 := @parameter3: boolean;

        $r3 = r0.<org.apache.cxf.transport.https.SSLSocketFactoryWrapper: javax.net.ssl.SSLSocketFactory sslSocketFactory>;

        $r4 = virtualinvoke $r3.<javax.net.ssl.SSLSocketFactory: java.net.Socket createSocket(java.net.Socket,java.lang.String,int,boolean)>(r1, r2, i0, z0);

        $r5 = newarray (java.lang.Object)[2];

        $r5[0] = r2;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r5[1] = $r6;

        $r7 = specialinvoke r0.<org.apache.cxf.transport.https.SSLSocketFactoryWrapper: java.net.Socket enableCipherSuites(java.net.Socket,java.lang.Object[])>($r4, $r5);

        return $r7;
    }

    public java.net.Socket createSocket(java.lang.String, int) throws java.io.IOException, java.net.UnknownHostException
    {
        java.net.Socket $r3, $r6;
        java.lang.Object[] $r4;
        org.apache.cxf.transport.https.SSLSocketFactoryWrapper r0;
        java.lang.Integer $r5;
        javax.net.ssl.SSLSocketFactory $r2;
        int i0;
        java.lang.String r1;

        r0 := @this: org.apache.cxf.transport.https.SSLSocketFactoryWrapper;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r2 = r0.<org.apache.cxf.transport.https.SSLSocketFactoryWrapper: javax.net.ssl.SSLSocketFactory sslSocketFactory>;

        $r3 = virtualinvoke $r2.<javax.net.ssl.SSLSocketFactory: java.net.Socket createSocket(java.lang.String,int)>(r1, i0);

        $r4 = newarray (java.lang.Object)[2];

        $r4[0] = r1;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r4[1] = $r5;

        $r6 = specialinvoke r0.<org.apache.cxf.transport.https.SSLSocketFactoryWrapper: java.net.Socket enableCipherSuites(java.net.Socket,java.lang.Object[])>($r3, $r4);

        return $r6;
    }

    public java.net.Socket createSocket(java.lang.String, int, java.net.InetAddress, int) throws java.io.IOException, java.net.UnknownHostException
    {
        java.net.Socket $r4, $r7;
        java.lang.Object[] $r5;
        org.apache.cxf.transport.https.SSLSocketFactoryWrapper r0;
        java.lang.Integer $r6;
        javax.net.ssl.SSLSocketFactory $r3;
        java.net.InetAddress r2;
        int i0, i1;
        java.lang.String r1;

        r0 := @this: org.apache.cxf.transport.https.SSLSocketFactoryWrapper;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: java.net.InetAddress;

        i1 := @parameter3: int;

        $r3 = r0.<org.apache.cxf.transport.https.SSLSocketFactoryWrapper: javax.net.ssl.SSLSocketFactory sslSocketFactory>;

        $r4 = virtualinvoke $r3.<javax.net.ssl.SSLSocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int)>(r1, i0, r2, i1);

        $r5 = newarray (java.lang.Object)[2];

        $r5[0] = r1;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r5[1] = $r6;

        $r7 = specialinvoke r0.<org.apache.cxf.transport.https.SSLSocketFactoryWrapper: java.net.Socket enableCipherSuites(java.net.Socket,java.lang.Object[])>($r4, $r5);

        return $r7;
    }

    public java.net.Socket createSocket(java.net.InetAddress, int) throws java.io.IOException
    {
        java.net.Socket $r3, $r6;
        java.lang.Object[] $r4;
        org.apache.cxf.transport.https.SSLSocketFactoryWrapper r0;
        java.lang.Integer $r5;
        javax.net.ssl.SSLSocketFactory $r2;
        java.net.InetAddress r1;
        int i0;

        r0 := @this: org.apache.cxf.transport.https.SSLSocketFactoryWrapper;

        r1 := @parameter0: java.net.InetAddress;

        i0 := @parameter1: int;

        $r2 = r0.<org.apache.cxf.transport.https.SSLSocketFactoryWrapper: javax.net.ssl.SSLSocketFactory sslSocketFactory>;

        $r3 = virtualinvoke $r2.<javax.net.ssl.SSLSocketFactory: java.net.Socket createSocket(java.net.InetAddress,int)>(r1, i0);

        $r4 = newarray (java.lang.Object)[2];

        $r4[0] = r1;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r4[1] = $r5;

        $r6 = specialinvoke r0.<org.apache.cxf.transport.https.SSLSocketFactoryWrapper: java.net.Socket enableCipherSuites(java.net.Socket,java.lang.Object[])>($r3, $r4);

        return $r6;
    }

    public java.net.Socket createSocket(java.net.InetAddress, int, java.net.InetAddress, int) throws java.io.IOException
    {
        java.net.Socket $r4, $r7;
        java.lang.Object[] $r5;
        org.apache.cxf.transport.https.SSLSocketFactoryWrapper r0;
        java.lang.Integer $r6;
        javax.net.ssl.SSLSocketFactory $r3;
        java.net.InetAddress r1, r2;
        int i0, i1;

        r0 := @this: org.apache.cxf.transport.https.SSLSocketFactoryWrapper;

        r1 := @parameter0: java.net.InetAddress;

        i0 := @parameter1: int;

        r2 := @parameter2: java.net.InetAddress;

        i1 := @parameter3: int;

        $r3 = r0.<org.apache.cxf.transport.https.SSLSocketFactoryWrapper: javax.net.ssl.SSLSocketFactory sslSocketFactory>;

        $r4 = virtualinvoke $r3.<javax.net.ssl.SSLSocketFactory: java.net.Socket createSocket(java.net.InetAddress,int,java.net.InetAddress,int)>(r1, i0, r2, i1);

        $r5 = newarray (java.lang.Object)[2];

        $r5[0] = r1;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r5[1] = $r6;

        $r7 = specialinvoke r0.<org.apache.cxf.transport.https.SSLSocketFactoryWrapper: java.net.Socket enableCipherSuites(java.net.Socket,java.lang.Object[])>($r4, $r5);

        return $r7;
    }

    private java.net.Socket enableCipherSuites(java.net.Socket, java.lang.Object[])
    {
        java.net.Socket r0;
        java.lang.Object[] r2;
        javax.net.ssl.SSLSocket r1;
        java.lang.String[] $r8, $r9, $r10, $r11;
        java.util.logging.Logger $r4;
        org.apache.cxf.transport.https.SSLSocketFactoryWrapper r5;
        java.util.logging.Level $r3;
        java.lang.String $r6, $r7;

        r5 := @this: org.apache.cxf.transport.https.SSLSocketFactoryWrapper;

        r0 := @parameter0: java.net.Socket;

        r2 := @parameter1: java.lang.Object[];

        r1 = (javax.net.ssl.SSLSocket) r0;

        if r1 == null goto label1;

        $r10 = r5.<org.apache.cxf.transport.https.SSLSocketFactoryWrapper: java.lang.String[] ciphers>;

        if $r10 == null goto label1;

        $r11 = r5.<org.apache.cxf.transport.https.SSLSocketFactoryWrapper: java.lang.String[] ciphers>;

        virtualinvoke r1.<javax.net.ssl.SSLSocket: void setEnabledCipherSuites(java.lang.String[])>($r11);

     label1:
        if r1 == null goto label2;

        $r6 = r5.<org.apache.cxf.transport.https.SSLSocketFactoryWrapper: java.lang.String protocol>;

        if $r6 == null goto label2;

        $r7 = r5.<org.apache.cxf.transport.https.SSLSocketFactoryWrapper: java.lang.String protocol>;

        $r8 = virtualinvoke r1.<javax.net.ssl.SSLSocket: java.lang.String[] getSupportedProtocols()>();

        $r9 = specialinvoke r5.<org.apache.cxf.transport.https.SSLSocketFactoryWrapper: java.lang.String[] findProtocols(java.lang.String,java.lang.String[])>($r7, $r8);

        if $r9 == null goto label2;

        virtualinvoke r1.<javax.net.ssl.SSLSocket: void setEnabledProtocols(java.lang.String[])>($r9);

     label2:
        if r1 != null goto label3;

        $r4 = <org.apache.cxf.transport.https.SSLSocketFactoryWrapper: java.util.logging.Logger LOG>;

        $r3 = <java.util.logging.Level: java.util.logging.Level SEVERE>;

        staticinvoke <org.apache.cxf.common.logging.LogUtils: void log(java.util.logging.Logger,java.util.logging.Level,java.lang.String,java.lang.Object[])>($r4, $r3, "PROBLEM_CREATING_OUTBOUND_REQUEST_SOCKET", r2);

     label3:
        return r1;
    }

    private java.lang.String[] findProtocols(java.lang.String, java.lang.String[])
    {
        java.lang.Object[] $r3;
        java.lang.String[] r1, $r2, $r4, $r7;
        org.apache.cxf.transport.https.SSLSocketFactoryWrapper r8;
        java.util.ArrayList $r0;
        int i0, $i1, i2;
        java.lang.String r5, r6;
        boolean $z0, $z1, $z2;

        r8 := @this: org.apache.cxf.transport.https.SSLSocketFactoryWrapper;

        r6 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String[];

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        i0 = lengthof r1;

        i2 = 0;

     label1:
        if i2 >= i0 goto label4;

        r5 = r1[i2];

        $z1 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>(r6);

        if $z1 == 0 goto label2;

        $r7 = newarray (java.lang.String)[1];

        $r7[0] = r6;

        return $r7;

     label2:
        $z2 = virtualinvoke r5.<java.lang.String: boolean startsWith(java.lang.String)>(r6);

        if $z2 == 0 goto label3;

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(r5);

     label3:
        i2 = i2 + 1;

        goto label1;

     label4:
        $z0 = interfaceinvoke $r0.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label5;

        return null;

     label5:
        $i1 = interfaceinvoke $r0.<java.util.List: int size()>();

        $r2 = newarray (java.lang.String)[$i1];

        $r3 = interfaceinvoke $r0.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r2);

        $r4 = (java.lang.String[]) $r3;

        return $r4;
    }

    protected void addLogHandler(java.util.logging.Handler)
    {
        java.util.logging.Handler r0;
        java.util.logging.Logger $r1;
        org.apache.cxf.transport.https.SSLSocketFactoryWrapper r2;

        r2 := @this: org.apache.cxf.transport.https.SSLSocketFactoryWrapper;

        r0 := @parameter0: java.util.logging.Handler;

        $r1 = <org.apache.cxf.transport.https.SSLSocketFactoryWrapper: java.util.logging.Logger LOG>;

        virtualinvoke $r1.<java.util.logging.Logger: void addHandler(java.util.logging.Handler)>(r0);

        return;
    }

    static void <clinit>()
    {
        java.util.logging.Logger $r0;

        $r0 = staticinvoke <org.apache.cxf.common.logging.LogUtils: java.util.logging.Logger getL7dLogger(java.lang.Class)>(class "Lorg/apache/cxf/transport/https/SSLSocketFactoryWrapper;");

        <org.apache.cxf.transport.https.SSLSocketFactoryWrapper: java.util.logging.Logger LOG> = $r0;

        return;
    }
}
