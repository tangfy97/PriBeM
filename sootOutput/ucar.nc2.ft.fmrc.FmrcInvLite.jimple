public class ucar.nc2.ft.fmrc.FmrcInvLite extends java.lang.Object implements java.io.Serializable
{
    private static org.slf4j.Logger log;
    private static final java.lang.String BEST;
    public java.lang.String collectionName;
    public java.util.Date base;
    public int nruns;
    public double[] runOffset;
    public double[] forecastOffset;
    public double[] offsets;
    public java.util.List locationList;
    public java.util.Map locationMap;
    public java.util.List gridSets;
    public java.util.List invList;

    public void <init>(ucar.nc2.ft.fmrc.FmrcInv)
    {
        java.lang.Integer $r40;
        java.util.Map $r38;
        ucar.nc2.ft.fmrc.FmrInv r45;
        ucar.nc2.ft.fmrc.FmrcInv$RunSeq r47;
        java.lang.Double $r21, $r25;
        double[] $r9, $r11, $r17, $r19, $r23, $r24, $r30, $r43;
        java.util.TreeSet $r14;
        java.util.ArrayList $r1, $r3, $r4;
        java.lang.String $r6, $r37, $r39;
        java.util.Date $r7, $r31, $r32, $r42, r44;
        ucar.nc2.ft.fmrc.FmrcInv r5;
        ucar.nc2.ft.fmrc.FmrcInvLite$Gridset $r27, r48;
        boolean $z0, $z1, $z2, $z3;
        java.util.List $r8, $r10, $r12, $r15, $r28, $r33, $r36;
        java.util.HashMap $r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i12, i13, i14, i15, i16, i17;
        double $d0, d1, d2, $d3, $d4, $d5;
        java.util.Iterator $r13, $r16, $r18, $r34;
        ucar.nc2.ft.fmrc.FmrcInvLite r0;
        java.lang.Object $r20, $r22, $r26, $r29, $r35, $r41;
        ucar.nc2.ft.fmrc.GridDatasetInv r46;

        r0 := @this: ucar.nc2.ft.fmrc.FmrcInvLite;

        r5 := @parameter0: ucar.nc2.ft.fmrc.FmrcInv;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<ucar.nc2.ft.fmrc.FmrcInvLite: java.util.List locationList> = $r1;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<ucar.nc2.ft.fmrc.FmrcInvLite: java.util.Map locationMap> = $r2;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r0.<ucar.nc2.ft.fmrc.FmrcInvLite: java.util.List gridSets> = $r3;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r0.<ucar.nc2.ft.fmrc.FmrcInvLite: java.util.List invList> = $r4;

        $r6 = virtualinvoke r5.<ucar.nc2.ft.fmrc.FmrcInv: java.lang.String getName()>();

        r0.<ucar.nc2.ft.fmrc.FmrcInvLite: java.lang.String collectionName> = $r6;

        $r7 = virtualinvoke r5.<ucar.nc2.ft.fmrc.FmrcInv: java.util.Date getBaseDate()>();

        r0.<ucar.nc2.ft.fmrc.FmrcInvLite: java.util.Date base> = $r7;

        $r8 = virtualinvoke r5.<ucar.nc2.ft.fmrc.FmrcInv: java.util.List getForecastTimes()>();

        $i0 = interfaceinvoke $r8.<java.util.List: int size()>();

        $r9 = newarray (double)[$i0];

        r0.<ucar.nc2.ft.fmrc.FmrcInvLite: double[] forecastOffset> = $r9;

        i12 = 0;

     label01:
        $i1 = interfaceinvoke $r8.<java.util.List: int size()>();

        if i12 >= $i1 goto label02;

        $r41 = interfaceinvoke $r8.<java.util.List: java.lang.Object get(int)>(i12);

        r44 = (java.util.Date) $r41;

        $r43 = r0.<ucar.nc2.ft.fmrc.FmrcInvLite: double[] forecastOffset>;

        $r42 = r0.<ucar.nc2.ft.fmrc.FmrcInvLite: java.util.Date base>;

        $d5 = staticinvoke <ucar.nc2.ft.fmrc.FmrcInv: double getOffsetInHours(java.util.Date,java.util.Date)>($r42, r44);

        $r43[i12] = $d5;

        i12 = i12 + 1;

        goto label01;

     label02:
        $r10 = virtualinvoke r5.<ucar.nc2.ft.fmrc.FmrcInv: java.util.List getFmrInv()>();

        $i2 = interfaceinvoke $r10.<java.util.List: int size()>();

        r0.<ucar.nc2.ft.fmrc.FmrcInvLite: int nruns> = $i2;

        $i3 = r0.<ucar.nc2.ft.fmrc.FmrcInvLite: int nruns>;

        $r11 = newarray (double)[$i3];

        r0.<ucar.nc2.ft.fmrc.FmrcInvLite: double[] runOffset> = $r11;

        i13 = 0;

        i14 = 0;

     label03:
        $i4 = r0.<ucar.nc2.ft.fmrc.FmrcInvLite: int nruns>;

        if i14 >= $i4 goto label06;

        $r29 = interfaceinvoke $r10.<java.util.List: java.lang.Object get(int)>(i14);

        r45 = (ucar.nc2.ft.fmrc.FmrInv) $r29;

        $r30 = r0.<ucar.nc2.ft.fmrc.FmrcInvLite: double[] runOffset>;

        $r31 = r0.<ucar.nc2.ft.fmrc.FmrcInvLite: java.util.Date base>;

        $r32 = virtualinvoke r45.<ucar.nc2.ft.fmrc.FmrInv: java.util.Date getRunDate()>();

        $d4 = staticinvoke <ucar.nc2.ft.fmrc.FmrcInv: double getOffsetInHours(java.util.Date,java.util.Date)>($r31, $r32);

        $r30[i14] = $d4;

        $r33 = virtualinvoke r45.<ucar.nc2.ft.fmrc.FmrInv: java.util.List getInventoryList()>();

        $r34 = interfaceinvoke $r33.<java.util.List: java.util.Iterator iterator()>();

     label04:
        $z3 = interfaceinvoke $r34.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label05;

        $r35 = interfaceinvoke $r34.<java.util.Iterator: java.lang.Object next()>();

        r46 = (ucar.nc2.ft.fmrc.GridDatasetInv) $r35;

        $r36 = r0.<ucar.nc2.ft.fmrc.FmrcInvLite: java.util.List locationList>;

        $r37 = virtualinvoke r46.<ucar.nc2.ft.fmrc.GridDatasetInv: java.lang.String getLocation()>();

        interfaceinvoke $r36.<java.util.List: boolean add(java.lang.Object)>($r37);

        $r38 = r0.<ucar.nc2.ft.fmrc.FmrcInvLite: java.util.Map locationMap>;

        $r39 = virtualinvoke r46.<ucar.nc2.ft.fmrc.GridDatasetInv: java.lang.String getLocation()>();

        $r40 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i13);

        interfaceinvoke $r38.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r39, $r40);

        i13 = i13 + 1;

        goto label04;

     label05:
        i14 = i14 + 1;

        goto label03;

     label06:
        $r12 = virtualinvoke r5.<ucar.nc2.ft.fmrc.FmrcInv: java.util.List getRunSeqs()>();

        $r13 = interfaceinvoke $r12.<java.util.List: java.util.Iterator iterator()>();

     label07:
        $z0 = interfaceinvoke $r13.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label08;

        $r26 = interfaceinvoke $r13.<java.util.Iterator: java.lang.Object next()>();

        r47 = (ucar.nc2.ft.fmrc.FmrcInv$RunSeq) $r26;

        $r28 = r0.<ucar.nc2.ft.fmrc.FmrcInvLite: java.util.List gridSets>;

        $r27 = new ucar.nc2.ft.fmrc.FmrcInvLite$Gridset;

        specialinvoke $r27.<ucar.nc2.ft.fmrc.FmrcInvLite$Gridset: void <init>(ucar.nc2.ft.fmrc.FmrcInvLite,ucar.nc2.ft.fmrc.FmrcInv$RunSeq)>(r0, r47);

        interfaceinvoke $r28.<java.util.List: boolean add(java.lang.Object)>($r27);

        goto label07;

     label08:
        $r14 = new java.util.TreeSet;

        specialinvoke $r14.<java.util.TreeSet: void <init>()>();

        $r15 = r0.<ucar.nc2.ft.fmrc.FmrcInvLite: java.util.List gridSets>;

        $r16 = interfaceinvoke $r15.<java.util.List: java.util.Iterator iterator()>();

     label09:
        $z1 = interfaceinvoke $r16.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label15;

        $r22 = interfaceinvoke $r16.<java.util.Iterator: java.lang.Object next()>();

        r48 = (ucar.nc2.ft.fmrc.FmrcInvLite$Gridset) $r22;

        i15 = 0;

     label10:
        $i7 = r0.<ucar.nc2.ft.fmrc.FmrcInvLite: int nruns>;

        if i15 >= $i7 goto label14;

        $r23 = r0.<ucar.nc2.ft.fmrc.FmrcInvLite: double[] runOffset>;

        d1 = $r23[i15];

        i16 = 0;

     label11:
        $i8 = r48.<ucar.nc2.ft.fmrc.FmrcInvLite$Gridset: int noffsets>;

        if i16 >= $i8 goto label13;

        $r24 = r48.<ucar.nc2.ft.fmrc.FmrcInvLite$Gridset: double[] timeOffset>;

        $i9 = r48.<ucar.nc2.ft.fmrc.FmrcInvLite$Gridset: int noffsets>;

        $i10 = i15 * $i9;

        $i11 = $i10 + i16;

        d2 = $r24[$i11];

        $z2 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d2);

        if $z2 != 0 goto label12;

        $d3 = d2 - d1;

        $r25 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d3);

        virtualinvoke $r14.<java.util.TreeSet: boolean add(java.lang.Object)>($r25);

     label12:
        i16 = i16 + 1;

        goto label11;

     label13:
        i15 = i15 + 1;

        goto label10;

     label14:
        goto label09;

     label15:
        $i5 = virtualinvoke $r14.<java.util.TreeSet: int size()>();

        $r17 = newarray (double)[$i5];

        r0.<ucar.nc2.ft.fmrc.FmrcInvLite: double[] offsets> = $r17;

        $r18 = virtualinvoke $r14.<java.util.TreeSet: java.util.Iterator iterator()>();

        i17 = 0;

     label16:
        $i6 = virtualinvoke $r14.<java.util.TreeSet: int size()>();

        if i17 >= $i6 goto label17;

        $r19 = r0.<ucar.nc2.ft.fmrc.FmrcInvLite: double[] offsets>;

        $r20 = interfaceinvoke $r18.<java.util.Iterator: java.lang.Object next()>();

        $r21 = (java.lang.Double) $r20;

        $d0 = virtualinvoke $r21.<java.lang.Double: double doubleValue()>();

        $r19[i17] = $d0;

        i17 = i17 + 1;

        goto label16;

     label17:
        return;
    }

    public int findRunIndex(java.util.Date)
    {
        java.util.Date r2, $r4, $r5;
        double[] $r1, $r3;
        ucar.nc2.ft.fmrc.FmrcInvLite r0;
        int $i0, i1, $i3;
        double $d0;
        boolean $z0;

        r0 := @this: ucar.nc2.ft.fmrc.FmrcInvLite;

        r2 := @parameter0: java.util.Date;

        i1 = 0;

     label1:
        $r1 = r0.<ucar.nc2.ft.fmrc.FmrcInvLite: double[] runOffset>;

        $i0 = lengthof $r1;

        if i1 >= $i0 goto label3;

        $r4 = r0.<ucar.nc2.ft.fmrc.FmrcInvLite: java.util.Date base>;

        $r3 = r0.<ucar.nc2.ft.fmrc.FmrcInvLite: double[] runOffset>;

        $d0 = $r3[i1];

        $r5 = staticinvoke <ucar.nc2.ft.fmrc.FmrcInv: java.util.Date makeOffsetDate(java.util.Date,double)>($r4, $d0);

        $z0 = virtualinvoke r2.<java.util.Date: boolean equals(java.lang.Object)>($r5);

        if $z0 == 0 goto label2;

        return i1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        $i3 = (int) -1;

        return $i3;
    }

    public java.util.List getRunDates()
    {
        java.util.Date $r4, $r5;
        double[] $r2, r3;
        java.util.ArrayList $r0;
        ucar.nc2.ft.fmrc.FmrcInvLite r1;
        int $i0, i1, i2;
        double d0;

        r1 := @this: ucar.nc2.ft.fmrc.FmrcInvLite;

        $r0 = new java.util.ArrayList;

        $r2 = r1.<ucar.nc2.ft.fmrc.FmrcInvLite: double[] runOffset>;

        $i0 = lengthof $r2;

        specialinvoke $r0.<java.util.ArrayList: void <init>(int)>($i0);

        r3 = r1.<ucar.nc2.ft.fmrc.FmrcInvLite: double[] runOffset>;

        i1 = lengthof r3;

        i2 = 0;

     label1:
        if i2 >= i1 goto label2;

        d0 = r3[i2];

        $r4 = r1.<ucar.nc2.ft.fmrc.FmrcInvLite: java.util.Date base>;

        $r5 = staticinvoke <ucar.nc2.ft.fmrc.FmrcInv: java.util.Date makeOffsetDate(java.util.Date,double)>($r4, d0);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r5);

        i2 = i2 + 1;

        goto label1;

     label2:
        return $r0;
    }

    public java.util.List getForecastDates()
    {
        java.util.Date $r4, $r5;
        double[] $r2, r3;
        java.util.ArrayList $r0;
        ucar.nc2.ft.fmrc.FmrcInvLite r1;
        int $i0, i1, i2;
        double d0;

        r1 := @this: ucar.nc2.ft.fmrc.FmrcInvLite;

        $r0 = new java.util.ArrayList;

        $r2 = r1.<ucar.nc2.ft.fmrc.FmrcInvLite: double[] forecastOffset>;

        $i0 = lengthof $r2;

        specialinvoke $r0.<java.util.ArrayList: void <init>(int)>($i0);

        r3 = r1.<ucar.nc2.ft.fmrc.FmrcInvLite: double[] forecastOffset>;

        i1 = lengthof r3;

        i2 = 0;

     label1:
        if i2 >= i1 goto label2;

        d0 = r3[i2];

        $r4 = r1.<ucar.nc2.ft.fmrc.FmrcInvLite: java.util.Date base>;

        $r5 = staticinvoke <ucar.nc2.ft.fmrc.FmrcInv: java.util.Date makeOffsetDate(java.util.Date,double)>($r4, d0);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r5);

        i2 = i2 + 1;

        goto label1;

     label2:
        return $r0;
    }

    public double[] getForecastOffsets()
    {
        double[] $r1;
        ucar.nc2.ft.fmrc.FmrcInvLite r0;

        r0 := @this: ucar.nc2.ft.fmrc.FmrcInvLite;

        $r1 = r0.<ucar.nc2.ft.fmrc.FmrcInvLite: double[] offsets>;

        return $r1;
    }

    public ucar.nc2.ft.fmrc.FmrcInvLite$Gridset$Grid findGrid(java.lang.String)
    {
        java.util.Iterator $r2, $r6;
        ucar.nc2.ft.fmrc.FmrcInvLite$Gridset$Grid r8;
        ucar.nc2.ft.fmrc.FmrcInvLite$Gridset r4;
        ucar.nc2.ft.fmrc.FmrcInvLite r0;
        java.util.List $r1, $r5;
        java.lang.Object $r3, $r7;
        java.lang.String r9, $r10;
        boolean $z0, $z1, $z2;

        r0 := @this: ucar.nc2.ft.fmrc.FmrcInvLite;

        r9 := @parameter0: java.lang.String;

        $r1 = r0.<ucar.nc2.ft.fmrc.FmrcInvLite: java.util.List gridSets>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (ucar.nc2.ft.fmrc.FmrcInvLite$Gridset) $r3;

        $r5 = r4.<ucar.nc2.ft.fmrc.FmrcInvLite$Gridset: java.util.List grids>;

        $r6 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r8 = (ucar.nc2.ft.fmrc.FmrcInvLite$Gridset$Grid) $r7;

        $r10 = r8.<ucar.nc2.ft.fmrc.FmrcInvLite$Gridset$Grid: java.lang.String name>;

        $z2 = virtualinvoke r9.<java.lang.String: boolean equals(java.lang.Object)>($r10);

        if $z2 == 0 goto label3;

        return r8;

     label3:
        goto label2;

     label4:
        goto label1;

     label5:
        return null;
    }

    public ucar.nc2.ft.fmrc.FmrcInvLite$Gridset findGridset(java.lang.String)
    {
        java.util.Iterator $r2, $r6;
        ucar.nc2.ft.fmrc.FmrcInvLite$Gridset$Grid r8;
        ucar.nc2.ft.fmrc.FmrcInvLite$Gridset r4;
        ucar.nc2.ft.fmrc.FmrcInvLite r0;
        java.util.List $r1, $r5;
        java.lang.Object $r3, $r7;
        java.lang.String r9, $r10;
        boolean $z0, $z1, $z2;

        r0 := @this: ucar.nc2.ft.fmrc.FmrcInvLite;

        r9 := @parameter0: java.lang.String;

        $r1 = r0.<ucar.nc2.ft.fmrc.FmrcInvLite: java.util.List gridSets>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (ucar.nc2.ft.fmrc.FmrcInvLite$Gridset) $r3;

        $r5 = r4.<ucar.nc2.ft.fmrc.FmrcInvLite$Gridset: java.util.List grids>;

        $r6 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r8 = (ucar.nc2.ft.fmrc.FmrcInvLite$Gridset$Grid) $r7;

        $r10 = r8.<ucar.nc2.ft.fmrc.FmrcInvLite$Gridset$Grid: java.lang.String name>;

        $z2 = virtualinvoke r9.<java.lang.String: boolean equals(java.lang.Object)>($r10);

        if $z2 == 0 goto label3;

        return r4;

     label3:
        goto label2;

     label4:
        goto label1;

     label5:
        return null;
    }

    public void showGridInfo(java.lang.String, java.util.Formatter)
    {
        java.lang.Integer $r28, $r31, $r36, $r38, $r41, $r43, $r48;
        java.util.Map $r13;
        java.lang.Object[] $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r15, $r16, $r17, $r19, $r20, $r22, $r23, $r25, $r27, $r30, $r33, $r35, $r37, $r39, $r40, $r42, $r44, $r45, $r47, $r49;
        java.lang.Double $r34, $r46;
        java.lang.String r1;
        ucar.nc2.ft.fmrc.FmrcInvLite$Gridset$GridInventory r50;
        ucar.nc2.ft.fmrc.FmrcInvLite$TimeInv r52, r53, r54;
        ucar.nc2.ft.fmrc.FmrcInvLite$Gridset$Grid $r2;
        ucar.nc2.ft.fmrc.FmrcInvLite$Gridset $r3;
        java.util.Formatter r4;
        ucar.nc2.ft.fmrc.FmrcInvLite$BestDatasetInventory $r12;
        boolean $z0, $z1, $z2, z3;
        java.util.List r51;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10, i11, i12, i13, i14, i15, i16, $i17;
        double $d0, $d1;
        java.util.Iterator $r18, $r21, $r24;
        ucar.nc2.ft.fmrc.FmrcInvLite r0;
        java.lang.Object $r14, $r26, $r29, $r32;

        r0 := @this: ucar.nc2.ft.fmrc.FmrcInvLite;

        r1 := @parameter0: java.lang.String;

        r4 := @parameter1: java.util.Formatter;

        $r2 = virtualinvoke r0.<ucar.nc2.ft.fmrc.FmrcInvLite: ucar.nc2.ft.fmrc.FmrcInvLite$Gridset$Grid findGrid(java.lang.String)>(r1);

        if $r2 != null goto label01;

        $r49 = newarray (java.lang.Object)[1];

        $r49[0] = r1;

        virtualinvoke r4.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("Cant find grid = %s%n", $r49);

        return;

     label01:
        $r3 = virtualinvoke $r2.<ucar.nc2.ft.fmrc.FmrcInvLite$Gridset$Grid: ucar.nc2.ft.fmrc.FmrcInvLite$Gridset getGridset()>();

        $r5 = newarray (java.lang.Object)[0];

        virtualinvoke r4.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("%n=======================================%nFmrcLite.Grid%n", $r5);

        $r6 = newarray (java.lang.Object)[0];

        virtualinvoke r4.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("2D%n   run%n time  ", $r6);

        i10 = 0;

     label02:
        $i0 = $r3.<ucar.nc2.ft.fmrc.FmrcInvLite$Gridset: int noffsets>;

        if i10 >= $i0 goto label03;

        $r47 = newarray (java.lang.Object)[1];

        $r48 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i10);

        $r47[0] = $r48;

        virtualinvoke r4.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("%6d ", $r47);

        i10 = i10 + 1;

        goto label02;

     label03:
        $r7 = newarray (java.lang.Object)[0];

        virtualinvoke r4.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("%n", $r7);

        i11 = 0;

     label04:
        $i1 = r0.<ucar.nc2.ft.fmrc.FmrcInvLite: int nruns>;

        if i11 >= $i1 goto label07;

        $r42 = newarray (java.lang.Object)[1];

        $r43 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i11);

        $r42[0] = $r43;

        virtualinvoke r4.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("%6d", $r42);

        i12 = 0;

     label05:
        $i9 = $r3.<ucar.nc2.ft.fmrc.FmrcInvLite$Gridset: int noffsets>;

        if i12 >= $i9 goto label06;

        $r45 = newarray (java.lang.Object)[1];

        $d1 = virtualinvoke $r3.<ucar.nc2.ft.fmrc.FmrcInvLite$Gridset: double getTimeCoord(int,int)>(i11, i12);

        $r46 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d1);

        $r45[0] = $r46;

        virtualinvoke r4.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>(" %6.0f", $r45);

        i12 = i12 + 1;

        goto label05;

     label06:
        $r44 = newarray (java.lang.Object)[0];

        virtualinvoke r4.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("%n", $r44);

        i11 = i11 + 1;

        goto label04;

     label07:
        $r8 = newarray (java.lang.Object)[0];

        virtualinvoke r4.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("%n", $r8);

        r50 = $r2.<ucar.nc2.ft.fmrc.FmrcInvLite$Gridset$Grid: ucar.nc2.ft.fmrc.FmrcInvLite$Gridset$GridInventory inv>;

        $r9 = newarray (java.lang.Object)[0];

        virtualinvoke r4.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("%n=======================================%nFmrcLite.GridInventory Missing Data%n", $r9);

        i13 = 0;

     label08:
        $i2 = r0.<ucar.nc2.ft.fmrc.FmrcInvLite: int nruns>;

        if i13 >= $i2 goto label16;

        z3 = 0;

        i14 = 0;

     label09:
        $i5 = $r3.<ucar.nc2.ft.fmrc.FmrcInvLite$Gridset: int noffsets>;

        if i14 >= $i5 goto label11;

        $i8 = virtualinvoke r50.<ucar.nc2.ft.fmrc.FmrcInvLite$Gridset$GridInventory: int getLocation(int,int)>(i13, i14);

        if $i8 != 0 goto label10;

        z3 = 1;

     label10:
        i14 = i14 + 1;

        goto label09;

     label11:
        if z3 == 0 goto label15;

        $r37 = newarray (java.lang.Object)[1];

        $r38 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i13);

        $r37[0] = $r38;

        virtualinvoke r4.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("run %6d timeIdx=", $r37);

        i15 = 0;

     label12:
        $i6 = $r3.<ucar.nc2.ft.fmrc.FmrcInvLite$Gridset: int noffsets>;

        if i15 >= $i6 goto label14;

        $i7 = virtualinvoke r50.<ucar.nc2.ft.fmrc.FmrcInvLite$Gridset$GridInventory: int getLocation(int,int)>(i13, i15);

        if $i7 != 0 goto label13;

        $r40 = newarray (java.lang.Object)[1];

        $r41 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i15);

        $r40[0] = $r41;

        virtualinvoke r4.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>(" %6d", $r40);

     label13:
        i15 = i15 + 1;

        goto label12;

     label14:
        $r39 = newarray (java.lang.Object)[0];

        virtualinvoke r4.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("%n", $r39);

     label15:
        i13 = i13 + 1;

        goto label08;

     label16:
        $r10 = newarray (java.lang.Object)[0];

        virtualinvoke r4.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("%n", $r10);

        $r11 = newarray (java.lang.Object)[0];

        virtualinvoke r4.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("%n=======================================%nFmrcLite.TimeInv Best%n", $r11);

        $r12 = new ucar.nc2.ft.fmrc.FmrcInvLite$BestDatasetInventory;

        specialinvoke $r12.<ucar.nc2.ft.fmrc.FmrcInvLite$BestDatasetInventory: void <init>(ucar.nc2.ft.fmrc.FmrcInvLite,thredds.inventory.FeatureCollectionConfig$BestDataset)>(r0, null);

        $r13 = $r3.<ucar.nc2.ft.fmrc.FmrcInvLite$Gridset: java.util.Map timeCoordMap>;

        $r14 = interfaceinvoke $r13.<java.util.Map: java.lang.Object get(java.lang.Object)>("Best");

        r51 = (java.util.List) $r14;

        if r51 != null goto label17;

        r51 = staticinvoke <ucar.nc2.ft.fmrc.FmrcInvLite$Gridset: java.util.List access$000(ucar.nc2.ft.fmrc.FmrcInvLite$Gridset,thredds.inventory.FeatureCollectionConfig$BestDataset)>($r3, null);

     label17:
        virtualinvoke $r12.<ucar.nc2.ft.fmrc.FmrcInvLite$BestDatasetInventory: ucar.nc2.ft.fmrc.FmrcInvLite$ValueB getTimeCoords(ucar.nc2.ft.fmrc.FmrcInvLite$Gridset)>($r3);

        $r15 = newarray (java.lang.Object)[0];

        virtualinvoke r4.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("        ", $r15);

        i16 = 0;

     label18:
        $i17 = interfaceinvoke r51.<java.util.List: int size()>();

        if i16 >= $i17 goto label19;

        $r35 = newarray (java.lang.Object)[1];

        $r36 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i16);

        $r35[0] = $r36;

        virtualinvoke r4.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>(" %6d", $r35);

        i16 = i16 + 1;

        goto label18;

     label19:
        $r16 = newarray (java.lang.Object)[0];

        virtualinvoke r4.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("%n", $r16);

        $r17 = newarray (java.lang.Object)[0];

        virtualinvoke r4.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>(" coord =", $r17);

        $r18 = interfaceinvoke r51.<java.util.List: java.util.Iterator iterator()>();

     label20:
        $z0 = interfaceinvoke $r18.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label21;

        $r32 = interfaceinvoke $r18.<java.util.Iterator: java.lang.Object next()>();

        r52 = (ucar.nc2.ft.fmrc.FmrcInvLite$TimeInv) $r32;

        $r33 = newarray (java.lang.Object)[1];

        $d0 = r52.<ucar.nc2.ft.fmrc.FmrcInvLite$TimeInv: double offset>;

        $r34 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $r33[0] = $r34;

        virtualinvoke r4.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>(" %6.0f", $r33);

        goto label20;

     label21:
        $r19 = newarray (java.lang.Object)[0];

        virtualinvoke r4.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("%n", $r19);

        $r20 = newarray (java.lang.Object)[0];

        virtualinvoke r4.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>(" run   =", $r20);

        $r21 = interfaceinvoke r51.<java.util.List: java.util.Iterator iterator()>();

     label22:
        $z1 = interfaceinvoke $r21.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label23;

        $r29 = interfaceinvoke $r21.<java.util.Iterator: java.lang.Object next()>();

        r53 = (ucar.nc2.ft.fmrc.FmrcInvLite$TimeInv) $r29;

        $r30 = newarray (java.lang.Object)[1];

        $i4 = r53.<ucar.nc2.ft.fmrc.FmrcInvLite$TimeInv: int runIdx>;

        $r31 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);

        $r30[0] = $r31;

        virtualinvoke r4.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>(" %6d", $r30);

        goto label22;

     label23:
        $r22 = newarray (java.lang.Object)[0];

        virtualinvoke r4.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("%n", $r22);

        $r23 = newarray (java.lang.Object)[0];

        virtualinvoke r4.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>(" idx   =", $r23);

        $r24 = interfaceinvoke r51.<java.util.List: java.util.Iterator iterator()>();

     label24:
        $z2 = interfaceinvoke $r24.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label25;

        $r26 = interfaceinvoke $r24.<java.util.Iterator: java.lang.Object next()>();

        r54 = (ucar.nc2.ft.fmrc.FmrcInvLite$TimeInv) $r26;

        $r27 = newarray (java.lang.Object)[1];

        $i3 = r54.<ucar.nc2.ft.fmrc.FmrcInvLite$TimeInv: int timeIdx>;

        $r28 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r27[0] = $r28;

        virtualinvoke r4.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>(" %6d", $r27);

        goto label24;

     label25:
        $r25 = newarray (java.lang.Object)[0];

        virtualinvoke r4.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("%n", $r25);

        return;
    }

    public ucar.nc2.ft.fmrc.TimeInventory makeBestDatasetInventory()
    {
        ucar.nc2.ft.fmrc.FmrcInvLite$BestDatasetInventory $r0;
        ucar.nc2.ft.fmrc.FmrcInvLite r1;

        r1 := @this: ucar.nc2.ft.fmrc.FmrcInvLite;

        $r0 = new ucar.nc2.ft.fmrc.FmrcInvLite$BestDatasetInventory;

        specialinvoke $r0.<ucar.nc2.ft.fmrc.FmrcInvLite$BestDatasetInventory: void <init>(ucar.nc2.ft.fmrc.FmrcInvLite,thredds.inventory.FeatureCollectionConfig$BestDataset)>(r1, null);

        return $r0;
    }

    ucar.nc2.ft.fmrc.TimeInventory makeBestDatasetInventory(thredds.inventory.FeatureCollectionConfig$BestDataset)
    {
        ucar.nc2.ft.fmrc.FmrcInvLite$BestDatasetInventory $r0;
        ucar.nc2.ft.fmrc.FmrcInvLite r1;
        thredds.inventory.FeatureCollectionConfig$BestDataset r2;

        r1 := @this: ucar.nc2.ft.fmrc.FmrcInvLite;

        r2 := @parameter0: thredds.inventory.FeatureCollectionConfig$BestDataset;

        $r0 = new ucar.nc2.ft.fmrc.FmrcInvLite$BestDatasetInventory;

        specialinvoke $r0.<ucar.nc2.ft.fmrc.FmrcInvLite$BestDatasetInventory: void <init>(ucar.nc2.ft.fmrc.FmrcInvLite,thredds.inventory.FeatureCollectionConfig$BestDataset)>(r1, r2);

        return $r0;
    }

    public ucar.nc2.ft.fmrc.TimeInventory makeRunTimeDatasetInventory(java.util.Date) throws java.io.FileNotFoundException
    {
        ucar.nc2.ft.fmrc.FmrcInvLite$RunTimeDatasetInventory $r0;
        ucar.nc2.ft.fmrc.FmrcInvLite r1;
        java.util.Date r2;

        r1 := @this: ucar.nc2.ft.fmrc.FmrcInvLite;

        r2 := @parameter0: java.util.Date;

        $r0 = new ucar.nc2.ft.fmrc.FmrcInvLite$RunTimeDatasetInventory;

        specialinvoke $r0.<ucar.nc2.ft.fmrc.FmrcInvLite$RunTimeDatasetInventory: void <init>(ucar.nc2.ft.fmrc.FmrcInvLite,java.util.Date)>(r1, r2);

        return $r0;
    }

    public ucar.nc2.ft.fmrc.TimeInventory getConstantForecastDataset(java.util.Date) throws java.io.FileNotFoundException
    {
        ucar.nc2.ft.fmrc.FmrcInvLite$ConstantForecastDataset $r0;
        ucar.nc2.ft.fmrc.FmrcInvLite r1;
        java.util.Date r2;

        r1 := @this: ucar.nc2.ft.fmrc.FmrcInvLite;

        r2 := @parameter0: java.util.Date;

        $r0 = new ucar.nc2.ft.fmrc.FmrcInvLite$ConstantForecastDataset;

        specialinvoke $r0.<ucar.nc2.ft.fmrc.FmrcInvLite$ConstantForecastDataset: void <init>(ucar.nc2.ft.fmrc.FmrcInvLite,java.util.Date)>(r1, r2);

        return $r0;
    }

    public ucar.nc2.ft.fmrc.TimeInventory getConstantOffsetDataset(double) throws java.io.FileNotFoundException
    {
        ucar.nc2.ft.fmrc.FmrcInvLite r1;
        ucar.nc2.ft.fmrc.FmrcInvLite$ConstantOffsetDataset $r0;
        double d0;

        r1 := @this: ucar.nc2.ft.fmrc.FmrcInvLite;

        d0 := @parameter0: double;

        $r0 = new ucar.nc2.ft.fmrc.FmrcInvLite$ConstantOffsetDataset;

        specialinvoke $r0.<ucar.nc2.ft.fmrc.FmrcInvLite$ConstantOffsetDataset: void <init>(ucar.nc2.ft.fmrc.FmrcInvLite,double)>(r1, d0);

        return $r0;
    }

    static org.slf4j.Logger access$100()
    {
        org.slf4j.Logger $r0;

        $r0 = <ucar.nc2.ft.fmrc.FmrcInvLite: org.slf4j.Logger log>;

        return $r0;
    }

    static void <clinit>()
    {
        org.slf4j.Logger $r0;

        <ucar.nc2.ft.fmrc.FmrcInvLite: java.lang.String BEST> = "Best";

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lucar/nc2/ft/fmrc/FmrcInvLite;");

        <ucar.nc2.ft.fmrc.FmrcInvLite: org.slf4j.Logger log> = $r0;

        return;
    }
}
