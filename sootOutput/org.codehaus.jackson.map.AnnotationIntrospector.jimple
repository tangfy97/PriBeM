public abstract class org.codehaus.jackson.map.AnnotationIntrospector extends java.lang.Object
{

    public void <init>()
    {
        org.codehaus.jackson.map.AnnotationIntrospector r0;

        r0 := @this: org.codehaus.jackson.map.AnnotationIntrospector;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static org.codehaus.jackson.map.AnnotationIntrospector nopInstance()
    {
        org.codehaus.jackson.map.introspect.NopAnnotationIntrospector $r0;

        $r0 = <org.codehaus.jackson.map.introspect.NopAnnotationIntrospector: org.codehaus.jackson.map.introspect.NopAnnotationIntrospector instance>;

        return $r0;
    }

    public static org.codehaus.jackson.map.AnnotationIntrospector pair(org.codehaus.jackson.map.AnnotationIntrospector, org.codehaus.jackson.map.AnnotationIntrospector)
    {
        org.codehaus.jackson.map.AnnotationIntrospector$Pair $r0;
        org.codehaus.jackson.map.AnnotationIntrospector r1, r2;

        r1 := @parameter0: org.codehaus.jackson.map.AnnotationIntrospector;

        r2 := @parameter1: org.codehaus.jackson.map.AnnotationIntrospector;

        $r0 = new org.codehaus.jackson.map.AnnotationIntrospector$Pair;

        specialinvoke $r0.<org.codehaus.jackson.map.AnnotationIntrospector$Pair: void <init>(org.codehaus.jackson.map.AnnotationIntrospector,org.codehaus.jackson.map.AnnotationIntrospector)>(r1, r2);

        return $r0;
    }

    public java.util.Collection allIntrospectors()
    {
        java.util.List $r1;
        org.codehaus.jackson.map.AnnotationIntrospector r0;

        r0 := @this: org.codehaus.jackson.map.AnnotationIntrospector;

        $r1 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>(r0);

        return $r1;
    }

    public java.util.Collection allIntrospectors(java.util.Collection)
    {
        org.codehaus.jackson.map.AnnotationIntrospector r1;
        java.util.Collection r0;

        r1 := @this: org.codehaus.jackson.map.AnnotationIntrospector;

        r0 := @parameter0: java.util.Collection;

        interfaceinvoke r0.<java.util.Collection: boolean add(java.lang.Object)>(r1);

        return r0;
    }

    public abstract boolean isHandled(java.lang.'annotation'.Annotation);

    public java.lang.Boolean findCachability(org.codehaus.jackson.map.introspect.AnnotatedClass)
    {
        org.codehaus.jackson.map.AnnotationIntrospector r0;
        org.codehaus.jackson.map.introspect.AnnotatedClass r1;

        r0 := @this: org.codehaus.jackson.map.AnnotationIntrospector;

        r1 := @parameter0: org.codehaus.jackson.map.introspect.AnnotatedClass;

        return null;
    }

    public abstract java.lang.String findRootName(org.codehaus.jackson.map.introspect.AnnotatedClass);

    public abstract java.lang.String[] findPropertiesToIgnore(org.codehaus.jackson.map.introspect.AnnotatedClass);

    public abstract java.lang.Boolean findIgnoreUnknownProperties(org.codehaus.jackson.map.introspect.AnnotatedClass);

    public java.lang.Boolean isIgnorableType(org.codehaus.jackson.map.introspect.AnnotatedClass)
    {
        org.codehaus.jackson.map.AnnotationIntrospector r0;
        org.codehaus.jackson.map.introspect.AnnotatedClass r1;

        r0 := @this: org.codehaus.jackson.map.AnnotationIntrospector;

        r1 := @parameter0: org.codehaus.jackson.map.introspect.AnnotatedClass;

        return null;
    }

    public java.lang.Object findFilterId(org.codehaus.jackson.map.introspect.AnnotatedClass)
    {
        org.codehaus.jackson.map.AnnotationIntrospector r0;
        org.codehaus.jackson.map.introspect.AnnotatedClass r1;

        r0 := @this: org.codehaus.jackson.map.AnnotationIntrospector;

        r1 := @parameter0: org.codehaus.jackson.map.introspect.AnnotatedClass;

        return null;
    }

    public org.codehaus.jackson.map.introspect.VisibilityChecker findAutoDetectVisibility(org.codehaus.jackson.map.introspect.AnnotatedClass, org.codehaus.jackson.map.introspect.VisibilityChecker)
    {
        org.codehaus.jackson.map.AnnotationIntrospector r1;
        org.codehaus.jackson.map.introspect.VisibilityChecker r0;
        org.codehaus.jackson.map.introspect.AnnotatedClass r2;

        r1 := @this: org.codehaus.jackson.map.AnnotationIntrospector;

        r2 := @parameter0: org.codehaus.jackson.map.introspect.AnnotatedClass;

        r0 := @parameter1: org.codehaus.jackson.map.introspect.VisibilityChecker;

        return r0;
    }

    public org.codehaus.jackson.map.jsontype.TypeResolverBuilder findTypeResolver(org.codehaus.jackson.map.MapperConfig, org.codehaus.jackson.map.introspect.AnnotatedClass, org.codehaus.jackson.type.JavaType)
    {
        org.codehaus.jackson.map.introspect.AnnotatedClass r2;
        org.codehaus.jackson.type.JavaType r3;
        org.codehaus.jackson.map.MapperConfig r1;
        org.codehaus.jackson.map.AnnotationIntrospector r0;

        r0 := @this: org.codehaus.jackson.map.AnnotationIntrospector;

        r1 := @parameter0: org.codehaus.jackson.map.MapperConfig;

        r2 := @parameter1: org.codehaus.jackson.map.introspect.AnnotatedClass;

        r3 := @parameter2: org.codehaus.jackson.type.JavaType;

        return null;
    }

    public org.codehaus.jackson.map.jsontype.TypeResolverBuilder findPropertyTypeResolver(org.codehaus.jackson.map.MapperConfig, org.codehaus.jackson.map.introspect.AnnotatedMember, org.codehaus.jackson.type.JavaType)
    {
        org.codehaus.jackson.map.introspect.AnnotatedMember r2;
        org.codehaus.jackson.type.JavaType r3;
        org.codehaus.jackson.map.MapperConfig r1;
        org.codehaus.jackson.map.AnnotationIntrospector r0;

        r0 := @this: org.codehaus.jackson.map.AnnotationIntrospector;

        r1 := @parameter0: org.codehaus.jackson.map.MapperConfig;

        r2 := @parameter1: org.codehaus.jackson.map.introspect.AnnotatedMember;

        r3 := @parameter2: org.codehaus.jackson.type.JavaType;

        return null;
    }

    public org.codehaus.jackson.map.jsontype.TypeResolverBuilder findPropertyContentTypeResolver(org.codehaus.jackson.map.MapperConfig, org.codehaus.jackson.map.introspect.AnnotatedMember, org.codehaus.jackson.type.JavaType)
    {
        org.codehaus.jackson.map.introspect.AnnotatedMember r2;
        org.codehaus.jackson.type.JavaType r3;
        org.codehaus.jackson.map.MapperConfig r1;
        org.codehaus.jackson.map.AnnotationIntrospector r0;

        r0 := @this: org.codehaus.jackson.map.AnnotationIntrospector;

        r1 := @parameter0: org.codehaus.jackson.map.MapperConfig;

        r2 := @parameter1: org.codehaus.jackson.map.introspect.AnnotatedMember;

        r3 := @parameter2: org.codehaus.jackson.type.JavaType;

        return null;
    }

    public java.util.List findSubtypes(org.codehaus.jackson.map.introspect.Annotated)
    {
        org.codehaus.jackson.map.introspect.Annotated r1;
        org.codehaus.jackson.map.AnnotationIntrospector r0;

        r0 := @this: org.codehaus.jackson.map.AnnotationIntrospector;

        r1 := @parameter0: org.codehaus.jackson.map.introspect.Annotated;

        return null;
    }

    public java.lang.String findTypeName(org.codehaus.jackson.map.introspect.AnnotatedClass)
    {
        org.codehaus.jackson.map.AnnotationIntrospector r0;
        org.codehaus.jackson.map.introspect.AnnotatedClass r1;

        r0 := @this: org.codehaus.jackson.map.AnnotationIntrospector;

        r1 := @parameter0: org.codehaus.jackson.map.introspect.AnnotatedClass;

        return null;
    }

    public org.codehaus.jackson.map.AnnotationIntrospector$ReferenceProperty findReferenceType(org.codehaus.jackson.map.introspect.AnnotatedMember)
    {
        org.codehaus.jackson.map.introspect.AnnotatedMember r1;
        org.codehaus.jackson.map.AnnotationIntrospector r0;

        r0 := @this: org.codehaus.jackson.map.AnnotationIntrospector;

        r1 := @parameter0: org.codehaus.jackson.map.introspect.AnnotatedMember;

        return null;
    }

    public java.lang.Boolean shouldUnwrapProperty(org.codehaus.jackson.map.introspect.AnnotatedMember)
    {
        org.codehaus.jackson.map.introspect.AnnotatedMember r1;
        org.codehaus.jackson.map.AnnotationIntrospector r0;

        r0 := @this: org.codehaus.jackson.map.AnnotationIntrospector;

        r1 := @parameter0: org.codehaus.jackson.map.introspect.AnnotatedMember;

        return null;
    }

    public boolean hasIgnoreMarker(org.codehaus.jackson.map.introspect.AnnotatedMember)
    {
        org.codehaus.jackson.map.introspect.AnnotatedMethod $r4;
        org.codehaus.jackson.map.introspect.AnnotatedConstructor $r2;
        org.codehaus.jackson.map.AnnotationIntrospector r1;
        org.codehaus.jackson.map.introspect.AnnotatedMember r0;
        org.codehaus.jackson.map.introspect.AnnotatedField $r3;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;

        r1 := @this: org.codehaus.jackson.map.AnnotationIntrospector;

        r0 := @parameter0: org.codehaus.jackson.map.introspect.AnnotatedMember;

        $z0 = r0 instanceof org.codehaus.jackson.map.introspect.AnnotatedMethod;

        if $z0 == 0 goto label1;

        $r4 = (org.codehaus.jackson.map.introspect.AnnotatedMethod) r0;

        $z5 = virtualinvoke r1.<org.codehaus.jackson.map.AnnotationIntrospector: boolean isIgnorableMethod(org.codehaus.jackson.map.introspect.AnnotatedMethod)>($r4);

        return $z5;

     label1:
        $z1 = r0 instanceof org.codehaus.jackson.map.introspect.AnnotatedField;

        if $z1 == 0 goto label2;

        $r3 = (org.codehaus.jackson.map.introspect.AnnotatedField) r0;

        $z4 = virtualinvoke r1.<org.codehaus.jackson.map.AnnotationIntrospector: boolean isIgnorableField(org.codehaus.jackson.map.introspect.AnnotatedField)>($r3);

        return $z4;

     label2:
        $z2 = r0 instanceof org.codehaus.jackson.map.introspect.AnnotatedConstructor;

        if $z2 == 0 goto label3;

        $r2 = (org.codehaus.jackson.map.introspect.AnnotatedConstructor) r0;

        $z3 = virtualinvoke r1.<org.codehaus.jackson.map.AnnotationIntrospector: boolean isIgnorableConstructor(org.codehaus.jackson.map.introspect.AnnotatedConstructor)>($r2);

        return $z3;

     label3:
        return 0;
    }

    public java.lang.Object findInjectableValueId(org.codehaus.jackson.map.introspect.AnnotatedMember)
    {
        org.codehaus.jackson.map.introspect.AnnotatedMember r1;
        org.codehaus.jackson.map.AnnotationIntrospector r0;

        r0 := @this: org.codehaus.jackson.map.AnnotationIntrospector;

        r1 := @parameter0: org.codehaus.jackson.map.introspect.AnnotatedMember;

        return null;
    }

    public abstract boolean isIgnorableMethod(org.codehaus.jackson.map.introspect.AnnotatedMethod);

    public abstract boolean isIgnorableConstructor(org.codehaus.jackson.map.introspect.AnnotatedConstructor);

    public abstract boolean isIgnorableField(org.codehaus.jackson.map.introspect.AnnotatedField);

    public abstract java.lang.Object findSerializer(org.codehaus.jackson.map.introspect.Annotated);

    public java.lang.Class findKeySerializer(org.codehaus.jackson.map.introspect.Annotated)
    {
        org.codehaus.jackson.map.introspect.Annotated r1;
        org.codehaus.jackson.map.AnnotationIntrospector r0;

        r0 := @this: org.codehaus.jackson.map.AnnotationIntrospector;

        r1 := @parameter0: org.codehaus.jackson.map.introspect.Annotated;

        return null;
    }

    public java.lang.Class findContentSerializer(org.codehaus.jackson.map.introspect.Annotated)
    {
        org.codehaus.jackson.map.introspect.Annotated r1;
        org.codehaus.jackson.map.AnnotationIntrospector r0;

        r0 := @this: org.codehaus.jackson.map.AnnotationIntrospector;

        r1 := @parameter0: org.codehaus.jackson.map.introspect.Annotated;

        return null;
    }

    public org.codehaus.jackson.map.annotate.JsonSerialize$Inclusion findSerializationInclusion(org.codehaus.jackson.map.introspect.Annotated, org.codehaus.jackson.map.annotate.JsonSerialize$Inclusion)
    {
        org.codehaus.jackson.map.introspect.Annotated r2;
        org.codehaus.jackson.map.annotate.JsonSerialize$Inclusion r0;
        org.codehaus.jackson.map.AnnotationIntrospector r1;

        r1 := @this: org.codehaus.jackson.map.AnnotationIntrospector;

        r2 := @parameter0: org.codehaus.jackson.map.introspect.Annotated;

        r0 := @parameter1: org.codehaus.jackson.map.annotate.JsonSerialize$Inclusion;

        return r0;
    }

    public abstract java.lang.Class findSerializationType(org.codehaus.jackson.map.introspect.Annotated);

    public java.lang.Class findSerializationKeyType(org.codehaus.jackson.map.introspect.Annotated, org.codehaus.jackson.type.JavaType)
    {
        org.codehaus.jackson.map.introspect.Annotated r1;
        org.codehaus.jackson.type.JavaType r2;
        org.codehaus.jackson.map.AnnotationIntrospector r0;

        r0 := @this: org.codehaus.jackson.map.AnnotationIntrospector;

        r1 := @parameter0: org.codehaus.jackson.map.introspect.Annotated;

        r2 := @parameter1: org.codehaus.jackson.type.JavaType;

        return null;
    }

    public java.lang.Class findSerializationContentType(org.codehaus.jackson.map.introspect.Annotated, org.codehaus.jackson.type.JavaType)
    {
        org.codehaus.jackson.map.introspect.Annotated r1;
        org.codehaus.jackson.type.JavaType r2;
        org.codehaus.jackson.map.AnnotationIntrospector r0;

        r0 := @this: org.codehaus.jackson.map.AnnotationIntrospector;

        r1 := @parameter0: org.codehaus.jackson.map.introspect.Annotated;

        r2 := @parameter1: org.codehaus.jackson.type.JavaType;

        return null;
    }

    public abstract org.codehaus.jackson.map.annotate.JsonSerialize$Typing findSerializationTyping(org.codehaus.jackson.map.introspect.Annotated);

    public abstract java.lang.Class[] findSerializationViews(org.codehaus.jackson.map.introspect.Annotated);

    public abstract java.lang.String[] findSerializationPropertyOrder(org.codehaus.jackson.map.introspect.AnnotatedClass);

    public abstract java.lang.Boolean findSerializationSortAlphabetically(org.codehaus.jackson.map.introspect.AnnotatedClass);

    public abstract java.lang.String findGettablePropertyName(org.codehaus.jackson.map.introspect.AnnotatedMethod);

    public abstract boolean hasAsValueAnnotation(org.codehaus.jackson.map.introspect.AnnotatedMethod);

    public java.lang.String findEnumValue(java.lang.Enum)
    {
        java.lang.String $r1;
        java.lang.Enum r0;
        org.codehaus.jackson.map.AnnotationIntrospector r2;

        r2 := @this: org.codehaus.jackson.map.AnnotationIntrospector;

        r0 := @parameter0: java.lang.Enum;

        $r1 = virtualinvoke r0.<java.lang.Enum: java.lang.String name()>();

        return $r1;
    }

    public abstract java.lang.String findSerializablePropertyName(org.codehaus.jackson.map.introspect.AnnotatedField);

    public abstract java.lang.Object findDeserializer(org.codehaus.jackson.map.introspect.Annotated);

    public abstract java.lang.Class findKeyDeserializer(org.codehaus.jackson.map.introspect.Annotated);

    public abstract java.lang.Class findContentDeserializer(org.codehaus.jackson.map.introspect.Annotated);

    public abstract java.lang.Class findDeserializationType(org.codehaus.jackson.map.introspect.Annotated, org.codehaus.jackson.type.JavaType, java.lang.String);

    public abstract java.lang.Class findDeserializationKeyType(org.codehaus.jackson.map.introspect.Annotated, org.codehaus.jackson.type.JavaType, java.lang.String);

    public abstract java.lang.Class findDeserializationContentType(org.codehaus.jackson.map.introspect.Annotated, org.codehaus.jackson.type.JavaType, java.lang.String);

    public java.lang.Object findValueInstantiator(org.codehaus.jackson.map.introspect.AnnotatedClass)
    {
        org.codehaus.jackson.map.AnnotationIntrospector r0;
        org.codehaus.jackson.map.introspect.AnnotatedClass r1;

        r0 := @this: org.codehaus.jackson.map.AnnotationIntrospector;

        r1 := @parameter0: org.codehaus.jackson.map.introspect.AnnotatedClass;

        return null;
    }

    public abstract java.lang.String findSettablePropertyName(org.codehaus.jackson.map.introspect.AnnotatedMethod);

    public boolean hasAnySetterAnnotation(org.codehaus.jackson.map.introspect.AnnotatedMethod)
    {
        org.codehaus.jackson.map.introspect.AnnotatedMethod r1;
        org.codehaus.jackson.map.AnnotationIntrospector r0;

        r0 := @this: org.codehaus.jackson.map.AnnotationIntrospector;

        r1 := @parameter0: org.codehaus.jackson.map.introspect.AnnotatedMethod;

        return 0;
    }

    public boolean hasAnyGetterAnnotation(org.codehaus.jackson.map.introspect.AnnotatedMethod)
    {
        org.codehaus.jackson.map.introspect.AnnotatedMethod r1;
        org.codehaus.jackson.map.AnnotationIntrospector r0;

        r0 := @this: org.codehaus.jackson.map.AnnotationIntrospector;

        r1 := @parameter0: org.codehaus.jackson.map.introspect.AnnotatedMethod;

        return 0;
    }

    public boolean hasCreatorAnnotation(org.codehaus.jackson.map.introspect.Annotated)
    {
        org.codehaus.jackson.map.introspect.Annotated r1;
        org.codehaus.jackson.map.AnnotationIntrospector r0;

        r0 := @this: org.codehaus.jackson.map.AnnotationIntrospector;

        r1 := @parameter0: org.codehaus.jackson.map.introspect.Annotated;

        return 0;
    }

    public abstract java.lang.String findDeserializablePropertyName(org.codehaus.jackson.map.introspect.AnnotatedField);

    public abstract java.lang.String findPropertyNameForParam(org.codehaus.jackson.map.introspect.AnnotatedParameter);
}
