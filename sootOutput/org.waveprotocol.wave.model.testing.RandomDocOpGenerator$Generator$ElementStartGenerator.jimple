class org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$ElementStartGenerator extends org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$RandomOperationComponentGenerator
{
    final org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator this$0;

    void <init>(org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator)
    {
        org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$ElementStartGenerator r0;
        org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator r1;

        r0 := @this: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$ElementStartGenerator;

        r1 := @parameter0: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator;

        r0.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$ElementStartGenerator: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator this$0> = r1;

        specialinvoke r0.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$RandomOperationComponentGenerator: void <init>(org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator)>(r1);

        return;
    }

    org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$RandomizerOperationComponent generate(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton, boolean, org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$Stage)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton r3;
        org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$RandomizerOperationComponent $r4;
        java.lang.RuntimeException $r5;
        org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$ElementStartGenerator r2;
        int[] $r1;
        int $i0, $i1;
        org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$Stage r0;
        java.lang.StringBuilder $r6, $r7, $r8;
        java.lang.String $r9;
        boolean z0;

        r2 := @this: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$ElementStartGenerator;

        r3 := @parameter0: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton;

        z0 := @parameter1: boolean;

        r0 := @parameter2: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$Stage;

        $r1 = <org.waveprotocol.wave.model.testing.RandomDocOpGenerator$1: int[] $SwitchMap$org$waveprotocol$wave$model$testing$RandomDocOpGenerator$Generator$Stage>;

        $i0 = virtualinvoke r0.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$Stage: int ordinal()>();

        $i1 = $r1[$i0];

        tableswitch($i1)
        {
            case 1: goto label1;
            case 2: goto label2;
            case 3: goto label2;
            case 4: goto label2;
            default: goto label3;
        };

     label1:
        $r4 = virtualinvoke r2.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$ElementStartGenerator: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$RandomizerOperationComponent generate(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton,boolean)>(r3, z0);

        return $r4;

     label2:
        return null;

     label3:
        $r5 = new java.lang.RuntimeException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected stage: ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.String)>($r9);

        throw $r5;
    }

    org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$RandomizerOperationComponent generateGivenTag(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton, boolean, java.lang.String)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton r0;
        org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator $r6;
        org.waveprotocol.wave.model.document.operation.util.ImmutableStateMap $r10;
        org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$ElementStartGenerator r4;
        java.lang.String r1;
        boolean z0, $z1, $z2;
        org.waveprotocol.wave.model.document.operation.Attributes r11;
        org.waveprotocol.wave.model.document.operation.impl.AttributesImpl $r2, $r7, $r9;
        org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$ElementStartGenerator$1 $r5;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r3;
        org.waveprotocol.wave.model.document.operation.AttributesUpdate $r8;
        org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$ElementStartGenerator$2 $r12;

        r4 := @this: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$ElementStartGenerator;

        r0 := @parameter0: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton;

        z0 := @parameter1: boolean;

        r1 := @parameter2: java.lang.String;

        $r2 = <org.waveprotocol.wave.model.document.operation.Attributes: org.waveprotocol.wave.model.document.operation.impl.AttributesImpl EMPTY_MAP>;

        $r3 = virtualinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult checkElementStart(java.lang.String,org.waveprotocol.wave.model.document.operation.Attributes,org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)>(r1, $r2, null);

        if z0 == 0 goto label1;

        $z2 = virtualinvoke $r3.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult: boolean isValid()>();

        if $z2 == 0 goto label2;

     label1:
        if z0 != 0 goto label3;

        $z1 = virtualinvoke $r3.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult: boolean isIllFormed()>();

        if $z1 == 0 goto label3;

     label2:
        return null;

     label3:
        $r6 = r4.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$ElementStartGenerator: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator this$0>;

        $r7 = <org.waveprotocol.wave.model.document.operation.Attributes: org.waveprotocol.wave.model.document.operation.impl.AttributesImpl EMPTY_MAP>;

        $r5 = new org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$ElementStartGenerator$1;

        specialinvoke $r5.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$ElementStartGenerator$1: void <init>(org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$ElementStartGenerator,org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton,java.lang.String)>(r4, r0, r1);

        $r8 = virtualinvoke $r6.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator: org.waveprotocol.wave.model.document.operation.AttributesUpdate generateRandomAttributesUpdate(boolean,org.waveprotocol.wave.model.document.operation.Attributes,org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$AttributesUpdateChecker)>(z0, $r7, $r5);

        if $r8 != null goto label4;

        return null;

     label4:
        $r9 = <org.waveprotocol.wave.model.document.operation.Attributes: org.waveprotocol.wave.model.document.operation.impl.AttributesImpl EMPTY_MAP>;

        $r10 = virtualinvoke $r9.<org.waveprotocol.wave.model.document.operation.impl.AttributesImpl: org.waveprotocol.wave.model.document.operation.util.ImmutableStateMap updateWith(org.waveprotocol.wave.model.document.operation.util.UpdateMap)>($r8);

        r11 = (org.waveprotocol.wave.model.document.operation.Attributes) $r10;

        $r12 = new org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$ElementStartGenerator$2;

        specialinvoke $r12.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$ElementStartGenerator$2: void <init>(org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$ElementStartGenerator,java.lang.String,org.waveprotocol.wave.model.document.operation.Attributes)>(r4, r1, r11);

        return $r12;
    }

    org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$RandomizerOperationComponent generate(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton, boolean)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton r7;
        org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Parameters $r3;
        org.waveprotocol.wave.model.testing.RandomDocOpGenerator$RandomProvider $r4;
        org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$RandomizerOperationComponent $r9;
        org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator $r1, $r2;
        org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$ElementStartGenerator r0;
        java.util.List $r5;
        java.lang.Object $r8;
        org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$ElementStartGenerator$3 $r6;
        boolean z0;

        r0 := @this: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$ElementStartGenerator;

        r7 := @parameter0: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton;

        z0 := @parameter1: boolean;

        $r1 = r0.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$ElementStartGenerator: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator this$0>;

        $r4 = $r1.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$RandomProvider r>;

        $r2 = r0.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$ElementStartGenerator: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator this$0>;

        $r3 = $r2.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Parameters p>;

        $r5 = virtualinvoke $r3.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Parameters: java.util.List getElementTypes()>();

        $r6 = new org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$ElementStartGenerator$3;

        specialinvoke $r6.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$ElementStartGenerator$3: void <init>(org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$ElementStartGenerator,org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton,boolean)>(r0, r7, z0);

        $r8 = staticinvoke <org.waveprotocol.wave.model.testing.RandomDocOpGenerator: java.lang.Object access$200(org.waveprotocol.wave.model.testing.RandomDocOpGenerator$RandomProvider,java.util.List,org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Mapper)>($r4, $r5, $r6);

        $r9 = (org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$RandomizerOperationComponent) $r8;

        return $r9;
    }
}
