class org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$5 extends java.lang.Object implements org.waveprotocol.wave.model.util.Scheduler$Command
{
    int tag;
    final java.util.Map val$knownWavelets;
    final org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl this$0;

    void <init>(org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl, java.util.Map)
    {
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$5 r0;
        java.util.Map r2;
        int $i0;
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl r1, $r3;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$5;

        r1 := @parameter0: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl;

        r2 := @parameter1: java.util.Map;

        r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$5: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl this$0> = r1;

        r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$5: java.util.Map val$knownWavelets> = r2;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$5: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl this$0>;

        $i0 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl: int access$000(org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl)>($r3);

        r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$5: int tag> = $i0;

        return;
    }

    public void execute()
    {
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$5 r0;
        java.util.Map $r2;
        int $i0, $i1;
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl $r1, $r3;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$5;

        $i0 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$5: int tag>;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$5: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl this$0>;

        $i1 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl: int access$000(org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl)>($r1);

        if $i0 != $i1 goto label1;

        $r3 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$5: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl this$0>;

        $r2 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$5: java.util.Map val$knownWavelets>;

        staticinvoke <org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl: void access$1700(org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl,java.util.Map)>($r3, $r2);

     label1:
        return;
    }
}
