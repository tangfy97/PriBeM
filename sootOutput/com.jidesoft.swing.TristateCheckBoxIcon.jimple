public class com.jidesoft.swing.TristateCheckBoxIcon extends java.lang.Object implements javax.swing.Icon, javax.swing.plaf.synth.SynthConstants
{
    private javax.swing.UIDefaults$LazyValue _originalIcon;
    private static java.util.Map _synthIconMap;

    public void <init>(javax.swing.UIDefaults$LazyValue)
    {
        com.jidesoft.swing.TristateCheckBoxIcon r0;
        javax.swing.UIDefaults$LazyValue r1;

        r0 := @this: com.jidesoft.swing.TristateCheckBoxIcon;

        r1 := @parameter0: javax.swing.UIDefaults$LazyValue;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.jidesoft.swing.TristateCheckBoxIcon: javax.swing.UIDefaults$LazyValue _originalIcon> = r1;

        return;
    }

    protected boolean isSynthIconClassName(java.lang.String)
    {
        com.jidesoft.swing.TristateCheckBoxIcon r1;
        java.lang.String r0;
        boolean $z0, $z1;

        r1 := @this: com.jidesoft.swing.TristateCheckBoxIcon;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        $z0 = virtualinvoke r0.<java.lang.String: boolean contains(java.lang.CharSequence)>("sun.swing.plaf.synth.SynthIcon");

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    private boolean isSynthIcon(javax.swing.Icon)
    {
        java.util.HashMap $r11;
        java.util.ArrayList $r2;
        java.util.Map $r0, $r5, $r8;
        java.lang.Boolean $r6, r13;
        java.lang.String $r7, r14;
        boolean $z0, $z1, z2, $z3, z4, z5;
        java.util.Iterator $r3;
        javax.swing.Icon r1;
        com.jidesoft.swing.TristateCheckBoxIcon r10;
        java.lang.Object $r4, $r9;
        java.lang.Class r12;

        r10 := @this: com.jidesoft.swing.TristateCheckBoxIcon;

        r1 := @parameter0: javax.swing.Icon;

        $r0 = <com.jidesoft.swing.TristateCheckBoxIcon: java.util.Map _synthIconMap>;

        if $r0 != null goto label1;

        $r11 = new java.util.HashMap;

        specialinvoke $r11.<java.util.HashMap: void <init>()>();

        <com.jidesoft.swing.TristateCheckBoxIcon: java.util.Map _synthIconMap> = $r11;

     label1:
        r12 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        z2 = 0;

        z5 = 0;

        z4 = 0;

     label2:
        if r12 == null goto label5;

        $r7 = virtualinvoke r12.<java.lang.Class: java.lang.String getCanonicalName()>();

        if $r7 == null goto label4;

        $r8 = <com.jidesoft.swing.TristateCheckBoxIcon: java.util.Map _synthIconMap>;

        $r9 = interfaceinvoke $r8.<java.util.Map: java.lang.Object get(java.lang.Object)>($r7);

        r13 = (java.lang.Boolean) $r9;

        if r13 == null goto label3;

        $z1 = virtualinvoke r13.<java.lang.Boolean: boolean booleanValue()>();

        return $z1;

     label3:
        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r7);

        $z0 = virtualinvoke r10.<com.jidesoft.swing.TristateCheckBoxIcon: boolean isSynthIconClassName(java.lang.String)>($r7);

        if $z0 == 0 goto label4;

        z2 = 1;

        z5 = 1;

        z4 = 1;

        goto label5;

     label4:
        r12 = virtualinvoke r12.<java.lang.Class: java.lang.Class getSuperclass()>();

        goto label2;

     label5:
        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label6:
        $z3 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label7;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r14 = (java.lang.String) $r4;

        $r5 = <com.jidesoft.swing.TristateCheckBoxIcon: java.util.Map _synthIconMap>;

        $r6 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z5);

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r14, $r6);

        goto label6;

     label7:
        return z4;
    }

    public void paintIcon(java.awt.Component, java.awt.Graphics, int, int)
    {
        java.awt.Color $r43;
        javax.swing.ButtonModel $r8, $r10, $r13, $r15, $r18, $r21, $r23, $r26, $r30, $r32;
        javax.swing.plaf.synth.Region $r36, $r38;
        java.awt.Component r5;
        javax.swing.UIDefaults$LazyValue $r1;
        javax.swing.plaf.synth.SynthContext $r44;
        javax.swing.plaf.synth.SynthStyle $r39;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12;
        com.jidesoft.swing.TristateButtonModel $r11, $r16, $r19, $r24, $r27, $r33;
        javax.swing.UIDefaults $r2;
        javax.swing.Icon r4;
        com.jidesoft.swing.TristateCheckBox $r7, $r9, $r12, $r14, $r17, $r20, $r22, $r25, $r29, $r31;
        java.awt.Graphics r6;
        sun.swing.plaf.synth.SynthIcon $r40, $r41, $r42;
        int i0, i1, $i2, i3, $i4, $i5, $i7;
        javax.swing.JComponent $r28, $r35, $r37;
        com.jidesoft.swing.TristateCheckBoxIcon r0;
        java.lang.Object $r3;

        r0 := @this: com.jidesoft.swing.TristateCheckBoxIcon;

        r5 := @parameter0: java.awt.Component;

        r6 := @parameter1: java.awt.Graphics;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        $r1 = r0.<com.jidesoft.swing.TristateCheckBoxIcon: javax.swing.UIDefaults$LazyValue _originalIcon>;

        $r2 = staticinvoke <javax.swing.UIManager: javax.swing.UIDefaults getDefaults()>();

        $r3 = interfaceinvoke $r1.<javax.swing.UIDefaults$LazyValue: java.lang.Object createValue(javax.swing.UIDefaults)>($r2);

        r4 = (javax.swing.Icon) $r3;

        $z0 = specialinvoke r0.<com.jidesoft.swing.TristateCheckBoxIcon: boolean isSynthIcon(javax.swing.Icon)>(r4);

        if $z0 == 0 goto label2;

        $r28 = (javax.swing.JComponent) r5;

        $i2 = specialinvoke r0.<com.jidesoft.swing.TristateCheckBoxIcon: int getComponentState(javax.swing.JComponent)>($r28);

        i3 = $i2;

        $z8 = r5 instanceof com.jidesoft.swing.TristateCheckBox;

        if $z8 == 0 goto label1;

        $r29 = (com.jidesoft.swing.TristateCheckBox) r5;

        $r30 = virtualinvoke $r29.<com.jidesoft.swing.TristateCheckBox: javax.swing.ButtonModel getModel()>();

        $z9 = $r30 instanceof com.jidesoft.swing.TristateButtonModel;

        if $z9 == 0 goto label1;

        $r31 = (com.jidesoft.swing.TristateCheckBox) r5;

        $r32 = virtualinvoke $r31.<com.jidesoft.swing.TristateCheckBox: javax.swing.ButtonModel getModel()>();

        $r33 = (com.jidesoft.swing.TristateButtonModel) $r32;

        $z10 = virtualinvoke $r33.<com.jidesoft.swing.TristateButtonModel: boolean isMixed()>();

        if $z10 == 0 goto label1;

        $i7 = (int) -513;

        i3 = $i2 & $i7;

     label1:
        $r44 = new javax.swing.plaf.synth.SynthContext;

        $r35 = (javax.swing.JComponent) r5;

        $r36 = <javax.swing.plaf.synth.Region: javax.swing.plaf.synth.Region CHECK_BOX>;

        $r37 = (javax.swing.JComponent) r5;

        $r38 = <javax.swing.plaf.synth.Region: javax.swing.plaf.synth.Region CHECK_BOX>;

        $r39 = staticinvoke <javax.swing.plaf.synth.SynthLookAndFeel: javax.swing.plaf.synth.SynthStyle getStyle(javax.swing.JComponent,javax.swing.plaf.synth.Region)>($r37, $r38);

        specialinvoke $r44.<javax.swing.plaf.synth.SynthContext: void <init>(javax.swing.JComponent,javax.swing.plaf.synth.Region,javax.swing.plaf.synth.SynthStyle,int)>($r35, $r36, $r39, i3);

        $r40 = (sun.swing.plaf.synth.SynthIcon) r4;

        $i4 = virtualinvoke $r40.<sun.swing.plaf.synth.SynthIcon: int getIconWidth(javax.swing.plaf.synth.SynthContext)>($r44);

        $r41 = (sun.swing.plaf.synth.SynthIcon) r4;

        $i5 = virtualinvoke $r41.<sun.swing.plaf.synth.SynthIcon: int getIconHeight(javax.swing.plaf.synth.SynthContext)>($r44);

        $r42 = (sun.swing.plaf.synth.SynthIcon) r4;

        virtualinvoke $r42.<sun.swing.plaf.synth.SynthIcon: void paintIcon(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)>($r44, r6, i0, i1, $i4, $i5);

        goto label4;

     label2:
        $z1 = r5 instanceof com.jidesoft.swing.TristateCheckBox;

        if $z1 == 0 goto label3;

        $r20 = (com.jidesoft.swing.TristateCheckBox) r5;

        $r21 = virtualinvoke $r20.<com.jidesoft.swing.TristateCheckBox: javax.swing.ButtonModel getModel()>();

        $z6 = $r21 instanceof com.jidesoft.swing.TristateButtonModel;

        if $z6 == 0 goto label3;

        $r22 = (com.jidesoft.swing.TristateCheckBox) r5;

        $r23 = virtualinvoke $r22.<com.jidesoft.swing.TristateCheckBox: javax.swing.ButtonModel getModel()>();

        $r24 = (com.jidesoft.swing.TristateButtonModel) $r23;

        $z7 = virtualinvoke $r24.<com.jidesoft.swing.TristateButtonModel: boolean isMixed()>();

        if $z7 == 0 goto label3;

        $r25 = (com.jidesoft.swing.TristateCheckBox) r5;

        $r26 = virtualinvoke $r25.<com.jidesoft.swing.TristateCheckBox: javax.swing.ButtonModel getModel()>();

        $r27 = (com.jidesoft.swing.TristateButtonModel) $r26;

        virtualinvoke $r27.<com.jidesoft.swing.TristateButtonModel: void internalSetSelected(boolean)>(0);

     label3:
        interfaceinvoke r4.<javax.swing.Icon: void paintIcon(java.awt.Component,java.awt.Graphics,int,int)>(r5, r6, i0, i1);

        $z11 = r5 instanceof com.jidesoft.swing.TristateCheckBox;

        if $z11 == 0 goto label4;

        $r12 = (com.jidesoft.swing.TristateCheckBox) r5;

        $r13 = virtualinvoke $r12.<com.jidesoft.swing.TristateCheckBox: javax.swing.ButtonModel getModel()>();

        $z4 = $r13 instanceof com.jidesoft.swing.TristateButtonModel;

        if $z4 == 0 goto label4;

        $r14 = (com.jidesoft.swing.TristateCheckBox) r5;

        $r15 = virtualinvoke $r14.<com.jidesoft.swing.TristateCheckBox: javax.swing.ButtonModel getModel()>();

        $r16 = (com.jidesoft.swing.TristateButtonModel) $r15;

        $z5 = virtualinvoke $r16.<com.jidesoft.swing.TristateButtonModel: boolean isMixed()>();

        if $z5 == 0 goto label4;

        $r17 = (com.jidesoft.swing.TristateCheckBox) r5;

        $r18 = virtualinvoke $r17.<com.jidesoft.swing.TristateCheckBox: javax.swing.ButtonModel getModel()>();

        $r19 = (com.jidesoft.swing.TristateButtonModel) $r18;

        virtualinvoke $r19.<com.jidesoft.swing.TristateButtonModel: void internalSetSelected(boolean)>(1);

     label4:
        $r43 = staticinvoke <javax.swing.UIManager: java.awt.Color getColor(java.lang.Object)>("CheckBox.foreground");

        virtualinvoke r6.<java.awt.Graphics: void setColor(java.awt.Color)>($r43);

        $z12 = r5 instanceof com.jidesoft.swing.TristateCheckBox;

        if $z12 == 0 goto label5;

        $r7 = (com.jidesoft.swing.TristateCheckBox) r5;

        $r8 = virtualinvoke $r7.<com.jidesoft.swing.TristateCheckBox: javax.swing.ButtonModel getModel()>();

        $z2 = $r8 instanceof com.jidesoft.swing.TristateButtonModel;

        if $z2 == 0 goto label5;

        $r9 = (com.jidesoft.swing.TristateCheckBox) r5;

        $r10 = virtualinvoke $r9.<com.jidesoft.swing.TristateCheckBox: javax.swing.ButtonModel getModel()>();

        $r11 = (com.jidesoft.swing.TristateButtonModel) $r10;

        $z3 = virtualinvoke $r11.<com.jidesoft.swing.TristateButtonModel: boolean isMixed()>();

        if $z3 == 0 goto label5;

        virtualinvoke r0.<com.jidesoft.swing.TristateCheckBoxIcon: void drawSquare(java.awt.Component,java.awt.Graphics,int,int)>(r5, r6, i0, i1);

     label5:
        return;
    }

    private int getComponentState(javax.swing.JComponent)
    {
        javax.swing.JComponent r0;
        javax.swing.JButton $r2;
        short s0;
        com.jidesoft.swing.TristateCheckBoxIcon r4;
        javax.swing.AbstractButton $r3;
        javax.swing.ButtonModel $r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;

        r4 := @this: com.jidesoft.swing.TristateCheckBoxIcon;

        r0 := @parameter0: javax.swing.JComponent;

        s0 = 1;

        $z0 = virtualinvoke r0.<javax.swing.JComponent: boolean isEnabled()>();

        if $z0 != 0 goto label1;

        s0 = 8;

     label1:
        $r3 = (javax.swing.AbstractButton) r0;

        $r1 = virtualinvoke $r3.<javax.swing.AbstractButton: javax.swing.ButtonModel getModel()>();

        $z1 = interfaceinvoke $r1.<javax.swing.ButtonModel: boolean isPressed()>();

        if $z1 == 0 goto label3;

        $z6 = interfaceinvoke $r1.<javax.swing.ButtonModel: boolean isArmed()>();

        if $z6 == 0 goto label2;

        s0 = 4;

        goto label3;

     label2:
        s0 = 2;

     label3:
        $z7 = interfaceinvoke $r1.<javax.swing.ButtonModel: boolean isRollover()>();

        if $z7 == 0 goto label4;

        s0 = s0 | 2;

     label4:
        $z2 = interfaceinvoke $r1.<javax.swing.ButtonModel: boolean isSelected()>();

        if $z2 == 0 goto label5;

        s0 = s0 | 512;

     label5:
        $z3 = virtualinvoke r0.<javax.swing.JComponent: boolean isFocusOwner()>();

        if $z3 == 0 goto label6;

        $z5 = virtualinvoke $r3.<javax.swing.AbstractButton: boolean isFocusPainted()>();

        if $z5 == 0 goto label6;

        s0 = s0 | 256;

     label6:
        $z8 = r0 instanceof javax.swing.JButton;

        if $z8 == 0 goto label7;

        $r2 = (javax.swing.JButton) r0;

        $z4 = virtualinvoke $r2.<javax.swing.JButton: boolean isDefaultButton()>();

        if $z4 == 0 goto label7;

        s0 = s0 | 1024;

     label7:
        return s0;
    }

    public int getIconWidth()
    {
        com.jidesoft.swing.TristateCheckBoxIcon r0;
        javax.swing.UIDefaults$LazyValue $r1;
        javax.swing.UIDefaults $r2;
        int $i0;
        java.lang.Object $r3;
        javax.swing.Icon r4;

        r0 := @this: com.jidesoft.swing.TristateCheckBoxIcon;

        $r1 = r0.<com.jidesoft.swing.TristateCheckBoxIcon: javax.swing.UIDefaults$LazyValue _originalIcon>;

        $r2 = staticinvoke <javax.swing.UIManager: javax.swing.UIDefaults getDefaults()>();

        $r3 = interfaceinvoke $r1.<javax.swing.UIDefaults$LazyValue: java.lang.Object createValue(javax.swing.UIDefaults)>($r2);

        r4 = (javax.swing.Icon) $r3;

        $i0 = interfaceinvoke r4.<javax.swing.Icon: int getIconWidth()>();

        return $i0;
    }

    public int getIconHeight()
    {
        com.jidesoft.swing.TristateCheckBoxIcon r0;
        javax.swing.UIDefaults$LazyValue $r1;
        javax.swing.UIDefaults $r2;
        int $i0;
        java.lang.Object $r3;
        javax.swing.Icon r4;

        r0 := @this: com.jidesoft.swing.TristateCheckBoxIcon;

        $r1 = r0.<com.jidesoft.swing.TristateCheckBoxIcon: javax.swing.UIDefaults$LazyValue _originalIcon>;

        $r2 = staticinvoke <javax.swing.UIManager: javax.swing.UIDefaults getDefaults()>();

        $r3 = interfaceinvoke $r1.<javax.swing.UIDefaults$LazyValue: java.lang.Object createValue(javax.swing.UIDefaults)>($r2);

        r4 = (javax.swing.Icon) $r3;

        $i0 = interfaceinvoke r4.<javax.swing.Icon: int getIconHeight()>();

        return $i0;
    }

    protected void drawSquare(java.awt.Component, java.awt.Graphics, int, int)
    {
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, i7, i8, i9, $i10, $i11, $i12, $i13, $i14, $i15;
        java.awt.Component r2;
        com.jidesoft.swing.TristateCheckBoxIcon r0;
        java.awt.Graphics r1;

        r0 := @this: com.jidesoft.swing.TristateCheckBoxIcon;

        r2 := @parameter0: java.awt.Component;

        r1 := @parameter1: java.awt.Graphics;

        i8 := @parameter2: int;

        i9 := @parameter3: int;

        $i0 = virtualinvoke r0.<com.jidesoft.swing.TristateCheckBoxIcon: int getIconWidth()>();

        $i1 = virtualinvoke r0.<com.jidesoft.swing.TristateCheckBoxIcon: int getIconHeight()>();

        $i2 = staticinvoke <java.lang.Math: int min(int,int)>($i0, $i1);

        $i3 = virtualinvoke r0.<com.jidesoft.swing.TristateCheckBoxIcon: int getIconWidth()>();

        $i4 = virtualinvoke r0.<com.jidesoft.swing.TristateCheckBoxIcon: int getIconHeight()>();

        $i5 = staticinvoke <java.lang.Math: int min(int,int)>($i3, $i4);

        i6 = $i2 / 3;

        i7 = $i5 / 3;

        $i15 = i8 + i6;

        $i14 = i9 + i7;

        $i10 = i6 * 2;

        $i13 = $i2 - $i10;

        $i11 = i7 * 2;

        $i12 = $i5 - $i11;

        virtualinvoke r1.<java.awt.Graphics: void fillRect(int,int,int,int)>($i15, $i14, $i13, $i12);

        return;
    }
}
