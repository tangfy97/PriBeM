public class thredds.cataloggen.config.DatasetFilter extends java.lang.Object
{
    private thredds.cataloggen.config.DatasetSource parentDatasetSource;
    private java.lang.String name;
    private thredds.cataloggen.config.DatasetFilter$Type type;
    private java.lang.String matchPattern;
    protected java.util.regex.Pattern regExpPattern;
    private java.lang.String matchPatternTarget;
    private boolean applyToCollectionDatasets;
    private boolean applyToAtomicDatasets;
    private boolean rejectMatchingDatasets;
    private boolean isValid;
    private java.lang.StringBuffer log;

    public void <init>(thredds.cataloggen.config.DatasetSource, java.lang.String, thredds.cataloggen.config.DatasetFilter$Type, java.lang.String)
    {
        thredds.cataloggen.config.DatasetFilter$Type r2;
        java.lang.StringBuffer $r1, $r8, $r10, $r17;
        thredds.cataloggen.config.DatasetFilter r0;
        java.lang.String r4, r5, $r6, $r14, $r19, $r22;
        java.util.regex.PatternSyntaxException $r15;
        thredds.cataloggen.config.DatasetSource r3;
        java.lang.StringBuilder $r9, $r11, $r12, $r13, $r16, $r18, $r20, $r21;
        java.util.regex.Pattern $r7;

        r0 := @this: thredds.cataloggen.config.DatasetFilter;

        r3 := @parameter0: thredds.cataloggen.config.DatasetSource;

        r4 := @parameter1: java.lang.String;

        r2 := @parameter2: thredds.cataloggen.config.DatasetFilter$Type;

        r5 := @parameter3: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<thredds.cataloggen.config.DatasetFilter: thredds.cataloggen.config.DatasetSource parentDatasetSource> = null;

        r0.<thredds.cataloggen.config.DatasetFilter: java.lang.String name> = null;

        r0.<thredds.cataloggen.config.DatasetFilter: thredds.cataloggen.config.DatasetFilter$Type type> = null;

        r0.<thredds.cataloggen.config.DatasetFilter: java.lang.String matchPattern> = null;

        r0.<thredds.cataloggen.config.DatasetFilter: java.lang.String matchPatternTarget> = null;

        r0.<thredds.cataloggen.config.DatasetFilter: boolean applyToCollectionDatasets> = 0;

        r0.<thredds.cataloggen.config.DatasetFilter: boolean applyToAtomicDatasets> = 1;

        r0.<thredds.cataloggen.config.DatasetFilter: boolean rejectMatchingDatasets> = 0;

        r0.<thredds.cataloggen.config.DatasetFilter: boolean isValid> = 1;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        r0.<thredds.cataloggen.config.DatasetFilter: java.lang.StringBuffer log> = $r1;

        if r2 != null goto label1;

        r0.<thredds.cataloggen.config.DatasetFilter: boolean isValid> = 0;

        $r10 = r0.<thredds.cataloggen.config.DatasetFilter: java.lang.StringBuffer log>;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ** DatasetFilter (1): invalid type for datasetFilter (");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r14);

     label1:
        r0.<thredds.cataloggen.config.DatasetFilter: thredds.cataloggen.config.DatasetSource parentDatasetSource> = r3;

        r0.<thredds.cataloggen.config.DatasetFilter: java.lang.String name> = r4;

        r0.<thredds.cataloggen.config.DatasetFilter: thredds.cataloggen.config.DatasetFilter$Type type> = r2;

        if r5 != null goto label2;

        r0.<thredds.cataloggen.config.DatasetFilter: boolean isValid> = 0;

        $r8 = r0.<thredds.cataloggen.config.DatasetFilter: java.lang.StringBuffer log>;

        virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ** DatasetFilter (2): null matchPattern not allowed.");

        goto label6;

     label2:
        r0.<thredds.cataloggen.config.DatasetFilter: java.lang.String matchPattern> = r5;

     label3:
        $r6 = r0.<thredds.cataloggen.config.DatasetFilter: java.lang.String matchPattern>;

        $r7 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>($r6);

        r0.<thredds.cataloggen.config.DatasetFilter: java.util.regex.Pattern regExpPattern> = $r7;

     label4:
        goto label6;

     label5:
        $r15 := @caughtexception;

        r0.<thredds.cataloggen.config.DatasetFilter: boolean isValid> = 0;

        $r17 = r0.<thredds.cataloggen.config.DatasetFilter: java.lang.StringBuffer log>;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ** DatasetFilter (3): invalid matchPattern [");

        $r19 = r0.<thredds.cataloggen.config.DatasetFilter: java.lang.String matchPattern>;

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("].");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r22);

     label6:
        return;

        catch java.util.regex.PatternSyntaxException from label3 to label4 with label5;
    }

    public void <init>(thredds.cataloggen.config.DatasetSource, java.lang.String, thredds.cataloggen.config.DatasetFilter$Type, java.lang.String, boolean, boolean, boolean)
    {
        thredds.cataloggen.config.DatasetFilter$Type r3;
        thredds.cataloggen.config.DatasetSource r1;
        thredds.cataloggen.config.DatasetFilter r0;
        java.lang.String r2, r4;
        boolean z0, z1, z2;

        r0 := @this: thredds.cataloggen.config.DatasetFilter;

        r1 := @parameter0: thredds.cataloggen.config.DatasetSource;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: thredds.cataloggen.config.DatasetFilter$Type;

        r4 := @parameter3: java.lang.String;

        z0 := @parameter4: boolean;

        z1 := @parameter5: boolean;

        z2 := @parameter6: boolean;

        specialinvoke r0.<thredds.cataloggen.config.DatasetFilter: void <init>(thredds.cataloggen.config.DatasetSource,java.lang.String,thredds.cataloggen.config.DatasetFilter$Type,java.lang.String)>(r1, r2, r3, r4);

        r0.<thredds.cataloggen.config.DatasetFilter: boolean applyToCollectionDatasets> = z0;

        r0.<thredds.cataloggen.config.DatasetFilter: boolean applyToAtomicDatasets> = z1;

        r0.<thredds.cataloggen.config.DatasetFilter: boolean rejectMatchingDatasets> = z2;

        return;
    }

    public thredds.cataloggen.config.DatasetSource getParentDatasetSource()
    {
        thredds.cataloggen.config.DatasetFilter r0;
        thredds.cataloggen.config.DatasetSource $r1;

        r0 := @this: thredds.cataloggen.config.DatasetFilter;

        $r1 = r0.<thredds.cataloggen.config.DatasetFilter: thredds.cataloggen.config.DatasetSource parentDatasetSource>;

        return $r1;
    }

    public java.lang.String getName()
    {
        thredds.cataloggen.config.DatasetFilter r0;
        java.lang.String $r1;

        r0 := @this: thredds.cataloggen.config.DatasetFilter;

        $r1 = r0.<thredds.cataloggen.config.DatasetFilter: java.lang.String name>;

        return $r1;
    }

    public thredds.cataloggen.config.DatasetFilter$Type getType()
    {
        thredds.cataloggen.config.DatasetFilter r0;
        thredds.cataloggen.config.DatasetFilter$Type $r1;

        r0 := @this: thredds.cataloggen.config.DatasetFilter;

        $r1 = r0.<thredds.cataloggen.config.DatasetFilter: thredds.cataloggen.config.DatasetFilter$Type type>;

        return $r1;
    }

    public java.lang.String getMatchPattern()
    {
        thredds.cataloggen.config.DatasetFilter r0;
        java.lang.String $r1;

        r0 := @this: thredds.cataloggen.config.DatasetFilter;

        $r1 = r0.<thredds.cataloggen.config.DatasetFilter: java.lang.String matchPattern>;

        return $r1;
    }

    public java.lang.String getMatchPatternTarget()
    {
        thredds.cataloggen.config.DatasetFilter r0;
        java.lang.String $r1;

        r0 := @this: thredds.cataloggen.config.DatasetFilter;

        $r1 = r0.<thredds.cataloggen.config.DatasetFilter: java.lang.String matchPatternTarget>;

        return $r1;
    }

    public void setMatchPatternTarget(java.lang.String)
    {
        thredds.cataloggen.config.DatasetFilter r0;
        java.lang.String r1;

        r0 := @this: thredds.cataloggen.config.DatasetFilter;

        r1 := @parameter0: java.lang.String;

        r0.<thredds.cataloggen.config.DatasetFilter: java.lang.String matchPatternTarget> = r1;

        return;
    }

    public boolean isApplyToCollectionDatasets()
    {
        thredds.cataloggen.config.DatasetFilter r0;
        boolean $z0;

        r0 := @this: thredds.cataloggen.config.DatasetFilter;

        $z0 = r0.<thredds.cataloggen.config.DatasetFilter: boolean applyToCollectionDatasets>;

        return $z0;
    }

    public void setApplyToCollectionDatasets(boolean)
    {
        thredds.cataloggen.config.DatasetFilter r0;
        boolean z0;

        r0 := @this: thredds.cataloggen.config.DatasetFilter;

        z0 := @parameter0: boolean;

        r0.<thredds.cataloggen.config.DatasetFilter: boolean applyToCollectionDatasets> = z0;

        return;
    }

    public boolean isApplyToAtomicDatasets()
    {
        thredds.cataloggen.config.DatasetFilter r0;
        boolean $z0;

        r0 := @this: thredds.cataloggen.config.DatasetFilter;

        $z0 = r0.<thredds.cataloggen.config.DatasetFilter: boolean applyToAtomicDatasets>;

        return $z0;
    }

    public void setApplyToAtomicDatasets(boolean)
    {
        thredds.cataloggen.config.DatasetFilter r0;
        boolean z0;

        r0 := @this: thredds.cataloggen.config.DatasetFilter;

        z0 := @parameter0: boolean;

        r0.<thredds.cataloggen.config.DatasetFilter: boolean applyToAtomicDatasets> = z0;

        return;
    }

    public boolean isRejectMatchingDatasets()
    {
        thredds.cataloggen.config.DatasetFilter r0;
        boolean $z0;

        r0 := @this: thredds.cataloggen.config.DatasetFilter;

        $z0 = r0.<thredds.cataloggen.config.DatasetFilter: boolean rejectMatchingDatasets>;

        return $z0;
    }

    public boolean isAcceptMatchingDatasets()
    {
        thredds.cataloggen.config.DatasetFilter r0;
        boolean $z0, $z1;

        r0 := @this: thredds.cataloggen.config.DatasetFilter;

        $z0 = r0.<thredds.cataloggen.config.DatasetFilter: boolean rejectMatchingDatasets>;

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public void setRejectMatchingDatasets(boolean)
    {
        thredds.cataloggen.config.DatasetFilter r0;
        boolean z0;

        r0 := @this: thredds.cataloggen.config.DatasetFilter;

        z0 := @parameter0: boolean;

        r0.<thredds.cataloggen.config.DatasetFilter: boolean rejectMatchingDatasets> = z0;

        return;
    }

    boolean validate(java.lang.StringBuilder)
    {
        thredds.cataloggen.config.DatasetFilter$Type $r3, $r4, $r5, $r6, $r17, $r18;
        java.lang.StringBuffer $r1, $r16;
        thredds.cataloggen.config.DatasetFilter r0;
        int $i0;
        java.lang.String $r2, $r7, $r11, $r14, $r15;
        boolean $z0;
        java.lang.StringBuilder r8, $r9, $r10, $r12, $r13;

        r0 := @this: thredds.cataloggen.config.DatasetFilter;

        r8 := @parameter0: java.lang.StringBuilder;

        r0.<thredds.cataloggen.config.DatasetFilter: boolean isValid> = 1;

        $r1 = r0.<thredds.cataloggen.config.DatasetFilter: java.lang.StringBuffer log>;

        $i0 = virtualinvoke $r1.<java.lang.StringBuffer: int length()>();

        if $i0 <= 0 goto label1;

        $r16 = r0.<thredds.cataloggen.config.DatasetFilter: java.lang.StringBuffer log>;

        virtualinvoke r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.StringBuffer)>($r16);

     label1:
        $r2 = virtualinvoke r0.<thredds.cataloggen.config.DatasetFilter: java.lang.String getName()>();

        if $r2 != null goto label2;

        r0.<thredds.cataloggen.config.DatasetFilter: boolean isValid> = 0;

        virtualinvoke r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ** DatasetFilter (4): null value for name is not valid.");

     label2:
        $r3 = virtualinvoke r0.<thredds.cataloggen.config.DatasetFilter: thredds.cataloggen.config.DatasetFilter$Type getType()>();

        if $r3 != null goto label3;

        r0.<thredds.cataloggen.config.DatasetFilter: boolean isValid> = 0;

        virtualinvoke r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ** DatasetFilter (5): null value for type is not valid (set with bad string?).");

     label3:
        $r5 = r0.<thredds.cataloggen.config.DatasetFilter: thredds.cataloggen.config.DatasetFilter$Type type>;

        $r4 = <thredds.cataloggen.config.DatasetFilter$Type: thredds.cataloggen.config.DatasetFilter$Type REGULAR_EXPRESSION>;

        if $r5 != $r4 goto label4;

        $r15 = r0.<thredds.cataloggen.config.DatasetFilter: java.lang.String matchPattern>;

        if $r15 != null goto label4;

        r0.<thredds.cataloggen.config.DatasetFilter: boolean isValid> = 0;

        virtualinvoke r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ** DatasetFilter (6): null value for matchPattern not valid when type is \'RegExp\'.");

     label4:
        $r17 = r0.<thredds.cataloggen.config.DatasetFilter: thredds.cataloggen.config.DatasetFilter$Type type>;

        $r18 = <thredds.cataloggen.config.DatasetFilter$Type: thredds.cataloggen.config.DatasetFilter$Type REGULAR_EXPRESSION>;

        if $r17 == $r18 goto label5;

        $r6 = r0.<thredds.cataloggen.config.DatasetFilter: thredds.cataloggen.config.DatasetFilter$Type type>;

        if $r6 == null goto label5;

        $r7 = r0.<thredds.cataloggen.config.DatasetFilter: java.lang.String matchPattern>;

        if $r7 == null goto label5;

        r0.<thredds.cataloggen.config.DatasetFilter: boolean isValid> = 0;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ** DatasetFilter (7): matchPattern value (");

        $r11 = r0.<thredds.cataloggen.config.DatasetFilter: java.lang.String matchPattern>;

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") must be null if type is not \'RegExp\'.");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

     label5:
        $z0 = r0.<thredds.cataloggen.config.DatasetFilter: boolean isValid>;

        return $z0;
    }

    public java.lang.String toString()
    {
        thredds.cataloggen.config.DatasetFilter$Type $r7;
        java.lang.StringBuffer $r0;
        thredds.cataloggen.config.DatasetFilter r3;
        java.lang.StringBuilder $r1, $r2, $r5, $r6, $r8, $r9, $r11, $r12;
        java.lang.String $r4, $r10, $r13, $r14;

        r3 := @this: thredds.cataloggen.config.DatasetFilter;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("DatasetFilter[name:<");

        $r4 = virtualinvoke r3.<thredds.cataloggen.config.DatasetFilter: java.lang.String getName()>();

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("> type:<");

        $r7 = virtualinvoke r3.<thredds.cataloggen.config.DatasetFilter: thredds.cataloggen.config.DatasetFilter$Type getType()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("> matchPattern:<");

        $r10 = virtualinvoke r3.<thredds.cataloggen.config.DatasetFilter: java.lang.String getMatchPattern()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r13);

        $r14 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r14;
    }

    public boolean reject(thredds.catalog.InvDataset)
    {
        java.lang.IllegalStateException $r2;
        thredds.cataloggen.config.DatasetFilter r0;
        java.lang.StringBuilder $r3, $r4, $r6, $r7;
        java.lang.String $r5, $r8;
        boolean $z0, $z1;
        thredds.catalog.InvDataset r1;

        r0 := @this: thredds.cataloggen.config.DatasetFilter;

        r1 := @parameter0: thredds.catalog.InvDataset;

        $z0 = virtualinvoke r0.<thredds.cataloggen.config.DatasetFilter: boolean isAcceptMatchingDatasets()>();

        if $z0 == 0 goto label1;

        $r2 = new java.lang.IllegalStateException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Accept filter <");

        $r5 = virtualinvoke r0.<thredds.cataloggen.config.DatasetFilter: java.lang.String getName()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("> does not allow call to reject().");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r8);

        throw $r2;

     label1:
        $z1 = specialinvoke r0.<thredds.cataloggen.config.DatasetFilter: boolean match(thredds.catalog.InvDataset)>(r1);

        return $z1;
    }

    public boolean accept(thredds.catalog.InvDataset)
    {
        java.lang.IllegalStateException $r2;
        thredds.cataloggen.config.DatasetFilter r0;
        java.lang.StringBuilder $r3, $r4, $r6, $r7;
        java.lang.String $r5, $r8;
        boolean $z0, $z1;
        thredds.catalog.InvDataset r1;

        r0 := @this: thredds.cataloggen.config.DatasetFilter;

        r1 := @parameter0: thredds.catalog.InvDataset;

        $z0 = virtualinvoke r0.<thredds.cataloggen.config.DatasetFilter: boolean isRejectMatchingDatasets()>();

        if $z0 == 0 goto label1;

        $r2 = new java.lang.IllegalStateException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Reject filter <");

        $r5 = virtualinvoke r0.<thredds.cataloggen.config.DatasetFilter: java.lang.String getName()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("> does not allow call to accept().");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r8);

        throw $r2;

     label1:
        $z1 = specialinvoke r0.<thredds.cataloggen.config.DatasetFilter: boolean match(thredds.catalog.InvDataset)>(r1);

        return $z1;
    }

    protected boolean appliesToDataset(thredds.catalog.InvDataset)
    {
        thredds.cataloggen.config.DatasetSource $r1, $r3;
        thredds.cataloggen.config.DatasetFilter r0;
        thredds.catalog.InvDataset r2;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: thredds.cataloggen.config.DatasetFilter;

        r2 := @parameter0: thredds.catalog.InvDataset;

        $r1 = virtualinvoke r0.<thredds.cataloggen.config.DatasetFilter: thredds.cataloggen.config.DatasetSource getParentDatasetSource()>();

        $z0 = virtualinvoke $r1.<thredds.cataloggen.config.DatasetSource: boolean isCollection(thredds.catalog.InvDataset)>(r2);

        if $z0 == 0 goto label1;

        $z3 = r0.<thredds.cataloggen.config.DatasetFilter: boolean applyToCollectionDatasets>;

        if $z3 != 0 goto label1;

        return 0;

     label1:
        $r3 = virtualinvoke r0.<thredds.cataloggen.config.DatasetFilter: thredds.cataloggen.config.DatasetSource getParentDatasetSource()>();

        $z1 = virtualinvoke $r3.<thredds.cataloggen.config.DatasetSource: boolean isCollection(thredds.catalog.InvDataset)>(r2);

        if $z1 != 0 goto label2;

        $z2 = r0.<thredds.cataloggen.config.DatasetFilter: boolean applyToAtomicDatasets>;

        if $z2 != 0 goto label2;

        return 0;

     label2:
        return 1;
    }

    private boolean match(thredds.catalog.InvDataset)
    {
        thredds.cataloggen.config.DatasetFilter$Type $r8, $r23, $r24;
        java.util.regex.Matcher $r18, $r21;
        thredds.catalog.InvDataset r2;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, z7;
        thredds.cataloggen.config.DatasetSource $r1, $r3, $r22;
        java.lang.StringBuilder $r5, $r7, $r10, $r11;
        java.util.regex.Pattern $r16, $r19;
        thredds.cataloggen.config.DatasetFilter r0;
        java.lang.String $r4, $r9, $r12, $r13, $r14, $r17, $r20;
        java.io.PrintStream $r6;
        thredds.catalog.InvDatasetImpl $r15;

        r0 := @this: thredds.cataloggen.config.DatasetFilter;

        r2 := @parameter0: thredds.catalog.InvDataset;

        $r1 = virtualinvoke r0.<thredds.cataloggen.config.DatasetFilter: thredds.cataloggen.config.DatasetSource getParentDatasetSource()>();

        $z0 = virtualinvoke $r1.<thredds.cataloggen.config.DatasetSource: boolean isCollection(thredds.catalog.InvDataset)>(r2);

        if $z0 == 0 goto label1;

        $z6 = r0.<thredds.cataloggen.config.DatasetFilter: boolean applyToCollectionDatasets>;

        if $z6 != 0 goto label1;

        return 0;

     label1:
        $r3 = virtualinvoke r0.<thredds.cataloggen.config.DatasetFilter: thredds.cataloggen.config.DatasetSource getParentDatasetSource()>();

        $z1 = virtualinvoke $r3.<thredds.cataloggen.config.DatasetSource: boolean isCollection(thredds.catalog.InvDataset)>(r2);

        if $z1 != 0 goto label2;

        $z5 = r0.<thredds.cataloggen.config.DatasetFilter: boolean applyToAtomicDatasets>;

        if $z5 != 0 goto label2;

        return 0;

     label2:
        $r4 = r0.<thredds.cataloggen.config.DatasetFilter: java.lang.String matchPatternTarget>;

        if $r4 != null goto label4;

        $r22 = virtualinvoke r0.<thredds.cataloggen.config.DatasetFilter: thredds.cataloggen.config.DatasetSource getParentDatasetSource()>();

        $z4 = virtualinvoke $r22.<thredds.cataloggen.config.DatasetSource: boolean isCollection(thredds.catalog.InvDataset)>(r2);

        if $z4 == 0 goto label3;

        virtualinvoke r0.<thredds.cataloggen.config.DatasetFilter: void setMatchPatternTarget(java.lang.String)>("name");

        goto label4;

     label3:
        virtualinvoke r0.<thredds.cataloggen.config.DatasetFilter: void setMatchPatternTarget(java.lang.String)>("urlPath");

     label4:
        $r23 = r0.<thredds.cataloggen.config.DatasetFilter: thredds.cataloggen.config.DatasetFilter$Type type>;

        $r24 = <thredds.cataloggen.config.DatasetFilter$Type: thredds.cataloggen.config.DatasetFilter$Type REGULAR_EXPRESSION>;

        if $r23 != $r24 goto label8;

        $r13 = virtualinvoke r0.<thredds.cataloggen.config.DatasetFilter: java.lang.String getMatchPatternTarget()>();

        $z2 = virtualinvoke $r13.<java.lang.String: boolean equals(java.lang.Object)>("name");

        if $z2 == 0 goto label5;

        $r19 = r0.<thredds.cataloggen.config.DatasetFilter: java.util.regex.Pattern regExpPattern>;

        $r20 = virtualinvoke r2.<thredds.catalog.InvDataset: java.lang.String getName()>();

        $r21 = virtualinvoke $r19.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r20);

        z7 = virtualinvoke $r21.<java.util.regex.Matcher: boolean find()>();

        goto label7;

     label5:
        $r14 = virtualinvoke r0.<thredds.cataloggen.config.DatasetFilter: java.lang.String getMatchPatternTarget()>();

        $z3 = virtualinvoke $r14.<java.lang.String: boolean equals(java.lang.Object)>("urlPath");

        if $z3 == 0 goto label6;

        $r16 = r0.<thredds.cataloggen.config.DatasetFilter: java.util.regex.Pattern regExpPattern>;

        $r15 = (thredds.catalog.InvDatasetImpl) r2;

        $r17 = virtualinvoke $r15.<thredds.catalog.InvDatasetImpl: java.lang.String getUrlPath()>();

        $r18 = virtualinvoke $r16.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r17);

        z7 = virtualinvoke $r18.<java.util.regex.Matcher: boolean find()>();

        goto label7;

     label6:
        z7 = 0;

     label7:
        return z7;

     label8:
        $r6 = <java.lang.System: java.io.PrintStream err>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("WARNING -- DatasetFilter.accept(): unsupported type <");

        $r8 = r0.<thredds.cataloggen.config.DatasetFilter: thredds.cataloggen.config.DatasetFilter$Type type>;

        $r9 = virtualinvoke $r8.<thredds.cataloggen.config.DatasetFilter$Type: java.lang.String toString()>();

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">.");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r6.<java.io.PrintStream: void println(java.lang.String)>($r12);

        return 0;
    }

    public static boolean acceptDatasetByFilterGroup(java.util.List, thredds.catalog.InvDataset, boolean)
    {
        java.lang.NullPointerException $r5, $r6;
        thredds.cataloggen.config.DatasetFilter r4;
        thredds.catalog.InvDataset r1;
        boolean $z0, $z1, z2, $z3, $z4, $z5, $z6, $z7, z8, z9, z10;
        java.util.Iterator $r2;
        java.util.List r0;
        java.lang.Object $r3;

        r0 := @parameter0: java.util.List;

        r1 := @parameter1: thredds.catalog.InvDataset;

        z2 := @parameter2: boolean;

        if r0 != null goto label01;

        $r6 = new java.lang.NullPointerException;

        specialinvoke $r6.<java.lang.NullPointerException: void <init>(java.lang.String)>("Given null list of filters.");

        throw $r6;

     label01:
        if r1 != null goto label02;

        $r5 = new java.lang.NullPointerException;

        specialinvoke $r5.<java.lang.NullPointerException: void <init>(java.lang.String)>("Given null dataset.");

        throw $r5;

     label02:
        $z0 = interfaceinvoke r0.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label03;

        return 1;

     label03:
        z8 = 0;

        z9 = 0;

        z10 = 0;

        $r2 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label04:
        $z1 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label07;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (thredds.cataloggen.config.DatasetFilter) $r3;

        $z3 = virtualinvoke r4.<thredds.cataloggen.config.DatasetFilter: boolean isApplyToAtomicDatasets()>();

        z9 = z9 | $z3;

        $z4 = virtualinvoke r4.<thredds.cataloggen.config.DatasetFilter: boolean isApplyToCollectionDatasets()>();

        z10 = z10 | $z4;

        $z5 = virtualinvoke r4.<thredds.cataloggen.config.DatasetFilter: boolean isAcceptMatchingDatasets()>();

        if $z5 == 0 goto label05;

        $z7 = virtualinvoke r4.<thredds.cataloggen.config.DatasetFilter: boolean accept(thredds.catalog.InvDataset)>(r1);

        if $z7 == 0 goto label06;

        z8 = 1;

        goto label06;

     label05:
        $z6 = virtualinvoke r4.<thredds.cataloggen.config.DatasetFilter: boolean reject(thredds.catalog.InvDataset)>(r1);

        if $z6 == 0 goto label06;

        return 0;

     label06:
        goto label04;

     label07:
        if z8 == 0 goto label08;

        return 1;

     label08:
        if z2 == 0 goto label09;

        if z10 != 0 goto label10;

        return 1;

     label09:
        if z9 != 0 goto label10;

        return 1;

     label10:
        return 0;
    }
}
