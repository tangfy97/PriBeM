class org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree extends java.lang.Object
{
    private final org.waveprotocol.wave.model.util.CollectionFactory factory;
    private final org.waveprotocol.wave.model.util.StringSet knownKeys;
    private org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node sentinel;
    private final java.lang.Object oneValue;
    private final java.lang.Object anotherValue;
    private java.util.List leavesThatHaveBecomeEmpty;
    private int nextId;
    static final boolean $assertionsDisabled;

    private int createNodeId()
    {
        int $i0, $i1;
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree r0;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree;

        $i0 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: int nextId>;

        $i1 = $i0 + 1;

        r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: int nextId> = $i1;

        return $i0;
    }

    private org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node newLeaf(int)
    {
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$NodeType $r3;
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node $r0;
        int i0;
        org.waveprotocol.wave.model.util.StringMap $r4;
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree r1;
        org.waveprotocol.wave.model.util.CollectionFactory $r2;

        r1 := @this: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree;

        i0 := @parameter0: int;

        $r0 = new org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node;

        $r3 = <org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$NodeType: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$NodeType LEAF_BLACK>;

        $r2 = r1.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: org.waveprotocol.wave.model.util.CollectionFactory factory>;

        $r4 = interfaceinvoke $r2.<org.waveprotocol.wave.model.util.CollectionFactory: org.waveprotocol.wave.model.util.StringMap createStringMap()>();

        specialinvoke $r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: void <init>(org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree,org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$NodeType,int,org.waveprotocol.wave.model.util.StringMap,org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$1)>(r1, $r3, i0, $r4, null);

        return $r0;
    }

    private org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node newInternalNode(int)
    {
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$NodeType $r3;
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node $r0;
        int i0;
        org.waveprotocol.wave.model.util.StringMap $r4;
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree r1;
        org.waveprotocol.wave.model.util.CollectionFactory $r2;

        r1 := @this: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree;

        i0 := @parameter0: int;

        $r0 = new org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node;

        $r3 = <org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$NodeType: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$NodeType INTERNAL_BLACK>;

        $r2 = r1.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: org.waveprotocol.wave.model.util.CollectionFactory factory>;

        $r4 = interfaceinvoke $r2.<org.waveprotocol.wave.model.util.CollectionFactory: org.waveprotocol.wave.model.util.StringMap createStringMap()>();

        specialinvoke $r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: void <init>(org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree,org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$NodeType,int,org.waveprotocol.wave.model.util.StringMap,org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$1)>(r1, $r3, i0, $r4, null);

        return $r0;
    }

    private org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node newInternalNode(int, org.waveprotocol.wave.model.util.StringMap)
    {
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$NodeType $r3;
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node $r0;
        int i0;
        org.waveprotocol.wave.model.util.StringMap r2;
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree r1;

        r1 := @this: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree;

        i0 := @parameter0: int;

        r2 := @parameter1: org.waveprotocol.wave.model.util.StringMap;

        $r0 = new org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node;

        $r3 = <org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$NodeType: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$NodeType INTERNAL_BLACK>;

        specialinvoke $r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: void <init>(org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree,org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$NodeType,int,org.waveprotocol.wave.model.util.StringMap,org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$1)>(r1, $r3, i0, r2, null);

        return $r0;
    }

    private void prepareMapsBeforeSingleRotation(org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node, org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node, org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node, org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node, org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node)
    {
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node r1, r2, r3, r4, r5;
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree r0;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree;

        r1 := @parameter0: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node;

        r2 := @parameter1: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node;

        r3 := @parameter2: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node;

        r4 := @parameter3: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node;

        r5 := @parameter4: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node;

        return;
    }

    private void fixupMapsAfterSingleRotation(org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node, org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node, org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node, org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node, org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node)
    {
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$1 $r13;
        org.waveprotocol.wave.model.util.StringMap r1, r3, r5, r7, r9, $r12;
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node r0, r2, r4, r6, r8;
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$2 $r14;
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree r10;
        org.waveprotocol.wave.model.util.CollectionFactory $r11;

        r10 := @this: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree;

        r0 := @parameter0: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node;

        r2 := @parameter1: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node;

        r4 := @parameter2: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node;

        r6 := @parameter3: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node;

        r8 := @parameter4: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node;

        r1 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.util.StringMap localMap>;

        r3 = r2.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.util.StringMap localMap>;

        r5 = r4.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.util.StringMap localMap>;

        r7 = r6.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.util.StringMap localMap>;

        r9 = r8.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.util.StringMap localMap>;

        $r11 = r10.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: org.waveprotocol.wave.model.util.CollectionFactory factory>;

        $r12 = interfaceinvoke $r11.<org.waveprotocol.wave.model.util.CollectionFactory: org.waveprotocol.wave.model.util.StringMap createStringMap()>();

        $r13 = new org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$1;

        specialinvoke $r13.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$1: void <init>(org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree,org.waveprotocol.wave.model.util.StringMap,org.waveprotocol.wave.model.util.StringMap)>(r10, r3, $r12);

        interfaceinvoke r7.<org.waveprotocol.wave.model.util.StringMap: void filter(org.waveprotocol.wave.model.util.StringMap$EntryFilter)>($r13);

        $r14 = new org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$2;

        specialinvoke $r14.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$2: void <init>(org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree,org.waveprotocol.wave.model.util.StringMap,org.waveprotocol.wave.model.util.StringMap,org.waveprotocol.wave.model.util.StringMap,org.waveprotocol.wave.model.util.StringMap)>(r10, r3, $r12, r7, r9);

        interfaceinvoke r5.<org.waveprotocol.wave.model.util.StringMap: void each(org.waveprotocol.wave.model.util.ReadableStringMap$ProcV)>($r14);

        r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.util.StringMap localMap> = $r12;

        r4.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.util.StringMap localMap> = r1;

        return;
    }

    private org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node root()
    {
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node $r1, $r2;
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree r0;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree;

        $r1 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node sentinel>;

        $r2 = $r1.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node left>;

        return $r2;
    }

    public void <init>(java.lang.Object, java.lang.Object)
    {
        org.waveprotocol.wave.model.util.StringSet $r4;
        java.lang.Object r5, r6;
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree r0;
        org.waveprotocol.wave.model.util.CollectionFactory $r1, $r3;
        java.util.ArrayList $r2;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree;

        r5 := @parameter0: java.lang.Object;

        r6 := @parameter1: java.lang.Object;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: org.waveprotocol.wave.model.util.CollectionFactory getCollectionFactory()>();

        r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: org.waveprotocol.wave.model.util.CollectionFactory factory> = $r1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: java.util.List leavesThatHaveBecomeEmpty> = $r2;

        r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: int nextId> = 0;

        $r3 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: org.waveprotocol.wave.model.util.CollectionFactory factory>;

        $r4 = interfaceinvoke $r3.<org.waveprotocol.wave.model.util.CollectionFactory: org.waveprotocol.wave.model.util.StringSet createStringSet()>();

        r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: org.waveprotocol.wave.model.util.StringSet knownKeys> = $r4;

        r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: java.lang.Object oneValue> = r5;

        r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: java.lang.Object anotherValue> = r6;

        specialinvoke r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: void clear()>();

        return;
    }

    private void clear()
    {
        org.waveprotocol.wave.model.util.StringSet $r10;
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9;
        int $i1;
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree r0;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree;

        $r1 = specialinvoke r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node newLeaf(int)>(1);

        $i1 = (int) -1;

        $r2 = specialinvoke r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node newInternalNode(int)>($i1);

        r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node sentinel> = $r2;

        $r3 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node sentinel>;

        $r3.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node left> = $r1;

        $r4 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node sentinel>;

        $r1.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node parent> = $r4;

        $r5 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node sentinel>;

        $r6 = specialinvoke r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node newLeaf(int)>(0);

        $r5.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node right> = $r6;

        $r7 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node sentinel>;

        $r9 = $r7.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node right>;

        $r8 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node sentinel>;

        $r9.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node parent> = $r8;

        $r10 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: org.waveprotocol.wave.model.util.StringSet knownKeys>;

        interfaceinvoke $r10.<org.waveprotocol.wave.model.util.StringSet: void clear()>();

        return;
    }

    public int length()
    {
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node $r1;
        int $i0, $i1;
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree r0;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree;

        $r1 = specialinvoke r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node root()>();

        $i0 = $r1.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: int subtreeLength>;

        $i1 = $i0 - 1;

        return $i1;
    }

    public org.waveprotocol.wave.model.util.ReadableStringSet knownKeys()
    {
        org.waveprotocol.wave.model.util.StringSet $r1;
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree r0;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree;

        $r1 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: org.waveprotocol.wave.model.util.StringSet knownKeys>;

        return $r1;
    }

    private java.lang.Object getAnnotationRaw(int, java.lang.String)
    {
        org.waveprotocol.wave.model.util.StringMap $r2, $r5;
        java.lang.AssertionError $r4;
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node $r3, r7;
        int $i0, i1;
        java.lang.Object $r6;
        java.lang.String r1;
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree r0;
        boolean $z0, $z1, $z2;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree;

        i1 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        r7 = specialinvoke r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node root()>();

     label1:
        $r2 = r7.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.util.StringMap localMap>;

        $z0 = interfaceinvoke $r2.<org.waveprotocol.wave.model.util.StringMap: boolean containsKey(java.lang.String)>(r1);

        if $z0 == 0 goto label2;

        $r5 = r7.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.util.StringMap localMap>;

        $r6 = interfaceinvoke $r5.<org.waveprotocol.wave.model.util.StringMap: java.lang.Object getExisting(java.lang.String)>(r1);

        return $r6;

     label2:
        $z1 = <org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: boolean $assertionsDisabled>;

        if $z1 != 0 goto label3;

        $z2 = virtualinvoke r7.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: boolean isLeaf()>();

        if $z2 == 0 goto label3;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label3:
        $r3 = r7.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node left>;

        $i0 = $r3.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: int subtreeLength>;

        if i1 >= $i0 goto label4;

        r7 = r7.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node left>;

        goto label5;

     label4:
        i1 = i1 - $i0;

        r7 = r7.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node right>;

     label5:
        goto label1;
    }

    public java.lang.Object getAnnotation(int, java.lang.String)
    {
        org.waveprotocol.wave.model.util.StringSet $r2;
        java.lang.AssertionError $r4, $r5;
        int i0, $i1, $i2;
        java.lang.Object $r3;
        java.lang.String r1;
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree r0;
        boolean $z0, $z1, $z2;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        $z0 = <org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if 0 <= i0 goto label1;

        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();

        throw $r5;

     label1:
        $z1 = <org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        $i2 = virtualinvoke r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: int length()>();

        if i0 < $i2 goto label2;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label2:
        $r2 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: org.waveprotocol.wave.model.util.StringSet knownKeys>;

        $z2 = interfaceinvoke $r2.<org.waveprotocol.wave.model.util.StringSet: boolean contains(java.lang.String)>(r1);

        if $z2 != 0 goto label3;

        return null;

     label3:
        $i1 = i0 + 1;

        $r3 = specialinvoke r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: java.lang.Object getAnnotationRaw(int,java.lang.String)>($i1, r1);

        return $r3;
    }

    private void forEachAnnotationAtRaw(int, org.waveprotocol.wave.model.util.ReadableStringMap$ProcV)
    {
        org.waveprotocol.wave.model.util.StringMap $r2;
        org.waveprotocol.wave.model.util.ReadableStringMap$ProcV r1;
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node $r3, r4;
        int i0, i1, $i2, i3;
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree;

        i1 := @parameter0: int;

        r1 := @parameter1: org.waveprotocol.wave.model.util.ReadableStringMap$ProcV;

        r4 = specialinvoke r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node root()>();

        i3 = 0;

     label1:
        $r2 = r4.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.util.StringMap localMap>;

        interfaceinvoke $r2.<org.waveprotocol.wave.model.util.StringMap: void each(org.waveprotocol.wave.model.util.ReadableStringMap$ProcV)>(r1);

        $z0 = virtualinvoke r4.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: boolean isLeaf()>();

        if $z0 == 0 goto label2;

        goto label5;

     label2:
        $r3 = r4.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node left>;

        i0 = $r3.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: int subtreeLength>;

        $i2 = i3 + i0;

        if i1 >= $i2 goto label3;

        r4 = r4.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node left>;

        goto label4;

     label3:
        r4 = r4.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node right>;

        i3 = i3 + i0;

     label4:
        goto label1;

     label5:
        return;
    }

    public void forEachAnnotationAt(int, org.waveprotocol.wave.model.util.ReadableStringMap$ProcV)
    {
        org.waveprotocol.wave.model.util.ReadableStringMap$ProcV r1;
        int i0, $i1;
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree r0;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree;

        i0 := @parameter0: int;

        r1 := @parameter1: org.waveprotocol.wave.model.util.ReadableStringMap$ProcV;

        $i1 = i0 + 1;

        specialinvoke r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: void forEachAnnotationAtRaw(int,org.waveprotocol.wave.model.util.ReadableStringMap$ProcV)>($i1, r1);

        return;
    }

    private void collectAllAnnotationsAtRaw(int, org.waveprotocol.wave.model.util.StringMap)
    {
        org.waveprotocol.wave.model.util.StringMap r1, $r2;
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node $r3, r4;
        int i0, i1, $i2, i3;
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree;

        i1 := @parameter0: int;

        r1 := @parameter1: org.waveprotocol.wave.model.util.StringMap;

        r4 = specialinvoke r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node root()>();

        i3 = 0;

     label1:
        $r2 = r4.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.util.StringMap localMap>;

        interfaceinvoke r1.<org.waveprotocol.wave.model.util.StringMap: void putAll(org.waveprotocol.wave.model.util.ReadableStringMap)>($r2);

        $z0 = virtualinvoke r4.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: boolean isLeaf()>();

        if $z0 == 0 goto label2;

        goto label5;

     label2:
        $r3 = r4.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node left>;

        i0 = $r3.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: int subtreeLength>;

        $i2 = i3 + i0;

        if i1 >= $i2 goto label3;

        r4 = r4.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node left>;

        goto label4;

     label3:
        r4 = r4.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node right>;

        i3 = i3 + i0;

     label4:
        goto label1;

     label5:
        return;
    }

    public void collectAllAnnotationsAt(int, org.waveprotocol.wave.model.util.StringMap)
    {
        int i0, $i1;
        org.waveprotocol.wave.model.util.StringMap r1;
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree r0;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree;

        i0 := @parameter0: int;

        r1 := @parameter1: org.waveprotocol.wave.model.util.StringMap;

        $i1 = i0 + 1;

        specialinvoke r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: void collectAllAnnotationsAtRaw(int,org.waveprotocol.wave.model.util.StringMap)>($i1, r1);

        return;
    }

    private void insertRaw(int, int)
    {
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node $r1, $r2, r3;
        int i0, i1, $i2, $i3, $i4, i5, $i6, $i7;
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree;

        i1 := @parameter0: int;

        i0 := @parameter1: int;

        r3 = specialinvoke r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node root()>();

        i5 = 0;

     label1:
        $i6 = r3.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: int subtreeLength>;

        $i7 = $i6 + i0;

        r3.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: int subtreeLength> = $i7;

        $z0 = virtualinvoke r3.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: boolean isLeaf()>();

        if $z0 == 0 goto label2;

        return;

     label2:
        $r1 = r3.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node left>;

        $i2 = $r1.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: int subtreeLength>;

        $i3 = i5 + $i2;

        if i1 > $i3 goto label3;

        r3 = r3.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node left>;

        goto label1;

     label3:
        $r2 = r3.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node left>;

        $i4 = $r2.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: int subtreeLength>;

        i5 = i5 + $i4;

        r3 = r3.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node right>;

        goto label1;
    }

    private void deleteRaw(int, int)
    {
        java.lang.AssertionError $r7, $r8;
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node $r1, $r2, $r3, $r4, $r5, r9;
        int $i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, i14, i15;
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree r0;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.util.List $r6;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree;

        i2 := @parameter0: int;

        i14 := @parameter1: int;

        r9 = specialinvoke r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node root()>();

        i15 = 0;

     label1:
        if i14 > i15 goto label2;

        return;

     label2:
        $i0 = r9.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: int subtreeLength>;

        i1 = i15 + $i0;

        $z0 = <org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: boolean $assertionsDisabled>;

        if $z0 != 0 goto label3;

        if i2 < i1 goto label3;

        $r8 = new java.lang.AssertionError;

        specialinvoke $r8.<java.lang.AssertionError: void <init>()>();

        throw $r8;

     label3:
        $i3 = staticinvoke <java.lang.Math: int max(int,int)>(i15, i2);

        $i4 = staticinvoke <java.lang.Math: int min(int,int)>(i1, i14);

        $i13 = $i4 - $i3;

        $z1 = <org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: boolean $assertionsDisabled>;

        if $z1 != 0 goto label4;

        if $i13 > 0 goto label4;

        $r7 = new java.lang.AssertionError;

        specialinvoke $r7.<java.lang.AssertionError: void <init>()>();

        throw $r7;

     label4:
        $i5 = r9.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: int subtreeLength>;

        $i6 = $i5 - $i13;

        r9.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: int subtreeLength> = $i6;

        $z2 = virtualinvoke r9.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: boolean isLeaf()>();

        if $z2 == 0 goto label5;

        i14 = i14 - $i13;

        $i10 = r9.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: int subtreeLength>;

        if $i10 != 0 goto label7;

        $r6 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: java.util.List leavesThatHaveBecomeEmpty>;

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>(r9);

        goto label7;

     label5:
        $r1 = r9.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node left>;

        $i7 = $r1.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: int subtreeLength>;

        $i8 = i15 + $i7;

        if i2 >= $i8 goto label6;

        r9 = r9.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node left>;

        goto label1;

     label6:
        $r2 = r9.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node left>;

        $i9 = $r2.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: int subtreeLength>;

        i15 = i15 + $i9;

        r9 = r9.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node right>;

        goto label1;

     label7:
        $z4 = virtualinvoke r9.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: boolean isLeftChild()>();

        if $z4 == 0 goto label8;

        $i12 = r9.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: int subtreeLength>;

        i15 = i15 + $i12;

        $r5 = r9.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node parent>;

        r9 = $r5.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node right>;

        goto label1;

     label8:
        $r3 = r9.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node parent>;

        $r4 = $r3.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node left>;

        $i11 = $r4.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: int subtreeLength>;

        i15 = i15 - $i11;

        r9 = r9.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node parent>;

        $z3 = virtualinvoke r9.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: boolean isRoot()>();

        if $z3 == 0 goto label7;

        return;
    }

    private int setAnnotationRaw(int, int, java.lang.String, java.lang.Object)
    {
        org.waveprotocol.wave.model.util.StringMap $r2, $r3, $r11, $r13;
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node $r4, $r5, $r8, $r9, $r10, $r12, r15;
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree r0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        java.lang.AssertionError $r16;
        int i0, $i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, i14, $i16, $i18, $i20;
        java.lang.String r1;
        java.lang.Object r6, $r14;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree;

        i2 := @parameter0: int;

        i0 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        r6 := @parameter3: java.lang.Object;

        r15 = specialinvoke r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node root()>();

        i14 = 0;

     label01:
        if i0 > i14 goto label02;

        $i16 = (int) -1;

        return $i16;

     label02:
        $r2 = r15.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.util.StringMap localMap>;

        $z0 = interfaceinvoke $r2.<org.waveprotocol.wave.model.util.StringMap: boolean containsKey(java.lang.String)>(r1);

        if $z0 == 0 goto label03;

        $r13 = r15.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.util.StringMap localMap>;

        $r14 = interfaceinvoke $r13.<org.waveprotocol.wave.model.util.StringMap: java.lang.Object getExisting(java.lang.String)>(r1);

        $z6 = staticinvoke <org.waveprotocol.wave.model.util.ValueUtils: boolean equal(java.lang.Object,java.lang.Object)>($r14, r6);

        if $z6 != 0 goto label11;

     label03:
        $i1 = r15.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: int subtreeLength>;

        $i13 = i14 + $i1;

        if i2 > i14 goto label04;

        if i0 < $i13 goto label04;

        virtualinvoke r15.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: void eraseAnnotations(int,java.lang.String)>(i14, r1);

        $r11 = r15.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.util.StringMap localMap>;

        interfaceinvoke $r11.<org.waveprotocol.wave.model.util.StringMap: void put(java.lang.String,java.lang.Object)>(r1, r6);

        $r12 = r15.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node parent>;

        $z5 = virtualinvoke $r12.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: boolean tryToPropagateFromChildren(java.lang.String)>(r1);

        if $z5 == 0 goto label11;

        $i11 = r15.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: int subtreeLength>;

        $i12 = i14 + $i11;

        return $i12;

     label04:
        $z1 = virtualinvoke r15.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: boolean isLeaf()>();

        if $z1 == 0 goto label08;

        $i7 = i2 - i14;

        $i6 = i0 - i14;

        $i8 = virtualinvoke r15.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: int setAnnotationForLeaf(int,int,int,java.lang.String,java.lang.Object)>(i14, $i7, $i6, r1, r6);

        $i18 = (int) -1;

        if $i8 != $i18 goto label05;

        goto label07;

     label05:
        $z3 = <org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: boolean $assertionsDisabled>;

        if $z3 != 0 goto label06;

        if $i8 > 0 goto label06;

        $r16 = new java.lang.AssertionError;

        specialinvoke $r16.<java.lang.AssertionError: void <init>()>();

        throw $r16;

     label06:
        return $i8;

     label07:
        goto label11;

     label08:
        $r3 = r15.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.util.StringMap localMap>;

        $z2 = interfaceinvoke $r3.<org.waveprotocol.wave.model.util.StringMap: boolean containsKey(java.lang.String)>(r1);

        if $z2 == 0 goto label09;

        virtualinvoke r15.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: void pushKeyIntoChildren(java.lang.String)>(r1);

     label09:
        $r4 = r15.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node left>;

        $i3 = $r4.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: int subtreeLength>;

        $i4 = i14 + $i3;

        if i2 >= $i4 goto label10;

        r15 = r15.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node left>;

        goto label01;

     label10:
        $r5 = r15.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node left>;

        $i5 = $r5.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: int subtreeLength>;

        i14 = i14 + $i5;

        r15 = r15.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node right>;

        goto label01;

     label11:
        $z7 = virtualinvoke r15.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: boolean isLeftChild()>();

        if $z7 == 0 goto label12;

        $i10 = r15.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: int subtreeLength>;

        i14 = i14 + $i10;

        $r10 = r15.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node parent>;

        r15 = $r10.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node right>;

        goto label01;

     label12:
        $r8 = r15.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node parent>;

        $r9 = $r8.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node left>;

        $i9 = $r9.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: int subtreeLength>;

        i14 = i14 - $i9;

        r15 = r15.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node parent>;

        $z4 = virtualinvoke r15.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: boolean isRoot()>();

        if $z4 == 0 goto label11;

        $i20 = (int) -1;

        return $i20;
    }

    public void setAnnotation(int, int, java.lang.String, java.lang.Object)
    {
        org.waveprotocol.wave.model.util.StringSet $r2, $r6;
        org.waveprotocol.wave.model.util.StringMap $r5;
        java.lang.AssertionError $r10, $r11, $r12;
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node $r4;
        int i0, i1, $i2, $i3, i4, $i5, $i7;
        java.lang.String r1;
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree r0;
        boolean $z0, $z1, $z2, $z3;
        java.lang.Object r3;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.Object;

        $z0 = <org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if 0 <= i0 goto label1;

        $r10 = new java.lang.AssertionError;

        specialinvoke $r10.<java.lang.AssertionError: void <init>()>();

        throw $r10;

     label1:
        $z1 = <org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        if i0 <= i1 goto label2;

        $r11 = new java.lang.AssertionError;

        specialinvoke $r11.<java.lang.AssertionError: void <init>()>();

        throw $r11;

     label2:
        $z2 = <org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: boolean $assertionsDisabled>;

        if $z2 != 0 goto label3;

        $i3 = virtualinvoke r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: int length()>();

        if i1 <= $i3 goto label3;

        $r12 = new java.lang.AssertionError;

        specialinvoke $r12.<java.lang.AssertionError: void <init>()>();

        throw $r12;

     label3:
        if i0 < i1 goto label4;

        return;

     label4:
        $r2 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: org.waveprotocol.wave.model.util.StringSet knownKeys>;

        $z3 = interfaceinvoke $r2.<org.waveprotocol.wave.model.util.StringSet: boolean contains(java.lang.String)>(r1);

        if $z3 != 0 goto label5;

        $r4 = specialinvoke r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node root()>();

        $r5 = $r4.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.util.StringMap localMap>;

        interfaceinvoke $r5.<org.waveprotocol.wave.model.util.StringMap: void put(java.lang.String,java.lang.Object)>(r1, null);

        $r6 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: org.waveprotocol.wave.model.util.StringSet knownKeys>;

        interfaceinvoke $r6.<org.waveprotocol.wave.model.util.StringSet: void add(java.lang.String)>(r1);

     label5:
        i4 = i0 + 1;

        $i2 = i1 + 1;

     label6:
        $i5 = specialinvoke r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: int setAnnotationRaw(int,int,java.lang.String,java.lang.Object)>(i4, $i2, r1, r3);

        i4 = $i5;

        $i7 = (int) -1;

        if $i5 != $i7 goto label6;

        specialinvoke r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: void cleanupLeavesThatHaveBecomeEmpty()>();

        return;
    }

    public void cleanupKnownKeys()
    {
        org.waveprotocol.wave.model.util.StringSet $r2;
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$3 $r1;
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree r0;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree;

        $r2 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: org.waveprotocol.wave.model.util.StringSet knownKeys>;

        $r1 = new org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$3;

        specialinvoke $r1.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$3: void <init>(org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree)>(r0);

        interfaceinvoke $r2.<org.waveprotocol.wave.model.util.StringSet: void filter(org.waveprotocol.wave.model.util.StringSet$StringPredicate)>($r1);

        return;
    }

    private int firstAnnotationChangeRaw(int, int, java.lang.String, java.lang.Object)
    {
        org.waveprotocol.wave.model.util.StringMap $r2, $r11;
        java.lang.NullPointerException $r20;
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node $r9, $r14, $r15, $r16, r17;
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree r0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.lang.StringBuilder $r5, $r7, $r19;
        java.lang.AssertionError $r18;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, $i10, $i12, $i14;
        java.lang.String r1, $r6, $r8;
        java.lang.Object $r12, r13;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree;

        i1 := @parameter0: int;

        i0 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        r13 := @parameter3: java.lang.Object;

        r17 = specialinvoke r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node root()>();

        i8 = 0;

     label01:
        if i8 < i0 goto label02;

        $i10 = (int) -1;

        return $i10;

     label02:
        $r2 = r17.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.util.StringMap localMap>;

        $z0 = interfaceinvoke $r2.<org.waveprotocol.wave.model.util.StringMap: boolean containsKey(java.lang.String)>(r1);

        if $z0 == 0 goto label06;

        $r11 = r17.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.util.StringMap localMap>;

        $r12 = interfaceinvoke $r11.<org.waveprotocol.wave.model.util.StringMap: java.lang.Object getExisting(java.lang.String)>(r1);

        $z3 = staticinvoke <org.waveprotocol.wave.model.util.ValueUtils: boolean equal(java.lang.Object,java.lang.Object)>($r12, r13);

        if $z3 != 0 goto label03;

        $i7 = staticinvoke <java.lang.Math: int max(int,int)>(i8, i1);

        return $i7;

     label03:
        $z4 = virtualinvoke r17.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: boolean isRoot()>();

        if $z4 == 0 goto label04;

        $i12 = (int) -1;

        return $i12;

     label04:
        $z5 = virtualinvoke r17.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: boolean isLeftChild()>();

        if $z5 == 0 goto label05;

        $i6 = r17.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: int subtreeLength>;

        i8 = i8 + $i6;

        $r16 = r17.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node parent>;

        r17 = $r16.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node right>;

        goto label01;

     label05:
        $r14 = r17.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node parent>;

        $r15 = $r14.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node left>;

        $i5 = $r15.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: int subtreeLength>;

        i8 = i8 - $i5;

        r17 = r17.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node parent>;

        $z6 = virtualinvoke r17.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: boolean isRoot()>();

        if $z6 == 0 goto label04;

        $i14 = (int) -1;

        return $i14;

     label06:
        $z1 = <org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: boolean $assertionsDisabled>;

        if $z1 != 0 goto label07;

        $z2 = virtualinvoke r17.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: boolean isLeaf()>();

        if $z2 == 0 goto label07;

        $r18 = new java.lang.AssertionError;

        specialinvoke $r18.<java.lang.AssertionError: void <init>()>();

        throw $r18;

     label07:
        $r9 = r17.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node left>;

        if $r9 != null goto label08;

        $r20 = new java.lang.NullPointerException;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected null leftNode:\n");

        $r6 = virtualinvoke r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: java.lang.String toStringForDebugging()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r20.<java.lang.NullPointerException: void <init>(java.lang.String)>($r8);

        throw $r20;

     label08:
        $i2 = $r9.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: int subtreeLength>;

        $i3 = i8 + $i2;

        if i1 < $i3 goto label09;

        $i4 = $r9.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: int subtreeLength>;

        i8 = i8 + $i4;

        r17 = r17.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node right>;

        goto label10;

     label09:
        r17 = r17.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node left>;

     label10:
        goto label01;
    }

    private int lastAnnotationChangeRaw(int, int, java.lang.String, java.lang.Object)
    {
        org.waveprotocol.wave.model.util.StringMap $r3, $r6;
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node $r1, $r4, $r9, $r10, $r11, r12;
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree r0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.lang.AssertionError $r13;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, $i10, $i12, $i14;
        java.lang.String r2;
        java.lang.Object $r7, r8;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r2 := @parameter2: java.lang.String;

        r8 := @parameter3: java.lang.Object;

        $r1 = specialinvoke r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node root()>();

        r12 = $r1;

        i8 = $r1.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: int subtreeLength>;

     label1:
        if i8 > i0 goto label2;

        $i10 = (int) -1;

        return $i10;

     label2:
        $r3 = r12.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.util.StringMap localMap>;

        $z0 = interfaceinvoke $r3.<org.waveprotocol.wave.model.util.StringMap: boolean containsKey(java.lang.String)>(r2);

        if $z0 == 0 goto label6;

        $r6 = r12.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.util.StringMap localMap>;

        $r7 = interfaceinvoke $r6.<org.waveprotocol.wave.model.util.StringMap: java.lang.Object getExisting(java.lang.String)>(r2);

        $z3 = staticinvoke <org.waveprotocol.wave.model.util.ValueUtils: boolean equal(java.lang.Object,java.lang.Object)>($r7, r8);

        if $z3 != 0 goto label3;

        $i7 = staticinvoke <java.lang.Math: int min(int,int)>(i8, i1);

        return $i7;

     label3:
        $z4 = virtualinvoke r12.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: boolean isRoot()>();

        if $z4 == 0 goto label4;

        $i12 = (int) -1;

        return $i12;

     label4:
        $z5 = virtualinvoke r12.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: boolean isLeftChild()>();

        if $z5 != 0 goto label5;

        $i6 = r12.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: int subtreeLength>;

        i8 = i8 - $i6;

        $r11 = r12.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node parent>;

        r12 = $r11.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node left>;

        goto label1;

     label5:
        $r9 = r12.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node parent>;

        $r10 = $r9.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node right>;

        $i5 = $r10.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: int subtreeLength>;

        i8 = i8 + $i5;

        r12 = r12.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node parent>;

        $z6 = virtualinvoke r12.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: boolean isRoot()>();

        if $z6 == 0 goto label4;

        $i14 = (int) -1;

        return $i14;

     label6:
        $z1 = <org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: boolean $assertionsDisabled>;

        if $z1 != 0 goto label7;

        $z2 = virtualinvoke r12.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: boolean isLeaf()>();

        if $z2 == 0 goto label7;

        $r13 = new java.lang.AssertionError;

        specialinvoke $r13.<java.lang.AssertionError: void <init>()>();

        throw $r13;

     label7:
        $r4 = r12.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node right>;

        $i2 = $r4.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: int subtreeLength>;

        $i3 = i8 - $i2;

        if i1 > $i3 goto label8;

        $i4 = $r4.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: int subtreeLength>;

        i8 = i8 - $i4;

        r12 = r12.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node left>;

        goto label9;

     label8:
        r12 = r12.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node right>;

     label9:
        goto label1;
    }

    public int firstAnnotationChange(int, int, java.lang.String, java.lang.Object)
    {
        org.waveprotocol.wave.model.util.StringSet $r2;
        java.lang.AssertionError $r8, $r9, $r10, $r11;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i8, $i10, $i12, $i14;
        java.lang.String r1;
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree r0;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.Object r3;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.Object;

        $z0 = <org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if 0 <= i0 goto label1;

        $r8 = new java.lang.AssertionError;

        specialinvoke $r8.<java.lang.AssertionError: void <init>()>();

        throw $r8;

     label1:
        $z1 = <org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        if i0 <= i1 goto label2;

        $r9 = new java.lang.AssertionError;

        specialinvoke $r9.<java.lang.AssertionError: void <init>()>();

        throw $r9;

     label2:
        $z2 = <org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: boolean $assertionsDisabled>;

        if $z2 != 0 goto label3;

        $i6 = virtualinvoke r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: int length()>();

        if i1 <= $i6 goto label3;

        $r10 = new java.lang.AssertionError;

        specialinvoke $r10.<java.lang.AssertionError: void <init>()>();

        throw $r10;

     label3:
        if i0 < i1 goto label4;

        $i8 = (int) -1;

        return $i8;

     label4:
        $r2 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: org.waveprotocol.wave.model.util.StringSet knownKeys>;

        $z3 = interfaceinvoke $r2.<org.waveprotocol.wave.model.util.StringSet: boolean contains(java.lang.String)>(r1);

        if $z3 != 0 goto label6;

        if r3 != null goto label5;

        $i10 = (int) -1;

        return $i10;

     label5:
        return i0;

     label6:
        $i3 = i0 + 1;

        $i2 = i1 + 1;

        $i4 = specialinvoke r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: int firstAnnotationChangeRaw(int,int,java.lang.String,java.lang.Object)>($i3, $i2, r1, r3);

        $i12 = (int) -1;

        if $i4 != $i12 goto label7;

        $i14 = (int) -1;

        return $i14;

     label7:
        $z4 = <org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: boolean $assertionsDisabled>;

        if $z4 != 0 goto label8;

        if $i4 != 0 goto label8;

        $r11 = new java.lang.AssertionError;

        specialinvoke $r11.<java.lang.AssertionError: void <init>()>();

        throw $r11;

     label8:
        $i5 = $i4 - 1;

        return $i5;
    }

    public int lastAnnotationChange(int, int, java.lang.String, java.lang.Object)
    {
        org.waveprotocol.wave.model.util.StringSet $r2;
        java.lang.AssertionError $r8, $r9, $r10, $r11;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i8, $i10, $i12, $i14;
        java.lang.String r1;
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree r0;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.Object r3;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.Object;

        $z0 = <org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if 0 <= i0 goto label1;

        $r8 = new java.lang.AssertionError;

        specialinvoke $r8.<java.lang.AssertionError: void <init>()>();

        throw $r8;

     label1:
        $z1 = <org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        if i0 <= i1 goto label2;

        $r9 = new java.lang.AssertionError;

        specialinvoke $r9.<java.lang.AssertionError: void <init>()>();

        throw $r9;

     label2:
        $z2 = <org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: boolean $assertionsDisabled>;

        if $z2 != 0 goto label3;

        $i6 = virtualinvoke r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: int length()>();

        if i1 <= $i6 goto label3;

        $r10 = new java.lang.AssertionError;

        specialinvoke $r10.<java.lang.AssertionError: void <init>()>();

        throw $r10;

     label3:
        if i0 < i1 goto label4;

        $i8 = (int) -1;

        return $i8;

     label4:
        $r2 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: org.waveprotocol.wave.model.util.StringSet knownKeys>;

        $z3 = interfaceinvoke $r2.<org.waveprotocol.wave.model.util.StringSet: boolean contains(java.lang.String)>(r1);

        if $z3 != 0 goto label6;

        if r3 != null goto label5;

        $i10 = (int) -1;

        return $i10;

     label5:
        return i1;

     label6:
        $i3 = i0 + 1;

        $i2 = i1 + 1;

        $i4 = specialinvoke r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: int lastAnnotationChangeRaw(int,int,java.lang.String,java.lang.Object)>($i3, $i2, r1, r3);

        $i12 = (int) -1;

        if $i4 != $i12 goto label7;

        $i14 = (int) -1;

        return $i14;

     label7:
        $z4 = <org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: boolean $assertionsDisabled>;

        if $z4 != 0 goto label8;

        if $i4 != 0 goto label8;

        $r11 = new java.lang.AssertionError;

        specialinvoke $r11.<java.lang.AssertionError: void <init>()>();

        throw $r11;

     label8:
        $i5 = $i4 - 1;

        return $i5;
    }

    private void tryToPropagateFromDyingSubtree(org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node)
    {
        org.waveprotocol.wave.model.util.StringMap r1, $r2, $r4;
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node $r0, $r3, r6, r7;
        int $i0;
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree r5;

        r5 := @this: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree;

        r6 := @parameter0: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node;

        r7 = r6.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node parent>;

     label1:
        $i0 = r7.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: int subtreeLength>;

        if $i0 != 0 goto label2;

        r6 = r7;

        r7 = r7.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node parent>;

        goto label1;

     label2:
        $r0 = virtualinvoke r6.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node sibling()>();

        r1 = $r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.util.StringMap localMap>;

        $r2 = r7.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.util.StringMap localMap>;

        interfaceinvoke $r2.<org.waveprotocol.wave.model.util.StringMap: void putAll(org.waveprotocol.wave.model.util.ReadableStringMap)>(r1);

        $r3 = r7.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node parent>;

        virtualinvoke $r3.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: void tryToPropagateFromChildren(org.waveprotocol.wave.model.util.ReadableStringMap)>(r1);

        $r4 = $r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.util.StringMap localMap>;

        interfaceinvoke $r4.<org.waveprotocol.wave.model.util.StringMap: void clear()>();

        return;
    }

    private void cleanupLeavesThatHaveBecomeEmpty()
    {
        java.lang.AssertionError $r8, $r9;
        java.util.ArrayList $r3;
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node r6, $r7;
        int $i0;
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree r0;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.util.Iterator $r4;
        java.util.List $r1, r2;
        java.lang.Object $r5;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree;

     label1:
        $r1 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: java.util.List leavesThatHaveBecomeEmpty>;

        $z0 = interfaceinvoke $r1.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label6;

        r2 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: java.util.List leavesThatHaveBecomeEmpty>;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: java.util.List leavesThatHaveBecomeEmpty> = $r3;

        $r4 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label5;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node) $r5;

        $z2 = <org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: boolean $assertionsDisabled>;

        if $z2 != 0 goto label3;

        $i0 = r6.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: int subtreeLength>;

        if $i0 == 0 goto label3;

        $r9 = new java.lang.AssertionError;

        specialinvoke $r9.<java.lang.AssertionError: void <init>()>();

        throw $r9;

     label3:
        $z3 = <org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: boolean $assertionsDisabled>;

        if $z3 != 0 goto label4;

        $z4 = virtualinvoke r6.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: boolean isRoot()>();

        if $z4 == 0 goto label4;

        $r8 = new java.lang.AssertionError;

        specialinvoke $r8.<java.lang.AssertionError: void <init>()>();

        throw $r8;

     label4:
        specialinvoke r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: void tryToPropagateFromDyingSubtree(org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node)>(r6);

        $r7 = r6.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node parent>;

        virtualinvoke $r7.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: void tryToCollapse()>();

        goto label2;

     label5:
        goto label1;

     label6:
        return;
    }

    public void delete(int, int)
    {
        java.lang.AssertionError $r1, $r2, $r3;
        int i0, i1, $i2, $i3, $i4;
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree r0;
        boolean $z0, $z1, $z2;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $z0 = <org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if 0 <= i0 goto label1;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label1:
        $z1 = <org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        if i0 <= i1 goto label2;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label2:
        $z2 = <org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: boolean $assertionsDisabled>;

        if $z2 != 0 goto label3;

        $i4 = virtualinvoke r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: int length()>();

        if i1 <= $i4 goto label3;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label3:
        if i0 < i1 goto label4;

        return;

     label4:
        $i3 = i0 + 1;

        $i2 = i1 + 1;

        specialinvoke r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: void deleteRaw(int,int)>($i3, $i2);

        specialinvoke r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: void cleanupLeavesThatHaveBecomeEmpty()>();

        return;
    }

    public void insert(int, int)
    {
        int i0, i1, $i2, $i3;
        java.lang.AssertionError $r1;
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $z0 = <org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $i3 = virtualinvoke r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: int length()>();

        if i0 <= $i3 goto label1;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label1:
        $i2 = i0 + 1;

        specialinvoke r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: void insertRaw(int,int)>($i2, i1);

        return;
    }

    public java.lang.String toStringForDebugging()
    {
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node $r6, $r10;
        int $i0, $i1, $i2, $i4, $i5, $i6;
        java.lang.String $r9, $r11;
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree r3;
        char $c3;
        java.lang.StringBuilder $r2, $r4, $r5, $r7, $r8, $r12, $r13;

        r3 := @this: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("AnnotationTree, length ");

        $i0 = virtualinvoke r3.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: int length()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", sentinel=");

        $r6 = r3.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node sentinel>;

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":\n");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r10 = specialinvoke r3.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node root()>();

        virtualinvoke $r10.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: void printForDebugging(java.lang.StringBuilder)>($r12);

        $i1 = virtualinvoke $r12.<java.lang.StringBuilder: int length()>();

        $i2 = $i1 - 1;

        $c3 = virtualinvoke $r12.<java.lang.StringBuilder: char charAt(int)>($i2);

        $i6 = (int) $c3;

        if $i6 != 10 goto label1;

        $i4 = virtualinvoke $r12.<java.lang.StringBuilder: int length()>();

        $i5 = $i4 - 1;

        virtualinvoke $r12.<java.lang.StringBuilder: void setLength(int)>($i5);

     label1:
        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r11;
    }

    private java.lang.Object differentValue(java.lang.Object, java.lang.Object)
    {
        java.lang.AssertionError $r4;
        java.lang.Object r1, $r2, $r3, r5, $r6, $r7, $r8, $r9;
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree r0;
        boolean $z0, $z1, $z2, $z3, $z4;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree;

        r1 := @parameter0: java.lang.Object;

        r5 := @parameter1: java.lang.Object;

        $r2 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: java.lang.Object oneValue>;

        $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

        if $z0 != 0 goto label1;

        $r8 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: java.lang.Object oneValue>;

        $z4 = virtualinvoke $r8.<java.lang.Object: boolean equals(java.lang.Object)>(r5);

        if $z4 != 0 goto label1;

        $r9 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: java.lang.Object oneValue>;

        return $r9;

     label1:
        $r3 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: java.lang.Object anotherValue>;

        $z1 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

        if $z1 != 0 goto label2;

        $r6 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: java.lang.Object anotherValue>;

        $z3 = virtualinvoke $r6.<java.lang.Object: boolean equals(java.lang.Object)>(r5);

        if $z3 != 0 goto label2;

        $r7 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: java.lang.Object anotherValue>;

        return $r7;

     label2:
        $z2 = <org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: boolean $assertionsDisabled>;

        if $z2 != 0 goto label4;

        if r1 == null goto label3;

        if r5 != null goto label4;

     label3:
        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label4:
        return null;
    }

    private void checkState(boolean, java.lang.String, org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node)
    {
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node r2;
        java.lang.String r5, $r9, $r11, $r16;
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree r8;
        boolean z0;
        java.io.PrintStream $r13;
        java.lang.RuntimeException $r17;
        java.lang.StringBuilder $r0, $r1, $r3, $r4, $r6, $r7, $r10, $r12, $r14, $r15;

        r8 := @this: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree;

        z0 := @parameter0: boolean;

        r5 := @parameter1: java.lang.String;

        r2 := @parameter2: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node;

        if z0 != 0 goto label1;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Tree invariant check failed at node ");

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r9 = virtualinvoke r8.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: java.lang.String toStringForDebugging()>();

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        $r13 = <java.lang.System: java.io.PrintStream err>;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("*** ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r13.<java.io.PrintStream: void println(java.lang.String)>($r16);

        $r17 = new java.lang.RuntimeException;

        specialinvoke $r17.<java.lang.RuntimeException: void <init>(java.lang.String)>($r11);

        throw $r17;

     label1:
        return;
    }

    private void checkState(boolean)
    {
        java.io.PrintStream $r7;
        java.lang.RuntimeException $r11;
        java.lang.StringBuilder $r0, $r1, $r4, $r6, $r8, $r9;
        java.lang.String $r3, $r5, $r10;
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree r2;
        boolean z0;

        r2 := @this: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree;

        z0 := @parameter0: boolean;

        if z0 != 0 goto label1;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Tree invariant check failed\n");

        $r3 = virtualinvoke r2.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: java.lang.String toStringForDebugging()>();

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = <java.lang.System: java.io.PrintStream err>;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("*** ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r7.<java.io.PrintStream: void println(java.lang.String)>($r10);

        $r11 = new java.lang.RuntimeException;

        specialinvoke $r11.<java.lang.RuntimeException: void <init>(java.lang.String)>($r5);

        throw $r11;

     label1:
        return;
    }

    public void checkSomeInvariants()
    {
        java.util.List $r1;
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree;

        $r1 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: java.util.List leavesThatHaveBecomeEmpty>;

        $z0 = interfaceinvoke $r1.<java.util.List: boolean isEmpty()>();

        specialinvoke r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: void checkState(boolean)>($z0);

        specialinvoke r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: void checkSentinels()>();

        specialinvoke r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: void checkTreeStructure()>();

        specialinvoke r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: void checkBalancing()>();

        specialinvoke r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: void checkPropagationAndMerging()>();

        specialinvoke r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: void checkStaleness()>();

        specialinvoke r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: void checkKnownKeysSetEverywhere()>();

        return;
    }

    private void checkTreeStructure()
    {
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node $r1, $r2, $r3, $r4;
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree;

        $r1 = specialinvoke r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node root()>();

        $r3 = $r1.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node parent>;

        $r2 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node sentinel>;

        if $r3 != $r2 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        specialinvoke r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: void checkState(boolean)>($z0);

        $r4 = specialinvoke r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node root()>();

        virtualinvoke $r4.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: void checkTreeStructure()>();

        return;
    }

    private void checkBalancing()
    {
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node $r1, $r2;
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree r0;
        boolean $z0, $z1;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree;

        $r1 = specialinvoke r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node root()>();

        $z0 = virtualinvoke $r1.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: boolean isRed()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        specialinvoke r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: void checkState(boolean)>($z1);

        $r2 = specialinvoke r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node root()>();

        virtualinvoke $r2.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: int checkBalancingAndReturnBlackHeight()>();

        return;
    }

    private void checkPropagationAndMerging()
    {
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node $r1;
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree r0;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree;

        $r1 = specialinvoke r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node root()>();

        virtualinvoke $r1.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: void checkPropagationAndMerging()>();

        return;
    }

    private void checkStaleness()
    {
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node $r1;
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree r0;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree;

        $r1 = specialinvoke r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node root()>();

        virtualinvoke $r1.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: void checkNoStaleKeys()>();

        return;
    }

    private void checkSentinels()
    {
        org.waveprotocol.wave.model.util.StringSet $r11;
        org.waveprotocol.wave.model.util.StringMap $r7;
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node $r1, $r2, $r3, $r4, $r5, $r6, $r8, $r9;
        int $i0, $i1, $i2, $i4;
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree r0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$4 $r12;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree;

        $r1 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node sentinel>;

        $z0 = virtualinvoke $r1.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: boolean isRed()>();

        if $z0 != 0 goto label1;

        $z3 = 1;

        goto label2;

     label1:
        $z3 = 0;

     label2:
        specialinvoke r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: void checkState(boolean)>($z3);

        $r2 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node sentinel>;

        $r3 = $r2.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node right>;

        $z1 = virtualinvoke $r3.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: boolean isLeaf()>();

        specialinvoke r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: void checkState(boolean)>($z1);

        $r4 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node sentinel>;

        $r5 = $r4.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node right>;

        $i0 = $r5.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: int subtreeLength>;

        if $i0 != 0 goto label3;

        $z4 = 1;

        goto label4;

     label3:
        $z4 = 0;

     label4:
        specialinvoke r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: void checkState(boolean)>($z4);

        $r6 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node sentinel>;

        $r7 = $r6.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.util.StringMap localMap>;

        $z2 = interfaceinvoke $r7.<org.waveprotocol.wave.model.util.StringMap: boolean isEmpty()>();

        specialinvoke r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: void checkState(boolean)>($z2);

        $r8 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node sentinel>;

        $i1 = $r8.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: int subtreeLength>;

        $i4 = (int) -1;

        if $i1 != $i4 goto label5;

        $z5 = 1;

        goto label6;

     label5:
        $z5 = 0;

     label6:
        specialinvoke r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: void checkState(boolean)>($z5);

        $r9 = specialinvoke r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node root()>();

        $i2 = $r9.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: int subtreeLength>;

        if $i2 < 1 goto label7;

        $z6 = 1;

        goto label8;

     label7:
        $z6 = 0;

     label8:
        specialinvoke r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: void checkState(boolean)>($z6);

        $r11 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: org.waveprotocol.wave.model.util.StringSet knownKeys>;

        $r12 = new org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$4;

        specialinvoke $r12.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$4: void <init>(org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree)>(r0);

        interfaceinvoke $r11.<org.waveprotocol.wave.model.util.StringSet: void each(org.waveprotocol.wave.model.util.ReadableStringSet$Proc)>($r12);

        return;
    }

    private void checkKnownKeysSetEverywhere()
    {
        org.waveprotocol.wave.model.util.StringSet $r2;
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree r0;
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$5 $r1;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree;

        $r2 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: org.waveprotocol.wave.model.util.StringSet knownKeys>;

        $r1 = new org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$5;

        specialinvoke $r1.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$5: void <init>(org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree)>(r0);

        interfaceinvoke $r2.<org.waveprotocol.wave.model.util.StringSet: void each(org.waveprotocol.wave.model.util.ReadableStringSet$Proc)>($r1);

        return;
    }

    private java.lang.String mapToString(org.waveprotocol.wave.model.util.StringMap)
    {
        boolean[] $r1;
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$6 $r3;
        java.lang.StringBuilder $r0;
        org.waveprotocol.wave.model.util.StringMap r2;
        java.lang.String $r5;
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree r4;

        r4 := @this: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree;

        r2 := @parameter0: org.waveprotocol.wave.model.util.StringMap;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>(java.lang.String)>("{");

        $r1 = newarray (boolean)[1];

        $r1[0] = 1;

        $r3 = new org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$6;

        specialinvoke $r3.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$6: void <init>(org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree,boolean[],java.lang.StringBuilder)>(r4, $r1, $r0);

        interfaceinvoke r2.<org.waveprotocol.wave.model.util.StringMap: void each(org.waveprotocol.wave.model.util.ReadableStringMap$ProcV)>($r3);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}");

        $r5 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    static int access$100(org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree)
    {
        int $i0;
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree r0;

        r0 := @parameter0: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree;

        $i0 = specialinvoke r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: int createNodeId()>();

        return $i0;
    }

    static org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node access$200(org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree)
    {
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node $r1;
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree r0;

        r0 := @parameter0: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree;

        $r1 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node sentinel>;

        return $r1;
    }

    static org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node access$300(org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree)
    {
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node $r1;
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree r0;

        r0 := @parameter0: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree;

        $r1 = specialinvoke r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node root()>();

        return $r1;
    }

    static java.lang.String access$400(org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree, org.waveprotocol.wave.model.util.StringMap)
    {
        org.waveprotocol.wave.model.util.StringMap r1;
        java.lang.String $r2;
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree r0;

        r0 := @parameter0: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree;

        r1 := @parameter1: org.waveprotocol.wave.model.util.StringMap;

        $r2 = specialinvoke r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: java.lang.String mapToString(org.waveprotocol.wave.model.util.StringMap)>(r1);

        return $r2;
    }

    static void access$500(org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree, boolean)
    {
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree r0;
        boolean z0;

        r0 := @parameter0: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree;

        z0 := @parameter1: boolean;

        specialinvoke r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: void checkState(boolean)>(z0);

        return;
    }

    static void access$600(org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree, boolean, java.lang.String, org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node)
    {
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node r2;
        java.lang.String r1;
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree r0;
        boolean z0;

        r0 := @parameter0: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree;

        z0 := @parameter1: boolean;

        r1 := @parameter2: java.lang.String;

        r2 := @parameter3: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node;

        specialinvoke r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: void checkState(boolean,java.lang.String,org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node)>(z0, r1, r2);

        return;
    }

    static java.lang.Object access$700(org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree, int, java.lang.String)
    {
        int i0;
        java.lang.Object $r2;
        java.lang.String r1;
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree r0;

        r0 := @parameter0: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree;

        i0 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        $r2 = specialinvoke r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: java.lang.Object getAnnotationRaw(int,java.lang.String)>(i0, r1);

        return $r2;
    }

    static java.lang.Object access$800(org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree, java.lang.Object, java.lang.Object)
    {
        java.lang.Object r1, r2, $r3;
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree r0;

        r0 := @parameter0: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.lang.Object;

        $r3 = specialinvoke r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: java.lang.Object differentValue(java.lang.Object,java.lang.Object)>(r1, r2);

        return $r3;
    }

    static org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node access$900(org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree, int)
    {
        int i0;
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node $r1;
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree r0;

        r0 := @parameter0: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node newLeaf(int)>(i0);

        return $r1;
    }

    static org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node access$1000(org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree, int, org.waveprotocol.wave.model.util.StringMap)
    {
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node $r2;
        int i0;
        org.waveprotocol.wave.model.util.StringMap r1;
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree r0;

        r0 := @parameter0: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree;

        i0 := @parameter1: int;

        r1 := @parameter2: org.waveprotocol.wave.model.util.StringMap;

        $r2 = specialinvoke r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node newInternalNode(int,org.waveprotocol.wave.model.util.StringMap)>(i0, r1);

        return $r2;
    }

    static void access$1100(org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree, org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node, org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node, org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node, org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node, org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node)
    {
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node r1, r2, r3, r4, r5;
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree r0;

        r0 := @parameter0: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree;

        r1 := @parameter1: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node;

        r2 := @parameter2: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node;

        r3 := @parameter3: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node;

        r4 := @parameter4: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node;

        r5 := @parameter5: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node;

        specialinvoke r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: void prepareMapsBeforeSingleRotation(org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node,org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node,org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node,org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node,org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node)>(r1, r2, r3, r4, r5);

        return;
    }

    static void access$1200(org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree, org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node, org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node, org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node, org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node, org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node)
    {
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node r1, r2, r3, r4, r5;
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree r0;

        r0 := @parameter0: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree;

        r1 := @parameter1: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node;

        r2 := @parameter2: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node;

        r3 := @parameter3: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node;

        r4 := @parameter4: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node;

        r5 := @parameter5: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node;

        specialinvoke r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: void fixupMapsAfterSingleRotation(org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node,org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node,org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node,org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node,org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node)>(r1, r2, r3, r4, r5);

        return;
    }

    static java.util.List access$1300(org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree)
    {
        java.util.List $r1;
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree r0;

        r0 := @parameter0: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree;

        $r1 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: java.util.List leavesThatHaveBecomeEmpty>;

        return $r1;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/waveprotocol/wave/model/document/indexed/BasicAnnotationTree;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: boolean $assertionsDisabled> = $z1;

        return;
    }
}
