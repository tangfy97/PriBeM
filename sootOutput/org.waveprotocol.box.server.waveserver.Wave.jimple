final class org.waveprotocol.box.server.waveserver.Wave extends java.lang.Object implements java.lang.Iterable
{
    private final org.waveprotocol.wave.model.id.WaveId waveId;
    private final com.google.common.util.concurrent.ListenableFuture lookedupWavelets;
    private final java.util.concurrent.ConcurrentMap localWavelets;
    private final java.util.concurrent.ConcurrentMap remoteWavelets;
    private final org.waveprotocol.box.server.waveserver.WaveletNotificationSubscriber notifiee;

    public void <init>(org.waveprotocol.wave.model.id.WaveId, com.google.common.util.concurrent.ListenableFuture, org.waveprotocol.box.server.waveserver.WaveletNotificationSubscriber, org.waveprotocol.box.server.waveserver.LocalWaveletContainer$Factory, org.waveprotocol.box.server.waveserver.RemoteWaveletContainer$Factory, java.lang.String)
    {
        org.waveprotocol.box.server.waveserver.LocalWaveletContainer$Factory r6;
        org.waveprotocol.wave.model.id.WaveId r1;
        com.google.common.util.concurrent.ListenableFuture r2;
        org.waveprotocol.box.server.waveserver.RemoteWaveletContainer$Factory r11;
        org.waveprotocol.box.server.waveserver.Wave$WaveletCreator $r5, $r10;
        java.util.concurrent.ConcurrentMap $r8, $r12;
        org.waveprotocol.box.server.waveserver.WaveletNotificationSubscriber r3;
        org.waveprotocol.box.server.waveserver.Wave r0;
        java.lang.String r7;
        com.google.common.collect.MapMaker $r4, $r9;

        r0 := @this: org.waveprotocol.box.server.waveserver.Wave;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveId;

        r2 := @parameter1: com.google.common.util.concurrent.ListenableFuture;

        r3 := @parameter2: org.waveprotocol.box.server.waveserver.WaveletNotificationSubscriber;

        r6 := @parameter3: org.waveprotocol.box.server.waveserver.LocalWaveletContainer$Factory;

        r11 := @parameter4: org.waveprotocol.box.server.waveserver.RemoteWaveletContainer$Factory;

        r7 := @parameter5: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.waveprotocol.box.server.waveserver.Wave: org.waveprotocol.wave.model.id.WaveId waveId> = r1;

        r0.<org.waveprotocol.box.server.waveserver.Wave: com.google.common.util.concurrent.ListenableFuture lookedupWavelets> = r2;

        r0.<org.waveprotocol.box.server.waveserver.Wave: org.waveprotocol.box.server.waveserver.WaveletNotificationSubscriber notifiee> = r3;

        $r4 = new com.google.common.collect.MapMaker;

        specialinvoke $r4.<com.google.common.collect.MapMaker: void <init>()>();

        $r5 = new org.waveprotocol.box.server.waveserver.Wave$WaveletCreator;

        specialinvoke $r5.<org.waveprotocol.box.server.waveserver.Wave$WaveletCreator: void <init>(org.waveprotocol.box.server.waveserver.Wave,org.waveprotocol.box.server.waveserver.WaveletContainer$Factory,java.lang.String)>(r0, r6, r7);

        $r8 = virtualinvoke $r4.<com.google.common.collect.MapMaker: java.util.concurrent.ConcurrentMap makeComputingMap(com.google.common.base.Function)>($r5);

        r0.<org.waveprotocol.box.server.waveserver.Wave: java.util.concurrent.ConcurrentMap localWavelets> = $r8;

        $r9 = new com.google.common.collect.MapMaker;

        specialinvoke $r9.<com.google.common.collect.MapMaker: void <init>()>();

        $r10 = new org.waveprotocol.box.server.waveserver.Wave$WaveletCreator;

        specialinvoke $r10.<org.waveprotocol.box.server.waveserver.Wave$WaveletCreator: void <init>(org.waveprotocol.box.server.waveserver.Wave,org.waveprotocol.box.server.waveserver.WaveletContainer$Factory,java.lang.String)>(r0, r11, r7);

        $r12 = virtualinvoke $r9.<com.google.common.collect.MapMaker: java.util.concurrent.ConcurrentMap makeComputingMap(com.google.common.base.Function)>($r10);

        r0.<org.waveprotocol.box.server.waveserver.Wave: java.util.concurrent.ConcurrentMap remoteWavelets> = $r12;

        return;
    }

    public java.util.Iterator iterator()
    {
        java.util.Iterator $r6;
        java.util.Collection $r2, $r4;
        java.lang.Iterable $r5;
        java.util.concurrent.ConcurrentMap $r1, $r3;
        org.waveprotocol.box.server.waveserver.Wave r0;
        com.google.common.collect.UnmodifiableIterator $r7;

        r0 := @this: org.waveprotocol.box.server.waveserver.Wave;

        $r1 = r0.<org.waveprotocol.box.server.waveserver.Wave: java.util.concurrent.ConcurrentMap localWavelets>;

        $r2 = interfaceinvoke $r1.<java.util.concurrent.ConcurrentMap: java.util.Collection values()>();

        $r3 = r0.<org.waveprotocol.box.server.waveserver.Wave: java.util.concurrent.ConcurrentMap remoteWavelets>;

        $r4 = interfaceinvoke $r3.<java.util.concurrent.ConcurrentMap: java.util.Collection values()>();

        $r5 = staticinvoke <com.google.common.collect.Iterables: java.lang.Iterable concat(java.lang.Iterable,java.lang.Iterable)>($r2, $r4);

        $r6 = interfaceinvoke $r5.<java.lang.Iterable: java.util.Iterator iterator()>();

        $r7 = staticinvoke <com.google.common.collect.Iterators: com.google.common.collect.UnmodifiableIterator unmodifiableIterator(java.util.Iterator)>($r6);

        return $r7;
    }

    org.waveprotocol.box.server.waveserver.LocalWaveletContainer getLocalWavelet(org.waveprotocol.wave.model.id.WaveletId) throws org.waveprotocol.box.server.waveserver.WaveletStateException
    {
        org.waveprotocol.box.server.waveserver.WaveletContainer $r3;
        org.waveprotocol.box.server.waveserver.LocalWaveletContainer $r4;
        org.waveprotocol.wave.model.id.WaveletId r1;
        org.waveprotocol.box.server.waveserver.Wave r0;
        java.util.concurrent.ConcurrentMap $r2;

        r0 := @this: org.waveprotocol.box.server.waveserver.Wave;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveletId;

        $r2 = r0.<org.waveprotocol.box.server.waveserver.Wave: java.util.concurrent.ConcurrentMap localWavelets>;

        $r3 = specialinvoke r0.<org.waveprotocol.box.server.waveserver.Wave: org.waveprotocol.box.server.waveserver.WaveletContainer getWavelet(org.waveprotocol.wave.model.id.WaveletId,java.util.concurrent.ConcurrentMap)>(r1, $r2);

        $r4 = (org.waveprotocol.box.server.waveserver.LocalWaveletContainer) $r3;

        return $r4;
    }

    org.waveprotocol.box.server.waveserver.RemoteWaveletContainer getRemoteWavelet(org.waveprotocol.wave.model.id.WaveletId) throws org.waveprotocol.box.server.waveserver.WaveletStateException
    {
        org.waveprotocol.box.server.waveserver.WaveletContainer $r3;
        org.waveprotocol.box.server.waveserver.RemoteWaveletContainer $r4;
        org.waveprotocol.wave.model.id.WaveletId r1;
        org.waveprotocol.box.server.waveserver.Wave r0;
        java.util.concurrent.ConcurrentMap $r2;

        r0 := @this: org.waveprotocol.box.server.waveserver.Wave;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveletId;

        $r2 = r0.<org.waveprotocol.box.server.waveserver.Wave: java.util.concurrent.ConcurrentMap remoteWavelets>;

        $r3 = specialinvoke r0.<org.waveprotocol.box.server.waveserver.Wave: org.waveprotocol.box.server.waveserver.WaveletContainer getWavelet(org.waveprotocol.wave.model.id.WaveletId,java.util.concurrent.ConcurrentMap)>(r1, $r2);

        $r4 = (org.waveprotocol.box.server.waveserver.RemoteWaveletContainer) $r3;

        return $r4;
    }

    org.waveprotocol.box.server.waveserver.LocalWaveletContainer getOrCreateLocalWavelet(org.waveprotocol.wave.model.id.WaveletId)
    {
        org.waveprotocol.box.server.waveserver.LocalWaveletContainer $r4;
        org.waveprotocol.wave.model.id.WaveletId r1;
        java.lang.Object $r3;
        org.waveprotocol.box.server.waveserver.Wave r0;
        java.util.concurrent.ConcurrentMap $r2;

        r0 := @this: org.waveprotocol.box.server.waveserver.Wave;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveletId;

        $r2 = r0.<org.waveprotocol.box.server.waveserver.Wave: java.util.concurrent.ConcurrentMap localWavelets>;

        $r3 = interfaceinvoke $r2.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (org.waveprotocol.box.server.waveserver.LocalWaveletContainer) $r3;

        return $r4;
    }

    org.waveprotocol.box.server.waveserver.RemoteWaveletContainer getOrCreateRemoteWavelet(org.waveprotocol.wave.model.id.WaveletId)
    {
        org.waveprotocol.box.server.waveserver.RemoteWaveletContainer $r4;
        org.waveprotocol.wave.model.id.WaveletId r1;
        java.lang.Object $r3;
        org.waveprotocol.box.server.waveserver.Wave r0;
        java.util.concurrent.ConcurrentMap $r2;

        r0 := @this: org.waveprotocol.box.server.waveserver.Wave;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveletId;

        $r2 = r0.<org.waveprotocol.box.server.waveserver.Wave: java.util.concurrent.ConcurrentMap remoteWavelets>;

        $r3 = interfaceinvoke $r2.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (org.waveprotocol.box.server.waveserver.RemoteWaveletContainer) $r3;

        return $r4;
    }

    private org.waveprotocol.box.server.waveserver.WaveletContainer getWavelet(org.waveprotocol.wave.model.id.WaveletId, java.util.concurrent.ConcurrentMap) throws org.waveprotocol.box.server.waveserver.WaveletStateException
    {
        org.waveprotocol.box.server.waveserver.WaveletContainer $r24;
        com.google.common.util.concurrent.ListenableFuture $r1;
        org.waveprotocol.wave.model.id.WaveletId r5;
        org.waveprotocol.box.server.persistence.PersistenceException $r15;
        java.util.concurrent.ConcurrentMap r4;
        java.lang.Thread $r7;
        org.waveprotocol.box.server.waveserver.Wave r0;
        java.lang.String $r14, $r22;
        boolean $z0, $z1;
        org.waveprotocol.wave.model.id.WaveletName $r12, $r20;
        com.google.common.collect.ImmutableSet r3;
        org.waveprotocol.wave.model.id.WaveId $r11, $r19;
        java.lang.InterruptedException $r6;
        org.waveprotocol.box.server.waveserver.WaveletStateException $r8, $r16;
        java.lang.Object $r2, $r23;
        java.lang.StringBuilder $r9, $r10, $r13, $r17, $r18, $r21;

        r0 := @this: org.waveprotocol.box.server.waveserver.Wave;

        r5 := @parameter0: org.waveprotocol.wave.model.id.WaveletId;

        r4 := @parameter1: java.util.concurrent.ConcurrentMap;

     label1:
        $r1 = r0.<org.waveprotocol.box.server.waveserver.Wave: com.google.common.util.concurrent.ListenableFuture lookedupWavelets>;

        $r2 = staticinvoke <org.waveprotocol.box.server.waveserver.FutureUtil: java.lang.Object getResultOrPropagateException(java.util.concurrent.Future,java.lang.Class)>($r1, class "Lorg/waveprotocol/box/server/persistence/PersistenceException;");

        r3 = (com.google.common.collect.ImmutableSet) $r2;

     label2:
        goto label5;

     label3:
        $r15 := @caughtexception;

        $r16 = new org.waveprotocol.box.server.waveserver.WaveletStateException;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to lookup wavelet ");

        $r19 = r0.<org.waveprotocol.box.server.waveserver.Wave: org.waveprotocol.wave.model.id.WaveId waveId>;

        $r20 = staticinvoke <org.waveprotocol.wave.model.id.WaveletName: org.waveprotocol.wave.model.id.WaveletName of(org.waveprotocol.wave.model.id.WaveId,org.waveprotocol.wave.model.id.WaveletId)>($r19, r5);

        $r21 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r20);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<org.waveprotocol.box.server.waveserver.WaveletStateException: void <init>(java.lang.String,java.lang.Throwable)>($r22, $r15);

        throw $r16;

     label4:
        $r6 := @caughtexception;

        $r7 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r7.<java.lang.Thread: void interrupt()>();

        $r8 = new org.waveprotocol.box.server.waveserver.WaveletStateException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Interrupted looking up wavelet ");

        $r11 = r0.<org.waveprotocol.box.server.waveserver.Wave: org.waveprotocol.wave.model.id.WaveId waveId>;

        $r12 = staticinvoke <org.waveprotocol.wave.model.id.WaveletName: org.waveprotocol.wave.model.id.WaveletName of(org.waveprotocol.wave.model.id.WaveId,org.waveprotocol.wave.model.id.WaveletId)>($r11, r5);

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<org.waveprotocol.box.server.waveserver.WaveletStateException: void <init>(java.lang.String,java.lang.Throwable)>($r14, $r6);

        throw $r8;

     label5:
        if r3 == null goto label6;

        $z0 = virtualinvoke r3.<com.google.common.collect.ImmutableSet: boolean contains(java.lang.Object)>(r5);

        if $z0 != 0 goto label6;

        $z1 = interfaceinvoke r4.<java.util.concurrent.ConcurrentMap: boolean containsKey(java.lang.Object)>(r5);

        if $z1 != 0 goto label6;

        return null;

     label6:
        $r23 = interfaceinvoke r4.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>(r5);

        $r24 = (org.waveprotocol.box.server.waveserver.WaveletContainer) $r23;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>($r24, "computingMap returned null");

        return $r24;

        catch org.waveprotocol.box.server.persistence.PersistenceException from label1 to label2 with label3;
        catch java.lang.InterruptedException from label1 to label2 with label4;
    }

    com.google.common.util.concurrent.ListenableFuture getLookedupWavelets()
    {
        org.waveprotocol.box.server.waveserver.Wave r0;
        com.google.common.util.concurrent.ListenableFuture $r1;

        r0 := @this: org.waveprotocol.box.server.waveserver.Wave;

        $r1 = r0.<org.waveprotocol.box.server.waveserver.Wave: com.google.common.util.concurrent.ListenableFuture lookedupWavelets>;

        return $r1;
    }

    static org.waveprotocol.box.server.waveserver.WaveletNotificationSubscriber access$000(org.waveprotocol.box.server.waveserver.Wave)
    {
        org.waveprotocol.box.server.waveserver.Wave r0;
        org.waveprotocol.box.server.waveserver.WaveletNotificationSubscriber $r1;

        r0 := @parameter0: org.waveprotocol.box.server.waveserver.Wave;

        $r1 = r0.<org.waveprotocol.box.server.waveserver.Wave: org.waveprotocol.box.server.waveserver.WaveletNotificationSubscriber notifiee>;

        return $r1;
    }

    static org.waveprotocol.wave.model.id.WaveId access$100(org.waveprotocol.box.server.waveserver.Wave)
    {
        org.waveprotocol.box.server.waveserver.Wave r0;
        org.waveprotocol.wave.model.id.WaveId $r1;

        r0 := @parameter0: org.waveprotocol.box.server.waveserver.Wave;

        $r1 = r0.<org.waveprotocol.box.server.waveserver.Wave: org.waveprotocol.wave.model.id.WaveId waveId>;

        return $r1;
    }
}
