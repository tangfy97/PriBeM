public final class com.google.common.base.Joiner$MapJoiner extends java.lang.Object
{
    private final com.google.common.base.Joiner joiner;
    private final java.lang.String keyValueSeparator;

    private void <init>(com.google.common.base.Joiner, java.lang.String)
    {
        com.google.common.base.Joiner$MapJoiner r0;
        java.lang.Object $r3;
        java.lang.String r2, $r4;
        com.google.common.base.Joiner r1;

        r0 := @this: com.google.common.base.Joiner$MapJoiner;

        r1 := @parameter0: com.google.common.base.Joiner;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.google.common.base.Joiner$MapJoiner: com.google.common.base.Joiner joiner> = r1;

        $r3 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r2);

        $r4 = (java.lang.String) $r3;

        r0.<com.google.common.base.Joiner$MapJoiner: java.lang.String keyValueSeparator> = $r4;

        return;
    }

    public java.lang.Appendable appendTo(java.lang.Appendable, java.util.Map) throws java.io.IOException
    {
        java.util.Map r1;
        java.lang.String $r10, $r15, $r21;
        boolean $z0, $z1;
        java.util.Map$Entry r5, r17;
        java.util.Iterator $r3;
        java.lang.CharSequence $r9, $r13, $r20, $r24;
        java.lang.Appendable r0;
        java.util.Set $r2;
        com.google.common.base.Joiner$MapJoiner r6;
        java.lang.Object $r4, $r8, $r12, $r16, $r19, $r23;
        com.google.common.base.Joiner $r7, $r11, $r14, $r18, $r22;

        r6 := @this: com.google.common.base.Joiner$MapJoiner;

        r0 := @parameter0: java.lang.Appendable;

        r1 := @parameter1: java.util.Map;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $r2 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.util.Map$Entry) $r4;

        $r7 = r6.<com.google.common.base.Joiner$MapJoiner: com.google.common.base.Joiner joiner>;

        $r8 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r9 = virtualinvoke $r7.<com.google.common.base.Joiner: java.lang.CharSequence toString(java.lang.Object)>($r8);

        interfaceinvoke r0.<java.lang.Appendable: java.lang.Appendable append(java.lang.CharSequence)>($r9);

        $r10 = r6.<com.google.common.base.Joiner$MapJoiner: java.lang.String keyValueSeparator>;

        interfaceinvoke r0.<java.lang.Appendable: java.lang.Appendable append(java.lang.CharSequence)>($r10);

        $r11 = r6.<com.google.common.base.Joiner$MapJoiner: com.google.common.base.Joiner joiner>;

        $r12 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r13 = virtualinvoke $r11.<com.google.common.base.Joiner: java.lang.CharSequence toString(java.lang.Object)>($r12);

        interfaceinvoke r0.<java.lang.Appendable: java.lang.Appendable append(java.lang.CharSequence)>($r13);

     label1:
        $z1 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        $r14 = r6.<com.google.common.base.Joiner$MapJoiner: com.google.common.base.Joiner joiner>;

        $r15 = staticinvoke <com.google.common.base.Joiner: java.lang.String access$100(com.google.common.base.Joiner)>($r14);

        interfaceinvoke r0.<java.lang.Appendable: java.lang.Appendable append(java.lang.CharSequence)>($r15);

        $r16 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r17 = (java.util.Map$Entry) $r16;

        $r18 = r6.<com.google.common.base.Joiner$MapJoiner: com.google.common.base.Joiner joiner>;

        $r19 = interfaceinvoke r17.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r20 = virtualinvoke $r18.<com.google.common.base.Joiner: java.lang.CharSequence toString(java.lang.Object)>($r19);

        interfaceinvoke r0.<java.lang.Appendable: java.lang.Appendable append(java.lang.CharSequence)>($r20);

        $r21 = r6.<com.google.common.base.Joiner$MapJoiner: java.lang.String keyValueSeparator>;

        interfaceinvoke r0.<java.lang.Appendable: java.lang.Appendable append(java.lang.CharSequence)>($r21);

        $r22 = r6.<com.google.common.base.Joiner$MapJoiner: com.google.common.base.Joiner joiner>;

        $r23 = interfaceinvoke r17.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r24 = virtualinvoke $r22.<com.google.common.base.Joiner: java.lang.CharSequence toString(java.lang.Object)>($r23);

        interfaceinvoke r0.<java.lang.Appendable: java.lang.Appendable append(java.lang.CharSequence)>($r24);

        goto label1;

     label2:
        return r0;
    }

    public java.lang.StringBuilder appendTo(java.lang.StringBuilder, java.util.Map)
    {
        java.util.Map r2;
        com.google.common.base.Joiner$MapJoiner r0;
        java.lang.StringBuilder r1;
        java.io.IOException $r3;
        java.lang.AssertionError $r4;

        r0 := @this: com.google.common.base.Joiner$MapJoiner;

        r1 := @parameter0: java.lang.StringBuilder;

        r2 := @parameter1: java.util.Map;

     label1:
        virtualinvoke r0.<com.google.common.base.Joiner$MapJoiner: java.lang.Appendable appendTo(java.lang.Appendable,java.util.Map)>(r1, r2);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>(java.lang.Object)>($r3);

        throw $r4;

     label4:
        return r1;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public java.lang.String join(java.util.Map)
    {
        java.util.Map r2;
        com.google.common.base.Joiner$MapJoiner r0;
        java.lang.StringBuilder $r1, $r3;
        java.lang.String $r4;

        r0 := @this: com.google.common.base.Joiner$MapJoiner;

        r2 := @parameter0: java.util.Map;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke r0.<com.google.common.base.Joiner$MapJoiner: java.lang.StringBuilder appendTo(java.lang.StringBuilder,java.util.Map)>($r1, r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;
    }

    public com.google.common.base.Joiner$MapJoiner useForNull(java.lang.String)
    {
        com.google.common.base.Joiner$MapJoiner $r0, r1;
        java.lang.String r2, $r5;
        com.google.common.base.Joiner $r3, $r4;

        r1 := @this: com.google.common.base.Joiner$MapJoiner;

        r2 := @parameter0: java.lang.String;

        $r0 = new com.google.common.base.Joiner$MapJoiner;

        $r3 = r1.<com.google.common.base.Joiner$MapJoiner: com.google.common.base.Joiner joiner>;

        $r4 = virtualinvoke $r3.<com.google.common.base.Joiner: com.google.common.base.Joiner useForNull(java.lang.String)>(r2);

        $r5 = r1.<com.google.common.base.Joiner$MapJoiner: java.lang.String keyValueSeparator>;

        specialinvoke $r0.<com.google.common.base.Joiner$MapJoiner: void <init>(com.google.common.base.Joiner,java.lang.String)>($r4, $r5);

        return $r0;
    }

    void <init>(com.google.common.base.Joiner, java.lang.String, com.google.common.base.Joiner$1)
    {
        com.google.common.base.Joiner$1 r3;
        com.google.common.base.Joiner$MapJoiner r0;
        java.lang.String r2;
        com.google.common.base.Joiner r1;

        r0 := @this: com.google.common.base.Joiner$MapJoiner;

        r1 := @parameter0: com.google.common.base.Joiner;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: com.google.common.base.Joiner$1;

        specialinvoke r0.<com.google.common.base.Joiner$MapJoiner: void <init>(com.google.common.base.Joiner,java.lang.String)>(r1, r2);

        return;
    }
}
