public class org.waveprotocol.wave.client.editor.testtools.Abbreviations extends java.lang.Object
{
    private static java.util.HashMap map;

    public void <init>()
    {
        org.waveprotocol.wave.client.editor.testtools.Abbreviations r0;

        r0 := @this: org.waveprotocol.wave.client.editor.testtools.Abbreviations;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void add(java.lang.String, java.lang.String)
    {
        org.waveprotocol.wave.client.editor.testtools.Abbreviations r3;
        java.util.HashMap $r2;
        java.lang.String r0, r1;

        r3 := @this: org.waveprotocol.wave.client.editor.testtools.Abbreviations;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $r2 = <org.waveprotocol.wave.client.editor.testtools.Abbreviations: java.util.HashMap map>;

        virtualinvoke $r2.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, r1);

        return;
    }

    public void clear()
    {
        org.waveprotocol.wave.client.editor.testtools.Abbreviations r1;
        java.util.HashMap $r0;

        r1 := @this: org.waveprotocol.wave.client.editor.testtools.Abbreviations;

        $r0 = <org.waveprotocol.wave.client.editor.testtools.Abbreviations: java.util.HashMap map>;

        virtualinvoke $r0.<java.util.HashMap: void clear()>();

        return;
    }

    public java.lang.String expand(java.lang.String)
    {
        java.util.Map$Entry r5;
        java.util.Iterator $r3;
        java.util.Set $r2;
        java.util.HashMap $r1;
        org.waveprotocol.wave.client.editor.testtools.Abbreviations r10;
        java.lang.Object $r4, $r6, $r8;
        java.lang.String r0, $r7, $r9, r11;
        boolean $z0;

        r10 := @this: org.waveprotocol.wave.client.editor.testtools.Abbreviations;

        r0 := @parameter0: java.lang.String;

        r11 = r0;

        $r1 = <org.waveprotocol.wave.client.editor.testtools.Abbreviations: java.util.HashMap map>;

        $r2 = virtualinvoke $r1.<java.util.HashMap: java.util.Set entrySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.util.Map$Entry) $r4;

        $r6 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r7 = (java.lang.String) $r6;

        $r8 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r9 = (java.lang.String) $r8;

        r11 = virtualinvoke r11.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>($r7, $r9);

        goto label1;

     label2:
        return r11;
    }

    static void <clinit>()
    {
        java.util.HashMap $r0;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        <org.waveprotocol.wave.client.editor.testtools.Abbreviations: java.util.HashMap map> = $r0;

        return;
    }
}
