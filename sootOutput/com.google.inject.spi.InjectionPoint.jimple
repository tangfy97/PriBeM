public final class com.google.inject.spi.InjectionPoint extends java.lang.Object
{
    private static final java.util.logging.Logger logger;
    private final boolean optional;
    private final java.lang.reflect.Member member;
    private final com.google.inject.TypeLiteral declaringType;
    private final com.google.inject.internal.util.$ImmutableList dependencies;

    void <init>(com.google.inject.TypeLiteral, java.lang.reflect.Method, boolean)
    {
        java.lang.'annotation'.Annotation[][] $r3;
        com.google.inject.internal.util.$ImmutableList $r4;
        com.google.inject.spi.InjectionPoint r0;
        java.lang.reflect.Method r1;
        com.google.inject.TypeLiteral r2;
        boolean z0;

        r0 := @this: com.google.inject.spi.InjectionPoint;

        r2 := @parameter0: com.google.inject.TypeLiteral;

        r1 := @parameter1: java.lang.reflect.Method;

        z0 := @parameter2: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.google.inject.spi.InjectionPoint: java.lang.reflect.Member member> = r1;

        r0.<com.google.inject.spi.InjectionPoint: com.google.inject.TypeLiteral declaringType> = r2;

        r0.<com.google.inject.spi.InjectionPoint: boolean optional> = z0;

        $r3 = virtualinvoke r1.<java.lang.reflect.Method: java.lang.'annotation'.Annotation[][] getParameterAnnotations()>();

        $r4 = specialinvoke r0.<com.google.inject.spi.InjectionPoint: com.google.inject.internal.util.$ImmutableList forMember(java.lang.reflect.Member,com.google.inject.TypeLiteral,java.lang.'annotation'.Annotation[][])>(r1, r2, $r3);

        r0.<com.google.inject.spi.InjectionPoint: com.google.inject.internal.util.$ImmutableList dependencies> = $r4;

        return;
    }

    void <init>(com.google.inject.TypeLiteral, java.lang.reflect.Constructor)
    {
        java.lang.'annotation'.Annotation[][] $r3;
        com.google.inject.internal.util.$ImmutableList $r4;
        com.google.inject.spi.InjectionPoint r0;
        java.lang.reflect.Constructor r1;
        com.google.inject.TypeLiteral r2;

        r0 := @this: com.google.inject.spi.InjectionPoint;

        r2 := @parameter0: com.google.inject.TypeLiteral;

        r1 := @parameter1: java.lang.reflect.Constructor;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.google.inject.spi.InjectionPoint: java.lang.reflect.Member member> = r1;

        r0.<com.google.inject.spi.InjectionPoint: com.google.inject.TypeLiteral declaringType> = r2;

        r0.<com.google.inject.spi.InjectionPoint: boolean optional> = 0;

        $r3 = virtualinvoke r1.<java.lang.reflect.Constructor: java.lang.'annotation'.Annotation[][] getParameterAnnotations()>();

        $r4 = specialinvoke r0.<com.google.inject.spi.InjectionPoint: com.google.inject.internal.util.$ImmutableList forMember(java.lang.reflect.Member,com.google.inject.TypeLiteral,java.lang.'annotation'.Annotation[][])>(r1, r2, $r3);

        r0.<com.google.inject.spi.InjectionPoint: com.google.inject.internal.util.$ImmutableList dependencies> = $r4;

        return;
    }

    void <init>(com.google.inject.TypeLiteral, java.lang.reflect.Field, boolean)
    {
        com.google.inject.Key r10;
        java.lang.'annotation'.Annotation[] $r3;
        com.google.inject.internal.ErrorsException $r6;
        int $i1;
        boolean z0, $z1;
        com.google.inject.internal.util.$ImmutableList $r12;
        java.util.Collection $r9;
        com.google.inject.spi.Dependency $r11;
        com.google.inject.ConfigurationException $r8;
        java.lang.reflect.Field r1;
        com.google.inject.internal.Errors $r7, $r13;
        com.google.inject.spi.InjectionPoint r0;
        com.google.inject.TypeLiteral r2, $r5;

        r0 := @this: com.google.inject.spi.InjectionPoint;

        r2 := @parameter0: com.google.inject.TypeLiteral;

        r1 := @parameter1: java.lang.reflect.Field;

        z0 := @parameter2: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.google.inject.spi.InjectionPoint: java.lang.reflect.Member member> = r1;

        r0.<com.google.inject.spi.InjectionPoint: com.google.inject.TypeLiteral declaringType> = r2;

        r0.<com.google.inject.spi.InjectionPoint: boolean optional> = z0;

        $r3 = virtualinvoke r1.<java.lang.reflect.Field: java.lang.'annotation'.Annotation[] getAnnotations()>();

        $r13 = new com.google.inject.internal.Errors;

        specialinvoke $r13.<com.google.inject.internal.Errors: void <init>(java.lang.Object)>(r1);

        r10 = null;

     label1:
        $r5 = virtualinvoke r2.<com.google.inject.TypeLiteral: com.google.inject.TypeLiteral getFieldType(java.lang.reflect.Field)>(r1);

        r10 = staticinvoke <com.google.inject.internal.Annotations: com.google.inject.Key getKey(com.google.inject.TypeLiteral,java.lang.reflect.Member,java.lang.'annotation'.Annotation[],com.google.inject.internal.Errors)>($r5, r1, $r3, $r13);

     label2:
        goto label5;

     label3:
        $r8 := @caughtexception;

        $r9 = virtualinvoke $r8.<com.google.inject.ConfigurationException: java.util.Collection getErrorMessages()>();

        virtualinvoke $r13.<com.google.inject.internal.Errors: com.google.inject.internal.Errors merge(java.util.Collection)>($r9);

        goto label5;

     label4:
        $r6 := @caughtexception;

        $r7 = virtualinvoke $r6.<com.google.inject.internal.ErrorsException: com.google.inject.internal.Errors getErrors()>();

        virtualinvoke $r13.<com.google.inject.internal.Errors: com.google.inject.internal.Errors merge(com.google.inject.internal.Errors)>($r7);

     label5:
        virtualinvoke $r13.<com.google.inject.internal.Errors: void throwConfigurationExceptionIfErrorsExist()>();

        $z1 = staticinvoke <com.google.inject.internal.Nullability: boolean allowsNull(java.lang.'annotation'.Annotation[])>($r3);

        $i1 = (int) -1;

        $r11 = specialinvoke r0.<com.google.inject.spi.InjectionPoint: com.google.inject.spi.Dependency newDependency(com.google.inject.Key,boolean,int)>(r10, $z1, $i1);

        $r12 = staticinvoke <com.google.inject.internal.util.$ImmutableList: com.google.inject.internal.util.$ImmutableList of(java.lang.Object)>($r11);

        r0.<com.google.inject.spi.InjectionPoint: com.google.inject.internal.util.$ImmutableList dependencies> = $r12;

        return;

        catch com.google.inject.ConfigurationException from label1 to label2 with label3;
        catch com.google.inject.internal.ErrorsException from label1 to label2 with label4;
    }

    private com.google.inject.internal.util.$ImmutableList forMember(java.lang.reflect.Member, com.google.inject.TypeLiteral, java.lang.'annotation'.Annotation[][])
    {
        com.google.inject.Key $r13;
        java.lang.'annotation'.Annotation[] r20;
        java.util.ArrayList $r5;
        com.google.inject.internal.ErrorsException $r16;
        int i0;
        boolean $z0, $z1;
        java.lang.'annotation'.Annotation[][] r2;
        com.google.inject.internal.util.$ImmutableList $r9;
        java.util.Iterator $r4, $r8;
        java.lang.reflect.Member r1;
        com.google.inject.spi.Dependency $r15;
        java.util.Collection $r19;
        com.google.inject.ConfigurationException $r18;
        com.google.inject.internal.Errors $r0, $r17;
        java.util.List $r3, $r7;
        com.google.inject.spi.InjectionPoint r14;
        java.lang.Object $r10, $r12;
        com.google.inject.TypeLiteral r6, r11;

        r14 := @this: com.google.inject.spi.InjectionPoint;

        r1 := @parameter0: java.lang.reflect.Member;

        r6 := @parameter1: com.google.inject.TypeLiteral;

        r2 := @parameter2: java.lang.'annotation'.Annotation[][];

        $r0 = new com.google.inject.internal.Errors;

        specialinvoke $r0.<com.google.inject.internal.Errors: void <init>(java.lang.Object)>(r1);

        $r3 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r2);

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

        $r5 = staticinvoke <com.google.inject.internal.util.$Lists: java.util.ArrayList newArrayList()>();

        i0 = 0;

        $r7 = virtualinvoke r6.<com.google.inject.TypeLiteral: java.util.List getParameterTypes(java.lang.reflect.Member)>(r1);

        $r8 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label7;

        $r10 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        r11 = (com.google.inject.TypeLiteral) $r10;

     label2:
        $r12 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r20 = (java.lang.'annotation'.Annotation[]) $r12;

        $r13 = staticinvoke <com.google.inject.internal.Annotations: com.google.inject.Key getKey(com.google.inject.TypeLiteral,java.lang.reflect.Member,java.lang.'annotation'.Annotation[],com.google.inject.internal.Errors)>(r11, r1, r20, $r0);

        $z1 = staticinvoke <com.google.inject.internal.Nullability: boolean allowsNull(java.lang.'annotation'.Annotation[])>(r20);

        $r15 = specialinvoke r14.<com.google.inject.spi.InjectionPoint: com.google.inject.spi.Dependency newDependency(com.google.inject.Key,boolean,int)>($r13, $z1, i0);

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r15);

        i0 = i0 + 1;

     label3:
        goto label6;

     label4:
        $r18 := @caughtexception;

        $r19 = virtualinvoke $r18.<com.google.inject.ConfigurationException: java.util.Collection getErrorMessages()>();

        virtualinvoke $r0.<com.google.inject.internal.Errors: com.google.inject.internal.Errors merge(java.util.Collection)>($r19);

        goto label6;

     label5:
        $r16 := @caughtexception;

        $r17 = virtualinvoke $r16.<com.google.inject.internal.ErrorsException: com.google.inject.internal.Errors getErrors()>();

        virtualinvoke $r0.<com.google.inject.internal.Errors: com.google.inject.internal.Errors merge(com.google.inject.internal.Errors)>($r17);

     label6:
        goto label1;

     label7:
        virtualinvoke $r0.<com.google.inject.internal.Errors: void throwConfigurationExceptionIfErrorsExist()>();

        $r9 = staticinvoke <com.google.inject.internal.util.$ImmutableList: com.google.inject.internal.util.$ImmutableList copyOf(java.lang.Iterable)>($r5);

        return $r9;

        catch com.google.inject.ConfigurationException from label2 to label3 with label4;
        catch com.google.inject.internal.ErrorsException from label2 to label3 with label5;
    }

    private com.google.inject.spi.Dependency newDependency(com.google.inject.Key, boolean, int)
    {
        com.google.inject.spi.InjectionPoint r1;
        com.google.inject.spi.Dependency $r0;
        com.google.inject.Key r2;
        int i0;
        boolean z0;

        r1 := @this: com.google.inject.spi.InjectionPoint;

        r2 := @parameter0: com.google.inject.Key;

        z0 := @parameter1: boolean;

        i0 := @parameter2: int;

        $r0 = new com.google.inject.spi.Dependency;

        specialinvoke $r0.<com.google.inject.spi.Dependency: void <init>(com.google.inject.spi.InjectionPoint,com.google.inject.Key,boolean,int)>(r1, r2, z0, i0);

        return $r0;
    }

    public java.lang.reflect.Member getMember()
    {
        com.google.inject.spi.InjectionPoint r0;
        java.lang.reflect.Member $r1;

        r0 := @this: com.google.inject.spi.InjectionPoint;

        $r1 = r0.<com.google.inject.spi.InjectionPoint: java.lang.reflect.Member member>;

        return $r1;
    }

    public java.util.List getDependencies()
    {
        com.google.inject.internal.util.$ImmutableList $r1;
        com.google.inject.spi.InjectionPoint r0;

        r0 := @this: com.google.inject.spi.InjectionPoint;

        $r1 = r0.<com.google.inject.spi.InjectionPoint: com.google.inject.internal.util.$ImmutableList dependencies>;

        return $r1;
    }

    public boolean isOptional()
    {
        com.google.inject.spi.InjectionPoint r0;
        boolean $z0;

        r0 := @this: com.google.inject.spi.InjectionPoint;

        $z0 = r0.<com.google.inject.spi.InjectionPoint: boolean optional>;

        return $z0;
    }

    public boolean isToolable()
    {
        com.google.inject.spi.InjectionPoint r0;
        java.lang.reflect.Member $r1;
        java.lang.reflect.AnnotatedElement $r2;
        boolean $z0;

        r0 := @this: com.google.inject.spi.InjectionPoint;

        $r1 = r0.<com.google.inject.spi.InjectionPoint: java.lang.reflect.Member member>;

        $r2 = (java.lang.reflect.AnnotatedElement) $r1;

        $z0 = interfaceinvoke $r2.<java.lang.reflect.AnnotatedElement: boolean isAnnotationPresent(java.lang.Class)>(class "Lcom/google/inject/spi/Toolable;");

        return $z0;
    }

    public com.google.inject.TypeLiteral getDeclaringType()
    {
        com.google.inject.spi.InjectionPoint r0;
        com.google.inject.TypeLiteral $r1;

        r0 := @this: com.google.inject.spi.InjectionPoint;

        $r1 = r0.<com.google.inject.spi.InjectionPoint: com.google.inject.TypeLiteral declaringType>;

        return $r1;
    }

    public boolean equals(java.lang.Object)
    {
        java.lang.reflect.Member $r3, $r4;
        com.google.inject.spi.InjectionPoint r1, $r2, $r5;
        java.lang.Object r0;
        com.google.inject.TypeLiteral $r6, $r7;
        boolean $z0, $z1, $z2, $z3;

        r1 := @this: com.google.inject.spi.InjectionPoint;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof com.google.inject.spi.InjectionPoint;

        if $z0 == 0 goto label1;

        $r4 = r1.<com.google.inject.spi.InjectionPoint: java.lang.reflect.Member member>;

        $r2 = (com.google.inject.spi.InjectionPoint) r0;

        $r3 = $r2.<com.google.inject.spi.InjectionPoint: java.lang.reflect.Member member>;

        $z1 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>($r3);

        if $z1 == 0 goto label1;

        $r7 = r1.<com.google.inject.spi.InjectionPoint: com.google.inject.TypeLiteral declaringType>;

        $r5 = (com.google.inject.spi.InjectionPoint) r0;

        $r6 = $r5.<com.google.inject.spi.InjectionPoint: com.google.inject.TypeLiteral declaringType>;

        $z2 = virtualinvoke $r7.<com.google.inject.TypeLiteral: boolean equals(java.lang.Object)>($r6);

        if $z2 == 0 goto label1;

        $z3 = 1;

        goto label2;

     label1:
        $z3 = 0;

     label2:
        return $z3;
    }

    public int hashCode()
    {
        com.google.inject.spi.InjectionPoint r0;
        java.lang.reflect.Member $r1;
        int $i0, $i1, $i2;
        com.google.inject.TypeLiteral $r2;

        r0 := @this: com.google.inject.spi.InjectionPoint;

        $r1 = r0.<com.google.inject.spi.InjectionPoint: java.lang.reflect.Member member>;

        $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>();

        $r2 = r0.<com.google.inject.spi.InjectionPoint: com.google.inject.TypeLiteral declaringType>;

        $i1 = virtualinvoke $r2.<com.google.inject.TypeLiteral: int hashCode()>();

        $i2 = $i0 ^ $i1;

        return $i2;
    }

    public java.lang.String toString()
    {
        java.lang.String $r2;
        com.google.inject.spi.InjectionPoint r0;
        java.lang.reflect.Member $r1;

        r0 := @this: com.google.inject.spi.InjectionPoint;

        $r1 = r0.<com.google.inject.spi.InjectionPoint: java.lang.reflect.Member member>;

        $r2 = staticinvoke <com.google.inject.internal.util.$Classes: java.lang.String toString(java.lang.reflect.Member)>($r1);

        return $r2;
    }

    public static com.google.inject.spi.InjectionPoint forConstructor(java.lang.reflect.Constructor)
    {
        com.google.inject.spi.InjectionPoint $r0;
        java.lang.Class $r2;
        java.lang.reflect.Constructor r1;
        com.google.inject.TypeLiteral $r3;

        r1 := @parameter0: java.lang.reflect.Constructor;

        $r0 = new com.google.inject.spi.InjectionPoint;

        $r2 = virtualinvoke r1.<java.lang.reflect.Constructor: java.lang.Class getDeclaringClass()>();

        $r3 = staticinvoke <com.google.inject.TypeLiteral: com.google.inject.TypeLiteral get(java.lang.Class)>($r2);

        specialinvoke $r0.<com.google.inject.spi.InjectionPoint: void <init>(com.google.inject.TypeLiteral,java.lang.reflect.Constructor)>($r3, r1);

        return $r0;
    }

    public static com.google.inject.spi.InjectionPoint forConstructor(java.lang.reflect.Constructor, com.google.inject.TypeLiteral)
    {
        com.google.inject.internal.Errors $r5, $r6;
        com.google.inject.spi.InjectionPoint $r4;
        java.lang.Class $r1, $r3;
        com.google.inject.TypeLiteral r0;
        java.lang.reflect.Constructor r2;

        r2 := @parameter0: java.lang.reflect.Constructor;

        r0 := @parameter1: com.google.inject.TypeLiteral;

        $r1 = virtualinvoke r0.<com.google.inject.TypeLiteral: java.lang.Class getRawType()>();

        $r3 = virtualinvoke r2.<java.lang.reflect.Constructor: java.lang.Class getDeclaringClass()>();

        if $r1 == $r3 goto label1;

        $r5 = new com.google.inject.internal.Errors;

        specialinvoke $r5.<com.google.inject.internal.Errors: void <init>(java.lang.Object)>(r0);

        $r6 = virtualinvoke $r5.<com.google.inject.internal.Errors: com.google.inject.internal.Errors constructorNotDefinedByType(java.lang.reflect.Constructor,com.google.inject.TypeLiteral)>(r2, r0);

        virtualinvoke $r6.<com.google.inject.internal.Errors: void throwConfigurationExceptionIfErrorsExist()>();

     label1:
        $r4 = new com.google.inject.spi.InjectionPoint;

        specialinvoke $r4.<com.google.inject.spi.InjectionPoint: void <init>(com.google.inject.TypeLiteral,java.lang.reflect.Constructor)>(r0, r2);

        return $r4;
    }

    public static com.google.inject.spi.InjectionPoint forConstructorOf(com.google.inject.TypeLiteral)
    {
        java.lang.NoSuchMethodException $r16;
        com.google.inject.Inject r13;
        java.lang.reflect.Constructor $r6, r11, r19;
        java.lang.reflect.Constructor[] $r4;
        javax.inject.Inject r15;
        int i0, $i1, $i2, i3;
        boolean $z0, $z1, z2;
        java.lang.Class[] $r5;
        com.google.inject.ConfigurationException $r8, $r17;
        com.google.inject.internal.Errors $r3;
        java.util.List $r9, $r18;
        com.google.inject.spi.InjectionPoint $r7, $r10;
        java.lang.reflect.Type $r1;
        java.lang.'annotation'.Annotation $r12, $r14;
        java.lang.Class $r2;
        com.google.inject.TypeLiteral r0;

        r0 := @parameter0: com.google.inject.TypeLiteral;

        $r1 = virtualinvoke r0.<com.google.inject.TypeLiteral: java.lang.reflect.Type getType()>();

        $r2 = staticinvoke <com.google.inject.internal.MoreTypes: java.lang.Class getRawType(java.lang.reflect.Type)>($r1);

        $r3 = new com.google.inject.internal.Errors;

        specialinvoke $r3.<com.google.inject.internal.Errors: void <init>(java.lang.Object)>($r2);

        r19 = null;

        $r4 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Constructor[] getDeclaredConstructors()>();

        i0 = lengthof $r4;

        i3 = 0;

     label01:
        if i3 >= i0 goto label08;

        r11 = $r4[i3];

        $r12 = virtualinvoke r11.<java.lang.reflect.Constructor: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lcom/google/inject/Inject;");

        r13 = (com.google.inject.Inject) $r12;

        if r13 != null goto label03;

        $r14 = virtualinvoke r11.<java.lang.reflect.Constructor: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Ljavax/inject/Inject;");

        r15 = (javax.inject.Inject) $r14;

        if r15 != null goto label02;

        goto label07;

     label02:
        z2 = 0;

        goto label04;

     label03:
        z2 = interfaceinvoke r13.<com.google.inject.Inject: boolean optional()>();

     label04:
        if z2 == 0 goto label05;

        virtualinvoke $r3.<com.google.inject.internal.Errors: com.google.inject.internal.Errors optionalConstructor(java.lang.reflect.Constructor)>(r11);

     label05:
        if r19 == null goto label06;

        virtualinvoke $r3.<com.google.inject.internal.Errors: com.google.inject.internal.Errors tooManyConstructors(java.lang.Class)>($r2);

     label06:
        r19 = r11;

        staticinvoke <com.google.inject.spi.InjectionPoint: boolean checkForMisplacedBindingAnnotations(java.lang.reflect.Member,com.google.inject.internal.Errors)>(r11, $r3);

     label07:
        i3 = i3 + 1;

        goto label01;

     label08:
        virtualinvoke $r3.<com.google.inject.internal.Errors: void throwConfigurationExceptionIfErrorsExist()>();

        if r19 == null goto label09;

        $r10 = new com.google.inject.spi.InjectionPoint;

        specialinvoke $r10.<com.google.inject.spi.InjectionPoint: void <init>(com.google.inject.TypeLiteral,java.lang.reflect.Constructor)>(r0, r19);

        return $r10;

     label09:
        $r5 = newarray (java.lang.Class)[0];

        $r6 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])>($r5);

        $i1 = virtualinvoke $r6.<java.lang.reflect.Constructor: int getModifiers()>();

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isPrivate(int)>($i1);

        if $z0 == 0 goto label10;

        $i2 = virtualinvoke $r2.<java.lang.Class: int getModifiers()>();

        $z1 = staticinvoke <java.lang.reflect.Modifier: boolean isPrivate(int)>($i2);

        if $z1 != 0 goto label10;

        virtualinvoke $r3.<com.google.inject.internal.Errors: com.google.inject.internal.Errors missingConstructor(java.lang.Class)>($r2);

        $r8 = new com.google.inject.ConfigurationException;

        $r9 = virtualinvoke $r3.<com.google.inject.internal.Errors: java.util.List getMessages()>();

        specialinvoke $r8.<com.google.inject.ConfigurationException: void <init>(java.lang.Iterable)>($r9);

        throw $r8;

     label10:
        staticinvoke <com.google.inject.spi.InjectionPoint: boolean checkForMisplacedBindingAnnotations(java.lang.reflect.Member,com.google.inject.internal.Errors)>($r6, $r3);

        $r7 = new com.google.inject.spi.InjectionPoint;

        specialinvoke $r7.<com.google.inject.spi.InjectionPoint: void <init>(com.google.inject.TypeLiteral,java.lang.reflect.Constructor)>(r0, $r6);

     label11:
        return $r7;

     label12:
        $r16 := @caughtexception;

        virtualinvoke $r3.<com.google.inject.internal.Errors: com.google.inject.internal.Errors missingConstructor(java.lang.Class)>($r2);

        $r17 = new com.google.inject.ConfigurationException;

        $r18 = virtualinvoke $r3.<com.google.inject.internal.Errors: java.util.List getMessages()>();

        specialinvoke $r17.<com.google.inject.ConfigurationException: void <init>(java.lang.Iterable)>($r18);

        throw $r17;

        catch java.lang.NoSuchMethodException from label09 to label11 with label12;
    }

    public static com.google.inject.spi.InjectionPoint forConstructorOf(java.lang.Class)
    {
        java.lang.Class r0;
        com.google.inject.spi.InjectionPoint $r2;
        com.google.inject.TypeLiteral $r1;

        r0 := @parameter0: java.lang.Class;

        $r1 = staticinvoke <com.google.inject.TypeLiteral: com.google.inject.TypeLiteral get(java.lang.Class)>(r0);

        $r2 = staticinvoke <com.google.inject.spi.InjectionPoint: com.google.inject.spi.InjectionPoint forConstructorOf(com.google.inject.TypeLiteral)>($r1);

        return $r2;
    }

    public static java.util.Set forStaticMethodsAndFields(com.google.inject.TypeLiteral)
    {
        com.google.inject.internal.Errors $r0;
        java.util.List $r4;
        java.util.Set $r2;
        com.google.inject.ConfigurationException $r3, $r5;
        com.google.inject.TypeLiteral r1;
        boolean $z0;

        r1 := @parameter0: com.google.inject.TypeLiteral;

        $r0 = new com.google.inject.internal.Errors;

        specialinvoke $r0.<com.google.inject.internal.Errors: void <init>()>();

        $r2 = staticinvoke <com.google.inject.spi.InjectionPoint: java.util.Set getInjectionPoints(com.google.inject.TypeLiteral,boolean,com.google.inject.internal.Errors)>(r1, 1, $r0);

        $z0 = virtualinvoke $r0.<com.google.inject.internal.Errors: boolean hasErrors()>();

        if $z0 == 0 goto label1;

        $r3 = new com.google.inject.ConfigurationException;

        $r4 = virtualinvoke $r0.<com.google.inject.internal.Errors: java.util.List getMessages()>();

        specialinvoke $r3.<com.google.inject.ConfigurationException: void <init>(java.lang.Iterable)>($r4);

        $r5 = virtualinvoke $r3.<com.google.inject.ConfigurationException: com.google.inject.ConfigurationException withPartialValue(java.lang.Object)>($r2);

        throw $r5;

     label1:
        return $r2;
    }

    public static java.util.Set forStaticMethodsAndFields(java.lang.Class)
    {
        java.util.Set $r2;
        java.lang.Class r0;
        com.google.inject.TypeLiteral $r1;

        r0 := @parameter0: java.lang.Class;

        $r1 = staticinvoke <com.google.inject.TypeLiteral: com.google.inject.TypeLiteral get(java.lang.Class)>(r0);

        $r2 = staticinvoke <com.google.inject.spi.InjectionPoint: java.util.Set forStaticMethodsAndFields(com.google.inject.TypeLiteral)>($r1);

        return $r2;
    }

    public static java.util.Set forInstanceMethodsAndFields(com.google.inject.TypeLiteral)
    {
        com.google.inject.internal.Errors $r0;
        java.util.List $r4;
        java.util.Set $r2;
        com.google.inject.ConfigurationException $r3, $r5;
        com.google.inject.TypeLiteral r1;
        boolean $z0;

        r1 := @parameter0: com.google.inject.TypeLiteral;

        $r0 = new com.google.inject.internal.Errors;

        specialinvoke $r0.<com.google.inject.internal.Errors: void <init>()>();

        $r2 = staticinvoke <com.google.inject.spi.InjectionPoint: java.util.Set getInjectionPoints(com.google.inject.TypeLiteral,boolean,com.google.inject.internal.Errors)>(r1, 0, $r0);

        $z0 = virtualinvoke $r0.<com.google.inject.internal.Errors: boolean hasErrors()>();

        if $z0 == 0 goto label1;

        $r3 = new com.google.inject.ConfigurationException;

        $r4 = virtualinvoke $r0.<com.google.inject.internal.Errors: java.util.List getMessages()>();

        specialinvoke $r3.<com.google.inject.ConfigurationException: void <init>(java.lang.Iterable)>($r4);

        $r5 = virtualinvoke $r3.<com.google.inject.ConfigurationException: com.google.inject.ConfigurationException withPartialValue(java.lang.Object)>($r2);

        throw $r5;

     label1:
        return $r2;
    }

    public static java.util.Set forInstanceMethodsAndFields(java.lang.Class)
    {
        java.util.Set $r2;
        java.lang.Class r0;
        com.google.inject.TypeLiteral $r1;

        r0 := @parameter0: java.lang.Class;

        $r1 = staticinvoke <com.google.inject.TypeLiteral: com.google.inject.TypeLiteral get(java.lang.Class)>(r0);

        $r2 = staticinvoke <com.google.inject.spi.InjectionPoint: java.util.Set forInstanceMethodsAndFields(com.google.inject.TypeLiteral)>($r1);

        return $r2;
    }

    private static boolean checkForMisplacedBindingAnnotations(java.lang.reflect.Member, com.google.inject.internal.Errors)
    {
        java.lang.reflect.Member r1;
        java.lang.'annotation'.Annotation[] $r3;
        java.lang.reflect.Field $r7;
        com.google.inject.internal.Errors r0;
        java.lang.NoSuchFieldException $r8;
        java.lang.'annotation'.Annotation $r4;
        java.lang.Class $r5;
        java.lang.String $r6;
        java.lang.reflect.AnnotatedElement $r2;
        boolean $z0;

        r1 := @parameter0: java.lang.reflect.Member;

        r0 := @parameter1: com.google.inject.internal.Errors;

        $r2 = (java.lang.reflect.AnnotatedElement) r1;

        $r3 = interfaceinvoke $r2.<java.lang.reflect.AnnotatedElement: java.lang.'annotation'.Annotation[] getAnnotations()>();

        $r4 = staticinvoke <com.google.inject.internal.Annotations: java.lang.'annotation'.Annotation findBindingAnnotation(com.google.inject.internal.Errors,java.lang.reflect.Member,java.lang.'annotation'.Annotation[])>(r0, r1, $r3);

        if $r4 != null goto label1;

        return 0;

     label1:
        $z0 = r1 instanceof java.lang.reflect.Method;

        if $z0 == 0 goto label6;

     label2:
        $r5 = interfaceinvoke r1.<java.lang.reflect.Member: java.lang.Class getDeclaringClass()>();

        $r6 = interfaceinvoke r1.<java.lang.reflect.Member: java.lang.String getName()>();

        $r7 = virtualinvoke $r5.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>($r6);

        if $r7 == null goto label4;

     label3:
        return 0;

     label4:
        goto label6;

     label5:
        $r8 := @caughtexception;

     label6:
        virtualinvoke r0.<com.google.inject.internal.Errors: com.google.inject.internal.Errors misplacedBindingAnnotation(java.lang.reflect.Member,java.lang.'annotation'.Annotation)>(r1, $r4);

        return 1;

        catch java.lang.NoSuchFieldException from label2 to label3 with label5;
    }

    static java.lang.'annotation'.Annotation getAtInject(java.lang.reflect.AnnotatedElement)
    {
        java.lang.'annotation'.Annotation $r1, $r2;
        java.lang.reflect.AnnotatedElement r0;

        r0 := @parameter0: java.lang.reflect.AnnotatedElement;

        $r1 = interfaceinvoke r0.<java.lang.reflect.AnnotatedElement: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Ljavax/inject/Inject;");

        if $r1 != null goto label1;

        $r2 = interfaceinvoke r0.<java.lang.reflect.AnnotatedElement: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lcom/google/inject/Inject;");

        goto label2;

     label1:
        $r2 = $r1;

     label2:
        return $r2;
    }

    private static java.util.Set getInjectionPoints(com.google.inject.TypeLiteral, boolean, com.google.inject.internal.Errors)
    {
        com.google.inject.spi.InjectionPoint$InjectableMethod $r33;
        java.lang.reflect.Method[] $r8;
        java.lang.reflect.Method r29;
        boolean $z0, $z1, z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12;
        com.google.inject.spi.InjectionPoint$InjectableField $r32;
        com.google.inject.spi.InjectionPoint$OverrideIndex r23, $r34;
        java.util.Collection $r22;
        java.util.Set $r6;
        com.google.inject.ConfigurationException $r21;
        java.util.logging.Logger $r11, $r16;
        com.google.inject.spi.InjectionPoint$InjectableMember r30;
        java.util.List $r2;
        java.lang.'annotation'.Annotation $r9, $r17;
        com.google.inject.TypeLiteral r1, $r25;
        com.google.inject.spi.InjectionPoint$Position $r19, $r20;
        java.util.logging.Level $r10, $r15;
        com.google.inject.internal.util.$ImmutableSet $r4;
        int $i0, i1, $i2, $i3, $i4, i5, $i6, i7, i8, i9, $i11;
        com.google.inject.spi.InjectionPoint$InjectableMembers $r31;
        java.lang.reflect.Field r28;
        com.google.inject.internal.Errors r13;
        java.lang.reflect.Field[] $r27;
        com.google.inject.spi.InjectionPoint $r5;
        com.google.inject.internal.util.$ImmutableSet$Builder $r3;
        java.lang.Class $r7, $r26;
        java.lang.Object $r24;

        r1 := @parameter0: com.google.inject.TypeLiteral;

        z2 := @parameter1: boolean;

        r13 := @parameter2: com.google.inject.internal.Errors;

        $r31 = new com.google.inject.spi.InjectionPoint$InjectableMembers;

        specialinvoke $r31.<com.google.inject.spi.InjectionPoint$InjectableMembers: void <init>()>();

        r23 = null;

        $r2 = staticinvoke <com.google.inject.spi.InjectionPoint: java.util.List hierarchyFor(com.google.inject.TypeLiteral)>(r1);

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        i1 = $i0 - 1;

        i5 = i1;

     label01:
        if i5 < 0 goto label20;

        if r23 == null goto label03;

        if i5 >= i1 goto label03;

        if i5 != 0 goto label02;

        $r20 = <com.google.inject.spi.InjectionPoint$Position: com.google.inject.spi.InjectionPoint$Position BOTTOM>;

        r23.<com.google.inject.spi.InjectionPoint$OverrideIndex: com.google.inject.spi.InjectionPoint$Position position> = $r20;

        goto label03;

     label02:
        $r19 = <com.google.inject.spi.InjectionPoint$Position: com.google.inject.spi.InjectionPoint$Position MIDDLE>;

        r23.<com.google.inject.spi.InjectionPoint$OverrideIndex: com.google.inject.spi.InjectionPoint$Position position> = $r19;

     label03:
        $r24 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(i5);

        $r25 = (com.google.inject.TypeLiteral) $r24;

        $r26 = virtualinvoke $r25.<com.google.inject.TypeLiteral: java.lang.Class getRawType()>();

        $r27 = virtualinvoke $r26.<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>();

        $i6 = lengthof $r27;

        i7 = 0;

     label04:
        if i7 >= $i6 goto label07;

        r28 = $r27[i7];

        $i3 = virtualinvoke r28.<java.lang.reflect.Field: int getModifiers()>();

        $z8 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>($i3);

        if $z8 != z2 goto label06;

        $r17 = staticinvoke <com.google.inject.spi.InjectionPoint: java.lang.'annotation'.Annotation getAtInject(java.lang.reflect.AnnotatedElement)>(r28);

        if $r17 == null goto label06;

        $r32 = new com.google.inject.spi.InjectionPoint$InjectableField;

        specialinvoke $r32.<com.google.inject.spi.InjectionPoint$InjectableField: void <init>(com.google.inject.TypeLiteral,java.lang.reflect.Field,java.lang.'annotation'.Annotation)>($r25, r28, $r17);

        $z9 = $r32.<com.google.inject.spi.InjectionPoint$InjectableField: boolean jsr330>;

        if $z9 == 0 goto label05;

        $i4 = virtualinvoke r28.<java.lang.reflect.Field: int getModifiers()>();

        $z10 = staticinvoke <java.lang.reflect.Modifier: boolean isFinal(int)>($i4);

        if $z10 == 0 goto label05;

        virtualinvoke r13.<com.google.inject.internal.Errors: com.google.inject.internal.Errors cannotInjectFinalField(java.lang.reflect.Field)>(r28);

     label05:
        virtualinvoke $r31.<com.google.inject.spi.InjectionPoint$InjectableMembers: void add(com.google.inject.spi.InjectionPoint$InjectableMember)>($r32);

     label06:
        i7 = i7 + 1;

        goto label04;

     label07:
        $r7 = virtualinvoke $r25.<com.google.inject.TypeLiteral: java.lang.Class getRawType()>();

        $r8 = virtualinvoke $r7.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>();

        i8 = lengthof $r8;

        i9 = 0;

     label08:
        if i9 >= i8 goto label19;

        r29 = $r8[i9];

        $i2 = virtualinvoke r29.<java.lang.reflect.Method: int getModifiers()>();

        $z1 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>($i2);

        if $z1 != z2 goto label18;

        $r9 = staticinvoke <com.google.inject.spi.InjectionPoint: java.lang.'annotation'.Annotation getAtInject(java.lang.reflect.AnnotatedElement)>(r29);

        if $r9 == null goto label17;

        $r33 = new com.google.inject.spi.InjectionPoint$InjectableMethod;

        specialinvoke $r33.<com.google.inject.spi.InjectionPoint$InjectableMethod: void <init>(com.google.inject.TypeLiteral,java.lang.reflect.Method,java.lang.'annotation'.Annotation)>($r25, r29, $r9);

        $z4 = staticinvoke <com.google.inject.spi.InjectionPoint: boolean checkForMisplacedBindingAnnotations(java.lang.reflect.Member,com.google.inject.internal.Errors)>(r29, r13);

        $z5 = staticinvoke <com.google.inject.spi.InjectionPoint: boolean isValidMethod(com.google.inject.spi.InjectionPoint$InjectableMethod,com.google.inject.internal.Errors)>($r33, r13);

        if $z5 != 0 goto label09;

        $z12 = 1;

        goto label10;

     label09:
        $z12 = 0;

     label10:
        $z6 = $z4 | $z12;

        if $z6 == 0 goto label12;

        if r23 == null goto label18;

        $z7 = virtualinvoke r23.<com.google.inject.spi.InjectionPoint$OverrideIndex: boolean removeIfOverriddenBy(java.lang.reflect.Method,boolean,com.google.inject.spi.InjectionPoint$InjectableMethod)>(r29, 0, $r33);

        if $z7 == 0 goto label11;

        $r16 = <com.google.inject.spi.InjectionPoint: java.util.logging.Logger logger>;

        $r15 = <java.util.logging.Level: java.util.logging.Level WARNING>;

        virtualinvoke $r16.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Object)>($r15, "Method: {0} is not a valid injectable method (because it either has misplaced binding annotations or specifies type parameters) but is overriding a method that is valid. Because it is not valid, the method will not be injected. To fix this, make the method a valid injectable method.", r29);

     label11:
        goto label18;

     label12:
        if z2 == 0 goto label13;

        virtualinvoke $r31.<com.google.inject.spi.InjectionPoint$InjectableMembers: void add(com.google.inject.spi.InjectionPoint$InjectableMember)>($r33);

        goto label16;

     label13:
        if r23 != null goto label14;

        $r34 = new com.google.inject.spi.InjectionPoint$OverrideIndex;

        specialinvoke $r34.<com.google.inject.spi.InjectionPoint$OverrideIndex: void <init>(com.google.inject.spi.InjectionPoint$InjectableMembers)>($r31);

        r23 = $r34;

        goto label15;

     label14:
        virtualinvoke r23.<com.google.inject.spi.InjectionPoint$OverrideIndex: boolean removeIfOverriddenBy(java.lang.reflect.Method,boolean,com.google.inject.spi.InjectionPoint$InjectableMethod)>(r29, 1, $r33);

     label15:
        virtualinvoke r23.<com.google.inject.spi.InjectionPoint$OverrideIndex: void add(com.google.inject.spi.InjectionPoint$InjectableMethod)>($r33);

     label16:
        goto label18;

     label17:
        if r23 == null goto label18;

        $z3 = virtualinvoke r23.<com.google.inject.spi.InjectionPoint$OverrideIndex: boolean removeIfOverriddenBy(java.lang.reflect.Method,boolean,com.google.inject.spi.InjectionPoint$InjectableMethod)>(r29, 0, null);

        if $z3 == 0 goto label18;

        $r11 = <com.google.inject.spi.InjectionPoint: java.util.logging.Logger logger>;

        $r10 = <java.util.logging.Level: java.util.logging.Level WARNING>;

        virtualinvoke $r11.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Object)>($r10, "Method: {0} is not annotated with @Inject but is overriding a method that is annotated with @javax.inject.Inject.  Because it is not annotated with @Inject, the method will not be injected. To fix this, annotate the method with @Inject.", r29);

     label18:
        i9 = i9 + 1;

        goto label08;

     label19:
        $i11 = (int) -1;

        i5 = i5 + $i11;

        goto label01;

     label20:
        $z0 = virtualinvoke $r31.<com.google.inject.spi.InjectionPoint$InjectableMembers: boolean isEmpty()>();

        if $z0 == 0 goto label21;

        $r6 = staticinvoke <java.util.Collections: java.util.Set emptySet()>();

        return $r6;

     label21:
        $r3 = staticinvoke <com.google.inject.internal.util.$ImmutableSet: com.google.inject.internal.util.$ImmutableSet$Builder builder()>();

        r30 = $r31.<com.google.inject.spi.InjectionPoint$InjectableMembers: com.google.inject.spi.InjectionPoint$InjectableMember head>;

     label22:
        if r30 == null goto label27;

     label23:
        $r5 = virtualinvoke r30.<com.google.inject.spi.InjectionPoint$InjectableMember: com.google.inject.spi.InjectionPoint toInjectionPoint()>();

        virtualinvoke $r3.<com.google.inject.internal.util.$ImmutableSet$Builder: com.google.inject.internal.util.$ImmutableSet$Builder add(java.lang.Object)>($r5);

     label24:
        goto label26;

     label25:
        $r21 := @caughtexception;

        $z11 = r30.<com.google.inject.spi.InjectionPoint$InjectableMember: boolean optional>;

        if $z11 != 0 goto label26;

        $r22 = virtualinvoke $r21.<com.google.inject.ConfigurationException: java.util.Collection getErrorMessages()>();

        virtualinvoke r13.<com.google.inject.internal.Errors: com.google.inject.internal.Errors merge(java.util.Collection)>($r22);

     label26:
        r30 = r30.<com.google.inject.spi.InjectionPoint$InjectableMember: com.google.inject.spi.InjectionPoint$InjectableMember next>;

        goto label22;

     label27:
        $r4 = virtualinvoke $r3.<com.google.inject.internal.util.$ImmutableSet$Builder: com.google.inject.internal.util.$ImmutableSet build()>();

        return $r4;

        catch com.google.inject.ConfigurationException from label23 to label24 with label25;
    }

    private static boolean isValidMethod(com.google.inject.spi.InjectionPoint$InjectableMethod, com.google.inject.internal.Errors)
    {
        com.google.inject.spi.InjectionPoint$InjectableMethod r0;
        com.google.inject.internal.Errors r3;
        java.lang.reflect.TypeVariable[] $r2;
        int $i0, $i1;
        java.lang.reflect.Method r1;
        boolean $z0, $z1, z2;

        r0 := @parameter0: com.google.inject.spi.InjectionPoint$InjectableMethod;

        r3 := @parameter1: com.google.inject.internal.Errors;

        z2 = 1;

        $z0 = r0.<com.google.inject.spi.InjectionPoint$InjectableMethod: boolean jsr330>;

        if $z0 == 0 goto label2;

        r1 = r0.<com.google.inject.spi.InjectionPoint$InjectableMethod: java.lang.reflect.Method method>;

        $i0 = virtualinvoke r1.<java.lang.reflect.Method: int getModifiers()>();

        $z1 = staticinvoke <java.lang.reflect.Modifier: boolean isAbstract(int)>($i0);

        if $z1 == 0 goto label1;

        virtualinvoke r3.<com.google.inject.internal.Errors: com.google.inject.internal.Errors cannotInjectAbstractMethod(java.lang.reflect.Method)>(r1);

        z2 = 0;

     label1:
        $r2 = virtualinvoke r1.<java.lang.reflect.Method: java.lang.reflect.TypeVariable[] getTypeParameters()>();

        $i1 = lengthof $r2;

        if $i1 <= 0 goto label2;

        virtualinvoke r3.<com.google.inject.internal.Errors: com.google.inject.internal.Errors cannotInjectMethodWithTypeParameters(java.lang.reflect.Method)>(r1);

        z2 = 0;

     label2:
        return z2;
    }

    private static java.util.List hierarchyFor(com.google.inject.TypeLiteral)
    {
        java.lang.Class $r2, $r3, $r4;
        com.google.inject.TypeLiteral r1, r5;
        java.util.ArrayList $r0;

        r1 := @parameter0: com.google.inject.TypeLiteral;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        r5 = r1;

     label1:
        $r2 = virtualinvoke r5.<com.google.inject.TypeLiteral: java.lang.Class getRawType()>();

        if $r2 == class "Ljava/lang/Object;" goto label2;

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(r5);

        $r3 = virtualinvoke r5.<com.google.inject.TypeLiteral: java.lang.Class getRawType()>();

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.Class getSuperclass()>();

        r5 = virtualinvoke r5.<com.google.inject.TypeLiteral: com.google.inject.TypeLiteral getSupertype(java.lang.Class)>($r4);

        goto label1;

     label2:
        return $r0;
    }

    private static boolean overrides(java.lang.reflect.Method, java.lang.reflect.Method)
    {
        java.lang.Package $r3, $r5;
        int $i0;
        java.lang.Class $r2, $r4;
        java.lang.reflect.Method r0, r1;
        boolean $z0, $z1, $z2, $z3;

        r1 := @parameter0: java.lang.reflect.Method;

        r0 := @parameter1: java.lang.reflect.Method;

        $i0 = virtualinvoke r0.<java.lang.reflect.Method: int getModifiers()>();

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>($i0);

        if $z0 != 0 goto label1;

        $z1 = staticinvoke <java.lang.reflect.Modifier: boolean isProtected(int)>($i0);

        if $z1 == 0 goto label2;

     label1:
        return 1;

     label2:
        $z2 = staticinvoke <java.lang.reflect.Modifier: boolean isPrivate(int)>($i0);

        if $z2 == 0 goto label3;

        return 0;

     label3:
        $r2 = virtualinvoke r1.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.Package getPackage()>();

        $r4 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>();

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.Package getPackage()>();

        $z3 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>($r5);

        return $z3;
    }

    static boolean access$000(java.lang.reflect.Method, java.lang.reflect.Method)
    {
        java.lang.reflect.Method r0, r1;
        boolean $z0;

        r0 := @parameter0: java.lang.reflect.Method;

        r1 := @parameter1: java.lang.reflect.Method;

        $z0 = staticinvoke <com.google.inject.spi.InjectionPoint: boolean overrides(java.lang.reflect.Method,java.lang.reflect.Method)>(r0, r1);

        return $z0;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.String $r1;
        java.util.logging.Logger $r2;

        $r0 = class "Lcom/google/inject/spi/InjectionPoint;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getName()>();

        $r2 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>($r1);

        <com.google.inject.spi.InjectionPoint: java.util.logging.Logger logger> = $r2;

        return;
    }
}
