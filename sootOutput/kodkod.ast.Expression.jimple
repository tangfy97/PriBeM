public abstract class kodkod.ast.Expression extends kodkod.ast.Node
{
    public static final kodkod.ast.Expression UNIV;
    public static final kodkod.ast.Expression IDEN;
    public static final kodkod.ast.Expression NONE;
    public static final kodkod.ast.Expression INTS;

    static void <clinit>()
    {
        kodkod.ast.ConstantExpression $r0, $r1, $r2, $r3;

        $r0 = new kodkod.ast.ConstantExpression;

        specialinvoke $r0.<kodkod.ast.ConstantExpression: void <init>(java.lang.String,int)>("univ", 1);

        <kodkod.ast.Expression: kodkod.ast.Expression UNIV> = $r0;

        $r1 = new kodkod.ast.ConstantExpression;

        specialinvoke $r1.<kodkod.ast.ConstantExpression: void <init>(java.lang.String,int)>("iden", 2);

        <kodkod.ast.Expression: kodkod.ast.Expression IDEN> = $r1;

        $r2 = new kodkod.ast.ConstantExpression;

        specialinvoke $r2.<kodkod.ast.ConstantExpression: void <init>(java.lang.String,int)>("none", 1);

        <kodkod.ast.Expression: kodkod.ast.Expression NONE> = $r2;

        $r3 = new kodkod.ast.ConstantExpression;

        specialinvoke $r3.<kodkod.ast.ConstantExpression: void <init>(java.lang.String,int)>("ints", 1);

        <kodkod.ast.Expression: kodkod.ast.Expression INTS> = $r3;

        return;
    }

    void <init>()
    {
        kodkod.ast.Expression r0;

        r0 := @this: kodkod.ast.Expression;

        specialinvoke r0.<kodkod.ast.Node: void <init>()>();

        return;
    }

    public final kodkod.ast.Expression join(kodkod.ast.Expression)
    {
        kodkod.ast.operator.ExprOperator $r2;
        kodkod.ast.Expression r0, r1, $r3;

        r0 := @this: kodkod.ast.Expression;

        r1 := @parameter0: kodkod.ast.Expression;

        $r2 = <kodkod.ast.operator.ExprOperator: kodkod.ast.operator.ExprOperator JOIN>;

        $r3 = virtualinvoke r0.<kodkod.ast.Expression: kodkod.ast.Expression compose(kodkod.ast.operator.ExprOperator,kodkod.ast.Expression)>($r2, r1);

        return $r3;
    }

    public final kodkod.ast.Expression product(kodkod.ast.Expression)
    {
        kodkod.ast.operator.ExprOperator $r2;
        kodkod.ast.Expression r0, r1, $r3;

        r0 := @this: kodkod.ast.Expression;

        r1 := @parameter0: kodkod.ast.Expression;

        $r2 = <kodkod.ast.operator.ExprOperator: kodkod.ast.operator.ExprOperator PRODUCT>;

        $r3 = virtualinvoke r0.<kodkod.ast.Expression: kodkod.ast.Expression compose(kodkod.ast.operator.ExprOperator,kodkod.ast.Expression)>($r2, r1);

        return $r3;
    }

    public final kodkod.ast.Expression union(kodkod.ast.Expression)
    {
        kodkod.ast.operator.ExprOperator $r2;
        kodkod.ast.Expression r0, r1, $r3;

        r0 := @this: kodkod.ast.Expression;

        r1 := @parameter0: kodkod.ast.Expression;

        $r2 = <kodkod.ast.operator.ExprOperator: kodkod.ast.operator.ExprOperator UNION>;

        $r3 = virtualinvoke r0.<kodkod.ast.Expression: kodkod.ast.Expression compose(kodkod.ast.operator.ExprOperator,kodkod.ast.Expression)>($r2, r1);

        return $r3;
    }

    public final kodkod.ast.Expression difference(kodkod.ast.Expression)
    {
        kodkod.ast.operator.ExprOperator $r2;
        kodkod.ast.Expression r0, r1, $r3;

        r0 := @this: kodkod.ast.Expression;

        r1 := @parameter0: kodkod.ast.Expression;

        $r2 = <kodkod.ast.operator.ExprOperator: kodkod.ast.operator.ExprOperator DIFFERENCE>;

        $r3 = virtualinvoke r0.<kodkod.ast.Expression: kodkod.ast.Expression compose(kodkod.ast.operator.ExprOperator,kodkod.ast.Expression)>($r2, r1);

        return $r3;
    }

    public final kodkod.ast.Expression intersection(kodkod.ast.Expression)
    {
        kodkod.ast.operator.ExprOperator $r2;
        kodkod.ast.Expression r0, r1, $r3;

        r0 := @this: kodkod.ast.Expression;

        r1 := @parameter0: kodkod.ast.Expression;

        $r2 = <kodkod.ast.operator.ExprOperator: kodkod.ast.operator.ExprOperator INTERSECTION>;

        $r3 = virtualinvoke r0.<kodkod.ast.Expression: kodkod.ast.Expression compose(kodkod.ast.operator.ExprOperator,kodkod.ast.Expression)>($r2, r1);

        return $r3;
    }

    public final kodkod.ast.Expression override(kodkod.ast.Expression)
    {
        kodkod.ast.operator.ExprOperator $r2;
        kodkod.ast.Expression r0, r1, $r3;

        r0 := @this: kodkod.ast.Expression;

        r1 := @parameter0: kodkod.ast.Expression;

        $r2 = <kodkod.ast.operator.ExprOperator: kodkod.ast.operator.ExprOperator OVERRIDE>;

        $r3 = virtualinvoke r0.<kodkod.ast.Expression: kodkod.ast.Expression compose(kodkod.ast.operator.ExprOperator,kodkod.ast.Expression)>($r2, r1);

        return $r3;
    }

    public final kodkod.ast.Expression compose(kodkod.ast.operator.ExprOperator, kodkod.ast.Expression)
    {
        kodkod.ast.operator.ExprOperator r2;
        kodkod.ast.BinaryExpression $r0;
        kodkod.ast.Expression r1, r3;

        r1 := @this: kodkod.ast.Expression;

        r2 := @parameter0: kodkod.ast.operator.ExprOperator;

        r3 := @parameter1: kodkod.ast.Expression;

        $r0 = new kodkod.ast.BinaryExpression;

        specialinvoke $r0.<kodkod.ast.BinaryExpression: void <init>(kodkod.ast.Expression,kodkod.ast.operator.ExprOperator,kodkod.ast.Expression)>(r1, r2, r3);

        return $r0;
    }

    public static transient kodkod.ast.Expression union(kodkod.ast.Expression[])
    {
        kodkod.ast.operator.ExprOperator $r1;
        kodkod.ast.Expression $r2;
        kodkod.ast.Expression[] r0;

        r0 := @parameter0: kodkod.ast.Expression[];

        $r1 = <kodkod.ast.operator.ExprOperator: kodkod.ast.operator.ExprOperator UNION>;

        $r2 = staticinvoke <kodkod.ast.Expression: kodkod.ast.Expression compose(kodkod.ast.operator.ExprOperator,kodkod.ast.Expression[])>($r1, r0);

        return $r2;
    }

    public static kodkod.ast.Expression union(java.util.Collection)
    {
        kodkod.ast.operator.ExprOperator $r1;
        kodkod.ast.Expression $r2;
        java.util.Collection r0;

        r0 := @parameter0: java.util.Collection;

        $r1 = <kodkod.ast.operator.ExprOperator: kodkod.ast.operator.ExprOperator UNION>;

        $r2 = staticinvoke <kodkod.ast.Expression: kodkod.ast.Expression compose(kodkod.ast.operator.ExprOperator,java.util.Collection)>($r1, r0);

        return $r2;
    }

    public static transient kodkod.ast.Expression intersection(kodkod.ast.Expression[])
    {
        kodkod.ast.operator.ExprOperator $r1;
        kodkod.ast.Expression $r2;
        kodkod.ast.Expression[] r0;

        r0 := @parameter0: kodkod.ast.Expression[];

        $r1 = <kodkod.ast.operator.ExprOperator: kodkod.ast.operator.ExprOperator INTERSECTION>;

        $r2 = staticinvoke <kodkod.ast.Expression: kodkod.ast.Expression compose(kodkod.ast.operator.ExprOperator,kodkod.ast.Expression[])>($r1, r0);

        return $r2;
    }

    public static kodkod.ast.Expression intersection(java.util.Collection)
    {
        kodkod.ast.operator.ExprOperator $r1;
        kodkod.ast.Expression $r2;
        java.util.Collection r0;

        r0 := @parameter0: java.util.Collection;

        $r1 = <kodkod.ast.operator.ExprOperator: kodkod.ast.operator.ExprOperator INTERSECTION>;

        $r2 = staticinvoke <kodkod.ast.Expression: kodkod.ast.Expression compose(kodkod.ast.operator.ExprOperator,java.util.Collection)>($r1, r0);

        return $r2;
    }

    public static transient kodkod.ast.Expression product(kodkod.ast.Expression[])
    {
        kodkod.ast.operator.ExprOperator $r1;
        kodkod.ast.Expression $r2;
        kodkod.ast.Expression[] r0;

        r0 := @parameter0: kodkod.ast.Expression[];

        $r1 = <kodkod.ast.operator.ExprOperator: kodkod.ast.operator.ExprOperator PRODUCT>;

        $r2 = staticinvoke <kodkod.ast.Expression: kodkod.ast.Expression compose(kodkod.ast.operator.ExprOperator,kodkod.ast.Expression[])>($r1, r0);

        return $r2;
    }

    public static kodkod.ast.Expression product(java.util.Collection)
    {
        kodkod.ast.operator.ExprOperator $r1;
        kodkod.ast.Expression $r2;
        java.util.Collection r0;

        r0 := @parameter0: java.util.Collection;

        $r1 = <kodkod.ast.operator.ExprOperator: kodkod.ast.operator.ExprOperator PRODUCT>;

        $r2 = staticinvoke <kodkod.ast.Expression: kodkod.ast.Expression compose(kodkod.ast.operator.ExprOperator,java.util.Collection)>($r1, r0);

        return $r2;
    }

    public static transient kodkod.ast.Expression override(kodkod.ast.Expression[])
    {
        kodkod.ast.operator.ExprOperator $r1;
        kodkod.ast.Expression $r2;
        kodkod.ast.Expression[] r0;

        r0 := @parameter0: kodkod.ast.Expression[];

        $r1 = <kodkod.ast.operator.ExprOperator: kodkod.ast.operator.ExprOperator OVERRIDE>;

        $r2 = staticinvoke <kodkod.ast.Expression: kodkod.ast.Expression compose(kodkod.ast.operator.ExprOperator,kodkod.ast.Expression[])>($r1, r0);

        return $r2;
    }

    public static kodkod.ast.Expression override(java.util.Collection)
    {
        kodkod.ast.operator.ExprOperator $r1;
        kodkod.ast.Expression $r2;
        java.util.Collection r0;

        r0 := @parameter0: java.util.Collection;

        $r1 = <kodkod.ast.operator.ExprOperator: kodkod.ast.operator.ExprOperator OVERRIDE>;

        $r2 = staticinvoke <kodkod.ast.Expression: kodkod.ast.Expression compose(kodkod.ast.operator.ExprOperator,java.util.Collection)>($r1, r0);

        return $r2;
    }

    public static transient kodkod.ast.Expression compose(kodkod.ast.operator.ExprOperator, kodkod.ast.Expression[])
    {
        java.lang.Object[] $r13;
        kodkod.ast.BinaryExpression $r1;
        int $i0, $i1;
        java.lang.String $r8, $r10;
        kodkod.ast.Expression $r3, $r4, $r5;
        java.lang.IllegalArgumentException $r6;
        kodkod.ast.operator.ExprOperator r2;
        kodkod.ast.NaryExpression $r11;
        kodkod.ast.Expression[] r0, $r12, $r14;
        java.lang.StringBuilder $r7, $r9;

        r2 := @parameter0: kodkod.ast.operator.ExprOperator;

        r0 := @parameter1: kodkod.ast.Expression[];

        $i0 = lengthof r0;

        tableswitch($i0)
        {
            case 0: goto label1;
            case 1: goto label2;
            case 2: goto label3;
            default: goto label4;
        };

     label1:
        $r6 = new java.lang.IllegalArgumentException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>(java.lang.String)>("Expected at least one argument: ");

        $r8 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>(r0);

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r6;

     label2:
        $r5 = r0[0];

        return $r5;

     label3:
        $r1 = new kodkod.ast.BinaryExpression;

        $r4 = r0[0];

        $r3 = r0[1];

        specialinvoke $r1.<kodkod.ast.BinaryExpression: void <init>(kodkod.ast.Expression,kodkod.ast.operator.ExprOperator,kodkod.ast.Expression)>($r4, r2, $r3);

        return $r1;

     label4:
        $r11 = new kodkod.ast.NaryExpression;

        $i1 = lengthof r0;

        $r12 = newarray (kodkod.ast.Expression)[$i1];

        $r13 = staticinvoke <kodkod.util.collections.Containers: java.lang.Object[] copy(java.lang.Object[],java.lang.Object[])>(r0, $r12);

        $r14 = (kodkod.ast.Expression[]) $r13;

        specialinvoke $r11.<kodkod.ast.NaryExpression: void <init>(kodkod.ast.operator.ExprOperator,kodkod.ast.Expression[])>(r2, $r14);

        return $r11;
    }

    public static kodkod.ast.Expression compose(kodkod.ast.operator.ExprOperator, java.util.Collection)
    {
        java.lang.Object[] $r17;
        kodkod.ast.BinaryExpression $r2;
        int $i0, $i1;
        java.lang.String $r14;
        java.util.Iterator $r1, $r8;
        java.util.Collection r0;
        kodkod.ast.Expression $r5, $r7, $r10;
        java.lang.IllegalArgumentException $r11;
        kodkod.ast.operator.ExprOperator r4;
        kodkod.ast.NaryExpression $r15;
        java.lang.Object $r3, $r6, $r9;
        java.lang.StringBuilder $r12, $r13;
        kodkod.ast.Expression[] $r16, $r18;

        r4 := @parameter0: kodkod.ast.operator.ExprOperator;

        r0 := @parameter1: java.util.Collection;

        $i0 = interfaceinvoke r0.<java.util.Collection: int size()>();

        tableswitch($i0)
        {
            case 0: goto label1;
            case 1: goto label2;
            case 2: goto label3;
            default: goto label4;
        };

     label1:
        $r11 = new java.lang.IllegalArgumentException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>(java.lang.String)>("Expected at least one argument: ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r14);

        throw $r11;

     label2:
        $r8 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

        $r9 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        $r10 = (kodkod.ast.Expression) $r9;

        return $r10;

     label3:
        $r1 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

        $r2 = new kodkod.ast.BinaryExpression;

        $r3 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (kodkod.ast.Expression) $r3;

        $r6 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r7 = (kodkod.ast.Expression) $r6;

        specialinvoke $r2.<kodkod.ast.BinaryExpression: void <init>(kodkod.ast.Expression,kodkod.ast.operator.ExprOperator,kodkod.ast.Expression)>($r5, r4, $r7);

        return $r2;

     label4:
        $r15 = new kodkod.ast.NaryExpression;

        $i1 = interfaceinvoke r0.<java.util.Collection: int size()>();

        $r16 = newarray (kodkod.ast.Expression)[$i1];

        $r17 = interfaceinvoke r0.<java.util.Collection: java.lang.Object[] toArray(java.lang.Object[])>($r16);

        $r18 = (kodkod.ast.Expression[]) $r17;

        specialinvoke $r15.<kodkod.ast.NaryExpression: void <init>(kodkod.ast.operator.ExprOperator,kodkod.ast.Expression[])>(r4, $r18);

        return $r15;
    }

    public final kodkod.ast.Expression transpose()
    {
        kodkod.ast.Expression r0, $r2;
        kodkod.ast.operator.ExprOperator $r1;

        r0 := @this: kodkod.ast.Expression;

        $r1 = <kodkod.ast.operator.ExprOperator: kodkod.ast.operator.ExprOperator TRANSPOSE>;

        $r2 = virtualinvoke r0.<kodkod.ast.Expression: kodkod.ast.Expression apply(kodkod.ast.operator.ExprOperator)>($r1);

        return $r2;
    }

    public final kodkod.ast.Expression closure()
    {
        kodkod.ast.Expression r0, $r2;
        kodkod.ast.operator.ExprOperator $r1;

        r0 := @this: kodkod.ast.Expression;

        $r1 = <kodkod.ast.operator.ExprOperator: kodkod.ast.operator.ExprOperator CLOSURE>;

        $r2 = virtualinvoke r0.<kodkod.ast.Expression: kodkod.ast.Expression apply(kodkod.ast.operator.ExprOperator)>($r1);

        return $r2;
    }

    public final kodkod.ast.Expression reflexiveClosure()
    {
        kodkod.ast.Expression r0, $r2;
        kodkod.ast.operator.ExprOperator $r1;

        r0 := @this: kodkod.ast.Expression;

        $r1 = <kodkod.ast.operator.ExprOperator: kodkod.ast.operator.ExprOperator REFLEXIVE_CLOSURE>;

        $r2 = virtualinvoke r0.<kodkod.ast.Expression: kodkod.ast.Expression apply(kodkod.ast.operator.ExprOperator)>($r1);

        return $r2;
    }

    public final kodkod.ast.Expression apply(kodkod.ast.operator.ExprOperator)
    {
        kodkod.ast.operator.ExprOperator r1;
        kodkod.ast.Expression r2;
        kodkod.ast.UnaryExpression $r0;

        r2 := @this: kodkod.ast.Expression;

        r1 := @parameter0: kodkod.ast.operator.ExprOperator;

        $r0 = new kodkod.ast.UnaryExpression;

        specialinvoke $r0.<kodkod.ast.UnaryExpression: void <init>(kodkod.ast.operator.ExprOperator,kodkod.ast.Expression)>(r1, r2);

        return $r0;
    }

    public final transient kodkod.ast.Expression project(kodkod.ast.IntExpression[])
    {
        kodkod.ast.ProjectExpression $r0;
        kodkod.ast.Expression r1;
        kodkod.ast.IntExpression[] r2;

        r1 := @this: kodkod.ast.Expression;

        r2 := @parameter0: kodkod.ast.IntExpression[];

        $r0 = new kodkod.ast.ProjectExpression;

        specialinvoke $r0.<kodkod.ast.ProjectExpression: void <init>(kodkod.ast.Expression,kodkod.ast.IntExpression[])>(r1, r2);

        return $r0;
    }

    public final kodkod.ast.IntExpression count()
    {
        kodkod.ast.Expression r0;
        kodkod.ast.IntExpression $r2;
        kodkod.ast.operator.ExprCastOperator $r1;

        r0 := @this: kodkod.ast.Expression;

        $r1 = <kodkod.ast.operator.ExprCastOperator: kodkod.ast.operator.ExprCastOperator CARDINALITY>;

        $r2 = virtualinvoke r0.<kodkod.ast.Expression: kodkod.ast.IntExpression apply(kodkod.ast.operator.ExprCastOperator)>($r1);

        return $r2;
    }

    public final kodkod.ast.IntExpression sum()
    {
        kodkod.ast.Expression r0;
        kodkod.ast.IntExpression $r2;
        kodkod.ast.operator.ExprCastOperator $r1;

        r0 := @this: kodkod.ast.Expression;

        $r1 = <kodkod.ast.operator.ExprCastOperator: kodkod.ast.operator.ExprCastOperator SUM>;

        $r2 = virtualinvoke r0.<kodkod.ast.Expression: kodkod.ast.IntExpression apply(kodkod.ast.operator.ExprCastOperator)>($r1);

        return $r2;
    }

    public final kodkod.ast.IntExpression apply(kodkod.ast.operator.ExprCastOperator)
    {
        kodkod.ast.ExprToIntCast $r0;
        kodkod.ast.Expression r1;
        kodkod.ast.operator.ExprCastOperator r2;

        r1 := @this: kodkod.ast.Expression;

        r2 := @parameter0: kodkod.ast.operator.ExprCastOperator;

        $r0 = new kodkod.ast.ExprToIntCast;

        specialinvoke $r0.<kodkod.ast.ExprToIntCast: void <init>(kodkod.ast.Expression,kodkod.ast.operator.ExprCastOperator)>(r1, r2);

        return $r0;
    }

    public final kodkod.ast.Formula eq(kodkod.ast.Expression)
    {
        kodkod.ast.Formula $r3;
        kodkod.ast.Expression r0, r1;
        kodkod.ast.operator.ExprCompOperator $r2;

        r0 := @this: kodkod.ast.Expression;

        r1 := @parameter0: kodkod.ast.Expression;

        $r2 = <kodkod.ast.operator.ExprCompOperator: kodkod.ast.operator.ExprCompOperator EQUALS>;

        $r3 = virtualinvoke r0.<kodkod.ast.Expression: kodkod.ast.Formula compare(kodkod.ast.operator.ExprCompOperator,kodkod.ast.Expression)>($r2, r1);

        return $r3;
    }

    public final kodkod.ast.Formula in(kodkod.ast.Expression)
    {
        kodkod.ast.Formula $r3;
        kodkod.ast.Expression r0, r1;
        kodkod.ast.operator.ExprCompOperator $r2;

        r0 := @this: kodkod.ast.Expression;

        r1 := @parameter0: kodkod.ast.Expression;

        $r2 = <kodkod.ast.operator.ExprCompOperator: kodkod.ast.operator.ExprCompOperator SUBSET>;

        $r3 = virtualinvoke r0.<kodkod.ast.Expression: kodkod.ast.Formula compare(kodkod.ast.operator.ExprCompOperator,kodkod.ast.Expression)>($r2, r1);

        return $r3;
    }

    public final kodkod.ast.Formula compare(kodkod.ast.operator.ExprCompOperator, kodkod.ast.Expression)
    {
        kodkod.ast.ComparisonFormula $r0;
        kodkod.ast.Expression r1, r3;
        kodkod.ast.operator.ExprCompOperator r2;

        r1 := @this: kodkod.ast.Expression;

        r2 := @parameter0: kodkod.ast.operator.ExprCompOperator;

        r3 := @parameter1: kodkod.ast.Expression;

        $r0 = new kodkod.ast.ComparisonFormula;

        specialinvoke $r0.<kodkod.ast.ComparisonFormula: void <init>(kodkod.ast.Expression,kodkod.ast.operator.ExprCompOperator,kodkod.ast.Expression)>(r1, r2, r3);

        return $r0;
    }

    public final kodkod.ast.Formula some()
    {
        kodkod.ast.Expression r0;
        kodkod.ast.operator.Multiplicity $r1;
        kodkod.ast.Formula $r2;

        r0 := @this: kodkod.ast.Expression;

        $r1 = <kodkod.ast.operator.Multiplicity: kodkod.ast.operator.Multiplicity SOME>;

        $r2 = virtualinvoke r0.<kodkod.ast.Expression: kodkod.ast.Formula apply(kodkod.ast.operator.Multiplicity)>($r1);

        return $r2;
    }

    public final kodkod.ast.Formula no()
    {
        kodkod.ast.Expression r0;
        kodkod.ast.operator.Multiplicity $r1;
        kodkod.ast.Formula $r2;

        r0 := @this: kodkod.ast.Expression;

        $r1 = <kodkod.ast.operator.Multiplicity: kodkod.ast.operator.Multiplicity NO>;

        $r2 = virtualinvoke r0.<kodkod.ast.Expression: kodkod.ast.Formula apply(kodkod.ast.operator.Multiplicity)>($r1);

        return $r2;
    }

    public final kodkod.ast.Formula one()
    {
        kodkod.ast.Expression r0;
        kodkod.ast.operator.Multiplicity $r1;
        kodkod.ast.Formula $r2;

        r0 := @this: kodkod.ast.Expression;

        $r1 = <kodkod.ast.operator.Multiplicity: kodkod.ast.operator.Multiplicity ONE>;

        $r2 = virtualinvoke r0.<kodkod.ast.Expression: kodkod.ast.Formula apply(kodkod.ast.operator.Multiplicity)>($r1);

        return $r2;
    }

    public final kodkod.ast.Formula lone()
    {
        kodkod.ast.Expression r0;
        kodkod.ast.operator.Multiplicity $r1;
        kodkod.ast.Formula $r2;

        r0 := @this: kodkod.ast.Expression;

        $r1 = <kodkod.ast.operator.Multiplicity: kodkod.ast.operator.Multiplicity LONE>;

        $r2 = virtualinvoke r0.<kodkod.ast.Expression: kodkod.ast.Formula apply(kodkod.ast.operator.Multiplicity)>($r1);

        return $r2;
    }

    public final kodkod.ast.Formula apply(kodkod.ast.operator.Multiplicity)
    {
        kodkod.ast.MultiplicityFormula $r0;
        kodkod.ast.Expression r2;
        kodkod.ast.operator.Multiplicity r1;

        r2 := @this: kodkod.ast.Expression;

        r1 := @parameter0: kodkod.ast.operator.Multiplicity;

        $r0 = new kodkod.ast.MultiplicityFormula;

        specialinvoke $r0.<kodkod.ast.MultiplicityFormula: void <init>(kodkod.ast.operator.Multiplicity,kodkod.ast.Expression)>(r1, r2);

        return $r0;
    }

    public abstract int arity();

    public abstract java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor);
}
