public abstract class org.jsoup.nodes.Node extends java.lang.Object implements java.lang.Cloneable
{
    org.jsoup.nodes.Node parentNode;
    java.util.List childNodes;
    org.jsoup.nodes.Attributes attributes;
    java.lang.String baseUri;
    int siblingIndex;

    protected void <init>(java.lang.String, org.jsoup.nodes.Attributes)
    {
        org.jsoup.nodes.Node r0;
        org.jsoup.nodes.Attributes r2;
        java.lang.String r1, $r4;
        java.util.ArrayList $r3;

        r0 := @this: org.jsoup.nodes.Node;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.jsoup.nodes.Attributes;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        staticinvoke <org.jsoup.helper.Validate: void notNull(java.lang.Object)>(r1);

        staticinvoke <org.jsoup.helper.Validate: void notNull(java.lang.Object)>(r2);

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>(int)>(4);

        r0.<org.jsoup.nodes.Node: java.util.List childNodes> = $r3;

        $r4 = virtualinvoke r1.<java.lang.String: java.lang.String trim()>();

        r0.<org.jsoup.nodes.Node: java.lang.String baseUri> = $r4;

        r0.<org.jsoup.nodes.Node: org.jsoup.nodes.Attributes attributes> = r2;

        return;
    }

    protected void <init>(java.lang.String)
    {
        org.jsoup.nodes.Node r0;
        org.jsoup.nodes.Attributes $r2;
        java.lang.String r1;

        r0 := @this: org.jsoup.nodes.Node;

        r1 := @parameter0: java.lang.String;

        $r2 = new org.jsoup.nodes.Attributes;

        specialinvoke $r2.<org.jsoup.nodes.Attributes: void <init>()>();

        specialinvoke r0.<org.jsoup.nodes.Node: void <init>(java.lang.String,org.jsoup.nodes.Attributes)>(r1, $r2);

        return;
    }

    protected void <init>()
    {
        org.jsoup.nodes.Node r0;
        java.util.List $r1;

        r0 := @this: org.jsoup.nodes.Node;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        r0.<org.jsoup.nodes.Node: java.util.List childNodes> = $r1;

        r0.<org.jsoup.nodes.Node: org.jsoup.nodes.Attributes attributes> = null;

        return;
    }

    public abstract java.lang.String nodeName();

    public java.lang.String attr(java.lang.String)
    {
        org.jsoup.nodes.Attributes $r2, $r7;
        org.jsoup.nodes.Node r1;
        int $i0;
        java.lang.String r0, $r3, $r4, $r5, $r6, $r8;
        boolean $z0, $z1;

        r1 := @this: org.jsoup.nodes.Node;

        r0 := @parameter0: java.lang.String;

        staticinvoke <org.jsoup.helper.Validate: void notNull(java.lang.Object)>(r0);

        $r2 = r1.<org.jsoup.nodes.Node: org.jsoup.nodes.Attributes attributes>;

        $z0 = virtualinvoke $r2.<org.jsoup.nodes.Attributes: boolean hasKey(java.lang.String)>(r0);

        if $z0 == 0 goto label1;

        $r7 = r1.<org.jsoup.nodes.Node: org.jsoup.nodes.Attributes attributes>;

        $r8 = virtualinvoke $r7.<org.jsoup.nodes.Attributes: java.lang.String get(java.lang.String)>(r0);

        return $r8;

     label1:
        $r3 = virtualinvoke r0.<java.lang.String: java.lang.String toLowerCase()>();

        $z1 = virtualinvoke $r3.<java.lang.String: boolean startsWith(java.lang.String)>("abs:");

        if $z1 == 0 goto label2;

        $r4 = "abs:";

        $i0 = virtualinvoke $r4.<java.lang.String: int length()>();

        $r5 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>($i0);

        $r6 = virtualinvoke r1.<org.jsoup.nodes.Node: java.lang.String absUrl(java.lang.String)>($r5);

        return $r6;

     label2:
        return "";
    }

    public org.jsoup.nodes.Attributes attributes()
    {
        org.jsoup.nodes.Node r0;
        org.jsoup.nodes.Attributes $r1;

        r0 := @this: org.jsoup.nodes.Node;

        $r1 = r0.<org.jsoup.nodes.Node: org.jsoup.nodes.Attributes attributes>;

        return $r1;
    }

    public org.jsoup.nodes.Node attr(java.lang.String, java.lang.String)
    {
        org.jsoup.nodes.Node r0;
        org.jsoup.nodes.Attributes $r3;
        java.lang.String r1, r2;

        r0 := @this: org.jsoup.nodes.Node;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = r0.<org.jsoup.nodes.Node: org.jsoup.nodes.Attributes attributes>;

        virtualinvoke $r3.<org.jsoup.nodes.Attributes: void put(java.lang.String,java.lang.String)>(r1, r2);

        return r0;
    }

    public boolean hasAttr(java.lang.String)
    {
        org.jsoup.nodes.Attributes $r5, $r7;
        org.jsoup.nodes.Node r2;
        int $i0;
        java.lang.String r0, $r1, $r3, $r4, $r6;
        boolean $z0, $z1, $z2, $z3;

        r2 := @this: org.jsoup.nodes.Node;

        r0 := @parameter0: java.lang.String;

        staticinvoke <org.jsoup.helper.Validate: void notNull(java.lang.Object)>(r0);

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String toLowerCase()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean startsWith(java.lang.String)>("abs:");

        if $z0 == 0 goto label1;

        $r3 = "abs:";

        $i0 = virtualinvoke $r3.<java.lang.String: int length()>();

        $r4 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>($i0);

        $r5 = r2.<org.jsoup.nodes.Node: org.jsoup.nodes.Attributes attributes>;

        $z1 = virtualinvoke $r5.<org.jsoup.nodes.Attributes: boolean hasKey(java.lang.String)>($r4);

        if $z1 == 0 goto label1;

        $r6 = virtualinvoke r2.<org.jsoup.nodes.Node: java.lang.String absUrl(java.lang.String)>($r4);

        $z2 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z2 != 0 goto label1;

        return 1;

     label1:
        $r7 = r2.<org.jsoup.nodes.Node: org.jsoup.nodes.Attributes attributes>;

        $z3 = virtualinvoke $r7.<org.jsoup.nodes.Attributes: boolean hasKey(java.lang.String)>(r0);

        return $z3;
    }

    public org.jsoup.nodes.Node removeAttr(java.lang.String)
    {
        org.jsoup.nodes.Node r1;
        org.jsoup.nodes.Attributes $r2;
        java.lang.String r0;

        r1 := @this: org.jsoup.nodes.Node;

        r0 := @parameter0: java.lang.String;

        staticinvoke <org.jsoup.helper.Validate: void notNull(java.lang.Object)>(r0);

        $r2 = r1.<org.jsoup.nodes.Node: org.jsoup.nodes.Attributes attributes>;

        virtualinvoke $r2.<org.jsoup.nodes.Attributes: void remove(java.lang.String)>(r0);

        return r1;
    }

    public java.lang.String baseUri()
    {
        org.jsoup.nodes.Node r0;
        java.lang.String $r1;

        r0 := @this: org.jsoup.nodes.Node;

        $r1 = r0.<org.jsoup.nodes.Node: java.lang.String baseUri>;

        return $r1;
    }

    public void setBaseUri(java.lang.String)
    {
        org.jsoup.nodes.Node r1;
        java.lang.String r0;
        org.jsoup.nodes.Node$1 $r2;

        r1 := @this: org.jsoup.nodes.Node;

        r0 := @parameter0: java.lang.String;

        staticinvoke <org.jsoup.helper.Validate: void notNull(java.lang.Object)>(r0);

        $r2 = new org.jsoup.nodes.Node$1;

        specialinvoke $r2.<org.jsoup.nodes.Node$1: void <init>(org.jsoup.nodes.Node,java.lang.String)>(r1, r0);

        virtualinvoke r1.<org.jsoup.nodes.Node: org.jsoup.nodes.Node traverse(org.jsoup.select.NodeVisitor)>($r2);

        return;
    }

    public java.lang.String absUrl(java.lang.String)
    {
        java.net.URL $r3, $r5, $r13;
        java.lang.String r0, $r2, $r4, $r6, $r8, $r14, r15;
        boolean $z0, $z1;
        java.net.MalformedURLException $r11, $r12;
        org.jsoup.nodes.Node r1;
        java.lang.StringBuilder $r7, $r9, $r10;

        r1 := @this: org.jsoup.nodes.Node;

        r0 := @parameter0: java.lang.String;

        staticinvoke <org.jsoup.helper.Validate: void notEmpty(java.lang.String)>(r0);

        $r2 = virtualinvoke r1.<org.jsoup.nodes.Node: java.lang.String attr(java.lang.String)>(r0);

        r15 = $r2;

        $z0 = virtualinvoke r1.<org.jsoup.nodes.Node: boolean hasAttr(java.lang.String)>(r0);

        if $z0 != 0 goto label1;

        return "";

     label1:
        $r3 = new java.net.URL;

        $r4 = r1.<org.jsoup.nodes.Node: java.lang.String baseUri>;

        specialinvoke $r3.<java.net.URL: void <init>(java.lang.String)>($r4);

     label2:
        goto label5;

     label3:
        $r12 := @caughtexception;

        $r13 = new java.net.URL;

        specialinvoke $r13.<java.net.URL: void <init>(java.lang.String)>($r2);

        $r14 = virtualinvoke $r13.<java.net.URL: java.lang.String toExternalForm()>();

     label4:
        return $r14;

     label5:
        $z1 = virtualinvoke $r2.<java.lang.String: boolean startsWith(java.lang.String)>("?");

        if $z1 == 0 goto label6;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r3.<java.net.URL: java.lang.String getPath()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        r15 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

     label6:
        $r5 = new java.net.URL;

        specialinvoke $r5.<java.net.URL: void <init>(java.net.URL,java.lang.String)>($r3, r15);

        $r6 = virtualinvoke $r5.<java.net.URL: java.lang.String toExternalForm()>();

     label7:
        return $r6;

     label8:
        $r11 := @caughtexception;

        return "";

        catch java.net.MalformedURLException from label1 to label2 with label3;
        catch java.net.MalformedURLException from label1 to label4 with label8;
        catch java.net.MalformedURLException from label5 to label7 with label8;
    }

    public org.jsoup.nodes.Node childNode(int)
    {
        org.jsoup.nodes.Node r0, $r3;
        java.util.List $r1;
        int i0;
        java.lang.Object $r2;

        r0 := @this: org.jsoup.nodes.Node;

        i0 := @parameter0: int;

        $r1 = r0.<org.jsoup.nodes.Node: java.util.List childNodes>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i0);

        $r3 = (org.jsoup.nodes.Node) $r2;

        return $r3;
    }

    public java.util.List childNodes()
    {
        org.jsoup.nodes.Node r0;
        java.util.List $r1, $r2;

        r0 := @this: org.jsoup.nodes.Node;

        $r1 = r0.<org.jsoup.nodes.Node: java.util.List childNodes>;

        $r2 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r1);

        return $r2;
    }

    public java.util.List childNodesCopy()
    {
        java.util.Iterator $r4;
        java.util.ArrayList $r0;
        org.jsoup.nodes.Node r1, r6, $r7;
        java.util.List $r2, $r3;
        int $i0;
        java.lang.Object $r5;
        boolean $z0;

        r1 := @this: org.jsoup.nodes.Node;

        $r0 = new java.util.ArrayList;

        $r2 = r1.<org.jsoup.nodes.Node: java.util.List childNodes>;

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        specialinvoke $r0.<java.util.ArrayList: void <init>(int)>($i0);

        $r3 = r1.<org.jsoup.nodes.Node: java.util.List childNodes>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (org.jsoup.nodes.Node) $r5;

        $r7 = virtualinvoke r6.<org.jsoup.nodes.Node: org.jsoup.nodes.Node clone()>();

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r7);

        goto label1;

     label2:
        return $r0;
    }

    public final int childNodeSize()
    {
        int $i0;
        org.jsoup.nodes.Node r0;
        java.util.List $r1;

        r0 := @this: org.jsoup.nodes.Node;

        $r1 = r0.<org.jsoup.nodes.Node: java.util.List childNodes>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        return $i0;
    }

    protected org.jsoup.nodes.Node[] childNodesAsArray()
    {
        org.jsoup.nodes.Node r0;
        java.util.List $r1;
        org.jsoup.nodes.Node[] $r2, $r4;
        java.lang.Object[] $r3;
        int $i0;

        r0 := @this: org.jsoup.nodes.Node;

        $r1 = r0.<org.jsoup.nodes.Node: java.util.List childNodes>;

        $i0 = virtualinvoke r0.<org.jsoup.nodes.Node: int childNodeSize()>();

        $r2 = newarray (org.jsoup.nodes.Node)[$i0];

        $r3 = interfaceinvoke $r1.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r2);

        $r4 = (org.jsoup.nodes.Node[]) $r3;

        return $r4;
    }

    public org.jsoup.nodes.Node parent()
    {
        org.jsoup.nodes.Node r0, $r1;

        r0 := @this: org.jsoup.nodes.Node;

        $r1 = r0.<org.jsoup.nodes.Node: org.jsoup.nodes.Node parentNode>;

        return $r1;
    }

    public org.jsoup.nodes.Document ownerDocument()
    {
        org.jsoup.nodes.Node r0, $r1, $r2;
        org.jsoup.nodes.Document $r3, $r4;
        boolean $z0;

        r0 := @this: org.jsoup.nodes.Node;

        $z0 = r0 instanceof org.jsoup.nodes.Document;

        if $z0 == 0 goto label1;

        $r4 = (org.jsoup.nodes.Document) r0;

        return $r4;

     label1:
        $r1 = r0.<org.jsoup.nodes.Node: org.jsoup.nodes.Node parentNode>;

        if $r1 != null goto label2;

        return null;

     label2:
        $r2 = r0.<org.jsoup.nodes.Node: org.jsoup.nodes.Node parentNode>;

        $r3 = virtualinvoke $r2.<org.jsoup.nodes.Node: org.jsoup.nodes.Document ownerDocument()>();

        return $r3;
    }

    public void remove()
    {
        org.jsoup.nodes.Node r0, $r1, $r2;

        r0 := @this: org.jsoup.nodes.Node;

        $r1 = r0.<org.jsoup.nodes.Node: org.jsoup.nodes.Node parentNode>;

        staticinvoke <org.jsoup.helper.Validate: void notNull(java.lang.Object)>($r1);

        $r2 = r0.<org.jsoup.nodes.Node: org.jsoup.nodes.Node parentNode>;

        virtualinvoke $r2.<org.jsoup.nodes.Node: void removeChild(org.jsoup.nodes.Node)>(r0);

        return;
    }

    public org.jsoup.nodes.Node before(java.lang.String)
    {
        int $i0;
        org.jsoup.nodes.Node r0;
        java.lang.String r1;

        r0 := @this: org.jsoup.nodes.Node;

        r1 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<org.jsoup.nodes.Node: int siblingIndex()>();

        specialinvoke r0.<org.jsoup.nodes.Node: void addSiblingHtml(int,java.lang.String)>($i0, r1);

        return r0;
    }

    public org.jsoup.nodes.Node before(org.jsoup.nodes.Node)
    {
        org.jsoup.nodes.Node r0, r1, $r2, $r3;
        org.jsoup.nodes.Node[] $r4;
        int $i0;

        r1 := @this: org.jsoup.nodes.Node;

        r0 := @parameter0: org.jsoup.nodes.Node;

        staticinvoke <org.jsoup.helper.Validate: void notNull(java.lang.Object)>(r0);

        $r2 = r1.<org.jsoup.nodes.Node: org.jsoup.nodes.Node parentNode>;

        staticinvoke <org.jsoup.helper.Validate: void notNull(java.lang.Object)>($r2);

        $r3 = r1.<org.jsoup.nodes.Node: org.jsoup.nodes.Node parentNode>;

        $i0 = virtualinvoke r1.<org.jsoup.nodes.Node: int siblingIndex()>();

        $r4 = newarray (org.jsoup.nodes.Node)[1];

        $r4[0] = r0;

        virtualinvoke $r3.<org.jsoup.nodes.Node: void addChildren(int,org.jsoup.nodes.Node[])>($i0, $r4);

        return r1;
    }

    public org.jsoup.nodes.Node after(java.lang.String)
    {
        org.jsoup.nodes.Node r0;
        int $i0, $i1;
        java.lang.String r1;

        r0 := @this: org.jsoup.nodes.Node;

        r1 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<org.jsoup.nodes.Node: int siblingIndex()>();

        $i1 = $i0 + 1;

        specialinvoke r0.<org.jsoup.nodes.Node: void addSiblingHtml(int,java.lang.String)>($i1, r1);

        return r0;
    }

    public org.jsoup.nodes.Node after(org.jsoup.nodes.Node)
    {
        org.jsoup.nodes.Node r0, r1, $r2, $r3;
        org.jsoup.nodes.Node[] $r4;
        int $i0, $i1;

        r1 := @this: org.jsoup.nodes.Node;

        r0 := @parameter0: org.jsoup.nodes.Node;

        staticinvoke <org.jsoup.helper.Validate: void notNull(java.lang.Object)>(r0);

        $r2 = r1.<org.jsoup.nodes.Node: org.jsoup.nodes.Node parentNode>;

        staticinvoke <org.jsoup.helper.Validate: void notNull(java.lang.Object)>($r2);

        $r3 = r1.<org.jsoup.nodes.Node: org.jsoup.nodes.Node parentNode>;

        $i0 = virtualinvoke r1.<org.jsoup.nodes.Node: int siblingIndex()>();

        $i1 = $i0 + 1;

        $r4 = newarray (org.jsoup.nodes.Node)[1];

        $r4[0] = r0;

        virtualinvoke $r3.<org.jsoup.nodes.Node: void addChildren(int,org.jsoup.nodes.Node[])>($i1, $r4);

        return r1;
    }

    private void addSiblingHtml(int, java.lang.String)
    {
        org.jsoup.nodes.Node[] $r7, $r9;
        java.lang.Object[] $r8;
        org.jsoup.nodes.Node r1, $r2, $r3, $r6, $r10;
        java.util.List $r5;
        org.jsoup.nodes.Element $r11;
        int i0, $i1;
        java.lang.String r0, $r4;
        boolean $z0;

        r1 := @this: org.jsoup.nodes.Node;

        i0 := @parameter0: int;

        r0 := @parameter1: java.lang.String;

        staticinvoke <org.jsoup.helper.Validate: void notNull(java.lang.Object)>(r0);

        $r2 = r1.<org.jsoup.nodes.Node: org.jsoup.nodes.Node parentNode>;

        staticinvoke <org.jsoup.helper.Validate: void notNull(java.lang.Object)>($r2);

        $r3 = virtualinvoke r1.<org.jsoup.nodes.Node: org.jsoup.nodes.Node parent()>();

        $z0 = $r3 instanceof org.jsoup.nodes.Element;

        if $z0 == 0 goto label1;

        $r10 = virtualinvoke r1.<org.jsoup.nodes.Node: org.jsoup.nodes.Node parent()>();

        $r11 = (org.jsoup.nodes.Element) $r10;

        goto label2;

     label1:
        $r11 = null;

     label2:
        $r4 = virtualinvoke r1.<org.jsoup.nodes.Node: java.lang.String baseUri()>();

        $r5 = staticinvoke <org.jsoup.parser.Parser: java.util.List parseFragment(java.lang.String,org.jsoup.nodes.Element,java.lang.String)>(r0, $r11, $r4);

        $r6 = r1.<org.jsoup.nodes.Node: org.jsoup.nodes.Node parentNode>;

        $i1 = interfaceinvoke $r5.<java.util.List: int size()>();

        $r7 = newarray (org.jsoup.nodes.Node)[$i1];

        $r8 = interfaceinvoke $r5.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r7);

        $r9 = (org.jsoup.nodes.Node[]) $r8;

        virtualinvoke $r6.<org.jsoup.nodes.Node: void addChildren(int,org.jsoup.nodes.Node[])>(i0, $r9);

        return;
    }

    public org.jsoup.nodes.Node wrap(java.lang.String)
    {
        org.jsoup.nodes.Node[] $r9;
        org.jsoup.nodes.Element r6, $r7, $r15;
        int $i0, $i1, i2;
        java.lang.String r0, $r3;
        boolean $z0, $z1;
        org.jsoup.nodes.Node r1, $r2, $r8, r11, $r12, $r13, $r14;
        java.util.List $r4;
        java.lang.Object $r5, $r10;

        r1 := @this: org.jsoup.nodes.Node;

        r0 := @parameter0: java.lang.String;

        staticinvoke <org.jsoup.helper.Validate: void notEmpty(java.lang.String)>(r0);

        $r2 = virtualinvoke r1.<org.jsoup.nodes.Node: org.jsoup.nodes.Node parent()>();

        $z0 = $r2 instanceof org.jsoup.nodes.Element;

        if $z0 == 0 goto label1;

        $r13 = virtualinvoke r1.<org.jsoup.nodes.Node: org.jsoup.nodes.Node parent()>();

        $r15 = (org.jsoup.nodes.Element) $r13;

        goto label2;

     label1:
        $r15 = null;

     label2:
        $r3 = virtualinvoke r1.<org.jsoup.nodes.Node: java.lang.String baseUri()>();

        $r4 = staticinvoke <org.jsoup.parser.Parser: java.util.List parseFragment(java.lang.String,org.jsoup.nodes.Element,java.lang.String)>(r0, $r15, $r3);

        $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>(0);

        $r14 = (org.jsoup.nodes.Node) $r5;

        if $r14 == null goto label3;

        $z1 = $r14 instanceof org.jsoup.nodes.Element;

        if $z1 != 0 goto label4;

     label3:
        return null;

     label4:
        r6 = (org.jsoup.nodes.Element) $r14;

        $r7 = specialinvoke r1.<org.jsoup.nodes.Node: org.jsoup.nodes.Element getDeepChild(org.jsoup.nodes.Element)>(r6);

        $r8 = r1.<org.jsoup.nodes.Node: org.jsoup.nodes.Node parentNode>;

        virtualinvoke $r8.<org.jsoup.nodes.Node: void replaceChild(org.jsoup.nodes.Node,org.jsoup.nodes.Node)>(r1, r6);

        $r9 = newarray (org.jsoup.nodes.Node)[1];

        $r9[0] = r1;

        virtualinvoke $r7.<org.jsoup.nodes.Element: void addChildren(org.jsoup.nodes.Node[])>($r9);

        $i0 = interfaceinvoke $r4.<java.util.List: int size()>();

        if $i0 <= 0 goto label6;

        i2 = 0;

     label5:
        $i1 = interfaceinvoke $r4.<java.util.List: int size()>();

        if i2 >= $i1 goto label6;

        $r10 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>(i2);

        r11 = (org.jsoup.nodes.Node) $r10;

        $r12 = r11.<org.jsoup.nodes.Node: org.jsoup.nodes.Node parentNode>;

        virtualinvoke $r12.<org.jsoup.nodes.Node: void removeChild(org.jsoup.nodes.Node)>(r11);

        virtualinvoke r6.<org.jsoup.nodes.Element: org.jsoup.nodes.Element appendChild(org.jsoup.nodes.Node)>(r11);

        i2 = i2 + 1;

        goto label5;

     label6:
        return r1;
    }

    public org.jsoup.nodes.Node unwrap()
    {
        org.jsoup.nodes.Node[] $r4;
        org.jsoup.nodes.Node r0, $r1, $r3, $r7;
        java.util.List $r2, $r5;
        int i0, $i1;
        java.lang.Object $r6;

        r0 := @this: org.jsoup.nodes.Node;

        $r1 = r0.<org.jsoup.nodes.Node: org.jsoup.nodes.Node parentNode>;

        staticinvoke <org.jsoup.helper.Validate: void notNull(java.lang.Object)>($r1);

        i0 = r0.<org.jsoup.nodes.Node: int siblingIndex>;

        $r2 = r0.<org.jsoup.nodes.Node: java.util.List childNodes>;

        $i1 = interfaceinvoke $r2.<java.util.List: int size()>();

        if $i1 <= 0 goto label1;

        $r5 = r0.<org.jsoup.nodes.Node: java.util.List childNodes>;

        $r6 = interfaceinvoke $r5.<java.util.List: java.lang.Object get(int)>(0);

        $r7 = (org.jsoup.nodes.Node) $r6;

        goto label2;

     label1:
        $r7 = null;

     label2:
        $r3 = r0.<org.jsoup.nodes.Node: org.jsoup.nodes.Node parentNode>;

        $r4 = virtualinvoke r0.<org.jsoup.nodes.Node: org.jsoup.nodes.Node[] childNodesAsArray()>();

        virtualinvoke $r3.<org.jsoup.nodes.Node: void addChildren(int,org.jsoup.nodes.Node[])>(i0, $r4);

        virtualinvoke r0.<org.jsoup.nodes.Node: void remove()>();

        return $r7;
    }

    private org.jsoup.nodes.Element getDeepChild(org.jsoup.nodes.Element)
    {
        org.jsoup.nodes.Node r2;
        org.jsoup.nodes.Element r0, $r4, $r5;
        int $i0;
        java.lang.Object $r3;
        org.jsoup.select.Elements $r1;

        r2 := @this: org.jsoup.nodes.Node;

        r0 := @parameter0: org.jsoup.nodes.Element;

        $r1 = virtualinvoke r0.<org.jsoup.nodes.Element: org.jsoup.select.Elements children()>();

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        if $i0 <= 0 goto label1;

        $r3 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(0);

        $r4 = (org.jsoup.nodes.Element) $r3;

        $r5 = specialinvoke r2.<org.jsoup.nodes.Node: org.jsoup.nodes.Element getDeepChild(org.jsoup.nodes.Element)>($r4);

        return $r5;

     label1:
        return r0;
    }

    public void replaceWith(org.jsoup.nodes.Node)
    {
        org.jsoup.nodes.Node r0, r1, $r2, $r3;

        r1 := @this: org.jsoup.nodes.Node;

        r0 := @parameter0: org.jsoup.nodes.Node;

        staticinvoke <org.jsoup.helper.Validate: void notNull(java.lang.Object)>(r0);

        $r2 = r1.<org.jsoup.nodes.Node: org.jsoup.nodes.Node parentNode>;

        staticinvoke <org.jsoup.helper.Validate: void notNull(java.lang.Object)>($r2);

        $r3 = r1.<org.jsoup.nodes.Node: org.jsoup.nodes.Node parentNode>;

        virtualinvoke $r3.<org.jsoup.nodes.Node: void replaceChild(org.jsoup.nodes.Node,org.jsoup.nodes.Node)>(r1, r0);

        return;
    }

    protected void setParentNode(org.jsoup.nodes.Node)
    {
        org.jsoup.nodes.Node r0, $r1, r2, $r3;

        r0 := @this: org.jsoup.nodes.Node;

        r2 := @parameter0: org.jsoup.nodes.Node;

        $r1 = r0.<org.jsoup.nodes.Node: org.jsoup.nodes.Node parentNode>;

        if $r1 == null goto label1;

        $r3 = r0.<org.jsoup.nodes.Node: org.jsoup.nodes.Node parentNode>;

        virtualinvoke $r3.<org.jsoup.nodes.Node: void removeChild(org.jsoup.nodes.Node)>(r0);

     label1:
        r0.<org.jsoup.nodes.Node: org.jsoup.nodes.Node parentNode> = r2;

        return;
    }

    protected void replaceChild(org.jsoup.nodes.Node, org.jsoup.nodes.Node)
    {
        java.lang.Integer $r5;
        org.jsoup.nodes.Node r0, r1, $r2, r3, $r4, $r7;
        java.util.List $r6;
        int $i0, $i1, $i2;
        boolean $z0;

        r1 := @this: org.jsoup.nodes.Node;

        r0 := @parameter0: org.jsoup.nodes.Node;

        r3 := @parameter1: org.jsoup.nodes.Node;

        $r2 = r0.<org.jsoup.nodes.Node: org.jsoup.nodes.Node parentNode>;

        if $r2 != r1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.jsoup.helper.Validate: void isTrue(boolean)>($z0);

        staticinvoke <org.jsoup.helper.Validate: void notNull(java.lang.Object)>(r3);

        $r4 = r3.<org.jsoup.nodes.Node: org.jsoup.nodes.Node parentNode>;

        if $r4 == null goto label3;

        $r7 = r3.<org.jsoup.nodes.Node: org.jsoup.nodes.Node parentNode>;

        virtualinvoke $r7.<org.jsoup.nodes.Node: void removeChild(org.jsoup.nodes.Node)>(r3);

     label3:
        $i0 = virtualinvoke r0.<org.jsoup.nodes.Node: int siblingIndex()>();

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r6 = r1.<org.jsoup.nodes.Node: java.util.List childNodes>;

        $i1 = virtualinvoke $r5.<java.lang.Integer: int intValue()>();

        interfaceinvoke $r6.<java.util.List: java.lang.Object set(int,java.lang.Object)>($i1, r3);

        r3.<org.jsoup.nodes.Node: org.jsoup.nodes.Node parentNode> = r1;

        $i2 = virtualinvoke $r5.<java.lang.Integer: int intValue()>();

        virtualinvoke r3.<org.jsoup.nodes.Node: void setSiblingIndex(int)>($i2);

        r0.<org.jsoup.nodes.Node: org.jsoup.nodes.Node parentNode> = null;

        return;
    }

    protected void removeChild(org.jsoup.nodes.Node)
    {
        org.jsoup.nodes.Node r0, r1, $r2;
        java.util.List $r3;
        int $i0;
        boolean $z0;

        r1 := @this: org.jsoup.nodes.Node;

        r0 := @parameter0: org.jsoup.nodes.Node;

        $r2 = r0.<org.jsoup.nodes.Node: org.jsoup.nodes.Node parentNode>;

        if $r2 != r1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.jsoup.helper.Validate: void isTrue(boolean)>($z0);

        $i0 = virtualinvoke r0.<org.jsoup.nodes.Node: int siblingIndex()>();

        $r3 = r1.<org.jsoup.nodes.Node: java.util.List childNodes>;

        interfaceinvoke $r3.<java.util.List: java.lang.Object remove(int)>($i0);

        specialinvoke r1.<org.jsoup.nodes.Node: void reindexChildren()>();

        r0.<org.jsoup.nodes.Node: org.jsoup.nodes.Node parentNode> = null;

        return;
    }

    protected transient void addChildren(org.jsoup.nodes.Node[])
    {
        org.jsoup.nodes.Node[] r0;
        org.jsoup.nodes.Node r1, r2;
        java.util.List $r3, $r4;
        int i0, $i1, $i2, i3;

        r2 := @this: org.jsoup.nodes.Node;

        r0 := @parameter0: org.jsoup.nodes.Node[];

        i0 = lengthof r0;

        i3 = 0;

     label1:
        if i3 >= i0 goto label2;

        r1 = r0[i3];

        specialinvoke r2.<org.jsoup.nodes.Node: void reparentChild(org.jsoup.nodes.Node)>(r1);

        $r3 = r2.<org.jsoup.nodes.Node: java.util.List childNodes>;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r1);

        $r4 = r2.<org.jsoup.nodes.Node: java.util.List childNodes>;

        $i1 = interfaceinvoke $r4.<java.util.List: int size()>();

        $i2 = $i1 - 1;

        virtualinvoke r1.<org.jsoup.nodes.Node: void setSiblingIndex(int)>($i2);

        i3 = i3 + 1;

        goto label1;

     label2:
        return;
    }

    protected transient void addChildren(int, org.jsoup.nodes.Node[])
    {
        org.jsoup.nodes.Node[] r0;
        org.jsoup.nodes.Node r1, r2;
        java.util.List $r3;
        int $i0, i1, i2, $i4;

        r1 := @this: org.jsoup.nodes.Node;

        i1 := @parameter0: int;

        r0 := @parameter1: org.jsoup.nodes.Node[];

        staticinvoke <org.jsoup.helper.Validate: void noNullElements(java.lang.Object[])>(r0);

        $i0 = lengthof r0;

        i2 = $i0 - 1;

     label1:
        if i2 < 0 goto label2;

        r2 = r0[i2];

        specialinvoke r1.<org.jsoup.nodes.Node: void reparentChild(org.jsoup.nodes.Node)>(r2);

        $r3 = r1.<org.jsoup.nodes.Node: java.util.List childNodes>;

        interfaceinvoke $r3.<java.util.List: void add(int,java.lang.Object)>(i1, r2);

        $i4 = (int) -1;

        i2 = i2 + $i4;

        goto label1;

     label2:
        specialinvoke r1.<org.jsoup.nodes.Node: void reindexChildren()>();

        return;
    }

    private void reparentChild(org.jsoup.nodes.Node)
    {
        org.jsoup.nodes.Node r0, $r1, r2, $r3;

        r2 := @this: org.jsoup.nodes.Node;

        r0 := @parameter0: org.jsoup.nodes.Node;

        $r1 = r0.<org.jsoup.nodes.Node: org.jsoup.nodes.Node parentNode>;

        if $r1 == null goto label1;

        $r3 = r0.<org.jsoup.nodes.Node: org.jsoup.nodes.Node parentNode>;

        virtualinvoke $r3.<org.jsoup.nodes.Node: void removeChild(org.jsoup.nodes.Node)>(r0);

     label1:
        virtualinvoke r0.<org.jsoup.nodes.Node: void setParentNode(org.jsoup.nodes.Node)>(r2);

        return;
    }

    private void reindexChildren()
    {
        org.jsoup.nodes.Node r0, $r4;
        java.util.List $r1, $r2;
        int $i0, i1;
        java.lang.Object $r3;

        r0 := @this: org.jsoup.nodes.Node;

        i1 = 0;

     label1:
        $r1 = r0.<org.jsoup.nodes.Node: java.util.List childNodes>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        if i1 >= $i0 goto label2;

        $r2 = r0.<org.jsoup.nodes.Node: java.util.List childNodes>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(i1);

        $r4 = (org.jsoup.nodes.Node) $r3;

        virtualinvoke $r4.<org.jsoup.nodes.Node: void setSiblingIndex(int)>(i1);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public java.util.List siblingNodes()
    {
        java.util.Iterator $r5;
        java.util.ArrayList $r4;
        org.jsoup.nodes.Node r0, $r1, $r2, r7;
        java.util.List r3, $r8;
        int $i0, $i1;
        java.lang.Object $r6;
        boolean $z0;

        r0 := @this: org.jsoup.nodes.Node;

        $r1 = r0.<org.jsoup.nodes.Node: org.jsoup.nodes.Node parentNode>;

        if $r1 != null goto label1;

        $r8 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r8;

     label1:
        $r2 = r0.<org.jsoup.nodes.Node: org.jsoup.nodes.Node parentNode>;

        r3 = $r2.<org.jsoup.nodes.Node: java.util.List childNodes>;

        $r4 = new java.util.ArrayList;

        $i0 = interfaceinvoke r3.<java.util.List: int size()>();

        $i1 = $i0 - 1;

        specialinvoke $r4.<java.util.ArrayList: void <init>(int)>($i1);

        $r5 = interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (org.jsoup.nodes.Node) $r6;

        if r7 == r0 goto label3;

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>(r7);

     label3:
        goto label2;

     label4:
        return $r4;
    }

    public org.jsoup.nodes.Node nextSibling()
    {
        java.lang.Integer $r4;
        org.jsoup.nodes.Node r0, $r1, $r2, $r6;
        java.util.List r3;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.Object $r5;

        r0 := @this: org.jsoup.nodes.Node;

        $r1 = r0.<org.jsoup.nodes.Node: org.jsoup.nodes.Node parentNode>;

        if $r1 != null goto label1;

        return null;

     label1:
        $r2 = r0.<org.jsoup.nodes.Node: org.jsoup.nodes.Node parentNode>;

        r3 = $r2.<org.jsoup.nodes.Node: java.util.List childNodes>;

        $i0 = virtualinvoke r0.<org.jsoup.nodes.Node: int siblingIndex()>();

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        staticinvoke <org.jsoup.helper.Validate: void notNull(java.lang.Object)>($r4);

        $i1 = interfaceinvoke r3.<java.util.List: int size()>();

        $i2 = virtualinvoke $r4.<java.lang.Integer: int intValue()>();

        $i3 = $i2 + 1;

        if $i1 <= $i3 goto label2;

        $i4 = virtualinvoke $r4.<java.lang.Integer: int intValue()>();

        $i5 = $i4 + 1;

        $r5 = interfaceinvoke r3.<java.util.List: java.lang.Object get(int)>($i5);

        $r6 = (org.jsoup.nodes.Node) $r5;

        return $r6;

     label2:
        return null;
    }

    public org.jsoup.nodes.Node previousSibling()
    {
        java.lang.Integer $r4;
        org.jsoup.nodes.Node r0, $r1, $r2, $r6;
        java.util.List r3;
        int $i0, $i1, $i2, $i3;
        java.lang.Object $r5;

        r0 := @this: org.jsoup.nodes.Node;

        $r1 = r0.<org.jsoup.nodes.Node: org.jsoup.nodes.Node parentNode>;

        if $r1 != null goto label1;

        return null;

     label1:
        $r2 = r0.<org.jsoup.nodes.Node: org.jsoup.nodes.Node parentNode>;

        r3 = $r2.<org.jsoup.nodes.Node: java.util.List childNodes>;

        $i0 = virtualinvoke r0.<org.jsoup.nodes.Node: int siblingIndex()>();

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        staticinvoke <org.jsoup.helper.Validate: void notNull(java.lang.Object)>($r4);

        $i1 = virtualinvoke $r4.<java.lang.Integer: int intValue()>();

        if $i1 <= 0 goto label2;

        $i2 = virtualinvoke $r4.<java.lang.Integer: int intValue()>();

        $i3 = $i2 - 1;

        $r5 = interfaceinvoke r3.<java.util.List: java.lang.Object get(int)>($i3);

        $r6 = (org.jsoup.nodes.Node) $r5;

        return $r6;

     label2:
        return null;
    }

    public int siblingIndex()
    {
        int $i0;
        org.jsoup.nodes.Node r0;

        r0 := @this: org.jsoup.nodes.Node;

        $i0 = r0.<org.jsoup.nodes.Node: int siblingIndex>;

        return $i0;
    }

    protected void setSiblingIndex(int)
    {
        int i0;
        org.jsoup.nodes.Node r0;

        r0 := @this: org.jsoup.nodes.Node;

        i0 := @parameter0: int;

        r0.<org.jsoup.nodes.Node: int siblingIndex> = i0;

        return;
    }

    public org.jsoup.nodes.Node traverse(org.jsoup.select.NodeVisitor)
    {
        org.jsoup.select.NodeVisitor r0;
        org.jsoup.nodes.Node r2;
        org.jsoup.select.NodeTraversor $r1;

        r2 := @this: org.jsoup.nodes.Node;

        r0 := @parameter0: org.jsoup.select.NodeVisitor;

        staticinvoke <org.jsoup.helper.Validate: void notNull(java.lang.Object)>(r0);

        $r1 = new org.jsoup.select.NodeTraversor;

        specialinvoke $r1.<org.jsoup.select.NodeTraversor: void <init>(org.jsoup.select.NodeVisitor)>(r0);

        virtualinvoke $r1.<org.jsoup.select.NodeTraversor: void traverse(org.jsoup.nodes.Node)>(r2);

        return r2;
    }

    public java.lang.String outerHtml()
    {
        org.jsoup.nodes.Node r1;
        java.lang.StringBuilder $r0;
        java.lang.String $r2;

        r1 := @this: org.jsoup.nodes.Node;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>(int)>(128);

        virtualinvoke r1.<org.jsoup.nodes.Node: void outerHtml(java.lang.StringBuilder)>($r0);

        $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }

    protected void outerHtml(java.lang.StringBuilder)
    {
        org.jsoup.nodes.Node r3;
        org.jsoup.nodes.Node$OuterHtmlVisitor $r1;
        org.jsoup.nodes.Document$OutputSettings $r4;
        java.lang.StringBuilder r2;
        org.jsoup.select.NodeTraversor $r0;

        r3 := @this: org.jsoup.nodes.Node;

        r2 := @parameter0: java.lang.StringBuilder;

        $r0 = new org.jsoup.select.NodeTraversor;

        $r1 = new org.jsoup.nodes.Node$OuterHtmlVisitor;

        $r4 = specialinvoke r3.<org.jsoup.nodes.Node: org.jsoup.nodes.Document$OutputSettings getOutputSettings()>();

        specialinvoke $r1.<org.jsoup.nodes.Node$OuterHtmlVisitor: void <init>(java.lang.StringBuilder,org.jsoup.nodes.Document$OutputSettings)>(r2, $r4);

        specialinvoke $r0.<org.jsoup.select.NodeTraversor: void <init>(org.jsoup.select.NodeVisitor)>($r1);

        virtualinvoke $r0.<org.jsoup.select.NodeTraversor: void traverse(org.jsoup.nodes.Node)>(r3);

        return;
    }

    private org.jsoup.nodes.Document$OutputSettings getOutputSettings()
    {
        org.jsoup.nodes.Node r0;
        org.jsoup.nodes.Document$OutputSettings $r4;
        org.jsoup.nodes.Document $r1, $r2, $r3;

        r0 := @this: org.jsoup.nodes.Node;

        $r1 = virtualinvoke r0.<org.jsoup.nodes.Node: org.jsoup.nodes.Document ownerDocument()>();

        if $r1 == null goto label1;

        $r3 = virtualinvoke r0.<org.jsoup.nodes.Node: org.jsoup.nodes.Document ownerDocument()>();

        $r4 = virtualinvoke $r3.<org.jsoup.nodes.Document: org.jsoup.nodes.Document$OutputSettings outputSettings()>();

        goto label2;

     label1:
        $r2 = new org.jsoup.nodes.Document;

        specialinvoke $r2.<org.jsoup.nodes.Document: void <init>(java.lang.String)>("");

        $r4 = virtualinvoke $r2.<org.jsoup.nodes.Document: org.jsoup.nodes.Document$OutputSettings outputSettings()>();

     label2:
        return $r4;
    }

    abstract void outerHtmlHead(java.lang.StringBuilder, int, org.jsoup.nodes.Document$OutputSettings);

    abstract void outerHtmlTail(java.lang.StringBuilder, int, org.jsoup.nodes.Document$OutputSettings);

    public java.lang.String toString()
    {
        org.jsoup.nodes.Node r0;
        java.lang.String $r1;

        r0 := @this: org.jsoup.nodes.Node;

        $r1 = virtualinvoke r0.<org.jsoup.nodes.Node: java.lang.String outerHtml()>();

        return $r1;
    }

    protected void indent(java.lang.StringBuilder, int, org.jsoup.nodes.Document$OutputSettings)
    {
        org.jsoup.nodes.Node r4;
        org.jsoup.nodes.Document$OutputSettings r2;
        int i0, $i1, $i2;
        java.lang.StringBuilder r0, $r1;
        java.lang.String $r3;

        r4 := @this: org.jsoup.nodes.Node;

        r0 := @parameter0: java.lang.StringBuilder;

        i0 := @parameter1: int;

        r2 := @parameter2: org.jsoup.nodes.Document$OutputSettings;

        $r1 = virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $i1 = virtualinvoke r2.<org.jsoup.nodes.Document$OutputSettings: int indentAmount()>();

        $i2 = i0 * $i1;

        $r3 = staticinvoke <org.jsoup.helper.StringUtil: java.lang.String padding(int)>($i2);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        return;
    }

    public boolean equals(java.lang.Object)
    {
        org.jsoup.nodes.Node r0;
        java.lang.Object r1;

        r0 := @this: org.jsoup.nodes.Node;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        return 0;
    }

    public int hashCode()
    {
        org.jsoup.nodes.Attributes $r2, $r3;
        org.jsoup.nodes.Node r0, $r1, $r4;
        int $i0, $i1, $i2, $i3;

        r0 := @this: org.jsoup.nodes.Node;

        $r1 = r0.<org.jsoup.nodes.Node: org.jsoup.nodes.Node parentNode>;

        if $r1 == null goto label1;

        $r4 = r0.<org.jsoup.nodes.Node: org.jsoup.nodes.Node parentNode>;

        $i2 = virtualinvoke $r4.<org.jsoup.nodes.Node: int hashCode()>();

        goto label2;

     label1:
        $i2 = 0;

     label2:
        $i0 = 31 * $i2;

        $r2 = r0.<org.jsoup.nodes.Node: org.jsoup.nodes.Attributes attributes>;

        if $r2 == null goto label3;

        $r3 = r0.<org.jsoup.nodes.Node: org.jsoup.nodes.Attributes attributes>;

        $i3 = virtualinvoke $r3.<org.jsoup.nodes.Attributes: int hashCode()>();

        goto label4;

     label3:
        $i3 = 0;

     label4:
        $i1 = $i0 + $i3;

        return $i1;
    }

    public org.jsoup.nodes.Node clone()
    {
        org.jsoup.nodes.Node r0, $r1;

        r0 := @this: org.jsoup.nodes.Node;

        $r1 = virtualinvoke r0.<org.jsoup.nodes.Node: org.jsoup.nodes.Node doClone(org.jsoup.nodes.Node)>(null);

        return $r1;
    }

    protected org.jsoup.nodes.Node doClone(org.jsoup.nodes.Node)
    {
        org.jsoup.nodes.Attributes $r4, $r14, $r17;
        java.lang.CloneNotSupportedException $r15;
        java.util.ArrayList $r6;
        int $i0, $i1;
        java.lang.String $r5;
        boolean $z0;
        java.util.Iterator $r9;
        java.lang.RuntimeException $r16;
        org.jsoup.nodes.Node r0, r2, r3, r11, $r13;
        java.util.List $r7, $r8, $r12;
        java.lang.Object $r1, $r10;

        r0 := @this: org.jsoup.nodes.Node;

        r3 := @parameter0: org.jsoup.nodes.Node;

     label01:
        $r1 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>();

        r2 = (org.jsoup.nodes.Node) $r1;

     label02:
        goto label04;

     label03:
        $r15 := @caughtexception;

        $r16 = new java.lang.RuntimeException;

        specialinvoke $r16.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r15);

        throw $r16;

     label04:
        r2.<org.jsoup.nodes.Node: org.jsoup.nodes.Node parentNode> = r3;

        if r3 != null goto label05;

        $i1 = 0;

        goto label06;

     label05:
        $i1 = r0.<org.jsoup.nodes.Node: int siblingIndex>;

     label06:
        r2.<org.jsoup.nodes.Node: int siblingIndex> = $i1;

        $r4 = r0.<org.jsoup.nodes.Node: org.jsoup.nodes.Attributes attributes>;

        if $r4 == null goto label07;

        $r14 = r0.<org.jsoup.nodes.Node: org.jsoup.nodes.Attributes attributes>;

        $r17 = virtualinvoke $r14.<org.jsoup.nodes.Attributes: org.jsoup.nodes.Attributes clone()>();

        goto label08;

     label07:
        $r17 = null;

     label08:
        r2.<org.jsoup.nodes.Node: org.jsoup.nodes.Attributes attributes> = $r17;

        $r5 = r0.<org.jsoup.nodes.Node: java.lang.String baseUri>;

        r2.<org.jsoup.nodes.Node: java.lang.String baseUri> = $r5;

        $r6 = new java.util.ArrayList;

        $r7 = r0.<org.jsoup.nodes.Node: java.util.List childNodes>;

        $i0 = interfaceinvoke $r7.<java.util.List: int size()>();

        specialinvoke $r6.<java.util.ArrayList: void <init>(int)>($i0);

        r2.<org.jsoup.nodes.Node: java.util.List childNodes> = $r6;

        $r8 = r0.<org.jsoup.nodes.Node: java.util.List childNodes>;

        $r9 = interfaceinvoke $r8.<java.util.List: java.util.Iterator iterator()>();

     label09:
        $z0 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label10;

        $r10 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        r11 = (org.jsoup.nodes.Node) $r10;

        $r12 = r2.<org.jsoup.nodes.Node: java.util.List childNodes>;

        $r13 = virtualinvoke r11.<org.jsoup.nodes.Node: org.jsoup.nodes.Node doClone(org.jsoup.nodes.Node)>(r2);

        interfaceinvoke $r12.<java.util.List: boolean add(java.lang.Object)>($r13);

        goto label09;

     label10:
        return r2;

        catch java.lang.CloneNotSupportedException from label01 to label02 with label03;
    }

    public volatile java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        org.jsoup.nodes.Node r0, $r1;

        r0 := @this: org.jsoup.nodes.Node;

        $r1 = virtualinvoke r0.<org.jsoup.nodes.Node: org.jsoup.nodes.Node clone()>();

        return $r1;
    }
}
