class org.jdesktop.swingx.plaf.basic.core.BasicXListUI$Actions extends org.jdesktop.swingx.UIAction
{
    private static final java.lang.String SELECT_PREVIOUS_COLUMN;
    private static final java.lang.String SELECT_PREVIOUS_COLUMN_EXTEND;
    private static final java.lang.String SELECT_PREVIOUS_COLUMN_CHANGE_LEAD;
    private static final java.lang.String SELECT_NEXT_COLUMN;
    private static final java.lang.String SELECT_NEXT_COLUMN_EXTEND;
    private static final java.lang.String SELECT_NEXT_COLUMN_CHANGE_LEAD;
    private static final java.lang.String SELECT_PREVIOUS_ROW;
    private static final java.lang.String SELECT_PREVIOUS_ROW_EXTEND;
    private static final java.lang.String SELECT_PREVIOUS_ROW_CHANGE_LEAD;
    private static final java.lang.String SELECT_NEXT_ROW;
    private static final java.lang.String SELECT_NEXT_ROW_EXTEND;
    private static final java.lang.String SELECT_NEXT_ROW_CHANGE_LEAD;
    private static final java.lang.String SELECT_FIRST_ROW;
    private static final java.lang.String SELECT_FIRST_ROW_EXTEND;
    private static final java.lang.String SELECT_FIRST_ROW_CHANGE_LEAD;
    private static final java.lang.String SELECT_LAST_ROW;
    private static final java.lang.String SELECT_LAST_ROW_EXTEND;
    private static final java.lang.String SELECT_LAST_ROW_CHANGE_LEAD;
    private static final java.lang.String SCROLL_UP;
    private static final java.lang.String SCROLL_UP_EXTEND;
    private static final java.lang.String SCROLL_UP_CHANGE_LEAD;
    private static final java.lang.String SCROLL_DOWN;
    private static final java.lang.String SCROLL_DOWN_EXTEND;
    private static final java.lang.String SCROLL_DOWN_CHANGE_LEAD;
    private static final java.lang.String SELECT_ALL;
    private static final java.lang.String CLEAR_SELECTION;
    private static final java.lang.String ADD_TO_SELECTION;
    private static final java.lang.String TOGGLE_AND_ANCHOR;
    private static final java.lang.String EXTEND_TO;
    private static final java.lang.String MOVE_SELECTION_TO;

    void <init>(java.lang.String)
    {
        java.lang.String r1;
        org.jdesktop.swingx.plaf.basic.core.BasicXListUI$Actions r0;

        r0 := @this: org.jdesktop.swingx.plaf.basic.core.BasicXListUI$Actions;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.jdesktop.swingx.UIAction: void <init>(java.lang.String)>(r1);

        return;
    }

    public void actionPerformed(java.awt.event.ActionEvent)
    {
        javax.swing.plaf.ListUI $r5;
        org.jdesktop.swingx.plaf.basic.core.BasicXListUI$Actions r0;
        javax.swing.ListSelectionModel $r8, $r9, $r10, $r11, $r12, $r13;
        java.lang.String $r1;
        boolean $z0, $z1;
        org.jdesktop.swingx.plaf.basic.core.BasicXListUI r7;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i34, $i36, $i38, $i40, $i42, $i44, $i46, $i48, $i50, $i52, $i54, $i56, $i58, $i60, $i62, $i64, $i66, $i68, $i70, $i72, $i74;
        javax.swing.JList r4;
        java.awt.event.ActionEvent r2;
        java.lang.Object $r3, $r6;

        r0 := @this: org.jdesktop.swingx.plaf.basic.core.BasicXListUI$Actions;

        r2 := @parameter0: java.awt.event.ActionEvent;

        $r1 = virtualinvoke r0.<org.jdesktop.swingx.plaf.basic.core.BasicXListUI$Actions: java.lang.String getName()>();

        $r3 = virtualinvoke r2.<java.awt.event.ActionEvent: java.lang.Object getSource()>();

        r4 = (javax.swing.JList) $r3;

        $r5 = virtualinvoke r4.<javax.swing.JList: javax.swing.plaf.ListUI getUI()>();

        $r6 = staticinvoke <org.jdesktop.swingx.plaf.LookAndFeelUtils: java.lang.Object getUIOfType(javax.swing.plaf.ComponentUI,java.lang.Class)>($r5, class "Lorg/jdesktop/swingx/plaf/basic/core/BasicXListUI;");

        r7 = (org.jdesktop.swingx.plaf.basic.core.BasicXListUI) $r6;

        if $r1 != "selectPreviousColumn" goto label01;

        $i34 = (int) -1;

        $i32 = specialinvoke r0.<org.jdesktop.swingx.plaf.basic.core.BasicXListUI$Actions: int getNextColumnIndex(javax.swing.JList,org.jdesktop.swingx.plaf.basic.core.BasicXListUI,int)>(r4, r7, $i34);

        $i36 = (int) -1;

        specialinvoke r0.<org.jdesktop.swingx.plaf.basic.core.BasicXListUI$Actions: void changeSelection(javax.swing.JList,int,int,int)>(r4, 1, $i32, $i36);

        goto label33;

     label01:
        if $r1 != "selectPreviousColumnExtendSelection" goto label02;

        $i38 = (int) -1;

        $i31 = specialinvoke r0.<org.jdesktop.swingx.plaf.basic.core.BasicXListUI$Actions: int getNextColumnIndex(javax.swing.JList,org.jdesktop.swingx.plaf.basic.core.BasicXListUI,int)>(r4, r7, $i38);

        $i40 = (int) -1;

        specialinvoke r0.<org.jdesktop.swingx.plaf.basic.core.BasicXListUI$Actions: void changeSelection(javax.swing.JList,int,int,int)>(r4, 2, $i31, $i40);

        goto label33;

     label02:
        if $r1 != "selectPreviousColumnChangeLead" goto label03;

        $i42 = (int) -1;

        $i30 = specialinvoke r0.<org.jdesktop.swingx.plaf.basic.core.BasicXListUI$Actions: int getNextColumnIndex(javax.swing.JList,org.jdesktop.swingx.plaf.basic.core.BasicXListUI,int)>(r4, r7, $i42);

        $i44 = (int) -1;

        specialinvoke r0.<org.jdesktop.swingx.plaf.basic.core.BasicXListUI$Actions: void changeSelection(javax.swing.JList,int,int,int)>(r4, 0, $i30, $i44);

        goto label33;

     label03:
        if $r1 != "selectNextColumn" goto label04;

        $i29 = specialinvoke r0.<org.jdesktop.swingx.plaf.basic.core.BasicXListUI$Actions: int getNextColumnIndex(javax.swing.JList,org.jdesktop.swingx.plaf.basic.core.BasicXListUI,int)>(r4, r7, 1);

        specialinvoke r0.<org.jdesktop.swingx.plaf.basic.core.BasicXListUI$Actions: void changeSelection(javax.swing.JList,int,int,int)>(r4, 1, $i29, 1);

        goto label33;

     label04:
        if $r1 != "selectNextColumnExtendSelection" goto label05;

        $i28 = specialinvoke r0.<org.jdesktop.swingx.plaf.basic.core.BasicXListUI$Actions: int getNextColumnIndex(javax.swing.JList,org.jdesktop.swingx.plaf.basic.core.BasicXListUI,int)>(r4, r7, 1);

        specialinvoke r0.<org.jdesktop.swingx.plaf.basic.core.BasicXListUI$Actions: void changeSelection(javax.swing.JList,int,int,int)>(r4, 2, $i28, 1);

        goto label33;

     label05:
        if $r1 != "selectNextColumnChangeLead" goto label06;

        $i27 = specialinvoke r0.<org.jdesktop.swingx.plaf.basic.core.BasicXListUI$Actions: int getNextColumnIndex(javax.swing.JList,org.jdesktop.swingx.plaf.basic.core.BasicXListUI,int)>(r4, r7, 1);

        specialinvoke r0.<org.jdesktop.swingx.plaf.basic.core.BasicXListUI$Actions: void changeSelection(javax.swing.JList,int,int,int)>(r4, 0, $i27, 1);

        goto label33;

     label06:
        if $r1 != "selectPreviousRow" goto label07;

        $i46 = (int) -1;

        $i26 = specialinvoke r0.<org.jdesktop.swingx.plaf.basic.core.BasicXListUI$Actions: int getNextIndex(javax.swing.JList,org.jdesktop.swingx.plaf.basic.core.BasicXListUI,int)>(r4, r7, $i46);

        $i48 = (int) -1;

        specialinvoke r0.<org.jdesktop.swingx.plaf.basic.core.BasicXListUI$Actions: void changeSelection(javax.swing.JList,int,int,int)>(r4, 1, $i26, $i48);

        goto label33;

     label07:
        if $r1 != "selectPreviousRowExtendSelection" goto label08;

        $i50 = (int) -1;

        $i25 = specialinvoke r0.<org.jdesktop.swingx.plaf.basic.core.BasicXListUI$Actions: int getNextIndex(javax.swing.JList,org.jdesktop.swingx.plaf.basic.core.BasicXListUI,int)>(r4, r7, $i50);

        $i52 = (int) -1;

        specialinvoke r0.<org.jdesktop.swingx.plaf.basic.core.BasicXListUI$Actions: void changeSelection(javax.swing.JList,int,int,int)>(r4, 2, $i25, $i52);

        goto label33;

     label08:
        if $r1 != "selectPreviousRowChangeLead" goto label09;

        $i54 = (int) -1;

        $i24 = specialinvoke r0.<org.jdesktop.swingx.plaf.basic.core.BasicXListUI$Actions: int getNextIndex(javax.swing.JList,org.jdesktop.swingx.plaf.basic.core.BasicXListUI,int)>(r4, r7, $i54);

        $i56 = (int) -1;

        specialinvoke r0.<org.jdesktop.swingx.plaf.basic.core.BasicXListUI$Actions: void changeSelection(javax.swing.JList,int,int,int)>(r4, 0, $i24, $i56);

        goto label33;

     label09:
        if $r1 != "selectNextRow" goto label10;

        $i23 = specialinvoke r0.<org.jdesktop.swingx.plaf.basic.core.BasicXListUI$Actions: int getNextIndex(javax.swing.JList,org.jdesktop.swingx.plaf.basic.core.BasicXListUI,int)>(r4, r7, 1);

        specialinvoke r0.<org.jdesktop.swingx.plaf.basic.core.BasicXListUI$Actions: void changeSelection(javax.swing.JList,int,int,int)>(r4, 1, $i23, 1);

        goto label33;

     label10:
        if $r1 != "selectNextRowExtendSelection" goto label11;

        $i22 = specialinvoke r0.<org.jdesktop.swingx.plaf.basic.core.BasicXListUI$Actions: int getNextIndex(javax.swing.JList,org.jdesktop.swingx.plaf.basic.core.BasicXListUI,int)>(r4, r7, 1);

        specialinvoke r0.<org.jdesktop.swingx.plaf.basic.core.BasicXListUI$Actions: void changeSelection(javax.swing.JList,int,int,int)>(r4, 2, $i22, 1);

        goto label33;

     label11:
        if $r1 != "selectNextRowChangeLead" goto label12;

        $i21 = specialinvoke r0.<org.jdesktop.swingx.plaf.basic.core.BasicXListUI$Actions: int getNextIndex(javax.swing.JList,org.jdesktop.swingx.plaf.basic.core.BasicXListUI,int)>(r4, r7, 1);

        specialinvoke r0.<org.jdesktop.swingx.plaf.basic.core.BasicXListUI$Actions: void changeSelection(javax.swing.JList,int,int,int)>(r4, 0, $i21, 1);

        goto label33;

     label12:
        if $r1 != "selectFirstRow" goto label13;

        $i58 = (int) -1;

        specialinvoke r0.<org.jdesktop.swingx.plaf.basic.core.BasicXListUI$Actions: void changeSelection(javax.swing.JList,int,int,int)>(r4, 1, 0, $i58);

        goto label33;

     label13:
        if $r1 != "selectFirstRowExtendSelection" goto label14;

        $i60 = (int) -1;

        specialinvoke r0.<org.jdesktop.swingx.plaf.basic.core.BasicXListUI$Actions: void changeSelection(javax.swing.JList,int,int,int)>(r4, 2, 0, $i60);

        goto label33;

     label14:
        if $r1 != "selectFirstRowChangeLead" goto label15;

        $i62 = (int) -1;

        specialinvoke r0.<org.jdesktop.swingx.plaf.basic.core.BasicXListUI$Actions: void changeSelection(javax.swing.JList,int,int,int)>(r4, 0, 0, $i62);

        goto label33;

     label15:
        if $r1 != "selectLastRow" goto label16;

        $i19 = specialinvoke r0.<org.jdesktop.swingx.plaf.basic.core.BasicXListUI$Actions: int getElementCount(javax.swing.JList)>(r4);

        $i20 = $i19 - 1;

        specialinvoke r0.<org.jdesktop.swingx.plaf.basic.core.BasicXListUI$Actions: void changeSelection(javax.swing.JList,int,int,int)>(r4, 1, $i20, 1);

        goto label33;

     label16:
        if $r1 != "selectLastRowExtendSelection" goto label17;

        $i17 = specialinvoke r0.<org.jdesktop.swingx.plaf.basic.core.BasicXListUI$Actions: int getElementCount(javax.swing.JList)>(r4);

        $i18 = $i17 - 1;

        specialinvoke r0.<org.jdesktop.swingx.plaf.basic.core.BasicXListUI$Actions: void changeSelection(javax.swing.JList,int,int,int)>(r4, 2, $i18, 1);

        goto label33;

     label17:
        if $r1 != "selectLastRowChangeLead" goto label18;

        $i15 = specialinvoke r0.<org.jdesktop.swingx.plaf.basic.core.BasicXListUI$Actions: int getElementCount(javax.swing.JList)>(r4);

        $i16 = $i15 - 1;

        specialinvoke r0.<org.jdesktop.swingx.plaf.basic.core.BasicXListUI$Actions: void changeSelection(javax.swing.JList,int,int,int)>(r4, 0, $i16, 1);

        goto label33;

     label18:
        if $r1 != "scrollUp" goto label19;

        $i64 = (int) -1;

        $i14 = specialinvoke r0.<org.jdesktop.swingx.plaf.basic.core.BasicXListUI$Actions: int getNextPageIndex(javax.swing.JList,int)>(r4, $i64);

        $i66 = (int) -1;

        specialinvoke r0.<org.jdesktop.swingx.plaf.basic.core.BasicXListUI$Actions: void changeSelection(javax.swing.JList,int,int,int)>(r4, 1, $i14, $i66);

        goto label33;

     label19:
        if $r1 != "scrollUpExtendSelection" goto label20;

        $i68 = (int) -1;

        $i13 = specialinvoke r0.<org.jdesktop.swingx.plaf.basic.core.BasicXListUI$Actions: int getNextPageIndex(javax.swing.JList,int)>(r4, $i68);

        $i70 = (int) -1;

        specialinvoke r0.<org.jdesktop.swingx.plaf.basic.core.BasicXListUI$Actions: void changeSelection(javax.swing.JList,int,int,int)>(r4, 2, $i13, $i70);

        goto label33;

     label20:
        if $r1 != "scrollUpChangeLead" goto label21;

        $i72 = (int) -1;

        $i12 = specialinvoke r0.<org.jdesktop.swingx.plaf.basic.core.BasicXListUI$Actions: int getNextPageIndex(javax.swing.JList,int)>(r4, $i72);

        $i74 = (int) -1;

        specialinvoke r0.<org.jdesktop.swingx.plaf.basic.core.BasicXListUI$Actions: void changeSelection(javax.swing.JList,int,int,int)>(r4, 0, $i12, $i74);

        goto label33;

     label21:
        if $r1 != "scrollDown" goto label22;

        $i11 = specialinvoke r0.<org.jdesktop.swingx.plaf.basic.core.BasicXListUI$Actions: int getNextPageIndex(javax.swing.JList,int)>(r4, 1);

        specialinvoke r0.<org.jdesktop.swingx.plaf.basic.core.BasicXListUI$Actions: void changeSelection(javax.swing.JList,int,int,int)>(r4, 1, $i11, 1);

        goto label33;

     label22:
        if $r1 != "scrollDownExtendSelection" goto label23;

        $i10 = specialinvoke r0.<org.jdesktop.swingx.plaf.basic.core.BasicXListUI$Actions: int getNextPageIndex(javax.swing.JList,int)>(r4, 1);

        specialinvoke r0.<org.jdesktop.swingx.plaf.basic.core.BasicXListUI$Actions: void changeSelection(javax.swing.JList,int,int,int)>(r4, 2, $i10, 1);

        goto label33;

     label23:
        if $r1 != "scrollDownChangeLead" goto label24;

        $i9 = specialinvoke r0.<org.jdesktop.swingx.plaf.basic.core.BasicXListUI$Actions: int getNextPageIndex(javax.swing.JList,int)>(r4, 1);

        specialinvoke r0.<org.jdesktop.swingx.plaf.basic.core.BasicXListUI$Actions: void changeSelection(javax.swing.JList,int,int,int)>(r4, 0, $i9, 1);

        goto label33;

     label24:
        if $r1 != "selectAll" goto label25;

        specialinvoke r0.<org.jdesktop.swingx.plaf.basic.core.BasicXListUI$Actions: void selectAll(javax.swing.JList)>(r4);

        goto label33;

     label25:
        if $r1 != "clearSelection" goto label26;

        specialinvoke r0.<org.jdesktop.swingx.plaf.basic.core.BasicXListUI$Actions: void clearSelection(javax.swing.JList)>(r4);

        goto label33;

     label26:
        if $r1 != "addToSelection" goto label28;

        $r11 = virtualinvoke r4.<javax.swing.JList: javax.swing.ListSelectionModel getSelectionModel()>();

        $i6 = interfaceinvoke $r11.<javax.swing.ListSelectionModel: int getLeadSelectionIndex()>();

        $i7 = staticinvoke <org.jdesktop.swingx.plaf.basic.core.BasicXListUI: int access$200(int,javax.swing.JList)>($i6, r4);

        $z1 = virtualinvoke r4.<javax.swing.JList: boolean isSelectedIndex(int)>($i7);

        if $z1 != 0 goto label27;

        $r12 = virtualinvoke r4.<javax.swing.JList: javax.swing.ListSelectionModel getSelectionModel()>();

        $i8 = interfaceinvoke $r12.<javax.swing.ListSelectionModel: int getAnchorSelectionIndex()>();

        virtualinvoke r4.<javax.swing.JList: void setValueIsAdjusting(boolean)>(1);

        virtualinvoke r4.<javax.swing.JList: void addSelectionInterval(int,int)>($i7, $i7);

        $r13 = virtualinvoke r4.<javax.swing.JList: javax.swing.ListSelectionModel getSelectionModel()>();

        interfaceinvoke $r13.<javax.swing.ListSelectionModel: void setAnchorSelectionIndex(int)>($i8);

        virtualinvoke r4.<javax.swing.JList: void setValueIsAdjusting(boolean)>(0);

     label27:
        goto label33;

     label28:
        if $r1 != "toggleAndAnchor" goto label31;

        $r10 = virtualinvoke r4.<javax.swing.JList: javax.swing.ListSelectionModel getSelectionModel()>();

        $i4 = interfaceinvoke $r10.<javax.swing.ListSelectionModel: int getLeadSelectionIndex()>();

        $i5 = staticinvoke <org.jdesktop.swingx.plaf.basic.core.BasicXListUI: int access$200(int,javax.swing.JList)>($i4, r4);

        $z0 = virtualinvoke r4.<javax.swing.JList: boolean isSelectedIndex(int)>($i5);

        if $z0 == 0 goto label29;

        virtualinvoke r4.<javax.swing.JList: void removeSelectionInterval(int,int)>($i5, $i5);

        goto label30;

     label29:
        virtualinvoke r4.<javax.swing.JList: void addSelectionInterval(int,int)>($i5, $i5);

     label30:
        goto label33;

     label31:
        if $r1 != "extendTo" goto label32;

        $r9 = virtualinvoke r4.<javax.swing.JList: javax.swing.ListSelectionModel getSelectionModel()>();

        $i2 = interfaceinvoke $r9.<javax.swing.ListSelectionModel: int getLeadSelectionIndex()>();

        $i3 = staticinvoke <org.jdesktop.swingx.plaf.basic.core.BasicXListUI: int access$200(int,javax.swing.JList)>($i2, r4);

        specialinvoke r0.<org.jdesktop.swingx.plaf.basic.core.BasicXListUI$Actions: void changeSelection(javax.swing.JList,int,int,int)>(r4, 2, $i3, 0);

        goto label33;

     label32:
        if $r1 != "moveSelectionTo" goto label33;

        $r8 = virtualinvoke r4.<javax.swing.JList: javax.swing.ListSelectionModel getSelectionModel()>();

        $i0 = interfaceinvoke $r8.<javax.swing.ListSelectionModel: int getLeadSelectionIndex()>();

        $i1 = staticinvoke <org.jdesktop.swingx.plaf.basic.core.BasicXListUI: int access$200(int,javax.swing.JList)>($i0, r4);

        specialinvoke r0.<org.jdesktop.swingx.plaf.basic.core.BasicXListUI$Actions: void changeSelection(javax.swing.JList,int,int,int)>(r4, 1, $i1, 0);

     label33:
        return;
    }

    private int getElementCount(javax.swing.JList)
    {
        javax.swing.JList r0;
        org.jdesktop.swingx.JXList $r1;
        int $i0;
        org.jdesktop.swingx.plaf.basic.core.BasicXListUI$Actions r2;

        r2 := @this: org.jdesktop.swingx.plaf.basic.core.BasicXListUI$Actions;

        r0 := @parameter0: javax.swing.JList;

        $r1 = (org.jdesktop.swingx.JXList) r0;

        $i0 = virtualinvoke $r1.<org.jdesktop.swingx.JXList: int getElementCount()>();

        return $i0;
    }

    public boolean isEnabled(java.lang.Object)
    {
        javax.swing.ListSelectionModel $r4;
        javax.swing.JList $r3;
        java.lang.Object r2;
        java.lang.String $r1;
        org.jdesktop.swingx.plaf.basic.core.BasicXListUI$Actions r0;
        boolean $z0, $z1;

        r0 := @this: org.jdesktop.swingx.plaf.basic.core.BasicXListUI$Actions;

        r2 := @parameter0: java.lang.Object;

        $r1 = virtualinvoke r0.<org.jdesktop.swingx.plaf.basic.core.BasicXListUI$Actions: java.lang.String getName()>();

        if $r1 == "selectPreviousColumnChangeLead" goto label1;

        if $r1 == "selectNextColumnChangeLead" goto label1;

        if $r1 == "selectPreviousRowChangeLead" goto label1;

        if $r1 == "selectNextRowChangeLead" goto label1;

        if $r1 == "selectFirstRowChangeLead" goto label1;

        if $r1 == "selectLastRowChangeLead" goto label1;

        if $r1 == "scrollUpChangeLead" goto label1;

        if $r1 != "scrollDownChangeLead" goto label4;

     label1:
        if r2 == null goto label2;

        $r3 = (javax.swing.JList) r2;

        $r4 = virtualinvoke $r3.<javax.swing.JList: javax.swing.ListSelectionModel getSelectionModel()>();

        $z0 = $r4 instanceof javax.swing.DefaultListSelectionModel;

        if $z0 == 0 goto label2;

        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;

     label4:
        return 1;
    }

    private void clearSelection(javax.swing.JList)
    {
        javax.swing.JList r0;
        org.jdesktop.swingx.plaf.basic.core.BasicXListUI$Actions r1;

        r1 := @this: org.jdesktop.swingx.plaf.basic.core.BasicXListUI$Actions;

        r0 := @parameter0: javax.swing.JList;

        virtualinvoke r0.<javax.swing.JList: void clearSelection()>();

        return;
    }

    private void selectAll(javax.swing.JList)
    {
        javax.swing.ListSelectionModel $r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i9, $i10, $i12, $i14;
        javax.swing.JList r1;
        org.jdesktop.swingx.plaf.basic.core.BasicXListUI$Actions r0;

        r0 := @this: org.jdesktop.swingx.plaf.basic.core.BasicXListUI$Actions;

        r1 := @parameter0: javax.swing.JList;

        $i0 = specialinvoke r0.<org.jdesktop.swingx.plaf.basic.core.BasicXListUI$Actions: int getElementCount(javax.swing.JList)>(r1);

        if $i0 <= 0 goto label5;

        $r2 = virtualinvoke r1.<javax.swing.JList: javax.swing.ListSelectionModel getSelectionModel()>();

        $i1 = interfaceinvoke $r2.<javax.swing.ListSelectionModel: int getLeadSelectionIndex()>();

        $i2 = staticinvoke <org.jdesktop.swingx.plaf.basic.core.BasicXListUI: int access$200(int,javax.swing.JList)>($i1, r1);

        i9 = $i2;

        $i3 = interfaceinvoke $r2.<javax.swing.ListSelectionModel: int getSelectionMode()>();

        if $i3 != 0 goto label4;

        $i12 = (int) -1;

        if $i2 != $i12 goto label3;

        $i7 = virtualinvoke r1.<javax.swing.JList: int getMinSelectionIndex()>();

        $i8 = staticinvoke <org.jdesktop.swingx.plaf.basic.core.BasicXListUI: int access$200(int,javax.swing.JList)>($i7, r1);

        $i14 = (int) -1;

        if $i8 != $i14 goto label1;

        $i10 = 0;

        goto label2;

     label1:
        $i10 = $i8;

     label2:
        i9 = $i10;

     label3:
        virtualinvoke r1.<javax.swing.JList: void setSelectionInterval(int,int)>(i9, i9);

        virtualinvoke r1.<javax.swing.JList: void ensureIndexIsVisible(int)>(i9);

        goto label5;

     label4:
        virtualinvoke r1.<javax.swing.JList: void setValueIsAdjusting(boolean)>(1);

        $i4 = interfaceinvoke $r2.<javax.swing.ListSelectionModel: int getAnchorSelectionIndex()>();

        $i5 = staticinvoke <org.jdesktop.swingx.plaf.basic.core.BasicXListUI: int access$200(int,javax.swing.JList)>($i4, r1);

        $i6 = $i0 - 1;

        virtualinvoke r1.<javax.swing.JList: void setSelectionInterval(int,int)>(0, $i6);

        staticinvoke <org.jdesktop.swingx.SwingXUtilities: void setLeadAnchorWithoutSelection(javax.swing.ListSelectionModel,int,int)>($r2, $i5, $i2);

        virtualinvoke r1.<javax.swing.JList: void setValueIsAdjusting(boolean)>(0);

     label5:
        return;
    }

    private int getNextPageIndex(javax.swing.JList, int)
    {
        org.jdesktop.swingx.plaf.basic.core.BasicXListUI$Actions r0;
        javax.swing.ListSelectionModel $r3;
        java.awt.ComponentOrientation $r10;
        java.awt.Point $r21, $r22, $r23, $r24;
        boolean $z0, $z1, $z2;
        java.awt.Rectangle $r2, r4, $r6, $r7, $r9, $r12, $r14, $r15, r16, r17, r18, r19, $r20;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $i78, $i79, $i80, $i81, $i82, $i83, $i84, $i85, $i86, $i87, $i88, $i89, $i90, i91, i92, $i94, $i96;
        javax.swing.JList r1;

        r0 := @this: org.jdesktop.swingx.plaf.basic.core.BasicXListUI$Actions;

        r1 := @parameter0: javax.swing.JList;

        i91 := @parameter1: int;

        $i0 = specialinvoke r0.<org.jdesktop.swingx.plaf.basic.core.BasicXListUI$Actions: int getElementCount(javax.swing.JList)>(r1);

        if $i0 != 0 goto label01;

        $i94 = (int) -1;

        return $i94;

     label01:
        $r2 = virtualinvoke r1.<javax.swing.JList: java.awt.Rectangle getVisibleRect()>();

        $r3 = virtualinvoke r1.<javax.swing.JList: javax.swing.ListSelectionModel getSelectionModel()>();

        $i1 = interfaceinvoke $r3.<javax.swing.ListSelectionModel: int getLeadSelectionIndex()>();

        $i2 = staticinvoke <org.jdesktop.swingx.plaf.basic.core.BasicXListUI: int access$200(int,javax.swing.JList)>($i1, r1);

        $i96 = (int) -1;

        if $i2 != $i96 goto label02;

        $r20 = new java.awt.Rectangle;

        $r15 = $r20;

        specialinvoke $r20.<java.awt.Rectangle: void <init>()>();

        goto label03;

     label02:
        $r15 = virtualinvoke r1.<javax.swing.JList: java.awt.Rectangle getCellBounds(int,int)>($i2, $i2);

     label03:
        r4 = $r15;

        $i3 = virtualinvoke r1.<javax.swing.JList: int getLayoutOrientation()>();

        if $i3 != 1 goto label10;

        $i59 = virtualinvoke r1.<javax.swing.JList: int getVisibleRowCount()>();

        if $i59 > 0 goto label10;

        $r10 = virtualinvoke r1.<javax.swing.JList: java.awt.ComponentOrientation getComponentOrientation()>();

        $z0 = virtualinvoke $r10.<java.awt.ComponentOrientation: boolean isLeftToRight()>();

        if $z0 != 0 goto label04;

        i91 = neg i91;

     label04:
        if i91 >= 0 goto label07;

        $i75 = r4.<java.awt.Rectangle: int x>;

        $i74 = r4.<java.awt.Rectangle: int width>;

        $i77 = $i75 + $i74;

        $i76 = $r2.<java.awt.Rectangle: int width>;

        $i78 = $i77 - $i76;

        $r2.<java.awt.Rectangle: int x> = $i78;

        $r21 = new java.awt.Point;

        $i79 = $r2.<java.awt.Rectangle: int x>;

        $i81 = $i79 - 1;

        $i80 = r4.<java.awt.Rectangle: int y>;

        specialinvoke $r21.<java.awt.Point: void <init>(int,int)>($i81, $i80);

        $i82 = virtualinvoke r1.<javax.swing.JList: int locationToIndex(java.awt.Point)>($r21);

        i92 = $i82;

        $r14 = virtualinvoke r1.<javax.swing.JList: java.awt.Rectangle getCellBounds(int,int)>($i82, $i82);

        r16 = $r14;

        $z2 = virtualinvoke $r2.<java.awt.Rectangle: boolean intersects(java.awt.Rectangle)>($r14);

        if $z2 == 0 goto label05;

        $i88 = $r14.<java.awt.Rectangle: int x>;

        $i89 = $i88 - 1;

        $r21.<java.awt.Point: int x> = $i89;

        $i90 = virtualinvoke r1.<javax.swing.JList: int locationToIndex(java.awt.Point)>($r21);

        i92 = $i90;

        r16 = virtualinvoke r1.<javax.swing.JList: java.awt.Rectangle getCellBounds(int,int)>($i90, $i90);

     label05:
        $i84 = r16.<java.awt.Rectangle: int y>;

        $i83 = r4.<java.awt.Rectangle: int y>;

        if $i84 == $i83 goto label06;

        $i86 = r16.<java.awt.Rectangle: int x>;

        $i85 = r16.<java.awt.Rectangle: int width>;

        $i87 = $i86 + $i85;

        $r21.<java.awt.Point: int x> = $i87;

        i92 = virtualinvoke r1.<javax.swing.JList: int locationToIndex(java.awt.Point)>($r21);

     label06:
        goto label16;

     label07:
        $i60 = r4.<java.awt.Rectangle: int x>;

        $r2.<java.awt.Rectangle: int x> = $i60;

        $r22 = new java.awt.Point;

        $i62 = $r2.<java.awt.Rectangle: int x>;

        $i61 = $r2.<java.awt.Rectangle: int width>;

        $i64 = $i62 + $i61;

        $i63 = r4.<java.awt.Rectangle: int y>;

        specialinvoke $r22.<java.awt.Point: void <init>(int,int)>($i64, $i63);

        $i65 = virtualinvoke r1.<javax.swing.JList: int locationToIndex(java.awt.Point)>($r22);

        i92 = $i65;

        $r12 = virtualinvoke r1.<javax.swing.JList: java.awt.Rectangle getCellBounds(int,int)>($i65, $i65);

        r17 = $r12;

        $z1 = virtualinvoke $r2.<java.awt.Rectangle: boolean intersects(java.awt.Rectangle)>($r12);

        if $z1 == 0 goto label08;

        $i71 = $r12.<java.awt.Rectangle: int x>;

        $i70 = $r12.<java.awt.Rectangle: int width>;

        $i72 = $i71 + $i70;

        $r22.<java.awt.Point: int x> = $i72;

        $i73 = virtualinvoke r1.<javax.swing.JList: int locationToIndex(java.awt.Point)>($r22);

        i92 = $i73;

        r17 = virtualinvoke r1.<javax.swing.JList: java.awt.Rectangle getCellBounds(int,int)>($i73, $i73);

     label08:
        $i67 = r17.<java.awt.Rectangle: int y>;

        $i66 = r4.<java.awt.Rectangle: int y>;

        if $i67 == $i66 goto label09;

        $i68 = r17.<java.awt.Rectangle: int x>;

        $i69 = $i68 - 1;

        $r22.<java.awt.Point: int x> = $i69;

        i92 = virtualinvoke r1.<javax.swing.JList: int locationToIndex(java.awt.Point)>($r22);

     label09:
        goto label16;

     label10:
        if i91 >= 0 goto label13;

        $r23 = new java.awt.Point;

        $i40 = r4.<java.awt.Rectangle: int x>;

        $i39 = $r2.<java.awt.Rectangle: int y>;

        specialinvoke $r23.<java.awt.Point: void <init>(int,int)>($i40, $i39);

        $i41 = virtualinvoke r1.<javax.swing.JList: int locationToIndex(java.awt.Point)>($r23);

        i92 = $i41;

        if $i2 > $i41 goto label12;

        $i43 = r4.<java.awt.Rectangle: int y>;

        $i42 = r4.<java.awt.Rectangle: int height>;

        $i45 = $i43 + $i42;

        $i44 = $r2.<java.awt.Rectangle: int height>;

        $i46 = $i45 - $i44;

        $r2.<java.awt.Rectangle: int y> = $i46;

        $i47 = $r2.<java.awt.Rectangle: int y>;

        $r23.<java.awt.Point: int y> = $i47;

        $i48 = virtualinvoke r1.<javax.swing.JList: int locationToIndex(java.awt.Point)>($r23);

        i92 = $i48;

        $r9 = virtualinvoke r1.<javax.swing.JList: java.awt.Rectangle getCellBounds(int,int)>($i48, $i48);

        r18 = $r9;

        $i50 = $r9.<java.awt.Rectangle: int y>;

        $i49 = $r2.<java.awt.Rectangle: int y>;

        if $i50 >= $i49 goto label11;

        $i56 = $r9.<java.awt.Rectangle: int y>;

        $i55 = $r9.<java.awt.Rectangle: int height>;

        $i57 = $i56 + $i55;

        $r23.<java.awt.Point: int y> = $i57;

        $i58 = virtualinvoke r1.<javax.swing.JList: int locationToIndex(java.awt.Point)>($r23);

        i92 = $i58;

        r18 = virtualinvoke r1.<javax.swing.JList: java.awt.Rectangle getCellBounds(int,int)>($i58, $i58);

     label11:
        $i52 = r18.<java.awt.Rectangle: int y>;

        $i51 = r4.<java.awt.Rectangle: int y>;

        if $i52 < $i51 goto label12;

        $i53 = r4.<java.awt.Rectangle: int y>;

        $i54 = $i53 - 1;

        $r23.<java.awt.Point: int y> = $i54;

        i92 = virtualinvoke r1.<javax.swing.JList: int locationToIndex(java.awt.Point)>($r23);

     label12:
        goto label16;

     label13:
        $r24 = new java.awt.Point;

        $i8 = r4.<java.awt.Rectangle: int x>;

        $i5 = $r2.<java.awt.Rectangle: int y>;

        $i4 = $r2.<java.awt.Rectangle: int height>;

        $i6 = $i5 + $i4;

        $i7 = $i6 - 1;

        specialinvoke $r24.<java.awt.Point: void <init>(int,int)>($i8, $i7);

        $i9 = virtualinvoke r1.<javax.swing.JList: int locationToIndex(java.awt.Point)>($r24);

        i92 = $i9;

        $r6 = virtualinvoke r1.<javax.swing.JList: java.awt.Rectangle getCellBounds(int,int)>($i9, $i9);

        $i11 = $r6.<java.awt.Rectangle: int y>;

        $i10 = $r6.<java.awt.Rectangle: int height>;

        $i15 = $i11 + $i10;

        $i13 = $r2.<java.awt.Rectangle: int y>;

        $i12 = $r2.<java.awt.Rectangle: int height>;

        $i14 = $i13 + $i12;

        if $i15 <= $i14 goto label14;

        $i36 = $r6.<java.awt.Rectangle: int y>;

        $i37 = $i36 - 1;

        $r24.<java.awt.Point: int y> = $i37;

        $i38 = virtualinvoke r1.<javax.swing.JList: int locationToIndex(java.awt.Point)>($r24);

        virtualinvoke r1.<javax.swing.JList: java.awt.Rectangle getCellBounds(int,int)>($i38, $i38);

        i92 = staticinvoke <java.lang.Math: int max(int,int)>($i38, $i2);

     label14:
        if $i2 < i92 goto label16;

        $i16 = r4.<java.awt.Rectangle: int y>;

        $r2.<java.awt.Rectangle: int y> = $i16;

        $i18 = $r2.<java.awt.Rectangle: int y>;

        $i17 = $r2.<java.awt.Rectangle: int height>;

        $i19 = $i18 + $i17;

        $i20 = $i19 - 1;

        $r24.<java.awt.Point: int y> = $i20;

        $i21 = virtualinvoke r1.<javax.swing.JList: int locationToIndex(java.awt.Point)>($r24);

        i92 = $i21;

        $r7 = virtualinvoke r1.<javax.swing.JList: java.awt.Rectangle getCellBounds(int,int)>($i21, $i21);

        r19 = $r7;

        $i23 = $r7.<java.awt.Rectangle: int y>;

        $i22 = $r7.<java.awt.Rectangle: int height>;

        $i27 = $i23 + $i22;

        $i25 = $r2.<java.awt.Rectangle: int y>;

        $i24 = $r2.<java.awt.Rectangle: int height>;

        $i26 = $i25 + $i24;

        if $i27 <= $i26 goto label15;

        $i33 = $r7.<java.awt.Rectangle: int y>;

        $i34 = $i33 - 1;

        $r24.<java.awt.Point: int y> = $i34;

        $i35 = virtualinvoke r1.<javax.swing.JList: int locationToIndex(java.awt.Point)>($r24);

        i92 = $i35;

        r19 = virtualinvoke r1.<javax.swing.JList: java.awt.Rectangle getCellBounds(int,int)>($i35, $i35);

     label15:
        $i29 = r19.<java.awt.Rectangle: int y>;

        $i28 = r4.<java.awt.Rectangle: int y>;

        if $i29 > $i28 goto label16;

        $i31 = r4.<java.awt.Rectangle: int y>;

        $i30 = r4.<java.awt.Rectangle: int height>;

        $i32 = $i31 + $i30;

        $r24.<java.awt.Point: int y> = $i32;

        i92 = virtualinvoke r1.<javax.swing.JList: int locationToIndex(java.awt.Point)>($r24);

     label16:
        return i92;
    }

    private void changeSelection(javax.swing.JList, int, int, int)
    {
        javax.swing.ListSelectionModel $r2;
        javax.swing.JList r1;
        org.jdesktop.swingx.plaf.basic.core.BasicXListUI$Actions r0;
        javax.swing.DefaultListSelectionModel $r3;
        int i0, $i1, i2, $i3, $i4, $i5, i6, i7, $i9;
        boolean $z0;

        r0 := @this: org.jdesktop.swingx.plaf.basic.core.BasicXListUI$Actions;

        r1 := @parameter0: javax.swing.JList;

        i6 := @parameter1: int;

        i0 := @parameter2: int;

        i2 := @parameter3: int;

        if i0 < 0 goto label5;

        $i1 = specialinvoke r0.<org.jdesktop.swingx.plaf.basic.core.BasicXListUI$Actions: int getElementCount(javax.swing.JList)>(r1);

        if i0 >= $i1 goto label5;

        $r2 = virtualinvoke r1.<javax.swing.JList: javax.swing.ListSelectionModel getSelectionModel()>();

        if i6 != 0 goto label1;

        $i5 = virtualinvoke r1.<javax.swing.JList: int getSelectionMode()>();

        if $i5 == 2 goto label1;

        i6 = 1;

     label1:
        specialinvoke r0.<org.jdesktop.swingx.plaf.basic.core.BasicXListUI$Actions: void adjustScrollPositionIfNecessary(javax.swing.JList,int,int)>(r1, i0, i2);

        if i6 != 2 goto label3;

        $i3 = interfaceinvoke $r2.<javax.swing.ListSelectionModel: int getAnchorSelectionIndex()>();

        $i4 = staticinvoke <org.jdesktop.swingx.plaf.basic.core.BasicXListUI: int access$200(int,javax.swing.JList)>($i3, r1);

        i7 = $i4;

        $i9 = (int) -1;

        if $i4 != $i9 goto label2;

        i7 = 0;

     label2:
        virtualinvoke r1.<javax.swing.JList: void setSelectionInterval(int,int)>(i7, i0);

        goto label5;

     label3:
        if i6 != 1 goto label4;

        virtualinvoke r1.<javax.swing.JList: void setSelectedIndex(int)>(i0);

        goto label5;

     label4:
        $z0 = $r2 instanceof javax.swing.DefaultListSelectionModel;

        if $z0 == 0 goto label5;

        $r3 = (javax.swing.DefaultListSelectionModel) $r2;

        virtualinvoke $r3.<javax.swing.DefaultListSelectionModel: void moveLeadSelectionIndex(int)>(i0);

     label5:
        return;
    }

    private void adjustScrollPositionIfNecessary(javax.swing.JList, int, int)
    {
        org.jdesktop.swingx.plaf.basic.core.BasicXListUI$Actions r12;
        java.awt.ComponentOrientation $r6;
        java.awt.Point $r3, $r5, $r7, $r9, $r11;
        boolean $z0, $z1;
        java.awt.Rectangle $r1, $r2, $r4, $r8, $r10, r13, r14, r15;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72;
        javax.swing.JList r0;

        r12 := @this: org.jdesktop.swingx.plaf.basic.core.BasicXListUI$Actions;

        r0 := @parameter0: javax.swing.JList;

        i1 := @parameter1: int;

        i0 := @parameter2: int;

        if i0 != 0 goto label01;

        return;

     label01:
        $r1 = virtualinvoke r0.<javax.swing.JList: java.awt.Rectangle getCellBounds(int,int)>(i1, i1);

        r13 = $r1;

        $r2 = virtualinvoke r0.<javax.swing.JList: java.awt.Rectangle getVisibleRect()>();

        if $r1 == null goto label12;

        $z0 = virtualinvoke $r2.<java.awt.Rectangle: boolean contains(java.awt.Rectangle)>($r1);

        if $z0 != 0 goto label12;

        $i2 = virtualinvoke r0.<javax.swing.JList: int getLayoutOrientation()>();

        if $i2 != 1 goto label07;

        $i29 = virtualinvoke r0.<javax.swing.JList: int getVisibleRowCount()>();

        if $i29 > 0 goto label07;

        $r6 = virtualinvoke r0.<javax.swing.JList: java.awt.ComponentOrientation getComponentOrientation()>();

        $z1 = virtualinvoke $r6.<java.awt.ComponentOrientation: boolean isLeftToRight()>();

        if $z1 == 0 goto label04;

        if i0 <= 0 goto label03;

        $i49 = $r1.<java.awt.Rectangle: int x>;

        $i48 = $r1.<java.awt.Rectangle: int width>;

        $i51 = $i49 + $i48;

        $i50 = $r2.<java.awt.Rectangle: int width>;

        $i52 = $i51 - $i50;

        $i53 = staticinvoke <java.lang.Math: int max(int,int)>(0, $i52);

        $r9 = new java.awt.Point;

        $i54 = $r1.<java.awt.Rectangle: int y>;

        specialinvoke $r9.<java.awt.Point: void <init>(int,int)>($i53, $i54);

        $i55 = virtualinvoke r0.<javax.swing.JList: int locationToIndex(java.awt.Point)>($r9);

        $r10 = virtualinvoke r0.<javax.swing.JList: java.awt.Rectangle getCellBounds(int,int)>($i55, $i55);

        r14 = $r10;

        $i56 = $r10.<java.awt.Rectangle: int x>;

        if $i56 >= $i53 goto label02;

        $i58 = $r10.<java.awt.Rectangle: int x>;

        $i57 = $r1.<java.awt.Rectangle: int x>;

        if $i58 >= $i57 goto label02;

        $i60 = $r10.<java.awt.Rectangle: int x>;

        $i59 = $r10.<java.awt.Rectangle: int width>;

        $i61 = $i60 + $i59;

        $r10.<java.awt.Rectangle: int x> = $i61;

        $r11 = virtualinvoke $r10.<java.awt.Rectangle: java.awt.Point getLocation()>();

        $i62 = virtualinvoke r0.<javax.swing.JList: int locationToIndex(java.awt.Point)>($r11);

        r14 = virtualinvoke r0.<javax.swing.JList: java.awt.Rectangle getCellBounds(int,int)>($i62, $i62);

     label02:
        r13 = r14;

     label03:
        $i63 = $r2.<java.awt.Rectangle: int width>;

        r13.<java.awt.Rectangle: int width> = $i63;

        goto label11;

     label04:
        if i0 <= 0 goto label06;

        $i40 = $r1.<java.awt.Rectangle: int x>;

        $i39 = $r2.<java.awt.Rectangle: int width>;

        i64 = $i40 + $i39;

        $r7 = new java.awt.Point;

        $i41 = $r1.<java.awt.Rectangle: int y>;

        specialinvoke $r7.<java.awt.Point: void <init>(int,int)>(i64, $i41);

        $i42 = virtualinvoke r0.<javax.swing.JList: int locationToIndex(java.awt.Point)>($r7);

        $r8 = virtualinvoke r0.<javax.swing.JList: java.awt.Rectangle getCellBounds(int,int)>($i42, $i42);

        $i44 = $r8.<java.awt.Rectangle: int x>;

        $i43 = $r8.<java.awt.Rectangle: int width>;

        $i45 = $i44 + $i43;

        if $i45 <= i64 goto label05;

        $i47 = $r8.<java.awt.Rectangle: int x>;

        $i46 = $r1.<java.awt.Rectangle: int x>;

        if $i47 <= $i46 goto label05;

        $r8.<java.awt.Rectangle: int width> = 0;

     label05:
        $i65 = $r8.<java.awt.Rectangle: int x>;

        $i66 = $r8.<java.awt.Rectangle: int width>;

        $i67 = $i65 + $i66;

        $i68 = $r2.<java.awt.Rectangle: int width>;

        $i69 = $i67 - $i68;

        $i70 = staticinvoke <java.lang.Math: int max(int,int)>(0, $i69);

        $r1.<java.awt.Rectangle: int x> = $i70;

        $i71 = $r2.<java.awt.Rectangle: int width>;

        $r1.<java.awt.Rectangle: int width> = $i71;

        goto label11;

     label06:
        $i33 = $r1.<java.awt.Rectangle: int x>;

        $i31 = $r1.<java.awt.Rectangle: int width>;

        $i30 = $r2.<java.awt.Rectangle: int width>;

        $i32 = $i31 - $i30;

        $i34 = staticinvoke <java.lang.Math: int max(int,int)>(0, $i32);

        $i35 = $i33 + $i34;

        $r1.<java.awt.Rectangle: int x> = $i35;

        $i37 = $r1.<java.awt.Rectangle: int width>;

        $i36 = $r2.<java.awt.Rectangle: int width>;

        $i38 = staticinvoke <java.lang.Math: int min(int,int)>($i37, $i36);

        $r1.<java.awt.Rectangle: int width> = $i38;

        goto label11;

     label07:
        if i0 <= 0 goto label10;

        $i7 = $r1.<java.awt.Rectangle: int y>;

        $i6 = $r2.<java.awt.Rectangle: int y>;

        if $i7 < $i6 goto label08;

        $i24 = $r1.<java.awt.Rectangle: int y>;

        $i23 = $r1.<java.awt.Rectangle: int height>;

        $i28 = $i24 + $i23;

        $i26 = $r2.<java.awt.Rectangle: int y>;

        $i25 = $r2.<java.awt.Rectangle: int height>;

        $i27 = $i26 + $i25;

        if $i28 <= $i27 goto label10;

     label08:
        $i9 = $r1.<java.awt.Rectangle: int y>;

        $i8 = $r1.<java.awt.Rectangle: int height>;

        $i11 = $i9 + $i8;

        $i10 = $r2.<java.awt.Rectangle: int height>;

        $i12 = $i11 - $i10;

        $i13 = staticinvoke <java.lang.Math: int max(int,int)>(0, $i12);

        $r3 = new java.awt.Point;

        $i14 = $r1.<java.awt.Rectangle: int x>;

        specialinvoke $r3.<java.awt.Point: void <init>(int,int)>($i14, $i13);

        $i15 = virtualinvoke r0.<javax.swing.JList: int locationToIndex(java.awt.Point)>($r3);

        $r4 = virtualinvoke r0.<javax.swing.JList: java.awt.Rectangle getCellBounds(int,int)>($i15, $i15);

        r15 = $r4;

        $i16 = $r4.<java.awt.Rectangle: int y>;

        if $i16 >= $i13 goto label09;

        $i18 = $r4.<java.awt.Rectangle: int y>;

        $i17 = $r1.<java.awt.Rectangle: int y>;

        if $i18 >= $i17 goto label09;

        $i20 = $r4.<java.awt.Rectangle: int y>;

        $i19 = $r4.<java.awt.Rectangle: int height>;

        $i21 = $i20 + $i19;

        $r4.<java.awt.Rectangle: int y> = $i21;

        $r5 = virtualinvoke $r4.<java.awt.Rectangle: java.awt.Point getLocation()>();

        $i22 = virtualinvoke r0.<javax.swing.JList: int locationToIndex(java.awt.Point)>($r5);

        r15 = virtualinvoke r0.<javax.swing.JList: java.awt.Rectangle getCellBounds(int,int)>($i22, $i22);

     label09:
        r13 = r15;

        $i72 = $r2.<java.awt.Rectangle: int height>;

        r15.<java.awt.Rectangle: int height> = $i72;

        goto label11;

     label10:
        $i4 = $r1.<java.awt.Rectangle: int height>;

        $i3 = $r2.<java.awt.Rectangle: int height>;

        $i5 = staticinvoke <java.lang.Math: int min(int,int)>($i4, $i3);

        $r1.<java.awt.Rectangle: int height> = $i5;

     label11:
        virtualinvoke r0.<javax.swing.JList: void scrollRectToVisible(java.awt.Rectangle)>(r13);

     label12:
        return;
    }

    private int getNextColumnIndex(javax.swing.JList, org.jdesktop.swingx.plaf.basic.core.BasicXListUI, int)
    {
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, $i8, $i9, $i10, i11, $i13, $i15, $i17, $i19, $i21;
        javax.swing.JList r0;
        org.jdesktop.swingx.plaf.basic.core.BasicXListUI r2;
        org.jdesktop.swingx.plaf.basic.core.BasicXListUI$Actions r1;

        r1 := @this: org.jdesktop.swingx.plaf.basic.core.BasicXListUI$Actions;

        r0 := @parameter0: javax.swing.JList;

        r2 := @parameter1: org.jdesktop.swingx.plaf.basic.core.BasicXListUI;

        i7 := @parameter2: int;

        $i0 = virtualinvoke r0.<javax.swing.JList: int getLayoutOrientation()>();

        if $i0 == 0 goto label8;

        $i1 = virtualinvoke r0.<javax.swing.JList: int getLeadSelectionIndex()>();

        $i2 = staticinvoke <org.jdesktop.swingx.plaf.basic.core.BasicXListUI: int access$200(int,javax.swing.JList)>($i1, r0);

        $i3 = specialinvoke r1.<org.jdesktop.swingx.plaf.basic.core.BasicXListUI$Actions: int getElementCount(javax.swing.JList)>(r0);

        $i13 = (int) -1;

        if $i2 != $i13 goto label1;

        return 0;

     label1:
        if $i3 != 1 goto label2;

        return 0;

     label2:
        if r2 == null goto label3;

        $i4 = staticinvoke <org.jdesktop.swingx.plaf.basic.core.BasicXListUI: int access$300(org.jdesktop.swingx.plaf.basic.core.BasicXListUI)>(r2);

        if $i4 > 1 goto label4;

     label3:
        $i15 = (int) -1;

        return $i15;

     label4:
        $i5 = staticinvoke <org.jdesktop.swingx.plaf.basic.core.BasicXListUI: int access$400(org.jdesktop.swingx.plaf.basic.core.BasicXListUI,int)>(r2, $i2);

        $i6 = staticinvoke <org.jdesktop.swingx.plaf.basic.core.BasicXListUI: int access$500(org.jdesktop.swingx.plaf.basic.core.BasicXListUI,int)>(r2, $i2);

        i11 = $i5 + i7;

        $i8 = staticinvoke <org.jdesktop.swingx.plaf.basic.core.BasicXListUI: int access$300(org.jdesktop.swingx.plaf.basic.core.BasicXListUI)>(r2);

        if i11 >= $i8 goto label5;

        if i11 >= 0 goto label6;

     label5:
        $i17 = (int) -1;

        return $i17;

     label6:
        $i9 = staticinvoke <org.jdesktop.swingx.plaf.basic.core.BasicXListUI: int access$600(org.jdesktop.swingx.plaf.basic.core.BasicXListUI,int)>(r2, i11);

        if $i6 < $i9 goto label7;

        $i19 = (int) -1;

        return $i19;

     label7:
        $i10 = staticinvoke <org.jdesktop.swingx.plaf.basic.core.BasicXListUI: int access$700(org.jdesktop.swingx.plaf.basic.core.BasicXListUI,int,int)>(r2, i11, $i6);

        return $i10;

     label8:
        $i21 = (int) -1;

        return $i21;
    }

    private int getNextIndex(javax.swing.JList, org.jdesktop.swingx.plaf.basic.core.BasicXListUI, int)
    {
        javax.swing.JList r0;
        org.jdesktop.swingx.plaf.basic.core.BasicXListUI r2;
        org.jdesktop.swingx.plaf.basic.core.BasicXListUI$Actions r1;
        int $i0, $i1, $i2, $i3, i4, $i5, $i6, i7, $i9;

        r1 := @this: org.jdesktop.swingx.plaf.basic.core.BasicXListUI$Actions;

        r0 := @parameter0: javax.swing.JList;

        r2 := @parameter1: org.jdesktop.swingx.plaf.basic.core.BasicXListUI;

        i4 := @parameter2: int;

        $i0 = virtualinvoke r0.<javax.swing.JList: int getLeadSelectionIndex()>();

        $i1 = staticinvoke <org.jdesktop.swingx.plaf.basic.core.BasicXListUI: int access$200(int,javax.swing.JList)>($i0, r0);

        i7 = $i1;

        $i2 = specialinvoke r1.<org.jdesktop.swingx.plaf.basic.core.BasicXListUI$Actions: int getElementCount(javax.swing.JList)>(r0);

        $i9 = (int) -1;

        if $i1 != $i9 goto label2;

        if $i2 <= 0 goto label5;

        if i4 <= 0 goto label1;

        i7 = 0;

        goto label5;

     label1:
        i7 = $i2 - 1;

        goto label5;

     label2:
        if $i2 != 1 goto label3;

        i7 = 0;

        goto label5;

     label3:
        $i3 = virtualinvoke r0.<javax.swing.JList: int getLayoutOrientation()>();

        if $i3 != 2 goto label4;

        if r2 == null goto label5;

        $i5 = staticinvoke <org.jdesktop.swingx.plaf.basic.core.BasicXListUI: int access$300(org.jdesktop.swingx.plaf.basic.core.BasicXListUI)>(r2);

        $i6 = $i5 * i4;

        i7 = $i1 + $i6;

        goto label5;

     label4:
        i7 = $i1 + i4;

     label5:
        return i7;
    }

    public static void <clinit>()
    {
        <org.jdesktop.swingx.plaf.basic.core.BasicXListUI$Actions: java.lang.String MOVE_SELECTION_TO> = "moveSelectionTo";

        <org.jdesktop.swingx.plaf.basic.core.BasicXListUI$Actions: java.lang.String EXTEND_TO> = "extendTo";

        <org.jdesktop.swingx.plaf.basic.core.BasicXListUI$Actions: java.lang.String TOGGLE_AND_ANCHOR> = "toggleAndAnchor";

        <org.jdesktop.swingx.plaf.basic.core.BasicXListUI$Actions: java.lang.String ADD_TO_SELECTION> = "addToSelection";

        <org.jdesktop.swingx.plaf.basic.core.BasicXListUI$Actions: java.lang.String CLEAR_SELECTION> = "clearSelection";

        <org.jdesktop.swingx.plaf.basic.core.BasicXListUI$Actions: java.lang.String SELECT_ALL> = "selectAll";

        <org.jdesktop.swingx.plaf.basic.core.BasicXListUI$Actions: java.lang.String SCROLL_DOWN_CHANGE_LEAD> = "scrollDownChangeLead";

        <org.jdesktop.swingx.plaf.basic.core.BasicXListUI$Actions: java.lang.String SCROLL_DOWN_EXTEND> = "scrollDownExtendSelection";

        <org.jdesktop.swingx.plaf.basic.core.BasicXListUI$Actions: java.lang.String SCROLL_DOWN> = "scrollDown";

        <org.jdesktop.swingx.plaf.basic.core.BasicXListUI$Actions: java.lang.String SCROLL_UP_CHANGE_LEAD> = "scrollUpChangeLead";

        <org.jdesktop.swingx.plaf.basic.core.BasicXListUI$Actions: java.lang.String SCROLL_UP_EXTEND> = "scrollUpExtendSelection";

        <org.jdesktop.swingx.plaf.basic.core.BasicXListUI$Actions: java.lang.String SCROLL_UP> = "scrollUp";

        <org.jdesktop.swingx.plaf.basic.core.BasicXListUI$Actions: java.lang.String SELECT_LAST_ROW_CHANGE_LEAD> = "selectLastRowChangeLead";

        <org.jdesktop.swingx.plaf.basic.core.BasicXListUI$Actions: java.lang.String SELECT_LAST_ROW_EXTEND> = "selectLastRowExtendSelection";

        <org.jdesktop.swingx.plaf.basic.core.BasicXListUI$Actions: java.lang.String SELECT_LAST_ROW> = "selectLastRow";

        <org.jdesktop.swingx.plaf.basic.core.BasicXListUI$Actions: java.lang.String SELECT_FIRST_ROW_CHANGE_LEAD> = "selectFirstRowChangeLead";

        <org.jdesktop.swingx.plaf.basic.core.BasicXListUI$Actions: java.lang.String SELECT_FIRST_ROW_EXTEND> = "selectFirstRowExtendSelection";

        <org.jdesktop.swingx.plaf.basic.core.BasicXListUI$Actions: java.lang.String SELECT_FIRST_ROW> = "selectFirstRow";

        <org.jdesktop.swingx.plaf.basic.core.BasicXListUI$Actions: java.lang.String SELECT_NEXT_ROW_CHANGE_LEAD> = "selectNextRowChangeLead";

        <org.jdesktop.swingx.plaf.basic.core.BasicXListUI$Actions: java.lang.String SELECT_NEXT_ROW_EXTEND> = "selectNextRowExtendSelection";

        <org.jdesktop.swingx.plaf.basic.core.BasicXListUI$Actions: java.lang.String SELECT_NEXT_ROW> = "selectNextRow";

        <org.jdesktop.swingx.plaf.basic.core.BasicXListUI$Actions: java.lang.String SELECT_PREVIOUS_ROW_CHANGE_LEAD> = "selectPreviousRowChangeLead";

        <org.jdesktop.swingx.plaf.basic.core.BasicXListUI$Actions: java.lang.String SELECT_PREVIOUS_ROW_EXTEND> = "selectPreviousRowExtendSelection";

        <org.jdesktop.swingx.plaf.basic.core.BasicXListUI$Actions: java.lang.String SELECT_PREVIOUS_ROW> = "selectPreviousRow";

        <org.jdesktop.swingx.plaf.basic.core.BasicXListUI$Actions: java.lang.String SELECT_NEXT_COLUMN_CHANGE_LEAD> = "selectNextColumnChangeLead";

        <org.jdesktop.swingx.plaf.basic.core.BasicXListUI$Actions: java.lang.String SELECT_NEXT_COLUMN_EXTEND> = "selectNextColumnExtendSelection";

        <org.jdesktop.swingx.plaf.basic.core.BasicXListUI$Actions: java.lang.String SELECT_NEXT_COLUMN> = "selectNextColumn";

        <org.jdesktop.swingx.plaf.basic.core.BasicXListUI$Actions: java.lang.String SELECT_PREVIOUS_COLUMN_CHANGE_LEAD> = "selectPreviousColumnChangeLead";

        <org.jdesktop.swingx.plaf.basic.core.BasicXListUI$Actions: java.lang.String SELECT_PREVIOUS_COLUMN_EXTEND> = "selectPreviousColumnExtendSelection";

        <org.jdesktop.swingx.plaf.basic.core.BasicXListUI$Actions: java.lang.String SELECT_PREVIOUS_COLUMN> = "selectPreviousColumn";

        return;
    }
}
