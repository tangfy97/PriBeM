class org.apache.lucene.analysis.synonym.FSTSynonymFilterFactory$1 extends org.apache.lucene.analysis.Analyzer
{
    final org.apache.lucene.analysis.util.TokenizerFactory val$factory;
    final org.apache.lucene.analysis.synonym.FSTSynonymFilterFactory this$0;

    void <init>(org.apache.lucene.analysis.synonym.FSTSynonymFilterFactory, org.apache.lucene.analysis.util.TokenizerFactory)
    {
        org.apache.lucene.analysis.synonym.FSTSynonymFilterFactory r1;
        org.apache.lucene.analysis.util.TokenizerFactory r2;
        org.apache.lucene.analysis.synonym.FSTSynonymFilterFactory$1 r0;

        r0 := @this: org.apache.lucene.analysis.synonym.FSTSynonymFilterFactory$1;

        r1 := @parameter0: org.apache.lucene.analysis.synonym.FSTSynonymFilterFactory;

        r2 := @parameter1: org.apache.lucene.analysis.util.TokenizerFactory;

        r0.<org.apache.lucene.analysis.synonym.FSTSynonymFilterFactory$1: org.apache.lucene.analysis.synonym.FSTSynonymFilterFactory this$0> = r1;

        r0.<org.apache.lucene.analysis.synonym.FSTSynonymFilterFactory$1: org.apache.lucene.analysis.util.TokenizerFactory val$factory> = r2;

        specialinvoke r0.<org.apache.lucene.analysis.Analyzer: void <init>()>();

        return;
    }

    protected org.apache.lucene.analysis.Analyzer$TokenStreamComponents createComponents(java.lang.String, java.io.Reader)
    {
        org.apache.lucene.analysis.util.TokenizerFactory $r1, $r3;
        org.apache.lucene.analysis.core.WhitespaceTokenizer $r12;
        org.apache.lucene.analysis.Tokenizer r4, $r10;
        org.apache.lucene.analysis.TokenStream $r11;
        org.apache.lucene.analysis.synonym.FSTSynonymFilterFactory $r5;
        java.io.Reader r2;
        org.apache.lucene.analysis.core.LowerCaseFilter $r13;
        org.apache.lucene.util.Version $r7, $r8;
        org.apache.lucene.analysis.synonym.FSTSynonymFilterFactory$1 r0;
        org.apache.lucene.analysis.Analyzer$TokenStreamComponents $r14;
        java.lang.String r9;
        boolean $z0;

        r0 := @this: org.apache.lucene.analysis.synonym.FSTSynonymFilterFactory$1;

        r9 := @parameter0: java.lang.String;

        r2 := @parameter1: java.io.Reader;

        $r1 = r0.<org.apache.lucene.analysis.synonym.FSTSynonymFilterFactory$1: org.apache.lucene.analysis.util.TokenizerFactory val$factory>;

        if $r1 != null goto label1;

        $r12 = new org.apache.lucene.analysis.core.WhitespaceTokenizer;

        $r10 = $r12;

        $r8 = <org.apache.lucene.util.Version: org.apache.lucene.util.Version LUCENE_43>;

        specialinvoke $r12.<org.apache.lucene.analysis.core.WhitespaceTokenizer: void <init>(org.apache.lucene.util.Version,java.io.Reader)>($r8, r2);

        goto label2;

     label1:
        $r3 = r0.<org.apache.lucene.analysis.synonym.FSTSynonymFilterFactory$1: org.apache.lucene.analysis.util.TokenizerFactory val$factory>;

        $r10 = virtualinvoke $r3.<org.apache.lucene.analysis.util.TokenizerFactory: org.apache.lucene.analysis.Tokenizer create(java.io.Reader)>(r2);

     label2:
        r4 = $r10;

        $r5 = r0.<org.apache.lucene.analysis.synonym.FSTSynonymFilterFactory$1: org.apache.lucene.analysis.synonym.FSTSynonymFilterFactory this$0>;

        $z0 = staticinvoke <org.apache.lucene.analysis.synonym.FSTSynonymFilterFactory: boolean access$000(org.apache.lucene.analysis.synonym.FSTSynonymFilterFactory)>($r5);

        if $z0 == 0 goto label3;

        $r13 = new org.apache.lucene.analysis.core.LowerCaseFilter;

        $r11 = $r13;

        $r7 = <org.apache.lucene.util.Version: org.apache.lucene.util.Version LUCENE_43>;

        specialinvoke $r13.<org.apache.lucene.analysis.core.LowerCaseFilter: void <init>(org.apache.lucene.util.Version,org.apache.lucene.analysis.TokenStream)>($r7, $r10);

        goto label4;

     label3:
        $r11 = $r10;

     label4:
        $r14 = new org.apache.lucene.analysis.Analyzer$TokenStreamComponents;

        specialinvoke $r14.<org.apache.lucene.analysis.Analyzer$TokenStreamComponents: void <init>(org.apache.lucene.analysis.Tokenizer,org.apache.lucene.analysis.TokenStream)>(r4, $r11);

        return $r14;
    }
}
