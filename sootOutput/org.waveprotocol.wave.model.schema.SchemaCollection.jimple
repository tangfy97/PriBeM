public class org.waveprotocol.wave.model.schema.SchemaCollection extends java.lang.Object implements org.waveprotocol.wave.model.schema.SchemaProvider
{
    private final java.util.List providers;
    static final boolean $assertionsDisabled;

    public static org.waveprotocol.wave.model.schema.SchemaCollection empty()
    {
        java.util.List $r0, $r2;
        org.waveprotocol.wave.model.schema.SchemaCollection $r1;

        $r0 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        $r1 = new org.waveprotocol.wave.model.schema.SchemaCollection;

        $r2 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r0);

        specialinvoke $r1.<org.waveprotocol.wave.model.schema.SchemaCollection: void <init>(java.util.List)>($r2);

        return $r1;
    }

    public void <init>()
    {
        org.waveprotocol.wave.model.schema.SchemaCollection r0;
        java.util.ArrayList $r1;

        r0 := @this: org.waveprotocol.wave.model.schema.SchemaCollection;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        specialinvoke r0.<org.waveprotocol.wave.model.schema.SchemaCollection: void <init>(java.util.List)>($r1);

        return;
    }

    private void <init>(java.util.List)
    {
        java.util.List r1;
        org.waveprotocol.wave.model.schema.SchemaCollection r0;

        r0 := @this: org.waveprotocol.wave.model.schema.SchemaCollection;

        r1 := @parameter0: java.util.List;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.waveprotocol.wave.model.schema.SchemaCollection: java.util.List providers> = r1;

        return;
    }

    public void add(org.waveprotocol.wave.model.schema.SchemaProvider)
    {
        org.waveprotocol.wave.model.schema.SchemaProvider r1;
        java.util.List $r2, $r3;
        org.waveprotocol.wave.model.schema.SchemaCollection r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.schema.SchemaCollection;

        r1 := @parameter0: org.waveprotocol.wave.model.schema.SchemaProvider;

        $r2 = r0.<org.waveprotocol.wave.model.schema.SchemaCollection: java.util.List providers>;

        $z0 = interfaceinvoke $r2.<java.util.List: boolean contains(java.lang.Object)>(r1);

        if $z0 != 0 goto label1;

        $r3 = r0.<org.waveprotocol.wave.model.schema.SchemaCollection: java.util.List providers>;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r1);

     label1:
        return;
    }

    public org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema getSchemaForId(org.waveprotocol.wave.model.id.WaveletId, java.lang.String)
    {
        java.util.Iterator $r2;
        org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema $r7, $r8, r10, $r11;
        org.waveprotocol.wave.model.id.WaveletId r5;
        java.lang.AssertionError $r9;
        java.util.List $r1;
        org.waveprotocol.wave.model.schema.SchemaProvider r4;
        java.lang.Object $r3;
        java.lang.String r6;
        org.waveprotocol.wave.model.schema.SchemaCollection r0;
        boolean $z0, $z1, $z2;

        r0 := @this: org.waveprotocol.wave.model.schema.SchemaCollection;

        r5 := @parameter0: org.waveprotocol.wave.model.id.WaveletId;

        r6 := @parameter1: java.lang.String;

        r10 = null;

        $r1 = r0.<org.waveprotocol.wave.model.schema.SchemaCollection: java.util.List providers>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.waveprotocol.wave.model.schema.SchemaProvider) $r3;

        $r7 = interfaceinvoke r4.<org.waveprotocol.wave.model.schema.SchemaProvider: org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema getSchemaForId(org.waveprotocol.wave.model.id.WaveletId,java.lang.String)>(r5, r6);

        $z1 = <org.waveprotocol.wave.model.schema.SchemaCollection: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        if $r7 != null goto label2;

        $r9 = new java.lang.AssertionError;

        specialinvoke $r9.<java.lang.AssertionError: void <init>()>();

        throw $r9;

     label2:
        $r8 = <org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema: org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema NO_SCHEMA_CONSTRAINTS>;

        if $r7 == $r8 goto label5;

        if r10 != null goto label3;

        $z2 = 1;

        goto label4;

     label3:
        $z2 = 0;

     label4:
        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void checkState(boolean,java.lang.Object)>($z2, "Several different schemas apply to document");

        r10 = $r7;

     label5:
        goto label1;

     label6:
        if r10 != null goto label7;

        $r11 = <org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema: org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema NO_SCHEMA_CONSTRAINTS>;

        goto label8;

     label7:
        $r11 = r10;

     label8:
        return $r11;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/waveprotocol/wave/model/schema/SchemaCollection;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.waveprotocol.wave.model.schema.SchemaCollection: boolean $assertionsDisabled> = $z1;

        return;
    }
}
