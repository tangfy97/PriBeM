class org.apache.cxf.common.logging.Log4jLogger$HandlerWrapper extends org.apache.log4j.AppenderSkeleton
{
    java.util.logging.Handler handler;
    final org.apache.cxf.common.logging.Log4jLogger this$0;

    public void <init>(org.apache.cxf.common.logging.Log4jLogger, java.util.logging.Handler)
    {
        org.apache.cxf.common.logging.Log4jLogger$HandlerWrapper r0;
        org.apache.cxf.common.logging.Log4jLogger r1;
        int $i0;
        java.lang.StringBuilder $r3, $r4, $r5;
        java.lang.String $r6;
        java.util.logging.Handler r2;

        r0 := @this: org.apache.cxf.common.logging.Log4jLogger$HandlerWrapper;

        r1 := @parameter0: org.apache.cxf.common.logging.Log4jLogger;

        r2 := @parameter1: java.util.logging.Handler;

        r0.<org.apache.cxf.common.logging.Log4jLogger$HandlerWrapper: org.apache.cxf.common.logging.Log4jLogger this$0> = r1;

        specialinvoke r0.<org.apache.log4j.AppenderSkeleton: void <init>()>();

        r0.<org.apache.cxf.common.logging.Log4jLogger$HandlerWrapper: java.util.logging.Handler handler> = r2;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("HandlerWrapper-");

        $i0 = virtualinvoke r2.<java.lang.Object: int hashCode()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        r0.<org.apache.cxf.common.logging.Log4jLogger$HandlerWrapper: java.lang.String name> = $r6;

        return;
    }

    public java.util.logging.Handler getHandler()
    {
        org.apache.cxf.common.logging.Log4jLogger$HandlerWrapper r0;
        java.util.logging.Handler $r1;

        r0 := @this: org.apache.cxf.common.logging.Log4jLogger$HandlerWrapper;

        $r1 = r0.<org.apache.cxf.common.logging.Log4jLogger$HandlerWrapper: java.util.logging.Handler handler>;

        return $r1;
    }

    protected void append(org.apache.log4j.spi.LoggingEvent)
    {
        java.lang.Throwable $r17;
        java.util.logging.Level $r5;
        org.apache.cxf.common.logging.Log4jLogger$HandlerWrapper r1;
        java.util.ResourceBundle $r15;
        org.apache.log4j.Level $r4;
        java.lang.String $r7, $r8, $r11, $r12;
        org.apache.log4j.spi.LoggingEvent r2;
        java.util.logging.LogRecord $r0;
        org.apache.log4j.spi.ThrowableInformation $r9, $r16;
        org.apache.cxf.common.logging.Log4jLogger $r3, $r10, $r14;
        java.lang.Object $r6;
        java.util.logging.Handler $r13;

        r1 := @this: org.apache.cxf.common.logging.Log4jLogger$HandlerWrapper;

        r2 := @parameter0: org.apache.log4j.spi.LoggingEvent;

        $r0 = new java.util.logging.LogRecord;

        $r3 = r1.<org.apache.cxf.common.logging.Log4jLogger$HandlerWrapper: org.apache.cxf.common.logging.Log4jLogger this$0>;

        $r4 = virtualinvoke r2.<org.apache.log4j.spi.LoggingEvent: org.apache.log4j.Level getLevel()>();

        $r5 = staticinvoke <org.apache.cxf.common.logging.Log4jLogger: java.util.logging.Level access$000(org.apache.cxf.common.logging.Log4jLogger,org.apache.log4j.Level)>($r3, $r4);

        $r6 = virtualinvoke r2.<org.apache.log4j.spi.LoggingEvent: java.lang.Object getMessage()>();

        $r7 = virtualinvoke $r6.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r0.<java.util.logging.LogRecord: void <init>(java.util.logging.Level,java.lang.String)>($r5, $r7);

        $r8 = virtualinvoke r2.<org.apache.log4j.spi.LoggingEvent: java.lang.String getLoggerName()>();

        virtualinvoke $r0.<java.util.logging.LogRecord: void setLoggerName(java.lang.String)>($r8);

        $r9 = virtualinvoke r2.<org.apache.log4j.spi.LoggingEvent: org.apache.log4j.spi.ThrowableInformation getThrowableInformation()>();

        if $r9 == null goto label1;

        $r16 = virtualinvoke r2.<org.apache.log4j.spi.LoggingEvent: org.apache.log4j.spi.ThrowableInformation getThrowableInformation()>();

        $r17 = virtualinvoke $r16.<org.apache.log4j.spi.ThrowableInformation: java.lang.Throwable getThrowable()>();

        virtualinvoke $r0.<java.util.logging.LogRecord: void setThrown(java.lang.Throwable)>($r17);

     label1:
        $r10 = r1.<org.apache.cxf.common.logging.Log4jLogger$HandlerWrapper: org.apache.cxf.common.logging.Log4jLogger this$0>;

        $r11 = virtualinvoke $r10.<org.apache.cxf.common.logging.Log4jLogger: java.lang.String getResourceBundleName()>();

        if $r11 == null goto label2;

        virtualinvoke $r0.<java.util.logging.LogRecord: void setResourceBundleName(java.lang.String)>($r11);

        $r14 = r1.<org.apache.cxf.common.logging.Log4jLogger$HandlerWrapper: org.apache.cxf.common.logging.Log4jLogger this$0>;

        $r15 = virtualinvoke $r14.<org.apache.cxf.common.logging.Log4jLogger: java.util.ResourceBundle getResourceBundle()>();

        virtualinvoke $r0.<java.util.logging.LogRecord: void setResourceBundle(java.util.ResourceBundle)>($r15);

     label2:
        $r12 = r2.<org.apache.log4j.spi.LoggingEvent: java.lang.String fqnOfCategoryClass>;

        staticinvoke <org.apache.cxf.common.logging.Log4jLogger: void access$100(java.util.logging.LogRecord,java.lang.String)>($r0, $r12);

        $r13 = r1.<org.apache.cxf.common.logging.Log4jLogger$HandlerWrapper: java.util.logging.Handler handler>;

        virtualinvoke $r13.<java.util.logging.Handler: void publish(java.util.logging.LogRecord)>($r0);

        return;
    }

    public void close()
    {
        org.apache.cxf.common.logging.Log4jLogger$HandlerWrapper r0;
        java.util.logging.Handler $r1;

        r0 := @this: org.apache.cxf.common.logging.Log4jLogger$HandlerWrapper;

        $r1 = r0.<org.apache.cxf.common.logging.Log4jLogger$HandlerWrapper: java.util.logging.Handler handler>;

        virtualinvoke $r1.<java.util.logging.Handler: void close()>();

        r0.<org.apache.cxf.common.logging.Log4jLogger$HandlerWrapper: boolean closed> = 1;

        return;
    }

    public boolean requiresLayout()
    {
        org.apache.cxf.common.logging.Log4jLogger$HandlerWrapper r0;

        r0 := @this: org.apache.cxf.common.logging.Log4jLogger$HandlerWrapper;

        return 0;
    }

    public org.apache.log4j.Priority getThreshold()
    {
        org.apache.cxf.common.logging.Log4jLogger$HandlerWrapper r1;
        org.apache.log4j.Priority $r5;
        java.util.Map $r0;
        java.lang.Object $r4;
        java.util.logging.Handler $r2;
        java.util.logging.Level $r3;

        r1 := @this: org.apache.cxf.common.logging.Log4jLogger$HandlerWrapper;

        $r0 = staticinvoke <org.apache.cxf.common.logging.Log4jLogger: java.util.Map access$200()>();

        $r2 = r1.<org.apache.cxf.common.logging.Log4jLogger$HandlerWrapper: java.util.logging.Handler handler>;

        $r3 = virtualinvoke $r2.<java.util.logging.Handler: java.util.logging.Level getLevel()>();

        $r4 = interfaceinvoke $r0.<java.util.Map: java.lang.Object get(java.lang.Object)>($r3);

        $r5 = (org.apache.log4j.Priority) $r4;

        return $r5;
    }

    public boolean isAsSevereAsThreshold(org.apache.log4j.Priority)
    {
        org.apache.cxf.common.logging.Log4jLogger$HandlerWrapper r0;
        org.apache.log4j.Priority $r1, r2;
        boolean $z0, $z1;

        r0 := @this: org.apache.cxf.common.logging.Log4jLogger$HandlerWrapper;

        r2 := @parameter0: org.apache.log4j.Priority;

        $r1 = virtualinvoke r0.<org.apache.cxf.common.logging.Log4jLogger$HandlerWrapper: org.apache.log4j.Priority getThreshold()>();

        if $r1 == null goto label1;

        $z0 = virtualinvoke r2.<org.apache.log4j.Priority: boolean isGreaterOrEqual(org.apache.log4j.Priority)>($r1);

        if $z0 == 0 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }
}
