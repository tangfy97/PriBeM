public class org.springframework.web.context.request.ServletRequestAttributes extends org.springframework.web.context.request.AbstractRequestAttributes
{
    public static final java.lang.String DESTRUCTION_CALLBACK_NAME_PREFIX;
    private final javax.servlet.http.HttpServletRequest request;
    private volatile javax.servlet.http.HttpSession session;
    private final java.util.Map sessionAttributesToUpdate;

    static void <clinit>()
    {
        java.lang.StringBuilder $r0, $r4;
        java.lang.Class $r1;
        java.lang.String $r2, $r3, $r5;

        $r0 = new java.lang.StringBuilder;

        $r1 = class "Lorg/springframework/web/context/request/ServletRequestAttributes;";

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r2);

        specialinvoke $r0.<java.lang.StringBuilder: void <init>(java.lang.String)>($r3);

        $r4 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".DESTRUCTION_CALLBACK.");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        <org.springframework.web.context.request.ServletRequestAttributes: java.lang.String DESTRUCTION_CALLBACK_NAME_PREFIX> = $r5;

        return;
    }

    public void <init>(javax.servlet.http.HttpServletRequest)
    {
        java.util.HashMap $r1;
        javax.servlet.http.HttpServletRequest r2;
        org.springframework.web.context.request.ServletRequestAttributes r0;

        r0 := @this: org.springframework.web.context.request.ServletRequestAttributes;

        r2 := @parameter0: javax.servlet.http.HttpServletRequest;

        specialinvoke r0.<org.springframework.web.context.request.AbstractRequestAttributes: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<org.springframework.web.context.request.ServletRequestAttributes: java.util.Map sessionAttributesToUpdate> = $r1;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r2, "Request must not be null");

        r0.<org.springframework.web.context.request.ServletRequestAttributes: javax.servlet.http.HttpServletRequest request> = r2;

        return;
    }

    public final javax.servlet.http.HttpServletRequest getRequest()
    {
        javax.servlet.http.HttpServletRequest $r1;
        org.springframework.web.context.request.ServletRequestAttributes r0;

        r0 := @this: org.springframework.web.context.request.ServletRequestAttributes;

        $r1 = r0.<org.springframework.web.context.request.ServletRequestAttributes: javax.servlet.http.HttpServletRequest request>;

        return $r1;
    }

    protected final javax.servlet.http.HttpSession getSession(boolean)
    {
        javax.servlet.http.HttpSession $r1, $r2, $r5;
        java.lang.IllegalStateException $r3;
        org.springframework.web.context.request.ServletRequestAttributes r0;
        javax.servlet.http.HttpServletRequest $r4;
        boolean $z0, z1;

        r0 := @this: org.springframework.web.context.request.ServletRequestAttributes;

        z1 := @parameter0: boolean;

        $z0 = virtualinvoke r0.<org.springframework.web.context.request.ServletRequestAttributes: boolean isRequestActive()>();

        if $z0 == 0 goto label1;

        $r4 = r0.<org.springframework.web.context.request.ServletRequestAttributes: javax.servlet.http.HttpServletRequest request>;

        $r5 = interfaceinvoke $r4.<javax.servlet.http.HttpServletRequest: javax.servlet.http.HttpSession getSession(boolean)>(z1);

        return $r5;

     label1:
        $r1 = r0.<org.springframework.web.context.request.ServletRequestAttributes: javax.servlet.http.HttpSession session>;

        if $r1 != null goto label2;

        if z1 == 0 goto label2;

        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("No session found and request already completed - cannot create new session!");

        throw $r3;

     label2:
        $r2 = r0.<org.springframework.web.context.request.ServletRequestAttributes: javax.servlet.http.HttpSession session>;

        return $r2;
    }

    public java.lang.Object getAttribute(java.lang.String, int)
    {
        javax.servlet.http.HttpSession $r1;
        java.lang.Throwable $r10;
        java.lang.IllegalStateException $r8, $r9;
        org.springframework.web.context.request.ServletRequestAttributes r0;
        javax.servlet.http.HttpServletRequest $r6;
        java.util.Map $r4, $r5;
        int i0;
        java.lang.Object $r3, $r7;
        java.lang.String r2;
        boolean $z0;

        r0 := @this: org.springframework.web.context.request.ServletRequestAttributes;

        r2 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        if i0 != 0 goto label02;

        $z0 = virtualinvoke r0.<org.springframework.web.context.request.ServletRequestAttributes: boolean isRequestActive()>();

        if $z0 != 0 goto label01;

        $r8 = new java.lang.IllegalStateException;

        specialinvoke $r8.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cannot ask for request attribute - request is not active anymore!");

        throw $r8;

     label01:
        $r6 = r0.<org.springframework.web.context.request.ServletRequestAttributes: javax.servlet.http.HttpServletRequest request>;

        $r7 = interfaceinvoke $r6.<javax.servlet.http.HttpServletRequest: java.lang.Object getAttribute(java.lang.String)>(r2);

        return $r7;

     label02:
        $r1 = virtualinvoke r0.<org.springframework.web.context.request.ServletRequestAttributes: javax.servlet.http.HttpSession getSession(boolean)>(0);

        if $r1 == null goto label10;

     label03:
        $r3 = interfaceinvoke $r1.<javax.servlet.http.HttpSession: java.lang.Object getAttribute(java.lang.String)>(r2);

        if $r3 == null goto label08;

        $r4 = r0.<org.springframework.web.context.request.ServletRequestAttributes: java.util.Map sessionAttributesToUpdate>;

        entermonitor $r4;

     label04:
        $r5 = r0.<org.springframework.web.context.request.ServletRequestAttributes: java.util.Map sessionAttributesToUpdate>;

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, $r3);

        exitmonitor $r4;

     label05:
        goto label08;

     label06:
        $r10 := @caughtexception;

        exitmonitor $r4;

     label07:
        throw $r10;

     label08:
        return $r3;

     label09:
        $r9 := @caughtexception;

     label10:
        return null;

        catch java.lang.Throwable from label04 to label05 with label06;
        catch java.lang.Throwable from label06 to label07 with label06;
        catch java.lang.IllegalStateException from label03 to label08 with label09;
    }

    public void setAttribute(java.lang.String, java.lang.Object, int)
    {
        javax.servlet.http.HttpSession $r1;
        java.lang.Throwable $r8;
        java.lang.IllegalStateException $r7;
        org.springframework.web.context.request.ServletRequestAttributes r0;
        javax.servlet.http.HttpServletRequest $r6;
        java.util.Map $r2, $r4;
        int i0;
        java.lang.Object r5;
        java.lang.String r3;
        boolean $z0;

        r0 := @this: org.springframework.web.context.request.ServletRequestAttributes;

        r3 := @parameter0: java.lang.String;

        r5 := @parameter1: java.lang.Object;

        i0 := @parameter2: int;

        if i0 != 0 goto label2;

        $z0 = virtualinvoke r0.<org.springframework.web.context.request.ServletRequestAttributes: boolean isRequestActive()>();

        if $z0 != 0 goto label1;

        $r7 = new java.lang.IllegalStateException;

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cannot set request attribute - request is not active anymore!");

        throw $r7;

     label1:
        $r6 = r0.<org.springframework.web.context.request.ServletRequestAttributes: javax.servlet.http.HttpServletRequest request>;

        interfaceinvoke $r6.<javax.servlet.http.HttpServletRequest: void setAttribute(java.lang.String,java.lang.Object)>(r3, r5);

        goto label8;

     label2:
        $r1 = virtualinvoke r0.<org.springframework.web.context.request.ServletRequestAttributes: javax.servlet.http.HttpSession getSession(boolean)>(1);

        $r2 = r0.<org.springframework.web.context.request.ServletRequestAttributes: java.util.Map sessionAttributesToUpdate>;

        entermonitor $r2;

     label3:
        $r4 = r0.<org.springframework.web.context.request.ServletRequestAttributes: java.util.Map sessionAttributesToUpdate>;

        interfaceinvoke $r4.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r3);

        exitmonitor $r2;

     label4:
        goto label7;

     label5:
        $r8 := @caughtexception;

        exitmonitor $r2;

     label6:
        throw $r8;

     label7:
        interfaceinvoke $r1.<javax.servlet.http.HttpSession: void setAttribute(java.lang.String,java.lang.Object)>(r3, r5);

     label8:
        return;

        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public void removeAttribute(java.lang.String, int)
    {
        javax.servlet.http.HttpSession $r1;
        java.lang.Throwable $r12;
        java.lang.IllegalStateException $r11;
        org.springframework.web.context.request.ServletRequestAttributes r0;
        javax.servlet.http.HttpServletRequest $r10;
        java.util.Map $r2, $r4;
        int i0;
        java.lang.StringBuilder $r5, $r8;
        java.lang.String r3, $r6, $r7, $r9;
        boolean $z0;

        r0 := @this: org.springframework.web.context.request.ServletRequestAttributes;

        r3 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        if i0 != 0 goto label1;

        $z0 = virtualinvoke r0.<org.springframework.web.context.request.ServletRequestAttributes: boolean isRequestActive()>();

        if $z0 == 0 goto label9;

        $r10 = r0.<org.springframework.web.context.request.ServletRequestAttributes: javax.servlet.http.HttpServletRequest request>;

        interfaceinvoke $r10.<javax.servlet.http.HttpServletRequest: void removeAttribute(java.lang.String)>(r3);

        virtualinvoke r0.<org.springframework.web.context.request.ServletRequestAttributes: void removeRequestDestructionCallback(java.lang.String)>(r3);

        goto label9;

     label1:
        $r1 = virtualinvoke r0.<org.springframework.web.context.request.ServletRequestAttributes: javax.servlet.http.HttpSession getSession(boolean)>(0);

        if $r1 == null goto label9;

        $r2 = r0.<org.springframework.web.context.request.ServletRequestAttributes: java.util.Map sessionAttributesToUpdate>;

        entermonitor $r2;

     label2:
        $r4 = r0.<org.springframework.web.context.request.ServletRequestAttributes: java.util.Map sessionAttributesToUpdate>;

        interfaceinvoke $r4.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r3);

        exitmonitor $r2;

     label3:
        goto label6;

     label4:
        $r12 := @caughtexception;

        exitmonitor $r2;

     label5:
        throw $r12;

     label6:
        interfaceinvoke $r1.<javax.servlet.http.HttpSession: void removeAttribute(java.lang.String)>(r3);

        $r5 = new java.lang.StringBuilder;

        $r6 = <org.springframework.web.context.request.ServletRequestAttributes: java.lang.String DESTRUCTION_CALLBACK_NAME_PREFIX>;

        $r7 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r6);

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>($r7);

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r1.<javax.servlet.http.HttpSession: void removeAttribute(java.lang.String)>($r9);

     label7:
        goto label9;

     label8:
        $r11 := @caughtexception;

     label9:
        return;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
        catch java.lang.IllegalStateException from label6 to label7 with label8;
    }

    public java.lang.String[] getAttributeNames(int)
    {
        javax.servlet.http.HttpSession $r1;
        java.lang.IllegalStateException $r8, $r9;
        java.util.Enumeration $r3, $r6;
        java.lang.String[] $r2, $r4, $r7;
        org.springframework.web.context.request.ServletRequestAttributes r0;
        javax.servlet.http.HttpServletRequest $r5;
        int i0;
        boolean $z0;

        r0 := @this: org.springframework.web.context.request.ServletRequestAttributes;

        i0 := @parameter0: int;

        if i0 != 0 goto label2;

        $z0 = virtualinvoke r0.<org.springframework.web.context.request.ServletRequestAttributes: boolean isRequestActive()>();

        if $z0 != 0 goto label1;

        $r8 = new java.lang.IllegalStateException;

        specialinvoke $r8.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cannot ask for request attributes - request is not active anymore!");

        throw $r8;

     label1:
        $r5 = r0.<org.springframework.web.context.request.ServletRequestAttributes: javax.servlet.http.HttpServletRequest request>;

        $r6 = interfaceinvoke $r5.<javax.servlet.http.HttpServletRequest: java.util.Enumeration getAttributeNames()>();

        $r7 = staticinvoke <org.springframework.util.StringUtils: java.lang.String[] toStringArray(java.util.Enumeration)>($r6);

        return $r7;

     label2:
        $r1 = virtualinvoke r0.<org.springframework.web.context.request.ServletRequestAttributes: javax.servlet.http.HttpSession getSession(boolean)>(0);

        if $r1 == null goto label6;

     label3:
        $r3 = interfaceinvoke $r1.<javax.servlet.http.HttpSession: java.util.Enumeration getAttributeNames()>();

        $r4 = staticinvoke <org.springframework.util.StringUtils: java.lang.String[] toStringArray(java.util.Enumeration)>($r3);

     label4:
        return $r4;

     label5:
        $r9 := @caughtexception;

     label6:
        $r2 = newarray (java.lang.String)[0];

        return $r2;

        catch java.lang.IllegalStateException from label3 to label4 with label5;
    }

    public void registerDestructionCallback(java.lang.String, java.lang.Runnable, int)
    {
        int i0;
        org.springframework.web.context.request.ServletRequestAttributes r0;
        java.lang.String r1;
        java.lang.Runnable r2;

        r0 := @this: org.springframework.web.context.request.ServletRequestAttributes;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Runnable;

        i0 := @parameter2: int;

        if i0 != 0 goto label1;

        virtualinvoke r0.<org.springframework.web.context.request.ServletRequestAttributes: void registerRequestDestructionCallback(java.lang.String,java.lang.Runnable)>(r1, r2);

        goto label2;

     label1:
        virtualinvoke r0.<org.springframework.web.context.request.ServletRequestAttributes: void registerSessionDestructionCallback(java.lang.String,java.lang.Runnable)>(r1, r2);

     label2:
        return;
    }

    public java.lang.Object resolveReference(java.lang.String)
    {
        javax.servlet.http.HttpSession $r4;
        org.springframework.web.context.request.ServletRequestAttributes r3;
        javax.servlet.http.HttpServletRequest $r5;
        java.lang.String r0, $r1, $r2;
        boolean $z0, $z1;

        r3 := @this: org.springframework.web.context.request.ServletRequestAttributes;

        r0 := @parameter0: java.lang.String;

        $r1 = "request";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z0 == 0 goto label1;

        $r5 = r3.<org.springframework.web.context.request.ServletRequestAttributes: javax.servlet.http.HttpServletRequest request>;

        return $r5;

     label1:
        $r2 = "session";

        $z1 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z1 == 0 goto label2;

        $r4 = virtualinvoke r3.<org.springframework.web.context.request.ServletRequestAttributes: javax.servlet.http.HttpSession getSession(boolean)>(1);

        return $r4;

     label2:
        return null;
    }

    public java.lang.String getSessionId()
    {
        javax.servlet.http.HttpSession $r1;
        org.springframework.web.context.request.ServletRequestAttributes r0;
        java.lang.String $r2;

        r0 := @this: org.springframework.web.context.request.ServletRequestAttributes;

        $r1 = virtualinvoke r0.<org.springframework.web.context.request.ServletRequestAttributes: javax.servlet.http.HttpSession getSession(boolean)>(1);

        $r2 = interfaceinvoke $r1.<javax.servlet.http.HttpSession: java.lang.String getId()>();

        return $r2;
    }

    public java.lang.Object getSessionMutex()
    {
        javax.servlet.http.HttpSession $r1;
        java.lang.Object $r2;
        org.springframework.web.context.request.ServletRequestAttributes r0;

        r0 := @this: org.springframework.web.context.request.ServletRequestAttributes;

        $r1 = virtualinvoke r0.<org.springframework.web.context.request.ServletRequestAttributes: javax.servlet.http.HttpSession getSession(boolean)>(1);

        $r2 = staticinvoke <org.springframework.web.util.WebUtils: java.lang.Object getSessionMutex(javax.servlet.http.HttpSession)>($r1);

        return $r2;
    }

    protected void updateAccessedSessionAttributes()
    {
        java.lang.Throwable $r16;
        java.lang.IllegalStateException $r17;
        javax.servlet.http.HttpServletRequest $r1;
        java.util.Map $r3, $r5, $r18;
        java.lang.String r11;
        boolean $z0;
        javax.servlet.http.HttpSession $r2, $r4, $r13, $r15;
        java.util.Map$Entry r9;
        java.util.Iterator $r7;
        java.util.Set $r6;
        org.springframework.web.context.request.ServletRequestAttributes r0;
        java.lang.Object $r8, $r10, $r12, $r14;

        r0 := @this: org.springframework.web.context.request.ServletRequestAttributes;

        $r1 = r0.<org.springframework.web.context.request.ServletRequestAttributes: javax.servlet.http.HttpServletRequest request>;

        $r2 = interfaceinvoke $r1.<javax.servlet.http.HttpServletRequest: javax.servlet.http.HttpSession getSession(boolean)>(0);

        r0.<org.springframework.web.context.request.ServletRequestAttributes: javax.servlet.http.HttpSession session> = $r2;

        $r3 = r0.<org.springframework.web.context.request.ServletRequestAttributes: java.util.Map sessionAttributesToUpdate>;

        entermonitor $r3;

     label01:
        $r4 = r0.<org.springframework.web.context.request.ServletRequestAttributes: javax.servlet.http.HttpSession session>;

        if $r4 == null goto label07;

     label02:
        $r5 = r0.<org.springframework.web.context.request.ServletRequestAttributes: java.util.Map sessionAttributesToUpdate>;

        $r6 = interfaceinvoke $r5.<java.util.Map: java.util.Set entrySet()>();

        $r7 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();

        goto label04;

     label03:
        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r9 = (java.util.Map$Entry) $r8;

        $r10 = interfaceinvoke r9.<java.util.Map$Entry: java.lang.Object getKey()>();

        r11 = (java.lang.String) $r10;

        $r12 = interfaceinvoke r9.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r13 = r0.<org.springframework.web.context.request.ServletRequestAttributes: javax.servlet.http.HttpSession session>;

        $r14 = interfaceinvoke $r13.<javax.servlet.http.HttpSession: java.lang.Object getAttribute(java.lang.String)>(r11);

        if $r14 != $r12 goto label04;

        $r15 = r0.<org.springframework.web.context.request.ServletRequestAttributes: javax.servlet.http.HttpSession session>;

        interfaceinvoke $r15.<javax.servlet.http.HttpSession: void setAttribute(java.lang.String,java.lang.Object)>(r11, $r12);

     label04:
        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label03;

     label05:
        goto label07;

     label06:
        $r17 := @caughtexception;

     label07:
        $r18 = r0.<org.springframework.web.context.request.ServletRequestAttributes: java.util.Map sessionAttributesToUpdate>;

        interfaceinvoke $r18.<java.util.Map: void clear()>();

        exitmonitor $r3;

     label08:
        goto label11;

     label09:
        $r16 := @caughtexception;

        exitmonitor $r3;

     label10:
        throw $r16;

     label11:
        return;

        catch java.lang.IllegalStateException from label02 to label05 with label06;
        catch java.lang.Throwable from label01 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    protected void registerSessionDestructionCallback(java.lang.String, java.lang.Runnable)
    {
        javax.servlet.http.HttpSession $r1;
        org.springframework.web.context.request.ServletRequestAttributes r0;
        java.lang.Runnable r9;
        org.springframework.web.context.request.DestructionCallbackBindingListener $r8;
        java.lang.StringBuilder $r2, $r6;
        java.lang.String $r3, $r4, r5, $r7;

        r0 := @this: org.springframework.web.context.request.ServletRequestAttributes;

        r5 := @parameter0: java.lang.String;

        r9 := @parameter1: java.lang.Runnable;

        $r1 = virtualinvoke r0.<org.springframework.web.context.request.ServletRequestAttributes: javax.servlet.http.HttpSession getSession(boolean)>(1);

        $r2 = new java.lang.StringBuilder;

        $r3 = <org.springframework.web.context.request.ServletRequestAttributes: java.lang.String DESTRUCTION_CALLBACK_NAME_PREFIX>;

        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r3);

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>($r4);

        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $r8 = new org.springframework.web.context.request.DestructionCallbackBindingListener;

        specialinvoke $r8.<org.springframework.web.context.request.DestructionCallbackBindingListener: void <init>(java.lang.Runnable)>(r9);

        interfaceinvoke $r1.<javax.servlet.http.HttpSession: void setAttribute(java.lang.String,java.lang.Object)>($r7, $r8);

        return;
    }

    public java.lang.String toString()
    {
        javax.servlet.http.HttpServletRequest $r1;
        org.springframework.web.context.request.ServletRequestAttributes r0;
        java.lang.String $r2;

        r0 := @this: org.springframework.web.context.request.ServletRequestAttributes;

        $r1 = r0.<org.springframework.web.context.request.ServletRequestAttributes: javax.servlet.http.HttpServletRequest request>;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        return $r2;
    }
}
