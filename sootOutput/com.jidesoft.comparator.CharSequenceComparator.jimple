public class com.jidesoft.comparator.CharSequenceComparator extends java.lang.Object implements java.util.Comparator, java.io.Serializable
{
    private static final long serialVersionUID;
    private boolean _caseSensitive;
    public static final com.jidesoft.comparator.ComparatorContext CONTEXT;
    public static final com.jidesoft.comparator.ComparatorContext CONTEXT_IGNORE_CASE;

    public void <init>()
    {
        com.jidesoft.comparator.CharSequenceComparator r0;

        r0 := @this: com.jidesoft.comparator.CharSequenceComparator;

        specialinvoke r0.<com.jidesoft.comparator.CharSequenceComparator: void <init>(boolean)>(1);

        return;
    }

    public void <init>(boolean)
    {
        com.jidesoft.comparator.CharSequenceComparator r0;
        boolean z0;

        r0 := @this: com.jidesoft.comparator.CharSequenceComparator;

        z0 := @parameter0: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.jidesoft.comparator.CharSequenceComparator: boolean _caseSensitive> = z0;

        return;
    }

    public boolean isCaseSensitive()
    {
        com.jidesoft.comparator.CharSequenceComparator r0;
        boolean $z0;

        r0 := @this: com.jidesoft.comparator.CharSequenceComparator;

        $z0 = r0.<com.jidesoft.comparator.CharSequenceComparator: boolean _caseSensitive>;

        return $z0;
    }

    public void setCaseSensitive(boolean)
    {
        com.jidesoft.comparator.CharSequenceComparator r0;
        boolean z0;

        r0 := @this: com.jidesoft.comparator.CharSequenceComparator;

        z0 := @parameter0: boolean;

        r0.<com.jidesoft.comparator.CharSequenceComparator: boolean _caseSensitive> = z0;

        return;
    }

    public int compare(java.lang.Object, java.lang.Object)
    {
        boolean $z0, $z1, $z2, $z3;
        java.lang.CharSequence r27, r28;
        java.lang.StringBuilder $r4, $r7, $r8, $r11, $r15, $r18, $r22, $r25, $r30, $r32, $r34;
        com.jidesoft.comparator.CharSequenceComparator r29;
        java.lang.ClassCastException $r31, $r33, $r35;
        int $i0, $i2;
        java.lang.String $r6, $r10, $r12, $r17, $r19, $r24, $r26;
        java.lang.Object r0, r1;
        java.lang.Class $r5, $r9, $r16, $r23;

        r29 := @this: com.jidesoft.comparator.CharSequenceComparator;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        if r0 != null goto label1;

        if r1 != null goto label1;

        return 0;

     label1:
        if r0 != null goto label2;

        $i2 = (int) -1;

        return $i2;

     label2:
        if r1 != null goto label3;

        return 1;

     label3:
        $z0 = r0 instanceof java.lang.CharSequence;

        if $z0 == 0 goto label7;

        $z2 = r1 instanceof java.lang.CharSequence;

        if $z2 == 0 goto label6;

        r27 = (java.lang.CharSequence) r0;

        r28 = (java.lang.CharSequence) r1;

        $z3 = virtualinvoke r29.<com.jidesoft.comparator.CharSequenceComparator: boolean isCaseSensitive()>();

        if $z3 == 0 goto label4;

        $i0 = specialinvoke r29.<com.jidesoft.comparator.CharSequenceComparator: int compareCase(java.lang.CharSequence,java.lang.CharSequence)>(r27, r28);

        goto label5;

     label4:
        $i0 = specialinvoke r29.<com.jidesoft.comparator.CharSequenceComparator: int compareIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)>(r27, r28);

     label5:
        return $i0;

     label6:
        $r31 = new java.lang.ClassCastException;

        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The second argument of this method was not a CharSequence: ");

        $r23 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r24 = virtualinvoke $r23.<java.lang.Class: java.lang.String getName()>();

        $r25 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r31.<java.lang.ClassCastException: void <init>(java.lang.String)>($r26);

        throw $r31;

     label7:
        $z1 = r1 instanceof java.lang.Comparable;

        if $z1 == 0 goto label8;

        $r33 = new java.lang.ClassCastException;

        $r32 = new java.lang.StringBuilder;

        specialinvoke $r32.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The first argument of this method was not a CharSequence: ");

        $r16 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r17 = virtualinvoke $r16.<java.lang.Class: java.lang.String getName()>();

        $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r33.<java.lang.ClassCastException: void <init>(java.lang.String)>($r19);

        throw $r33;

     label8:
        $r35 = new java.lang.ClassCastException;

        $r34 = new java.lang.StringBuilder;

        specialinvoke $r34.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Both arguments of this method were not CharSequences: ");

        $r5 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" and ");

        $r9 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r10 = virtualinvoke $r9.<java.lang.Class: java.lang.String getName()>();

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r35.<java.lang.ClassCastException: void <init>(java.lang.String)>($r12);

        throw $r35;
    }

    private int compareCase(java.lang.CharSequence, java.lang.CharSequence)
    {
        java.lang.CharSequence r0, r1;
        char $c4, $c5;
        com.jidesoft.comparator.CharSequenceComparator r2;
        int $i0, $i1, $i2, $i3, $i6, i7, $i8, $i9, $i10, $i11;

        r2 := @this: com.jidesoft.comparator.CharSequenceComparator;

        r0 := @parameter0: java.lang.CharSequence;

        r1 := @parameter1: java.lang.CharSequence;

        $i0 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        $i1 = interfaceinvoke r1.<java.lang.CharSequence: int length()>();

        $i2 = staticinvoke <java.lang.Math: int min(int,int)>($i0, $i1);

        i7 = 0;

     label1:
        if i7 >= $i2 goto label3;

        $c4 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>(i7);

        $c5 = interfaceinvoke r1.<java.lang.CharSequence: char charAt(int)>(i7);

        $i8 = (int) $c4;

        $i9 = (int) $c5;

        if $i8 == $i9 goto label2;

        $i10 = (int) $c4;

        $i11 = (int) $c5;

        $i6 = $i10 - $i11;

        return $i6;

     label2:
        i7 = i7 + 1;

        goto label1;

     label3:
        $i3 = $i0 - $i1;

        return $i3;
    }

    private int compareIgnoreCase(java.lang.CharSequence, java.lang.CharSequence)
    {
        com.jidesoft.comparator.CharSequenceComparator r2;
        int $i0, $i1, $i2, $i9, i10, i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19;
        java.lang.CharSequence r0, r1;
        char $c3, $c4, $c5, $c6, $c7, $c8;

        r2 := @this: com.jidesoft.comparator.CharSequenceComparator;

        r0 := @parameter0: java.lang.CharSequence;

        r1 := @parameter1: java.lang.CharSequence;

        $i0 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        $i1 = interfaceinvoke r1.<java.lang.CharSequence: int length()>();

        i10 = 0;

        i11 = 0;

     label1:
        if i10 >= $i0 goto label3;

        if i11 >= $i1 goto label3;

        $c3 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>(i10);

        $c4 = interfaceinvoke r1.<java.lang.CharSequence: char charAt(int)>(i11);

        $i12 = (int) $c3;

        $i13 = (int) $c4;

        if $i12 == $i13 goto label2;

        $c5 = staticinvoke <java.lang.Character: char toUpperCase(char)>($c3);

        $c6 = staticinvoke <java.lang.Character: char toUpperCase(char)>($c4);

        $i14 = (int) $c5;

        $i15 = (int) $c6;

        if $i14 == $i15 goto label2;

        $c7 = staticinvoke <java.lang.Character: char toLowerCase(char)>($c5);

        $c8 = staticinvoke <java.lang.Character: char toLowerCase(char)>($c6);

        $i16 = (int) $c7;

        $i17 = (int) $c8;

        if $i16 == $i17 goto label2;

        $i18 = (int) $c7;

        $i19 = (int) $c8;

        $i9 = $i18 - $i19;

        return $i9;

     label2:
        i10 = i10 + 1;

        i11 = i11 + 1;

        goto label1;

     label3:
        $i2 = $i0 - $i1;

        return $i2;
    }

    static void <clinit>()
    {
        com.jidesoft.comparator.ComparatorContext $r0, $r1;

        <com.jidesoft.comparator.CharSequenceComparator: long serialVersionUID> = -4749963150099170895L;

        $r0 = new com.jidesoft.comparator.ComparatorContext;

        specialinvoke $r0.<com.jidesoft.comparator.ComparatorContext: void <init>(java.lang.String)>("IgnoreLocale");

        <com.jidesoft.comparator.CharSequenceComparator: com.jidesoft.comparator.ComparatorContext CONTEXT> = $r0;

        $r1 = new com.jidesoft.comparator.ComparatorContext;

        specialinvoke $r1.<com.jidesoft.comparator.ComparatorContext: void <init>(java.lang.String)>("IgnoreLocale_Ignorecase");

        <com.jidesoft.comparator.CharSequenceComparator: com.jidesoft.comparator.ComparatorContext CONTEXT_IGNORE_CASE> = $r1;

        return;
    }
}
