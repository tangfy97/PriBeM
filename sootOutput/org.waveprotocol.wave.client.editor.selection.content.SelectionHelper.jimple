public interface  org.waveprotocol.wave.client.editor.selection.content.SelectionHelper extends java.lang.Object
{
    public static final org.waveprotocol.wave.client.editor.selection.content.SelectionHelper NOP_IMPL;

    public abstract org.waveprotocol.wave.client.editor.content.FocusedContentRange getSelectionPoints();

    public abstract org.waveprotocol.wave.client.editor.content.ContentRange getOrderedSelectionPoints();

    public abstract org.waveprotocol.wave.model.document.util.FocusedRange getSelectionRange();

    public abstract org.waveprotocol.wave.model.document.util.Range getOrderedSelectionRange();

    public abstract void setSelectionPoints(org.waveprotocol.wave.model.document.util.Point, org.waveprotocol.wave.model.document.util.Point);

    public abstract void setSelectionRange(org.waveprotocol.wave.model.document.util.FocusedRange);

    public abstract void setCaret(int);

    public abstract void setCaret(org.waveprotocol.wave.model.document.util.Point);

    public abstract void clearSelection();

    public abstract org.waveprotocol.wave.model.document.util.Point getFirstValidSelectionPoint();

    public abstract org.waveprotocol.wave.model.document.util.Point getLastValidSelectionPoint();

    public abstract boolean isValidSelectionPoint(org.waveprotocol.wave.model.document.util.Point);

    static void <clinit>()
    {
        org.waveprotocol.wave.client.editor.selection.content.SelectionHelper$1 $r0;

        $r0 = new org.waveprotocol.wave.client.editor.selection.content.SelectionHelper$1;

        specialinvoke $r0.<org.waveprotocol.wave.client.editor.selection.content.SelectionHelper$1: void <init>()>();

        <org.waveprotocol.wave.client.editor.selection.content.SelectionHelper: org.waveprotocol.wave.client.editor.selection.content.SelectionHelper NOP_IMPL> = $r0;

        return;
    }
}
