abstract class org.apache.jena.riot.process.inf.InferenceProcessorRDFS extends java.lang.Object
{
    static final com.hp.hpl.jena.graph.Node rdfType;
    private final org.apache.jena.riot.process.inf.InferenceSetupRDFS state;

    public void <init>(org.apache.jena.riot.process.inf.InferenceSetupRDFS)
    {
        org.apache.jena.riot.process.inf.InferenceSetupRDFS r1;
        org.apache.jena.riot.process.inf.InferenceProcessorRDFS r0;

        r0 := @this: org.apache.jena.riot.process.inf.InferenceProcessorRDFS;

        r1 := @parameter0: org.apache.jena.riot.process.inf.InferenceSetupRDFS;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.jena.riot.process.inf.InferenceProcessorRDFS: org.apache.jena.riot.process.inf.InferenceSetupRDFS state> = r1;

        return;
    }

    public void process(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node)
    {
        org.apache.jena.riot.process.inf.InferenceProcessorRDFS r0;
        com.hp.hpl.jena.graph.Node r1, r2, r3;

        r0 := @this: org.apache.jena.riot.process.inf.InferenceProcessorRDFS;

        r1 := @parameter0: com.hp.hpl.jena.graph.Node;

        r2 := @parameter1: com.hp.hpl.jena.graph.Node;

        r3 := @parameter2: com.hp.hpl.jena.graph.Node;

        specialinvoke r0.<org.apache.jena.riot.process.inf.InferenceProcessorRDFS: void subClass(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r1, r2, r3);

        specialinvoke r0.<org.apache.jena.riot.process.inf.InferenceProcessorRDFS: void subProperty(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r1, r2, r3);

        specialinvoke r0.<org.apache.jena.riot.process.inf.InferenceProcessorRDFS: void domain(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r1, r2, r3);

        specialinvoke r0.<org.apache.jena.riot.process.inf.InferenceProcessorRDFS: void range(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r1, r2, r3);

        return;
    }

    public abstract void derive(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node);

    private final void subClass(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node)
    {
        org.apache.jena.riot.process.inf.InferenceProcessorRDFS r2;
        java.util.Iterator $r8;
        org.apache.jena.riot.process.inf.InferenceSetupRDFS $r3;
        com.hp.hpl.jena.graph.Node r0, $r1, r4, r10, r11;
        java.util.List r7;
        java.util.Map $r5;
        java.lang.Object $r6, $r9;
        boolean $z0, $z1;

        r2 := @this: org.apache.jena.riot.process.inf.InferenceProcessorRDFS;

        r11 := @parameter0: com.hp.hpl.jena.graph.Node;

        r0 := @parameter1: com.hp.hpl.jena.graph.Node;

        r4 := @parameter2: com.hp.hpl.jena.graph.Node;

        $r1 = <org.apache.jena.riot.process.inf.InferenceProcessorRDFS: com.hp.hpl.jena.graph.Node rdfType>;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label2;

        $r3 = r2.<org.apache.jena.riot.process.inf.InferenceProcessorRDFS: org.apache.jena.riot.process.inf.InferenceSetupRDFS state>;

        $r5 = $r3.<org.apache.jena.riot.process.inf.InferenceSetupRDFS: java.util.Map transClasses>;

        $r6 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(r4);

        r7 = (java.util.List) $r6;

        if r7 == null goto label2;

        $r8 = interfaceinvoke r7.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        $r9 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        r10 = (com.hp.hpl.jena.graph.Node) $r9;

        virtualinvoke r2.<org.apache.jena.riot.process.inf.InferenceProcessorRDFS: void derive(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r11, r0, r10);

        goto label1;

     label2:
        return;
    }

    private void subProperty(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node)
    {
        org.apache.jena.riot.process.inf.InferenceProcessorRDFS r0;
        java.util.Iterator $r6;
        org.apache.jena.riot.process.inf.InferenceSetupRDFS $r1;
        com.hp.hpl.jena.graph.Node r2, r8, r9, r10;
        java.util.List r5;
        java.util.Map $r3;
        java.lang.Object $r4, $r7;
        boolean $z0;

        r0 := @this: org.apache.jena.riot.process.inf.InferenceProcessorRDFS;

        r9 := @parameter0: com.hp.hpl.jena.graph.Node;

        r2 := @parameter1: com.hp.hpl.jena.graph.Node;

        r10 := @parameter2: com.hp.hpl.jena.graph.Node;

        $r1 = r0.<org.apache.jena.riot.process.inf.InferenceProcessorRDFS: org.apache.jena.riot.process.inf.InferenceSetupRDFS state>;

        $r3 = $r1.<org.apache.jena.riot.process.inf.InferenceSetupRDFS: java.util.Map transProperties>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);

        r5 = (java.util.List) $r4;

        if r5 == null goto label2;

        $r6 = interfaceinvoke r5.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r8 = (com.hp.hpl.jena.graph.Node) $r7;

        virtualinvoke r0.<org.apache.jena.riot.process.inf.InferenceProcessorRDFS: void derive(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r9, r8, r10);

        goto label1;

     label2:
        return;
    }

    private final void domain(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node)
    {
        org.apache.jena.riot.process.inf.InferenceProcessorRDFS r0;
        java.util.Iterator $r6;
        org.apache.jena.riot.process.inf.InferenceSetupRDFS $r1;
        com.hp.hpl.jena.graph.Node r2, r8, r9, $r10, $r11, r12;
        java.util.List r5;
        java.util.Map $r3;
        java.lang.Object $r4, $r7;
        boolean $z0;

        r0 := @this: org.apache.jena.riot.process.inf.InferenceProcessorRDFS;

        r9 := @parameter0: com.hp.hpl.jena.graph.Node;

        r2 := @parameter1: com.hp.hpl.jena.graph.Node;

        r12 := @parameter2: com.hp.hpl.jena.graph.Node;

        $r1 = r0.<org.apache.jena.riot.process.inf.InferenceProcessorRDFS: org.apache.jena.riot.process.inf.InferenceSetupRDFS state>;

        $r3 = $r1.<org.apache.jena.riot.process.inf.InferenceSetupRDFS: java.util.Map domainList>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);

        r5 = (java.util.List) $r4;

        if r5 == null goto label2;

        $r6 = interfaceinvoke r5.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r8 = (com.hp.hpl.jena.graph.Node) $r7;

        $r10 = <org.apache.jena.riot.process.inf.InferenceProcessorRDFS: com.hp.hpl.jena.graph.Node rdfType>;

        virtualinvoke r0.<org.apache.jena.riot.process.inf.InferenceProcessorRDFS: void derive(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r9, $r10, r8);

        $r11 = <org.apache.jena.riot.process.inf.InferenceProcessorRDFS: com.hp.hpl.jena.graph.Node rdfType>;

        specialinvoke r0.<org.apache.jena.riot.process.inf.InferenceProcessorRDFS: void subClass(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r9, $r11, r8);

        goto label1;

     label2:
        return;
    }

    private final void range(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node)
    {
        org.apache.jena.riot.process.inf.InferenceProcessorRDFS r1;
        java.util.Iterator $r7;
        org.apache.jena.riot.process.inf.InferenceSetupRDFS $r2;
        com.hp.hpl.jena.graph.Node r0, r3, r9, $r10, $r11, r12;
        java.util.List r6;
        java.util.Map $r4;
        java.lang.Object $r5, $r8;
        boolean $z0, $z1;

        r1 := @this: org.apache.jena.riot.process.inf.InferenceProcessorRDFS;

        r12 := @parameter0: com.hp.hpl.jena.graph.Node;

        r3 := @parameter1: com.hp.hpl.jena.graph.Node;

        r0 := @parameter2: com.hp.hpl.jena.graph.Node;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: boolean isLiteral()>();

        if $z0 == 0 goto label1;

        return;

     label1:
        $r2 = r1.<org.apache.jena.riot.process.inf.InferenceProcessorRDFS: org.apache.jena.riot.process.inf.InferenceSetupRDFS state>;

        $r4 = $r2.<org.apache.jena.riot.process.inf.InferenceSetupRDFS: java.util.Map rangeList>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r3);

        r6 = (java.util.List) $r5;

        if r6 == null goto label3;

        $r7 = interfaceinvoke r6.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r9 = (com.hp.hpl.jena.graph.Node) $r8;

        $r10 = <org.apache.jena.riot.process.inf.InferenceProcessorRDFS: com.hp.hpl.jena.graph.Node rdfType>;

        virtualinvoke r1.<org.apache.jena.riot.process.inf.InferenceProcessorRDFS: void derive(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r0, $r10, r9);

        $r11 = <org.apache.jena.riot.process.inf.InferenceProcessorRDFS: com.hp.hpl.jena.graph.Node rdfType>;

        specialinvoke r1.<org.apache.jena.riot.process.inf.InferenceProcessorRDFS: void subClass(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r0, $r11, r9);

        goto label2;

     label3:
        return;
    }

    static void <clinit>()
    {
        com.hp.hpl.jena.graph.Node $r1;
        com.hp.hpl.jena.rdf.model.Property $r0;

        $r0 = <com.hp.hpl.jena.vocabulary.RDF: com.hp.hpl.jena.rdf.model.Property type>;

        $r1 = interfaceinvoke $r0.<com.hp.hpl.jena.rdf.model.Property: com.hp.hpl.jena.graph.Node asNode()>();

        <org.apache.jena.riot.process.inf.InferenceProcessorRDFS: com.hp.hpl.jena.graph.Node rdfType> = $r1;

        return;
    }
}
