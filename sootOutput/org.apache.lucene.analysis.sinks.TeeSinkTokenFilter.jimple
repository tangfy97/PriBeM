public final class org.apache.lucene.analysis.sinks.TeeSinkTokenFilter extends org.apache.lucene.analysis.TokenFilter
{
    private final java.util.List sinks;
    private static final org.apache.lucene.analysis.sinks.TeeSinkTokenFilter$SinkFilter ACCEPT_ALL_FILTER;

    public void <init>(org.apache.lucene.analysis.TokenStream)
    {
        org.apache.lucene.analysis.sinks.TeeSinkTokenFilter r0;
        org.apache.lucene.analysis.TokenStream r1;
        java.util.LinkedList $r2;

        r0 := @this: org.apache.lucene.analysis.sinks.TeeSinkTokenFilter;

        r1 := @parameter0: org.apache.lucene.analysis.TokenStream;

        specialinvoke r0.<org.apache.lucene.analysis.TokenFilter: void <init>(org.apache.lucene.analysis.TokenStream)>(r1);

        $r2 = new java.util.LinkedList;

        specialinvoke $r2.<java.util.LinkedList: void <init>()>();

        r0.<org.apache.lucene.analysis.sinks.TeeSinkTokenFilter: java.util.List sinks> = $r2;

        return;
    }

    public org.apache.lucene.analysis.sinks.TeeSinkTokenFilter$SinkTokenStream newSinkTokenStream()
    {
        org.apache.lucene.analysis.sinks.TeeSinkTokenFilter$SinkTokenStream $r2;
        org.apache.lucene.analysis.sinks.TeeSinkTokenFilter r0;
        org.apache.lucene.analysis.sinks.TeeSinkTokenFilter$SinkFilter $r1;

        r0 := @this: org.apache.lucene.analysis.sinks.TeeSinkTokenFilter;

        $r1 = <org.apache.lucene.analysis.sinks.TeeSinkTokenFilter: org.apache.lucene.analysis.sinks.TeeSinkTokenFilter$SinkFilter ACCEPT_ALL_FILTER>;

        $r2 = virtualinvoke r0.<org.apache.lucene.analysis.sinks.TeeSinkTokenFilter: org.apache.lucene.analysis.sinks.TeeSinkTokenFilter$SinkTokenStream newSinkTokenStream(org.apache.lucene.analysis.sinks.TeeSinkTokenFilter$SinkFilter)>($r1);

        return $r2;
    }

    public org.apache.lucene.analysis.sinks.TeeSinkTokenFilter$SinkTokenStream newSinkTokenStream(org.apache.lucene.analysis.sinks.TeeSinkTokenFilter$SinkFilter)
    {
        java.util.List $r5;
        org.apache.lucene.analysis.sinks.TeeSinkTokenFilter$SinkFilter r3;
        org.apache.lucene.analysis.sinks.TeeSinkTokenFilter$SinkTokenStream $r0;
        org.apache.lucene.util.AttributeSource $r2;
        org.apache.lucene.analysis.sinks.TeeSinkTokenFilter r1;
        java.lang.ref.WeakReference $r4;

        r1 := @this: org.apache.lucene.analysis.sinks.TeeSinkTokenFilter;

        r3 := @parameter0: org.apache.lucene.analysis.sinks.TeeSinkTokenFilter$SinkFilter;

        $r0 = new org.apache.lucene.analysis.sinks.TeeSinkTokenFilter$SinkTokenStream;

        $r2 = virtualinvoke r1.<org.apache.lucene.analysis.sinks.TeeSinkTokenFilter: org.apache.lucene.util.AttributeSource cloneAttributes()>();

        specialinvoke $r0.<org.apache.lucene.analysis.sinks.TeeSinkTokenFilter$SinkTokenStream: void <init>(org.apache.lucene.util.AttributeSource,org.apache.lucene.analysis.sinks.TeeSinkTokenFilter$SinkFilter,org.apache.lucene.analysis.sinks.TeeSinkTokenFilter$1)>($r2, r3, null);

        $r5 = r1.<org.apache.lucene.analysis.sinks.TeeSinkTokenFilter: java.util.List sinks>;

        $r4 = new java.lang.ref.WeakReference;

        specialinvoke $r4.<java.lang.ref.WeakReference: void <init>(java.lang.Object)>($r0);

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r4);

        return $r0;
    }

    public void addSinkTokenStream(org.apache.lucene.analysis.sinks.TeeSinkTokenFilter$SinkTokenStream)
    {
        java.util.Iterator $r5;
        org.apache.lucene.util.AttributeSource$AttributeFactory $r1, $r3;
        org.apache.lucene.analysis.sinks.TeeSinkTokenFilter$SinkTokenStream r2;
        org.apache.lucene.analysis.sinks.TeeSinkTokenFilter r0;
        java.lang.IllegalArgumentException $r10;
        org.apache.lucene.util.AttributeImpl $r9;
        java.util.List $r7;
        org.apache.lucene.util.AttributeSource $r4;
        java.lang.Object $r8;
        java.lang.ref.WeakReference $r6;
        boolean $z0, $z1;

        r0 := @this: org.apache.lucene.analysis.sinks.TeeSinkTokenFilter;

        r2 := @parameter0: org.apache.lucene.analysis.sinks.TeeSinkTokenFilter$SinkTokenStream;

        $r1 = virtualinvoke r0.<org.apache.lucene.analysis.sinks.TeeSinkTokenFilter: org.apache.lucene.util.AttributeSource$AttributeFactory getAttributeFactory()>();

        $r3 = virtualinvoke r2.<org.apache.lucene.analysis.sinks.TeeSinkTokenFilter$SinkTokenStream: org.apache.lucene.util.AttributeSource$AttributeFactory getAttributeFactory()>();

        $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r3);

        if $z0 != 0 goto label1;

        $r10 = new java.lang.IllegalArgumentException;

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The supplied sink is not compatible to this tee");

        throw $r10;

     label1:
        $r4 = virtualinvoke r0.<org.apache.lucene.analysis.sinks.TeeSinkTokenFilter: org.apache.lucene.util.AttributeSource cloneAttributes()>();

        $r5 = virtualinvoke $r4.<org.apache.lucene.util.AttributeSource: java.util.Iterator getAttributeImplsIterator()>();

     label2:
        $z1 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r8 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        $r9 = (org.apache.lucene.util.AttributeImpl) $r8;

        virtualinvoke r2.<org.apache.lucene.analysis.sinks.TeeSinkTokenFilter$SinkTokenStream: void addAttributeImpl(org.apache.lucene.util.AttributeImpl)>($r9);

        goto label2;

     label3:
        $r7 = r0.<org.apache.lucene.analysis.sinks.TeeSinkTokenFilter: java.util.List sinks>;

        $r6 = new java.lang.ref.WeakReference;

        specialinvoke $r6.<java.lang.ref.WeakReference: void <init>(java.lang.Object)>(r2);

        interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>($r6);

        return;
    }

    public void consumeAllTokens() throws java.io.IOException
    {
        org.apache.lucene.analysis.sinks.TeeSinkTokenFilter r0;
        boolean $z0;

        r0 := @this: org.apache.lucene.analysis.sinks.TeeSinkTokenFilter;

     label1:
        $z0 = virtualinvoke r0.<org.apache.lucene.analysis.sinks.TeeSinkTokenFilter: boolean incrementToken()>();

        if $z0 == 0 goto label2;

        goto label1;

     label2:
        return;
    }

    public boolean incrementToken() throws java.io.IOException
    {
        org.apache.lucene.analysis.TokenStream $r1;
        java.util.Iterator $r3;
        org.apache.lucene.analysis.sinks.TeeSinkTokenFilter$SinkTokenStream r7;
        org.apache.lucene.analysis.sinks.TeeSinkTokenFilter r0;
        org.apache.lucene.util.AttributeSource$State r8;
        java.util.List $r2;
        java.lang.Object $r4, $r6;
        java.lang.ref.WeakReference r5;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.lucene.analysis.sinks.TeeSinkTokenFilter;

        $r1 = r0.<org.apache.lucene.analysis.sinks.TeeSinkTokenFilter: org.apache.lucene.analysis.TokenStream input>;

        $z0 = virtualinvoke $r1.<org.apache.lucene.analysis.TokenStream: boolean incrementToken()>();

        if $z0 == 0 goto label5;

        r8 = null;

        $r2 = r0.<org.apache.lucene.analysis.sinks.TeeSinkTokenFilter: java.util.List sinks>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.lang.ref.WeakReference) $r4;

        $r6 = virtualinvoke r5.<java.lang.ref.WeakReference: java.lang.Object get()>();

        r7 = (org.apache.lucene.analysis.sinks.TeeSinkTokenFilter$SinkTokenStream) $r6;

        if r7 == null goto label3;

        $z2 = staticinvoke <org.apache.lucene.analysis.sinks.TeeSinkTokenFilter$SinkTokenStream: boolean access$100(org.apache.lucene.analysis.sinks.TeeSinkTokenFilter$SinkTokenStream,org.apache.lucene.util.AttributeSource)>(r7, r0);

        if $z2 == 0 goto label3;

        if r8 != null goto label2;

        r8 = virtualinvoke r0.<org.apache.lucene.analysis.sinks.TeeSinkTokenFilter: org.apache.lucene.util.AttributeSource$State captureState()>();

     label2:
        staticinvoke <org.apache.lucene.analysis.sinks.TeeSinkTokenFilter$SinkTokenStream: void access$200(org.apache.lucene.analysis.sinks.TeeSinkTokenFilter$SinkTokenStream,org.apache.lucene.util.AttributeSource$State)>(r7, r8);

     label3:
        goto label1;

     label4:
        return 1;

     label5:
        return 0;
    }

    public final void end() throws java.io.IOException
    {
        java.util.Iterator $r3;
        org.apache.lucene.analysis.sinks.TeeSinkTokenFilter$SinkTokenStream r7;
        org.apache.lucene.analysis.sinks.TeeSinkTokenFilter r0;
        org.apache.lucene.util.AttributeSource$State $r1;
        java.util.List $r2;
        java.lang.Object $r4, $r6;
        java.lang.ref.WeakReference r5;
        boolean $z0;

        r0 := @this: org.apache.lucene.analysis.sinks.TeeSinkTokenFilter;

        specialinvoke r0.<org.apache.lucene.analysis.TokenFilter: void end()>();

        $r1 = virtualinvoke r0.<org.apache.lucene.analysis.sinks.TeeSinkTokenFilter: org.apache.lucene.util.AttributeSource$State captureState()>();

        $r2 = r0.<org.apache.lucene.analysis.sinks.TeeSinkTokenFilter: java.util.List sinks>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.lang.ref.WeakReference) $r4;

        $r6 = virtualinvoke r5.<java.lang.ref.WeakReference: java.lang.Object get()>();

        r7 = (org.apache.lucene.analysis.sinks.TeeSinkTokenFilter$SinkTokenStream) $r6;

        if r7 == null goto label2;

        staticinvoke <org.apache.lucene.analysis.sinks.TeeSinkTokenFilter$SinkTokenStream: void access$300(org.apache.lucene.analysis.sinks.TeeSinkTokenFilter$SinkTokenStream,org.apache.lucene.util.AttributeSource$State)>(r7, $r1);

     label2:
        goto label1;

     label3:
        return;
    }

    static void <clinit>()
    {
        org.apache.lucene.analysis.sinks.TeeSinkTokenFilter$1 $r0;

        $r0 = new org.apache.lucene.analysis.sinks.TeeSinkTokenFilter$1;

        specialinvoke $r0.<org.apache.lucene.analysis.sinks.TeeSinkTokenFilter$1: void <init>()>();

        <org.apache.lucene.analysis.sinks.TeeSinkTokenFilter: org.apache.lucene.analysis.sinks.TeeSinkTokenFilter$SinkFilter ACCEPT_ALL_FILTER> = $r0;

        return;
    }
}
