class com.mycila.inject.internal.guava.collect.Maps$FilteredKeyMap extends com.mycila.inject.internal.guava.collect.Maps$AbstractFilteredMap
{
    com.mycila.inject.internal.guava.base.Predicate keyPredicate;
    java.util.Set entrySet;
    java.util.Set keySet;

    void <init>(java.util.Map, com.mycila.inject.internal.guava.base.Predicate, com.mycila.inject.internal.guava.base.Predicate)
    {
        com.mycila.inject.internal.guava.base.Predicate r2, r3;
        java.util.Map r1;
        com.mycila.inject.internal.guava.collect.Maps$FilteredKeyMap r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.Maps$FilteredKeyMap;

        r1 := @parameter0: java.util.Map;

        r3 := @parameter1: com.mycila.inject.internal.guava.base.Predicate;

        r2 := @parameter2: com.mycila.inject.internal.guava.base.Predicate;

        specialinvoke r0.<com.mycila.inject.internal.guava.collect.Maps$AbstractFilteredMap: void <init>(java.util.Map,com.mycila.inject.internal.guava.base.Predicate)>(r1, r2);

        r0.<com.mycila.inject.internal.guava.collect.Maps$FilteredKeyMap: com.mycila.inject.internal.guava.base.Predicate keyPredicate> = r3;

        return;
    }

    public java.util.Set entrySet()
    {
        com.mycila.inject.internal.guava.base.Predicate $r4;
        java.util.Map $r2;
        java.util.Set r1, $r3, $r5;
        com.mycila.inject.internal.guava.collect.Maps$FilteredKeyMap r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.Maps$FilteredKeyMap;

        r1 = r0.<com.mycila.inject.internal.guava.collect.Maps$FilteredKeyMap: java.util.Set entrySet>;

        if r1 != null goto label1;

        $r2 = r0.<com.mycila.inject.internal.guava.collect.Maps$FilteredKeyMap: java.util.Map unfiltered>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Set entrySet()>();

        $r4 = r0.<com.mycila.inject.internal.guava.collect.Maps$FilteredKeyMap: com.mycila.inject.internal.guava.base.Predicate predicate>;

        $r5 = staticinvoke <com.mycila.inject.internal.guava.collect.Sets: java.util.Set filter(java.util.Set,com.mycila.inject.internal.guava.base.Predicate)>($r3, $r4);

        r0.<com.mycila.inject.internal.guava.collect.Maps$FilteredKeyMap: java.util.Set entrySet> = $r5;

        goto label2;

     label1:
        $r5 = r1;

     label2:
        return $r5;
    }

    public java.util.Set keySet()
    {
        com.mycila.inject.internal.guava.base.Predicate $r4;
        java.util.Map $r2;
        java.util.Set r1, $r3, $r5;
        com.mycila.inject.internal.guava.collect.Maps$FilteredKeyMap r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.Maps$FilteredKeyMap;

        r1 = r0.<com.mycila.inject.internal.guava.collect.Maps$FilteredKeyMap: java.util.Set keySet>;

        if r1 != null goto label1;

        $r2 = r0.<com.mycila.inject.internal.guava.collect.Maps$FilteredKeyMap: java.util.Map unfiltered>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Set keySet()>();

        $r4 = r0.<com.mycila.inject.internal.guava.collect.Maps$FilteredKeyMap: com.mycila.inject.internal.guava.base.Predicate keyPredicate>;

        $r5 = staticinvoke <com.mycila.inject.internal.guava.collect.Sets: java.util.Set filter(java.util.Set,com.mycila.inject.internal.guava.base.Predicate)>($r3, $r4);

        r0.<com.mycila.inject.internal.guava.collect.Maps$FilteredKeyMap: java.util.Set keySet> = $r5;

        goto label2;

     label1:
        $r5 = r1;

     label2:
        return $r5;
    }

    public boolean containsKey(java.lang.Object)
    {
        com.mycila.inject.internal.guava.base.Predicate $r3;
        java.util.Map $r2;
        java.lang.Object r1;
        com.mycila.inject.internal.guava.collect.Maps$FilteredKeyMap r0;
        boolean $z0, $z1, $z2;

        r0 := @this: com.mycila.inject.internal.guava.collect.Maps$FilteredKeyMap;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<com.mycila.inject.internal.guava.collect.Maps$FilteredKeyMap: java.util.Map unfiltered>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r3 = r0.<com.mycila.inject.internal.guava.collect.Maps$FilteredKeyMap: com.mycila.inject.internal.guava.base.Predicate keyPredicate>;

        $z1 = interfaceinvoke $r3.<com.mycila.inject.internal.guava.base.Predicate: boolean apply(java.lang.Object)>(r1);

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }
}
