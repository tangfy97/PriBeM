class org.aspectj.runtime.reflect.MethodSignatureImpl extends org.aspectj.runtime.reflect.CodeSignatureImpl implements org.aspectj.lang.reflect.MethodSignature
{
    private java.lang.reflect.Method method;
    java.lang.Class returnType;

    void <init>(int, java.lang.String, java.lang.Class, java.lang.Class[], java.lang.String[], java.lang.Class[], java.lang.Class)
    {
        java.lang.Class[] r3, r5;
        java.lang.String[] r4;
        org.aspectj.runtime.reflect.MethodSignatureImpl r0;
        int i0;
        java.lang.Class r2, r6;
        java.lang.String r1;

        r0 := @this: org.aspectj.runtime.reflect.MethodSignatureImpl;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.Class;

        r3 := @parameter3: java.lang.Class[];

        r4 := @parameter4: java.lang.String[];

        r5 := @parameter5: java.lang.Class[];

        r6 := @parameter6: java.lang.Class;

        specialinvoke r0.<org.aspectj.runtime.reflect.CodeSignatureImpl: void <init>(int,java.lang.String,java.lang.Class,java.lang.Class[],java.lang.String[],java.lang.Class[])>(i0, r1, r2, r3, r4, r5);

        r0.<org.aspectj.runtime.reflect.MethodSignatureImpl: java.lang.Class returnType> = r6;

        return;
    }

    void <init>(java.lang.String)
    {
        java.lang.String r1;
        org.aspectj.runtime.reflect.MethodSignatureImpl r0;

        r0 := @this: org.aspectj.runtime.reflect.MethodSignatureImpl;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.aspectj.runtime.reflect.CodeSignatureImpl: void <init>(java.lang.String)>(r1);

        return;
    }

    public java.lang.Class getReturnType()
    {
        java.lang.Class $r1, $r2, $r3;
        org.aspectj.runtime.reflect.MethodSignatureImpl r0;

        r0 := @this: org.aspectj.runtime.reflect.MethodSignatureImpl;

        $r1 = r0.<org.aspectj.runtime.reflect.MethodSignatureImpl: java.lang.Class returnType>;

        if $r1 != null goto label1;

        $r3 = virtualinvoke r0.<org.aspectj.runtime.reflect.SignatureImpl: java.lang.Class extractType(int)>(6);

        r0.<org.aspectj.runtime.reflect.MethodSignatureImpl: java.lang.Class returnType> = $r3;

     label1:
        $r2 = r0.<org.aspectj.runtime.reflect.MethodSignatureImpl: java.lang.Class returnType>;

        return $r2;
    }

    protected java.lang.String createToString(org.aspectj.runtime.reflect.StringMaker)
    {
        java.lang.StringBuffer $r0;
        int $i0;
        java.lang.String $r3, $r5, $r6, $r7, $r10, $r12;
        boolean $z0, $z1;
        java.lang.Class[] $r8, $r9;
        org.aspectj.runtime.reflect.StringMaker r1;
        org.aspectj.runtime.reflect.MethodSignatureImpl r2;
        java.lang.Class $r4, $r11;

        r2 := @this: org.aspectj.runtime.reflect.MethodSignatureImpl;

        r1 := @parameter0: org.aspectj.runtime.reflect.StringMaker;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $i0 = virtualinvoke r2.<org.aspectj.runtime.reflect.SignatureImpl: int getModifiers()>();

        $r3 = virtualinvoke r1.<org.aspectj.runtime.reflect.StringMaker: java.lang.String makeModifiersString(int)>($i0);

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $z0 = r1.<org.aspectj.runtime.reflect.StringMaker: boolean includeArgs>;

        if $z0 == 0 goto label1;

        $r11 = virtualinvoke r2.<org.aspectj.runtime.reflect.MethodSignatureImpl: java.lang.Class getReturnType()>();

        $r12 = virtualinvoke r1.<org.aspectj.runtime.reflect.StringMaker: java.lang.String makeTypeName(java.lang.Class)>($r11);

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r12);

     label1:
        $z1 = r1.<org.aspectj.runtime.reflect.StringMaker: boolean includeArgs>;

        if $z1 == 0 goto label2;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");

     label2:
        $r4 = virtualinvoke r2.<org.aspectj.runtime.reflect.SignatureImpl: java.lang.Class getDeclaringType()>();

        $r5 = virtualinvoke r2.<org.aspectj.runtime.reflect.SignatureImpl: java.lang.String getDeclaringTypeName()>();

        $r6 = virtualinvoke r1.<org.aspectj.runtime.reflect.StringMaker: java.lang.String makePrimaryTypeName(java.lang.Class,java.lang.String)>($r4, $r5);

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".");

        $r7 = virtualinvoke r2.<org.aspectj.runtime.reflect.SignatureImpl: java.lang.String getName()>();

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r8 = virtualinvoke r2.<org.aspectj.runtime.reflect.CodeSignatureImpl: java.lang.Class[] getParameterTypes()>();

        virtualinvoke r1.<org.aspectj.runtime.reflect.StringMaker: void addSignature(java.lang.StringBuffer,java.lang.Class[])>($r0, $r8);

        $r9 = virtualinvoke r2.<org.aspectj.runtime.reflect.CodeSignatureImpl: java.lang.Class[] getExceptionTypes()>();

        virtualinvoke r1.<org.aspectj.runtime.reflect.StringMaker: void addThrows(java.lang.StringBuffer,java.lang.Class[])>($r0, $r9);

        $r10 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r10;
    }

    public java.lang.reflect.Method getMethod()
    {
        java.lang.NoSuchMethodException $r6;
        java.lang.Class[] $r4, $r9;
        org.aspectj.runtime.reflect.MethodSignatureImpl r0;
        java.util.HashSet $r7;
        java.lang.Class $r2;
        java.lang.String $r3, $r8;
        java.lang.reflect.Method $r1, $r5, $r10, $r11;

        r0 := @this: org.aspectj.runtime.reflect.MethodSignatureImpl;

        $r1 = r0.<org.aspectj.runtime.reflect.MethodSignatureImpl: java.lang.reflect.Method method>;

        if $r1 != null goto label4;

        $r2 = virtualinvoke r0.<org.aspectj.runtime.reflect.SignatureImpl: java.lang.Class getDeclaringType()>();

     label1:
        $r3 = virtualinvoke r0.<org.aspectj.runtime.reflect.SignatureImpl: java.lang.String getName()>();

        $r4 = virtualinvoke r0.<org.aspectj.runtime.reflect.CodeSignatureImpl: java.lang.Class[] getParameterTypes()>();

        $r5 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>($r3, $r4);

        r0.<org.aspectj.runtime.reflect.MethodSignatureImpl: java.lang.reflect.Method method> = $r5;

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        $r7 = new java.util.HashSet;

        specialinvoke $r7.<java.util.HashSet: void <init>()>();

        interfaceinvoke $r7.<java.util.Set: boolean add(java.lang.Object)>($r2);

        $r8 = virtualinvoke r0.<org.aspectj.runtime.reflect.SignatureImpl: java.lang.String getName()>();

        $r9 = virtualinvoke r0.<org.aspectj.runtime.reflect.CodeSignatureImpl: java.lang.Class[] getParameterTypes()>();

        $r10 = specialinvoke r0.<org.aspectj.runtime.reflect.MethodSignatureImpl: java.lang.reflect.Method search(java.lang.Class,java.lang.String,java.lang.Class[],java.util.Set)>($r2, $r8, $r9, $r7);

        r0.<org.aspectj.runtime.reflect.MethodSignatureImpl: java.lang.reflect.Method method> = $r10;

     label4:
        $r11 = r0.<org.aspectj.runtime.reflect.MethodSignatureImpl: java.lang.reflect.Method method>;

        return $r11;

        catch java.lang.NoSuchMethodException from label1 to label2 with label3;
    }

    private java.lang.reflect.Method search(java.lang.Class, java.lang.String, java.lang.Class[], java.util.Set)
    {
        java.lang.NoSuchMethodException $r11;
        java.util.Set r1;
        java.lang.Class[] r5, $r7;
        org.aspectj.runtime.reflect.MethodSignatureImpl r2;
        int $i0, i1;
        java.lang.Class r0, $r3, $r8;
        java.lang.String r4;
        java.lang.reflect.Method $r6, $r9, $r10;
        boolean $z0;

        r2 := @this: org.aspectj.runtime.reflect.MethodSignatureImpl;

        r0 := @parameter0: java.lang.Class;

        r4 := @parameter1: java.lang.String;

        r5 := @parameter2: java.lang.Class[];

        r1 := @parameter3: java.util.Set;

        if r0 != null goto label1;

        return null;

     label1:
        $z0 = interfaceinvoke r1.<java.util.Set: boolean contains(java.lang.Object)>(r0);

        if $z0 != 0 goto label5;

        interfaceinvoke r1.<java.util.Set: boolean add(java.lang.Object)>(r0);

     label2:
        $r10 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>(r4, r5);

     label3:
        return $r10;

     label4:
        $r11 := @caughtexception;

     label5:
        $r3 = virtualinvoke r0.<java.lang.Class: java.lang.Class getSuperclass()>();

        $r6 = specialinvoke r2.<org.aspectj.runtime.reflect.MethodSignatureImpl: java.lang.reflect.Method search(java.lang.Class,java.lang.String,java.lang.Class[],java.util.Set)>($r3, r4, r5, r1);

        if $r6 == null goto label6;

        return $r6;

     label6:
        $r7 = virtualinvoke r0.<java.lang.Class: java.lang.Class[] getInterfaces()>();

        if $r7 == null goto label9;

        i1 = 0;

     label7:
        $i0 = lengthof $r7;

        if i1 >= $i0 goto label9;

        $r8 = $r7[i1];

        $r9 = specialinvoke r2.<org.aspectj.runtime.reflect.MethodSignatureImpl: java.lang.reflect.Method search(java.lang.Class,java.lang.String,java.lang.Class[],java.util.Set)>($r8, r4, r5, r1);

        if $r9 == null goto label8;

        return $r9;

     label8:
        i1 = i1 + 1;

        goto label7;

     label9:
        return null;

        catch java.lang.NoSuchMethodException from label2 to label3 with label4;
    }
}
