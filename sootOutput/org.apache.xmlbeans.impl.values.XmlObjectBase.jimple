public abstract class org.apache.xmlbeans.impl.values.XmlObjectBase extends java.lang.Object implements org.apache.xmlbeans.impl.values.TypeStoreUser, java.io.Serializable, org.apache.xmlbeans.XmlObject, org.apache.xmlbeans.SimpleValue
{
    public static final short MAJOR_VERSION_NUMBER;
    public static final short MINOR_VERSION_NUMBER;
    public static final short KIND_SETTERHELPER_SINGLETON;
    public static final short KIND_SETTERHELPER_ARRAYITEM;
    public static final org.apache.xmlbeans.impl.common.ValidationContext _voorVc;
    private int _flags;
    private java.lang.Object _textsource;
    private static final int FLAG_NILLABLE;
    private static final int FLAG_HASDEFAULT;
    private static final int FLAG_FIXED;
    private static final int FLAG_ATTRIBUTE;
    private static final int FLAG_STORE;
    private static final int FLAG_VALUE_DATED;
    private static final int FLAG_NIL;
    private static final int FLAG_NIL_DATED;
    private static final int FLAG_ISDEFAULT;
    private static final int FLAG_ELEMENT_DATED;
    private static final int FLAG_SETTINGDEFAULT;
    private static final int FLAG_ORPHANED;
    private static final int FLAG_IMMUTABLE;
    private static final int FLAG_COMPLEXTYPE;
    private static final int FLAG_COMPLEXCONTENT;
    private static final int FLAG_NOT_VARIABLE;
    private static final int FLAG_VALIDATE_ON_SET;
    private static final int FLAGS_DATED;
    private static final int FLAGS_ELEMENT;
    private static final java.math.BigInteger _max;
    private static final java.math.BigInteger _min;
    private static final org.apache.xmlbeans.XmlOptions _toStringOptions;
    private static final org.apache.xmlbeans.XmlObject[] EMPTY_RESULT;
    static final boolean $assertionsDisabled;
    static java.lang.Class class$org$apache$xmlbeans$impl$values$XmlObjectBase;

    public final java.lang.Object monitor()
    {
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;
        org.apache.xmlbeans.impl.common.XmlLocale $r2;
        org.apache.xmlbeans.impl.values.TypeStore $r1;
        boolean $z0;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        $z0 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: boolean has_store()>();

        if $z0 == 0 goto label1;

        $r1 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: org.apache.xmlbeans.impl.values.TypeStore get_store()>();

        $r2 = interfaceinvoke $r1.<org.apache.xmlbeans.impl.values.TypeStore: org.apache.xmlbeans.impl.common.XmlLocale get_locale()>();

        return $r2;

     label1:
        return r0;
    }

    private static org.apache.xmlbeans.impl.values.XmlObjectBase underlying(org.apache.xmlbeans.XmlObject)
    {
        java.lang.IllegalStateException $r0;
        org.apache.xmlbeans.impl.values.XmlObjectBase $r1, $r3;
        org.apache.xmlbeans.DelegateXmlObject $r2;
        org.apache.xmlbeans.XmlObject r4;
        boolean $z0, $z1, $z2;

        r4 := @parameter0: org.apache.xmlbeans.XmlObject;

        if r4 != null goto label1;

        return null;

     label1:
        $z0 = r4 instanceof org.apache.xmlbeans.impl.values.XmlObjectBase;

        if $z0 == 0 goto label2;

        $r3 = (org.apache.xmlbeans.impl.values.XmlObjectBase) r4;

        return $r3;

     label2:
        $z1 = r4 instanceof org.apache.xmlbeans.DelegateXmlObject;

        if $z1 == 0 goto label3;

        $r2 = (org.apache.xmlbeans.DelegateXmlObject) r4;

        r4 = interfaceinvoke $r2.<org.apache.xmlbeans.DelegateXmlObject: org.apache.xmlbeans.XmlObject underlyingXmlObject()>();

        goto label2;

     label3:
        $z2 = r4 instanceof org.apache.xmlbeans.impl.values.XmlObjectBase;

        if $z2 == 0 goto label4;

        $r1 = (org.apache.xmlbeans.impl.values.XmlObjectBase) r4;

        return $r1;

     label4:
        $r0 = new java.lang.IllegalStateException;

        specialinvoke $r0.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Non-native implementations of XmlObject should extend FilterXmlObject or implement DelegateXmlObject");

        throw $r0;
    }

    public final org.apache.xmlbeans.XmlObject copy()
    {
        java.lang.Throwable $r4;
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;
        java.lang.Object $r1;
        org.apache.xmlbeans.XmlObject $r2, $r3;
        boolean $z0;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        $z0 = specialinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: boolean preCheck()>();

        if $z0 == 0 goto label1;

        $r3 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: org.apache.xmlbeans.XmlObject _copy()>();

        return $r3;

     label1:
        $r1 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: java.lang.Object monitor()>();

        entermonitor $r1;

     label2:
        $r2 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: org.apache.xmlbeans.XmlObject _copy()>();

        exitmonitor $r1;

     label3:
        return $r2;

     label4:
        $r4 := @caughtexception;

        exitmonitor $r1;

     label5:
        throw $r4;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public final org.apache.xmlbeans.XmlObject copy(org.apache.xmlbeans.XmlOptions)
    {
        java.lang.Throwable $r5;
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;
        org.apache.xmlbeans.XmlOptions r2;
        java.lang.Object $r1;
        org.apache.xmlbeans.XmlObject $r3, $r4;
        boolean $z0;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        r2 := @parameter0: org.apache.xmlbeans.XmlOptions;

        $z0 = specialinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: boolean preCheck()>();

        if $z0 == 0 goto label1;

        $r4 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: org.apache.xmlbeans.XmlObject _copy(org.apache.xmlbeans.XmlOptions)>(r2);

        return $r4;

     label1:
        $r1 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: java.lang.Object monitor()>();

        entermonitor $r1;

     label2:
        $r3 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: org.apache.xmlbeans.XmlObject _copy(org.apache.xmlbeans.XmlOptions)>(r2);

        exitmonitor $r1;

     label3:
        return $r3;

     label4:
        $r5 := @caughtexception;

        exitmonitor $r1;

     label5:
        throw $r5;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    private boolean preCheck()
    {
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;
        org.apache.xmlbeans.impl.common.XmlLocale $r2;
        org.apache.xmlbeans.impl.values.TypeStore $r1;
        boolean $z0, $z1;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        $z0 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: boolean has_store()>();

        if $z0 == 0 goto label1;

        $r1 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: org.apache.xmlbeans.impl.values.TypeStore get_store()>();

        $r2 = interfaceinvoke $r1.<org.apache.xmlbeans.impl.values.TypeStore: org.apache.xmlbeans.impl.common.XmlLocale get_locale()>();

        $z1 = interfaceinvoke $r2.<org.apache.xmlbeans.impl.common.XmlLocale: boolean noSync()>();

        return $z1;

     label1:
        return 0;
    }

    public final org.apache.xmlbeans.XmlObject _copy()
    {
        org.apache.xmlbeans.XmlObject $r1;
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        $r1 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: org.apache.xmlbeans.XmlObject _copy(org.apache.xmlbeans.XmlOptions)>(null);

        return $r1;
    }

    public final org.apache.xmlbeans.XmlObject _copy(org.apache.xmlbeans.XmlOptions)
    {
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;
        org.apache.xmlbeans.SchemaTypeLoader $r2;
        org.apache.xmlbeans.impl.values.TypeStore $r1, $r3;
        org.apache.xmlbeans.impl.values.TypeStoreUser $r6;
        org.apache.xmlbeans.XmlOptions r5;
        org.apache.xmlbeans.XmlObject r7;
        org.apache.xmlbeans.SchemaType $r4;
        boolean $z0;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        r5 := @parameter0: org.apache.xmlbeans.XmlOptions;

        $z0 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: boolean isImmutable()>();

        if $z0 == 0 goto label1;

        return r0;

     label1:
        virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: void check_orphaned()>();

        $r1 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: org.apache.xmlbeans.impl.values.TypeStore get_store()>();

        $r2 = interfaceinvoke $r1.<org.apache.xmlbeans.impl.values.TypeStore: org.apache.xmlbeans.SchemaTypeLoader get_schematypeloader()>();

        $r3 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: org.apache.xmlbeans.impl.values.TypeStore get_store()>();

        $r4 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: org.apache.xmlbeans.SchemaType schemaType()>();

        $r6 = interfaceinvoke $r3.<org.apache.xmlbeans.impl.values.TypeStore: org.apache.xmlbeans.impl.values.TypeStoreUser copy(org.apache.xmlbeans.SchemaTypeLoader,org.apache.xmlbeans.SchemaType,org.apache.xmlbeans.XmlOptions)>($r2, $r4, r5);

        r7 = (org.apache.xmlbeans.XmlObject) $r6;

        return r7;
    }

    public org.apache.xmlbeans.XmlDocumentProperties documentProperties()
    {
        java.lang.Throwable $r3;
        org.apache.xmlbeans.XmlDocumentProperties $r2;
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;
        org.apache.xmlbeans.XmlCursor $r1;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        $r1 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: org.apache.xmlbeans.XmlCursor newCursorForce()>();

     label1:
        $r2 = interfaceinvoke $r1.<org.apache.xmlbeans.XmlCursor: org.apache.xmlbeans.XmlDocumentProperties documentProperties()>();

     label2:
        interfaceinvoke $r1.<org.apache.xmlbeans.XmlCursor: void dispose()>();

        return $r2;

     label3:
        $r3 := @caughtexception;

     label4:
        interfaceinvoke $r1.<org.apache.xmlbeans.XmlCursor: void dispose()>();

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public org.apache.xmlbeans.xml.stream.XMLInputStream newXMLInputStream()
    {
        org.apache.xmlbeans.xml.stream.XMLInputStream $r1;
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        $r1 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: org.apache.xmlbeans.xml.stream.XMLInputStream newXMLInputStream(org.apache.xmlbeans.XmlOptions)>(null);

        return $r1;
    }

    public org.apache.xmlbeans.xml.stream.XMLInputStream newXMLInputStream(org.apache.xmlbeans.XmlOptions)
    {
        java.lang.Throwable $r5;
        org.apache.xmlbeans.xml.stream.XMLInputStream $r4;
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;
        org.apache.xmlbeans.XmlOptions r2, $r3;
        org.apache.xmlbeans.XmlCursor $r1;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        r2 := @parameter0: org.apache.xmlbeans.XmlOptions;

        $r1 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: org.apache.xmlbeans.XmlCursor newCursorForce()>();

     label1:
        $r3 = staticinvoke <org.apache.xmlbeans.impl.values.XmlObjectBase: org.apache.xmlbeans.XmlOptions makeInnerOptions(org.apache.xmlbeans.XmlOptions)>(r2);

        $r4 = interfaceinvoke $r1.<org.apache.xmlbeans.XmlCursor: org.apache.xmlbeans.xml.stream.XMLInputStream newXMLInputStream(org.apache.xmlbeans.XmlOptions)>($r3);

     label2:
        interfaceinvoke $r1.<org.apache.xmlbeans.XmlCursor: void dispose()>();

        return $r4;

     label3:
        $r5 := @caughtexception;

     label4:
        interfaceinvoke $r1.<org.apache.xmlbeans.XmlCursor: void dispose()>();

        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public javax.xml.stream.XMLStreamReader newXMLStreamReader()
    {
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;
        javax.xml.stream.XMLStreamReader $r1;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        $r1 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: javax.xml.stream.XMLStreamReader newXMLStreamReader(org.apache.xmlbeans.XmlOptions)>(null);

        return $r1;
    }

    public javax.xml.stream.XMLStreamReader newXMLStreamReader(org.apache.xmlbeans.XmlOptions)
    {
        java.lang.Throwable $r5;
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;
        org.apache.xmlbeans.XmlOptions r2, $r3;
        javax.xml.stream.XMLStreamReader $r4;
        org.apache.xmlbeans.XmlCursor $r1;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        r2 := @parameter0: org.apache.xmlbeans.XmlOptions;

        $r1 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: org.apache.xmlbeans.XmlCursor newCursorForce()>();

     label1:
        $r3 = staticinvoke <org.apache.xmlbeans.impl.values.XmlObjectBase: org.apache.xmlbeans.XmlOptions makeInnerOptions(org.apache.xmlbeans.XmlOptions)>(r2);

        $r4 = interfaceinvoke $r1.<org.apache.xmlbeans.XmlCursor: javax.xml.stream.XMLStreamReader newXMLStreamReader(org.apache.xmlbeans.XmlOptions)>($r3);

     label2:
        interfaceinvoke $r1.<org.apache.xmlbeans.XmlCursor: void dispose()>();

        return $r4;

     label3:
        $r5 := @caughtexception;

     label4:
        interfaceinvoke $r1.<org.apache.xmlbeans.XmlCursor: void dispose()>();

        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public java.io.InputStream newInputStream()
    {
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;
        java.io.InputStream $r1;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        $r1 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: java.io.InputStream newInputStream(org.apache.xmlbeans.XmlOptions)>(null);

        return $r1;
    }

    public java.io.InputStream newInputStream(org.apache.xmlbeans.XmlOptions)
    {
        java.lang.Throwable $r5;
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;
        org.apache.xmlbeans.XmlOptions r2, $r3;
        org.apache.xmlbeans.XmlCursor $r1;
        java.io.InputStream $r4;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        r2 := @parameter0: org.apache.xmlbeans.XmlOptions;

        $r1 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: org.apache.xmlbeans.XmlCursor newCursorForce()>();

     label1:
        $r3 = staticinvoke <org.apache.xmlbeans.impl.values.XmlObjectBase: org.apache.xmlbeans.XmlOptions makeInnerOptions(org.apache.xmlbeans.XmlOptions)>(r2);

        $r4 = interfaceinvoke $r1.<org.apache.xmlbeans.XmlCursor: java.io.InputStream newInputStream(org.apache.xmlbeans.XmlOptions)>($r3);

     label2:
        interfaceinvoke $r1.<org.apache.xmlbeans.XmlCursor: void dispose()>();

        return $r4;

     label3:
        $r5 := @caughtexception;

     label4:
        interfaceinvoke $r1.<org.apache.xmlbeans.XmlCursor: void dispose()>();

        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public java.io.Reader newReader()
    {
        java.io.Reader $r1;
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        $r1 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: java.io.Reader newReader(org.apache.xmlbeans.XmlOptions)>(null);

        return $r1;
    }

    public java.io.Reader newReader(org.apache.xmlbeans.XmlOptions)
    {
        java.lang.Throwable $r5;
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;
        org.apache.xmlbeans.XmlOptions r2, $r3;
        org.apache.xmlbeans.XmlCursor $r1;
        java.io.Reader $r4;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        r2 := @parameter0: org.apache.xmlbeans.XmlOptions;

        $r1 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: org.apache.xmlbeans.XmlCursor newCursorForce()>();

     label1:
        $r3 = staticinvoke <org.apache.xmlbeans.impl.values.XmlObjectBase: org.apache.xmlbeans.XmlOptions makeInnerOptions(org.apache.xmlbeans.XmlOptions)>(r2);

        $r4 = interfaceinvoke $r1.<org.apache.xmlbeans.XmlCursor: java.io.Reader newReader(org.apache.xmlbeans.XmlOptions)>($r3);

     label2:
        interfaceinvoke $r1.<org.apache.xmlbeans.XmlCursor: void dispose()>();

        return $r4;

     label3:
        $r5 := @caughtexception;

     label4:
        interfaceinvoke $r1.<org.apache.xmlbeans.XmlCursor: void dispose()>();

        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public org.w3c.dom.Node getDomNode()
    {
        java.lang.Throwable $r3;
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;
        org.apache.xmlbeans.XmlCursor $r1;
        org.w3c.dom.Node $r2;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        $r1 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: org.apache.xmlbeans.XmlCursor newCursorForce()>();

     label1:
        $r2 = interfaceinvoke $r1.<org.apache.xmlbeans.XmlCursor: org.w3c.dom.Node getDomNode()>();

     label2:
        interfaceinvoke $r1.<org.apache.xmlbeans.XmlCursor: void dispose()>();

        return $r2;

     label3:
        $r3 := @caughtexception;

     label4:
        interfaceinvoke $r1.<org.apache.xmlbeans.XmlCursor: void dispose()>();

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public org.w3c.dom.Node newDomNode()
    {
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;
        org.w3c.dom.Node $r1;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        $r1 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: org.w3c.dom.Node newDomNode(org.apache.xmlbeans.XmlOptions)>(null);

        return $r1;
    }

    public org.w3c.dom.Node newDomNode(org.apache.xmlbeans.XmlOptions)
    {
        java.lang.Throwable $r5;
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;
        org.apache.xmlbeans.XmlOptions r2, $r3;
        org.apache.xmlbeans.XmlCursor $r1;
        org.w3c.dom.Node $r4;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        r2 := @parameter0: org.apache.xmlbeans.XmlOptions;

        $r1 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: org.apache.xmlbeans.XmlCursor newCursorForce()>();

     label1:
        $r3 = staticinvoke <org.apache.xmlbeans.impl.values.XmlObjectBase: org.apache.xmlbeans.XmlOptions makeInnerOptions(org.apache.xmlbeans.XmlOptions)>(r2);

        $r4 = interfaceinvoke $r1.<org.apache.xmlbeans.XmlCursor: org.w3c.dom.Node newDomNode(org.apache.xmlbeans.XmlOptions)>($r3);

     label2:
        interfaceinvoke $r1.<org.apache.xmlbeans.XmlCursor: void dispose()>();

        return $r4;

     label3:
        $r5 := @caughtexception;

     label4:
        interfaceinvoke $r1.<org.apache.xmlbeans.XmlCursor: void dispose()>();

        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void save(org.xml.sax.ContentHandler, org.xml.sax.ext.LexicalHandler, org.apache.xmlbeans.XmlOptions) throws org.xml.sax.SAXException
    {
        org.xml.sax.ext.LexicalHandler r3;
        java.lang.Throwable $r6;
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;
        org.apache.xmlbeans.XmlOptions r4, $r5;
        org.apache.xmlbeans.XmlCursor $r1;
        org.xml.sax.ContentHandler r2;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        r2 := @parameter0: org.xml.sax.ContentHandler;

        r3 := @parameter1: org.xml.sax.ext.LexicalHandler;

        r4 := @parameter2: org.apache.xmlbeans.XmlOptions;

        $r1 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: org.apache.xmlbeans.XmlCursor newCursorForce()>();

     label1:
        $r5 = staticinvoke <org.apache.xmlbeans.impl.values.XmlObjectBase: org.apache.xmlbeans.XmlOptions makeInnerOptions(org.apache.xmlbeans.XmlOptions)>(r4);

        interfaceinvoke $r1.<org.apache.xmlbeans.XmlCursor: void save(org.xml.sax.ContentHandler,org.xml.sax.ext.LexicalHandler,org.apache.xmlbeans.XmlOptions)>(r2, r3, $r5);

     label2:
        interfaceinvoke $r1.<org.apache.xmlbeans.XmlCursor: void dispose()>();

        goto label5;

     label3:
        $r6 := @caughtexception;

     label4:
        interfaceinvoke $r1.<org.apache.xmlbeans.XmlCursor: void dispose()>();

        throw $r6;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void save(java.io.File, org.apache.xmlbeans.XmlOptions) throws java.io.IOException
    {
        java.lang.Throwable $r5;
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;
        org.apache.xmlbeans.XmlOptions r3, $r4;
        org.apache.xmlbeans.XmlCursor $r1;
        java.io.File r2;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        r2 := @parameter0: java.io.File;

        r3 := @parameter1: org.apache.xmlbeans.XmlOptions;

        $r1 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: org.apache.xmlbeans.XmlCursor newCursorForce()>();

     label1:
        $r4 = staticinvoke <org.apache.xmlbeans.impl.values.XmlObjectBase: org.apache.xmlbeans.XmlOptions makeInnerOptions(org.apache.xmlbeans.XmlOptions)>(r3);

        interfaceinvoke $r1.<org.apache.xmlbeans.XmlCursor: void save(java.io.File,org.apache.xmlbeans.XmlOptions)>(r2, $r4);

     label2:
        interfaceinvoke $r1.<org.apache.xmlbeans.XmlCursor: void dispose()>();

        goto label5;

     label3:
        $r5 := @caughtexception;

     label4:
        interfaceinvoke $r1.<org.apache.xmlbeans.XmlCursor: void dispose()>();

        throw $r5;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void save(java.io.OutputStream, org.apache.xmlbeans.XmlOptions) throws java.io.IOException
    {
        java.io.OutputStream r2;
        java.lang.Throwable $r5;
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;
        org.apache.xmlbeans.XmlOptions r3, $r4;
        org.apache.xmlbeans.XmlCursor $r1;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        r2 := @parameter0: java.io.OutputStream;

        r3 := @parameter1: org.apache.xmlbeans.XmlOptions;

        $r1 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: org.apache.xmlbeans.XmlCursor newCursorForce()>();

     label1:
        $r4 = staticinvoke <org.apache.xmlbeans.impl.values.XmlObjectBase: org.apache.xmlbeans.XmlOptions makeInnerOptions(org.apache.xmlbeans.XmlOptions)>(r3);

        interfaceinvoke $r1.<org.apache.xmlbeans.XmlCursor: void save(java.io.OutputStream,org.apache.xmlbeans.XmlOptions)>(r2, $r4);

     label2:
        interfaceinvoke $r1.<org.apache.xmlbeans.XmlCursor: void dispose()>();

        goto label5;

     label3:
        $r5 := @caughtexception;

     label4:
        interfaceinvoke $r1.<org.apache.xmlbeans.XmlCursor: void dispose()>();

        throw $r5;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void save(java.io.Writer, org.apache.xmlbeans.XmlOptions) throws java.io.IOException
    {
        java.lang.Throwable $r5;
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;
        org.apache.xmlbeans.XmlOptions r3, $r4;
        org.apache.xmlbeans.XmlCursor $r1;
        java.io.Writer r2;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        r2 := @parameter0: java.io.Writer;

        r3 := @parameter1: org.apache.xmlbeans.XmlOptions;

        $r1 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: org.apache.xmlbeans.XmlCursor newCursorForce()>();

     label1:
        $r4 = staticinvoke <org.apache.xmlbeans.impl.values.XmlObjectBase: org.apache.xmlbeans.XmlOptions makeInnerOptions(org.apache.xmlbeans.XmlOptions)>(r3);

        interfaceinvoke $r1.<org.apache.xmlbeans.XmlCursor: void save(java.io.Writer,org.apache.xmlbeans.XmlOptions)>(r2, $r4);

     label2:
        interfaceinvoke $r1.<org.apache.xmlbeans.XmlCursor: void dispose()>();

        goto label5;

     label3:
        $r5 := @caughtexception;

     label4:
        interfaceinvoke $r1.<org.apache.xmlbeans.XmlCursor: void dispose()>();

        throw $r5;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void save(org.xml.sax.ContentHandler, org.xml.sax.ext.LexicalHandler) throws org.xml.sax.SAXException
    {
        org.xml.sax.ext.LexicalHandler r2;
        org.xml.sax.ContentHandler r1;
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        r1 := @parameter0: org.xml.sax.ContentHandler;

        r2 := @parameter1: org.xml.sax.ext.LexicalHandler;

        virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: void save(org.xml.sax.ContentHandler,org.xml.sax.ext.LexicalHandler,org.apache.xmlbeans.XmlOptions)>(r1, r2, null);

        return;
    }

    public void save(java.io.File) throws java.io.IOException
    {
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;
        java.io.File r1;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        r1 := @parameter0: java.io.File;

        virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: void save(java.io.File,org.apache.xmlbeans.XmlOptions)>(r1, null);

        return;
    }

    public void save(java.io.OutputStream) throws java.io.IOException
    {
        java.io.OutputStream r1;
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        r1 := @parameter0: java.io.OutputStream;

        virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: void save(java.io.OutputStream,org.apache.xmlbeans.XmlOptions)>(r1, null);

        return;
    }

    public void save(java.io.Writer) throws java.io.IOException
    {
        java.io.Writer r1;
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        r1 := @parameter0: java.io.Writer;

        virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: void save(java.io.Writer,org.apache.xmlbeans.XmlOptions)>(r1, null);

        return;
    }

    public void dump()
    {
        java.lang.Throwable $r2;
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;
        org.apache.xmlbeans.XmlCursor $r1;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        $r1 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: org.apache.xmlbeans.XmlCursor newCursorForce()>();

     label1:
        interfaceinvoke $r1.<org.apache.xmlbeans.XmlCursor: void dump()>();

     label2:
        interfaceinvoke $r1.<org.apache.xmlbeans.XmlCursor: void dispose()>();

        goto label5;

     label3:
        $r2 := @caughtexception;

     label4:
        interfaceinvoke $r1.<org.apache.xmlbeans.XmlCursor: void dispose()>();

        throw $r2;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public org.apache.xmlbeans.XmlCursor newCursorForce()
    {
        java.lang.Throwable $r4;
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;
        org.apache.xmlbeans.XmlCursor $r3;
        java.lang.Object $r1;
        org.apache.xmlbeans.XmlObject $r2;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        $r1 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: java.lang.Object monitor()>();

        entermonitor $r1;

     label1:
        $r2 = specialinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: org.apache.xmlbeans.XmlObject ensureStore()>();

        $r3 = interfaceinvoke $r2.<org.apache.xmlbeans.XmlObject: org.apache.xmlbeans.XmlCursor newCursor()>();

        exitmonitor $r1;

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        exitmonitor $r1;

     label4:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private org.apache.xmlbeans.XmlObject ensureStore()
    {
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;
        org.apache.xmlbeans.XmlCursor $r7;
        org.apache.xmlbeans.impl.values.TypeStore $r2;
        org.apache.xmlbeans.XmlOptions $r3, $r5;
        int $i0, $i1, $i2, $i3;
        java.lang.String $r1;
        org.apache.xmlbeans.XmlObject $r6;
        org.apache.xmlbeans.SchemaType $r4;
        boolean $z0;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        $i0 = r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: int _flags>;

        $i1 = $i0 & 16;

        if $i1 == 0 goto label1;

        return r0;

     label1:
        virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: void check_dated()>();

        $i2 = r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: int _flags>;

        $i3 = $i2 & 64;

        if $i3 == 0 goto label2;

        $r1 = "";

        goto label5;

     label2:
        $z0 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: boolean has_store()>();

        if $z0 == 0 goto label3;

        $r2 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: org.apache.xmlbeans.impl.values.TypeStore get_store()>();

        goto label4;

     label3:
        $r2 = null;

     label4:
        $r1 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: java.lang.String compute_text(org.apache.xmlbeans.impl.values.NamespaceManager)>($r2);

     label5:
        $r3 = new org.apache.xmlbeans.XmlOptions;

        specialinvoke $r3.<org.apache.xmlbeans.XmlOptions: void <init>()>();

        $r4 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: org.apache.xmlbeans.SchemaType schemaType()>();

        $r5 = virtualinvoke $r3.<org.apache.xmlbeans.XmlOptions: org.apache.xmlbeans.XmlOptions setDocumentType(org.apache.xmlbeans.SchemaType)>($r4);

        $r6 = staticinvoke <org.apache.xmlbeans.XmlObject$Factory: org.apache.xmlbeans.XmlObject newInstance(org.apache.xmlbeans.XmlOptions)>($r5);

        $r7 = interfaceinvoke $r6.<org.apache.xmlbeans.XmlObject: org.apache.xmlbeans.XmlCursor newCursor()>();

        interfaceinvoke $r7.<org.apache.xmlbeans.XmlCursor: org.apache.xmlbeans.XmlCursor$TokenType toNextToken()>();

        interfaceinvoke $r7.<org.apache.xmlbeans.XmlCursor: void insertChars(java.lang.String)>($r1);

        return $r6;
    }

    private static org.apache.xmlbeans.XmlOptions makeInnerOptions(org.apache.xmlbeans.XmlOptions)
    {
        org.apache.xmlbeans.XmlOptions $r0, r1;

        r1 := @parameter0: org.apache.xmlbeans.XmlOptions;

        $r0 = new org.apache.xmlbeans.XmlOptions;

        specialinvoke $r0.<org.apache.xmlbeans.XmlOptions: void <init>(org.apache.xmlbeans.XmlOptions)>(r1);

        virtualinvoke $r0.<org.apache.xmlbeans.XmlOptions: void put(java.lang.Object)>("SAVE_INNER");

        return $r0;
    }

    public org.apache.xmlbeans.XmlCursor newCursor()
    {
        java.lang.Throwable $r7, $r8, $r9;
        java.lang.IllegalStateException $r6;
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;
        org.apache.xmlbeans.XmlCursor $r3, $r5;
        org.apache.xmlbeans.impl.values.TypeStore $r2, $r4;
        org.apache.xmlbeans.impl.common.XmlLocale $r1;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        $i0 = r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: int _flags>;

        $i1 = $i0 & 16;

        if $i1 != 0 goto label01;

        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>("XML Value Objects cannot create cursors");

        throw $r6;

     label01:
        virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: void check_orphaned()>();

        $r1 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: org.apache.xmlbeans.impl.common.XmlLocale getXmlLocale()>();

        $z0 = interfaceinvoke $r1.<org.apache.xmlbeans.impl.common.XmlLocale: boolean noSync()>();

        if $z0 == 0 goto label06;

        interfaceinvoke $r1.<org.apache.xmlbeans.impl.common.XmlLocale: void enter()>();

     label02:
        $r4 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: org.apache.xmlbeans.impl.values.TypeStore get_store()>();

        $r5 = interfaceinvoke $r4.<org.apache.xmlbeans.impl.values.TypeStore: org.apache.xmlbeans.XmlCursor new_cursor()>();

     label03:
        interfaceinvoke $r1.<org.apache.xmlbeans.impl.common.XmlLocale: void exit()>();

        return $r5;

     label04:
        $r9 := @caughtexception;

     label05:
        interfaceinvoke $r1.<org.apache.xmlbeans.impl.common.XmlLocale: void exit()>();

        throw $r9;

     label06:
        entermonitor $r1;

     label07:
        interfaceinvoke $r1.<org.apache.xmlbeans.impl.common.XmlLocale: void enter()>();

     label08:
        $r2 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: org.apache.xmlbeans.impl.values.TypeStore get_store()>();

        $r3 = interfaceinvoke $r2.<org.apache.xmlbeans.impl.values.TypeStore: org.apache.xmlbeans.XmlCursor new_cursor()>();

     label09:
        interfaceinvoke $r1.<org.apache.xmlbeans.impl.common.XmlLocale: void exit()>();

        exitmonitor $r1;

     label10:
        return $r3;

     label11:
        $r8 := @caughtexception;

     label12:
        interfaceinvoke $r1.<org.apache.xmlbeans.impl.common.XmlLocale: void exit()>();

        throw $r8;

     label13:
        $r7 := @caughtexception;

        exitmonitor $r1;

     label14:
        throw $r7;

        catch java.lang.Throwable from label02 to label03 with label04;
        catch java.lang.Throwable from label04 to label05 with label04;
        catch java.lang.Throwable from label08 to label09 with label11;
        catch java.lang.Throwable from label11 to label12 with label11;
        catch java.lang.Throwable from label07 to label10 with label13;
        catch java.lang.Throwable from label11 to label14 with label13;
    }

    public abstract org.apache.xmlbeans.SchemaType schemaType();

    public org.apache.xmlbeans.SchemaType instanceType()
    {
        java.lang.Throwable $r2;
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;
        java.lang.Object $r1;
        org.apache.xmlbeans.SchemaType $r3;
        boolean $z0;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        $r1 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: java.lang.Object monitor()>();

        entermonitor $r1;

     label1:
        $z0 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: boolean isNil()>();

        if $z0 == 0 goto label2;

        $r3 = null;

        goto label3;

     label2:
        $r3 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: org.apache.xmlbeans.SchemaType schemaType()>();

     label3:
        exitmonitor $r1;

     label4:
        return $r3;

     label5:
        $r2 := @caughtexception;

        exitmonitor $r1;

     label6:
        throw $r2;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    private org.apache.xmlbeans.SchemaField schemaField()
    {
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;
        org.apache.xmlbeans.SchemaField $r2, r4;
        org.apache.xmlbeans.impl.values.TypeStore $r3;
        org.apache.xmlbeans.SchemaType $r1;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        $r1 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: org.apache.xmlbeans.SchemaType schemaType()>();

        $r2 = interfaceinvoke $r1.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.SchemaField getContainerField()>();

        r4 = $r2;

        if $r2 != null goto label1;

        $r3 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: org.apache.xmlbeans.impl.values.TypeStore get_store()>();

        r4 = interfaceinvoke $r3.<org.apache.xmlbeans.impl.values.TypeStore: org.apache.xmlbeans.SchemaField get_schema_field()>();

     label1:
        return r4;
    }

    public boolean validate()
    {
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;
        boolean $z0;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        $z0 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: boolean validate(org.apache.xmlbeans.XmlOptions)>(null);

        return $z0;
    }

    public boolean validate(org.apache.xmlbeans.XmlOptions)
    {
        java.lang.Throwable $r10;
        java.lang.IllegalStateException $r9;
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;
        org.apache.xmlbeans.SchemaField $r2;
        org.apache.xmlbeans.impl.validator.Validator $r5;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        org.apache.xmlbeans.SchemaType $r3;
        boolean $z0, $z1;
        org.apache.xmlbeans.SchemaTypeLoader $r6;
        org.apache.xmlbeans.impl.values.TypeStore $r4;
        org.apache.xmlbeans.XmlOptions r7;
        org.apache.xmlbeans.impl.values.XmlValueDisconnectedException $r8;
        java.lang.Object $r1;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        r7 := @parameter0: org.apache.xmlbeans.XmlOptions;

        $i0 = r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: int _flags>;

        $i1 = $i0 & 16;

        if $i1 != 0 goto label2;

        $i4 = r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: int _flags>;

        $i5 = $i4 & 4096;

        if $i5 == 0 goto label1;

        $z1 = specialinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: boolean validate_immutable(org.apache.xmlbeans.XmlOptions)>(r7);

        return $z1;

     label1:
        $r9 = new java.lang.IllegalStateException;

        specialinvoke $r9.<java.lang.IllegalStateException: void <init>(java.lang.String)>("XML objects with no underlying store cannot be validated");

        throw $r9;

     label2:
        $r1 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: java.lang.Object monitor()>();

        entermonitor $r1;

     label3:
        $i2 = r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: int _flags>;

        $i3 = $i2 & 2048;

        if $i3 == 0 goto label4;

        $r8 = new org.apache.xmlbeans.impl.values.XmlValueDisconnectedException;

        specialinvoke $r8.<org.apache.xmlbeans.impl.values.XmlValueDisconnectedException: void <init>()>();

        throw $r8;

     label4:
        $r2 = specialinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: org.apache.xmlbeans.SchemaField schemaField()>();

        $r3 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: org.apache.xmlbeans.SchemaType schemaType()>();

        $r4 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: org.apache.xmlbeans.impl.values.TypeStore get_store()>();

        $r5 = new org.apache.xmlbeans.impl.validator.Validator;

        $r6 = interfaceinvoke $r4.<org.apache.xmlbeans.impl.values.TypeStore: org.apache.xmlbeans.SchemaTypeLoader get_schematypeloader()>();

        specialinvoke $r5.<org.apache.xmlbeans.impl.validator.Validator: void <init>(org.apache.xmlbeans.SchemaType,org.apache.xmlbeans.SchemaField,org.apache.xmlbeans.SchemaTypeLoader,org.apache.xmlbeans.XmlOptions,java.util.Collection)>($r3, $r2, $r6, r7, null);

        interfaceinvoke $r4.<org.apache.xmlbeans.impl.values.TypeStore: void validate(org.apache.xmlbeans.impl.common.ValidatorListener)>($r5);

        $z0 = virtualinvoke $r5.<org.apache.xmlbeans.impl.validator.Validator: boolean isValid()>();

        exitmonitor $r1;

     label5:
        return $z0;

     label6:
        $r10 := @caughtexception;

        exitmonitor $r1;

     label7:
        throw $r10;

        catch java.lang.Throwable from label3 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    private boolean validate_immutable(org.apache.xmlbeans.XmlOptions)
    {
        org.apache.xmlbeans.SchemaProperty[] $r7;
        org.apache.xmlbeans.impl.values.XmlObjectBase r3;
        org.apache.xmlbeans.impl.common.XmlErrorWatcher $r2;
        org.apache.xmlbeans.SchemaProperty $r9, $r11, $r13, $r15, $r20;
        java.math.BigInteger $r10, $r14;
        org.apache.xmlbeans.SchemaType $r4, $r6, $r8;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        org.apache.xmlbeans.impl.values.XmlObjectBase$ImmutableValueValidationContext $r5;
        java.util.Collection $r24;
        org.apache.xmlbeans.XmlError $r18, $r23;
        javax.xml.namespace.QName $r16, $r21;
        java.lang.Object[] $r12, $r19;
        int $i0, $i1, i2, $i3;
        java.lang.String $r17, $r22, $r26, r27;
        org.apache.xmlbeans.XmlOptions r0;
        java.lang.Object $r1, $r25;

        r3 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        r0 := @parameter0: org.apache.xmlbeans.XmlOptions;

        if r0 != null goto label01;

        $r24 = null;

        goto label02;

     label01:
        $r1 = virtualinvoke r0.<org.apache.xmlbeans.XmlOptions: java.lang.Object get(java.lang.Object)>("ERROR_LISTENER");

        $r24 = (java.util.Collection) $r1;

     label02:
        $r2 = new org.apache.xmlbeans.impl.common.XmlErrorWatcher;

        specialinvoke $r2.<org.apache.xmlbeans.impl.common.XmlErrorWatcher: void <init>(java.util.Collection)>($r24);

        $r4 = virtualinvoke r3.<org.apache.xmlbeans.impl.values.XmlObjectBase: org.apache.xmlbeans.SchemaType schemaType()>();

        $z0 = interfaceinvoke $r4.<org.apache.xmlbeans.SchemaType: boolean isSimpleType()>();

        if $z0 != 0 goto label10;

        if r0 == null goto label03;

        $z4 = virtualinvoke r0.<org.apache.xmlbeans.XmlOptions: boolean hasOption(java.lang.Object)>("VALIDATE_TEXT_ONLY");

        if $z4 != 0 goto label10;

     label03:
        $r6 = virtualinvoke r3.<org.apache.xmlbeans.impl.values.XmlObjectBase: org.apache.xmlbeans.SchemaType schemaType()>();

        $r7 = interfaceinvoke $r6.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.SchemaProperty[] getProperties()>();

        i2 = 0;

     label04:
        $i3 = lengthof $r7;

        if i2 >= $i3 goto label07;

        $r9 = $r7[i2];

        $r10 = interfaceinvoke $r9.<org.apache.xmlbeans.SchemaProperty: java.math.BigInteger getMinOccurs()>();

        $i1 = virtualinvoke $r10.<java.math.BigInteger: int signum()>();

        if $i1 <= 0 goto label06;

        $r11 = $r7[i2];

        $z3 = interfaceinvoke $r11.<org.apache.xmlbeans.SchemaProperty: boolean isAttribute()>();

        if $z3 == 0 goto label05;

        $r19 = newarray (java.lang.Object)[1];

        $r20 = $r7[i2];

        $r21 = interfaceinvoke $r20.<org.apache.xmlbeans.SchemaProperty: javax.xml.namespace.QName getName()>();

        $r22 = staticinvoke <org.apache.xmlbeans.impl.common.QNameHelper: java.lang.String pretty(javax.xml.namespace.QName)>($r21);

        $r19[0] = $r22;

        $r23 = staticinvoke <org.apache.xmlbeans.XmlError: org.apache.xmlbeans.XmlError forObject(java.lang.String,java.lang.Object[],org.apache.xmlbeans.XmlObject)>("cvc-complex-type.4", $r19, r3);

        virtualinvoke $r2.<org.apache.xmlbeans.impl.common.XmlErrorWatcher: boolean add(java.lang.Object)>($r23);

        goto label06;

     label05:
        $r12 = newarray (java.lang.Object)[2];

        $r13 = $r7[i2];

        $r14 = interfaceinvoke $r13.<org.apache.xmlbeans.SchemaProperty: java.math.BigInteger getMinOccurs()>();

        $r12[0] = $r14;

        $r15 = $r7[i2];

        $r16 = interfaceinvoke $r15.<org.apache.xmlbeans.SchemaProperty: javax.xml.namespace.QName getName()>();

        $r17 = staticinvoke <org.apache.xmlbeans.impl.common.QNameHelper: java.lang.String pretty(javax.xml.namespace.QName)>($r16);

        $r12[1] = $r17;

        $r18 = staticinvoke <org.apache.xmlbeans.XmlError: org.apache.xmlbeans.XmlError forObject(java.lang.String,java.lang.Object[],org.apache.xmlbeans.XmlObject)>("cvc-complex-type.2.4c", $r12, r3);

        virtualinvoke $r2.<org.apache.xmlbeans.impl.common.XmlErrorWatcher: boolean add(java.lang.Object)>($r18);

     label06:
        i2 = i2 + 1;

        goto label04;

     label07:
        $r8 = virtualinvoke r3.<org.apache.xmlbeans.impl.values.XmlObjectBase: org.apache.xmlbeans.SchemaType schemaType()>();

        $i0 = interfaceinvoke $r8.<org.apache.xmlbeans.SchemaType: int getContentType()>();

        if $i0 == 2 goto label10;

        $z2 = virtualinvoke $r2.<org.apache.xmlbeans.impl.common.XmlErrorWatcher: boolean hasError()>();

        if $z2 != 0 goto label08;

        $z5 = 1;

        goto label09;

     label08:
        $z5 = 0;

     label09:
        return $z5;

     label10:
        $r25 = r3.<org.apache.xmlbeans.impl.values.XmlObjectBase: java.lang.Object _textsource>;

        $r26 = (java.lang.String) $r25;

        r27 = $r26;

        if $r26 != null goto label11;

        r27 = "";

     label11:
        $r5 = new org.apache.xmlbeans.impl.values.XmlObjectBase$ImmutableValueValidationContext;

        specialinvoke $r5.<org.apache.xmlbeans.impl.values.XmlObjectBase$ImmutableValueValidationContext: void <init>(java.util.Collection,org.apache.xmlbeans.XmlObject)>($r2, r3);

        virtualinvoke r3.<org.apache.xmlbeans.impl.values.XmlObjectBase: void validate_simpleval(java.lang.String,org.apache.xmlbeans.impl.common.ValidationContext)>(r27, $r5);

        $z1 = virtualinvoke $r2.<org.apache.xmlbeans.impl.common.XmlErrorWatcher: boolean hasError()>();

        if $z1 != 0 goto label12;

        $z6 = 1;

        goto label13;

     label12:
        $z6 = 0;

     label13:
        return $z6;
    }

    protected void validate_simpleval(java.lang.String, org.apache.xmlbeans.impl.common.ValidationContext)
    {
        java.lang.String r1;
        org.apache.xmlbeans.impl.common.ValidationContext r2;
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.apache.xmlbeans.impl.common.ValidationContext;

        return;
    }

    private static org.apache.xmlbeans.XmlObject[] _typedArray(org.apache.xmlbeans.XmlObject[])
    {
        int $i0, $i1, $i2, $i3, i4;
        org.apache.xmlbeans.XmlObject $r1, $r9, $r11;
        org.apache.xmlbeans.SchemaType $r2, $r3, $r7, $r8, $r10, $r12, $r13, $r14, r15;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.apache.xmlbeans.XmlObject[] r0, $r5, r6;
        java.lang.Object $r4;
        java.lang.Class r16;

        r0 := @parameter0: org.apache.xmlbeans.XmlObject[];

        $i0 = lengthof r0;

        if $i0 != 0 goto label01;

        return r0;

     label01:
        $r1 = r0[0];

        $r2 = interfaceinvoke $r1.<org.apache.xmlbeans.XmlObject: org.apache.xmlbeans.SchemaType schemaType()>();

        r15 = $r2;

        $r3 = <org.apache.xmlbeans.XmlObject: org.apache.xmlbeans.SchemaType type>;

        $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r3);

        if $z0 != 0 goto label02;

        $z1 = interfaceinvoke $r2.<org.apache.xmlbeans.SchemaType: boolean isNoType()>();

        if $z1 == 0 goto label03;

     label02:
        return r0;

     label03:
        i4 = 1;

     label04:
        $i1 = lengthof r0;

        if i4 >= $i1 goto label07;

        $r9 = r0[i4];

        $r10 = interfaceinvoke $r9.<org.apache.xmlbeans.XmlObject: org.apache.xmlbeans.SchemaType schemaType()>();

        $z3 = interfaceinvoke $r10.<org.apache.xmlbeans.SchemaType: boolean isNoType()>();

        if $z3 == 0 goto label05;

        return r0;

     label05:
        $r11 = r0[i4];

        $r12 = interfaceinvoke $r11.<org.apache.xmlbeans.XmlObject: org.apache.xmlbeans.SchemaType schemaType()>();

        $r13 = interfaceinvoke r15.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.SchemaType getCommonBaseType(org.apache.xmlbeans.SchemaType)>($r12);

        r15 = $r13;

        $r14 = <org.apache.xmlbeans.XmlObject: org.apache.xmlbeans.SchemaType type>;

        $z4 = virtualinvoke $r13.<java.lang.Object: boolean equals(java.lang.Object)>($r14);

        if $z4 == 0 goto label06;

        return r0;

     label06:
        i4 = i4 + 1;

        goto label04;

     label07:
        r16 = interfaceinvoke r15.<org.apache.xmlbeans.SchemaType: java.lang.Class getJavaClass()>();

     label08:
        if r16 != null goto label10;

        $r7 = interfaceinvoke r15.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.SchemaType getBaseType()>();

        r15 = $r7;

        $r8 = <org.apache.xmlbeans.XmlObject: org.apache.xmlbeans.SchemaType type>;

        $z2 = virtualinvoke $r8.<java.lang.Object: boolean equals(java.lang.Object)>($r7);

        if $z2 == 0 goto label09;

        return r0;

     label09:
        r16 = interfaceinvoke $r7.<org.apache.xmlbeans.SchemaType: java.lang.Class getJavaClass()>();

        goto label08;

     label10:
        $i2 = lengthof r0;

        $r4 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(r16, $i2);

        $r5 = (org.apache.xmlbeans.XmlObject[]) $r4;

        r6 = (org.apache.xmlbeans.XmlObject[]) $r5;

        $i3 = lengthof r0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, 0, r6, 0, $i3);

        return r6;
    }

    public org.apache.xmlbeans.XmlObject[] selectPath(java.lang.String)
    {
        java.lang.String r1;
        org.apache.xmlbeans.XmlObject[] $r2;
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: org.apache.xmlbeans.XmlObject[] selectPath(java.lang.String,org.apache.xmlbeans.XmlOptions)>(r1, null);

        return $r2;
    }

    public org.apache.xmlbeans.XmlObject[] selectPath(java.lang.String, org.apache.xmlbeans.XmlOptions)
    {
        java.lang.Throwable $r9;
        org.apache.xmlbeans.XmlRuntimeException $r6;
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;
        org.apache.xmlbeans.XmlCursor $r1;
        int $i0, i1;
        java.lang.String r2;
        org.apache.xmlbeans.XmlObject $r5, $r7;
        boolean $z0, $z1, $z2;
        org.apache.xmlbeans.XmlObject[] $r4, r10;
        org.apache.xmlbeans.XmlOptions r3;
        org.apache.xmlbeans.impl.values.XmlValueDisconnectedException $r8;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: org.apache.xmlbeans.XmlOptions;

        $r1 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: org.apache.xmlbeans.XmlCursor newCursor()>();

        if $r1 != null goto label1;

        $r8 = new org.apache.xmlbeans.impl.values.XmlValueDisconnectedException;

        specialinvoke $r8.<org.apache.xmlbeans.impl.values.XmlValueDisconnectedException: void <init>()>();

        throw $r8;

     label1:
        interfaceinvoke $r1.<org.apache.xmlbeans.XmlCursor: void selectPath(java.lang.String,org.apache.xmlbeans.XmlOptions)>(r2, r3);

        $z0 = interfaceinvoke $r1.<org.apache.xmlbeans.XmlCursor: boolean hasNextSelection()>();

        if $z0 != 0 goto label2;

        r10 = <org.apache.xmlbeans.impl.values.XmlObjectBase: org.apache.xmlbeans.XmlObject[] EMPTY_RESULT>;

        goto label6;

     label2:
        $i0 = interfaceinvoke $r1.<org.apache.xmlbeans.XmlCursor: int getSelectionCount()>();

        r10 = newarray (org.apache.xmlbeans.XmlObject)[$i0];

        i1 = 0;

     label3:
        $z1 = interfaceinvoke $r1.<org.apache.xmlbeans.XmlCursor: boolean toNextSelection()>();

        if $z1 == 0 goto label6;

        $r5 = interfaceinvoke $r1.<org.apache.xmlbeans.XmlCursor: org.apache.xmlbeans.XmlObject getObject()>();

        r10[i1] = $r5;

        if $r5 != null goto label5;

        $z2 = interfaceinvoke $r1.<org.apache.xmlbeans.XmlCursor: boolean toParent()>();

        if $z2 == 0 goto label4;

        $r7 = interfaceinvoke $r1.<org.apache.xmlbeans.XmlCursor: org.apache.xmlbeans.XmlObject getObject()>();

        r10[i1] = $r7;

        if $r7 != null goto label5;

     label4:
        $r6 = new org.apache.xmlbeans.XmlRuntimeException;

        specialinvoke $r6.<org.apache.xmlbeans.XmlRuntimeException: void <init>(java.lang.String)>("Path must select only elements and attributes");

        throw $r6;

     label5:
        i1 = i1 + 1;

        goto label3;

     label6:
        interfaceinvoke $r1.<org.apache.xmlbeans.XmlCursor: void dispose()>();

        goto label9;

     label7:
        $r9 := @caughtexception;

     label8:
        interfaceinvoke $r1.<org.apache.xmlbeans.XmlCursor: void dispose()>();

        throw $r9;

     label9:
        $r4 = staticinvoke <org.apache.xmlbeans.impl.values.XmlObjectBase: org.apache.xmlbeans.XmlObject[] _typedArray(org.apache.xmlbeans.XmlObject[])>(r10);

        return $r4;

        catch java.lang.Throwable from label1 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    public org.apache.xmlbeans.XmlObject[] execQuery(java.lang.String)
    {
        java.lang.String r1;
        org.apache.xmlbeans.XmlObject[] $r2;
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: org.apache.xmlbeans.XmlObject[] execQuery(java.lang.String,org.apache.xmlbeans.XmlOptions)>(r1, null);

        return $r2;
    }

    public org.apache.xmlbeans.XmlObject[] execQuery(java.lang.String, org.apache.xmlbeans.XmlOptions)
    {
        java.lang.Throwable $r8;
        org.apache.xmlbeans.XmlRuntimeException $r7, $r10;
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;
        org.apache.xmlbeans.impl.values.TypeStore $r2;
        org.apache.xmlbeans.XmlException $r9;
        org.apache.xmlbeans.XmlObject[] $r5, $r6;
        org.apache.xmlbeans.XmlOptions r4;
        java.lang.Object $r1;
        java.lang.String r3;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        r3 := @parameter0: java.lang.String;

        r4 := @parameter1: org.apache.xmlbeans.XmlOptions;

        $r1 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: java.lang.Object monitor()>();

        entermonitor $r1;

     label1:
        $r2 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: org.apache.xmlbeans.impl.values.TypeStore get_store()>();

        if $r2 != null goto label2;

        $r7 = new org.apache.xmlbeans.XmlRuntimeException;

        specialinvoke $r7.<org.apache.xmlbeans.XmlRuntimeException: void <init>(java.lang.String)>("Cannot do XQuery on XML Value Objects");

        throw $r7;

     label2:
        $r5 = interfaceinvoke $r2.<org.apache.xmlbeans.impl.values.TypeStore: org.apache.xmlbeans.XmlObject[] exec_query(java.lang.String,org.apache.xmlbeans.XmlOptions)>(r3, r4);

        $r6 = staticinvoke <org.apache.xmlbeans.impl.values.XmlObjectBase: org.apache.xmlbeans.XmlObject[] _typedArray(org.apache.xmlbeans.XmlObject[])>($r5);

     label3:
        exitmonitor $r1;

     label4:
        return $r6;

     label5:
        $r9 := @caughtexception;

        $r10 = new org.apache.xmlbeans.XmlRuntimeException;

        specialinvoke $r10.<org.apache.xmlbeans.XmlRuntimeException: void <init>(org.apache.xmlbeans.XmlException)>($r9);

        throw $r10;

     label6:
        $r8 := @caughtexception;

        exitmonitor $r1;

     label7:
        throw $r8;

        catch org.apache.xmlbeans.XmlException from label2 to label3 with label5;
        catch java.lang.Throwable from label1 to label4 with label6;
        catch java.lang.Throwable from label5 to label7 with label6;
    }

    public org.apache.xmlbeans.XmlObject changeType(org.apache.xmlbeans.SchemaType)
    {
        java.lang.Throwable $r8;
        java.lang.IllegalStateException $r6;
        org.apache.xmlbeans.impl.values.XmlObjectBase r1;
        org.apache.xmlbeans.impl.values.TypeStore $r3;
        java.lang.IllegalArgumentException $r7;
        org.apache.xmlbeans.impl.values.TypeStoreUser $r4;
        int $i0, $i1;
        java.lang.Object $r2;
        org.apache.xmlbeans.XmlObject $r5;
        org.apache.xmlbeans.SchemaType r0;

        r1 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        r0 := @parameter0: org.apache.xmlbeans.SchemaType;

        if r0 != null goto label1;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid type (null)");

        throw $r7;

     label1:
        $i0 = r1.<org.apache.xmlbeans.impl.values.XmlObjectBase: int _flags>;

        $i1 = $i0 & 16;

        if $i1 != 0 goto label2;

        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>("XML Value Objects cannot have thier type changed");

        throw $r6;

     label2:
        $r2 = virtualinvoke r1.<org.apache.xmlbeans.impl.values.XmlObjectBase: java.lang.Object monitor()>();

        entermonitor $r2;

     label3:
        virtualinvoke r1.<org.apache.xmlbeans.impl.values.XmlObjectBase: void check_orphaned()>();

        $r3 = virtualinvoke r1.<org.apache.xmlbeans.impl.values.XmlObjectBase: org.apache.xmlbeans.impl.values.TypeStore get_store()>();

        $r4 = interfaceinvoke $r3.<org.apache.xmlbeans.impl.values.TypeStore: org.apache.xmlbeans.impl.values.TypeStoreUser change_type(org.apache.xmlbeans.SchemaType)>(r0);

        $r5 = (org.apache.xmlbeans.XmlObject) $r4;

        exitmonitor $r2;

     label4:
        return $r5;

     label5:
        $r8 := @caughtexception;

        exitmonitor $r2;

     label6:
        throw $r8;

        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public org.apache.xmlbeans.XmlObject substitute(javax.xml.namespace.QName, org.apache.xmlbeans.SchemaType)
    {
        java.lang.Throwable $r10;
        java.lang.IllegalStateException $r7;
        org.apache.xmlbeans.impl.values.XmlObjectBase r2;
        org.apache.xmlbeans.impl.values.TypeStore $r4;
        java.lang.IllegalArgumentException $r8, $r9;
        org.apache.xmlbeans.impl.values.TypeStoreUser $r5;
        int $i0, $i1;
        java.lang.Object $r3;
        javax.xml.namespace.QName r0;
        org.apache.xmlbeans.XmlObject $r6;
        org.apache.xmlbeans.SchemaType r1;

        r2 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        r0 := @parameter0: javax.xml.namespace.QName;

        r1 := @parameter1: org.apache.xmlbeans.SchemaType;

        if r0 != null goto label1;

        $r9 = new java.lang.IllegalArgumentException;

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid name (null)");

        throw $r9;

     label1:
        if r1 != null goto label2;

        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid type (null)");

        throw $r8;

     label2:
        $i0 = r2.<org.apache.xmlbeans.impl.values.XmlObjectBase: int _flags>;

        $i1 = $i0 & 16;

        if $i1 != 0 goto label3;

        $r7 = new java.lang.IllegalStateException;

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>("XML Value Objects cannot be used with substitution");

        throw $r7;

     label3:
        $r3 = virtualinvoke r2.<org.apache.xmlbeans.impl.values.XmlObjectBase: java.lang.Object monitor()>();

        entermonitor $r3;

     label4:
        virtualinvoke r2.<org.apache.xmlbeans.impl.values.XmlObjectBase: void check_orphaned()>();

        $r4 = virtualinvoke r2.<org.apache.xmlbeans.impl.values.XmlObjectBase: org.apache.xmlbeans.impl.values.TypeStore get_store()>();

        $r5 = interfaceinvoke $r4.<org.apache.xmlbeans.impl.values.TypeStore: org.apache.xmlbeans.impl.values.TypeStoreUser substitute(javax.xml.namespace.QName,org.apache.xmlbeans.SchemaType)>(r0, r1);

        $r6 = (org.apache.xmlbeans.XmlObject) $r5;

        exitmonitor $r3;

     label5:
        return $r6;

     label6:
        $r10 := @caughtexception;

        exitmonitor $r3;

     label7:
        throw $r10;

        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    protected void <init>()
    {
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: int _flags> = 65;

        return;
    }

    public void init_flags(org.apache.xmlbeans.SchemaProperty)
    {
        org.apache.xmlbeans.impl.values.XmlObjectBase r1;
        byte $b8, $b9, $b12, $b13;
        org.apache.xmlbeans.SchemaProperty r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i10, $i11, $i14, $i16, $i17;
        boolean $z0;

        r1 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        r0 := @parameter0: org.apache.xmlbeans.SchemaProperty;

        if r0 != null goto label1;

        return;

     label1:
        $i0 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaProperty: int hasDefault()>();

        if $i0 == 1 goto label2;

        $i1 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaProperty: int hasFixed()>();

        if $i1 == 1 goto label2;

        $i2 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaProperty: int hasNillable()>();

        if $i2 != 1 goto label3;

     label2:
        return;

     label3:
        $i3 = r1.<org.apache.xmlbeans.impl.values.XmlObjectBase: int _flags>;

        $i16 = (int) -8;

        $i4 = $i3 & $i16;

        r1.<org.apache.xmlbeans.impl.values.XmlObjectBase: int _flags> = $i4;

        $i5 = r1.<org.apache.xmlbeans.impl.values.XmlObjectBase: int _flags>;

        $i6 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaProperty: int hasDefault()>();

        if $i6 != 0 goto label4;

        $b12 = 0;

        goto label5;

     label4:
        $b12 = 2;

     label5:
        $i7 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaProperty: int hasFixed()>();

        if $i7 != 0 goto label6;

        $b13 = 0;

        goto label7;

     label6:
        $b13 = 4;

     label7:
        $b8 = $b12 | $b13;

        $i14 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaProperty: int hasNillable()>();

        if $i14 != 0 goto label8;

        $z0 = 0;

        goto label9;

     label8:
        $z0 = 1;

     label9:
        $b9 = $b8 | $z0;

        $i10 = $b9 | 32768;

        $i17 = (int) $i10;

        $i11 = $i5 | $i17;

        r1.<org.apache.xmlbeans.impl.values.XmlObjectBase: int _flags> = $i11;

        return;
    }

    protected void initComplexType(boolean, boolean)
    {
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;
        short $s1, $s2, $s3;
        int $i0, $i4;
        boolean z0, z1;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        z0 := @parameter0: boolean;

        z1 := @parameter1: boolean;

        $i0 = r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: int _flags>;

        if z0 == 0 goto label1;

        $s1 = 8192;

        goto label2;

     label1:
        $s1 = 0;

     label2:
        if z1 == 0 goto label3;

        $s2 = 16384;

        goto label4;

     label3:
        $s2 = 0;

     label4:
        $s3 = $s1 | $s2;

        $i4 = $i0 | $s3;

        r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: int _flags> = $i4;

        return;
    }

    protected boolean _isComplexType()
    {
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        $i0 = r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: int _flags>;

        $i1 = $i0 & 8192;

        if $i1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    protected boolean _isComplexContent()
    {
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        $i0 = r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: int _flags>;

        $i1 = $i0 & 16384;

        if $i1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void setValidateOnSet()
    {
        int $i0, $i1;
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        $i0 = r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: int _flags>;

        $i1 = $i0 | 65536;

        r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: int _flags> = $i1;

        return;
    }

    protected boolean _validateOnSet()
    {
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        $i0 = r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: int _flags>;

        $i1 = $i0 & 65536;

        if $i1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public final boolean isNil()
    {
        java.lang.Throwable $r2;
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;
        int $i0, $i1;
        java.lang.Object $r1;
        boolean $z0;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        $r1 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: java.lang.Object monitor()>();

        entermonitor $r1;

     label1:
        virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: void check_dated()>();

        $i0 = r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: int _flags>;

        $i1 = $i0 & 64;

        if $i1 == 0 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        exitmonitor $r1;

     label4:
        return $z0;

     label5:
        $r2 := @caughtexception;

        exitmonitor $r1;

     label6:
        throw $r2;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public final boolean isFixed()
    {
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        specialinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: void check_element_dated()>();

        $i0 = r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: int _flags>;

        $i1 = $i0 & 4;

        if $i1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public final boolean isNillable()
    {
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        specialinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: void check_element_dated()>();

        $i0 = r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: int _flags>;

        $i1 = $i0 & 1;

        if $i1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public final boolean isDefaultable()
    {
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        specialinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: void check_element_dated()>();

        $i0 = r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: int _flags>;

        $i1 = $i0 & 2;

        if $i1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public final boolean isDefault()
    {
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: void check_dated()>();

        $i0 = r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: int _flags>;

        $i1 = $i0 & 256;

        if $i1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public final void setNil()
    {
        java.lang.Throwable $r5;
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i11;
        org.apache.xmlbeans.impl.values.TypeStore $r2, $r3;
        org.apache.xmlbeans.impl.values.XmlValueNotNillableException $r6;
        java.lang.Object $r1;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        $r1 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: java.lang.Object monitor()>();

        entermonitor $r1;

     label1:
        specialinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: void set_prepare()>();

        $i0 = r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: int _flags>;

        $i1 = $i0 & 1;

        if $i1 != 0 goto label2;

        $i8 = r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: int _flags>;

        $i9 = $i8 & 65536;

        if $i9 == 0 goto label2;

        $r6 = new org.apache.xmlbeans.impl.values.XmlValueNotNillableException;

        specialinvoke $r6.<org.apache.xmlbeans.impl.values.XmlValueNotNillableException: void <init>()>();

        throw $r6;

     label2:
        virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: void set_nil()>();

        $i2 = r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: int _flags>;

        $i3 = $i2 | 64;

        r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: int _flags> = $i3;

        $i4 = r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: int _flags>;

        $i5 = $i4 & 16;

        if $i5 == 0 goto label3;

        $r2 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: org.apache.xmlbeans.impl.values.TypeStore get_store()>();

        interfaceinvoke $r2.<org.apache.xmlbeans.impl.values.TypeStore: void invalidate_text()>();

        $i6 = r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: int _flags>;

        $i11 = (int) -673;

        $i7 = $i6 & $i11;

        r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: int _flags> = $i7;

        $r3 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: org.apache.xmlbeans.impl.values.TypeStore get_store()>();

        interfaceinvoke $r3.<org.apache.xmlbeans.impl.values.TypeStore: void invalidate_nil()>();

        goto label4;

     label3:
        r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: java.lang.Object _textsource> = null;

     label4:
        exitmonitor $r1;

     label5:
        goto label8;

     label6:
        $r5 := @caughtexception;

        exitmonitor $r1;

     label7:
        throw $r5;

     label8:
        return;

        catch java.lang.Throwable from label1 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    protected int elementFlags()
    {
        int $i0, $i1;
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        specialinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: void check_element_dated()>();

        $i0 = r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: int _flags>;

        $i1 = $i0 & 7;

        return $i1;
    }

    public void setImmutable()
    {
        java.lang.IllegalStateException $r1;
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;
        int $i0, $i1, $i2, $i3;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        $i0 = r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: int _flags>;

        $i1 = $i0 & 4112;

        if $i1 == 0 goto label1;

        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>()>();

        throw $r1;

     label1:
        $i2 = r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: int _flags>;

        $i3 = $i2 | 4096;

        r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: int _flags> = $i3;

        return;
    }

    public boolean isImmutable()
    {
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        $i0 = r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: int _flags>;

        $i1 = $i0 & 4096;

        if $i1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public final void attach_store(org.apache.xmlbeans.impl.values.TypeStore)
    {
        java.lang.IllegalStateException $r2;
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;
        org.apache.xmlbeans.impl.values.TypeStore r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        boolean $z0, $z1;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        r1 := @parameter0: org.apache.xmlbeans.impl.values.TypeStore;

        r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: java.lang.Object _textsource> = r1;

        $i0 = r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: int _flags>;

        $i1 = $i0 & 4096;

        if $i1 == 0 goto label1;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>()>();

        throw $r2;

     label1:
        $i2 = r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: int _flags>;

        $i3 = $i2 | 688;

        r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: int _flags> = $i3;

        $z0 = interfaceinvoke r1.<org.apache.xmlbeans.impl.values.TypeStore: boolean is_attribute()>();

        if $z0 == 0 goto label2;

        $i6 = r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: int _flags>;

        $i7 = $i6 | 8;

        r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: int _flags> = $i7;

     label2:
        $z1 = interfaceinvoke r1.<org.apache.xmlbeans.impl.values.TypeStore: boolean validate_on_set()>();

        if $z1 == 0 goto label3;

        $i4 = r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: int _flags>;

        $i5 = $i4 | 65536;

        r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: int _flags> = $i5;

     label3:
        return;
    }

    public final void invalidate_value()
    {
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;
        int $i0, $i1, $i2, $i3;
        java.lang.AssertionError $r1;
        boolean $z0;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        $z0 = <org.apache.xmlbeans.impl.values.XmlObjectBase: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $i2 = r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: int _flags>;

        $i3 = $i2 & 16;

        if $i3 != 0 goto label1;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label1:
        $i0 = r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: int _flags>;

        $i1 = $i0 | 32;

        r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: int _flags> = $i1;

        return;
    }

    public final boolean uses_invalidate_value()
    {
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;
        int $i0;
        org.apache.xmlbeans.SchemaType $r1;
        boolean $z0, $z1;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        $r1 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: org.apache.xmlbeans.SchemaType schemaType()>();

        $z0 = interfaceinvoke $r1.<org.apache.xmlbeans.SchemaType: boolean isSimpleType()>();

        if $z0 != 0 goto label1;

        $i0 = interfaceinvoke $r1.<org.apache.xmlbeans.SchemaType: int getContentType()>();

        if $i0 != 2 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    public final void invalidate_nilvalue()
    {
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;
        int $i0, $i1, $i2, $i3;
        java.lang.AssertionError $r1;
        boolean $z0;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        $z0 = <org.apache.xmlbeans.impl.values.XmlObjectBase: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $i2 = r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: int _flags>;

        $i3 = $i2 & 16;

        if $i3 != 0 goto label1;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label1:
        $i0 = r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: int _flags>;

        $i1 = $i0 | 160;

        r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: int _flags> = $i1;

        return;
    }

    public final void invalidate_element_order()
    {
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;
        int $i0, $i1, $i2, $i3;
        java.lang.AssertionError $r1;
        boolean $z0;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        $z0 = <org.apache.xmlbeans.impl.values.XmlObjectBase: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $i2 = r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: int _flags>;

        $i3 = $i2 & 16;

        if $i3 != 0 goto label1;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label1:
        $i0 = r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: int _flags>;

        $i1 = $i0 | 672;

        r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: int _flags> = $i1;

        return;
    }

    public final org.apache.xmlbeans.impl.values.TypeStore get_store()
    {
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;
        int $i0, $i1;
        java.lang.Object $r1;
        org.apache.xmlbeans.impl.values.TypeStore $r2;
        java.lang.AssertionError $r3;
        boolean $z0;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        $z0 = <org.apache.xmlbeans.impl.values.XmlObjectBase: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $i0 = r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: int _flags>;

        $i1 = $i0 & 16;

        if $i1 != 0 goto label1;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label1:
        $r1 = r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: java.lang.Object _textsource>;

        $r2 = (org.apache.xmlbeans.impl.values.TypeStore) $r1;

        return $r2;
    }

    public final org.apache.xmlbeans.impl.common.XmlLocale getXmlLocale()
    {
        org.apache.xmlbeans.impl.values.TypeStore $r1;
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;
        org.apache.xmlbeans.impl.common.XmlLocale $r2;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        $r1 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: org.apache.xmlbeans.impl.values.TypeStore get_store()>();

        $r2 = interfaceinvoke $r1.<org.apache.xmlbeans.impl.values.TypeStore: org.apache.xmlbeans.impl.common.XmlLocale get_locale()>();

        return $r2;
    }

    protected final boolean has_store()
    {
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        $i0 = r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: int _flags>;

        $i1 = $i0 & 16;

        if $i1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public final java.lang.String build_text(org.apache.xmlbeans.impl.values.NamespaceManager)
    {
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;
        java.lang.AssertionError $r2, $r3;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        org.apache.xmlbeans.impl.values.NamespaceManager r1, $r4;
        java.lang.String $r5;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        r1 := @parameter0: org.apache.xmlbeans.impl.values.NamespaceManager;

        $z0 = <org.apache.xmlbeans.impl.values.XmlObjectBase: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $i4 = r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: int _flags>;

        $i5 = $i4 & 16;

        if $i5 != 0 goto label1;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label1:
        $z1 = <org.apache.xmlbeans.impl.values.XmlObjectBase: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        $i2 = r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: int _flags>;

        $i3 = $i2 & 32;

        if $i3 == 0 goto label2;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label2:
        $i0 = r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: int _flags>;

        $i1 = $i0 & 320;

        if $i1 == 0 goto label3;

        return "";

     label3:
        if r1 != null goto label5;

        $z2 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: boolean has_store()>();

        if $z2 == 0 goto label4;

        $r4 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: org.apache.xmlbeans.impl.values.TypeStore get_store()>();

        goto label6;

     label4:
        $r4 = null;

        goto label6;

     label5:
        $r4 = r1;

     label6:
        $r5 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: java.lang.String compute_text(org.apache.xmlbeans.impl.values.NamespaceManager)>($r4);

        return $r5;
    }

    public boolean build_nil()
    {
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;
        java.lang.AssertionError $r1, $r2;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        $z0 = <org.apache.xmlbeans.impl.values.XmlObjectBase: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $i4 = r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: int _flags>;

        $i5 = $i4 & 16;

        if $i5 != 0 goto label1;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label1:
        $z1 = <org.apache.xmlbeans.impl.values.XmlObjectBase: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        $i2 = r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: int _flags>;

        $i3 = $i2 & 32;

        if $i3 == 0 goto label2;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label2:
        $i0 = r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: int _flags>;

        $i1 = $i0 & 64;

        if $i1 == 0 goto label3;

        $z2 = 1;

        goto label4;

     label3:
        $z2 = 0;

     label4:
        return $z2;
    }

    public void validate_now()
    {
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: void check_dated()>();

        return;
    }

    public void disconnect_store()
    {
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;
        int $i0, $i1, $i2, $i3;
        java.lang.AssertionError $r1;
        boolean $z0;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        $z0 = <org.apache.xmlbeans.impl.values.XmlObjectBase: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $i2 = r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: int _flags>;

        $i3 = $i2 & 16;

        if $i3 != 0 goto label1;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label1:
        $i0 = r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: int _flags>;

        $i1 = $i0 | 2720;

        r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: int _flags> = $i1;

        return;
    }

    public org.apache.xmlbeans.impl.values.TypeStoreUser create_element_user(javax.xml.namespace.QName, javax.xml.namespace.QName)
    {
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;
        org.apache.xmlbeans.SchemaTypeLoader $r6;
        org.apache.xmlbeans.impl.values.TypeStore $r5;
        org.apache.xmlbeans.impl.values.TypeStoreUser $r8;
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl $r4;
        javax.xml.namespace.QName r2, r3;
        org.apache.xmlbeans.XmlObject $r7;
        org.apache.xmlbeans.SchemaType $r1;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        r2 := @parameter0: javax.xml.namespace.QName;

        r3 := @parameter1: javax.xml.namespace.QName;

        $r1 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: org.apache.xmlbeans.SchemaType schemaType()>();

        $r4 = (org.apache.xmlbeans.impl.schema.SchemaTypeImpl) $r1;

        $r5 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: org.apache.xmlbeans.impl.values.TypeStore get_store()>();

        $r6 = interfaceinvoke $r5.<org.apache.xmlbeans.impl.values.TypeStore: org.apache.xmlbeans.SchemaTypeLoader get_schematypeloader()>();

        $r7 = virtualinvoke $r4.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.XmlObject createElementType(javax.xml.namespace.QName,javax.xml.namespace.QName,org.apache.xmlbeans.SchemaTypeLoader)>(r2, r3, $r6);

        $r8 = (org.apache.xmlbeans.impl.values.TypeStoreUser) $r7;

        return $r8;
    }

    public org.apache.xmlbeans.impl.values.TypeStoreUser create_attribute_user(javax.xml.namespace.QName)
    {
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;
        org.apache.xmlbeans.SchemaTypeLoader $r5;
        org.apache.xmlbeans.impl.values.TypeStore $r4;
        org.apache.xmlbeans.impl.values.TypeStoreUser $r7;
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl $r3;
        javax.xml.namespace.QName r2;
        org.apache.xmlbeans.XmlObject $r6;
        org.apache.xmlbeans.SchemaType $r1;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        r2 := @parameter0: javax.xml.namespace.QName;

        $r1 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: org.apache.xmlbeans.SchemaType schemaType()>();

        $r3 = (org.apache.xmlbeans.impl.schema.SchemaTypeImpl) $r1;

        $r4 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: org.apache.xmlbeans.impl.values.TypeStore get_store()>();

        $r5 = interfaceinvoke $r4.<org.apache.xmlbeans.impl.values.TypeStore: org.apache.xmlbeans.SchemaTypeLoader get_schematypeloader()>();

        $r6 = virtualinvoke $r3.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.XmlObject createAttributeType(javax.xml.namespace.QName,org.apache.xmlbeans.SchemaTypeLoader)>(r2, $r5);

        $r7 = (org.apache.xmlbeans.impl.values.TypeStoreUser) $r6;

        return $r7;
    }

    public org.apache.xmlbeans.SchemaType get_schema_type()
    {
        org.apache.xmlbeans.SchemaType $r1;
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        $r1 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: org.apache.xmlbeans.SchemaType schemaType()>();

        return $r1;
    }

    public org.apache.xmlbeans.SchemaType get_element_type(javax.xml.namespace.QName, javax.xml.namespace.QName)
    {
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;
        org.apache.xmlbeans.SchemaTypeLoader $r5;
        javax.xml.namespace.QName r2, r3;
        org.apache.xmlbeans.impl.values.TypeStore $r4;
        org.apache.xmlbeans.SchemaType $r1, $r6;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        r2 := @parameter0: javax.xml.namespace.QName;

        r3 := @parameter1: javax.xml.namespace.QName;

        $r1 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: org.apache.xmlbeans.SchemaType schemaType()>();

        $r4 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: org.apache.xmlbeans.impl.values.TypeStore get_store()>();

        $r5 = interfaceinvoke $r4.<org.apache.xmlbeans.impl.values.TypeStore: org.apache.xmlbeans.SchemaTypeLoader get_schematypeloader()>();

        $r6 = interfaceinvoke $r1.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.SchemaType getElementType(javax.xml.namespace.QName,javax.xml.namespace.QName,org.apache.xmlbeans.SchemaTypeLoader)>(r2, r3, $r5);

        return $r6;
    }

    public org.apache.xmlbeans.SchemaType get_attribute_type(javax.xml.namespace.QName)
    {
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;
        org.apache.xmlbeans.SchemaTypeLoader $r4;
        javax.xml.namespace.QName r2;
        org.apache.xmlbeans.impl.values.TypeStore $r3;
        org.apache.xmlbeans.SchemaType $r1, $r5;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        r2 := @parameter0: javax.xml.namespace.QName;

        $r1 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: org.apache.xmlbeans.SchemaType schemaType()>();

        $r3 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: org.apache.xmlbeans.impl.values.TypeStore get_store()>();

        $r4 = interfaceinvoke $r3.<org.apache.xmlbeans.impl.values.TypeStore: org.apache.xmlbeans.SchemaTypeLoader get_schematypeloader()>();

        $r5 = interfaceinvoke $r1.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.SchemaType getAttributeType(javax.xml.namespace.QName,org.apache.xmlbeans.SchemaTypeLoader)>(r2, $r4);

        return $r5;
    }

    public java.lang.String get_default_element_text(javax.xml.namespace.QName)
    {
        java.lang.IllegalStateException $r5;
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;
        java.lang.AssertionError $r6;
        org.apache.xmlbeans.SchemaProperty $r3;
        javax.xml.namespace.QName r2;
        java.lang.String $r4;
        org.apache.xmlbeans.SchemaType $r1;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        r2 := @parameter0: javax.xml.namespace.QName;

        $z0 = <org.apache.xmlbeans.impl.values.XmlObjectBase: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z2 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: boolean _isComplexContent()>();

        if $z2 != 0 goto label1;

        $r6 = new java.lang.AssertionError;

        specialinvoke $r6.<java.lang.AssertionError: void <init>()>();

        throw $r6;

     label1:
        $z1 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: boolean _isComplexContent()>();

        if $z1 != 0 goto label2;

        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>()>();

        throw $r5;

     label2:
        $r1 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: org.apache.xmlbeans.SchemaType schemaType()>();

        $r3 = interfaceinvoke $r1.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.SchemaProperty getElementProperty(javax.xml.namespace.QName)>(r2);

        if $r3 != null goto label3;

        return "";

     label3:
        $r4 = interfaceinvoke $r3.<org.apache.xmlbeans.SchemaProperty: java.lang.String getDefaultText()>();

        return $r4;
    }

    public java.lang.String get_default_attribute_text(javax.xml.namespace.QName)
    {
        java.lang.IllegalStateException $r5;
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;
        java.lang.AssertionError $r6;
        org.apache.xmlbeans.SchemaProperty $r3;
        javax.xml.namespace.QName r2;
        java.lang.String $r4;
        org.apache.xmlbeans.SchemaType $r1;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        r2 := @parameter0: javax.xml.namespace.QName;

        $z0 = <org.apache.xmlbeans.impl.values.XmlObjectBase: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z2 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: boolean _isComplexType()>();

        if $z2 != 0 goto label1;

        $r6 = new java.lang.AssertionError;

        specialinvoke $r6.<java.lang.AssertionError: void <init>()>();

        throw $r6;

     label1:
        $z1 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: boolean _isComplexType()>();

        if $z1 != 0 goto label2;

        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>()>();

        throw $r5;

     label2:
        $r1 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: org.apache.xmlbeans.SchemaType schemaType()>();

        $r3 = interfaceinvoke $r1.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.SchemaProperty getAttributeProperty(javax.xml.namespace.QName)>(r2);

        if $r3 != null goto label3;

        return "";

     label3:
        $r4 = interfaceinvoke $r3.<org.apache.xmlbeans.SchemaProperty: java.lang.String getDefaultText()>();

        return $r4;
    }

    public int get_elementflags(javax.xml.namespace.QName)
    {
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;
        byte $b5, $b6, $b7, $b8;
        org.apache.xmlbeans.SchemaProperty $r3;
        int $i0, $i1, $i2, $i3, $i4, $i9, $i11;
        org.apache.xmlbeans.SchemaType $r1;
        boolean $z0, $z1;
        javax.xml.namespace.QName r2;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        r2 := @parameter0: javax.xml.namespace.QName;

        $z0 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: boolean _isComplexContent()>();

        if $z0 != 0 goto label01;

        return 0;

     label01:
        $r1 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: org.apache.xmlbeans.SchemaType schemaType()>();

        $r3 = interfaceinvoke $r1.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.SchemaProperty getElementProperty(javax.xml.namespace.QName)>(r2);

        if $r3 != null goto label02;

        return 0;

     label02:
        $i0 = interfaceinvoke $r3.<org.apache.xmlbeans.SchemaProperty: int hasDefault()>();

        if $i0 == 1 goto label03;

        $i1 = interfaceinvoke $r3.<org.apache.xmlbeans.SchemaProperty: int hasFixed()>();

        if $i1 == 1 goto label03;

        $i2 = interfaceinvoke $r3.<org.apache.xmlbeans.SchemaProperty: int hasNillable()>();

        if $i2 != 1 goto label04;

     label03:
        $i11 = (int) -1;

        return $i11;

     label04:
        $i3 = interfaceinvoke $r3.<org.apache.xmlbeans.SchemaProperty: int hasDefault()>();

        if $i3 != 0 goto label05;

        $b7 = 0;

        goto label06;

     label05:
        $b7 = 2;

     label06:
        $i4 = interfaceinvoke $r3.<org.apache.xmlbeans.SchemaProperty: int hasFixed()>();

        if $i4 != 0 goto label07;

        $b8 = 0;

        goto label08;

     label07:
        $b8 = 4;

     label08:
        $b5 = $b7 | $b8;

        $i9 = interfaceinvoke $r3.<org.apache.xmlbeans.SchemaProperty: int hasNillable()>();

        if $i9 != 0 goto label09;

        $z1 = 0;

        goto label10;

     label09:
        $z1 = 1;

     label10:
        $b6 = $b5 | $z1;

        return $b6;
    }

    public int get_attributeflags(javax.xml.namespace.QName)
    {
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;
        byte $b2, $b3, $b4;
        org.apache.xmlbeans.SchemaProperty $r3;
        int $i0, $i1;
        javax.xml.namespace.QName r2;
        org.apache.xmlbeans.SchemaType $r1;
        boolean $z0;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        r2 := @parameter0: javax.xml.namespace.QName;

        $z0 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: boolean _isComplexType()>();

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r1 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: org.apache.xmlbeans.SchemaType schemaType()>();

        $r3 = interfaceinvoke $r1.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.SchemaProperty getAttributeProperty(javax.xml.namespace.QName)>(r2);

        if $r3 != null goto label2;

        return 0;

     label2:
        $i0 = interfaceinvoke $r3.<org.apache.xmlbeans.SchemaProperty: int hasDefault()>();

        if $i0 != 0 goto label3;

        $b2 = 0;

        goto label4;

     label3:
        $b2 = 2;

     label4:
        $i1 = interfaceinvoke $r3.<org.apache.xmlbeans.SchemaProperty: int hasFixed()>();

        if $i1 != 0 goto label5;

        $b3 = 0;

        goto label6;

     label5:
        $b3 = 4;

     label6:
        $b4 = $b2 | $b3;

        return $b4;
    }

    public boolean is_child_element_order_sensitive()
    {
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;
        org.apache.xmlbeans.SchemaType $r1;
        boolean $z0, $z1;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        $z0 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: boolean _isComplexType()>();

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r1 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: org.apache.xmlbeans.SchemaType schemaType()>();

        $z1 = interfaceinvoke $r1.<org.apache.xmlbeans.SchemaType: boolean isOrderSensitive()>();

        return $z1;
    }

    public final org.apache.xmlbeans.QNameSet get_element_ending_delimiters(javax.xml.namespace.QName)
    {
        org.apache.xmlbeans.QNameSet $r4;
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;
        org.apache.xmlbeans.SchemaProperty $r3;
        javax.xml.namespace.QName r2;
        org.apache.xmlbeans.SchemaType $r1;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        r2 := @parameter0: javax.xml.namespace.QName;

        $r1 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: org.apache.xmlbeans.SchemaType schemaType()>();

        $r3 = interfaceinvoke $r1.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.SchemaProperty getElementProperty(javax.xml.namespace.QName)>(r2);

        if $r3 != null goto label1;

        return null;

     label1:
        $r4 = interfaceinvoke $r3.<org.apache.xmlbeans.SchemaProperty: org.apache.xmlbeans.QNameSet getJavaSetterDelimiter()>();

        return $r4;
    }

    public org.apache.xmlbeans.impl.values.TypeStoreVisitor new_visitor()
    {
        org.apache.xmlbeans.SchemaParticle $r3;
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;
        org.apache.xmlbeans.impl.schema.SchemaTypeVisitorImpl $r1;
        org.apache.xmlbeans.SchemaType $r2;
        boolean $z0;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        $z0 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: boolean _isComplexContent()>();

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r1 = new org.apache.xmlbeans.impl.schema.SchemaTypeVisitorImpl;

        $r2 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: org.apache.xmlbeans.SchemaType schemaType()>();

        $r3 = interfaceinvoke $r2.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.SchemaParticle getContentModel()>();

        specialinvoke $r1.<org.apache.xmlbeans.impl.schema.SchemaTypeVisitorImpl: void <init>(org.apache.xmlbeans.SchemaParticle)>($r3);

        return $r1;
    }

    public org.apache.xmlbeans.SchemaField get_attribute_field(javax.xml.namespace.QName)
    {
        org.apache.xmlbeans.SchemaLocalAttribute $r4;
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;
        org.apache.xmlbeans.SchemaAttributeModel $r2;
        javax.xml.namespace.QName r3;
        org.apache.xmlbeans.SchemaType $r1;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        r3 := @parameter0: javax.xml.namespace.QName;

        $r1 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: org.apache.xmlbeans.SchemaType schemaType()>();

        $r2 = interfaceinvoke $r1.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.SchemaAttributeModel getAttributeModel()>();

        if $r2 != null goto label1;

        return null;

     label1:
        $r4 = interfaceinvoke $r2.<org.apache.xmlbeans.SchemaAttributeModel: org.apache.xmlbeans.SchemaLocalAttribute getAttribute(javax.xml.namespace.QName)>(r3);

        return $r4;
    }

    protected void set_String(java.lang.String)
    {
        java.lang.IllegalStateException $r6;
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i11;
        java.lang.String r1, $r2;
        boolean z0, $z1;
        org.apache.xmlbeans.impl.values.TypeStore $r3, $r4;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        r1 := @parameter0: java.lang.String;

        $i0 = r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: int _flags>;

        $i1 = $i0 & 4096;

        if $i1 == 0 goto label1;

        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>()>();

        throw $r6;

     label1:
        $i2 = r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: int _flags>;

        $i3 = $i2 & 64;

        if $i3 == 0 goto label2;

        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        z0 = $z1;

        $r2 = specialinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: java.lang.String apply_wscanon(java.lang.String)>(r1);

        specialinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: void update_from_wscanon_text(java.lang.String)>($r2);

        $i4 = r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: int _flags>;

        $i5 = $i4 & 16;

        if $i5 == 0 goto label5;

        $i6 = r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: int _flags>;

        $i11 = (int) -33;

        $i7 = $i6 & $i11;

        r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: int _flags> = $i7;

        $i8 = r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: int _flags>;

        $i9 = $i8 & 1024;

        if $i9 != 0 goto label4;

        $r4 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: org.apache.xmlbeans.impl.values.TypeStore get_store()>();

        interfaceinvoke $r4.<org.apache.xmlbeans.impl.values.TypeStore: void store_text(java.lang.String)>(r1);

     label4:
        if z0 == 0 goto label6;

        $r3 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: org.apache.xmlbeans.impl.values.TypeStore get_store()>();

        interfaceinvoke $r3.<org.apache.xmlbeans.impl.values.TypeStore: void invalidate_nil()>();

        goto label6;

     label5:
        r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: java.lang.Object _textsource> = r1;

     label6:
        return;
    }

    protected void update_from_complex_content()
    {
        org.apache.xmlbeans.impl.values.XmlValueNotSupportedException $r0;
        org.apache.xmlbeans.impl.values.XmlObjectBase r1;

        r1 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        $r0 = new org.apache.xmlbeans.impl.values.XmlValueNotSupportedException;

        specialinvoke $r0.<org.apache.xmlbeans.impl.values.XmlValueNotSupportedException: void <init>(java.lang.String)>("Complex content");

        throw $r0;
    }

    private final void update_from_wscanon_text(java.lang.String)
    {
        java.lang.Throwable $r5;
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;
        org.apache.xmlbeans.impl.values.XmlValueOutOfRangeException $r6;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i19, $i21, $i23, $i25;
        java.lang.String r1, $r3;
        boolean $z0;
        org.apache.xmlbeans.impl.values.TypeStore $r2;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        r1 := @parameter0: java.lang.String;

        $i0 = r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: int _flags>;

        $i1 = $i0 & 2;

        if $i1 == 0 goto label7;

        $i2 = r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: int _flags>;

        $i3 = $i2 & 1024;

        if $i3 != 0 goto label7;

        $i4 = r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: int _flags>;

        $i5 = $i4 & 8;

        if $i5 != 0 goto label7;

        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z0 == 0 goto label7;

        $r2 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: org.apache.xmlbeans.impl.values.TypeStore get_store()>();

        $r3 = interfaceinvoke $r2.<org.apache.xmlbeans.impl.values.TypeStore: java.lang.String compute_default_text()>();

        if $r3 != null goto label1;

        $r6 = new org.apache.xmlbeans.impl.values.XmlValueOutOfRangeException;

        specialinvoke $r6.<org.apache.xmlbeans.impl.values.XmlValueOutOfRangeException: void <init>()>();

        throw $r6;

     label1:
        $i6 = r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: int _flags>;

        $i7 = $i6 | 1024;

        r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: int _flags> = $i7;

     label2:
        virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: void setStringValue(java.lang.String)>($r3);

     label3:
        $i8 = r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: int _flags>;

        $i19 = (int) -1025;

        $i9 = $i8 & $i19;

        r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: int _flags> = $i9;

        goto label6;

     label4:
        $r5 := @caughtexception;

     label5:
        $i14 = r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: int _flags>;

        $i21 = (int) -1025;

        $i15 = $i14 & $i21;

        r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: int _flags> = $i15;

        throw $r5;

     label6:
        $i10 = r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: int _flags>;

        $i23 = (int) -65;

        $i11 = $i10 & $i23;

        r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: int _flags> = $i11;

        $i12 = r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: int _flags>;

        $i13 = $i12 | 256;

        r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: int _flags> = $i13;

        return;

     label7:
        virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: void set_text(java.lang.String)>(r1);

        $i16 = r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: int _flags>;

        $i25 = (int) -321;

        $i17 = $i16 & $i25;

        r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: int _flags> = $i17;

        return;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    protected boolean is_defaultable_ws(java.lang.String)
    {
        java.lang.String r1;
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        r1 := @parameter0: java.lang.String;

        return 1;
    }

    protected int get_wscanon_rule()
    {
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        return 3;
    }

    private final java.lang.String apply_wscanon(java.lang.String)
    {
        org.apache.xmlbeans.impl.values.XmlObjectBase r1;
        int $i0;
        java.lang.String r0, $r2;

        r1 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r1.<org.apache.xmlbeans.impl.values.XmlObjectBase: int get_wscanon_rule()>();

        $r2 = staticinvoke <org.apache.xmlbeans.impl.common.XmlWhitespace: java.lang.String collapse(java.lang.String,int)>(r0, $i0);

        return $r2;
    }

    private final void check_element_dated()
    {
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i16, $i18, $i20, $i22;
        org.apache.xmlbeans.impl.values.TypeStore $r1;
        org.apache.xmlbeans.impl.values.XmlValueDisconnectedException $r3;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        $i0 = r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: int _flags>;

        $i1 = $i0 & 512;

        if $i1 == 0 goto label2;

        $i4 = r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: int _flags>;

        $i16 = (int) 32768;

        $i5 = $i4 & $i16;

        if $i5 != 0 goto label2;

        $i6 = r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: int _flags>;

        $i7 = $i6 & 2048;

        if $i7 == 0 goto label1;

        $r3 = new org.apache.xmlbeans.impl.values.XmlValueDisconnectedException;

        specialinvoke $r3.<org.apache.xmlbeans.impl.values.XmlValueDisconnectedException: void <init>()>();

        throw $r3;

     label1:
        $r1 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: org.apache.xmlbeans.impl.values.TypeStore get_store()>();

        $i8 = interfaceinvoke $r1.<org.apache.xmlbeans.impl.values.TypeStore: int compute_flags()>();

        $i9 = r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: int _flags>;

        $i18 = (int) -520;

        $i10 = $i9 & $i18;

        r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: int _flags> = $i10;

        $i11 = r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: int _flags>;

        $i12 = $i11 | $i8;

        r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: int _flags> = $i12;

     label2:
        $i13 = r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: int _flags>;

        $i20 = (int) 32768;

        $i14 = $i13 & $i20;

        if $i14 == 0 goto label3;

        $i2 = r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: int _flags>;

        $i22 = (int) -513;

        $i3 = $i2 & $i22;

        r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: int _flags> = $i3;

     label3:
        return;
    }

    protected final boolean is_orphaned()
    {
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        $i0 = r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: int _flags>;

        $i1 = $i0 & 2048;

        if $i1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    protected final void check_orphaned()
    {
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;
        boolean $z0;
        org.apache.xmlbeans.impl.values.XmlValueDisconnectedException $r1;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        $z0 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: boolean is_orphaned()>();

        if $z0 == 0 goto label1;

        $r1 = new org.apache.xmlbeans.impl.values.XmlValueDisconnectedException;

        specialinvoke $r1.<org.apache.xmlbeans.impl.values.XmlValueDisconnectedException: void <init>()>();

        throw $r1;

     label1:
        return;
    }

    public final void check_dated()
    {
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;
        boolean $z0, $z1, z2;
        org.apache.xmlbeans.impl.values.NamespaceContext $r13;
        org.apache.xmlbeans.impl.values.TypeStore $r3, $r4, $r6;
        org.apache.xmlbeans.impl.values.XmlValueDisconnectedException $r10;
        java.lang.Throwable $r9;
        java.lang.AssertionError $r11;
        org.apache.xmlbeans.impl.values.XmlValueOutOfRangeException $r12;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i30, $i32, $i34, $i36;
        java.lang.String $r1;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        $i0 = r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: int _flags>;

        $i1 = $i0 & 672;

        if $i1 == 0 goto label15;

        $i2 = r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: int _flags>;

        $i3 = $i2 & 2048;

        if $i3 == 0 goto label01;

        $r10 = new org.apache.xmlbeans.impl.values.XmlValueDisconnectedException;

        specialinvoke $r10.<org.apache.xmlbeans.impl.values.XmlValueDisconnectedException: void <init>()>();

        throw $r10;

     label01:
        $z0 = <org.apache.xmlbeans.impl.values.XmlObjectBase: boolean $assertionsDisabled>;

        if $z0 != 0 goto label02;

        $i25 = r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: int _flags>;

        $i26 = $i25 & 16;

        if $i26 != 0 goto label02;

        $r11 = new java.lang.AssertionError;

        specialinvoke $r11.<java.lang.AssertionError: void <init>()>();

        throw $r11;

     label02:
        specialinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: void check_element_dated()>();

        $i4 = r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: int _flags>;

        $i5 = $i4 & 512;

        if $i5 == 0 goto label03;

        $r6 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: org.apache.xmlbeans.impl.values.TypeStore get_store()>();

        $i20 = interfaceinvoke $r6.<org.apache.xmlbeans.impl.values.TypeStore: int compute_flags()>();

        $i21 = r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: int _flags>;

        $i30 = (int) -520;

        $i22 = $i21 & $i30;

        r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: int _flags> = $i22;

        $i23 = r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: int _flags>;

        $i24 = $i23 | $i20;

        r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: int _flags> = $i24;

     label03:
        z2 = 0;

        $i6 = r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: int _flags>;

        $i7 = $i6 & 128;

        if $i7 == 0 goto label07;

        $r4 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: org.apache.xmlbeans.impl.values.TypeStore get_store()>();

        $z1 = interfaceinvoke $r4.<org.apache.xmlbeans.impl.values.TypeStore: boolean find_nil()>();

        if $z1 == 0 goto label05;

        $i14 = r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: int _flags>;

        $i15 = $i14 & 1;

        if $i15 != 0 goto label04;

        $i18 = r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: int _flags>;

        $i19 = $i18 & 65536;

        if $i19 == 0 goto label04;

        $r12 = new org.apache.xmlbeans.impl.values.XmlValueOutOfRangeException;

        specialinvoke $r12.<org.apache.xmlbeans.impl.values.XmlValueOutOfRangeException: void <init>()>();

        throw $r12;

     label04:
        virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: void set_nil()>();

        $i16 = r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: int _flags>;

        $i17 = $i16 | 64;

        r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: int _flags> = $i17;

        z2 = 1;

        goto label06;

     label05:
        $i10 = r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: int _flags>;

        $i32 = (int) -65;

        $i11 = $i10 & $i32;

        r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: int _flags> = $i11;

     label06:
        $i12 = r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: int _flags>;

        $i34 = (int) -129;

        $i13 = $i12 & $i34;

        r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: int _flags> = $i13;

     label07:
        if z2 != 0 goto label14;

        $i8 = r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: int _flags>;

        $i9 = $i8 & 16384;

        if $i9 != 0 goto label08;

        $r1 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: java.lang.String get_wscanon_text()>();

        if $r1 != null goto label09;

     label08:
        virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: void update_from_complex_content()>();

        goto label14;

     label09:
        $r13 = new org.apache.xmlbeans.impl.values.NamespaceContext;

        $r3 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: org.apache.xmlbeans.impl.values.TypeStore get_store()>();

        specialinvoke $r13.<org.apache.xmlbeans.impl.values.NamespaceContext: void <init>(org.apache.xmlbeans.impl.values.TypeStore)>($r3);

        staticinvoke <org.apache.xmlbeans.impl.values.NamespaceContext: void push(org.apache.xmlbeans.impl.values.NamespaceContext)>($r13);

     label10:
        specialinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: void update_from_wscanon_text(java.lang.String)>($r1);

     label11:
        staticinvoke <org.apache.xmlbeans.impl.values.NamespaceContext: void pop()>();

        goto label14;

     label12:
        $r9 := @caughtexception;

     label13:
        staticinvoke <org.apache.xmlbeans.impl.values.NamespaceContext: void pop()>();

        throw $r9;

     label14:
        $i27 = r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: int _flags>;

        $i36 = (int) -33;

        $i28 = $i27 & $i36;

        r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: int _flags> = $i28;

     label15:
        return;

        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.lang.Throwable from label12 to label13 with label12;
    }

    private final void set_prepare()
    {
        java.lang.IllegalStateException $r1;
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;
        int $i0, $i1;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        specialinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: void check_element_dated()>();

        $i0 = r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: int _flags>;

        $i1 = $i0 & 4096;

        if $i1 == 0 goto label1;

        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>()>();

        throw $r1;

     label1:
        return;
    }

    private final void set_commit()
    {
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;
        org.apache.xmlbeans.impl.values.TypeStore $r1, $r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i9, $i11;
        boolean $z0;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        $i0 = r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: int _flags>;

        $i1 = $i0 & 64;

        if $i1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        $i2 = r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: int _flags>;

        $i9 = (int) -321;

        $i3 = $i2 & $i9;

        r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: int _flags> = $i3;

        $i4 = r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: int _flags>;

        $i5 = $i4 & 16;

        if $i5 == 0 goto label3;

        $i6 = r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: int _flags>;

        $i11 = (int) -673;

        $i7 = $i6 & $i11;

        r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: int _flags> = $i7;

        $r1 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: org.apache.xmlbeans.impl.values.TypeStore get_store()>();

        interfaceinvoke $r1.<org.apache.xmlbeans.impl.values.TypeStore: void invalidate_text()>();

        if $z0 == 0 goto label4;

        $r2 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: org.apache.xmlbeans.impl.values.TypeStore get_store()>();

        interfaceinvoke $r2.<org.apache.xmlbeans.impl.values.TypeStore: void invalidate_nil()>();

        goto label4;

     label3:
        r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: java.lang.Object _textsource> = null;

     label4:
        return;
    }

    public final java.lang.String get_wscanon_text()
    {
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;
        org.apache.xmlbeans.impl.values.TypeStore $r1;
        int $i0, $i1, $i2;
        java.lang.Object $r3;
        java.lang.String $r2, $r4, $r5;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        $i0 = r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: int _flags>;

        $i1 = $i0 & 16;

        if $i1 != 0 goto label1;

        $r3 = r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: java.lang.Object _textsource>;

        $r4 = (java.lang.String) $r3;

        $r5 = specialinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: java.lang.String apply_wscanon(java.lang.String)>($r4);

        return $r5;

     label1:
        $r1 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: org.apache.xmlbeans.impl.values.TypeStore get_store()>();

        $i2 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: int get_wscanon_rule()>();

        $r2 = interfaceinvoke $r1.<org.apache.xmlbeans.impl.values.TypeStore: java.lang.String fetch_text(int)>($i2);

        return $r2;
    }

    protected abstract void set_text(java.lang.String);

    protected abstract void set_nil();

    protected abstract java.lang.String compute_text(org.apache.xmlbeans.impl.values.NamespaceManager);

    public float getFloatValue()
    {
        java.math.BigDecimal $r1;
        float $f0;
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        $r1 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: java.math.BigDecimal getBigDecimalValue()>();

        if $r1 != null goto label1;

        $f0 = 0.0F;

        goto label2;

     label1:
        $f0 = virtualinvoke $r1.<java.math.BigDecimal: float floatValue()>();

     label2:
        return $f0;
    }

    public double getDoubleValue()
    {
        java.math.BigDecimal $r1;
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;
        double $d0;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        $r1 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: java.math.BigDecimal getBigDecimalValue()>();

        if $r1 != null goto label1;

        $d0 = 0.0;

        goto label2;

     label1:
        $d0 = virtualinvoke $r1.<java.math.BigDecimal: double doubleValue()>();

     label2:
        return $d0;
    }

    public java.math.BigDecimal getBigDecimalValue()
    {
        java.lang.Object[] $r1;
        org.apache.xmlbeans.impl.values.XmlValueNotSupportedException $r0;
        org.apache.xmlbeans.impl.values.XmlObjectBase r2;
        java.lang.String $r3;

        r2 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        $r0 = new org.apache.xmlbeans.impl.values.XmlValueNotSupportedException;

        $r1 = newarray (java.lang.Object)[2];

        $r3 = specialinvoke r2.<org.apache.xmlbeans.impl.values.XmlObjectBase: java.lang.String getPrimitiveTypeName()>();

        $r1[0] = $r3;

        $r1[1] = "numeric";

        specialinvoke $r0.<org.apache.xmlbeans.impl.values.XmlValueNotSupportedException: void <init>(java.lang.String,java.lang.Object[])>("exception.value.not.supported.s2j", $r1);

        throw $r0;
    }

    public java.math.BigInteger getBigIntegerValue()
    {
        java.math.BigDecimal $r1;
        java.math.BigInteger $r2;
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        $r1 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: java.math.BigDecimal bigDecimalValue()>();

        if $r1 != null goto label1;

        $r2 = null;

        goto label2;

     label1:
        $r2 = virtualinvoke $r1.<java.math.BigDecimal: java.math.BigInteger toBigInteger()>();

     label2:
        return $r2;
    }

    public byte getByteValue()
    {
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;
        long l1;
        org.apache.xmlbeans.impl.values.XmlValueOutOfRangeException $r3, $r4;
        byte $b2, $b3, $b5;
        int $i0, $i4, $i6, $i7;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        $i0 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: int getIntValue()>();

        l1 = (long) $i0;

        $b2 = l1 cmp 127L;

        $i6 = (int) $b2;

        if $i6 <= 0 goto label1;

        $r3 = new org.apache.xmlbeans.impl.values.XmlValueOutOfRangeException;

        specialinvoke $r3.<org.apache.xmlbeans.impl.values.XmlValueOutOfRangeException: void <init>()>();

        throw $r3;

     label1:
        $b3 = l1 cmp -128L;

        $i7 = (int) $b3;

        if $i7 >= 0 goto label2;

        $r4 = new org.apache.xmlbeans.impl.values.XmlValueOutOfRangeException;

        specialinvoke $r4.<org.apache.xmlbeans.impl.values.XmlValueOutOfRangeException: void <init>()>();

        throw $r4;

     label2:
        $i4 = (int) l1;

        $b5 = (byte) $i4;

        return $b5;
    }

    public short getShortValue()
    {
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;
        long l1;
        short $s5;
        org.apache.xmlbeans.impl.values.XmlValueOutOfRangeException $r3, $r4;
        byte $b2, $b3;
        int $i0, $i4, $i6, $i7;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        $i0 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: int getIntValue()>();

        l1 = (long) $i0;

        $b2 = l1 cmp 32767L;

        $i6 = (int) $b2;

        if $i6 <= 0 goto label1;

        $r3 = new org.apache.xmlbeans.impl.values.XmlValueOutOfRangeException;

        specialinvoke $r3.<org.apache.xmlbeans.impl.values.XmlValueOutOfRangeException: void <init>()>();

        throw $r3;

     label1:
        $b3 = l1 cmp -32768L;

        $i7 = (int) $b3;

        if $i7 >= 0 goto label2;

        $r4 = new org.apache.xmlbeans.impl.values.XmlValueOutOfRangeException;

        specialinvoke $r4.<org.apache.xmlbeans.impl.values.XmlValueOutOfRangeException: void <init>()>();

        throw $r4;

     label2:
        $i4 = (int) l1;

        $s5 = (short) $i4;

        return $s5;
    }

    public int getIntValue()
    {
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;
        long $l0;
        org.apache.xmlbeans.impl.values.XmlValueOutOfRangeException $r3, $r4;
        byte $b1, $b2;
        int $i3, $i4, $i5;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        $l0 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: long getLongValue()>();

        $b1 = $l0 cmp 2147483647L;

        $i4 = (int) $b1;

        if $i4 <= 0 goto label1;

        $r3 = new org.apache.xmlbeans.impl.values.XmlValueOutOfRangeException;

        specialinvoke $r3.<org.apache.xmlbeans.impl.values.XmlValueOutOfRangeException: void <init>()>();

        throw $r3;

     label1:
        $b2 = $l0 cmp -2147483648L;

        $i5 = (int) $b2;

        if $i5 >= 0 goto label2;

        $r4 = new org.apache.xmlbeans.impl.values.XmlValueOutOfRangeException;

        specialinvoke $r4.<org.apache.xmlbeans.impl.values.XmlValueOutOfRangeException: void <init>()>();

        throw $r4;

     label2:
        $i3 = (int) $l0;

        return $i3;
    }

    public long getLongValue()
    {
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;
        long $l2;
        org.apache.xmlbeans.impl.values.XmlValueOutOfRangeException $r4, $r5;
        int $i0, $i1;
        java.math.BigInteger $r1, $r2, $r3;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        $r1 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: java.math.BigInteger getBigIntegerValue()>();

        if $r1 != null goto label1;

        return 0L;

     label1:
        $r2 = <org.apache.xmlbeans.impl.values.XmlObjectBase: java.math.BigInteger _max>;

        $i0 = virtualinvoke $r1.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r2);

        if $i0 < 0 goto label2;

        $r5 = new org.apache.xmlbeans.impl.values.XmlValueOutOfRangeException;

        specialinvoke $r5.<org.apache.xmlbeans.impl.values.XmlValueOutOfRangeException: void <init>()>();

        throw $r5;

     label2:
        $r3 = <org.apache.xmlbeans.impl.values.XmlObjectBase: java.math.BigInteger _min>;

        $i1 = virtualinvoke $r1.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r3);

        if $i1 > 0 goto label3;

        $r4 = new org.apache.xmlbeans.impl.values.XmlValueOutOfRangeException;

        specialinvoke $r4.<org.apache.xmlbeans.impl.values.XmlValueOutOfRangeException: void <init>()>();

        throw $r4;

     label3:
        $l2 = virtualinvoke $r1.<java.math.BigInteger: long longValue()>();

        return $l2;
    }

    static final org.apache.xmlbeans.XmlOptions buildInnerPrettyOptions()
    {
        org.apache.xmlbeans.XmlOptions $r0;

        $r0 = new org.apache.xmlbeans.XmlOptions;

        specialinvoke $r0.<org.apache.xmlbeans.XmlOptions: void <init>()>();

        virtualinvoke $r0.<org.apache.xmlbeans.XmlOptions: void put(java.lang.Object)>("SAVE_INNER");

        virtualinvoke $r0.<org.apache.xmlbeans.XmlOptions: void put(java.lang.Object)>("SAVE_PRETTY_PRINT");

        virtualinvoke $r0.<org.apache.xmlbeans.XmlOptions: void put(java.lang.Object)>("SAVE_AGGRESSIVE_NAMESPACES");

        virtualinvoke $r0.<org.apache.xmlbeans.XmlOptions: void put(java.lang.Object)>("SAVE_USE_DEFAULT_NAMESPACE");

        return $r0;
    }

    public final java.lang.String toString()
    {
        java.lang.Throwable $r5;
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;
        org.apache.xmlbeans.XmlOptions $r3;
        java.lang.Object $r1;
        org.apache.xmlbeans.XmlObject $r2;
        java.lang.String $r4;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        $r1 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: java.lang.Object monitor()>();

        entermonitor $r1;

     label1:
        $r2 = specialinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: org.apache.xmlbeans.XmlObject ensureStore()>();

        $r3 = <org.apache.xmlbeans.impl.values.XmlObjectBase: org.apache.xmlbeans.XmlOptions _toStringOptions>;

        $r4 = interfaceinvoke $r2.<org.apache.xmlbeans.XmlObject: java.lang.String xmlText(org.apache.xmlbeans.XmlOptions)>($r3);

        exitmonitor $r1;

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        exitmonitor $r1;

     label4:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public java.lang.String xmlText()
    {
        java.lang.String $r1;
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        $r1 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: java.lang.String xmlText(org.apache.xmlbeans.XmlOptions)>(null);

        return $r1;
    }

    public java.lang.String xmlText(org.apache.xmlbeans.XmlOptions)
    {
        java.lang.Throwable $r5;
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;
        org.apache.xmlbeans.XmlOptions r2, $r3;
        org.apache.xmlbeans.XmlCursor $r1;
        java.lang.String $r4;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        r2 := @parameter0: org.apache.xmlbeans.XmlOptions;

        $r1 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: org.apache.xmlbeans.XmlCursor newCursorForce()>();

     label1:
        $r3 = staticinvoke <org.apache.xmlbeans.impl.values.XmlObjectBase: org.apache.xmlbeans.XmlOptions makeInnerOptions(org.apache.xmlbeans.XmlOptions)>(r2);

        $r4 = interfaceinvoke $r1.<org.apache.xmlbeans.XmlCursor: java.lang.String xmlText(org.apache.xmlbeans.XmlOptions)>($r3);

     label2:
        interfaceinvoke $r1.<org.apache.xmlbeans.XmlCursor: void dispose()>();

        return $r4;

     label3:
        $r5 := @caughtexception;

     label4:
        interfaceinvoke $r1.<org.apache.xmlbeans.XmlCursor: void dispose()>();

        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public org.apache.xmlbeans.StringEnumAbstractBase getEnumValue()
    {
        java.lang.Object[] $r1;
        org.apache.xmlbeans.impl.values.XmlValueNotSupportedException $r0;
        org.apache.xmlbeans.impl.values.XmlObjectBase r2;
        java.lang.String $r3;

        r2 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        $r0 = new org.apache.xmlbeans.impl.values.XmlValueNotSupportedException;

        $r1 = newarray (java.lang.Object)[2];

        $r3 = specialinvoke r2.<org.apache.xmlbeans.impl.values.XmlObjectBase: java.lang.String getPrimitiveTypeName()>();

        $r1[0] = $r3;

        $r1[1] = "enum";

        specialinvoke $r0.<org.apache.xmlbeans.impl.values.XmlValueNotSupportedException: void <init>(java.lang.String,java.lang.Object[])>("exception.value.not.supported.s2j", $r1);

        throw $r0;
    }

    public java.lang.String getStringValue()
    {
        java.lang.Throwable $r6;
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;
        org.apache.xmlbeans.impl.values.TypeStore $r3, $r7;
        int $i0, $i1, $i2, $i3;
        java.lang.Object $r1;
        java.lang.String $r2, $r4, $r5;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        $z0 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: boolean isImmutable()>();

        if $z0 == 0 goto label02;

        $i2 = r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: int _flags>;

        $i3 = $i2 & 64;

        if $i3 == 0 goto label01;

        return null;

     label01:
        $r5 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: java.lang.String compute_text(org.apache.xmlbeans.impl.values.NamespaceManager)>(null);

        return $r5;

     label02:
        $r1 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: java.lang.Object monitor()>();

        entermonitor $r1;

     label03:
        $z1 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: boolean _isComplexContent()>();

        if $z1 == 0 goto label05;

        $r3 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: org.apache.xmlbeans.impl.values.TypeStore get_store()>();

        $r4 = interfaceinvoke $r3.<org.apache.xmlbeans.impl.values.TypeStore: java.lang.String fetch_text(int)>(1);

        exitmonitor $r1;

     label04:
        return $r4;

     label05:
        virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: void check_dated()>();

        $i0 = r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: int _flags>;

        $i1 = $i0 & 64;

        if $i1 == 0 goto label07;

        exitmonitor $r1;

     label06:
        return null;

     label07:
        $z2 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: boolean has_store()>();

        if $z2 == 0 goto label08;

        $r7 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: org.apache.xmlbeans.impl.values.TypeStore get_store()>();

        goto label09;

     label08:
        $r7 = null;

     label09:
        $r2 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: java.lang.String compute_text(org.apache.xmlbeans.impl.values.NamespaceManager)>($r7);

        exitmonitor $r1;

     label10:
        return $r2;

     label11:
        $r6 := @caughtexception;

        exitmonitor $r1;

     label12:
        throw $r6;

        catch java.lang.Throwable from label03 to label04 with label11;
        catch java.lang.Throwable from label05 to label06 with label11;
        catch java.lang.Throwable from label07 to label10 with label11;
        catch java.lang.Throwable from label11 to label12 with label11;
    }

    public java.lang.String stringValue()
    {
        java.lang.String $r1;
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        $r1 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: java.lang.String getStringValue()>();

        return $r1;
    }

    public boolean booleanValue()
    {
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;
        boolean $z0;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        $z0 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: boolean getBooleanValue()>();

        return $z0;
    }

    public byte byteValue()
    {
        byte $b0;
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        $b0 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: byte getByteValue()>();

        return $b0;
    }

    public short shortValue()
    {
        short $s0;
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        $s0 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: short getShortValue()>();

        return $s0;
    }

    public int intValue()
    {
        int $i0;
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        $i0 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: int getIntValue()>();

        return $i0;
    }

    public long longValue()
    {
        long $l0;
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        $l0 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: long getLongValue()>();

        return $l0;
    }

    public java.math.BigInteger bigIntegerValue()
    {
        java.math.BigInteger $r1;
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        $r1 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: java.math.BigInteger getBigIntegerValue()>();

        return $r1;
    }

    public java.math.BigDecimal bigDecimalValue()
    {
        java.math.BigDecimal $r1;
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        $r1 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: java.math.BigDecimal getBigDecimalValue()>();

        return $r1;
    }

    public float floatValue()
    {
        float $f0;
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        $f0 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: float getFloatValue()>();

        return $f0;
    }

    public double doubleValue()
    {
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;
        double $d0;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        $d0 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: double getDoubleValue()>();

        return $d0;
    }

    public byte[] byteArrayValue()
    {
        byte[] $r1;
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        $r1 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: byte[] getByteArrayValue()>();

        return $r1;
    }

    public org.apache.xmlbeans.StringEnumAbstractBase enumValue()
    {
        org.apache.xmlbeans.StringEnumAbstractBase $r1;
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        $r1 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: org.apache.xmlbeans.StringEnumAbstractBase getEnumValue()>();

        return $r1;
    }

    public java.util.Calendar calendarValue()
    {
        java.util.Calendar $r1;
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        $r1 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: java.util.Calendar getCalendarValue()>();

        return $r1;
    }

    public java.util.Date dateValue()
    {
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;
        java.util.Date $r1;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        $r1 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: java.util.Date getDateValue()>();

        return $r1;
    }

    public org.apache.xmlbeans.GDate gDateValue()
    {
        org.apache.xmlbeans.GDate $r1;
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        $r1 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: org.apache.xmlbeans.GDate getGDateValue()>();

        return $r1;
    }

    public org.apache.xmlbeans.GDuration gDurationValue()
    {
        org.apache.xmlbeans.GDuration $r1;
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        $r1 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: org.apache.xmlbeans.GDuration getGDurationValue()>();

        return $r1;
    }

    public javax.xml.namespace.QName qNameValue()
    {
        javax.xml.namespace.QName $r1;
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        $r1 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: javax.xml.namespace.QName getQNameValue()>();

        return $r1;
    }

    public java.util.List xlistValue()
    {
        java.util.List $r1;
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        $r1 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: java.util.List xgetListValue()>();

        return $r1;
    }

    public java.util.List listValue()
    {
        java.util.List $r1;
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        $r1 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: java.util.List getListValue()>();

        return $r1;
    }

    public java.lang.Object objectValue()
    {
        java.lang.Object $r1;
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        $r1 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: java.lang.Object getObjectValue()>();

        return $r1;
    }

    public void set(java.lang.String)
    {
        java.lang.String r1;
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: void setStringValue(java.lang.String)>(r1);

        return;
    }

    public void set(boolean)
    {
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;
        boolean z0;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        z0 := @parameter0: boolean;

        virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: void setBooleanValue(boolean)>(z0);

        return;
    }

    public void set(byte)
    {
        byte b0;
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        b0 := @parameter0: byte;

        virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: void setByteValue(byte)>(b0);

        return;
    }

    public void set(short)
    {
        short s0;
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        s0 := @parameter0: short;

        virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: void setShortValue(short)>(s0);

        return;
    }

    public void set(int)
    {
        int i0;
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        i0 := @parameter0: int;

        virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: void setIntValue(int)>(i0);

        return;
    }

    public void set(long)
    {
        long l0;
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        l0 := @parameter0: long;

        virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: void setLongValue(long)>(l0);

        return;
    }

    public void set(java.math.BigInteger)
    {
        java.math.BigInteger r1;
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        r1 := @parameter0: java.math.BigInteger;

        virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: void setBigIntegerValue(java.math.BigInteger)>(r1);

        return;
    }

    public void set(java.math.BigDecimal)
    {
        java.math.BigDecimal r1;
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        r1 := @parameter0: java.math.BigDecimal;

        virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: void setBigDecimalValue(java.math.BigDecimal)>(r1);

        return;
    }

    public void set(float)
    {
        float f0;
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        f0 := @parameter0: float;

        virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: void setFloatValue(float)>(f0);

        return;
    }

    public void set(double)
    {
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;
        double d0;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        d0 := @parameter0: double;

        virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: void setDoubleValue(double)>(d0);

        return;
    }

    public void set(byte[])
    {
        byte[] r1;
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        r1 := @parameter0: byte[];

        virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: void setByteArrayValue(byte[])>(r1);

        return;
    }

    public void set(org.apache.xmlbeans.StringEnumAbstractBase)
    {
        org.apache.xmlbeans.StringEnumAbstractBase r1;
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        r1 := @parameter0: org.apache.xmlbeans.StringEnumAbstractBase;

        virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: void setEnumValue(org.apache.xmlbeans.StringEnumAbstractBase)>(r1);

        return;
    }

    public void set(java.util.Calendar)
    {
        java.util.Calendar r1;
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        r1 := @parameter0: java.util.Calendar;

        virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: void setCalendarValue(java.util.Calendar)>(r1);

        return;
    }

    public void set(java.util.Date)
    {
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;
        java.util.Date r1;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        r1 := @parameter0: java.util.Date;

        virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: void setDateValue(java.util.Date)>(r1);

        return;
    }

    public void set(org.apache.xmlbeans.GDateSpecification)
    {
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;
        org.apache.xmlbeans.GDateSpecification r1;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        r1 := @parameter0: org.apache.xmlbeans.GDateSpecification;

        virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: void setGDateValue(org.apache.xmlbeans.GDateSpecification)>(r1);

        return;
    }

    public void set(org.apache.xmlbeans.GDurationSpecification)
    {
        org.apache.xmlbeans.GDurationSpecification r1;
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        r1 := @parameter0: org.apache.xmlbeans.GDurationSpecification;

        virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: void setGDurationValue(org.apache.xmlbeans.GDurationSpecification)>(r1);

        return;
    }

    public void set(javax.xml.namespace.QName)
    {
        javax.xml.namespace.QName r1;
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        r1 := @parameter0: javax.xml.namespace.QName;

        virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: void setQNameValue(javax.xml.namespace.QName)>(r1);

        return;
    }

    public void set(java.util.List)
    {
        java.util.List r1;
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        r1 := @parameter0: java.util.List;

        virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: void setListValue(java.util.List)>(r1);

        return;
    }

    public void objectSet(java.lang.Object)
    {
        java.lang.Object r1;
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        r1 := @parameter0: java.lang.Object;

        virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: void setObjectValue(java.lang.Object)>(r1);

        return;
    }

    public byte[] getByteArrayValue()
    {
        java.lang.Object[] $r1;
        org.apache.xmlbeans.impl.values.XmlValueNotSupportedException $r0;
        org.apache.xmlbeans.impl.values.XmlObjectBase r2;
        java.lang.String $r3;

        r2 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        $r0 = new org.apache.xmlbeans.impl.values.XmlValueNotSupportedException;

        $r1 = newarray (java.lang.Object)[2];

        $r3 = specialinvoke r2.<org.apache.xmlbeans.impl.values.XmlObjectBase: java.lang.String getPrimitiveTypeName()>();

        $r1[0] = $r3;

        $r1[1] = "byte[]";

        specialinvoke $r0.<org.apache.xmlbeans.impl.values.XmlValueNotSupportedException: void <init>(java.lang.String,java.lang.Object[])>("exception.value.not.supported.s2j", $r1);

        throw $r0;
    }

    public boolean getBooleanValue()
    {
        java.lang.Object[] $r1;
        org.apache.xmlbeans.impl.values.XmlValueNotSupportedException $r0;
        org.apache.xmlbeans.impl.values.XmlObjectBase r2;
        java.lang.String $r3;

        r2 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        $r0 = new org.apache.xmlbeans.impl.values.XmlValueNotSupportedException;

        $r1 = newarray (java.lang.Object)[2];

        $r3 = specialinvoke r2.<org.apache.xmlbeans.impl.values.XmlObjectBase: java.lang.String getPrimitiveTypeName()>();

        $r1[0] = $r3;

        $r1[1] = "boolean";

        specialinvoke $r0.<org.apache.xmlbeans.impl.values.XmlValueNotSupportedException: void <init>(java.lang.String,java.lang.Object[])>("exception.value.not.supported.s2j", $r1);

        throw $r0;
    }

    public org.apache.xmlbeans.GDate getGDateValue()
    {
        java.lang.Object[] $r1;
        org.apache.xmlbeans.impl.values.XmlValueNotSupportedException $r0;
        org.apache.xmlbeans.impl.values.XmlObjectBase r2;
        java.lang.String $r3;

        r2 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        $r0 = new org.apache.xmlbeans.impl.values.XmlValueNotSupportedException;

        $r1 = newarray (java.lang.Object)[2];

        $r3 = specialinvoke r2.<org.apache.xmlbeans.impl.values.XmlObjectBase: java.lang.String getPrimitiveTypeName()>();

        $r1[0] = $r3;

        $r1[1] = "Date";

        specialinvoke $r0.<org.apache.xmlbeans.impl.values.XmlValueNotSupportedException: void <init>(java.lang.String,java.lang.Object[])>("exception.value.not.supported.s2j", $r1);

        throw $r0;
    }

    public java.util.Date getDateValue()
    {
        java.lang.Object[] $r1;
        org.apache.xmlbeans.impl.values.XmlValueNotSupportedException $r0;
        org.apache.xmlbeans.impl.values.XmlObjectBase r2;
        java.lang.String $r3;

        r2 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        $r0 = new org.apache.xmlbeans.impl.values.XmlValueNotSupportedException;

        $r1 = newarray (java.lang.Object)[2];

        $r3 = specialinvoke r2.<org.apache.xmlbeans.impl.values.XmlObjectBase: java.lang.String getPrimitiveTypeName()>();

        $r1[0] = $r3;

        $r1[1] = "Date";

        specialinvoke $r0.<org.apache.xmlbeans.impl.values.XmlValueNotSupportedException: void <init>(java.lang.String,java.lang.Object[])>("exception.value.not.supported.s2j", $r1);

        throw $r0;
    }

    public java.util.Calendar getCalendarValue()
    {
        java.lang.Object[] $r1;
        org.apache.xmlbeans.impl.values.XmlValueNotSupportedException $r0;
        org.apache.xmlbeans.impl.values.XmlObjectBase r2;
        java.lang.String $r3;

        r2 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        $r0 = new org.apache.xmlbeans.impl.values.XmlValueNotSupportedException;

        $r1 = newarray (java.lang.Object)[2];

        $r3 = specialinvoke r2.<org.apache.xmlbeans.impl.values.XmlObjectBase: java.lang.String getPrimitiveTypeName()>();

        $r1[0] = $r3;

        $r1[1] = "Calendar";

        specialinvoke $r0.<org.apache.xmlbeans.impl.values.XmlValueNotSupportedException: void <init>(java.lang.String,java.lang.Object[])>("exception.value.not.supported.s2j", $r1);

        throw $r0;
    }

    public org.apache.xmlbeans.GDuration getGDurationValue()
    {
        java.lang.Object[] $r1;
        org.apache.xmlbeans.impl.values.XmlValueNotSupportedException $r0;
        org.apache.xmlbeans.impl.values.XmlObjectBase r2;
        java.lang.String $r3;

        r2 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        $r0 = new org.apache.xmlbeans.impl.values.XmlValueNotSupportedException;

        $r1 = newarray (java.lang.Object)[2];

        $r3 = specialinvoke r2.<org.apache.xmlbeans.impl.values.XmlObjectBase: java.lang.String getPrimitiveTypeName()>();

        $r1[0] = $r3;

        $r1[1] = "Duration";

        specialinvoke $r0.<org.apache.xmlbeans.impl.values.XmlValueNotSupportedException: void <init>(java.lang.String,java.lang.Object[])>("exception.value.not.supported.s2j", $r1);

        throw $r0;
    }

    public javax.xml.namespace.QName getQNameValue()
    {
        java.lang.Object[] $r1;
        org.apache.xmlbeans.impl.values.XmlValueNotSupportedException $r0;
        org.apache.xmlbeans.impl.values.XmlObjectBase r2;
        java.lang.String $r3;

        r2 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        $r0 = new org.apache.xmlbeans.impl.values.XmlValueNotSupportedException;

        $r1 = newarray (java.lang.Object)[2];

        $r3 = specialinvoke r2.<org.apache.xmlbeans.impl.values.XmlObjectBase: java.lang.String getPrimitiveTypeName()>();

        $r1[0] = $r3;

        $r1[1] = "QName";

        specialinvoke $r0.<org.apache.xmlbeans.impl.values.XmlValueNotSupportedException: void <init>(java.lang.String,java.lang.Object[])>("exception.value.not.supported.s2j", $r1);

        throw $r0;
    }

    public java.util.List getListValue()
    {
        java.lang.Object[] $r1;
        org.apache.xmlbeans.impl.values.XmlValueNotSupportedException $r0;
        org.apache.xmlbeans.impl.values.XmlObjectBase r2;
        java.lang.String $r3;

        r2 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        $r0 = new org.apache.xmlbeans.impl.values.XmlValueNotSupportedException;

        $r1 = newarray (java.lang.Object)[2];

        $r3 = specialinvoke r2.<org.apache.xmlbeans.impl.values.XmlObjectBase: java.lang.String getPrimitiveTypeName()>();

        $r1[0] = $r3;

        $r1[1] = "List";

        specialinvoke $r0.<org.apache.xmlbeans.impl.values.XmlValueNotSupportedException: void <init>(java.lang.String,java.lang.Object[])>("exception.value.not.supported.s2j", $r1);

        throw $r0;
    }

    public java.util.List xgetListValue()
    {
        java.lang.Object[] $r1;
        org.apache.xmlbeans.impl.values.XmlValueNotSupportedException $r0;
        org.apache.xmlbeans.impl.values.XmlObjectBase r2;
        java.lang.String $r3;

        r2 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        $r0 = new org.apache.xmlbeans.impl.values.XmlValueNotSupportedException;

        $r1 = newarray (java.lang.Object)[2];

        $r3 = specialinvoke r2.<org.apache.xmlbeans.impl.values.XmlObjectBase: java.lang.String getPrimitiveTypeName()>();

        $r1[0] = $r3;

        $r1[1] = "List";

        specialinvoke $r0.<org.apache.xmlbeans.impl.values.XmlValueNotSupportedException: void <init>(java.lang.String,java.lang.Object[])>("exception.value.not.supported.s2j", $r1);

        throw $r0;
    }

    public java.lang.Object getObjectValue()
    {
        java.lang.Object $r1;
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        $r1 = staticinvoke <org.apache.xmlbeans.impl.values.XmlObjectBase: java.lang.Object java_value(org.apache.xmlbeans.XmlObject)>(r0);

        return $r1;
    }

    public final void setBooleanValue(boolean)
    {
        java.lang.Throwable $r2;
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;
        java.lang.Object $r1;
        boolean z0;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        z0 := @parameter0: boolean;

        $r1 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: java.lang.Object monitor()>();

        entermonitor $r1;

     label1:
        specialinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: void set_prepare()>();

        virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: void set_boolean(boolean)>(z0);

        specialinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: void set_commit()>();

        exitmonitor $r1;

     label2:
        goto label5;

     label3:
        $r2 := @caughtexception;

        exitmonitor $r1;

     label4:
        throw $r2;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public final void setByteValue(byte)
    {
        java.lang.Throwable $r2;
        byte b0;
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;
        java.lang.Object $r1;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        b0 := @parameter0: byte;

        $r1 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: java.lang.Object monitor()>();

        entermonitor $r1;

     label1:
        specialinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: void set_prepare()>();

        virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: void set_byte(byte)>(b0);

        specialinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: void set_commit()>();

        exitmonitor $r1;

     label2:
        goto label5;

     label3:
        $r2 := @caughtexception;

        exitmonitor $r1;

     label4:
        throw $r2;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public final void setShortValue(short)
    {
        java.lang.Throwable $r2;
        short s0;
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;
        java.lang.Object $r1;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        s0 := @parameter0: short;

        $r1 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: java.lang.Object monitor()>();

        entermonitor $r1;

     label1:
        specialinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: void set_prepare()>();

        virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: void set_short(short)>(s0);

        specialinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: void set_commit()>();

        exitmonitor $r1;

     label2:
        goto label5;

     label3:
        $r2 := @caughtexception;

        exitmonitor $r1;

     label4:
        throw $r2;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public final void setIntValue(int)
    {
        java.lang.Throwable $r2;
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;
        int i0;
        java.lang.Object $r1;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: java.lang.Object monitor()>();

        entermonitor $r1;

     label1:
        specialinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: void set_prepare()>();

        virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: void set_int(int)>(i0);

        specialinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: void set_commit()>();

        exitmonitor $r1;

     label2:
        goto label5;

     label3:
        $r2 := @caughtexception;

        exitmonitor $r1;

     label4:
        throw $r2;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public final void setLongValue(long)
    {
        java.lang.Throwable $r2;
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;
        java.lang.Object $r1;
        long l0;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        l0 := @parameter0: long;

        $r1 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: java.lang.Object monitor()>();

        entermonitor $r1;

     label1:
        specialinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: void set_prepare()>();

        virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: void set_long(long)>(l0);

        specialinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: void set_commit()>();

        exitmonitor $r1;

     label2:
        goto label5;

     label3:
        $r2 := @caughtexception;

        exitmonitor $r1;

     label4:
        throw $r2;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public final void setFloatValue(float)
    {
        java.lang.Throwable $r2;
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;
        float f0;
        java.lang.Object $r1;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        f0 := @parameter0: float;

        $r1 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: java.lang.Object monitor()>();

        entermonitor $r1;

     label1:
        specialinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: void set_prepare()>();

        virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: void set_float(float)>(f0);

        specialinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: void set_commit()>();

        exitmonitor $r1;

     label2:
        goto label5;

     label3:
        $r2 := @caughtexception;

        exitmonitor $r1;

     label4:
        throw $r2;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public final void setDoubleValue(double)
    {
        java.lang.Throwable $r2;
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;
        java.lang.Object $r1;
        double d0;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        d0 := @parameter0: double;

        $r1 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: java.lang.Object monitor()>();

        entermonitor $r1;

     label1:
        specialinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: void set_prepare()>();

        virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: void set_double(double)>(d0);

        specialinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: void set_commit()>();

        exitmonitor $r1;

     label2:
        goto label5;

     label3:
        $r2 := @caughtexception;

        exitmonitor $r1;

     label4:
        throw $r2;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public final void setByteArrayValue(byte[])
    {
        java.lang.Throwable $r3;
        byte[] r0;
        org.apache.xmlbeans.impl.values.XmlObjectBase r1;
        java.lang.Object $r2;

        r1 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        r0 := @parameter0: byte[];

        if r0 != null goto label1;

        virtualinvoke r1.<org.apache.xmlbeans.impl.values.XmlObjectBase: void setNil()>();

        goto label6;

     label1:
        $r2 = virtualinvoke r1.<org.apache.xmlbeans.impl.values.XmlObjectBase: java.lang.Object monitor()>();

        entermonitor $r2;

     label2:
        specialinvoke r1.<org.apache.xmlbeans.impl.values.XmlObjectBase: void set_prepare()>();

        virtualinvoke r1.<org.apache.xmlbeans.impl.values.XmlObjectBase: void set_ByteArray(byte[])>(r0);

        specialinvoke r1.<org.apache.xmlbeans.impl.values.XmlObjectBase: void set_commit()>();

        exitmonitor $r2;

     label3:
        goto label6;

     label4:
        $r3 := @caughtexception;

        exitmonitor $r2;

     label5:
        throw $r3;

     label6:
        return;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public final void setEnumValue(org.apache.xmlbeans.StringEnumAbstractBase)
    {
        java.lang.Throwable $r3;
        org.apache.xmlbeans.impl.values.XmlObjectBase r1;
        java.lang.Object $r2;
        org.apache.xmlbeans.StringEnumAbstractBase r0;

        r1 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        r0 := @parameter0: org.apache.xmlbeans.StringEnumAbstractBase;

        if r0 != null goto label1;

        virtualinvoke r1.<org.apache.xmlbeans.impl.values.XmlObjectBase: void setNil()>();

        goto label6;

     label1:
        $r2 = virtualinvoke r1.<org.apache.xmlbeans.impl.values.XmlObjectBase: java.lang.Object monitor()>();

        entermonitor $r2;

     label2:
        specialinvoke r1.<org.apache.xmlbeans.impl.values.XmlObjectBase: void set_prepare()>();

        virtualinvoke r1.<org.apache.xmlbeans.impl.values.XmlObjectBase: void set_enum(org.apache.xmlbeans.StringEnumAbstractBase)>(r0);

        specialinvoke r1.<org.apache.xmlbeans.impl.values.XmlObjectBase: void set_commit()>();

        exitmonitor $r2;

     label3:
        goto label6;

     label4:
        $r3 := @caughtexception;

        exitmonitor $r2;

     label5:
        throw $r3;

     label6:
        return;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public final void setBigIntegerValue(java.math.BigInteger)
    {
        java.lang.Throwable $r3;
        org.apache.xmlbeans.impl.values.XmlObjectBase r1;
        java.math.BigInteger r0;
        java.lang.Object $r2;

        r1 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        r0 := @parameter0: java.math.BigInteger;

        if r0 != null goto label1;

        virtualinvoke r1.<org.apache.xmlbeans.impl.values.XmlObjectBase: void setNil()>();

        goto label6;

     label1:
        $r2 = virtualinvoke r1.<org.apache.xmlbeans.impl.values.XmlObjectBase: java.lang.Object monitor()>();

        entermonitor $r2;

     label2:
        specialinvoke r1.<org.apache.xmlbeans.impl.values.XmlObjectBase: void set_prepare()>();

        virtualinvoke r1.<org.apache.xmlbeans.impl.values.XmlObjectBase: void set_BigInteger(java.math.BigInteger)>(r0);

        specialinvoke r1.<org.apache.xmlbeans.impl.values.XmlObjectBase: void set_commit()>();

        exitmonitor $r2;

     label3:
        goto label6;

     label4:
        $r3 := @caughtexception;

        exitmonitor $r2;

     label5:
        throw $r3;

     label6:
        return;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public final void setBigDecimalValue(java.math.BigDecimal)
    {
        java.lang.Throwable $r3;
        java.math.BigDecimal r0;
        org.apache.xmlbeans.impl.values.XmlObjectBase r1;
        java.lang.Object $r2;

        r1 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        r0 := @parameter0: java.math.BigDecimal;

        if r0 != null goto label1;

        virtualinvoke r1.<org.apache.xmlbeans.impl.values.XmlObjectBase: void setNil()>();

        goto label6;

     label1:
        $r2 = virtualinvoke r1.<org.apache.xmlbeans.impl.values.XmlObjectBase: java.lang.Object monitor()>();

        entermonitor $r2;

     label2:
        specialinvoke r1.<org.apache.xmlbeans.impl.values.XmlObjectBase: void set_prepare()>();

        virtualinvoke r1.<org.apache.xmlbeans.impl.values.XmlObjectBase: void set_BigDecimal(java.math.BigDecimal)>(r0);

        specialinvoke r1.<org.apache.xmlbeans.impl.values.XmlObjectBase: void set_commit()>();

        exitmonitor $r2;

     label3:
        goto label6;

     label4:
        $r3 := @caughtexception;

        exitmonitor $r2;

     label5:
        throw $r3;

     label6:
        return;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public final void setCalendarValue(java.util.Calendar)
    {
        java.lang.Throwable $r3;
        java.util.Calendar r0;
        org.apache.xmlbeans.impl.values.XmlObjectBase r1;
        java.lang.Object $r2;

        r1 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        r0 := @parameter0: java.util.Calendar;

        if r0 != null goto label1;

        virtualinvoke r1.<org.apache.xmlbeans.impl.values.XmlObjectBase: void setNil()>();

        goto label6;

     label1:
        $r2 = virtualinvoke r1.<org.apache.xmlbeans.impl.values.XmlObjectBase: java.lang.Object monitor()>();

        entermonitor $r2;

     label2:
        specialinvoke r1.<org.apache.xmlbeans.impl.values.XmlObjectBase: void set_prepare()>();

        virtualinvoke r1.<org.apache.xmlbeans.impl.values.XmlObjectBase: void set_Calendar(java.util.Calendar)>(r0);

        specialinvoke r1.<org.apache.xmlbeans.impl.values.XmlObjectBase: void set_commit()>();

        exitmonitor $r2;

     label3:
        goto label6;

     label4:
        $r3 := @caughtexception;

        exitmonitor $r2;

     label5:
        throw $r3;

     label6:
        return;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public final void setDateValue(java.util.Date)
    {
        java.lang.Throwable $r3;
        org.apache.xmlbeans.impl.values.XmlObjectBase r1;
        java.util.Date r0;
        java.lang.Object $r2;

        r1 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        r0 := @parameter0: java.util.Date;

        if r0 != null goto label1;

        virtualinvoke r1.<org.apache.xmlbeans.impl.values.XmlObjectBase: void setNil()>();

        goto label6;

     label1:
        $r2 = virtualinvoke r1.<org.apache.xmlbeans.impl.values.XmlObjectBase: java.lang.Object monitor()>();

        entermonitor $r2;

     label2:
        specialinvoke r1.<org.apache.xmlbeans.impl.values.XmlObjectBase: void set_prepare()>();

        virtualinvoke r1.<org.apache.xmlbeans.impl.values.XmlObjectBase: void set_Date(java.util.Date)>(r0);

        specialinvoke r1.<org.apache.xmlbeans.impl.values.XmlObjectBase: void set_commit()>();

        exitmonitor $r2;

     label3:
        goto label6;

     label4:
        $r3 := @caughtexception;

        exitmonitor $r2;

     label5:
        throw $r3;

     label6:
        return;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public final void setGDateValue(org.apache.xmlbeans.GDate)
    {
        java.lang.Throwable $r3;
        org.apache.xmlbeans.impl.values.XmlObjectBase r1;
        org.apache.xmlbeans.GDate r0;
        java.lang.Object $r2;

        r1 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        r0 := @parameter0: org.apache.xmlbeans.GDate;

        if r0 != null goto label1;

        virtualinvoke r1.<org.apache.xmlbeans.impl.values.XmlObjectBase: void setNil()>();

        goto label6;

     label1:
        $r2 = virtualinvoke r1.<org.apache.xmlbeans.impl.values.XmlObjectBase: java.lang.Object monitor()>();

        entermonitor $r2;

     label2:
        specialinvoke r1.<org.apache.xmlbeans.impl.values.XmlObjectBase: void set_prepare()>();

        virtualinvoke r1.<org.apache.xmlbeans.impl.values.XmlObjectBase: void set_GDate(org.apache.xmlbeans.GDateSpecification)>(r0);

        specialinvoke r1.<org.apache.xmlbeans.impl.values.XmlObjectBase: void set_commit()>();

        exitmonitor $r2;

     label3:
        goto label6;

     label4:
        $r3 := @caughtexception;

        exitmonitor $r2;

     label5:
        throw $r3;

     label6:
        return;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public final void setGDateValue(org.apache.xmlbeans.GDateSpecification)
    {
        java.lang.Throwable $r3;
        org.apache.xmlbeans.impl.values.XmlObjectBase r1;
        org.apache.xmlbeans.GDateSpecification r0;
        java.lang.Object $r2;

        r1 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        r0 := @parameter0: org.apache.xmlbeans.GDateSpecification;

        if r0 != null goto label1;

        virtualinvoke r1.<org.apache.xmlbeans.impl.values.XmlObjectBase: void setNil()>();

        goto label6;

     label1:
        $r2 = virtualinvoke r1.<org.apache.xmlbeans.impl.values.XmlObjectBase: java.lang.Object monitor()>();

        entermonitor $r2;

     label2:
        specialinvoke r1.<org.apache.xmlbeans.impl.values.XmlObjectBase: void set_prepare()>();

        virtualinvoke r1.<org.apache.xmlbeans.impl.values.XmlObjectBase: void set_GDate(org.apache.xmlbeans.GDateSpecification)>(r0);

        specialinvoke r1.<org.apache.xmlbeans.impl.values.XmlObjectBase: void set_commit()>();

        exitmonitor $r2;

     label3:
        goto label6;

     label4:
        $r3 := @caughtexception;

        exitmonitor $r2;

     label5:
        throw $r3;

     label6:
        return;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public final void setGDurationValue(org.apache.xmlbeans.GDuration)
    {
        java.lang.Throwable $r3;
        org.apache.xmlbeans.GDuration r0;
        org.apache.xmlbeans.impl.values.XmlObjectBase r1;
        java.lang.Object $r2;

        r1 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        r0 := @parameter0: org.apache.xmlbeans.GDuration;

        if r0 != null goto label1;

        virtualinvoke r1.<org.apache.xmlbeans.impl.values.XmlObjectBase: void setNil()>();

        goto label6;

     label1:
        $r2 = virtualinvoke r1.<org.apache.xmlbeans.impl.values.XmlObjectBase: java.lang.Object monitor()>();

        entermonitor $r2;

     label2:
        specialinvoke r1.<org.apache.xmlbeans.impl.values.XmlObjectBase: void set_prepare()>();

        virtualinvoke r1.<org.apache.xmlbeans.impl.values.XmlObjectBase: void set_GDuration(org.apache.xmlbeans.GDurationSpecification)>(r0);

        specialinvoke r1.<org.apache.xmlbeans.impl.values.XmlObjectBase: void set_commit()>();

        exitmonitor $r2;

     label3:
        goto label6;

     label4:
        $r3 := @caughtexception;

        exitmonitor $r2;

     label5:
        throw $r3;

     label6:
        return;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public final void setGDurationValue(org.apache.xmlbeans.GDurationSpecification)
    {
        java.lang.Throwable $r3;
        org.apache.xmlbeans.GDurationSpecification r0;
        org.apache.xmlbeans.impl.values.XmlObjectBase r1;
        java.lang.Object $r2;

        r1 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        r0 := @parameter0: org.apache.xmlbeans.GDurationSpecification;

        if r0 != null goto label1;

        virtualinvoke r1.<org.apache.xmlbeans.impl.values.XmlObjectBase: void setNil()>();

        goto label6;

     label1:
        $r2 = virtualinvoke r1.<org.apache.xmlbeans.impl.values.XmlObjectBase: java.lang.Object monitor()>();

        entermonitor $r2;

     label2:
        specialinvoke r1.<org.apache.xmlbeans.impl.values.XmlObjectBase: void set_prepare()>();

        virtualinvoke r1.<org.apache.xmlbeans.impl.values.XmlObjectBase: void set_GDuration(org.apache.xmlbeans.GDurationSpecification)>(r0);

        specialinvoke r1.<org.apache.xmlbeans.impl.values.XmlObjectBase: void set_commit()>();

        exitmonitor $r2;

     label3:
        goto label6;

     label4:
        $r3 := @caughtexception;

        exitmonitor $r2;

     label5:
        throw $r3;

     label6:
        return;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public final void setQNameValue(javax.xml.namespace.QName)
    {
        java.lang.Throwable $r3;
        org.apache.xmlbeans.impl.values.XmlObjectBase r1;
        java.lang.Object $r2;
        javax.xml.namespace.QName r0;

        r1 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        r0 := @parameter0: javax.xml.namespace.QName;

        if r0 != null goto label1;

        virtualinvoke r1.<org.apache.xmlbeans.impl.values.XmlObjectBase: void setNil()>();

        goto label6;

     label1:
        $r2 = virtualinvoke r1.<org.apache.xmlbeans.impl.values.XmlObjectBase: java.lang.Object monitor()>();

        entermonitor $r2;

     label2:
        specialinvoke r1.<org.apache.xmlbeans.impl.values.XmlObjectBase: void set_prepare()>();

        virtualinvoke r1.<org.apache.xmlbeans.impl.values.XmlObjectBase: void set_QName(javax.xml.namespace.QName)>(r0);

        specialinvoke r1.<org.apache.xmlbeans.impl.values.XmlObjectBase: void set_commit()>();

        exitmonitor $r2;

     label3:
        goto label6;

     label4:
        $r3 := @caughtexception;

        exitmonitor $r2;

     label5:
        throw $r3;

     label6:
        return;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public final void setListValue(java.util.List)
    {
        java.lang.Throwable $r3;
        java.util.List r0;
        org.apache.xmlbeans.impl.values.XmlObjectBase r1;
        java.lang.Object $r2;

        r1 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        r0 := @parameter0: java.util.List;

        if r0 != null goto label1;

        virtualinvoke r1.<org.apache.xmlbeans.impl.values.XmlObjectBase: void setNil()>();

        goto label6;

     label1:
        $r2 = virtualinvoke r1.<org.apache.xmlbeans.impl.values.XmlObjectBase: java.lang.Object monitor()>();

        entermonitor $r2;

     label2:
        specialinvoke r1.<org.apache.xmlbeans.impl.values.XmlObjectBase: void set_prepare()>();

        virtualinvoke r1.<org.apache.xmlbeans.impl.values.XmlObjectBase: void set_list(java.util.List)>(r0);

        specialinvoke r1.<org.apache.xmlbeans.impl.values.XmlObjectBase: void set_commit()>();

        exitmonitor $r2;

     label3:
        goto label6;

     label4:
        $r3 := @caughtexception;

        exitmonitor $r2;

     label5:
        throw $r3;

     label6:
        return;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public final void setStringValue(java.lang.String)
    {
        java.lang.Throwable $r3;
        org.apache.xmlbeans.impl.values.XmlObjectBase r1;
        java.lang.Object $r2;
        java.lang.String r0;

        r1 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        virtualinvoke r1.<org.apache.xmlbeans.impl.values.XmlObjectBase: void setNil()>();

        goto label6;

     label1:
        $r2 = virtualinvoke r1.<org.apache.xmlbeans.impl.values.XmlObjectBase: java.lang.Object monitor()>();

        entermonitor $r2;

     label2:
        specialinvoke r1.<org.apache.xmlbeans.impl.values.XmlObjectBase: void set_prepare()>();

        virtualinvoke r1.<org.apache.xmlbeans.impl.values.XmlObjectBase: void set_String(java.lang.String)>(r0);

        exitmonitor $r2;

     label3:
        goto label6;

     label4:
        $r3 := @caughtexception;

        exitmonitor $r2;

     label5:
        throw $r3;

     label6:
        return;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public void setObjectValue(java.lang.Object)
    {
        byte[] $r9, $r10;
        java.lang.Float $r18;
        org.apache.xmlbeans.impl.values.XmlObjectBase r8;
        java.util.Date $r15;
        java.lang.Integer $r21;
        java.math.BigDecimal $r24;
        byte $b3;
        java.lang.Long $r20;
        java.lang.Short $r22;
        java.math.BigInteger $r25;
        java.lang.Byte $r23;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19;
        java.util.List $r11;
        float $f0;
        javax.xml.namespace.QName $r12;
        java.lang.Double $r17;
        org.apache.xmlbeans.GDateSpecification $r14;
        long $l0;
        short $s2;
        org.apache.xmlbeans.GDurationSpecification $r13;
        java.util.Calendar $r16;
        org.apache.xmlbeans.impl.values.XmlValueNotSupportedException $r1;
        java.lang.StringBuffer $r2, $r3, $r6;
        int $i1;
        java.lang.Boolean $r19;
        java.lang.String $r5, $r7, $r27;
        org.apache.xmlbeans.XmlObject $r28;
        double $d0;
        java.lang.Object r0;
        java.lang.Class $r4;
        org.apache.xmlbeans.StringEnumAbstractBase $r26;

        r8 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        r0 := @parameter0: java.lang.Object;

        if r0 != null goto label01;

        virtualinvoke r8.<org.apache.xmlbeans.impl.values.XmlObjectBase: void setNil()>();

        return;

     label01:
        $z0 = r0 instanceof org.apache.xmlbeans.XmlObject;

        if $z0 == 0 goto label02;

        $r28 = (org.apache.xmlbeans.XmlObject) r0;

        virtualinvoke r8.<org.apache.xmlbeans.impl.values.XmlObjectBase: org.apache.xmlbeans.XmlObject set(org.apache.xmlbeans.XmlObject)>($r28);

        goto label21;

     label02:
        $z1 = r0 instanceof java.lang.String;

        if $z1 == 0 goto label03;

        $r27 = (java.lang.String) r0;

        virtualinvoke r8.<org.apache.xmlbeans.impl.values.XmlObjectBase: void setStringValue(java.lang.String)>($r27);

        goto label21;

     label03:
        $z2 = r0 instanceof org.apache.xmlbeans.StringEnumAbstractBase;

        if $z2 == 0 goto label04;

        $r26 = (org.apache.xmlbeans.StringEnumAbstractBase) r0;

        virtualinvoke r8.<org.apache.xmlbeans.impl.values.XmlObjectBase: void setEnumValue(org.apache.xmlbeans.StringEnumAbstractBase)>($r26);

        goto label21;

     label04:
        $z3 = r0 instanceof java.math.BigInteger;

        if $z3 == 0 goto label05;

        $r25 = (java.math.BigInteger) r0;

        virtualinvoke r8.<org.apache.xmlbeans.impl.values.XmlObjectBase: void setBigIntegerValue(java.math.BigInteger)>($r25);

        goto label21;

     label05:
        $z4 = r0 instanceof java.math.BigDecimal;

        if $z4 == 0 goto label06;

        $r24 = (java.math.BigDecimal) r0;

        virtualinvoke r8.<org.apache.xmlbeans.impl.values.XmlObjectBase: void setBigDecimalValue(java.math.BigDecimal)>($r24);

        goto label21;

     label06:
        $z5 = r0 instanceof java.lang.Byte;

        if $z5 == 0 goto label07;

        $r23 = (java.lang.Byte) r0;

        $b3 = virtualinvoke $r23.<java.lang.Byte: byte byteValue()>();

        virtualinvoke r8.<org.apache.xmlbeans.impl.values.XmlObjectBase: void setByteValue(byte)>($b3);

        goto label21;

     label07:
        $z6 = r0 instanceof java.lang.Short;

        if $z6 == 0 goto label08;

        $r22 = (java.lang.Short) r0;

        $s2 = virtualinvoke $r22.<java.lang.Short: short shortValue()>();

        virtualinvoke r8.<org.apache.xmlbeans.impl.values.XmlObjectBase: void setShortValue(short)>($s2);

        goto label21;

     label08:
        $z7 = r0 instanceof java.lang.Integer;

        if $z7 == 0 goto label09;

        $r21 = (java.lang.Integer) r0;

        $i1 = virtualinvoke $r21.<java.lang.Integer: int intValue()>();

        virtualinvoke r8.<org.apache.xmlbeans.impl.values.XmlObjectBase: void setIntValue(int)>($i1);

        goto label21;

     label09:
        $z8 = r0 instanceof java.lang.Long;

        if $z8 == 0 goto label10;

        $r20 = (java.lang.Long) r0;

        $l0 = virtualinvoke $r20.<java.lang.Long: long longValue()>();

        virtualinvoke r8.<org.apache.xmlbeans.impl.values.XmlObjectBase: void setLongValue(long)>($l0);

        goto label21;

     label10:
        $z9 = r0 instanceof java.lang.Boolean;

        if $z9 == 0 goto label11;

        $r19 = (java.lang.Boolean) r0;

        $z19 = virtualinvoke $r19.<java.lang.Boolean: boolean booleanValue()>();

        virtualinvoke r8.<org.apache.xmlbeans.impl.values.XmlObjectBase: void setBooleanValue(boolean)>($z19);

        goto label21;

     label11:
        $z10 = r0 instanceof java.lang.Float;

        if $z10 == 0 goto label12;

        $r18 = (java.lang.Float) r0;

        $f0 = virtualinvoke $r18.<java.lang.Float: float floatValue()>();

        virtualinvoke r8.<org.apache.xmlbeans.impl.values.XmlObjectBase: void setFloatValue(float)>($f0);

        goto label21;

     label12:
        $z11 = r0 instanceof java.lang.Double;

        if $z11 == 0 goto label13;

        $r17 = (java.lang.Double) r0;

        $d0 = virtualinvoke $r17.<java.lang.Double: double doubleValue()>();

        virtualinvoke r8.<org.apache.xmlbeans.impl.values.XmlObjectBase: void setDoubleValue(double)>($d0);

        goto label21;

     label13:
        $z12 = r0 instanceof java.util.Calendar;

        if $z12 == 0 goto label14;

        $r16 = (java.util.Calendar) r0;

        virtualinvoke r8.<org.apache.xmlbeans.impl.values.XmlObjectBase: void setCalendarValue(java.util.Calendar)>($r16);

        goto label21;

     label14:
        $z13 = r0 instanceof java.util.Date;

        if $z13 == 0 goto label15;

        $r15 = (java.util.Date) r0;

        virtualinvoke r8.<org.apache.xmlbeans.impl.values.XmlObjectBase: void setDateValue(java.util.Date)>($r15);

        goto label21;

     label15:
        $z14 = r0 instanceof org.apache.xmlbeans.GDateSpecification;

        if $z14 == 0 goto label16;

        $r14 = (org.apache.xmlbeans.GDateSpecification) r0;

        virtualinvoke r8.<org.apache.xmlbeans.impl.values.XmlObjectBase: void setGDateValue(org.apache.xmlbeans.GDateSpecification)>($r14);

        goto label21;

     label16:
        $z15 = r0 instanceof org.apache.xmlbeans.GDurationSpecification;

        if $z15 == 0 goto label17;

        $r13 = (org.apache.xmlbeans.GDurationSpecification) r0;

        virtualinvoke r8.<org.apache.xmlbeans.impl.values.XmlObjectBase: void setGDurationValue(org.apache.xmlbeans.GDurationSpecification)>($r13);

        goto label21;

     label17:
        $z16 = r0 instanceof javax.xml.namespace.QName;

        if $z16 == 0 goto label18;

        $r12 = (javax.xml.namespace.QName) r0;

        virtualinvoke r8.<org.apache.xmlbeans.impl.values.XmlObjectBase: void setQNameValue(javax.xml.namespace.QName)>($r12);

        goto label21;

     label18:
        $z17 = r0 instanceof java.util.List;

        if $z17 == 0 goto label19;

        $r11 = (java.util.List) r0;

        virtualinvoke r8.<org.apache.xmlbeans.impl.values.XmlObjectBase: void setListValue(java.util.List)>($r11);

        goto label21;

     label19:
        $z18 = r0 instanceof byte[];

        if $z18 == 0 goto label20;

        $r9 = (byte[]) r0;

        $r10 = (byte[]) $r9;

        virtualinvoke r8.<org.apache.xmlbeans.impl.values.XmlObjectBase: void setByteArrayValue(byte[])>($r10);

        goto label21;

     label20:
        $r1 = new org.apache.xmlbeans.impl.values.XmlValueNotSupportedException;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Can\'t set union object of class : ");

        $r4 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.String getName()>();

        $r6 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r1.<org.apache.xmlbeans.impl.values.XmlValueNotSupportedException: void <init>(java.lang.String)>($r7);

        throw $r1;

     label21:
        return;
    }

    public final void set_newValue(org.apache.xmlbeans.XmlObject)
    {
        byte[] $r29, $r31;
        java.math.BigDecimal $r14;
        byte $b6;
        java.math.BigInteger $r16;
        org.apache.xmlbeans.SchemaType $r5, $r7;
        javax.xml.namespace.QName $r26;
        java.lang.Throwable $r40, $r41, $r42;
        long $l3;
        java.lang.AssertionError $r21, $r34, $r35, $r39;
        short $s5;
        java.lang.String $r12, $r24, $r27;
        org.apache.xmlbeans.GDate $r9;
        java.lang.IllegalStateException $r2;
        org.apache.xmlbeans.impl.values.XmlObjectBase r1;
        org.apache.xmlbeans.GDuration $r11;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, z8, z9, z10;
        org.apache.xmlbeans.XmlAnySimpleType r3;
        org.apache.xmlbeans.impl.values.NamespaceContext $r33;
        java.util.List $r38;
        float $f0;
        int $i0, $i1, $i2, $i4, $i7;
        org.apache.xmlbeans.XmlObject r0;
        org.apache.xmlbeans.SimpleValue $r4, $r8, $r10, $r13, $r15, $r17, $r18, $r19, $r20, $r22, $r23, $r25, $r28, $r30, $r32, $r37;
        double $d0;
        java.lang.Object $r6, $r36;

        r1 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        r0 := @parameter0: org.apache.xmlbeans.XmlObject;

        if r0 == null goto label01;

        $z0 = interfaceinvoke r0.<org.apache.xmlbeans.XmlObject: boolean isNil()>();

        if $z0 == 0 goto label02;

     label01:
        virtualinvoke r1.<org.apache.xmlbeans.impl.values.XmlObjectBase: void setNil()>();

        return;

     label02:
        $z1 = r0 instanceof org.apache.xmlbeans.XmlAnySimpleType;

        if $z1 == 0 goto label44;

        r3 = (org.apache.xmlbeans.XmlAnySimpleType) r0;

        $r4 = (org.apache.xmlbeans.SimpleValue) r3;

        $r5 = interfaceinvoke $r4.<org.apache.xmlbeans.SimpleValue: org.apache.xmlbeans.SchemaType instanceType()>();

        $z2 = <org.apache.xmlbeans.impl.values.XmlObjectBase: boolean $assertionsDisabled>;

        if $z2 != 0 goto label03;

        if $r5 != null goto label03;

        $r39 = new java.lang.AssertionError;

        specialinvoke $r39.<java.lang.AssertionError: void <init>(java.lang.Object)>("Nil case should have been handled already");

        throw $r39;

     label03:
        $i0 = interfaceinvoke $r5.<org.apache.xmlbeans.SchemaType: int getSimpleVariety()>();

        if $i0 != 3 goto label08;

        $r36 = virtualinvoke r1.<org.apache.xmlbeans.impl.values.XmlObjectBase: java.lang.Object monitor()>();

        entermonitor $r36;

     label04:
        specialinvoke r1.<org.apache.xmlbeans.impl.values.XmlObjectBase: void set_prepare()>();

        $r37 = (org.apache.xmlbeans.SimpleValue) r3;

        $r38 = interfaceinvoke $r37.<org.apache.xmlbeans.SimpleValue: java.util.List xgetListValue()>();

        virtualinvoke r1.<org.apache.xmlbeans.impl.values.XmlObjectBase: void set_list(java.util.List)>($r38);

        specialinvoke r1.<org.apache.xmlbeans.impl.values.XmlObjectBase: void set_commit()>();

        exitmonitor $r36;

     label05:
        return;

     label06:
        $r42 := @caughtexception;

        exitmonitor $r36;

     label07:
        throw $r42;

     label08:
        $r6 = virtualinvoke r1.<org.apache.xmlbeans.impl.values.XmlObjectBase: java.lang.Object monitor()>();

        entermonitor $r6;

     label09:
        $z3 = <org.apache.xmlbeans.impl.values.XmlObjectBase: boolean $assertionsDisabled>;

        if $z3 != 0 goto label10;

        $i7 = interfaceinvoke $r5.<org.apache.xmlbeans.SchemaType: int getSimpleVariety()>();

        if $i7 == 1 goto label10;

        $r35 = new java.lang.AssertionError;

        specialinvoke $r35.<java.lang.AssertionError: void <init>()>();

        throw $r35;

     label10:
        $r7 = interfaceinvoke $r5.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.SchemaType getPrimitiveType()>();

        $i1 = interfaceinvoke $r7.<org.apache.xmlbeans.SchemaType: int getBuiltinTypeCode()>();

        tableswitch($i1)
        {
            case 2: goto label33;
            case 3: goto label14;
            case 4: goto label15;
            case 5: goto label16;
            case 6: goto label28;
            case 7: goto label17;
            case 8: goto label29;
            case 9: goto label18;
            case 10: goto label19;
            case 11: goto label20;
            case 12: goto label32;
            case 13: goto label30;
            case 14: goto label31;
            case 15: goto label31;
            case 16: goto label31;
            case 17: goto label31;
            case 18: goto label31;
            case 19: goto label31;
            case 20: goto label31;
            case 21: goto label31;
            default: goto label11;
        };

     label11:
        $z7 = <org.apache.xmlbeans.impl.values.XmlObjectBase: boolean $assertionsDisabled>;

        if $z7 != 0 goto label12;

        $r34 = new java.lang.AssertionError;

        specialinvoke $r34.<java.lang.AssertionError: void <init>(java.lang.Object)>("encountered nonprimitive type.");

        throw $r34;

     label12:
        exitmonitor $r6;

     label13:
        goto label44;

     label14:
        $r32 = (org.apache.xmlbeans.SimpleValue) r3;

        $z5 = interfaceinvoke $r32.<org.apache.xmlbeans.SimpleValue: boolean getBooleanValue()>();

        specialinvoke r1.<org.apache.xmlbeans.impl.values.XmlObjectBase: void set_prepare()>();

        virtualinvoke r1.<org.apache.xmlbeans.impl.values.XmlObjectBase: void set_boolean(boolean)>($z5);

        goto label40;

     label15:
        $r30 = (org.apache.xmlbeans.SimpleValue) r3;

        $r31 = interfaceinvoke $r30.<org.apache.xmlbeans.SimpleValue: byte[] getByteArrayValue()>();

        specialinvoke r1.<org.apache.xmlbeans.impl.values.XmlObjectBase: void set_prepare()>();

        virtualinvoke r1.<org.apache.xmlbeans.impl.values.XmlObjectBase: void set_b64(byte[])>($r31);

        goto label40;

     label16:
        $r28 = (org.apache.xmlbeans.SimpleValue) r3;

        $r29 = interfaceinvoke $r28.<org.apache.xmlbeans.SimpleValue: byte[] getByteArrayValue()>();

        specialinvoke r1.<org.apache.xmlbeans.impl.values.XmlObjectBase: void set_prepare()>();

        virtualinvoke r1.<org.apache.xmlbeans.impl.values.XmlObjectBase: void set_hex(byte[])>($r29);

        goto label40;

     label17:
        $r25 = (org.apache.xmlbeans.SimpleValue) r3;

        $r26 = interfaceinvoke $r25.<org.apache.xmlbeans.SimpleValue: javax.xml.namespace.QName getQNameValue()>();

        specialinvoke r1.<org.apache.xmlbeans.impl.values.XmlObjectBase: void set_prepare()>();

        virtualinvoke r1.<org.apache.xmlbeans.impl.values.XmlObjectBase: void set_QName(javax.xml.namespace.QName)>($r26);

        goto label40;

     label18:
        $r23 = (org.apache.xmlbeans.SimpleValue) r3;

        $f0 = interfaceinvoke $r23.<org.apache.xmlbeans.SimpleValue: float getFloatValue()>();

        specialinvoke r1.<org.apache.xmlbeans.impl.values.XmlObjectBase: void set_prepare()>();

        virtualinvoke r1.<org.apache.xmlbeans.impl.values.XmlObjectBase: void set_float(float)>($f0);

        goto label40;

     label19:
        $r22 = (org.apache.xmlbeans.SimpleValue) r3;

        $d0 = interfaceinvoke $r22.<org.apache.xmlbeans.SimpleValue: double getDoubleValue()>();

        specialinvoke r1.<org.apache.xmlbeans.impl.values.XmlObjectBase: void set_prepare()>();

        virtualinvoke r1.<org.apache.xmlbeans.impl.values.XmlObjectBase: void set_double(double)>($d0);

        goto label40;

     label20:
        $i2 = interfaceinvoke $r5.<org.apache.xmlbeans.SchemaType: int getDecimalSize()>();

        lookupswitch($i2)
        {
            case 8: goto label21;
            case 16: goto label22;
            case 32: goto label23;
            case 64: goto label24;
            case 1000000: goto label25;
            case 1000001: goto label27;
            default: goto label26;
        };

     label21:
        $r20 = (org.apache.xmlbeans.SimpleValue) r3;

        $b6 = interfaceinvoke $r20.<org.apache.xmlbeans.SimpleValue: byte getByteValue()>();

        specialinvoke r1.<org.apache.xmlbeans.impl.values.XmlObjectBase: void set_prepare()>();

        virtualinvoke r1.<org.apache.xmlbeans.impl.values.XmlObjectBase: void set_byte(byte)>($b6);

        goto label40;

     label22:
        $r19 = (org.apache.xmlbeans.SimpleValue) r3;

        $s5 = interfaceinvoke $r19.<org.apache.xmlbeans.SimpleValue: short getShortValue()>();

        specialinvoke r1.<org.apache.xmlbeans.impl.values.XmlObjectBase: void set_prepare()>();

        virtualinvoke r1.<org.apache.xmlbeans.impl.values.XmlObjectBase: void set_short(short)>($s5);

        goto label40;

     label23:
        $r18 = (org.apache.xmlbeans.SimpleValue) r3;

        $i4 = interfaceinvoke $r18.<org.apache.xmlbeans.SimpleValue: int getIntValue()>();

        specialinvoke r1.<org.apache.xmlbeans.impl.values.XmlObjectBase: void set_prepare()>();

        virtualinvoke r1.<org.apache.xmlbeans.impl.values.XmlObjectBase: void set_int(int)>($i4);

        goto label40;

     label24:
        $r17 = (org.apache.xmlbeans.SimpleValue) r3;

        $l3 = interfaceinvoke $r17.<org.apache.xmlbeans.SimpleValue: long getLongValue()>();

        specialinvoke r1.<org.apache.xmlbeans.impl.values.XmlObjectBase: void set_prepare()>();

        virtualinvoke r1.<org.apache.xmlbeans.impl.values.XmlObjectBase: void set_long(long)>($l3);

        goto label40;

     label25:
        $r15 = (org.apache.xmlbeans.SimpleValue) r3;

        $r16 = interfaceinvoke $r15.<org.apache.xmlbeans.SimpleValue: java.math.BigInteger getBigIntegerValue()>();

        specialinvoke r1.<org.apache.xmlbeans.impl.values.XmlObjectBase: void set_prepare()>();

        virtualinvoke r1.<org.apache.xmlbeans.impl.values.XmlObjectBase: void set_BigInteger(java.math.BigInteger)>($r16);

        goto label40;

     label26:
        $z4 = <org.apache.xmlbeans.impl.values.XmlObjectBase: boolean $assertionsDisabled>;

        if $z4 != 0 goto label27;

        $r21 = new java.lang.AssertionError;

        specialinvoke $r21.<java.lang.AssertionError: void <init>(java.lang.Object)>("invalid numeric bit count");

        throw $r21;

     label27:
        $r13 = (org.apache.xmlbeans.SimpleValue) r3;

        $r14 = interfaceinvoke $r13.<org.apache.xmlbeans.SimpleValue: java.math.BigDecimal getBigDecimalValue()>();

        specialinvoke r1.<org.apache.xmlbeans.impl.values.XmlObjectBase: void set_prepare()>();

        virtualinvoke r1.<org.apache.xmlbeans.impl.values.XmlObjectBase: void set_BigDecimal(java.math.BigDecimal)>($r14);

        goto label40;

     label28:
        $r27 = interfaceinvoke r3.<org.apache.xmlbeans.XmlAnySimpleType: java.lang.String getStringValue()>();

        specialinvoke r1.<org.apache.xmlbeans.impl.values.XmlObjectBase: void set_prepare()>();

        virtualinvoke r1.<org.apache.xmlbeans.impl.values.XmlObjectBase: void set_text(java.lang.String)>($r27);

        goto label40;

     label29:
        $r24 = interfaceinvoke r3.<org.apache.xmlbeans.XmlAnySimpleType: java.lang.String getStringValue()>();

        specialinvoke r1.<org.apache.xmlbeans.impl.values.XmlObjectBase: void set_prepare()>();

        virtualinvoke r1.<org.apache.xmlbeans.impl.values.XmlObjectBase: void set_notation(java.lang.String)>($r24);

        goto label40;

     label30:
        $r10 = (org.apache.xmlbeans.SimpleValue) r3;

        $r11 = interfaceinvoke $r10.<org.apache.xmlbeans.SimpleValue: org.apache.xmlbeans.GDuration getGDurationValue()>();

        specialinvoke r1.<org.apache.xmlbeans.impl.values.XmlObjectBase: void set_prepare()>();

        virtualinvoke r1.<org.apache.xmlbeans.impl.values.XmlObjectBase: void set_GDuration(org.apache.xmlbeans.GDurationSpecification)>($r11);

        goto label40;

     label31:
        $r8 = (org.apache.xmlbeans.SimpleValue) r3;

        $r9 = interfaceinvoke $r8.<org.apache.xmlbeans.SimpleValue: org.apache.xmlbeans.GDate getGDateValue()>();

        specialinvoke r1.<org.apache.xmlbeans.impl.values.XmlObjectBase: void set_prepare()>();

        virtualinvoke r1.<org.apache.xmlbeans.impl.values.XmlObjectBase: void set_GDate(org.apache.xmlbeans.GDateSpecification)>($r9);

        goto label40;

     label32:
        $r12 = interfaceinvoke r3.<org.apache.xmlbeans.XmlAnySimpleType: java.lang.String getStringValue()>();

        specialinvoke r1.<org.apache.xmlbeans.impl.values.XmlObjectBase: void set_prepare()>();

        virtualinvoke r1.<org.apache.xmlbeans.impl.values.XmlObjectBase: void set_String(java.lang.String)>($r12);

        goto label40;

     label33:
        z8 = 0;

        z10 = 0;

        z9 = 0;

        $z6 = interfaceinvoke r3.<org.apache.xmlbeans.XmlAnySimpleType: boolean isImmutable()>();

        if $z6 != 0 goto label34;

        z8 = 1;

        z10 = 1;

        z9 = 1;

        $r33 = new org.apache.xmlbeans.impl.values.NamespaceContext;

        specialinvoke $r33.<org.apache.xmlbeans.impl.values.NamespaceContext: void <init>(org.apache.xmlbeans.XmlObject)>(r3);

        staticinvoke <org.apache.xmlbeans.impl.values.NamespaceContext: void push(org.apache.xmlbeans.impl.values.NamespaceContext)>($r33);

     label34:
        specialinvoke r1.<org.apache.xmlbeans.impl.values.XmlObjectBase: void set_prepare()>();

        virtualinvoke r1.<org.apache.xmlbeans.impl.values.XmlObjectBase: void set_xmlanysimple(org.apache.xmlbeans.XmlAnySimpleType)>(r3);

     label35:
        if z9 == 0 goto label39;

        staticinvoke <org.apache.xmlbeans.impl.values.NamespaceContext: void pop()>();

        goto label39;

     label36:
        $r41 := @caughtexception;

     label37:
        if z10 == 0 goto label38;

        staticinvoke <org.apache.xmlbeans.impl.values.NamespaceContext: void pop()>();

     label38:
        throw $r41;

     label39:
        goto label40;

     label40:
        specialinvoke r1.<org.apache.xmlbeans.impl.values.XmlObjectBase: void set_commit()>();

        exitmonitor $r6;

     label41:
        return;

     label42:
        $r40 := @caughtexception;

        exitmonitor $r6;

     label43:
        throw $r40;

     label44:
        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Complex type unexpected");

        throw $r2;

        catch java.lang.Throwable from label04 to label05 with label06;
        catch java.lang.Throwable from label06 to label07 with label06;
        catch java.lang.Throwable from label34 to label35 with label36;
        catch java.lang.Throwable from label36 to label37 with label36;
        catch java.lang.Throwable from label09 to label13 with label42;
        catch java.lang.Throwable from label14 to label41 with label42;
        catch java.lang.Throwable from label42 to label43 with label42;
    }

    private org.apache.xmlbeans.impl.values.TypeStoreUser setterHelper(org.apache.xmlbeans.impl.values.XmlObjectBase)
    {
        org.apache.xmlbeans.impl.values.XmlObjectBase r0, r1;
        org.apache.xmlbeans.impl.values.TypeStore $r2, $r3, $r5;
        org.apache.xmlbeans.impl.values.TypeStoreUser $r4, $r7;
        org.apache.xmlbeans.SchemaType $r6;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        r1 := @parameter0: org.apache.xmlbeans.impl.values.XmlObjectBase;

        virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: void check_orphaned()>();

        virtualinvoke r1.<org.apache.xmlbeans.impl.values.XmlObjectBase: void check_orphaned()>();

        $r2 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: org.apache.xmlbeans.impl.values.TypeStore get_store()>();

        $r3 = virtualinvoke r1.<org.apache.xmlbeans.impl.values.XmlObjectBase: org.apache.xmlbeans.impl.values.TypeStore get_store()>();

        $r4 = interfaceinvoke $r2.<org.apache.xmlbeans.impl.values.TypeStore: org.apache.xmlbeans.impl.values.TypeStoreUser copy_contents_from(org.apache.xmlbeans.impl.values.TypeStore)>($r3);

        $r5 = interfaceinvoke $r4.<org.apache.xmlbeans.impl.values.TypeStoreUser: org.apache.xmlbeans.impl.values.TypeStore get_store()>();

        $r6 = virtualinvoke r1.<org.apache.xmlbeans.impl.values.XmlObjectBase: org.apache.xmlbeans.SchemaType schemaType()>();

        $r7 = interfaceinvoke $r5.<org.apache.xmlbeans.impl.values.TypeStore: org.apache.xmlbeans.impl.values.TypeStoreUser change_type(org.apache.xmlbeans.SchemaType)>($r6);

        return $r7;
    }

    public final org.apache.xmlbeans.XmlObject set(org.apache.xmlbeans.XmlObject)
    {
        java.lang.Throwable $r12, $r15, $r16, $r17, $r18, $r19;
        java.lang.IllegalStateException $r11;
        org.apache.xmlbeans.XmlRuntimeException $r14;
        org.apache.xmlbeans.impl.values.XmlObjectBase r0, $r2;
        org.apache.xmlbeans.XmlObject r1, $r21;
        java.lang.String $r10;
        boolean $z0, $z1, $z2, $z3, z4;
        org.apache.xmlbeans.impl.values.TypeStoreUser r20;
        java.lang.InterruptedException $r13;
        java.lang.Object $r3, $r4, $r5, $r6, $r7, $r8, $r9;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        r1 := @parameter0: org.apache.xmlbeans.XmlObject;

        $z0 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: boolean isImmutable()>();

        if $z0 == 0 goto label01;

        $r11 = new java.lang.IllegalStateException;

        specialinvoke $r11.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cannot set the value of an immutable XmlObject");

        throw $r11;

     label01:
        $r2 = staticinvoke <org.apache.xmlbeans.impl.values.XmlObjectBase: org.apache.xmlbeans.impl.values.XmlObjectBase underlying(org.apache.xmlbeans.XmlObject)>(r1);

        r20 = r0;

        if $r2 != null goto label02;

        virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: void setNil()>();

        return r0;

     label02:
        $z1 = virtualinvoke $r2.<org.apache.xmlbeans.impl.values.XmlObjectBase: boolean isImmutable()>();

        if $z1 == 0 goto label03;

        $r10 = virtualinvoke $r2.<org.apache.xmlbeans.impl.values.XmlObjectBase: java.lang.String getStringValue()>();

        virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: void setStringValue(java.lang.String)>($r10);

        goto label39;

     label03:
        $z2 = specialinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: boolean preCheck()>();

        $z3 = specialinvoke $r2.<org.apache.xmlbeans.impl.values.XmlObjectBase: boolean preCheck()>();

        $r3 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: java.lang.Object monitor()>();

        $r4 = virtualinvoke $r2.<org.apache.xmlbeans.impl.values.XmlObjectBase: java.lang.Object monitor()>();

        if $r3 != $r4 goto label10;

        if $z2 == 0 goto label04;

        r20 = specialinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: org.apache.xmlbeans.impl.values.TypeStoreUser setterHelper(org.apache.xmlbeans.impl.values.XmlObjectBase)>($r2);

        goto label39;

     label04:
        $r9 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: java.lang.Object monitor()>();

        entermonitor $r9;

     label05:
        r20 = specialinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: org.apache.xmlbeans.impl.values.TypeStoreUser setterHelper(org.apache.xmlbeans.impl.values.XmlObjectBase)>($r2);

        exitmonitor $r9;

     label06:
        goto label09;

     label07:
        $r19 := @caughtexception;

        exitmonitor $r9;

     label08:
        throw $r19;

     label09:
        goto label39;

     label10:
        if $z2 == 0 goto label17;

        if $z3 == 0 goto label11;

        r20 = specialinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: org.apache.xmlbeans.impl.values.TypeStoreUser setterHelper(org.apache.xmlbeans.impl.values.XmlObjectBase)>($r2);

        goto label39;

     label11:
        $r8 = virtualinvoke $r2.<org.apache.xmlbeans.impl.values.XmlObjectBase: java.lang.Object monitor()>();

        entermonitor $r8;

     label12:
        r20 = specialinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: org.apache.xmlbeans.impl.values.TypeStoreUser setterHelper(org.apache.xmlbeans.impl.values.XmlObjectBase)>($r2);

        exitmonitor $r8;

     label13:
        goto label16;

     label14:
        $r18 := @caughtexception;

        exitmonitor $r8;

     label15:
        throw $r18;

     label16:
        goto label39;

     label17:
        if $z3 == 0 goto label23;

        $r7 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: java.lang.Object monitor()>();

        entermonitor $r7;

     label18:
        r20 = specialinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: org.apache.xmlbeans.impl.values.TypeStoreUser setterHelper(org.apache.xmlbeans.impl.values.XmlObjectBase)>($r2);

        exitmonitor $r7;

     label19:
        goto label22;

     label20:
        $r17 := @caughtexception;

        exitmonitor $r7;

     label21:
        throw $r17;

     label22:
        goto label39;

     label23:
        z4 = 0;

     label24:
        staticinvoke <org.apache.xmlbeans.impl.common.GlobalLock: void acquire()>();

        z4 = 1;

        $r5 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: java.lang.Object monitor()>();

        entermonitor $r5;

     label25:
        $r6 = virtualinvoke $r2.<org.apache.xmlbeans.impl.values.XmlObjectBase: java.lang.Object monitor()>();

        entermonitor $r6;

     label26:
        staticinvoke <org.apache.xmlbeans.impl.common.GlobalLock: void release()>();

        z4 = 0;

        r20 = specialinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: org.apache.xmlbeans.impl.values.TypeStoreUser setterHelper(org.apache.xmlbeans.impl.values.XmlObjectBase)>($r2);

        exitmonitor $r6;

     label27:
        goto label30;

     label28:
        $r16 := @caughtexception;

        exitmonitor $r6;

     label29:
        throw $r16;

     label30:
        exitmonitor $r5;

     label31:
        goto label34;

     label32:
        $r15 := @caughtexception;

        exitmonitor $r5;

     label33:
        throw $r15;

     label34:
        if 0 == 0 goto label39;

        staticinvoke <org.apache.xmlbeans.impl.common.GlobalLock: void release()>();

        goto label39;

     label35:
        $r13 := @caughtexception;

        $r14 = new org.apache.xmlbeans.XmlRuntimeException;

        specialinvoke $r14.<org.apache.xmlbeans.XmlRuntimeException: void <init>(java.lang.Throwable)>($r13);

        throw $r14;

     label36:
        $r12 := @caughtexception;

     label37:
        if z4 == 0 goto label38;

        staticinvoke <org.apache.xmlbeans.impl.common.GlobalLock: void release()>();

     label38:
        throw $r12;

     label39:
        $r21 = (org.apache.xmlbeans.XmlObject) r20;

        return $r21;

        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.lang.Throwable from label07 to label08 with label07;
        catch java.lang.Throwable from label12 to label13 with label14;
        catch java.lang.Throwable from label14 to label15 with label14;
        catch java.lang.Throwable from label18 to label19 with label20;
        catch java.lang.Throwable from label20 to label21 with label20;
        catch java.lang.Throwable from label26 to label27 with label28;
        catch java.lang.Throwable from label28 to label29 with label28;
        catch java.lang.Throwable from label25 to label31 with label32;
        catch java.lang.Throwable from label32 to label33 with label32;
        catch java.lang.InterruptedException from label24 to label34 with label35;
        catch java.lang.Throwable from label24 to label34 with label36;
        catch java.lang.Throwable from label35 to label37 with label36;
    }

    public final org.apache.xmlbeans.XmlObject generatedSetterHelperImpl(org.apache.xmlbeans.XmlObject, javax.xml.namespace.QName, int, short)
    {
        org.apache.xmlbeans.impl.values.XmlObjectBase $r1, r2, $r23, $r26;
        boolean $z0, $z1, $z2, z3;
        org.apache.xmlbeans.impl.values.TypeStoreUser $r8, $r10, $r13, $r15, $r18, $r20;
        javax.xml.namespace.QName r7;
        java.lang.Throwable $r27, $r30, $r31, $r32, $r33, $r34, $r35, $r36;
        org.apache.xmlbeans.XmlRuntimeException $r29;
        short s1;
        int i0;
        org.apache.xmlbeans.XmlObject r0, $r11, $r14, $r16, $r19, $r21, r37;
        java.lang.String $r24;
        java.lang.InterruptedException $r28;
        java.lang.Object $r3, $r4, $r5, $r6, $r9, $r12, $r17, $r22, $r25;

        r2 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        r0 := @parameter0: org.apache.xmlbeans.XmlObject;

        r7 := @parameter1: javax.xml.namespace.QName;

        i0 := @parameter2: int;

        s1 := @parameter3: short;

        $r1 = staticinvoke <org.apache.xmlbeans.impl.values.XmlObjectBase: org.apache.xmlbeans.impl.values.XmlObjectBase underlying(org.apache.xmlbeans.XmlObject)>(r0);

        if $r1 != null goto label05;

        $r25 = virtualinvoke r2.<org.apache.xmlbeans.impl.values.XmlObjectBase: java.lang.Object monitor()>();

        entermonitor $r25;

     label01:
        $r26 = specialinvoke r2.<org.apache.xmlbeans.impl.values.XmlObjectBase: org.apache.xmlbeans.impl.values.XmlObjectBase getTargetForSetter(javax.xml.namespace.QName,int,short)>(r7, i0, s1);

        virtualinvoke $r26.<org.apache.xmlbeans.impl.values.XmlObjectBase: void setNil()>();

        exitmonitor $r25;

     label02:
        return $r26;

     label03:
        $r36 := @caughtexception;

        exitmonitor $r25;

     label04:
        throw $r36;

     label05:
        $z0 = virtualinvoke $r1.<org.apache.xmlbeans.impl.values.XmlObjectBase: boolean isImmutable()>();

        if $z0 == 0 goto label10;

        $r22 = virtualinvoke r2.<org.apache.xmlbeans.impl.values.XmlObjectBase: java.lang.Object monitor()>();

        entermonitor $r22;

     label06:
        $r23 = specialinvoke r2.<org.apache.xmlbeans.impl.values.XmlObjectBase: org.apache.xmlbeans.impl.values.XmlObjectBase getTargetForSetter(javax.xml.namespace.QName,int,short)>(r7, i0, s1);

        $r24 = virtualinvoke $r1.<org.apache.xmlbeans.impl.values.XmlObjectBase: java.lang.String getStringValue()>();

        virtualinvoke $r23.<org.apache.xmlbeans.impl.values.XmlObjectBase: void setStringValue(java.lang.String)>($r24);

        exitmonitor $r22;

     label07:
        return $r23;

     label08:
        $r35 := @caughtexception;

        exitmonitor $r22;

     label09:
        throw $r35;

     label10:
        $z1 = specialinvoke r2.<org.apache.xmlbeans.impl.values.XmlObjectBase: boolean preCheck()>();

        $z2 = specialinvoke $r1.<org.apache.xmlbeans.impl.values.XmlObjectBase: boolean preCheck()>();

        $r3 = virtualinvoke r2.<org.apache.xmlbeans.impl.values.XmlObjectBase: java.lang.Object monitor()>();

        $r4 = virtualinvoke $r1.<org.apache.xmlbeans.impl.values.XmlObjectBase: java.lang.Object monitor()>();

        if $r3 != $r4 goto label16;

        if $z1 == 0 goto label11;

        $r20 = specialinvoke r2.<org.apache.xmlbeans.impl.values.XmlObjectBase: org.apache.xmlbeans.impl.values.TypeStoreUser objSetterHelper(org.apache.xmlbeans.impl.values.XmlObjectBase,javax.xml.namespace.QName,int,short)>($r1, r7, i0, s1);

        $r21 = (org.apache.xmlbeans.XmlObject) $r20;

        return $r21;

     label11:
        $r17 = virtualinvoke r2.<org.apache.xmlbeans.impl.values.XmlObjectBase: java.lang.Object monitor()>();

        entermonitor $r17;

     label12:
        $r18 = specialinvoke r2.<org.apache.xmlbeans.impl.values.XmlObjectBase: org.apache.xmlbeans.impl.values.TypeStoreUser objSetterHelper(org.apache.xmlbeans.impl.values.XmlObjectBase,javax.xml.namespace.QName,int,short)>($r1, r7, i0, s1);

        $r19 = (org.apache.xmlbeans.XmlObject) $r18;

        exitmonitor $r17;

     label13:
        return $r19;

     label14:
        $r34 := @caughtexception;

        exitmonitor $r17;

     label15:
        throw $r34;

     label16:
        if $z1 == 0 goto label22;

        if $z2 == 0 goto label17;

        $r15 = specialinvoke r2.<org.apache.xmlbeans.impl.values.XmlObjectBase: org.apache.xmlbeans.impl.values.TypeStoreUser objSetterHelper(org.apache.xmlbeans.impl.values.XmlObjectBase,javax.xml.namespace.QName,int,short)>($r1, r7, i0, s1);

        $r16 = (org.apache.xmlbeans.XmlObject) $r15;

        return $r16;

     label17:
        $r12 = virtualinvoke $r1.<org.apache.xmlbeans.impl.values.XmlObjectBase: java.lang.Object monitor()>();

        entermonitor $r12;

     label18:
        $r13 = specialinvoke r2.<org.apache.xmlbeans.impl.values.XmlObjectBase: org.apache.xmlbeans.impl.values.TypeStoreUser objSetterHelper(org.apache.xmlbeans.impl.values.XmlObjectBase,javax.xml.namespace.QName,int,short)>($r1, r7, i0, s1);

        $r14 = (org.apache.xmlbeans.XmlObject) $r13;

        exitmonitor $r12;

     label19:
        return $r14;

     label20:
        $r33 := @caughtexception;

        exitmonitor $r12;

     label21:
        throw $r33;

     label22:
        if $z2 == 0 goto label27;

        $r9 = virtualinvoke r2.<org.apache.xmlbeans.impl.values.XmlObjectBase: java.lang.Object monitor()>();

        entermonitor $r9;

     label23:
        $r10 = specialinvoke r2.<org.apache.xmlbeans.impl.values.XmlObjectBase: org.apache.xmlbeans.impl.values.TypeStoreUser objSetterHelper(org.apache.xmlbeans.impl.values.XmlObjectBase,javax.xml.namespace.QName,int,short)>($r1, r7, i0, s1);

        $r11 = (org.apache.xmlbeans.XmlObject) $r10;

        exitmonitor $r9;

     label24:
        return $r11;

     label25:
        $r32 := @caughtexception;

        exitmonitor $r9;

     label26:
        throw $r32;

     label27:
        z3 = 0;

     label28:
        staticinvoke <org.apache.xmlbeans.impl.common.GlobalLock: void acquire()>();

        z3 = 1;

        $r5 = virtualinvoke r2.<org.apache.xmlbeans.impl.values.XmlObjectBase: java.lang.Object monitor()>();

        entermonitor $r5;

     label29:
        $r6 = virtualinvoke $r1.<org.apache.xmlbeans.impl.values.XmlObjectBase: java.lang.Object monitor()>();

        entermonitor $r6;

     label30:
        staticinvoke <org.apache.xmlbeans.impl.common.GlobalLock: void release()>();

        z3 = 0;

        $r8 = specialinvoke r2.<org.apache.xmlbeans.impl.values.XmlObjectBase: org.apache.xmlbeans.impl.values.TypeStoreUser objSetterHelper(org.apache.xmlbeans.impl.values.XmlObjectBase,javax.xml.namespace.QName,int,short)>($r1, r7, i0, s1);

        r37 = (org.apache.xmlbeans.XmlObject) $r8;

        exitmonitor $r6;

     label31:
        exitmonitor $r5;

     label32:
        if 0 == 0 goto label33;

        staticinvoke <org.apache.xmlbeans.impl.common.GlobalLock: void release()>();

     label33:
        return r37;

     label34:
        $r31 := @caughtexception;

        exitmonitor $r6;

     label35:
        throw $r31;

     label36:
        $r30 := @caughtexception;

        exitmonitor $r5;

     label37:
        throw $r30;

     label38:
        $r28 := @caughtexception;

        $r29 = new org.apache.xmlbeans.XmlRuntimeException;

        specialinvoke $r29.<org.apache.xmlbeans.XmlRuntimeException: void <init>(java.lang.Throwable)>($r28);

        throw $r29;

     label39:
        $r27 := @caughtexception;

     label40:
        if z3 == 0 goto label41;

        staticinvoke <org.apache.xmlbeans.impl.common.GlobalLock: void release()>();

     label41:
        throw $r27;

        catch java.lang.Throwable from label01 to label02 with label03;
        catch java.lang.Throwable from label03 to label04 with label03;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
        catch java.lang.Throwable from label12 to label13 with label14;
        catch java.lang.Throwable from label14 to label15 with label14;
        catch java.lang.Throwable from label18 to label19 with label20;
        catch java.lang.Throwable from label20 to label21 with label20;
        catch java.lang.Throwable from label23 to label24 with label25;
        catch java.lang.Throwable from label25 to label26 with label25;
        catch java.lang.Throwable from label30 to label31 with label34;
        catch java.lang.Throwable from label34 to label35 with label34;
        catch java.lang.Throwable from label29 to label32 with label36;
        catch java.lang.Throwable from label34 to label37 with label36;
        catch java.lang.InterruptedException from label28 to label32 with label38;
        catch java.lang.InterruptedException from label34 to label38 with label38;
        catch java.lang.Throwable from label28 to label32 with label39;
        catch java.lang.Throwable from label34 to label40 with label39;
    }

    private org.apache.xmlbeans.impl.values.TypeStoreUser objSetterHelper(org.apache.xmlbeans.impl.values.XmlObjectBase, javax.xml.namespace.QName, int, short)
    {
        org.apache.xmlbeans.impl.values.XmlObjectBase r0, $r2, r3;
        org.apache.xmlbeans.impl.values.TypeStore $r4, $r5, $r7;
        org.apache.xmlbeans.impl.values.TypeStoreUser $r6, $r9;
        short s1;
        int i0;
        javax.xml.namespace.QName r1;
        org.apache.xmlbeans.SchemaType $r8;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        r3 := @parameter0: org.apache.xmlbeans.impl.values.XmlObjectBase;

        r1 := @parameter1: javax.xml.namespace.QName;

        i0 := @parameter2: int;

        s1 := @parameter3: short;

        $r2 = specialinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: org.apache.xmlbeans.impl.values.XmlObjectBase getTargetForSetter(javax.xml.namespace.QName,int,short)>(r1, i0, s1);

        virtualinvoke $r2.<org.apache.xmlbeans.impl.values.XmlObjectBase: void check_orphaned()>();

        virtualinvoke r3.<org.apache.xmlbeans.impl.values.XmlObjectBase: void check_orphaned()>();

        $r4 = virtualinvoke $r2.<org.apache.xmlbeans.impl.values.XmlObjectBase: org.apache.xmlbeans.impl.values.TypeStore get_store()>();

        $r5 = virtualinvoke r3.<org.apache.xmlbeans.impl.values.XmlObjectBase: org.apache.xmlbeans.impl.values.TypeStore get_store()>();

        $r6 = interfaceinvoke $r4.<org.apache.xmlbeans.impl.values.TypeStore: org.apache.xmlbeans.impl.values.TypeStoreUser copy_contents_from(org.apache.xmlbeans.impl.values.TypeStore)>($r5);

        $r7 = interfaceinvoke $r6.<org.apache.xmlbeans.impl.values.TypeStoreUser: org.apache.xmlbeans.impl.values.TypeStore get_store()>();

        $r8 = virtualinvoke r3.<org.apache.xmlbeans.impl.values.XmlObjectBase: org.apache.xmlbeans.SchemaType schemaType()>();

        $r9 = interfaceinvoke $r7.<org.apache.xmlbeans.impl.values.TypeStore: org.apache.xmlbeans.impl.values.TypeStoreUser change_type(org.apache.xmlbeans.SchemaType)>($r8);

        return $r9;
    }

    private org.apache.xmlbeans.impl.values.XmlObjectBase getTargetForSetter(javax.xml.namespace.QName, int, short)
    {
        java.lang.IllegalStateException $r18, $r20;
        java.lang.IndexOutOfBoundsException $r19;
        org.apache.xmlbeans.impl.values.XmlObjectBase r0, r16, r17;
        short s0;
        java.lang.StringBuffer $r13, $r14, $r21;
        int i1, $i2, $i3;
        java.lang.String $r15;
        boolean $z0, $z1;
        org.apache.xmlbeans.impl.values.TypeStore $r1, $r6, $r9;
        java.lang.IllegalArgumentException $r22;
        org.apache.xmlbeans.impl.values.TypeStoreUser $r3, $r7, $r10;
        javax.xml.namespace.QName r2;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        r2 := @parameter0: javax.xml.namespace.QName;

        i1 := @parameter1: int;

        s0 := @parameter2: short;

        $i2 = (int) s0;

        lookupswitch($i2)
        {
            case 1: goto label1;
            case 2: goto label4;
            default: goto label7;
        };

     label1:
        virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: void check_orphaned()>();

        $r6 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: org.apache.xmlbeans.impl.values.TypeStore get_store()>();

        $r7 = interfaceinvoke $r6.<org.apache.xmlbeans.impl.values.TypeStore: org.apache.xmlbeans.impl.values.TypeStoreUser find_element_user(javax.xml.namespace.QName,int)>(r2, i1);

        r16 = (org.apache.xmlbeans.impl.values.XmlObjectBase) $r7;

        if r16 != null goto label2;

        $r9 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: org.apache.xmlbeans.impl.values.TypeStore get_store()>();

        $r10 = interfaceinvoke $r9.<org.apache.xmlbeans.impl.values.TypeStore: org.apache.xmlbeans.impl.values.TypeStoreUser add_element_user(javax.xml.namespace.QName)>(r2);

        r16 = (org.apache.xmlbeans.impl.values.XmlObjectBase) $r10;

     label2:
        $z1 = virtualinvoke r16.<org.apache.xmlbeans.impl.values.XmlObjectBase: boolean isImmutable()>();

        if $z1 == 0 goto label3;

        $r18 = new java.lang.IllegalStateException;

        specialinvoke $r18.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cannot set the value of an immutable XmlObject");

        throw $r18;

     label3:
        return r16;

     label4:
        virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: void check_orphaned()>();

        $r1 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: org.apache.xmlbeans.impl.values.TypeStore get_store()>();

        $r3 = interfaceinvoke $r1.<org.apache.xmlbeans.impl.values.TypeStore: org.apache.xmlbeans.impl.values.TypeStoreUser find_element_user(javax.xml.namespace.QName,int)>(r2, i1);

        r17 = (org.apache.xmlbeans.impl.values.XmlObjectBase) $r3;

        if r17 != null goto label5;

        $r19 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r19.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r19;

     label5:
        $z0 = virtualinvoke r17.<org.apache.xmlbeans.impl.values.XmlObjectBase: boolean isImmutable()>();

        if $z0 == 0 goto label6;

        $r20 = new java.lang.IllegalStateException;

        specialinvoke $r20.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cannot set the value of an immutable XmlObject");

        throw $r20;

     label6:
        return r17;

     label7:
        $r22 = new java.lang.IllegalArgumentException;

        $r21 = new java.lang.StringBuffer;

        specialinvoke $r21.<java.lang.StringBuffer: void <init>()>();

        $r13 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Unknown kindSetterHelper: ");

        $i3 = (int) s0;

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i3);

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r22.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r15);

        throw $r22;
    }

    public final org.apache.xmlbeans.XmlObject _set(org.apache.xmlbeans.XmlObject)
    {
        java.lang.IllegalStateException $r10;
        org.apache.xmlbeans.impl.values.XmlObjectBase r0, $r2;
        org.apache.xmlbeans.impl.values.TypeStore $r3, $r4, $r6;
        org.apache.xmlbeans.impl.values.TypeStoreUser $r5, r11;
        org.apache.xmlbeans.XmlObject r1, $r8;
        java.lang.String $r9;
        org.apache.xmlbeans.SchemaType $r7;
        boolean $z0, $z1;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        r1 := @parameter0: org.apache.xmlbeans.XmlObject;

        $z0 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: boolean isImmutable()>();

        if $z0 == 0 goto label1;

        $r10 = new java.lang.IllegalStateException;

        specialinvoke $r10.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cannot set the value of an immutable XmlObject");

        throw $r10;

     label1:
        $r2 = staticinvoke <org.apache.xmlbeans.impl.values.XmlObjectBase: org.apache.xmlbeans.impl.values.XmlObjectBase underlying(org.apache.xmlbeans.XmlObject)>(r1);

        r11 = r0;

        if $r2 != null goto label2;

        virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: void setNil()>();

        return r0;

     label2:
        $z1 = virtualinvoke $r2.<org.apache.xmlbeans.impl.values.XmlObjectBase: boolean isImmutable()>();

        if $z1 == 0 goto label3;

        $r9 = virtualinvoke $r2.<org.apache.xmlbeans.impl.values.XmlObjectBase: java.lang.String stringValue()>();

        virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: void set(java.lang.String)>($r9);

        goto label4;

     label3:
        virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: void check_orphaned()>();

        virtualinvoke $r2.<org.apache.xmlbeans.impl.values.XmlObjectBase: void check_orphaned()>();

        $r3 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: org.apache.xmlbeans.impl.values.TypeStore get_store()>();

        $r4 = virtualinvoke $r2.<org.apache.xmlbeans.impl.values.XmlObjectBase: org.apache.xmlbeans.impl.values.TypeStore get_store()>();

        $r5 = interfaceinvoke $r3.<org.apache.xmlbeans.impl.values.TypeStore: org.apache.xmlbeans.impl.values.TypeStoreUser copy_contents_from(org.apache.xmlbeans.impl.values.TypeStore)>($r4);

        $r6 = interfaceinvoke $r5.<org.apache.xmlbeans.impl.values.TypeStoreUser: org.apache.xmlbeans.impl.values.TypeStore get_store()>();

        $r7 = virtualinvoke $r2.<org.apache.xmlbeans.impl.values.XmlObjectBase: org.apache.xmlbeans.SchemaType schemaType()>();

        r11 = interfaceinvoke $r6.<org.apache.xmlbeans.impl.values.TypeStore: org.apache.xmlbeans.impl.values.TypeStoreUser change_type(org.apache.xmlbeans.SchemaType)>($r7);

     label4:
        $r8 = (org.apache.xmlbeans.XmlObject) r11;

        return $r8;
    }

    protected void set_list(java.util.List)
    {
        java.util.List r4;
        java.lang.Object[] $r1;
        org.apache.xmlbeans.impl.values.XmlValueNotSupportedException $r0;
        org.apache.xmlbeans.impl.values.XmlObjectBase r2;
        java.lang.String $r3;

        r2 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        r4 := @parameter0: java.util.List;

        $r0 = new org.apache.xmlbeans.impl.values.XmlValueNotSupportedException;

        $r1 = newarray (java.lang.Object)[2];

        $r1[0] = "List";

        $r3 = specialinvoke r2.<org.apache.xmlbeans.impl.values.XmlObjectBase: java.lang.String getPrimitiveTypeName()>();

        $r1[1] = $r3;

        specialinvoke $r0.<org.apache.xmlbeans.impl.values.XmlValueNotSupportedException: void <init>(java.lang.String,java.lang.Object[])>("exception.value.not.supported.j2s", $r1);

        throw $r0;
    }

    protected void set_boolean(boolean)
    {
        java.lang.Object[] $r1;
        org.apache.xmlbeans.impl.values.XmlValueNotSupportedException $r0;
        org.apache.xmlbeans.impl.values.XmlObjectBase r2;
        java.lang.String $r3;
        boolean z0;

        r2 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        z0 := @parameter0: boolean;

        $r0 = new org.apache.xmlbeans.impl.values.XmlValueNotSupportedException;

        $r1 = newarray (java.lang.Object)[2];

        $r1[0] = "boolean";

        $r3 = specialinvoke r2.<org.apache.xmlbeans.impl.values.XmlObjectBase: java.lang.String getPrimitiveTypeName()>();

        $r1[1] = $r3;

        specialinvoke $r0.<org.apache.xmlbeans.impl.values.XmlValueNotSupportedException: void <init>(java.lang.String,java.lang.Object[])>("exception.value.not.supported.j2s", $r1);

        throw $r0;
    }

    protected void set_byte(byte)
    {
        int $i1;
        byte b0;
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        b0 := @parameter0: byte;

        $i1 = (int) b0;

        virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: void set_int(int)>($i1);

        return;
    }

    protected void set_short(short)
    {
        int $i1;
        short s0;
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        s0 := @parameter0: short;

        $i1 = (int) s0;

        virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: void set_int(int)>($i1);

        return;
    }

    protected void set_int(int)
    {
        int i0;
        long $l1;
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        i0 := @parameter0: int;

        $l1 = (long) i0;

        virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: void set_long(long)>($l1);

        return;
    }

    protected void set_long(long)
    {
        long l0;
        java.math.BigInteger $r1;
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        l0 := @parameter0: long;

        $r1 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(l0);

        virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: void set_BigInteger(java.math.BigInteger)>($r1);

        return;
    }

    protected void set_char(char)
    {
        char c0;
        java.lang.String $r1;
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        c0 := @parameter0: char;

        $r1 = staticinvoke <java.lang.Character: java.lang.String toString(char)>(c0);

        virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: void set_String(java.lang.String)>($r1);

        return;
    }

    protected void set_float(float)
    {
        java.math.BigDecimal $r1;
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;
        float f0;
        double $d0;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        f0 := @parameter0: float;

        $r1 = new java.math.BigDecimal;

        $d0 = (double) f0;

        specialinvoke $r1.<java.math.BigDecimal: void <init>(double)>($d0);

        virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: void set_BigDecimal(java.math.BigDecimal)>($r1);

        return;
    }

    protected void set_double(double)
    {
        java.math.BigDecimal $r1;
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;
        double d0;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        d0 := @parameter0: double;

        $r1 = new java.math.BigDecimal;

        specialinvoke $r1.<java.math.BigDecimal: void <init>(double)>(d0);

        virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: void set_BigDecimal(java.math.BigDecimal)>($r1);

        return;
    }

    protected void set_enum(org.apache.xmlbeans.StringEnumAbstractBase)
    {
        java.lang.Object[] $r1;
        org.apache.xmlbeans.impl.values.XmlValueNotSupportedException $r0;
        org.apache.xmlbeans.impl.values.XmlObjectBase r2;
        java.lang.String $r3;
        org.apache.xmlbeans.StringEnumAbstractBase r4;

        r2 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        r4 := @parameter0: org.apache.xmlbeans.StringEnumAbstractBase;

        $r0 = new org.apache.xmlbeans.impl.values.XmlValueNotSupportedException;

        $r1 = newarray (java.lang.Object)[2];

        $r1[0] = "enum";

        $r3 = specialinvoke r2.<org.apache.xmlbeans.impl.values.XmlObjectBase: java.lang.String getPrimitiveTypeName()>();

        $r1[1] = $r3;

        specialinvoke $r0.<org.apache.xmlbeans.impl.values.XmlValueNotSupportedException: void <init>(java.lang.String,java.lang.Object[])>("exception.value.not.supported.j2s", $r1);

        throw $r0;
    }

    protected void set_ByteArray(byte[])
    {
        byte[] r4;
        java.lang.Object[] $r1;
        org.apache.xmlbeans.impl.values.XmlValueNotSupportedException $r0;
        org.apache.xmlbeans.impl.values.XmlObjectBase r2;
        java.lang.String $r3;

        r2 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        r4 := @parameter0: byte[];

        $r0 = new org.apache.xmlbeans.impl.values.XmlValueNotSupportedException;

        $r1 = newarray (java.lang.Object)[2];

        $r1[0] = "byte[]";

        $r3 = specialinvoke r2.<org.apache.xmlbeans.impl.values.XmlObjectBase: java.lang.String getPrimitiveTypeName()>();

        $r1[1] = $r3;

        specialinvoke $r0.<org.apache.xmlbeans.impl.values.XmlValueNotSupportedException: void <init>(java.lang.String,java.lang.Object[])>("exception.value.not.supported.j2s", $r1);

        throw $r0;
    }

    protected void set_b64(byte[])
    {
        byte[] r1;
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        r1 := @parameter0: byte[];

        virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: void set_ByteArray(byte[])>(r1);

        return;
    }

    protected void set_hex(byte[])
    {
        byte[] r1;
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        r1 := @parameter0: byte[];

        virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: void set_ByteArray(byte[])>(r1);

        return;
    }

    protected void set_BigInteger(java.math.BigInteger)
    {
        java.math.BigDecimal $r1;
        java.math.BigInteger r2;
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        r2 := @parameter0: java.math.BigInteger;

        $r1 = new java.math.BigDecimal;

        specialinvoke $r1.<java.math.BigDecimal: void <init>(java.math.BigInteger)>(r2);

        virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: void set_BigDecimal(java.math.BigDecimal)>($r1);

        return;
    }

    protected void set_BigDecimal(java.math.BigDecimal)
    {
        java.math.BigDecimal r4;
        java.lang.Object[] $r1;
        org.apache.xmlbeans.impl.values.XmlValueNotSupportedException $r0;
        org.apache.xmlbeans.impl.values.XmlObjectBase r2;
        java.lang.String $r3;

        r2 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        r4 := @parameter0: java.math.BigDecimal;

        $r0 = new org.apache.xmlbeans.impl.values.XmlValueNotSupportedException;

        $r1 = newarray (java.lang.Object)[2];

        $r1[0] = "numeric";

        $r3 = specialinvoke r2.<org.apache.xmlbeans.impl.values.XmlObjectBase: java.lang.String getPrimitiveTypeName()>();

        $r1[1] = $r3;

        specialinvoke $r0.<org.apache.xmlbeans.impl.values.XmlValueNotSupportedException: void <init>(java.lang.String,java.lang.Object[])>("exception.value.not.supported.j2s", $r1);

        throw $r0;
    }

    protected void set_Date(java.util.Date)
    {
        java.lang.Object[] $r1;
        org.apache.xmlbeans.impl.values.XmlValueNotSupportedException $r0;
        org.apache.xmlbeans.impl.values.XmlObjectBase r2;
        java.util.Date r4;
        java.lang.String $r3;

        r2 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        r4 := @parameter0: java.util.Date;

        $r0 = new org.apache.xmlbeans.impl.values.XmlValueNotSupportedException;

        $r1 = newarray (java.lang.Object)[2];

        $r1[0] = "Date";

        $r3 = specialinvoke r2.<org.apache.xmlbeans.impl.values.XmlObjectBase: java.lang.String getPrimitiveTypeName()>();

        $r1[1] = $r3;

        specialinvoke $r0.<org.apache.xmlbeans.impl.values.XmlValueNotSupportedException: void <init>(java.lang.String,java.lang.Object[])>("exception.value.not.supported.j2s", $r1);

        throw $r0;
    }

    protected void set_Calendar(java.util.Calendar)
    {
        java.lang.Object[] $r1;
        java.util.Calendar r4;
        org.apache.xmlbeans.impl.values.XmlValueNotSupportedException $r0;
        org.apache.xmlbeans.impl.values.XmlObjectBase r2;
        java.lang.String $r3;

        r2 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        r4 := @parameter0: java.util.Calendar;

        $r0 = new org.apache.xmlbeans.impl.values.XmlValueNotSupportedException;

        $r1 = newarray (java.lang.Object)[2];

        $r1[0] = "Calendar";

        $r3 = specialinvoke r2.<org.apache.xmlbeans.impl.values.XmlObjectBase: java.lang.String getPrimitiveTypeName()>();

        $r1[1] = $r3;

        specialinvoke $r0.<org.apache.xmlbeans.impl.values.XmlValueNotSupportedException: void <init>(java.lang.String,java.lang.Object[])>("exception.value.not.supported.j2s", $r1);

        throw $r0;
    }

    protected void set_GDate(org.apache.xmlbeans.GDateSpecification)
    {
        java.lang.Object[] $r1;
        org.apache.xmlbeans.impl.values.XmlValueNotSupportedException $r0;
        org.apache.xmlbeans.impl.values.XmlObjectBase r2;
        org.apache.xmlbeans.GDateSpecification r4;
        java.lang.String $r3;

        r2 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        r4 := @parameter0: org.apache.xmlbeans.GDateSpecification;

        $r0 = new org.apache.xmlbeans.impl.values.XmlValueNotSupportedException;

        $r1 = newarray (java.lang.Object)[2];

        $r1[0] = "Date";

        $r3 = specialinvoke r2.<org.apache.xmlbeans.impl.values.XmlObjectBase: java.lang.String getPrimitiveTypeName()>();

        $r1[1] = $r3;

        specialinvoke $r0.<org.apache.xmlbeans.impl.values.XmlValueNotSupportedException: void <init>(java.lang.String,java.lang.Object[])>("exception.value.not.supported.j2s", $r1);

        throw $r0;
    }

    protected void set_GDuration(org.apache.xmlbeans.GDurationSpecification)
    {
        java.lang.Object[] $r1;
        org.apache.xmlbeans.GDurationSpecification r4;
        org.apache.xmlbeans.impl.values.XmlValueNotSupportedException $r0;
        org.apache.xmlbeans.impl.values.XmlObjectBase r2;
        java.lang.String $r3;

        r2 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        r4 := @parameter0: org.apache.xmlbeans.GDurationSpecification;

        $r0 = new org.apache.xmlbeans.impl.values.XmlValueNotSupportedException;

        $r1 = newarray (java.lang.Object)[2];

        $r1[0] = "Duration";

        $r3 = specialinvoke r2.<org.apache.xmlbeans.impl.values.XmlObjectBase: java.lang.String getPrimitiveTypeName()>();

        $r1[1] = $r3;

        specialinvoke $r0.<org.apache.xmlbeans.impl.values.XmlValueNotSupportedException: void <init>(java.lang.String,java.lang.Object[])>("exception.value.not.supported.j2s", $r1);

        throw $r0;
    }

    protected void set_ComplexXml(org.apache.xmlbeans.XmlObject)
    {
        java.lang.Object[] $r1;
        org.apache.xmlbeans.impl.values.XmlValueNotSupportedException $r0;
        org.apache.xmlbeans.impl.values.XmlObjectBase r2;
        java.lang.String $r3;
        org.apache.xmlbeans.XmlObject r4;

        r2 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        r4 := @parameter0: org.apache.xmlbeans.XmlObject;

        $r0 = new org.apache.xmlbeans.impl.values.XmlValueNotSupportedException;

        $r1 = newarray (java.lang.Object)[2];

        $r1[0] = "complex content";

        $r3 = specialinvoke r2.<org.apache.xmlbeans.impl.values.XmlObjectBase: java.lang.String getPrimitiveTypeName()>();

        $r1[1] = $r3;

        specialinvoke $r0.<org.apache.xmlbeans.impl.values.XmlValueNotSupportedException: void <init>(java.lang.String,java.lang.Object[])>("exception.value.not.supported.j2s", $r1);

        throw $r0;
    }

    protected void set_QName(javax.xml.namespace.QName)
    {
        java.lang.Object[] $r1;
        org.apache.xmlbeans.impl.values.XmlValueNotSupportedException $r0;
        org.apache.xmlbeans.impl.values.XmlObjectBase r2;
        java.lang.String $r3;
        javax.xml.namespace.QName r4;

        r2 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        r4 := @parameter0: javax.xml.namespace.QName;

        $r0 = new org.apache.xmlbeans.impl.values.XmlValueNotSupportedException;

        $r1 = newarray (java.lang.Object)[2];

        $r1[0] = "QName";

        $r3 = specialinvoke r2.<org.apache.xmlbeans.impl.values.XmlObjectBase: java.lang.String getPrimitiveTypeName()>();

        $r1[1] = $r3;

        specialinvoke $r0.<org.apache.xmlbeans.impl.values.XmlValueNotSupportedException: void <init>(java.lang.String,java.lang.Object[])>("exception.value.not.supported.j2s", $r1);

        throw $r0;
    }

    protected void set_notation(java.lang.String)
    {
        java.lang.String r2;
        org.apache.xmlbeans.impl.values.XmlValueNotSupportedException $r0;
        org.apache.xmlbeans.impl.values.XmlObjectBase r1;

        r1 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        r2 := @parameter0: java.lang.String;

        $r0 = new org.apache.xmlbeans.impl.values.XmlValueNotSupportedException;

        specialinvoke $r0.<org.apache.xmlbeans.impl.values.XmlValueNotSupportedException: void <init>()>();

        throw $r0;
    }

    protected void set_xmlanysimple(org.apache.xmlbeans.XmlAnySimpleType)
    {
        org.apache.xmlbeans.XmlAnySimpleType r1;
        java.lang.String $r2;
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        r1 := @parameter0: org.apache.xmlbeans.XmlAnySimpleType;

        $r2 = interfaceinvoke r1.<org.apache.xmlbeans.XmlAnySimpleType: java.lang.String getStringValue()>();

        virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: void set_String(java.lang.String)>($r2);

        return;
    }

    private final java.lang.String getPrimitiveTypeName()
    {
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;
        javax.xml.namespace.QName $r3;
        java.lang.String $r4;
        org.apache.xmlbeans.SchemaType $r1, $r2;
        boolean $z0;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        $r1 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: org.apache.xmlbeans.SchemaType schemaType()>();

        $z0 = interfaceinvoke $r1.<org.apache.xmlbeans.SchemaType: boolean isNoType()>();

        if $z0 == 0 goto label1;

        return "unknown";

     label1:
        $r2 = interfaceinvoke $r1.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.SchemaType getPrimitiveType()>();

        if $r2 != null goto label2;

        return "complex";

     label2:
        $r3 = interfaceinvoke $r2.<org.apache.xmlbeans.SchemaType: javax.xml.namespace.QName getName()>();

        $r4 = virtualinvoke $r3.<javax.xml.namespace.QName: java.lang.String getLocalPart()>();

        return $r4;
    }

    private final boolean comparable_value_spaces(org.apache.xmlbeans.SchemaType, org.apache.xmlbeans.SchemaType)
    {
        org.apache.xmlbeans.impl.values.XmlObjectBase r5;
        java.lang.AssertionError $r4;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        org.apache.xmlbeans.SchemaType r0, r1, $r2, $r3;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;

        r5 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        r0 := @parameter0: org.apache.xmlbeans.SchemaType;

        r1 := @parameter1: org.apache.xmlbeans.SchemaType;

        $z0 = <org.apache.xmlbeans.impl.values.XmlObjectBase: boolean $assertionsDisabled>;

        if $z0 != 0 goto label02;

        $i6 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaType: int getSimpleVariety()>();

        if $i6 == 2 goto label01;

        $i7 = interfaceinvoke r1.<org.apache.xmlbeans.SchemaType: int getSimpleVariety()>();

        if $i7 != 2 goto label02;

     label01:
        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label02:
        $z1 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaType: boolean isSimpleType()>();

        if $z1 != 0 goto label05;

        $z5 = interfaceinvoke r1.<org.apache.xmlbeans.SchemaType: boolean isSimpleType()>();

        if $z5 != 0 goto label05;

        $i4 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaType: int getContentType()>();

        $i5 = interfaceinvoke r1.<org.apache.xmlbeans.SchemaType: int getContentType()>();

        if $i4 != $i5 goto label03;

        $z6 = 1;

        goto label04;

     label03:
        $z6 = 0;

     label04:
        return $z6;

     label05:
        $z2 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaType: boolean isSimpleType()>();

        if $z2 == 0 goto label06;

        $z3 = interfaceinvoke r1.<org.apache.xmlbeans.SchemaType: boolean isSimpleType()>();

        if $z3 != 0 goto label07;

     label06:
        return 0;

     label07:
        $i0 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaType: int getSimpleVariety()>();

        if $i0 != 3 goto label08;

        $i3 = interfaceinvoke r1.<org.apache.xmlbeans.SchemaType: int getSimpleVariety()>();

        if $i3 != 3 goto label08;

        return 1;

     label08:
        $i1 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaType: int getSimpleVariety()>();

        if $i1 == 3 goto label09;

        $i2 = interfaceinvoke r1.<org.apache.xmlbeans.SchemaType: int getSimpleVariety()>();

        if $i2 != 3 goto label10;

     label09:
        return 0;

     label10:
        $r2 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.SchemaType getPrimitiveType()>();

        $r3 = interfaceinvoke r1.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.SchemaType getPrimitiveType()>();

        $z4 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r3);

        return $z4;
    }

    private final boolean valueEqualsImpl(org.apache.xmlbeans.XmlObject)
    {
        org.apache.xmlbeans.impl.values.XmlObjectBase r0, $r6;
        int $i0;
        org.apache.xmlbeans.XmlObject r2;
        org.apache.xmlbeans.SchemaType $r1, $r4, $r5;
        org.apache.xmlbeans.SimpleValue $r3;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        r2 := @parameter0: org.apache.xmlbeans.XmlObject;

        virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: void check_dated()>();

        $r1 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: org.apache.xmlbeans.SchemaType instanceType()>();

        $r3 = (org.apache.xmlbeans.SimpleValue) r2;

        $r4 = interfaceinvoke $r3.<org.apache.xmlbeans.SimpleValue: org.apache.xmlbeans.SchemaType instanceType()>();

        if $r1 != null goto label1;

        if $r4 != null goto label1;

        return 1;

     label1:
        if $r1 == null goto label2;

        if $r4 != null goto label3;

     label2:
        return 0;

     label3:
        $z0 = specialinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: boolean comparable_value_spaces(org.apache.xmlbeans.SchemaType,org.apache.xmlbeans.SchemaType)>($r1, $r4);

        if $z0 != 0 goto label4;

        return 0;

     label4:
        $r5 = interfaceinvoke r2.<org.apache.xmlbeans.XmlObject: org.apache.xmlbeans.SchemaType schemaType()>();

        $i0 = interfaceinvoke $r5.<org.apache.xmlbeans.SchemaType: int getSimpleVariety()>();

        if $i0 != 2 goto label5;

        $r6 = staticinvoke <org.apache.xmlbeans.impl.values.XmlObjectBase: org.apache.xmlbeans.impl.values.XmlObjectBase underlying(org.apache.xmlbeans.XmlObject)>(r2);

        $z2 = virtualinvoke $r6.<org.apache.xmlbeans.impl.values.XmlObjectBase: boolean equal_to(org.apache.xmlbeans.XmlObject)>(r0);

        return $z2;

     label5:
        $z1 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: boolean equal_to(org.apache.xmlbeans.XmlObject)>(r2);

        return $z1;
    }

    public final boolean valueEquals(org.apache.xmlbeans.XmlObject)
    {
        java.lang.Throwable $r8, $r11, $r12, $r13, $r14;
        org.apache.xmlbeans.XmlRuntimeException $r10;
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;
        org.apache.xmlbeans.XmlObject r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, z7;
        java.lang.InterruptedException $r9;
        java.lang.Object $r2, $r3, $r4, $r5, $r6, $r7;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        r1 := @parameter0: org.apache.xmlbeans.XmlObject;

        z7 = 0;

     label01:
        $z0 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: boolean isImmutable()>();

        if $z0 == 0 goto label10;

        $z4 = interfaceinvoke r1.<org.apache.xmlbeans.XmlObject: boolean isImmutable()>();

        if $z4 == 0 goto label04;

        $z6 = specialinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: boolean valueEqualsImpl(org.apache.xmlbeans.XmlObject)>(r1);

     label02:
        if 0 == 0 goto label03;

        staticinvoke <org.apache.xmlbeans.impl.common.GlobalLock: void release()>();

     label03:
        return $z6;

     label04:
        $r7 = interfaceinvoke r1.<org.apache.xmlbeans.XmlObject: java.lang.Object monitor()>();

        entermonitor $r7;

     label05:
        $z5 = specialinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: boolean valueEqualsImpl(org.apache.xmlbeans.XmlObject)>(r1);

        exitmonitor $r7;

     label06:
        if 0 == 0 goto label07;

        staticinvoke <org.apache.xmlbeans.impl.common.GlobalLock: void release()>();

     label07:
        return $z5;

     label08:
        $r14 := @caughtexception;

        exitmonitor $r7;

     label09:
        throw $r14;

     label10:
        $z1 = interfaceinvoke r1.<org.apache.xmlbeans.XmlObject: boolean isImmutable()>();

        if $z1 != 0 goto label11;

        $r3 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: java.lang.Object monitor()>();

        $r4 = interfaceinvoke r1.<org.apache.xmlbeans.XmlObject: java.lang.Object monitor()>();

        if $r3 != $r4 goto label17;

     label11:
        $r2 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: java.lang.Object monitor()>();

        entermonitor $r2;

     label12:
        $z2 = specialinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: boolean valueEqualsImpl(org.apache.xmlbeans.XmlObject)>(r1);

        exitmonitor $r2;

     label13:
        if 0 == 0 goto label14;

        staticinvoke <org.apache.xmlbeans.impl.common.GlobalLock: void release()>();

     label14:
        return $z2;

     label15:
        $r13 := @caughtexception;

        exitmonitor $r2;

     label16:
        throw $r13;

     label17:
        staticinvoke <org.apache.xmlbeans.impl.common.GlobalLock: void acquire()>();

        z7 = 1;

        $r5 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: java.lang.Object monitor()>();

        entermonitor $r5;

     label18:
        $r6 = interfaceinvoke r1.<org.apache.xmlbeans.XmlObject: java.lang.Object monitor()>();

        entermonitor $r6;

     label19:
        staticinvoke <org.apache.xmlbeans.impl.common.GlobalLock: void release()>();

        z7 = 0;

        $z3 = specialinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: boolean valueEqualsImpl(org.apache.xmlbeans.XmlObject)>(r1);

        exitmonitor $r6;

     label20:
        exitmonitor $r5;

     label21:
        if 0 == 0 goto label22;

        staticinvoke <org.apache.xmlbeans.impl.common.GlobalLock: void release()>();

     label22:
        return $z3;

     label23:
        $r12 := @caughtexception;

        exitmonitor $r6;

     label24:
        throw $r12;

     label25:
        $r11 := @caughtexception;

        exitmonitor $r5;

     label26:
        throw $r11;

     label27:
        $r9 := @caughtexception;

        $r10 = new org.apache.xmlbeans.XmlRuntimeException;

        specialinvoke $r10.<org.apache.xmlbeans.XmlRuntimeException: void <init>(java.lang.Throwable)>($r9);

        throw $r10;

     label28:
        $r8 := @caughtexception;

     label29:
        if z7 == 0 goto label30;

        staticinvoke <org.apache.xmlbeans.impl.common.GlobalLock: void release()>();

     label30:
        throw $r8;

        catch java.lang.Throwable from label05 to label06 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
        catch java.lang.Throwable from label12 to label13 with label15;
        catch java.lang.Throwable from label15 to label16 with label15;
        catch java.lang.Throwable from label19 to label20 with label23;
        catch java.lang.Throwable from label23 to label24 with label23;
        catch java.lang.Throwable from label18 to label21 with label25;
        catch java.lang.Throwable from label23 to label26 with label25;
        catch java.lang.InterruptedException from label01 to label02 with label27;
        catch java.lang.InterruptedException from label04 to label06 with label27;
        catch java.lang.InterruptedException from label08 to label13 with label27;
        catch java.lang.InterruptedException from label15 to label21 with label27;
        catch java.lang.InterruptedException from label23 to label27 with label27;
        catch java.lang.Throwable from label01 to label02 with label28;
        catch java.lang.Throwable from label04 to label06 with label28;
        catch java.lang.Throwable from label08 to label13 with label28;
        catch java.lang.Throwable from label15 to label21 with label28;
        catch java.lang.Throwable from label23 to label29 with label28;
    }

    public final int compareTo(java.lang.Object)
    {
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;
        int $i0;
        java.lang.Object r1;
        org.apache.xmlbeans.XmlObject $r2;
        java.lang.ClassCastException $r3;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.apache.xmlbeans.XmlObject) r1;

        $i0 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: int compareValue(org.apache.xmlbeans.XmlObject)>($r2);

        if $i0 != 2 goto label1;

        $r3 = new java.lang.ClassCastException;

        specialinvoke $r3.<java.lang.ClassCastException: void <init>()>();

        throw $r3;

     label1:
        return $i0;
    }

    private final int compareValueImpl(org.apache.xmlbeans.XmlObject)
    {
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;
        org.apache.xmlbeans.impl.values.XmlValueOutOfRangeException $r7;
        int $i0, $i1, $i2;
        org.apache.xmlbeans.XmlObject r2;
        org.apache.xmlbeans.SchemaType $r1, $r4, $r5, $r6;
        org.apache.xmlbeans.SimpleValue $r3;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        r2 := @parameter0: org.apache.xmlbeans.XmlObject;

     label01:
        $r1 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: org.apache.xmlbeans.SchemaType instanceType()>();

        $r3 = (org.apache.xmlbeans.SimpleValue) r2;

        $r4 = interfaceinvoke $r3.<org.apache.xmlbeans.SimpleValue: org.apache.xmlbeans.SchemaType instanceType()>();

     label02:
        goto label04;

     label03:
        $r7 := @caughtexception;

        return 2;

     label04:
        if $r1 != null goto label05;

        if $r4 != null goto label05;

        return 0;

     label05:
        if $r1 == null goto label06;

        if $r4 != null goto label07;

     label06:
        return 2;

     label07:
        $z0 = interfaceinvoke $r1.<org.apache.xmlbeans.SchemaType: boolean isSimpleType()>();

        if $z0 == 0 goto label08;

        $z1 = interfaceinvoke $r1.<org.apache.xmlbeans.SchemaType: boolean isURType()>();

        if $z1 == 0 goto label09;

     label08:
        return 2;

     label09:
        $z2 = interfaceinvoke $r4.<org.apache.xmlbeans.SchemaType: boolean isSimpleType()>();

        if $z2 == 0 goto label10;

        $z3 = interfaceinvoke $r4.<org.apache.xmlbeans.SchemaType: boolean isURType()>();

        if $z3 == 0 goto label11;

     label10:
        return 2;

     label11:
        $r5 = interfaceinvoke $r1.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.SchemaType getPrimitiveType()>();

        $r6 = interfaceinvoke $r4.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.SchemaType getPrimitiveType()>();

        $i0 = interfaceinvoke $r5.<org.apache.xmlbeans.SchemaType: int getBuiltinTypeCode()>();

        $i1 = interfaceinvoke $r6.<org.apache.xmlbeans.SchemaType: int getBuiltinTypeCode()>();

        if $i0 == $i1 goto label12;

        return 2;

     label12:
        $i2 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: int compare_to(org.apache.xmlbeans.XmlObject)>(r2);

        return $i2;

        catch org.apache.xmlbeans.impl.values.XmlValueOutOfRangeException from label01 to label02 with label03;
    }

    public final int compareValue(org.apache.xmlbeans.XmlObject)
    {
        java.lang.Throwable $r8, $r11, $r12, $r13, $r14;
        org.apache.xmlbeans.XmlRuntimeException $r10;
        org.apache.xmlbeans.impl.values.XmlObjectBase r1;
        int $i0, $i1, $i2, $i3;
        org.apache.xmlbeans.XmlObject r0;
        boolean $z0, $z1, $z2, z3;
        java.lang.InterruptedException $r9;
        java.lang.Object $r2, $r3, $r4, $r5, $r6, $r7;

        r1 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        r0 := @parameter0: org.apache.xmlbeans.XmlObject;

        if r0 != null goto label01;

        return 2;

     label01:
        z3 = 0;

     label02:
        $z0 = virtualinvoke r1.<org.apache.xmlbeans.impl.values.XmlObjectBase: boolean isImmutable()>();

        if $z0 == 0 goto label11;

        $z2 = interfaceinvoke r0.<org.apache.xmlbeans.XmlObject: boolean isImmutable()>();

        if $z2 == 0 goto label05;

        $i3 = specialinvoke r1.<org.apache.xmlbeans.impl.values.XmlObjectBase: int compareValueImpl(org.apache.xmlbeans.XmlObject)>(r0);

     label03:
        if 0 == 0 goto label04;

        staticinvoke <org.apache.xmlbeans.impl.common.GlobalLock: void release()>();

     label04:
        return $i3;

     label05:
        $r7 = interfaceinvoke r0.<org.apache.xmlbeans.XmlObject: java.lang.Object monitor()>();

        entermonitor $r7;

     label06:
        $i2 = specialinvoke r1.<org.apache.xmlbeans.impl.values.XmlObjectBase: int compareValueImpl(org.apache.xmlbeans.XmlObject)>(r0);

        exitmonitor $r7;

     label07:
        if 0 == 0 goto label08;

        staticinvoke <org.apache.xmlbeans.impl.common.GlobalLock: void release()>();

     label08:
        return $i2;

     label09:
        $r14 := @caughtexception;

        exitmonitor $r7;

     label10:
        throw $r14;

     label11:
        $z1 = interfaceinvoke r0.<org.apache.xmlbeans.XmlObject: boolean isImmutable()>();

        if $z1 != 0 goto label12;

        $r3 = virtualinvoke r1.<org.apache.xmlbeans.impl.values.XmlObjectBase: java.lang.Object monitor()>();

        $r4 = interfaceinvoke r0.<org.apache.xmlbeans.XmlObject: java.lang.Object monitor()>();

        if $r3 != $r4 goto label18;

     label12:
        $r2 = virtualinvoke r1.<org.apache.xmlbeans.impl.values.XmlObjectBase: java.lang.Object monitor()>();

        entermonitor $r2;

     label13:
        $i0 = specialinvoke r1.<org.apache.xmlbeans.impl.values.XmlObjectBase: int compareValueImpl(org.apache.xmlbeans.XmlObject)>(r0);

        exitmonitor $r2;

     label14:
        if 0 == 0 goto label15;

        staticinvoke <org.apache.xmlbeans.impl.common.GlobalLock: void release()>();

     label15:
        return $i0;

     label16:
        $r13 := @caughtexception;

        exitmonitor $r2;

     label17:
        throw $r13;

     label18:
        staticinvoke <org.apache.xmlbeans.impl.common.GlobalLock: void acquire()>();

        z3 = 1;

        $r5 = virtualinvoke r1.<org.apache.xmlbeans.impl.values.XmlObjectBase: java.lang.Object monitor()>();

        entermonitor $r5;

     label19:
        $r6 = interfaceinvoke r0.<org.apache.xmlbeans.XmlObject: java.lang.Object monitor()>();

        entermonitor $r6;

     label20:
        staticinvoke <org.apache.xmlbeans.impl.common.GlobalLock: void release()>();

        z3 = 0;

        $i1 = specialinvoke r1.<org.apache.xmlbeans.impl.values.XmlObjectBase: int compareValueImpl(org.apache.xmlbeans.XmlObject)>(r0);

        exitmonitor $r6;

     label21:
        exitmonitor $r5;

     label22:
        if 0 == 0 goto label23;

        staticinvoke <org.apache.xmlbeans.impl.common.GlobalLock: void release()>();

     label23:
        return $i1;

     label24:
        $r12 := @caughtexception;

        exitmonitor $r6;

     label25:
        throw $r12;

     label26:
        $r11 := @caughtexception;

        exitmonitor $r5;

     label27:
        throw $r11;

     label28:
        $r9 := @caughtexception;

        $r10 = new org.apache.xmlbeans.XmlRuntimeException;

        specialinvoke $r10.<org.apache.xmlbeans.XmlRuntimeException: void <init>(java.lang.Throwable)>($r9);

        throw $r10;

     label29:
        $r8 := @caughtexception;

     label30:
        if z3 == 0 goto label31;

        staticinvoke <org.apache.xmlbeans.impl.common.GlobalLock: void release()>();

     label31:
        throw $r8;

        catch java.lang.Throwable from label06 to label07 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
        catch java.lang.Throwable from label13 to label14 with label16;
        catch java.lang.Throwable from label16 to label17 with label16;
        catch java.lang.Throwable from label20 to label21 with label24;
        catch java.lang.Throwable from label24 to label25 with label24;
        catch java.lang.Throwable from label19 to label22 with label26;
        catch java.lang.Throwable from label24 to label27 with label26;
        catch java.lang.InterruptedException from label02 to label03 with label28;
        catch java.lang.InterruptedException from label05 to label07 with label28;
        catch java.lang.InterruptedException from label09 to label14 with label28;
        catch java.lang.InterruptedException from label16 to label22 with label28;
        catch java.lang.InterruptedException from label24 to label28 with label28;
        catch java.lang.Throwable from label02 to label03 with label29;
        catch java.lang.Throwable from label05 to label07 with label29;
        catch java.lang.Throwable from label09 to label14 with label29;
        catch java.lang.Throwable from label16 to label22 with label29;
        catch java.lang.Throwable from label24 to label30 with label29;
    }

    protected int compare_to(org.apache.xmlbeans.XmlObject)
    {
        org.apache.xmlbeans.XmlObject r1;
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;
        boolean $z0;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        r1 := @parameter0: org.apache.xmlbeans.XmlObject;

        $z0 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: boolean equal_to(org.apache.xmlbeans.XmlObject)>(r1);

        if $z0 == 0 goto label1;

        return 0;

     label1:
        return 2;
    }

    protected abstract boolean equal_to(org.apache.xmlbeans.XmlObject);

    protected abstract int value_hash_code();

    public int valueHashCode()
    {
        java.lang.Throwable $r2;
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;
        int $i0;
        java.lang.Object $r1;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        $r1 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: java.lang.Object monitor()>();

        entermonitor $r1;

     label1:
        $i0 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: int value_hash_code()>();

        exitmonitor $r1;

     label2:
        return $i0;

     label3:
        $r2 := @caughtexception;

        exitmonitor $r1;

     label4:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public boolean isInstanceOf(org.apache.xmlbeans.SchemaType)
    {
        org.apache.xmlbeans.SchemaType[] $r2;
        org.apache.xmlbeans.impl.values.XmlObjectBase r4;
        java.util.HashSet $r1;
        java.util.List $r3;
        int $i0;
        org.apache.xmlbeans.SchemaType r0, r5, r6;
        boolean $z0;

        r4 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        r0 := @parameter0: org.apache.xmlbeans.SchemaType;

        $i0 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaType: int getSimpleVariety()>();

        if $i0 == 2 goto label4;

        r5 = virtualinvoke r4.<org.apache.xmlbeans.impl.values.XmlObjectBase: org.apache.xmlbeans.SchemaType instanceType()>();

     label1:
        if r5 == null goto label3;

        if r0 != r5 goto label2;

        return 1;

     label2:
        r5 = interfaceinvoke r5.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.SchemaType getBaseType()>();

        goto label1;

     label3:
        return 0;

     label4:
        $r1 = new java.util.HashSet;

        $r2 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.SchemaType[] getUnionConstituentTypes()>();

        $r3 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r2);

        specialinvoke $r1.<java.util.HashSet: void <init>(java.util.Collection)>($r3);

        r6 = virtualinvoke r4.<org.apache.xmlbeans.impl.values.XmlObjectBase: org.apache.xmlbeans.SchemaType instanceType()>();

     label5:
        if r6 == null goto label7;

        $z0 = interfaceinvoke $r1.<java.util.Set: boolean contains(java.lang.Object)>(r6);

        if $z0 == 0 goto label6;

        return 1;

     label6:
        r6 = interfaceinvoke r6.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.SchemaType getBaseType()>();

        goto label5;

     label7:
        return 0;
    }

    public final boolean equals(java.lang.Object)
    {
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;
        java.lang.Object r1;
        org.apache.xmlbeans.XmlObject r2;
        boolean $z0, $z1, $z2, $z3, $z4;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        r1 := @parameter0: java.lang.Object;

        $z0 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: boolean isImmutable()>();

        if $z0 != 0 goto label1;

        $z4 = specialinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

        return $z4;

     label1:
        $z1 = r1 instanceof org.apache.xmlbeans.XmlObject;

        if $z1 != 0 goto label2;

        return 0;

     label2:
        r2 = (org.apache.xmlbeans.XmlObject) r1;

        $z2 = interfaceinvoke r2.<org.apache.xmlbeans.XmlObject: boolean isImmutable()>();

        if $z2 != 0 goto label3;

        return 0;

     label3:
        $z3 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: boolean valueEquals(org.apache.xmlbeans.XmlObject)>(r2);

        return $z3;
    }

    public final int hashCode()
    {
        java.lang.Throwable $r2;
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;
        int $i0, $i1;
        java.lang.Object $r1;
        boolean $z0, $z1;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        $z0 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: boolean isImmutable()>();

        if $z0 != 0 goto label1;

        $i1 = specialinvoke r0.<java.lang.Object: int hashCode()>();

        return $i1;

     label1:
        $r1 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: java.lang.Object monitor()>();

        entermonitor $r1;

     label2:
        $z1 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: boolean isNil()>();

        if $z1 == 0 goto label4;

        exitmonitor $r1;

     label3:
        return 0;

     label4:
        $i0 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: int value_hash_code()>();

        exitmonitor $r1;

     label5:
        return $i0;

     label6:
        $r2 := @caughtexception;

        exitmonitor $r1;

     label7:
        throw $r2;

        catch java.lang.Throwable from label2 to label3 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public org.apache.xmlbeans.XmlObject[] selectChildren(javax.xml.namespace.QName)
    {
        java.lang.Throwable $r8;
        java.lang.Object[] $r5;
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;
        org.apache.xmlbeans.XmlCursor $r1;
        java.util.ArrayList $r2;
        int $i0;
        org.apache.xmlbeans.XmlObject $r7;
        boolean $z0, $z1, $z2;
        org.apache.xmlbeans.XmlObject[] $r4, $r6, r9, r10, r11;
        javax.xml.namespace.QName r3;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        r3 := @parameter0: javax.xml.namespace.QName;

        $r1 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: org.apache.xmlbeans.XmlCursor newCursor()>();

     label01:
        $z0 = interfaceinvoke $r1.<org.apache.xmlbeans.XmlCursor: boolean isContainer()>();

        if $z0 != 0 goto label03;

        r9 = <org.apache.xmlbeans.impl.values.XmlObjectBase: org.apache.xmlbeans.XmlObject[] EMPTY_RESULT>;

     label02:
        interfaceinvoke $r1.<org.apache.xmlbeans.XmlCursor: void dispose()>();

        return r9;

     label03:
        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        $z1 = interfaceinvoke $r1.<org.apache.xmlbeans.XmlCursor: boolean toChild(javax.xml.namespace.QName)>(r3);

        if $z1 == 0 goto label05;

     label04:
        $r7 = interfaceinvoke $r1.<org.apache.xmlbeans.XmlCursor: org.apache.xmlbeans.XmlObject getObject()>();

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r7);

        $z2 = interfaceinvoke $r1.<org.apache.xmlbeans.XmlCursor: boolean toNextSibling(javax.xml.namespace.QName)>(r3);

        if $z2 != 0 goto label04;

     label05:
        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        if $i0 != 0 goto label07;

        r10 = <org.apache.xmlbeans.impl.values.XmlObjectBase: org.apache.xmlbeans.XmlObject[] EMPTY_RESULT>;

     label06:
        interfaceinvoke $r1.<org.apache.xmlbeans.XmlCursor: void dispose()>();

        return r10;

     label07:
        $r4 = <org.apache.xmlbeans.impl.values.XmlObjectBase: org.apache.xmlbeans.XmlObject[] EMPTY_RESULT>;

        $r5 = interfaceinvoke $r2.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r4);

        $r6 = (org.apache.xmlbeans.XmlObject[]) $r5;

        r11 = (org.apache.xmlbeans.XmlObject[]) $r6;

     label08:
        interfaceinvoke $r1.<org.apache.xmlbeans.XmlCursor: void dispose()>();

        return r11;

     label09:
        $r8 := @caughtexception;

     label10:
        interfaceinvoke $r1.<org.apache.xmlbeans.XmlCursor: void dispose()>();

        throw $r8;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label03 to label06 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    public org.apache.xmlbeans.XmlObject[] selectChildren(java.lang.String, java.lang.String)
    {
        org.apache.xmlbeans.XmlObject[] $r4;
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;
        javax.xml.namespace.QName $r1;
        java.lang.String r2, r3;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        $r1 = new javax.xml.namespace.QName;

        specialinvoke $r1.<javax.xml.namespace.QName: void <init>(java.lang.String,java.lang.String)>(r2, r3);

        $r4 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: org.apache.xmlbeans.XmlObject[] selectChildren(javax.xml.namespace.QName)>($r1);

        return $r4;
    }

    public org.apache.xmlbeans.XmlObject[] selectChildren(org.apache.xmlbeans.QNameSet)
    {
        java.lang.Throwable $r11;
        java.lang.Object[] $r5;
        org.apache.xmlbeans.impl.values.XmlObjectBase r1;
        org.apache.xmlbeans.XmlCursor $r2;
        java.lang.AssertionError $r9;
        java.util.ArrayList $r3;
        org.apache.xmlbeans.QNameSet r0;
        int $i0;
        org.apache.xmlbeans.XmlObject $r8;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.lang.IllegalArgumentException $r10;
        org.apache.xmlbeans.XmlObject[] $r4, $r6, r12, r13, r14;
        javax.xml.namespace.QName $r7;

        r1 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        r0 := @parameter0: org.apache.xmlbeans.QNameSet;

        if r0 != null goto label01;

        $r10 = new java.lang.IllegalArgumentException;

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r10;

     label01:
        $r2 = virtualinvoke r1.<org.apache.xmlbeans.impl.values.XmlObjectBase: org.apache.xmlbeans.XmlCursor newCursor()>();

     label02:
        $z0 = interfaceinvoke $r2.<org.apache.xmlbeans.XmlCursor: boolean isContainer()>();

        if $z0 != 0 goto label04;

        r12 = <org.apache.xmlbeans.impl.values.XmlObjectBase: org.apache.xmlbeans.XmlObject[] EMPTY_RESULT>;

     label03:
        interfaceinvoke $r2.<org.apache.xmlbeans.XmlCursor: void dispose()>();

        return r12;

     label04:
        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        $z1 = interfaceinvoke $r2.<org.apache.xmlbeans.XmlCursor: boolean toFirstChild()>();

        if $z1 == 0 goto label08;

     label05:
        $z2 = <org.apache.xmlbeans.impl.values.XmlObjectBase: boolean $assertionsDisabled>;

        if $z2 != 0 goto label06;

        $z5 = interfaceinvoke $r2.<org.apache.xmlbeans.XmlCursor: boolean isContainer()>();

        if $z5 != 0 goto label06;

        $r9 = new java.lang.AssertionError;

        specialinvoke $r9.<java.lang.AssertionError: void <init>()>();

        throw $r9;

     label06:
        $r7 = interfaceinvoke $r2.<org.apache.xmlbeans.XmlCursor: javax.xml.namespace.QName getName()>();

        $z3 = virtualinvoke r0.<org.apache.xmlbeans.QNameSet: boolean contains(javax.xml.namespace.QName)>($r7);

        if $z3 == 0 goto label07;

        $r8 = interfaceinvoke $r2.<org.apache.xmlbeans.XmlCursor: org.apache.xmlbeans.XmlObject getObject()>();

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r8);

     label07:
        $z4 = interfaceinvoke $r2.<org.apache.xmlbeans.XmlCursor: boolean toNextSibling()>();

        if $z4 != 0 goto label05;

     label08:
        $i0 = interfaceinvoke $r3.<java.util.List: int size()>();

        if $i0 != 0 goto label10;

        r13 = <org.apache.xmlbeans.impl.values.XmlObjectBase: org.apache.xmlbeans.XmlObject[] EMPTY_RESULT>;

     label09:
        interfaceinvoke $r2.<org.apache.xmlbeans.XmlCursor: void dispose()>();

        return r13;

     label10:
        $r4 = <org.apache.xmlbeans.impl.values.XmlObjectBase: org.apache.xmlbeans.XmlObject[] EMPTY_RESULT>;

        $r5 = interfaceinvoke $r3.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r4);

        $r6 = (org.apache.xmlbeans.XmlObject[]) $r5;

        r14 = (org.apache.xmlbeans.XmlObject[]) $r6;

     label11:
        interfaceinvoke $r2.<org.apache.xmlbeans.XmlCursor: void dispose()>();

        return r14;

     label12:
        $r11 := @caughtexception;

     label13:
        interfaceinvoke $r2.<org.apache.xmlbeans.XmlCursor: void dispose()>();

        throw $r11;

        catch java.lang.Throwable from label02 to label03 with label12;
        catch java.lang.Throwable from label04 to label09 with label12;
        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.lang.Throwable from label12 to label13 with label12;
    }

    public org.apache.xmlbeans.XmlObject selectAttribute(javax.xml.namespace.QName)
    {
        java.lang.Throwable $r5;
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;
        org.apache.xmlbeans.XmlCursor $r1;
        javax.xml.namespace.QName $r2, r3;
        org.apache.xmlbeans.XmlObject $r4;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        r3 := @parameter0: javax.xml.namespace.QName;

        $r1 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: org.apache.xmlbeans.XmlCursor newCursor()>();

     label1:
        $z0 = interfaceinvoke $r1.<org.apache.xmlbeans.XmlCursor: boolean isContainer()>();

        if $z0 != 0 goto label3;

     label2:
        interfaceinvoke $r1.<org.apache.xmlbeans.XmlCursor: void dispose()>();

        return null;

     label3:
        $z1 = interfaceinvoke $r1.<org.apache.xmlbeans.XmlCursor: boolean toFirstAttribute()>();

        if $z1 == 0 goto label7;

     label4:
        $r2 = interfaceinvoke $r1.<org.apache.xmlbeans.XmlCursor: javax.xml.namespace.QName getName()>();

        $z2 = virtualinvoke $r2.<javax.xml.namespace.QName: boolean equals(java.lang.Object)>(r3);

        if $z2 == 0 goto label6;

        $r4 = interfaceinvoke $r1.<org.apache.xmlbeans.XmlCursor: org.apache.xmlbeans.XmlObject getObject()>();

     label5:
        interfaceinvoke $r1.<org.apache.xmlbeans.XmlCursor: void dispose()>();

        return $r4;

     label6:
        $z3 = interfaceinvoke $r1.<org.apache.xmlbeans.XmlCursor: boolean toNextAttribute()>();

        if $z3 != 0 goto label4;

     label7:
        interfaceinvoke $r1.<org.apache.xmlbeans.XmlCursor: void dispose()>();

        return null;

     label8:
        $r5 := @caughtexception;

     label9:
        interfaceinvoke $r1.<org.apache.xmlbeans.XmlCursor: void dispose()>();

        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label8;
        catch java.lang.Throwable from label3 to label5 with label8;
        catch java.lang.Throwable from label6 to label7 with label8;
        catch java.lang.Throwable from label8 to label9 with label8;
    }

    public org.apache.xmlbeans.XmlObject selectAttribute(java.lang.String, java.lang.String)
    {
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;
        javax.xml.namespace.QName $r1;
        java.lang.String r2, r3;
        org.apache.xmlbeans.XmlObject $r4;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        $r1 = new javax.xml.namespace.QName;

        specialinvoke $r1.<javax.xml.namespace.QName: void <init>(java.lang.String,java.lang.String)>(r2, r3);

        $r4 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: org.apache.xmlbeans.XmlObject selectAttribute(javax.xml.namespace.QName)>($r1);

        return $r4;
    }

    public org.apache.xmlbeans.XmlObject[] selectAttributes(org.apache.xmlbeans.QNameSet)
    {
        java.lang.Throwable $r10;
        java.lang.Object[] $r5;
        org.apache.xmlbeans.impl.values.XmlObjectBase r1;
        org.apache.xmlbeans.XmlCursor $r2;
        java.util.ArrayList $r3;
        org.apache.xmlbeans.QNameSet r0;
        int $i0;
        org.apache.xmlbeans.XmlObject $r8;
        boolean $z0, $z1, $z2, $z3;
        java.lang.IllegalArgumentException $r9;
        org.apache.xmlbeans.XmlObject[] $r4, $r6, r11, r12, r13;
        javax.xml.namespace.QName $r7;

        r1 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        r0 := @parameter0: org.apache.xmlbeans.QNameSet;

        if r0 != null goto label01;

        $r9 = new java.lang.IllegalArgumentException;

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r9;

     label01:
        $r2 = virtualinvoke r1.<org.apache.xmlbeans.impl.values.XmlObjectBase: org.apache.xmlbeans.XmlCursor newCursor()>();

     label02:
        $z0 = interfaceinvoke $r2.<org.apache.xmlbeans.XmlCursor: boolean isContainer()>();

        if $z0 != 0 goto label04;

        r11 = <org.apache.xmlbeans.impl.values.XmlObjectBase: org.apache.xmlbeans.XmlObject[] EMPTY_RESULT>;

     label03:
        interfaceinvoke $r2.<org.apache.xmlbeans.XmlCursor: void dispose()>();

        return r11;

     label04:
        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        $z1 = interfaceinvoke $r2.<org.apache.xmlbeans.XmlCursor: boolean toFirstAttribute()>();

        if $z1 == 0 goto label07;

     label05:
        $r7 = interfaceinvoke $r2.<org.apache.xmlbeans.XmlCursor: javax.xml.namespace.QName getName()>();

        $z2 = virtualinvoke r0.<org.apache.xmlbeans.QNameSet: boolean contains(javax.xml.namespace.QName)>($r7);

        if $z2 == 0 goto label06;

        $r8 = interfaceinvoke $r2.<org.apache.xmlbeans.XmlCursor: org.apache.xmlbeans.XmlObject getObject()>();

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r8);

     label06:
        $z3 = interfaceinvoke $r2.<org.apache.xmlbeans.XmlCursor: boolean toNextAttribute()>();

        if $z3 != 0 goto label05;

     label07:
        $i0 = interfaceinvoke $r3.<java.util.List: int size()>();

        if $i0 != 0 goto label09;

        r12 = <org.apache.xmlbeans.impl.values.XmlObjectBase: org.apache.xmlbeans.XmlObject[] EMPTY_RESULT>;

     label08:
        interfaceinvoke $r2.<org.apache.xmlbeans.XmlCursor: void dispose()>();

        return r12;

     label09:
        $r4 = <org.apache.xmlbeans.impl.values.XmlObjectBase: org.apache.xmlbeans.XmlObject[] EMPTY_RESULT>;

        $r5 = interfaceinvoke $r3.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r4);

        $r6 = (org.apache.xmlbeans.XmlObject[]) $r5;

        r13 = (org.apache.xmlbeans.XmlObject[]) $r6;

     label10:
        interfaceinvoke $r2.<org.apache.xmlbeans.XmlCursor: void dispose()>();

        return r13;

     label11:
        $r10 := @caughtexception;

     label12:
        interfaceinvoke $r2.<org.apache.xmlbeans.XmlCursor: void dispose()>();

        throw $r10;

        catch java.lang.Throwable from label02 to label03 with label11;
        catch java.lang.Throwable from label04 to label08 with label11;
        catch java.lang.Throwable from label09 to label10 with label11;
        catch java.lang.Throwable from label11 to label12 with label11;
    }

    public java.lang.Object writeReplace()
    {
        java.lang.Throwable $r5;
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;
        java.lang.Object $r1;
        org.apache.xmlbeans.XmlObject $r3;
        org.apache.xmlbeans.impl.values.XmlObjectBase$SerializedRootObject $r4;
        org.apache.xmlbeans.impl.values.XmlObjectBase$SerializedInteriorObject $r2;
        boolean $z0;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        $r1 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: java.lang.Object monitor()>();

        entermonitor $r1;

     label1:
        $z0 = specialinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: boolean isRootXmlObject()>();

        if $z0 == 0 goto label3;

        $r4 = new org.apache.xmlbeans.impl.values.XmlObjectBase$SerializedRootObject;

        specialinvoke $r4.<org.apache.xmlbeans.impl.values.XmlObjectBase$SerializedRootObject: void <init>(org.apache.xmlbeans.XmlObject,org.apache.xmlbeans.impl.values.XmlObjectBase$1)>(r0, null);

        exitmonitor $r1;

     label2:
        return $r4;

     label3:
        $r2 = new org.apache.xmlbeans.impl.values.XmlObjectBase$SerializedInteriorObject;

        $r3 = specialinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: org.apache.xmlbeans.XmlObject getRootXmlObject()>();

        specialinvoke $r2.<org.apache.xmlbeans.impl.values.XmlObjectBase$SerializedInteriorObject: void <init>(org.apache.xmlbeans.XmlObject,org.apache.xmlbeans.XmlObject,org.apache.xmlbeans.impl.values.XmlObjectBase$1)>(r0, $r3, null);

        exitmonitor $r1;

     label4:
        return $r2;

     label5:
        $r5 := @caughtexception;

        exitmonitor $r1;

     label6:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    private boolean isRootXmlObject()
    {
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;
        org.apache.xmlbeans.XmlCursor $r1;
        boolean $z0, $z1;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        $r1 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: org.apache.xmlbeans.XmlCursor newCursor()>();

        if $r1 != null goto label1;

        return 0;

     label1:
        $z0 = interfaceinvoke $r1.<org.apache.xmlbeans.XmlCursor: boolean toParent()>();

        if $z0 != 0 goto label2;

        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        interfaceinvoke $r1.<org.apache.xmlbeans.XmlCursor: void dispose()>();

        return $z1;
    }

    private org.apache.xmlbeans.XmlObject getRootXmlObject()
    {
        org.apache.xmlbeans.XmlObject $r2;
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;
        org.apache.xmlbeans.XmlCursor $r1;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        $r1 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: org.apache.xmlbeans.XmlCursor newCursor()>();

        if $r1 != null goto label1;

        return r0;

     label1:
        interfaceinvoke $r1.<org.apache.xmlbeans.XmlCursor: void toStartDoc()>();

        $r2 = interfaceinvoke $r1.<org.apache.xmlbeans.XmlCursor: org.apache.xmlbeans.XmlObject getObject()>();

        interfaceinvoke $r1.<org.apache.xmlbeans.XmlCursor: void dispose()>();

        return $r2;
    }

    protected static java.lang.Object java_value(org.apache.xmlbeans.XmlObject)
    {
        java.lang.Float $r15;
        byte[] $r18;
        java.lang.Integer $r10;
        java.math.BigDecimal $r7;
        org.apache.xmlbeans.GDuration $r6;
        byte $b6;
        java.lang.Long $r9;
        java.lang.Short $r11;
        java.math.BigInteger $r8;
        org.apache.xmlbeans.SchemaType $r2, $r4;
        java.lang.Byte $r12;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.util.List $r22;
        float $f0;
        javax.xml.namespace.QName $r16;
        java.lang.Double $r14;
        long $l3;
        java.lang.AssertionError $r13, $r20, $r23;
        short $s5;
        java.util.Calendar $r5;
        int $i0, $i1, $i2, $i4;
        java.lang.Boolean $r24;
        org.apache.xmlbeans.XmlObject r0;
        java.lang.String $r17, $r19;
        org.apache.xmlbeans.SimpleValue $r1, r3, $r21;
        double $d0;

        r0 := @parameter0: org.apache.xmlbeans.XmlObject;

        $z0 = interfaceinvoke r0.<org.apache.xmlbeans.XmlObject: boolean isNil()>();

        if $z0 == 0 goto label01;

        return null;

     label01:
        $z1 = r0 instanceof org.apache.xmlbeans.XmlAnySimpleType;

        if $z1 != 0 goto label02;

        return r0;

     label02:
        $r1 = (org.apache.xmlbeans.SimpleValue) r0;

        $r2 = interfaceinvoke $r1.<org.apache.xmlbeans.SimpleValue: org.apache.xmlbeans.SchemaType instanceType()>();

        $z2 = <org.apache.xmlbeans.impl.values.XmlObjectBase: boolean $assertionsDisabled>;

        if $z2 != 0 goto label03;

        if $r2 != null goto label03;

        $r23 = new java.lang.AssertionError;

        specialinvoke $r23.<java.lang.AssertionError: void <init>(java.lang.Object)>("Nil case should have been handled above");

        throw $r23;

     label03:
        $i0 = interfaceinvoke $r2.<org.apache.xmlbeans.SchemaType: int getSimpleVariety()>();

        if $i0 != 3 goto label04;

        $r21 = (org.apache.xmlbeans.SimpleValue) r0;

        $r22 = interfaceinvoke $r21.<org.apache.xmlbeans.SimpleValue: java.util.List getListValue()>();

        return $r22;

     label04:
        r3 = (org.apache.xmlbeans.SimpleValue) r0;

        $r4 = interfaceinvoke $r2.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.SchemaType getPrimitiveType()>();

        $i1 = interfaceinvoke $r4.<org.apache.xmlbeans.SchemaType: int getBuiltinTypeCode()>();

        tableswitch($i1)
        {
            case 2: goto label24;
            case 3: goto label05;
            case 4: goto label08;
            case 5: goto label08;
            case 6: goto label20;
            case 7: goto label09;
            case 8: goto label24;
            case 9: goto label10;
            case 10: goto label11;
            case 11: goto label12;
            case 12: goto label24;
            case 13: goto label21;
            case 14: goto label22;
            case 15: goto label22;
            case 16: goto label22;
            case 17: goto label22;
            case 18: goto label22;
            case 19: goto label22;
            case 20: goto label22;
            case 21: goto label22;
            default: goto label23;
        };

     label05:
        $z4 = interfaceinvoke r3.<org.apache.xmlbeans.SimpleValue: boolean getBooleanValue()>();

        if $z4 == 0 goto label06;

        $r24 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        goto label07;

     label06:
        $r24 = <java.lang.Boolean: java.lang.Boolean FALSE>;

     label07:
        return $r24;

     label08:
        $r18 = interfaceinvoke r3.<org.apache.xmlbeans.SimpleValue: byte[] getByteArrayValue()>();

        return $r18;

     label09:
        $r16 = interfaceinvoke r3.<org.apache.xmlbeans.SimpleValue: javax.xml.namespace.QName getQNameValue()>();

        return $r16;

     label10:
        $r15 = new java.lang.Float;

        $f0 = interfaceinvoke r3.<org.apache.xmlbeans.SimpleValue: float getFloatValue()>();

        specialinvoke $r15.<java.lang.Float: void <init>(float)>($f0);

        return $r15;

     label11:
        $r14 = new java.lang.Double;

        $d0 = interfaceinvoke r3.<org.apache.xmlbeans.SimpleValue: double getDoubleValue()>();

        specialinvoke $r14.<java.lang.Double: void <init>(double)>($d0);

        return $r14;

     label12:
        $i2 = interfaceinvoke $r2.<org.apache.xmlbeans.SchemaType: int getDecimalSize()>();

        lookupswitch($i2)
        {
            case 8: goto label13;
            case 16: goto label14;
            case 32: goto label15;
            case 64: goto label16;
            case 1000000: goto label17;
            case 1000001: goto label19;
            default: goto label18;
        };

     label13:
        $r12 = new java.lang.Byte;

        $b6 = interfaceinvoke r3.<org.apache.xmlbeans.SimpleValue: byte getByteValue()>();

        specialinvoke $r12.<java.lang.Byte: void <init>(byte)>($b6);

        return $r12;

     label14:
        $r11 = new java.lang.Short;

        $s5 = interfaceinvoke r3.<org.apache.xmlbeans.SimpleValue: short getShortValue()>();

        specialinvoke $r11.<java.lang.Short: void <init>(short)>($s5);

        return $r11;

     label15:
        $r10 = new java.lang.Integer;

        $i4 = interfaceinvoke r3.<org.apache.xmlbeans.SimpleValue: int getIntValue()>();

        specialinvoke $r10.<java.lang.Integer: void <init>(int)>($i4);

        return $r10;

     label16:
        $r9 = new java.lang.Long;

        $l3 = interfaceinvoke r3.<org.apache.xmlbeans.SimpleValue: long getLongValue()>();

        specialinvoke $r9.<java.lang.Long: void <init>(long)>($l3);

        return $r9;

     label17:
        $r8 = interfaceinvoke r3.<org.apache.xmlbeans.SimpleValue: java.math.BigInteger getBigIntegerValue()>();

        return $r8;

     label18:
        $z3 = <org.apache.xmlbeans.impl.values.XmlObjectBase: boolean $assertionsDisabled>;

        if $z3 != 0 goto label19;

        $r13 = new java.lang.AssertionError;

        specialinvoke $r13.<java.lang.AssertionError: void <init>(java.lang.Object)>("invalid numeric bit count");

        throw $r13;

     label19:
        $r7 = interfaceinvoke r3.<org.apache.xmlbeans.SimpleValue: java.math.BigDecimal getBigDecimalValue()>();

        return $r7;

     label20:
        $r17 = interfaceinvoke r3.<org.apache.xmlbeans.SimpleValue: java.lang.String getStringValue()>();

        return $r17;

     label21:
        $r6 = interfaceinvoke r3.<org.apache.xmlbeans.SimpleValue: org.apache.xmlbeans.GDuration getGDurationValue()>();

        return $r6;

     label22:
        $r5 = interfaceinvoke r3.<org.apache.xmlbeans.SimpleValue: java.util.Calendar getCalendarValue()>();

        return $r5;

     label23:
        $z5 = <org.apache.xmlbeans.impl.values.XmlObjectBase: boolean $assertionsDisabled>;

        if $z5 != 0 goto label24;

        $r20 = new java.lang.AssertionError;

        specialinvoke $r20.<java.lang.AssertionError: void <init>(java.lang.Object)>("encountered nonprimitive type.");

        throw $r20;

     label24:
        $r19 = interfaceinvoke r3.<org.apache.xmlbeans.SimpleValue: java.lang.String getStringValue()>();

        return $r19;
    }

    protected org.apache.xmlbeans.XmlAnySimpleType get_default_attribute_value(javax.xml.namespace.QName)
    {
        org.apache.xmlbeans.XmlAnySimpleType $r5;
        org.apache.xmlbeans.SchemaLocalAttribute $r4;
        org.apache.xmlbeans.impl.values.XmlObjectBase r0;
        org.apache.xmlbeans.SchemaAttributeModel $r2;
        javax.xml.namespace.QName r3;
        org.apache.xmlbeans.SchemaType $r1;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlObjectBase;

        r3 := @parameter0: javax.xml.namespace.QName;

        $r1 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: org.apache.xmlbeans.SchemaType schemaType()>();

        $r2 = interfaceinvoke $r1.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.SchemaAttributeModel getAttributeModel()>();

        if $r2 != null goto label1;

        return null;

     label1:
        $r4 = interfaceinvoke $r2.<org.apache.xmlbeans.SchemaAttributeModel: org.apache.xmlbeans.SchemaLocalAttribute getAttribute(javax.xml.namespace.QName)>(r3);

        if $r4 != null goto label2;

        return null;

     label2:
        $r5 = interfaceinvoke $r4.<org.apache.xmlbeans.SchemaLocalAttribute: org.apache.xmlbeans.XmlAnySimpleType getDefaultValue()>();

        return $r5;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Throwable $r4;
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.NoClassDefFoundError: java.lang.Throwable initCause(java.lang.Throwable)>($r2);

        throw $r4;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        org.apache.xmlbeans.XmlObject[] $r5;
        org.apache.xmlbeans.XmlOptions $r4;
        java.lang.Class $r0, $r6;
        java.math.BigInteger $r2, $r3;
        org.apache.xmlbeans.impl.values.XmlObjectBase$ValueOutOfRangeValidationContext $r1;
        boolean $z0, $z1;

        <org.apache.xmlbeans.impl.values.XmlObjectBase: int FLAGS_ELEMENT> = 7;

        <org.apache.xmlbeans.impl.values.XmlObjectBase: int FLAGS_DATED> = 672;

        <org.apache.xmlbeans.impl.values.XmlObjectBase: int FLAG_VALIDATE_ON_SET> = 65536;

        <org.apache.xmlbeans.impl.values.XmlObjectBase: int FLAG_NOT_VARIABLE> = 32768;

        <org.apache.xmlbeans.impl.values.XmlObjectBase: int FLAG_COMPLEXCONTENT> = 16384;

        <org.apache.xmlbeans.impl.values.XmlObjectBase: int FLAG_COMPLEXTYPE> = 8192;

        <org.apache.xmlbeans.impl.values.XmlObjectBase: int FLAG_IMMUTABLE> = 4096;

        <org.apache.xmlbeans.impl.values.XmlObjectBase: int FLAG_ORPHANED> = 2048;

        <org.apache.xmlbeans.impl.values.XmlObjectBase: int FLAG_SETTINGDEFAULT> = 1024;

        <org.apache.xmlbeans.impl.values.XmlObjectBase: int FLAG_ELEMENT_DATED> = 512;

        <org.apache.xmlbeans.impl.values.XmlObjectBase: int FLAG_ISDEFAULT> = 256;

        <org.apache.xmlbeans.impl.values.XmlObjectBase: int FLAG_NIL_DATED> = 128;

        <org.apache.xmlbeans.impl.values.XmlObjectBase: int FLAG_NIL> = 64;

        <org.apache.xmlbeans.impl.values.XmlObjectBase: int FLAG_VALUE_DATED> = 32;

        <org.apache.xmlbeans.impl.values.XmlObjectBase: int FLAG_STORE> = 16;

        <org.apache.xmlbeans.impl.values.XmlObjectBase: int FLAG_ATTRIBUTE> = 8;

        <org.apache.xmlbeans.impl.values.XmlObjectBase: int FLAG_FIXED> = 4;

        <org.apache.xmlbeans.impl.values.XmlObjectBase: int FLAG_HASDEFAULT> = 2;

        <org.apache.xmlbeans.impl.values.XmlObjectBase: int FLAG_NILLABLE> = 1;

        <org.apache.xmlbeans.impl.values.XmlObjectBase: short KIND_SETTERHELPER_ARRAYITEM> = 2;

        <org.apache.xmlbeans.impl.values.XmlObjectBase: short KIND_SETTERHELPER_SINGLETON> = 1;

        <org.apache.xmlbeans.impl.values.XmlObjectBase: short MINOR_VERSION_NUMBER> = 1;

        <org.apache.xmlbeans.impl.values.XmlObjectBase: short MAJOR_VERSION_NUMBER> = 1;

        $r0 = <org.apache.xmlbeans.impl.values.XmlObjectBase: java.lang.Class class$org$apache$xmlbeans$impl$values$XmlObjectBase>;

        if $r0 != null goto label1;

        $r6 = staticinvoke <org.apache.xmlbeans.impl.values.XmlObjectBase: java.lang.Class class$(java.lang.String)>("org.apache.xmlbeans.impl.values.XmlObjectBase");

        <org.apache.xmlbeans.impl.values.XmlObjectBase: java.lang.Class class$org$apache$xmlbeans$impl$values$XmlObjectBase> = $r6;

        goto label2;

     label1:
        $r6 = <org.apache.xmlbeans.impl.values.XmlObjectBase: java.lang.Class class$org$apache$xmlbeans$impl$values$XmlObjectBase>;

     label2:
        $z0 = virtualinvoke $r6.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        <org.apache.xmlbeans.impl.values.XmlObjectBase: boolean $assertionsDisabled> = $z1;

        $r1 = new org.apache.xmlbeans.impl.values.XmlObjectBase$ValueOutOfRangeValidationContext;

        specialinvoke $r1.<org.apache.xmlbeans.impl.values.XmlObjectBase$ValueOutOfRangeValidationContext: void <init>(org.apache.xmlbeans.impl.values.XmlObjectBase$1)>(null);

        <org.apache.xmlbeans.impl.values.XmlObjectBase: org.apache.xmlbeans.impl.common.ValidationContext _voorVc> = $r1;

        $r2 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(9223372036854775807L);

        <org.apache.xmlbeans.impl.values.XmlObjectBase: java.math.BigInteger _max> = $r2;

        $r3 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(-9223372036854775808L);

        <org.apache.xmlbeans.impl.values.XmlObjectBase: java.math.BigInteger _min> = $r3;

        $r4 = staticinvoke <org.apache.xmlbeans.impl.values.XmlObjectBase: org.apache.xmlbeans.XmlOptions buildInnerPrettyOptions()>();

        <org.apache.xmlbeans.impl.values.XmlObjectBase: org.apache.xmlbeans.XmlOptions _toStringOptions> = $r4;

        $r5 = newarray (org.apache.xmlbeans.XmlObject)[0];

        <org.apache.xmlbeans.impl.values.XmlObjectBase: org.apache.xmlbeans.XmlObject[] EMPTY_RESULT> = $r5;

        return;
    }
}
