public class org.xmlpull.v1.wrapper.classic.StaticXmlPullParserWrapper extends org.xmlpull.v1.wrapper.classic.XmlPullParserDelegate implements org.xmlpull.v1.wrapper.XmlPullParserWrapper
{

    public void <init>(org.xmlpull.v1.XmlPullParser)
    {
        org.xmlpull.v1.wrapper.classic.StaticXmlPullParserWrapper r0;
        org.xmlpull.v1.XmlPullParser r1;

        r0 := @this: org.xmlpull.v1.wrapper.classic.StaticXmlPullParserWrapper;

        r1 := @parameter0: org.xmlpull.v1.XmlPullParser;

        specialinvoke r0.<org.xmlpull.v1.wrapper.classic.XmlPullParserDelegate: void <init>(org.xmlpull.v1.XmlPullParser)>(r1);

        return;
    }

    public java.lang.String getAttributeValue(java.lang.String)
    {
        org.xmlpull.v1.wrapper.classic.StaticXmlPullParserWrapper r0;
        java.lang.String r1, $r3;
        org.xmlpull.v1.XmlPullParser $r2;

        r0 := @this: org.xmlpull.v1.wrapper.classic.StaticXmlPullParserWrapper;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.xmlpull.v1.wrapper.classic.XmlPullParserDelegate: org.xmlpull.v1.XmlPullParser pp>;

        $r3 = staticinvoke <org.xmlpull.v1.util.XmlPullUtil: java.lang.String getAttributeValue(org.xmlpull.v1.XmlPullParser,java.lang.String)>($r2, r1);

        return $r3;
    }

    public java.lang.String getRequiredAttributeValue(java.lang.String) throws java.io.IOException, org.xmlpull.v1.XmlPullParserException
    {
        org.xmlpull.v1.wrapper.classic.StaticXmlPullParserWrapper r0;
        java.lang.String r1, $r3;
        org.xmlpull.v1.XmlPullParser $r2;

        r0 := @this: org.xmlpull.v1.wrapper.classic.StaticXmlPullParserWrapper;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.xmlpull.v1.wrapper.classic.XmlPullParserDelegate: org.xmlpull.v1.XmlPullParser pp>;

        $r3 = staticinvoke <org.xmlpull.v1.util.XmlPullUtil: java.lang.String getRequiredAttributeValue(org.xmlpull.v1.XmlPullParser,java.lang.String,java.lang.String)>($r2, null, r1);

        return $r3;
    }

    public java.lang.String getRequiredAttributeValue(java.lang.String, java.lang.String) throws java.io.IOException, org.xmlpull.v1.XmlPullParserException
    {
        org.xmlpull.v1.wrapper.classic.StaticXmlPullParserWrapper r0;
        java.lang.String r1, r2, $r4;
        org.xmlpull.v1.XmlPullParser $r3;

        r0 := @this: org.xmlpull.v1.wrapper.classic.StaticXmlPullParserWrapper;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = r0.<org.xmlpull.v1.wrapper.classic.XmlPullParserDelegate: org.xmlpull.v1.XmlPullParser pp>;

        $r4 = staticinvoke <org.xmlpull.v1.util.XmlPullUtil: java.lang.String getRequiredAttributeValue(org.xmlpull.v1.XmlPullParser,java.lang.String,java.lang.String)>($r3, r1, r2);

        return $r4;
    }

    public java.lang.String getRequiredElementText(java.lang.String, java.lang.String) throws java.io.IOException, org.xmlpull.v1.XmlPullParserException
    {
        org.xmlpull.v1.wrapper.classic.StaticXmlPullParserWrapper r1;
        org.xmlpull.v1.XmlPullParserException $r5;
        java.lang.String r0, r2, r6;
        boolean $z0;
        org.xmlpull.v1.XmlPullParser $r3, $r4;

        r1 := @this: org.xmlpull.v1.wrapper.classic.StaticXmlPullParserWrapper;

        r2 := @parameter0: java.lang.String;

        r0 := @parameter1: java.lang.String;

        if r0 != null goto label1;

        $r5 = new org.xmlpull.v1.XmlPullParserException;

        specialinvoke $r5.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String)>("name for element can not be null");

        throw $r5;

     label1:
        r6 = null;

        virtualinvoke r1.<org.xmlpull.v1.wrapper.classic.StaticXmlPullParserWrapper: void nextStartTag(java.lang.String,java.lang.String)>(r2, r0);

        $z0 = virtualinvoke r1.<org.xmlpull.v1.wrapper.classic.StaticXmlPullParserWrapper: boolean isNil()>();

        if $z0 == 0 goto label2;

        virtualinvoke r1.<org.xmlpull.v1.wrapper.classic.StaticXmlPullParserWrapper: void nextEndTag(java.lang.String,java.lang.String)>(r2, r0);

        goto label3;

     label2:
        $r3 = r1.<org.xmlpull.v1.wrapper.classic.XmlPullParserDelegate: org.xmlpull.v1.XmlPullParser pp>;

        r6 = interfaceinvoke $r3.<org.xmlpull.v1.XmlPullParser: java.lang.String nextText()>();

     label3:
        $r4 = r1.<org.xmlpull.v1.wrapper.classic.XmlPullParserDelegate: org.xmlpull.v1.XmlPullParser pp>;

        interfaceinvoke $r4.<org.xmlpull.v1.XmlPullParser: void require(int,java.lang.String,java.lang.String)>(3, r2, r0);

        return r6;
    }

    public boolean isNil() throws java.io.IOException, org.xmlpull.v1.XmlPullParserException
    {
        org.xmlpull.v1.wrapper.classic.StaticXmlPullParserWrapper r0;
        java.lang.String $r2, $r3;
        org.xmlpull.v1.XmlPullParser $r1;
        boolean $z0, z1;

        r0 := @this: org.xmlpull.v1.wrapper.classic.StaticXmlPullParserWrapper;

        z1 = 0;

        $r1 = r0.<org.xmlpull.v1.wrapper.classic.XmlPullParserDelegate: org.xmlpull.v1.XmlPullParser pp>;

        $r2 = interfaceinvoke $r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>("http://www.w3.org/2001/XMLSchema-instance", "nil");

        $r3 = "true";

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label1;

        z1 = 1;

     label1:
        return z1;
    }

    public java.lang.String getPITarget() throws java.lang.IllegalStateException
    {
        java.lang.String $r2;
        org.xmlpull.v1.wrapper.classic.StaticXmlPullParserWrapper r0;
        org.xmlpull.v1.XmlPullParser $r1;

        r0 := @this: org.xmlpull.v1.wrapper.classic.StaticXmlPullParserWrapper;

        $r1 = r0.<org.xmlpull.v1.wrapper.classic.XmlPullParserDelegate: org.xmlpull.v1.XmlPullParser pp>;

        $r2 = staticinvoke <org.xmlpull.v1.util.XmlPullUtil: java.lang.String getPITarget(org.xmlpull.v1.XmlPullParser)>($r1);

        return $r2;
    }

    public java.lang.String getPIData() throws java.lang.IllegalStateException
    {
        java.lang.String $r2;
        org.xmlpull.v1.wrapper.classic.StaticXmlPullParserWrapper r0;
        org.xmlpull.v1.XmlPullParser $r1;

        r0 := @this: org.xmlpull.v1.wrapper.classic.StaticXmlPullParserWrapper;

        $r1 = r0.<org.xmlpull.v1.wrapper.classic.XmlPullParserDelegate: org.xmlpull.v1.XmlPullParser pp>;

        $r2 = staticinvoke <org.xmlpull.v1.util.XmlPullUtil: java.lang.String getPIData(org.xmlpull.v1.XmlPullParser)>($r1);

        return $r2;
    }

    public boolean matches(int, java.lang.String, java.lang.String) throws org.xmlpull.v1.XmlPullParserException
    {
        org.xmlpull.v1.wrapper.classic.StaticXmlPullParserWrapper r0;
        int i0;
        java.lang.String r1, r2;
        org.xmlpull.v1.XmlPullParser $r3;
        boolean $z0;

        r0 := @this: org.xmlpull.v1.wrapper.classic.StaticXmlPullParserWrapper;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        $r3 = r0.<org.xmlpull.v1.wrapper.classic.XmlPullParserDelegate: org.xmlpull.v1.XmlPullParser pp>;

        $z0 = staticinvoke <org.xmlpull.v1.util.XmlPullUtil: boolean matches(org.xmlpull.v1.XmlPullParser,int,java.lang.String,java.lang.String)>($r3, i0, r1, r2);

        return $z0;
    }

    public void nextStartTag() throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    {
        org.xmlpull.v1.wrapper.classic.StaticXmlPullParserWrapper r0;
        org.xmlpull.v1.XmlPullParserException $r2;
        java.lang.StringBuffer $r3, $r4, $r7;
        int $i0;
        java.lang.String $r6, $r8;
        org.xmlpull.v1.XmlPullParser $r1, $r5;

        r0 := @this: org.xmlpull.v1.wrapper.classic.StaticXmlPullParserWrapper;

        $r1 = r0.<org.xmlpull.v1.wrapper.classic.XmlPullParserDelegate: org.xmlpull.v1.XmlPullParser pp>;

        $i0 = interfaceinvoke $r1.<org.xmlpull.v1.XmlPullParser: int nextTag()>();

        if $i0 == 2 goto label1;

        $r2 = new org.xmlpull.v1.XmlPullParserException;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("expected START_TAG and not ");

        $r5 = r0.<org.xmlpull.v1.wrapper.classic.XmlPullParserDelegate: org.xmlpull.v1.XmlPullParser pp>;

        $r6 = interfaceinvoke $r5.<org.xmlpull.v1.XmlPullParser: java.lang.String getPositionDescription()>();

        $r7 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r2.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String)>($r8);

        throw $r2;

     label1:
        return;
    }

    public void nextStartTag(java.lang.String) throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    {
        org.xmlpull.v1.wrapper.classic.StaticXmlPullParserWrapper r0;
        java.lang.String r2;
        org.xmlpull.v1.XmlPullParser $r1, $r3;

        r0 := @this: org.xmlpull.v1.wrapper.classic.StaticXmlPullParserWrapper;

        r2 := @parameter0: java.lang.String;

        $r1 = r0.<org.xmlpull.v1.wrapper.classic.XmlPullParserDelegate: org.xmlpull.v1.XmlPullParser pp>;

        interfaceinvoke $r1.<org.xmlpull.v1.XmlPullParser: int nextTag()>();

        $r3 = r0.<org.xmlpull.v1.wrapper.classic.XmlPullParserDelegate: org.xmlpull.v1.XmlPullParser pp>;

        interfaceinvoke $r3.<org.xmlpull.v1.XmlPullParser: void require(int,java.lang.String,java.lang.String)>(2, null, r2);

        return;
    }

    public void nextStartTag(java.lang.String, java.lang.String) throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    {
        org.xmlpull.v1.wrapper.classic.StaticXmlPullParserWrapper r0;
        java.lang.String r2, r3;
        org.xmlpull.v1.XmlPullParser $r1, $r4;

        r0 := @this: org.xmlpull.v1.wrapper.classic.StaticXmlPullParserWrapper;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        $r1 = r0.<org.xmlpull.v1.wrapper.classic.XmlPullParserDelegate: org.xmlpull.v1.XmlPullParser pp>;

        interfaceinvoke $r1.<org.xmlpull.v1.XmlPullParser: int nextTag()>();

        $r4 = r0.<org.xmlpull.v1.wrapper.classic.XmlPullParserDelegate: org.xmlpull.v1.XmlPullParser pp>;

        interfaceinvoke $r4.<org.xmlpull.v1.XmlPullParser: void require(int,java.lang.String,java.lang.String)>(2, r2, r3);

        return;
    }

    public void nextEndTag() throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    {
        org.xmlpull.v1.wrapper.classic.StaticXmlPullParserWrapper r0;
        org.xmlpull.v1.XmlPullParser $r1;

        r0 := @this: org.xmlpull.v1.wrapper.classic.StaticXmlPullParserWrapper;

        $r1 = r0.<org.xmlpull.v1.wrapper.classic.XmlPullParserDelegate: org.xmlpull.v1.XmlPullParser pp>;

        staticinvoke <org.xmlpull.v1.util.XmlPullUtil: void nextEndTag(org.xmlpull.v1.XmlPullParser)>($r1);

        return;
    }

    public void nextEndTag(java.lang.String) throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    {
        java.lang.String r1;
        org.xmlpull.v1.wrapper.classic.StaticXmlPullParserWrapper r0;
        org.xmlpull.v1.XmlPullParser $r2;

        r0 := @this: org.xmlpull.v1.wrapper.classic.StaticXmlPullParserWrapper;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.xmlpull.v1.wrapper.classic.XmlPullParserDelegate: org.xmlpull.v1.XmlPullParser pp>;

        staticinvoke <org.xmlpull.v1.util.XmlPullUtil: void nextEndTag(org.xmlpull.v1.XmlPullParser,java.lang.String,java.lang.String)>($r2, null, r1);

        return;
    }

    public void nextEndTag(java.lang.String, java.lang.String) throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    {
        org.xmlpull.v1.wrapper.classic.StaticXmlPullParserWrapper r0;
        java.lang.String r1, r2;
        org.xmlpull.v1.XmlPullParser $r3;

        r0 := @this: org.xmlpull.v1.wrapper.classic.StaticXmlPullParserWrapper;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = r0.<org.xmlpull.v1.wrapper.classic.XmlPullParserDelegate: org.xmlpull.v1.XmlPullParser pp>;

        staticinvoke <org.xmlpull.v1.util.XmlPullUtil: void nextEndTag(org.xmlpull.v1.XmlPullParser,java.lang.String,java.lang.String)>($r3, r1, r2);

        return;
    }

    public java.lang.String nextText(java.lang.String, java.lang.String) throws java.io.IOException, org.xmlpull.v1.XmlPullParserException
    {
        org.xmlpull.v1.wrapper.classic.StaticXmlPullParserWrapper r0;
        java.lang.String r1, r2, $r4;
        org.xmlpull.v1.XmlPullParser $r3;

        r0 := @this: org.xmlpull.v1.wrapper.classic.StaticXmlPullParserWrapper;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = r0.<org.xmlpull.v1.wrapper.classic.XmlPullParserDelegate: org.xmlpull.v1.XmlPullParser pp>;

        $r4 = staticinvoke <org.xmlpull.v1.util.XmlPullUtil: java.lang.String nextText(org.xmlpull.v1.XmlPullParser,java.lang.String,java.lang.String)>($r3, r1, r2);

        return $r4;
    }

    public void skipSubTree() throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    {
        org.xmlpull.v1.wrapper.classic.StaticXmlPullParserWrapper r0;
        org.xmlpull.v1.XmlPullParser $r1;

        r0 := @this: org.xmlpull.v1.wrapper.classic.StaticXmlPullParserWrapper;

        $r1 = r0.<org.xmlpull.v1.wrapper.classic.XmlPullParserDelegate: org.xmlpull.v1.XmlPullParser pp>;

        staticinvoke <org.xmlpull.v1.util.XmlPullUtil: void skipSubTree(org.xmlpull.v1.XmlPullParser)>($r1);

        return;
    }

    public double readDouble() throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    {
        org.xmlpull.v1.wrapper.classic.StaticXmlPullParserWrapper r0;
        java.lang.StringBuffer $r7, $r8, $r9, $r10;
        java.lang.String $r2, $r4, $r5, $r11;
        org.xmlpull.v1.XmlPullParser $r1;
        boolean $z0, $z1, $z2, $z3, $z4;
        double d0;
        java.lang.NumberFormatException $r3;
        org.xmlpull.v1.XmlPullParserException $r6;

        r0 := @this: org.xmlpull.v1.wrapper.classic.StaticXmlPullParserWrapper;

        $r1 = r0.<org.xmlpull.v1.wrapper.classic.XmlPullParserDelegate: org.xmlpull.v1.XmlPullParser pp>;

        $r2 = interfaceinvoke $r1.<org.xmlpull.v1.XmlPullParser: java.lang.String nextText()>();

     label1:
        d0 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>($r2);

     label2:
        goto label9;

     label3:
        $r3 := @caughtexception;

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("INF");

        if $z0 != 0 goto label4;

        $r4 = virtualinvoke $r2.<java.lang.String: java.lang.String toLowerCase()>();

        $z1 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("infinity");

        if $z1 == 0 goto label5;

     label4:
        d0 = #Infinity;

        goto label9;

     label5:
        $z2 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("-INF");

        if $z2 != 0 goto label6;

        $r5 = virtualinvoke $r2.<java.lang.String: java.lang.String toLowerCase()>();

        $z3 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>("-infinity");

        if $z3 == 0 goto label7;

     label6:
        d0 = #-Infinity;

        goto label9;

     label7:
        $z4 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("NaN");

        if $z4 == 0 goto label8;

        d0 = #NaN;

        goto label9;

     label8:
        $r6 = new org.xmlpull.v1.XmlPullParserException;

        $r7 = new java.lang.StringBuffer;

        specialinvoke $r7.<java.lang.StringBuffer: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("can\'t parse double value \'");

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'");

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r6.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String,org.xmlpull.v1.XmlPullParser,java.lang.Throwable)>($r11, r0, $r3);

        throw $r6;

     label9:
        return d0;

        catch java.lang.NumberFormatException from label1 to label2 with label3;
    }

    public float readFloat() throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    {
        org.xmlpull.v1.wrapper.classic.StaticXmlPullParserWrapper r0;
        java.lang.StringBuffer $r7, $r8, $r9, $r10;
        java.lang.String $r2, $r4, $r5, $r11;
        org.xmlpull.v1.XmlPullParser $r1;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.NumberFormatException $r3;
        org.xmlpull.v1.XmlPullParserException $r6;
        float f0;

        r0 := @this: org.xmlpull.v1.wrapper.classic.StaticXmlPullParserWrapper;

        $r1 = r0.<org.xmlpull.v1.wrapper.classic.XmlPullParserDelegate: org.xmlpull.v1.XmlPullParser pp>;

        $r2 = interfaceinvoke $r1.<org.xmlpull.v1.XmlPullParser: java.lang.String nextText()>();

     label1:
        f0 = staticinvoke <java.lang.Float: float parseFloat(java.lang.String)>($r2);

     label2:
        goto label9;

     label3:
        $r3 := @caughtexception;

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("INF");

        if $z0 != 0 goto label4;

        $r4 = virtualinvoke $r2.<java.lang.String: java.lang.String toLowerCase()>();

        $z1 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("infinity");

        if $z1 == 0 goto label5;

     label4:
        f0 = #InfinityF;

        goto label9;

     label5:
        $z2 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("-INF");

        if $z2 != 0 goto label6;

        $r5 = virtualinvoke $r2.<java.lang.String: java.lang.String toLowerCase()>();

        $z3 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>("-infinity");

        if $z3 == 0 goto label7;

     label6:
        f0 = #-InfinityF;

        goto label9;

     label7:
        $z4 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("NaN");

        if $z4 == 0 goto label8;

        f0 = #NaNF;

        goto label9;

     label8:
        $r6 = new org.xmlpull.v1.XmlPullParserException;

        $r7 = new java.lang.StringBuffer;

        specialinvoke $r7.<java.lang.StringBuffer: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("can\'t parse float value \'");

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'");

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r6.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String,org.xmlpull.v1.XmlPullParser,java.lang.Throwable)>($r11, r0, $r3);

        throw $r6;

     label9:
        return f0;

        catch java.lang.NumberFormatException from label1 to label2 with label3;
    }

    private int parseDigits(java.lang.String, int, int) throws org.xmlpull.v1.XmlPullParserException
    {
        org.xmlpull.v1.wrapper.classic.StaticXmlPullParserWrapper r2;
        int i0, $i1, $i3, $i4, $i5, i6, i7, i8, $i9, $i10, $i11;
        java.lang.String r0, $r3, $r6;
        char $c2;
        java.lang.NumberFormatException $r4;
        org.xmlpull.v1.XmlPullParserException $r7, $r8;

        r2 := @this: org.xmlpull.v1.wrapper.classic.StaticXmlPullParserWrapper;

        r0 := @parameter0: java.lang.String;

        i6 := @parameter1: int;

        i0 := @parameter2: int;

        i7 = 0;

        if i0 <= 9 goto label4;

     label1:
        $i5 = i6 + i0;

        $r3 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(i6, $i5);

        i7 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r3);

     label2:
        goto label8;

     label3:
        $r4 := @caughtexception;

        $r7 = new org.xmlpull.v1.XmlPullParserException;

        $r6 = virtualinvoke $r4.<java.lang.Throwable: java.lang.String getMessage()>();

        specialinvoke $r7.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String)>($r6);

        throw $r7;

     label4:
        i8 = i6 + i0;

     label5:
        if i6 >= i8 goto label8;

        $i1 = i6;

        i6 = i6 + 1;

        $c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i1);

        $i9 = (int) $c2;

        if $i9 < 48 goto label6;

        $i10 = (int) $c2;

        if $i10 > 57 goto label6;

        $i4 = i7 * 10;

        $i11 = (int) $c2;

        $i3 = $i11 - 48;

        i7 = $i4 + $i3;

        goto label7;

     label6:
        $r8 = new org.xmlpull.v1.XmlPullParserException;

        specialinvoke $r8.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String,org.xmlpull.v1.XmlPullParser,java.lang.Throwable)>("non-digit in number value", r2, null);

        throw $r8;

     label7:
        goto label5;

     label8:
        return i7;

        catch java.lang.NumberFormatException from label1 to label2 with label3;
    }

    private int parseInt(java.lang.String) throws org.xmlpull.v1.XmlPullParserException
    {
        org.xmlpull.v1.wrapper.classic.StaticXmlPullParserWrapper r1;
        byte b6;
        int $i0, $i2, $i3, $i4, $i5, $i7, $i8;
        java.lang.String r0, $r6;
        boolean z0, z1, z2, z3;
        char $c1;
        java.lang.NumberFormatException $r4;
        org.xmlpull.v1.XmlPullParserException $r7, $r8, $r9;

        r1 := @this: org.xmlpull.v1.wrapper.classic.StaticXmlPullParserWrapper;

        r0 := @parameter0: java.lang.String;

        z0 = 0;

        b6 = 0;

        z3 = 0;

        z2 = 0;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 != 0 goto label1;

        $r7 = new org.xmlpull.v1.XmlPullParserException;

        specialinvoke $r7.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String,org.xmlpull.v1.XmlPullParser,java.lang.Throwable)>("empty number value", r1, null);

        throw $r7;

     label1:
        z1 = 0;

        $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(0);

        $i7 = (int) $c1;

        if $i7 != 45 goto label6;

        if $i0 <= 9 goto label5;

     label2:
        $i5 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r0);

     label3:
        return $i5;

     label4:
        $r4 := @caughtexception;

        $r8 = new org.xmlpull.v1.XmlPullParserException;

        $r6 = virtualinvoke $r4.<java.lang.Throwable: java.lang.String getMessage()>();

        specialinvoke $r8.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String,org.xmlpull.v1.XmlPullParser,java.lang.Throwable)>($r6, r1, null);

        throw $r8;

     label5:
        z1 = 1;

        z0 = 1;

        b6 = 1;

        z3 = 1;

        z2 = 1;

        goto label7;

     label6:
        $i8 = (int) $c1;

        if $i8 != 43 goto label7;

        z0 = 1;

        b6 = 1;

        z3 = 1;

        z2 = 1;

     label7:
        if z2 < $i0 goto label8;

        $r9 = new org.xmlpull.v1.XmlPullParserException;

        specialinvoke $r9.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String,org.xmlpull.v1.XmlPullParser,java.lang.Throwable)>("Invalid number format", r1, null);

        throw $r9;

     label8:
        $i2 = $i0 - z3;

        $i3 = specialinvoke r1.<org.xmlpull.v1.wrapper.classic.StaticXmlPullParserWrapper: int parseDigits(java.lang.String,int,int)>(r0, b6, $i2);

        if z1 == 0 goto label9;

        $i4 = neg $i3;

        return $i4;

     label9:
        return $i3;

        catch java.lang.NumberFormatException from label2 to label3 with label4;
    }

    public int readInt() throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    {
        org.xmlpull.v1.XmlPullParserException $r4;
        org.xmlpull.v1.wrapper.classic.StaticXmlPullParserWrapper r0;
        int $i0;
        java.lang.NumberFormatException $r3;
        java.lang.String $r2;
        org.xmlpull.v1.XmlPullParser $r1;

        r0 := @this: org.xmlpull.v1.wrapper.classic.StaticXmlPullParserWrapper;

     label1:
        $r1 = r0.<org.xmlpull.v1.wrapper.classic.XmlPullParserDelegate: org.xmlpull.v1.XmlPullParser pp>;

        $r2 = interfaceinvoke $r1.<org.xmlpull.v1.XmlPullParser: java.lang.String nextText()>();

        $i0 = specialinvoke r0.<org.xmlpull.v1.wrapper.classic.StaticXmlPullParserWrapper: int parseInt(java.lang.String)>($r2);

     label2:
        return $i0;

     label3:
        $r3 := @caughtexception;

        $r4 = new org.xmlpull.v1.XmlPullParserException;

        specialinvoke $r4.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String,org.xmlpull.v1.XmlPullParser,java.lang.Throwable)>("can\'t parse int value", r0, $r3);

        throw $r4;

        catch java.lang.NumberFormatException from label1 to label2 with label3;
    }

    public java.lang.String readString() throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    {
        org.xmlpull.v1.wrapper.classic.StaticXmlPullParserWrapper r0;
        java.lang.String $r2, $r3, $r5;
        org.xmlpull.v1.XmlPullParser $r1, $r4;
        boolean $z0;

        r0 := @this: org.xmlpull.v1.wrapper.classic.StaticXmlPullParserWrapper;

        $r1 = r0.<org.xmlpull.v1.wrapper.classic.XmlPullParserDelegate: org.xmlpull.v1.XmlPullParser pp>;

        $r2 = interfaceinvoke $r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>("http://www.w3.org/2001/XMLSchema", "nil");

        $r3 = "true";

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label1;

        virtualinvoke r0.<org.xmlpull.v1.wrapper.classic.StaticXmlPullParserWrapper: void nextEndTag()>();

        return null;

     label1:
        $r4 = r0.<org.xmlpull.v1.wrapper.classic.XmlPullParserDelegate: org.xmlpull.v1.XmlPullParser pp>;

        $r5 = interfaceinvoke $r4.<org.xmlpull.v1.XmlPullParser: java.lang.String nextText()>();

        return $r5;
    }

    public double readDoubleElement(java.lang.String, java.lang.String) throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    {
        org.xmlpull.v1.wrapper.classic.StaticXmlPullParserWrapper r0;
        java.lang.String r1, r2;
        org.xmlpull.v1.XmlPullParser $r3;
        double $d0;

        r0 := @this: org.xmlpull.v1.wrapper.classic.StaticXmlPullParserWrapper;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = r0.<org.xmlpull.v1.wrapper.classic.XmlPullParserDelegate: org.xmlpull.v1.XmlPullParser pp>;

        interfaceinvoke $r3.<org.xmlpull.v1.XmlPullParser: void require(int,java.lang.String,java.lang.String)>(2, r1, r2);

        $d0 = virtualinvoke r0.<org.xmlpull.v1.wrapper.classic.StaticXmlPullParserWrapper: double readDouble()>();

        return $d0;
    }

    public float readFloatElement(java.lang.String, java.lang.String) throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    {
        org.xmlpull.v1.wrapper.classic.StaticXmlPullParserWrapper r0;
        float $f0;
        java.lang.String r1, r2;
        org.xmlpull.v1.XmlPullParser $r3;

        r0 := @this: org.xmlpull.v1.wrapper.classic.StaticXmlPullParserWrapper;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = r0.<org.xmlpull.v1.wrapper.classic.XmlPullParserDelegate: org.xmlpull.v1.XmlPullParser pp>;

        interfaceinvoke $r3.<org.xmlpull.v1.XmlPullParser: void require(int,java.lang.String,java.lang.String)>(2, r1, r2);

        $f0 = virtualinvoke r0.<org.xmlpull.v1.wrapper.classic.StaticXmlPullParserWrapper: float readFloat()>();

        return $f0;
    }

    public int readIntElement(java.lang.String, java.lang.String) throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    {
        org.xmlpull.v1.wrapper.classic.StaticXmlPullParserWrapper r0;
        int $i0;
        java.lang.String r1, r2;
        org.xmlpull.v1.XmlPullParser $r3;

        r0 := @this: org.xmlpull.v1.wrapper.classic.StaticXmlPullParserWrapper;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = r0.<org.xmlpull.v1.wrapper.classic.XmlPullParserDelegate: org.xmlpull.v1.XmlPullParser pp>;

        interfaceinvoke $r3.<org.xmlpull.v1.XmlPullParser: void require(int,java.lang.String,java.lang.String)>(2, r1, r2);

        $i0 = virtualinvoke r0.<org.xmlpull.v1.wrapper.classic.StaticXmlPullParserWrapper: int readInt()>();

        return $i0;
    }

    public java.lang.String readStringElemet(java.lang.String, java.lang.String) throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    {
        org.xmlpull.v1.wrapper.classic.StaticXmlPullParserWrapper r0;
        java.lang.String r1, r2, $r4;
        org.xmlpull.v1.XmlPullParser $r3;

        r0 := @this: org.xmlpull.v1.wrapper.classic.StaticXmlPullParserWrapper;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = r0.<org.xmlpull.v1.wrapper.classic.XmlPullParserDelegate: org.xmlpull.v1.XmlPullParser pp>;

        interfaceinvoke $r3.<org.xmlpull.v1.XmlPullParser: void require(int,java.lang.String,java.lang.String)>(2, r1, r2);

        $r4 = virtualinvoke r0.<org.xmlpull.v1.wrapper.classic.StaticXmlPullParserWrapper: java.lang.String readString()>();

        return $r4;
    }
}
