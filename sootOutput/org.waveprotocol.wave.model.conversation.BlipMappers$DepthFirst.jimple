class org.waveprotocol.wave.model.conversation.BlipMappers$DepthFirst extends java.lang.Object
{
    private final org.waveprotocol.wave.model.util.Predicate p;

    void <init>(org.waveprotocol.wave.model.util.Predicate)
    {
        org.waveprotocol.wave.model.conversation.BlipMappers$DepthFirst r0;
        org.waveprotocol.wave.model.util.Predicate r1;

        r0 := @this: org.waveprotocol.wave.model.conversation.BlipMappers$DepthFirst;

        r1 := @parameter0: org.waveprotocol.wave.model.util.Predicate;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.waveprotocol.wave.model.conversation.BlipMappers$DepthFirst: org.waveprotocol.wave.model.util.Predicate p> = r1;

        return;
    }

    void apply(org.waveprotocol.wave.model.conversation.ConversationView)
    {
        java.util.Iterator $r2;
        org.waveprotocol.wave.model.conversation.Conversation r4;
        java.util.Collection $r1;
        java.lang.Object $r3;
        org.waveprotocol.wave.model.conversation.ConversationView r0;
        boolean $z0;
        org.waveprotocol.wave.model.conversation.BlipMappers$DepthFirst r5;

        r5 := @this: org.waveprotocol.wave.model.conversation.BlipMappers$DepthFirst;

        r0 := @parameter0: org.waveprotocol.wave.model.conversation.ConversationView;

        $r1 = interfaceinvoke r0.<org.waveprotocol.wave.model.conversation.ConversationView: java.util.Collection getConversations()>();

        $r2 = interfaceinvoke $r1.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.waveprotocol.wave.model.conversation.Conversation) $r3;

        virtualinvoke r5.<org.waveprotocol.wave.model.conversation.BlipMappers$DepthFirst: void apply(org.waveprotocol.wave.model.conversation.Conversation)>(r4);

        goto label1;

     label2:
        return;
    }

    void apply(org.waveprotocol.wave.model.conversation.Conversation)
    {
        org.waveprotocol.wave.model.conversation.Conversation r1;
        org.waveprotocol.wave.model.conversation.BlipMappers$DepthFirst r0;
        org.waveprotocol.wave.model.conversation.ConversationThread $r2;

        r0 := @this: org.waveprotocol.wave.model.conversation.BlipMappers$DepthFirst;

        r1 := @parameter0: org.waveprotocol.wave.model.conversation.Conversation;

        $r2 = interfaceinvoke r1.<org.waveprotocol.wave.model.conversation.Conversation: org.waveprotocol.wave.model.conversation.ConversationThread getRootThread()>();

        virtualinvoke r0.<org.waveprotocol.wave.model.conversation.BlipMappers$DepthFirst: void apply(org.waveprotocol.wave.model.conversation.ConversationThread)>($r2);

        return;
    }

    void apply(org.waveprotocol.wave.model.conversation.ConversationThread)
    {
        org.waveprotocol.wave.model.conversation.ConversationBlip r4;
        java.util.Iterator $r2;
        org.waveprotocol.wave.model.conversation.ConversationThread r0;
        java.lang.Object $r3;
        java.lang.Iterable $r1;
        boolean $z0;
        org.waveprotocol.wave.model.conversation.BlipMappers$DepthFirst r5;

        r5 := @this: org.waveprotocol.wave.model.conversation.BlipMappers$DepthFirst;

        r0 := @parameter0: org.waveprotocol.wave.model.conversation.ConversationThread;

        $r1 = interfaceinvoke r0.<org.waveprotocol.wave.model.conversation.ConversationThread: java.lang.Iterable getBlips()>();

        $r2 = interfaceinvoke $r1.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.waveprotocol.wave.model.conversation.ConversationBlip) $r3;

        virtualinvoke r5.<org.waveprotocol.wave.model.conversation.BlipMappers$DepthFirst: void apply(org.waveprotocol.wave.model.conversation.ConversationBlip)>(r4);

        goto label1;

     label2:
        return;
    }

    void apply(org.waveprotocol.wave.model.conversation.ConversationBlip)
    {
        java.util.Iterator $r4;
        org.waveprotocol.wave.model.conversation.ConversationThread r6;
        java.lang.Iterable $r3;
        org.waveprotocol.wave.model.conversation.BlipMappers$DepthFirst r0;
        org.waveprotocol.wave.model.util.Predicate $r2;
        org.waveprotocol.wave.model.conversation.ConversationBlip r1;
        org.waveprotocol.wave.model.conversation.BlipMappers$Exit $r7;
        java.lang.Object $r5;
        boolean $z0, $z1;

        r0 := @this: org.waveprotocol.wave.model.conversation.BlipMappers$DepthFirst;

        r1 := @parameter0: org.waveprotocol.wave.model.conversation.ConversationBlip;

        $r2 = r0.<org.waveprotocol.wave.model.conversation.BlipMappers$DepthFirst: org.waveprotocol.wave.model.util.Predicate p>;

        $z0 = interfaceinvoke $r2.<org.waveprotocol.wave.model.util.Predicate: boolean apply(java.lang.Object)>(r1);

        if $z0 != 0 goto label1;

        $r7 = <org.waveprotocol.wave.model.conversation.BlipMappers$Exit: org.waveprotocol.wave.model.conversation.BlipMappers$Exit INSTANCE>;

        throw $r7;

     label1:
        $r3 = interfaceinvoke r1.<org.waveprotocol.wave.model.conversation.ConversationBlip: java.lang.Iterable getReplyThreads()>();

        $r4 = interfaceinvoke $r3.<java.lang.Iterable: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (org.waveprotocol.wave.model.conversation.ConversationThread) $r5;

        virtualinvoke r0.<org.waveprotocol.wave.model.conversation.BlipMappers$DepthFirst: void apply(org.waveprotocol.wave.model.conversation.ConversationThread)>(r6);

        goto label2;

     label3:
        return;
    }
}
