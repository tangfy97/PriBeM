public class org.apache.batik.extension.svg.FlowExtGlyphLayout extends org.apache.batik.gvt.text.GlyphLayout
{

    public void <init>(java.text.AttributedCharacterIterator, int[], java.awt.geom.Point2D, java.awt.font.FontRenderContext)
    {
        java.awt.font.FontRenderContext r4;
        java.text.AttributedCharacterIterator r1;
        java.awt.geom.Point2D r3;
        int[] r2;
        org.apache.batik.extension.svg.FlowExtGlyphLayout r0;

        r0 := @this: org.apache.batik.extension.svg.FlowExtGlyphLayout;

        r1 := @parameter0: java.text.AttributedCharacterIterator;

        r2 := @parameter1: int[];

        r3 := @parameter2: java.awt.geom.Point2D;

        r4 := @parameter3: java.awt.font.FontRenderContext;

        specialinvoke r0.<org.apache.batik.gvt.text.GlyphLayout: void <init>(java.text.AttributedCharacterIterator,int[],java.awt.geom.Point2D,java.awt.font.FontRenderContext)>(r1, r2, r3, r4);

        return;
    }

    public static void textWrapTextChunk(java.text.AttributedCharacterIterator[], java.util.List, java.util.List)
    {
        byte $b4, $b5, $b6, $b7, $b8, $b10, $b12, $b13;
        org.apache.batik.extension.svg.RegionInfo r40;
        org.apache.batik.extension.svg.GlyphIterator[] r3;
        org.apache.batik.extension.svg.MarginInfo r44, r50, r59;
        java.text.AttributedCharacterIterator$Attribute $r12, $r30, $r33;
        org.apache.batik.gvt.text.GlyphLayout $r17, r49;
        java.awt.geom.Point2D $r32;
        java.util.List[] r2;
        java.text.AttributedCharacterIterator r42, r58;
        java.text.AttributedCharacterIterator[] r0;
        int $i0, $i1, $i2, $i3, $i9, $i11, i14, i15, $i16, i18, i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29;
        java.util.LinkedList $r64, $r67;
        org.apache.batik.extension.svg.GlyphIterator r51, r52, r53, r54, $r55, r56, r61, $r68;
        java.lang.Object $r9, $r13, $r14, $r16, $r22, $r24, $r26, $r31, $r34, $r36, $r37, $r39, $r46;
        org.apache.batik.gvt.font.MultiGlyphVector $r65;
        org.apache.batik.extension.svg.LineInfo $r21, $r29;
        org.apache.batik.gvt.font.GVTGlyphVector[] r1;
        java.awt.geom.Point2D$Float r41, $r62, $r63, $r66, $r69, $r70, $r71, $r72, $r73;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, z17, z18, z19, $z20, $z21, z22, z23, z24, z25;
        java.util.List r4, r6, r43, $r47, r57;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17, $f18, $f19, $f20, $f21, $f22, f23, $f24, $f25, $f26, $f27, $f28, $f29, $f30, $f31, $f32, $f33, $f34, $f35, $f36, $f37, $f38, $f39, $f40, $f41, f42, f43, f44, f45, $f46, $f47, f48, f49, f50, f51, f52, f53, f54, $f55, f56, f57, f58, $f59, f60, f61;
        org.apache.batik.gvt.font.GVTGlyphVector $r10, r60;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20;
        java.util.Iterator $r5, $r7, $r35, $r48;
        char $c17;

        r0 := @parameter0: java.text.AttributedCharacterIterator[];

        r4 := @parameter1: java.util.List;

        r6 := @parameter2: java.util.List;

        $i0 = lengthof r0;

        r1 = newarray (org.apache.batik.gvt.font.GVTGlyphVector)[$i0];

        $i1 = lengthof r0;

        r2 = newarray (java.util.List)[$i1];

        $i2 = lengthof r0;

        r3 = newarray (org.apache.batik.extension.svg.GlyphIterator)[$i2];

        $r5 = interfaceinvoke r4.<java.util.List: java.util.Iterator iterator()>();

        $r7 = interfaceinvoke r6.<java.util.List: java.util.Iterator iterator()>();

        r40 = null;

        f42 = 0.0F;

        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label01;

        $r39 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r40 = (org.apache.batik.extension.svg.RegionInfo) $r39;

        $d20 = virtualinvoke r40.<java.awt.geom.Rectangle2D$Float: double getHeight()>();

        f42 = (float) $d20;

     label01:
        f43 = 0.0F;

        f44 = 0.0F;

        $r62 = new java.awt.geom.Point2D$Float;

        specialinvoke $r62.<java.awt.geom.Point2D$Float: void <init>(float,float)>(0.0F, 0.0F);

        r41 = $r62;

        f45 = 0.0F;

        i14 = 0;

        goto label50;

     label02:
        r42 = r0[i14];

        if r40 == null goto label10;

        $r33 = <org.apache.batik.gvt.text.GlyphLayout: java.text.AttributedCharacterIterator$Attribute FLOW_EMPTY_PARAGRAPH>;

        $r34 = interfaceinvoke r42.<java.text.AttributedCharacterIterator: java.lang.Object getAttribute(java.text.AttributedCharacterIterator$Attribute)>($r33);

        r43 = (java.util.List) $r34;

        if r43 == null goto label10;

        $r35 = interfaceinvoke r43.<java.util.List: java.util.Iterator iterator()>();

        goto label08;

     label03:
        $r36 = interfaceinvoke $r35.<java.util.Iterator: java.lang.Object next()>();

        r44 = (org.apache.batik.extension.svg.MarginInfo) $r36;

        $f40 = virtualinvoke r44.<org.apache.batik.extension.svg.MarginInfo: float getTopMargin()>();

        $b12 = f45 cmpl $f40;

        $i21 = (int) $b12;

        if $i21 <= 0 goto label04;

        $f46 = f45;

        goto label05;

     label04:
        $f46 = virtualinvoke r44.<org.apache.batik.extension.svg.MarginInfo: float getTopMargin()>();

     label05:
        $f41 = f44 + $f46;

        $b13 = $f41 cmpg f42;

        $i22 = (int) $b13;

        if $i22 > 0 goto label06;

        $z15 = virtualinvoke r44.<org.apache.batik.extension.svg.MarginInfo: boolean isFlowRegionBreak()>();

        if $z15 != 0 goto label06;

        f44 = f44 + $f46;

        f45 = virtualinvoke r44.<org.apache.batik.extension.svg.MarginInfo: float getBottomMargin()>();

        goto label08;

     label06:
        $z14 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z14 != 0 goto label07;

        r40 = null;

        goto label09;

     label07:
        $r37 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r40 = (org.apache.batik.extension.svg.RegionInfo) $r37;

        $d19 = virtualinvoke r40.<java.awt.geom.Rectangle2D$Float: double getHeight()>();

        f42 = (float) $d19;

        $r63 = new java.awt.geom.Point2D$Float;

        specialinvoke $r63.<java.awt.geom.Point2D$Float: void <init>(float,float)>(0.0F, 0.0F);

        r41 = $r63;

        f44 = 0.0F;

        f45 = 0.0F;

     label08:
        $z16 = interfaceinvoke $r35.<java.util.Iterator: boolean hasNext()>();

        if $z16 != 0 goto label03;

     label09:
        if r40 != null goto label10;

        goto label51;

     label10:
        $r64 = new java.util.LinkedList;

        specialinvoke $r64.<java.util.LinkedList: void <init>()>();

        $r46 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        $r47 = (java.util.List) $r46;

        $r48 = interfaceinvoke $r47.<java.util.List: java.util.Iterator iterator()>();

        goto label12;

     label11:
        $r9 = interfaceinvoke $r48.<java.util.Iterator: java.lang.Object next()>();

        r49 = (org.apache.batik.gvt.text.GlyphLayout) $r9;

        $r10 = virtualinvoke r49.<org.apache.batik.gvt.text.GlyphLayout: org.apache.batik.gvt.font.GVTGlyphVector getGlyphVector()>();

        interfaceinvoke $r64.<java.util.List: boolean add(java.lang.Object)>($r10);

     label12:
        $z1 = interfaceinvoke $r48.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label11;

        $r65 = new org.apache.batik.gvt.font.MultiGlyphVector;

        specialinvoke $r65.<org.apache.batik.gvt.font.MultiGlyphVector: void <init>(java.util.List)>($r64);

        r1[i14] = $r65;

        $i3 = interfaceinvoke $r65.<org.apache.batik.gvt.font.GVTGlyphVector: int getNumGlyphs()>();

        interfaceinvoke r42.<java.text.CharacterIterator: char first()>();

        $r12 = <org.apache.batik.gvt.text.GlyphLayout: java.text.AttributedCharacterIterator$Attribute FLOW_PARAGRAPH>;

        $r13 = interfaceinvoke r42.<java.text.AttributedCharacterIterator: java.lang.Object getAttribute(java.text.AttributedCharacterIterator$Attribute)>($r12);

        r50 = (org.apache.batik.extension.svg.MarginInfo) $r13;

        if r50 != null goto label13;

        goto label49;

     label13:
        if r40 != null goto label16;

        i15 = 0;

        goto label15;

     label14:
        interfaceinvoke $r65.<org.apache.batik.gvt.font.GVTGlyphVector: void setGlyphVisible(int,boolean)>(i15, 0);

        i15 = i15 + 1;

     label15:
        if i15 < $i3 goto label14;

        goto label49;

     label16:
        $f0 = virtualinvoke r50.<org.apache.batik.extension.svg.MarginInfo: float getTopMargin()>();

        $b4 = f45 cmpl $f0;

        $i23 = (int) $b4;

        if $i23 <= 0 goto label17;

        $f47 = f45;

        goto label18;

     label17:
        $f47 = virtualinvoke r50.<org.apache.batik.extension.svg.MarginInfo: float getTopMargin()>();

     label18:
        $f1 = f44 + $f47;

        $b5 = $f1 cmpg f42;

        $i24 = (int) $b5;

        if $i24 > 0 goto label19;

        f48 = f44 + $f47;

        goto label21;

     label19:
        $z2 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z2 != 0 goto label20;

        goto label51;

     label20:
        $r14 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r40 = (org.apache.batik.extension.svg.RegionInfo) $r14;

        virtualinvoke r40.<java.awt.geom.Rectangle2D$Float: double getHeight()>();

        $r66 = new java.awt.geom.Point2D$Float;

        specialinvoke $r66.<java.awt.geom.Point2D$Float: void <init>(float,float)>(0.0F, 0.0F);

        r41 = $r66;

        f48 = virtualinvoke r50.<org.apache.batik.extension.svg.MarginInfo: float getTopMargin()>();

     label21:
        f45 = virtualinvoke r50.<org.apache.batik.extension.svg.MarginInfo: float getBottomMargin()>();

        $f2 = virtualinvoke r50.<org.apache.batik.extension.svg.MarginInfo: float getLeftMargin()>();

        f49 = $f2;

        $f3 = virtualinvoke r50.<org.apache.batik.extension.svg.MarginInfo: float getRightMargin()>();

        f50 = $f3;

        $r16 = interfaceinvoke $r47.<java.util.List: java.lang.Object get(int)>(0);

        $r17 = (org.apache.batik.gvt.text.GlyphLayout) $r16;

        $z3 = virtualinvoke $r17.<org.apache.batik.gvt.text.GlyphLayout: boolean isLeftToRight()>();

        if $z3 == 0 goto label22;

        $f36 = virtualinvoke r50.<org.apache.batik.extension.svg.MarginInfo: float getIndent()>();

        f49 = $f2 + $f36;

        goto label23;

     label22:
        $f4 = virtualinvoke r50.<org.apache.batik.extension.svg.MarginInfo: float getIndent()>();

        f50 = $f3 + $f4;

     label23:
        $d0 = virtualinvoke r40.<java.awt.geom.Rectangle2D$Float: double getX()>();

        $f5 = (float) $d0;

        $f37 = $f5 + f49;

        f51 = $f37;

        $d1 = virtualinvoke r40.<java.awt.geom.Rectangle2D$Float: double getY()>();

        $f38 = (float) $d1;

        f52 = $f38;

        $d2 = virtualinvoke r40.<java.awt.geom.Rectangle2D$Float: double getWidth()>();

        $f6 = f49 + f50;

        $d3 = (double) $f6;

        $d4 = $d2 - $d3;

        $f39 = (float) $d4;

        f53 = $f39;

        $d5 = virtualinvoke r40.<java.awt.geom.Rectangle2D$Float: double getHeight()>();

        f42 = (float) $d5;

        $r67 = new java.util.LinkedList;

        specialinvoke $r67.<java.util.LinkedList: void <init>()>();

        r2[i14] = $r67;

        f54 = 0.0F;

        $r68 = new org.apache.batik.extension.svg.GlyphIterator;

        specialinvoke $r68.<org.apache.batik.extension.svg.GlyphIterator: void <init>(java.text.AttributedCharacterIterator,org.apache.batik.gvt.font.GVTGlyphVector)>(r42, $r65);

        r51 = $r68;

        r3[i14] = $r68;

        r52 = null;

        r53 = null;

        $z4 = virtualinvoke $r68.<org.apache.batik.extension.svg.GlyphIterator: boolean done()>();

        if $z4 != 0 goto label24;

        $z13 = virtualinvoke $r68.<org.apache.batik.extension.svg.GlyphIterator: boolean isPrinting()>();

        if $z13 != 0 goto label24;

        staticinvoke <org.apache.batik.extension.svg.FlowExtGlyphLayout: void updateVerticalAlignOffset(java.awt.geom.Point2D$Float,org.apache.batik.extension.svg.RegionInfo,float)>(r41, r40, f48);

        $r69 = new java.awt.geom.Point2D$Float;

        $f35 = $f38 + f48;

        specialinvoke $r69.<java.awt.geom.Point2D$Float: void <init>(float,float)>($f37, $f35);

        $r29 = virtualinvoke $r68.<org.apache.batik.extension.svg.GlyphIterator: org.apache.batik.extension.svg.LineInfo newLine(java.awt.geom.Point2D$Float,float,boolean,java.awt.geom.Point2D$Float)>($r69, $f39, 1, r41);

        interfaceinvoke $r67.<java.util.List: boolean add(java.lang.Object)>($r29);

     label24:
        r54 = virtualinvoke $r68.<org.apache.batik.extension.svg.GlyphIterator: org.apache.batik.extension.svg.GlyphIterator copy()>();

        z17 = 1;

        z23 = 1;

        z22 = 1;

        goto label45;

     label25:
        z18 = 0;

        z25 = 0;

        z24 = 0;

        z19 = 0;

        $z5 = virtualinvoke r51.<org.apache.batik.extension.svg.GlyphIterator: boolean isPrinting()>();

        if $z5 == 0 goto label30;

        $f32 = virtualinvoke r51.<org.apache.batik.extension.svg.GlyphIterator: float getAdv()>();

        $b10 = $f32 cmpl f53;

        $i25 = (int) $b10;

        if $i25 <= 0 goto label30;

        if r52 != null goto label29;

        $z12 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z12 != 0 goto label26;

        r40 = null;

        r51 = virtualinvoke r54.<org.apache.batik.extension.svg.GlyphIterator: org.apache.batik.extension.svg.GlyphIterator copy(org.apache.batik.extension.svg.GlyphIterator)>(r51);

        goto label46;

     label26:
        $r26 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r40 = (org.apache.batik.extension.svg.RegionInfo) $r26;

        $d13 = virtualinvoke r40.<java.awt.geom.Rectangle2D$Float: double getX()>();

        $f33 = (float) $d13;

        f51 = $f33 + f49;

        $d14 = virtualinvoke r40.<java.awt.geom.Rectangle2D$Float: double getY()>();

        f52 = (float) $d14;

        $d15 = virtualinvoke r40.<java.awt.geom.Rectangle2D$Float: double getWidth()>();

        $f34 = f49 + f50;

        $d16 = (double) $f34;

        $d17 = $d15 - $d16;

        f53 = (float) $d17;

        $d18 = virtualinvoke r40.<java.awt.geom.Rectangle2D$Float: double getHeight()>();

        f42 = (float) $d18;

        $r70 = new java.awt.geom.Point2D$Float;

        specialinvoke $r70.<java.awt.geom.Point2D$Float: void <init>(float,float)>(0.0F, 0.0F);

        r41 = $r70;

        if z23 == 0 goto label27;

        $f55 = virtualinvoke r50.<org.apache.batik.extension.svg.MarginInfo: float getTopMargin()>();

        goto label28;

     label27:
        $f55 = 0.0F;

     label28:
        f48 = $f55;

        f54 = 0.0F;

        r51 = virtualinvoke r54.<org.apache.batik.extension.svg.GlyphIterator: org.apache.batik.extension.svg.GlyphIterator copy(org.apache.batik.extension.svg.GlyphIterator)>(r51);

        goto label45;

     label29:
        r51 = virtualinvoke r52.<org.apache.batik.extension.svg.GlyphIterator: org.apache.batik.extension.svg.GlyphIterator copy(org.apache.batik.extension.svg.GlyphIterator)>(r51);

        f43 = 1.0F;

        z18 = 1;

        z25 = 1;

        z24 = 1;

        z19 = 0;

        goto label31;

     label30:
        $z6 = virtualinvoke r51.<org.apache.batik.extension.svg.GlyphIterator: boolean isLastChar()>();

        if $z6 == 0 goto label31;

        f43 = 1.0F;

        z18 = 1;

        z25 = 1;

        z24 = 1;

        z19 = 1;

     label31:
        $i16 = virtualinvoke r51.<org.apache.batik.extension.svg.GlyphIterator: int getLineBreaks()>();

        if $i16 == 0 goto label33;

        if z25 == 0 goto label32;

        f43 = f43 - 1.0F;

     label32:
        $f31 = (float) $i16;

        f43 = f43 + $f31;

        z18 = 1;

        z24 = 1;

        z19 = 1;

     label33:
        if z24 != 0 goto label36;

        $z10 = virtualinvoke r51.<org.apache.batik.extension.svg.GlyphIterator: boolean isBreakChar()>();

        if $z10 != 0 goto label34;

        if r52 == null goto label34;

        $z11 = virtualinvoke r52.<org.apache.batik.extension.svg.GlyphIterator: boolean isBreakChar()>();

        if $z11 != 0 goto label35;

     label34:
        $r55 = virtualinvoke r51.<org.apache.batik.extension.svg.GlyphIterator: org.apache.batik.extension.svg.GlyphIterator copy(org.apache.batik.extension.svg.GlyphIterator)>(r53);

        r53 = $r55;

        virtualinvoke r51.<org.apache.batik.extension.svg.GlyphIterator: void nextChar()>();

        $c17 = virtualinvoke r51.<org.apache.batik.extension.svg.GlyphIterator: char getChar()>();

        $i26 = (int) $c17;

        if $i26 == 8205 goto label45;

        r56 = r52;

        r52 = $r55;

        r53 = r56;

        goto label45;

     label35:
        virtualinvoke r51.<org.apache.batik.extension.svg.GlyphIterator: void nextChar()>();

        goto label45;

     label36:
        $f7 = virtualinvoke r51.<org.apache.batik.extension.svg.GlyphIterator: float getMaxAscent()>();

        $f8 = virtualinvoke r51.<org.apache.batik.extension.svg.GlyphIterator: float getMaxDescent()>();

        f56 = $f7 + $f8;

        if 1 == 0 goto label37;

        $f26 = virtualinvoke r51.<org.apache.batik.extension.svg.GlyphIterator: float getMaxFontSize()>();

        f57 = $f26 * 1.0F;

        goto label38;

     label37:
        f57 = 1.0F;

     label38:
        $f9 = f57 - f56;

        $f27 = $f9 / 2.0F;

        $f10 = f54 + $f27;

        $f11 = virtualinvoke r51.<org.apache.batik.extension.svg.GlyphIterator: float getMaxAscent()>();

        $f28 = $f10 + $f11;

        $f12 = virtualinvoke r51.<org.apache.batik.extension.svg.GlyphIterator: float getMaxDescent()>();

        $f29 = $f27 + $f12;

        $f30 = f48 + $f28;

        f48 = $f30;

        f58 = $f29;

        $f13 = virtualinvoke r51.<org.apache.batik.extension.svg.GlyphIterator: float getMaxDescent()>();

        $b6 = $f29 cmpg $f13;

        $i27 = (int) $b6;

        if $i27 >= 0 goto label39;

        f58 = virtualinvoke r51.<org.apache.batik.extension.svg.GlyphIterator: float getMaxDescent()>();

     label39:
        $f14 = $f30 + f58;

        $b7 = $f14 cmpl f42;

        $i28 = (int) $b7;

        if $i28 <= 0 goto label44;

        $z7 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z7 != 0 goto label40;

        r40 = null;

        r51 = virtualinvoke r54.<org.apache.batik.extension.svg.GlyphIterator: org.apache.batik.extension.svg.GlyphIterator copy(org.apache.batik.extension.svg.GlyphIterator)>(r51);

        goto label46;

     label40:
        f23 = f53;

        $r22 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r40 = (org.apache.batik.extension.svg.RegionInfo) $r22;

        $d6 = virtualinvoke r40.<java.awt.geom.Rectangle2D$Float: double getX()>();

        $f24 = (float) $d6;

        f51 = $f24 + f49;

        $d7 = virtualinvoke r40.<java.awt.geom.Rectangle2D$Float: double getY()>();

        f52 = (float) $d7;

        $d8 = virtualinvoke r40.<java.awt.geom.Rectangle2D$Float: double getWidth()>();

        $f25 = f49 + f50;

        $d9 = (double) $f25;

        $d10 = $d8 - $d9;

        f53 = (float) $d10;

        $d11 = virtualinvoke r40.<java.awt.geom.Rectangle2D$Float: double getHeight()>();

        f42 = (float) $d11;

        $r71 = new java.awt.geom.Point2D$Float;

        specialinvoke $r71.<java.awt.geom.Point2D$Float: void <init>(float,float)>(0.0F, 0.0F);

        r41 = $r71;

        if z22 == 0 goto label41;

        $f59 = virtualinvoke r50.<org.apache.batik.extension.svg.MarginInfo: float getTopMargin()>();

        goto label42;

     label41:
        $f59 = 0.0F;

     label42:
        f48 = $f59;

        f54 = 0.0F;

        $b8 = f23 cmpl f53;

        $i29 = (int) $b8;

        if $i29 > 0 goto label43;

        if $i16 == 0 goto label45;

     label43:
        r51 = virtualinvoke r54.<org.apache.batik.extension.svg.GlyphIterator: org.apache.batik.extension.svg.GlyphIterator copy(org.apache.batik.extension.svg.GlyphIterator)>(r51);

        goto label45;

     label44:
        $f15 = f43 - 1.0F;

        $f16 = $f15 * f57;

        f54 = $f29 + $f16;

        f43 = 0.0F;

        $f17 = $f30 + f58;

        staticinvoke <org.apache.batik.extension.svg.FlowExtGlyphLayout: void updateVerticalAlignOffset(java.awt.geom.Point2D$Float,org.apache.batik.extension.svg.RegionInfo,float)>(r41, r40, $f17);

        $r72 = new java.awt.geom.Point2D$Float;

        $f18 = f52 + $f30;

        specialinvoke $r72.<java.awt.geom.Point2D$Float: void <init>(float,float)>(f51, $f18);

        $r21 = virtualinvoke r51.<org.apache.batik.extension.svg.GlyphIterator: org.apache.batik.extension.svg.LineInfo newLine(java.awt.geom.Point2D$Float,float,boolean,java.awt.geom.Point2D$Float)>($r72, f53, z19, r41);

        interfaceinvoke $r67.<java.util.List: boolean add(java.lang.Object)>($r21);

        f60 = f51 - f49;

        $f19 = f49 + f50;

        f61 = f53 + $f19;

        $f20 = virtualinvoke r50.<org.apache.batik.extension.svg.MarginInfo: float getLeftMargin()>();

        f49 = $f20;

        $f21 = virtualinvoke r50.<org.apache.batik.extension.svg.MarginInfo: float getRightMargin()>();

        f50 = $f21;

        f51 = f60 + $f20;

        $f22 = $f20 + $f21;

        f53 = f61 - $f22;

        z17 = 0;

        z23 = 0;

        z22 = 0;

        r54 = virtualinvoke r51.<org.apache.batik.extension.svg.GlyphIterator: org.apache.batik.extension.svg.GlyphIterator copy(org.apache.batik.extension.svg.GlyphIterator)>(r54);

        r52 = null;

     label45:
        $z20 = virtualinvoke r51.<org.apache.batik.extension.svg.GlyphIterator: boolean done()>();

        if $z20 == 0 goto label25;

     label46:
        f44 = f48 + f54;

        i18 = virtualinvoke r51.<org.apache.batik.extension.svg.GlyphIterator: int getGlyphIndex()>();

        goto label48;

     label47:
        $i9 = i18;

        i18 = i18 + 1;

        interfaceinvoke $r65.<org.apache.batik.gvt.font.GVTGlyphVector: void setGlyphVisible(int,boolean)>($i9, 0);

     label48:
        if i18 < $i3 goto label47;

        $z8 = virtualinvoke r50.<org.apache.batik.extension.svg.MarginInfo: boolean isFlowRegionBreak()>();

        if $z8 == 0 goto label49;

        r40 = null;

        $z9 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z9 == 0 goto label49;

        $r24 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r40 = (org.apache.batik.extension.svg.RegionInfo) $r24;

        $d12 = virtualinvoke r40.<java.awt.geom.Rectangle2D$Float: double getHeight()>();

        f42 = (float) $d12;

        f44 = 0.0F;

        f45 = 0.0F;

        $r73 = new java.awt.geom.Point2D$Float;

        specialinvoke $r73.<java.awt.geom.Point2D$Float: void <init>(float,float)>(0.0F, 0.0F);

        r41 = $r73;

     label49:
        i14 = i14 + 1;

     label50:
        $z21 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z21 != 0 goto label02;

     label51:
        i19 = 0;

        goto label57;

     label52:
        r57 = r2[i19];

        if r57 != null goto label53;

        goto label56;

     label53:
        r58 = r0[i19];

        interfaceinvoke r58.<java.text.CharacterIterator: char first()>();

        $r30 = <org.apache.batik.gvt.text.GlyphLayout: java.text.AttributedCharacterIterator$Attribute FLOW_PARAGRAPH>;

        $r31 = interfaceinvoke r58.<java.text.AttributedCharacterIterator: java.lang.Object getAttribute(java.text.AttributedCharacterIterator$Attribute)>($r30);

        r59 = (org.apache.batik.extension.svg.MarginInfo) $r31;

        if r59 != null goto label54;

        goto label56;

     label54:
        $i11 = virtualinvoke r59.<org.apache.batik.extension.svg.MarginInfo: int getJustification()>();

        r60 = r1[i19];

        if r60 != null goto label55;

        goto label58;

     label55:
        r61 = r3[i19];

        $r32 = virtualinvoke r61.<org.apache.batik.extension.svg.GlyphIterator: java.awt.geom.Point2D getOrigin()>();

        staticinvoke <org.apache.batik.extension.svg.FlowExtGlyphLayout: void layoutChunk(org.apache.batik.gvt.font.GVTGlyphVector,java.awt.geom.Point2D,int,java.util.List)>(r60, $r32, $i11, r57);

     label56:
        i19 = i19 + 1;

     label57:
        $i20 = lengthof r0;

        if i19 < $i20 goto label52;

     label58:
        return;
    }

    public static void updateVerticalAlignOffset(java.awt.geom.Point2D$Float, org.apache.batik.extension.svg.RegionInfo, float)
    {
        org.apache.batik.extension.svg.RegionInfo r0;
        java.awt.geom.Point2D$Float r1;
        float f0, $f1, f2, $f3, $f4;
        double $d0;

        r1 := @parameter0: java.awt.geom.Point2D$Float;

        r0 := @parameter1: org.apache.batik.extension.svg.RegionInfo;

        f0 := @parameter2: float;

        $d0 = virtualinvoke r0.<java.awt.geom.Rectangle2D$Float: double getHeight()>();

        $f1 = (float) $d0;

        f2 = $f1 - f0;

        $f3 = virtualinvoke r0.<org.apache.batik.extension.svg.RegionInfo: float getVerticalAlignment()>();

        $f4 = $f3 * f2;

        virtualinvoke r1.<java.awt.geom.Point2D$Float: void setLocation(float,float)>(0.0F, $f4);

        return;
    }

    public static void layoutChunk(org.apache.batik.gvt.font.GVTGlyphVector, java.awt.geom.Point2D, int, java.util.List)
    {
        java.awt.geom.Point2D r4;
        boolean $z0, $z1;
        java.util.List r0;
        float f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17, f18, f19, f20, f21, f22, $f23, $f24, $f25, $f26, $f27, $f28, $f29, $f30, $f31, $f32, $f33;
        float[] $r3;
        org.apache.batik.gvt.font.GVTGlyphVector r2;
        int $i0, $i1, $i2, i3, $i4, $i5, $i6, $i7, i8, i9, $i10, $i11, $i12;
        org.apache.batik.extension.svg.LineInfo r7;
        double $d0, $d1;
        java.util.Iterator $r1;
        java.awt.geom.Point2D$Float $r5, $r8, r9;
        java.lang.Object $r6;

        r2 := @parameter0: org.apache.batik.gvt.font.GVTGlyphVector;

        r4 := @parameter1: java.awt.geom.Point2D;

        i3 := @parameter2: int;

        r0 := @parameter3: java.util.List;

        $r1 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

        $i0 = interfaceinvoke r2.<org.apache.batik.gvt.font.GVTGlyphVector: int getNumGlyphs()>();

        $i1 = $i0 + 1;

        $r3 = interfaceinvoke r2.<org.apache.batik.gvt.font.GVTGlyphVector: float[] getGlyphPositions(int,int,float[])>(0, $i1, null);

        r9 = null;

        f18 = 0.0F;

        $d0 = virtualinvoke r4.<java.awt.geom.Point2D: double getX()>();

        f19 = (float) $d0;

        $d1 = virtualinvoke r4.<java.awt.geom.Point2D: double getY()>();

        f0 = (float) $d1;

        f20 = 1.0F;

        f21 = 0.0F;

        f22 = 0.0F;

        i8 = 0;

        $r5 = new java.awt.geom.Point2D$Float;

        specialinvoke $r5.<java.awt.geom.Point2D$Float: void <init>()>();

        i9 = 0;

        goto label08;

     label01:
        if i9 != i8 goto label07;

        f19 = f19 + f18;

        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label02;

        goto label09;

     label02:
        $r6 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r7 = (org.apache.batik.extension.svg.LineInfo) $r6;

        $i2 = virtualinvoke r7.<org.apache.batik.extension.svg.LineInfo: int getEndIdx()>();

        i8 = $i2;

        r9 = virtualinvoke r7.<org.apache.batik.extension.svg.LineInfo: java.awt.geom.Point2D$Float getLocation()>();

        f18 = virtualinvoke r7.<org.apache.batik.extension.svg.LineInfo: float getAdvance()>();

        $f1 = virtualinvoke r7.<org.apache.batik.extension.svg.LineInfo: float getVisualAdvance()>();

        $f2 = virtualinvoke r7.<org.apache.batik.extension.svg.LineInfo: float getLastCharWidth()>();

        $f3 = virtualinvoke r7.<org.apache.batik.extension.svg.LineInfo: float getLineWidth()>();

        $z1 = virtualinvoke r7.<org.apache.batik.extension.svg.LineInfo: boolean isPartialLine()>();

        $r8 = virtualinvoke r7.<org.apache.batik.extension.svg.LineInfo: java.awt.geom.Point2D$Float getVerticalAlignOffset()>();

        f22 = $r8.<java.awt.geom.Point2D$Float: float y>;

        f21 = 0.0F;

        f20 = 1.0F;

        tableswitch(i3)
        {
            case 0: goto label03;
            case 1: goto label04;
            case 2: goto label05;
            case 3: goto label06;
            default: goto label03;
        };

     label03:
        goto label07;

     label04:
        $f6 = $f3 - $f1;

        f21 = $f6 / 2.0F;

        goto label07;

     label05:
        f21 = $f3 - $f1;

        goto label07;

     label06:
        if $z1 != 0 goto label07;

        $i4 = i9 + 1;

        if $i2 == $i4 goto label07;

        $f5 = $f3 - $f2;

        $f4 = $f1 - $f2;

        f20 = $f5 / $f4;

     label07:
        $f23 = r9.<java.awt.geom.Point2D$Float: float x>;

        $i10 = 2 * i9;

        $f24 = $r3[$i10];

        $f25 = $f24 - f19;

        $f26 = $f25 * f20;

        $f27 = $f23 + $f26;

        $f28 = $f27 + f21;

        $r5.<java.awt.geom.Point2D$Float: float x> = $f28;

        $f29 = r9.<java.awt.geom.Point2D$Float: float y>;

        $i11 = 2 * i9;

        $i12 = $i11 + 1;

        $f30 = $r3[$i12];

        $f31 = $f30 - f0;

        $f32 = $f31 + f22;

        $f33 = $f29 + $f32;

        $r5.<java.awt.geom.Point2D$Float: float y> = $f33;

        interfaceinvoke r2.<org.apache.batik.gvt.font.GVTGlyphVector: void setGlyphPosition(int,java.awt.geom.Point2D)>(i9, $r5);

        i9 = i9 + 1;

     label08:
        if i9 < $i0 goto label01;

     label09:
        $r5.<java.awt.geom.Point2D$Float: float x> = f19;

        $r5.<java.awt.geom.Point2D$Float: float y> = f0;

        if r9 == null goto label10;

        $f10 = r9.<java.awt.geom.Point2D$Float: float x>;

        $i5 = 2 * i9;

        $f7 = $r3[$i5];

        $f8 = $f7 - f19;

        $f9 = $f8 * f20;

        $f11 = $f10 + $f9;

        $f12 = $f11 + f21;

        $r5.<java.awt.geom.Point2D$Float: float x> = $f12;

        $f15 = r9.<java.awt.geom.Point2D$Float: float y>;

        $i6 = 2 * i9;

        $i7 = $i6 + 1;

        $f13 = $r3[$i7];

        $f14 = $f13 - f0;

        $f16 = $f15 + $f14;

        $f17 = $f16 + f22;

        $r5.<java.awt.geom.Point2D$Float: float y> = $f17;

     label10:
        interfaceinvoke r2.<org.apache.batik.gvt.font.GVTGlyphVector: void setGlyphPosition(int,java.awt.geom.Point2D)>(i9, $r5);

        return;
    }
}
