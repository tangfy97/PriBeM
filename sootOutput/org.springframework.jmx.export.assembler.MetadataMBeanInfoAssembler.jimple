public class org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler extends org.springframework.jmx.export.assembler.AbstractReflectiveMBeanInfoAssembler implements org.springframework.jmx.export.assembler.AutodetectCapableMBeanInfoAssembler, org.springframework.beans.factory.InitializingBean
{
    private org.springframework.jmx.export.metadata.JmxAttributeSource attributeSource;

    public void <init>()
    {
        org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler r0;

        r0 := @this: org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler;

        specialinvoke r0.<org.springframework.jmx.export.assembler.AbstractReflectiveMBeanInfoAssembler: void <init>()>();

        return;
    }

    public void <init>(org.springframework.jmx.export.metadata.JmxAttributeSource)
    {
        org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler r0;
        org.springframework.jmx.export.metadata.JmxAttributeSource r1;

        r0 := @this: org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler;

        r1 := @parameter0: org.springframework.jmx.export.metadata.JmxAttributeSource;

        specialinvoke r0.<org.springframework.jmx.export.assembler.AbstractReflectiveMBeanInfoAssembler: void <init>()>();

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r1, "JmxAttributeSource must not be null");

        r0.<org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler: org.springframework.jmx.export.metadata.JmxAttributeSource attributeSource> = r1;

        return;
    }

    public void setAttributeSource(org.springframework.jmx.export.metadata.JmxAttributeSource)
    {
        org.springframework.jmx.export.metadata.JmxAttributeSource r0;
        org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler r1;

        r1 := @this: org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler;

        r0 := @parameter0: org.springframework.jmx.export.metadata.JmxAttributeSource;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "JmxAttributeSource must not be null");

        r1.<org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler: org.springframework.jmx.export.metadata.JmxAttributeSource attributeSource> = r0;

        return;
    }

    public void afterPropertiesSet()
    {
        org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler r0;
        org.springframework.jmx.export.metadata.JmxAttributeSource $r1;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler;

        $r1 = r0.<org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler: org.springframework.jmx.export.metadata.JmxAttributeSource attributeSource>;

        if $r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Property \'attributeSource\' is required");

        throw $r2;

     label1:
        return;
    }

    protected void checkManagedBean(java.lang.Object) throws java.lang.IllegalArgumentException
    {
        java.lang.Object r0;
        java.lang.IllegalArgumentException $r1;
        org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler r2;
        boolean $z0;

        r2 := @this: org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler;

        r0 := @parameter0: java.lang.Object;

        $z0 = staticinvoke <org.springframework.aop.support.AopUtils: boolean isJdkDynamicProxy(java.lang.Object)>(r0);

        if $z0 == 0 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("MetadataMBeanInfoAssembler does not support JDK dynamic proxies - export the target beans directly or use CGLIB proxies instead");

        throw $r1;

     label1:
        return;
    }

    public boolean includeBean(java.lang.Class, java.lang.String)
    {
        org.springframework.jmx.export.metadata.JmxAttributeSource $r2;
        java.lang.Class r1, $r3;
        org.springframework.jmx.export.metadata.ManagedResource $r4;
        java.lang.String r5;
        org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler r0;

        r0 := @this: org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler;

        r1 := @parameter0: java.lang.Class;

        r5 := @parameter1: java.lang.String;

        $r2 = r0.<org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler: org.springframework.jmx.export.metadata.JmxAttributeSource attributeSource>;

        $r3 = virtualinvoke r0.<org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler: java.lang.Class getClassToExpose(java.lang.Class)>(r1);

        $r4 = interfaceinvoke $r2.<org.springframework.jmx.export.metadata.JmxAttributeSource: org.springframework.jmx.export.metadata.ManagedResource getManagedResource(java.lang.Class)>($r3);

        if $r4 == null goto label1;

        return 1;

     label1:
        return 0;
    }

    protected boolean includeReadAttribute(java.lang.reflect.Method, java.lang.String)
    {
        java.lang.String r2;
        org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler r0;
        java.lang.reflect.Method r1;
        boolean $z0, $z1;

        r0 := @this: org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler;

        r1 := @parameter0: java.lang.reflect.Method;

        r2 := @parameter1: java.lang.String;

        $z0 = specialinvoke r0.<org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler: boolean hasManagedAttribute(java.lang.reflect.Method)>(r1);

        if $z0 != 0 goto label1;

        $z1 = specialinvoke r0.<org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler: boolean hasManagedMetric(java.lang.reflect.Method)>(r1);

        if $z1 != 0 goto label1;

        return 0;

     label1:
        return 1;
    }

    protected boolean includeWriteAttribute(java.lang.reflect.Method, java.lang.String)
    {
        java.lang.String r2;
        org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler r0;
        java.lang.reflect.Method r1;
        boolean $z0;

        r0 := @this: org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler;

        r1 := @parameter0: java.lang.reflect.Method;

        r2 := @parameter1: java.lang.String;

        $z0 = specialinvoke r0.<org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler: boolean hasManagedAttribute(java.lang.reflect.Method)>(r1);

        return $z0;
    }

    protected boolean includeOperation(java.lang.reflect.Method, java.lang.String)
    {
        java.beans.PropertyDescriptor $r1;
        java.lang.String r3;
        org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler r2;
        java.lang.reflect.Method r0;
        boolean $z0, $z1;

        r2 := @this: org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler;

        r0 := @parameter0: java.lang.reflect.Method;

        r3 := @parameter1: java.lang.String;

        $r1 = staticinvoke <org.springframework.beans.BeanUtils: java.beans.PropertyDescriptor findPropertyForMethod(java.lang.reflect.Method)>(r0);

        if $r1 == null goto label1;

        $z1 = specialinvoke r2.<org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler: boolean hasManagedAttribute(java.lang.reflect.Method)>(r0);

        if $z1 == 0 goto label1;

        return 1;

     label1:
        $z0 = specialinvoke r2.<org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler: boolean hasManagedOperation(java.lang.reflect.Method)>(r0);

        return $z0;
    }

    private boolean hasManagedAttribute(java.lang.reflect.Method)
    {
        org.springframework.jmx.export.metadata.JmxAttributeSource $r2;
        org.springframework.jmx.export.metadata.ManagedAttribute $r3;
        org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler r0;
        java.lang.reflect.Method r1;

        r0 := @this: org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler;

        r1 := @parameter0: java.lang.reflect.Method;

        $r2 = r0.<org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler: org.springframework.jmx.export.metadata.JmxAttributeSource attributeSource>;

        $r3 = interfaceinvoke $r2.<org.springframework.jmx.export.metadata.JmxAttributeSource: org.springframework.jmx.export.metadata.ManagedAttribute getManagedAttribute(java.lang.reflect.Method)>(r1);

        if $r3 == null goto label1;

        return 1;

     label1:
        return 0;
    }

    private boolean hasManagedMetric(java.lang.reflect.Method)
    {
        org.springframework.jmx.export.metadata.JmxAttributeSource $r2;
        org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler r0;
        java.lang.reflect.Method r1;
        org.springframework.jmx.export.metadata.ManagedMetric $r3;

        r0 := @this: org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler;

        r1 := @parameter0: java.lang.reflect.Method;

        $r2 = r0.<org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler: org.springframework.jmx.export.metadata.JmxAttributeSource attributeSource>;

        $r3 = interfaceinvoke $r2.<org.springframework.jmx.export.metadata.JmxAttributeSource: org.springframework.jmx.export.metadata.ManagedMetric getManagedMetric(java.lang.reflect.Method)>(r1);

        if $r3 == null goto label1;

        return 1;

     label1:
        return 0;
    }

    private boolean hasManagedOperation(java.lang.reflect.Method)
    {
        org.springframework.jmx.export.metadata.JmxAttributeSource $r2;
        org.springframework.jmx.export.metadata.ManagedOperation $r3;
        org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler r0;
        java.lang.reflect.Method r1;

        r0 := @this: org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler;

        r1 := @parameter0: java.lang.reflect.Method;

        $r2 = r0.<org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler: org.springframework.jmx.export.metadata.JmxAttributeSource attributeSource>;

        $r3 = interfaceinvoke $r2.<org.springframework.jmx.export.metadata.JmxAttributeSource: org.springframework.jmx.export.metadata.ManagedOperation getManagedOperation(java.lang.reflect.Method)>(r1);

        if $r3 == null goto label1;

        return 1;

     label1:
        return 0;
    }

    protected java.lang.String getDescription(java.lang.Object, java.lang.String)
    {
        org.springframework.jmx.export.metadata.JmxAttributeSource $r2;
        java.lang.Object r1;
        java.lang.Class $r3;
        org.springframework.jmx.export.metadata.ManagedResource $r4;
        java.lang.String r5, $r6;
        org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler r0;

        r0 := @this: org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler;

        r1 := @parameter0: java.lang.Object;

        r5 := @parameter1: java.lang.String;

        $r2 = r0.<org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler: org.springframework.jmx.export.metadata.JmxAttributeSource attributeSource>;

        $r3 = virtualinvoke r0.<org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler: java.lang.Class getClassToExpose(java.lang.Object)>(r1);

        $r4 = interfaceinvoke $r2.<org.springframework.jmx.export.metadata.JmxAttributeSource: org.springframework.jmx.export.metadata.ManagedResource getManagedResource(java.lang.Class)>($r3);

        if $r4 == null goto label1;

        $r6 = virtualinvoke $r4.<org.springframework.jmx.export.metadata.ManagedResource: java.lang.String getDescription()>();

        goto label2;

     label1:
        $r6 = "";

     label2:
        return $r6;
    }

    protected java.lang.String getAttributeDescription(java.beans.PropertyDescriptor, java.lang.String)
    {
        org.springframework.jmx.export.metadata.ManagedAttribute r3, r4, $r17, $r18;
        org.springframework.jmx.export.metadata.ManagedMetric $r19;
        java.lang.String $r5, $r6, $r7, $r10, $r11, $r12, $r13, r16;
        org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler r8;
        java.lang.reflect.Method $r1, $r2;
        boolean $z0, $z1, $z2;
        org.springframework.jmx.export.metadata.JmxAttributeSource $r9, $r14, $r15;
        java.beans.PropertyDescriptor r0;

        r8 := @this: org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler;

        r0 := @parameter0: java.beans.PropertyDescriptor;

        r16 := @parameter1: java.lang.String;

        $r1 = virtualinvoke r0.<java.beans.PropertyDescriptor: java.lang.reflect.Method getReadMethod()>();

        $r2 = virtualinvoke r0.<java.beans.PropertyDescriptor: java.lang.reflect.Method getWriteMethod()>();

        if $r1 == null goto label1;

        $r15 = r8.<org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler: org.springframework.jmx.export.metadata.JmxAttributeSource attributeSource>;

        $r17 = interfaceinvoke $r15.<org.springframework.jmx.export.metadata.JmxAttributeSource: org.springframework.jmx.export.metadata.ManagedAttribute getManagedAttribute(java.lang.reflect.Method)>($r1);

        goto label2;

     label1:
        $r17 = null;

     label2:
        r3 = $r17;

        if $r2 == null goto label3;

        $r14 = r8.<org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler: org.springframework.jmx.export.metadata.JmxAttributeSource attributeSource>;

        $r18 = interfaceinvoke $r14.<org.springframework.jmx.export.metadata.JmxAttributeSource: org.springframework.jmx.export.metadata.ManagedAttribute getManagedAttribute(java.lang.reflect.Method)>($r2);

        goto label4;

     label3:
        $r18 = null;

     label4:
        r4 = $r18;

        if r3 == null goto label5;

        $r12 = virtualinvoke r3.<org.springframework.jmx.export.metadata.ManagedAttribute: java.lang.String getDescription()>();

        $z2 = staticinvoke <org.springframework.util.StringUtils: boolean hasText(java.lang.String)>($r12);

        if $z2 == 0 goto label5;

        $r13 = virtualinvoke r3.<org.springframework.jmx.export.metadata.ManagedAttribute: java.lang.String getDescription()>();

        return $r13;

     label5:
        if r4 == null goto label6;

        $r10 = virtualinvoke r4.<org.springframework.jmx.export.metadata.ManagedAttribute: java.lang.String getDescription()>();

        $z1 = staticinvoke <org.springframework.util.StringUtils: boolean hasText(java.lang.String)>($r10);

        if $z1 == 0 goto label6;

        $r11 = virtualinvoke r4.<org.springframework.jmx.export.metadata.ManagedAttribute: java.lang.String getDescription()>();

        return $r11;

     label6:
        if $r1 == null goto label7;

        $r9 = r8.<org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler: org.springframework.jmx.export.metadata.JmxAttributeSource attributeSource>;

        $r19 = interfaceinvoke $r9.<org.springframework.jmx.export.metadata.JmxAttributeSource: org.springframework.jmx.export.metadata.ManagedMetric getManagedMetric(java.lang.reflect.Method)>($r1);

        goto label8;

     label7:
        $r19 = null;

     label8:
        if $r19 == null goto label9;

        $r6 = virtualinvoke $r19.<org.springframework.jmx.export.metadata.ManagedMetric: java.lang.String getDescription()>();

        $z0 = staticinvoke <org.springframework.util.StringUtils: boolean hasText(java.lang.String)>($r6);

        if $z0 == 0 goto label9;

        $r7 = virtualinvoke $r19.<org.springframework.jmx.export.metadata.ManagedMetric: java.lang.String getDescription()>();

        return $r7;

     label9:
        $r5 = virtualinvoke r0.<java.beans.PropertyDescriptor: java.lang.String getDisplayName()>();

        return $r5;
    }

    protected java.lang.String getOperationDescription(java.lang.reflect.Method, java.lang.String)
    {
        org.springframework.jmx.export.metadata.ManagedAttribute $r9;
        org.springframework.jmx.export.metadata.ManagedMetric $r11;
        org.springframework.jmx.export.metadata.ManagedOperation $r4;
        java.lang.String $r5, $r6, $r7, $r12, $r13, $r14, $r15, $r16, r17;
        org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler r2;
        java.lang.reflect.Method r0;
        boolean $z0, $z1, $z2;
        org.springframework.jmx.export.metadata.JmxAttributeSource $r3, $r8, $r10;
        java.beans.PropertyDescriptor $r1;

        r2 := @this: org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler;

        r0 := @parameter0: java.lang.reflect.Method;

        r17 := @parameter1: java.lang.String;

        $r1 = staticinvoke <org.springframework.beans.BeanUtils: java.beans.PropertyDescriptor findPropertyForMethod(java.lang.reflect.Method)>(r0);

        if $r1 == null goto label3;

        $r8 = r2.<org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler: org.springframework.jmx.export.metadata.JmxAttributeSource attributeSource>;

        $r9 = interfaceinvoke $r8.<org.springframework.jmx.export.metadata.JmxAttributeSource: org.springframework.jmx.export.metadata.ManagedAttribute getManagedAttribute(java.lang.reflect.Method)>(r0);

        if $r9 == null goto label1;

        $r15 = virtualinvoke $r9.<org.springframework.jmx.export.metadata.ManagedAttribute: java.lang.String getDescription()>();

        $z2 = staticinvoke <org.springframework.util.StringUtils: boolean hasText(java.lang.String)>($r15);

        if $z2 == 0 goto label1;

        $r16 = virtualinvoke $r9.<org.springframework.jmx.export.metadata.ManagedAttribute: java.lang.String getDescription()>();

        return $r16;

     label1:
        $r10 = r2.<org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler: org.springframework.jmx.export.metadata.JmxAttributeSource attributeSource>;

        $r11 = interfaceinvoke $r10.<org.springframework.jmx.export.metadata.JmxAttributeSource: org.springframework.jmx.export.metadata.ManagedMetric getManagedMetric(java.lang.reflect.Method)>(r0);

        if $r11 == null goto label2;

        $r13 = virtualinvoke $r11.<org.springframework.jmx.export.metadata.ManagedMetric: java.lang.String getDescription()>();

        $z1 = staticinvoke <org.springframework.util.StringUtils: boolean hasText(java.lang.String)>($r13);

        if $z1 == 0 goto label2;

        $r14 = virtualinvoke $r11.<org.springframework.jmx.export.metadata.ManagedMetric: java.lang.String getDescription()>();

        return $r14;

     label2:
        $r12 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.String getName()>();

        return $r12;

     label3:
        $r3 = r2.<org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler: org.springframework.jmx.export.metadata.JmxAttributeSource attributeSource>;

        $r4 = interfaceinvoke $r3.<org.springframework.jmx.export.metadata.JmxAttributeSource: org.springframework.jmx.export.metadata.ManagedOperation getManagedOperation(java.lang.reflect.Method)>(r0);

        if $r4 == null goto label4;

        $r6 = virtualinvoke $r4.<org.springframework.jmx.export.metadata.ManagedOperation: java.lang.String getDescription()>();

        $z0 = staticinvoke <org.springframework.util.StringUtils: boolean hasText(java.lang.String)>($r6);

        if $z0 == 0 goto label4;

        $r7 = virtualinvoke $r4.<org.springframework.jmx.export.metadata.ManagedOperation: java.lang.String getDescription()>();

        return $r7;

     label4:
        $r5 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.String getName()>();

        return $r5;
    }

    protected javax.management.MBeanParameterInfo[] getOperationParameters(java.lang.reflect.Method, java.lang.String)
    {
        javax.management.MBeanParameterInfo $r8;
        int $i0, $i1, $i2, i3;
        java.lang.String $r9, $r11, $r12, r13;
        org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler r0;
        java.lang.reflect.Method r1;
        java.lang.Class[] $r6;
        org.springframework.jmx.export.metadata.ManagedOperationParameter r7;
        org.springframework.jmx.export.metadata.JmxAttributeSource $r2;
        javax.management.MBeanParameterInfo[] $r4, r5;
        java.lang.Class $r10;
        org.springframework.jmx.export.metadata.ManagedOperationParameter[] $r3;

        r0 := @this: org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler;

        r1 := @parameter0: java.lang.reflect.Method;

        r13 := @parameter1: java.lang.String;

        $r2 = r0.<org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler: org.springframework.jmx.export.metadata.JmxAttributeSource attributeSource>;

        $r3 = interfaceinvoke $r2.<org.springframework.jmx.export.metadata.JmxAttributeSource: org.springframework.jmx.export.metadata.ManagedOperationParameter[] getManagedOperationParameters(java.lang.reflect.Method)>(r1);

        if $r3 == null goto label1;

        $i0 = lengthof $r3;

        if $i0 != 0 goto label2;

     label1:
        $r4 = newarray (javax.management.MBeanParameterInfo)[0];

        return $r4;

     label2:
        $i1 = lengthof $r3;

        r5 = newarray (javax.management.MBeanParameterInfo)[$i1];

        $r6 = virtualinvoke r1.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        i3 = 0;

        goto label4;

     label3:
        r7 = $r3[i3];

        $r8 = new javax.management.MBeanParameterInfo;

        $r9 = virtualinvoke r7.<org.springframework.jmx.export.metadata.ManagedOperationParameter: java.lang.String getName()>();

        $r10 = $r6[i3];

        $r11 = virtualinvoke $r10.<java.lang.Class: java.lang.String getName()>();

        $r12 = virtualinvoke r7.<org.springframework.jmx.export.metadata.ManagedOperationParameter: java.lang.String getDescription()>();

        specialinvoke $r8.<javax.management.MBeanParameterInfo: void <init>(java.lang.String,java.lang.String,java.lang.String)>($r9, $r11, $r12);

        r5[i3] = $r8;

        i3 = i3 + 1;

     label4:
        $i2 = lengthof $r3;

        if i3 < $i2 goto label3;

        return r5;
    }

    protected javax.management.modelmbean.ModelMBeanNotificationInfo[] getNotificationInfo(java.lang.Object, java.lang.String)
    {
        javax.management.modelmbean.ModelMBeanNotificationInfo $r7;
        org.springframework.jmx.export.metadata.ManagedNotification[] $r4;
        org.springframework.jmx.export.metadata.JmxAttributeSource $r2;
        javax.management.modelmbean.ModelMBeanNotificationInfo[] r5;
        int $i0, $i1, i2;
        java.lang.Object r1;
        java.lang.Class $r3;
        org.springframework.jmx.export.metadata.ManagedNotification r6;
        java.lang.String r8;
        org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler r0;

        r0 := @this: org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler;

        r1 := @parameter0: java.lang.Object;

        r8 := @parameter1: java.lang.String;

        $r2 = r0.<org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler: org.springframework.jmx.export.metadata.JmxAttributeSource attributeSource>;

        $r3 = virtualinvoke r0.<org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler: java.lang.Class getClassToExpose(java.lang.Object)>(r1);

        $r4 = interfaceinvoke $r2.<org.springframework.jmx.export.metadata.JmxAttributeSource: org.springframework.jmx.export.metadata.ManagedNotification[] getManagedNotifications(java.lang.Class)>($r3);

        $i0 = lengthof $r4;

        r5 = newarray (javax.management.modelmbean.ModelMBeanNotificationInfo)[$i0];

        i2 = 0;

        goto label2;

     label1:
        r6 = $r4[i2];

        $r7 = staticinvoke <org.springframework.jmx.export.metadata.JmxMetadataUtils: javax.management.modelmbean.ModelMBeanNotificationInfo convertToModelMBeanNotificationInfo(org.springframework.jmx.export.metadata.ManagedNotification)>(r6);

        r5[i2] = $r7;

        i2 = i2 + 1;

     label2:
        $i1 = lengthof $r4;

        if i2 < $i1 goto label1;

        return r5;
    }

    protected void populateMBeanDescriptor(javax.management.Descriptor, java.lang.Object, java.lang.String)
    {
        org.springframework.jmx.export.metadata.ManagedResource $r4;
        int $i0, $i1, $i2;
        java.lang.String $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r19, r20;
        org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler r0;
        org.springframework.jmx.export.metadata.InvalidMetadataException $r15;
        boolean $z0, $z1, $z2, $z3, $z4;
        javax.management.Descriptor r5;
        org.springframework.jmx.export.metadata.JmxAttributeSource $r2;
        java.lang.Object r1;
        java.lang.Class $r3, $r17;
        java.lang.StringBuilder $r16, $r18;

        r0 := @this: org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler;

        r5 := @parameter0: javax.management.Descriptor;

        r1 := @parameter1: java.lang.Object;

        r20 := @parameter2: java.lang.String;

        $r2 = r0.<org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler: org.springframework.jmx.export.metadata.JmxAttributeSource attributeSource>;

        $r3 = virtualinvoke r0.<org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler: java.lang.Class getClassToExpose(java.lang.Object)>(r1);

        $r4 = interfaceinvoke $r2.<org.springframework.jmx.export.metadata.JmxAttributeSource: org.springframework.jmx.export.metadata.ManagedResource getManagedResource(java.lang.Class)>($r3);

        if $r4 != null goto label1;

        $r15 = new org.springframework.jmx.export.metadata.InvalidMetadataException;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>(java.lang.String)>("No ManagedResource attribute found for class: ");

        $r17 = virtualinvoke r0.<org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler: java.lang.Class getClassToExpose(java.lang.Object)>(r1);

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r15.<org.springframework.jmx.export.metadata.InvalidMetadataException: void <init>(java.lang.String)>($r19);

        throw $r15;

     label1:
        $i0 = virtualinvoke $r4.<org.springframework.jmx.export.metadata.ManagedResource: int getCurrencyTimeLimit()>();

        virtualinvoke r0.<org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler: void applyCurrencyTimeLimit(javax.management.Descriptor,int)>(r5, $i0);

        $z0 = virtualinvoke $r4.<org.springframework.jmx.export.metadata.ManagedResource: boolean isLog()>();

        if $z0 == 0 goto label2;

        interfaceinvoke r5.<javax.management.Descriptor: void setField(java.lang.String,java.lang.Object)>("log", "true");

     label2:
        $r6 = virtualinvoke $r4.<org.springframework.jmx.export.metadata.ManagedResource: java.lang.String getLogFile()>();

        $z1 = staticinvoke <org.springframework.util.StringUtils: boolean hasLength(java.lang.String)>($r6);

        if $z1 == 0 goto label3;

        $r14 = virtualinvoke $r4.<org.springframework.jmx.export.metadata.ManagedResource: java.lang.String getLogFile()>();

        interfaceinvoke r5.<javax.management.Descriptor: void setField(java.lang.String,java.lang.Object)>("logFile", $r14);

     label3:
        $r7 = virtualinvoke $r4.<org.springframework.jmx.export.metadata.ManagedResource: java.lang.String getPersistPolicy()>();

        $z2 = staticinvoke <org.springframework.util.StringUtils: boolean hasLength(java.lang.String)>($r7);

        if $z2 == 0 goto label4;

        $r13 = virtualinvoke $r4.<org.springframework.jmx.export.metadata.ManagedResource: java.lang.String getPersistPolicy()>();

        interfaceinvoke r5.<javax.management.Descriptor: void setField(java.lang.String,java.lang.Object)>("persistPolicy", $r13);

     label4:
        $i1 = virtualinvoke $r4.<org.springframework.jmx.export.metadata.ManagedResource: int getPersistPeriod()>();

        if $i1 < 0 goto label5;

        $i2 = virtualinvoke $r4.<org.springframework.jmx.export.metadata.ManagedResource: int getPersistPeriod()>();

        $r12 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i2);

        interfaceinvoke r5.<javax.management.Descriptor: void setField(java.lang.String,java.lang.Object)>("persistPeriod", $r12);

     label5:
        $r8 = virtualinvoke $r4.<org.springframework.jmx.export.metadata.ManagedResource: java.lang.String getPersistName()>();

        $z3 = staticinvoke <org.springframework.util.StringUtils: boolean hasLength(java.lang.String)>($r8);

        if $z3 == 0 goto label6;

        $r11 = virtualinvoke $r4.<org.springframework.jmx.export.metadata.ManagedResource: java.lang.String getPersistName()>();

        interfaceinvoke r5.<javax.management.Descriptor: void setField(java.lang.String,java.lang.Object)>("persistName", $r11);

     label6:
        $r9 = virtualinvoke $r4.<org.springframework.jmx.export.metadata.ManagedResource: java.lang.String getPersistLocation()>();

        $z4 = staticinvoke <org.springframework.util.StringUtils: boolean hasLength(java.lang.String)>($r9);

        if $z4 == 0 goto label7;

        $r10 = virtualinvoke $r4.<org.springframework.jmx.export.metadata.ManagedResource: java.lang.String getPersistLocation()>();

        interfaceinvoke r5.<javax.management.Descriptor: void setField(java.lang.String,java.lang.Object)>("persistLocation", $r10);

     label7:
        return;
    }

    protected void populateAttributeDescriptor(javax.management.Descriptor, java.lang.reflect.Method, java.lang.reflect.Method, java.lang.String)
    {
        javax.management.Descriptor r6;
        org.springframework.jmx.export.metadata.ManagedAttribute r3, $r10, $r11;
        org.springframework.jmx.export.metadata.ManagedMetric $r8;
        org.springframework.jmx.export.metadata.JmxAttributeSource $r2, $r5, $r7;
        java.lang.String r9;
        org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler r1;
        java.lang.reflect.Method r0, r4;
        boolean $z0;

        r1 := @this: org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler;

        r6 := @parameter0: javax.management.Descriptor;

        r0 := @parameter1: java.lang.reflect.Method;

        r4 := @parameter2: java.lang.reflect.Method;

        r9 := @parameter3: java.lang.String;

        if r0 == null goto label1;

        $z0 = specialinvoke r1.<org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler: boolean hasManagedMetric(java.lang.reflect.Method)>(r0);

        if $z0 == 0 goto label1;

        $r7 = r1.<org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler: org.springframework.jmx.export.metadata.JmxAttributeSource attributeSource>;

        $r8 = interfaceinvoke $r7.<org.springframework.jmx.export.metadata.JmxAttributeSource: org.springframework.jmx.export.metadata.ManagedMetric getManagedMetric(java.lang.reflect.Method)>(r0);

        specialinvoke r1.<org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler: void populateMetricDescriptor(javax.management.Descriptor,org.springframework.jmx.export.metadata.ManagedMetric)>(r6, $r8);

        goto label6;

     label1:
        if r0 != null goto label2;

        $r10 = <org.springframework.jmx.export.metadata.ManagedAttribute: org.springframework.jmx.export.metadata.ManagedAttribute EMPTY>;

        goto label3;

     label2:
        $r2 = r1.<org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler: org.springframework.jmx.export.metadata.JmxAttributeSource attributeSource>;

        $r10 = interfaceinvoke $r2.<org.springframework.jmx.export.metadata.JmxAttributeSource: org.springframework.jmx.export.metadata.ManagedAttribute getManagedAttribute(java.lang.reflect.Method)>(r0);

     label3:
        r3 = $r10;

        if r4 != null goto label4;

        $r11 = <org.springframework.jmx.export.metadata.ManagedAttribute: org.springframework.jmx.export.metadata.ManagedAttribute EMPTY>;

        goto label5;

     label4:
        $r5 = r1.<org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler: org.springframework.jmx.export.metadata.JmxAttributeSource attributeSource>;

        $r11 = interfaceinvoke $r5.<org.springframework.jmx.export.metadata.JmxAttributeSource: org.springframework.jmx.export.metadata.ManagedAttribute getManagedAttribute(java.lang.reflect.Method)>(r4);

     label5:
        specialinvoke r1.<org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler: void populateAttributeDescriptor(javax.management.Descriptor,org.springframework.jmx.export.metadata.ManagedAttribute,org.springframework.jmx.export.metadata.ManagedAttribute)>(r6, r3, $r11);

     label6:
        return;
    }

    private void populateAttributeDescriptor(javax.management.Descriptor, org.springframework.jmx.export.metadata.ManagedAttribute, org.springframework.jmx.export.metadata.ManagedAttribute)
    {
        org.springframework.jmx.export.metadata.ManagedAttribute r2, r3;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.String $r7, $r8, $r9, $r10;
        org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler r0;
        boolean $z0;
        javax.management.Descriptor r1;
        java.lang.Object $r4, $r5, $r6;

        r0 := @this: org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler;

        r1 := @parameter0: javax.management.Descriptor;

        r2 := @parameter1: org.springframework.jmx.export.metadata.ManagedAttribute;

        r3 := @parameter2: org.springframework.jmx.export.metadata.ManagedAttribute;

        $i0 = virtualinvoke r2.<org.springframework.jmx.export.metadata.ManagedAttribute: int getCurrencyTimeLimit()>();

        $i1 = virtualinvoke r3.<org.springframework.jmx.export.metadata.ManagedAttribute: int getCurrencyTimeLimit()>();

        $i2 = specialinvoke r0.<org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler: int resolveIntDescriptor(int,int)>($i0, $i1);

        virtualinvoke r0.<org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler: void applyCurrencyTimeLimit(javax.management.Descriptor,int)>(r1, $i2);

        $r4 = virtualinvoke r2.<org.springframework.jmx.export.metadata.ManagedAttribute: java.lang.Object getDefaultValue()>();

        $r5 = virtualinvoke r3.<org.springframework.jmx.export.metadata.ManagedAttribute: java.lang.Object getDefaultValue()>();

        $r6 = specialinvoke r0.<org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler: java.lang.Object resolveObjectDescriptor(java.lang.Object,java.lang.Object)>($r4, $r5);

        interfaceinvoke r1.<javax.management.Descriptor: void setField(java.lang.String,java.lang.Object)>("default", $r6);

        $r7 = virtualinvoke r2.<org.springframework.jmx.export.metadata.ManagedAttribute: java.lang.String getPersistPolicy()>();

        $r8 = virtualinvoke r3.<org.springframework.jmx.export.metadata.ManagedAttribute: java.lang.String getPersistPolicy()>();

        $r9 = specialinvoke r0.<org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler: java.lang.String resolveStringDescriptor(java.lang.String,java.lang.String)>($r7, $r8);

        $z0 = staticinvoke <org.springframework.util.StringUtils: boolean hasLength(java.lang.String)>($r9);

        if $z0 == 0 goto label1;

        interfaceinvoke r1.<javax.management.Descriptor: void setField(java.lang.String,java.lang.Object)>("persistPolicy", $r9);

     label1:
        $i3 = virtualinvoke r2.<org.springframework.jmx.export.metadata.ManagedAttribute: int getPersistPeriod()>();

        $i4 = virtualinvoke r3.<org.springframework.jmx.export.metadata.ManagedAttribute: int getPersistPeriod()>();

        $i5 = specialinvoke r0.<org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler: int resolveIntDescriptor(int,int)>($i3, $i4);

        if $i5 < 0 goto label2;

        $r10 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i5);

        interfaceinvoke r1.<javax.management.Descriptor: void setField(java.lang.String,java.lang.Object)>("persistPeriod", $r10);

     label2:
        return;
    }

    private void populateMetricDescriptor(javax.management.Descriptor, org.springframework.jmx.export.metadata.ManagedMetric)
    {
        org.springframework.jmx.export.metadata.ManagedMetric r2;
        org.springframework.jmx.support.MetricType $r7, $r8, $r9;
        int $i0, $i1, $i2;
        java.lang.String $r3, $r4, $r5, $r6, $r10, $r11, $r12, $r13, $r14, $r15;
        org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler r0;
        boolean $z0, $z1, $z2, $z3;
        javax.management.Descriptor r1;

        r0 := @this: org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler;

        r1 := @parameter0: javax.management.Descriptor;

        r2 := @parameter1: org.springframework.jmx.export.metadata.ManagedMetric;

        $i0 = virtualinvoke r2.<org.springframework.jmx.export.metadata.ManagedMetric: int getCurrencyTimeLimit()>();

        virtualinvoke r0.<org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler: void applyCurrencyTimeLimit(javax.management.Descriptor,int)>(r1, $i0);

        $r3 = virtualinvoke r2.<org.springframework.jmx.export.metadata.ManagedMetric: java.lang.String getPersistPolicy()>();

        $z0 = staticinvoke <org.springframework.util.StringUtils: boolean hasLength(java.lang.String)>($r3);

        if $z0 == 0 goto label1;

        $r14 = virtualinvoke r2.<org.springframework.jmx.export.metadata.ManagedMetric: java.lang.String getPersistPolicy()>();

        interfaceinvoke r1.<javax.management.Descriptor: void setField(java.lang.String,java.lang.Object)>("persistPolicy", $r14);

     label1:
        $i1 = virtualinvoke r2.<org.springframework.jmx.export.metadata.ManagedMetric: int getPersistPeriod()>();

        if $i1 < 0 goto label2;

        $i2 = virtualinvoke r2.<org.springframework.jmx.export.metadata.ManagedMetric: int getPersistPeriod()>();

        $r13 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i2);

        interfaceinvoke r1.<javax.management.Descriptor: void setField(java.lang.String,java.lang.Object)>("persistPeriod", $r13);

     label2:
        $r4 = virtualinvoke r2.<org.springframework.jmx.export.metadata.ManagedMetric: java.lang.String getDisplayName()>();

        $z1 = staticinvoke <org.springframework.util.StringUtils: boolean hasLength(java.lang.String)>($r4);

        if $z1 == 0 goto label3;

        $r12 = virtualinvoke r2.<org.springframework.jmx.export.metadata.ManagedMetric: java.lang.String getDisplayName()>();

        interfaceinvoke r1.<javax.management.Descriptor: void setField(java.lang.String,java.lang.Object)>("displayName", $r12);

     label3:
        $r5 = virtualinvoke r2.<org.springframework.jmx.export.metadata.ManagedMetric: java.lang.String getUnit()>();

        $z2 = staticinvoke <org.springframework.util.StringUtils: boolean hasLength(java.lang.String)>($r5);

        if $z2 == 0 goto label4;

        $r11 = virtualinvoke r2.<org.springframework.jmx.export.metadata.ManagedMetric: java.lang.String getUnit()>();

        interfaceinvoke r1.<javax.management.Descriptor: void setField(java.lang.String,java.lang.Object)>("units", $r11);

     label4:
        $r6 = virtualinvoke r2.<org.springframework.jmx.export.metadata.ManagedMetric: java.lang.String getCategory()>();

        $z3 = staticinvoke <org.springframework.util.StringUtils: boolean hasLength(java.lang.String)>($r6);

        if $z3 == 0 goto label5;

        $r10 = virtualinvoke r2.<org.springframework.jmx.export.metadata.ManagedMetric: java.lang.String getCategory()>();

        interfaceinvoke r1.<javax.management.Descriptor: void setField(java.lang.String,java.lang.Object)>("metricCategory", $r10);

     label5:
        $r7 = virtualinvoke r2.<org.springframework.jmx.export.metadata.ManagedMetric: org.springframework.jmx.support.MetricType getMetricType()>();

        if $r7 != null goto label6;

        $r9 = <org.springframework.jmx.support.MetricType: org.springframework.jmx.support.MetricType GAUGE>;

        $r15 = virtualinvoke $r9.<org.springframework.jmx.support.MetricType: java.lang.String toString()>();

        goto label7;

     label6:
        $r8 = virtualinvoke r2.<org.springframework.jmx.export.metadata.ManagedMetric: org.springframework.jmx.support.MetricType getMetricType()>();

        $r15 = virtualinvoke $r8.<org.springframework.jmx.support.MetricType: java.lang.String toString()>();

     label7:
        interfaceinvoke r1.<javax.management.Descriptor: void setField(java.lang.String,java.lang.Object)>("metricType", $r15);

        return;
    }

    protected void populateOperationDescriptor(javax.management.Descriptor, java.lang.reflect.Method, java.lang.String)
    {
        org.springframework.jmx.export.metadata.JmxAttributeSource $r2;
        org.springframework.jmx.export.metadata.ManagedOperation $r3;
        javax.management.Descriptor r4;
        int $i0;
        java.lang.String r5;
        org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler r0;
        java.lang.reflect.Method r1;

        r0 := @this: org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler;

        r4 := @parameter0: javax.management.Descriptor;

        r1 := @parameter1: java.lang.reflect.Method;

        r5 := @parameter2: java.lang.String;

        $r2 = r0.<org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler: org.springframework.jmx.export.metadata.JmxAttributeSource attributeSource>;

        $r3 = interfaceinvoke $r2.<org.springframework.jmx.export.metadata.JmxAttributeSource: org.springframework.jmx.export.metadata.ManagedOperation getManagedOperation(java.lang.reflect.Method)>(r1);

        if $r3 == null goto label1;

        $i0 = virtualinvoke $r3.<org.springframework.jmx.export.metadata.ManagedOperation: int getCurrencyTimeLimit()>();

        virtualinvoke r0.<org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler: void applyCurrencyTimeLimit(javax.management.Descriptor,int)>(r4, $i0);

     label1:
        return;
    }

    private int resolveIntDescriptor(int, int)
    {
        int i0, i1, $i2;
        org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler r0;

        r0 := @this: org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 < i1 goto label1;

        $i2 = i0;

        goto label2;

     label1:
        $i2 = i1;

     label2:
        return $i2;
    }

    private java.lang.Object resolveObjectDescriptor(java.lang.Object, java.lang.Object)
    {
        java.lang.Object r0, r1, $r3;
        org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler r2;

        r2 := @this: org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        if r0 == null goto label1;

        $r3 = r0;

        goto label2;

     label1:
        $r3 = r1;

     label2:
        return $r3;
    }

    private java.lang.String resolveStringDescriptor(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1, $r3;
        org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler r2;
        boolean $z0;

        r2 := @this: org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $z0 = staticinvoke <org.springframework.util.StringUtils: boolean hasLength(java.lang.String)>(r0);

        if $z0 == 0 goto label1;

        $r3 = r0;

        goto label2;

     label1:
        $r3 = r1;

     label2:
        return $r3;
    }
}
