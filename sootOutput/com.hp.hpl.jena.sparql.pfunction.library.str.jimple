public class com.hp.hpl.jena.sparql.pfunction.library.str extends com.hp.hpl.jena.sparql.pfunction.PFuncSimple
{

    public void <init>()
    {
        com.hp.hpl.jena.sparql.pfunction.library.str r0;

        r0 := @this: com.hp.hpl.jena.sparql.pfunction.library.str;

        specialinvoke r0.<com.hp.hpl.jena.sparql.pfunction.PFuncSimple: void <init>()>();

        return;
    }

    public void build(com.hp.hpl.jena.sparql.pfunction.PropFuncArg, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.sparql.pfunction.PropFuncArg, com.hp.hpl.jena.sparql.engine.ExecutionContext)
    {
        com.hp.hpl.jena.sparql.pfunction.PropFuncArg r1, r3;
        com.hp.hpl.jena.sparql.pfunction.library.str r0;
        com.hp.hpl.jena.graph.Node r2;
        com.hp.hpl.jena.sparql.engine.ExecutionContext r4;

        r0 := @this: com.hp.hpl.jena.sparql.pfunction.library.str;

        r1 := @parameter0: com.hp.hpl.jena.sparql.pfunction.PropFuncArg;

        r2 := @parameter1: com.hp.hpl.jena.graph.Node;

        r3 := @parameter2: com.hp.hpl.jena.sparql.pfunction.PropFuncArg;

        r4 := @parameter3: com.hp.hpl.jena.sparql.engine.ExecutionContext;

        return;
    }

    public com.hp.hpl.jena.sparql.engine.QueryIterator execEvaluated(com.hp.hpl.jena.sparql.engine.binding.Binding, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.sparql.engine.ExecutionContext)
    {
        com.hp.hpl.jena.graph.Node r0, r3, $r5, r15;
        com.hp.hpl.jena.query.QueryExecException $r11, $r12, $r13;
        com.hp.hpl.jena.sparql.engine.ExecutionContext r1;
        java.lang.String $r4;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        com.hp.hpl.jena.sparql.pfunction.library.str r14;
        com.hp.hpl.jena.sparql.core.Var $r9;
        com.hp.hpl.jena.sparql.engine.binding.Binding r7;
        com.hp.hpl.jena.sparql.engine.QueryIterator $r2, $r6, $r8, $r10;

        r14 := @this: com.hp.hpl.jena.sparql.pfunction.library.str;

        r7 := @parameter0: com.hp.hpl.jena.sparql.engine.binding.Binding;

        r0 := @parameter1: com.hp.hpl.jena.graph.Node;

        r15 := @parameter2: com.hp.hpl.jena.graph.Node;

        r3 := @parameter3: com.hp.hpl.jena.graph.Node;

        r1 := @parameter4: com.hp.hpl.jena.sparql.engine.ExecutionContext;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: boolean isURI()>();

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: boolean isBlank()>();

        if $z1 == 0 goto label2;

     label1:
        $r2 = staticinvoke <com.hp.hpl.jena.sparql.util.IterLib: com.hp.hpl.jena.sparql.engine.QueryIterator noResults(com.hp.hpl.jena.sparql.engine.ExecutionContext)>(r1);

        return $r2;

     label2:
        $z2 = staticinvoke <com.hp.hpl.jena.sparql.core.Var: boolean isVar(com.hp.hpl.jena.graph.Node)>(r0);

        if $z2 == 0 goto label3;

        $z7 = staticinvoke <com.hp.hpl.jena.sparql.core.Var: boolean isVar(com.hp.hpl.jena.graph.Node)>(r3);

        if $z7 == 0 goto label3;

        $r13 = new com.hp.hpl.jena.query.QueryExecException;

        specialinvoke $r13.<com.hp.hpl.jena.query.QueryExecException: void <init>(java.lang.String)>("str: Both subject and object are unbound variables");

        throw $r13;

     label3:
        $z3 = staticinvoke <com.hp.hpl.jena.sparql.core.Var: boolean isVar(com.hp.hpl.jena.graph.Node)>(r3);

        if $z3 == 0 goto label4;

        $r12 = new com.hp.hpl.jena.query.QueryExecException;

        specialinvoke $r12.<com.hp.hpl.jena.query.QueryExecException: void <init>(java.lang.String)>("str: Object is an unbound variables");

        throw $r12;

     label4:
        $z4 = virtualinvoke r3.<com.hp.hpl.jena.graph.Node: boolean isBlank()>();

        if $z4 == 0 goto label5;

        $r11 = new com.hp.hpl.jena.query.QueryExecException;

        specialinvoke $r11.<com.hp.hpl.jena.query.QueryExecException: void <init>(java.lang.String)>("str: object is a blank node");

        throw $r11;

     label5:
        $r4 = staticinvoke <com.hp.hpl.jena.sparql.expr.nodevalue.NodeFunctions: java.lang.String str(com.hp.hpl.jena.graph.Node)>(r3);

        $r5 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createLiteral(java.lang.String)>($r4);

        $z5 = staticinvoke <com.hp.hpl.jena.sparql.core.Var: boolean isVar(com.hp.hpl.jena.graph.Node)>(r0);

        if $z5 == 0 goto label6;

        $r9 = staticinvoke <com.hp.hpl.jena.sparql.core.Var: com.hp.hpl.jena.sparql.core.Var alloc(com.hp.hpl.jena.graph.Node)>(r0);

        $r10 = staticinvoke <com.hp.hpl.jena.sparql.util.IterLib: com.hp.hpl.jena.sparql.engine.QueryIterator oneResult(com.hp.hpl.jena.sparql.engine.binding.Binding,com.hp.hpl.jena.sparql.core.Var,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.engine.ExecutionContext)>(r7, $r9, $r5, r1);

        return $r10;

     label6:
        $z6 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: boolean equals(java.lang.Object)>($r5);

        if $z6 == 0 goto label7;

        $r8 = staticinvoke <com.hp.hpl.jena.sparql.util.IterLib: com.hp.hpl.jena.sparql.engine.QueryIterator result(com.hp.hpl.jena.sparql.engine.binding.Binding,com.hp.hpl.jena.sparql.engine.ExecutionContext)>(r7, r1);

        return $r8;

     label7:
        $r6 = staticinvoke <com.hp.hpl.jena.sparql.util.IterLib: com.hp.hpl.jena.sparql.engine.QueryIterator noResults(com.hp.hpl.jena.sparql.engine.ExecutionContext)>(r1);

        return $r6;
    }
}
