public final class org.codehaus.jackson.node.ArrayNode extends org.codehaus.jackson.node.ContainerNode
{
    protected java.util.ArrayList _children;

    public void <init>(org.codehaus.jackson.node.JsonNodeFactory)
    {
        org.codehaus.jackson.node.ArrayNode r0;
        org.codehaus.jackson.node.JsonNodeFactory r1;

        r0 := @this: org.codehaus.jackson.node.ArrayNode;

        r1 := @parameter0: org.codehaus.jackson.node.JsonNodeFactory;

        specialinvoke r0.<org.codehaus.jackson.node.ContainerNode: void <init>(org.codehaus.jackson.node.JsonNodeFactory)>(r1);

        return;
    }

    public org.codehaus.jackson.JsonToken asToken()
    {
        org.codehaus.jackson.node.ArrayNode r1;
        org.codehaus.jackson.JsonToken $r0;

        r1 := @this: org.codehaus.jackson.node.ArrayNode;

        $r0 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken START_ARRAY>;

        return $r0;
    }

    public boolean isArray()
    {
        org.codehaus.jackson.node.ArrayNode r0;

        r0 := @this: org.codehaus.jackson.node.ArrayNode;

        return 1;
    }

    public int size()
    {
        org.codehaus.jackson.node.ArrayNode r0;
        int $i0;
        java.util.ArrayList $r1, $r2;

        r0 := @this: org.codehaus.jackson.node.ArrayNode;

        $r1 = r0.<org.codehaus.jackson.node.ArrayNode: java.util.ArrayList _children>;

        if $r1 != null goto label1;

        $i0 = 0;

        goto label2;

     label1:
        $r2 = r0.<org.codehaus.jackson.node.ArrayNode: java.util.ArrayList _children>;

        $i0 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

     label2:
        return $i0;
    }

    public java.util.Iterator getElements()
    {
        org.codehaus.jackson.node.ArrayNode r0;
        java.util.Iterator $r3;
        java.util.ArrayList $r1, $r2;

        r0 := @this: org.codehaus.jackson.node.ArrayNode;

        $r1 = r0.<org.codehaus.jackson.node.ArrayNode: java.util.ArrayList _children>;

        if $r1 != null goto label1;

        $r3 = staticinvoke <org.codehaus.jackson.node.ContainerNode$NoNodesIterator: org.codehaus.jackson.node.ContainerNode$NoNodesIterator instance()>();

        goto label2;

     label1:
        $r2 = r0.<org.codehaus.jackson.node.ArrayNode: java.util.ArrayList _children>;

        $r3 = virtualinvoke $r2.<java.util.ArrayList: java.util.Iterator iterator()>();

     label2:
        return $r3;
    }

    public org.codehaus.jackson.JsonNode get(int)
    {
        org.codehaus.jackson.JsonNode $r5;
        java.util.ArrayList $r1, $r2, $r3;
        org.codehaus.jackson.node.ArrayNode r0;
        int i0, $i1;
        java.lang.Object $r4;

        r0 := @this: org.codehaus.jackson.node.ArrayNode;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        $r1 = r0.<org.codehaus.jackson.node.ArrayNode: java.util.ArrayList _children>;

        if $r1 == null goto label1;

        $r2 = r0.<org.codehaus.jackson.node.ArrayNode: java.util.ArrayList _children>;

        $i1 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

        if i0 >= $i1 goto label1;

        $r3 = r0.<org.codehaus.jackson.node.ArrayNode: java.util.ArrayList _children>;

        $r4 = virtualinvoke $r3.<java.util.ArrayList: java.lang.Object get(int)>(i0);

        $r5 = (org.codehaus.jackson.JsonNode) $r4;

        return $r5;

     label1:
        return null;
    }

    public org.codehaus.jackson.JsonNode get(java.lang.String)
    {
        org.codehaus.jackson.node.ArrayNode r0;
        java.lang.String r1;

        r0 := @this: org.codehaus.jackson.node.ArrayNode;

        r1 := @parameter0: java.lang.String;

        return null;
    }

    public org.codehaus.jackson.JsonNode path(java.lang.String)
    {
        org.codehaus.jackson.node.ArrayNode r1;
        java.lang.String r2;
        org.codehaus.jackson.node.MissingNode $r0;

        r1 := @this: org.codehaus.jackson.node.ArrayNode;

        r2 := @parameter0: java.lang.String;

        $r0 = staticinvoke <org.codehaus.jackson.node.MissingNode: org.codehaus.jackson.node.MissingNode getInstance()>();

        return $r0;
    }

    public org.codehaus.jackson.JsonNode path(int)
    {
        org.codehaus.jackson.node.MissingNode $r6;
        org.codehaus.jackson.JsonNode $r5;
        java.util.ArrayList $r1, $r2, $r3;
        org.codehaus.jackson.node.ArrayNode r0;
        int i0, $i1;
        java.lang.Object $r4;

        r0 := @this: org.codehaus.jackson.node.ArrayNode;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        $r1 = r0.<org.codehaus.jackson.node.ArrayNode: java.util.ArrayList _children>;

        if $r1 == null goto label1;

        $r2 = r0.<org.codehaus.jackson.node.ArrayNode: java.util.ArrayList _children>;

        $i1 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

        if i0 >= $i1 goto label1;

        $r3 = r0.<org.codehaus.jackson.node.ArrayNode: java.util.ArrayList _children>;

        $r4 = virtualinvoke $r3.<java.util.ArrayList: java.lang.Object get(int)>(i0);

        $r5 = (org.codehaus.jackson.JsonNode) $r4;

        return $r5;

     label1:
        $r6 = staticinvoke <org.codehaus.jackson.node.MissingNode: org.codehaus.jackson.node.MissingNode getInstance()>();

        return $r6;
    }

    public final void serialize(org.codehaus.jackson.JsonGenerator, org.codehaus.jackson.map.SerializerProvider) throws java.io.IOException, org.codehaus.jackson.JsonProcessingException
    {
        java.util.Iterator $r4;
        org.codehaus.jackson.node.BaseJsonNode $r8;
        org.codehaus.jackson.map.SerializerProvider r7;
        org.codehaus.jackson.JsonNode r6;
        java.util.ArrayList $r2, $r3;
        org.codehaus.jackson.node.ArrayNode r1;
        org.codehaus.jackson.JsonGenerator r0;
        java.lang.Object $r5;
        boolean $z0;

        r1 := @this: org.codehaus.jackson.node.ArrayNode;

        r0 := @parameter0: org.codehaus.jackson.JsonGenerator;

        r7 := @parameter1: org.codehaus.jackson.map.SerializerProvider;

        virtualinvoke r0.<org.codehaus.jackson.JsonGenerator: void writeStartArray()>();

        $r2 = r1.<org.codehaus.jackson.node.ArrayNode: java.util.ArrayList _children>;

        if $r2 == null goto label2;

        $r3 = r1.<org.codehaus.jackson.node.ArrayNode: java.util.ArrayList _children>;

        $r4 = virtualinvoke $r3.<java.util.ArrayList: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (org.codehaus.jackson.JsonNode) $r5;

        $r8 = (org.codehaus.jackson.node.BaseJsonNode) r6;

        virtualinvoke $r8.<org.codehaus.jackson.node.BaseJsonNode: void serialize(org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>(r0, r7);

        goto label1;

     label2:
        virtualinvoke r0.<org.codehaus.jackson.JsonGenerator: void writeEndArray()>();

        return;
    }

    public void serializeWithType(org.codehaus.jackson.JsonGenerator, org.codehaus.jackson.map.SerializerProvider, org.codehaus.jackson.map.TypeSerializer) throws java.io.IOException, org.codehaus.jackson.JsonProcessingException
    {
        java.util.Iterator $r5;
        org.codehaus.jackson.node.BaseJsonNode $r9;
        org.codehaus.jackson.map.SerializerProvider r8;
        org.codehaus.jackson.JsonNode r7;
        java.util.ArrayList $r3, $r4;
        org.codehaus.jackson.node.ArrayNode r1;
        org.codehaus.jackson.map.TypeSerializer r0;
        org.codehaus.jackson.JsonGenerator r2;
        java.lang.Object $r6;
        boolean $z0;

        r1 := @this: org.codehaus.jackson.node.ArrayNode;

        r2 := @parameter0: org.codehaus.jackson.JsonGenerator;

        r8 := @parameter1: org.codehaus.jackson.map.SerializerProvider;

        r0 := @parameter2: org.codehaus.jackson.map.TypeSerializer;

        virtualinvoke r0.<org.codehaus.jackson.map.TypeSerializer: void writeTypePrefixForArray(java.lang.Object,org.codehaus.jackson.JsonGenerator)>(r1, r2);

        $r3 = r1.<org.codehaus.jackson.node.ArrayNode: java.util.ArrayList _children>;

        if $r3 == null goto label2;

        $r4 = r1.<org.codehaus.jackson.node.ArrayNode: java.util.ArrayList _children>;

        $r5 = virtualinvoke $r4.<java.util.ArrayList: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (org.codehaus.jackson.JsonNode) $r6;

        $r9 = (org.codehaus.jackson.node.BaseJsonNode) r7;

        virtualinvoke $r9.<org.codehaus.jackson.node.BaseJsonNode: void serialize(org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>(r2, r8);

        goto label1;

     label2:
        virtualinvoke r0.<org.codehaus.jackson.map.TypeSerializer: void writeTypeSuffixForArray(java.lang.Object,org.codehaus.jackson.JsonGenerator)>(r1, r2);

        return;
    }

    public org.codehaus.jackson.JsonNode findValue(java.lang.String)
    {
        java.util.Iterator $r3;
        org.codehaus.jackson.JsonNode r5, $r7;
        java.util.ArrayList $r1, $r2;
        org.codehaus.jackson.node.ArrayNode r0;
        java.lang.Object $r4;
        java.lang.String r6;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.node.ArrayNode;

        r6 := @parameter0: java.lang.String;

        $r1 = r0.<org.codehaus.jackson.node.ArrayNode: java.util.ArrayList _children>;

        if $r1 == null goto label3;

        $r2 = r0.<org.codehaus.jackson.node.ArrayNode: java.util.ArrayList _children>;

        $r3 = virtualinvoke $r2.<java.util.ArrayList: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.codehaus.jackson.JsonNode) $r4;

        $r7 = virtualinvoke r5.<org.codehaus.jackson.JsonNode: org.codehaus.jackson.JsonNode findValue(java.lang.String)>(r6);

        if $r7 == null goto label2;

        return $r7;

     label2:
        goto label1;

     label3:
        return null;
    }

    public java.util.List findValues(java.lang.String, java.util.List)
    {
        java.util.Iterator $r3;
        org.codehaus.jackson.JsonNode r5;
        java.util.ArrayList $r1, $r2;
        org.codehaus.jackson.node.ArrayNode r0;
        java.util.List r7;
        java.lang.Object $r4;
        java.lang.String r6;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.node.ArrayNode;

        r6 := @parameter0: java.lang.String;

        r7 := @parameter1: java.util.List;

        $r1 = r0.<org.codehaus.jackson.node.ArrayNode: java.util.ArrayList _children>;

        if $r1 == null goto label2;

        $r2 = r0.<org.codehaus.jackson.node.ArrayNode: java.util.ArrayList _children>;

        $r3 = virtualinvoke $r2.<java.util.ArrayList: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.codehaus.jackson.JsonNode) $r4;

        r7 = virtualinvoke r5.<org.codehaus.jackson.JsonNode: java.util.List findValues(java.lang.String,java.util.List)>(r6, r7);

        goto label1;

     label2:
        return r7;
    }

    public java.util.List findValuesAsText(java.lang.String, java.util.List)
    {
        java.util.Iterator $r3;
        org.codehaus.jackson.JsonNode r5;
        java.util.ArrayList $r1, $r2;
        org.codehaus.jackson.node.ArrayNode r0;
        java.util.List r7;
        java.lang.Object $r4;
        java.lang.String r6;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.node.ArrayNode;

        r6 := @parameter0: java.lang.String;

        r7 := @parameter1: java.util.List;

        $r1 = r0.<org.codehaus.jackson.node.ArrayNode: java.util.ArrayList _children>;

        if $r1 == null goto label2;

        $r2 = r0.<org.codehaus.jackson.node.ArrayNode: java.util.ArrayList _children>;

        $r3 = virtualinvoke $r2.<java.util.ArrayList: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.codehaus.jackson.JsonNode) $r4;

        r7 = virtualinvoke r5.<org.codehaus.jackson.JsonNode: java.util.List findValuesAsText(java.lang.String,java.util.List)>(r6, r7);

        goto label1;

     label2:
        return r7;
    }

    public org.codehaus.jackson.node.ObjectNode findParent(java.lang.String)
    {
        java.util.Iterator $r3;
        org.codehaus.jackson.JsonNode r5, $r7;
        java.util.ArrayList $r1, $r2;
        org.codehaus.jackson.node.ArrayNode r0;
        java.lang.Object $r4;
        java.lang.String r6;
        boolean $z0;
        org.codehaus.jackson.node.ObjectNode $r8;

        r0 := @this: org.codehaus.jackson.node.ArrayNode;

        r6 := @parameter0: java.lang.String;

        $r1 = r0.<org.codehaus.jackson.node.ArrayNode: java.util.ArrayList _children>;

        if $r1 == null goto label3;

        $r2 = r0.<org.codehaus.jackson.node.ArrayNode: java.util.ArrayList _children>;

        $r3 = virtualinvoke $r2.<java.util.ArrayList: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.codehaus.jackson.JsonNode) $r4;

        $r7 = virtualinvoke r5.<org.codehaus.jackson.JsonNode: org.codehaus.jackson.JsonNode findParent(java.lang.String)>(r6);

        if $r7 == null goto label2;

        $r8 = (org.codehaus.jackson.node.ObjectNode) $r7;

        return $r8;

     label2:
        goto label1;

     label3:
        return null;
    }

    public java.util.List findParents(java.lang.String, java.util.List)
    {
        java.util.Iterator $r3;
        org.codehaus.jackson.JsonNode r5;
        java.util.ArrayList $r1, $r2;
        org.codehaus.jackson.node.ArrayNode r0;
        java.util.List r7;
        java.lang.Object $r4;
        java.lang.String r6;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.node.ArrayNode;

        r6 := @parameter0: java.lang.String;

        r7 := @parameter1: java.util.List;

        $r1 = r0.<org.codehaus.jackson.node.ArrayNode: java.util.ArrayList _children>;

        if $r1 == null goto label2;

        $r2 = r0.<org.codehaus.jackson.node.ArrayNode: java.util.ArrayList _children>;

        $r3 = virtualinvoke $r2.<java.util.ArrayList: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.codehaus.jackson.JsonNode) $r4;

        r7 = virtualinvoke r5.<org.codehaus.jackson.JsonNode: java.util.List findParents(java.lang.String,java.util.List)>(r6, r7);

        goto label1;

     label2:
        return r7;
    }

    public org.codehaus.jackson.JsonNode set(int, org.codehaus.jackson.JsonNode)
    {
        org.codehaus.jackson.node.ArrayNode r0;
        int i0;
        org.codehaus.jackson.JsonNode $r1, r2;

        r0 := @this: org.codehaus.jackson.node.ArrayNode;

        i0 := @parameter0: int;

        r2 := @parameter1: org.codehaus.jackson.JsonNode;

        if r2 != null goto label1;

        r2 = virtualinvoke r0.<org.codehaus.jackson.node.ArrayNode: org.codehaus.jackson.node.NullNode nullNode()>();

     label1:
        $r1 = virtualinvoke r0.<org.codehaus.jackson.node.ArrayNode: org.codehaus.jackson.JsonNode _set(int,org.codehaus.jackson.JsonNode)>(i0, r2);

        return $r1;
    }

    public void add(org.codehaus.jackson.JsonNode)
    {
        org.codehaus.jackson.node.ArrayNode r0;
        org.codehaus.jackson.JsonNode r1;

        r0 := @this: org.codehaus.jackson.node.ArrayNode;

        r1 := @parameter0: org.codehaus.jackson.JsonNode;

        if r1 != null goto label1;

        r1 = virtualinvoke r0.<org.codehaus.jackson.node.ArrayNode: org.codehaus.jackson.node.NullNode nullNode()>();

     label1:
        specialinvoke r0.<org.codehaus.jackson.node.ArrayNode: void _add(org.codehaus.jackson.JsonNode)>(r1);

        return;
    }

    public org.codehaus.jackson.JsonNode addAll(org.codehaus.jackson.node.ArrayNode)
    {
        org.codehaus.jackson.node.ArrayNode r0, r1;
        int $i0, $i1;
        java.util.ArrayList $r2, $r3, $r4;

        r1 := @this: org.codehaus.jackson.node.ArrayNode;

        r0 := @parameter0: org.codehaus.jackson.node.ArrayNode;

        $i0 = virtualinvoke r0.<org.codehaus.jackson.node.ArrayNode: int size()>();

        if $i0 <= 0 goto label2;

        $r2 = r1.<org.codehaus.jackson.node.ArrayNode: java.util.ArrayList _children>;

        if $r2 != null goto label1;

        $r4 = new java.util.ArrayList;

        $i1 = $i0 + 2;

        specialinvoke $r4.<java.util.ArrayList: void <init>(int)>($i1);

        r1.<org.codehaus.jackson.node.ArrayNode: java.util.ArrayList _children> = $r4;

     label1:
        $r3 = r1.<org.codehaus.jackson.node.ArrayNode: java.util.ArrayList _children>;

        virtualinvoke r0.<org.codehaus.jackson.node.ArrayNode: void addContentsTo(java.util.List)>($r3);

     label2:
        return r1;
    }

    public org.codehaus.jackson.JsonNode addAll(java.util.Collection)
    {
        org.codehaus.jackson.node.ArrayNode r1;
        java.util.Collection r0;
        int $i0;
        java.util.ArrayList $r2, $r3, $r4;

        r1 := @this: org.codehaus.jackson.node.ArrayNode;

        r0 := @parameter0: java.util.Collection;

        $i0 = interfaceinvoke r0.<java.util.Collection: int size()>();

        if $i0 <= 0 goto label2;

        $r2 = r1.<org.codehaus.jackson.node.ArrayNode: java.util.ArrayList _children>;

        if $r2 != null goto label1;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>(java.util.Collection)>(r0);

        r1.<org.codehaus.jackson.node.ArrayNode: java.util.ArrayList _children> = $r4;

        goto label2;

     label1:
        $r3 = r1.<org.codehaus.jackson.node.ArrayNode: java.util.ArrayList _children>;

        virtualinvoke $r3.<java.util.ArrayList: boolean addAll(java.util.Collection)>(r0);

     label2:
        return r1;
    }

    public void insert(int, org.codehaus.jackson.JsonNode)
    {
        org.codehaus.jackson.node.ArrayNode r0;
        int i0;
        org.codehaus.jackson.JsonNode r1;

        r0 := @this: org.codehaus.jackson.node.ArrayNode;

        i0 := @parameter0: int;

        r1 := @parameter1: org.codehaus.jackson.JsonNode;

        if r1 != null goto label1;

        r1 = virtualinvoke r0.<org.codehaus.jackson.node.ArrayNode: org.codehaus.jackson.node.NullNode nullNode()>();

     label1:
        specialinvoke r0.<org.codehaus.jackson.node.ArrayNode: void _insert(int,org.codehaus.jackson.JsonNode)>(i0, r1);

        return;
    }

    public org.codehaus.jackson.JsonNode remove(int)
    {
        org.codehaus.jackson.JsonNode $r5;
        java.util.ArrayList $r1, $r2, $r3;
        org.codehaus.jackson.node.ArrayNode r0;
        int i0, $i1;
        java.lang.Object $r4;

        r0 := @this: org.codehaus.jackson.node.ArrayNode;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        $r1 = r0.<org.codehaus.jackson.node.ArrayNode: java.util.ArrayList _children>;

        if $r1 == null goto label1;

        $r2 = r0.<org.codehaus.jackson.node.ArrayNode: java.util.ArrayList _children>;

        $i1 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

        if i0 >= $i1 goto label1;

        $r3 = r0.<org.codehaus.jackson.node.ArrayNode: java.util.ArrayList _children>;

        $r4 = virtualinvoke $r3.<java.util.ArrayList: java.lang.Object remove(int)>(i0);

        $r5 = (org.codehaus.jackson.JsonNode) $r4;

        return $r5;

     label1:
        return null;
    }

    public org.codehaus.jackson.node.ArrayNode removeAll()
    {
        org.codehaus.jackson.node.ArrayNode r0;

        r0 := @this: org.codehaus.jackson.node.ArrayNode;

        r0.<org.codehaus.jackson.node.ArrayNode: java.util.ArrayList _children> = null;

        return r0;
    }

    public org.codehaus.jackson.node.ArrayNode addArray()
    {
        org.codehaus.jackson.node.ArrayNode r0, $r1;

        r0 := @this: org.codehaus.jackson.node.ArrayNode;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.node.ArrayNode: org.codehaus.jackson.node.ArrayNode arrayNode()>();

        specialinvoke r0.<org.codehaus.jackson.node.ArrayNode: void _add(org.codehaus.jackson.JsonNode)>($r1);

        return $r1;
    }

    public org.codehaus.jackson.node.ObjectNode addObject()
    {
        org.codehaus.jackson.node.ArrayNode r0;
        org.codehaus.jackson.node.ObjectNode $r1;

        r0 := @this: org.codehaus.jackson.node.ArrayNode;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.node.ArrayNode: org.codehaus.jackson.node.ObjectNode objectNode()>();

        specialinvoke r0.<org.codehaus.jackson.node.ArrayNode: void _add(org.codehaus.jackson.JsonNode)>($r1);

        return $r1;
    }

    public void addPOJO(java.lang.Object)
    {
        org.codehaus.jackson.node.ArrayNode r1;
        java.lang.Object r0;
        org.codehaus.jackson.node.POJONode $r2;

        r1 := @this: org.codehaus.jackson.node.ArrayNode;

        r0 := @parameter0: java.lang.Object;

        if r0 != null goto label1;

        virtualinvoke r1.<org.codehaus.jackson.node.ArrayNode: void addNull()>();

        goto label2;

     label1:
        $r2 = virtualinvoke r1.<org.codehaus.jackson.node.ArrayNode: org.codehaus.jackson.node.POJONode POJONode(java.lang.Object)>(r0);

        specialinvoke r1.<org.codehaus.jackson.node.ArrayNode: void _add(org.codehaus.jackson.JsonNode)>($r2);

     label2:
        return;
    }

    public void addNull()
    {
        org.codehaus.jackson.node.ArrayNode r0;
        org.codehaus.jackson.node.NullNode $r1;

        r0 := @this: org.codehaus.jackson.node.ArrayNode;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.node.ArrayNode: org.codehaus.jackson.node.NullNode nullNode()>();

        specialinvoke r0.<org.codehaus.jackson.node.ArrayNode: void _add(org.codehaus.jackson.JsonNode)>($r1);

        return;
    }

    public void add(int)
    {
        org.codehaus.jackson.node.ArrayNode r0;
        int i0;
        org.codehaus.jackson.node.NumericNode $r1;

        r0 := @this: org.codehaus.jackson.node.ArrayNode;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.node.ArrayNode: org.codehaus.jackson.node.NumericNode numberNode(int)>(i0);

        specialinvoke r0.<org.codehaus.jackson.node.ArrayNode: void _add(org.codehaus.jackson.JsonNode)>($r1);

        return;
    }

    public void add(java.lang.Integer)
    {
        org.codehaus.jackson.node.ArrayNode r1;
        int $i0;
        org.codehaus.jackson.node.NumericNode $r2;
        java.lang.Integer r0;

        r1 := @this: org.codehaus.jackson.node.ArrayNode;

        r0 := @parameter0: java.lang.Integer;

        if r0 != null goto label1;

        virtualinvoke r1.<org.codehaus.jackson.node.ArrayNode: void addNull()>();

        goto label2;

     label1:
        $i0 = virtualinvoke r0.<java.lang.Integer: int intValue()>();

        $r2 = virtualinvoke r1.<org.codehaus.jackson.node.ArrayNode: org.codehaus.jackson.node.NumericNode numberNode(int)>($i0);

        specialinvoke r1.<org.codehaus.jackson.node.ArrayNode: void _add(org.codehaus.jackson.JsonNode)>($r2);

     label2:
        return;
    }

    public void add(long)
    {
        org.codehaus.jackson.node.ArrayNode r0;
        long l0;
        org.codehaus.jackson.node.NumericNode $r1;

        r0 := @this: org.codehaus.jackson.node.ArrayNode;

        l0 := @parameter0: long;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.node.ArrayNode: org.codehaus.jackson.node.NumericNode numberNode(long)>(l0);

        specialinvoke r0.<org.codehaus.jackson.node.ArrayNode: void _add(org.codehaus.jackson.JsonNode)>($r1);

        return;
    }

    public void add(java.lang.Long)
    {
        org.codehaus.jackson.node.ArrayNode r1;
        java.lang.Long r0;
        long $l0;
        org.codehaus.jackson.node.NumericNode $r2;

        r1 := @this: org.codehaus.jackson.node.ArrayNode;

        r0 := @parameter0: java.lang.Long;

        if r0 != null goto label1;

        virtualinvoke r1.<org.codehaus.jackson.node.ArrayNode: void addNull()>();

        goto label2;

     label1:
        $l0 = virtualinvoke r0.<java.lang.Long: long longValue()>();

        $r2 = virtualinvoke r1.<org.codehaus.jackson.node.ArrayNode: org.codehaus.jackson.node.NumericNode numberNode(long)>($l0);

        specialinvoke r1.<org.codehaus.jackson.node.ArrayNode: void _add(org.codehaus.jackson.JsonNode)>($r2);

     label2:
        return;
    }

    public void add(float)
    {
        org.codehaus.jackson.node.ArrayNode r0;
        float f0;
        org.codehaus.jackson.node.NumericNode $r1;

        r0 := @this: org.codehaus.jackson.node.ArrayNode;

        f0 := @parameter0: float;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.node.ArrayNode: org.codehaus.jackson.node.NumericNode numberNode(float)>(f0);

        specialinvoke r0.<org.codehaus.jackson.node.ArrayNode: void _add(org.codehaus.jackson.JsonNode)>($r1);

        return;
    }

    public void add(java.lang.Float)
    {
        org.codehaus.jackson.node.ArrayNode r1;
        java.lang.Float r0;
        float $f0;
        org.codehaus.jackson.node.NumericNode $r2;

        r1 := @this: org.codehaus.jackson.node.ArrayNode;

        r0 := @parameter0: java.lang.Float;

        if r0 != null goto label1;

        virtualinvoke r1.<org.codehaus.jackson.node.ArrayNode: void addNull()>();

        goto label2;

     label1:
        $f0 = virtualinvoke r0.<java.lang.Float: float floatValue()>();

        $r2 = virtualinvoke r1.<org.codehaus.jackson.node.ArrayNode: org.codehaus.jackson.node.NumericNode numberNode(float)>($f0);

        specialinvoke r1.<org.codehaus.jackson.node.ArrayNode: void _add(org.codehaus.jackson.JsonNode)>($r2);

     label2:
        return;
    }

    public void add(double)
    {
        org.codehaus.jackson.node.ArrayNode r0;
        org.codehaus.jackson.node.NumericNode $r1;
        double d0;

        r0 := @this: org.codehaus.jackson.node.ArrayNode;

        d0 := @parameter0: double;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.node.ArrayNode: org.codehaus.jackson.node.NumericNode numberNode(double)>(d0);

        specialinvoke r0.<org.codehaus.jackson.node.ArrayNode: void _add(org.codehaus.jackson.JsonNode)>($r1);

        return;
    }

    public void add(java.lang.Double)
    {
        org.codehaus.jackson.node.ArrayNode r1;
        java.lang.Double r0;
        org.codehaus.jackson.node.NumericNode $r2;
        double $d0;

        r1 := @this: org.codehaus.jackson.node.ArrayNode;

        r0 := @parameter0: java.lang.Double;

        if r0 != null goto label1;

        virtualinvoke r1.<org.codehaus.jackson.node.ArrayNode: void addNull()>();

        goto label2;

     label1:
        $d0 = virtualinvoke r0.<java.lang.Double: double doubleValue()>();

        $r2 = virtualinvoke r1.<org.codehaus.jackson.node.ArrayNode: org.codehaus.jackson.node.NumericNode numberNode(double)>($d0);

        specialinvoke r1.<org.codehaus.jackson.node.ArrayNode: void _add(org.codehaus.jackson.JsonNode)>($r2);

     label2:
        return;
    }

    public void add(java.math.BigDecimal)
    {
        org.codehaus.jackson.node.ArrayNode r1;
        java.math.BigDecimal r0;
        org.codehaus.jackson.node.NumericNode $r2;

        r1 := @this: org.codehaus.jackson.node.ArrayNode;

        r0 := @parameter0: java.math.BigDecimal;

        if r0 != null goto label1;

        virtualinvoke r1.<org.codehaus.jackson.node.ArrayNode: void addNull()>();

        goto label2;

     label1:
        $r2 = virtualinvoke r1.<org.codehaus.jackson.node.ArrayNode: org.codehaus.jackson.node.NumericNode numberNode(java.math.BigDecimal)>(r0);

        specialinvoke r1.<org.codehaus.jackson.node.ArrayNode: void _add(org.codehaus.jackson.JsonNode)>($r2);

     label2:
        return;
    }

    public void add(java.lang.String)
    {
        org.codehaus.jackson.node.ArrayNode r1;
        org.codehaus.jackson.node.TextNode $r2;
        java.lang.String r0;

        r1 := @this: org.codehaus.jackson.node.ArrayNode;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        virtualinvoke r1.<org.codehaus.jackson.node.ArrayNode: void addNull()>();

        goto label2;

     label1:
        $r2 = virtualinvoke r1.<org.codehaus.jackson.node.ArrayNode: org.codehaus.jackson.node.TextNode textNode(java.lang.String)>(r0);

        specialinvoke r1.<org.codehaus.jackson.node.ArrayNode: void _add(org.codehaus.jackson.JsonNode)>($r2);

     label2:
        return;
    }

    public void add(boolean)
    {
        org.codehaus.jackson.node.ArrayNode r0;
        org.codehaus.jackson.node.BooleanNode $r1;
        boolean z0;

        r0 := @this: org.codehaus.jackson.node.ArrayNode;

        z0 := @parameter0: boolean;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.node.ArrayNode: org.codehaus.jackson.node.BooleanNode booleanNode(boolean)>(z0);

        specialinvoke r0.<org.codehaus.jackson.node.ArrayNode: void _add(org.codehaus.jackson.JsonNode)>($r1);

        return;
    }

    public void add(java.lang.Boolean)
    {
        org.codehaus.jackson.node.ArrayNode r1;
        org.codehaus.jackson.node.BooleanNode $r2;
        java.lang.Boolean r0;
        boolean $z0;

        r1 := @this: org.codehaus.jackson.node.ArrayNode;

        r0 := @parameter0: java.lang.Boolean;

        if r0 != null goto label1;

        virtualinvoke r1.<org.codehaus.jackson.node.ArrayNode: void addNull()>();

        goto label2;

     label1:
        $z0 = virtualinvoke r0.<java.lang.Boolean: boolean booleanValue()>();

        $r2 = virtualinvoke r1.<org.codehaus.jackson.node.ArrayNode: org.codehaus.jackson.node.BooleanNode booleanNode(boolean)>($z0);

        specialinvoke r1.<org.codehaus.jackson.node.ArrayNode: void _add(org.codehaus.jackson.JsonNode)>($r2);

     label2:
        return;
    }

    public void add(byte[])
    {
        org.codehaus.jackson.node.ArrayNode r1;
        org.codehaus.jackson.node.BinaryNode $r2;
        byte[] r0;

        r1 := @this: org.codehaus.jackson.node.ArrayNode;

        r0 := @parameter0: byte[];

        if r0 != null goto label1;

        virtualinvoke r1.<org.codehaus.jackson.node.ArrayNode: void addNull()>();

        goto label2;

     label1:
        $r2 = virtualinvoke r1.<org.codehaus.jackson.node.ArrayNode: org.codehaus.jackson.node.BinaryNode binaryNode(byte[])>(r0);

        specialinvoke r1.<org.codehaus.jackson.node.ArrayNode: void _add(org.codehaus.jackson.JsonNode)>($r2);

     label2:
        return;
    }

    public org.codehaus.jackson.node.ArrayNode insertArray(int)
    {
        org.codehaus.jackson.node.ArrayNode r0, $r1;
        int i0;

        r0 := @this: org.codehaus.jackson.node.ArrayNode;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.node.ArrayNode: org.codehaus.jackson.node.ArrayNode arrayNode()>();

        specialinvoke r0.<org.codehaus.jackson.node.ArrayNode: void _insert(int,org.codehaus.jackson.JsonNode)>(i0, $r1);

        return $r1;
    }

    public org.codehaus.jackson.node.ObjectNode insertObject(int)
    {
        org.codehaus.jackson.node.ArrayNode r0;
        int i0;
        org.codehaus.jackson.node.ObjectNode $r1;

        r0 := @this: org.codehaus.jackson.node.ArrayNode;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.node.ArrayNode: org.codehaus.jackson.node.ObjectNode objectNode()>();

        specialinvoke r0.<org.codehaus.jackson.node.ArrayNode: void _insert(int,org.codehaus.jackson.JsonNode)>(i0, $r1);

        return $r1;
    }

    public void insertPOJO(int, java.lang.Object)
    {
        org.codehaus.jackson.node.ArrayNode r1;
        org.codehaus.jackson.node.POJONode $r2;
        int i0;
        java.lang.Object r0;

        r1 := @this: org.codehaus.jackson.node.ArrayNode;

        i0 := @parameter0: int;

        r0 := @parameter1: java.lang.Object;

        if r0 != null goto label1;

        virtualinvoke r1.<org.codehaus.jackson.node.ArrayNode: void insertNull(int)>(i0);

        goto label2;

     label1:
        $r2 = virtualinvoke r1.<org.codehaus.jackson.node.ArrayNode: org.codehaus.jackson.node.POJONode POJONode(java.lang.Object)>(r0);

        specialinvoke r1.<org.codehaus.jackson.node.ArrayNode: void _insert(int,org.codehaus.jackson.JsonNode)>(i0, $r2);

     label2:
        return;
    }

    public void insertNull(int)
    {
        org.codehaus.jackson.node.ArrayNode r0;
        int i0;
        org.codehaus.jackson.node.NullNode $r1;

        r0 := @this: org.codehaus.jackson.node.ArrayNode;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.node.ArrayNode: org.codehaus.jackson.node.NullNode nullNode()>();

        specialinvoke r0.<org.codehaus.jackson.node.ArrayNode: void _insert(int,org.codehaus.jackson.JsonNode)>(i0, $r1);

        return;
    }

    public void insert(int, int)
    {
        org.codehaus.jackson.node.ArrayNode r0;
        int i0, i1;
        org.codehaus.jackson.node.NumericNode $r1;

        r0 := @this: org.codehaus.jackson.node.ArrayNode;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.node.ArrayNode: org.codehaus.jackson.node.NumericNode numberNode(int)>(i1);

        specialinvoke r0.<org.codehaus.jackson.node.ArrayNode: void _insert(int,org.codehaus.jackson.JsonNode)>(i0, $r1);

        return;
    }

    public void insert(int, java.lang.Integer)
    {
        org.codehaus.jackson.node.ArrayNode r1;
        int i0, $i1;
        org.codehaus.jackson.node.NumericNode $r2;
        java.lang.Integer r0;

        r1 := @this: org.codehaus.jackson.node.ArrayNode;

        i0 := @parameter0: int;

        r0 := @parameter1: java.lang.Integer;

        if r0 != null goto label1;

        virtualinvoke r1.<org.codehaus.jackson.node.ArrayNode: void insertNull(int)>(i0);

        goto label2;

     label1:
        $i1 = virtualinvoke r0.<java.lang.Integer: int intValue()>();

        $r2 = virtualinvoke r1.<org.codehaus.jackson.node.ArrayNode: org.codehaus.jackson.node.NumericNode numberNode(int)>($i1);

        specialinvoke r1.<org.codehaus.jackson.node.ArrayNode: void _insert(int,org.codehaus.jackson.JsonNode)>(i0, $r2);

     label2:
        return;
    }

    public void insert(int, long)
    {
        org.codehaus.jackson.node.ArrayNode r0;
        int i0;
        long l1;
        org.codehaus.jackson.node.NumericNode $r1;

        r0 := @this: org.codehaus.jackson.node.ArrayNode;

        i0 := @parameter0: int;

        l1 := @parameter1: long;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.node.ArrayNode: org.codehaus.jackson.node.NumericNode numberNode(long)>(l1);

        specialinvoke r0.<org.codehaus.jackson.node.ArrayNode: void _insert(int,org.codehaus.jackson.JsonNode)>(i0, $r1);

        return;
    }

    public void insert(int, java.lang.Long)
    {
        org.codehaus.jackson.node.ArrayNode r1;
        java.lang.Long r0;
        int i0;
        long $l1;
        org.codehaus.jackson.node.NumericNode $r2;

        r1 := @this: org.codehaus.jackson.node.ArrayNode;

        i0 := @parameter0: int;

        r0 := @parameter1: java.lang.Long;

        if r0 != null goto label1;

        virtualinvoke r1.<org.codehaus.jackson.node.ArrayNode: void insertNull(int)>(i0);

        goto label2;

     label1:
        $l1 = virtualinvoke r0.<java.lang.Long: long longValue()>();

        $r2 = virtualinvoke r1.<org.codehaus.jackson.node.ArrayNode: org.codehaus.jackson.node.NumericNode numberNode(long)>($l1);

        specialinvoke r1.<org.codehaus.jackson.node.ArrayNode: void _insert(int,org.codehaus.jackson.JsonNode)>(i0, $r2);

     label2:
        return;
    }

    public void insert(int, float)
    {
        org.codehaus.jackson.node.ArrayNode r0;
        int i0;
        float f0;
        org.codehaus.jackson.node.NumericNode $r1;

        r0 := @this: org.codehaus.jackson.node.ArrayNode;

        i0 := @parameter0: int;

        f0 := @parameter1: float;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.node.ArrayNode: org.codehaus.jackson.node.NumericNode numberNode(float)>(f0);

        specialinvoke r0.<org.codehaus.jackson.node.ArrayNode: void _insert(int,org.codehaus.jackson.JsonNode)>(i0, $r1);

        return;
    }

    public void insert(int, java.lang.Float)
    {
        org.codehaus.jackson.node.ArrayNode r1;
        java.lang.Float r0;
        int i0;
        float $f0;
        org.codehaus.jackson.node.NumericNode $r2;

        r1 := @this: org.codehaus.jackson.node.ArrayNode;

        i0 := @parameter0: int;

        r0 := @parameter1: java.lang.Float;

        if r0 != null goto label1;

        virtualinvoke r1.<org.codehaus.jackson.node.ArrayNode: void insertNull(int)>(i0);

        goto label2;

     label1:
        $f0 = virtualinvoke r0.<java.lang.Float: float floatValue()>();

        $r2 = virtualinvoke r1.<org.codehaus.jackson.node.ArrayNode: org.codehaus.jackson.node.NumericNode numberNode(float)>($f0);

        specialinvoke r1.<org.codehaus.jackson.node.ArrayNode: void _insert(int,org.codehaus.jackson.JsonNode)>(i0, $r2);

     label2:
        return;
    }

    public void insert(int, double)
    {
        org.codehaus.jackson.node.ArrayNode r0;
        int i0;
        org.codehaus.jackson.node.NumericNode $r1;
        double d0;

        r0 := @this: org.codehaus.jackson.node.ArrayNode;

        i0 := @parameter0: int;

        d0 := @parameter1: double;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.node.ArrayNode: org.codehaus.jackson.node.NumericNode numberNode(double)>(d0);

        specialinvoke r0.<org.codehaus.jackson.node.ArrayNode: void _insert(int,org.codehaus.jackson.JsonNode)>(i0, $r1);

        return;
    }

    public void insert(int, java.lang.Double)
    {
        org.codehaus.jackson.node.ArrayNode r1;
        java.lang.Double r0;
        int i0;
        org.codehaus.jackson.node.NumericNode $r2;
        double $d0;

        r1 := @this: org.codehaus.jackson.node.ArrayNode;

        i0 := @parameter0: int;

        r0 := @parameter1: java.lang.Double;

        if r0 != null goto label1;

        virtualinvoke r1.<org.codehaus.jackson.node.ArrayNode: void insertNull(int)>(i0);

        goto label2;

     label1:
        $d0 = virtualinvoke r0.<java.lang.Double: double doubleValue()>();

        $r2 = virtualinvoke r1.<org.codehaus.jackson.node.ArrayNode: org.codehaus.jackson.node.NumericNode numberNode(double)>($d0);

        specialinvoke r1.<org.codehaus.jackson.node.ArrayNode: void _insert(int,org.codehaus.jackson.JsonNode)>(i0, $r2);

     label2:
        return;
    }

    public void insert(int, java.math.BigDecimal)
    {
        org.codehaus.jackson.node.ArrayNode r1;
        java.math.BigDecimal r0;
        int i0;
        org.codehaus.jackson.node.NumericNode $r2;

        r1 := @this: org.codehaus.jackson.node.ArrayNode;

        i0 := @parameter0: int;

        r0 := @parameter1: java.math.BigDecimal;

        if r0 != null goto label1;

        virtualinvoke r1.<org.codehaus.jackson.node.ArrayNode: void insertNull(int)>(i0);

        goto label2;

     label1:
        $r2 = virtualinvoke r1.<org.codehaus.jackson.node.ArrayNode: org.codehaus.jackson.node.NumericNode numberNode(java.math.BigDecimal)>(r0);

        specialinvoke r1.<org.codehaus.jackson.node.ArrayNode: void _insert(int,org.codehaus.jackson.JsonNode)>(i0, $r2);

     label2:
        return;
    }

    public void insert(int, java.lang.String)
    {
        org.codehaus.jackson.node.ArrayNode r1;
        int i0;
        org.codehaus.jackson.node.TextNode $r2;
        java.lang.String r0;

        r1 := @this: org.codehaus.jackson.node.ArrayNode;

        i0 := @parameter0: int;

        r0 := @parameter1: java.lang.String;

        if r0 != null goto label1;

        virtualinvoke r1.<org.codehaus.jackson.node.ArrayNode: void insertNull(int)>(i0);

        goto label2;

     label1:
        $r2 = virtualinvoke r1.<org.codehaus.jackson.node.ArrayNode: org.codehaus.jackson.node.TextNode textNode(java.lang.String)>(r0);

        specialinvoke r1.<org.codehaus.jackson.node.ArrayNode: void _insert(int,org.codehaus.jackson.JsonNode)>(i0, $r2);

     label2:
        return;
    }

    public void insert(int, boolean)
    {
        org.codehaus.jackson.node.ArrayNode r0;
        org.codehaus.jackson.node.BooleanNode $r1;
        int i0;
        boolean z0;

        r0 := @this: org.codehaus.jackson.node.ArrayNode;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.node.ArrayNode: org.codehaus.jackson.node.BooleanNode booleanNode(boolean)>(z0);

        specialinvoke r0.<org.codehaus.jackson.node.ArrayNode: void _insert(int,org.codehaus.jackson.JsonNode)>(i0, $r1);

        return;
    }

    public void insert(int, java.lang.Boolean)
    {
        org.codehaus.jackson.node.ArrayNode r1;
        org.codehaus.jackson.node.BooleanNode $r2;
        int i0;
        java.lang.Boolean r0;
        boolean $z0;

        r1 := @this: org.codehaus.jackson.node.ArrayNode;

        i0 := @parameter0: int;

        r0 := @parameter1: java.lang.Boolean;

        if r0 != null goto label1;

        virtualinvoke r1.<org.codehaus.jackson.node.ArrayNode: void insertNull(int)>(i0);

        goto label2;

     label1:
        $z0 = virtualinvoke r0.<java.lang.Boolean: boolean booleanValue()>();

        $r2 = virtualinvoke r1.<org.codehaus.jackson.node.ArrayNode: org.codehaus.jackson.node.BooleanNode booleanNode(boolean)>($z0);

        specialinvoke r1.<org.codehaus.jackson.node.ArrayNode: void _insert(int,org.codehaus.jackson.JsonNode)>(i0, $r2);

     label2:
        return;
    }

    public void insert(int, byte[])
    {
        org.codehaus.jackson.node.ArrayNode r1;
        byte[] r0;
        int i0;
        org.codehaus.jackson.node.BinaryNode $r2;

        r1 := @this: org.codehaus.jackson.node.ArrayNode;

        i0 := @parameter0: int;

        r0 := @parameter1: byte[];

        if r0 != null goto label1;

        virtualinvoke r1.<org.codehaus.jackson.node.ArrayNode: void insertNull(int)>(i0);

        goto label2;

     label1:
        $r2 = virtualinvoke r1.<org.codehaus.jackson.node.ArrayNode: org.codehaus.jackson.node.BinaryNode binaryNode(byte[])>(r0);

        specialinvoke r1.<org.codehaus.jackson.node.ArrayNode: void _insert(int,org.codehaus.jackson.JsonNode)>(i0, $r2);

     label2:
        return;
    }

    protected void addContentsTo(java.util.List)
    {
        java.util.Iterator $r3;
        org.codehaus.jackson.JsonNode r5;
        java.util.ArrayList $r1, $r2;
        org.codehaus.jackson.node.ArrayNode r0;
        java.util.List r6;
        java.lang.Object $r4;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.node.ArrayNode;

        r6 := @parameter0: java.util.List;

        $r1 = r0.<org.codehaus.jackson.node.ArrayNode: java.util.ArrayList _children>;

        if $r1 == null goto label2;

        $r2 = r0.<org.codehaus.jackson.node.ArrayNode: java.util.ArrayList _children>;

        $r3 = virtualinvoke $r2.<java.util.ArrayList: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.codehaus.jackson.JsonNode) $r4;

        interfaceinvoke r6.<java.util.List: boolean add(java.lang.Object)>(r5);

        goto label1;

     label2:
        return;
    }

    public boolean equals(java.lang.Object)
    {
        java.util.ArrayList $r5, $r6, $r7;
        org.codehaus.jackson.node.ArrayNode r1, r4;
        int $i0, $i1;
        java.lang.Object r0;
        java.lang.Class $r2, $r3;
        boolean $z0, $z1;

        r1 := @this: org.codehaus.jackson.node.ArrayNode;

        r0 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        if r0 != null goto label2;

        return 0;

     label2:
        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        if $r2 == $r3 goto label3;

        return 0;

     label3:
        r4 = (org.codehaus.jackson.node.ArrayNode) r0;

        $r5 = r1.<org.codehaus.jackson.node.ArrayNode: java.util.ArrayList _children>;

        if $r5 == null goto label4;

        $r6 = r1.<org.codehaus.jackson.node.ArrayNode: java.util.ArrayList _children>;

        $i1 = virtualinvoke $r6.<java.util.ArrayList: int size()>();

        if $i1 != 0 goto label7;

     label4:
        $i0 = virtualinvoke r4.<org.codehaus.jackson.node.ArrayNode: int size()>();

        if $i0 != 0 goto label5;

        $z1 = 1;

        goto label6;

     label5:
        $z1 = 0;

     label6:
        return $z1;

     label7:
        $r7 = r1.<org.codehaus.jackson.node.ArrayNode: java.util.ArrayList _children>;

        $z0 = specialinvoke r4.<org.codehaus.jackson.node.ArrayNode: boolean _sameChildren(java.util.ArrayList)>($r7);

        return $z0;
    }

    public int hashCode()
    {
        java.util.Iterator $r4;
        org.codehaus.jackson.JsonNode r6;
        java.util.ArrayList $r1, $r2, $r3;
        org.codehaus.jackson.node.ArrayNode r0;
        int $i0, i1;
        java.lang.Object $r5;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.node.ArrayNode;

        $r1 = r0.<org.codehaus.jackson.node.ArrayNode: java.util.ArrayList _children>;

        if $r1 != null goto label1;

        i1 = 1;

        goto label4;

     label1:
        $r2 = r0.<org.codehaus.jackson.node.ArrayNode: java.util.ArrayList _children>;

        i1 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

        $r3 = r0.<org.codehaus.jackson.node.ArrayNode: java.util.ArrayList _children>;

        $r4 = virtualinvoke $r3.<java.util.ArrayList: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (org.codehaus.jackson.JsonNode) $r5;

        if r6 == null goto label3;

        $i0 = virtualinvoke r6.<java.lang.Object: int hashCode()>();

        i1 = i1 ^ $i0;

     label3:
        goto label2;

     label4:
        return i1;
    }

    public java.lang.String toString()
    {
        org.codehaus.jackson.JsonNode $r7;
        java.util.ArrayList $r2, $r4, $r5;
        org.codehaus.jackson.node.ArrayNode r1;
        int $i0, $i1, $i2, $i3, i4;
        java.lang.StringBuilder $r0;
        java.lang.Object $r6;
        java.lang.String $r3, $r8;

        r1 := @this: org.codehaus.jackson.node.ArrayNode;

        $r0 = new java.lang.StringBuilder;

        $i0 = virtualinvoke r1.<org.codehaus.jackson.node.ArrayNode: int size()>();

        $i1 = $i0 << 4;

        $i2 = 16 + $i1;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>(int)>($i2);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(91);

        $r2 = r1.<org.codehaus.jackson.node.ArrayNode: java.util.ArrayList _children>;

        if $r2 == null goto label3;

        i4 = 0;

        $r4 = r1.<org.codehaus.jackson.node.ArrayNode: java.util.ArrayList _children>;

        $i3 = virtualinvoke $r4.<java.util.ArrayList: int size()>();

     label1:
        if i4 >= $i3 goto label3;

        if i4 <= 0 goto label2;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44);

     label2:
        $r5 = r1.<org.codehaus.jackson.node.ArrayNode: java.util.ArrayList _children>;

        $r6 = virtualinvoke $r5.<java.util.ArrayList: java.lang.Object get(int)>(i4);

        $r7 = (org.codehaus.jackson.JsonNode) $r6;

        $r8 = virtualinvoke $r7.<org.codehaus.jackson.JsonNode: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        i4 = i4 + 1;

        goto label1;

     label3:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(93);

        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }

    public org.codehaus.jackson.JsonNode _set(int, org.codehaus.jackson.JsonNode)
    {
        java.lang.IndexOutOfBoundsException $r7;
        org.codehaus.jackson.JsonNode r3, $r6;
        java.util.ArrayList $r1, $r2, $r4;
        int i0, $i1, $i2;
        java.lang.String $r13;
        org.codehaus.jackson.node.ArrayNode r0;
        java.lang.Object $r5;
        java.lang.StringBuilder $r8, $r9, $r10, $r11, $r12;

        r0 := @this: org.codehaus.jackson.node.ArrayNode;

        i0 := @parameter0: int;

        r3 := @parameter1: org.codehaus.jackson.JsonNode;

        $r1 = r0.<org.codehaus.jackson.node.ArrayNode: java.util.ArrayList _children>;

        if $r1 == null goto label1;

        if i0 < 0 goto label1;

        $r2 = r0.<org.codehaus.jackson.node.ArrayNode: java.util.ArrayList _children>;

        $i1 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

        if i0 < $i1 goto label2;

     label1:
        $r7 = new java.lang.IndexOutOfBoundsException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal index ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", array size ");

        $i2 = virtualinvoke r0.<org.codehaus.jackson.node.ArrayNode: int size()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r13);

        throw $r7;

     label2:
        $r4 = r0.<org.codehaus.jackson.node.ArrayNode: java.util.ArrayList _children>;

        $r5 = virtualinvoke $r4.<java.util.ArrayList: java.lang.Object set(int,java.lang.Object)>(i0, r3);

        $r6 = (org.codehaus.jackson.JsonNode) $r5;

        return $r6;
    }

    private void _add(org.codehaus.jackson.JsonNode)
    {
        org.codehaus.jackson.node.ArrayNode r0;
        org.codehaus.jackson.JsonNode r2;
        java.util.ArrayList $r1, $r3, $r4;

        r0 := @this: org.codehaus.jackson.node.ArrayNode;

        r2 := @parameter0: org.codehaus.jackson.JsonNode;

        $r1 = r0.<org.codehaus.jackson.node.ArrayNode: java.util.ArrayList _children>;

        if $r1 != null goto label1;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r0.<org.codehaus.jackson.node.ArrayNode: java.util.ArrayList _children> = $r4;

     label1:
        $r3 = r0.<org.codehaus.jackson.node.ArrayNode: java.util.ArrayList _children>;

        virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>(r2);

        return;
    }

    private void _insert(int, org.codehaus.jackson.JsonNode)
    {
        org.codehaus.jackson.JsonNode r3;
        java.util.ArrayList $r1, $r2, $r4, $r5, $r6, $r7, $r8;
        org.codehaus.jackson.node.ArrayNode r0;
        int i0, $i1;

        r0 := @this: org.codehaus.jackson.node.ArrayNode;

        i0 := @parameter0: int;

        r3 := @parameter1: org.codehaus.jackson.JsonNode;

        $r1 = r0.<org.codehaus.jackson.node.ArrayNode: java.util.ArrayList _children>;

        if $r1 != null goto label1;

        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>()>();

        r0.<org.codehaus.jackson.node.ArrayNode: java.util.ArrayList _children> = $r7;

        $r8 = r0.<org.codehaus.jackson.node.ArrayNode: java.util.ArrayList _children>;

        virtualinvoke $r8.<java.util.ArrayList: boolean add(java.lang.Object)>(r3);

        return;

     label1:
        if i0 >= 0 goto label2;

        $r6 = r0.<org.codehaus.jackson.node.ArrayNode: java.util.ArrayList _children>;

        virtualinvoke $r6.<java.util.ArrayList: void add(int,java.lang.Object)>(0, r3);

        goto label4;

     label2:
        $r2 = r0.<org.codehaus.jackson.node.ArrayNode: java.util.ArrayList _children>;

        $i1 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

        if i0 < $i1 goto label3;

        $r5 = r0.<org.codehaus.jackson.node.ArrayNode: java.util.ArrayList _children>;

        virtualinvoke $r5.<java.util.ArrayList: boolean add(java.lang.Object)>(r3);

        goto label4;

     label3:
        $r4 = r0.<org.codehaus.jackson.node.ArrayNode: java.util.ArrayList _children>;

        virtualinvoke $r4.<java.util.ArrayList: void add(int,java.lang.Object)>(i0, r3);

     label4:
        return;
    }

    private boolean _sameChildren(java.util.ArrayList)
    {
        org.codehaus.jackson.JsonNode $r4;
        java.util.ArrayList r0, $r2;
        org.codehaus.jackson.node.ArrayNode r1;
        int $i0, $i1, i2;
        java.lang.Object $r3, $r5;
        boolean $z0;

        r1 := @this: org.codehaus.jackson.node.ArrayNode;

        r0 := @parameter0: java.util.ArrayList;

        $i0 = virtualinvoke r0.<java.util.ArrayList: int size()>();

        $i1 = virtualinvoke r1.<org.codehaus.jackson.node.ArrayNode: int size()>();

        if $i1 == $i0 goto label1;

        return 0;

     label1:
        i2 = 0;

     label2:
        if i2 >= $i0 goto label4;

        $r2 = r1.<org.codehaus.jackson.node.ArrayNode: java.util.ArrayList _children>;

        $r3 = virtualinvoke $r2.<java.util.ArrayList: java.lang.Object get(int)>(i2);

        $r4 = (org.codehaus.jackson.JsonNode) $r3;

        $r5 = virtualinvoke r0.<java.util.ArrayList: java.lang.Object get(int)>(i2);

        $z0 = virtualinvoke $r4.<org.codehaus.jackson.JsonNode: boolean equals(java.lang.Object)>($r5);

        if $z0 != 0 goto label3;

        return 0;

     label3:
        i2 = i2 + 1;

        goto label2;

     label4:
        return 1;
    }

    public volatile org.codehaus.jackson.node.ContainerNode removeAll()
    {
        org.codehaus.jackson.node.ArrayNode r0, $r1;

        r0 := @this: org.codehaus.jackson.node.ArrayNode;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.node.ArrayNode: org.codehaus.jackson.node.ArrayNode removeAll()>();

        return $r1;
    }

    public volatile org.codehaus.jackson.JsonNode findParent(java.lang.String)
    {
        org.codehaus.jackson.node.ArrayNode r0;
        java.lang.String r1;
        org.codehaus.jackson.node.ObjectNode $r2;

        r0 := @this: org.codehaus.jackson.node.ArrayNode;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.codehaus.jackson.node.ArrayNode: org.codehaus.jackson.node.ObjectNode findParent(java.lang.String)>(r1);

        return $r2;
    }
}
