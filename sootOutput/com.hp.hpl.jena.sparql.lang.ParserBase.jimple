public class com.hp.hpl.jena.sparql.lang.ParserBase extends java.lang.Object
{
    protected final com.hp.hpl.jena.graph.Node XSD_TRUE;
    protected final com.hp.hpl.jena.graph.Node XSD_FALSE;
    protected final com.hp.hpl.jena.graph.Node nRDFtype;
    protected final com.hp.hpl.jena.graph.Node nRDFnil;
    protected final com.hp.hpl.jena.graph.Node nRDFfirst;
    protected final com.hp.hpl.jena.graph.Node nRDFrest;
    protected final com.hp.hpl.jena.graph.Node nRDFsubject;
    protected final com.hp.hpl.jena.graph.Node nRDFpredicate;
    protected final com.hp.hpl.jena.graph.Node nRDFobject;
    private boolean bNodesAreVariables;
    private boolean bNodesAreAllowed;
    final com.hp.hpl.jena.sparql.util.LabelToNodeMap bNodeLabels;
    final com.hp.hpl.jena.sparql.util.LabelToNodeMap anonVarLabels;
    com.hp.hpl.jena.sparql.util.LabelToNodeMap activeLabelMap;
    java.util.Set previousLabels;
    protected com.hp.hpl.jena.sparql.core.Prologue prologue;
    boolean skolomizedBNodes;

    public void <init>()
    {
        com.hp.hpl.jena.graph.Node $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9;
        java.util.HashSet $r13;
        com.hp.hpl.jena.sparql.util.LabelToNodeMap $r10, $r11, $r12;
        com.hp.hpl.jena.sparql.util.Symbol $r14;
        boolean $z0;
        com.hp.hpl.jena.sparql.lang.ParserBase r0;

        r0 := @this: com.hp.hpl.jena.sparql.lang.ParserBase;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = <com.hp.hpl.jena.sparql.graph.NodeConst: com.hp.hpl.jena.graph.Node nodeTrue>;

        r0.<com.hp.hpl.jena.sparql.lang.ParserBase: com.hp.hpl.jena.graph.Node XSD_TRUE> = $r1;

        $r2 = <com.hp.hpl.jena.sparql.graph.NodeConst: com.hp.hpl.jena.graph.Node nodeFalse>;

        r0.<com.hp.hpl.jena.sparql.lang.ParserBase: com.hp.hpl.jena.graph.Node XSD_FALSE> = $r2;

        $r3 = <com.hp.hpl.jena.sparql.graph.NodeConst: com.hp.hpl.jena.graph.Node nodeRDFType>;

        r0.<com.hp.hpl.jena.sparql.lang.ParserBase: com.hp.hpl.jena.graph.Node nRDFtype> = $r3;

        $r4 = <com.hp.hpl.jena.sparql.graph.NodeConst: com.hp.hpl.jena.graph.Node nodeNil>;

        r0.<com.hp.hpl.jena.sparql.lang.ParserBase: com.hp.hpl.jena.graph.Node nRDFnil> = $r4;

        $r5 = <com.hp.hpl.jena.sparql.graph.NodeConst: com.hp.hpl.jena.graph.Node nodeFirst>;

        r0.<com.hp.hpl.jena.sparql.lang.ParserBase: com.hp.hpl.jena.graph.Node nRDFfirst> = $r5;

        $r6 = <com.hp.hpl.jena.sparql.graph.NodeConst: com.hp.hpl.jena.graph.Node nodeRest>;

        r0.<com.hp.hpl.jena.sparql.lang.ParserBase: com.hp.hpl.jena.graph.Node nRDFrest> = $r6;

        $r7 = <com.hp.hpl.jena.vocabulary.RDF$Nodes: com.hp.hpl.jena.graph.Node subject>;

        r0.<com.hp.hpl.jena.sparql.lang.ParserBase: com.hp.hpl.jena.graph.Node nRDFsubject> = $r7;

        $r8 = <com.hp.hpl.jena.vocabulary.RDF$Nodes: com.hp.hpl.jena.graph.Node predicate>;

        r0.<com.hp.hpl.jena.sparql.lang.ParserBase: com.hp.hpl.jena.graph.Node nRDFpredicate> = $r8;

        $r9 = <com.hp.hpl.jena.vocabulary.RDF$Nodes: com.hp.hpl.jena.graph.Node object>;

        r0.<com.hp.hpl.jena.sparql.lang.ParserBase: com.hp.hpl.jena.graph.Node nRDFobject> = $r9;

        r0.<com.hp.hpl.jena.sparql.lang.ParserBase: boolean bNodesAreVariables> = 1;

        r0.<com.hp.hpl.jena.sparql.lang.ParserBase: boolean bNodesAreAllowed> = 1;

        $r10 = staticinvoke <com.hp.hpl.jena.sparql.util.LabelToNodeMap: com.hp.hpl.jena.sparql.util.LabelToNodeMap createBNodeMap()>();

        r0.<com.hp.hpl.jena.sparql.lang.ParserBase: com.hp.hpl.jena.sparql.util.LabelToNodeMap bNodeLabels> = $r10;

        $r11 = staticinvoke <com.hp.hpl.jena.sparql.util.LabelToNodeMap: com.hp.hpl.jena.sparql.util.LabelToNodeMap createVarMap()>();

        r0.<com.hp.hpl.jena.sparql.lang.ParserBase: com.hp.hpl.jena.sparql.util.LabelToNodeMap anonVarLabels> = $r11;

        $r12 = r0.<com.hp.hpl.jena.sparql.lang.ParserBase: com.hp.hpl.jena.sparql.util.LabelToNodeMap anonVarLabels>;

        r0.<com.hp.hpl.jena.sparql.lang.ParserBase: com.hp.hpl.jena.sparql.util.LabelToNodeMap activeLabelMap> = $r12;

        $r13 = new java.util.HashSet;

        specialinvoke $r13.<java.util.HashSet: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.lang.ParserBase: java.util.Set previousLabels> = $r13;

        $r14 = <com.hp.hpl.jena.query.ARQ: com.hp.hpl.jena.sparql.util.Symbol constantBNodeLabels>;

        $z0 = staticinvoke <com.hp.hpl.jena.query.ARQ: boolean isTrue(com.hp.hpl.jena.sparql.util.Symbol)>($r14);

        r0.<com.hp.hpl.jena.sparql.lang.ParserBase: boolean skolomizedBNodes> = $z0;

        return;
    }

    public void setPrologue(com.hp.hpl.jena.sparql.core.Prologue)
    {
        com.hp.hpl.jena.sparql.lang.ParserBase r0;
        com.hp.hpl.jena.sparql.core.Prologue r1;

        r0 := @this: com.hp.hpl.jena.sparql.lang.ParserBase;

        r1 := @parameter0: com.hp.hpl.jena.sparql.core.Prologue;

        r0.<com.hp.hpl.jena.sparql.lang.ParserBase: com.hp.hpl.jena.sparql.core.Prologue prologue> = r1;

        return;
    }

    public com.hp.hpl.jena.sparql.core.Prologue getPrologue()
    {
        com.hp.hpl.jena.sparql.lang.ParserBase r0;
        com.hp.hpl.jena.sparql.core.Prologue $r1;

        r0 := @this: com.hp.hpl.jena.sparql.lang.ParserBase;

        $r1 = r0.<com.hp.hpl.jena.sparql.lang.ParserBase: com.hp.hpl.jena.sparql.core.Prologue prologue>;

        return $r1;
    }

    protected void setInConstructTemplate(boolean)
    {
        com.hp.hpl.jena.sparql.lang.ParserBase r0;
        boolean z0, $z1;

        r0 := @this: com.hp.hpl.jena.sparql.lang.ParserBase;

        z0 := @parameter0: boolean;

        if z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.ParserBase: void setBNodesAreVariables(boolean)>($z1);

        return;
    }

    protected boolean getBNodesAreVariables()
    {
        com.hp.hpl.jena.sparql.lang.ParserBase r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.lang.ParserBase;

        $z0 = r0.<com.hp.hpl.jena.sparql.lang.ParserBase: boolean bNodesAreVariables>;

        return $z0;
    }

    protected void setBNodesAreVariables(boolean)
    {
        com.hp.hpl.jena.sparql.lang.ParserBase r0;
        com.hp.hpl.jena.sparql.util.LabelToNodeMap $r1, $r2;
        boolean z0;

        r0 := @this: com.hp.hpl.jena.sparql.lang.ParserBase;

        z0 := @parameter0: boolean;

        r0.<com.hp.hpl.jena.sparql.lang.ParserBase: boolean bNodesAreVariables> = z0;

        if z0 == 0 goto label1;

        $r2 = r0.<com.hp.hpl.jena.sparql.lang.ParserBase: com.hp.hpl.jena.sparql.util.LabelToNodeMap anonVarLabels>;

        r0.<com.hp.hpl.jena.sparql.lang.ParserBase: com.hp.hpl.jena.sparql.util.LabelToNodeMap activeLabelMap> = $r2;

        goto label2;

     label1:
        $r1 = r0.<com.hp.hpl.jena.sparql.lang.ParserBase: com.hp.hpl.jena.sparql.util.LabelToNodeMap bNodeLabels>;

        r0.<com.hp.hpl.jena.sparql.lang.ParserBase: com.hp.hpl.jena.sparql.util.LabelToNodeMap activeLabelMap> = $r1;

     label2:
        return;
    }

    protected boolean getBNodesAreAllowed()
    {
        com.hp.hpl.jena.sparql.lang.ParserBase r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.lang.ParserBase;

        $z0 = r0.<com.hp.hpl.jena.sparql.lang.ParserBase: boolean bNodesAreAllowed>;

        return $z0;
    }

    protected void setBNodesAreAllowed(boolean)
    {
        com.hp.hpl.jena.sparql.lang.ParserBase r0;
        boolean z0;

        r0 := @this: com.hp.hpl.jena.sparql.lang.ParserBase;

        z0 := @parameter0: boolean;

        r0.<com.hp.hpl.jena.sparql.lang.ParserBase: boolean bNodesAreAllowed> = z0;

        return;
    }

    protected com.hp.hpl.jena.sparql.syntax.Element compressGroupOfOneGroup(com.hp.hpl.jena.sparql.syntax.ElementGroup)
    {
        java.util.List $r1, $r2;
        com.hp.hpl.jena.sparql.lang.ParserBase r5;
        com.hp.hpl.jena.sparql.syntax.ElementGroup r0;
        int $i0;
        com.hp.hpl.jena.sparql.syntax.Element r4;
        java.lang.Object $r3;
        boolean $z0;

        r5 := @this: com.hp.hpl.jena.sparql.lang.ParserBase;

        r0 := @parameter0: com.hp.hpl.jena.sparql.syntax.ElementGroup;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.syntax.ElementGroup: java.util.List getElements()>();

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        if $i0 != 1 goto label1;

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.syntax.ElementGroup: java.util.List getElements()>();

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(0);

        r4 = (com.hp.hpl.jena.sparql.syntax.Element) $r3;

        $z0 = r4 instanceof com.hp.hpl.jena.sparql.syntax.ElementGroup;

        if $z0 == 0 goto label1;

        return r4;

     label1:
        return r0;
    }

    protected com.hp.hpl.jena.graph.Node createLiteralInteger(java.lang.String)
    {
        com.hp.hpl.jena.sparql.lang.ParserBase r3;
        com.hp.hpl.jena.datatypes.xsd.XSDDatatype $r1;
        java.lang.String r0;
        com.hp.hpl.jena.graph.Node $r2;

        r3 := @this: com.hp.hpl.jena.sparql.lang.ParserBase;

        r0 := @parameter0: java.lang.String;

        $r1 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDinteger>;

        $r2 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createLiteral(java.lang.String,java.lang.String,com.hp.hpl.jena.datatypes.RDFDatatype)>(r0, null, $r1);

        return $r2;
    }

    protected com.hp.hpl.jena.graph.Node createLiteralDouble(java.lang.String)
    {
        com.hp.hpl.jena.sparql.lang.ParserBase r3;
        com.hp.hpl.jena.datatypes.xsd.XSDDatatype $r1;
        java.lang.String r0;
        com.hp.hpl.jena.graph.Node $r2;

        r3 := @this: com.hp.hpl.jena.sparql.lang.ParserBase;

        r0 := @parameter0: java.lang.String;

        $r1 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDdouble>;

        $r2 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createLiteral(java.lang.String,java.lang.String,com.hp.hpl.jena.datatypes.RDFDatatype)>(r0, null, $r1);

        return $r2;
    }

    protected com.hp.hpl.jena.graph.Node createLiteralDecimal(java.lang.String)
    {
        com.hp.hpl.jena.sparql.lang.ParserBase r3;
        com.hp.hpl.jena.datatypes.xsd.XSDDatatype $r1;
        java.lang.String r0;
        com.hp.hpl.jena.graph.Node $r2;

        r3 := @this: com.hp.hpl.jena.sparql.lang.ParserBase;

        r0 := @parameter0: java.lang.String;

        $r1 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDdecimal>;

        $r2 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createLiteral(java.lang.String,java.lang.String,com.hp.hpl.jena.datatypes.RDFDatatype)>(r0, null, $r1);

        return $r2;
    }

    protected com.hp.hpl.jena.graph.Node stripSign(com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.graph.Node r0, $r5;
        com.hp.hpl.jena.sparql.ARQInternalErrorException $r6;
        com.hp.hpl.jena.sparql.lang.ParserBase r11;
        com.hp.hpl.jena.datatypes.RDFDatatype $r3;
        java.lang.StringBuilder $r7, $r8, $r9;
        java.lang.String $r1, $r2, $r4, $r10;
        boolean $z0, $z1, $z2;

        r11 := @this: com.hp.hpl.jena.sparql.lang.ParserBase;

        r0 := @parameter0: com.hp.hpl.jena.graph.Node;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: boolean isLiteral()>();

        if $z0 != 0 goto label1;

        return r0;

     label1:
        $r1 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: java.lang.String getLiteralLexicalForm()>();

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: java.lang.String getLiteralLanguage()>();

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.datatypes.RDFDatatype getLiteralDatatype()>();

        $z1 = virtualinvoke $r1.<java.lang.String: boolean startsWith(java.lang.String)>("-");

        if $z1 != 0 goto label2;

        $z2 = virtualinvoke $r1.<java.lang.String: boolean startsWith(java.lang.String)>("+");

        if $z2 != 0 goto label2;

        $r6 = new com.hp.hpl.jena.sparql.ARQInternalErrorException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Literal does not start with a sign: ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<com.hp.hpl.jena.sparql.ARQInternalErrorException: void <init>(java.lang.String)>($r10);

        throw $r6;

     label2:
        $r4 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int)>(1);

        $r5 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createLiteral(java.lang.String,java.lang.String,com.hp.hpl.jena.datatypes.RDFDatatype)>($r4, $r2, $r3);

        return $r5;
    }

    protected com.hp.hpl.jena.graph.Node createLiteral(java.lang.String, java.lang.String, java.lang.String)
    {
        com.hp.hpl.jena.datatypes.TypeMapper $r3;
        com.hp.hpl.jena.sparql.lang.ParserBase r5;
        com.hp.hpl.jena.datatypes.RDFDatatype $r4;
        java.lang.String r0, r1, r2;
        com.hp.hpl.jena.graph.Node r6;

        r5 := @this: com.hp.hpl.jena.sparql.lang.ParserBase;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r0 := @parameter2: java.lang.String;

        if r0 == null goto label1;

        $r3 = staticinvoke <com.hp.hpl.jena.datatypes.TypeMapper: com.hp.hpl.jena.datatypes.TypeMapper getInstance()>();

        $r4 = virtualinvoke $r3.<com.hp.hpl.jena.datatypes.TypeMapper: com.hp.hpl.jena.datatypes.RDFDatatype getSafeTypeByName(java.lang.String)>(r0);

        r6 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createLiteral(java.lang.String,java.lang.String,com.hp.hpl.jena.datatypes.RDFDatatype)>(r1, null, $r4);

        goto label2;

     label1:
        r6 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createLiteral(java.lang.String,java.lang.String,com.hp.hpl.jena.datatypes.RDFDatatype)>(r1, r2, null);

     label2:
        return r6;
    }

    protected long integerValue(java.lang.String)
    {
        long $l0, $l1;
        int $i3, $i5;
        java.math.BigInteger $r12;
        java.lang.String $r0, $r9, r11;
        com.hp.hpl.jena.query.QueryParseException $r14;
        boolean $z0, $z1;
        java.lang.NumberFormatException $r1, $r3;
        com.hp.hpl.jena.sparql.lang.ParserBase r10;
        java.lang.StringBuilder $r6, $r7, $r8, $r13;

        r10 := @this: com.hp.hpl.jena.sparql.lang.ParserBase;

        r11 := @parameter0: java.lang.String;

     label01:
        $z0 = virtualinvoke r11.<java.lang.String: boolean startsWith(java.lang.String)>("+");

        if $z0 == 0 goto label02;

        r11 = virtualinvoke r11.<java.lang.String: java.lang.String substring(int)>(1);

     label02:
        $z1 = virtualinvoke r11.<java.lang.String: boolean startsWith(java.lang.String)>("0x");

        if $z1 == 0 goto label04;

        $r0 = virtualinvoke r11.<java.lang.String: java.lang.String substring(int)>(2);

        r11 = $r0;

        $l1 = staticinvoke <java.lang.Long: long parseLong(java.lang.String,int)>($r0, 16);

     label03:
        return $l1;

     label04:
        $l0 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>(r11);

     label05:
        return $l0;

     label06:
        $r3 := @caughtexception;

     label07:
        $r12 = new java.math.BigInteger;

        specialinvoke $r12.<java.math.BigInteger: void <init>(java.lang.String)>(r11);

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Number \'");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r11);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is a valid number but can\'t not be stored in a long");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.hp.hpl.jena.sparql.lang.ParserBase: void throwParseException(java.lang.String)>($r9);

     label08:
        goto label10;

     label09:
        $r1 := @caughtexception;

     label10:
        $r14 = new com.hp.hpl.jena.query.QueryParseException;

        $i3 = (int) -1;

        $i5 = (int) -1;

        specialinvoke $r14.<com.hp.hpl.jena.query.QueryParseException: void <init>(java.lang.Throwable,int,int)>($r3, $i3, $i5);

        throw $r14;

        catch java.lang.NumberFormatException from label01 to label03 with label06;
        catch java.lang.NumberFormatException from label04 to label05 with label06;
        catch java.lang.NumberFormatException from label07 to label08 with label09;
    }

    protected double doubleValue(java.lang.String)
    {
        com.hp.hpl.jena.sparql.lang.ParserBase r0;
        java.lang.String r1;
        boolean $z0;
        double $d0;

        r0 := @this: com.hp.hpl.jena.sparql.lang.ParserBase;

        r1 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("+");

        if $z0 == 0 goto label1;

        r1 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int)>(1);

     label1:
        $d0 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>(r1);

        return $d0;
    }

    protected static java.lang.String stripQuotes(java.lang.String)
    {
        int $i0, $i1;
        java.lang.String r0, $r1;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        $i1 = $i0 - 1;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(1, $i1);

        return $r1;
    }

    protected static java.lang.String stripQuotes3(java.lang.String)
    {
        int $i0, $i1;
        java.lang.String r0, $r1;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        $i1 = $i0 - 3;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(3, $i1);

        return $r1;
    }

    public static java.lang.String stripChars(java.lang.String, int)
    {
        int i0, $i1;
        java.lang.String r0, $r1;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $i1 = virtualinvoke r0.<java.lang.String: int length()>();

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(i0, $i1);

        return $r1;
    }

    protected com.hp.hpl.jena.sparql.core.Var createVariable(java.lang.String, int, int)
    {
        com.hp.hpl.jena.sparql.lang.ParserBase r2;
        int i0, i1;
        java.lang.String $r0, r3;
        com.hp.hpl.jena.sparql.core.Var $r1;

        r2 := @this: com.hp.hpl.jena.sparql.lang.ParserBase;

        r3 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r0 = virtualinvoke r3.<java.lang.String: java.lang.String substring(int)>(1);

        $r1 = staticinvoke <com.hp.hpl.jena.sparql.core.Var: com.hp.hpl.jena.sparql.core.Var alloc(java.lang.String)>($r0);

        return $r1;
    }

    protected java.lang.String resolveQuotedIRI(java.lang.String, int, int)
    {
        com.hp.hpl.jena.sparql.lang.ParserBase r1;
        int i0, i1;
        java.lang.String $r0, $r2, r3;

        r1 := @this: com.hp.hpl.jena.sparql.lang.ParserBase;

        r3 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r0 = staticinvoke <com.hp.hpl.jena.sparql.lang.ParserBase: java.lang.String stripQuotes(java.lang.String)>(r3);

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.sparql.lang.ParserBase: java.lang.String resolveIRI(java.lang.String,int,int)>($r0, i0, i1);

        return $r2;
    }

    protected java.lang.String resolveIRI(java.lang.String, int, int)
    {
        com.hp.hpl.jena.sparql.core.Prologue $r1, $r2, $r4;
        com.hp.hpl.jena.n3.IRIResolver $r3, $r5;
        com.hp.hpl.jena.n3.JenaURIException $r6;
        com.hp.hpl.jena.sparql.lang.ParserBase r0;
        int i0, i1;
        java.lang.String $r7, r8;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.lang.ParserBase;

        r8 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.ParserBase: boolean isBNodeIRI(java.lang.String)>(r8);

        if $z0 == 0 goto label1;

        return r8;

     label1:
        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.ParserBase: com.hp.hpl.jena.sparql.core.Prologue getPrologue()>();

        if $r1 == null goto label5;

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.ParserBase: com.hp.hpl.jena.sparql.core.Prologue getPrologue()>();

        $r3 = virtualinvoke $r2.<com.hp.hpl.jena.sparql.core.Prologue: com.hp.hpl.jena.n3.IRIResolver getResolver()>();

        if $r3 == null goto label5;

     label2:
        $r4 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.ParserBase: com.hp.hpl.jena.sparql.core.Prologue getPrologue()>();

        $r5 = virtualinvoke $r4.<com.hp.hpl.jena.sparql.core.Prologue: com.hp.hpl.jena.n3.IRIResolver getResolver()>();

        r8 = virtualinvoke $r5.<com.hp.hpl.jena.n3.IRIResolver: java.lang.String resolve(java.lang.String)>(r8);

     label3:
        goto label5;

     label4:
        $r6 := @caughtexception;

        $r7 = virtualinvoke $r6.<com.hp.hpl.jena.n3.JenaURIException: java.lang.String getMessage()>();

        staticinvoke <com.hp.hpl.jena.sparql.lang.ParserBase: void throwParseException(java.lang.String,int,int)>($r7, i0, i1);

     label5:
        return r8;

        catch com.hp.hpl.jena.n3.JenaURIException from label2 to label3 with label4;
    }

    protected java.lang.String resolvePName(java.lang.String, int, int)
    {
        com.hp.hpl.jena.sparql.core.Prologue $r9;
        int $i0, $i1, i2, i3;
        java.lang.String $r0, $r1, $r2, $r7, $r10, $r14, r15;
        com.hp.hpl.jena.sparql.lang.ParserBase r8;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r11, $r12, $r13;

        r8 := @this: com.hp.hpl.jena.sparql.lang.ParserBase;

        r15 := @parameter0: java.lang.String;

        i2 := @parameter1: int;

        i3 := @parameter2: int;

        $i0 = virtualinvoke r15.<java.lang.String: int indexOf(int)>(58);

        $r0 = virtualinvoke r15.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        $i1 = $i0 + 1;

        $r1 = virtualinvoke r15.<java.lang.String: java.lang.String substring(int)>($i1);

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.lang.ParserBase: java.lang.String unescapePName(java.lang.String,int,int)>($r1, i2, i3);

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $r9 = virtualinvoke r8.<com.hp.hpl.jena.sparql.lang.ParserBase: com.hp.hpl.jena.sparql.core.Prologue getPrologue()>();

        $r10 = virtualinvoke $r9.<com.hp.hpl.jena.sparql.core.Prologue: java.lang.String expandPrefixedName(java.lang.String)>($r7);

        if $r10 != null goto label1;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unresolved prefixed name: ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.hp.hpl.jena.sparql.lang.ParserBase: void throwParseException(java.lang.String,int,int)>($r14, i2, i3);

     label1:
        return $r10;
    }

    protected com.hp.hpl.jena.graph.Node createNode(java.lang.String)
    {
        com.hp.hpl.jena.sparql.lang.ParserBase r0;
        java.lang.String r1;
        com.hp.hpl.jena.graph.Node $r2, $r3;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.lang.ParserBase;

        r1 := @parameter0: java.lang.String;

        $z0 = r0.<com.hp.hpl.jena.sparql.lang.ParserBase: boolean skolomizedBNodes>;

        if $z0 == 0 goto label1;

        $r3 = staticinvoke <org.apache.jena.riot.system.RiotLib: com.hp.hpl.jena.graph.Node createIRIorBNode(java.lang.String)>(r1);

        return $r3;

     label1:
        $r2 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createURI(java.lang.String)>(r1);

        return $r2;
    }

    protected boolean isBNodeIRI(java.lang.String)
    {
        com.hp.hpl.jena.sparql.lang.ParserBase r0;
        java.lang.String r1;
        boolean $z0, $z1, $z2;

        r0 := @this: com.hp.hpl.jena.sparql.lang.ParserBase;

        r1 := @parameter0: java.lang.String;

        $z0 = r0.<com.hp.hpl.jena.sparql.lang.ParserBase: boolean skolomizedBNodes>;

        if $z0 == 0 goto label1;

        $z1 = staticinvoke <org.apache.jena.riot.system.RiotLib: boolean isBNodeIRI(java.lang.String)>(r1);

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    protected void startBasicGraphPattern()
    {
        com.hp.hpl.jena.sparql.lang.ParserBase r0;
        com.hp.hpl.jena.sparql.util.LabelToNodeMap $r1;

        r0 := @this: com.hp.hpl.jena.sparql.lang.ParserBase;

        $r1 = r0.<com.hp.hpl.jena.sparql.lang.ParserBase: com.hp.hpl.jena.sparql.util.LabelToNodeMap activeLabelMap>;

        virtualinvoke $r1.<com.hp.hpl.jena.sparql.util.LabelToNodeMap: void clear()>();

        return;
    }

    protected void endBasicGraphPattern()
    {
        com.hp.hpl.jena.sparql.lang.ParserBase r0;
        java.util.Set $r2, $r3;
        com.hp.hpl.jena.sparql.util.LabelToNodeMap $r1;

        r0 := @this: com.hp.hpl.jena.sparql.lang.ParserBase;

        $r2 = r0.<com.hp.hpl.jena.sparql.lang.ParserBase: java.util.Set previousLabels>;

        $r1 = r0.<com.hp.hpl.jena.sparql.lang.ParserBase: com.hp.hpl.jena.sparql.util.LabelToNodeMap activeLabelMap>;

        $r3 = virtualinvoke $r1.<com.hp.hpl.jena.sparql.util.LabelToNodeMap: java.util.Set getLabels()>();

        interfaceinvoke $r2.<java.util.Set: boolean addAll(java.util.Collection)>($r3);

        return;
    }

    protected void startTriplesBlock()
    {
        com.hp.hpl.jena.sparql.lang.ParserBase r0;

        r0 := @this: com.hp.hpl.jena.sparql.lang.ParserBase;

        return;
    }

    protected void endTriplesBlock()
    {
        com.hp.hpl.jena.sparql.lang.ParserBase r0;

        r0 := @this: com.hp.hpl.jena.sparql.lang.ParserBase;

        return;
    }

    protected void startGroup(com.hp.hpl.jena.sparql.syntax.ElementGroup)
    {
        com.hp.hpl.jena.sparql.lang.ParserBase r0;
        com.hp.hpl.jena.sparql.syntax.ElementGroup r1;

        r0 := @this: com.hp.hpl.jena.sparql.lang.ParserBase;

        r1 := @parameter0: com.hp.hpl.jena.sparql.syntax.ElementGroup;

        virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.ParserBase: void endBasicGraphPattern()>();

        virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.ParserBase: void startBasicGraphPattern()>();

        return;
    }

    protected void endGroup(com.hp.hpl.jena.sparql.syntax.ElementGroup)
    {
        com.hp.hpl.jena.sparql.lang.ParserBase r0;
        com.hp.hpl.jena.sparql.syntax.ElementGroup r1;

        r0 := @this: com.hp.hpl.jena.sparql.lang.ParserBase;

        r1 := @parameter0: com.hp.hpl.jena.sparql.syntax.ElementGroup;

        virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.ParserBase: void endBasicGraphPattern()>();

        return;
    }

    protected com.hp.hpl.jena.graph.Node createListNode(int, int)
    {
        com.hp.hpl.jena.sparql.lang.ParserBase r0;
        int i0, i1;
        com.hp.hpl.jena.graph.Node $r1;

        r0 := @this: com.hp.hpl.jena.sparql.lang.ParserBase;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.ParserBase: com.hp.hpl.jena.graph.Node createBNode(int,int)>(i0, i1);

        return $r1;
    }

    protected com.hp.hpl.jena.graph.Node createBNode(int, int)
    {
        com.hp.hpl.jena.sparql.lang.ParserBase r0;
        int i0, i1;
        com.hp.hpl.jena.graph.Node $r2;
        com.hp.hpl.jena.sparql.util.LabelToNodeMap $r1;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.lang.ParserBase;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $z0 = r0.<com.hp.hpl.jena.sparql.lang.ParserBase: boolean bNodesAreAllowed>;

        if $z0 != 0 goto label1;

        staticinvoke <com.hp.hpl.jena.sparql.lang.ParserBase: void throwParseException(java.lang.String,int,int)>("Blank nodes not allowed in DELETE templates", i0, i1);

     label1:
        $r1 = r0.<com.hp.hpl.jena.sparql.lang.ParserBase: com.hp.hpl.jena.sparql.util.LabelToNodeMap activeLabelMap>;

        $r2 = virtualinvoke $r1.<com.hp.hpl.jena.sparql.util.LabelToNodeMap: com.hp.hpl.jena.graph.Node allocNode()>();

        return $r2;
    }

    protected com.hp.hpl.jena.graph.Node createBNode(java.lang.String, int, int)
    {
        com.hp.hpl.jena.graph.Node $r4;
        int i0, i1;
        java.lang.String r1, $r8, $r12;
        com.hp.hpl.jena.sparql.util.LabelToNodeMap $r3;
        boolean $z0, $z1;
        java.util.Set $r2;
        com.hp.hpl.jena.sparql.lang.ParserBase r0;
        java.lang.StringBuilder $r5, $r6, $r7, $r9, $r10, $r11;

        r0 := @this: com.hp.hpl.jena.sparql.lang.ParserBase;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $z0 = r0.<com.hp.hpl.jena.sparql.lang.ParserBase: boolean bNodesAreAllowed>;

        if $z0 != 0 goto label1;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Blank nodes not allowed in DELETE templates: ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.hp.hpl.jena.sparql.lang.ParserBase: void throwParseException(java.lang.String,int,int)>($r12, i0, i1);

     label1:
        $r2 = r0.<com.hp.hpl.jena.sparql.lang.ParserBase: java.util.Set previousLabels>;

        $z1 = interfaceinvoke $r2.<java.util.Set: boolean contains(java.lang.Object)>(r1);

        if $z1 == 0 goto label2;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Blank node label reuse not allowed at this point: ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.hp.hpl.jena.sparql.lang.ParserBase: void throwParseException(java.lang.String,int,int)>($r8, i0, i1);

     label2:
        $r3 = r0.<com.hp.hpl.jena.sparql.lang.ParserBase: com.hp.hpl.jena.sparql.util.LabelToNodeMap activeLabelMap>;

        $r4 = virtualinvoke $r3.<com.hp.hpl.jena.sparql.util.LabelToNodeMap: com.hp.hpl.jena.graph.Node asNode(java.lang.String)>(r1);

        return $r4;
    }

    protected com.hp.hpl.jena.sparql.expr.Expr createExprExists(com.hp.hpl.jena.sparql.syntax.Element)
    {
        com.hp.hpl.jena.sparql.expr.E_Exists $r0;
        com.hp.hpl.jena.sparql.syntax.Element r1;
        com.hp.hpl.jena.sparql.lang.ParserBase r2;

        r2 := @this: com.hp.hpl.jena.sparql.lang.ParserBase;

        r1 := @parameter0: com.hp.hpl.jena.sparql.syntax.Element;

        $r0 = new com.hp.hpl.jena.sparql.expr.E_Exists;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.expr.E_Exists: void <init>(com.hp.hpl.jena.sparql.syntax.Element)>(r1);

        return $r0;
    }

    protected com.hp.hpl.jena.sparql.expr.Expr createExprNotExists(com.hp.hpl.jena.sparql.syntax.Element)
    {
        com.hp.hpl.jena.sparql.syntax.Element r1;
        com.hp.hpl.jena.sparql.expr.E_NotExists $r0;
        com.hp.hpl.jena.sparql.lang.ParserBase r2;

        r2 := @this: com.hp.hpl.jena.sparql.lang.ParserBase;

        r1 := @parameter0: com.hp.hpl.jena.sparql.syntax.Element;

        $r0 = new com.hp.hpl.jena.sparql.expr.E_NotExists;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.expr.E_NotExists: void <init>(com.hp.hpl.jena.sparql.syntax.Element)>(r1);

        return $r0;
    }

    protected java.lang.String fixupPrefix(java.lang.String, int, int)
    {
        com.hp.hpl.jena.sparql.lang.ParserBase r0;
        int $i0, $i1, i2, i3;
        java.lang.String r1;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.lang.ParserBase;

        r1 := @parameter0: java.lang.String;

        i2 := @parameter1: int;

        i3 := @parameter2: int;

        $z0 = virtualinvoke r1.<java.lang.String: boolean endsWith(java.lang.String)>(":");

        if $z0 == 0 goto label1;

        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        $i1 = $i0 - 1;

        r1 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(0, $i1);

     label1:
        return r1;
    }

    protected void setAccGraph(com.hp.hpl.jena.sparql.modify.request.QuadAccSink, com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.sparql.modify.request.QuadAccSink r0;
        com.hp.hpl.jena.graph.Node r1;
        com.hp.hpl.jena.sparql.lang.ParserBase r2;

        r2 := @this: com.hp.hpl.jena.sparql.lang.ParserBase;

        r0 := @parameter0: com.hp.hpl.jena.sparql.modify.request.QuadAccSink;

        r1 := @parameter1: com.hp.hpl.jena.graph.Node;

        virtualinvoke r0.<com.hp.hpl.jena.sparql.modify.request.QuadAccSink: void setGraph(com.hp.hpl.jena.graph.Node)>(r1);

        return;
    }

    protected void insert(com.hp.hpl.jena.sparql.syntax.TripleCollector, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.sparql.lang.ParserBase r5;
        com.hp.hpl.jena.sparql.syntax.TripleCollector r0;
        com.hp.hpl.jena.graph.Node r2, r3, r4;
        com.hp.hpl.jena.graph.Triple $r1;

        r5 := @this: com.hp.hpl.jena.sparql.lang.ParserBase;

        r0 := @parameter0: com.hp.hpl.jena.sparql.syntax.TripleCollector;

        r2 := @parameter1: com.hp.hpl.jena.graph.Node;

        r3 := @parameter2: com.hp.hpl.jena.graph.Node;

        r4 := @parameter3: com.hp.hpl.jena.graph.Node;

        $r1 = new com.hp.hpl.jena.graph.Triple;

        specialinvoke $r1.<com.hp.hpl.jena.graph.Triple: void <init>(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r2, r3, r4);

        interfaceinvoke r0.<com.hp.hpl.jena.sparql.syntax.TripleCollector: void addTriple(com.hp.hpl.jena.graph.Triple)>($r1);

        return;
    }

    protected void insert(com.hp.hpl.jena.sparql.syntax.TripleCollectorMark, int, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.sparql.syntax.TripleCollectorMark r0;
        com.hp.hpl.jena.sparql.lang.ParserBase r5;
        int i0;
        com.hp.hpl.jena.graph.Node r2, r3, r4;
        com.hp.hpl.jena.graph.Triple $r1;

        r5 := @this: com.hp.hpl.jena.sparql.lang.ParserBase;

        r0 := @parameter0: com.hp.hpl.jena.sparql.syntax.TripleCollectorMark;

        i0 := @parameter1: int;

        r2 := @parameter2: com.hp.hpl.jena.graph.Node;

        r3 := @parameter3: com.hp.hpl.jena.graph.Node;

        r4 := @parameter4: com.hp.hpl.jena.graph.Node;

        $r1 = new com.hp.hpl.jena.graph.Triple;

        specialinvoke $r1.<com.hp.hpl.jena.graph.Triple: void <init>(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r2, r3, r4);

        interfaceinvoke r0.<com.hp.hpl.jena.sparql.syntax.TripleCollectorMark: void addTriple(int,com.hp.hpl.jena.graph.Triple)>(i0, $r1);

        return;
    }

    protected void insert(com.hp.hpl.jena.sparql.syntax.TripleCollector, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.sparql.path.Path, com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.sparql.core.TriplePath $r5;
        com.hp.hpl.jena.graph.Node r0, r3, r4;
        com.hp.hpl.jena.graph.Triple $r2;
        com.hp.hpl.jena.sparql.path.Path r6;
        com.hp.hpl.jena.sparql.lang.ParserBase r7;
        com.hp.hpl.jena.sparql.syntax.TripleCollector r1;

        r7 := @this: com.hp.hpl.jena.sparql.lang.ParserBase;

        r1 := @parameter0: com.hp.hpl.jena.sparql.syntax.TripleCollector;

        r3 := @parameter1: com.hp.hpl.jena.graph.Node;

        r0 := @parameter2: com.hp.hpl.jena.graph.Node;

        r6 := @parameter3: com.hp.hpl.jena.sparql.path.Path;

        r4 := @parameter4: com.hp.hpl.jena.graph.Node;

        if r0 != null goto label1;

        $r5 = new com.hp.hpl.jena.sparql.core.TriplePath;

        specialinvoke $r5.<com.hp.hpl.jena.sparql.core.TriplePath: void <init>(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.path.Path,com.hp.hpl.jena.graph.Node)>(r3, r6, r4);

        interfaceinvoke r1.<com.hp.hpl.jena.sparql.syntax.TripleCollector: void addTriplePath(com.hp.hpl.jena.sparql.core.TriplePath)>($r5);

        goto label2;

     label1:
        $r2 = new com.hp.hpl.jena.graph.Triple;

        specialinvoke $r2.<com.hp.hpl.jena.graph.Triple: void <init>(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r3, r0, r4);

        interfaceinvoke r1.<com.hp.hpl.jena.sparql.syntax.TripleCollector: void addTriple(com.hp.hpl.jena.graph.Triple)>($r2);

     label2:
        return;
    }

    protected void insert(com.hp.hpl.jena.sparql.syntax.TripleCollectorMark, int, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.sparql.path.Path, com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.sparql.syntax.TripleCollectorMark r1;
        com.hp.hpl.jena.sparql.core.TriplePath $r5;
        com.hp.hpl.jena.graph.Node r0, r3, r4;
        com.hp.hpl.jena.graph.Triple $r2;
        com.hp.hpl.jena.sparql.path.Path r6;
        com.hp.hpl.jena.sparql.lang.ParserBase r7;
        int i0;

        r7 := @this: com.hp.hpl.jena.sparql.lang.ParserBase;

        r1 := @parameter0: com.hp.hpl.jena.sparql.syntax.TripleCollectorMark;

        i0 := @parameter1: int;

        r3 := @parameter2: com.hp.hpl.jena.graph.Node;

        r0 := @parameter3: com.hp.hpl.jena.graph.Node;

        r6 := @parameter4: com.hp.hpl.jena.sparql.path.Path;

        r4 := @parameter5: com.hp.hpl.jena.graph.Node;

        if r0 != null goto label1;

        $r5 = new com.hp.hpl.jena.sparql.core.TriplePath;

        specialinvoke $r5.<com.hp.hpl.jena.sparql.core.TriplePath: void <init>(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.path.Path,com.hp.hpl.jena.graph.Node)>(r3, r6, r4);

        interfaceinvoke r1.<com.hp.hpl.jena.sparql.syntax.TripleCollectorMark: void addTriplePath(int,com.hp.hpl.jena.sparql.core.TriplePath)>(i0, $r5);

        goto label2;

     label1:
        $r2 = new com.hp.hpl.jena.graph.Triple;

        specialinvoke $r2.<com.hp.hpl.jena.graph.Triple: void <init>(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r3, r0, r4);

        interfaceinvoke r1.<com.hp.hpl.jena.sparql.syntax.TripleCollectorMark: void addTriple(int,com.hp.hpl.jena.graph.Triple)>(i0, $r2);

     label2:
        return;
    }

    protected void insert(com.hp.hpl.jena.sparql.syntax.TripleCollector, com.hp.hpl.jena.sparql.syntax.ElementPathBlock)
    {
        java.util.Iterator $r2;
        com.hp.hpl.jena.sparql.core.TriplePath r4;
        com.hp.hpl.jena.sparql.syntax.ElementPathBlock r0;
        com.hp.hpl.jena.graph.Triple $r6;
        com.hp.hpl.jena.sparql.core.PathBlock $r1;
        com.hp.hpl.jena.sparql.lang.ParserBase r7;
        com.hp.hpl.jena.sparql.syntax.TripleCollector r5;
        java.lang.Object $r3;
        boolean $z0, $z1;

        r7 := @this: com.hp.hpl.jena.sparql.lang.ParserBase;

        r5 := @parameter0: com.hp.hpl.jena.sparql.syntax.TripleCollector;

        r0 := @parameter1: com.hp.hpl.jena.sparql.syntax.ElementPathBlock;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.syntax.ElementPathBlock: com.hp.hpl.jena.sparql.core.PathBlock getPattern()>();

        $r2 = virtualinvoke $r1.<com.hp.hpl.jena.sparql.core.PathBlock: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (com.hp.hpl.jena.sparql.core.TriplePath) $r3;

        $z1 = virtualinvoke r4.<com.hp.hpl.jena.sparql.core.TriplePath: boolean isTriple()>();

        if $z1 == 0 goto label2;

        $r6 = virtualinvoke r4.<com.hp.hpl.jena.sparql.core.TriplePath: com.hp.hpl.jena.graph.Triple asTriple()>();

        interfaceinvoke r5.<com.hp.hpl.jena.sparql.syntax.TripleCollector: void addTriple(com.hp.hpl.jena.graph.Triple)>($r6);

        goto label3;

     label2:
        interfaceinvoke r5.<com.hp.hpl.jena.sparql.syntax.TripleCollector: void addTriplePath(com.hp.hpl.jena.sparql.core.TriplePath)>(r4);

     label3:
        goto label1;

     label4:
        return;
    }

    protected com.hp.hpl.jena.sparql.expr.Expr asExpr(com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.graph.Node r0;
        com.hp.hpl.jena.sparql.lang.ParserBase r2;
        com.hp.hpl.jena.sparql.expr.Expr $r1;

        r2 := @this: com.hp.hpl.jena.sparql.lang.ParserBase;

        r0 := @parameter0: com.hp.hpl.jena.graph.Node;

        $r1 = staticinvoke <com.hp.hpl.jena.sparql.util.ExprUtils: com.hp.hpl.jena.sparql.expr.Expr nodeToExpr(com.hp.hpl.jena.graph.Node)>(r0);

        return $r1;
    }

    protected com.hp.hpl.jena.sparql.expr.Expr asExprNoSign(com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.sparql.lang.ParserBase r3;
        com.hp.hpl.jena.sparql.expr.Expr $r5;
        java.lang.String $r0, $r1, $r2;
        com.hp.hpl.jena.graph.Node $r4, r6;

        r3 := @this: com.hp.hpl.jena.sparql.lang.ParserBase;

        r6 := @parameter0: com.hp.hpl.jena.graph.Node;

        $r0 = virtualinvoke r6.<com.hp.hpl.jena.graph.Node: java.lang.String getLiteralLexicalForm()>();

        $r1 = virtualinvoke r6.<com.hp.hpl.jena.graph.Node: java.lang.String getLiteralLanguage()>();

        $r2 = virtualinvoke r6.<com.hp.hpl.jena.graph.Node: java.lang.String getLiteralDatatypeURI()>();

        $r4 = virtualinvoke r3.<com.hp.hpl.jena.sparql.lang.ParserBase: com.hp.hpl.jena.graph.Node createLiteral(java.lang.String,java.lang.String,java.lang.String)>($r0, $r1, $r2);

        $r5 = staticinvoke <com.hp.hpl.jena.sparql.util.ExprUtils: com.hp.hpl.jena.sparql.expr.Expr nodeToExpr(com.hp.hpl.jena.graph.Node)>($r4);

        return $r5;
    }

    public static java.lang.String unescapeStr(java.lang.String)
    {
        java.lang.String r0, $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <com.hp.hpl.jena.sparql.lang.ParserBase: java.lang.String unescape(java.lang.String,char,boolean,int,int)>(r0, 92, 0, 1, 1);

        return $r1;
    }

    public static java.lang.String unescapeStr(java.lang.String, int, int)
    {
        int i0, i1;
        java.lang.String r0, $r1;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r1 = staticinvoke <com.hp.hpl.jena.sparql.lang.ParserBase: java.lang.String unescape(java.lang.String,char,boolean,int,int)>(r0, 92, 0, i0, i1);

        return $r1;
    }

    public static java.lang.String unescape(java.lang.String, char, boolean, int, int)
    {
        boolean z0;
        java.lang.StringBuilder $r5, $r6, $r9;
        java.lang.StringBuffer $r8;
        int $i1, $i2, $i4, $i5, $i6, $i8, $i9, $i10, $i11, $i13, $i14, $i15, $i16, $i18, $i19, i20, i21, i22, $i24, $i26, $i27, $i28, $i29, $i30, $i31, $i32;
        java.lang.String r0, $r2, $r3, $r7;
        char c0, $c3, $c7, $c12, $c17, c23;

        r0 := @parameter0: java.lang.String;

        c0 := @parameter1: char;

        z0 := @parameter2: boolean;

        i20 := @parameter3: int;

        i21 := @parameter4: int;

        $i24 = (int) c0;

        $i1 = virtualinvoke r0.<java.lang.String: int indexOf(int)>($i24);

        i22 = $i1;

        $i26 = (int) -1;

        if $i1 != $i26 goto label01;

        return r0;

     label01:
        $r8 = new java.lang.StringBuffer;

        $r2 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i1);

        specialinvoke $r8.<java.lang.StringBuffer: void <init>(java.lang.String)>($r2);

     label02:
        $i2 = virtualinvoke r0.<java.lang.String: int length()>();

        if i22 >= $i2 goto label24;

        $c3 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i22);

        $i27 = (int) $c3;

        lookupswitch($i27)
        {
            case 10: goto label03;
            case 13: goto label03;
            default: goto label04;
        };

     label03:
        i20 = i20 + 1;

        i21 = 1;

        goto label05;

     label04:
        i21 = i21 + 1;

     label05:
        $i28 = (int) $c3;

        $i29 = (int) c0;

        if $i28 == $i29 goto label06;

        virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c3);

        goto label23;

     label06:
        $i4 = virtualinvoke r0.<java.lang.String: int length()>();

        $i5 = $i4 - 1;

        if i22 < $i5 goto label07;

        staticinvoke <com.hp.hpl.jena.sparql.lang.ParserBase: void throwParseException(java.lang.String,int,int)>("Illegal escape at end of string", i20, i21);

     label07:
        $i6 = i22 + 1;

        $c7 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i6);

        $i18 = i21 + 1;

        i21 = $i18;

        $i19 = i22 + 1;

        i22 = $i19;

        $i30 = (int) $c7;

        if $i30 != 117 goto label09;

        $i13 = $i19 + 4;

        $i14 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i13 < $i14 goto label08;

        staticinvoke <com.hp.hpl.jena.sparql.lang.ParserBase: void throwParseException(java.lang.String,int,int)>("\\u escape too short", i20, $i18);

     label08:
        $i15 = $i19 + 1;

        $i16 = staticinvoke <com.hp.hpl.jena.sparql.lang.ParserBase: int hex(java.lang.String,int,int,int,int)>(r0, $i15, 4, i20, $i18);

        $c17 = (char) $i16;

        virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c17);

        i22 = $i19 + 4;

        i21 = $i18 + 4;

        goto label23;

     label09:
        $i31 = (int) $c7;

        if $i31 != 85 goto label11;

        $i8 = $i19 + 8;

        $i9 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i8 < $i9 goto label10;

        staticinvoke <com.hp.hpl.jena.sparql.lang.ParserBase: void throwParseException(java.lang.String,int,int)>("\\U escape too short", i20, $i18);

     label10:
        $i10 = $i19 + 1;

        $i11 = staticinvoke <com.hp.hpl.jena.sparql.lang.ParserBase: int hex(java.lang.String,int,int,int,int)>(r0, $i10, 8, i20, $i18);

        $c12 = (char) $i11;

        virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c12);

        i22 = $i19 + 8;

        i21 = $i18 + 8;

        goto label23;

     label11:
        if z0 == 0 goto label12;

        virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(92);

        virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c7);

        i22 = $i19 + 1;

        goto label23;

     label12:
        c23 = 0;

        $i32 = (int) $c7;

        lookupswitch($i32)
        {
            case 34: goto label19;
            case 39: goto label18;
            case 92: goto label20;
            case 98: goto label16;
            case 102: goto label17;
            case 110: goto label13;
            case 114: goto label15;
            case 116: goto label14;
            default: goto label21;
        };

     label13:
        c23 = 10;

        goto label22;

     label14:
        c23 = 9;

        goto label22;

     label15:
        c23 = 13;

        goto label22;

     label16:
        c23 = 8;

        goto label22;

     label17:
        c23 = 12;

        goto label22;

     label18:
        c23 = 39;

        goto label22;

     label19:
        c23 = 34;

        goto label22;

     label20:
        c23 = 92;

        goto label22;

     label21:
        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown escape: \\");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c7);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.hp.hpl.jena.sparql.lang.ParserBase: void throwParseException(java.lang.String,int,int)>($r7, i20, $i18);

     label22:
        virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c23);

     label23:
        i22 = i22 + 1;

        goto label02;

     label24:
        $r3 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r3;
    }

    public static int hex(java.lang.String, int, int, int, int)
    {
        byte b8;
        int i0, i1, $i2, i4, i5, i6, i7, $i9, $i10;
        java.lang.String r0, $r4;
        char $c3;
        java.lang.StringBuilder $r2, $r3, $r5;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i4 := @parameter3: int;

        i5 := @parameter4: int;

        i6 = 0;

        i7 = i0;

     label01:
        $i2 = i0 + i1;

        if i7 >= $i2 goto label20;

        $c3 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i7);

        i5 = i5 + 1;

        b8 = 0;

        $i10 = (int) $c3;

        tableswitch($i10)
        {
            case 48: goto label02;
            case 49: goto label03;
            case 50: goto label04;
            case 51: goto label05;
            case 52: goto label06;
            case 53: goto label07;
            case 54: goto label08;
            case 55: goto label09;
            case 56: goto label10;
            case 57: goto label11;
            case 58: goto label18;
            case 59: goto label18;
            case 60: goto label18;
            case 61: goto label18;
            case 62: goto label18;
            case 63: goto label18;
            case 64: goto label18;
            case 65: goto label12;
            case 66: goto label13;
            case 67: goto label14;
            case 68: goto label15;
            case 69: goto label16;
            case 70: goto label17;
            case 71: goto label18;
            case 72: goto label18;
            case 73: goto label18;
            case 74: goto label18;
            case 75: goto label18;
            case 76: goto label18;
            case 77: goto label18;
            case 78: goto label18;
            case 79: goto label18;
            case 80: goto label18;
            case 81: goto label18;
            case 82: goto label18;
            case 83: goto label18;
            case 84: goto label18;
            case 85: goto label18;
            case 86: goto label18;
            case 87: goto label18;
            case 88: goto label18;
            case 89: goto label18;
            case 90: goto label18;
            case 91: goto label18;
            case 92: goto label18;
            case 93: goto label18;
            case 94: goto label18;
            case 95: goto label18;
            case 96: goto label18;
            case 97: goto label12;
            case 98: goto label13;
            case 99: goto label14;
            case 100: goto label15;
            case 101: goto label16;
            case 102: goto label17;
            default: goto label18;
        };

     label02:
        b8 = 0;

        goto label19;

     label03:
        b8 = 1;

        goto label19;

     label04:
        b8 = 2;

        goto label19;

     label05:
        b8 = 3;

        goto label19;

     label06:
        b8 = 4;

        goto label19;

     label07:
        b8 = 5;

        goto label19;

     label08:
        b8 = 6;

        goto label19;

     label09:
        b8 = 7;

        goto label19;

     label10:
        b8 = 8;

        goto label19;

     label11:
        b8 = 9;

        goto label19;

     label12:
        b8 = 10;

        goto label19;

     label13:
        b8 = 11;

        goto label19;

     label14:
        b8 = 12;

        goto label19;

     label15:
        b8 = 13;

        goto label19;

     label16:
        b8 = 14;

        goto label19;

     label17:
        b8 = 15;

        goto label19;

     label18:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal hex escape: ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c3);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.hp.hpl.jena.sparql.lang.ParserBase: void throwParseException(java.lang.String,int,int)>($r4, i4, i5);

     label19:
        $i9 = i6 << 4;

        i6 = $i9 + b8;

        i7 = i7 + 1;

        goto label01;

     label20:
        return i6;
    }

    public static java.lang.String unescapePName(java.lang.String, int, int)
    {
        int $i0, $i1, $i3, $i4, $i5, $i7, i8, i9, i10, $i12, $i13, $i14, $i15;
        java.lang.String r0, $r2, $r6;
        char $c2, $c6;
        java.lang.StringBuilder $r4, $r5, $r7, $r8;

        r0 := @parameter0: java.lang.String;

        i8 := @parameter1: int;

        i9 := @parameter2: int;

        $i0 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(92);

        $i12 = (int) -1;

        if $i0 != $i12 goto label01;

        return r0;

     label01:
        $i1 = virtualinvoke r0.<java.lang.String: int length()>();

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        i10 = 0;

     label02:
        if i10 >= $i1 goto label11;

        $c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i10);

        $i13 = (int) $c2;

        lookupswitch($i13)
        {
            case 10: goto label03;
            case 13: goto label03;
            default: goto label04;
        };

     label03:
        i8 = i8 + 1;

        i9 = 1;

        goto label05;

     label04:
        i9 = i9 + 1;

     label05:
        $i14 = (int) $c2;

        if $i14 == 92 goto label06;

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c2);

        goto label10;

     label06:
        $i3 = virtualinvoke r0.<java.lang.String: int length()>();

        $i4 = $i3 - 1;

        if i10 < $i4 goto label07;

        staticinvoke <com.hp.hpl.jena.sparql.lang.ParserBase: void throwParseException(java.lang.String,int,int)>("Illegal escape at end of string", i8, i9);

     label07:
        $i5 = i10 + 1;

        $c6 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i5);

        $i7 = i9 + 1;

        i9 = $i7;

        i10 = i10 + 1;

        $i15 = (int) $c6;

        lookupswitch($i15)
        {
            case 33: goto label08;
            case 35: goto label08;
            case 36: goto label08;
            case 37: goto label08;
            case 38: goto label08;
            case 39: goto label08;
            case 40: goto label08;
            case 41: goto label08;
            case 42: goto label08;
            case 43: goto label08;
            case 44: goto label08;
            case 45: goto label08;
            case 46: goto label08;
            case 47: goto label08;
            case 58: goto label08;
            case 59: goto label08;
            case 61: goto label08;
            case 63: goto label08;
            case 64: goto label08;
            case 126: goto label08;
            default: goto label09;
        };

     label08:
        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c6);

        goto label10;

     label09:
        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal prefix name escape: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c6);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.hp.hpl.jena.sparql.lang.ParserBase: void throwParseException(java.lang.String,int,int)>($r6, i8, $i7);

     label10:
        i10 = i10 + 1;

        goto label02;

     label11:
        $r2 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }

    protected void warnDeprecation(java.lang.String)
    {
        com.hp.hpl.jena.sparql.lang.ParserBase r0;
        java.lang.String r1;

        r0 := @this: com.hp.hpl.jena.sparql.lang.ParserBase;

        r1 := @parameter0: java.lang.String;

        staticinvoke <org.apache.jena.atlas.logging.Log: void warn(java.lang.Object,java.lang.String)>(r0, r1);

        return;
    }

    public static void throwParseException(java.lang.String, int, int)
    {
        int i0, i1;
        java.lang.StringBuilder $r1, $r2, $r3, $r4, $r5, $r6, $r8;
        java.lang.String r7, $r9;
        com.hp.hpl.jena.query.QueryParseException $r0;

        r7 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r0 = new com.hp.hpl.jena.query.QueryParseException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Line ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", column ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<com.hp.hpl.jena.query.QueryParseException: void <init>(java.lang.String,int,int)>($r9, i0, i1);

        throw $r0;
    }

    public static void throwParseException(java.lang.String)
    {
        int $i1, $i3;
        java.lang.String r1;
        com.hp.hpl.jena.query.QueryParseException $r2;

        r1 := @parameter0: java.lang.String;

        $r2 = new com.hp.hpl.jena.query.QueryParseException;

        $i1 = (int) -1;

        $i3 = (int) -1;

        specialinvoke $r2.<com.hp.hpl.jena.query.QueryParseException: void <init>(java.lang.String,int,int)>(r1, $i1, $i3);

        throw $r2;
    }
}
