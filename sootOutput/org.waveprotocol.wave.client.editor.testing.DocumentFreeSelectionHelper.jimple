public class org.waveprotocol.wave.client.editor.testing.DocumentFreeSelectionHelper extends java.lang.Object implements org.waveprotocol.wave.client.editor.selection.content.SelectionHelper
{
    org.waveprotocol.wave.model.document.util.FocusedRange selection;

    public void <init>(int, int)
    {
        org.waveprotocol.wave.client.editor.testing.DocumentFreeSelectionHelper r0;
        org.waveprotocol.wave.model.document.util.FocusedRange $r1;
        int i0, i1;

        r0 := @this: org.waveprotocol.wave.client.editor.testing.DocumentFreeSelectionHelper;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.waveprotocol.wave.client.editor.testing.DocumentFreeSelectionHelper: org.waveprotocol.wave.model.document.util.FocusedRange selection> = null;

        $r1 = new org.waveprotocol.wave.model.document.util.FocusedRange;

        specialinvoke $r1.<org.waveprotocol.wave.model.document.util.FocusedRange: void <init>(int,int)>(i0, i1);

        r0.<org.waveprotocol.wave.client.editor.testing.DocumentFreeSelectionHelper: org.waveprotocol.wave.model.document.util.FocusedRange selection> = $r1;

        return;
    }

    public void <init>(org.waveprotocol.wave.model.document.util.FocusedRange)
    {
        org.waveprotocol.wave.client.editor.testing.DocumentFreeSelectionHelper r0;
        org.waveprotocol.wave.model.document.util.FocusedRange r1;

        r0 := @this: org.waveprotocol.wave.client.editor.testing.DocumentFreeSelectionHelper;

        r1 := @parameter0: org.waveprotocol.wave.model.document.util.FocusedRange;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.waveprotocol.wave.client.editor.testing.DocumentFreeSelectionHelper: org.waveprotocol.wave.model.document.util.FocusedRange selection> = null;

        r0.<org.waveprotocol.wave.client.editor.testing.DocumentFreeSelectionHelper: org.waveprotocol.wave.model.document.util.FocusedRange selection> = r1;

        return;
    }

    public void clearSelection()
    {
        org.waveprotocol.wave.client.editor.testing.DocumentFreeSelectionHelper r0;

        r0 := @this: org.waveprotocol.wave.client.editor.testing.DocumentFreeSelectionHelper;

        r0.<org.waveprotocol.wave.client.editor.testing.DocumentFreeSelectionHelper: org.waveprotocol.wave.model.document.util.FocusedRange selection> = null;

        return;
    }

    public org.waveprotocol.wave.model.document.util.FocusedRange getSelectionRange()
    {
        org.waveprotocol.wave.client.editor.testing.DocumentFreeSelectionHelper r0;
        org.waveprotocol.wave.model.document.util.FocusedRange $r1;

        r0 := @this: org.waveprotocol.wave.client.editor.testing.DocumentFreeSelectionHelper;

        $r1 = r0.<org.waveprotocol.wave.client.editor.testing.DocumentFreeSelectionHelper: org.waveprotocol.wave.model.document.util.FocusedRange selection>;

        return $r1;
    }

    public org.waveprotocol.wave.model.document.util.Range getOrderedSelectionRange()
    {
        org.waveprotocol.wave.client.editor.testing.DocumentFreeSelectionHelper r0;
        org.waveprotocol.wave.model.document.util.FocusedRange $r1, $r2;
        org.waveprotocol.wave.model.document.util.Range $r3;

        r0 := @this: org.waveprotocol.wave.client.editor.testing.DocumentFreeSelectionHelper;

        $r1 = r0.<org.waveprotocol.wave.client.editor.testing.DocumentFreeSelectionHelper: org.waveprotocol.wave.model.document.util.FocusedRange selection>;

        if $r1 == null goto label1;

        $r2 = r0.<org.waveprotocol.wave.client.editor.testing.DocumentFreeSelectionHelper: org.waveprotocol.wave.model.document.util.FocusedRange selection>;

        $r3 = virtualinvoke $r2.<org.waveprotocol.wave.model.document.util.FocusedRange: org.waveprotocol.wave.model.document.util.Range asRange()>();

        goto label2;

     label1:
        $r3 = null;

     label2:
        return $r3;
    }

    public void setSelectionRange(org.waveprotocol.wave.model.document.util.FocusedRange)
    {
        org.waveprotocol.wave.client.editor.testing.DocumentFreeSelectionHelper r0;
        org.waveprotocol.wave.model.document.util.FocusedRange r1;

        r0 := @this: org.waveprotocol.wave.client.editor.testing.DocumentFreeSelectionHelper;

        r1 := @parameter0: org.waveprotocol.wave.model.document.util.FocusedRange;

        r0.<org.waveprotocol.wave.client.editor.testing.DocumentFreeSelectionHelper: org.waveprotocol.wave.model.document.util.FocusedRange selection> = r1;

        return;
    }

    public org.waveprotocol.wave.model.document.util.Point getFirstValidSelectionPoint()
    {
        java.lang.UnsupportedOperationException $r0;
        org.waveprotocol.wave.client.editor.testing.DocumentFreeSelectionHelper r1;

        r1 := @this: org.waveprotocol.wave.client.editor.testing.DocumentFreeSelectionHelper;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("DocumentFree SelectionHelper has no document content");

        throw $r0;
    }

    public org.waveprotocol.wave.model.document.util.Point getLastValidSelectionPoint()
    {
        java.lang.UnsupportedOperationException $r0;
        org.waveprotocol.wave.client.editor.testing.DocumentFreeSelectionHelper r1;

        r1 := @this: org.waveprotocol.wave.client.editor.testing.DocumentFreeSelectionHelper;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("DocumentFree SelectionHelper has no document content");

        throw $r0;
    }

    public org.waveprotocol.wave.client.editor.content.FocusedContentRange getSelectionPoints()
    {
        java.lang.UnsupportedOperationException $r0;
        org.waveprotocol.wave.client.editor.testing.DocumentFreeSelectionHelper r1;

        r1 := @this: org.waveprotocol.wave.client.editor.testing.DocumentFreeSelectionHelper;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("DocumentFree SelectionHelper has no document content");

        throw $r0;
    }

    public org.waveprotocol.wave.client.editor.content.ContentRange getOrderedSelectionPoints()
    {
        java.lang.UnsupportedOperationException $r0;
        org.waveprotocol.wave.client.editor.testing.DocumentFreeSelectionHelper r1;

        r1 := @this: org.waveprotocol.wave.client.editor.testing.DocumentFreeSelectionHelper;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("DocumentFree SelectionHelper has no document content");

        throw $r0;
    }

    public boolean isValidSelectionPoint(org.waveprotocol.wave.model.document.util.Point)
    {
        java.lang.UnsupportedOperationException $r0;
        org.waveprotocol.wave.client.editor.testing.DocumentFreeSelectionHelper r1;
        org.waveprotocol.wave.model.document.util.Point r2;

        r1 := @this: org.waveprotocol.wave.client.editor.testing.DocumentFreeSelectionHelper;

        r2 := @parameter0: org.waveprotocol.wave.model.document.util.Point;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("DocumentFree SelectionHelper has no document content");

        throw $r0;
    }

    public void setCaret(org.waveprotocol.wave.model.document.util.Point)
    {
        java.lang.UnsupportedOperationException $r0;
        org.waveprotocol.wave.client.editor.testing.DocumentFreeSelectionHelper r1;
        org.waveprotocol.wave.model.document.util.Point r2;

        r1 := @this: org.waveprotocol.wave.client.editor.testing.DocumentFreeSelectionHelper;

        r2 := @parameter0: org.waveprotocol.wave.model.document.util.Point;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("DocumentFree SelectionHelper has no document content");

        throw $r0;
    }

    public void setSelectionPoints(org.waveprotocol.wave.model.document.util.Point, org.waveprotocol.wave.model.document.util.Point)
    {
        java.lang.UnsupportedOperationException $r0;
        org.waveprotocol.wave.client.editor.testing.DocumentFreeSelectionHelper r1;
        org.waveprotocol.wave.model.document.util.Point r2, r3;

        r1 := @this: org.waveprotocol.wave.client.editor.testing.DocumentFreeSelectionHelper;

        r2 := @parameter0: org.waveprotocol.wave.model.document.util.Point;

        r3 := @parameter1: org.waveprotocol.wave.model.document.util.Point;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("DocumentFree SelectionHelper has no document content");

        throw $r0;
    }

    public void setCaret(int)
    {
        int i0;
        java.lang.UnsupportedOperationException $r0;
        org.waveprotocol.wave.client.editor.testing.DocumentFreeSelectionHelper r1;

        r1 := @this: org.waveprotocol.wave.client.editor.testing.DocumentFreeSelectionHelper;

        i0 := @parameter0: int;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("DocumentFree SelectionHelper has no document content");

        throw $r0;
    }
}
