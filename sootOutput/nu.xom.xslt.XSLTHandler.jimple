class nu.xom.xslt.XSLTHandler extends java.lang.Object implements org.xml.sax.ContentHandler, org.xml.sax.ext.LexicalHandler
{
    private final nu.xom.Nodes result;
    private final java.util.ArrayList parents;
    private final nu.xom.NodeFactory factory;
    private java.lang.StringBuffer buffer;
    private nu.xom.Element current;
    private org.xml.sax.helpers.AttributesImpl namespaceDeclarations;

    void <init>(nu.xom.NodeFactory)
    {
        nu.xom.xslt.XSLTHandler r0;
        org.xml.sax.helpers.AttributesImpl $r1;
        nu.xom.NodeFactory r2;
        java.lang.StringBuffer $r5;
        nu.xom.Nodes $r3;
        java.util.ArrayList $r4;

        r0 := @this: nu.xom.xslt.XSLTHandler;

        r2 := @parameter0: nu.xom.NodeFactory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new org.xml.sax.helpers.AttributesImpl;

        specialinvoke $r1.<org.xml.sax.helpers.AttributesImpl: void <init>()>();

        r0.<nu.xom.xslt.XSLTHandler: org.xml.sax.helpers.AttributesImpl namespaceDeclarations> = $r1;

        r0.<nu.xom.xslt.XSLTHandler: nu.xom.NodeFactory factory> = r2;

        $r3 = new nu.xom.Nodes;

        specialinvoke $r3.<nu.xom.Nodes: void <init>()>();

        r0.<nu.xom.xslt.XSLTHandler: nu.xom.Nodes result> = $r3;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r0.<nu.xom.xslt.XSLTHandler: java.util.ArrayList parents> = $r4;

        $r5 = new java.lang.StringBuffer;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();

        r0.<nu.xom.xslt.XSLTHandler: java.lang.StringBuffer buffer> = $r5;

        return;
    }

    nu.xom.Nodes getResult()
    {
        nu.xom.xslt.XSLTHandler r0;
        nu.xom.Nodes $r1;

        r0 := @this: nu.xom.xslt.XSLTHandler;

        specialinvoke r0.<nu.xom.xslt.XSLTHandler: void flushText()>();

        $r1 = r0.<nu.xom.xslt.XSLTHandler: nu.xom.Nodes result>;

        return $r1;
    }

    public void setDocumentLocator(org.xml.sax.Locator)
    {
        nu.xom.xslt.XSLTHandler r0;
        org.xml.sax.Locator r1;

        r0 := @this: nu.xom.xslt.XSLTHandler;

        r1 := @parameter0: org.xml.sax.Locator;

        return;
    }

    public void startDocument()
    {
        nu.xom.xslt.XSLTHandler r0;

        r0 := @this: nu.xom.xslt.XSLTHandler;

        return;
    }

    public void endDocument()
    {
        nu.xom.xslt.XSLTHandler r0;

        r0 := @this: nu.xom.xslt.XSLTHandler;

        return;
    }

    public void startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes)
    {
        nu.xom.Node $r23;
        nu.xom.Element $r4;
        java.util.ArrayList $r5, $r6, $r7, $r9;
        nu.xom.Attribute$Type $r20;
        java.lang.StringBuffer $r36, $r37, $r39;
        nu.xom.Nodes $r22;
        java.lang.String r1, r2, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r26, $r27, $r28, $r29, $r30, $r32, $r33, $r38, $r40, $r41, r42, r46;
        nu.xom.ParentNode r45;
        nu.xom.NamespaceConflictException $r31, $r34, $r35;
        nu.xom.xslt.XSLTHandler r0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        org.xml.sax.helpers.AttributesImpl $r10, $r25, r44;
        nu.xom.NodeFactory $r3, $r21;
        int $i0, $i1, $i2, $i3, $i4, i5, i6, i7, i8;
        org.xml.sax.Attributes r43;
        nu.xom.Attribute r24;
        java.lang.Object $r8;

        r0 := @this: nu.xom.xslt.XSLTHandler;

        r2 := @parameter0: java.lang.String;

        r42 := @parameter1: java.lang.String;

        r1 := @parameter2: java.lang.String;

        r43 := @parameter3: org.xml.sax.Attributes;

        specialinvoke r0.<nu.xom.xslt.XSLTHandler: void flushText()>();

        $i0 = interfaceinvoke r43.<org.xml.sax.Attributes: int getLength()>();

        i5 = 0;

     label01:
        if i5 >= $i0 goto label02;

        $r25 = r0.<nu.xom.xslt.XSLTHandler: org.xml.sax.helpers.AttributesImpl namespaceDeclarations>;

        $r26 = interfaceinvoke r43.<org.xml.sax.Attributes: java.lang.String getURI(int)>(i5);

        $r27 = interfaceinvoke r43.<org.xml.sax.Attributes: java.lang.String getLocalName(int)>(i5);

        $r28 = interfaceinvoke r43.<org.xml.sax.Attributes: java.lang.String getQName(int)>(i5);

        $r29 = interfaceinvoke r43.<org.xml.sax.Attributes: java.lang.String getType(int)>(i5);

        $r30 = interfaceinvoke r43.<org.xml.sax.Attributes: java.lang.String getValue(int)>(i5);

        virtualinvoke $r25.<org.xml.sax.helpers.AttributesImpl: void addAttribute(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r26, $r27, $r28, $r29, $r30);

        i5 = i5 + 1;

        goto label01;

     label02:
        r44 = r0.<nu.xom.xslt.XSLTHandler: org.xml.sax.helpers.AttributesImpl namespaceDeclarations>;

        $r3 = r0.<nu.xom.xslt.XSLTHandler: nu.xom.NodeFactory factory>;

        $r4 = virtualinvoke $r3.<nu.xom.NodeFactory: nu.xom.Element startMakingElement(java.lang.String,java.lang.String)>(r1, r2);

        $r5 = r0.<nu.xom.xslt.XSLTHandler: java.util.ArrayList parents>;

        $z0 = virtualinvoke $r5.<java.util.ArrayList: boolean isEmpty()>();

        if $z0 == 0 goto label03;

        r0.<nu.xom.xslt.XSLTHandler: nu.xom.Element current> = $r4;

        goto label04;

     label03:
        $r7 = r0.<nu.xom.xslt.XSLTHandler: java.util.ArrayList parents>;

        $r6 = r0.<nu.xom.xslt.XSLTHandler: java.util.ArrayList parents>;

        $i1 = virtualinvoke $r6.<java.util.ArrayList: int size()>();

        $i2 = $i1 - 1;

        $r8 = virtualinvoke $r7.<java.util.ArrayList: java.lang.Object get(int)>($i2);

        r45 = (nu.xom.ParentNode) $r8;

        virtualinvoke r45.<nu.xom.ParentNode: void appendChild(nu.xom.Node)>($r4);

     label04:
        $r9 = r0.<nu.xom.xslt.XSLTHandler: java.util.ArrayList parents>;

        virtualinvoke $r9.<java.util.ArrayList: boolean add(java.lang.Object)>($r4);

        $i3 = interfaceinvoke r44.<org.xml.sax.Attributes: int getLength()>();

        i6 = 0;

     label05:
        if i6 >= $i3 goto label15;

        $r17 = interfaceinvoke r44.<org.xml.sax.Attributes: java.lang.String getQName(int)>(i6);

        $z5 = virtualinvoke $r17.<java.lang.String: boolean equals(java.lang.Object)>("xmlns");

        if $z5 != 0 goto label14;

        $z6 = virtualinvoke $r17.<java.lang.String: boolean startsWith(java.lang.String)>("xmlns:");

        if $z6 == 0 goto label06;

        goto label14;

     label06:
        $r18 = interfaceinvoke r44.<org.xml.sax.Attributes: java.lang.String getURI(int)>(i6);

        $r19 = interfaceinvoke r44.<org.xml.sax.Attributes: java.lang.String getValue(int)>(i6);

        $r21 = r0.<nu.xom.xslt.XSLTHandler: nu.xom.NodeFactory factory>;

        $r20 = <nu.xom.Attribute$Type: nu.xom.Attribute$Type UNDECLARED>;

        $r22 = virtualinvoke $r21.<nu.xom.NodeFactory: nu.xom.Nodes makeAttribute(java.lang.String,java.lang.String,java.lang.String,nu.xom.Attribute$Type)>($r17, $r18, $r19, $r20);

        $i4 = virtualinvoke $r22.<nu.xom.Nodes: int size()>();

        i7 = 0;

     label07:
        if i7 >= $i4 goto label14;

        $r23 = virtualinvoke $r22.<nu.xom.Nodes: nu.xom.Node get(int)>(i7);

        $z7 = $r23 instanceof nu.xom.Attribute;

        if $z7 == 0 goto label12;

        r24 = (nu.xom.Attribute) $r23;

     label08:
        virtualinvoke $r4.<nu.xom.Element: void addAttribute(nu.xom.Attribute)>(r24);

     label09:
        goto label11;

     label10:
        $r35 := @caughtexception;

        $r36 = new java.lang.StringBuffer;

        specialinvoke $r36.<java.lang.StringBuffer: void <init>()>();

        $r37 = virtualinvoke $r36.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("p");

        $r38 = virtualinvoke r24.<nu.xom.Attribute: java.lang.String getNamespacePrefix()>();

        $r39 = virtualinvoke $r37.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r38);

        $r40 = virtualinvoke $r39.<java.lang.StringBuffer: java.lang.String toString()>();

        $r41 = virtualinvoke r24.<nu.xom.Attribute: java.lang.String getNamespaceURI()>();

        virtualinvoke r24.<nu.xom.Attribute: void setNamespace(java.lang.String,java.lang.String)>($r40, $r41);

        goto label08;

     label11:
        goto label13;

     label12:
        virtualinvoke $r4.<nu.xom.Element: void appendChild(nu.xom.Node)>($r23);

     label13:
        i7 = i7 + 1;

        goto label07;

     label14:
        i6 = i6 + 1;

        goto label05;

     label15:
        i8 = 0;

     label16:
        if i8 >= $i3 goto label27;

        $r11 = interfaceinvoke r44.<org.xml.sax.Attributes: java.lang.String getQName(int)>(i8);

        $z1 = virtualinvoke $r11.<java.lang.String: boolean startsWith(java.lang.String)>("xmlns:");

        if $z1 == 0 goto label21;

        $r14 = interfaceinvoke r44.<org.xml.sax.Attributes: java.lang.String getValue(int)>(i8);

        $r15 = virtualinvoke $r11.<java.lang.String: java.lang.String substring(int)>(6);

        $r16 = virtualinvoke $r4.<nu.xom.Element: java.lang.String getNamespaceURI(java.lang.String)>($r15);

        $z4 = virtualinvoke $r14.<java.lang.String: boolean equals(java.lang.Object)>($r16);

        if $z4 != 0 goto label20;

     label17:
        virtualinvoke $r4.<nu.xom.Element: void addNamespaceDeclaration(java.lang.String,java.lang.String)>($r15, $r14);

     label18:
        goto label20;

     label19:
        $r34 := @caughtexception;

     label20:
        goto label26;

     label21:
        $z2 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>("xmlns");

        if $z2 == 0 goto label26;

        $r12 = interfaceinvoke r44.<org.xml.sax.Attributes: java.lang.String getValue(int)>(i8);

        r46 = $r12;

        if $r12 != null goto label22;

        r46 = "";

     label22:
        $r13 = virtualinvoke $r4.<nu.xom.Element: java.lang.String getNamespaceURI(java.lang.String)>("");

        $z3 = virtualinvoke r46.<java.lang.String: boolean equals(java.lang.Object)>($r13);

        if $z3 != 0 goto label26;

     label23:
        virtualinvoke $r4.<nu.xom.Element: void addNamespaceDeclaration(java.lang.String,java.lang.String)>("", r46);

     label24:
        goto label26;

     label25:
        $r31 := @caughtexception;

        $r32 = "http://www.w3.org/XML/1998/namespace";

        $z8 = virtualinvoke $r32.<java.lang.String: boolean equals(java.lang.Object)>(r46);

        if $z8 == 0 goto label26;

        $r33 = "";

        $z9 = virtualinvoke $r33.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z9 == 0 goto label26;

        virtualinvoke $r4.<nu.xom.Element: void addNamespaceDeclaration(java.lang.String,java.lang.String)>("", "");

     label26:
        i8 = i8 + 1;

        goto label16;

     label27:
        $r10 = new org.xml.sax.helpers.AttributesImpl;

        specialinvoke $r10.<org.xml.sax.helpers.AttributesImpl: void <init>()>();

        r0.<nu.xom.xslt.XSLTHandler: org.xml.sax.helpers.AttributesImpl namespaceDeclarations> = $r10;

        return;

        catch nu.xom.NamespaceConflictException from label08 to label09 with label10;
        catch nu.xom.NamespaceConflictException from label17 to label18 with label19;
        catch nu.xom.NamespaceConflictException from label23 to label24 with label25;
    }

    public void endElement(java.lang.String, java.lang.String, java.lang.String)
    {
        nu.xom.xslt.XSLTHandler r0;
        nu.xom.Element r4, $r11, $r12;
        java.util.ArrayList $r1, $r2, $r5;
        int $i0, $i1, $i2, $i3, i4, i5;
        nu.xom.Nodes $r7, $r14, $r15;
        nu.xom.ParentNode $r8;
        java.lang.String r17, r18, r19;
        boolean $z0, $z1;
        nu.xom.Node $r9, $r16;
        nu.xom.Attribute $r10;
        nu.xom.NodeFactory $r6, $r13;
        java.lang.Object $r3;

        r0 := @this: nu.xom.xslt.XSLTHandler;

        r17 := @parameter0: java.lang.String;

        r18 := @parameter1: java.lang.String;

        r19 := @parameter2: java.lang.String;

        specialinvoke r0.<nu.xom.xslt.XSLTHandler: void flushText()>();

        $r2 = r0.<nu.xom.xslt.XSLTHandler: java.util.ArrayList parents>;

        $r1 = r0.<nu.xom.xslt.XSLTHandler: java.util.ArrayList parents>;

        $i0 = virtualinvoke $r1.<java.util.ArrayList: int size()>();

        $i1 = $i0 - 1;

        $r3 = virtualinvoke $r2.<java.util.ArrayList: java.lang.Object remove(int)>($i1);

        r4 = (nu.xom.Element) $r3;

        $r5 = r0.<nu.xom.xslt.XSLTHandler: java.util.ArrayList parents>;

        $z0 = virtualinvoke $r5.<java.util.ArrayList: boolean isEmpty()>();

        if $z0 == 0 goto label3;

        $r13 = r0.<nu.xom.xslt.XSLTHandler: nu.xom.NodeFactory factory>;

        $r12 = r0.<nu.xom.xslt.XSLTHandler: nu.xom.Element current>;

        $r14 = virtualinvoke $r13.<nu.xom.NodeFactory: nu.xom.Nodes finishMakingElement(nu.xom.Element)>($r12);

        i4 = 0;

     label1:
        $i3 = virtualinvoke $r14.<nu.xom.Nodes: int size()>();

        if i4 >= $i3 goto label2;

        $r15 = r0.<nu.xom.xslt.XSLTHandler: nu.xom.Nodes result>;

        $r16 = virtualinvoke $r14.<nu.xom.Nodes: nu.xom.Node get(int)>(i4);

        virtualinvoke $r15.<nu.xom.Nodes: void append(nu.xom.Node)>($r16);

        i4 = i4 + 1;

        goto label1;

     label2:
        r0.<nu.xom.xslt.XSLTHandler: nu.xom.Element current> = null;

        goto label7;

     label3:
        $r6 = r0.<nu.xom.xslt.XSLTHandler: nu.xom.NodeFactory factory>;

        $r7 = virtualinvoke $r6.<nu.xom.NodeFactory: nu.xom.Nodes finishMakingElement(nu.xom.Element)>(r4);

        $r8 = virtualinvoke r4.<nu.xom.Element: nu.xom.ParentNode getParent()>();

        virtualinvoke r4.<nu.xom.Element: void detach()>();

        i5 = 0;

     label4:
        $i2 = virtualinvoke $r7.<nu.xom.Nodes: int size()>();

        if i5 >= $i2 goto label7;

        $r9 = virtualinvoke $r7.<nu.xom.Nodes: nu.xom.Node get(int)>(i5);

        $z1 = $r9 instanceof nu.xom.Attribute;

        if $z1 == 0 goto label5;

        $r11 = (nu.xom.Element) $r8;

        $r10 = (nu.xom.Attribute) $r9;

        virtualinvoke $r11.<nu.xom.Element: void addAttribute(nu.xom.Attribute)>($r10);

        goto label6;

     label5:
        virtualinvoke $r8.<nu.xom.ParentNode: void appendChild(nu.xom.Node)>($r9);

     label6:
        i5 = i5 + 1;

        goto label4;

     label7:
        return;
    }

    public void characters(char[], int, int)
    {
        nu.xom.xslt.XSLTHandler r0;
        java.lang.StringBuffer $r2;
        int i0, i1;
        char[] r1;

        r0 := @this: nu.xom.xslt.XSLTHandler;

        r1 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = r0.<nu.xom.xslt.XSLTHandler: java.lang.StringBuffer buffer>;

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(char[],int,int)>(r1, i0, i1);

        return;
    }

    private void flushText()
    {
        nu.xom.xslt.XSLTHandler r0;
        nu.xom.NodeFactory $r3;
        java.lang.StringBuffer $r1, $r2, $r6;
        int $i0;
        nu.xom.Nodes $r5;
        java.lang.String $r4;

        r0 := @this: nu.xom.xslt.XSLTHandler;

        $r1 = r0.<nu.xom.xslt.XSLTHandler: java.lang.StringBuffer buffer>;

        $i0 = virtualinvoke $r1.<java.lang.StringBuffer: int length()>();

        if $i0 <= 0 goto label1;

        $r3 = r0.<nu.xom.xslt.XSLTHandler: nu.xom.NodeFactory factory>;

        $r2 = r0.<nu.xom.xslt.XSLTHandler: java.lang.StringBuffer buffer>;

        $r4 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String toString()>();

        $r5 = virtualinvoke $r3.<nu.xom.NodeFactory: nu.xom.Nodes makeText(java.lang.String)>($r4);

        specialinvoke r0.<nu.xom.xslt.XSLTHandler: void addToResultTree(nu.xom.Nodes)>($r5);

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        r0.<nu.xom.xslt.XSLTHandler: java.lang.StringBuffer buffer> = $r6;

     label1:
        return;
    }

    public void ignorableWhitespace(char[], int, int)
    {
        nu.xom.xslt.XSLTHandler r0;
        int i0, i1;
        char[] r1;

        r0 := @this: nu.xom.xslt.XSLTHandler;

        r1 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        virtualinvoke r0.<nu.xom.xslt.XSLTHandler: void characters(char[],int,int)>(r1, i0, i1);

        return;
    }

    public void processingInstruction(java.lang.String, java.lang.String) throws org.xml.sax.SAXException
    {
        nu.xom.xslt.XSLTHandler r4;
        java.lang.StringBuffer $r9, $r10, $r12, $r17;
        int $i0, i1, $i3;
        nu.xom.Nodes $r6;
        java.lang.String r0, $r1, $r2, $r3, $r8, $r11, $r13, r15;
        boolean $z0, $z1, $z2;
        nu.xom.NodeFactory $r5;
        org.xml.sax.SAXException $r16;

        r4 := @this: nu.xom.xslt.XSLTHandler;

        r0 := @parameter0: java.lang.String;

        r15 := @parameter1: java.lang.String;

        $r1 = "saxon:warning";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z0 == 0 goto label1;

        $r16 = new org.xml.sax.SAXException;

        specialinvoke $r16.<org.xml.sax.SAXException: void <init>(java.lang.String)>("continue");

        throw $r16;

     label1:
        $r2 = "javax.xml.transform.disable-output-escaping";

        $z1 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z1 != 0 goto label2;

        $r3 = "javax.xml.transform.enable-output-escaping";

        $z2 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z2 == 0 goto label3;

     label2:
        return;

     label3:
        specialinvoke r4.<nu.xom.xslt.XSLTHandler: void flushText()>();

        i1 = virtualinvoke r15.<java.lang.String: int indexOf(java.lang.String)>("?>");

     label4:
        $i3 = (int) -1;

        if i1 == $i3 goto label5;

        $r17 = new java.lang.StringBuffer;

        specialinvoke $r17.<java.lang.StringBuffer: void <init>()>();

        $r8 = virtualinvoke r15.<java.lang.String: java.lang.String substring(int,int)>(0, i1);

        $r9 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("? >");

        $i0 = i1 + 2;

        $r11 = virtualinvoke r15.<java.lang.String: java.lang.String substring(int)>($i0);

        $r12 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>();

        r15 = $r13;

        i1 = virtualinvoke $r13.<java.lang.String: int indexOf(java.lang.String)>("?>");

        goto label4;

     label5:
        $r5 = r4.<nu.xom.xslt.XSLTHandler: nu.xom.NodeFactory factory>;

        $r6 = virtualinvoke $r5.<nu.xom.NodeFactory: nu.xom.Nodes makeProcessingInstruction(java.lang.String,java.lang.String)>(r0, r15);

        specialinvoke r4.<nu.xom.xslt.XSLTHandler: void addToResultTree(nu.xom.Nodes)>($r6);

        return;
    }

    private void addToResultTree(nu.xom.Nodes)
    {
        nu.xom.xslt.XSLTHandler r0;
        nu.xom.Element $r8;
        java.util.ArrayList $r1, $r2, $r3;
        int $i0, $i1, $i2, $i3, i4, i5;
        nu.xom.Nodes r5, $r9;
        nu.xom.ParentNode r11;
        boolean $z0, $z1;
        nu.xom.Node $r6, $r10;
        nu.xom.Attribute $r7;
        java.lang.Object $r4;

        r0 := @this: nu.xom.xslt.XSLTHandler;

        r5 := @parameter0: nu.xom.Nodes;

        $r1 = r0.<nu.xom.xslt.XSLTHandler: java.util.ArrayList parents>;

        $z0 = virtualinvoke $r1.<java.util.ArrayList: boolean isEmpty()>();

        if $z0 == 0 goto label3;

        i4 = 0;

     label1:
        $i3 = virtualinvoke r5.<nu.xom.Nodes: int size()>();

        if i4 >= $i3 goto label2;

        $r9 = r0.<nu.xom.xslt.XSLTHandler: nu.xom.Nodes result>;

        $r10 = virtualinvoke r5.<nu.xom.Nodes: nu.xom.Node get(int)>(i4);

        virtualinvoke $r9.<nu.xom.Nodes: void append(nu.xom.Node)>($r10);

        i4 = i4 + 1;

        goto label1;

     label2:
        goto label7;

     label3:
        $r3 = r0.<nu.xom.xslt.XSLTHandler: java.util.ArrayList parents>;

        $r2 = r0.<nu.xom.xslt.XSLTHandler: java.util.ArrayList parents>;

        $i0 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

        $i1 = $i0 - 1;

        $r4 = virtualinvoke $r3.<java.util.ArrayList: java.lang.Object get(int)>($i1);

        r11 = (nu.xom.ParentNode) $r4;

        i5 = 0;

     label4:
        $i2 = virtualinvoke r5.<nu.xom.Nodes: int size()>();

        if i5 >= $i2 goto label7;

        $r6 = virtualinvoke r5.<nu.xom.Nodes: nu.xom.Node get(int)>(i5);

        $z1 = $r6 instanceof nu.xom.Attribute;

        if $z1 == 0 goto label5;

        $r8 = (nu.xom.Element) r11;

        $r7 = (nu.xom.Attribute) $r6;

        virtualinvoke $r8.<nu.xom.Element: void addAttribute(nu.xom.Attribute)>($r7);

        goto label6;

     label5:
        virtualinvoke r11.<nu.xom.ParentNode: void appendChild(nu.xom.Node)>($r6);

     label6:
        i5 = i5 + 1;

        goto label4;

     label7:
        return;
    }

    public void endPrefixMapping(java.lang.String)
    {
        nu.xom.xslt.XSLTHandler r0;
        java.lang.String r1;

        r0 := @this: nu.xom.xslt.XSLTHandler;

        r1 := @parameter0: java.lang.String;

        return;
    }

    public void startPrefixMapping(java.lang.String, java.lang.String)
    {
        nu.xom.xslt.XSLTHandler r2;
        org.xml.sax.helpers.AttributesImpl $r4, $r13;
        java.lang.StringBuffer $r3, $r5, $r6, $r8, $r9, $r10;
        java.lang.String r0, $r1, $r7, $r11, r12;
        boolean $z0;

        r2 := @this: nu.xom.xslt.XSLTHandler;

        r0 := @parameter0: java.lang.String;

        r12 := @parameter1: java.lang.String;

        $r1 = "";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z0 == 0 goto label1;

        $r13 = r2.<nu.xom.xslt.XSLTHandler: org.xml.sax.helpers.AttributesImpl namespaceDeclarations>;

        virtualinvoke $r13.<org.xml.sax.helpers.AttributesImpl: void addAttribute(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>("", "xmlns", "xmlns", "CDATA", r12);

        goto label2;

     label1:
        $r4 = r2.<nu.xom.xslt.XSLTHandler: org.xml.sax.helpers.AttributesImpl namespaceDeclarations>;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("xmlns:");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        $r8 = new java.lang.StringBuffer;

        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("xmlns:");

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r0);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r4.<org.xml.sax.helpers.AttributesImpl: void addAttribute(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>("", $r7, $r11, "CDATA", r12);

     label2:
        return;
    }

    public void skippedEntity(java.lang.String)
    {
        nu.xom.xslt.XSLTHandler r0;
        java.lang.StringBuffer $r2, $r3, $r5;
        nu.xom.XMLException $r1;
        java.lang.String r4, $r6;

        r0 := @this: nu.xom.xslt.XSLTHandler;

        r4 := @parameter0: java.lang.String;

        specialinvoke r0.<nu.xom.xslt.XSLTHandler: void flushText()>();

        $r1 = new nu.xom.XMLException;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Could not resolve entity ");

        $r5 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r1.<nu.xom.XMLException: void <init>(java.lang.String)>($r6);

        throw $r1;
    }

    public void startCDATA()
    {
        nu.xom.xslt.XSLTHandler r0;

        r0 := @this: nu.xom.xslt.XSLTHandler;

        return;
    }

    public void endCDATA()
    {
        nu.xom.xslt.XSLTHandler r0;

        r0 := @this: nu.xom.xslt.XSLTHandler;

        return;
    }

    public void startDTD(java.lang.String, java.lang.String, java.lang.String)
    {
        nu.xom.xslt.XSLTHandler r0;
        java.lang.String r1, r2, r3;

        r0 := @this: nu.xom.xslt.XSLTHandler;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        return;
    }

    public void endDTD()
    {
        nu.xom.xslt.XSLTHandler r0;

        r0 := @this: nu.xom.xslt.XSLTHandler;

        return;
    }

    public void startEntity(java.lang.String)
    {
        nu.xom.xslt.XSLTHandler r0;
        java.lang.String r1;

        r0 := @this: nu.xom.xslt.XSLTHandler;

        r1 := @parameter0: java.lang.String;

        return;
    }

    public void endEntity(java.lang.String)
    {
        nu.xom.xslt.XSLTHandler r0;
        java.lang.String r1;

        r0 := @this: nu.xom.xslt.XSLTHandler;

        r1 := @parameter0: java.lang.String;

        return;
    }

    public void comment(char[], int, int)
    {
        nu.xom.xslt.XSLTHandler r0;
        java.lang.StringBuffer $r6, $r7, $r10, $r11, $r13, $r17, $r18;
        int i0, i1, $i2, i3, $i5;
        nu.xom.Nodes $r4;
        java.lang.String $r9, $r12, $r14, r15, $r16;
        boolean $z0;
        nu.xom.NodeFactory $r3;
        char[] r2;

        r0 := @this: nu.xom.xslt.XSLTHandler;

        r2 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<nu.xom.xslt.XSLTHandler: void flushText()>();

        $r16 = new java.lang.String;

        specialinvoke $r16.<java.lang.String: void <init>(char[],int,int)>(r2, i0, i1);

        r15 = $r16;

        i3 = virtualinvoke $r16.<java.lang.String: int indexOf(java.lang.String)>("--");

     label1:
        $i5 = (int) -1;

        if i3 == $i5 goto label2;

        $r17 = new java.lang.StringBuffer;

        specialinvoke $r17.<java.lang.StringBuffer: void <init>()>();

        $r9 = virtualinvoke r15.<java.lang.String: java.lang.String substring(int,int)>(0, i3);

        $r10 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("- -");

        $i2 = i3 + 2;

        $r12 = virtualinvoke r15.<java.lang.String: java.lang.String substring(int)>($i2);

        $r13 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.String toString()>();

        r15 = $r14;

        i3 = virtualinvoke $r14.<java.lang.String: int indexOf(java.lang.String)>("--");

        goto label1;

     label2:
        $z0 = virtualinvoke r15.<java.lang.String: boolean endsWith(java.lang.String)>("-");

        if $z0 == 0 goto label3;

        $r18 = new java.lang.StringBuffer;

        specialinvoke $r18.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r15);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(32);

        r15 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

     label3:
        $r3 = r0.<nu.xom.xslt.XSLTHandler: nu.xom.NodeFactory factory>;

        $r4 = virtualinvoke $r3.<nu.xom.NodeFactory: nu.xom.Nodes makeComment(java.lang.String)>(r15);

        specialinvoke r0.<nu.xom.xslt.XSLTHandler: void addToResultTree(nu.xom.Nodes)>($r4);

        return;
    }
}
