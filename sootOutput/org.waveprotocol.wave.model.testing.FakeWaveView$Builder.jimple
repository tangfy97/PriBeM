public final class org.waveprotocol.wave.model.testing.FakeWaveView$Builder extends java.lang.Object
{
    private final org.waveprotocol.wave.model.schema.SchemaProvider schemas;
    private org.waveprotocol.wave.model.id.IdGenerator idGenerator;
    private org.waveprotocol.wave.model.id.WaveId waveId;
    private org.waveprotocol.wave.model.wave.ParticipantId viewer;
    private org.waveprotocol.wave.model.operation.SilentOperationSink sink;
    private org.waveprotocol.wave.model.wave.opbased.WaveViewImpl$WaveletConfigurator configurator;
    private org.waveprotocol.wave.model.wave.data.DocumentFactory docFactory;

    private void <init>(org.waveprotocol.wave.model.schema.SchemaProvider)
    {
        org.waveprotocol.wave.model.schema.SchemaProvider r1;
        org.waveprotocol.wave.model.testing.FakeWaveView$Builder r0;

        r0 := @this: org.waveprotocol.wave.model.testing.FakeWaveView$Builder;

        r1 := @parameter0: org.waveprotocol.wave.model.schema.SchemaProvider;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.waveprotocol.wave.model.testing.FakeWaveView$Builder: org.waveprotocol.wave.model.schema.SchemaProvider schemas> = r1;

        return;
    }

    public org.waveprotocol.wave.model.testing.FakeWaveView$Builder 'with'(org.waveprotocol.wave.model.wave.data.DocumentFactory)
    {
        org.waveprotocol.wave.model.testing.FakeWaveView$Builder r0;
        org.waveprotocol.wave.model.wave.data.DocumentFactory r1;

        r0 := @this: org.waveprotocol.wave.model.testing.FakeWaveView$Builder;

        r1 := @parameter0: org.waveprotocol.wave.model.wave.data.DocumentFactory;

        r0.<org.waveprotocol.wave.model.testing.FakeWaveView$Builder: org.waveprotocol.wave.model.wave.data.DocumentFactory docFactory> = r1;

        return r0;
    }

    public org.waveprotocol.wave.model.testing.FakeWaveView$Builder 'with'(org.waveprotocol.wave.model.id.IdGenerator)
    {
        org.waveprotocol.wave.model.testing.FakeWaveView$Builder r0;
        org.waveprotocol.wave.model.id.IdGenerator r1;

        r0 := @this: org.waveprotocol.wave.model.testing.FakeWaveView$Builder;

        r1 := @parameter0: org.waveprotocol.wave.model.id.IdGenerator;

        r0.<org.waveprotocol.wave.model.testing.FakeWaveView$Builder: org.waveprotocol.wave.model.id.IdGenerator idGenerator> = r1;

        return r0;
    }

    public org.waveprotocol.wave.model.testing.FakeWaveView$Builder 'with'(org.waveprotocol.wave.model.id.WaveId)
    {
        org.waveprotocol.wave.model.testing.FakeWaveView$Builder r0;
        org.waveprotocol.wave.model.id.WaveId r1;

        r0 := @this: org.waveprotocol.wave.model.testing.FakeWaveView$Builder;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveId;

        r0.<org.waveprotocol.wave.model.testing.FakeWaveView$Builder: org.waveprotocol.wave.model.id.WaveId waveId> = r1;

        return r0;
    }

    public org.waveprotocol.wave.model.testing.FakeWaveView$Builder 'with'(org.waveprotocol.wave.model.wave.ParticipantId)
    {
        org.waveprotocol.wave.model.testing.FakeWaveView$Builder r0;
        org.waveprotocol.wave.model.wave.ParticipantId r1;

        r0 := @this: org.waveprotocol.wave.model.testing.FakeWaveView$Builder;

        r1 := @parameter0: org.waveprotocol.wave.model.wave.ParticipantId;

        r0.<org.waveprotocol.wave.model.testing.FakeWaveView$Builder: org.waveprotocol.wave.model.wave.ParticipantId viewer> = r1;

        return r0;
    }

    public org.waveprotocol.wave.model.testing.FakeWaveView$Builder 'with'(org.waveprotocol.wave.model.operation.SilentOperationSink)
    {
        org.waveprotocol.wave.model.operation.SilentOperationSink r1;
        org.waveprotocol.wave.model.testing.FakeWaveView$Builder r0;

        r0 := @this: org.waveprotocol.wave.model.testing.FakeWaveView$Builder;

        r1 := @parameter0: org.waveprotocol.wave.model.operation.SilentOperationSink;

        r0.<org.waveprotocol.wave.model.testing.FakeWaveView$Builder: org.waveprotocol.wave.model.operation.SilentOperationSink sink> = r1;

        return r0;
    }

    public org.waveprotocol.wave.model.testing.FakeWaveView$Builder 'with'(org.waveprotocol.wave.model.wave.opbased.WaveViewImpl$WaveletConfigurator)
    {
        org.waveprotocol.wave.model.testing.FakeWaveView$Builder r0;
        org.waveprotocol.wave.model.wave.opbased.WaveViewImpl$WaveletConfigurator r1;

        r0 := @this: org.waveprotocol.wave.model.testing.FakeWaveView$Builder;

        r1 := @parameter0: org.waveprotocol.wave.model.wave.opbased.WaveViewImpl$WaveletConfigurator;

        r0.<org.waveprotocol.wave.model.testing.FakeWaveView$Builder: org.waveprotocol.wave.model.wave.opbased.WaveViewImpl$WaveletConfigurator configurator> = r1;

        return r0;
    }

    public org.waveprotocol.wave.model.testing.FakeWaveView build()
    {
        org.waveprotocol.wave.model.testing.OpBasedWaveletFactory $r16;
        org.waveprotocol.wave.model.wave.data.impl.WaveletDataImpl$Factory $r10;
        org.waveprotocol.wave.model.testing.FakeWaveView $r22;
        org.waveprotocol.wave.model.wave.ParticipantId $r3, $r14, $r18, $r27;
        org.waveprotocol.wave.model.testing.FakeDocument$Factory $r24;
        org.waveprotocol.wave.model.testing.FakeWaveView$Builder r0;
        org.waveprotocol.wave.model.wave.data.DocumentFactory $r6, $r9;
        org.waveprotocol.wave.model.testing.OpBasedWaveletFactory$Builder $r8, $r11, $r13, $r15;
        org.waveprotocol.wave.model.id.WaveId $r2, $r20, $r29;
        org.waveprotocol.wave.model.wave.opbased.WaveViewImpl$WaveletConfigurator $r5, $r17, $r25;
        org.waveprotocol.wave.model.wave.opbased.WaveViewImpl $r21;
        org.waveprotocol.wave.model.id.IdGenerator $r1, $r19, $r28, $r30;
        org.waveprotocol.wave.model.operation.SilentOperationSink $r4, $r12, $r26;
        org.waveprotocol.wave.model.schema.SchemaProvider $r7, $r23;

        r0 := @this: org.waveprotocol.wave.model.testing.FakeWaveView$Builder;

        $r1 = r0.<org.waveprotocol.wave.model.testing.FakeWaveView$Builder: org.waveprotocol.wave.model.id.IdGenerator idGenerator>;

        if $r1 != null goto label1;

        $r30 = staticinvoke <org.waveprotocol.wave.model.testing.FakeIdGenerator: org.waveprotocol.wave.model.id.IdGenerator create()>();

        r0.<org.waveprotocol.wave.model.testing.FakeWaveView$Builder: org.waveprotocol.wave.model.id.IdGenerator idGenerator> = $r30;

     label1:
        $r2 = r0.<org.waveprotocol.wave.model.testing.FakeWaveView$Builder: org.waveprotocol.wave.model.id.WaveId waveId>;

        if $r2 != null goto label2;

        $r28 = r0.<org.waveprotocol.wave.model.testing.FakeWaveView$Builder: org.waveprotocol.wave.model.id.IdGenerator idGenerator>;

        $r29 = interfaceinvoke $r28.<org.waveprotocol.wave.model.id.IdGenerator: org.waveprotocol.wave.model.id.WaveId newWaveId()>();

        r0.<org.waveprotocol.wave.model.testing.FakeWaveView$Builder: org.waveprotocol.wave.model.id.WaveId waveId> = $r29;

     label2:
        $r3 = r0.<org.waveprotocol.wave.model.testing.FakeWaveView$Builder: org.waveprotocol.wave.model.wave.ParticipantId viewer>;

        if $r3 != null goto label3;

        $r27 = staticinvoke <org.waveprotocol.wave.model.testing.FakeWaveView: org.waveprotocol.wave.model.wave.ParticipantId access$000()>();

        r0.<org.waveprotocol.wave.model.testing.FakeWaveView$Builder: org.waveprotocol.wave.model.wave.ParticipantId viewer> = $r27;

     label3:
        $r4 = r0.<org.waveprotocol.wave.model.testing.FakeWaveView$Builder: org.waveprotocol.wave.model.operation.SilentOperationSink sink>;

        if $r4 != null goto label4;

        $r26 = <org.waveprotocol.wave.model.operation.SilentOperationSink: org.waveprotocol.wave.model.operation.SilentOperationSink VOID>;

        r0.<org.waveprotocol.wave.model.testing.FakeWaveView$Builder: org.waveprotocol.wave.model.operation.SilentOperationSink sink> = $r26;

     label4:
        $r5 = r0.<org.waveprotocol.wave.model.testing.FakeWaveView$Builder: org.waveprotocol.wave.model.wave.opbased.WaveViewImpl$WaveletConfigurator configurator>;

        if $r5 != null goto label5;

        $r25 = <org.waveprotocol.wave.model.wave.opbased.WaveViewImpl$WaveletConfigurator: org.waveprotocol.wave.model.wave.opbased.WaveViewImpl$WaveletConfigurator ADD_CREATOR>;

        r0.<org.waveprotocol.wave.model.testing.FakeWaveView$Builder: org.waveprotocol.wave.model.wave.opbased.WaveViewImpl$WaveletConfigurator configurator> = $r25;

     label5:
        $r6 = r0.<org.waveprotocol.wave.model.testing.FakeWaveView$Builder: org.waveprotocol.wave.model.wave.data.DocumentFactory docFactory>;

        if $r6 != null goto label6;

        $r23 = r0.<org.waveprotocol.wave.model.testing.FakeWaveView$Builder: org.waveprotocol.wave.model.schema.SchemaProvider schemas>;

        $r24 = staticinvoke <org.waveprotocol.wave.model.testing.FakeDocument$Factory: org.waveprotocol.wave.model.testing.FakeDocument$Factory create(org.waveprotocol.wave.model.schema.SchemaProvider)>($r23);

        r0.<org.waveprotocol.wave.model.testing.FakeWaveView$Builder: org.waveprotocol.wave.model.wave.data.DocumentFactory docFactory> = $r24;

     label6:
        $r7 = r0.<org.waveprotocol.wave.model.testing.FakeWaveView$Builder: org.waveprotocol.wave.model.schema.SchemaProvider schemas>;

        $r8 = staticinvoke <org.waveprotocol.wave.model.testing.OpBasedWaveletFactory: org.waveprotocol.wave.model.testing.OpBasedWaveletFactory$Builder builder(org.waveprotocol.wave.model.schema.SchemaProvider)>($r7);

        $r9 = r0.<org.waveprotocol.wave.model.testing.FakeWaveView$Builder: org.waveprotocol.wave.model.wave.data.DocumentFactory docFactory>;

        $r10 = staticinvoke <org.waveprotocol.wave.model.wave.data.impl.WaveletDataImpl$Factory: org.waveprotocol.wave.model.wave.data.impl.WaveletDataImpl$Factory create(org.waveprotocol.wave.model.wave.data.DocumentFactory)>($r9);

        $r11 = virtualinvoke $r8.<org.waveprotocol.wave.model.testing.OpBasedWaveletFactory$Builder: org.waveprotocol.wave.model.testing.OpBasedWaveletFactory$Builder 'with'(org.waveprotocol.wave.model.wave.data.ObservableWaveletData$Factory)>($r10);

        $r12 = r0.<org.waveprotocol.wave.model.testing.FakeWaveView$Builder: org.waveprotocol.wave.model.operation.SilentOperationSink sink>;

        $r13 = virtualinvoke $r11.<org.waveprotocol.wave.model.testing.OpBasedWaveletFactory$Builder: org.waveprotocol.wave.model.testing.OpBasedWaveletFactory$Builder 'with'(org.waveprotocol.wave.model.operation.SilentOperationSink)>($r12);

        $r14 = r0.<org.waveprotocol.wave.model.testing.FakeWaveView$Builder: org.waveprotocol.wave.model.wave.ParticipantId viewer>;

        $r15 = virtualinvoke $r13.<org.waveprotocol.wave.model.testing.OpBasedWaveletFactory$Builder: org.waveprotocol.wave.model.testing.OpBasedWaveletFactory$Builder 'with'(org.waveprotocol.wave.model.wave.ParticipantId)>($r14);

        $r16 = virtualinvoke $r15.<org.waveprotocol.wave.model.testing.OpBasedWaveletFactory$Builder: org.waveprotocol.wave.model.testing.OpBasedWaveletFactory build()>();

        $r20 = r0.<org.waveprotocol.wave.model.testing.FakeWaveView$Builder: org.waveprotocol.wave.model.id.WaveId waveId>;

        $r19 = r0.<org.waveprotocol.wave.model.testing.FakeWaveView$Builder: org.waveprotocol.wave.model.id.IdGenerator idGenerator>;

        $r18 = r0.<org.waveprotocol.wave.model.testing.FakeWaveView$Builder: org.waveprotocol.wave.model.wave.ParticipantId viewer>;

        $r17 = r0.<org.waveprotocol.wave.model.testing.FakeWaveView$Builder: org.waveprotocol.wave.model.wave.opbased.WaveViewImpl$WaveletConfigurator configurator>;

        $r21 = staticinvoke <org.waveprotocol.wave.model.wave.opbased.WaveViewImpl: org.waveprotocol.wave.model.wave.opbased.WaveViewImpl create(org.waveprotocol.wave.model.wave.opbased.WaveViewImpl$WaveletFactory,org.waveprotocol.wave.model.id.WaveId,org.waveprotocol.wave.model.id.IdGenerator,org.waveprotocol.wave.model.wave.ParticipantId,org.waveprotocol.wave.model.wave.opbased.WaveViewImpl$WaveletConfigurator)>($r16, $r20, $r19, $r18, $r17);

        $r22 = new org.waveprotocol.wave.model.testing.FakeWaveView;

        specialinvoke $r22.<org.waveprotocol.wave.model.testing.FakeWaveView: void <init>(org.waveprotocol.wave.model.testing.OpBasedWaveletFactory,org.waveprotocol.wave.model.wave.opbased.WaveViewImpl,org.waveprotocol.wave.model.testing.FakeWaveView$1)>($r16, $r21, null);

        return $r22;
    }

    void <init>(org.waveprotocol.wave.model.schema.SchemaProvider, org.waveprotocol.wave.model.testing.FakeWaveView$1)
    {
        org.waveprotocol.wave.model.schema.SchemaProvider r1;
        org.waveprotocol.wave.model.testing.FakeWaveView$Builder r0;
        org.waveprotocol.wave.model.testing.FakeWaveView$1 r2;

        r0 := @this: org.waveprotocol.wave.model.testing.FakeWaveView$Builder;

        r1 := @parameter0: org.waveprotocol.wave.model.schema.SchemaProvider;

        r2 := @parameter1: org.waveprotocol.wave.model.testing.FakeWaveView$1;

        specialinvoke r0.<org.waveprotocol.wave.model.testing.FakeWaveView$Builder: void <init>(org.waveprotocol.wave.model.schema.SchemaProvider)>(r1);

        return;
    }
}
