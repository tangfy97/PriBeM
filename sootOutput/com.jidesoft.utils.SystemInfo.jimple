public final class com.jidesoft.utils.SystemInfo extends java.lang.Object
{
    private static boolean _isWindows;
    private static boolean _isWindowsNTor2000;
    private static boolean _isWindowsXP;
    private static boolean _isWindowsVista;
    private static boolean _isWindows7;
    private static boolean _isWindows8;
    private static boolean _isWindows2003;
    private static boolean _isClassicWindows;
    private static boolean _isWindows95;
    private static boolean _isWindows98;
    private static boolean _supportsTray;
    private static boolean _isMacClassic;
    private static boolean _isMacOSX;
    private static boolean _isLinux;
    private static boolean _isSolaris;
    private static com.jidesoft.utils.SystemInfo$JavaVersion _currentVersion;

    private void <init>()
    {
        com.jidesoft.utils.SystemInfo r0;

        r0 := @this: com.jidesoft.utils.SystemInfo;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.String getJavaVersion()
    {
        java.lang.String $r0;

        $r0 = staticinvoke <com.jidesoft.utils.SecurityUtils: java.lang.String getProperty(java.lang.String,java.lang.String)>("java.version", "1.4.2");

        return $r0;
    }

    public static java.lang.String getJavaVendor()
    {
        java.lang.String $r0;

        $r0 = staticinvoke <com.jidesoft.utils.SecurityUtils: java.lang.String getProperty(java.lang.String,java.lang.String)>("java.vendor", "");

        return $r0;
    }

    public static java.lang.String getJavaClassVersion()
    {
        java.lang.String $r0;

        $r0 = staticinvoke <com.jidesoft.utils.SecurityUtils: java.lang.String getProperty(java.lang.String,java.lang.String)>("java.class.version", "");

        return $r0;
    }

    public static java.lang.String getOS()
    {
        java.lang.String $r0;

        $r0 = staticinvoke <com.jidesoft.utils.SecurityUtils: java.lang.String getProperty(java.lang.String,java.lang.String)>("os.name", "Windows XP");

        return $r0;
    }

    public static java.lang.String getOSVersion()
    {
        java.lang.String $r0;

        $r0 = staticinvoke <com.jidesoft.utils.SecurityUtils: java.lang.String getProperty(java.lang.String,java.lang.String)>("os.version", "");

        return $r0;
    }

    public static java.lang.String getOSArchitecture()
    {
        java.lang.String $r0;

        $r0 = staticinvoke <com.jidesoft.utils.SecurityUtils: java.lang.String getProperty(java.lang.String,java.lang.String)>("os.arch", "");

        return $r0;
    }

    public static java.lang.String getCurrentDirectory()
    {
        java.lang.String $r0;

        $r0 = staticinvoke <com.jidesoft.utils.SecurityUtils: java.lang.String getProperty(java.lang.String,java.lang.String)>("user.dir", "");

        return $r0;
    }

    public static boolean supportsTray()
    {
        boolean $z0;

        $z0 = <com.jidesoft.utils.SystemInfo: boolean _supportsTray>;

        return $z0;
    }

    public static void setSupportsTray(boolean)
    {
        boolean z0;

        z0 := @parameter0: boolean;

        <com.jidesoft.utils.SystemInfo: boolean _supportsTray> = z0;

        return;
    }

    public static boolean isWindows()
    {
        boolean $z0;

        $z0 = <com.jidesoft.utils.SystemInfo: boolean _isWindows>;

        return $z0;
    }

    public static boolean isClassicWindows()
    {
        boolean $z0;

        $z0 = <com.jidesoft.utils.SystemInfo: boolean _isClassicWindows>;

        return $z0;
    }

    public static boolean isWindowsNTor2000()
    {
        boolean $z0;

        $z0 = <com.jidesoft.utils.SystemInfo: boolean _isWindowsNTor2000>;

        return $z0;
    }

    public static boolean isWindowsXP()
    {
        boolean $z0;

        $z0 = <com.jidesoft.utils.SystemInfo: boolean _isWindowsXP>;

        return $z0;
    }

    public static boolean isWindowsVista()
    {
        boolean $z0;

        $z0 = <com.jidesoft.utils.SystemInfo: boolean _isWindowsVista>;

        return $z0;
    }

    public static boolean isWindows7()
    {
        boolean $z0;

        $z0 = <com.jidesoft.utils.SystemInfo: boolean _isWindows7>;

        return $z0;
    }

    public static boolean isWindows8()
    {
        boolean $z0;

        $z0 = <com.jidesoft.utils.SystemInfo: boolean _isWindows8>;

        return $z0;
    }

    public static boolean isWindowsVistaAbove()
    {
        boolean $z0, $z1, $z2, $z3;

        $z0 = <com.jidesoft.utils.SystemInfo: boolean _isWindowsVista>;

        if $z0 != 0 goto label1;

        $z1 = <com.jidesoft.utils.SystemInfo: boolean _isWindows7>;

        if $z1 != 0 goto label1;

        $z2 = <com.jidesoft.utils.SystemInfo: boolean _isWindows8>;

        if $z2 == 0 goto label2;

     label1:
        $z3 = 1;

        goto label3;

     label2:
        $z3 = 0;

     label3:
        return $z3;
    }

    public static boolean isWindows95()
    {
        boolean $z0;

        $z0 = <com.jidesoft.utils.SystemInfo: boolean _isWindows95>;

        return $z0;
    }

    public static boolean isWindows98()
    {
        boolean $z0;

        $z0 = <com.jidesoft.utils.SystemInfo: boolean _isWindows98>;

        return $z0;
    }

    public static boolean isWindows2003()
    {
        boolean $z0;

        $z0 = <com.jidesoft.utils.SystemInfo: boolean _isWindows2003>;

        return $z0;
    }

    public static boolean isMacClassic()
    {
        boolean $z0;

        $z0 = <com.jidesoft.utils.SystemInfo: boolean _isMacClassic>;

        return $z0;
    }

    public static boolean isMacOSX()
    {
        boolean $z0;

        $z0 = <com.jidesoft.utils.SystemInfo: boolean _isMacOSX>;

        return $z0;
    }

    public static boolean isAnyMac()
    {
        boolean $z0, $z1, $z2;

        $z0 = <com.jidesoft.utils.SystemInfo: boolean _isMacClassic>;

        if $z0 != 0 goto label1;

        $z1 = <com.jidesoft.utils.SystemInfo: boolean _isMacOSX>;

        if $z1 == 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    public static boolean isSolaris()
    {
        boolean $z0;

        $z0 = <com.jidesoft.utils.SystemInfo: boolean _isSolaris>;

        return $z0;
    }

    public static boolean isLinux()
    {
        boolean $z0;

        $z0 = <com.jidesoft.utils.SystemInfo: boolean _isLinux>;

        return $z0;
    }

    public static boolean isUnix()
    {
        boolean $z0, $z1, $z2;

        $z0 = <com.jidesoft.utils.SystemInfo: boolean _isLinux>;

        if $z0 != 0 goto label1;

        $z1 = <com.jidesoft.utils.SystemInfo: boolean _isSolaris>;

        if $z1 == 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    private static void checkJdkVersion()
    {
        com.jidesoft.utils.SystemInfo$JavaVersion $r0, $r1;
        java.lang.String $r2;

        $r0 = <com.jidesoft.utils.SystemInfo: com.jidesoft.utils.SystemInfo$JavaVersion _currentVersion>;

        if $r0 != null goto label1;

        $r1 = new com.jidesoft.utils.SystemInfo$JavaVersion;

        $r2 = staticinvoke <com.jidesoft.utils.SystemInfo: java.lang.String getJavaVersion()>();

        specialinvoke $r1.<com.jidesoft.utils.SystemInfo$JavaVersion: void <init>(java.lang.String)>($r2);

        <com.jidesoft.utils.SystemInfo: com.jidesoft.utils.SystemInfo$JavaVersion _currentVersion> = $r1;

     label1:
        return;
    }

    public static boolean isJdk13Above()
    {
        com.jidesoft.utils.SystemInfo$JavaVersion $r0;
        int $i0;
        boolean $z0;

        staticinvoke <com.jidesoft.utils.SystemInfo: void checkJdkVersion()>();

        $r0 = <com.jidesoft.utils.SystemInfo: com.jidesoft.utils.SystemInfo$JavaVersion _currentVersion>;

        $i0 = virtualinvoke $r0.<com.jidesoft.utils.SystemInfo$JavaVersion: int compareVersion(double,int,int)>(1.3, 0, 0);

        if $i0 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static boolean isJdk142Above()
    {
        com.jidesoft.utils.SystemInfo$JavaVersion $r0;
        int $i0;
        boolean $z0;

        staticinvoke <com.jidesoft.utils.SystemInfo: void checkJdkVersion()>();

        $r0 = <com.jidesoft.utils.SystemInfo: com.jidesoft.utils.SystemInfo$JavaVersion _currentVersion>;

        $i0 = virtualinvoke $r0.<com.jidesoft.utils.SystemInfo$JavaVersion: int compareVersion(double,int,int)>(1.4, 2, 0);

        if $i0 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static boolean isJdk14Above()
    {
        com.jidesoft.utils.SystemInfo$JavaVersion $r0;
        int $i0;
        boolean $z0;

        staticinvoke <com.jidesoft.utils.SystemInfo: void checkJdkVersion()>();

        $r0 = <com.jidesoft.utils.SystemInfo: com.jidesoft.utils.SystemInfo$JavaVersion _currentVersion>;

        $i0 = virtualinvoke $r0.<com.jidesoft.utils.SystemInfo$JavaVersion: int compareVersion(double,int,int)>(1.4, 0, 0);

        if $i0 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static boolean isJdk15Above()
    {
        com.jidesoft.utils.SystemInfo$JavaVersion $r0;
        int $i0;
        boolean $z0;

        staticinvoke <com.jidesoft.utils.SystemInfo: void checkJdkVersion()>();

        $r0 = <com.jidesoft.utils.SystemInfo: com.jidesoft.utils.SystemInfo$JavaVersion _currentVersion>;

        $i0 = virtualinvoke $r0.<com.jidesoft.utils.SystemInfo$JavaVersion: int compareVersion(double,int,int)>(1.5, 0, 0);

        if $i0 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static boolean isJdk6Above()
    {
        com.jidesoft.utils.SystemInfo$JavaVersion $r0;
        int $i0;
        boolean $z0;

        staticinvoke <com.jidesoft.utils.SystemInfo: void checkJdkVersion()>();

        $r0 = <com.jidesoft.utils.SystemInfo: com.jidesoft.utils.SystemInfo$JavaVersion _currentVersion>;

        $i0 = virtualinvoke $r0.<com.jidesoft.utils.SystemInfo$JavaVersion: int compareVersion(double,int,int)>(1.6, 0, 0);

        if $i0 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static boolean isJdk6u10Above()
    {
        com.jidesoft.utils.SystemInfo$JavaVersion $r0;
        int $i0;
        boolean $z0;

        staticinvoke <com.jidesoft.utils.SystemInfo: void checkJdkVersion()>();

        $r0 = <com.jidesoft.utils.SystemInfo: com.jidesoft.utils.SystemInfo$JavaVersion _currentVersion>;

        $i0 = virtualinvoke $r0.<com.jidesoft.utils.SystemInfo$JavaVersion: int compareVersion(double,int,int)>(1.6, 0, 10);

        if $i0 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static boolean isJdk6u14Above()
    {
        com.jidesoft.utils.SystemInfo$JavaVersion $r0;
        int $i0;
        boolean $z0;

        staticinvoke <com.jidesoft.utils.SystemInfo: void checkJdkVersion()>();

        $r0 = <com.jidesoft.utils.SystemInfo: com.jidesoft.utils.SystemInfo$JavaVersion _currentVersion>;

        $i0 = virtualinvoke $r0.<com.jidesoft.utils.SystemInfo$JavaVersion: int compareVersion(double,int,int)>(1.6, 0, 14);

        if $i0 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static boolean isJdk6u25Above()
    {
        com.jidesoft.utils.SystemInfo$JavaVersion $r0;
        int $i0;
        boolean $z0;

        staticinvoke <com.jidesoft.utils.SystemInfo: void checkJdkVersion()>();

        $r0 = <com.jidesoft.utils.SystemInfo: com.jidesoft.utils.SystemInfo$JavaVersion _currentVersion>;

        $i0 = virtualinvoke $r0.<com.jidesoft.utils.SystemInfo$JavaVersion: int compareVersion(double,int,int)>(1.6, 0, 25);

        if $i0 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static boolean isJdk7Above()
    {
        com.jidesoft.utils.SystemInfo$JavaVersion $r0;
        int $i0;
        boolean $z0;

        staticinvoke <com.jidesoft.utils.SystemInfo: void checkJdkVersion()>();

        $r0 = <com.jidesoft.utils.SystemInfo: com.jidesoft.utils.SystemInfo$JavaVersion _currentVersion>;

        $i0 = virtualinvoke $r0.<com.jidesoft.utils.SystemInfo$JavaVersion: int compareVersion(double,int,int)>(1.7, 0, 0);

        if $i0 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static boolean isJdk8Above()
    {
        com.jidesoft.utils.SystemInfo$JavaVersion $r0;
        int $i0;
        boolean $z0;

        staticinvoke <com.jidesoft.utils.SystemInfo: void checkJdkVersion()>();

        $r0 = <com.jidesoft.utils.SystemInfo: com.jidesoft.utils.SystemInfo$JavaVersion _currentVersion>;

        $i0 = virtualinvoke $r0.<com.jidesoft.utils.SystemInfo$JavaVersion: int compareVersion(double,int,int)>(1.8, 0, 0);

        if $i0 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static boolean isJdkVersion(double, int, int)
    {
        com.jidesoft.utils.SystemInfo$JavaVersion $r0;
        int i0, i1, $i2;
        double d0;
        boolean $z0;

        d0 := @parameter0: double;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        staticinvoke <com.jidesoft.utils.SystemInfo: void checkJdkVersion()>();

        $r0 = <com.jidesoft.utils.SystemInfo: com.jidesoft.utils.SystemInfo$JavaVersion _currentVersion>;

        $i2 = virtualinvoke $r0.<com.jidesoft.utils.SystemInfo$JavaVersion: int compareVersion(double,int,int)>(d0, i0, i1);

        if $i2 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static boolean isJdkVersionAbove(double, int, int)
    {
        com.jidesoft.utils.SystemInfo$JavaVersion $r0;
        int i0, i1, $i2;
        double d0;
        boolean $z0;

        d0 := @parameter0: double;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        staticinvoke <com.jidesoft.utils.SystemInfo: void checkJdkVersion()>();

        $r0 = <com.jidesoft.utils.SystemInfo: com.jidesoft.utils.SystemInfo$JavaVersion _currentVersion>;

        $i2 = virtualinvoke $r0.<com.jidesoft.utils.SystemInfo$JavaVersion: int compareVersion(double,int,int)>(d0, i0, i1);

        if $i2 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static boolean isJdkVersionBelow(double, int, int)
    {
        com.jidesoft.utils.SystemInfo$JavaVersion $r0;
        int i0, i1, $i2;
        double d0;
        boolean $z0;

        d0 := @parameter0: double;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        staticinvoke <com.jidesoft.utils.SystemInfo: void checkJdkVersion()>();

        $r0 = <com.jidesoft.utils.SystemInfo: com.jidesoft.utils.SystemInfo$JavaVersion _currentVersion>;

        $i2 = virtualinvoke $r0.<com.jidesoft.utils.SystemInfo$JavaVersion: int compareVersion(double,int,int)>(d0, i0, i1);

        if $i2 > 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static boolean isCJKLocale()
    {
        java.util.Locale $r0;
        boolean $z0;

        $r0 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        $z0 = staticinvoke <com.jidesoft.utils.SystemInfo: boolean isCJKLocale(java.util.Locale)>($r0);

        return $z0;
    }

    public static boolean isCJKLocale(java.util.Locale)
    {
        java.util.Locale r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;

        r0 := @parameter0: java.util.Locale;

        $r1 = <java.util.Locale: java.util.Locale CHINA>;

        $z0 = virtualinvoke r0.<java.util.Locale: boolean equals(java.lang.Object)>($r1);

        if $z0 != 0 goto label1;

        $r2 = <java.util.Locale: java.util.Locale CHINESE>;

        $z1 = virtualinvoke r0.<java.util.Locale: boolean equals(java.lang.Object)>($r2);

        if $z1 != 0 goto label1;

        $r3 = new java.util.Locale;

        specialinvoke $r3.<java.util.Locale: void <init>(java.lang.String,java.lang.String)>("zh", "HK");

        $z2 = virtualinvoke r0.<java.util.Locale: boolean equals(java.lang.Object)>($r3);

        if $z2 != 0 goto label1;

        $r4 = <java.util.Locale: java.util.Locale TAIWAN>;

        $z3 = virtualinvoke r0.<java.util.Locale: boolean equals(java.lang.Object)>($r4);

        if $z3 != 0 goto label1;

        $r5 = <java.util.Locale: java.util.Locale JAPAN>;

        $z4 = virtualinvoke r0.<java.util.Locale: boolean equals(java.lang.Object)>($r5);

        if $z4 != 0 goto label1;

        $r6 = <java.util.Locale: java.util.Locale JAPANESE>;

        $z5 = virtualinvoke r0.<java.util.Locale: boolean equals(java.lang.Object)>($r6);

        if $z5 != 0 goto label1;

        $r7 = <java.util.Locale: java.util.Locale KOREA>;

        $z6 = virtualinvoke r0.<java.util.Locale: boolean equals(java.lang.Object)>($r7);

        if $z6 != 0 goto label1;

        $r8 = <java.util.Locale: java.util.Locale KOREAN>;

        $z7 = virtualinvoke r0.<java.util.Locale: boolean equals(java.lang.Object)>($r8);

        if $z7 == 0 goto label2;

     label1:
        $z8 = 1;

        goto label3;

     label2:
        $z8 = 0;

     label3:
        return $z8;
    }

    static void <clinit>()
    {
        java.lang.Float $r2;
        byte $b1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        float $f0;
        int $i0, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i16, $i17, $i19, $i21, $i23, $i25, $i27, $i29, $i31, $i33, $i35, $i37, $i39, $i41, $i43;
        java.lang.String $r0, $r1;
        double $d0;
        java.lang.NumberFormatException $r3;

        <com.jidesoft.utils.SystemInfo: boolean _isWindows> = 0;

        <com.jidesoft.utils.SystemInfo: boolean _isWindowsNTor2000> = 0;

        <com.jidesoft.utils.SystemInfo: boolean _isWindowsXP> = 0;

        <com.jidesoft.utils.SystemInfo: boolean _isWindowsVista> = 0;

        <com.jidesoft.utils.SystemInfo: boolean _isWindows7> = 0;

        <com.jidesoft.utils.SystemInfo: boolean _isWindows8> = 0;

        <com.jidesoft.utils.SystemInfo: boolean _isWindows2003> = 0;

        <com.jidesoft.utils.SystemInfo: boolean _isClassicWindows> = 0;

        <com.jidesoft.utils.SystemInfo: boolean _isWindows95> = 0;

        <com.jidesoft.utils.SystemInfo: boolean _isWindows98> = 0;

        <com.jidesoft.utils.SystemInfo: boolean _supportsTray> = 0;

        <com.jidesoft.utils.SystemInfo: boolean _isMacClassic> = 0;

        <com.jidesoft.utils.SystemInfo: boolean _isMacOSX> = 0;

        <com.jidesoft.utils.SystemInfo: boolean _isLinux> = 0;

        <com.jidesoft.utils.SystemInfo: boolean _isSolaris> = 0;

        $r0 = staticinvoke <com.jidesoft.utils.SecurityUtils: java.lang.String getProperty(java.lang.String,java.lang.String)>("os.name", "Windows XP");

        $i0 = virtualinvoke $r0.<java.lang.String: int indexOf(java.lang.String)>("Windows");

        $i16 = (int) -1;

        if $i0 == $i16 goto label01;

        $z3 = 1;

        goto label02;

     label01:
        $z3 = 0;

     label02:
        <com.jidesoft.utils.SystemInfo: boolean _isWindows> = $z3;

     label03:
        $r1 = staticinvoke <com.jidesoft.utils.SecurityUtils: java.lang.String getProperty(java.lang.String,java.lang.String)>("os.version", "5.0");

        $r2 = staticinvoke <java.lang.Float: java.lang.Float valueOf(java.lang.String)>($r1);

        $f0 = virtualinvoke $r2.<java.lang.Float: float floatValue()>();

        $d0 = (double) $f0;

        $b1 = $d0 cmpg 4.0;

        $i17 = (int) $b1;

        if $i17 > 0 goto label04;

        $z4 = 1;

        goto label05;

     label04:
        $z4 = 0;

     label05:
        <com.jidesoft.utils.SystemInfo: boolean _isClassicWindows> = $z4;

     label06:
        goto label08;

     label07:
        $r3 := @caughtexception;

        <com.jidesoft.utils.SystemInfo: boolean _isClassicWindows> = 0;

     label08:
        $i2 = virtualinvoke $r0.<java.lang.String: int indexOf(java.lang.String)>("Windows XP");

        $i19 = (int) -1;

        if $i2 != $i19 goto label09;

        $i12 = virtualinvoke $r0.<java.lang.String: int indexOf(java.lang.String)>("Windows NT");

        $i21 = (int) -1;

        if $i12 != $i21 goto label09;

        $i13 = virtualinvoke $r0.<java.lang.String: int indexOf(java.lang.String)>("Windows 2000");

        $i23 = (int) -1;

        if $i13 == $i23 goto label10;

     label09:
        <com.jidesoft.utils.SystemInfo: boolean _isWindowsNTor2000> = 1;

     label10:
        $i14 = virtualinvoke $r0.<java.lang.String: int indexOf(java.lang.String)>("Windows XP");

        $i25 = (int) -1;

        if $i14 == $i25 goto label11;

        <com.jidesoft.utils.SystemInfo: boolean _isWindowsXP> = 1;

     label11:
        $i3 = virtualinvoke $r0.<java.lang.String: int indexOf(java.lang.String)>("Windows Vista");

        $i27 = (int) -1;

        if $i3 == $i27 goto label12;

        <com.jidesoft.utils.SystemInfo: boolean _isWindowsVista> = 1;

     label12:
        $i4 = virtualinvoke $r0.<java.lang.String: int indexOf(java.lang.String)>("Windows 7");

        $i29 = (int) -1;

        if $i4 == $i29 goto label13;

        <com.jidesoft.utils.SystemInfo: boolean _isWindows7> = 1;

     label13:
        $i5 = virtualinvoke $r0.<java.lang.String: int indexOf(java.lang.String)>("Windows 8");

        $i31 = (int) -1;

        if $i5 == $i31 goto label14;

        <com.jidesoft.utils.SystemInfo: boolean _isWindows8> = 1;

     label14:
        $i6 = virtualinvoke $r0.<java.lang.String: int indexOf(java.lang.String)>("Windows 2003");

        $i33 = (int) -1;

        if $i6 == $i33 goto label15;

        <com.jidesoft.utils.SystemInfo: boolean _isWindows2003> = 1;

        <com.jidesoft.utils.SystemInfo: boolean _isWindowsXP> = 1;

     label15:
        $i7 = virtualinvoke $r0.<java.lang.String: int indexOf(java.lang.String)>("Windows 95");

        $i35 = (int) -1;

        if $i7 == $i35 goto label16;

        <com.jidesoft.utils.SystemInfo: boolean _isWindows95> = 1;

     label16:
        $i8 = virtualinvoke $r0.<java.lang.String: int indexOf(java.lang.String)>("Windows 98");

        $i37 = (int) -1;

        if $i8 == $i37 goto label17;

        <com.jidesoft.utils.SystemInfo: boolean _isWindows98> = 1;

     label17:
        $z0 = <com.jidesoft.utils.SystemInfo: boolean _isWindows>;

        if $z0 == 0 goto label18;

        <com.jidesoft.utils.SystemInfo: boolean _supportsTray> = 1;

     label18:
        $i9 = virtualinvoke $r0.<java.lang.String: int indexOf(java.lang.String)>("Solaris");

        $i39 = (int) -1;

        if $i9 != $i39 goto label19;

        $i11 = virtualinvoke $r0.<java.lang.String: int indexOf(java.lang.String)>("SunOS");

        $i41 = (int) -1;

        if $i11 == $i41 goto label20;

     label19:
        $z5 = 1;

        goto label21;

     label20:
        $z5 = 0;

     label21:
        <com.jidesoft.utils.SystemInfo: boolean _isSolaris> = $z5;

        $i10 = virtualinvoke $r0.<java.lang.String: int indexOf(java.lang.String)>("Linux");

        $i43 = (int) -1;

        if $i10 == $i43 goto label22;

        $z6 = 1;

        goto label23;

     label22:
        $z6 = 0;

     label23:
        <com.jidesoft.utils.SystemInfo: boolean _isLinux> = $z6;

        $z1 = virtualinvoke $r0.<java.lang.String: boolean startsWith(java.lang.String)>("Mac OS");

        if $z1 == 0 goto label25;

        $z2 = virtualinvoke $r0.<java.lang.String: boolean endsWith(java.lang.String)>("X");

        if $z2 == 0 goto label24;

        <com.jidesoft.utils.SystemInfo: boolean _isMacOSX> = 1;

        goto label25;

     label24:
        <com.jidesoft.utils.SystemInfo: boolean _isMacClassic> = 1;

     label25:
        return;

        catch java.lang.NumberFormatException from label03 to label06 with label07;
    }
}
