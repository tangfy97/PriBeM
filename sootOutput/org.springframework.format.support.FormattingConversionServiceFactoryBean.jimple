public class org.springframework.format.support.FormattingConversionServiceFactoryBean extends java.lang.Object implements org.springframework.beans.factory.FactoryBean, org.springframework.context.EmbeddedValueResolverAware, org.springframework.beans.factory.InitializingBean
{
    private static final boolean jodaTimePresent;
    private java.util.Set converters;
    private java.util.Set formatters;
    private org.springframework.util.StringValueResolver embeddedValueResolver;
    private org.springframework.format.support.FormattingConversionService conversionService;

    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.ClassLoader $r1;
        boolean $z0;

        $r0 = class "Lorg/springframework/format/support/FormattingConversionService;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $z0 = staticinvoke <org.springframework.util.ClassUtils: boolean isPresent(java.lang.String,java.lang.ClassLoader)>("org.joda.time.LocalDate", $r1);

        <org.springframework.format.support.FormattingConversionServiceFactoryBean: boolean jodaTimePresent> = $z0;

        return;
    }

    public void <init>()
    {
        org.springframework.format.support.FormattingConversionServiceFactoryBean r0;

        r0 := @this: org.springframework.format.support.FormattingConversionServiceFactoryBean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void setConverters(java.util.Set)
    {
        java.util.Set r1;
        org.springframework.format.support.FormattingConversionServiceFactoryBean r0;

        r0 := @this: org.springframework.format.support.FormattingConversionServiceFactoryBean;

        r1 := @parameter0: java.util.Set;

        r0.<org.springframework.format.support.FormattingConversionServiceFactoryBean: java.util.Set converters> = r1;

        return;
    }

    public void setFormatters(java.util.Set)
    {
        java.util.Set r1;
        org.springframework.format.support.FormattingConversionServiceFactoryBean r0;

        r0 := @this: org.springframework.format.support.FormattingConversionServiceFactoryBean;

        r1 := @parameter0: java.util.Set;

        r0.<org.springframework.format.support.FormattingConversionServiceFactoryBean: java.util.Set formatters> = r1;

        return;
    }

    public void setEmbeddedValueResolver(org.springframework.util.StringValueResolver)
    {
        org.springframework.util.StringValueResolver r1;
        org.springframework.format.support.FormattingConversionServiceFactoryBean r0;

        r0 := @this: org.springframework.format.support.FormattingConversionServiceFactoryBean;

        r1 := @parameter0: org.springframework.util.StringValueResolver;

        r0.<org.springframework.format.support.FormattingConversionServiceFactoryBean: org.springframework.util.StringValueResolver embeddedValueResolver> = r1;

        return;
    }

    public void afterPropertiesSet()
    {
        org.springframework.util.StringValueResolver $r2;
        org.springframework.format.support.FormattingConversionServiceFactoryBean r0;
        java.util.Set $r6;
        org.springframework.format.support.FormattingConversionService $r1, $r3, $r4, $r5;

        r0 := @this: org.springframework.format.support.FormattingConversionServiceFactoryBean;

        $r1 = new org.springframework.format.support.FormattingConversionService;

        specialinvoke $r1.<org.springframework.format.support.FormattingConversionService: void <init>()>();

        r0.<org.springframework.format.support.FormattingConversionServiceFactoryBean: org.springframework.format.support.FormattingConversionService conversionService> = $r1;

        $r3 = r0.<org.springframework.format.support.FormattingConversionServiceFactoryBean: org.springframework.format.support.FormattingConversionService conversionService>;

        $r2 = r0.<org.springframework.format.support.FormattingConversionServiceFactoryBean: org.springframework.util.StringValueResolver embeddedValueResolver>;

        virtualinvoke $r3.<org.springframework.format.support.FormattingConversionService: void setEmbeddedValueResolver(org.springframework.util.StringValueResolver)>($r2);

        $r4 = r0.<org.springframework.format.support.FormattingConversionServiceFactoryBean: org.springframework.format.support.FormattingConversionService conversionService>;

        staticinvoke <org.springframework.core.convert.support.ConversionServiceFactory: void addDefaultConverters(org.springframework.core.convert.support.GenericConversionService)>($r4);

        $r6 = r0.<org.springframework.format.support.FormattingConversionServiceFactoryBean: java.util.Set converters>;

        $r5 = r0.<org.springframework.format.support.FormattingConversionServiceFactoryBean: org.springframework.format.support.FormattingConversionService conversionService>;

        staticinvoke <org.springframework.core.convert.support.ConversionServiceFactory: void registerConverters(java.util.Set,org.springframework.core.convert.converter.ConverterRegistry)>($r6, $r5);

        specialinvoke r0.<org.springframework.format.support.FormattingConversionServiceFactoryBean: void registerFormatters()>();

        return;
    }

    private void registerFormatters()
    {
        java.util.Iterator $r4;
        org.springframework.format.AnnotationFormatterFactory $r7;
        java.util.Set $r1, $r3;
        org.springframework.format.support.FormattingConversionService $r2, $r8, $r10;
        java.lang.IllegalArgumentException $r6;
        org.springframework.format.Formatter $r9;
        org.springframework.format.support.FormattingConversionServiceFactoryBean r0;
        java.lang.Object $r5;
        boolean $z0, $z1, $z2;

        r0 := @this: org.springframework.format.support.FormattingConversionServiceFactoryBean;

        $r1 = r0.<org.springframework.format.support.FormattingConversionServiceFactoryBean: java.util.Set formatters>;

        if $r1 == null goto label5;

        $r3 = r0.<org.springframework.format.support.FormattingConversionServiceFactoryBean: java.util.Set formatters>;

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

        goto label4;

     label1:
        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $z0 = $r5 instanceof org.springframework.format.Formatter;

        if $z0 == 0 goto label2;

        $r10 = r0.<org.springframework.format.support.FormattingConversionServiceFactoryBean: org.springframework.format.support.FormattingConversionService conversionService>;

        $r9 = (org.springframework.format.Formatter) $r5;

        virtualinvoke $r10.<org.springframework.format.support.FormattingConversionService: void addFormatter(org.springframework.format.Formatter)>($r9);

        goto label4;

     label2:
        $z1 = $r5 instanceof org.springframework.format.AnnotationFormatterFactory;

        if $z1 == 0 goto label3;

        $r8 = r0.<org.springframework.format.support.FormattingConversionServiceFactoryBean: org.springframework.format.support.FormattingConversionService conversionService>;

        $r7 = (org.springframework.format.AnnotationFormatterFactory) $r5;

        virtualinvoke $r8.<org.springframework.format.support.FormattingConversionService: void addFormatterForFieldAnnotation(org.springframework.format.AnnotationFormatterFactory)>($r7);

        goto label4;

     label3:
        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Custom formatters must be implementations of Formatter or AnnotationFormatterFactory");

        throw $r6;

     label4:
        $z2 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z2 != 0 goto label1;

     label5:
        $r2 = r0.<org.springframework.format.support.FormattingConversionServiceFactoryBean: org.springframework.format.support.FormattingConversionService conversionService>;

        virtualinvoke r0.<org.springframework.format.support.FormattingConversionServiceFactoryBean: void installFormatters(org.springframework.format.FormatterRegistry)>($r2);

        return;
    }

    protected void installFormatters(org.springframework.format.FormatterRegistry)
    {
        org.springframework.format.FormatterRegistry r0;
        org.springframework.format.number.NumberFormatAnnotationFormatterFactory $r1;
        org.springframework.format.support.FormattingConversionServiceFactoryBean$NoJodaDateTimeFormatAnnotationFormatterFactory $r2;
        org.springframework.format.support.FormattingConversionServiceFactoryBean r4;
        org.springframework.format.datetime.joda.JodaTimeFormattingConfigurer $r3;
        boolean $z0;

        r4 := @this: org.springframework.format.support.FormattingConversionServiceFactoryBean;

        r0 := @parameter0: org.springframework.format.FormatterRegistry;

        $r1 = new org.springframework.format.number.NumberFormatAnnotationFormatterFactory;

        specialinvoke $r1.<org.springframework.format.number.NumberFormatAnnotationFormatterFactory: void <init>()>();

        interfaceinvoke r0.<org.springframework.format.FormatterRegistry: void addFormatterForFieldAnnotation(org.springframework.format.AnnotationFormatterFactory)>($r1);

        $z0 = <org.springframework.format.support.FormattingConversionServiceFactoryBean: boolean jodaTimePresent>;

        if $z0 == 0 goto label1;

        $r3 = new org.springframework.format.datetime.joda.JodaTimeFormattingConfigurer;

        specialinvoke $r3.<org.springframework.format.datetime.joda.JodaTimeFormattingConfigurer: void <init>()>();

        virtualinvoke $r3.<org.springframework.format.datetime.joda.JodaTimeFormattingConfigurer: void installJodaTimeFormatting(org.springframework.format.FormatterRegistry)>(r0);

        goto label2;

     label1:
        $r2 = new org.springframework.format.support.FormattingConversionServiceFactoryBean$NoJodaDateTimeFormatAnnotationFormatterFactory;

        specialinvoke $r2.<org.springframework.format.support.FormattingConversionServiceFactoryBean$NoJodaDateTimeFormatAnnotationFormatterFactory: void <init>()>();

        interfaceinvoke r0.<org.springframework.format.FormatterRegistry: void addFormatterForFieldAnnotation(org.springframework.format.AnnotationFormatterFactory)>($r2);

     label2:
        return;
    }

    public org.springframework.format.support.FormattingConversionService getObject()
    {
        org.springframework.format.support.FormattingConversionService $r1;
        org.springframework.format.support.FormattingConversionServiceFactoryBean r0;

        r0 := @this: org.springframework.format.support.FormattingConversionServiceFactoryBean;

        $r1 = r0.<org.springframework.format.support.FormattingConversionServiceFactoryBean: org.springframework.format.support.FormattingConversionService conversionService>;

        return $r1;
    }

    public java.lang.Class getObjectType()
    {
        org.springframework.format.support.FormattingConversionServiceFactoryBean r0;

        r0 := @this: org.springframework.format.support.FormattingConversionServiceFactoryBean;

        return class "Lorg/springframework/format/support/FormattingConversionService;";
    }

    public boolean isSingleton()
    {
        org.springframework.format.support.FormattingConversionServiceFactoryBean r0;

        r0 := @this: org.springframework.format.support.FormattingConversionServiceFactoryBean;

        return 1;
    }

    public volatile java.lang.Object getObject() throws java.lang.Exception
    {
        org.springframework.format.support.FormattingConversionService $r1;
        org.springframework.format.support.FormattingConversionServiceFactoryBean r0;

        r0 := @this: org.springframework.format.support.FormattingConversionServiceFactoryBean;

        $r1 = virtualinvoke r0.<org.springframework.format.support.FormattingConversionServiceFactoryBean: org.springframework.format.support.FormattingConversionService getObject()>();

        return $r1;
    }
}
