public abstract class org.apache.lucene.index.IndexReader extends java.lang.Object implements java.io.Closeable
{
    private boolean closed;
    private boolean closedByChild;
    private final java.util.concurrent.atomic.AtomicInteger refCount;
    private final java.util.Set readerClosedListeners;
    private final java.util.Set parentReaders;

    void <init>()
    {
        java.util.Set $r3, $r5, $r6;
        java.lang.Error $r7;
        java.util.concurrent.atomic.AtomicInteger $r1;
        org.apache.lucene.index.IndexReader r0;
        java.util.LinkedHashSet $r2;
        java.util.WeakHashMap $r4;
        boolean $z0, $z1;

        r0 := @this: org.apache.lucene.index.IndexReader;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.lucene.index.IndexReader: boolean closed> = 0;

        r0.<org.apache.lucene.index.IndexReader: boolean closedByChild> = 0;

        $r1 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>(1);

        r0.<org.apache.lucene.index.IndexReader: java.util.concurrent.atomic.AtomicInteger refCount> = $r1;

        $r2 = new java.util.LinkedHashSet;

        specialinvoke $r2.<java.util.LinkedHashSet: void <init>()>();

        $r3 = staticinvoke <java.util.Collections: java.util.Set synchronizedSet(java.util.Set)>($r2);

        r0.<org.apache.lucene.index.IndexReader: java.util.Set readerClosedListeners> = $r3;

        $r4 = new java.util.WeakHashMap;

        specialinvoke $r4.<java.util.WeakHashMap: void <init>()>();

        $r5 = staticinvoke <java.util.Collections: java.util.Set newSetFromMap(java.util.Map)>($r4);

        $r6 = staticinvoke <java.util.Collections: java.util.Set synchronizedSet(java.util.Set)>($r5);

        r0.<org.apache.lucene.index.IndexReader: java.util.Set parentReaders> = $r6;

        $z0 = r0 instanceof org.apache.lucene.index.CompositeReader;

        if $z0 != 0 goto label1;

        $z1 = r0 instanceof org.apache.lucene.index.AtomicReader;

        if $z1 != 0 goto label1;

        $r7 = new java.lang.Error;

        specialinvoke $r7.<java.lang.Error: void <init>(java.lang.String)>("IndexReader should never be directly extended, subclass AtomicReader or CompositeReader instead.");

        throw $r7;

     label1:
        return;
    }

    public final void addReaderClosedListener(org.apache.lucene.index.IndexReader$ReaderClosedListener)
    {
        java.util.Set $r2;
        org.apache.lucene.index.IndexReader$ReaderClosedListener r1;
        org.apache.lucene.index.IndexReader r0;

        r0 := @this: org.apache.lucene.index.IndexReader;

        r1 := @parameter0: org.apache.lucene.index.IndexReader$ReaderClosedListener;

        virtualinvoke r0.<org.apache.lucene.index.IndexReader: void ensureOpen()>();

        $r2 = r0.<org.apache.lucene.index.IndexReader: java.util.Set readerClosedListeners>;

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>(r1);

        return;
    }

    public final void removeReaderClosedListener(org.apache.lucene.index.IndexReader$ReaderClosedListener)
    {
        java.util.Set $r2;
        org.apache.lucene.index.IndexReader$ReaderClosedListener r1;
        org.apache.lucene.index.IndexReader r0;

        r0 := @this: org.apache.lucene.index.IndexReader;

        r1 := @parameter0: org.apache.lucene.index.IndexReader$ReaderClosedListener;

        virtualinvoke r0.<org.apache.lucene.index.IndexReader: void ensureOpen()>();

        $r2 = r0.<org.apache.lucene.index.IndexReader: java.util.Set readerClosedListeners>;

        interfaceinvoke $r2.<java.util.Set: boolean remove(java.lang.Object)>(r1);

        return;
    }

    public final void registerParentReader(org.apache.lucene.index.IndexReader)
    {
        java.util.Set $r2;
        org.apache.lucene.index.IndexReader r0, r1;

        r0 := @this: org.apache.lucene.index.IndexReader;

        r1 := @parameter0: org.apache.lucene.index.IndexReader;

        virtualinvoke r0.<org.apache.lucene.index.IndexReader: void ensureOpen()>();

        $r2 = r0.<org.apache.lucene.index.IndexReader: java.util.Set parentReaders>;

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>(r1);

        return;
    }

    private void notifyReaderClosedListeners()
    {
        java.lang.Throwable $r6;
        java.util.Iterator $r3;
        java.util.Set $r1, $r2;
        java.lang.Object $r4;
        org.apache.lucene.index.IndexReader$ReaderClosedListener r5;
        org.apache.lucene.index.IndexReader r0;
        boolean $z0;

        r0 := @this: org.apache.lucene.index.IndexReader;

        $r1 = r0.<org.apache.lucene.index.IndexReader: java.util.Set readerClosedListeners>;

        entermonitor $r1;

     label1:
        $r2 = r0.<org.apache.lucene.index.IndexReader: java.util.Set readerClosedListeners>;

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.apache.lucene.index.IndexReader$ReaderClosedListener) $r4;

        interfaceinvoke r5.<org.apache.lucene.index.IndexReader$ReaderClosedListener: void onClose(org.apache.lucene.index.IndexReader)>(r0);

        goto label2;

     label3:
        exitmonitor $r1;

     label4:
        goto label7;

     label5:
        $r6 := @caughtexception;

        exitmonitor $r1;

     label6:
        throw $r6;

     label7:
        return;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    private void reportCloseToParentReaders()
    {
        java.lang.Throwable $r7;
        java.util.Iterator $r3;
        java.util.Set $r1, $r2;
        java.util.concurrent.atomic.AtomicInteger $r6;
        java.lang.Object $r4;
        org.apache.lucene.index.IndexReader r0, r5;
        boolean $z0;

        r0 := @this: org.apache.lucene.index.IndexReader;

        $r1 = r0.<org.apache.lucene.index.IndexReader: java.util.Set parentReaders>;

        entermonitor $r1;

     label1:
        $r2 = r0.<org.apache.lucene.index.IndexReader: java.util.Set parentReaders>;

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.apache.lucene.index.IndexReader) $r4;

        r5.<org.apache.lucene.index.IndexReader: boolean closedByChild> = 1;

        $r6 = r5.<org.apache.lucene.index.IndexReader: java.util.concurrent.atomic.AtomicInteger refCount>;

        virtualinvoke $r6.<java.util.concurrent.atomic.AtomicInteger: int addAndGet(int)>(0);

        specialinvoke r5.<org.apache.lucene.index.IndexReader: void reportCloseToParentReaders()>();

        goto label2;

     label3:
        exitmonitor $r1;

     label4:
        goto label7;

     label5:
        $r7 := @caughtexception;

        exitmonitor $r1;

     label6:
        throw $r7;

     label7:
        return;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public final int getRefCount()
    {
        int $i0;
        java.util.concurrent.atomic.AtomicInteger $r1;
        org.apache.lucene.index.IndexReader r0;

        r0 := @this: org.apache.lucene.index.IndexReader;

        $r1 = r0.<org.apache.lucene.index.IndexReader: java.util.concurrent.atomic.AtomicInteger refCount>;

        $i0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        return $i0;
    }

    public final void incRef()
    {
        java.util.concurrent.atomic.AtomicInteger $r1;
        org.apache.lucene.index.IndexReader r0;

        r0 := @this: org.apache.lucene.index.IndexReader;

        virtualinvoke r0.<org.apache.lucene.index.IndexReader: void ensureOpen()>();

        $r1 = r0.<org.apache.lucene.index.IndexReader: java.util.concurrent.atomic.AtomicInteger refCount>;

        virtualinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>();

        return;
    }

    public final boolean tryIncRef()
    {
        java.util.concurrent.atomic.AtomicInteger $r1, $r2;
        int $i0, $i1;
        org.apache.lucene.index.IndexReader r0;
        boolean $z0;

        r0 := @this: org.apache.lucene.index.IndexReader;

     label1:
        $r1 = r0.<org.apache.lucene.index.IndexReader: java.util.concurrent.atomic.AtomicInteger refCount>;

        $i0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        if $i0 <= 0 goto label2;

        $r2 = r0.<org.apache.lucene.index.IndexReader: java.util.concurrent.atomic.AtomicInteger refCount>;

        $i1 = $i0 + 1;

        $z0 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicInteger: boolean compareAndSet(int,int)>($i0, $i1);

        if $z0 == 0 goto label1;

        return 1;

     label2:
        return 0;
    }

    public final void decRef() throws java.io.IOException
    {
        java.lang.Throwable $r11;
        java.lang.IllegalStateException $r3;
        org.apache.lucene.store.AlreadyClosedException $r10;
        java.util.concurrent.atomic.AtomicInteger $r1, $r2, $r9, $r12;
        int $i0, $i1;
        java.lang.StringBuilder $r4, $r5, $r6, $r7;
        java.lang.String $r8;
        org.apache.lucene.index.IndexReader r0;

        r0 := @this: org.apache.lucene.index.IndexReader;

        $r1 = r0.<org.apache.lucene.index.IndexReader: java.util.concurrent.atomic.AtomicInteger refCount>;

        $i0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        if $i0 > 0 goto label1;

        $r10 = new org.apache.lucene.store.AlreadyClosedException;

        specialinvoke $r10.<org.apache.lucene.store.AlreadyClosedException: void <init>(java.lang.String)>("this IndexReader is closed");

        throw $r10;

     label1:
        $r2 = r0.<org.apache.lucene.index.IndexReader: java.util.concurrent.atomic.AtomicInteger refCount>;

        $i1 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicInteger: int decrementAndGet()>();

        if $i1 != 0 goto label8;

     label2:
        virtualinvoke r0.<org.apache.lucene.index.IndexReader: void doClose()>();

     label3:
        if 1 != 0 goto label7;

        $r9 = r0.<org.apache.lucene.index.IndexReader: java.util.concurrent.atomic.AtomicInteger refCount>;

        virtualinvoke $r9.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>();

        goto label7;

     label4:
        $r11 := @caughtexception;

     label5:
        if 0 != 0 goto label6;

        $r12 = r0.<org.apache.lucene.index.IndexReader: java.util.concurrent.atomic.AtomicInteger refCount>;

        virtualinvoke $r12.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>();

     label6:
        throw $r11;

     label7:
        specialinvoke r0.<org.apache.lucene.index.IndexReader: void reportCloseToParentReaders()>();

        specialinvoke r0.<org.apache.lucene.index.IndexReader: void notifyReaderClosedListeners()>();

        goto label9;

     label8:
        if $i1 >= 0 goto label9;

        $r3 = new java.lang.IllegalStateException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("too many decRef calls: refCount is ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" after decrement");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r8);

        throw $r3;

     label9:
        return;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    protected final void ensureOpen() throws org.apache.lucene.store.AlreadyClosedException
    {
        java.util.concurrent.atomic.AtomicInteger $r1;
        int $i0;
        org.apache.lucene.store.AlreadyClosedException $r2, $r3;
        org.apache.lucene.index.IndexReader r0;
        boolean $z0;

        r0 := @this: org.apache.lucene.index.IndexReader;

        $r1 = r0.<org.apache.lucene.index.IndexReader: java.util.concurrent.atomic.AtomicInteger refCount>;

        $i0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        if $i0 > 0 goto label1;

        $r3 = new org.apache.lucene.store.AlreadyClosedException;

        specialinvoke $r3.<org.apache.lucene.store.AlreadyClosedException: void <init>(java.lang.String)>("this IndexReader is closed");

        throw $r3;

     label1:
        $z0 = r0.<org.apache.lucene.index.IndexReader: boolean closedByChild>;

        if $z0 == 0 goto label2;

        $r2 = new org.apache.lucene.store.AlreadyClosedException;

        specialinvoke $r2.<org.apache.lucene.store.AlreadyClosedException: void <init>(java.lang.String)>("this IndexReader cannot be used anymore as one of its child readers was closed");

        throw $r2;

     label2:
        return;
    }

    public final boolean equals(java.lang.Object)
    {
        java.lang.Object r1;
        org.apache.lucene.index.IndexReader r0;
        boolean $z0;

        r0 := @this: org.apache.lucene.index.IndexReader;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public final int hashCode()
    {
        int $i0;
        org.apache.lucene.index.IndexReader r0;

        r0 := @this: org.apache.lucene.index.IndexReader;

        $i0 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r0);

        return $i0;
    }

    public static org.apache.lucene.index.DirectoryReader open(org.apache.lucene.store.Directory) throws java.io.IOException
    {
        org.apache.lucene.store.Directory r0;
        org.apache.lucene.index.DirectoryReader $r1;

        r0 := @parameter0: org.apache.lucene.store.Directory;

        $r1 = staticinvoke <org.apache.lucene.index.DirectoryReader: org.apache.lucene.index.DirectoryReader open(org.apache.lucene.store.Directory)>(r0);

        return $r1;
    }

    public static org.apache.lucene.index.DirectoryReader open(org.apache.lucene.store.Directory, int) throws java.io.IOException
    {
        int i0;
        org.apache.lucene.store.Directory r0;
        org.apache.lucene.index.DirectoryReader $r1;

        r0 := @parameter0: org.apache.lucene.store.Directory;

        i0 := @parameter1: int;

        $r1 = staticinvoke <org.apache.lucene.index.DirectoryReader: org.apache.lucene.index.DirectoryReader open(org.apache.lucene.store.Directory,int)>(r0, i0);

        return $r1;
    }

    public static org.apache.lucene.index.DirectoryReader open(org.apache.lucene.index.IndexWriter, boolean) throws java.io.IOException
    {
        org.apache.lucene.index.IndexWriter r0;
        boolean z0;
        org.apache.lucene.index.DirectoryReader $r1;

        r0 := @parameter0: org.apache.lucene.index.IndexWriter;

        z0 := @parameter1: boolean;

        $r1 = staticinvoke <org.apache.lucene.index.DirectoryReader: org.apache.lucene.index.DirectoryReader open(org.apache.lucene.index.IndexWriter,boolean)>(r0, z0);

        return $r1;
    }

    public static org.apache.lucene.index.DirectoryReader open(org.apache.lucene.index.IndexCommit) throws java.io.IOException
    {
        org.apache.lucene.index.IndexCommit r0;
        org.apache.lucene.index.DirectoryReader $r1;

        r0 := @parameter0: org.apache.lucene.index.IndexCommit;

        $r1 = staticinvoke <org.apache.lucene.index.DirectoryReader: org.apache.lucene.index.DirectoryReader open(org.apache.lucene.index.IndexCommit)>(r0);

        return $r1;
    }

    public static org.apache.lucene.index.DirectoryReader open(org.apache.lucene.index.IndexCommit, int) throws java.io.IOException
    {
        org.apache.lucene.index.IndexCommit r0;
        int i0;
        org.apache.lucene.index.DirectoryReader $r1;

        r0 := @parameter0: org.apache.lucene.index.IndexCommit;

        i0 := @parameter1: int;

        $r1 = staticinvoke <org.apache.lucene.index.DirectoryReader: org.apache.lucene.index.DirectoryReader open(org.apache.lucene.index.IndexCommit,int)>(r0, i0);

        return $r1;
    }

    public abstract org.apache.lucene.index.Fields getTermVectors(int) throws java.io.IOException;

    public final org.apache.lucene.index.Terms getTermVector(int, java.lang.String) throws java.io.IOException
    {
        org.apache.lucene.index.Terms $r3;
        int i0;
        org.apache.lucene.index.Fields $r1;
        java.lang.String r2;
        org.apache.lucene.index.IndexReader r0;

        r0 := @this: org.apache.lucene.index.IndexReader;

        i0 := @parameter0: int;

        r2 := @parameter1: java.lang.String;

        $r1 = virtualinvoke r0.<org.apache.lucene.index.IndexReader: org.apache.lucene.index.Fields getTermVectors(int)>(i0);

        if $r1 != null goto label1;

        return null;

     label1:
        $r3 = virtualinvoke $r1.<org.apache.lucene.index.Fields: org.apache.lucene.index.Terms terms(java.lang.String)>(r2);

        return $r3;
    }

    public abstract int numDocs();

    public abstract int maxDoc();

    public final int numDeletedDocs()
    {
        int $i0, $i1, $i2;
        org.apache.lucene.index.IndexReader r0;

        r0 := @this: org.apache.lucene.index.IndexReader;

        $i0 = virtualinvoke r0.<org.apache.lucene.index.IndexReader: int maxDoc()>();

        $i1 = virtualinvoke r0.<org.apache.lucene.index.IndexReader: int numDocs()>();

        $i2 = $i0 - $i1;

        return $i2;
    }

    public abstract void document(int, org.apache.lucene.index.StoredFieldVisitor) throws java.io.IOException;

    public final org.apache.lucene.document.Document document(int) throws java.io.IOException
    {
        org.apache.lucene.document.DocumentStoredFieldVisitor $r0;
        org.apache.lucene.document.Document $r2;
        int i0;
        org.apache.lucene.index.IndexReader r1;

        r1 := @this: org.apache.lucene.index.IndexReader;

        i0 := @parameter0: int;

        $r0 = new org.apache.lucene.document.DocumentStoredFieldVisitor;

        specialinvoke $r0.<org.apache.lucene.document.DocumentStoredFieldVisitor: void <init>()>();

        virtualinvoke r1.<org.apache.lucene.index.IndexReader: void document(int,org.apache.lucene.index.StoredFieldVisitor)>(i0, $r0);

        $r2 = virtualinvoke $r0.<org.apache.lucene.document.DocumentStoredFieldVisitor: org.apache.lucene.document.Document getDocument()>();

        return $r2;
    }

    public final org.apache.lucene.document.Document document(int, java.util.Set) throws java.io.IOException
    {
        org.apache.lucene.document.DocumentStoredFieldVisitor $r0;
        org.apache.lucene.document.Document $r3;
        int i0;
        java.util.Set r1;
        org.apache.lucene.index.IndexReader r2;

        r2 := @this: org.apache.lucene.index.IndexReader;

        i0 := @parameter0: int;

        r1 := @parameter1: java.util.Set;

        $r0 = new org.apache.lucene.document.DocumentStoredFieldVisitor;

        specialinvoke $r0.<org.apache.lucene.document.DocumentStoredFieldVisitor: void <init>(java.util.Set)>(r1);

        virtualinvoke r2.<org.apache.lucene.index.IndexReader: void document(int,org.apache.lucene.index.StoredFieldVisitor)>(i0, $r0);

        $r3 = virtualinvoke $r0.<org.apache.lucene.document.DocumentStoredFieldVisitor: org.apache.lucene.document.Document getDocument()>();

        return $r3;
    }

    public boolean hasDeletions()
    {
        int $i0;
        org.apache.lucene.index.IndexReader r0;
        boolean $z0;

        r0 := @this: org.apache.lucene.index.IndexReader;

        $i0 = virtualinvoke r0.<org.apache.lucene.index.IndexReader: int numDeletedDocs()>();

        if $i0 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public final synchronized void close() throws java.io.IOException
    {
        org.apache.lucene.index.IndexReader r0;
        boolean $z0;

        r0 := @this: org.apache.lucene.index.IndexReader;

        $z0 = r0.<org.apache.lucene.index.IndexReader: boolean closed>;

        if $z0 != 0 goto label1;

        virtualinvoke r0.<org.apache.lucene.index.IndexReader: void decRef()>();

        r0.<org.apache.lucene.index.IndexReader: boolean closed> = 1;

     label1:
        return;
    }

    protected abstract void doClose() throws java.io.IOException;

    public abstract org.apache.lucene.index.IndexReaderContext getContext();

    public final java.util.List leaves()
    {
        java.util.List $r2;
        org.apache.lucene.index.IndexReader r0;
        org.apache.lucene.index.IndexReaderContext $r1;

        r0 := @this: org.apache.lucene.index.IndexReader;

        $r1 = virtualinvoke r0.<org.apache.lucene.index.IndexReader: org.apache.lucene.index.IndexReaderContext getContext()>();

        $r2 = virtualinvoke $r1.<org.apache.lucene.index.IndexReaderContext: java.util.List leaves()>();

        return $r2;
    }

    public java.lang.Object getCoreCacheKey()
    {
        org.apache.lucene.index.IndexReader r0;

        r0 := @this: org.apache.lucene.index.IndexReader;

        return r0;
    }

    public java.lang.Object getCombinedCoreAndDeletesKey()
    {
        org.apache.lucene.index.IndexReader r0;

        r0 := @this: org.apache.lucene.index.IndexReader;

        return r0;
    }

    public abstract int docFreq(org.apache.lucene.index.Term) throws java.io.IOException;

    public abstract long totalTermFreq(org.apache.lucene.index.Term) throws java.io.IOException;

    public abstract long getSumDocFreq(java.lang.String) throws java.io.IOException;

    public abstract int getDocCount(java.lang.String) throws java.io.IOException;

    public abstract long getSumTotalTermFreq(java.lang.String) throws java.io.IOException;
}
