public final class com.sun.xml.bind.v2.util.QNameMap extends java.lang.Object
{
    private static final int DEFAULT_INITIAL_CAPACITY;
    private static final int MAXIMUM_CAPACITY;
    transient com.sun.xml.bind.v2.util.QNameMap$Entry[] table;
    transient int size;
    private int threshold;
    private static final float DEFAULT_LOAD_FACTOR;
    private java.util.Set entrySet;
    static final boolean $assertionsDisabled;

    public void <init>()
    {
        com.sun.xml.bind.v2.util.QNameMap r0;
        com.sun.xml.bind.v2.util.QNameMap$Entry[] $r1, $r2;

        r0 := @this: com.sun.xml.bind.v2.util.QNameMap;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = newarray (com.sun.xml.bind.v2.util.QNameMap$Entry)[16];

        r0.<com.sun.xml.bind.v2.util.QNameMap: com.sun.xml.bind.v2.util.QNameMap$Entry[] table> = $r1;

        r0.<com.sun.xml.bind.v2.util.QNameMap: java.util.Set entrySet> = null;

        r0.<com.sun.xml.bind.v2.util.QNameMap: int threshold> = 12;

        $r2 = newarray (com.sun.xml.bind.v2.util.QNameMap$Entry)[16];

        r0.<com.sun.xml.bind.v2.util.QNameMap: com.sun.xml.bind.v2.util.QNameMap$Entry[] table> = $r2;

        return;
    }

    public void put(java.lang.String, java.lang.String, java.lang.Object)
    {
        com.sun.xml.bind.v2.util.QNameMap$Entry[] $r2, $r3;
        java.lang.AssertionError $r9, $r11, $r12, $r13;
        com.sun.xml.bind.v2.util.QNameMap r1;
        int $i0, $i1, $i2, $i3;
        java.lang.String r0, r4, $r6, $r7, $r8, $r10;
        boolean $z0, $z1, $z2, $z3;
        com.sun.xml.bind.v2.util.QNameMap$Entry r14;
        java.lang.Object r5;

        r1 := @this: com.sun.xml.bind.v2.util.QNameMap;

        r4 := @parameter0: java.lang.String;

        r0 := @parameter1: java.lang.String;

        r5 := @parameter2: java.lang.Object;

        $z0 = <com.sun.xml.bind.v2.util.QNameMap: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if r0 != null goto label1;

        $r13 = new java.lang.AssertionError;

        specialinvoke $r13.<java.lang.AssertionError: void <init>()>();

        throw $r13;

     label1:
        $z1 = <com.sun.xml.bind.v2.util.QNameMap: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        if r4 != null goto label2;

        $r12 = new java.lang.AssertionError;

        specialinvoke $r12.<java.lang.AssertionError: void <init>()>();

        throw $r12;

     label2:
        $z2 = <com.sun.xml.bind.v2.util.QNameMap: boolean $assertionsDisabled>;

        if $z2 != 0 goto label3;

        $r10 = virtualinvoke r0.<java.lang.String: java.lang.String intern()>();

        if r0 == $r10 goto label3;

        $r11 = new java.lang.AssertionError;

        specialinvoke $r11.<java.lang.AssertionError: void <init>()>();

        throw $r11;

     label3:
        $z3 = <com.sun.xml.bind.v2.util.QNameMap: boolean $assertionsDisabled>;

        if $z3 != 0 goto label4;

        $r8 = virtualinvoke r4.<java.lang.String: java.lang.String intern()>();

        if r4 == $r8 goto label4;

        $r9 = new java.lang.AssertionError;

        specialinvoke $r9.<java.lang.AssertionError: void <init>()>();

        throw $r9;

     label4:
        $i0 = staticinvoke <com.sun.xml.bind.v2.util.QNameMap: int hash(java.lang.String)>(r0);

        $r2 = r1.<com.sun.xml.bind.v2.util.QNameMap: com.sun.xml.bind.v2.util.QNameMap$Entry[] table>;

        $i1 = lengthof $r2;

        $i2 = staticinvoke <com.sun.xml.bind.v2.util.QNameMap: int indexFor(int,int)>($i0, $i1);

        $r3 = r1.<com.sun.xml.bind.v2.util.QNameMap: com.sun.xml.bind.v2.util.QNameMap$Entry[] table>;

        r14 = $r3[$i2];

     label5:
        if r14 == null goto label7;

        $i3 = r14.<com.sun.xml.bind.v2.util.QNameMap$Entry: int hash>;

        if $i3 != $i0 goto label6;

        $r6 = r14.<com.sun.xml.bind.v2.util.QNameMap$Entry: java.lang.String localName>;

        if r0 != $r6 goto label6;

        $r7 = r14.<com.sun.xml.bind.v2.util.QNameMap$Entry: java.lang.String nsUri>;

        if r4 != $r7 goto label6;

        r14.<com.sun.xml.bind.v2.util.QNameMap$Entry: java.lang.Object value> = r5;

        return;

     label6:
        r14 = r14.<com.sun.xml.bind.v2.util.QNameMap$Entry: com.sun.xml.bind.v2.util.QNameMap$Entry next>;

        goto label5;

     label7:
        specialinvoke r1.<com.sun.xml.bind.v2.util.QNameMap: void addEntry(int,java.lang.String,java.lang.String,java.lang.Object,int)>($i0, r4, r0, r5, $i2);

        return;
    }

    public void put(javax.xml.namespace.QName, java.lang.Object)
    {
        com.sun.xml.bind.v2.util.QNameMap r0;
        java.lang.Object r4;
        javax.xml.namespace.QName r1;
        java.lang.String $r2, $r3;

        r0 := @this: com.sun.xml.bind.v2.util.QNameMap;

        r1 := @parameter0: javax.xml.namespace.QName;

        r4 := @parameter1: java.lang.Object;

        $r2 = virtualinvoke r1.<javax.xml.namespace.QName: java.lang.String getNamespaceURI()>();

        $r3 = virtualinvoke r1.<javax.xml.namespace.QName: java.lang.String getLocalPart()>();

        virtualinvoke r0.<com.sun.xml.bind.v2.util.QNameMap: void put(java.lang.String,java.lang.String,java.lang.Object)>($r2, $r3, r4);

        return;
    }

    public void put(com.sun.xml.bind.v2.runtime.Name, java.lang.Object)
    {
        com.sun.xml.bind.v2.util.QNameMap r0;
        com.sun.xml.bind.v2.runtime.Name r1;
        java.lang.Object r2;
        java.lang.String $r3, $r4;

        r0 := @this: com.sun.xml.bind.v2.util.QNameMap;

        r1 := @parameter0: com.sun.xml.bind.v2.runtime.Name;

        r2 := @parameter1: java.lang.Object;

        $r4 = r1.<com.sun.xml.bind.v2.runtime.Name: java.lang.String nsUri>;

        $r3 = r1.<com.sun.xml.bind.v2.runtime.Name: java.lang.String localName>;

        virtualinvoke r0.<com.sun.xml.bind.v2.util.QNameMap: void put(java.lang.String,java.lang.String,java.lang.Object)>($r4, $r3, r2);

        return;
    }

    public java.lang.Object get(java.lang.String, java.lang.String)
    {
        com.sun.xml.bind.v2.util.QNameMap$Entry $r3;
        com.sun.xml.bind.v2.util.QNameMap r0;
        java.lang.Object $r4;
        java.lang.String r1, r2;

        r0 := @this: com.sun.xml.bind.v2.util.QNameMap;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = specialinvoke r0.<com.sun.xml.bind.v2.util.QNameMap: com.sun.xml.bind.v2.util.QNameMap$Entry getEntry(java.lang.String,java.lang.String)>(r1, r2);

        if $r3 != null goto label1;

        return null;

     label1:
        $r4 = $r3.<com.sun.xml.bind.v2.util.QNameMap$Entry: java.lang.Object value>;

        return $r4;
    }

    public java.lang.Object get(javax.xml.namespace.QName)
    {
        com.sun.xml.bind.v2.util.QNameMap r0;
        java.lang.Object $r4;
        javax.xml.namespace.QName r1;
        java.lang.String $r2, $r3;

        r0 := @this: com.sun.xml.bind.v2.util.QNameMap;

        r1 := @parameter0: javax.xml.namespace.QName;

        $r2 = virtualinvoke r1.<javax.xml.namespace.QName: java.lang.String getNamespaceURI()>();

        $r3 = virtualinvoke r1.<javax.xml.namespace.QName: java.lang.String getLocalPart()>();

        $r4 = virtualinvoke r0.<com.sun.xml.bind.v2.util.QNameMap: java.lang.Object get(java.lang.String,java.lang.String)>($r2, $r3);

        return $r4;
    }

    public int size()
    {
        int $i0;
        com.sun.xml.bind.v2.util.QNameMap r0;

        r0 := @this: com.sun.xml.bind.v2.util.QNameMap;

        $i0 = r0.<com.sun.xml.bind.v2.util.QNameMap: int size>;

        return $i0;
    }

    public com.sun.xml.bind.v2.util.QNameMap putAll(com.sun.xml.bind.v2.util.QNameMap)
    {
        com.sun.xml.bind.v2.util.QNameMap$Entry[] $r6, $r7;
        com.sun.xml.bind.v2.util.QNameMap r0, r1;
        int $i0, $i1, $i2, i3, i4;
        java.lang.String $r3, $r4;
        boolean $z0;
        java.util.Iterator $r9;
        java.util.Set $r8;
        com.sun.xml.bind.v2.util.QNameMap$Entry r10;
        java.lang.Object $r2, $r5;

        r1 := @this: com.sun.xml.bind.v2.util.QNameMap;

        r0 := @parameter0: com.sun.xml.bind.v2.util.QNameMap;

        $i0 = virtualinvoke r0.<com.sun.xml.bind.v2.util.QNameMap: int size()>();

        if $i0 != 0 goto label1;

        return r1;

     label1:
        $i1 = r1.<com.sun.xml.bind.v2.util.QNameMap: int threshold>;

        if $i0 <= $i1 goto label5;

        i3 = $i0;

        if $i0 <= 1073741824 goto label2;

        i3 = 1073741824;

     label2:
        $r6 = r1.<com.sun.xml.bind.v2.util.QNameMap: com.sun.xml.bind.v2.util.QNameMap$Entry[] table>;

        i4 = lengthof $r6;

     label3:
        if i4 >= i3 goto label4;

        i4 = i4 << 1;

        goto label3;

     label4:
        $r7 = r1.<com.sun.xml.bind.v2.util.QNameMap: com.sun.xml.bind.v2.util.QNameMap$Entry[] table>;

        $i2 = lengthof $r7;

        if i4 <= $i2 goto label5;

        specialinvoke r1.<com.sun.xml.bind.v2.util.QNameMap: void resize(int)>(i4);

     label5:
        $r8 = virtualinvoke r0.<com.sun.xml.bind.v2.util.QNameMap: java.util.Set entrySet()>();

        $r9 = interfaceinvoke $r8.<java.util.Set: java.util.Iterator iterator()>();

     label6:
        $z0 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label7;

        $r2 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        r10 = (com.sun.xml.bind.v2.util.QNameMap$Entry) $r2;

        $r3 = r10.<com.sun.xml.bind.v2.util.QNameMap$Entry: java.lang.String nsUri>;

        $r4 = r10.<com.sun.xml.bind.v2.util.QNameMap$Entry: java.lang.String localName>;

        $r5 = virtualinvoke r10.<com.sun.xml.bind.v2.util.QNameMap$Entry: java.lang.Object getValue()>();

        virtualinvoke r1.<com.sun.xml.bind.v2.util.QNameMap: void put(java.lang.String,java.lang.String,java.lang.Object)>($r3, $r4, $r5);

        goto label6;

     label7:
        return r1;
    }

    private static int hash(java.lang.String)
    {
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, i7, i8, i9, $i11;
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int hashCode()>();

        $i1 = $i0 << 9;

        $i11 = (int) -1;

        $i2 = $i1 ^ $i11;

        i6 = $i0 + $i2;

        $i3 = i6 >>> 14;

        i7 = i6 ^ $i3;

        $i4 = i7 << 4;

        i8 = i7 + $i4;

        $i5 = i8 >>> 10;

        i9 = i8 ^ $i5;

        return i9;
    }

    private static int indexFor(int, int)
    {
        int i0, i1, $i2, $i3;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $i2 = i1 - 1;

        $i3 = i0 & $i2;

        return $i3;
    }

    private void addEntry(int, java.lang.String, java.lang.String, java.lang.Object, int)
    {
        com.sun.xml.bind.v2.util.QNameMap$Entry[] $r1, $r7, $r8;
        com.sun.xml.bind.v2.util.QNameMap r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6;
        java.lang.String r4, r5;
        com.sun.xml.bind.v2.util.QNameMap$Entry r2, $r3;
        java.lang.Object r6;

        r0 := @this: com.sun.xml.bind.v2.util.QNameMap;

        i1 := @parameter0: int;

        r4 := @parameter1: java.lang.String;

        r5 := @parameter2: java.lang.String;

        r6 := @parameter3: java.lang.Object;

        i0 := @parameter4: int;

        $r1 = r0.<com.sun.xml.bind.v2.util.QNameMap: com.sun.xml.bind.v2.util.QNameMap$Entry[] table>;

        r2 = $r1[i0];

        $r7 = r0.<com.sun.xml.bind.v2.util.QNameMap: com.sun.xml.bind.v2.util.QNameMap$Entry[] table>;

        $r3 = new com.sun.xml.bind.v2.util.QNameMap$Entry;

        specialinvoke $r3.<com.sun.xml.bind.v2.util.QNameMap$Entry: void <init>(int,java.lang.String,java.lang.String,java.lang.Object,com.sun.xml.bind.v2.util.QNameMap$Entry)>(i1, r4, r5, r6, r2);

        $r7[i0] = $r3;

        $i2 = r0.<com.sun.xml.bind.v2.util.QNameMap: int size>;

        $i3 = $i2 + 1;

        r0.<com.sun.xml.bind.v2.util.QNameMap: int size> = $i3;

        $i4 = r0.<com.sun.xml.bind.v2.util.QNameMap: int threshold>;

        if $i2 < $i4 goto label1;

        $r8 = r0.<com.sun.xml.bind.v2.util.QNameMap: com.sun.xml.bind.v2.util.QNameMap$Entry[] table>;

        $i5 = lengthof $r8;

        $i6 = 2 * $i5;

        specialinvoke r0.<com.sun.xml.bind.v2.util.QNameMap: void resize(int)>($i6);

     label1:
        return;
    }

    private void resize(int)
    {
        com.sun.xml.bind.v2.util.QNameMap r0;
        com.sun.xml.bind.v2.util.QNameMap$Entry[] r1, r2;
        int i0, i1;

        r0 := @this: com.sun.xml.bind.v2.util.QNameMap;

        i1 := @parameter0: int;

        r1 = r0.<com.sun.xml.bind.v2.util.QNameMap: com.sun.xml.bind.v2.util.QNameMap$Entry[] table>;

        i0 = lengthof r1;

        if i0 != 1073741824 goto label1;

        r0.<com.sun.xml.bind.v2.util.QNameMap: int threshold> = 2147483647;

        return;

     label1:
        r2 = newarray (com.sun.xml.bind.v2.util.QNameMap$Entry)[i1];

        specialinvoke r0.<com.sun.xml.bind.v2.util.QNameMap: void transfer(com.sun.xml.bind.v2.util.QNameMap$Entry[])>(r2);

        r0.<com.sun.xml.bind.v2.util.QNameMap: com.sun.xml.bind.v2.util.QNameMap$Entry[] table> = r2;

        r0.<com.sun.xml.bind.v2.util.QNameMap: int threshold> = i1;

        return;
    }

    private void transfer(com.sun.xml.bind.v2.util.QNameMap$Entry[])
    {
        com.sun.xml.bind.v2.util.QNameMap$Entry[] r1, r2;
        com.sun.xml.bind.v2.util.QNameMap$Entry $r3, $r4, r5;
        com.sun.xml.bind.v2.util.QNameMap r0;
        int i0, $i1, $i2, $i3, i4;

        r0 := @this: com.sun.xml.bind.v2.util.QNameMap;

        r2 := @parameter0: com.sun.xml.bind.v2.util.QNameMap$Entry[];

        r1 = r0.<com.sun.xml.bind.v2.util.QNameMap: com.sun.xml.bind.v2.util.QNameMap$Entry[] table>;

        i0 = lengthof r2;

        i4 = 0;

     label1:
        $i1 = lengthof r1;

        if i4 >= $i1 goto label4;

        r5 = r1[i4];

        if r5 == null goto label3;

        r1[i4] = null;

     label2:
        $r4 = r5.<com.sun.xml.bind.v2.util.QNameMap$Entry: com.sun.xml.bind.v2.util.QNameMap$Entry next>;

        $i2 = r5.<com.sun.xml.bind.v2.util.QNameMap$Entry: int hash>;

        $i3 = staticinvoke <com.sun.xml.bind.v2.util.QNameMap: int indexFor(int,int)>($i2, i0);

        $r3 = r2[$i3];

        r5.<com.sun.xml.bind.v2.util.QNameMap$Entry: com.sun.xml.bind.v2.util.QNameMap$Entry next> = $r3;

        r2[$i3] = r5;

        r5 = $r4;

        if $r4 != null goto label2;

     label3:
        i4 = i4 + 1;

        goto label1;

     label4:
        return;
    }

    public com.sun.xml.bind.v2.util.QNameMap$Entry getOne()
    {
        com.sun.xml.bind.v2.util.QNameMap$Entry r2;
        com.sun.xml.bind.v2.util.QNameMap r0;
        com.sun.xml.bind.v2.util.QNameMap$Entry[] r1;
        int i0, i1;

        r0 := @this: com.sun.xml.bind.v2.util.QNameMap;

        r1 = r0.<com.sun.xml.bind.v2.util.QNameMap: com.sun.xml.bind.v2.util.QNameMap$Entry[] table>;

        i0 = lengthof r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r2 = r1[i1];

        if r2 == null goto label2;

        return r2;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return null;
    }

    public java.util.Collection keySet()
    {
        java.util.Iterator $r3;
        java.util.Set $r2;
        java.util.HashSet $r0;
        com.sun.xml.bind.v2.util.QNameMap$Entry r5;
        com.sun.xml.bind.v2.util.QNameMap r1;
        java.lang.Object $r4;
        javax.xml.namespace.QName $r6;
        boolean $z0;

        r1 := @this: com.sun.xml.bind.v2.util.QNameMap;

        $r0 = new java.util.HashSet;

        specialinvoke $r0.<java.util.HashSet: void <init>()>();

        $r2 = virtualinvoke r1.<com.sun.xml.bind.v2.util.QNameMap: java.util.Set entrySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (com.sun.xml.bind.v2.util.QNameMap$Entry) $r4;

        $r6 = virtualinvoke r5.<com.sun.xml.bind.v2.util.QNameMap$Entry: javax.xml.namespace.QName createQName()>();

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>($r6);

        goto label1;

     label2:
        return $r0;
    }

    public boolean containsKey(java.lang.String, java.lang.String)
    {
        com.sun.xml.bind.v2.util.QNameMap$Entry $r3;
        com.sun.xml.bind.v2.util.QNameMap r0;
        java.lang.String r1, r2;
        boolean $z0;

        r0 := @this: com.sun.xml.bind.v2.util.QNameMap;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = specialinvoke r0.<com.sun.xml.bind.v2.util.QNameMap: com.sun.xml.bind.v2.util.QNameMap$Entry getEntry(java.lang.String,java.lang.String)>(r1, r2);

        if $r3 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isEmpty()
    {
        int $i0;
        com.sun.xml.bind.v2.util.QNameMap r0;
        boolean $z0;

        r0 := @this: com.sun.xml.bind.v2.util.QNameMap;

        $i0 = r0.<com.sun.xml.bind.v2.util.QNameMap: int size>;

        if $i0 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public java.util.Set entrySet()
    {
        com.sun.xml.bind.v2.util.QNameMap r0;
        java.util.Set r1, $r2;
        com.sun.xml.bind.v2.util.QNameMap$EntrySet $r3;

        r0 := @this: com.sun.xml.bind.v2.util.QNameMap;

        r1 = r0.<com.sun.xml.bind.v2.util.QNameMap: java.util.Set entrySet>;

        if r1 == null goto label1;

        $r2 = r1;

        goto label2;

     label1:
        $r3 = new com.sun.xml.bind.v2.util.QNameMap$EntrySet;

        $r2 = $r3;

        specialinvoke $r3.<com.sun.xml.bind.v2.util.QNameMap$EntrySet: void <init>(com.sun.xml.bind.v2.util.QNameMap,com.sun.xml.bind.v2.util.QNameMap$1)>(r0, null);

        r0.<com.sun.xml.bind.v2.util.QNameMap: java.util.Set entrySet> = $r3;

     label2:
        return $r2;
    }

    private java.util.Iterator newEntryIterator()
    {
        com.sun.xml.bind.v2.util.QNameMap$EntryIterator $r0;
        com.sun.xml.bind.v2.util.QNameMap r1;

        r1 := @this: com.sun.xml.bind.v2.util.QNameMap;

        $r0 = new com.sun.xml.bind.v2.util.QNameMap$EntryIterator;

        specialinvoke $r0.<com.sun.xml.bind.v2.util.QNameMap$EntryIterator: void <init>(com.sun.xml.bind.v2.util.QNameMap,com.sun.xml.bind.v2.util.QNameMap$1)>(r1, null);

        return $r0;
    }

    private com.sun.xml.bind.v2.util.QNameMap$Entry getEntry(java.lang.String, java.lang.String)
    {
        com.sun.xml.bind.v2.util.QNameMap$Entry[] $r2, $r3;
        java.lang.AssertionError $r8, $r10;
        com.sun.xml.bind.v2.util.QNameMap r1;
        int $i0, $i1, $i2;
        java.lang.String r0, $r4, r5, $r6, $r7, $r9;
        boolean $z0, $z1;
        com.sun.xml.bind.v2.util.QNameMap$Entry r11;

        r1 := @this: com.sun.xml.bind.v2.util.QNameMap;

        r5 := @parameter0: java.lang.String;

        r0 := @parameter1: java.lang.String;

        $z0 = <com.sun.xml.bind.v2.util.QNameMap: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r9 = virtualinvoke r5.<java.lang.String: java.lang.String intern()>();

        if r5 == $r9 goto label1;

        $r10 = new java.lang.AssertionError;

        specialinvoke $r10.<java.lang.AssertionError: void <init>()>();

        throw $r10;

     label1:
        $z1 = <com.sun.xml.bind.v2.util.QNameMap: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        $r7 = virtualinvoke r0.<java.lang.String: java.lang.String intern()>();

        if r0 == $r7 goto label2;

        $r8 = new java.lang.AssertionError;

        specialinvoke $r8.<java.lang.AssertionError: void <init>()>();

        throw $r8;

     label2:
        $i0 = staticinvoke <com.sun.xml.bind.v2.util.QNameMap: int hash(java.lang.String)>(r0);

        $r2 = r1.<com.sun.xml.bind.v2.util.QNameMap: com.sun.xml.bind.v2.util.QNameMap$Entry[] table>;

        $i1 = lengthof $r2;

        $i2 = staticinvoke <com.sun.xml.bind.v2.util.QNameMap: int indexFor(int,int)>($i0, $i1);

        $r3 = r1.<com.sun.xml.bind.v2.util.QNameMap: com.sun.xml.bind.v2.util.QNameMap$Entry[] table>;

        r11 = $r3[$i2];

     label3:
        if r11 == null goto label5;

        $r4 = r11.<com.sun.xml.bind.v2.util.QNameMap$Entry: java.lang.String localName>;

        if r0 != $r4 goto label4;

        $r6 = r11.<com.sun.xml.bind.v2.util.QNameMap$Entry: java.lang.String nsUri>;

        if r5 == $r6 goto label5;

     label4:
        r11 = r11.<com.sun.xml.bind.v2.util.QNameMap$Entry: com.sun.xml.bind.v2.util.QNameMap$Entry next>;

        goto label3;

     label5:
        return r11;
    }

    public java.lang.String toString()
    {
        java.util.Iterator $r3;
        java.util.Set $r2;
        com.sun.xml.bind.v2.util.QNameMap$Entry r6;
        com.sun.xml.bind.v2.util.QNameMap r1;
        int $i0;
        java.lang.StringBuilder $r0;
        java.lang.Object $r5;
        java.lang.String $r4;
        boolean $z0;

        r1 := @this: com.sun.xml.bind.v2.util.QNameMap;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(123);

        $r2 = virtualinvoke r1.<com.sun.xml.bind.v2.util.QNameMap: java.util.Set entrySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r6 = (com.sun.xml.bind.v2.util.QNameMap$Entry) $r5;

        $i0 = virtualinvoke $r0.<java.lang.StringBuilder: int length()>();

        if $i0 <= 1 goto label2;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44);

     label2:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(91);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r6);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(93);

        goto label1;

     label3:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(125);

        $r4 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;
    }

    static java.util.Iterator access$200(com.sun.xml.bind.v2.util.QNameMap)
    {
        com.sun.xml.bind.v2.util.QNameMap r0;
        java.util.Iterator $r1;

        r0 := @parameter0: com.sun.xml.bind.v2.util.QNameMap;

        $r1 = specialinvoke r0.<com.sun.xml.bind.v2.util.QNameMap: java.util.Iterator newEntryIterator()>();

        return $r1;
    }

    static com.sun.xml.bind.v2.util.QNameMap$Entry access$300(com.sun.xml.bind.v2.util.QNameMap, java.lang.String, java.lang.String)
    {
        com.sun.xml.bind.v2.util.QNameMap$Entry $r3;
        com.sun.xml.bind.v2.util.QNameMap r0;
        java.lang.String r1, r2;

        r0 := @parameter0: com.sun.xml.bind.v2.util.QNameMap;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        $r3 = specialinvoke r0.<com.sun.xml.bind.v2.util.QNameMap: com.sun.xml.bind.v2.util.QNameMap$Entry getEntry(java.lang.String,java.lang.String)>(r1, r2);

        return $r3;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        <com.sun.xml.bind.v2.util.QNameMap: float DEFAULT_LOAD_FACTOR> = 0.75F;

        <com.sun.xml.bind.v2.util.QNameMap: int MAXIMUM_CAPACITY> = 1073741824;

        <com.sun.xml.bind.v2.util.QNameMap: int DEFAULT_INITIAL_CAPACITY> = 16;

        $r0 = class "Lcom/sun/xml/bind/v2/util/QNameMap;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <com.sun.xml.bind.v2.util.QNameMap: boolean $assertionsDisabled> = $z1;

        return;
    }
}
