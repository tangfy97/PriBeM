public enum class org.apache.lucene.util.packed.PackedInts$Format extends java.lang.Enum
{
    public static final enum org.apache.lucene.util.packed.PackedInts$Format PACKED;
    public static final enum org.apache.lucene.util.packed.PackedInts$Format PACKED_SINGLE_BLOCK;
    public int id;
    private static final org.apache.lucene.util.packed.PackedInts$Format[] $VALUES;
    static final boolean $assertionsDisabled;

    public static org.apache.lucene.util.packed.PackedInts$Format[] values()
    {
        org.apache.lucene.util.packed.PackedInts$Format[] $r0, $r2;
        java.lang.Object $r1;

        $r0 = <org.apache.lucene.util.packed.PackedInts$Format: org.apache.lucene.util.packed.PackedInts$Format[] $VALUES>;

        $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (org.apache.lucene.util.packed.PackedInts$Format[]) $r1;

        return $r2;
    }

    public static org.apache.lucene.util.packed.PackedInts$Format valueOf(java.lang.String)
    {
        java.lang.String r0;
        java.lang.Enum $r1;
        org.apache.lucene.util.packed.PackedInts$Format $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Lorg/apache/lucene/util/packed/PackedInts$Format;", r0);

        $r2 = (org.apache.lucene.util.packed.PackedInts$Format) $r1;

        return $r2;
    }

    public static org.apache.lucene.util.packed.PackedInts$Format byId(int)
    {
        org.apache.lucene.util.packed.PackedInts$Format r6;
        org.apache.lucene.util.packed.PackedInts$Format[] $r0;
        java.lang.IllegalArgumentException $r1;
        int i0, i1, $i2, i3;
        java.lang.StringBuilder $r2, $r3, $r4;
        java.lang.String $r5;

        i1 := @parameter0: int;

        $r0 = staticinvoke <org.apache.lucene.util.packed.PackedInts$Format: org.apache.lucene.util.packed.PackedInts$Format[] values()>();

        i0 = lengthof $r0;

        i3 = 0;

     label1:
        if i3 >= i0 goto label3;

        r6 = $r0[i3];

        $i2 = virtualinvoke r6.<org.apache.lucene.util.packed.PackedInts$Format: int getId()>();

        if $i2 != i1 goto label2;

        return r6;

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown format id: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r1;
    }

    private void <init>(java.lang.String, int, int)
    {
        org.apache.lucene.util.packed.PackedInts$Format r0;
        int i0, i1;
        java.lang.String r1;

        r0 := @this: org.apache.lucene.util.packed.PackedInts$Format;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        r0.<org.apache.lucene.util.packed.PackedInts$Format: int id> = i1;

        return;
    }

    public int getId()
    {
        int $i0;
        org.apache.lucene.util.packed.PackedInts$Format r0;

        r0 := @this: org.apache.lucene.util.packed.PackedInts$Format;

        $i0 = r0.<org.apache.lucene.util.packed.PackedInts$Format: int id>;

        return $i0;
    }

    public long byteCount(int, int, int)
    {
        org.apache.lucene.util.packed.PackedInts$Format r0;
        long $l4, $l5;
        java.lang.AssertionError $r1;
        int i0, i1, i2, $i3;
        boolean $z0;

        r0 := @this: org.apache.lucene.util.packed.PackedInts$Format;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        $z0 = <org.apache.lucene.util.packed.PackedInts$Format: boolean $assertionsDisabled>;

        if $z0 != 0 goto label2;

        if i2 < 0 goto label1;

        if i2 <= 64 goto label2;

     label1:
        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>(int)>(i2);

        throw $r1;

     label2:
        $i3 = virtualinvoke r0.<org.apache.lucene.util.packed.PackedInts$Format: int longCount(int,int,int)>(i0, i1, i2);

        $l4 = (long) $i3;

        $l5 = 8L * $l4;

        return $l5;
    }

    public int longCount(int, int, int)
    {
        long $l3, $l4, $l6, $l7, $l9;
        java.lang.AssertionError $r3, $r4;
        byte $b5, $b11;
        int i0, i1, i2, $i8, $i10, $i12;
        boolean $z0, $z1;
        org.apache.lucene.util.packed.PackedInts$Format r0;

        r0 := @this: org.apache.lucene.util.packed.PackedInts$Format;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        $z0 = <org.apache.lucene.util.packed.PackedInts$Format: boolean $assertionsDisabled>;

        if $z0 != 0 goto label2;

        if i2 < 0 goto label1;

        if i2 <= 64 goto label2;

     label1:
        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>(int)>(i2);

        throw $r3;

     label2:
        $l3 = virtualinvoke r0.<org.apache.lucene.util.packed.PackedInts$Format: long byteCount(int,int,int)>(i0, i1, i2);

        $z1 = <org.apache.lucene.util.packed.PackedInts$Format: boolean $assertionsDisabled>;

        if $z1 != 0 goto label3;

        $b11 = $l3 cmp 17179869176L;

        $i12 = (int) $b11;

        if $i12 < 0 goto label3;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label3:
        $l4 = $l3 % 8L;

        $b5 = $l4 cmp 0L;

        if $b5 != 0 goto label4;

        $l9 = $l3 / 8L;

        $i10 = (int) $l9;

        return $i10;

     label4:
        $l6 = $l3 / 8L;

        $l7 = $l6 + 1L;

        $i8 = (int) $l7;

        return $i8;
    }

    public boolean isSupported(int)
    {
        int i0;
        org.apache.lucene.util.packed.PackedInts$Format r0;
        boolean $z0;

        r0 := @this: org.apache.lucene.util.packed.PackedInts$Format;

        i0 := @parameter0: int;

        if i0 < 1 goto label1;

        if i0 > 64 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public float overheadPerValue(int)
    {
        org.apache.lucene.util.packed.PackedInts$Format r0;
        int i0;
        java.lang.AssertionError $r1;
        boolean $z0, $z1;

        r0 := @this: org.apache.lucene.util.packed.PackedInts$Format;

        i0 := @parameter0: int;

        $z0 = <org.apache.lucene.util.packed.PackedInts$Format: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r0.<org.apache.lucene.util.packed.PackedInts$Format: boolean isSupported(int)>(i0);

        if $z1 != 0 goto label1;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label1:
        return 0.0F;
    }

    public final float overheadRatio(int)
    {
        org.apache.lucene.util.packed.PackedInts$Format r0;
        java.lang.AssertionError $r1;
        int i0;
        float $f0, $f1, $f2;
        boolean $z0, $z1;

        r0 := @this: org.apache.lucene.util.packed.PackedInts$Format;

        i0 := @parameter0: int;

        $z0 = <org.apache.lucene.util.packed.PackedInts$Format: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r0.<org.apache.lucene.util.packed.PackedInts$Format: boolean isSupported(int)>(i0);

        if $z1 != 0 goto label1;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label1:
        $f0 = virtualinvoke r0.<org.apache.lucene.util.packed.PackedInts$Format: float overheadPerValue(int)>(i0);

        $f1 = (float) i0;

        $f2 = $f0 / $f1;

        return $f2;
    }

    void <init>(java.lang.String, int, int, org.apache.lucene.util.packed.PackedInts$1)
    {
        org.apache.lucene.util.packed.PackedInts$Format r0;
        int i0, i1;
        java.lang.String r1;
        org.apache.lucene.util.packed.PackedInts$1 r2;

        r0 := @this: org.apache.lucene.util.packed.PackedInts$Format;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 := @parameter3: org.apache.lucene.util.packed.PackedInts$1;

        specialinvoke r0.<org.apache.lucene.util.packed.PackedInts$Format: void <init>(java.lang.String,int,int)>(r1, i0, i1);

        return;
    }

    static void <clinit>()
    {
        org.apache.lucene.util.packed.PackedInts$Format $r4, $r5;
        org.apache.lucene.util.packed.PackedInts$Format[] $r3;
        java.lang.Class $r0;
        org.apache.lucene.util.packed.PackedInts$Format$1 $r1;
        org.apache.lucene.util.packed.PackedInts$Format$2 $r2;
        boolean $z0, $z1;

        $r0 = class "Lorg/apache/lucene/util/packed/PackedInts;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.lucene.util.packed.PackedInts$Format: boolean $assertionsDisabled> = $z1;

        $r1 = new org.apache.lucene.util.packed.PackedInts$Format$1;

        specialinvoke $r1.<org.apache.lucene.util.packed.PackedInts$Format$1: void <init>(java.lang.String,int,int)>("PACKED", 0, 0);

        <org.apache.lucene.util.packed.PackedInts$Format: org.apache.lucene.util.packed.PackedInts$Format PACKED> = $r1;

        $r2 = new org.apache.lucene.util.packed.PackedInts$Format$2;

        specialinvoke $r2.<org.apache.lucene.util.packed.PackedInts$Format$2: void <init>(java.lang.String,int,int)>("PACKED_SINGLE_BLOCK", 1, 1);

        <org.apache.lucene.util.packed.PackedInts$Format: org.apache.lucene.util.packed.PackedInts$Format PACKED_SINGLE_BLOCK> = $r2;

        $r3 = newarray (org.apache.lucene.util.packed.PackedInts$Format)[2];

        $r4 = <org.apache.lucene.util.packed.PackedInts$Format: org.apache.lucene.util.packed.PackedInts$Format PACKED>;

        $r3[0] = $r4;

        $r5 = <org.apache.lucene.util.packed.PackedInts$Format: org.apache.lucene.util.packed.PackedInts$Format PACKED_SINGLE_BLOCK>;

        $r3[1] = $r5;

        <org.apache.lucene.util.packed.PackedInts$Format: org.apache.lucene.util.packed.PackedInts$Format[] $VALUES> = $r3;

        return;
    }
}
