public class org.apache.jena.riot.lang.BlankNodeAllocatorLabel extends java.lang.Object implements org.apache.jena.riot.lang.BlankNodeAllocator
{
    private java.util.concurrent.atomic.AtomicLong counter;

    public void <init>()
    {
        java.util.concurrent.atomic.AtomicLong $r1;
        org.apache.jena.riot.lang.BlankNodeAllocatorLabel r0;

        r0 := @this: org.apache.jena.riot.lang.BlankNodeAllocatorLabel;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.concurrent.atomic.AtomicLong;

        specialinvoke $r1.<java.util.concurrent.atomic.AtomicLong: void <init>(long)>(0L);

        r0.<org.apache.jena.riot.lang.BlankNodeAllocatorLabel: java.util.concurrent.atomic.AtomicLong counter> = $r1;

        return;
    }

    public void reset()
    {
        java.util.concurrent.atomic.AtomicLong $r1;
        org.apache.jena.riot.lang.BlankNodeAllocatorLabel r0;

        r0 := @this: org.apache.jena.riot.lang.BlankNodeAllocatorLabel;

        $r1 = new java.util.concurrent.atomic.AtomicLong;

        specialinvoke $r1.<java.util.concurrent.atomic.AtomicLong: void <init>(long)>(0L);

        r0.<org.apache.jena.riot.lang.BlankNodeAllocatorLabel: java.util.concurrent.atomic.AtomicLong counter> = $r1;

        return;
    }

    public com.hp.hpl.jena.graph.Node alloc(java.lang.String)
    {
        java.lang.String r1;
        com.hp.hpl.jena.graph.Node $r2;
        org.apache.jena.riot.lang.BlankNodeAllocatorLabel r0;

        r0 := @this: org.apache.jena.riot.lang.BlankNodeAllocatorLabel;

        r1 := @parameter0: java.lang.String;

        $r2 = specialinvoke r0.<org.apache.jena.riot.lang.BlankNodeAllocatorLabel: com.hp.hpl.jena.graph.Node create(java.lang.String)>(r1);

        return $r2;
    }

    public com.hp.hpl.jena.graph.Node create()
    {
        org.apache.jena.riot.lang.BlankNodeAllocatorLabel r0;
        long $l0;
        com.hp.hpl.jena.graph.Node $r6;
        java.util.concurrent.atomic.AtomicLong $r1;
        java.lang.StringBuilder $r2, $r3, $r4;
        java.lang.String $r5;

        r0 := @this: org.apache.jena.riot.lang.BlankNodeAllocatorLabel;

        $r1 = r0.<org.apache.jena.riot.lang.BlankNodeAllocatorLabel: java.util.concurrent.atomic.AtomicLong counter>;

        $l0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLong: long getAndIncrement()>();

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("@");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = specialinvoke r0.<org.apache.jena.riot.lang.BlankNodeAllocatorLabel: com.hp.hpl.jena.graph.Node create(java.lang.String)>($r5);

        return $r6;
    }

    private com.hp.hpl.jena.graph.Node create(java.lang.String)
    {
        com.hp.hpl.jena.rdf.model.AnonId $r0;
        org.apache.jena.riot.lang.BlankNodeAllocatorLabel r3;
        java.lang.String r1;
        com.hp.hpl.jena.graph.Node $r2;

        r3 := @this: org.apache.jena.riot.lang.BlankNodeAllocatorLabel;

        r1 := @parameter0: java.lang.String;

        $r0 = new com.hp.hpl.jena.rdf.model.AnonId;

        specialinvoke $r0.<com.hp.hpl.jena.rdf.model.AnonId: void <init>(java.lang.String)>(r1);

        $r2 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createAnon(com.hp.hpl.jena.rdf.model.AnonId)>($r0);

        return $r2;
    }
}
