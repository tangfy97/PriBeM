public class org.springframework.web.context.support.ServletContextResource extends org.springframework.core.io.AbstractFileResolvingResource implements org.springframework.core.io.ContextResource
{
    private final javax.servlet.ServletContext servletContext;
    private final java.lang.String path;

    public void <init>(javax.servlet.ServletContext, java.lang.String)
    {
        org.springframework.web.context.support.ServletContextResource r0;
        javax.servlet.ServletContext r1;
        java.lang.StringBuilder $r4, $r5;
        java.lang.String r2, $r3, r6;
        boolean $z0;

        r0 := @this: org.springframework.web.context.support.ServletContextResource;

        r1 := @parameter0: javax.servlet.ServletContext;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<org.springframework.core.io.AbstractFileResolvingResource: void <init>()>();

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r1, "Cannot resolve ServletContextResource without ServletContext");

        r0.<org.springframework.web.context.support.ServletContextResource: javax.servlet.ServletContext servletContext> = r1;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r2, "Path is required");

        $r3 = staticinvoke <org.springframework.util.StringUtils: java.lang.String cleanPath(java.lang.String)>(r2);

        r6 = $r3;

        $z0 = virtualinvoke $r3.<java.lang.String: boolean startsWith(java.lang.String)>("/");

        if $z0 != 0 goto label1;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>("/");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

     label1:
        r0.<org.springframework.web.context.support.ServletContextResource: java.lang.String path> = r6;

        return;
    }

    public final javax.servlet.ServletContext getServletContext()
    {
        org.springframework.web.context.support.ServletContextResource r0;
        javax.servlet.ServletContext $r1;

        r0 := @this: org.springframework.web.context.support.ServletContextResource;

        $r1 = r0.<org.springframework.web.context.support.ServletContextResource: javax.servlet.ServletContext servletContext>;

        return $r1;
    }

    public final java.lang.String getPath()
    {
        org.springframework.web.context.support.ServletContextResource r0;
        java.lang.String $r1;

        r0 := @this: org.springframework.web.context.support.ServletContextResource;

        $r1 = r0.<org.springframework.web.context.support.ServletContextResource: java.lang.String path>;

        return $r1;
    }

    public boolean exists()
    {
        java.net.MalformedURLException $r4;
        java.net.URL $r3;
        org.springframework.web.context.support.ServletContextResource r0;
        javax.servlet.ServletContext $r2;
        java.lang.String $r1;

        r0 := @this: org.springframework.web.context.support.ServletContextResource;

     label1:
        $r2 = r0.<org.springframework.web.context.support.ServletContextResource: javax.servlet.ServletContext servletContext>;

        $r1 = r0.<org.springframework.web.context.support.ServletContextResource: java.lang.String path>;

        $r3 = interfaceinvoke $r2.<javax.servlet.ServletContext: java.net.URL getResource(java.lang.String)>($r1);

        if $r3 == null goto label2;

        return 1;

     label2:
        return 0;

     label3:
        $r4 := @caughtexception;

        return 0;

        catch java.net.MalformedURLException from label1 to label2 with label3;
    }

    public java.io.InputStream getInputStream() throws java.io.IOException
    {
        java.io.FileNotFoundException $r4;
        org.springframework.web.context.support.ServletContextResource r0;
        javax.servlet.ServletContext $r2;
        java.lang.StringBuilder $r5, $r7;
        java.lang.String $r1, $r6, $r8;
        java.io.InputStream $r3;

        r0 := @this: org.springframework.web.context.support.ServletContextResource;

        $r2 = r0.<org.springframework.web.context.support.ServletContextResource: javax.servlet.ServletContext servletContext>;

        $r1 = r0.<org.springframework.web.context.support.ServletContextResource: java.lang.String path>;

        $r3 = interfaceinvoke $r2.<javax.servlet.ServletContext: java.io.InputStream getResourceAsStream(java.lang.String)>($r1);

        if $r3 != null goto label1;

        $r4 = new java.io.FileNotFoundException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>("Could not open ");

        $r6 = virtualinvoke r0.<org.springframework.web.context.support.ServletContextResource: java.lang.String getDescription()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.io.FileNotFoundException: void <init>(java.lang.String)>($r8);

        throw $r4;

     label1:
        return $r3;
    }

    public java.net.URL getURL() throws java.io.IOException
    {
        java.net.URL $r3;
        java.io.FileNotFoundException $r4;
        org.springframework.web.context.support.ServletContextResource r0;
        javax.servlet.ServletContext $r2;
        java.lang.StringBuilder $r5, $r8;
        java.lang.String $r1, $r6, $r7, $r9;

        r0 := @this: org.springframework.web.context.support.ServletContextResource;

        $r2 = r0.<org.springframework.web.context.support.ServletContextResource: javax.servlet.ServletContext servletContext>;

        $r1 = r0.<org.springframework.web.context.support.ServletContextResource: java.lang.String path>;

        $r3 = interfaceinvoke $r2.<javax.servlet.ServletContext: java.net.URL getResource(java.lang.String)>($r1);

        if $r3 != null goto label1;

        $r4 = new java.io.FileNotFoundException;

        $r5 = new java.lang.StringBuilder;

        $r6 = virtualinvoke r0.<org.springframework.web.context.support.ServletContextResource: java.lang.String getDescription()>();

        $r7 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r6);

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>($r7);

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" cannot be resolved to URL because it does not exist");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.io.FileNotFoundException: void <init>(java.lang.String)>($r9);

        throw $r4;

     label1:
        return $r3;
    }

    public java.io.File getFile() throws java.io.IOException
    {
        org.springframework.web.context.support.ServletContextResource r0;
        javax.servlet.ServletContext $r2;
        java.lang.String $r1, $r3;
        java.io.File $r4;

        r0 := @this: org.springframework.web.context.support.ServletContextResource;

        $r2 = r0.<org.springframework.web.context.support.ServletContextResource: javax.servlet.ServletContext servletContext>;

        $r1 = r0.<org.springframework.web.context.support.ServletContextResource: java.lang.String path>;

        $r3 = staticinvoke <org.springframework.web.util.WebUtils: java.lang.String getRealPath(javax.servlet.ServletContext,java.lang.String)>($r2, $r1);

        $r4 = new java.io.File;

        specialinvoke $r4.<java.io.File: void <init>(java.lang.String)>($r3);

        return $r4;
    }

    public org.springframework.core.io.Resource createRelative(java.lang.String)
    {
        org.springframework.web.context.support.ServletContextResource r0, $r4;
        javax.servlet.ServletContext $r5;
        java.lang.String r1, $r2, $r3;

        r0 := @this: org.springframework.web.context.support.ServletContextResource;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.springframework.web.context.support.ServletContextResource: java.lang.String path>;

        $r3 = staticinvoke <org.springframework.util.StringUtils: java.lang.String applyRelativePath(java.lang.String,java.lang.String)>($r2, r1);

        $r4 = new org.springframework.web.context.support.ServletContextResource;

        $r5 = r0.<org.springframework.web.context.support.ServletContextResource: javax.servlet.ServletContext servletContext>;

        specialinvoke $r4.<org.springframework.web.context.support.ServletContextResource: void <init>(javax.servlet.ServletContext,java.lang.String)>($r5, $r3);

        return $r4;
    }

    public java.lang.String getFilename()
    {
        org.springframework.web.context.support.ServletContextResource r0;
        java.lang.String $r1, $r2;

        r0 := @this: org.springframework.web.context.support.ServletContextResource;

        $r1 = r0.<org.springframework.web.context.support.ServletContextResource: java.lang.String path>;

        $r2 = staticinvoke <org.springframework.util.StringUtils: java.lang.String getFilename(java.lang.String)>($r1);

        return $r2;
    }

    public java.lang.String getDescription()
    {
        org.springframework.web.context.support.ServletContextResource r1;
        java.lang.StringBuilder $r0, $r3, $r4;
        java.lang.String $r2, $r5;

        r1 := @this: org.springframework.web.context.support.ServletContextResource;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>(java.lang.String)>("ServletContext resource [");

        $r2 = r1.<org.springframework.web.context.support.ServletContextResource: java.lang.String path>;

        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    public java.lang.String getPathWithinContext()
    {
        org.springframework.web.context.support.ServletContextResource r0;
        java.lang.String $r1;

        r0 := @this: org.springframework.web.context.support.ServletContextResource;

        $r1 = r0.<org.springframework.web.context.support.ServletContextResource: java.lang.String path>;

        return $r1;
    }

    public boolean equals(java.lang.Object)
    {
        org.springframework.web.context.support.ServletContextResource r1, r2;
        java.lang.Object r0;
        javax.servlet.ServletContext $r3, $r4;
        java.lang.String $r5, $r6;
        boolean $z0, $z1, $z2;

        r1 := @this: org.springframework.web.context.support.ServletContextResource;

        r0 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = r0 instanceof org.springframework.web.context.support.ServletContextResource;

        if $z0 == 0 goto label3;

        r2 = (org.springframework.web.context.support.ServletContextResource) r0;

        $r4 = r1.<org.springframework.web.context.support.ServletContextResource: javax.servlet.ServletContext servletContext>;

        $r3 = r2.<org.springframework.web.context.support.ServletContextResource: javax.servlet.ServletContext servletContext>;

        $z1 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>($r3);

        if $z1 == 0 goto label2;

        $r6 = r1.<org.springframework.web.context.support.ServletContextResource: java.lang.String path>;

        $r5 = r2.<org.springframework.web.context.support.ServletContextResource: java.lang.String path>;

        $z2 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z2 == 0 goto label2;

        return 1;

     label2:
        return 0;

     label3:
        return 0;
    }

    public int hashCode()
    {
        int $i0;
        org.springframework.web.context.support.ServletContextResource r0;
        java.lang.String $r1;

        r0 := @this: org.springframework.web.context.support.ServletContextResource;

        $r1 = r0.<org.springframework.web.context.support.ServletContextResource: java.lang.String path>;

        $i0 = virtualinvoke $r1.<java.lang.String: int hashCode()>();

        return $i0;
    }
}
