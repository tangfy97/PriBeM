public class ucar.nc2.units.DateFromString extends java.lang.Object
{

    public void <init>()
    {
        ucar.nc2.units.DateFromString r0;

        r0 := @this: ucar.nc2.units.DateFromString;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.util.Date getDateUsingSimpleDateFormat(java.lang.String, java.lang.String)
    {
        java.util.Date $r2;
        int $i0, $i1, i2, i3, $i5;
        java.lang.String r0, r1, $r3;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        i2 = $i0;

        if $i0 != 0 goto label1;

        return null;

     label1:
        i3 = 0;

     label2:
        if i3 >= 10 goto label4;

        $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(i3);

        $i1 = virtualinvoke r0.<java.lang.String: int indexOf(java.lang.String)>($r3);

        $i5 = (int) -1;

        if $i1 == $i5 goto label3;

        if i2 <= $i1 goto label3;

        i2 = $i1;

     label3:
        i3 = i3 + 1;

        goto label2;

     label4:
        $r2 = staticinvoke <ucar.nc2.units.DateFromString: java.util.Date getDateUsingCompleteDateFormatWithOffset(java.lang.String,java.lang.String,int)>(r0, r1, i2);

        return $r2;
    }

    public static java.util.Date getDateUsingDemarkatedCount(java.lang.String, java.lang.String, char)
    {
        java.util.Date $r2;
        char c0;
        int $i1, $i2, $i3;
        java.lang.String $r0, r1, r3;

        r1 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        c0 := @parameter2: char;

        $i3 = (int) c0;

        $i1 = virtualinvoke r3.<java.lang.String: int indexOf(int)>($i3);

        $i2 = $i1 + 1;

        $r0 = virtualinvoke r3.<java.lang.String: java.lang.String substring(int)>($i2);

        $r2 = staticinvoke <ucar.nc2.units.DateFromString: java.util.Date getDateUsingCompleteDateFormatWithOffset(java.lang.String,java.lang.String,int)>(r1, $r0, $i1);

        return $r2;
    }

    public static java.util.Date getDateUsingDemarkatedMatch(java.lang.String, java.lang.String, char)
    {
        java.util.Date $r1;
        int $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12;
        java.lang.String $r0, $r2, r3, r4, r5, r6;
        char c0;

        r3 := @parameter0: java.lang.String;

        r4 := @parameter1: java.lang.String;

        c0 := @parameter2: char;

        $i11 = (int) c0;

        $i1 = virtualinvoke r4.<java.lang.String: int indexOf(int)>($i11);

        $i2 = $i1 + 1;

        $i12 = (int) c0;

        $i3 = virtualinvoke r4.<java.lang.String: int indexOf(int,int)>($i12, $i2);

        if $i1 < 0 goto label1;

        if $i3 >= 0 goto label2;

     label1:
        return null;

     label2:
        $i4 = $i1 + 1;

        $r0 = virtualinvoke r4.<java.lang.String: java.lang.String substring(int,int)>($i4, $i3);

        $i5 = virtualinvoke r3.<java.lang.String: int indexOf(java.lang.String)>($r0);

        if $i5 >= 0 goto label3;

        return null;

     label3:
        if $i1 <= 0 goto label4;

        $r2 = virtualinvoke r4.<java.lang.String: java.lang.String substring(int,int)>(0, $i1);

        r5 = $r2;

        $i9 = virtualinvoke $r2.<java.lang.String: int length()>();

        $i10 = $i5 - $i9;

        r6 = virtualinvoke r3.<java.lang.String: java.lang.String substring(int,int)>($i10, $i5);

        goto label5;

     label4:
        $i6 = $i3 + 1;

        r5 = virtualinvoke r4.<java.lang.String: java.lang.String substring(int)>($i6);

        $i7 = virtualinvoke $r0.<java.lang.String: int length()>();

        $i8 = $i5 + $i7;

        r6 = virtualinvoke r3.<java.lang.String: java.lang.String substring(int)>($i8);

     label5:
        $r1 = staticinvoke <ucar.nc2.units.DateFromString: java.util.Date getDateUsingCompleteDateFormatWithOffset(java.lang.String,java.lang.String,int)>(r6, r5, 0);

        return $r1;
    }

    public static java.lang.Double getHourUsingDemarkatedMatch(java.lang.String, java.lang.String, char)
    {
        java.lang.Double $r2;
        int $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, $i9, i10, $i11, $i12, $i13, $i14;
        java.lang.String r0, $r1, r3, r4;
        char c0;

        r3 := @parameter0: java.lang.String;

        r0 := @parameter1: java.lang.String;

        c0 := @parameter2: char;

        $i13 = (int) c0;

        $i1 = virtualinvoke r0.<java.lang.String: int indexOf(int)>($i13);

        $i2 = $i1 + 1;

        $i14 = (int) c0;

        $i3 = virtualinvoke r0.<java.lang.String: int indexOf(int,int)>($i14, $i2);

        if $i1 < 0 goto label1;

        if $i3 >= 0 goto label2;

     label1:
        return null;

     label2:
        $i4 = $i1 + 1;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>($i4, $i3);

        $i5 = virtualinvoke r3.<java.lang.String: int indexOf(java.lang.String)>($r1);

        if $i5 >= 0 goto label3;

        return null;

     label3:
        if $i1 <= 0 goto label4;

        $i12 = $i5 - $i1;

        r4 = virtualinvoke r3.<java.lang.String: java.lang.String substring(int,int)>($i12, $i5);

        goto label5;

     label4:
        $i6 = virtualinvoke r0.<java.lang.String: int length()>();

        $i7 = $i6 - $i3;

        i8 = $i7 - 1;

        $i9 = virtualinvoke $r1.<java.lang.String: int length()>();

        i10 = $i5 + $i9;

        $i11 = i10 + i8;

        r4 = virtualinvoke r3.<java.lang.String: java.lang.String substring(int,int)>(i10, $i11);

     label5:
        $r2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(java.lang.String)>(r4);

        return $r2;
    }

    public static java.util.Date getDateUsingCompleteDateFormat(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1;
        java.util.Date $r2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $r2 = staticinvoke <ucar.nc2.units.DateFromString: java.util.Date getDateUsingCompleteDateFormatWithOffset(java.lang.String,java.lang.String,int)>(r0, r1, 0);

        return $r2;
    }

    public static java.util.Date getDateUsingCompleteDateFormatWithOffset(java.lang.String, java.lang.String, int)
    {
        java.util.Date $r6;
        java.util.Locale $r2;
        java.text.ParseException $r25;
        java.util.TimeZone $r3;
        java.lang.StringBuilder $r8, $r9, $r10, $r11, $r12, $r16, $r17, $r18, $r19, $r20, $r21, $r23, $r27, $r28, $r29, $r30, $r31, $r32, $r34;
        java.text.SimpleDateFormat $r0;
        int i0, $i1, $i2;
        java.lang.String r1, r4, $r5, $r13, $r22, $r24, $r33, $r35;
        java.lang.RuntimeException $r7, $r15, $r26;
        java.lang.IllegalArgumentException $r14;

        r4 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

     label1:
        $r0 = new java.text.SimpleDateFormat;

        $r2 = <java.util.Locale: java.util.Locale US>;

        specialinvoke $r0.<java.text.SimpleDateFormat: void <init>(java.lang.String,java.util.Locale)>(r1, $r2);

        $r3 = staticinvoke <java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>("GMT");

        virtualinvoke $r0.<java.text.SimpleDateFormat: void setTimeZone(java.util.TimeZone)>($r3);

        $i1 = virtualinvoke r1.<java.lang.String: int length()>();

        $i2 = i0 + $i1;

        $r5 = virtualinvoke r4.<java.lang.String: java.lang.String substring(int,int)>(i0, $i2);

        $r6 = virtualinvoke $r0.<java.text.SimpleDateFormat: java.util.Date parse(java.lang.String)>($r5);

        if $r6 != null goto label2;

        $r7 = new java.lang.RuntimeException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SimpleDateFormat bad =");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" working on =");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.RuntimeException: void <init>(java.lang.String)>($r13);

        throw $r7;

     label2:
        return $r6;

     label3:
        $r25 := @caughtexception;

        $r26 = new java.lang.RuntimeException;

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>()>();

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SimpleDateFormat = ");

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" fails on ");

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ParseException:");

        $r33 = virtualinvoke $r25.<java.text.ParseException: java.lang.String getMessage()>();

        $r34 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r33);

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r26.<java.lang.RuntimeException: void <init>(java.lang.String)>($r35);

        throw $r26;

     label4:
        $r14 := @caughtexception;

        $r15 = new java.lang.RuntimeException;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SimpleDateFormat = ");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" fails on ");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" IllegalArgumentException:");

        $r22 = virtualinvoke $r14.<java.lang.IllegalArgumentException: java.lang.String getMessage()>();

        $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r15.<java.lang.RuntimeException: void <init>(java.lang.String)>($r24);

        throw $r15;

        catch java.text.ParseException from label1 to label2 with label3;
        catch java.lang.IllegalArgumentException from label1 to label2 with label4;
    }

    public static java.util.Date getDateUsingRegExp(java.lang.String, java.lang.String, java.lang.String)
    {
        java.util.Date $r3;
        java.lang.String r0, r1, r2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        $r3 = staticinvoke <ucar.nc2.units.DateFromString: java.util.Date getDateUsingRegExpAndDateFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(r0, r1, r2, "yyyy-MM-dd\'T\'HH:mm");

        return $r3;
    }

    public static java.util.Date getDateUsingRegExpAndDateFormat(java.lang.String, java.lang.String, java.lang.String, java.lang.String)
    {
        java.util.Date $r8;
        java.util.regex.Matcher $r3;
        java.lang.StringBuffer $r4;
        int $i0;
        java.lang.String r0, r2, r5, $r6, r7;
        java.util.regex.Pattern $r1;
        boolean $z0;

        r2 := @parameter0: java.lang.String;

        r0 := @parameter1: java.lang.String;

        r5 := @parameter2: java.lang.String;

        r7 := @parameter3: java.lang.String;

        $r1 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>(r0);

        $r3 = virtualinvoke $r1.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r2);

        $z0 = virtualinvoke $r3.<java.util.regex.Matcher: boolean matches()>();

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        virtualinvoke $r3.<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>($r4, r5);

        $i0 = virtualinvoke $r4.<java.lang.StringBuffer: int length()>();

        if $i0 != 0 goto label2;

        return null;

     label2:
        $r6 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        $r8 = staticinvoke <ucar.nc2.units.DateFromString: java.util.Date getDateUsingCompleteDateFormat(java.lang.String,java.lang.String)>($r6, r7);

        return $r8;
    }

    public static void main(java.lang.String[]) throws java.text.ParseException
    {
        java.util.Date $r1, $r8, $r17, $r20;
        java.text.SimpleDateFormat $r15, $r18;
        java.lang.String[] r21;
        java.lang.String $r5, $r7, $r12, $r14;
        java.io.PrintStream $r3, $r10, $r16, $r19;
        java.lang.StringBuilder $r2, $r4, $r6, $r9, $r11, $r13;
        ucar.nc2.units.DateFormatter $r0;

        r21 := @parameter0: java.lang.String[];

        $r0 = new ucar.nc2.units.DateFormatter;

        specialinvoke $r0.<ucar.nc2.units.DateFormatter: void <init>()>();

        $r1 = staticinvoke <ucar.nc2.units.DateFromString: java.util.Date getDateUsingDemarkatedMatch(java.lang.String,java.lang.String,char)>("/data/anything/2006070611/wrfout_d01_2006-07-06_080000.nc", "#wrfout_d01_#yyyy-MM-dd_HHmm", 35);

        $r3 = <java.lang.System: java.io.PrintStream out>;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" 2006-07-06_080000 -> ");

        $r5 = virtualinvoke $r0.<ucar.nc2.units.DateFormatter: java.lang.String toDateTimeStringISO(java.util.Date)>($r1);

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>($r7);

        $r8 = staticinvoke <ucar.nc2.units.DateFromString: java.util.Date getDateUsingDemarkatedMatch(java.lang.String,java.lang.String,char)>("C:\\data\\nomads\\gfs-hi\\gfs_3_20061129_0600", "#gfs_3_#yyyyMMdd_HH", 35);

        $r10 = <java.lang.System: java.io.PrintStream out>;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" 20061129_06 -> ");

        $r12 = virtualinvoke $r0.<ucar.nc2.units.DateFormatter: java.lang.String toDateTimeStringISO(java.util.Date)>($r8);

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>($r14);

        $r16 = <java.lang.System: java.io.PrintStream out>;

        $r15 = new java.text.SimpleDateFormat;

        specialinvoke $r15.<java.text.SimpleDateFormat: void <init>(java.lang.String)>("yyyyMMdd_HH");

        $r17 = virtualinvoke $r15.<java.text.SimpleDateFormat: java.util.Date parse(java.lang.String)>("20061129_06");

        virtualinvoke $r16.<java.io.PrintStream: void println(java.lang.Object)>($r17);

        $r19 = <java.lang.System: java.io.PrintStream out>;

        $r18 = new java.text.SimpleDateFormat;

        specialinvoke $r18.<java.text.SimpleDateFormat: void <init>(java.lang.String)>("yyyyMMdd_HH");

        $r20 = virtualinvoke $r18.<java.text.SimpleDateFormat: java.util.Date parse(java.lang.String)>("20061129_0600");

        virtualinvoke $r19.<java.io.PrintStream: void println(java.lang.Object)>($r20);

        return;
    }
}
