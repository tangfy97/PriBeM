public class org.apache.poi.ss.util.CellRangeAddress extends org.apache.poi.ss.util.CellRangeAddressBase
{
    public static final int ENCODED_SIZE;

    public void <init>(int, int, int, int)
    {
        org.apache.poi.ss.util.CellRangeAddress r0;
        int i0, i1, i2, i3;

        r0 := @this: org.apache.poi.ss.util.CellRangeAddress;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        specialinvoke r0.<org.apache.poi.ss.util.CellRangeAddressBase: void <init>(int,int,int,int)>(i0, i1, i2, i3);

        return;
    }

    public int serialize(int, byte[])
    {
        org.apache.poi.ss.util.CellRangeAddress r0;
        byte[] r2;
        int i0;
        org.apache.poi.util.LittleEndianByteArrayOutputStream $r1;

        r0 := @this: org.apache.poi.ss.util.CellRangeAddress;

        i0 := @parameter0: int;

        r2 := @parameter1: byte[];

        $r1 = new org.apache.poi.util.LittleEndianByteArrayOutputStream;

        specialinvoke $r1.<org.apache.poi.util.LittleEndianByteArrayOutputStream: void <init>(byte[],int,int)>(r2, i0, 8);

        virtualinvoke r0.<org.apache.poi.ss.util.CellRangeAddress: void serialize(org.apache.poi.util.LittleEndianOutput)>($r1);

        return 8;
    }

    public void serialize(org.apache.poi.util.LittleEndianOutput)
    {
        org.apache.poi.ss.util.CellRangeAddress r1;
        org.apache.poi.util.LittleEndianOutput r0;
        int $i0, $i1, $i2, $i3;

        r1 := @this: org.apache.poi.ss.util.CellRangeAddress;

        r0 := @parameter0: org.apache.poi.util.LittleEndianOutput;

        $i0 = virtualinvoke r1.<org.apache.poi.ss.util.CellRangeAddress: int getFirstRow()>();

        interfaceinvoke r0.<org.apache.poi.util.LittleEndianOutput: void writeShort(int)>($i0);

        $i1 = virtualinvoke r1.<org.apache.poi.ss.util.CellRangeAddress: int getLastRow()>();

        interfaceinvoke r0.<org.apache.poi.util.LittleEndianOutput: void writeShort(int)>($i1);

        $i2 = virtualinvoke r1.<org.apache.poi.ss.util.CellRangeAddress: int getFirstColumn()>();

        interfaceinvoke r0.<org.apache.poi.util.LittleEndianOutput: void writeShort(int)>($i2);

        $i3 = virtualinvoke r1.<org.apache.poi.ss.util.CellRangeAddress: int getLastColumn()>();

        interfaceinvoke r0.<org.apache.poi.util.LittleEndianOutput: void writeShort(int)>($i3);

        return;
    }

    public void <init>(org.apache.poi.hssf.record.RecordInputStream)
    {
        org.apache.poi.ss.util.CellRangeAddress r0;
        org.apache.poi.hssf.record.RecordInputStream r1;
        int $i0, $i1, $i2, $i3;

        r0 := @this: org.apache.poi.ss.util.CellRangeAddress;

        r1 := @parameter0: org.apache.poi.hssf.record.RecordInputStream;

        $i0 = staticinvoke <org.apache.poi.ss.util.CellRangeAddress: int readUShortAndCheck(org.apache.poi.hssf.record.RecordInputStream)>(r1);

        $i1 = virtualinvoke r1.<org.apache.poi.hssf.record.RecordInputStream: int readUShort()>();

        $i2 = virtualinvoke r1.<org.apache.poi.hssf.record.RecordInputStream: int readUShort()>();

        $i3 = virtualinvoke r1.<org.apache.poi.hssf.record.RecordInputStream: int readUShort()>();

        specialinvoke r0.<org.apache.poi.ss.util.CellRangeAddressBase: void <init>(int,int,int,int)>($i0, $i1, $i2, $i3);

        return;
    }

    private static int readUShortAndCheck(org.apache.poi.hssf.record.RecordInputStream)
    {
        org.apache.poi.hssf.record.RecordInputStream r0;
        int $i0, $i1;
        java.lang.RuntimeException $r1;

        r0 := @parameter0: org.apache.poi.hssf.record.RecordInputStream;

        $i0 = virtualinvoke r0.<org.apache.poi.hssf.record.RecordInputStream: int remaining()>();

        if $i0 >= 8 goto label1;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Ran out of data reading CellRangeAddress");

        throw $r1;

     label1:
        $i1 = virtualinvoke r0.<org.apache.poi.hssf.record.RecordInputStream: int readUShort()>();

        return $i1;
    }

    public org.apache.poi.ss.util.CellRangeAddress copy()
    {
        org.apache.poi.ss.util.CellRangeAddress $r0, r1;
        int $i0, $i1, $i2, $i3;

        r1 := @this: org.apache.poi.ss.util.CellRangeAddress;

        $r0 = new org.apache.poi.ss.util.CellRangeAddress;

        $i0 = virtualinvoke r1.<org.apache.poi.ss.util.CellRangeAddress: int getFirstRow()>();

        $i1 = virtualinvoke r1.<org.apache.poi.ss.util.CellRangeAddress: int getLastRow()>();

        $i2 = virtualinvoke r1.<org.apache.poi.ss.util.CellRangeAddress: int getFirstColumn()>();

        $i3 = virtualinvoke r1.<org.apache.poi.ss.util.CellRangeAddress: int getLastColumn()>();

        specialinvoke $r0.<org.apache.poi.ss.util.CellRangeAddress: void <init>(int,int,int,int)>($i0, $i1, $i2, $i3);

        return $r0;
    }

    public static int getEncodedSize(int)
    {
        int i0, $i1;

        i0 := @parameter0: int;

        $i1 = i0 * 8;

        return $i1;
    }

    public java.lang.String formatAsString()
    {
        org.apache.poi.ss.util.CellRangeAddress r0;
        java.lang.String $r1;

        r0 := @this: org.apache.poi.ss.util.CellRangeAddress;

        $r1 = virtualinvoke r0.<org.apache.poi.ss.util.CellRangeAddress: java.lang.String formatAsString(java.lang.String,boolean)>(null, 0);

        return $r1;
    }

    public java.lang.String formatAsString(java.lang.String, boolean)
    {
        org.apache.poi.ss.util.CellReference $r2, $r4;
        java.lang.StringBuffer $r0;
        int $i0, $i1, $i2, $i3;
        java.lang.String r1, $r5, $r6, $r7, $r8;
        boolean z0, $z1, $z2, $z3;
        org.apache.poi.ss.util.CellRangeAddress r3;

        r3 := @this: org.apache.poi.ss.util.CellRangeAddress;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        if r1 == null goto label1;

        $r6 = staticinvoke <org.apache.poi.ss.formula.SheetNameFormatter: java.lang.String format(java.lang.String)>(r1);

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("!");

     label1:
        $r2 = new org.apache.poi.ss.util.CellReference;

        $i0 = virtualinvoke r3.<org.apache.poi.ss.util.CellRangeAddress: int getFirstRow()>();

        $i1 = virtualinvoke r3.<org.apache.poi.ss.util.CellRangeAddress: int getFirstColumn()>();

        specialinvoke $r2.<org.apache.poi.ss.util.CellReference: void <init>(int,int,boolean,boolean)>($i0, $i1, z0, z0);

        $r4 = new org.apache.poi.ss.util.CellReference;

        $i2 = virtualinvoke r3.<org.apache.poi.ss.util.CellRangeAddress: int getLastRow()>();

        $i3 = virtualinvoke r3.<org.apache.poi.ss.util.CellRangeAddress: int getLastColumn()>();

        specialinvoke $r4.<org.apache.poi.ss.util.CellReference: void <init>(int,int,boolean,boolean)>($i2, $i3, z0, z0);

        $r5 = virtualinvoke $r2.<org.apache.poi.ss.util.CellReference: java.lang.String formatAsString()>();

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $z1 = virtualinvoke $r2.<org.apache.poi.ss.util.CellReference: boolean equals(java.lang.Object)>($r4);

        if $z1 == 0 goto label2;

        $z2 = virtualinvoke r3.<org.apache.poi.ss.util.CellRangeAddress: boolean isFullColumnRange()>();

        if $z2 != 0 goto label2;

        $z3 = virtualinvoke r3.<org.apache.poi.ss.util.CellRangeAddress: boolean isFullRowRange()>();

        if $z3 == 0 goto label3;

     label2:
        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(58);

        $r7 = virtualinvoke $r4.<org.apache.poi.ss.util.CellReference: java.lang.String formatAsString()>();

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

     label3:
        $r8 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r8;
    }

    public static org.apache.poi.ss.util.CellRangeAddress valueOf(java.lang.String)
    {
        org.apache.poi.ss.util.CellReference r7, r8, $r9, $r10, $r11;
        short $s4, $s5;
        int $i0, $i1, $i2, $i3, $i7, $i8, $i9;
        java.lang.String r0, $r2, $r4;
        org.apache.poi.ss.util.CellRangeAddress $r12;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int indexOf(java.lang.String)>(":");

        $i7 = (int) -1;

        if $i0 != $i7 goto label1;

        $r9 = new org.apache.poi.ss.util.CellReference;

        specialinvoke $r9.<org.apache.poi.ss.util.CellReference: void <init>(java.lang.String)>(r0);

        r7 = $r9;

        r8 = $r9;

        goto label2;

     label1:
        $r10 = new org.apache.poi.ss.util.CellReference;

        $r2 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        specialinvoke $r10.<org.apache.poi.ss.util.CellReference: void <init>(java.lang.String)>($r2);

        r7 = $r10;

        $r11 = new org.apache.poi.ss.util.CellReference;

        $i1 = $i0 + 1;

        $r4 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>($i1);

        specialinvoke $r11.<org.apache.poi.ss.util.CellReference: void <init>(java.lang.String)>($r4);

        r8 = $r11;

     label2:
        $r12 = new org.apache.poi.ss.util.CellRangeAddress;

        $i2 = virtualinvoke r7.<org.apache.poi.ss.util.CellReference: int getRow()>();

        $i3 = virtualinvoke r8.<org.apache.poi.ss.util.CellReference: int getRow()>();

        $s4 = virtualinvoke r7.<org.apache.poi.ss.util.CellReference: short getCol()>();

        $s5 = virtualinvoke r8.<org.apache.poi.ss.util.CellReference: short getCol()>();

        $i8 = (int) $s4;

        $i9 = (int) $s5;

        specialinvoke $r12.<org.apache.poi.ss.util.CellRangeAddress: void <init>(int,int,int,int)>($i2, $i3, $i8, $i9);

        return $r12;
    }

    public static void <clinit>()
    {
        <org.apache.poi.ss.util.CellRangeAddress: int ENCODED_SIZE> = 8;

        return;
    }
}
