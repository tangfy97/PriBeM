public class com.google.inject.internal.MoreTypes extends java.lang.Object
{
    public static final java.lang.reflect.Type[] EMPTY_TYPE_ARRAY;
    private static final java.util.Map PRIMITIVE_TO_WRAPPER;

    private void <init>()
    {
        com.google.inject.internal.MoreTypes r0;

        r0 := @this: com.google.inject.internal.MoreTypes;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static com.google.inject.TypeLiteral canonicalizeForKey(com.google.inject.TypeLiteral)
    {
        java.util.Map $r3;
        boolean $z0;
        com.google.inject.ConfigurationException $r11;
        com.google.inject.internal.Errors $r9, $r10;
        java.util.List $r12;
        java.lang.reflect.ParameterizedType $r7, r13;
        java.lang.reflect.Type $r1, $r6;
        java.lang.reflect.Type[] $r5;
        java.lang.Class $r2;
        java.lang.Object $r4;
        com.google.inject.TypeLiteral r0, $r8, r14, $r15;

        r0 := @parameter0: com.google.inject.TypeLiteral;

        $r1 = virtualinvoke r0.<com.google.inject.TypeLiteral: java.lang.reflect.Type getType()>();

        $z0 = staticinvoke <com.google.inject.internal.MoreTypes: boolean isFullySpecified(java.lang.reflect.Type)>($r1);

        if $z0 != 0 goto label1;

        $r9 = new com.google.inject.internal.Errors;

        specialinvoke $r9.<com.google.inject.internal.Errors: void <init>()>();

        $r10 = virtualinvoke $r9.<com.google.inject.internal.Errors: com.google.inject.internal.Errors keyNotFullySpecified(com.google.inject.TypeLiteral)>(r0);

        $r11 = new com.google.inject.ConfigurationException;

        $r12 = virtualinvoke $r10.<com.google.inject.internal.Errors: java.util.List getMessages()>();

        specialinvoke $r11.<com.google.inject.ConfigurationException: void <init>(java.lang.Iterable)>($r12);

        throw $r11;

     label1:
        $r2 = virtualinvoke r0.<com.google.inject.TypeLiteral: java.lang.Class getRawType()>();

        if $r2 != class "Ljavax/inject/Provider;" goto label2;

        r13 = (java.lang.reflect.ParameterizedType) $r1;

        $r5 = interfaceinvoke r13.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();

        $r6 = $r5[0];

        $r7 = staticinvoke <com.google.inject.util.Types: java.lang.reflect.ParameterizedType providerOf(java.lang.reflect.Type)>($r6);

        $r8 = staticinvoke <com.google.inject.TypeLiteral: com.google.inject.TypeLiteral get(java.lang.reflect.Type)>($r7);

        return $r8;

     label2:
        $r3 = <com.google.inject.internal.MoreTypes: java.util.Map PRIMITIVE_TO_WRAPPER>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0);

        r14 = (com.google.inject.TypeLiteral) $r4;

        if r14 == null goto label3;

        $r15 = r14;

        goto label4;

     label3:
        $r15 = r0;

     label4:
        return $r15;
    }

    private static boolean isFullySpecified(java.lang.reflect.Type)
    {
        com.google.inject.internal.MoreTypes$CompositeType $r2, $r3;
        java.lang.reflect.Type r0, $r1;
        boolean $z0, $z1, $z2, $z3, $z4;

        r0 := @parameter0: java.lang.reflect.Type;

        $z0 = r0 instanceof java.lang.Class;

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $z1 = r0 instanceof com.google.inject.internal.MoreTypes$CompositeType;

        if $z1 == 0 goto label2;

        $r3 = (com.google.inject.internal.MoreTypes$CompositeType) r0;

        $z4 = interfaceinvoke $r3.<com.google.inject.internal.MoreTypes$CompositeType: boolean isFullySpecified()>();

        return $z4;

     label2:
        $z2 = r0 instanceof java.lang.reflect.TypeVariable;

        if $z2 == 0 goto label3;

        return 0;

     label3:
        $r1 = staticinvoke <com.google.inject.internal.MoreTypes: java.lang.reflect.Type canonicalize(java.lang.reflect.Type)>(r0);

        $r2 = (com.google.inject.internal.MoreTypes$CompositeType) $r1;

        $z3 = interfaceinvoke $r2.<com.google.inject.internal.MoreTypes$CompositeType: boolean isFullySpecified()>();

        return $z3;
    }

    public static java.lang.reflect.Type canonicalize(java.lang.reflect.Type)
    {
        java.lang.reflect.GenericArrayType r15;
        java.lang.reflect.WildcardType r16;
        com.google.inject.internal.MoreTypes$GenericArrayTypeImpl $r17, $r19;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        com.google.inject.internal.MoreTypes$WildcardTypeImpl $r20;
        java.lang.reflect.ParameterizedType r14;
        java.lang.reflect.Type r0, $r5, $r7, $r8, $r11, $r13;
        com.google.inject.internal.MoreTypes$ParameterizedTypeImpl $r18;
        java.lang.reflect.Type[] $r2, $r3, $r9;
        java.lang.Class $r10, r12;

        r0 := @parameter0: java.lang.reflect.Type;

        $z0 = r0 instanceof java.lang.Class;

        if $z0 == 0 goto label3;

        r12 = (java.lang.Class) r0;

        $z5 = virtualinvoke r12.<java.lang.Class: boolean isArray()>();

        if $z5 == 0 goto label1;

        $r17 = new com.google.inject.internal.MoreTypes$GenericArrayTypeImpl;

        $r13 = $r17;

        $r10 = virtualinvoke r12.<java.lang.Class: java.lang.Class getComponentType()>();

        $r11 = staticinvoke <com.google.inject.internal.MoreTypes: java.lang.reflect.Type canonicalize(java.lang.reflect.Type)>($r10);

        specialinvoke $r17.<com.google.inject.internal.MoreTypes$GenericArrayTypeImpl: void <init>(java.lang.reflect.Type)>($r11);

        goto label2;

     label1:
        $r13 = r12;

     label2:
        return $r13;

     label3:
        $z1 = r0 instanceof com.google.inject.internal.MoreTypes$CompositeType;

        if $z1 == 0 goto label4;

        return r0;

     label4:
        $z2 = r0 instanceof java.lang.reflect.ParameterizedType;

        if $z2 == 0 goto label5;

        r14 = (java.lang.reflect.ParameterizedType) r0;

        $r18 = new com.google.inject.internal.MoreTypes$ParameterizedTypeImpl;

        $r7 = interfaceinvoke r14.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getOwnerType()>();

        $r8 = interfaceinvoke r14.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>();

        $r9 = interfaceinvoke r14.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();

        specialinvoke $r18.<com.google.inject.internal.MoreTypes$ParameterizedTypeImpl: void <init>(java.lang.reflect.Type,java.lang.reflect.Type,java.lang.reflect.Type[])>($r7, $r8, $r9);

        return $r18;

     label5:
        $z3 = r0 instanceof java.lang.reflect.GenericArrayType;

        if $z3 == 0 goto label6;

        r15 = (java.lang.reflect.GenericArrayType) r0;

        $r19 = new com.google.inject.internal.MoreTypes$GenericArrayTypeImpl;

        $r5 = interfaceinvoke r15.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>();

        specialinvoke $r19.<com.google.inject.internal.MoreTypes$GenericArrayTypeImpl: void <init>(java.lang.reflect.Type)>($r5);

        return $r19;

     label6:
        $z4 = r0 instanceof java.lang.reflect.WildcardType;

        if $z4 == 0 goto label7;

        r16 = (java.lang.reflect.WildcardType) r0;

        $r20 = new com.google.inject.internal.MoreTypes$WildcardTypeImpl;

        $r2 = interfaceinvoke r16.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getUpperBounds()>();

        $r3 = interfaceinvoke r16.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()>();

        specialinvoke $r20.<com.google.inject.internal.MoreTypes$WildcardTypeImpl: void <init>(java.lang.reflect.Type[],java.lang.reflect.Type[])>($r2, $r3);

        return $r20;

     label7:
        return r0;
    }

    public static java.lang.Class getRawType(java.lang.reflect.Type)
    {
        java.lang.reflect.GenericArrayType $r10;
        java.lang.Object[] $r16;
        java.lang.String $r7, $r9, $r18;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.IllegalArgumentException $r1;
        java.lang.reflect.ParameterizedType r21;
        java.lang.reflect.Type r0, $r11, $r15;
        java.lang.StringBuilder $r2, $r3, $r4, $r5, $r8;
        java.lang.Class $r6, $r12, $r14, $r17, $r19, $r20;
        java.lang.Object $r13;

        r0 := @parameter0: java.lang.reflect.Type;

        $z0 = r0 instanceof java.lang.Class;

        if $z0 == 0 goto label1;

        $r20 = (java.lang.Class) r0;

        return $r20;

     label1:
        $z1 = r0 instanceof java.lang.reflect.ParameterizedType;

        if $z1 == 0 goto label2;

        r21 = (java.lang.reflect.ParameterizedType) r0;

        $r15 = interfaceinvoke r21.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>();

        $z4 = $r15 instanceof java.lang.Class;

        $r16 = newarray (java.lang.Object)[2];

        $r16[0] = r0;

        $r17 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r18 = virtualinvoke $r17.<java.lang.Class: java.lang.String getName()>();

        $r16[1] = $r18;

        staticinvoke <com.google.inject.internal.util.$Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object[])>($z4, "Expected a Class, but <%s> is of type %s", $r16);

        $r19 = (java.lang.Class) $r15;

        return $r19;

     label2:
        $z2 = r0 instanceof java.lang.reflect.GenericArrayType;

        if $z2 == 0 goto label3;

        $r10 = (java.lang.reflect.GenericArrayType) r0;

        $r11 = interfaceinvoke $r10.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>();

        $r12 = staticinvoke <com.google.inject.internal.MoreTypes: java.lang.Class getRawType(java.lang.reflect.Type)>($r11);

        $r13 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>($r12, 0);

        $r14 = virtualinvoke $r13.<java.lang.Object: java.lang.Class getClass()>();

        return $r14;

     label3:
        $z3 = r0 instanceof java.lang.reflect.TypeVariable;

        if $z3 == 0 goto label4;

        return class "Ljava/lang/Object;";

     label4:
        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Expected a Class, ParameterizedType, or GenericArrayType, but <");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("> is of type ");

        $r6 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.String getName()>();

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r1;
    }

    public static boolean equals(java.lang.reflect.Type, java.lang.reflect.Type)
    {
        java.lang.reflect.GenericArrayType r20, r21;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19;
        java.lang.reflect.Type r0, r1, $r10, $r11, $r12, $r13, $r14, $r15;
        java.lang.reflect.Type[] $r6, $r7, $r8, $r9, $r16, $r17;
        java.lang.reflect.WildcardType r22, r23;
        java.lang.String $r4, $r5;
        java.lang.reflect.GenericDeclaration $r2, $r3;
        java.lang.reflect.TypeVariable r24, r25;
        java.lang.reflect.ParameterizedType r18, r19;

        r0 := @parameter0: java.lang.reflect.Type;

        r1 := @parameter1: java.lang.reflect.Type;

        if r0 != r1 goto label01;

        return 1;

     label01:
        $z0 = r0 instanceof java.lang.Class;

        if $z0 == 0 goto label02;

        $z16 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

        return $z16;

     label02:
        $z1 = r0 instanceof java.lang.reflect.ParameterizedType;

        if $z1 == 0 goto label06;

        $z12 = r1 instanceof java.lang.reflect.ParameterizedType;

        if $z12 != 0 goto label03;

        return 0;

     label03:
        r18 = (java.lang.reflect.ParameterizedType) r0;

        r19 = (java.lang.reflect.ParameterizedType) r1;

        $r12 = interfaceinvoke r18.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getOwnerType()>();

        $r13 = interfaceinvoke r19.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getOwnerType()>();

        $z13 = staticinvoke <com.google.inject.internal.util.$Objects: boolean equal(java.lang.Object,java.lang.Object)>($r12, $r13);

        if $z13 == 0 goto label04;

        $r14 = interfaceinvoke r18.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>();

        $r15 = interfaceinvoke r19.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>();

        $z14 = virtualinvoke $r14.<java.lang.Object: boolean equals(java.lang.Object)>($r15);

        if $z14 == 0 goto label04;

        $r16 = interfaceinvoke r18.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();

        $r17 = interfaceinvoke r19.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();

        $z15 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>($r16, $r17);

        if $z15 == 0 goto label04;

        $z17 = 1;

        goto label05;

     label04:
        $z17 = 0;

     label05:
        return $z17;

     label06:
        $z2 = r0 instanceof java.lang.reflect.GenericArrayType;

        if $z2 == 0 goto label08;

        $z10 = r1 instanceof java.lang.reflect.GenericArrayType;

        if $z10 != 0 goto label07;

        return 0;

     label07:
        r20 = (java.lang.reflect.GenericArrayType) r0;

        r21 = (java.lang.reflect.GenericArrayType) r1;

        $r10 = interfaceinvoke r20.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>();

        $r11 = interfaceinvoke r21.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>();

        $z11 = staticinvoke <com.google.inject.internal.MoreTypes: boolean equals(java.lang.reflect.Type,java.lang.reflect.Type)>($r10, $r11);

        return $z11;

     label08:
        $z3 = r0 instanceof java.lang.reflect.WildcardType;

        if $z3 == 0 goto label12;

        $z7 = r1 instanceof java.lang.reflect.WildcardType;

        if $z7 != 0 goto label09;

        return 0;

     label09:
        r22 = (java.lang.reflect.WildcardType) r0;

        r23 = (java.lang.reflect.WildcardType) r1;

        $r6 = interfaceinvoke r22.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getUpperBounds()>();

        $r7 = interfaceinvoke r23.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getUpperBounds()>();

        $z8 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>($r6, $r7);

        if $z8 == 0 goto label10;

        $r8 = interfaceinvoke r22.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()>();

        $r9 = interfaceinvoke r23.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()>();

        $z9 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>($r8, $r9);

        if $z9 == 0 goto label10;

        $z18 = 1;

        goto label11;

     label10:
        $z18 = 0;

     label11:
        return $z18;

     label12:
        $z4 = r0 instanceof java.lang.reflect.TypeVariable;

        if $z4 == 0 goto label16;

        $z5 = r1 instanceof java.lang.reflect.TypeVariable;

        if $z5 != 0 goto label13;

        return 0;

     label13:
        r24 = (java.lang.reflect.TypeVariable) r0;

        r25 = (java.lang.reflect.TypeVariable) r1;

        $r2 = interfaceinvoke r24.<java.lang.reflect.TypeVariable: java.lang.reflect.GenericDeclaration getGenericDeclaration()>();

        $r3 = interfaceinvoke r25.<java.lang.reflect.TypeVariable: java.lang.reflect.GenericDeclaration getGenericDeclaration()>();

        if $r2 != $r3 goto label14;

        $r4 = interfaceinvoke r24.<java.lang.reflect.TypeVariable: java.lang.String getName()>();

        $r5 = interfaceinvoke r25.<java.lang.reflect.TypeVariable: java.lang.String getName()>();

        $z6 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z6 == 0 goto label14;

        $z19 = 1;

        goto label15;

     label14:
        $z19 = 0;

     label15:
        return $z19;

     label16:
        return 0;
    }

    private static int hashCodeOrZero(java.lang.Object)
    {
        int $i0;
        java.lang.Object r0;

        r0 := @parameter0: java.lang.Object;

        if r0 == null goto label1;

        $i0 = virtualinvoke r0.<java.lang.Object: int hashCode()>();

        goto label2;

     label1:
        $i0 = 0;

     label2:
        return $i0;
    }

    public static java.lang.String typeToString(java.lang.reflect.Type)
    {
        java.lang.reflect.Type r0;
        java.lang.Class $r1;
        java.lang.String $r2;
        boolean $z0;

        r0 := @parameter0: java.lang.reflect.Type;

        $z0 = r0 instanceof java.lang.Class;

        if $z0 == 0 goto label1;

        $r1 = (java.lang.Class) r0;

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        goto label2;

     label1:
        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>();

     label2:
        return $r2;
    }

    public static java.lang.reflect.Type getGenericSupertype(java.lang.reflect.Type, java.lang.Class, java.lang.Class)
    {
        int i0, i1;
        boolean $z0, $z1, $z2, $z3;
        java.lang.Class[] $r5;
        java.lang.reflect.Type $r2, $r3, $r4, $r10, $r11, $r13, r14;
        java.lang.reflect.Type[] $r8, $r12;
        java.lang.Class r0, $r1, $r6, $r7, $r9, r15;

        r14 := @parameter0: java.lang.reflect.Type;

        r15 := @parameter1: java.lang.Class;

        r0 := @parameter2: java.lang.Class;

        if r0 != r15 goto label1;

        return r14;

     label1:
        $z0 = virtualinvoke r0.<java.lang.Class: boolean isInterface()>();

        if $z0 == 0 goto label5;

        $r5 = virtualinvoke r15.<java.lang.Class: java.lang.Class[] getInterfaces()>();

        i1 = 0;

        i0 = lengthof $r5;

     label2:
        if i1 >= i0 goto label5;

        $r6 = $r5[i1];

        if $r6 != r0 goto label3;

        $r12 = virtualinvoke r15.<java.lang.Class: java.lang.reflect.Type[] getGenericInterfaces()>();

        $r13 = $r12[i1];

        return $r13;

     label3:
        $r7 = $r5[i1];

        $z3 = virtualinvoke r0.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r7);

        if $z3 == 0 goto label4;

        $r8 = virtualinvoke r15.<java.lang.Class: java.lang.reflect.Type[] getGenericInterfaces()>();

        $r10 = $r8[i1];

        $r9 = $r5[i1];

        $r11 = staticinvoke <com.google.inject.internal.MoreTypes: java.lang.reflect.Type getGenericSupertype(java.lang.reflect.Type,java.lang.Class,java.lang.Class)>($r10, $r9, r0);

        return $r11;

     label4:
        i1 = i1 + 1;

        goto label2;

     label5:
        $z1 = virtualinvoke r15.<java.lang.Class: boolean isInterface()>();

        if $z1 != 0 goto label9;

     label6:
        if r15 == class "Ljava/lang/Object;" goto label9;

        $r1 = virtualinvoke r15.<java.lang.Class: java.lang.Class getSuperclass()>();

        if $r1 != r0 goto label7;

        $r4 = virtualinvoke r15.<java.lang.Class: java.lang.reflect.Type getGenericSuperclass()>();

        return $r4;

     label7:
        $z2 = virtualinvoke r0.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r1);

        if $z2 == 0 goto label8;

        $r2 = virtualinvoke r15.<java.lang.Class: java.lang.reflect.Type getGenericSuperclass()>();

        $r3 = staticinvoke <com.google.inject.internal.MoreTypes: java.lang.reflect.Type getGenericSupertype(java.lang.reflect.Type,java.lang.Class,java.lang.Class)>($r2, $r1, r0);

        return $r3;

     label8:
        r15 = $r1;

        goto label6;

     label9:
        return r0;
    }

    public static java.lang.reflect.Type resolveTypeVariable(java.lang.reflect.Type, java.lang.Class, java.lang.reflect.TypeVariable)
    {
        java.lang.reflect.TypeVariable r0;
        java.lang.reflect.ParameterizedType $r6;
        java.lang.reflect.Type r2, $r4, $r8;
        java.lang.reflect.TypeVariable[] $r5;
        int $i0;
        java.lang.reflect.Type[] $r7;
        java.lang.Class $r1, r3;
        boolean $z0;

        r2 := @parameter0: java.lang.reflect.Type;

        r3 := @parameter1: java.lang.Class;

        r0 := @parameter2: java.lang.reflect.TypeVariable;

        $r1 = staticinvoke <com.google.inject.internal.MoreTypes: java.lang.Class declaringClassOf(java.lang.reflect.TypeVariable)>(r0);

        if $r1 != null goto label1;

        return r0;

     label1:
        $r4 = staticinvoke <com.google.inject.internal.MoreTypes: java.lang.reflect.Type getGenericSupertype(java.lang.reflect.Type,java.lang.Class,java.lang.Class)>(r2, r3, $r1);

        $z0 = $r4 instanceof java.lang.reflect.ParameterizedType;

        if $z0 == 0 goto label2;

        $r5 = virtualinvoke $r1.<java.lang.Class: java.lang.reflect.TypeVariable[] getTypeParameters()>();

        $i0 = staticinvoke <com.google.inject.internal.MoreTypes: int indexOf(java.lang.Object[],java.lang.Object)>($r5, r0);

        $r6 = (java.lang.reflect.ParameterizedType) $r4;

        $r7 = interfaceinvoke $r6.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();

        $r8 = $r7[$i0];

        return $r8;

     label2:
        return r0;
    }

    private static int indexOf(java.lang.Object[], java.lang.Object)
    {
        java.lang.Object[] r0;
        int $i0, i1;
        java.lang.Object r2, $r3;
        java.util.NoSuchElementException $r1;
        boolean $z0;

        r0 := @parameter0: java.lang.Object[];

        r2 := @parameter1: java.lang.Object;

        i1 = 0;

     label1:
        $i0 = lengthof r0;

        if i1 >= $i0 goto label3;

        $r3 = r0[i1];

        $z0 = virtualinvoke r2.<java.lang.Object: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label2;

        return i1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        $r1 = new java.util.NoSuchElementException;

        specialinvoke $r1.<java.util.NoSuchElementException: void <init>()>();

        throw $r1;
    }

    private static java.lang.Class declaringClassOf(java.lang.reflect.TypeVariable)
    {
        java.lang.reflect.GenericDeclaration $r1;
        java.lang.reflect.TypeVariable r0;
        java.lang.Class $r2;
        boolean $z0;

        r0 := @parameter0: java.lang.reflect.TypeVariable;

        $r1 = interfaceinvoke r0.<java.lang.reflect.TypeVariable: java.lang.reflect.GenericDeclaration getGenericDeclaration()>();

        $z0 = $r1 instanceof java.lang.Class;

        if $z0 == 0 goto label1;

        $r2 = (java.lang.Class) $r1;

        goto label2;

     label1:
        $r2 = null;

     label2:
        return $r2;
    }

    private static void checkNotPrimitive(java.lang.reflect.Type, java.lang.String)
    {
        java.lang.Object[] $r1;
        java.lang.reflect.Type r0;
        java.lang.Class $r3;
        java.lang.String r2;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: java.lang.reflect.Type;

        r2 := @parameter1: java.lang.String;

        $z0 = r0 instanceof java.lang.Class;

        if $z0 == 0 goto label1;

        $r3 = (java.lang.Class) r0;

        $z1 = virtualinvoke $r3.<java.lang.Class: boolean isPrimitive()>();

        if $z1 != 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        $r1 = newarray (java.lang.Object)[2];

        $r1[0] = r2;

        $r1[1] = r0;

        staticinvoke <com.google.inject.internal.util.$Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object[])>($z2, "Primitive types are not allowed in %s: %s", $r1);

        return;
    }

    static void access$000(java.lang.reflect.Type, java.lang.String)
    {
        java.lang.String r1;
        java.lang.reflect.Type r0;

        r0 := @parameter0: java.lang.reflect.Type;

        r1 := @parameter1: java.lang.String;

        staticinvoke <com.google.inject.internal.MoreTypes: void checkNotPrimitive(java.lang.reflect.Type,java.lang.String)>(r0, r1);

        return;
    }

    static boolean access$100(java.lang.reflect.Type)
    {
        java.lang.reflect.Type r0;
        boolean $z0;

        r0 := @parameter0: java.lang.reflect.Type;

        $z0 = staticinvoke <com.google.inject.internal.MoreTypes: boolean isFullySpecified(java.lang.reflect.Type)>(r0);

        return $z0;
    }

    static int access$200(java.lang.Object)
    {
        int $i0;
        java.lang.Object r0;

        r0 := @parameter0: java.lang.Object;

        $i0 = staticinvoke <com.google.inject.internal.MoreTypes: int hashCodeOrZero(java.lang.Object)>(r0);

        return $i0;
    }

    static void <clinit>()
    {
        java.lang.reflect.Type[] $r0;
        com.google.inject.TypeLiteral $r3, $r4, $r7, $r8, $r11, $r12, $r15, $r16, $r19, $r20, $r23, $r24, $r27, $r28, $r31, $r32, $r35, $r36;
        com.google.inject.internal.util.$ImmutableMap $r38;
        com.google.inject.internal.util.$ImmutableMap$Builder $r1, $r5, $r9, $r13, $r17, $r21, $r25, $r29, $r33, $r37;
        java.lang.Class $r2, $r6, $r10, $r14, $r18, $r22, $r26, $r30, $r34;

        $r0 = newarray (java.lang.reflect.Type)[0];

        <com.google.inject.internal.MoreTypes: java.lang.reflect.Type[] EMPTY_TYPE_ARRAY> = $r0;

        $r1 = new com.google.inject.internal.util.$ImmutableMap$Builder;

        specialinvoke $r1.<com.google.inject.internal.util.$ImmutableMap$Builder: void <init>()>();

        $r2 = <java.lang.Boolean: java.lang.Class TYPE>;

        $r3 = staticinvoke <com.google.inject.TypeLiteral: com.google.inject.TypeLiteral get(java.lang.Class)>($r2);

        $r4 = staticinvoke <com.google.inject.TypeLiteral: com.google.inject.TypeLiteral get(java.lang.Class)>(class "Ljava/lang/Boolean;");

        $r5 = virtualinvoke $r1.<com.google.inject.internal.util.$ImmutableMap$Builder: com.google.inject.internal.util.$ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>($r3, $r4);

        $r6 = <java.lang.Byte: java.lang.Class TYPE>;

        $r7 = staticinvoke <com.google.inject.TypeLiteral: com.google.inject.TypeLiteral get(java.lang.Class)>($r6);

        $r8 = staticinvoke <com.google.inject.TypeLiteral: com.google.inject.TypeLiteral get(java.lang.Class)>(class "Ljava/lang/Byte;");

        $r9 = virtualinvoke $r5.<com.google.inject.internal.util.$ImmutableMap$Builder: com.google.inject.internal.util.$ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>($r7, $r8);

        $r10 = <java.lang.Short: java.lang.Class TYPE>;

        $r11 = staticinvoke <com.google.inject.TypeLiteral: com.google.inject.TypeLiteral get(java.lang.Class)>($r10);

        $r12 = staticinvoke <com.google.inject.TypeLiteral: com.google.inject.TypeLiteral get(java.lang.Class)>(class "Ljava/lang/Short;");

        $r13 = virtualinvoke $r9.<com.google.inject.internal.util.$ImmutableMap$Builder: com.google.inject.internal.util.$ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>($r11, $r12);

        $r14 = <java.lang.Integer: java.lang.Class TYPE>;

        $r15 = staticinvoke <com.google.inject.TypeLiteral: com.google.inject.TypeLiteral get(java.lang.Class)>($r14);

        $r16 = staticinvoke <com.google.inject.TypeLiteral: com.google.inject.TypeLiteral get(java.lang.Class)>(class "Ljava/lang/Integer;");

        $r17 = virtualinvoke $r13.<com.google.inject.internal.util.$ImmutableMap$Builder: com.google.inject.internal.util.$ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>($r15, $r16);

        $r18 = <java.lang.Long: java.lang.Class TYPE>;

        $r19 = staticinvoke <com.google.inject.TypeLiteral: com.google.inject.TypeLiteral get(java.lang.Class)>($r18);

        $r20 = staticinvoke <com.google.inject.TypeLiteral: com.google.inject.TypeLiteral get(java.lang.Class)>(class "Ljava/lang/Long;");

        $r21 = virtualinvoke $r17.<com.google.inject.internal.util.$ImmutableMap$Builder: com.google.inject.internal.util.$ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>($r19, $r20);

        $r22 = <java.lang.Float: java.lang.Class TYPE>;

        $r23 = staticinvoke <com.google.inject.TypeLiteral: com.google.inject.TypeLiteral get(java.lang.Class)>($r22);

        $r24 = staticinvoke <com.google.inject.TypeLiteral: com.google.inject.TypeLiteral get(java.lang.Class)>(class "Ljava/lang/Float;");

        $r25 = virtualinvoke $r21.<com.google.inject.internal.util.$ImmutableMap$Builder: com.google.inject.internal.util.$ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>($r23, $r24);

        $r26 = <java.lang.Double: java.lang.Class TYPE>;

        $r27 = staticinvoke <com.google.inject.TypeLiteral: com.google.inject.TypeLiteral get(java.lang.Class)>($r26);

        $r28 = staticinvoke <com.google.inject.TypeLiteral: com.google.inject.TypeLiteral get(java.lang.Class)>(class "Ljava/lang/Double;");

        $r29 = virtualinvoke $r25.<com.google.inject.internal.util.$ImmutableMap$Builder: com.google.inject.internal.util.$ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>($r27, $r28);

        $r30 = <java.lang.Character: java.lang.Class TYPE>;

        $r31 = staticinvoke <com.google.inject.TypeLiteral: com.google.inject.TypeLiteral get(java.lang.Class)>($r30);

        $r32 = staticinvoke <com.google.inject.TypeLiteral: com.google.inject.TypeLiteral get(java.lang.Class)>(class "Ljava/lang/Character;");

        $r33 = virtualinvoke $r29.<com.google.inject.internal.util.$ImmutableMap$Builder: com.google.inject.internal.util.$ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>($r31, $r32);

        $r34 = <java.lang.Void: java.lang.Class TYPE>;

        $r35 = staticinvoke <com.google.inject.TypeLiteral: com.google.inject.TypeLiteral get(java.lang.Class)>($r34);

        $r36 = staticinvoke <com.google.inject.TypeLiteral: com.google.inject.TypeLiteral get(java.lang.Class)>(class "Ljava/lang/Void;");

        $r37 = virtualinvoke $r33.<com.google.inject.internal.util.$ImmutableMap$Builder: com.google.inject.internal.util.$ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>($r35, $r36);

        $r38 = virtualinvoke $r37.<com.google.inject.internal.util.$ImmutableMap$Builder: com.google.inject.internal.util.$ImmutableMap build()>();

        <com.google.inject.internal.MoreTypes: java.util.Map PRIMITIVE_TO_WRAPPER> = $r38;

        return;
    }
}
