public class org.bouncycastle.crypto.engines.NoekeonEngine extends java.lang.Object implements org.bouncycastle.crypto.BlockCipher
{
    private static final int genericSize;
    private static final int[] nullVector;
    private static final int[] roundConstants;
    private int[] state;
    private int[] subKeys;
    private int[] decryptKeys;
    private boolean _initialised;
    private boolean _forEncryption;

    public void <init>()
    {
        int[] $r1, $r2, $r3;
        org.bouncycastle.crypto.engines.NoekeonEngine r0;

        r0 := @this: org.bouncycastle.crypto.engines.NoekeonEngine;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = newarray (int)[4];

        r0.<org.bouncycastle.crypto.engines.NoekeonEngine: int[] state> = $r1;

        $r2 = newarray (int)[4];

        r0.<org.bouncycastle.crypto.engines.NoekeonEngine: int[] subKeys> = $r2;

        $r3 = newarray (int)[4];

        r0.<org.bouncycastle.crypto.engines.NoekeonEngine: int[] decryptKeys> = $r3;

        r0.<org.bouncycastle.crypto.engines.NoekeonEngine: boolean _initialised> = 0;

        return;
    }

    public java.lang.String getAlgorithmName()
    {
        org.bouncycastle.crypto.engines.NoekeonEngine r0;

        r0 := @this: org.bouncycastle.crypto.engines.NoekeonEngine;

        return "Noekeon";
    }

    public int getBlockSize()
    {
        org.bouncycastle.crypto.engines.NoekeonEngine r0;

        r0 := @this: org.bouncycastle.crypto.engines.NoekeonEngine;

        return 16;
    }

    public void init(boolean, org.bouncycastle.crypto.CipherParameters)
    {
        byte[] $r3;
        org.bouncycastle.crypto.engines.NoekeonEngine r1;
        java.lang.IllegalArgumentException $r4;
        java.lang.StringBuilder $r5, $r6, $r9;
        java.lang.Class $r7;
        java.lang.String $r8, $r10;
        org.bouncycastle.crypto.params.KeyParameter r2;
        org.bouncycastle.crypto.CipherParameters r0;
        boolean $z0, z1;

        r1 := @this: org.bouncycastle.crypto.engines.NoekeonEngine;

        z1 := @parameter0: boolean;

        r0 := @parameter1: org.bouncycastle.crypto.CipherParameters;

        $z0 = r0 instanceof org.bouncycastle.crypto.params.KeyParameter;

        if $z0 != 0 goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("invalid parameter passed to Noekeon init - ");

        $r7 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r8 = virtualinvoke $r7.<java.lang.Class: java.lang.String getName()>();

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r4;

     label1:
        r1.<org.bouncycastle.crypto.engines.NoekeonEngine: boolean _forEncryption> = z1;

        r1.<org.bouncycastle.crypto.engines.NoekeonEngine: boolean _initialised> = 1;

        r2 = (org.bouncycastle.crypto.params.KeyParameter) r0;

        $r3 = virtualinvoke r2.<org.bouncycastle.crypto.params.KeyParameter: byte[] getKey()>();

        specialinvoke r1.<org.bouncycastle.crypto.engines.NoekeonEngine: void setKey(byte[])>($r3);

        return;
    }

    public int processBlock(byte[], int, byte[], int)
    {
        byte[] r1, r2;
        java.lang.IllegalStateException $r5;
        org.bouncycastle.crypto.DataLengthException $r3, $r4;
        int i0, $i1, $i2, i3, $i4, $i5, $i6;
        java.lang.String $r7, $r10;
        boolean $z0, $z1;
        org.bouncycastle.crypto.engines.NoekeonEngine r0;
        java.lang.StringBuilder $r6, $r8, $r9;

        r0 := @this: org.bouncycastle.crypto.engines.NoekeonEngine;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        r2 := @parameter2: byte[];

        i3 := @parameter3: int;

        $z0 = r0.<org.bouncycastle.crypto.engines.NoekeonEngine: boolean _initialised>;

        if $z0 != 0 goto label1;

        $r5 = new java.lang.IllegalStateException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke r0.<org.bouncycastle.crypto.engines.NoekeonEngine: java.lang.String getAlgorithmName()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not initialised");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r10);

        throw $r5;

     label1:
        $i2 = i0 + 16;

        $i1 = lengthof r1;

        if $i2 <= $i1 goto label2;

        $r4 = new org.bouncycastle.crypto.DataLengthException;

        specialinvoke $r4.<org.bouncycastle.crypto.DataLengthException: void <init>(java.lang.String)>("input buffer too short");

        throw $r4;

     label2:
        $i5 = i3 + 16;

        $i4 = lengthof r2;

        if $i5 <= $i4 goto label3;

        $r3 = new org.bouncycastle.crypto.DataLengthException;

        specialinvoke $r3.<org.bouncycastle.crypto.DataLengthException: void <init>(java.lang.String)>("output buffer too short");

        throw $r3;

     label3:
        $z1 = r0.<org.bouncycastle.crypto.engines.NoekeonEngine: boolean _forEncryption>;

        if $z1 == 0 goto label4;

        $i6 = specialinvoke r0.<org.bouncycastle.crypto.engines.NoekeonEngine: int encryptBlock(byte[],int,byte[],int)>(r1, i0, r2, i3);

        goto label5;

     label4:
        $i6 = specialinvoke r0.<org.bouncycastle.crypto.engines.NoekeonEngine: int decryptBlock(byte[],int,byte[],int)>(r1, i0, r2, i3);

     label5:
        return $i6;
    }

    public void reset()
    {
        org.bouncycastle.crypto.engines.NoekeonEngine r0;

        r0 := @this: org.bouncycastle.crypto.engines.NoekeonEngine;

        return;
    }

    private void setKey(byte[])
    {
        byte[] r1;
        org.bouncycastle.crypto.engines.NoekeonEngine r0;
        int[] $r2, $r3, $r4, $r5;
        int $i0, $i1, $i2, $i3;

        r0 := @this: org.bouncycastle.crypto.engines.NoekeonEngine;

        r1 := @parameter0: byte[];

        $r2 = r0.<org.bouncycastle.crypto.engines.NoekeonEngine: int[] subKeys>;

        $i0 = specialinvoke r0.<org.bouncycastle.crypto.engines.NoekeonEngine: int bytesToIntBig(byte[],int)>(r1, 0);

        $r2[0] = $i0;

        $r3 = r0.<org.bouncycastle.crypto.engines.NoekeonEngine: int[] subKeys>;

        $i1 = specialinvoke r0.<org.bouncycastle.crypto.engines.NoekeonEngine: int bytesToIntBig(byte[],int)>(r1, 4);

        $r3[1] = $i1;

        $r4 = r0.<org.bouncycastle.crypto.engines.NoekeonEngine: int[] subKeys>;

        $i2 = specialinvoke r0.<org.bouncycastle.crypto.engines.NoekeonEngine: int bytesToIntBig(byte[],int)>(r1, 8);

        $r4[2] = $i2;

        $r5 = r0.<org.bouncycastle.crypto.engines.NoekeonEngine: int[] subKeys>;

        $i3 = specialinvoke r0.<org.bouncycastle.crypto.engines.NoekeonEngine: int bytesToIntBig(byte[],int)>(r1, 12);

        $r5[3] = $i3;

        return;
    }

    private int encryptBlock(byte[], int, byte[], int)
    {
        byte[] r1, r11;
        int[] $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, i22;
        org.bouncycastle.crypto.engines.NoekeonEngine r0;

        r0 := @this: org.bouncycastle.crypto.engines.NoekeonEngine;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        r11 := @parameter2: byte[];

        i11 := @parameter3: int;

        $r2 = r0.<org.bouncycastle.crypto.engines.NoekeonEngine: int[] state>;

        $i1 = specialinvoke r0.<org.bouncycastle.crypto.engines.NoekeonEngine: int bytesToIntBig(byte[],int)>(r1, i0);

        $r2[0] = $i1;

        $r3 = r0.<org.bouncycastle.crypto.engines.NoekeonEngine: int[] state>;

        $i2 = i0 + 4;

        $i3 = specialinvoke r0.<org.bouncycastle.crypto.engines.NoekeonEngine: int bytesToIntBig(byte[],int)>(r1, $i2);

        $r3[1] = $i3;

        $r4 = r0.<org.bouncycastle.crypto.engines.NoekeonEngine: int[] state>;

        $i4 = i0 + 8;

        $i5 = specialinvoke r0.<org.bouncycastle.crypto.engines.NoekeonEngine: int bytesToIntBig(byte[],int)>(r1, $i4);

        $r4[2] = $i5;

        $r5 = r0.<org.bouncycastle.crypto.engines.NoekeonEngine: int[] state>;

        $i6 = i0 + 12;

        $i7 = specialinvoke r0.<org.bouncycastle.crypto.engines.NoekeonEngine: int bytesToIntBig(byte[],int)>(r1, $i6);

        $r5[3] = $i7;

        i22 = 0;

     label1:
        if i22 >= 16 goto label2;

        $r15 = r0.<org.bouncycastle.crypto.engines.NoekeonEngine: int[] state>;

        $i20 = $r15[0];

        $r16 = <org.bouncycastle.crypto.engines.NoekeonEngine: int[] roundConstants>;

        $i19 = $r16[i22];

        $i21 = $i20 ^ $i19;

        $r15[0] = $i21;

        $r18 = r0.<org.bouncycastle.crypto.engines.NoekeonEngine: int[] state>;

        $r17 = r0.<org.bouncycastle.crypto.engines.NoekeonEngine: int[] subKeys>;

        specialinvoke r0.<org.bouncycastle.crypto.engines.NoekeonEngine: void theta(int[],int[])>($r18, $r17);

        $r19 = r0.<org.bouncycastle.crypto.engines.NoekeonEngine: int[] state>;

        specialinvoke r0.<org.bouncycastle.crypto.engines.NoekeonEngine: void pi1(int[])>($r19);

        $r20 = r0.<org.bouncycastle.crypto.engines.NoekeonEngine: int[] state>;

        specialinvoke r0.<org.bouncycastle.crypto.engines.NoekeonEngine: void gamma(int[])>($r20);

        $r21 = r0.<org.bouncycastle.crypto.engines.NoekeonEngine: int[] state>;

        specialinvoke r0.<org.bouncycastle.crypto.engines.NoekeonEngine: void pi2(int[])>($r21);

        i22 = i22 + 1;

        goto label1;

     label2:
        $r6 = r0.<org.bouncycastle.crypto.engines.NoekeonEngine: int[] state>;

        $i9 = $r6[0];

        $r7 = <org.bouncycastle.crypto.engines.NoekeonEngine: int[] roundConstants>;

        $i8 = $r7[i22];

        $i10 = $i9 ^ $i8;

        $r6[0] = $i10;

        $r9 = r0.<org.bouncycastle.crypto.engines.NoekeonEngine: int[] state>;

        $r8 = r0.<org.bouncycastle.crypto.engines.NoekeonEngine: int[] subKeys>;

        specialinvoke r0.<org.bouncycastle.crypto.engines.NoekeonEngine: void theta(int[],int[])>($r9, $r8);

        $r10 = r0.<org.bouncycastle.crypto.engines.NoekeonEngine: int[] state>;

        $i12 = $r10[0];

        specialinvoke r0.<org.bouncycastle.crypto.engines.NoekeonEngine: void intToBytesBig(int,byte[],int)>($i12, r11, i11);

        $r12 = r0.<org.bouncycastle.crypto.engines.NoekeonEngine: int[] state>;

        $i14 = $r12[1];

        $i13 = i11 + 4;

        specialinvoke r0.<org.bouncycastle.crypto.engines.NoekeonEngine: void intToBytesBig(int,byte[],int)>($i14, r11, $i13);

        $r13 = r0.<org.bouncycastle.crypto.engines.NoekeonEngine: int[] state>;

        $i16 = $r13[2];

        $i15 = i11 + 8;

        specialinvoke r0.<org.bouncycastle.crypto.engines.NoekeonEngine: void intToBytesBig(int,byte[],int)>($i16, r11, $i15);

        $r14 = r0.<org.bouncycastle.crypto.engines.NoekeonEngine: int[] state>;

        $i18 = $r14[3];

        $i17 = i11 + 12;

        specialinvoke r0.<org.bouncycastle.crypto.engines.NoekeonEngine: void intToBytesBig(int,byte[],int)>($i18, r11, $i17);

        return 16;
    }

    private int decryptBlock(byte[], int, byte[], int)
    {
        byte[] r1, r16;
        int[] $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, i23, $i25;
        org.bouncycastle.crypto.engines.NoekeonEngine r0;

        r0 := @this: org.bouncycastle.crypto.engines.NoekeonEngine;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        r16 := @parameter2: byte[];

        i12 := @parameter3: int;

        $r2 = r0.<org.bouncycastle.crypto.engines.NoekeonEngine: int[] state>;

        $i1 = specialinvoke r0.<org.bouncycastle.crypto.engines.NoekeonEngine: int bytesToIntBig(byte[],int)>(r1, i0);

        $r2[0] = $i1;

        $r3 = r0.<org.bouncycastle.crypto.engines.NoekeonEngine: int[] state>;

        $i2 = i0 + 4;

        $i3 = specialinvoke r0.<org.bouncycastle.crypto.engines.NoekeonEngine: int bytesToIntBig(byte[],int)>(r1, $i2);

        $r3[1] = $i3;

        $r4 = r0.<org.bouncycastle.crypto.engines.NoekeonEngine: int[] state>;

        $i4 = i0 + 8;

        $i5 = specialinvoke r0.<org.bouncycastle.crypto.engines.NoekeonEngine: int bytesToIntBig(byte[],int)>(r1, $i4);

        $r4[2] = $i5;

        $r5 = r0.<org.bouncycastle.crypto.engines.NoekeonEngine: int[] state>;

        $i6 = i0 + 12;

        $i7 = specialinvoke r0.<org.bouncycastle.crypto.engines.NoekeonEngine: int bytesToIntBig(byte[],int)>(r1, $i6);

        $r5[3] = $i7;

        $r8 = r0.<org.bouncycastle.crypto.engines.NoekeonEngine: int[] subKeys>;

        $r7 = r0.<org.bouncycastle.crypto.engines.NoekeonEngine: int[] decryptKeys>;

        $r6 = r0.<org.bouncycastle.crypto.engines.NoekeonEngine: int[] subKeys>;

        $i8 = lengthof $r6;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r8, 0, $r7, 0, $i8);

        $r10 = r0.<org.bouncycastle.crypto.engines.NoekeonEngine: int[] decryptKeys>;

        $r9 = <org.bouncycastle.crypto.engines.NoekeonEngine: int[] nullVector>;

        specialinvoke r0.<org.bouncycastle.crypto.engines.NoekeonEngine: void theta(int[],int[])>($r10, $r9);

        i23 = 16;

     label1:
        if i23 <= 0 goto label2;

        $r21 = r0.<org.bouncycastle.crypto.engines.NoekeonEngine: int[] state>;

        $r20 = r0.<org.bouncycastle.crypto.engines.NoekeonEngine: int[] decryptKeys>;

        specialinvoke r0.<org.bouncycastle.crypto.engines.NoekeonEngine: void theta(int[],int[])>($r21, $r20);

        $r22 = r0.<org.bouncycastle.crypto.engines.NoekeonEngine: int[] state>;

        $i21 = $r22[0];

        $r23 = <org.bouncycastle.crypto.engines.NoekeonEngine: int[] roundConstants>;

        $i20 = $r23[i23];

        $i22 = $i21 ^ $i20;

        $r22[0] = $i22;

        $r24 = r0.<org.bouncycastle.crypto.engines.NoekeonEngine: int[] state>;

        specialinvoke r0.<org.bouncycastle.crypto.engines.NoekeonEngine: void pi1(int[])>($r24);

        $r25 = r0.<org.bouncycastle.crypto.engines.NoekeonEngine: int[] state>;

        specialinvoke r0.<org.bouncycastle.crypto.engines.NoekeonEngine: void gamma(int[])>($r25);

        $r26 = r0.<org.bouncycastle.crypto.engines.NoekeonEngine: int[] state>;

        specialinvoke r0.<org.bouncycastle.crypto.engines.NoekeonEngine: void pi2(int[])>($r26);

        $i25 = (int) -1;

        i23 = i23 + $i25;

        goto label1;

     label2:
        $r12 = r0.<org.bouncycastle.crypto.engines.NoekeonEngine: int[] state>;

        $r11 = r0.<org.bouncycastle.crypto.engines.NoekeonEngine: int[] decryptKeys>;

        specialinvoke r0.<org.bouncycastle.crypto.engines.NoekeonEngine: void theta(int[],int[])>($r12, $r11);

        $r13 = r0.<org.bouncycastle.crypto.engines.NoekeonEngine: int[] state>;

        $i10 = $r13[0];

        $r14 = <org.bouncycastle.crypto.engines.NoekeonEngine: int[] roundConstants>;

        $i9 = $r14[i23];

        $i11 = $i10 ^ $i9;

        $r13[0] = $i11;

        $r15 = r0.<org.bouncycastle.crypto.engines.NoekeonEngine: int[] state>;

        $i13 = $r15[0];

        specialinvoke r0.<org.bouncycastle.crypto.engines.NoekeonEngine: void intToBytesBig(int,byte[],int)>($i13, r16, i12);

        $r17 = r0.<org.bouncycastle.crypto.engines.NoekeonEngine: int[] state>;

        $i15 = $r17[1];

        $i14 = i12 + 4;

        specialinvoke r0.<org.bouncycastle.crypto.engines.NoekeonEngine: void intToBytesBig(int,byte[],int)>($i15, r16, $i14);

        $r18 = r0.<org.bouncycastle.crypto.engines.NoekeonEngine: int[] state>;

        $i17 = $r18[2];

        $i16 = i12 + 8;

        specialinvoke r0.<org.bouncycastle.crypto.engines.NoekeonEngine: void intToBytesBig(int,byte[],int)>($i17, r16, $i16);

        $r19 = r0.<org.bouncycastle.crypto.engines.NoekeonEngine: int[] state>;

        $i19 = $r19[3];

        $i18 = i12 + 12;

        specialinvoke r0.<org.bouncycastle.crypto.engines.NoekeonEngine: void intToBytesBig(int,byte[],int)>($i19, r16, $i18);

        return 16;
    }

    private void gamma(int[])
    {
        int[] r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i34, $i36, $i38, $i40;
        org.bouncycastle.crypto.engines.NoekeonEngine r1;

        r1 := @this: org.bouncycastle.crypto.engines.NoekeonEngine;

        r0 := @parameter0: int[];

        $i5 = r0[1];

        $i0 = r0[3];

        $i34 = (int) -1;

        $i3 = $i0 ^ $i34;

        $i1 = r0[2];

        $i36 = (int) -1;

        $i2 = $i1 ^ $i36;

        $i4 = $i3 & $i2;

        $i6 = $i5 ^ $i4;

        r0[1] = $i6;

        $i10 = r0[0];

        $i8 = r0[2];

        $i7 = r0[1];

        $i9 = $i8 & $i7;

        $i11 = $i10 ^ $i9;

        r0[0] = $i11;

        i12 = r0[3];

        $i13 = r0[0];

        r0[3] = $i13;

        r0[0] = i12;

        $i19 = r0[2];

        $i15 = r0[0];

        $i14 = r0[1];

        $i17 = $i15 ^ $i14;

        $i16 = r0[3];

        $i18 = $i17 ^ $i16;

        $i20 = $i19 ^ $i18;

        r0[2] = $i20;

        $i26 = r0[1];

        $i21 = r0[3];

        $i38 = (int) -1;

        $i24 = $i21 ^ $i38;

        $i22 = r0[2];

        $i40 = (int) -1;

        $i23 = $i22 ^ $i40;

        $i25 = $i24 & $i23;

        $i27 = $i26 ^ $i25;

        r0[1] = $i27;

        $i31 = r0[0];

        $i29 = r0[2];

        $i28 = r0[1];

        $i30 = $i29 & $i28;

        $i32 = $i31 ^ $i30;

        r0[0] = $i32;

        return;
    }

    private void theta(int[], int[])
    {
        int[] r0, r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, i21, i22, i23, i24, i25;
        org.bouncycastle.crypto.engines.NoekeonEngine r1;

        r1 := @this: org.bouncycastle.crypto.engines.NoekeonEngine;

        r0 := @parameter0: int[];

        r2 := @parameter1: int[];

        $i1 = r0[0];

        $i0 = r0[2];

        i21 = $i1 ^ $i0;

        $i2 = specialinvoke r1.<org.bouncycastle.crypto.engines.NoekeonEngine: int rotl(int,int)>(i21, 8);

        $i3 = specialinvoke r1.<org.bouncycastle.crypto.engines.NoekeonEngine: int rotl(int,int)>(i21, 24);

        $i4 = $i2 ^ $i3;

        i22 = i21 ^ $i4;

        $i5 = r0[1];

        $i6 = $i5 ^ i22;

        r0[1] = $i6;

        $i7 = r0[3];

        $i8 = $i7 ^ i22;

        r0[3] = $i8;

        i23 = 0;

     label1:
        if i23 >= 4 goto label2;

        $i19 = r0[i23];

        $i18 = r2[i23];

        $i20 = $i19 ^ $i18;

        r0[i23] = $i20;

        i23 = i23 + 1;

        goto label1;

     label2:
        $i10 = r0[1];

        $i9 = r0[3];

        i24 = $i10 ^ $i9;

        $i11 = specialinvoke r1.<org.bouncycastle.crypto.engines.NoekeonEngine: int rotl(int,int)>(i24, 8);

        $i12 = specialinvoke r1.<org.bouncycastle.crypto.engines.NoekeonEngine: int rotl(int,int)>(i24, 24);

        $i13 = $i11 ^ $i12;

        i25 = i24 ^ $i13;

        $i14 = r0[0];

        $i15 = $i14 ^ i25;

        r0[0] = $i15;

        $i16 = r0[2];

        $i17 = $i16 ^ i25;

        r0[2] = $i17;

        return;
    }

    private void pi1(int[])
    {
        org.bouncycastle.crypto.engines.NoekeonEngine r1;
        int[] r0;
        int $i0, $i1, $i2, $i3, $i4, $i5;

        r1 := @this: org.bouncycastle.crypto.engines.NoekeonEngine;

        r0 := @parameter0: int[];

        $i0 = r0[1];

        $i1 = specialinvoke r1.<org.bouncycastle.crypto.engines.NoekeonEngine: int rotl(int,int)>($i0, 1);

        r0[1] = $i1;

        $i2 = r0[2];

        $i3 = specialinvoke r1.<org.bouncycastle.crypto.engines.NoekeonEngine: int rotl(int,int)>($i2, 5);

        r0[2] = $i3;

        $i4 = r0[3];

        $i5 = specialinvoke r1.<org.bouncycastle.crypto.engines.NoekeonEngine: int rotl(int,int)>($i4, 2);

        r0[3] = $i5;

        return;
    }

    private void pi2(int[])
    {
        org.bouncycastle.crypto.engines.NoekeonEngine r1;
        int[] r0;
        int $i0, $i1, $i2, $i3, $i4, $i5;

        r1 := @this: org.bouncycastle.crypto.engines.NoekeonEngine;

        r0 := @parameter0: int[];

        $i0 = r0[1];

        $i1 = specialinvoke r1.<org.bouncycastle.crypto.engines.NoekeonEngine: int rotl(int,int)>($i0, 31);

        r0[1] = $i1;

        $i2 = r0[2];

        $i3 = specialinvoke r1.<org.bouncycastle.crypto.engines.NoekeonEngine: int rotl(int,int)>($i2, 27);

        r0[2] = $i3;

        $i4 = r0[3];

        $i5 = specialinvoke r1.<org.bouncycastle.crypto.engines.NoekeonEngine: int rotl(int,int)>($i4, 30);

        r0[3] = $i5;

        return;
    }

    private int bytesToIntBig(byte[], int)
    {
        byte[] r0;
        short $s2, $s6, $s10, $s18, $s20, $s22;
        byte $b0, $b1, $b5, $b9;
        int $i3, $i4, $i7, $i8, $i11, $i12, i13, i14, i15, i16, $i17, $i19, $i21, $i23;
        org.bouncycastle.crypto.engines.NoekeonEngine r1;

        r1 := @this: org.bouncycastle.crypto.engines.NoekeonEngine;

        r0 := @parameter0: byte[];

        i13 := @parameter1: int;

        i14 = i13 + 1;

        $b0 = r0[i13];

        $i17 = (int) $b0;

        $i4 = $i17 << 24;

        i15 = i14 + 1;

        $b1 = r0[i14];

        $s18 = (short) $b1;

        $s2 = $s18 & 255;

        $i19 = (int) $s2;

        $i3 = $i19 << 16;

        $i8 = $i4 | $i3;

        i16 = i15 + 1;

        $b5 = r0[i15];

        $s20 = (short) $b5;

        $s6 = $s20 & 255;

        $i21 = (int) $s6;

        $i7 = $i21 << 8;

        $i11 = $i8 | $i7;

        $b9 = r0[i16];

        $s22 = (short) $b9;

        $s10 = $s22 & 255;

        $i23 = (int) $s10;

        $i12 = $i11 | $i23;

        return $i12;
    }

    private void intToBytesBig(int, byte[], int)
    {
        byte[] r0;
        org.bouncycastle.crypto.engines.NoekeonEngine r1;
        byte $b2, $b4, $b6, $b7;
        int i0, $i1, $i3, $i5, i8, i9, i10, i11;

        r1 := @this: org.bouncycastle.crypto.engines.NoekeonEngine;

        i0 := @parameter0: int;

        r0 := @parameter1: byte[];

        i8 := @parameter2: int;

        i9 = i8 + 1;

        $i1 = i0 >>> 24;

        $b2 = (byte) $i1;

        r0[i8] = $b2;

        i10 = i9 + 1;

        $i3 = i0 >>> 16;

        $b4 = (byte) $i3;

        r0[i9] = $b4;

        i11 = i10 + 1;

        $i5 = i0 >>> 8;

        $b6 = (byte) $i5;

        r0[i10] = $b6;

        $b7 = (byte) i0;

        r0[i11] = $b7;

        return;
    }

    private int rotl(int, int)
    {
        org.bouncycastle.crypto.engines.NoekeonEngine r0;
        int i0, i1, $i2, $i3, $i4, $i5;

        r0 := @this: org.bouncycastle.crypto.engines.NoekeonEngine;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $i4 = i0 << i1;

        $i2 = 32 - i1;

        $i3 = i0 >>> $i2;

        $i5 = $i4 | $i3;

        return $i5;
    }

    static void <clinit>()
    {
        int[] $r0, $r1;

        <org.bouncycastle.crypto.engines.NoekeonEngine: int genericSize> = 16;

        $r0 = newarray (int)[4];

        $r0[0] = 0;

        $r0[1] = 0;

        $r0[2] = 0;

        $r0[3] = 0;

        <org.bouncycastle.crypto.engines.NoekeonEngine: int[] nullVector> = $r0;

        $r1 = newarray (int)[17];

        $r1[0] = 128;

        $r1[1] = 27;

        $r1[2] = 54;

        $r1[3] = 108;

        $r1[4] = 216;

        $r1[5] = 171;

        $r1[6] = 77;

        $r1[7] = 154;

        $r1[8] = 47;

        $r1[9] = 94;

        $r1[10] = 188;

        $r1[11] = 99;

        $r1[12] = 198;

        $r1[13] = 151;

        $r1[14] = 53;

        $r1[15] = 106;

        $r1[16] = 212;

        <org.bouncycastle.crypto.engines.NoekeonEngine: int[] roundConstants> = $r1;

        return;
    }
}
