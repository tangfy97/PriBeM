public class org.apache.xalan.templates.StylesheetRoot extends org.apache.xalan.templates.StylesheetComposed implements java.io.Serializable, javax.xml.transform.Templates
{
    private java.util.Hashtable m_availElems;
    private org.apache.xalan.extensions.ExtensionNamespacesManager m_extNsMgr;
    private org.apache.xalan.templates.StylesheetComposed[] m_globalImportList;
    private org.apache.xalan.templates.OutputProperties m_outputProperties;
    private boolean m_outputMethodSet;
    private java.util.Hashtable m_attrSets;
    private java.util.Hashtable m_decimalFormatSymbols;
    private java.util.Vector m_keyDecls;
    private java.util.Hashtable m_namespaceAliasComposed;
    private org.apache.xalan.templates.TemplateList m_templateList;
    private java.util.Vector m_variables;
    private org.apache.xalan.templates.TemplateList m_whiteSpaceInfoList;
    private org.apache.xalan.templates.ElemTemplate m_defaultTextRule;
    private org.apache.xalan.templates.ElemTemplate m_defaultRule;
    private org.apache.xalan.templates.ElemTemplate m_defaultRootRule;
    private org.apache.xalan.templates.ElemTemplate m_startRule;
    org.apache.xpath.XPath m_selectDefault;
    private org.apache.xalan.templates.StylesheetRoot$ComposeState m_composeState;

    public void <init>(javax.xml.transform.ErrorListener) throws javax.xml.transform.TransformerConfigurationException
    {
        org.apache.xalan.templates.StylesheetRoot r0;
        org.apache.xpath.XPath $r1;
        javax.xml.transform.TransformerException $r3;
        javax.xml.transform.TransformerConfigurationException $r4;
        java.lang.String $r5;
        javax.xml.transform.ErrorListener r2;

        r0 := @this: org.apache.xalan.templates.StylesheetRoot;

        r2 := @parameter0: javax.xml.transform.ErrorListener;

        specialinvoke r0.<org.apache.xalan.templates.StylesheetComposed: void <init>(org.apache.xalan.templates.Stylesheet)>(null);

        r0.<org.apache.xalan.templates.StylesheetRoot: org.apache.xalan.extensions.ExtensionNamespacesManager m_extNsMgr> = null;

        r0.<org.apache.xalan.templates.StylesheetRoot: boolean m_outputMethodSet> = 0;

        virtualinvoke r0.<org.apache.xalan.templates.Stylesheet: void setStylesheetRoot(org.apache.xalan.templates.StylesheetRoot)>(r0);

     label1:
        $r1 = new org.apache.xpath.XPath;

        specialinvoke $r1.<org.apache.xpath.XPath: void <init>(java.lang.String,javax.xml.transform.SourceLocator,org.apache.xml.utils.PrefixResolver,int,javax.xml.transform.ErrorListener)>("node()", r0, r0, 0, r2);

        r0.<org.apache.xalan.templates.StylesheetRoot: org.apache.xpath.XPath m_selectDefault> = $r1;

        specialinvoke r0.<org.apache.xalan.templates.StylesheetRoot: void initDefaultRule(javax.xml.transform.ErrorListener)>(r2);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        $r4 = new javax.xml.transform.TransformerConfigurationException;

        $r5 = staticinvoke <org.apache.xalan.res.XSLMessages: java.lang.String createMessage(java.lang.String,java.lang.Object[])>("ER_CANNOT_INIT_DEFAULT_TEMPLATES", null);

        specialinvoke $r4.<javax.xml.transform.TransformerConfigurationException: void <init>(java.lang.String,java.lang.Throwable)>($r5, $r3);

        throw $r4;

     label4:
        return;

        catch javax.xml.transform.TransformerException from label1 to label2 with label3;
    }

    public void <init>(org.apache.xalan.processor.XSLTSchema, javax.xml.transform.ErrorListener) throws javax.xml.transform.TransformerConfigurationException
    {
        org.apache.xalan.templates.StylesheetRoot r0;
        org.apache.xalan.processor.XSLTSchema r2;
        javax.xml.transform.ErrorListener r1;
        java.util.Hashtable $r3;

        r0 := @this: org.apache.xalan.templates.StylesheetRoot;

        r2 := @parameter0: org.apache.xalan.processor.XSLTSchema;

        r1 := @parameter1: javax.xml.transform.ErrorListener;

        specialinvoke r0.<org.apache.xalan.templates.StylesheetRoot: void <init>(javax.xml.transform.ErrorListener)>(r1);

        $r3 = virtualinvoke r2.<org.apache.xalan.processor.XSLTSchema: java.util.Hashtable getElemsAvailable()>();

        r0.<org.apache.xalan.templates.StylesheetRoot: java.util.Hashtable m_availElems> = $r3;

        return;
    }

    public boolean isRoot()
    {
        org.apache.xalan.templates.StylesheetRoot r0;

        r0 := @this: org.apache.xalan.templates.StylesheetRoot;

        return 1;
    }

    public java.util.Hashtable getAvailableElements()
    {
        org.apache.xalan.templates.StylesheetRoot r0;
        java.util.Hashtable $r1;

        r0 := @this: org.apache.xalan.templates.StylesheetRoot;

        $r1 = r0.<org.apache.xalan.templates.StylesheetRoot: java.util.Hashtable m_availElems>;

        return $r1;
    }

    public org.apache.xalan.extensions.ExtensionNamespacesManager getExtensionNamespacesManager()
    {
        org.apache.xalan.templates.StylesheetRoot r0;
        org.apache.xalan.extensions.ExtensionNamespacesManager $r1, $r2, $r3;

        r0 := @this: org.apache.xalan.templates.StylesheetRoot;

        $r1 = r0.<org.apache.xalan.templates.StylesheetRoot: org.apache.xalan.extensions.ExtensionNamespacesManager m_extNsMgr>;

        if $r1 != null goto label1;

        $r3 = new org.apache.xalan.extensions.ExtensionNamespacesManager;

        specialinvoke $r3.<org.apache.xalan.extensions.ExtensionNamespacesManager: void <init>()>();

        r0.<org.apache.xalan.templates.StylesheetRoot: org.apache.xalan.extensions.ExtensionNamespacesManager m_extNsMgr> = $r3;

     label1:
        $r2 = r0.<org.apache.xalan.templates.StylesheetRoot: org.apache.xalan.extensions.ExtensionNamespacesManager m_extNsMgr>;

        return $r2;
    }

    public java.util.Vector getExtensions()
    {
        org.apache.xalan.templates.StylesheetRoot r0;
        java.util.Vector $r3;
        org.apache.xalan.extensions.ExtensionNamespacesManager $r1, $r2;

        r0 := @this: org.apache.xalan.templates.StylesheetRoot;

        $r1 = r0.<org.apache.xalan.templates.StylesheetRoot: org.apache.xalan.extensions.ExtensionNamespacesManager m_extNsMgr>;

        if $r1 == null goto label1;

        $r2 = r0.<org.apache.xalan.templates.StylesheetRoot: org.apache.xalan.extensions.ExtensionNamespacesManager m_extNsMgr>;

        $r3 = virtualinvoke $r2.<org.apache.xalan.extensions.ExtensionNamespacesManager: java.util.Vector getExtensions()>();

        goto label2;

     label1:
        $r3 = null;

     label2:
        return $r3;
    }

    public javax.xml.transform.Transformer newTransformer()
    {
        org.apache.xalan.templates.StylesheetRoot r1;
        org.apache.xalan.transformer.TransformerImpl $r0;

        r1 := @this: org.apache.xalan.templates.StylesheetRoot;

        $r0 = new org.apache.xalan.transformer.TransformerImpl;

        specialinvoke $r0.<org.apache.xalan.transformer.TransformerImpl: void <init>(org.apache.xalan.templates.StylesheetRoot)>(r1);

        return $r0;
    }

    public java.util.Properties getDefaultOutputProps()
    {
        org.apache.xalan.templates.StylesheetRoot r0;
        java.util.Properties $r2;
        org.apache.xalan.templates.OutputProperties $r1;

        r0 := @this: org.apache.xalan.templates.StylesheetRoot;

        $r1 = r0.<org.apache.xalan.templates.StylesheetRoot: org.apache.xalan.templates.OutputProperties m_outputProperties>;

        $r2 = virtualinvoke $r1.<org.apache.xalan.templates.OutputProperties: java.util.Properties getProperties()>();

        return $r2;
    }

    public java.util.Properties getOutputProperties()
    {
        org.apache.xalan.templates.StylesheetRoot r0;
        java.util.Properties $r1, $r3;
        java.lang.Object $r2;

        r0 := @this: org.apache.xalan.templates.StylesheetRoot;

        $r1 = virtualinvoke r0.<org.apache.xalan.templates.StylesheetRoot: java.util.Properties getDefaultOutputProps()>();

        $r2 = virtualinvoke $r1.<java.util.Hashtable: java.lang.Object clone()>();

        $r3 = (java.util.Properties) $r2;

        return $r3;
    }

    public void recompose() throws javax.xml.transform.TransformerException
    {
        org.apache.xalan.templates.StylesheetComposed $r3, $r16, $r24, $r27, $r28, $r30;
        java.util.Vector $r31, $r32, $r36, $r39;
        org.apache.xalan.templates.OutputProperties $r14, $r15, $r33;
        org.apache.xalan.templates.ElemTemplateElement $r12;
        org.apache.xalan.templates.StylesheetComposed[] $r2, $r21, $r22, $r25, $r26, $r29;
        org.apache.xalan.templates.TemplateList $r13, $r38;
        org.apache.xalan.extensions.ExtensionNamespacesManager $r18, $r19;
        org.apache.xalan.templates.Stylesheet $r17;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10, i11, i12, i13, i14, i15, $i17, $i19, $i21;
        java.util.Hashtable $r34, $r35, $r37;
        org.apache.xalan.templates.StylesheetRoot r1;
        java.lang.Object $r11, $r23;

        r1 := @this: org.apache.xalan.templates.StylesheetRoot;

        $r31 = new java.util.Vector;

        specialinvoke $r31.<java.util.Vector: void <init>()>();

        $r2 = r1.<org.apache.xalan.templates.StylesheetRoot: org.apache.xalan.templates.StylesheetComposed[] m_globalImportList>;

        if null != $r2 goto label03;

        $r32 = new java.util.Vector;

        specialinvoke $r32.<java.util.Vector: void <init>()>();

        virtualinvoke r1.<org.apache.xalan.templates.StylesheetRoot: void addImports(org.apache.xalan.templates.Stylesheet,boolean,java.util.Vector)>(r1, 1, $r32);

        $i6 = virtualinvoke $r32.<java.util.Vector: int size()>();

        $r21 = newarray (org.apache.xalan.templates.StylesheetComposed)[$i6];

        r1.<org.apache.xalan.templates.StylesheetRoot: org.apache.xalan.templates.StylesheetComposed[] m_globalImportList> = $r21;

        i10 = 0;

        $i7 = virtualinvoke $r32.<java.util.Vector: int size()>();

        i11 = $i7 - 1;

        goto label02;

     label01:
        $r22 = r1.<org.apache.xalan.templates.StylesheetRoot: org.apache.xalan.templates.StylesheetComposed[] m_globalImportList>;

        $r23 = virtualinvoke $r32.<java.util.Vector: java.lang.Object elementAt(int)>(i10);

        $r24 = (org.apache.xalan.templates.StylesheetComposed) $r23;

        $r22[i11] = $r24;

        $r25 = r1.<org.apache.xalan.templates.StylesheetRoot: org.apache.xalan.templates.StylesheetComposed[] m_globalImportList>;

        $r28 = $r25[i11];

        $r26 = r1.<org.apache.xalan.templates.StylesheetRoot: org.apache.xalan.templates.StylesheetComposed[] m_globalImportList>;

        $r27 = $r26[i11];

        virtualinvoke $r28.<org.apache.xalan.templates.StylesheetComposed: void recomposeIncludes(org.apache.xalan.templates.Stylesheet)>($r27);

        $r29 = r1.<org.apache.xalan.templates.StylesheetRoot: org.apache.xalan.templates.StylesheetComposed[] m_globalImportList>;

        $i9 = i11;

        $i17 = (int) -1;

        i11 = i11 + $i17;

        $r30 = $r29[$i9];

        virtualinvoke $r30.<org.apache.xalan.templates.StylesheetComposed: void recomposeImports()>();

        i10 = i10 + 1;

     label02:
        $i8 = virtualinvoke $r32.<java.util.Vector: int size()>();

        if i10 < $i8 goto label01;

     label03:
        $i0 = virtualinvoke r1.<org.apache.xalan.templates.StylesheetRoot: int getGlobalImportCount()>();

        i12 = 0;

        goto label05;

     label04:
        $r3 = virtualinvoke r1.<org.apache.xalan.templates.StylesheetRoot: org.apache.xalan.templates.StylesheetComposed getGlobalImport(int)>(i12);

        virtualinvoke $r3.<org.apache.xalan.templates.StylesheetComposed: void recompose(java.util.Vector)>($r31);

        i12 = i12 + 1;

     label05:
        if i12 < $i0 goto label04;

        $i1 = virtualinvoke $r31.<java.util.Vector: int size()>();

        $i2 = $i1 - 1;

        specialinvoke r1.<org.apache.xalan.templates.StylesheetRoot: void QuickSort2(java.util.Vector,int,int)>($r31, 0, $i2);

        $r33 = new org.apache.xalan.templates.OutputProperties;

        specialinvoke $r33.<org.apache.xalan.templates.OutputProperties: void <init>(java.lang.String)>("");

        r1.<org.apache.xalan.templates.StylesheetRoot: org.apache.xalan.templates.OutputProperties m_outputProperties> = $r33;

        $r34 = new java.util.Hashtable;

        specialinvoke $r34.<java.util.Hashtable: void <init>()>();

        r1.<org.apache.xalan.templates.StylesheetRoot: java.util.Hashtable m_attrSets> = $r34;

        $r35 = new java.util.Hashtable;

        specialinvoke $r35.<java.util.Hashtable: void <init>()>();

        r1.<org.apache.xalan.templates.StylesheetRoot: java.util.Hashtable m_decimalFormatSymbols> = $r35;

        $r36 = new java.util.Vector;

        specialinvoke $r36.<java.util.Vector: void <init>()>();

        r1.<org.apache.xalan.templates.StylesheetRoot: java.util.Vector m_keyDecls> = $r36;

        $r37 = new java.util.Hashtable;

        specialinvoke $r37.<java.util.Hashtable: void <init>()>();

        r1.<org.apache.xalan.templates.StylesheetRoot: java.util.Hashtable m_namespaceAliasComposed> = $r37;

        $r38 = new org.apache.xalan.templates.TemplateList;

        specialinvoke $r38.<org.apache.xalan.templates.TemplateList: void <init>()>();

        r1.<org.apache.xalan.templates.StylesheetRoot: org.apache.xalan.templates.TemplateList m_templateList> = $r38;

        $r39 = new java.util.Vector;

        specialinvoke $r39.<java.util.Vector: void <init>()>();

        r1.<org.apache.xalan.templates.StylesheetRoot: java.util.Vector m_variables> = $r39;

        $i3 = virtualinvoke $r31.<java.util.Vector: int size()>();

        i13 = $i3 - 1;

        goto label07;

     label06:
        $r11 = virtualinvoke $r31.<java.util.Vector: java.lang.Object elementAt(int)>(i13);

        $r12 = (org.apache.xalan.templates.ElemTemplateElement) $r11;

        virtualinvoke $r12.<org.apache.xalan.templates.ElemTemplateElement: void recompose(org.apache.xalan.templates.StylesheetRoot)>(r1);

        $i19 = (int) -1;

        i13 = i13 + $i19;

     label07:
        if i13 >= 0 goto label06;

        virtualinvoke r1.<org.apache.xalan.templates.StylesheetRoot: void initComposeState()>();

        $r13 = r1.<org.apache.xalan.templates.StylesheetRoot: org.apache.xalan.templates.TemplateList m_templateList>;

        virtualinvoke $r13.<org.apache.xalan.templates.TemplateList: void compose(org.apache.xalan.templates.StylesheetRoot)>(r1);

        $r14 = r1.<org.apache.xalan.templates.StylesheetRoot: org.apache.xalan.templates.OutputProperties m_outputProperties>;

        virtualinvoke $r14.<org.apache.xalan.templates.OutputProperties: void compose(org.apache.xalan.templates.StylesheetRoot)>(r1);

        $r15 = r1.<org.apache.xalan.templates.StylesheetRoot: org.apache.xalan.templates.OutputProperties m_outputProperties>;

        virtualinvoke $r15.<org.apache.xalan.templates.ElemTemplateElement: void endCompose(org.apache.xalan.templates.StylesheetRoot)>(r1);

        $i4 = virtualinvoke r1.<org.apache.xalan.templates.StylesheetRoot: int getGlobalImportCount()>();

        i14 = 0;

        goto label11;

     label08:
        $r16 = virtualinvoke r1.<org.apache.xalan.templates.StylesheetRoot: org.apache.xalan.templates.StylesheetComposed getGlobalImport(int)>(i14);

        $i5 = virtualinvoke $r16.<org.apache.xalan.templates.StylesheetComposed: int getIncludeCountComposed()>();

        $i21 = (int) -1;

        i15 = $i21;

        goto label10;

     label09:
        $r17 = virtualinvoke $r16.<org.apache.xalan.templates.StylesheetComposed: org.apache.xalan.templates.Stylesheet getIncludeComposed(int)>(i15);

        virtualinvoke r1.<org.apache.xalan.templates.StylesheetRoot: void composeTemplates(org.apache.xalan.templates.ElemTemplateElement)>($r17);

        i15 = i15 + 1;

     label10:
        if i15 < $i5 goto label09;

        i14 = i14 + 1;

     label11:
        if i14 < $i4 goto label08;

        $r18 = r1.<org.apache.xalan.templates.StylesheetRoot: org.apache.xalan.extensions.ExtensionNamespacesManager m_extNsMgr>;

        if $r18 == null goto label12;

        $r19 = r1.<org.apache.xalan.templates.StylesheetRoot: org.apache.xalan.extensions.ExtensionNamespacesManager m_extNsMgr>;

        virtualinvoke $r19.<org.apache.xalan.extensions.ExtensionNamespacesManager: void registerUnregisteredNamespaces()>();

     label12:
        specialinvoke r1.<org.apache.xalan.templates.StylesheetRoot: void clearComposeState()>();

        return;
    }

    void composeTemplates(org.apache.xalan.templates.ElemTemplateElement) throws javax.xml.transform.TransformerException
    {
        org.apache.xalan.templates.StylesheetRoot r1;
        org.apache.xalan.templates.ElemTemplateElement r0, r2;

        r1 := @this: org.apache.xalan.templates.StylesheetRoot;

        r0 := @parameter0: org.apache.xalan.templates.ElemTemplateElement;

        virtualinvoke r0.<org.apache.xalan.templates.ElemTemplateElement: void compose(org.apache.xalan.templates.StylesheetRoot)>(r1);

        r2 = virtualinvoke r0.<org.apache.xalan.templates.ElemTemplateElement: org.apache.xalan.templates.ElemTemplateElement getFirstChildElem()>();

        goto label2;

     label1:
        virtualinvoke r1.<org.apache.xalan.templates.StylesheetRoot: void composeTemplates(org.apache.xalan.templates.ElemTemplateElement)>(r2);

        r2 = virtualinvoke r2.<org.apache.xalan.templates.ElemTemplateElement: org.apache.xalan.templates.ElemTemplateElement getNextSiblingElem()>();

     label2:
        if r2 != null goto label1;

        virtualinvoke r0.<org.apache.xalan.templates.ElemTemplateElement: void endCompose(org.apache.xalan.templates.StylesheetRoot)>(r1);

        return;
    }

    protected void addImports(org.apache.xalan.templates.Stylesheet, boolean, java.util.Vector)
    {
        org.apache.xalan.templates.StylesheetComposed $r4;
        org.apache.xalan.templates.Stylesheet r0, $r2;
        org.apache.xalan.templates.StylesheetRoot r3;
        java.util.Vector r1;
        int $i0, $i1, i2, i3;
        boolean z0;

        r3 := @this: org.apache.xalan.templates.StylesheetRoot;

        r0 := @parameter0: org.apache.xalan.templates.Stylesheet;

        z0 := @parameter1: boolean;

        r1 := @parameter2: java.util.Vector;

        $i0 = virtualinvoke r0.<org.apache.xalan.templates.Stylesheet: int getImportCount()>();

        if $i0 <= 0 goto label3;

        i2 = 0;

        goto label2;

     label1:
        $r4 = virtualinvoke r0.<org.apache.xalan.templates.Stylesheet: org.apache.xalan.templates.StylesheetComposed getImport(int)>(i2);

        virtualinvoke r3.<org.apache.xalan.templates.StylesheetRoot: void addImports(org.apache.xalan.templates.Stylesheet,boolean,java.util.Vector)>($r4, 1, r1);

        i2 = i2 + 1;

     label2:
        if i2 < $i0 goto label1;

     label3:
        $i1 = virtualinvoke r0.<org.apache.xalan.templates.Stylesheet: int getIncludeCount()>();

        if $i1 <= 0 goto label6;

        i3 = 0;

        goto label5;

     label4:
        $r2 = virtualinvoke r0.<org.apache.xalan.templates.Stylesheet: org.apache.xalan.templates.Stylesheet getInclude(int)>(i3);

        virtualinvoke r3.<org.apache.xalan.templates.StylesheetRoot: void addImports(org.apache.xalan.templates.Stylesheet,boolean,java.util.Vector)>($r2, 0, r1);

        i3 = i3 + 1;

     label5:
        if i3 < $i1 goto label4;

     label6:
        if z0 == 0 goto label7;

        virtualinvoke r1.<java.util.Vector: void addElement(java.lang.Object)>(r0);

     label7:
        return;
    }

    public org.apache.xalan.templates.StylesheetComposed getGlobalImport(int)
    {
        org.apache.xalan.templates.StylesheetRoot r0;
        org.apache.xalan.templates.StylesheetComposed[] $r1;
        int i0;
        org.apache.xalan.templates.StylesheetComposed $r2;

        r0 := @this: org.apache.xalan.templates.StylesheetRoot;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.xalan.templates.StylesheetRoot: org.apache.xalan.templates.StylesheetComposed[] m_globalImportList>;

        $r2 = $r1[i0];

        return $r2;
    }

    public int getGlobalImportCount()
    {
        org.apache.xalan.templates.StylesheetRoot r0;
        org.apache.xalan.templates.StylesheetComposed[] $r1, $r2;
        int $i0;

        r0 := @this: org.apache.xalan.templates.StylesheetRoot;

        $r1 = r0.<org.apache.xalan.templates.StylesheetRoot: org.apache.xalan.templates.StylesheetComposed[] m_globalImportList>;

        if $r1 == null goto label1;

        $r2 = r0.<org.apache.xalan.templates.StylesheetRoot: org.apache.xalan.templates.StylesheetComposed[] m_globalImportList>;

        $i0 = lengthof $r2;

        goto label2;

     label1:
        $i0 = 1;

     label2:
        return $i0;
    }

    public int getImportNumber(org.apache.xalan.templates.StylesheetComposed)
    {
        org.apache.xalan.templates.StylesheetRoot r0;
        org.apache.xalan.templates.StylesheetComposed r1, $r2;
        int $i0, i1, $i3;

        r0 := @this: org.apache.xalan.templates.StylesheetRoot;

        r1 := @parameter0: org.apache.xalan.templates.StylesheetComposed;

        if r0 != r1 goto label1;

        return 0;

     label1:
        $i0 = virtualinvoke r0.<org.apache.xalan.templates.StylesheetRoot: int getGlobalImportCount()>();

        i1 = 0;

        goto label4;

     label2:
        $r2 = virtualinvoke r0.<org.apache.xalan.templates.StylesheetRoot: org.apache.xalan.templates.StylesheetComposed getGlobalImport(int)>(i1);

        if r1 != $r2 goto label3;

        return i1;

     label3:
        i1 = i1 + 1;

     label4:
        if i1 < $i0 goto label2;

        $i3 = (int) -1;

        return $i3;
    }

    void recomposeOutput(org.apache.xalan.templates.OutputProperties) throws javax.xml.transform.TransformerException
    {
        org.apache.xalan.templates.StylesheetRoot r0;
        org.apache.xalan.templates.OutputProperties r1, $r2;

        r0 := @this: org.apache.xalan.templates.StylesheetRoot;

        r1 := @parameter0: org.apache.xalan.templates.OutputProperties;

        $r2 = r0.<org.apache.xalan.templates.StylesheetRoot: org.apache.xalan.templates.OutputProperties m_outputProperties>;

        virtualinvoke $r2.<org.apache.xalan.templates.OutputProperties: void copyFrom(org.apache.xalan.templates.OutputProperties)>(r1);

        return;
    }

    public org.apache.xalan.templates.OutputProperties getOutputComposed()
    {
        org.apache.xalan.templates.StylesheetRoot r0;
        org.apache.xalan.templates.OutputProperties $r1;

        r0 := @this: org.apache.xalan.templates.StylesheetRoot;

        $r1 = r0.<org.apache.xalan.templates.StylesheetRoot: org.apache.xalan.templates.OutputProperties m_outputProperties>;

        return $r1;
    }

    public boolean isOutputMethodSet()
    {
        org.apache.xalan.templates.StylesheetRoot r0;
        boolean $z0;

        r0 := @this: org.apache.xalan.templates.StylesheetRoot;

        $z0 = r0.<org.apache.xalan.templates.StylesheetRoot: boolean m_outputMethodSet>;

        return $z0;
    }

    void recomposeAttributeSets(org.apache.xalan.templates.ElemAttributeSet)
    {
        org.apache.xml.utils.QName $r3, $r7;
        org.apache.xalan.templates.ElemAttributeSet r1;
        org.apache.xalan.templates.StylesheetRoot r0;
        java.util.Vector $r5, r8;
        java.lang.Object $r4;
        java.util.Hashtable $r2, $r6;

        r0 := @this: org.apache.xalan.templates.StylesheetRoot;

        r1 := @parameter0: org.apache.xalan.templates.ElemAttributeSet;

        $r2 = r0.<org.apache.xalan.templates.StylesheetRoot: java.util.Hashtable m_attrSets>;

        $r3 = virtualinvoke r1.<org.apache.xalan.templates.ElemAttributeSet: org.apache.xml.utils.QName getName()>();

        $r4 = virtualinvoke $r2.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>($r3);

        r8 = (java.util.Vector) $r4;

        if null != r8 goto label1;

        $r5 = new java.util.Vector;

        specialinvoke $r5.<java.util.Vector: void <init>()>();

        r8 = $r5;

        $r6 = r0.<org.apache.xalan.templates.StylesheetRoot: java.util.Hashtable m_attrSets>;

        $r7 = virtualinvoke r1.<org.apache.xalan.templates.ElemAttributeSet: org.apache.xml.utils.QName getName()>();

        virtualinvoke $r6.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, $r5);

     label1:
        virtualinvoke r8.<java.util.Vector: void addElement(java.lang.Object)>(r1);

        return;
    }

    public java.util.Vector getAttributeSetComposed(org.apache.xml.utils.QName) throws java.lang.ArrayIndexOutOfBoundsException
    {
        org.apache.xalan.templates.StylesheetRoot r0;
        org.apache.xml.utils.QName r1;
        java.util.Vector $r4;
        java.lang.Object $r3;
        java.util.Hashtable $r2;

        r0 := @this: org.apache.xalan.templates.StylesheetRoot;

        r1 := @parameter0: org.apache.xml.utils.QName;

        $r2 = r0.<org.apache.xalan.templates.StylesheetRoot: java.util.Hashtable m_attrSets>;

        $r3 = virtualinvoke $r2.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (java.util.Vector) $r3;

        return $r4;
    }

    void recomposeDecimalFormats(org.apache.xalan.templates.DecimalFormatProperties)
    {
        java.lang.Object[] $r9, $r11;
        java.text.DecimalFormatSymbols r5, $r6, $r14;
        java.lang.String r15;
        java.util.Hashtable $r2, $r12;
        boolean $z0, $z1;
        org.apache.xml.utils.QName $r3, $r7, $r8, $r10, $r13;
        org.apache.xalan.templates.DecimalFormatProperties r1;
        org.apache.xalan.templates.StylesheetRoot r0;
        java.lang.Object $r4;

        r0 := @this: org.apache.xalan.templates.StylesheetRoot;

        r1 := @parameter0: org.apache.xalan.templates.DecimalFormatProperties;

        $r2 = r0.<org.apache.xalan.templates.StylesheetRoot: java.util.Hashtable m_decimalFormatSymbols>;

        $r3 = virtualinvoke r1.<org.apache.xalan.templates.DecimalFormatProperties: org.apache.xml.utils.QName getName()>();

        $r4 = virtualinvoke $r2.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>($r3);

        r5 = (java.text.DecimalFormatSymbols) $r4;

        if null != r5 goto label1;

        $r12 = r0.<org.apache.xalan.templates.StylesheetRoot: java.util.Hashtable m_decimalFormatSymbols>;

        $r13 = virtualinvoke r1.<org.apache.xalan.templates.DecimalFormatProperties: org.apache.xml.utils.QName getName()>();

        $r14 = virtualinvoke r1.<org.apache.xalan.templates.DecimalFormatProperties: java.text.DecimalFormatSymbols getDecimalFormatSymbols()>();

        virtualinvoke $r12.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r13, $r14);

        goto label4;

     label1:
        $r6 = virtualinvoke r1.<org.apache.xalan.templates.DecimalFormatProperties: java.text.DecimalFormatSymbols getDecimalFormatSymbols()>();

        $z0 = virtualinvoke $r6.<java.text.DecimalFormatSymbols: boolean equals(java.lang.Object)>(r5);

        if $z0 != 0 goto label4;

        $r7 = virtualinvoke r1.<org.apache.xalan.templates.DecimalFormatProperties: org.apache.xml.utils.QName getName()>();

        $r8 = new org.apache.xml.utils.QName;

        specialinvoke $r8.<org.apache.xml.utils.QName: void <init>(java.lang.String)>("");

        $z1 = virtualinvoke $r7.<org.apache.xml.utils.QName: boolean equals(java.lang.Object)>($r8);

        if $z1 == 0 goto label2;

        $r11 = newarray (java.lang.Object)[0];

        r15 = staticinvoke <org.apache.xalan.res.XSLMessages: java.lang.String createWarning(java.lang.String,java.lang.Object[])>("WG_ONE_DEFAULT_XSLDECIMALFORMAT_ALLOWED", $r11);

        goto label3;

     label2:
        $r9 = newarray (java.lang.Object)[1];

        $r10 = virtualinvoke r1.<org.apache.xalan.templates.DecimalFormatProperties: org.apache.xml.utils.QName getName()>();

        $r9[0] = $r10;

        r15 = staticinvoke <org.apache.xalan.res.XSLMessages: java.lang.String createWarning(java.lang.String,java.lang.Object[])>("WG_XSLDECIMALFORMAT_NAMES_MUST_BE_UNIQUE", $r9);

     label3:
        virtualinvoke r0.<org.apache.xalan.templates.ElemTemplateElement: void error(java.lang.String)>(r15);

     label4:
        return;
    }

    public java.text.DecimalFormatSymbols getDecimalFormatComposed(org.apache.xml.utils.QName)
    {
        org.apache.xalan.templates.StylesheetRoot r0;
        org.apache.xml.utils.QName r1;
        java.text.DecimalFormatSymbols $r4;
        java.lang.Object $r3;
        java.util.Hashtable $r2;

        r0 := @this: org.apache.xalan.templates.StylesheetRoot;

        r1 := @parameter0: org.apache.xml.utils.QName;

        $r2 = r0.<org.apache.xalan.templates.StylesheetRoot: java.util.Hashtable m_decimalFormatSymbols>;

        $r3 = virtualinvoke $r2.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (java.text.DecimalFormatSymbols) $r3;

        return $r4;
    }

    void recomposeKeys(org.apache.xalan.templates.KeyDeclaration)
    {
        org.apache.xalan.templates.StylesheetRoot r0;
        java.util.Vector $r2;
        org.apache.xalan.templates.KeyDeclaration r1;

        r0 := @this: org.apache.xalan.templates.StylesheetRoot;

        r1 := @parameter0: org.apache.xalan.templates.KeyDeclaration;

        $r2 = r0.<org.apache.xalan.templates.StylesheetRoot: java.util.Vector m_keyDecls>;

        virtualinvoke $r2.<java.util.Vector: void addElement(java.lang.Object)>(r1);

        return;
    }

    public java.util.Vector getKeysComposed()
    {
        org.apache.xalan.templates.StylesheetRoot r0;
        java.util.Vector $r1;

        r0 := @this: org.apache.xalan.templates.StylesheetRoot;

        $r1 = r0.<org.apache.xalan.templates.StylesheetRoot: java.util.Vector m_keyDecls>;

        return $r1;
    }

    void recomposeNamespaceAliases(org.apache.xalan.templates.NamespaceAlias)
    {
        org.apache.xalan.templates.StylesheetRoot r0;
        org.apache.xalan.templates.NamespaceAlias r1;
        java.lang.String $r3;
        java.util.Hashtable $r2;

        r0 := @this: org.apache.xalan.templates.StylesheetRoot;

        r1 := @parameter0: org.apache.xalan.templates.NamespaceAlias;

        $r2 = r0.<org.apache.xalan.templates.StylesheetRoot: java.util.Hashtable m_namespaceAliasComposed>;

        $r3 = virtualinvoke r1.<org.apache.xalan.templates.NamespaceAlias: java.lang.String getStylesheetNamespace()>();

        virtualinvoke $r2.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, r1);

        return;
    }

    public org.apache.xalan.templates.NamespaceAlias getNamespaceAliasComposed(java.lang.String)
    {
        org.apache.xalan.templates.StylesheetRoot r0;
        java.lang.Object $r5;
        java.lang.String r2;
        org.apache.xalan.templates.NamespaceAlias $r4;
        java.util.Hashtable $r1, $r3;

        r0 := @this: org.apache.xalan.templates.StylesheetRoot;

        r2 := @parameter0: java.lang.String;

        $r1 = r0.<org.apache.xalan.templates.StylesheetRoot: java.util.Hashtable m_namespaceAliasComposed>;

        if null != $r1 goto label1;

        return null;

     label1:
        $r3 = r0.<org.apache.xalan.templates.StylesheetRoot: java.util.Hashtable m_namespaceAliasComposed>;

        $r5 = virtualinvoke $r3.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r2);

        $r4 = (org.apache.xalan.templates.NamespaceAlias) $r5;

        return $r4;
    }

    void recomposeTemplates(org.apache.xalan.templates.ElemTemplate)
    {
        org.apache.xalan.templates.StylesheetRoot r0;
        org.apache.xalan.templates.TemplateList $r2;
        org.apache.xalan.templates.ElemTemplate r1;

        r0 := @this: org.apache.xalan.templates.StylesheetRoot;

        r1 := @parameter0: org.apache.xalan.templates.ElemTemplate;

        $r2 = r0.<org.apache.xalan.templates.StylesheetRoot: org.apache.xalan.templates.TemplateList m_templateList>;

        virtualinvoke $r2.<org.apache.xalan.templates.TemplateList: void setTemplate(org.apache.xalan.templates.ElemTemplate)>(r1);

        return;
    }

    public final org.apache.xalan.templates.TemplateList getTemplateListComposed()
    {
        org.apache.xalan.templates.StylesheetRoot r0;
        org.apache.xalan.templates.TemplateList $r1;

        r0 := @this: org.apache.xalan.templates.StylesheetRoot;

        $r1 = r0.<org.apache.xalan.templates.StylesheetRoot: org.apache.xalan.templates.TemplateList m_templateList>;

        return $r1;
    }

    public final void setTemplateListComposed(org.apache.xalan.templates.TemplateList)
    {
        org.apache.xalan.templates.StylesheetRoot r0;
        org.apache.xalan.templates.TemplateList r1;

        r0 := @this: org.apache.xalan.templates.StylesheetRoot;

        r1 := @parameter0: org.apache.xalan.templates.TemplateList;

        r0.<org.apache.xalan.templates.StylesheetRoot: org.apache.xalan.templates.TemplateList m_templateList> = r1;

        return;
    }

    public org.apache.xalan.templates.ElemTemplate getTemplateComposed(org.apache.xpath.XPathContext, int, org.apache.xml.utils.QName, boolean, org.apache.xml.dtm.DTM) throws javax.xml.transform.TransformerException
    {
        org.apache.xml.utils.QName r2;
        org.apache.xalan.templates.StylesheetRoot r0;
        org.apache.xalan.templates.TemplateList $r4;
        org.apache.xalan.templates.ElemTemplate $r5;
        org.apache.xpath.XPathContext r1;
        int i0;
        org.apache.xml.dtm.DTM r3;
        boolean z0;

        r0 := @this: org.apache.xalan.templates.StylesheetRoot;

        r1 := @parameter0: org.apache.xpath.XPathContext;

        i0 := @parameter1: int;

        r2 := @parameter2: org.apache.xml.utils.QName;

        z0 := @parameter3: boolean;

        r3 := @parameter4: org.apache.xml.dtm.DTM;

        $r4 = r0.<org.apache.xalan.templates.StylesheetRoot: org.apache.xalan.templates.TemplateList m_templateList>;

        $r5 = virtualinvoke $r4.<org.apache.xalan.templates.TemplateList: org.apache.xalan.templates.ElemTemplate getTemplate(org.apache.xpath.XPathContext,int,org.apache.xml.utils.QName,boolean,org.apache.xml.dtm.DTM)>(r1, i0, r2, z0, r3);

        return $r5;
    }

    public org.apache.xalan.templates.ElemTemplate getTemplateComposed(org.apache.xpath.XPathContext, int, org.apache.xml.utils.QName, int, int, boolean, org.apache.xml.dtm.DTM) throws javax.xml.transform.TransformerException
    {
        org.apache.xml.utils.QName r2;
        org.apache.xalan.templates.StylesheetRoot r0;
        org.apache.xalan.templates.TemplateList $r4;
        org.apache.xalan.templates.ElemTemplate $r5;
        org.apache.xpath.XPathContext r1;
        int i0, i1, i2;
        org.apache.xml.dtm.DTM r3;
        boolean z0;

        r0 := @this: org.apache.xalan.templates.StylesheetRoot;

        r1 := @parameter0: org.apache.xpath.XPathContext;

        i0 := @parameter1: int;

        r2 := @parameter2: org.apache.xml.utils.QName;

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        z0 := @parameter5: boolean;

        r3 := @parameter6: org.apache.xml.dtm.DTM;

        $r4 = r0.<org.apache.xalan.templates.StylesheetRoot: org.apache.xalan.templates.TemplateList m_templateList>;

        $r5 = virtualinvoke $r4.<org.apache.xalan.templates.TemplateList: org.apache.xalan.templates.ElemTemplate getTemplate(org.apache.xpath.XPathContext,int,org.apache.xml.utils.QName,int,int,boolean,org.apache.xml.dtm.DTM)>(r1, i0, r2, i1, i2, z0, r3);

        return $r5;
    }

    public org.apache.xalan.templates.ElemTemplate getTemplateComposed(org.apache.xml.utils.QName)
    {
        org.apache.xalan.templates.StylesheetRoot r0;
        org.apache.xalan.templates.TemplateList $r2;
        org.apache.xml.utils.QName r1;
        org.apache.xalan.templates.ElemTemplate $r3;

        r0 := @this: org.apache.xalan.templates.StylesheetRoot;

        r1 := @parameter0: org.apache.xml.utils.QName;

        $r2 = r0.<org.apache.xalan.templates.StylesheetRoot: org.apache.xalan.templates.TemplateList m_templateList>;

        $r3 = virtualinvoke $r2.<org.apache.xalan.templates.TemplateList: org.apache.xalan.templates.ElemTemplate getTemplate(org.apache.xml.utils.QName)>(r1);

        return $r3;
    }

    void recomposeVariables(org.apache.xalan.templates.ElemVariable)
    {
        org.apache.xalan.templates.StylesheetRoot r0;
        org.apache.xml.utils.QName $r2;
        java.util.Vector $r4, $r5;
        org.apache.xalan.templates.ElemVariable r1, $r3;
        int $i0;

        r0 := @this: org.apache.xalan.templates.StylesheetRoot;

        r1 := @parameter0: org.apache.xalan.templates.ElemVariable;

        $r2 = virtualinvoke r1.<org.apache.xalan.templates.ElemVariable: org.apache.xml.utils.QName getName()>();

        $r3 = virtualinvoke r0.<org.apache.xalan.templates.StylesheetRoot: org.apache.xalan.templates.ElemVariable getVariableOrParamComposed(org.apache.xml.utils.QName)>($r2);

        if $r3 != null goto label1;

        virtualinvoke r1.<org.apache.xalan.templates.ElemVariable: void setIsTopLevel(boolean)>(1);

        $r4 = r0.<org.apache.xalan.templates.StylesheetRoot: java.util.Vector m_variables>;

        $i0 = virtualinvoke $r4.<java.util.Vector: int size()>();

        virtualinvoke r1.<org.apache.xalan.templates.ElemVariable: void setIndex(int)>($i0);

        $r5 = r0.<org.apache.xalan.templates.StylesheetRoot: java.util.Vector m_variables>;

        virtualinvoke $r5.<java.util.Vector: void addElement(java.lang.Object)>(r1);

     label1:
        return;
    }

    public org.apache.xalan.templates.ElemVariable getVariableOrParamComposed(org.apache.xml.utils.QName)
    {
        org.apache.xml.utils.QName $r6, r7;
        org.apache.xalan.templates.ElemVariable r5;
        org.apache.xalan.templates.StylesheetRoot r0;
        java.util.Vector $r1, $r2, $r3;
        int $i0, i1;
        java.lang.Object $r4;
        boolean $z0;

        r0 := @this: org.apache.xalan.templates.StylesheetRoot;

        r7 := @parameter0: org.apache.xml.utils.QName;

        $r1 = r0.<org.apache.xalan.templates.StylesheetRoot: java.util.Vector m_variables>;

        if null == $r1 goto label4;

        $r2 = r0.<org.apache.xalan.templates.StylesheetRoot: java.util.Vector m_variables>;

        $i0 = virtualinvoke $r2.<java.util.Vector: int size()>();

        i1 = 0;

        goto label3;

     label1:
        $r3 = r0.<org.apache.xalan.templates.StylesheetRoot: java.util.Vector m_variables>;

        $r4 = virtualinvoke $r3.<java.util.Vector: java.lang.Object elementAt(int)>(i1);

        r5 = (org.apache.xalan.templates.ElemVariable) $r4;

        $r6 = virtualinvoke r5.<org.apache.xalan.templates.ElemVariable: org.apache.xml.utils.QName getName()>();

        $z0 = virtualinvoke $r6.<org.apache.xml.utils.QName: boolean equals(java.lang.Object)>(r7);

        if $z0 == 0 goto label2;

        return r5;

     label2:
        i1 = i1 + 1;

     label3:
        if i1 < $i0 goto label1;

     label4:
        return null;
    }

    public java.util.Vector getVariablesAndParamsComposed()
    {
        org.apache.xalan.templates.StylesheetRoot r0;
        java.util.Vector $r1;

        r0 := @this: org.apache.xalan.templates.StylesheetRoot;

        $r1 = r0.<org.apache.xalan.templates.StylesheetRoot: java.util.Vector m_variables>;

        return $r1;
    }

    void recomposeWhiteSpaceInfo(org.apache.xalan.templates.WhiteSpaceInfo)
    {
        org.apache.xalan.templates.StylesheetRoot r0;
        org.apache.xalan.templates.TemplateList $r1, $r3, $r4;
        org.apache.xalan.templates.WhiteSpaceInfo r2;

        r0 := @this: org.apache.xalan.templates.StylesheetRoot;

        r2 := @parameter0: org.apache.xalan.templates.WhiteSpaceInfo;

        $r1 = r0.<org.apache.xalan.templates.StylesheetRoot: org.apache.xalan.templates.TemplateList m_whiteSpaceInfoList>;

        if null != $r1 goto label1;

        $r4 = new org.apache.xalan.templates.TemplateList;

        specialinvoke $r4.<org.apache.xalan.templates.TemplateList: void <init>()>();

        r0.<org.apache.xalan.templates.StylesheetRoot: org.apache.xalan.templates.TemplateList m_whiteSpaceInfoList> = $r4;

     label1:
        $r3 = r0.<org.apache.xalan.templates.StylesheetRoot: org.apache.xalan.templates.TemplateList m_whiteSpaceInfoList>;

        virtualinvoke $r3.<org.apache.xalan.templates.TemplateList: void setTemplate(org.apache.xalan.templates.ElemTemplate)>(r2);

        return;
    }

    public boolean shouldCheckWhitespace()
    {
        org.apache.xalan.templates.StylesheetRoot r0;
        org.apache.xalan.templates.TemplateList $r1;
        boolean $z0;

        r0 := @this: org.apache.xalan.templates.StylesheetRoot;

        $r1 = r0.<org.apache.xalan.templates.StylesheetRoot: org.apache.xalan.templates.TemplateList m_whiteSpaceInfoList>;

        if null == $r1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public org.apache.xalan.templates.WhiteSpaceInfo getWhiteSpaceInfo(org.apache.xpath.XPathContext, int, org.apache.xml.dtm.DTM) throws javax.xml.transform.TransformerException
    {
        org.apache.xalan.templates.StylesheetRoot r0;
        org.apache.xalan.templates.TemplateList $r1, $r4;
        org.apache.xalan.templates.ElemTemplate $r5;
        org.apache.xpath.XPathContext r2;
        int i0;
        org.apache.xml.dtm.DTM r3;
        org.apache.xalan.templates.WhiteSpaceInfo $r6;

        r0 := @this: org.apache.xalan.templates.StylesheetRoot;

        r2 := @parameter0: org.apache.xpath.XPathContext;

        i0 := @parameter1: int;

        r3 := @parameter2: org.apache.xml.dtm.DTM;

        $r1 = r0.<org.apache.xalan.templates.StylesheetRoot: org.apache.xalan.templates.TemplateList m_whiteSpaceInfoList>;

        if null == $r1 goto label1;

        $r4 = r0.<org.apache.xalan.templates.StylesheetRoot: org.apache.xalan.templates.TemplateList m_whiteSpaceInfoList>;

        $r5 = virtualinvoke $r4.<org.apache.xalan.templates.TemplateList: org.apache.xalan.templates.ElemTemplate getTemplate(org.apache.xpath.XPathContext,int,org.apache.xml.utils.QName,boolean,org.apache.xml.dtm.DTM)>(r2, i0, null, 0, r3);

        $r6 = (org.apache.xalan.templates.WhiteSpaceInfo) $r5;

        return $r6;

     label1:
        return null;
    }

    public boolean shouldStripWhiteSpace(org.apache.xpath.XPathContext, int) throws javax.xml.transform.TransformerException
    {
        org.apache.xalan.templates.StylesheetRoot r0;
        org.apache.xalan.templates.TemplateList $r1, $r4;
        short $s1;
        org.apache.xalan.templates.ElemTemplate $r5;
        org.apache.xpath.XPathContext r2;
        org.apache.xml.dtm.DTM $r3;
        int $i0, i2, $i4, $i6, $i8;
        org.apache.xalan.templates.WhiteSpaceInfo r6;
        boolean $z0;

        r0 := @this: org.apache.xalan.templates.StylesheetRoot;

        r2 := @parameter0: org.apache.xpath.XPathContext;

        i2 := @parameter1: int;

        $r1 = r0.<org.apache.xalan.templates.StylesheetRoot: org.apache.xalan.templates.TemplateList m_whiteSpaceInfoList>;

        if null == $r1 goto label5;

        goto label4;

     label1:
        $r3 = virtualinvoke r2.<org.apache.xpath.XPathContext: org.apache.xml.dtm.DTM getDTM(int)>(i2);

        $r4 = r0.<org.apache.xalan.templates.StylesheetRoot: org.apache.xalan.templates.TemplateList m_whiteSpaceInfoList>;

        $r5 = virtualinvoke $r4.<org.apache.xalan.templates.TemplateList: org.apache.xalan.templates.ElemTemplate getTemplate(org.apache.xpath.XPathContext,int,org.apache.xml.utils.QName,boolean,org.apache.xml.dtm.DTM)>(r2, i2, null, 0, $r3);

        r6 = (org.apache.xalan.templates.WhiteSpaceInfo) $r5;

        if null == r6 goto label2;

        $z0 = virtualinvoke r6.<org.apache.xalan.templates.WhiteSpaceInfo: boolean getShouldStripSpace()>();

        return $z0;

     label2:
        $i0 = interfaceinvoke $r3.<org.apache.xml.dtm.DTM: int getParent(int)>(i2);

        $i4 = (int) -1;

        if $i4 == $i0 goto label3;

        $s1 = interfaceinvoke $r3.<org.apache.xml.dtm.DTM: short getNodeType(int)>($i0);

        if 1 != $s1 goto label3;

        i2 = $i0;

        goto label4;

     label3:
        $i6 = (int) -1;

        i2 = $i6;

     label4:
        $i8 = (int) -1;

        if $i8 != i2 goto label1;

     label5:
        return 0;
    }

    public boolean canStripWhiteSpace()
    {
        org.apache.xalan.templates.StylesheetRoot r0;
        org.apache.xalan.templates.TemplateList $r1;
        boolean $z0;

        r0 := @this: org.apache.xalan.templates.StylesheetRoot;

        $r1 = r0.<org.apache.xalan.templates.StylesheetRoot: org.apache.xalan.templates.TemplateList m_whiteSpaceInfoList>;

        if null == $r1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public final org.apache.xalan.templates.ElemTemplate getDefaultTextRule()
    {
        org.apache.xalan.templates.StylesheetRoot r0;
        org.apache.xalan.templates.ElemTemplate $r1;

        r0 := @this: org.apache.xalan.templates.StylesheetRoot;

        $r1 = r0.<org.apache.xalan.templates.StylesheetRoot: org.apache.xalan.templates.ElemTemplate m_defaultTextRule>;

        return $r1;
    }

    public final org.apache.xalan.templates.ElemTemplate getDefaultRule()
    {
        org.apache.xalan.templates.StylesheetRoot r0;
        org.apache.xalan.templates.ElemTemplate $r1;

        r0 := @this: org.apache.xalan.templates.StylesheetRoot;

        $r1 = r0.<org.apache.xalan.templates.StylesheetRoot: org.apache.xalan.templates.ElemTemplate m_defaultRule>;

        return $r1;
    }

    public final org.apache.xalan.templates.ElemTemplate getDefaultRootRule()
    {
        org.apache.xalan.templates.StylesheetRoot r0;
        org.apache.xalan.templates.ElemTemplate $r1;

        r0 := @this: org.apache.xalan.templates.StylesheetRoot;

        $r1 = r0.<org.apache.xalan.templates.StylesheetRoot: org.apache.xalan.templates.ElemTemplate m_defaultRootRule>;

        return $r1;
    }

    public final org.apache.xalan.templates.ElemTemplate getStartRule()
    {
        org.apache.xalan.templates.StylesheetRoot r0;
        org.apache.xalan.templates.ElemTemplate $r1;

        r0 := @this: org.apache.xalan.templates.StylesheetRoot;

        $r1 = r0.<org.apache.xalan.templates.StylesheetRoot: org.apache.xalan.templates.ElemTemplate m_startRule>;

        return $r1;
    }

    private void initDefaultRule(javax.xml.transform.ErrorListener) throws javax.xml.transform.TransformerException
    {
        javax.xml.transform.ErrorListener r4;
        org.apache.xalan.templates.ElemApplyTemplates $r6, $r21;
        org.apache.xalan.templates.ElemTemplate $r1, $r2, $r5, $r8, $r9, $r10, $r11, $r13, $r15, $r17, $r18, $r20, $r22;
        org.apache.xpath.XPath $r3, $r7, $r12, $r16, $r19, $r23;
        org.apache.xalan.templates.ElemValueOf $r14;
        org.apache.xalan.templates.StylesheetRoot r0;

        r0 := @this: org.apache.xalan.templates.StylesheetRoot;

        r4 := @parameter0: javax.xml.transform.ErrorListener;

        $r1 = new org.apache.xalan.templates.ElemTemplate;

        specialinvoke $r1.<org.apache.xalan.templates.ElemTemplate: void <init>()>();

        r0.<org.apache.xalan.templates.StylesheetRoot: org.apache.xalan.templates.ElemTemplate m_defaultRule> = $r1;

        $r2 = r0.<org.apache.xalan.templates.StylesheetRoot: org.apache.xalan.templates.ElemTemplate m_defaultRule>;

        virtualinvoke $r2.<org.apache.xalan.templates.ElemTemplate: void setStylesheet(org.apache.xalan.templates.Stylesheet)>(r0);

        $r3 = new org.apache.xpath.XPath;

        specialinvoke $r3.<org.apache.xpath.XPath: void <init>(java.lang.String,javax.xml.transform.SourceLocator,org.apache.xml.utils.PrefixResolver,int,javax.xml.transform.ErrorListener)>("*", r0, r0, 1, r4);

        $r5 = r0.<org.apache.xalan.templates.StylesheetRoot: org.apache.xalan.templates.ElemTemplate m_defaultRule>;

        virtualinvoke $r5.<org.apache.xalan.templates.ElemTemplate: void setMatch(org.apache.xpath.XPath)>($r3);

        $r6 = new org.apache.xalan.templates.ElemApplyTemplates;

        specialinvoke $r6.<org.apache.xalan.templates.ElemApplyTemplates: void <init>()>();

        virtualinvoke $r6.<org.apache.xalan.templates.ElemApplyTemplates: void setIsDefaultTemplate(boolean)>(1);

        $r7 = r0.<org.apache.xalan.templates.StylesheetRoot: org.apache.xpath.XPath m_selectDefault>;

        virtualinvoke $r6.<org.apache.xalan.templates.ElemForEach: void setSelect(org.apache.xpath.XPath)>($r7);

        $r8 = r0.<org.apache.xalan.templates.StylesheetRoot: org.apache.xalan.templates.ElemTemplate m_defaultRule>;

        virtualinvoke $r8.<org.apache.xalan.templates.ElemTemplateElement: org.apache.xalan.templates.ElemTemplateElement appendChild(org.apache.xalan.templates.ElemTemplateElement)>($r6);

        $r9 = r0.<org.apache.xalan.templates.StylesheetRoot: org.apache.xalan.templates.ElemTemplate m_defaultRule>;

        r0.<org.apache.xalan.templates.StylesheetRoot: org.apache.xalan.templates.ElemTemplate m_startRule> = $r9;

        $r10 = new org.apache.xalan.templates.ElemTemplate;

        specialinvoke $r10.<org.apache.xalan.templates.ElemTemplate: void <init>()>();

        r0.<org.apache.xalan.templates.StylesheetRoot: org.apache.xalan.templates.ElemTemplate m_defaultTextRule> = $r10;

        $r11 = r0.<org.apache.xalan.templates.StylesheetRoot: org.apache.xalan.templates.ElemTemplate m_defaultTextRule>;

        virtualinvoke $r11.<org.apache.xalan.templates.ElemTemplate: void setStylesheet(org.apache.xalan.templates.Stylesheet)>(r0);

        $r12 = new org.apache.xpath.XPath;

        specialinvoke $r12.<org.apache.xpath.XPath: void <init>(java.lang.String,javax.xml.transform.SourceLocator,org.apache.xml.utils.PrefixResolver,int,javax.xml.transform.ErrorListener)>("text() | @*", r0, r0, 1, r4);

        $r13 = r0.<org.apache.xalan.templates.StylesheetRoot: org.apache.xalan.templates.ElemTemplate m_defaultTextRule>;

        virtualinvoke $r13.<org.apache.xalan.templates.ElemTemplate: void setMatch(org.apache.xpath.XPath)>($r12);

        $r14 = new org.apache.xalan.templates.ElemValueOf;

        specialinvoke $r14.<org.apache.xalan.templates.ElemValueOf: void <init>()>();

        $r15 = r0.<org.apache.xalan.templates.StylesheetRoot: org.apache.xalan.templates.ElemTemplate m_defaultTextRule>;

        virtualinvoke $r15.<org.apache.xalan.templates.ElemTemplateElement: org.apache.xalan.templates.ElemTemplateElement appendChild(org.apache.xalan.templates.ElemTemplateElement)>($r14);

        $r16 = new org.apache.xpath.XPath;

        specialinvoke $r16.<org.apache.xpath.XPath: void <init>(java.lang.String,javax.xml.transform.SourceLocator,org.apache.xml.utils.PrefixResolver,int,javax.xml.transform.ErrorListener)>(".", r0, r0, 0, r4);

        virtualinvoke $r14.<org.apache.xalan.templates.ElemValueOf: void setSelect(org.apache.xpath.XPath)>($r16);

        $r17 = new org.apache.xalan.templates.ElemTemplate;

        specialinvoke $r17.<org.apache.xalan.templates.ElemTemplate: void <init>()>();

        r0.<org.apache.xalan.templates.StylesheetRoot: org.apache.xalan.templates.ElemTemplate m_defaultRootRule> = $r17;

        $r18 = r0.<org.apache.xalan.templates.StylesheetRoot: org.apache.xalan.templates.ElemTemplate m_defaultRootRule>;

        virtualinvoke $r18.<org.apache.xalan.templates.ElemTemplate: void setStylesheet(org.apache.xalan.templates.Stylesheet)>(r0);

        $r19 = new org.apache.xpath.XPath;

        specialinvoke $r19.<org.apache.xpath.XPath: void <init>(java.lang.String,javax.xml.transform.SourceLocator,org.apache.xml.utils.PrefixResolver,int,javax.xml.transform.ErrorListener)>("/", r0, r0, 1, r4);

        $r20 = r0.<org.apache.xalan.templates.StylesheetRoot: org.apache.xalan.templates.ElemTemplate m_defaultRootRule>;

        virtualinvoke $r20.<org.apache.xalan.templates.ElemTemplate: void setMatch(org.apache.xpath.XPath)>($r19);

        $r21 = new org.apache.xalan.templates.ElemApplyTemplates;

        specialinvoke $r21.<org.apache.xalan.templates.ElemApplyTemplates: void <init>()>();

        virtualinvoke $r21.<org.apache.xalan.templates.ElemApplyTemplates: void setIsDefaultTemplate(boolean)>(1);

        $r22 = r0.<org.apache.xalan.templates.StylesheetRoot: org.apache.xalan.templates.ElemTemplate m_defaultRootRule>;

        virtualinvoke $r22.<org.apache.xalan.templates.ElemTemplateElement: org.apache.xalan.templates.ElemTemplateElement appendChild(org.apache.xalan.templates.ElemTemplateElement)>($r21);

        $r23 = r0.<org.apache.xalan.templates.StylesheetRoot: org.apache.xpath.XPath m_selectDefault>;

        virtualinvoke $r21.<org.apache.xalan.templates.ElemForEach: void setSelect(org.apache.xpath.XPath)>($r23);

        return;
    }

    private void QuickSort2(java.util.Vector, int, int)
    {
        java.util.Vector r0;
        int i0, i1, $i2, $i3, $i4, $i5, i6, i7, $i9, $i11;
        org.apache.xalan.templates.ElemTemplateElement r2, r4, $r7, $r9;
        org.apache.xalan.templates.StylesheetRoot r10;
        java.lang.Object $r1, $r3, $r5, $r6, $r8;

        r10 := @this: org.apache.xalan.templates.StylesheetRoot;

        r0 := @parameter0: java.util.Vector;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i6 = i0;

        i7 = i1;

        if i1 <= i0 goto label8;

        $i2 = i0 + i1;

        $i3 = $i2 / 2;

        $r1 = virtualinvoke r0.<java.util.Vector: java.lang.Object elementAt(int)>($i3);

        r2 = (org.apache.xalan.templates.ElemTemplateElement) $r1;

        goto label6;

     label1:
        i6 = i6 + 1;

     label2:
        if i6 >= i1 goto label4;

        $r8 = virtualinvoke r0.<java.util.Vector: java.lang.Object elementAt(int)>(i6);

        $r9 = (org.apache.xalan.templates.ElemTemplateElement) $r8;

        $i5 = virtualinvoke $r9.<org.apache.xalan.templates.ElemTemplateElement: int compareTo(java.lang.Object)>(r2);

        if $i5 < 0 goto label1;

        goto label4;

     label3:
        $i9 = (int) -1;

        i7 = i7 + $i9;

     label4:
        if i7 <= i0 goto label5;

        $r6 = virtualinvoke r0.<java.util.Vector: java.lang.Object elementAt(int)>(i7);

        $r7 = (org.apache.xalan.templates.ElemTemplateElement) $r6;

        $i4 = virtualinvoke $r7.<org.apache.xalan.templates.ElemTemplateElement: int compareTo(java.lang.Object)>(r2);

        if $i4 > 0 goto label3;

     label5:
        if i6 > i7 goto label6;

        $r3 = virtualinvoke r0.<java.util.Vector: java.lang.Object elementAt(int)>(i6);

        r4 = (org.apache.xalan.templates.ElemTemplateElement) $r3;

        $r5 = virtualinvoke r0.<java.util.Vector: java.lang.Object elementAt(int)>(i7);

        virtualinvoke r0.<java.util.Vector: void setElementAt(java.lang.Object,int)>($r5, i6);

        virtualinvoke r0.<java.util.Vector: void setElementAt(java.lang.Object,int)>(r4, i7);

        i6 = i6 + 1;

        $i11 = (int) -1;

        i7 = i7 + $i11;

     label6:
        if i6 <= i7 goto label2;

        if i0 >= i7 goto label7;

        specialinvoke r10.<org.apache.xalan.templates.StylesheetRoot: void QuickSort2(java.util.Vector,int,int)>(r0, i0, i7);

     label7:
        if i6 >= i1 goto label8;

        specialinvoke r10.<org.apache.xalan.templates.StylesheetRoot: void QuickSort2(java.util.Vector,int,int)>(r0, i6, i1);

     label8:
        return;
    }

    void initComposeState()
    {
        org.apache.xalan.templates.StylesheetRoot r0;
        org.apache.xalan.templates.StylesheetRoot$ComposeState $r1;

        r0 := @this: org.apache.xalan.templates.StylesheetRoot;

        $r1 = new org.apache.xalan.templates.StylesheetRoot$ComposeState;

        specialinvoke $r1.<org.apache.xalan.templates.StylesheetRoot$ComposeState: void <init>(org.apache.xalan.templates.StylesheetRoot)>(r0);

        r0.<org.apache.xalan.templates.StylesheetRoot: org.apache.xalan.templates.StylesheetRoot$ComposeState m_composeState> = $r1;

        return;
    }

    org.apache.xalan.templates.StylesheetRoot$ComposeState getComposeState()
    {
        org.apache.xalan.templates.StylesheetRoot r0;
        org.apache.xalan.templates.StylesheetRoot$ComposeState $r1;

        r0 := @this: org.apache.xalan.templates.StylesheetRoot;

        $r1 = r0.<org.apache.xalan.templates.StylesheetRoot: org.apache.xalan.templates.StylesheetRoot$ComposeState m_composeState>;

        return $r1;
    }

    private void clearComposeState()
    {
        org.apache.xalan.templates.StylesheetRoot r0;

        r0 := @this: org.apache.xalan.templates.StylesheetRoot;

        r0.<org.apache.xalan.templates.StylesheetRoot: org.apache.xalan.templates.StylesheetRoot$ComposeState m_composeState> = null;

        return;
    }

    static java.util.Vector access$000(org.apache.xalan.templates.StylesheetRoot)
    {
        org.apache.xalan.templates.StylesheetRoot r0;
        java.util.Vector $r1;

        r0 := @parameter0: org.apache.xalan.templates.StylesheetRoot;

        $r1 = r0.<org.apache.xalan.templates.StylesheetRoot: java.util.Vector m_variables>;

        return $r1;
    }
}
