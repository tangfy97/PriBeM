public class org.waveprotocol.wave.model.operation.wave.Transform extends java.lang.Object
{

    public void <init>()
    {
        org.waveprotocol.wave.model.operation.wave.Transform r0;

        r0 := @this: org.waveprotocol.wave.model.operation.wave.Transform;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static org.waveprotocol.wave.model.operation.OperationPair transform(org.waveprotocol.wave.model.operation.wave.WaveletOperation, org.waveprotocol.wave.model.operation.wave.WaveletOperation) throws org.waveprotocol.wave.model.operation.TransformException
    {
        org.waveprotocol.wave.model.operation.wave.RemoveParticipant $r0, r31, r32;
        org.waveprotocol.wave.model.wave.ParticipantId $r1, $r2, $r8, $r9;
        org.waveprotocol.wave.model.operation.wave.BlipOperation $r16, $r17, $r22, $r26;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10;
        org.waveprotocol.wave.model.operation.wave.WaveletOperationContext $r4, $r6, $r11, $r13;
        org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation $r19, $r23, r29, r30;
        org.waveprotocol.wave.model.operation.wave.NoOp $r3, $r5, $r10, $r12;
        org.waveprotocol.wave.model.operation.wave.AddParticipant $r7, r33, r34;
        org.waveprotocol.wave.model.operation.wave.WaveletOperation r27, r28;
        java.lang.String $r14, $r15, $r20, $r24;
        org.waveprotocol.wave.model.operation.OperationPair $r18, $r35;
        java.lang.Object $r21, $r25;

        r27 := @parameter0: org.waveprotocol.wave.model.operation.wave.WaveletOperation;

        r28 := @parameter1: org.waveprotocol.wave.model.operation.wave.WaveletOperation;

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r27, "Null client operation");

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r28, "Null server operation");

        $z0 = r27 instanceof org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation;

        if $z0 == 0 goto label2;

        $z9 = r28 instanceof org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation;

        if $z9 == 0 goto label2;

        r29 = (org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation) r27;

        r30 = (org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation) r28;

        $r14 = virtualinvoke r29.<org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation: java.lang.String getBlipId()>();

        $r15 = virtualinvoke r30.<org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation: java.lang.String getBlipId()>();

        $z10 = virtualinvoke $r14.<java.lang.String: boolean equals(java.lang.Object)>($r15);

        if $z10 == 0 goto label1;

        $r16 = virtualinvoke r29.<org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation: org.waveprotocol.wave.model.operation.wave.BlipOperation getBlipOp()>();

        $r17 = virtualinvoke r30.<org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation: org.waveprotocol.wave.model.operation.wave.BlipOperation getBlipOp()>();

        $r18 = staticinvoke <org.waveprotocol.wave.model.operation.wave.Transform: org.waveprotocol.wave.model.operation.OperationPair transform(org.waveprotocol.wave.model.operation.wave.BlipOperation,org.waveprotocol.wave.model.operation.wave.BlipOperation)>($r16, $r17);

        $r19 = new org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation;

        $r20 = virtualinvoke r29.<org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation: java.lang.String getBlipId()>();

        $r21 = virtualinvoke $r18.<org.waveprotocol.wave.model.operation.OperationPair: java.lang.Object clientOp()>();

        $r22 = (org.waveprotocol.wave.model.operation.wave.BlipOperation) $r21;

        specialinvoke $r19.<org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation: void <init>(java.lang.String,org.waveprotocol.wave.model.operation.wave.BlipOperation)>($r20, $r22);

        r27 = $r19;

        $r23 = new org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation;

        $r24 = virtualinvoke r30.<org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation: java.lang.String getBlipId()>();

        $r25 = virtualinvoke $r18.<org.waveprotocol.wave.model.operation.OperationPair: java.lang.Object serverOp()>();

        $r26 = (org.waveprotocol.wave.model.operation.wave.BlipOperation) $r25;

        specialinvoke $r23.<org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation: void <init>(java.lang.String,org.waveprotocol.wave.model.operation.wave.BlipOperation)>($r24, $r26);

        r28 = $r23;

     label1:
        goto label9;

     label2:
        $z1 = r28 instanceof org.waveprotocol.wave.model.operation.wave.RemoveParticipant;

        if $z1 == 0 goto label6;

        r31 = (org.waveprotocol.wave.model.operation.wave.RemoveParticipant) r28;

        staticinvoke <org.waveprotocol.wave.model.operation.wave.Transform: void checkParticipantRemoval(org.waveprotocol.wave.model.operation.wave.RemoveParticipant,org.waveprotocol.wave.model.operation.wave.WaveletOperation)>(r31, r27);

        $z6 = r27 instanceof org.waveprotocol.wave.model.operation.wave.RemoveParticipant;

        if $z6 == 0 goto label4;

        r32 = (org.waveprotocol.wave.model.operation.wave.RemoveParticipant) r27;

        $r8 = virtualinvoke r32.<org.waveprotocol.wave.model.operation.wave.RemoveParticipant: org.waveprotocol.wave.model.wave.ParticipantId getParticipantId()>();

        $r9 = virtualinvoke r31.<org.waveprotocol.wave.model.operation.wave.RemoveParticipant: org.waveprotocol.wave.model.wave.ParticipantId getParticipantId()>();

        $z8 = virtualinvoke $r8.<org.waveprotocol.wave.model.wave.ParticipantId: boolean equals(java.lang.Object)>($r9);

        if $z8 == 0 goto label3;

        $r10 = new org.waveprotocol.wave.model.operation.wave.NoOp;

        $r11 = virtualinvoke r32.<org.waveprotocol.wave.model.operation.wave.RemoveParticipant: org.waveprotocol.wave.model.operation.wave.WaveletOperationContext getContext()>();

        specialinvoke $r10.<org.waveprotocol.wave.model.operation.wave.NoOp: void <init>(org.waveprotocol.wave.model.operation.wave.WaveletOperationContext)>($r11);

        r27 = $r10;

        $r12 = new org.waveprotocol.wave.model.operation.wave.NoOp;

        $r13 = virtualinvoke r31.<org.waveprotocol.wave.model.operation.wave.RemoveParticipant: org.waveprotocol.wave.model.operation.wave.WaveletOperationContext getContext()>();

        specialinvoke $r12.<org.waveprotocol.wave.model.operation.wave.NoOp: void <init>(org.waveprotocol.wave.model.operation.wave.WaveletOperationContext)>($r13);

        r28 = $r12;

     label3:
        goto label5;

     label4:
        $z7 = r27 instanceof org.waveprotocol.wave.model.operation.wave.AddParticipant;

        if $z7 == 0 goto label5;

        $r7 = (org.waveprotocol.wave.model.operation.wave.AddParticipant) r27;

        staticinvoke <org.waveprotocol.wave.model.operation.wave.Transform: void checkParticipantRemovalAndAddition(org.waveprotocol.wave.model.operation.wave.RemoveParticipant,org.waveprotocol.wave.model.operation.wave.AddParticipant)>(r31, $r7);

     label5:
        goto label9;

     label6:
        $z2 = r28 instanceof org.waveprotocol.wave.model.operation.wave.AddParticipant;

        if $z2 == 0 goto label9;

        r33 = (org.waveprotocol.wave.model.operation.wave.AddParticipant) r28;

        $z3 = r27 instanceof org.waveprotocol.wave.model.operation.wave.AddParticipant;

        if $z3 == 0 goto label8;

        r34 = (org.waveprotocol.wave.model.operation.wave.AddParticipant) r27;

        $r1 = virtualinvoke r34.<org.waveprotocol.wave.model.operation.wave.AddParticipant: org.waveprotocol.wave.model.wave.ParticipantId getParticipantId()>();

        $r2 = virtualinvoke r33.<org.waveprotocol.wave.model.operation.wave.AddParticipant: org.waveprotocol.wave.model.wave.ParticipantId getParticipantId()>();

        $z5 = virtualinvoke $r1.<org.waveprotocol.wave.model.wave.ParticipantId: boolean equals(java.lang.Object)>($r2);

        if $z5 == 0 goto label7;

        $r3 = new org.waveprotocol.wave.model.operation.wave.NoOp;

        $r4 = virtualinvoke r34.<org.waveprotocol.wave.model.operation.wave.AddParticipant: org.waveprotocol.wave.model.operation.wave.WaveletOperationContext getContext()>();

        specialinvoke $r3.<org.waveprotocol.wave.model.operation.wave.NoOp: void <init>(org.waveprotocol.wave.model.operation.wave.WaveletOperationContext)>($r4);

        r27 = $r3;

        $r5 = new org.waveprotocol.wave.model.operation.wave.NoOp;

        $r6 = virtualinvoke r33.<org.waveprotocol.wave.model.operation.wave.AddParticipant: org.waveprotocol.wave.model.operation.wave.WaveletOperationContext getContext()>();

        specialinvoke $r5.<org.waveprotocol.wave.model.operation.wave.NoOp: void <init>(org.waveprotocol.wave.model.operation.wave.WaveletOperationContext)>($r6);

        r28 = $r5;

     label7:
        goto label9;

     label8:
        $z4 = r27 instanceof org.waveprotocol.wave.model.operation.wave.RemoveParticipant;

        if $z4 == 0 goto label9;

        $r0 = (org.waveprotocol.wave.model.operation.wave.RemoveParticipant) r27;

        staticinvoke <org.waveprotocol.wave.model.operation.wave.Transform: void checkParticipantRemovalAndAddition(org.waveprotocol.wave.model.operation.wave.RemoveParticipant,org.waveprotocol.wave.model.operation.wave.AddParticipant)>($r0, r33);

     label9:
        $r35 = new org.waveprotocol.wave.model.operation.OperationPair;

        specialinvoke $r35.<org.waveprotocol.wave.model.operation.OperationPair: void <init>(java.lang.Object,java.lang.Object)>(r27, r28);

        return $r35;
    }

    public static org.waveprotocol.wave.model.operation.OperationPair transform(org.waveprotocol.wave.model.operation.wave.BlipOperation, org.waveprotocol.wave.model.operation.wave.BlipOperation) throws org.waveprotocol.wave.model.operation.TransformException
    {
        org.waveprotocol.wave.model.document.operation.DocOp $r2, $r3, $r8, $r12;
        org.waveprotocol.wave.model.operation.wave.BlipOperation r13, r14;
        boolean $z0, $z1;
        org.waveprotocol.wave.model.operation.wave.WaveletOperationContext $r6, $r10;
        org.waveprotocol.wave.model.operation.OperationPair $r4, $r15;
        org.waveprotocol.wave.model.operation.wave.BlipContentOperation r0, r1, $r5, $r9;
        java.lang.Object $r7, $r11;

        r13 := @parameter0: org.waveprotocol.wave.model.operation.wave.BlipOperation;

        r14 := @parameter1: org.waveprotocol.wave.model.operation.wave.BlipOperation;

        $z0 = r13 instanceof org.waveprotocol.wave.model.operation.wave.BlipContentOperation;

        if $z0 == 0 goto label1;

        $z1 = r14 instanceof org.waveprotocol.wave.model.operation.wave.BlipContentOperation;

        if $z1 == 0 goto label1;

        r0 = (org.waveprotocol.wave.model.operation.wave.BlipContentOperation) r13;

        r1 = (org.waveprotocol.wave.model.operation.wave.BlipContentOperation) r14;

        $r2 = virtualinvoke r0.<org.waveprotocol.wave.model.operation.wave.BlipContentOperation: org.waveprotocol.wave.model.document.operation.DocOp getContentOp()>();

        $r3 = virtualinvoke r1.<org.waveprotocol.wave.model.operation.wave.BlipContentOperation: org.waveprotocol.wave.model.document.operation.DocOp getContentOp()>();

        $r4 = staticinvoke <org.waveprotocol.wave.model.document.operation.algorithm.Transformer: org.waveprotocol.wave.model.operation.OperationPair transform(org.waveprotocol.wave.model.document.operation.DocOp,org.waveprotocol.wave.model.document.operation.DocOp)>($r2, $r3);

        $r5 = new org.waveprotocol.wave.model.operation.wave.BlipContentOperation;

        $r6 = virtualinvoke r0.<org.waveprotocol.wave.model.operation.wave.BlipContentOperation: org.waveprotocol.wave.model.operation.wave.WaveletOperationContext getContext()>();

        $r7 = virtualinvoke $r4.<org.waveprotocol.wave.model.operation.OperationPair: java.lang.Object clientOp()>();

        $r8 = (org.waveprotocol.wave.model.document.operation.DocOp) $r7;

        specialinvoke $r5.<org.waveprotocol.wave.model.operation.wave.BlipContentOperation: void <init>(org.waveprotocol.wave.model.operation.wave.WaveletOperationContext,org.waveprotocol.wave.model.document.operation.DocOp)>($r6, $r8);

        r13 = $r5;

        $r9 = new org.waveprotocol.wave.model.operation.wave.BlipContentOperation;

        $r10 = virtualinvoke r1.<org.waveprotocol.wave.model.operation.wave.BlipContentOperation: org.waveprotocol.wave.model.operation.wave.WaveletOperationContext getContext()>();

        $r11 = virtualinvoke $r4.<org.waveprotocol.wave.model.operation.OperationPair: java.lang.Object serverOp()>();

        $r12 = (org.waveprotocol.wave.model.document.operation.DocOp) $r11;

        specialinvoke $r9.<org.waveprotocol.wave.model.operation.wave.BlipContentOperation: void <init>(org.waveprotocol.wave.model.operation.wave.WaveletOperationContext,org.waveprotocol.wave.model.document.operation.DocOp)>($r10, $r12);

        r14 = $r9;

     label1:
        $r15 = new org.waveprotocol.wave.model.operation.OperationPair;

        specialinvoke $r15.<org.waveprotocol.wave.model.operation.OperationPair: void <init>(java.lang.Object,java.lang.Object)>(r13, r14);

        return $r15;
    }

    private static void checkParticipantRemoval(org.waveprotocol.wave.model.operation.wave.RemoveParticipant, org.waveprotocol.wave.model.operation.wave.WaveletOperation) throws org.waveprotocol.wave.model.operation.RemovedAuthorException
    {
        org.waveprotocol.wave.model.operation.wave.RemoveParticipant r0;
        org.waveprotocol.wave.model.operation.wave.WaveletOperation r2;
        org.waveprotocol.wave.model.wave.ParticipantId $r1, $r4;
        org.waveprotocol.wave.model.operation.wave.WaveletOperationContext $r3;
        org.waveprotocol.wave.model.operation.RemovedAuthorException $r5;
        java.lang.String $r6;
        boolean $z0;

        r0 := @parameter0: org.waveprotocol.wave.model.operation.wave.RemoveParticipant;

        r2 := @parameter1: org.waveprotocol.wave.model.operation.wave.WaveletOperation;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.operation.wave.RemoveParticipant: org.waveprotocol.wave.model.wave.ParticipantId getParticipantId()>();

        $r3 = virtualinvoke r2.<org.waveprotocol.wave.model.operation.wave.WaveletOperation: org.waveprotocol.wave.model.operation.wave.WaveletOperationContext getContext()>();

        $r4 = virtualinvoke $r3.<org.waveprotocol.wave.model.operation.wave.WaveletOperationContext: org.waveprotocol.wave.model.wave.ParticipantId getCreator()>();

        $z0 = virtualinvoke $r1.<org.waveprotocol.wave.model.wave.ParticipantId: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label1;

        $r5 = new org.waveprotocol.wave.model.operation.RemovedAuthorException;

        $r6 = virtualinvoke $r1.<org.waveprotocol.wave.model.wave.ParticipantId: java.lang.String getAddress()>();

        specialinvoke $r5.<org.waveprotocol.wave.model.operation.RemovedAuthorException: void <init>(java.lang.String)>($r6);

        throw $r5;

     label1:
        return;
    }

    private static void checkParticipantRemovalAndAddition(org.waveprotocol.wave.model.operation.wave.RemoveParticipant, org.waveprotocol.wave.model.operation.wave.AddParticipant) throws org.waveprotocol.wave.model.operation.TransformException
    {
        org.waveprotocol.wave.model.operation.wave.RemoveParticipant r0;
        org.waveprotocol.wave.model.operation.TransformException $r4;
        org.waveprotocol.wave.model.wave.ParticipantId $r1, $r3;
        java.lang.StringBuilder $r5, $r6, $r8;
        java.lang.String $r7, $r9;
        org.waveprotocol.wave.model.operation.wave.AddParticipant r2;
        boolean $z0;

        r0 := @parameter0: org.waveprotocol.wave.model.operation.wave.RemoveParticipant;

        r2 := @parameter1: org.waveprotocol.wave.model.operation.wave.AddParticipant;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.operation.wave.RemoveParticipant: org.waveprotocol.wave.model.wave.ParticipantId getParticipantId()>();

        $r3 = virtualinvoke r2.<org.waveprotocol.wave.model.operation.wave.AddParticipant: org.waveprotocol.wave.model.wave.ParticipantId getParticipantId()>();

        $z0 = virtualinvoke $r1.<org.waveprotocol.wave.model.wave.ParticipantId: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label1;

        $r4 = new org.waveprotocol.wave.model.operation.TransformException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Transform error involving participant: ");

        $r7 = virtualinvoke $r1.<org.waveprotocol.wave.model.wave.ParticipantId: java.lang.String getAddress()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<org.waveprotocol.wave.model.operation.TransformException: void <init>(java.lang.String)>($r9);

        throw $r4;

     label1:
        return;
    }
}
