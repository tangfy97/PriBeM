class org.mozilla.javascript.optimizer.DataFlowBitSet extends java.lang.Object
{
    private int[] itsBits;
    private int itsSize;

    void <init>(int)
    {
        int[] $r1;
        int i0, $i1, $i2;
        org.mozilla.javascript.optimizer.DataFlowBitSet r0;

        r0 := @this: org.mozilla.javascript.optimizer.DataFlowBitSet;

        i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.mozilla.javascript.optimizer.DataFlowBitSet: int itsSize> = i0;

        $i1 = i0 + 31;

        $i2 = $i1 >> 5;

        $r1 = newarray (int)[$i2];

        r0.<org.mozilla.javascript.optimizer.DataFlowBitSet: int[] itsBits> = $r1;

        return;
    }

    void set(int)
    {
        org.mozilla.javascript.optimizer.DataFlowBitSet r0;
        int[] $r1;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6;

        r0 := @this: org.mozilla.javascript.optimizer.DataFlowBitSet;

        i0 := @parameter0: int;

        if 0 > i0 goto label1;

        $i1 = r0.<org.mozilla.javascript.optimizer.DataFlowBitSet: int itsSize>;

        if i0 < $i1 goto label2;

     label1:
        specialinvoke r0.<org.mozilla.javascript.optimizer.DataFlowBitSet: void badIndex(int)>(i0);

     label2:
        $r1 = r0.<org.mozilla.javascript.optimizer.DataFlowBitSet: int[] itsBits>;

        $i2 = i0 >> 5;

        $i3 = $r1[$i2];

        $i4 = i0 & 31;

        $i5 = 1 << $i4;

        $i6 = $i3 | $i5;

        $r1[$i2] = $i6;

        return;
    }

    boolean test(int)
    {
        org.mozilla.javascript.optimizer.DataFlowBitSet r0;
        int[] $r1;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6;
        boolean $z0;

        r0 := @this: org.mozilla.javascript.optimizer.DataFlowBitSet;

        i0 := @parameter0: int;

        if 0 > i0 goto label1;

        $i1 = r0.<org.mozilla.javascript.optimizer.DataFlowBitSet: int itsSize>;

        if i0 < $i1 goto label2;

     label1:
        specialinvoke r0.<org.mozilla.javascript.optimizer.DataFlowBitSet: void badIndex(int)>(i0);

     label2:
        $r1 = r0.<org.mozilla.javascript.optimizer.DataFlowBitSet: int[] itsBits>;

        $i2 = i0 >> 5;

        $i3 = $r1[$i2];

        $i4 = i0 & 31;

        $i5 = 1 << $i4;

        $i6 = $i3 & $i5;

        if $i6 == 0 goto label3;

        $z0 = 1;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        return $z0;
    }

    void not()
    {
        org.mozilla.javascript.optimizer.DataFlowBitSet r0;
        int[] $r1, $r2, $r3;
        int i0, $i1, $i2, i3, $i5;

        r0 := @this: org.mozilla.javascript.optimizer.DataFlowBitSet;

        $r1 = r0.<org.mozilla.javascript.optimizer.DataFlowBitSet: int[] itsBits>;

        i0 = lengthof $r1;

        i3 = 0;

     label1:
        if i3 >= i0 goto label2;

        $r3 = r0.<org.mozilla.javascript.optimizer.DataFlowBitSet: int[] itsBits>;

        $r2 = r0.<org.mozilla.javascript.optimizer.DataFlowBitSet: int[] itsBits>;

        $i1 = $r2[i3];

        $i5 = (int) -1;

        $i2 = $i1 ^ $i5;

        $r3[i3] = $i2;

        i3 = i3 + 1;

        goto label1;

     label2:
        return;
    }

    void clear(int)
    {
        org.mozilla.javascript.optimizer.DataFlowBitSet r0;
        int[] $r1;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i9;

        r0 := @this: org.mozilla.javascript.optimizer.DataFlowBitSet;

        i0 := @parameter0: int;

        if 0 > i0 goto label1;

        $i1 = r0.<org.mozilla.javascript.optimizer.DataFlowBitSet: int itsSize>;

        if i0 < $i1 goto label2;

     label1:
        specialinvoke r0.<org.mozilla.javascript.optimizer.DataFlowBitSet: void badIndex(int)>(i0);

     label2:
        $r1 = r0.<org.mozilla.javascript.optimizer.DataFlowBitSet: int[] itsBits>;

        $i2 = i0 >> 5;

        $i3 = $r1[$i2];

        $i4 = i0 & 31;

        $i5 = 1 << $i4;

        $i9 = (int) -1;

        $i6 = $i5 ^ $i9;

        $i7 = $i3 & $i6;

        $r1[$i2] = $i7;

        return;
    }

    void clear()
    {
        int[] $r1, $r2;
        int i0, i1;
        org.mozilla.javascript.optimizer.DataFlowBitSet r0;

        r0 := @this: org.mozilla.javascript.optimizer.DataFlowBitSet;

        $r1 = r0.<org.mozilla.javascript.optimizer.DataFlowBitSet: int[] itsBits>;

        i0 = lengthof $r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r2 = r0.<org.mozilla.javascript.optimizer.DataFlowBitSet: int[] itsBits>;

        $r2[i1] = 0;

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    void or(org.mozilla.javascript.optimizer.DataFlowBitSet)
    {
        org.mozilla.javascript.optimizer.DataFlowBitSet r0, r3;
        int[] $r1, $r2, $r4;
        int i0, $i1, $i2, $i3, i4;

        r0 := @this: org.mozilla.javascript.optimizer.DataFlowBitSet;

        r3 := @parameter0: org.mozilla.javascript.optimizer.DataFlowBitSet;

        $r1 = r0.<org.mozilla.javascript.optimizer.DataFlowBitSet: int[] itsBits>;

        i0 = lengthof $r1;

        i4 = 0;

     label1:
        if i4 >= i0 goto label2;

        $r2 = r0.<org.mozilla.javascript.optimizer.DataFlowBitSet: int[] itsBits>;

        $i2 = $r2[i4];

        $r4 = r3.<org.mozilla.javascript.optimizer.DataFlowBitSet: int[] itsBits>;

        $i1 = $r4[i4];

        $i3 = $i2 | $i1;

        $r2[i4] = $i3;

        i4 = i4 + 1;

        goto label1;

     label2:
        return;
    }

    public java.lang.String toString()
    {
        org.mozilla.javascript.optimizer.DataFlowBitSet r1;
        int[] $r2, $r4;
        java.lang.StringBuffer $r0;
        int $i0, i1, $i2, i3;
        java.lang.String $r3, $r5;

        r1 := @this: org.mozilla.javascript.optimizer.DataFlowBitSet;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("DataFlowBitSet, size = ");

        $i0 = r1.<org.mozilla.javascript.optimizer.DataFlowBitSet: int itsSize>;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(10);

        $r2 = r1.<org.mozilla.javascript.optimizer.DataFlowBitSet: int[] itsBits>;

        i1 = lengthof $r2;

        i3 = 0;

     label1:
        if i3 >= i1 goto label2;

        $r4 = r1.<org.mozilla.javascript.optimizer.DataFlowBitSet: int[] itsBits>;

        $i2 = $r4[i3];

        $r5 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i2);

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(32);

        i3 = i3 + 1;

        goto label1;

     label2:
        $r3 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r3;
    }

    boolean df(org.mozilla.javascript.optimizer.DataFlowBitSet, org.mozilla.javascript.optimizer.DataFlowBitSet, org.mozilla.javascript.optimizer.DataFlowBitSet)
    {
        int[] $r1, $r2, $r4, $r6, $r8, $r9, $r10;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, i8;
        boolean $z0, z1, $z2;
        org.mozilla.javascript.optimizer.DataFlowBitSet r0, r3, r5, r7;

        r0 := @this: org.mozilla.javascript.optimizer.DataFlowBitSet;

        r3 := @parameter0: org.mozilla.javascript.optimizer.DataFlowBitSet;

        r5 := @parameter1: org.mozilla.javascript.optimizer.DataFlowBitSet;

        r7 := @parameter2: org.mozilla.javascript.optimizer.DataFlowBitSet;

        $r1 = r0.<org.mozilla.javascript.optimizer.DataFlowBitSet: int[] itsBits>;

        i0 = lengthof $r1;

        z1 = 0;

        i8 = 0;

     label1:
        if i8 >= i0 goto label4;

        $r2 = r0.<org.mozilla.javascript.optimizer.DataFlowBitSet: int[] itsBits>;

        i1 = $r2[i8];

        $r9 = r0.<org.mozilla.javascript.optimizer.DataFlowBitSet: int[] itsBits>;

        $r4 = r3.<org.mozilla.javascript.optimizer.DataFlowBitSet: int[] itsBits>;

        $i3 = $r4[i8];

        $r6 = r5.<org.mozilla.javascript.optimizer.DataFlowBitSet: int[] itsBits>;

        $i2 = $r6[i8];

        $i5 = $i3 | $i2;

        $r8 = r7.<org.mozilla.javascript.optimizer.DataFlowBitSet: int[] itsBits>;

        $i4 = $r8[i8];

        $i6 = $i5 & $i4;

        $r9[i8] = $i6;

        $z0 = z1;

        $r10 = r0.<org.mozilla.javascript.optimizer.DataFlowBitSet: int[] itsBits>;

        $i7 = $r10[i8];

        if i1 == $i7 goto label2;

        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        z1 = $z0 | $z2;

        i8 = i8 + 1;

        goto label1;

     label4:
        return z1;
    }

    boolean df2(org.mozilla.javascript.optimizer.DataFlowBitSet, org.mozilla.javascript.optimizer.DataFlowBitSet, org.mozilla.javascript.optimizer.DataFlowBitSet)
    {
        int[] $r1, $r2, $r4, $r6, $r8, $r9, $r10;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, i8;
        boolean $z0, z1, $z2;
        org.mozilla.javascript.optimizer.DataFlowBitSet r0, r3, r5, r7;

        r0 := @this: org.mozilla.javascript.optimizer.DataFlowBitSet;

        r3 := @parameter0: org.mozilla.javascript.optimizer.DataFlowBitSet;

        r7 := @parameter1: org.mozilla.javascript.optimizer.DataFlowBitSet;

        r5 := @parameter2: org.mozilla.javascript.optimizer.DataFlowBitSet;

        $r1 = r0.<org.mozilla.javascript.optimizer.DataFlowBitSet: int[] itsBits>;

        i0 = lengthof $r1;

        z1 = 0;

        i8 = 0;

     label1:
        if i8 >= i0 goto label4;

        $r2 = r0.<org.mozilla.javascript.optimizer.DataFlowBitSet: int[] itsBits>;

        i1 = $r2[i8];

        $r9 = r0.<org.mozilla.javascript.optimizer.DataFlowBitSet: int[] itsBits>;

        $r4 = r3.<org.mozilla.javascript.optimizer.DataFlowBitSet: int[] itsBits>;

        $i3 = $r4[i8];

        $r6 = r5.<org.mozilla.javascript.optimizer.DataFlowBitSet: int[] itsBits>;

        $i2 = $r6[i8];

        $i5 = $i3 & $i2;

        $r8 = r7.<org.mozilla.javascript.optimizer.DataFlowBitSet: int[] itsBits>;

        $i4 = $r8[i8];

        $i6 = $i5 | $i4;

        $r9[i8] = $i6;

        $z0 = z1;

        $r10 = r0.<org.mozilla.javascript.optimizer.DataFlowBitSet: int[] itsBits>;

        $i7 = $r10[i8];

        if i1 == $i7 goto label2;

        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        z1 = $z0 | $z2;

        i8 = i8 + 1;

        goto label1;

     label4:
        return z1;
    }

    private void badIndex(int)
    {
        java.lang.StringBuffer $r1, $r2, $r3;
        int i0;
        java.lang.RuntimeException $r0;
        java.lang.String $r4;
        org.mozilla.javascript.optimizer.DataFlowBitSet r5;

        r5 := @this: org.mozilla.javascript.optimizer.DataFlowBitSet;

        i0 := @parameter0: int;

        $r0 = new java.lang.RuntimeException;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("DataFlowBitSet bad index ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>($r4);

        throw $r0;
    }
}
