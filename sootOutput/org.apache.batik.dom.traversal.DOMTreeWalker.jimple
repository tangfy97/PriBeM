public class org.apache.batik.dom.traversal.DOMTreeWalker extends java.lang.Object implements org.w3c.dom.traversal.TreeWalker
{
    protected org.w3c.dom.Node root;
    protected int whatToShow;
    protected org.w3c.dom.traversal.NodeFilter filter;
    protected boolean expandEntityReferences;
    protected org.w3c.dom.Node currentNode;

    public void <init>(org.w3c.dom.Node, int, org.w3c.dom.traversal.NodeFilter, boolean)
    {
        org.apache.batik.dom.traversal.DOMTreeWalker r0;
        org.w3c.dom.Node r1, $r3;
        int i0;
        org.w3c.dom.traversal.NodeFilter r2;
        boolean z0;

        r0 := @this: org.apache.batik.dom.traversal.DOMTreeWalker;

        r1 := @parameter0: org.w3c.dom.Node;

        i0 := @parameter1: int;

        r2 := @parameter2: org.w3c.dom.traversal.NodeFilter;

        z0 := @parameter3: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.batik.dom.traversal.DOMTreeWalker: org.w3c.dom.Node root> = r1;

        r0.<org.apache.batik.dom.traversal.DOMTreeWalker: int whatToShow> = i0;

        r0.<org.apache.batik.dom.traversal.DOMTreeWalker: org.w3c.dom.traversal.NodeFilter filter> = r2;

        r0.<org.apache.batik.dom.traversal.DOMTreeWalker: boolean expandEntityReferences> = z0;

        $r3 = r0.<org.apache.batik.dom.traversal.DOMTreeWalker: org.w3c.dom.Node root>;

        r0.<org.apache.batik.dom.traversal.DOMTreeWalker: org.w3c.dom.Node currentNode> = $r3;

        return;
    }

    public org.w3c.dom.Node getRoot()
    {
        org.apache.batik.dom.traversal.DOMTreeWalker r0;
        org.w3c.dom.Node $r1;

        r0 := @this: org.apache.batik.dom.traversal.DOMTreeWalker;

        $r1 = r0.<org.apache.batik.dom.traversal.DOMTreeWalker: org.w3c.dom.Node root>;

        return $r1;
    }

    public int getWhatToShow()
    {
        int $i0;
        org.apache.batik.dom.traversal.DOMTreeWalker r0;

        r0 := @this: org.apache.batik.dom.traversal.DOMTreeWalker;

        $i0 = r0.<org.apache.batik.dom.traversal.DOMTreeWalker: int whatToShow>;

        return $i0;
    }

    public org.w3c.dom.traversal.NodeFilter getFilter()
    {
        org.apache.batik.dom.traversal.DOMTreeWalker r0;
        org.w3c.dom.traversal.NodeFilter $r1;

        r0 := @this: org.apache.batik.dom.traversal.DOMTreeWalker;

        $r1 = r0.<org.apache.batik.dom.traversal.DOMTreeWalker: org.w3c.dom.traversal.NodeFilter filter>;

        return $r1;
    }

    public boolean getExpandEntityReferences()
    {
        org.apache.batik.dom.traversal.DOMTreeWalker r0;
        boolean $z0;

        r0 := @this: org.apache.batik.dom.traversal.DOMTreeWalker;

        $z0 = r0.<org.apache.batik.dom.traversal.DOMTreeWalker: boolean expandEntityReferences>;

        return $z0;
    }

    public org.w3c.dom.Node getCurrentNode()
    {
        org.apache.batik.dom.traversal.DOMTreeWalker r0;
        org.w3c.dom.Node $r1;

        r0 := @this: org.apache.batik.dom.traversal.DOMTreeWalker;

        $r1 = r0.<org.apache.batik.dom.traversal.DOMTreeWalker: org.w3c.dom.Node currentNode>;

        return $r1;
    }

    public void setCurrentNode(org.w3c.dom.Node)
    {
        org.apache.batik.dom.traversal.DOMTreeWalker r1;
        org.apache.batik.dom.AbstractNode $r3;
        org.w3c.dom.Node r0, $r2;
        org.w3c.dom.DOMException $r4;

        r1 := @this: org.apache.batik.dom.traversal.DOMTreeWalker;

        r0 := @parameter0: org.w3c.dom.Node;

        if r0 != null goto label1;

        $r2 = r1.<org.apache.batik.dom.traversal.DOMTreeWalker: org.w3c.dom.Node root>;

        $r3 = (org.apache.batik.dom.AbstractNode) $r2;

        $r4 = virtualinvoke $r3.<org.apache.batik.dom.AbstractNode: org.w3c.dom.DOMException createDOMException(short,java.lang.String,java.lang.Object[])>(9, "null.current.node", null);

        throw $r4;

     label1:
        r1.<org.apache.batik.dom.traversal.DOMTreeWalker: org.w3c.dom.Node currentNode> = r0;

        return;
    }

    public org.w3c.dom.Node parentNode()
    {
        org.apache.batik.dom.traversal.DOMTreeWalker r0;
        org.w3c.dom.Node $r1, $r2;

        r0 := @this: org.apache.batik.dom.traversal.DOMTreeWalker;

        $r1 = r0.<org.apache.batik.dom.traversal.DOMTreeWalker: org.w3c.dom.Node currentNode>;

        $r2 = virtualinvoke r0.<org.apache.batik.dom.traversal.DOMTreeWalker: org.w3c.dom.Node parentNode(org.w3c.dom.Node)>($r1);

        if $r2 == null goto label1;

        r0.<org.apache.batik.dom.traversal.DOMTreeWalker: org.w3c.dom.Node currentNode> = $r2;

     label1:
        return $r2;
    }

    public org.w3c.dom.Node firstChild()
    {
        org.apache.batik.dom.traversal.DOMTreeWalker r0;
        org.w3c.dom.Node $r1, $r2;

        r0 := @this: org.apache.batik.dom.traversal.DOMTreeWalker;

        $r1 = r0.<org.apache.batik.dom.traversal.DOMTreeWalker: org.w3c.dom.Node currentNode>;

        $r2 = virtualinvoke r0.<org.apache.batik.dom.traversal.DOMTreeWalker: org.w3c.dom.Node firstChild(org.w3c.dom.Node)>($r1);

        if $r2 == null goto label1;

        r0.<org.apache.batik.dom.traversal.DOMTreeWalker: org.w3c.dom.Node currentNode> = $r2;

     label1:
        return $r2;
    }

    public org.w3c.dom.Node lastChild()
    {
        org.apache.batik.dom.traversal.DOMTreeWalker r0;
        org.w3c.dom.Node $r1, $r2;

        r0 := @this: org.apache.batik.dom.traversal.DOMTreeWalker;

        $r1 = r0.<org.apache.batik.dom.traversal.DOMTreeWalker: org.w3c.dom.Node currentNode>;

        $r2 = virtualinvoke r0.<org.apache.batik.dom.traversal.DOMTreeWalker: org.w3c.dom.Node lastChild(org.w3c.dom.Node)>($r1);

        if $r2 == null goto label1;

        r0.<org.apache.batik.dom.traversal.DOMTreeWalker: org.w3c.dom.Node currentNode> = $r2;

     label1:
        return $r2;
    }

    public org.w3c.dom.Node previousSibling()
    {
        org.apache.batik.dom.traversal.DOMTreeWalker r0;
        org.w3c.dom.Node $r1, $r2, $r3;

        r0 := @this: org.apache.batik.dom.traversal.DOMTreeWalker;

        $r2 = r0.<org.apache.batik.dom.traversal.DOMTreeWalker: org.w3c.dom.Node currentNode>;

        $r1 = r0.<org.apache.batik.dom.traversal.DOMTreeWalker: org.w3c.dom.Node root>;

        $r3 = virtualinvoke r0.<org.apache.batik.dom.traversal.DOMTreeWalker: org.w3c.dom.Node previousSibling(org.w3c.dom.Node,org.w3c.dom.Node)>($r2, $r1);

        if $r3 == null goto label1;

        r0.<org.apache.batik.dom.traversal.DOMTreeWalker: org.w3c.dom.Node currentNode> = $r3;

     label1:
        return $r3;
    }

    public org.w3c.dom.Node nextSibling()
    {
        org.apache.batik.dom.traversal.DOMTreeWalker r0;
        org.w3c.dom.Node $r1, $r2, $r3;

        r0 := @this: org.apache.batik.dom.traversal.DOMTreeWalker;

        $r2 = r0.<org.apache.batik.dom.traversal.DOMTreeWalker: org.w3c.dom.Node currentNode>;

        $r1 = r0.<org.apache.batik.dom.traversal.DOMTreeWalker: org.w3c.dom.Node root>;

        $r3 = virtualinvoke r0.<org.apache.batik.dom.traversal.DOMTreeWalker: org.w3c.dom.Node nextSibling(org.w3c.dom.Node,org.w3c.dom.Node)>($r2, $r1);

        if $r3 == null goto label1;

        r0.<org.apache.batik.dom.traversal.DOMTreeWalker: org.w3c.dom.Node currentNode> = $r3;

     label1:
        return $r3;
    }

    public org.w3c.dom.Node previousNode()
    {
        org.apache.batik.dom.traversal.DOMTreeWalker r0;
        org.w3c.dom.Node $r1, $r2, $r3, $r4, $r5, $r6, r7, r8, $r9;

        r0 := @this: org.apache.batik.dom.traversal.DOMTreeWalker;

        $r2 = r0.<org.apache.batik.dom.traversal.DOMTreeWalker: org.w3c.dom.Node currentNode>;

        $r1 = r0.<org.apache.batik.dom.traversal.DOMTreeWalker: org.w3c.dom.Node root>;

        $r3 = virtualinvoke r0.<org.apache.batik.dom.traversal.DOMTreeWalker: org.w3c.dom.Node previousSibling(org.w3c.dom.Node,org.w3c.dom.Node)>($r2, $r1);

        if $r3 != null goto label2;

        $r5 = r0.<org.apache.batik.dom.traversal.DOMTreeWalker: org.w3c.dom.Node currentNode>;

        $r6 = virtualinvoke r0.<org.apache.batik.dom.traversal.DOMTreeWalker: org.w3c.dom.Node parentNode(org.w3c.dom.Node)>($r5);

        if $r6 == null goto label1;

        r0.<org.apache.batik.dom.traversal.DOMTreeWalker: org.w3c.dom.Node currentNode> = $r6;

     label1:
        return $r6;

     label2:
        $r4 = virtualinvoke r0.<org.apache.batik.dom.traversal.DOMTreeWalker: org.w3c.dom.Node lastChild(org.w3c.dom.Node)>($r3);

        r7 = $r4;

        r8 = $r4;

        goto label4;

     label3:
        r8 = r7;

        r7 = virtualinvoke r0.<org.apache.batik.dom.traversal.DOMTreeWalker: org.w3c.dom.Node lastChild(org.w3c.dom.Node)>(r7);

     label4:
        if r7 != null goto label3;

        if r8 == null goto label5;

        $r9 = r8;

        goto label6;

     label5:
        $r9 = $r3;

     label6:
        r0.<org.apache.batik.dom.traversal.DOMTreeWalker: org.w3c.dom.Node currentNode> = $r9;

        return $r9;
    }

    public org.w3c.dom.Node nextNode()
    {
        org.apache.batik.dom.traversal.DOMTreeWalker r0;
        org.w3c.dom.Node $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, r9;

        r0 := @this: org.apache.batik.dom.traversal.DOMTreeWalker;

        $r1 = r0.<org.apache.batik.dom.traversal.DOMTreeWalker: org.w3c.dom.Node currentNode>;

        $r2 = virtualinvoke r0.<org.apache.batik.dom.traversal.DOMTreeWalker: org.w3c.dom.Node firstChild(org.w3c.dom.Node)>($r1);

        if $r2 == null goto label1;

        r0.<org.apache.batik.dom.traversal.DOMTreeWalker: org.w3c.dom.Node currentNode> = $r2;

        return $r2;

     label1:
        $r4 = r0.<org.apache.batik.dom.traversal.DOMTreeWalker: org.w3c.dom.Node currentNode>;

        $r3 = r0.<org.apache.batik.dom.traversal.DOMTreeWalker: org.w3c.dom.Node root>;

        $r5 = virtualinvoke r0.<org.apache.batik.dom.traversal.DOMTreeWalker: org.w3c.dom.Node nextSibling(org.w3c.dom.Node,org.w3c.dom.Node)>($r4, $r3);

        if $r5 == null goto label2;

        r0.<org.apache.batik.dom.traversal.DOMTreeWalker: org.w3c.dom.Node currentNode> = $r5;

        return $r5;

     label2:
        r9 = r0.<org.apache.batik.dom.traversal.DOMTreeWalker: org.w3c.dom.Node currentNode>;

        goto label3;

     label3:
        $r6 = virtualinvoke r0.<org.apache.batik.dom.traversal.DOMTreeWalker: org.w3c.dom.Node parentNode(org.w3c.dom.Node)>(r9);

        r9 = $r6;

        if $r6 != null goto label4;

        return null;

     label4:
        $r7 = r0.<org.apache.batik.dom.traversal.DOMTreeWalker: org.w3c.dom.Node root>;

        $r8 = virtualinvoke r0.<org.apache.batik.dom.traversal.DOMTreeWalker: org.w3c.dom.Node nextSibling(org.w3c.dom.Node,org.w3c.dom.Node)>($r6, $r7);

        if $r8 == null goto label3;

        r0.<org.apache.batik.dom.traversal.DOMTreeWalker: org.w3c.dom.Node currentNode> = $r8;

        return $r8;
    }

    protected org.w3c.dom.Node parentNode(org.w3c.dom.Node)
    {
        org.apache.batik.dom.traversal.DOMTreeWalker r1;
        short $s1, $s5;
        org.w3c.dom.Node r0, $r2, r5, $r6;
        int $i0, $i2, $i3, $i4, $i6;
        org.w3c.dom.traversal.NodeFilter $r3, $r4;

        r1 := @this: org.apache.batik.dom.traversal.DOMTreeWalker;

        r0 := @parameter0: org.w3c.dom.Node;

        $r2 = r1.<org.apache.batik.dom.traversal.DOMTreeWalker: org.w3c.dom.Node root>;

        if r0 != $r2 goto label1;

        return null;

     label1:
        r5 = r0;

        goto label2;

     label2:
        $r6 = interfaceinvoke r5.<org.w3c.dom.Node: org.w3c.dom.Node getParentNode()>();

        r5 = $r6;

        if $r6 != null goto label3;

        return null;

     label3:
        $i0 = r1.<org.apache.batik.dom.traversal.DOMTreeWalker: int whatToShow>;

        $s1 = interfaceinvoke $r6.<org.w3c.dom.Node: short getNodeType()>();

        $i6 = (int) $s1;

        $i2 = $i6 - 1;

        $i3 = 1 << $i2;

        $i4 = $i0 & $i3;

        if $i4 == 0 goto label2;

        $r3 = r1.<org.apache.batik.dom.traversal.DOMTreeWalker: org.w3c.dom.traversal.NodeFilter filter>;

        if $r3 == null goto label4;

        $r4 = r1.<org.apache.batik.dom.traversal.DOMTreeWalker: org.w3c.dom.traversal.NodeFilter filter>;

        $s5 = interfaceinvoke $r4.<org.w3c.dom.traversal.NodeFilter: short acceptNode(org.w3c.dom.Node)>($r6);

        if $s5 != 1 goto label2;

     label4:
        return $r6;
    }

    protected org.w3c.dom.Node firstChild(org.w3c.dom.Node)
    {
        org.apache.batik.dom.traversal.DOMTreeWalker r2;
        short $s0, $s1;
        org.w3c.dom.Node r0, $r1, $r3, $r4;
        int $i2, $i3;
        boolean $z0;

        r2 := @this: org.apache.batik.dom.traversal.DOMTreeWalker;

        r0 := @parameter0: org.w3c.dom.Node;

        $s0 = interfaceinvoke r0.<org.w3c.dom.Node: short getNodeType()>();

        $i2 = (int) $s0;

        if $i2 != 5 goto label1;

        $z0 = r2.<org.apache.batik.dom.traversal.DOMTreeWalker: boolean expandEntityReferences>;

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r1 = interfaceinvoke r0.<org.w3c.dom.Node: org.w3c.dom.Node getFirstChild()>();

        if $r1 != null goto label2;

        return null;

     label2:
        $s1 = virtualinvoke r2.<org.apache.batik.dom.traversal.DOMTreeWalker: short acceptNode(org.w3c.dom.Node)>($r1);

        $i3 = (int) $s1;

        lookupswitch($i3)
        {
            case 1: goto label3;
            case 3: goto label4;
            default: goto label5;
        };

     label3:
        return $r1;

     label4:
        $r3 = virtualinvoke r2.<org.apache.batik.dom.traversal.DOMTreeWalker: org.w3c.dom.Node firstChild(org.w3c.dom.Node)>($r1);

        if $r3 == null goto label5;

        return $r3;

     label5:
        $r4 = virtualinvoke r2.<org.apache.batik.dom.traversal.DOMTreeWalker: org.w3c.dom.Node nextSibling(org.w3c.dom.Node,org.w3c.dom.Node)>($r1, r0);

        return $r4;
    }

    protected org.w3c.dom.Node lastChild(org.w3c.dom.Node)
    {
        org.apache.batik.dom.traversal.DOMTreeWalker r2;
        short $s0, $s1;
        org.w3c.dom.Node r0, $r1, $r3, $r4;
        int $i2, $i3;
        boolean $z0;

        r2 := @this: org.apache.batik.dom.traversal.DOMTreeWalker;

        r0 := @parameter0: org.w3c.dom.Node;

        $s0 = interfaceinvoke r0.<org.w3c.dom.Node: short getNodeType()>();

        $i2 = (int) $s0;

        if $i2 != 5 goto label1;

        $z0 = r2.<org.apache.batik.dom.traversal.DOMTreeWalker: boolean expandEntityReferences>;

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r1 = interfaceinvoke r0.<org.w3c.dom.Node: org.w3c.dom.Node getLastChild()>();

        if $r1 != null goto label2;

        return null;

     label2:
        $s1 = virtualinvoke r2.<org.apache.batik.dom.traversal.DOMTreeWalker: short acceptNode(org.w3c.dom.Node)>($r1);

        $i3 = (int) $s1;

        lookupswitch($i3)
        {
            case 1: goto label3;
            case 3: goto label4;
            default: goto label5;
        };

     label3:
        return $r1;

     label4:
        $r3 = virtualinvoke r2.<org.apache.batik.dom.traversal.DOMTreeWalker: org.w3c.dom.Node lastChild(org.w3c.dom.Node)>($r1);

        if $r3 == null goto label5;

        return $r3;

     label5:
        $r4 = virtualinvoke r2.<org.apache.batik.dom.traversal.DOMTreeWalker: org.w3c.dom.Node previousSibling(org.w3c.dom.Node,org.w3c.dom.Node)>($r1, r0);

        return $r4;
    }

    protected org.w3c.dom.Node previousSibling(org.w3c.dom.Node, org.w3c.dom.Node)
    {
        org.apache.batik.dom.traversal.DOMTreeWalker r2;
        short $s0, $s1;
        org.w3c.dom.Node r0, $r1, $r3, $r4, r5;
        int $i2, $i3;

        r2 := @this: org.apache.batik.dom.traversal.DOMTreeWalker;

        r5 := @parameter0: org.w3c.dom.Node;

        r0 := @parameter1: org.w3c.dom.Node;

        goto label1;

     label1:
        if r5 != r0 goto label2;

        return null;

     label2:
        $r1 = interfaceinvoke r5.<org.w3c.dom.Node: org.w3c.dom.Node getPreviousSibling()>();

        if $r1 != null goto label6;

        $r4 = interfaceinvoke r5.<org.w3c.dom.Node: org.w3c.dom.Node getParentNode()>();

        if $r4 == null goto label3;

        if $r4 != r0 goto label4;

     label3:
        return null;

     label4:
        $s1 = virtualinvoke r2.<org.apache.batik.dom.traversal.DOMTreeWalker: short acceptNode(org.w3c.dom.Node)>($r4);

        $i2 = (int) $s1;

        if $i2 != 3 goto label5;

        r5 = $r4;

        goto label1;

     label5:
        return null;

     label6:
        $s0 = virtualinvoke r2.<org.apache.batik.dom.traversal.DOMTreeWalker: short acceptNode(org.w3c.dom.Node)>($r1);

        $i3 = (int) $s0;

        lookupswitch($i3)
        {
            case 1: goto label7;
            case 3: goto label8;
            default: goto label9;
        };

     label7:
        return $r1;

     label8:
        $r3 = virtualinvoke r2.<org.apache.batik.dom.traversal.DOMTreeWalker: org.w3c.dom.Node lastChild(org.w3c.dom.Node)>($r1);

        if $r3 == null goto label9;

        return $r3;

     label9:
        r5 = $r1;

        goto label1;
    }

    protected org.w3c.dom.Node nextSibling(org.w3c.dom.Node, org.w3c.dom.Node)
    {
        org.apache.batik.dom.traversal.DOMTreeWalker r2;
        short $s0, $s1;
        org.w3c.dom.Node r0, $r1, $r3, $r4, r5;
        int $i2, $i3;

        r2 := @this: org.apache.batik.dom.traversal.DOMTreeWalker;

        r5 := @parameter0: org.w3c.dom.Node;

        r0 := @parameter1: org.w3c.dom.Node;

        goto label1;

     label1:
        if r5 != r0 goto label2;

        return null;

     label2:
        $r1 = interfaceinvoke r5.<org.w3c.dom.Node: org.w3c.dom.Node getNextSibling()>();

        if $r1 != null goto label6;

        $r4 = interfaceinvoke r5.<org.w3c.dom.Node: org.w3c.dom.Node getParentNode()>();

        if $r4 == null goto label3;

        if $r4 != r0 goto label4;

     label3:
        return null;

     label4:
        $s1 = virtualinvoke r2.<org.apache.batik.dom.traversal.DOMTreeWalker: short acceptNode(org.w3c.dom.Node)>($r4);

        $i2 = (int) $s1;

        if $i2 != 3 goto label5;

        r5 = $r4;

        goto label1;

     label5:
        return null;

     label6:
        $s0 = virtualinvoke r2.<org.apache.batik.dom.traversal.DOMTreeWalker: short acceptNode(org.w3c.dom.Node)>($r1);

        $i3 = (int) $s0;

        lookupswitch($i3)
        {
            case 1: goto label7;
            case 3: goto label8;
            default: goto label9;
        };

     label7:
        return $r1;

     label8:
        $r3 = virtualinvoke r2.<org.apache.batik.dom.traversal.DOMTreeWalker: org.w3c.dom.Node firstChild(org.w3c.dom.Node)>($r1);

        if $r3 == null goto label9;

        return $r3;

     label9:
        r5 = $r1;

        goto label1;
    }

    protected short acceptNode(org.w3c.dom.Node)
    {
        org.apache.batik.dom.traversal.DOMTreeWalker r0;
        short $s1, $s5;
        org.w3c.dom.Node r1;
        int $i0, $i2, $i3, $i4, $i6;
        org.w3c.dom.traversal.NodeFilter $r2, $r3;

        r0 := @this: org.apache.batik.dom.traversal.DOMTreeWalker;

        r1 := @parameter0: org.w3c.dom.Node;

        $i0 = r0.<org.apache.batik.dom.traversal.DOMTreeWalker: int whatToShow>;

        $s1 = interfaceinvoke r1.<org.w3c.dom.Node: short getNodeType()>();

        $i6 = (int) $s1;

        $i2 = $i6 - 1;

        $i3 = 1 << $i2;

        $i4 = $i0 & $i3;

        if $i4 == 0 goto label2;

        $r2 = r0.<org.apache.batik.dom.traversal.DOMTreeWalker: org.w3c.dom.traversal.NodeFilter filter>;

        if $r2 != null goto label1;

        return 1;

     label1:
        $r3 = r0.<org.apache.batik.dom.traversal.DOMTreeWalker: org.w3c.dom.traversal.NodeFilter filter>;

        $s5 = interfaceinvoke $r3.<org.w3c.dom.traversal.NodeFilter: short acceptNode(org.w3c.dom.Node)>(r1);

        return $s5;

     label2:
        return 3;
    }
}
