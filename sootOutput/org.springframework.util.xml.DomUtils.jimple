public abstract class org.springframework.util.xml.DomUtils extends java.lang.Object
{

    public void <init>()
    {
        org.springframework.util.xml.DomUtils r0;

        r0 := @this: org.springframework.util.xml.DomUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.util.List getChildElementsByTagName(org.w3c.dom.Element, java.lang.String[])
    {
        org.w3c.dom.NodeList $r3;
        java.lang.String[] r1;
        java.util.ArrayList $r4;
        java.util.List $r2;
        org.w3c.dom.Element r0, $r6;
        org.w3c.dom.Node $r5;
        int i0, $i1;
        boolean $z0, $z1;

        r0 := @parameter0: org.w3c.dom.Element;

        r1 := @parameter1: java.lang.String[];

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "Element must not be null");

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r1, "Element names collection must not be null");

        $r2 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r1);

        $r3 = interfaceinvoke r0.<org.w3c.dom.Element: org.w3c.dom.NodeList getChildNodes()>();

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        i0 = 0;

        goto label3;

     label1:
        $r5 = interfaceinvoke $r3.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(i0);

        $z0 = $r5 instanceof org.w3c.dom.Element;

        if $z0 == 0 goto label2;

        $z1 = staticinvoke <org.springframework.util.xml.DomUtils: boolean nodeNameMatch(org.w3c.dom.Node,java.util.Collection)>($r5, $r2);

        if $z1 == 0 goto label2;

        $r6 = (org.w3c.dom.Element) $r5;

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r6);

     label2:
        i0 = i0 + 1;

     label3:
        $i1 = interfaceinvoke $r3.<org.w3c.dom.NodeList: int getLength()>();

        if i0 < $i1 goto label1;

        return $r4;
    }

    public static java.util.List getChildElementsByTagName(org.w3c.dom.Element, java.lang.String)
    {
        java.util.List $r3;
        org.w3c.dom.Element r0;
        java.lang.String[] $r1;
        java.lang.String r2;

        r0 := @parameter0: org.w3c.dom.Element;

        r2 := @parameter1: java.lang.String;

        $r1 = newarray (java.lang.String)[1];

        $r1[0] = r2;

        $r3 = staticinvoke <org.springframework.util.xml.DomUtils: java.util.List getChildElementsByTagName(org.w3c.dom.Element,java.lang.String[])>(r0, $r1);

        return $r3;
    }

    public static org.w3c.dom.Element getChildElementByTagName(org.w3c.dom.Element, java.lang.String)
    {
        org.w3c.dom.NodeList $r2;
        org.w3c.dom.Element r0, $r4;
        org.w3c.dom.Node $r3;
        int i0, $i1;
        java.lang.String r1;
        boolean $z0, $z1;

        r0 := @parameter0: org.w3c.dom.Element;

        r1 := @parameter1: java.lang.String;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "Element must not be null");

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r1, "Element name must not be null");

        $r2 = interfaceinvoke r0.<org.w3c.dom.Element: org.w3c.dom.NodeList getChildNodes()>();

        i0 = 0;

        goto label3;

     label1:
        $r3 = interfaceinvoke $r2.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(i0);

        $z0 = $r3 instanceof org.w3c.dom.Element;

        if $z0 == 0 goto label2;

        $z1 = staticinvoke <org.springframework.util.xml.DomUtils: boolean nodeNameMatch(org.w3c.dom.Node,java.lang.String)>($r3, r1);

        if $z1 == 0 goto label2;

        $r4 = (org.w3c.dom.Element) $r3;

        return $r4;

     label2:
        i0 = i0 + 1;

     label3:
        $i1 = interfaceinvoke $r2.<org.w3c.dom.NodeList: int getLength()>();

        if i0 < $i1 goto label1;

        return null;
    }

    public static java.lang.String getChildElementValueByTagName(org.w3c.dom.Element, java.lang.String)
    {
        org.w3c.dom.Element r0, $r2;
        java.lang.String r1, $r3;

        r0 := @parameter0: org.w3c.dom.Element;

        r1 := @parameter1: java.lang.String;

        $r2 = staticinvoke <org.springframework.util.xml.DomUtils: org.w3c.dom.Element getChildElementByTagName(org.w3c.dom.Element,java.lang.String)>(r0, r1);

        if $r2 == null goto label1;

        $r3 = staticinvoke <org.springframework.util.xml.DomUtils: java.lang.String getTextValue(org.w3c.dom.Element)>($r2);

        goto label2;

     label1:
        $r3 = null;

     label2:
        return $r3;
    }

    public static java.util.List getChildElements(org.w3c.dom.Element)
    {
        org.w3c.dom.NodeList $r1;
        java.util.ArrayList $r2;
        org.w3c.dom.Element r0, $r4;
        org.w3c.dom.Node $r3;
        int i0, $i1;
        boolean $z0;

        r0 := @parameter0: org.w3c.dom.Element;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "Element must not be null");

        $r1 = interfaceinvoke r0.<org.w3c.dom.Element: org.w3c.dom.NodeList getChildNodes()>();

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        i0 = 0;

        goto label3;

     label1:
        $r3 = interfaceinvoke $r1.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(i0);

        $z0 = $r3 instanceof org.w3c.dom.Element;

        if $z0 == 0 goto label2;

        $r4 = (org.w3c.dom.Element) $r3;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r4);

     label2:
        i0 = i0 + 1;

     label3:
        $i1 = interfaceinvoke $r1.<org.w3c.dom.NodeList: int getLength()>();

        if i0 < $i1 goto label1;

        return $r2;
    }

    public static java.lang.String getTextValue(org.w3c.dom.Element)
    {
        org.w3c.dom.NodeList $r2;
        org.w3c.dom.Element r0;
        org.w3c.dom.Node $r3;
        int i0, $i1;
        java.lang.StringBuilder $r1;
        java.lang.String $r4, $r5;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: org.w3c.dom.Element;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "Element must not be null");

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = interfaceinvoke r0.<org.w3c.dom.Element: org.w3c.dom.NodeList getChildNodes()>();

        i0 = 0;

        goto label5;

     label1:
        $r3 = interfaceinvoke $r2.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(i0);

        $z0 = $r3 instanceof org.w3c.dom.CharacterData;

        if $z0 == 0 goto label2;

        $z2 = $r3 instanceof org.w3c.dom.Comment;

        if $z2 == 0 goto label3;

     label2:
        $z1 = $r3 instanceof org.w3c.dom.EntityReference;

        if $z1 == 0 goto label4;

     label3:
        $r4 = interfaceinvoke $r3.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

     label4:
        i0 = i0 + 1;

     label5:
        $i1 = interfaceinvoke $r2.<org.w3c.dom.NodeList: int getLength()>();

        if i0 < $i1 goto label1;

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    public static boolean nodeNameEquals(org.w3c.dom.Node, java.lang.String)
    {
        java.lang.String r1;
        org.w3c.dom.Node r0;
        boolean $z0;

        r0 := @parameter0: org.w3c.dom.Node;

        r1 := @parameter1: java.lang.String;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "Node must not be null");

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r1, "Desired name must not be null");

        $z0 = staticinvoke <org.springframework.util.xml.DomUtils: boolean nodeNameMatch(org.w3c.dom.Node,java.lang.String)>(r0, r1);

        return $z0;
    }

    public static org.xml.sax.ContentHandler createContentHandler(org.w3c.dom.Node)
    {
        org.springframework.util.xml.DomContentHandler $r0;
        org.w3c.dom.Node r1;

        r1 := @parameter0: org.w3c.dom.Node;

        $r0 = new org.springframework.util.xml.DomContentHandler;

        specialinvoke $r0.<org.springframework.util.xml.DomContentHandler: void <init>(org.w3c.dom.Node)>(r1);

        return $r0;
    }

    private static boolean nodeNameMatch(org.w3c.dom.Node, java.lang.String)
    {
        org.w3c.dom.Node r1;
        java.lang.String r0, $r2, $r3;
        boolean $z0, $z1;

        r1 := @parameter0: org.w3c.dom.Node;

        r0 := @parameter1: java.lang.String;

        $r2 = interfaceinvoke r1.<org.w3c.dom.Node: java.lang.String getNodeName()>();

        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z0 != 0 goto label1;

        $r3 = interfaceinvoke r1.<org.w3c.dom.Node: java.lang.String getLocalName()>();

        $z1 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z1 != 0 goto label1;

        return 0;

     label1:
        return 1;
    }

    private static boolean nodeNameMatch(org.w3c.dom.Node, java.util.Collection)
    {
        java.util.Collection r0;
        org.w3c.dom.Node r1;
        java.lang.String $r2, $r3;
        boolean $z0, $z1;

        r1 := @parameter0: org.w3c.dom.Node;

        r0 := @parameter1: java.util.Collection;

        $r2 = interfaceinvoke r1.<org.w3c.dom.Node: java.lang.String getNodeName()>();

        $z0 = interfaceinvoke r0.<java.util.Collection: boolean contains(java.lang.Object)>($r2);

        if $z0 != 0 goto label1;

        $r3 = interfaceinvoke r1.<org.w3c.dom.Node: java.lang.String getLocalName()>();

        $z1 = interfaceinvoke r0.<java.util.Collection: boolean contains(java.lang.Object)>($r3);

        if $z1 != 0 goto label1;

        return 0;

     label1:
        return 1;
    }
}
