public abstract class org.apache.commons.httpclient.auth.AuthPolicy extends java.lang.Object
{
    private static final java.util.HashMap SCHEMES;
    private static final java.util.ArrayList SCHEME_LIST;
    public static final java.lang.String AUTH_SCHEME_PRIORITY;
    public static final java.lang.String NTLM;
    public static final java.lang.String DIGEST;
    public static final java.lang.String BASIC;
    protected static final org.apache.commons.logging.Log LOG;
    static java.lang.Class class$org$apache$commons$httpclient$auth$NTLMScheme;
    static java.lang.Class class$org$apache$commons$httpclient$auth$DigestScheme;
    static java.lang.Class class$org$apache$commons$httpclient$auth$BasicScheme;
    static java.lang.Class class$org$apache$commons$httpclient$auth$AuthPolicy;

    public void <init>()
    {
        org.apache.commons.httpclient.auth.AuthPolicy r0;

        r0 := @this: org.apache.commons.httpclient.auth.AuthPolicy;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static synchronized void registerAuthScheme(java.lang.String, java.lang.Class)
    {
        java.util.HashMap $r2;
        java.lang.IllegalArgumentException $r6, $r7;
        java.util.ArrayList $r4;
        java.lang.Class r1;
        java.lang.String r0, $r3, $r5;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.Class;

        if r0 != null goto label1;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Id may not be null");

        throw $r7;

     label1:
        if r1 != null goto label2;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Authentication scheme class may not be null");

        throw $r6;

     label2:
        $r2 = <org.apache.commons.httpclient.auth.AuthPolicy: java.util.HashMap SCHEMES>;

        $r3 = virtualinvoke r0.<java.lang.String: java.lang.String toLowerCase()>();

        virtualinvoke $r2.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, r1);

        $r4 = <org.apache.commons.httpclient.auth.AuthPolicy: java.util.ArrayList SCHEME_LIST>;

        $r5 = virtualinvoke r0.<java.lang.String: java.lang.String toLowerCase()>();

        virtualinvoke $r4.<java.util.ArrayList: boolean add(java.lang.Object)>($r5);

        return;
    }

    public static synchronized void unregisterAuthScheme(java.lang.String)
    {
        java.util.HashMap $r1;
        java.lang.String r0, $r2, $r4;
        java.lang.IllegalArgumentException $r5;
        java.util.ArrayList $r3;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Id may not be null");

        throw $r5;

     label1:
        $r1 = <org.apache.commons.httpclient.auth.AuthPolicy: java.util.HashMap SCHEMES>;

        $r2 = virtualinvoke r0.<java.lang.String: java.lang.String toLowerCase()>();

        virtualinvoke $r1.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>($r2);

        $r3 = <org.apache.commons.httpclient.auth.AuthPolicy: java.util.ArrayList SCHEME_LIST>;

        $r4 = virtualinvoke r0.<java.lang.String: java.lang.String toLowerCase()>();

        virtualinvoke $r3.<java.util.ArrayList: boolean remove(java.lang.Object)>($r4);

        return;
    }

    public static synchronized org.apache.commons.httpclient.auth.AuthScheme getAuthScheme(java.lang.String) throws java.lang.IllegalStateException
    {
        java.lang.IllegalStateException $r5, $r19;
        java.util.HashMap $r1;
        java.lang.StringBuffer $r6, $r7, $r8, $r14, $r16, $r17, $r20, $r21, $r22, $r24, $r25;
        java.lang.String r0, $r2, $r9, $r18, $r23, $r26;
        org.apache.commons.httpclient.auth.AuthScheme $r11;
        java.lang.IllegalArgumentException $r12;
        java.lang.Exception $r13;
        java.lang.Object $r3, $r10;
        java.lang.Class r4;
        org.apache.commons.logging.Log $r15;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        $r12 = new java.lang.IllegalArgumentException;

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Id may not be null");

        throw $r12;

     label1:
        $r1 = <org.apache.commons.httpclient.auth.AuthPolicy: java.util.HashMap SCHEMES>;

        $r2 = virtualinvoke r0.<java.lang.String: java.lang.String toLowerCase()>();

        $r3 = virtualinvoke $r1.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r2);

        r4 = (java.lang.Class) $r3;

        if r4 == null goto label5;

     label2:
        $r10 = virtualinvoke r4.<java.lang.Class: java.lang.Object newInstance()>();

        $r11 = (org.apache.commons.httpclient.auth.AuthScheme) $r10;

     label3:
        return $r11;

     label4:
        $r13 := @caughtexception;

        $r15 = <org.apache.commons.httpclient.auth.AuthPolicy: org.apache.commons.logging.Log LOG>;

        $r14 = new java.lang.StringBuffer;

        specialinvoke $r14.<java.lang.StringBuffer: void <init>()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Error initializing authentication scheme: ");

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r0);

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r15.<org.apache.commons.logging.Log: void error(java.lang.Object,java.lang.Throwable)>($r18, $r13);

        $r19 = new java.lang.IllegalStateException;

        $r20 = new java.lang.StringBuffer;

        specialinvoke $r20.<java.lang.StringBuffer: void <init>()>();

        $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r0);

        $r22 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" authentication scheme implemented by ");

        $r23 = virtualinvoke r4.<java.lang.Class: java.lang.String getName()>();

        $r24 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r23);

        $r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" could not be initialized");

        $r26 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r19.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r26);

        throw $r19;

     label5:
        $r5 = new java.lang.IllegalStateException;

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Unsupported authentication scheme ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r9);

        throw $r5;

        catch java.lang.Exception from label2 to label3 with label4;
    }

    public static synchronized java.util.List getDefaultAuthPrefs()
    {
        java.lang.Object $r1;
        java.util.List $r2;
        java.util.ArrayList $r0;

        $r0 = <org.apache.commons.httpclient.auth.AuthPolicy: java.util.ArrayList SCHEME_LIST>;

        $r1 = virtualinvoke $r0.<java.util.ArrayList: java.lang.Object clone()>();

        $r2 = (java.util.List) $r1;

        return $r2;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0, $r4;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        $r4 = virtualinvoke $r2.<java.lang.ClassNotFoundException: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r4);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        java.util.HashMap $r0;
        java.util.ArrayList $r1;
        java.lang.Class $r2, $r3, $r4, $r5, $r7, $r8, $r9, $r10;
        org.apache.commons.logging.Log $r6;

        <org.apache.commons.httpclient.auth.AuthPolicy: java.lang.String BASIC> = "Basic";

        <org.apache.commons.httpclient.auth.AuthPolicy: java.lang.String DIGEST> = "Digest";

        <org.apache.commons.httpclient.auth.AuthPolicy: java.lang.String NTLM> = "NTLM";

        <org.apache.commons.httpclient.auth.AuthPolicy: java.lang.String AUTH_SCHEME_PRIORITY> = "http.auth.scheme-priority";

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        <org.apache.commons.httpclient.auth.AuthPolicy: java.util.HashMap SCHEMES> = $r0;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        <org.apache.commons.httpclient.auth.AuthPolicy: java.util.ArrayList SCHEME_LIST> = $r1;

        $r2 = <org.apache.commons.httpclient.auth.AuthPolicy: java.lang.Class class$org$apache$commons$httpclient$auth$NTLMScheme>;

        if $r2 != null goto label1;

        $r7 = staticinvoke <org.apache.commons.httpclient.auth.AuthPolicy: java.lang.Class class$(java.lang.String)>("org.apache.commons.httpclient.auth.NTLMScheme");

        <org.apache.commons.httpclient.auth.AuthPolicy: java.lang.Class class$org$apache$commons$httpclient$auth$NTLMScheme> = $r7;

        goto label2;

     label1:
        $r7 = <org.apache.commons.httpclient.auth.AuthPolicy: java.lang.Class class$org$apache$commons$httpclient$auth$NTLMScheme>;

     label2:
        staticinvoke <org.apache.commons.httpclient.auth.AuthPolicy: void registerAuthScheme(java.lang.String,java.lang.Class)>("NTLM", $r7);

        $r3 = <org.apache.commons.httpclient.auth.AuthPolicy: java.lang.Class class$org$apache$commons$httpclient$auth$DigestScheme>;

        if $r3 != null goto label3;

        $r8 = staticinvoke <org.apache.commons.httpclient.auth.AuthPolicy: java.lang.Class class$(java.lang.String)>("org.apache.commons.httpclient.auth.DigestScheme");

        <org.apache.commons.httpclient.auth.AuthPolicy: java.lang.Class class$org$apache$commons$httpclient$auth$DigestScheme> = $r8;

        goto label4;

     label3:
        $r8 = <org.apache.commons.httpclient.auth.AuthPolicy: java.lang.Class class$org$apache$commons$httpclient$auth$DigestScheme>;

     label4:
        staticinvoke <org.apache.commons.httpclient.auth.AuthPolicy: void registerAuthScheme(java.lang.String,java.lang.Class)>("Digest", $r8);

        $r4 = <org.apache.commons.httpclient.auth.AuthPolicy: java.lang.Class class$org$apache$commons$httpclient$auth$BasicScheme>;

        if $r4 != null goto label5;

        $r9 = staticinvoke <org.apache.commons.httpclient.auth.AuthPolicy: java.lang.Class class$(java.lang.String)>("org.apache.commons.httpclient.auth.BasicScheme");

        <org.apache.commons.httpclient.auth.AuthPolicy: java.lang.Class class$org$apache$commons$httpclient$auth$BasicScheme> = $r9;

        goto label6;

     label5:
        $r9 = <org.apache.commons.httpclient.auth.AuthPolicy: java.lang.Class class$org$apache$commons$httpclient$auth$BasicScheme>;

     label6:
        staticinvoke <org.apache.commons.httpclient.auth.AuthPolicy: void registerAuthScheme(java.lang.String,java.lang.Class)>("Basic", $r9);

        $r5 = <org.apache.commons.httpclient.auth.AuthPolicy: java.lang.Class class$org$apache$commons$httpclient$auth$AuthPolicy>;

        if $r5 != null goto label7;

        $r10 = staticinvoke <org.apache.commons.httpclient.auth.AuthPolicy: java.lang.Class class$(java.lang.String)>("org.apache.commons.httpclient.auth.AuthPolicy");

        <org.apache.commons.httpclient.auth.AuthPolicy: java.lang.Class class$org$apache$commons$httpclient$auth$AuthPolicy> = $r10;

        goto label8;

     label7:
        $r10 = <org.apache.commons.httpclient.auth.AuthPolicy: java.lang.Class class$org$apache$commons$httpclient$auth$AuthPolicy>;

     label8:
        $r6 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>($r10);

        <org.apache.commons.httpclient.auth.AuthPolicy: org.apache.commons.logging.Log LOG> = $r6;

        return;
    }
}
