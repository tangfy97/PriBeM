public class com.hp.hpl.jena.sparql.util.ModelUtils extends java.lang.Object
{

    public void <init>()
    {
        com.hp.hpl.jena.sparql.util.ModelUtils r0;

        r0 := @this: com.hp.hpl.jena.sparql.util.ModelUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static com.hp.hpl.jena.rdf.model.RDFNode convertGraphNodeToRDFNode(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.rdf.model.Model)
    {
        com.hp.hpl.jena.query.QueryException $r10;
        com.hp.hpl.jena.rdf.model.impl.ResourceImpl $r2;
        com.hp.hpl.jena.graph.Node r0;
        java.lang.String $r7, $r14;
        boolean $z0, $z1, $z2, $z3;
        com.hp.hpl.jena.rdf.model.RDFNode $r9;
        com.hp.hpl.jena.sparql.ARQInternalErrorException $r3;
        com.hp.hpl.jena.rdf.model.Model r1;
        com.hp.hpl.jena.rdf.model.impl.LiteralImpl $r8;
        java.lang.StringBuilder $r4, $r5, $r6, $r11, $r12, $r13;

        r0 := @parameter0: com.hp.hpl.jena.graph.Node;

        r1 := @parameter1: com.hp.hpl.jena.rdf.model.Model;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: boolean isVariable()>();

        if $z0 == 0 goto label1;

        $r10 = new com.hp.hpl.jena.query.QueryException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Variable: ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<com.hp.hpl.jena.query.QueryException: void <init>(java.lang.String)>($r14);

        throw $r10;

     label1:
        if r1 == null goto label2;

        $r9 = interfaceinvoke r1.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.rdf.model.RDFNode asRDFNode(com.hp.hpl.jena.graph.Node)>(r0);

        return $r9;

     label2:
        $z1 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: boolean isLiteral()>();

        if $z1 == 0 goto label3;

        $r8 = new com.hp.hpl.jena.rdf.model.impl.LiteralImpl;

        specialinvoke $r8.<com.hp.hpl.jena.rdf.model.impl.LiteralImpl: void <init>(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.rdf.model.impl.ModelCom)>(r0, null);

        return $r8;

     label3:
        $z2 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: boolean isURI()>();

        if $z2 != 0 goto label4;

        $z3 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: boolean isBlank()>();

        if $z3 == 0 goto label5;

     label4:
        $r2 = new com.hp.hpl.jena.rdf.model.impl.ResourceImpl;

        specialinvoke $r2.<com.hp.hpl.jena.rdf.model.impl.ResourceImpl: void <init>(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.rdf.model.impl.ModelCom)>(r0, null);

        return $r2;

     label5:
        $r3 = new com.hp.hpl.jena.sparql.ARQInternalErrorException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown node type for node: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<com.hp.hpl.jena.sparql.ARQInternalErrorException: void <init>(java.lang.String)>($r7);

        throw $r3;
    }

    public static com.hp.hpl.jena.rdf.model.Statement tripleToStatement(com.hp.hpl.jena.rdf.model.Model, com.hp.hpl.jena.graph.Triple)
    {
        com.hp.hpl.jena.graph.Node $r2, $r3, $r4;
        com.hp.hpl.jena.rdf.model.Statement $r5;
        com.hp.hpl.jena.graph.Triple r1;
        com.hp.hpl.jena.sparql.ARQInternalErrorException $r6;
        com.hp.hpl.jena.rdf.model.Model r0;
        boolean $z0;

        r0 := @parameter0: com.hp.hpl.jena.rdf.model.Model;

        r1 := @parameter1: com.hp.hpl.jena.graph.Triple;

        if r0 != null goto label1;

        $r6 = new com.hp.hpl.jena.sparql.ARQInternalErrorException;

        specialinvoke $r6.<com.hp.hpl.jena.sparql.ARQInternalErrorException: void <init>(java.lang.String)>("Attempt to create statement with null model");

        throw $r6;

     label1:
        $r2 = virtualinvoke r1.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getSubject()>();

        $r3 = virtualinvoke r1.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getPredicate()>();

        $r4 = virtualinvoke r1.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getObject()>();

        $z0 = staticinvoke <com.hp.hpl.jena.sparql.util.ModelUtils: boolean isValidAsStatement(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r2, $r3, $r4);

        if $z0 != 0 goto label2;

        return null;

     label2:
        $r5 = interfaceinvoke r0.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.rdf.model.Statement asStatement(com.hp.hpl.jena.graph.Triple)>(r1);

        return $r5;
    }

    public static boolean isValidAsStatement(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.graph.Node r0, r1, r2;
        boolean $z0, $z1, $z2, $z3;

        r0 := @parameter0: com.hp.hpl.jena.graph.Node;

        r1 := @parameter1: com.hp.hpl.jena.graph.Node;

        r2 := @parameter2: com.hp.hpl.jena.graph.Node;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: boolean isLiteral()>();

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: boolean isVariable()>();

        if $z1 == 0 goto label2;

     label1:
        return 0;

     label2:
        $z2 = virtualinvoke r1.<com.hp.hpl.jena.graph.Node: boolean isURI()>();

        if $z2 != 0 goto label3;

        return 0;

     label3:
        $z3 = virtualinvoke r2.<com.hp.hpl.jena.graph.Node: boolean isVariable()>();

        if $z3 == 0 goto label4;

        return 0;

     label4:
        return 1;
    }

    public static com.hp.hpl.jena.rdf.model.StmtIterator triplesToStatements(java.util.Iterator, com.hp.hpl.jena.rdf.model.Model)
    {
        java.util.Iterator r1, $r4;
        com.hp.hpl.jena.sparql.util.ModelUtils$1 $r2;
        com.hp.hpl.jena.rdf.model.Model r3;
        com.hp.hpl.jena.sparql.util.ModelUtils$2 $r0;

        r1 := @parameter0: java.util.Iterator;

        r3 := @parameter1: com.hp.hpl.jena.rdf.model.Model;

        $r0 = new com.hp.hpl.jena.sparql.util.ModelUtils$2;

        $r2 = new com.hp.hpl.jena.sparql.util.ModelUtils$1;

        specialinvoke $r2.<com.hp.hpl.jena.sparql.util.ModelUtils$1: void <init>(com.hp.hpl.jena.rdf.model.Model)>(r3);

        $r4 = staticinvoke <org.apache.jena.atlas.iterator.Iter: java.util.Iterator map(java.util.Iterator,org.apache.jena.atlas.iterator.Transform)>(r1, $r2);

        specialinvoke $r0.<com.hp.hpl.jena.sparql.util.ModelUtils$2: void <init>(java.util.Iterator,java.util.Iterator)>($r4, r1);

        return $r0;
    }

    public static java.util.Iterator statementsToTriples(java.util.Iterator)
    {
        org.apache.jena.atlas.iterator.IteratorResourceClosing $r0;
        java.util.Iterator r1, $r3;
        com.hp.hpl.jena.sparql.util.ModelUtils$3 $r2;
        com.hp.hpl.jena.sparql.util.ModelUtils$4 $r4;

        r1 := @parameter0: java.util.Iterator;

        $r0 = new org.apache.jena.atlas.iterator.IteratorResourceClosing;

        $r2 = new com.hp.hpl.jena.sparql.util.ModelUtils$3;

        specialinvoke $r2.<com.hp.hpl.jena.sparql.util.ModelUtils$3: void <init>()>();

        $r3 = staticinvoke <org.apache.jena.atlas.iterator.Iter: java.util.Iterator map(java.util.Iterator,org.apache.jena.atlas.iterator.Transform)>(r1, $r2);

        $r4 = new com.hp.hpl.jena.sparql.util.ModelUtils$4;

        specialinvoke $r4.<com.hp.hpl.jena.sparql.util.ModelUtils$4: void <init>(java.util.Iterator)>(r1);

        specialinvoke $r0.<org.apache.jena.atlas.iterator.IteratorResourceClosing: void <init>(java.util.Iterator,org.apache.jena.atlas.lib.Closeable)>($r3, $r4);

        return $r0;
    }
}
