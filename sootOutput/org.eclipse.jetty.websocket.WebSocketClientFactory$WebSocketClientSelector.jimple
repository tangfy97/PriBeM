class org.eclipse.jetty.websocket.WebSocketClientFactory$WebSocketClientSelector extends org.eclipse.jetty.io.nio.SelectorManager
{
    final org.eclipse.jetty.websocket.WebSocketClientFactory this$0;

    void <init>(org.eclipse.jetty.websocket.WebSocketClientFactory)
    {
        org.eclipse.jetty.websocket.WebSocketClientFactory$WebSocketClientSelector r0;
        org.eclipse.jetty.websocket.WebSocketClientFactory r1;

        r0 := @this: org.eclipse.jetty.websocket.WebSocketClientFactory$WebSocketClientSelector;

        r1 := @parameter0: org.eclipse.jetty.websocket.WebSocketClientFactory;

        r0.<org.eclipse.jetty.websocket.WebSocketClientFactory$WebSocketClientSelector: org.eclipse.jetty.websocket.WebSocketClientFactory this$0> = r1;

        specialinvoke r0.<org.eclipse.jetty.io.nio.SelectorManager: void <init>()>();

        return;
    }

    public boolean dispatch(java.lang.Runnable)
    {
        org.eclipse.jetty.websocket.WebSocketClientFactory$WebSocketClientSelector r0;
        org.eclipse.jetty.websocket.WebSocketClientFactory $r1;
        java.lang.Runnable r3;
        org.eclipse.jetty.util.thread.ThreadPool $r2;
        boolean $z0;

        r0 := @this: org.eclipse.jetty.websocket.WebSocketClientFactory$WebSocketClientSelector;

        r3 := @parameter0: java.lang.Runnable;

        $r1 = r0.<org.eclipse.jetty.websocket.WebSocketClientFactory$WebSocketClientSelector: org.eclipse.jetty.websocket.WebSocketClientFactory this$0>;

        $r2 = staticinvoke <org.eclipse.jetty.websocket.WebSocketClientFactory: org.eclipse.jetty.util.thread.ThreadPool access$000(org.eclipse.jetty.websocket.WebSocketClientFactory)>($r1);

        $z0 = interfaceinvoke $r2.<org.eclipse.jetty.util.thread.ThreadPool: boolean dispatch(java.lang.Runnable)>(r3);

        return $z0;
    }

    protected org.eclipse.jetty.io.nio.SelectChannelEndPoint newEndPoint(java.nio.channels.SocketChannel, org.eclipse.jetty.io.nio.SelectorManager$SelectSet, java.nio.channels.SelectionKey) throws java.io.IOException
    {
        long $l1;
        javax.net.ssl.SSLEngine $r13;
        org.eclipse.jetty.io.nio.SelectorManager $r9;
        java.nio.channels.SocketChannel r4;
        org.eclipse.jetty.io.nio.SslConnection $r14;
        int $i0, i2;
        java.lang.String $r6, $r8;
        java.net.URI $r7;
        org.eclipse.jetty.websocket.WebSocketClientFactory$WebSocketClientSelector r11;
        boolean $z0;
        org.eclipse.jetty.websocket.WebSocketClient$WebSocketFuture r2;
        java.nio.channels.SelectionKey r0;
        org.eclipse.jetty.io.nio.SelectChannelEndPoint $r3;
        org.eclipse.jetty.io.nio.AsyncConnection $r10;
        org.eclipse.jetty.websocket.WebSocketClientFactory $r12;
        org.eclipse.jetty.io.nio.SelectorManager$SelectSet r5;
        org.eclipse.jetty.io.AsyncEndPoint r15;
        java.lang.Object $r1;

        r11 := @this: org.eclipse.jetty.websocket.WebSocketClientFactory$WebSocketClientSelector;

        r4 := @parameter0: java.nio.channels.SocketChannel;

        r5 := @parameter1: org.eclipse.jetty.io.nio.SelectorManager$SelectSet;

        r0 := @parameter2: java.nio.channels.SelectionKey;

        $r1 = virtualinvoke r0.<java.nio.channels.SelectionKey: java.lang.Object attachment()>();

        r2 = (org.eclipse.jetty.websocket.WebSocketClient$WebSocketFuture) $r1;

        $i0 = virtualinvoke r2.<org.eclipse.jetty.websocket.WebSocketClient$WebSocketFuture: int getMaxIdleTime()>();

        i2 = $i0;

        if $i0 >= 0 goto label1;

        $l1 = virtualinvoke r11.<org.eclipse.jetty.websocket.WebSocketClientFactory$WebSocketClientSelector: long getMaxIdleTime()>();

        i2 = (int) $l1;

     label1:
        $r3 = new org.eclipse.jetty.io.nio.SelectChannelEndPoint;

        specialinvoke $r3.<org.eclipse.jetty.io.nio.SelectChannelEndPoint: void <init>(java.nio.channels.SocketChannel,org.eclipse.jetty.io.nio.SelectorManager$SelectSet,java.nio.channels.SelectionKey,int)>(r4, r5, r0, i2);

        r15 = $r3;

        $r6 = "wss";

        $r7 = virtualinvoke r2.<org.eclipse.jetty.websocket.WebSocketClient$WebSocketFuture: java.net.URI getURI()>();

        $r8 = virtualinvoke $r7.<java.net.URI: java.lang.String getScheme()>();

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r8);

        if $z0 == 0 goto label2;

        $r12 = r11.<org.eclipse.jetty.websocket.WebSocketClientFactory$WebSocketClientSelector: org.eclipse.jetty.websocket.WebSocketClientFactory this$0>;

        $r13 = virtualinvoke $r12.<org.eclipse.jetty.websocket.WebSocketClientFactory: javax.net.ssl.SSLEngine newSslEngine(java.nio.channels.SocketChannel)>(r4);

        $r14 = new org.eclipse.jetty.io.nio.SslConnection;

        specialinvoke $r14.<org.eclipse.jetty.io.nio.SslConnection: void <init>(javax.net.ssl.SSLEngine,org.eclipse.jetty.io.EndPoint)>($r13, $r3);

        interfaceinvoke $r3.<org.eclipse.jetty.io.AsyncEndPoint: void setConnection(org.eclipse.jetty.io.Connection)>($r14);

        r15 = virtualinvoke $r14.<org.eclipse.jetty.io.nio.SslConnection: org.eclipse.jetty.io.AsyncEndPoint getSslEndPoint()>();

     label2:
        $r9 = virtualinvoke r5.<org.eclipse.jetty.io.nio.SelectorManager$SelectSet: org.eclipse.jetty.io.nio.SelectorManager getManager()>();

        $r10 = virtualinvoke $r9.<org.eclipse.jetty.io.nio.SelectorManager: org.eclipse.jetty.io.nio.AsyncConnection newConnection(java.nio.channels.SocketChannel,org.eclipse.jetty.io.AsyncEndPoint,java.lang.Object)>(r4, r15, r2);

        interfaceinvoke r15.<org.eclipse.jetty.io.AsyncEndPoint: void setConnection(org.eclipse.jetty.io.Connection)>($r10);

        return $r3;
    }

    public org.eclipse.jetty.io.nio.AsyncConnection newConnection(java.nio.channels.SocketChannel, org.eclipse.jetty.io.AsyncEndPoint, java.lang.Object)
    {
        java.nio.channels.SocketChannel r6;
        org.eclipse.jetty.websocket.WebSocketClient$WebSocketFuture r1;
        org.eclipse.jetty.io.AsyncEndPoint r4;
        java.lang.Object r0;
        org.eclipse.jetty.websocket.WebSocketClientFactory$HandshakeConnection $r2;
        org.eclipse.jetty.websocket.WebSocketClientFactory$WebSocketClientSelector r3;
        org.eclipse.jetty.websocket.WebSocketClientFactory $r5;

        r3 := @this: org.eclipse.jetty.websocket.WebSocketClientFactory$WebSocketClientSelector;

        r6 := @parameter0: java.nio.channels.SocketChannel;

        r4 := @parameter1: org.eclipse.jetty.io.AsyncEndPoint;

        r0 := @parameter2: java.lang.Object;

        r1 = (org.eclipse.jetty.websocket.WebSocketClient$WebSocketFuture) r0;

        $r2 = new org.eclipse.jetty.websocket.WebSocketClientFactory$HandshakeConnection;

        $r5 = r3.<org.eclipse.jetty.websocket.WebSocketClientFactory$WebSocketClientSelector: org.eclipse.jetty.websocket.WebSocketClientFactory this$0>;

        specialinvoke $r2.<org.eclipse.jetty.websocket.WebSocketClientFactory$HandshakeConnection: void <init>(org.eclipse.jetty.websocket.WebSocketClientFactory,org.eclipse.jetty.io.AsyncEndPoint,org.eclipse.jetty.websocket.WebSocketClient$WebSocketFuture)>($r5, r4, r1);

        return $r2;
    }

    protected void endPointOpened(org.eclipse.jetty.io.nio.SelectChannelEndPoint)
    {
        org.eclipse.jetty.io.nio.SelectChannelEndPoint r1;
        org.eclipse.jetty.websocket.WebSocketClientFactory$WebSocketClientSelector r0;

        r0 := @this: org.eclipse.jetty.websocket.WebSocketClientFactory$WebSocketClientSelector;

        r1 := @parameter0: org.eclipse.jetty.io.nio.SelectChannelEndPoint;

        return;
    }

    protected void endPointUpgraded(org.eclipse.jetty.io.ConnectedEndPoint, org.eclipse.jetty.io.Connection)
    {
        org.eclipse.jetty.io.ConnectedEndPoint r2;
        java.lang.Object[] $r0;
        org.eclipse.jetty.io.Connection r1, $r4;
        org.eclipse.jetty.util.log.Logger $r3;
        org.eclipse.jetty.websocket.WebSocketClientFactory$WebSocketClientSelector r5;

        r5 := @this: org.eclipse.jetty.websocket.WebSocketClientFactory$WebSocketClientSelector;

        r2 := @parameter0: org.eclipse.jetty.io.ConnectedEndPoint;

        r1 := @parameter1: org.eclipse.jetty.io.Connection;

        $r3 = <org.eclipse.jetty.websocket.WebSocketClientFactory$WebSocketClientSelector: org.eclipse.jetty.util.log.Logger LOG>;

        $r0 = newarray (java.lang.Object)[2];

        $r0[0] = r1;

        $r4 = interfaceinvoke r2.<org.eclipse.jetty.io.ConnectedEndPoint: org.eclipse.jetty.io.Connection getConnection()>();

        $r0[1] = $r4;

        interfaceinvoke $r3.<org.eclipse.jetty.util.log.Logger: void debug(java.lang.String,java.lang.Object[])>("upgrade {} -> {}", $r0);

        return;
    }

    protected void endPointClosed(org.eclipse.jetty.io.nio.SelectChannelEndPoint)
    {
        org.eclipse.jetty.io.nio.SelectChannelEndPoint r0;
        org.eclipse.jetty.websocket.WebSocketClientFactory$WebSocketClientSelector r2;
        org.eclipse.jetty.io.Connection $r1;

        r2 := @this: org.eclipse.jetty.websocket.WebSocketClientFactory$WebSocketClientSelector;

        r0 := @parameter0: org.eclipse.jetty.io.nio.SelectChannelEndPoint;

        $r1 = virtualinvoke r0.<org.eclipse.jetty.io.nio.SelectChannelEndPoint: org.eclipse.jetty.io.Connection getConnection()>();

        interfaceinvoke $r1.<org.eclipse.jetty.io.Connection: void onClose()>();

        return;
    }

    protected void connectionFailed(java.nio.channels.SocketChannel, java.lang.Throwable, java.lang.Object)
    {
        java.lang.Throwable r2;
        java.nio.channels.SocketChannel r5;
        org.eclipse.jetty.websocket.WebSocketClient$WebSocketFuture r3;
        java.lang.Object r0;
        org.eclipse.jetty.util.log.Logger $r1;
        org.eclipse.jetty.websocket.WebSocketClientFactory$WebSocketClientSelector r4;
        boolean $z0;

        r4 := @this: org.eclipse.jetty.websocket.WebSocketClientFactory$WebSocketClientSelector;

        r5 := @parameter0: java.nio.channels.SocketChannel;

        r2 := @parameter1: java.lang.Throwable;

        r0 := @parameter2: java.lang.Object;

        $z0 = r0 instanceof org.eclipse.jetty.websocket.WebSocketClient$WebSocketFuture;

        if $z0 != 0 goto label1;

        specialinvoke r4.<org.eclipse.jetty.io.nio.SelectorManager: void connectionFailed(java.nio.channels.SocketChannel,java.lang.Throwable,java.lang.Object)>(r5, r2, r0);

        goto label2;

     label1:
        $r1 = staticinvoke <org.eclipse.jetty.websocket.WebSocketClientFactory: org.eclipse.jetty.util.log.Logger access$100()>();

        interfaceinvoke $r1.<org.eclipse.jetty.util.log.Logger: void debug(java.lang.Throwable)>(r2);

        r3 = (org.eclipse.jetty.websocket.WebSocketClient$WebSocketFuture) r0;

        virtualinvoke r3.<org.eclipse.jetty.websocket.WebSocketClient$WebSocketFuture: void handshakeFailed(java.lang.Throwable)>(r2);

     label2:
        return;
    }
}
