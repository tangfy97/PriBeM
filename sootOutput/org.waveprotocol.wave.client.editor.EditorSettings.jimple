public class org.waveprotocol.wave.client.editor.EditorSettings extends java.lang.Object
{
    public static final org.waveprotocol.wave.client.editor.EditorSettings DEFAULT;
    private boolean hasDebugDialog;
    private boolean undoEnabled;
    private boolean useFancyCursorBias;
    private org.waveprotocol.wave.client.editor.EditorInstrumentor instrumentor;
    private boolean useSemanticCopyPaste;
    private boolean useWhitelistInEditor;
    private boolean useWebkitCompositionEvents;
    private int closeSuggestionsMenuDelayMs;
    static final boolean $assertionsDisabled;

    public void <init>()
    {
        org.waveprotocol.wave.client.editor.EditorSettings r0;
        org.waveprotocol.wave.client.editor.EditorInstrumentor $r1;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorSettings;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.waveprotocol.wave.client.editor.EditorSettings: boolean hasDebugDialog> = 1;

        r0.<org.waveprotocol.wave.client.editor.EditorSettings: boolean undoEnabled> = 1;

        r0.<org.waveprotocol.wave.client.editor.EditorSettings: boolean useFancyCursorBias> = 1;

        $r1 = <org.waveprotocol.wave.client.editor.EditorInstrumentor: org.waveprotocol.wave.client.editor.EditorInstrumentor NOOP>;

        r0.<org.waveprotocol.wave.client.editor.EditorSettings: org.waveprotocol.wave.client.editor.EditorInstrumentor instrumentor> = $r1;

        r0.<org.waveprotocol.wave.client.editor.EditorSettings: boolean useSemanticCopyPaste> = 1;

        r0.<org.waveprotocol.wave.client.editor.EditorSettings: boolean useWhitelistInEditor> = 0;

        r0.<org.waveprotocol.wave.client.editor.EditorSettings: boolean useWebkitCompositionEvents> = 1;

        r0.<org.waveprotocol.wave.client.editor.EditorSettings: int closeSuggestionsMenuDelayMs> = 500;

        return;
    }

    public boolean hasDebugDialog()
    {
        org.waveprotocol.wave.client.editor.EditorSettings r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorSettings;

        $z0 = r0.<org.waveprotocol.wave.client.editor.EditorSettings: boolean hasDebugDialog>;

        return $z0;
    }

    public boolean undoEnabled()
    {
        org.waveprotocol.wave.client.editor.EditorSettings r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorSettings;

        $z0 = r0.<org.waveprotocol.wave.client.editor.EditorSettings: boolean undoEnabled>;

        return $z0;
    }

    public boolean useFancyCursorBias()
    {
        org.waveprotocol.wave.client.editor.EditorSettings r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorSettings;

        $z0 = r0.<org.waveprotocol.wave.client.editor.EditorSettings: boolean useFancyCursorBias>;

        return $z0;
    }

    public org.waveprotocol.wave.client.editor.EditorInstrumentor getInstrumentor()
    {
        org.waveprotocol.wave.client.editor.EditorSettings r0;
        org.waveprotocol.wave.client.editor.EditorInstrumentor $r1;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorSettings;

        $r1 = r0.<org.waveprotocol.wave.client.editor.EditorSettings: org.waveprotocol.wave.client.editor.EditorInstrumentor instrumentor>;

        return $r1;
    }

    public boolean useSemanticCopyPaste()
    {
        org.waveprotocol.wave.client.editor.EditorSettings r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorSettings;

        $z0 = r0.<org.waveprotocol.wave.client.editor.EditorSettings: boolean useSemanticCopyPaste>;

        return $z0;
    }

    public boolean useWhitelistInEditor()
    {
        org.waveprotocol.wave.client.editor.EditorSettings r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorSettings;

        $z0 = r0.<org.waveprotocol.wave.client.editor.EditorSettings: boolean useWhitelistInEditor>;

        return $z0;
    }

    public boolean useWebkitCompositionEvents()
    {
        org.waveprotocol.wave.client.editor.EditorSettings r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorSettings;

        $z0 = r0.<org.waveprotocol.wave.client.editor.EditorSettings: boolean useWebkitCompositionEvents>;

        return $z0;
    }

    public int closeSuggestionsMenuDelayMs()
    {
        int $i0;
        org.waveprotocol.wave.client.editor.EditorSettings r0;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorSettings;

        $i0 = r0.<org.waveprotocol.wave.client.editor.EditorSettings: int closeSuggestionsMenuDelayMs>;

        return $i0;
    }

    public org.waveprotocol.wave.client.editor.EditorSettings setHasDebugDialog(boolean)
    {
        org.waveprotocol.wave.client.editor.EditorSettings r0;
        boolean z0;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorSettings;

        z0 := @parameter0: boolean;

        r0.<org.waveprotocol.wave.client.editor.EditorSettings: boolean hasDebugDialog> = z0;

        return r0;
    }

    public org.waveprotocol.wave.client.editor.EditorSettings setUndoEnabled(boolean)
    {
        org.waveprotocol.wave.client.editor.EditorSettings r0;
        boolean z0;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorSettings;

        z0 := @parameter0: boolean;

        r0.<org.waveprotocol.wave.client.editor.EditorSettings: boolean undoEnabled> = z0;

        return r0;
    }

    public org.waveprotocol.wave.client.editor.EditorSettings setUseFancyCursorBias(boolean)
    {
        org.waveprotocol.wave.client.editor.EditorSettings r0;
        boolean z0;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorSettings;

        z0 := @parameter0: boolean;

        r0.<org.waveprotocol.wave.client.editor.EditorSettings: boolean useFancyCursorBias> = z0;

        return r0;
    }

    public org.waveprotocol.wave.client.editor.EditorSettings setInstrumentor(org.waveprotocol.wave.client.editor.EditorInstrumentor)
    {
        org.waveprotocol.wave.client.editor.EditorSettings r0;
        org.waveprotocol.wave.client.editor.EditorInstrumentor r1;
        java.lang.AssertionError $r2;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorSettings;

        r1 := @parameter0: org.waveprotocol.wave.client.editor.EditorInstrumentor;

        $z0 = <org.waveprotocol.wave.client.editor.EditorSettings: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if r1 != null goto label1;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>(java.lang.Object)>("Can\'t have a null instrumentor, use EditorInstrumentor.NOOP");

        throw $r2;

     label1:
        r0.<org.waveprotocol.wave.client.editor.EditorSettings: org.waveprotocol.wave.client.editor.EditorInstrumentor instrumentor> = r1;

        return r0;
    }

    public org.waveprotocol.wave.client.editor.EditorSettings setUseSemanticCopyPaste(boolean)
    {
        org.waveprotocol.wave.client.editor.EditorSettings r0;
        boolean z0;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorSettings;

        z0 := @parameter0: boolean;

        r0.<org.waveprotocol.wave.client.editor.EditorSettings: boolean useSemanticCopyPaste> = z0;

        return r0;
    }

    public org.waveprotocol.wave.client.editor.EditorSettings setUseWhitelistInEditor(boolean)
    {
        org.waveprotocol.wave.client.editor.EditorSettings r0;
        boolean z0;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorSettings;

        z0 := @parameter0: boolean;

        r0.<org.waveprotocol.wave.client.editor.EditorSettings: boolean useWhitelistInEditor> = z0;

        return r0;
    }

    public org.waveprotocol.wave.client.editor.EditorSettings setUseWebkitCompositionEvents(boolean)
    {
        org.waveprotocol.wave.client.editor.EditorSettings r0;
        boolean z0;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorSettings;

        z0 := @parameter0: boolean;

        r0.<org.waveprotocol.wave.client.editor.EditorSettings: boolean useWebkitCompositionEvents> = z0;

        return r0;
    }

    public org.waveprotocol.wave.client.editor.EditorSettings setCloseSuggestionsMenuDelayMs(int)
    {
        int i0;
        org.waveprotocol.wave.client.editor.EditorSettings r0;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorSettings;

        i0 := @parameter0: int;

        r0.<org.waveprotocol.wave.client.editor.EditorSettings: int closeSuggestionsMenuDelayMs> = i0;

        return r0;
    }

    static void <clinit>()
    {
        org.waveprotocol.wave.client.editor.EditorSettings$1 $r1;
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/waveprotocol/wave/client/editor/EditorSettings;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.waveprotocol.wave.client.editor.EditorSettings: boolean $assertionsDisabled> = $z1;

        $r1 = new org.waveprotocol.wave.client.editor.EditorSettings$1;

        specialinvoke $r1.<org.waveprotocol.wave.client.editor.EditorSettings$1: void <init>()>();

        <org.waveprotocol.wave.client.editor.EditorSettings: org.waveprotocol.wave.client.editor.EditorSettings DEFAULT> = $r1;

        return;
    }
}
