public final class org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate extends com.google.protobuf.GeneratedMessage
{
    private static final org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate defaultInstance;
    public static final int DELTA_FIELD_NUMBER;
    private boolean hasDelta;
    private org.waveprotocol.wave.federation.Proto$ProtocolWaveletDelta delta_;
    public static final int RESULTINGVERSION_FIELD_NUMBER;
    private boolean hasResultingVersion;
    private org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion resultingVersion_;
    public static final int APPLICATIONTIMPSTAMP_FIELD_NUMBER;
    private boolean hasApplicationTimpstamp;
    private long applicationTimpstamp_;
    private int memoizedSerializedSize;

    private void <init>()
    {
        int $i1;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate;

        specialinvoke r0.<com.google.protobuf.GeneratedMessage: void <init>()>();

        r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate: long applicationTimpstamp_> = 0L;

        $i1 = (int) -1;

        r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate: int memoizedSerializedSize> = $i1;

        specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate: void initFields()>();

        return;
    }

    private void <init>(boolean)
    {
        int $i1;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate r0;
        boolean z0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate;

        z0 := @parameter0: boolean;

        specialinvoke r0.<com.google.protobuf.GeneratedMessage: void <init>()>();

        r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate: long applicationTimpstamp_> = 0L;

        $i1 = (int) -1;

        r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate: int memoizedSerializedSize> = $i1;

        return;
    }

    public static org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate getDefaultInstance()
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate $r0;

        $r0 = <org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate: org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate defaultInstance>;

        return $r0;
    }

    public org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate getDefaultInstanceForType()
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate $r0, r1;

        r1 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate;

        $r0 = <org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate: org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate defaultInstance>;

        return $r0;
    }

    public static final com.google.protobuf.Descriptors$Descriptor getDescriptor()
    {
        com.google.protobuf.Descriptors$Descriptor $r0;

        $r0 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer: com.google.protobuf.Descriptors$Descriptor access$9800()>();

        return $r0;
    }

    protected com.google.protobuf.GeneratedMessage$FieldAccessorTable internalGetFieldAccessorTable()
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate r1;
        com.google.protobuf.GeneratedMessage$FieldAccessorTable $r0;

        r1 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate;

        $r0 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer: com.google.protobuf.GeneratedMessage$FieldAccessorTable access$9900()>();

        return $r0;
    }

    public boolean hasDelta()
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate;

        $z0 = r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate: boolean hasDelta>;

        return $z0;
    }

    public org.waveprotocol.wave.federation.Proto$ProtocolWaveletDelta getDelta()
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate r0;
        org.waveprotocol.wave.federation.Proto$ProtocolWaveletDelta $r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate: org.waveprotocol.wave.federation.Proto$ProtocolWaveletDelta delta_>;

        return $r1;
    }

    public boolean hasResultingVersion()
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate;

        $z0 = r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate: boolean hasResultingVersion>;

        return $z0;
    }

    public org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion getResultingVersion()
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate r0;
        org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion $r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate: org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion resultingVersion_>;

        return $r1;
    }

    public boolean hasApplicationTimpstamp()
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate;

        $z0 = r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate: boolean hasApplicationTimpstamp>;

        return $z0;
    }

    public long getApplicationTimpstamp()
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate r0;
        long $l0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate;

        $l0 = r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate: long applicationTimpstamp_>;

        return $l0;
    }

    private void initFields()
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate r0;
        org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion $r2;
        org.waveprotocol.wave.federation.Proto$ProtocolWaveletDelta $r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate;

        $r1 = staticinvoke <org.waveprotocol.wave.federation.Proto$ProtocolWaveletDelta: org.waveprotocol.wave.federation.Proto$ProtocolWaveletDelta getDefaultInstance()>();

        r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate: org.waveprotocol.wave.federation.Proto$ProtocolWaveletDelta delta_> = $r1;

        $r2 = staticinvoke <org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion: org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion getDefaultInstance()>();

        r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate: org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion resultingVersion_> = $r2;

        return;
    }

    public final boolean isInitialized()
    {
        org.waveprotocol.wave.federation.Proto$ProtocolWaveletDelta $r1;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate r0;
        org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion $r2;
        boolean $z0, $z1, $z2, $z3, $z4;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate;

        $z0 = r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate: boolean hasDelta>;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $z1 = r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate: boolean hasResultingVersion>;

        if $z1 != 0 goto label2;

        return 0;

     label2:
        $z2 = r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate: boolean hasApplicationTimpstamp>;

        if $z2 != 0 goto label3;

        return 0;

     label3:
        $r1 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate: org.waveprotocol.wave.federation.Proto$ProtocolWaveletDelta getDelta()>();

        $z3 = virtualinvoke $r1.<org.waveprotocol.wave.federation.Proto$ProtocolWaveletDelta: boolean isInitialized()>();

        if $z3 != 0 goto label4;

        return 0;

     label4:
        $r2 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate: org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion getResultingVersion()>();

        $z4 = virtualinvoke $r2.<org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion: boolean isInitialized()>();

        if $z4 != 0 goto label5;

        return 0;

     label5:
        return 1;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream) throws java.io.IOException
    {
        com.google.protobuf.UnknownFieldSet $r1;
        org.waveprotocol.wave.federation.Proto$ProtocolWaveletDelta $r4;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate r0;
        long $l0;
        org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion $r3;
        com.google.protobuf.CodedOutputStream r2;
        boolean $z0, $z1, $z2;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate;

        r2 := @parameter0: com.google.protobuf.CodedOutputStream;

        virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate: int getSerializedSize()>();

        $z0 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate: boolean hasDelta()>();

        if $z0 == 0 goto label1;

        $r4 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate: org.waveprotocol.wave.federation.Proto$ProtocolWaveletDelta getDelta()>();

        virtualinvoke r2.<com.google.protobuf.CodedOutputStream: void writeMessage(int,com.google.protobuf.MessageLite)>(1, $r4);

     label1:
        $z1 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate: boolean hasResultingVersion()>();

        if $z1 == 0 goto label2;

        $r3 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate: org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion getResultingVersion()>();

        virtualinvoke r2.<com.google.protobuf.CodedOutputStream: void writeMessage(int,com.google.protobuf.MessageLite)>(2, $r3);

     label2:
        $z2 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate: boolean hasApplicationTimpstamp()>();

        if $z2 == 0 goto label3;

        $l0 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate: long getApplicationTimpstamp()>();

        virtualinvoke r2.<com.google.protobuf.CodedOutputStream: void writeInt64(int,long)>(3, $l0);

     label3:
        $r1 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate: com.google.protobuf.UnknownFieldSet getUnknownFields()>();

        virtualinvoke $r1.<com.google.protobuf.UnknownFieldSet: void writeTo(com.google.protobuf.CodedOutputStream)>(r2);

        return;
    }

    public int getSerializedSize()
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate r0;
        long $l1;
        int $i0, $i2, $i3, $i4, $i5, i6, i7, $i9;
        boolean $z0, $z1, $z2;
        com.google.protobuf.UnknownFieldSet $r1;
        org.waveprotocol.wave.federation.Proto$ProtocolWaveletDelta $r3;
        org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion $r2;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate;

        i6 = r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate: int memoizedSerializedSize>;

        $i9 = (int) -1;

        if i6 == $i9 goto label1;

        return i6;

     label1:
        i7 = 0;

        $z0 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate: boolean hasDelta()>();

        if $z0 == 0 goto label2;

        $r3 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate: org.waveprotocol.wave.federation.Proto$ProtocolWaveletDelta getDelta()>();

        $i5 = staticinvoke <com.google.protobuf.CodedOutputStream: int computeMessageSize(int,com.google.protobuf.MessageLite)>(1, $r3);

        i7 = 0 + $i5;

     label2:
        $z1 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate: boolean hasResultingVersion()>();

        if $z1 == 0 goto label3;

        $r2 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate: org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion getResultingVersion()>();

        $i4 = staticinvoke <com.google.protobuf.CodedOutputStream: int computeMessageSize(int,com.google.protobuf.MessageLite)>(2, $r2);

        i7 = i7 + $i4;

     label3:
        $z2 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate: boolean hasApplicationTimpstamp()>();

        if $z2 == 0 goto label4;

        $l1 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate: long getApplicationTimpstamp()>();

        $i2 = staticinvoke <com.google.protobuf.CodedOutputStream: int computeInt64Size(int,long)>(3, $l1);

        i7 = i7 + $i2;

     label4:
        $r1 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate: com.google.protobuf.UnknownFieldSet getUnknownFields()>();

        $i0 = virtualinvoke $r1.<com.google.protobuf.UnknownFieldSet: int getSerializedSize()>();

        $i3 = i7 + $i0;

        r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate: int memoizedSerializedSize> = $i3;

        return $i3;
    }

    public static org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate parseFrom(com.google.protobuf.ByteString) throws com.google.protobuf.InvalidProtocolBufferException
    {
        com.google.protobuf.ByteString r1;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate$Builder $r0, $r3;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate $r4;
        com.google.protobuf.AbstractMessage$Builder $r2;

        r1 := @parameter0: com.google.protobuf.ByteString;

        $r0 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate: org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate$Builder newBuilder()>();

        $r2 = virtualinvoke $r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate$Builder: com.google.protobuf.AbstractMessage$Builder mergeFrom(com.google.protobuf.ByteString)>(r1);

        $r3 = (org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate$Builder) $r2;

        $r4 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate access$10000(org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate$Builder)>($r3);

        return $r4;
    }

    public static org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate parseFrom(com.google.protobuf.ByteString, com.google.protobuf.ExtensionRegistryLite) throws com.google.protobuf.InvalidProtocolBufferException
    {
        com.google.protobuf.ByteString r1;
        com.google.protobuf.ExtensionRegistryLite r2;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate$Builder $r0, $r4;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate $r5;
        com.google.protobuf.AbstractMessage$Builder $r3;

        r1 := @parameter0: com.google.protobuf.ByteString;

        r2 := @parameter1: com.google.protobuf.ExtensionRegistryLite;

        $r0 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate: org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate$Builder newBuilder()>();

        $r3 = virtualinvoke $r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate$Builder: com.google.protobuf.AbstractMessage$Builder mergeFrom(com.google.protobuf.ByteString,com.google.protobuf.ExtensionRegistryLite)>(r1, r2);

        $r4 = (org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate$Builder) $r3;

        $r5 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate access$10000(org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate$Builder)>($r4);

        return $r5;
    }

    public static org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate parseFrom(byte[]) throws com.google.protobuf.InvalidProtocolBufferException
    {
        byte[] r1;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate$Builder $r0, $r3;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate $r4;
        com.google.protobuf.AbstractMessage$Builder $r2;

        r1 := @parameter0: byte[];

        $r0 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate: org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate$Builder newBuilder()>();

        $r2 = virtualinvoke $r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate$Builder: com.google.protobuf.AbstractMessage$Builder mergeFrom(byte[])>(r1);

        $r3 = (org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate$Builder) $r2;

        $r4 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate access$10000(org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate$Builder)>($r3);

        return $r4;
    }

    public static org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate parseFrom(byte[], com.google.protobuf.ExtensionRegistryLite) throws com.google.protobuf.InvalidProtocolBufferException
    {
        byte[] r1;
        com.google.protobuf.ExtensionRegistryLite r2;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate$Builder $r0, $r4;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate $r5;
        com.google.protobuf.AbstractMessage$Builder $r3;

        r1 := @parameter0: byte[];

        r2 := @parameter1: com.google.protobuf.ExtensionRegistryLite;

        $r0 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate: org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate$Builder newBuilder()>();

        $r3 = virtualinvoke $r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate$Builder: com.google.protobuf.AbstractMessage$Builder mergeFrom(byte[],com.google.protobuf.ExtensionRegistryLite)>(r1, r2);

        $r4 = (org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate$Builder) $r3;

        $r5 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate access$10000(org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate$Builder)>($r4);

        return $r5;
    }

    public static org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate parseFrom(java.io.InputStream) throws java.io.IOException
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate$Builder $r0, $r3;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate $r4;
        com.google.protobuf.AbstractMessage$Builder $r2;
        java.io.InputStream r1;

        r1 := @parameter0: java.io.InputStream;

        $r0 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate: org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate$Builder newBuilder()>();

        $r2 = virtualinvoke $r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate$Builder: com.google.protobuf.AbstractMessage$Builder mergeFrom(java.io.InputStream)>(r1);

        $r3 = (org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate$Builder) $r2;

        $r4 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate access$10000(org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate$Builder)>($r3);

        return $r4;
    }

    public static org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate parseFrom(java.io.InputStream, com.google.protobuf.ExtensionRegistryLite) throws java.io.IOException
    {
        com.google.protobuf.ExtensionRegistryLite r2;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate$Builder $r0, $r4;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate $r5;
        com.google.protobuf.AbstractMessage$Builder $r3;
        java.io.InputStream r1;

        r1 := @parameter0: java.io.InputStream;

        r2 := @parameter1: com.google.protobuf.ExtensionRegistryLite;

        $r0 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate: org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate$Builder newBuilder()>();

        $r3 = virtualinvoke $r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate$Builder: com.google.protobuf.AbstractMessage$Builder mergeFrom(java.io.InputStream,com.google.protobuf.ExtensionRegistryLite)>(r1, r2);

        $r4 = (org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate$Builder) $r3;

        $r5 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate access$10000(org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate$Builder)>($r4);

        return $r5;
    }

    public static org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate parseDelimitedFrom(java.io.InputStream) throws java.io.IOException
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate$Builder $r0;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate $r2;
        java.io.InputStream r1;
        boolean $z0;

        r1 := @parameter0: java.io.InputStream;

        $r0 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate: org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate$Builder newBuilder()>();

        $z0 = virtualinvoke $r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate$Builder: boolean mergeDelimitedFrom(java.io.InputStream)>(r1);

        if $z0 == 0 goto label1;

        $r2 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate access$10000(org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate$Builder)>($r0);

        return $r2;

     label1:
        return null;
    }

    public static org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate parseDelimitedFrom(java.io.InputStream, com.google.protobuf.ExtensionRegistryLite) throws java.io.IOException
    {
        com.google.protobuf.ExtensionRegistryLite r2;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate$Builder $r0;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate $r3;
        java.io.InputStream r1;
        boolean $z0;

        r1 := @parameter0: java.io.InputStream;

        r2 := @parameter1: com.google.protobuf.ExtensionRegistryLite;

        $r0 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate: org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate$Builder newBuilder()>();

        $z0 = virtualinvoke $r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate$Builder: boolean mergeDelimitedFrom(java.io.InputStream,com.google.protobuf.ExtensionRegistryLite)>(r1, r2);

        if $z0 == 0 goto label1;

        $r3 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate access$10000(org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate$Builder)>($r0);

        return $r3;

     label1:
        return null;
    }

    public static org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate parseFrom(com.google.protobuf.CodedInputStream) throws java.io.IOException
    {
        com.google.protobuf.CodedInputStream r1;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate$Builder $r0, $r3;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate $r4;
        com.google.protobuf.AbstractMessage$Builder $r2;

        r1 := @parameter0: com.google.protobuf.CodedInputStream;

        $r0 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate: org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate$Builder newBuilder()>();

        $r2 = virtualinvoke $r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate$Builder: com.google.protobuf.AbstractMessage$Builder mergeFrom(com.google.protobuf.CodedInputStream)>(r1);

        $r3 = (org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate$Builder) $r2;

        $r4 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate access$10000(org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate$Builder)>($r3);

        return $r4;
    }

    public static org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate parseFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite) throws java.io.IOException
    {
        com.google.protobuf.CodedInputStream r1;
        com.google.protobuf.ExtensionRegistryLite r2;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate$Builder $r0, $r3;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate $r4;

        r1 := @parameter0: com.google.protobuf.CodedInputStream;

        r2 := @parameter1: com.google.protobuf.ExtensionRegistryLite;

        $r0 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate: org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate$Builder newBuilder()>();

        $r3 = virtualinvoke $r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate$Builder mergeFrom(com.google.protobuf.CodedInputStream,com.google.protobuf.ExtensionRegistryLite)>(r1, r2);

        $r4 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate access$10000(org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate$Builder)>($r3);

        return $r4;
    }

    public static org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate$Builder newBuilder()
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate$Builder $r0;

        $r0 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate$Builder access$10100()>();

        return $r0;
    }

    public org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate$Builder newBuilderForType()
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate$Builder $r0;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate r1;

        r1 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate;

        $r0 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate: org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate$Builder newBuilder()>();

        return $r0;
    }

    public static org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate$Builder newBuilder(org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate)
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate$Builder $r0, $r2;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate r1;

        r1 := @parameter0: org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate;

        $r0 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate: org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate$Builder newBuilder()>();

        $r2 = virtualinvoke $r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate$Builder mergeFrom(org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate)>(r1);

        return $r2;
    }

    public org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate$Builder toBuilder()
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate$Builder $r1;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate;

        $r1 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate: org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate$Builder newBuilder(org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate)>(r0);

        return $r1;
    }

    public volatile com.google.protobuf.Message$Builder toBuilder()
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate$Builder $r1;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate: org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate$Builder toBuilder()>();

        return $r1;
    }

    public volatile com.google.protobuf.Message$Builder newBuilderForType()
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate$Builder $r1;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate: org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate$Builder newBuilderForType()>();

        return $r1;
    }

    public volatile com.google.protobuf.Message getDefaultInstanceForType()
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate r0, $r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate: org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate getDefaultInstanceForType()>();

        return $r1;
    }

    public volatile com.google.protobuf.MessageLite$Builder toBuilder()
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate$Builder $r1;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate: org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate$Builder toBuilder()>();

        return $r1;
    }

    public volatile com.google.protobuf.MessageLite$Builder newBuilderForType()
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate$Builder $r1;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate: org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate$Builder newBuilderForType()>();

        return $r1;
    }

    public volatile com.google.protobuf.MessageLite getDefaultInstanceForType()
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate r0, $r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate: org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate getDefaultInstanceForType()>();

        return $r1;
    }

    void <init>(org.waveprotocol.wave.concurrencycontrol.ClientServer$1)
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate r0;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$1 r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate;

        r1 := @parameter0: org.waveprotocol.wave.concurrencycontrol.ClientServer$1;

        specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate: void <init>()>();

        return;
    }

    static boolean access$10302(org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate, boolean)
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate r0;
        boolean z0;

        r0 := @parameter0: org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate;

        z0 := @parameter1: boolean;

        r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate: boolean hasDelta> = z0;

        return z0;
    }

    static org.waveprotocol.wave.federation.Proto$ProtocolWaveletDelta access$10402(org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate, org.waveprotocol.wave.federation.Proto$ProtocolWaveletDelta)
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate r0;
        org.waveprotocol.wave.federation.Proto$ProtocolWaveletDelta r1;

        r0 := @parameter0: org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate;

        r1 := @parameter1: org.waveprotocol.wave.federation.Proto$ProtocolWaveletDelta;

        r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate: org.waveprotocol.wave.federation.Proto$ProtocolWaveletDelta delta_> = r1;

        return r1;
    }

    static org.waveprotocol.wave.federation.Proto$ProtocolWaveletDelta access$10400(org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate)
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate r0;
        org.waveprotocol.wave.federation.Proto$ProtocolWaveletDelta $r1;

        r0 := @parameter0: org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate: org.waveprotocol.wave.federation.Proto$ProtocolWaveletDelta delta_>;

        return $r1;
    }

    static boolean access$10502(org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate, boolean)
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate r0;
        boolean z0;

        r0 := @parameter0: org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate;

        z0 := @parameter1: boolean;

        r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate: boolean hasResultingVersion> = z0;

        return z0;
    }

    static org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion access$10602(org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate, org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion)
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate r0;
        org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion r1;

        r0 := @parameter0: org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate;

        r1 := @parameter1: org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion;

        r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate: org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion resultingVersion_> = r1;

        return r1;
    }

    static org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion access$10600(org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate)
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate r0;
        org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion $r1;

        r0 := @parameter0: org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate: org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion resultingVersion_>;

        return $r1;
    }

    static boolean access$10702(org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate, boolean)
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate r0;
        boolean z0;

        r0 := @parameter0: org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate;

        z0 := @parameter1: boolean;

        r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate: boolean hasApplicationTimpstamp> = z0;

        return z0;
    }

    static long access$10802(org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate, long)
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate r0;
        long l0;

        r0 := @parameter0: org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate;

        l0 := @parameter1: long;

        r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate: long applicationTimpstamp_> = l0;

        return l0;
    }

    static void <clinit>()
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate $r0, $r1;

        <org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate: int APPLICATIONTIMPSTAMP_FIELD_NUMBER> = 3;

        <org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate: int RESULTINGVERSION_FIELD_NUMBER> = 2;

        <org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate: int DELTA_FIELD_NUMBER> = 1;

        $r0 = new org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate;

        specialinvoke $r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate: void <init>(boolean)>(1);

        <org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate: org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate defaultInstance> = $r0;

        staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer: void internalForceInit()>();

        $r1 = <org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate: org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate defaultInstance>;

        specialinvoke $r1.<org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate: void initFields()>();

        return;
    }
}
