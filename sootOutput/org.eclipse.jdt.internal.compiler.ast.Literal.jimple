public abstract class org.eclipse.jdt.internal.compiler.ast.Literal extends org.eclipse.jdt.internal.compiler.ast.Expression
{

    public void <init>(int, int)
    {
        int i0, i1;
        org.eclipse.jdt.internal.compiler.ast.Literal r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.Literal;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.ast.Expression: void <init>()>();

        r0.<org.eclipse.jdt.internal.compiler.ast.Literal: int sourceStart> = i0;

        r0.<org.eclipse.jdt.internal.compiler.ast.Literal: int sourceEnd> = i1;

        return;
    }

    public org.eclipse.jdt.internal.compiler.flow.FlowInfo analyseCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope, org.eclipse.jdt.internal.compiler.flow.FlowContext, org.eclipse.jdt.internal.compiler.flow.FlowInfo)
    {
        org.eclipse.jdt.internal.compiler.lookup.BlockScope r2;
        org.eclipse.jdt.internal.compiler.flow.FlowContext r3;
        org.eclipse.jdt.internal.compiler.flow.FlowInfo r0;
        org.eclipse.jdt.internal.compiler.ast.Literal r1;

        r1 := @this: org.eclipse.jdt.internal.compiler.ast.Literal;

        r2 := @parameter0: org.eclipse.jdt.internal.compiler.lookup.BlockScope;

        r3 := @parameter1: org.eclipse.jdt.internal.compiler.flow.FlowContext;

        r0 := @parameter2: org.eclipse.jdt.internal.compiler.flow.FlowInfo;

        return r0;
    }

    public abstract void computeConstant();

    public abstract org.eclipse.jdt.internal.compiler.lookup.TypeBinding literalType(org.eclipse.jdt.internal.compiler.lookup.BlockScope);

    public java.lang.StringBuffer printExpression(int, java.lang.StringBuffer)
    {
        java.lang.StringBuffer r0, $r3;
        int i0;
        char[] $r2;
        org.eclipse.jdt.internal.compiler.ast.Literal r1;

        r1 := @this: org.eclipse.jdt.internal.compiler.ast.Literal;

        i0 := @parameter0: int;

        r0 := @parameter1: java.lang.StringBuffer;

        $r2 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.ast.Literal: char[] source()>();

        $r3 = virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char[])>($r2);

        return $r3;
    }

    public org.eclipse.jdt.internal.compiler.lookup.TypeBinding resolveType(org.eclipse.jdt.internal.compiler.lookup.BlockScope)
    {
        org.eclipse.jdt.internal.compiler.lookup.BlockScope r1;
        org.eclipse.jdt.internal.compiler.problem.ProblemReporter $r5;
        org.eclipse.jdt.internal.compiler.impl.Constant $r3, $r7;
        org.eclipse.jdt.internal.compiler.lookup.TypeBinding $r2, $r4, $r6;
        org.eclipse.jdt.internal.compiler.ast.Literal r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.Literal;

        r1 := @parameter0: org.eclipse.jdt.internal.compiler.lookup.BlockScope;

        $r2 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.ast.Literal: org.eclipse.jdt.internal.compiler.lookup.TypeBinding literalType(org.eclipse.jdt.internal.compiler.lookup.BlockScope)>(r1);

        r0.<org.eclipse.jdt.internal.compiler.ast.Literal: org.eclipse.jdt.internal.compiler.lookup.TypeBinding resolvedType> = $r2;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.ast.Literal: void computeConstant()>();

        $r3 = r0.<org.eclipse.jdt.internal.compiler.ast.Literal: org.eclipse.jdt.internal.compiler.impl.Constant constant>;

        if $r3 != null goto label1;

        $r5 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.lookup.BlockScope: org.eclipse.jdt.internal.compiler.problem.ProblemReporter problemReporter()>();

        $r6 = r0.<org.eclipse.jdt.internal.compiler.ast.Literal: org.eclipse.jdt.internal.compiler.lookup.TypeBinding resolvedType>;

        virtualinvoke $r5.<org.eclipse.jdt.internal.compiler.problem.ProblemReporter: void constantOutOfRange(org.eclipse.jdt.internal.compiler.ast.Literal,org.eclipse.jdt.internal.compiler.lookup.TypeBinding)>(r0, $r6);

        $r7 = <org.eclipse.jdt.internal.compiler.impl.Constant: org.eclipse.jdt.internal.compiler.impl.Constant NotAConstant>;

        r0.<org.eclipse.jdt.internal.compiler.ast.Literal: org.eclipse.jdt.internal.compiler.impl.Constant constant> = $r7;

     label1:
        $r4 = r0.<org.eclipse.jdt.internal.compiler.ast.Literal: org.eclipse.jdt.internal.compiler.lookup.TypeBinding resolvedType>;

        return $r4;
    }

    public abstract char[] source();
}
