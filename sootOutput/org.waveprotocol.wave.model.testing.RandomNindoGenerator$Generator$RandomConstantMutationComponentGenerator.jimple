abstract class org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$RandomConstantMutationComponentGenerator extends org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$RandomMutationComponentGenerator
{
    final org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator this$0;

    void <init>(org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator)
    {
        org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator r1;
        org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$RandomConstantMutationComponentGenerator r0;

        r0 := @this: org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$RandomConstantMutationComponentGenerator;

        r1 := @parameter0: org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator;

        r0.<org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$RandomConstantMutationComponentGenerator: org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator this$0> = r1;

        specialinvoke r0.<org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$RandomMutationComponentGenerator: void <init>(org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator)>(r1);

        return;
    }

    abstract org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult check(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector);

    abstract void apply();

    org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$RandomizerMutationComponent generate(boolean)
    {
        org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$RandomConstantMutationComponentGenerator$1 $r4;
        java.lang.RuntimeException $r3;
        org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$RandomConstantMutationComponentGenerator r0;
        int[] $r1;
        int $i0, $i1;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r2;
        boolean z0;

        r0 := @this: org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$RandomConstantMutationComponentGenerator;

        z0 := @parameter0: boolean;

        $r1 = <org.waveprotocol.wave.model.testing.RandomNindoGenerator$1: int[] $SwitchMap$org$waveprotocol$wave$model$document$operation$automaton$DocOpAutomaton$ValidationResult>;

        $r2 = virtualinvoke r0.<org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$RandomConstantMutationComponentGenerator: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult check(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)>(null);

        $i0 = virtualinvoke $r2.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult: int ordinal()>();

        $i1 = $r1[$i0];

        tableswitch($i1)
        {
            case 1: goto label1;
            case 2: goto label3;
            case 3: goto label4;
            case 4: goto label2;
            default: goto label5;
        };

     label1:
        return null;

     label2:
        if z0 != 0 goto label6;

        return null;

     label3:
        if z0 == 0 goto label6;

        return null;

     label4:
        if z0 == 0 goto label6;

        return null;

     label5:
        $r3 = new java.lang.RuntimeException;

        specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.String)>("unexpected validation result");

        throw $r3;

     label6:
        $r4 = new org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$RandomConstantMutationComponentGenerator$1;

        specialinvoke $r4.<org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$RandomConstantMutationComponentGenerator$1: void <init>(org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$RandomConstantMutationComponentGenerator)>(r0);

        return $r4;
    }
}
