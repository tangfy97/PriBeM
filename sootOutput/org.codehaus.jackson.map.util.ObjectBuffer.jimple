public final class org.codehaus.jackson.map.util.ObjectBuffer extends java.lang.Object
{
    static final int INITIAL_CHUNK_SIZE;
    static final int SMALL_CHUNK_SIZE;
    static final int MAX_CHUNK_SIZE;
    private org.codehaus.jackson.map.util.ObjectBuffer$Node _bufferHead;
    private org.codehaus.jackson.map.util.ObjectBuffer$Node _bufferTail;
    private int _bufferedEntryCount;
    private java.lang.Object[] _freeBuffer;

    public void <init>()
    {
        org.codehaus.jackson.map.util.ObjectBuffer r0;

        r0 := @this: org.codehaus.jackson.map.util.ObjectBuffer;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public java.lang.Object[] resetAndStart()
    {
        org.codehaus.jackson.map.util.ObjectBuffer r0;
        java.lang.Object[] $r1, $r2, $r3;

        r0 := @this: org.codehaus.jackson.map.util.ObjectBuffer;

        virtualinvoke r0.<org.codehaus.jackson.map.util.ObjectBuffer: void _reset()>();

        $r1 = r0.<org.codehaus.jackson.map.util.ObjectBuffer: java.lang.Object[] _freeBuffer>;

        if $r1 != null goto label1;

        $r3 = newarray (java.lang.Object)[12];

        return $r3;

     label1:
        $r2 = r0.<org.codehaus.jackson.map.util.ObjectBuffer: java.lang.Object[] _freeBuffer>;

        return $r2;
    }

    public java.lang.Object[] appendCompletedChunk(java.lang.Object[])
    {
        java.lang.Object[] r1, $r5;
        org.codehaus.jackson.map.util.ObjectBuffer$Node $r0, $r3, $r4;
        org.codehaus.jackson.map.util.ObjectBuffer r2;
        int $i0, $i1, $i2, $i3, i4;

        r2 := @this: org.codehaus.jackson.map.util.ObjectBuffer;

        r1 := @parameter0: java.lang.Object[];

        $r0 = new org.codehaus.jackson.map.util.ObjectBuffer$Node;

        specialinvoke $r0.<org.codehaus.jackson.map.util.ObjectBuffer$Node: void <init>(java.lang.Object[])>(r1);

        $r3 = r2.<org.codehaus.jackson.map.util.ObjectBuffer: org.codehaus.jackson.map.util.ObjectBuffer$Node _bufferHead>;

        if $r3 != null goto label1;

        r2.<org.codehaus.jackson.map.util.ObjectBuffer: org.codehaus.jackson.map.util.ObjectBuffer$Node _bufferTail> = $r0;

        r2.<org.codehaus.jackson.map.util.ObjectBuffer: org.codehaus.jackson.map.util.ObjectBuffer$Node _bufferHead> = $r0;

        goto label2;

     label1:
        $r4 = r2.<org.codehaus.jackson.map.util.ObjectBuffer: org.codehaus.jackson.map.util.ObjectBuffer$Node _bufferTail>;

        virtualinvoke $r4.<org.codehaus.jackson.map.util.ObjectBuffer$Node: void linkNext(org.codehaus.jackson.map.util.ObjectBuffer$Node)>($r0);

        r2.<org.codehaus.jackson.map.util.ObjectBuffer: org.codehaus.jackson.map.util.ObjectBuffer$Node _bufferTail> = $r0;

     label2:
        $i3 = lengthof r1;

        $i0 = r2.<org.codehaus.jackson.map.util.ObjectBuffer: int _bufferedEntryCount>;

        $i1 = $i0 + $i3;

        r2.<org.codehaus.jackson.map.util.ObjectBuffer: int _bufferedEntryCount> = $i1;

        if $i3 >= 16384 goto label3;

        i4 = $i3 + $i3;

        goto label4;

     label3:
        $i2 = $i3 >> 2;

        i4 = $i3 + $i2;

     label4:
        $r5 = newarray (java.lang.Object)[i4];

        return $r5;
    }

    public java.lang.Object[] completeAndClearBuffer(java.lang.Object[], int)
    {
        org.codehaus.jackson.map.util.ObjectBuffer r0;
        java.lang.Object[] r1, r2;
        int i0, $i1, i2;

        r0 := @this: org.codehaus.jackson.map.util.ObjectBuffer;

        r2 := @parameter0: java.lang.Object[];

        i0 := @parameter1: int;

        $i1 = r0.<org.codehaus.jackson.map.util.ObjectBuffer: int _bufferedEntryCount>;

        i2 = i0 + $i1;

        r1 = newarray (java.lang.Object)[i2];

        virtualinvoke r0.<org.codehaus.jackson.map.util.ObjectBuffer: void _copyTo(java.lang.Object,int,java.lang.Object[],int)>(r1, i2, r2, i0);

        return r1;
    }

    public java.lang.Object[] completeAndClearBuffer(java.lang.Object[], int, java.lang.Class)
    {
        java.lang.Object[] $r3, r4, r5;
        org.codehaus.jackson.map.util.ObjectBuffer r0;
        int i0, $i1, i2;
        java.lang.Class r1;
        java.lang.Object $r2;

        r0 := @this: org.codehaus.jackson.map.util.ObjectBuffer;

        r5 := @parameter0: java.lang.Object[];

        i0 := @parameter1: int;

        r1 := @parameter2: java.lang.Class;

        $i1 = r0.<org.codehaus.jackson.map.util.ObjectBuffer: int _bufferedEntryCount>;

        i2 = i0 + $i1;

        $r2 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(r1, i2);

        $r3 = (java.lang.Object[]) $r2;

        r4 = (java.lang.Object[]) $r3;

        virtualinvoke r0.<org.codehaus.jackson.map.util.ObjectBuffer: void _copyTo(java.lang.Object,int,java.lang.Object[],int)>(r4, i2, r5, i0);

        virtualinvoke r0.<org.codehaus.jackson.map.util.ObjectBuffer: void _reset()>();

        return r4;
    }

    public void completeAndClearBuffer(java.lang.Object[], int, java.util.List)
    {
        java.lang.Object[] r2, $r4;
        org.codehaus.jackson.map.util.ObjectBuffer$Node r6;
        java.util.List r1;
        org.codehaus.jackson.map.util.ObjectBuffer r0;
        int i0, i1, i2, i3;
        java.lang.Object $r3, $r5;

        r0 := @this: org.codehaus.jackson.map.util.ObjectBuffer;

        r2 := @parameter0: java.lang.Object[];

        i0 := @parameter1: int;

        r1 := @parameter2: java.util.List;

        r6 = r0.<org.codehaus.jackson.map.util.ObjectBuffer: org.codehaus.jackson.map.util.ObjectBuffer$Node _bufferHead>;

     label1:
        if r6 == null goto label4;

        $r4 = virtualinvoke r6.<org.codehaus.jackson.map.util.ObjectBuffer$Node: java.lang.Object[] getData()>();

        i2 = 0;

        i1 = lengthof $r4;

     label2:
        if i2 >= i1 goto label3;

        $r5 = $r4[i2];

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r5);

        i2 = i2 + 1;

        goto label2;

     label3:
        r6 = virtualinvoke r6.<org.codehaus.jackson.map.util.ObjectBuffer$Node: org.codehaus.jackson.map.util.ObjectBuffer$Node next()>();

        goto label1;

     label4:
        i3 = 0;

     label5:
        if i3 >= i0 goto label6;

        $r3 = r2[i3];

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r3);

        i3 = i3 + 1;

        goto label5;

     label6:
        return;
    }

    public int initialCapacity()
    {
        org.codehaus.jackson.map.util.ObjectBuffer r0;
        java.lang.Object[] $r1, $r2;
        int $i0;

        r0 := @this: org.codehaus.jackson.map.util.ObjectBuffer;

        $r1 = r0.<org.codehaus.jackson.map.util.ObjectBuffer: java.lang.Object[] _freeBuffer>;

        if $r1 != null goto label1;

        $i0 = 0;

        goto label2;

     label1:
        $r2 = r0.<org.codehaus.jackson.map.util.ObjectBuffer: java.lang.Object[] _freeBuffer>;

        $i0 = lengthof $r2;

     label2:
        return $i0;
    }

    public int bufferedSize()
    {
        int $i0;
        org.codehaus.jackson.map.util.ObjectBuffer r0;

        r0 := @this: org.codehaus.jackson.map.util.ObjectBuffer;

        $i0 = r0.<org.codehaus.jackson.map.util.ObjectBuffer: int _bufferedEntryCount>;

        return $i0;
    }

    protected void _reset()
    {
        org.codehaus.jackson.map.util.ObjectBuffer$Node $r1, $r2;
        org.codehaus.jackson.map.util.ObjectBuffer r0;
        java.lang.Object[] $r3;

        r0 := @this: org.codehaus.jackson.map.util.ObjectBuffer;

        $r1 = r0.<org.codehaus.jackson.map.util.ObjectBuffer: org.codehaus.jackson.map.util.ObjectBuffer$Node _bufferTail>;

        if $r1 == null goto label1;

        $r2 = r0.<org.codehaus.jackson.map.util.ObjectBuffer: org.codehaus.jackson.map.util.ObjectBuffer$Node _bufferTail>;

        $r3 = virtualinvoke $r2.<org.codehaus.jackson.map.util.ObjectBuffer$Node: java.lang.Object[] getData()>();

        r0.<org.codehaus.jackson.map.util.ObjectBuffer: java.lang.Object[] _freeBuffer> = $r3;

     label1:
        r0.<org.codehaus.jackson.map.util.ObjectBuffer: org.codehaus.jackson.map.util.ObjectBuffer$Node _bufferTail> = null;

        r0.<org.codehaus.jackson.map.util.ObjectBuffer: org.codehaus.jackson.map.util.ObjectBuffer$Node _bufferHead> = null;

        r0.<org.codehaus.jackson.map.util.ObjectBuffer: int _bufferedEntryCount> = 0;

        return;
    }

    protected final void _copyTo(java.lang.Object, int, java.lang.Object[], int)
    {
        java.lang.IllegalStateException $r3;
        java.lang.Object[] r1, $r10;
        org.codehaus.jackson.map.util.ObjectBuffer$Node r11;
        org.codehaus.jackson.map.util.ObjectBuffer r0;
        int i0, i1, i2, i3, i4;
        java.lang.String $r9;
        java.lang.Object r2;
        java.lang.StringBuilder $r4, $r5, $r6, $r7, $r8;

        r0 := @this: org.codehaus.jackson.map.util.ObjectBuffer;

        r2 := @parameter0: java.lang.Object;

        i1 := @parameter1: int;

        r1 := @parameter2: java.lang.Object[];

        i0 := @parameter3: int;

        i3 = 0;

        r11 = r0.<org.codehaus.jackson.map.util.ObjectBuffer: org.codehaus.jackson.map.util.ObjectBuffer$Node _bufferHead>;

     label1:
        if r11 == null goto label2;

        $r10 = virtualinvoke r11.<org.codehaus.jackson.map.util.ObjectBuffer$Node: java.lang.Object[] getData()>();

        i2 = lengthof $r10;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r10, 0, r2, i3, i2);

        i3 = i3 + i2;

        r11 = virtualinvoke r11.<org.codehaus.jackson.map.util.ObjectBuffer$Node: org.codehaus.jackson.map.util.ObjectBuffer$Node next()>();

        goto label1;

     label2:
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, r2, i3, i0);

        i4 = i3 + i0;

        if i4 == i1 goto label3;

        $r3 = new java.lang.IllegalStateException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Should have gotten ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" entries, got ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i4);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r9);

        throw $r3;

     label3:
        return;
    }

    public static void <clinit>()
    {
        <org.codehaus.jackson.map.util.ObjectBuffer: int MAX_CHUNK_SIZE> = 262144;

        <org.codehaus.jackson.map.util.ObjectBuffer: int SMALL_CHUNK_SIZE> = 16384;

        <org.codehaus.jackson.map.util.ObjectBuffer: int INITIAL_CHUNK_SIZE> = 12;

        return;
    }
}
