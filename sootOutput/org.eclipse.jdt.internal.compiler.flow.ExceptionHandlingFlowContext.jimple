public class org.eclipse.jdt.internal.compiler.flow.ExceptionHandlingFlowContext extends org.eclipse.jdt.internal.compiler.flow.FlowContext
{
    public static final int BitCacheSize;
    public org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding[] handledExceptions;
    int[] isReached;
    int[] isNeeded;
    org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo[] initsOnExceptions;
    org.eclipse.jdt.internal.compiler.codegen.ObjectCache indexes;
    boolean isMethodContext;
    public org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo initsOnReturn;
    public java.util.ArrayList extendedExceptions;

    public void <init>(org.eclipse.jdt.internal.compiler.flow.FlowContext, org.eclipse.jdt.internal.compiler.ast.ASTNode, org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding[], org.eclipse.jdt.internal.compiler.lookup.BlockScope, org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo)
    {
        org.eclipse.jdt.internal.compiler.lookup.MethodScope $r5;
        org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding[] r6;
        int[] $r7, $r8, $r14, $r17, $r18;
        org.eclipse.jdt.internal.compiler.flow.FlowContext r1;
        boolean $z0, z1, $z2, $z3, $z4, $z5, $z6;
        org.eclipse.jdt.internal.compiler.impl.CompilerOptions $r19;
        org.eclipse.jdt.internal.compiler.lookup.BlockScope r4;
        org.eclipse.jdt.internal.compiler.ast.ASTNode r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10;
        org.eclipse.jdt.internal.compiler.codegen.ObjectCache $r3, $r11;
        org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo[] $r9, $r13, $r20;
        org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding r10;
        org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo $r12, r15, $r16, $r21;
        org.eclipse.jdt.internal.compiler.flow.ExceptionHandlingFlowContext r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.flow.ExceptionHandlingFlowContext;

        r1 := @parameter0: org.eclipse.jdt.internal.compiler.flow.FlowContext;

        r2 := @parameter1: org.eclipse.jdt.internal.compiler.ast.ASTNode;

        r6 := @parameter2: org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding[];

        r4 := @parameter3: org.eclipse.jdt.internal.compiler.lookup.BlockScope;

        r15 := @parameter4: org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.flow.FlowContext: void <init>(org.eclipse.jdt.internal.compiler.flow.FlowContext,org.eclipse.jdt.internal.compiler.ast.ASTNode)>(r1, r2);

        $r3 = new org.eclipse.jdt.internal.compiler.codegen.ObjectCache;

        specialinvoke $r3.<org.eclipse.jdt.internal.compiler.codegen.ObjectCache: void <init>()>();

        r0.<org.eclipse.jdt.internal.compiler.flow.ExceptionHandlingFlowContext: org.eclipse.jdt.internal.compiler.codegen.ObjectCache indexes> = $r3;

        $r5 = virtualinvoke r4.<org.eclipse.jdt.internal.compiler.lookup.BlockScope: org.eclipse.jdt.internal.compiler.lookup.MethodScope methodScope()>();

        if r4 != $r5 goto label01;

        $z5 = 1;

        goto label02;

     label01:
        $z5 = 0;

     label02:
        r0.<org.eclipse.jdt.internal.compiler.flow.ExceptionHandlingFlowContext: boolean isMethodContext> = $z5;

        r0.<org.eclipse.jdt.internal.compiler.flow.ExceptionHandlingFlowContext: org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding[] handledExceptions> = r6;

        $i8 = lengthof r6;

        $i0 = $i8 / 32;

        $i9 = $i0 + 1;

        $r7 = newarray (int)[$i9];

        r0.<org.eclipse.jdt.internal.compiler.flow.ExceptionHandlingFlowContext: int[] isReached> = $r7;

        $r8 = newarray (int)[$i9];

        r0.<org.eclipse.jdt.internal.compiler.flow.ExceptionHandlingFlowContext: int[] isNeeded> = $r8;

        $r9 = newarray (org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo)[$i8];

        r0.<org.eclipse.jdt.internal.compiler.flow.ExceptionHandlingFlowContext: org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo[] initsOnExceptions> = $r9;

        $z0 = r0.<org.eclipse.jdt.internal.compiler.flow.ExceptionHandlingFlowContext: boolean isMethodContext>;

        if $z0 == 0 goto label03;

        $r19 = virtualinvoke r4.<org.eclipse.jdt.internal.compiler.lookup.BlockScope: org.eclipse.jdt.internal.compiler.impl.CompilerOptions compilerOptions()>();

        $z4 = $r19.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean reportUnusedDeclaredThrownExceptionExemptExceptionAndThrowable>;

        if $z4 != 0 goto label03;

        $z6 = 0;

        goto label04;

     label03:
        $z6 = 1;

     label04:
        z1 = $z6;

        i10 = 0;

        goto label10;

     label05:
        r10 = r6[i10];

        $r11 = r0.<org.eclipse.jdt.internal.compiler.flow.ExceptionHandlingFlowContext: org.eclipse.jdt.internal.compiler.codegen.ObjectCache indexes>;

        virtualinvoke $r11.<org.eclipse.jdt.internal.compiler.codegen.ObjectCache: int put(java.lang.Object,int)>(r10, i10);

        $z2 = virtualinvoke r10.<org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding: boolean isUncheckedException(boolean)>(1);

        if $z2 == 0 goto label08;

        if z1 != 0 goto label06;

        $i6 = r10.<org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding: int id>;

        if $i6 == 21 goto label07;

        $i7 = r10.<org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding: int id>;

        if $i7 == 25 goto label07;

     label06:
        $r14 = r0.<org.eclipse.jdt.internal.compiler.flow.ExceptionHandlingFlowContext: int[] isReached>;

        $i1 = i10 / 32;

        $i4 = $r14[$i1];

        $i2 = i10 % 32;

        $i3 = 1 << $i2;

        $i5 = $i4 | $i3;

        $r14[$i1] = $i5;

     label07:
        $r20 = r0.<org.eclipse.jdt.internal.compiler.flow.ExceptionHandlingFlowContext: org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo[] initsOnExceptions>;

        $r21 = virtualinvoke r15.<org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo: org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo unconditionalCopy()>();

        $r20[i10] = $r21;

        goto label09;

     label08:
        $r13 = r0.<org.eclipse.jdt.internal.compiler.flow.ExceptionHandlingFlowContext: org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo[] initsOnExceptions>;

        $r12 = <org.eclipse.jdt.internal.compiler.flow.FlowInfo: org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo DEAD_END>;

        $r13[i10] = $r12;

     label09:
        i10 = i10 + 1;

     label10:
        if i10 < $i8 goto label05;

        $z3 = r0.<org.eclipse.jdt.internal.compiler.flow.ExceptionHandlingFlowContext: boolean isMethodContext>;

        if $z3 != 0 goto label11;

        $r18 = r0.<org.eclipse.jdt.internal.compiler.flow.ExceptionHandlingFlowContext: int[] isReached>;

        $r17 = r0.<org.eclipse.jdt.internal.compiler.flow.ExceptionHandlingFlowContext: int[] isNeeded>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r18, 0, $r17, 0, $i9);

     label11:
        $r16 = <org.eclipse.jdt.internal.compiler.flow.FlowInfo: org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo DEAD_END>;

        r0.<org.eclipse.jdt.internal.compiler.flow.ExceptionHandlingFlowContext: org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo initsOnReturn> = $r16;

        return;
    }

    public void complainIfUnusedExceptionHandlers(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)
    {
        org.eclipse.jdt.internal.compiler.ast.Javadoc $r17, $r18, $r20, $r22;
        org.eclipse.jdt.internal.compiler.problem.ProblemReporter $r12;
        org.eclipse.jdt.internal.compiler.lookup.MethodScope r1;
        org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding[] $r5, $r9, $r13, $r28;
        int[] $r8;
        org.eclipse.jdt.internal.compiler.lookup.TypeBinding $r11, $r25;
        boolean $z0, $z1;
        org.eclipse.jdt.internal.compiler.ast.TypeReference[] $r14, $r19, $r21, $r23;
        org.eclipse.jdt.internal.compiler.lookup.MethodBinding $r2;
        org.eclipse.jdt.internal.compiler.ast.TypeReference $r15, $r24;
        org.eclipse.jdt.internal.compiler.impl.CompilerOptions $r3, $r26;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i9, i10, i11, $i12, i13;
        org.eclipse.jdt.internal.compiler.codegen.ObjectCache $r7;
        org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding $r6, $r10, $r16;
        org.eclipse.jdt.internal.compiler.lookup.TypeBinding[] r27;
        org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration r0;
        org.eclipse.jdt.internal.compiler.flow.ExceptionHandlingFlowContext r4;

        r4 := @this: org.eclipse.jdt.internal.compiler.flow.ExceptionHandlingFlowContext;

        r0 := @parameter0: org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration;

        r1 = r0.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: org.eclipse.jdt.internal.compiler.lookup.MethodScope scope>;

        $r2 = r0.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: org.eclipse.jdt.internal.compiler.lookup.MethodBinding binding>;

        $i0 = $r2.<org.eclipse.jdt.internal.compiler.lookup.MethodBinding: int modifiers>;

        $i1 = $i0 & 805306368;

        if $i1 == 0 goto label01;

        $r26 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.lookup.MethodScope: org.eclipse.jdt.internal.compiler.impl.CompilerOptions compilerOptions()>();

        $z1 = $r26.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean reportUnusedDeclaredThrownExceptionWhenOverriding>;

        if $z1 != 0 goto label01;

        return;

     label01:
        r27 = (org.eclipse.jdt.internal.compiler.lookup.TypeBinding[]) null;

        i9 = 0;

        $r3 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.lookup.MethodScope: org.eclipse.jdt.internal.compiler.impl.CompilerOptions compilerOptions()>();

        $z0 = $r3.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean reportUnusedDeclaredThrownExceptionIncludeDocCommentReference>;

        if $z0 == 0 goto label04;

        $r17 = r0.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: org.eclipse.jdt.internal.compiler.ast.Javadoc javadoc>;

        if $r17 == null goto label04;

        $r18 = r0.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: org.eclipse.jdt.internal.compiler.ast.Javadoc javadoc>;

        $r19 = $r18.<org.eclipse.jdt.internal.compiler.ast.Javadoc: org.eclipse.jdt.internal.compiler.ast.TypeReference[] exceptionReferences>;

        if $r19 == null goto label04;

        $r20 = r0.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: org.eclipse.jdt.internal.compiler.ast.Javadoc javadoc>;

        $r21 = $r20.<org.eclipse.jdt.internal.compiler.ast.Javadoc: org.eclipse.jdt.internal.compiler.ast.TypeReference[] exceptionReferences>;

        $i8 = lengthof $r21;

        i9 = $i8;

        if $i8 <= 0 goto label04;

        r27 = newarray (org.eclipse.jdt.internal.compiler.lookup.TypeBinding)[$i8];

        i10 = 0;

        goto label03;

     label02:
        $r22 = r0.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: org.eclipse.jdt.internal.compiler.ast.Javadoc javadoc>;

        $r23 = $r22.<org.eclipse.jdt.internal.compiler.ast.Javadoc: org.eclipse.jdt.internal.compiler.ast.TypeReference[] exceptionReferences>;

        $r24 = $r23[i10];

        $r25 = $r24.<org.eclipse.jdt.internal.compiler.ast.TypeReference: org.eclipse.jdt.internal.compiler.lookup.TypeBinding resolvedType>;

        r27[i10] = $r25;

        i10 = i10 + 1;

     label03:
        if i10 < $i8 goto label02;

     label04:
        i11 = 0;

        $r28 = r4.<org.eclipse.jdt.internal.compiler.flow.ExceptionHandlingFlowContext: org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding[] handledExceptions>;

        $i12 = lengthof $r28;

        goto label10;

     label05:
        $r7 = r4.<org.eclipse.jdt.internal.compiler.flow.ExceptionHandlingFlowContext: org.eclipse.jdt.internal.compiler.codegen.ObjectCache indexes>;

        $r5 = r4.<org.eclipse.jdt.internal.compiler.flow.ExceptionHandlingFlowContext: org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding[] handledExceptions>;

        $r6 = $r5[i11];

        $i2 = virtualinvoke $r7.<org.eclipse.jdt.internal.compiler.codegen.ObjectCache: int get(java.lang.Object)>($r6);

        $r8 = r4.<org.eclipse.jdt.internal.compiler.flow.ExceptionHandlingFlowContext: int[] isReached>;

        $i3 = $i2 / 32;

        $i6 = $r8[$i3];

        $i4 = $i2 % 32;

        $i5 = 1 << $i4;

        $i7 = $i6 & $i5;

        if $i7 != 0 goto label09;

        i13 = 0;

        goto label08;

     label06:
        $r11 = r27[i13];

        $r9 = r4.<org.eclipse.jdt.internal.compiler.flow.ExceptionHandlingFlowContext: org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding[] handledExceptions>;

        $r10 = $r9[i11];

        if $r11 != $r10 goto label07;

        goto label09;

     label07:
        i13 = i13 + 1;

     label08:
        if i13 < i9 goto label06;

        $r12 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.lookup.MethodScope: org.eclipse.jdt.internal.compiler.problem.ProblemReporter problemReporter()>();

        $r13 = r4.<org.eclipse.jdt.internal.compiler.flow.ExceptionHandlingFlowContext: org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding[] handledExceptions>;

        $r16 = $r13[$i2];

        $r14 = r0.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: org.eclipse.jdt.internal.compiler.ast.TypeReference[] thrownExceptions>;

        $r15 = $r14[$i2];

        virtualinvoke $r12.<org.eclipse.jdt.internal.compiler.problem.ProblemReporter: void unusedDeclaredThrownException(org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,org.eclipse.jdt.internal.compiler.ast.ASTNode)>($r16, r0, $r15);

     label09:
        i11 = i11 + 1;

     label10:
        if i11 < $i12 goto label05;

        return;
    }

    public void complainIfUnusedExceptionHandlers(org.eclipse.jdt.internal.compiler.lookup.BlockScope, org.eclipse.jdt.internal.compiler.ast.TryStatement)
    {
        org.eclipse.jdt.internal.compiler.lookup.BlockScope r7;
        org.eclipse.jdt.internal.compiler.problem.ProblemReporter $r8, $r15;
        org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding[] $r1, $r2, $r9, $r16;
        int[] $r5, $r6;
        int i0, $i1, i2, $i3, i4, $i5, $i6, $i7, $i8, i9;
        org.eclipse.jdt.internal.compiler.ast.Argument[] $r11, $r17;
        org.eclipse.jdt.internal.compiler.codegen.ObjectCache $r4;
        org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding $r3, $r14, $r20;
        org.eclipse.jdt.internal.compiler.ast.Argument $r12, $r18;
        org.eclipse.jdt.internal.compiler.ast.TypeReference $r13, $r19;
        org.eclipse.jdt.internal.compiler.ast.TryStatement r10;
        org.eclipse.jdt.internal.compiler.flow.ExceptionHandlingFlowContext r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.flow.ExceptionHandlingFlowContext;

        r7 := @parameter0: org.eclipse.jdt.internal.compiler.lookup.BlockScope;

        r10 := @parameter1: org.eclipse.jdt.internal.compiler.ast.TryStatement;

        i9 = 0;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.flow.ExceptionHandlingFlowContext: org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding[] handledExceptions>;

        i0 = lengthof $r1;

        goto label4;

     label1:
        $r4 = r0.<org.eclipse.jdt.internal.compiler.flow.ExceptionHandlingFlowContext: org.eclipse.jdt.internal.compiler.codegen.ObjectCache indexes>;

        $r2 = r0.<org.eclipse.jdt.internal.compiler.flow.ExceptionHandlingFlowContext: org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding[] handledExceptions>;

        $r3 = $r2[i9];

        $i1 = virtualinvoke $r4.<org.eclipse.jdt.internal.compiler.codegen.ObjectCache: int get(java.lang.Object)>($r3);

        i2 = $i1 / 32;

        $i3 = $i1 % 32;

        i4 = 1 << $i3;

        $r5 = r0.<org.eclipse.jdt.internal.compiler.flow.ExceptionHandlingFlowContext: int[] isReached>;

        $i5 = $r5[i2];

        $i6 = $i5 & i4;

        if $i6 != 0 goto label2;

        $r15 = virtualinvoke r7.<org.eclipse.jdt.internal.compiler.lookup.BlockScope: org.eclipse.jdt.internal.compiler.problem.ProblemReporter problemReporter()>();

        $r16 = r0.<org.eclipse.jdt.internal.compiler.flow.ExceptionHandlingFlowContext: org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding[] handledExceptions>;

        $r20 = $r16[$i1];

        $r17 = r10.<org.eclipse.jdt.internal.compiler.ast.TryStatement: org.eclipse.jdt.internal.compiler.ast.Argument[] catchArguments>;

        $r18 = $r17[$i1];

        $r19 = $r18.<org.eclipse.jdt.internal.compiler.ast.Argument: org.eclipse.jdt.internal.compiler.ast.TypeReference type>;

        virtualinvoke $r15.<org.eclipse.jdt.internal.compiler.problem.ProblemReporter: void unreachableCatchBlock(org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding,org.eclipse.jdt.internal.compiler.ast.ASTNode)>($r20, $r19);

        goto label3;

     label2:
        $r6 = r0.<org.eclipse.jdt.internal.compiler.flow.ExceptionHandlingFlowContext: int[] isNeeded>;

        $i7 = $r6[i2];

        $i8 = $i7 & i4;

        if $i8 != 0 goto label3;

        $r8 = virtualinvoke r7.<org.eclipse.jdt.internal.compiler.lookup.BlockScope: org.eclipse.jdt.internal.compiler.problem.ProblemReporter problemReporter()>();

        $r9 = r0.<org.eclipse.jdt.internal.compiler.flow.ExceptionHandlingFlowContext: org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding[] handledExceptions>;

        $r14 = $r9[$i1];

        $r11 = r10.<org.eclipse.jdt.internal.compiler.ast.TryStatement: org.eclipse.jdt.internal.compiler.ast.Argument[] catchArguments>;

        $r12 = $r11[$i1];

        $r13 = $r12.<org.eclipse.jdt.internal.compiler.ast.Argument: org.eclipse.jdt.internal.compiler.ast.TypeReference type>;

        virtualinvoke $r8.<org.eclipse.jdt.internal.compiler.problem.ProblemReporter: void hiddenCatchBlock(org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding,org.eclipse.jdt.internal.compiler.ast.ASTNode)>($r14, $r13);

     label3:
        i9 = i9 + 1;

     label4:
        if i9 < i0 goto label1;

        return;
    }

    public java.lang.String individualToString()
    {
        org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding[] $r2, $r4;
        int[] $r7, $r8;
        java.lang.StringBuffer $r0, $r3, $r9, $r12, $r14, $r18;
        int i0, i1, $i2, i3, $i4, $i5, $i6, $i7, i8;
        java.lang.String $r11, $r13, $r17;
        org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo[] $r15;
        org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding $r5;
        org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo $r10, $r16;
        char[] $r6;
        org.eclipse.jdt.internal.compiler.flow.ExceptionHandlingFlowContext r1;

        r1 := @this: org.eclipse.jdt.internal.compiler.flow.ExceptionHandlingFlowContext;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>(java.lang.String)>("Exception flow context");

        $r2 = r1.<org.eclipse.jdt.internal.compiler.flow.ExceptionHandlingFlowContext: org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding[] handledExceptions>;

        i0 = lengthof $r2;

        i8 = 0;

        goto label5;

     label1:
        i1 = i8 / 32;

        $i2 = i8 % 32;

        i3 = 1 << $i2;

        $r3 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(91);

        $r4 = r1.<org.eclipse.jdt.internal.compiler.flow.ExceptionHandlingFlowContext: org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding[] handledExceptions>;

        $r5 = $r4[i8];

        $r6 = virtualinvoke $r5.<org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding: char[] readableName()>();

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char[])>($r6);

        $r7 = r1.<org.eclipse.jdt.internal.compiler.flow.ExceptionHandlingFlowContext: int[] isReached>;

        $i4 = $r7[i1];

        $i5 = $i4 & i3;

        if $i5 == 0 goto label3;

        $r8 = r1.<org.eclipse.jdt.internal.compiler.flow.ExceptionHandlingFlowContext: int[] isNeeded>;

        $i6 = $r8[i1];

        $i7 = $i6 & i3;

        if $i7 != 0 goto label2;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("-masked");

        goto label4;

     label2:
        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("-reached");

        goto label4;

     label3:
        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("-not reached");

     label4:
        $r14 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(45);

        $r15 = r1.<org.eclipse.jdt.internal.compiler.flow.ExceptionHandlingFlowContext: org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo[] initsOnExceptions>;

        $r16 = $r15[i8];

        $r17 = virtualinvoke $r16.<org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo: java.lang.String toString()>();

        $r18 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r17);

        virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(93);

        i8 = i8 + 1;

     label5:
        if i8 < i0 goto label1;

        $r9 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[initsOnReturn -");

        $r10 = r1.<org.eclipse.jdt.internal.compiler.flow.ExceptionHandlingFlowContext: org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo initsOnReturn>;

        $r11 = virtualinvoke $r10.<org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo: java.lang.String toString()>();

        $r12 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r11);

        virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(93);

        $r13 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r13;
    }

    public org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo initsOnException(org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding)
    {
        org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo[] $r3;
        org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo $r4, $r5;
        org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding r1;
        int $i0;
        org.eclipse.jdt.internal.compiler.flow.ExceptionHandlingFlowContext r0;
        org.eclipse.jdt.internal.compiler.codegen.ObjectCache $r2;

        r0 := @this: org.eclipse.jdt.internal.compiler.flow.ExceptionHandlingFlowContext;

        r1 := @parameter0: org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding;

        $r2 = r0.<org.eclipse.jdt.internal.compiler.flow.ExceptionHandlingFlowContext: org.eclipse.jdt.internal.compiler.codegen.ObjectCache indexes>;

        $i0 = virtualinvoke $r2.<org.eclipse.jdt.internal.compiler.codegen.ObjectCache: int get(java.lang.Object)>(r1);

        if $i0 >= 0 goto label1;

        $r5 = <org.eclipse.jdt.internal.compiler.flow.FlowInfo: org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo DEAD_END>;

        return $r5;

     label1:
        $r3 = r0.<org.eclipse.jdt.internal.compiler.flow.ExceptionHandlingFlowContext: org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo[] initsOnExceptions>;

        $r4 = $r3[$i0];

        return $r4;
    }

    public org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo initsOnReturn()
    {
        org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo $r1;
        org.eclipse.jdt.internal.compiler.flow.ExceptionHandlingFlowContext r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.flow.ExceptionHandlingFlowContext;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.flow.ExceptionHandlingFlowContext: org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo initsOnReturn>;

        return $r1;
    }

    public void mergeUnhandledException(org.eclipse.jdt.internal.compiler.lookup.TypeBinding)
    {
        java.util.ArrayList $r1, $r2, $r4, $r7, $r8, $r13, $r14;
        org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding[] $r10, $r11;
        int $i0, $i1, $i2, i3, i4, $i6;
        org.eclipse.jdt.internal.compiler.lookup.TypeBinding r3, $r6;
        boolean z0;
        org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding $r12;
        java.lang.Object $r5;
        org.eclipse.jdt.internal.compiler.flow.ExceptionHandlingFlowContext r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.flow.ExceptionHandlingFlowContext;

        r3 := @parameter0: org.eclipse.jdt.internal.compiler.lookup.TypeBinding;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.flow.ExceptionHandlingFlowContext: java.util.ArrayList extendedExceptions>;

        if $r1 != null goto label3;

        $r14 = new java.util.ArrayList;

        specialinvoke $r14.<java.util.ArrayList: void <init>(int)>(5);

        r0.<org.eclipse.jdt.internal.compiler.flow.ExceptionHandlingFlowContext: java.util.ArrayList extendedExceptions> = $r14;

        i3 = 0;

        goto label2;

     label1:
        $r13 = r0.<org.eclipse.jdt.internal.compiler.flow.ExceptionHandlingFlowContext: java.util.ArrayList extendedExceptions>;

        $r11 = r0.<org.eclipse.jdt.internal.compiler.flow.ExceptionHandlingFlowContext: org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding[] handledExceptions>;

        $r12 = $r11[i3];

        virtualinvoke $r13.<java.util.ArrayList: boolean add(java.lang.Object)>($r12);

        i3 = i3 + 1;

     label2:
        $r10 = r0.<org.eclipse.jdt.internal.compiler.flow.ExceptionHandlingFlowContext: org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding[] handledExceptions>;

        $i2 = lengthof $r10;

        if i3 < $i2 goto label1;

     label3:
        z0 = 0;

        $r2 = r0.<org.eclipse.jdt.internal.compiler.flow.ExceptionHandlingFlowContext: java.util.ArrayList extendedExceptions>;

        $i0 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

        i4 = $i0 - 1;

        goto label8;

     label4:
        $r4 = r0.<org.eclipse.jdt.internal.compiler.flow.ExceptionHandlingFlowContext: java.util.ArrayList extendedExceptions>;

        $r5 = virtualinvoke $r4.<java.util.ArrayList: java.lang.Object get(int)>(i4);

        $r6 = (org.eclipse.jdt.internal.compiler.lookup.TypeBinding) $r5;

        $i1 = staticinvoke <org.eclipse.jdt.internal.compiler.lookup.Scope: int compareTypes(org.eclipse.jdt.internal.compiler.lookup.TypeBinding,org.eclipse.jdt.internal.compiler.lookup.TypeBinding)>(r3, $r6);

        tableswitch($i1)
        {
            case -1: goto label6;
            case 0: goto label7;
            case 1: goto label5;
            default: goto label7;
        };

     label5:
        $r7 = r0.<org.eclipse.jdt.internal.compiler.flow.ExceptionHandlingFlowContext: java.util.ArrayList extendedExceptions>;

        virtualinvoke $r7.<java.util.ArrayList: java.lang.Object remove(int)>(i4);

        goto label7;

     label6:
        z0 = 1;

        goto label7;

     label7:
        $i6 = (int) -1;

        i4 = i4 + $i6;

     label8:
        if i4 >= 0 goto label4;

        if z0 != 0 goto label9;

        $r8 = r0.<org.eclipse.jdt.internal.compiler.flow.ExceptionHandlingFlowContext: java.util.ArrayList extendedExceptions>;

        virtualinvoke $r8.<java.util.ArrayList: boolean add(java.lang.Object)>(r3);

     label9:
        return;
    }

    public void recordHandlingException(org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding, org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo, org.eclipse.jdt.internal.compiler.lookup.TypeBinding, org.eclipse.jdt.internal.compiler.ast.ASTNode, boolean)
    {
        org.eclipse.jdt.internal.compiler.ast.ASTNode r12;
        int[] $r3, $r10;
        int $i0, i1, $i2, i3, $i4, $i5, $i6, $i7, $i8, $i9;
        org.eclipse.jdt.internal.compiler.lookup.TypeBinding r11;
        org.eclipse.jdt.internal.compiler.codegen.ObjectCache $r2;
        boolean z0;
        org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo[] $r4, $r7, $r8;
        org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding r1;
        org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo $r5, r6, $r9, $r13;
        org.eclipse.jdt.internal.compiler.flow.ExceptionHandlingFlowContext r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.flow.ExceptionHandlingFlowContext;

        r1 := @parameter0: org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding;

        r6 := @parameter1: org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo;

        r11 := @parameter2: org.eclipse.jdt.internal.compiler.lookup.TypeBinding;

        r12 := @parameter3: org.eclipse.jdt.internal.compiler.ast.ASTNode;

        z0 := @parameter4: boolean;

        $r2 = r0.<org.eclipse.jdt.internal.compiler.flow.ExceptionHandlingFlowContext: org.eclipse.jdt.internal.compiler.codegen.ObjectCache indexes>;

        $i0 = virtualinvoke $r2.<org.eclipse.jdt.internal.compiler.codegen.ObjectCache: int get(java.lang.Object)>(r1);

        i1 = $i0 / 32;

        $i2 = $i0 % 32;

        i3 = 1 << $i2;

        if z0 != 0 goto label1;

        $r10 = r0.<org.eclipse.jdt.internal.compiler.flow.ExceptionHandlingFlowContext: int[] isNeeded>;

        $i8 = $r10[i1];

        $i9 = $i8 | i3;

        $r10[i1] = $i9;

     label1:
        $r3 = r0.<org.eclipse.jdt.internal.compiler.flow.ExceptionHandlingFlowContext: int[] isReached>;

        $i4 = $r3[i1];

        $i5 = $i4 | i3;

        $r3[i1] = $i5;

        $r7 = r0.<org.eclipse.jdt.internal.compiler.flow.ExceptionHandlingFlowContext: org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo[] initsOnExceptions>;

        $r4 = r0.<org.eclipse.jdt.internal.compiler.flow.ExceptionHandlingFlowContext: org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo[] initsOnExceptions>;

        $r5 = $r4[$i0];

        $i6 = $r5.<org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo: int tagBits>;

        $i7 = $i6 & 1;

        if $i7 != 0 goto label2;

        $r8 = r0.<org.eclipse.jdt.internal.compiler.flow.ExceptionHandlingFlowContext: org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo[] initsOnExceptions>;

        $r9 = $r8[$i0];

        $r13 = virtualinvoke $r9.<org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo: org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo mergedWith(org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo)>(r6);

        goto label3;

     label2:
        $r13 = virtualinvoke r6.<org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo: org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo unconditionalCopy()>();

     label3:
        $r7[$i0] = $r13;

        return;
    }

    public void recordReturnFrom(org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo)
    {
        org.eclipse.jdt.internal.compiler.flow.FlowInfo $r3;
        org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo r0, $r2, $r4, $r5, $r6;
        int $i0, $i1, $i2, $i3;
        org.eclipse.jdt.internal.compiler.flow.ExceptionHandlingFlowContext r1;

        r1 := @this: org.eclipse.jdt.internal.compiler.flow.ExceptionHandlingFlowContext;

        r0 := @parameter0: org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo: int tagBits>;

        $i1 = $i0 & 1;

        if $i1 != 0 goto label2;

        $r2 = r1.<org.eclipse.jdt.internal.compiler.flow.ExceptionHandlingFlowContext: org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo initsOnReturn>;

        $i2 = $r2.<org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo: int tagBits>;

        $i3 = $i2 & 1;

        if $i3 != 0 goto label1;

        $r5 = r1.<org.eclipse.jdt.internal.compiler.flow.ExceptionHandlingFlowContext: org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo initsOnReturn>;

        $r6 = virtualinvoke $r5.<org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo: org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo mergedWith(org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo)>(r0);

        r1.<org.eclipse.jdt.internal.compiler.flow.ExceptionHandlingFlowContext: org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo initsOnReturn> = $r6;

        goto label2;

     label1:
        $r3 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo: org.eclipse.jdt.internal.compiler.flow.FlowInfo copy()>();

        $r4 = (org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo) $r3;

        r1.<org.eclipse.jdt.internal.compiler.flow.ExceptionHandlingFlowContext: org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo initsOnReturn> = $r4;

     label2:
        return;
    }

    public org.eclipse.jdt.internal.compiler.ast.SubRoutineStatement subroutine()
    {
        org.eclipse.jdt.internal.compiler.ast.ASTNode $r1, $r4, $r5;
        org.eclipse.jdt.internal.compiler.ast.SubRoutineStatement $r3, $r6;
        org.eclipse.jdt.internal.compiler.flow.FlowContext $r2;
        org.eclipse.jdt.internal.compiler.flow.ExceptionHandlingFlowContext r0;
        boolean $z0;

        r0 := @this: org.eclipse.jdt.internal.compiler.flow.ExceptionHandlingFlowContext;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.flow.ExceptionHandlingFlowContext: org.eclipse.jdt.internal.compiler.ast.ASTNode associatedNode>;

        $z0 = $r1 instanceof org.eclipse.jdt.internal.compiler.ast.SubRoutineStatement;

        if $z0 == 0 goto label2;

        $r2 = r0.<org.eclipse.jdt.internal.compiler.flow.ExceptionHandlingFlowContext: org.eclipse.jdt.internal.compiler.flow.FlowContext parent>;

        $r3 = virtualinvoke $r2.<org.eclipse.jdt.internal.compiler.flow.FlowContext: org.eclipse.jdt.internal.compiler.ast.SubRoutineStatement subroutine()>();

        $r4 = r0.<org.eclipse.jdt.internal.compiler.flow.ExceptionHandlingFlowContext: org.eclipse.jdt.internal.compiler.ast.ASTNode associatedNode>;

        if $r3 != $r4 goto label1;

        return null;

     label1:
        $r5 = r0.<org.eclipse.jdt.internal.compiler.flow.ExceptionHandlingFlowContext: org.eclipse.jdt.internal.compiler.ast.ASTNode associatedNode>;

        $r6 = (org.eclipse.jdt.internal.compiler.ast.SubRoutineStatement) $r5;

        return $r6;

     label2:
        return null;
    }

    public static void <clinit>()
    {
        <org.eclipse.jdt.internal.compiler.flow.ExceptionHandlingFlowContext: int BitCacheSize> = 32;

        return;
    }
}
