class org.apache.commons.httpclient.AutoCloseInputStream extends java.io.FilterInputStream
{
    private boolean streamOpen;
    private boolean selfClosed;
    private org.apache.commons.httpclient.ResponseConsumedWatcher watcher;

    public void <init>(java.io.InputStream, org.apache.commons.httpclient.ResponseConsumedWatcher)
    {
        org.apache.commons.httpclient.AutoCloseInputStream r0;
        org.apache.commons.httpclient.ResponseConsumedWatcher r2;
        java.io.InputStream r1;

        r0 := @this: org.apache.commons.httpclient.AutoCloseInputStream;

        r1 := @parameter0: java.io.InputStream;

        r2 := @parameter1: org.apache.commons.httpclient.ResponseConsumedWatcher;

        specialinvoke r0.<java.io.FilterInputStream: void <init>(java.io.InputStream)>(r1);

        r0.<org.apache.commons.httpclient.AutoCloseInputStream: boolean streamOpen> = 1;

        r0.<org.apache.commons.httpclient.AutoCloseInputStream: boolean selfClosed> = 0;

        r0.<org.apache.commons.httpclient.AutoCloseInputStream: org.apache.commons.httpclient.ResponseConsumedWatcher watcher> = null;

        r0.<org.apache.commons.httpclient.AutoCloseInputStream: org.apache.commons.httpclient.ResponseConsumedWatcher watcher> = r2;

        return;
    }

    public int read() throws java.io.IOException
    {
        int $i0, i1, $i3;
        org.apache.commons.httpclient.AutoCloseInputStream r0;
        boolean $z0;

        r0 := @this: org.apache.commons.httpclient.AutoCloseInputStream;

        $i3 = (int) -1;

        i1 = $i3;

        $z0 = specialinvoke r0.<org.apache.commons.httpclient.AutoCloseInputStream: boolean isReadAllowed()>();

        if $z0 == 0 goto label1;

        $i0 = specialinvoke r0.<java.io.FilterInputStream: int read()>();

        i1 = $i0;

        specialinvoke r0.<org.apache.commons.httpclient.AutoCloseInputStream: void checkClose(int)>($i0);

     label1:
        return i1;
    }

    public int read(byte[], int, int) throws java.io.IOException
    {
        byte[] r1;
        int i0, i1, $i2, i3, $i5;
        org.apache.commons.httpclient.AutoCloseInputStream r0;
        boolean $z0;

        r0 := @this: org.apache.commons.httpclient.AutoCloseInputStream;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i5 = (int) -1;

        i3 = $i5;

        $z0 = specialinvoke r0.<org.apache.commons.httpclient.AutoCloseInputStream: boolean isReadAllowed()>();

        if $z0 == 0 goto label1;

        $i2 = specialinvoke r0.<java.io.FilterInputStream: int read(byte[],int,int)>(r1, i0, i1);

        i3 = $i2;

        specialinvoke r0.<org.apache.commons.httpclient.AutoCloseInputStream: void checkClose(int)>($i2);

     label1:
        return i3;
    }

    public int read(byte[]) throws java.io.IOException
    {
        byte[] r1;
        int $i0, i1, $i3;
        org.apache.commons.httpclient.AutoCloseInputStream r0;
        boolean $z0;

        r0 := @this: org.apache.commons.httpclient.AutoCloseInputStream;

        r1 := @parameter0: byte[];

        $i3 = (int) -1;

        i1 = $i3;

        $z0 = specialinvoke r0.<org.apache.commons.httpclient.AutoCloseInputStream: boolean isReadAllowed()>();

        if $z0 == 0 goto label1;

        $i0 = specialinvoke r0.<java.io.FilterInputStream: int read(byte[])>(r1);

        i1 = $i0;

        specialinvoke r0.<org.apache.commons.httpclient.AutoCloseInputStream: void checkClose(int)>($i0);

     label1:
        return i1;
    }

    public int available() throws java.io.IOException
    {
        int i0;
        org.apache.commons.httpclient.AutoCloseInputStream r0;
        boolean $z0;

        r0 := @this: org.apache.commons.httpclient.AutoCloseInputStream;

        i0 = 0;

        $z0 = specialinvoke r0.<org.apache.commons.httpclient.AutoCloseInputStream: boolean isReadAllowed()>();

        if $z0 == 0 goto label1;

        i0 = specialinvoke r0.<java.io.FilterInputStream: int available()>();

     label1:
        return i0;
    }

    public void close() throws java.io.IOException
    {
        org.apache.commons.httpclient.AutoCloseInputStream r0;
        boolean $z0;

        r0 := @this: org.apache.commons.httpclient.AutoCloseInputStream;

        $z0 = r0.<org.apache.commons.httpclient.AutoCloseInputStream: boolean selfClosed>;

        if $z0 != 0 goto label1;

        r0.<org.apache.commons.httpclient.AutoCloseInputStream: boolean selfClosed> = 1;

        specialinvoke r0.<org.apache.commons.httpclient.AutoCloseInputStream: void notifyWatcher()>();

     label1:
        return;
    }

    private void checkClose(int) throws java.io.IOException
    {
        int i0, $i2;
        org.apache.commons.httpclient.AutoCloseInputStream r0;

        r0 := @this: org.apache.commons.httpclient.AutoCloseInputStream;

        i0 := @parameter0: int;

        $i2 = (int) -1;

        if i0 != $i2 goto label1;

        specialinvoke r0.<org.apache.commons.httpclient.AutoCloseInputStream: void notifyWatcher()>();

     label1:
        return;
    }

    private boolean isReadAllowed() throws java.io.IOException
    {
        org.apache.commons.httpclient.AutoCloseInputStream r0;
        java.io.IOException $r1;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.commons.httpclient.AutoCloseInputStream;

        $z0 = r0.<org.apache.commons.httpclient.AutoCloseInputStream: boolean streamOpen>;

        if $z0 != 0 goto label1;

        $z2 = r0.<org.apache.commons.httpclient.AutoCloseInputStream: boolean selfClosed>;

        if $z2 == 0 goto label1;

        $r1 = new java.io.IOException;

        specialinvoke $r1.<java.io.IOException: void <init>(java.lang.String)>("Attempted read on closed stream.");

        throw $r1;

     label1:
        $z1 = r0.<org.apache.commons.httpclient.AutoCloseInputStream: boolean streamOpen>;

        return $z1;
    }

    private void notifyWatcher() throws java.io.IOException
    {
        org.apache.commons.httpclient.AutoCloseInputStream r0;
        org.apache.commons.httpclient.ResponseConsumedWatcher $r1, $r2;
        boolean $z0;

        r0 := @this: org.apache.commons.httpclient.AutoCloseInputStream;

        $z0 = r0.<org.apache.commons.httpclient.AutoCloseInputStream: boolean streamOpen>;

        if $z0 == 0 goto label1;

        specialinvoke r0.<java.io.FilterInputStream: void close()>();

        r0.<org.apache.commons.httpclient.AutoCloseInputStream: boolean streamOpen> = 0;

        $r1 = r0.<org.apache.commons.httpclient.AutoCloseInputStream: org.apache.commons.httpclient.ResponseConsumedWatcher watcher>;

        if $r1 == null goto label1;

        $r2 = r0.<org.apache.commons.httpclient.AutoCloseInputStream: org.apache.commons.httpclient.ResponseConsumedWatcher watcher>;

        interfaceinvoke $r2.<org.apache.commons.httpclient.ResponseConsumedWatcher: void responseConsumed()>();

     label1:
        return;
    }
}
