public class org.springframework.scheduling.'annotation'.AsyncAnnotationAdvisor extends org.springframework.aop.support.AbstractPointcutAdvisor
{
    private org.aopalliance.aop.Advice advice;
    private org.springframework.aop.Pointcut pointcut;

    public void <init>()
    {
        org.springframework.core.task.SimpleAsyncTaskExecutor $r1;
        org.springframework.scheduling.'annotation'.AsyncAnnotationAdvisor r0;

        r0 := @this: org.springframework.scheduling.'annotation'.AsyncAnnotationAdvisor;

        $r1 = new org.springframework.core.task.SimpleAsyncTaskExecutor;

        specialinvoke $r1.<org.springframework.core.task.SimpleAsyncTaskExecutor: void <init>()>();

        specialinvoke r0.<org.springframework.scheduling.'annotation'.AsyncAnnotationAdvisor: void <init>(java.util.concurrent.Executor)>($r1);

        return;
    }

    public void <init>(java.util.concurrent.Executor)
    {
        org.springframework.aop.Pointcut $r7;
        org.springframework.scheduling.'annotation'.AsyncAnnotationAdvisor r0;
        java.util.concurrent.Executor r5;
        org.aopalliance.aop.Advice $r6;
        java.lang.Class $r2, $r4;
        java.lang.ClassNotFoundException $r8;
        java.lang.ClassLoader $r3;
        java.util.LinkedHashSet $r1;

        r0 := @this: org.springframework.scheduling.'annotation'.AsyncAnnotationAdvisor;

        r5 := @parameter0: java.util.concurrent.Executor;

        specialinvoke r0.<org.springframework.aop.support.AbstractPointcutAdvisor: void <init>()>();

        $r1 = new java.util.LinkedHashSet;

        specialinvoke $r1.<java.util.LinkedHashSet: void <init>(int)>(2);

        interfaceinvoke $r1.<java.util.Set: boolean add(java.lang.Object)>(class "Lorg/springframework/scheduling/annotation/Async;");

        $r2 = class "Lorg/springframework/scheduling/annotation/AsyncAnnotationAdvisor;";

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

     label1:
        $r4 = virtualinvoke $r3.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>("javax.ejb.Asynchronous");

        interfaceinvoke $r1.<java.util.Set: boolean add(java.lang.Object)>($r4);

     label2:
        goto label4;

     label3:
        $r8 := @caughtexception;

     label4:
        $r6 = virtualinvoke r0.<org.springframework.scheduling.'annotation'.AsyncAnnotationAdvisor: org.aopalliance.aop.Advice buildAdvice(java.util.concurrent.Executor)>(r5);

        r0.<org.springframework.scheduling.'annotation'.AsyncAnnotationAdvisor: org.aopalliance.aop.Advice advice> = $r6;

        $r7 = virtualinvoke r0.<org.springframework.scheduling.'annotation'.AsyncAnnotationAdvisor: org.springframework.aop.Pointcut buildPointcut(java.util.Set)>($r1);

        r0.<org.springframework.scheduling.'annotation'.AsyncAnnotationAdvisor: org.springframework.aop.Pointcut pointcut> = $r7;

        return;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    public void setTaskExecutor(java.util.concurrent.Executor)
    {
        org.aopalliance.aop.Advice $r2;
        org.springframework.scheduling.'annotation'.AsyncAnnotationAdvisor r0;
        java.util.concurrent.Executor r1;

        r0 := @this: org.springframework.scheduling.'annotation'.AsyncAnnotationAdvisor;

        r1 := @parameter0: java.util.concurrent.Executor;

        $r2 = virtualinvoke r0.<org.springframework.scheduling.'annotation'.AsyncAnnotationAdvisor: org.aopalliance.aop.Advice buildAdvice(java.util.concurrent.Executor)>(r1);

        r0.<org.springframework.scheduling.'annotation'.AsyncAnnotationAdvisor: org.aopalliance.aop.Advice advice> = $r2;

        return;
    }

    public void setAsyncAnnotationType(java.lang.Class)
    {
        java.util.HashSet $r1;
        org.springframework.aop.Pointcut $r3;
        org.springframework.scheduling.'annotation'.AsyncAnnotationAdvisor r2;
        java.lang.Class r0;

        r2 := @this: org.springframework.scheduling.'annotation'.AsyncAnnotationAdvisor;

        r0 := @parameter0: java.lang.Class;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "\'asyncAnnotationType\' must not be null");

        $r1 = new java.util.HashSet;

        specialinvoke $r1.<java.util.HashSet: void <init>()>();

        interfaceinvoke $r1.<java.util.Set: boolean add(java.lang.Object)>(r0);

        $r3 = virtualinvoke r2.<org.springframework.scheduling.'annotation'.AsyncAnnotationAdvisor: org.springframework.aop.Pointcut buildPointcut(java.util.Set)>($r1);

        r2.<org.springframework.scheduling.'annotation'.AsyncAnnotationAdvisor: org.springframework.aop.Pointcut pointcut> = $r3;

        return;
    }

    public org.aopalliance.aop.Advice getAdvice()
    {
        org.aopalliance.aop.Advice $r1;
        org.springframework.scheduling.'annotation'.AsyncAnnotationAdvisor r0;

        r0 := @this: org.springframework.scheduling.'annotation'.AsyncAnnotationAdvisor;

        $r1 = r0.<org.springframework.scheduling.'annotation'.AsyncAnnotationAdvisor: org.aopalliance.aop.Advice advice>;

        return $r1;
    }

    public org.springframework.aop.Pointcut getPointcut()
    {
        org.springframework.aop.Pointcut $r1;
        org.springframework.scheduling.'annotation'.AsyncAnnotationAdvisor r0;

        r0 := @this: org.springframework.scheduling.'annotation'.AsyncAnnotationAdvisor;

        $r1 = r0.<org.springframework.scheduling.'annotation'.AsyncAnnotationAdvisor: org.springframework.aop.Pointcut pointcut>;

        return $r1;
    }

    protected org.aopalliance.aop.Advice buildAdvice(java.util.concurrent.Executor)
    {
        org.springframework.aop.interceptor.AsyncExecutionInterceptor $r1, $r2;
        java.util.concurrent.Executor r0;
        org.springframework.scheduling.'annotation'.AsyncAnnotationAdvisor r4;
        org.springframework.core.task.AsyncTaskExecutor $r3;
        boolean $z0;

        r4 := @this: org.springframework.scheduling.'annotation'.AsyncAnnotationAdvisor;

        r0 := @parameter0: java.util.concurrent.Executor;

        $z0 = r0 instanceof org.springframework.core.task.AsyncTaskExecutor;

        if $z0 == 0 goto label1;

        $r2 = new org.springframework.aop.interceptor.AsyncExecutionInterceptor;

        $r3 = (org.springframework.core.task.AsyncTaskExecutor) r0;

        specialinvoke $r2.<org.springframework.aop.interceptor.AsyncExecutionInterceptor: void <init>(org.springframework.core.task.AsyncTaskExecutor)>($r3);

        return $r2;

     label1:
        $r1 = new org.springframework.aop.interceptor.AsyncExecutionInterceptor;

        specialinvoke $r1.<org.springframework.aop.interceptor.AsyncExecutionInterceptor: void <init>(java.util.concurrent.Executor)>(r0);

        return $r1;
    }

    protected org.springframework.aop.Pointcut buildPointcut(java.util.Set)
    {
        org.springframework.aop.support.ComposablePointcut $r6, $r7, r9;
        java.util.Iterator $r1;
        org.springframework.scheduling.'annotation'.AsyncAnnotationAdvisor r8;
        java.util.Set r0;
        org.springframework.aop.support.'annotation'.AnnotationMatchingPointcut $r4, $r5;
        java.lang.Object $r2;
        java.lang.Class r3;
        boolean $z0;

        r8 := @this: org.springframework.scheduling.'annotation'.AsyncAnnotationAdvisor;

        r0 := @parameter0: java.util.Set;

        r9 = null;

        $r1 = interfaceinvoke r0.<java.util.Set: java.util.Iterator iterator()>();

        goto label3;

     label1:
        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.lang.Class) $r2;

        $r4 = new org.springframework.aop.support.'annotation'.AnnotationMatchingPointcut;

        specialinvoke $r4.<org.springframework.aop.support.'annotation'.AnnotationMatchingPointcut: void <init>(java.lang.Class,boolean)>(r3, 1);

        $r5 = new org.springframework.aop.support.'annotation'.AnnotationMatchingPointcut;

        specialinvoke $r5.<org.springframework.aop.support.'annotation'.AnnotationMatchingPointcut: void <init>(java.lang.Class,java.lang.Class)>(null, r3);

        if r9 != null goto label2;

        $r7 = new org.springframework.aop.support.ComposablePointcut;

        specialinvoke $r7.<org.springframework.aop.support.ComposablePointcut: void <init>(org.springframework.aop.Pointcut)>($r4);

        r9 = virtualinvoke $r7.<org.springframework.aop.support.ComposablePointcut: org.springframework.aop.support.ComposablePointcut union(org.springframework.aop.Pointcut)>($r5);

        goto label3;

     label2:
        $r6 = virtualinvoke r9.<org.springframework.aop.support.ComposablePointcut: org.springframework.aop.support.ComposablePointcut union(org.springframework.aop.Pointcut)>($r4);

        virtualinvoke $r6.<org.springframework.aop.support.ComposablePointcut: org.springframework.aop.support.ComposablePointcut union(org.springframework.aop.Pointcut)>($r5);

     label3:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        return r9;
    }
}
