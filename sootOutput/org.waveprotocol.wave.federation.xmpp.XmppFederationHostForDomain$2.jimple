class org.waveprotocol.wave.federation.xmpp.XmppFederationHostForDomain$2 extends java.lang.Object implements org.waveprotocol.wave.federation.xmpp.PacketCallback
{
    final org.waveprotocol.wave.federation.WaveletFederationListener$WaveletUpdateCallback val$callback;
    final org.waveprotocol.wave.federation.xmpp.XmppFederationHostForDomain this$0;

    void <init>(org.waveprotocol.wave.federation.xmpp.XmppFederationHostForDomain, org.waveprotocol.wave.federation.WaveletFederationListener$WaveletUpdateCallback)
    {
        org.waveprotocol.wave.federation.xmpp.XmppFederationHostForDomain r1;
        org.waveprotocol.wave.federation.WaveletFederationListener$WaveletUpdateCallback r2;
        org.waveprotocol.wave.federation.xmpp.XmppFederationHostForDomain$2 r0;

        r0 := @this: org.waveprotocol.wave.federation.xmpp.XmppFederationHostForDomain$2;

        r1 := @parameter0: org.waveprotocol.wave.federation.xmpp.XmppFederationHostForDomain;

        r2 := @parameter1: org.waveprotocol.wave.federation.WaveletFederationListener$WaveletUpdateCallback;

        r0.<org.waveprotocol.wave.federation.xmpp.XmppFederationHostForDomain$2: org.waveprotocol.wave.federation.xmpp.XmppFederationHostForDomain this$0> = r1;

        r0.<org.waveprotocol.wave.federation.xmpp.XmppFederationHostForDomain$2: org.waveprotocol.wave.federation.WaveletFederationListener$WaveletUpdateCallback val$callback> = r2;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void error(org.waveprotocol.wave.federation.FederationErrorProto$FederationError)
    {
        org.waveprotocol.wave.federation.FederationErrorProto$FederationError r1;
        org.waveprotocol.wave.federation.WaveletFederationListener$WaveletUpdateCallback $r2;
        org.waveprotocol.wave.federation.xmpp.XmppFederationHostForDomain$2 r0;

        r0 := @this: org.waveprotocol.wave.federation.xmpp.XmppFederationHostForDomain$2;

        r1 := @parameter0: org.waveprotocol.wave.federation.FederationErrorProto$FederationError;

        $r2 = r0.<org.waveprotocol.wave.federation.xmpp.XmppFederationHostForDomain$2: org.waveprotocol.wave.federation.WaveletFederationListener$WaveletUpdateCallback val$callback>;

        interfaceinvoke $r2.<org.waveprotocol.wave.federation.WaveletFederationListener$WaveletUpdateCallback: void onFailure(org.waveprotocol.wave.federation.FederationErrorProto$FederationError)>(r1);

        return;
    }

    public void run(org.xmpp.packet.Packet)
    {
        org.waveprotocol.wave.federation.WaveletFederationListener$WaveletUpdateCallback $r1;
        org.waveprotocol.wave.federation.xmpp.XmppFederationHostForDomain$2 r0;
        org.xmpp.packet.Packet r2;

        r0 := @this: org.waveprotocol.wave.federation.xmpp.XmppFederationHostForDomain$2;

        r2 := @parameter0: org.xmpp.packet.Packet;

        $r1 = r0.<org.waveprotocol.wave.federation.xmpp.XmppFederationHostForDomain$2: org.waveprotocol.wave.federation.WaveletFederationListener$WaveletUpdateCallback val$callback>;

        interfaceinvoke $r1.<org.waveprotocol.wave.federation.WaveletFederationListener$WaveletUpdateCallback: void onSuccess()>();

        return;
    }
}
