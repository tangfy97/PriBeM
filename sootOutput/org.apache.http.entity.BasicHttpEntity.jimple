public class org.apache.http.entity.BasicHttpEntity extends org.apache.http.entity.AbstractHttpEntity
{
    private java.io.InputStream content;
    private long length;

    public void <init>()
    {
        org.apache.http.entity.BasicHttpEntity r0;

        r0 := @this: org.apache.http.entity.BasicHttpEntity;

        specialinvoke r0.<org.apache.http.entity.AbstractHttpEntity: void <init>()>();

        r0.<org.apache.http.entity.BasicHttpEntity: long length> = -1L;

        return;
    }

    public long getContentLength()
    {
        long $l0;
        org.apache.http.entity.BasicHttpEntity r0;

        r0 := @this: org.apache.http.entity.BasicHttpEntity;

        $l0 = r0.<org.apache.http.entity.BasicHttpEntity: long length>;

        return $l0;
    }

    public java.io.InputStream getContent() throws java.lang.IllegalStateException
    {
        java.lang.IllegalStateException $r3;
        org.apache.http.entity.BasicHttpEntity r0;
        java.io.InputStream $r1, $r2;

        r0 := @this: org.apache.http.entity.BasicHttpEntity;

        $r1 = r0.<org.apache.http.entity.BasicHttpEntity: java.io.InputStream content>;

        if $r1 != null goto label1;

        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Content has not been provided");

        throw $r3;

     label1:
        $r2 = r0.<org.apache.http.entity.BasicHttpEntity: java.io.InputStream content>;

        return $r2;
    }

    public boolean isRepeatable()
    {
        org.apache.http.entity.BasicHttpEntity r0;

        r0 := @this: org.apache.http.entity.BasicHttpEntity;

        return 0;
    }

    public void setContentLength(long)
    {
        long l0;
        org.apache.http.entity.BasicHttpEntity r0;

        r0 := @this: org.apache.http.entity.BasicHttpEntity;

        l0 := @parameter0: long;

        r0.<org.apache.http.entity.BasicHttpEntity: long length> = l0;

        return;
    }

    public void setContent(java.io.InputStream)
    {
        org.apache.http.entity.BasicHttpEntity r0;
        java.io.InputStream r1;

        r0 := @this: org.apache.http.entity.BasicHttpEntity;

        r1 := @parameter0: java.io.InputStream;

        r0.<org.apache.http.entity.BasicHttpEntity: java.io.InputStream content> = r1;

        return;
    }

    public void writeTo(java.io.OutputStream) throws java.io.IOException
    {
        java.io.OutputStream r0;
        java.lang.Throwable $r5;
        byte[] r3;
        java.lang.IllegalArgumentException $r6;
        org.apache.http.entity.BasicHttpEntity r1;
        int $i0, $i2;
        java.io.InputStream $r2;

        r1 := @this: org.apache.http.entity.BasicHttpEntity;

        r0 := @parameter0: java.io.OutputStream;

        if r0 != null goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Output stream may not be null");

        throw $r6;

     label1:
        $r2 = virtualinvoke r1.<org.apache.http.entity.BasicHttpEntity: java.io.InputStream getContent()>();

     label2:
        r3 = newarray (byte)[2048];

     label3:
        $i0 = virtualinvoke $r2.<java.io.InputStream: int read(byte[])>(r3);

        $i2 = (int) -1;

        if $i0 == $i2 goto label4;

        virtualinvoke r0.<java.io.OutputStream: void write(byte[],int,int)>(r3, 0, $i0);

        goto label3;

     label4:
        virtualinvoke $r2.<java.io.InputStream: void close()>();

        goto label7;

     label5:
        $r5 := @caughtexception;

     label6:
        virtualinvoke $r2.<java.io.InputStream: void close()>();

        throw $r5;

     label7:
        return;

        catch java.lang.Throwable from label2 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public boolean isStreaming()
    {
        org.apache.http.entity.BasicHttpEntity r0;
        java.io.InputStream $r1;
        boolean $z0;

        r0 := @this: org.apache.http.entity.BasicHttpEntity;

        $r1 = r0.<org.apache.http.entity.BasicHttpEntity: java.io.InputStream content>;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void consumeContent() throws java.io.IOException
    {
        org.apache.http.entity.BasicHttpEntity r0;
        java.io.InputStream $r1, $r2;

        r0 := @this: org.apache.http.entity.BasicHttpEntity;

        $r1 = r0.<org.apache.http.entity.BasicHttpEntity: java.io.InputStream content>;

        if $r1 == null goto label1;

        $r2 = r0.<org.apache.http.entity.BasicHttpEntity: java.io.InputStream content>;

        virtualinvoke $r2.<java.io.InputStream: void close()>();

     label1:
        return;
    }
}
