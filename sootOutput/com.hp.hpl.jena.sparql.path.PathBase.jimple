public abstract class com.hp.hpl.jena.sparql.path.PathBase extends java.lang.Object implements com.hp.hpl.jena.sparql.path.Path
{
    protected static final int hashAlt;
    protected static final int hashSeq;
    protected static final int hashMod;
    protected static final int hashInverse;
    protected static final int hashNegPropClass;
    protected static final int hashLink;
    protected static final int hashRevLink;
    protected static final int hashZeroOrMore1;
    protected static final int hashOneOrMore1;
    protected static final int hashZeroOrMoreN;
    protected static final int hashOneOrMoreN;
    protected static final int hashZeroOrOne;
    protected static final int hashFixedLength;
    protected static final int hashDistinct;
    protected static final int hashMulti;
    protected static final int hashShortest;

    public void <init>()
    {
        com.hp.hpl.jena.sparql.path.PathBase r0;

        r0 := @this: com.hp.hpl.jena.sparql.path.PathBase;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public abstract int hashCode();

    public abstract boolean equalTo(com.hp.hpl.jena.sparql.path.Path, com.hp.hpl.jena.sparql.util.NodeIsomorphismMap);

    public final boolean equals(java.lang.Object)
    {
        com.hp.hpl.jena.sparql.path.Path $r2;
        com.hp.hpl.jena.sparql.path.PathBase r0;
        java.lang.Object r1;
        boolean $z0, $z1;

        r0 := @this: com.hp.hpl.jena.sparql.path.PathBase;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = r1 instanceof com.hp.hpl.jena.sparql.path.Path;

        if $z0 != 0 goto label2;

        return 0;

     label2:
        $r2 = (com.hp.hpl.jena.sparql.path.Path) r1;

        $z1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.path.PathBase: boolean equalTo(com.hp.hpl.jena.sparql.path.Path,com.hp.hpl.jena.sparql.util.NodeIsomorphismMap)>($r2, null);

        return $z1;
    }

    public java.lang.String toString()
    {
        java.lang.String $r1;
        com.hp.hpl.jena.sparql.path.PathBase r0;

        r0 := @this: com.hp.hpl.jena.sparql.path.PathBase;

        $r1 = staticinvoke <com.hp.hpl.jena.sparql.path.PathWriter: java.lang.String asString(com.hp.hpl.jena.sparql.path.Path)>(r0);

        return $r1;
    }

    public java.lang.String toString(com.hp.hpl.jena.sparql.core.Prologue)
    {
        java.lang.String $r2;
        com.hp.hpl.jena.sparql.core.Prologue r1;
        com.hp.hpl.jena.sparql.path.PathBase r0;

        r0 := @this: com.hp.hpl.jena.sparql.path.PathBase;

        r1 := @parameter0: com.hp.hpl.jena.sparql.core.Prologue;

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.path.PathWriter: java.lang.String asString(com.hp.hpl.jena.sparql.path.Path,com.hp.hpl.jena.sparql.core.Prologue)>(r0, r1);

        return $r2;
    }

    public static void <clinit>()
    {
        <com.hp.hpl.jena.sparql.path.PathBase: int hashShortest> = 517;

        <com.hp.hpl.jena.sparql.path.PathBase: int hashMulti> = 516;

        <com.hp.hpl.jena.sparql.path.PathBase: int hashDistinct> = 515;

        <com.hp.hpl.jena.sparql.path.PathBase: int hashFixedLength> = 514;

        <com.hp.hpl.jena.sparql.path.PathBase: int hashZeroOrOne> = 513;

        <com.hp.hpl.jena.sparql.path.PathBase: int hashOneOrMoreN> = 512;

        <com.hp.hpl.jena.sparql.path.PathBase: int hashZeroOrMoreN> = 409;

        <com.hp.hpl.jena.sparql.path.PathBase: int hashOneOrMore1> = 408;

        <com.hp.hpl.jena.sparql.path.PathBase: int hashZeroOrMore1> = 407;

        <com.hp.hpl.jena.sparql.path.PathBase: int hashRevLink> = 406;

        <com.hp.hpl.jena.sparql.path.PathBase: int hashLink> = 405;

        <com.hp.hpl.jena.sparql.path.PathBase: int hashNegPropClass> = 404;

        <com.hp.hpl.jena.sparql.path.PathBase: int hashInverse> = 403;

        <com.hp.hpl.jena.sparql.path.PathBase: int hashMod> = 402;

        <com.hp.hpl.jena.sparql.path.PathBase: int hashSeq> = 401;

        <com.hp.hpl.jena.sparql.path.PathBase: int hashAlt> = 400;

        return;
    }
}
