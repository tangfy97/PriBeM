public final class org.apache.xmlbeans.XmlBeans extends java.lang.Object
{
    private static java.lang.String XMLBEANS_TITLE;
    private static java.lang.String XMLBEANS_VERSION;
    private static java.lang.String XMLBEANS_VENDOR;
    private static final java.lang.ThreadLocal _threadLocalLoaderQNameCache;
    private static final java.lang.reflect.Method _getContextTypeLoaderMethod;
    private static final java.lang.reflect.Method _getBuiltinSchemaTypeSystemMethod;
    private static final java.lang.reflect.Method _getNoTypeMethod;
    private static final java.lang.reflect.Method _typeLoaderBuilderMethod;
    private static final java.lang.reflect.Method _compilationMethod;
    private static final java.lang.reflect.Method _nodeToCursorMethod;
    private static final java.lang.reflect.Method _nodeToXmlObjectMethod;
    private static final java.lang.reflect.Method _nodeToXmlStreamMethod;
    private static final java.lang.reflect.Method _streamToNodeMethod;
    private static final java.lang.reflect.Constructor _pathResourceLoaderConstructor;
    private static final java.lang.String HOLDER_CLASS_NAME;
    private static final java.lang.String TYPE_SYSTEM_FIELD;
    public static org.apache.xmlbeans.SchemaType NO_TYPE;
    static java.lang.Class class$org$apache$xmlbeans$XmlBeans;
    static java.lang.Class class$org$w3c$dom$Node;
    static java.lang.Class array$Lorg$apache$xmlbeans$SchemaTypeLoader;
    static java.lang.Class class$org$apache$xmlbeans$ResourceLoader;
    static java.lang.Class class$java$lang$ClassLoader;
    static java.lang.Class class$java$lang$String;
    static java.lang.Class class$org$apache$xmlbeans$SchemaTypeSystem;
    static java.lang.Class array$Lorg$apache$xmlbeans$XmlObject;
    static java.lang.Class class$org$apache$xmlbeans$BindingConfig;
    static java.lang.Class class$org$apache$xmlbeans$SchemaTypeLoader;
    static java.lang.Class class$org$apache$xmlbeans$Filer;
    static java.lang.Class class$org$apache$xmlbeans$XmlOptions;
    static java.lang.Class class$javax$xml$stream$XMLStreamReader;
    static java.lang.Class array$Ljava$io$File;
    static java.lang.Class class$org$apache$xmlbeans$XmlObject;

    public static final java.lang.String getTitle()
    {
        java.lang.String $r0;

        $r0 = <org.apache.xmlbeans.XmlBeans: java.lang.String XMLBEANS_TITLE>;

        return $r0;
    }

    public static final java.lang.String getVendor()
    {
        java.lang.String $r0;

        $r0 = <org.apache.xmlbeans.XmlBeans: java.lang.String XMLBEANS_VENDOR>;

        return $r0;
    }

    public static final java.lang.String getVersion()
    {
        java.lang.String $r0;

        $r0 = <org.apache.xmlbeans.XmlBeans: java.lang.String XMLBEANS_VERSION>;

        return $r0;
    }

    public static org.apache.xmlbeans.QNameCache getQNameCache()
    {
        java.lang.ThreadLocal $r0, $r6;
        java.lang.Object $r1, $r3;
        java.lang.ref.SoftReference r2, $r5;
        org.apache.xmlbeans.QNameCache $r4, r7;

        $r0 = <org.apache.xmlbeans.XmlBeans: java.lang.ThreadLocal _threadLocalLoaderQNameCache>;

        $r1 = virtualinvoke $r0.<java.lang.ThreadLocal: java.lang.Object get()>();

        r2 = (java.lang.ref.SoftReference) $r1;

        $r3 = virtualinvoke r2.<java.lang.ref.SoftReference: java.lang.Object get()>();

        r7 = (org.apache.xmlbeans.QNameCache) $r3;

        if r7 != null goto label1;

        $r4 = new org.apache.xmlbeans.QNameCache;

        specialinvoke $r4.<org.apache.xmlbeans.QNameCache: void <init>(int)>(32);

        r7 = $r4;

        $r6 = <org.apache.xmlbeans.XmlBeans: java.lang.ThreadLocal _threadLocalLoaderQNameCache>;

        $r5 = new java.lang.ref.SoftReference;

        specialinvoke $r5.<java.lang.ref.SoftReference: void <init>(java.lang.Object)>($r4);

        virtualinvoke $r6.<java.lang.ThreadLocal: void set(java.lang.Object)>($r5);

     label1:
        return r7;
    }

    public static javax.xml.namespace.QName getQName(java.lang.String)
    {
        java.lang.String r1;
        javax.xml.namespace.QName $r2;
        org.apache.xmlbeans.QNameCache $r0;

        r1 := @parameter0: java.lang.String;

        $r0 = staticinvoke <org.apache.xmlbeans.XmlBeans: org.apache.xmlbeans.QNameCache getQNameCache()>();

        $r2 = virtualinvoke $r0.<org.apache.xmlbeans.QNameCache: javax.xml.namespace.QName getName(java.lang.String,java.lang.String)>("", r1);

        return $r2;
    }

    public static javax.xml.namespace.QName getQName(java.lang.String, java.lang.String)
    {
        java.lang.String r1, r2;
        javax.xml.namespace.QName $r3;
        org.apache.xmlbeans.QNameCache $r0;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r0 = staticinvoke <org.apache.xmlbeans.XmlBeans: org.apache.xmlbeans.QNameCache getQNameCache()>();

        $r3 = virtualinvoke $r0.<org.apache.xmlbeans.QNameCache: javax.xml.namespace.QName getName(java.lang.String,java.lang.String)>(r1, r2);

        return $r3;
    }

    private static java.lang.RuntimeException causedException(java.lang.RuntimeException, java.lang.Throwable)
    {
        java.lang.Throwable r1;
        java.lang.RuntimeException r0;

        r0 := @parameter0: java.lang.RuntimeException;

        r1 := @parameter1: java.lang.Throwable;

        virtualinvoke r0.<java.lang.RuntimeException: java.lang.Throwable initCause(java.lang.Throwable)>(r1);

        return r0;
    }

    private static org.apache.xmlbeans.XmlException wrappedException(java.lang.Throwable)
    {
        java.lang.Throwable r0;
        org.apache.xmlbeans.XmlException $r1, $r3;
        java.lang.String $r2;
        boolean $z0;

        r0 := @parameter0: java.lang.Throwable;

        $z0 = r0 instanceof org.apache.xmlbeans.XmlException;

        if $z0 == 0 goto label1;

        $r3 = (org.apache.xmlbeans.XmlException) r0;

        return $r3;

     label1:
        $r1 = new org.apache.xmlbeans.XmlException;

        $r2 = virtualinvoke r0.<java.lang.Throwable: java.lang.String getMessage()>();

        specialinvoke $r1.<org.apache.xmlbeans.XmlException: void <init>(java.lang.String,java.lang.Throwable)>($r2, r0);

        return $r1;
    }

    private static final java.lang.reflect.Constructor buildConstructor(java.lang.String, java.lang.Class[])
    {
        java.lang.IllegalStateException $r7;
        java.lang.Class[] r4;
        java.lang.RuntimeException $r13;
        java.lang.reflect.Constructor $r5;
        java.lang.Exception $r6;
        java.lang.StringBuffer $r8, $r9, $r10, $r11;
        java.lang.Class $r1, $r3, $r14;
        java.lang.String r0, $r12;
        java.lang.ClassLoader $r2;

        r0 := @parameter0: java.lang.String;

        r4 := @parameter1: java.lang.Class[];

     label1:
        $r1 = <org.apache.xmlbeans.XmlBeans: java.lang.Class class$org$apache$xmlbeans$XmlBeans>;

        if $r1 != null goto label2;

        $r14 = staticinvoke <org.apache.xmlbeans.XmlBeans: java.lang.Class class$(java.lang.String)>("org.apache.xmlbeans.XmlBeans");

        <org.apache.xmlbeans.XmlBeans: java.lang.Class class$org$apache$xmlbeans$XmlBeans> = $r14;

        goto label3;

     label2:
        $r14 = <org.apache.xmlbeans.XmlBeans: java.lang.Class class$org$apache$xmlbeans$XmlBeans>;

     label3:
        $r2 = virtualinvoke $r14.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r3 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>(r0, 0, $r2);

        $r5 = virtualinvoke $r3.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>(r4);

     label4:
        return $r5;

     label5:
        $r6 := @caughtexception;

        $r7 = new java.lang.IllegalStateException;

        $r8 = new java.lang.StringBuffer;

        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Cannot load constructor for ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r0);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(": verify that xbean.jar is on the classpath");

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r12);

        $r13 = staticinvoke <org.apache.xmlbeans.XmlBeans: java.lang.RuntimeException causedException(java.lang.RuntimeException,java.lang.Throwable)>($r7, $r6);

        throw $r13;

        catch java.lang.Exception from label1 to label4 with label5;
    }

    private static final java.lang.reflect.Method buildMethod(java.lang.String, java.lang.String, java.lang.Class[])
    {
        java.lang.IllegalStateException $r8;
        java.lang.StringBuffer $r9, $r10, $r11, $r12;
        java.lang.String r0, r4, $r13;
        java.lang.reflect.Method $r6;
        java.lang.Class[] r5;
        java.lang.RuntimeException $r14;
        java.lang.Exception $r7;
        java.lang.Class $r1, $r3, $r15;
        java.lang.ClassLoader $r2;

        r0 := @parameter0: java.lang.String;

        r4 := @parameter1: java.lang.String;

        r5 := @parameter2: java.lang.Class[];

     label1:
        $r1 = <org.apache.xmlbeans.XmlBeans: java.lang.Class class$org$apache$xmlbeans$XmlBeans>;

        if $r1 != null goto label2;

        $r15 = staticinvoke <org.apache.xmlbeans.XmlBeans: java.lang.Class class$(java.lang.String)>("org.apache.xmlbeans.XmlBeans");

        <org.apache.xmlbeans.XmlBeans: java.lang.Class class$org$apache$xmlbeans$XmlBeans> = $r15;

        goto label3;

     label2:
        $r15 = <org.apache.xmlbeans.XmlBeans: java.lang.Class class$org$apache$xmlbeans$XmlBeans>;

     label3:
        $r2 = virtualinvoke $r15.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r3 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>(r0, 0, $r2);

        $r6 = virtualinvoke $r3.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(r4, r5);

     label4:
        return $r6;

     label5:
        $r7 := @caughtexception;

        $r8 = new java.lang.IllegalStateException;

        $r9 = new java.lang.StringBuffer;

        specialinvoke $r9.<java.lang.StringBuffer: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Cannot load ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r4);

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(": verify that xbean.jar is on the classpath");

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r13);

        $r14 = staticinvoke <org.apache.xmlbeans.XmlBeans: java.lang.RuntimeException causedException(java.lang.RuntimeException,java.lang.Throwable)>($r8, $r7);

        throw $r14;

        catch java.lang.Exception from label1 to label4 with label5;
    }

    private static final java.lang.reflect.Method buildNoArgMethod(java.lang.String, java.lang.String)
    {
        java.lang.Class[] $r2;
        java.lang.String r0, r1;
        java.lang.reflect.Method $r3;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $r2 = newarray (java.lang.Class)[0];

        $r3 = staticinvoke <org.apache.xmlbeans.XmlBeans: java.lang.reflect.Method buildMethod(java.lang.String,java.lang.String,java.lang.Class[])>(r0, r1, $r2);

        return $r3;
    }

    private static final java.lang.reflect.Method buildNodeMethod(java.lang.String, java.lang.String)
    {
        java.lang.Class[] $r2;
        java.lang.Class $r3, $r5;
        java.lang.String r0, r1;
        java.lang.reflect.Method $r4;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $r2 = newarray (java.lang.Class)[1];

        $r3 = <org.apache.xmlbeans.XmlBeans: java.lang.Class class$org$w3c$dom$Node>;

        if $r3 != null goto label1;

        $r5 = staticinvoke <org.apache.xmlbeans.XmlBeans: java.lang.Class class$(java.lang.String)>("org.w3c.dom.Node");

        <org.apache.xmlbeans.XmlBeans: java.lang.Class class$org$w3c$dom$Node> = $r5;

        goto label2;

     label1:
        $r5 = <org.apache.xmlbeans.XmlBeans: java.lang.Class class$org$w3c$dom$Node>;

     label2:
        $r2[0] = $r5;

        $r4 = staticinvoke <org.apache.xmlbeans.XmlBeans: java.lang.reflect.Method buildMethod(java.lang.String,java.lang.String,java.lang.Class[])>(r0, r1, $r2);

        return $r4;
    }

    private static java.lang.reflect.Method buildGetContextTypeLoaderMethod()
    {
        java.lang.reflect.Method $r0;

        $r0 = staticinvoke <org.apache.xmlbeans.XmlBeans: java.lang.reflect.Method buildNoArgMethod(java.lang.String,java.lang.String)>("org.apache.xmlbeans.impl.schema.SchemaTypeLoaderImpl", "getContextTypeLoader");

        return $r0;
    }

    private static final java.lang.reflect.Method buildGetBuiltinSchemaTypeSystemMethod()
    {
        java.lang.reflect.Method $r0;

        $r0 = staticinvoke <org.apache.xmlbeans.XmlBeans: java.lang.reflect.Method buildNoArgMethod(java.lang.String,java.lang.String)>("org.apache.xmlbeans.impl.schema.BuiltinSchemaTypeSystem", "get");

        return $r0;
    }

    private static final java.lang.reflect.Method buildGetNoTypeMethod()
    {
        java.lang.reflect.Method $r0;

        $r0 = staticinvoke <org.apache.xmlbeans.XmlBeans: java.lang.reflect.Method buildNoArgMethod(java.lang.String,java.lang.String)>("org.apache.xmlbeans.impl.schema.BuiltinSchemaTypeSystem", "getNoType");

        return $r0;
    }

    private static final java.lang.reflect.Method buildTypeLoaderBuilderMethod()
    {
        java.lang.Class[] $r0;
        java.lang.Class $r1, $r2, $r3, $r5, $r6, $r7;
        java.lang.reflect.Method $r4;

        $r0 = newarray (java.lang.Class)[3];

        $r1 = <org.apache.xmlbeans.XmlBeans: java.lang.Class array$Lorg$apache$xmlbeans$SchemaTypeLoader>;

        if $r1 != null goto label1;

        $r5 = staticinvoke <org.apache.xmlbeans.XmlBeans: java.lang.Class class$(java.lang.String)>("[Lorg.apache.xmlbeans.SchemaTypeLoader;");

        <org.apache.xmlbeans.XmlBeans: java.lang.Class array$Lorg$apache$xmlbeans$SchemaTypeLoader> = $r5;

        goto label2;

     label1:
        $r5 = <org.apache.xmlbeans.XmlBeans: java.lang.Class array$Lorg$apache$xmlbeans$SchemaTypeLoader>;

     label2:
        $r0[0] = $r5;

        $r2 = <org.apache.xmlbeans.XmlBeans: java.lang.Class class$org$apache$xmlbeans$ResourceLoader>;

        if $r2 != null goto label3;

        $r6 = staticinvoke <org.apache.xmlbeans.XmlBeans: java.lang.Class class$(java.lang.String)>("org.apache.xmlbeans.ResourceLoader");

        <org.apache.xmlbeans.XmlBeans: java.lang.Class class$org$apache$xmlbeans$ResourceLoader> = $r6;

        goto label4;

     label3:
        $r6 = <org.apache.xmlbeans.XmlBeans: java.lang.Class class$org$apache$xmlbeans$ResourceLoader>;

     label4:
        $r0[1] = $r6;

        $r3 = <org.apache.xmlbeans.XmlBeans: java.lang.Class class$java$lang$ClassLoader>;

        if $r3 != null goto label5;

        $r7 = staticinvoke <org.apache.xmlbeans.XmlBeans: java.lang.Class class$(java.lang.String)>("java.lang.ClassLoader");

        <org.apache.xmlbeans.XmlBeans: java.lang.Class class$java$lang$ClassLoader> = $r7;

        goto label6;

     label5:
        $r7 = <org.apache.xmlbeans.XmlBeans: java.lang.Class class$java$lang$ClassLoader>;

     label6:
        $r0[2] = $r7;

        $r4 = staticinvoke <org.apache.xmlbeans.XmlBeans: java.lang.reflect.Method buildMethod(java.lang.String,java.lang.String,java.lang.Class[])>("org.apache.xmlbeans.impl.schema.SchemaTypeLoaderImpl", "build", $r0);

        return $r4;
    }

    private static final java.lang.reflect.Method buildCompilationMethod()
    {
        java.lang.reflect.Method $r8;
        java.lang.Class[] $r0;
        java.lang.Class $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r9, $r10, $r11, $r12, $r13, $r14, $r15;

        $r0 = newarray (java.lang.Class)[7];

        $r1 = <org.apache.xmlbeans.XmlBeans: java.lang.Class class$java$lang$String>;

        if $r1 != null goto label01;

        $r9 = staticinvoke <org.apache.xmlbeans.XmlBeans: java.lang.Class class$(java.lang.String)>("java.lang.String");

        <org.apache.xmlbeans.XmlBeans: java.lang.Class class$java$lang$String> = $r9;

        goto label02;

     label01:
        $r9 = <org.apache.xmlbeans.XmlBeans: java.lang.Class class$java$lang$String>;

     label02:
        $r0[0] = $r9;

        $r2 = <org.apache.xmlbeans.XmlBeans: java.lang.Class class$org$apache$xmlbeans$SchemaTypeSystem>;

        if $r2 != null goto label03;

        $r10 = staticinvoke <org.apache.xmlbeans.XmlBeans: java.lang.Class class$(java.lang.String)>("org.apache.xmlbeans.SchemaTypeSystem");

        <org.apache.xmlbeans.XmlBeans: java.lang.Class class$org$apache$xmlbeans$SchemaTypeSystem> = $r10;

        goto label04;

     label03:
        $r10 = <org.apache.xmlbeans.XmlBeans: java.lang.Class class$org$apache$xmlbeans$SchemaTypeSystem>;

     label04:
        $r0[1] = $r10;

        $r3 = <org.apache.xmlbeans.XmlBeans: java.lang.Class array$Lorg$apache$xmlbeans$XmlObject>;

        if $r3 != null goto label05;

        $r11 = staticinvoke <org.apache.xmlbeans.XmlBeans: java.lang.Class class$(java.lang.String)>("[Lorg.apache.xmlbeans.XmlObject;");

        <org.apache.xmlbeans.XmlBeans: java.lang.Class array$Lorg$apache$xmlbeans$XmlObject> = $r11;

        goto label06;

     label05:
        $r11 = <org.apache.xmlbeans.XmlBeans: java.lang.Class array$Lorg$apache$xmlbeans$XmlObject>;

     label06:
        $r0[2] = $r11;

        $r4 = <org.apache.xmlbeans.XmlBeans: java.lang.Class class$org$apache$xmlbeans$BindingConfig>;

        if $r4 != null goto label07;

        $r12 = staticinvoke <org.apache.xmlbeans.XmlBeans: java.lang.Class class$(java.lang.String)>("org.apache.xmlbeans.BindingConfig");

        <org.apache.xmlbeans.XmlBeans: java.lang.Class class$org$apache$xmlbeans$BindingConfig> = $r12;

        goto label08;

     label07:
        $r12 = <org.apache.xmlbeans.XmlBeans: java.lang.Class class$org$apache$xmlbeans$BindingConfig>;

     label08:
        $r0[3] = $r12;

        $r5 = <org.apache.xmlbeans.XmlBeans: java.lang.Class class$org$apache$xmlbeans$SchemaTypeLoader>;

        if $r5 != null goto label09;

        $r13 = staticinvoke <org.apache.xmlbeans.XmlBeans: java.lang.Class class$(java.lang.String)>("org.apache.xmlbeans.SchemaTypeLoader");

        <org.apache.xmlbeans.XmlBeans: java.lang.Class class$org$apache$xmlbeans$SchemaTypeLoader> = $r13;

        goto label10;

     label09:
        $r13 = <org.apache.xmlbeans.XmlBeans: java.lang.Class class$org$apache$xmlbeans$SchemaTypeLoader>;

     label10:
        $r0[4] = $r13;

        $r6 = <org.apache.xmlbeans.XmlBeans: java.lang.Class class$org$apache$xmlbeans$Filer>;

        if $r6 != null goto label11;

        $r14 = staticinvoke <org.apache.xmlbeans.XmlBeans: java.lang.Class class$(java.lang.String)>("org.apache.xmlbeans.Filer");

        <org.apache.xmlbeans.XmlBeans: java.lang.Class class$org$apache$xmlbeans$Filer> = $r14;

        goto label12;

     label11:
        $r14 = <org.apache.xmlbeans.XmlBeans: java.lang.Class class$org$apache$xmlbeans$Filer>;

     label12:
        $r0[5] = $r14;

        $r7 = <org.apache.xmlbeans.XmlBeans: java.lang.Class class$org$apache$xmlbeans$XmlOptions>;

        if $r7 != null goto label13;

        $r15 = staticinvoke <org.apache.xmlbeans.XmlBeans: java.lang.Class class$(java.lang.String)>("org.apache.xmlbeans.XmlOptions");

        <org.apache.xmlbeans.XmlBeans: java.lang.Class class$org$apache$xmlbeans$XmlOptions> = $r15;

        goto label14;

     label13:
        $r15 = <org.apache.xmlbeans.XmlBeans: java.lang.Class class$org$apache$xmlbeans$XmlOptions>;

     label14:
        $r0[6] = $r15;

        $r8 = staticinvoke <org.apache.xmlbeans.XmlBeans: java.lang.reflect.Method buildMethod(java.lang.String,java.lang.String,java.lang.Class[])>("org.apache.xmlbeans.impl.schema.SchemaTypeSystemCompiler", "compile", $r0);

        return $r8;
    }

    private static final java.lang.reflect.Method buildNodeToCursorMethod()
    {
        java.lang.reflect.Method $r0;

        $r0 = staticinvoke <org.apache.xmlbeans.XmlBeans: java.lang.reflect.Method buildNodeMethod(java.lang.String,java.lang.String)>("org.apache.xmlbeans.impl.store.Locale", "nodeToCursor");

        return $r0;
    }

    private static final java.lang.reflect.Method buildNodeToXmlObjectMethod()
    {
        java.lang.reflect.Method $r0;

        $r0 = staticinvoke <org.apache.xmlbeans.XmlBeans: java.lang.reflect.Method buildNodeMethod(java.lang.String,java.lang.String)>("org.apache.xmlbeans.impl.store.Locale", "nodeToXmlObject");

        return $r0;
    }

    private static final java.lang.reflect.Method buildNodeToXmlStreamMethod()
    {
        java.lang.reflect.Method $r0;

        $r0 = staticinvoke <org.apache.xmlbeans.XmlBeans: java.lang.reflect.Method buildNodeMethod(java.lang.String,java.lang.String)>("org.apache.xmlbeans.impl.store.Locale", "nodeToXmlStream");

        return $r0;
    }

    private static final java.lang.reflect.Method buildStreamToNodeMethod()
    {
        java.lang.Class[] $r0;
        java.lang.Class $r1, $r3;
        java.lang.reflect.Method $r2;

        $r0 = newarray (java.lang.Class)[1];

        $r1 = <org.apache.xmlbeans.XmlBeans: java.lang.Class class$javax$xml$stream$XMLStreamReader>;

        if $r1 != null goto label1;

        $r3 = staticinvoke <org.apache.xmlbeans.XmlBeans: java.lang.Class class$(java.lang.String)>("javax.xml.stream.XMLStreamReader");

        <org.apache.xmlbeans.XmlBeans: java.lang.Class class$javax$xml$stream$XMLStreamReader> = $r3;

        goto label2;

     label1:
        $r3 = <org.apache.xmlbeans.XmlBeans: java.lang.Class class$javax$xml$stream$XMLStreamReader>;

     label2:
        $r0[0] = $r3;

        $r2 = staticinvoke <org.apache.xmlbeans.XmlBeans: java.lang.reflect.Method buildMethod(java.lang.String,java.lang.String,java.lang.Class[])>("org.apache.xmlbeans.impl.store.Locale", "streamToNode", $r0);

        return $r2;
    }

    private static final java.lang.reflect.Constructor buildPathResourceLoaderConstructor()
    {
        java.lang.Class[] $r0;
        java.lang.Class $r1, $r3;
        java.lang.reflect.Constructor $r2;

        $r0 = newarray (java.lang.Class)[1];

        $r1 = <org.apache.xmlbeans.XmlBeans: java.lang.Class array$Ljava$io$File>;

        if $r1 != null goto label1;

        $r3 = staticinvoke <org.apache.xmlbeans.XmlBeans: java.lang.Class class$(java.lang.String)>("[Ljava.io.File;");

        <org.apache.xmlbeans.XmlBeans: java.lang.Class array$Ljava$io$File> = $r3;

        goto label2;

     label1:
        $r3 = <org.apache.xmlbeans.XmlBeans: java.lang.Class array$Ljava$io$File>;

     label2:
        $r0[0] = $r3;

        $r2 = staticinvoke <org.apache.xmlbeans.XmlBeans: java.lang.reflect.Constructor buildConstructor(java.lang.String,java.lang.Class[])>("org.apache.xmlbeans.impl.schema.PathResourceLoader", $r0);

        return $r2;
    }

    public static java.lang.String compilePath(java.lang.String) throws org.apache.xmlbeans.XmlException
    {
        java.lang.String r0, $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.apache.xmlbeans.XmlBeans: java.lang.String compilePath(java.lang.String,org.apache.xmlbeans.XmlOptions)>(r0, null);

        return $r1;
    }

    public static java.lang.String compilePath(java.lang.String, org.apache.xmlbeans.XmlOptions) throws org.apache.xmlbeans.XmlException
    {
        org.apache.xmlbeans.XmlOptions r2;
        org.apache.xmlbeans.SchemaTypeLoader $r0;
        java.lang.String r1, $r3;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.apache.xmlbeans.XmlOptions;

        $r0 = staticinvoke <org.apache.xmlbeans.XmlBeans: org.apache.xmlbeans.SchemaTypeLoader getContextTypeLoader()>();

        $r3 = interfaceinvoke $r0.<org.apache.xmlbeans.SchemaTypeLoader: java.lang.String compilePath(java.lang.String,org.apache.xmlbeans.XmlOptions)>(r1, r2);

        return $r3;
    }

    public static java.lang.String compileQuery(java.lang.String) throws org.apache.xmlbeans.XmlException
    {
        java.lang.String r0, $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.apache.xmlbeans.XmlBeans: java.lang.String compileQuery(java.lang.String,org.apache.xmlbeans.XmlOptions)>(r0, null);

        return $r1;
    }

    public static java.lang.String compileQuery(java.lang.String, org.apache.xmlbeans.XmlOptions) throws org.apache.xmlbeans.XmlException
    {
        org.apache.xmlbeans.XmlOptions r2;
        org.apache.xmlbeans.SchemaTypeLoader $r0;
        java.lang.String r1, $r3;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.apache.xmlbeans.XmlOptions;

        $r0 = staticinvoke <org.apache.xmlbeans.XmlBeans: org.apache.xmlbeans.SchemaTypeLoader getContextTypeLoader()>();

        $r3 = interfaceinvoke $r0.<org.apache.xmlbeans.SchemaTypeLoader: java.lang.String compileQuery(java.lang.String,org.apache.xmlbeans.XmlOptions)>(r1, r2);

        return $r3;
    }

    public static org.apache.xmlbeans.SchemaTypeLoader getContextTypeLoader()
    {
        java.lang.Throwable $r4;
        java.lang.IllegalStateException $r5, $r8;
        java.lang.IllegalAccessException $r7;
        org.apache.xmlbeans.SchemaTypeLoader $r2;
        java.lang.RuntimeException $r9;
        java.lang.reflect.InvocationTargetException $r3;
        java.lang.Object $r1;
        java.lang.String $r6;
        java.lang.reflect.Method $r0;

     label1:
        $r0 = <org.apache.xmlbeans.XmlBeans: java.lang.reflect.Method _getContextTypeLoaderMethod>;

        $r1 = virtualinvoke $r0.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, null);

        $r2 = (org.apache.xmlbeans.SchemaTypeLoader) $r1;

     label2:
        return $r2;

     label3:
        $r7 := @caughtexception;

        $r8 = new java.lang.IllegalStateException;

        specialinvoke $r8.<java.lang.IllegalStateException: void <init>(java.lang.String)>("No access to SchemaTypeLoaderImpl.getContextTypeLoader(): verify that version of xbean.jar is correct");

        $r9 = staticinvoke <org.apache.xmlbeans.XmlBeans: java.lang.RuntimeException causedException(java.lang.RuntimeException,java.lang.Throwable)>($r8, $r7);

        throw $r9;

     label4:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getCause()>();

        $r5 = new java.lang.IllegalStateException;

        $r6 = virtualinvoke $r4.<java.lang.Throwable: java.lang.String getMessage()>();

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r6);

        virtualinvoke $r5.<java.lang.IllegalStateException: java.lang.Throwable initCause(java.lang.Throwable)>($r4);

        throw $r5;

        catch java.lang.IllegalAccessException from label1 to label2 with label3;
        catch java.lang.reflect.InvocationTargetException from label1 to label2 with label4;
    }

    public static org.apache.xmlbeans.SchemaTypeSystem getBuiltinTypeSystem()
    {
        java.lang.Throwable $r4;
        java.lang.IllegalStateException $r5, $r8;
        java.lang.IllegalAccessException $r7;
        java.lang.RuntimeException $r9;
        java.lang.reflect.InvocationTargetException $r3;
        org.apache.xmlbeans.SchemaTypeSystem $r2;
        java.lang.Object $r1;
        java.lang.String $r6;
        java.lang.reflect.Method $r0;

     label1:
        $r0 = <org.apache.xmlbeans.XmlBeans: java.lang.reflect.Method _getBuiltinSchemaTypeSystemMethod>;

        $r1 = virtualinvoke $r0.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, null);

        $r2 = (org.apache.xmlbeans.SchemaTypeSystem) $r1;

     label2:
        return $r2;

     label3:
        $r7 := @caughtexception;

        $r8 = new java.lang.IllegalStateException;

        specialinvoke $r8.<java.lang.IllegalStateException: void <init>(java.lang.String)>("No access to BuiltinSchemaTypeSystem.get(): verify that version of xbean.jar is correct");

        $r9 = staticinvoke <org.apache.xmlbeans.XmlBeans: java.lang.RuntimeException causedException(java.lang.RuntimeException,java.lang.Throwable)>($r8, $r7);

        throw $r9;

     label4:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getCause()>();

        $r5 = new java.lang.IllegalStateException;

        $r6 = virtualinvoke $r4.<java.lang.Throwable: java.lang.String getMessage()>();

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r6);

        virtualinvoke $r5.<java.lang.IllegalStateException: java.lang.Throwable initCause(java.lang.Throwable)>($r4);

        throw $r5;

        catch java.lang.IllegalAccessException from label1 to label2 with label3;
        catch java.lang.reflect.InvocationTargetException from label1 to label2 with label4;
    }

    public static org.apache.xmlbeans.XmlCursor nodeToCursor(org.w3c.dom.Node)
    {
        java.lang.Throwable $r6;
        java.lang.IllegalStateException $r7, $r10;
        java.lang.IllegalAccessException $r9;
        java.lang.Object[] $r0;
        org.apache.xmlbeans.XmlCursor $r4;
        java.lang.RuntimeException $r11;
        java.lang.reflect.InvocationTargetException $r5;
        org.w3c.dom.Node r1;
        java.lang.Object $r3;
        java.lang.String $r8;
        java.lang.reflect.Method $r2;

        r1 := @parameter0: org.w3c.dom.Node;

     label1:
        $r2 = <org.apache.xmlbeans.XmlBeans: java.lang.reflect.Method _nodeToCursorMethod>;

        $r0 = newarray (java.lang.Object)[1];

        $r0[0] = r1;

        $r3 = virtualinvoke $r2.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r0);

        $r4 = (org.apache.xmlbeans.XmlCursor) $r3;

     label2:
        return $r4;

     label3:
        $r9 := @caughtexception;

        $r10 = new java.lang.IllegalStateException;

        specialinvoke $r10.<java.lang.IllegalStateException: void <init>(java.lang.String)>("No access to nodeToCursor verify that version of xbean.jar is correct");

        $r11 = staticinvoke <org.apache.xmlbeans.XmlBeans: java.lang.RuntimeException causedException(java.lang.RuntimeException,java.lang.Throwable)>($r10, $r9);

        throw $r11;

     label4:
        $r5 := @caughtexception;

        $r6 = virtualinvoke $r5.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getCause()>();

        $r7 = new java.lang.IllegalStateException;

        $r8 = virtualinvoke $r6.<java.lang.Throwable: java.lang.String getMessage()>();

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r8);

        virtualinvoke $r7.<java.lang.IllegalStateException: java.lang.Throwable initCause(java.lang.Throwable)>($r6);

        throw $r7;

        catch java.lang.IllegalAccessException from label1 to label2 with label3;
        catch java.lang.reflect.InvocationTargetException from label1 to label2 with label4;
    }

    public static org.apache.xmlbeans.XmlObject nodeToXmlObject(org.w3c.dom.Node)
    {
        java.lang.Throwable $r6;
        java.lang.IllegalStateException $r7, $r10;
        java.lang.IllegalAccessException $r9;
        java.lang.Object[] $r0;
        java.lang.RuntimeException $r11;
        java.lang.reflect.InvocationTargetException $r5;
        org.w3c.dom.Node r1;
        java.lang.Object $r3;
        org.apache.xmlbeans.XmlObject $r4;
        java.lang.String $r8;
        java.lang.reflect.Method $r2;

        r1 := @parameter0: org.w3c.dom.Node;

     label1:
        $r2 = <org.apache.xmlbeans.XmlBeans: java.lang.reflect.Method _nodeToXmlObjectMethod>;

        $r0 = newarray (java.lang.Object)[1];

        $r0[0] = r1;

        $r3 = virtualinvoke $r2.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r0);

        $r4 = (org.apache.xmlbeans.XmlObject) $r3;

     label2:
        return $r4;

     label3:
        $r9 := @caughtexception;

        $r10 = new java.lang.IllegalStateException;

        specialinvoke $r10.<java.lang.IllegalStateException: void <init>(java.lang.String)>("No access to nodeToXmlObject verify that version of xbean.jar is correct");

        $r11 = staticinvoke <org.apache.xmlbeans.XmlBeans: java.lang.RuntimeException causedException(java.lang.RuntimeException,java.lang.Throwable)>($r10, $r9);

        throw $r11;

     label4:
        $r5 := @caughtexception;

        $r6 = virtualinvoke $r5.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getCause()>();

        $r7 = new java.lang.IllegalStateException;

        $r8 = virtualinvoke $r6.<java.lang.Throwable: java.lang.String getMessage()>();

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r8);

        virtualinvoke $r7.<java.lang.IllegalStateException: java.lang.Throwable initCause(java.lang.Throwable)>($r6);

        throw $r7;

        catch java.lang.IllegalAccessException from label1 to label2 with label3;
        catch java.lang.reflect.InvocationTargetException from label1 to label2 with label4;
    }

    public static javax.xml.stream.XMLStreamReader nodeToXmlStreamReader(org.w3c.dom.Node)
    {
        java.lang.Throwable $r6;
        java.lang.IllegalStateException $r7, $r10;
        java.lang.IllegalAccessException $r9;
        java.lang.Object[] $r0;
        java.lang.RuntimeException $r11;
        java.lang.reflect.InvocationTargetException $r5;
        javax.xml.stream.XMLStreamReader $r4;
        org.w3c.dom.Node r1;
        java.lang.Object $r3;
        java.lang.String $r8;
        java.lang.reflect.Method $r2;

        r1 := @parameter0: org.w3c.dom.Node;

     label1:
        $r2 = <org.apache.xmlbeans.XmlBeans: java.lang.reflect.Method _nodeToXmlStreamMethod>;

        $r0 = newarray (java.lang.Object)[1];

        $r0[0] = r1;

        $r3 = virtualinvoke $r2.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r0);

        $r4 = (javax.xml.stream.XMLStreamReader) $r3;

     label2:
        return $r4;

     label3:
        $r9 := @caughtexception;

        $r10 = new java.lang.IllegalStateException;

        specialinvoke $r10.<java.lang.IllegalStateException: void <init>(java.lang.String)>("No access to nodeToXmlStreamReader verify that version of xbean.jar is correct");

        $r11 = staticinvoke <org.apache.xmlbeans.XmlBeans: java.lang.RuntimeException causedException(java.lang.RuntimeException,java.lang.Throwable)>($r10, $r9);

        throw $r11;

     label4:
        $r5 := @caughtexception;

        $r6 = virtualinvoke $r5.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getCause()>();

        $r7 = new java.lang.IllegalStateException;

        $r8 = virtualinvoke $r6.<java.lang.Throwable: java.lang.String getMessage()>();

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r8);

        virtualinvoke $r7.<java.lang.IllegalStateException: java.lang.Throwable initCause(java.lang.Throwable)>($r6);

        throw $r7;

        catch java.lang.IllegalAccessException from label1 to label2 with label3;
        catch java.lang.reflect.InvocationTargetException from label1 to label2 with label4;
    }

    public static org.w3c.dom.Node streamToNode(javax.xml.stream.XMLStreamReader)
    {
        java.lang.Throwable $r6;
        java.lang.IllegalStateException $r7, $r10;
        java.lang.IllegalAccessException $r9;
        java.lang.Object[] $r0;
        java.lang.RuntimeException $r11;
        java.lang.reflect.InvocationTargetException $r5;
        javax.xml.stream.XMLStreamReader r1;
        org.w3c.dom.Node $r4;
        java.lang.Object $r3;
        java.lang.String $r8;
        java.lang.reflect.Method $r2;

        r1 := @parameter0: javax.xml.stream.XMLStreamReader;

     label1:
        $r2 = <org.apache.xmlbeans.XmlBeans: java.lang.reflect.Method _streamToNodeMethod>;

        $r0 = newarray (java.lang.Object)[1];

        $r0[0] = r1;

        $r3 = virtualinvoke $r2.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r0);

        $r4 = (org.w3c.dom.Node) $r3;

     label2:
        return $r4;

     label3:
        $r9 := @caughtexception;

        $r10 = new java.lang.IllegalStateException;

        specialinvoke $r10.<java.lang.IllegalStateException: void <init>(java.lang.String)>("No access to streamToNode verify that version of xbean.jar is correct");

        $r11 = staticinvoke <org.apache.xmlbeans.XmlBeans: java.lang.RuntimeException causedException(java.lang.RuntimeException,java.lang.Throwable)>($r10, $r9);

        throw $r11;

     label4:
        $r5 := @caughtexception;

        $r6 = virtualinvoke $r5.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getCause()>();

        $r7 = new java.lang.IllegalStateException;

        $r8 = virtualinvoke $r6.<java.lang.Throwable: java.lang.String getMessage()>();

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r8);

        virtualinvoke $r7.<java.lang.IllegalStateException: java.lang.Throwable initCause(java.lang.Throwable)>($r6);

        throw $r7;

        catch java.lang.IllegalAccessException from label1 to label2 with label3;
        catch java.lang.reflect.InvocationTargetException from label1 to label2 with label4;
    }

    public static org.apache.xmlbeans.SchemaTypeLoader loadXsd(org.apache.xmlbeans.XmlObject[]) throws org.apache.xmlbeans.XmlException
    {
        org.apache.xmlbeans.XmlObject[] r0;
        org.apache.xmlbeans.SchemaTypeLoader $r1;

        r0 := @parameter0: org.apache.xmlbeans.XmlObject[];

        $r1 = staticinvoke <org.apache.xmlbeans.XmlBeans: org.apache.xmlbeans.SchemaTypeLoader loadXsd(org.apache.xmlbeans.XmlObject[],org.apache.xmlbeans.XmlOptions)>(r0, null);

        return $r1;
    }

    public static org.apache.xmlbeans.SchemaTypeLoader loadXsd(org.apache.xmlbeans.XmlObject[], org.apache.xmlbeans.XmlOptions) throws org.apache.xmlbeans.XmlException
    {
        java.lang.Throwable $r10;
        java.lang.IllegalStateException $r13;
        java.lang.Object[] $r0;
        java.lang.reflect.Method $r2;
        java.lang.IllegalAccessException $r12;
        org.apache.xmlbeans.SchemaTypeLoader $r3, $r7, $r8;
        java.lang.RuntimeException $r14;
        java.lang.reflect.InvocationTargetException $r9;
        org.apache.xmlbeans.SchemaTypeLoader[] $r6;
        org.apache.xmlbeans.XmlException $r11;
        org.apache.xmlbeans.XmlObject[] r1;
        org.apache.xmlbeans.XmlOptions r4;
        org.apache.xmlbeans.SchemaTypeSystem r15;
        java.lang.Object $r5;

        r1 := @parameter0: org.apache.xmlbeans.XmlObject[];

        r4 := @parameter1: org.apache.xmlbeans.XmlOptions;

     label1:
        $r2 = <org.apache.xmlbeans.XmlBeans: java.lang.reflect.Method _compilationMethod>;

        $r0 = newarray (java.lang.Object)[7];

        $r0[0] = null;

        $r0[1] = null;

        $r0[2] = r1;

        $r0[3] = null;

        $r3 = staticinvoke <org.apache.xmlbeans.XmlBeans: org.apache.xmlbeans.SchemaTypeLoader getContextTypeLoader()>();

        $r0[4] = $r3;

        $r0[5] = null;

        $r0[6] = r4;

        $r5 = virtualinvoke $r2.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r0);

        r15 = (org.apache.xmlbeans.SchemaTypeSystem) $r5;

        if r15 != null goto label3;

     label2:
        return null;

     label3:
        $r6 = newarray (org.apache.xmlbeans.SchemaTypeLoader)[2];

        $r6[0] = r15;

        $r7 = staticinvoke <org.apache.xmlbeans.XmlBeans: org.apache.xmlbeans.SchemaTypeLoader getContextTypeLoader()>();

        $r6[1] = $r7;

        $r8 = staticinvoke <org.apache.xmlbeans.XmlBeans: org.apache.xmlbeans.SchemaTypeLoader typeLoaderUnion(org.apache.xmlbeans.SchemaTypeLoader[])>($r6);

     label4:
        return $r8;

     label5:
        $r12 := @caughtexception;

        $r13 = new java.lang.IllegalStateException;

        specialinvoke $r13.<java.lang.IllegalStateException: void <init>(java.lang.String)>("No access to SchemaTypeLoaderImpl.forSchemaXml(): verify that version of xbean.jar is correct");

        $r14 = staticinvoke <org.apache.xmlbeans.XmlBeans: java.lang.RuntimeException causedException(java.lang.RuntimeException,java.lang.Throwable)>($r13, $r12);

        throw $r14;

     label6:
        $r9 := @caughtexception;

        $r10 = virtualinvoke $r9.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getCause()>();

        $r11 = staticinvoke <org.apache.xmlbeans.XmlBeans: org.apache.xmlbeans.XmlException wrappedException(java.lang.Throwable)>($r10);

        throw $r11;

        catch java.lang.IllegalAccessException from label1 to label2 with label5;
        catch java.lang.IllegalAccessException from label3 to label4 with label5;
        catch java.lang.reflect.InvocationTargetException from label1 to label2 with label6;
        catch java.lang.reflect.InvocationTargetException from label3 to label4 with label6;
    }

    public static org.apache.xmlbeans.SchemaTypeSystem compileXsd(org.apache.xmlbeans.XmlObject[], org.apache.xmlbeans.SchemaTypeLoader, org.apache.xmlbeans.XmlOptions) throws org.apache.xmlbeans.XmlException
    {
        org.apache.xmlbeans.XmlObject[] r0;
        org.apache.xmlbeans.XmlOptions r2;
        org.apache.xmlbeans.SchemaTypeSystem $r3;
        org.apache.xmlbeans.SchemaTypeLoader r1;

        r0 := @parameter0: org.apache.xmlbeans.XmlObject[];

        r1 := @parameter1: org.apache.xmlbeans.SchemaTypeLoader;

        r2 := @parameter2: org.apache.xmlbeans.XmlOptions;

        $r3 = staticinvoke <org.apache.xmlbeans.XmlBeans: org.apache.xmlbeans.SchemaTypeSystem compileXmlBeans(java.lang.String,org.apache.xmlbeans.SchemaTypeSystem,org.apache.xmlbeans.XmlObject[],org.apache.xmlbeans.BindingConfig,org.apache.xmlbeans.SchemaTypeLoader,org.apache.xmlbeans.Filer,org.apache.xmlbeans.XmlOptions)>(null, null, r0, null, r1, null, r2);

        return $r3;
    }

    public static org.apache.xmlbeans.SchemaTypeSystem compileXsd(org.apache.xmlbeans.SchemaTypeSystem, org.apache.xmlbeans.XmlObject[], org.apache.xmlbeans.SchemaTypeLoader, org.apache.xmlbeans.XmlOptions) throws org.apache.xmlbeans.XmlException
    {
        org.apache.xmlbeans.XmlObject[] r1;
        org.apache.xmlbeans.SchemaTypeSystem r0, $r4;
        org.apache.xmlbeans.XmlOptions r3;
        org.apache.xmlbeans.SchemaTypeLoader r2;

        r0 := @parameter0: org.apache.xmlbeans.SchemaTypeSystem;

        r1 := @parameter1: org.apache.xmlbeans.XmlObject[];

        r2 := @parameter2: org.apache.xmlbeans.SchemaTypeLoader;

        r3 := @parameter3: org.apache.xmlbeans.XmlOptions;

        $r4 = staticinvoke <org.apache.xmlbeans.XmlBeans: org.apache.xmlbeans.SchemaTypeSystem compileXmlBeans(java.lang.String,org.apache.xmlbeans.SchemaTypeSystem,org.apache.xmlbeans.XmlObject[],org.apache.xmlbeans.BindingConfig,org.apache.xmlbeans.SchemaTypeLoader,org.apache.xmlbeans.Filer,org.apache.xmlbeans.XmlOptions)>(null, r0, r1, null, r2, null, r3);

        return $r4;
    }

    public static org.apache.xmlbeans.SchemaTypeSystem compileXmlBeans(java.lang.String, org.apache.xmlbeans.SchemaTypeSystem, org.apache.xmlbeans.XmlObject[], org.apache.xmlbeans.BindingConfig, org.apache.xmlbeans.SchemaTypeLoader, org.apache.xmlbeans.Filer, org.apache.xmlbeans.XmlOptions) throws org.apache.xmlbeans.XmlException
    {
        java.lang.Throwable $r12;
        java.lang.IllegalStateException $r15;
        java.lang.Object[] $r0;
        java.lang.String r1;
        java.lang.reflect.Method $r6;
        java.lang.IllegalAccessException $r14;
        org.apache.xmlbeans.BindingConfig r4;
        org.apache.xmlbeans.SchemaTypeLoader r5, $r16;
        java.lang.reflect.InvocationTargetException $r11;
        org.apache.xmlbeans.XmlException $r13;
        org.apache.xmlbeans.XmlObject[] r3;
        org.apache.xmlbeans.SchemaTypeSystem r2, $r10;
        org.apache.xmlbeans.XmlOptions r8;
        java.lang.Object $r9;
        org.apache.xmlbeans.Filer r7;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.apache.xmlbeans.SchemaTypeSystem;

        r3 := @parameter2: org.apache.xmlbeans.XmlObject[];

        r4 := @parameter3: org.apache.xmlbeans.BindingConfig;

        r5 := @parameter4: org.apache.xmlbeans.SchemaTypeLoader;

        r7 := @parameter5: org.apache.xmlbeans.Filer;

        r8 := @parameter6: org.apache.xmlbeans.XmlOptions;

     label1:
        $r6 = <org.apache.xmlbeans.XmlBeans: java.lang.reflect.Method _compilationMethod>;

        $r0 = newarray (java.lang.Object)[7];

        $r0[0] = r1;

        $r0[1] = r2;

        $r0[2] = r3;

        $r0[3] = r4;

        if r5 == null goto label2;

        $r16 = r5;

        goto label3;

     label2:
        $r16 = staticinvoke <org.apache.xmlbeans.XmlBeans: org.apache.xmlbeans.SchemaTypeLoader getContextTypeLoader()>();

     label3:
        $r0[4] = $r16;

        $r0[5] = r7;

        $r0[6] = r8;

        $r9 = virtualinvoke $r6.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r0);

        $r10 = (org.apache.xmlbeans.SchemaTypeSystem) $r9;

     label4:
        return $r10;

     label5:
        $r14 := @caughtexception;

        $r15 = new java.lang.IllegalStateException;

        specialinvoke $r15.<java.lang.IllegalStateException: void <init>(java.lang.String)>("No access to SchemaTypeLoaderImpl.forSchemaXml(): verify that version of xbean.jar is correct");

        throw $r15;

     label6:
        $r11 := @caughtexception;

        $r12 = virtualinvoke $r11.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getCause()>();

        $r13 = staticinvoke <org.apache.xmlbeans.XmlBeans: org.apache.xmlbeans.XmlException wrappedException(java.lang.Throwable)>($r12);

        throw $r13;

        catch java.lang.IllegalAccessException from label1 to label4 with label5;
        catch java.lang.reflect.InvocationTargetException from label1 to label4 with label6;
    }

    public static org.apache.xmlbeans.SchemaTypeLoader typeLoaderUnion(org.apache.xmlbeans.SchemaTypeLoader[])
    {
        java.lang.Throwable $r7;
        java.lang.IllegalStateException $r8, $r11;
        java.lang.IllegalAccessException $r10;
        java.lang.Object[] $r1;
        org.apache.xmlbeans.SchemaTypeLoader $r4, $r5;
        java.lang.RuntimeException $r12;
        java.lang.reflect.InvocationTargetException $r6;
        org.apache.xmlbeans.SchemaTypeLoader[] r0;
        int $i0;
        java.lang.Object $r3;
        java.lang.String $r9;
        java.lang.reflect.Method $r2;

        r0 := @parameter0: org.apache.xmlbeans.SchemaTypeLoader[];

     label1:
        $i0 = lengthof r0;

        if $i0 != 1 goto label3;

        $r5 = r0[0];

     label2:
        return $r5;

     label3:
        $r2 = <org.apache.xmlbeans.XmlBeans: java.lang.reflect.Method _typeLoaderBuilderMethod>;

        $r1 = newarray (java.lang.Object)[3];

        $r1[0] = r0;

        $r1[1] = null;

        $r1[2] = null;

        $r3 = virtualinvoke $r2.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r1);

        $r4 = (org.apache.xmlbeans.SchemaTypeLoader) $r3;

     label4:
        return $r4;

     label5:
        $r10 := @caughtexception;

        $r11 = new java.lang.IllegalStateException;

        specialinvoke $r11.<java.lang.IllegalStateException: void <init>(java.lang.String)>("No access to SchemaTypeLoaderImpl: verify that version of xbean.jar is correct");

        $r12 = staticinvoke <org.apache.xmlbeans.XmlBeans: java.lang.RuntimeException causedException(java.lang.RuntimeException,java.lang.Throwable)>($r11, $r10);

        throw $r12;

     label6:
        $r6 := @caughtexception;

        $r7 = virtualinvoke $r6.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getCause()>();

        $r8 = new java.lang.IllegalStateException;

        $r9 = virtualinvoke $r7.<java.lang.Throwable: java.lang.String getMessage()>();

        specialinvoke $r8.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r9);

        virtualinvoke $r8.<java.lang.IllegalStateException: java.lang.Throwable initCause(java.lang.Throwable)>($r7);

        throw $r8;

        catch java.lang.IllegalAccessException from label1 to label2 with label5;
        catch java.lang.IllegalAccessException from label3 to label4 with label5;
        catch java.lang.reflect.InvocationTargetException from label1 to label2 with label6;
        catch java.lang.reflect.InvocationTargetException from label3 to label4 with label6;
    }

    public static org.apache.xmlbeans.SchemaTypeLoader typeLoaderForClassLoader(java.lang.ClassLoader)
    {
        java.lang.Throwable $r6;
        java.lang.IllegalStateException $r7, $r10;
        java.lang.IllegalAccessException $r9;
        java.lang.Object[] $r0;
        org.apache.xmlbeans.SchemaTypeLoader $r4;
        java.lang.RuntimeException $r11;
        java.lang.reflect.InvocationTargetException $r5;
        java.lang.Object $r3;
        java.lang.ClassLoader r1;
        java.lang.String $r8;
        java.lang.reflect.Method $r2;

        r1 := @parameter0: java.lang.ClassLoader;

     label1:
        $r2 = <org.apache.xmlbeans.XmlBeans: java.lang.reflect.Method _typeLoaderBuilderMethod>;

        $r0 = newarray (java.lang.Object)[3];

        $r0[0] = null;

        $r0[1] = null;

        $r0[2] = r1;

        $r3 = virtualinvoke $r2.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r0);

        $r4 = (org.apache.xmlbeans.SchemaTypeLoader) $r3;

     label2:
        return $r4;

     label3:
        $r9 := @caughtexception;

        $r10 = new java.lang.IllegalStateException;

        specialinvoke $r10.<java.lang.IllegalStateException: void <init>(java.lang.String)>("No access to SchemaTypeLoaderImpl: verify that version of xbean.jar is correct");

        $r11 = staticinvoke <org.apache.xmlbeans.XmlBeans: java.lang.RuntimeException causedException(java.lang.RuntimeException,java.lang.Throwable)>($r10, $r9);

        throw $r11;

     label4:
        $r5 := @caughtexception;

        $r6 = virtualinvoke $r5.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getCause()>();

        $r7 = new java.lang.IllegalStateException;

        $r8 = virtualinvoke $r6.<java.lang.Throwable: java.lang.String getMessage()>();

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r8);

        virtualinvoke $r7.<java.lang.IllegalStateException: java.lang.Throwable initCause(java.lang.Throwable)>($r6);

        throw $r7;

        catch java.lang.IllegalAccessException from label1 to label2 with label3;
        catch java.lang.reflect.InvocationTargetException from label1 to label2 with label4;
    }

    public static org.apache.xmlbeans.SchemaTypeLoader typeLoaderForResource(org.apache.xmlbeans.ResourceLoader)
    {
        java.lang.Throwable $r6;
        java.lang.IllegalStateException $r7, $r10;
        java.lang.IllegalAccessException $r9;
        java.lang.Object[] $r0;
        org.apache.xmlbeans.SchemaTypeLoader $r4;
        java.lang.RuntimeException $r11;
        org.apache.xmlbeans.ResourceLoader r1;
        java.lang.reflect.InvocationTargetException $r5;
        java.lang.Object $r3;
        java.lang.String $r8;
        java.lang.reflect.Method $r2;

        r1 := @parameter0: org.apache.xmlbeans.ResourceLoader;

     label1:
        $r2 = <org.apache.xmlbeans.XmlBeans: java.lang.reflect.Method _typeLoaderBuilderMethod>;

        $r0 = newarray (java.lang.Object)[3];

        $r0[0] = null;

        $r0[1] = r1;

        $r0[2] = null;

        $r3 = virtualinvoke $r2.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r0);

        $r4 = (org.apache.xmlbeans.SchemaTypeLoader) $r3;

     label2:
        return $r4;

     label3:
        $r9 := @caughtexception;

        $r10 = new java.lang.IllegalStateException;

        specialinvoke $r10.<java.lang.IllegalStateException: void <init>(java.lang.String)>("No access to SchemaTypeLoaderImpl: verify that version of xbean.jar is correct");

        $r11 = staticinvoke <org.apache.xmlbeans.XmlBeans: java.lang.RuntimeException causedException(java.lang.RuntimeException,java.lang.Throwable)>($r10, $r9);

        throw $r11;

     label4:
        $r5 := @caughtexception;

        $r6 = virtualinvoke $r5.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getCause()>();

        $r7 = new java.lang.IllegalStateException;

        $r8 = virtualinvoke $r6.<java.lang.Throwable: java.lang.String getMessage()>();

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r8);

        virtualinvoke $r7.<java.lang.IllegalStateException: java.lang.Throwable initCause(java.lang.Throwable)>($r6);

        throw $r7;

        catch java.lang.IllegalAccessException from label1 to label2 with label3;
        catch java.lang.reflect.InvocationTargetException from label1 to label2 with label4;
    }

    public static org.apache.xmlbeans.SchemaTypeSystem typeSystemForClassLoader(java.lang.ClassLoader, java.lang.String)
    {
        java.lang.NoSuchFieldException $r30;
        java.lang.IllegalAccessException $r20;
        org.apache.xmlbeans.SchemaTypeSystem $r10, r11;
        java.lang.ClassLoader r0;
        java.lang.StringBuffer $r1, $r3, $r4, $r5, $r13, $r14, $r15, $r16, $r17, $r18, $r22, $r23, $r24, $r25, $r26, $r27, $r32, $r33, $r34, $r35, $r36, $r37, $r42, $r43, $r44, $r45, $r46, $r47;
        java.lang.String r2, $r6, $r19, $r28, $r38, $r48;
        java.lang.RuntimeException $r12, $r21, $r29, $r31, $r39, $r41, $r49;
        java.lang.reflect.Field $r8;
        java.lang.Class $r7;
        java.lang.Object $r9;
        java.lang.ClassNotFoundException $r40;

        r0 := @parameter0: java.lang.ClassLoader;

        r2 := @parameter1: java.lang.String;

     label1:
        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".");

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("TypeSystemHolder");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        $r7 = virtualinvoke r0.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("typeSystem");

        $r9 = virtualinvoke $r8.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(null);

        $r10 = (org.apache.xmlbeans.SchemaTypeSystem) $r9;

        r11 = (org.apache.xmlbeans.SchemaTypeSystem) $r10;

        if r11 != null goto label2;

        $r12 = new java.lang.RuntimeException;

        $r13 = new java.lang.StringBuffer;

        specialinvoke $r13.<java.lang.StringBuffer: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("SchemaTypeSystem is null for field typeSystem on class with name ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r2);

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".");

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("TypeSystemHolder");

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(". Please verify the version of xbean.jar is correct.");

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r12.<java.lang.RuntimeException: void <init>(java.lang.String)>($r19);

        throw $r12;

     label2:
        return r11;

     label3:
        $r40 := @caughtexception;

        $r41 = new java.lang.RuntimeException;

        $r42 = new java.lang.StringBuffer;

        specialinvoke $r42.<java.lang.StringBuffer: void <init>()>();

        $r43 = virtualinvoke $r42.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Cannot load SchemaTypeSystem. Unable to load class with name ");

        $r44 = virtualinvoke $r43.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r2);

        $r45 = virtualinvoke $r44.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".");

        $r46 = virtualinvoke $r45.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("TypeSystemHolder");

        $r47 = virtualinvoke $r46.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(". Make sure the generated binary files are on the classpath.");

        $r48 = virtualinvoke $r47.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r41.<java.lang.RuntimeException: void <init>(java.lang.String)>($r48);

        $r49 = staticinvoke <org.apache.xmlbeans.XmlBeans: java.lang.RuntimeException causedException(java.lang.RuntimeException,java.lang.Throwable)>($r41, $r40);

        throw $r49;

     label4:
        $r30 := @caughtexception;

        $r31 = new java.lang.RuntimeException;

        $r32 = new java.lang.StringBuffer;

        specialinvoke $r32.<java.lang.StringBuffer: void <init>()>();

        $r33 = virtualinvoke $r32.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Cannot find field typeSystem on class ");

        $r34 = virtualinvoke $r33.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r2);

        $r35 = virtualinvoke $r34.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".");

        $r36 = virtualinvoke $r35.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("TypeSystemHolder");

        $r37 = virtualinvoke $r36.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(". Please verify the version of xbean.jar is correct.");

        $r38 = virtualinvoke $r37.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r31.<java.lang.RuntimeException: void <init>(java.lang.String)>($r38);

        $r39 = staticinvoke <org.apache.xmlbeans.XmlBeans: java.lang.RuntimeException causedException(java.lang.RuntimeException,java.lang.Throwable)>($r31, $r30);

        throw $r39;

     label5:
        $r20 := @caughtexception;

        $r21 = new java.lang.RuntimeException;

        $r22 = new java.lang.StringBuffer;

        specialinvoke $r22.<java.lang.StringBuffer: void <init>()>();

        $r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Field typeSystem on class ");

        $r24 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r2);

        $r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".");

        $r26 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("TypeSystemHolder");

        $r27 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("is not accessible. Please verify the version of xbean.jar is correct.");

        $r28 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r21.<java.lang.RuntimeException: void <init>(java.lang.String)>($r28);

        $r29 = staticinvoke <org.apache.xmlbeans.XmlBeans: java.lang.RuntimeException causedException(java.lang.RuntimeException,java.lang.Throwable)>($r21, $r20);

        throw $r29;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
        catch java.lang.NoSuchFieldException from label1 to label2 with label4;
        catch java.lang.IllegalAccessException from label1 to label2 with label5;
    }

    public static org.apache.xmlbeans.ResourceLoader resourceLoaderForPath(java.io.File[])
    {
        java.lang.Throwable $r6;
        java.lang.IllegalStateException $r7, $r10, $r14;
        java.lang.Object[] $r0;
        java.lang.reflect.Constructor $r2;
        org.apache.xmlbeans.ResourceLoader $r4;
        java.lang.InstantiationException $r9;
        java.lang.String $r8, $r11;
        java.lang.IllegalAccessException $r13;
        java.lang.RuntimeException $r12, $r15;
        java.lang.reflect.InvocationTargetException $r5;
        java.lang.Object $r3;
        java.io.File[] r1;

        r1 := @parameter0: java.io.File[];

     label1:
        $r2 = <org.apache.xmlbeans.XmlBeans: java.lang.reflect.Constructor _pathResourceLoaderConstructor>;

        $r0 = newarray (java.lang.Object)[1];

        $r0[0] = r1;

        $r3 = virtualinvoke $r2.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r0);

        $r4 = (org.apache.xmlbeans.ResourceLoader) $r3;

     label2:
        return $r4;

     label3:
        $r13 := @caughtexception;

        $r14 = new java.lang.IllegalStateException;

        specialinvoke $r14.<java.lang.IllegalStateException: void <init>(java.lang.String)>("No access to SchemaTypeLoaderImpl: verify that version of xbean.jar is correct");

        $r15 = staticinvoke <org.apache.xmlbeans.XmlBeans: java.lang.RuntimeException causedException(java.lang.RuntimeException,java.lang.Throwable)>($r14, $r13);

        throw $r15;

     label4:
        $r9 := @caughtexception;

        $r10 = new java.lang.IllegalStateException;

        $r11 = virtualinvoke $r9.<java.lang.InstantiationException: java.lang.String getMessage()>();

        specialinvoke $r10.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r11);

        $r12 = staticinvoke <org.apache.xmlbeans.XmlBeans: java.lang.RuntimeException causedException(java.lang.RuntimeException,java.lang.Throwable)>($r10, $r9);

        throw $r12;

     label5:
        $r5 := @caughtexception;

        $r6 = virtualinvoke $r5.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getCause()>();

        $r7 = new java.lang.IllegalStateException;

        $r8 = virtualinvoke $r6.<java.lang.Throwable: java.lang.String getMessage()>();

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r8);

        virtualinvoke $r7.<java.lang.IllegalStateException: java.lang.Throwable initCause(java.lang.Throwable)>($r6);

        throw $r7;

        catch java.lang.IllegalAccessException from label1 to label2 with label3;
        catch java.lang.InstantiationException from label1 to label2 with label4;
        catch java.lang.reflect.InvocationTargetException from label1 to label2 with label5;
    }

    public static org.apache.xmlbeans.SchemaType typeForClass(java.lang.Class)
    {
        java.lang.reflect.Field $r2;
        java.lang.Exception $r5;
        java.lang.Class r0, $r1, $r6;
        java.lang.Object $r3;
        org.apache.xmlbeans.SchemaType $r4;
        boolean $z0;

        r0 := @parameter0: java.lang.Class;

        if r0 == null goto label3;

        $r1 = <org.apache.xmlbeans.XmlBeans: java.lang.Class class$org$apache$xmlbeans$XmlObject>;

        if $r1 != null goto label1;

        $r6 = staticinvoke <org.apache.xmlbeans.XmlBeans: java.lang.Class class$(java.lang.String)>("org.apache.xmlbeans.XmlObject");

        <org.apache.xmlbeans.XmlBeans: java.lang.Class class$org$apache$xmlbeans$XmlObject> = $r6;

        goto label2;

     label1:
        $r6 = <org.apache.xmlbeans.XmlBeans: java.lang.Class class$org$apache$xmlbeans$XmlObject>;

     label2:
        $z0 = virtualinvoke $r6.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r0);

        if $z0 != 0 goto label4;

     label3:
        return null;

     label4:
        $r2 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>("type");

        if $r2 != null goto label6;

     label5:
        return null;

     label6:
        $r3 = virtualinvoke $r2.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(null);

        $r4 = (org.apache.xmlbeans.SchemaType) $r3;

     label7:
        return $r4;

     label8:
        $r5 := @caughtexception;

        return null;

        catch java.lang.Exception from label4 to label5 with label8;
        catch java.lang.Exception from label6 to label7 with label8;
    }

    private static org.apache.xmlbeans.SchemaType getNoType()
    {
        java.lang.Throwable $r4;
        java.lang.IllegalStateException $r5, $r8;
        java.lang.IllegalAccessException $r7;
        java.lang.RuntimeException $r9;
        java.lang.reflect.InvocationTargetException $r3;
        java.lang.Object $r1;
        java.lang.String $r6;
        org.apache.xmlbeans.SchemaType $r2;
        java.lang.reflect.Method $r0;

     label1:
        $r0 = <org.apache.xmlbeans.XmlBeans: java.lang.reflect.Method _getNoTypeMethod>;

        $r1 = virtualinvoke $r0.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, null);

        $r2 = (org.apache.xmlbeans.SchemaType) $r1;

     label2:
        return $r2;

     label3:
        $r7 := @caughtexception;

        $r8 = new java.lang.IllegalStateException;

        specialinvoke $r8.<java.lang.IllegalStateException: void <init>(java.lang.String)>("No access to SchemaTypeLoaderImpl.getContextTypeLoader(): verify that version of xbean.jar is correct");

        $r9 = staticinvoke <org.apache.xmlbeans.XmlBeans: java.lang.RuntimeException causedException(java.lang.RuntimeException,java.lang.Throwable)>($r8, $r7);

        throw $r9;

     label4:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getCause()>();

        $r5 = new java.lang.IllegalStateException;

        $r6 = virtualinvoke $r4.<java.lang.Throwable: java.lang.String getMessage()>();

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r6);

        virtualinvoke $r5.<java.lang.IllegalStateException: java.lang.Throwable initCause(java.lang.Throwable)>($r4);

        throw $r5;

        catch java.lang.IllegalAccessException from label1 to label2 with label3;
        catch java.lang.reflect.InvocationTargetException from label1 to label2 with label4;
    }

    private void <init>()
    {
        org.apache.xmlbeans.XmlBeans r0;

        r0 := @this: org.apache.xmlbeans.XmlBeans;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Throwable $r4;
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.NoClassDefFoundError: java.lang.Throwable initCause(java.lang.Throwable)>($r2);

        throw $r4;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        java.lang.reflect.Constructor $r12;
        java.lang.String $r14, $r15, $r16;
        org.apache.xmlbeans.SchemaType $r13;
        java.lang.reflect.Method $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11;
        org.apache.xmlbeans.XmlBeans$1 $r2;
        java.lang.Package $r1;
        java.lang.Class $r0, $r17;

        <org.apache.xmlbeans.XmlBeans: java.lang.String TYPE_SYSTEM_FIELD> = "typeSystem";

        <org.apache.xmlbeans.XmlBeans: java.lang.String HOLDER_CLASS_NAME> = "TypeSystemHolder";

        <org.apache.xmlbeans.XmlBeans: java.lang.String XMLBEANS_TITLE> = "org.apache.xmlbeans";

        <org.apache.xmlbeans.XmlBeans: java.lang.String XMLBEANS_VERSION> = "2.6.0";

        <org.apache.xmlbeans.XmlBeans: java.lang.String XMLBEANS_VENDOR> = "Apache Software Foundation";

        $r0 = <org.apache.xmlbeans.XmlBeans: java.lang.Class class$org$apache$xmlbeans$XmlBeans>;

        if $r0 != null goto label1;

        $r17 = staticinvoke <org.apache.xmlbeans.XmlBeans: java.lang.Class class$(java.lang.String)>("org.apache.xmlbeans.XmlBeans");

        <org.apache.xmlbeans.XmlBeans: java.lang.Class class$org$apache$xmlbeans$XmlBeans> = $r17;

        goto label2;

     label1:
        $r17 = <org.apache.xmlbeans.XmlBeans: java.lang.Class class$org$apache$xmlbeans$XmlBeans>;

     label2:
        $r1 = virtualinvoke $r17.<java.lang.Class: java.lang.Package getPackage()>();

        if $r1 == null goto label3;

        $r14 = virtualinvoke $r1.<java.lang.Package: java.lang.String getImplementationTitle()>();

        <org.apache.xmlbeans.XmlBeans: java.lang.String XMLBEANS_TITLE> = $r14;

        $r15 = virtualinvoke $r1.<java.lang.Package: java.lang.String getImplementationVersion()>();

        <org.apache.xmlbeans.XmlBeans: java.lang.String XMLBEANS_VERSION> = $r15;

        $r16 = virtualinvoke $r1.<java.lang.Package: java.lang.String getImplementationVendor()>();

        <org.apache.xmlbeans.XmlBeans: java.lang.String XMLBEANS_VENDOR> = $r16;

     label3:
        $r2 = new org.apache.xmlbeans.XmlBeans$1;

        specialinvoke $r2.<org.apache.xmlbeans.XmlBeans$1: void <init>()>();

        <org.apache.xmlbeans.XmlBeans: java.lang.ThreadLocal _threadLocalLoaderQNameCache> = $r2;

        $r3 = staticinvoke <org.apache.xmlbeans.XmlBeans: java.lang.reflect.Method buildGetContextTypeLoaderMethod()>();

        <org.apache.xmlbeans.XmlBeans: java.lang.reflect.Method _getContextTypeLoaderMethod> = $r3;

        $r4 = staticinvoke <org.apache.xmlbeans.XmlBeans: java.lang.reflect.Method buildGetBuiltinSchemaTypeSystemMethod()>();

        <org.apache.xmlbeans.XmlBeans: java.lang.reflect.Method _getBuiltinSchemaTypeSystemMethod> = $r4;

        $r5 = staticinvoke <org.apache.xmlbeans.XmlBeans: java.lang.reflect.Method buildGetNoTypeMethod()>();

        <org.apache.xmlbeans.XmlBeans: java.lang.reflect.Method _getNoTypeMethod> = $r5;

        $r6 = staticinvoke <org.apache.xmlbeans.XmlBeans: java.lang.reflect.Method buildTypeLoaderBuilderMethod()>();

        <org.apache.xmlbeans.XmlBeans: java.lang.reflect.Method _typeLoaderBuilderMethod> = $r6;

        $r7 = staticinvoke <org.apache.xmlbeans.XmlBeans: java.lang.reflect.Method buildCompilationMethod()>();

        <org.apache.xmlbeans.XmlBeans: java.lang.reflect.Method _compilationMethod> = $r7;

        $r8 = staticinvoke <org.apache.xmlbeans.XmlBeans: java.lang.reflect.Method buildNodeToCursorMethod()>();

        <org.apache.xmlbeans.XmlBeans: java.lang.reflect.Method _nodeToCursorMethod> = $r8;

        $r9 = staticinvoke <org.apache.xmlbeans.XmlBeans: java.lang.reflect.Method buildNodeToXmlObjectMethod()>();

        <org.apache.xmlbeans.XmlBeans: java.lang.reflect.Method _nodeToXmlObjectMethod> = $r9;

        $r10 = staticinvoke <org.apache.xmlbeans.XmlBeans: java.lang.reflect.Method buildNodeToXmlStreamMethod()>();

        <org.apache.xmlbeans.XmlBeans: java.lang.reflect.Method _nodeToXmlStreamMethod> = $r10;

        $r11 = staticinvoke <org.apache.xmlbeans.XmlBeans: java.lang.reflect.Method buildStreamToNodeMethod()>();

        <org.apache.xmlbeans.XmlBeans: java.lang.reflect.Method _streamToNodeMethod> = $r11;

        $r12 = staticinvoke <org.apache.xmlbeans.XmlBeans: java.lang.reflect.Constructor buildPathResourceLoaderConstructor()>();

        <org.apache.xmlbeans.XmlBeans: java.lang.reflect.Constructor _pathResourceLoaderConstructor> = $r12;

        $r13 = staticinvoke <org.apache.xmlbeans.XmlBeans: org.apache.xmlbeans.SchemaType getNoType()>();

        <org.apache.xmlbeans.XmlBeans: org.apache.xmlbeans.SchemaType NO_TYPE> = $r13;

        return;
    }
}
