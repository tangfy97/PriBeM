public abstract class org.apache.batik.ext.awt.image.AbstractLight extends java.lang.Object implements org.apache.batik.ext.awt.image.Light
{
    private double[] color;

    public static final double sRGBToLsRGB(double)
    {
        byte $b0;
        int $i1;
        double d0, $d1, $d2, $d3, $d4;

        d0 := @parameter0: double;

        $b0 = d0 cmpg 0.003928;

        $i1 = (int) $b0;

        if $i1 > 0 goto label1;

        $d4 = d0 / 12.92;

        return $d4;

     label1:
        $d1 = d0 + 0.055;

        $d2 = $d1 / 1.055;

        $d3 = staticinvoke <java.lang.Math: double pow(double,double)>($d2, 2.4);

        return $d3;
    }

    public double[] getColor(boolean)
    {
        double[] r0, $r2, $r3, $r4, $r5, $r6, $r7;
        boolean z0;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8;
        org.apache.batik.ext.awt.image.AbstractLight r1;

        r1 := @this: org.apache.batik.ext.awt.image.AbstractLight;

        z0 := @parameter0: boolean;

        r0 = newarray (double)[3];

        if z0 == 0 goto label1;

        $r5 = r1.<org.apache.batik.ext.awt.image.AbstractLight: double[] color>;

        $d3 = $r5[0];

        $d4 = staticinvoke <org.apache.batik.ext.awt.image.AbstractLight: double sRGBToLsRGB(double)>($d3);

        r0[0] = $d4;

        $r6 = r1.<org.apache.batik.ext.awt.image.AbstractLight: double[] color>;

        $d5 = $r6[1];

        $d6 = staticinvoke <org.apache.batik.ext.awt.image.AbstractLight: double sRGBToLsRGB(double)>($d5);

        r0[1] = $d6;

        $r7 = r1.<org.apache.batik.ext.awt.image.AbstractLight: double[] color>;

        $d7 = $r7[2];

        $d8 = staticinvoke <org.apache.batik.ext.awt.image.AbstractLight: double sRGBToLsRGB(double)>($d7);

        r0[2] = $d8;

        goto label2;

     label1:
        $r2 = r1.<org.apache.batik.ext.awt.image.AbstractLight: double[] color>;

        $d0 = $r2[0];

        r0[0] = $d0;

        $r3 = r1.<org.apache.batik.ext.awt.image.AbstractLight: double[] color>;

        $d1 = $r3[1];

        r0[1] = $d1;

        $r4 = r1.<org.apache.batik.ext.awt.image.AbstractLight: double[] color>;

        $d2 = $r4[2];

        r0[2] = $d2;

     label2:
        return r0;
    }

    public void <init>(java.awt.Color)
    {
        java.awt.Color r1;
        org.apache.batik.ext.awt.image.AbstractLight r0;

        r0 := @this: org.apache.batik.ext.awt.image.AbstractLight;

        r1 := @parameter0: java.awt.Color;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        virtualinvoke r0.<org.apache.batik.ext.awt.image.AbstractLight: void setColor(java.awt.Color)>(r1);

        return;
    }

    public void setColor(java.awt.Color)
    {
        java.awt.Color r2;
        double[] $r1, $r3, $r4, $r5;
        int $i0, $i1, $i2;
        org.apache.batik.ext.awt.image.AbstractLight r0;
        double $d0, $d1, $d2, $d3, $d4, $d5;

        r0 := @this: org.apache.batik.ext.awt.image.AbstractLight;

        r2 := @parameter0: java.awt.Color;

        $r1 = newarray (double)[3];

        r0.<org.apache.batik.ext.awt.image.AbstractLight: double[] color> = $r1;

        $r3 = r0.<org.apache.batik.ext.awt.image.AbstractLight: double[] color>;

        $i0 = virtualinvoke r2.<java.awt.Color: int getRed()>();

        $d0 = (double) $i0;

        $d1 = $d0 / 255.0;

        $r3[0] = $d1;

        $r4 = r0.<org.apache.batik.ext.awt.image.AbstractLight: double[] color>;

        $i1 = virtualinvoke r2.<java.awt.Color: int getGreen()>();

        $d2 = (double) $i1;

        $d3 = $d2 / 255.0;

        $r4[1] = $d3;

        $r5 = r0.<org.apache.batik.ext.awt.image.AbstractLight: double[] color>;

        $i2 = virtualinvoke r2.<java.awt.Color: int getBlue()>();

        $d4 = (double) $i2;

        $d5 = $d4 / 255.0;

        $r5[2] = $d5;

        return;
    }

    public boolean isConstant()
    {
        org.apache.batik.ext.awt.image.AbstractLight r0;

        r0 := @this: org.apache.batik.ext.awt.image.AbstractLight;

        return 1;
    }

    public double[][][] getLightMap(double, double, double, double, int, int, double[][][])
    {
        double[][][] r0, r2;
        int i0, i1, i2;
        org.apache.batik.ext.awt.image.AbstractLight r1;
        double[][] $r3, $r4;
        double d0, d1, d2, d3;

        r1 := @this: org.apache.batik.ext.awt.image.AbstractLight;

        d0 := @parameter0: double;

        d3 := @parameter1: double;

        d1 := @parameter2: double;

        d2 := @parameter3: double;

        i1 := @parameter4: int;

        i0 := @parameter5: int;

        r2 := @parameter6: double[][][];

        r0 = newarray (double[][])[i0];

        i2 = 0;

        goto label2;

     label1:
        $r3 = r2[i2];

        $r4 = virtualinvoke r1.<org.apache.batik.ext.awt.image.AbstractLight: double[][] getLightRow(double,double,double,int,double[][],double[][])>(d0, d3, d1, i1, $r3, null);

        r0[i2] = $r4;

        d3 = d3 + d2;

        i2 = i2 + 1;

     label2:
        if i2 < i0 goto label1;

        return r0;
    }

    public double[][] getLightRow(double, double, double, int, double[][], double[][])
    {
        double[] $r3, $r4;
        int i0, i1;
        double[][] r0, r2, r5;
        org.apache.batik.ext.awt.image.AbstractLight r1;
        double d0, $d1, d2, d3;

        r1 := @this: org.apache.batik.ext.awt.image.AbstractLight;

        d3 := @parameter0: double;

        d0 := @parameter1: double;

        d2 := @parameter2: double;

        i0 := @parameter3: int;

        r2 := @parameter4: double[][];

        r0 := @parameter5: double[][];

        r5 = r0;

        if r0 != null goto label1;

        r5 = newmultiarray (double)[i0][3];

     label1:
        i1 = 0;

        goto label3;

     label2:
        $r3 = r2[i1];

        $d1 = $r3[3];

        $r4 = r5[i1];

        virtualinvoke r1.<org.apache.batik.ext.awt.image.AbstractLight: void getLight(double,double,double,double[])>(d3, d0, $d1, $r4);

        d3 = d3 + d2;

        i1 = i1 + 1;

     label3:
        if i1 < i0 goto label2;

        return r5;
    }

    public abstract void getLight(double, double, double, double[]);
}
