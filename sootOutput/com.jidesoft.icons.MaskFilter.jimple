public class com.jidesoft.icons.MaskFilter extends java.awt.image.RGBImageFilter
{
    private java.awt.Color _newColor;
    private java.awt.Color _oldColor;
    private static com.jidesoft.icons.MaskFilter _maskFilter;

    public static com.jidesoft.icons.MaskFilter getInstance(java.awt.Color, java.awt.Color)
    {
        java.awt.Color r1, r3;
        com.jidesoft.icons.MaskFilter $r0, $r2, $r4, $r5, $r6;

        r1 := @parameter0: java.awt.Color;

        r3 := @parameter1: java.awt.Color;

        $r0 = <com.jidesoft.icons.MaskFilter: com.jidesoft.icons.MaskFilter _maskFilter>;

        if $r0 != null goto label1;

        $r6 = new com.jidesoft.icons.MaskFilter;

        specialinvoke $r6.<com.jidesoft.icons.MaskFilter: void <init>(java.awt.Color,java.awt.Color)>(r1, r3);

        <com.jidesoft.icons.MaskFilter: com.jidesoft.icons.MaskFilter _maskFilter> = $r6;

        goto label2;

     label1:
        $r2 = <com.jidesoft.icons.MaskFilter: com.jidesoft.icons.MaskFilter _maskFilter>;

        specialinvoke $r2.<com.jidesoft.icons.MaskFilter: void setOldColor(java.awt.Color)>(r1);

        $r4 = <com.jidesoft.icons.MaskFilter: com.jidesoft.icons.MaskFilter _maskFilter>;

        specialinvoke $r4.<com.jidesoft.icons.MaskFilter: void setNewColor(java.awt.Color)>(r3);

     label2:
        $r5 = <com.jidesoft.icons.MaskFilter: com.jidesoft.icons.MaskFilter _maskFilter>;

        return $r5;
    }

    private void setNewColor(java.awt.Color)
    {
        java.awt.Color r1;
        com.jidesoft.icons.MaskFilter r0;

        r0 := @this: com.jidesoft.icons.MaskFilter;

        r1 := @parameter0: java.awt.Color;

        r0.<com.jidesoft.icons.MaskFilter: java.awt.Color _newColor> = r1;

        return;
    }

    private void setOldColor(java.awt.Color)
    {
        java.awt.Color r1;
        com.jidesoft.icons.MaskFilter r0;

        r0 := @this: com.jidesoft.icons.MaskFilter;

        r1 := @parameter0: java.awt.Color;

        r0.<com.jidesoft.icons.MaskFilter: java.awt.Color _oldColor> = r1;

        return;
    }

    public static java.awt.Image createImage(java.awt.Image, java.awt.Color, java.awt.Color)
    {
        java.awt.Color r0, r1;
        java.awt.Image r4, $r7;
        com.jidesoft.icons.MaskFilter $r2;
        java.awt.image.FilteredImageSource $r3;
        java.awt.image.ImageProducer $r5;
        java.awt.Toolkit $r6;

        r4 := @parameter0: java.awt.Image;

        r0 := @parameter1: java.awt.Color;

        r1 := @parameter2: java.awt.Color;

        $r2 = staticinvoke <com.jidesoft.icons.MaskFilter: com.jidesoft.icons.MaskFilter getInstance(java.awt.Color,java.awt.Color)>(r0, r1);

        $r3 = new java.awt.image.FilteredImageSource;

        $r5 = virtualinvoke r4.<java.awt.Image: java.awt.image.ImageProducer getSource()>();

        specialinvoke $r3.<java.awt.image.FilteredImageSource: void <init>(java.awt.image.ImageProducer,java.awt.image.ImageFilter)>($r5, $r2);

        $r6 = staticinvoke <java.awt.Toolkit: java.awt.Toolkit getDefaultToolkit()>();

        $r7 = virtualinvoke $r6.<java.awt.Toolkit: java.awt.Image createImage(java.awt.image.ImageProducer)>($r3);

        return $r7;
    }

    public static java.awt.Image createNegativeImage(java.awt.Image)
    {
        java.awt.Color $r1, $r2;
        java.awt.Image r0, $r3;

        r0 := @parameter0: java.awt.Image;

        $r2 = <java.awt.Color: java.awt.Color black>;

        $r1 = <java.awt.Color: java.awt.Color white>;

        $r3 = staticinvoke <com.jidesoft.icons.MaskFilter: java.awt.Image createImage(java.awt.Image,java.awt.Color,java.awt.Color)>(r0, $r2, $r1);

        return $r3;
    }

    public void <init>(java.awt.Color, java.awt.Color)
    {
        java.awt.Color r1, r2;
        com.jidesoft.icons.MaskFilter r0;

        r0 := @this: com.jidesoft.icons.MaskFilter;

        r2 := @parameter0: java.awt.Color;

        r1 := @parameter1: java.awt.Color;

        specialinvoke r0.<java.awt.image.RGBImageFilter: void <init>()>();

        r0.<com.jidesoft.icons.MaskFilter: java.awt.Color _newColor> = r1;

        r0.<com.jidesoft.icons.MaskFilter: java.awt.Color _oldColor> = r2;

        r0.<com.jidesoft.icons.MaskFilter: boolean canFilterIndexColorModel> = 1;

        return;
    }

    public int filterRGB(int, int, int)
    {
        java.awt.Color $r1, $r2, $r3, $r4;
        com.jidesoft.icons.MaskFilter r0;
        int i0, $i1, $i2, i3, i4;

        r0 := @this: com.jidesoft.icons.MaskFilter;

        i3 := @parameter0: int;

        i4 := @parameter1: int;

        i0 := @parameter2: int;

        $r1 = r0.<com.jidesoft.icons.MaskFilter: java.awt.Color _newColor>;

        if $r1 == null goto label1;

        $r2 = r0.<com.jidesoft.icons.MaskFilter: java.awt.Color _oldColor>;

        if $r2 == null goto label1;

        $r3 = r0.<com.jidesoft.icons.MaskFilter: java.awt.Color _oldColor>;

        $i1 = virtualinvoke $r3.<java.awt.Color: int getRGB()>();

        if i0 != $i1 goto label1;

        $r4 = r0.<com.jidesoft.icons.MaskFilter: java.awt.Color _newColor>;

        $i2 = virtualinvoke $r4.<java.awt.Color: int getRGB()>();

        return $i2;

     label1:
        return i0;
    }

    static void <clinit>()
    {
        <com.jidesoft.icons.MaskFilter: com.jidesoft.icons.MaskFilter _maskFilter> = null;

        return;
    }
}
