public class org.pircbotx.hooks.managers.ThreadedListenerManager$ListenerThreadFactory extends java.lang.Object implements java.util.concurrent.ThreadFactory
{
    protected final java.util.concurrent.atomic.AtomicInteger threadCount;
    protected static final java.util.concurrent.atomic.AtomicInteger poolCount;
    protected java.lang.String prefix;

    public void <init>(java.lang.String)
    {
        org.pircbotx.hooks.managers.ThreadedListenerManager$ListenerThreadFactory r0;
        java.util.concurrent.atomic.AtomicInteger $r1, $r4;
        int $i0;
        java.lang.StringBuilder $r2, $r3, $r5, $r6, $r8, $r9;
        java.lang.String r7, $r10;

        r0 := @this: org.pircbotx.hooks.managers.ThreadedListenerManager$ListenerThreadFactory;

        r7 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: void <init>()>();

        r0.<org.pircbotx.hooks.managers.ThreadedListenerManager$ListenerThreadFactory: java.util.concurrent.atomic.AtomicInteger threadCount> = $r1;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("pool-");

        $r4 = <org.pircbotx.hooks.managers.ThreadedListenerManager$ListenerThreadFactory: java.util.concurrent.atomic.AtomicInteger poolCount>;

        $i0 = virtualinvoke $r4.<java.util.concurrent.atomic.AtomicInteger: int getAndIncrement()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-");

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        r0.<org.pircbotx.hooks.managers.ThreadedListenerManager$ListenerThreadFactory: java.lang.String prefix> = $r10;

        return;
    }

    public java.lang.Thread newThread(java.lang.Runnable)
    {
        java.lang.Runnable r1;
        org.pircbotx.hooks.managers.ThreadedListenerManager$ListenerThreadFactory r3;
        java.util.concurrent.atomic.AtomicInteger $r6;
        java.lang.Thread $r0;
        int $i0;
        java.lang.StringBuilder $r2, $r5, $r7;
        java.lang.String $r4, $r8;

        r3 := @this: org.pircbotx.hooks.managers.ThreadedListenerManager$ListenerThreadFactory;

        r1 := @parameter0: java.lang.Runnable;

        $r0 = new java.lang.Thread;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r4 = r3.<org.pircbotx.hooks.managers.ThreadedListenerManager$ListenerThreadFactory: java.lang.String prefix>;

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = r3.<org.pircbotx.hooks.managers.ThreadedListenerManager$ListenerThreadFactory: java.util.concurrent.atomic.AtomicInteger threadCount>;

        $i0 = virtualinvoke $r6.<java.util.concurrent.atomic.AtomicInteger: int getAndIncrement()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.Thread: void <init>(java.lang.Runnable,java.lang.String)>(r1, $r8);

        virtualinvoke $r0.<java.lang.Thread: void setDaemon(boolean)>(1);

        return $r0;
    }

    static void <clinit>()
    {
        java.util.concurrent.atomic.AtomicInteger $r0;

        $r0 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke $r0.<java.util.concurrent.atomic.AtomicInteger: void <init>()>();

        <org.pircbotx.hooks.managers.ThreadedListenerManager$ListenerThreadFactory: java.util.concurrent.atomic.AtomicInteger poolCount> = $r0;

        return;
    }
}
