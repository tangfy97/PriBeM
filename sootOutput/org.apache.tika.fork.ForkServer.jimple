class org.apache.tika.fork.ForkServer extends java.lang.Object implements java.lang.Runnable, java.util.zip.Checksum
{
    public static final byte ERROR;
    public static final byte DONE;
    public static final byte CALL;
    public static final byte PING;
    public static final byte RESOURCE;
    public static final byte READY;
    private final java.io.DataInputStream input;
    private final java.io.DataOutputStream output;
    private volatile boolean active;

    public static void main(java.lang.String[]) throws java.lang.Exception
    {
        java.io.PrintStream $r2, $r6;
        byte[] $r5;
        org.apache.tika.fork.MemoryURLStreamHandlerFactory $r0;
        java.lang.String[] r8;
        org.apache.tika.fork.ForkServer $r1;
        java.io.ByteArrayInputStream $r4;
        java.lang.Thread $r7;
        java.io.InputStream $r3;

        r8 := @parameter0: java.lang.String[];

        $r0 = new org.apache.tika.fork.MemoryURLStreamHandlerFactory;

        specialinvoke $r0.<org.apache.tika.fork.MemoryURLStreamHandlerFactory: void <init>()>();

        staticinvoke <java.net.URL: void setURLStreamHandlerFactory(java.net.URLStreamHandlerFactory)>($r0);

        $r1 = new org.apache.tika.fork.ForkServer;

        $r3 = <java.lang.System: java.io.InputStream in>;

        $r2 = <java.lang.System: java.io.PrintStream out>;

        specialinvoke $r1.<org.apache.tika.fork.ForkServer: void <init>(java.io.InputStream,java.io.OutputStream)>($r3, $r2);

        $r4 = new java.io.ByteArrayInputStream;

        $r5 = newarray (byte)[0];

        specialinvoke $r4.<java.io.ByteArrayInputStream: void <init>(byte[])>($r5);

        staticinvoke <java.lang.System: void setIn(java.io.InputStream)>($r4);

        $r6 = <java.lang.System: java.io.PrintStream err>;

        staticinvoke <java.lang.System: void setOut(java.io.PrintStream)>($r6);

        $r7 = new java.lang.Thread;

        specialinvoke $r7.<java.lang.Thread: void <init>(java.lang.Runnable,java.lang.String)>($r1, "Tika Watchdog");

        virtualinvoke $r7.<java.lang.Thread: void setDaemon(boolean)>(1);

        virtualinvoke $r7.<java.lang.Thread: void start()>();

        virtualinvoke $r1.<org.apache.tika.fork.ForkServer: void processRequests()>();

        return;
    }

    public void <init>(java.io.InputStream, java.io.OutputStream) throws java.io.IOException
    {
        org.apache.tika.fork.ForkServer r0;
        java.io.OutputStream r6;
        java.io.DataInputStream $r1;
        java.util.zip.CheckedInputStream $r2;
        java.io.DataOutputStream $r4;
        java.util.zip.CheckedOutputStream $r5;
        java.io.InputStream r3;

        r0 := @this: org.apache.tika.fork.ForkServer;

        r3 := @parameter0: java.io.InputStream;

        r6 := @parameter1: java.io.OutputStream;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.tika.fork.ForkServer: boolean active> = 1;

        $r1 = new java.io.DataInputStream;

        $r2 = new java.util.zip.CheckedInputStream;

        specialinvoke $r2.<java.util.zip.CheckedInputStream: void <init>(java.io.InputStream,java.util.zip.Checksum)>(r3, r0);

        specialinvoke $r1.<java.io.DataInputStream: void <init>(java.io.InputStream)>($r2);

        r0.<org.apache.tika.fork.ForkServer: java.io.DataInputStream input> = $r1;

        $r4 = new java.io.DataOutputStream;

        $r5 = new java.util.zip.CheckedOutputStream;

        specialinvoke $r5.<java.util.zip.CheckedOutputStream: void <init>(java.io.OutputStream,java.util.zip.Checksum)>(r6, r0);

        specialinvoke $r4.<java.io.DataOutputStream: void <init>(java.io.OutputStream)>($r5);

        r0.<org.apache.tika.fork.ForkServer: java.io.DataOutputStream output> = $r4;

        return;
    }

    public void run()
    {
        org.apache.tika.fork.ForkServer r0;
        java.lang.InterruptedException $r1;
        boolean $z0;

        r0 := @this: org.apache.tika.fork.ForkServer;

     label1:
        $z0 = r0.<org.apache.tika.fork.ForkServer: boolean active>;

        if $z0 == 0 goto label2;

        r0.<org.apache.tika.fork.ForkServer: boolean active> = 0;

        staticinvoke <java.lang.Thread: void sleep(long)>(5000L);

        goto label1;

     label2:
        staticinvoke <java.lang.System: void exit(int)>(0);

     label3:
        goto label5;

     label4:
        $r1 := @caughtexception;

     label5:
        return;

        catch java.lang.InterruptedException from label1 to label3 with label4;
    }

    public void processRequests()
    {
        java.lang.Throwable $r13;
        java.io.DataInputStream $r8;
        java.lang.IllegalStateException $r15;
        java.io.DataOutputStream $r1, $r2, $r10, $r11;
        java.lang.Thread $r6;
        int $i0, $i2;
        java.io.PrintStream $r12;
        org.apache.tika.fork.ForkServer r0;
        java.lang.Class $r3;
        java.lang.Object $r5, $r7;
        java.lang.ClassLoader $r4, r14;

        r0 := @this: org.apache.tika.fork.ForkServer;

     label1:
        $r1 = r0.<org.apache.tika.fork.ForkServer: java.io.DataOutputStream output>;

        virtualinvoke $r1.<java.io.DataOutputStream: void writeByte(int)>(4);

        $r2 = r0.<org.apache.tika.fork.ForkServer: java.io.DataOutputStream output>;

        virtualinvoke $r2.<java.io.DataOutputStream: void flush()>();

        $r3 = class "Lorg/apache/tika/fork/ForkServer;";

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r5 = specialinvoke r0.<org.apache.tika.fork.ForkServer: java.lang.Object readObject(java.lang.ClassLoader)>($r4);

        r14 = (java.lang.ClassLoader) $r5;

        $r6 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r6.<java.lang.Thread: void setContextClassLoader(java.lang.ClassLoader)>(r14);

        $r7 = specialinvoke r0.<org.apache.tika.fork.ForkServer: java.lang.Object readObject(java.lang.ClassLoader)>(r14);

     label2:
        $r8 = r0.<org.apache.tika.fork.ForkServer: java.io.DataInputStream input>;

        $i0 = virtualinvoke $r8.<java.io.DataInputStream: int read()>();

        $i2 = (int) -1;

        if $i0 != $i2 goto label3;

        goto label7;

     label3:
        if $i0 != 2 goto label4;

        $r11 = r0.<org.apache.tika.fork.ForkServer: java.io.DataOutputStream output>;

        virtualinvoke $r11.<java.io.DataOutputStream: void writeByte(int)>(2);

        goto label6;

     label4:
        if $i0 != 1 goto label5;

        specialinvoke r0.<org.apache.tika.fork.ForkServer: void call(java.lang.ClassLoader,java.lang.Object)>(r14, $r7);

        goto label6;

     label5:
        $r15 = new java.lang.IllegalStateException;

        specialinvoke $r15.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Unexpected request");

        throw $r15;

     label6:
        $r10 = r0.<org.apache.tika.fork.ForkServer: java.io.DataOutputStream output>;

        virtualinvoke $r10.<java.io.DataOutputStream: void flush()>();

        goto label2;

     label7:
        goto label9;

     label8:
        $r13 := @caughtexception;

        virtualinvoke $r13.<java.lang.Throwable: void printStackTrace()>();

     label9:
        $r12 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r12.<java.io.PrintStream: void flush()>();

        return;

        catch java.lang.Throwable from label1 to label7 with label8;
    }

    private void call(java.lang.ClassLoader, java.lang.Object) throws java.lang.Exception
    {
        java.lang.Throwable $r17;
        java.io.DataInputStream $r2;
        java.lang.Object[] r6;
        java.io.DataOutputStream $r7, $r14, $r16, $r18;
        org.apache.tika.exception.TikaException $r19;
        int $i0, $i1, i2, $i4;
        java.lang.String $r3, $r12;
        java.lang.reflect.Method $r4;
        java.lang.Class[] $r5;
        java.io.NotSerializableException $r10;
        java.lang.reflect.InvocationTargetException $r15;
        org.apache.tika.fork.ForkServer r0;
        java.lang.StackTraceElement[] $r13;
        java.lang.Object r1, $r9;
        java.lang.ClassLoader r8;

        r0 := @this: org.apache.tika.fork.ForkServer;

        r8 := @parameter0: java.lang.ClassLoader;

        r1 := @parameter1: java.lang.Object;

        $r2 = r0.<org.apache.tika.fork.ForkServer: java.io.DataInputStream input>;

        $r3 = virtualinvoke $r2.<java.io.DataInputStream: java.lang.String readUTF()>();

        $r4 = specialinvoke r0.<org.apache.tika.fork.ForkServer: java.lang.reflect.Method getMethod(java.lang.Object,java.lang.String)>(r1, $r3);

        $r5 = virtualinvoke $r4.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $i0 = lengthof $r5;

        r6 = newarray (java.lang.Object)[$i0];

        i2 = 0;

     label1:
        $i1 = lengthof r6;

        if i2 >= $i1 goto label2;

        $r9 = specialinvoke r0.<org.apache.tika.fork.ForkServer: java.lang.Object readObject(java.lang.ClassLoader)>(r8);

        r6[i2] = $r9;

        i2 = i2 + 1;

        goto label1;

     label2:
        virtualinvoke $r4.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r1, r6);

        $r7 = r0.<org.apache.tika.fork.ForkServer: java.io.DataOutputStream output>;

        virtualinvoke $r7.<java.io.DataOutputStream: void write(int)>(0);

     label3:
        goto label8;

     label4:
        $r15 := @caughtexception;

        $r16 = r0.<org.apache.tika.fork.ForkServer: java.io.DataOutputStream output>;

        $i4 = (int) -1;

        virtualinvoke $r16.<java.io.DataOutputStream: void write(int)>($i4);

        $r17 = virtualinvoke $r15.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getCause()>();

     label5:
        $r18 = r0.<org.apache.tika.fork.ForkServer: java.io.DataOutputStream output>;

        staticinvoke <org.apache.tika.fork.ForkObjectInputStream: void sendObject(java.lang.Object,java.io.DataOutputStream)>($r17, $r18);

     label6:
        goto label8;

     label7:
        $r10 := @caughtexception;

        $r19 = new org.apache.tika.exception.TikaException;

        $r12 = virtualinvoke $r17.<java.lang.Throwable: java.lang.String getMessage()>();

        specialinvoke $r19.<org.apache.tika.exception.TikaException: void <init>(java.lang.String)>($r12);

        $r13 = virtualinvoke $r17.<java.lang.Throwable: java.lang.StackTraceElement[] getStackTrace()>();

        virtualinvoke $r19.<org.apache.tika.exception.TikaException: void setStackTrace(java.lang.StackTraceElement[])>($r13);

        $r14 = r0.<org.apache.tika.fork.ForkServer: java.io.DataOutputStream output>;

        staticinvoke <org.apache.tika.fork.ForkObjectInputStream: void sendObject(java.lang.Object,java.io.DataOutputStream)>($r19, $r14);

     label8:
        return;

        catch java.lang.reflect.InvocationTargetException from label2 to label3 with label4;
        catch java.io.NotSerializableException from label5 to label6 with label7;
    }

    private java.lang.reflect.Method getMethod(java.lang.Object, java.lang.String)
    {
        java.lang.Class[] $r1;
        java.lang.reflect.Method[] $r3;
        org.apache.tika.fork.ForkServer r7;
        int i0, i1, i2, i3;
        java.lang.Object r0;
        java.lang.Class r2, r8;
        java.lang.String r5, $r6;
        java.lang.reflect.Method r4;
        boolean $z0;

        r7 := @this: org.apache.tika.fork.ForkServer;

        r0 := @parameter0: java.lang.Object;

        r5 := @parameter1: java.lang.String;

        r8 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

     label1:
        if r8 == null goto label7;

        $r1 = virtualinvoke r8.<java.lang.Class: java.lang.Class[] getInterfaces()>();

        i0 = lengthof $r1;

        i2 = 0;

     label2:
        if i2 >= i0 goto label6;

        r2 = $r1[i2];

        $r3 = virtualinvoke r2.<java.lang.Class: java.lang.reflect.Method[] getMethods()>();

        i1 = lengthof $r3;

        i3 = 0;

     label3:
        if i3 >= i1 goto label5;

        r4 = $r3[i3];

        $r6 = virtualinvoke r4.<java.lang.reflect.Method: java.lang.String getName()>();

        $z0 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z0 == 0 goto label4;

        return r4;

     label4:
        i3 = i3 + 1;

        goto label3;

     label5:
        i2 = i2 + 1;

        goto label2;

     label6:
        r8 = virtualinvoke r8.<java.lang.Class: java.lang.Class getSuperclass()>();

        goto label1;

     label7:
        return null;
    }

    private java.lang.Object readObject(java.lang.ClassLoader) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.io.DataInputStream $r2, $r7;
        org.apache.tika.fork.ForkServer r0;
        org.apache.tika.fork.ForkProxy $r8;
        java.io.DataOutputStream $r4, $r5, $r6;
        java.lang.Object $r3;
        java.lang.ClassLoader r1;
        boolean $z0;

        r0 := @this: org.apache.tika.fork.ForkServer;

        r1 := @parameter0: java.lang.ClassLoader;

        $r2 = r0.<org.apache.tika.fork.ForkServer: java.io.DataInputStream input>;

        $r3 = staticinvoke <org.apache.tika.fork.ForkObjectInputStream: java.lang.Object readObject(java.io.DataInputStream,java.lang.ClassLoader)>($r2, r1);

        $z0 = $r3 instanceof org.apache.tika.fork.ForkProxy;

        if $z0 == 0 goto label1;

        $r8 = (org.apache.tika.fork.ForkProxy) $r3;

        $r7 = r0.<org.apache.tika.fork.ForkServer: java.io.DataInputStream input>;

        $r6 = r0.<org.apache.tika.fork.ForkServer: java.io.DataOutputStream output>;

        interfaceinvoke $r8.<org.apache.tika.fork.ForkProxy: void init(java.io.DataInputStream,java.io.DataOutputStream)>($r7, $r6);

     label1:
        $r4 = r0.<org.apache.tika.fork.ForkServer: java.io.DataOutputStream output>;

        virtualinvoke $r4.<java.io.DataOutputStream: void writeByte(int)>(0);

        $r5 = r0.<org.apache.tika.fork.ForkServer: java.io.DataOutputStream output>;

        virtualinvoke $r5.<java.io.DataOutputStream: void flush()>();

        return $r3;
    }

    public void update(int)
    {
        org.apache.tika.fork.ForkServer r0;
        int i0;

        r0 := @this: org.apache.tika.fork.ForkServer;

        i0 := @parameter0: int;

        r0.<org.apache.tika.fork.ForkServer: boolean active> = 1;

        return;
    }

    public void update(byte[], int, int)
    {
        org.apache.tika.fork.ForkServer r0;
        byte[] r1;
        int i0, i1;

        r0 := @this: org.apache.tika.fork.ForkServer;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r0.<org.apache.tika.fork.ForkServer: boolean active> = 1;

        return;
    }

    public long getValue()
    {
        org.apache.tika.fork.ForkServer r0;

        r0 := @this: org.apache.tika.fork.ForkServer;

        return 0L;
    }

    public void reset()
    {
        org.apache.tika.fork.ForkServer r0;

        r0 := @this: org.apache.tika.fork.ForkServer;

        return;
    }

    public static void <clinit>()
    {
        <org.apache.tika.fork.ForkServer: byte READY> = 4;

        <org.apache.tika.fork.ForkServer: byte RESOURCE> = 3;

        <org.apache.tika.fork.ForkServer: byte PING> = 2;

        <org.apache.tika.fork.ForkServer: byte CALL> = 1;

        <org.apache.tika.fork.ForkServer: byte DONE> = 0;

        <org.apache.tika.fork.ForkServer: byte ERROR> = -1;

        return;
    }
}
