public class org.mozilla.javascript.ObjArray extends java.lang.Object implements java.io.Serializable
{
    static final long serialVersionUID;
    private int size;
    private boolean sealed;
    private static final int FIELDS_STORE_SIZE;
    private transient java.lang.Object f0;
    private transient java.lang.Object f1;
    private transient java.lang.Object f2;
    private transient java.lang.Object f3;
    private transient java.lang.Object f4;
    private transient java.lang.Object[] data;

    public void <init>()
    {
        org.mozilla.javascript.ObjArray r0;

        r0 := @this: org.mozilla.javascript.ObjArray;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public final boolean isSealed()
    {
        org.mozilla.javascript.ObjArray r0;
        boolean $z0;

        r0 := @this: org.mozilla.javascript.ObjArray;

        $z0 = r0.<org.mozilla.javascript.ObjArray: boolean sealed>;

        return $z0;
    }

    public final void seal()
    {
        org.mozilla.javascript.ObjArray r0;

        r0 := @this: org.mozilla.javascript.ObjArray;

        r0.<org.mozilla.javascript.ObjArray: boolean sealed> = 1;

        return;
    }

    public final boolean isEmpty()
    {
        int $i0;
        org.mozilla.javascript.ObjArray r0;
        boolean $z0;

        r0 := @this: org.mozilla.javascript.ObjArray;

        $i0 = r0.<org.mozilla.javascript.ObjArray: int size>;

        if $i0 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public final int size()
    {
        int $i0;
        org.mozilla.javascript.ObjArray r0;

        r0 := @this: org.mozilla.javascript.ObjArray;

        $i0 = r0.<org.mozilla.javascript.ObjArray: int size>;

        return $i0;
    }

    public final void setSize(int)
    {
        org.mozilla.javascript.ObjArray r0;
        int i0, i1, i2;
        java.lang.RuntimeException $r1;
        java.lang.IllegalArgumentException $r2;
        boolean $z0;

        r0 := @this: org.mozilla.javascript.ObjArray;

        i0 := @parameter0: int;

        if i0 >= 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r2;

     label1:
        $z0 = r0.<org.mozilla.javascript.ObjArray: boolean sealed>;

        if $z0 == 0 goto label2;

        $r1 = staticinvoke <org.mozilla.javascript.ObjArray: java.lang.RuntimeException onSeledMutation()>();

        throw $r1;

     label2:
        i1 = r0.<org.mozilla.javascript.ObjArray: int size>;

        if i0 >= i1 goto label4;

        i2 = i0;

     label3:
        if i2 == i1 goto label5;

        specialinvoke r0.<org.mozilla.javascript.ObjArray: void setImpl(int,java.lang.Object)>(i2, null);

        i2 = i2 + 1;

        goto label3;

     label4:
        if i0 <= i1 goto label5;

        if i0 <= 5 goto label5;

        specialinvoke r0.<org.mozilla.javascript.ObjArray: void ensureCapacity(int)>(i0);

     label5:
        r0.<org.mozilla.javascript.ObjArray: int size> = i0;

        return;
    }

    public final java.lang.Object get(int)
    {
        org.mozilla.javascript.ObjArray r0;
        int i0, $i1, $i2;
        java.lang.Object $r2;
        java.lang.RuntimeException $r1;

        r0 := @this: org.mozilla.javascript.ObjArray;

        i0 := @parameter0: int;

        if 0 > i0 goto label1;

        $i2 = r0.<org.mozilla.javascript.ObjArray: int size>;

        if i0 < $i2 goto label2;

     label1:
        $i1 = r0.<org.mozilla.javascript.ObjArray: int size>;

        $r1 = staticinvoke <org.mozilla.javascript.ObjArray: java.lang.RuntimeException onInvalidIndex(int,int)>(i0, $i1);

        throw $r1;

     label2:
        $r2 = specialinvoke r0.<org.mozilla.javascript.ObjArray: java.lang.Object getImpl(int)>(i0);

        return $r2;
    }

    public final void set(int, java.lang.Object)
    {
        java.lang.RuntimeException $r1, $r3;
        org.mozilla.javascript.ObjArray r0;
        int i0, $i1, $i2;
        java.lang.Object r2;
        boolean $z0;

        r0 := @this: org.mozilla.javascript.ObjArray;

        i0 := @parameter0: int;

        r2 := @parameter1: java.lang.Object;

        if 0 > i0 goto label1;

        $i2 = r0.<org.mozilla.javascript.ObjArray: int size>;

        if i0 < $i2 goto label2;

     label1:
        $i1 = r0.<org.mozilla.javascript.ObjArray: int size>;

        $r1 = staticinvoke <org.mozilla.javascript.ObjArray: java.lang.RuntimeException onInvalidIndex(int,int)>(i0, $i1);

        throw $r1;

     label2:
        $z0 = r0.<org.mozilla.javascript.ObjArray: boolean sealed>;

        if $z0 == 0 goto label3;

        $r3 = staticinvoke <org.mozilla.javascript.ObjArray: java.lang.RuntimeException onSeledMutation()>();

        throw $r3;

     label3:
        specialinvoke r0.<org.mozilla.javascript.ObjArray: void setImpl(int,java.lang.Object)>(i0, r2);

        return;
    }

    private java.lang.Object getImpl(int)
    {
        java.lang.Object[] $r6;
        org.mozilla.javascript.ObjArray r0;
        int i0, $i1;
        java.lang.Object $r1, $r2, $r3, $r4, $r5, $r7;

        r0 := @this: org.mozilla.javascript.ObjArray;

        i0 := @parameter0: int;

        tableswitch(i0)
        {
            case 0: goto label1;
            case 1: goto label2;
            case 2: goto label3;
            case 3: goto label4;
            case 4: goto label5;
            default: goto label6;
        };

     label1:
        $r5 = r0.<org.mozilla.javascript.ObjArray: java.lang.Object f0>;

        return $r5;

     label2:
        $r4 = r0.<org.mozilla.javascript.ObjArray: java.lang.Object f1>;

        return $r4;

     label3:
        $r3 = r0.<org.mozilla.javascript.ObjArray: java.lang.Object f2>;

        return $r3;

     label4:
        $r2 = r0.<org.mozilla.javascript.ObjArray: java.lang.Object f3>;

        return $r2;

     label5:
        $r1 = r0.<org.mozilla.javascript.ObjArray: java.lang.Object f4>;

        return $r1;

     label6:
        $r6 = r0.<org.mozilla.javascript.ObjArray: java.lang.Object[] data>;

        $i1 = i0 - 5;

        $r7 = $r6[$i1];

        return $r7;
    }

    private void setImpl(int, java.lang.Object)
    {
        java.lang.Object[] $r2;
        org.mozilla.javascript.ObjArray r0;
        int i0, $i1;
        java.lang.Object r1;

        r0 := @this: org.mozilla.javascript.ObjArray;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object;

        tableswitch(i0)
        {
            case 0: goto label1;
            case 1: goto label2;
            case 2: goto label3;
            case 3: goto label4;
            case 4: goto label5;
            default: goto label6;
        };

     label1:
        r0.<org.mozilla.javascript.ObjArray: java.lang.Object f0> = r1;

        goto label7;

     label2:
        r0.<org.mozilla.javascript.ObjArray: java.lang.Object f1> = r1;

        goto label7;

     label3:
        r0.<org.mozilla.javascript.ObjArray: java.lang.Object f2> = r1;

        goto label7;

     label4:
        r0.<org.mozilla.javascript.ObjArray: java.lang.Object f3> = r1;

        goto label7;

     label5:
        r0.<org.mozilla.javascript.ObjArray: java.lang.Object f4> = r1;

        goto label7;

     label6:
        $r2 = r0.<org.mozilla.javascript.ObjArray: java.lang.Object[] data>;

        $i1 = i0 - 5;

        $r2[$i1] = r1;

     label7:
        return;
    }

    public int indexOf(java.lang.Object)
    {
        org.mozilla.javascript.ObjArray r0;
        int i0, i1, $i3;
        java.lang.Object $r1, r2;
        boolean $z0;

        r0 := @this: org.mozilla.javascript.ObjArray;

        r2 := @parameter0: java.lang.Object;

        i0 = r0.<org.mozilla.javascript.ObjArray: int size>;

        i1 = 0;

     label1:
        if i1 == i0 goto label4;

        $r1 = specialinvoke r0.<org.mozilla.javascript.ObjArray: java.lang.Object getImpl(int)>(i1);

        if $r1 == r2 goto label2;

        if $r1 == null goto label3;

        $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>(r2);

        if $z0 == 0 goto label3;

     label2:
        return i1;

     label3:
        i1 = i1 + 1;

        goto label1;

     label4:
        $i3 = (int) -1;

        return $i3;
    }

    public int lastIndexOf(java.lang.Object)
    {
        org.mozilla.javascript.ObjArray r0;
        int i0, $i2, $i4;
        java.lang.Object $r1, r2;
        boolean $z0;

        r0 := @this: org.mozilla.javascript.ObjArray;

        r2 := @parameter0: java.lang.Object;

        i0 = r0.<org.mozilla.javascript.ObjArray: int size>;

     label1:
        if i0 == 0 goto label3;

        $i2 = (int) -1;

        i0 = i0 + $i2;

        $r1 = specialinvoke r0.<org.mozilla.javascript.ObjArray: java.lang.Object getImpl(int)>(i0);

        if $r1 == r2 goto label2;

        if $r1 == null goto label1;

        $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>(r2);

        if $z0 == 0 goto label1;

     label2:
        return i0;

     label3:
        $i4 = (int) -1;

        return $i4;
    }

    public final java.lang.Object peek()
    {
        org.mozilla.javascript.ObjArray r0;
        int i0, $i1;
        java.lang.Object $r1;
        java.lang.RuntimeException $r2;

        r0 := @this: org.mozilla.javascript.ObjArray;

        i0 = r0.<org.mozilla.javascript.ObjArray: int size>;

        if i0 != 0 goto label1;

        $r2 = staticinvoke <org.mozilla.javascript.ObjArray: java.lang.RuntimeException onEmptyStackTopRead()>();

        throw $r2;

     label1:
        $i1 = i0 - 1;

        $r1 = specialinvoke r0.<org.mozilla.javascript.ObjArray: java.lang.Object getImpl(int)>($i1);

        return $r1;
    }

    public final java.lang.Object pop()
    {
        java.lang.Object[] $r2, $r3;
        java.lang.RuntimeException $r1, $r4;
        org.mozilla.javascript.ObjArray r0;
        int $i0, $i1, i2, i3, $i5;
        java.lang.Object r5;
        boolean $z0;

        r0 := @this: org.mozilla.javascript.ObjArray;

        $z0 = r0.<org.mozilla.javascript.ObjArray: boolean sealed>;

        if $z0 == 0 goto label1;

        $r4 = staticinvoke <org.mozilla.javascript.ObjArray: java.lang.RuntimeException onSeledMutation()>();

        throw $r4;

     label1:
        i2 = r0.<org.mozilla.javascript.ObjArray: int size>;

        $i5 = (int) -1;

        i3 = i2 + $i5;

        tableswitch(i3)
        {
            case -1: goto label2;
            case 0: goto label3;
            case 1: goto label4;
            case 2: goto label5;
            case 3: goto label6;
            case 4: goto label7;
            default: goto label8;
        };

     label2:
        $r1 = staticinvoke <org.mozilla.javascript.ObjArray: java.lang.RuntimeException onEmptyStackTopRead()>();

        throw $r1;

     label3:
        r5 = r0.<org.mozilla.javascript.ObjArray: java.lang.Object f0>;

        r0.<org.mozilla.javascript.ObjArray: java.lang.Object f0> = null;

        goto label9;

     label4:
        r5 = r0.<org.mozilla.javascript.ObjArray: java.lang.Object f1>;

        r0.<org.mozilla.javascript.ObjArray: java.lang.Object f1> = null;

        goto label9;

     label5:
        r5 = r0.<org.mozilla.javascript.ObjArray: java.lang.Object f2>;

        r0.<org.mozilla.javascript.ObjArray: java.lang.Object f2> = null;

        goto label9;

     label6:
        r5 = r0.<org.mozilla.javascript.ObjArray: java.lang.Object f3>;

        r0.<org.mozilla.javascript.ObjArray: java.lang.Object f3> = null;

        goto label9;

     label7:
        r5 = r0.<org.mozilla.javascript.ObjArray: java.lang.Object f4>;

        r0.<org.mozilla.javascript.ObjArray: java.lang.Object f4> = null;

        goto label9;

     label8:
        $r2 = r0.<org.mozilla.javascript.ObjArray: java.lang.Object[] data>;

        $i0 = i3 - 5;

        r5 = $r2[$i0];

        $r3 = r0.<org.mozilla.javascript.ObjArray: java.lang.Object[] data>;

        $i1 = i3 - 5;

        $r3[$i1] = null;

     label9:
        r0.<org.mozilla.javascript.ObjArray: int size> = i3;

        return r5;
    }

    public final void push(java.lang.Object)
    {
        java.lang.Object r1;
        org.mozilla.javascript.ObjArray r0;

        r0 := @this: org.mozilla.javascript.ObjArray;

        r1 := @parameter0: java.lang.Object;

        virtualinvoke r0.<org.mozilla.javascript.ObjArray: void add(java.lang.Object)>(r1);

        return;
    }

    public final void add(java.lang.Object)
    {
        org.mozilla.javascript.ObjArray r0;
        int i0, $i1, $i2;
        java.lang.Object r1;
        java.lang.RuntimeException $r2;
        boolean $z0;

        r0 := @this: org.mozilla.javascript.ObjArray;

        r1 := @parameter0: java.lang.Object;

        $z0 = r0.<org.mozilla.javascript.ObjArray: boolean sealed>;

        if $z0 == 0 goto label1;

        $r2 = staticinvoke <org.mozilla.javascript.ObjArray: java.lang.RuntimeException onSeledMutation()>();

        throw $r2;

     label1:
        i0 = r0.<org.mozilla.javascript.ObjArray: int size>;

        if i0 < 5 goto label2;

        $i2 = i0 + 1;

        specialinvoke r0.<org.mozilla.javascript.ObjArray: void ensureCapacity(int)>($i2);

     label2:
        $i1 = i0 + 1;

        r0.<org.mozilla.javascript.ObjArray: int size> = $i1;

        specialinvoke r0.<org.mozilla.javascript.ObjArray: void setImpl(int,java.lang.Object)>(i0, r1);

        return;
    }

    public final void add(int, java.lang.Object)
    {
        java.lang.Object[] $r2, $r3, $r4;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, $i9;
        boolean $z0;
        java.lang.RuntimeException $r1, $r5;
        org.mozilla.javascript.ObjArray r0;
        java.lang.Object r6, r7, r8, r9, r10, r11;

        r0 := @this: org.mozilla.javascript.ObjArray;

        i8 := @parameter0: int;

        r6 := @parameter1: java.lang.Object;

        i0 = r0.<org.mozilla.javascript.ObjArray: int size>;

        if 0 > i8 goto label01;

        if i8 <= i0 goto label02;

     label01:
        $i1 = i0 + 1;

        $r1 = staticinvoke <org.mozilla.javascript.ObjArray: java.lang.RuntimeException onInvalidIndex(int,int)>(i8, $i1);

        throw $r1;

     label02:
        $z0 = r0.<org.mozilla.javascript.ObjArray: boolean sealed>;

        if $z0 == 0 goto label03;

        $r5 = staticinvoke <org.mozilla.javascript.ObjArray: java.lang.RuntimeException onSeledMutation()>();

        throw $r5;

     label03:
        tableswitch(i8)
        {
            case 0: goto label04;
            case 1: goto label06;
            case 2: goto label08;
            case 3: goto label10;
            case 4: goto label12;
            default: goto label14;
        };

     label04:
        if i0 != 0 goto label05;

        r0.<org.mozilla.javascript.ObjArray: java.lang.Object f0> = r6;

        goto label16;

     label05:
        r7 = r0.<org.mozilla.javascript.ObjArray: java.lang.Object f0>;

        r0.<org.mozilla.javascript.ObjArray: java.lang.Object f0> = r6;

        r6 = r7;

     label06:
        if i0 != 1 goto label07;

        r0.<org.mozilla.javascript.ObjArray: java.lang.Object f1> = r6;

        goto label16;

     label07:
        r8 = r0.<org.mozilla.javascript.ObjArray: java.lang.Object f1>;

        r0.<org.mozilla.javascript.ObjArray: java.lang.Object f1> = r6;

        r6 = r8;

     label08:
        if i0 != 2 goto label09;

        r0.<org.mozilla.javascript.ObjArray: java.lang.Object f2> = r6;

        goto label16;

     label09:
        r9 = r0.<org.mozilla.javascript.ObjArray: java.lang.Object f2>;

        r0.<org.mozilla.javascript.ObjArray: java.lang.Object f2> = r6;

        r6 = r9;

     label10:
        if i0 != 3 goto label11;

        r0.<org.mozilla.javascript.ObjArray: java.lang.Object f3> = r6;

        goto label16;

     label11:
        r10 = r0.<org.mozilla.javascript.ObjArray: java.lang.Object f3>;

        r0.<org.mozilla.javascript.ObjArray: java.lang.Object f3> = r6;

        r6 = r10;

     label12:
        if i0 != 4 goto label13;

        r0.<org.mozilla.javascript.ObjArray: java.lang.Object f4> = r6;

        goto label16;

     label13:
        r11 = r0.<org.mozilla.javascript.ObjArray: java.lang.Object f4>;

        r0.<org.mozilla.javascript.ObjArray: java.lang.Object f4> = r6;

        r6 = r11;

        i8 = 5;

     label14:
        $i2 = i0 + 1;

        specialinvoke r0.<org.mozilla.javascript.ObjArray: void ensureCapacity(int)>($i2);

        if i8 == i0 goto label15;

        $r4 = r0.<org.mozilla.javascript.ObjArray: java.lang.Object[] data>;

        $i7 = i8 - 5;

        $r3 = r0.<org.mozilla.javascript.ObjArray: java.lang.Object[] data>;

        $i4 = i8 - 5;

        $i6 = $i4 + 1;

        $i5 = i0 - i8;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, $i7, $r3, $i6, $i5);

     label15:
        $r2 = r0.<org.mozilla.javascript.ObjArray: java.lang.Object[] data>;

        $i3 = i8 - 5;

        $r2[$i3] = r6;

     label16:
        $i9 = i0 + 1;

        r0.<org.mozilla.javascript.ObjArray: int size> = $i9;

        return;
    }

    public final void remove(int)
    {
        java.lang.Object[] $r2, $r4, $r5, $r6;
        int $i0, $i1, $i2, $i3, $i4, i5, i6, i7, $i9;
        boolean $z0;
        java.lang.RuntimeException $r1, $r11;
        org.mozilla.javascript.ObjArray r0;
        java.lang.Object $r3, $r7, $r8, $r9, $r10;

        r0 := @this: org.mozilla.javascript.ObjArray;

        i5 := @parameter0: int;

        i6 = r0.<org.mozilla.javascript.ObjArray: int size>;

        if 0 > i5 goto label01;

        if i5 < i6 goto label02;

     label01:
        $r1 = staticinvoke <org.mozilla.javascript.ObjArray: java.lang.RuntimeException onInvalidIndex(int,int)>(i5, i6);

        throw $r1;

     label02:
        $z0 = r0.<org.mozilla.javascript.ObjArray: boolean sealed>;

        if $z0 == 0 goto label03;

        $r11 = staticinvoke <org.mozilla.javascript.ObjArray: java.lang.RuntimeException onSeledMutation()>();

        throw $r11;

     label03:
        $i9 = (int) -1;

        i7 = i6 + $i9;

        tableswitch(i5)
        {
            case 0: goto label04;
            case 1: goto label06;
            case 2: goto label08;
            case 3: goto label10;
            case 4: goto label12;
            default: goto label14;
        };

     label04:
        if i7 != 0 goto label05;

        r0.<org.mozilla.javascript.ObjArray: java.lang.Object f0> = null;

        goto label16;

     label05:
        $r10 = r0.<org.mozilla.javascript.ObjArray: java.lang.Object f1>;

        r0.<org.mozilla.javascript.ObjArray: java.lang.Object f0> = $r10;

     label06:
        if i7 != 1 goto label07;

        r0.<org.mozilla.javascript.ObjArray: java.lang.Object f1> = null;

        goto label16;

     label07:
        $r9 = r0.<org.mozilla.javascript.ObjArray: java.lang.Object f2>;

        r0.<org.mozilla.javascript.ObjArray: java.lang.Object f1> = $r9;

     label08:
        if i7 != 2 goto label09;

        r0.<org.mozilla.javascript.ObjArray: java.lang.Object f2> = null;

        goto label16;

     label09:
        $r8 = r0.<org.mozilla.javascript.ObjArray: java.lang.Object f3>;

        r0.<org.mozilla.javascript.ObjArray: java.lang.Object f2> = $r8;

     label10:
        if i7 != 3 goto label11;

        r0.<org.mozilla.javascript.ObjArray: java.lang.Object f3> = null;

        goto label16;

     label11:
        $r7 = r0.<org.mozilla.javascript.ObjArray: java.lang.Object f4>;

        r0.<org.mozilla.javascript.ObjArray: java.lang.Object f3> = $r7;

     label12:
        if i7 != 4 goto label13;

        r0.<org.mozilla.javascript.ObjArray: java.lang.Object f4> = null;

        goto label16;

     label13:
        $r2 = r0.<org.mozilla.javascript.ObjArray: java.lang.Object[] data>;

        $r3 = $r2[0];

        r0.<org.mozilla.javascript.ObjArray: java.lang.Object f4> = $r3;

        i5 = 5;

     label14:
        if i5 == i7 goto label15;

        $r6 = r0.<org.mozilla.javascript.ObjArray: java.lang.Object[] data>;

        $i1 = i5 - 5;

        $i4 = $i1 + 1;

        $r5 = r0.<org.mozilla.javascript.ObjArray: java.lang.Object[] data>;

        $i3 = i5 - 5;

        $i2 = i7 - i5;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r6, $i4, $r5, $i3, $i2);

     label15:
        $r4 = r0.<org.mozilla.javascript.ObjArray: java.lang.Object[] data>;

        $i0 = i7 - 5;

        $r4[$i0] = null;

     label16:
        r0.<org.mozilla.javascript.ObjArray: int size> = i7;

        return;
    }

    public final void clear()
    {
        org.mozilla.javascript.ObjArray r0;
        int i0, i1;
        java.lang.RuntimeException $r1;
        boolean $z0;

        r0 := @this: org.mozilla.javascript.ObjArray;

        $z0 = r0.<org.mozilla.javascript.ObjArray: boolean sealed>;

        if $z0 == 0 goto label1;

        $r1 = staticinvoke <org.mozilla.javascript.ObjArray: java.lang.RuntimeException onSeledMutation()>();

        throw $r1;

     label1:
        i0 = r0.<org.mozilla.javascript.ObjArray: int size>;

        i1 = 0;

     label2:
        if i1 == i0 goto label3;

        specialinvoke r0.<org.mozilla.javascript.ObjArray: void setImpl(int,java.lang.Object)>(i1, null);

        i1 = i1 + 1;

        goto label2;

     label3:
        r0.<org.mozilla.javascript.ObjArray: int size> = 0;

        return;
    }

    public final java.lang.Object[] toArray()
    {
        int $i0;
        java.lang.Object[] r1;
        org.mozilla.javascript.ObjArray r0;

        r0 := @this: org.mozilla.javascript.ObjArray;

        $i0 = r0.<org.mozilla.javascript.ObjArray: int size>;

        r1 = newarray (java.lang.Object)[$i0];

        virtualinvoke r0.<org.mozilla.javascript.ObjArray: void toArray(java.lang.Object[],int)>(r1, 0);

        return r1;
    }

    public final void toArray(java.lang.Object[])
    {
        java.lang.Object[] r1;
        org.mozilla.javascript.ObjArray r0;

        r0 := @this: org.mozilla.javascript.ObjArray;

        r1 := @parameter0: java.lang.Object[];

        virtualinvoke r0.<org.mozilla.javascript.ObjArray: void toArray(java.lang.Object[],int)>(r1, 0);

        return;
    }

    public final void toArray(java.lang.Object[], int)
    {
        java.lang.Object[] r1, $r3;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        org.mozilla.javascript.ObjArray r0;
        java.lang.Object $r2, $r4, $r5, $r6, $r7;

        r0 := @this: org.mozilla.javascript.ObjArray;

        r1 := @parameter0: java.lang.Object[];

        i1 := @parameter1: int;

        i0 = r0.<org.mozilla.javascript.ObjArray: int size>;

        tableswitch(i0)
        {
            case 0: goto label7;
            case 1: goto label6;
            case 2: goto label5;
            case 3: goto label4;
            case 4: goto label3;
            case 5: goto label2;
            default: goto label1;
        };

     label1:
        $r3 = r0.<org.mozilla.javascript.ObjArray: java.lang.Object[] data>;

        $i4 = i1 + 5;

        $i3 = i0 - 5;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, r1, $i4, $i3);

     label2:
        $i2 = i1 + 4;

        $r2 = r0.<org.mozilla.javascript.ObjArray: java.lang.Object f4>;

        r1[$i2] = $r2;

     label3:
        $i5 = i1 + 3;

        $r4 = r0.<org.mozilla.javascript.ObjArray: java.lang.Object f3>;

        r1[$i5] = $r4;

     label4:
        $i6 = i1 + 2;

        $r5 = r0.<org.mozilla.javascript.ObjArray: java.lang.Object f2>;

        r1[$i6] = $r5;

     label5:
        $i7 = i1 + 1;

        $r6 = r0.<org.mozilla.javascript.ObjArray: java.lang.Object f1>;

        r1[$i7] = $r6;

     label6:
        $i8 = i1 + 0;

        $r7 = r0.<org.mozilla.javascript.ObjArray: java.lang.Object f0>;

        r1[$i8] = $r7;

     label7:
        return;
    }

    private void ensureCapacity(int)
    {
        java.lang.Object[] $r1, $r2, $r3, $r4, $r5;
        java.lang.IllegalArgumentException $r6;
        org.mozilla.javascript.ObjArray r0;
        int i0, i1, $i2, $i3, $i4, i5, i6, i7;

        r0 := @this: org.mozilla.javascript.ObjArray;

        i0 := @parameter0: int;

        i1 = i0 - 5;

        if i1 > 0 goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r6;

     label1:
        $r1 = r0.<org.mozilla.javascript.ObjArray: java.lang.Object[] data>;

        if $r1 != null goto label3;

        i5 = 10;

        if 10 >= i1 goto label2;

        i5 = i1;

     label2:
        $r5 = newarray (java.lang.Object)[i5];

        r0.<org.mozilla.javascript.ObjArray: java.lang.Object[] data> = $r5;

        goto label8;

     label3:
        $r2 = r0.<org.mozilla.javascript.ObjArray: java.lang.Object[] data>;

        i6 = lengthof $r2;

        if i6 >= i1 goto label8;

        if i6 > 5 goto label4;

        i7 = 10;

        goto label5;

     label4:
        i7 = i6 * 2;

     label5:
        if i7 >= i1 goto label6;

        i7 = i1;

     label6:
        $r4 = newarray (java.lang.Object)[i7];

        $i2 = r0.<org.mozilla.javascript.ObjArray: int size>;

        if $i2 <= 5 goto label7;

        $r3 = r0.<org.mozilla.javascript.ObjArray: java.lang.Object[] data>;

        $i3 = r0.<org.mozilla.javascript.ObjArray: int size>;

        $i4 = $i3 - 5;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, $r4, 0, $i4);

     label7:
        r0.<org.mozilla.javascript.ObjArray: java.lang.Object[] data> = $r4;

     label8:
        return;
    }

    private static java.lang.RuntimeException onInvalidIndex(int, int)
    {
        java.lang.IndexOutOfBoundsException $r6;
        java.lang.StringBuffer $r0, $r1, $r2, $r3, $r4;
        int i0, i1;
        java.lang.String $r5;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" \u2209 [0, ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i1);

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(41);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        $r6 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r6.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r5);

        throw $r6;
    }

    private static java.lang.RuntimeException onEmptyStackTopRead()
    {
        java.lang.RuntimeException $r0;

        $r0 = new java.lang.RuntimeException;

        specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Empty stack");

        throw $r0;
    }

    private static java.lang.RuntimeException onSeledMutation()
    {
        java.lang.IllegalStateException $r0;

        $r0 = new java.lang.IllegalStateException;

        specialinvoke $r0.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Attempt to modify sealed array");

        throw $r0;
    }

    private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException
    {
        org.mozilla.javascript.ObjArray r1;
        int i0, i1;
        java.io.ObjectOutputStream r0;
        java.lang.Object $r2;

        r1 := @this: org.mozilla.javascript.ObjArray;

        r0 := @parameter0: java.io.ObjectOutputStream;

        virtualinvoke r0.<java.io.ObjectOutputStream: void defaultWriteObject()>();

        i0 = r1.<org.mozilla.javascript.ObjArray: int size>;

        i1 = 0;

     label1:
        if i1 == i0 goto label2;

        $r2 = specialinvoke r1.<org.mozilla.javascript.ObjArray: java.lang.Object getImpl(int)>(i1);

        virtualinvoke r0.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>($r2);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.lang.Object[] $r3;
        org.mozilla.javascript.ObjArray r1;
        java.io.ObjectInputStream r0;
        int i0, $i1, i2;
        java.lang.Object $r2;

        r1 := @this: org.mozilla.javascript.ObjArray;

        r0 := @parameter0: java.io.ObjectInputStream;

        virtualinvoke r0.<java.io.ObjectInputStream: void defaultReadObject()>();

        i0 = r1.<org.mozilla.javascript.ObjArray: int size>;

        if i0 <= 5 goto label1;

        $i1 = i0 - 5;

        $r3 = newarray (java.lang.Object)[$i1];

        r1.<org.mozilla.javascript.ObjArray: java.lang.Object[] data> = $r3;

     label1:
        i2 = 0;

     label2:
        if i2 == i0 goto label3;

        $r2 = virtualinvoke r0.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        specialinvoke r1.<org.mozilla.javascript.ObjArray: void setImpl(int,java.lang.Object)>(i2, $r2);

        i2 = i2 + 1;

        goto label2;

     label3:
        return;
    }

    public static void <clinit>()
    {
        <org.mozilla.javascript.ObjArray: int FIELDS_STORE_SIZE> = 5;

        <org.mozilla.javascript.ObjArray: long serialVersionUID> = 4174889037736658296L;

        return;
    }
}
