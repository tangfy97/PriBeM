public abstract class org.apache.batik.util.Platform extends java.lang.Object
{
    public static boolean isOSX;
    public static boolean isJRE13;
    static java.lang.Class class$java$awt$Frame;

    public void <init>()
    {
        org.apache.batik.util.Platform r0;

        r0 := @this: org.apache.batik.util.Platform;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void unmaximize(java.awt.Frame)
    {
        java.lang.Object[] $r8, $r11;
        java.lang.NoSuchMethodException $r14;
        java.lang.Integer $r10, $r18;
        int $i0, $i1, $i3;
        java.lang.reflect.Method $r2, $r6;
        boolean $z0;
        java.lang.IllegalAccessException $r13;
        java.awt.Frame r7;
        java.lang.Class[] $r1, $r4;
        java.lang.reflect.InvocationTargetException $r15;
        java.lang.Class $r0, $r3, $r5, $r16, $r17;
        java.lang.Object $r9;

        r7 := @parameter0: java.awt.Frame;

        $z0 = <org.apache.batik.util.Platform: boolean isJRE13>;

        if $z0 != 0 goto label10;

     label01:
        $r0 = <org.apache.batik.util.Platform: java.lang.Class class$java$awt$Frame>;

        if $r0 != null goto label02;

        $r16 = staticinvoke <org.apache.batik.util.Platform: java.lang.Class class$(java.lang.String)>("java.awt.Frame");

        <org.apache.batik.util.Platform: java.lang.Class class$java$awt$Frame> = $r16;

        goto label03;

     label02:
        $r16 = <org.apache.batik.util.Platform: java.lang.Class class$java$awt$Frame>;

     label03:
        $r1 = (java.lang.Class[]) null;

        $r2 = virtualinvoke $r16.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("getExtendedState", $r1);

        $r3 = <org.apache.batik.util.Platform: java.lang.Class class$java$awt$Frame>;

        if $r3 != null goto label04;

        $r17 = staticinvoke <org.apache.batik.util.Platform: java.lang.Class class$(java.lang.String)>("java.awt.Frame");

        <org.apache.batik.util.Platform: java.lang.Class class$java$awt$Frame> = $r17;

        goto label05;

     label04:
        $r17 = <org.apache.batik.util.Platform: java.lang.Class class$java$awt$Frame>;

     label05:
        $r4 = newarray (java.lang.Class)[1];

        $r5 = <java.lang.Integer: java.lang.Class TYPE>;

        $r4[0] = $r5;

        $r6 = virtualinvoke $r17.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("setExtendedState", $r4);

        $r8 = (java.lang.Object[]) null;

        $r9 = virtualinvoke $r2.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r7, $r8);

        $r10 = (java.lang.Integer) $r9;

        $i0 = virtualinvoke $r10.<java.lang.Integer: int intValue()>();

        $r11 = newarray (java.lang.Object)[1];

        $r18 = new java.lang.Integer;

        $i3 = (int) -7;

        $i1 = $i0 & $i3;

        specialinvoke $r18.<java.lang.Integer: void <init>(int)>($i1);

        $r11[0] = $r18;

        virtualinvoke $r6.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r7, $r11);

     label06:
        goto label10;

     label07:
        $r15 := @caughtexception;

        goto label10;

     label08:
        $r14 := @caughtexception;

        goto label10;

     label09:
        $r13 := @caughtexception;

     label10:
        return;

        catch java.lang.reflect.InvocationTargetException from label01 to label06 with label07;
        catch java.lang.NoSuchMethodException from label01 to label06 with label08;
        catch java.lang.IllegalAccessException from label01 to label06 with label09;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0, $r4;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

        return $r1;

     label2:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        $r4 = virtualinvoke $r2.<java.lang.Throwable: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r4);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label2;
    }

    static void <clinit>()
    {
        java.lang.String $r0, $r1;
        boolean $z0, $z1;

        $r0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("os.name");

        $z0 = virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>("Mac OS X");

        <org.apache.batik.util.Platform: boolean isOSX> = $z0;

        $r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.version");

        $z1 = virtualinvoke $r1.<java.lang.String: boolean startsWith(java.lang.String)>("1.3");

        <org.apache.batik.util.Platform: boolean isJRE13> = $z1;

        return;
    }
}
