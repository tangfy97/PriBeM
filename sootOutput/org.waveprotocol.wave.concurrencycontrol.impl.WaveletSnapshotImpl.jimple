public class org.waveprotocol.wave.concurrencycontrol.impl.WaveletSnapshotImpl extends java.lang.Object implements org.waveprotocol.wave.concurrencycontrol.WaveletSnapshot
{
    private java.lang.String waveletId;
    private final java.util.List participant;
    private final java.util.List document;
    private org.waveprotocol.wave.federation.impl.ProtocolHashedVersionImpl version;
    private java.lang.Long lastModifiedTime;
    private java.lang.String creator;
    private java.lang.Long creationTime;

    public void <init>()
    {
        org.waveprotocol.wave.concurrencycontrol.impl.WaveletSnapshotImpl r0;
        java.util.ArrayList $r1, $r2;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.impl.WaveletSnapshotImpl;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<org.waveprotocol.wave.concurrencycontrol.impl.WaveletSnapshotImpl: java.util.List participant> = $r1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<org.waveprotocol.wave.concurrencycontrol.impl.WaveletSnapshotImpl: java.util.List document> = $r2;

        return;
    }

    public void <init>(org.waveprotocol.wave.concurrencycontrol.WaveletSnapshot)
    {
        org.waveprotocol.wave.concurrencycontrol.impl.WaveletSnapshotImpl r0;
        org.waveprotocol.wave.concurrencycontrol.WaveletSnapshot r3;
        java.util.ArrayList $r1, $r2;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.impl.WaveletSnapshotImpl;

        r3 := @parameter0: org.waveprotocol.wave.concurrencycontrol.WaveletSnapshot;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<org.waveprotocol.wave.concurrencycontrol.impl.WaveletSnapshotImpl: java.util.List participant> = $r1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<org.waveprotocol.wave.concurrencycontrol.impl.WaveletSnapshotImpl: java.util.List document> = $r2;

        virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.impl.WaveletSnapshotImpl: void copyFrom(org.waveprotocol.wave.concurrencycontrol.WaveletSnapshot)>(r3);

        return;
    }

    public void copyFrom(org.waveprotocol.wave.concurrencycontrol.WaveletSnapshot)
    {
        org.waveprotocol.wave.concurrencycontrol.impl.WaveletSnapshotImpl r0;
        org.waveprotocol.wave.concurrencycontrol.WaveletSnapshot r1;
        long $l0, $l1;
        org.waveprotocol.wave.concurrencycontrol.impl.DocumentSnapshotImpl $r10;
        java.lang.String $r2, $r8, r12;
        org.waveprotocol.wave.federation.ProtocolHashedVersion $r7;
        boolean $z0, $z1;
        java.util.Iterator $r4, $r6;
        java.util.List $r3, $r5;
        org.waveprotocol.wave.concurrencycontrol.DocumentSnapshot r13;
        java.lang.Object $r9, $r11;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.impl.WaveletSnapshotImpl;

        r1 := @parameter0: org.waveprotocol.wave.concurrencycontrol.WaveletSnapshot;

        $r2 = interfaceinvoke r1.<org.waveprotocol.wave.concurrencycontrol.WaveletSnapshot: java.lang.String getWaveletId()>();

        virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.impl.WaveletSnapshotImpl: void setWaveletId(java.lang.String)>($r2);

        virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.impl.WaveletSnapshotImpl: void clearParticipant()>();

        $r3 = interfaceinvoke r1.<org.waveprotocol.wave.concurrencycontrol.WaveletSnapshot: java.util.List getParticipant()>();

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r11 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r12 = (java.lang.String) $r11;

        virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.impl.WaveletSnapshotImpl: void addParticipant(java.lang.String)>(r12);

        goto label1;

     label2:
        virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.impl.WaveletSnapshotImpl: void clearDocument()>();

        $r5 = interfaceinvoke r1.<org.waveprotocol.wave.concurrencycontrol.WaveletSnapshot: java.util.List getDocument()>();

        $r6 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r9 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r13 = (org.waveprotocol.wave.concurrencycontrol.DocumentSnapshot) $r9;

        $r10 = new org.waveprotocol.wave.concurrencycontrol.impl.DocumentSnapshotImpl;

        specialinvoke $r10.<org.waveprotocol.wave.concurrencycontrol.impl.DocumentSnapshotImpl: void <init>(org.waveprotocol.wave.concurrencycontrol.DocumentSnapshot)>(r13);

        virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.impl.WaveletSnapshotImpl: void addDocument(org.waveprotocol.wave.concurrencycontrol.DocumentSnapshot)>($r10);

        goto label3;

     label4:
        $r7 = interfaceinvoke r1.<org.waveprotocol.wave.concurrencycontrol.WaveletSnapshot: org.waveprotocol.wave.federation.ProtocolHashedVersion getVersion()>();

        virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.impl.WaveletSnapshotImpl: void setVersion(org.waveprotocol.wave.federation.ProtocolHashedVersion)>($r7);

        $l0 = interfaceinvoke r1.<org.waveprotocol.wave.concurrencycontrol.WaveletSnapshot: long getLastModifiedTime()>();

        virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.impl.WaveletSnapshotImpl: void setLastModifiedTime(long)>($l0);

        $r8 = interfaceinvoke r1.<org.waveprotocol.wave.concurrencycontrol.WaveletSnapshot: java.lang.String getCreator()>();

        virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.impl.WaveletSnapshotImpl: void setCreator(java.lang.String)>($r8);

        $l1 = interfaceinvoke r1.<org.waveprotocol.wave.concurrencycontrol.WaveletSnapshot: long getCreationTime()>();

        virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.impl.WaveletSnapshotImpl: void setCreationTime(long)>($l1);

        return;
    }

    public java.lang.String getWaveletId()
    {
        java.lang.String $r1;
        org.waveprotocol.wave.concurrencycontrol.impl.WaveletSnapshotImpl r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.impl.WaveletSnapshotImpl;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.impl.WaveletSnapshotImpl: java.lang.String waveletId>;

        return $r1;
    }

    public void setWaveletId(java.lang.String)
    {
        java.lang.String r1;
        org.waveprotocol.wave.concurrencycontrol.impl.WaveletSnapshotImpl r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.impl.WaveletSnapshotImpl;

        r1 := @parameter0: java.lang.String;

        r0.<org.waveprotocol.wave.concurrencycontrol.impl.WaveletSnapshotImpl: java.lang.String waveletId> = r1;

        return;
    }

    public java.util.List getParticipant()
    {
        java.util.List $r1, $r2;
        org.waveprotocol.wave.concurrencycontrol.impl.WaveletSnapshotImpl r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.impl.WaveletSnapshotImpl;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.impl.WaveletSnapshotImpl: java.util.List participant>;

        $r2 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r1);

        return $r2;
    }

    public void addAllParticipant(java.util.List)
    {
        java.util.List r1, $r2;
        org.waveprotocol.wave.concurrencycontrol.impl.WaveletSnapshotImpl r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.impl.WaveletSnapshotImpl;

        r1 := @parameter0: java.util.List;

        $r2 = r0.<org.waveprotocol.wave.concurrencycontrol.impl.WaveletSnapshotImpl: java.util.List participant>;

        interfaceinvoke $r2.<java.util.List: boolean addAll(java.util.Collection)>(r1);

        return;
    }

    public java.lang.String getParticipant(int)
    {
        java.util.List $r1;
        org.waveprotocol.wave.concurrencycontrol.impl.WaveletSnapshotImpl r0;
        int i0;
        java.lang.Object $r2;
        java.lang.String $r3;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.impl.WaveletSnapshotImpl;

        i0 := @parameter0: int;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.impl.WaveletSnapshotImpl: java.util.List participant>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i0);

        $r3 = (java.lang.String) $r2;

        return $r3;
    }

    public void setParticipant(int, java.lang.String)
    {
        java.util.List $r2;
        org.waveprotocol.wave.concurrencycontrol.impl.WaveletSnapshotImpl r0;
        int i0;
        java.lang.String r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.impl.WaveletSnapshotImpl;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        $r2 = r0.<org.waveprotocol.wave.concurrencycontrol.impl.WaveletSnapshotImpl: java.util.List participant>;

        interfaceinvoke $r2.<java.util.List: java.lang.Object set(int,java.lang.Object)>(i0, r1);

        return;
    }

    public int getParticipantSize()
    {
        int $i0;
        java.util.List $r1;
        org.waveprotocol.wave.concurrencycontrol.impl.WaveletSnapshotImpl r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.impl.WaveletSnapshotImpl;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.impl.WaveletSnapshotImpl: java.util.List participant>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        return $i0;
    }

    public void addParticipant(java.lang.String)
    {
        java.util.List $r2;
        java.lang.String r1;
        org.waveprotocol.wave.concurrencycontrol.impl.WaveletSnapshotImpl r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.impl.WaveletSnapshotImpl;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.waveprotocol.wave.concurrencycontrol.impl.WaveletSnapshotImpl: java.util.List participant>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        return;
    }

    public void clearParticipant()
    {
        java.util.List $r1;
        org.waveprotocol.wave.concurrencycontrol.impl.WaveletSnapshotImpl r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.impl.WaveletSnapshotImpl;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.impl.WaveletSnapshotImpl: java.util.List participant>;

        interfaceinvoke $r1.<java.util.List: void clear()>();

        return;
    }

    public java.util.List getDocument()
    {
        java.util.List $r1, $r2;
        org.waveprotocol.wave.concurrencycontrol.impl.WaveletSnapshotImpl r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.impl.WaveletSnapshotImpl;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.impl.WaveletSnapshotImpl: java.util.List document>;

        $r2 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r1);

        return $r2;
    }

    public void addAllDocument(java.util.List)
    {
        java.util.List r0;
        org.waveprotocol.wave.concurrencycontrol.DocumentSnapshot r3;
        java.util.Iterator $r1;
        org.waveprotocol.wave.concurrencycontrol.impl.WaveletSnapshotImpl r4;
        java.lang.Object $r2;
        boolean $z0;

        r4 := @this: org.waveprotocol.wave.concurrencycontrol.impl.WaveletSnapshotImpl;

        r0 := @parameter0: java.util.List;

        $r1 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (org.waveprotocol.wave.concurrencycontrol.DocumentSnapshot) $r2;

        virtualinvoke r4.<org.waveprotocol.wave.concurrencycontrol.impl.WaveletSnapshotImpl: void addDocument(org.waveprotocol.wave.concurrencycontrol.DocumentSnapshot)>(r3);

        goto label1;

     label2:
        return;
    }

    public org.waveprotocol.wave.concurrencycontrol.impl.DocumentSnapshotImpl getDocument(int)
    {
        java.util.List $r2;
        org.waveprotocol.wave.concurrencycontrol.DocumentSnapshot $r4;
        org.waveprotocol.wave.concurrencycontrol.impl.DocumentSnapshotImpl $r0;
        org.waveprotocol.wave.concurrencycontrol.impl.WaveletSnapshotImpl r1;
        int i0;
        java.lang.Object $r3;

        r1 := @this: org.waveprotocol.wave.concurrencycontrol.impl.WaveletSnapshotImpl;

        i0 := @parameter0: int;

        $r0 = new org.waveprotocol.wave.concurrencycontrol.impl.DocumentSnapshotImpl;

        $r2 = r1.<org.waveprotocol.wave.concurrencycontrol.impl.WaveletSnapshotImpl: java.util.List document>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(i0);

        $r4 = (org.waveprotocol.wave.concurrencycontrol.DocumentSnapshot) $r3;

        specialinvoke $r0.<org.waveprotocol.wave.concurrencycontrol.impl.DocumentSnapshotImpl: void <init>(org.waveprotocol.wave.concurrencycontrol.DocumentSnapshot)>($r4);

        return $r0;
    }

    public void setDocument(int, org.waveprotocol.wave.concurrencycontrol.DocumentSnapshot)
    {
        java.util.List $r3;
        org.waveprotocol.wave.concurrencycontrol.DocumentSnapshot r2;
        org.waveprotocol.wave.concurrencycontrol.impl.WaveletSnapshotImpl r0;
        org.waveprotocol.wave.concurrencycontrol.impl.DocumentSnapshotImpl $r1;
        int i0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.impl.WaveletSnapshotImpl;

        i0 := @parameter0: int;

        r2 := @parameter1: org.waveprotocol.wave.concurrencycontrol.DocumentSnapshot;

        $r3 = r0.<org.waveprotocol.wave.concurrencycontrol.impl.WaveletSnapshotImpl: java.util.List document>;

        $r1 = new org.waveprotocol.wave.concurrencycontrol.impl.DocumentSnapshotImpl;

        specialinvoke $r1.<org.waveprotocol.wave.concurrencycontrol.impl.DocumentSnapshotImpl: void <init>(org.waveprotocol.wave.concurrencycontrol.DocumentSnapshot)>(r2);

        interfaceinvoke $r3.<java.util.List: java.lang.Object set(int,java.lang.Object)>(i0, $r1);

        return;
    }

    public int getDocumentSize()
    {
        int $i0;
        java.util.List $r1;
        org.waveprotocol.wave.concurrencycontrol.impl.WaveletSnapshotImpl r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.impl.WaveletSnapshotImpl;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.impl.WaveletSnapshotImpl: java.util.List document>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        return $i0;
    }

    public void addDocument(org.waveprotocol.wave.concurrencycontrol.DocumentSnapshot)
    {
        java.util.List $r3;
        org.waveprotocol.wave.concurrencycontrol.DocumentSnapshot r2;
        org.waveprotocol.wave.concurrencycontrol.impl.WaveletSnapshotImpl r0;
        org.waveprotocol.wave.concurrencycontrol.impl.DocumentSnapshotImpl $r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.impl.WaveletSnapshotImpl;

        r2 := @parameter0: org.waveprotocol.wave.concurrencycontrol.DocumentSnapshot;

        $r3 = r0.<org.waveprotocol.wave.concurrencycontrol.impl.WaveletSnapshotImpl: java.util.List document>;

        $r1 = new org.waveprotocol.wave.concurrencycontrol.impl.DocumentSnapshotImpl;

        specialinvoke $r1.<org.waveprotocol.wave.concurrencycontrol.impl.DocumentSnapshotImpl: void <init>(org.waveprotocol.wave.concurrencycontrol.DocumentSnapshot)>(r2);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r1);

        return;
    }

    public void clearDocument()
    {
        java.util.List $r1;
        org.waveprotocol.wave.concurrencycontrol.impl.WaveletSnapshotImpl r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.impl.WaveletSnapshotImpl;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.impl.WaveletSnapshotImpl: java.util.List document>;

        interfaceinvoke $r1.<java.util.List: void clear()>();

        return;
    }

    public org.waveprotocol.wave.federation.impl.ProtocolHashedVersionImpl getVersion()
    {
        org.waveprotocol.wave.federation.impl.ProtocolHashedVersionImpl $r0, $r2;
        org.waveprotocol.wave.concurrencycontrol.impl.WaveletSnapshotImpl r1;

        r1 := @this: org.waveprotocol.wave.concurrencycontrol.impl.WaveletSnapshotImpl;

        $r0 = new org.waveprotocol.wave.federation.impl.ProtocolHashedVersionImpl;

        $r2 = r1.<org.waveprotocol.wave.concurrencycontrol.impl.WaveletSnapshotImpl: org.waveprotocol.wave.federation.impl.ProtocolHashedVersionImpl version>;

        specialinvoke $r0.<org.waveprotocol.wave.federation.impl.ProtocolHashedVersionImpl: void <init>(org.waveprotocol.wave.federation.ProtocolHashedVersion)>($r2);

        return $r0;
    }

    public void setVersion(org.waveprotocol.wave.federation.ProtocolHashedVersion)
    {
        org.waveprotocol.wave.federation.impl.ProtocolHashedVersionImpl $r1;
        org.waveprotocol.wave.federation.ProtocolHashedVersion r2;
        org.waveprotocol.wave.concurrencycontrol.impl.WaveletSnapshotImpl r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.impl.WaveletSnapshotImpl;

        r2 := @parameter0: org.waveprotocol.wave.federation.ProtocolHashedVersion;

        $r1 = new org.waveprotocol.wave.federation.impl.ProtocolHashedVersionImpl;

        specialinvoke $r1.<org.waveprotocol.wave.federation.impl.ProtocolHashedVersionImpl: void <init>(org.waveprotocol.wave.federation.ProtocolHashedVersion)>(r2);

        r0.<org.waveprotocol.wave.concurrencycontrol.impl.WaveletSnapshotImpl: org.waveprotocol.wave.federation.impl.ProtocolHashedVersionImpl version> = $r1;

        return;
    }

    public long getLastModifiedTime()
    {
        long $l0;
        java.lang.Long $r1;
        org.waveprotocol.wave.concurrencycontrol.impl.WaveletSnapshotImpl r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.impl.WaveletSnapshotImpl;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.impl.WaveletSnapshotImpl: java.lang.Long lastModifiedTime>;

        $l0 = virtualinvoke $r1.<java.lang.Long: long longValue()>();

        return $l0;
    }

    public void setLastModifiedTime(long)
    {
        long l0;
        java.lang.Long $r1;
        org.waveprotocol.wave.concurrencycontrol.impl.WaveletSnapshotImpl r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.impl.WaveletSnapshotImpl;

        l0 := @parameter0: long;

        $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        r0.<org.waveprotocol.wave.concurrencycontrol.impl.WaveletSnapshotImpl: java.lang.Long lastModifiedTime> = $r1;

        return;
    }

    public java.lang.String getCreator()
    {
        java.lang.String $r1;
        org.waveprotocol.wave.concurrencycontrol.impl.WaveletSnapshotImpl r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.impl.WaveletSnapshotImpl;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.impl.WaveletSnapshotImpl: java.lang.String creator>;

        return $r1;
    }

    public void setCreator(java.lang.String)
    {
        java.lang.String r1;
        org.waveprotocol.wave.concurrencycontrol.impl.WaveletSnapshotImpl r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.impl.WaveletSnapshotImpl;

        r1 := @parameter0: java.lang.String;

        r0.<org.waveprotocol.wave.concurrencycontrol.impl.WaveletSnapshotImpl: java.lang.String creator> = r1;

        return;
    }

    public long getCreationTime()
    {
        long $l0;
        java.lang.Long $r1;
        org.waveprotocol.wave.concurrencycontrol.impl.WaveletSnapshotImpl r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.impl.WaveletSnapshotImpl;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.impl.WaveletSnapshotImpl: java.lang.Long creationTime>;

        $l0 = virtualinvoke $r1.<java.lang.Long: long longValue()>();

        return $l0;
    }

    public void setCreationTime(long)
    {
        long l0;
        java.lang.Long $r1;
        org.waveprotocol.wave.concurrencycontrol.impl.WaveletSnapshotImpl r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.impl.WaveletSnapshotImpl;

        l0 := @parameter0: long;

        $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        r0.<org.waveprotocol.wave.concurrencycontrol.impl.WaveletSnapshotImpl: java.lang.Long creationTime> = $r1;

        return;
    }

    protected void reset()
    {
        java.util.List $r1, $r2;
        org.waveprotocol.wave.concurrencycontrol.impl.WaveletSnapshotImpl r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.impl.WaveletSnapshotImpl;

        r0.<org.waveprotocol.wave.concurrencycontrol.impl.WaveletSnapshotImpl: java.lang.String waveletId> = null;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.impl.WaveletSnapshotImpl: java.util.List participant>;

        interfaceinvoke $r1.<java.util.List: void clear()>();

        $r2 = r0.<org.waveprotocol.wave.concurrencycontrol.impl.WaveletSnapshotImpl: java.util.List document>;

        interfaceinvoke $r2.<java.util.List: void clear()>();

        r0.<org.waveprotocol.wave.concurrencycontrol.impl.WaveletSnapshotImpl: org.waveprotocol.wave.federation.impl.ProtocolHashedVersionImpl version> = null;

        r0.<org.waveprotocol.wave.concurrencycontrol.impl.WaveletSnapshotImpl: java.lang.Long lastModifiedTime> = null;

        r0.<org.waveprotocol.wave.concurrencycontrol.impl.WaveletSnapshotImpl: java.lang.String creator> = null;

        r0.<org.waveprotocol.wave.concurrencycontrol.impl.WaveletSnapshotImpl: java.lang.Long creationTime> = null;

        return;
    }

    public boolean equals(java.lang.Object)
    {
        org.waveprotocol.wave.concurrencycontrol.impl.WaveletSnapshotImpl r1;
        java.lang.Object r0;
        boolean $z0, $z1, $z2;

        r1 := @this: org.waveprotocol.wave.concurrencycontrol.impl.WaveletSnapshotImpl;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof org.waveprotocol.wave.concurrencycontrol.impl.WaveletSnapshotImpl;

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke r1.<org.waveprotocol.wave.concurrencycontrol.impl.WaveletSnapshotImpl: boolean isEqualTo(java.lang.Object)>(r0);

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    public boolean isEqualTo(java.lang.Object)
    {
        org.waveprotocol.wave.concurrencycontrol.impl.WaveletSnapshotImpl r1;
        org.waveprotocol.wave.concurrencycontrol.WaveletSnapshot $r2;
        java.lang.Object r0;
        boolean $z0, $z1;

        r1 := @this: org.waveprotocol.wave.concurrencycontrol.impl.WaveletSnapshotImpl;

        r0 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = r0 instanceof org.waveprotocol.wave.concurrencycontrol.WaveletSnapshot;

        if $z0 == 0 goto label2;

        $r2 = (org.waveprotocol.wave.concurrencycontrol.WaveletSnapshot) r0;

        $z1 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.WaveletSnapshotUtil: boolean isEqual(org.waveprotocol.wave.concurrencycontrol.WaveletSnapshot,org.waveprotocol.wave.concurrencycontrol.WaveletSnapshot)>(r1, $r2);

        return $z1;

     label2:
        return 0;
    }

    public int hashCode()
    {
        int $i0;
        org.waveprotocol.wave.concurrencycontrol.impl.WaveletSnapshotImpl r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.impl.WaveletSnapshotImpl;

        $i0 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.WaveletSnapshotUtil: int getHashCode(org.waveprotocol.wave.concurrencycontrol.WaveletSnapshot)>(r0);

        return $i0;
    }

    public volatile org.waveprotocol.wave.federation.ProtocolHashedVersion getVersion()
    {
        org.waveprotocol.wave.federation.impl.ProtocolHashedVersionImpl $r1;
        org.waveprotocol.wave.concurrencycontrol.impl.WaveletSnapshotImpl r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.impl.WaveletSnapshotImpl;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.impl.WaveletSnapshotImpl: org.waveprotocol.wave.federation.impl.ProtocolHashedVersionImpl getVersion()>();

        return $r1;
    }

    public volatile org.waveprotocol.wave.concurrencycontrol.DocumentSnapshot getDocument(int)
    {
        int i0;
        org.waveprotocol.wave.concurrencycontrol.impl.WaveletSnapshotImpl r0;
        org.waveprotocol.wave.concurrencycontrol.impl.DocumentSnapshotImpl $r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.impl.WaveletSnapshotImpl;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.impl.WaveletSnapshotImpl: org.waveprotocol.wave.concurrencycontrol.impl.DocumentSnapshotImpl getDocument(int)>(i0);

        return $r1;
    }
}
