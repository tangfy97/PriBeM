public final class kodkod.ast.NaryExpression extends kodkod.ast.Expression implements java.lang.Iterable
{
    private final kodkod.ast.operator.ExprOperator op;
    private final int arity;
    private final kodkod.ast.Expression[] children;
    static final boolean $assertionsDisabled;
    private static int[] $SWITCH_TABLE$kodkod$ast$operator$ExprOperator;

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lkodkod/ast/NaryExpression;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <kodkod.ast.NaryExpression: boolean $assertionsDisabled> = $z1;

        return;
    }

    void <init>(kodkod.ast.operator.ExprOperator, kodkod.ast.Expression[])
    {
        int[] $r3;
        boolean $z0, $z1;
        kodkod.ast.Expression r4, $r5, $r6, $r9, $r12;
        kodkod.ast.operator.ExprOperator r1;
        kodkod.ast.NaryExpression r0;
        kodkod.ast.Expression[] r2;
        java.lang.StringBuilder $r8, $r10, $r11, $r13, $r16, $r17, $r20, $r21;
        java.lang.AssertionError $r23;
        int $i0, $i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, i9, i10, i11;
        java.lang.String $r14, $r18, $r22;
        java.lang.IllegalArgumentException $r7, $r15, $r19;

        r0 := @this: kodkod.ast.NaryExpression;

        r1 := @parameter0: kodkod.ast.operator.ExprOperator;

        r2 := @parameter1: kodkod.ast.Expression[];

        specialinvoke r0.<kodkod.ast.Expression: void <init>()>();

        $z0 = <kodkod.ast.NaryExpression: boolean $assertionsDisabled>;

        if $z0 != 0 goto label01;

        $i8 = lengthof r2;

        if $i8 > 2 goto label01;

        $r23 = new java.lang.AssertionError;

        specialinvoke $r23.<java.lang.AssertionError: void <init>()>();

        throw $r23;

     label01:
        $z1 = virtualinvoke r1.<kodkod.ast.operator.ExprOperator: boolean nary()>();

        if $z1 != 0 goto label02;

        $r19 = new java.lang.IllegalArgumentException;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>(java.lang.String)>("Cannot construct an nary expression using the non-nary operator ");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r19.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r22);

        throw $r19;

     label02:
        r0.<kodkod.ast.NaryExpression: kodkod.ast.operator.ExprOperator op> = r1;

        r0.<kodkod.ast.NaryExpression: kodkod.ast.Expression[] children> = r2;

        $r3 = staticinvoke <kodkod.ast.NaryExpression: int[] $SWITCH_TABLE$kodkod$ast$operator$ExprOperator()>();

        $i0 = virtualinvoke r1.<kodkod.ast.operator.ExprOperator: int ordinal()>();

        $i1 = $r3[$i0];

        tableswitch($i1)
        {
            case 0: goto label03;
            case 1: goto label03;
            case 2: goto label03;
            case 3: goto label07;
            default: goto label10;
        };

     label03:
        $r5 = r2[0];

        $i4 = virtualinvoke $r5.<kodkod.ast.Expression: int arity()>();

        r0.<kodkod.ast.NaryExpression: int arity> = $i4;

        i9 = 1;

        goto label06;

     label04:
        $r6 = r2[i9];

        $i6 = virtualinvoke $r6.<kodkod.ast.Expression: int arity()>();

        $i7 = r0.<kodkod.ast.NaryExpression: int arity>;

        if $i6 == $i7 goto label05;

        $r7 = new java.lang.IllegalArgumentException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>(java.lang.String)>("Incompatible arities: ");

        $r9 = r2[0];

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" and ");

        $r12 = r2[i9];

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r14);

        throw $r7;

     label05:
        i9 = i9 + 1;

     label06:
        $i5 = lengthof r2;

        if i9 < $i5 goto label04;

        goto label11;

     label07:
        i10 = 0;

        i11 = 0;

        i2 = lengthof r2;

        goto label09;

     label08:
        r4 = r2[i11];

        $i3 = virtualinvoke r4.<kodkod.ast.Expression: int arity()>();

        i10 = i10 + $i3;

        i11 = i11 + 1;

     label09:
        if i11 < i2 goto label08;

        r0.<kodkod.ast.NaryExpression: int arity> = i10;

        goto label11;

     label10:
        $r15 = new java.lang.IllegalArgumentException;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>(java.lang.String)>("Unknown associative operator: ");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r15.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r18);

        throw $r15;

     label11:
        return;
    }

    public final int arity()
    {
        int $i0;
        kodkod.ast.NaryExpression r0;

        r0 := @this: kodkod.ast.NaryExpression;

        $i0 = r0.<kodkod.ast.NaryExpression: int arity>;

        return $i0;
    }

    public kodkod.ast.operator.ExprOperator op()
    {
        kodkod.ast.operator.ExprOperator $r1;
        kodkod.ast.NaryExpression r0;

        r0 := @this: kodkod.ast.NaryExpression;

        $r1 = r0.<kodkod.ast.NaryExpression: kodkod.ast.operator.ExprOperator op>;

        return $r1;
    }

    public int size()
    {
        int $i0;
        kodkod.ast.Expression[] $r1;
        kodkod.ast.NaryExpression r0;

        r0 := @this: kodkod.ast.NaryExpression;

        $r1 = r0.<kodkod.ast.NaryExpression: kodkod.ast.Expression[] children>;

        $i0 = lengthof $r1;

        return $i0;
    }

    public kodkod.ast.Expression child(int)
    {
        kodkod.ast.NaryExpression r0;
        int i0;
        kodkod.ast.Expression $r2;
        kodkod.ast.Expression[] $r1;

        r0 := @this: kodkod.ast.NaryExpression;

        i0 := @parameter0: int;

        $r1 = r0.<kodkod.ast.NaryExpression: kodkod.ast.Expression[] children>;

        $r2 = $r1[i0];

        return $r2;
    }

    public java.util.Iterator iterator()
    {
        kodkod.ast.Expression[] $r1;
        kodkod.ast.NaryExpression r0;
        java.util.Iterator $r2;

        r0 := @this: kodkod.ast.NaryExpression;

        $r1 = r0.<kodkod.ast.NaryExpression: kodkod.ast.Expression[] children>;

        $r2 = staticinvoke <kodkod.util.collections.Containers: java.util.Iterator iterate(java.lang.Object[])>($r1);

        return $r2;
    }

    public java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)
    {
        java.lang.Object $r2;
        kodkod.ast.NaryExpression r1;
        kodkod.ast.visitor.ReturnVisitor r0;

        r1 := @this: kodkod.ast.NaryExpression;

        r0 := @parameter0: kodkod.ast.visitor.ReturnVisitor;

        $r2 = interfaceinvoke r0.<kodkod.ast.visitor.ReturnVisitor: java.lang.Object visit(kodkod.ast.NaryExpression)>(r1);

        return $r2;
    }

    public void accept(kodkod.ast.visitor.VoidVisitor)
    {
        kodkod.ast.NaryExpression r1;
        kodkod.ast.visitor.VoidVisitor r0;

        r1 := @this: kodkod.ast.NaryExpression;

        r0 := @parameter0: kodkod.ast.visitor.VoidVisitor;

        interfaceinvoke r0.<kodkod.ast.visitor.VoidVisitor: void visit(kodkod.ast.NaryExpression)>(r1);

        return;
    }

    public java.lang.String toString()
    {
        kodkod.ast.Expression $r2, $r4;
        kodkod.ast.operator.ExprOperator $r3;
        kodkod.ast.NaryExpression r1;
        int $i0, i1;
        java.lang.StringBuilder $r0;
        java.lang.String $r5;

        r1 := @this: kodkod.ast.NaryExpression;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>(java.lang.String)>("(");

        $r2 = virtualinvoke r1.<kodkod.ast.NaryExpression: kodkod.ast.Expression child(int)>(0);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        i1 = 1;

        $i0 = virtualinvoke r1.<kodkod.ast.NaryExpression: int size()>();

        goto label2;

     label1:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r3 = r1.<kodkod.ast.NaryExpression: kodkod.ast.operator.ExprOperator op>;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r4 = virtualinvoke r1.<kodkod.ast.NaryExpression: kodkod.ast.Expression child(int)>(i1);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        i1 = i1 + 1;

     label2:
        if i1 < $i0 goto label1;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r5 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    static int[] $SWITCH_TABLE$kodkod$ast$operator$ExprOperator()
    {
        java.lang.NoSuchFieldError $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20;
        int[] $r0, r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        kodkod.ast.operator.ExprOperator[] $r1;
        kodkod.ast.operator.ExprOperator $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11;

        $r0 = <kodkod.ast.NaryExpression: int[] $SWITCH_TABLE$kodkod$ast$operator$ExprOperator>;

        if $r0 == null goto label01;

        return $r0;

     label01:
        $r1 = staticinvoke <kodkod.ast.operator.ExprOperator: kodkod.ast.operator.ExprOperator[] values()>();

        $i0 = lengthof $r1;

        r2 = newarray (int)[$i0];

     label02:
        $r3 = <kodkod.ast.operator.ExprOperator: kodkod.ast.operator.ExprOperator CLOSURE>;

        $i1 = virtualinvoke $r3.<kodkod.ast.operator.ExprOperator: int ordinal()>();

        r2[$i1] = 7;

     label03:
        goto label05;

     label04:
        $r20 := @caughtexception;

     label05:
        $r4 = <kodkod.ast.operator.ExprOperator: kodkod.ast.operator.ExprOperator DIFFERENCE>;

        $i2 = virtualinvoke $r4.<kodkod.ast.operator.ExprOperator: int ordinal()>();

        r2[$i2] = 4;

     label06:
        goto label08;

     label07:
        $r19 := @caughtexception;

     label08:
        $r5 = <kodkod.ast.operator.ExprOperator: kodkod.ast.operator.ExprOperator INTERSECTION>;

        $i3 = virtualinvoke $r5.<kodkod.ast.operator.ExprOperator: int ordinal()>();

        r2[$i3] = 1;

     label09:
        goto label11;

     label10:
        $r18 := @caughtexception;

     label11:
        $r6 = <kodkod.ast.operator.ExprOperator: kodkod.ast.operator.ExprOperator JOIN>;

        $i4 = virtualinvoke $r6.<kodkod.ast.operator.ExprOperator: int ordinal()>();

        r2[$i4] = 5;

     label12:
        goto label14;

     label13:
        $r17 := @caughtexception;

     label14:
        $r7 = <kodkod.ast.operator.ExprOperator: kodkod.ast.operator.ExprOperator OVERRIDE>;

        $i5 = virtualinvoke $r7.<kodkod.ast.operator.ExprOperator: int ordinal()>();

        r2[$i5] = 2;

     label15:
        goto label17;

     label16:
        $r16 := @caughtexception;

     label17:
        $r8 = <kodkod.ast.operator.ExprOperator: kodkod.ast.operator.ExprOperator PRODUCT>;

        $i6 = virtualinvoke $r8.<kodkod.ast.operator.ExprOperator: int ordinal()>();

        r2[$i6] = 3;

     label18:
        goto label20;

     label19:
        $r15 := @caughtexception;

     label20:
        $r9 = <kodkod.ast.operator.ExprOperator: kodkod.ast.operator.ExprOperator REFLEXIVE_CLOSURE>;

        $i7 = virtualinvoke $r9.<kodkod.ast.operator.ExprOperator: int ordinal()>();

        r2[$i7] = 8;

     label21:
        goto label23;

     label22:
        $r14 := @caughtexception;

     label23:
        $r10 = <kodkod.ast.operator.ExprOperator: kodkod.ast.operator.ExprOperator TRANSPOSE>;

        $i8 = virtualinvoke $r10.<kodkod.ast.operator.ExprOperator: int ordinal()>();

        r2[$i8] = 6;

     label24:
        goto label26;

     label25:
        $r13 := @caughtexception;

     label26:
        $r11 = <kodkod.ast.operator.ExprOperator: kodkod.ast.operator.ExprOperator UNION>;

        $i9 = virtualinvoke $r11.<kodkod.ast.operator.ExprOperator: int ordinal()>();

        r2[$i9] = 0;

     label27:
        goto label29;

     label28:
        $r12 := @caughtexception;

     label29:
        <kodkod.ast.NaryExpression: int[] $SWITCH_TABLE$kodkod$ast$operator$ExprOperator> = r2;

        return r2;

        catch java.lang.NoSuchFieldError from label02 to label03 with label04;
        catch java.lang.NoSuchFieldError from label05 to label06 with label07;
        catch java.lang.NoSuchFieldError from label08 to label09 with label10;
        catch java.lang.NoSuchFieldError from label11 to label12 with label13;
        catch java.lang.NoSuchFieldError from label14 to label15 with label16;
        catch java.lang.NoSuchFieldError from label17 to label18 with label19;
        catch java.lang.NoSuchFieldError from label20 to label21 with label22;
        catch java.lang.NoSuchFieldError from label23 to label24 with label25;
        catch java.lang.NoSuchFieldError from label26 to label27 with label28;
    }
}
