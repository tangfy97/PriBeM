public class org.apache.commons.configuration.tree.DefaultConfigurationNode$SubNodes extends java.lang.Object
{
    private java.util.List nodes;
    private java.util.Map namedNodes;

    protected void <init>()
    {
        org.apache.commons.configuration.tree.DefaultConfigurationNode$SubNodes r0;

        r0 := @this: org.apache.commons.configuration.tree.DefaultConfigurationNode$SubNodes;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void addNode(org.apache.commons.configuration.tree.ConfigurationNode)
    {
        org.apache.commons.configuration.tree.DefaultConfigurationNode$SubNodes r3;
        java.util.HashMap $r13;
        java.util.ArrayList $r12;
        java.util.Map $r6, $r10;
        java.lang.String $r2, $r7, $r11;
        java.util.LinkedList $r9;
        java.lang.IllegalArgumentException $r1;
        org.apache.commons.configuration.tree.ConfigurationNode r0;
        java.util.List $r4, $r5, $r14, r15;
        java.lang.Object $r8;

        r3 := @this: org.apache.commons.configuration.tree.DefaultConfigurationNode$SubNodes;

        r0 := @parameter0: org.apache.commons.configuration.tree.ConfigurationNode;

        if r0 == null goto label1;

        $r2 = interfaceinvoke r0.<org.apache.commons.configuration.tree.ConfigurationNode: java.lang.String getName()>();

        if $r2 != null goto label2;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Node to add must have a defined name!");

        throw $r1;

     label2:
        interfaceinvoke r0.<org.apache.commons.configuration.tree.ConfigurationNode: void setParentNode(org.apache.commons.configuration.tree.ConfigurationNode)>(null);

        $r4 = r3.<org.apache.commons.configuration.tree.DefaultConfigurationNode$SubNodes: java.util.List nodes>;

        if $r4 != null goto label3;

        $r12 = new java.util.ArrayList;

        specialinvoke $r12.<java.util.ArrayList: void <init>()>();

        r3.<org.apache.commons.configuration.tree.DefaultConfigurationNode$SubNodes: java.util.List nodes> = $r12;

        $r13 = new java.util.HashMap;

        specialinvoke $r13.<java.util.HashMap: void <init>()>();

        r3.<org.apache.commons.configuration.tree.DefaultConfigurationNode$SubNodes: java.util.Map namedNodes> = $r13;

     label3:
        $r5 = r3.<org.apache.commons.configuration.tree.DefaultConfigurationNode$SubNodes: java.util.List nodes>;

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>(r0);

        $r6 = r3.<org.apache.commons.configuration.tree.DefaultConfigurationNode$SubNodes: java.util.Map namedNodes>;

        $r7 = interfaceinvoke r0.<org.apache.commons.configuration.tree.ConfigurationNode: java.lang.String getName()>();

        $r8 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>($r7);

        $r14 = (java.util.List) $r8;

        r15 = $r14;

        if $r14 != null goto label4;

        $r9 = new java.util.LinkedList;

        specialinvoke $r9.<java.util.LinkedList: void <init>()>();

        r15 = $r9;

        $r10 = r3.<org.apache.commons.configuration.tree.DefaultConfigurationNode$SubNodes: java.util.Map namedNodes>;

        $r11 = interfaceinvoke r0.<org.apache.commons.configuration.tree.ConfigurationNode: java.lang.String getName()>();

        interfaceinvoke $r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r11, $r9);

     label4:
        interfaceinvoke r15.<java.util.List: boolean add(java.lang.Object)>(r0);

        return;
    }

    public boolean removeNode(org.apache.commons.configuration.tree.ConfigurationNode)
    {
        org.apache.commons.configuration.tree.DefaultConfigurationNode$SubNodes r0;
        org.apache.commons.configuration.tree.ConfigurationNode r2;
        java.util.List $r1, $r3, $r4, r8;
        java.util.Map $r5, $r9;
        java.lang.Object $r7;
        java.lang.String $r6, $r10;
        boolean $z0, $z1;

        r0 := @this: org.apache.commons.configuration.tree.DefaultConfigurationNode$SubNodes;

        r2 := @parameter0: org.apache.commons.configuration.tree.ConfigurationNode;

        $r1 = r0.<org.apache.commons.configuration.tree.DefaultConfigurationNode$SubNodes: java.util.List nodes>;

        if $r1 == null goto label2;

        if r2 == null goto label2;

        $r3 = r0.<org.apache.commons.configuration.tree.DefaultConfigurationNode$SubNodes: java.util.List nodes>;

        $z0 = interfaceinvoke $r3.<java.util.List: boolean contains(java.lang.Object)>(r2);

        if $z0 == 0 goto label2;

        virtualinvoke r0.<org.apache.commons.configuration.tree.DefaultConfigurationNode$SubNodes: void detachNode(org.apache.commons.configuration.tree.ConfigurationNode)>(r2);

        $r4 = r0.<org.apache.commons.configuration.tree.DefaultConfigurationNode$SubNodes: java.util.List nodes>;

        interfaceinvoke $r4.<java.util.List: boolean remove(java.lang.Object)>(r2);

        $r5 = r0.<org.apache.commons.configuration.tree.DefaultConfigurationNode$SubNodes: java.util.Map namedNodes>;

        $r6 = interfaceinvoke r2.<org.apache.commons.configuration.tree.ConfigurationNode: java.lang.String getName()>();

        $r7 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>($r6);

        r8 = (java.util.List) $r7;

        if r8 == null goto label1;

        interfaceinvoke r8.<java.util.List: boolean remove(java.lang.Object)>(r2);

        $z1 = interfaceinvoke r8.<java.util.List: boolean isEmpty()>();

        if $z1 == 0 goto label1;

        $r9 = r0.<org.apache.commons.configuration.tree.DefaultConfigurationNode$SubNodes: java.util.Map namedNodes>;

        $r10 = interfaceinvoke r2.<org.apache.commons.configuration.tree.ConfigurationNode: java.lang.String getName()>();

        interfaceinvoke $r9.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r10);

     label1:
        return 1;

     label2:
        return 0;
    }

    public boolean removeNodes(java.lang.String)
    {
        java.util.List $r1, r5, $r6;
        org.apache.commons.configuration.tree.DefaultConfigurationNode$SubNodes r0;
        java.util.Map $r3;
        java.lang.Object $r4;
        java.lang.String r2;

        r0 := @this: org.apache.commons.configuration.tree.DefaultConfigurationNode$SubNodes;

        r2 := @parameter0: java.lang.String;

        $r1 = r0.<org.apache.commons.configuration.tree.DefaultConfigurationNode$SubNodes: java.util.List nodes>;

        if $r1 == null goto label1;

        if r2 == null goto label1;

        $r3 = r0.<org.apache.commons.configuration.tree.DefaultConfigurationNode$SubNodes: java.util.Map namedNodes>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r2);

        r5 = (java.util.List) $r4;

        if r5 == null goto label1;

        virtualinvoke r0.<org.apache.commons.configuration.tree.DefaultConfigurationNode$SubNodes: void detachNodes(java.util.Collection)>(r5);

        $r6 = r0.<org.apache.commons.configuration.tree.DefaultConfigurationNode$SubNodes: java.util.List nodes>;

        interfaceinvoke $r6.<java.util.List: boolean removeAll(java.util.Collection)>(r5);

        return 1;

     label1:
        return 0;
    }

    public void clear()
    {
        java.util.List $r1, $r2;
        org.apache.commons.configuration.tree.DefaultConfigurationNode$SubNodes r0;

        r0 := @this: org.apache.commons.configuration.tree.DefaultConfigurationNode$SubNodes;

        $r1 = r0.<org.apache.commons.configuration.tree.DefaultConfigurationNode$SubNodes: java.util.List nodes>;

        if $r1 == null goto label1;

        $r2 = r0.<org.apache.commons.configuration.tree.DefaultConfigurationNode$SubNodes: java.util.List nodes>;

        virtualinvoke r0.<org.apache.commons.configuration.tree.DefaultConfigurationNode$SubNodes: void detachNodes(java.util.Collection)>($r2);

        r0.<org.apache.commons.configuration.tree.DefaultConfigurationNode$SubNodes: java.util.List nodes> = null;

        r0.<org.apache.commons.configuration.tree.DefaultConfigurationNode$SubNodes: java.util.Map namedNodes> = null;

     label1:
        return;
    }

    public org.apache.commons.configuration.tree.ConfigurationNode getNode(int)
    {
        java.lang.IndexOutOfBoundsException $r5;
        java.util.List $r1, $r2;
        org.apache.commons.configuration.tree.DefaultConfigurationNode$SubNodes r0;
        int i0;
        java.lang.Object $r3;
        org.apache.commons.configuration.tree.ConfigurationNode $r4;

        r0 := @this: org.apache.commons.configuration.tree.DefaultConfigurationNode$SubNodes;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.commons.configuration.tree.DefaultConfigurationNode$SubNodes: java.util.List nodes>;

        if $r1 != null goto label1;

        $r5 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r5.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>("No sub nodes available!");

        throw $r5;

     label1:
        $r2 = r0.<org.apache.commons.configuration.tree.DefaultConfigurationNode$SubNodes: java.util.List nodes>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(i0);

        $r4 = (org.apache.commons.configuration.tree.ConfigurationNode) $r3;

        return $r4;
    }

    public java.util.List getSubNodes()
    {
        java.util.List $r1, $r2, $r3;
        org.apache.commons.configuration.tree.DefaultConfigurationNode$SubNodes r0;

        r0 := @this: org.apache.commons.configuration.tree.DefaultConfigurationNode$SubNodes;

        $r1 = r0.<org.apache.commons.configuration.tree.DefaultConfigurationNode$SubNodes: java.util.List nodes>;

        if $r1 != null goto label1;

        $r3 = <java.util.Collections: java.util.List EMPTY_LIST>;

        goto label2;

     label1:
        $r2 = r0.<org.apache.commons.configuration.tree.DefaultConfigurationNode$SubNodes: java.util.List nodes>;

        $r3 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r2);

     label2:
        return $r3;
    }

    public java.util.List getSubNodes(java.lang.String)
    {
        org.apache.commons.configuration.tree.DefaultConfigurationNode$SubNodes r1;
        java.util.List $r2, $r5, r6, $r7;
        java.util.Map $r3;
        java.lang.Object $r4;
        java.lang.String r0;

        r1 := @this: org.apache.commons.configuration.tree.DefaultConfigurationNode$SubNodes;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        $r5 = virtualinvoke r1.<org.apache.commons.configuration.tree.DefaultConfigurationNode$SubNodes: java.util.List getSubNodes()>();

        return $r5;

     label1:
        $r2 = r1.<org.apache.commons.configuration.tree.DefaultConfigurationNode$SubNodes: java.util.List nodes>;

        if $r2 != null goto label2;

        r6 = null;

        goto label3;

     label2:
        $r3 = r1.<org.apache.commons.configuration.tree.DefaultConfigurationNode$SubNodes: java.util.Map namedNodes>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0);

        r6 = (java.util.List) $r4;

     label3:
        if r6 != null goto label4;

        $r7 = <java.util.Collections: java.util.List EMPTY_LIST>;

        goto label5;

     label4:
        $r7 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>(r6);

     label5:
        return $r7;
    }

    public void visit(org.apache.commons.configuration.tree.ConfigurationNodeVisitor)
    {
        java.util.Iterator $r3;
        org.apache.commons.configuration.tree.DefaultConfigurationNode$SubNodes r0;
        org.apache.commons.configuration.tree.ConfigurationNode $r6;
        java.util.List $r1, $r2;
        org.apache.commons.configuration.tree.ConfigurationNodeVisitor r4;
        java.lang.Object $r5;
        boolean $z0, $z1;

        r0 := @this: org.apache.commons.configuration.tree.DefaultConfigurationNode$SubNodes;

        r4 := @parameter0: org.apache.commons.configuration.tree.ConfigurationNodeVisitor;

        $r1 = r0.<org.apache.commons.configuration.tree.DefaultConfigurationNode$SubNodes: java.util.List nodes>;

        if $r1 == null goto label2;

        $r2 = r0.<org.apache.commons.configuration.tree.DefaultConfigurationNode$SubNodes: java.util.List nodes>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $z1 = interfaceinvoke r4.<org.apache.commons.configuration.tree.ConfigurationNodeVisitor: boolean terminate()>();

        if $z1 != 0 goto label2;

        $r5 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (org.apache.commons.configuration.tree.ConfigurationNode) $r5;

        interfaceinvoke $r6.<org.apache.commons.configuration.tree.ConfigurationNode: void visit(org.apache.commons.configuration.tree.ConfigurationNodeVisitor)>(r4);

        goto label1;

     label2:
        return;
    }

    protected void detachNode(org.apache.commons.configuration.tree.ConfigurationNode)
    {
        org.apache.commons.configuration.tree.DefaultConfigurationNode $r1;
        org.apache.commons.configuration.tree.DefaultConfigurationNode$SubNodes r2;
        org.apache.commons.configuration.tree.ConfigurationNode r0;
        boolean $z0;

        r2 := @this: org.apache.commons.configuration.tree.DefaultConfigurationNode$SubNodes;

        r0 := @parameter0: org.apache.commons.configuration.tree.ConfigurationNode;

        interfaceinvoke r0.<org.apache.commons.configuration.tree.ConfigurationNode: void setParentNode(org.apache.commons.configuration.tree.ConfigurationNode)>(null);

        $z0 = r0 instanceof org.apache.commons.configuration.tree.DefaultConfigurationNode;

        if $z0 == 0 goto label1;

        $r1 = (org.apache.commons.configuration.tree.DefaultConfigurationNode) r0;

        virtualinvoke $r1.<org.apache.commons.configuration.tree.DefaultConfigurationNode: void removeReference()>();

     label1:
        return;
    }

    protected void detachNodes(java.util.Collection)
    {
        java.util.Iterator $r1;
        org.apache.commons.configuration.tree.DefaultConfigurationNode$SubNodes r2;
        java.util.Collection r0;
        java.lang.Object $r3;
        boolean $z0;
        org.apache.commons.configuration.tree.ConfigurationNode $r4;

        r2 := @this: org.apache.commons.configuration.tree.DefaultConfigurationNode$SubNodes;

        r0 := @parameter0: java.util.Collection;

        $r1 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.apache.commons.configuration.tree.ConfigurationNode) $r3;

        virtualinvoke r2.<org.apache.commons.configuration.tree.DefaultConfigurationNode$SubNodes: void detachNode(org.apache.commons.configuration.tree.ConfigurationNode)>($r4);

        goto label1;

     label2:
        return;
    }
}
