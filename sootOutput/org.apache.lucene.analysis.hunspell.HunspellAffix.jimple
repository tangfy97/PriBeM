public class org.apache.lucene.analysis.hunspell.HunspellAffix extends java.lang.Object
{
    private java.lang.String append;
    private char[] appendFlags;
    private java.lang.String strip;
    private java.lang.String condition;
    private java.util.regex.Pattern conditionPattern;
    private char flag;
    private boolean crossProduct;

    public void <init>()
    {
        org.apache.lucene.analysis.hunspell.HunspellAffix r0;

        r0 := @this: org.apache.lucene.analysis.hunspell.HunspellAffix;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public boolean checkCondition(java.lang.CharSequence)
    {
        java.util.regex.Matcher $r3;
        java.lang.CharSequence r1;
        org.apache.lucene.analysis.hunspell.HunspellAffix r0;
        java.util.regex.Pattern $r2;
        boolean $z0;

        r0 := @this: org.apache.lucene.analysis.hunspell.HunspellAffix;

        r1 := @parameter0: java.lang.CharSequence;

        $r2 = r0.<org.apache.lucene.analysis.hunspell.HunspellAffix: java.util.regex.Pattern conditionPattern>;

        $r3 = virtualinvoke $r2.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r1);

        $z0 = virtualinvoke $r3.<java.util.regex.Matcher: boolean matches()>();

        return $z0;
    }

    public java.lang.String getAppend()
    {
        org.apache.lucene.analysis.hunspell.HunspellAffix r0;
        java.lang.String $r1;

        r0 := @this: org.apache.lucene.analysis.hunspell.HunspellAffix;

        $r1 = r0.<org.apache.lucene.analysis.hunspell.HunspellAffix: java.lang.String append>;

        return $r1;
    }

    public void setAppend(java.lang.String)
    {
        org.apache.lucene.analysis.hunspell.HunspellAffix r0;
        java.lang.String r1;

        r0 := @this: org.apache.lucene.analysis.hunspell.HunspellAffix;

        r1 := @parameter0: java.lang.String;

        r0.<org.apache.lucene.analysis.hunspell.HunspellAffix: java.lang.String append> = r1;

        return;
    }

    public char[] getAppendFlags()
    {
        org.apache.lucene.analysis.hunspell.HunspellAffix r0;
        char[] $r1;

        r0 := @this: org.apache.lucene.analysis.hunspell.HunspellAffix;

        $r1 = r0.<org.apache.lucene.analysis.hunspell.HunspellAffix: char[] appendFlags>;

        return $r1;
    }

    public void setAppendFlags(char[])
    {
        org.apache.lucene.analysis.hunspell.HunspellAffix r0;
        char[] r1;

        r0 := @this: org.apache.lucene.analysis.hunspell.HunspellAffix;

        r1 := @parameter0: char[];

        r0.<org.apache.lucene.analysis.hunspell.HunspellAffix: char[] appendFlags> = r1;

        return;
    }

    public java.lang.String getStrip()
    {
        org.apache.lucene.analysis.hunspell.HunspellAffix r0;
        java.lang.String $r1;

        r0 := @this: org.apache.lucene.analysis.hunspell.HunspellAffix;

        $r1 = r0.<org.apache.lucene.analysis.hunspell.HunspellAffix: java.lang.String strip>;

        return $r1;
    }

    public void setStrip(java.lang.String)
    {
        org.apache.lucene.analysis.hunspell.HunspellAffix r0;
        java.lang.String r1;

        r0 := @this: org.apache.lucene.analysis.hunspell.HunspellAffix;

        r1 := @parameter0: java.lang.String;

        r0.<org.apache.lucene.analysis.hunspell.HunspellAffix: java.lang.String strip> = r1;

        return;
    }

    public java.lang.String getCondition()
    {
        org.apache.lucene.analysis.hunspell.HunspellAffix r0;
        java.lang.String $r1;

        r0 := @this: org.apache.lucene.analysis.hunspell.HunspellAffix;

        $r1 = r0.<org.apache.lucene.analysis.hunspell.HunspellAffix: java.lang.String condition>;

        return $r1;
    }

    public void setCondition(java.lang.String, java.lang.String)
    {
        org.apache.lucene.analysis.hunspell.HunspellAffix r0;
        java.lang.String r1, r2;
        java.util.regex.Pattern $r3;

        r0 := @this: org.apache.lucene.analysis.hunspell.HunspellAffix;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r0.<org.apache.lucene.analysis.hunspell.HunspellAffix: java.lang.String condition> = r1;

        $r3 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>(r2);

        r0.<org.apache.lucene.analysis.hunspell.HunspellAffix: java.util.regex.Pattern conditionPattern> = $r3;

        return;
    }

    public char getFlag()
    {
        org.apache.lucene.analysis.hunspell.HunspellAffix r0;
        char $c0;

        r0 := @this: org.apache.lucene.analysis.hunspell.HunspellAffix;

        $c0 = r0.<org.apache.lucene.analysis.hunspell.HunspellAffix: char flag>;

        return $c0;
    }

    public void setFlag(char)
    {
        org.apache.lucene.analysis.hunspell.HunspellAffix r0;
        char c0;

        r0 := @this: org.apache.lucene.analysis.hunspell.HunspellAffix;

        c0 := @parameter0: char;

        r0.<org.apache.lucene.analysis.hunspell.HunspellAffix: char flag> = c0;

        return;
    }

    public boolean isCrossProduct()
    {
        org.apache.lucene.analysis.hunspell.HunspellAffix r0;
        boolean $z0;

        r0 := @this: org.apache.lucene.analysis.hunspell.HunspellAffix;

        $z0 = r0.<org.apache.lucene.analysis.hunspell.HunspellAffix: boolean crossProduct>;

        return $z0;
    }

    public void setCrossProduct(boolean)
    {
        org.apache.lucene.analysis.hunspell.HunspellAffix r0;
        boolean z0;

        r0 := @this: org.apache.lucene.analysis.hunspell.HunspellAffix;

        z0 := @parameter0: boolean;

        r0.<org.apache.lucene.analysis.hunspell.HunspellAffix: boolean crossProduct> = z0;

        return;
    }
}
