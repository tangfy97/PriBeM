class org.apache.lucene.analysis.standard.ClassicTokenizerImpl extends java.lang.Object implements org.apache.lucene.analysis.standard.StandardTokenizerInterface
{
    public static final int YYEOF;
    private static final int ZZ_BUFFERSIZE;
    public static final int YYINITIAL;
    private static final int[] ZZ_LEXSTATE;
    private static final java.lang.String ZZ_CMAP_PACKED;
    private static final char[] ZZ_CMAP;
    private static final int[] ZZ_ACTION;
    private static final java.lang.String ZZ_ACTION_PACKED_0;
    private static final int[] ZZ_ROWMAP;
    private static final java.lang.String ZZ_ROWMAP_PACKED_0;
    private static final int[] ZZ_TRANS;
    private static final java.lang.String ZZ_TRANS_PACKED_0;
    private static final int ZZ_UNKNOWN_ERROR;
    private static final int ZZ_NO_MATCH;
    private static final int ZZ_PUSHBACK_2BIG;
    private static final java.lang.String[] ZZ_ERROR_MSG;
    private static final int[] ZZ_ATTRIBUTE;
    private static final java.lang.String ZZ_ATTRIBUTE_PACKED_0;
    private java.io.Reader zzReader;
    private int zzState;
    private int zzLexicalState;
    private char[] zzBuffer;
    private int zzMarkedPos;
    private int zzCurrentPos;
    private int zzStartRead;
    private int zzEndRead;
    private int yyline;
    private int yychar;
    private int yycolumn;
    private boolean zzAtBOL;
    private boolean zzAtEOF;
    private boolean zzEOFDone;
    public static final int ALPHANUM;
    public static final int APOSTROPHE;
    public static final int ACRONYM;
    public static final int COMPANY;
    public static final int EMAIL;
    public static final int HOST;
    public static final int NUM;
    public static final int CJ;
    public static final int ACRONYM_DEP;
    public static final java.lang.String[] TOKEN_TYPES;

    private static int[] zzUnpackAction()
    {
        int[] r0;

        r0 = newarray (int)[51];

        staticinvoke <org.apache.lucene.analysis.standard.ClassicTokenizerImpl: int zzUnpackAction(java.lang.String,int,int[])>("\u0001\u0000\u0001\u0001\u0003\u0002\u0001\u0003\u0001\u0001\u000b\u0000\u0001\u0002\u0003\u0004\u0002\u0000\u0001\u0005\u0001\u0000\u0001\u0005\u0003\u0004\u0006\u0005\u0001\u0006\u0001\u0004\u0002\u0007\u0001\u0008\u0001\u0000\u0001\u0008\u0003\u0000\u0002\u0008\u0001\t\u0001\n\u0001\u0004", 0, r0);

        return r0;
    }

    private static int zzUnpackAction(java.lang.String, int, int[])
    {
        char $c2, $c8;
        int[] r1;
        int i0, $i1, $i3, i4, i5, i6, i7, $i9, $i10, $i12;
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r1 := @parameter2: int[];

        i4 = 0;

        i5 = i0;

        $i1 = virtualinvoke r0.<java.lang.String: int length()>();

     label1:
        if i4 >= $i1 goto label3;

        i6 = i4 + 1;

        $c8 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i4);

        $i9 = (int) $c8;

        i7 = $i9;

        i4 = i6 + 1;

        $c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i6);

     label2:
        $i3 = i5;

        i5 = i5 + 1;

        $i10 = (int) $c2;

        r1[$i3] = $i10;

        $i12 = (int) -1;

        i7 = i7 + $i12;

        if i7 > 0 goto label2;

        goto label1;

     label3:
        return i5;
    }

    private static int[] zzUnpackRowMap()
    {
        int[] r0;

        r0 = newarray (int)[51];

        staticinvoke <org.apache.lucene.analysis.standard.ClassicTokenizerImpl: int zzUnpackRowMap(java.lang.String,int,int[])>("\u0000\u0000\u0000\u000e\u0000\u001c\u0000*\u00008\u0000\u000e\u0000F\u0000T\u0000b\u0000p\u0000~\u0000\u008c\u0000\u009a\u0000\u00a8\u0000\u00b6\u0000\u00c4\u0000\u00d2\u0000\u00e0\u0000\u00ee\u0000\u00fc\u0000\u010a\u0000\u0118\u0000\u0126\u0000\u0134\u0000\u0142\u0000\u0150\u0000\u015e\u0000\u016c\u0000\u017a\u0000\u0188\u0000\u0196\u0000\u01a4\u0000\u01b2\u0000\u01c0\u0000\u01ce\u0000\u01dc\u0000\u01ea\u0000\u01f8\u0000\u00d2\u0000\u0206\u0000\u0214\u0000\u0222\u0000\u0230\u0000\u023e\u0000\u024c\u0000\u025a\u0000T\u0000\u008c\u0000\u0268\u0000\u0276\u0000\u0284", 0, r0);

        return r0;
    }

    private static int zzUnpackRowMap(java.lang.String, int, int[])
    {
        char $c2, $c5;
        int[] r1;
        int i0, $i1, i3, $i4, $i6, i7, i8, i9, $i10, $i11;
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r1 := @parameter2: int[];

        i7 = 0;

        i8 = i0;

        $i1 = virtualinvoke r0.<java.lang.String: int length()>();

     label1:
        if i7 >= $i1 goto label2;

        i9 = i7 + 1;

        $c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i7);

        $i10 = (int) $c2;

        i3 = $i10 << 16;

        $i4 = i8;

        i8 = i8 + 1;

        i7 = i9 + 1;

        $c5 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i9);

        $i11 = (int) $c5;

        $i6 = i3 | $i11;

        r1[$i4] = $i6;

        goto label1;

     label2:
        return i8;
    }

    private static int[] zzUnpackTrans()
    {
        int[] r0;

        r0 = newarray (int)[658];

        staticinvoke <org.apache.lucene.analysis.standard.ClassicTokenizerImpl: int zzUnpackTrans(java.lang.String,int,int[])>("\u0001\u0002\u0001\u0003\u0001\u0004\u0007\u0002\u0001\u0005\u0001\u0006\u0001\u0007\u0001\u0002\u000f\u0000\u0002\u0003\u0001\u0000\u0001\u0008\u0001\u0000\u0001\t\u0002\n\u0001\u000b\u0001\u0003\u0004\u0000\u0001\u0003\u0001\u0004\u0001\u0000\u0001\f\u0001\u0000\u0001\t\u0002\r\u0001\u000e\u0001\u0004\u0004\u0000\u0001\u0003\u0001\u0004\u0001\u000f\u0001\u0010\u0001\u0011\u0001\u0012\u0002\n\u0001\u000b\u0001\u0013\u0010\u0000\u0001\u0002\u0001\u0000\u0001\u0014\u0001\u0015\u0007\u0000\u0001\u0016\u0004\u0000\u0002\u0017\u0007\u0000\u0001\u0017\u0004\u0000\u0001\u0018\u0001\u0019\u0007\u0000\u0001\u001a\u0005\u0000\u0001\u001b\u0007\u0000\u0001\u000b\u0004\u0000\u0001\u001c\u0001\u001d\u0007\u0000\u0001\u001e\u0004\u0000\u0001\u001f\u0001 \u0007\u0000\u0001!\u0004\u0000\u0001\"\u0001#\u0007\u0000\u0001$\r\u0000\u0001%\u0004\u0000\u0001\u0014\u0001\u0015\u0007\u0000\u0001&\r\u0000\u0001\'\u0004\u0000\u0002\u0017\u0007\u0000\u0001(\u0004\u0000\u0001\u0003\u0001\u0004\u0001\u000f\u0001\u0008\u0001\u0011\u0001\u0012\u0002\n\u0001\u000b\u0001\u0013\u0004\u0000\u0002\u0014\u0001\u0000\u0001)\u0001\u0000\u0001\t\u0002*\u0001\u0000\u0001\u0014\u0004\u0000\u0001\u0014\u0001\u0015\u0001\u0000\u0001+\u0001\u0000\u0001\t\u0002,\u0001-\u0001\u0015\u0004\u0000\u0001\u0014\u0001\u0015\u0001\u0000\u0001)\u0001\u0000\u0001\t\u0002*\u0001\u0000\u0001\u0016\u0004\u0000\u0002\u0017\u0001\u0000\u0001.\u0002\u0000\u0001.\u0002\u0000\u0001\u0017\u0004\u0000\u0002\u0018\u0001\u0000\u0001*\u0001\u0000\u0001\t\u0002*\u0001\u0000\u0001\u0018\u0004\u0000\u0001\u0018\u0001\u0019\u0001\u0000\u0001,\u0001\u0000\u0001\t\u0002,\u0001-\u0001\u0019\u0004\u0000\u0001\u0018\u0001\u0019\u0001\u0000\u0001*\u0001\u0000\u0001\t\u0002*\u0001\u0000\u0001\u001a\u0005\u0000\u0001\u001b\u0001\u0000\u0001-\u0002\u0000\u0003-\u0001\u001b\u0004\u0000\u0002\u001c\u0001\u0000\u0001/\u0001\u0000\u0001\t\u0002\n\u0001\u000b\u0001\u001c\u0004\u0000\u0001\u001c\u0001\u001d\u0001\u0000\u00010\u0001\u0000\u0001\t\u0002\r\u0001\u000e\u0001\u001d\u0004\u0000\u0001\u001c\u0001\u001d\u0001\u0000\u0001/\u0001\u0000\u0001\t\u0002\n\u0001\u000b\u0001\u001e\u0004\u0000\u0002\u001f\u0001\u0000\u0001\n\u0001\u0000\u0001\t\u0002\n\u0001\u000b\u0001\u001f\u0004\u0000\u0001\u001f\u0001 \u0001\u0000\u0001\r\u0001\u0000\u0001\t\u0002\r\u0001\u000e\u0001 \u0004\u0000\u0001\u001f\u0001 \u0001\u0000\u0001\n\u0001\u0000\u0001\t\u0002\n\u0001\u000b\u0001!\u0004\u0000\u0002\"\u0001\u0000\u0001\u000b\u0002\u0000\u0003\u000b\u0001\"\u0004\u0000\u0001\"\u0001#\u0001\u0000\u0001\u000e\u0002\u0000\u0003\u000e\u0001#\u0004\u0000\u0001\"\u0001#\u0001\u0000\u0001\u000b\u0002\u0000\u0003\u000b\u0001$\u0006\u0000\u0001\u000f\u0006\u0000\u0001%\u0004\u0000\u0001\u0014\u0001\u0015\u0001\u0000\u00011\u0001\u0000\u0001\t\u0002*\u0001\u0000\u0001\u0016\u0004\u0000\u0002\u0017\u0001\u0000\u0001.\u0002\u0000\u0001.\u0002\u0000\u0001(\u0004\u0000\u0002\u0014\u0007\u0000\u0001\u0014\u0004\u0000\u0002\u0018\u0007\u0000\u0001\u0018\u0004\u0000\u0002\u001c\u0007\u0000\u0001\u001c\u0004\u0000\u0002\u001f\u0007\u0000\u0001\u001f\u0004\u0000\u0002\"\u0007\u0000\u0001\"\u0004\u0000\u00022\u0007\u0000\u00012\u0004\u0000\u0002\u0014\u0007\u0000\u00013\u0004\u0000\u00022\u0001\u0000\u0001.\u0002\u0000\u0001.\u0002\u0000\u00012\u0004\u0000\u0002\u0014\u0001\u0000\u00011\u0001\u0000\u0001\t\u0002*\u0001\u0000\u0001\u0014\u0003\u0000", 0, r0);

        return r0;
    }

    private static int zzUnpackTrans(java.lang.String, int, int[])
    {
        int[] r1;
        int i0, $i1, $i3, i4, i5, i6, i7, i8, $i10, $i11, $i13, $i15;
        java.lang.String r0;
        char $c2, $c9;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r1 := @parameter2: int[];

        i4 = 0;

        i5 = i0;

        $i1 = virtualinvoke r0.<java.lang.String: int length()>();

     label1:
        if i4 >= $i1 goto label3;

        i6 = i4 + 1;

        $c9 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i4);

        $i10 = (int) $c9;

        i7 = $i10;

        i4 = i6 + 1;

        $c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i6);

        $i11 = (int) $c2;

        $i13 = (int) -1;

        i8 = $i11 + $i13;

     label2:
        $i3 = i5;

        i5 = i5 + 1;

        r1[$i3] = i8;

        $i15 = (int) -1;

        i7 = i7 + $i15;

        if i7 > 0 goto label2;

        goto label1;

     label3:
        return i5;
    }

    private static int[] zzUnpackAttribute()
    {
        int[] r0;

        r0 = newarray (int)[51];

        staticinvoke <org.apache.lucene.analysis.standard.ClassicTokenizerImpl: int zzUnpackAttribute(java.lang.String,int,int[])>("\u0001\u0000\u0001\t\u0003\u0001\u0001\t\u0001\u0001\u000b\u0000\u0004\u0001\u0002\u0000\u0001\u0001\u0001\u0000\u000f\u0001\u0001\u0000\u0001\u0001\u0003\u0000\u0005\u0001", 0, r0);

        return r0;
    }

    private static int zzUnpackAttribute(java.lang.String, int, int[])
    {
        char $c2, $c8;
        int[] r1;
        int i0, $i1, $i3, i4, i5, i6, i7, $i9, $i10, $i12;
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r1 := @parameter2: int[];

        i4 = 0;

        i5 = i0;

        $i1 = virtualinvoke r0.<java.lang.String: int length()>();

     label1:
        if i4 >= $i1 goto label3;

        i6 = i4 + 1;

        $c8 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i4);

        $i9 = (int) $c8;

        i7 = $i9;

        i4 = i6 + 1;

        $c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i6);

     label2:
        $i3 = i5;

        i5 = i5 + 1;

        $i10 = (int) $c2;

        r1[$i3] = $i10;

        $i12 = (int) -1;

        i7 = i7 + $i12;

        if i7 > 0 goto label2;

        goto label1;

     label3:
        return i5;
    }

    public final int yychar()
    {
        int $i0;
        org.apache.lucene.analysis.standard.ClassicTokenizerImpl r0;

        r0 := @this: org.apache.lucene.analysis.standard.ClassicTokenizerImpl;

        $i0 = r0.<org.apache.lucene.analysis.standard.ClassicTokenizerImpl: int yychar>;

        return $i0;
    }

    public final void getText(org.apache.lucene.analysis.tokenattributes.CharTermAttribute)
    {
        org.apache.lucene.analysis.tokenattributes.CharTermAttribute r0;
        int $i0, $i1, $i2, $i3;
        char[] $r2;
        org.apache.lucene.analysis.standard.ClassicTokenizerImpl r1;

        r1 := @this: org.apache.lucene.analysis.standard.ClassicTokenizerImpl;

        r0 := @parameter0: org.apache.lucene.analysis.tokenattributes.CharTermAttribute;

        $r2 = r1.<org.apache.lucene.analysis.standard.ClassicTokenizerImpl: char[] zzBuffer>;

        $i3 = r1.<org.apache.lucene.analysis.standard.ClassicTokenizerImpl: int zzStartRead>;

        $i1 = r1.<org.apache.lucene.analysis.standard.ClassicTokenizerImpl: int zzMarkedPos>;

        $i0 = r1.<org.apache.lucene.analysis.standard.ClassicTokenizerImpl: int zzStartRead>;

        $i2 = $i1 - $i0;

        interfaceinvoke r0.<org.apache.lucene.analysis.tokenattributes.CharTermAttribute: void copyBuffer(char[],int,int)>($r2, $i3, $i2);

        return;
    }

    void <init>(java.io.Reader)
    {
        char[] $r1;
        java.io.Reader r2;
        org.apache.lucene.analysis.standard.ClassicTokenizerImpl r0;

        r0 := @this: org.apache.lucene.analysis.standard.ClassicTokenizerImpl;

        r2 := @parameter0: java.io.Reader;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.lucene.analysis.standard.ClassicTokenizerImpl: int zzLexicalState> = 0;

        $r1 = newarray (char)[4096];

        r0.<org.apache.lucene.analysis.standard.ClassicTokenizerImpl: char[] zzBuffer> = $r1;

        r0.<org.apache.lucene.analysis.standard.ClassicTokenizerImpl: boolean zzAtBOL> = 1;

        r0.<org.apache.lucene.analysis.standard.ClassicTokenizerImpl: java.io.Reader zzReader> = r2;

        return;
    }

    private static char[] zzUnpackCMap(java.lang.String)
    {
        char $c0, $c6;
        int $i1, i2, i3, i4, i5, $i7, $i9;
        char[] r0;
        java.lang.String r1;

        r1 := @parameter0: java.lang.String;

        r0 = newarray (char)[65536];

        i2 = 0;

        i3 = 0;

     label1:
        if i2 >= 1154 goto label3;

        i4 = i2 + 1;

        $c6 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i2);

        $i7 = (int) $c6;

        i5 = $i7;

        i2 = i4 + 1;

        $c0 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i4);

     label2:
        $i1 = i3;

        i3 = i3 + 1;

        r0[$i1] = $c0;

        $i9 = (int) -1;

        i5 = i5 + $i9;

        if i5 > 0 goto label2;

        goto label1;

     label3:
        return r0;
    }

    private boolean zzRefill() throws java.io.IOException
    {
        java.io.Reader $r4, $r5;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i31;
        char $c11;
        org.apache.lucene.analysis.standard.ClassicTokenizerImpl r0;
        char[] $r1, $r2, $r3, $r6, $r7, $r8, $r9, $r10, r11;

        r0 := @this: org.apache.lucene.analysis.standard.ClassicTokenizerImpl;

        $i0 = r0.<org.apache.lucene.analysis.standard.ClassicTokenizerImpl: int zzStartRead>;

        if $i0 <= 0 goto label1;

        $r10 = r0.<org.apache.lucene.analysis.standard.ClassicTokenizerImpl: char[] zzBuffer>;

        $i20 = r0.<org.apache.lucene.analysis.standard.ClassicTokenizerImpl: int zzStartRead>;

        $r9 = r0.<org.apache.lucene.analysis.standard.ClassicTokenizerImpl: char[] zzBuffer>;

        $i18 = r0.<org.apache.lucene.analysis.standard.ClassicTokenizerImpl: int zzEndRead>;

        $i17 = r0.<org.apache.lucene.analysis.standard.ClassicTokenizerImpl: int zzStartRead>;

        $i19 = $i18 - $i17;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r10, $i20, $r9, 0, $i19);

        $i22 = r0.<org.apache.lucene.analysis.standard.ClassicTokenizerImpl: int zzEndRead>;

        $i21 = r0.<org.apache.lucene.analysis.standard.ClassicTokenizerImpl: int zzStartRead>;

        $i23 = $i22 - $i21;

        r0.<org.apache.lucene.analysis.standard.ClassicTokenizerImpl: int zzEndRead> = $i23;

        $i25 = r0.<org.apache.lucene.analysis.standard.ClassicTokenizerImpl: int zzCurrentPos>;

        $i24 = r0.<org.apache.lucene.analysis.standard.ClassicTokenizerImpl: int zzStartRead>;

        $i26 = $i25 - $i24;

        r0.<org.apache.lucene.analysis.standard.ClassicTokenizerImpl: int zzCurrentPos> = $i26;

        $i28 = r0.<org.apache.lucene.analysis.standard.ClassicTokenizerImpl: int zzMarkedPos>;

        $i27 = r0.<org.apache.lucene.analysis.standard.ClassicTokenizerImpl: int zzStartRead>;

        $i29 = $i28 - $i27;

        r0.<org.apache.lucene.analysis.standard.ClassicTokenizerImpl: int zzMarkedPos> = $i29;

        r0.<org.apache.lucene.analysis.standard.ClassicTokenizerImpl: int zzStartRead> = 0;

     label1:
        $i2 = r0.<org.apache.lucene.analysis.standard.ClassicTokenizerImpl: int zzCurrentPos>;

        $r1 = r0.<org.apache.lucene.analysis.standard.ClassicTokenizerImpl: char[] zzBuffer>;

        $i1 = lengthof $r1;

        if $i2 < $i1 goto label2;

        $i14 = r0.<org.apache.lucene.analysis.standard.ClassicTokenizerImpl: int zzCurrentPos>;

        $i15 = $i14 * 2;

        r11 = newarray (char)[$i15];

        $r8 = r0.<org.apache.lucene.analysis.standard.ClassicTokenizerImpl: char[] zzBuffer>;

        $r7 = r0.<org.apache.lucene.analysis.standard.ClassicTokenizerImpl: char[] zzBuffer>;

        $i16 = lengthof $r7;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r8, 0, r11, 0, $i16);

        r0.<org.apache.lucene.analysis.standard.ClassicTokenizerImpl: char[] zzBuffer> = r11;

     label2:
        $r4 = r0.<org.apache.lucene.analysis.standard.ClassicTokenizerImpl: java.io.Reader zzReader>;

        $r3 = r0.<org.apache.lucene.analysis.standard.ClassicTokenizerImpl: char[] zzBuffer>;

        $i6 = r0.<org.apache.lucene.analysis.standard.ClassicTokenizerImpl: int zzEndRead>;

        $r2 = r0.<org.apache.lucene.analysis.standard.ClassicTokenizerImpl: char[] zzBuffer>;

        $i4 = lengthof $r2;

        $i3 = r0.<org.apache.lucene.analysis.standard.ClassicTokenizerImpl: int zzEndRead>;

        $i5 = $i4 - $i3;

        $i7 = virtualinvoke $r4.<java.io.Reader: int read(char[],int,int)>($r3, $i6, $i5);

        if $i7 <= 0 goto label3;

        $i12 = r0.<org.apache.lucene.analysis.standard.ClassicTokenizerImpl: int zzEndRead>;

        $i13 = $i12 + $i7;

        r0.<org.apache.lucene.analysis.standard.ClassicTokenizerImpl: int zzEndRead> = $i13;

        return 0;

     label3:
        if $i7 != 0 goto label5;

        $r5 = r0.<org.apache.lucene.analysis.standard.ClassicTokenizerImpl: java.io.Reader zzReader>;

        $i8 = virtualinvoke $r5.<java.io.Reader: int read()>();

        $i31 = (int) -1;

        if $i8 != $i31 goto label4;

        return 1;

     label4:
        $r6 = r0.<org.apache.lucene.analysis.standard.ClassicTokenizerImpl: char[] zzBuffer>;

        $i9 = r0.<org.apache.lucene.analysis.standard.ClassicTokenizerImpl: int zzEndRead>;

        $i10 = $i9 + 1;

        r0.<org.apache.lucene.analysis.standard.ClassicTokenizerImpl: int zzEndRead> = $i10;

        $c11 = (char) $i8;

        $r6[$i9] = $c11;

        return 0;

     label5:
        return 1;
    }

    public final void yyclose() throws java.io.IOException
    {
        int $i0;
        java.io.Reader $r1, $r2;
        org.apache.lucene.analysis.standard.ClassicTokenizerImpl r0;

        r0 := @this: org.apache.lucene.analysis.standard.ClassicTokenizerImpl;

        r0.<org.apache.lucene.analysis.standard.ClassicTokenizerImpl: boolean zzAtEOF> = 1;

        $i0 = r0.<org.apache.lucene.analysis.standard.ClassicTokenizerImpl: int zzStartRead>;

        r0.<org.apache.lucene.analysis.standard.ClassicTokenizerImpl: int zzEndRead> = $i0;

        $r1 = r0.<org.apache.lucene.analysis.standard.ClassicTokenizerImpl: java.io.Reader zzReader>;

        if $r1 == null goto label1;

        $r2 = r0.<org.apache.lucene.analysis.standard.ClassicTokenizerImpl: java.io.Reader zzReader>;

        virtualinvoke $r2.<java.io.Reader: void close()>();

     label1:
        return;
    }

    public final void yyreset(java.io.Reader)
    {
        int $i0;
        char[] $r2, $r3;
        java.io.Reader r1;
        org.apache.lucene.analysis.standard.ClassicTokenizerImpl r0;

        r0 := @this: org.apache.lucene.analysis.standard.ClassicTokenizerImpl;

        r1 := @parameter0: java.io.Reader;

        r0.<org.apache.lucene.analysis.standard.ClassicTokenizerImpl: java.io.Reader zzReader> = r1;

        r0.<org.apache.lucene.analysis.standard.ClassicTokenizerImpl: boolean zzAtBOL> = 1;

        r0.<org.apache.lucene.analysis.standard.ClassicTokenizerImpl: boolean zzAtEOF> = 0;

        r0.<org.apache.lucene.analysis.standard.ClassicTokenizerImpl: boolean zzEOFDone> = 0;

        r0.<org.apache.lucene.analysis.standard.ClassicTokenizerImpl: int zzStartRead> = 0;

        r0.<org.apache.lucene.analysis.standard.ClassicTokenizerImpl: int zzEndRead> = 0;

        r0.<org.apache.lucene.analysis.standard.ClassicTokenizerImpl: int zzMarkedPos> = 0;

        r0.<org.apache.lucene.analysis.standard.ClassicTokenizerImpl: int zzCurrentPos> = 0;

        r0.<org.apache.lucene.analysis.standard.ClassicTokenizerImpl: int yycolumn> = 0;

        r0.<org.apache.lucene.analysis.standard.ClassicTokenizerImpl: int yychar> = 0;

        r0.<org.apache.lucene.analysis.standard.ClassicTokenizerImpl: int yyline> = 0;

        r0.<org.apache.lucene.analysis.standard.ClassicTokenizerImpl: int zzLexicalState> = 0;

        $r2 = r0.<org.apache.lucene.analysis.standard.ClassicTokenizerImpl: char[] zzBuffer>;

        $i0 = lengthof $r2;

        if $i0 <= 4096 goto label1;

        $r3 = newarray (char)[4096];

        r0.<org.apache.lucene.analysis.standard.ClassicTokenizerImpl: char[] zzBuffer> = $r3;

     label1:
        return;
    }

    public final int yystate()
    {
        int $i0;
        org.apache.lucene.analysis.standard.ClassicTokenizerImpl r0;

        r0 := @this: org.apache.lucene.analysis.standard.ClassicTokenizerImpl;

        $i0 = r0.<org.apache.lucene.analysis.standard.ClassicTokenizerImpl: int zzLexicalState>;

        return $i0;
    }

    public final void yybegin(int)
    {
        int i0;
        org.apache.lucene.analysis.standard.ClassicTokenizerImpl r0;

        r0 := @this: org.apache.lucene.analysis.standard.ClassicTokenizerImpl;

        i0 := @parameter0: int;

        r0.<org.apache.lucene.analysis.standard.ClassicTokenizerImpl: int zzLexicalState> = i0;

        return;
    }

    public final java.lang.String yytext()
    {
        int $i0, $i1, $i2, $i3;
        char[] $r2;
        java.lang.String $r0;
        org.apache.lucene.analysis.standard.ClassicTokenizerImpl r1;

        r1 := @this: org.apache.lucene.analysis.standard.ClassicTokenizerImpl;

        $r0 = new java.lang.String;

        $r2 = r1.<org.apache.lucene.analysis.standard.ClassicTokenizerImpl: char[] zzBuffer>;

        $i3 = r1.<org.apache.lucene.analysis.standard.ClassicTokenizerImpl: int zzStartRead>;

        $i1 = r1.<org.apache.lucene.analysis.standard.ClassicTokenizerImpl: int zzMarkedPos>;

        $i0 = r1.<org.apache.lucene.analysis.standard.ClassicTokenizerImpl: int zzStartRead>;

        $i2 = $i1 - $i0;

        specialinvoke $r0.<java.lang.String: void <init>(char[],int,int)>($r2, $i3, $i2);

        return $r0;
    }

    public final char yycharat(int)
    {
        int i0, $i1, $i2;
        char[] $r1;
        char $c3;
        org.apache.lucene.analysis.standard.ClassicTokenizerImpl r0;

        r0 := @this: org.apache.lucene.analysis.standard.ClassicTokenizerImpl;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.lucene.analysis.standard.ClassicTokenizerImpl: char[] zzBuffer>;

        $i1 = r0.<org.apache.lucene.analysis.standard.ClassicTokenizerImpl: int zzStartRead>;

        $i2 = $i1 + i0;

        $c3 = $r1[$i2];

        return $c3;
    }

    public final int yylength()
    {
        int $i0, $i1, $i2;
        org.apache.lucene.analysis.standard.ClassicTokenizerImpl r0;

        r0 := @this: org.apache.lucene.analysis.standard.ClassicTokenizerImpl;

        $i1 = r0.<org.apache.lucene.analysis.standard.ClassicTokenizerImpl: int zzMarkedPos>;

        $i0 = r0.<org.apache.lucene.analysis.standard.ClassicTokenizerImpl: int zzStartRead>;

        $i2 = $i1 - $i0;

        return $i2;
    }

    private void zzScanError(int)
    {
        int i0;
        java.lang.Error $r1;
        java.lang.String[] $r0, $r3;
        java.lang.ArrayIndexOutOfBoundsException $r2;
        java.lang.String r5;
        org.apache.lucene.analysis.standard.ClassicTokenizerImpl r4;

        r4 := @this: org.apache.lucene.analysis.standard.ClassicTokenizerImpl;

        i0 := @parameter0: int;

     label1:
        $r0 = <org.apache.lucene.analysis.standard.ClassicTokenizerImpl: java.lang.String[] ZZ_ERROR_MSG>;

        r5 = $r0[i0];

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        $r3 = <org.apache.lucene.analysis.standard.ClassicTokenizerImpl: java.lang.String[] ZZ_ERROR_MSG>;

        r5 = $r3[0];

     label4:
        $r1 = new java.lang.Error;

        specialinvoke $r1.<java.lang.Error: void <init>(java.lang.String)>(r5);

        throw $r1;

        catch java.lang.ArrayIndexOutOfBoundsException from label1 to label2 with label3;
    }

    public void yypushback(int)
    {
        int i0, $i1, $i2, $i3;
        org.apache.lucene.analysis.standard.ClassicTokenizerImpl r0;

        r0 := @this: org.apache.lucene.analysis.standard.ClassicTokenizerImpl;

        i0 := @parameter0: int;

        $i1 = virtualinvoke r0.<org.apache.lucene.analysis.standard.ClassicTokenizerImpl: int yylength()>();

        if i0 <= $i1 goto label1;

        specialinvoke r0.<org.apache.lucene.analysis.standard.ClassicTokenizerImpl: void zzScanError(int)>(2);

     label1:
        $i2 = r0.<org.apache.lucene.analysis.standard.ClassicTokenizerImpl: int zzMarkedPos>;

        $i3 = $i2 - i0;

        r0.<org.apache.lucene.analysis.standard.ClassicTokenizerImpl: int zzMarkedPos> = $i3;

        return;
    }

    public int getNextToken() throws java.io.IOException
    {
        int[] r2, r3, r4, $r5, $r6;
        boolean $z0, $z1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, i21, i22, i23, i24, i25, i26, i27, $i28, $i30, $i31, $i33, $i35, $i37;
        char $c9;
        org.apache.lucene.analysis.standard.ClassicTokenizerImpl r0;
        char[] r1, r7;

        r0 := @this: org.apache.lucene.analysis.standard.ClassicTokenizerImpl;

        i21 = r0.<org.apache.lucene.analysis.standard.ClassicTokenizerImpl: int zzEndRead>;

        r7 = r0.<org.apache.lucene.analysis.standard.ClassicTokenizerImpl: char[] zzBuffer>;

        r1 = <org.apache.lucene.analysis.standard.ClassicTokenizerImpl: char[] ZZ_CMAP>;

        r2 = <org.apache.lucene.analysis.standard.ClassicTokenizerImpl: int[] ZZ_TRANS>;

        r3 = <org.apache.lucene.analysis.standard.ClassicTokenizerImpl: int[] ZZ_ROWMAP>;

        r4 = <org.apache.lucene.analysis.standard.ClassicTokenizerImpl: int[] ZZ_ATTRIBUTE>;

     label01:
        $i15 = r0.<org.apache.lucene.analysis.standard.ClassicTokenizerImpl: int zzMarkedPos>;

        i22 = $i15;

        $i2 = r0.<org.apache.lucene.analysis.standard.ClassicTokenizerImpl: int yychar>;

        $i0 = r0.<org.apache.lucene.analysis.standard.ClassicTokenizerImpl: int zzStartRead>;

        $i1 = $i15 - $i0;

        $i3 = $i2 + $i1;

        r0.<org.apache.lucene.analysis.standard.ClassicTokenizerImpl: int yychar> = $i3;

        $i30 = (int) -1;

        i23 = $i30;

        r0.<org.apache.lucene.analysis.standard.ClassicTokenizerImpl: int zzStartRead> = $i15;

        r0.<org.apache.lucene.analysis.standard.ClassicTokenizerImpl: int zzCurrentPos> = $i15;

        i24 = $i15;

        $r5 = <org.apache.lucene.analysis.standard.ClassicTokenizerImpl: int[] ZZ_LEXSTATE>;

        $i4 = r0.<org.apache.lucene.analysis.standard.ClassicTokenizerImpl: int zzLexicalState>;

        $i5 = $r5[$i4];

        r0.<org.apache.lucene.analysis.standard.ClassicTokenizerImpl: int zzState> = $i5;

        $i6 = r0.<org.apache.lucene.analysis.standard.ClassicTokenizerImpl: int zzState>;

        $i16 = r4[$i6];

        $i7 = $i16 & 1;

        if $i7 != 1 goto label02;

        i23 = r0.<org.apache.lucene.analysis.standard.ClassicTokenizerImpl: int zzState>;

     label02:
        if i24 >= i21 goto label03;

        $i19 = i24;

        i24 = i24 + 1;

        i25 = r7[$i19];

        goto label06;

     label03:
        $z0 = r0.<org.apache.lucene.analysis.standard.ClassicTokenizerImpl: boolean zzAtEOF>;

        if $z0 == 0 goto label04;

        i25 = -1;

        goto label09;

     label04:
        r0.<org.apache.lucene.analysis.standard.ClassicTokenizerImpl: int zzCurrentPos> = i24;

        r0.<org.apache.lucene.analysis.standard.ClassicTokenizerImpl: int zzMarkedPos> = i22;

        $z1 = specialinvoke r0.<org.apache.lucene.analysis.standard.ClassicTokenizerImpl: boolean zzRefill()>();

        i26 = r0.<org.apache.lucene.analysis.standard.ClassicTokenizerImpl: int zzCurrentPos>;

        i22 = r0.<org.apache.lucene.analysis.standard.ClassicTokenizerImpl: int zzMarkedPos>;

        r7 = r0.<org.apache.lucene.analysis.standard.ClassicTokenizerImpl: char[] zzBuffer>;

        i21 = r0.<org.apache.lucene.analysis.standard.ClassicTokenizerImpl: int zzEndRead>;

        if $z1 == 0 goto label05;

        i25 = -1;

        goto label09;

     label05:
        i24 = i26 + 1;

        i25 = r7[i26];

     label06:
        $i8 = r0.<org.apache.lucene.analysis.standard.ClassicTokenizerImpl: int zzState>;

        $i10 = r3[$i8];

        $c9 = r1[i25];

        $i31 = (int) $c9;

        $i11 = $i10 + $i31;

        $i20 = r2[$i11];

        $i33 = (int) -1;

        if $i20 != $i33 goto label07;

        goto label09;

     label07:
        r0.<org.apache.lucene.analysis.standard.ClassicTokenizerImpl: int zzState> = $i20;

        $i12 = r0.<org.apache.lucene.analysis.standard.ClassicTokenizerImpl: int zzState>;

        i27 = r4[$i12];

        $i13 = i27 & 1;

        if $i13 != 1 goto label08;

        i23 = r0.<org.apache.lucene.analysis.standard.ClassicTokenizerImpl: int zzState>;

        i22 = i24;

        $i14 = i27 & 8;

        if $i14 != 8 goto label08;

        goto label09;

     label08:
        goto label02;

     label09:
        r0.<org.apache.lucene.analysis.standard.ClassicTokenizerImpl: int zzMarkedPos> = i22;

        if i23 >= 0 goto label10;

        $i28 = i23;

        goto label11;

     label10:
        $r6 = <org.apache.lucene.analysis.standard.ClassicTokenizerImpl: int[] ZZ_ACTION>;

        $i28 = $r6[i23];

     label11:
        tableswitch($i28)
        {
            case 1: goto label12;
            case 2: goto label14;
            case 3: goto label16;
            case 4: goto label18;
            case 5: goto label20;
            case 6: goto label22;
            case 7: goto label24;
            case 8: goto label26;
            case 9: goto label28;
            case 10: goto label30;
            case 11: goto label13;
            case 12: goto label15;
            case 13: goto label17;
            case 14: goto label19;
            case 15: goto label21;
            case 16: goto label23;
            case 17: goto label25;
            case 18: goto label27;
            case 19: goto label29;
            case 20: goto label31;
            default: goto label32;
        };

     label12:
        goto label34;

     label13:
        goto label34;

     label14:
        return 0;

     label15:
        goto label34;

     label16:
        return 7;

     label17:
        goto label34;

     label18:
        return 5;

     label19:
        goto label34;

     label20:
        return 6;

     label21:
        goto label34;

     label22:
        return 1;

     label23:
        goto label34;

     label24:
        return 3;

     label25:
        goto label34;

     label26:
        return 8;

     label27:
        goto label34;

     label28:
        return 2;

     label29:
        goto label34;

     label30:
        return 4;

     label31:
        goto label34;

     label32:
        $i35 = (int) -1;

        if i25 != $i35 goto label33;

        $i18 = r0.<org.apache.lucene.analysis.standard.ClassicTokenizerImpl: int zzStartRead>;

        $i17 = r0.<org.apache.lucene.analysis.standard.ClassicTokenizerImpl: int zzCurrentPos>;

        if $i18 != $i17 goto label33;

        r0.<org.apache.lucene.analysis.standard.ClassicTokenizerImpl: boolean zzAtEOF> = 1;

        $i37 = (int) -1;

        return $i37;

     label33:
        specialinvoke r0.<org.apache.lucene.analysis.standard.ClassicTokenizerImpl: void zzScanError(int)>(1);

     label34:
        goto label01;
    }

    static void <clinit>()
    {
        java.lang.String[] $r5, $r7;
        int[] $r0, $r2, $r3, $r4, $r6;
        char[] $r1;

        <org.apache.lucene.analysis.standard.ClassicTokenizerImpl: int ACRONYM_DEP> = 8;

        <org.apache.lucene.analysis.standard.ClassicTokenizerImpl: int CJ> = 7;

        <org.apache.lucene.analysis.standard.ClassicTokenizerImpl: int NUM> = 6;

        <org.apache.lucene.analysis.standard.ClassicTokenizerImpl: int HOST> = 5;

        <org.apache.lucene.analysis.standard.ClassicTokenizerImpl: int EMAIL> = 4;

        <org.apache.lucene.analysis.standard.ClassicTokenizerImpl: int COMPANY> = 3;

        <org.apache.lucene.analysis.standard.ClassicTokenizerImpl: int ACRONYM> = 2;

        <org.apache.lucene.analysis.standard.ClassicTokenizerImpl: int APOSTROPHE> = 1;

        <org.apache.lucene.analysis.standard.ClassicTokenizerImpl: int ALPHANUM> = 0;

        <org.apache.lucene.analysis.standard.ClassicTokenizerImpl: java.lang.String ZZ_ATTRIBUTE_PACKED_0> = "\u0001\u0000\u0001\t\u0003\u0001\u0001\t\u0001\u0001\u000b\u0000\u0004\u0001\u0002\u0000\u0001\u0001\u0001\u0000\u000f\u0001\u0001\u0000\u0001\u0001\u0003\u0000\u0005\u0001";

        <org.apache.lucene.analysis.standard.ClassicTokenizerImpl: int ZZ_PUSHBACK_2BIG> = 2;

        <org.apache.lucene.analysis.standard.ClassicTokenizerImpl: int ZZ_NO_MATCH> = 1;

        <org.apache.lucene.analysis.standard.ClassicTokenizerImpl: int ZZ_UNKNOWN_ERROR> = 0;

        <org.apache.lucene.analysis.standard.ClassicTokenizerImpl: java.lang.String ZZ_TRANS_PACKED_0> = "\u0001\u0002\u0001\u0003\u0001\u0004\u0007\u0002\u0001\u0005\u0001\u0006\u0001\u0007\u0001\u0002\u000f\u0000\u0002\u0003\u0001\u0000\u0001\u0008\u0001\u0000\u0001\t\u0002\n\u0001\u000b\u0001\u0003\u0004\u0000\u0001\u0003\u0001\u0004\u0001\u0000\u0001\f\u0001\u0000\u0001\t\u0002\r\u0001\u000e\u0001\u0004\u0004\u0000\u0001\u0003\u0001\u0004\u0001\u000f\u0001\u0010\u0001\u0011\u0001\u0012\u0002\n\u0001\u000b\u0001\u0013\u0010\u0000\u0001\u0002\u0001\u0000\u0001\u0014\u0001\u0015\u0007\u0000\u0001\u0016\u0004\u0000\u0002\u0017\u0007\u0000\u0001\u0017\u0004\u0000\u0001\u0018\u0001\u0019\u0007\u0000\u0001\u001a\u0005\u0000\u0001\u001b\u0007\u0000\u0001\u000b\u0004\u0000\u0001\u001c\u0001\u001d\u0007\u0000\u0001\u001e\u0004\u0000\u0001\u001f\u0001 \u0007\u0000\u0001!\u0004\u0000\u0001\"\u0001#\u0007\u0000\u0001$\r\u0000\u0001%\u0004\u0000\u0001\u0014\u0001\u0015\u0007\u0000\u0001&\r\u0000\u0001\'\u0004\u0000\u0002\u0017\u0007\u0000\u0001(\u0004\u0000\u0001\u0003\u0001\u0004\u0001\u000f\u0001\u0008\u0001\u0011\u0001\u0012\u0002\n\u0001\u000b\u0001\u0013\u0004\u0000\u0002\u0014\u0001\u0000\u0001)\u0001\u0000\u0001\t\u0002*\u0001\u0000\u0001\u0014\u0004\u0000\u0001\u0014\u0001\u0015\u0001\u0000\u0001+\u0001\u0000\u0001\t\u0002,\u0001-\u0001\u0015\u0004\u0000\u0001\u0014\u0001\u0015\u0001\u0000\u0001)\u0001\u0000\u0001\t\u0002*\u0001\u0000\u0001\u0016\u0004\u0000\u0002\u0017\u0001\u0000\u0001.\u0002\u0000\u0001.\u0002\u0000\u0001\u0017\u0004\u0000\u0002\u0018\u0001\u0000\u0001*\u0001\u0000\u0001\t\u0002*\u0001\u0000\u0001\u0018\u0004\u0000\u0001\u0018\u0001\u0019\u0001\u0000\u0001,\u0001\u0000\u0001\t\u0002,\u0001-\u0001\u0019\u0004\u0000\u0001\u0018\u0001\u0019\u0001\u0000\u0001*\u0001\u0000\u0001\t\u0002*\u0001\u0000\u0001\u001a\u0005\u0000\u0001\u001b\u0001\u0000\u0001-\u0002\u0000\u0003-\u0001\u001b\u0004\u0000\u0002\u001c\u0001\u0000\u0001/\u0001\u0000\u0001\t\u0002\n\u0001\u000b\u0001\u001c\u0004\u0000\u0001\u001c\u0001\u001d\u0001\u0000\u00010\u0001\u0000\u0001\t\u0002\r\u0001\u000e\u0001\u001d\u0004\u0000\u0001\u001c\u0001\u001d\u0001\u0000\u0001/\u0001\u0000\u0001\t\u0002\n\u0001\u000b\u0001\u001e\u0004\u0000\u0002\u001f\u0001\u0000\u0001\n\u0001\u0000\u0001\t\u0002\n\u0001\u000b\u0001\u001f\u0004\u0000\u0001\u001f\u0001 \u0001\u0000\u0001\r\u0001\u0000\u0001\t\u0002\r\u0001\u000e\u0001 \u0004\u0000\u0001\u001f\u0001 \u0001\u0000\u0001\n\u0001\u0000\u0001\t\u0002\n\u0001\u000b\u0001!\u0004\u0000\u0002\"\u0001\u0000\u0001\u000b\u0002\u0000\u0003\u000b\u0001\"\u0004\u0000\u0001\"\u0001#\u0001\u0000\u0001\u000e\u0002\u0000\u0003\u000e\u0001#\u0004\u0000\u0001\"\u0001#\u0001\u0000\u0001\u000b\u0002\u0000\u0003\u000b\u0001$\u0006\u0000\u0001\u000f\u0006\u0000\u0001%\u0004\u0000\u0001\u0014\u0001\u0015\u0001\u0000\u00011\u0001\u0000\u0001\t\u0002*\u0001\u0000\u0001\u0016\u0004\u0000\u0002\u0017\u0001\u0000\u0001.\u0002\u0000\u0001.\u0002\u0000\u0001(\u0004\u0000\u0002\u0014\u0007\u0000\u0001\u0014\u0004\u0000\u0002\u0018\u0007\u0000\u0001\u0018\u0004\u0000\u0002\u001c\u0007\u0000\u0001\u001c\u0004\u0000\u0002\u001f\u0007\u0000\u0001\u001f\u0004\u0000\u0002\"\u0007\u0000\u0001\"\u0004\u0000\u00022\u0007\u0000\u00012\u0004\u0000\u0002\u0014\u0007\u0000\u00013\u0004\u0000\u00022\u0001\u0000\u0001.\u0002\u0000\u0001.\u0002\u0000\u00012\u0004\u0000\u0002\u0014\u0001\u0000\u00011\u0001\u0000\u0001\t\u0002*\u0001\u0000\u0001\u0014\u0003\u0000";

        <org.apache.lucene.analysis.standard.ClassicTokenizerImpl: java.lang.String ZZ_ROWMAP_PACKED_0> = "\u0000\u0000\u0000\u000e\u0000\u001c\u0000*\u00008\u0000\u000e\u0000F\u0000T\u0000b\u0000p\u0000~\u0000\u008c\u0000\u009a\u0000\u00a8\u0000\u00b6\u0000\u00c4\u0000\u00d2\u0000\u00e0\u0000\u00ee\u0000\u00fc\u0000\u010a\u0000\u0118\u0000\u0126\u0000\u0134\u0000\u0142\u0000\u0150\u0000\u015e\u0000\u016c\u0000\u017a\u0000\u0188\u0000\u0196\u0000\u01a4\u0000\u01b2\u0000\u01c0\u0000\u01ce\u0000\u01dc\u0000\u01ea\u0000\u01f8\u0000\u00d2\u0000\u0206\u0000\u0214\u0000\u0222\u0000\u0230\u0000\u023e\u0000\u024c\u0000\u025a\u0000T\u0000\u008c\u0000\u0268\u0000\u0276\u0000\u0284";

        <org.apache.lucene.analysis.standard.ClassicTokenizerImpl: java.lang.String ZZ_ACTION_PACKED_0> = "\u0001\u0000\u0001\u0001\u0003\u0002\u0001\u0003\u0001\u0001\u000b\u0000\u0001\u0002\u0003\u0004\u0002\u0000\u0001\u0005\u0001\u0000\u0001\u0005\u0003\u0004\u0006\u0005\u0001\u0006\u0001\u0004\u0002\u0007\u0001\u0008\u0001\u0000\u0001\u0008\u0003\u0000\u0002\u0008\u0001\t\u0001\n\u0001\u0004";

        <org.apache.lucene.analysis.standard.ClassicTokenizerImpl: java.lang.String ZZ_CMAP_PACKED> = "\t\u0000\u0001\u0000\u0001\r\u0001\u0000\u0001\u0000\u0001\f\u0012\u0000\u0001\u0000\u0005\u0000\u0001\u0005\u0001\u0003\u0004\u0000\u0001\t\u0001\u0007\u0001\u0004\u0001\t\n\u0002\u0006\u0000\u0001\u0006\u001a\n\u0004\u0000\u0001\u0008\u0001\u0000\u001a\n/\u0000\u0001\n\n\u0000\u0001\n\u0004\u0000\u0001\n\u0005\u0000\u0017\n\u0001\u0000\u001f\n\u0001\u0000\u0128\n\u0002\u0000\u0012\n\u001c\u0000^\n\u0002\u0000\t\n\u0002\u0000\u0007\n\u000e\u0000\u0002\n\u000e\u0000\u0005\n\t\u0000\u0001\n\u008b\u0000\u0001\n\u000b\u0000\u0001\n\u0001\u0000\u0003\n\u0001\u0000\u0001\n\u0001\u0000\u0014\n\u0001\u0000,\n\u0001\u0000\u0008\n\u0002\u0000\u001a\n\f\u0000\u0082\n\n\u00009\n\u0002\u0000\u0002\n\u0002\u0000\u0002\n\u0003\u0000&\n\u0002\u0000\u0002\n7\u0000&\n\u0002\u0000\u0001\n\u0007\u0000\'\nH\u0000\u001b\n\u0005\u0000\u0003\n.\u0000\u001a\n\u0005\u0000\u000b\n\u0015\u0000\n\u0002\u0007\u0000c\n\u0001\u0000\u0001\n\u000f\u0000\u0002\n\t\u0000\n\u0002\u0003\n\u0013\u0000\u0001\n\u0001\u0000\u001b\nS\u0000&\n\u015f\u00005\n\u0003\u0000\u0001\n\u0012\u0000\u0001\n\u0007\u0000\n\n\u0004\u0000\n\u0002\u0015\u0000\u0008\n\u0002\u0000\u0002\n\u0002\u0000\u0016\n\u0001\u0000\u0007\n\u0001\u0000\u0001\n\u0003\u0000\u0004\n\"\u0000\u0002\n\u0001\u0000\u0003\n\u0004\u0000\n\u0002\u0002\n\u0013\u0000\u0006\n\u0004\u0000\u0002\n\u0002\u0000\u0016\n\u0001\u0000\u0007\n\u0001\u0000\u0002\n\u0001\u0000\u0002\n\u0001\u0000\u0002\n\u001f\u0000\u0004\n\u0001\u0000\u0001\n\u0007\u0000\n\u0002\u0002\u0000\u0003\n\u0010\u0000\u0007\n\u0001\u0000\u0001\n\u0001\u0000\u0003\n\u0001\u0000\u0016\n\u0001\u0000\u0007\n\u0001\u0000\u0002\n\u0001\u0000\u0005\n\u0003\u0000\u0001\n\u0012\u0000\u0001\n\u000f\u0000\u0001\n\u0005\u0000\n\u0002\u0015\u0000\u0008\n\u0002\u0000\u0002\n\u0002\u0000\u0016\n\u0001\u0000\u0007\n\u0001\u0000\u0002\n\u0002\u0000\u0004\n\u0003\u0000\u0001\n\u001e\u0000\u0002\n\u0001\u0000\u0003\n\u0004\u0000\n\u0002\u0015\u0000\u0006\n\u0003\u0000\u0003\n\u0001\u0000\u0004\n\u0003\u0000\u0002\n\u0001\u0000\u0001\n\u0001\u0000\u0002\n\u0003\u0000\u0002\n\u0003\u0000\u0003\n\u0003\u0000\u0008\n\u0001\u0000\u0003\n-\u0000\t\u0002\u0015\u0000\u0008\n\u0001\u0000\u0003\n\u0001\u0000\u0017\n\u0001\u0000\n\n\u0001\u0000\u0005\n&\u0000\u0002\n\u0004\u0000\n\u0002\u0015\u0000\u0008\n\u0001\u0000\u0003\n\u0001\u0000\u0017\n\u0001\u0000\n\n\u0001\u0000\u0005\n$\u0000\u0001\n\u0001\u0000\u0002\n\u0004\u0000\n\u0002\u0015\u0000\u0008\n\u0001\u0000\u0003\n\u0001\u0000\u0017\n\u0001\u0000\u0010\n&\u0000\u0002\n\u0004\u0000\n\u0002\u0015\u0000\u0012\n\u0003\u0000\u0018\n\u0001\u0000\t\n\u0001\u0000\u0001\n\u0002\u0000\u0007\n9\u0000\u0001\u00010\n\u0001\u0001\u0002\n\f\u0001\u0007\n\t\u0001\n\u0002\'\u0000\u0002\n\u0001\u0000\u0001\n\u0002\u0000\u0002\n\u0001\u0000\u0001\n\u0002\u0000\u0001\n\u0006\u0000\u0004\n\u0001\u0000\u0007\n\u0001\u0000\u0003\n\u0001\u0000\u0001\n\u0001\u0000\u0001\n\u0002\u0000\u0002\n\u0001\u0000\u0004\n\u0001\u0000\u0002\n\t\u0000\u0001\n\u0002\u0000\u0005\n\u0001\u0000\u0001\n\t\u0000\n\u0002\u0002\u0000\u0002\n\"\u0000\u0001\n\u001f\u0000\n\u0002\u0016\u0000\u0008\n\u0001\u0000\"\n\u001d\u0000\u0004\nt\u0000\"\n\u0001\u0000\u0005\n\u0001\u0000\u0002\n\u0015\u0000\n\u0002\u0006\u0000\u0006\nJ\u0000&\n\n\u0000\'\n\t\u0000Z\n\u0005\u0000D\n\u0005\u0000R\n\u0006\u0000\u0007\n\u0001\u0000?\n\u0001\u0000\u0001\n\u0001\u0000\u0004\n\u0002\u0000\u0007\n\u0001\u0000\u0001\n\u0001\u0000\u0004\n\u0002\u0000\'\n\u0001\u0000\u0001\n\u0001\u0000\u0004\n\u0002\u0000\u001f\n\u0001\u0000\u0001\n\u0001\u0000\u0004\n\u0002\u0000\u0007\n\u0001\u0000\u0001\n\u0001\u0000\u0004\n\u0002\u0000\u0007\n\u0001\u0000\u0007\n\u0001\u0000\u0017\n\u0001\u0000\u001f\n\u0001\u0000\u0001\n\u0001\u0000\u0004\n\u0002\u0000\u0007\n\u0001\u0000\'\n\u0001\u0000\u0013\n\u000e\u0000\t\u0002.\u0000U\n\f\u0000\u026c\n\u0002\u0000\u0008\n\n\u0000\u001a\n\u0005\u0000K\n\u0095\u00004\n,\u0000\n\u0002&\u0000\n\u0002\u0006\u0000X\n\u0008\u0000)\n\u0557\u0000\u009c\n\u0004\u0000Z\n\u0006\u0000\u0016\n\u0002\u0000\u0006\n\u0002\u0000&\n\u0002\u0000\u0006\n\u0002\u0000\u0008\n\u0001\u0000\u0001\n\u0001\u0000\u0001\n\u0001\u0000\u0001\n\u0001\u0000\u001f\n\u0002\u00005\n\u0001\u0000\u0007\n\u0001\u0000\u0001\n\u0003\u0000\u0003\n\u0001\u0000\u0007\n\u0003\u0000\u0004\n\u0002\u0000\u0006\n\u0004\u0000\r\n\u0005\u0000\u0003\n\u0001\u0000\u0007\n\u0082\u0000\u0001\n\u0082\u0000\u0001\n\u0004\u0000\u0001\n\u0002\u0000\n\n\u0001\u0000\u0001\n\u0003\u0000\u0005\n\u0006\u0000\u0001\n\u0001\u0000\u0001\n\u0001\u0000\u0001\n\u0001\u0000\u0004\n\u0001\u0000\u0003\n\u0001\u0000\u0007\n\u0ecb\u0000\u0002\n*\u0000\u0005\n\n\u0000\u0001\u000bT\u000b\u0008\u000b\u0002\u000b\u0002\u000bZ\u000b\u0001\u000b\u0003\u000b\u0006\u000b(\u000b\u0003\u000b\u0001\u0000^\n\u0011\u0000\u0018\n8\u0000\u0010\u000b\u0100\u0000\u0080\u000b\u0080\u0000\u19b6\u000b\n\u000b@\u0000\u51a6\u000bZ\u000b\u048d\n\u0773\u0000\u2ba4\n\u215c\u0000\u012e\u000b\u00d2\u000b\u0007\n\f\u0000\u0005\n\u0005\u0000\u0001\n\u0001\u0000\n\n\u0001\u0000\r\n\u0001\u0000\u0005\n\u0001\u0000\u0001\n\u0001\u0000\u0002\n\u0001\u0000\u0002\n\u0001\u0000l\n!\u0000\u016b\n\u0012\u0000@\n\u0002\u00006\n(\u0000\f\nt\u0000\u0003\n\u0001\u0000\u0001\n\u0001\u0000\u0087\n\u0013\u0000\n\u0002\u0007\u0000\u001a\n\u0006\u0000\u001a\n\n\u0000\u0001\u000b:\u000b\u001f\n\u0003\u0000\u0006\n\u0002\u0000\u0006\n\u0002\u0000\u0006\n\u0002\u0000\u0003\n#\u0000";

        <org.apache.lucene.analysis.standard.ClassicTokenizerImpl: int YYINITIAL> = 0;

        <org.apache.lucene.analysis.standard.ClassicTokenizerImpl: int ZZ_BUFFERSIZE> = 4096;

        <org.apache.lucene.analysis.standard.ClassicTokenizerImpl: int YYEOF> = -1;

        $r0 = newarray (int)[2];

        $r0[0] = 0;

        $r0[1] = 0;

        <org.apache.lucene.analysis.standard.ClassicTokenizerImpl: int[] ZZ_LEXSTATE> = $r0;

        $r1 = staticinvoke <org.apache.lucene.analysis.standard.ClassicTokenizerImpl: char[] zzUnpackCMap(java.lang.String)>("\t\u0000\u0001\u0000\u0001\r\u0001\u0000\u0001\u0000\u0001\f\u0012\u0000\u0001\u0000\u0005\u0000\u0001\u0005\u0001\u0003\u0004\u0000\u0001\t\u0001\u0007\u0001\u0004\u0001\t\n\u0002\u0006\u0000\u0001\u0006\u001a\n\u0004\u0000\u0001\u0008\u0001\u0000\u001a\n/\u0000\u0001\n\n\u0000\u0001\n\u0004\u0000\u0001\n\u0005\u0000\u0017\n\u0001\u0000\u001f\n\u0001\u0000\u0128\n\u0002\u0000\u0012\n\u001c\u0000^\n\u0002\u0000\t\n\u0002\u0000\u0007\n\u000e\u0000\u0002\n\u000e\u0000\u0005\n\t\u0000\u0001\n\u008b\u0000\u0001\n\u000b\u0000\u0001\n\u0001\u0000\u0003\n\u0001\u0000\u0001\n\u0001\u0000\u0014\n\u0001\u0000,\n\u0001\u0000\u0008\n\u0002\u0000\u001a\n\f\u0000\u0082\n\n\u00009\n\u0002\u0000\u0002\n\u0002\u0000\u0002\n\u0003\u0000&\n\u0002\u0000\u0002\n7\u0000&\n\u0002\u0000\u0001\n\u0007\u0000\'\nH\u0000\u001b\n\u0005\u0000\u0003\n.\u0000\u001a\n\u0005\u0000\u000b\n\u0015\u0000\n\u0002\u0007\u0000c\n\u0001\u0000\u0001\n\u000f\u0000\u0002\n\t\u0000\n\u0002\u0003\n\u0013\u0000\u0001\n\u0001\u0000\u001b\nS\u0000&\n\u015f\u00005\n\u0003\u0000\u0001\n\u0012\u0000\u0001\n\u0007\u0000\n\n\u0004\u0000\n\u0002\u0015\u0000\u0008\n\u0002\u0000\u0002\n\u0002\u0000\u0016\n\u0001\u0000\u0007\n\u0001\u0000\u0001\n\u0003\u0000\u0004\n\"\u0000\u0002\n\u0001\u0000\u0003\n\u0004\u0000\n\u0002\u0002\n\u0013\u0000\u0006\n\u0004\u0000\u0002\n\u0002\u0000\u0016\n\u0001\u0000\u0007\n\u0001\u0000\u0002\n\u0001\u0000\u0002\n\u0001\u0000\u0002\n\u001f\u0000\u0004\n\u0001\u0000\u0001\n\u0007\u0000\n\u0002\u0002\u0000\u0003\n\u0010\u0000\u0007\n\u0001\u0000\u0001\n\u0001\u0000\u0003\n\u0001\u0000\u0016\n\u0001\u0000\u0007\n\u0001\u0000\u0002\n\u0001\u0000\u0005\n\u0003\u0000\u0001\n\u0012\u0000\u0001\n\u000f\u0000\u0001\n\u0005\u0000\n\u0002\u0015\u0000\u0008\n\u0002\u0000\u0002\n\u0002\u0000\u0016\n\u0001\u0000\u0007\n\u0001\u0000\u0002\n\u0002\u0000\u0004\n\u0003\u0000\u0001\n\u001e\u0000\u0002\n\u0001\u0000\u0003\n\u0004\u0000\n\u0002\u0015\u0000\u0006\n\u0003\u0000\u0003\n\u0001\u0000\u0004\n\u0003\u0000\u0002\n\u0001\u0000\u0001\n\u0001\u0000\u0002\n\u0003\u0000\u0002\n\u0003\u0000\u0003\n\u0003\u0000\u0008\n\u0001\u0000\u0003\n-\u0000\t\u0002\u0015\u0000\u0008\n\u0001\u0000\u0003\n\u0001\u0000\u0017\n\u0001\u0000\n\n\u0001\u0000\u0005\n&\u0000\u0002\n\u0004\u0000\n\u0002\u0015\u0000\u0008\n\u0001\u0000\u0003\n\u0001\u0000\u0017\n\u0001\u0000\n\n\u0001\u0000\u0005\n$\u0000\u0001\n\u0001\u0000\u0002\n\u0004\u0000\n\u0002\u0015\u0000\u0008\n\u0001\u0000\u0003\n\u0001\u0000\u0017\n\u0001\u0000\u0010\n&\u0000\u0002\n\u0004\u0000\n\u0002\u0015\u0000\u0012\n\u0003\u0000\u0018\n\u0001\u0000\t\n\u0001\u0000\u0001\n\u0002\u0000\u0007\n9\u0000\u0001\u00010\n\u0001\u0001\u0002\n\f\u0001\u0007\n\t\u0001\n\u0002\'\u0000\u0002\n\u0001\u0000\u0001\n\u0002\u0000\u0002\n\u0001\u0000\u0001\n\u0002\u0000\u0001\n\u0006\u0000\u0004\n\u0001\u0000\u0007\n\u0001\u0000\u0003\n\u0001\u0000\u0001\n\u0001\u0000\u0001\n\u0002\u0000\u0002\n\u0001\u0000\u0004\n\u0001\u0000\u0002\n\t\u0000\u0001\n\u0002\u0000\u0005\n\u0001\u0000\u0001\n\t\u0000\n\u0002\u0002\u0000\u0002\n\"\u0000\u0001\n\u001f\u0000\n\u0002\u0016\u0000\u0008\n\u0001\u0000\"\n\u001d\u0000\u0004\nt\u0000\"\n\u0001\u0000\u0005\n\u0001\u0000\u0002\n\u0015\u0000\n\u0002\u0006\u0000\u0006\nJ\u0000&\n\n\u0000\'\n\t\u0000Z\n\u0005\u0000D\n\u0005\u0000R\n\u0006\u0000\u0007\n\u0001\u0000?\n\u0001\u0000\u0001\n\u0001\u0000\u0004\n\u0002\u0000\u0007\n\u0001\u0000\u0001\n\u0001\u0000\u0004\n\u0002\u0000\'\n\u0001\u0000\u0001\n\u0001\u0000\u0004\n\u0002\u0000\u001f\n\u0001\u0000\u0001\n\u0001\u0000\u0004\n\u0002\u0000\u0007\n\u0001\u0000\u0001\n\u0001\u0000\u0004\n\u0002\u0000\u0007\n\u0001\u0000\u0007\n\u0001\u0000\u0017\n\u0001\u0000\u001f\n\u0001\u0000\u0001\n\u0001\u0000\u0004\n\u0002\u0000\u0007\n\u0001\u0000\'\n\u0001\u0000\u0013\n\u000e\u0000\t\u0002.\u0000U\n\f\u0000\u026c\n\u0002\u0000\u0008\n\n\u0000\u001a\n\u0005\u0000K\n\u0095\u00004\n,\u0000\n\u0002&\u0000\n\u0002\u0006\u0000X\n\u0008\u0000)\n\u0557\u0000\u009c\n\u0004\u0000Z\n\u0006\u0000\u0016\n\u0002\u0000\u0006\n\u0002\u0000&\n\u0002\u0000\u0006\n\u0002\u0000\u0008\n\u0001\u0000\u0001\n\u0001\u0000\u0001\n\u0001\u0000\u0001\n\u0001\u0000\u001f\n\u0002\u00005\n\u0001\u0000\u0007\n\u0001\u0000\u0001\n\u0003\u0000\u0003\n\u0001\u0000\u0007\n\u0003\u0000\u0004\n\u0002\u0000\u0006\n\u0004\u0000\r\n\u0005\u0000\u0003\n\u0001\u0000\u0007\n\u0082\u0000\u0001\n\u0082\u0000\u0001\n\u0004\u0000\u0001\n\u0002\u0000\n\n\u0001\u0000\u0001\n\u0003\u0000\u0005\n\u0006\u0000\u0001\n\u0001\u0000\u0001\n\u0001\u0000\u0001\n\u0001\u0000\u0004\n\u0001\u0000\u0003\n\u0001\u0000\u0007\n\u0ecb\u0000\u0002\n*\u0000\u0005\n\n\u0000\u0001\u000bT\u000b\u0008\u000b\u0002\u000b\u0002\u000bZ\u000b\u0001\u000b\u0003\u000b\u0006\u000b(\u000b\u0003\u000b\u0001\u0000^\n\u0011\u0000\u0018\n8\u0000\u0010\u000b\u0100\u0000\u0080\u000b\u0080\u0000\u19b6\u000b\n\u000b@\u0000\u51a6\u000bZ\u000b\u048d\n\u0773\u0000\u2ba4\n\u215c\u0000\u012e\u000b\u00d2\u000b\u0007\n\f\u0000\u0005\n\u0005\u0000\u0001\n\u0001\u0000\n\n\u0001\u0000\r\n\u0001\u0000\u0005\n\u0001\u0000\u0001\n\u0001\u0000\u0002\n\u0001\u0000\u0002\n\u0001\u0000l\n!\u0000\u016b\n\u0012\u0000@\n\u0002\u00006\n(\u0000\f\nt\u0000\u0003\n\u0001\u0000\u0001\n\u0001\u0000\u0087\n\u0013\u0000\n\u0002\u0007\u0000\u001a\n\u0006\u0000\u001a\n\n\u0000\u0001\u000b:\u000b\u001f\n\u0003\u0000\u0006\n\u0002\u0000\u0006\n\u0002\u0000\u0006\n\u0002\u0000\u0003\n#\u0000");

        <org.apache.lucene.analysis.standard.ClassicTokenizerImpl: char[] ZZ_CMAP> = $r1;

        $r2 = staticinvoke <org.apache.lucene.analysis.standard.ClassicTokenizerImpl: int[] zzUnpackAction()>();

        <org.apache.lucene.analysis.standard.ClassicTokenizerImpl: int[] ZZ_ACTION> = $r2;

        $r3 = staticinvoke <org.apache.lucene.analysis.standard.ClassicTokenizerImpl: int[] zzUnpackRowMap()>();

        <org.apache.lucene.analysis.standard.ClassicTokenizerImpl: int[] ZZ_ROWMAP> = $r3;

        $r4 = staticinvoke <org.apache.lucene.analysis.standard.ClassicTokenizerImpl: int[] zzUnpackTrans()>();

        <org.apache.lucene.analysis.standard.ClassicTokenizerImpl: int[] ZZ_TRANS> = $r4;

        $r5 = newarray (java.lang.String)[3];

        $r5[0] = "Unkown internal scanner error";

        $r5[1] = "Error: could not match input";

        $r5[2] = "Error: pushback value was too large";

        <org.apache.lucene.analysis.standard.ClassicTokenizerImpl: java.lang.String[] ZZ_ERROR_MSG> = $r5;

        $r6 = staticinvoke <org.apache.lucene.analysis.standard.ClassicTokenizerImpl: int[] zzUnpackAttribute()>();

        <org.apache.lucene.analysis.standard.ClassicTokenizerImpl: int[] ZZ_ATTRIBUTE> = $r6;

        $r7 = <org.apache.lucene.analysis.standard.StandardTokenizer: java.lang.String[] TOKEN_TYPES>;

        <org.apache.lucene.analysis.standard.ClassicTokenizerImpl: java.lang.String[] TOKEN_TYPES> = $r7;

        return;
    }
}
