class org.joda.time.convert.ReadablePartialConverter extends org.joda.time.convert.AbstractConverter implements org.joda.time.convert.PartialConverter
{
    static final org.joda.time.convert.ReadablePartialConverter INSTANCE;
    static java.lang.Class class$org$joda$time$ReadablePartial;

    protected void <init>()
    {
        org.joda.time.convert.ReadablePartialConverter r0;

        r0 := @this: org.joda.time.convert.ReadablePartialConverter;

        specialinvoke r0.<org.joda.time.convert.AbstractConverter: void <init>()>();

        return;
    }

    public org.joda.time.Chronology getChronology(java.lang.Object, org.joda.time.DateTimeZone)
    {
        org.joda.time.DateTimeZone r3;
        org.joda.time.Chronology $r2, $r4;
        java.lang.Object r1;
        org.joda.time.convert.ReadablePartialConverter r0;

        r0 := @this: org.joda.time.convert.ReadablePartialConverter;

        r1 := @parameter0: java.lang.Object;

        r3 := @parameter1: org.joda.time.DateTimeZone;

        $r2 = virtualinvoke r0.<org.joda.time.convert.ReadablePartialConverter: org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.Chronology)>(r1, null);

        $r4 = virtualinvoke $r2.<org.joda.time.Chronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>(r3);

        return $r4;
    }

    public org.joda.time.Chronology getChronology(java.lang.Object, org.joda.time.Chronology)
    {
        org.joda.time.ReadablePartial $r1;
        org.joda.time.Chronology $r2, r4;
        java.lang.Object r0;
        org.joda.time.convert.ReadablePartialConverter r3;

        r3 := @this: org.joda.time.convert.ReadablePartialConverter;

        r0 := @parameter0: java.lang.Object;

        r4 := @parameter1: org.joda.time.Chronology;

        if r4 != null goto label1;

        $r1 = (org.joda.time.ReadablePartial) r0;

        $r2 = interfaceinvoke $r1.<org.joda.time.ReadablePartial: org.joda.time.Chronology getChronology()>();

        r4 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>($r2);

     label1:
        return r4;
    }

    public int[] getPartialValues(org.joda.time.ReadablePartial, java.lang.Object, org.joda.time.Chronology)
    {
        org.joda.time.Chronology r4;
        org.joda.time.convert.ReadablePartialConverter r6;
        int[] r3;
        org.joda.time.ReadablePartial r1, r2;
        int $i0, $i1, i2;
        java.lang.Object r0;
        org.joda.time.DateTimeFieldType $r5;

        r6 := @this: org.joda.time.convert.ReadablePartialConverter;

        r2 := @parameter0: org.joda.time.ReadablePartial;

        r0 := @parameter1: java.lang.Object;

        r4 := @parameter2: org.joda.time.Chronology;

        r1 = (org.joda.time.ReadablePartial) r0;

        $i0 = interfaceinvoke r2.<org.joda.time.ReadablePartial: int size()>();

        r3 = newarray (int)[$i0];

        i2 = 0;

     label1:
        if i2 >= $i0 goto label2;

        $r5 = interfaceinvoke r2.<org.joda.time.ReadablePartial: org.joda.time.DateTimeFieldType getFieldType(int)>(i2);

        $i1 = interfaceinvoke r1.<org.joda.time.ReadablePartial: int get(org.joda.time.DateTimeFieldType)>($r5);

        r3[i2] = $i1;

        i2 = i2 + 1;

        goto label1;

     label2:
        virtualinvoke r4.<org.joda.time.Chronology: void validate(org.joda.time.ReadablePartial,int[])>(r2, r3);

        return r3;
    }

    public java.lang.Class getSupportedType()
    {
        java.lang.Class $r0, $r2;
        org.joda.time.convert.ReadablePartialConverter r1;

        r1 := @this: org.joda.time.convert.ReadablePartialConverter;

        $r0 = <org.joda.time.convert.ReadablePartialConverter: java.lang.Class class$org$joda$time$ReadablePartial>;

        if $r0 != null goto label1;

        $r2 = staticinvoke <org.joda.time.convert.ReadablePartialConverter: java.lang.Class class$(java.lang.String)>("org.joda.time.ReadablePartial");

        <org.joda.time.convert.ReadablePartialConverter: java.lang.Class class$org$joda$time$ReadablePartial> = $r2;

        goto label2;

     label1:
        $r2 = <org.joda.time.convert.ReadablePartialConverter: java.lang.Class class$org$joda$time$ReadablePartial>;

     label2:
        return $r2;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0, $r4;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        $r4 = virtualinvoke $r2.<java.lang.ClassNotFoundException: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r4);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        org.joda.time.convert.ReadablePartialConverter $r0;

        $r0 = new org.joda.time.convert.ReadablePartialConverter;

        specialinvoke $r0.<org.joda.time.convert.ReadablePartialConverter: void <init>()>();

        <org.joda.time.convert.ReadablePartialConverter: org.joda.time.convert.ReadablePartialConverter INSTANCE> = $r0;

        return;
    }
}
