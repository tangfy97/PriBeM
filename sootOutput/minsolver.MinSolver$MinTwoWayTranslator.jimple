public class minsolver.MinSolver$MinTwoWayTranslator extends java.lang.Object
{

    public void <init>()
    {
        minsolver.MinSolver$MinTwoWayTranslator r0;

        r0 := @this: minsolver.MinSolver$MinTwoWayTranslator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static java.util.Map buildVarToRelationMap(minsolver.fol2sat.MinTranslation, kodkod.instance.Bounds)
    {
        java.util.Iterator $r3;
        kodkod.util.ints.IntSet $r7;
        java.util.Set $r2;
        java.util.HashMap $r0;
        minsolver.fol2sat.MinTranslation r6;
        java.lang.Integer $r9;
        kodkod.util.ints.IntIterator $r8;
        kodkod.instance.Bounds r1;
        int $i0;
        java.lang.Object $r4;
        kodkod.ast.Relation r5;
        boolean $z0, $z1;

        r6 := @parameter0: minsolver.fol2sat.MinTranslation;

        r1 := @parameter1: kodkod.instance.Bounds;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        $r2 = virtualinvoke r1.<kodkod.instance.Bounds: java.util.Set relations()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

        goto label5;

     label1:
        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (kodkod.ast.Relation) $r4;

        $r7 = virtualinvoke r6.<minsolver.fol2sat.MinTranslation: kodkod.util.ints.IntSet primaryVariables(kodkod.ast.Relation)>(r5);

        if $r7 != null goto label2;

        goto label5;

     label2:
        $r8 = interfaceinvoke $r7.<kodkod.util.ints.IntSet: kodkod.util.ints.IntIterator iterator()>();

        goto label4;

     label3:
        $i0 = interfaceinvoke $r8.<kodkod.util.ints.IntIterator: int next()>();

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, r5);

     label4:
        $z0 = interfaceinvoke $r8.<kodkod.util.ints.IntIterator: boolean hasNext()>();

        if $z0 != 0 goto label3;

     label5:
        $z1 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label1;

        return $r0;
    }

    private static java.lang.String printTranslation(minsolver.fol2sat.MinTranslation, kodkod.instance.Bounds, java.util.Map)
    {
        minsolver.fol2sat.MinTranslation r0;
        java.lang.Integer $r2;
        kodkod.instance.Bounds r6;
        java.util.Map r1;
        int $i0, i1, $i2;
        java.lang.String $r9, $r16, $r18, r20;
        kodkod.instance.Tuple $r7;
        kodkod.util.ints.IntSet $r5;
        java.lang.Object $r3;
        java.lang.StringBuilder $r8, $r10, $r11, $r12, $r13, $r14, $r15, $r17, $r19;
        kodkod.ast.Relation r4;

        r0 := @parameter0: minsolver.fol2sat.MinTranslation;

        r6 := @parameter1: kodkod.instance.Bounds;

        r1 := @parameter2: java.util.Map;

        r20 = "";

        i1 = 1;

        goto label3;

     label1:
        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r3 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r2);

        r4 = (kodkod.ast.Relation) $r3;

        $r5 = virtualinvoke r0.<minsolver.fol2sat.MinTranslation: kodkod.util.ints.IntSet primaryVariables(kodkod.ast.Relation)>(r4);

        $r7 = staticinvoke <minsolver.MinSolver$MinTwoWayTranslator: kodkod.instance.Tuple getTupleForPropVariable(kodkod.instance.Bounds,minsolver.fol2sat.MinTranslation,kodkod.util.ints.IntSet,kodkod.ast.Relation,int)>(r6, r0, $r5, r4, i1);

        $r8 = new java.lang.StringBuilder;

        $r9 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r20);

        specialinvoke $r8.<java.lang.StringBuilder: void <init>(java.lang.String)>($r9);

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" | ");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        r20 = $r16;

        $i0 = i1 % 4;

        if $i0 != 0 goto label2;

        $r17 = new java.lang.StringBuilder;

        $r18 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r16);

        specialinvoke $r17.<java.lang.StringBuilder: void <init>(java.lang.String)>($r18);

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

     label2:
        i1 = i1 + 1;

     label3:
        $i2 = virtualinvoke r0.<minsolver.fol2sat.MinTranslation: int numPrimaryVariables()>();

        if i1 <= $i2 goto label1;

        return r20;
    }

    private static kodkod.instance.Instance translatePropositions(minsolver.fol2sat.MinTranslation, kodkod.instance.Bounds, java.util.Map, int[])
    {
        java.util.Map$Entry $r6;
        minsolver.fol2sat.MinTranslation r4;
        kodkod.instance.Instance $r0;
        kodkod.instance.Bounds r1;
        int[] r3;
        java.util.Map r5;
        int $i0, i1, $i2;
        java.lang.Object $r7, $r9;
        kodkod.instance.Universe $r2;
        kodkod.ast.Relation r8;
        kodkod.instance.TupleSet r10, $r11;

        r4 := @parameter0: minsolver.fol2sat.MinTranslation;

        r1 := @parameter1: kodkod.instance.Bounds;

        r5 := @parameter2: java.util.Map;

        r3 := @parameter3: int[];

        $r0 = new kodkod.instance.Instance;

        $r2 = virtualinvoke r1.<kodkod.instance.Bounds: kodkod.instance.Universe universe()>();

        specialinvoke $r0.<kodkod.instance.Instance: void <init>(kodkod.instance.Universe)>($r2);

        i1 = 0;

        goto label3;

     label1:
        $i0 = r3[i1];

        $r6 = staticinvoke <minsolver.MinSolver$MinTwoWayTranslator: java.util.Map$Entry translateProposition(minsolver.fol2sat.MinTranslation,kodkod.instance.Bounds,java.util.Map,int)>(r4, r1, r5, $i0);

        $r7 = interfaceinvoke $r6.<java.util.Map$Entry: java.lang.Object getKey()>();

        r8 = (kodkod.ast.Relation) $r7;

        $r9 = interfaceinvoke $r6.<java.util.Map$Entry: java.lang.Object getValue()>();

        r10 = (kodkod.instance.TupleSet) $r9;

        $r11 = virtualinvoke $r0.<kodkod.instance.Instance: kodkod.instance.TupleSet tuples(kodkod.ast.Relation)>(r8);

        if $r11 == null goto label2;

        virtualinvoke r10.<kodkod.instance.TupleSet: boolean addAll(java.util.Collection)>($r11);

     label2:
        virtualinvoke $r0.<kodkod.instance.Instance: void add(kodkod.ast.Relation,kodkod.instance.TupleSet)>(r8, r10);

        i1 = i1 + 1;

     label3:
        $i2 = lengthof r3;

        if i1 < $i2 goto label1;

        return $r0;
    }

    private static java.util.Map$Entry translateProposition(minsolver.fol2sat.MinTranslation, kodkod.instance.Bounds, java.util.Map, int)
    {
        kodkod.instance.Tuple $r7;
        kodkod.util.ints.IntSet $r5;
        minsolver.fol2sat.MinTranslation r4;
        java.lang.Integer $r1;
        kodkod.instance.Tuple[] $r10;
        kodkod.instance.Bounds r6;
        java.util.Map r0;
        java.util.AbstractMap$SimpleEntry $r12;
        int i0;
        java.lang.Object $r2;
        kodkod.instance.Universe $r8;
        kodkod.ast.Relation r3;
        kodkod.instance.TupleFactory $r9;
        kodkod.instance.TupleSet $r11;

        r4 := @parameter0: minsolver.fol2sat.MinTranslation;

        r6 := @parameter1: kodkod.instance.Bounds;

        r0 := @parameter2: java.util.Map;

        i0 := @parameter3: int;

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r2 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        r3 = (kodkod.ast.Relation) $r2;

        $r5 = virtualinvoke r4.<minsolver.fol2sat.MinTranslation: kodkod.util.ints.IntSet primaryVariables(kodkod.ast.Relation)>(r3);

        $r7 = staticinvoke <minsolver.MinSolver$MinTwoWayTranslator: kodkod.instance.Tuple getTupleForPropVariable(kodkod.instance.Bounds,minsolver.fol2sat.MinTranslation,kodkod.util.ints.IntSet,kodkod.ast.Relation,int)>(r6, r4, $r5, r3, i0);

        $r8 = virtualinvoke r6.<kodkod.instance.Bounds: kodkod.instance.Universe universe()>();

        $r9 = virtualinvoke $r8.<kodkod.instance.Universe: kodkod.instance.TupleFactory factory()>();

        $r10 = newarray (kodkod.instance.Tuple)[0];

        $r11 = virtualinvoke $r9.<kodkod.instance.TupleFactory: kodkod.instance.TupleSet setOf(kodkod.instance.Tuple,kodkod.instance.Tuple[])>($r7, $r10);

        $r12 = new java.util.AbstractMap$SimpleEntry;

        specialinvoke $r12.<java.util.AbstractMap$SimpleEntry: void <init>(java.lang.Object,java.lang.Object)>(r3, $r11);

        return $r12;
    }

    private static kodkod.instance.Tuple getTupleForPropVariable(kodkod.instance.Bounds, minsolver.fol2sat.MinTranslation, kodkod.util.ints.IntSet, kodkod.ast.Relation, int)
    {
        kodkod.instance.Tuple $r8;
        kodkod.util.ints.IntSet r0, $r4;
        minsolver.fol2sat.MinTranslation r9;
        kodkod.instance.Bounds r1;
        int[] $r5;
        int $i0, i1, i2, $i3, $i4;
        kodkod.instance.Universe $r6;
        kodkod.ast.Relation r2;
        kodkod.instance.TupleFactory $r7;
        kodkod.instance.TupleSet $r3;

        r1 := @parameter0: kodkod.instance.Bounds;

        r9 := @parameter1: minsolver.fol2sat.MinTranslation;

        r0 := @parameter2: kodkod.util.ints.IntSet;

        r2 := @parameter3: kodkod.ast.Relation;

        i1 := @parameter4: int;

        $i0 = interfaceinvoke r0.<kodkod.util.ints.IntSet: int min()>();

        i2 = i1 - $i0;

        $r3 = virtualinvoke r1.<kodkod.instance.Bounds: kodkod.instance.TupleSet upperBound(kodkod.ast.Relation)>(r2);

        $r4 = virtualinvoke $r3.<kodkod.instance.TupleSet: kodkod.util.ints.IntSet indexView()>();

        $r5 = interfaceinvoke $r4.<kodkod.util.ints.IntSet: int[] toArray()>();

        $r6 = virtualinvoke r1.<kodkod.instance.Bounds: kodkod.instance.Universe universe()>();

        $r7 = virtualinvoke $r6.<kodkod.instance.Universe: kodkod.instance.TupleFactory factory()>();

        $i3 = virtualinvoke r2.<kodkod.ast.Relation: int arity()>();

        $i4 = $r5[i2];

        $r8 = virtualinvoke $r7.<kodkod.instance.TupleFactory: kodkod.instance.Tuple tuple(int,int)>($i3, $i4);

        return $r8;
    }

    private static int getPropVariableForTuple(kodkod.instance.Bounds, minsolver.fol2sat.MinTranslation, kodkod.ast.Relation, kodkod.instance.Tuple)
    {
        minsolver.fol2sat.MinTranslation r0;
        kodkod.instance.Bounds r3;
        int[] $r6;
        int $i0, $i1, $i2, $i3, i4, i5, $i6, $i8, $i10, $i12, $i14, $i16;
        kodkod.instance.Universe $r7;
        kodkod.instance.TupleFactory $r8;
        kodkod.instance.TupleSet $r4;
        boolean $z0;
        kodkod.instance.Tuple r9, $r10;
        kodkod.util.ints.IntSet $r2, $r5;
        kodkod.ast.Relation r1;

        r3 := @parameter0: kodkod.instance.Bounds;

        r0 := @parameter1: minsolver.fol2sat.MinTranslation;

        r1 := @parameter2: kodkod.ast.Relation;

        r9 := @parameter3: kodkod.instance.Tuple;

        $r2 = virtualinvoke r0.<minsolver.fol2sat.MinTranslation: kodkod.util.ints.IntSet primaryVariables(kodkod.ast.Relation)>(r1);

        if $r2 != null goto label1;

        $i8 = (int) -1;

        return $i8;

     label1:
        $r4 = virtualinvoke r3.<kodkod.instance.Bounds: kodkod.instance.TupleSet upperBound(kodkod.ast.Relation)>(r1);

        if $r4 != null goto label2;

        $i10 = (int) -1;

        return $i10;

     label2:
        $r5 = virtualinvoke $r4.<kodkod.instance.TupleSet: kodkod.util.ints.IntSet indexView()>();

        $r6 = interfaceinvoke $r5.<kodkod.util.ints.IntSet: int[] toArray()>();

        $r7 = virtualinvoke r3.<kodkod.instance.Bounds: kodkod.instance.Universe universe()>();

        $r8 = virtualinvoke $r7.<kodkod.instance.Universe: kodkod.instance.TupleFactory factory()>();

        $i12 = (int) -1;

        i4 = $i12;

        i5 = 0;

        goto label5;

     label3:
        $i0 = virtualinvoke r1.<kodkod.ast.Relation: int arity()>();

        $i1 = $r6[i5];

        $r10 = virtualinvoke $r8.<kodkod.instance.TupleFactory: kodkod.instance.Tuple tuple(int,int)>($i0, $i1);

        $z0 = virtualinvoke r9.<kodkod.instance.Tuple: boolean equals(java.lang.Object)>($r10);

        if $z0 == 0 goto label4;

        i4 = i5;

     label4:
        i5 = i5 + 1;

     label5:
        $i6 = lengthof $r6;

        if i5 < $i6 goto label3;

        $i14 = (int) -1;

        if i4 != $i14 goto label6;

        $i16 = (int) -1;

        return $i16;

     label6:
        $i2 = interfaceinvoke $r2.<kodkod.util.ints.IntSet: int min()>();

        $i3 = $i2 + i4;

        return $i3;
    }

    static java.util.Map access$0(minsolver.fol2sat.MinTranslation, kodkod.instance.Bounds)
    {
        minsolver.fol2sat.MinTranslation r0;
        kodkod.instance.Bounds r1;
        java.util.Map $r2;

        r0 := @parameter0: minsolver.fol2sat.MinTranslation;

        r1 := @parameter1: kodkod.instance.Bounds;

        $r2 = staticinvoke <minsolver.MinSolver$MinTwoWayTranslator: java.util.Map buildVarToRelationMap(minsolver.fol2sat.MinTranslation,kodkod.instance.Bounds)>(r0, r1);

        return $r2;
    }

    static java.util.Map$Entry access$1(minsolver.fol2sat.MinTranslation, kodkod.instance.Bounds, java.util.Map, int)
    {
        java.util.Map$Entry $r3;
        kodkod.instance.Bounds r1;
        java.util.Map r2;
        int i0;
        minsolver.fol2sat.MinTranslation r0;

        r0 := @parameter0: minsolver.fol2sat.MinTranslation;

        r1 := @parameter1: kodkod.instance.Bounds;

        r2 := @parameter2: java.util.Map;

        i0 := @parameter3: int;

        $r3 = staticinvoke <minsolver.MinSolver$MinTwoWayTranslator: java.util.Map$Entry translateProposition(minsolver.fol2sat.MinTranslation,kodkod.instance.Bounds,java.util.Map,int)>(r0, r1, r2, i0);

        return $r3;
    }

    static int access$2(kodkod.instance.Bounds, minsolver.fol2sat.MinTranslation, kodkod.ast.Relation, kodkod.instance.Tuple)
    {
        kodkod.instance.Bounds r0;
        kodkod.instance.Tuple r3;
        int $i0;
        minsolver.fol2sat.MinTranslation r1;
        kodkod.ast.Relation r2;

        r0 := @parameter0: kodkod.instance.Bounds;

        r1 := @parameter1: minsolver.fol2sat.MinTranslation;

        r2 := @parameter2: kodkod.ast.Relation;

        r3 := @parameter3: kodkod.instance.Tuple;

        $i0 = staticinvoke <minsolver.MinSolver$MinTwoWayTranslator: int getPropVariableForTuple(kodkod.instance.Bounds,minsolver.fol2sat.MinTranslation,kodkod.ast.Relation,kodkod.instance.Tuple)>(r0, r1, r2, r3);

        return $i0;
    }

    static kodkod.instance.Instance access$3(minsolver.fol2sat.MinTranslation, kodkod.instance.Bounds, java.util.Map, int[])
    {
        kodkod.instance.Instance $r4;
        kodkod.instance.Bounds r1;
        int[] r3;
        java.util.Map r2;
        minsolver.fol2sat.MinTranslation r0;

        r0 := @parameter0: minsolver.fol2sat.MinTranslation;

        r1 := @parameter1: kodkod.instance.Bounds;

        r2 := @parameter2: java.util.Map;

        r3 := @parameter3: int[];

        $r4 = staticinvoke <minsolver.MinSolver$MinTwoWayTranslator: kodkod.instance.Instance translatePropositions(minsolver.fol2sat.MinTranslation,kodkod.instance.Bounds,java.util.Map,int[])>(r0, r1, r2, r3);

        return $r4;
    }
}
