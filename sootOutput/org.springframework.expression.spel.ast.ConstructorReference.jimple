public class org.springframework.expression.spel.ast.ConstructorReference extends org.springframework.expression.spel.ast.SpelNodeImpl
{
    private boolean isArrayConstructor;
    private org.springframework.expression.spel.ast.SpelNodeImpl[] dimensions;
    private volatile org.springframework.expression.ConstructorExecutor cachedExecutor;

    public transient void <init>(int, org.springframework.expression.spel.ast.SpelNodeImpl[])
    {
        int i0;
        org.springframework.expression.spel.ast.ConstructorReference r0;
        org.springframework.expression.spel.ast.SpelNodeImpl[] r1;

        r0 := @this: org.springframework.expression.spel.ast.ConstructorReference;

        i0 := @parameter0: int;

        r1 := @parameter1: org.springframework.expression.spel.ast.SpelNodeImpl[];

        specialinvoke r0.<org.springframework.expression.spel.ast.SpelNodeImpl: void <init>(int,org.springframework.expression.spel.ast.SpelNodeImpl[])>(i0, r1);

        r0.<org.springframework.expression.spel.ast.ConstructorReference: boolean isArrayConstructor> = 0;

        r0.<org.springframework.expression.spel.ast.ConstructorReference: boolean isArrayConstructor> = 0;

        return;
    }

    public transient void <init>(int, org.springframework.expression.spel.ast.SpelNodeImpl[], org.springframework.expression.spel.ast.SpelNodeImpl[])
    {
        int i0;
        org.springframework.expression.spel.ast.ConstructorReference r0;
        org.springframework.expression.spel.ast.SpelNodeImpl[] r1, r2;

        r0 := @this: org.springframework.expression.spel.ast.ConstructorReference;

        i0 := @parameter0: int;

        r2 := @parameter1: org.springframework.expression.spel.ast.SpelNodeImpl[];

        r1 := @parameter2: org.springframework.expression.spel.ast.SpelNodeImpl[];

        specialinvoke r0.<org.springframework.expression.spel.ast.SpelNodeImpl: void <init>(int,org.springframework.expression.spel.ast.SpelNodeImpl[])>(i0, r1);

        r0.<org.springframework.expression.spel.ast.ConstructorReference: boolean isArrayConstructor> = 0;

        r0.<org.springframework.expression.spel.ast.ConstructorReference: boolean isArrayConstructor> = 1;

        r0.<org.springframework.expression.spel.ast.ConstructorReference: org.springframework.expression.spel.ast.SpelNodeImpl[] dimensions> = r2;

        return;
    }

    public org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState) throws org.springframework.expression.EvaluationException
    {
        org.springframework.expression.spel.ExpressionState r1;
        org.springframework.expression.spel.ast.ConstructorReference r0;
        org.springframework.expression.TypedValue $r2, $r3;
        boolean $z0;

        r0 := @this: org.springframework.expression.spel.ast.ConstructorReference;

        r1 := @parameter0: org.springframework.expression.spel.ExpressionState;

        $z0 = r0.<org.springframework.expression.spel.ast.ConstructorReference: boolean isArrayConstructor>;

        if $z0 == 0 goto label1;

        $r3 = specialinvoke r0.<org.springframework.expression.spel.ast.ConstructorReference: org.springframework.expression.TypedValue createArray(org.springframework.expression.spel.ExpressionState)>(r1);

        return $r3;

     label1:
        $r2 = specialinvoke r0.<org.springframework.expression.spel.ast.ConstructorReference: org.springframework.expression.TypedValue createNewInstance(org.springframework.expression.spel.ExpressionState)>(r1);

        return $r2;
    }

    private org.springframework.expression.TypedValue createNewInstance(org.springframework.expression.spel.ExpressionState) throws org.springframework.expression.EvaluationException
    {
        org.springframework.expression.spel.ast.ConstructorReference r0;
        org.springframework.expression.ConstructorExecutor $r13, r36;
        boolean $z0;
        org.springframework.expression.AccessException $r18, $r23;
        org.springframework.expression.spel.ast.SpelNodeImpl[] $r3, $r9, $r26;
        org.springframework.expression.EvaluationContext $r14, $r16;
        org.springframework.expression.spel.ExpressionState r4;
        org.springframework.expression.spel.ast.SpelNodeImpl $r5, $r10, $r27;
        org.springframework.expression.spel.SpelEvaluationException $r19, $r31;
        java.lang.Throwable $r24, $r37;
        java.lang.Object[] r1, $r20, $r32;
        java.util.ArrayList $r2;
        org.springframework.core.convert.TypeDescriptor $r8;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8;
        java.lang.String $r22, $r25, r30, $r34;
        org.springframework.expression.TypedValue $r6, $r11, $r15, $r17, $r28;
        org.springframework.expression.spel.SpelMessage $r21, $r33;
        java.lang.RuntimeException $r35;
        java.lang.Object $r7, $r12, $r29;

        r0 := @this: org.springframework.expression.spel.ast.ConstructorReference;

        r4 := @parameter0: org.springframework.expression.spel.ExpressionState;

        $i0 = virtualinvoke r0.<org.springframework.expression.spel.ast.ConstructorReference: int getChildCount()>();

        $i1 = $i0 - 1;

        r1 = newarray (java.lang.Object)[$i1];

        $r2 = new java.util.ArrayList;

        $i2 = virtualinvoke r0.<org.springframework.expression.spel.ast.ConstructorReference: int getChildCount()>();

        $i3 = $i2 - 1;

        specialinvoke $r2.<java.util.ArrayList: void <init>(int)>($i3);

        i8 = 0;

        goto label02;

     label01:
        $r3 = r0.<org.springframework.expression.spel.ast.ConstructorReference: org.springframework.expression.spel.ast.SpelNodeImpl[] children>;

        $i5 = i8 + 1;

        $r5 = $r3[$i5];

        $r6 = virtualinvoke $r5.<org.springframework.expression.spel.ast.SpelNodeImpl: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>(r4);

        $r7 = virtualinvoke $r6.<org.springframework.expression.TypedValue: java.lang.Object getValue()>();

        r1[i8] = $r7;

        $r8 = staticinvoke <org.springframework.core.convert.TypeDescriptor: org.springframework.core.convert.TypeDescriptor forObject(java.lang.Object)>($r7);

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r8);

        i8 = i8 + 1;

     label02:
        $i4 = lengthof r1;

        if i8 < $i4 goto label01;

        r36 = r0.<org.springframework.expression.spel.ast.ConstructorReference: org.springframework.expression.ConstructorExecutor cachedExecutor>;

        if r36 == null goto label10;

     label03:
        $r16 = virtualinvoke r4.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.EvaluationContext getEvaluationContext()>();

        $r17 = interfaceinvoke r36.<org.springframework.expression.ConstructorExecutor: org.springframework.expression.TypedValue execute(org.springframework.expression.EvaluationContext,java.lang.Object[])>($r16, r1);

     label04:
        return $r17;

     label05:
        $r23 := @caughtexception;

        $r24 = virtualinvoke $r23.<org.springframework.expression.AccessException: java.lang.Throwable getCause()>();

        if $r24 != null goto label06;

        $r37 = null;

        goto label07;

     label06:
        $r37 = virtualinvoke $r24.<java.lang.Throwable: java.lang.Throwable getCause()>();

     label07:
        if $r37 == null goto label09;

        $z0 = $r37 instanceof java.lang.RuntimeException;

        if $z0 == 0 goto label08;

        $r35 = (java.lang.RuntimeException) $r37;

        throw $r35;

     label08:
        $r26 = r0.<org.springframework.expression.spel.ast.ConstructorReference: org.springframework.expression.spel.ast.SpelNodeImpl[] children>;

        $r27 = $r26[0];

        $r28 = virtualinvoke $r27.<org.springframework.expression.spel.ast.SpelNodeImpl: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>(r4);

        $r29 = virtualinvoke $r28.<org.springframework.expression.TypedValue: java.lang.Object getValue()>();

        r30 = (java.lang.String) $r29;

        $r31 = new org.springframework.expression.spel.SpelEvaluationException;

        $i7 = virtualinvoke r0.<org.springframework.expression.spel.ast.ConstructorReference: int getStartPosition()>();

        $r33 = <org.springframework.expression.spel.SpelMessage: org.springframework.expression.spel.SpelMessage CONSTRUCTOR_INVOCATION_PROBLEM>;

        $r32 = newarray (java.lang.Object)[2];

        $r32[0] = r30;

        $r34 = staticinvoke <org.springframework.expression.spel.ast.FormatHelper: java.lang.String formatMethodForMessage(java.lang.String,java.util.List)>("", $r2);

        $r32[1] = $r34;

        specialinvoke $r31.<org.springframework.expression.spel.SpelEvaluationException: void <init>(int,java.lang.Throwable,org.springframework.expression.spel.SpelMessage,java.lang.Object[])>($i7, $r37, $r33, $r32);

        throw $r31;

     label09:
        r0.<org.springframework.expression.spel.ast.ConstructorReference: org.springframework.expression.ConstructorExecutor cachedExecutor> = null;

     label10:
        $r9 = r0.<org.springframework.expression.spel.ast.ConstructorReference: org.springframework.expression.spel.ast.SpelNodeImpl[] children>;

        $r10 = $r9[0];

        $r11 = virtualinvoke $r10.<org.springframework.expression.spel.ast.SpelNodeImpl: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>(r4);

        $r12 = virtualinvoke $r11.<org.springframework.expression.TypedValue: java.lang.Object getValue()>();

        $r25 = (java.lang.String) $r12;

        $r13 = specialinvoke r0.<org.springframework.expression.spel.ast.ConstructorReference: org.springframework.expression.ConstructorExecutor findExecutorForConstructor(java.lang.String,java.util.List,org.springframework.expression.spel.ExpressionState)>($r25, $r2, r4);

     label11:
        r0.<org.springframework.expression.spel.ast.ConstructorReference: org.springframework.expression.ConstructorExecutor cachedExecutor> = $r13;

        $r14 = virtualinvoke r4.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.EvaluationContext getEvaluationContext()>();

        $r15 = interfaceinvoke $r13.<org.springframework.expression.ConstructorExecutor: org.springframework.expression.TypedValue execute(org.springframework.expression.EvaluationContext,java.lang.Object[])>($r14, r1);

     label12:
        return $r15;

     label13:
        $r18 := @caughtexception;

        $r19 = new org.springframework.expression.spel.SpelEvaluationException;

        $i6 = virtualinvoke r0.<org.springframework.expression.spel.ast.ConstructorReference: int getStartPosition()>();

        $r21 = <org.springframework.expression.spel.SpelMessage: org.springframework.expression.spel.SpelMessage CONSTRUCTOR_INVOCATION_PROBLEM>;

        $r20 = newarray (java.lang.Object)[2];

        $r20[0] = $r25;

        $r22 = staticinvoke <org.springframework.expression.spel.ast.FormatHelper: java.lang.String formatMethodForMessage(java.lang.String,java.util.List)>("", $r2);

        $r20[1] = $r22;

        specialinvoke $r19.<org.springframework.expression.spel.SpelEvaluationException: void <init>(int,java.lang.Throwable,org.springframework.expression.spel.SpelMessage,java.lang.Object[])>($i6, $r18, $r21, $r20);

        throw $r19;

        catch org.springframework.expression.AccessException from label03 to label04 with label05;
        catch org.springframework.expression.AccessException from label11 to label12 with label13;
    }

    private org.springframework.expression.ConstructorExecutor findExecutorForConstructor(java.lang.String, java.util.List, org.springframework.expression.spel.ExpressionState) throws org.springframework.expression.spel.SpelEvaluationException
    {
        org.springframework.expression.spel.SpelEvaluationException $r3, $r16;
        java.lang.Object[] $r5, $r17;
        org.springframework.expression.spel.ast.ConstructorReference r4;
        int $i0, $i1;
        java.lang.String r6, $r9, $r19;
        org.springframework.expression.ConstructorExecutor $r14;
        boolean $z0;
        org.springframework.expression.spel.SpelMessage $r8, $r18;
        java.util.Iterator $r10;
        org.springframework.expression.AccessException $r15;
        org.springframework.expression.EvaluationContext $r1, $r13;
        java.util.List $r2, r7;
        org.springframework.expression.ConstructorResolver r12;
        org.springframework.expression.spel.ExpressionState r0;
        java.lang.Object $r11;

        r4 := @this: org.springframework.expression.spel.ast.ConstructorReference;

        r6 := @parameter0: java.lang.String;

        r7 := @parameter1: java.util.List;

        r0 := @parameter2: org.springframework.expression.spel.ExpressionState;

        $r1 = virtualinvoke r0.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.EvaluationContext getEvaluationContext()>();

        $r2 = interfaceinvoke $r1.<org.springframework.expression.EvaluationContext: java.util.List getConstructorResolvers()>();

        if $r2 == null goto label6;

        $r10 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

        goto label5;

     label1:
        $r11 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        r12 = (org.springframework.expression.ConstructorResolver) $r11;

     label2:
        $r13 = virtualinvoke r0.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.EvaluationContext getEvaluationContext()>();

        $r14 = interfaceinvoke r12.<org.springframework.expression.ConstructorResolver: org.springframework.expression.ConstructorExecutor resolve(org.springframework.expression.EvaluationContext,java.lang.String,java.util.List)>($r13, r6, r7);

        if $r14 == null goto label5;

     label3:
        return $r14;

     label4:
        $r15 := @caughtexception;

        $r16 = new org.springframework.expression.spel.SpelEvaluationException;

        $i1 = virtualinvoke r4.<org.springframework.expression.spel.ast.ConstructorReference: int getStartPosition()>();

        $r18 = <org.springframework.expression.spel.SpelMessage: org.springframework.expression.spel.SpelMessage CONSTRUCTOR_INVOCATION_PROBLEM>;

        $r17 = newarray (java.lang.Object)[2];

        $r17[0] = r6;

        $r19 = staticinvoke <org.springframework.expression.spel.ast.FormatHelper: java.lang.String formatMethodForMessage(java.lang.String,java.util.List)>("", r7);

        $r17[1] = $r19;

        specialinvoke $r16.<org.springframework.expression.spel.SpelEvaluationException: void <init>(int,java.lang.Throwable,org.springframework.expression.spel.SpelMessage,java.lang.Object[])>($i1, $r15, $r18, $r17);

        throw $r16;

     label5:
        $z0 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

     label6:
        $r3 = new org.springframework.expression.spel.SpelEvaluationException;

        $i0 = virtualinvoke r4.<org.springframework.expression.spel.ast.ConstructorReference: int getStartPosition()>();

        $r8 = <org.springframework.expression.spel.SpelMessage: org.springframework.expression.spel.SpelMessage CONSTRUCTOR_NOT_FOUND>;

        $r5 = newarray (java.lang.Object)[2];

        $r5[0] = r6;

        $r9 = staticinvoke <org.springframework.expression.spel.ast.FormatHelper: java.lang.String formatMethodForMessage(java.lang.String,java.util.List)>("", r7);

        $r5[1] = $r9;

        specialinvoke $r3.<org.springframework.expression.spel.SpelEvaluationException: void <init>(int,org.springframework.expression.spel.SpelMessage,java.lang.Object[])>($i0, $r8, $r5);

        throw $r3;

        catch org.springframework.expression.AccessException from label2 to label3 with label4;
    }

    public java.lang.String toStringAST()
    {
        org.springframework.expression.spel.ast.ConstructorReference r1;
        int i0, $i1;
        java.lang.StringBuilder $r0;
        java.lang.String $r3, $r5, $r6;
        org.springframework.expression.spel.SpelNode $r2, $r4;

        r1 := @this: org.springframework.expression.spel.ast.ConstructorReference;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("new ");

        $r2 = virtualinvoke r1.<org.springframework.expression.spel.ast.ConstructorReference: org.springframework.expression.spel.SpelNode getChild(int)>(0);

        $r3 = interfaceinvoke $r2.<org.springframework.expression.spel.SpelNode: java.lang.String toStringAST()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        i0 = 1;

        goto label3;

     label1:
        if i0 <= 1 goto label2;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

     label2:
        $r4 = virtualinvoke r1.<org.springframework.expression.spel.ast.ConstructorReference: org.springframework.expression.spel.SpelNode getChild(int)>(i0);

        $r5 = interfaceinvoke $r4.<org.springframework.expression.spel.SpelNode: java.lang.String toStringAST()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        i0 = i0 + 1;

     label3:
        $i1 = virtualinvoke r1.<org.springframework.expression.spel.ast.ConstructorReference: int getChildCount()>();

        if i0 < $i1 goto label1;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r6 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    private org.springframework.expression.TypedValue createArray(org.springframework.expression.spel.ExpressionState) throws org.springframework.expression.EvaluationException
    {
        org.springframework.expression.spel.ast.ConstructorReference r0;
        org.springframework.expression.spel.ast.SpelNodeImpl[] $r8, $r12, $r26, $r35, $r41, $r42, $r43, $r44, $r47;
        org.springframework.expression.spel.ExpressionState r2;
        org.springframework.expression.spel.ast.SpelNodeImpl $r13, $r27, $r45, $r48, r57;
        org.springframework.expression.spel.SpelEvaluationException $r29, $r32, $r36, $r50;
        java.lang.Object[] $r30, $r33, $r37, $r52;
        org.springframework.expression.spel.ast.InlineList r60;
        java.lang.String r4, $r25, $r55;
        org.springframework.expression.TypedValue $r28, $r46, $r49, $r61;
        org.springframework.expression.spel.ast.TypeCode $r5, $r6, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23;
        org.springframework.expression.spel.SpelMessage $r31, $r34, $r38, $r53;
        java.lang.IllegalStateException $r24;
        int[] r59;
        boolean $z0, $z1;
        org.springframework.expression.TypeConverter $r10, $r40;
        org.springframework.expression.EvaluationContext $r9, $r39;
        org.springframework.core.convert.TypeDescriptor $r7;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, i13, i14, i15;
        java.lang.Object $r3, $r14, r58;
        java.lang.Class $r54, r56;
        org.springframework.expression.spel.SpelNode $r1, $r11, $r51;

        r0 := @this: org.springframework.expression.spel.ast.ConstructorReference;

        r2 := @parameter0: org.springframework.expression.spel.ExpressionState;

        $r1 = virtualinvoke r0.<org.springframework.expression.spel.ast.ConstructorReference: org.springframework.expression.spel.SpelNode getChild(int)>(0);

        $r3 = interfaceinvoke $r1.<org.springframework.expression.spel.SpelNode: java.lang.Object getValue(org.springframework.expression.spel.ExpressionState)>(r2);

        $z0 = $r3 instanceof java.lang.String;

        if $z0 != 0 goto label01;

        $r50 = new org.springframework.expression.spel.SpelEvaluationException;

        $r51 = virtualinvoke r0.<org.springframework.expression.spel.ast.ConstructorReference: org.springframework.expression.spel.SpelNode getChild(int)>(0);

        $i12 = interfaceinvoke $r51.<org.springframework.expression.spel.SpelNode: int getStartPosition()>();

        $r53 = <org.springframework.expression.spel.SpelMessage: org.springframework.expression.spel.SpelMessage TYPE_NAME_EXPECTED_FOR_ARRAY_CONSTRUCTION>;

        $r52 = newarray (java.lang.Object)[1];

        $r54 = virtualinvoke $r3.<java.lang.Object: java.lang.Class getClass()>();

        $r55 = staticinvoke <org.springframework.expression.spel.ast.FormatHelper: java.lang.String formatClassNameForMessage(java.lang.Class)>($r54);

        $r52[0] = $r55;

        specialinvoke $r50.<org.springframework.expression.spel.SpelEvaluationException: void <init>(int,org.springframework.expression.spel.SpelMessage,java.lang.Object[])>($i12, $r53, $r52);

        throw $r50;

     label01:
        r4 = (java.lang.String) $r3;

        $r5 = staticinvoke <org.springframework.expression.spel.ast.TypeCode: org.springframework.expression.spel.ast.TypeCode forName(java.lang.String)>(r4);

        $r6 = <org.springframework.expression.spel.ast.TypeCode: org.springframework.expression.spel.ast.TypeCode OBJECT>;

        if $r5 != $r6 goto label02;

        r56 = virtualinvoke r2.<org.springframework.expression.spel.ExpressionState: java.lang.Class findType(java.lang.String)>(r4);

        goto label03;

     label02:
        r56 = virtualinvoke $r5.<org.springframework.expression.spel.ast.TypeCode: java.lang.Class getType()>();

     label03:
        $r7 = staticinvoke <org.springframework.core.convert.TypeDescriptor: org.springframework.core.convert.TypeDescriptor valueOf(java.lang.Class)>(r56);

        $z1 = specialinvoke r0.<org.springframework.expression.spel.ast.ConstructorReference: boolean hasInitializer()>();

        if $z1 != 0 goto label10;

        $r35 = r0.<org.springframework.expression.spel.ast.ConstructorReference: org.springframework.expression.spel.ast.SpelNodeImpl[] dimensions>;

        i13 = lengthof $r35;

        i14 = 0;

        goto label06;

     label04:
        r57 = $r35[i14];

        if r57 != null goto label05;

        $r36 = new org.springframework.expression.spel.SpelEvaluationException;

        $i6 = virtualinvoke r0.<org.springframework.expression.spel.ast.ConstructorReference: int getStartPosition()>();

        $r38 = <org.springframework.expression.spel.SpelMessage: org.springframework.expression.spel.SpelMessage MISSING_ARRAY_DIMENSION>;

        $r37 = newarray (java.lang.Object)[0];

        specialinvoke $r36.<org.springframework.expression.spel.SpelEvaluationException: void <init>(int,org.springframework.expression.spel.SpelMessage,java.lang.Object[])>($i6, $r38, $r37);

        throw $r36;

     label05:
        i14 = i14 + 1;

     label06:
        if i14 < i13 goto label04;

        $r39 = virtualinvoke r2.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.EvaluationContext getEvaluationContext()>();

        $r40 = interfaceinvoke $r39.<org.springframework.expression.EvaluationContext: org.springframework.expression.TypeConverter getTypeConverter()>();

        $r41 = r0.<org.springframework.expression.spel.ast.ConstructorReference: org.springframework.expression.spel.ast.SpelNodeImpl[] dimensions>;

        $i7 = lengthof $r41;

        if $i7 != 1 goto label07;

        $r47 = r0.<org.springframework.expression.spel.ast.ConstructorReference: org.springframework.expression.spel.ast.SpelNodeImpl[] dimensions>;

        $r48 = $r47[0];

        $r49 = virtualinvoke $r48.<org.springframework.expression.spel.ast.SpelNodeImpl: org.springframework.expression.TypedValue getTypedValue(org.springframework.expression.spel.ExpressionState)>(r2);

        $i11 = staticinvoke <org.springframework.expression.common.ExpressionUtils: int toInt(org.springframework.expression.TypeConverter,org.springframework.expression.TypedValue)>($r40, $r49);

        r58 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(r56, $i11);

        goto label22;

     label07:
        $r42 = r0.<org.springframework.expression.spel.ast.ConstructorReference: org.springframework.expression.spel.ast.SpelNodeImpl[] dimensions>;

        $i8 = lengthof $r42;

        r59 = newarray (int)[$i8];

        i15 = 0;

        goto label09;

     label08:
        $r44 = r0.<org.springframework.expression.spel.ast.ConstructorReference: org.springframework.expression.spel.ast.SpelNodeImpl[] dimensions>;

        $r45 = $r44[i15];

        $r46 = virtualinvoke $r45.<org.springframework.expression.spel.ast.SpelNodeImpl: org.springframework.expression.TypedValue getTypedValue(org.springframework.expression.spel.ExpressionState)>(r2);

        $i10 = staticinvoke <org.springframework.expression.common.ExpressionUtils: int toInt(org.springframework.expression.TypeConverter,org.springframework.expression.TypedValue)>($r40, $r46);

        r59[i15] = $i10;

        i15 = i15 + 1;

     label09:
        $r43 = r0.<org.springframework.expression.spel.ast.ConstructorReference: org.springframework.expression.spel.ast.SpelNodeImpl[] dimensions>;

        $i9 = lengthof $r43;

        if i15 < $i9 goto label08;

        r58 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>(r56, r59);

        goto label22;

     label10:
        $r8 = r0.<org.springframework.expression.spel.ast.ConstructorReference: org.springframework.expression.spel.ast.SpelNodeImpl[] dimensions>;

        $i0 = lengthof $r8;

        if $i0 <= 1 goto label11;

        $r32 = new org.springframework.expression.spel.SpelEvaluationException;

        $i5 = virtualinvoke r0.<org.springframework.expression.spel.ast.ConstructorReference: int getStartPosition()>();

        $r34 = <org.springframework.expression.spel.SpelMessage: org.springframework.expression.spel.SpelMessage MULTIDIM_ARRAY_INITIALIZER_NOT_SUPPORTED>;

        $r33 = newarray (java.lang.Object)[0];

        specialinvoke $r32.<org.springframework.expression.spel.SpelEvaluationException: void <init>(int,org.springframework.expression.spel.SpelMessage,java.lang.Object[])>($i5, $r34, $r33);

        throw $r32;

     label11:
        $r9 = virtualinvoke r2.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.EvaluationContext getEvaluationContext()>();

        $r10 = interfaceinvoke $r9.<org.springframework.expression.EvaluationContext: org.springframework.expression.TypeConverter getTypeConverter()>();

        $r11 = virtualinvoke r0.<org.springframework.expression.spel.ast.ConstructorReference: org.springframework.expression.spel.SpelNode getChild(int)>(1);

        r60 = (org.springframework.expression.spel.ast.InlineList) $r11;

        $r12 = r0.<org.springframework.expression.spel.ast.ConstructorReference: org.springframework.expression.spel.ast.SpelNodeImpl[] dimensions>;

        $r13 = $r12[0];

        if $r13 == null goto label12;

        $r26 = r0.<org.springframework.expression.spel.ast.ConstructorReference: org.springframework.expression.spel.ast.SpelNodeImpl[] dimensions>;

        $r27 = $r26[0];

        $r28 = virtualinvoke $r27.<org.springframework.expression.spel.ast.SpelNodeImpl: org.springframework.expression.TypedValue getTypedValue(org.springframework.expression.spel.ExpressionState)>(r2);

        $i2 = staticinvoke <org.springframework.expression.common.ExpressionUtils: int toInt(org.springframework.expression.TypeConverter,org.springframework.expression.TypedValue)>($r10, $r28);

        $i3 = virtualinvoke r60.<org.springframework.expression.spel.ast.InlineList: int getChildCount()>();

        if $i2 == $i3 goto label12;

        $r29 = new org.springframework.expression.spel.SpelEvaluationException;

        $i4 = virtualinvoke r0.<org.springframework.expression.spel.ast.ConstructorReference: int getStartPosition()>();

        $r31 = <org.springframework.expression.spel.SpelMessage: org.springframework.expression.spel.SpelMessage INITIALIZER_LENGTH_INCORRECT>;

        $r30 = newarray (java.lang.Object)[0];

        specialinvoke $r29.<org.springframework.expression.spel.SpelEvaluationException: void <init>(int,org.springframework.expression.spel.SpelMessage,java.lang.Object[])>($i4, $r31, $r30);

        throw $r29;

     label12:
        $i1 = virtualinvoke r60.<org.springframework.expression.spel.ast.InlineList: int getChildCount()>();

        $r14 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(r56, $i1);

        r58 = $r14;

        $r15 = <org.springframework.expression.spel.ast.TypeCode: org.springframework.expression.spel.ast.TypeCode OBJECT>;

        if $r5 != $r15 goto label13;

        specialinvoke r0.<org.springframework.expression.spel.ast.ConstructorReference: void populateReferenceTypeArray(org.springframework.expression.spel.ExpressionState,java.lang.Object,org.springframework.expression.TypeConverter,org.springframework.expression.spel.ast.InlineList,java.lang.Class)>(r2, $r14, $r10, r60, r56);

        goto label22;

     label13:
        $r16 = <org.springframework.expression.spel.ast.TypeCode: org.springframework.expression.spel.ast.TypeCode INT>;

        if $r5 != $r16 goto label14;

        specialinvoke r0.<org.springframework.expression.spel.ast.ConstructorReference: void populateIntArray(org.springframework.expression.spel.ExpressionState,java.lang.Object,org.springframework.expression.TypeConverter,org.springframework.expression.spel.ast.InlineList)>(r2, $r14, $r10, r60);

        goto label22;

     label14:
        $r17 = <org.springframework.expression.spel.ast.TypeCode: org.springframework.expression.spel.ast.TypeCode BOOLEAN>;

        if $r5 != $r17 goto label15;

        specialinvoke r0.<org.springframework.expression.spel.ast.ConstructorReference: void populateBooleanArray(org.springframework.expression.spel.ExpressionState,java.lang.Object,org.springframework.expression.TypeConverter,org.springframework.expression.spel.ast.InlineList)>(r2, $r14, $r10, r60);

        goto label22;

     label15:
        $r18 = <org.springframework.expression.spel.ast.TypeCode: org.springframework.expression.spel.ast.TypeCode CHAR>;

        if $r5 != $r18 goto label16;

        specialinvoke r0.<org.springframework.expression.spel.ast.ConstructorReference: void populateCharArray(org.springframework.expression.spel.ExpressionState,java.lang.Object,org.springframework.expression.TypeConverter,org.springframework.expression.spel.ast.InlineList)>(r2, $r14, $r10, r60);

        goto label22;

     label16:
        $r19 = <org.springframework.expression.spel.ast.TypeCode: org.springframework.expression.spel.ast.TypeCode LONG>;

        if $r5 != $r19 goto label17;

        specialinvoke r0.<org.springframework.expression.spel.ast.ConstructorReference: void populateLongArray(org.springframework.expression.spel.ExpressionState,java.lang.Object,org.springframework.expression.TypeConverter,org.springframework.expression.spel.ast.InlineList)>(r2, $r14, $r10, r60);

        goto label22;

     label17:
        $r20 = <org.springframework.expression.spel.ast.TypeCode: org.springframework.expression.spel.ast.TypeCode SHORT>;

        if $r5 != $r20 goto label18;

        specialinvoke r0.<org.springframework.expression.spel.ast.ConstructorReference: void populateShortArray(org.springframework.expression.spel.ExpressionState,java.lang.Object,org.springframework.expression.TypeConverter,org.springframework.expression.spel.ast.InlineList)>(r2, $r14, $r10, r60);

        goto label22;

     label18:
        $r21 = <org.springframework.expression.spel.ast.TypeCode: org.springframework.expression.spel.ast.TypeCode DOUBLE>;

        if $r5 != $r21 goto label19;

        specialinvoke r0.<org.springframework.expression.spel.ast.ConstructorReference: void populateDoubleArray(org.springframework.expression.spel.ExpressionState,java.lang.Object,org.springframework.expression.TypeConverter,org.springframework.expression.spel.ast.InlineList)>(r2, $r14, $r10, r60);

        goto label22;

     label19:
        $r22 = <org.springframework.expression.spel.ast.TypeCode: org.springframework.expression.spel.ast.TypeCode FLOAT>;

        if $r5 != $r22 goto label20;

        specialinvoke r0.<org.springframework.expression.spel.ast.ConstructorReference: void populateFloatArray(org.springframework.expression.spel.ExpressionState,java.lang.Object,org.springframework.expression.TypeConverter,org.springframework.expression.spel.ast.InlineList)>(r2, $r14, $r10, r60);

        goto label22;

     label20:
        $r23 = <org.springframework.expression.spel.ast.TypeCode: org.springframework.expression.spel.ast.TypeCode BYTE>;

        if $r5 != $r23 goto label21;

        specialinvoke r0.<org.springframework.expression.spel.ast.ConstructorReference: void populateByteArray(org.springframework.expression.spel.ExpressionState,java.lang.Object,org.springframework.expression.TypeConverter,org.springframework.expression.spel.ast.InlineList)>(r2, $r14, $r10, r60);

        goto label22;

     label21:
        $r24 = new java.lang.IllegalStateException;

        $r25 = virtualinvoke $r5.<org.springframework.expression.spel.ast.TypeCode: java.lang.String name()>();

        specialinvoke $r24.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r25);

        throw $r24;

     label22:
        $r61 = new org.springframework.expression.TypedValue;

        specialinvoke $r61.<org.springframework.expression.TypedValue: void <init>(java.lang.Object,org.springframework.core.convert.TypeDescriptor)>(r58, $r7);

        return $r61;
    }

    private void populateReferenceTypeArray(org.springframework.expression.spel.ExpressionState, java.lang.Object, org.springframework.expression.TypeConverter, org.springframework.expression.spel.ast.InlineList, java.lang.Class)
    {
        java.lang.Object[] r3;
        org.springframework.expression.TypeConverter r8;
        org.springframework.expression.spel.ast.InlineList r4;
        org.springframework.expression.spel.ast.ConstructorReference r11;
        org.springframework.core.convert.TypeDescriptor $r1, $r9;
        int $i0, i1;
        java.lang.Class r0;
        java.lang.Object r2, $r7, $r10;
        org.springframework.expression.spel.ExpressionState r6;
        org.springframework.expression.spel.SpelNode $r5;

        r11 := @this: org.springframework.expression.spel.ast.ConstructorReference;

        r6 := @parameter0: org.springframework.expression.spel.ExpressionState;

        r2 := @parameter1: java.lang.Object;

        r8 := @parameter2: org.springframework.expression.TypeConverter;

        r4 := @parameter3: org.springframework.expression.spel.ast.InlineList;

        r0 := @parameter4: java.lang.Class;

        $r1 = staticinvoke <org.springframework.core.convert.TypeDescriptor: org.springframework.core.convert.TypeDescriptor valueOf(java.lang.Class)>(r0);

        r3 = (java.lang.Object[]) r2;

        i1 = 0;

        goto label2;

     label1:
        $r5 = virtualinvoke r4.<org.springframework.expression.spel.ast.InlineList: org.springframework.expression.spel.SpelNode getChild(int)>(i1);

        $r7 = interfaceinvoke $r5.<org.springframework.expression.spel.SpelNode: java.lang.Object getValue(org.springframework.expression.spel.ExpressionState)>(r6);

        $r9 = staticinvoke <org.springframework.core.convert.TypeDescriptor: org.springframework.core.convert.TypeDescriptor forObject(java.lang.Object)>($r7);

        $r10 = interfaceinvoke r8.<org.springframework.expression.TypeConverter: java.lang.Object convertValue(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>($r7, $r9, $r1);

        r3[i1] = $r10;

        i1 = i1 + 1;

     label2:
        $i0 = lengthof r3;

        if i1 < $i0 goto label1;

        return;
    }

    private void populateByteArray(org.springframework.expression.spel.ExpressionState, java.lang.Object, org.springframework.expression.TypeConverter, org.springframework.expression.spel.ast.InlineList)
    {
        byte[] r1;
        org.springframework.expression.TypeConverter r6;
        org.springframework.expression.spel.ast.InlineList r2;
        org.springframework.expression.spel.ast.ConstructorReference r7;
        byte $b1;
        int $i0, i2;
        java.lang.Object r0;
        org.springframework.expression.spel.ExpressionState r4;
        org.springframework.expression.TypedValue $r5;
        org.springframework.expression.spel.SpelNode $r3;

        r7 := @this: org.springframework.expression.spel.ast.ConstructorReference;

        r4 := @parameter0: org.springframework.expression.spel.ExpressionState;

        r0 := @parameter1: java.lang.Object;

        r6 := @parameter2: org.springframework.expression.TypeConverter;

        r2 := @parameter3: org.springframework.expression.spel.ast.InlineList;

        r1 = (byte[]) r0;

        i2 = 0;

        goto label2;

     label1:
        $r3 = virtualinvoke r2.<org.springframework.expression.spel.ast.InlineList: org.springframework.expression.spel.SpelNode getChild(int)>(i2);

        $r5 = interfaceinvoke $r3.<org.springframework.expression.spel.SpelNode: org.springframework.expression.TypedValue getTypedValue(org.springframework.expression.spel.ExpressionState)>(r4);

        $b1 = staticinvoke <org.springframework.expression.common.ExpressionUtils: byte toByte(org.springframework.expression.TypeConverter,org.springframework.expression.TypedValue)>(r6, $r5);

        r1[i2] = $b1;

        i2 = i2 + 1;

     label2:
        $i0 = lengthof r1;

        if i2 < $i0 goto label1;

        return;
    }

    private void populateFloatArray(org.springframework.expression.spel.ExpressionState, java.lang.Object, org.springframework.expression.TypeConverter, org.springframework.expression.spel.ast.InlineList)
    {
        org.springframework.expression.TypeConverter r6;
        float[] r1;
        org.springframework.expression.spel.ast.InlineList r2;
        org.springframework.expression.spel.ast.ConstructorReference r7;
        int $i0, i1;
        float $f0;
        java.lang.Object r0;
        org.springframework.expression.spel.ExpressionState r4;
        org.springframework.expression.TypedValue $r5;
        org.springframework.expression.spel.SpelNode $r3;

        r7 := @this: org.springframework.expression.spel.ast.ConstructorReference;

        r4 := @parameter0: org.springframework.expression.spel.ExpressionState;

        r0 := @parameter1: java.lang.Object;

        r6 := @parameter2: org.springframework.expression.TypeConverter;

        r2 := @parameter3: org.springframework.expression.spel.ast.InlineList;

        r1 = (float[]) r0;

        i1 = 0;

        goto label2;

     label1:
        $r3 = virtualinvoke r2.<org.springframework.expression.spel.ast.InlineList: org.springframework.expression.spel.SpelNode getChild(int)>(i1);

        $r5 = interfaceinvoke $r3.<org.springframework.expression.spel.SpelNode: org.springframework.expression.TypedValue getTypedValue(org.springframework.expression.spel.ExpressionState)>(r4);

        $f0 = staticinvoke <org.springframework.expression.common.ExpressionUtils: float toFloat(org.springframework.expression.TypeConverter,org.springframework.expression.TypedValue)>(r6, $r5);

        r1[i1] = $f0;

        i1 = i1 + 1;

     label2:
        $i0 = lengthof r1;

        if i1 < $i0 goto label1;

        return;
    }

    private void populateDoubleArray(org.springframework.expression.spel.ExpressionState, java.lang.Object, org.springframework.expression.TypeConverter, org.springframework.expression.spel.ast.InlineList)
    {
        org.springframework.expression.TypeConverter r6;
        double[] r1;
        org.springframework.expression.spel.ast.InlineList r2;
        org.springframework.expression.spel.ast.ConstructorReference r7;
        int $i0, i1;
        java.lang.Object r0;
        org.springframework.expression.spel.ExpressionState r4;
        org.springframework.expression.TypedValue $r5;
        org.springframework.expression.spel.SpelNode $r3;
        double $d0;

        r7 := @this: org.springframework.expression.spel.ast.ConstructorReference;

        r4 := @parameter0: org.springframework.expression.spel.ExpressionState;

        r0 := @parameter1: java.lang.Object;

        r6 := @parameter2: org.springframework.expression.TypeConverter;

        r2 := @parameter3: org.springframework.expression.spel.ast.InlineList;

        r1 = (double[]) r0;

        i1 = 0;

        goto label2;

     label1:
        $r3 = virtualinvoke r2.<org.springframework.expression.spel.ast.InlineList: org.springframework.expression.spel.SpelNode getChild(int)>(i1);

        $r5 = interfaceinvoke $r3.<org.springframework.expression.spel.SpelNode: org.springframework.expression.TypedValue getTypedValue(org.springframework.expression.spel.ExpressionState)>(r4);

        $d0 = staticinvoke <org.springframework.expression.common.ExpressionUtils: double toDouble(org.springframework.expression.TypeConverter,org.springframework.expression.TypedValue)>(r6, $r5);

        r1[i1] = $d0;

        i1 = i1 + 1;

     label2:
        $i0 = lengthof r1;

        if i1 < $i0 goto label1;

        return;
    }

    private void populateShortArray(org.springframework.expression.spel.ExpressionState, java.lang.Object, org.springframework.expression.TypeConverter, org.springframework.expression.spel.ast.InlineList)
    {
        org.springframework.expression.TypeConverter r6;
        org.springframework.expression.spel.ast.InlineList r2;
        org.springframework.expression.spel.ast.ConstructorReference r7;
        short $s1;
        int $i0, i2;
        java.lang.Object r0;
        org.springframework.expression.spel.ExpressionState r4;
        short[] r1;
        org.springframework.expression.TypedValue $r5;
        org.springframework.expression.spel.SpelNode $r3;

        r7 := @this: org.springframework.expression.spel.ast.ConstructorReference;

        r4 := @parameter0: org.springframework.expression.spel.ExpressionState;

        r0 := @parameter1: java.lang.Object;

        r6 := @parameter2: org.springframework.expression.TypeConverter;

        r2 := @parameter3: org.springframework.expression.spel.ast.InlineList;

        r1 = (short[]) r0;

        i2 = 0;

        goto label2;

     label1:
        $r3 = virtualinvoke r2.<org.springframework.expression.spel.ast.InlineList: org.springframework.expression.spel.SpelNode getChild(int)>(i2);

        $r5 = interfaceinvoke $r3.<org.springframework.expression.spel.SpelNode: org.springframework.expression.TypedValue getTypedValue(org.springframework.expression.spel.ExpressionState)>(r4);

        $s1 = staticinvoke <org.springframework.expression.common.ExpressionUtils: short toShort(org.springframework.expression.TypeConverter,org.springframework.expression.TypedValue)>(r6, $r5);

        r1[i2] = $s1;

        i2 = i2 + 1;

     label2:
        $i0 = lengthof r1;

        if i2 < $i0 goto label1;

        return;
    }

    private void populateLongArray(org.springframework.expression.spel.ExpressionState, java.lang.Object, org.springframework.expression.TypeConverter, org.springframework.expression.spel.ast.InlineList)
    {
        org.springframework.expression.TypeConverter r6;
        org.springframework.expression.spel.ast.InlineList r2;
        long $l1;
        org.springframework.expression.spel.ast.ConstructorReference r7;
        long[] r1;
        int $i0, i2;
        java.lang.Object r0;
        org.springframework.expression.spel.ExpressionState r4;
        org.springframework.expression.TypedValue $r5;
        org.springframework.expression.spel.SpelNode $r3;

        r7 := @this: org.springframework.expression.spel.ast.ConstructorReference;

        r4 := @parameter0: org.springframework.expression.spel.ExpressionState;

        r0 := @parameter1: java.lang.Object;

        r6 := @parameter2: org.springframework.expression.TypeConverter;

        r2 := @parameter3: org.springframework.expression.spel.ast.InlineList;

        r1 = (long[]) r0;

        i2 = 0;

        goto label2;

     label1:
        $r3 = virtualinvoke r2.<org.springframework.expression.spel.ast.InlineList: org.springframework.expression.spel.SpelNode getChild(int)>(i2);

        $r5 = interfaceinvoke $r3.<org.springframework.expression.spel.SpelNode: org.springframework.expression.TypedValue getTypedValue(org.springframework.expression.spel.ExpressionState)>(r4);

        $l1 = staticinvoke <org.springframework.expression.common.ExpressionUtils: long toLong(org.springframework.expression.TypeConverter,org.springframework.expression.TypedValue)>(r6, $r5);

        r1[i2] = $l1;

        i2 = i2 + 1;

     label2:
        $i0 = lengthof r1;

        if i2 < $i0 goto label1;

        return;
    }

    private void populateCharArray(org.springframework.expression.spel.ExpressionState, java.lang.Object, org.springframework.expression.TypeConverter, org.springframework.expression.spel.ast.InlineList)
    {
        org.springframework.expression.TypeConverter r6;
        org.springframework.expression.spel.ast.InlineList r2;
        char $c1;
        org.springframework.expression.spel.ast.ConstructorReference r7;
        int $i0, i2;
        char[] r1;
        java.lang.Object r0;
        org.springframework.expression.spel.ExpressionState r4;
        org.springframework.expression.TypedValue $r5;
        org.springframework.expression.spel.SpelNode $r3;

        r7 := @this: org.springframework.expression.spel.ast.ConstructorReference;

        r4 := @parameter0: org.springframework.expression.spel.ExpressionState;

        r0 := @parameter1: java.lang.Object;

        r6 := @parameter2: org.springframework.expression.TypeConverter;

        r2 := @parameter3: org.springframework.expression.spel.ast.InlineList;

        r1 = (char[]) r0;

        i2 = 0;

        goto label2;

     label1:
        $r3 = virtualinvoke r2.<org.springframework.expression.spel.ast.InlineList: org.springframework.expression.spel.SpelNode getChild(int)>(i2);

        $r5 = interfaceinvoke $r3.<org.springframework.expression.spel.SpelNode: org.springframework.expression.TypedValue getTypedValue(org.springframework.expression.spel.ExpressionState)>(r4);

        $c1 = staticinvoke <org.springframework.expression.common.ExpressionUtils: char toChar(org.springframework.expression.TypeConverter,org.springframework.expression.TypedValue)>(r6, $r5);

        r1[i2] = $c1;

        i2 = i2 + 1;

     label2:
        $i0 = lengthof r1;

        if i2 < $i0 goto label1;

        return;
    }

    private void populateBooleanArray(org.springframework.expression.spel.ExpressionState, java.lang.Object, org.springframework.expression.TypeConverter, org.springframework.expression.spel.ast.InlineList)
    {
        org.springframework.expression.TypeConverter r6;
        boolean[] r1;
        org.springframework.expression.spel.ast.InlineList r2;
        org.springframework.expression.spel.ast.ConstructorReference r7;
        int $i0, i1;
        java.lang.Object r0;
        org.springframework.expression.spel.ExpressionState r4;
        org.springframework.expression.TypedValue $r5;
        org.springframework.expression.spel.SpelNode $r3;
        boolean $z0;

        r7 := @this: org.springframework.expression.spel.ast.ConstructorReference;

        r4 := @parameter0: org.springframework.expression.spel.ExpressionState;

        r0 := @parameter1: java.lang.Object;

        r6 := @parameter2: org.springframework.expression.TypeConverter;

        r2 := @parameter3: org.springframework.expression.spel.ast.InlineList;

        r1 = (boolean[]) r0;

        i1 = 0;

        goto label2;

     label1:
        $r3 = virtualinvoke r2.<org.springframework.expression.spel.ast.InlineList: org.springframework.expression.spel.SpelNode getChild(int)>(i1);

        $r5 = interfaceinvoke $r3.<org.springframework.expression.spel.SpelNode: org.springframework.expression.TypedValue getTypedValue(org.springframework.expression.spel.ExpressionState)>(r4);

        $z0 = staticinvoke <org.springframework.expression.common.ExpressionUtils: boolean toBoolean(org.springframework.expression.TypeConverter,org.springframework.expression.TypedValue)>(r6, $r5);

        r1[i1] = $z0;

        i1 = i1 + 1;

     label2:
        $i0 = lengthof r1;

        if i1 < $i0 goto label1;

        return;
    }

    private void populateIntArray(org.springframework.expression.spel.ExpressionState, java.lang.Object, org.springframework.expression.TypeConverter, org.springframework.expression.spel.ast.InlineList)
    {
        org.springframework.expression.TypeConverter r6;
        org.springframework.expression.spel.ast.InlineList r2;
        org.springframework.expression.spel.ast.ConstructorReference r7;
        int[] r1;
        int $i0, $i1, i2;
        java.lang.Object r0;
        org.springframework.expression.spel.ExpressionState r4;
        org.springframework.expression.TypedValue $r5;
        org.springframework.expression.spel.SpelNode $r3;

        r7 := @this: org.springframework.expression.spel.ast.ConstructorReference;

        r4 := @parameter0: org.springframework.expression.spel.ExpressionState;

        r0 := @parameter1: java.lang.Object;

        r6 := @parameter2: org.springframework.expression.TypeConverter;

        r2 := @parameter3: org.springframework.expression.spel.ast.InlineList;

        r1 = (int[]) r0;

        i2 = 0;

        goto label2;

     label1:
        $r3 = virtualinvoke r2.<org.springframework.expression.spel.ast.InlineList: org.springframework.expression.spel.SpelNode getChild(int)>(i2);

        $r5 = interfaceinvoke $r3.<org.springframework.expression.spel.SpelNode: org.springframework.expression.TypedValue getTypedValue(org.springframework.expression.spel.ExpressionState)>(r4);

        $i1 = staticinvoke <org.springframework.expression.common.ExpressionUtils: int toInt(org.springframework.expression.TypeConverter,org.springframework.expression.TypedValue)>(r6, $r5);

        r1[i2] = $i1;

        i2 = i2 + 1;

     label2:
        $i0 = lengthof r1;

        if i2 < $i0 goto label1;

        return;
    }

    private boolean hasInitializer()
    {
        int $i0;
        org.springframework.expression.spel.ast.ConstructorReference r0;

        r0 := @this: org.springframework.expression.spel.ast.ConstructorReference;

        $i0 = virtualinvoke r0.<org.springframework.expression.spel.ast.ConstructorReference: int getChildCount()>();

        if $i0 <= 1 goto label1;

        return 1;

     label1:
        return 0;
    }
}
