public class groovy.sql.Sql extends java.lang.Object
{
    protected java.util.logging.Logger log;
    private javax.sql.DataSource dataSource;
    private java.sql.Connection useConnection;
    private int resultSetType;
    private int resultSetConcurrency;
    private int resultSetHoldability;
    private boolean warned;
    int updateCount;
    private groovy.lang.Closure configureStatement;
    public static final groovy.sql.OutParameter ARRAY;
    public static final groovy.sql.OutParameter BIGINT;
    public static final groovy.sql.OutParameter BINARY;
    public static final groovy.sql.OutParameter BIT;
    public static final groovy.sql.OutParameter BLOB;
    public static final groovy.sql.OutParameter BOOLEAN;
    public static final groovy.sql.OutParameter CHAR;
    public static final groovy.sql.OutParameter CLOB;
    public static final groovy.sql.OutParameter DATALINK;
    public static final groovy.sql.OutParameter DATE;
    public static final groovy.sql.OutParameter DECIMAL;
    public static final groovy.sql.OutParameter DISTINCT;
    public static final groovy.sql.OutParameter DOUBLE;
    public static final groovy.sql.OutParameter FLOAT;
    public static final groovy.sql.OutParameter INTEGER;
    public static final groovy.sql.OutParameter JAVA_OBJECT;
    public static final groovy.sql.OutParameter LONGVARBINARY;
    public static final groovy.sql.OutParameter LONGVARCHAR;
    public static final groovy.sql.OutParameter NULL;
    public static final groovy.sql.OutParameter NUMERIC;
    public static final groovy.sql.OutParameter OTHER;
    public static final groovy.sql.OutParameter REAL;
    public static final groovy.sql.OutParameter REF;
    public static final groovy.sql.OutParameter SMALLINT;
    public static final groovy.sql.OutParameter STRUCT;
    public static final groovy.sql.OutParameter TIME;
    public static final groovy.sql.OutParameter TIMESTAMP;
    public static final groovy.sql.OutParameter TINYINT;
    public static final groovy.sql.OutParameter VARBINARY;
    public static final groovy.sql.OutParameter VARCHAR;
    static java.lang.Class class$groovy$sql$Sql;

    public static groovy.sql.Sql newInstance(java.lang.String) throws java.sql.SQLException
    {
        groovy.sql.Sql $r2;
        java.lang.String r0;
        java.sql.Connection $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <java.sql.DriverManager: java.sql.Connection getConnection(java.lang.String)>(r0);

        $r2 = new groovy.sql.Sql;

        specialinvoke $r2.<groovy.sql.Sql: void <init>(java.sql.Connection)>($r1);

        return $r2;
    }

    public static groovy.sql.Sql newInstance(java.lang.String, java.util.Properties) throws java.sql.SQLException
    {
        java.util.Properties r1;
        java.sql.Connection $r2;
        groovy.sql.Sql $r3;
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.util.Properties;

        $r2 = staticinvoke <java.sql.DriverManager: java.sql.Connection getConnection(java.lang.String,java.util.Properties)>(r0, r1);

        $r3 = new groovy.sql.Sql;

        specialinvoke $r3.<groovy.sql.Sql: void <init>(java.sql.Connection)>($r2);

        return $r3;
    }

    public static groovy.sql.Sql newInstance(java.lang.String, java.util.Properties, java.lang.String) throws java.sql.SQLException, java.lang.ClassNotFoundException
    {
        java.util.Properties r2;
        groovy.sql.Sql $r3;
        java.lang.String r0, r1;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.util.Properties;

        r0 := @parameter2: java.lang.String;

        staticinvoke <groovy.sql.Sql: void loadDriver(java.lang.String)>(r0);

        $r3 = staticinvoke <groovy.sql.Sql: groovy.sql.Sql newInstance(java.lang.String,java.util.Properties)>(r1, r2);

        return $r3;
    }

    public static groovy.sql.Sql newInstance(java.lang.String, java.lang.String, java.lang.String) throws java.sql.SQLException
    {
        java.sql.Connection $r3;
        groovy.sql.Sql $r4;
        java.lang.String r0, r1, r2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        $r3 = staticinvoke <java.sql.DriverManager: java.sql.Connection getConnection(java.lang.String,java.lang.String,java.lang.String)>(r0, r1, r2);

        $r4 = new groovy.sql.Sql;

        specialinvoke $r4.<groovy.sql.Sql: void <init>(java.sql.Connection)>($r3);

        return $r4;
    }

    public static groovy.sql.Sql newInstance(java.lang.String, java.lang.String, java.lang.String, java.lang.String) throws java.sql.SQLException, java.lang.ClassNotFoundException
    {
        groovy.sql.Sql $r4;
        java.lang.String r0, r1, r2, r3;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r0 := @parameter3: java.lang.String;

        staticinvoke <groovy.sql.Sql: void loadDriver(java.lang.String)>(r0);

        $r4 = staticinvoke <groovy.sql.Sql: groovy.sql.Sql newInstance(java.lang.String,java.lang.String,java.lang.String)>(r1, r2, r3);

        return $r4;
    }

    public static groovy.sql.Sql newInstance(java.lang.String, java.lang.String) throws java.sql.SQLException, java.lang.ClassNotFoundException
    {
        groovy.sql.Sql $r2;
        java.lang.String r0, r1;

        r1 := @parameter0: java.lang.String;

        r0 := @parameter1: java.lang.String;

        staticinvoke <groovy.sql.Sql: void loadDriver(java.lang.String)>(r0);

        $r2 = staticinvoke <groovy.sql.Sql: groovy.sql.Sql newInstance(java.lang.String)>(r1);

        return $r2;
    }

    public int getResultSetType()
    {
        groovy.sql.Sql r0;
        int $i0;

        r0 := @this: groovy.sql.Sql;

        $i0 = r0.<groovy.sql.Sql: int resultSetType>;

        return $i0;
    }

    public void setResultSetType(int)
    {
        groovy.sql.Sql r0;
        int i0;

        r0 := @this: groovy.sql.Sql;

        i0 := @parameter0: int;

        r0.<groovy.sql.Sql: int resultSetType> = i0;

        return;
    }

    public int getResultSetConcurrency()
    {
        groovy.sql.Sql r0;
        int $i0;

        r0 := @this: groovy.sql.Sql;

        $i0 = r0.<groovy.sql.Sql: int resultSetConcurrency>;

        return $i0;
    }

    public void setResultSetConcurrency(int)
    {
        groovy.sql.Sql r0;
        int i0;

        r0 := @this: groovy.sql.Sql;

        i0 := @parameter0: int;

        r0.<groovy.sql.Sql: int resultSetConcurrency> = i0;

        return;
    }

    public int getResultSetHoldability()
    {
        groovy.sql.Sql r0;
        int $i0;

        r0 := @this: groovy.sql.Sql;

        $i0 = r0.<groovy.sql.Sql: int resultSetHoldability>;

        return $i0;
    }

    public void setResultSetHoldability(int)
    {
        groovy.sql.Sql r0;
        int i0;

        r0 := @this: groovy.sql.Sql;

        i0 := @parameter0: int;

        r0.<groovy.sql.Sql: int resultSetHoldability> = i0;

        return;
    }

    public static void loadDriver(java.lang.String) throws java.lang.ClassNotFoundException
    {
        java.lang.Thread $r6;
        java.lang.ClassNotFoundException $r1, $r2, $r5;
        java.lang.Class $r3, $r8;
        java.lang.String r0;
        java.lang.ClassLoader $r4, $r7;

        r0 := @parameter0: java.lang.String;

     label01:
        staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label02:
        goto label12;

     label03:
        $r5 := @caughtexception;

     label04:
        $r6 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r7 = virtualinvoke $r6.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>();

        virtualinvoke $r7.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(r0);

     label05:
        goto label12;

     label06:
        $r2 := @caughtexception;

     label07:
        $r3 = <groovy.sql.Sql: java.lang.Class class$groovy$sql$Sql>;

        if $r3 != null goto label08;

        $r8 = staticinvoke <groovy.sql.Sql: java.lang.Class class$(java.lang.String)>("groovy.sql.Sql");

        <groovy.sql.Sql: java.lang.Class class$groovy$sql$Sql> = $r8;

        goto label09;

     label08:
        $r8 = <groovy.sql.Sql: java.lang.Class class$groovy$sql$Sql>;

     label09:
        $r4 = virtualinvoke $r8.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        virtualinvoke $r4.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(r0);

     label10:
        goto label12;

     label11:
        $r1 := @caughtexception;

        throw $r5;

     label12:
        return;

        catch java.lang.ClassNotFoundException from label01 to label02 with label03;
        catch java.lang.ClassNotFoundException from label04 to label05 with label06;
        catch java.lang.ClassNotFoundException from label07 to label10 with label11;
    }

    public static groovy.sql.InParameter ARRAY(java.lang.Object)
    {
        groovy.sql.InParameter $r1;
        java.lang.Object r0;

        r0 := @parameter0: java.lang.Object;

        $r1 = staticinvoke <groovy.sql.Sql: groovy.sql.InParameter in(int,java.lang.Object)>(2003, r0);

        return $r1;
    }

    public static groovy.sql.InParameter BIGINT(java.lang.Object)
    {
        int $i1;
        groovy.sql.InParameter $r1;
        java.lang.Object r0;

        r0 := @parameter0: java.lang.Object;

        $i1 = (int) -5;

        $r1 = staticinvoke <groovy.sql.Sql: groovy.sql.InParameter in(int,java.lang.Object)>($i1, r0);

        return $r1;
    }

    public static groovy.sql.InParameter BINARY(java.lang.Object)
    {
        int $i1;
        groovy.sql.InParameter $r1;
        java.lang.Object r0;

        r0 := @parameter0: java.lang.Object;

        $i1 = (int) -2;

        $r1 = staticinvoke <groovy.sql.Sql: groovy.sql.InParameter in(int,java.lang.Object)>($i1, r0);

        return $r1;
    }

    public static groovy.sql.InParameter BIT(java.lang.Object)
    {
        int $i1;
        groovy.sql.InParameter $r1;
        java.lang.Object r0;

        r0 := @parameter0: java.lang.Object;

        $i1 = (int) -7;

        $r1 = staticinvoke <groovy.sql.Sql: groovy.sql.InParameter in(int,java.lang.Object)>($i1, r0);

        return $r1;
    }

    public static groovy.sql.InParameter BLOB(java.lang.Object)
    {
        groovy.sql.InParameter $r1;
        java.lang.Object r0;

        r0 := @parameter0: java.lang.Object;

        $r1 = staticinvoke <groovy.sql.Sql: groovy.sql.InParameter in(int,java.lang.Object)>(2004, r0);

        return $r1;
    }

    public static groovy.sql.InParameter BOOLEAN(java.lang.Object)
    {
        groovy.sql.InParameter $r1;
        java.lang.Object r0;

        r0 := @parameter0: java.lang.Object;

        $r1 = staticinvoke <groovy.sql.Sql: groovy.sql.InParameter in(int,java.lang.Object)>(16, r0);

        return $r1;
    }

    public static groovy.sql.InParameter CHAR(java.lang.Object)
    {
        groovy.sql.InParameter $r1;
        java.lang.Object r0;

        r0 := @parameter0: java.lang.Object;

        $r1 = staticinvoke <groovy.sql.Sql: groovy.sql.InParameter in(int,java.lang.Object)>(1, r0);

        return $r1;
    }

    public static groovy.sql.InParameter CLOB(java.lang.Object)
    {
        groovy.sql.InParameter $r1;
        java.lang.Object r0;

        r0 := @parameter0: java.lang.Object;

        $r1 = staticinvoke <groovy.sql.Sql: groovy.sql.InParameter in(int,java.lang.Object)>(2005, r0);

        return $r1;
    }

    public static groovy.sql.InParameter DATALINK(java.lang.Object)
    {
        groovy.sql.InParameter $r1;
        java.lang.Object r0;

        r0 := @parameter0: java.lang.Object;

        $r1 = staticinvoke <groovy.sql.Sql: groovy.sql.InParameter in(int,java.lang.Object)>(70, r0);

        return $r1;
    }

    public static groovy.sql.InParameter DATE(java.lang.Object)
    {
        groovy.sql.InParameter $r1;
        java.lang.Object r0;

        r0 := @parameter0: java.lang.Object;

        $r1 = staticinvoke <groovy.sql.Sql: groovy.sql.InParameter in(int,java.lang.Object)>(91, r0);

        return $r1;
    }

    public static groovy.sql.InParameter DECIMAL(java.lang.Object)
    {
        groovy.sql.InParameter $r1;
        java.lang.Object r0;

        r0 := @parameter0: java.lang.Object;

        $r1 = staticinvoke <groovy.sql.Sql: groovy.sql.InParameter in(int,java.lang.Object)>(3, r0);

        return $r1;
    }

    public static groovy.sql.InParameter DISTINCT(java.lang.Object)
    {
        groovy.sql.InParameter $r1;
        java.lang.Object r0;

        r0 := @parameter0: java.lang.Object;

        $r1 = staticinvoke <groovy.sql.Sql: groovy.sql.InParameter in(int,java.lang.Object)>(2001, r0);

        return $r1;
    }

    public static groovy.sql.InParameter DOUBLE(java.lang.Object)
    {
        groovy.sql.InParameter $r1;
        java.lang.Object r0;

        r0 := @parameter0: java.lang.Object;

        $r1 = staticinvoke <groovy.sql.Sql: groovy.sql.InParameter in(int,java.lang.Object)>(8, r0);

        return $r1;
    }

    public static groovy.sql.InParameter FLOAT(java.lang.Object)
    {
        groovy.sql.InParameter $r1;
        java.lang.Object r0;

        r0 := @parameter0: java.lang.Object;

        $r1 = staticinvoke <groovy.sql.Sql: groovy.sql.InParameter in(int,java.lang.Object)>(6, r0);

        return $r1;
    }

    public static groovy.sql.InParameter INTEGER(java.lang.Object)
    {
        groovy.sql.InParameter $r1;
        java.lang.Object r0;

        r0 := @parameter0: java.lang.Object;

        $r1 = staticinvoke <groovy.sql.Sql: groovy.sql.InParameter in(int,java.lang.Object)>(4, r0);

        return $r1;
    }

    public static groovy.sql.InParameter JAVA_OBJECT(java.lang.Object)
    {
        groovy.sql.InParameter $r1;
        java.lang.Object r0;

        r0 := @parameter0: java.lang.Object;

        $r1 = staticinvoke <groovy.sql.Sql: groovy.sql.InParameter in(int,java.lang.Object)>(2000, r0);

        return $r1;
    }

    public static groovy.sql.InParameter LONGVARBINARY(java.lang.Object)
    {
        int $i1;
        groovy.sql.InParameter $r1;
        java.lang.Object r0;

        r0 := @parameter0: java.lang.Object;

        $i1 = (int) -4;

        $r1 = staticinvoke <groovy.sql.Sql: groovy.sql.InParameter in(int,java.lang.Object)>($i1, r0);

        return $r1;
    }

    public static groovy.sql.InParameter LONGVARCHAR(java.lang.Object)
    {
        int $i1;
        groovy.sql.InParameter $r1;
        java.lang.Object r0;

        r0 := @parameter0: java.lang.Object;

        $i1 = (int) -1;

        $r1 = staticinvoke <groovy.sql.Sql: groovy.sql.InParameter in(int,java.lang.Object)>($i1, r0);

        return $r1;
    }

    public static groovy.sql.InParameter NULL(java.lang.Object)
    {
        groovy.sql.InParameter $r1;
        java.lang.Object r0;

        r0 := @parameter0: java.lang.Object;

        $r1 = staticinvoke <groovy.sql.Sql: groovy.sql.InParameter in(int,java.lang.Object)>(0, r0);

        return $r1;
    }

    public static groovy.sql.InParameter NUMERIC(java.lang.Object)
    {
        groovy.sql.InParameter $r1;
        java.lang.Object r0;

        r0 := @parameter0: java.lang.Object;

        $r1 = staticinvoke <groovy.sql.Sql: groovy.sql.InParameter in(int,java.lang.Object)>(2, r0);

        return $r1;
    }

    public static groovy.sql.InParameter OTHER(java.lang.Object)
    {
        groovy.sql.InParameter $r1;
        java.lang.Object r0;

        r0 := @parameter0: java.lang.Object;

        $r1 = staticinvoke <groovy.sql.Sql: groovy.sql.InParameter in(int,java.lang.Object)>(1111, r0);

        return $r1;
    }

    public static groovy.sql.InParameter REAL(java.lang.Object)
    {
        groovy.sql.InParameter $r1;
        java.lang.Object r0;

        r0 := @parameter0: java.lang.Object;

        $r1 = staticinvoke <groovy.sql.Sql: groovy.sql.InParameter in(int,java.lang.Object)>(7, r0);

        return $r1;
    }

    public static groovy.sql.InParameter REF(java.lang.Object)
    {
        groovy.sql.InParameter $r1;
        java.lang.Object r0;

        r0 := @parameter0: java.lang.Object;

        $r1 = staticinvoke <groovy.sql.Sql: groovy.sql.InParameter in(int,java.lang.Object)>(2006, r0);

        return $r1;
    }

    public static groovy.sql.InParameter SMALLINT(java.lang.Object)
    {
        groovy.sql.InParameter $r1;
        java.lang.Object r0;

        r0 := @parameter0: java.lang.Object;

        $r1 = staticinvoke <groovy.sql.Sql: groovy.sql.InParameter in(int,java.lang.Object)>(5, r0);

        return $r1;
    }

    public static groovy.sql.InParameter STRUCT(java.lang.Object)
    {
        groovy.sql.InParameter $r1;
        java.lang.Object r0;

        r0 := @parameter0: java.lang.Object;

        $r1 = staticinvoke <groovy.sql.Sql: groovy.sql.InParameter in(int,java.lang.Object)>(2002, r0);

        return $r1;
    }

    public static groovy.sql.InParameter TIME(java.lang.Object)
    {
        groovy.sql.InParameter $r1;
        java.lang.Object r0;

        r0 := @parameter0: java.lang.Object;

        $r1 = staticinvoke <groovy.sql.Sql: groovy.sql.InParameter in(int,java.lang.Object)>(92, r0);

        return $r1;
    }

    public static groovy.sql.InParameter TIMESTAMP(java.lang.Object)
    {
        groovy.sql.InParameter $r1;
        java.lang.Object r0;

        r0 := @parameter0: java.lang.Object;

        $r1 = staticinvoke <groovy.sql.Sql: groovy.sql.InParameter in(int,java.lang.Object)>(93, r0);

        return $r1;
    }

    public static groovy.sql.InParameter TINYINT(java.lang.Object)
    {
        int $i1;
        groovy.sql.InParameter $r1;
        java.lang.Object r0;

        r0 := @parameter0: java.lang.Object;

        $i1 = (int) -6;

        $r1 = staticinvoke <groovy.sql.Sql: groovy.sql.InParameter in(int,java.lang.Object)>($i1, r0);

        return $r1;
    }

    public static groovy.sql.InParameter VARBINARY(java.lang.Object)
    {
        int $i1;
        groovy.sql.InParameter $r1;
        java.lang.Object r0;

        r0 := @parameter0: java.lang.Object;

        $i1 = (int) -3;

        $r1 = staticinvoke <groovy.sql.Sql: groovy.sql.InParameter in(int,java.lang.Object)>($i1, r0);

        return $r1;
    }

    public static groovy.sql.InParameter VARCHAR(java.lang.Object)
    {
        groovy.sql.InParameter $r1;
        java.lang.Object r0;

        r0 := @parameter0: java.lang.Object;

        $r1 = staticinvoke <groovy.sql.Sql: groovy.sql.InParameter in(int,java.lang.Object)>(12, r0);

        return $r1;
    }

    public static groovy.sql.InParameter in(int, java.lang.Object)
    {
        int i0;
        java.lang.Object r1;
        groovy.sql.Sql$31 $r0;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object;

        $r0 = new groovy.sql.Sql$31;

        specialinvoke $r0.<groovy.sql.Sql$31: void <init>(int,java.lang.Object)>(i0, r1);

        return $r0;
    }

    public static groovy.sql.OutParameter out(int)
    {
        int i0;
        groovy.sql.Sql$32 $r0;

        i0 := @parameter0: int;

        $r0 = new groovy.sql.Sql$32;

        specialinvoke $r0.<groovy.sql.Sql$32: void <init>(int)>(i0);

        return $r0;
    }

    public static groovy.sql.InOutParameter inout(groovy.sql.InParameter)
    {
        groovy.sql.InParameter r1;
        groovy.sql.Sql$33 $r0;

        r1 := @parameter0: groovy.sql.InParameter;

        $r0 = new groovy.sql.Sql$33;

        specialinvoke $r0.<groovy.sql.Sql$33: void <init>(groovy.sql.InParameter)>(r1);

        return $r0;
    }

    public static groovy.sql.ResultSetOutParameter resultSet(int)
    {
        int i0;
        groovy.sql.Sql$34 $r0;

        i0 := @parameter0: int;

        $r0 = new groovy.sql.Sql$34;

        specialinvoke $r0.<groovy.sql.Sql$34: void <init>(int)>(i0);

        return $r0;
    }

    public static groovy.sql.ExpandedVariable expand(java.lang.Object)
    {
        java.lang.Object r1;
        groovy.sql.Sql$35 $r0;

        r1 := @parameter0: java.lang.Object;

        $r0 = new groovy.sql.Sql$35;

        specialinvoke $r0.<groovy.sql.Sql$35: void <init>(java.lang.Object)>(r1);

        return $r0;
    }

    public void <init>(javax.sql.DataSource)
    {
        groovy.sql.Sql r0;
        javax.sql.DataSource r4;
        int $i1;
        java.lang.Class $r1;
        java.lang.String $r2;
        java.util.logging.Logger $r3;

        r0 := @this: groovy.sql.Sql;

        r4 := @parameter0: javax.sql.DataSource;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        $r3 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>($r2);

        r0.<groovy.sql.Sql: java.util.logging.Logger log> = $r3;

        r0.<groovy.sql.Sql: int resultSetType> = 1003;

        r0.<groovy.sql.Sql: int resultSetConcurrency> = 1007;

        $i1 = (int) -1;

        r0.<groovy.sql.Sql: int resultSetHoldability> = $i1;

        r0.<groovy.sql.Sql: int updateCount> = 0;

        r0.<groovy.sql.Sql: javax.sql.DataSource dataSource> = r4;

        return;
    }

    public void <init>(java.sql.Connection)
    {
        java.sql.Connection r4;
        groovy.sql.Sql r0;
        int $i1;
        java.lang.Class $r1;
        java.lang.String $r2;
        java.util.logging.Logger $r3;
        java.lang.NullPointerException $r6;

        r0 := @this: groovy.sql.Sql;

        r4 := @parameter0: java.sql.Connection;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        $r3 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>($r2);

        r0.<groovy.sql.Sql: java.util.logging.Logger log> = $r3;

        r0.<groovy.sql.Sql: int resultSetType> = 1003;

        r0.<groovy.sql.Sql: int resultSetConcurrency> = 1007;

        $i1 = (int) -1;

        r0.<groovy.sql.Sql: int resultSetHoldability> = $i1;

        r0.<groovy.sql.Sql: int updateCount> = 0;

        if r4 != null goto label1;

        $r6 = new java.lang.NullPointerException;

        specialinvoke $r6.<java.lang.NullPointerException: void <init>(java.lang.String)>("Must specify a non-null Connection");

        throw $r6;

     label1:
        r0.<groovy.sql.Sql: java.sql.Connection useConnection> = r4;

        return;
    }

    public void <init>(groovy.sql.Sql)
    {
        java.sql.Connection $r6;
        java.util.logging.Logger $r3;
        groovy.sql.Sql r0, r4;
        javax.sql.DataSource $r5;
        int $i1;
        java.lang.Class $r1;
        java.lang.String $r2;

        r0 := @this: groovy.sql.Sql;

        r4 := @parameter0: groovy.sql.Sql;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        $r3 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>($r2);

        r0.<groovy.sql.Sql: java.util.logging.Logger log> = $r3;

        r0.<groovy.sql.Sql: int resultSetType> = 1003;

        r0.<groovy.sql.Sql: int resultSetConcurrency> = 1007;

        $i1 = (int) -1;

        r0.<groovy.sql.Sql: int resultSetHoldability> = $i1;

        r0.<groovy.sql.Sql: int updateCount> = 0;

        $r5 = r4.<groovy.sql.Sql: javax.sql.DataSource dataSource>;

        r0.<groovy.sql.Sql: javax.sql.DataSource dataSource> = $r5;

        $r6 = r4.<groovy.sql.Sql: java.sql.Connection useConnection>;

        r0.<groovy.sql.Sql: java.sql.Connection useConnection> = $r6;

        return;
    }

    public groovy.sql.DataSet dataSet(java.lang.String)
    {
        groovy.sql.Sql r1;
        java.lang.String r2;
        groovy.sql.DataSet $r0;

        r1 := @this: groovy.sql.Sql;

        r2 := @parameter0: java.lang.String;

        $r0 = new groovy.sql.DataSet;

        specialinvoke $r0.<groovy.sql.DataSet: void <init>(groovy.sql.Sql,java.lang.String)>(r1, r2);

        return $r0;
    }

    public groovy.sql.DataSet dataSet(java.lang.Class)
    {
        groovy.sql.Sql r1;
        java.lang.Class r2;
        groovy.sql.DataSet $r0;

        r1 := @this: groovy.sql.Sql;

        r2 := @parameter0: java.lang.Class;

        $r0 = new groovy.sql.DataSet;

        specialinvoke $r0.<groovy.sql.DataSet: void <init>(groovy.sql.Sql,java.lang.Class)>(r1, r2);

        return $r0;
    }

    public void query(java.lang.String, groovy.lang.Closure) throws java.sql.SQLException
    {
        java.lang.Throwable $r7;
        java.sql.Connection $r1;
        groovy.lang.Closure r6;
        java.util.logging.Level $r11;
        java.sql.SQLException $r8;
        java.sql.ResultSet $r5, r15;
        java.lang.StringBuffer $r9, $r12, $r13;
        groovy.sql.Sql r0;
        java.lang.String r3, $r14;
        java.util.logging.Logger $r4, $r10;
        java.sql.Statement $r2;

        r0 := @this: groovy.sql.Sql;

        r3 := @parameter0: java.lang.String;

        r6 := @parameter1: groovy.lang.Closure;

        $r1 = virtualinvoke r0.<groovy.sql.Sql: java.sql.Connection createConnection()>();

        $r2 = specialinvoke r0.<groovy.sql.Sql: java.sql.Statement createConnection(java.sql.Connection)>($r1);

        virtualinvoke r0.<groovy.sql.Sql: void configure(java.sql.Statement)>($r2);

        r15 = null;

     label1:
        $r4 = r0.<groovy.sql.Sql: java.util.logging.Logger log>;

        virtualinvoke $r4.<java.util.logging.Logger: void fine(java.lang.String)>(r3);

        $r5 = interfaceinvoke $r2.<java.sql.Statement: java.sql.ResultSet executeQuery(java.lang.String)>(r3);

        r15 = $r5;

        virtualinvoke r6.<groovy.lang.Closure: java.lang.Object call(java.lang.Object)>($r5);

     label2:
        virtualinvoke r0.<groovy.sql.Sql: void closeResources(java.sql.Connection,java.sql.Statement,java.sql.ResultSet)>($r1, $r2, $r5);

        goto label6;

     label3:
        $r8 := @caughtexception;

        $r10 = r0.<groovy.sql.Sql: java.util.logging.Logger log>;

        $r11 = <java.util.logging.Level: java.util.logging.Level FINE>;

        $r9 = new java.lang.StringBuffer;

        specialinvoke $r9.<java.lang.StringBuffer: void <init>()>();

        $r12 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Failed to execute: ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r3);

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r10.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r11, $r14, $r8);

        throw $r8;

     label4:
        $r7 := @caughtexception;

     label5:
        virtualinvoke r0.<groovy.sql.Sql: void closeResources(java.sql.Connection,java.sql.Statement,java.sql.ResultSet)>($r1, $r2, r15);

        throw $r7;

     label6:
        return;

        catch java.sql.SQLException from label1 to label2 with label3;
        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label3 to label5 with label4;
    }

    private java.sql.Statement createConnection(java.sql.Connection) throws java.sql.SQLException
    {
        java.sql.Connection r1;
        groovy.sql.Sql r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i7;
        java.sql.Statement $r2, $r3;

        r0 := @this: groovy.sql.Sql;

        r1 := @parameter0: java.sql.Connection;

        $i0 = r0.<groovy.sql.Sql: int resultSetHoldability>;

        $i7 = (int) -1;

        if $i0 != $i7 goto label1;

        $i5 = r0.<groovy.sql.Sql: int resultSetType>;

        $i4 = r0.<groovy.sql.Sql: int resultSetConcurrency>;

        $r3 = interfaceinvoke r1.<java.sql.Connection: java.sql.Statement createStatement(int,int)>($i5, $i4);

        return $r3;

     label1:
        $i3 = r0.<groovy.sql.Sql: int resultSetType>;

        $i2 = r0.<groovy.sql.Sql: int resultSetConcurrency>;

        $i1 = r0.<groovy.sql.Sql: int resultSetHoldability>;

        $r2 = interfaceinvoke r1.<java.sql.Connection: java.sql.Statement createStatement(int,int,int)>($i3, $i2, $i1);

        return $r2;
    }

    public void query(java.lang.String, java.util.List, groovy.lang.Closure) throws java.sql.SQLException
    {
        java.lang.Throwable $r8;
        java.sql.Connection $r1;
        groovy.lang.Closure r7;
        java.util.logging.Level $r12;
        java.sql.SQLException $r9;
        java.sql.ResultSet $r6, r17;
        java.lang.StringBuffer $r10, $r13, $r14;
        groovy.sql.Sql r0;
        java.lang.String r2, $r15;
        java.util.logging.Logger $r3, $r11;
        java.sql.PreparedStatement $r4, r16;
        java.util.List r5;

        r0 := @this: groovy.sql.Sql;

        r2 := @parameter0: java.lang.String;

        r5 := @parameter1: java.util.List;

        r7 := @parameter2: groovy.lang.Closure;

        $r1 = virtualinvoke r0.<groovy.sql.Sql: java.sql.Connection createConnection()>();

        r16 = null;

        r17 = null;

     label1:
        $r3 = r0.<groovy.sql.Sql: java.util.logging.Logger log>;

        virtualinvoke $r3.<java.util.logging.Logger: void fine(java.lang.String)>(r2);

        $r4 = interfaceinvoke $r1.<java.sql.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String)>(r2);

        r16 = $r4;

        virtualinvoke r0.<groovy.sql.Sql: void setParameters(java.util.List,java.sql.PreparedStatement)>(r5, $r4);

        virtualinvoke r0.<groovy.sql.Sql: void configure(java.sql.Statement)>($r4);

        $r6 = interfaceinvoke $r4.<java.sql.PreparedStatement: java.sql.ResultSet executeQuery()>();

        r17 = $r6;

        virtualinvoke r7.<groovy.lang.Closure: java.lang.Object call(java.lang.Object)>($r6);

     label2:
        virtualinvoke r0.<groovy.sql.Sql: void closeResources(java.sql.Connection,java.sql.Statement,java.sql.ResultSet)>($r1, $r4, $r6);

        goto label6;

     label3:
        $r9 := @caughtexception;

        $r11 = r0.<groovy.sql.Sql: java.util.logging.Logger log>;

        $r12 = <java.util.logging.Level: java.util.logging.Level FINE>;

        $r10 = new java.lang.StringBuffer;

        specialinvoke $r10.<java.lang.StringBuffer: void <init>()>();

        $r13 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Failed to execute: ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r2);

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r11.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r12, $r15, $r9);

        throw $r9;

     label4:
        $r8 := @caughtexception;

     label5:
        virtualinvoke r0.<groovy.sql.Sql: void closeResources(java.sql.Connection,java.sql.Statement,java.sql.ResultSet)>($r1, r16, r17);

        throw $r8;

     label6:
        return;

        catch java.sql.SQLException from label1 to label2 with label3;
        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label3 to label5 with label4;
    }

    public void query(groovy.lang.GString, groovy.lang.Closure) throws java.sql.SQLException
    {
        groovy.lang.GString r1;
        java.util.List $r2;
        groovy.sql.Sql r0;
        groovy.lang.Closure r4;
        java.lang.String $r3;

        r0 := @this: groovy.sql.Sql;

        r1 := @parameter0: groovy.lang.GString;

        r4 := @parameter1: groovy.lang.Closure;

        $r2 = virtualinvoke r0.<groovy.sql.Sql: java.util.List getParameters(groovy.lang.GString)>(r1);

        $r3 = virtualinvoke r0.<groovy.sql.Sql: java.lang.String asSql(groovy.lang.GString,java.util.List)>(r1, $r2);

        virtualinvoke r0.<groovy.sql.Sql: void query(java.lang.String,java.util.List,groovy.lang.Closure)>($r3, $r2, r4);

        return;
    }

    public void eachRow(java.lang.String, groovy.lang.Closure) throws java.sql.SQLException
    {
        groovy.sql.Sql r0;
        groovy.lang.Closure r2;
        java.lang.String r1;

        r0 := @this: groovy.sql.Sql;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: groovy.lang.Closure;

        virtualinvoke r0.<groovy.sql.Sql: void eachRow(java.lang.String,groovy.lang.Closure,groovy.lang.Closure)>(r1, null, r2);

        return;
    }

    public void eachRow(java.lang.String, groovy.lang.Closure, groovy.lang.Closure) throws java.sql.SQLException
    {
        java.lang.Throwable $r11;
        java.sql.Connection $r1;
        groovy.lang.Closure r6, r9;
        java.util.logging.Level $r15;
        java.sql.SQLException $r12;
        groovy.sql.GroovyResultSetProxy $r7;
        java.sql.ResultSet $r5, r19;
        java.lang.StringBuffer $r13, $r16, $r17;
        groovy.sql.Sql r0;
        java.lang.String r3, $r18;
        boolean $z0;
        java.util.logging.Logger $r4, $r14;
        groovy.sql.GroovyResultSet $r8;
        java.sql.Statement $r2;
        java.sql.ResultSetMetaData $r10;

        r0 := @this: groovy.sql.Sql;

        r3 := @parameter0: java.lang.String;

        r6 := @parameter1: groovy.lang.Closure;

        r9 := @parameter2: groovy.lang.Closure;

        $r1 = virtualinvoke r0.<groovy.sql.Sql: java.sql.Connection createConnection()>();

        $r2 = specialinvoke r0.<groovy.sql.Sql: java.sql.Statement createConnection(java.sql.Connection)>($r1);

        virtualinvoke r0.<groovy.sql.Sql: void configure(java.sql.Statement)>($r2);

        r19 = null;

     label1:
        $r4 = r0.<groovy.sql.Sql: java.util.logging.Logger log>;

        virtualinvoke $r4.<java.util.logging.Logger: void fine(java.lang.String)>(r3);

        $r5 = interfaceinvoke $r2.<java.sql.Statement: java.sql.ResultSet executeQuery(java.lang.String)>(r3);

        r19 = $r5;

        if r6 == null goto label2;

        $r10 = interfaceinvoke $r5.<java.sql.ResultSet: java.sql.ResultSetMetaData getMetaData()>();

        virtualinvoke r6.<groovy.lang.Closure: java.lang.Object call(java.lang.Object)>($r10);

     label2:
        $r7 = new groovy.sql.GroovyResultSetProxy;

        specialinvoke $r7.<groovy.sql.GroovyResultSetProxy: void <init>(java.sql.ResultSet)>($r5);

        $r8 = virtualinvoke $r7.<groovy.sql.GroovyResultSetProxy: groovy.sql.GroovyResultSet getImpl()>();

     label3:
        $z0 = interfaceinvoke $r8.<groovy.sql.GroovyResultSet: boolean next()>();

        if $z0 == 0 goto label4;

        virtualinvoke r9.<groovy.lang.Closure: java.lang.Object call(java.lang.Object)>($r8);

        goto label3;

     label4:
        virtualinvoke r0.<groovy.sql.Sql: void closeResources(java.sql.Connection,java.sql.Statement,java.sql.ResultSet)>($r1, $r2, $r5);

        goto label8;

     label5:
        $r12 := @caughtexception;

        $r14 = r0.<groovy.sql.Sql: java.util.logging.Logger log>;

        $r15 = <java.util.logging.Level: java.util.logging.Level FINE>;

        $r13 = new java.lang.StringBuffer;

        specialinvoke $r13.<java.lang.StringBuffer: void <init>()>();

        $r16 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Failed to execute: ");

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r3);

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r14.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r15, $r18, $r12);

        throw $r12;

     label6:
        $r11 := @caughtexception;

     label7:
        virtualinvoke r0.<groovy.sql.Sql: void closeResources(java.sql.Connection,java.sql.Statement,java.sql.ResultSet)>($r1, $r2, r19);

        throw $r11;

     label8:
        return;

        catch java.sql.SQLException from label1 to label4 with label5;
        catch java.lang.Throwable from label1 to label4 with label6;
        catch java.lang.Throwable from label5 to label7 with label6;
    }

    public void eachRow(java.lang.String, java.util.List, groovy.lang.Closure) throws java.sql.SQLException
    {
        java.lang.Throwable $r10;
        java.sql.Connection $r1;
        groovy.lang.Closure r9;
        java.util.logging.Level $r14;
        java.sql.SQLException $r11;
        groovy.sql.GroovyResultSetProxy $r7;
        java.sql.ResultSet $r6, r19;
        java.lang.StringBuffer $r12, $r15, $r16;
        groovy.sql.Sql r0;
        java.lang.String r2, $r17;
        boolean $z0;
        java.util.logging.Logger $r3, $r13;
        java.sql.PreparedStatement $r4, r18;
        groovy.sql.GroovyResultSet $r8;
        java.util.List r5;

        r0 := @this: groovy.sql.Sql;

        r2 := @parameter0: java.lang.String;

        r5 := @parameter1: java.util.List;

        r9 := @parameter2: groovy.lang.Closure;

        $r1 = virtualinvoke r0.<groovy.sql.Sql: java.sql.Connection createConnection()>();

        r18 = null;

        r19 = null;

     label1:
        $r3 = r0.<groovy.sql.Sql: java.util.logging.Logger log>;

        virtualinvoke $r3.<java.util.logging.Logger: void fine(java.lang.String)>(r2);

        $r4 = interfaceinvoke $r1.<java.sql.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String)>(r2);

        r18 = $r4;

        virtualinvoke r0.<groovy.sql.Sql: void setParameters(java.util.List,java.sql.PreparedStatement)>(r5, $r4);

        virtualinvoke r0.<groovy.sql.Sql: void configure(java.sql.Statement)>($r4);

        $r6 = interfaceinvoke $r4.<java.sql.PreparedStatement: java.sql.ResultSet executeQuery()>();

        r19 = $r6;

        $r7 = new groovy.sql.GroovyResultSetProxy;

        specialinvoke $r7.<groovy.sql.GroovyResultSetProxy: void <init>(java.sql.ResultSet)>($r6);

        $r8 = virtualinvoke $r7.<groovy.sql.GroovyResultSetProxy: groovy.sql.GroovyResultSet getImpl()>();

     label2:
        $z0 = interfaceinvoke $r8.<groovy.sql.GroovyResultSet: boolean next()>();

        if $z0 == 0 goto label3;

        virtualinvoke r9.<groovy.lang.Closure: java.lang.Object call(java.lang.Object)>($r8);

        goto label2;

     label3:
        virtualinvoke r0.<groovy.sql.Sql: void closeResources(java.sql.Connection,java.sql.Statement,java.sql.ResultSet)>($r1, $r4, $r6);

        goto label7;

     label4:
        $r11 := @caughtexception;

        $r13 = r0.<groovy.sql.Sql: java.util.logging.Logger log>;

        $r14 = <java.util.logging.Level: java.util.logging.Level FINE>;

        $r12 = new java.lang.StringBuffer;

        specialinvoke $r12.<java.lang.StringBuffer: void <init>()>();

        $r15 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Failed to execute: ");

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r2);

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r13.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r14, $r17, $r11);

        throw $r11;

     label5:
        $r10 := @caughtexception;

     label6:
        virtualinvoke r0.<groovy.sql.Sql: void closeResources(java.sql.Connection,java.sql.Statement,java.sql.ResultSet)>($r1, r18, r19);

        throw $r10;

     label7:
        return;

        catch java.sql.SQLException from label1 to label3 with label4;
        catch java.lang.Throwable from label1 to label3 with label5;
        catch java.lang.Throwable from label4 to label6 with label5;
    }

    public void eachRow(groovy.lang.GString, groovy.lang.Closure) throws java.sql.SQLException
    {
        groovy.lang.GString r1;
        java.util.List $r2;
        groovy.sql.Sql r0;
        groovy.lang.Closure r4;
        java.lang.String $r3;

        r0 := @this: groovy.sql.Sql;

        r1 := @parameter0: groovy.lang.GString;

        r4 := @parameter1: groovy.lang.Closure;

        $r2 = virtualinvoke r0.<groovy.sql.Sql: java.util.List getParameters(groovy.lang.GString)>(r1);

        $r3 = virtualinvoke r0.<groovy.sql.Sql: java.lang.String asSql(groovy.lang.GString,java.util.List)>(r1, $r2);

        virtualinvoke r0.<groovy.sql.Sql: void eachRow(java.lang.String,java.util.List,groovy.lang.Closure)>($r3, $r2, r4);

        return;
    }

    public void queryEach(java.lang.String, groovy.lang.Closure) throws java.sql.SQLException
    {
        groovy.sql.Sql r0;
        groovy.lang.Closure r2;
        java.lang.String r1;

        r0 := @this: groovy.sql.Sql;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: groovy.lang.Closure;

        specialinvoke r0.<groovy.sql.Sql: void warnDeprecated()>();

        virtualinvoke r0.<groovy.sql.Sql: void eachRow(java.lang.String,groovy.lang.Closure)>(r1, r2);

        return;
    }

    public void queryEach(java.lang.String, java.util.List, groovy.lang.Closure) throws java.sql.SQLException
    {
        java.util.List r2;
        groovy.sql.Sql r0;
        groovy.lang.Closure r3;
        java.lang.String r1;

        r0 := @this: groovy.sql.Sql;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.util.List;

        r3 := @parameter2: groovy.lang.Closure;

        specialinvoke r0.<groovy.sql.Sql: void warnDeprecated()>();

        virtualinvoke r0.<groovy.sql.Sql: void eachRow(java.lang.String,java.util.List,groovy.lang.Closure)>(r1, r2, r3);

        return;
    }

    public void queryEach(groovy.lang.GString, groovy.lang.Closure) throws java.sql.SQLException
    {
        groovy.sql.Sql r0;
        groovy.lang.GString r1;
        groovy.lang.Closure r2;

        r0 := @this: groovy.sql.Sql;

        r1 := @parameter0: groovy.lang.GString;

        r2 := @parameter1: groovy.lang.Closure;

        specialinvoke r0.<groovy.sql.Sql: void warnDeprecated()>();

        virtualinvoke r0.<groovy.sql.Sql: void eachRow(groovy.lang.GString,groovy.lang.Closure)>(r1, r2);

        return;
    }

    public java.util.List rows(java.lang.String) throws java.sql.SQLException
    {
        groovy.sql.Sql r0;
        java.util.List $r2;
        java.lang.String r1;

        r0 := @this: groovy.sql.Sql;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<groovy.sql.Sql: java.util.List rows(java.lang.String,groovy.lang.Closure)>(r1, null);

        return $r2;
    }

    public java.util.List rows(groovy.lang.GString) throws java.sql.SQLException
    {
        groovy.lang.GString r1;
        java.util.List $r2, $r4;
        groovy.sql.Sql r0;
        java.lang.String $r3;

        r0 := @this: groovy.sql.Sql;

        r1 := @parameter0: groovy.lang.GString;

        $r2 = virtualinvoke r0.<groovy.sql.Sql: java.util.List getParameters(groovy.lang.GString)>(r1);

        $r3 = virtualinvoke r0.<groovy.sql.Sql: java.lang.String asSql(groovy.lang.GString,java.util.List)>(r1, $r2);

        $r4 = virtualinvoke r0.<groovy.sql.Sql: java.util.List rows(java.lang.String,java.util.List)>($r3, $r2);

        return $r4;
    }

    public java.util.List rows(java.lang.String, groovy.lang.Closure) throws java.sql.SQLException
    {
        java.lang.Throwable $r10;
        java.sql.Connection $r2;
        groovy.sql.GroovyRowResult $r8;
        groovy.lang.Closure r7;
        java.util.ArrayList $r0;
        java.util.logging.Level $r14;
        java.sql.SQLException $r11;
        java.sql.ResultSet $r6, r18;
        java.lang.StringBuffer $r12, $r15, $r16;
        groovy.sql.Sql r1;
        java.lang.String r4, $r17;
        boolean $z0;
        java.util.logging.Logger $r5, $r13;
        java.sql.Statement $r3;
        java.sql.ResultSetMetaData $r9;

        r1 := @this: groovy.sql.Sql;

        r4 := @parameter0: java.lang.String;

        r7 := @parameter1: groovy.lang.Closure;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r2 = virtualinvoke r1.<groovy.sql.Sql: java.sql.Connection createConnection()>();

        $r3 = specialinvoke r1.<groovy.sql.Sql: java.sql.Statement createConnection(java.sql.Connection)>($r2);

        virtualinvoke r1.<groovy.sql.Sql: void configure(java.sql.Statement)>($r3);

        r18 = null;

     label1:
        $r5 = r1.<groovy.sql.Sql: java.util.logging.Logger log>;

        virtualinvoke $r5.<java.util.logging.Logger: void fine(java.lang.String)>(r4);

        $r6 = interfaceinvoke $r3.<java.sql.Statement: java.sql.ResultSet executeQuery(java.lang.String)>(r4);

        r18 = $r6;

        if r7 == null goto label2;

        $r9 = interfaceinvoke $r6.<java.sql.ResultSet: java.sql.ResultSetMetaData getMetaData()>();

        virtualinvoke r7.<groovy.lang.Closure: java.lang.Object call(java.lang.Object)>($r9);

     label2:
        $z0 = interfaceinvoke $r6.<java.sql.ResultSet: boolean next()>();

        if $z0 == 0 goto label3;

        $r8 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: groovy.sql.GroovyRowResult toRowResult(java.sql.ResultSet)>($r6);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r8);

        goto label2;

     label3:
        virtualinvoke r1.<groovy.sql.Sql: void closeResources(java.sql.Connection,java.sql.Statement,java.sql.ResultSet)>($r2, $r3, $r6);

        return $r0;

     label4:
        $r11 := @caughtexception;

        $r13 = r1.<groovy.sql.Sql: java.util.logging.Logger log>;

        $r14 = <java.util.logging.Level: java.util.logging.Level FINE>;

        $r12 = new java.lang.StringBuffer;

        specialinvoke $r12.<java.lang.StringBuffer: void <init>()>();

        $r15 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Failed to execute: ");

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r4);

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r13.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r14, $r17, $r11);

        throw $r11;

     label5:
        $r10 := @caughtexception;

     label6:
        virtualinvoke r1.<groovy.sql.Sql: void closeResources(java.sql.Connection,java.sql.Statement,java.sql.ResultSet)>($r2, $r3, r18);

        throw $r10;

        catch java.sql.SQLException from label1 to label3 with label4;
        catch java.lang.Throwable from label1 to label3 with label5;
        catch java.lang.Throwable from label4 to label6 with label5;
    }

    public java.util.List rows(java.lang.String, java.util.List) throws java.sql.SQLException
    {
        java.lang.Throwable $r9;
        java.sql.Connection $r2;
        groovy.sql.GroovyRowResult $r8;
        java.util.ArrayList $r0;
        java.util.logging.Level $r13;
        java.sql.SQLException $r10;
        java.sql.ResultSet $r7, r18;
        java.lang.StringBuffer $r11, $r14, $r15;
        groovy.sql.Sql r1;
        java.lang.String r3, $r16;
        boolean $z0;
        java.util.logging.Logger $r4, $r12;
        java.sql.PreparedStatement $r5, r17;
        java.util.List r6;

        r1 := @this: groovy.sql.Sql;

        r3 := @parameter0: java.lang.String;

        r6 := @parameter1: java.util.List;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r2 = virtualinvoke r1.<groovy.sql.Sql: java.sql.Connection createConnection()>();

        r17 = null;

        r18 = null;

     label1:
        $r4 = r1.<groovy.sql.Sql: java.util.logging.Logger log>;

        virtualinvoke $r4.<java.util.logging.Logger: void fine(java.lang.String)>(r3);

        $r5 = interfaceinvoke $r2.<java.sql.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String)>(r3);

        r17 = $r5;

        virtualinvoke r1.<groovy.sql.Sql: void setParameters(java.util.List,java.sql.PreparedStatement)>(r6, $r5);

        virtualinvoke r1.<groovy.sql.Sql: void configure(java.sql.Statement)>($r5);

        $r7 = interfaceinvoke $r5.<java.sql.PreparedStatement: java.sql.ResultSet executeQuery()>();

        r18 = $r7;

     label2:
        $z0 = interfaceinvoke $r7.<java.sql.ResultSet: boolean next()>();

        if $z0 == 0 goto label3;

        $r8 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: groovy.sql.GroovyRowResult toRowResult(java.sql.ResultSet)>($r7);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r8);

        goto label2;

     label3:
        virtualinvoke r1.<groovy.sql.Sql: void closeResources(java.sql.Connection,java.sql.Statement,java.sql.ResultSet)>($r2, $r5, $r7);

        return $r0;

     label4:
        $r10 := @caughtexception;

        $r12 = r1.<groovy.sql.Sql: java.util.logging.Logger log>;

        $r13 = <java.util.logging.Level: java.util.logging.Level FINE>;

        $r11 = new java.lang.StringBuffer;

        specialinvoke $r11.<java.lang.StringBuffer: void <init>()>();

        $r14 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Failed to execute: ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r3);

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r12.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r13, $r16, $r10);

        throw $r10;

     label5:
        $r9 := @caughtexception;

     label6:
        virtualinvoke r1.<groovy.sql.Sql: void closeResources(java.sql.Connection,java.sql.Statement,java.sql.ResultSet)>($r2, r17, r18);

        throw $r9;

        catch java.sql.SQLException from label1 to label3 with label4;
        catch java.lang.Throwable from label1 to label3 with label5;
        catch java.lang.Throwable from label4 to label6 with label5;
    }

    public java.lang.Object firstRow(java.lang.String) throws java.sql.SQLException
    {
        java.util.List $r2;
        groovy.sql.Sql r0;
        java.lang.Object $r3;
        java.lang.String r1;
        boolean $z0;

        r0 := @this: groovy.sql.Sql;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<groovy.sql.Sql: java.util.List rows(java.lang.String)>(r1);

        $z0 = interfaceinvoke $r2.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return null;

     label1:
        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(0);

        return $r3;
    }

    public java.lang.Object firstRow(groovy.lang.GString) throws java.sql.SQLException
    {
        groovy.lang.GString r1;
        java.util.List $r2;
        groovy.sql.Sql r0;
        java.lang.Object $r4;
        java.lang.String $r3;

        r0 := @this: groovy.sql.Sql;

        r1 := @parameter0: groovy.lang.GString;

        $r2 = virtualinvoke r0.<groovy.sql.Sql: java.util.List getParameters(groovy.lang.GString)>(r1);

        $r3 = virtualinvoke r0.<groovy.sql.Sql: java.lang.String asSql(groovy.lang.GString,java.util.List)>(r1, $r2);

        $r4 = virtualinvoke r0.<groovy.sql.Sql: java.lang.Object firstRow(java.lang.String,java.util.List)>($r3, $r2);

        return $r4;
    }

    public java.lang.Object firstRow(java.lang.String, java.util.List) throws java.sql.SQLException
    {
        java.util.List r2, $r3;
        groovy.sql.Sql r0;
        java.lang.Object $r4;
        java.lang.String r1;
        boolean $z0;

        r0 := @this: groovy.sql.Sql;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.util.List;

        $r3 = virtualinvoke r0.<groovy.sql.Sql: java.util.List rows(java.lang.String,java.util.List)>(r1, r2);

        $z0 = interfaceinvoke $r3.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return null;

     label1:
        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(0);

        return $r4;
    }

    public boolean execute(java.lang.String) throws java.sql.SQLException
    {
        java.lang.Throwable $r5;
        java.sql.Connection $r1;
        java.util.logging.Level $r9;
        java.sql.SQLException $r6;
        java.lang.StringBuffer $r7, $r10, $r11;
        groovy.sql.Sql r0;
        int $i0;
        java.lang.String r2, $r12;
        boolean $z0;
        java.util.logging.Logger $r3, $r8;
        java.sql.Statement $r4, r13;

        r0 := @this: groovy.sql.Sql;

        r2 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<groovy.sql.Sql: java.sql.Connection createConnection()>();

        r13 = null;

     label1:
        $r3 = r0.<groovy.sql.Sql: java.util.logging.Logger log>;

        virtualinvoke $r3.<java.util.logging.Logger: void fine(java.lang.String)>(r2);

        $r4 = specialinvoke r0.<groovy.sql.Sql: java.sql.Statement createConnection(java.sql.Connection)>($r1);

        r13 = $r4;

        virtualinvoke r0.<groovy.sql.Sql: void configure(java.sql.Statement)>($r4);

        $z0 = interfaceinvoke $r4.<java.sql.Statement: boolean execute(java.lang.String)>(r2);

        $i0 = interfaceinvoke $r4.<java.sql.Statement: int getUpdateCount()>();

        r0.<groovy.sql.Sql: int updateCount> = $i0;

     label2:
        virtualinvoke r0.<groovy.sql.Sql: void closeResources(java.sql.Connection,java.sql.Statement)>($r1, $r4);

        return $z0;

     label3:
        $r6 := @caughtexception;

        $r8 = r0.<groovy.sql.Sql: java.util.logging.Logger log>;

        $r9 = <java.util.logging.Level: java.util.logging.Level FINE>;

        $r7 = new java.lang.StringBuffer;

        specialinvoke $r7.<java.lang.StringBuffer: void <init>()>();

        $r10 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Failed to execute: ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r2);

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r8.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r9, $r12, $r6);

        throw $r6;

     label4:
        $r5 := @caughtexception;

     label5:
        virtualinvoke r0.<groovy.sql.Sql: void closeResources(java.sql.Connection,java.sql.Statement)>($r1, r13);

        throw $r5;

        catch java.sql.SQLException from label1 to label2 with label3;
        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label3 to label5 with label4;
    }

    public boolean execute(java.lang.String, java.util.List) throws java.sql.SQLException
    {
        java.lang.Throwable $r6;
        java.sql.Connection $r1;
        java.util.logging.Level $r10;
        java.sql.SQLException $r7;
        java.lang.StringBuffer $r8, $r11, $r12;
        groovy.sql.Sql r0;
        int $i0;
        java.lang.String r2, $r13;
        boolean $z0;
        java.util.logging.Logger $r3, $r9;
        java.sql.PreparedStatement $r4, r14;
        java.util.List r5;

        r0 := @this: groovy.sql.Sql;

        r2 := @parameter0: java.lang.String;

        r5 := @parameter1: java.util.List;

        $r1 = virtualinvoke r0.<groovy.sql.Sql: java.sql.Connection createConnection()>();

        r14 = null;

     label1:
        $r3 = r0.<groovy.sql.Sql: java.util.logging.Logger log>;

        virtualinvoke $r3.<java.util.logging.Logger: void fine(java.lang.String)>(r2);

        $r4 = interfaceinvoke $r1.<java.sql.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String)>(r2);

        r14 = $r4;

        virtualinvoke r0.<groovy.sql.Sql: void setParameters(java.util.List,java.sql.PreparedStatement)>(r5, $r4);

        virtualinvoke r0.<groovy.sql.Sql: void configure(java.sql.Statement)>($r4);

        $z0 = interfaceinvoke $r4.<java.sql.PreparedStatement: boolean execute()>();

        $i0 = interfaceinvoke $r4.<java.sql.PreparedStatement: int getUpdateCount()>();

        r0.<groovy.sql.Sql: int updateCount> = $i0;

     label2:
        virtualinvoke r0.<groovy.sql.Sql: void closeResources(java.sql.Connection,java.sql.Statement)>($r1, $r4);

        return $z0;

     label3:
        $r7 := @caughtexception;

        $r9 = r0.<groovy.sql.Sql: java.util.logging.Logger log>;

        $r10 = <java.util.logging.Level: java.util.logging.Level FINE>;

        $r8 = new java.lang.StringBuffer;

        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();

        $r11 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Failed to execute: ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r2);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r9.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r10, $r13, $r7);

        throw $r7;

     label4:
        $r6 := @caughtexception;

     label5:
        virtualinvoke r0.<groovy.sql.Sql: void closeResources(java.sql.Connection,java.sql.Statement)>($r1, r14);

        throw $r6;

        catch java.sql.SQLException from label1 to label2 with label3;
        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label3 to label5 with label4;
    }

    public boolean execute(groovy.lang.GString) throws java.sql.SQLException
    {
        groovy.lang.GString r1;
        java.util.List $r2;
        groovy.sql.Sql r0;
        java.lang.String $r3;
        boolean $z0;

        r0 := @this: groovy.sql.Sql;

        r1 := @parameter0: groovy.lang.GString;

        $r2 = virtualinvoke r0.<groovy.sql.Sql: java.util.List getParameters(groovy.lang.GString)>(r1);

        $r3 = virtualinvoke r0.<groovy.sql.Sql: java.lang.String asSql(groovy.lang.GString,java.util.List)>(r1, $r2);

        $z0 = virtualinvoke r0.<groovy.sql.Sql: boolean execute(java.lang.String,java.util.List)>($r3, $r2);

        return $z0;
    }

    public java.util.List executeInsert(java.lang.String) throws java.sql.SQLException
    {
        java.lang.Throwable $r10;
        java.sql.Connection $r1;
        java.util.ArrayList $r5, $r8;
        java.util.logging.Level $r14;
        java.sql.SQLException $r11;
        java.sql.ResultSet $r6;
        java.lang.StringBuffer $r12, $r15, $r16;
        groovy.sql.Sql r0;
        int $i0, $i1, i2;
        java.lang.String r2, $r17;
        boolean $z0;
        java.util.logging.Logger $r3, $r13;
        java.sql.Statement $r4, r18;
        java.lang.Object $r9;
        java.sql.ResultSetMetaData $r7;

        r0 := @this: groovy.sql.Sql;

        r2 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<groovy.sql.Sql: java.sql.Connection createConnection()>();

        r18 = null;

     label1:
        $r3 = r0.<groovy.sql.Sql: java.util.logging.Logger log>;

        virtualinvoke $r3.<java.util.logging.Logger: void fine(java.lang.String)>(r2);

        $r4 = specialinvoke r0.<groovy.sql.Sql: java.sql.Statement createConnection(java.sql.Connection)>($r1);

        r18 = $r4;

        virtualinvoke r0.<groovy.sql.Sql: void configure(java.sql.Statement)>($r4);

        interfaceinvoke $r4.<java.sql.Statement: boolean execute(java.lang.String,int)>(r2, 1);

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        $r6 = interfaceinvoke $r4.<java.sql.Statement: java.sql.ResultSet getGeneratedKeys()>();

        $r7 = interfaceinvoke $r6.<java.sql.ResultSet: java.sql.ResultSetMetaData getMetaData()>();

        $i0 = interfaceinvoke $r7.<java.sql.ResultSetMetaData: int getColumnCount()>();

     label2:
        $z0 = interfaceinvoke $r6.<java.sql.ResultSet: boolean next()>();

        if $z0 == 0 goto label5;

        $r8 = new java.util.ArrayList;

        specialinvoke $r8.<java.util.ArrayList: void <init>(int)>($i0);

        i2 = 1;

     label3:
        if i2 > $i0 goto label4;

        $r9 = interfaceinvoke $r6.<java.sql.ResultSet: java.lang.Object getObject(int)>(i2);

        interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>($r9);

        i2 = i2 + 1;

        goto label3;

     label4:
        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r8);

        goto label2;

     label5:
        $i1 = interfaceinvoke $r4.<java.sql.Statement: int getUpdateCount()>();

        r0.<groovy.sql.Sql: int updateCount> = $i1;

     label6:
        virtualinvoke r0.<groovy.sql.Sql: void closeResources(java.sql.Connection,java.sql.Statement)>($r1, $r4);

        return $r5;

     label7:
        $r11 := @caughtexception;

        $r13 = r0.<groovy.sql.Sql: java.util.logging.Logger log>;

        $r14 = <java.util.logging.Level: java.util.logging.Level FINE>;

        $r12 = new java.lang.StringBuffer;

        specialinvoke $r12.<java.lang.StringBuffer: void <init>()>();

        $r15 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Failed to execute: ");

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r2);

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r13.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r14, $r17, $r11);

        throw $r11;

     label8:
        $r10 := @caughtexception;

     label9:
        virtualinvoke r0.<groovy.sql.Sql: void closeResources(java.sql.Connection,java.sql.Statement)>($r1, r18);

        throw $r10;

        catch java.sql.SQLException from label1 to label6 with label7;
        catch java.lang.Throwable from label1 to label6 with label8;
        catch java.lang.Throwable from label7 to label9 with label8;
    }

    public java.util.List executeInsert(java.lang.String, java.util.List) throws java.sql.SQLException
    {
        java.lang.Throwable $r11;
        java.sql.Connection $r1;
        java.util.ArrayList $r6, $r9;
        java.util.logging.Level $r15;
        java.sql.SQLException $r12;
        java.sql.ResultSet $r7;
        java.lang.StringBuffer $r13, $r16, $r17;
        groovy.sql.Sql r0;
        int $i0, $i1, i2;
        java.lang.String r2, $r18;
        boolean $z0;
        java.util.logging.Logger $r3, $r14;
        java.sql.PreparedStatement $r4, r19;
        java.util.List r5;
        java.lang.Object $r10;
        java.sql.ResultSetMetaData $r8;

        r0 := @this: groovy.sql.Sql;

        r2 := @parameter0: java.lang.String;

        r5 := @parameter1: java.util.List;

        $r1 = virtualinvoke r0.<groovy.sql.Sql: java.sql.Connection createConnection()>();

        r19 = null;

     label1:
        $r3 = r0.<groovy.sql.Sql: java.util.logging.Logger log>;

        virtualinvoke $r3.<java.util.logging.Logger: void fine(java.lang.String)>(r2);

        $r4 = interfaceinvoke $r1.<java.sql.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String,int)>(r2, 1);

        r19 = $r4;

        virtualinvoke r0.<groovy.sql.Sql: void setParameters(java.util.List,java.sql.PreparedStatement)>(r5, $r4);

        virtualinvoke r0.<groovy.sql.Sql: void configure(java.sql.Statement)>($r4);

        $i0 = interfaceinvoke $r4.<java.sql.PreparedStatement: int executeUpdate()>();

        r0.<groovy.sql.Sql: int updateCount> = $i0;

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        $r7 = interfaceinvoke $r4.<java.sql.PreparedStatement: java.sql.ResultSet getGeneratedKeys()>();

        $r8 = interfaceinvoke $r7.<java.sql.ResultSet: java.sql.ResultSetMetaData getMetaData()>();

        $i1 = interfaceinvoke $r8.<java.sql.ResultSetMetaData: int getColumnCount()>();

     label2:
        $z0 = interfaceinvoke $r7.<java.sql.ResultSet: boolean next()>();

        if $z0 == 0 goto label5;

        $r9 = new java.util.ArrayList;

        specialinvoke $r9.<java.util.ArrayList: void <init>(int)>($i1);

        i2 = 1;

     label3:
        if i2 > $i1 goto label4;

        $r10 = interfaceinvoke $r7.<java.sql.ResultSet: java.lang.Object getObject(int)>(i2);

        interfaceinvoke $r9.<java.util.List: boolean add(java.lang.Object)>($r10);

        i2 = i2 + 1;

        goto label3;

     label4:
        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>($r9);

        goto label2;

     label5:
        virtualinvoke r0.<groovy.sql.Sql: void closeResources(java.sql.Connection,java.sql.Statement)>($r1, $r4);

        return $r6;

     label6:
        $r12 := @caughtexception;

        $r14 = r0.<groovy.sql.Sql: java.util.logging.Logger log>;

        $r15 = <java.util.logging.Level: java.util.logging.Level FINE>;

        $r13 = new java.lang.StringBuffer;

        specialinvoke $r13.<java.lang.StringBuffer: void <init>()>();

        $r16 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Failed to execute: ");

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r2);

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r14.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r15, $r18, $r12);

        throw $r12;

     label7:
        $r11 := @caughtexception;

     label8:
        virtualinvoke r0.<groovy.sql.Sql: void closeResources(java.sql.Connection,java.sql.Statement)>($r1, r19);

        throw $r11;

        catch java.sql.SQLException from label1 to label5 with label6;
        catch java.lang.Throwable from label1 to label5 with label7;
        catch java.lang.Throwable from label6 to label8 with label7;
    }

    public java.util.List executeInsert(groovy.lang.GString) throws java.sql.SQLException
    {
        groovy.lang.GString r1;
        java.util.List $r2, $r4;
        groovy.sql.Sql r0;
        java.lang.String $r3;

        r0 := @this: groovy.sql.Sql;

        r1 := @parameter0: groovy.lang.GString;

        $r2 = virtualinvoke r0.<groovy.sql.Sql: java.util.List getParameters(groovy.lang.GString)>(r1);

        $r3 = virtualinvoke r0.<groovy.sql.Sql: java.lang.String asSql(groovy.lang.GString,java.util.List)>(r1, $r2);

        $r4 = virtualinvoke r0.<groovy.sql.Sql: java.util.List executeInsert(java.lang.String,java.util.List)>($r3, $r2);

        return $r4;
    }

    public int executeUpdate(java.lang.String) throws java.sql.SQLException
    {
        java.lang.Throwable $r5;
        java.sql.Connection $r1;
        java.util.logging.Level $r9;
        java.sql.SQLException $r6;
        java.lang.StringBuffer $r7, $r10, $r11;
        groovy.sql.Sql r0;
        int $i0, i1;
        java.lang.String r2, $r12;
        java.util.logging.Logger $r3, $r8;
        java.sql.Statement $r4, r13;

        r0 := @this: groovy.sql.Sql;

        r2 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<groovy.sql.Sql: java.sql.Connection createConnection()>();

        r13 = null;

     label1:
        $r3 = r0.<groovy.sql.Sql: java.util.logging.Logger log>;

        virtualinvoke $r3.<java.util.logging.Logger: void fine(java.lang.String)>(r2);

        $r4 = specialinvoke r0.<groovy.sql.Sql: java.sql.Statement createConnection(java.sql.Connection)>($r1);

        r13 = $r4;

        virtualinvoke r0.<groovy.sql.Sql: void configure(java.sql.Statement)>($r4);

        $i0 = interfaceinvoke $r4.<java.sql.Statement: int executeUpdate(java.lang.String)>(r2);

        r0.<groovy.sql.Sql: int updateCount> = $i0;

        i1 = r0.<groovy.sql.Sql: int updateCount>;

     label2:
        virtualinvoke r0.<groovy.sql.Sql: void closeResources(java.sql.Connection,java.sql.Statement)>($r1, $r4);

        return i1;

     label3:
        $r6 := @caughtexception;

        $r8 = r0.<groovy.sql.Sql: java.util.logging.Logger log>;

        $r9 = <java.util.logging.Level: java.util.logging.Level FINE>;

        $r7 = new java.lang.StringBuffer;

        specialinvoke $r7.<java.lang.StringBuffer: void <init>()>();

        $r10 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Failed to execute: ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r2);

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r8.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r9, $r12, $r6);

        throw $r6;

     label4:
        $r5 := @caughtexception;

     label5:
        virtualinvoke r0.<groovy.sql.Sql: void closeResources(java.sql.Connection,java.sql.Statement)>($r1, r13);

        throw $r5;

        catch java.sql.SQLException from label1 to label2 with label3;
        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label3 to label5 with label4;
    }

    public int executeUpdate(java.lang.String, java.util.List) throws java.sql.SQLException
    {
        java.lang.Throwable $r6;
        java.sql.Connection $r1;
        java.util.logging.Level $r10;
        java.sql.SQLException $r7;
        java.lang.StringBuffer $r8, $r11, $r12;
        groovy.sql.Sql r0;
        int $i0, i1;
        java.lang.String r2, $r13;
        java.util.logging.Logger $r3, $r9;
        java.sql.PreparedStatement $r4, r14;
        java.util.List r5;

        r0 := @this: groovy.sql.Sql;

        r2 := @parameter0: java.lang.String;

        r5 := @parameter1: java.util.List;

        $r1 = virtualinvoke r0.<groovy.sql.Sql: java.sql.Connection createConnection()>();

        r14 = null;

     label1:
        $r3 = r0.<groovy.sql.Sql: java.util.logging.Logger log>;

        virtualinvoke $r3.<java.util.logging.Logger: void fine(java.lang.String)>(r2);

        $r4 = interfaceinvoke $r1.<java.sql.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String)>(r2);

        r14 = $r4;

        virtualinvoke r0.<groovy.sql.Sql: void setParameters(java.util.List,java.sql.PreparedStatement)>(r5, $r4);

        virtualinvoke r0.<groovy.sql.Sql: void configure(java.sql.Statement)>($r4);

        $i0 = interfaceinvoke $r4.<java.sql.PreparedStatement: int executeUpdate()>();

        r0.<groovy.sql.Sql: int updateCount> = $i0;

        i1 = r0.<groovy.sql.Sql: int updateCount>;

     label2:
        virtualinvoke r0.<groovy.sql.Sql: void closeResources(java.sql.Connection,java.sql.Statement)>($r1, $r4);

        return i1;

     label3:
        $r7 := @caughtexception;

        $r9 = r0.<groovy.sql.Sql: java.util.logging.Logger log>;

        $r10 = <java.util.logging.Level: java.util.logging.Level FINE>;

        $r8 = new java.lang.StringBuffer;

        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();

        $r11 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Failed to execute: ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r2);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r9.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r10, $r13, $r7);

        throw $r7;

     label4:
        $r6 := @caughtexception;

     label5:
        virtualinvoke r0.<groovy.sql.Sql: void closeResources(java.sql.Connection,java.sql.Statement)>($r1, r14);

        throw $r6;

        catch java.sql.SQLException from label1 to label2 with label3;
        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label3 to label5 with label4;
    }

    public int executeUpdate(groovy.lang.GString) throws java.sql.SQLException
    {
        groovy.lang.GString r1;
        java.util.List $r2;
        groovy.sql.Sql r0;
        int $i0;
        java.lang.String $r3;

        r0 := @this: groovy.sql.Sql;

        r1 := @parameter0: groovy.lang.GString;

        $r2 = virtualinvoke r0.<groovy.sql.Sql: java.util.List getParameters(groovy.lang.GString)>(r1);

        $r3 = virtualinvoke r0.<groovy.sql.Sql: java.lang.String asSql(groovy.lang.GString,java.util.List)>(r1, $r2);

        $i0 = virtualinvoke r0.<groovy.sql.Sql: int executeUpdate(java.lang.String,java.util.List)>($r3, $r2);

        return $i0;
    }

    public int call(java.lang.String) throws java.lang.Exception
    {
        java.util.List $r2;
        groovy.sql.Sql r0;
        int $i0;
        java.lang.String r1;

        r0 := @this: groovy.sql.Sql;

        r1 := @parameter0: java.lang.String;

        $r2 = <java.util.Collections: java.util.List EMPTY_LIST>;

        $i0 = virtualinvoke r0.<groovy.sql.Sql: int call(java.lang.String,java.util.List)>(r1, $r2);

        return $i0;
    }

    public int call(java.lang.String, java.util.List) throws java.lang.Exception
    {
        java.lang.Throwable $r6;
        java.sql.Connection $r1;
        java.util.logging.Logger $r4, $r9;
        java.util.logging.Level $r10;
        java.util.List r5;
        java.sql.SQLException $r7;
        java.lang.StringBuffer $r8, $r11, $r12;
        groovy.sql.Sql r0;
        int $i0;
        java.sql.CallableStatement $r3;
        java.lang.String r2, $r13;

        r0 := @this: groovy.sql.Sql;

        r2 := @parameter0: java.lang.String;

        r5 := @parameter1: java.util.List;

        $r1 = virtualinvoke r0.<groovy.sql.Sql: java.sql.Connection createConnection()>();

        $r3 = interfaceinvoke $r1.<java.sql.Connection: java.sql.CallableStatement prepareCall(java.lang.String)>(r2);

     label1:
        $r4 = r0.<groovy.sql.Sql: java.util.logging.Logger log>;

        virtualinvoke $r4.<java.util.logging.Logger: void fine(java.lang.String)>(r2);

        virtualinvoke r0.<groovy.sql.Sql: void setParameters(java.util.List,java.sql.PreparedStatement)>(r5, $r3);

        virtualinvoke r0.<groovy.sql.Sql: void configure(java.sql.Statement)>($r3);

        $i0 = interfaceinvoke $r3.<java.sql.CallableStatement: int executeUpdate()>();

     label2:
        virtualinvoke r0.<groovy.sql.Sql: void closeResources(java.sql.Connection,java.sql.Statement)>($r1, $r3);

        return $i0;

     label3:
        $r7 := @caughtexception;

        $r9 = r0.<groovy.sql.Sql: java.util.logging.Logger log>;

        $r10 = <java.util.logging.Level: java.util.logging.Level FINE>;

        $r8 = new java.lang.StringBuffer;

        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();

        $r11 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Failed to execute: ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r2);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r9.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r10, $r13, $r7);

        throw $r7;

     label4:
        $r6 := @caughtexception;

     label5:
        virtualinvoke r0.<groovy.sql.Sql: void closeResources(java.sql.Connection,java.sql.Statement)>($r1, $r3);

        throw $r6;

        catch java.sql.SQLException from label1 to label2 with label3;
        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label3 to label5 with label4;
    }

    public void call(java.lang.String, java.util.List, groovy.lang.Closure) throws java.lang.Exception
    {
        java.sql.Connection $r1;
        groovy.lang.Closure r8;
        groovy.sql.GroovyResultSetProxy $r13;
        java.sql.ResultSet $r14;
        groovy.sql.Sql r0;
        boolean $z0, $z1, $z2, $z3;
        java.util.logging.Logger $r4, $r20;
        java.util.List r5;
        java.sql.CallableStatement $r3;
        java.lang.Throwable $r17;
        java.lang.Object[] $r9, $r10;
        java.util.ArrayList $r6;
        java.util.logging.Level $r21;
        java.sql.SQLException $r18;
        java.lang.StringBuffer $r19, $r22, $r23;
        int $i0, i1, i2;
        java.lang.String r2, $r24;
        java.util.Iterator $r7;
        groovy.sql.GroovyResultSet $r15, $r16;
        java.lang.Object $r11, $r12;

        r0 := @this: groovy.sql.Sql;

        r2 := @parameter0: java.lang.String;

        r5 := @parameter1: java.util.List;

        r8 := @parameter2: groovy.lang.Closure;

        $r1 = virtualinvoke r0.<groovy.sql.Sql: java.sql.Connection createConnection()>();

        $r3 = interfaceinvoke $r1.<java.sql.Connection: java.sql.CallableStatement prepareCall(java.lang.String)>(r2);

     label01:
        $r4 = r0.<groovy.sql.Sql: java.util.logging.Logger log>;

        virtualinvoke $r4.<java.util.logging.Logger: void fine(java.lang.String)>(r2);

        virtualinvoke r0.<groovy.sql.Sql: void setParameters(java.util.List,java.sql.PreparedStatement)>(r5, $r3);

        interfaceinvoke $r3.<java.sql.CallableStatement: boolean execute()>();

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        i1 = 0;

        i2 = 0;

        $r7 = interfaceinvoke r5.<java.util.List: java.util.Iterator iterator()>();

     label02:
        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label07;

        $r11 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        $z1 = $r11 instanceof groovy.sql.OutParameter;

        if $z1 == 0 goto label06;

        $z2 = $r11 instanceof groovy.sql.ResultSetOutParameter;

        if $z2 == 0 goto label03;

        $r16 = staticinvoke <groovy.sql.CallResultSet: groovy.sql.GroovyResultSet getImpl(java.sql.CallableStatement,int)>($r3, i1);

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>($r16);

        goto label05;

     label03:
        $i0 = i1 + 1;

        $r12 = interfaceinvoke $r3.<java.sql.CallableStatement: java.lang.Object getObject(int)>($i0);

        $z3 = $r12 instanceof java.sql.ResultSet;

        if $z3 == 0 goto label04;

        $r13 = new groovy.sql.GroovyResultSetProxy;

        $r14 = (java.sql.ResultSet) $r12;

        specialinvoke $r13.<groovy.sql.GroovyResultSetProxy: void <init>(java.sql.ResultSet)>($r14);

        $r15 = virtualinvoke $r13.<groovy.sql.GroovyResultSetProxy: groovy.sql.GroovyResultSet getImpl()>();

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>($r15);

        goto label05;

     label04:
        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>($r12);

     label05:
        i2 = i2 + 1;

     label06:
        i1 = i1 + 1;

        goto label02;

     label07:
        $r9 = newarray (java.lang.Object)[i2];

        $r10 = interfaceinvoke $r6.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r9);

        virtualinvoke r8.<groovy.lang.Closure: java.lang.Object call(java.lang.Object[])>($r10);

     label08:
        virtualinvoke r0.<groovy.sql.Sql: void closeResources(java.sql.Connection,java.sql.Statement)>($r1, $r3);

        goto label12;

     label09:
        $r18 := @caughtexception;

        $r20 = r0.<groovy.sql.Sql: java.util.logging.Logger log>;

        $r21 = <java.util.logging.Level: java.util.logging.Level WARNING>;

        $r19 = new java.lang.StringBuffer;

        specialinvoke $r19.<java.lang.StringBuffer: void <init>()>();

        $r22 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Failed to execute: ");

        $r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r2);

        $r24 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r20.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r21, $r24, $r18);

        throw $r18;

     label10:
        $r17 := @caughtexception;

     label11:
        virtualinvoke r0.<groovy.sql.Sql: void closeResources(java.sql.Connection,java.sql.Statement)>($r1, $r3);

        throw $r17;

     label12:
        return;

        catch java.sql.SQLException from label01 to label08 with label09;
        catch java.lang.Throwable from label01 to label08 with label10;
        catch java.lang.Throwable from label09 to label11 with label10;
    }

    public int call(groovy.lang.GString) throws java.lang.Exception
    {
        groovy.lang.GString r1;
        java.util.List $r2;
        groovy.sql.Sql r0;
        int $i0;
        java.lang.String $r3;

        r0 := @this: groovy.sql.Sql;

        r1 := @parameter0: groovy.lang.GString;

        $r2 = virtualinvoke r0.<groovy.sql.Sql: java.util.List getParameters(groovy.lang.GString)>(r1);

        $r3 = virtualinvoke r0.<groovy.sql.Sql: java.lang.String asSql(groovy.lang.GString,java.util.List)>(r1, $r2);

        $i0 = virtualinvoke r0.<groovy.sql.Sql: int call(java.lang.String,java.util.List)>($r3, $r2);

        return $i0;
    }

    public void call(groovy.lang.GString, groovy.lang.Closure) throws java.lang.Exception
    {
        groovy.lang.GString r1;
        java.util.List $r2;
        groovy.sql.Sql r0;
        groovy.lang.Closure r4;
        java.lang.String $r3;

        r0 := @this: groovy.sql.Sql;

        r1 := @parameter0: groovy.lang.GString;

        r4 := @parameter1: groovy.lang.Closure;

        $r2 = virtualinvoke r0.<groovy.sql.Sql: java.util.List getParameters(groovy.lang.GString)>(r1);

        $r3 = virtualinvoke r0.<groovy.sql.Sql: java.lang.String asSql(groovy.lang.GString,java.util.List)>(r1, $r2);

        virtualinvoke r0.<groovy.sql.Sql: void call(java.lang.String,java.util.List,groovy.lang.Closure)>($r3, $r2, r4);

        return;
    }

    public void close() throws java.sql.SQLException
    {
        groovy.sql.Sql r0;
        java.sql.Connection $r1, $r2;

        r0 := @this: groovy.sql.Sql;

        $r1 = r0.<groovy.sql.Sql: java.sql.Connection useConnection>;

        if $r1 == null goto label1;

        $r2 = r0.<groovy.sql.Sql: java.sql.Connection useConnection>;

        interfaceinvoke $r2.<java.sql.Connection: void close()>();

     label1:
        return;
    }

    public javax.sql.DataSource getDataSource()
    {
        groovy.sql.Sql r0;
        javax.sql.DataSource $r1;

        r0 := @this: groovy.sql.Sql;

        $r1 = r0.<groovy.sql.Sql: javax.sql.DataSource dataSource>;

        return $r1;
    }

    public void commit()
    {
        java.sql.Connection $r1;
        java.util.logging.Logger $r4;
        java.util.logging.Level $r5;
        java.sql.SQLException $r2;
        java.lang.StringBuffer $r3, $r6, $r7;
        groovy.sql.Sql r0;
        java.lang.String $r8;

        r0 := @this: groovy.sql.Sql;

     label1:
        $r1 = r0.<groovy.sql.Sql: java.sql.Connection useConnection>;

        interfaceinvoke $r1.<java.sql.Connection: void commit()>();

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        $r4 = r0.<groovy.sql.Sql: java.util.logging.Logger log>;

        $r5 = <java.util.logging.Level: java.util.logging.Level SEVERE>;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Caught exception commiting connection: ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r2);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r4.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r5, $r8, $r2);

     label4:
        return;

        catch java.sql.SQLException from label1 to label2 with label3;
    }

    public void rollback()
    {
        java.sql.Connection $r1;
        java.util.logging.Logger $r4;
        java.util.logging.Level $r5;
        java.sql.SQLException $r2;
        java.lang.StringBuffer $r3, $r6, $r7;
        groovy.sql.Sql r0;
        java.lang.String $r8;

        r0 := @this: groovy.sql.Sql;

     label1:
        $r1 = r0.<groovy.sql.Sql: java.sql.Connection useConnection>;

        interfaceinvoke $r1.<java.sql.Connection: void rollback()>();

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        $r4 = r0.<groovy.sql.Sql: java.util.logging.Logger log>;

        $r5 = <java.util.logging.Level: java.util.logging.Level SEVERE>;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Caught exception rollbacking connection: ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r2);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r4.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r5, $r8, $r2);

     label4:
        return;

        catch java.sql.SQLException from label1 to label2 with label3;
    }

    public int getUpdateCount()
    {
        groovy.sql.Sql r0;
        int $i0;

        r0 := @this: groovy.sql.Sql;

        $i0 = r0.<groovy.sql.Sql: int updateCount>;

        return $i0;
    }

    public java.sql.Connection getConnection()
    {
        groovy.sql.Sql r0;
        java.sql.Connection $r1;

        r0 := @this: groovy.sql.Sql;

        $r1 = r0.<groovy.sql.Sql: java.sql.Connection useConnection>;

        return $r1;
    }

    public void withStatement(groovy.lang.Closure)
    {
        groovy.sql.Sql r0;
        groovy.lang.Closure r1;

        r0 := @this: groovy.sql.Sql;

        r1 := @parameter0: groovy.lang.Closure;

        r0.<groovy.sql.Sql: groovy.lang.Closure configureStatement> = r1;

        return;
    }

    protected java.lang.String asSql(groovy.lang.GString, java.util.List)
    {
        groovy.sql.Sql r6;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, z6, z7, z8;
        java.util.logging.Logger $r11;
        groovy.lang.GString r0;
        java.util.List r3;
        java.lang.String[] $r1;
        java.lang.StringBuffer $r2, $r10, $r12, $r14, $r15, $r16, $r21, $r22, $r23;
        groovy.sql.ExpandedVariable $r18;
        int $i0, $i1, $i2, $i3, $i4, i5;
        java.lang.String $r5, r7, r9, $r13, $r17, $r24, r25;
        java.util.Iterator $r4;
        java.lang.IllegalArgumentException $r20;
        java.lang.Object $r8, $r19;

        r6 := @this: groovy.sql.Sql;

        r0 := @parameter0: groovy.lang.GString;

        r3 := @parameter1: java.util.List;

        $r1 = virtualinvoke r0.<groovy.lang.GString: java.lang.String[] getStrings()>();

        $i0 = lengthof $r1;

        if $i0 > 0 goto label01;

        $r20 = new java.lang.IllegalArgumentException;

        $r21 = new java.lang.StringBuffer;

        specialinvoke $r21.<java.lang.StringBuffer: void <init>()>();

        $r22 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("No SQL specified in GString: ");

        $r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0);

        $r24 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r20.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r24);

        throw $r20;

     label01:
        z6 = 0;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        z7 = 0;

        $r4 = interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>();

        i5 = 0;

     label02:
        $i1 = lengthof $r1;

        if i5 >= $i1 goto label12;

        r7 = $r1[i5];

        if r7 == null goto label03;

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r7);

     label03:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label11;

        $r8 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        if $r8 == null goto label10;

        $z1 = $r8 instanceof groovy.sql.ExpandedVariable;

        if $z1 == 0 goto label04;

        $r18 = (groovy.sql.ExpandedVariable) $r8;

        $r19 = interfaceinvoke $r18.<groovy.sql.ExpandedVariable: java.lang.Object getObject()>();

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r19);

        interfaceinvoke $r4.<java.util.Iterator: void remove()>();

        goto label11;

     label04:
        z8 = 1;

        $i2 = lengthof $r1;

        $i3 = $i2 - 1;

        if i5 >= $i3 goto label08;

        $i4 = i5 + 1;

        r9 = $r1[$i4];

        $z2 = virtualinvoke r7.<java.lang.String: boolean endsWith(java.lang.String)>("\"");

        if $z2 != 0 goto label05;

        $z5 = virtualinvoke r7.<java.lang.String: boolean endsWith(java.lang.String)>("\'");

        if $z5 == 0 goto label08;

     label05:
        $z3 = virtualinvoke r9.<java.lang.String: boolean startsWith(java.lang.String)>("\'");

        if $z3 != 0 goto label06;

        $z4 = virtualinvoke r9.<java.lang.String: boolean startsWith(java.lang.String)>("\"");

        if $z4 == 0 goto label08;

     label06:
        if z7 != 0 goto label07;

        $r11 = r6.<groovy.sql.Sql: java.util.logging.Logger log>;

        $r10 = new java.lang.StringBuffer;

        specialinvoke $r10.<java.lang.StringBuffer: void <init>()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("In Groovy SQL please do not use quotes around dynamic expressions (which start with $) as this means we cannot use a JDBC PreparedStatement and so is a security hole. Groovy has worked around your mistake but the security hole is still there. The expression so far is: ");

        $r13 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String toString()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("?");

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r9);

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r11.<java.util.logging.Logger: void warning(java.lang.String)>($r17);

        z7 = 1;

     label07:
        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r8);

        interfaceinvoke $r4.<java.util.Iterator: void remove()>();

        z8 = 0;

     label08:
        if z8 == 0 goto label09;

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("?");

     label09:
        goto label11;

     label10:
        z6 = 1;

        interfaceinvoke $r4.<java.util.Iterator: void remove()>();

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("?\'\"?");

     label11:
        i5 = i5 + 1;

        goto label02;

     label12:
        $r5 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String toString()>();

        r25 = $r5;

        if z6 == 0 goto label13;

        r25 = virtualinvoke r6.<groovy.sql.Sql: java.lang.String nullify(java.lang.String)>($r5);

     label13:
        return r25;
    }

    protected java.lang.String nullify(java.lang.String)
    {
        java.util.regex.Matcher r27;
        groovy.sql.Sql r0;
        boolean $z0;
        java.util.regex.Pattern[] $r2;
        java.util.regex.Pattern $r8, $r14, $r20, $r22, $r25;
        java.lang.String[] $r21;
        java.lang.StringBuffer $r3, $r4, $r5, $r6, $r9, $r10, $r11, $r12, $r15, $r16, $r17, $r18;
        int $i0, $i1, i2;
        java.lang.String $r1, $r7, $r13, $r19, $r23, $r24, r26;

        r0 := @this: groovy.sql.Sql;

        r26 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<groovy.sql.Sql: int findWhereKeyword(java.lang.String)>(r26);

        if $i0 < 0 goto label4;

        $r2 = newarray (java.util.regex.Pattern)[3];

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("(?is)^(.{");

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("}.*?)!=\\s{0,1}(\\s*)\\?\'\"\\?(.*)");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        $r8 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>($r7);

        $r2[0] = $r8;

        $r9 = new java.lang.StringBuffer;

        specialinvoke $r9.<java.lang.StringBuffer: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("(?is)^(.{");

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("}.*?)<>\\s{0,1}(\\s*)\\?\'\"\\?(.*)");

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>();

        $r14 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>($r13);

        $r2[1] = $r14;

        $r15 = new java.lang.StringBuffer;

        specialinvoke $r15.<java.lang.StringBuffer: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("(?is)^(.{");

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("}.*?[^<>])=\\s{0,1}(\\s*)\\?\'\"\\?(.*)");

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.String toString()>();

        $r20 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>($r19);

        $r2[2] = $r20;

        $r21 = newarray (java.lang.String)[3];

        $r21[0] = "$1 is not $2null$3";

        $r21[1] = "$1 is not $2null$3";

        $r21[2] = "$1 is $2null$3";

        i2 = 0;

     label1:
        $i1 = lengthof $r2;

        if i2 >= $i1 goto label4;

        $r22 = $r2[i2];

        r27 = virtualinvoke $r22.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r26);

     label2:
        $z0 = virtualinvoke r27.<java.util.regex.Matcher: boolean matches()>();

        if $z0 == 0 goto label3;

        $r23 = $r21[i2];

        $r24 = virtualinvoke r27.<java.util.regex.Matcher: java.lang.String replaceAll(java.lang.String)>($r23);

        r26 = $r24;

        $r25 = $r2[i2];

        r27 = virtualinvoke $r25.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r24);

        goto label2;

     label3:
        i2 = i2 + 1;

        goto label1;

     label4:
        $r1 = virtualinvoke r26.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\\?\'\"\\?", "null");

        return $r1;
    }

    protected int findWhereKeyword(java.lang.String)
    {
        int $i0, $i4, i5, i6, $i7, $i8, $i9, $i11;
        groovy.sql.Sql r5;
        java.lang.String r0, $r1, $r3;
        boolean z0, $z1;
        char $c1, $c2, $c3;
        char[] $r2, $r4;

        r5 := @this: groovy.sql.Sql;

        r0 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String toLowerCase()>();

        $r2 = virtualinvoke $r1.<java.lang.String: char[] toCharArray()>();

        $r3 = "where";

        $r4 = virtualinvoke $r3.<java.lang.String: char[] toCharArray()>();

        i5 = 0;

        z0 = 0;

        i6 = 0;

     label1:
        $i0 = lengthof $r2;

        if i5 >= $i0 goto label7;

        if 1 == 0 goto label7;

        $c1 = $r2[i5];

        $i7 = (int) $c1;

        lookupswitch($i7)
        {
            case 39: goto label2;
            default: goto label5;
        };

     label2:
        if z0 != 0 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        z0 = $z1;

        goto label6;

     label5:
        if z0 != 0 goto label6;

        $c3 = $r2[i5];

        $c2 = $r4[i6];

        $i8 = (int) $c3;

        $i9 = (int) $c2;

        if $i8 != $i9 goto label6;

        i6 = i6 + 1;

        $i4 = lengthof $r4;

        if i6 != $i4 goto label6;

        return i5;

     label6:
        i5 = i5 + 1;

        goto label1;

     label7:
        $i11 = (int) -1;

        return $i11;
    }

    protected java.util.List getParameters(groovy.lang.GString)
    {
        groovy.lang.GString r1;
        java.util.List $r3;
        java.lang.Object[] $r2;
        groovy.sql.Sql r4;
        java.util.ArrayList $r0;

        r4 := @this: groovy.sql.Sql;

        r1 := @parameter0: groovy.lang.GString;

        $r0 = new java.util.ArrayList;

        $r2 = virtualinvoke r1.<groovy.lang.GString: java.lang.Object[] getValues()>();

        $r3 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r2);

        specialinvoke $r0.<java.util.ArrayList: void <init>(java.util.Collection)>($r3);

        return $r0;
    }

    protected void setParameters(java.util.List, java.sql.PreparedStatement) throws java.sql.SQLException
    {
        java.util.Iterator $r1;
        java.sql.PreparedStatement r4;
        java.util.List r0;
        groovy.sql.Sql r3;
        int $i0, i1;
        java.lang.Object $r2;
        boolean $z0;

        r3 := @this: groovy.sql.Sql;

        r0 := @parameter0: java.util.List;

        r4 := @parameter1: java.sql.PreparedStatement;

        i1 = 1;

        $r1 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $i0 = i1;

        i1 = i1 + 1;

        virtualinvoke r3.<groovy.sql.Sql: void setObject(java.sql.PreparedStatement,int,java.lang.Object)>(r4, $i0, $r2);

        goto label1;

     label2:
        return;
    }

    protected void setObject(java.sql.PreparedStatement, int, java.lang.Object) throws java.sql.SQLException
    {
        java.lang.ClassCastException $r4;
        java.sql.SQLException $r5;
        groovy.sql.OutParameter r8;
        int i0, $i1, $i2, $i3;
        groovy.sql.Sql r6;
        boolean $z0, $z1, $z2, $z3;
        java.sql.PreparedStatement r1;
        groovy.sql.InParameter r7;
        java.sql.CallableStatement $r2;
        java.lang.Object r0, $r3;

        r6 := @this: groovy.sql.Sql;

        r1 := @parameter0: java.sql.PreparedStatement;

        i0 := @parameter1: int;

        r0 := @parameter2: java.lang.Object;

        $z0 = r0 instanceof groovy.sql.InParameter;

        if $z0 != 0 goto label1;

        $z2 = r0 instanceof groovy.sql.OutParameter;

        if $z2 == 0 goto label7;

     label1:
        $z1 = r0 instanceof groovy.sql.InParameter;

        if $z1 == 0 goto label3;

        r7 = (groovy.sql.InParameter) r0;

        $r3 = interfaceinvoke r7.<groovy.sql.InParameter: java.lang.Object getValue()>();

        if null != $r3 goto label2;

        $i3 = interfaceinvoke r7.<groovy.sql.InParameter: int getType()>();

        interfaceinvoke r1.<java.sql.PreparedStatement: void setNull(int,int)>(i0, $i3);

        goto label3;

     label2:
        $i2 = interfaceinvoke r7.<groovy.sql.InParameter: int getType()>();

        interfaceinvoke r1.<java.sql.PreparedStatement: void setObject(int,java.lang.Object,int)>(i0, $r3, $i2);

     label3:
        $z3 = r0 instanceof groovy.sql.OutParameter;

        if $z3 == 0 goto label8;

     label4:
        r8 = (groovy.sql.OutParameter) r0;

        $r2 = (java.sql.CallableStatement) r1;

        $i1 = interfaceinvoke r8.<groovy.sql.OutParameter: int getType()>();

        interfaceinvoke $r2.<java.sql.CallableStatement: void registerOutParameter(int,int)>(i0, $i1);

     label5:
        goto label8;

     label6:
        $r4 := @caughtexception;

        $r5 = new java.sql.SQLException;

        specialinvoke $r5.<java.sql.SQLException: void <init>(java.lang.String)>("Cannot register out parameter.");

        throw $r5;

     label7:
        interfaceinvoke r1.<java.sql.PreparedStatement: void setObject(int,java.lang.Object)>(i0, r0);

     label8:
        return;

        catch java.lang.ClassCastException from label4 to label5 with label6;
    }

    protected java.sql.Connection createConnection() throws java.sql.SQLException
    {
        java.security.PrivilegedActionException $r5;
        java.sql.Connection $r2, r9;
        java.lang.RuntimeException $r7;
        java.lang.Exception $r6;
        groovy.sql.Sql$36 $r3;
        java.sql.SQLException $r8;
        groovy.sql.Sql r0;
        javax.sql.DataSource $r1;
        java.lang.Object $r4;
        boolean $z0;

        r0 := @this: groovy.sql.Sql;

        $r1 = r0.<groovy.sql.Sql: javax.sql.DataSource dataSource>;

        if $r1 == null goto label6;

     label1:
        $r3 = new groovy.sql.Sql$36;

        specialinvoke $r3.<groovy.sql.Sql$36: void <init>(groovy.sql.Sql)>(r0);

        $r4 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>($r3);

        r9 = (java.sql.Connection) $r4;

     label2:
        goto label5;

     label3:
        $r5 := @caughtexception;

        $r6 = virtualinvoke $r5.<java.security.PrivilegedActionException: java.lang.Exception getException()>();

        $z0 = $r6 instanceof java.sql.SQLException;

        if $z0 == 0 goto label4;

        $r8 = (java.sql.SQLException) $r6;

        throw $r8;

     label4:
        $r7 = (java.lang.RuntimeException) $r6;

        throw $r7;

     label5:
        return r9;

     label6:
        $r2 = r0.<groovy.sql.Sql: java.sql.Connection useConnection>;

        return $r2;

        catch java.security.PrivilegedActionException from label1 to label2 with label3;
    }

    protected void closeResources(java.sql.Connection, java.sql.Statement, java.sql.ResultSet)
    {
        java.sql.Connection r2;
        java.util.logging.Logger $r6;
        java.util.logging.Level $r7;
        java.sql.SQLException $r4;
        java.sql.ResultSet r0;
        java.lang.StringBuffer $r5, $r8, $r9;
        groovy.sql.Sql r1;
        java.sql.Statement r3;
        java.lang.String $r10;

        r1 := @this: groovy.sql.Sql;

        r2 := @parameter0: java.sql.Connection;

        r3 := @parameter1: java.sql.Statement;

        r0 := @parameter2: java.sql.ResultSet;

        if r0 == null goto label4;

     label1:
        interfaceinvoke r0.<java.sql.ResultSet: void close()>();

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        $r6 = r1.<groovy.sql.Sql: java.util.logging.Logger log>;

        $r7 = <java.util.logging.Level: java.util.logging.Level SEVERE>;

        $r5 = new java.lang.StringBuffer;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();

        $r8 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Caught exception closing resultSet: ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r4);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r6.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r7, $r10, $r4);

     label4:
        virtualinvoke r1.<groovy.sql.Sql: void closeResources(java.sql.Connection,java.sql.Statement)>(r2, r3);

        return;

        catch java.sql.SQLException from label1 to label2 with label3;
    }

    protected void closeResources(java.sql.Connection, java.sql.Statement)
    {
        java.sql.Connection r2;
        java.util.logging.Level $r6, $r13;
        java.sql.SQLException $r3, $r10;
        java.lang.StringBuffer $r4, $r7, $r8, $r11, $r14, $r15;
        groovy.sql.Sql r1;
        javax.sql.DataSource $r17;
        java.lang.String $r9, $r16;
        java.util.logging.Logger $r5, $r12;
        java.sql.Statement r0;

        r1 := @this: groovy.sql.Sql;

        r2 := @parameter0: java.sql.Connection;

        r0 := @parameter1: java.sql.Statement;

        if r0 == null goto label4;

     label1:
        interfaceinvoke r0.<java.sql.Statement: void close()>();

     label2:
        goto label4;

     label3:
        $r10 := @caughtexception;

        $r12 = r1.<groovy.sql.Sql: java.util.logging.Logger log>;

        $r13 = <java.util.logging.Level: java.util.logging.Level SEVERE>;

        $r11 = new java.lang.StringBuffer;

        specialinvoke $r11.<java.lang.StringBuffer: void <init>()>();

        $r14 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Caught exception closing statement: ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r10);

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r12.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r13, $r16, $r10);

     label4:
        $r17 = r1.<groovy.sql.Sql: javax.sql.DataSource dataSource>;

        if $r17 == null goto label8;

     label5:
        interfaceinvoke r2.<java.sql.Connection: void close()>();

     label6:
        goto label8;

     label7:
        $r3 := @caughtexception;

        $r5 = r1.<groovy.sql.Sql: java.util.logging.Logger log>;

        $r6 = <java.util.logging.Level: java.util.logging.Level SEVERE>;

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r7 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Caught exception closing connection: ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r3);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r5.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r6, $r9, $r3);

     label8:
        return;

        catch java.sql.SQLException from label1 to label2 with label3;
        catch java.sql.SQLException from label5 to label6 with label7;
    }

    private void warnDeprecated()
    {
        groovy.sql.Sql r0;
        java.util.logging.Logger $r1;
        boolean $z0;

        r0 := @this: groovy.sql.Sql;

        $z0 = r0.<groovy.sql.Sql: boolean warned>;

        if $z0 != 0 goto label1;

        r0.<groovy.sql.Sql: boolean warned> = 1;

        $r1 = r0.<groovy.sql.Sql: java.util.logging.Logger log>;

        virtualinvoke $r1.<java.util.logging.Logger: void warning(java.lang.String)>("queryEach() is deprecated, please use eachRow() instead");

     label1:
        return;
    }

    protected void configure(java.sql.Statement)
    {
        groovy.sql.Sql r0;
        java.sql.Statement r2;
        groovy.lang.Closure $r1, $r3;

        r0 := @this: groovy.sql.Sql;

        r2 := @parameter0: java.sql.Statement;

        $r1 = r0.<groovy.sql.Sql: groovy.lang.Closure configureStatement>;

        if $r1 == null goto label1;

        $r3 = r0.<groovy.sql.Sql: groovy.lang.Closure configureStatement>;

        virtualinvoke $r3.<groovy.lang.Closure: java.lang.Object call(java.lang.Object)>(r2);

     label1:
        return;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Throwable $r4;
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.NoClassDefFoundError: java.lang.Throwable initCause(java.lang.Throwable)>($r2);

        throw $r4;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    static javax.sql.DataSource access$000(groovy.sql.Sql)
    {
        groovy.sql.Sql r0;
        javax.sql.DataSource $r1;

        r0 := @parameter0: groovy.sql.Sql;

        $r1 = r0.<groovy.sql.Sql: javax.sql.DataSource dataSource>;

        return $r1;
    }

    static void <clinit>()
    {
        groovy.sql.Sql$27 $r26;
        groovy.sql.Sql$26 $r25;
        groovy.sql.Sql$25 $r24;
        groovy.sql.Sql$24 $r23;
        groovy.sql.Sql$8 $r7;
        groovy.sql.Sql$9 $r8;
        groovy.sql.Sql$6 $r5;
        groovy.sql.Sql$29 $r28;
        groovy.sql.Sql$7 $r6;
        groovy.sql.Sql$28 $r27;
        groovy.sql.Sql$23 $r22;
        groovy.sql.Sql$22 $r21;
        groovy.sql.Sql$21 $r20;
        groovy.sql.Sql$20 $r19;
        groovy.sql.Sql$4 $r3;
        groovy.sql.Sql$5 $r4;
        groovy.sql.Sql$2 $r1;
        groovy.sql.Sql$3 $r2;
        groovy.sql.Sql$1 $r0;
        groovy.sql.Sql$16 $r15;
        groovy.sql.Sql$15 $r14;
        groovy.sql.Sql$14 $r13;
        groovy.sql.Sql$13 $r12;
        groovy.sql.Sql$19 $r18;
        groovy.sql.Sql$18 $r17;
        groovy.sql.Sql$17 $r16;
        groovy.sql.Sql$30 $r29;
        groovy.sql.Sql$12 $r11;
        groovy.sql.Sql$11 $r10;
        groovy.sql.Sql$10 $r9;

        $r0 = new groovy.sql.Sql$1;

        specialinvoke $r0.<groovy.sql.Sql$1: void <init>()>();

        <groovy.sql.Sql: groovy.sql.OutParameter ARRAY> = $r0;

        $r1 = new groovy.sql.Sql$2;

        specialinvoke $r1.<groovy.sql.Sql$2: void <init>()>();

        <groovy.sql.Sql: groovy.sql.OutParameter BIGINT> = $r1;

        $r2 = new groovy.sql.Sql$3;

        specialinvoke $r2.<groovy.sql.Sql$3: void <init>()>();

        <groovy.sql.Sql: groovy.sql.OutParameter BINARY> = $r2;

        $r3 = new groovy.sql.Sql$4;

        specialinvoke $r3.<groovy.sql.Sql$4: void <init>()>();

        <groovy.sql.Sql: groovy.sql.OutParameter BIT> = $r3;

        $r4 = new groovy.sql.Sql$5;

        specialinvoke $r4.<groovy.sql.Sql$5: void <init>()>();

        <groovy.sql.Sql: groovy.sql.OutParameter BLOB> = $r4;

        $r5 = new groovy.sql.Sql$6;

        specialinvoke $r5.<groovy.sql.Sql$6: void <init>()>();

        <groovy.sql.Sql: groovy.sql.OutParameter BOOLEAN> = $r5;

        $r6 = new groovy.sql.Sql$7;

        specialinvoke $r6.<groovy.sql.Sql$7: void <init>()>();

        <groovy.sql.Sql: groovy.sql.OutParameter CHAR> = $r6;

        $r7 = new groovy.sql.Sql$8;

        specialinvoke $r7.<groovy.sql.Sql$8: void <init>()>();

        <groovy.sql.Sql: groovy.sql.OutParameter CLOB> = $r7;

        $r8 = new groovy.sql.Sql$9;

        specialinvoke $r8.<groovy.sql.Sql$9: void <init>()>();

        <groovy.sql.Sql: groovy.sql.OutParameter DATALINK> = $r8;

        $r9 = new groovy.sql.Sql$10;

        specialinvoke $r9.<groovy.sql.Sql$10: void <init>()>();

        <groovy.sql.Sql: groovy.sql.OutParameter DATE> = $r9;

        $r10 = new groovy.sql.Sql$11;

        specialinvoke $r10.<groovy.sql.Sql$11: void <init>()>();

        <groovy.sql.Sql: groovy.sql.OutParameter DECIMAL> = $r10;

        $r11 = new groovy.sql.Sql$12;

        specialinvoke $r11.<groovy.sql.Sql$12: void <init>()>();

        <groovy.sql.Sql: groovy.sql.OutParameter DISTINCT> = $r11;

        $r12 = new groovy.sql.Sql$13;

        specialinvoke $r12.<groovy.sql.Sql$13: void <init>()>();

        <groovy.sql.Sql: groovy.sql.OutParameter DOUBLE> = $r12;

        $r13 = new groovy.sql.Sql$14;

        specialinvoke $r13.<groovy.sql.Sql$14: void <init>()>();

        <groovy.sql.Sql: groovy.sql.OutParameter FLOAT> = $r13;

        $r14 = new groovy.sql.Sql$15;

        specialinvoke $r14.<groovy.sql.Sql$15: void <init>()>();

        <groovy.sql.Sql: groovy.sql.OutParameter INTEGER> = $r14;

        $r15 = new groovy.sql.Sql$16;

        specialinvoke $r15.<groovy.sql.Sql$16: void <init>()>();

        <groovy.sql.Sql: groovy.sql.OutParameter JAVA_OBJECT> = $r15;

        $r16 = new groovy.sql.Sql$17;

        specialinvoke $r16.<groovy.sql.Sql$17: void <init>()>();

        <groovy.sql.Sql: groovy.sql.OutParameter LONGVARBINARY> = $r16;

        $r17 = new groovy.sql.Sql$18;

        specialinvoke $r17.<groovy.sql.Sql$18: void <init>()>();

        <groovy.sql.Sql: groovy.sql.OutParameter LONGVARCHAR> = $r17;

        $r18 = new groovy.sql.Sql$19;

        specialinvoke $r18.<groovy.sql.Sql$19: void <init>()>();

        <groovy.sql.Sql: groovy.sql.OutParameter NULL> = $r18;

        $r19 = new groovy.sql.Sql$20;

        specialinvoke $r19.<groovy.sql.Sql$20: void <init>()>();

        <groovy.sql.Sql: groovy.sql.OutParameter NUMERIC> = $r19;

        $r20 = new groovy.sql.Sql$21;

        specialinvoke $r20.<groovy.sql.Sql$21: void <init>()>();

        <groovy.sql.Sql: groovy.sql.OutParameter OTHER> = $r20;

        $r21 = new groovy.sql.Sql$22;

        specialinvoke $r21.<groovy.sql.Sql$22: void <init>()>();

        <groovy.sql.Sql: groovy.sql.OutParameter REAL> = $r21;

        $r22 = new groovy.sql.Sql$23;

        specialinvoke $r22.<groovy.sql.Sql$23: void <init>()>();

        <groovy.sql.Sql: groovy.sql.OutParameter REF> = $r22;

        $r23 = new groovy.sql.Sql$24;

        specialinvoke $r23.<groovy.sql.Sql$24: void <init>()>();

        <groovy.sql.Sql: groovy.sql.OutParameter SMALLINT> = $r23;

        $r24 = new groovy.sql.Sql$25;

        specialinvoke $r24.<groovy.sql.Sql$25: void <init>()>();

        <groovy.sql.Sql: groovy.sql.OutParameter STRUCT> = $r24;

        $r25 = new groovy.sql.Sql$26;

        specialinvoke $r25.<groovy.sql.Sql$26: void <init>()>();

        <groovy.sql.Sql: groovy.sql.OutParameter TIME> = $r25;

        $r26 = new groovy.sql.Sql$27;

        specialinvoke $r26.<groovy.sql.Sql$27: void <init>()>();

        <groovy.sql.Sql: groovy.sql.OutParameter TIMESTAMP> = $r26;

        $r27 = new groovy.sql.Sql$28;

        specialinvoke $r27.<groovy.sql.Sql$28: void <init>()>();

        <groovy.sql.Sql: groovy.sql.OutParameter TINYINT> = $r27;

        $r28 = new groovy.sql.Sql$29;

        specialinvoke $r28.<groovy.sql.Sql$29: void <init>()>();

        <groovy.sql.Sql: groovy.sql.OutParameter VARBINARY> = $r28;

        $r29 = new groovy.sql.Sql$30;

        specialinvoke $r29.<groovy.sql.Sql$30: void <init>()>();

        <groovy.sql.Sql: groovy.sql.OutParameter VARCHAR> = $r29;

        return;
    }
}
