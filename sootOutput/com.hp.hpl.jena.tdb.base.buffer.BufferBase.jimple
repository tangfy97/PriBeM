abstract class com.hp.hpl.jena.tdb.base.buffer.BufferBase extends java.lang.Object
{
    public static boolean CheckBuffer;
    protected java.nio.ByteBuffer bb;
    protected int slotLen;
    protected int numSlot;
    protected int maxSlot;

    protected void <init>(java.nio.ByteBuffer, int, int)
    {
        java.lang.Integer $r7, $r8, $r12, $r13;
        java.nio.ByteBuffer r1;
        com.hp.hpl.jena.tdb.base.record.RecordException $r4, $r5, $r10, $r15;
        boolean $z0, $z1, $z2, $z3;
        java.nio.ByteOrder $r2, $r3;
        com.hp.hpl.jena.tdb.base.buffer.BufferBase r0;
        java.lang.Object[] $r6, $r11;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10, $i11;
        java.lang.String $r9, $r14;

        r0 := @this: com.hp.hpl.jena.tdb.base.buffer.BufferBase;

        r1 := @parameter0: java.nio.ByteBuffer;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $z0 = <com.hp.hpl.jena.tdb.base.buffer.BufferBase: boolean CheckBuffer>;

        if $z0 == 0 goto label5;

        $r2 = virtualinvoke r1.<java.nio.ByteBuffer: java.nio.ByteOrder order()>();

        $r3 = <com.hp.hpl.jena.tdb.sys.SystemTDB: java.nio.ByteOrder NetworkOrder>;

        $z2 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r3);

        if $z2 == 0 goto label1;

        $z3 = virtualinvoke r1.<java.nio.ByteBuffer: boolean hasArray()>();

        if $z3 != 0 goto label2;

     label1:
        $r4 = new com.hp.hpl.jena.tdb.base.record.RecordException;

        specialinvoke $r4.<com.hp.hpl.jena.tdb.base.record.RecordException: void <init>(java.lang.String)>("Duff buffer (byte order is not network order)");

        throw $r4;

     label2:
        $i8 = virtualinvoke r1.<java.nio.ByteBuffer: int limit()>();

        if $i8 != 0 goto label3;

        $r15 = new com.hp.hpl.jena.tdb.base.record.RecordException;

        specialinvoke $r15.<com.hp.hpl.jena.tdb.base.record.RecordException: void <init>(java.lang.String)>("Duff buffer (zero length byte buffer)");

        throw $r15;

     label3:
        $i9 = virtualinvoke r1.<java.nio.ByteBuffer: int limit()>();

        i10 = $i9 / i0;

        $i11 = $i9 % i0;

        if $i11 == 0 goto label4;

        $r10 = new com.hp.hpl.jena.tdb.base.record.RecordException;

        $r11 = newarray (java.lang.Object)[2];

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i9);

        $r11[0] = $r12;

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r11[1] = $r13;

        $r14 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Misalinged buffer: size=%d, keyLen=%d", $r11);

        specialinvoke $r10.<com.hp.hpl.jena.tdb.base.record.RecordException: void <init>(java.lang.String)>($r14);

        throw $r10;

     label4:
        if i10 >= i1 goto label5;

        $r5 = new com.hp.hpl.jena.tdb.base.record.RecordException;

        $r6 = newarray (java.lang.Object)[2];

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i10);

        $r6[0] = $r7;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r6[1] = $r8;

        $r9 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Wrong size: slots=%d, len=%d", $r6);

        specialinvoke $r5.<com.hp.hpl.jena.tdb.base.record.RecordException: void <init>(java.lang.String)>($r9);

        throw $r5;

     label5:
        r0.<com.hp.hpl.jena.tdb.base.buffer.BufferBase: java.nio.ByteBuffer bb> = r1;

        r0.<com.hp.hpl.jena.tdb.base.buffer.BufferBase: int slotLen> = i0;

        r0.<com.hp.hpl.jena.tdb.base.buffer.BufferBase: int numSlot> = i1;

        $i2 = virtualinvoke r1.<java.nio.ByteBuffer: int limit()>();

        $i3 = $i2 / i0;

        r0.<com.hp.hpl.jena.tdb.base.buffer.BufferBase: int maxSlot> = $i3;

        $z1 = <com.hp.hpl.jena.tdb.sys.SystemTDB: boolean NullOut>;

        if $z1 == 0 goto label6;

        $i7 = r0.<com.hp.hpl.jena.tdb.base.buffer.BufferBase: int numSlot>;

        $i5 = r0.<com.hp.hpl.jena.tdb.base.buffer.BufferBase: int maxSlot>;

        $i4 = r0.<com.hp.hpl.jena.tdb.base.buffer.BufferBase: int numSlot>;

        $i6 = $i5 - $i4;

        virtualinvoke r0.<com.hp.hpl.jena.tdb.base.buffer.BufferBase: void clear(int,int)>($i7, $i6);

     label6:
        return;
    }

    public final void copy(int, com.hp.hpl.jena.tdb.base.buffer.BufferBase, int, int)
    {
        java.lang.Object[] $r5, $r10;
        java.lang.Integer $r6, $r7, $r11, $r12;
        java.nio.ByteBuffer $r2, $r3;
        com.hp.hpl.jena.tdb.base.record.RecordException $r4;
        int i0, i1, $i2, $i3, $i4, i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16;
        java.lang.String $r8, $r13;
        java.lang.IllegalArgumentException $r9;
        com.hp.hpl.jena.tdb.base.buffer.BufferBase r0, r1;

        r0 := @this: com.hp.hpl.jena.tdb.base.buffer.BufferBase;

        i1 := @parameter0: int;

        r1 := @parameter1: com.hp.hpl.jena.tdb.base.buffer.BufferBase;

        i5 := @parameter2: int;

        i0 := @parameter3: int;

        if i0 != 0 goto label1;

        return;

     label1:
        $i2 = i1 + i0;

        $i4 = $i2 - 1;

        $i3 = r0.<com.hp.hpl.jena.tdb.base.buffer.BufferBase: int maxSlot>;

        staticinvoke <com.hp.hpl.jena.tdb.base.buffer.BufferBase: void checkBounds(int,int)>($i4, $i3);

        $i7 = r1.<com.hp.hpl.jena.tdb.base.buffer.BufferBase: int numSlot>;

        $i6 = i5 - 1;

        if $i7 >= $i6 goto label2;

        $r9 = new java.lang.IllegalArgumentException;

        $r10 = newarray (java.lang.Object)[2];

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i5);

        $r10[0] = $r11;

        $i16 = r1.<com.hp.hpl.jena.tdb.base.buffer.BufferBase: int numSlot>;

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i16);

        $r10[1] = $r12;

        $r13 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("copy: Out of bounds: dstIdx=%d, dst size=%d", $r10);

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r13);

        throw $r9;

     label2:
        $i9 = r0.<com.hp.hpl.jena.tdb.base.buffer.BufferBase: int slotLen>;

        $i8 = r1.<com.hp.hpl.jena.tdb.base.buffer.BufferBase: int slotLen>;

        if $i9 == $i8 goto label3;

        $r4 = new com.hp.hpl.jena.tdb.base.record.RecordException;

        $r5 = newarray (java.lang.Object)[2];

        $i14 = r0.<com.hp.hpl.jena.tdb.base.buffer.BufferBase: int slotLen>;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i14);

        $r5[0] = $r6;

        $i15 = r1.<com.hp.hpl.jena.tdb.base.buffer.BufferBase: int slotLen>;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i15);

        $r5[1] = $r7;

        $r8 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("copy: records of differnt sizes: %d, %d", $r5);

        specialinvoke $r4.<com.hp.hpl.jena.tdb.base.record.RecordException: void <init>(java.lang.String)>($r8);

        throw $r4;

     label3:
        $r3 = r0.<com.hp.hpl.jena.tdb.base.buffer.BufferBase: java.nio.ByteBuffer bb>;

        $r2 = r1.<com.hp.hpl.jena.tdb.base.buffer.BufferBase: java.nio.ByteBuffer bb>;

        $i10 = r0.<com.hp.hpl.jena.tdb.base.buffer.BufferBase: int slotLen>;

        staticinvoke <org.apache.jena.atlas.lib.ByteBufferLib: void bbcopy(java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,int,int)>($r3, i1, $r2, i5, i0, $i10);

        $i12 = i5 + i0;

        $i11 = r1.<com.hp.hpl.jena.tdb.base.buffer.BufferBase: int numSlot>;

        $i13 = staticinvoke <java.lang.Math: int max(int,int)>($i12, $i11);

        r1.<com.hp.hpl.jena.tdb.base.buffer.BufferBase: int numSlot> = $i13;

        return;
    }

    public final void copyToTop(com.hp.hpl.jena.tdb.base.buffer.BufferBase)
    {
        int $i0, $i1;
        com.hp.hpl.jena.tdb.base.buffer.BufferBase r0, r1;

        r0 := @this: com.hp.hpl.jena.tdb.base.buffer.BufferBase;

        r1 := @parameter0: com.hp.hpl.jena.tdb.base.buffer.BufferBase;

        $i1 = r1.<com.hp.hpl.jena.tdb.base.buffer.BufferBase: int numSlot>;

        $i0 = r0.<com.hp.hpl.jena.tdb.base.buffer.BufferBase: int numSlot>;

        virtualinvoke r0.<com.hp.hpl.jena.tdb.base.buffer.BufferBase: void copy(int,com.hp.hpl.jena.tdb.base.buffer.BufferBase,int,int)>(0, r1, $i1, $i0);

        return;
    }

    public final void removeTop()
    {
        java.lang.IndexOutOfBoundsException $r1;
        int $i0, $i1, $i2, $i3, $i4;
        com.hp.hpl.jena.tdb.base.buffer.BufferBase r0;

        r0 := @this: com.hp.hpl.jena.tdb.base.buffer.BufferBase;

        $i0 = r0.<com.hp.hpl.jena.tdb.base.buffer.BufferBase: int numSlot>;

        if $i0 != 0 goto label1;

        $r1 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r1.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>("removeTop: empty buffer");

        throw $r1;

     label1:
        $i1 = r0.<com.hp.hpl.jena.tdb.base.buffer.BufferBase: int numSlot>;

        $i2 = $i1 - 1;

        virtualinvoke r0.<com.hp.hpl.jena.tdb.base.buffer.BufferBase: void clear(int)>($i2);

        $i3 = r0.<com.hp.hpl.jena.tdb.base.buffer.BufferBase: int numSlot>;

        $i4 = $i3 - 1;

        r0.<com.hp.hpl.jena.tdb.base.buffer.BufferBase: int numSlot> = $i4;

        return;
    }

    public final void remove(int)
    {
        int i0;
        com.hp.hpl.jena.tdb.base.buffer.BufferBase r0;

        r0 := @this: com.hp.hpl.jena.tdb.base.buffer.BufferBase;

        i0 := @parameter0: int;

        virtualinvoke r0.<com.hp.hpl.jena.tdb.base.buffer.BufferBase: void shiftDown(int)>(i0);

        return;
    }

    public final void clear(int, int)
    {
        int i0, i1, $i2, $i3;
        com.hp.hpl.jena.tdb.base.buffer.BufferBase r0;
        java.nio.ByteBuffer $r1;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.tdb.base.buffer.BufferBase;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $z0 = <com.hp.hpl.jena.tdb.sys.SystemTDB: boolean NullOut>;

        if $z0 == 0 goto label1;

        $r1 = r0.<com.hp.hpl.jena.tdb.base.buffer.BufferBase: java.nio.ByteBuffer bb>;

        $i3 = i0 + i1;

        $i2 = r0.<com.hp.hpl.jena.tdb.base.buffer.BufferBase: int slotLen>;

        staticinvoke <org.apache.jena.atlas.lib.ByteBufferLib: void bbfill(java.nio.ByteBuffer,int,int,byte,int)>($r1, i0, $i3, -1, $i2);

     label1:
        return;
    }

    public final void clear()
    {
        int $i0;
        com.hp.hpl.jena.tdb.base.buffer.BufferBase r0;

        r0 := @this: com.hp.hpl.jena.tdb.base.buffer.BufferBase;

        $i0 = r0.<com.hp.hpl.jena.tdb.base.buffer.BufferBase: int maxSlot>;

        virtualinvoke r0.<com.hp.hpl.jena.tdb.base.buffer.BufferBase: void clear(int,int)>(0, $i0);

        r0.<com.hp.hpl.jena.tdb.base.buffer.BufferBase: int numSlot> = 0;

        return;
    }

    public final void clear(int)
    {
        int i0;
        com.hp.hpl.jena.tdb.base.buffer.BufferBase r0;

        r0 := @this: com.hp.hpl.jena.tdb.base.buffer.BufferBase;

        i0 := @parameter0: int;

        virtualinvoke r0.<com.hp.hpl.jena.tdb.base.buffer.BufferBase: void clear(int,int)>(i0, 1);

        return;
    }

    public final boolean isClear(int)
    {
        java.nio.ByteBuffer $r1;
        byte $b7;
        int i0, $i1, $i2, i3, $i4, $i5, i6, i8, $i9, $i11;
        com.hp.hpl.jena.tdb.base.buffer.BufferBase r0;

        r0 := @this: com.hp.hpl.jena.tdb.base.buffer.BufferBase;

        i0 := @parameter0: int;

        $i1 = r0.<com.hp.hpl.jena.tdb.base.buffer.BufferBase: int maxSlot>;

        staticinvoke <com.hp.hpl.jena.tdb.base.buffer.BufferBase: void checkBounds(int,int)>(i0, $i1);

        $i2 = r0.<com.hp.hpl.jena.tdb.base.buffer.BufferBase: int slotLen>;

        i3 = i0 * $i2;

        $i5 = i0 + 1;

        $i4 = r0.<com.hp.hpl.jena.tdb.base.buffer.BufferBase: int slotLen>;

        i6 = $i5 * $i4;

        i8 = i3;

     label1:
        if i8 >= i6 goto label3;

        $r1 = r0.<com.hp.hpl.jena.tdb.base.buffer.BufferBase: java.nio.ByteBuffer bb>;

        $b7 = virtualinvoke $r1.<java.nio.ByteBuffer: byte get(int)>(i8);

        $i9 = (int) $b7;

        $i11 = (int) -1;

        if $i9 == $i11 goto label2;

        return 0;

     label2:
        i8 = i8 + 1;

        goto label1;

     label3:
        return 1;
    }

    public final boolean isFull()
    {
        int $i0, $i1;
        com.hp.hpl.jena.tdb.base.buffer.BufferBase r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.tdb.base.buffer.BufferBase;

        $i1 = r0.<com.hp.hpl.jena.tdb.base.buffer.BufferBase: int numSlot>;

        $i0 = r0.<com.hp.hpl.jena.tdb.base.buffer.BufferBase: int maxSlot>;

        if $i1 < $i0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public final boolean isEmpty()
    {
        int $i0;
        com.hp.hpl.jena.tdb.base.buffer.BufferBase r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.tdb.base.buffer.BufferBase;

        $i0 = r0.<com.hp.hpl.jena.tdb.base.buffer.BufferBase: int numSlot>;

        if $i0 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public final void incSize()
    {
        com.hp.hpl.jena.tdb.base.buffer.BufferBase r0;

        r0 := @this: com.hp.hpl.jena.tdb.base.buffer.BufferBase;

        virtualinvoke r0.<com.hp.hpl.jena.tdb.base.buffer.BufferBase: void incSize(int)>(1);

        return;
    }

    public final void incSize(int)
    {
        java.lang.Object[] $r2;
        java.lang.IllegalArgumentException $r1;
        java.lang.Integer $r3, $r4;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6;
        java.lang.String $r5;
        com.hp.hpl.jena.tdb.base.buffer.BufferBase r0;

        r0 := @this: com.hp.hpl.jena.tdb.base.buffer.BufferBase;

        i0 := @parameter0: int;

        $i1 = r0.<com.hp.hpl.jena.tdb.base.buffer.BufferBase: int numSlot>;

        $i3 = $i1 + i0;

        $i2 = r0.<com.hp.hpl.jena.tdb.base.buffer.BufferBase: int maxSlot>;

        if $i3 <= $i2 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        $r2 = newarray (java.lang.Object)[2];

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r2[0] = $r3;

        $i6 = r0.<com.hp.hpl.jena.tdb.base.buffer.BufferBase: int maxSlot>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i6);

        $r2[1] = $r4;

        $r5 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("inc(%d): out of range: max=%d", $r2);

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r1;

     label1:
        $i4 = r0.<com.hp.hpl.jena.tdb.base.buffer.BufferBase: int numSlot>;

        $i5 = $i4 + i0;

        r0.<com.hp.hpl.jena.tdb.base.buffer.BufferBase: int numSlot> = $i5;

        return;
    }

    public final void decSize()
    {
        com.hp.hpl.jena.tdb.base.buffer.BufferBase r0;

        r0 := @this: com.hp.hpl.jena.tdb.base.buffer.BufferBase;

        virtualinvoke r0.<com.hp.hpl.jena.tdb.base.buffer.BufferBase: void decSize(int)>(1);

        return;
    }

    public final void decSize(int)
    {
        java.lang.Object[] $r2;
        java.lang.IllegalArgumentException $r1;
        java.lang.Integer $r3, $r4;
        int i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.String $r5;
        com.hp.hpl.jena.tdb.base.buffer.BufferBase r0;

        r0 := @this: com.hp.hpl.jena.tdb.base.buffer.BufferBase;

        i0 := @parameter0: int;

        $i1 = r0.<com.hp.hpl.jena.tdb.base.buffer.BufferBase: int numSlot>;

        $i2 = $i1 - i0;

        if $i2 >= 0 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        $r2 = newarray (java.lang.Object)[2];

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r2[0] = $r3;

        $i5 = r0.<com.hp.hpl.jena.tdb.base.buffer.BufferBase: int maxSlot>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i5);

        $r2[1] = $r4;

        $r5 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("dec(%d): out of range: max=%d", $r2);

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r1;

     label1:
        $i3 = r0.<com.hp.hpl.jena.tdb.base.buffer.BufferBase: int numSlot>;

        $i4 = $i3 - i0;

        r0.<com.hp.hpl.jena.tdb.base.buffer.BufferBase: int numSlot> = $i4;

        return;
    }

    public final int slotLen()
    {
        int $i0;
        com.hp.hpl.jena.tdb.base.buffer.BufferBase r0;

        r0 := @this: com.hp.hpl.jena.tdb.base.buffer.BufferBase;

        $i0 = r0.<com.hp.hpl.jena.tdb.base.buffer.BufferBase: int slotLen>;

        return $i0;
    }

    public final int getSize()
    {
        int $i0;
        com.hp.hpl.jena.tdb.base.buffer.BufferBase r0;

        r0 := @this: com.hp.hpl.jena.tdb.base.buffer.BufferBase;

        $i0 = r0.<com.hp.hpl.jena.tdb.base.buffer.BufferBase: int numSlot>;

        return $i0;
    }

    public final void setSize(int)
    {
        java.lang.Object[] $r1;
        java.lang.IllegalArgumentException $r0;
        java.lang.Integer $r2, $r4;
        int i0, $i1, $i2;
        java.lang.String $r5;
        com.hp.hpl.jena.tdb.base.buffer.BufferBase r3;

        r3 := @this: com.hp.hpl.jena.tdb.base.buffer.BufferBase;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        $i2 = r3.<com.hp.hpl.jena.tdb.base.buffer.BufferBase: int maxSlot>;

        if i0 <= $i2 goto label2;

     label1:
        $r0 = new java.lang.IllegalArgumentException;

        $r1 = newarray (java.lang.Object)[2];

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r1[0] = $r2;

        $i1 = r3.<com.hp.hpl.jena.tdb.base.buffer.BufferBase: int maxSlot>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r1[1] = $r4;

        $r5 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("size(%d): out of range: max=%d", $r1);

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r0;

     label2:
        r3.<com.hp.hpl.jena.tdb.base.buffer.BufferBase: int numSlot> = i0;

        return;
    }

    public final int size()
    {
        int $i0;
        com.hp.hpl.jena.tdb.base.buffer.BufferBase r0;

        r0 := @this: com.hp.hpl.jena.tdb.base.buffer.BufferBase;

        $i0 = r0.<com.hp.hpl.jena.tdb.base.buffer.BufferBase: int numSlot>;

        return $i0;
    }

    public final int maxSize()
    {
        int $i0;
        com.hp.hpl.jena.tdb.base.buffer.BufferBase r0;

        r0 := @this: com.hp.hpl.jena.tdb.base.buffer.BufferBase;

        $i0 = r0.<com.hp.hpl.jena.tdb.base.buffer.BufferBase: int maxSlot>;

        return $i0;
    }

    public final void shiftUp(int)
    {
        int i0;
        com.hp.hpl.jena.tdb.base.buffer.BufferBase r0;

        r0 := @this: com.hp.hpl.jena.tdb.base.buffer.BufferBase;

        i0 := @parameter0: int;

        virtualinvoke r0.<com.hp.hpl.jena.tdb.base.buffer.BufferBase: void shiftUpN(int,int)>(i0, 1);

        return;
    }

    public final void shiftUpN(int, int)
    {
        java.lang.Object[] $r3;
        java.lang.Integer $r4, $r5, $r6;
        java.nio.ByteBuffer $r1;
        int i0, $i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12;
        java.lang.String $r7;
        boolean $z0;
        java.lang.IllegalArgumentException $r2;
        com.hp.hpl.jena.tdb.base.buffer.BufferBase r0;

        r0 := @this: com.hp.hpl.jena.tdb.base.buffer.BufferBase;

        i0 := @parameter0: int;

        i2 := @parameter1: int;

        $i1 = r0.<com.hp.hpl.jena.tdb.base.buffer.BufferBase: int numSlot>;

        staticinvoke <com.hp.hpl.jena.tdb.base.buffer.BufferBase: void checkBounds(int,int)>(i0, $i1);

        $i3 = r0.<com.hp.hpl.jena.tdb.base.buffer.BufferBase: int numSlot>;

        $i5 = $i3 + i2;

        $i4 = r0.<com.hp.hpl.jena.tdb.base.buffer.BufferBase: int maxSlot>;

        if $i5 <= $i4 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = newarray (java.lang.Object)[3];

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2);

        $r3[0] = $r4;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2);

        $r3[1] = $r5;

        $i12 = r0.<com.hp.hpl.jena.tdb.base.buffer.BufferBase: int maxSlot>;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i12);

        $r3[2] = $r6;

        $r7 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Shift up(%d): out of range: len=%d max=%d", $r3);

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r2;

     label1:
        $r1 = r0.<com.hp.hpl.jena.tdb.base.buffer.BufferBase: java.nio.ByteBuffer bb>;

        $i9 = i0 + i2;

        $i6 = r0.<com.hp.hpl.jena.tdb.base.buffer.BufferBase: int numSlot>;

        $i8 = $i6 - i0;

        $i7 = r0.<com.hp.hpl.jena.tdb.base.buffer.BufferBase: int slotLen>;

        staticinvoke <org.apache.jena.atlas.lib.ByteBufferLib: void bbcopy(java.nio.ByteBuffer,int,int,int,int)>($r1, i0, $i9, $i8, $i7);

        $z0 = <com.hp.hpl.jena.tdb.sys.SystemTDB: boolean NullOut>;

        if $z0 == 0 goto label2;

        virtualinvoke r0.<com.hp.hpl.jena.tdb.base.buffer.BufferBase: void clear(int,int)>(i0, i2);

     label2:
        $i10 = r0.<com.hp.hpl.jena.tdb.base.buffer.BufferBase: int numSlot>;

        $i11 = $i10 + i2;

        r0.<com.hp.hpl.jena.tdb.base.buffer.BufferBase: int numSlot> = $i11;

        return;
    }

    public final void shiftDown(int)
    {
        int i0;
        com.hp.hpl.jena.tdb.base.buffer.BufferBase r0;

        r0 := @this: com.hp.hpl.jena.tdb.base.buffer.BufferBase;

        i0 := @parameter0: int;

        virtualinvoke r0.<com.hp.hpl.jena.tdb.base.buffer.BufferBase: void shiftDownN(int,int)>(i0, 1);

        return;
    }

    public final void shiftDownN(int, int)
    {
        java.lang.Object[] $r3;
        java.lang.Integer $r4, $r5, $r6;
        java.nio.ByteBuffer $r1;
        int i0, $i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13;
        java.lang.String $r7;
        boolean $z0;
        java.lang.IllegalArgumentException $r2;
        com.hp.hpl.jena.tdb.base.buffer.BufferBase r0;

        r0 := @this: com.hp.hpl.jena.tdb.base.buffer.BufferBase;

        i0 := @parameter0: int;

        i2 := @parameter1: int;

        $i1 = r0.<com.hp.hpl.jena.tdb.base.buffer.BufferBase: int numSlot>;

        staticinvoke <com.hp.hpl.jena.tdb.base.buffer.BufferBase: void checkBounds(int,int)>(i0, $i1);

        $i4 = i0 + i2;

        $i3 = r0.<com.hp.hpl.jena.tdb.base.buffer.BufferBase: int numSlot>;

        if $i4 <= $i3 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = newarray (java.lang.Object)[3];

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r3[0] = $r4;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2);

        $r3[1] = $r5;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2);

        $r3[2] = $r6;

        $r7 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Shift down(%d,%d): out of range: len=%d", $r3);

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r2;

     label1:
        $r1 = r0.<com.hp.hpl.jena.tdb.base.buffer.BufferBase: java.nio.ByteBuffer bb>;

        $i9 = i0 + i2;

        $i5 = r0.<com.hp.hpl.jena.tdb.base.buffer.BufferBase: int numSlot>;

        $i6 = $i5 - i2;

        $i8 = $i6 - i0;

        $i7 = r0.<com.hp.hpl.jena.tdb.base.buffer.BufferBase: int slotLen>;

        staticinvoke <org.apache.jena.atlas.lib.ByteBufferLib: void bbcopy(java.nio.ByteBuffer,int,int,int,int)>($r1, $i9, i0, $i8, $i7);

        $z0 = <com.hp.hpl.jena.tdb.sys.SystemTDB: boolean NullOut>;

        if $z0 == 0 goto label2;

        $i12 = r0.<com.hp.hpl.jena.tdb.base.buffer.BufferBase: int numSlot>;

        $i13 = $i12 - i2;

        virtualinvoke r0.<com.hp.hpl.jena.tdb.base.buffer.BufferBase: void clear(int,int)>($i13, i2);

     label2:
        $i10 = r0.<com.hp.hpl.jena.tdb.base.buffer.BufferBase: int numSlot>;

        $i11 = $i10 - i2;

        r0.<com.hp.hpl.jena.tdb.base.buffer.BufferBase: int numSlot> = $i11;

        return;
    }

    public void shiftRight(com.hp.hpl.jena.tdb.base.buffer.BufferBase)
    {
        com.hp.hpl.jena.tdb.base.buffer.BufferException $r4, $r5;
        java.nio.ByteBuffer $r2, $r3;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        com.hp.hpl.jena.tdb.base.buffer.BufferBase r0, r1;

        r1 := @this: com.hp.hpl.jena.tdb.base.buffer.BufferBase;

        r0 := @parameter0: com.hp.hpl.jena.tdb.base.buffer.BufferBase;

        $i1 = r0.<com.hp.hpl.jena.tdb.base.buffer.BufferBase: int numSlot>;

        $i0 = r0.<com.hp.hpl.jena.tdb.base.buffer.BufferBase: int maxSlot>;

        if $i1 < $i0 goto label1;

        $r5 = new com.hp.hpl.jena.tdb.base.buffer.BufferException;

        specialinvoke $r5.<com.hp.hpl.jena.tdb.base.buffer.BufferException: void <init>(java.lang.String)>("No space in destination buffer");

        throw $r5;

     label1:
        $i2 = r1.<com.hp.hpl.jena.tdb.base.buffer.BufferBase: int numSlot>;

        if $i2 > 0 goto label2;

        $r4 = new com.hp.hpl.jena.tdb.base.buffer.BufferException;

        specialinvoke $r4.<com.hp.hpl.jena.tdb.base.buffer.BufferException: void <init>(java.lang.String)>("Empty buffer");

        throw $r4;

     label2:
        $i3 = r0.<com.hp.hpl.jena.tdb.base.buffer.BufferBase: int numSlot>;

        if $i3 <= 0 goto label3;

        virtualinvoke r0.<com.hp.hpl.jena.tdb.base.buffer.BufferBase: void shiftUp(int)>(0);

        goto label4;

     label3:
        $i4 = r0.<com.hp.hpl.jena.tdb.base.buffer.BufferBase: int numSlot>;

        $i5 = $i4 + 1;

        r0.<com.hp.hpl.jena.tdb.base.buffer.BufferBase: int numSlot> = $i5;

     label4:
        $r3 = r1.<com.hp.hpl.jena.tdb.base.buffer.BufferBase: java.nio.ByteBuffer bb>;

        $i6 = r1.<com.hp.hpl.jena.tdb.base.buffer.BufferBase: int numSlot>;

        $i8 = $i6 - 1;

        $r2 = r0.<com.hp.hpl.jena.tdb.base.buffer.BufferBase: java.nio.ByteBuffer bb>;

        $i7 = r1.<com.hp.hpl.jena.tdb.base.buffer.BufferBase: int slotLen>;

        staticinvoke <org.apache.jena.atlas.lib.ByteBufferLib: void bbcopy(java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,int,int)>($r3, $i8, $r2, 0, 1, $i7);

        virtualinvoke r1.<com.hp.hpl.jena.tdb.base.buffer.BufferBase: void removeTop()>();

        return;
    }

    public void shiftLeft(com.hp.hpl.jena.tdb.base.buffer.BufferBase)
    {
        com.hp.hpl.jena.tdb.base.buffer.BufferException $r4, $r5;
        java.nio.ByteBuffer $r2, $r3;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        com.hp.hpl.jena.tdb.base.buffer.BufferBase r0, r1;

        r0 := @this: com.hp.hpl.jena.tdb.base.buffer.BufferBase;

        r1 := @parameter0: com.hp.hpl.jena.tdb.base.buffer.BufferBase;

        $i1 = r0.<com.hp.hpl.jena.tdb.base.buffer.BufferBase: int numSlot>;

        $i0 = r0.<com.hp.hpl.jena.tdb.base.buffer.BufferBase: int maxSlot>;

        if $i1 < $i0 goto label1;

        $r5 = new com.hp.hpl.jena.tdb.base.buffer.BufferException;

        specialinvoke $r5.<com.hp.hpl.jena.tdb.base.buffer.BufferException: void <init>(java.lang.String)>("No space in destination buffer");

        throw $r5;

     label1:
        $i2 = r1.<com.hp.hpl.jena.tdb.base.buffer.BufferBase: int numSlot>;

        if $i2 > 0 goto label2;

        $r4 = new com.hp.hpl.jena.tdb.base.buffer.BufferException;

        specialinvoke $r4.<com.hp.hpl.jena.tdb.base.buffer.BufferException: void <init>(java.lang.String)>("Empty buffer");

        throw $r4;

     label2:
        $r3 = r1.<com.hp.hpl.jena.tdb.base.buffer.BufferBase: java.nio.ByteBuffer bb>;

        $r2 = r0.<com.hp.hpl.jena.tdb.base.buffer.BufferBase: java.nio.ByteBuffer bb>;

        $i4 = r0.<com.hp.hpl.jena.tdb.base.buffer.BufferBase: int numSlot>;

        $i3 = r0.<com.hp.hpl.jena.tdb.base.buffer.BufferBase: int slotLen>;

        staticinvoke <org.apache.jena.atlas.lib.ByteBufferLib: void bbcopy(java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,int,int)>($r3, 0, $r2, $i4, 1, $i3);

        $i5 = r0.<com.hp.hpl.jena.tdb.base.buffer.BufferBase: int numSlot>;

        $i6 = $i5 + 1;

        r0.<com.hp.hpl.jena.tdb.base.buffer.BufferBase: int numSlot> = $i6;

        virtualinvoke r1.<com.hp.hpl.jena.tdb.base.buffer.BufferBase: void shiftDown(int)>(0);

        return;
    }

    private static final void checkBounds(int, int)
    {
        com.hp.hpl.jena.tdb.base.buffer.BufferException $r0;
        java.lang.Object[] $r1;
        int i0, i1;
        java.lang.String $r4;
        java.lang.Integer $r2, $r3;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 < 0 goto label1;

        if i0 < i1 goto label2;

     label1:
        $r0 = new com.hp.hpl.jena.tdb.base.buffer.BufferException;

        $r1 = newarray (java.lang.Object)[2];

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r1[0] = $r2;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r1[1] = $r3;

        $r4 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Out of bounds: idx=%d, size=%d", $r1);

        specialinvoke $r0.<com.hp.hpl.jena.tdb.base.buffer.BufferException: void <init>(java.lang.String)>($r4);

        throw $r0;

     label2:
        return;
    }

    static void <clinit>()
    {
        <com.hp.hpl.jena.tdb.base.buffer.BufferBase: boolean CheckBuffer> = 0;

        return;
    }
}
