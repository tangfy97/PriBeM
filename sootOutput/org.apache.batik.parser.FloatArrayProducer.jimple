public class org.apache.batik.parser.FloatArrayProducer extends org.apache.batik.parser.DefaultNumberListHandler implements org.apache.batik.parser.PointsHandler
{
    protected java.util.LinkedList as;
    protected float[] a;
    protected int index;
    protected int count;

    public void <init>()
    {
        org.apache.batik.parser.FloatArrayProducer r0;

        r0 := @this: org.apache.batik.parser.FloatArrayProducer;

        specialinvoke r0.<org.apache.batik.parser.DefaultNumberListHandler: void <init>()>();

        return;
    }

    public float[] getFloatArray()
    {
        org.apache.batik.parser.FloatArrayProducer r0;
        float[] $r1;

        r0 := @this: org.apache.batik.parser.FloatArrayProducer;

        $r1 = r0.<org.apache.batik.parser.FloatArrayProducer: float[] a>;

        return $r1;
    }

    public void startNumberList() throws org.apache.batik.parser.ParseException
    {
        org.apache.batik.parser.FloatArrayProducer r0;
        float[] $r2;
        java.util.LinkedList $r1;

        r0 := @this: org.apache.batik.parser.FloatArrayProducer;

        $r1 = new java.util.LinkedList;

        specialinvoke $r1.<java.util.LinkedList: void <init>()>();

        r0.<org.apache.batik.parser.FloatArrayProducer: java.util.LinkedList as> = $r1;

        $r2 = newarray (float)[11];

        r0.<org.apache.batik.parser.FloatArrayProducer: float[] a> = $r2;

        r0.<org.apache.batik.parser.FloatArrayProducer: int count> = 0;

        r0.<org.apache.batik.parser.FloatArrayProducer: int index> = 0;

        return;
    }

    public void numberValue(float) throws org.apache.batik.parser.ParseException
    {
        float[] $r1, $r2, $r3, $r5, $r6;
        org.apache.batik.parser.FloatArrayProducer r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        java.util.LinkedList $r4;
        float f0;

        r0 := @this: org.apache.batik.parser.FloatArrayProducer;

        f0 := @parameter0: float;

        $i1 = r0.<org.apache.batik.parser.FloatArrayProducer: int index>;

        $r1 = r0.<org.apache.batik.parser.FloatArrayProducer: float[] a>;

        $i0 = lengthof $r1;

        if $i1 != $i0 goto label1;

        $r4 = r0.<org.apache.batik.parser.FloatArrayProducer: java.util.LinkedList as>;

        $r3 = r0.<org.apache.batik.parser.FloatArrayProducer: float[] a>;

        virtualinvoke $r4.<java.util.LinkedList: boolean add(java.lang.Object)>($r3);

        $r5 = r0.<org.apache.batik.parser.FloatArrayProducer: float[] a>;

        $i6 = lengthof $r5;

        $i7 = $i6 * 2;

        $i8 = $i7 + 1;

        $r6 = newarray (float)[$i8];

        r0.<org.apache.batik.parser.FloatArrayProducer: float[] a> = $r6;

        r0.<org.apache.batik.parser.FloatArrayProducer: int index> = 0;

     label1:
        $r2 = r0.<org.apache.batik.parser.FloatArrayProducer: float[] a>;

        $i2 = r0.<org.apache.batik.parser.FloatArrayProducer: int index>;

        $i3 = $i2 + 1;

        r0.<org.apache.batik.parser.FloatArrayProducer: int index> = $i3;

        $r2[$i2] = f0;

        $i4 = r0.<org.apache.batik.parser.FloatArrayProducer: int count>;

        $i5 = $i4 + 1;

        r0.<org.apache.batik.parser.FloatArrayProducer: int count> = $i5;

        return;
    }

    public void endNumberList() throws org.apache.batik.parser.ParseException
    {
        java.util.Iterator $r3;
        float[] r1, r5, $r6;
        org.apache.batik.parser.FloatArrayProducer r0;
        int $i0, $i1, $i2, $i3, i4;
        java.lang.Object $r4;
        java.util.LinkedList $r2, $r7;
        boolean $z0;

        r0 := @this: org.apache.batik.parser.FloatArrayProducer;

        $i0 = r0.<org.apache.batik.parser.FloatArrayProducer: int count>;

        r1 = newarray (float)[$i0];

        i4 = 0;

        $r2 = r0.<org.apache.batik.parser.FloatArrayProducer: java.util.LinkedList as>;

        $r3 = virtualinvoke $r2.<java.util.AbstractSequentialList: java.util.Iterator iterator()>();

        goto label2;

     label1:
        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (float[]) $r4;

        $i1 = lengthof r5;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r5, 0, r1, i4, $i1);

        $i2 = lengthof r5;

        i4 = i4 + $i2;

     label2:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        $r6 = r0.<org.apache.batik.parser.FloatArrayProducer: float[] a>;

        $i3 = r0.<org.apache.batik.parser.FloatArrayProducer: int index>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r6, 0, r1, i4, $i3);

        $r7 = r0.<org.apache.batik.parser.FloatArrayProducer: java.util.LinkedList as>;

        virtualinvoke $r7.<java.util.LinkedList: void clear()>();

        r0.<org.apache.batik.parser.FloatArrayProducer: float[] a> = r1;

        return;
    }

    public void startPoints() throws org.apache.batik.parser.ParseException
    {
        org.apache.batik.parser.FloatArrayProducer r0;

        r0 := @this: org.apache.batik.parser.FloatArrayProducer;

        virtualinvoke r0.<org.apache.batik.parser.FloatArrayProducer: void startNumberList()>();

        return;
    }

    public void point(float, float) throws org.apache.batik.parser.ParseException
    {
        org.apache.batik.parser.FloatArrayProducer r0;
        float f0, f1;

        r0 := @this: org.apache.batik.parser.FloatArrayProducer;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        virtualinvoke r0.<org.apache.batik.parser.FloatArrayProducer: void numberValue(float)>(f0);

        virtualinvoke r0.<org.apache.batik.parser.FloatArrayProducer: void numberValue(float)>(f1);

        return;
    }

    public void endPoints() throws org.apache.batik.parser.ParseException
    {
        org.apache.batik.parser.FloatArrayProducer r0;

        r0 := @this: org.apache.batik.parser.FloatArrayProducer;

        virtualinvoke r0.<org.apache.batik.parser.FloatArrayProducer: void endNumberList()>();

        return;
    }
}
