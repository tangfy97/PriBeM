public class com.hp.hpl.jena.sparql.algebra.op.OpAssign extends com.hp.hpl.jena.sparql.algebra.op.Op1
{
    private com.hp.hpl.jena.sparql.core.VarExprList assignments;

    public static com.hp.hpl.jena.sparql.algebra.Op assign(com.hp.hpl.jena.sparql.algebra.Op, com.hp.hpl.jena.sparql.core.Var, com.hp.hpl.jena.sparql.expr.Expr)
    {
        com.hp.hpl.jena.sparql.core.Var r2;
        com.hp.hpl.jena.sparql.algebra.op.OpAssign r1;
        com.hp.hpl.jena.sparql.expr.Expr r4;
        com.hp.hpl.jena.sparql.core.VarExprList $r3;
        com.hp.hpl.jena.sparql.algebra.Op r0, $r5, $r6;
        boolean $z0, $z1;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.Op;

        r2 := @parameter1: com.hp.hpl.jena.sparql.core.Var;

        r4 := @parameter2: com.hp.hpl.jena.sparql.expr.Expr;

        $z0 = r0 instanceof com.hp.hpl.jena.sparql.algebra.op.OpAssign;

        if $z0 != 0 goto label1;

        $r6 = staticinvoke <com.hp.hpl.jena.sparql.algebra.op.OpAssign: com.hp.hpl.jena.sparql.algebra.Op createAssign(com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.core.Var,com.hp.hpl.jena.sparql.expr.Expr)>(r0, r2, r4);

        return $r6;

     label1:
        r1 = (com.hp.hpl.jena.sparql.algebra.op.OpAssign) r0;

        $r3 = r1.<com.hp.hpl.jena.sparql.algebra.op.OpAssign: com.hp.hpl.jena.sparql.core.VarExprList assignments>;

        $z1 = virtualinvoke $r3.<com.hp.hpl.jena.sparql.core.VarExprList: boolean contains(com.hp.hpl.jena.sparql.core.Var)>(r2);

        if $z1 == 0 goto label2;

        $r5 = staticinvoke <com.hp.hpl.jena.sparql.algebra.op.OpAssign: com.hp.hpl.jena.sparql.algebra.Op createAssign(com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.core.Var,com.hp.hpl.jena.sparql.expr.Expr)>(r0, r2, r4);

        return $r5;

     label2:
        specialinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpAssign: void add(com.hp.hpl.jena.sparql.core.Var,com.hp.hpl.jena.sparql.expr.Expr)>(r2, r4);

        return r1;
    }

    public static com.hp.hpl.jena.sparql.algebra.Op assign(com.hp.hpl.jena.sparql.algebra.Op, com.hp.hpl.jena.sparql.core.VarExprList)
    {
        java.util.Iterator $r4;
        com.hp.hpl.jena.sparql.core.Var r7;
        com.hp.hpl.jena.sparql.algebra.op.OpAssign r1;
        java.util.List $r3;
        com.hp.hpl.jena.sparql.core.VarExprList r2, $r5, $r8;
        java.lang.Object $r6;
        com.hp.hpl.jena.sparql.algebra.Op r0, $r9, $r10;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.Op;

        r2 := @parameter1: com.hp.hpl.jena.sparql.core.VarExprList;

        $z0 = r0 instanceof com.hp.hpl.jena.sparql.algebra.op.OpAssign;

        if $z0 != 0 goto label1;

        $r10 = staticinvoke <com.hp.hpl.jena.sparql.algebra.op.OpAssign: com.hp.hpl.jena.sparql.algebra.Op createAssign(com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.core.VarExprList)>(r0, r2);

        return $r10;

     label1:
        r1 = (com.hp.hpl.jena.sparql.algebra.op.OpAssign) r0;

        $r3 = virtualinvoke r2.<com.hp.hpl.jena.sparql.core.VarExprList: java.util.List getVars()>();

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r6 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r7 = (com.hp.hpl.jena.sparql.core.Var) $r6;

        $r8 = r1.<com.hp.hpl.jena.sparql.algebra.op.OpAssign: com.hp.hpl.jena.sparql.core.VarExprList assignments>;

        $z2 = virtualinvoke $r8.<com.hp.hpl.jena.sparql.core.VarExprList: boolean contains(com.hp.hpl.jena.sparql.core.Var)>(r7);

        if $z2 == 0 goto label3;

        $r9 = staticinvoke <com.hp.hpl.jena.sparql.algebra.op.OpAssign: com.hp.hpl.jena.sparql.algebra.Op createAssign(com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.core.VarExprList)>(r0, r2);

        return $r9;

     label3:
        goto label2;

     label4:
        $r5 = r1.<com.hp.hpl.jena.sparql.algebra.op.OpAssign: com.hp.hpl.jena.sparql.core.VarExprList assignments>;

        virtualinvoke $r5.<com.hp.hpl.jena.sparql.core.VarExprList: void addAll(com.hp.hpl.jena.sparql.core.VarExprList)>(r2);

        return r1;
    }

    public static com.hp.hpl.jena.sparql.algebra.op.OpAssign assignDirect(com.hp.hpl.jena.sparql.algebra.Op, com.hp.hpl.jena.sparql.core.VarExprList)
    {
        com.hp.hpl.jena.sparql.core.VarExprList r2;
        com.hp.hpl.jena.sparql.algebra.op.OpAssign $r0;
        com.hp.hpl.jena.sparql.algebra.Op r1;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.Op;

        r2 := @parameter1: com.hp.hpl.jena.sparql.core.VarExprList;

        $r0 = new com.hp.hpl.jena.sparql.algebra.op.OpAssign;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.algebra.op.OpAssign: void <init>(com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.core.VarExprList)>(r1, r2);

        return $r0;
    }

    private static com.hp.hpl.jena.sparql.algebra.Op createAssign(com.hp.hpl.jena.sparql.algebra.Op, com.hp.hpl.jena.sparql.core.Var, com.hp.hpl.jena.sparql.expr.Expr)
    {
        com.hp.hpl.jena.sparql.expr.Expr r4;
        com.hp.hpl.jena.sparql.core.VarExprList $r2;
        com.hp.hpl.jena.sparql.core.Var r3;
        com.hp.hpl.jena.sparql.algebra.op.OpAssign $r0;
        com.hp.hpl.jena.sparql.algebra.Op r1;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.Op;

        r3 := @parameter1: com.hp.hpl.jena.sparql.core.Var;

        r4 := @parameter2: com.hp.hpl.jena.sparql.expr.Expr;

        $r0 = new com.hp.hpl.jena.sparql.algebra.op.OpAssign;

        $r2 = new com.hp.hpl.jena.sparql.core.VarExprList;

        specialinvoke $r2.<com.hp.hpl.jena.sparql.core.VarExprList: void <init>(com.hp.hpl.jena.sparql.core.Var,com.hp.hpl.jena.sparql.expr.Expr)>(r3, r4);

        specialinvoke $r0.<com.hp.hpl.jena.sparql.algebra.op.OpAssign: void <init>(com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.core.VarExprList)>(r1, $r2);

        return $r0;
    }

    private static com.hp.hpl.jena.sparql.algebra.Op createAssign(com.hp.hpl.jena.sparql.algebra.Op, com.hp.hpl.jena.sparql.core.VarExprList)
    {
        com.hp.hpl.jena.sparql.core.VarExprList $r0, r1;
        com.hp.hpl.jena.sparql.algebra.op.OpAssign $r2;
        com.hp.hpl.jena.sparql.algebra.Op r3;

        r3 := @parameter0: com.hp.hpl.jena.sparql.algebra.Op;

        r1 := @parameter1: com.hp.hpl.jena.sparql.core.VarExprList;

        $r0 = new com.hp.hpl.jena.sparql.core.VarExprList;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.core.VarExprList: void <init>()>();

        virtualinvoke $r0.<com.hp.hpl.jena.sparql.core.VarExprList: void addAll(com.hp.hpl.jena.sparql.core.VarExprList)>(r1);

        $r2 = new com.hp.hpl.jena.sparql.algebra.op.OpAssign;

        specialinvoke $r2.<com.hp.hpl.jena.sparql.algebra.op.OpAssign: void <init>(com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.core.VarExprList)>(r3, $r0);

        return $r2;
    }

    private void <init>(com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.core.VarExprList $r2;
        com.hp.hpl.jena.sparql.algebra.op.OpAssign r0;
        com.hp.hpl.jena.sparql.algebra.Op r1;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.op.OpAssign;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.Op;

        specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.Op1: void <init>(com.hp.hpl.jena.sparql.algebra.Op)>(r1);

        $r2 = new com.hp.hpl.jena.sparql.core.VarExprList;

        specialinvoke $r2.<com.hp.hpl.jena.sparql.core.VarExprList: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.algebra.op.OpAssign: com.hp.hpl.jena.sparql.core.VarExprList assignments> = $r2;

        return;
    }

    private void <init>(com.hp.hpl.jena.sparql.algebra.Op, com.hp.hpl.jena.sparql.core.VarExprList)
    {
        com.hp.hpl.jena.sparql.core.VarExprList r2;
        com.hp.hpl.jena.sparql.algebra.op.OpAssign r0;
        com.hp.hpl.jena.sparql.algebra.Op r1;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.op.OpAssign;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.Op;

        r2 := @parameter1: com.hp.hpl.jena.sparql.core.VarExprList;

        specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.Op1: void <init>(com.hp.hpl.jena.sparql.algebra.Op)>(r1);

        r0.<com.hp.hpl.jena.sparql.algebra.op.OpAssign: com.hp.hpl.jena.sparql.core.VarExprList assignments> = r2;

        return;
    }

    public java.lang.String getName()
    {
        com.hp.hpl.jena.sparql.algebra.op.OpAssign r0;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.op.OpAssign;

        return "assign";
    }

    private void add(com.hp.hpl.jena.sparql.core.Var, com.hp.hpl.jena.sparql.expr.Expr)
    {
        com.hp.hpl.jena.sparql.expr.Expr r2;
        com.hp.hpl.jena.sparql.core.VarExprList $r3;
        com.hp.hpl.jena.sparql.core.Var r1;
        com.hp.hpl.jena.sparql.algebra.op.OpAssign r0;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.op.OpAssign;

        r1 := @parameter0: com.hp.hpl.jena.sparql.core.Var;

        r2 := @parameter1: com.hp.hpl.jena.sparql.expr.Expr;

        $r3 = r0.<com.hp.hpl.jena.sparql.algebra.op.OpAssign: com.hp.hpl.jena.sparql.core.VarExprList assignments>;

        virtualinvoke $r3.<com.hp.hpl.jena.sparql.core.VarExprList: void add(com.hp.hpl.jena.sparql.core.Var,com.hp.hpl.jena.sparql.expr.Expr)>(r1, r2);

        return;
    }

    public com.hp.hpl.jena.sparql.core.VarExprList getVarExprList()
    {
        com.hp.hpl.jena.sparql.core.VarExprList $r1;
        com.hp.hpl.jena.sparql.algebra.op.OpAssign r0;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.op.OpAssign;

        $r1 = r0.<com.hp.hpl.jena.sparql.algebra.op.OpAssign: com.hp.hpl.jena.sparql.core.VarExprList assignments>;

        return $r1;
    }

    public int hashCode()
    {
        int $i0, $i1, $i2;
        com.hp.hpl.jena.sparql.core.VarExprList $r1;
        com.hp.hpl.jena.sparql.algebra.op.OpAssign r0;
        com.hp.hpl.jena.sparql.algebra.Op $r2;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.op.OpAssign;

        $r1 = r0.<com.hp.hpl.jena.sparql.algebra.op.OpAssign: com.hp.hpl.jena.sparql.core.VarExprList assignments>;

        $i0 = virtualinvoke $r1.<com.hp.hpl.jena.sparql.core.VarExprList: int hashCode()>();

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpAssign: com.hp.hpl.jena.sparql.algebra.Op getSubOp()>();

        $i1 = virtualinvoke $r2.<java.lang.Object: int hashCode()>();

        $i2 = $i0 ^ $i1;

        return $i2;
    }

    public void visit(com.hp.hpl.jena.sparql.algebra.OpVisitor)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpAssign r1;
        com.hp.hpl.jena.sparql.algebra.OpVisitor r0;

        r1 := @this: com.hp.hpl.jena.sparql.algebra.op.OpAssign;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.OpVisitor;

        interfaceinvoke r0.<com.hp.hpl.jena.sparql.algebra.OpVisitor: void visit(com.hp.hpl.jena.sparql.algebra.op.OpAssign)>(r1);

        return;
    }

    public com.hp.hpl.jena.sparql.algebra.op.Op1 copy(com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.core.VarExprList $r2, $r4;
        com.hp.hpl.jena.sparql.algebra.op.OpAssign $r0, r3;
        com.hp.hpl.jena.sparql.algebra.Op r1;

        r3 := @this: com.hp.hpl.jena.sparql.algebra.op.OpAssign;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.Op;

        $r0 = new com.hp.hpl.jena.sparql.algebra.op.OpAssign;

        $r2 = new com.hp.hpl.jena.sparql.core.VarExprList;

        $r4 = virtualinvoke r3.<com.hp.hpl.jena.sparql.algebra.op.OpAssign: com.hp.hpl.jena.sparql.core.VarExprList getVarExprList()>();

        specialinvoke $r2.<com.hp.hpl.jena.sparql.core.VarExprList: void <init>(com.hp.hpl.jena.sparql.core.VarExprList)>($r4);

        specialinvoke $r0.<com.hp.hpl.jena.sparql.algebra.op.OpAssign: void <init>(com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.core.VarExprList)>(r1, $r2);

        return $r0;
    }

    public boolean equalTo(com.hp.hpl.jena.sparql.algebra.Op, com.hp.hpl.jena.sparql.util.NodeIsomorphismMap)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpAssign r1, r2;
        com.hp.hpl.jena.sparql.util.NodeIsomorphismMap r7;
        com.hp.hpl.jena.sparql.core.VarExprList $r3, $r4;
        com.hp.hpl.jena.sparql.algebra.Op r0, $r5, $r6;
        boolean $z0, $z1, $z2;

        r2 := @this: com.hp.hpl.jena.sparql.algebra.op.OpAssign;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.Op;

        r7 := @parameter1: com.hp.hpl.jena.sparql.util.NodeIsomorphismMap;

        $z0 = r0 instanceof com.hp.hpl.jena.sparql.algebra.op.OpAssign;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        r1 = (com.hp.hpl.jena.sparql.algebra.op.OpAssign) r0;

        $r4 = r2.<com.hp.hpl.jena.sparql.algebra.op.OpAssign: com.hp.hpl.jena.sparql.core.VarExprList assignments>;

        $r3 = r1.<com.hp.hpl.jena.sparql.algebra.op.OpAssign: com.hp.hpl.jena.sparql.core.VarExprList assignments>;

        $z1 = staticinvoke <org.apache.jena.atlas.lib.Lib: boolean equal(java.lang.Object,java.lang.Object)>($r4, $r3);

        if $z1 != 0 goto label2;

        return 0;

     label2:
        $r5 = virtualinvoke r2.<com.hp.hpl.jena.sparql.algebra.op.OpAssign: com.hp.hpl.jena.sparql.algebra.Op getSubOp()>();

        $r6 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpAssign: com.hp.hpl.jena.sparql.algebra.Op getSubOp()>();

        $z2 = interfaceinvoke $r5.<com.hp.hpl.jena.sparql.algebra.Op: boolean equalTo(com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.util.NodeIsomorphismMap)>($r6, r7);

        return $z2;
    }

    public com.hp.hpl.jena.sparql.algebra.Op apply(com.hp.hpl.jena.sparql.algebra.Transform, com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.algebra.Transform r0;
        com.hp.hpl.jena.sparql.algebra.op.OpAssign r1;
        com.hp.hpl.jena.sparql.algebra.Op r2, $r3;

        r1 := @this: com.hp.hpl.jena.sparql.algebra.op.OpAssign;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.Transform;

        r2 := @parameter1: com.hp.hpl.jena.sparql.algebra.Op;

        $r3 = interfaceinvoke r0.<com.hp.hpl.jena.sparql.algebra.Transform: com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpAssign,com.hp.hpl.jena.sparql.algebra.Op)>(r1, r2);

        return $r3;
    }
}
