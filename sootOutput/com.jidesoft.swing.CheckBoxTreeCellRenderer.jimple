public class com.jidesoft.swing.CheckBoxTreeCellRenderer extends javax.swing.JPanel implements javax.swing.tree.TreeCellRenderer, java.io.Serializable
{
    private static final long serialVersionUID;
    protected com.jidesoft.swing.TristateCheckBox _checkBox;
    protected javax.swing.JComponent _emptyBox;
    protected javax.swing.JCheckBox _protoType;
    protected javax.swing.tree.TreeCellRenderer _actualTreeRenderer;

    public void <init>()
    {
        com.jidesoft.swing.CheckBoxTreeCellRenderer r0;

        r0 := @this: com.jidesoft.swing.CheckBoxTreeCellRenderer;

        specialinvoke r0.<com.jidesoft.swing.CheckBoxTreeCellRenderer: void <init>(javax.swing.tree.TreeCellRenderer)>(null);

        return;
    }

    public void <init>(javax.swing.tree.TreeCellRenderer)
    {
        javax.swing.tree.TreeCellRenderer r1;
        com.jidesoft.swing.CheckBoxTreeCellRenderer r0;

        r0 := @this: com.jidesoft.swing.CheckBoxTreeCellRenderer;

        r1 := @parameter0: javax.swing.tree.TreeCellRenderer;

        specialinvoke r0.<com.jidesoft.swing.CheckBoxTreeCellRenderer: void <init>(javax.swing.tree.TreeCellRenderer,com.jidesoft.swing.TristateCheckBox)>(r1, null);

        return;
    }

    public void <init>(javax.swing.tree.TreeCellRenderer, com.jidesoft.swing.TristateCheckBox)
    {
        javax.swing.JComponent $r6;
        java.awt.Component $r5;
        java.awt.Dimension $r4;
        javax.swing.tree.TreeCellRenderer r8;
        com.jidesoft.swing.CheckBoxTreeCellRenderer r0;
        com.jidesoft.swing.TristateCheckBox $r1, r2, $r9;
        javax.swing.JCheckBox $r3;
        int $i0;
        java.awt.BorderLayout $r7;

        r0 := @this: com.jidesoft.swing.CheckBoxTreeCellRenderer;

        r8 := @parameter0: javax.swing.tree.TreeCellRenderer;

        r2 := @parameter1: com.jidesoft.swing.TristateCheckBox;

        specialinvoke r0.<javax.swing.JPanel: void <init>()>();

        r0.<com.jidesoft.swing.CheckBoxTreeCellRenderer: com.jidesoft.swing.TristateCheckBox _checkBox> = null;

        r0.<com.jidesoft.swing.CheckBoxTreeCellRenderer: javax.swing.JComponent _emptyBox> = null;

        $r1 = new com.jidesoft.swing.TristateCheckBox;

        specialinvoke $r1.<com.jidesoft.swing.TristateCheckBox: void <init>()>();

        r0.<com.jidesoft.swing.CheckBoxTreeCellRenderer: javax.swing.JCheckBox _protoType> = $r1;

        if r2 != null goto label1;

        $r9 = virtualinvoke r0.<com.jidesoft.swing.CheckBoxTreeCellRenderer: com.jidesoft.swing.TristateCheckBox createCheckBox()>();

        r0.<com.jidesoft.swing.CheckBoxTreeCellRenderer: com.jidesoft.swing.TristateCheckBox _checkBox> = $r9;

        goto label2;

     label1:
        r0.<com.jidesoft.swing.CheckBoxTreeCellRenderer: com.jidesoft.swing.TristateCheckBox _checkBox> = r2;

     label2:
        $r3 = r0.<com.jidesoft.swing.CheckBoxTreeCellRenderer: javax.swing.JCheckBox _protoType>;

        $r4 = virtualinvoke $r3.<javax.swing.JCheckBox: java.awt.Dimension getPreferredSize()>();

        $i0 = $r4.<java.awt.Dimension: int width>;

        $r5 = staticinvoke <javax.swing.Box: java.awt.Component createHorizontalStrut(int)>($i0);

        $r6 = (javax.swing.JComponent) $r5;

        r0.<com.jidesoft.swing.CheckBoxTreeCellRenderer: javax.swing.JComponent _emptyBox> = $r6;

        $r7 = new java.awt.BorderLayout;

        specialinvoke $r7.<java.awt.BorderLayout: void <init>(int,int)>(0, 0);

        virtualinvoke r0.<com.jidesoft.swing.CheckBoxTreeCellRenderer: void setLayout(java.awt.LayoutManager)>($r7);

        virtualinvoke r0.<com.jidesoft.swing.CheckBoxTreeCellRenderer: void setOpaque(boolean)>(0);

        r0.<com.jidesoft.swing.CheckBoxTreeCellRenderer: javax.swing.tree.TreeCellRenderer _actualTreeRenderer> = r8;

        return;
    }

    protected com.jidesoft.swing.TristateCheckBox createCheckBox()
    {
        com.jidesoft.swing.NullTristateCheckBox $r0;
        com.jidesoft.swing.CheckBoxTreeCellRenderer r1;

        r1 := @this: com.jidesoft.swing.CheckBoxTreeCellRenderer;

        $r0 = new com.jidesoft.swing.NullTristateCheckBox;

        specialinvoke $r0.<com.jidesoft.swing.NullTristateCheckBox: void <init>()>();

        virtualinvoke $r0.<com.jidesoft.swing.TristateCheckBox: void setOpaque(boolean)>(0);

        return $r0;
    }

    public javax.swing.tree.TreeCellRenderer getActualTreeRenderer()
    {
        javax.swing.tree.TreeCellRenderer $r1;
        com.jidesoft.swing.CheckBoxTreeCellRenderer r0;

        r0 := @this: com.jidesoft.swing.CheckBoxTreeCellRenderer;

        $r1 = r0.<com.jidesoft.swing.CheckBoxTreeCellRenderer: javax.swing.tree.TreeCellRenderer _actualTreeRenderer>;

        return $r1;
    }

    public void setActualTreeRenderer(javax.swing.tree.TreeCellRenderer)
    {
        javax.swing.tree.TreeCellRenderer r1;
        com.jidesoft.swing.CheckBoxTreeCellRenderer r0;

        r0 := @this: com.jidesoft.swing.CheckBoxTreeCellRenderer;

        r1 := @parameter0: javax.swing.tree.TreeCellRenderer;

        r0.<com.jidesoft.swing.CheckBoxTreeCellRenderer: javax.swing.tree.TreeCellRenderer _actualTreeRenderer> = r1;

        return;
    }

    public java.awt.Component getTreeCellRendererComponent(javax.swing.JTree, java.lang.Object, boolean, boolean, boolean, int, boolean)
    {
        java.awt.Color $r13, $r14, $r20, $r21, $r22;
        javax.swing.border.Border $r11, $r12;
        boolean z0, z1, z2, z3, $z4, $z5, $z6, $z7, $z8, $z9, z11, $z12, $z13;
        javax.swing.tree.TreePath $r7;
        java.awt.Component $r10;
        java.awt.Dimension $r1, $r4;
        javax.swing.tree.TreeCellRenderer $r9, $r27;
        com.jidesoft.swing.TristateCheckBox $r16, $r25, $r26, $r30;
        javax.swing.JCheckBox $r2;
        int $i0, i1;
        javax.swing.JComponent $r3, $r17, r28, $r29;
        com.jidesoft.swing.CheckBoxTree $r15, $r18, $r23, $r24;
        javax.swing.JTree r5;
        java.awt.ComponentOrientation $r6;
        com.jidesoft.swing.CheckBoxTreeCellRenderer r0;
        java.lang.Object r8;
        com.jidesoft.swing.CheckBoxTreeSelectionModel $r19;

        r0 := @this: com.jidesoft.swing.CheckBoxTreeCellRenderer;

        r5 := @parameter0: javax.swing.JTree;

        r8 := @parameter1: java.lang.Object;

        z0 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        z2 := @parameter4: boolean;

        i1 := @parameter5: int;

        z3 := @parameter6: boolean;

        virtualinvoke r0.<com.jidesoft.swing.CheckBoxTreeCellRenderer: void removeAll()>();

        $r3 = r0.<com.jidesoft.swing.CheckBoxTreeCellRenderer: javax.swing.JComponent _emptyBox>;

        $r1 = new java.awt.Dimension;

        $r2 = r0.<com.jidesoft.swing.CheckBoxTreeCellRenderer: javax.swing.JCheckBox _protoType>;

        $r4 = virtualinvoke $r2.<javax.swing.JCheckBox: java.awt.Dimension getPreferredSize()>();

        $i0 = $r4.<java.awt.Dimension: int width>;

        specialinvoke $r1.<java.awt.Dimension: void <init>(int,int)>($i0, 0);

        virtualinvoke $r3.<javax.swing.JComponent: void setPreferredSize(java.awt.Dimension)>($r1);

        $r6 = virtualinvoke r5.<javax.swing.JTree: java.awt.ComponentOrientation getComponentOrientation()>();

        virtualinvoke r0.<com.jidesoft.swing.CheckBoxTreeCellRenderer: void applyComponentOrientation(java.awt.ComponentOrientation)>($r6);

        $r7 = virtualinvoke r5.<javax.swing.JTree: javax.swing.tree.TreePath getPathForRow(int)>(i1);

        if $r7 == null goto label4;

        $z6 = r5 instanceof com.jidesoft.swing.CheckBoxTree;

        if $z6 == 0 goto label4;

        $r18 = (com.jidesoft.swing.CheckBoxTree) r5;

        $r19 = virtualinvoke $r18.<com.jidesoft.swing.CheckBoxTree: com.jidesoft.swing.CheckBoxTreeSelectionModel getCheckBoxTreeSelectionModel()>();

        if $r19 == null goto label4;

        $z7 = virtualinvoke r5.<javax.swing.JTree: boolean isEnabled()>();

        if $z7 == 0 goto label1;

        $r23 = (com.jidesoft.swing.CheckBoxTree) r5;

        $z8 = virtualinvoke $r23.<com.jidesoft.swing.CheckBoxTree: boolean isCheckBoxEnabled()>();

        if $z8 == 0 goto label1;

        $r24 = (com.jidesoft.swing.CheckBoxTree) r5;

        $z9 = virtualinvoke $r24.<com.jidesoft.swing.CheckBoxTree: boolean isCheckBoxEnabled(javax.swing.tree.TreePath)>($r7);

        if $z9 == 0 goto label1;

        $z13 = 1;

        $z12 = 1;

        goto label2;

     label1:
        $z13 = 0;

        $z12 = 0;

     label2:
        z11 = $z12;

        if $z13 != 0 goto label3;

        if z0 != 0 goto label3;

        $r20 = virtualinvoke r0.<com.jidesoft.swing.CheckBoxTreeCellRenderer: java.awt.Color getBackground()>();

        if $r20 == null goto label3;

        $r21 = virtualinvoke r0.<com.jidesoft.swing.CheckBoxTreeCellRenderer: java.awt.Color getBackground()>();

        $r22 = virtualinvoke $r21.<java.awt.Color: java.awt.Color darker()>();

        virtualinvoke r0.<com.jidesoft.swing.CheckBoxTreeCellRenderer: void setForeground(java.awt.Color)>($r22);

     label3:
        $r25 = r0.<com.jidesoft.swing.CheckBoxTreeCellRenderer: com.jidesoft.swing.TristateCheckBox _checkBox>;

        virtualinvoke $r25.<com.jidesoft.swing.TristateCheckBox: void setEnabled(boolean)>(z11);

        $r26 = r0.<com.jidesoft.swing.CheckBoxTreeCellRenderer: com.jidesoft.swing.TristateCheckBox _checkBox>;

        virtualinvoke r0.<com.jidesoft.swing.CheckBoxTreeCellRenderer: void updateCheckBoxState(com.jidesoft.swing.TristateCheckBox,javax.swing.tree.TreePath,com.jidesoft.swing.CheckBoxTreeSelectionModel)>($r26, $r7, $r19);

     label4:
        $r27 = r0.<com.jidesoft.swing.CheckBoxTreeCellRenderer: javax.swing.tree.TreeCellRenderer _actualTreeRenderer>;

        if $r27 == null goto label8;

        $r9 = r0.<com.jidesoft.swing.CheckBoxTreeCellRenderer: javax.swing.tree.TreeCellRenderer _actualTreeRenderer>;

        $r10 = interfaceinvoke $r9.<javax.swing.tree.TreeCellRenderer: java.awt.Component getTreeCellRendererComponent(javax.swing.JTree,java.lang.Object,boolean,boolean,boolean,int,boolean)>(r5, r8, z0, z1, z2, i1, z3);

        r28 = (javax.swing.JComponent) $r10;

        $r11 = virtualinvoke r28.<javax.swing.JComponent: javax.swing.border.Border getBorder()>();

        virtualinvoke r0.<com.jidesoft.swing.CheckBoxTreeCellRenderer: void setBorder(javax.swing.border.Border)>($r11);

        $r12 = staticinvoke <javax.swing.BorderFactory: javax.swing.border.Border createEmptyBorder()>();

        virtualinvoke r28.<javax.swing.JComponent: void setBorder(javax.swing.border.Border)>($r12);

        if $r7 == null goto label5;

        $z4 = r5 instanceof com.jidesoft.swing.CheckBoxTree;

        if $z4 == 0 goto label5;

        $r15 = (com.jidesoft.swing.CheckBoxTree) r5;

        $z5 = virtualinvoke $r15.<com.jidesoft.swing.CheckBoxTree: boolean isCheckBoxVisible(javax.swing.tree.TreePath)>($r7);

        if $z5 == 0 goto label6;

     label5:
        $r29 = r0.<com.jidesoft.swing.CheckBoxTreeCellRenderer: javax.swing.JComponent _emptyBox>;

        virtualinvoke r0.<com.jidesoft.swing.CheckBoxTreeCellRenderer: void remove(java.awt.Component)>($r29);

        $r30 = r0.<com.jidesoft.swing.CheckBoxTreeCellRenderer: com.jidesoft.swing.TristateCheckBox _checkBox>;

        virtualinvoke r0.<com.jidesoft.swing.CheckBoxTreeCellRenderer: void add(java.awt.Component,java.lang.Object)>($r30, "Before");

        goto label7;

     label6:
        $r16 = r0.<com.jidesoft.swing.CheckBoxTreeCellRenderer: com.jidesoft.swing.TristateCheckBox _checkBox>;

        virtualinvoke r0.<com.jidesoft.swing.CheckBoxTreeCellRenderer: void remove(java.awt.Component)>($r16);

        $r17 = r0.<com.jidesoft.swing.CheckBoxTreeCellRenderer: javax.swing.JComponent _emptyBox>;

        virtualinvoke r0.<com.jidesoft.swing.CheckBoxTreeCellRenderer: void add(java.awt.Component,java.lang.Object)>($r17, "After");

     label7:
        virtualinvoke r0.<com.jidesoft.swing.CheckBoxTreeCellRenderer: java.awt.Component add(java.awt.Component)>(r28);

        $r13 = virtualinvoke r28.<javax.swing.JComponent: java.awt.Color getBackground()>();

        virtualinvoke r0.<com.jidesoft.swing.CheckBoxTreeCellRenderer: void setBackground(java.awt.Color)>($r13);

        virtualinvoke r28.<javax.swing.JComponent: void setBackground(java.awt.Color)>(null);

        $r14 = virtualinvoke r28.<javax.swing.JComponent: java.awt.Color getForeground()>();

        virtualinvoke r0.<com.jidesoft.swing.CheckBoxTreeCellRenderer: void setForeground(java.awt.Color)>($r14);

        virtualinvoke r28.<javax.swing.JComponent: void setForeground(java.awt.Color)>(null);

     label8:
        return r0;
    }

    protected void updateCheckBoxState(com.jidesoft.swing.TristateCheckBox, javax.swing.tree.TreePath, com.jidesoft.swing.CheckBoxTreeSelectionModel)
    {
        javax.swing.tree.TreePath r1;
        byte $b0;
        com.jidesoft.swing.CheckBoxTreeCellRenderer r3;
        com.jidesoft.swing.TristateCheckBox r2;
        com.jidesoft.swing.CheckBoxTreeSelectionModel r0;
        boolean $z0, $z1, $z2, $z3;

        r3 := @this: com.jidesoft.swing.CheckBoxTreeCellRenderer;

        r2 := @parameter0: com.jidesoft.swing.TristateCheckBox;

        r1 := @parameter1: javax.swing.tree.TreePath;

        r0 := @parameter2: com.jidesoft.swing.CheckBoxTreeSelectionModel;

        $z0 = virtualinvoke r0.<com.jidesoft.swing.CheckBoxTreeSelectionModel: boolean isDigIn()>();

        $z1 = virtualinvoke r0.<com.jidesoft.swing.CheckBoxTreeSelectionModel: boolean isPathSelected(javax.swing.tree.TreePath,boolean)>(r1, $z0);

        if $z1 == 0 goto label1;

        virtualinvoke r2.<com.jidesoft.swing.TristateCheckBox: void setState(int)>(1);

        goto label4;

     label1:
        $z2 = virtualinvoke r0.<com.jidesoft.swing.CheckBoxTreeSelectionModel: boolean isDigIn()>();

        if $z2 == 0 goto label2;

        $z3 = virtualinvoke r0.<com.jidesoft.swing.CheckBoxTreeSelectionModel: boolean isPartiallySelected(javax.swing.tree.TreePath)>(r1);

        if $z3 == 0 goto label2;

        $b0 = 2;

        goto label3;

     label2:
        $b0 = 0;

     label3:
        virtualinvoke r2.<com.jidesoft.swing.TristateCheckBox: void setState(int)>($b0);

     label4:
        return;
    }

    public java.lang.String getToolTipText(java.awt.event.MouseEvent)
    {
        java.awt.Point $r4;
        long $l3;
        int $i0, $i1, $i2, $i4, $i5, $i6, $i7;
        java.lang.String $r3, $r11;
        boolean $z0, $z1;
        javax.swing.JComponent $r8, $r10;
        java.awt.event.MouseEvent r2, $r6;
        javax.swing.tree.TreeCellRenderer $r1, $r7, $r9;
        com.jidesoft.swing.CheckBoxTreeCellRenderer r0;
        com.jidesoft.swing.TristateCheckBox $r5;

        r0 := @this: com.jidesoft.swing.CheckBoxTreeCellRenderer;

        r2 := @parameter0: java.awt.event.MouseEvent;

        $r1 = r0.<com.jidesoft.swing.CheckBoxTreeCellRenderer: javax.swing.tree.TreeCellRenderer _actualTreeRenderer>;

        $z0 = $r1 instanceof javax.swing.JComponent;

        if $z0 == 0 goto label1;

        $r4 = virtualinvoke r2.<java.awt.event.MouseEvent: java.awt.Point getPoint()>();

        $r5 = r0.<com.jidesoft.swing.CheckBoxTreeCellRenderer: com.jidesoft.swing.TristateCheckBox _checkBox>;

        $i0 = virtualinvoke $r5.<com.jidesoft.swing.TristateCheckBox: int getWidth()>();

        $i1 = neg $i0;

        virtualinvoke $r4.<java.awt.Point: void translate(int,int)>($i1, 0);

        $r6 = new java.awt.event.MouseEvent;

        $r7 = r0.<com.jidesoft.swing.CheckBoxTreeCellRenderer: javax.swing.tree.TreeCellRenderer _actualTreeRenderer>;

        $r8 = (javax.swing.JComponent) $r7;

        $i2 = virtualinvoke r2.<java.awt.event.MouseEvent: int getID()>();

        $l3 = virtualinvoke r2.<java.awt.event.MouseEvent: long getWhen()>();

        $i4 = virtualinvoke r2.<java.awt.event.MouseEvent: int getModifiers()>();

        $i5 = $r4.<java.awt.Point: int x>;

        $i6 = $r4.<java.awt.Point: int y>;

        $i7 = virtualinvoke r2.<java.awt.event.MouseEvent: int getClickCount()>();

        $z1 = virtualinvoke r2.<java.awt.event.MouseEvent: boolean isPopupTrigger()>();

        specialinvoke $r6.<java.awt.event.MouseEvent: void <init>(java.awt.Component,int,long,int,int,int,int,boolean)>($r8, $i2, $l3, $i4, $i5, $i6, $i7, $z1);

        $r9 = r0.<com.jidesoft.swing.CheckBoxTreeCellRenderer: javax.swing.tree.TreeCellRenderer _actualTreeRenderer>;

        $r10 = (javax.swing.JComponent) $r9;

        $r11 = virtualinvoke $r10.<javax.swing.JComponent: java.lang.String getToolTipText(java.awt.event.MouseEvent)>($r6);

        if $r11 == null goto label1;

        return $r11;

     label1:
        $r3 = specialinvoke r0.<javax.swing.JPanel: java.lang.String getToolTipText(java.awt.event.MouseEvent)>(r2);

        return $r3;
    }

    public static void <clinit>()
    {
        <com.jidesoft.swing.CheckBoxTreeCellRenderer: long serialVersionUID> = 30207434500313004L;

        return;
    }
}
