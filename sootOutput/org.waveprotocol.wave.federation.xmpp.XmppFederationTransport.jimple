public class org.waveprotocol.wave.federation.xmpp.XmppFederationTransport extends java.lang.Object implements org.waveprotocol.wave.federation.FederationTransport
{
    private static final org.waveprotocol.wave.util.logging.Log LOG;
    private final org.waveprotocol.wave.federation.xmpp.ComponentPacketTransport transport;

    void <init>(org.waveprotocol.wave.federation.xmpp.ComponentPacketTransport)
    {
        org.waveprotocol.wave.federation.xmpp.XmppFederationTransport r0;
        org.waveprotocol.wave.federation.xmpp.ComponentPacketTransport r1;

        r0 := @this: org.waveprotocol.wave.federation.xmpp.XmppFederationTransport;

        r1 := @parameter0: org.waveprotocol.wave.federation.xmpp.ComponentPacketTransport;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.waveprotocol.wave.federation.xmpp.XmppFederationTransport: org.waveprotocol.wave.federation.xmpp.ComponentPacketTransport transport> = r1;

        return;
    }

    public void startFederation()
    {
        org.waveprotocol.wave.federation.xmpp.XmppFederationTransport r0;
        org.waveprotocol.wave.federation.xmpp.ComponentPacketTransport $r1;
        org.xmpp.component.ComponentException $r2;
        org.waveprotocol.wave.util.logging.Log $r3;

        r0 := @this: org.waveprotocol.wave.federation.xmpp.XmppFederationTransport;

     label1:
        $r1 = r0.<org.waveprotocol.wave.federation.xmpp.XmppFederationTransport: org.waveprotocol.wave.federation.xmpp.ComponentPacketTransport transport>;

        virtualinvoke $r1.<org.waveprotocol.wave.federation.xmpp.ComponentPacketTransport: void run()>();

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        $r3 = <org.waveprotocol.wave.federation.xmpp.XmppFederationTransport: org.waveprotocol.wave.util.logging.Log LOG>;

        virtualinvoke $r3.<org.waveprotocol.wave.util.logging.Log: void warning(java.lang.String,java.lang.Throwable)>("couldn\'t connect to XMPP server:", $r2);

     label4:
        return;

        catch org.xmpp.component.ComponentException from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        org.waveprotocol.wave.util.logging.Log $r0;

        $r0 = staticinvoke <org.waveprotocol.wave.util.logging.Log: org.waveprotocol.wave.util.logging.Log get(java.lang.Class)>(class "Lorg/waveprotocol/wave/federation/xmpp/XmppFederationTransport;");

        <org.waveprotocol.wave.federation.xmpp.XmppFederationTransport: org.waveprotocol.wave.util.logging.Log LOG> = $r0;

        return;
    }
}
