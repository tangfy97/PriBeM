public class org.apache.batik.ext.awt.image.spi.ImageTagRegistry extends java.lang.Object implements org.apache.batik.ext.awt.image.spi.ErrorConstants
{
    java.util.List entries;
    java.util.List extensions;
    java.util.List mimeTypes;
    org.apache.batik.ext.awt.image.URLImageCache rawCache;
    org.apache.batik.ext.awt.image.URLImageCache imgCache;
    static org.apache.batik.ext.awt.image.spi.ImageTagRegistry registry;
    static org.apache.batik.ext.awt.image.spi.BrokenLinkProvider defaultProvider;
    static org.apache.batik.ext.awt.image.spi.BrokenLinkProvider brokenLinkProvider;
    static java.lang.Class class$org$apache$batik$ext$awt$image$spi$RegistryEntry;

    public void <init>()
    {
        org.apache.batik.ext.awt.image.spi.ImageTagRegistry r0;

        r0 := @this: org.apache.batik.ext.awt.image.spi.ImageTagRegistry;

        specialinvoke r0.<org.apache.batik.ext.awt.image.spi.ImageTagRegistry: void <init>(org.apache.batik.ext.awt.image.URLImageCache,org.apache.batik.ext.awt.image.URLImageCache)>(null, null);

        return;
    }

    public void <init>(org.apache.batik.ext.awt.image.URLImageCache, org.apache.batik.ext.awt.image.URLImageCache)
    {
        java.util.LinkedList $r1;
        org.apache.batik.ext.awt.image.spi.ImageTagRegistry r0;
        org.apache.batik.ext.awt.image.URLImageCache $r2, $r3, r4, r5;

        r0 := @this: org.apache.batik.ext.awt.image.spi.ImageTagRegistry;

        r4 := @parameter0: org.apache.batik.ext.awt.image.URLImageCache;

        r5 := @parameter1: org.apache.batik.ext.awt.image.URLImageCache;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.LinkedList;

        specialinvoke $r1.<java.util.LinkedList: void <init>()>();

        r0.<org.apache.batik.ext.awt.image.spi.ImageTagRegistry: java.util.List entries> = $r1;

        r0.<org.apache.batik.ext.awt.image.spi.ImageTagRegistry: java.util.List extensions> = null;

        r0.<org.apache.batik.ext.awt.image.spi.ImageTagRegistry: java.util.List mimeTypes> = null;

        if r4 != null goto label1;

        $r3 = new org.apache.batik.ext.awt.image.URLImageCache;

        specialinvoke $r3.<org.apache.batik.ext.awt.image.URLImageCache: void <init>()>();

        r4 = $r3;

     label1:
        if r5 != null goto label2;

        $r2 = new org.apache.batik.ext.awt.image.URLImageCache;

        specialinvoke $r2.<org.apache.batik.ext.awt.image.URLImageCache: void <init>()>();

        r5 = $r2;

     label2:
        r0.<org.apache.batik.ext.awt.image.spi.ImageTagRegistry: org.apache.batik.ext.awt.image.URLImageCache rawCache> = r4;

        r0.<org.apache.batik.ext.awt.image.spi.ImageTagRegistry: org.apache.batik.ext.awt.image.URLImageCache imgCache> = r5;

        return;
    }

    public void flushCache()
    {
        org.apache.batik.ext.awt.image.spi.ImageTagRegistry r0;
        org.apache.batik.ext.awt.image.URLImageCache $r1, $r2;

        r0 := @this: org.apache.batik.ext.awt.image.spi.ImageTagRegistry;

        $r1 = r0.<org.apache.batik.ext.awt.image.spi.ImageTagRegistry: org.apache.batik.ext.awt.image.URLImageCache rawCache>;

        virtualinvoke $r1.<org.apache.batik.util.SoftReferenceCache: void flush()>();

        $r2 = r0.<org.apache.batik.ext.awt.image.spi.ImageTagRegistry: org.apache.batik.ext.awt.image.URLImageCache imgCache>;

        virtualinvoke $r2.<org.apache.batik.util.SoftReferenceCache: void flush()>();

        return;
    }

    public void flushImage(org.apache.batik.util.ParsedURL)
    {
        org.apache.batik.util.ParsedURL r1;
        org.apache.batik.ext.awt.image.spi.ImageTagRegistry r0;
        org.apache.batik.ext.awt.image.URLImageCache $r2, $r3;

        r0 := @this: org.apache.batik.ext.awt.image.spi.ImageTagRegistry;

        r1 := @parameter0: org.apache.batik.util.ParsedURL;

        $r2 = r0.<org.apache.batik.ext.awt.image.spi.ImageTagRegistry: org.apache.batik.ext.awt.image.URLImageCache rawCache>;

        virtualinvoke $r2.<org.apache.batik.ext.awt.image.URLImageCache: void clear(org.apache.batik.util.ParsedURL)>(r1);

        $r3 = r0.<org.apache.batik.ext.awt.image.spi.ImageTagRegistry: org.apache.batik.ext.awt.image.URLImageCache imgCache>;

        virtualinvoke $r3.<org.apache.batik.ext.awt.image.URLImageCache: void clear(org.apache.batik.util.ParsedURL)>(r1);

        return;
    }

    public org.apache.batik.ext.awt.image.renderable.Filter checkCache(org.apache.batik.util.ParsedURL, org.apache.batik.ext.awt.color.ICCColorSpaceExt)
    {
        org.apache.batik.ext.awt.image.spi.ImageTagRegistry r1;
        org.apache.batik.ext.awt.image.renderable.Filter $r3, r6;
        org.apache.batik.ext.awt.image.renderable.ProfileRable $r4;
        org.apache.batik.util.ParsedURL r2;
        org.apache.batik.ext.awt.color.ICCColorSpaceExt r0;
        org.apache.batik.ext.awt.image.URLImageCache r5;
        boolean $z0;

        r1 := @this: org.apache.batik.ext.awt.image.spi.ImageTagRegistry;

        r2 := @parameter0: org.apache.batik.util.ParsedURL;

        r0 := @parameter1: org.apache.batik.ext.awt.color.ICCColorSpaceExt;

        if r0 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        if $z0 == 0 goto label3;

        r5 = r1.<org.apache.batik.ext.awt.image.spi.ImageTagRegistry: org.apache.batik.ext.awt.image.URLImageCache rawCache>;

        goto label4;

     label3:
        r5 = r1.<org.apache.batik.ext.awt.image.spi.ImageTagRegistry: org.apache.batik.ext.awt.image.URLImageCache imgCache>;

     label4:
        $r3 = virtualinvoke r5.<org.apache.batik.ext.awt.image.URLImageCache: org.apache.batik.ext.awt.image.renderable.Filter request(org.apache.batik.util.ParsedURL)>(r2);

        r6 = $r3;

        if $r3 != null goto label5;

        virtualinvoke r5.<org.apache.batik.ext.awt.image.URLImageCache: void clear(org.apache.batik.util.ParsedURL)>(r2);

        return null;

     label5:
        if r0 == null goto label6;

        $r4 = new org.apache.batik.ext.awt.image.renderable.ProfileRable;

        specialinvoke $r4.<org.apache.batik.ext.awt.image.renderable.ProfileRable: void <init>(org.apache.batik.ext.awt.image.renderable.Filter,org.apache.batik.ext.awt.color.ICCColorSpaceExt)>($r3, r0);

        r6 = $r4;

     label6:
        return r6;
    }

    public org.apache.batik.ext.awt.image.renderable.Filter readURL(org.apache.batik.util.ParsedURL)
    {
        org.apache.batik.util.ParsedURL r1;
        org.apache.batik.ext.awt.image.spi.ImageTagRegistry r0;
        org.apache.batik.ext.awt.image.renderable.Filter $r2;

        r0 := @this: org.apache.batik.ext.awt.image.spi.ImageTagRegistry;

        r1 := @parameter0: org.apache.batik.util.ParsedURL;

        $r2 = virtualinvoke r0.<org.apache.batik.ext.awt.image.spi.ImageTagRegistry: org.apache.batik.ext.awt.image.renderable.Filter readURL(java.io.InputStream,org.apache.batik.util.ParsedURL,org.apache.batik.ext.awt.color.ICCColorSpaceExt,boolean,boolean)>(null, r1, null, 1, 1);

        return $r2;
    }

    public org.apache.batik.ext.awt.image.renderable.Filter readURL(org.apache.batik.util.ParsedURL, org.apache.batik.ext.awt.color.ICCColorSpaceExt)
    {
        org.apache.batik.util.ParsedURL r1;
        org.apache.batik.ext.awt.color.ICCColorSpaceExt r2;
        org.apache.batik.ext.awt.image.spi.ImageTagRegistry r0;
        org.apache.batik.ext.awt.image.renderable.Filter $r3;

        r0 := @this: org.apache.batik.ext.awt.image.spi.ImageTagRegistry;

        r1 := @parameter0: org.apache.batik.util.ParsedURL;

        r2 := @parameter1: org.apache.batik.ext.awt.color.ICCColorSpaceExt;

        $r3 = virtualinvoke r0.<org.apache.batik.ext.awt.image.spi.ImageTagRegistry: org.apache.batik.ext.awt.image.renderable.Filter readURL(java.io.InputStream,org.apache.batik.util.ParsedURL,org.apache.batik.ext.awt.color.ICCColorSpaceExt,boolean,boolean)>(null, r1, r2, 1, 1);

        return $r3;
    }

    public org.apache.batik.ext.awt.image.renderable.Filter readURL(java.io.InputStream, org.apache.batik.util.ParsedURL, org.apache.batik.ext.awt.color.ICCColorSpaceExt, boolean, boolean)
    {
        org.apache.batik.ext.awt.image.spi.URLRegistryEntry r24;
        java.io.BufferedInputStream $r14, $r18;
        org.apache.batik.ext.awt.image.spi.StreamRegistryEntry r25;
        boolean z0, $z1, $z2, $z3, z4, z5, $z6, $z7, $z8, z10, $z11, $z12, $z13, $z14, z15, z16;
        java.io.StreamCorruptedException $r19;
        org.apache.batik.ext.awt.image.spi.ImageTagRegistry r2;
        org.apache.batik.ext.awt.image.renderable.Filter $r8, $r10, $r11, $r15, $r16, r22, $r26;
        java.util.List $r3, $r4;
        org.apache.batik.util.ParsedURL r1;
        org.apache.batik.ext.awt.image.URLImageCache r23;
        org.apache.batik.ext.awt.image.renderable.ProfileRable $r9, $r17;
        org.apache.batik.ext.awt.color.ICCColorSpaceExt r0;
        org.apache.batik.ext.awt.image.spi.RegistryEntry r7;
        java.util.Iterator $r5, $r12;
        java.io.IOException $r20;
        java.lang.Object $r6;
        java.io.InputStream $r13, r21;

        r2 := @this: org.apache.batik.ext.awt.image.spi.ImageTagRegistry;

        r21 := @parameter0: java.io.InputStream;

        r1 := @parameter1: org.apache.batik.util.ParsedURL;

        r0 := @parameter2: org.apache.batik.ext.awt.color.ICCColorSpaceExt;

        z5 := @parameter3: boolean;

        z4 := @parameter4: boolean;

        if r21 == null goto label01;

        $z8 = virtualinvoke r21.<java.io.InputStream: boolean markSupported()>();

        if $z8 != 0 goto label01;

        $r18 = new java.io.BufferedInputStream;

        specialinvoke $r18.<java.io.BufferedInputStream: void <init>(java.io.InputStream)>(r21);

        r21 = $r18;

     label01:
        if r0 == null goto label02;

        $z14 = 1;

        $z13 = 1;

        goto label03;

     label02:
        $z14 = 0;

        $z13 = 0;

     label03:
        z0 = $z14;

        r22 = null;

        r23 = null;

        if r1 == null goto label07;

        if $z13 == 0 goto label04;

        r23 = r2.<org.apache.batik.ext.awt.image.spi.ImageTagRegistry: org.apache.batik.ext.awt.image.URLImageCache rawCache>;

        goto label05;

     label04:
        r23 = r2.<org.apache.batik.ext.awt.image.spi.ImageTagRegistry: org.apache.batik.ext.awt.image.URLImageCache imgCache>;

     label05:
        $r16 = virtualinvoke r23.<org.apache.batik.ext.awt.image.URLImageCache: org.apache.batik.ext.awt.image.renderable.Filter request(org.apache.batik.util.ParsedURL)>(r1);

        r22 = $r16;

        if $r16 == null goto label07;

        if r0 == null goto label06;

        $r17 = new org.apache.batik.ext.awt.image.renderable.ProfileRable;

        specialinvoke $r17.<org.apache.batik.ext.awt.image.renderable.ProfileRable: void <init>(org.apache.batik.ext.awt.image.renderable.Filter,org.apache.batik.ext.awt.color.ICCColorSpaceExt)>($r16, r0);

        r22 = $r17;

     label06:
        return r22;

     label07:
        z10 = 0;

        z16 = 0;

        z15 = 0;

        $r3 = virtualinvoke r2.<org.apache.batik.ext.awt.image.spi.ImageTagRegistry: java.util.List getRegisteredMimeTypes()>();

        $r4 = r2.<org.apache.batik.ext.awt.image.spi.ImageTagRegistry: java.util.List entries>;

        $r5 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

        goto label20;

     label08:
        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (org.apache.batik.ext.awt.image.spi.RegistryEntry) $r6;

        $z1 = r7 instanceof org.apache.batik.ext.awt.image.spi.URLRegistryEntry;

        if $z1 == 0 goto label10;

        if r1 == null goto label20;

        if z5 != 0 goto label09;

        goto label20;

     label09:
        r24 = (org.apache.batik.ext.awt.image.spi.URLRegistryEntry) r7;

        $z7 = interfaceinvoke r24.<org.apache.batik.ext.awt.image.spi.URLRegistryEntry: boolean isCompatibleURL(org.apache.batik.util.ParsedURL)>(r1);

        if $z7 == 0 goto label20;

        $r15 = interfaceinvoke r24.<org.apache.batik.ext.awt.image.spi.URLRegistryEntry: org.apache.batik.ext.awt.image.renderable.Filter handleURL(org.apache.batik.util.ParsedURL,boolean)>(r1, z0);

        r22 = $r15;

        if $r15 == null goto label20;

        goto label21;

     label10:
        $z2 = r7 instanceof org.apache.batik.ext.awt.image.spi.StreamRegistryEntry;

        if $z2 == 0 goto label20;

        r25 = (org.apache.batik.ext.awt.image.spi.StreamRegistryEntry) r7;

        if z16 == 0 goto label11;

        goto label20;

     label11:
        if r21 != null goto label16;

        if r1 == null goto label21;

        if z5 != 0 goto label12;

        goto label21;

     label12:
        $r12 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

        $r13 = virtualinvoke r1.<org.apache.batik.util.ParsedURL: java.io.InputStream openStream(java.util.Iterator)>($r12);

        r21 = $r13;

     label13:
        goto label15;

     label14:
        $r20 := @caughtexception;

        z10 = 1;

        z16 = 1;

        z15 = 1;

        goto label20;

     label15:
        $z6 = virtualinvoke $r13.<java.io.InputStream: boolean markSupported()>();

        if $z6 != 0 goto label16;

        $r14 = new java.io.BufferedInputStream;

        specialinvoke $r14.<java.io.BufferedInputStream: void <init>(java.io.InputStream)>($r13);

        r21 = $r14;

     label16:
        $z11 = interfaceinvoke r25.<org.apache.batik.ext.awt.image.spi.StreamRegistryEntry: boolean isCompatibleStream(java.io.InputStream)>(r21);

        if $z11 == 0 goto label17;

        $r8 = interfaceinvoke r25.<org.apache.batik.ext.awt.image.spi.StreamRegistryEntry: org.apache.batik.ext.awt.image.renderable.Filter handleStream(java.io.InputStream,org.apache.batik.util.ParsedURL,boolean)>(r21, r1, z0);

        r22 = $r8;

        if $r8 == null goto label17;

        goto label21;

     label17:
        goto label19;

     label18:
        $r19 := @caughtexception;

        r21 = null;

     label19:
        goto label20;

     label20:
        $z12 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z12 != 0 goto label08;

     label21:
        if r23 == null goto label22;

        virtualinvoke r23.<org.apache.batik.ext.awt.image.URLImageCache: void put(org.apache.batik.util.ParsedURL,org.apache.batik.ext.awt.image.renderable.Filter)>(r1, r22);

     label22:
        if r22 != null goto label25;

        if z4 != 0 goto label23;

        return null;

     label23:
        if z15 == 0 goto label24;

        $r11 = staticinvoke <org.apache.batik.ext.awt.image.spi.ImageTagRegistry: org.apache.batik.ext.awt.image.renderable.Filter getBrokenLinkImage(java.lang.Object,java.lang.String,java.lang.Object[])>(r2, "url.unreachable", null);

        return $r11;

     label24:
        $r10 = staticinvoke <org.apache.batik.ext.awt.image.spi.ImageTagRegistry: org.apache.batik.ext.awt.image.renderable.Filter getBrokenLinkImage(java.lang.Object,java.lang.String,java.lang.Object[])>(r2, "url.uninterpretable", null);

        return $r10;

     label25:
        $z3 = staticinvoke <org.apache.batik.ext.awt.image.spi.BrokenLinkProvider: boolean hasBrokenLinkProperty(org.apache.batik.ext.awt.image.renderable.Filter)>(r22);

        if $z3 == 0 goto label28;

        if z4 == 0 goto label26;

        $r26 = r22;

        goto label27;

     label26:
        $r26 = null;

     label27:
        return $r26;

     label28:
        if r0 == null goto label29;

        $r9 = new org.apache.batik.ext.awt.image.renderable.ProfileRable;

        specialinvoke $r9.<org.apache.batik.ext.awt.image.renderable.ProfileRable: void <init>(org.apache.batik.ext.awt.image.renderable.Filter,org.apache.batik.ext.awt.color.ICCColorSpaceExt)>(r22, r0);

        r22 = $r9;

     label29:
        return r22;

        catch java.io.IOException from label12 to label13 with label14;
        catch java.io.StreamCorruptedException from label11 to label17 with label18;
    }

    public org.apache.batik.ext.awt.image.renderable.Filter readStream(java.io.InputStream)
    {
        org.apache.batik.ext.awt.image.spi.ImageTagRegistry r0;
        org.apache.batik.ext.awt.image.renderable.Filter $r2;
        java.io.InputStream r1;

        r0 := @this: org.apache.batik.ext.awt.image.spi.ImageTagRegistry;

        r1 := @parameter0: java.io.InputStream;

        $r2 = virtualinvoke r0.<org.apache.batik.ext.awt.image.spi.ImageTagRegistry: org.apache.batik.ext.awt.image.renderable.Filter readStream(java.io.InputStream,org.apache.batik.ext.awt.color.ICCColorSpaceExt)>(r1, null);

        return $r2;
    }

    public org.apache.batik.ext.awt.image.renderable.Filter readStream(java.io.InputStream, org.apache.batik.ext.awt.color.ICCColorSpaceExt)
    {
        java.io.BufferedInputStream $r10;
        org.apache.batik.ext.awt.image.spi.StreamRegistryEntry r6;
        org.apache.batik.ext.awt.image.renderable.ProfileRable $r8;
        org.apache.batik.ext.awt.color.ICCColorSpaceExt r0;
        boolean $z0, z1, $z2, $z3, $z4, $z5, $z6;
        org.apache.batik.ext.awt.image.spi.RegistryEntry r5;
        java.io.StreamCorruptedException $r11;
        java.util.Iterator $r3;
        org.apache.batik.ext.awt.image.spi.ImageTagRegistry r1;
        org.apache.batik.ext.awt.image.renderable.Filter $r7, $r9, r13;
        java.util.List $r2;
        java.lang.Object $r4;
        java.io.InputStream r12;

        r1 := @this: org.apache.batik.ext.awt.image.spi.ImageTagRegistry;

        r12 := @parameter0: java.io.InputStream;

        r0 := @parameter1: org.apache.batik.ext.awt.color.ICCColorSpaceExt;

        $z0 = virtualinvoke r12.<java.io.InputStream: boolean markSupported()>();

        if $z0 != 0 goto label01;

        $r10 = new java.io.BufferedInputStream;

        specialinvoke $r10.<java.io.BufferedInputStream: void <init>(java.io.InputStream)>(r12);

        r12 = $r10;

     label01:
        if r0 == null goto label02;

        $z5 = 1;

        goto label03;

     label02:
        $z5 = 0;

     label03:
        z1 = $z5;

        r13 = null;

        $r2 = r1.<org.apache.batik.ext.awt.image.spi.ImageTagRegistry: java.util.List entries>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

        goto label09;

     label04:
        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.apache.batik.ext.awt.image.spi.RegistryEntry) $r4;

        $z2 = r5 instanceof org.apache.batik.ext.awt.image.spi.StreamRegistryEntry;

        if $z2 != 0 goto label05;

        goto label09;

     label05:
        r6 = (org.apache.batik.ext.awt.image.spi.StreamRegistryEntry) r5;

     label06:
        $z3 = interfaceinvoke r6.<org.apache.batik.ext.awt.image.spi.StreamRegistryEntry: boolean isCompatibleStream(java.io.InputStream)>(r12);

        if $z3 == 0 goto label07;

        $r7 = interfaceinvoke r6.<org.apache.batik.ext.awt.image.spi.StreamRegistryEntry: org.apache.batik.ext.awt.image.renderable.Filter handleStream(java.io.InputStream,org.apache.batik.util.ParsedURL,boolean)>(r12, null, z1);

        r13 = $r7;

        if $r7 == null goto label07;

        goto label10;

     label07:
        goto label09;

     label08:
        $r11 := @caughtexception;

        goto label10;

     label09:
        $z6 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z6 != 0 goto label04;

     label10:
        if r13 != null goto label11;

        $r9 = staticinvoke <org.apache.batik.ext.awt.image.spi.ImageTagRegistry: org.apache.batik.ext.awt.image.renderable.Filter getBrokenLinkImage(java.lang.Object,java.lang.String,java.lang.Object[])>(r1, "stream.unreadable", null);

        return $r9;

     label11:
        if r0 == null goto label12;

        $z4 = staticinvoke <org.apache.batik.ext.awt.image.spi.BrokenLinkProvider: boolean hasBrokenLinkProperty(org.apache.batik.ext.awt.image.renderable.Filter)>(r13);

        if $z4 != 0 goto label12;

        $r8 = new org.apache.batik.ext.awt.image.renderable.ProfileRable;

        specialinvoke $r8.<org.apache.batik.ext.awt.image.renderable.ProfileRable: void <init>(org.apache.batik.ext.awt.image.renderable.Filter,org.apache.batik.ext.awt.color.ICCColorSpaceExt)>(r13, r0);

        r13 = $r8;

     label12:
        return r13;

        catch java.io.StreamCorruptedException from label06 to label07 with label08;
    }

    public synchronized void register(org.apache.batik.ext.awt.image.spi.RegistryEntry)
    {
        org.apache.batik.ext.awt.image.spi.RegistryEntry r0, r5;
        java.util.ListIterator $r3;
        org.apache.batik.ext.awt.image.spi.ImageTagRegistry r1;
        java.util.List $r2;
        byte $b0;
        int $i1;
        float $f0, $f1;
        java.lang.Object $r4;
        boolean $z0;

        r1 := @this: org.apache.batik.ext.awt.image.spi.ImageTagRegistry;

        r0 := @parameter0: org.apache.batik.ext.awt.image.spi.RegistryEntry;

        $f0 = interfaceinvoke r0.<org.apache.batik.ext.awt.image.spi.RegistryEntry: float getPriority()>();

        $r2 = r1.<org.apache.batik.ext.awt.image.spi.ImageTagRegistry: java.util.List entries>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.ListIterator listIterator()>();

        goto label2;

     label1:
        $r4 = interfaceinvoke $r3.<java.util.ListIterator: java.lang.Object next()>();

        r5 = (org.apache.batik.ext.awt.image.spi.RegistryEntry) $r4;

        $f1 = interfaceinvoke r5.<org.apache.batik.ext.awt.image.spi.RegistryEntry: float getPriority()>();

        $b0 = $f1 cmpl $f0;

        $i1 = (int) $b0;

        if $i1 <= 0 goto label2;

        interfaceinvoke $r3.<java.util.ListIterator: java.lang.Object previous()>();

        interfaceinvoke $r3.<java.util.ListIterator: void add(java.lang.Object)>(r0);

        return;

     label2:
        $z0 = interfaceinvoke $r3.<java.util.ListIterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        interfaceinvoke $r3.<java.util.ListIterator: void add(java.lang.Object)>(r0);

        r1.<org.apache.batik.ext.awt.image.spi.ImageTagRegistry: java.util.List extensions> = null;

        r1.<org.apache.batik.ext.awt.image.spi.ImageTagRegistry: java.util.List mimeTypes> = null;

        return;
    }

    public synchronized java.util.List getRegisteredExtensions()
    {
        org.apache.batik.ext.awt.image.spi.RegistryEntry r6;
        java.util.Iterator $r4;
        org.apache.batik.ext.awt.image.spi.ImageTagRegistry r0;
        java.util.List $r1, $r3, $r7, $r8, $r9, $r10, $r11, $r12;
        java.lang.Object $r5;
        java.util.LinkedList $r2;
        boolean $z0;

        r0 := @this: org.apache.batik.ext.awt.image.spi.ImageTagRegistry;

        $r1 = r0.<org.apache.batik.ext.awt.image.spi.ImageTagRegistry: java.util.List extensions>;

        if $r1 == null goto label1;

        $r12 = r0.<org.apache.batik.ext.awt.image.spi.ImageTagRegistry: java.util.List extensions>;

        return $r12;

     label1:
        $r2 = new java.util.LinkedList;

        specialinvoke $r2.<java.util.LinkedList: void <init>()>();

        r0.<org.apache.batik.ext.awt.image.spi.ImageTagRegistry: java.util.List extensions> = $r2;

        $r3 = r0.<org.apache.batik.ext.awt.image.spi.ImageTagRegistry: java.util.List entries>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

        goto label3;

     label2:
        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (org.apache.batik.ext.awt.image.spi.RegistryEntry) $r5;

        $r7 = r0.<org.apache.batik.ext.awt.image.spi.ImageTagRegistry: java.util.List extensions>;

        $r8 = interfaceinvoke r6.<org.apache.batik.ext.awt.image.spi.RegistryEntry: java.util.List getStandardExtensions()>();

        interfaceinvoke $r7.<java.util.List: boolean addAll(java.util.Collection)>($r8);

     label3:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label2;

        $r9 = r0.<org.apache.batik.ext.awt.image.spi.ImageTagRegistry: java.util.List extensions>;

        $r10 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r9);

        r0.<org.apache.batik.ext.awt.image.spi.ImageTagRegistry: java.util.List extensions> = $r10;

        $r11 = r0.<org.apache.batik.ext.awt.image.spi.ImageTagRegistry: java.util.List extensions>;

        return $r11;
    }

    public synchronized java.util.List getRegisteredMimeTypes()
    {
        org.apache.batik.ext.awt.image.spi.RegistryEntry r6;
        java.util.Iterator $r4;
        org.apache.batik.ext.awt.image.spi.ImageTagRegistry r0;
        java.util.List $r1, $r3, $r7, $r8, $r9, $r10, $r11, $r12;
        java.lang.Object $r5;
        java.util.LinkedList $r2;
        boolean $z0;

        r0 := @this: org.apache.batik.ext.awt.image.spi.ImageTagRegistry;

        $r1 = r0.<org.apache.batik.ext.awt.image.spi.ImageTagRegistry: java.util.List mimeTypes>;

        if $r1 == null goto label1;

        $r12 = r0.<org.apache.batik.ext.awt.image.spi.ImageTagRegistry: java.util.List mimeTypes>;

        return $r12;

     label1:
        $r2 = new java.util.LinkedList;

        specialinvoke $r2.<java.util.LinkedList: void <init>()>();

        r0.<org.apache.batik.ext.awt.image.spi.ImageTagRegistry: java.util.List mimeTypes> = $r2;

        $r3 = r0.<org.apache.batik.ext.awt.image.spi.ImageTagRegistry: java.util.List entries>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

        goto label3;

     label2:
        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (org.apache.batik.ext.awt.image.spi.RegistryEntry) $r5;

        $r7 = r0.<org.apache.batik.ext.awt.image.spi.ImageTagRegistry: java.util.List mimeTypes>;

        $r8 = interfaceinvoke r6.<org.apache.batik.ext.awt.image.spi.RegistryEntry: java.util.List getMimeTypes()>();

        interfaceinvoke $r7.<java.util.List: boolean addAll(java.util.Collection)>($r8);

     label3:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label2;

        $r9 = r0.<org.apache.batik.ext.awt.image.spi.ImageTagRegistry: java.util.List mimeTypes>;

        $r10 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r9);

        r0.<org.apache.batik.ext.awt.image.spi.ImageTagRegistry: java.util.List mimeTypes> = $r10;

        $r11 = r0.<org.apache.batik.ext.awt.image.spi.ImageTagRegistry: java.util.List mimeTypes>;

        return $r11;
    }

    public static synchronized org.apache.batik.ext.awt.image.spi.ImageTagRegistry getRegistry()
    {
        org.apache.batik.ext.awt.image.spi.JDKRegistryEntry $r2;
        org.apache.batik.ext.awt.image.spi.RegistryEntry r7;
        java.util.Iterator $r5;
        org.apache.batik.ext.awt.image.spi.ImageTagRegistry $r0, $r1, $r3, $r8, $r9, $r10;
        java.lang.Class $r4, $r11;
        java.lang.Object $r6;
        boolean $z0;

        $r0 = <org.apache.batik.ext.awt.image.spi.ImageTagRegistry: org.apache.batik.ext.awt.image.spi.ImageTagRegistry registry>;

        if $r0 == null goto label1;

        $r10 = <org.apache.batik.ext.awt.image.spi.ImageTagRegistry: org.apache.batik.ext.awt.image.spi.ImageTagRegistry registry>;

        return $r10;

     label1:
        $r1 = new org.apache.batik.ext.awt.image.spi.ImageTagRegistry;

        specialinvoke $r1.<org.apache.batik.ext.awt.image.spi.ImageTagRegistry: void <init>()>();

        <org.apache.batik.ext.awt.image.spi.ImageTagRegistry: org.apache.batik.ext.awt.image.spi.ImageTagRegistry registry> = $r1;

        $r3 = <org.apache.batik.ext.awt.image.spi.ImageTagRegistry: org.apache.batik.ext.awt.image.spi.ImageTagRegistry registry>;

        $r2 = new org.apache.batik.ext.awt.image.spi.JDKRegistryEntry;

        specialinvoke $r2.<org.apache.batik.ext.awt.image.spi.JDKRegistryEntry: void <init>()>();

        virtualinvoke $r3.<org.apache.batik.ext.awt.image.spi.ImageTagRegistry: void register(org.apache.batik.ext.awt.image.spi.RegistryEntry)>($r2);

        $r4 = <org.apache.batik.ext.awt.image.spi.ImageTagRegistry: java.lang.Class class$org$apache$batik$ext$awt$image$spi$RegistryEntry>;

        if $r4 != null goto label2;

        $r11 = staticinvoke <org.apache.batik.ext.awt.image.spi.ImageTagRegistry: java.lang.Class class$(java.lang.String)>("org.apache.batik.ext.awt.image.spi.RegistryEntry");

        <org.apache.batik.ext.awt.image.spi.ImageTagRegistry: java.lang.Class class$org$apache$batik$ext$awt$image$spi$RegistryEntry> = $r11;

        goto label3;

     label2:
        $r11 = <org.apache.batik.ext.awt.image.spi.ImageTagRegistry: java.lang.Class class$org$apache$batik$ext$awt$image$spi$RegistryEntry>;

     label3:
        $r5 = staticinvoke <org.apache.batik.util.Service: java.util.Iterator providers(java.lang.Class)>($r11);

        goto label5;

     label4:
        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (org.apache.batik.ext.awt.image.spi.RegistryEntry) $r6;

        $r8 = <org.apache.batik.ext.awt.image.spi.ImageTagRegistry: org.apache.batik.ext.awt.image.spi.ImageTagRegistry registry>;

        virtualinvoke $r8.<org.apache.batik.ext.awt.image.spi.ImageTagRegistry: void register(org.apache.batik.ext.awt.image.spi.RegistryEntry)>(r7);

     label5:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label4;

        $r9 = <org.apache.batik.ext.awt.image.spi.ImageTagRegistry: org.apache.batik.ext.awt.image.spi.ImageTagRegistry registry>;

        return $r9;
    }

    public static synchronized org.apache.batik.ext.awt.image.renderable.Filter getBrokenLinkImage(java.lang.Object, java.lang.String, java.lang.Object[])
    {
        java.lang.Object[] r3;
        java.lang.Object r1;
        java.lang.String r2;
        org.apache.batik.ext.awt.image.renderable.Filter r6;
        org.apache.batik.ext.awt.image.spi.BrokenLinkProvider $r0, $r4, $r5;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.Object[];

        r6 = null;

        $r0 = <org.apache.batik.ext.awt.image.spi.ImageTagRegistry: org.apache.batik.ext.awt.image.spi.BrokenLinkProvider brokenLinkProvider>;

        if $r0 == null goto label1;

        $r5 = <org.apache.batik.ext.awt.image.spi.ImageTagRegistry: org.apache.batik.ext.awt.image.spi.BrokenLinkProvider brokenLinkProvider>;

        r6 = virtualinvoke $r5.<org.apache.batik.ext.awt.image.spi.BrokenLinkProvider: org.apache.batik.ext.awt.image.renderable.Filter getBrokenLinkImage(java.lang.Object,java.lang.String,java.lang.Object[])>(r1, r2, r3);

     label1:
        if r6 != null goto label2;

        $r4 = <org.apache.batik.ext.awt.image.spi.ImageTagRegistry: org.apache.batik.ext.awt.image.spi.BrokenLinkProvider defaultProvider>;

        r6 = virtualinvoke $r4.<org.apache.batik.ext.awt.image.spi.BrokenLinkProvider: org.apache.batik.ext.awt.image.renderable.Filter getBrokenLinkImage(java.lang.Object,java.lang.String,java.lang.Object[])>(r1, r2, r3);

     label2:
        return r6;
    }

    public static synchronized void setBrokenLinkProvider(org.apache.batik.ext.awt.image.spi.BrokenLinkProvider)
    {
        org.apache.batik.ext.awt.image.spi.BrokenLinkProvider r0;

        r0 := @parameter0: org.apache.batik.ext.awt.image.spi.BrokenLinkProvider;

        <org.apache.batik.ext.awt.image.spi.ImageTagRegistry: org.apache.batik.ext.awt.image.spi.BrokenLinkProvider brokenLinkProvider> = r0;

        return;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0, $r4;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

        return $r1;

     label2:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        $r4 = virtualinvoke $r2.<java.lang.Throwable: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r4);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label2;
    }

    static void <clinit>()
    {
        org.apache.batik.ext.awt.image.spi.DefaultBrokenLinkProvider $r0;

        <org.apache.batik.ext.awt.image.spi.ImageTagRegistry: org.apache.batik.ext.awt.image.spi.ImageTagRegistry registry> = null;

        $r0 = new org.apache.batik.ext.awt.image.spi.DefaultBrokenLinkProvider;

        specialinvoke $r0.<org.apache.batik.ext.awt.image.spi.DefaultBrokenLinkProvider: void <init>()>();

        <org.apache.batik.ext.awt.image.spi.ImageTagRegistry: org.apache.batik.ext.awt.image.spi.BrokenLinkProvider defaultProvider> = $r0;

        <org.apache.batik.ext.awt.image.spi.ImageTagRegistry: org.apache.batik.ext.awt.image.spi.BrokenLinkProvider brokenLinkProvider> = null;

        return;
    }
}
