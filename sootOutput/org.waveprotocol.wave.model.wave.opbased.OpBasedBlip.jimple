public class org.waveprotocol.wave.model.wave.opbased.OpBasedBlip extends java.lang.Object implements org.waveprotocol.wave.model.wave.Blip
{
    private final org.waveprotocol.wave.model.wave.data.BlipData blip;
    private final org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet wavelet;
    private final org.waveprotocol.wave.model.operation.SilentOperationSink outputSink;

    public void <init>(org.waveprotocol.wave.model.wave.data.BlipData, org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet, org.waveprotocol.wave.model.operation.SilentOperationSink)
    {
        org.waveprotocol.wave.model.operation.SilentOperationSink r3;
        org.waveprotocol.wave.model.wave.data.BlipData r1;
        org.waveprotocol.wave.model.wave.opbased.OpBasedBlip r0;
        org.waveprotocol.wave.model.wave.data.DocumentOperationSink $r4;
        org.waveprotocol.wave.model.wave.opbased.OpBasedBlip$1 $r5;
        org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet r2;

        r0 := @this: org.waveprotocol.wave.model.wave.opbased.OpBasedBlip;

        r1 := @parameter0: org.waveprotocol.wave.model.wave.data.BlipData;

        r2 := @parameter1: org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet;

        r3 := @parameter2: org.waveprotocol.wave.model.operation.SilentOperationSink;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.waveprotocol.wave.model.wave.opbased.OpBasedBlip: org.waveprotocol.wave.model.wave.data.BlipData blip> = r1;

        r0.<org.waveprotocol.wave.model.wave.opbased.OpBasedBlip: org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet wavelet> = r2;

        r0.<org.waveprotocol.wave.model.wave.opbased.OpBasedBlip: org.waveprotocol.wave.model.operation.SilentOperationSink outputSink> = r3;

        $r4 = interfaceinvoke r1.<org.waveprotocol.wave.model.wave.data.BlipData: org.waveprotocol.wave.model.wave.data.DocumentOperationSink getContent()>();

        $r5 = new org.waveprotocol.wave.model.wave.opbased.OpBasedBlip$1;

        specialinvoke $r5.<org.waveprotocol.wave.model.wave.opbased.OpBasedBlip$1: void <init>(org.waveprotocol.wave.model.wave.opbased.OpBasedBlip)>(r0);

        interfaceinvoke $r4.<org.waveprotocol.wave.model.wave.data.DocumentOperationSink: void init(org.waveprotocol.wave.model.operation.SilentOperationSink)>($r5);

        return;
    }

    private void consume(org.waveprotocol.wave.model.document.operation.DocOp)
    {
        org.waveprotocol.wave.model.wave.data.BlipData $r5;
        org.waveprotocol.wave.model.document.operation.DocOp r4;
        org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet $r2;
        org.waveprotocol.wave.model.operation.wave.WaveletOperationContext $r3;
        org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation $r6;
        org.waveprotocol.wave.model.operation.SilentOperationSink $r7;
        org.waveprotocol.wave.model.wave.opbased.OpBasedBlip r1;
        org.waveprotocol.wave.model.operation.wave.BlipContentOperation $r0;
        java.lang.String $r8;

        r1 := @this: org.waveprotocol.wave.model.wave.opbased.OpBasedBlip;

        r4 := @parameter0: org.waveprotocol.wave.model.document.operation.DocOp;

        $r0 = new org.waveprotocol.wave.model.operation.wave.BlipContentOperation;

        $r2 = r1.<org.waveprotocol.wave.model.wave.opbased.OpBasedBlip: org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet wavelet>;

        $r3 = virtualinvoke $r2.<org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet: org.waveprotocol.wave.model.operation.wave.WaveletOperationContext createContext()>();

        specialinvoke $r0.<org.waveprotocol.wave.model.operation.wave.BlipContentOperation: void <init>(org.waveprotocol.wave.model.operation.wave.WaveletOperationContext,org.waveprotocol.wave.model.document.operation.DocOp)>($r3, r4);

        $r5 = r1.<org.waveprotocol.wave.model.wave.opbased.OpBasedBlip: org.waveprotocol.wave.model.wave.data.BlipData blip>;

        virtualinvoke $r0.<org.waveprotocol.wave.model.operation.wave.BlipContentOperation: void update(org.waveprotocol.wave.model.wave.data.BlipData)>($r5);

        $r7 = r1.<org.waveprotocol.wave.model.wave.opbased.OpBasedBlip: org.waveprotocol.wave.model.operation.SilentOperationSink outputSink>;

        $r6 = new org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation;

        $r8 = virtualinvoke r1.<org.waveprotocol.wave.model.wave.opbased.OpBasedBlip: java.lang.String getId()>();

        specialinvoke $r6.<org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation: void <init>(java.lang.String,org.waveprotocol.wave.model.operation.wave.BlipOperation)>($r8, $r0);

        interfaceinvoke $r7.<org.waveprotocol.wave.model.operation.SilentOperationSink: void consume(org.waveprotocol.wave.model.operation.Operation)>($r6);

        return;
    }

    private void applyAndSend(org.waveprotocol.wave.model.operation.wave.BlipOperation)
    {
        org.waveprotocol.wave.model.wave.data.BlipData $r2, $r4;
        org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation $r3;
        org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet $r8;
        org.waveprotocol.wave.model.operation.SilentOperationSink $r5;
        org.waveprotocol.wave.model.operation.OperationException $r7;
        org.waveprotocol.wave.model.wave.opbased.OpBasedBlip r1;
        org.waveprotocol.wave.model.operation.wave.BlipOperation r0;
        java.lang.String $r6;

        r1 := @this: org.waveprotocol.wave.model.wave.opbased.OpBasedBlip;

        r0 := @parameter0: org.waveprotocol.wave.model.operation.wave.BlipOperation;

     label1:
        $r2 = r1.<org.waveprotocol.wave.model.wave.opbased.OpBasedBlip: org.waveprotocol.wave.model.wave.data.BlipData blip>;

        virtualinvoke r0.<org.waveprotocol.wave.model.operation.wave.BlipOperation: void apply(org.waveprotocol.wave.model.wave.data.BlipData)>($r2);

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

        $r8 = r1.<org.waveprotocol.wave.model.wave.opbased.OpBasedBlip: org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet wavelet>;

        virtualinvoke $r8.<org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet: void handleException(org.waveprotocol.wave.model.operation.OperationException)>($r7);

        return;

     label4:
        $r5 = r1.<org.waveprotocol.wave.model.wave.opbased.OpBasedBlip: org.waveprotocol.wave.model.operation.SilentOperationSink outputSink>;

        $r3 = new org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation;

        $r4 = r1.<org.waveprotocol.wave.model.wave.opbased.OpBasedBlip: org.waveprotocol.wave.model.wave.data.BlipData blip>;

        $r6 = interfaceinvoke $r4.<org.waveprotocol.wave.model.wave.data.BlipData: java.lang.String getId()>();

        specialinvoke $r3.<org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation: void <init>(java.lang.String,org.waveprotocol.wave.model.operation.wave.BlipOperation)>($r6, r0);

        interfaceinvoke $r5.<org.waveprotocol.wave.model.operation.SilentOperationSink: void consume(org.waveprotocol.wave.model.operation.Operation)>($r3);

        return;

        catch org.waveprotocol.wave.model.operation.OperationException from label1 to label2 with label3;
    }

    public void submit()
    {
        org.waveprotocol.wave.model.operation.wave.SubmitBlip $r1;
        org.waveprotocol.wave.model.wave.opbased.OpBasedBlip r0;
        org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet $r2;
        org.waveprotocol.wave.model.operation.wave.WaveletOperationContext $r3;

        r0 := @this: org.waveprotocol.wave.model.wave.opbased.OpBasedBlip;

        $r1 = new org.waveprotocol.wave.model.operation.wave.SubmitBlip;

        $r2 = r0.<org.waveprotocol.wave.model.wave.opbased.OpBasedBlip: org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet wavelet>;

        $r3 = virtualinvoke $r2.<org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet: org.waveprotocol.wave.model.operation.wave.WaveletOperationContext createContext()>();

        specialinvoke $r1.<org.waveprotocol.wave.model.operation.wave.SubmitBlip: void <init>(org.waveprotocol.wave.model.operation.wave.WaveletOperationContext)>($r3);

        specialinvoke r0.<org.waveprotocol.wave.model.wave.opbased.OpBasedBlip: void applyAndSend(org.waveprotocol.wave.model.operation.wave.BlipOperation)>($r1);

        return;
    }

    public org.waveprotocol.wave.model.document.Document getContent()
    {
        org.waveprotocol.wave.model.wave.data.BlipData $r1;
        org.waveprotocol.wave.model.wave.opbased.OpBasedBlip r0;
        org.waveprotocol.wave.model.wave.data.DocumentOperationSink $r2;
        org.waveprotocol.wave.model.document.Document $r3;

        r0 := @this: org.waveprotocol.wave.model.wave.opbased.OpBasedBlip;

        $r1 = r0.<org.waveprotocol.wave.model.wave.opbased.OpBasedBlip: org.waveprotocol.wave.model.wave.data.BlipData blip>;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.model.wave.data.BlipData: org.waveprotocol.wave.model.wave.data.DocumentOperationSink getContent()>();

        $r3 = interfaceinvoke $r2.<org.waveprotocol.wave.model.wave.data.DocumentOperationSink: org.waveprotocol.wave.model.document.Document getMutableDocument()>();

        return $r3;
    }

    public org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet getWavelet()
    {
        org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet $r1;
        org.waveprotocol.wave.model.wave.opbased.OpBasedBlip r0;

        r0 := @this: org.waveprotocol.wave.model.wave.opbased.OpBasedBlip;

        $r1 = r0.<org.waveprotocol.wave.model.wave.opbased.OpBasedBlip: org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet wavelet>;

        return $r1;
    }

    public org.waveprotocol.wave.model.wave.ParticipantId getAuthorId()
    {
        org.waveprotocol.wave.model.wave.data.BlipData $r1;
        org.waveprotocol.wave.model.wave.ParticipantId $r2;
        org.waveprotocol.wave.model.wave.opbased.OpBasedBlip r0;

        r0 := @this: org.waveprotocol.wave.model.wave.opbased.OpBasedBlip;

        $r1 = r0.<org.waveprotocol.wave.model.wave.opbased.OpBasedBlip: org.waveprotocol.wave.model.wave.data.BlipData blip>;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.model.wave.data.BlipData: org.waveprotocol.wave.model.wave.ParticipantId getAuthor()>();

        return $r2;
    }

    public java.util.Set getContributorIds()
    {
        org.waveprotocol.wave.model.wave.data.BlipData $r1;
        org.waveprotocol.wave.model.wave.opbased.OpBasedBlip r0;
        java.util.Set $r2, $r3;

        r0 := @this: org.waveprotocol.wave.model.wave.opbased.OpBasedBlip;

        $r1 = r0.<org.waveprotocol.wave.model.wave.opbased.OpBasedBlip: org.waveprotocol.wave.model.wave.data.BlipData blip>;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.model.wave.data.BlipData: java.util.Set getContributors()>();

        $r3 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>($r2);

        return $r3;
    }

    public java.lang.Long getLastModifiedTime()
    {
        org.waveprotocol.wave.model.wave.data.BlipData $r1;
        org.waveprotocol.wave.model.wave.opbased.OpBasedBlip r0;
        java.lang.Long $r2;
        long $l0;

        r0 := @this: org.waveprotocol.wave.model.wave.opbased.OpBasedBlip;

        $r1 = r0.<org.waveprotocol.wave.model.wave.opbased.OpBasedBlip: org.waveprotocol.wave.model.wave.data.BlipData blip>;

        $l0 = interfaceinvoke $r1.<org.waveprotocol.wave.model.wave.data.BlipData: long getLastModifiedTime()>();

        $r2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        return $r2;
    }

    public java.lang.Long getLastModifiedVersion()
    {
        org.waveprotocol.wave.model.wave.data.BlipData $r1;
        org.waveprotocol.wave.model.wave.opbased.OpBasedBlip r0;
        java.lang.Long $r2;
        long $l0;

        r0 := @this: org.waveprotocol.wave.model.wave.opbased.OpBasedBlip;

        $r1 = r0.<org.waveprotocol.wave.model.wave.opbased.OpBasedBlip: org.waveprotocol.wave.model.wave.data.BlipData blip>;

        $l0 = interfaceinvoke $r1.<org.waveprotocol.wave.model.wave.data.BlipData: long getLastModifiedVersion()>();

        $r2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        return $r2;
    }

    public java.lang.String getId()
    {
        org.waveprotocol.wave.model.wave.data.BlipData $r1;
        java.lang.String $r2;
        org.waveprotocol.wave.model.wave.opbased.OpBasedBlip r0;

        r0 := @this: org.waveprotocol.wave.model.wave.opbased.OpBasedBlip;

        $r1 = r0.<org.waveprotocol.wave.model.wave.opbased.OpBasedBlip: org.waveprotocol.wave.model.wave.data.BlipData blip>;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.model.wave.data.BlipData: java.lang.String getId()>();

        return $r2;
    }

    public int hashCode()
    {
        org.waveprotocol.wave.model.wave.data.BlipData $r1;
        org.waveprotocol.wave.model.wave.opbased.OpBasedBlip r0;
        int $i0, $i1;
        java.lang.String $r2;

        r0 := @this: org.waveprotocol.wave.model.wave.opbased.OpBasedBlip;

        $r1 = r0.<org.waveprotocol.wave.model.wave.opbased.OpBasedBlip: org.waveprotocol.wave.model.wave.data.BlipData blip>;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.model.wave.data.BlipData: java.lang.String getId()>();

        $i0 = virtualinvoke $r2.<java.lang.String: int hashCode()>();

        $i1 = 37 + $i0;

        return $i1;
    }

    public boolean equals(java.lang.Object)
    {
        org.waveprotocol.wave.model.wave.Blip $r3;
        org.waveprotocol.wave.model.wave.opbased.OpBasedBlip r0;
        java.lang.Object r1;
        java.lang.String $r2, $r4;
        boolean $z0, $z1;

        r0 := @this: org.waveprotocol.wave.model.wave.opbased.OpBasedBlip;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = r1 instanceof org.waveprotocol.wave.model.wave.Blip;

        if $z0 != 0 goto label2;

        return 0;

     label2:
        $r2 = virtualinvoke r0.<org.waveprotocol.wave.model.wave.opbased.OpBasedBlip: java.lang.String getId()>();

        $r3 = (org.waveprotocol.wave.model.wave.Blip) r1;

        $r4 = interfaceinvoke $r3.<org.waveprotocol.wave.model.wave.Blip: java.lang.String getId()>();

        $z1 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        return $z1;
    }

    public java.lang.String toString()
    {
        org.waveprotocol.wave.model.wave.data.BlipData $r3;
        org.waveprotocol.wave.model.wave.opbased.OpBasedBlip r2;
        java.lang.StringBuilder $r0, $r1, $r4, $r5;
        java.lang.String $r6;

        r2 := @this: org.waveprotocol.wave.model.wave.opbased.OpBasedBlip;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("OpBasedBlip { ");

        $r3 = r2.<org.waveprotocol.wave.model.wave.opbased.OpBasedBlip: org.waveprotocol.wave.model.wave.data.BlipData blip>;

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" }");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    public volatile org.waveprotocol.wave.model.wave.Wavelet getWavelet()
    {
        org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet $r1;
        org.waveprotocol.wave.model.wave.opbased.OpBasedBlip r0;

        r0 := @this: org.waveprotocol.wave.model.wave.opbased.OpBasedBlip;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.wave.opbased.OpBasedBlip: org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet getWavelet()>();

        return $r1;
    }

    static void access$000(org.waveprotocol.wave.model.wave.opbased.OpBasedBlip, org.waveprotocol.wave.model.document.operation.DocOp)
    {
        org.waveprotocol.wave.model.document.operation.DocOp r1;
        org.waveprotocol.wave.model.wave.opbased.OpBasedBlip r0;

        r0 := @parameter0: org.waveprotocol.wave.model.wave.opbased.OpBasedBlip;

        r1 := @parameter1: org.waveprotocol.wave.model.document.operation.DocOp;

        specialinvoke r0.<org.waveprotocol.wave.model.wave.opbased.OpBasedBlip: void consume(org.waveprotocol.wave.model.document.operation.DocOp)>(r1);

        return;
    }
}
