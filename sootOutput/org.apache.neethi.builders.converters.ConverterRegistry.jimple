public class org.apache.neethi.builders.converters.ConverterRegistry extends java.lang.Object
{
    private static final boolean HAS_AXIOM;
    private java.util.List registeredConverters;

    public void <init>()
    {
        org.apache.neethi.builders.converters.DOMToStaxConverter $r5;
        org.apache.neethi.builders.converters.StaxToStaxConverter $r3;
        org.apache.neethi.builders.converters.ConverterRegistry r0;
        org.apache.neethi.builders.converters.DOMToDOMConverter $r2;
        org.apache.neethi.builders.converters.StaxToDOMConverter $r4;
        java.util.concurrent.CopyOnWriteArrayList $r1;
        boolean $z0, $z1;

        r0 := @this: org.apache.neethi.builders.converters.ConverterRegistry;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.concurrent.CopyOnWriteArrayList;

        specialinvoke $r1.<java.util.concurrent.CopyOnWriteArrayList: void <init>()>();

        r0.<org.apache.neethi.builders.converters.ConverterRegistry: java.util.List registeredConverters> = $r1;

        $r2 = new org.apache.neethi.builders.converters.DOMToDOMConverter;

        specialinvoke $r2.<org.apache.neethi.builders.converters.DOMToDOMConverter: void <init>()>();

        virtualinvoke r0.<org.apache.neethi.builders.converters.ConverterRegistry: void registerConverter(org.apache.neethi.builders.converters.Converter)>($r2);

        $r3 = new org.apache.neethi.builders.converters.StaxToStaxConverter;

        specialinvoke $r3.<org.apache.neethi.builders.converters.StaxToStaxConverter: void <init>()>();

        virtualinvoke r0.<org.apache.neethi.builders.converters.ConverterRegistry: void registerConverter(org.apache.neethi.builders.converters.Converter)>($r3);

        $z0 = <org.apache.neethi.builders.converters.ConverterRegistry: boolean HAS_AXIOM>;

        if $z0 == 0 goto label1;

        specialinvoke r0.<org.apache.neethi.builders.converters.ConverterRegistry: void registerConverter(java.lang.String)>("org.apache.neethi.builders.converters.OMToOMConverter");

     label1:
        $r4 = new org.apache.neethi.builders.converters.StaxToDOMConverter;

        specialinvoke $r4.<org.apache.neethi.builders.converters.StaxToDOMConverter: void <init>()>();

        virtualinvoke r0.<org.apache.neethi.builders.converters.ConverterRegistry: void registerConverter(org.apache.neethi.builders.converters.Converter)>($r4);

        $r5 = new org.apache.neethi.builders.converters.DOMToStaxConverter;

        specialinvoke $r5.<org.apache.neethi.builders.converters.DOMToStaxConverter: void <init>()>();

        virtualinvoke r0.<org.apache.neethi.builders.converters.ConverterRegistry: void registerConverter(org.apache.neethi.builders.converters.Converter)>($r5);

        $z1 = <org.apache.neethi.builders.converters.ConverterRegistry: boolean HAS_AXIOM>;

        if $z1 == 0 goto label2;

        specialinvoke r0.<org.apache.neethi.builders.converters.ConverterRegistry: void registerConverter(java.lang.String)>("org.apache.neethi.builders.converters.DOMToOMConverter");

        specialinvoke r0.<org.apache.neethi.builders.converters.ConverterRegistry: void registerConverter(java.lang.String)>("org.apache.neethi.builders.converters.OMToDOMConverter");

        specialinvoke r0.<org.apache.neethi.builders.converters.ConverterRegistry: void registerConverter(java.lang.String)>("org.apache.neethi.builders.converters.StaxToOMConverter");

        specialinvoke r0.<org.apache.neethi.builders.converters.ConverterRegistry: void registerConverter(java.lang.String)>("org.apache.neethi.builders.converters.OMToStaxConverter");

     label2:
        return;
    }

    private void registerConverter(java.lang.String)
    {
        java.lang.Throwable $r6;
        org.apache.neethi.builders.converters.Converter r7;
        org.apache.neethi.builders.converters.ConverterRegistry r5;
        java.lang.Class $r1, $r3;
        java.lang.Object $r4;
        java.lang.String r0;
        java.lang.ClassLoader $r2;

        r5 := @this: org.apache.neethi.builders.converters.ConverterRegistry;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = class "Lorg/apache/neethi/builders/converters/Converter;";

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r3 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>(r0, 1, $r2);

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.Object newInstance()>();

        r7 = (org.apache.neethi.builders.converters.Converter) $r4;

        virtualinvoke r5.<org.apache.neethi.builders.converters.ConverterRegistry: void registerConverter(org.apache.neethi.builders.converters.Converter)>(r7);

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

     label4:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    private static org.apache.neethi.builders.converters.ConverterRegistry$ConverterKey createConverterKey(org.apache.neethi.builders.converters.Converter, java.lang.Class)
    {
        org.apache.neethi.builders.converters.ConverterRegistry$ConverterKey $r5, $r10;
        org.apache.neethi.builders.converters.Converter r3;
        int $i0, i1;
        java.lang.Class[] $r1;
        java.lang.reflect.ParameterizedType r9;
        java.lang.reflect.Type $r8, $r12, $r15;
        java.lang.reflect.Type[] $r7, $r11, $r14;
        java.lang.Class r0, $r2, $r4, $r6, $r13, $r16;

        r3 := @parameter0: org.apache.neethi.builders.converters.Converter;

        r0 := @parameter1: java.lang.Class;

        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.Class[] getInterfaces()>();

        i1 = 0;

     label1:
        $i0 = lengthof $r1;

        if i1 >= $i0 goto label3;

        $r6 = $r1[i1];

        if $r6 != class "Lorg/apache/neethi/builders/converters/Converter;" goto label2;

        $r7 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Type[] getGenericInterfaces()>();

        $r8 = $r7[i1];

        r9 = (java.lang.reflect.ParameterizedType) $r8;

        $r10 = new org.apache.neethi.builders.converters.ConverterRegistry$ConverterKey;

        specialinvoke $r10.<org.apache.neethi.builders.converters.ConverterRegistry$ConverterKey: void <init>(org.apache.neethi.builders.converters.ConverterRegistry$1)>(null);

        $r11 = interfaceinvoke r9.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();

        $r12 = $r11[0];

        $r13 = (java.lang.Class) $r12;

        $r10.<org.apache.neethi.builders.converters.ConverterRegistry$ConverterKey: java.lang.Class src> = $r13;

        $r14 = interfaceinvoke r9.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();

        $r15 = $r14[1];

        $r16 = (java.lang.Class) $r15;

        $r10.<org.apache.neethi.builders.converters.ConverterRegistry$ConverterKey: java.lang.Class target> = $r16;

        $r10.<org.apache.neethi.builders.converters.ConverterRegistry$ConverterKey: org.apache.neethi.builders.converters.Converter converter> = r3;

        return $r10;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        $r2 = virtualinvoke r0.<java.lang.Class: java.lang.Class getSuperclass()>();

        if $r2 == null goto label4;

        $r4 = virtualinvoke r0.<java.lang.Class: java.lang.Class getSuperclass()>();

        $r5 = staticinvoke <org.apache.neethi.builders.converters.ConverterRegistry: org.apache.neethi.builders.converters.ConverterRegistry$ConverterKey createConverterKey(org.apache.neethi.builders.converters.Converter,java.lang.Class)>(r3, $r4);

        return $r5;

     label4:
        return null;
    }

    public final void registerConverter(org.apache.neethi.builders.converters.Converter)
    {
        java.util.List $r4;
        org.apache.neethi.builders.converters.ConverterRegistry$ConverterKey $r2;
        org.apache.neethi.builders.converters.ConverterRegistry r3;
        org.apache.neethi.builders.converters.Converter r0;
        java.lang.Class $r1;

        r3 := @this: org.apache.neethi.builders.converters.ConverterRegistry;

        r0 := @parameter0: org.apache.neethi.builders.converters.Converter;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = staticinvoke <org.apache.neethi.builders.converters.ConverterRegistry: org.apache.neethi.builders.converters.ConverterRegistry$ConverterKey createConverterKey(org.apache.neethi.builders.converters.Converter,java.lang.Class)>(r0, $r1);

        $r4 = r3.<org.apache.neethi.builders.converters.ConverterRegistry: java.util.List registeredConverters>;

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r2);

        return;
    }

    public javax.xml.namespace.QName findQName(java.lang.Object)
    {
        java.lang.Object[] $r8;
        org.apache.neethi.builders.converters.ConverterRegistry$ConverterKey $r2;
        java.lang.Class[] $r5;
        org.apache.neethi.builders.converters.Converter $r3, $r9;
        java.lang.Exception $r12;
        org.apache.neethi.builders.converters.ConverterRegistry r0;
        java.lang.Object r1, $r10;
        java.lang.Class $r4, $r6;
        javax.xml.namespace.QName $r11;
        java.lang.reflect.Method $r7;

        r0 := @this: org.apache.neethi.builders.converters.ConverterRegistry;

        r1 := @parameter0: java.lang.Object;

        $r2 = specialinvoke r0.<org.apache.neethi.builders.converters.ConverterRegistry: org.apache.neethi.builders.converters.ConverterRegistry$ConverterKey findCompatibleConverter(java.lang.Object)>(r1);

     label1:
        $r3 = $r2.<org.apache.neethi.builders.converters.ConverterRegistry$ConverterKey: org.apache.neethi.builders.converters.Converter converter>;

        $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.Class getClass()>();

        $r5 = newarray (java.lang.Class)[1];

        $r6 = $r2.<org.apache.neethi.builders.converters.ConverterRegistry$ConverterKey: java.lang.Class src>;

        $r5[0] = $r6;

        $r7 = virtualinvoke $r4.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("getQName", $r5);

        $r9 = $r2.<org.apache.neethi.builders.converters.ConverterRegistry$ConverterKey: org.apache.neethi.builders.converters.Converter converter>;

        $r8 = newarray (java.lang.Object)[1];

        $r8[0] = r1;

        $r10 = virtualinvoke $r7.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r9, $r8);

        $r11 = (javax.xml.namespace.QName) $r10;

     label2:
        return $r11;

     label3:
        $r12 := @caughtexception;

        virtualinvoke $r12.<java.lang.Exception: void printStackTrace()>();

        return null;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public java.util.Map getAttributes(java.lang.Object)
    {
        java.lang.Object[] $r8;
        org.apache.neethi.builders.converters.ConverterRegistry$ConverterKey $r2;
        java.lang.Class[] $r5;
        org.apache.neethi.builders.converters.Converter $r3, $r9;
        java.lang.Exception $r12;
        java.util.Map $r11;
        org.apache.neethi.builders.converters.ConverterRegistry r0;
        java.lang.Object r1, $r10;
        java.lang.Class $r4, $r6;
        java.lang.reflect.Method $r7;

        r0 := @this: org.apache.neethi.builders.converters.ConverterRegistry;

        r1 := @parameter0: java.lang.Object;

        $r2 = specialinvoke r0.<org.apache.neethi.builders.converters.ConverterRegistry: org.apache.neethi.builders.converters.ConverterRegistry$ConverterKey findCompatibleConverter(java.lang.Object)>(r1);

     label1:
        $r3 = $r2.<org.apache.neethi.builders.converters.ConverterRegistry$ConverterKey: org.apache.neethi.builders.converters.Converter converter>;

        $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.Class getClass()>();

        $r5 = newarray (java.lang.Class)[1];

        $r6 = $r2.<org.apache.neethi.builders.converters.ConverterRegistry$ConverterKey: java.lang.Class src>;

        $r5[0] = $r6;

        $r7 = virtualinvoke $r4.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("getAttributes", $r5);

        $r9 = $r2.<org.apache.neethi.builders.converters.ConverterRegistry$ConverterKey: org.apache.neethi.builders.converters.Converter converter>;

        $r8 = newarray (java.lang.Object)[1];

        $r8[0] = r1;

        $r10 = virtualinvoke $r7.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r9, $r8);

        $r11 = (java.util.Map) $r10;

     label2:
        return $r11;

     label3:
        $r12 := @caughtexception;

        virtualinvoke $r12.<java.lang.Exception: void printStackTrace()>();

        return null;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public java.util.Iterator getChildElements(java.lang.Object)
    {
        java.lang.Object[] $r8;
        java.util.Iterator $r11;
        org.apache.neethi.builders.converters.ConverterRegistry$ConverterKey $r2;
        java.lang.Class[] $r5;
        org.apache.neethi.builders.converters.Converter $r3, $r9;
        java.lang.Exception $r12;
        org.apache.neethi.builders.converters.ConverterRegistry r0;
        java.lang.Object r1, $r10;
        java.lang.Class $r4, $r6;
        java.lang.reflect.Method $r7;

        r0 := @this: org.apache.neethi.builders.converters.ConverterRegistry;

        r1 := @parameter0: java.lang.Object;

        $r2 = specialinvoke r0.<org.apache.neethi.builders.converters.ConverterRegistry: org.apache.neethi.builders.converters.ConverterRegistry$ConverterKey findCompatibleConverter(java.lang.Object)>(r1);

     label1:
        $r3 = $r2.<org.apache.neethi.builders.converters.ConverterRegistry$ConverterKey: org.apache.neethi.builders.converters.Converter converter>;

        $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.Class getClass()>();

        $r5 = newarray (java.lang.Class)[1];

        $r6 = $r2.<org.apache.neethi.builders.converters.ConverterRegistry$ConverterKey: java.lang.Class src>;

        $r5[0] = $r6;

        $r7 = virtualinvoke $r4.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("getChildren", $r5);

        $r9 = $r2.<org.apache.neethi.builders.converters.ConverterRegistry$ConverterKey: org.apache.neethi.builders.converters.Converter converter>;

        $r8 = newarray (java.lang.Object)[1];

        $r8[0] = r1;

        $r10 = virtualinvoke $r7.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r9, $r8);

        $r11 = (java.util.Iterator) $r10;

     label2:
        return $r11;

     label3:
        $r12 := @caughtexception;

        virtualinvoke $r12.<java.lang.Exception: void printStackTrace()>();

        return null;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public java.lang.Object convert(java.lang.Object, java.lang.Class)
    {
        org.apache.neethi.builders.converters.ConverterRegistry$ConverterKey r14;
        org.apache.neethi.builders.converters.Converter r17;
        java.lang.String $r12;
        boolean $z0, $z1, $z2;
        java.util.Iterator $r2;
        java.lang.RuntimeException $r3;
        java.util.List $r1;
        org.apache.neethi.builders.converters.ConverterRegistry r0;
        java.lang.StringBuilder $r4, $r5, $r8, $r9, $r11;
        java.lang.Object r6, $r13, $r18;
        java.lang.Class $r7, r10, $r15, $r16;

        r0 := @this: org.apache.neethi.builders.converters.ConverterRegistry;

        r6 := @parameter0: java.lang.Object;

        r10 := @parameter1: java.lang.Class;

        $r1 = r0.<org.apache.neethi.builders.converters.ConverterRegistry: java.util.List registeredConverters>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r13 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r14 = (org.apache.neethi.builders.converters.ConverterRegistry$ConverterKey) $r13;

        $r15 = r14.<org.apache.neethi.builders.converters.ConverterRegistry$ConverterKey: java.lang.Class src>;

        $z1 = virtualinvoke $r15.<java.lang.Class: boolean isInstance(java.lang.Object)>(r6);

        if $z1 == 0 goto label2;

        $r16 = r14.<org.apache.neethi.builders.converters.ConverterRegistry$ConverterKey: java.lang.Class target>;

        $z2 = virtualinvoke $r16.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r10);

        if $z2 == 0 goto label2;

        r17 = r14.<org.apache.neethi.builders.converters.ConverterRegistry$ConverterKey: org.apache.neethi.builders.converters.Converter converter>;

        $r18 = interfaceinvoke r17.<org.apache.neethi.builders.converters.Converter: java.lang.Object convert(java.lang.Object)>(r6);

        return $r18;

     label2:
        goto label1;

     label3:
        $r3 = new java.lang.RuntimeException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not find a converter to convert from ");

        $r7 = virtualinvoke r6.<java.lang.Object: java.lang.Class getClass()>();

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to ");

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.String)>($r12);

        throw $r3;
    }

    private org.apache.neethi.builders.converters.ConverterRegistry$ConverterKey findCompatibleConverter(java.lang.Object)
    {
        java.util.Iterator $r2;
        org.apache.neethi.builders.converters.ConverterRegistry$ConverterKey r11;
        java.lang.RuntimeException $r3;
        java.util.List $r1;
        org.apache.neethi.builders.converters.ConverterRegistry r0;
        java.lang.StringBuilder $r4, $r5, $r8;
        java.lang.Object r6, $r10;
        java.lang.Class $r7, $r12;
        java.lang.String $r9;
        boolean $z0, $z1;

        r0 := @this: org.apache.neethi.builders.converters.ConverterRegistry;

        r6 := @parameter0: java.lang.Object;

        $r1 = r0.<org.apache.neethi.builders.converters.ConverterRegistry: java.util.List registeredConverters>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r10 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r11 = (org.apache.neethi.builders.converters.ConverterRegistry$ConverterKey) $r10;

        $r12 = r11.<org.apache.neethi.builders.converters.ConverterRegistry$ConverterKey: java.lang.Class src>;

        $z1 = virtualinvoke $r12.<java.lang.Class: boolean isInstance(java.lang.Object)>(r6);

        if $z1 == 0 goto label2;

        return r11;

     label2:
        goto label1;

     label3:
        $r3 = new java.lang.RuntimeException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not find a converter to handle ");

        $r7 = virtualinvoke r6.<java.lang.Object: java.lang.Class getClass()>();

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.String)>($r9);

        throw $r3;
    }

    static void <clinit>()
    {
        java.lang.Throwable $r2;
        java.lang.Class $r0;
        java.lang.ClassLoader $r1;
        boolean z0;

        z0 = 1;

     label1:
        $r0 = class "Lorg/apache/neethi/builders/converters/Converter;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>("org.apache.axiom.om.OMElement", 1, $r1);

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        z0 = 0;

     label4:
        <org.apache.neethi.builders.converters.ConverterRegistry: boolean HAS_AXIOM> = z0;

        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
}
