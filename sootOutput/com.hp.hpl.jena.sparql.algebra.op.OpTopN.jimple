public class com.hp.hpl.jena.sparql.algebra.op.OpTopN extends com.hp.hpl.jena.sparql.algebra.op.OpModifier
{
    private final java.util.List conditions;
    private final int limit;

    public void <init>(com.hp.hpl.jena.sparql.algebra.Op, int, java.util.List)
    {
        java.util.List r2;
        int i0;
        com.hp.hpl.jena.sparql.algebra.op.OpTopN r0;
        com.hp.hpl.jena.sparql.algebra.Op r1;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.op.OpTopN;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.Op;

        i0 := @parameter1: int;

        r2 := @parameter2: java.util.List;

        specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpModifier: void <init>(com.hp.hpl.jena.sparql.algebra.Op)>(r1);

        r0.<com.hp.hpl.jena.sparql.algebra.op.OpTopN: java.util.List conditions> = r2;

        r0.<com.hp.hpl.jena.sparql.algebra.op.OpTopN: int limit> = i0;

        return;
    }

    public java.util.List getConditions()
    {
        com.hp.hpl.jena.sparql.algebra.op.OpTopN r0;
        java.util.List $r1;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.op.OpTopN;

        $r1 = r0.<com.hp.hpl.jena.sparql.algebra.op.OpTopN: java.util.List conditions>;

        return $r1;
    }

    public int getLimit()
    {
        int $i0;
        com.hp.hpl.jena.sparql.algebra.op.OpTopN r0;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.op.OpTopN;

        $i0 = r0.<com.hp.hpl.jena.sparql.algebra.op.OpTopN: int limit>;

        return $i0;
    }

    public java.lang.String getName()
    {
        com.hp.hpl.jena.sparql.algebra.op.OpTopN r0;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.op.OpTopN;

        return "top";
    }

    public void visit(com.hp.hpl.jena.sparql.algebra.OpVisitor)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpTopN r1;
        com.hp.hpl.jena.sparql.algebra.OpVisitor r0;

        r1 := @this: com.hp.hpl.jena.sparql.algebra.op.OpTopN;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.OpVisitor;

        interfaceinvoke r0.<com.hp.hpl.jena.sparql.algebra.OpVisitor: void visit(com.hp.hpl.jena.sparql.algebra.op.OpTopN)>(r1);

        return;
    }

    public com.hp.hpl.jena.sparql.algebra.op.Op1 copy(com.hp.hpl.jena.sparql.algebra.Op)
    {
        java.util.List $r3;
        int $i0;
        com.hp.hpl.jena.sparql.algebra.op.OpTopN $r0, r2;
        com.hp.hpl.jena.sparql.algebra.Op r1;

        r2 := @this: com.hp.hpl.jena.sparql.algebra.op.OpTopN;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.Op;

        $r0 = new com.hp.hpl.jena.sparql.algebra.op.OpTopN;

        $i0 = r2.<com.hp.hpl.jena.sparql.algebra.op.OpTopN: int limit>;

        $r3 = r2.<com.hp.hpl.jena.sparql.algebra.op.OpTopN: java.util.List conditions>;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.algebra.op.OpTopN: void <init>(com.hp.hpl.jena.sparql.algebra.Op,int,java.util.List)>(r1, $i0, $r3);

        return $r0;
    }

    public com.hp.hpl.jena.sparql.algebra.Op apply(com.hp.hpl.jena.sparql.algebra.Transform, com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.algebra.Transform r0;
        com.hp.hpl.jena.sparql.algebra.op.OpTopN r1;
        com.hp.hpl.jena.sparql.algebra.Op r2, $r3;

        r1 := @this: com.hp.hpl.jena.sparql.algebra.op.OpTopN;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.Transform;

        r2 := @parameter1: com.hp.hpl.jena.sparql.algebra.Op;

        $r3 = interfaceinvoke r0.<com.hp.hpl.jena.sparql.algebra.Transform: com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpTopN,com.hp.hpl.jena.sparql.algebra.Op)>(r1, r2);

        return $r3;
    }

    public int hashCode()
    {
        java.util.List $r1;
        int $i0, $i1, $i2;
        com.hp.hpl.jena.sparql.algebra.op.OpTopN r0;
        com.hp.hpl.jena.sparql.algebra.Op $r2;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.op.OpTopN;

        $r1 = r0.<com.hp.hpl.jena.sparql.algebra.op.OpTopN: java.util.List conditions>;

        $i0 = interfaceinvoke $r1.<java.util.List: int hashCode()>();

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpTopN: com.hp.hpl.jena.sparql.algebra.Op getSubOp()>();

        $i1 = virtualinvoke $r2.<java.lang.Object: int hashCode()>();

        $i2 = $i0 ^ $i1;

        return $i2;
    }

    public boolean equalTo(com.hp.hpl.jena.sparql.algebra.Op, com.hp.hpl.jena.sparql.util.NodeIsomorphismMap)
    {
        com.hp.hpl.jena.sparql.util.NodeIsomorphismMap r5;
        com.hp.hpl.jena.sparql.algebra.op.OpTopN r1, r2;
        com.hp.hpl.jena.sparql.algebra.Op r0, $r3, $r4;
        boolean $z0, $z1;

        r2 := @this: com.hp.hpl.jena.sparql.algebra.op.OpTopN;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.Op;

        r5 := @parameter1: com.hp.hpl.jena.sparql.util.NodeIsomorphismMap;

        $z0 = r0 instanceof com.hp.hpl.jena.sparql.algebra.op.OpTopN;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        r1 = (com.hp.hpl.jena.sparql.algebra.op.OpTopN) r0;

        $r3 = virtualinvoke r2.<com.hp.hpl.jena.sparql.algebra.op.OpTopN: com.hp.hpl.jena.sparql.algebra.Op getSubOp()>();

        $r4 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpTopN: com.hp.hpl.jena.sparql.algebra.Op getSubOp()>();

        $z1 = interfaceinvoke $r3.<com.hp.hpl.jena.sparql.algebra.Op: boolean equalTo(com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.util.NodeIsomorphismMap)>($r4, r5);

        return $z1;
    }
}
