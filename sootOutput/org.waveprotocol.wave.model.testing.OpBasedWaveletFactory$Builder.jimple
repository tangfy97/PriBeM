public final class org.waveprotocol.wave.model.testing.OpBasedWaveletFactory$Builder extends java.lang.Object
{
    private final org.waveprotocol.wave.model.schema.SchemaProvider schemas;
    private org.waveprotocol.wave.model.wave.data.ObservableWaveletData$Factory holderFactory;
    private org.waveprotocol.wave.model.operation.SilentOperationSink sink;
    private org.waveprotocol.wave.model.wave.ParticipantId author;

    public void <init>(org.waveprotocol.wave.model.schema.SchemaProvider)
    {
        org.waveprotocol.wave.model.schema.SchemaProvider r1;
        org.waveprotocol.wave.model.testing.OpBasedWaveletFactory$Builder r0;

        r0 := @this: org.waveprotocol.wave.model.testing.OpBasedWaveletFactory$Builder;

        r1 := @parameter0: org.waveprotocol.wave.model.schema.SchemaProvider;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.waveprotocol.wave.model.testing.OpBasedWaveletFactory$Builder: org.waveprotocol.wave.model.schema.SchemaProvider schemas> = r1;

        return;
    }

    public org.waveprotocol.wave.model.testing.OpBasedWaveletFactory$Builder 'with'(org.waveprotocol.wave.model.operation.SilentOperationSink)
    {
        org.waveprotocol.wave.model.operation.SilentOperationSink r1;
        org.waveprotocol.wave.model.testing.OpBasedWaveletFactory$Builder r0;

        r0 := @this: org.waveprotocol.wave.model.testing.OpBasedWaveletFactory$Builder;

        r1 := @parameter0: org.waveprotocol.wave.model.operation.SilentOperationSink;

        r0.<org.waveprotocol.wave.model.testing.OpBasedWaveletFactory$Builder: org.waveprotocol.wave.model.operation.SilentOperationSink sink> = r1;

        return r0;
    }

    public org.waveprotocol.wave.model.testing.OpBasedWaveletFactory$Builder 'with'(org.waveprotocol.wave.model.wave.data.ObservableWaveletData$Factory)
    {
        org.waveprotocol.wave.model.wave.data.ObservableWaveletData$Factory r1;
        org.waveprotocol.wave.model.testing.OpBasedWaveletFactory$Builder r0;

        r0 := @this: org.waveprotocol.wave.model.testing.OpBasedWaveletFactory$Builder;

        r1 := @parameter0: org.waveprotocol.wave.model.wave.data.ObservableWaveletData$Factory;

        r0.<org.waveprotocol.wave.model.testing.OpBasedWaveletFactory$Builder: org.waveprotocol.wave.model.wave.data.ObservableWaveletData$Factory holderFactory> = r1;

        return r0;
    }

    public org.waveprotocol.wave.model.testing.OpBasedWaveletFactory$Builder 'with'(org.waveprotocol.wave.model.wave.ParticipantId)
    {
        org.waveprotocol.wave.model.wave.ParticipantId r1;
        org.waveprotocol.wave.model.testing.OpBasedWaveletFactory$Builder r0;

        r0 := @this: org.waveprotocol.wave.model.testing.OpBasedWaveletFactory$Builder;

        r1 := @parameter0: org.waveprotocol.wave.model.wave.ParticipantId;

        r0.<org.waveprotocol.wave.model.testing.OpBasedWaveletFactory$Builder: org.waveprotocol.wave.model.wave.ParticipantId author> = r1;

        return r0;
    }

    public org.waveprotocol.wave.model.testing.OpBasedWaveletFactory build()
    {
        org.waveprotocol.wave.model.testing.OpBasedWaveletFactory $r4;
        org.waveprotocol.wave.model.wave.data.impl.WaveletDataImpl$Factory $r12;
        org.waveprotocol.wave.model.wave.ParticipantId $r3, $r5, $r8;
        org.waveprotocol.wave.model.operation.SilentOperationSink $r2, $r6, $r9;
        org.waveprotocol.wave.model.schema.SchemaProvider $r10;
        org.waveprotocol.wave.model.wave.data.DocumentFactory $r11;
        org.waveprotocol.wave.model.wave.data.ObservableWaveletData$Factory $r1, $r7;
        org.waveprotocol.wave.model.testing.OpBasedWaveletFactory$Builder r0;

        r0 := @this: org.waveprotocol.wave.model.testing.OpBasedWaveletFactory$Builder;

        $r1 = r0.<org.waveprotocol.wave.model.testing.OpBasedWaveletFactory$Builder: org.waveprotocol.wave.model.wave.data.ObservableWaveletData$Factory holderFactory>;

        if $r1 != null goto label1;

        $r10 = r0.<org.waveprotocol.wave.model.testing.OpBasedWaveletFactory$Builder: org.waveprotocol.wave.model.schema.SchemaProvider schemas>;

        $r11 = staticinvoke <org.waveprotocol.wave.model.wave.data.impl.ObservablePluggableMutableDocument: org.waveprotocol.wave.model.wave.data.DocumentFactory createFactory(org.waveprotocol.wave.model.schema.SchemaProvider)>($r10);

        $r12 = staticinvoke <org.waveprotocol.wave.model.wave.data.impl.WaveletDataImpl$Factory: org.waveprotocol.wave.model.wave.data.impl.WaveletDataImpl$Factory create(org.waveprotocol.wave.model.wave.data.DocumentFactory)>($r11);

        r0.<org.waveprotocol.wave.model.testing.OpBasedWaveletFactory$Builder: org.waveprotocol.wave.model.wave.data.ObservableWaveletData$Factory holderFactory> = $r12;

     label1:
        $r2 = r0.<org.waveprotocol.wave.model.testing.OpBasedWaveletFactory$Builder: org.waveprotocol.wave.model.operation.SilentOperationSink sink>;

        if $r2 != null goto label2;

        $r9 = <org.waveprotocol.wave.model.operation.SilentOperationSink: org.waveprotocol.wave.model.operation.SilentOperationSink VOID>;

        r0.<org.waveprotocol.wave.model.testing.OpBasedWaveletFactory$Builder: org.waveprotocol.wave.model.operation.SilentOperationSink sink> = $r9;

     label2:
        $r3 = r0.<org.waveprotocol.wave.model.testing.OpBasedWaveletFactory$Builder: org.waveprotocol.wave.model.wave.ParticipantId author>;

        if $r3 != null goto label3;

        $r8 = staticinvoke <org.waveprotocol.wave.model.testing.OpBasedWaveletFactory: org.waveprotocol.wave.model.wave.ParticipantId access$000()>();

        r0.<org.waveprotocol.wave.model.testing.OpBasedWaveletFactory$Builder: org.waveprotocol.wave.model.wave.ParticipantId author> = $r8;

     label3:
        $r4 = new org.waveprotocol.wave.model.testing.OpBasedWaveletFactory;

        $r7 = r0.<org.waveprotocol.wave.model.testing.OpBasedWaveletFactory$Builder: org.waveprotocol.wave.model.wave.data.ObservableWaveletData$Factory holderFactory>;

        $r6 = r0.<org.waveprotocol.wave.model.testing.OpBasedWaveletFactory$Builder: org.waveprotocol.wave.model.operation.SilentOperationSink sink>;

        $r5 = r0.<org.waveprotocol.wave.model.testing.OpBasedWaveletFactory$Builder: org.waveprotocol.wave.model.wave.ParticipantId author>;

        specialinvoke $r4.<org.waveprotocol.wave.model.testing.OpBasedWaveletFactory: void <init>(org.waveprotocol.wave.model.wave.data.ObservableWaveletData$Factory,org.waveprotocol.wave.model.operation.SilentOperationSink,org.waveprotocol.wave.model.wave.ParticipantId,org.waveprotocol.wave.model.testing.OpBasedWaveletFactory$1)>($r7, $r6, $r5, null);

        return $r4;
    }
}
