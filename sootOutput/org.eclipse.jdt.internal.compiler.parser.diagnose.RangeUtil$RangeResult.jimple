class org.eclipse.jdt.internal.compiler.parser.diagnose.RangeUtil$RangeResult extends java.lang.Object
{
    private static final int INITIAL_SIZE;
    int pos;
    int[] intervalStarts;
    int[] intervalEnds;
    int[] intervalFlags;

    void <init>()
    {
        int[] $r1, $r2, $r3;
        org.eclipse.jdt.internal.compiler.parser.diagnose.RangeUtil$RangeResult r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.diagnose.RangeUtil$RangeResult;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.eclipse.jdt.internal.compiler.parser.diagnose.RangeUtil$RangeResult: int pos> = 0;

        $r1 = newarray (int)[10];

        r0.<org.eclipse.jdt.internal.compiler.parser.diagnose.RangeUtil$RangeResult: int[] intervalStarts> = $r1;

        $r2 = newarray (int)[10];

        r0.<org.eclipse.jdt.internal.compiler.parser.diagnose.RangeUtil$RangeResult: int[] intervalEnds> = $r2;

        $r3 = newarray (int)[10];

        r0.<org.eclipse.jdt.internal.compiler.parser.diagnose.RangeUtil$RangeResult: int[] intervalFlags> = $r3;

        return;
    }

    void addInterval(int, int)
    {
        int i0, i1;
        org.eclipse.jdt.internal.compiler.parser.diagnose.RangeUtil$RangeResult r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.diagnose.RangeUtil$RangeResult;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.diagnose.RangeUtil$RangeResult: void addInterval(int,int,int)>(i0, i1, 0);

        return;
    }

    void addInterval(int, int, int)
    {
        org.eclipse.jdt.internal.compiler.parser.diagnose.RangeUtil$RangeResult r0;
        int[] $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10;
        int $i0, $i1, i2, $i3, i4, $i5, i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.diagnose.RangeUtil$RangeResult;

        i2 := @parameter0: int;

        i4 := @parameter1: int;

        i6 := @parameter2: int;

        $i1 = r0.<org.eclipse.jdt.internal.compiler.parser.diagnose.RangeUtil$RangeResult: int pos>;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.diagnose.RangeUtil$RangeResult: int[] intervalStarts>;

        $i0 = lengthof $r1;

        if $i1 < $i0 goto label1;

        $r6 = r0.<org.eclipse.jdt.internal.compiler.parser.diagnose.RangeUtil$RangeResult: int[] intervalStarts>;

        $i10 = r0.<org.eclipse.jdt.internal.compiler.parser.diagnose.RangeUtil$RangeResult: int pos>;

        $i11 = $i10 * 2;

        $r5 = newarray (int)[$i11];

        r0.<org.eclipse.jdt.internal.compiler.parser.diagnose.RangeUtil$RangeResult: int[] intervalStarts> = $r5;

        $i12 = r0.<org.eclipse.jdt.internal.compiler.parser.diagnose.RangeUtil$RangeResult: int pos>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r6, 0, $r5, 0, $i12);

        $r8 = r0.<org.eclipse.jdt.internal.compiler.parser.diagnose.RangeUtil$RangeResult: int[] intervalEnds>;

        $i13 = r0.<org.eclipse.jdt.internal.compiler.parser.diagnose.RangeUtil$RangeResult: int pos>;

        $i14 = $i13 * 2;

        $r7 = newarray (int)[$i14];

        r0.<org.eclipse.jdt.internal.compiler.parser.diagnose.RangeUtil$RangeResult: int[] intervalEnds> = $r7;

        $i15 = r0.<org.eclipse.jdt.internal.compiler.parser.diagnose.RangeUtil$RangeResult: int pos>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r8, 0, $r7, 0, $i15);

        $r10 = r0.<org.eclipse.jdt.internal.compiler.parser.diagnose.RangeUtil$RangeResult: int[] intervalFlags>;

        $i16 = r0.<org.eclipse.jdt.internal.compiler.parser.diagnose.RangeUtil$RangeResult: int pos>;

        $i17 = $i16 * 2;

        $r9 = newarray (int)[$i17];

        r0.<org.eclipse.jdt.internal.compiler.parser.diagnose.RangeUtil$RangeResult: int[] intervalFlags> = $r9;

        $i18 = r0.<org.eclipse.jdt.internal.compiler.parser.diagnose.RangeUtil$RangeResult: int pos>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r10, 0, $r9, 0, $i18);

     label1:
        $r2 = r0.<org.eclipse.jdt.internal.compiler.parser.diagnose.RangeUtil$RangeResult: int[] intervalStarts>;

        $i3 = r0.<org.eclipse.jdt.internal.compiler.parser.diagnose.RangeUtil$RangeResult: int pos>;

        $r2[$i3] = i2;

        $r3 = r0.<org.eclipse.jdt.internal.compiler.parser.diagnose.RangeUtil$RangeResult: int[] intervalEnds>;

        $i5 = r0.<org.eclipse.jdt.internal.compiler.parser.diagnose.RangeUtil$RangeResult: int pos>;

        $r3[$i5] = i4;

        $r4 = r0.<org.eclipse.jdt.internal.compiler.parser.diagnose.RangeUtil$RangeResult: int[] intervalFlags>;

        $i7 = r0.<org.eclipse.jdt.internal.compiler.parser.diagnose.RangeUtil$RangeResult: int pos>;

        $r4[$i7] = i6;

        $i8 = r0.<org.eclipse.jdt.internal.compiler.parser.diagnose.RangeUtil$RangeResult: int pos>;

        $i9 = $i8 + 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.diagnose.RangeUtil$RangeResult: int pos> = $i9;

        return;
    }

    int[][] getRanges()
    {
        int[][] $r7;
        org.eclipse.jdt.internal.compiler.parser.diagnose.RangeUtil$RangeResult r0;
        int[] r1, r2, r3, $r4, $r5, $r6;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.diagnose.RangeUtil$RangeResult;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.diagnose.RangeUtil$RangeResult: int pos>;

        r1 = newarray (int)[$i0];

        $i1 = r0.<org.eclipse.jdt.internal.compiler.parser.diagnose.RangeUtil$RangeResult: int pos>;

        r2 = newarray (int)[$i1];

        $i2 = r0.<org.eclipse.jdt.internal.compiler.parser.diagnose.RangeUtil$RangeResult: int pos>;

        r3 = newarray (int)[$i2];

        $r4 = r0.<org.eclipse.jdt.internal.compiler.parser.diagnose.RangeUtil$RangeResult: int[] intervalStarts>;

        $i3 = r0.<org.eclipse.jdt.internal.compiler.parser.diagnose.RangeUtil$RangeResult: int pos>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, r1, 0, $i3);

        $r5 = r0.<org.eclipse.jdt.internal.compiler.parser.diagnose.RangeUtil$RangeResult: int[] intervalEnds>;

        $i4 = r0.<org.eclipse.jdt.internal.compiler.parser.diagnose.RangeUtil$RangeResult: int pos>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, 0, r2, 0, $i4);

        $r6 = r0.<org.eclipse.jdt.internal.compiler.parser.diagnose.RangeUtil$RangeResult: int[] intervalFlags>;

        $i5 = r0.<org.eclipse.jdt.internal.compiler.parser.diagnose.RangeUtil$RangeResult: int pos>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r6, 0, r3, 0, $i5);

        $i6 = lengthof r1;

        if $i6 <= 1 goto label1;

        $i7 = lengthof r1;

        $i8 = $i7 - 1;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.parser.diagnose.RangeUtil$RangeResult: void quickSort(int[],int[],int[],int,int)>(r1, r2, r3, 0, $i8);

     label1:
        $r7 = newarray (int[])[3];

        $r7[0] = r1;

        $r7[1] = r2;

        $r7[2] = r3;

        return $r7;
    }

    private void quickSort(int[], int[], int[], int, int)
    {
        org.eclipse.jdt.internal.compiler.parser.diagnose.RangeUtil$RangeResult r1;
        int[] r0, r2, r3;
        int i0, i1, $i2, $i3, $i4, i5, $i6, $i7, $i8, $i9, $i10, i11, i12, $i13, $i14, i15, i16, i17, $i19, $i21;

        r1 := @this: org.eclipse.jdt.internal.compiler.parser.diagnose.RangeUtil$RangeResult;

        r0 := @parameter0: int[];

        r2 := @parameter1: int[];

        r3 := @parameter2: int[];

        i11 := @parameter3: int;

        i12 := @parameter4: int;

        i0 = i11;

        i1 = i12;

        $i2 = i12 - i11;

        $i3 = $i2 / 2;

        $i4 = i11 + $i3;

        i5 = r0[$i4];

        goto label2;

     label1:
        i11 = i11 + 1;

     label2:
        $i13 = r0[i11];

        $i14 = specialinvoke r1.<org.eclipse.jdt.internal.compiler.parser.diagnose.RangeUtil$RangeResult: int compare(int,int)>($i13, i5);

        if $i14 < 0 goto label1;

        goto label4;

     label3:
        $i19 = (int) -1;

        i12 = i12 + $i19;

     label4:
        $i6 = r0[i12];

        $i7 = specialinvoke r1.<org.eclipse.jdt.internal.compiler.parser.diagnose.RangeUtil$RangeResult: int compare(int,int)>(i5, $i6);

        if $i7 < 0 goto label3;

        if i11 > i12 goto label5;

        i15 = r0[i11];

        $i8 = r0[i12];

        r0[i11] = $i8;

        r0[i12] = i15;

        i16 = r2[i11];

        $i9 = r2[i12];

        r2[i11] = $i9;

        r2[i12] = i16;

        i17 = r3[i11];

        $i10 = r3[i12];

        r3[i11] = $i10;

        r3[i12] = i17;

        i11 = i11 + 1;

        $i21 = (int) -1;

        i12 = i12 + $i21;

     label5:
        if i11 <= i12 goto label2;

        if i0 >= i12 goto label6;

        specialinvoke r1.<org.eclipse.jdt.internal.compiler.parser.diagnose.RangeUtil$RangeResult: void quickSort(int[],int[],int[],int,int)>(r0, r2, r3, i0, i12);

     label6:
        if i11 >= i1 goto label7;

        specialinvoke r1.<org.eclipse.jdt.internal.compiler.parser.diagnose.RangeUtil$RangeResult: void quickSort(int[],int[],int[],int,int)>(r0, r2, r3, i11, i1);

     label7:
        return;
    }

    private int compare(int, int)
    {
        int i0, i1, $i2;
        org.eclipse.jdt.internal.compiler.parser.diagnose.RangeUtil$RangeResult r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.diagnose.RangeUtil$RangeResult;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $i2 = i0 - i1;

        return $i2;
    }

    public static void <clinit>()
    {
        <org.eclipse.jdt.internal.compiler.parser.diagnose.RangeUtil$RangeResult: int INITIAL_SIZE> = 10;

        return;
    }
}
