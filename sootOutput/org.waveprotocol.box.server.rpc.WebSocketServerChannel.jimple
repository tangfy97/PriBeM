public class org.waveprotocol.box.server.rpc.WebSocketServerChannel extends org.waveprotocol.box.server.rpc.WebSocketChannel implements org.eclipse.jetty.websocket.WebSocket, org.eclipse.jetty.websocket.WebSocket$OnTextMessage
{
    private static final org.waveprotocol.wave.util.logging.Log LOG;
    private org.eclipse.jetty.websocket.WebSocket$Connection connection;

    public void <init>(org.waveprotocol.box.server.rpc.ProtoCallback)
    {
        org.waveprotocol.box.server.rpc.WebSocketServerChannel r0;
        org.waveprotocol.box.server.rpc.ProtoCallback r1;

        r0 := @this: org.waveprotocol.box.server.rpc.WebSocketServerChannel;

        r1 := @parameter0: org.waveprotocol.box.server.rpc.ProtoCallback;

        specialinvoke r0.<org.waveprotocol.box.server.rpc.WebSocketChannel: void <init>(org.waveprotocol.box.server.rpc.ProtoCallback)>(r1);

        return;
    }

    public void onOpen(org.eclipse.jetty.websocket.WebSocket$Connection)
    {
        org.waveprotocol.box.server.rpc.WebSocketServerChannel r0;
        org.eclipse.jetty.websocket.WebSocket$Connection r1;

        r0 := @this: org.waveprotocol.box.server.rpc.WebSocketServerChannel;

        r1 := @parameter0: org.eclipse.jetty.websocket.WebSocket$Connection;

        r0.<org.waveprotocol.box.server.rpc.WebSocketServerChannel: org.eclipse.jetty.websocket.WebSocket$Connection connection> = r1;

        interfaceinvoke r1.<org.eclipse.jetty.websocket.WebSocket$Connection: void setMaxIdleTime(int)>(0);

        return;
    }

    public void onMessage(java.lang.String)
    {
        org.waveprotocol.box.server.rpc.WebSocketServerChannel r0;
        java.lang.String r1;

        r0 := @this: org.waveprotocol.box.server.rpc.WebSocketServerChannel;

        r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<org.waveprotocol.box.server.rpc.WebSocketServerChannel: void handleMessageString(java.lang.String)>(r1);

        return;
    }

    public void onClose(int, java.lang.String)
    {
        java.lang.Throwable $r11;
        int i0;
        java.lang.StringBuilder $r0, $r2, $r3, $r4, $r6, $r7, $r9;
        org.waveprotocol.wave.util.logging.Log $r1;
        java.lang.String r5, $r10;
        org.waveprotocol.box.server.rpc.WebSocketServerChannel r8;

        r8 := @this: org.waveprotocol.box.server.rpc.WebSocketServerChannel;

        i0 := @parameter0: int;

        r5 := @parameter1: java.lang.String;

        $r1 = <org.waveprotocol.box.server.rpc.WebSocketServerChannel: org.waveprotocol.wave.util.logging.Log LOG>;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("websocket disconnected (");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" - ");

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("): ");

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r1.<org.waveprotocol.wave.util.logging.Log: void info(java.lang.String)>($r10);

        entermonitor r8;

     label1:
        r8.<org.waveprotocol.box.server.rpc.WebSocketServerChannel: org.eclipse.jetty.websocket.WebSocket$Connection connection> = null;

        exitmonitor r8;

     label2:
        goto label5;

     label3:
        $r11 := @caughtexception;

        exitmonitor r8;

     label4:
        throw $r11;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    protected void sendMessageString(java.lang.String) throws java.io.IOException
    {
        java.lang.Throwable $r5;
        org.eclipse.jetty.websocket.WebSocket$Connection $r1, $r3;
        org.waveprotocol.wave.util.logging.Log $r4;
        org.waveprotocol.box.server.rpc.WebSocketServerChannel r0;
        java.lang.String r2;

        r0 := @this: org.waveprotocol.box.server.rpc.WebSocketServerChannel;

        r2 := @parameter0: java.lang.String;

        entermonitor r0;

     label1:
        $r1 = r0.<org.waveprotocol.box.server.rpc.WebSocketServerChannel: org.eclipse.jetty.websocket.WebSocket$Connection connection>;

        if $r1 != null goto label2;

        $r4 = <org.waveprotocol.box.server.rpc.WebSocketServerChannel: org.waveprotocol.wave.util.logging.Log LOG>;

        virtualinvoke $r4.<org.waveprotocol.wave.util.logging.Log: void warning(java.lang.String)>("Websocket is not connected");

        goto label3;

     label2:
        $r3 = r0.<org.waveprotocol.box.server.rpc.WebSocketServerChannel: org.eclipse.jetty.websocket.WebSocket$Connection connection>;

        interfaceinvoke $r3.<org.eclipse.jetty.websocket.WebSocket$Connection: void sendMessage(java.lang.String)>(r2);

     label3:
        exitmonitor r0;

     label4:
        goto label7;

     label5:
        $r5 := @caughtexception;

        exitmonitor r0;

     label6:
        throw $r5;

     label7:
        return;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    static void <clinit>()
    {
        org.waveprotocol.wave.util.logging.Log $r0;

        $r0 = staticinvoke <org.waveprotocol.wave.util.logging.Log: org.waveprotocol.wave.util.logging.Log get(java.lang.Class)>(class "Lorg/waveprotocol/box/server/rpc/WebSocketServerChannel;");

        <org.waveprotocol.box.server.rpc.WebSocketServerChannel: org.waveprotocol.wave.util.logging.Log LOG> = $r0;

        return;
    }
}
