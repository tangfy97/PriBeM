public abstract class org.springframework.validation.ValidationUtils extends java.lang.Object
{
    private static org.apache.commons.logging.Log logger;

    static void <clinit>()
    {
        org.apache.commons.logging.Log $r0;

        $r0 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>(class "Lorg/springframework/validation/ValidationUtils;");

        <org.springframework.validation.ValidationUtils: org.apache.commons.logging.Log logger> = $r0;

        return;
    }

    public void <init>()
    {
        org.springframework.validation.ValidationUtils r0;

        r0 := @this: org.springframework.validation.ValidationUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void invokeValidator(org.springframework.validation.Validator, java.lang.Object, org.springframework.validation.Errors)
    {
        org.springframework.validation.Errors r1;
        org.springframework.validation.Validator r0;
        int $i0;
        java.lang.String $r10, $r20, $r25;
        boolean $z0, $z1, $z2, $z3;
        java.lang.IllegalArgumentException $r12;
        org.apache.commons.logging.Log $r2, $r4, $r5, $r7, $r22;
        java.lang.Object r3;
        java.lang.StringBuilder $r6, $r8, $r9, $r13, $r15, $r16, $r18, $r19, $r21, $r23, $r24;
        java.lang.Class $r11, $r14, $r17;

        r0 := @parameter0: org.springframework.validation.Validator;

        r3 := @parameter1: java.lang.Object;

        r1 := @parameter2: org.springframework.validation.Errors;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "Validator must not be null");

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r1, "Errors object must not be null");

        $r2 = <org.springframework.validation.ValidationUtils: org.apache.commons.logging.Log logger>;

        $z0 = interfaceinvoke $r2.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z0 == 0 goto label1;

        $r22 = <org.springframework.validation.ValidationUtils: org.apache.commons.logging.Log logger>;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>(java.lang.String)>("Invoking validator [");

        $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r22.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r25);

     label1:
        if r3 == null goto label2;

        $r11 = virtualinvoke r3.<java.lang.Object: java.lang.Class getClass()>();

        $z3 = interfaceinvoke r0.<org.springframework.validation.Validator: boolean supports(java.lang.Class)>($r11);

        if $z3 != 0 goto label2;

        $r12 = new java.lang.IllegalArgumentException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>(java.lang.String)>("Validator [");

        $r14 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] does not support [");

        $r17 = virtualinvoke r3.<java.lang.Object: java.lang.Class getClass()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r20);

        throw $r12;

     label2:
        interfaceinvoke r0.<org.springframework.validation.Validator: void validate(java.lang.Object,org.springframework.validation.Errors)>(r3, r1);

        $r4 = <org.springframework.validation.ValidationUtils: org.apache.commons.logging.Log logger>;

        $z1 = interfaceinvoke $r4.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z1 == 0 goto label4;

        $z2 = interfaceinvoke r1.<org.springframework.validation.Errors: boolean hasErrors()>();

        if $z2 == 0 goto label3;

        $r7 = <org.springframework.validation.ValidationUtils: org.apache.commons.logging.Log logger>;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>(java.lang.String)>("Validator found ");

        $i0 = interfaceinvoke r1.<org.springframework.validation.Errors: int getErrorCount()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" errors");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r7.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r10);

        goto label4;

     label3:
        $r5 = <org.springframework.validation.ValidationUtils: org.apache.commons.logging.Log logger>;

        interfaceinvoke $r5.<org.apache.commons.logging.Log: void debug(java.lang.Object)>("Validator found no errors");

     label4:
        return;
    }

    public static void rejectIfEmpty(org.springframework.validation.Errors, java.lang.String, java.lang.String)
    {
        org.springframework.validation.Errors r0;
        java.lang.String r1, r2;

        r0 := @parameter0: org.springframework.validation.Errors;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        staticinvoke <org.springframework.validation.ValidationUtils: void rejectIfEmpty(org.springframework.validation.Errors,java.lang.String,java.lang.String,java.lang.Object[],java.lang.String)>(r0, r1, r2, null, null);

        return;
    }

    public static void rejectIfEmpty(org.springframework.validation.Errors, java.lang.String, java.lang.String, java.lang.String)
    {
        org.springframework.validation.Errors r0;
        java.lang.String r1, r2, r3;

        r0 := @parameter0: org.springframework.validation.Errors;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.String;

        staticinvoke <org.springframework.validation.ValidationUtils: void rejectIfEmpty(org.springframework.validation.Errors,java.lang.String,java.lang.String,java.lang.Object[],java.lang.String)>(r0, r1, r2, null, r3);

        return;
    }

    public static void rejectIfEmpty(org.springframework.validation.Errors, java.lang.String, java.lang.String, java.lang.Object[])
    {
        org.springframework.validation.Errors r0;
        java.lang.Object[] r3;
        java.lang.String r1, r2;

        r0 := @parameter0: org.springframework.validation.Errors;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.Object[];

        staticinvoke <org.springframework.validation.ValidationUtils: void rejectIfEmpty(org.springframework.validation.Errors,java.lang.String,java.lang.String,java.lang.Object[],java.lang.String)>(r0, r1, r2, r3, null);

        return;
    }

    public static void rejectIfEmpty(org.springframework.validation.Errors, java.lang.String, java.lang.String, java.lang.Object[], java.lang.String)
    {
        org.springframework.validation.Errors r0;
        java.lang.Object[] r4;
        java.lang.Object $r2;
        java.lang.String r1, r3, r5, $r6;
        boolean $z0;

        r0 := @parameter0: org.springframework.validation.Errors;

        r1 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.Object[];

        r5 := @parameter4: java.lang.String;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "Errors object must not be null");

        $r2 = interfaceinvoke r0.<org.springframework.validation.Errors: java.lang.Object getFieldValue(java.lang.String)>(r1);

        if $r2 == null goto label1;

        $r6 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>();

        $z0 = staticinvoke <org.springframework.util.StringUtils: boolean hasLength(java.lang.String)>($r6);

        if $z0 != 0 goto label2;

     label1:
        interfaceinvoke r0.<org.springframework.validation.Errors: void rejectValue(java.lang.String,java.lang.String,java.lang.Object[],java.lang.String)>(r1, r3, r4, r5);

     label2:
        return;
    }

    public static void rejectIfEmptyOrWhitespace(org.springframework.validation.Errors, java.lang.String, java.lang.String)
    {
        org.springframework.validation.Errors r0;
        java.lang.String r1, r2;

        r0 := @parameter0: org.springframework.validation.Errors;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        staticinvoke <org.springframework.validation.ValidationUtils: void rejectIfEmptyOrWhitespace(org.springframework.validation.Errors,java.lang.String,java.lang.String,java.lang.Object[],java.lang.String)>(r0, r1, r2, null, null);

        return;
    }

    public static void rejectIfEmptyOrWhitespace(org.springframework.validation.Errors, java.lang.String, java.lang.String, java.lang.String)
    {
        org.springframework.validation.Errors r0;
        java.lang.String r1, r2, r3;

        r0 := @parameter0: org.springframework.validation.Errors;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.String;

        staticinvoke <org.springframework.validation.ValidationUtils: void rejectIfEmptyOrWhitespace(org.springframework.validation.Errors,java.lang.String,java.lang.String,java.lang.Object[],java.lang.String)>(r0, r1, r2, null, r3);

        return;
    }

    public static void rejectIfEmptyOrWhitespace(org.springframework.validation.Errors, java.lang.String, java.lang.String, java.lang.Object[])
    {
        org.springframework.validation.Errors r0;
        java.lang.Object[] r3;
        java.lang.String r1, r2;

        r0 := @parameter0: org.springframework.validation.Errors;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.Object[];

        staticinvoke <org.springframework.validation.ValidationUtils: void rejectIfEmptyOrWhitespace(org.springframework.validation.Errors,java.lang.String,java.lang.String,java.lang.Object[],java.lang.String)>(r0, r1, r2, r3, null);

        return;
    }

    public static void rejectIfEmptyOrWhitespace(org.springframework.validation.Errors, java.lang.String, java.lang.String, java.lang.Object[], java.lang.String)
    {
        org.springframework.validation.Errors r0;
        java.lang.Object[] r4;
        java.lang.Object $r2;
        java.lang.String r1, r3, r5, $r6;
        boolean $z0;

        r0 := @parameter0: org.springframework.validation.Errors;

        r1 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.Object[];

        r5 := @parameter4: java.lang.String;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "Errors object must not be null");

        $r2 = interfaceinvoke r0.<org.springframework.validation.Errors: java.lang.Object getFieldValue(java.lang.String)>(r1);

        if $r2 == null goto label1;

        $r6 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>();

        $z0 = staticinvoke <org.springframework.util.StringUtils: boolean hasText(java.lang.String)>($r6);

        if $z0 != 0 goto label2;

     label1:
        interfaceinvoke r0.<org.springframework.validation.Errors: void rejectValue(java.lang.String,java.lang.String,java.lang.Object[],java.lang.String)>(r1, r3, r4, r5);

     label2:
        return;
    }
}
