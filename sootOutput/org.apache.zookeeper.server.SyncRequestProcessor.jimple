public class org.apache.zookeeper.server.SyncRequestProcessor extends java.lang.Thread implements org.apache.zookeeper.server.RequestProcessor
{
    private static final org.slf4j.Logger LOG;
    private final org.apache.zookeeper.server.ZooKeeperServer zks;
    private final java.util.concurrent.LinkedBlockingQueue queuedRequests;
    private final org.apache.zookeeper.server.RequestProcessor nextProcessor;
    private java.lang.Thread snapInProcess;
    private volatile boolean running;
    private final java.util.LinkedList toFlush;
    private final java.util.Random r;
    private static int snapCount;
    private final org.apache.zookeeper.server.Request requestOfDeath;

    public void <init>(org.apache.zookeeper.server.ZooKeeperServer, org.apache.zookeeper.server.RequestProcessor)
    {
        long $l0, $l1;
        java.util.Random $r8;
        java.util.concurrent.LinkedBlockingQueue $r6;
        org.apache.zookeeper.server.ZooKeeperServer r3;
        org.apache.zookeeper.server.Request $r9;
        org.apache.zookeeper.server.SyncRequestProcessor r0;
        java.lang.StringBuilder $r1, $r2, $r4;
        java.lang.String $r5;
        java.util.LinkedList $r7;
        org.apache.zookeeper.server.RequestProcessor r10;

        r0 := @this: org.apache.zookeeper.server.SyncRequestProcessor;

        r3 := @parameter0: org.apache.zookeeper.server.ZooKeeperServer;

        r10 := @parameter1: org.apache.zookeeper.server.RequestProcessor;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SyncThread:");

        $l0 = virtualinvoke r3.<org.apache.zookeeper.server.ZooKeeperServer: long getServerId()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<java.lang.Thread: void <init>(java.lang.String)>($r5);

        $r6 = new java.util.concurrent.LinkedBlockingQueue;

        specialinvoke $r6.<java.util.concurrent.LinkedBlockingQueue: void <init>()>();

        r0.<org.apache.zookeeper.server.SyncRequestProcessor: java.util.concurrent.LinkedBlockingQueue queuedRequests> = $r6;

        r0.<org.apache.zookeeper.server.SyncRequestProcessor: java.lang.Thread snapInProcess> = null;

        $r7 = new java.util.LinkedList;

        specialinvoke $r7.<java.util.LinkedList: void <init>()>();

        r0.<org.apache.zookeeper.server.SyncRequestProcessor: java.util.LinkedList toFlush> = $r7;

        $r8 = new java.util.Random;

        $l1 = staticinvoke <java.lang.System: long nanoTime()>();

        specialinvoke $r8.<java.util.Random: void <init>(long)>($l1);

        r0.<org.apache.zookeeper.server.SyncRequestProcessor: java.util.Random r> = $r8;

        $r9 = <org.apache.zookeeper.server.Request: org.apache.zookeeper.server.Request requestOfDeath>;

        r0.<org.apache.zookeeper.server.SyncRequestProcessor: org.apache.zookeeper.server.Request requestOfDeath> = $r9;

        r0.<org.apache.zookeeper.server.SyncRequestProcessor: org.apache.zookeeper.server.ZooKeeperServer zks> = r3;

        r0.<org.apache.zookeeper.server.SyncRequestProcessor: org.apache.zookeeper.server.RequestProcessor nextProcessor> = r10;

        r0.<org.apache.zookeeper.server.SyncRequestProcessor: boolean running> = 1;

        return;
    }

    public static void setSnapCount(int)
    {
        int i0;

        i0 := @parameter0: int;

        <org.apache.zookeeper.server.SyncRequestProcessor: int snapCount> = i0;

        return;
    }

    public static int getSnapCount()
    {
        int $i0;

        $i0 = <org.apache.zookeeper.server.SyncRequestProcessor: int snapCount>;

        return $i0;
    }

    public void run()
    {
        java.util.Random $r1, $r13;
        java.lang.Thread $r16, $r18, $r19;
        org.apache.zookeeper.server.RequestProcessor $r9, $r10, $r11;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.util.concurrent.LinkedBlockingQueue $r2, $r23;
        org.apache.zookeeper.server.Request $r4, r28;
        org.apache.zookeeper.server.SyncRequestProcessor r0;
        java.lang.Throwable $r25;
        org.apache.zookeeper.server.ZKDatabase $r6, $r15;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, i8, $i9;
        java.util.LinkedList $r7, $r8, $r22, $r27, $r29, $r30;
        java.io.Flushable $r12;
        org.slf4j.Logger $r20, $r21, $r26;
        org.apache.zookeeper.server.SyncRequestProcessor$1 $r17;
        org.apache.zookeeper.server.ZooKeeperServer $r5, $r14;
        java.lang.Object $r3, $r24;

        r0 := @this: org.apache.zookeeper.server.SyncRequestProcessor;

     label01:
        i7 = 0;

        $r1 = r0.<org.apache.zookeeper.server.SyncRequestProcessor: java.util.Random r>;

        $i0 = <org.apache.zookeeper.server.SyncRequestProcessor: int snapCount>;

        $i1 = $i0 / 2;

        i8 = virtualinvoke $r1.<java.util.Random: int nextInt(int)>($i1);

     label02:
        $r27 = r0.<org.apache.zookeeper.server.SyncRequestProcessor: java.util.LinkedList toFlush>;

        $z4 = virtualinvoke $r27.<java.util.LinkedList: boolean isEmpty()>();

        if $z4 == 0 goto label03;

        $r23 = r0.<org.apache.zookeeper.server.SyncRequestProcessor: java.util.concurrent.LinkedBlockingQueue queuedRequests>;

        $r24 = virtualinvoke $r23.<java.util.concurrent.LinkedBlockingQueue: java.lang.Object take()>();

        r28 = (org.apache.zookeeper.server.Request) $r24;

        goto label04;

     label03:
        $r2 = r0.<org.apache.zookeeper.server.SyncRequestProcessor: java.util.concurrent.LinkedBlockingQueue queuedRequests>;

        $r3 = virtualinvoke $r2.<java.util.concurrent.LinkedBlockingQueue: java.lang.Object poll()>();

        r28 = (org.apache.zookeeper.server.Request) $r3;

        if r28 != null goto label04;

        $r22 = r0.<org.apache.zookeeper.server.SyncRequestProcessor: java.util.LinkedList toFlush>;

        specialinvoke r0.<org.apache.zookeeper.server.SyncRequestProcessor: void flush(java.util.LinkedList)>($r22);

        goto label02;

     label04:
        $r4 = r0.<org.apache.zookeeper.server.SyncRequestProcessor: org.apache.zookeeper.server.Request requestOfDeath>;

        if r28 != $r4 goto label05;

        goto label11;

     label05:
        if r28 == null goto label10;

        $r5 = r0.<org.apache.zookeeper.server.SyncRequestProcessor: org.apache.zookeeper.server.ZooKeeperServer zks>;

        $r6 = virtualinvoke $r5.<org.apache.zookeeper.server.ZooKeeperServer: org.apache.zookeeper.server.ZKDatabase getZKDatabase()>();

        $z0 = virtualinvoke $r6.<org.apache.zookeeper.server.ZKDatabase: boolean append(org.apache.zookeeper.server.Request)>(r28);

        if $z0 == 0 goto label08;

        i7 = i7 + 1;

        $i2 = <org.apache.zookeeper.server.SyncRequestProcessor: int snapCount>;

        $i3 = $i2 / 2;

        $i4 = $i3 + i8;

        if i7 <= $i4 goto label09;

        $r13 = r0.<org.apache.zookeeper.server.SyncRequestProcessor: java.util.Random r>;

        $i5 = <org.apache.zookeeper.server.SyncRequestProcessor: int snapCount>;

        $i6 = $i5 / 2;

        i8 = virtualinvoke $r13.<java.util.Random: int nextInt(int)>($i6);

        $r14 = r0.<org.apache.zookeeper.server.SyncRequestProcessor: org.apache.zookeeper.server.ZooKeeperServer zks>;

        $r15 = virtualinvoke $r14.<org.apache.zookeeper.server.ZooKeeperServer: org.apache.zookeeper.server.ZKDatabase getZKDatabase()>();

        virtualinvoke $r15.<org.apache.zookeeper.server.ZKDatabase: void rollLog()>();

        $r16 = r0.<org.apache.zookeeper.server.SyncRequestProcessor: java.lang.Thread snapInProcess>;

        if $r16 == null goto label06;

        $r19 = r0.<org.apache.zookeeper.server.SyncRequestProcessor: java.lang.Thread snapInProcess>;

        $z3 = virtualinvoke $r19.<java.lang.Thread: boolean isAlive()>();

        if $z3 == 0 goto label06;

        $r20 = <org.apache.zookeeper.server.SyncRequestProcessor: org.slf4j.Logger LOG>;

        interfaceinvoke $r20.<org.slf4j.Logger: void warn(java.lang.String)>("Too busy to snap, skipping");

        goto label07;

     label06:
        $r17 = new org.apache.zookeeper.server.SyncRequestProcessor$1;

        specialinvoke $r17.<org.apache.zookeeper.server.SyncRequestProcessor$1: void <init>(org.apache.zookeeper.server.SyncRequestProcessor,java.lang.String)>(r0, "Snapshot Thread");

        r0.<org.apache.zookeeper.server.SyncRequestProcessor: java.lang.Thread snapInProcess> = $r17;

        $r18 = r0.<org.apache.zookeeper.server.SyncRequestProcessor: java.lang.Thread snapInProcess>;

        virtualinvoke $r18.<java.lang.Thread: void start()>();

     label07:
        i7 = 0;

        goto label09;

     label08:
        $r7 = r0.<org.apache.zookeeper.server.SyncRequestProcessor: java.util.LinkedList toFlush>;

        $z1 = virtualinvoke $r7.<java.util.LinkedList: boolean isEmpty()>();

        if $z1 == 0 goto label09;

        $r9 = r0.<org.apache.zookeeper.server.SyncRequestProcessor: org.apache.zookeeper.server.RequestProcessor nextProcessor>;

        interfaceinvoke $r9.<org.apache.zookeeper.server.RequestProcessor: void processRequest(org.apache.zookeeper.server.Request)>(r28);

        $r10 = r0.<org.apache.zookeeper.server.SyncRequestProcessor: org.apache.zookeeper.server.RequestProcessor nextProcessor>;

        $z2 = $r10 instanceof java.io.Flushable;

        if $z2 == 0 goto label02;

        $r11 = r0.<org.apache.zookeeper.server.SyncRequestProcessor: org.apache.zookeeper.server.RequestProcessor nextProcessor>;

        $r12 = (java.io.Flushable) $r11;

        interfaceinvoke $r12.<java.io.Flushable: void flush()>();

        goto label02;

     label09:
        $r29 = r0.<org.apache.zookeeper.server.SyncRequestProcessor: java.util.LinkedList toFlush>;

        virtualinvoke $r29.<java.util.LinkedList: boolean add(java.lang.Object)>(r28);

        $r30 = r0.<org.apache.zookeeper.server.SyncRequestProcessor: java.util.LinkedList toFlush>;

        $i9 = virtualinvoke $r30.<java.util.LinkedList: int size()>();

        if $i9 <= 1000 goto label10;

        $r8 = r0.<org.apache.zookeeper.server.SyncRequestProcessor: java.util.LinkedList toFlush>;

        specialinvoke r0.<org.apache.zookeeper.server.SyncRequestProcessor: void flush(java.util.LinkedList)>($r8);

     label10:
        goto label02;

     label11:
        goto label13;

     label12:
        $r25 := @caughtexception;

        $r26 = <org.apache.zookeeper.server.SyncRequestProcessor: org.slf4j.Logger LOG>;

        interfaceinvoke $r26.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>("Severe unrecoverable error, exiting", $r25);

        r0.<org.apache.zookeeper.server.SyncRequestProcessor: boolean running> = 0;

        staticinvoke <java.lang.System: void exit(int)>(11);

     label13:
        $r21 = <org.apache.zookeeper.server.SyncRequestProcessor: org.slf4j.Logger LOG>;

        interfaceinvoke $r21.<org.slf4j.Logger: void info(java.lang.String)>("SyncRequestProcessor exited!");

        return;

        catch java.lang.Throwable from label01 to label11 with label12;
    }

    private void flush(java.util.LinkedList) throws java.io.IOException, org.apache.zookeeper.server.RequestProcessor$RequestProcessorException
    {
        org.apache.zookeeper.server.ZKDatabase $r3;
        org.apache.zookeeper.server.ZooKeeperServer $r2;
        org.apache.zookeeper.server.Request r8;
        org.apache.zookeeper.server.SyncRequestProcessor r1;
        java.lang.Object $r7;
        java.util.LinkedList r0;
        org.apache.zookeeper.server.RequestProcessor $r4, $r5, $r9;
        boolean $z0, $z1, $z2;
        java.io.Flushable $r6;

        r1 := @this: org.apache.zookeeper.server.SyncRequestProcessor;

        r0 := @parameter0: java.util.LinkedList;

        $z0 = virtualinvoke r0.<java.util.LinkedList: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return;

     label1:
        $r2 = r1.<org.apache.zookeeper.server.SyncRequestProcessor: org.apache.zookeeper.server.ZooKeeperServer zks>;

        $r3 = virtualinvoke $r2.<org.apache.zookeeper.server.ZooKeeperServer: org.apache.zookeeper.server.ZKDatabase getZKDatabase()>();

        virtualinvoke $r3.<org.apache.zookeeper.server.ZKDatabase: void commit()>();

     label2:
        $z1 = virtualinvoke r0.<java.util.LinkedList: boolean isEmpty()>();

        if $z1 != 0 goto label3;

        $r7 = virtualinvoke r0.<java.util.LinkedList: java.lang.Object remove()>();

        r8 = (org.apache.zookeeper.server.Request) $r7;

        $r9 = r1.<org.apache.zookeeper.server.SyncRequestProcessor: org.apache.zookeeper.server.RequestProcessor nextProcessor>;

        interfaceinvoke $r9.<org.apache.zookeeper.server.RequestProcessor: void processRequest(org.apache.zookeeper.server.Request)>(r8);

        goto label2;

     label3:
        $r4 = r1.<org.apache.zookeeper.server.SyncRequestProcessor: org.apache.zookeeper.server.RequestProcessor nextProcessor>;

        $z2 = $r4 instanceof java.io.Flushable;

        if $z2 == 0 goto label4;

        $r5 = r1.<org.apache.zookeeper.server.SyncRequestProcessor: org.apache.zookeeper.server.RequestProcessor nextProcessor>;

        $r6 = (java.io.Flushable) $r5;

        interfaceinvoke $r6.<java.io.Flushable: void flush()>();

     label4:
        return;
    }

    public void shutdown()
    {
        org.slf4j.Logger $r0, $r7;
        java.util.concurrent.LinkedBlockingQueue $r3;
        org.apache.zookeeper.server.Request $r2;
        org.apache.zookeeper.server.SyncRequestProcessor r1;
        java.lang.InterruptedException $r5;
        java.lang.StringBuilder $r6, $r8, $r9, $r10;
        java.lang.String $r11;
        org.apache.zookeeper.server.RequestProcessor $r4;
        boolean $z0;

        r1 := @this: org.apache.zookeeper.server.SyncRequestProcessor;

        $r0 = <org.apache.zookeeper.server.SyncRequestProcessor: org.slf4j.Logger LOG>;

        interfaceinvoke $r0.<org.slf4j.Logger: void info(java.lang.String)>("Shutting down");

        $r3 = r1.<org.apache.zookeeper.server.SyncRequestProcessor: java.util.concurrent.LinkedBlockingQueue queuedRequests>;

        $r2 = r1.<org.apache.zookeeper.server.SyncRequestProcessor: org.apache.zookeeper.server.Request requestOfDeath>;

        virtualinvoke $r3.<java.util.concurrent.LinkedBlockingQueue: boolean add(java.lang.Object)>($r2);

     label1:
        $z0 = r1.<org.apache.zookeeper.server.SyncRequestProcessor: boolean running>;

        if $z0 == 0 goto label2;

        virtualinvoke r1.<org.apache.zookeeper.server.SyncRequestProcessor: void join()>();

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        $r7 = <org.apache.zookeeper.server.SyncRequestProcessor: org.slf4j.Logger LOG>;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Interrupted while wating for ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to finish");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r7.<org.slf4j.Logger: void warn(java.lang.String)>($r11);

     label4:
        $r4 = r1.<org.apache.zookeeper.server.SyncRequestProcessor: org.apache.zookeeper.server.RequestProcessor nextProcessor>;

        interfaceinvoke $r4.<org.apache.zookeeper.server.RequestProcessor: void shutdown()>();

        return;

        catch java.lang.InterruptedException from label1 to label2 with label3;
    }

    public void processRequest(org.apache.zookeeper.server.Request)
    {
        org.apache.zookeeper.server.Request r1;
        org.apache.zookeeper.server.SyncRequestProcessor r0;
        java.util.concurrent.LinkedBlockingQueue $r2;

        r0 := @this: org.apache.zookeeper.server.SyncRequestProcessor;

        r1 := @parameter0: org.apache.zookeeper.server.Request;

        $r2 = r0.<org.apache.zookeeper.server.SyncRequestProcessor: java.util.concurrent.LinkedBlockingQueue queuedRequests>;

        virtualinvoke $r2.<java.util.concurrent.LinkedBlockingQueue: boolean add(java.lang.Object)>(r1);

        return;
    }

    static org.apache.zookeeper.server.ZooKeeperServer access$000(org.apache.zookeeper.server.SyncRequestProcessor)
    {
        org.apache.zookeeper.server.ZooKeeperServer $r1;
        org.apache.zookeeper.server.SyncRequestProcessor r0;

        r0 := @parameter0: org.apache.zookeeper.server.SyncRequestProcessor;

        $r1 = r0.<org.apache.zookeeper.server.SyncRequestProcessor: org.apache.zookeeper.server.ZooKeeperServer zks>;

        return $r1;
    }

    static org.slf4j.Logger access$100()
    {
        org.slf4j.Logger $r0;

        $r0 = <org.apache.zookeeper.server.SyncRequestProcessor: org.slf4j.Logger LOG>;

        return $r0;
    }

    static void <clinit>()
    {
        int $i0;
        org.slf4j.Logger $r0;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lorg/apache/zookeeper/server/SyncRequestProcessor;");

        <org.apache.zookeeper.server.SyncRequestProcessor: org.slf4j.Logger LOG> = $r0;

        $i0 = staticinvoke <org.apache.zookeeper.server.ZooKeeperServer: int getSnapCount()>();

        <org.apache.zookeeper.server.SyncRequestProcessor: int snapCount> = $i0;

        return;
    }
}
