class org.waveprotocol.wave.client.editor.EditorImpl$3 extends java.lang.Object implements org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingSink
{
    static final boolean $assertionsDisabled;
    final org.waveprotocol.wave.client.editor.EditorImpl this$0;

    void <init>(org.waveprotocol.wave.client.editor.EditorImpl)
    {
        org.waveprotocol.wave.client.editor.EditorImpl$3 r0;
        org.waveprotocol.wave.client.editor.EditorImpl r1;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorImpl$3;

        r1 := @parameter0: org.waveprotocol.wave.client.editor.EditorImpl;

        r0.<org.waveprotocol.wave.client.editor.EditorImpl$3: org.waveprotocol.wave.client.editor.EditorImpl this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void aboutToFlush()
    {
        com.google.gwt.dom.client.Text $r4, r14;
        org.waveprotocol.wave.model.document.util.Point$Tx $r19;
        boolean $z0, $z1, $z2;
        org.waveprotocol.wave.model.document.util.FocusedPointRange $r6;
        org.waveprotocol.wave.common.logging.LoggerBundle $r8, $r20, $r28;
        com.google.gwt.dom.client.Element r16;
        java.lang.StringBuilder $r23, $r25, $r26, $r35;
        java.lang.Throwable $r31;
        org.waveprotocol.wave.common.logging.Logger $r9, $r21, $r29;
        org.waveprotocol.wave.client.editor.extract.DomMutationReverter $r2;
        int $i0, $i1, $i2, $i3;
        org.waveprotocol.wave.client.editor.EditorImpl$3 r0;
        java.lang.String $r17, $r24, $r27;
        org.waveprotocol.wave.model.document.util.Point $r7;
        org.waveprotocol.wave.client.editor.EditorImpl $r1, $r3, $r5, $r10, $r30, $r32;
        com.google.gwt.core.client.JavaScriptObject $r13, $r15;
        java.lang.Object $r11, r34;
        com.google.gwt.dom.client.Node $r12, $r18, r33, $r36;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorImpl$3;

        $r1 = r0.<org.waveprotocol.wave.client.editor.EditorImpl$3: org.waveprotocol.wave.client.editor.EditorImpl this$0>;

        $r2 = staticinvoke <org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.extract.DomMutationReverter access$1100(org.waveprotocol.wave.client.editor.EditorImpl)>($r1);

        virtualinvoke $r2.<org.waveprotocol.wave.client.editor.extract.DomMutationReverter: void flush()>();

        $r3 = r0.<org.waveprotocol.wave.client.editor.EditorImpl$3: org.waveprotocol.wave.client.editor.EditorImpl this$0>;

        $r4 = staticinvoke <org.waveprotocol.wave.client.editor.EditorImpl: com.google.gwt.dom.client.Text access$1200(org.waveprotocol.wave.client.editor.EditorImpl)>($r3);

        if $r4 == null goto label13;

        staticinvoke <org.waveprotocol.wave.client.editor.EditorStaticDeps: void startIgnoreMutations()>();

     label01:
        $r5 = r0.<org.waveprotocol.wave.client.editor.EditorImpl$3: org.waveprotocol.wave.client.editor.EditorImpl this$0>;

        $r6 = virtualinvoke $r5.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.model.document.util.FocusedPointRange getHtmlSelection()>();

        $r7 = virtualinvoke $r6.<org.waveprotocol.wave.model.document.util.FocusedPointRange: org.waveprotocol.wave.model.document.util.Point getFocus()>();

        $z0 = virtualinvoke $r7.<org.waveprotocol.wave.model.document.util.Point: boolean isInTextNode()>();

        if $z0 == 0 goto label09;

        $r11 = virtualinvoke $r7.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getContainer()>();

        $r12 = (com.google.gwt.dom.client.Node) $r11;

        $r13 = virtualinvoke $r12.<com.google.gwt.dom.client.Node: com.google.gwt.core.client.JavaScriptObject cast()>();

        r14 = (com.google.gwt.dom.client.Text) $r13;

        r33 = virtualinvoke r14.<com.google.gwt.dom.client.Text: com.google.gwt.dom.client.Node getPreviousSibling()>();

     label02:
        if r33 == null goto label03;

        $z2 = staticinvoke <org.waveprotocol.wave.client.common.util.DomHelper: boolean isTextNode(com.google.gwt.dom.client.Node)>(r33);

        if $z2 == 0 goto label03;

        r33 = virtualinvoke r33.<com.google.gwt.dom.client.Node: com.google.gwt.dom.client.Node getPreviousSibling()>();

        goto label02;

     label03:
        if r33 != null goto label05;

        $r28 = <org.waveprotocol.wave.client.editor.EditorStaticDeps: org.waveprotocol.wave.common.logging.LoggerBundle logger>;

        $r29 = interfaceinvoke $r28.<org.waveprotocol.wave.common.logging.LoggerBundle: org.waveprotocol.wave.common.logging.Logger error()>();

        interfaceinvoke $r29.<org.waveprotocol.wave.common.logging.Logger: void log(java.lang.String)>("No link before the link hack?");

     label04:
        $r30 = r0.<org.waveprotocol.wave.client.editor.EditorImpl$3: org.waveprotocol.wave.client.editor.EditorImpl this$0>;

        staticinvoke <org.waveprotocol.wave.client.editor.EditorImpl: com.google.gwt.dom.client.Text access$1202(org.waveprotocol.wave.client.editor.EditorImpl,com.google.gwt.dom.client.Text)>($r30, null);

        staticinvoke <org.waveprotocol.wave.client.editor.EditorStaticDeps: void endIgnoreMutations()>();

        return;

     label05:
        $r15 = virtualinvoke r33.<com.google.gwt.dom.client.Node: com.google.gwt.core.client.JavaScriptObject cast()>();

        r16 = (com.google.gwt.dom.client.Element) $r15;

        $r17 = virtualinvoke r16.<com.google.gwt.dom.client.Element: java.lang.String getTagName()>();

        $z1 = virtualinvoke $r17.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("a");

        if $z1 != 0 goto label06;

        $r20 = <org.waveprotocol.wave.client.editor.EditorStaticDeps: org.waveprotocol.wave.common.logging.LoggerBundle logger>;

        $r21 = interfaceinvoke $r20.<org.waveprotocol.wave.common.logging.LoggerBundle: org.waveprotocol.wave.common.logging.Logger error()>();

        $r35 = new java.lang.StringBuilder;

        specialinvoke $r35.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Some other element before the link hack? (");

        $r24 = virtualinvoke r16.<com.google.gwt.dom.client.Element: java.lang.String getTagName()>();

        $r25 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r21.<org.waveprotocol.wave.common.logging.Logger: void log(java.lang.String)>($r27);

     label06:
        $i0 = virtualinvoke $r7.<org.waveprotocol.wave.model.document.util.Point: int getTextOffset()>();

        $i1 = virtualinvoke r14.<com.google.gwt.dom.client.Text: int getLength()>();

        if $i0 != $i1 goto label07;

        r34 = virtualinvoke r14.<com.google.gwt.dom.client.Text: com.google.gwt.dom.client.Node getNextSibling()>();

        goto label08;

     label07:
        $i2 = virtualinvoke $r7.<org.waveprotocol.wave.model.document.util.Point: int getTextOffset()>();

        r34 = virtualinvoke r14.<com.google.gwt.dom.client.Text: com.google.gwt.dom.client.Text splitText(int)>($i2);

     label08:
        $r18 = virtualinvoke r16.<com.google.gwt.dom.client.Element: com.google.gwt.dom.client.Node getNextSibling()>();

        $r36 = (com.google.gwt.dom.client.Node) r34;

        staticinvoke <org.waveprotocol.wave.client.common.util.DomHelper: void moveNodes(com.google.gwt.dom.client.Element,com.google.gwt.dom.client.Node,com.google.gwt.dom.client.Node,com.google.gwt.dom.client.Node)>(r16, $r18, $r36, null);

        $i3 = virtualinvoke r14.<com.google.gwt.dom.client.Text: int getLength()>();

        $r19 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$Tx inText(java.lang.Object,int)>(r14, $i3);

        staticinvoke <org.waveprotocol.wave.client.editor.selection.html.NativeSelectionUtil: void setCaret(org.waveprotocol.wave.model.document.util.Point)>($r19);

        goto label10;

     label09:
        $r8 = <org.waveprotocol.wave.client.editor.EditorStaticDeps: org.waveprotocol.wave.common.logging.LoggerBundle logger>;

        $r9 = interfaceinvoke $r8.<org.waveprotocol.wave.common.logging.LoggerBundle: org.waveprotocol.wave.common.logging.Logger error()>();

        interfaceinvoke $r9.<org.waveprotocol.wave.common.logging.Logger: void log(java.lang.String)>("End of link hack caret not in text node!?");

     label10:
        $r10 = r0.<org.waveprotocol.wave.client.editor.EditorImpl$3: org.waveprotocol.wave.client.editor.EditorImpl this$0>;

        staticinvoke <org.waveprotocol.wave.client.editor.EditorImpl: com.google.gwt.dom.client.Text access$1202(org.waveprotocol.wave.client.editor.EditorImpl,com.google.gwt.dom.client.Text)>($r10, null);

        staticinvoke <org.waveprotocol.wave.client.editor.EditorStaticDeps: void endIgnoreMutations()>();

        goto label13;

     label11:
        $r31 := @caughtexception;

     label12:
        $r32 = r0.<org.waveprotocol.wave.client.editor.EditorImpl$3: org.waveprotocol.wave.client.editor.EditorImpl this$0>;

        staticinvoke <org.waveprotocol.wave.client.editor.EditorImpl: com.google.gwt.dom.client.Text access$1202(org.waveprotocol.wave.client.editor.EditorImpl,com.google.gwt.dom.client.Text)>($r32, null);

        staticinvoke <org.waveprotocol.wave.client.editor.EditorStaticDeps: void endIgnoreMutations()>();

        throw $r31;

     label13:
        return;

        catch java.lang.Throwable from label01 to label04 with label11;
        catch java.lang.Throwable from label05 to label10 with label11;
        catch java.lang.Throwable from label11 to label12 with label11;
    }

    public void typingReplace(org.waveprotocol.wave.model.document.util.Point, int, java.lang.String, org.waveprotocol.wave.client.editor.RestrictedRange)
    {
        org.waveprotocol.wave.common.logging.Logger $r12;
        org.waveprotocol.wave.model.document.indexed.LocationMapper $r2;
        org.waveprotocol.wave.client.editor.RestrictedRange r7;
        int $i0, i1;
        org.waveprotocol.wave.client.editor.EditorImpl$3 r0;
        java.lang.String r4, $r17;
        org.waveprotocol.wave.model.document.util.Point r3;
        org.waveprotocol.wave.client.editor.EditorImpl $r1, $r5, $r9;
        org.waveprotocol.wave.model.document.AnnotationBehaviour$BiasDirection $r8;
        org.waveprotocol.wave.common.logging.LoggerBundle $r11;
        org.waveprotocol.wave.model.document.operation.Nindo $r6;
        org.waveprotocol.wave.client.editor.content.ContentDocument$LocalOperationException $r10;
        java.lang.StringBuilder $r13, $r14, $r15, $r16;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorImpl$3;

        r3 := @parameter0: org.waveprotocol.wave.model.document.util.Point;

        i1 := @parameter1: int;

        r4 := @parameter2: java.lang.String;

        r7 := @parameter3: org.waveprotocol.wave.client.editor.RestrictedRange;

        $r1 = r0.<org.waveprotocol.wave.client.editor.EditorImpl$3: org.waveprotocol.wave.client.editor.EditorImpl this$0>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.model.document.indexed.LocationMapper mapper()>();

        $i0 = interfaceinvoke $r2.<org.waveprotocol.wave.model.document.indexed.LocationMapper: int getLocation(org.waveprotocol.wave.model.document.util.Point)>(r3);

        $r5 = r0.<org.waveprotocol.wave.client.editor.EditorImpl$3: org.waveprotocol.wave.client.editor.EditorImpl this$0>;

        $r6 = staticinvoke <org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.model.document.operation.Nindo access$1300(org.waveprotocol.wave.client.editor.EditorImpl,int,int,java.lang.String)>($r5, $i0, i1, r4);

     label1:
        specialinvoke r0.<org.waveprotocol.wave.client.editor.EditorImpl$3: void applyRepairingOperation(org.waveprotocol.wave.model.document.operation.Nindo)>($r6);

        virtualinvoke r0.<org.waveprotocol.wave.client.editor.EditorImpl$3: void typingFinished(org.waveprotocol.wave.client.editor.RestrictedRange)>(r7);

     label2:
        goto label4;

     label3:
        $r10 := @caughtexception;

        $r11 = <org.waveprotocol.wave.client.editor.EditorStaticDeps: org.waveprotocol.wave.common.logging.LoggerBundle logger>;

        $r12 = interfaceinvoke $r11.<org.waveprotocol.wave.common.logging.LoggerBundle: org.waveprotocol.wave.common.logging.Logger error()>();

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Swallowing Error: Invalid operation sent to TypingSink (");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r12.<org.waveprotocol.wave.common.logging.Logger: void log(java.lang.String)>($r17);

     label4:
        $r9 = r0.<org.waveprotocol.wave.client.editor.EditorImpl$3: org.waveprotocol.wave.client.editor.EditorImpl this$0>;

        $r8 = <org.waveprotocol.wave.model.document.AnnotationBehaviour$BiasDirection: org.waveprotocol.wave.model.document.AnnotationBehaviour$BiasDirection LEFT>;

        staticinvoke <org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.model.document.AnnotationBehaviour$BiasDirection access$1402(org.waveprotocol.wave.client.editor.EditorImpl,org.waveprotocol.wave.model.document.AnnotationBehaviour$BiasDirection)>($r9, $r8);

        return;

        catch org.waveprotocol.wave.client.editor.content.ContentDocument$LocalOperationException from label1 to label2 with label3;
    }

    void typingFinished(org.waveprotocol.wave.client.editor.RestrictedRange)
    {
        org.waveprotocol.wave.model.document.util.Point$Tx $r11;
        com.google.gwt.dom.client.Text $r13, $r15;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.waveprotocol.wave.model.document.util.FocusedPointRange $r2;
        org.waveprotocol.wave.common.logging.LoggerBundle $r17;
        org.waveprotocol.wave.common.logging.Logger $r18;
        java.lang.AssertionError $r20;
        org.waveprotocol.wave.client.editor.RestrictedRange r5;
        int $i0, $i1, i2;
        org.waveprotocol.wave.client.editor.EditorImpl$3 r0;
        org.waveprotocol.wave.client.editor.extract.Repairer $r4;
        org.waveprotocol.wave.model.document.util.Point $r6, $r8, $r10, $r16, $r19, $r21;
        org.waveprotocol.wave.client.editor.EditorImpl $r1, $r3;
        com.google.gwt.core.client.JavaScriptObject $r12, $r14;
        java.lang.Object $r7, $r9;
        com.google.gwt.dom.client.Node $r22, $r23, r24;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorImpl$3;

        r5 := @parameter0: org.waveprotocol.wave.client.editor.RestrictedRange;

        $r1 = r0.<org.waveprotocol.wave.client.editor.EditorImpl$3: org.waveprotocol.wave.client.editor.EditorImpl this$0>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.model.document.util.FocusedPointRange getHtmlSelection()>();

        $r3 = r0.<org.waveprotocol.wave.client.editor.EditorImpl$3: org.waveprotocol.wave.client.editor.EditorImpl this$0>;

        $r4 = staticinvoke <org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.extract.Repairer access$1500(org.waveprotocol.wave.client.editor.EditorImpl)>($r3);

        if $r2 != null goto label1;

        $r23 = null;

        goto label2;

     label1:
        $r6 = virtualinvoke $r2.<org.waveprotocol.wave.model.document.util.FocusedPointRange: org.waveprotocol.wave.model.document.util.Point getFocus()>();

        $r7 = virtualinvoke $r6.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getContainer()>();

        $r23 = (com.google.gwt.dom.client.Node) $r7;

     label2:
        $z0 = virtualinvoke $r4.<org.waveprotocol.wave.client.editor.extract.Repairer: boolean zipRange(org.waveprotocol.wave.client.editor.RestrictedRange,com.google.gwt.dom.client.Node)>(r5, $r23);

        if $z0 == 0 goto label8;

        $z1 = <org.waveprotocol.wave.client.editor.EditorImpl$3: boolean $assertionsDisabled>;

        if $z1 != 0 goto label4;

        if $r2 == null goto label3;

        $r21 = virtualinvoke $r2.<org.waveprotocol.wave.model.document.util.FocusedPointRange: org.waveprotocol.wave.model.document.util.Point getFocus()>();

        if $r21 != null goto label4;

     label3:
        $r20 = new java.lang.AssertionError;

        specialinvoke $r20.<java.lang.AssertionError: void <init>()>();

        throw $r20;

     label4:
        $r8 = virtualinvoke $r2.<org.waveprotocol.wave.model.document.util.FocusedPointRange: org.waveprotocol.wave.model.document.util.Point getFocus()>();

        $r9 = virtualinvoke $r8.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getContainer()>();

        $r22 = (com.google.gwt.dom.client.Node) $r9;

        r24 = $r22;

        $z2 = staticinvoke <org.waveprotocol.wave.client.debug.logger.LogLevel: boolean showErrors()>();

        if $z2 == 0 goto label5;

        $r16 = virtualinvoke $r2.<org.waveprotocol.wave.model.document.util.FocusedPointRange: org.waveprotocol.wave.model.document.util.Point getFocus()>();

        $z3 = virtualinvoke $r16.<org.waveprotocol.wave.model.document.util.Point: boolean isInTextNode()>();

        if $z3 != 0 goto label5;

        $r17 = <org.waveprotocol.wave.client.editor.EditorStaticDeps: org.waveprotocol.wave.common.logging.LoggerBundle logger>;

        $r18 = interfaceinvoke $r17.<org.waveprotocol.wave.common.logging.LoggerBundle: org.waveprotocol.wave.common.logging.Logger error()>();

        $r19 = virtualinvoke $r2.<org.waveprotocol.wave.model.document.util.FocusedPointRange: org.waveprotocol.wave.model.document.util.Point getFocus()>();

        interfaceinvoke $r18.<org.waveprotocol.wave.common.logging.Logger: void log(java.lang.String,java.lang.Object)>("selection while typing is expected to be in text node, but is not ", $r19);

        goto label8;

     label5:
        $r10 = virtualinvoke $r2.<org.waveprotocol.wave.model.document.util.FocusedPointRange: org.waveprotocol.wave.model.document.util.Point getFocus()>();

        i2 = virtualinvoke $r10.<org.waveprotocol.wave.model.document.util.Point: int getTextOffset()>();

     label6:
        $z4 = staticinvoke <org.waveprotocol.wave.client.common.util.DomHelper: boolean isTextNode(com.google.gwt.dom.client.Node)>($r22);

        if $z4 == 0 goto label7;

        $r12 = virtualinvoke $r22.<com.google.gwt.dom.client.Node: com.google.gwt.core.client.JavaScriptObject cast()>();

        $r13 = (com.google.gwt.dom.client.Text) $r12;

        $i0 = virtualinvoke $r13.<com.google.gwt.dom.client.Text: int getLength()>();

        if $i0 >= i2 goto label7;

        $r14 = virtualinvoke $r22.<com.google.gwt.dom.client.Node: com.google.gwt.core.client.JavaScriptObject cast()>();

        $r15 = (com.google.gwt.dom.client.Text) $r14;

        $i1 = virtualinvoke $r15.<com.google.gwt.dom.client.Text: int getLength()>();

        i2 = i2 - $i1;

        r24 = virtualinvoke $r22.<com.google.gwt.dom.client.Node: com.google.gwt.dom.client.Node getNextSibling()>();

        goto label6;

     label7:
        $r11 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$Tx inText(java.lang.Object,int)>(r24, i2);

        staticinvoke <org.waveprotocol.wave.client.editor.selection.html.NativeSelectionUtil: void setCaret(org.waveprotocol.wave.model.document.util.Point)>($r11);

     label8:
        return;
    }

    private void applyRepairingOperation(org.waveprotocol.wave.model.document.operation.Nindo)
    {
        java.lang.Throwable $r8;
        org.waveprotocol.wave.client.editor.Responsibility$Manager $r2, $r7, $r10;
        org.waveprotocol.wave.client.editor.EditorImpl $r1, $r3, $r6, $r9;
        org.waveprotocol.wave.client.editor.content.ContentDocument $r5;
        org.waveprotocol.wave.model.document.operation.Nindo r4;
        org.waveprotocol.wave.client.editor.EditorImpl$3 r0;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorImpl$3;

        r4 := @parameter0: org.waveprotocol.wave.model.document.operation.Nindo;

        $r1 = r0.<org.waveprotocol.wave.client.editor.EditorImpl$3: org.waveprotocol.wave.client.editor.EditorImpl this$0>;

        $r2 = staticinvoke <org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.Responsibility$Manager access$700(org.waveprotocol.wave.client.editor.EditorImpl)>($r1);

        interfaceinvoke $r2.<org.waveprotocol.wave.client.editor.Responsibility$Manager: void startDirectSequence()>();

     label1:
        $r3 = r0.<org.waveprotocol.wave.client.editor.EditorImpl$3: org.waveprotocol.wave.client.editor.EditorImpl this$0>;

        $r5 = $r3.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.content.ContentDocument content>;

        virtualinvoke $r5.<org.waveprotocol.wave.client.editor.content.ContentDocument: void sourceNindoWithoutModifyingHtml(org.waveprotocol.wave.model.document.operation.Nindo)>(r4);

     label2:
        $r6 = r0.<org.waveprotocol.wave.client.editor.EditorImpl$3: org.waveprotocol.wave.client.editor.EditorImpl this$0>;

        $r7 = staticinvoke <org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.Responsibility$Manager access$700(org.waveprotocol.wave.client.editor.EditorImpl)>($r6);

        interfaceinvoke $r7.<org.waveprotocol.wave.client.editor.Responsibility$Manager: void endDirectSequence()>();

        goto label5;

     label3:
        $r8 := @caughtexception;

     label4:
        $r9 = r0.<org.waveprotocol.wave.client.editor.EditorImpl$3: org.waveprotocol.wave.client.editor.EditorImpl this$0>;

        $r10 = staticinvoke <org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.Responsibility$Manager access$700(org.waveprotocol.wave.client.editor.EditorImpl)>($r9);

        interfaceinvoke $r10.<org.waveprotocol.wave.client.editor.Responsibility$Manager: void endDirectSequence()>();

        throw $r8;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/waveprotocol/wave/client/editor/EditorImpl;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.waveprotocol.wave.client.editor.EditorImpl$3: boolean $assertionsDisabled> = $z1;

        return;
    }
}
