public class com.hp.hpl.jena.sparql.algebra.TransformUnionQuery extends com.hp.hpl.jena.sparql.algebra.TransformCopy
{
    java.util.Deque currentGraph;

    public static com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.algebra.TransformUnionQuery$Popper $r4;
        java.util.Deque $r3, $r5;
        com.hp.hpl.jena.sparql.algebra.TransformUnionQuery $r0;
        com.hp.hpl.jena.sparql.algebra.TransformUnionQuery$Pusher $r2;
        com.hp.hpl.jena.sparql.algebra.Op r1, $r6;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.Op;

        $r0 = new com.hp.hpl.jena.sparql.algebra.TransformUnionQuery;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.algebra.TransformUnionQuery: void <init>()>();

        $r2 = new com.hp.hpl.jena.sparql.algebra.TransformUnionQuery$Pusher;

        $r3 = $r0.<com.hp.hpl.jena.sparql.algebra.TransformUnionQuery: java.util.Deque currentGraph>;

        specialinvoke $r2.<com.hp.hpl.jena.sparql.algebra.TransformUnionQuery$Pusher: void <init>(java.util.Deque)>($r3);

        $r4 = new com.hp.hpl.jena.sparql.algebra.TransformUnionQuery$Popper;

        $r5 = $r0.<com.hp.hpl.jena.sparql.algebra.TransformUnionQuery: java.util.Deque currentGraph>;

        specialinvoke $r4.<com.hp.hpl.jena.sparql.algebra.TransformUnionQuery$Popper: void <init>(java.util.Deque)>($r5);

        $r6 = staticinvoke <com.hp.hpl.jena.sparql.algebra.Transformer: com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.Transform,com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.algebra.OpVisitor,com.hp.hpl.jena.sparql.algebra.OpVisitor)>($r0, r1, $r2, $r4);

        return $r6;
    }

    public void <init>()
    {
        com.hp.hpl.jena.graph.Node $r2;
        java.util.ArrayDeque $r1;
        java.util.Deque $r3;
        com.hp.hpl.jena.sparql.algebra.TransformUnionQuery r0;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.TransformUnionQuery;

        specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.TransformCopy: void <init>()>();

        $r1 = new java.util.ArrayDeque;

        specialinvoke $r1.<java.util.ArrayDeque: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.algebra.TransformUnionQuery: java.util.Deque currentGraph> = $r1;

        $r3 = r0.<com.hp.hpl.jena.sparql.algebra.TransformUnionQuery: java.util.Deque currentGraph>;

        $r2 = <com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node defaultGraphNodeGenerated>;

        interfaceinvoke $r3.<java.util.Deque: void push(java.lang.Object)>($r2);

        return;
    }

    public com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern)
    {
        com.hp.hpl.jena.sparql.core.BasicPattern $r2;
        com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern r0;
        com.hp.hpl.jena.sparql.algebra.op.OpBGP $r1;
        com.hp.hpl.jena.sparql.algebra.TransformUnionQuery r3;
        com.hp.hpl.jena.sparql.algebra.Op $r4, $r5;
        boolean $z0, $z1;

        r3 := @this: com.hp.hpl.jena.sparql.algebra.TransformUnionQuery;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern: boolean isDefaultGraph()>();

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern: boolean isUnionGraph()>();

        if $z1 == 0 goto label2;

     label1:
        $r1 = new com.hp.hpl.jena.sparql.algebra.op.OpBGP;

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern: com.hp.hpl.jena.sparql.core.BasicPattern getBasicPattern()>();

        specialinvoke $r1.<com.hp.hpl.jena.sparql.algebra.op.OpBGP: void <init>(com.hp.hpl.jena.sparql.core.BasicPattern)>($r2);

        $r4 = specialinvoke r3.<com.hp.hpl.jena.sparql.algebra.TransformUnionQuery: com.hp.hpl.jena.sparql.algebra.Op union(com.hp.hpl.jena.sparql.algebra.op.OpBGP)>($r1);

        return $r4;

     label2:
        $r5 = specialinvoke r3.<com.hp.hpl.jena.sparql.algebra.TransformCopy: com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern)>(r0);

        return $r5;
    }

    public com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpBGP)
    {
        com.hp.hpl.jena.graph.Node r3, $r4, $r7;
        java.util.Deque $r1;
        com.hp.hpl.jena.sparql.algebra.op.OpBGP r5;
        java.lang.Object $r2;
        com.hp.hpl.jena.sparql.algebra.TransformUnionQuery r0;
        com.hp.hpl.jena.sparql.algebra.Op $r6, $r8;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.TransformUnionQuery;

        r5 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpBGP;

        $r1 = r0.<com.hp.hpl.jena.sparql.algebra.TransformUnionQuery: java.util.Deque currentGraph>;

        $r2 = interfaceinvoke $r1.<java.util.Deque: java.lang.Object peek()>();

        r3 = (com.hp.hpl.jena.graph.Node) $r2;

        $r4 = <com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node defaultGraphNodeGenerated>;

        if r3 == $r4 goto label1;

        $r7 = <com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node unionGraph>;

        if r3 != $r7 goto label2;

     label1:
        $r6 = specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.TransformUnionQuery: com.hp.hpl.jena.sparql.algebra.Op union(com.hp.hpl.jena.sparql.algebra.op.OpBGP)>(r5);

        return $r6;

     label2:
        $r8 = specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.TransformCopy: com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpBGP)>(r5);

        return $r8;
    }

    private com.hp.hpl.jena.sparql.algebra.Op union(com.hp.hpl.jena.sparql.algebra.op.OpBGP)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpBGP r2;
        com.hp.hpl.jena.sparql.algebra.op.OpGraph $r1;
        com.hp.hpl.jena.sparql.core.Var r0;
        com.hp.hpl.jena.sparql.algebra.TransformUnionQuery r4;
        com.hp.hpl.jena.sparql.algebra.Op $r3;

        r4 := @this: com.hp.hpl.jena.sparql.algebra.TransformUnionQuery;

        r2 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpBGP;

        r0 = <com.hp.hpl.jena.sparql.core.Var: com.hp.hpl.jena.sparql.core.Var ANON>;

        $r1 = new com.hp.hpl.jena.sparql.algebra.op.OpGraph;

        specialinvoke $r1.<com.hp.hpl.jena.sparql.algebra.op.OpGraph: void <init>(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.algebra.Op)>(r0, r2);

        $r3 = staticinvoke <com.hp.hpl.jena.sparql.algebra.op.OpDistinct: com.hp.hpl.jena.sparql.algebra.Op create(com.hp.hpl.jena.sparql.algebra.Op)>($r1);

        return $r3;
    }

    public com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpGraph, com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpGraph r1;
        com.hp.hpl.jena.sparql.algebra.TransformUnionQuery r0;
        com.hp.hpl.jena.sparql.algebra.Op r2, $r3;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.TransformUnionQuery;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpGraph;

        r2 := @parameter1: com.hp.hpl.jena.sparql.algebra.Op;

        $r3 = specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.TransformCopy: com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpGraph,com.hp.hpl.jena.sparql.algebra.Op)>(r1, r2);

        return $r3;
    }
}
