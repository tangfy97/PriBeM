public class com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveInfGraph extends com.hp.hpl.jena.reasoner.BaseInfGraph
{
    protected com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveEngine transitiveEngine;
    protected com.hp.hpl.jena.reasoner.Finder tbox;
    protected com.hp.hpl.jena.reasoner.Finder dataFind;

    public void <init>(com.hp.hpl.jena.graph.Graph, com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveReasoner)
    {
        com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveReasoner r2;
        com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveInfGraph r0;
        com.hp.hpl.jena.graph.Graph r1;

        r0 := @this: com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveInfGraph;

        r1 := @parameter0: com.hp.hpl.jena.graph.Graph;

        r2 := @parameter1: com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveReasoner;

        specialinvoke r0.<com.hp.hpl.jena.reasoner.BaseInfGraph: void <init>(com.hp.hpl.jena.graph.Graph,com.hp.hpl.jena.reasoner.Reasoner)>(r1, r2);

        r0.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveInfGraph: com.hp.hpl.jena.reasoner.Finder tbox> = null;

        return;
    }

    public synchronized void prepare()
    {
        com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveInfGraph r0;
        com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveReasoner $r2, $r6, $r10;
        com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache $r7, $r8, $r11, $r12;
        boolean $z0;
        com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveEngine $r4, $r15, $r17;
        com.hp.hpl.jena.reasoner.Reasoner $r1, $r5, $r9;
        com.hp.hpl.jena.reasoner.FGraph $r13;
        com.hp.hpl.jena.reasoner.Finder $r3, $r14, $r16;

        r0 := @this: com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveInfGraph;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveInfGraph: boolean isPrepared()>();

        if $z0 == 0 goto label1;

        return;

     label1:
        $r1 = r0.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveInfGraph: com.hp.hpl.jena.reasoner.Reasoner reasoner>;

        $r2 = (com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveReasoner) $r1;

        $r3 = virtualinvoke $r2.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveReasoner: com.hp.hpl.jena.reasoner.Finder getTbox()>();

        r0.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveInfGraph: com.hp.hpl.jena.reasoner.Finder tbox> = $r3;

        $r4 = new com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveEngine;

        $r5 = r0.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveInfGraph: com.hp.hpl.jena.reasoner.Reasoner reasoner>;

        $r6 = (com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveReasoner) $r5;

        $r7 = virtualinvoke $r6.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveReasoner: com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache getSubClassCache()>();

        $r8 = virtualinvoke $r7.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache: com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache deepCopy()>();

        $r9 = r0.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveInfGraph: com.hp.hpl.jena.reasoner.Reasoner reasoner>;

        $r10 = (com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveReasoner) $r9;

        $r11 = virtualinvoke $r10.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveReasoner: com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache getSubPropertyCache()>();

        $r12 = virtualinvoke $r11.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache: com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache deepCopy()>();

        specialinvoke $r4.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveEngine: void <init>(com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache,com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache)>($r8, $r12);

        r0.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveInfGraph: com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveEngine transitiveEngine> = $r4;

        $r15 = r0.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveInfGraph: com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveEngine transitiveEngine>;

        $r14 = r0.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveInfGraph: com.hp.hpl.jena.reasoner.Finder tbox>;

        $r13 = r0.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveInfGraph: com.hp.hpl.jena.reasoner.FGraph fdata>;

        $r16 = virtualinvoke $r15.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveEngine: com.hp.hpl.jena.reasoner.Finder insert(com.hp.hpl.jena.reasoner.Finder,com.hp.hpl.jena.reasoner.FGraph)>($r14, $r13);

        r0.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveInfGraph: com.hp.hpl.jena.reasoner.Finder dataFind> = $r16;

        $r17 = r0.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveInfGraph: com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveEngine transitiveEngine>;

        virtualinvoke $r17.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveEngine: void setCaching(boolean,boolean)>(1, 1);

        virtualinvoke r0.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveInfGraph: void setPreparedState(boolean)>(1);

        return;
    }

    public com.hp.hpl.jena.graph.Graph getSchemaGraph()
    {
        com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveInfGraph r0;
        com.hp.hpl.jena.reasoner.FGraph $r5;
        com.hp.hpl.jena.reasoner.Finder $r1, $r2, $r4;
        com.hp.hpl.jena.reasoner.ReasonerException $r3;
        com.hp.hpl.jena.graph.Graph $r6;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveInfGraph;

        $r1 = r0.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveInfGraph: com.hp.hpl.jena.reasoner.Finder tbox>;

        if $r1 != null goto label1;

        return null;

     label1:
        $r2 = r0.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveInfGraph: com.hp.hpl.jena.reasoner.Finder tbox>;

        $z0 = $r2 instanceof com.hp.hpl.jena.reasoner.FGraph;

        if $z0 == 0 goto label2;

        $r4 = r0.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveInfGraph: com.hp.hpl.jena.reasoner.Finder tbox>;

        $r5 = (com.hp.hpl.jena.reasoner.FGraph) $r4;

        $r6 = virtualinvoke $r5.<com.hp.hpl.jena.reasoner.FGraph: com.hp.hpl.jena.graph.Graph getGraph()>();

        return $r6;

     label2:
        $r3 = new com.hp.hpl.jena.reasoner.ReasonerException;

        specialinvoke $r3.<com.hp.hpl.jena.reasoner.ReasonerException: void <init>(java.lang.String)>("Transitive reasoner got into an illegal state");

        throw $r3;
    }

    public com.hp.hpl.jena.util.iterator.ExtendedIterator findWithContinuation(com.hp.hpl.jena.reasoner.TriplePattern, com.hp.hpl.jena.reasoner.Finder)
    {
        com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveEngine $r4;
        com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveInfGraph r0;
        com.hp.hpl.jena.util.iterator.UniqueFilter $r8;
        com.hp.hpl.jena.reasoner.Finder r2, $r3, $r5, $r6;
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r7, $r9;
        com.hp.hpl.jena.reasoner.TriplePattern r1;

        r0 := @this: com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveInfGraph;

        r1 := @parameter0: com.hp.hpl.jena.reasoner.TriplePattern;

        r2 := @parameter1: com.hp.hpl.jena.reasoner.Finder;

        virtualinvoke r0.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveInfGraph: void checkOpen()>();

        virtualinvoke r0.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveInfGraph: void requirePrepared()>();

        $r4 = r0.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveInfGraph: com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveEngine transitiveEngine>;

        $r3 = r0.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveInfGraph: com.hp.hpl.jena.reasoner.Finder tbox>;

        $r5 = staticinvoke <com.hp.hpl.jena.reasoner.FinderUtil: com.hp.hpl.jena.reasoner.Finder cascade(com.hp.hpl.jena.reasoner.Finder,com.hp.hpl.jena.reasoner.Finder)>($r3, r2);

        $r6 = virtualinvoke $r4.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveEngine: com.hp.hpl.jena.reasoner.Finder getFinder(com.hp.hpl.jena.reasoner.TriplePattern,com.hp.hpl.jena.reasoner.Finder)>(r1, $r5);

        $r7 = interfaceinvoke $r6.<com.hp.hpl.jena.reasoner.Finder: com.hp.hpl.jena.util.iterator.ExtendedIterator find(com.hp.hpl.jena.reasoner.TriplePattern)>(r1);

        $r8 = new com.hp.hpl.jena.util.iterator.UniqueFilter;

        specialinvoke $r8.<com.hp.hpl.jena.util.iterator.UniqueFilter: void <init>()>();

        $r9 = interfaceinvoke $r7.<com.hp.hpl.jena.util.iterator.ExtendedIterator: com.hp.hpl.jena.util.iterator.ExtendedIterator filterKeep(com.hp.hpl.jena.util.iterator.Filter)>($r8);

        return $r9;
    }

    public com.hp.hpl.jena.util.iterator.ExtendedIterator graphBaseFind(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.reasoner.FGraph $r5;
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r6;
        com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveInfGraph r0;
        com.hp.hpl.jena.reasoner.TriplePattern $r1;
        com.hp.hpl.jena.graph.Node r2, r3, r4;

        r0 := @this: com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveInfGraph;

        r2 := @parameter0: com.hp.hpl.jena.graph.Node;

        r3 := @parameter1: com.hp.hpl.jena.graph.Node;

        r4 := @parameter2: com.hp.hpl.jena.graph.Node;

        $r1 = new com.hp.hpl.jena.reasoner.TriplePattern;

        specialinvoke $r1.<com.hp.hpl.jena.reasoner.TriplePattern: void <init>(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r2, r3, r4);

        $r5 = r0.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveInfGraph: com.hp.hpl.jena.reasoner.FGraph fdata>;

        $r6 = virtualinvoke r0.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveInfGraph: com.hp.hpl.jena.util.iterator.ExtendedIterator findWithContinuation(com.hp.hpl.jena.reasoner.TriplePattern,com.hp.hpl.jena.reasoner.Finder)>($r1, $r5);

        return $r6;
    }

    public com.hp.hpl.jena.util.iterator.ExtendedIterator find(com.hp.hpl.jena.reasoner.TriplePattern)
    {
        com.hp.hpl.jena.reasoner.FGraph $r2;
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r3;
        com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveInfGraph r0;
        com.hp.hpl.jena.reasoner.TriplePattern r1;

        r0 := @this: com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveInfGraph;

        r1 := @parameter0: com.hp.hpl.jena.reasoner.TriplePattern;

        $r2 = r0.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveInfGraph: com.hp.hpl.jena.reasoner.FGraph fdata>;

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveInfGraph: com.hp.hpl.jena.util.iterator.ExtendedIterator findWithContinuation(com.hp.hpl.jena.reasoner.TriplePattern,com.hp.hpl.jena.reasoner.Finder)>(r1, $r2);

        return $r3;
    }

    public synchronized void performAdd(com.hp.hpl.jena.graph.Triple)
    {
        com.hp.hpl.jena.reasoner.FGraph $r1;
        com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveEngine $r4;
        com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveInfGraph r0;
        com.hp.hpl.jena.graph.Graph $r2;
        com.hp.hpl.jena.graph.Triple r3;

        r0 := @this: com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveInfGraph;

        r3 := @parameter0: com.hp.hpl.jena.graph.Triple;

        virtualinvoke r0.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveInfGraph: void requirePrepared()>();

        $r1 = r0.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveInfGraph: com.hp.hpl.jena.reasoner.FGraph fdata>;

        $r2 = virtualinvoke $r1.<com.hp.hpl.jena.reasoner.FGraph: com.hp.hpl.jena.graph.Graph getGraph()>();

        interfaceinvoke $r2.<com.hp.hpl.jena.graph.Graph: void add(com.hp.hpl.jena.graph.Triple)>(r3);

        $r4 = r0.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveInfGraph: com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveEngine transitiveEngine>;

        virtualinvoke $r4.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveEngine: boolean add(com.hp.hpl.jena.graph.Triple)>(r3);

        return;
    }

    public synchronized void performDelete(com.hp.hpl.jena.graph.Triple)
    {
        com.hp.hpl.jena.reasoner.FGraph $r1;
        com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveEngine $r4;
        com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveInfGraph r0;
        com.hp.hpl.jena.graph.Graph $r2;
        com.hp.hpl.jena.graph.Triple r3;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveInfGraph;

        r3 := @parameter0: com.hp.hpl.jena.graph.Triple;

        $r1 = r0.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveInfGraph: com.hp.hpl.jena.reasoner.FGraph fdata>;

        $r2 = virtualinvoke $r1.<com.hp.hpl.jena.reasoner.FGraph: com.hp.hpl.jena.graph.Graph getGraph()>();

        interfaceinvoke $r2.<com.hp.hpl.jena.graph.Graph: void delete(com.hp.hpl.jena.graph.Triple)>(r3);

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveInfGraph: boolean isPrepared()>();

        if $z0 == 0 goto label1;

        $r4 = r0.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveInfGraph: com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveEngine transitiveEngine>;

        virtualinvoke $r4.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveEngine: boolean delete(com.hp.hpl.jena.graph.Triple)>(r3);

     label1:
        return;
    }

    public com.hp.hpl.jena.graph.Capabilities getCapabilities()
    {
        com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveInfGraph r0;
        com.hp.hpl.jena.reasoner.BaseInfGraph$InfFindSafeCapabilities $r3;
        com.hp.hpl.jena.graph.Capabilities $r1, $r2;

        r0 := @this: com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveInfGraph;

        $r1 = r0.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveInfGraph: com.hp.hpl.jena.graph.Capabilities capabilities>;

        if $r1 != null goto label1;

        $r3 = new com.hp.hpl.jena.reasoner.BaseInfGraph$InfFindSafeCapabilities;

        specialinvoke $r3.<com.hp.hpl.jena.reasoner.BaseInfGraph$InfFindSafeCapabilities: void <init>()>();

        r0.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveInfGraph: com.hp.hpl.jena.graph.Capabilities capabilities> = $r3;

     label1:
        $r2 = r0.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveInfGraph: com.hp.hpl.jena.graph.Capabilities capabilities>;

        return $r2;
    }
}
