public final class org.wiztools.commons.DateUtil extends java.lang.Object
{
    private static final java.text.SimpleDateFormat SDF_ISO_DATE;
    private static final java.text.SimpleDateFormat SDF_ISO_TIME;
    private static final java.util.regex.Pattern p1;
    private static final java.text.SimpleDateFormat sdf_p1;
    private static final java.util.regex.Pattern p2;
    private static final java.text.SimpleDateFormat sdf_p2;
    private static final java.util.regex.Pattern p3;
    private static final java.text.SimpleDateFormat sdf_p3;
    private static final java.util.regex.Pattern p4;
    private static final java.text.SimpleDateFormat sdf_p4;
    private static final java.util.regex.Pattern p5;
    private static final java.text.SimpleDateFormat sdf_p5;
    private static final java.util.regex.Pattern p6;
    private static final java.text.SimpleDateFormat sdf_p6;
    private static final java.util.regex.Pattern p7;
    private static final java.text.SimpleDateFormat sdf_p7;

    public void <init>()
    {
        org.wiztools.commons.DateUtil r0;

        r0 := @this: org.wiztools.commons.DateUtil;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.String getAsISODateString(java.util.Date)
    {
        java.text.SimpleDateFormat $r1;
        java.lang.String $r2;
        java.util.Date r0;

        r0 := @parameter0: java.util.Date;

        $r1 = <org.wiztools.commons.DateUtil: java.text.SimpleDateFormat SDF_ISO_DATE>;

        $r2 = virtualinvoke $r1.<java.text.SimpleDateFormat: java.lang.String format(java.util.Date)>(r0);

        return $r2;
    }

    public static java.lang.String getAsISODateTimeString(java.util.Date)
    {
        java.util.Date r1;
        java.text.SimpleDateFormat $r2, $r6;
        java.lang.StringBuilder $r0, $r4, $r5, $r8;
        java.lang.String $r3, $r7, $r9;

        r1 := @parameter0: java.util.Date;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = <org.wiztools.commons.DateUtil: java.text.SimpleDateFormat SDF_ISO_DATE>;

        $r3 = virtualinvoke $r2.<java.text.SimpleDateFormat: java.lang.String format(java.util.Date)>(r1);

        $r4 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("T");

        $r6 = <org.wiztools.commons.DateUtil: java.text.SimpleDateFormat SDF_ISO_TIME>;

        $r7 = virtualinvoke $r6.<java.text.SimpleDateFormat: java.lang.String format(java.util.Date)>(r1);

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r9;
    }

    public static java.util.Date getFromISODateString(java.lang.String)
    {
        java.util.Date $r3;
        java.text.SimpleDateFormat $r0;
        java.lang.Object $r2;
        java.lang.String r1;
        java.text.ParseException $r4;
        java.lang.IllegalArgumentException $r5;

        r1 := @parameter0: java.lang.String;

     label1:
        $r0 = new java.text.SimpleDateFormat;

        specialinvoke $r0.<java.text.SimpleDateFormat: void <init>(java.lang.String)>("yyyy-MM-dd");

        $r2 = virtualinvoke $r0.<java.text.Format: java.lang.Object parseObject(java.lang.String)>(r1);

        $r3 = (java.util.Date) $r2;

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.Throwable)>($r4);

        throw $r5;

        catch java.text.ParseException from label1 to label2 with label3;
    }

    public static boolean isDateBetween(java.util.Date, java.util.Date, java.util.Date)
    {
        java.util.Date r0, r1, r2;
        int $i0, $i1, $i2;
        java.lang.IllegalArgumentException $r3;

        r0 := @parameter0: java.util.Date;

        r1 := @parameter1: java.util.Date;

        r2 := @parameter2: java.util.Date;

        $i0 = virtualinvoke r0.<java.util.Date: int compareTo(java.util.Date)>(r1);

        if $i0 <= 0 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Start date cannot be greater than end date!");

        throw $r3;

     label1:
        $i1 = virtualinvoke r2.<java.util.Date: int compareTo(java.util.Date)>(r0);

        if $i1 < 0 goto label2;

        $i2 = virtualinvoke r2.<java.util.Date: int compareTo(java.util.Date)>(r1);

        if $i2 > 0 goto label2;

        return 1;

     label2:
        return 0;
    }

    private static java.util.Date getDatePlus(int, java.util.Date, int)
    {
        java.util.Calendar $r0;
        java.util.Date r1, $r2;
        int i0, i1;

        i0 := @parameter0: int;

        r1 := @parameter1: java.util.Date;

        i1 := @parameter2: int;

        $r0 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        virtualinvoke $r0.<java.util.Calendar: void clear()>();

        virtualinvoke $r0.<java.util.Calendar: void setTime(java.util.Date)>(r1);

        virtualinvoke $r0.<java.util.Calendar: void add(int,int)>(i0, i1);

        $r2 = virtualinvoke $r0.<java.util.Calendar: java.util.Date getTime()>();

        return $r2;
    }

    public static java.util.Date getDatePlusDays(java.util.Date, int)
    {
        int i0;
        java.util.Date r0, $r1;

        r0 := @parameter0: java.util.Date;

        i0 := @parameter1: int;

        $r1 = staticinvoke <org.wiztools.commons.DateUtil: java.util.Date getDatePlus(int,java.util.Date,int)>(5, r0, i0);

        return $r1;
    }

    public static java.util.Date getDatePlusMonths(java.util.Date, int)
    {
        int i0;
        java.util.Date r0, $r1;

        r0 := @parameter0: java.util.Date;

        i0 := @parameter1: int;

        $r1 = staticinvoke <org.wiztools.commons.DateUtil: java.util.Date getDatePlus(int,java.util.Date,int)>(2, r0, i0);

        return $r1;
    }

    public static java.util.Date getDatePlusYears(java.util.Date, int)
    {
        int i0;
        java.util.Date r0, $r1;

        r0 := @parameter0: java.util.Date;

        i0 := @parameter1: int;

        $r1 = staticinvoke <org.wiztools.commons.DateUtil: java.util.Date getDatePlus(int,java.util.Date,int)>(1, r0, i0);

        return $r1;
    }

    public static java.util.Date getDateFromString(java.lang.String) throws java.text.ParseException
    {
        java.util.Date $r20;
        java.text.SimpleDateFormat r21;
        java.util.regex.Matcher $r2, $r4, $r6, $r8, $r10, $r12, $r14;
        java.lang.String r0, $r19;
        java.text.ParseException $r15;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.lang.StringBuilder $r16, $r17, $r18;
        java.util.regex.Pattern $r1, $r3, $r5, $r7, $r9, $r11, $r13;

        r0 := @parameter0: java.lang.String;

        r21 = null;

        $r1 = <org.wiztools.commons.DateUtil: java.util.regex.Pattern p1>;

        $r2 = virtualinvoke $r1.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r0);

        $z0 = virtualinvoke $r2.<java.util.regex.Matcher: boolean matches()>();

        if $z0 == 0 goto label1;

        r21 = <org.wiztools.commons.DateUtil: java.text.SimpleDateFormat sdf_p1>;

        goto label7;

     label1:
        $r3 = <org.wiztools.commons.DateUtil: java.util.regex.Pattern p2>;

        $r4 = virtualinvoke $r3.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r0);

        $z1 = virtualinvoke $r4.<java.util.regex.Matcher: boolean matches()>();

        if $z1 == 0 goto label2;

        r21 = <org.wiztools.commons.DateUtil: java.text.SimpleDateFormat sdf_p2>;

        goto label7;

     label2:
        $r5 = <org.wiztools.commons.DateUtil: java.util.regex.Pattern p3>;

        $r6 = virtualinvoke $r5.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r0);

        $z2 = virtualinvoke $r6.<java.util.regex.Matcher: boolean matches()>();

        if $z2 == 0 goto label3;

        r21 = <org.wiztools.commons.DateUtil: java.text.SimpleDateFormat sdf_p3>;

        goto label7;

     label3:
        $r7 = <org.wiztools.commons.DateUtil: java.util.regex.Pattern p4>;

        $r8 = virtualinvoke $r7.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r0);

        $z3 = virtualinvoke $r8.<java.util.regex.Matcher: boolean matches()>();

        if $z3 == 0 goto label4;

        r21 = <org.wiztools.commons.DateUtil: java.text.SimpleDateFormat sdf_p4>;

        goto label7;

     label4:
        $r9 = <org.wiztools.commons.DateUtil: java.util.regex.Pattern p5>;

        $r10 = virtualinvoke $r9.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r0);

        $z4 = virtualinvoke $r10.<java.util.regex.Matcher: boolean matches()>();

        if $z4 == 0 goto label5;

        r21 = <org.wiztools.commons.DateUtil: java.text.SimpleDateFormat sdf_p5>;

        goto label7;

     label5:
        $r11 = <org.wiztools.commons.DateUtil: java.util.regex.Pattern p6>;

        $r12 = virtualinvoke $r11.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r0);

        $z5 = virtualinvoke $r12.<java.util.regex.Matcher: boolean matches()>();

        if $z5 == 0 goto label6;

        r21 = <org.wiztools.commons.DateUtil: java.text.SimpleDateFormat sdf_p6>;

        goto label7;

     label6:
        $r13 = <org.wiztools.commons.DateUtil: java.util.regex.Pattern p7>;

        $r14 = virtualinvoke $r13.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r0);

        $z6 = virtualinvoke $r14.<java.util.regex.Matcher: boolean matches()>();

        if $z6 == 0 goto label7;

        r21 = <org.wiztools.commons.DateUtil: java.text.SimpleDateFormat sdf_p7>;

     label7:
        if r21 == null goto label8;

        $r20 = virtualinvoke r21.<java.text.SimpleDateFormat: java.util.Date parse(java.lang.String)>(r0);

        return $r20;

     label8:
        $r15 = new java.text.ParseException;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not match any defined pattern!");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r15.<java.text.ParseException: void <init>(java.lang.String,int)>($r19, 0);

        throw $r15;
    }

    public static java.util.Date now()
    {
        java.util.Date $r0;

        $r0 = new java.util.Date;

        specialinvoke $r0.<java.util.Date: void <init>()>();

        return $r0;
    }

    static void <clinit>()
    {
        java.text.SimpleDateFormat $r0, $r1, $r3, $r5, $r7, $r9, $r11, $r13, $r15;
        java.util.regex.Pattern $r2, $r4, $r6, $r8, $r10, $r12, $r14;

        $r0 = new java.text.SimpleDateFormat;

        specialinvoke $r0.<java.text.SimpleDateFormat: void <init>(java.lang.String)>("yyyy-MM-dd");

        <org.wiztools.commons.DateUtil: java.text.SimpleDateFormat SDF_ISO_DATE> = $r0;

        $r1 = new java.text.SimpleDateFormat;

        specialinvoke $r1.<java.text.SimpleDateFormat: void <init>(java.lang.String)>("HH:mm:ss");

        <org.wiztools.commons.DateUtil: java.text.SimpleDateFormat SDF_ISO_TIME> = $r1;

        $r2 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("[0-9]{1,2}-[0-9]{1,2}-[0-9]{2}");

        <org.wiztools.commons.DateUtil: java.util.regex.Pattern p1> = $r2;

        $r3 = new java.text.SimpleDateFormat;

        specialinvoke $r3.<java.text.SimpleDateFormat: void <init>(java.lang.String)>("dd-MM-yy");

        <org.wiztools.commons.DateUtil: java.text.SimpleDateFormat sdf_p1> = $r3;

        $r4 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("[0-9]{1,2}-[0-9]{1,2}-[0-9]{4}");

        <org.wiztools.commons.DateUtil: java.util.regex.Pattern p2> = $r4;

        $r5 = new java.text.SimpleDateFormat;

        specialinvoke $r5.<java.text.SimpleDateFormat: void <init>(java.lang.String)>("dd-MM-yyyy");

        <org.wiztools.commons.DateUtil: java.text.SimpleDateFormat sdf_p2> = $r5;

        $r6 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("[0-9]{1,2}/[0-9]{1,2}/[0-9]{2}");

        <org.wiztools.commons.DateUtil: java.util.regex.Pattern p3> = $r6;

        $r7 = new java.text.SimpleDateFormat;

        specialinvoke $r7.<java.text.SimpleDateFormat: void <init>(java.lang.String)>("dd/MM/yy");

        <org.wiztools.commons.DateUtil: java.text.SimpleDateFormat sdf_p3> = $r7;

        $r8 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("[0-9]{1,2}/[0-9]{1,2}/[0-9]{4}");

        <org.wiztools.commons.DateUtil: java.util.regex.Pattern p4> = $r8;

        $r9 = new java.text.SimpleDateFormat;

        specialinvoke $r9.<java.text.SimpleDateFormat: void <init>(java.lang.String)>("dd/MM/yyyy");

        <org.wiztools.commons.DateUtil: java.text.SimpleDateFormat sdf_p4> = $r9;

        $r10 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("[A-Za-z]{3} [0-9]{1,2}, [0-9]{4}");

        <org.wiztools.commons.DateUtil: java.util.regex.Pattern p5> = $r10;

        $r11 = new java.text.SimpleDateFormat;

        specialinvoke $r11.<java.text.SimpleDateFormat: void <init>(java.lang.String)>("MMM dd, yyyy");

        <org.wiztools.commons.DateUtil: java.text.SimpleDateFormat sdf_p5> = $r11;

        $r12 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("[A-Za-z]{3} [0-9]{1,2} [0-9]{4}");

        <org.wiztools.commons.DateUtil: java.util.regex.Pattern p6> = $r12;

        $r13 = new java.text.SimpleDateFormat;

        specialinvoke $r13.<java.text.SimpleDateFormat: void <init>(java.lang.String)>("MMM dd yyyy");

        <org.wiztools.commons.DateUtil: java.text.SimpleDateFormat sdf_p6> = $r13;

        $r14 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("[0-9]{4}-[0-9]{2}-[0-9]{2}");

        <org.wiztools.commons.DateUtil: java.util.regex.Pattern p7> = $r14;

        $r15 = new java.text.SimpleDateFormat;

        specialinvoke $r15.<java.text.SimpleDateFormat: void <init>(java.lang.String)>("yyyy-MM-dd");

        <org.wiztools.commons.DateUtil: java.text.SimpleDateFormat sdf_p7> = $r15;

        return;
    }
}
