public class com.hp.hpl.jena.sparql.algebra.op.OpProcedure extends com.hp.hpl.jena.sparql.algebra.op.Op1
{
    private com.hp.hpl.jena.graph.Node procId;
    private com.hp.hpl.jena.sparql.expr.ExprList args;

    public void <init>(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.sparql.expr.ExprList, com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.expr.ExprList r2;
        com.hp.hpl.jena.graph.Node r3;
        com.hp.hpl.jena.sparql.algebra.op.OpProcedure r0;
        com.hp.hpl.jena.sparql.algebra.Op r1;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.op.OpProcedure;

        r3 := @parameter0: com.hp.hpl.jena.graph.Node;

        r2 := @parameter1: com.hp.hpl.jena.sparql.expr.ExprList;

        r1 := @parameter2: com.hp.hpl.jena.sparql.algebra.Op;

        specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.Op1: void <init>(com.hp.hpl.jena.sparql.algebra.Op)>(r1);

        r0.<com.hp.hpl.jena.sparql.algebra.op.OpProcedure: com.hp.hpl.jena.sparql.expr.ExprList args> = null;

        r0.<com.hp.hpl.jena.sparql.algebra.op.OpProcedure: com.hp.hpl.jena.sparql.expr.ExprList args> = r2;

        r0.<com.hp.hpl.jena.sparql.algebra.op.OpProcedure: com.hp.hpl.jena.graph.Node procId> = r3;

        return;
    }

    public void <init>(java.lang.String, com.hp.hpl.jena.sparql.expr.ExprList, com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.expr.ExprList r3;
        java.lang.String r1;
        com.hp.hpl.jena.graph.Node $r2;
        com.hp.hpl.jena.sparql.algebra.op.OpProcedure r0;
        com.hp.hpl.jena.sparql.algebra.Op r4;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.op.OpProcedure;

        r1 := @parameter0: java.lang.String;

        r3 := @parameter1: com.hp.hpl.jena.sparql.expr.ExprList;

        r4 := @parameter2: com.hp.hpl.jena.sparql.algebra.Op;

        $r2 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createURI(java.lang.String)>(r1);

        specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpProcedure: void <init>(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.expr.ExprList,com.hp.hpl.jena.sparql.algebra.Op)>($r2, r3, r4);

        return;
    }

    public java.lang.String getName()
    {
        com.hp.hpl.jena.sparql.algebra.op.OpProcedure r0;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.op.OpProcedure;

        return "proc";
    }

    public boolean equalTo(com.hp.hpl.jena.sparql.algebra.Op, com.hp.hpl.jena.sparql.util.NodeIsomorphismMap)
    {
        com.hp.hpl.jena.graph.Node $r3, $r4;
        com.hp.hpl.jena.sparql.algebra.op.OpProcedure r1, r2;
        com.hp.hpl.jena.sparql.expr.ExprList $r5, $r6;
        com.hp.hpl.jena.sparql.util.NodeIsomorphismMap r9;
        com.hp.hpl.jena.sparql.algebra.Op r0, $r7, $r8;
        boolean $z0, $z1, $z2, $z3;

        r1 := @this: com.hp.hpl.jena.sparql.algebra.op.OpProcedure;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.Op;

        r9 := @parameter1: com.hp.hpl.jena.sparql.util.NodeIsomorphismMap;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = r0 instanceof com.hp.hpl.jena.sparql.algebra.op.OpProcedure;

        if $z0 != 0 goto label2;

        return 0;

     label2:
        r2 = (com.hp.hpl.jena.sparql.algebra.op.OpProcedure) r0;

        $r4 = r1.<com.hp.hpl.jena.sparql.algebra.op.OpProcedure: com.hp.hpl.jena.graph.Node procId>;

        $r3 = r2.<com.hp.hpl.jena.sparql.algebra.op.OpProcedure: com.hp.hpl.jena.graph.Node procId>;

        $z1 = virtualinvoke $r4.<com.hp.hpl.jena.graph.Node: boolean equals(java.lang.Object)>($r3);

        if $z1 != 0 goto label3;

        return 0;

     label3:
        $r6 = r1.<com.hp.hpl.jena.sparql.algebra.op.OpProcedure: com.hp.hpl.jena.sparql.expr.ExprList args>;

        $r5 = r2.<com.hp.hpl.jena.sparql.algebra.op.OpProcedure: com.hp.hpl.jena.sparql.expr.ExprList args>;

        $z2 = virtualinvoke $r6.<com.hp.hpl.jena.sparql.expr.ExprList: boolean equals(java.lang.Object)>($r5);

        if $z2 != 0 goto label4;

        return 0;

     label4:
        $r7 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpProcedure: com.hp.hpl.jena.sparql.algebra.Op getSubOp()>();

        $r8 = virtualinvoke r2.<com.hp.hpl.jena.sparql.algebra.op.OpProcedure: com.hp.hpl.jena.sparql.algebra.Op getSubOp()>();

        $z3 = interfaceinvoke $r7.<com.hp.hpl.jena.sparql.algebra.Op: boolean equalTo(com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.util.NodeIsomorphismMap)>($r8, r9);

        return $z3;
    }

    public int hashCode()
    {
        com.hp.hpl.jena.graph.Node $r1;
        com.hp.hpl.jena.sparql.algebra.op.OpProcedure r0;
        com.hp.hpl.jena.sparql.expr.ExprList $r2;
        int $i0, $i1, $i2, i3, i4;
        com.hp.hpl.jena.sparql.algebra.Op $r3;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.op.OpProcedure;

        $r1 = r0.<com.hp.hpl.jena.sparql.algebra.op.OpProcedure: com.hp.hpl.jena.graph.Node procId>;

        $i0 = virtualinvoke $r1.<com.hp.hpl.jena.graph.Node: int hashCode()>();

        $r2 = r0.<com.hp.hpl.jena.sparql.algebra.op.OpProcedure: com.hp.hpl.jena.sparql.expr.ExprList args>;

        $i1 = virtualinvoke $r2.<com.hp.hpl.jena.sparql.expr.ExprList: int hashCode()>();

        i3 = $i0 ^ $i1;

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpProcedure: com.hp.hpl.jena.sparql.algebra.Op getSubOp()>();

        $i2 = virtualinvoke $r3.<java.lang.Object: int hashCode()>();

        i4 = i3 ^ $i2;

        return i4;
    }

    public void visit(com.hp.hpl.jena.sparql.algebra.OpVisitor)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpProcedure r1;
        com.hp.hpl.jena.sparql.algebra.OpVisitor r0;

        r1 := @this: com.hp.hpl.jena.sparql.algebra.op.OpProcedure;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.OpVisitor;

        interfaceinvoke r0.<com.hp.hpl.jena.sparql.algebra.OpVisitor: void visit(com.hp.hpl.jena.sparql.algebra.op.OpProcedure)>(r1);

        return;
    }

    public com.hp.hpl.jena.sparql.algebra.Op apply(com.hp.hpl.jena.sparql.algebra.Transform, com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.algebra.Transform r0;
        com.hp.hpl.jena.sparql.algebra.op.OpProcedure r1;
        com.hp.hpl.jena.sparql.algebra.Op r2, $r3;

        r1 := @this: com.hp.hpl.jena.sparql.algebra.op.OpProcedure;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.Transform;

        r2 := @parameter1: com.hp.hpl.jena.sparql.algebra.Op;

        $r3 = interfaceinvoke r0.<com.hp.hpl.jena.sparql.algebra.Transform: com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpProcedure,com.hp.hpl.jena.sparql.algebra.Op)>(r1, r2);

        return $r3;
    }

    public com.hp.hpl.jena.sparql.algebra.op.Op1 copy(com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.expr.ExprList $r3;
        com.hp.hpl.jena.graph.Node $r2;
        com.hp.hpl.jena.sparql.algebra.op.OpProcedure $r0, r1;
        com.hp.hpl.jena.sparql.algebra.Op $r4, r5;

        r1 := @this: com.hp.hpl.jena.sparql.algebra.op.OpProcedure;

        r5 := @parameter0: com.hp.hpl.jena.sparql.algebra.Op;

        $r0 = new com.hp.hpl.jena.sparql.algebra.op.OpProcedure;

        $r2 = r1.<com.hp.hpl.jena.sparql.algebra.op.OpProcedure: com.hp.hpl.jena.graph.Node procId>;

        $r3 = r1.<com.hp.hpl.jena.sparql.algebra.op.OpProcedure: com.hp.hpl.jena.sparql.expr.ExprList args>;

        $r4 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpProcedure: com.hp.hpl.jena.sparql.algebra.Op getSubOp()>();

        specialinvoke $r0.<com.hp.hpl.jena.sparql.algebra.op.OpProcedure: void <init>(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.expr.ExprList,com.hp.hpl.jena.sparql.algebra.Op)>($r2, $r3, $r4);

        return $r0;
    }

    public com.hp.hpl.jena.graph.Node getProcId()
    {
        com.hp.hpl.jena.graph.Node $r1;
        com.hp.hpl.jena.sparql.algebra.op.OpProcedure r0;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.op.OpProcedure;

        $r1 = r0.<com.hp.hpl.jena.sparql.algebra.op.OpProcedure: com.hp.hpl.jena.graph.Node procId>;

        return $r1;
    }

    public java.lang.String getURI()
    {
        com.hp.hpl.jena.graph.Node $r1;
        java.lang.String $r2;
        com.hp.hpl.jena.sparql.algebra.op.OpProcedure r0;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.op.OpProcedure;

        $r1 = r0.<com.hp.hpl.jena.sparql.algebra.op.OpProcedure: com.hp.hpl.jena.graph.Node procId>;

        $r2 = virtualinvoke $r1.<com.hp.hpl.jena.graph.Node: java.lang.String getURI()>();

        return $r2;
    }

    public com.hp.hpl.jena.sparql.expr.ExprList getArgs()
    {
        com.hp.hpl.jena.sparql.algebra.op.OpProcedure r0;
        com.hp.hpl.jena.sparql.expr.ExprList $r1;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.op.OpProcedure;

        $r1 = r0.<com.hp.hpl.jena.sparql.algebra.op.OpProcedure: com.hp.hpl.jena.sparql.expr.ExprList args>;

        return $r1;
    }
}
