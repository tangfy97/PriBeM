class org.jivesoftware.whack.SocketReadThread extends java.lang.Thread
{
    private org.jivesoftware.whack.ExternalComponent component;
    private boolean shutdown;
    org.dom4j.io.XPPPacketReader reader;

    public void <init>(org.jivesoftware.whack.ExternalComponent, org.dom4j.io.XPPPacketReader)
    {
        org.dom4j.io.XPPPacketReader r2;
        org.jivesoftware.whack.SocketReadThread r0;
        org.jivesoftware.whack.ExternalComponent r1;

        r0 := @this: org.jivesoftware.whack.SocketReadThread;

        r1 := @parameter0: org.jivesoftware.whack.ExternalComponent;

        r2 := @parameter1: org.dom4j.io.XPPPacketReader;

        specialinvoke r0.<java.lang.Thread: void <init>(java.lang.String)>("Component socket reader");

        r0.<org.jivesoftware.whack.SocketReadThread: boolean shutdown> = 0;

        r0.<org.jivesoftware.whack.SocketReadThread: org.dom4j.io.XPPPacketReader reader> = null;

        r0.<org.jivesoftware.whack.SocketReadThread: org.jivesoftware.whack.ExternalComponent component> = r1;

        r0.<org.jivesoftware.whack.SocketReadThread: org.dom4j.io.XPPPacketReader reader> = r2;

        return;
    }

    public void run()
    {
        org.jivesoftware.whack.ExternalComponentManager $r3, $r7, $r11;
        java.net.SocketException $r9;
        org.xmpp.component.Log $r4, $r8, $r12;
        org.jivesoftware.whack.SocketReadThread r0;
        boolean $z0;
        org.jivesoftware.whack.ExternalComponent $r2, $r6, $r10, $r13;
        java.io.EOFException $r14;
        java.lang.Exception $r1;
        org.xmlpull.v1.XmlPullParserException $r5;

        r0 := @this: org.jivesoftware.whack.SocketReadThread;

     label1:
        specialinvoke r0.<org.jivesoftware.whack.SocketReadThread: void readStream()>();

     label2:
        goto label8;

     label3:
        $r14 := @caughtexception;

        goto label8;

     label4:
        $r9 := @caughtexception;

        $z0 = r0.<org.jivesoftware.whack.SocketReadThread: boolean shutdown>;

        if $z0 != 0 goto label5;

        $r10 = r0.<org.jivesoftware.whack.SocketReadThread: org.jivesoftware.whack.ExternalComponent component>;

        $r11 = virtualinvoke $r10.<org.jivesoftware.whack.ExternalComponent: org.jivesoftware.whack.ExternalComponentManager getManager()>();

        $r12 = virtualinvoke $r11.<org.jivesoftware.whack.ExternalComponentManager: org.xmpp.component.Log getLog()>();

        interfaceinvoke $r12.<org.xmpp.component.Log: void error(java.lang.Throwable)>($r9);

        $r13 = r0.<org.jivesoftware.whack.SocketReadThread: org.jivesoftware.whack.ExternalComponent component>;

        virtualinvoke $r13.<org.jivesoftware.whack.ExternalComponent: void connectionLost()>();

     label5:
        goto label8;

     label6:
        $r5 := @caughtexception;

        $r6 = r0.<org.jivesoftware.whack.SocketReadThread: org.jivesoftware.whack.ExternalComponent component>;

        $r7 = virtualinvoke $r6.<org.jivesoftware.whack.ExternalComponent: org.jivesoftware.whack.ExternalComponentManager getManager()>();

        $r8 = virtualinvoke $r7.<org.jivesoftware.whack.ExternalComponentManager: org.xmpp.component.Log getLog()>();

        interfaceinvoke $r8.<org.xmpp.component.Log: void error(java.lang.Throwable)>($r5);

        goto label8;

     label7:
        $r1 := @caughtexception;

        $r2 = r0.<org.jivesoftware.whack.SocketReadThread: org.jivesoftware.whack.ExternalComponent component>;

        $r3 = virtualinvoke $r2.<org.jivesoftware.whack.ExternalComponent: org.jivesoftware.whack.ExternalComponentManager getManager()>();

        $r4 = virtualinvoke $r3.<org.jivesoftware.whack.ExternalComponentManager: org.xmpp.component.Log getLog()>();

        interfaceinvoke $r4.<org.xmpp.component.Log: void warn(java.lang.Throwable)>($r1);

     label8:
        return;

        catch java.io.EOFException from label1 to label2 with label3;
        catch java.net.SocketException from label1 to label2 with label4;
        catch org.xmlpull.v1.XmlPullParserException from label1 to label2 with label6;
        catch java.lang.Exception from label1 to label2 with label7;
    }

    private void readStream() throws java.lang.Exception
    {
        org.xmpp.packet.Presence $r13;
        org.dom4j.Document $r2;
        org.xmpp.packet.Message $r14;
        org.jivesoftware.whack.SocketReadThread r0;
        java.lang.String $r4, $r5, $r6, $r7, $r12;
        boolean $z0, $z1, $z2, $z3;
        org.dom4j.io.XPPPacketReader $r1;
        org.jivesoftware.whack.ExternalComponent $r16;
        org.xmlpull.v1.XmlPullParserException $r8;
        org.xmpp.packet.Packet r15;
        org.dom4j.Element $r3;
        java.lang.StringBuilder $r9, $r10, $r11;

        r0 := @this: org.jivesoftware.whack.SocketReadThread;

     label1:
        $z0 = r0.<org.jivesoftware.whack.SocketReadThread: boolean shutdown>;

        if $z0 != 0 goto label7;

        $r1 = r0.<org.jivesoftware.whack.SocketReadThread: org.dom4j.io.XPPPacketReader reader>;

        $r2 = virtualinvoke $r1.<org.dom4j.io.XPPPacketReader: org.dom4j.Document parseDocument()>();

        $r3 = interfaceinvoke $r2.<org.dom4j.Document: org.dom4j.Element getRootElement()>();

        if $r3 != null goto label2;

        return;

     label2:
        $r4 = interfaceinvoke $r3.<org.dom4j.Element: java.lang.String getName()>();

        $r5 = "message";

        $z1 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z1 == 0 goto label3;

        $r14 = new org.xmpp.packet.Message;

        specialinvoke $r14.<org.xmpp.packet.Message: void <init>(org.dom4j.Element)>($r3);

        r15 = $r14;

        goto label6;

     label3:
        $r6 = "presence";

        $z2 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z2 == 0 goto label4;

        $r13 = new org.xmpp.packet.Presence;

        specialinvoke $r13.<org.xmpp.packet.Presence: void <init>(org.dom4j.Element)>($r3);

        r15 = $r13;

        goto label6;

     label4:
        $r7 = "iq";

        $z3 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z3 == 0 goto label5;

        r15 = specialinvoke r0.<org.jivesoftware.whack.SocketReadThread: org.xmpp.packet.IQ getIQ(org.dom4j.Element)>($r3);

        goto label6;

     label5:
        $r8 = new org.xmlpull.v1.XmlPullParserException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown packet type was read: ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String)>($r12);

        throw $r8;

     label6:
        $r16 = r0.<org.jivesoftware.whack.SocketReadThread: org.jivesoftware.whack.ExternalComponent component>;

        virtualinvoke $r16.<org.jivesoftware.whack.ExternalComponent: void processPacket(org.xmpp.packet.Packet)>(r15);

        goto label1;

     label7:
        return;
    }

    private org.xmpp.packet.IQ getIQ(org.dom4j.Element)
    {
        org.dom4j.Element r0, $r1;
        java.lang.String $r3, $r4;
        org.jivesoftware.whack.SocketReadThread r6;
        org.xmpp.packet.IQ $r2;
        org.xmpp.packet.Roster $r5;
        boolean $z0;

        r6 := @this: org.jivesoftware.whack.SocketReadThread;

        r0 := @parameter0: org.dom4j.Element;

        $r1 = interfaceinvoke r0.<org.dom4j.Element: org.dom4j.Element element(java.lang.String)>("query");

        if $r1 == null goto label1;

        $r3 = "jabber:iq:roster";

        $r4 = interfaceinvoke $r1.<org.dom4j.Element: java.lang.String getNamespaceURI()>();

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label1;

        $r5 = new org.xmpp.packet.Roster;

        specialinvoke $r5.<org.xmpp.packet.Roster: void <init>(org.dom4j.Element)>(r0);

        return $r5;

     label1:
        $r2 = new org.xmpp.packet.IQ;

        specialinvoke $r2.<org.xmpp.packet.IQ: void <init>(org.dom4j.Element)>(r0);

        return $r2;
    }

    public void shutdown()
    {
        org.jivesoftware.whack.SocketReadThread r0;

        r0 := @this: org.jivesoftware.whack.SocketReadThread;

        r0.<org.jivesoftware.whack.SocketReadThread: boolean shutdown> = 1;

        return;
    }
}
