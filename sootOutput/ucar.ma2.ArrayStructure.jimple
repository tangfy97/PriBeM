public abstract class ucar.ma2.ArrayStructure extends ucar.ma2.Array
{
    protected ucar.ma2.StructureMembers members;
    protected int nelems;
    protected ucar.ma2.StructureData[] sdata;

    protected void <init>(ucar.ma2.StructureMembers, int[])
    {
        ucar.ma2.StructureMembers r2;
        ucar.ma2.ArrayStructure r0;
        int[] r1;
        ucar.ma2.Index $r3;
        int $i1;
        long $l0;

        r0 := @this: ucar.ma2.ArrayStructure;

        r2 := @parameter0: ucar.ma2.StructureMembers;

        r1 := @parameter1: int[];

        specialinvoke r0.<ucar.ma2.Array: void <init>(int[])>(r1);

        r0.<ucar.ma2.ArrayStructure: ucar.ma2.StructureMembers members> = r2;

        $r3 = r0.<ucar.ma2.ArrayStructure: ucar.ma2.Index indexCalc>;

        $l0 = virtualinvoke $r3.<ucar.ma2.Index: long getSize()>();

        $i1 = (int) $l0;

        r0.<ucar.ma2.ArrayStructure: int nelems> = $i1;

        return;
    }

    protected void <init>(ucar.ma2.StructureMembers, ucar.ma2.Index)
    {
        ucar.ma2.StructureMembers r2;
        ucar.ma2.ArrayStructure r0;
        ucar.ma2.Index r1, $r3;
        int $i1;
        long $l0;

        r0 := @this: ucar.ma2.ArrayStructure;

        r2 := @parameter0: ucar.ma2.StructureMembers;

        r1 := @parameter1: ucar.ma2.Index;

        specialinvoke r0.<ucar.ma2.Array: void <init>(ucar.ma2.Index)>(r1);

        r0.<ucar.ma2.ArrayStructure: ucar.ma2.StructureMembers members> = r2;

        $r3 = r0.<ucar.ma2.ArrayStructure: ucar.ma2.Index indexCalc>;

        $l0 = virtualinvoke $r3.<ucar.ma2.Index: long getSize()>();

        $i1 = (int) $l0;

        r0.<ucar.ma2.ArrayStructure: int nelems> = $i1;

        return;
    }

    void copyFrom1DJavaArray(ucar.ma2.IndexIterator, java.lang.Object)
    {
        java.lang.Object[] $r1, r2;
        ucar.ma2.ArrayStructure r5;
        ucar.ma2.IndexIterator r4;
        int i0, i1;
        java.lang.Object r0, r3;

        r5 := @this: ucar.ma2.ArrayStructure;

        r4 := @parameter0: ucar.ma2.IndexIterator;

        r0 := @parameter1: java.lang.Object;

        $r1 = (java.lang.Object[]) r0;

        r2 = (java.lang.Object[]) $r1;

        i0 = lengthof r2;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r3 = r2[i1];

        interfaceinvoke r4.<ucar.ma2.IndexIterator: void setObjectNext(java.lang.Object)>(r3);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    void copyTo1DJavaArray(ucar.ma2.IndexIterator, java.lang.Object)
    {
        java.lang.Object[] $r1, r2;
        ucar.ma2.ArrayStructure r5;
        ucar.ma2.IndexIterator r3;
        int $i0, i1;
        java.lang.Object r0, $r4;

        r5 := @this: ucar.ma2.ArrayStructure;

        r3 := @parameter0: ucar.ma2.IndexIterator;

        r0 := @parameter1: java.lang.Object;

        $r1 = (java.lang.Object[]) r0;

        r2 = (java.lang.Object[]) $r1;

        i1 = 0;

     label1:
        $i0 = lengthof r2;

        if i1 >= $i0 goto label2;

        $r4 = interfaceinvoke r3.<ucar.ma2.IndexIterator: java.lang.Object getObjectNext()>();

        r2[i1] = $r4;

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public java.lang.Class getElementType()
    {
        ucar.ma2.ArrayStructure r0;

        r0 := @this: ucar.ma2.ArrayStructure;

        return class "Lucar/ma2/StructureData;";
    }

    public ucar.ma2.StructureMembers getStructureMembers()
    {
        ucar.ma2.StructureMembers $r1;
        ucar.ma2.ArrayStructure r0;

        r0 := @this: ucar.ma2.ArrayStructure;

        $r1 = r0.<ucar.ma2.ArrayStructure: ucar.ma2.StructureMembers members>;

        return $r1;
    }

    public java.util.List getMembers()
    {
        java.util.List $r2;
        ucar.ma2.StructureMembers $r1;
        ucar.ma2.ArrayStructure r0;

        r0 := @this: ucar.ma2.ArrayStructure;

        $r1 = r0.<ucar.ma2.ArrayStructure: ucar.ma2.StructureMembers members>;

        $r2 = virtualinvoke $r1.<ucar.ma2.StructureMembers: java.util.List getMembers()>();

        return $r2;
    }

    public java.util.List getStructureMemberNames()
    {
        java.util.List $r2;
        ucar.ma2.StructureMembers $r1;
        ucar.ma2.ArrayStructure r0;

        r0 := @this: ucar.ma2.ArrayStructure;

        $r1 = r0.<ucar.ma2.ArrayStructure: ucar.ma2.StructureMembers members>;

        $r2 = virtualinvoke $r1.<ucar.ma2.StructureMembers: java.util.List getMemberNames()>();

        return $r2;
    }

    public ucar.ma2.StructureMembers$Member findMember(java.lang.String)
    {
        ucar.ma2.StructureMembers $r2;
        ucar.ma2.ArrayStructure r0;
        java.lang.String r1;
        ucar.ma2.StructureMembers$Member $r3;

        r0 := @this: ucar.ma2.ArrayStructure;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<ucar.ma2.ArrayStructure: ucar.ma2.StructureMembers members>;

        $r3 = virtualinvoke $r2.<ucar.ma2.StructureMembers: ucar.ma2.StructureMembers$Member findMember(java.lang.String)>(r1);

        return $r3;
    }

    public long getSizeBytes()
    {
        ucar.ma2.StructureMembers $r2;
        ucar.ma2.ArrayStructure r0;
        ucar.ma2.Index $r1;
        int $i1;
        long $l0, $l2, $l3;

        r0 := @this: ucar.ma2.ArrayStructure;

        $r1 = r0.<ucar.ma2.ArrayStructure: ucar.ma2.Index indexCalc>;

        $l0 = virtualinvoke $r1.<ucar.ma2.Index: long getSize()>();

        $r2 = r0.<ucar.ma2.ArrayStructure: ucar.ma2.StructureMembers members>;

        $i1 = virtualinvoke $r2.<ucar.ma2.StructureMembers: int getStructureSize()>();

        $l2 = (long) $i1;

        $l3 = $l0 * $l2;

        return $l3;
    }

    public java.lang.Object getObject(ucar.ma2.Index)
    {
        ucar.ma2.ArrayStructure r0;
        ucar.ma2.Index r1;
        int $i0;
        java.lang.Object $r2;

        r0 := @this: ucar.ma2.ArrayStructure;

        r1 := @parameter0: ucar.ma2.Index;

        $i0 = virtualinvoke r1.<ucar.ma2.Index: int currentElement()>();

        $r2 = virtualinvoke r0.<ucar.ma2.ArrayStructure: java.lang.Object getObject(int)>($i0);

        return $r2;
    }

    public void setObject(ucar.ma2.Index, java.lang.Object)
    {
        ucar.ma2.ArrayStructure r0;
        ucar.ma2.Index r1;
        int $i0;
        java.lang.Object r2;

        r0 := @this: ucar.ma2.ArrayStructure;

        r1 := @parameter0: ucar.ma2.Index;

        r2 := @parameter1: java.lang.Object;

        $i0 = virtualinvoke r1.<ucar.ma2.Index: int currentElement()>();

        virtualinvoke r0.<ucar.ma2.ArrayStructure: void setObject(int,java.lang.Object)>($i0, r2);

        return;
    }

    public java.lang.Object getObject(int)
    {
        int i0;
        ucar.ma2.StructureData $r1;
        ucar.ma2.ArrayStructure r0;

        r0 := @this: ucar.ma2.ArrayStructure;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<ucar.ma2.ArrayStructure: ucar.ma2.StructureData getStructureData(int)>(i0);

        return $r1;
    }

    public void setObject(int, java.lang.Object)
    {
        ucar.ma2.StructureData[] $r1, $r4, $r5;
        ucar.ma2.ArrayStructure r0;
        ucar.ma2.StructureData $r3;
        int i0, $i1;
        java.lang.Object r2;

        r0 := @this: ucar.ma2.ArrayStructure;

        i0 := @parameter0: int;

        r2 := @parameter1: java.lang.Object;

        $r1 = r0.<ucar.ma2.ArrayStructure: ucar.ma2.StructureData[] sdata>;

        if $r1 != null goto label1;

        $i1 = r0.<ucar.ma2.ArrayStructure: int nelems>;

        $r5 = newarray (ucar.ma2.StructureData)[$i1];

        r0.<ucar.ma2.ArrayStructure: ucar.ma2.StructureData[] sdata> = $r5;

     label1:
        $r4 = r0.<ucar.ma2.ArrayStructure: ucar.ma2.StructureData[] sdata>;

        $r3 = (ucar.ma2.StructureData) r2;

        $r4[i0] = $r3;

        return;
    }

    public ucar.ma2.StructureData getStructureData(ucar.ma2.Index)
    {
        ucar.ma2.StructureData $r2;
        ucar.ma2.ArrayStructure r0;
        ucar.ma2.Index r1;
        int $i0;

        r0 := @this: ucar.ma2.ArrayStructure;

        r1 := @parameter0: ucar.ma2.Index;

        $i0 = virtualinvoke r1.<ucar.ma2.Index: int currentElement()>();

        $r2 = virtualinvoke r0.<ucar.ma2.ArrayStructure: ucar.ma2.StructureData getStructureData(int)>($i0);

        return $r2;
    }

    public ucar.ma2.StructureData getStructureData(int)
    {
        ucar.ma2.ArrayStructure r0;
        ucar.ma2.StructureData $r4, $r6, $r8;
        int i0, $i1, $i2, $i3;
        java.lang.String $r15;
        ucar.ma2.StructureData[] $r1, $r2, $r3, $r5, $r7, $r13, $r16;
        java.lang.IllegalArgumentException $r9;
        java.lang.StringBuilder $r10, $r11, $r12, $r14;

        r0 := @this: ucar.ma2.ArrayStructure;

        i0 := @parameter0: int;

        $r1 = r0.<ucar.ma2.ArrayStructure: ucar.ma2.StructureData[] sdata>;

        if $r1 != null goto label1;

        $i3 = r0.<ucar.ma2.ArrayStructure: int nelems>;

        $r16 = newarray (ucar.ma2.StructureData)[$i3];

        r0.<ucar.ma2.ArrayStructure: ucar.ma2.StructureData[] sdata> = $r16;

     label1:
        $r2 = r0.<ucar.ma2.ArrayStructure: ucar.ma2.StructureData[] sdata>;

        $i1 = lengthof $r2;

        if i0 < $i1 goto label2;

        $r9 = new java.lang.IllegalArgumentException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" > ");

        $r13 = r0.<ucar.ma2.ArrayStructure: ucar.ma2.StructureData[] sdata>;

        $i2 = lengthof $r13;

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r15);

        throw $r9;

     label2:
        $r3 = r0.<ucar.ma2.ArrayStructure: ucar.ma2.StructureData[] sdata>;

        $r4 = $r3[i0];

        if $r4 != null goto label3;

        $r7 = r0.<ucar.ma2.ArrayStructure: ucar.ma2.StructureData[] sdata>;

        $r8 = virtualinvoke r0.<ucar.ma2.ArrayStructure: ucar.ma2.StructureData makeStructureData(ucar.ma2.ArrayStructure,int)>(r0, i0);

        $r7[i0] = $r8;

     label3:
        $r5 = r0.<ucar.ma2.ArrayStructure: ucar.ma2.StructureData[] sdata>;

        $r6 = $r5[i0];

        return $r6;
    }

    public java.lang.Object getStorage()
    {
        ucar.ma2.StructureData[] $r1;
        ucar.ma2.ArrayStructure r0;
        int $i0, i1;

        r0 := @this: ucar.ma2.ArrayStructure;

        i1 = 0;

     label1:
        $i0 = r0.<ucar.ma2.ArrayStructure: int nelems>;

        if i1 >= $i0 goto label2;

        virtualinvoke r0.<ucar.ma2.ArrayStructure: ucar.ma2.StructureData getStructureData(int)>(i1);

        i1 = i1 + 1;

        goto label1;

     label2:
        $r1 = r0.<ucar.ma2.ArrayStructure: ucar.ma2.StructureData[] sdata>;

        return $r1;
    }

    protected abstract ucar.ma2.StructureData makeStructureData(ucar.ma2.ArrayStructure, int);

    public int getStructureSize()
    {
        int $i0;
        ucar.ma2.StructureMembers $r1;
        ucar.ma2.ArrayStructure r0;

        r0 := @this: ucar.ma2.ArrayStructure;

        $r1 = r0.<ucar.ma2.ArrayStructure: ucar.ma2.StructureMembers members>;

        $i0 = virtualinvoke $r1.<ucar.ma2.StructureMembers: int getStructureSize()>();

        return $i0;
    }

    public ucar.ma2.StructureDataIterator getStructureDataIterator() throws java.io.IOException
    {
        ucar.ma2.ArrayStructure r1;
        ucar.ma2.ArrayStructure$ArrayStructureIterator $r0;

        r1 := @this: ucar.ma2.ArrayStructure;

        $r0 = new ucar.ma2.ArrayStructure$ArrayStructureIterator;

        specialinvoke $r0.<ucar.ma2.ArrayStructure$ArrayStructureIterator: void <init>(ucar.ma2.ArrayStructure)>(r1);

        return $r0;
    }

    public ucar.ma2.Array getArray(int, ucar.ma2.StructureMembers$Member)
    {
        byte[] $r6;
        ucar.ma2.ArrayStructure r5, $r36;
        ucar.ma2.StructureMembers$Member r0;
        int[] $r8, $r14, $r18, $r20, $r38, $r42, $r46, $r50, $r54;
        ucar.ma2.DataType $r1, $r2, $r3, $r4, $r10, $r11, $r16, $r17, $r22, $r23, $r24, $r25, $r26, $r27, $r28;
        java.lang.StringBuilder $r30, $r31, $r32;
        short[] $r12;
        double[] $r52;
        java.lang.String[] $r37;
        float[] $r48;
        long[] $r44;
        int i0;
        java.lang.String $r33;
        ucar.ma2.ArrayObject $r34;
        java.lang.RuntimeException $r29;
        ucar.ma2.Array $r9, $r15, $r21, $r39, $r43, $r47, $r51, $r55;
        ucar.ma2.ArraySequence $r35;
        char[] $r40;
        java.lang.Class $r7, $r13, $r19, $r41, $r45, $r49, $r53;

        r5 := @this: ucar.ma2.ArrayStructure;

        i0 := @parameter0: int;

        r0 := @parameter1: ucar.ma2.StructureMembers$Member;

        $r1 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.DataType getDataType()>();

        $r2 = <ucar.ma2.DataType: ucar.ma2.DataType DOUBLE>;

        if $r1 != $r2 goto label01;

        $r52 = virtualinvoke r5.<ucar.ma2.ArrayStructure: double[] getJavaArrayDouble(int,ucar.ma2.StructureMembers$Member)>(i0, r0);

        $r53 = <java.lang.Double: java.lang.Class TYPE>;

        $r54 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: int[] getShape()>();

        $r55 = staticinvoke <ucar.ma2.Array: ucar.ma2.Array factory(java.lang.Class,int[],java.lang.Object)>($r53, $r54, $r52);

        return $r55;

     label01:
        $r3 = <ucar.ma2.DataType: ucar.ma2.DataType FLOAT>;

        if $r1 != $r3 goto label02;

        $r48 = virtualinvoke r5.<ucar.ma2.ArrayStructure: float[] getJavaArrayFloat(int,ucar.ma2.StructureMembers$Member)>(i0, r0);

        $r49 = <java.lang.Float: java.lang.Class TYPE>;

        $r50 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: int[] getShape()>();

        $r51 = staticinvoke <ucar.ma2.Array: ucar.ma2.Array factory(java.lang.Class,int[],java.lang.Object)>($r49, $r50, $r48);

        return $r51;

     label02:
        $r4 = <ucar.ma2.DataType: ucar.ma2.DataType BYTE>;

        if $r1 == $r4 goto label03;

        $r10 = <ucar.ma2.DataType: ucar.ma2.DataType ENUM1>;

        if $r1 != $r10 goto label04;

     label03:
        $r6 = virtualinvoke r5.<ucar.ma2.ArrayStructure: byte[] getJavaArrayByte(int,ucar.ma2.StructureMembers$Member)>(i0, r0);

        $r7 = <java.lang.Byte: java.lang.Class TYPE>;

        $r8 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: int[] getShape()>();

        $r9 = staticinvoke <ucar.ma2.Array: ucar.ma2.Array factory(java.lang.Class,int[],java.lang.Object)>($r7, $r8, $r6);

        return $r9;

     label04:
        $r11 = <ucar.ma2.DataType: ucar.ma2.DataType SHORT>;

        if $r1 == $r11 goto label05;

        $r16 = <ucar.ma2.DataType: ucar.ma2.DataType ENUM2>;

        if $r1 != $r16 goto label06;

     label05:
        $r12 = virtualinvoke r5.<ucar.ma2.ArrayStructure: short[] getJavaArrayShort(int,ucar.ma2.StructureMembers$Member)>(i0, r0);

        $r13 = <java.lang.Short: java.lang.Class TYPE>;

        $r14 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: int[] getShape()>();

        $r15 = staticinvoke <ucar.ma2.Array: ucar.ma2.Array factory(java.lang.Class,int[],java.lang.Object)>($r13, $r14, $r12);

        return $r15;

     label06:
        $r17 = <ucar.ma2.DataType: ucar.ma2.DataType INT>;

        if $r1 == $r17 goto label07;

        $r22 = <ucar.ma2.DataType: ucar.ma2.DataType ENUM4>;

        if $r1 != $r22 goto label08;

     label07:
        $r18 = virtualinvoke r5.<ucar.ma2.ArrayStructure: int[] getJavaArrayInt(int,ucar.ma2.StructureMembers$Member)>(i0, r0);

        $r19 = <java.lang.Integer: java.lang.Class TYPE>;

        $r20 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: int[] getShape()>();

        $r21 = staticinvoke <ucar.ma2.Array: ucar.ma2.Array factory(java.lang.Class,int[],java.lang.Object)>($r19, $r20, $r18);

        return $r21;

     label08:
        $r23 = <ucar.ma2.DataType: ucar.ma2.DataType LONG>;

        if $r1 != $r23 goto label09;

        $r44 = virtualinvoke r5.<ucar.ma2.ArrayStructure: long[] getJavaArrayLong(int,ucar.ma2.StructureMembers$Member)>(i0, r0);

        $r45 = <java.lang.Long: java.lang.Class TYPE>;

        $r46 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: int[] getShape()>();

        $r47 = staticinvoke <ucar.ma2.Array: ucar.ma2.Array factory(java.lang.Class,int[],java.lang.Object)>($r45, $r46, $r44);

        return $r47;

     label09:
        $r24 = <ucar.ma2.DataType: ucar.ma2.DataType CHAR>;

        if $r1 != $r24 goto label10;

        $r40 = virtualinvoke r5.<ucar.ma2.ArrayStructure: char[] getJavaArrayChar(int,ucar.ma2.StructureMembers$Member)>(i0, r0);

        $r41 = <java.lang.Character: java.lang.Class TYPE>;

        $r42 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: int[] getShape()>();

        $r43 = staticinvoke <ucar.ma2.Array: ucar.ma2.Array factory(java.lang.Class,int[],java.lang.Object)>($r41, $r42, $r40);

        return $r43;

     label10:
        $r25 = <ucar.ma2.DataType: ucar.ma2.DataType STRING>;

        if $r1 != $r25 goto label11;

        $r37 = virtualinvoke r5.<ucar.ma2.ArrayStructure: java.lang.String[] getJavaArrayString(int,ucar.ma2.StructureMembers$Member)>(i0, r0);

        $r38 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: int[] getShape()>();

        $r39 = staticinvoke <ucar.ma2.Array: ucar.ma2.Array factory(java.lang.Class,int[],java.lang.Object)>(class "Ljava/lang/String;", $r38, $r37);

        return $r39;

     label11:
        $r26 = <ucar.ma2.DataType: ucar.ma2.DataType STRUCTURE>;

        if $r1 != $r26 goto label12;

        $r36 = virtualinvoke r5.<ucar.ma2.ArrayStructure: ucar.ma2.ArrayStructure getArrayStructure(int,ucar.ma2.StructureMembers$Member)>(i0, r0);

        return $r36;

     label12:
        $r27 = <ucar.ma2.DataType: ucar.ma2.DataType SEQUENCE>;

        if $r1 != $r27 goto label13;

        $r35 = virtualinvoke r5.<ucar.ma2.ArrayStructure: ucar.ma2.ArraySequence getArraySequence(int,ucar.ma2.StructureMembers$Member)>(i0, r0);

        return $r35;

     label13:
        $r28 = <ucar.ma2.DataType: ucar.ma2.DataType OPAQUE>;

        if $r1 != $r28 goto label14;

        $r34 = virtualinvoke r5.<ucar.ma2.ArrayStructure: ucar.ma2.ArrayObject getArrayObject(int,ucar.ma2.StructureMembers$Member)>(i0, r0);

        return $r34;

     label14:
        $r29 = new java.lang.RuntimeException;

        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Dont have implemenation for ");

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r29.<java.lang.RuntimeException: void <init>(java.lang.String)>($r33);

        throw $r29;
    }

    public void setMemberArray(ucar.ma2.StructureMembers$Member, ucar.ma2.Array)
    {
        ucar.ma2.StructureMembers $r3;
        ucar.ma2.ArrayStructure r2, r4;
        ucar.ma2.Array r1;
        ucar.ma2.StructureMembers$Member r0;
        boolean $z0;

        r4 := @this: ucar.ma2.ArrayStructure;

        r0 := @parameter0: ucar.ma2.StructureMembers$Member;

        r1 := @parameter1: ucar.ma2.Array;

        virtualinvoke r0.<ucar.ma2.StructureMembers$Member: void setDataArray(ucar.ma2.Array)>(r1);

        $z0 = r1 instanceof ucar.ma2.ArrayStructure;

        if $z0 == 0 goto label1;

        r2 = (ucar.ma2.ArrayStructure) r1;

        $r3 = virtualinvoke r2.<ucar.ma2.ArrayStructure: ucar.ma2.StructureMembers getStructureMembers()>();

        virtualinvoke r0.<ucar.ma2.StructureMembers$Member: void setStructureMembers(ucar.ma2.StructureMembers)>($r3);

     label1:
        return;
    }

    public ucar.ma2.Array extractMemberArray(ucar.ma2.StructureMembers$Member) throws java.io.IOException
    {
        ucar.ma2.StructureMembers$Member r0;
        byte $b8, $b11, $b14, $b17, $b20, $b23, $b29, $b33, $b37, $b43;
        ucar.ma2.StructureMembers $r25, $r31;
        long $l6, $l7, $l9, $l10, $l12, $l13, $l15, $l16, $l18, $l19, $l21, $l22, $l27, $l28, $l31, $l32, $l35, $l36, $l41, $l42;
        ucar.ma2.ArrayStructureW $r32;
        ucar.ma2.Array $r1, $r27, r28;
        ucar.ma2.ArrayStructure r4;
        int[] $r3, r5, $r6;
        ucar.ma2.DataType $r2, $r7, $r8, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r30;
        int $i0, $i1, i2, $i3, $i4, $i5, i24, i25, i26, i30, i34, i38, i39, i40, i44, i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55;
        ucar.ma2.ArrayObject $r33;
        ucar.ma2.IndexIterator $r29;
        java.lang.Class $r9;

        r4 := @this: ucar.ma2.ArrayStructure;

        r0 := @parameter0: ucar.ma2.StructureMembers$Member;

        $r1 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.Array getDataArray()>();

        if $r1 == null goto label01;

        $r27 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.Array getDataArray()>();

        return $r27;

     label01:
        $r2 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.DataType getDataType()>();

        $r3 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: int[] getShape()>();

        $i1 = r4.<ucar.ma2.ArrayStructure: int rank>;

        $i0 = lengthof $r3;

        i2 = $i1 + $i0;

        r5 = newarray (int)[i2];

        $r6 = virtualinvoke r4.<ucar.ma2.ArrayStructure: int[] getShape()>();

        $i3 = r4.<ucar.ma2.ArrayStructure: int rank>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r6, 0, r5, 0, $i3);

        $i5 = r4.<ucar.ma2.ArrayStructure: int rank>;

        $i4 = lengthof $r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, r5, $i5, $i4);

        $r7 = <ucar.ma2.DataType: ucar.ma2.DataType STRUCTURE>;

        if $r2 != $r7 goto label02;

        $r31 = new ucar.ma2.StructureMembers;

        $r25 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.StructureMembers getStructureMembers()>();

        specialinvoke $r31.<ucar.ma2.StructureMembers: void <init>(ucar.ma2.StructureMembers)>($r25);

        $r32 = new ucar.ma2.ArrayStructureW;

        specialinvoke $r32.<ucar.ma2.ArrayStructureW: void <init>(ucar.ma2.StructureMembers,int[])>($r31, r5);

        r28 = $r32;

        goto label04;

     label02:
        $r8 = <ucar.ma2.DataType: ucar.ma2.DataType OPAQUE>;

        if $r2 != $r8 goto label03;

        $r33 = new ucar.ma2.ArrayObject;

        specialinvoke $r33.<ucar.ma2.ArrayObject: void <init>(java.lang.Class,int[])>(class "Ljava/nio/ByteBuffer;", r5);

        r28 = $r33;

        goto label04;

     label03:
        $r9 = virtualinvoke $r2.<ucar.ma2.DataType: java.lang.Class getPrimitiveClassType()>();

        r28 = staticinvoke <ucar.ma2.Array: ucar.ma2.Array factory(java.lang.Class,int[])>($r9, r5);

     label04:
        $r29 = virtualinvoke r28.<ucar.ma2.Array: ucar.ma2.IndexIterator getIndexIterator()>();

        $r30 = <ucar.ma2.DataType: ucar.ma2.DataType DOUBLE>;

        if $r2 != $r30 goto label07;

        i24 = 0;

     label05:
        $l21 = (long) i24;

        $l22 = virtualinvoke r4.<ucar.ma2.ArrayStructure: long getSize()>();

        $b23 = $l21 cmp $l22;

        $i46 = (int) $b23;

        if $i46 >= 0 goto label06;

        virtualinvoke r4.<ucar.ma2.ArrayStructure: void copyDoubles(int,ucar.ma2.StructureMembers$Member,ucar.ma2.IndexIterator)>(i24, r0, $r29);

        i24 = i24 + 1;

        goto label05;

     label06:
        goto label37;

     label07:
        $r10 = <ucar.ma2.DataType: ucar.ma2.DataType FLOAT>;

        if $r2 != $r10 goto label10;

        i25 = 0;

     label08:
        $l18 = (long) i25;

        $l19 = virtualinvoke r4.<ucar.ma2.ArrayStructure: long getSize()>();

        $b20 = $l18 cmp $l19;

        $i47 = (int) $b20;

        if $i47 >= 0 goto label09;

        virtualinvoke r4.<ucar.ma2.ArrayStructure: void copyFloats(int,ucar.ma2.StructureMembers$Member,ucar.ma2.IndexIterator)>(i25, r0, $r29);

        i25 = i25 + 1;

        goto label08;

     label09:
        goto label37;

     label10:
        $r11 = <ucar.ma2.DataType: ucar.ma2.DataType BYTE>;

        if $r2 == $r11 goto label11;

        $r12 = <ucar.ma2.DataType: ucar.ma2.DataType ENUM1>;

        if $r2 != $r12 goto label14;

     label11:
        i26 = 0;

     label12:
        $l27 = (long) i26;

        $l28 = virtualinvoke r4.<ucar.ma2.ArrayStructure: long getSize()>();

        $b29 = $l27 cmp $l28;

        $i48 = (int) $b29;

        if $i48 >= 0 goto label13;

        virtualinvoke r4.<ucar.ma2.ArrayStructure: void copyBytes(int,ucar.ma2.StructureMembers$Member,ucar.ma2.IndexIterator)>(i26, r0, $r29);

        i26 = i26 + 1;

        goto label12;

     label13:
        goto label37;

     label14:
        $r13 = <ucar.ma2.DataType: ucar.ma2.DataType SHORT>;

        if $r2 == $r13 goto label15;

        $r14 = <ucar.ma2.DataType: ucar.ma2.DataType ENUM2>;

        if $r2 != $r14 goto label18;

     label15:
        i30 = 0;

     label16:
        $l31 = (long) i30;

        $l32 = virtualinvoke r4.<ucar.ma2.ArrayStructure: long getSize()>();

        $b33 = $l31 cmp $l32;

        $i49 = (int) $b33;

        if $i49 >= 0 goto label17;

        virtualinvoke r4.<ucar.ma2.ArrayStructure: void copyShorts(int,ucar.ma2.StructureMembers$Member,ucar.ma2.IndexIterator)>(i30, r0, $r29);

        i30 = i30 + 1;

        goto label16;

     label17:
        goto label37;

     label18:
        $r15 = <ucar.ma2.DataType: ucar.ma2.DataType INT>;

        if $r2 == $r15 goto label19;

        $r16 = <ucar.ma2.DataType: ucar.ma2.DataType ENUM4>;

        if $r2 != $r16 goto label22;

     label19:
        i34 = 0;

     label20:
        $l35 = (long) i34;

        $l36 = virtualinvoke r4.<ucar.ma2.ArrayStructure: long getSize()>();

        $b37 = $l35 cmp $l36;

        $i50 = (int) $b37;

        if $i50 >= 0 goto label21;

        virtualinvoke r4.<ucar.ma2.ArrayStructure: void copyInts(int,ucar.ma2.StructureMembers$Member,ucar.ma2.IndexIterator)>(i34, r0, $r29);

        i34 = i34 + 1;

        goto label20;

     label21:
        goto label37;

     label22:
        $r17 = <ucar.ma2.DataType: ucar.ma2.DataType LONG>;

        if $r2 != $r17 goto label25;

        i38 = 0;

     label23:
        $l15 = (long) i38;

        $l16 = virtualinvoke r4.<ucar.ma2.ArrayStructure: long getSize()>();

        $b17 = $l15 cmp $l16;

        $i51 = (int) $b17;

        if $i51 >= 0 goto label24;

        virtualinvoke r4.<ucar.ma2.ArrayStructure: void copyLongs(int,ucar.ma2.StructureMembers$Member,ucar.ma2.IndexIterator)>(i38, r0, $r29);

        i38 = i38 + 1;

        goto label23;

     label24:
        goto label37;

     label25:
        $r18 = <ucar.ma2.DataType: ucar.ma2.DataType CHAR>;

        if $r2 != $r18 goto label28;

        i39 = 0;

     label26:
        $l12 = (long) i39;

        $l13 = virtualinvoke r4.<ucar.ma2.ArrayStructure: long getSize()>();

        $b14 = $l12 cmp $l13;

        $i52 = (int) $b14;

        if $i52 >= 0 goto label27;

        virtualinvoke r4.<ucar.ma2.ArrayStructure: void copyChars(int,ucar.ma2.StructureMembers$Member,ucar.ma2.IndexIterator)>(i39, r0, $r29);

        i39 = i39 + 1;

        goto label26;

     label27:
        goto label37;

     label28:
        $r19 = <ucar.ma2.DataType: ucar.ma2.DataType STRING>;

        if $r2 == $r19 goto label29;

        $r20 = <ucar.ma2.DataType: ucar.ma2.DataType OPAQUE>;

        if $r2 != $r20 goto label32;

     label29:
        i40 = 0;

     label30:
        $l41 = (long) i40;

        $l42 = virtualinvoke r4.<ucar.ma2.ArrayStructure: long getSize()>();

        $b43 = $l41 cmp $l42;

        $i53 = (int) $b43;

        if $i53 >= 0 goto label31;

        virtualinvoke r4.<ucar.ma2.ArrayStructure: void copyObjects(int,ucar.ma2.StructureMembers$Member,ucar.ma2.IndexIterator)>(i40, r0, $r29);

        i40 = i40 + 1;

        goto label30;

     label31:
        goto label37;

     label32:
        $r21 = <ucar.ma2.DataType: ucar.ma2.DataType STRUCTURE>;

        if $r2 != $r21 goto label35;

        i44 = 0;

     label33:
        $l9 = (long) i44;

        $l10 = virtualinvoke r4.<ucar.ma2.ArrayStructure: long getSize()>();

        $b11 = $l9 cmp $l10;

        $i54 = (int) $b11;

        if $i54 >= 0 goto label34;

        virtualinvoke r4.<ucar.ma2.ArrayStructure: void copyStructures(int,ucar.ma2.StructureMembers$Member,ucar.ma2.IndexIterator)>(i44, r0, $r29);

        i44 = i44 + 1;

        goto label33;

     label34:
        goto label37;

     label35:
        $r22 = <ucar.ma2.DataType: ucar.ma2.DataType SEQUENCE>;

        if $r2 != $r22 goto label37;

        i45 = 0;

     label36:
        $l6 = (long) i45;

        $l7 = virtualinvoke r4.<ucar.ma2.ArrayStructure: long getSize()>();

        $b8 = $l6 cmp $l7;

        $i55 = (int) $b8;

        if $i55 >= 0 goto label37;

        virtualinvoke r4.<ucar.ma2.ArrayStructure: void copySequences(int,ucar.ma2.StructureMembers$Member,ucar.ma2.IndexIterator)>(i45, r0, $r29);

        i45 = i45 + 1;

        goto label36;

     label37:
        return r28;
    }

    protected void copyChars(int, ucar.ma2.StructureMembers$Member, ucar.ma2.IndexIterator)
    {
        ucar.ma2.ArrayStructure r0;
        ucar.ma2.IndexIterator $r3, r4;
        char $c1;
        ucar.ma2.Array $r2;
        ucar.ma2.StructureMembers$Member r1;
        int i0;
        boolean $z0;

        r0 := @this: ucar.ma2.ArrayStructure;

        i0 := @parameter0: int;

        r1 := @parameter1: ucar.ma2.StructureMembers$Member;

        r4 := @parameter2: ucar.ma2.IndexIterator;

        $r2 = virtualinvoke r0.<ucar.ma2.ArrayStructure: ucar.ma2.Array getArray(int,ucar.ma2.StructureMembers$Member)>(i0, r1);

        $r3 = virtualinvoke $r2.<ucar.ma2.Array: ucar.ma2.IndexIterator getIndexIterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<ucar.ma2.IndexIterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $c1 = interfaceinvoke $r3.<ucar.ma2.IndexIterator: char getCharNext()>();

        interfaceinvoke r4.<ucar.ma2.IndexIterator: void setCharNext(char)>($c1);

        goto label1;

     label2:
        return;
    }

    protected void copyDoubles(int, ucar.ma2.StructureMembers$Member, ucar.ma2.IndexIterator)
    {
        ucar.ma2.ArrayStructure r0;
        ucar.ma2.IndexIterator $r3, r4;
        ucar.ma2.Array $r2;
        ucar.ma2.StructureMembers$Member r1;
        int i0;
        boolean $z0;
        double $d0;

        r0 := @this: ucar.ma2.ArrayStructure;

        i0 := @parameter0: int;

        r1 := @parameter1: ucar.ma2.StructureMembers$Member;

        r4 := @parameter2: ucar.ma2.IndexIterator;

        $r2 = virtualinvoke r0.<ucar.ma2.ArrayStructure: ucar.ma2.Array getArray(int,ucar.ma2.StructureMembers$Member)>(i0, r1);

        $r3 = virtualinvoke $r2.<ucar.ma2.Array: ucar.ma2.IndexIterator getIndexIterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<ucar.ma2.IndexIterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $d0 = interfaceinvoke $r3.<ucar.ma2.IndexIterator: double getDoubleNext()>();

        interfaceinvoke r4.<ucar.ma2.IndexIterator: void setDoubleNext(double)>($d0);

        goto label1;

     label2:
        return;
    }

    protected void copyFloats(int, ucar.ma2.StructureMembers$Member, ucar.ma2.IndexIterator)
    {
        ucar.ma2.ArrayStructure r0;
        ucar.ma2.IndexIterator $r3, r4;
        ucar.ma2.Array $r2;
        ucar.ma2.StructureMembers$Member r1;
        int i0;
        float $f0;
        boolean $z0;

        r0 := @this: ucar.ma2.ArrayStructure;

        i0 := @parameter0: int;

        r1 := @parameter1: ucar.ma2.StructureMembers$Member;

        r4 := @parameter2: ucar.ma2.IndexIterator;

        $r2 = virtualinvoke r0.<ucar.ma2.ArrayStructure: ucar.ma2.Array getArray(int,ucar.ma2.StructureMembers$Member)>(i0, r1);

        $r3 = virtualinvoke $r2.<ucar.ma2.Array: ucar.ma2.IndexIterator getIndexIterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<ucar.ma2.IndexIterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $f0 = interfaceinvoke $r3.<ucar.ma2.IndexIterator: float getFloatNext()>();

        interfaceinvoke r4.<ucar.ma2.IndexIterator: void setFloatNext(float)>($f0);

        goto label1;

     label2:
        return;
    }

    protected void copyBytes(int, ucar.ma2.StructureMembers$Member, ucar.ma2.IndexIterator)
    {
        ucar.ma2.ArrayStructure r0;
        ucar.ma2.IndexIterator $r3, r4;
        ucar.ma2.Array $r2;
        ucar.ma2.StructureMembers$Member r1;
        byte $b1;
        int i0;
        boolean $z0;

        r0 := @this: ucar.ma2.ArrayStructure;

        i0 := @parameter0: int;

        r1 := @parameter1: ucar.ma2.StructureMembers$Member;

        r4 := @parameter2: ucar.ma2.IndexIterator;

        $r2 = virtualinvoke r0.<ucar.ma2.ArrayStructure: ucar.ma2.Array getArray(int,ucar.ma2.StructureMembers$Member)>(i0, r1);

        $r3 = virtualinvoke $r2.<ucar.ma2.Array: ucar.ma2.IndexIterator getIndexIterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<ucar.ma2.IndexIterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $b1 = interfaceinvoke $r3.<ucar.ma2.IndexIterator: byte getByteNext()>();

        interfaceinvoke r4.<ucar.ma2.IndexIterator: void setByteNext(byte)>($b1);

        goto label1;

     label2:
        return;
    }

    protected void copyShorts(int, ucar.ma2.StructureMembers$Member, ucar.ma2.IndexIterator)
    {
        ucar.ma2.ArrayStructure r0;
        ucar.ma2.IndexIterator $r3, r4;
        ucar.ma2.Array $r2;
        ucar.ma2.StructureMembers$Member r1;
        short $s1;
        int i0;
        boolean $z0;

        r0 := @this: ucar.ma2.ArrayStructure;

        i0 := @parameter0: int;

        r1 := @parameter1: ucar.ma2.StructureMembers$Member;

        r4 := @parameter2: ucar.ma2.IndexIterator;

        $r2 = virtualinvoke r0.<ucar.ma2.ArrayStructure: ucar.ma2.Array getArray(int,ucar.ma2.StructureMembers$Member)>(i0, r1);

        $r3 = virtualinvoke $r2.<ucar.ma2.Array: ucar.ma2.IndexIterator getIndexIterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<ucar.ma2.IndexIterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $s1 = interfaceinvoke $r3.<ucar.ma2.IndexIterator: short getShortNext()>();

        interfaceinvoke r4.<ucar.ma2.IndexIterator: void setShortNext(short)>($s1);

        goto label1;

     label2:
        return;
    }

    protected void copyInts(int, ucar.ma2.StructureMembers$Member, ucar.ma2.IndexIterator)
    {
        ucar.ma2.ArrayStructure r0;
        ucar.ma2.IndexIterator $r3, r4;
        ucar.ma2.Array $r2;
        ucar.ma2.StructureMembers$Member r1;
        int i0, $i1;
        boolean $z0;

        r0 := @this: ucar.ma2.ArrayStructure;

        i0 := @parameter0: int;

        r1 := @parameter1: ucar.ma2.StructureMembers$Member;

        r4 := @parameter2: ucar.ma2.IndexIterator;

        $r2 = virtualinvoke r0.<ucar.ma2.ArrayStructure: ucar.ma2.Array getArray(int,ucar.ma2.StructureMembers$Member)>(i0, r1);

        $r3 = virtualinvoke $r2.<ucar.ma2.Array: ucar.ma2.IndexIterator getIndexIterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<ucar.ma2.IndexIterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $i1 = interfaceinvoke $r3.<ucar.ma2.IndexIterator: int getIntNext()>();

        interfaceinvoke r4.<ucar.ma2.IndexIterator: void setIntNext(int)>($i1);

        goto label1;

     label2:
        return;
    }

    protected void copyLongs(int, ucar.ma2.StructureMembers$Member, ucar.ma2.IndexIterator)
    {
        ucar.ma2.ArrayStructure r0;
        ucar.ma2.IndexIterator $r3, r4;
        long $l1;
        ucar.ma2.Array $r2;
        ucar.ma2.StructureMembers$Member r1;
        int i0;
        boolean $z0;

        r0 := @this: ucar.ma2.ArrayStructure;

        i0 := @parameter0: int;

        r1 := @parameter1: ucar.ma2.StructureMembers$Member;

        r4 := @parameter2: ucar.ma2.IndexIterator;

        $r2 = virtualinvoke r0.<ucar.ma2.ArrayStructure: ucar.ma2.Array getArray(int,ucar.ma2.StructureMembers$Member)>(i0, r1);

        $r3 = virtualinvoke $r2.<ucar.ma2.Array: ucar.ma2.IndexIterator getIndexIterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<ucar.ma2.IndexIterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $l1 = interfaceinvoke $r3.<ucar.ma2.IndexIterator: long getLongNext()>();

        interfaceinvoke r4.<ucar.ma2.IndexIterator: void setLongNext(long)>($l1);

        goto label1;

     label2:
        return;
    }

    protected void copyObjects(int, ucar.ma2.StructureMembers$Member, ucar.ma2.IndexIterator)
    {
        ucar.ma2.ArrayStructure r0;
        ucar.ma2.IndexIterator $r3, r4;
        ucar.ma2.Array $r2;
        ucar.ma2.StructureMembers$Member r1;
        int i0;
        java.lang.Object $r5;
        boolean $z0;

        r0 := @this: ucar.ma2.ArrayStructure;

        i0 := @parameter0: int;

        r1 := @parameter1: ucar.ma2.StructureMembers$Member;

        r4 := @parameter2: ucar.ma2.IndexIterator;

        $r2 = virtualinvoke r0.<ucar.ma2.ArrayStructure: ucar.ma2.Array getArray(int,ucar.ma2.StructureMembers$Member)>(i0, r1);

        $r3 = virtualinvoke $r2.<ucar.ma2.Array: ucar.ma2.IndexIterator getIndexIterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<ucar.ma2.IndexIterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r3.<ucar.ma2.IndexIterator: java.lang.Object getObjectNext()>();

        interfaceinvoke r4.<ucar.ma2.IndexIterator: void setObjectNext(java.lang.Object)>($r5);

        goto label1;

     label2:
        return;
    }

    protected void copyStructures(int, ucar.ma2.StructureMembers$Member, ucar.ma2.IndexIterator)
    {
        ucar.ma2.ArrayStructure r0;
        ucar.ma2.IndexIterator $r3, r4;
        ucar.ma2.Array $r2;
        ucar.ma2.StructureMembers$Member r1;
        int i0;
        java.lang.Object $r5;
        boolean $z0;

        r0 := @this: ucar.ma2.ArrayStructure;

        i0 := @parameter0: int;

        r1 := @parameter1: ucar.ma2.StructureMembers$Member;

        r4 := @parameter2: ucar.ma2.IndexIterator;

        $r2 = virtualinvoke r0.<ucar.ma2.ArrayStructure: ucar.ma2.Array getArray(int,ucar.ma2.StructureMembers$Member)>(i0, r1);

        $r3 = virtualinvoke $r2.<ucar.ma2.Array: ucar.ma2.IndexIterator getIndexIterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<ucar.ma2.IndexIterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r3.<ucar.ma2.IndexIterator: java.lang.Object getObjectNext()>();

        interfaceinvoke r4.<ucar.ma2.IndexIterator: void setObjectNext(java.lang.Object)>($r5);

        goto label1;

     label2:
        return;
    }

    protected void copySequences(int, ucar.ma2.StructureMembers$Member, ucar.ma2.IndexIterator)
    {
        ucar.ma2.ArrayStructure r0;
        ucar.ma2.IndexIterator r3;
        int i0;
        ucar.ma2.Array $r2;
        ucar.ma2.StructureMembers$Member r1;

        r0 := @this: ucar.ma2.ArrayStructure;

        i0 := @parameter0: int;

        r1 := @parameter1: ucar.ma2.StructureMembers$Member;

        r3 := @parameter2: ucar.ma2.IndexIterator;

        $r2 = virtualinvoke r0.<ucar.ma2.ArrayStructure: ucar.ma2.Array getArray(int,ucar.ma2.StructureMembers$Member)>(i0, r1);

        interfaceinvoke r3.<ucar.ma2.IndexIterator: void setObjectNext(java.lang.Object)>($r2);

        return;
    }

    public java.lang.Object getScalarObject(int, ucar.ma2.StructureMembers$Member)
    {
        java.lang.Float $r31;
        ucar.ma2.ArrayStructure r5;
        java.lang.Integer $r12;
        ucar.ma2.StructureMembers$Member r0;
        ucar.ma2.StructureData $r27;
        byte $b1;
        java.lang.Long $r30;
        java.lang.Short $r9;
        java.lang.Byte $r6;
        ucar.ma2.DataType $r1, $r2, $r3, $r4, $r7, $r8, $r10, $r11, $r13, $r14, $r15, $r16, $r17, $r18;
        float $f0;
        java.lang.StringBuilder $r20, $r21, $r22;
        java.lang.Double $r32;
        long $l6;
        short $s2;
        int i0, $i3, $i4, $i5;
        java.lang.String $r23, $r28, $r29;
        double $d0;
        ucar.ma2.ArrayObject r25;
        java.lang.RuntimeException $r19;
        ucar.ma2.Array $r24;
        java.lang.Object $r26;

        r5 := @this: ucar.ma2.ArrayStructure;

        i0 := @parameter0: int;

        r0 := @parameter1: ucar.ma2.StructureMembers$Member;

        $r1 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.DataType getDataType()>();

        $r2 = <ucar.ma2.DataType: ucar.ma2.DataType DOUBLE>;

        if $r1 != $r2 goto label01;

        $d0 = virtualinvoke r5.<ucar.ma2.ArrayStructure: double getScalarDouble(int,ucar.ma2.StructureMembers$Member)>(i0, r0);

        $r32 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        return $r32;

     label01:
        $r3 = <ucar.ma2.DataType: ucar.ma2.DataType FLOAT>;

        if $r1 != $r3 goto label02;

        $f0 = virtualinvoke r5.<ucar.ma2.ArrayStructure: float getScalarFloat(int,ucar.ma2.StructureMembers$Member)>(i0, r0);

        $r31 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f0);

        return $r31;

     label02:
        $r4 = <ucar.ma2.DataType: ucar.ma2.DataType BYTE>;

        if $r1 == $r4 goto label03;

        $r7 = <ucar.ma2.DataType: ucar.ma2.DataType ENUM1>;

        if $r1 != $r7 goto label04;

     label03:
        $b1 = virtualinvoke r5.<ucar.ma2.ArrayStructure: byte getScalarByte(int,ucar.ma2.StructureMembers$Member)>(i0, r0);

        $r6 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>($b1);

        return $r6;

     label04:
        $r8 = <ucar.ma2.DataType: ucar.ma2.DataType SHORT>;

        if $r1 == $r8 goto label05;

        $r10 = <ucar.ma2.DataType: ucar.ma2.DataType ENUM2>;

        if $r1 != $r10 goto label06;

     label05:
        $s2 = virtualinvoke r5.<ucar.ma2.ArrayStructure: short getScalarShort(int,ucar.ma2.StructureMembers$Member)>(i0, r0);

        $r9 = staticinvoke <java.lang.Short: java.lang.Short valueOf(short)>($s2);

        return $r9;

     label06:
        $r11 = <ucar.ma2.DataType: ucar.ma2.DataType INT>;

        if $r1 == $r11 goto label07;

        $r13 = <ucar.ma2.DataType: ucar.ma2.DataType ENUM4>;

        if $r1 != $r13 goto label08;

     label07:
        $i3 = virtualinvoke r5.<ucar.ma2.ArrayStructure: int getScalarInt(int,ucar.ma2.StructureMembers$Member)>(i0, r0);

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        return $r12;

     label08:
        $r14 = <ucar.ma2.DataType: ucar.ma2.DataType LONG>;

        if $r1 != $r14 goto label09;

        $l6 = virtualinvoke r5.<ucar.ma2.ArrayStructure: long getScalarLong(int,ucar.ma2.StructureMembers$Member)>(i0, r0);

        $r30 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l6);

        return $r30;

     label09:
        $r15 = <ucar.ma2.DataType: ucar.ma2.DataType CHAR>;

        if $r1 != $r15 goto label10;

        $r29 = virtualinvoke r5.<ucar.ma2.ArrayStructure: java.lang.String getScalarString(int,ucar.ma2.StructureMembers$Member)>(i0, r0);

        return $r29;

     label10:
        $r16 = <ucar.ma2.DataType: ucar.ma2.DataType STRING>;

        if $r1 != $r16 goto label11;

        $r28 = virtualinvoke r5.<ucar.ma2.ArrayStructure: java.lang.String getScalarString(int,ucar.ma2.StructureMembers$Member)>(i0, r0);

        return $r28;

     label11:
        $r17 = <ucar.ma2.DataType: ucar.ma2.DataType STRUCTURE>;

        if $r1 != $r17 goto label12;

        $r27 = virtualinvoke r5.<ucar.ma2.ArrayStructure: ucar.ma2.StructureData getScalarStructure(int,ucar.ma2.StructureMembers$Member)>(i0, r0);

        return $r27;

     label12:
        $r18 = <ucar.ma2.DataType: ucar.ma2.DataType OPAQUE>;

        if $r1 != $r18 goto label13;

        $r24 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.Array getDataArray()>();

        r25 = (ucar.ma2.ArrayObject) $r24;

        $i4 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: int getSize()>();

        $i5 = i0 * $i4;

        $r26 = virtualinvoke r25.<ucar.ma2.ArrayObject: java.lang.Object getObject(int)>($i5);

        return $r26;

     label13:
        $r19 = new java.lang.RuntimeException;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Dont have implementation for ");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r19.<java.lang.RuntimeException: void <init>(java.lang.String)>($r23);

        throw $r19;
    }

    public float convertScalarFloat(int, ucar.ma2.StructureMembers$Member)
    {
        ucar.ma2.ArrayStructure r5;
        ucar.ma2.ForbiddenConversionException $r7;
        ucar.ma2.StructureMembers$Member r0;
        int i0;
        java.lang.String $r13;
        java.lang.Number $r14;
        boolean $z0;
        double $d0;
        ucar.ma2.DataType $r1, $r2, $r3, $r4, $r10;
        float $f0, $f1, $f2;
        java.lang.Object $r6;
        java.lang.StringBuilder $r8, $r9, $r11, $r12;

        r5 := @this: ucar.ma2.ArrayStructure;

        i0 := @parameter0: int;

        r0 := @parameter1: ucar.ma2.StructureMembers$Member;

        $r1 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.DataType getDataType()>();

        $r2 = <ucar.ma2.DataType: ucar.ma2.DataType FLOAT>;

        if $r1 != $r2 goto label1;

        $f2 = virtualinvoke r5.<ucar.ma2.ArrayStructure: float getScalarFloat(int,ucar.ma2.StructureMembers$Member)>(i0, r0);

        return $f2;

     label1:
        $r3 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.DataType getDataType()>();

        $r4 = <ucar.ma2.DataType: ucar.ma2.DataType DOUBLE>;

        if $r3 != $r4 goto label2;

        $d0 = virtualinvoke r5.<ucar.ma2.ArrayStructure: double getScalarDouble(int,ucar.ma2.StructureMembers$Member)>(i0, r0);

        $f1 = (float) $d0;

        return $f1;

     label2:
        $r6 = virtualinvoke r5.<ucar.ma2.ArrayStructure: java.lang.Object getScalarObject(int,ucar.ma2.StructureMembers$Member)>(i0, r0);

        $z0 = $r6 instanceof java.lang.Number;

        if $z0 == 0 goto label3;

        $r14 = (java.lang.Number) $r6;

        $f0 = virtualinvoke $r14.<java.lang.Number: float floatValue()>();

        return $f0;

     label3:
        $r7 = new ucar.ma2.ForbiddenConversionException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Type is ");

        $r10 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.DataType getDataType()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", not convertible to float");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<ucar.ma2.ForbiddenConversionException: void <init>(java.lang.String)>($r13);

        throw $r7;
    }

    public double convertScalarDouble(int, ucar.ma2.StructureMembers$Member)
    {
        ucar.ma2.ArrayStructure r5;
        ucar.ma2.ForbiddenConversionException $r7;
        ucar.ma2.StructureMembers$Member r0;
        int i0;
        java.lang.String $r13;
        java.lang.Number $r14;
        boolean $z0;
        double $d0, $d1, $d2;
        ucar.ma2.DataType $r1, $r2, $r3, $r4, $r10;
        float $f0;
        java.lang.Object $r6;
        java.lang.StringBuilder $r8, $r9, $r11, $r12;

        r5 := @this: ucar.ma2.ArrayStructure;

        i0 := @parameter0: int;

        r0 := @parameter1: ucar.ma2.StructureMembers$Member;

        $r1 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.DataType getDataType()>();

        $r2 = <ucar.ma2.DataType: ucar.ma2.DataType DOUBLE>;

        if $r1 != $r2 goto label1;

        $d2 = virtualinvoke r5.<ucar.ma2.ArrayStructure: double getScalarDouble(int,ucar.ma2.StructureMembers$Member)>(i0, r0);

        return $d2;

     label1:
        $r3 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.DataType getDataType()>();

        $r4 = <ucar.ma2.DataType: ucar.ma2.DataType FLOAT>;

        if $r3 != $r4 goto label2;

        $f0 = virtualinvoke r5.<ucar.ma2.ArrayStructure: float getScalarFloat(int,ucar.ma2.StructureMembers$Member)>(i0, r0);

        $d1 = (double) $f0;

        return $d1;

     label2:
        $r6 = virtualinvoke r5.<ucar.ma2.ArrayStructure: java.lang.Object getScalarObject(int,ucar.ma2.StructureMembers$Member)>(i0, r0);

        $z0 = $r6 instanceof java.lang.Number;

        if $z0 == 0 goto label3;

        $r14 = (java.lang.Number) $r6;

        $d0 = virtualinvoke $r14.<java.lang.Number: double doubleValue()>();

        return $d0;

     label3:
        $r7 = new ucar.ma2.ForbiddenConversionException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Type is ");

        $r10 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.DataType getDataType()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", not convertible to double");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<ucar.ma2.ForbiddenConversionException: void <init>(java.lang.String)>($r13);

        throw $r7;
    }

    public int convertScalarInt(int, ucar.ma2.StructureMembers$Member)
    {
        ucar.ma2.ArrayStructure r9;
        long $l2;
        ucar.ma2.ForbiddenConversionException $r20;
        ucar.ma2.StructureMembers$Member r0;
        short $s5;
        byte $b4;
        int i0, $i1, $i3, $i6, $i7, $i8;
        java.lang.String $r17;
        java.lang.Number $r18;
        boolean $z0;
        ucar.ma2.DataType $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r14;
        java.lang.Object $r10;
        java.lang.StringBuilder $r13, $r15, $r16, $r19;

        r9 := @this: ucar.ma2.ArrayStructure;

        i0 := @parameter0: int;

        r0 := @parameter1: ucar.ma2.StructureMembers$Member;

        $r1 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.DataType getDataType()>();

        $r2 = <ucar.ma2.DataType: ucar.ma2.DataType INT>;

        if $r1 != $r2 goto label1;

        $i6 = virtualinvoke r9.<ucar.ma2.ArrayStructure: int getScalarInt(int,ucar.ma2.StructureMembers$Member)>(i0, r0);

        return $i6;

     label1:
        $r3 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.DataType getDataType()>();

        $r4 = <ucar.ma2.DataType: ucar.ma2.DataType SHORT>;

        if $r3 != $r4 goto label2;

        $s5 = virtualinvoke r9.<ucar.ma2.ArrayStructure: short getScalarShort(int,ucar.ma2.StructureMembers$Member)>(i0, r0);

        $i7 = (int) $s5;

        return $i7;

     label2:
        $r5 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.DataType getDataType()>();

        $r6 = <ucar.ma2.DataType: ucar.ma2.DataType BYTE>;

        if $r5 != $r6 goto label3;

        $b4 = virtualinvoke r9.<ucar.ma2.ArrayStructure: byte getScalarByte(int,ucar.ma2.StructureMembers$Member)>(i0, r0);

        $i8 = (int) $b4;

        return $i8;

     label3:
        $r7 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.DataType getDataType()>();

        $r8 = <ucar.ma2.DataType: ucar.ma2.DataType LONG>;

        if $r7 != $r8 goto label4;

        $l2 = virtualinvoke r9.<ucar.ma2.ArrayStructure: long getScalarLong(int,ucar.ma2.StructureMembers$Member)>(i0, r0);

        $i3 = (int) $l2;

        return $i3;

     label4:
        $r10 = virtualinvoke r9.<ucar.ma2.ArrayStructure: java.lang.Object getScalarObject(int,ucar.ma2.StructureMembers$Member)>(i0, r0);

        $z0 = $r10 instanceof java.lang.Number;

        if $z0 == 0 goto label5;

        $r18 = (java.lang.Number) $r10;

        $i1 = virtualinvoke $r18.<java.lang.Number: int intValue()>();

        return $i1;

     label5:
        $r20 = new ucar.ma2.ForbiddenConversionException;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Type is ");

        $r14 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.DataType getDataType()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", not convertible to int");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r20.<ucar.ma2.ForbiddenConversionException: void <init>(java.lang.String)>($r17);

        throw $r20;
    }

    public long convertScalarLong(int, ucar.ma2.StructureMembers$Member)
    {
        ucar.ma2.ArrayStructure r9;
        long $l1, $l3, $l5, $l7, $l8;
        ucar.ma2.ForbiddenConversionException $r11;
        ucar.ma2.StructureMembers$Member r0;
        short $s4;
        byte $b2;
        int i0, $i6;
        java.lang.String $r17;
        java.lang.Number $r18;
        boolean $z0;
        ucar.ma2.DataType $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r14;
        java.lang.Object $r10;
        java.lang.StringBuilder $r12, $r13, $r15, $r16;

        r9 := @this: ucar.ma2.ArrayStructure;

        i0 := @parameter0: int;

        r0 := @parameter1: ucar.ma2.StructureMembers$Member;

        $r1 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.DataType getDataType()>();

        $r2 = <ucar.ma2.DataType: ucar.ma2.DataType LONG>;

        if $r1 != $r2 goto label1;

        $l8 = virtualinvoke r9.<ucar.ma2.ArrayStructure: long getScalarLong(int,ucar.ma2.StructureMembers$Member)>(i0, r0);

        return $l8;

     label1:
        $r3 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.DataType getDataType()>();

        $r4 = <ucar.ma2.DataType: ucar.ma2.DataType INT>;

        if $r3 != $r4 goto label2;

        $i6 = virtualinvoke r9.<ucar.ma2.ArrayStructure: int getScalarInt(int,ucar.ma2.StructureMembers$Member)>(i0, r0);

        $l7 = (long) $i6;

        return $l7;

     label2:
        $r5 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.DataType getDataType()>();

        $r6 = <ucar.ma2.DataType: ucar.ma2.DataType SHORT>;

        if $r5 != $r6 goto label3;

        $s4 = virtualinvoke r9.<ucar.ma2.ArrayStructure: short getScalarShort(int,ucar.ma2.StructureMembers$Member)>(i0, r0);

        $l5 = (long) $s4;

        return $l5;

     label3:
        $r7 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.DataType getDataType()>();

        $r8 = <ucar.ma2.DataType: ucar.ma2.DataType BYTE>;

        if $r7 != $r8 goto label4;

        $b2 = virtualinvoke r9.<ucar.ma2.ArrayStructure: byte getScalarByte(int,ucar.ma2.StructureMembers$Member)>(i0, r0);

        $l3 = (long) $b2;

        return $l3;

     label4:
        $r10 = virtualinvoke r9.<ucar.ma2.ArrayStructure: java.lang.Object getScalarObject(int,ucar.ma2.StructureMembers$Member)>(i0, r0);

        $z0 = $r10 instanceof java.lang.Number;

        if $z0 == 0 goto label5;

        $r18 = (java.lang.Number) $r10;

        $l1 = virtualinvoke $r18.<java.lang.Number: long longValue()>();

        return $l1;

     label5:
        $r11 = new ucar.ma2.ForbiddenConversionException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Type is ");

        $r14 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.DataType getDataType()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", not convertible to int");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<ucar.ma2.ForbiddenConversionException: void <init>(java.lang.String)>($r17);

        throw $r11;
    }

    public double getScalarDouble(int, ucar.ma2.StructureMembers$Member)
    {
        ucar.ma2.ArrayStructure r11;
        ucar.ma2.StructureMembers$Member r0;
        int i0, $i1, $i2;
        java.lang.String $r10;
        double $d0;
        ucar.ma2.DataType $r1, $r2, $r7;
        java.lang.IllegalArgumentException $r4;
        ucar.ma2.Array $r3;
        java.lang.StringBuilder $r5, $r6, $r8, $r9;

        r11 := @this: ucar.ma2.ArrayStructure;

        i0 := @parameter0: int;

        r0 := @parameter1: ucar.ma2.StructureMembers$Member;

        $r1 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.DataType getDataType()>();

        $r2 = <ucar.ma2.DataType: ucar.ma2.DataType DOUBLE>;

        if $r1 == $r2 goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Type is ");

        $r7 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.DataType getDataType()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", must be double");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r4;

     label1:
        $r3 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.Array getDataArray()>();

        $i1 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: int getSize()>();

        $i2 = i0 * $i1;

        $d0 = virtualinvoke $r3.<ucar.ma2.Array: double getDouble(int)>($i2);

        return $d0;
    }

    public double[] getJavaArrayDouble(int, ucar.ma2.StructureMembers$Member)
    {
        ucar.ma2.ArrayStructure r12;
        double[] r4;
        ucar.ma2.StructureMembers$Member r0;
        int $i0, i1, $i2, $i3, i4;
        java.lang.String $r11;
        double $d0;
        ucar.ma2.DataType $r1, $r2, $r8;
        java.lang.IllegalArgumentException $r5;
        ucar.ma2.Array $r3;
        java.lang.StringBuilder $r6, $r7, $r9, $r10;

        r12 := @this: ucar.ma2.ArrayStructure;

        i1 := @parameter0: int;

        r0 := @parameter1: ucar.ma2.StructureMembers$Member;

        $r1 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.DataType getDataType()>();

        $r2 = <ucar.ma2.DataType: ucar.ma2.DataType DOUBLE>;

        if $r1 == $r2 goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Type is ");

        $r8 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.DataType getDataType()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", must be double");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);

        throw $r5;

     label1:
        $i0 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: int getSize()>();

        $r3 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.Array getDataArray()>();

        r4 = newarray (double)[$i0];

        i4 = 0;

     label2:
        if i4 >= $i0 goto label3;

        $i2 = i1 * $i0;

        $i3 = $i2 + i4;

        $d0 = virtualinvoke $r3.<ucar.ma2.Array: double getDouble(int)>($i3);

        r4[i4] = $d0;

        i4 = i4 + 1;

        goto label2;

     label3:
        return r4;
    }

    public float getScalarFloat(int, ucar.ma2.StructureMembers$Member)
    {
        ucar.ma2.ArrayStructure r11;
        ucar.ma2.StructureMembers$Member r0;
        int i0, $i1, $i2;
        java.lang.String $r10;
        ucar.ma2.DataType $r1, $r2, $r7;
        java.lang.IllegalArgumentException $r4;
        ucar.ma2.Array $r3;
        float $f0;
        java.lang.StringBuilder $r5, $r6, $r8, $r9;

        r11 := @this: ucar.ma2.ArrayStructure;

        i0 := @parameter0: int;

        r0 := @parameter1: ucar.ma2.StructureMembers$Member;

        $r1 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.DataType getDataType()>();

        $r2 = <ucar.ma2.DataType: ucar.ma2.DataType FLOAT>;

        if $r1 == $r2 goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Type is ");

        $r7 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.DataType getDataType()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", must be float");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r4;

     label1:
        $r3 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.Array getDataArray()>();

        $i1 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: int getSize()>();

        $i2 = i0 * $i1;

        $f0 = virtualinvoke $r3.<ucar.ma2.Array: float getFloat(int)>($i2);

        return $f0;
    }

    public float[] getJavaArrayFloat(int, ucar.ma2.StructureMembers$Member)
    {
        ucar.ma2.ArrayStructure r12;
        float[] r4;
        ucar.ma2.StructureMembers$Member r0;
        int $i0, i1, $i2, $i3, i4;
        java.lang.String $r11;
        ucar.ma2.DataType $r1, $r2, $r8;
        java.lang.IllegalArgumentException $r5;
        ucar.ma2.Array $r3;
        float $f0;
        java.lang.StringBuilder $r6, $r7, $r9, $r10;

        r12 := @this: ucar.ma2.ArrayStructure;

        i1 := @parameter0: int;

        r0 := @parameter1: ucar.ma2.StructureMembers$Member;

        $r1 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.DataType getDataType()>();

        $r2 = <ucar.ma2.DataType: ucar.ma2.DataType FLOAT>;

        if $r1 == $r2 goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Type is ");

        $r8 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.DataType getDataType()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", must be float");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);

        throw $r5;

     label1:
        $i0 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: int getSize()>();

        $r3 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.Array getDataArray()>();

        r4 = newarray (float)[$i0];

        i4 = 0;

     label2:
        if i4 >= $i0 goto label3;

        $i2 = i1 * $i0;

        $i3 = $i2 + i4;

        $f0 = virtualinvoke $r3.<ucar.ma2.Array: float getFloat(int)>($i3);

        r4[i4] = $f0;

        i4 = i4 + 1;

        goto label2;

     label3:
        return r4;
    }

    public byte getScalarByte(int, ucar.ma2.StructureMembers$Member)
    {
        ucar.ma2.ArrayStructure r13;
        ucar.ma2.StructureMembers$Member r0;
        byte $b3;
        int i0, $i1, $i2;
        java.lang.String $r12;
        ucar.ma2.DataType $r1, $r2, $r4, $r5, $r9;
        java.lang.IllegalArgumentException $r6;
        ucar.ma2.Array $r3;
        java.lang.StringBuilder $r7, $r8, $r10, $r11;

        r13 := @this: ucar.ma2.ArrayStructure;

        i0 := @parameter0: int;

        r0 := @parameter1: ucar.ma2.StructureMembers$Member;

        $r1 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.DataType getDataType()>();

        $r2 = <ucar.ma2.DataType: ucar.ma2.DataType BYTE>;

        if $r1 == $r2 goto label1;

        $r4 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.DataType getDataType()>();

        $r5 = <ucar.ma2.DataType: ucar.ma2.DataType ENUM1>;

        if $r4 == $r5 goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Type is ");

        $r9 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.DataType getDataType()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", must be byte");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r12);

        throw $r6;

     label1:
        $r3 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.Array getDataArray()>();

        $i1 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: int getSize()>();

        $i2 = i0 * $i1;

        $b3 = virtualinvoke $r3.<ucar.ma2.Array: byte getByte(int)>($i2);

        return $b3;
    }

    public byte[] getJavaArrayByte(int, ucar.ma2.StructureMembers$Member)
    {
        byte[] $r6;
        ucar.ma2.ArrayStructure r14;
        ucar.ma2.StructureMembers$Member r0;
        byte $b4;
        int $i0, i1, $i2, $i3, i5;
        java.lang.String $r13;
        ucar.ma2.DataType $r1, $r2, $r4, $r5, $r10;
        java.lang.IllegalArgumentException $r7;
        ucar.ma2.Array $r3;
        java.lang.StringBuilder $r8, $r9, $r11, $r12;

        r14 := @this: ucar.ma2.ArrayStructure;

        i1 := @parameter0: int;

        r0 := @parameter1: ucar.ma2.StructureMembers$Member;

        $r1 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.DataType getDataType()>();

        $r2 = <ucar.ma2.DataType: ucar.ma2.DataType BYTE>;

        if $r1 == $r2 goto label1;

        $r4 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.DataType getDataType()>();

        $r5 = <ucar.ma2.DataType: ucar.ma2.DataType ENUM1>;

        if $r4 == $r5 goto label1;

        $r7 = new java.lang.IllegalArgumentException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Type is ");

        $r10 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.DataType getDataType()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", must be byte");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r13);

        throw $r7;

     label1:
        $i0 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: int getSize()>();

        $r3 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.Array getDataArray()>();

        $r6 = newarray (byte)[$i0];

        i5 = 0;

     label2:
        if i5 >= $i0 goto label3;

        $i2 = i1 * $i0;

        $i3 = $i2 + i5;

        $b4 = virtualinvoke $r3.<ucar.ma2.Array: byte getByte(int)>($i3);

        $r6[i5] = $b4;

        i5 = i5 + 1;

        goto label2;

     label3:
        return $r6;
    }

    public short getScalarShort(int, ucar.ma2.StructureMembers$Member)
    {
        ucar.ma2.ArrayStructure r13;
        ucar.ma2.StructureMembers$Member r0;
        short $s3;
        int i0, $i1, $i2;
        java.lang.String $r12;
        ucar.ma2.DataType $r1, $r2, $r4, $r5, $r9;
        java.lang.IllegalArgumentException $r6;
        ucar.ma2.Array $r3;
        java.lang.StringBuilder $r7, $r8, $r10, $r11;

        r13 := @this: ucar.ma2.ArrayStructure;

        i0 := @parameter0: int;

        r0 := @parameter1: ucar.ma2.StructureMembers$Member;

        $r1 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.DataType getDataType()>();

        $r2 = <ucar.ma2.DataType: ucar.ma2.DataType SHORT>;

        if $r1 == $r2 goto label1;

        $r4 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.DataType getDataType()>();

        $r5 = <ucar.ma2.DataType: ucar.ma2.DataType ENUM2>;

        if $r4 == $r5 goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Type is ");

        $r9 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.DataType getDataType()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", must be short");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r12);

        throw $r6;

     label1:
        $r3 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.Array getDataArray()>();

        $i1 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: int getSize()>();

        $i2 = i0 * $i1;

        $s3 = virtualinvoke $r3.<ucar.ma2.Array: short getShort(int)>($i2);

        return $s3;
    }

    public short[] getJavaArrayShort(int, ucar.ma2.StructureMembers$Member)
    {
        ucar.ma2.ArrayStructure r14;
        ucar.ma2.StructureMembers$Member r0;
        short $s4;
        int $i0, i1, $i2, $i3, i5;
        java.lang.String $r13;
        ucar.ma2.DataType $r1, $r2, $r4, $r5, $r10;
        java.lang.IllegalArgumentException $r7;
        ucar.ma2.Array $r3;
        java.lang.StringBuilder $r8, $r9, $r11, $r12;
        short[] $r6;

        r14 := @this: ucar.ma2.ArrayStructure;

        i1 := @parameter0: int;

        r0 := @parameter1: ucar.ma2.StructureMembers$Member;

        $r1 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.DataType getDataType()>();

        $r2 = <ucar.ma2.DataType: ucar.ma2.DataType SHORT>;

        if $r1 == $r2 goto label1;

        $r4 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.DataType getDataType()>();

        $r5 = <ucar.ma2.DataType: ucar.ma2.DataType ENUM2>;

        if $r4 == $r5 goto label1;

        $r7 = new java.lang.IllegalArgumentException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Type is ");

        $r10 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.DataType getDataType()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", must be short");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r13);

        throw $r7;

     label1:
        $i0 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: int getSize()>();

        $r3 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.Array getDataArray()>();

        $r6 = newarray (short)[$i0];

        i5 = 0;

     label2:
        if i5 >= $i0 goto label3;

        $i2 = i1 * $i0;

        $i3 = $i2 + i5;

        $s4 = virtualinvoke $r3.<ucar.ma2.Array: short getShort(int)>($i3);

        $r6[i5] = $s4;

        i5 = i5 + 1;

        goto label2;

     label3:
        return $r6;
    }

    public int getScalarInt(int, ucar.ma2.StructureMembers$Member)
    {
        ucar.ma2.ArrayStructure r13;
        ucar.ma2.StructureMembers$Member r0;
        int i0, $i1, $i2, $i3;
        java.lang.String $r12;
        ucar.ma2.DataType $r1, $r2, $r4, $r5, $r9;
        java.lang.IllegalArgumentException $r6;
        ucar.ma2.Array $r3;
        java.lang.StringBuilder $r7, $r8, $r10, $r11;

        r13 := @this: ucar.ma2.ArrayStructure;

        i0 := @parameter0: int;

        r0 := @parameter1: ucar.ma2.StructureMembers$Member;

        $r1 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.DataType getDataType()>();

        $r2 = <ucar.ma2.DataType: ucar.ma2.DataType INT>;

        if $r1 == $r2 goto label1;

        $r4 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.DataType getDataType()>();

        $r5 = <ucar.ma2.DataType: ucar.ma2.DataType ENUM4>;

        if $r4 == $r5 goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Type is ");

        $r9 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.DataType getDataType()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", must be int");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r12);

        throw $r6;

     label1:
        $r3 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.Array getDataArray()>();

        $i1 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: int getSize()>();

        $i2 = i0 * $i1;

        $i3 = virtualinvoke $r3.<ucar.ma2.Array: int getInt(int)>($i2);

        return $i3;
    }

    public int[] getJavaArrayInt(int, ucar.ma2.StructureMembers$Member)
    {
        ucar.ma2.ArrayStructure r14;
        ucar.ma2.StructureMembers$Member r0;
        int[] $r6;
        int $i0, i1, $i2, $i3, $i4, i5;
        java.lang.String $r13;
        ucar.ma2.DataType $r1, $r2, $r4, $r5, $r10;
        java.lang.IllegalArgumentException $r7;
        ucar.ma2.Array $r3;
        java.lang.StringBuilder $r8, $r9, $r11, $r12;

        r14 := @this: ucar.ma2.ArrayStructure;

        i1 := @parameter0: int;

        r0 := @parameter1: ucar.ma2.StructureMembers$Member;

        $r1 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.DataType getDataType()>();

        $r2 = <ucar.ma2.DataType: ucar.ma2.DataType INT>;

        if $r1 == $r2 goto label1;

        $r4 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.DataType getDataType()>();

        $r5 = <ucar.ma2.DataType: ucar.ma2.DataType ENUM4>;

        if $r4 == $r5 goto label1;

        $r7 = new java.lang.IllegalArgumentException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Type is ");

        $r10 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.DataType getDataType()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", must be int");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r13);

        throw $r7;

     label1:
        $i0 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: int getSize()>();

        $r3 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.Array getDataArray()>();

        $r6 = newarray (int)[$i0];

        i5 = 0;

     label2:
        if i5 >= $i0 goto label3;

        $i2 = i1 * $i0;

        $i3 = $i2 + i5;

        $i4 = virtualinvoke $r3.<ucar.ma2.Array: int getInt(int)>($i3);

        $r6[i5] = $i4;

        i5 = i5 + 1;

        goto label2;

     label3:
        return $r6;
    }

    public long getScalarLong(int, ucar.ma2.StructureMembers$Member)
    {
        ucar.ma2.ArrayStructure r11;
        long $l3;
        ucar.ma2.StructureMembers$Member r0;
        int i0, $i1, $i2;
        java.lang.String $r10;
        ucar.ma2.DataType $r1, $r2, $r7;
        java.lang.IllegalArgumentException $r4;
        ucar.ma2.Array $r3;
        java.lang.StringBuilder $r5, $r6, $r8, $r9;

        r11 := @this: ucar.ma2.ArrayStructure;

        i0 := @parameter0: int;

        r0 := @parameter1: ucar.ma2.StructureMembers$Member;

        $r1 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.DataType getDataType()>();

        $r2 = <ucar.ma2.DataType: ucar.ma2.DataType LONG>;

        if $r1 == $r2 goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Type is ");

        $r7 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.DataType getDataType()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", must be long");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r4;

     label1:
        $r3 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.Array getDataArray()>();

        $i1 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: int getSize()>();

        $i2 = i0 * $i1;

        $l3 = virtualinvoke $r3.<ucar.ma2.Array: long getLong(int)>($i2);

        return $l3;
    }

    public long[] getJavaArrayLong(int, ucar.ma2.StructureMembers$Member)
    {
        ucar.ma2.ArrayStructure r12;
        long $l4;
        ucar.ma2.StructureMembers$Member r0;
        long[] r4;
        int $i0, i1, $i2, $i3, i5;
        java.lang.String $r11;
        ucar.ma2.DataType $r1, $r2, $r8;
        java.lang.IllegalArgumentException $r5;
        ucar.ma2.Array $r3;
        java.lang.StringBuilder $r6, $r7, $r9, $r10;

        r12 := @this: ucar.ma2.ArrayStructure;

        i1 := @parameter0: int;

        r0 := @parameter1: ucar.ma2.StructureMembers$Member;

        $r1 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.DataType getDataType()>();

        $r2 = <ucar.ma2.DataType: ucar.ma2.DataType LONG>;

        if $r1 == $r2 goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Type is ");

        $r8 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.DataType getDataType()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", must be long");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);

        throw $r5;

     label1:
        $i0 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: int getSize()>();

        $r3 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.Array getDataArray()>();

        r4 = newarray (long)[$i0];

        i5 = 0;

     label2:
        if i5 >= $i0 goto label3;

        $i2 = i1 * $i0;

        $i3 = $i2 + i5;

        $l4 = virtualinvoke $r3.<ucar.ma2.Array: long getLong(int)>($i3);

        r4[i5] = $l4;

        i5 = i5 + 1;

        goto label2;

     label3:
        return r4;
    }

    public char getScalarChar(int, ucar.ma2.StructureMembers$Member)
    {
        ucar.ma2.ArrayStructure r11;
        ucar.ma2.StructureMembers$Member r0;
        int i0, $i1, $i2;
        java.lang.String $r10;
        ucar.ma2.DataType $r1, $r2, $r7;
        char $c3;
        java.lang.IllegalArgumentException $r4;
        ucar.ma2.Array $r3;
        java.lang.StringBuilder $r5, $r6, $r8, $r9;

        r11 := @this: ucar.ma2.ArrayStructure;

        i0 := @parameter0: int;

        r0 := @parameter1: ucar.ma2.StructureMembers$Member;

        $r1 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.DataType getDataType()>();

        $r2 = <ucar.ma2.DataType: ucar.ma2.DataType CHAR>;

        if $r1 == $r2 goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Type is ");

        $r7 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.DataType getDataType()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", must be char");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r4;

     label1:
        $r3 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.Array getDataArray()>();

        $i1 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: int getSize()>();

        $i2 = i0 * $i1;

        $c3 = virtualinvoke $r3.<ucar.ma2.Array: char getChar(int)>($i2);

        return $c3;
    }

    public char[] getJavaArrayChar(int, ucar.ma2.StructureMembers$Member)
    {
        ucar.ma2.ArrayStructure r12;
        ucar.ma2.StructureMembers$Member r0;
        int $i0, i1, $i2, $i3, i5;
        java.lang.String $r11;
        ucar.ma2.DataType $r1, $r2, $r8;
        char $c4;
        java.lang.IllegalArgumentException $r5;
        ucar.ma2.Array $r3;
        char[] r4;
        java.lang.StringBuilder $r6, $r7, $r9, $r10;

        r12 := @this: ucar.ma2.ArrayStructure;

        i1 := @parameter0: int;

        r0 := @parameter1: ucar.ma2.StructureMembers$Member;

        $r1 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.DataType getDataType()>();

        $r2 = <ucar.ma2.DataType: ucar.ma2.DataType CHAR>;

        if $r1 == $r2 goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Type is ");

        $r8 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.DataType getDataType()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", must be char");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);

        throw $r5;

     label1:
        $i0 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: int getSize()>();

        $r3 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.Array getDataArray()>();

        r4 = newarray (char)[$i0];

        i5 = 0;

     label2:
        if i5 >= $i0 goto label3;

        $i2 = i1 * $i0;

        $i3 = $i2 + i5;

        $c4 = virtualinvoke $r3.<ucar.ma2.Array: char getChar(int)>($i3);

        r4[i5] = $c4;

        i5 = i5 + 1;

        goto label2;

     label3:
        return r4;
    }

    public java.lang.String getScalarString(int, ucar.ma2.StructureMembers$Member)
    {
        ucar.ma2.ArrayStructure r17;
        ucar.ma2.StructureMembers$Member r0;
        ucar.ma2.ArrayChar r18;
        int i0;
        java.lang.String $r11, $r14, $r16;
        ucar.ma2.DataType $r1, $r2, $r3, $r4, $r8;
        java.lang.IllegalArgumentException $r5;
        ucar.ma2.Array $r12, $r15;
        java.lang.StringBuilder $r6, $r7, $r9, $r10;
        java.lang.Object $r13;

        r17 := @this: ucar.ma2.ArrayStructure;

        i0 := @parameter0: int;

        r0 := @parameter1: ucar.ma2.StructureMembers$Member;

        $r1 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.DataType getDataType()>();

        $r2 = <ucar.ma2.DataType: ucar.ma2.DataType CHAR>;

        if $r1 != $r2 goto label1;

        $r15 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.Array getDataArray()>();

        r18 = (ucar.ma2.ArrayChar) $r15;

        $r16 = virtualinvoke r18.<ucar.ma2.ArrayChar: java.lang.String getString(int)>(i0);

        return $r16;

     label1:
        $r3 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.DataType getDataType()>();

        $r4 = <ucar.ma2.DataType: ucar.ma2.DataType STRING>;

        if $r3 != $r4 goto label2;

        $r12 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.Array getDataArray()>();

        $r13 = virtualinvoke $r12.<ucar.ma2.Array: java.lang.Object getObject(int)>(i0);

        $r14 = (java.lang.String) $r13;

        return $r14;

     label2:
        $r5 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Type is ");

        $r8 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.DataType getDataType()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", must be String or char");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);

        throw $r5;
    }

    public java.lang.String[] getJavaArrayString(int, ucar.ma2.StructureMembers$Member)
    {
        ucar.ma2.ArrayStructure r12;
        ucar.ma2.StructureMembers$Member r0;
        ucar.ma2.DataType $r1, $r2, $r3, $r4, $r8;
        java.lang.StringBuilder $r6, $r7, $r9, $r10;
        java.lang.String[] r19, r20;
        ucar.ma2.ArrayChar r21;
        int $i0, $i1, $i2, $i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, i11, i12, i13;
        java.lang.String $r11, $r15, $r18;
        java.lang.IllegalArgumentException $r5;
        ucar.ma2.Array $r14, $r16;
        ucar.ma2.Index $r13;
        java.lang.Object $r17;

        r12 := @this: ucar.ma2.ArrayStructure;

        i4 := @parameter0: int;

        r0 := @parameter1: ucar.ma2.StructureMembers$Member;

        $r1 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.DataType getDataType()>();

        $r2 = <ucar.ma2.DataType: ucar.ma2.DataType STRING>;

        if $r1 != $r2 goto label3;

        $i8 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: int getSize()>();

        r19 = newarray (java.lang.String)[$i8];

        $r16 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.Array getDataArray()>();

        i11 = 0;

     label1:
        if i11 >= $i8 goto label2;

        $i9 = i4 * $i8;

        $i10 = $i9 + i11;

        $r17 = virtualinvoke $r16.<ucar.ma2.Array: java.lang.Object getObject(int)>($i10);

        $r18 = (java.lang.String) $r17;

        r19[i11] = $r18;

        i11 = i11 + 1;

        goto label1;

     label2:
        return r19;

     label3:
        $r3 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.DataType getDataType()>();

        $r4 = <ucar.ma2.DataType: ucar.ma2.DataType CHAR>;

        if $r3 != $r4 goto label6;

        $r13 = r12.<ucar.ma2.ArrayStructure: ucar.ma2.Index indexCalc>;

        $i0 = r12.<ucar.ma2.ArrayStructure: int rank>;

        $i1 = $i0 - 1;

        $i2 = virtualinvoke $r13.<ucar.ma2.Index: int getShape(int)>($i1);

        $i3 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: int getSize()>();

        i12 = $i3 / $i2;

        r20 = newarray (java.lang.String)[i12];

        $r14 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.Array getDataArray()>();

        r21 = (ucar.ma2.ArrayChar) $r14;

        i13 = 0;

     label4:
        if i13 >= i12 goto label5;

        $i5 = i4 * i12;

        $i6 = $i5 + i13;

        $i7 = $i6 * $i2;

        $r15 = virtualinvoke r21.<ucar.ma2.ArrayChar: java.lang.String getString(int)>($i7);

        r20[i13] = $r15;

        i13 = i13 + 1;

        goto label4;

     label5:
        return r20;

     label6:
        $r5 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Type is ");

        $r8 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.DataType getDataType()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", must be String or char");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);

        throw $r5;
    }

    public ucar.ma2.StructureData getScalarStructure(int, ucar.ma2.StructureMembers$Member)
    {
        ucar.ma2.ArrayStructure r4, r13;
        ucar.ma2.StructureMembers$Member r0;
        ucar.ma2.StructureData $r5;
        int i0, $i1, $i2;
        java.lang.String $r12;
        ucar.ma2.DataType $r1, $r2, $r9;
        java.lang.IllegalArgumentException $r6;
        ucar.ma2.Array $r3;
        java.lang.StringBuilder $r7, $r8, $r10, $r11;

        r13 := @this: ucar.ma2.ArrayStructure;

        i0 := @parameter0: int;

        r0 := @parameter1: ucar.ma2.StructureMembers$Member;

        $r1 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.DataType getDataType()>();

        $r2 = <ucar.ma2.DataType: ucar.ma2.DataType STRUCTURE>;

        if $r1 == $r2 goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Type is ");

        $r9 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.DataType getDataType()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", must be Structure");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r12);

        throw $r6;

     label1:
        $r3 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.Array getDataArray()>();

        r4 = (ucar.ma2.ArrayStructure) $r3;

        $i1 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: int getSize()>();

        $i2 = i0 * $i1;

        $r5 = virtualinvoke r4.<ucar.ma2.ArrayStructure: ucar.ma2.StructureData getStructureData(int)>($i2);

        return $r5;
    }

    public ucar.ma2.ArrayStructure getArrayStructure(int, ucar.ma2.StructureMembers$Member)
    {
        ucar.ma2.ArrayStructure r6, r13;
        ucar.ma2.StructureMembers$Member r0;
        ucar.ma2.StructureData $r12;
        ucar.ma2.ArrayStructureW $r10;
        int[] $r11;
        int $i0, i1, $i2, $i3, i4;
        java.lang.String $r23;
        ucar.ma2.StructureData[] r7;
        ucar.ma2.DataType $r1, $r2, $r3, $r4, $r15, $r16, $r20;
        java.lang.IllegalArgumentException $r17;
        ucar.ma2.Array $r5;
        ucar.ma2.ArraySequence $r14;
        ucar.ma2.StructureMembers $r8, $r9;
        java.lang.StringBuilder $r18, $r19, $r21, $r22;

        r13 := @this: ucar.ma2.ArrayStructure;

        i1 := @parameter0: int;

        r0 := @parameter1: ucar.ma2.StructureMembers$Member;

        $r1 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.DataType getDataType()>();

        $r2 = <ucar.ma2.DataType: ucar.ma2.DataType STRUCTURE>;

        if $r1 == $r2 goto label1;

        $r15 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.DataType getDataType()>();

        $r16 = <ucar.ma2.DataType: ucar.ma2.DataType SEQUENCE>;

        if $r15 == $r16 goto label1;

        $r17 = new java.lang.IllegalArgumentException;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Type is ");

        $r20 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.DataType getDataType()>();

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r20);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", must be Structure or Sequence");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r17.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r23);

        throw $r17;

     label1:
        $r3 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.DataType getDataType()>();

        $r4 = <ucar.ma2.DataType: ucar.ma2.DataType SEQUENCE>;

        if $r3 != $r4 goto label2;

        $r14 = virtualinvoke r13.<ucar.ma2.ArrayStructure: ucar.ma2.ArraySequence getArraySequence(int,ucar.ma2.StructureMembers$Member)>(i1, r0);

        return $r14;

     label2:
        $r5 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.Array getDataArray()>();

        r6 = (ucar.ma2.ArrayStructure) $r5;

        $i0 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: int getSize()>();

        r7 = newarray (ucar.ma2.StructureData)[$i0];

        i4 = 0;

     label3:
        if i4 >= $i0 goto label4;

        $i2 = i1 * $i0;

        $i3 = $i2 + i4;

        $r12 = virtualinvoke r6.<ucar.ma2.ArrayStructure: ucar.ma2.StructureData getStructureData(int)>($i3);

        r7[i4] = $r12;

        i4 = i4 + 1;

        goto label3;

     label4:
        $r8 = new ucar.ma2.StructureMembers;

        $r9 = virtualinvoke r6.<ucar.ma2.ArrayStructure: ucar.ma2.StructureMembers getStructureMembers()>();

        specialinvoke $r8.<ucar.ma2.StructureMembers: void <init>(ucar.ma2.StructureMembers)>($r9);

        $r10 = new ucar.ma2.ArrayStructureW;

        $r11 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: int[] getShape()>();

        specialinvoke $r10.<ucar.ma2.ArrayStructureW: void <init>(ucar.ma2.StructureMembers,int[],ucar.ma2.StructureData[])>($r8, $r11, r7);

        return $r10;
    }

    public ucar.ma2.ArraySequence getArraySequence(int, ucar.ma2.StructureMembers$Member)
    {
        ucar.ma2.ArrayStructure r14;
        ucar.ma2.StructureMembers$Member r0;
        int i0;
        java.lang.String $r13;
        ucar.ma2.ArrayObject r4;
        ucar.ma2.DataType $r1, $r2, $r10;
        java.lang.IllegalArgumentException $r7;
        ucar.ma2.Array $r3;
        ucar.ma2.ArraySequence $r6;
        java.lang.Object $r5;
        java.lang.StringBuilder $r8, $r9, $r11, $r12;

        r14 := @this: ucar.ma2.ArrayStructure;

        i0 := @parameter0: int;

        r0 := @parameter1: ucar.ma2.StructureMembers$Member;

        $r1 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.DataType getDataType()>();

        $r2 = <ucar.ma2.DataType: ucar.ma2.DataType SEQUENCE>;

        if $r1 == $r2 goto label1;

        $r7 = new java.lang.IllegalArgumentException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Type is ");

        $r10 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.DataType getDataType()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", must be Sequence");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r13);

        throw $r7;

     label1:
        $r3 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.Array getDataArray()>();

        r4 = (ucar.ma2.ArrayObject) $r3;

        $r5 = virtualinvoke r4.<ucar.ma2.ArrayObject: java.lang.Object getObject(int)>(i0);

        $r6 = (ucar.ma2.ArraySequence) $r5;

        return $r6;
    }

    public ucar.ma2.ArrayObject getArrayObject(int, ucar.ma2.StructureMembers$Member)
    {
        ucar.ma2.ArrayStructure r14;
        ucar.ma2.StructureMembers$Member r0;
        int i0;
        java.lang.String $r13;
        ucar.ma2.ArrayObject r4, $r6;
        ucar.ma2.DataType $r1, $r2, $r10;
        java.lang.IllegalArgumentException $r7;
        ucar.ma2.Array $r3;
        java.lang.Object $r5;
        java.lang.StringBuilder $r8, $r9, $r11, $r12;

        r14 := @this: ucar.ma2.ArrayStructure;

        i0 := @parameter0: int;

        r0 := @parameter1: ucar.ma2.StructureMembers$Member;

        $r1 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.DataType getDataType()>();

        $r2 = <ucar.ma2.DataType: ucar.ma2.DataType OPAQUE>;

        if $r1 == $r2 goto label1;

        $r7 = new java.lang.IllegalArgumentException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Type is ");

        $r10 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.DataType getDataType()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", must be Sequence");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r13);

        throw $r7;

     label1:
        $r3 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.Array getDataArray()>();

        r4 = (ucar.ma2.ArrayObject) $r3;

        $r5 = virtualinvoke r4.<ucar.ma2.ArrayObject: java.lang.Object getObject(int)>(i0);

        $r6 = (ucar.ma2.ArrayObject) $r5;

        return $r6;
    }

    public void showInternal(java.util.Formatter, java.lang.String)
    {
        java.lang.Object[] $r1;
        ucar.ma2.ArrayStructure r3;
        long $l0;
        java.lang.Integer $r9;
        java.util.Formatter r0;
        ucar.ma2.StructureMembers $r4;
        java.lang.Long $r6;
        int $i1;
        java.lang.Class $r7;
        java.lang.String r2, $r5, $r8;

        r3 := @this: ucar.ma2.ArrayStructure;

        r0 := @parameter0: java.util.Formatter;

        r2 := @parameter1: java.lang.String;

        $r1 = newarray (java.lang.Object)[5];

        $r1[0] = r2;

        $r4 = r3.<ucar.ma2.ArrayStructure: ucar.ma2.StructureMembers members>;

        $r5 = virtualinvoke $r4.<ucar.ma2.StructureMembers: java.lang.String getName()>();

        $r1[1] = $r5;

        $l0 = virtualinvoke r3.<ucar.ma2.ArrayStructure: long getSize()>();

        $r6 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $r1[2] = $r6;

        $r7 = virtualinvoke r3.<java.lang.Object: java.lang.Class getClass()>();

        $r8 = virtualinvoke $r7.<java.lang.Class: java.lang.String getName()>();

        $r1[3] = $r8;

        $i1 = virtualinvoke r3.<java.lang.Object: int hashCode()>();

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r1[4] = $r9;

        virtualinvoke r0.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("%sArrayStructure %s size=%d class=%s hash=0x%x%n", $r1);

        return;
    }

    public void showInternalMembers(java.util.Formatter, java.lang.String)
    {
        java.lang.Object[] $r1;
        ucar.ma2.ArrayStructure r3;
        java.lang.Integer $r8;
        ucar.ma2.StructureMembers$Member r12;
        java.util.Formatter r0;
        int $i0;
        java.lang.String r2, $r5, $r7, $r16;
        boolean $z0;
        java.util.Iterator $r10;
        java.util.List $r9;
        ucar.ma2.StructureMembers $r4;
        java.lang.Class $r6;
        java.lang.Object $r11;
        java.lang.StringBuilder $r13, $r14, $r15;

        r3 := @this: ucar.ma2.ArrayStructure;

        r0 := @parameter0: java.util.Formatter;

        r2 := @parameter1: java.lang.String;

        $r1 = newarray (java.lang.Object)[4];

        $r1[0] = r2;

        $r4 = r3.<ucar.ma2.ArrayStructure: ucar.ma2.StructureMembers members>;

        $r5 = virtualinvoke $r4.<ucar.ma2.StructureMembers: java.lang.String getName()>();

        $r1[1] = $r5;

        $r6 = virtualinvoke r3.<java.lang.Object: java.lang.Class getClass()>();

        $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.String getName()>();

        $r1[2] = $r7;

        $i0 = virtualinvoke r3.<java.lang.Object: int hashCode()>();

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r1[3] = $r8;

        virtualinvoke r0.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("%sArrayStructure %s class=%s hash=0x%x%n", $r1);

        $r9 = virtualinvoke r3.<ucar.ma2.ArrayStructure: java.util.List getMembers()>();

        $r10 = interfaceinvoke $r9.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r11 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        r12 = (ucar.ma2.StructureMembers$Member) $r11;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  ");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r12.<ucar.ma2.StructureMembers$Member: void showInternal(java.util.Formatter,java.lang.String)>(r0, $r16);

        goto label1;

     label2:
        return;
    }

    public ucar.ma2.Array createView(ucar.ma2.Index)
    {
        java.lang.UnsupportedOperationException $r2;
        ucar.ma2.ArrayStructure r1;
        byte $b2;
        ucar.ma2.Index r0;
        long $l0, $l1;

        r1 := @this: ucar.ma2.ArrayStructure;

        r0 := @parameter0: ucar.ma2.Index;

        $l0 = virtualinvoke r0.<ucar.ma2.Index: long getSize()>();

        $l1 = virtualinvoke r1.<ucar.ma2.ArrayStructure: long getSize()>();

        $b2 = $l0 cmp $l1;

        if $b2 != 0 goto label1;

        return r1;

     label1:
        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public ucar.ma2.Array copy()
    {
        java.lang.UnsupportedOperationException $r0;
        ucar.ma2.ArrayStructure r1;

        r1 := @this: ucar.ma2.ArrayStructure;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public double getDouble(ucar.ma2.Index)
    {
        ucar.ma2.ForbiddenConversionException $r0;
        ucar.ma2.ArrayStructure r1;
        ucar.ma2.Index r2;

        r1 := @this: ucar.ma2.ArrayStructure;

        r2 := @parameter0: ucar.ma2.Index;

        $r0 = new ucar.ma2.ForbiddenConversionException;

        specialinvoke $r0.<ucar.ma2.ForbiddenConversionException: void <init>()>();

        throw $r0;
    }

    public void setDouble(ucar.ma2.Index, double)
    {
        ucar.ma2.ArrayStructure r1;
        ucar.ma2.Index r2;
        ucar.ma2.ForbiddenConversionException $r0;
        double d0;

        r1 := @this: ucar.ma2.ArrayStructure;

        r2 := @parameter0: ucar.ma2.Index;

        d0 := @parameter1: double;

        $r0 = new ucar.ma2.ForbiddenConversionException;

        specialinvoke $r0.<ucar.ma2.ForbiddenConversionException: void <init>()>();

        throw $r0;
    }

    public float getFloat(ucar.ma2.Index)
    {
        ucar.ma2.ForbiddenConversionException $r0;
        ucar.ma2.ArrayStructure r1;
        ucar.ma2.Index r2;

        r1 := @this: ucar.ma2.ArrayStructure;

        r2 := @parameter0: ucar.ma2.Index;

        $r0 = new ucar.ma2.ForbiddenConversionException;

        specialinvoke $r0.<ucar.ma2.ForbiddenConversionException: void <init>()>();

        throw $r0;
    }

    public void setFloat(ucar.ma2.Index, float)
    {
        ucar.ma2.ArrayStructure r1;
        ucar.ma2.Index r2;
        float f0;
        ucar.ma2.ForbiddenConversionException $r0;

        r1 := @this: ucar.ma2.ArrayStructure;

        r2 := @parameter0: ucar.ma2.Index;

        f0 := @parameter1: float;

        $r0 = new ucar.ma2.ForbiddenConversionException;

        specialinvoke $r0.<ucar.ma2.ForbiddenConversionException: void <init>()>();

        throw $r0;
    }

    public long getLong(ucar.ma2.Index)
    {
        ucar.ma2.ForbiddenConversionException $r0;
        ucar.ma2.ArrayStructure r1;
        ucar.ma2.Index r2;

        r1 := @this: ucar.ma2.ArrayStructure;

        r2 := @parameter0: ucar.ma2.Index;

        $r0 = new ucar.ma2.ForbiddenConversionException;

        specialinvoke $r0.<ucar.ma2.ForbiddenConversionException: void <init>()>();

        throw $r0;
    }

    public void setLong(ucar.ma2.Index, long)
    {
        ucar.ma2.ArrayStructure r1;
        ucar.ma2.Index r2;
        long l0;
        ucar.ma2.ForbiddenConversionException $r0;

        r1 := @this: ucar.ma2.ArrayStructure;

        r2 := @parameter0: ucar.ma2.Index;

        l0 := @parameter1: long;

        $r0 = new ucar.ma2.ForbiddenConversionException;

        specialinvoke $r0.<ucar.ma2.ForbiddenConversionException: void <init>()>();

        throw $r0;
    }

    public int getInt(ucar.ma2.Index)
    {
        ucar.ma2.ForbiddenConversionException $r0;
        ucar.ma2.ArrayStructure r1;
        ucar.ma2.Index r2;

        r1 := @this: ucar.ma2.ArrayStructure;

        r2 := @parameter0: ucar.ma2.Index;

        $r0 = new ucar.ma2.ForbiddenConversionException;

        specialinvoke $r0.<ucar.ma2.ForbiddenConversionException: void <init>()>();

        throw $r0;
    }

    public void setInt(ucar.ma2.Index, int)
    {
        ucar.ma2.ArrayStructure r1;
        ucar.ma2.Index r2;
        int i0;
        ucar.ma2.ForbiddenConversionException $r0;

        r1 := @this: ucar.ma2.ArrayStructure;

        r2 := @parameter0: ucar.ma2.Index;

        i0 := @parameter1: int;

        $r0 = new ucar.ma2.ForbiddenConversionException;

        specialinvoke $r0.<ucar.ma2.ForbiddenConversionException: void <init>()>();

        throw $r0;
    }

    public short getShort(ucar.ma2.Index)
    {
        ucar.ma2.ForbiddenConversionException $r0;
        ucar.ma2.ArrayStructure r1;
        ucar.ma2.Index r2;

        r1 := @this: ucar.ma2.ArrayStructure;

        r2 := @parameter0: ucar.ma2.Index;

        $r0 = new ucar.ma2.ForbiddenConversionException;

        specialinvoke $r0.<ucar.ma2.ForbiddenConversionException: void <init>()>();

        throw $r0;
    }

    public void setShort(ucar.ma2.Index, short)
    {
        short s0;
        ucar.ma2.ArrayStructure r1;
        ucar.ma2.Index r2;
        ucar.ma2.ForbiddenConversionException $r0;

        r1 := @this: ucar.ma2.ArrayStructure;

        r2 := @parameter0: ucar.ma2.Index;

        s0 := @parameter1: short;

        $r0 = new ucar.ma2.ForbiddenConversionException;

        specialinvoke $r0.<ucar.ma2.ForbiddenConversionException: void <init>()>();

        throw $r0;
    }

    public byte getByte(ucar.ma2.Index)
    {
        ucar.ma2.ForbiddenConversionException $r0;
        ucar.ma2.ArrayStructure r1;
        ucar.ma2.Index r2;

        r1 := @this: ucar.ma2.ArrayStructure;

        r2 := @parameter0: ucar.ma2.Index;

        $r0 = new ucar.ma2.ForbiddenConversionException;

        specialinvoke $r0.<ucar.ma2.ForbiddenConversionException: void <init>()>();

        throw $r0;
    }

    public void setByte(ucar.ma2.Index, byte)
    {
        ucar.ma2.ArrayStructure r1;
        byte b0;
        ucar.ma2.Index r2;
        ucar.ma2.ForbiddenConversionException $r0;

        r1 := @this: ucar.ma2.ArrayStructure;

        r2 := @parameter0: ucar.ma2.Index;

        b0 := @parameter1: byte;

        $r0 = new ucar.ma2.ForbiddenConversionException;

        specialinvoke $r0.<ucar.ma2.ForbiddenConversionException: void <init>()>();

        throw $r0;
    }

    public boolean getBoolean(ucar.ma2.Index)
    {
        ucar.ma2.ForbiddenConversionException $r0;
        ucar.ma2.ArrayStructure r1;
        ucar.ma2.Index r2;

        r1 := @this: ucar.ma2.ArrayStructure;

        r2 := @parameter0: ucar.ma2.Index;

        $r0 = new ucar.ma2.ForbiddenConversionException;

        specialinvoke $r0.<ucar.ma2.ForbiddenConversionException: void <init>()>();

        throw $r0;
    }

    public void setBoolean(ucar.ma2.Index, boolean)
    {
        ucar.ma2.ArrayStructure r1;
        ucar.ma2.Index r2;
        ucar.ma2.ForbiddenConversionException $r0;
        boolean z0;

        r1 := @this: ucar.ma2.ArrayStructure;

        r2 := @parameter0: ucar.ma2.Index;

        z0 := @parameter1: boolean;

        $r0 = new ucar.ma2.ForbiddenConversionException;

        specialinvoke $r0.<ucar.ma2.ForbiddenConversionException: void <init>()>();

        throw $r0;
    }

    public char getChar(ucar.ma2.Index)
    {
        ucar.ma2.ForbiddenConversionException $r0;
        ucar.ma2.ArrayStructure r1;
        ucar.ma2.Index r2;

        r1 := @this: ucar.ma2.ArrayStructure;

        r2 := @parameter0: ucar.ma2.Index;

        $r0 = new ucar.ma2.ForbiddenConversionException;

        specialinvoke $r0.<ucar.ma2.ForbiddenConversionException: void <init>()>();

        throw $r0;
    }

    public void setChar(ucar.ma2.Index, char)
    {
        ucar.ma2.ArrayStructure r1;
        ucar.ma2.Index r2;
        char c0;
        ucar.ma2.ForbiddenConversionException $r0;

        r1 := @this: ucar.ma2.ArrayStructure;

        r2 := @parameter0: ucar.ma2.Index;

        c0 := @parameter1: char;

        $r0 = new ucar.ma2.ForbiddenConversionException;

        specialinvoke $r0.<ucar.ma2.ForbiddenConversionException: void <init>()>();

        throw $r0;
    }

    public double getDouble(int)
    {
        int i0;
        ucar.ma2.ForbiddenConversionException $r0;
        ucar.ma2.ArrayStructure r1;

        r1 := @this: ucar.ma2.ArrayStructure;

        i0 := @parameter0: int;

        $r0 = new ucar.ma2.ForbiddenConversionException;

        specialinvoke $r0.<ucar.ma2.ForbiddenConversionException: void <init>()>();

        throw $r0;
    }

    public void setDouble(int, double)
    {
        ucar.ma2.ArrayStructure r1;
        int i0;
        ucar.ma2.ForbiddenConversionException $r0;
        double d0;

        r1 := @this: ucar.ma2.ArrayStructure;

        i0 := @parameter0: int;

        d0 := @parameter1: double;

        $r0 = new ucar.ma2.ForbiddenConversionException;

        specialinvoke $r0.<ucar.ma2.ForbiddenConversionException: void <init>()>();

        throw $r0;
    }

    public float getFloat(int)
    {
        int i0;
        ucar.ma2.ForbiddenConversionException $r0;
        ucar.ma2.ArrayStructure r1;

        r1 := @this: ucar.ma2.ArrayStructure;

        i0 := @parameter0: int;

        $r0 = new ucar.ma2.ForbiddenConversionException;

        specialinvoke $r0.<ucar.ma2.ForbiddenConversionException: void <init>()>();

        throw $r0;
    }

    public void setFloat(int, float)
    {
        ucar.ma2.ArrayStructure r1;
        int i0;
        float f0;
        ucar.ma2.ForbiddenConversionException $r0;

        r1 := @this: ucar.ma2.ArrayStructure;

        i0 := @parameter0: int;

        f0 := @parameter1: float;

        $r0 = new ucar.ma2.ForbiddenConversionException;

        specialinvoke $r0.<ucar.ma2.ForbiddenConversionException: void <init>()>();

        throw $r0;
    }

    public long getLong(int)
    {
        int i0;
        ucar.ma2.ForbiddenConversionException $r0;
        ucar.ma2.ArrayStructure r1;

        r1 := @this: ucar.ma2.ArrayStructure;

        i0 := @parameter0: int;

        $r0 = new ucar.ma2.ForbiddenConversionException;

        specialinvoke $r0.<ucar.ma2.ForbiddenConversionException: void <init>()>();

        throw $r0;
    }

    public void setLong(int, long)
    {
        ucar.ma2.ArrayStructure r1;
        int i0;
        long l1;
        ucar.ma2.ForbiddenConversionException $r0;

        r1 := @this: ucar.ma2.ArrayStructure;

        i0 := @parameter0: int;

        l1 := @parameter1: long;

        $r0 = new ucar.ma2.ForbiddenConversionException;

        specialinvoke $r0.<ucar.ma2.ForbiddenConversionException: void <init>()>();

        throw $r0;
    }

    public int getInt(int)
    {
        int i0;
        ucar.ma2.ForbiddenConversionException $r0;
        ucar.ma2.ArrayStructure r1;

        r1 := @this: ucar.ma2.ArrayStructure;

        i0 := @parameter0: int;

        $r0 = new ucar.ma2.ForbiddenConversionException;

        specialinvoke $r0.<ucar.ma2.ForbiddenConversionException: void <init>()>();

        throw $r0;
    }

    public void setInt(int, int)
    {
        ucar.ma2.ArrayStructure r1;
        int i0, i1;
        ucar.ma2.ForbiddenConversionException $r0;

        r1 := @this: ucar.ma2.ArrayStructure;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r0 = new ucar.ma2.ForbiddenConversionException;

        specialinvoke $r0.<ucar.ma2.ForbiddenConversionException: void <init>()>();

        throw $r0;
    }

    public short getShort(int)
    {
        int i0;
        ucar.ma2.ForbiddenConversionException $r0;
        ucar.ma2.ArrayStructure r1;

        r1 := @this: ucar.ma2.ArrayStructure;

        i0 := @parameter0: int;

        $r0 = new ucar.ma2.ForbiddenConversionException;

        specialinvoke $r0.<ucar.ma2.ForbiddenConversionException: void <init>()>();

        throw $r0;
    }

    public void setShort(int, short)
    {
        short s1;
        ucar.ma2.ArrayStructure r1;
        int i0;
        ucar.ma2.ForbiddenConversionException $r0;

        r1 := @this: ucar.ma2.ArrayStructure;

        i0 := @parameter0: int;

        s1 := @parameter1: short;

        $r0 = new ucar.ma2.ForbiddenConversionException;

        specialinvoke $r0.<ucar.ma2.ForbiddenConversionException: void <init>()>();

        throw $r0;
    }

    public byte getByte(int)
    {
        int i0;
        ucar.ma2.ForbiddenConversionException $r0;
        ucar.ma2.ArrayStructure r1;

        r1 := @this: ucar.ma2.ArrayStructure;

        i0 := @parameter0: int;

        $r0 = new ucar.ma2.ForbiddenConversionException;

        specialinvoke $r0.<ucar.ma2.ForbiddenConversionException: void <init>()>();

        throw $r0;
    }

    public void setByte(int, byte)
    {
        ucar.ma2.ArrayStructure r1;
        byte b1;
        int i0;
        ucar.ma2.ForbiddenConversionException $r0;

        r1 := @this: ucar.ma2.ArrayStructure;

        i0 := @parameter0: int;

        b1 := @parameter1: byte;

        $r0 = new ucar.ma2.ForbiddenConversionException;

        specialinvoke $r0.<ucar.ma2.ForbiddenConversionException: void <init>()>();

        throw $r0;
    }

    public char getChar(int)
    {
        int i0;
        ucar.ma2.ForbiddenConversionException $r0;
        ucar.ma2.ArrayStructure r1;

        r1 := @this: ucar.ma2.ArrayStructure;

        i0 := @parameter0: int;

        $r0 = new ucar.ma2.ForbiddenConversionException;

        specialinvoke $r0.<ucar.ma2.ForbiddenConversionException: void <init>()>();

        throw $r0;
    }

    public void setChar(int, char)
    {
        ucar.ma2.ArrayStructure r1;
        int i0;
        char c1;
        ucar.ma2.ForbiddenConversionException $r0;

        r1 := @this: ucar.ma2.ArrayStructure;

        i0 := @parameter0: int;

        c1 := @parameter1: char;

        $r0 = new ucar.ma2.ForbiddenConversionException;

        specialinvoke $r0.<ucar.ma2.ForbiddenConversionException: void <init>()>();

        throw $r0;
    }

    public boolean getBoolean(int)
    {
        int i0;
        ucar.ma2.ForbiddenConversionException $r0;
        ucar.ma2.ArrayStructure r1;

        r1 := @this: ucar.ma2.ArrayStructure;

        i0 := @parameter0: int;

        $r0 = new ucar.ma2.ForbiddenConversionException;

        specialinvoke $r0.<ucar.ma2.ForbiddenConversionException: void <init>()>();

        throw $r0;
    }

    public void setBoolean(int, boolean)
    {
        ucar.ma2.ArrayStructure r1;
        int i0;
        ucar.ma2.ForbiddenConversionException $r0;
        boolean z0;

        r1 := @this: ucar.ma2.ArrayStructure;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        $r0 = new ucar.ma2.ForbiddenConversionException;

        specialinvoke $r0.<ucar.ma2.ForbiddenConversionException: void <init>()>();

        throw $r0;
    }
}
