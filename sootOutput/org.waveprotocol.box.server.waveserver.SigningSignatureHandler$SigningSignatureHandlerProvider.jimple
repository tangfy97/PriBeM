public class org.waveprotocol.box.server.waveserver.SigningSignatureHandler$SigningSignatureHandlerProvider extends java.lang.Object implements com.google.inject.Provider
{
    private static final org.waveprotocol.box.server.waveserver.SigningSignatureHandler$SigningSignatureHandlerProvider$FileOpener FILE_OPENER;
    private java.lang.String privateKey;
    private java.util.List certs;
    private java.lang.String certDomain;
    private final org.waveprotocol.wave.crypto.WaveSignerFactory waveSignerFactory;
    private org.waveprotocol.box.server.waveserver.SigningSignatureHandler signer;

    public void <init>(java.lang.String, java.util.List, java.lang.String, org.waveprotocol.wave.crypto.WaveSignerFactory)
    {
        org.waveprotocol.box.server.waveserver.SigningSignatureHandler$SigningSignatureHandlerProvider r0;
        java.util.List r2;
        org.waveprotocol.wave.crypto.WaveSignerFactory r4;
        java.lang.String r1, r3;

        r0 := @this: org.waveprotocol.box.server.waveserver.SigningSignatureHandler$SigningSignatureHandlerProvider;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.util.List;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: org.waveprotocol.wave.crypto.WaveSignerFactory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.waveprotocol.box.server.waveserver.SigningSignatureHandler$SigningSignatureHandlerProvider: org.waveprotocol.box.server.waveserver.SigningSignatureHandler signer> = null;

        r0.<org.waveprotocol.box.server.waveserver.SigningSignatureHandler$SigningSignatureHandlerProvider: java.lang.String privateKey> = r1;

        r0.<org.waveprotocol.box.server.waveserver.SigningSignatureHandler$SigningSignatureHandlerProvider: java.util.List certs> = r2;

        r0.<org.waveprotocol.box.server.waveserver.SigningSignatureHandler$SigningSignatureHandlerProvider: java.lang.String certDomain> = r3;

        r0.<org.waveprotocol.box.server.waveserver.SigningSignatureHandler$SigningSignatureHandlerProvider: org.waveprotocol.wave.crypto.WaveSignerFactory waveSignerFactory> = r4;

        return;
    }

    public org.waveprotocol.box.server.waveserver.SigningSignatureHandler get()
    {
        org.waveprotocol.box.server.waveserver.SigningSignatureHandler$SigningSignatureHandlerProvider$FileOpener $r5;
        java.lang.Throwable $r12;
        org.waveprotocol.box.server.waveserver.SigningSignatureHandler$SigningSignatureHandlerProvider r0;
        java.lang.Iterable $r7;
        org.waveprotocol.wave.crypto.WaveSignerFactory $r9;
        org.waveprotocol.box.server.waveserver.SigningSignatureHandler $r1, $r2, $r11;
        java.lang.String $r4, $r8;
        com.google.inject.ProvisionException $r14, $r16;
        org.waveprotocol.wave.crypto.WaveSigner $r10;
        java.io.FileInputStream $r3;
        java.io.FileNotFoundException $r15;
        java.util.List $r6;
        org.waveprotocol.wave.crypto.SignatureException $r13;

        r0 := @this: org.waveprotocol.box.server.waveserver.SigningSignatureHandler$SigningSignatureHandlerProvider;

        entermonitor r0;

     label01:
        $r1 = r0.<org.waveprotocol.box.server.waveserver.SigningSignatureHandler$SigningSignatureHandlerProvider: org.waveprotocol.box.server.waveserver.SigningSignatureHandler signer>;

        if $r1 != null goto label09;

     label02:
        $r3 = new java.io.FileInputStream;

        $r4 = r0.<org.waveprotocol.box.server.waveserver.SigningSignatureHandler$SigningSignatureHandlerProvider: java.lang.String privateKey>;

        specialinvoke $r3.<java.io.FileInputStream: void <init>(java.lang.String)>($r4);

     label03:
        goto label05;

     label04:
        $r15 := @caughtexception;

        $r16 = new com.google.inject.ProvisionException;

        specialinvoke $r16.<com.google.inject.ProvisionException: void <init>(java.lang.String,java.lang.Throwable)>("could not read private key", $r15);

        throw $r16;

     label05:
        $r6 = r0.<org.waveprotocol.box.server.waveserver.SigningSignatureHandler$SigningSignatureHandlerProvider: java.util.List certs>;

        $r5 = <org.waveprotocol.box.server.waveserver.SigningSignatureHandler$SigningSignatureHandlerProvider: org.waveprotocol.box.server.waveserver.SigningSignatureHandler$SigningSignatureHandlerProvider$FileOpener FILE_OPENER>;

        $r7 = staticinvoke <com.google.common.collect.Iterables: java.lang.Iterable transform(java.lang.Iterable,com.google.common.base.Function)>($r6, $r5);

     label06:
        $r9 = r0.<org.waveprotocol.box.server.waveserver.SigningSignatureHandler$SigningSignatureHandlerProvider: org.waveprotocol.wave.crypto.WaveSignerFactory waveSignerFactory>;

        $r8 = r0.<org.waveprotocol.box.server.waveserver.SigningSignatureHandler$SigningSignatureHandlerProvider: java.lang.String certDomain>;

        $r10 = virtualinvoke $r9.<org.waveprotocol.wave.crypto.WaveSignerFactory: org.waveprotocol.wave.crypto.WaveSigner getSigner(java.io.InputStream,java.lang.Iterable,java.lang.String)>($r3, $r7, $r8);

        $r11 = new org.waveprotocol.box.server.waveserver.SigningSignatureHandler;

        specialinvoke $r11.<org.waveprotocol.box.server.waveserver.SigningSignatureHandler: void <init>(org.waveprotocol.wave.crypto.WaveSigner)>($r10);

        r0.<org.waveprotocol.box.server.waveserver.SigningSignatureHandler$SigningSignatureHandlerProvider: org.waveprotocol.box.server.waveserver.SigningSignatureHandler signer> = $r11;

     label07:
        goto label09;

     label08:
        $r13 := @caughtexception;

        $r14 = new com.google.inject.ProvisionException;

        specialinvoke $r14.<com.google.inject.ProvisionException: void <init>(java.lang.String,java.lang.Throwable)>("could not make wave signer", $r13);

        throw $r14;

     label09:
        exitmonitor r0;

     label10:
        goto label13;

     label11:
        $r12 := @caughtexception;

        exitmonitor r0;

     label12:
        throw $r12;

     label13:
        $r2 = r0.<org.waveprotocol.box.server.waveserver.SigningSignatureHandler$SigningSignatureHandlerProvider: org.waveprotocol.box.server.waveserver.SigningSignatureHandler signer>;

        return $r2;

        catch java.io.FileNotFoundException from label02 to label03 with label04;
        catch org.waveprotocol.wave.crypto.SignatureException from label06 to label07 with label08;
        catch java.lang.Throwable from label01 to label10 with label11;
        catch java.lang.Throwable from label11 to label12 with label11;
    }

    public volatile java.lang.Object get()
    {
        org.waveprotocol.box.server.waveserver.SigningSignatureHandler$SigningSignatureHandlerProvider r0;
        org.waveprotocol.box.server.waveserver.SigningSignatureHandler $r1;

        r0 := @this: org.waveprotocol.box.server.waveserver.SigningSignatureHandler$SigningSignatureHandlerProvider;

        $r1 = virtualinvoke r0.<org.waveprotocol.box.server.waveserver.SigningSignatureHandler$SigningSignatureHandlerProvider: org.waveprotocol.box.server.waveserver.SigningSignatureHandler get()>();

        return $r1;
    }

    static void <clinit>()
    {
        org.waveprotocol.box.server.waveserver.SigningSignatureHandler$SigningSignatureHandlerProvider$FileOpener $r0;

        $r0 = new org.waveprotocol.box.server.waveserver.SigningSignatureHandler$SigningSignatureHandlerProvider$FileOpener;

        specialinvoke $r0.<org.waveprotocol.box.server.waveserver.SigningSignatureHandler$SigningSignatureHandlerProvider$FileOpener: void <init>(org.waveprotocol.box.server.waveserver.SigningSignatureHandler$1)>(null);

        <org.waveprotocol.box.server.waveserver.SigningSignatureHandler$SigningSignatureHandlerProvider: org.waveprotocol.box.server.waveserver.SigningSignatureHandler$SigningSignatureHandlerProvider$FileOpener FILE_OPENER> = $r0;

        return;
    }
}
