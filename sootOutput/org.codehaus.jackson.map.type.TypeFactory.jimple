public final class org.codehaus.jackson.map.type.TypeFactory extends java.lang.Object
{
    public static final org.codehaus.jackson.map.type.TypeFactory instance;
    private static final org.codehaus.jackson.type.JavaType[] NO_TYPES;
    protected final org.codehaus.jackson.map.type.TypeModifier[] _modifiers;
    protected final org.codehaus.jackson.map.type.TypeParser _parser;
    protected org.codehaus.jackson.map.type.HierarchicType _cachedHashMapType;
    protected org.codehaus.jackson.map.type.HierarchicType _cachedArrayListType;

    private void <init>()
    {
        org.codehaus.jackson.map.type.TypeFactory r0;
        org.codehaus.jackson.map.type.TypeParser $r1;

        r0 := @this: org.codehaus.jackson.map.type.TypeFactory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new org.codehaus.jackson.map.type.TypeParser;

        specialinvoke $r1.<org.codehaus.jackson.map.type.TypeParser: void <init>(org.codehaus.jackson.map.type.TypeFactory)>(r0);

        r0.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.map.type.TypeParser _parser> = $r1;

        r0.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.map.type.TypeModifier[] _modifiers> = null;

        return;
    }

    protected void <init>(org.codehaus.jackson.map.type.TypeParser, org.codehaus.jackson.map.type.TypeModifier[])
    {
        org.codehaus.jackson.map.type.TypeFactory r0;
        org.codehaus.jackson.map.type.TypeParser r1;
        org.codehaus.jackson.map.type.TypeModifier[] r2;

        r0 := @this: org.codehaus.jackson.map.type.TypeFactory;

        r1 := @parameter0: org.codehaus.jackson.map.type.TypeParser;

        r2 := @parameter1: org.codehaus.jackson.map.type.TypeModifier[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.map.type.TypeParser _parser> = r1;

        r0.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.map.type.TypeModifier[] _modifiers> = r2;

        return;
    }

    public org.codehaus.jackson.map.type.TypeFactory withModifier(org.codehaus.jackson.map.type.TypeModifier)
    {
        org.codehaus.jackson.map.type.TypeModifier[] $r1, $r4, $r7, $r9;
        java.lang.Object[] $r6;
        org.codehaus.jackson.map.type.TypeFactory r0, $r2, $r8;
        org.codehaus.jackson.map.type.TypeParser $r5, $r10;
        org.codehaus.jackson.map.type.TypeModifier r3;

        r0 := @this: org.codehaus.jackson.map.type.TypeFactory;

        r3 := @parameter0: org.codehaus.jackson.map.type.TypeModifier;

        $r1 = r0.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.map.type.TypeModifier[] _modifiers>;

        if $r1 != null goto label1;

        $r8 = new org.codehaus.jackson.map.type.TypeFactory;

        $r10 = r0.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.map.type.TypeParser _parser>;

        $r9 = newarray (org.codehaus.jackson.map.type.TypeModifier)[1];

        $r9[0] = r3;

        specialinvoke $r8.<org.codehaus.jackson.map.type.TypeFactory: void <init>(org.codehaus.jackson.map.type.TypeParser,org.codehaus.jackson.map.type.TypeModifier[])>($r10, $r9);

        return $r8;

     label1:
        $r2 = new org.codehaus.jackson.map.type.TypeFactory;

        $r5 = r0.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.map.type.TypeParser _parser>;

        $r4 = r0.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.map.type.TypeModifier[] _modifiers>;

        $r6 = staticinvoke <org.codehaus.jackson.map.util.ArrayBuilders: java.lang.Object[] insertInListNoDup(java.lang.Object[],java.lang.Object)>($r4, r3);

        $r7 = (org.codehaus.jackson.map.type.TypeModifier[]) $r6;

        specialinvoke $r2.<org.codehaus.jackson.map.type.TypeFactory: void <init>(org.codehaus.jackson.map.type.TypeParser,org.codehaus.jackson.map.type.TypeModifier[])>($r5, $r7);

        return $r2;
    }

    public static org.codehaus.jackson.map.type.TypeFactory defaultInstance()
    {
        org.codehaus.jackson.map.type.TypeFactory $r0;

        $r0 = <org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.map.type.TypeFactory instance>;

        return $r0;
    }

    public static org.codehaus.jackson.type.JavaType unknownType()
    {
        org.codehaus.jackson.map.type.TypeFactory $r0;
        org.codehaus.jackson.type.JavaType $r1;

        $r0 = staticinvoke <org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.map.type.TypeFactory defaultInstance()>();

        $r1 = virtualinvoke $r0.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType _unknownType()>();

        return $r1;
    }

    public static java.lang.Class rawClass(java.lang.reflect.Type)
    {
        org.codehaus.jackson.map.type.TypeFactory $r1;
        java.lang.reflect.Type r0;
        org.codehaus.jackson.type.JavaType $r2;
        java.lang.Class $r3, $r4;
        boolean $z0;

        r0 := @parameter0: java.lang.reflect.Type;

        $z0 = r0 instanceof java.lang.Class;

        if $z0 == 0 goto label1;

        $r4 = (java.lang.Class) r0;

        return $r4;

     label1:
        $r1 = staticinvoke <org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.map.type.TypeFactory defaultInstance()>();

        $r2 = virtualinvoke $r1.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType constructType(java.lang.reflect.Type)>(r0);

        $r3 = virtualinvoke $r2.<org.codehaus.jackson.type.JavaType: java.lang.Class getRawClass()>();

        return $r3;
    }

    public static org.codehaus.jackson.type.JavaType type(java.lang.reflect.Type)
    {
        org.codehaus.jackson.map.type.TypeFactory $r1;
        org.codehaus.jackson.type.JavaType $r2;
        java.lang.reflect.Type r0;

        r0 := @parameter0: java.lang.reflect.Type;

        $r1 = <org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.map.type.TypeFactory instance>;

        $r2 = virtualinvoke $r1.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType _constructType(java.lang.reflect.Type,org.codehaus.jackson.map.type.TypeBindings)>(r0, null);

        return $r2;
    }

    public static org.codehaus.jackson.type.JavaType type(java.lang.reflect.Type, java.lang.Class)
    {
        org.codehaus.jackson.map.type.TypeFactory $r2;
        java.lang.reflect.Type r0;
        org.codehaus.jackson.type.JavaType $r3;
        java.lang.Class r1;

        r0 := @parameter0: java.lang.reflect.Type;

        r1 := @parameter1: java.lang.Class;

        $r2 = <org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.map.type.TypeFactory instance>;

        $r3 = virtualinvoke $r2.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType constructType(java.lang.reflect.Type,java.lang.Class)>(r0, r1);

        return $r3;
    }

    public static org.codehaus.jackson.type.JavaType type(java.lang.reflect.Type, org.codehaus.jackson.type.JavaType)
    {
        org.codehaus.jackson.map.type.TypeFactory $r2;
        java.lang.reflect.Type r0;
        org.codehaus.jackson.type.JavaType r1, $r3;

        r0 := @parameter0: java.lang.reflect.Type;

        r1 := @parameter1: org.codehaus.jackson.type.JavaType;

        $r2 = <org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.map.type.TypeFactory instance>;

        $r3 = virtualinvoke $r2.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType constructType(java.lang.reflect.Type,org.codehaus.jackson.type.JavaType)>(r0, r1);

        return $r3;
    }

    public static org.codehaus.jackson.type.JavaType type(java.lang.reflect.Type, org.codehaus.jackson.map.type.TypeBindings)
    {
        org.codehaus.jackson.map.type.TypeFactory $r2;
        java.lang.reflect.Type r0;
        org.codehaus.jackson.type.JavaType $r3;
        org.codehaus.jackson.map.type.TypeBindings r1;

        r0 := @parameter0: java.lang.reflect.Type;

        r1 := @parameter1: org.codehaus.jackson.map.type.TypeBindings;

        $r2 = <org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.map.type.TypeFactory instance>;

        $r3 = virtualinvoke $r2.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType _constructType(java.lang.reflect.Type,org.codehaus.jackson.map.type.TypeBindings)>(r0, r1);

        return $r3;
    }

    public static org.codehaus.jackson.type.JavaType type(org.codehaus.jackson.type.TypeReference)
    {
        org.codehaus.jackson.map.type.TypeFactory $r1;
        java.lang.reflect.Type $r2;
        org.codehaus.jackson.type.TypeReference r0;
        org.codehaus.jackson.type.JavaType $r3;

        r0 := @parameter0: org.codehaus.jackson.type.TypeReference;

        $r1 = <org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.map.type.TypeFactory instance>;

        $r2 = virtualinvoke r0.<org.codehaus.jackson.type.TypeReference: java.lang.reflect.Type getType()>();

        $r3 = virtualinvoke $r1.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType constructType(java.lang.reflect.Type)>($r2);

        return $r3;
    }

    public static org.codehaus.jackson.type.JavaType arrayType(java.lang.Class)
    {
        org.codehaus.jackson.map.type.TypeFactory $r1, $r2;
        org.codehaus.jackson.type.JavaType $r3;
        java.lang.Class r0;
        org.codehaus.jackson.map.type.ArrayType $r4;

        r0 := @parameter0: java.lang.Class;

        $r2 = <org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.map.type.TypeFactory instance>;

        $r1 = <org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.map.type.TypeFactory instance>;

        $r3 = virtualinvoke $r1.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType constructType(java.lang.reflect.Type)>(r0);

        $r4 = virtualinvoke $r2.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.map.type.ArrayType constructArrayType(org.codehaus.jackson.type.JavaType)>($r3);

        return $r4;
    }

    public static org.codehaus.jackson.type.JavaType arrayType(org.codehaus.jackson.type.JavaType)
    {
        org.codehaus.jackson.map.type.TypeFactory $r1;
        org.codehaus.jackson.type.JavaType r0;
        org.codehaus.jackson.map.type.ArrayType $r2;

        r0 := @parameter0: org.codehaus.jackson.type.JavaType;

        $r1 = <org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.map.type.TypeFactory instance>;

        $r2 = virtualinvoke $r1.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.map.type.ArrayType constructArrayType(org.codehaus.jackson.type.JavaType)>(r0);

        return $r2;
    }

    public static org.codehaus.jackson.type.JavaType collectionType(java.lang.Class, java.lang.Class)
    {
        org.codehaus.jackson.map.type.TypeFactory $r2, $r3;
        org.codehaus.jackson.map.type.CollectionType $r5;
        org.codehaus.jackson.type.JavaType $r4;
        java.lang.Class r0, r1;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.Class;

        $r3 = <org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.map.type.TypeFactory instance>;

        $r2 = <org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.map.type.TypeFactory instance>;

        $r4 = virtualinvoke $r2.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType constructType(java.lang.reflect.Type)>(r1);

        $r5 = virtualinvoke $r3.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.map.type.CollectionType constructCollectionType(java.lang.Class,org.codehaus.jackson.type.JavaType)>(r0, $r4);

        return $r5;
    }

    public static org.codehaus.jackson.type.JavaType collectionType(java.lang.Class, org.codehaus.jackson.type.JavaType)
    {
        org.codehaus.jackson.map.type.TypeFactory $r2;
        org.codehaus.jackson.map.type.CollectionType $r3;
        org.codehaus.jackson.type.JavaType r1;
        java.lang.Class r0;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: org.codehaus.jackson.type.JavaType;

        $r2 = <org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.map.type.TypeFactory instance>;

        $r3 = virtualinvoke $r2.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.map.type.CollectionType constructCollectionType(java.lang.Class,org.codehaus.jackson.type.JavaType)>(r0, r1);

        return $r3;
    }

    public static org.codehaus.jackson.type.JavaType mapType(java.lang.Class, java.lang.Class, java.lang.Class)
    {
        org.codehaus.jackson.map.type.TypeFactory $r2, $r5;
        org.codehaus.jackson.map.type.MapType $r7;
        org.codehaus.jackson.type.JavaType $r3, $r6;
        java.lang.Class r0, r1, r4;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.Class;

        r4 := @parameter2: java.lang.Class;

        $r2 = <org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.map.type.TypeFactory instance>;

        $r3 = staticinvoke <org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType type(java.lang.reflect.Type)>(r1);

        $r5 = <org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.map.type.TypeFactory instance>;

        $r6 = virtualinvoke $r5.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType constructType(java.lang.reflect.Type)>(r4);

        $r7 = virtualinvoke $r2.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.map.type.MapType constructMapType(java.lang.Class,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.type.JavaType)>(r0, $r3, $r6);

        return $r7;
    }

    public static org.codehaus.jackson.type.JavaType mapType(java.lang.Class, org.codehaus.jackson.type.JavaType, org.codehaus.jackson.type.JavaType)
    {
        org.codehaus.jackson.map.type.TypeFactory $r3;
        org.codehaus.jackson.map.type.MapType $r4;
        org.codehaus.jackson.type.JavaType r1, r2;
        java.lang.Class r0;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: org.codehaus.jackson.type.JavaType;

        r2 := @parameter2: org.codehaus.jackson.type.JavaType;

        $r3 = <org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.map.type.TypeFactory instance>;

        $r4 = virtualinvoke $r3.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.map.type.MapType constructMapType(java.lang.Class,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.type.JavaType)>(r0, r1, r2);

        return $r4;
    }

    public static transient org.codehaus.jackson.type.JavaType parametricType(java.lang.Class, java.lang.Class[])
    {
        org.codehaus.jackson.map.type.TypeFactory $r2;
        java.lang.Class[] r1;
        org.codehaus.jackson.type.JavaType $r3;
        java.lang.Class r0;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.Class[];

        $r2 = <org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.map.type.TypeFactory instance>;

        $r3 = virtualinvoke $r2.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType constructParametricType(java.lang.Class,java.lang.Class[])>(r0, r1);

        return $r3;
    }

    public static transient org.codehaus.jackson.type.JavaType parametricType(java.lang.Class, org.codehaus.jackson.type.JavaType[])
    {
        org.codehaus.jackson.map.type.TypeFactory $r2;
        org.codehaus.jackson.type.JavaType $r3;
        java.lang.Class r0;
        org.codehaus.jackson.type.JavaType[] r1;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: org.codehaus.jackson.type.JavaType[];

        $r2 = <org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.map.type.TypeFactory instance>;

        $r3 = virtualinvoke $r2.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType constructParametricType(java.lang.Class,org.codehaus.jackson.type.JavaType[])>(r0, r1);

        return $r3;
    }

    public static org.codehaus.jackson.type.JavaType fromCanonical(java.lang.String) throws java.lang.IllegalArgumentException
    {
        org.codehaus.jackson.map.type.TypeFactory $r1;
        org.codehaus.jackson.type.JavaType $r2;
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        $r1 = <org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.map.type.TypeFactory instance>;

        $r2 = virtualinvoke $r1.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType constructFromCanonical(java.lang.String)>(r0);

        return $r2;
    }

    public static org.codehaus.jackson.type.JavaType specialize(org.codehaus.jackson.type.JavaType, java.lang.Class)
    {
        org.codehaus.jackson.map.type.TypeFactory $r2;
        org.codehaus.jackson.type.JavaType r0, $r3;
        java.lang.Class r1;

        r0 := @parameter0: org.codehaus.jackson.type.JavaType;

        r1 := @parameter1: java.lang.Class;

        $r2 = <org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.map.type.TypeFactory instance>;

        $r3 = virtualinvoke $r2.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType constructSpecializedType(org.codehaus.jackson.type.JavaType,java.lang.Class)>(r0, r1);

        return $r3;
    }

    public static org.codehaus.jackson.type.JavaType fastSimpleType(java.lang.Class)
    {
        org.codehaus.jackson.map.type.TypeFactory $r1;
        org.codehaus.jackson.type.JavaType $r2;
        java.lang.Class r0;

        r0 := @parameter0: java.lang.Class;

        $r1 = <org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.map.type.TypeFactory instance>;

        $r2 = virtualinvoke $r1.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType uncheckedSimpleType(java.lang.Class)>(r0);

        return $r2;
    }

    public static org.codehaus.jackson.type.JavaType[] findParameterTypes(java.lang.Class, java.lang.Class)
    {
        org.codehaus.jackson.map.type.TypeFactory $r2;
        java.lang.Class r0, r1;
        org.codehaus.jackson.type.JavaType[] $r3;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.Class;

        $r2 = <org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.map.type.TypeFactory instance>;

        $r3 = virtualinvoke $r2.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType[] findTypeParameters(java.lang.Class,java.lang.Class)>(r0, r1);

        return $r3;
    }

    public static org.codehaus.jackson.type.JavaType[] findParameterTypes(java.lang.Class, java.lang.Class, org.codehaus.jackson.map.type.TypeBindings)
    {
        org.codehaus.jackson.map.type.TypeFactory $r3;
        java.lang.Class r0, r1;
        org.codehaus.jackson.map.type.TypeBindings r2;
        org.codehaus.jackson.type.JavaType[] $r4;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.Class;

        r2 := @parameter2: org.codehaus.jackson.map.type.TypeBindings;

        $r3 = <org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.map.type.TypeFactory instance>;

        $r4 = virtualinvoke $r3.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType[] findTypeParameters(java.lang.Class,java.lang.Class,org.codehaus.jackson.map.type.TypeBindings)>(r0, r1, r2);

        return $r4;
    }

    public static org.codehaus.jackson.type.JavaType[] findParameterTypes(org.codehaus.jackson.type.JavaType, java.lang.Class)
    {
        org.codehaus.jackson.map.type.TypeFactory $r2;
        org.codehaus.jackson.type.JavaType r0;
        java.lang.Class r1;
        org.codehaus.jackson.type.JavaType[] $r3;

        r0 := @parameter0: org.codehaus.jackson.type.JavaType;

        r1 := @parameter1: java.lang.Class;

        $r2 = <org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.map.type.TypeFactory instance>;

        $r3 = virtualinvoke $r2.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType[] findTypeParameters(org.codehaus.jackson.type.JavaType,java.lang.Class)>(r0, r1);

        return $r3;
    }

    public static org.codehaus.jackson.type.JavaType fromClass(java.lang.Class)
    {
        org.codehaus.jackson.map.type.TypeFactory $r1;
        org.codehaus.jackson.type.JavaType $r2;
        java.lang.Class r0;

        r0 := @parameter0: java.lang.Class;

        $r1 = <org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.map.type.TypeFactory instance>;

        $r2 = virtualinvoke $r1.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType _fromClass(java.lang.Class,org.codehaus.jackson.map.type.TypeBindings)>(r0, null);

        return $r2;
    }

    public static org.codehaus.jackson.type.JavaType fromTypeReference(org.codehaus.jackson.type.TypeReference)
    {
        org.codehaus.jackson.type.JavaType $r2;
        java.lang.reflect.Type $r1;
        org.codehaus.jackson.type.TypeReference r0;

        r0 := @parameter0: org.codehaus.jackson.type.TypeReference;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.type.TypeReference: java.lang.reflect.Type getType()>();

        $r2 = staticinvoke <org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType type(java.lang.reflect.Type)>($r1);

        return $r2;
    }

    public static org.codehaus.jackson.type.JavaType fromType(java.lang.reflect.Type)
    {
        org.codehaus.jackson.map.type.TypeFactory $r1;
        org.codehaus.jackson.type.JavaType $r2;
        java.lang.reflect.Type r0;

        r0 := @parameter0: java.lang.reflect.Type;

        $r1 = <org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.map.type.TypeFactory instance>;

        $r2 = virtualinvoke $r1.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType _constructType(java.lang.reflect.Type,org.codehaus.jackson.map.type.TypeBindings)>(r0, null);

        return $r2;
    }

    public org.codehaus.jackson.type.JavaType constructSpecializedType(org.codehaus.jackson.type.JavaType, java.lang.Class)
    {
        org.codehaus.jackson.map.type.TypeBindings $r4;
        org.codehaus.jackson.map.type.TypeFactory r3;
        org.codehaus.jackson.type.JavaType r0, $r2, $r6, r21;
        java.lang.String $r13, $r17;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.IllegalArgumentException $r9;
        java.lang.Class r1, $r5, $r12, $r18, $r19, $r20;
        java.lang.Object $r7, $r8;
        java.lang.StringBuilder $r10, $r11, $r14, $r15, $r16;

        r3 := @this: org.codehaus.jackson.map.type.TypeFactory;

        r0 := @parameter0: org.codehaus.jackson.type.JavaType;

        r1 := @parameter1: java.lang.Class;

        $z0 = r0 instanceof org.codehaus.jackson.map.type.SimpleType;

        if $z0 == 0 goto label5;

        $z1 = virtualinvoke r1.<java.lang.Class: boolean isArray()>();

        if $z1 != 0 goto label1;

        $r18 = class "Ljava/util/Map;";

        $z2 = virtualinvoke $r18.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r1);

        if $z2 != 0 goto label1;

        $r19 = class "Ljava/util/Collection;";

        $z3 = virtualinvoke $r19.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r1);

        if $z3 == 0 goto label5;

     label1:
        $r20 = virtualinvoke r0.<org.codehaus.jackson.type.JavaType: java.lang.Class getRawClass()>();

        $z4 = virtualinvoke $r20.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r1);

        if $z4 != 0 goto label2;

        $r9 = new java.lang.IllegalArgumentException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Class ");

        $r12 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r13 = virtualinvoke $r12.<java.lang.Class: java.lang.String getName()>();

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not subtype of ");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r17);

        throw $r9;

     label2:
        $r4 = new org.codehaus.jackson.map.type.TypeBindings;

        $r5 = virtualinvoke r0.<org.codehaus.jackson.type.JavaType: java.lang.Class getRawClass()>();

        specialinvoke $r4.<org.codehaus.jackson.map.type.TypeBindings: void <init>(org.codehaus.jackson.map.type.TypeFactory,java.lang.Class)>(r3, $r5);

        $r6 = virtualinvoke r3.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType _fromClass(java.lang.Class,org.codehaus.jackson.map.type.TypeBindings)>(r1, $r4);

        r21 = $r6;

        $r7 = virtualinvoke r0.<org.codehaus.jackson.type.JavaType: java.lang.Object getValueHandler()>();

        if $r7 == null goto label3;

        r21 = virtualinvoke $r6.<org.codehaus.jackson.type.JavaType: org.codehaus.jackson.type.JavaType withValueHandler(java.lang.Object)>($r7);

     label3:
        $r8 = virtualinvoke r0.<org.codehaus.jackson.type.JavaType: java.lang.Object getTypeHandler()>();

        if $r8 == null goto label4;

        r21 = virtualinvoke r21.<org.codehaus.jackson.type.JavaType: org.codehaus.jackson.type.JavaType withTypeHandler(java.lang.Object)>($r8);

     label4:
        return r21;

     label5:
        $r2 = virtualinvoke r0.<org.codehaus.jackson.type.JavaType: org.codehaus.jackson.type.JavaType narrowBy(java.lang.Class)>(r1);

        return $r2;
    }

    public org.codehaus.jackson.type.JavaType constructFromCanonical(java.lang.String) throws java.lang.IllegalArgumentException
    {
        org.codehaus.jackson.map.type.TypeFactory r0;
        org.codehaus.jackson.map.type.TypeParser $r2;
        org.codehaus.jackson.type.JavaType $r3;
        java.lang.String r1;

        r0 := @this: org.codehaus.jackson.map.type.TypeFactory;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.map.type.TypeParser _parser>;

        $r3 = virtualinvoke $r2.<org.codehaus.jackson.map.type.TypeParser: org.codehaus.jackson.type.JavaType parse(java.lang.String)>(r1);

        return $r3;
    }

    public org.codehaus.jackson.type.JavaType[] findTypeParameters(org.codehaus.jackson.type.JavaType, java.lang.Class)
    {
        org.codehaus.jackson.map.type.TypeBindings $r4;
        org.codehaus.jackson.type.JavaType[] $r5, r6;
        org.codehaus.jackson.map.type.TypeFactory r3;
        int $i0, i1;
        org.codehaus.jackson.type.JavaType r0, $r7;
        java.lang.Class $r1, r2;

        r3 := @this: org.codehaus.jackson.map.type.TypeFactory;

        r0 := @parameter0: org.codehaus.jackson.type.JavaType;

        r2 := @parameter1: java.lang.Class;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.type.JavaType: java.lang.Class getRawClass()>();

        if $r1 != r2 goto label4;

        $i0 = virtualinvoke r0.<org.codehaus.jackson.type.JavaType: int containedTypeCount()>();

        if $i0 != 0 goto label1;

        return null;

     label1:
        r6 = newarray (org.codehaus.jackson.type.JavaType)[$i0];

        i1 = 0;

     label2:
        if i1 >= $i0 goto label3;

        $r7 = virtualinvoke r0.<org.codehaus.jackson.type.JavaType: org.codehaus.jackson.type.JavaType containedType(int)>(i1);

        r6[i1] = $r7;

        i1 = i1 + 1;

        goto label2;

     label3:
        return r6;

     label4:
        $r4 = new org.codehaus.jackson.map.type.TypeBindings;

        specialinvoke $r4.<org.codehaus.jackson.map.type.TypeBindings: void <init>(org.codehaus.jackson.map.type.TypeFactory,org.codehaus.jackson.type.JavaType)>(r3, r0);

        $r5 = virtualinvoke r3.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType[] findTypeParameters(java.lang.Class,java.lang.Class,org.codehaus.jackson.map.type.TypeBindings)>($r1, r2, $r4);

        return $r5;
    }

    public org.codehaus.jackson.type.JavaType[] findTypeParameters(java.lang.Class, java.lang.Class)
    {
        org.codehaus.jackson.map.type.TypeFactory r0;
        java.lang.Class r1, r2;
        org.codehaus.jackson.map.type.TypeBindings $r3;
        org.codehaus.jackson.type.JavaType[] $r4;

        r0 := @this: org.codehaus.jackson.map.type.TypeFactory;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.lang.Class;

        $r3 = new org.codehaus.jackson.map.type.TypeBindings;

        specialinvoke $r3.<org.codehaus.jackson.map.type.TypeBindings: void <init>(org.codehaus.jackson.map.type.TypeFactory,java.lang.Class)>(r0, r1);

        $r4 = virtualinvoke r0.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType[] findTypeParameters(java.lang.Class,java.lang.Class,org.codehaus.jackson.map.type.TypeBindings)>(r1, r2, $r3);

        return $r4;
    }

    public org.codehaus.jackson.type.JavaType[] findTypeParameters(java.lang.Class, java.lang.Class, org.codehaus.jackson.map.type.TypeBindings)
    {
        org.codehaus.jackson.map.type.TypeBindings $r8, r26;
        boolean $z0, $z1;
        org.codehaus.jackson.type.JavaType[] $r5;
        java.lang.reflect.Type $r14;
        java.lang.reflect.Type[] $r10;
        org.codehaus.jackson.map.type.HierarchicType $r3, $r4, $r6, r27;
        java.lang.StringBuilder $r18, $r19, $r21, $r22, $r24;
        org.codehaus.jackson.map.type.TypeFactory r0, $r15;
        int i0, i1;
        org.codehaus.jackson.type.JavaType $r16;
        java.lang.String $r13, $r20, $r23, $r25;
        java.lang.reflect.TypeVariable $r12;
        java.lang.IllegalArgumentException $r17;
        java.lang.reflect.ParameterizedType $r9;
        java.lang.reflect.TypeVariable[] $r11;
        java.lang.Class r1, r2, $r7;

        r0 := @this: org.codehaus.jackson.map.type.TypeFactory;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.lang.Class;

        r26 := @parameter2: org.codehaus.jackson.map.type.TypeBindings;

        $r3 = virtualinvoke r0.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.map.type.HierarchicType _findSuperTypeChain(java.lang.Class,java.lang.Class)>(r1, r2);

        if $r3 != null goto label1;

        $r17 = new java.lang.IllegalArgumentException;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Class ");

        $r20 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>();

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not a subtype of ");

        $r23 = virtualinvoke r2.<java.lang.Class: java.lang.String getName()>();

        $r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r17.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r25);

        throw $r17;

     label1:
        r27 = $r3;

     label2:
        $r4 = virtualinvoke r27.<org.codehaus.jackson.map.type.HierarchicType: org.codehaus.jackson.map.type.HierarchicType getSuperType()>();

        if $r4 == null goto label5;

        $r6 = virtualinvoke r27.<org.codehaus.jackson.map.type.HierarchicType: org.codehaus.jackson.map.type.HierarchicType getSuperType()>();

        r27 = $r6;

        $r7 = virtualinvoke $r6.<org.codehaus.jackson.map.type.HierarchicType: java.lang.Class getRawClass()>();

        $r8 = new org.codehaus.jackson.map.type.TypeBindings;

        specialinvoke $r8.<org.codehaus.jackson.map.type.TypeBindings: void <init>(org.codehaus.jackson.map.type.TypeFactory,java.lang.Class)>(r0, $r7);

        $z1 = virtualinvoke $r6.<org.codehaus.jackson.map.type.HierarchicType: boolean isGeneric()>();

        if $z1 == 0 goto label4;

        $r9 = virtualinvoke $r6.<org.codehaus.jackson.map.type.HierarchicType: java.lang.reflect.ParameterizedType asGeneric()>();

        $r10 = interfaceinvoke $r9.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();

        $r11 = virtualinvoke $r7.<java.lang.Class: java.lang.reflect.TypeVariable[] getTypeParameters()>();

        i0 = lengthof $r10;

        i1 = 0;

     label3:
        if i1 >= i0 goto label4;

        $r12 = $r11[i1];

        $r13 = interfaceinvoke $r12.<java.lang.reflect.TypeVariable: java.lang.String getName()>();

        $r15 = <org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.map.type.TypeFactory instance>;

        $r14 = $r10[i1];

        $r16 = virtualinvoke $r15.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType _constructType(java.lang.reflect.Type,org.codehaus.jackson.map.type.TypeBindings)>($r14, r26);

        virtualinvoke $r8.<org.codehaus.jackson.map.type.TypeBindings: void addBinding(java.lang.String,org.codehaus.jackson.type.JavaType)>($r13, $r16);

        i1 = i1 + 1;

        goto label3;

     label4:
        r26 = $r8;

        goto label2;

     label5:
        $z0 = virtualinvoke r27.<org.codehaus.jackson.map.type.HierarchicType: boolean isGeneric()>();

        if $z0 != 0 goto label6;

        return null;

     label6:
        $r5 = virtualinvoke r26.<org.codehaus.jackson.map.type.TypeBindings: org.codehaus.jackson.type.JavaType[] typesAsArray()>();

        return $r5;
    }

    public org.codehaus.jackson.type.JavaType constructType(java.lang.reflect.Type)
    {
        org.codehaus.jackson.map.type.TypeFactory r0;
        org.codehaus.jackson.type.JavaType $r2;
        java.lang.reflect.Type r1;

        r0 := @this: org.codehaus.jackson.map.type.TypeFactory;

        r1 := @parameter0: java.lang.reflect.Type;

        $r2 = virtualinvoke r0.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType _constructType(java.lang.reflect.Type,org.codehaus.jackson.map.type.TypeBindings)>(r1, null);

        return $r2;
    }

    public org.codehaus.jackson.type.JavaType constructType(java.lang.reflect.Type, org.codehaus.jackson.map.type.TypeBindings)
    {
        org.codehaus.jackson.map.type.TypeFactory r0;
        java.lang.reflect.Type r1;
        org.codehaus.jackson.type.JavaType $r3;
        org.codehaus.jackson.map.type.TypeBindings r2;

        r0 := @this: org.codehaus.jackson.map.type.TypeFactory;

        r1 := @parameter0: java.lang.reflect.Type;

        r2 := @parameter1: org.codehaus.jackson.map.type.TypeBindings;

        $r3 = virtualinvoke r0.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType _constructType(java.lang.reflect.Type,org.codehaus.jackson.map.type.TypeBindings)>(r1, r2);

        return $r3;
    }

    public org.codehaus.jackson.type.JavaType constructType(org.codehaus.jackson.type.TypeReference)
    {
        org.codehaus.jackson.map.type.TypeFactory r0;
        java.lang.reflect.Type $r2;
        org.codehaus.jackson.type.TypeReference r1;
        org.codehaus.jackson.type.JavaType $r3;

        r0 := @this: org.codehaus.jackson.map.type.TypeFactory;

        r1 := @parameter0: org.codehaus.jackson.type.TypeReference;

        $r2 = virtualinvoke r1.<org.codehaus.jackson.type.TypeReference: java.lang.reflect.Type getType()>();

        $r3 = virtualinvoke r0.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType _constructType(java.lang.reflect.Type,org.codehaus.jackson.map.type.TypeBindings)>($r2, null);

        return $r3;
    }

    public org.codehaus.jackson.type.JavaType constructType(java.lang.reflect.Type, java.lang.Class)
    {
        org.codehaus.jackson.map.type.TypeFactory r1;
        java.lang.reflect.Type r2;
        org.codehaus.jackson.type.JavaType $r3;
        java.lang.Class r0;
        org.codehaus.jackson.map.type.TypeBindings $r4;

        r1 := @this: org.codehaus.jackson.map.type.TypeFactory;

        r2 := @parameter0: java.lang.reflect.Type;

        r0 := @parameter1: java.lang.Class;

        if r0 != null goto label1;

        $r4 = null;

        goto label2;

     label1:
        $r4 = new org.codehaus.jackson.map.type.TypeBindings;

        specialinvoke $r4.<org.codehaus.jackson.map.type.TypeBindings: void <init>(org.codehaus.jackson.map.type.TypeFactory,java.lang.Class)>(r1, r0);

     label2:
        $r3 = virtualinvoke r1.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType _constructType(java.lang.reflect.Type,org.codehaus.jackson.map.type.TypeBindings)>(r2, $r4);

        return $r3;
    }

    public org.codehaus.jackson.type.JavaType constructType(java.lang.reflect.Type, org.codehaus.jackson.type.JavaType)
    {
        org.codehaus.jackson.map.type.TypeFactory r1;
        java.lang.reflect.Type r2;
        org.codehaus.jackson.type.JavaType r0, $r3;
        org.codehaus.jackson.map.type.TypeBindings $r4;

        r1 := @this: org.codehaus.jackson.map.type.TypeFactory;

        r2 := @parameter0: java.lang.reflect.Type;

        r0 := @parameter1: org.codehaus.jackson.type.JavaType;

        if r0 != null goto label1;

        $r4 = null;

        goto label2;

     label1:
        $r4 = new org.codehaus.jackson.map.type.TypeBindings;

        specialinvoke $r4.<org.codehaus.jackson.map.type.TypeBindings: void <init>(org.codehaus.jackson.map.type.TypeFactory,org.codehaus.jackson.type.JavaType)>(r1, r0);

     label2:
        $r3 = virtualinvoke r1.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType _constructType(java.lang.reflect.Type,org.codehaus.jackson.map.type.TypeBindings)>(r2, $r4);

        return $r3;
    }

    public org.codehaus.jackson.type.JavaType _constructType(java.lang.reflect.Type, org.codehaus.jackson.map.type.TypeBindings)
    {
        java.lang.reflect.GenericArrayType $r11;
        java.lang.reflect.WildcardType $r8;
        org.codehaus.jackson.map.type.TypeBindings $r13, r14;
        org.codehaus.jackson.map.type.TypeFactory r7;
        org.codehaus.jackson.map.type.TypeModifier r9;
        int i0, i1;
        org.codehaus.jackson.type.JavaType r16;
        java.lang.String $r4, $r6;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        org.codehaus.jackson.map.type.TypeModifier[] $r17, r18;
        java.lang.reflect.TypeVariable $r10;
        java.lang.IllegalArgumentException $r1;
        java.lang.reflect.ParameterizedType $r12;
        java.lang.reflect.Type r0;
        java.lang.StringBuilder $r2, $r3, $r5;
        java.lang.Class r15;

        r7 := @this: org.codehaus.jackson.map.type.TypeFactory;

        r0 := @parameter0: java.lang.reflect.Type;

        r14 := @parameter1: org.codehaus.jackson.map.type.TypeBindings;

        $z0 = r0 instanceof java.lang.Class;

        if $z0 == 0 goto label2;

        r15 = (java.lang.Class) r0;

        if r14 != null goto label1;

        $r13 = new org.codehaus.jackson.map.type.TypeBindings;

        specialinvoke $r13.<org.codehaus.jackson.map.type.TypeBindings: void <init>(org.codehaus.jackson.map.type.TypeFactory,java.lang.Class)>(r7, r15);

        r14 = $r13;

     label1:
        r16 = virtualinvoke r7.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType _fromClass(java.lang.Class,org.codehaus.jackson.map.type.TypeBindings)>(r15, r14);

        goto label7;

     label2:
        $z1 = r0 instanceof java.lang.reflect.ParameterizedType;

        if $z1 == 0 goto label3;

        $r12 = (java.lang.reflect.ParameterizedType) r0;

        r16 = virtualinvoke r7.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType _fromParamType(java.lang.reflect.ParameterizedType,org.codehaus.jackson.map.type.TypeBindings)>($r12, r14);

        goto label7;

     label3:
        $z2 = r0 instanceof java.lang.reflect.GenericArrayType;

        if $z2 == 0 goto label4;

        $r11 = (java.lang.reflect.GenericArrayType) r0;

        r16 = virtualinvoke r7.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType _fromArrayType(java.lang.reflect.GenericArrayType,org.codehaus.jackson.map.type.TypeBindings)>($r11, r14);

        goto label7;

     label4:
        $z3 = r0 instanceof java.lang.reflect.TypeVariable;

        if $z3 == 0 goto label5;

        $r10 = (java.lang.reflect.TypeVariable) r0;

        r16 = virtualinvoke r7.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType _fromVariable(java.lang.reflect.TypeVariable,org.codehaus.jackson.map.type.TypeBindings)>($r10, r14);

        goto label7;

     label5:
        $z4 = r0 instanceof java.lang.reflect.WildcardType;

        if $z4 == 0 goto label6;

        $r8 = (java.lang.reflect.WildcardType) r0;

        r16 = virtualinvoke r7.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType _fromWildcard(java.lang.reflect.WildcardType,org.codehaus.jackson.map.type.TypeBindings)>($r8, r14);

        goto label7;

     label6:
        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unrecognized Type: ");

        $r4 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r1;

     label7:
        $r17 = r7.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.map.type.TypeModifier[] _modifiers>;

        if $r17 == null goto label9;

        $z5 = virtualinvoke r16.<org.codehaus.jackson.type.JavaType: boolean isContainerType()>();

        if $z5 != 0 goto label9;

        r18 = r7.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.map.type.TypeModifier[] _modifiers>;

        i0 = lengthof r18;

        i1 = 0;

     label8:
        if i1 >= i0 goto label9;

        r9 = r18[i1];

        r16 = virtualinvoke r9.<org.codehaus.jackson.map.type.TypeModifier: org.codehaus.jackson.type.JavaType modifyType(org.codehaus.jackson.type.JavaType,java.lang.reflect.Type,org.codehaus.jackson.map.type.TypeBindings,org.codehaus.jackson.map.type.TypeFactory)>(r16, r0, r14, r7);

        i1 = i1 + 1;

        goto label8;

     label9:
        return r16;
    }

    public org.codehaus.jackson.map.type.ArrayType constructArrayType(java.lang.Class)
    {
        org.codehaus.jackson.map.type.TypeFactory r0;
        org.codehaus.jackson.type.JavaType $r2;
        java.lang.Class r1;
        org.codehaus.jackson.map.type.ArrayType $r3;

        r0 := @this: org.codehaus.jackson.map.type.TypeFactory;

        r1 := @parameter0: java.lang.Class;

        $r2 = virtualinvoke r0.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType _constructType(java.lang.reflect.Type,org.codehaus.jackson.map.type.TypeBindings)>(r1, null);

        $r3 = staticinvoke <org.codehaus.jackson.map.type.ArrayType: org.codehaus.jackson.map.type.ArrayType construct(org.codehaus.jackson.type.JavaType,java.lang.Object,java.lang.Object)>($r2, null, null);

        return $r3;
    }

    public org.codehaus.jackson.map.type.ArrayType constructArrayType(org.codehaus.jackson.type.JavaType)
    {
        org.codehaus.jackson.map.type.TypeFactory r2;
        org.codehaus.jackson.type.JavaType r0;
        org.codehaus.jackson.map.type.ArrayType $r1;

        r2 := @this: org.codehaus.jackson.map.type.TypeFactory;

        r0 := @parameter0: org.codehaus.jackson.type.JavaType;

        $r1 = staticinvoke <org.codehaus.jackson.map.type.ArrayType: org.codehaus.jackson.map.type.ArrayType construct(org.codehaus.jackson.type.JavaType,java.lang.Object,java.lang.Object)>(r0, null, null);

        return $r1;
    }

    public org.codehaus.jackson.map.type.CollectionType constructCollectionType(java.lang.Class, java.lang.Class)
    {
        org.codehaus.jackson.map.type.TypeFactory r1;
        org.codehaus.jackson.map.type.CollectionType $r4;
        org.codehaus.jackson.type.JavaType $r3;
        java.lang.Class r0, r2;

        r1 := @this: org.codehaus.jackson.map.type.TypeFactory;

        r0 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.lang.Class;

        $r3 = virtualinvoke r1.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType constructType(java.lang.reflect.Type)>(r2);

        $r4 = staticinvoke <org.codehaus.jackson.map.type.CollectionType: org.codehaus.jackson.map.type.CollectionType construct(java.lang.Class,org.codehaus.jackson.type.JavaType)>(r0, $r3);

        return $r4;
    }

    public org.codehaus.jackson.map.type.CollectionType constructCollectionType(java.lang.Class, org.codehaus.jackson.type.JavaType)
    {
        org.codehaus.jackson.map.type.TypeFactory r3;
        org.codehaus.jackson.map.type.CollectionType $r2;
        org.codehaus.jackson.type.JavaType r1;
        java.lang.Class r0;

        r3 := @this: org.codehaus.jackson.map.type.TypeFactory;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: org.codehaus.jackson.type.JavaType;

        $r2 = staticinvoke <org.codehaus.jackson.map.type.CollectionType: org.codehaus.jackson.map.type.CollectionType construct(java.lang.Class,org.codehaus.jackson.type.JavaType)>(r0, r1);

        return $r2;
    }

    public org.codehaus.jackson.map.type.CollectionLikeType constructCollectionLikeType(java.lang.Class, java.lang.Class)
    {
        org.codehaus.jackson.map.type.TypeFactory r1;
        org.codehaus.jackson.map.type.CollectionLikeType $r4;
        org.codehaus.jackson.type.JavaType $r3;
        java.lang.Class r0, r2;

        r1 := @this: org.codehaus.jackson.map.type.TypeFactory;

        r0 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.lang.Class;

        $r3 = virtualinvoke r1.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType constructType(java.lang.reflect.Type)>(r2);

        $r4 = staticinvoke <org.codehaus.jackson.map.type.CollectionLikeType: org.codehaus.jackson.map.type.CollectionLikeType construct(java.lang.Class,org.codehaus.jackson.type.JavaType)>(r0, $r3);

        return $r4;
    }

    public org.codehaus.jackson.map.type.CollectionLikeType constructCollectionLikeType(java.lang.Class, org.codehaus.jackson.type.JavaType)
    {
        org.codehaus.jackson.map.type.CollectionLikeType $r2;
        org.codehaus.jackson.map.type.TypeFactory r3;
        org.codehaus.jackson.type.JavaType r1;
        java.lang.Class r0;

        r3 := @this: org.codehaus.jackson.map.type.TypeFactory;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: org.codehaus.jackson.type.JavaType;

        $r2 = staticinvoke <org.codehaus.jackson.map.type.CollectionLikeType: org.codehaus.jackson.map.type.CollectionLikeType construct(java.lang.Class,org.codehaus.jackson.type.JavaType)>(r0, r1);

        return $r2;
    }

    public org.codehaus.jackson.map.type.MapType constructMapType(java.lang.Class, org.codehaus.jackson.type.JavaType, org.codehaus.jackson.type.JavaType)
    {
        org.codehaus.jackson.map.type.TypeFactory r4;
        org.codehaus.jackson.map.type.MapType $r3;
        org.codehaus.jackson.type.JavaType r1, r2;
        java.lang.Class r0;

        r4 := @this: org.codehaus.jackson.map.type.TypeFactory;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: org.codehaus.jackson.type.JavaType;

        r2 := @parameter2: org.codehaus.jackson.type.JavaType;

        $r3 = staticinvoke <org.codehaus.jackson.map.type.MapType: org.codehaus.jackson.map.type.MapType construct(java.lang.Class,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.type.JavaType)>(r0, r1, r2);

        return $r3;
    }

    public org.codehaus.jackson.map.type.MapType constructMapType(java.lang.Class, java.lang.Class, java.lang.Class)
    {
        org.codehaus.jackson.map.type.TypeFactory r1;
        org.codehaus.jackson.map.type.MapType $r6;
        org.codehaus.jackson.type.JavaType $r3, $r5;
        java.lang.Class r0, r2, r4;

        r1 := @this: org.codehaus.jackson.map.type.TypeFactory;

        r0 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.lang.Class;

        r4 := @parameter2: java.lang.Class;

        $r3 = virtualinvoke r1.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType constructType(java.lang.reflect.Type)>(r2);

        $r5 = virtualinvoke r1.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType constructType(java.lang.reflect.Type)>(r4);

        $r6 = staticinvoke <org.codehaus.jackson.map.type.MapType: org.codehaus.jackson.map.type.MapType construct(java.lang.Class,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.type.JavaType)>(r0, $r3, $r5);

        return $r6;
    }

    public org.codehaus.jackson.map.type.MapLikeType constructMapLikeType(java.lang.Class, org.codehaus.jackson.type.JavaType, org.codehaus.jackson.type.JavaType)
    {
        org.codehaus.jackson.map.type.TypeFactory r4;
        org.codehaus.jackson.map.type.MapLikeType $r3;
        org.codehaus.jackson.type.JavaType r1, r2;
        java.lang.Class r0;

        r4 := @this: org.codehaus.jackson.map.type.TypeFactory;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: org.codehaus.jackson.type.JavaType;

        r2 := @parameter2: org.codehaus.jackson.type.JavaType;

        $r3 = staticinvoke <org.codehaus.jackson.map.type.MapLikeType: org.codehaus.jackson.map.type.MapLikeType construct(java.lang.Class,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.type.JavaType)>(r0, r1, r2);

        return $r3;
    }

    public org.codehaus.jackson.map.type.MapLikeType constructMapLikeType(java.lang.Class, java.lang.Class, java.lang.Class)
    {
        org.codehaus.jackson.map.type.TypeFactory r1;
        org.codehaus.jackson.map.type.MapType $r6;
        org.codehaus.jackson.type.JavaType $r3, $r5;
        java.lang.Class r0, r2, r4;

        r1 := @this: org.codehaus.jackson.map.type.TypeFactory;

        r0 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.lang.Class;

        r4 := @parameter2: java.lang.Class;

        $r3 = virtualinvoke r1.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType constructType(java.lang.reflect.Type)>(r2);

        $r5 = virtualinvoke r1.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType constructType(java.lang.reflect.Type)>(r4);

        $r6 = staticinvoke <org.codehaus.jackson.map.type.MapType: org.codehaus.jackson.map.type.MapType construct(java.lang.Class,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.type.JavaType)>(r0, $r3, $r5);

        return $r6;
    }

    public org.codehaus.jackson.type.JavaType constructSimpleType(java.lang.Class, org.codehaus.jackson.type.JavaType[])
    {
        org.codehaus.jackson.map.type.SimpleType $r4;
        java.lang.String[] r3;
        org.codehaus.jackson.map.type.TypeFactory r17;
        int $i0, $i1, $i2, i3, $i4, $i5, i6;
        java.lang.String $r6, $r10, $r16;
        java.lang.reflect.TypeVariable $r5;
        org.codehaus.jackson.type.JavaType[] r2;
        java.lang.IllegalArgumentException $r7;
        java.lang.reflect.TypeVariable[] $r1;
        java.lang.Class r0;
        java.lang.StringBuilder $r8, $r9, $r11, $r12, $r13, $r14, $r15;

        r17 := @this: org.codehaus.jackson.map.type.TypeFactory;

        r0 := @parameter0: java.lang.Class;

        r2 := @parameter1: org.codehaus.jackson.type.JavaType[];

        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.TypeVariable[] getTypeParameters()>();

        $i1 = lengthof $r1;

        $i0 = lengthof r2;

        if $i1 == $i0 goto label1;

        $r7 = new java.lang.IllegalArgumentException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Parameter type mismatch for ");

        $r10 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": expected ");

        $i4 = lengthof $r1;

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" parameters, was given ");

        $i5 = lengthof r2;

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r16);

        throw $r7;

     label1:
        $i2 = lengthof $r1;

        r3 = newarray (java.lang.String)[$i2];

        i6 = 0;

        i3 = lengthof $r1;

     label2:
        if i6 >= i3 goto label3;

        $r5 = $r1[i6];

        $r6 = interfaceinvoke $r5.<java.lang.reflect.TypeVariable: java.lang.String getName()>();

        r3[i6] = $r6;

        i6 = i6 + 1;

        goto label2;

     label3:
        $r4 = new org.codehaus.jackson.map.type.SimpleType;

        specialinvoke $r4.<org.codehaus.jackson.map.type.SimpleType: void <init>(java.lang.Class,java.lang.String[],org.codehaus.jackson.type.JavaType[],java.lang.Object,java.lang.Object)>(r0, r3, r2, null, null);

        return $r4;
    }

    public org.codehaus.jackson.type.JavaType uncheckedSimpleType(java.lang.Class)
    {
        org.codehaus.jackson.map.type.TypeFactory r2;
        java.lang.Class r1;
        org.codehaus.jackson.map.type.SimpleType $r0;

        r2 := @this: org.codehaus.jackson.map.type.TypeFactory;

        r1 := @parameter0: java.lang.Class;

        $r0 = new org.codehaus.jackson.map.type.SimpleType;

        specialinvoke $r0.<org.codehaus.jackson.map.type.SimpleType: void <init>(java.lang.Class)>(r1);

        return $r0;
    }

    public transient org.codehaus.jackson.type.JavaType constructParametricType(java.lang.Class, java.lang.Class[])
    {
        java.lang.Class[] r0;
        org.codehaus.jackson.type.JavaType[] r1;
        org.codehaus.jackson.map.type.TypeFactory r2;
        int i0, i1;
        org.codehaus.jackson.type.JavaType $r4, $r6;
        java.lang.Class r3, $r5;

        r2 := @this: org.codehaus.jackson.map.type.TypeFactory;

        r3 := @parameter0: java.lang.Class;

        r0 := @parameter1: java.lang.Class[];

        i0 = lengthof r0;

        r1 = newarray (org.codehaus.jackson.type.JavaType)[i0];

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r5 = r0[i1];

        $r6 = virtualinvoke r2.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType _fromClass(java.lang.Class,org.codehaus.jackson.map.type.TypeBindings)>($r5, null);

        r1[i1] = $r6;

        i1 = i1 + 1;

        goto label1;

     label2:
        $r4 = virtualinvoke r2.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType constructParametricType(java.lang.Class,org.codehaus.jackson.type.JavaType[])>(r3, r1);

        return $r4;
    }

    public transient org.codehaus.jackson.type.JavaType constructParametricType(java.lang.Class, org.codehaus.jackson.type.JavaType[])
    {
        boolean $z0, $z1, $z2;
        org.codehaus.jackson.type.JavaType[] r4;
        java.lang.StringBuilder $r7, $r8, $r10, $r11, $r16, $r17, $r19, $r20, $r24, $r25, $r27, $r28;
        org.codehaus.jackson.map.type.TypeFactory r3;
        int $i0, $i1, $i2;
        org.codehaus.jackson.type.JavaType $r5, $r13, $r14, $r22, r30;
        java.lang.String $r9, $r12, $r18, $r21, $r26, $r29;
        java.lang.IllegalArgumentException $r6, $r15, $r23;
        java.lang.Class r0, $r1, $r2;

        r3 := @this: org.codehaus.jackson.map.type.TypeFactory;

        r0 := @parameter0: java.lang.Class;

        r4 := @parameter1: org.codehaus.jackson.type.JavaType[];

        $z0 = virtualinvoke r0.<java.lang.Class: boolean isArray()>();

        if $z0 == 0 goto label2;

        $i2 = lengthof r4;

        if $i2 == 1 goto label1;

        $r23 = new java.lang.IllegalArgumentException;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Need exactly 1 parameter type for arrays (");

        $r26 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r27 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r26);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r23.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r29);

        throw $r23;

     label1:
        $r22 = r4[0];

        r30 = virtualinvoke r3.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.map.type.ArrayType constructArrayType(org.codehaus.jackson.type.JavaType)>($r22);

        goto label7;

     label2:
        $r1 = class "Ljava/util/Map;";

        $z1 = virtualinvoke $r1.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r0);

        if $z1 == 0 goto label4;

        $i1 = lengthof r4;

        if $i1 == 2 goto label3;

        $r15 = new java.lang.IllegalArgumentException;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Need exactly 2 parameter types for Map types (");

        $r18 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r15.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r21);

        throw $r15;

     label3:
        $r14 = r4[0];

        $r13 = r4[1];

        r30 = virtualinvoke r3.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.map.type.MapType constructMapType(java.lang.Class,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.type.JavaType)>(r0, $r14, $r13);

        goto label7;

     label4:
        $r2 = class "Ljava/util/Collection;";

        $z2 = virtualinvoke $r2.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r0);

        if $z2 == 0 goto label6;

        $i0 = lengthof r4;

        if $i0 == 1 goto label5;

        $r6 = new java.lang.IllegalArgumentException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Need exactly 1 parameter type for Collection types (");

        $r9 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r12);

        throw $r6;

     label5:
        $r5 = r4[0];

        r30 = virtualinvoke r3.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.map.type.CollectionType constructCollectionType(java.lang.Class,org.codehaus.jackson.type.JavaType)>(r0, $r5);

        goto label7;

     label6:
        r30 = virtualinvoke r3.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType constructSimpleType(java.lang.Class,org.codehaus.jackson.type.JavaType[])>(r0, r4);

     label7:
        return r30;
    }

    public org.codehaus.jackson.map.type.CollectionType constructRawCollectionType(java.lang.Class)
    {
        org.codehaus.jackson.map.type.TypeFactory r3;
        org.codehaus.jackson.map.type.CollectionType $r2;
        org.codehaus.jackson.type.JavaType $r1;
        java.lang.Class r0;

        r3 := @this: org.codehaus.jackson.map.type.TypeFactory;

        r0 := @parameter0: java.lang.Class;

        $r1 = staticinvoke <org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType unknownType()>();

        $r2 = staticinvoke <org.codehaus.jackson.map.type.CollectionType: org.codehaus.jackson.map.type.CollectionType construct(java.lang.Class,org.codehaus.jackson.type.JavaType)>(r0, $r1);

        return $r2;
    }

    public org.codehaus.jackson.map.type.CollectionLikeType constructRawCollectionLikeType(java.lang.Class)
    {
        org.codehaus.jackson.map.type.CollectionLikeType $r2;
        org.codehaus.jackson.map.type.TypeFactory r3;
        org.codehaus.jackson.type.JavaType $r1;
        java.lang.Class r0;

        r3 := @this: org.codehaus.jackson.map.type.TypeFactory;

        r0 := @parameter0: java.lang.Class;

        $r1 = staticinvoke <org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType unknownType()>();

        $r2 = staticinvoke <org.codehaus.jackson.map.type.CollectionLikeType: org.codehaus.jackson.map.type.CollectionLikeType construct(java.lang.Class,org.codehaus.jackson.type.JavaType)>(r0, $r1);

        return $r2;
    }

    public org.codehaus.jackson.map.type.MapType constructRawMapType(java.lang.Class)
    {
        org.codehaus.jackson.map.type.TypeFactory r4;
        org.codehaus.jackson.map.type.MapType $r3;
        org.codehaus.jackson.type.JavaType $r1, $r2;
        java.lang.Class r0;

        r4 := @this: org.codehaus.jackson.map.type.TypeFactory;

        r0 := @parameter0: java.lang.Class;

        $r1 = staticinvoke <org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType unknownType()>();

        $r2 = staticinvoke <org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType unknownType()>();

        $r3 = staticinvoke <org.codehaus.jackson.map.type.MapType: org.codehaus.jackson.map.type.MapType construct(java.lang.Class,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.type.JavaType)>(r0, $r1, $r2);

        return $r3;
    }

    public org.codehaus.jackson.map.type.MapLikeType constructRawMapLikeType(java.lang.Class)
    {
        org.codehaus.jackson.map.type.TypeFactory r4;
        org.codehaus.jackson.map.type.MapLikeType $r3;
        org.codehaus.jackson.type.JavaType $r1, $r2;
        java.lang.Class r0;

        r4 := @this: org.codehaus.jackson.map.type.TypeFactory;

        r0 := @parameter0: java.lang.Class;

        $r1 = staticinvoke <org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType unknownType()>();

        $r2 = staticinvoke <org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType unknownType()>();

        $r3 = staticinvoke <org.codehaus.jackson.map.type.MapLikeType: org.codehaus.jackson.map.type.MapLikeType construct(java.lang.Class,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.type.JavaType)>(r0, $r1, $r2);

        return $r3;
    }

    protected org.codehaus.jackson.type.JavaType _fromClass(java.lang.Class, org.codehaus.jackson.map.type.TypeBindings)
    {
        org.codehaus.jackson.map.type.SimpleType $r3, $r7;
        org.codehaus.jackson.map.type.TypeBindings r11;
        org.codehaus.jackson.map.type.TypeFactory r4;
        org.codehaus.jackson.type.JavaType $r5, $r6, $r9;
        boolean $z0, $z1, $z2, $z3;
        java.lang.Class r0, $r1, $r2, $r8;
        org.codehaus.jackson.map.type.ArrayType $r10;

        r4 := @this: org.codehaus.jackson.map.type.TypeFactory;

        r0 := @parameter0: java.lang.Class;

        r11 := @parameter1: org.codehaus.jackson.map.type.TypeBindings;

        $z0 = virtualinvoke r0.<java.lang.Class: boolean isArray()>();

        if $z0 == 0 goto label1;

        $r8 = virtualinvoke r0.<java.lang.Class: java.lang.Class getComponentType()>();

        $r9 = virtualinvoke r4.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType _constructType(java.lang.reflect.Type,org.codehaus.jackson.map.type.TypeBindings)>($r8, null);

        $r10 = staticinvoke <org.codehaus.jackson.map.type.ArrayType: org.codehaus.jackson.map.type.ArrayType construct(org.codehaus.jackson.type.JavaType,java.lang.Object,java.lang.Object)>($r9, null, null);

        return $r10;

     label1:
        $z1 = virtualinvoke r0.<java.lang.Class: boolean isEnum()>();

        if $z1 == 0 goto label2;

        $r7 = new org.codehaus.jackson.map.type.SimpleType;

        specialinvoke $r7.<org.codehaus.jackson.map.type.SimpleType: void <init>(java.lang.Class)>(r0);

        return $r7;

     label2:
        $r1 = class "Ljava/util/Map;";

        $z2 = virtualinvoke $r1.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r0);

        if $z2 == 0 goto label3;

        $r6 = specialinvoke r4.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType _mapType(java.lang.Class)>(r0);

        return $r6;

     label3:
        $r2 = class "Ljava/util/Collection;";

        $z3 = virtualinvoke $r2.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r0);

        if $z3 == 0 goto label4;

        $r5 = specialinvoke r4.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType _collectionType(java.lang.Class)>(r0);

        return $r5;

     label4:
        $r3 = new org.codehaus.jackson.map.type.SimpleType;

        specialinvoke $r3.<org.codehaus.jackson.map.type.SimpleType: void <init>(java.lang.Class)>(r0);

        return $r3;
    }

    protected org.codehaus.jackson.type.JavaType _fromParameterizedClass(java.lang.Class, java.util.List)
    {
        org.codehaus.jackson.map.type.SimpleType $r8, $r17;
        boolean $z0, $z1, $z2, $z3;
        org.codehaus.jackson.type.JavaType[] $r4, r23;
        java.util.List r3;
        java.lang.Object[] $r5;
        org.codehaus.jackson.map.type.TypeFactory r6;
        int $i0, $i1, $i2, $i3, $i4;
        org.codehaus.jackson.type.JavaType $r7, $r9, $r11, $r13, $r19, r21, $r22;
        org.codehaus.jackson.map.type.CollectionType $r12;
        org.codehaus.jackson.map.type.MapType $r15;
        java.lang.Class r0, $r1, $r2, $r18;
        java.lang.Object $r10, $r14, $r16;
        org.codehaus.jackson.map.type.ArrayType $r20;

        r6 := @this: org.codehaus.jackson.map.type.TypeFactory;

        r0 := @parameter0: java.lang.Class;

        r3 := @parameter1: java.util.List;

        $z0 = virtualinvoke r0.<java.lang.Class: boolean isArray()>();

        if $z0 == 0 goto label1;

        $r18 = virtualinvoke r0.<java.lang.Class: java.lang.Class getComponentType()>();

        $r19 = virtualinvoke r6.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType _constructType(java.lang.reflect.Type,org.codehaus.jackson.map.type.TypeBindings)>($r18, null);

        $r20 = staticinvoke <org.codehaus.jackson.map.type.ArrayType: org.codehaus.jackson.map.type.ArrayType construct(org.codehaus.jackson.type.JavaType,java.lang.Object,java.lang.Object)>($r19, null, null);

        return $r20;

     label1:
        $z1 = virtualinvoke r0.<java.lang.Class: boolean isEnum()>();

        if $z1 == 0 goto label2;

        $r17 = new org.codehaus.jackson.map.type.SimpleType;

        specialinvoke $r17.<org.codehaus.jackson.map.type.SimpleType: void <init>(java.lang.Class)>(r0);

        return $r17;

     label2:
        $r1 = class "Ljava/util/Map;";

        $z2 = virtualinvoke $r1.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r0);

        if $z2 == 0 goto label6;

        $i3 = interfaceinvoke r3.<java.util.List: int size()>();

        if $i3 <= 0 goto label5;

        $r14 = interfaceinvoke r3.<java.util.List: java.lang.Object get(int)>(0);

        r21 = (org.codehaus.jackson.type.JavaType) $r14;

        $i4 = interfaceinvoke r3.<java.util.List: int size()>();

        if $i4 < 2 goto label3;

        $r16 = interfaceinvoke r3.<java.util.List: java.lang.Object get(int)>(1);

        $r22 = (org.codehaus.jackson.type.JavaType) $r16;

        goto label4;

     label3:
        $r22 = virtualinvoke r6.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType _unknownType()>();

     label4:
        $r15 = staticinvoke <org.codehaus.jackson.map.type.MapType: org.codehaus.jackson.map.type.MapType construct(java.lang.Class,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.type.JavaType)>(r0, r21, $r22);

        return $r15;

     label5:
        $r13 = specialinvoke r6.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType _mapType(java.lang.Class)>(r0);

        return $r13;

     label6:
        $r2 = class "Ljava/util/Collection;";

        $z3 = virtualinvoke $r2.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r0);

        if $z3 == 0 goto label8;

        $i2 = interfaceinvoke r3.<java.util.List: int size()>();

        if $i2 < 1 goto label7;

        $r10 = interfaceinvoke r3.<java.util.List: java.lang.Object get(int)>(0);

        $r11 = (org.codehaus.jackson.type.JavaType) $r10;

        $r12 = staticinvoke <org.codehaus.jackson.map.type.CollectionType: org.codehaus.jackson.map.type.CollectionType construct(java.lang.Class,org.codehaus.jackson.type.JavaType)>(r0, $r11);

        return $r12;

     label7:
        $r9 = specialinvoke r6.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType _collectionType(java.lang.Class)>(r0);

        return $r9;

     label8:
        $i0 = interfaceinvoke r3.<java.util.List: int size()>();

        if $i0 != 0 goto label9;

        $r8 = new org.codehaus.jackson.map.type.SimpleType;

        specialinvoke $r8.<org.codehaus.jackson.map.type.SimpleType: void <init>(java.lang.Class)>(r0);

        return $r8;

     label9:
        $i1 = interfaceinvoke r3.<java.util.List: int size()>();

        $r4 = newarray (org.codehaus.jackson.type.JavaType)[$i1];

        $r5 = interfaceinvoke r3.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r4);

        r23 = (org.codehaus.jackson.type.JavaType[]) $r5;

        $r7 = virtualinvoke r6.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType constructSimpleType(java.lang.Class,org.codehaus.jackson.type.JavaType[])>(r0, r23);

        return $r7;
    }

    protected org.codehaus.jackson.type.JavaType _fromParamType(java.lang.reflect.ParameterizedType, org.codehaus.jackson.map.type.TypeBindings)
    {
        org.codehaus.jackson.map.type.SimpleType $r8;
        org.codehaus.jackson.map.type.TypeBindings r36;
        boolean $z0, $z1;
        org.codehaus.jackson.type.JavaType[] $r10, $r23, r39;
        java.lang.reflect.Type $r1, $r37;
        java.lang.reflect.Type[] $r3;
        java.lang.StringBuilder $r14, $r15, $r17, $r18, $r19, $r20, $r28, $r29, $r31, $r32, $r33, $r34;
        org.codehaus.jackson.map.type.TypeFactory r6;
        int i0, $i1, $i2, $i3, $i4, $i5, i6;
        org.codehaus.jackson.type.JavaType $r7, $r9, $r11, $r22, $r24, $r25, $r38;
        java.lang.String $r16, $r21, $r30, $r35;
        org.codehaus.jackson.map.type.CollectionType $r12;
        java.lang.IllegalArgumentException $r13, $r27;
        java.lang.reflect.ParameterizedType r0;
        org.codehaus.jackson.map.type.MapType $r26;
        java.lang.Class r2, $r4, $r5;

        r6 := @this: org.codehaus.jackson.map.type.TypeFactory;

        r0 := @parameter0: java.lang.reflect.ParameterizedType;

        r36 := @parameter1: org.codehaus.jackson.map.type.TypeBindings;

        $r1 = interfaceinvoke r0.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>();

        r2 = (java.lang.Class) $r1;

        $r3 = interfaceinvoke r0.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();

        if $r3 != null goto label01;

        $i5 = 0;

        goto label02;

     label01:
        $i5 = lengthof $r3;

     label02:
        i0 = $i5;

        if $i5 != 0 goto label03;

        r39 = <org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType[] NO_TYPES>;

        goto label05;

     label03:
        r39 = newarray (org.codehaus.jackson.type.JavaType)[$i5];

        i6 = 0;

     label04:
        if i6 >= i0 goto label05;

        $r37 = $r3[i6];

        $r38 = virtualinvoke r6.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType _constructType(java.lang.reflect.Type,org.codehaus.jackson.map.type.TypeBindings)>($r37, r36);

        r39[i6] = $r38;

        i6 = i6 + 1;

        goto label04;

     label05:
        $r4 = class "Ljava/util/Map;";

        $z0 = virtualinvoke $r4.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r2);

        if $z0 == 0 goto label07;

        $r22 = virtualinvoke r6.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType constructSimpleType(java.lang.Class,org.codehaus.jackson.type.JavaType[])>(r2, r39);

        $r23 = virtualinvoke r6.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType[] findTypeParameters(org.codehaus.jackson.type.JavaType,java.lang.Class)>($r22, class "Ljava/util/Map;");

        $i3 = lengthof $r23;

        if $i3 == 2 goto label06;

        $r27 = new java.lang.IllegalArgumentException;

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not find 2 type parameters for Map class ");

        $r30 = virtualinvoke r2.<java.lang.Class: java.lang.String getName()>();

        $r31 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r30);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (found ");

        $i4 = lengthof $r23;

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r27.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r35);

        throw $r27;

     label06:
        $r25 = $r23[0];

        $r24 = $r23[1];

        $r26 = staticinvoke <org.codehaus.jackson.map.type.MapType: org.codehaus.jackson.map.type.MapType construct(java.lang.Class,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.type.JavaType)>(r2, $r25, $r24);

        return $r26;

     label07:
        $r5 = class "Ljava/util/Collection;";

        $z1 = virtualinvoke $r5.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r2);

        if $z1 == 0 goto label09;

        $r9 = virtualinvoke r6.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType constructSimpleType(java.lang.Class,org.codehaus.jackson.type.JavaType[])>(r2, r39);

        $r10 = virtualinvoke r6.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType[] findTypeParameters(org.codehaus.jackson.type.JavaType,java.lang.Class)>($r9, class "Ljava/util/Collection;");

        $i1 = lengthof $r10;

        if $i1 == 1 goto label08;

        $r13 = new java.lang.IllegalArgumentException;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not find 1 type parameter for Collection class ");

        $r16 = virtualinvoke r2.<java.lang.Class: java.lang.String getName()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (found ");

        $i2 = lengthof $r10;

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r21);

        throw $r13;

     label08:
        $r11 = $r10[0];

        $r12 = staticinvoke <org.codehaus.jackson.map.type.CollectionType: org.codehaus.jackson.map.type.CollectionType construct(java.lang.Class,org.codehaus.jackson.type.JavaType)>(r2, $r11);

        return $r12;

     label09:
        if i0 != 0 goto label10;

        $r8 = new org.codehaus.jackson.map.type.SimpleType;

        specialinvoke $r8.<org.codehaus.jackson.map.type.SimpleType: void <init>(java.lang.Class)>(r2);

        return $r8;

     label10:
        $r7 = virtualinvoke r6.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType constructSimpleType(java.lang.Class,org.codehaus.jackson.type.JavaType[])>(r2, r39);

        return $r7;
    }

    protected org.codehaus.jackson.type.JavaType _fromArrayType(java.lang.reflect.GenericArrayType, org.codehaus.jackson.map.type.TypeBindings)
    {
        org.codehaus.jackson.map.type.TypeFactory r0;
        java.lang.reflect.GenericArrayType r1;
        java.lang.reflect.Type $r2;
        org.codehaus.jackson.type.JavaType $r4;
        org.codehaus.jackson.map.type.TypeBindings r3;
        org.codehaus.jackson.map.type.ArrayType $r5;

        r0 := @this: org.codehaus.jackson.map.type.TypeFactory;

        r1 := @parameter0: java.lang.reflect.GenericArrayType;

        r3 := @parameter1: org.codehaus.jackson.map.type.TypeBindings;

        $r2 = interfaceinvoke r1.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>();

        $r4 = virtualinvoke r0.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType _constructType(java.lang.reflect.Type,org.codehaus.jackson.map.type.TypeBindings)>($r2, r3);

        $r5 = staticinvoke <org.codehaus.jackson.map.type.ArrayType: org.codehaus.jackson.map.type.ArrayType construct(org.codehaus.jackson.type.JavaType,java.lang.Object,java.lang.Object)>($r4, null, null);

        return $r5;
    }

    protected org.codehaus.jackson.type.JavaType _fromVariable(java.lang.reflect.TypeVariable, org.codehaus.jackson.map.type.TypeBindings)
    {
        java.lang.reflect.TypeVariable r1;
        org.codehaus.jackson.map.type.TypeBindings r0;
        org.codehaus.jackson.map.type.TypeFactory r5;
        java.lang.reflect.Type $r6;
        java.lang.reflect.Type[] $r4;
        org.codehaus.jackson.type.JavaType $r3, $r7, $r8;
        java.lang.String $r2;

        r5 := @this: org.codehaus.jackson.map.type.TypeFactory;

        r1 := @parameter0: java.lang.reflect.TypeVariable;

        r0 := @parameter1: org.codehaus.jackson.map.type.TypeBindings;

        if r0 != null goto label1;

        $r8 = virtualinvoke r5.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType _unknownType()>();

        return $r8;

     label1:
        $r2 = interfaceinvoke r1.<java.lang.reflect.TypeVariable: java.lang.String getName()>();

        $r3 = virtualinvoke r0.<org.codehaus.jackson.map.type.TypeBindings: org.codehaus.jackson.type.JavaType findType(java.lang.String)>($r2);

        if $r3 == null goto label2;

        return $r3;

     label2:
        $r4 = interfaceinvoke r1.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>();

        virtualinvoke r0.<org.codehaus.jackson.map.type.TypeBindings: void _addPlaceholder(java.lang.String)>($r2);

        $r6 = $r4[0];

        $r7 = virtualinvoke r5.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType _constructType(java.lang.reflect.Type,org.codehaus.jackson.map.type.TypeBindings)>($r6, r0);

        return $r7;
    }

    protected org.codehaus.jackson.type.JavaType _fromWildcard(java.lang.reflect.WildcardType, org.codehaus.jackson.map.type.TypeBindings)
    {
        org.codehaus.jackson.map.type.TypeFactory r0;
        java.lang.reflect.Type $r4;
        java.lang.reflect.WildcardType r1;
        java.lang.reflect.Type[] $r2;
        org.codehaus.jackson.type.JavaType $r5;
        org.codehaus.jackson.map.type.TypeBindings r3;

        r0 := @this: org.codehaus.jackson.map.type.TypeFactory;

        r1 := @parameter0: java.lang.reflect.WildcardType;

        r3 := @parameter1: org.codehaus.jackson.map.type.TypeBindings;

        $r2 = interfaceinvoke r1.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getUpperBounds()>();

        $r4 = $r2[0];

        $r5 = virtualinvoke r0.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType _constructType(java.lang.reflect.Type,org.codehaus.jackson.map.type.TypeBindings)>($r4, r3);

        return $r5;
    }

    private org.codehaus.jackson.type.JavaType _mapType(java.lang.Class)
    {
        org.codehaus.jackson.map.type.TypeFactory r0;
        int $i0;
        org.codehaus.jackson.type.JavaType $r3, $r4, $r13, $r14;
        java.lang.String $r9, $r12;
        org.codehaus.jackson.type.JavaType[] $r2;
        java.lang.IllegalArgumentException $r6;
        org.codehaus.jackson.map.type.MapType $r5, $r15;
        java.lang.Class r1;
        java.lang.StringBuilder $r7, $r8, $r10, $r11;

        r0 := @this: org.codehaus.jackson.map.type.TypeFactory;

        r1 := @parameter0: java.lang.Class;

        $r2 = virtualinvoke r0.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType[] findTypeParameters(java.lang.Class,java.lang.Class)>(r1, class "Ljava/util/Map;");

        if $r2 != null goto label1;

        $r13 = virtualinvoke r0.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType _unknownType()>();

        $r14 = virtualinvoke r0.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType _unknownType()>();

        $r15 = staticinvoke <org.codehaus.jackson.map.type.MapType: org.codehaus.jackson.map.type.MapType construct(java.lang.Class,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.type.JavaType)>(r1, $r13, $r14);

        return $r15;

     label1:
        $i0 = lengthof $r2;

        if $i0 == 2 goto label2;

        $r6 = new java.lang.IllegalArgumentException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Strange Map type ");

        $r9 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": can not determine type parameters");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r12);

        throw $r6;

     label2:
        $r4 = $r2[0];

        $r3 = $r2[1];

        $r5 = staticinvoke <org.codehaus.jackson.map.type.MapType: org.codehaus.jackson.map.type.MapType construct(java.lang.Class,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.type.JavaType)>(r1, $r4, $r3);

        return $r5;
    }

    private org.codehaus.jackson.type.JavaType _collectionType(java.lang.Class)
    {
        org.codehaus.jackson.map.type.CollectionType $r4, $r13;
        org.codehaus.jackson.type.JavaType[] $r2;
        java.lang.IllegalArgumentException $r5;
        org.codehaus.jackson.map.type.TypeFactory r0;
        int $i0;
        org.codehaus.jackson.type.JavaType $r3, $r12;
        java.lang.Class r1;
        java.lang.StringBuilder $r6, $r7, $r9, $r10;
        java.lang.String $r8, $r11;

        r0 := @this: org.codehaus.jackson.map.type.TypeFactory;

        r1 := @parameter0: java.lang.Class;

        $r2 = virtualinvoke r0.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType[] findTypeParameters(java.lang.Class,java.lang.Class)>(r1, class "Ljava/util/Collection;");

        if $r2 != null goto label1;

        $r12 = virtualinvoke r0.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType _unknownType()>();

        $r13 = staticinvoke <org.codehaus.jackson.map.type.CollectionType: org.codehaus.jackson.map.type.CollectionType construct(java.lang.Class,org.codehaus.jackson.type.JavaType)>(r1, $r12);

        return $r13;

     label1:
        $i0 = lengthof $r2;

        if $i0 == 1 goto label2;

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Strange Collection type ");

        $r8 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": can not determine type parameters");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);

        throw $r5;

     label2:
        $r3 = $r2[0];

        $r4 = staticinvoke <org.codehaus.jackson.map.type.CollectionType: org.codehaus.jackson.map.type.CollectionType construct(java.lang.Class,org.codehaus.jackson.type.JavaType)>(r1, $r3);

        return $r4;
    }

    protected org.codehaus.jackson.type.JavaType _resolveVariableViaSubTypes(org.codehaus.jackson.map.type.HierarchicType, java.lang.String, org.codehaus.jackson.map.type.TypeBindings)
    {
        org.codehaus.jackson.map.type.TypeBindings r10;
        org.codehaus.jackson.map.type.TypeFactory r1;
        int i0, i1;
        org.codehaus.jackson.type.JavaType $r11, $r15, $r16;
        java.lang.String r5, $r6, $r14;
        boolean $z0, $z1, $z2;
        java.lang.reflect.TypeVariable r4, $r13;
        java.lang.reflect.ParameterizedType $r7;
        java.lang.reflect.Type r9;
        java.lang.reflect.TypeVariable[] $r3;
        java.lang.reflect.Type[] $r8;
        org.codehaus.jackson.map.type.HierarchicType r0, $r12;
        java.lang.Class $r2;

        r1 := @this: org.codehaus.jackson.map.type.TypeFactory;

        r0 := @parameter0: org.codehaus.jackson.map.type.HierarchicType;

        r5 := @parameter1: java.lang.String;

        r10 := @parameter2: org.codehaus.jackson.map.type.TypeBindings;

        if r0 == null goto label4;

        $z0 = virtualinvoke r0.<org.codehaus.jackson.map.type.HierarchicType: boolean isGeneric()>();

        if $z0 == 0 goto label4;

        $r2 = virtualinvoke r0.<org.codehaus.jackson.map.type.HierarchicType: java.lang.Class getRawClass()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.TypeVariable[] getTypeParameters()>();

        i1 = 0;

        i0 = lengthof $r3;

     label1:
        if i1 >= i0 goto label4;

        r4 = $r3[i1];

        $r6 = interfaceinvoke r4.<java.lang.reflect.TypeVariable: java.lang.String getName()>();

        $z1 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z1 == 0 goto label3;

        $r7 = virtualinvoke r0.<org.codehaus.jackson.map.type.HierarchicType: java.lang.reflect.ParameterizedType asGeneric()>();

        $r8 = interfaceinvoke $r7.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();

        r9 = $r8[i1];

        $z2 = r9 instanceof java.lang.reflect.TypeVariable;

        if $z2 == 0 goto label2;

        $r12 = virtualinvoke r0.<org.codehaus.jackson.map.type.HierarchicType: org.codehaus.jackson.map.type.HierarchicType getSubType()>();

        $r13 = (java.lang.reflect.TypeVariable) r9;

        $r14 = interfaceinvoke $r13.<java.lang.reflect.TypeVariable: java.lang.String getName()>();

        $r15 = virtualinvoke r1.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType _resolveVariableViaSubTypes(org.codehaus.jackson.map.type.HierarchicType,java.lang.String,org.codehaus.jackson.map.type.TypeBindings)>($r12, $r14, r10);

        return $r15;

     label2:
        $r11 = virtualinvoke r1.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType _constructType(java.lang.reflect.Type,org.codehaus.jackson.map.type.TypeBindings)>(r9, r10);

        return $r11;

     label3:
        i1 = i1 + 1;

        goto label1;

     label4:
        $r16 = virtualinvoke r1.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType _unknownType()>();

        return $r16;
    }

    protected org.codehaus.jackson.type.JavaType _unknownType()
    {
        org.codehaus.jackson.map.type.TypeFactory r1;
        org.codehaus.jackson.map.type.SimpleType $r0;

        r1 := @this: org.codehaus.jackson.map.type.TypeFactory;

        $r0 = new org.codehaus.jackson.map.type.SimpleType;

        specialinvoke $r0.<org.codehaus.jackson.map.type.SimpleType: void <init>(java.lang.Class)>(class "Ljava/lang/Object;");

        return $r0;
    }

    protected org.codehaus.jackson.map.type.HierarchicType _findSuperTypeChain(java.lang.Class, java.lang.Class)
    {
        org.codehaus.jackson.map.type.TypeFactory r1;
        java.lang.Class r0, r2;
        org.codehaus.jackson.map.type.HierarchicType $r3, $r4;
        boolean $z0;

        r1 := @this: org.codehaus.jackson.map.type.TypeFactory;

        r2 := @parameter0: java.lang.Class;

        r0 := @parameter1: java.lang.Class;

        $z0 = virtualinvoke r0.<java.lang.Class: boolean isInterface()>();

        if $z0 == 0 goto label1;

        $r4 = virtualinvoke r1.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.map.type.HierarchicType _findSuperInterfaceChain(java.lang.reflect.Type,java.lang.Class)>(r2, r0);

        return $r4;

     label1:
        $r3 = virtualinvoke r1.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.map.type.HierarchicType _findSuperClassChain(java.lang.reflect.Type,java.lang.Class)>(r2, r0);

        return $r3;
    }

    protected org.codehaus.jackson.map.type.HierarchicType _findSuperClassChain(java.lang.reflect.Type, java.lang.Class)
    {
        org.codehaus.jackson.map.type.TypeFactory r5;
        java.lang.reflect.Type r1, $r4;
        org.codehaus.jackson.map.type.HierarchicType $r0, $r6;
        java.lang.Class $r2, r3;

        r5 := @this: org.codehaus.jackson.map.type.TypeFactory;

        r1 := @parameter0: java.lang.reflect.Type;

        r3 := @parameter1: java.lang.Class;

        $r0 = new org.codehaus.jackson.map.type.HierarchicType;

        specialinvoke $r0.<org.codehaus.jackson.map.type.HierarchicType: void <init>(java.lang.reflect.Type)>(r1);

        $r2 = virtualinvoke $r0.<org.codehaus.jackson.map.type.HierarchicType: java.lang.Class getRawClass()>();

        if $r2 != r3 goto label1;

        return $r0;

     label1:
        $r4 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Type getGenericSuperclass()>();

        if $r4 == null goto label2;

        $r6 = virtualinvoke r5.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.map.type.HierarchicType _findSuperClassChain(java.lang.reflect.Type,java.lang.Class)>($r4, r3);

        if $r6 == null goto label2;

        virtualinvoke $r6.<org.codehaus.jackson.map.type.HierarchicType: void setSubType(org.codehaus.jackson.map.type.HierarchicType)>($r0);

        virtualinvoke $r0.<org.codehaus.jackson.map.type.HierarchicType: void setSuperType(org.codehaus.jackson.map.type.HierarchicType)>($r6);

        return $r0;

     label2:
        return null;
    }

    protected org.codehaus.jackson.map.type.HierarchicType _findSuperInterfaceChain(java.lang.reflect.Type, java.lang.Class)
    {
        org.codehaus.jackson.map.type.TypeFactory r4;
        java.lang.reflect.Type r1;
        org.codehaus.jackson.map.type.HierarchicType $r0, $r5, $r6, $r7, $r8;
        java.lang.Class $r2, r3;

        r4 := @this: org.codehaus.jackson.map.type.TypeFactory;

        r1 := @parameter0: java.lang.reflect.Type;

        r3 := @parameter1: java.lang.Class;

        $r0 = new org.codehaus.jackson.map.type.HierarchicType;

        specialinvoke $r0.<org.codehaus.jackson.map.type.HierarchicType: void <init>(java.lang.reflect.Type)>(r1);

        $r2 = virtualinvoke $r0.<org.codehaus.jackson.map.type.HierarchicType: java.lang.Class getRawClass()>();

        if $r2 != r3 goto label1;

        $r8 = new org.codehaus.jackson.map.type.HierarchicType;

        specialinvoke $r8.<org.codehaus.jackson.map.type.HierarchicType: void <init>(java.lang.reflect.Type)>(r1);

        return $r8;

     label1:
        if $r2 != class "Ljava/util/HashMap;" goto label2;

        if r3 != class "Ljava/util/Map;" goto label2;

        $r7 = virtualinvoke r4.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.map.type.HierarchicType _hashMapSuperInterfaceChain(org.codehaus.jackson.map.type.HierarchicType)>($r0);

        return $r7;

     label2:
        if $r2 != class "Ljava/util/ArrayList;" goto label3;

        if r3 != class "Ljava/util/List;" goto label3;

        $r6 = virtualinvoke r4.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.map.type.HierarchicType _arrayListSuperInterfaceChain(org.codehaus.jackson.map.type.HierarchicType)>($r0);

        return $r6;

     label3:
        $r5 = virtualinvoke r4.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.map.type.HierarchicType _doFindSuperInterfaceChain(org.codehaus.jackson.map.type.HierarchicType,java.lang.Class)>($r0, r3);

        return $r5;
    }

    protected org.codehaus.jackson.map.type.HierarchicType _doFindSuperInterfaceChain(org.codehaus.jackson.map.type.HierarchicType, java.lang.Class)
    {
        org.codehaus.jackson.map.type.TypeFactory r4;
        java.lang.reflect.Type $r3, r7;
        java.lang.reflect.Type[] $r2;
        int i0, i1;
        org.codehaus.jackson.map.type.HierarchicType r0, $r6, $r8;
        java.lang.Class $r1, r5;

        r4 := @this: org.codehaus.jackson.map.type.TypeFactory;

        r0 := @parameter0: org.codehaus.jackson.map.type.HierarchicType;

        r5 := @parameter1: java.lang.Class;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.map.type.HierarchicType: java.lang.Class getRawClass()>();

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.reflect.Type[] getGenericInterfaces()>();

        if $r2 == null goto label3;

        i0 = lengthof $r2;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r7 = $r2[i1];

        $r8 = virtualinvoke r4.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.map.type.HierarchicType _findSuperInterfaceChain(java.lang.reflect.Type,java.lang.Class)>(r7, r5);

        if $r8 == null goto label2;

        virtualinvoke $r8.<org.codehaus.jackson.map.type.HierarchicType: void setSubType(org.codehaus.jackson.map.type.HierarchicType)>(r0);

        virtualinvoke r0.<org.codehaus.jackson.map.type.HierarchicType: void setSuperType(org.codehaus.jackson.map.type.HierarchicType)>($r8);

        return r0;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        $r3 = virtualinvoke $r1.<java.lang.Class: java.lang.reflect.Type getGenericSuperclass()>();

        if $r3 == null goto label4;

        $r6 = virtualinvoke r4.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.map.type.HierarchicType _findSuperInterfaceChain(java.lang.reflect.Type,java.lang.Class)>($r3, r5);

        if $r6 == null goto label4;

        virtualinvoke $r6.<org.codehaus.jackson.map.type.HierarchicType: void setSubType(org.codehaus.jackson.map.type.HierarchicType)>(r0);

        virtualinvoke r0.<org.codehaus.jackson.map.type.HierarchicType: void setSuperType(org.codehaus.jackson.map.type.HierarchicType)>($r6);

        return r0;

     label4:
        return null;
    }

    protected synchronized org.codehaus.jackson.map.type.HierarchicType _hashMapSuperInterfaceChain(org.codehaus.jackson.map.type.HierarchicType)
    {
        org.codehaus.jackson.map.type.TypeFactory r0;
        org.codehaus.jackson.map.type.HierarchicType $r1, $r2, $r3, r4, $r5, $r6;

        r0 := @this: org.codehaus.jackson.map.type.TypeFactory;

        r4 := @parameter0: org.codehaus.jackson.map.type.HierarchicType;

        $r1 = r0.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.map.type.HierarchicType _cachedHashMapType>;

        if $r1 != null goto label1;

        $r5 = virtualinvoke r4.<org.codehaus.jackson.map.type.HierarchicType: org.codehaus.jackson.map.type.HierarchicType deepCloneWithoutSubtype()>();

        virtualinvoke r0.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.map.type.HierarchicType _doFindSuperInterfaceChain(org.codehaus.jackson.map.type.HierarchicType,java.lang.Class)>($r5, class "Ljava/util/Map;");

        $r6 = virtualinvoke $r5.<org.codehaus.jackson.map.type.HierarchicType: org.codehaus.jackson.map.type.HierarchicType getSuperType()>();

        r0.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.map.type.HierarchicType _cachedHashMapType> = $r6;

     label1:
        $r2 = r0.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.map.type.HierarchicType _cachedHashMapType>;

        $r3 = virtualinvoke $r2.<org.codehaus.jackson.map.type.HierarchicType: org.codehaus.jackson.map.type.HierarchicType deepCloneWithoutSubtype()>();

        virtualinvoke r4.<org.codehaus.jackson.map.type.HierarchicType: void setSuperType(org.codehaus.jackson.map.type.HierarchicType)>($r3);

        virtualinvoke $r3.<org.codehaus.jackson.map.type.HierarchicType: void setSubType(org.codehaus.jackson.map.type.HierarchicType)>(r4);

        return r4;
    }

    protected synchronized org.codehaus.jackson.map.type.HierarchicType _arrayListSuperInterfaceChain(org.codehaus.jackson.map.type.HierarchicType)
    {
        org.codehaus.jackson.map.type.TypeFactory r0;
        org.codehaus.jackson.map.type.HierarchicType $r1, $r2, $r3, r4, $r5, $r6;

        r0 := @this: org.codehaus.jackson.map.type.TypeFactory;

        r4 := @parameter0: org.codehaus.jackson.map.type.HierarchicType;

        $r1 = r0.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.map.type.HierarchicType _cachedArrayListType>;

        if $r1 != null goto label1;

        $r5 = virtualinvoke r4.<org.codehaus.jackson.map.type.HierarchicType: org.codehaus.jackson.map.type.HierarchicType deepCloneWithoutSubtype()>();

        virtualinvoke r0.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.map.type.HierarchicType _doFindSuperInterfaceChain(org.codehaus.jackson.map.type.HierarchicType,java.lang.Class)>($r5, class "Ljava/util/List;");

        $r6 = virtualinvoke $r5.<org.codehaus.jackson.map.type.HierarchicType: org.codehaus.jackson.map.type.HierarchicType getSuperType()>();

        r0.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.map.type.HierarchicType _cachedArrayListType> = $r6;

     label1:
        $r2 = r0.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.map.type.HierarchicType _cachedArrayListType>;

        $r3 = virtualinvoke $r2.<org.codehaus.jackson.map.type.HierarchicType: org.codehaus.jackson.map.type.HierarchicType deepCloneWithoutSubtype()>();

        virtualinvoke r4.<org.codehaus.jackson.map.type.HierarchicType: void setSuperType(org.codehaus.jackson.map.type.HierarchicType)>($r3);

        virtualinvoke $r3.<org.codehaus.jackson.map.type.HierarchicType: void setSubType(org.codehaus.jackson.map.type.HierarchicType)>(r4);

        return r4;
    }

    static void <clinit>()
    {
        org.codehaus.jackson.map.type.TypeFactory $r0;
        org.codehaus.jackson.type.JavaType[] $r1;

        $r0 = new org.codehaus.jackson.map.type.TypeFactory;

        specialinvoke $r0.<org.codehaus.jackson.map.type.TypeFactory: void <init>()>();

        <org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.map.type.TypeFactory instance> = $r0;

        $r1 = newarray (org.codehaus.jackson.type.JavaType)[0];

        <org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType[] NO_TYPES> = $r1;

        return;
    }
}
