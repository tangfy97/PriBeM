public class ucar.nc2.iosp.cinrad.Cinrad2Record extends java.lang.Object
{
    public static final int REFLECTIVITY;
    public static final int VELOCITY_HI;
    public static final int VELOCITY_LOW;
    public static final int SPECTRUM_WIDTH;
    public static final int DOPPLER_RESOLUTION_LOW_CODE;
    public static final int DOPPLER_RESOLUTION_HIGH_CODE;
    public static final float HORIZONTAL_BEAM_WIDTH;
    public static final byte MISSING_DATA;
    public static final byte BELOW_THRESHOLD;
    static final int FILE_HEADER_SIZE;
    private static final int CTM_HEADER_SIZE;
    private static final int MESSAGE_HEADER_SIZE;
    private static final int RADAR_DATA_SIZE;
    private static org.slf4j.Logger logger;
    int recno;
    long message_offset;
    boolean hasReflectData;
    boolean hasDopplerData;
    short message_size;
    byte id_channel;
    public byte message_type;
    short id_sequence;
    short mess_julian_date;
    int mess_msecs;
    short seg_count;
    short seg_number;
    int data_msecs;
    short data_julian_date;
    short unamb_range;
    int azimuth_ang;
    short radial_num;
    short radial_status;
    short elevation_ang;
    short elevation_num;
    short reflect_first_gate;
    short reflect_gate_size;
    short reflect_gate_count;
    short doppler_first_gate;
    short doppler_gate_size;
    short doppler_gate_count;
    short cut;
    float calibration;
    short resolution;
    short vcp;
    short nyquist_vel;
    short attenuation;
    short threshhold;
    private short reflect_offset;
    private short velocity_offset;
    private short spectWidth_offset;

    public static java.lang.String getDatatypeName(int)
    {
        int i0;
        java.lang.IllegalArgumentException $r0;

        i0 := @parameter0: int;

        tableswitch(i0)
        {
            case 1: goto label1;
            case 2: goto label2;
            case 3: goto label3;
            case 4: goto label2;
            default: goto label4;
        };

     label1:
        return "Reflectivity";

     label2:
        return "RadialVelocity";

     label3:
        return "SpectrumWidth";

     label4:
        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r0;
    }

    public static java.lang.String getDatatypeUnits(int)
    {
        int i0;
        java.lang.IllegalArgumentException $r0;

        i0 := @parameter0: int;

        tableswitch(i0)
        {
            case 1: goto label1;
            case 2: goto label2;
            case 3: goto label2;
            case 4: goto label2;
            default: goto label3;
        };

     label1:
        return "dBz";

     label2:
        return "m/s";

     label3:
        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r0;
    }

    public static float getDatatypeScaleFactor(int)
    {
        int i0;
        java.lang.IllegalArgumentException $r0;

        i0 := @parameter0: int;

        tableswitch(i0)
        {
            case 1: goto label1;
            case 2: goto label3;
            case 3: goto label3;
            case 4: goto label2;
            default: goto label4;
        };

     label1:
        return 0.5F;

     label2:
        return 1.0F;

     label3:
        return 0.5F;

     label4:
        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r0;
    }

    public static float getDatatypeAddOffset(int)
    {
        int i0;
        java.lang.IllegalArgumentException $r0;

        i0 := @parameter0: int;

        tableswitch(i0)
        {
            case 1: goto label1;
            case 2: goto label3;
            case 3: goto label3;
            case 4: goto label2;
            default: goto label4;
        };

     label1:
        return -33.0F;

     label2:
        return -129.0F;

     label3:
        return -64.5F;

     label4:
        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r0;
    }

    public static java.lang.String getMessageTypeName(int)
    {
        int i0;
        java.lang.StringBuilder $r0, $r1, $r2;
        java.lang.String $r3;

        i0 := @parameter0: int;

        tableswitch(i0)
        {
            case 1: goto label01;
            case 2: goto label02;
            case 3: goto label03;
            case 4: goto label04;
            case 5: goto label05;
            case 6: goto label06;
            case 7: goto label07;
            case 8: goto label08;
            case 9: goto label09;
            case 10: goto label10;
            case 11: goto label11;
            case 12: goto label12;
            case 13: goto label13;
            case 14: goto label14;
            case 15: goto label15;
            case 16: goto label17;
            case 17: goto label17;
            case 18: goto label16;
            default: goto label17;
        };

     label01:
        return "digital radar data";

     label02:
        return "RDA status data";

     label03:
        return "performance/maintainence data";

     label04:
        return "console message - RDA to RPG";

     label05:
        return "maintainence log data";

     label06:
        return "RDA control ocmmands";

     label07:
        return "volume coverage pattern";

     label08:
        return "clutter censor zones";

     label09:
        return "request for data";

     label10:
        return "console message - RPG to RDA";

     label11:
        return "loop back test - RDA to RPG";

     label12:
        return "loop back test - RPG to RDA";

     label13:
        return "clutter filter bypass map - RDA to RPG";

     label14:
        return "edited clutter filter bypass map - RDA to RPG";

     label15:
        return "Notchwidth Map";

     label16:
        return "RDA Adaptation data";

     label17:
        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unknown ");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }

    public static java.lang.String getRadialStatusName(int)
    {
        int i0;
        java.lang.StringBuilder $r0, $r1, $r2;
        java.lang.String $r3;

        i0 := @parameter0: int;

        tableswitch(i0)
        {
            case 0: goto label1;
            case 1: goto label2;
            case 2: goto label3;
            case 3: goto label4;
            case 4: goto label5;
            default: goto label6;
        };

     label1:
        return "start of new elevation";

     label2:
        return "intermediate radial";

     label3:
        return "end of elevation";

     label4:
        return "begin volume scan";

     label5:
        return "end volume scan";

     label6:
        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unknown ");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }

    public static java.lang.String getVolumeCoveragePatternName(int)
    {
        int i0;
        java.lang.StringBuilder $r0, $r1, $r2;
        java.lang.String $r3;

        i0 := @parameter0: int;

        lookupswitch(i0)
        {
            case 11: goto label1;
            case 12: goto label2;
            case 21: goto label3;
            case 31: goto label4;
            case 32: goto label5;
            case 121: goto label6;
            default: goto label7;
        };

     label1:
        return "16 elevation scans every 5 mins";

     label2:
        return "14 elevation scan every 4.1 mins";

     label3:
        return "11 elevation scans every 6 mins";

     label4:
        return "8 elevation scans every 10 mins";

     label5:
        return "7 elevation scans every 10 mins";

     label6:
        return "9 elevations, 20 scans every 5 minutes";

     label7:
        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unknown ");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }

    public static java.util.Date getDate(int, int)
    {
        java.util.Date $r0;
        long $l2, $l3, $l4, $l6, $l7, l8;
        int i0, $i1, i5;

        i0 := @parameter0: int;

        i5 := @parameter1: int;

        $i1 = i0 - 1;

        $l2 = (long) $i1;

        $l3 = $l2 * 24L;

        $l4 = $l3 * 3600L;

        $l7 = $l4 * 1000L;

        $l6 = (long) i5;

        l8 = $l7 + $l6;

        $r0 = new java.util.Date;

        specialinvoke $r0.<java.util.Date: void <init>(long)>(l8);

        return $r0;
    }

    public static ucar.nc2.iosp.cinrad.Cinrad2Record factory(ucar.unidata.io.RandomAccessFile, int) throws java.io.IOException
    {
        ucar.nc2.iosp.cinrad.Cinrad2Record $r2;
        ucar.unidata.io.RandomAccessFile r0;
        long l3, $l4;
        byte $b5;
        int i0, $i1, $i2, $i6;

        r0 := @parameter0: ucar.unidata.io.RandomAccessFile;

        i0 := @parameter1: int;

        $i1 = i0 * 2432;

        $i2 = $i1 + 0;

        l3 = (long) $i2;

        $l4 = virtualinvoke r0.<ucar.unidata.io.RandomAccessFile: long length()>();

        $b5 = l3 cmp $l4;

        $i6 = (int) $b5;

        if $i6 < 0 goto label1;

        return null;

     label1:
        $r2 = new ucar.nc2.iosp.cinrad.Cinrad2Record;

        specialinvoke $r2.<ucar.nc2.iosp.cinrad.Cinrad2Record: void <init>(ucar.unidata.io.RandomAccessFile,int)>(r0, i0);

        return $r2;
    }

    int getUInt(byte[], int)
    {
        ucar.nc2.iosp.cinrad.Cinrad2Record r2;
        byte[] r1;
        short $s4;
        byte $b1, $b3;
        int[] r0;
        int i0, $i2, i5, i6, i7, i8, $i9, $i10, $i12;

        r2 := @this: ucar.nc2.iosp.cinrad.Cinrad2Record;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i5 = 1;

        i6 = 0;

        r0 = newarray (int)[i0];

        i7 = 0;

     label1:
        if i7 >= i0 goto label2;

        $b3 = r1[i7];

        $s4 = virtualinvoke r2.<ucar.nc2.iosp.cinrad.Cinrad2Record: short convertunsignedByte2Short(byte)>($b3);

        $i9 = (int) $s4;

        r0[i7] = $i9;

        i7 = i7 + 1;

        goto label1;

     label2:
        i8 = i0 - 1;

     label3:
        if i8 < 0 goto label4;

        $b1 = r1[i8];

        $i10 = (int) $b1;

        $i2 = i5 * $i10;

        i6 = i6 + $i2;

        i5 = i5 * 256;

        $i12 = (int) -1;

        i8 = i8 + $i12;

        goto label3;

     label4:
        return i6;
    }

    public short convertunsignedByte2Short(byte)
    {
        ucar.nc2.iosp.cinrad.Cinrad2Record r0;
        short $s1, $s2, $s3, $s5;
        byte b0;
        int $i4, $i6, $i7;

        r0 := @this: ucar.nc2.iosp.cinrad.Cinrad2Record;

        b0 := @parameter0: byte;

        $i6 = (int) b0;

        if $i6 >= 0 goto label1;

        $s2 = (short) b0;

        $i7 = (int) $s2;

        $i4 = $i7 + 256;

        $s3 = (short) $i4;

        return $s3;

     label1:
        $s5 = (short) b0;

        $s1 = (short) $s5;

        return $s1;
    }

    public void <init>(ucar.unidata.io.RandomAccessFile, int) throws java.io.IOException
    {
        byte[] $r2, $r3;
        ucar.unidata.io.RandomAccessFile r1;
        byte $b5, $b6;
        boolean $z0, $z1;
        ucar.nc2.iosp.cinrad.Cinrad2Record r0;
        long $l3, $l4;
        short $s9, $s10, $s12, $s13, $s14, $s15, $s16, $s17, $s18, $s19, $s20, $s21, $s22, $s23, $s24, $s25, $s26, $s27, $s28, $s29;
        int i0, $i1, $i2, $i7, $i8, $i11, $i30, $i31;

        r0 := @this: ucar.nc2.iosp.cinrad.Cinrad2Record;

        r1 := @parameter0: ucar.unidata.io.RandomAccessFile;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<ucar.nc2.iosp.cinrad.Cinrad2Record: short message_size> = 0;

        r0.<ucar.nc2.iosp.cinrad.Cinrad2Record: byte id_channel> = 0;

        r0.<ucar.nc2.iosp.cinrad.Cinrad2Record: byte message_type> = 0;

        r0.<ucar.nc2.iosp.cinrad.Cinrad2Record: short id_sequence> = 0;

        r0.<ucar.nc2.iosp.cinrad.Cinrad2Record: short mess_julian_date> = 0;

        r0.<ucar.nc2.iosp.cinrad.Cinrad2Record: int mess_msecs> = 0;

        r0.<ucar.nc2.iosp.cinrad.Cinrad2Record: short seg_count> = 0;

        r0.<ucar.nc2.iosp.cinrad.Cinrad2Record: short seg_number> = 0;

        r0.<ucar.nc2.iosp.cinrad.Cinrad2Record: int data_msecs> = 0;

        r0.<ucar.nc2.iosp.cinrad.Cinrad2Record: short data_julian_date> = 0;

        r0.<ucar.nc2.iosp.cinrad.Cinrad2Record: short unamb_range> = 0;

        r0.<ucar.nc2.iosp.cinrad.Cinrad2Record: int azimuth_ang> = 0;

        r0.<ucar.nc2.iosp.cinrad.Cinrad2Record: short radial_num> = 0;

        r0.<ucar.nc2.iosp.cinrad.Cinrad2Record: short radial_status> = 0;

        r0.<ucar.nc2.iosp.cinrad.Cinrad2Record: short elevation_ang> = 0;

        r0.<ucar.nc2.iosp.cinrad.Cinrad2Record: short elevation_num> = 0;

        r0.<ucar.nc2.iosp.cinrad.Cinrad2Record: short reflect_first_gate> = 0;

        r0.<ucar.nc2.iosp.cinrad.Cinrad2Record: short reflect_gate_size> = 0;

        r0.<ucar.nc2.iosp.cinrad.Cinrad2Record: short reflect_gate_count> = 0;

        r0.<ucar.nc2.iosp.cinrad.Cinrad2Record: short doppler_first_gate> = 0;

        r0.<ucar.nc2.iosp.cinrad.Cinrad2Record: short doppler_gate_size> = 0;

        r0.<ucar.nc2.iosp.cinrad.Cinrad2Record: short doppler_gate_count> = 0;

        r0.<ucar.nc2.iosp.cinrad.Cinrad2Record: short cut> = 0;

        r0.<ucar.nc2.iosp.cinrad.Cinrad2Record: float calibration> = 0.0F;

        r0.<ucar.nc2.iosp.cinrad.Cinrad2Record: short resolution> = 0;

        r0.<ucar.nc2.iosp.cinrad.Cinrad2Record: short vcp> = 0;

        r0.<ucar.nc2.iosp.cinrad.Cinrad2Record: int recno> = i0;

        $i1 = i0 * 2432;

        $i2 = $i1 + 0;

        $l3 = (long) $i2;

        r0.<ucar.nc2.iosp.cinrad.Cinrad2Record: long message_offset> = $l3;

        $l4 = r0.<ucar.nc2.iosp.cinrad.Cinrad2Record: long message_offset>;

        virtualinvoke r1.<ucar.unidata.io.RandomAccessFile: void seek(long)>($l4);

        virtualinvoke r1.<ucar.unidata.io.RandomAccessFile: int skipBytes(int)>(14);

        $b5 = virtualinvoke r1.<ucar.unidata.io.RandomAccessFile: byte readByte()>();

        r0.<ucar.nc2.iosp.cinrad.Cinrad2Record: byte message_type> = $b5;

        virtualinvoke r1.<ucar.unidata.io.RandomAccessFile: int skipBytes(int)>(13);

        $b6 = r0.<ucar.nc2.iosp.cinrad.Cinrad2Record: byte message_type>;

        if $b6 == 1 goto label1;

        return;

     label1:
        $r2 = virtualinvoke r1.<ucar.unidata.io.RandomAccessFile: byte[] readBytes(int)>(4);

        $i7 = staticinvoke <ucar.nc2.iosp.cinrad.Cinrad2Record: int bytesToInt(byte[],boolean)>($r2, 1);

        r0.<ucar.nc2.iosp.cinrad.Cinrad2Record: int data_msecs> = $i7;

        $r3 = virtualinvoke r1.<ucar.unidata.io.RandomAccessFile: byte[] readBytes(int)>(2);

        $i8 = staticinvoke <ucar.nc2.iosp.cinrad.Cinrad2Record: int bytesToShort(byte[],boolean)>($r3, 1);

        $s9 = (short) $i8;

        r0.<ucar.nc2.iosp.cinrad.Cinrad2Record: short data_julian_date> = $s9;

        virtualinvoke r0.<ucar.nc2.iosp.cinrad.Cinrad2Record: java.util.Date getDate()>();

        $s10 = virtualinvoke r1.<ucar.unidata.io.RandomAccessFile: short readShort()>();

        r0.<ucar.nc2.iosp.cinrad.Cinrad2Record: short unamb_range> = $s10;

        $i11 = virtualinvoke r1.<ucar.unidata.io.RandomAccessFile: int readUnsignedShort()>();

        r0.<ucar.nc2.iosp.cinrad.Cinrad2Record: int azimuth_ang> = $i11;

        $s12 = virtualinvoke r1.<ucar.unidata.io.RandomAccessFile: short readShort()>();

        r0.<ucar.nc2.iosp.cinrad.Cinrad2Record: short radial_num> = $s12;

        $s13 = virtualinvoke r1.<ucar.unidata.io.RandomAccessFile: short readShort()>();

        r0.<ucar.nc2.iosp.cinrad.Cinrad2Record: short radial_status> = $s13;

        $s14 = virtualinvoke r1.<ucar.unidata.io.RandomAccessFile: short readShort()>();

        r0.<ucar.nc2.iosp.cinrad.Cinrad2Record: short elevation_ang> = $s14;

        $s15 = virtualinvoke r1.<ucar.unidata.io.RandomAccessFile: short readShort()>();

        r0.<ucar.nc2.iosp.cinrad.Cinrad2Record: short elevation_num> = $s15;

        $s16 = virtualinvoke r1.<ucar.unidata.io.RandomAccessFile: short readShort()>();

        r0.<ucar.nc2.iosp.cinrad.Cinrad2Record: short reflect_first_gate> = $s16;

        $s17 = virtualinvoke r1.<ucar.unidata.io.RandomAccessFile: short readShort()>();

        r0.<ucar.nc2.iosp.cinrad.Cinrad2Record: short doppler_first_gate> = $s17;

        $s18 = virtualinvoke r1.<ucar.unidata.io.RandomAccessFile: short readShort()>();

        r0.<ucar.nc2.iosp.cinrad.Cinrad2Record: short reflect_gate_size> = $s18;

        $s19 = virtualinvoke r1.<ucar.unidata.io.RandomAccessFile: short readShort()>();

        r0.<ucar.nc2.iosp.cinrad.Cinrad2Record: short doppler_gate_size> = $s19;

        $s20 = virtualinvoke r1.<ucar.unidata.io.RandomAccessFile: short readShort()>();

        r0.<ucar.nc2.iosp.cinrad.Cinrad2Record: short reflect_gate_count> = $s20;

        $s21 = virtualinvoke r1.<ucar.unidata.io.RandomAccessFile: short readShort()>();

        r0.<ucar.nc2.iosp.cinrad.Cinrad2Record: short doppler_gate_count> = $s21;

        virtualinvoke r1.<ucar.unidata.io.RandomAccessFile: int skipBytes(int)>(6);

        $s22 = virtualinvoke r1.<ucar.unidata.io.RandomAccessFile: short readShort()>();

        r0.<ucar.nc2.iosp.cinrad.Cinrad2Record: short reflect_offset> = $s22;

        $s23 = virtualinvoke r1.<ucar.unidata.io.RandomAccessFile: short readShort()>();

        r0.<ucar.nc2.iosp.cinrad.Cinrad2Record: short velocity_offset> = $s23;

        $s24 = virtualinvoke r1.<ucar.unidata.io.RandomAccessFile: short readShort()>();

        r0.<ucar.nc2.iosp.cinrad.Cinrad2Record: short spectWidth_offset> = $s24;

        $s25 = virtualinvoke r1.<ucar.unidata.io.RandomAccessFile: short readShort()>();

        r0.<ucar.nc2.iosp.cinrad.Cinrad2Record: short resolution> = $s25;

        $s26 = virtualinvoke r1.<ucar.unidata.io.RandomAccessFile: short readShort()>();

        r0.<ucar.nc2.iosp.cinrad.Cinrad2Record: short vcp> = $s26;

        virtualinvoke r1.<ucar.unidata.io.RandomAccessFile: int skipBytes(int)>(14);

        $s27 = virtualinvoke r1.<ucar.unidata.io.RandomAccessFile: short readShort()>();

        r0.<ucar.nc2.iosp.cinrad.Cinrad2Record: short nyquist_vel> = $s27;

        virtualinvoke r1.<ucar.unidata.io.RandomAccessFile: int skipBytes(int)>(38);

        $s28 = r0.<ucar.nc2.iosp.cinrad.Cinrad2Record: short reflect_gate_count>;

        $i30 = (int) $s28;

        if $i30 <= 0 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        r0.<ucar.nc2.iosp.cinrad.Cinrad2Record: boolean hasReflectData> = $z0;

        $s29 = r0.<ucar.nc2.iosp.cinrad.Cinrad2Record: short doppler_gate_count>;

        $i31 = (int) $s29;

        if $i31 <= 0 goto label4;

        $z1 = 1;

        goto label5;

     label4:
        $z1 = 0;

     label5:
        r0.<ucar.nc2.iosp.cinrad.Cinrad2Record: boolean hasDopplerData> = $z1;

        return;
    }

    public static int bytesToInt(byte[], boolean)
    {
        byte[] r0;
        byte b0, b1, b2, b3;
        boolean z0;
        short $s4, $s5, $s8, $s11, $s14, $s16, $s17, $s20, $s24, $s25, $s28, $s30, $s32, $s34, $s36, $s38;
        int $i6, $i7, $i9, $i10, $i12, $i13, $i15, $i18, $i19, $i21, $i22, $i23, $i26, $i27, $i29, $i31, $i33, $i35, $i37, $i39;

        r0 := @parameter0: byte[];

        z0 := @parameter1: boolean;

        b0 = r0[0];

        b1 = r0[1];

        b2 = r0[2];

        b3 = r0[3];

        if z0 == 0 goto label1;

        $s24 = (short) b0;

        $s16 = $s24 & 255;

        $s25 = (short) b1;

        $s14 = $s25 & 255;

        $i26 = (int) $s14;

        $i15 = $i26 << 8;

        $i27 = (int) $s16;

        $i19 = $i27 + $i15;

        $s28 = (short) b2;

        $s17 = $s28 & 255;

        $i29 = (int) $s17;

        $i18 = $i29 << 16;

        $i22 = $i19 + $i18;

        $s30 = (short) b3;

        $s20 = $s30 & 255;

        $i31 = (int) $s20;

        $i21 = $i31 << 24;

        $i23 = $i22 + $i21;

        return $i23;

     label1:
        $s32 = (short) b0;

        $s4 = $s32 & 255;

        $i33 = (int) $s4;

        $i7 = $i33 << 24;

        $s34 = (short) b1;

        $s5 = $s34 & 255;

        $i35 = (int) $s5;

        $i6 = $i35 << 16;

        $i10 = $i7 + $i6;

        $s36 = (short) b2;

        $s8 = $s36 & 255;

        $i37 = (int) $s8;

        $i9 = $i37 << 8;

        $i12 = $i10 + $i9;

        $s38 = (short) b3;

        $s11 = $s38 & 255;

        $i39 = (int) $s11;

        $i13 = $i12 + $i39;

        return $i13;
    }

    public static int bytesToShort(byte[], boolean)
    {
        byte[] r0;
        short $s2, $s3, $s7, $s9, $s11, $s12, $s15, $s17;
        byte b0, b1;
        int $i4, $i5, $i6, $i8, $i10, $i13, $i14, $i16, $i18;
        boolean z0;

        r0 := @parameter0: byte[];

        z0 := @parameter1: boolean;

        b0 = r0[0];

        b1 = r0[1];

        if z0 == 0 goto label1;

        $s11 = (short) b0;

        $s9 = $s11 & 255;

        $s12 = (short) b1;

        $s7 = $s12 & 255;

        $i13 = (int) $s7;

        $i8 = $i13 << 8;

        $i14 = (int) $s9;

        $i10 = $i14 + $i8;

        return $i10;

     label1:
        $s15 = (short) b0;

        $s2 = $s15 & 255;

        $i16 = (int) $s2;

        $i5 = $i16 << 24;

        $s17 = (short) b1;

        $s3 = $s17 & 255;

        $i18 = (int) $s3;

        $i4 = $i18 << 16;

        $i6 = $i5 + $i4;

        return $i6;
    }

    public void dumpMessage(java.io.PrintStream, java.util.Date)
    {
        java.util.Date r24;
        byte $b1, $b2, $b6;
        java.lang.StringBuilder $r3, $r4, $r7, $r9, $r10, $r11, $r12, $r15, $r16, $r17, $r18, $r19, $r20, $r23, $r26, $r29, $r30, $r32, $r33, $r34, $r35, $r36;
        ucar.nc2.iosp.cinrad.Cinrad2Record r2;
        short $s3, $s4, $s5;
        int $i0, $i7, $i8, $i9, $i10, $i11, $i12;
        java.lang.String $r5, $r8, $r13, $r21, $r25, $r27, $r31;
        java.io.PrintStream r0;

        r2 := @this: ucar.nc2.iosp.cinrad.Cinrad2Record;

        r0 := @parameter0: java.io.PrintStream;

        r24 := @parameter1: java.util.Date;

        $r32 = new java.lang.StringBuilder;

        specialinvoke $r32.<java.lang.StringBuilder: void <init>()>();

        $i0 = r2.<ucar.nc2.iosp.cinrad.Cinrad2Record: int recno>;

        $r3 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ---------------------");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<java.io.PrintStream: void println(java.lang.String)>($r5);

        $r33 = new java.lang.StringBuilder;

        specialinvoke $r33.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" message type = ");

        $b1 = r2.<ucar.nc2.iosp.cinrad.Cinrad2Record: byte message_type>;

        $i7 = (int) $b1;

        $r8 = staticinvoke <ucar.nc2.iosp.cinrad.Cinrad2Record: java.lang.String getMessageTypeName(int)>($i7);

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (");

        $b2 = r2.<ucar.nc2.iosp.cinrad.Cinrad2Record: byte message_type>;

        $i8 = (int) $b2;

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i8);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<java.io.PrintStream: void println(java.lang.String)>($r13);

        $r34 = new java.lang.StringBuilder;

        specialinvoke $r34.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" message size = ");

        $s3 = r2.<ucar.nc2.iosp.cinrad.Cinrad2Record: short message_size>;

        $i9 = (int) $s3;

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i9);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" segment=");

        $s4 = r2.<ucar.nc2.iosp.cinrad.Cinrad2Record: short seg_number>;

        $i10 = (int) $s4;

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i10);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $s5 = r2.<ucar.nc2.iosp.cinrad.Cinrad2Record: short seg_count>;

        $i11 = (int) $s5;

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i11);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<java.io.PrintStream: void println(java.lang.String)>($r21);

        $r35 = new java.lang.StringBuilder;

        specialinvoke $r35.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" message date = ");

        $r25 = virtualinvoke r24.<java.util.Date: java.lang.String toString()>();

        $r26 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r25);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<java.io.PrintStream: void println(java.lang.String)>($r27);

        $r36 = new java.lang.StringBuilder;

        specialinvoke $r36.<java.lang.StringBuilder: void <init>()>();

        $r29 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" channel id = ");

        $b6 = r2.<ucar.nc2.iosp.cinrad.Cinrad2Record: byte id_channel>;

        $i12 = (int) $b6;

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i12);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<java.io.PrintStream: void println(java.lang.String)>($r31);

        return;
    }

    public void dump(java.io.PrintStream)
    {
        byte $b2;
        java.lang.StringBuilder $r3, $r4, $r5, $r8, $r10, $r13, $r16, $r19, $r20, $r21, $r22, $r23, $r26, $r27, $r30, $r31, $r32, $r34, $r35, $r36, $r39, $r40, $r41, $r42, $r43, $r44, $r47, $r48, $r49, $r50, $r51, $r52, $r55, $r56, $r57, $r58, $r59, $r60, $r63, $r64, $r66, $r67, $r68, $r69, $r70, $r71, $r72, $r73, $r74, $r75;
        ucar.nc2.iosp.cinrad.Cinrad2Record r2;
        long $l1;
        short $s3, $s4, $s5, $s6, $s7, $s8, $s9, $s10, $s11, $s12, $s13, $s14, $s15, $s16;
        java.lang.String $r6, $r9, $r11, $r15, $r17, $r24, $r28, $r33, $r37, $r45, $r53, $r61, $r65;
        java.util.Date $r14;
        float $f0, $f1, $f2, $f3, $f4;
        int $i0, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30;
        java.io.PrintStream r0;

        r2 := @this: ucar.nc2.iosp.cinrad.Cinrad2Record;

        r0 := @parameter0: java.io.PrintStream;

        $r66 = new java.lang.StringBuilder;

        specialinvoke $r66.<java.lang.StringBuilder: void <init>()>();

        $i0 = r2.<ucar.nc2.iosp.cinrad.Cinrad2Record: int recno>;

        $r3 = virtualinvoke $r66.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ------------------------------------------");

        $l1 = r2.<ucar.nc2.iosp.cinrad.Cinrad2Record: long message_offset>;

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<java.io.PrintStream: void println(java.lang.String)>($r6);

        $r67 = new java.lang.StringBuilder;

        specialinvoke $r67.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r67.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" message type = ");

        $b2 = r2.<ucar.nc2.iosp.cinrad.Cinrad2Record: byte message_type>;

        $i17 = (int) $b2;

        $r9 = staticinvoke <ucar.nc2.iosp.cinrad.Cinrad2Record: java.lang.String getMessageTypeName(int)>($i17);

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<java.io.PrintStream: void println(java.lang.String)>($r11);

        $r68 = new java.lang.StringBuilder;

        specialinvoke $r68.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r68.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" data date = ");

        $r14 = virtualinvoke r2.<ucar.nc2.iosp.cinrad.Cinrad2Record: java.util.Date getDate()>();

        $r15 = virtualinvoke $r14.<java.util.Date: java.lang.String toString()>();

        $r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<java.io.PrintStream: void println(java.lang.String)>($r17);

        $r69 = new java.lang.StringBuilder;

        specialinvoke $r69.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r69.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" elevation = ");

        $f0 = virtualinvoke r2.<ucar.nc2.iosp.cinrad.Cinrad2Record: float getElevation()>();

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f0);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (");

        $s3 = r2.<ucar.nc2.iosp.cinrad.Cinrad2Record: short elevation_num>;

        $i18 = (int) $s3;

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i18);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<java.io.PrintStream: void println(java.lang.String)>($r24);

        $r70 = new java.lang.StringBuilder;

        specialinvoke $r70.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke $r70.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" azimuth = ");

        $f1 = virtualinvoke r2.<ucar.nc2.iosp.cinrad.Cinrad2Record: float getAzimuth()>();

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f1);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<java.io.PrintStream: void println(java.lang.String)>($r28);

        $r71 = new java.lang.StringBuilder;

        specialinvoke $r71.<java.lang.StringBuilder: void <init>()>();

        $r30 = virtualinvoke $r71.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" radial = ");

        $s4 = r2.<ucar.nc2.iosp.cinrad.Cinrad2Record: short radial_num>;

        $i19 = (int) $s4;

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i19);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" status= ");

        $s5 = r2.<ucar.nc2.iosp.cinrad.Cinrad2Record: short radial_status>;

        $i20 = (int) $s5;

        $r33 = staticinvoke <ucar.nc2.iosp.cinrad.Cinrad2Record: java.lang.String getRadialStatusName(int)>($i20);

        $r34 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r33);

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ratio = ");

        $f2 = virtualinvoke r2.<ucar.nc2.iosp.cinrad.Cinrad2Record: float getAzimuth()>();

        $s6 = r2.<ucar.nc2.iosp.cinrad.Cinrad2Record: short radial_num>;

        $f3 = (float) $s6;

        $f4 = $f2 / $f3;

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f4);

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<java.io.PrintStream: void println(java.lang.String)>($r37);

        $r72 = new java.lang.StringBuilder;

        specialinvoke $r72.<java.lang.StringBuilder: void <init>()>();

        $r39 = virtualinvoke $r72.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" reflectivity first= ");

        $s7 = r2.<ucar.nc2.iosp.cinrad.Cinrad2Record: short reflect_first_gate>;

        $i21 = (int) $s7;

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i21);

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" size= ");

        $s8 = r2.<ucar.nc2.iosp.cinrad.Cinrad2Record: short reflect_gate_size>;

        $i22 = (int) $s8;

        $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i22);

        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" count= ");

        $s9 = r2.<ucar.nc2.iosp.cinrad.Cinrad2Record: short reflect_gate_count>;

        $i23 = (int) $s9;

        $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i23);

        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<java.io.PrintStream: void println(java.lang.String)>($r45);

        $r73 = new java.lang.StringBuilder;

        specialinvoke $r73.<java.lang.StringBuilder: void <init>()>();

        $r47 = virtualinvoke $r73.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" doppler first= ");

        $s10 = r2.<ucar.nc2.iosp.cinrad.Cinrad2Record: short doppler_first_gate>;

        $i24 = (int) $s10;

        $r48 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i24);

        $r49 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" size= ");

        $s11 = r2.<ucar.nc2.iosp.cinrad.Cinrad2Record: short doppler_gate_size>;

        $i25 = (int) $s11;

        $r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i25);

        $r51 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" count= ");

        $s12 = r2.<ucar.nc2.iosp.cinrad.Cinrad2Record: short doppler_gate_count>;

        $i26 = (int) $s12;

        $r52 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i26);

        $r53 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<java.io.PrintStream: void println(java.lang.String)>($r53);

        $r74 = new java.lang.StringBuilder;

        specialinvoke $r74.<java.lang.StringBuilder: void <init>()>();

        $r55 = virtualinvoke $r74.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" offset: reflect= ");

        $s13 = r2.<ucar.nc2.iosp.cinrad.Cinrad2Record: short reflect_offset>;

        $i27 = (int) $s13;

        $r56 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i27);

        $r57 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" velocity= ");

        $s14 = r2.<ucar.nc2.iosp.cinrad.Cinrad2Record: short velocity_offset>;

        $i28 = (int) $s14;

        $r58 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i28);

        $r59 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" spWidth= ");

        $s15 = r2.<ucar.nc2.iosp.cinrad.Cinrad2Record: short spectWidth_offset>;

        $i29 = (int) $s15;

        $r60 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i29);

        $r61 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<java.io.PrintStream: void println(java.lang.String)>($r61);

        $r75 = new java.lang.StringBuilder;

        specialinvoke $r75.<java.lang.StringBuilder: void <init>()>();

        $r63 = virtualinvoke $r75.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" pattern = ");

        $s16 = r2.<ucar.nc2.iosp.cinrad.Cinrad2Record: short vcp>;

        $i30 = (int) $s16;

        $r64 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i30);

        $r65 = virtualinvoke $r64.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<java.io.PrintStream: void println(java.lang.String)>($r65);

        return;
    }

    public void dump2(java.io.PrintStream)
    {
        java.io.PrintStream r0;
        ucar.nc2.iosp.cinrad.Cinrad2Record r2;
        short $s1, $s2;
        int $i0, $i3, $i4;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r7, $r9;
        java.lang.String $r8;

        r2 := @this: ucar.nc2.iosp.cinrad.Cinrad2Record;

        r0 := @parameter0: java.io.PrintStream;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $i0 = r2.<ucar.nc2.iosp.cinrad.Cinrad2Record: int recno>;

        $r3 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("= ");

        $s1 = r2.<ucar.nc2.iosp.cinrad.Cinrad2Record: short elevation_num>;

        $i3 = (int) $s1;

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" size = ");

        $s2 = r2.<ucar.nc2.iosp.cinrad.Cinrad2Record: short message_size>;

        $i4 = (int) $s2;

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<java.io.PrintStream: void println(java.lang.String)>($r8);

        return;
    }

    public boolean checkOk()
    {
        byte $b0;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r8, $r12, $r13, $r14, $r15, $r17, $r21, $r22, $r23, $r24, $r26, $r30, $r32, $r36, $r37, $r38, $r40, $r44, $r45, $r46, $r48, $r50, $r51, $r52, $r53, $r54, $r55;
        ucar.nc2.iosp.cinrad.Cinrad2Record r0;
        short $s1, $s3, $s5, $s7, $s8, $s10, $s12, $s13, $s14, $s15, $s16, $s17, $s18;
        java.lang.String $r7, $r9, $r16, $r18, $r25, $r27, $r31, $r33, $r39, $r41, $r47, $r49;
        boolean $z0, z1, $z2;
        int $i2, $i4, $i6, $i9, $i11, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31;
        org.slf4j.Logger $r2, $r11, $r20, $r29, $r35, $r43;

        r0 := @this: ucar.nc2.iosp.cinrad.Cinrad2Record;

        z1 = 1;

        $b0 = r0.<ucar.nc2.iosp.cinrad.Cinrad2Record: byte message_type>;

        if $b0 == 1 goto label01;

        return 1;

     label01:
        $s1 = r0.<ucar.nc2.iosp.cinrad.Cinrad2Record: short reflect_offset>;

        $i19 = (int) $s1;

        if $i19 < 0 goto label02;

        $s14 = r0.<ucar.nc2.iosp.cinrad.Cinrad2Record: short reflect_offset>;

        $i20 = (int) $s14;

        if $i20 <= 2432 goto label03;

     label02:
        $r2 = <ucar.nc2.iosp.cinrad.Cinrad2Record: org.slf4j.Logger logger>;

        $r50 = new java.lang.StringBuilder;

        specialinvoke $r50.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("****");

        $i2 = r0.<ucar.nc2.iosp.cinrad.Cinrad2Record: int recno>;

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" HAS bad reflect offset= ");

        $s3 = r0.<ucar.nc2.iosp.cinrad.Cinrad2Record: short reflect_offset>;

        $i21 = (int) $s3;

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i21);

        $r7 = specialinvoke r0.<ucar.nc2.iosp.cinrad.Cinrad2Record: java.lang.String who()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r2.<org.slf4j.Logger: void warn(java.lang.String)>($r9);

        z1 = 0;

     label03:
        $s15 = r0.<ucar.nc2.iosp.cinrad.Cinrad2Record: short velocity_offset>;

        $i22 = (int) $s15;

        if $i22 < 0 goto label04;

        $s13 = r0.<ucar.nc2.iosp.cinrad.Cinrad2Record: short velocity_offset>;

        $i23 = (int) $s13;

        if $i23 <= 2432 goto label05;

     label04:
        $r11 = <ucar.nc2.iosp.cinrad.Cinrad2Record: org.slf4j.Logger logger>;

        $r51 = new java.lang.StringBuilder;

        specialinvoke $r51.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("****");

        $i4 = r0.<ucar.nc2.iosp.cinrad.Cinrad2Record: int recno>;

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" HAS bad velocity offset= ");

        $s5 = r0.<ucar.nc2.iosp.cinrad.Cinrad2Record: short velocity_offset>;

        $i24 = (int) $s5;

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i24);

        $r16 = specialinvoke r0.<ucar.nc2.iosp.cinrad.Cinrad2Record: java.lang.String who()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r11.<org.slf4j.Logger: void warn(java.lang.String)>($r18);

        z1 = 0;

     label05:
        $s16 = r0.<ucar.nc2.iosp.cinrad.Cinrad2Record: short spectWidth_offset>;

        $i25 = (int) $s16;

        if $i25 < 0 goto label06;

        $s12 = r0.<ucar.nc2.iosp.cinrad.Cinrad2Record: short spectWidth_offset>;

        $i26 = (int) $s12;

        if $i26 <= 2432 goto label07;

     label06:
        $r20 = <ucar.nc2.iosp.cinrad.Cinrad2Record: org.slf4j.Logger logger>;

        $r52 = new java.lang.StringBuilder;

        specialinvoke $r52.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("****");

        $i6 = r0.<ucar.nc2.iosp.cinrad.Cinrad2Record: int recno>;

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" HAS bad spwidth offset= ");

        $s7 = r0.<ucar.nc2.iosp.cinrad.Cinrad2Record: short reflect_offset>;

        $i27 = (int) $s7;

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i27);

        $r25 = specialinvoke r0.<ucar.nc2.iosp.cinrad.Cinrad2Record: java.lang.String who()>();

        $r26 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r25);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r20.<org.slf4j.Logger: void warn(java.lang.String)>($r27);

        z1 = 0;

     label07:
        $s17 = r0.<ucar.nc2.iosp.cinrad.Cinrad2Record: short velocity_offset>;

        $i28 = (int) $s17;

        if $i28 <= 0 goto label08;

        $s10 = r0.<ucar.nc2.iosp.cinrad.Cinrad2Record: short spectWidth_offset>;

        $i29 = (int) $s10;

        if $i29 > 0 goto label08;

        $r43 = <ucar.nc2.iosp.cinrad.Cinrad2Record: org.slf4j.Logger logger>;

        $r53 = new java.lang.StringBuilder;

        specialinvoke $r53.<java.lang.StringBuilder: void <init>()>();

        $r44 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("****");

        $i11 = r0.<ucar.nc2.iosp.cinrad.Cinrad2Record: int recno>;

        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i11);

        $r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" HAS velocity NOT spectWidth!!");

        $r47 = specialinvoke r0.<ucar.nc2.iosp.cinrad.Cinrad2Record: java.lang.String who()>();

        $r48 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r47);

        $r49 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r43.<org.slf4j.Logger: void warn(java.lang.String)>($r49);

        z1 = 0;

     label08:
        $s18 = r0.<ucar.nc2.iosp.cinrad.Cinrad2Record: short velocity_offset>;

        $i30 = (int) $s18;

        if $i30 > 0 goto label09;

        $s8 = r0.<ucar.nc2.iosp.cinrad.Cinrad2Record: short spectWidth_offset>;

        $i31 = (int) $s8;

        if $i31 <= 0 goto label09;

        $r35 = <ucar.nc2.iosp.cinrad.Cinrad2Record: org.slf4j.Logger logger>;

        $r54 = new java.lang.StringBuilder;

        specialinvoke $r54.<java.lang.StringBuilder: void <init>()>();

        $r36 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("****");

        $i9 = r0.<ucar.nc2.iosp.cinrad.Cinrad2Record: int recno>;

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i9);

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" HAS spectWidth AND NOT velocity!!");

        $r39 = specialinvoke r0.<ucar.nc2.iosp.cinrad.Cinrad2Record: java.lang.String who()>();

        $r40 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r39);

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r35.<org.slf4j.Logger: void warn(java.lang.String)>($r41);

        z1 = 0;

     label09:
        $z2 = r0.<ucar.nc2.iosp.cinrad.Cinrad2Record: boolean hasReflectData>;

        if $z2 != 0 goto label10;

        $z0 = r0.<ucar.nc2.iosp.cinrad.Cinrad2Record: boolean hasDopplerData>;

        if $z0 != 0 goto label10;

        $r29 = <ucar.nc2.iosp.cinrad.Cinrad2Record: org.slf4j.Logger logger>;

        $r55 = new java.lang.StringBuilder;

        specialinvoke $r55.<java.lang.StringBuilder: void <init>()>();

        $r30 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("*** no reflect or dopplar = ");

        $r31 = specialinvoke r0.<ucar.nc2.iosp.cinrad.Cinrad2Record: java.lang.String who()>();

        $r32 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r31);

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r29.<org.slf4j.Logger: void info(java.lang.String)>($r33);

     label10:
        return z1;
    }

    private java.lang.String who()
    {
        ucar.nc2.iosp.cinrad.Cinrad2Record r2;
        long $l1;
        int $i0;
        java.lang.StringBuilder $r0, $r1, $r3, $r4, $r5, $r6;
        java.lang.String $r7;

        r2 := @this: ucar.nc2.iosp.cinrad.Cinrad2Record;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" message(");

        $i0 = r2.<ucar.nc2.iosp.cinrad.Cinrad2Record: int recno>;

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $l1 = r2.<ucar.nc2.iosp.cinrad.Cinrad2Record: long message_offset>;

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;
    }

    public float getAzimuth()
    {
        ucar.nc2.iosp.cinrad.Cinrad2Record r0;
        byte $b0;
        int $i1;
        float $f0, $f1, $f2;

        r0 := @this: ucar.nc2.iosp.cinrad.Cinrad2Record;

        $b0 = r0.<ucar.nc2.iosp.cinrad.Cinrad2Record: byte message_type>;

        if $b0 == 1 goto label1;

        return -1.0F;

     label1:
        $i1 = r0.<ucar.nc2.iosp.cinrad.Cinrad2Record: int azimuth_ang>;

        $f0 = (float) $i1;

        $f1 = 180.0F * $f0;

        $f2 = $f1 / 32768.0F;

        return $f2;
    }

    public float getElevation()
    {
        ucar.nc2.iosp.cinrad.Cinrad2Record r0;
        short $s1;
        byte $b0;
        float $f0, $f1, $f2;

        r0 := @this: ucar.nc2.iosp.cinrad.Cinrad2Record;

        $b0 = r0.<ucar.nc2.iosp.cinrad.Cinrad2Record: byte message_type>;

        if $b0 == 1 goto label1;

        return -1.0F;

     label1:
        $s1 = r0.<ucar.nc2.iosp.cinrad.Cinrad2Record: short elevation_ang>;

        $f0 = (float) $s1;

        $f1 = 180.0F * $f0;

        $f2 = $f1 / 32768.0F;

        return $f2;
    }

    public int getGateSize(int)
    {
        ucar.nc2.iosp.cinrad.Cinrad2Record r0;
        short $s1, $s2;
        int i0, $i3, $i4, $i6;

        r0 := @this: ucar.nc2.iosp.cinrad.Cinrad2Record;

        i0 := @parameter0: int;

        tableswitch(i0)
        {
            case 1: goto label1;
            case 2: goto label2;
            case 3: goto label2;
            case 4: goto label2;
            default: goto label3;
        };

     label1:
        $s2 = r0.<ucar.nc2.iosp.cinrad.Cinrad2Record: short reflect_gate_size>;

        $i3 = (int) $s2;

        return $i3;

     label2:
        $s1 = r0.<ucar.nc2.iosp.cinrad.Cinrad2Record: short doppler_gate_size>;

        $i4 = (int) $s1;

        return $i4;

     label3:
        $i6 = (int) -1;

        return $i6;
    }

    public int getGateStart(int)
    {
        ucar.nc2.iosp.cinrad.Cinrad2Record r0;
        short $s1, $s2;
        int i0, $i3, $i4, $i6;

        r0 := @this: ucar.nc2.iosp.cinrad.Cinrad2Record;

        i0 := @parameter0: int;

        tableswitch(i0)
        {
            case 1: goto label1;
            case 2: goto label2;
            case 3: goto label2;
            case 4: goto label2;
            default: goto label3;
        };

     label1:
        $s2 = r0.<ucar.nc2.iosp.cinrad.Cinrad2Record: short reflect_first_gate>;

        $i3 = (int) $s2;

        return $i3;

     label2:
        $s1 = r0.<ucar.nc2.iosp.cinrad.Cinrad2Record: short doppler_first_gate>;

        $i4 = (int) $s1;

        return $i4;

     label3:
        $i6 = (int) -1;

        return $i6;
    }

    public int getGateCount(int)
    {
        ucar.nc2.iosp.cinrad.Cinrad2Record r0;
        short $s1, $s2;
        int i0, $i3, $i4;

        r0 := @this: ucar.nc2.iosp.cinrad.Cinrad2Record;

        i0 := @parameter0: int;

        tableswitch(i0)
        {
            case 1: goto label1;
            case 2: goto label2;
            case 3: goto label2;
            case 4: goto label2;
            default: goto label3;
        };

     label1:
        $s2 = r0.<ucar.nc2.iosp.cinrad.Cinrad2Record: short reflect_gate_count>;

        $i3 = (int) $s2;

        return $i3;

     label2:
        $s1 = r0.<ucar.nc2.iosp.cinrad.Cinrad2Record: short doppler_gate_count>;

        $i4 = (int) $s1;

        return $i4;

     label3:
        return 0;
    }

    private short getDataOffset(int)
    {
        ucar.nc2.iosp.cinrad.Cinrad2Record r0;
        short $s1, $s2, $s3;
        int i0;

        r0 := @this: ucar.nc2.iosp.cinrad.Cinrad2Record;

        i0 := @parameter0: int;

        tableswitch(i0)
        {
            case 1: goto label1;
            case 2: goto label2;
            case 3: goto label3;
            case 4: goto label2;
            default: goto label4;
        };

     label1:
        $s3 = r0.<ucar.nc2.iosp.cinrad.Cinrad2Record: short reflect_offset>;

        return $s3;

     label2:
        $s2 = r0.<ucar.nc2.iosp.cinrad.Cinrad2Record: short velocity_offset>;

        return $s2;

     label3:
        $s1 = r0.<ucar.nc2.iosp.cinrad.Cinrad2Record: short spectWidth_offset>;

        return $s1;

     label4:
        return -32768;
    }

    public java.util.Date getDate()
    {
        ucar.nc2.iosp.cinrad.Cinrad2Record r0;
        short $s1;
        java.util.Date $r1;
        int $i0, $i2;

        r0 := @this: ucar.nc2.iosp.cinrad.Cinrad2Record;

        $s1 = r0.<ucar.nc2.iosp.cinrad.Cinrad2Record: short data_julian_date>;

        $i0 = r0.<ucar.nc2.iosp.cinrad.Cinrad2Record: int data_msecs>;

        $i2 = (int) $s1;

        $r1 = staticinvoke <ucar.nc2.iosp.cinrad.Cinrad2Record: java.util.Date getDate(int,int)>($i2, $i0);

        return $r1;
    }

    public void readData(ucar.unidata.io.RandomAccessFile, int, ucar.ma2.Range, ucar.ma2.IndexIterator) throws java.io.IOException
    {
        byte[] $r23;
        ucar.unidata.io.RandomAccessFile r1;
        byte $b4;
        boolean $z0;
        ucar.ma2.Range r3;
        java.lang.StringBuilder $r7, $r8, $r9, $r10, $r11, $r12, $r16, $r17, $r18, $r19, $r20, $r21, $r24, $r25;
        ucar.nc2.iosp.cinrad.Cinrad2Record r0;
        long $l2, l11, l12, l13;
        short $s1, $s8, $s9, $s10;
        int i0, $i3, $i5, $i6, $i7, i14, $i15, $i16, $i17, $i18;
        java.lang.String $r13, $r22;
        org.slf4j.Logger $r2, $r6, $r15;
        ucar.ma2.IndexIterator r4;

        r0 := @this: ucar.nc2.iosp.cinrad.Cinrad2Record;

        r1 := @parameter0: ucar.unidata.io.RandomAccessFile;

        i0 := @parameter1: int;

        r3 := @parameter2: ucar.ma2.Range;

        r4 := @parameter3: ucar.ma2.IndexIterator;

        l11 = r0.<ucar.nc2.iosp.cinrad.Cinrad2Record: long message_offset>;

        l12 = l11 + 28L;

        $s1 = specialinvoke r0.<ucar.nc2.iosp.cinrad.Cinrad2Record: short getDataOffset(int)>(i0);

        $l2 = (long) $s1;

        l13 = l12 + $l2;

        virtualinvoke r1.<ucar.unidata.io.RandomAccessFile: void seek(long)>(l13);

        $r2 = <ucar.nc2.iosp.cinrad.Cinrad2Record: org.slf4j.Logger logger>;

        $z0 = interfaceinvoke $r2.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $z0 == 0 goto label1;

        $r6 = <ucar.nc2.iosp.cinrad.Cinrad2Record: org.slf4j.Logger logger>;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  read recno ");

        $i6 = r0.<ucar.nc2.iosp.cinrad.Cinrad2Record: int recno>;

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" at offset ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l13);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" count= ");

        $i7 = virtualinvoke r0.<ucar.nc2.iosp.cinrad.Cinrad2Record: int getGateCount(int)>(i0);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r6.<org.slf4j.Logger: void debug(java.lang.String)>($r13);

        $r15 = <ucar.nc2.iosp.cinrad.Cinrad2Record: org.slf4j.Logger logger>;

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("   offset: reflect= ");

        $s8 = r0.<ucar.nc2.iosp.cinrad.Cinrad2Record: short reflect_offset>;

        $i16 = (int) $s8;

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" velocity= ");

        $s9 = r0.<ucar.nc2.iosp.cinrad.Cinrad2Record: short velocity_offset>;

        $i17 = (int) $s9;

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i17);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" spWidth= ");

        $s10 = r0.<ucar.nc2.iosp.cinrad.Cinrad2Record: short spectWidth_offset>;

        $i18 = (int) $s10;

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i18);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r15.<org.slf4j.Logger: void debug(java.lang.String)>($r22);

     label1:
        $i3 = virtualinvoke r0.<ucar.nc2.iosp.cinrad.Cinrad2Record: int getGateCount(int)>(i0);

        $r23 = newarray (byte)[$i3];

        virtualinvoke r1.<ucar.unidata.io.RandomAccessFile: void readFully(byte[])>($r23);

        i14 = virtualinvoke r3.<ucar.ma2.Range: int first()>();

     label2:
        $i15 = virtualinvoke r3.<ucar.ma2.Range: int last()>();

        if i14 > $i15 goto label5;

        if i14 < $i3 goto label3;

        interfaceinvoke r4.<ucar.ma2.IndexIterator: void setByteNext(byte)>(1);

        goto label4;

     label3:
        $b4 = $r23[i14];

        interfaceinvoke r4.<ucar.ma2.IndexIterator: void setByteNext(byte)>($b4);

     label4:
        $i5 = virtualinvoke r3.<ucar.ma2.Range: int stride()>();

        i14 = i14 + $i5;

        goto label2;

     label5:
        return;
    }

    public java.lang.String toString()
    {
        ucar.nc2.iosp.cinrad.Cinrad2Record r2;
        short $s0, $s1;
        int $i2, $i3;
        java.lang.StringBuilder $r1, $r3, $r4, $r5, $r7;
        java.lang.String $r6;

        r2 := @this: ucar.nc2.iosp.cinrad.Cinrad2Record;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("elev= ");

        $s0 = r2.<ucar.nc2.iosp.cinrad.Cinrad2Record: short elevation_num>;

        $i2 = (int) $s0;

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" radial_num = ");

        $s1 = r2.<ucar.nc2.iosp.cinrad.Cinrad2Record: short radial_num>;

        $i3 = (int) $s1;

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    static void <clinit>()
    {
        org.slf4j.Logger $r0;

        <ucar.nc2.iosp.cinrad.Cinrad2Record: int RADAR_DATA_SIZE> = 2432;

        <ucar.nc2.iosp.cinrad.Cinrad2Record: int MESSAGE_HEADER_SIZE> = 28;

        <ucar.nc2.iosp.cinrad.Cinrad2Record: int CTM_HEADER_SIZE> = 14;

        <ucar.nc2.iosp.cinrad.Cinrad2Record: int FILE_HEADER_SIZE> = 0;

        <ucar.nc2.iosp.cinrad.Cinrad2Record: byte BELOW_THRESHOLD> = 0;

        <ucar.nc2.iosp.cinrad.Cinrad2Record: byte MISSING_DATA> = 1;

        <ucar.nc2.iosp.cinrad.Cinrad2Record: float HORIZONTAL_BEAM_WIDTH> = 1.5F;

        <ucar.nc2.iosp.cinrad.Cinrad2Record: int DOPPLER_RESOLUTION_HIGH_CODE> = 2;

        <ucar.nc2.iosp.cinrad.Cinrad2Record: int DOPPLER_RESOLUTION_LOW_CODE> = 4;

        <ucar.nc2.iosp.cinrad.Cinrad2Record: int SPECTRUM_WIDTH> = 3;

        <ucar.nc2.iosp.cinrad.Cinrad2Record: int VELOCITY_LOW> = 4;

        <ucar.nc2.iosp.cinrad.Cinrad2Record: int VELOCITY_HI> = 2;

        <ucar.nc2.iosp.cinrad.Cinrad2Record: int REFLECTIVITY> = 1;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lucar/nc2/iosp/cinrad/Cinrad2Record;");

        <ucar.nc2.iosp.cinrad.Cinrad2Record: org.slf4j.Logger logger> = $r0;

        return;
    }
}
