class org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver$FilteringClassFileTransformer extends java.lang.Object implements java.lang.instrument.ClassFileTransformer
{
    private final java.lang.instrument.ClassFileTransformer targetTransformer;
    private final java.lang.ClassLoader targetClassLoader;

    public void <init>(java.lang.instrument.ClassFileTransformer, java.lang.ClassLoader)
    {
        java.lang.instrument.ClassFileTransformer r1;
        java.lang.ClassLoader r2;
        org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver$FilteringClassFileTransformer r0;

        r0 := @this: org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver$FilteringClassFileTransformer;

        r1 := @parameter0: java.lang.instrument.ClassFileTransformer;

        r2 := @parameter1: java.lang.ClassLoader;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver$FilteringClassFileTransformer: java.lang.instrument.ClassFileTransformer targetTransformer> = r1;

        r0.<org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver$FilteringClassFileTransformer: java.lang.ClassLoader targetClassLoader> = r2;

        return;
    }

    public byte[] transform(java.lang.ClassLoader, java.lang.String, java.lang.Class, java.security.ProtectionDomain, byte[]) throws java.lang.instrument.IllegalClassFormatException
    {
        byte[] r6, $r8;
        java.lang.instrument.ClassFileTransformer $r7;
        org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver$FilteringClassFileTransformer r0;
        java.security.ProtectionDomain r5;
        java.lang.Class r4;
        java.lang.ClassLoader r1, $r2;
        java.lang.String r3;
        boolean $z0;

        r0 := @this: org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver$FilteringClassFileTransformer;

        r1 := @parameter0: java.lang.ClassLoader;

        r3 := @parameter1: java.lang.String;

        r4 := @parameter2: java.lang.Class;

        r5 := @parameter3: java.security.ProtectionDomain;

        r6 := @parameter4: byte[];

        $r2 = r0.<org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver$FilteringClassFileTransformer: java.lang.ClassLoader targetClassLoader>;

        $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r7 = r0.<org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver$FilteringClassFileTransformer: java.lang.instrument.ClassFileTransformer targetTransformer>;

        $r8 = interfaceinvoke $r7.<java.lang.instrument.ClassFileTransformer: byte[] transform(java.lang.ClassLoader,java.lang.String,java.lang.Class,java.security.ProtectionDomain,byte[])>(r1, r3, r4, r5, r6);

        return $r8;
    }

    public java.lang.String toString()
    {
        java.lang.instrument.ClassFileTransformer $r2;
        org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver$FilteringClassFileTransformer r1;
        java.lang.StringBuilder $r0, $r4;
        java.lang.String $r3, $r5;

        r1 := @this: org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver$FilteringClassFileTransformer;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>(java.lang.String)>("FilteringClassFileTransformer for: ");

        $r2 = r1.<org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver$FilteringClassFileTransformer: java.lang.instrument.ClassFileTransformer targetTransformer>;

        $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>();

        $r4 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }
}
