public class org.springframework.aop.support.JdkRegexpMethodPointcut extends org.springframework.aop.support.AbstractRegexpMethodPointcut
{
    private java.util.regex.Pattern[] compiledPatterns;
    private java.util.regex.Pattern[] compiledExclusionPatterns;

    public void <init>()
    {
        java.util.regex.Pattern[] $r1, $r2;
        org.springframework.aop.support.JdkRegexpMethodPointcut r0;

        r0 := @this: org.springframework.aop.support.JdkRegexpMethodPointcut;

        specialinvoke r0.<org.springframework.aop.support.AbstractRegexpMethodPointcut: void <init>()>();

        $r1 = newarray (java.util.regex.Pattern)[0];

        r0.<org.springframework.aop.support.JdkRegexpMethodPointcut: java.util.regex.Pattern[] compiledPatterns> = $r1;

        $r2 = newarray (java.util.regex.Pattern)[0];

        r0.<org.springframework.aop.support.JdkRegexpMethodPointcut: java.util.regex.Pattern[] compiledExclusionPatterns> = $r2;

        return;
    }

    protected void initPatternRepresentation(java.lang.String[]) throws java.util.regex.PatternSyntaxException
    {
        java.lang.String[] r1;
        java.util.regex.Pattern[] $r2;
        org.springframework.aop.support.JdkRegexpMethodPointcut r0;

        r0 := @this: org.springframework.aop.support.JdkRegexpMethodPointcut;

        r1 := @parameter0: java.lang.String[];

        $r2 = specialinvoke r0.<org.springframework.aop.support.JdkRegexpMethodPointcut: java.util.regex.Pattern[] compilePatterns(java.lang.String[])>(r1);

        r0.<org.springframework.aop.support.JdkRegexpMethodPointcut: java.util.regex.Pattern[] compiledPatterns> = $r2;

        return;
    }

    protected void initExcludedPatternRepresentation(java.lang.String[]) throws java.util.regex.PatternSyntaxException
    {
        java.lang.String[] r1;
        java.util.regex.Pattern[] $r2;
        org.springframework.aop.support.JdkRegexpMethodPointcut r0;

        r0 := @this: org.springframework.aop.support.JdkRegexpMethodPointcut;

        r1 := @parameter0: java.lang.String[];

        $r2 = specialinvoke r0.<org.springframework.aop.support.JdkRegexpMethodPointcut: java.util.regex.Pattern[] compilePatterns(java.lang.String[])>(r1);

        r0.<org.springframework.aop.support.JdkRegexpMethodPointcut: java.util.regex.Pattern[] compiledExclusionPatterns> = $r2;

        return;
    }

    protected boolean matches(java.lang.String, int)
    {
        java.util.regex.Matcher $r4;
        org.springframework.aop.support.JdkRegexpMethodPointcut r0;
        int i0;
        java.util.regex.Pattern[] $r1;
        java.lang.String r2;
        java.util.regex.Pattern $r3;
        boolean $z0;

        r0 := @this: org.springframework.aop.support.JdkRegexpMethodPointcut;

        r2 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r1 = r0.<org.springframework.aop.support.JdkRegexpMethodPointcut: java.util.regex.Pattern[] compiledPatterns>;

        $r3 = $r1[i0];

        $r4 = virtualinvoke $r3.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r2);

        $z0 = virtualinvoke $r4.<java.util.regex.Matcher: boolean matches()>();

        return $z0;
    }

    protected boolean matchesExclusion(java.lang.String, int)
    {
        java.util.regex.Matcher $r4;
        org.springframework.aop.support.JdkRegexpMethodPointcut r0;
        int i0;
        java.util.regex.Pattern[] $r1;
        java.lang.String r2;
        java.util.regex.Pattern $r3;
        boolean $z0;

        r0 := @this: org.springframework.aop.support.JdkRegexpMethodPointcut;

        r2 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r1 = r0.<org.springframework.aop.support.JdkRegexpMethodPointcut: java.util.regex.Pattern[] compiledExclusionPatterns>;

        $r3 = $r1[i0];

        $r4 = virtualinvoke $r3.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r2);

        $z0 = virtualinvoke $r4.<java.util.regex.Matcher: boolean matches()>();

        return $z0;
    }

    private java.util.regex.Pattern[] compilePatterns(java.lang.String[]) throws java.util.regex.PatternSyntaxException
    {
        java.lang.String[] r0;
        java.util.regex.Pattern[] r1;
        org.springframework.aop.support.JdkRegexpMethodPointcut r4;
        int $i0, $i1, i2;
        java.lang.String $r2;
        java.util.regex.Pattern $r3;

        r4 := @this: org.springframework.aop.support.JdkRegexpMethodPointcut;

        r0 := @parameter0: java.lang.String[];

        $i0 = lengthof r0;

        r1 = newarray (java.util.regex.Pattern)[$i0];

        i2 = 0;

        goto label2;

     label1:
        $r2 = r0[i2];

        $r3 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>($r2);

        r1[i2] = $r3;

        i2 = i2 + 1;

     label2:
        $i1 = lengthof r0;

        if i2 < $i1 goto label1;

        return r1;
    }
}
