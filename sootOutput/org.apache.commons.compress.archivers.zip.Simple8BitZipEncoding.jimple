class org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding extends java.lang.Object implements org.apache.commons.compress.archivers.zip.ZipEncoding
{
    private final char[] highChars;
    private final java.util.List reverseMapping;

    public void <init>(char[])
    {
        org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding r0;
        char c2;
        java.util.ArrayList $r4;
        java.util.List $r7;
        byte b4;
        int $i0, i1, $i3, i5;
        char[] r1, $r3, $r5, r6;
        java.lang.Object $r2;
        org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding$Simple8BitChar $r8;

        r0 := @this: org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding;

        r1 := @parameter0: char[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Object clone()>();

        $r3 = (char[]) $r2;

        r0.<org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding: char[] highChars> = $r3;

        $r4 = new java.util.ArrayList;

        $r5 = r0.<org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding: char[] highChars>;

        $i0 = lengthof $r5;

        specialinvoke $r4.<java.util.ArrayList: void <init>(int)>($i0);

        b4 = 127;

        r6 = r0.<org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding: char[] highChars>;

        i1 = lengthof r6;

        i5 = 0;

     label1:
        if i5 >= i1 goto label2;

        c2 = r6[i5];

        $r8 = new org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding$Simple8BitChar;

        $i3 = b4 + 1;

        b4 = (byte) $i3;

        specialinvoke $r8.<org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding$Simple8BitChar: void <init>(byte,char)>(b4, c2);

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r8);

        i5 = i5 + 1;

        goto label1;

     label2:
        staticinvoke <java.util.Collections: void sort(java.util.List)>($r4);

        $r7 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r4);

        r0.<org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding: java.util.List reverseMapping> = $r7;

        return;
    }

    public char decodeByte(byte)
    {
        org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding r0;
        char $c2, $c3;
        byte b0;
        int $i1, $i4, $i5;
        char[] $r1;

        r0 := @this: org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding;

        b0 := @parameter0: byte;

        $i4 = (int) b0;

        if $i4 < 0 goto label1;

        $c3 = (char) b0;

        return $c3;

     label1:
        $r1 = r0.<org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding: char[] highChars>;

        $i5 = (int) b0;

        $i1 = 128 + $i5;

        $c2 = $r1[$i1];

        return $c2;
    }

    public boolean canEncodeChar(char)
    {
        org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding r0;
        int $i1, $i2;
        char c0;
        org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding$Simple8BitChar $r1;
        boolean $z0;

        r0 := @this: org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding;

        c0 := @parameter0: char;

        $i1 = (int) c0;

        if $i1 < 0 goto label1;

        $i2 = (int) c0;

        if $i2 >= 128 goto label1;

        return 1;

     label1:
        $r1 = specialinvoke r0.<org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding: org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding$Simple8BitChar encodeHighChar(char)>(c0);

        if $r1 == null goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public boolean pushEncodedChar(java.nio.ByteBuffer, char)
    {
        org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding r0;
        char c0;
        java.nio.ByteBuffer r2;
        byte $b1, $b2;
        int $i3, $i4;
        org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding$Simple8BitChar $r1;

        r0 := @this: org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding;

        r2 := @parameter0: java.nio.ByteBuffer;

        c0 := @parameter1: char;

        $i3 = (int) c0;

        if $i3 < 0 goto label1;

        $i4 = (int) c0;

        if $i4 >= 128 goto label1;

        $b2 = (byte) c0;

        virtualinvoke r2.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte)>($b2);

        return 1;

     label1:
        $r1 = specialinvoke r0.<org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding: org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding$Simple8BitChar encodeHighChar(char)>(c0);

        if $r1 != null goto label2;

        return 0;

     label2:
        $b1 = $r1.<org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding$Simple8BitChar: byte code>;

        virtualinvoke r2.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte)>($b1);

        return 1;
    }

    private org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding$Simple8BitChar encodeHighChar(char)
    {
        org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding r0;
        int $i0, $i3, $i4, i7, i8, i9, $i10, $i11, $i12, $i13, $i14, $i15;
        org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding$Simple8BitChar r7, r8;
        char c1, $c2, $c5, $c6;
        java.util.List $r1, $r2, $r3, $r5;
        java.lang.Object $r4, $r6;

        r0 := @this: org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding;

        c1 := @parameter0: char;

        i7 = 0;

        $r1 = r0.<org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding: java.util.List reverseMapping>;

        i8 = interfaceinvoke $r1.<java.util.List: int size()>();

     label1:
        if i8 <= i7 goto label5;

        $i3 = i8 - i7;

        $i4 = $i3 / 2;

        i9 = i7 + $i4;

        $r5 = r0.<org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding: java.util.List reverseMapping>;

        $r6 = interfaceinvoke $r5.<java.util.List: java.lang.Object get(int)>(i9);

        r7 = (org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding$Simple8BitChar) $r6;

        $c5 = r7.<org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding$Simple8BitChar: char unicode>;

        $i10 = (int) $c5;

        $i11 = (int) c1;

        if $i10 != $i11 goto label2;

        return r7;

     label2:
        $c6 = r7.<org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding$Simple8BitChar: char unicode>;

        $i12 = (int) $c6;

        $i13 = (int) c1;

        if $i12 >= $i13 goto label3;

        i7 = i9 + 1;

        goto label4;

     label3:
        i8 = i9;

     label4:
        goto label1;

     label5:
        $r2 = r0.<org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding: java.util.List reverseMapping>;

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        if i7 < $i0 goto label6;

        return null;

     label6:
        $r3 = r0.<org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding: java.util.List reverseMapping>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(i7);

        r8 = (org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding$Simple8BitChar) $r4;

        $c2 = r8.<org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding$Simple8BitChar: char unicode>;

        $i14 = (int) $c2;

        $i15 = (int) c1;

        if $i14 == $i15 goto label7;

        return null;

     label7:
        return r8;
    }

    public boolean canEncode(java.lang.String)
    {
        org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding r1;
        int $i0, i2;
        char $c1;
        java.lang.String r0;
        boolean $z0;

        r1 := @this: org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding;

        r0 := @parameter0: java.lang.String;

        i2 = 0;

     label1:
        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if i2 >= $i0 goto label3;

        $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i2);

        $z0 = virtualinvoke r1.<org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding: boolean canEncodeChar(char)>($c1);

        if $z0 != 0 goto label2;

        return 0;

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        return 1;
    }

    public java.nio.ByteBuffer encode(java.lang.String)
    {
        org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding r1;
        java.nio.ByteBuffer r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i9, $i10, $i11, i12;
        java.lang.String r0;
        boolean $z0;
        char $c8;

        r1 := @this: org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        $i1 = $i0 + 6;

        $i2 = virtualinvoke r0.<java.lang.String: int length()>();

        $i3 = $i2 + 1;

        $i4 = $i3 / 2;

        $i5 = $i1 + $i4;

        r2 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>($i5);

        i12 = 0;

     label1:
        $i6 = virtualinvoke r0.<java.lang.String: int length()>();

        if i12 >= $i6 goto label4;

        $c8 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i12);

        $i9 = virtualinvoke r2.<java.nio.ByteBuffer: int remaining()>();

        if $i9 >= 6 goto label2;

        $i10 = virtualinvoke r2.<java.nio.ByteBuffer: int position()>();

        $i11 = $i10 + 6;

        r2 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipEncodingHelper: java.nio.ByteBuffer growBuffer(java.nio.ByteBuffer,int)>(r2, $i11);

     label2:
        $z0 = virtualinvoke r1.<org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding: boolean pushEncodedChar(java.nio.ByteBuffer,char)>(r2, $c8);

        if $z0 != 0 goto label3;

        staticinvoke <org.apache.commons.compress.archivers.zip.ZipEncodingHelper: void appendSurrogate(java.nio.ByteBuffer,char)>(r2, $c8);

     label3:
        i12 = i12 + 1;

        goto label1;

     label4:
        $i7 = virtualinvoke r2.<java.nio.ByteBuffer: int position()>();

        virtualinvoke r2.<java.nio.ByteBuffer: java.nio.Buffer limit(int)>($i7);

        virtualinvoke r2.<java.nio.ByteBuffer: java.nio.Buffer rewind()>();

        return r2;
    }

    public java.lang.String decode(byte[]) throws java.io.IOException
    {
        byte[] r0;
        org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding r3;
        char $c3;
        byte $b2;
        int $i0, $i1, i4;
        char[] r1;
        java.lang.String $r2;

        r3 := @this: org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding;

        r0 := @parameter0: byte[];

        $i0 = lengthof r0;

        r1 = newarray (char)[$i0];

        i4 = 0;

     label1:
        $i1 = lengthof r0;

        if i4 >= $i1 goto label2;

        $b2 = r0[i4];

        $c3 = virtualinvoke r3.<org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding: char decodeByte(byte)>($b2);

        r1[i4] = $c3;

        i4 = i4 + 1;

        goto label1;

     label2:
        $r2 = new java.lang.String;

        specialinvoke $r2.<java.lang.String: void <init>(char[])>(r1);

        return $r2;
    }
}
