public class org.apache.zookeeper.server.upgrade.DataNodeV1 extends java.lang.Object implements org.apache.jute.Record
{
    org.apache.zookeeper.server.upgrade.DataNodeV1 parent;
    byte[] data;
    java.util.List acl;
    public org.apache.zookeeper.data.StatPersistedV1 stat;
    java.util.HashSet children;

    void <init>()
    {
        java.util.HashSet $r1;
        org.apache.zookeeper.server.upgrade.DataNodeV1 r0;

        r0 := @this: org.apache.zookeeper.server.upgrade.DataNodeV1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashSet;

        specialinvoke $r1.<java.util.HashSet: void <init>()>();

        r0.<org.apache.zookeeper.server.upgrade.DataNodeV1: java.util.HashSet children> = $r1;

        return;
    }

    void <init>(org.apache.zookeeper.server.upgrade.DataNodeV1, byte[], java.util.List, org.apache.zookeeper.data.StatPersistedV1)
    {
        java.util.HashSet $r1, $r6;
        byte[] r3;
        java.util.List r4;
        org.apache.zookeeper.server.upgrade.DataNodeV1 r0, r2;
        org.apache.zookeeper.data.StatPersistedV1 r5;

        r0 := @this: org.apache.zookeeper.server.upgrade.DataNodeV1;

        r2 := @parameter0: org.apache.zookeeper.server.upgrade.DataNodeV1;

        r3 := @parameter1: byte[];

        r4 := @parameter2: java.util.List;

        r5 := @parameter3: org.apache.zookeeper.data.StatPersistedV1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashSet;

        specialinvoke $r1.<java.util.HashSet: void <init>()>();

        r0.<org.apache.zookeeper.server.upgrade.DataNodeV1: java.util.HashSet children> = $r1;

        r0.<org.apache.zookeeper.server.upgrade.DataNodeV1: org.apache.zookeeper.server.upgrade.DataNodeV1 parent> = r2;

        r0.<org.apache.zookeeper.server.upgrade.DataNodeV1: byte[] data> = r3;

        r0.<org.apache.zookeeper.server.upgrade.DataNodeV1: java.util.List acl> = r4;

        r0.<org.apache.zookeeper.server.upgrade.DataNodeV1: org.apache.zookeeper.data.StatPersistedV1 stat> = r5;

        $r6 = new java.util.HashSet;

        specialinvoke $r6.<java.util.HashSet: void <init>()>();

        r0.<org.apache.zookeeper.server.upgrade.DataNodeV1: java.util.HashSet children> = $r6;

        return;
    }

    public void setChildren(java.util.HashSet)
    {
        java.util.HashSet r1;
        org.apache.zookeeper.server.upgrade.DataNodeV1 r0;

        r0 := @this: org.apache.zookeeper.server.upgrade.DataNodeV1;

        r1 := @parameter0: java.util.HashSet;

        r0.<org.apache.zookeeper.server.upgrade.DataNodeV1: java.util.HashSet children> = r1;

        return;
    }

    public java.util.HashSet getChildren()
    {
        java.util.HashSet $r1;
        org.apache.zookeeper.server.upgrade.DataNodeV1 r0;

        r0 := @this: org.apache.zookeeper.server.upgrade.DataNodeV1;

        $r1 = r0.<org.apache.zookeeper.server.upgrade.DataNodeV1: java.util.HashSet children>;

        return $r1;
    }

    public void copyStat(org.apache.zookeeper.data.Stat)
    {
        byte[] $r10;
        long $l1, $l3, $l4, $l5, $l7;
        org.apache.zookeeper.data.Stat r0;
        java.util.HashSet $r11;
        int $i0, $i2, $i6, $i8, $i9;
        org.apache.zookeeper.data.StatPersistedV1 $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9;
        org.apache.zookeeper.server.upgrade.DataNodeV1 r1;

        r1 := @this: org.apache.zookeeper.server.upgrade.DataNodeV1;

        r0 := @parameter0: org.apache.zookeeper.data.Stat;

        $r2 = r1.<org.apache.zookeeper.server.upgrade.DataNodeV1: org.apache.zookeeper.data.StatPersistedV1 stat>;

        $i0 = virtualinvoke $r2.<org.apache.zookeeper.data.StatPersistedV1: int getAversion()>();

        virtualinvoke r0.<org.apache.zookeeper.data.Stat: void setAversion(int)>($i0);

        $r3 = r1.<org.apache.zookeeper.server.upgrade.DataNodeV1: org.apache.zookeeper.data.StatPersistedV1 stat>;

        $l1 = virtualinvoke $r3.<org.apache.zookeeper.data.StatPersistedV1: long getCtime()>();

        virtualinvoke r0.<org.apache.zookeeper.data.Stat: void setCtime(long)>($l1);

        $r4 = r1.<org.apache.zookeeper.server.upgrade.DataNodeV1: org.apache.zookeeper.data.StatPersistedV1 stat>;

        $i2 = virtualinvoke $r4.<org.apache.zookeeper.data.StatPersistedV1: int getCversion()>();

        virtualinvoke r0.<org.apache.zookeeper.data.Stat: void setCversion(int)>($i2);

        $r5 = r1.<org.apache.zookeeper.server.upgrade.DataNodeV1: org.apache.zookeeper.data.StatPersistedV1 stat>;

        $l3 = virtualinvoke $r5.<org.apache.zookeeper.data.StatPersistedV1: long getCzxid()>();

        virtualinvoke r0.<org.apache.zookeeper.data.Stat: void setCzxid(long)>($l3);

        $r6 = r1.<org.apache.zookeeper.server.upgrade.DataNodeV1: org.apache.zookeeper.data.StatPersistedV1 stat>;

        $l4 = virtualinvoke $r6.<org.apache.zookeeper.data.StatPersistedV1: long getMtime()>();

        virtualinvoke r0.<org.apache.zookeeper.data.Stat: void setMtime(long)>($l4);

        $r7 = r1.<org.apache.zookeeper.server.upgrade.DataNodeV1: org.apache.zookeeper.data.StatPersistedV1 stat>;

        $l5 = virtualinvoke $r7.<org.apache.zookeeper.data.StatPersistedV1: long getMzxid()>();

        virtualinvoke r0.<org.apache.zookeeper.data.Stat: void setMzxid(long)>($l5);

        $r8 = r1.<org.apache.zookeeper.server.upgrade.DataNodeV1: org.apache.zookeeper.data.StatPersistedV1 stat>;

        $i6 = virtualinvoke $r8.<org.apache.zookeeper.data.StatPersistedV1: int getVersion()>();

        virtualinvoke r0.<org.apache.zookeeper.data.Stat: void setVersion(int)>($i6);

        $r9 = r1.<org.apache.zookeeper.server.upgrade.DataNodeV1: org.apache.zookeeper.data.StatPersistedV1 stat>;

        $l7 = virtualinvoke $r9.<org.apache.zookeeper.data.StatPersistedV1: long getEphemeralOwner()>();

        virtualinvoke r0.<org.apache.zookeeper.data.Stat: void setEphemeralOwner(long)>($l7);

        $r10 = r1.<org.apache.zookeeper.server.upgrade.DataNodeV1: byte[] data>;

        $i8 = lengthof $r10;

        virtualinvoke r0.<org.apache.zookeeper.data.Stat: void setDataLength(int)>($i8);

        $r11 = r1.<org.apache.zookeeper.server.upgrade.DataNodeV1: java.util.HashSet children>;

        $i9 = virtualinvoke $r11.<java.util.HashSet: int size()>();

        virtualinvoke r0.<org.apache.zookeeper.data.Stat: void setNumChildren(int)>($i9);

        return;
    }

    public void deserialize(org.apache.jute.InputArchive, java.lang.String) throws java.io.IOException
    {
        byte[] $r2;
        org.apache.jute.InputArchive r0;
        org.apache.zookeeper.data.ACL $r7;
        org.apache.zookeeper.data.StatPersistedV1 $r4, $r5;
        java.util.ArrayList $r6;
        java.util.List $r8;
        org.apache.zookeeper.server.upgrade.DataNodeV1 r1;
        java.lang.String r9;
        org.apache.jute.Index $r3;
        boolean $z0;

        r1 := @this: org.apache.zookeeper.server.upgrade.DataNodeV1;

        r0 := @parameter0: org.apache.jute.InputArchive;

        r9 := @parameter1: java.lang.String;

        interfaceinvoke r0.<org.apache.jute.InputArchive: void startRecord(java.lang.String)>("node");

        $r2 = interfaceinvoke r0.<org.apache.jute.InputArchive: byte[] readBuffer(java.lang.String)>("data");

        r1.<org.apache.zookeeper.server.upgrade.DataNodeV1: byte[] data> = $r2;

        $r3 = interfaceinvoke r0.<org.apache.jute.InputArchive: org.apache.jute.Index startVector(java.lang.String)>("acl");

        if $r3 == null goto label2;

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        r1.<org.apache.zookeeper.server.upgrade.DataNodeV1: java.util.List acl> = $r6;

     label1:
        $z0 = interfaceinvoke $r3.<org.apache.jute.Index: boolean done()>();

        if $z0 != 0 goto label2;

        $r7 = new org.apache.zookeeper.data.ACL;

        specialinvoke $r7.<org.apache.zookeeper.data.ACL: void <init>()>();

        virtualinvoke $r7.<org.apache.zookeeper.data.ACL: void deserialize(org.apache.jute.InputArchive,java.lang.String)>(r0, "aclEntry");

        $r8 = r1.<org.apache.zookeeper.server.upgrade.DataNodeV1: java.util.List acl>;

        interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>($r7);

        interfaceinvoke $r3.<org.apache.jute.Index: void incr()>();

        goto label1;

     label2:
        interfaceinvoke r0.<org.apache.jute.InputArchive: void endVector(java.lang.String)>("acl");

        $r4 = new org.apache.zookeeper.data.StatPersistedV1;

        specialinvoke $r4.<org.apache.zookeeper.data.StatPersistedV1: void <init>()>();

        r1.<org.apache.zookeeper.server.upgrade.DataNodeV1: org.apache.zookeeper.data.StatPersistedV1 stat> = $r4;

        $r5 = r1.<org.apache.zookeeper.server.upgrade.DataNodeV1: org.apache.zookeeper.data.StatPersistedV1 stat>;

        virtualinvoke $r5.<org.apache.zookeeper.data.StatPersistedV1: void deserialize(org.apache.jute.InputArchive,java.lang.String)>(r0, "stat");

        interfaceinvoke r0.<org.apache.jute.InputArchive: void endRecord(java.lang.String)>("node");

        return;
    }

    public synchronized void serialize(org.apache.jute.OutputArchive, java.lang.String) throws java.io.IOException
    {
        byte[] $r2;
        java.util.Iterator $r8;
        org.apache.zookeeper.data.ACL r10;
        org.apache.zookeeper.data.StatPersistedV1 $r6;
        java.util.List $r3, $r4, $r5, $r7;
        org.apache.zookeeper.server.upgrade.DataNodeV1 r1;
        org.apache.jute.OutputArchive r0;
        java.lang.Object $r9;
        java.lang.String r11;
        boolean $z0;

        r1 := @this: org.apache.zookeeper.server.upgrade.DataNodeV1;

        r0 := @parameter0: org.apache.jute.OutputArchive;

        r11 := @parameter1: java.lang.String;

        interfaceinvoke r0.<org.apache.jute.OutputArchive: void startRecord(org.apache.jute.Record,java.lang.String)>(r1, "node");

        $r2 = r1.<org.apache.zookeeper.server.upgrade.DataNodeV1: byte[] data>;

        interfaceinvoke r0.<org.apache.jute.OutputArchive: void writeBuffer(byte[],java.lang.String)>($r2, "data");

        $r3 = r1.<org.apache.zookeeper.server.upgrade.DataNodeV1: java.util.List acl>;

        interfaceinvoke r0.<org.apache.jute.OutputArchive: void startVector(java.util.List,java.lang.String)>($r3, "acl");

        $r4 = r1.<org.apache.zookeeper.server.upgrade.DataNodeV1: java.util.List acl>;

        if $r4 == null goto label2;

        $r7 = r1.<org.apache.zookeeper.server.upgrade.DataNodeV1: java.util.List acl>;

        $r8 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r9 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        r10 = (org.apache.zookeeper.data.ACL) $r9;

        virtualinvoke r10.<org.apache.zookeeper.data.ACL: void serialize(org.apache.jute.OutputArchive,java.lang.String)>(r0, "aclEntry");

        goto label1;

     label2:
        $r5 = r1.<org.apache.zookeeper.server.upgrade.DataNodeV1: java.util.List acl>;

        interfaceinvoke r0.<org.apache.jute.OutputArchive: void endVector(java.util.List,java.lang.String)>($r5, "acl");

        $r6 = r1.<org.apache.zookeeper.server.upgrade.DataNodeV1: org.apache.zookeeper.data.StatPersistedV1 stat>;

        virtualinvoke $r6.<org.apache.zookeeper.data.StatPersistedV1: void serialize(org.apache.jute.OutputArchive,java.lang.String)>(r0, "stat");

        interfaceinvoke r0.<org.apache.jute.OutputArchive: void endRecord(org.apache.jute.Record,java.lang.String)>(r1, "node");

        return;
    }
}
