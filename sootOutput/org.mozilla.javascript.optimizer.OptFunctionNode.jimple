final class org.mozilla.javascript.optimizer.OptFunctionNode extends java.lang.Object
{
    org.mozilla.javascript.FunctionNode fnode;
    private boolean[] numberVarFlags;
    private int directTargetIndex;
    private boolean itsParameterNumberContext;
    boolean itsContainsCalls0;
    boolean itsContainsCalls1;

    void <init>(org.mozilla.javascript.FunctionNode)
    {
        org.mozilla.javascript.FunctionNode r1;
        int $i1;
        org.mozilla.javascript.optimizer.OptFunctionNode r0;

        r0 := @this: org.mozilla.javascript.optimizer.OptFunctionNode;

        r1 := @parameter0: org.mozilla.javascript.FunctionNode;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i1 = (int) -1;

        r0.<org.mozilla.javascript.optimizer.OptFunctionNode: int directTargetIndex> = $i1;

        r0.<org.mozilla.javascript.optimizer.OptFunctionNode: org.mozilla.javascript.FunctionNode fnode> = r1;

        virtualinvoke r1.<org.mozilla.javascript.FunctionNode: void setCompilerData(java.lang.Object)>(r0);

        return;
    }

    static org.mozilla.javascript.optimizer.OptFunctionNode get(org.mozilla.javascript.ScriptOrFnNode, int)
    {
        org.mozilla.javascript.optimizer.OptFunctionNode $r3;
        int i0;
        org.mozilla.javascript.FunctionNode $r1;
        org.mozilla.javascript.ScriptOrFnNode r0;
        java.lang.Object $r2;

        r0 := @parameter0: org.mozilla.javascript.ScriptOrFnNode;

        i0 := @parameter1: int;

        $r1 = virtualinvoke r0.<org.mozilla.javascript.ScriptOrFnNode: org.mozilla.javascript.FunctionNode getFunctionNode(int)>(i0);

        $r2 = virtualinvoke $r1.<org.mozilla.javascript.FunctionNode: java.lang.Object getCompilerData()>();

        $r3 = (org.mozilla.javascript.optimizer.OptFunctionNode) $r2;

        return $r3;
    }

    static org.mozilla.javascript.optimizer.OptFunctionNode get(org.mozilla.javascript.ScriptOrFnNode)
    {
        org.mozilla.javascript.ScriptOrFnNode r0;
        java.lang.Object $r1;
        org.mozilla.javascript.optimizer.OptFunctionNode $r2;

        r0 := @parameter0: org.mozilla.javascript.ScriptOrFnNode;

        $r1 = virtualinvoke r0.<org.mozilla.javascript.ScriptOrFnNode: java.lang.Object getCompilerData()>();

        $r2 = (org.mozilla.javascript.optimizer.OptFunctionNode) $r1;

        return $r2;
    }

    boolean isTargetOfDirectCall()
    {
        int $i0;
        org.mozilla.javascript.optimizer.OptFunctionNode r0;
        boolean $z0;

        r0 := @this: org.mozilla.javascript.optimizer.OptFunctionNode;

        $i0 = r0.<org.mozilla.javascript.optimizer.OptFunctionNode: int directTargetIndex>;

        if $i0 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    int getDirectTargetIndex()
    {
        int $i0;
        org.mozilla.javascript.optimizer.OptFunctionNode r0;

        r0 := @this: org.mozilla.javascript.optimizer.OptFunctionNode;

        $i0 = r0.<org.mozilla.javascript.optimizer.OptFunctionNode: int directTargetIndex>;

        return $i0;
    }

    void setDirectTargetIndex(int)
    {
        int i0, $i1;
        org.mozilla.javascript.optimizer.OptFunctionNode r0;

        r0 := @this: org.mozilla.javascript.optimizer.OptFunctionNode;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        $i1 = r0.<org.mozilla.javascript.optimizer.OptFunctionNode: int directTargetIndex>;

        if $i1 < 0 goto label2;

     label1:
        staticinvoke <org.mozilla.javascript.Kit: java.lang.RuntimeException codeBug()>();

     label2:
        r0.<org.mozilla.javascript.optimizer.OptFunctionNode: int directTargetIndex> = i0;

        return;
    }

    void setParameterNumberContext(boolean)
    {
        org.mozilla.javascript.optimizer.OptFunctionNode r0;
        boolean z0;

        r0 := @this: org.mozilla.javascript.optimizer.OptFunctionNode;

        z0 := @parameter0: boolean;

        r0.<org.mozilla.javascript.optimizer.OptFunctionNode: boolean itsParameterNumberContext> = z0;

        return;
    }

    boolean getParameterNumberContext()
    {
        org.mozilla.javascript.optimizer.OptFunctionNode r0;
        boolean $z0;

        r0 := @this: org.mozilla.javascript.optimizer.OptFunctionNode;

        $z0 = r0.<org.mozilla.javascript.optimizer.OptFunctionNode: boolean itsParameterNumberContext>;

        return $z0;
    }

    int getVarCount()
    {
        org.mozilla.javascript.FunctionNode $r1;
        int $i0;
        org.mozilla.javascript.optimizer.OptFunctionNode r0;

        r0 := @this: org.mozilla.javascript.optimizer.OptFunctionNode;

        $r1 = r0.<org.mozilla.javascript.optimizer.OptFunctionNode: org.mozilla.javascript.FunctionNode fnode>;

        $i0 = virtualinvoke $r1.<org.mozilla.javascript.FunctionNode: int getParamAndVarCount()>();

        return $i0;
    }

    boolean isParameter(int)
    {
        org.mozilla.javascript.optimizer.OptFunctionNode r0;
        int i0, $i1;
        org.mozilla.javascript.FunctionNode $r1;
        boolean $z0;

        r0 := @this: org.mozilla.javascript.optimizer.OptFunctionNode;

        i0 := @parameter0: int;

        $r1 = r0.<org.mozilla.javascript.optimizer.OptFunctionNode: org.mozilla.javascript.FunctionNode fnode>;

        $i1 = virtualinvoke $r1.<org.mozilla.javascript.FunctionNode: int getParamCount()>();

        if i0 >= $i1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    boolean isNumberVar(int)
    {
        org.mozilla.javascript.optimizer.OptFunctionNode r0;
        boolean[] $r2, $r3;
        org.mozilla.javascript.FunctionNode $r1;
        int $i0, i1, i2;
        boolean $z0;

        r0 := @this: org.mozilla.javascript.optimizer.OptFunctionNode;

        i1 := @parameter0: int;

        $r1 = r0.<org.mozilla.javascript.optimizer.OptFunctionNode: org.mozilla.javascript.FunctionNode fnode>;

        $i0 = virtualinvoke $r1.<org.mozilla.javascript.FunctionNode: int getParamCount()>();

        i2 = i1 - $i0;

        if i2 < 0 goto label1;

        $r2 = r0.<org.mozilla.javascript.optimizer.OptFunctionNode: boolean[] numberVarFlags>;

        if $r2 == null goto label1;

        $r3 = r0.<org.mozilla.javascript.optimizer.OptFunctionNode: boolean[] numberVarFlags>;

        $z0 = $r3[i2];

        return $z0;

     label1:
        return 0;
    }

    void setIsNumberVar(int)
    {
        org.mozilla.javascript.optimizer.OptFunctionNode r0;
        boolean[] $r2, $r3, $r6;
        org.mozilla.javascript.FunctionNode $r1, $r4, $r5;
        int $i0, $i1, $i2, i3, i4, i5;

        r0 := @this: org.mozilla.javascript.optimizer.OptFunctionNode;

        i4 := @parameter0: int;

        $r1 = r0.<org.mozilla.javascript.optimizer.OptFunctionNode: org.mozilla.javascript.FunctionNode fnode>;

        $i0 = virtualinvoke $r1.<org.mozilla.javascript.FunctionNode: int getParamCount()>();

        i5 = i4 - $i0;

        if i5 >= 0 goto label1;

        staticinvoke <org.mozilla.javascript.Kit: java.lang.RuntimeException codeBug()>();

     label1:
        $r2 = r0.<org.mozilla.javascript.optimizer.OptFunctionNode: boolean[] numberVarFlags>;

        if $r2 != null goto label2;

        $r4 = r0.<org.mozilla.javascript.optimizer.OptFunctionNode: org.mozilla.javascript.FunctionNode fnode>;

        $i1 = virtualinvoke $r4.<org.mozilla.javascript.FunctionNode: int getParamAndVarCount()>();

        $r5 = r0.<org.mozilla.javascript.optimizer.OptFunctionNode: org.mozilla.javascript.FunctionNode fnode>;

        $i2 = virtualinvoke $r5.<org.mozilla.javascript.FunctionNode: int getParamCount()>();

        i3 = $i1 - $i2;

        $r6 = newarray (boolean)[i3];

        r0.<org.mozilla.javascript.optimizer.OptFunctionNode: boolean[] numberVarFlags> = $r6;

     label2:
        $r3 = r0.<org.mozilla.javascript.optimizer.OptFunctionNode: boolean[] numberVarFlags>;

        $r3[i5] = 1;

        return;
    }

    int getVarIndex(org.mozilla.javascript.Node)
    {
        org.mozilla.javascript.optimizer.OptFunctionNode r3;
        java.lang.RuntimeException $r1, $r5;
        org.mozilla.javascript.Node r0, $r2;
        int $i0, $i1, $i2, i3, $i5, $i7;
        org.mozilla.javascript.FunctionNode $r4;
        java.lang.String r6;

        r3 := @this: org.mozilla.javascript.optimizer.OptFunctionNode;

        r0 := @parameter0: org.mozilla.javascript.Node;

        $i5 = (int) -1;

        $i0 = virtualinvoke r0.<org.mozilla.javascript.Node: int getIntProp(int,int)>(7, $i5);

        i3 = $i0;

        $i7 = (int) -1;

        if $i0 != $i7 goto label5;

        $i1 = virtualinvoke r0.<org.mozilla.javascript.Node: int getType()>();

        if $i1 != 54 goto label1;

        r6 = virtualinvoke r0.<org.mozilla.javascript.Node: java.lang.String getString()>();

        goto label3;

     label1:
        if $i1 != 55 goto label2;

        $r2 = virtualinvoke r0.<org.mozilla.javascript.Node: org.mozilla.javascript.Node getFirstChild()>();

        r6 = virtualinvoke $r2.<org.mozilla.javascript.Node: java.lang.String getString()>();

        goto label3;

     label2:
        $r1 = staticinvoke <org.mozilla.javascript.Kit: java.lang.RuntimeException codeBug()>();

        throw $r1;

     label3:
        $r4 = r3.<org.mozilla.javascript.optimizer.OptFunctionNode: org.mozilla.javascript.FunctionNode fnode>;

        $i2 = virtualinvoke $r4.<org.mozilla.javascript.FunctionNode: int getParamOrVarIndex(java.lang.String)>(r6);

        i3 = $i2;

        if $i2 >= 0 goto label4;

        $r5 = staticinvoke <org.mozilla.javascript.Kit: java.lang.RuntimeException codeBug()>();

        throw $r5;

     label4:
        virtualinvoke r0.<org.mozilla.javascript.Node: void putIntProp(int,int)>(7, $i2);

     label5:
        return i3;
    }
}
