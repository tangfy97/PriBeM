public abstract class org.apache.batik.dom.svg.AbstractSVGMatrix extends java.lang.Object implements org.w3c.dom.svg.SVGMatrix
{
    protected static final java.awt.geom.AffineTransform FLIP_X_TRANSFORM;
    protected static final java.awt.geom.AffineTransform FLIP_Y_TRANSFORM;

    public void <init>()
    {
        org.apache.batik.dom.svg.AbstractSVGMatrix r0;

        r0 := @this: org.apache.batik.dom.svg.AbstractSVGMatrix;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    protected abstract java.awt.geom.AffineTransform getAffineTransform();

    public float getA()
    {
        org.apache.batik.dom.svg.AbstractSVGMatrix r0;
        float $f0;
        java.awt.geom.AffineTransform $r1;
        double $d0;

        r0 := @this: org.apache.batik.dom.svg.AbstractSVGMatrix;

        $r1 = virtualinvoke r0.<org.apache.batik.dom.svg.AbstractSVGMatrix: java.awt.geom.AffineTransform getAffineTransform()>();

        $d0 = virtualinvoke $r1.<java.awt.geom.AffineTransform: double getScaleX()>();

        $f0 = (float) $d0;

        return $f0;
    }

    public void setA(float) throws org.w3c.dom.DOMException
    {
        java.awt.geom.AffineTransform $r1;
        org.apache.batik.dom.svg.AbstractSVGMatrix r0;
        float f0;
        double $d0, $d1, $d2, $d3, $d4, $d5;

        r0 := @this: org.apache.batik.dom.svg.AbstractSVGMatrix;

        f0 := @parameter0: float;

        $r1 = virtualinvoke r0.<org.apache.batik.dom.svg.AbstractSVGMatrix: java.awt.geom.AffineTransform getAffineTransform()>();

        $d0 = (double) f0;

        $d1 = virtualinvoke $r1.<java.awt.geom.AffineTransform: double getShearY()>();

        $d2 = virtualinvoke $r1.<java.awt.geom.AffineTransform: double getShearX()>();

        $d3 = virtualinvoke $r1.<java.awt.geom.AffineTransform: double getScaleY()>();

        $d4 = virtualinvoke $r1.<java.awt.geom.AffineTransform: double getTranslateX()>();

        $d5 = virtualinvoke $r1.<java.awt.geom.AffineTransform: double getTranslateY()>();

        virtualinvoke $r1.<java.awt.geom.AffineTransform: void setTransform(double,double,double,double,double,double)>($d0, $d1, $d2, $d3, $d4, $d5);

        return;
    }

    public float getB()
    {
        org.apache.batik.dom.svg.AbstractSVGMatrix r0;
        float $f0;
        java.awt.geom.AffineTransform $r1;
        double $d0;

        r0 := @this: org.apache.batik.dom.svg.AbstractSVGMatrix;

        $r1 = virtualinvoke r0.<org.apache.batik.dom.svg.AbstractSVGMatrix: java.awt.geom.AffineTransform getAffineTransform()>();

        $d0 = virtualinvoke $r1.<java.awt.geom.AffineTransform: double getShearY()>();

        $f0 = (float) $d0;

        return $f0;
    }

    public void setB(float) throws org.w3c.dom.DOMException
    {
        java.awt.geom.AffineTransform $r1;
        org.apache.batik.dom.svg.AbstractSVGMatrix r0;
        float f0;
        double $d0, $d1, $d2, $d3, $d4, $d5;

        r0 := @this: org.apache.batik.dom.svg.AbstractSVGMatrix;

        f0 := @parameter0: float;

        $r1 = virtualinvoke r0.<org.apache.batik.dom.svg.AbstractSVGMatrix: java.awt.geom.AffineTransform getAffineTransform()>();

        $d0 = virtualinvoke $r1.<java.awt.geom.AffineTransform: double getScaleX()>();

        $d1 = (double) f0;

        $d2 = virtualinvoke $r1.<java.awt.geom.AffineTransform: double getShearX()>();

        $d3 = virtualinvoke $r1.<java.awt.geom.AffineTransform: double getScaleY()>();

        $d4 = virtualinvoke $r1.<java.awt.geom.AffineTransform: double getTranslateX()>();

        $d5 = virtualinvoke $r1.<java.awt.geom.AffineTransform: double getTranslateY()>();

        virtualinvoke $r1.<java.awt.geom.AffineTransform: void setTransform(double,double,double,double,double,double)>($d0, $d1, $d2, $d3, $d4, $d5);

        return;
    }

    public float getC()
    {
        org.apache.batik.dom.svg.AbstractSVGMatrix r0;
        float $f0;
        java.awt.geom.AffineTransform $r1;
        double $d0;

        r0 := @this: org.apache.batik.dom.svg.AbstractSVGMatrix;

        $r1 = virtualinvoke r0.<org.apache.batik.dom.svg.AbstractSVGMatrix: java.awt.geom.AffineTransform getAffineTransform()>();

        $d0 = virtualinvoke $r1.<java.awt.geom.AffineTransform: double getShearX()>();

        $f0 = (float) $d0;

        return $f0;
    }

    public void setC(float) throws org.w3c.dom.DOMException
    {
        java.awt.geom.AffineTransform $r1;
        org.apache.batik.dom.svg.AbstractSVGMatrix r0;
        float f0;
        double $d0, $d1, $d2, $d3, $d4, $d5;

        r0 := @this: org.apache.batik.dom.svg.AbstractSVGMatrix;

        f0 := @parameter0: float;

        $r1 = virtualinvoke r0.<org.apache.batik.dom.svg.AbstractSVGMatrix: java.awt.geom.AffineTransform getAffineTransform()>();

        $d0 = virtualinvoke $r1.<java.awt.geom.AffineTransform: double getScaleX()>();

        $d1 = virtualinvoke $r1.<java.awt.geom.AffineTransform: double getShearY()>();

        $d2 = (double) f0;

        $d3 = virtualinvoke $r1.<java.awt.geom.AffineTransform: double getScaleY()>();

        $d4 = virtualinvoke $r1.<java.awt.geom.AffineTransform: double getTranslateX()>();

        $d5 = virtualinvoke $r1.<java.awt.geom.AffineTransform: double getTranslateY()>();

        virtualinvoke $r1.<java.awt.geom.AffineTransform: void setTransform(double,double,double,double,double,double)>($d0, $d1, $d2, $d3, $d4, $d5);

        return;
    }

    public float getD()
    {
        org.apache.batik.dom.svg.AbstractSVGMatrix r0;
        float $f0;
        java.awt.geom.AffineTransform $r1;
        double $d0;

        r0 := @this: org.apache.batik.dom.svg.AbstractSVGMatrix;

        $r1 = virtualinvoke r0.<org.apache.batik.dom.svg.AbstractSVGMatrix: java.awt.geom.AffineTransform getAffineTransform()>();

        $d0 = virtualinvoke $r1.<java.awt.geom.AffineTransform: double getScaleY()>();

        $f0 = (float) $d0;

        return $f0;
    }

    public void setD(float) throws org.w3c.dom.DOMException
    {
        java.awt.geom.AffineTransform $r1;
        org.apache.batik.dom.svg.AbstractSVGMatrix r0;
        float f0;
        double $d0, $d1, $d2, $d3, $d4, $d5;

        r0 := @this: org.apache.batik.dom.svg.AbstractSVGMatrix;

        f0 := @parameter0: float;

        $r1 = virtualinvoke r0.<org.apache.batik.dom.svg.AbstractSVGMatrix: java.awt.geom.AffineTransform getAffineTransform()>();

        $d0 = virtualinvoke $r1.<java.awt.geom.AffineTransform: double getScaleX()>();

        $d1 = virtualinvoke $r1.<java.awt.geom.AffineTransform: double getShearY()>();

        $d2 = virtualinvoke $r1.<java.awt.geom.AffineTransform: double getShearX()>();

        $d3 = (double) f0;

        $d4 = virtualinvoke $r1.<java.awt.geom.AffineTransform: double getTranslateX()>();

        $d5 = virtualinvoke $r1.<java.awt.geom.AffineTransform: double getTranslateY()>();

        virtualinvoke $r1.<java.awt.geom.AffineTransform: void setTransform(double,double,double,double,double,double)>($d0, $d1, $d2, $d3, $d4, $d5);

        return;
    }

    public float getE()
    {
        org.apache.batik.dom.svg.AbstractSVGMatrix r0;
        float $f0;
        java.awt.geom.AffineTransform $r1;
        double $d0;

        r0 := @this: org.apache.batik.dom.svg.AbstractSVGMatrix;

        $r1 = virtualinvoke r0.<org.apache.batik.dom.svg.AbstractSVGMatrix: java.awt.geom.AffineTransform getAffineTransform()>();

        $d0 = virtualinvoke $r1.<java.awt.geom.AffineTransform: double getTranslateX()>();

        $f0 = (float) $d0;

        return $f0;
    }

    public void setE(float) throws org.w3c.dom.DOMException
    {
        java.awt.geom.AffineTransform $r1;
        org.apache.batik.dom.svg.AbstractSVGMatrix r0;
        float f0;
        double $d0, $d1, $d2, $d3, $d4, $d5;

        r0 := @this: org.apache.batik.dom.svg.AbstractSVGMatrix;

        f0 := @parameter0: float;

        $r1 = virtualinvoke r0.<org.apache.batik.dom.svg.AbstractSVGMatrix: java.awt.geom.AffineTransform getAffineTransform()>();

        $d0 = virtualinvoke $r1.<java.awt.geom.AffineTransform: double getScaleX()>();

        $d1 = virtualinvoke $r1.<java.awt.geom.AffineTransform: double getShearY()>();

        $d2 = virtualinvoke $r1.<java.awt.geom.AffineTransform: double getShearX()>();

        $d3 = virtualinvoke $r1.<java.awt.geom.AffineTransform: double getScaleY()>();

        $d4 = (double) f0;

        $d5 = virtualinvoke $r1.<java.awt.geom.AffineTransform: double getTranslateY()>();

        virtualinvoke $r1.<java.awt.geom.AffineTransform: void setTransform(double,double,double,double,double,double)>($d0, $d1, $d2, $d3, $d4, $d5);

        return;
    }

    public float getF()
    {
        org.apache.batik.dom.svg.AbstractSVGMatrix r0;
        float $f0;
        java.awt.geom.AffineTransform $r1;
        double $d0;

        r0 := @this: org.apache.batik.dom.svg.AbstractSVGMatrix;

        $r1 = virtualinvoke r0.<org.apache.batik.dom.svg.AbstractSVGMatrix: java.awt.geom.AffineTransform getAffineTransform()>();

        $d0 = virtualinvoke $r1.<java.awt.geom.AffineTransform: double getTranslateY()>();

        $f0 = (float) $d0;

        return $f0;
    }

    public void setF(float) throws org.w3c.dom.DOMException
    {
        java.awt.geom.AffineTransform $r1;
        org.apache.batik.dom.svg.AbstractSVGMatrix r0;
        float f0;
        double $d0, $d1, $d2, $d3, $d4, $d5;

        r0 := @this: org.apache.batik.dom.svg.AbstractSVGMatrix;

        f0 := @parameter0: float;

        $r1 = virtualinvoke r0.<org.apache.batik.dom.svg.AbstractSVGMatrix: java.awt.geom.AffineTransform getAffineTransform()>();

        $d0 = virtualinvoke $r1.<java.awt.geom.AffineTransform: double getScaleX()>();

        $d1 = virtualinvoke $r1.<java.awt.geom.AffineTransform: double getShearY()>();

        $d2 = virtualinvoke $r1.<java.awt.geom.AffineTransform: double getShearX()>();

        $d3 = virtualinvoke $r1.<java.awt.geom.AffineTransform: double getScaleY()>();

        $d4 = virtualinvoke $r1.<java.awt.geom.AffineTransform: double getTranslateX()>();

        $d5 = (double) f0;

        virtualinvoke $r1.<java.awt.geom.AffineTransform: void setTransform(double,double,double,double,double,double)>($d0, $d1, $d2, $d3, $d4, $d5);

        return;
    }

    public org.w3c.dom.svg.SVGMatrix multiply(org.w3c.dom.svg.SVGMatrix)
    {
        java.awt.geom.AffineTransform $r0, $r3, r5;
        org.apache.batik.dom.svg.SVGOMMatrix $r6;
        org.apache.batik.dom.svg.AbstractSVGMatrix r2;
        org.w3c.dom.svg.SVGMatrix r1;
        float $f0, $f1, $f2, $f3, $f4, $f5;
        java.lang.Object $r4;

        r2 := @this: org.apache.batik.dom.svg.AbstractSVGMatrix;

        r1 := @parameter0: org.w3c.dom.svg.SVGMatrix;

        $r0 = new java.awt.geom.AffineTransform;

        $f0 = interfaceinvoke r1.<org.w3c.dom.svg.SVGMatrix: float getA()>();

        $f1 = interfaceinvoke r1.<org.w3c.dom.svg.SVGMatrix: float getB()>();

        $f2 = interfaceinvoke r1.<org.w3c.dom.svg.SVGMatrix: float getC()>();

        $f3 = interfaceinvoke r1.<org.w3c.dom.svg.SVGMatrix: float getD()>();

        $f4 = interfaceinvoke r1.<org.w3c.dom.svg.SVGMatrix: float getE()>();

        $f5 = interfaceinvoke r1.<org.w3c.dom.svg.SVGMatrix: float getF()>();

        specialinvoke $r0.<java.awt.geom.AffineTransform: void <init>(float,float,float,float,float,float)>($f0, $f1, $f2, $f3, $f4, $f5);

        $r3 = virtualinvoke r2.<org.apache.batik.dom.svg.AbstractSVGMatrix: java.awt.geom.AffineTransform getAffineTransform()>();

        $r4 = virtualinvoke $r3.<java.awt.geom.AffineTransform: java.lang.Object clone()>();

        r5 = (java.awt.geom.AffineTransform) $r4;

        virtualinvoke r5.<java.awt.geom.AffineTransform: void concatenate(java.awt.geom.AffineTransform)>($r0);

        $r6 = new org.apache.batik.dom.svg.SVGOMMatrix;

        specialinvoke $r6.<org.apache.batik.dom.svg.SVGOMMatrix: void <init>(java.awt.geom.AffineTransform)>(r5);

        return $r6;
    }

    public org.w3c.dom.svg.SVGMatrix inverse() throws org.w3c.dom.svg.SVGException
    {
        org.apache.batik.dom.svg.AbstractSVGMatrix r1;
        java.awt.geom.NoninvertibleTransformException $r4;
        org.apache.batik.dom.svg.SVGOMException $r5;
        java.lang.String $r6;
        java.awt.geom.AffineTransform $r2, $r3;
        org.apache.batik.dom.svg.SVGOMMatrix $r0;

        r1 := @this: org.apache.batik.dom.svg.AbstractSVGMatrix;

     label1:
        $r0 = new org.apache.batik.dom.svg.SVGOMMatrix;

        $r2 = virtualinvoke r1.<org.apache.batik.dom.svg.AbstractSVGMatrix: java.awt.geom.AffineTransform getAffineTransform()>();

        $r3 = virtualinvoke $r2.<java.awt.geom.AffineTransform: java.awt.geom.AffineTransform createInverse()>();

        specialinvoke $r0.<org.apache.batik.dom.svg.SVGOMMatrix: void <init>(java.awt.geom.AffineTransform)>($r3);

        return $r0;

     label2:
        $r4 := @caughtexception;

        $r5 = new org.apache.batik.dom.svg.SVGOMException;

        $r6 = virtualinvoke $r4.<java.lang.Throwable: java.lang.String getMessage()>();

        specialinvoke $r5.<org.apache.batik.dom.svg.SVGOMException: void <init>(short,java.lang.String)>(2, $r6);

        throw $r5;

        catch java.awt.geom.NoninvertibleTransformException from label1 to label2 with label2;
    }

    public org.w3c.dom.svg.SVGMatrix translate(float, float)
    {
        java.awt.geom.AffineTransform $r1, r3;
        org.apache.batik.dom.svg.SVGOMMatrix $r4;
        org.apache.batik.dom.svg.AbstractSVGMatrix r0;
        float f0, f1;
        java.lang.Object $r2;
        double $d0, $d1;

        r0 := @this: org.apache.batik.dom.svg.AbstractSVGMatrix;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        $r1 = virtualinvoke r0.<org.apache.batik.dom.svg.AbstractSVGMatrix: java.awt.geom.AffineTransform getAffineTransform()>();

        $r2 = virtualinvoke $r1.<java.awt.geom.AffineTransform: java.lang.Object clone()>();

        r3 = (java.awt.geom.AffineTransform) $r2;

        $d1 = (double) f0;

        $d0 = (double) f1;

        virtualinvoke r3.<java.awt.geom.AffineTransform: void translate(double,double)>($d1, $d0);

        $r4 = new org.apache.batik.dom.svg.SVGOMMatrix;

        specialinvoke $r4.<org.apache.batik.dom.svg.SVGOMMatrix: void <init>(java.awt.geom.AffineTransform)>(r3);

        return $r4;
    }

    public org.w3c.dom.svg.SVGMatrix scale(float)
    {
        java.awt.geom.AffineTransform $r1, r3;
        org.apache.batik.dom.svg.SVGOMMatrix $r4;
        org.apache.batik.dom.svg.AbstractSVGMatrix r0;
        float f0;
        java.lang.Object $r2;
        double $d0, $d1;

        r0 := @this: org.apache.batik.dom.svg.AbstractSVGMatrix;

        f0 := @parameter0: float;

        $r1 = virtualinvoke r0.<org.apache.batik.dom.svg.AbstractSVGMatrix: java.awt.geom.AffineTransform getAffineTransform()>();

        $r2 = virtualinvoke $r1.<java.awt.geom.AffineTransform: java.lang.Object clone()>();

        r3 = (java.awt.geom.AffineTransform) $r2;

        $d1 = (double) f0;

        $d0 = (double) f0;

        virtualinvoke r3.<java.awt.geom.AffineTransform: void scale(double,double)>($d1, $d0);

        $r4 = new org.apache.batik.dom.svg.SVGOMMatrix;

        specialinvoke $r4.<org.apache.batik.dom.svg.SVGOMMatrix: void <init>(java.awt.geom.AffineTransform)>(r3);

        return $r4;
    }

    public org.w3c.dom.svg.SVGMatrix scaleNonUniform(float, float)
    {
        java.awt.geom.AffineTransform $r1, r3;
        org.apache.batik.dom.svg.SVGOMMatrix $r4;
        org.apache.batik.dom.svg.AbstractSVGMatrix r0;
        float f0, f1;
        java.lang.Object $r2;
        double $d0, $d1;

        r0 := @this: org.apache.batik.dom.svg.AbstractSVGMatrix;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        $r1 = virtualinvoke r0.<org.apache.batik.dom.svg.AbstractSVGMatrix: java.awt.geom.AffineTransform getAffineTransform()>();

        $r2 = virtualinvoke $r1.<java.awt.geom.AffineTransform: java.lang.Object clone()>();

        r3 = (java.awt.geom.AffineTransform) $r2;

        $d1 = (double) f0;

        $d0 = (double) f1;

        virtualinvoke r3.<java.awt.geom.AffineTransform: void scale(double,double)>($d1, $d0);

        $r4 = new org.apache.batik.dom.svg.SVGOMMatrix;

        specialinvoke $r4.<org.apache.batik.dom.svg.SVGOMMatrix: void <init>(java.awt.geom.AffineTransform)>(r3);

        return $r4;
    }

    public org.w3c.dom.svg.SVGMatrix rotate(float)
    {
        java.awt.geom.AffineTransform $r1, r3;
        org.apache.batik.dom.svg.SVGOMMatrix $r4;
        org.apache.batik.dom.svg.AbstractSVGMatrix r0;
        float f0;
        java.lang.Object $r2;
        double $d0, $d1;

        r0 := @this: org.apache.batik.dom.svg.AbstractSVGMatrix;

        f0 := @parameter0: float;

        $r1 = virtualinvoke r0.<org.apache.batik.dom.svg.AbstractSVGMatrix: java.awt.geom.AffineTransform getAffineTransform()>();

        $r2 = virtualinvoke $r1.<java.awt.geom.AffineTransform: java.lang.Object clone()>();

        r3 = (java.awt.geom.AffineTransform) $r2;

        $d0 = (double) f0;

        $d1 = staticinvoke <java.lang.Math: double toRadians(double)>($d0);

        virtualinvoke r3.<java.awt.geom.AffineTransform: void rotate(double)>($d1);

        $r4 = new org.apache.batik.dom.svg.SVGOMMatrix;

        specialinvoke $r4.<org.apache.batik.dom.svg.SVGOMMatrix: void <init>(java.awt.geom.AffineTransform)>(r3);

        return $r4;
    }

    public org.w3c.dom.svg.SVGMatrix rotateFromVector(float, float) throws org.w3c.dom.svg.SVGException
    {
        java.awt.geom.AffineTransform $r2, r4;
        org.apache.batik.dom.svg.SVGOMMatrix $r5;
        byte $b0, $b1;
        org.apache.batik.dom.svg.AbstractSVGMatrix r1;
        float f0, f1;
        java.lang.Object $r3;
        org.apache.batik.dom.svg.SVGOMException $r0;
        double $d0, $d1, $d2;

        r1 := @this: org.apache.batik.dom.svg.AbstractSVGMatrix;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        $b0 = f0 cmpl 0.0F;

        if $b0 == 0 goto label1;

        $b1 = f1 cmpl 0.0F;

        if $b1 != 0 goto label2;

     label1:
        $r0 = new org.apache.batik.dom.svg.SVGOMException;

        specialinvoke $r0.<org.apache.batik.dom.svg.SVGOMException: void <init>(short,java.lang.String)>(1, "");

        throw $r0;

     label2:
        $r2 = virtualinvoke r1.<org.apache.batik.dom.svg.AbstractSVGMatrix: java.awt.geom.AffineTransform getAffineTransform()>();

        $r3 = virtualinvoke $r2.<java.awt.geom.AffineTransform: java.lang.Object clone()>();

        r4 = (java.awt.geom.AffineTransform) $r3;

        $d1 = (double) f1;

        $d0 = (double) f0;

        $d2 = staticinvoke <java.lang.Math: double atan2(double,double)>($d1, $d0);

        virtualinvoke r4.<java.awt.geom.AffineTransform: void rotate(double)>($d2);

        $r5 = new org.apache.batik.dom.svg.SVGOMMatrix;

        specialinvoke $r5.<org.apache.batik.dom.svg.SVGOMMatrix: void <init>(java.awt.geom.AffineTransform)>(r4);

        return $r5;
    }

    public org.w3c.dom.svg.SVGMatrix flipX()
    {
        org.apache.batik.dom.svg.AbstractSVGMatrix r0;
        java.lang.Object $r2;
        java.awt.geom.AffineTransform $r1, r3, $r4;
        org.apache.batik.dom.svg.SVGOMMatrix $r5;

        r0 := @this: org.apache.batik.dom.svg.AbstractSVGMatrix;

        $r1 = virtualinvoke r0.<org.apache.batik.dom.svg.AbstractSVGMatrix: java.awt.geom.AffineTransform getAffineTransform()>();

        $r2 = virtualinvoke $r1.<java.awt.geom.AffineTransform: java.lang.Object clone()>();

        r3 = (java.awt.geom.AffineTransform) $r2;

        $r4 = <org.apache.batik.dom.svg.AbstractSVGMatrix: java.awt.geom.AffineTransform FLIP_X_TRANSFORM>;

        virtualinvoke r3.<java.awt.geom.AffineTransform: void concatenate(java.awt.geom.AffineTransform)>($r4);

        $r5 = new org.apache.batik.dom.svg.SVGOMMatrix;

        specialinvoke $r5.<org.apache.batik.dom.svg.SVGOMMatrix: void <init>(java.awt.geom.AffineTransform)>(r3);

        return $r5;
    }

    public org.w3c.dom.svg.SVGMatrix flipY()
    {
        org.apache.batik.dom.svg.AbstractSVGMatrix r0;
        java.lang.Object $r2;
        java.awt.geom.AffineTransform $r1, r3, $r4;
        org.apache.batik.dom.svg.SVGOMMatrix $r5;

        r0 := @this: org.apache.batik.dom.svg.AbstractSVGMatrix;

        $r1 = virtualinvoke r0.<org.apache.batik.dom.svg.AbstractSVGMatrix: java.awt.geom.AffineTransform getAffineTransform()>();

        $r2 = virtualinvoke $r1.<java.awt.geom.AffineTransform: java.lang.Object clone()>();

        r3 = (java.awt.geom.AffineTransform) $r2;

        $r4 = <org.apache.batik.dom.svg.AbstractSVGMatrix: java.awt.geom.AffineTransform FLIP_Y_TRANSFORM>;

        virtualinvoke r3.<java.awt.geom.AffineTransform: void concatenate(java.awt.geom.AffineTransform)>($r4);

        $r5 = new org.apache.batik.dom.svg.SVGOMMatrix;

        specialinvoke $r5.<org.apache.batik.dom.svg.SVGOMMatrix: void <init>(java.awt.geom.AffineTransform)>(r3);

        return $r5;
    }

    public org.w3c.dom.svg.SVGMatrix skewX(float)
    {
        java.awt.geom.AffineTransform $r1, r3, $r4;
        org.apache.batik.dom.svg.SVGOMMatrix $r5;
        org.apache.batik.dom.svg.AbstractSVGMatrix r0;
        float f0;
        java.lang.Object $r2;
        double $d0, $d1, $d2;

        r0 := @this: org.apache.batik.dom.svg.AbstractSVGMatrix;

        f0 := @parameter0: float;

        $r1 = virtualinvoke r0.<org.apache.batik.dom.svg.AbstractSVGMatrix: java.awt.geom.AffineTransform getAffineTransform()>();

        $r2 = virtualinvoke $r1.<java.awt.geom.AffineTransform: java.lang.Object clone()>();

        r3 = (java.awt.geom.AffineTransform) $r2;

        $d0 = (double) f0;

        $d1 = staticinvoke <java.lang.Math: double toRadians(double)>($d0);

        $d2 = staticinvoke <java.lang.Math: double tan(double)>($d1);

        $r4 = staticinvoke <java.awt.geom.AffineTransform: java.awt.geom.AffineTransform getShearInstance(double,double)>($d2, 0.0);

        virtualinvoke r3.<java.awt.geom.AffineTransform: void concatenate(java.awt.geom.AffineTransform)>($r4);

        $r5 = new org.apache.batik.dom.svg.SVGOMMatrix;

        specialinvoke $r5.<org.apache.batik.dom.svg.SVGOMMatrix: void <init>(java.awt.geom.AffineTransform)>(r3);

        return $r5;
    }

    public org.w3c.dom.svg.SVGMatrix skewY(float)
    {
        java.awt.geom.AffineTransform $r1, r3, $r4;
        org.apache.batik.dom.svg.SVGOMMatrix $r5;
        org.apache.batik.dom.svg.AbstractSVGMatrix r0;
        float f0;
        java.lang.Object $r2;
        double $d0, $d1, $d2;

        r0 := @this: org.apache.batik.dom.svg.AbstractSVGMatrix;

        f0 := @parameter0: float;

        $r1 = virtualinvoke r0.<org.apache.batik.dom.svg.AbstractSVGMatrix: java.awt.geom.AffineTransform getAffineTransform()>();

        $r2 = virtualinvoke $r1.<java.awt.geom.AffineTransform: java.lang.Object clone()>();

        r3 = (java.awt.geom.AffineTransform) $r2;

        $d0 = (double) f0;

        $d1 = staticinvoke <java.lang.Math: double toRadians(double)>($d0);

        $d2 = staticinvoke <java.lang.Math: double tan(double)>($d1);

        $r4 = staticinvoke <java.awt.geom.AffineTransform: java.awt.geom.AffineTransform getShearInstance(double,double)>(0.0, $d2);

        virtualinvoke r3.<java.awt.geom.AffineTransform: void concatenate(java.awt.geom.AffineTransform)>($r4);

        $r5 = new org.apache.batik.dom.svg.SVGOMMatrix;

        specialinvoke $r5.<org.apache.batik.dom.svg.SVGOMMatrix: void <init>(java.awt.geom.AffineTransform)>(r3);

        return $r5;
    }

    static void <clinit>()
    {
        java.awt.geom.AffineTransform $r0, $r1;

        $r0 = new java.awt.geom.AffineTransform;

        specialinvoke $r0.<java.awt.geom.AffineTransform: void <init>(float,float,float,float,float,float)>(-1.0F, 0.0F, 0.0F, 1.0F, 0.0F, 0.0F);

        <org.apache.batik.dom.svg.AbstractSVGMatrix: java.awt.geom.AffineTransform FLIP_X_TRANSFORM> = $r0;

        $r1 = new java.awt.geom.AffineTransform;

        specialinvoke $r1.<java.awt.geom.AffineTransform: void <init>(float,float,float,float,float,float)>(1.0F, 0.0F, 0.0F, -1.0F, 0.0F, 0.0F);

        <org.apache.batik.dom.svg.AbstractSVGMatrix: java.awt.geom.AffineTransform FLIP_Y_TRANSFORM> = $r1;

        return;
    }
}
