class org.waveprotocol.wave.model.util.CollectionUtils$StringSetAdapter extends java.lang.Object implements org.waveprotocol.wave.model.util.StringSet
{
    private final java.util.Set backend;

    private void <init>(java.util.Set)
    {
        java.util.Set r1;
        org.waveprotocol.wave.model.util.CollectionUtils$StringSetAdapter r0;

        r0 := @this: org.waveprotocol.wave.model.util.CollectionUtils$StringSetAdapter;

        r1 := @parameter0: java.util.Set;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "Attempt to adapt a null set");

        r0.<org.waveprotocol.wave.model.util.CollectionUtils$StringSetAdapter: java.util.Set backend> = r1;

        return;
    }

    public void add(java.lang.String)
    {
        java.util.Set $r2;
        java.lang.String r0;
        org.waveprotocol.wave.model.util.CollectionUtils$StringSetAdapter r1;

        r1 := @this: org.waveprotocol.wave.model.util.CollectionUtils$StringSetAdapter;

        r0 := @parameter0: java.lang.String;

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r0, "StringSet cannot contain null values");

        $r2 = r1.<org.waveprotocol.wave.model.util.CollectionUtils$StringSetAdapter: java.util.Set backend>;

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>(r0);

        return;
    }

    public void clear()
    {
        java.util.Set $r1;
        org.waveprotocol.wave.model.util.CollectionUtils$StringSetAdapter r0;

        r0 := @this: org.waveprotocol.wave.model.util.CollectionUtils$StringSetAdapter;

        $r1 = r0.<org.waveprotocol.wave.model.util.CollectionUtils$StringSetAdapter: java.util.Set backend>;

        interfaceinvoke $r1.<java.util.Set: void clear()>();

        return;
    }

    public boolean contains(java.lang.String)
    {
        java.util.Set $r2;
        java.lang.String r0;
        org.waveprotocol.wave.model.util.CollectionUtils$StringSetAdapter r1;
        boolean $z0;

        r1 := @this: org.waveprotocol.wave.model.util.CollectionUtils$StringSetAdapter;

        r0 := @parameter0: java.lang.String;

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r0, "StringSet cannot contain null values");

        $r2 = r1.<org.waveprotocol.wave.model.util.CollectionUtils$StringSetAdapter: java.util.Set backend>;

        $z0 = interfaceinvoke $r2.<java.util.Set: boolean contains(java.lang.Object)>(r0);

        return $z0;
    }

    public void remove(java.lang.String)
    {
        java.util.Set $r2;
        java.lang.String r0;
        org.waveprotocol.wave.model.util.CollectionUtils$StringSetAdapter r1;

        r1 := @this: org.waveprotocol.wave.model.util.CollectionUtils$StringSetAdapter;

        r0 := @parameter0: java.lang.String;

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r0, "StringSet cannot contain null values");

        $r2 = r1.<org.waveprotocol.wave.model.util.CollectionUtils$StringSetAdapter: java.util.Set backend>;

        interfaceinvoke $r2.<java.util.Set: boolean remove(java.lang.Object)>(r0);

        return;
    }

    public boolean isEmpty()
    {
        java.util.Set $r1;
        org.waveprotocol.wave.model.util.CollectionUtils$StringSetAdapter r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.util.CollectionUtils$StringSetAdapter;

        $r1 = r0.<org.waveprotocol.wave.model.util.CollectionUtils$StringSetAdapter: java.util.Set backend>;

        $z0 = interfaceinvoke $r1.<java.util.Set: boolean isEmpty()>();

        return $z0;
    }

    public void each(org.waveprotocol.wave.model.util.ReadableStringSet$Proc)
    {
        java.util.Iterator $r2;
        java.util.Set $r1;
        java.lang.Object $r3;
        org.waveprotocol.wave.model.util.CollectionUtils$StringSetAdapter r0;
        java.lang.String r4;
        org.waveprotocol.wave.model.util.ReadableStringSet$Proc r5;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.util.CollectionUtils$StringSetAdapter;

        r5 := @parameter0: org.waveprotocol.wave.model.util.ReadableStringSet$Proc;

        $r1 = r0.<org.waveprotocol.wave.model.util.CollectionUtils$StringSetAdapter: java.util.Set backend>;

        $r2 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.lang.String) $r3;

        interfaceinvoke r5.<org.waveprotocol.wave.model.util.ReadableStringSet$Proc: void apply(java.lang.String)>(r4);

        goto label1;

     label2:
        return;
    }

    public boolean isSubsetOf(java.util.Set)
    {
        java.util.Set r0, $r2;
        org.waveprotocol.wave.model.util.CollectionUtils$StringSetAdapter r1;
        boolean $z0;

        r1 := @this: org.waveprotocol.wave.model.util.CollectionUtils$StringSetAdapter;

        r0 := @parameter0: java.util.Set;

        $r2 = r1.<org.waveprotocol.wave.model.util.CollectionUtils$StringSetAdapter: java.util.Set backend>;

        $z0 = interfaceinvoke r0.<java.util.Set: boolean containsAll(java.util.Collection)>($r2);

        return $z0;
    }

    public boolean isSubsetOf(org.waveprotocol.wave.model.util.ReadableStringSet)
    {
        java.util.Iterator $r2;
        java.util.Set $r1;
        org.waveprotocol.wave.model.util.CollectionUtils$StringSetAdapter r0;
        org.waveprotocol.wave.model.util.ReadableStringSet r5;
        java.lang.Object $r3;
        java.lang.String r4;
        boolean $z0, $z1;

        r0 := @this: org.waveprotocol.wave.model.util.CollectionUtils$StringSetAdapter;

        r5 := @parameter0: org.waveprotocol.wave.model.util.ReadableStringSet;

        $r1 = r0.<org.waveprotocol.wave.model.util.CollectionUtils$StringSetAdapter: java.util.Set backend>;

        $r2 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.lang.String) $r3;

        $z1 = interfaceinvoke r5.<org.waveprotocol.wave.model.util.ReadableStringSet: boolean contains(java.lang.String)>(r4);

        if $z1 != 0 goto label2;

        return 0;

     label2:
        goto label1;

     label3:
        return 1;
    }

    public void addAll(org.waveprotocol.wave.model.util.ReadableStringSet)
    {
        org.waveprotocol.wave.model.util.ReadableStringSet r1;
        java.util.Set $r3, $r4;
        org.waveprotocol.wave.model.util.CollectionUtils$StringSetAdapter r0, $r2;

        r0 := @this: org.waveprotocol.wave.model.util.CollectionUtils$StringSetAdapter;

        r1 := @parameter0: org.waveprotocol.wave.model.util.ReadableStringSet;

        $r4 = r0.<org.waveprotocol.wave.model.util.CollectionUtils$StringSetAdapter: java.util.Set backend>;

        $r2 = (org.waveprotocol.wave.model.util.CollectionUtils$StringSetAdapter) r1;

        $r3 = $r2.<org.waveprotocol.wave.model.util.CollectionUtils$StringSetAdapter: java.util.Set backend>;

        interfaceinvoke $r4.<java.util.Set: boolean addAll(java.util.Collection)>($r3);

        return;
    }

    public void removeAll(org.waveprotocol.wave.model.util.ReadableStringSet)
    {
        org.waveprotocol.wave.model.util.ReadableStringSet r1;
        java.util.Set $r3, $r4;
        org.waveprotocol.wave.model.util.CollectionUtils$StringSetAdapter r0, $r2;

        r0 := @this: org.waveprotocol.wave.model.util.CollectionUtils$StringSetAdapter;

        r1 := @parameter0: org.waveprotocol.wave.model.util.ReadableStringSet;

        $r4 = r0.<org.waveprotocol.wave.model.util.CollectionUtils$StringSetAdapter: java.util.Set backend>;

        $r2 = (org.waveprotocol.wave.model.util.CollectionUtils$StringSetAdapter) r1;

        $r3 = $r2.<org.waveprotocol.wave.model.util.CollectionUtils$StringSetAdapter: java.util.Set backend>;

        interfaceinvoke $r4.<java.util.Set: boolean removeAll(java.util.Collection)>($r3);

        return;
    }

    public void filter(org.waveprotocol.wave.model.util.StringSet$StringPredicate)
    {
        java.util.Iterator $r2;
        java.util.Set $r1;
        org.waveprotocol.wave.model.util.CollectionUtils$StringSetAdapter r0;
        org.waveprotocol.wave.model.util.StringSet$StringPredicate r5;
        java.lang.Object $r3;
        java.lang.String r4;
        boolean $z0, $z1;

        r0 := @this: org.waveprotocol.wave.model.util.CollectionUtils$StringSetAdapter;

        r5 := @parameter0: org.waveprotocol.wave.model.util.StringSet$StringPredicate;

        $r1 = r0.<org.waveprotocol.wave.model.util.CollectionUtils$StringSetAdapter: java.util.Set backend>;

        $r2 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.lang.String) $r3;

        $z1 = interfaceinvoke r5.<org.waveprotocol.wave.model.util.StringSet$StringPredicate: boolean apply(java.lang.String)>(r4);

        if $z1 == 0 goto label2;

        goto label3;

     label2:
        interfaceinvoke $r2.<java.util.Iterator: void remove()>();

     label3:
        goto label1;

     label4:
        return;
    }

    public java.lang.String someElement()
    {
        java.util.Iterator $r2;
        java.util.Set $r1;
        java.lang.Object $r3;
        org.waveprotocol.wave.model.util.CollectionUtils$StringSetAdapter r0;
        java.lang.String $r4;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.util.CollectionUtils$StringSetAdapter;

        $z0 = virtualinvoke r0.<org.waveprotocol.wave.model.util.CollectionUtils$StringSetAdapter: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r4 = null;

        goto label2;

     label1:
        $r1 = r0.<org.waveprotocol.wave.model.util.CollectionUtils$StringSetAdapter: java.util.Set backend>;

        $r2 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>();

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (java.lang.String) $r3;

     label2:
        return $r4;
    }

    public java.lang.String toString()
    {
        java.util.Set $r1;
        org.waveprotocol.wave.model.util.CollectionUtils$StringSetAdapter r0;
        java.lang.String $r2;

        r0 := @this: org.waveprotocol.wave.model.util.CollectionUtils$StringSetAdapter;

        $r1 = r0.<org.waveprotocol.wave.model.util.CollectionUtils$StringSetAdapter: java.util.Set backend>;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        return $r2;
    }

    public int countEntries()
    {
        int $i0;
        java.util.Set $r1;
        org.waveprotocol.wave.model.util.CollectionUtils$StringSetAdapter r0;

        r0 := @this: org.waveprotocol.wave.model.util.CollectionUtils$StringSetAdapter;

        $r1 = r0.<org.waveprotocol.wave.model.util.CollectionUtils$StringSetAdapter: java.util.Set backend>;

        $i0 = interfaceinvoke $r1.<java.util.Set: int size()>();

        return $i0;
    }

    void <init>(java.util.Set, org.waveprotocol.wave.model.util.CollectionUtils$1)
    {
        org.waveprotocol.wave.model.util.CollectionUtils$1 r2;
        java.util.Set r1;
        org.waveprotocol.wave.model.util.CollectionUtils$StringSetAdapter r0;

        r0 := @this: org.waveprotocol.wave.model.util.CollectionUtils$StringSetAdapter;

        r1 := @parameter0: java.util.Set;

        r2 := @parameter1: org.waveprotocol.wave.model.util.CollectionUtils$1;

        specialinvoke r0.<org.waveprotocol.wave.model.util.CollectionUtils$StringSetAdapter: void <init>(java.util.Set)>(r1);

        return;
    }
}
