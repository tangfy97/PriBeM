public class org.apache.jena.riot.lang.LangTriG extends org.apache.jena.riot.lang.LangTurtleBase
{

    public void <init>(org.apache.jena.riot.tokens.Tokenizer, org.apache.jena.riot.system.ParserProfile, org.apache.jena.riot.system.StreamRDF)
    {
        org.apache.jena.riot.lang.LangTriG r0;
        org.apache.jena.riot.tokens.Tokenizer r1;
        org.apache.jena.riot.system.ParserProfile r2;
        org.apache.jena.riot.system.StreamRDF r3;

        r0 := @this: org.apache.jena.riot.lang.LangTriG;

        r1 := @parameter0: org.apache.jena.riot.tokens.Tokenizer;

        r2 := @parameter1: org.apache.jena.riot.system.ParserProfile;

        r3 := @parameter2: org.apache.jena.riot.system.StreamRDF;

        specialinvoke r0.<org.apache.jena.riot.lang.LangTurtleBase: void <init>(org.apache.jena.riot.tokens.Tokenizer,org.apache.jena.riot.system.ParserProfile,org.apache.jena.riot.system.StreamRDF)>(r1, r2, r3);

        return;
    }

    public org.apache.jena.riot.Lang getLang()
    {
        org.apache.jena.riot.lang.LangTriG r1;
        org.apache.jena.riot.Lang $r0;

        r1 := @this: org.apache.jena.riot.lang.LangTriG;

        $r0 = <org.apache.jena.riot.RDFLanguages: org.apache.jena.riot.Lang TRIG>;

        return $r0;
    }

    protected final void oneTopLevelElement()
    {
        org.apache.jena.riot.lang.LangTriG r0;

        r0 := @this: org.apache.jena.riot.lang.LangTriG;

        virtualinvoke r0.<org.apache.jena.riot.lang.LangTriG: void oneNamedGraphBlock2()>();

        return;
    }

    protected final void oneNamedGraphBlock2()
    {
        com.hp.hpl.jena.graph.Node $r5, $r9, r22;
        org.apache.jena.riot.lang.LangTriG r0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, z8, $z9, z10, z11, z12, z13;
        org.apache.jena.riot.system.ParserProfile $r8;
        java.lang.StringBuilder $r15, $r16, $r18, $r19;
        java.lang.Object[] $r4, $r7, $r11, $r13, $r21;
        long $l0, $l1;
        org.apache.jena.riot.tokens.Token $r1, r23;
        java.lang.String $r14, $r17, $r20;
        org.apache.jena.riot.tokens.TokenType $r2, $r3, $r6, $r10, $r12, $r24;

        r0 := @this: org.apache.jena.riot.lang.LangTriG;

        r22 = null;

        $r1 = virtualinvoke r0.<org.apache.jena.riot.lang.LangTriG: org.apache.jena.riot.tokens.Token peekToken()>();

        r23 = $r1;

        z8 = 0;

        z13 = 0;

        z12 = 0;

        z11 = 0;

        z10 = 0;

        $r2 = <org.apache.jena.riot.tokens.TokenType: org.apache.jena.riot.tokens.TokenType KEYWORD>;

        $z0 = virtualinvoke r0.<org.apache.jena.riot.lang.LangTriG: boolean lookingAt(org.apache.jena.riot.tokens.TokenType)>($r2);

        if $z0 == 0 goto label02;

        $r14 = virtualinvoke $r1.<org.apache.jena.riot.tokens.Token: java.lang.String getImage()>();

        $z7 = virtualinvoke $r14.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("GRAPH");

        if $z7 == 0 goto label01;

        virtualinvoke r0.<org.apache.jena.riot.lang.LangTriG: org.apache.jena.riot.tokens.Token nextToken()>();

        z8 = 1;

        z13 = 1;

        z12 = 1;

        z11 = 1;

        z10 = 1;

        r23 = virtualinvoke r0.<org.apache.jena.riot.lang.LangTriG: org.apache.jena.riot.tokens.Token peekToken()>();

        goto label02;

     label01:
        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Keyword \'");

        $r17 = virtualinvoke $r1.<org.apache.jena.riot.tokens.Token: java.lang.String getImage()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' not allowed here");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        $r21 = newarray (java.lang.Object)[0];

        virtualinvoke r0.<org.apache.jena.riot.lang.LangTriG: void exception(org.apache.jena.riot.tokens.Token,java.lang.String,java.lang.Object[])>($r1, $r20, $r21);

     label02:
        $r24 = <org.apache.jena.riot.tokens.TokenType: org.apache.jena.riot.tokens.TokenType LBRACKET>;

        $z9 = virtualinvoke r0.<org.apache.jena.riot.lang.LangTriG: boolean lookingAt(org.apache.jena.riot.tokens.TokenType)>($r24);

        if $z9 == 0 goto label09;

        virtualinvoke r0.<org.apache.jena.riot.lang.LangTriG: org.apache.jena.riot.tokens.Token nextToken()>();

        virtualinvoke r0.<org.apache.jena.riot.lang.LangTriG: org.apache.jena.riot.tokens.Token peekToken()>();

        $r8 = r0.<org.apache.jena.riot.lang.LangTriG: org.apache.jena.riot.system.ParserProfile profile>;

        $l0 = virtualinvoke $r1.<org.apache.jena.riot.tokens.Token: long getLine()>();

        $l1 = virtualinvoke $r1.<org.apache.jena.riot.tokens.Token: long getColumn()>();

        $r9 = interfaceinvoke $r8.<org.apache.jena.riot.system.ParserProfile: com.hp.hpl.jena.graph.Node createBlankNode(com.hp.hpl.jena.graph.Node,long,long)>(null, $l0, $l1);

        $r10 = <org.apache.jena.riot.tokens.TokenType: org.apache.jena.riot.tokens.TokenType RBRACKET>;

        $z4 = virtualinvoke r0.<org.apache.jena.riot.lang.LangTriG: boolean lookingAt(org.apache.jena.riot.tokens.TokenType)>($r10);

        if $z4 == 0 goto label05;

        virtualinvoke r0.<org.apache.jena.riot.lang.LangTriG: org.apache.jena.riot.tokens.Token nextToken()>();

        $r12 = <org.apache.jena.riot.tokens.TokenType: org.apache.jena.riot.tokens.TokenType LBRACE>;

        $z6 = virtualinvoke r0.<org.apache.jena.riot.lang.LangTriG: boolean lookingAt(org.apache.jena.riot.tokens.TokenType)>($r12);

        if $z6 == 0 goto label03;

        r22 = $r9;

        goto label08;

     label03:
        if z10 == 0 goto label04;

        $r13 = newarray (java.lang.Object)[0];

        virtualinvoke r0.<org.apache.jena.riot.lang.LangTriG: void exception(org.apache.jena.riot.tokens.Token,java.lang.String,java.lang.Object[])>($r1, "Keyword \'GRAPH\' must start a named graph", $r13);

     label04:
        virtualinvoke r0.<org.apache.jena.riot.lang.LangTriG: void turtle(com.hp.hpl.jena.graph.Node)>($r9);

        return;

     label05:
        if z13 == 0 goto label06;

        $r11 = newarray (java.lang.Object)[0];

        virtualinvoke r0.<org.apache.jena.riot.lang.LangTriG: void exception(org.apache.jena.riot.tokens.Token,java.lang.String,java.lang.Object[])>($r1, "Keyword \'GRAPH\' must start a named graph", $r11);

     label06:
        virtualinvoke r0.<org.apache.jena.riot.lang.LangTriG: void triplesBlankNode(com.hp.hpl.jena.graph.Node)>($r9);

        $z5 = virtualinvoke r0.<org.apache.jena.riot.lang.LangTriG: boolean peekPredicate()>();

        if $z5 == 0 goto label07;

        virtualinvoke r0.<org.apache.jena.riot.lang.LangTriG: void predicateObjectList(com.hp.hpl.jena.graph.Node)>($r9);

     label07:
        virtualinvoke r0.<org.apache.jena.riot.lang.LangTriG: void expectEndOfTriplesTurtle()>();

        return;

     label08:
        goto label14;

     label09:
        $z1 = virtualinvoke r23.<org.apache.jena.riot.tokens.Token: boolean isNode()>();

        if $z1 == 0 goto label13;

        $r5 = virtualinvoke r0.<org.apache.jena.riot.lang.LangTriG: com.hp.hpl.jena.graph.Node node()>();

        virtualinvoke r0.<org.apache.jena.riot.lang.LangTriG: org.apache.jena.riot.tokens.Token nextToken()>();

        virtualinvoke r0.<org.apache.jena.riot.lang.LangTriG: org.apache.jena.riot.tokens.Token peekToken()>();

        $r6 = <org.apache.jena.riot.tokens.TokenType: org.apache.jena.riot.tokens.TokenType LBRACE>;

        $z3 = virtualinvoke r0.<org.apache.jena.riot.lang.LangTriG: boolean lookingAt(org.apache.jena.riot.tokens.TokenType)>($r6);

        if $z3 == 0 goto label10;

        r22 = $r5;

        goto label12;

     label10:
        if z11 == 0 goto label11;

        $r7 = newarray (java.lang.Object)[0];

        virtualinvoke r0.<org.apache.jena.riot.lang.LangTriG: void exception(org.apache.jena.riot.tokens.Token,java.lang.String,java.lang.Object[])>($r1, "Keyword \'GRAPH\' must start a named graph", $r7);

     label11:
        virtualinvoke r0.<org.apache.jena.riot.lang.LangTriG: void turtle(com.hp.hpl.jena.graph.Node)>($r5);

        return;

     label12:
        goto label14;

     label13:
        $r3 = <org.apache.jena.riot.tokens.TokenType: org.apache.jena.riot.tokens.TokenType LPAREN>;

        $z2 = virtualinvoke r0.<org.apache.jena.riot.lang.LangTriG: boolean lookingAt(org.apache.jena.riot.tokens.TokenType)>($r3);

        if $z2 == 0 goto label14;

        virtualinvoke r0.<org.apache.jena.riot.lang.LangTriG: void turtle()>();

        return;

     label14:
        if z12 == 0 goto label15;

        if r22 != null goto label15;

        $r4 = newarray (java.lang.Object)[0];

        virtualinvoke r0.<org.apache.jena.riot.lang.LangTriG: void exception(org.apache.jena.riot.tokens.Token,java.lang.String,java.lang.Object[])>($r1, "Keyword \'GRAPH\' must be followed by a graph name", $r4);

     label15:
        specialinvoke r0.<org.apache.jena.riot.lang.LangTriG: void bracedGraph(org.apache.jena.riot.tokens.Token,com.hp.hpl.jena.graph.Node)>($r1, r22);

        return;
    }

    protected final void turtle(com.hp.hpl.jena.graph.Node)
    {
        org.apache.jena.riot.lang.LangTriG r0;
        com.hp.hpl.jena.graph.Node r1;

        r0 := @this: org.apache.jena.riot.lang.LangTriG;

        r1 := @parameter0: com.hp.hpl.jena.graph.Node;

        virtualinvoke r0.<org.apache.jena.riot.lang.LangTriG: void predicateObjectList(com.hp.hpl.jena.graph.Node)>(r1);

        virtualinvoke r0.<org.apache.jena.riot.lang.LangTriG: void expectEndOfTriplesTurtle()>();

        return;
    }

    protected final void turtle()
    {
        org.apache.jena.riot.lang.LangTriG r0;

        r0 := @this: org.apache.jena.riot.lang.LangTriG;

        virtualinvoke r0.<org.apache.jena.riot.lang.LangTriG: void triplesSameSubject()>();

        return;
    }

    protected final void oneNamedGraphBlock()
    {
        java.lang.Object[] $r5;
        org.apache.jena.riot.system.ParserProfile $r4;
        long $l0, $l1;
        com.hp.hpl.jena.graph.Node r6;
        org.apache.jena.riot.tokens.Token $r1;
        org.apache.jena.riot.lang.LangTriG r0;
        org.apache.jena.riot.tokens.TokenType $r2, $r3;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.jena.riot.lang.LangTriG;

        r6 = null;

        $r1 = virtualinvoke r0.<org.apache.jena.riot.lang.LangTriG: org.apache.jena.riot.tokens.Token peekToken()>();

        $r2 = <org.apache.jena.riot.tokens.TokenType: org.apache.jena.riot.tokens.TokenType LBRACKET>;

        $z0 = virtualinvoke r0.<org.apache.jena.riot.lang.LangTriG: boolean lookingAt(org.apache.jena.riot.tokens.TokenType)>($r2);

        if $z0 == 0 goto label2;

        virtualinvoke r0.<org.apache.jena.riot.lang.LangTriG: org.apache.jena.riot.tokens.Token nextToken()>();

        virtualinvoke r0.<org.apache.jena.riot.lang.LangTriG: org.apache.jena.riot.tokens.Token peekToken()>();

        $r3 = <org.apache.jena.riot.tokens.TokenType: org.apache.jena.riot.tokens.TokenType RBRACKET>;

        $z2 = virtualinvoke r0.<org.apache.jena.riot.lang.LangTriG: boolean lookingAt(org.apache.jena.riot.tokens.TokenType)>($r3);

        if $z2 == 0 goto label1;

        $r5 = newarray (java.lang.Object)[0];

        virtualinvoke r0.<org.apache.jena.riot.lang.LangTriG: void exception(org.apache.jena.riot.tokens.Token,java.lang.String,java.lang.Object[])>($r1, "Broken term: [ not followed by ]", $r5);

     label1:
        $r4 = r0.<org.apache.jena.riot.lang.LangTriG: org.apache.jena.riot.system.ParserProfile profile>;

        $l0 = virtualinvoke $r1.<org.apache.jena.riot.tokens.Token: long getLine()>();

        $l1 = virtualinvoke $r1.<org.apache.jena.riot.tokens.Token: long getColumn()>();

        r6 = interfaceinvoke $r4.<org.apache.jena.riot.system.ParserProfile: com.hp.hpl.jena.graph.Node createBlankNode(com.hp.hpl.jena.graph.Node,long,long)>(null, $l0, $l1);

        virtualinvoke r0.<org.apache.jena.riot.lang.LangTriG: org.apache.jena.riot.tokens.Token nextToken()>();

        goto label3;

     label2:
        $z1 = virtualinvoke $r1.<org.apache.jena.riot.tokens.Token: boolean isNode()>();

        if $z1 == 0 goto label3;

        r6 = virtualinvoke r0.<org.apache.jena.riot.lang.LangTriG: com.hp.hpl.jena.graph.Node node()>();

        virtualinvoke r0.<org.apache.jena.riot.lang.LangTriG: org.apache.jena.riot.tokens.Token nextToken()>();

     label3:
        specialinvoke r0.<org.apache.jena.riot.lang.LangTriG: void bracedGraph(org.apache.jena.riot.tokens.Token,com.hp.hpl.jena.graph.Node)>($r1, r6);

        return;
    }

    private void bracedGraph(org.apache.jena.riot.tokens.Token, com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.graph.Node r0, $r2, $r27;
        org.apache.jena.riot.lang.LangTriG r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        org.apache.jena.riot.system.ParserProfile $r5, $r10;
        java.lang.StringBuilder $r11, $r12, $r13, $r17, $r18, $r19;
        java.lang.Object[] $r7, $r8, $r15, $r21;
        org.apache.jena.riot.tokens.Token $r3, $r9, r16, $r22, r23;
        java.lang.String $r14, $r20;
        org.apache.jena.riot.tokens.TokenType $r4, $r6, $r24, $r25, $r26;

        r1 := @this: org.apache.jena.riot.lang.LangTriG;

        r16 := @parameter0: org.apache.jena.riot.tokens.Token;

        r0 := @parameter1: com.hp.hpl.jena.graph.Node;

        if r0 == null goto label03;

        $z4 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: boolean isURI()>();

        if $z4 != 0 goto label01;

        $z5 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: boolean isBlank()>();

        if $z5 == 0 goto label02;

     label01:
        virtualinvoke r1.<org.apache.jena.riot.lang.LangTriG: void setCurrentGraph(com.hp.hpl.jena.graph.Node)>(r0);

        goto label04;

     label02:
        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not a legal graph name: ");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        $r21 = newarray (java.lang.Object)[0];

        virtualinvoke r1.<org.apache.jena.riot.lang.LangTriG: void exception(org.apache.jena.riot.tokens.Token,java.lang.String,java.lang.Object[])>(r16, $r20, $r21);

        goto label04;

     label03:
        $r2 = <com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node tripleInQuad>;

        virtualinvoke r1.<org.apache.jena.riot.lang.LangTriG: void setCurrentGraph(com.hp.hpl.jena.graph.Node)>($r2);

     label04:
        $r22 = virtualinvoke r1.<org.apache.jena.riot.lang.LangTriG: org.apache.jena.riot.tokens.Token peekToken()>();

        r23 = $r22;

        $r24 = <org.apache.jena.riot.tokens.TokenType: org.apache.jena.riot.tokens.TokenType EQUALS>;

        $z6 = virtualinvoke r1.<org.apache.jena.riot.lang.LangTriG: boolean lookingAt(org.apache.jena.riot.tokens.TokenType)>($r24);

        if $z6 == 0 goto label06;

        $r10 = r1.<org.apache.jena.riot.lang.LangTriG: org.apache.jena.riot.system.ParserProfile profile>;

        $z3 = interfaceinvoke $r10.<org.apache.jena.riot.system.ParserProfile: boolean isStrictMode()>();

        if $z3 == 0 goto label05;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Use of = {} is not part of standard TriG: ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        $r15 = newarray (java.lang.Object)[0];

        virtualinvoke r1.<org.apache.jena.riot.lang.LangTriG: void exception(org.apache.jena.riot.tokens.Token,java.lang.String,java.lang.Object[])>($r22, $r14, $r15);

     label05:
        virtualinvoke r1.<org.apache.jena.riot.lang.LangTriG: org.apache.jena.riot.tokens.Token nextToken()>();

        r23 = virtualinvoke r1.<org.apache.jena.riot.lang.LangTriG: org.apache.jena.riot.tokens.Token peekToken()>();

     label06:
        $r25 = <org.apache.jena.riot.tokens.TokenType: org.apache.jena.riot.tokens.TokenType LBRACE>;

        $z7 = virtualinvoke r1.<org.apache.jena.riot.lang.LangTriG: boolean lookingAt(org.apache.jena.riot.tokens.TokenType)>($r25);

        if $z7 != 0 goto label07;

        $r8 = newarray (java.lang.Object)[1];

        $r9 = virtualinvoke r1.<org.apache.jena.riot.lang.LangTriG: org.apache.jena.riot.tokens.Token peekToken()>();

        $r8[0] = $r9;

        virtualinvoke r1.<org.apache.jena.riot.lang.LangTriG: void exception(org.apache.jena.riot.tokens.Token,java.lang.String,java.lang.Object[])>(r23, "Expected start of graph: got %s", $r8);

     label07:
        virtualinvoke r1.<org.apache.jena.riot.lang.LangTriG: org.apache.jena.riot.tokens.Token nextToken()>();

     label08:
        virtualinvoke r1.<org.apache.jena.riot.lang.LangTriG: org.apache.jena.riot.tokens.Token peekToken()>();

        $r26 = <org.apache.jena.riot.tokens.TokenType: org.apache.jena.riot.tokens.TokenType RBRACE>;

        $z8 = virtualinvoke r1.<org.apache.jena.riot.lang.LangTriG: boolean lookingAt(org.apache.jena.riot.tokens.TokenType)>($r26);

        if $z8 == 0 goto label09;

        goto label10;

     label09:
        virtualinvoke r1.<org.apache.jena.riot.lang.LangTriG: void triplesSameSubject()>();

        goto label08;

     label10:
        $r3 = virtualinvoke r1.<org.apache.jena.riot.lang.LangTriG: org.apache.jena.riot.tokens.Token nextToken()>();

        $r4 = <org.apache.jena.riot.tokens.TokenType: org.apache.jena.riot.tokens.TokenType RBRACE>;

        $z0 = virtualinvoke r1.<org.apache.jena.riot.lang.LangTriG: boolean lookingAt(org.apache.jena.riot.tokens.TokenType)>($r4);

        if $z0 == 0 goto label11;

        $r7 = newarray (java.lang.Object)[1];

        $r7[0] = $r3;

        virtualinvoke r1.<org.apache.jena.riot.lang.LangTriG: void exception(org.apache.jena.riot.tokens.Token,java.lang.String,java.lang.Object[])>($r3, "Expected end of graph: got %s", $r7);

     label11:
        $r5 = r1.<org.apache.jena.riot.lang.LangTriG: org.apache.jena.riot.system.ParserProfile profile>;

        $z1 = interfaceinvoke $r5.<org.apache.jena.riot.system.ParserProfile: boolean isStrictMode()>();

        if $z1 != 0 goto label12;

        virtualinvoke r1.<org.apache.jena.riot.lang.LangTriG: org.apache.jena.riot.tokens.Token peekToken()>();

        $r6 = <org.apache.jena.riot.tokens.TokenType: org.apache.jena.riot.tokens.TokenType DOT>;

        $z2 = virtualinvoke r1.<org.apache.jena.riot.lang.LangTriG: boolean lookingAt(org.apache.jena.riot.tokens.TokenType)>($r6);

        if $z2 == 0 goto label12;

        virtualinvoke r1.<org.apache.jena.riot.lang.LangTriG: org.apache.jena.riot.tokens.Token nextToken()>();

     label12:
        $r27 = <com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node tripleInQuad>;

        virtualinvoke r1.<org.apache.jena.riot.lang.LangTriG: void setCurrentGraph(com.hp.hpl.jena.graph.Node)>($r27);

        return;
    }

    protected void expectEndOfTriples()
    {
        org.apache.jena.riot.lang.LangTriG r0;

        r0 := @this: org.apache.jena.riot.lang.LangTriG;

        virtualinvoke r0.<org.apache.jena.riot.lang.LangTriG: void expectEndOfTriplesBraceGraph()>();

        return;
    }

    protected void expectEndOfTriplesBraceGraph()
    {
        java.lang.Object[] $r4;
        org.apache.jena.riot.tokens.Token $r3, $r5;
        org.apache.jena.riot.lang.LangTriG r0;
        org.apache.jena.riot.tokens.TokenType $r1, $r2;
        boolean $z0, $z1;

        r0 := @this: org.apache.jena.riot.lang.LangTriG;

        $r1 = <org.apache.jena.riot.tokens.TokenType: org.apache.jena.riot.tokens.TokenType DOT>;

        $z0 = virtualinvoke r0.<org.apache.jena.riot.lang.LangTriG: boolean lookingAt(org.apache.jena.riot.tokens.TokenType)>($r1);

        if $z0 == 0 goto label1;

        virtualinvoke r0.<org.apache.jena.riot.lang.LangTriG: org.apache.jena.riot.tokens.Token nextToken()>();

        return;

     label1:
        $r2 = <org.apache.jena.riot.tokens.TokenType: org.apache.jena.riot.tokens.TokenType RBRACE>;

        $z1 = virtualinvoke r0.<org.apache.jena.riot.lang.LangTriG: boolean lookingAt(org.apache.jena.riot.tokens.TokenType)>($r2);

        if $z1 == 0 goto label2;

        return;

     label2:
        $r3 = virtualinvoke r0.<org.apache.jena.riot.lang.LangTriG: org.apache.jena.riot.tokens.Token peekToken()>();

        $r4 = newarray (java.lang.Object)[1];

        $r5 = virtualinvoke r0.<org.apache.jena.riot.lang.LangTriG: org.apache.jena.riot.tokens.Token peekToken()>();

        $r4[0] = $r5;

        virtualinvoke r0.<org.apache.jena.riot.lang.LangTriG: void exception(org.apache.jena.riot.tokens.Token,java.lang.String,java.lang.Object[])>($r3, "Triples not terminated properly: expected \'.\', \'}\' or EOF: got %s", $r4);

        return;
    }

    protected void emit(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node)
    {
        org.apache.jena.riot.system.ParserProfile $r6;
        long $l0, $l1;
        org.apache.jena.riot.system.StreamRDF $r8;
        com.hp.hpl.jena.graph.Node $r1, $r2, r3, r4, r5, r9;
        com.hp.hpl.jena.sparql.core.Quad $r7;
        org.apache.jena.riot.lang.LangTriG r0;

        r0 := @this: org.apache.jena.riot.lang.LangTriG;

        r3 := @parameter0: com.hp.hpl.jena.graph.Node;

        r4 := @parameter1: com.hp.hpl.jena.graph.Node;

        r5 := @parameter2: com.hp.hpl.jena.graph.Node;

        $r1 = virtualinvoke r0.<org.apache.jena.riot.lang.LangTriG: com.hp.hpl.jena.graph.Node getCurrentGraph()>();

        r9 = $r1;

        $r2 = <com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node defaultGraphNodeGenerated>;

        if $r1 != $r2 goto label1;

        r9 = <com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node tripleInQuad>;

     label1:
        $r6 = r0.<org.apache.jena.riot.lang.LangTriG: org.apache.jena.riot.system.ParserProfile profile>;

        $l1 = r0.<org.apache.jena.riot.lang.LangTriG: long currLine>;

        $l0 = r0.<org.apache.jena.riot.lang.LangTriG: long currCol>;

        $r7 = interfaceinvoke $r6.<org.apache.jena.riot.system.ParserProfile: com.hp.hpl.jena.sparql.core.Quad createQuad(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,long,long)>(r9, r3, r4, r5, $l1, $l0);

        $r8 = r0.<org.apache.jena.riot.lang.LangTriG: org.apache.jena.riot.system.StreamRDF dest>;

        interfaceinvoke $r8.<org.apache.jena.riot.system.StreamRDF: void quad(com.hp.hpl.jena.sparql.core.Quad)>($r7);

        return;
    }
}
