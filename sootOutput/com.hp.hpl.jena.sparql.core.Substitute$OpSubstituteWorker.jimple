class com.hp.hpl.jena.sparql.core.Substitute$OpSubstituteWorker extends com.hp.hpl.jena.sparql.algebra.TransformCopy
{
    private com.hp.hpl.jena.sparql.engine.binding.Binding binding;

    public void <init>(com.hp.hpl.jena.sparql.engine.binding.Binding)
    {
        com.hp.hpl.jena.sparql.engine.binding.Binding r1;
        com.hp.hpl.jena.sparql.core.Substitute$OpSubstituteWorker r0;

        r0 := @this: com.hp.hpl.jena.sparql.core.Substitute$OpSubstituteWorker;

        r1 := @parameter0: com.hp.hpl.jena.sparql.engine.binding.Binding;

        specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.TransformCopy: void <init>(boolean)>(1);

        r0.<com.hp.hpl.jena.sparql.core.Substitute$OpSubstituteWorker: com.hp.hpl.jena.sparql.engine.binding.Binding binding> = r1;

        return;
    }

    public com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpBGP)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpBGP r0, $r5;
        com.hp.hpl.jena.sparql.engine.binding.Binding $r3;
        com.hp.hpl.jena.sparql.core.BasicPattern $r1, $r4;
        com.hp.hpl.jena.sparql.core.Substitute$OpSubstituteWorker r2;

        r2 := @this: com.hp.hpl.jena.sparql.core.Substitute$OpSubstituteWorker;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpBGP;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpBGP: com.hp.hpl.jena.sparql.core.BasicPattern getPattern()>();

        $r3 = r2.<com.hp.hpl.jena.sparql.core.Substitute$OpSubstituteWorker: com.hp.hpl.jena.sparql.engine.binding.Binding binding>;

        $r4 = staticinvoke <com.hp.hpl.jena.sparql.core.Substitute: com.hp.hpl.jena.sparql.core.BasicPattern substitute(com.hp.hpl.jena.sparql.core.BasicPattern,com.hp.hpl.jena.sparql.engine.binding.Binding)>($r1, $r3);

        $r5 = new com.hp.hpl.jena.sparql.algebra.op.OpBGP;

        specialinvoke $r5.<com.hp.hpl.jena.sparql.algebra.op.OpBGP: void <init>(com.hp.hpl.jena.sparql.core.BasicPattern)>($r4);

        return $r5;
    }

    public com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern)
    {
        com.hp.hpl.jena.graph.Node $r1, $r4, $r11, $r13, $r14, $r16, $r17, $r19;
        boolean $z0;
        java.util.Iterator $r7;
        com.hp.hpl.jena.sparql.core.BasicPattern $r5, $r6;
        com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern r0, $r8;
        com.hp.hpl.jena.graph.Triple r10, $r20;
        com.hp.hpl.jena.sparql.engine.binding.Binding $r3, $r12, $r15, $r18;
        java.lang.Object $r9;
        com.hp.hpl.jena.sparql.core.Substitute$OpSubstituteWorker r2;

        r2 := @this: com.hp.hpl.jena.sparql.core.Substitute$OpSubstituteWorker;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern: com.hp.hpl.jena.graph.Node getGraphNode()>();

        $r3 = r2.<com.hp.hpl.jena.sparql.core.Substitute$OpSubstituteWorker: com.hp.hpl.jena.sparql.engine.binding.Binding binding>;

        $r4 = staticinvoke <com.hp.hpl.jena.sparql.core.Substitute: com.hp.hpl.jena.graph.Node substitute(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.engine.binding.Binding)>($r1, $r3);

        $r5 = new com.hp.hpl.jena.sparql.core.BasicPattern;

        specialinvoke $r5.<com.hp.hpl.jena.sparql.core.BasicPattern: void <init>()>();

        $r6 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern: com.hp.hpl.jena.sparql.core.BasicPattern getBasicPattern()>();

        $r7 = virtualinvoke $r6.<com.hp.hpl.jena.sparql.core.BasicPattern: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r9 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r10 = (com.hp.hpl.jena.graph.Triple) $r9;

        $r11 = virtualinvoke r10.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getSubject()>();

        $r12 = r2.<com.hp.hpl.jena.sparql.core.Substitute$OpSubstituteWorker: com.hp.hpl.jena.sparql.engine.binding.Binding binding>;

        $r13 = staticinvoke <com.hp.hpl.jena.sparql.core.Substitute: com.hp.hpl.jena.graph.Node substitute(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.engine.binding.Binding)>($r11, $r12);

        $r14 = virtualinvoke r10.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getPredicate()>();

        $r15 = r2.<com.hp.hpl.jena.sparql.core.Substitute$OpSubstituteWorker: com.hp.hpl.jena.sparql.engine.binding.Binding binding>;

        $r16 = staticinvoke <com.hp.hpl.jena.sparql.core.Substitute: com.hp.hpl.jena.graph.Node substitute(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.engine.binding.Binding)>($r14, $r15);

        $r17 = virtualinvoke r10.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getObject()>();

        $r18 = r2.<com.hp.hpl.jena.sparql.core.Substitute$OpSubstituteWorker: com.hp.hpl.jena.sparql.engine.binding.Binding binding>;

        $r19 = staticinvoke <com.hp.hpl.jena.sparql.core.Substitute: com.hp.hpl.jena.graph.Node substitute(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.engine.binding.Binding)>($r17, $r18);

        $r20 = new com.hp.hpl.jena.graph.Triple;

        specialinvoke $r20.<com.hp.hpl.jena.graph.Triple: void <init>(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r13, $r16, $r19);

        virtualinvoke $r5.<com.hp.hpl.jena.sparql.core.BasicPattern: void add(com.hp.hpl.jena.graph.Triple)>($r20);

        goto label1;

     label2:
        $r8 = new com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern;

        specialinvoke $r8.<com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern: void <init>(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.core.BasicPattern)>($r4, $r5);

        return $r8;
    }

    public com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpPath)
    {
        com.hp.hpl.jena.sparql.engine.binding.Binding $r4;
        com.hp.hpl.jena.sparql.algebra.op.OpPath $r0, r1;
        com.hp.hpl.jena.sparql.core.TriplePath $r2, $r5;
        com.hp.hpl.jena.sparql.core.Substitute$OpSubstituteWorker r3;

        r3 := @this: com.hp.hpl.jena.sparql.core.Substitute$OpSubstituteWorker;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpPath;

        $r0 = new com.hp.hpl.jena.sparql.algebra.op.OpPath;

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpPath: com.hp.hpl.jena.sparql.core.TriplePath getTriplePath()>();

        $r4 = r3.<com.hp.hpl.jena.sparql.core.Substitute$OpSubstituteWorker: com.hp.hpl.jena.sparql.engine.binding.Binding binding>;

        $r5 = staticinvoke <com.hp.hpl.jena.sparql.core.Substitute: com.hp.hpl.jena.sparql.core.TriplePath substitute(com.hp.hpl.jena.sparql.core.TriplePath,com.hp.hpl.jena.sparql.engine.binding.Binding)>($r2, $r4);

        specialinvoke $r0.<com.hp.hpl.jena.sparql.algebra.op.OpPath: void <init>(com.hp.hpl.jena.sparql.core.TriplePath)>($r5);

        return $r0;
    }

    public com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpPropFunc, com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpPropFunc r0, $r11;
        com.hp.hpl.jena.graph.Node $r12;
        com.hp.hpl.jena.sparql.pfunction.PropFuncArg $r1, $r2, $r5, $r7;
        com.hp.hpl.jena.sparql.engine.binding.Binding $r4, $r6;
        com.hp.hpl.jena.sparql.core.Substitute$OpSubstituteWorker r3;
        com.hp.hpl.jena.sparql.algebra.Op r8, $r9, $r10;

        r3 := @this: com.hp.hpl.jena.sparql.core.Substitute$OpSubstituteWorker;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpPropFunc;

        r8 := @parameter1: com.hp.hpl.jena.sparql.algebra.Op;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpPropFunc: com.hp.hpl.jena.sparql.pfunction.PropFuncArg getSubjectArgs()>();

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpPropFunc: com.hp.hpl.jena.sparql.pfunction.PropFuncArg getObjectArgs()>();

        $r4 = r3.<com.hp.hpl.jena.sparql.core.Substitute$OpSubstituteWorker: com.hp.hpl.jena.sparql.engine.binding.Binding binding>;

        $r5 = staticinvoke <com.hp.hpl.jena.sparql.core.Substitute: com.hp.hpl.jena.sparql.pfunction.PropFuncArg substitute(com.hp.hpl.jena.sparql.pfunction.PropFuncArg,com.hp.hpl.jena.sparql.engine.binding.Binding)>($r1, $r4);

        $r6 = r3.<com.hp.hpl.jena.sparql.core.Substitute$OpSubstituteWorker: com.hp.hpl.jena.sparql.engine.binding.Binding binding>;

        $r7 = staticinvoke <com.hp.hpl.jena.sparql.core.Substitute: com.hp.hpl.jena.sparql.pfunction.PropFuncArg substitute(com.hp.hpl.jena.sparql.pfunction.PropFuncArg,com.hp.hpl.jena.sparql.engine.binding.Binding)>($r2, $r6);

        if $r5 != $r1 goto label1;

        if $r7 != $r2 goto label1;

        $r9 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpPropFunc: com.hp.hpl.jena.sparql.algebra.Op getSubOp()>();

        if $r9 != r8 goto label1;

        $r10 = specialinvoke r3.<com.hp.hpl.jena.sparql.algebra.TransformCopy: com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpPropFunc,com.hp.hpl.jena.sparql.algebra.Op)>(r0, r8);

        return $r10;

     label1:
        $r11 = new com.hp.hpl.jena.sparql.algebra.op.OpPropFunc;

        $r12 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpPropFunc: com.hp.hpl.jena.graph.Node getProperty()>();

        specialinvoke $r11.<com.hp.hpl.jena.sparql.algebra.op.OpPropFunc: void <init>(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.pfunction.PropFuncArg,com.hp.hpl.jena.sparql.pfunction.PropFuncArg,com.hp.hpl.jena.sparql.algebra.Op)>($r12, $r5, $r7, r8);

        return $r11;
    }

    public com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpFilter, com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpFilter r0;
        com.hp.hpl.jena.sparql.engine.binding.Binding $r3;
        com.hp.hpl.jena.sparql.expr.ExprList $r1, $r4, $r5;
        com.hp.hpl.jena.sparql.core.Substitute$OpSubstituteWorker r2;
        com.hp.hpl.jena.sparql.algebra.Op r6, $r7;

        r2 := @this: com.hp.hpl.jena.sparql.core.Substitute$OpSubstituteWorker;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpFilter;

        r6 := @parameter1: com.hp.hpl.jena.sparql.algebra.Op;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpFilter: com.hp.hpl.jena.sparql.expr.ExprList getExprs()>();

        $r3 = r2.<com.hp.hpl.jena.sparql.core.Substitute$OpSubstituteWorker: com.hp.hpl.jena.sparql.engine.binding.Binding binding>;

        $r4 = virtualinvoke $r1.<com.hp.hpl.jena.sparql.expr.ExprList: com.hp.hpl.jena.sparql.expr.ExprList copySubstitute(com.hp.hpl.jena.sparql.engine.binding.Binding)>($r3);

        $r5 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpFilter: com.hp.hpl.jena.sparql.expr.ExprList getExprs()>();

        if $r4 != $r5 goto label1;

        return r0;

     label1:
        $r7 = staticinvoke <com.hp.hpl.jena.sparql.algebra.op.OpFilter: com.hp.hpl.jena.sparql.algebra.Op filter(com.hp.hpl.jena.sparql.expr.ExprList,com.hp.hpl.jena.sparql.algebra.Op)>($r4, r6);

        return $r7;
    }

    public com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpAssign, com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.core.VarExprList $r2, $r3;
        com.hp.hpl.jena.sparql.core.Substitute$OpSubstituteWorker r0;
        com.hp.hpl.jena.sparql.algebra.op.OpAssign r1;
        com.hp.hpl.jena.sparql.algebra.Op r4, $r5;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.core.Substitute$OpSubstituteWorker;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpAssign;

        r4 := @parameter1: com.hp.hpl.jena.sparql.algebra.Op;

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpAssign: com.hp.hpl.jena.sparql.core.VarExprList getVarExprList()>();

        $r3 = specialinvoke r0.<com.hp.hpl.jena.sparql.core.Substitute$OpSubstituteWorker: com.hp.hpl.jena.sparql.core.VarExprList transformVarExprList(com.hp.hpl.jena.sparql.core.VarExprList)>($r2);

        $z0 = virtualinvoke $r3.<com.hp.hpl.jena.sparql.core.VarExprList: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return r4;

     label1:
        $r5 = staticinvoke <com.hp.hpl.jena.sparql.algebra.op.OpAssign: com.hp.hpl.jena.sparql.algebra.Op assign(com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.core.VarExprList)>(r4, $r3);

        return $r5;
    }

    public com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpExtend, com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpExtend r1;
        com.hp.hpl.jena.sparql.core.VarExprList $r2, $r3;
        com.hp.hpl.jena.sparql.core.Substitute$OpSubstituteWorker r0;
        com.hp.hpl.jena.sparql.algebra.Op r4, $r5;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.core.Substitute$OpSubstituteWorker;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpExtend;

        r4 := @parameter1: com.hp.hpl.jena.sparql.algebra.Op;

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpExtend: com.hp.hpl.jena.sparql.core.VarExprList getVarExprList()>();

        $r3 = specialinvoke r0.<com.hp.hpl.jena.sparql.core.Substitute$OpSubstituteWorker: com.hp.hpl.jena.sparql.core.VarExprList transformVarExprList(com.hp.hpl.jena.sparql.core.VarExprList)>($r2);

        $z0 = virtualinvoke $r3.<com.hp.hpl.jena.sparql.core.VarExprList: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return r4;

     label1:
        $r5 = staticinvoke <com.hp.hpl.jena.sparql.algebra.op.OpExtend: com.hp.hpl.jena.sparql.algebra.Op extend(com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.core.VarExprList)>(r4, $r3);

        return $r5;
    }

    private com.hp.hpl.jena.sparql.core.VarExprList transformVarExprList(com.hp.hpl.jena.sparql.core.VarExprList)
    {
        java.util.Iterator $r3;
        com.hp.hpl.jena.sparql.core.Var r5;
        java.util.List $r2;
        com.hp.hpl.jena.sparql.engine.binding.Binding $r8;
        com.hp.hpl.jena.sparql.expr.Expr $r6, $r9;
        com.hp.hpl.jena.sparql.core.VarExprList $r0, r1;
        java.lang.Object $r4;
        com.hp.hpl.jena.sparql.core.Substitute$OpSubstituteWorker r7;
        boolean $z0;

        r7 := @this: com.hp.hpl.jena.sparql.core.Substitute$OpSubstituteWorker;

        r1 := @parameter0: com.hp.hpl.jena.sparql.core.VarExprList;

        $r0 = new com.hp.hpl.jena.sparql.core.VarExprList;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.core.VarExprList: void <init>()>();

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.sparql.core.VarExprList: java.util.List getVars()>();

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (com.hp.hpl.jena.sparql.core.Var) $r4;

        $r6 = virtualinvoke r1.<com.hp.hpl.jena.sparql.core.VarExprList: com.hp.hpl.jena.sparql.expr.Expr getExpr(com.hp.hpl.jena.sparql.core.Var)>(r5);

        $r8 = r7.<com.hp.hpl.jena.sparql.core.Substitute$OpSubstituteWorker: com.hp.hpl.jena.sparql.engine.binding.Binding binding>;

        $r9 = interfaceinvoke $r6.<com.hp.hpl.jena.sparql.expr.Expr: com.hp.hpl.jena.sparql.expr.Expr copySubstitute(com.hp.hpl.jena.sparql.engine.binding.Binding)>($r8);

        virtualinvoke $r0.<com.hp.hpl.jena.sparql.core.VarExprList: void add(com.hp.hpl.jena.sparql.core.Var,com.hp.hpl.jena.sparql.expr.Expr)>(r5, $r9);

        goto label1;

     label2:
        return $r0;
    }

    public com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpGraph, com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.engine.binding.Binding $r3;
        com.hp.hpl.jena.sparql.algebra.op.OpGraph r0, $r5;
        com.hp.hpl.jena.graph.Node $r1, $r4;
        com.hp.hpl.jena.sparql.core.Substitute$OpSubstituteWorker r2;
        com.hp.hpl.jena.sparql.algebra.Op r6;

        r2 := @this: com.hp.hpl.jena.sparql.core.Substitute$OpSubstituteWorker;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpGraph;

        r6 := @parameter1: com.hp.hpl.jena.sparql.algebra.Op;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpGraph: com.hp.hpl.jena.graph.Node getNode()>();

        $r3 = r2.<com.hp.hpl.jena.sparql.core.Substitute$OpSubstituteWorker: com.hp.hpl.jena.sparql.engine.binding.Binding binding>;

        $r4 = staticinvoke <com.hp.hpl.jena.sparql.core.Substitute: com.hp.hpl.jena.graph.Node substitute(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.engine.binding.Binding)>($r1, $r3);

        $r5 = new com.hp.hpl.jena.sparql.algebra.op.OpGraph;

        specialinvoke $r5.<com.hp.hpl.jena.sparql.algebra.op.OpGraph: void <init>(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.algebra.Op)>($r4, r6);

        return $r5;
    }

    public com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpService, com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpService r0, $r5;
        com.hp.hpl.jena.graph.Node $r1, $r4;
        com.hp.hpl.jena.sparql.engine.binding.Binding $r3;
        com.hp.hpl.jena.sparql.core.Substitute$OpSubstituteWorker r2;
        com.hp.hpl.jena.sparql.algebra.Op r6;
        boolean $z0;

        r2 := @this: com.hp.hpl.jena.sparql.core.Substitute$OpSubstituteWorker;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpService;

        r6 := @parameter1: com.hp.hpl.jena.sparql.algebra.Op;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpService: com.hp.hpl.jena.graph.Node getService()>();

        $r3 = r2.<com.hp.hpl.jena.sparql.core.Substitute$OpSubstituteWorker: com.hp.hpl.jena.sparql.engine.binding.Binding binding>;

        $r4 = staticinvoke <com.hp.hpl.jena.sparql.core.Substitute: com.hp.hpl.jena.graph.Node substitute(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.engine.binding.Binding)>($r1, $r3);

        $r5 = new com.hp.hpl.jena.sparql.algebra.op.OpService;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpService: boolean getSilent()>();

        specialinvoke $r5.<com.hp.hpl.jena.sparql.algebra.op.OpService: void <init>(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.algebra.Op,boolean)>($r4, r6, $z0);

        return $r5;
    }
}
