public class org.objectweb.asm.ClassReader extends java.lang.Object
{
    static final boolean SIGNATURES;
    static final boolean ANNOTATIONS;
    static final boolean FRAMES;
    static final boolean WRITER;
    static final boolean RESIZE;
    public static final int SKIP_CODE;
    public static final int SKIP_DEBUG;
    public static final int SKIP_FRAMES;
    public static final int EXPAND_FRAMES;
    public final byte[] b;
    private final int[] items;
    private final java.lang.String[] strings;
    private final int maxStringLength;
    public final int header;

    public void <init>(byte[])
    {
        int $i0;
        byte[] r1;
        org.objectweb.asm.ClassReader r0;

        r0 := @this: org.objectweb.asm.ClassReader;

        r1 := @parameter0: byte[];

        $i0 = lengthof r1;

        specialinvoke r0.<org.objectweb.asm.ClassReader: void <init>(byte[],int,int)>(r1, 0, $i0);

        return;
    }

    public void <init>(byte[], int, int)
    {
        byte[] r1;
        java.lang.String[] $r4;
        short $s2;
        byte $b7;
        int[] $r2, $r3, $r5;
        int i0, $i1, $i3, $i4, i5, $i6, $i8, $i9, i10, i11, i12, i13, i14, $i15, $i16;
        java.lang.IllegalArgumentException $r7;
        org.objectweb.asm.ClassReader r0;

        r0 := @this: org.objectweb.asm.ClassReader;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i10 := @parameter2: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.objectweb.asm.ClassReader: byte[] b> = r1;

        $i1 = i0 + 6;

        $s2 = virtualinvoke r0.<org.objectweb.asm.ClassReader: short readShort(int)>($i1);

        $i15 = (int) $s2;

        if $i15 <= 51 goto label1;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r7;

     label1:
        $i3 = i0 + 8;

        $i4 = virtualinvoke r0.<org.objectweb.asm.ClassReader: int readUnsignedShort(int)>($i3);

        $r2 = newarray (int)[$i4];

        r0.<org.objectweb.asm.ClassReader: int[] items> = $r2;

        $r3 = r0.<org.objectweb.asm.ClassReader: int[] items>;

        i5 = lengthof $r3;

        $r4 = newarray (java.lang.String)[i5];

        r0.<org.objectweb.asm.ClassReader: java.lang.String[] strings> = $r4;

        i11 = 0;

        i12 = i0 + 10;

        i13 = 1;

     label2:
        if i13 >= i5 goto label9;

        $r5 = r0.<org.objectweb.asm.ClassReader: int[] items>;

        $i6 = i12 + 1;

        $r5[i13] = $i6;

        $b7 = r1[i12];

        $i16 = (int) $b7;

        tableswitch($i16)
        {
            case 1: goto label5;
            case 2: goto label7;
            case 3: goto label3;
            case 4: goto label3;
            case 5: goto label4;
            case 6: goto label4;
            case 7: goto label7;
            case 8: goto label7;
            case 9: goto label3;
            case 10: goto label3;
            case 11: goto label3;
            case 12: goto label3;
            case 13: goto label7;
            case 14: goto label7;
            case 15: goto label6;
            case 16: goto label7;
            case 17: goto label7;
            case 18: goto label3;
            default: goto label7;
        };

     label3:
        i14 = 5;

        goto label8;

     label4:
        i14 = 9;

        i13 = i13 + 1;

        goto label8;

     label5:
        $i8 = i12 + 1;

        $i9 = virtualinvoke r0.<org.objectweb.asm.ClassReader: int readUnsignedShort(int)>($i8);

        i14 = 3 + $i9;

        if i14 <= i11 goto label8;

        i11 = i14;

        goto label8;

     label6:
        i14 = 4;

        goto label8;

     label7:
        i14 = 3;

     label8:
        i12 = i12 + i14;

        i13 = i13 + 1;

        goto label2;

     label9:
        r0.<org.objectweb.asm.ClassReader: int maxStringLength> = i11;

        r0.<org.objectweb.asm.ClassReader: int header> = i12;

        return;
    }

    public int getAccess()
    {
        int $i0, $i1;
        org.objectweb.asm.ClassReader r0;

        r0 := @this: org.objectweb.asm.ClassReader;

        $i0 = r0.<org.objectweb.asm.ClassReader: int header>;

        $i1 = virtualinvoke r0.<org.objectweb.asm.ClassReader: int readUnsignedShort(int)>($i0);

        return $i1;
    }

    public java.lang.String getClassName()
    {
        org.objectweb.asm.ClassReader r0;
        int $i0, $i1, $i2;
        char[] $r1;
        java.lang.String $r2;

        r0 := @this: org.objectweb.asm.ClassReader;

        $i0 = r0.<org.objectweb.asm.ClassReader: int header>;

        $i2 = $i0 + 2;

        $i1 = r0.<org.objectweb.asm.ClassReader: int maxStringLength>;

        $r1 = newarray (char)[$i1];

        $r2 = virtualinvoke r0.<org.objectweb.asm.ClassReader: java.lang.String readClass(int,char[])>($i2, $r1);

        return $r2;
    }

    public java.lang.String getSuperName()
    {
        org.objectweb.asm.ClassReader r0;
        int $i0, $i1, $i2;
        char[] $r1;
        java.lang.String $r2;

        r0 := @this: org.objectweb.asm.ClassReader;

        $i0 = r0.<org.objectweb.asm.ClassReader: int header>;

        $i2 = $i0 + 4;

        $i1 = r0.<org.objectweb.asm.ClassReader: int maxStringLength>;

        $r1 = newarray (char)[$i1];

        $r2 = virtualinvoke r0.<org.objectweb.asm.ClassReader: java.lang.String readClass(int,char[])>($i2, $r1);

        return $r2;
    }

    public java.lang.String[] getInterfaces()
    {
        java.lang.String[] r1;
        org.objectweb.asm.ClassReader r0;
        int $i0, $i1, $i2, i3, i4;
        char[] r2;
        java.lang.String $r3;

        r0 := @this: org.objectweb.asm.ClassReader;

        $i0 = r0.<org.objectweb.asm.ClassReader: int header>;

        i3 = $i0 + 6;

        $i1 = virtualinvoke r0.<org.objectweb.asm.ClassReader: int readUnsignedShort(int)>(i3);

        r1 = newarray (java.lang.String)[$i1];

        if $i1 <= 0 goto label2;

        $i2 = r0.<org.objectweb.asm.ClassReader: int maxStringLength>;

        r2 = newarray (char)[$i2];

        i4 = 0;

     label1:
        if i4 >= $i1 goto label2;

        i3 = i3 + 2;

        $r3 = virtualinvoke r0.<org.objectweb.asm.ClassReader: java.lang.String readClass(int,char[])>(i3, r2);

        r1[i4] = $r3;

        i4 = i4 + 1;

        goto label1;

     label2:
        return r1;
    }

    void copyPool(org.objectweb.asm.ClassWriter)
    {
        byte[] $r6, $r9;
        byte b7;
        org.objectweb.asm.ClassWriter r5;
        long $l24, $l25;
        java.lang.String $r13, $r14, $r17, $r18, $r19, $r20, $r21, $r23, $r24, $r25, $r29, $r30, r31;
        org.objectweb.asm.ByteVector $r7, $r11;
        org.objectweb.asm.Item[] r3;
        char[] r1;
        int[] $r2, $r4, $r8, $r12, $r15, $r16, $r22, $r27;
        org.objectweb.asm.ClassReader r0;
        float $f0;
        java.lang.String[] $r26, $r28;
        int $i0, i1, $i2, $i3, $i4, $i5, $i6, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i26, $i27, $i28, $i29, i30, i31, i32, i33, i34, i35, $i36, $i37, $i38, i39, $i40, $i41, $i42, $i43, $i44;
        double $d0, $d1, $d2;
        org.objectweb.asm.Item $r32, $r33;

        r0 := @this: org.objectweb.asm.ClassReader;

        r5 := @parameter0: org.objectweb.asm.ClassWriter;

        $i0 = r0.<org.objectweb.asm.ClassReader: int maxStringLength>;

        r1 = newarray (char)[$i0];

        $r2 = r0.<org.objectweb.asm.ClassReader: int[] items>;

        i1 = lengthof $r2;

        r3 = newarray (org.objectweb.asm.Item)[i1];

        i30 = 1;

     label01:
        if i30 >= i1 goto label15;

        $r8 = r0.<org.objectweb.asm.ClassReader: int[] items>;

        i31 = $r8[i30];

        $r9 = r0.<org.objectweb.asm.ClassReader: byte[] b>;

        $i6 = i31 - 1;

        b7 = $r9[$i6];

        $r33 = new org.objectweb.asm.Item;

        specialinvoke $r33.<org.objectweb.asm.Item: void <init>(int)>(i30);

        $i40 = (int) b7;

        tableswitch($i40)
        {
            case 1: goto label08;
            case 2: goto label13;
            case 3: goto label03;
            case 4: goto label04;
            case 5: goto label06;
            case 6: goto label07;
            case 7: goto label13;
            case 8: goto label13;
            case 9: goto label02;
            case 10: goto label02;
            case 11: goto label02;
            case 12: goto label05;
            case 13: goto label13;
            case 14: goto label13;
            case 15: goto label10;
            case 16: goto label13;
            case 17: goto label13;
            case 18: goto label11;
            default: goto label13;
        };

     label02:
        $r22 = r0.<org.objectweb.asm.ClassReader: int[] items>;

        $i21 = i31 + 2;

        $i22 = virtualinvoke r0.<org.objectweb.asm.ClassReader: int readUnsignedShort(int)>($i21);

        i32 = $r22[$i22];

        $r23 = virtualinvoke r0.<org.objectweb.asm.ClassReader: java.lang.String readClass(int,char[])>(i31, r1);

        $r24 = virtualinvoke r0.<org.objectweb.asm.ClassReader: java.lang.String readUTF8(int,char[])>(i32, r1);

        $i23 = i32 + 2;

        $r25 = virtualinvoke r0.<org.objectweb.asm.ClassReader: java.lang.String readUTF8(int,char[])>($i23, r1);

        $i41 = (int) b7;

        virtualinvoke $r33.<org.objectweb.asm.Item: void set(int,java.lang.String,java.lang.String,java.lang.String)>($i41, $r23, $r24, $r25);

        goto label14;

     label03:
        $i27 = virtualinvoke r0.<org.objectweb.asm.ClassReader: int readInt(int)>(i31);

        virtualinvoke $r33.<org.objectweb.asm.Item: void set(int)>($i27);

        goto label14;

     label04:
        $i26 = virtualinvoke r0.<org.objectweb.asm.ClassReader: int readInt(int)>(i31);

        $f0 = staticinvoke <java.lang.Float: float intBitsToFloat(int)>($i26);

        virtualinvoke $r33.<org.objectweb.asm.Item: void set(float)>($f0);

        goto label14;

     label05:
        $r20 = virtualinvoke r0.<org.objectweb.asm.ClassReader: java.lang.String readUTF8(int,char[])>(i31, r1);

        $i20 = i31 + 2;

        $r21 = virtualinvoke r0.<org.objectweb.asm.ClassReader: java.lang.String readUTF8(int,char[])>($i20, r1);

        $i42 = (int) b7;

        virtualinvoke $r33.<org.objectweb.asm.Item: void set(int,java.lang.String,java.lang.String,java.lang.String)>($i42, $r20, $r21, null);

        goto label14;

     label06:
        $l25 = virtualinvoke r0.<org.objectweb.asm.ClassReader: long readLong(int)>(i31);

        virtualinvoke $r33.<org.objectweb.asm.Item: void set(long)>($l25);

        i30 = i30 + 1;

        goto label14;

     label07:
        $l24 = virtualinvoke r0.<org.objectweb.asm.ClassReader: long readLong(int)>(i31);

        $d2 = staticinvoke <java.lang.Double: double longBitsToDouble(long)>($l24);

        virtualinvoke $r33.<org.objectweb.asm.Item: void set(double)>($d2);

        i30 = i30 + 1;

        goto label14;

     label08:
        $r26 = r0.<org.objectweb.asm.ClassReader: java.lang.String[] strings>;

        r31 = $r26[i30];

        if r31 != null goto label09;

        $r27 = r0.<org.objectweb.asm.ClassReader: int[] items>;

        i33 = $r27[i30];

        $r28 = r0.<org.objectweb.asm.ClassReader: java.lang.String[] strings>;

        $i28 = i33 + 2;

        $i29 = virtualinvoke r0.<org.objectweb.asm.ClassReader: int readUnsignedShort(int)>(i33);

        $r29 = specialinvoke r0.<org.objectweb.asm.ClassReader: java.lang.String readUTF(int,int,char[])>($i28, $i29, r1);

        $r28[i30] = $r29;

        r31 = $r29;

     label09:
        $i43 = (int) b7;

        virtualinvoke $r33.<org.objectweb.asm.Item: void set(int,java.lang.String,java.lang.String,java.lang.String)>($i43, r31, null, null);

        goto label14;

     label10:
        $r15 = r0.<org.objectweb.asm.ClassReader: int[] items>;

        $i13 = i31 + 1;

        $i14 = virtualinvoke r0.<org.objectweb.asm.ClassReader: int readUnsignedShort(int)>($i13);

        i34 = $r15[$i14];

        $r16 = r0.<org.objectweb.asm.ClassReader: int[] items>;

        $i15 = i34 + 2;

        $i16 = virtualinvoke r0.<org.objectweb.asm.ClassReader: int readUnsignedShort(int)>($i15);

        i35 = $r16[$i16];

        $i17 = virtualinvoke r0.<org.objectweb.asm.ClassReader: int readByte(int)>(i31);

        $i18 = 20 + $i17;

        $r17 = virtualinvoke r0.<org.objectweb.asm.ClassReader: java.lang.String readClass(int,char[])>(i34, r1);

        $r18 = virtualinvoke r0.<org.objectweb.asm.ClassReader: java.lang.String readUTF8(int,char[])>(i35, r1);

        $i19 = i35 + 2;

        $r19 = virtualinvoke r0.<org.objectweb.asm.ClassReader: java.lang.String readUTF8(int,char[])>($i19, r1);

        virtualinvoke $r33.<org.objectweb.asm.Item: void set(int,java.lang.String,java.lang.String,java.lang.String)>($i18, $r17, $r18, $r19);

        goto label14;

     label11:
        $r11 = r5.<org.objectweb.asm.ClassWriter: org.objectweb.asm.ByteVector bootstrapMethods>;

        if $r11 != null goto label12;

        specialinvoke r0.<org.objectweb.asm.ClassReader: void copyBootstrapMethods(org.objectweb.asm.ClassWriter,org.objectweb.asm.Item[],char[])>(r5, r3, r1);

     label12:
        $r12 = r0.<org.objectweb.asm.ClassReader: int[] items>;

        $i8 = i31 + 2;

        $i9 = virtualinvoke r0.<org.objectweb.asm.ClassReader: int readUnsignedShort(int)>($i8);

        $i12 = $r12[$i9];

        $r13 = virtualinvoke r0.<org.objectweb.asm.ClassReader: java.lang.String readUTF8(int,char[])>($i12, r1);

        $i10 = $i12 + 2;

        $r14 = virtualinvoke r0.<org.objectweb.asm.ClassReader: java.lang.String readUTF8(int,char[])>($i10, r1);

        $i11 = virtualinvoke r0.<org.objectweb.asm.ClassReader: int readUnsignedShort(int)>(i31);

        virtualinvoke $r33.<org.objectweb.asm.Item: void set(java.lang.String,java.lang.String,int)>($r13, $r14, $i11);

        goto label14;

     label13:
        $r30 = virtualinvoke r0.<org.objectweb.asm.ClassReader: java.lang.String readUTF8(int,char[])>(i31, r1);

        $i44 = (int) b7;

        virtualinvoke $r33.<org.objectweb.asm.Item: void set(int,java.lang.String,java.lang.String,java.lang.String)>($i44, $r30, null, null);

     label14:
        $i36 = $r33.<org.objectweb.asm.Item: int hashCode>;

        $i37 = lengthof r3;

        $i38 = $i36 % $i37;

        $r32 = r3[$i38];

        $r33.<org.objectweb.asm.Item: org.objectweb.asm.Item next> = $r32;

        r3[$i38] = $r33;

        i30 = i30 + 1;

        goto label01;

     label15:
        $r4 = r0.<org.objectweb.asm.ClassReader: int[] items>;

        $i2 = $r4[1];

        i39 = $i2 - 1;

        $r7 = r5.<org.objectweb.asm.ClassWriter: org.objectweb.asm.ByteVector pool>;

        $r6 = r0.<org.objectweb.asm.ClassReader: byte[] b>;

        $i3 = r0.<org.objectweb.asm.ClassReader: int header>;

        $i4 = $i3 - i39;

        virtualinvoke $r7.<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putByteArray(byte[],int,int)>($r6, i39, $i4);

        r5.<org.objectweb.asm.ClassWriter: org.objectweb.asm.Item[] items> = r3;

        $d0 = (double) i1;

        $d1 = 0.75 * $d0;

        $i5 = (int) $d1;

        r5.<org.objectweb.asm.ClassWriter: int threshold> = $i5;

        r5.<org.objectweb.asm.ClassWriter: int index> = i1;

        return;
    }

    private void copyBootstrapMethods(org.objectweb.asm.ClassWriter, org.objectweb.asm.Item[], char[])
    {
        byte[] $r2;
        boolean $z0, z1;
        org.objectweb.asm.ClassReader r0;
        org.objectweb.asm.ClassWriter r3;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i9, $i10, $i11, $i12, $i13, $i14, i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, i23, i24, i25, i26, i27, i28, $i30, $i32;
        java.lang.String $r10, $r11;
        org.objectweb.asm.ByteVector $r13;
        org.objectweb.asm.Item[] r7;
        org.objectweb.asm.Item $r8, $r12;
        char[] r4;
        java.lang.Object $r5, $r9;

        r0 := @this: org.objectweb.asm.ClassReader;

        r3 := @parameter0: org.objectweb.asm.ClassWriter;

        r7 := @parameter1: org.objectweb.asm.Item[];

        r4 := @parameter2: char[];

        $i0 = specialinvoke r0.<org.objectweb.asm.ClassReader: int getAttributes()>();

        i23 = $i0;

        z1 = 0;

        i24 = virtualinvoke r0.<org.objectweb.asm.ClassReader: int readUnsignedShort(int)>($i0);

     label1:
        if i24 <= 0 goto label3;

        $i19 = i23 + 2;

        $r10 = virtualinvoke r0.<org.objectweb.asm.ClassReader: java.lang.String readUTF8(int,char[])>($i19, r4);

        $r11 = "BootstrapMethods";

        $z0 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>($r10);

        if $z0 == 0 goto label2;

        z1 = 1;

        goto label3;

     label2:
        $i20 = i23 + 4;

        $i21 = virtualinvoke r0.<org.objectweb.asm.ClassReader: int readInt(int)>($i20);

        $i22 = 6 + $i21;

        i23 = i23 + $i22;

        $i30 = (int) -1;

        i24 = i24 + $i30;

        goto label1;

     label3:
        if z1 != 0 goto label4;

        return;

     label4:
        $i1 = i23 + 8;

        $i2 = virtualinvoke r0.<org.objectweb.asm.ClassReader: int readUnsignedShort(int)>($i1);

        i25 = 0;

        i26 = i23 + 10;

     label5:
        if i25 >= $i2 goto label8;

        $i8 = i26 - i23;

        i9 = $i8 - 10;

        $i10 = virtualinvoke r0.<org.objectweb.asm.ClassReader: int readUnsignedShort(int)>(i26);

        $r5 = virtualinvoke r0.<org.objectweb.asm.ClassReader: java.lang.Object readConst(int,char[])>($i10, r4);

        i27 = virtualinvoke $r5.<java.lang.Object: int hashCode()>();

        $i11 = i26 + 2;

        i28 = virtualinvoke r0.<org.objectweb.asm.ClassReader: int readUnsignedShort(int)>($i11);

     label6:
        if i28 <= 0 goto label7;

        $i16 = i26 + 4;

        $i17 = virtualinvoke r0.<org.objectweb.asm.ClassReader: int readUnsignedShort(int)>($i16);

        $r9 = virtualinvoke r0.<org.objectweb.asm.ClassReader: java.lang.Object readConst(int,char[])>($i17, r4);

        $i18 = virtualinvoke $r9.<java.lang.Object: int hashCode()>();

        i27 = i27 ^ $i18;

        i26 = i26 + 2;

        $i32 = (int) -1;

        i28 = i28 + $i32;

        goto label6;

     label7:
        i26 = i26 + 4;

        $r12 = new org.objectweb.asm.Item;

        specialinvoke $r12.<org.objectweb.asm.Item: void <init>(int)>(i25);

        $i12 = i27 & 2147483647;

        virtualinvoke $r12.<org.objectweb.asm.Item: void set(int,int)>(i9, $i12);

        $i14 = $r12.<org.objectweb.asm.Item: int hashCode>;

        $i13 = lengthof r7;

        i15 = $i14 % $i13;

        $r8 = r7[i15];

        $r12.<org.objectweb.asm.Item: org.objectweb.asm.Item next> = $r8;

        r7[i15] = $r12;

        i25 = i25 + 1;

        goto label5;

     label8:
        $i3 = i23 + 4;

        $i4 = virtualinvoke r0.<org.objectweb.asm.ClassReader: int readInt(int)>($i3);

        $r13 = new org.objectweb.asm.ByteVector;

        $i5 = $i4 + 62;

        specialinvoke $r13.<org.objectweb.asm.ByteVector: void <init>(int)>($i5);

        $r2 = r0.<org.objectweb.asm.ClassReader: byte[] b>;

        $i7 = i23 + 10;

        $i6 = $i4 - 2;

        virtualinvoke $r13.<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putByteArray(byte[],int,int)>($r2, $i7, $i6);

        r3.<org.objectweb.asm.ClassWriter: int bootstrapMethodsCount> = $i2;

        r3.<org.objectweb.asm.ClassWriter: org.objectweb.asm.ByteVector bootstrapMethods> = $r13;

        return;
    }

    public void <init>(java.io.InputStream) throws java.io.IOException
    {
        byte[] $r2;
        org.objectweb.asm.ClassReader r0;
        java.io.InputStream r1;

        r0 := @this: org.objectweb.asm.ClassReader;

        r1 := @parameter0: java.io.InputStream;

        $r2 = staticinvoke <org.objectweb.asm.ClassReader: byte[] readClass(java.io.InputStream,boolean)>(r1, 0);

        specialinvoke r0.<org.objectweb.asm.ClassReader: void <init>(byte[])>($r2);

        return;
    }

    public void <init>(java.lang.String) throws java.io.IOException
    {
        byte[] $r8;
        org.objectweb.asm.ClassReader r0;
        java.lang.StringBuilder $r1, $r4, $r5;
        java.lang.String r2, $r3, $r6;
        java.io.InputStream $r7;

        r0 := @this: org.objectweb.asm.ClassReader;

        r2 := @parameter0: java.lang.String;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke r2.<java.lang.String: java.lang.String replace(char,char)>(46, 47);

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".class");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = staticinvoke <java.lang.ClassLoader: java.io.InputStream getSystemResourceAsStream(java.lang.String)>($r6);

        $r8 = staticinvoke <org.objectweb.asm.ClassReader: byte[] readClass(java.io.InputStream,boolean)>($r7, 1);

        specialinvoke r0.<org.objectweb.asm.ClassReader: void <init>(byte[])>($r8);

        return;
    }

    private static byte[] readClass(java.io.InputStream, boolean) throws java.io.IOException
    {
        java.lang.Throwable $r2;
        byte[] r3, r4, r5, r6, r7;
        byte $b9;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i10, i11, $i13;
        boolean z0;
        java.io.IOException $r8;
        java.io.InputStream r0;

        r0 := @parameter0: java.io.InputStream;

        z0 := @parameter1: boolean;

        if r0 != null goto label01;

        $r8 = new java.io.IOException;

        specialinvoke $r8.<java.io.IOException: void <init>(java.lang.String)>("Class not found");

        throw $r8;

     label01:
        $i0 = virtualinvoke r0.<java.io.InputStream: int available()>();

        r3 = newarray (byte)[$i0];

        i11 = 0;

     label02:
        $i1 = lengthof r3;

        $i2 = $i1 - i11;

        $i3 = virtualinvoke r0.<java.io.InputStream: int read(byte[],int,int)>(r3, i11, $i2);

        $i13 = (int) -1;

        if $i3 != $i13 goto label06;

        $i10 = lengthof r3;

        if i11 >= $i10 goto label03;

        r4 = newarray (byte)[i11];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r3, 0, r4, 0, i11);

        r3 = r4;

     label03:
        r5 = r3;

     label04:
        if z0 == 0 goto label05;

        virtualinvoke r0.<java.io.InputStream: void close()>();

     label05:
        return r5;

     label06:
        i11 = i11 + $i3;

        $i4 = lengthof r3;

        if i11 != $i4 goto label10;

        $i5 = virtualinvoke r0.<java.io.InputStream: int read()>();

        if $i5 >= 0 goto label09;

        r6 = r3;

     label07:
        if z0 == 0 goto label08;

        virtualinvoke r0.<java.io.InputStream: void close()>();

     label08:
        return r6;

     label09:
        $i6 = lengthof r3;

        $i7 = $i6 + 1000;

        r7 = newarray (byte)[$i7];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r3, 0, r7, 0, i11);

        $i8 = i11;

        i11 = i11 + 1;

        $b9 = (byte) $i5;

        r7[$i8] = $b9;

        r3 = r7;

     label10:
        goto label02;

     label11:
        $r2 := @caughtexception;

     label12:
        if z0 == 0 goto label13;

        virtualinvoke r0.<java.io.InputStream: void close()>();

     label13:
        throw $r2;

        catch java.lang.Throwable from label01 to label04 with label11;
        catch java.lang.Throwable from label06 to label07 with label11;
        catch java.lang.Throwable from label09 to label12 with label11;
    }

    public void accept(org.objectweb.asm.ClassVisitor, int)
    {
        org.objectweb.asm.ClassReader r0;
        int i0;
        org.objectweb.asm.Attribute[] $r2;
        org.objectweb.asm.ClassVisitor r1;

        r0 := @this: org.objectweb.asm.ClassReader;

        r1 := @parameter0: org.objectweb.asm.ClassVisitor;

        i0 := @parameter1: int;

        $r2 = newarray (org.objectweb.asm.Attribute)[0];

        virtualinvoke r0.<org.objectweb.asm.ClassReader: void accept(org.objectweb.asm.ClassVisitor,org.objectweb.asm.Attribute[],int)>(r1, $r2, i0);

        return;
    }

    public void accept(org.objectweb.asm.ClassVisitor, org.objectweb.asm.Attribute[], int)
    {
        org.objectweb.asm.Context $r41;
        org.objectweb.asm.Attribute $r27, r38, r40;
        int[] $r8, $r29, $r30, r39;
        org.objectweb.asm.ClassReader r0;
        org.objectweb.asm.Attribute[] r3;
        int $i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, i47, i48, i49, i50, i51, i52, i53, i54, i55, i56, i57, $i58, $i59, $i60, i61, i62, i63, i64, i65, i66, i67, i68, i69, i70, $i72, $i74, $i76, $i78, $i80, $i82, $i84;
        org.objectweb.asm.AnnotationVisitor $r13, $r15;
        java.lang.String $r4, $r5, $r9, $r10, $r11, $r12, $r14, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r31, r32, r33, r34, r35, r36, r37;
        char[] r1, $r28;
        org.objectweb.asm.ClassVisitor r7;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        java.lang.String[] r6;

        r0 := @this: org.objectweb.asm.ClassReader;

        r7 := @parameter0: org.objectweb.asm.ClassVisitor;

        r3 := @parameter1: org.objectweb.asm.Attribute[];

        i1 := @parameter2: int;

        i47 = r0.<org.objectweb.asm.ClassReader: int header>;

        $i0 = r0.<org.objectweb.asm.ClassReader: int maxStringLength>;

        r1 = newarray (char)[$i0];

        $r41 = new org.objectweb.asm.Context;

        specialinvoke $r41.<org.objectweb.asm.Context: void <init>()>();

        $r41.<org.objectweb.asm.Context: org.objectweb.asm.Attribute[] attrs> = r3;

        $r41.<org.objectweb.asm.Context: int flags> = i1;

        $r41.<org.objectweb.asm.Context: char[] buffer> = r1;

        i48 = virtualinvoke r0.<org.objectweb.asm.ClassReader: int readUnsignedShort(int)>(i47);

        $i2 = i47 + 2;

        $r4 = virtualinvoke r0.<org.objectweb.asm.ClassReader: java.lang.String readClass(int,char[])>($i2, r1);

        $i3 = i47 + 4;

        $r5 = virtualinvoke r0.<org.objectweb.asm.ClassReader: java.lang.String readClass(int,char[])>($i3, r1);

        $i4 = i47 + 6;

        $i5 = virtualinvoke r0.<org.objectweb.asm.ClassReader: int readUnsignedShort(int)>($i4);

        r6 = newarray (java.lang.String)[$i5];

        i49 = i47 + 8;

        i50 = 0;

     label01:
        $i6 = lengthof r6;

        if i50 >= $i6 goto label02;

        $r31 = virtualinvoke r0.<org.objectweb.asm.ClassReader: java.lang.String readClass(int,char[])>(i49, r1);

        r6[i50] = $r31;

        i49 = i49 + 2;

        i50 = i50 + 1;

        goto label01;

     label02:
        r32 = null;

        r33 = null;

        r34 = null;

        r35 = null;

        r36 = null;

        r37 = null;

        i51 = 0;

        i52 = 0;

        i53 = 0;

        r38 = null;

        $i7 = specialinvoke r0.<org.objectweb.asm.ClassReader: int getAttributes()>();

        i54 = $i7;

        i55 = virtualinvoke r0.<org.objectweb.asm.ClassReader: int readUnsignedShort(int)>($i7);

     label03:
        if i55 <= 0 goto label18;

        $i25 = i54 + 2;

        $r16 = virtualinvoke r0.<org.objectweb.asm.ClassReader: java.lang.String readUTF8(int,char[])>($i25, r1);

        $r17 = "SourceFile";

        $z0 = virtualinvoke $r17.<java.lang.String: boolean equals(java.lang.Object)>($r16);

        if $z0 == 0 goto label04;

        $i46 = i54 + 8;

        r33 = virtualinvoke r0.<org.objectweb.asm.ClassReader: java.lang.String readUTF8(int,char[])>($i46, r1);

        goto label17;

     label04:
        $r18 = "InnerClasses";

        $z1 = virtualinvoke $r18.<java.lang.String: boolean equals(java.lang.Object)>($r16);

        if $z1 == 0 goto label05;

        i53 = i54 + 8;

        goto label17;

     label05:
        $r19 = "EnclosingMethod";

        $z2 = virtualinvoke $r19.<java.lang.String: boolean equals(java.lang.Object)>($r16);

        if $z2 == 0 goto label07;

        $i40 = i54 + 8;

        r35 = virtualinvoke r0.<org.objectweb.asm.ClassReader: java.lang.String readClass(int,char[])>($i40, r1);

        $i41 = i54 + 10;

        $i42 = virtualinvoke r0.<org.objectweb.asm.ClassReader: int readUnsignedShort(int)>($i41);

        if $i42 == 0 goto label06;

        $r29 = r0.<org.objectweb.asm.ClassReader: int[] items>;

        $i43 = $r29[$i42];

        r36 = virtualinvoke r0.<org.objectweb.asm.ClassReader: java.lang.String readUTF8(int,char[])>($i43, r1);

        $r30 = r0.<org.objectweb.asm.ClassReader: int[] items>;

        $i44 = $r30[$i42];

        $i45 = $i44 + 2;

        r37 = virtualinvoke r0.<org.objectweb.asm.ClassReader: java.lang.String readUTF8(int,char[])>($i45, r1);

     label06:
        goto label17;

     label07:
        $r20 = "Signature";

        $z3 = virtualinvoke $r20.<java.lang.String: boolean equals(java.lang.Object)>($r16);

        if $z3 == 0 goto label08;

        $i39 = i54 + 8;

        r32 = virtualinvoke r0.<org.objectweb.asm.ClassReader: java.lang.String readUTF8(int,char[])>($i39, r1);

        goto label17;

     label08:
        $r21 = "RuntimeVisibleAnnotations";

        $z4 = virtualinvoke $r21.<java.lang.String: boolean equals(java.lang.Object)>($r16);

        if $z4 == 0 goto label09;

        i51 = i54 + 8;

        goto label17;

     label09:
        $r22 = "Deprecated";

        $z5 = virtualinvoke $r22.<java.lang.String: boolean equals(java.lang.Object)>($r16);

        if $z5 == 0 goto label10;

        i48 = i48 | 131072;

        goto label17;

     label10:
        $r23 = "Synthetic";

        $z6 = virtualinvoke $r23.<java.lang.String: boolean equals(java.lang.Object)>($r16);

        if $z6 == 0 goto label11;

        i48 = i48 | 266240;

        goto label17;

     label11:
        $r24 = "SourceDebugExtension";

        $z7 = virtualinvoke $r24.<java.lang.String: boolean equals(java.lang.Object)>($r16);

        if $z7 == 0 goto label12;

        $i36 = i54 + 4;

        $i37 = virtualinvoke r0.<org.objectweb.asm.ClassReader: int readInt(int)>($i36);

        $i38 = i54 + 8;

        $r28 = newarray (char)[$i37];

        r34 = specialinvoke r0.<org.objectweb.asm.ClassReader: java.lang.String readUTF(int,int,char[])>($i38, $i37, $r28);

        goto label17;

     label12:
        $r25 = "RuntimeInvisibleAnnotations";

        $z8 = virtualinvoke $r25.<java.lang.String: boolean equals(java.lang.Object)>($r16);

        if $z8 == 0 goto label13;

        i52 = i54 + 8;

        goto label17;

     label13:
        $r26 = "BootstrapMethods";

        $z9 = virtualinvoke $r26.<java.lang.String: boolean equals(java.lang.Object)>($r16);

        if $z9 == 0 goto label16;

        $i29 = i54 + 8;

        $i30 = virtualinvoke r0.<org.objectweb.asm.ClassReader: int readUnsignedShort(int)>($i29);

        r39 = newarray (int)[$i30];

        i56 = 0;

        i57 = i54 + 10;

     label14:
        $i31 = lengthof r39;

        if i56 >= $i31 goto label15;

        r39[i56] = i57;

        $i32 = i57 + 2;

        $i33 = virtualinvoke r0.<org.objectweb.asm.ClassReader: int readUnsignedShort(int)>($i32);

        $i34 = 2 + $i33;

        $i35 = $i34 << 1;

        i57 = i57 + $i35;

        i56 = i56 + 1;

        goto label14;

     label15:
        $r41.<org.objectweb.asm.Context: int[] bootstrapMethods> = r39;

        goto label17;

     label16:
        $i27 = i54 + 8;

        $i26 = i54 + 4;

        $i28 = virtualinvoke r0.<org.objectweb.asm.ClassReader: int readInt(int)>($i26);

        $i72 = (int) -1;

        $r27 = specialinvoke r0.<org.objectweb.asm.ClassReader: org.objectweb.asm.Attribute readAttribute(org.objectweb.asm.Attribute[],java.lang.String,int,int,char[],int,org.objectweb.asm.Label[])>(r3, $r16, $i27, $i28, r1, $i72, null);

        if $r27 == null goto label17;

        $r27.<org.objectweb.asm.Attribute: org.objectweb.asm.Attribute next> = r38;

        r38 = $r27;

     label17:
        $i58 = i54 + 4;

        $i59 = virtualinvoke r0.<org.objectweb.asm.ClassReader: int readInt(int)>($i58);

        $i60 = 6 + $i59;

        i54 = i54 + $i60;

        $i74 = (int) -1;

        i55 = i55 + $i74;

        goto label03;

     label18:
        $r8 = r0.<org.objectweb.asm.ClassReader: int[] items>;

        $i8 = $r8[1];

        $i9 = $i8 - 7;

        $i10 = virtualinvoke r0.<org.objectweb.asm.ClassReader: int readInt(int)>($i9);

        virtualinvoke r7.<org.objectweb.asm.ClassVisitor: void visit(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])>($i10, i48, $r4, r32, $r5, r6);

        $i11 = i1 & 2;

        if $i11 != 0 goto label20;

        if r33 != null goto label19;

        if r34 == null goto label20;

     label19:
        virtualinvoke r7.<org.objectweb.asm.ClassVisitor: void visitSource(java.lang.String,java.lang.String)>(r33, r34);

     label20:
        if r35 == null goto label21;

        virtualinvoke r7.<org.objectweb.asm.ClassVisitor: void visitOuterClass(java.lang.String,java.lang.String,java.lang.String)>(r35, r36, r37);

     label21:
        if i51 == 0 goto label23;

        i61 = virtualinvoke r0.<org.objectweb.asm.ClassReader: int readUnsignedShort(int)>(i51);

        i62 = i51 + 2;

     label22:
        if i61 <= 0 goto label23;

        $i24 = i62 + 2;

        $r14 = virtualinvoke r0.<org.objectweb.asm.ClassReader: java.lang.String readUTF8(int,char[])>(i62, r1);

        $r15 = virtualinvoke r7.<org.objectweb.asm.ClassVisitor: org.objectweb.asm.AnnotationVisitor visitAnnotation(java.lang.String,boolean)>($r14, 1);

        i62 = specialinvoke r0.<org.objectweb.asm.ClassReader: int readAnnotationValues(int,char[],boolean,org.objectweb.asm.AnnotationVisitor)>($i24, r1, 1, $r15);

        $i76 = (int) -1;

        i61 = i61 + $i76;

        goto label22;

     label23:
        if i52 == 0 goto label25;

        i63 = virtualinvoke r0.<org.objectweb.asm.ClassReader: int readUnsignedShort(int)>(i52);

        i64 = i52 + 2;

     label24:
        if i63 <= 0 goto label25;

        $i23 = i64 + 2;

        $r12 = virtualinvoke r0.<org.objectweb.asm.ClassReader: java.lang.String readUTF8(int,char[])>(i64, r1);

        $r13 = virtualinvoke r7.<org.objectweb.asm.ClassVisitor: org.objectweb.asm.AnnotationVisitor visitAnnotation(java.lang.String,boolean)>($r12, 0);

        i64 = specialinvoke r0.<org.objectweb.asm.ClassReader: int readAnnotationValues(int,char[],boolean,org.objectweb.asm.AnnotationVisitor)>($i23, r1, 1, $r13);

        $i78 = (int) -1;

        i63 = i63 + $i78;

        goto label24;

     label25:
        if r38 == null goto label26;

        r40 = r38.<org.objectweb.asm.Attribute: org.objectweb.asm.Attribute next>;

        r38.<org.objectweb.asm.Attribute: org.objectweb.asm.Attribute next> = null;

        virtualinvoke r7.<org.objectweb.asm.ClassVisitor: void visitAttribute(org.objectweb.asm.Attribute)>(r38);

        r38 = r40;

        goto label25;

     label26:
        if i53 == 0 goto label28;

        i65 = i53 + 2;

        i66 = virtualinvoke r0.<org.objectweb.asm.ClassReader: int readUnsignedShort(int)>(i53);

     label27:
        if i66 <= 0 goto label28;

        $r9 = virtualinvoke r0.<org.objectweb.asm.ClassReader: java.lang.String readClass(int,char[])>(i65, r1);

        $i19 = i65 + 2;

        $r10 = virtualinvoke r0.<org.objectweb.asm.ClassReader: java.lang.String readClass(int,char[])>($i19, r1);

        $i20 = i65 + 4;

        $r11 = virtualinvoke r0.<org.objectweb.asm.ClassReader: java.lang.String readUTF8(int,char[])>($i20, r1);

        $i21 = i65 + 6;

        $i22 = virtualinvoke r0.<org.objectweb.asm.ClassReader: int readUnsignedShort(int)>($i21);

        virtualinvoke r7.<org.objectweb.asm.ClassVisitor: void visitInnerClass(java.lang.String,java.lang.String,java.lang.String,int)>($r9, $r10, $r11, $i22);

        i65 = i65 + 8;

        $i80 = (int) -1;

        i66 = i66 + $i80;

        goto label27;

     label28:
        $i12 = r0.<org.objectweb.asm.ClassReader: int header>;

        $i15 = $i12 + 10;

        $i13 = lengthof r6;

        $i14 = 2 * $i13;

        $i18 = $i15 + $i14;

        i67 = $i18;

        $i16 = $i18 - 2;

        i68 = virtualinvoke r0.<org.objectweb.asm.ClassReader: int readUnsignedShort(int)>($i16);

     label29:
        if i68 <= 0 goto label30;

        i67 = specialinvoke r0.<org.objectweb.asm.ClassReader: int readField(org.objectweb.asm.ClassVisitor,org.objectweb.asm.Context,int)>(r7, $r41, i67);

        $i82 = (int) -1;

        i68 = i68 + $i82;

        goto label29;

     label30:
        i69 = i67 + 2;

        $i17 = i69 - 2;

        i70 = virtualinvoke r0.<org.objectweb.asm.ClassReader: int readUnsignedShort(int)>($i17);

     label31:
        if i70 <= 0 goto label32;

        i69 = specialinvoke r0.<org.objectweb.asm.ClassReader: int readMethod(org.objectweb.asm.ClassVisitor,org.objectweb.asm.Context,int)>(r7, $r41, i69);

        $i84 = (int) -1;

        i70 = i70 + $i84;

        goto label31;

     label32:
        virtualinvoke r7.<org.objectweb.asm.ClassVisitor: void visitEnd()>();

        return;
    }

    private int readField(org.objectweb.asm.ClassVisitor, org.objectweb.asm.Context, int)
    {
        org.objectweb.asm.ClassVisitor r5;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        org.objectweb.asm.ClassReader r2;
        org.objectweb.asm.AnnotationVisitor $r8, $r10;
        org.objectweb.asm.FieldVisitor $r6;
        org.objectweb.asm.Attribute[] $r18;
        org.objectweb.asm.Context r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, i11, i12, i13, i14, i15, i16, $i17, $i18, $i19, i20, i21, i22, i23, i24, $i26, $i28, $i30, $i32;
        org.objectweb.asm.Attribute $r19, r22, r24;
        java.lang.String $r3, $r4, $r7, $r9, $r11, $r12, $r13, $r14, $r15, $r16, $r17, r20;
        char[] r1;
        java.lang.Object r21, $r23;

        r2 := @this: org.objectweb.asm.ClassReader;

        r5 := @parameter0: org.objectweb.asm.ClassVisitor;

        r0 := @parameter1: org.objectweb.asm.Context;

        i11 := @parameter2: int;

        r1 = r0.<org.objectweb.asm.Context: char[] buffer>;

        i12 = virtualinvoke r2.<org.objectweb.asm.ClassReader: int readUnsignedShort(int)>(i11);

        $i0 = i11 + 2;

        $r3 = virtualinvoke r2.<org.objectweb.asm.ClassReader: java.lang.String readUTF8(int,char[])>($i0, r1);

        $i1 = i11 + 4;

        $r4 = virtualinvoke r2.<org.objectweb.asm.ClassReader: java.lang.String readUTF8(int,char[])>($i1, r1);

        i13 = i11 + 6;

        r20 = null;

        i14 = 0;

        i15 = 0;

        r21 = null;

        r22 = null;

        i16 = virtualinvoke r2.<org.objectweb.asm.ClassReader: int readUnsignedShort(int)>(i13);

     label01:
        if i16 <= 0 goto label11;

        $i4 = i13 + 2;

        $r11 = virtualinvoke r2.<org.objectweb.asm.ClassReader: java.lang.String readUTF8(int,char[])>($i4, r1);

        $r12 = "ConstantValue";

        $z0 = virtualinvoke $r12.<java.lang.String: boolean equals(java.lang.Object)>($r11);

        if $z0 == 0 goto label04;

        $i9 = i13 + 8;

        $i10 = virtualinvoke r2.<org.objectweb.asm.ClassReader: int readUnsignedShort(int)>($i9);

        if $i10 != 0 goto label02;

        $r23 = null;

        goto label03;

     label02:
        $r23 = virtualinvoke r2.<org.objectweb.asm.ClassReader: java.lang.Object readConst(int,char[])>($i10, r1);

     label03:
        r21 = $r23;

        goto label10;

     label04:
        $r13 = "Signature";

        $z1 = virtualinvoke $r13.<java.lang.String: boolean equals(java.lang.Object)>($r11);

        if $z1 == 0 goto label05;

        $i8 = i13 + 8;

        r20 = virtualinvoke r2.<org.objectweb.asm.ClassReader: java.lang.String readUTF8(int,char[])>($i8, r1);

        goto label10;

     label05:
        $r14 = "Deprecated";

        $z2 = virtualinvoke $r14.<java.lang.String: boolean equals(java.lang.Object)>($r11);

        if $z2 == 0 goto label06;

        i12 = i12 | 131072;

        goto label10;

     label06:
        $r15 = "Synthetic";

        $z3 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>($r11);

        if $z3 == 0 goto label07;

        i12 = i12 | 266240;

        goto label10;

     label07:
        $r16 = "RuntimeVisibleAnnotations";

        $z4 = virtualinvoke $r16.<java.lang.String: boolean equals(java.lang.Object)>($r11);

        if $z4 == 0 goto label08;

        i14 = i13 + 8;

        goto label10;

     label08:
        $r17 = "RuntimeInvisibleAnnotations";

        $z5 = virtualinvoke $r17.<java.lang.String: boolean equals(java.lang.Object)>($r11);

        if $z5 == 0 goto label09;

        i15 = i13 + 8;

        goto label10;

     label09:
        $r18 = r0.<org.objectweb.asm.Context: org.objectweb.asm.Attribute[] attrs>;

        $i6 = i13 + 8;

        $i5 = i13 + 4;

        $i7 = virtualinvoke r2.<org.objectweb.asm.ClassReader: int readInt(int)>($i5);

        $i26 = (int) -1;

        $r19 = specialinvoke r2.<org.objectweb.asm.ClassReader: org.objectweb.asm.Attribute readAttribute(org.objectweb.asm.Attribute[],java.lang.String,int,int,char[],int,org.objectweb.asm.Label[])>($r18, $r11, $i6, $i7, r1, $i26, null);

        if $r19 == null goto label10;

        $r19.<org.objectweb.asm.Attribute: org.objectweb.asm.Attribute next> = r22;

        r22 = $r19;

     label10:
        $i17 = i13 + 4;

        $i18 = virtualinvoke r2.<org.objectweb.asm.ClassReader: int readInt(int)>($i17);

        $i19 = 6 + $i18;

        i13 = i13 + $i19;

        $i28 = (int) -1;

        i16 = i16 + $i28;

        goto label01;

     label11:
        i20 = i13 + 2;

        $r6 = virtualinvoke r5.<org.objectweb.asm.ClassVisitor: org.objectweb.asm.FieldVisitor visitField(int,java.lang.String,java.lang.String,java.lang.String,java.lang.Object)>(i12, $r3, $r4, r20, r21);

        if $r6 != null goto label12;

        return i20;

     label12:
        if i14 == 0 goto label14;

        i21 = virtualinvoke r2.<org.objectweb.asm.ClassReader: int readUnsignedShort(int)>(i14);

        i22 = i14 + 2;

     label13:
        if i21 <= 0 goto label14;

        $i3 = i22 + 2;

        $r9 = virtualinvoke r2.<org.objectweb.asm.ClassReader: java.lang.String readUTF8(int,char[])>(i22, r1);

        $r10 = virtualinvoke $r6.<org.objectweb.asm.FieldVisitor: org.objectweb.asm.AnnotationVisitor visitAnnotation(java.lang.String,boolean)>($r9, 1);

        i22 = specialinvoke r2.<org.objectweb.asm.ClassReader: int readAnnotationValues(int,char[],boolean,org.objectweb.asm.AnnotationVisitor)>($i3, r1, 1, $r10);

        $i30 = (int) -1;

        i21 = i21 + $i30;

        goto label13;

     label14:
        if i15 == 0 goto label16;

        i23 = virtualinvoke r2.<org.objectweb.asm.ClassReader: int readUnsignedShort(int)>(i15);

        i24 = i15 + 2;

     label15:
        if i23 <= 0 goto label16;

        $i2 = i24 + 2;

        $r7 = virtualinvoke r2.<org.objectweb.asm.ClassReader: java.lang.String readUTF8(int,char[])>(i24, r1);

        $r8 = virtualinvoke $r6.<org.objectweb.asm.FieldVisitor: org.objectweb.asm.AnnotationVisitor visitAnnotation(java.lang.String,boolean)>($r7, 0);

        i24 = specialinvoke r2.<org.objectweb.asm.ClassReader: int readAnnotationValues(int,char[],boolean,org.objectweb.asm.AnnotationVisitor)>($i2, r1, 1, $r8);

        $i32 = (int) -1;

        i23 = i23 + $i32;

        goto label15;

     label16:
        if r22 == null goto label17;

        r24 = r22.<org.objectweb.asm.Attribute: org.objectweb.asm.Attribute next>;

        r22.<org.objectweb.asm.Attribute: org.objectweb.asm.Attribute next> = null;

        virtualinvoke $r6.<org.objectweb.asm.FieldVisitor: void visitAttribute(org.objectweb.asm.Attribute)>(r22);

        r22 = r24;

        goto label16;

     label17:
        virtualinvoke $r6.<org.objectweb.asm.FieldVisitor: void visitEnd()>();

        return i20;
    }

    private int readMethod(org.objectweb.asm.ClassVisitor, org.objectweb.asm.Context, int)
    {
        org.objectweb.asm.MethodWriter r33;
        org.objectweb.asm.ClassWriter $r12;
        org.objectweb.asm.AnnotationVisitor $r8, $r10, $r11;
        org.objectweb.asm.Context r0;
        org.objectweb.asm.Attribute $r28, r32, r34;
        java.lang.String $r3, $r4, $r7, $r9, $r14, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r29, r31;
        char[] r1;
        org.objectweb.asm.MethodVisitor $r6;
        int[] $r15;
        org.objectweb.asm.ClassVisitor r5;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, z11, $z12;
        org.objectweb.asm.ClassReader r2, $r13;
        java.lang.String[] r30;
        org.objectweb.asm.Attribute[] $r27;
        int $i0, $i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, i22, i23, i24, i25, i26, i27, i28, i29, i30, i31, i32, i33, $i34, $i35, $i36, i37, i38, i39, i40, i41, i42, $i44, $i46, $i48, $i50, $i52, $i54;

        r2 := @this: org.objectweb.asm.ClassReader;

        r5 := @parameter0: org.objectweb.asm.ClassVisitor;

        r0 := @parameter1: org.objectweb.asm.Context;

        i22 := @parameter2: int;

        r1 = r0.<org.objectweb.asm.Context: char[] buffer>;

        i23 = virtualinvoke r2.<org.objectweb.asm.ClassReader: int readUnsignedShort(int)>(i22);

        $i0 = i22 + 2;

        $r3 = virtualinvoke r2.<org.objectweb.asm.ClassReader: java.lang.String readUTF8(int,char[])>($i0, r1);

        $i1 = i22 + 4;

        $r4 = virtualinvoke r2.<org.objectweb.asm.ClassReader: java.lang.String readUTF8(int,char[])>($i1, r1);

        i24 = i22 + 6;

        i25 = 0;

        i26 = 0;

        r30 = null;

        r31 = null;

        i27 = 0;

        i28 = 0;

        i29 = 0;

        i30 = 0;

        i31 = 0;

        i2 = i24;

        r32 = null;

        i32 = virtualinvoke r2.<org.objectweb.asm.ClassReader: int readUnsignedShort(int)>(i24);

     label01:
        if i32 <= 0 goto label15;

        $i12 = i24 + 2;

        $r16 = virtualinvoke r2.<org.objectweb.asm.ClassReader: java.lang.String readUTF8(int,char[])>($i12, r1);

        $r17 = "Code";

        $z1 = virtualinvoke $r17.<java.lang.String: boolean equals(java.lang.Object)>($r16);

        if $z1 == 0 goto label02;

        $i20 = r0.<org.objectweb.asm.Context: int flags>;

        $i21 = $i20 & 1;

        if $i21 != 0 goto label14;

        i25 = i24 + 8;

        goto label14;

     label02:
        $r18 = "Exceptions";

        $z2 = virtualinvoke $r18.<java.lang.String: boolean equals(java.lang.Object)>($r16);

        if $z2 == 0 goto label05;

        $i17 = i24 + 8;

        $i18 = virtualinvoke r2.<org.objectweb.asm.ClassReader: int readUnsignedShort(int)>($i17);

        r30 = newarray (java.lang.String)[$i18];

        i26 = i24 + 10;

        i33 = 0;

     label03:
        $i19 = lengthof r30;

        if i33 >= $i19 goto label04;

        $r29 = virtualinvoke r2.<org.objectweb.asm.ClassReader: java.lang.String readClass(int,char[])>(i26, r1);

        r30[i33] = $r29;

        i26 = i26 + 2;

        i33 = i33 + 1;

        goto label03;

     label04:
        goto label14;

     label05:
        $r19 = "Signature";

        $z3 = virtualinvoke $r19.<java.lang.String: boolean equals(java.lang.Object)>($r16);

        if $z3 == 0 goto label06;

        $i16 = i24 + 8;

        r31 = virtualinvoke r2.<org.objectweb.asm.ClassReader: java.lang.String readUTF8(int,char[])>($i16, r1);

        goto label14;

     label06:
        $r20 = "Deprecated";

        $z4 = virtualinvoke $r20.<java.lang.String: boolean equals(java.lang.Object)>($r16);

        if $z4 == 0 goto label07;

        i23 = i23 | 131072;

        goto label14;

     label07:
        $r21 = "RuntimeVisibleAnnotations";

        $z5 = virtualinvoke $r21.<java.lang.String: boolean equals(java.lang.Object)>($r16);

        if $z5 == 0 goto label08;

        i27 = i24 + 8;

        goto label14;

     label08:
        $r22 = "AnnotationDefault";

        $z6 = virtualinvoke $r22.<java.lang.String: boolean equals(java.lang.Object)>($r16);

        if $z6 == 0 goto label09;

        i29 = i24 + 8;

        goto label14;

     label09:
        $r23 = "Synthetic";

        $z7 = virtualinvoke $r23.<java.lang.String: boolean equals(java.lang.Object)>($r16);

        if $z7 == 0 goto label10;

        i23 = i23 | 266240;

        goto label14;

     label10:
        $r24 = "RuntimeInvisibleAnnotations";

        $z8 = virtualinvoke $r24.<java.lang.String: boolean equals(java.lang.Object)>($r16);

        if $z8 == 0 goto label11;

        i28 = i24 + 8;

        goto label14;

     label11:
        $r25 = "RuntimeVisibleParameterAnnotations";

        $z9 = virtualinvoke $r25.<java.lang.String: boolean equals(java.lang.Object)>($r16);

        if $z9 == 0 goto label12;

        i30 = i24 + 8;

        goto label14;

     label12:
        $r26 = "RuntimeInvisibleParameterAnnotations";

        $z10 = virtualinvoke $r26.<java.lang.String: boolean equals(java.lang.Object)>($r16);

        if $z10 == 0 goto label13;

        i31 = i24 + 8;

        goto label14;

     label13:
        $r27 = r0.<org.objectweb.asm.Context: org.objectweb.asm.Attribute[] attrs>;

        $i14 = i24 + 8;

        $i13 = i24 + 4;

        $i15 = virtualinvoke r2.<org.objectweb.asm.ClassReader: int readInt(int)>($i13);

        $i44 = (int) -1;

        $r28 = specialinvoke r2.<org.objectweb.asm.ClassReader: org.objectweb.asm.Attribute readAttribute(org.objectweb.asm.Attribute[],java.lang.String,int,int,char[],int,org.objectweb.asm.Label[])>($r27, $r16, $i14, $i15, r1, $i44, null);

        if $r28 == null goto label14;

        $r28.<org.objectweb.asm.Attribute: org.objectweb.asm.Attribute next> = r32;

        r32 = $r28;

     label14:
        $i34 = i24 + 4;

        $i35 = virtualinvoke r2.<org.objectweb.asm.ClassReader: int readInt(int)>($i34);

        $i36 = 6 + $i35;

        i24 = i24 + $i36;

        $i46 = (int) -1;

        i32 = i32 + $i46;

        goto label01;

     label15:
        i37 = i24 + 2;

        $r6 = virtualinvoke r5.<org.objectweb.asm.ClassVisitor: org.objectweb.asm.MethodVisitor visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])>(i23, $r3, $r4, r31, r30);

        if $r6 != null goto label16;

        return i37;

     label16:
        $z0 = $r6 instanceof org.objectweb.asm.MethodWriter;

        if $z0 == 0 goto label23;

        r33 = (org.objectweb.asm.MethodWriter) $r6;

        $r12 = r33.<org.objectweb.asm.MethodWriter: org.objectweb.asm.ClassWriter cw>;

        $r13 = $r12.<org.objectweb.asm.ClassWriter: org.objectweb.asm.ClassReader cr>;

        if $r13 != r2 goto label23;

        $r14 = r33.<org.objectweb.asm.MethodWriter: java.lang.String signature>;

        if r31 != $r14 goto label23;

        z11 = 0;

        if r30 != null goto label19;

        $i11 = r33.<org.objectweb.asm.MethodWriter: int exceptionCount>;

        if $i11 != 0 goto label17;

        $z12 = 1;

        goto label18;

     label17:
        $z12 = 0;

     label18:
        z11 = $z12;

        goto label22;

     label19:
        $i6 = lengthof r30;

        $i5 = r33.<org.objectweb.asm.MethodWriter: int exceptionCount>;

        if $i6 != $i5 goto label22;

        z11 = 1;

        $i8 = lengthof r30;

        i38 = $i8 - 1;

     label20:
        if i38 < 0 goto label22;

        $i48 = (int) -2;

        i26 = i26 + $i48;

        $r15 = r33.<org.objectweb.asm.MethodWriter: int[] exceptions>;

        $i9 = $r15[i38];

        $i10 = virtualinvoke r2.<org.objectweb.asm.ClassReader: int readUnsignedShort(int)>(i26);

        if $i9 == $i10 goto label21;

        z11 = 0;

        goto label22;

     label21:
        $i50 = (int) -1;

        i38 = i38 + $i50;

        goto label20;

     label22:
        if z11 == 0 goto label23;

        r33.<org.objectweb.asm.MethodWriter: int classReaderOffset> = i2;

        $i7 = i37 - i2;

        r33.<org.objectweb.asm.MethodWriter: int classReaderLength> = $i7;

        return i37;

     label23:
        if i29 == 0 goto label24;

        $r11 = virtualinvoke $r6.<org.objectweb.asm.MethodVisitor: org.objectweb.asm.AnnotationVisitor visitAnnotationDefault()>();

        specialinvoke r2.<org.objectweb.asm.ClassReader: int readAnnotationValue(int,char[],java.lang.String,org.objectweb.asm.AnnotationVisitor)>(i29, r1, null, $r11);

        if $r11 == null goto label24;

        virtualinvoke $r11.<org.objectweb.asm.AnnotationVisitor: void visitEnd()>();

     label24:
        if i27 == 0 goto label26;

        i39 = virtualinvoke r2.<org.objectweb.asm.ClassReader: int readUnsignedShort(int)>(i27);

        i40 = i27 + 2;

     label25:
        if i39 <= 0 goto label26;

        $i4 = i40 + 2;

        $r9 = virtualinvoke r2.<org.objectweb.asm.ClassReader: java.lang.String readUTF8(int,char[])>(i40, r1);

        $r10 = virtualinvoke $r6.<org.objectweb.asm.MethodVisitor: org.objectweb.asm.AnnotationVisitor visitAnnotation(java.lang.String,boolean)>($r9, 1);

        i40 = specialinvoke r2.<org.objectweb.asm.ClassReader: int readAnnotationValues(int,char[],boolean,org.objectweb.asm.AnnotationVisitor)>($i4, r1, 1, $r10);

        $i52 = (int) -1;

        i39 = i39 + $i52;

        goto label25;

     label26:
        if i28 == 0 goto label28;

        i41 = virtualinvoke r2.<org.objectweb.asm.ClassReader: int readUnsignedShort(int)>(i28);

        i42 = i28 + 2;

     label27:
        if i41 <= 0 goto label28;

        $i3 = i42 + 2;

        $r7 = virtualinvoke r2.<org.objectweb.asm.ClassReader: java.lang.String readUTF8(int,char[])>(i42, r1);

        $r8 = virtualinvoke $r6.<org.objectweb.asm.MethodVisitor: org.objectweb.asm.AnnotationVisitor visitAnnotation(java.lang.String,boolean)>($r7, 0);

        i42 = specialinvoke r2.<org.objectweb.asm.ClassReader: int readAnnotationValues(int,char[],boolean,org.objectweb.asm.AnnotationVisitor)>($i3, r1, 1, $r8);

        $i54 = (int) -1;

        i41 = i41 + $i54;

        goto label27;

     label28:
        if i30 == 0 goto label29;

        specialinvoke r2.<org.objectweb.asm.ClassReader: void readParameterAnnotations(int,java.lang.String,char[],boolean,org.objectweb.asm.MethodVisitor)>(i30, $r4, r1, 1, $r6);

     label29:
        if i31 == 0 goto label30;

        specialinvoke r2.<org.objectweb.asm.ClassReader: void readParameterAnnotations(int,java.lang.String,char[],boolean,org.objectweb.asm.MethodVisitor)>(i31, $r4, r1, 0, $r6);

     label30:
        if r32 == null goto label31;

        r34 = r32.<org.objectweb.asm.Attribute: org.objectweb.asm.Attribute next>;

        r32.<org.objectweb.asm.Attribute: org.objectweb.asm.Attribute next> = null;

        virtualinvoke $r6.<org.objectweb.asm.MethodVisitor: void visitAttribute(org.objectweb.asm.Attribute)>(r32);

        r32 = r34;

        goto label30;

     label31:
        if i25 == 0 goto label32;

        r0.<org.objectweb.asm.Context: int access> = i23;

        r0.<org.objectweb.asm.Context: java.lang.String name> = $r3;

        r0.<org.objectweb.asm.Context: java.lang.String desc> = $r4;

        virtualinvoke $r6.<org.objectweb.asm.MethodVisitor: void visitCode()>();

        specialinvoke r2.<org.objectweb.asm.ClassReader: void readCode(org.objectweb.asm.MethodVisitor,org.objectweb.asm.Context,int)>($r6, r0, i25);

     label32:
        virtualinvoke $r6.<org.objectweb.asm.MethodVisitor: void visitEnd()>();

        return i37;
    }

    private void readCode(org.objectweb.asm.MethodVisitor, org.objectweb.asm.Context, int)
    {
        org.objectweb.asm.Context r2, r63;
        int[] $r17, $r18, $r20, $r24, $r26, $r60, r67, r71;
        int $i0, $i1, $i2, $i3, $i4, i5, i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i32, $i34, $i35, $i36, $i37, $i38, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i63, $i66, $i67, $i68, $i71, $i72, $i73, $i74, $i75, $i77, $i78, $i79, $i80, $i81, $i82, $i83, $i84, $i85, $i86, $i87, $i88, $i89, $i90, $i91, $i92, $i93, $i94, $i95, $i96, $i97, $i98, $i99, $i100, $i103, $i105, $i107, $i108, $i111, $i112, $i113, $i114, $i115, $i116, $i117, $i118, $i120, $i121, $i122, $i123, $i125, $i126, $i127, $i130, $i131, $i132, $i133, $i134, $i135, $i136, $i137, $i138, $i139, $i140, $i141, $i142, $i143, $i144, $i145, $i146, $i147, $i148, $i149, $i150, $i151, $i152, $i153, $i154, $i155, $i156, $i157, $i158, $i159, $i160, $i161, $i162, $i163, $i164, $i165, $i166, $i167, $i168, $i169, $i170, $i171, $i172, $i173, $i176, $i178, $i179, $i180, $i181, $i182, $i183, $i184, $i185, $i186, $i187, $i188, $i189, $i190, $i191, $i192, $i193, $i194, $i195, $i196, $i197, $i198, $i199, $i200, $i201, $i203, i204, i205, i206, i209, i210, i211, i212, i213, i214, i215, i216, i217, i218, i219, i220, i221, i222, i223, i224, i225, $i226, $i227, $i228, i229, $i230, $i231, i232, i233, i234, i235, i237, i238, i239, i240, i241, i242, i243, i244, i245, i246, i247, i248, i249, i250, i251, i252, i253, i254, i255, i256, $i257, $i258, $i259, $i261, $i262, $i263, $i265, $i267, $i269, $i271, $i273, $i275, $i277, $i279, $i280, $i282, $i284, $i286, $i288, $i290, $i292, $i293, $i294, $i295, $i296, $i298, $i299, $i301, $i302, $i303, $i304, $i306, $i307, $i308, $i310, $i311, $i312, $i313, $i314, $i315, $i317, $i318, $i319, $i320, $i321, $i322, $i324, $i325, $i327, $i329, $i331, $i333, $i335;
        org.objectweb.asm.Label[] r4, r66, r68;
        java.lang.String $r21, $r22, $r25, $r27, $r28, $r29, $r30, $r37, $r38, $r39, $r40, $r41, $r42, $r46, $r61, r72, $r73, $r74;
        org.objectweb.asm.Handle r69;
        char[] r3;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, z6, $z7, z8, z9, z10;
        byte[] r1, $r8, $r62;
        byte $b30, $b31, $b33, $b62, $b64, $b69, $b101, $b106, $b109, $b124, $b128, $b174, $b175, $b177;
        java.lang.Object[] $r31, $r32, $r33, $r34, $r35, $r36, r70;
        short $s39, $s65, $s70, $s76, $s102, $s104, $s110, $s119, $s129, $s202, s207, s208, s236, $s260, $s264, $s281, $s291, $s305, $s309, $s316, $s323, $s326;
        org.objectweb.asm.Attribute $r45, $r48, $r49, r64, r77;
        org.objectweb.asm.MethodVisitor r6;
        org.objectweb.asm.ClassReader r0;
        org.objectweb.asm.Attribute[] $r43, $r44, $r47;
        java.lang.Object $r13, $r14, $r19, $r23;
        org.objectweb.asm.Label $r5, $r7, $r9, $r10, $r11, $r12, $r15, $r16, $r50, $r51, $r52, $r53, $r54, $r55, $r56, $r57, $r58, $r59, r65, $r75, $r76;

        r0 := @this: org.objectweb.asm.ClassReader;

        r6 := @parameter0: org.objectweb.asm.MethodVisitor;

        r2 := @parameter1: org.objectweb.asm.Context;

        i204 := @parameter2: int;

        r1 = r0.<org.objectweb.asm.ClassReader: byte[] b>;

        r3 = r2.<org.objectweb.asm.Context: char[] buffer>;

        $i0 = virtualinvoke r0.<org.objectweb.asm.ClassReader: int readUnsignedShort(int)>(i204);

        $i1 = i204 + 2;

        $i2 = virtualinvoke r0.<org.objectweb.asm.ClassReader: int readUnsignedShort(int)>($i1);

        $i3 = i204 + 4;

        $i4 = virtualinvoke r0.<org.objectweb.asm.ClassReader: int readInt(int)>($i3);

        i205 = i204 + 8;

        i5 = i205;

        i6 = i205 + $i4;

        $i7 = $i4 + 2;

        r4 = newarray (org.objectweb.asm.Label)[$i7];

        $i8 = $i4 + 1;

        virtualinvoke r0.<org.objectweb.asm.ClassReader: org.objectweb.asm.Label readLabel(int,org.objectweb.asm.Label[])>($i8, r4);

     label01:
        if i205 >= i6 goto label18;

        i206 = i205 - i5;

        $b174 = r1[i205];

        $s260 = (short) $b174;

        s207 = $s260 & 255;

        $r62 = <org.objectweb.asm.ClassWriter: byte[] TYPE>;

        $i261 = (int) s207;

        $b175 = $r62[$i261];

        $i262 = (int) $b175;

        tableswitch($i262)
        {
            case 0: goto label02;
            case 1: goto label13;
            case 2: goto label14;
            case 3: goto label13;
            case 4: goto label02;
            case 5: goto label14;
            case 6: goto label14;
            case 7: goto label15;
            case 8: goto label15;
            case 9: goto label03;
            case 10: goto label04;
            case 11: goto label13;
            case 12: goto label14;
            case 13: goto label14;
            case 14: goto label07;
            case 15: goto label10;
            case 16: goto label16;
            case 17: goto label05;
            default: goto label16;
        };

     label02:
        i205 = i205 + 1;

        goto label17;

     label03:
        $i201 = i205 + 1;

        $s202 = virtualinvoke r0.<org.objectweb.asm.ClassReader: short readShort(int)>($i201);

        $i263 = (int) $s202;

        $i203 = i206 + $i263;

        virtualinvoke r0.<org.objectweb.asm.ClassReader: org.objectweb.asm.Label readLabel(int,org.objectweb.asm.Label[])>($i203, r4);

        i205 = i205 + 3;

        goto label17;

     label04:
        $i198 = i205 + 1;

        $i199 = virtualinvoke r0.<org.objectweb.asm.ClassReader: int readInt(int)>($i198);

        $i200 = i206 + $i199;

        virtualinvoke r0.<org.objectweb.asm.ClassReader: org.objectweb.asm.Label readLabel(int,org.objectweb.asm.Label[])>($i200, r4);

        i205 = i205 + 5;

        goto label17;

     label05:
        $i176 = i205 + 1;

        $b177 = r1[$i176];

        $s264 = (short) $b177;

        s208 = $s264 & 255;

        $i265 = (int) s208;

        if $i265 != 132 goto label06;

        i205 = i205 + 6;

        goto label17;

     label06:
        i205 = i205 + 4;

        goto label17;

     label07:
        $i187 = i205 + 4;

        $i186 = i206 & 3;

        i209 = $i187 - $i186;

        $i188 = virtualinvoke r0.<org.objectweb.asm.ClassReader: int readInt(int)>(i209);

        $i189 = i206 + $i188;

        virtualinvoke r0.<org.objectweb.asm.ClassReader: org.objectweb.asm.Label readLabel(int,org.objectweb.asm.Label[])>($i189, r4);

        $i190 = i209 + 8;

        $i191 = virtualinvoke r0.<org.objectweb.asm.ClassReader: int readInt(int)>($i190);

        $i192 = i209 + 4;

        $i193 = virtualinvoke r0.<org.objectweb.asm.ClassReader: int readInt(int)>($i192);

        $i194 = $i191 - $i193;

        i210 = $i194 + 1;

     label08:
        if i210 <= 0 goto label09;

        $i195 = i209 + 12;

        $i196 = virtualinvoke r0.<org.objectweb.asm.ClassReader: int readInt(int)>($i195);

        $i197 = i206 + $i196;

        virtualinvoke r0.<org.objectweb.asm.ClassReader: org.objectweb.asm.Label readLabel(int,org.objectweb.asm.Label[])>($i197, r4);

        i209 = i209 + 4;

        $i267 = (int) -1;

        i210 = i210 + $i267;

        goto label08;

     label09:
        i205 = i209 + 12;

        goto label17;

     label10:
        $i179 = i205 + 4;

        $i178 = i206 & 3;

        i211 = $i179 - $i178;

        $i180 = virtualinvoke r0.<org.objectweb.asm.ClassReader: int readInt(int)>(i211);

        $i181 = i206 + $i180;

        virtualinvoke r0.<org.objectweb.asm.ClassReader: org.objectweb.asm.Label readLabel(int,org.objectweb.asm.Label[])>($i181, r4);

        $i182 = i211 + 4;

        i212 = virtualinvoke r0.<org.objectweb.asm.ClassReader: int readInt(int)>($i182);

     label11:
        if i212 <= 0 goto label12;

        $i183 = i211 + 12;

        $i184 = virtualinvoke r0.<org.objectweb.asm.ClassReader: int readInt(int)>($i183);

        $i185 = i206 + $i184;

        virtualinvoke r0.<org.objectweb.asm.ClassReader: org.objectweb.asm.Label readLabel(int,org.objectweb.asm.Label[])>($i185, r4);

        i211 = i211 + 8;

        $i269 = (int) -1;

        i212 = i212 + $i269;

        goto label11;

     label12:
        i205 = i211 + 8;

        goto label17;

     label13:
        i205 = i205 + 2;

        goto label17;

     label14:
        i205 = i205 + 3;

        goto label17;

     label15:
        i205 = i205 + 5;

        goto label17;

     label16:
        i205 = i205 + 4;

     label17:
        goto label01;

     label18:
        i213 = virtualinvoke r0.<org.objectweb.asm.ClassReader: int readUnsignedShort(int)>(i205);

     label19:
        if i213 <= 0 goto label20;

        $i165 = i205 + 2;

        $i166 = virtualinvoke r0.<org.objectweb.asm.ClassReader: int readUnsignedShort(int)>($i165);

        $r57 = virtualinvoke r0.<org.objectweb.asm.ClassReader: org.objectweb.asm.Label readLabel(int,org.objectweb.asm.Label[])>($i166, r4);

        $i167 = i205 + 4;

        $i168 = virtualinvoke r0.<org.objectweb.asm.ClassReader: int readUnsignedShort(int)>($i167);

        $r58 = virtualinvoke r0.<org.objectweb.asm.ClassReader: org.objectweb.asm.Label readLabel(int,org.objectweb.asm.Label[])>($i168, r4);

        $i169 = i205 + 6;

        $i170 = virtualinvoke r0.<org.objectweb.asm.ClassReader: int readUnsignedShort(int)>($i169);

        $r59 = virtualinvoke r0.<org.objectweb.asm.ClassReader: org.objectweb.asm.Label readLabel(int,org.objectweb.asm.Label[])>($i170, r4);

        $r60 = r0.<org.objectweb.asm.ClassReader: int[] items>;

        $i171 = i205 + 8;

        $i172 = virtualinvoke r0.<org.objectweb.asm.ClassReader: int readUnsignedShort(int)>($i171);

        $i173 = $r60[$i172];

        $r61 = virtualinvoke r0.<org.objectweb.asm.ClassReader: java.lang.String readUTF8(int,char[])>($i173, r3);

        virtualinvoke r6.<org.objectweb.asm.MethodVisitor: void visitTryCatchBlock(org.objectweb.asm.Label,org.objectweb.asm.Label,org.objectweb.asm.Label,java.lang.String)>($r57, $r58, $r59, $r61);

        i205 = i205 + 8;

        $i271 = (int) -1;

        i213 = i213 + $i271;

        goto label19;

     label20:
        i214 = i205 + 2;

        i215 = 0;

        i216 = 0;

        z6 = 1;

        z10 = 1;

        z9 = 1;

        $i9 = r2.<org.objectweb.asm.Context: int flags>;

        $i10 = $i9 & 8;

        if $i10 == 0 goto label21;

        $z7 = 1;

        goto label22;

     label21:
        $z7 = 0;

     label22:
        z8 = $z7;

        i217 = 0;

        i218 = 0;

        i219 = 0;

        r63 = null;

        r64 = null;

        i220 = virtualinvoke r0.<org.objectweb.asm.ClassReader: int readUnsignedShort(int)>(i214);

     label23:
        if i220 <= 0 goto label39;

        $i130 = i214 + 2;

        $r37 = virtualinvoke r0.<org.objectweb.asm.ClassReader: java.lang.String readUTF8(int,char[])>($i130, r3);

        $r38 = "LocalVariableTable";

        $z0 = virtualinvoke $r38.<java.lang.String: boolean equals(java.lang.Object)>($r37);

        if $z0 == 0 goto label28;

        $i153 = r2.<org.objectweb.asm.Context: int flags>;

        $i154 = $i153 & 2;

        if $i154 != 0 goto label38;

        i215 = i214 + 8;

        $i155 = i214 + 8;

        i221 = virtualinvoke r0.<org.objectweb.asm.ClassReader: int readUnsignedShort(int)>($i155);

        i222 = i214;

     label24:
        if i221 <= 0 goto label27;

        $i156 = i222 + 10;

        $i157 = virtualinvoke r0.<org.objectweb.asm.ClassReader: int readUnsignedShort(int)>($i156);

        $r53 = r4[$i157];

        if $r53 != null goto label25;

        $r56 = virtualinvoke r0.<org.objectweb.asm.ClassReader: org.objectweb.asm.Label readLabel(int,org.objectweb.asm.Label[])>($i157, r4);

        $i162 = $r56.<org.objectweb.asm.Label: int status>;

        $i163 = $i162 | 1;

        $r56.<org.objectweb.asm.Label: int status> = $i163;

     label25:
        $i158 = i222 + 12;

        $i159 = virtualinvoke r0.<org.objectweb.asm.ClassReader: int readUnsignedShort(int)>($i158);

        $i164 = $i157 + $i159;

        $r54 = r4[$i164];

        if $r54 != null goto label26;

        $r55 = virtualinvoke r0.<org.objectweb.asm.ClassReader: org.objectweb.asm.Label readLabel(int,org.objectweb.asm.Label[])>($i164, r4);

        $i160 = $r55.<org.objectweb.asm.Label: int status>;

        $i161 = $i160 | 1;

        $r55.<org.objectweb.asm.Label: int status> = $i161;

     label26:
        i222 = i222 + 10;

        $i273 = (int) -1;

        i221 = i221 + $i273;

        goto label24;

     label27:
        goto label38;

     label28:
        $r39 = "LocalVariableTypeTable";

        $z1 = virtualinvoke $r39.<java.lang.String: boolean equals(java.lang.Object)>($r37);

        if $z1 == 0 goto label29;

        i216 = i214 + 8;

        goto label38;

     label29:
        $r40 = "LineNumberTable";

        $z2 = virtualinvoke $r40.<java.lang.String: boolean equals(java.lang.Object)>($r37);

        if $z2 == 0 goto label33;

        $i144 = r2.<org.objectweb.asm.Context: int flags>;

        $i145 = $i144 & 2;

        if $i145 != 0 goto label38;

        $i146 = i214 + 8;

        i223 = virtualinvoke r0.<org.objectweb.asm.ClassReader: int readUnsignedShort(int)>($i146);

        i224 = i214;

     label30:
        if i223 <= 0 goto label32;

        $i147 = i224 + 10;

        $i148 = virtualinvoke r0.<org.objectweb.asm.ClassReader: int readUnsignedShort(int)>($i147);

        $r50 = r4[$i148];

        if $r50 != null goto label31;

        $r52 = virtualinvoke r0.<org.objectweb.asm.ClassReader: org.objectweb.asm.Label readLabel(int,org.objectweb.asm.Label[])>($i148, r4);

        $i151 = $r52.<org.objectweb.asm.Label: int status>;

        $i152 = $i151 | 1;

        $r52.<org.objectweb.asm.Label: int status> = $i152;

     label31:
        $r51 = r4[$i148];

        $i149 = i224 + 12;

        $i150 = virtualinvoke r0.<org.objectweb.asm.ClassReader: int readUnsignedShort(int)>($i149);

        $r51.<org.objectweb.asm.Label: int line> = $i150;

        i224 = i224 + 4;

        $i275 = (int) -1;

        i223 = i223 + $i275;

        goto label30;

     label32:
        goto label38;

     label33:
        $r41 = "StackMapTable";

        $z3 = virtualinvoke $r41.<java.lang.String: boolean equals(java.lang.Object)>($r37);

        if $z3 == 0 goto label34;

        $i140 = r2.<org.objectweb.asm.Context: int flags>;

        $i141 = $i140 & 4;

        if $i141 != 0 goto label38;

        i217 = i214 + 10;

        $i142 = i214 + 4;

        i218 = virtualinvoke r0.<org.objectweb.asm.ClassReader: int readInt(int)>($i142);

        $i143 = i214 + 8;

        i219 = virtualinvoke r0.<org.objectweb.asm.ClassReader: int readUnsignedShort(int)>($i143);

        goto label38;

     label34:
        $r42 = "StackMap";

        $z4 = virtualinvoke $r42.<java.lang.String: boolean equals(java.lang.Object)>($r37);

        if $z4 == 0 goto label35;

        $i136 = r2.<org.objectweb.asm.Context: int flags>;

        $i137 = $i136 & 4;

        if $i137 != 0 goto label38;

        z6 = 0;

        z10 = 0;

        z9 = 0;

        i217 = i214 + 10;

        $i138 = i214 + 4;

        i218 = virtualinvoke r0.<org.objectweb.asm.ClassReader: int readInt(int)>($i138);

        $i139 = i214 + 8;

        i219 = virtualinvoke r0.<org.objectweb.asm.ClassReader: int readUnsignedShort(int)>($i139);

        goto label38;

     label35:
        i225 = 0;

     label36:
        $r43 = r2.<org.objectweb.asm.Context: org.objectweb.asm.Attribute[] attrs>;

        $i131 = lengthof $r43;

        if i225 >= $i131 goto label38;

        $r44 = r2.<org.objectweb.asm.Context: org.objectweb.asm.Attribute[] attrs>;

        $r45 = $r44[i225];

        $r46 = $r45.<org.objectweb.asm.Attribute: java.lang.String type>;

        $z5 = virtualinvoke $r46.<java.lang.String: boolean equals(java.lang.Object)>($r37);

        if $z5 == 0 goto label37;

        $r47 = r2.<org.objectweb.asm.Context: org.objectweb.asm.Attribute[] attrs>;

        $r48 = $r47[i225];

        $i133 = i214 + 8;

        $i132 = i214 + 4;

        $i134 = virtualinvoke r0.<org.objectweb.asm.ClassReader: int readInt(int)>($i132);

        $i135 = i5 - 8;

        $r49 = virtualinvoke $r48.<org.objectweb.asm.Attribute: org.objectweb.asm.Attribute read(org.objectweb.asm.ClassReader,int,int,char[],int,org.objectweb.asm.Label[])>(r0, $i133, $i134, r3, $i135, r4);

        if $r49 == null goto label37;

        $r49.<org.objectweb.asm.Attribute: org.objectweb.asm.Attribute next> = r64;

        r64 = $r49;

     label37:
        i225 = i225 + 1;

        goto label36;

     label38:
        $i226 = i214 + 4;

        $i227 = virtualinvoke r0.<org.objectweb.asm.ClassReader: int readInt(int)>($i226);

        $i228 = 6 + $i227;

        i214 = i214 + $i228;

        $i277 = (int) -1;

        i220 = i220 + $i277;

        goto label23;

     label39:
        if i217 == 0 goto label43;

        r63 = r2;

        $i279 = (int) -1;

        r2.<org.objectweb.asm.Context: int offset> = $i279;

        r2.<org.objectweb.asm.Context: int mode> = 0;

        r2.<org.objectweb.asm.Context: int localCount> = 0;

        r2.<org.objectweb.asm.Context: int localDiff> = 0;

        r2.<org.objectweb.asm.Context: int stackCount> = 0;

        $r35 = newarray (java.lang.Object)[$i2];

        r2.<org.objectweb.asm.Context: java.lang.Object[] local> = $r35;

        $r36 = newarray (java.lang.Object)[$i0];

        r2.<org.objectweb.asm.Context: java.lang.Object[] stack> = $r36;

        if z8 == 0 goto label40;

        specialinvoke r0.<org.objectweb.asm.ClassReader: void getImplicitFrame(org.objectweb.asm.Context)>(r2);

     label40:
        i229 = i217;

     label41:
        $i230 = i217 + i218;

        $i231 = $i230 - 2;

        if i229 >= $i231 goto label43;

        $b124 = r1[i229];

        $i280 = (int) $b124;

        if $i280 != 8 goto label42;

        $i125 = i229 + 1;

        $i126 = virtualinvoke r0.<org.objectweb.asm.ClassReader: int readUnsignedShort(int)>($i125);

        if $i126 < 0 goto label42;

        if $i126 >= $i4 goto label42;

        $i127 = i5 + $i126;

        $b128 = r1[$i127];

        $s281 = (short) $b128;

        $s129 = $s281 & 255;

        $i282 = (int) $s129;

        if $i282 != 187 goto label42;

        virtualinvoke r0.<org.objectweb.asm.ClassReader: org.objectweb.asm.Label readLabel(int,org.objectweb.asm.Label[])>($i126, r4);

     label42:
        i229 = i229 + 1;

        goto label41;

     label43:
        i232 = i5;

     label44:
        if i232 >= i6 goto label82;

        i233 = i232 - i5;

        r65 = r4[i233];

        if r65 == null goto label45;

        virtualinvoke r6.<org.objectweb.asm.MethodVisitor: void visitLabel(org.objectweb.asm.Label)>(r65);

        $i120 = r2.<org.objectweb.asm.Context: int flags>;

        $i121 = $i120 & 2;

        if $i121 != 0 goto label45;

        $i122 = r65.<org.objectweb.asm.Label: int line>;

        if $i122 <= 0 goto label45;

        $i123 = r65.<org.objectweb.asm.Label: int line>;

        virtualinvoke r6.<org.objectweb.asm.MethodVisitor: void visitLineNumber(int,org.objectweb.asm.Label)>($i123, r65);

     label45:
        if r63 == null goto label51;

        $i111 = r63.<org.objectweb.asm.Context: int offset>;

        if $i111 == i233 goto label46;

        $i118 = r63.<org.objectweb.asm.Context: int offset>;

        $i284 = (int) -1;

        if $i118 != $i284 goto label51;

     label46:
        $i112 = r63.<org.objectweb.asm.Context: int offset>;

        $i286 = (int) -1;

        if $i112 == $i286 goto label49;

        if z10 == 0 goto label47;

        if z8 == 0 goto label48;

     label47:
        $i114 = r63.<org.objectweb.asm.Context: int localCount>;

        $r32 = r63.<org.objectweb.asm.Context: java.lang.Object[] local>;

        $i113 = r63.<org.objectweb.asm.Context: int stackCount>;

        $r31 = r63.<org.objectweb.asm.Context: java.lang.Object[] stack>;

        $i288 = (int) -1;

        virtualinvoke r6.<org.objectweb.asm.MethodVisitor: void visitFrame(int,int,java.lang.Object[],int,java.lang.Object[])>($i288, $i114, $r32, $i113, $r31);

        goto label49;

     label48:
        $i117 = r63.<org.objectweb.asm.Context: int mode>;

        $i116 = r63.<org.objectweb.asm.Context: int localDiff>;

        $r34 = r63.<org.objectweb.asm.Context: java.lang.Object[] local>;

        $i115 = r63.<org.objectweb.asm.Context: int stackCount>;

        $r33 = r63.<org.objectweb.asm.Context: java.lang.Object[] stack>;

        virtualinvoke r6.<org.objectweb.asm.MethodVisitor: void visitFrame(int,int,java.lang.Object[],int,java.lang.Object[])>($i117, $i116, $r34, $i115, $r33);

     label49:
        if i219 <= 0 goto label50;

        i217 = specialinvoke r0.<org.objectweb.asm.ClassReader: int readFrame(int,boolean,boolean,org.objectweb.asm.Label[],org.objectweb.asm.Context)>(i217, z9, z8, r4, r63);

        $i290 = (int) -1;

        i219 = i219 + $i290;

        goto label45;

     label50:
        r63 = null;

        goto label45;

     label51:
        $b30 = r1[i232];

        $s291 = (short) $b30;

        $s119 = $s291 & 255;

        $r8 = <org.objectweb.asm.ClassWriter: byte[] TYPE>;

        $i292 = (int) $s119;

        $b31 = $r8[$i292];

        $i293 = (int) $b31;

        tableswitch($i293)
        {
            case 0: goto label52;
            case 1: goto label67;
            case 2: goto label68;
            case 3: goto label66;
            case 4: goto label53;
            case 5: goto label78;
            case 6: goto label71;
            case 7: goto label71;
            case 8: goto label75;
            case 9: goto label56;
            case 10: goto label57;
            case 11: goto label69;
            case 12: goto label70;
            case 13: goto label79;
            case 14: goto label60;
            case 15: goto label63;
            case 16: goto label80;
            case 17: goto label58;
            default: goto label80;
        };

     label52:
        $i294 = (int) $s119;

        virtualinvoke r6.<org.objectweb.asm.MethodVisitor: void visitInsn(int)>($i294);

        i232 = i232 + 1;

        goto label81;

     label53:
        $i295 = (int) $s119;

        if $i295 <= 54 goto label54;

        $i296 = (int) $s119;

        $i298 = (int) -59;

        i234 = $i296 + $i298;

        $i97 = i234 >> 2;

        $i99 = 54 + $i97;

        $i98 = i234 & 3;

        virtualinvoke r6.<org.objectweb.asm.MethodVisitor: void visitVarInsn(int,int)>($i99, $i98);

        goto label55;

     label54:
        $i299 = (int) $s119;

        $i301 = (int) -26;

        i235 = $i299 + $i301;

        $i94 = i235 >> 2;

        $i96 = 21 + $i94;

        $i95 = i235 & 3;

        virtualinvoke r6.<org.objectweb.asm.MethodVisitor: void visitVarInsn(int,int)>($i96, $i95);

     label55:
        i232 = i232 + 1;

        goto label81;

     label56:
        $i75 = i232 + 1;

        $s76 = virtualinvoke r0.<org.objectweb.asm.ClassReader: short readShort(int)>($i75);

        $i302 = (int) $s76;

        $i77 = i233 + $i302;

        $r16 = r4[$i77];

        $i303 = (int) $s119;

        virtualinvoke r6.<org.objectweb.asm.MethodVisitor: void visitJumpInsn(int,org.objectweb.asm.Label)>($i303, $r16);

        i232 = i232 + 3;

        goto label81;

     label57:
        $i304 = (int) $s119;

        $i72 = $i304 - 33;

        $i71 = i232 + 1;

        $i73 = virtualinvoke r0.<org.objectweb.asm.ClassReader: int readInt(int)>($i71);

        $i74 = i233 + $i73;

        $r15 = r4[$i74];

        virtualinvoke r6.<org.objectweb.asm.MethodVisitor: void visitJumpInsn(int,org.objectweb.asm.Label)>($i72, $r15);

        i232 = i232 + 5;

        goto label81;

     label58:
        $i32 = i232 + 1;

        $b33 = r1[$i32];

        $s305 = (short) $b33;

        s236 = $s305 & 255;

        $i306 = (int) s236;

        if $i306 != 132 goto label59;

        $i36 = i232 + 2;

        $i37 = virtualinvoke r0.<org.objectweb.asm.ClassReader: int readUnsignedShort(int)>($i36);

        $i38 = i232 + 4;

        $s39 = virtualinvoke r0.<org.objectweb.asm.ClassReader: short readShort(int)>($i38);

        $i307 = (int) $s39;

        virtualinvoke r6.<org.objectweb.asm.MethodVisitor: void visitIincInsn(int,int)>($i37, $i307);

        i232 = i232 + 6;

        goto label81;

     label59:
        $i34 = i232 + 2;

        $i35 = virtualinvoke r0.<org.objectweb.asm.ClassReader: int readUnsignedShort(int)>($i34);

        $i308 = (int) s236;

        virtualinvoke r6.<org.objectweb.asm.MethodVisitor: void visitVarInsn(int,int)>($i308, $i35);

        i232 = i232 + 4;

        goto label81;

     label60:
        $i50 = i232 + 4;

        $i49 = i233 & 3;

        i237 = $i50 - $i49;

        $i51 = virtualinvoke r0.<org.objectweb.asm.ClassReader: int readInt(int)>(i237);

        i238 = i233 + $i51;

        $i52 = i237 + 4;

        $i53 = virtualinvoke r0.<org.objectweb.asm.ClassReader: int readInt(int)>($i52);

        $i54 = i237 + 8;

        $i55 = virtualinvoke r0.<org.objectweb.asm.ClassReader: int readInt(int)>($i54);

        $i56 = $i55 - $i53;

        $i57 = $i56 + 1;

        r66 = newarray (org.objectweb.asm.Label)[$i57];

        i232 = i237 + 12;

        i239 = 0;

     label61:
        $i58 = lengthof r66;

        if i239 >= $i58 goto label62;

        $i59 = virtualinvoke r0.<org.objectweb.asm.ClassReader: int readInt(int)>(i232);

        $i60 = i233 + $i59;

        $r12 = r4[$i60];

        r66[i239] = $r12;

        i232 = i232 + 4;

        i239 = i239 + 1;

        goto label61;

     label62:
        $r11 = r4[i238];

        virtualinvoke r6.<org.objectweb.asm.MethodVisitor: void visitTableSwitchInsn(int,int,org.objectweb.asm.Label,org.objectweb.asm.Label[])>($i53, $i55, $r11, r66);

        goto label81;

     label63:
        $i41 = i232 + 4;

        $i40 = i233 & 3;

        i240 = $i41 - $i40;

        $i42 = virtualinvoke r0.<org.objectweb.asm.ClassReader: int readInt(int)>(i240);

        i241 = i233 + $i42;

        $i43 = i240 + 4;

        $i44 = virtualinvoke r0.<org.objectweb.asm.ClassReader: int readInt(int)>($i43);

        r67 = newarray (int)[$i44];

        r68 = newarray (org.objectweb.asm.Label)[$i44];

        i232 = i240 + 8;

        i242 = 0;

     label64:
        if i242 >= $i44 goto label65;

        $i45 = virtualinvoke r0.<org.objectweb.asm.ClassReader: int readInt(int)>(i232);

        r67[i242] = $i45;

        $i46 = i232 + 4;

        $i47 = virtualinvoke r0.<org.objectweb.asm.ClassReader: int readInt(int)>($i46);

        $i48 = i233 + $i47;

        $r10 = r4[$i48];

        r68[i242] = $r10;

        i232 = i232 + 8;

        i242 = i242 + 1;

        goto label64;

     label65:
        $r9 = r4[i241];

        virtualinvoke r6.<org.objectweb.asm.MethodVisitor: void visitLookupSwitchInsn(org.objectweb.asm.Label,int[],org.objectweb.asm.Label[])>($r9, r67, r68);

        goto label81;

     label66:
        $i100 = i232 + 1;

        $b101 = r1[$i100];

        $s309 = (short) $b101;

        $s102 = $s309 & 255;

        $i310 = (int) $s119;

        $i311 = (int) $s102;

        virtualinvoke r6.<org.objectweb.asm.MethodVisitor: void visitVarInsn(int,int)>($i310, $i311);

        i232 = i232 + 2;

        goto label81;

     label67:
        $i105 = i232 + 1;

        $b106 = r1[$i105];

        $i312 = (int) $s119;

        $i313 = (int) $b106;

        virtualinvoke r6.<org.objectweb.asm.MethodVisitor: void visitIntInsn(int,int)>($i312, $i313);

        i232 = i232 + 2;

        goto label81;

     label68:
        $i103 = i232 + 1;

        $s104 = virtualinvoke r0.<org.objectweb.asm.ClassReader: short readShort(int)>($i103);

        $i314 = (int) $s119;

        $i315 = (int) $s104;

        virtualinvoke r6.<org.objectweb.asm.MethodVisitor: void visitIntInsn(int,int)>($i314, $i315);

        i232 = i232 + 3;

        goto label81;

     label69:
        $i68 = i232 + 1;

        $b69 = r1[$i68];

        $s316 = (short) $b69;

        $s70 = $s316 & 255;

        $i317 = (int) $s70;

        $r14 = virtualinvoke r0.<org.objectweb.asm.ClassReader: java.lang.Object readConst(int,char[])>($i317, r3);

        virtualinvoke r6.<org.objectweb.asm.MethodVisitor: void visitLdcInsn(java.lang.Object)>($r14);

        i232 = i232 + 2;

        goto label81;

     label70:
        $i66 = i232 + 1;

        $i67 = virtualinvoke r0.<org.objectweb.asm.ClassReader: int readUnsignedShort(int)>($i66);

        $r13 = virtualinvoke r0.<org.objectweb.asm.ClassReader: java.lang.Object readConst(int,char[])>($i67, r3);

        virtualinvoke r6.<org.objectweb.asm.MethodVisitor: void visitLdcInsn(java.lang.Object)>($r13);

        i232 = i232 + 3;

        goto label81;

     label71:
        $r24 = r0.<org.objectweb.asm.ClassReader: int[] items>;

        $i88 = i232 + 1;

        $i89 = virtualinvoke r0.<org.objectweb.asm.ClassReader: int readUnsignedShort(int)>($i88);

        i243 = $r24[$i89];

        $r25 = virtualinvoke r0.<org.objectweb.asm.ClassReader: java.lang.String readClass(int,char[])>(i243, r3);

        $r26 = r0.<org.objectweb.asm.ClassReader: int[] items>;

        $i90 = i243 + 2;

        $i91 = virtualinvoke r0.<org.objectweb.asm.ClassReader: int readUnsignedShort(int)>($i90);

        i244 = $r26[$i91];

        $r27 = virtualinvoke r0.<org.objectweb.asm.ClassReader: java.lang.String readUTF8(int,char[])>(i244, r3);

        $i92 = i244 + 2;

        $r28 = virtualinvoke r0.<org.objectweb.asm.ClassReader: java.lang.String readUTF8(int,char[])>($i92, r3);

        $i318 = (int) $s119;

        if $i318 >= 182 goto label72;

        $i319 = (int) $s119;

        virtualinvoke r6.<org.objectweb.asm.MethodVisitor: void visitFieldInsn(int,java.lang.String,java.lang.String,java.lang.String)>($i319, $r25, $r27, $r28);

        goto label73;

     label72:
        $i320 = (int) $s119;

        virtualinvoke r6.<org.objectweb.asm.MethodVisitor: void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String)>($i320, $r25, $r27, $r28);

     label73:
        $i321 = (int) $s119;

        if $i321 != 185 goto label74;

        i232 = i232 + 5;

        goto label81;

     label74:
        i232 = i232 + 3;

        goto label81;

     label75:
        $r17 = r0.<org.objectweb.asm.ClassReader: int[] items>;

        $i78 = i232 + 1;

        $i79 = virtualinvoke r0.<org.objectweb.asm.ClassReader: int readUnsignedShort(int)>($i78);

        i245 = $r17[$i79];

        $r18 = r2.<org.objectweb.asm.Context: int[] bootstrapMethods>;

        $i80 = virtualinvoke r0.<org.objectweb.asm.ClassReader: int readUnsignedShort(int)>(i245);

        i246 = $r18[$i80];

        $i81 = virtualinvoke r0.<org.objectweb.asm.ClassReader: int readUnsignedShort(int)>(i246);

        $r19 = virtualinvoke r0.<org.objectweb.asm.ClassReader: java.lang.Object readConst(int,char[])>($i81, r3);

        r69 = (org.objectweb.asm.Handle) $r19;

        $i82 = i246 + 2;

        $i83 = virtualinvoke r0.<org.objectweb.asm.ClassReader: int readUnsignedShort(int)>($i82);

        r70 = newarray (java.lang.Object)[$i83];

        i247 = i246 + 4;

        i248 = 0;

     label76:
        if i248 >= $i83 goto label77;

        $i87 = virtualinvoke r0.<org.objectweb.asm.ClassReader: int readUnsignedShort(int)>(i247);

        $r23 = virtualinvoke r0.<org.objectweb.asm.ClassReader: java.lang.Object readConst(int,char[])>($i87, r3);

        r70[i248] = $r23;

        i247 = i247 + 2;

        i248 = i248 + 1;

        goto label76;

     label77:
        $r20 = r0.<org.objectweb.asm.ClassReader: int[] items>;

        $i84 = i245 + 2;

        $i85 = virtualinvoke r0.<org.objectweb.asm.ClassReader: int readUnsignedShort(int)>($i84);

        i249 = $r20[$i85];

        $r21 = virtualinvoke r0.<org.objectweb.asm.ClassReader: java.lang.String readUTF8(int,char[])>(i249, r3);

        $i86 = i249 + 2;

        $r22 = virtualinvoke r0.<org.objectweb.asm.ClassReader: java.lang.String readUTF8(int,char[])>($i86, r3);

        virtualinvoke r6.<org.objectweb.asm.MethodVisitor: void visitInvokeDynamicInsn(java.lang.String,java.lang.String,org.objectweb.asm.Handle,java.lang.Object[])>($r21, $r22, r69, r70);

        i232 = i232 + 5;

        goto label81;

     label78:
        $i93 = i232 + 1;

        $r29 = virtualinvoke r0.<org.objectweb.asm.ClassReader: java.lang.String readClass(int,char[])>($i93, r3);

        $i322 = (int) $s119;

        virtualinvoke r6.<org.objectweb.asm.MethodVisitor: void visitTypeInsn(int,java.lang.String)>($i322, $r29);

        i232 = i232 + 3;

        goto label81;

     label79:
        $i61 = i232 + 1;

        $b62 = r1[$i61];

        $s323 = (short) $b62;

        $s65 = $s323 & 255;

        $i63 = i232 + 2;

        $b64 = r1[$i63];

        $i324 = (int) $s65;

        $i325 = (int) $b64;

        virtualinvoke r6.<org.objectweb.asm.MethodVisitor: void visitIincInsn(int,int)>($i324, $i325);

        i232 = i232 + 3;

        goto label81;

     label80:
        $i107 = i232 + 1;

        $r30 = virtualinvoke r0.<org.objectweb.asm.ClassReader: java.lang.String readClass(int,char[])>($i107, r3);

        $i108 = i232 + 3;

        $b109 = r1[$i108];

        $s326 = (short) $b109;

        $s110 = $s326 & 255;

        $i327 = (int) $s110;

        virtualinvoke r6.<org.objectweb.asm.MethodVisitor: void visitMultiANewArrayInsn(java.lang.String,int)>($r30, $i327);

        i232 = i232 + 4;

     label81:
        goto label44;

     label82:
        $r5 = r4[$i4];

        if $r5 == null goto label83;

        $r7 = r4[$i4];

        virtualinvoke r6.<org.objectweb.asm.MethodVisitor: void visitLabel(org.objectweb.asm.Label)>($r7);

     label83:
        $i11 = r2.<org.objectweb.asm.Context: int flags>;

        $i12 = $i11 & 2;

        if $i12 != 0 goto label90;

        if i215 == 0 goto label90;

        r71 = null;

        if i216 == 0 goto label85;

        i250 = i216 + 2;

        $i24 = virtualinvoke r0.<org.objectweb.asm.ClassReader: int readUnsignedShort(int)>(i216);

        $i25 = $i24 * 3;

        r71 = newarray (int)[$i25];

        i251 = lengthof r71;

     label84:
        if i251 <= 0 goto label85;

        $i329 = (int) -1;

        i252 = i251 + $i329;

        $i26 = i250 + 6;

        r71[i252] = $i26;

        $i331 = (int) -1;

        i253 = i252 + $i331;

        $i27 = i250 + 8;

        $i28 = virtualinvoke r0.<org.objectweb.asm.ClassReader: int readUnsignedShort(int)>($i27);

        r71[i253] = $i28;

        $i333 = (int) -1;

        i251 = i253 + $i333;

        $i29 = virtualinvoke r0.<org.objectweb.asm.ClassReader: int readUnsignedShort(int)>(i250);

        r71[i251] = $i29;

        i250 = i250 + 10;

        goto label84;

     label85:
        i254 = i215 + 2;

        i255 = virtualinvoke r0.<org.objectweb.asm.ClassReader: int readUnsignedShort(int)>(i215);

     label86:
        if i255 <= 0 goto label90;

        $i13 = virtualinvoke r0.<org.objectweb.asm.ClassReader: int readUnsignedShort(int)>(i254);

        $i14 = i254 + 2;

        $i15 = virtualinvoke r0.<org.objectweb.asm.ClassReader: int readUnsignedShort(int)>($i14);

        $i16 = i254 + 8;

        $i17 = virtualinvoke r0.<org.objectweb.asm.ClassReader: int readUnsignedShort(int)>($i16);

        r72 = null;

        if r71 == null goto label89;

        i256 = 0;

     label87:
        $i18 = lengthof r71;

        if i256 >= $i18 goto label89;

        $i19 = r71[i256];

        if $i19 != $i13 goto label88;

        $i20 = i256 + 1;

        $i21 = r71[$i20];

        if $i21 != $i17 goto label88;

        $i22 = i256 + 2;

        $i23 = r71[$i22];

        r72 = virtualinvoke r0.<org.objectweb.asm.ClassReader: java.lang.String readUTF8(int,char[])>($i23, r3);

        goto label89;

     label88:
        i256 = i256 + 3;

        goto label87;

     label89:
        $i257 = i254 + 4;

        $r73 = virtualinvoke r0.<org.objectweb.asm.ClassReader: java.lang.String readUTF8(int,char[])>($i257, r3);

        $i258 = i254 + 6;

        $r74 = virtualinvoke r0.<org.objectweb.asm.ClassReader: java.lang.String readUTF8(int,char[])>($i258, r3);

        $r75 = r4[$i13];

        $i259 = $i13 + $i15;

        $r76 = r4[$i259];

        virtualinvoke r6.<org.objectweb.asm.MethodVisitor: void visitLocalVariable(java.lang.String,java.lang.String,java.lang.String,org.objectweb.asm.Label,org.objectweb.asm.Label,int)>($r73, $r74, r72, $r75, $r76, $i17);

        i254 = i254 + 10;

        $i335 = (int) -1;

        i255 = i255 + $i335;

        goto label86;

     label90:
        if r64 == null goto label91;

        r77 = r64.<org.objectweb.asm.Attribute: org.objectweb.asm.Attribute next>;

        r64.<org.objectweb.asm.Attribute: org.objectweb.asm.Attribute next> = null;

        virtualinvoke r6.<org.objectweb.asm.MethodVisitor: void visitAttribute(org.objectweb.asm.Attribute)>(r64);

        r64 = r77;

        goto label90;

     label91:
        virtualinvoke r6.<org.objectweb.asm.MethodVisitor: void visitMaxs(int,int)>($i0, $i2);

        return;
    }

    private void readParameterAnnotations(int, java.lang.String, char[], boolean, org.objectweb.asm.MethodVisitor)
    {
        byte[] $r1;
        org.objectweb.asm.AnnotationVisitor $r7, $r8;
        org.objectweb.asm.MethodVisitor r4;
        short s1, $s10;
        byte $b0;
        int $i2, i3, $i4, $i5, i6, i7, i8, i9, $i11, $i12, $i14;
        org.objectweb.asm.Type[] $r3;
        java.lang.String r2, $r6;
        boolean z0;
        org.objectweb.asm.ClassReader r0;
        char[] r5;

        r0 := @this: org.objectweb.asm.ClassReader;

        i6 := @parameter0: int;

        r2 := @parameter1: java.lang.String;

        r5 := @parameter2: char[];

        z0 := @parameter3: boolean;

        r4 := @parameter4: org.objectweb.asm.MethodVisitor;

        $r1 = r0.<org.objectweb.asm.ClassReader: byte[] b>;

        i7 = i6 + 1;

        $b0 = $r1[i6];

        $s10 = (short) $b0;

        s1 = $s10 & 255;

        $r3 = staticinvoke <org.objectweb.asm.Type: org.objectweb.asm.Type[] getArgumentTypes(java.lang.String)>(r2);

        $i2 = lengthof $r3;

        $i11 = (int) s1;

        i3 = $i2 - $i11;

        i8 = 0;

     label1:
        if i8 >= i3 goto label3;

        $r8 = virtualinvoke r4.<org.objectweb.asm.MethodVisitor: org.objectweb.asm.AnnotationVisitor visitParameterAnnotation(int,java.lang.String,boolean)>(i8, "Ljava/lang/Synthetic;", 0);

        if $r8 == null goto label2;

        virtualinvoke $r8.<org.objectweb.asm.AnnotationVisitor: void visitEnd()>();

     label2:
        i8 = i8 + 1;

        goto label1;

     label3:
        $i12 = (int) s1;

        $i4 = $i12 + i3;

        if i8 >= $i4 goto label6;

        i9 = virtualinvoke r0.<org.objectweb.asm.ClassReader: int readUnsignedShort(int)>(i7);

        i7 = i7 + 2;

     label4:
        if i9 <= 0 goto label5;

        $r6 = virtualinvoke r0.<org.objectweb.asm.ClassReader: java.lang.String readUTF8(int,char[])>(i7, r5);

        $r7 = virtualinvoke r4.<org.objectweb.asm.MethodVisitor: org.objectweb.asm.AnnotationVisitor visitParameterAnnotation(int,java.lang.String,boolean)>(i8, $r6, z0);

        $i5 = i7 + 2;

        i7 = specialinvoke r0.<org.objectweb.asm.ClassReader: int readAnnotationValues(int,char[],boolean,org.objectweb.asm.AnnotationVisitor)>($i5, r5, 1, $r7);

        $i14 = (int) -1;

        i9 = i9 + $i14;

        goto label4;

     label5:
        i8 = i8 + 1;

        goto label3;

     label6:
        return;
    }

    private int readAnnotationValues(int, char[], boolean, org.objectweb.asm.AnnotationVisitor)
    {
        org.objectweb.asm.AnnotationVisitor r1;
        org.objectweb.asm.ClassReader r0;
        int $i0, i1, i2, i3, $i5, $i7;
        char[] r2;
        java.lang.String $r3;
        boolean z0;

        r0 := @this: org.objectweb.asm.ClassReader;

        i1 := @parameter0: int;

        r2 := @parameter1: char[];

        z0 := @parameter2: boolean;

        r1 := @parameter3: org.objectweb.asm.AnnotationVisitor;

        i2 = virtualinvoke r0.<org.objectweb.asm.ClassReader: int readUnsignedShort(int)>(i1);

        i3 = i1 + 2;

        if z0 == 0 goto label2;

     label1:
        if i2 <= 0 goto label3;

        $i0 = i3 + 2;

        $r3 = virtualinvoke r0.<org.objectweb.asm.ClassReader: java.lang.String readUTF8(int,char[])>(i3, r2);

        i3 = specialinvoke r0.<org.objectweb.asm.ClassReader: int readAnnotationValue(int,char[],java.lang.String,org.objectweb.asm.AnnotationVisitor)>($i0, r2, $r3, r1);

        $i5 = (int) -1;

        i2 = i2 + $i5;

        goto label1;

     label2:
        if i2 <= 0 goto label3;

        i3 = specialinvoke r0.<org.objectweb.asm.ClassReader: int readAnnotationValue(int,char[],java.lang.String,org.objectweb.asm.AnnotationVisitor)>(i3, r2, null, r1);

        $i7 = (int) -1;

        i2 = i2 + $i7;

        goto label2;

     label3:
        if r1 == null goto label4;

        virtualinvoke r1.<org.objectweb.asm.AnnotationVisitor: void visitEnd()>();

     label4:
        return i3;
    }

    private int readAnnotationValue(int, char[], java.lang.String, org.objectweb.asm.AnnotationVisitor)
    {
        byte[] $r2, $r10, r25, $r39;
        byte $b0, $b4, $b33, $b52, $b54;
        long $l16, $l25;
        float[] r19;
        short $s1, $s5, $s13, $s43, $s55, $s74, $s76, $s78;
        boolean[] r11;
        int[] $r12, $r14, $r16, r17, $r18, $r20, $r22, $r24, $r26, $r29, $r31, $r34, $r36;
        java.lang.Short $r42;
        org.objectweb.asm.ClassReader r1;
        long[] r15;
        int $i2, $i3, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i14, $i15, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i26, $i27, $i28, $i30, $i31, $i32, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i44, $i45, $i46, $i47, $i49, $i50, $i51, $i53, $i56, $i57, $i58, $i59, $i60, $i61, i62, i63, i64, i65, i66, i67, i68, i69, i70, i71, i72, i73, $i75, $i77, $i79, $i81, $i83, $i85, $i87, $i89, $i91, $i93, $i95;
        java.lang.Boolean $r40;
        java.lang.Object $r32;
        java.lang.Character $r43;
        org.objectweb.asm.AnnotationVisitor r0, $r27, $r28, $r38;
        double[] r21;
        java.lang.String r3, $r5, $r6, $r7, $r8, $r37;
        char[] r4, r23;
        org.objectweb.asm.Type $r9;
        java.lang.Byte $r41;
        boolean $z0;
        float $f0;
        short[] r13;
        double $d0;
        char $c29, $c48;

        r1 := @this: org.objectweb.asm.ClassReader;

        i62 := @parameter0: int;

        r4 := @parameter1: char[];

        r3 := @parameter2: java.lang.String;

        r0 := @parameter3: org.objectweb.asm.AnnotationVisitor;

        if r0 != null goto label05;

        $r39 = r1.<org.objectweb.asm.ClassReader: byte[] b>;

        $b54 = $r39[i62];

        $s74 = (short) $b54;

        $s55 = $s74 & 255;

        $i75 = (int) $s55;

        lookupswitch($i75)
        {
            case 64: goto label02;
            case 91: goto label03;
            case 101: goto label01;
            default: goto label04;
        };

     label01:
        $i56 = i62 + 5;

        return $i56;

     label02:
        $i59 = i62 + 3;

        $i60 = specialinvoke r1.<org.objectweb.asm.ClassReader: int readAnnotationValues(int,char[],boolean,org.objectweb.asm.AnnotationVisitor)>($i59, r4, 1, null);

        return $i60;

     label03:
        $i57 = i62 + 1;

        $i58 = specialinvoke r1.<org.objectweb.asm.ClassReader: int readAnnotationValues(int,char[],boolean,org.objectweb.asm.AnnotationVisitor)>($i57, r4, 0, null);

        return $i58;

     label04:
        $i61 = i62 + 3;

        return $i61;

     label05:
        $r2 = r1.<org.objectweb.asm.ClassReader: byte[] b>;

        i63 = i62 + 1;

        $b0 = $r2[i62];

        $s76 = (short) $b0;

        $s1 = $s76 & 255;

        $i77 = (int) $s1;

        tableswitch($i77)
        {
            case 64: goto label16;
            case 65: goto label46;
            case 66: goto label07;
            case 67: goto label12;
            case 68: goto label06;
            case 69: goto label46;
            case 70: goto label06;
            case 71: goto label46;
            case 72: goto label46;
            case 73: goto label06;
            case 74: goto label06;
            case 75: goto label46;
            case 76: goto label46;
            case 77: goto label46;
            case 78: goto label46;
            case 79: goto label46;
            case 80: goto label46;
            case 81: goto label46;
            case 82: goto label46;
            case 83: goto label11;
            case 84: goto label46;
            case 85: goto label46;
            case 86: goto label46;
            case 87: goto label46;
            case 88: goto label46;
            case 89: goto label46;
            case 90: goto label08;
            case 91: goto label17;
            case 92: goto label46;
            case 93: goto label46;
            case 94: goto label46;
            case 95: goto label46;
            case 96: goto label46;
            case 97: goto label46;
            case 98: goto label46;
            case 99: goto label15;
            case 100: goto label46;
            case 101: goto label14;
            case 102: goto label46;
            case 103: goto label46;
            case 104: goto label46;
            case 105: goto label46;
            case 106: goto label46;
            case 107: goto label46;
            case 108: goto label46;
            case 109: goto label46;
            case 110: goto label46;
            case 111: goto label46;
            case 112: goto label46;
            case 113: goto label46;
            case 114: goto label46;
            case 115: goto label13;
            default: goto label46;
        };

     label06:
        $i44 = virtualinvoke r1.<org.objectweb.asm.ClassReader: int readUnsignedShort(int)>(i63);

        $r32 = virtualinvoke r1.<org.objectweb.asm.ClassReader: java.lang.Object readConst(int,char[])>($i44, r4);

        virtualinvoke r0.<org.objectweb.asm.AnnotationVisitor: void visit(java.lang.String,java.lang.Object)>(r3, $r32);

        i63 = i63 + 2;

        goto label46;

     label07:
        $r41 = new java.lang.Byte;

        $r36 = r1.<org.objectweb.asm.ClassReader: int[] items>;

        $i49 = virtualinvoke r1.<org.objectweb.asm.ClassReader: int readUnsignedShort(int)>(i63);

        $i50 = $r36[$i49];

        $i51 = virtualinvoke r1.<org.objectweb.asm.ClassReader: int readInt(int)>($i50);

        $b52 = (byte) $i51;

        specialinvoke $r41.<java.lang.Byte: void <init>(byte)>($b52);

        virtualinvoke r0.<org.objectweb.asm.AnnotationVisitor: void visit(java.lang.String,java.lang.Object)>(r3, $r41);

        i63 = i63 + 2;

        goto label46;

     label08:
        $r29 = r1.<org.objectweb.asm.ClassReader: int[] items>;

        $i37 = virtualinvoke r1.<org.objectweb.asm.ClassReader: int readUnsignedShort(int)>(i63);

        $i38 = $r29[$i37];

        $i39 = virtualinvoke r1.<org.objectweb.asm.ClassReader: int readInt(int)>($i38);

        if $i39 != 0 goto label09;

        $r40 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        goto label10;

     label09:
        $r40 = <java.lang.Boolean: java.lang.Boolean TRUE>;

     label10:
        virtualinvoke r0.<org.objectweb.asm.AnnotationVisitor: void visit(java.lang.String,java.lang.Object)>(r3, $r40);

        i63 = i63 + 2;

        goto label46;

     label11:
        $r42 = new java.lang.Short;

        $r31 = r1.<org.objectweb.asm.ClassReader: int[] items>;

        $i40 = virtualinvoke r1.<org.objectweb.asm.ClassReader: int readUnsignedShort(int)>(i63);

        $i41 = $r31[$i40];

        $i42 = virtualinvoke r1.<org.objectweb.asm.ClassReader: int readInt(int)>($i41);

        $s43 = (short) $i42;

        specialinvoke $r42.<java.lang.Short: void <init>(short)>($s43);

        virtualinvoke r0.<org.objectweb.asm.AnnotationVisitor: void visit(java.lang.String,java.lang.Object)>(r3, $r42);

        i63 = i63 + 2;

        goto label46;

     label12:
        $r43 = new java.lang.Character;

        $r34 = r1.<org.objectweb.asm.ClassReader: int[] items>;

        $i45 = virtualinvoke r1.<org.objectweb.asm.ClassReader: int readUnsignedShort(int)>(i63);

        $i46 = $r34[$i45];

        $i47 = virtualinvoke r1.<org.objectweb.asm.ClassReader: int readInt(int)>($i46);

        $c48 = (char) $i47;

        specialinvoke $r43.<java.lang.Character: void <init>(char)>($c48);

        virtualinvoke r0.<org.objectweb.asm.AnnotationVisitor: void visit(java.lang.String,java.lang.Object)>(r3, $r43);

        i63 = i63 + 2;

        goto label46;

     label13:
        $r5 = virtualinvoke r1.<org.objectweb.asm.ClassReader: java.lang.String readUTF8(int,char[])>(i63, r4);

        virtualinvoke r0.<org.objectweb.asm.AnnotationVisitor: void visit(java.lang.String,java.lang.Object)>(r3, $r5);

        i63 = i63 + 2;

        goto label46;

     label14:
        $r6 = virtualinvoke r1.<org.objectweb.asm.ClassReader: java.lang.String readUTF8(int,char[])>(i63, r4);

        $i2 = i63 + 2;

        $r7 = virtualinvoke r1.<org.objectweb.asm.ClassReader: java.lang.String readUTF8(int,char[])>($i2, r4);

        virtualinvoke r0.<org.objectweb.asm.AnnotationVisitor: void visitEnum(java.lang.String,java.lang.String,java.lang.String)>(r3, $r6, $r7);

        i63 = i63 + 4;

        goto label46;

     label15:
        $r8 = virtualinvoke r1.<org.objectweb.asm.ClassReader: java.lang.String readUTF8(int,char[])>(i63, r4);

        $r9 = staticinvoke <org.objectweb.asm.Type: org.objectweb.asm.Type getType(java.lang.String)>($r8);

        virtualinvoke r0.<org.objectweb.asm.AnnotationVisitor: void visit(java.lang.String,java.lang.Object)>(r3, $r9);

        i63 = i63 + 2;

        goto label46;

     label16:
        $i53 = i63 + 2;

        $r37 = virtualinvoke r1.<org.objectweb.asm.ClassReader: java.lang.String readUTF8(int,char[])>(i63, r4);

        $r38 = virtualinvoke r0.<org.objectweb.asm.AnnotationVisitor: org.objectweb.asm.AnnotationVisitor visitAnnotation(java.lang.String,java.lang.String)>(r3, $r37);

        i63 = specialinvoke r1.<org.objectweb.asm.ClassReader: int readAnnotationValues(int,char[],boolean,org.objectweb.asm.AnnotationVisitor)>($i53, r4, 1, $r38);

        goto label46;

     label17:
        $i3 = virtualinvoke r1.<org.objectweb.asm.ClassReader: int readUnsignedShort(int)>(i63);

        i64 = i63 + 2;

        if $i3 != 0 goto label18;

        $i35 = i64 - 2;

        $r28 = virtualinvoke r0.<org.objectweb.asm.AnnotationVisitor: org.objectweb.asm.AnnotationVisitor visitArray(java.lang.String)>(r3);

        $i36 = specialinvoke r1.<org.objectweb.asm.ClassReader: int readAnnotationValues(int,char[],boolean,org.objectweb.asm.AnnotationVisitor)>($i35, r4, 0, $r28);

        return $i36;

     label18:
        $r10 = r1.<org.objectweb.asm.ClassReader: byte[] b>;

        i65 = i64 + 1;

        $b4 = $r10[i64];

        $s78 = (short) $b4;

        $s5 = $s78 & 255;

        $i79 = (int) $s5;

        tableswitch($i79)
        {
            case 66: goto label19;
            case 67: goto label30;
            case 68: goto label42;
            case 69: goto label45;
            case 70: goto label39;
            case 71: goto label45;
            case 72: goto label45;
            case 73: goto label33;
            case 74: goto label36;
            case 75: goto label45;
            case 76: goto label45;
            case 77: goto label45;
            case 78: goto label45;
            case 79: goto label45;
            case 80: goto label45;
            case 81: goto label45;
            case 82: goto label45;
            case 83: goto label27;
            case 84: goto label45;
            case 85: goto label45;
            case 86: goto label45;
            case 87: goto label45;
            case 88: goto label45;
            case 89: goto label45;
            case 90: goto label22;
            default: goto label45;
        };

     label19:
        r25 = newarray (byte)[$i3];

        i66 = 0;

     label20:
        if i66 >= $i3 goto label21;

        $r26 = r1.<org.objectweb.asm.ClassReader: int[] items>;

        $i30 = virtualinvoke r1.<org.objectweb.asm.ClassReader: int readUnsignedShort(int)>(i65);

        $i31 = $r26[$i30];

        $i32 = virtualinvoke r1.<org.objectweb.asm.ClassReader: int readInt(int)>($i31);

        $b33 = (byte) $i32;

        r25[i66] = $b33;

        i65 = i65 + 3;

        i66 = i66 + 1;

        goto label20;

     label21:
        virtualinvoke r0.<org.objectweb.asm.AnnotationVisitor: void visit(java.lang.String,java.lang.Object)>(r3, r25);

        $i81 = (int) -1;

        i63 = i65 + $i81;

        goto label46;

     label22:
        r11 = newarray (boolean)[$i3];

        i67 = 0;

     label23:
        if i67 >= $i3 goto label26;

        $i9 = i67;

        $r12 = r1.<org.objectweb.asm.ClassReader: int[] items>;

        $i6 = virtualinvoke r1.<org.objectweb.asm.ClassReader: int readUnsignedShort(int)>(i65);

        $i7 = $r12[$i6];

        $i8 = virtualinvoke r1.<org.objectweb.asm.ClassReader: int readInt(int)>($i7);

        if $i8 == 0 goto label24;

        $z0 = 1;

        goto label25;

     label24:
        $z0 = 0;

     label25:
        r11[$i9] = $z0;

        i65 = i65 + 3;

        i67 = i67 + 1;

        goto label23;

     label26:
        virtualinvoke r0.<org.objectweb.asm.AnnotationVisitor: void visit(java.lang.String,java.lang.Object)>(r3, r11);

        $i83 = (int) -1;

        i63 = i65 + $i83;

        goto label46;

     label27:
        r13 = newarray (short)[$i3];

        i68 = 0;

     label28:
        if i68 >= $i3 goto label29;

        $r14 = r1.<org.objectweb.asm.ClassReader: int[] items>;

        $i10 = virtualinvoke r1.<org.objectweb.asm.ClassReader: int readUnsignedShort(int)>(i65);

        $i11 = $r14[$i10];

        $i12 = virtualinvoke r1.<org.objectweb.asm.ClassReader: int readInt(int)>($i11);

        $s13 = (short) $i12;

        r13[i68] = $s13;

        i65 = i65 + 3;

        i68 = i68 + 1;

        goto label28;

     label29:
        virtualinvoke r0.<org.objectweb.asm.AnnotationVisitor: void visit(java.lang.String,java.lang.Object)>(r3, r13);

        $i85 = (int) -1;

        i63 = i65 + $i85;

        goto label46;

     label30:
        r23 = newarray (char)[$i3];

        i69 = 0;

     label31:
        if i69 >= $i3 goto label32;

        $r24 = r1.<org.objectweb.asm.ClassReader: int[] items>;

        $i26 = virtualinvoke r1.<org.objectweb.asm.ClassReader: int readUnsignedShort(int)>(i65);

        $i27 = $r24[$i26];

        $i28 = virtualinvoke r1.<org.objectweb.asm.ClassReader: int readInt(int)>($i27);

        $c29 = (char) $i28;

        r23[i69] = $c29;

        i65 = i65 + 3;

        i69 = i69 + 1;

        goto label31;

     label32:
        virtualinvoke r0.<org.objectweb.asm.AnnotationVisitor: void visit(java.lang.String,java.lang.Object)>(r3, r23);

        $i87 = (int) -1;

        i63 = i65 + $i87;

        goto label46;

     label33:
        r17 = newarray (int)[$i3];

        i70 = 0;

     label34:
        if i70 >= $i3 goto label35;

        $r18 = r1.<org.objectweb.asm.ClassReader: int[] items>;

        $i17 = virtualinvoke r1.<org.objectweb.asm.ClassReader: int readUnsignedShort(int)>(i65);

        $i18 = $r18[$i17];

        $i19 = virtualinvoke r1.<org.objectweb.asm.ClassReader: int readInt(int)>($i18);

        r17[i70] = $i19;

        i65 = i65 + 3;

        i70 = i70 + 1;

        goto label34;

     label35:
        virtualinvoke r0.<org.objectweb.asm.AnnotationVisitor: void visit(java.lang.String,java.lang.Object)>(r3, r17);

        $i89 = (int) -1;

        i63 = i65 + $i89;

        goto label46;

     label36:
        r15 = newarray (long)[$i3];

        i71 = 0;

     label37:
        if i71 >= $i3 goto label38;

        $r16 = r1.<org.objectweb.asm.ClassReader: int[] items>;

        $i14 = virtualinvoke r1.<org.objectweb.asm.ClassReader: int readUnsignedShort(int)>(i65);

        $i15 = $r16[$i14];

        $l16 = virtualinvoke r1.<org.objectweb.asm.ClassReader: long readLong(int)>($i15);

        r15[i71] = $l16;

        i65 = i65 + 3;

        i71 = i71 + 1;

        goto label37;

     label38:
        virtualinvoke r0.<org.objectweb.asm.AnnotationVisitor: void visit(java.lang.String,java.lang.Object)>(r3, r15);

        $i91 = (int) -1;

        i63 = i65 + $i91;

        goto label46;

     label39:
        r19 = newarray (float)[$i3];

        i72 = 0;

     label40:
        if i72 >= $i3 goto label41;

        $r20 = r1.<org.objectweb.asm.ClassReader: int[] items>;

        $i20 = virtualinvoke r1.<org.objectweb.asm.ClassReader: int readUnsignedShort(int)>(i65);

        $i21 = $r20[$i20];

        $i22 = virtualinvoke r1.<org.objectweb.asm.ClassReader: int readInt(int)>($i21);

        $f0 = staticinvoke <java.lang.Float: float intBitsToFloat(int)>($i22);

        r19[i72] = $f0;

        i65 = i65 + 3;

        i72 = i72 + 1;

        goto label40;

     label41:
        virtualinvoke r0.<org.objectweb.asm.AnnotationVisitor: void visit(java.lang.String,java.lang.Object)>(r3, r19);

        $i93 = (int) -1;

        i63 = i65 + $i93;

        goto label46;

     label42:
        r21 = newarray (double)[$i3];

        i73 = 0;

     label43:
        if i73 >= $i3 goto label44;

        $r22 = r1.<org.objectweb.asm.ClassReader: int[] items>;

        $i23 = virtualinvoke r1.<org.objectweb.asm.ClassReader: int readUnsignedShort(int)>(i65);

        $i24 = $r22[$i23];

        $l25 = virtualinvoke r1.<org.objectweb.asm.ClassReader: long readLong(int)>($i24);

        $d0 = staticinvoke <java.lang.Double: double longBitsToDouble(long)>($l25);

        r21[i73] = $d0;

        i65 = i65 + 3;

        i73 = i73 + 1;

        goto label43;

     label44:
        virtualinvoke r0.<org.objectweb.asm.AnnotationVisitor: void visit(java.lang.String,java.lang.Object)>(r3, r21);

        $i95 = (int) -1;

        i63 = i65 + $i95;

        goto label46;

     label45:
        $i34 = i65 - 3;

        $r27 = virtualinvoke r0.<org.objectweb.asm.AnnotationVisitor: org.objectweb.asm.AnnotationVisitor visitArray(java.lang.String)>(r3);

        i63 = specialinvoke r1.<org.objectweb.asm.ClassReader: int readAnnotationValues(int,char[],boolean,org.objectweb.asm.AnnotationVisitor)>($i34, r4, 0, $r27);

     label46:
        return i63;
    }

    private void getImplicitFrame(org.objectweb.asm.Context)
    {
        java.lang.Integer $r5, $r6, $r7, $r8, $r14;
        boolean $z0;
        org.objectweb.asm.ClassReader r11;
        java.lang.Object[] r2;
        org.objectweb.asm.Context r0;
        int $i0, $i1, i2, $i5, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, i17, i18, $i19, $i21, $i22, $i23, $i24, $i25;
        java.lang.String r1, $r3, $r4, $r9, $r10, $r13;
        char $c3, $c4, $c6, $c7, $c20;
        char[] $r12;

        r11 := @this: org.objectweb.asm.ClassReader;

        r0 := @parameter0: org.objectweb.asm.Context;

        r1 = r0.<org.objectweb.asm.Context: java.lang.String desc>;

        r2 = r0.<org.objectweb.asm.Context: java.lang.Object[] local>;

        i17 = 0;

        $i0 = r0.<org.objectweb.asm.Context: int access>;

        $i1 = $i0 & 8;

        if $i1 != 0 goto label02;

        $r10 = "<init>";

        $r9 = r0.<org.objectweb.asm.Context: java.lang.String name>;

        $z0 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>($r9);

        if $z0 == 0 goto label01;

        i17 = 1;

        $r14 = <org.objectweb.asm.Opcodes: java.lang.Integer UNINITIALIZED_THIS>;

        r2[0] = $r14;

        goto label02;

     label01:
        i17 = 1;

        $i15 = r11.<org.objectweb.asm.ClassReader: int header>;

        $i16 = $i15 + 2;

        $r12 = r0.<org.objectweb.asm.Context: char[] buffer>;

        $r13 = virtualinvoke r11.<org.objectweb.asm.ClassReader: java.lang.String readClass(int,char[])>($i16, $r12);

        r2[0] = $r13;

     label02:
        i18 = 1;

     label03:
        i2 = i18;

        $i19 = i18;

        i18 = i18 + 1;

        $c20 = virtualinvoke r1.<java.lang.String: char charAt(int)>($i19);

        $i21 = (int) $c20;

        tableswitch($i21)
        {
            case 66: goto label04;
            case 67: goto label04;
            case 68: goto label07;
            case 69: goto label14;
            case 70: goto label05;
            case 71: goto label14;
            case 72: goto label14;
            case 73: goto label04;
            case 74: goto label06;
            case 75: goto label14;
            case 76: goto label12;
            case 77: goto label14;
            case 78: goto label14;
            case 79: goto label14;
            case 80: goto label14;
            case 81: goto label14;
            case 82: goto label14;
            case 83: goto label04;
            case 84: goto label14;
            case 85: goto label14;
            case 86: goto label14;
            case 87: goto label14;
            case 88: goto label14;
            case 89: goto label14;
            case 90: goto label04;
            case 91: goto label08;
            default: goto label14;
        };

     label04:
        $i14 = i17;

        i17 = i17 + 1;

        $r8 = <org.objectweb.asm.Opcodes: java.lang.Integer INTEGER>;

        r2[$i14] = $r8;

        goto label15;

     label05:
        $i12 = i17;

        i17 = i17 + 1;

        $r6 = <org.objectweb.asm.Opcodes: java.lang.Integer FLOAT>;

        r2[$i12] = $r6;

        goto label15;

     label06:
        $i11 = i17;

        i17 = i17 + 1;

        $r5 = <org.objectweb.asm.Opcodes: java.lang.Integer LONG>;

        r2[$i11] = $r5;

        goto label15;

     label07:
        $i13 = i17;

        i17 = i17 + 1;

        $r7 = <org.objectweb.asm.Opcodes: java.lang.Integer DOUBLE>;

        r2[$i13] = $r7;

        goto label15;

     label08:
        $c3 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i18);

        $i22 = (int) $c3;

        if $i22 != 91 goto label09;

        i18 = i18 + 1;

        goto label08;

     label09:
        $c4 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i18);

        $i23 = (int) $c4;

        if $i23 != 76 goto label11;

        i18 = i18 + 1;

     label10:
        $c6 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i18);

        $i24 = (int) $c6;

        if $i24 == 59 goto label11;

        i18 = i18 + 1;

        goto label10;

     label11:
        $i5 = i17;

        i17 = i17 + 1;

        i18 = i18 + 1;

        $r3 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(i2, i18);

        r2[$i5] = $r3;

        goto label15;

     label12:
        $c7 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i18);

        $i25 = (int) $c7;

        if $i25 == 59 goto label13;

        i18 = i18 + 1;

        goto label12;

     label13:
        $i8 = i17;

        i17 = i17 + 1;

        $i10 = i2 + 1;

        $i9 = i18;

        i18 = i18 + 1;

        $r4 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>($i10, $i9);

        r2[$i8] = $r4;

        goto label15;

     label14:
        goto label16;

     label15:
        goto label03;

     label16:
        r0.<org.objectweb.asm.Context: int localCount> = i17;

        return;
    }

    private int readFrame(int, boolean, boolean, org.objectweb.asm.Label[], org.objectweb.asm.Context)
    {
        byte[] $r9;
        byte $b14;
        boolean z0, z1;
        org.objectweb.asm.ClassReader r2;
        java.lang.Object[] $r4, $r5, $r6, $r7, $r8;
        org.objectweb.asm.Context r0;
        short s16;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, i15, i17, $i18, i19, i20, i21, i22, i23, i24, i25, $i26, $i27, $i28, $i29, $i31, $i33, $i35, $i37;
        org.objectweb.asm.Label[] r3;
        char[] r1;

        r2 := @this: org.objectweb.asm.ClassReader;

        i15 := @parameter0: int;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        r3 := @parameter3: org.objectweb.asm.Label[];

        r0 := @parameter4: org.objectweb.asm.Context;

        r1 = r0.<org.objectweb.asm.Context: char[] buffer>;

        if z0 == 0 goto label01;

        $r9 = r2.<org.objectweb.asm.ClassReader: byte[] b>;

        $i13 = i15;

        i15 = i15 + 1;

        $b14 = $r9[$i13];

        s16 = $b14 & 255;

        goto label02;

     label01:
        s16 = 255;

        $i31 = (int) -1;

        r0.<org.objectweb.asm.Context: int offset> = $i31;

     label02:
        r0.<org.objectweb.asm.Context: int localDiff> = 0;

        if s16 >= 64 goto label03;

        i17 = s16;

        r0.<org.objectweb.asm.Context: int mode> = 3;

        r0.<org.objectweb.asm.Context: int stackCount> = 0;

        goto label16;

     label03:
        if s16 >= 128 goto label04;

        i17 = s16 - 64;

        $r8 = r0.<org.objectweb.asm.Context: java.lang.Object[] stack>;

        i15 = specialinvoke r2.<org.objectweb.asm.ClassReader: int readFrameType(java.lang.Object[],int,int,char[],org.objectweb.asm.Label[])>($r8, 0, i15, r1, r3);

        r0.<org.objectweb.asm.Context: int mode> = 4;

        r0.<org.objectweb.asm.Context: int stackCount> = 1;

        goto label16;

     label04:
        i17 = virtualinvoke r2.<org.objectweb.asm.ClassReader: int readUnsignedShort(int)>(i15);

        i15 = i15 + 2;

        if s16 != 247 goto label05;

        $r7 = r0.<org.objectweb.asm.Context: java.lang.Object[] stack>;

        i15 = specialinvoke r2.<org.objectweb.asm.ClassReader: int readFrameType(java.lang.Object[],int,int,char[],org.objectweb.asm.Label[])>($r7, 0, i15, r1, r3);

        r0.<org.objectweb.asm.Context: int mode> = 4;

        r0.<org.objectweb.asm.Context: int stackCount> = 1;

        goto label16;

     label05:
        if s16 < 248 goto label06;

        if s16 >= 251 goto label06;

        r0.<org.objectweb.asm.Context: int mode> = 2;

        $i9 = 251 - s16;

        r0.<org.objectweb.asm.Context: int localDiff> = $i9;

        $i11 = r0.<org.objectweb.asm.Context: int localCount>;

        $i10 = r0.<org.objectweb.asm.Context: int localDiff>;

        $i12 = $i11 - $i10;

        r0.<org.objectweb.asm.Context: int localCount> = $i12;

        r0.<org.objectweb.asm.Context: int stackCount> = 0;

        goto label16;

     label06:
        if s16 != 251 goto label07;

        r0.<org.objectweb.asm.Context: int mode> = 3;

        r0.<org.objectweb.asm.Context: int stackCount> = 0;

        goto label16;

     label07:
        if s16 >= 255 goto label12;

        if z1 == 0 goto label08;

        $i18 = r0.<org.objectweb.asm.Context: int localCount>;

        goto label09;

     label08:
        $i18 = 0;

     label09:
        i19 = $i18;

        i20 = s16 - 251;

     label10:
        if i20 <= 0 goto label11;

        $r6 = r0.<org.objectweb.asm.Context: java.lang.Object[] local>;

        $i8 = i19;

        i19 = i19 + 1;

        i15 = specialinvoke r2.<org.objectweb.asm.ClassReader: int readFrameType(java.lang.Object[],int,int,char[],org.objectweb.asm.Label[])>($r6, $i8, i15, r1, r3);

        $i33 = (int) -1;

        i20 = i20 + $i33;

        goto label10;

     label11:
        r0.<org.objectweb.asm.Context: int mode> = 1;

        $i4 = s16 - 251;

        r0.<org.objectweb.asm.Context: int localDiff> = $i4;

        $i6 = r0.<org.objectweb.asm.Context: int localCount>;

        $i5 = r0.<org.objectweb.asm.Context: int localDiff>;

        $i7 = $i6 + $i5;

        r0.<org.objectweb.asm.Context: int localCount> = $i7;

        r0.<org.objectweb.asm.Context: int stackCount> = 0;

        goto label16;

     label12:
        r0.<org.objectweb.asm.Context: int mode> = 0;

        $i0 = virtualinvoke r2.<org.objectweb.asm.ClassReader: int readUnsignedShort(int)>(i15);

        i21 = $i0;

        i22 = i15 + 2;

        r0.<org.objectweb.asm.Context: int localDiff> = $i0;

        r0.<org.objectweb.asm.Context: int localCount> = $i0;

        i23 = 0;

     label13:
        if i21 <= 0 goto label14;

        $r5 = r0.<org.objectweb.asm.Context: java.lang.Object[] local>;

        $i3 = i23;

        i23 = i23 + 1;

        i22 = specialinvoke r2.<org.objectweb.asm.ClassReader: int readFrameType(java.lang.Object[],int,int,char[],org.objectweb.asm.Label[])>($r5, $i3, i22, r1, r3);

        $i35 = (int) -1;

        i21 = i21 + $i35;

        goto label13;

     label14:
        $i1 = virtualinvoke r2.<org.objectweb.asm.ClassReader: int readUnsignedShort(int)>(i22);

        i24 = $i1;

        i15 = i22 + 2;

        r0.<org.objectweb.asm.Context: int stackCount> = $i1;

        i25 = 0;

     label15:
        if i24 <= 0 goto label16;

        $r4 = r0.<org.objectweb.asm.Context: java.lang.Object[] stack>;

        $i2 = i25;

        i25 = i25 + 1;

        i15 = specialinvoke r2.<org.objectweb.asm.ClassReader: int readFrameType(java.lang.Object[],int,int,char[],org.objectweb.asm.Label[])>($r4, $i2, i15, r1, r3);

        $i37 = (int) -1;

        i24 = i24 + $i37;

        goto label15;

     label16:
        $i26 = r0.<org.objectweb.asm.Context: int offset>;

        $i27 = i17 + 1;

        $i28 = $i26 + $i27;

        r0.<org.objectweb.asm.Context: int offset> = $i28;

        $i29 = r0.<org.objectweb.asm.Context: int offset>;

        virtualinvoke r2.<org.objectweb.asm.ClassReader: org.objectweb.asm.Label readLabel(int,org.objectweb.asm.Label[])>($i29, r3);

        return i15;
    }

    private int readFrameType(java.lang.Object[], int, int, char[], org.objectweb.asm.Label[])
    {
        byte[] $r1;
        java.lang.Object[] r2;
        org.objectweb.asm.Label $r13;
        java.lang.Integer $r5, $r6, $r7, $r8, $r9, $r10, $r11;
        short s1, $s6;
        byte $b0;
        int i2, $i3, i4, i5, $i7;
        org.objectweb.asm.Label[] r12;
        java.lang.String $r4;
        org.objectweb.asm.ClassReader r0;
        char[] r3;

        r0 := @this: org.objectweb.asm.ClassReader;

        r2 := @parameter0: java.lang.Object[];

        i2 := @parameter1: int;

        i4 := @parameter2: int;

        r3 := @parameter3: char[];

        r12 := @parameter4: org.objectweb.asm.Label[];

        $r1 = r0.<org.objectweb.asm.ClassReader: byte[] b>;

        i5 = i4 + 1;

        $b0 = $r1[i4];

        $s6 = (short) $b0;

        s1 = $s6 & 255;

        $i7 = (int) s1;

        tableswitch($i7)
        {
            case 0: goto label01;
            case 1: goto label02;
            case 2: goto label03;
            case 3: goto label04;
            case 4: goto label05;
            case 5: goto label06;
            case 6: goto label07;
            case 7: goto label08;
            default: goto label09;
        };

     label01:
        $r11 = <org.objectweb.asm.Opcodes: java.lang.Integer TOP>;

        r2[i2] = $r11;

        goto label10;

     label02:
        $r10 = <org.objectweb.asm.Opcodes: java.lang.Integer INTEGER>;

        r2[i2] = $r10;

        goto label10;

     label03:
        $r9 = <org.objectweb.asm.Opcodes: java.lang.Integer FLOAT>;

        r2[i2] = $r9;

        goto label10;

     label04:
        $r8 = <org.objectweb.asm.Opcodes: java.lang.Integer DOUBLE>;

        r2[i2] = $r8;

        goto label10;

     label05:
        $r7 = <org.objectweb.asm.Opcodes: java.lang.Integer LONG>;

        r2[i2] = $r7;

        goto label10;

     label06:
        $r6 = <org.objectweb.asm.Opcodes: java.lang.Integer NULL>;

        r2[i2] = $r6;

        goto label10;

     label07:
        $r5 = <org.objectweb.asm.Opcodes: java.lang.Integer UNINITIALIZED_THIS>;

        r2[i2] = $r5;

        goto label10;

     label08:
        $r4 = virtualinvoke r0.<org.objectweb.asm.ClassReader: java.lang.String readClass(int,char[])>(i5, r3);

        r2[i2] = $r4;

        i5 = i5 + 2;

        goto label10;

     label09:
        $i3 = virtualinvoke r0.<org.objectweb.asm.ClassReader: int readUnsignedShort(int)>(i5);

        $r13 = virtualinvoke r0.<org.objectweb.asm.ClassReader: org.objectweb.asm.Label readLabel(int,org.objectweb.asm.Label[])>($i3, r12);

        r2[i2] = $r13;

        i5 = i5 + 2;

     label10:
        return i5;
    }

    protected org.objectweb.asm.Label readLabel(int, org.objectweb.asm.Label[])
    {
        org.objectweb.asm.ClassReader r4;
        int i0;
        org.objectweb.asm.Label $r1, $r2, $r3;
        org.objectweb.asm.Label[] r0;

        r4 := @this: org.objectweb.asm.ClassReader;

        i0 := @parameter0: int;

        r0 := @parameter1: org.objectweb.asm.Label[];

        $r1 = r0[i0];

        if $r1 != null goto label1;

        $r3 = new org.objectweb.asm.Label;

        specialinvoke $r3.<org.objectweb.asm.Label: void <init>()>();

        r0[i0] = $r3;

     label1:
        $r2 = r0[i0];

        return $r2;
    }

    private int getAttributes()
    {
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, i15, i16, i17, i18, i19, i20, $i22, $i24, $i26, $i28;
        org.objectweb.asm.ClassReader r0;

        r0 := @this: org.objectweb.asm.ClassReader;

        $i0 = r0.<org.objectweb.asm.ClassReader: int header>;

        $i3 = $i0 + 8;

        $i1 = r0.<org.objectweb.asm.ClassReader: int header>;

        $i2 = $i1 + 6;

        $i4 = virtualinvoke r0.<org.objectweb.asm.ClassReader: int readUnsignedShort(int)>($i2);

        $i5 = $i4 * 2;

        i15 = $i3 + $i5;

        i16 = virtualinvoke r0.<org.objectweb.asm.ClassReader: int readUnsignedShort(int)>(i15);

     label1:
        if i16 <= 0 goto label4;

        $i11 = i15 + 8;

        i17 = virtualinvoke r0.<org.objectweb.asm.ClassReader: int readUnsignedShort(int)>($i11);

     label2:
        if i17 <= 0 goto label3;

        $i12 = i15 + 12;

        $i13 = virtualinvoke r0.<org.objectweb.asm.ClassReader: int readInt(int)>($i12);

        $i14 = 6 + $i13;

        i15 = i15 + $i14;

        $i22 = (int) -1;

        i17 = i17 + $i22;

        goto label2;

     label3:
        i15 = i15 + 8;

        $i24 = (int) -1;

        i16 = i16 + $i24;

        goto label1;

     label4:
        i18 = i15 + 2;

        i19 = virtualinvoke r0.<org.objectweb.asm.ClassReader: int readUnsignedShort(int)>(i18);

     label5:
        if i19 <= 0 goto label8;

        $i7 = i18 + 8;

        i20 = virtualinvoke r0.<org.objectweb.asm.ClassReader: int readUnsignedShort(int)>($i7);

     label6:
        if i20 <= 0 goto label7;

        $i8 = i18 + 12;

        $i9 = virtualinvoke r0.<org.objectweb.asm.ClassReader: int readInt(int)>($i8);

        $i10 = 6 + $i9;

        i18 = i18 + $i10;

        $i26 = (int) -1;

        i20 = i20 + $i26;

        goto label6;

     label7:
        i18 = i18 + 8;

        $i28 = (int) -1;

        i19 = i19 + $i28;

        goto label5;

     label8:
        $i6 = i18 + 2;

        return $i6;
    }

    private org.objectweb.asm.Attribute readAttribute(org.objectweb.asm.Attribute[], java.lang.String, int, int, char[], int, org.objectweb.asm.Label[])
    {
        org.objectweb.asm.Attribute[] r0;
        int $i0, i1, i2, i3, i4, $i6;
        org.objectweb.asm.Attribute $r4, $r5, $r9, $r10, $r11;
        org.objectweb.asm.Label[] r8;
        java.lang.String r2, $r6;
        boolean $z0;
        org.objectweb.asm.ClassReader r3;
        char[] r7;

        r3 := @this: org.objectweb.asm.ClassReader;

        r0 := @parameter0: org.objectweb.asm.Attribute[];

        r2 := @parameter1: java.lang.String;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        r7 := @parameter4: char[];

        i3 := @parameter5: int;

        r8 := @parameter6: org.objectweb.asm.Label[];

        i4 = 0;

     label1:
        $i0 = lengthof r0;

        if i4 >= $i0 goto label3;

        $r5 = r0[i4];

        $r6 = $r5.<org.objectweb.asm.Attribute: java.lang.String type>;

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z0 == 0 goto label2;

        $r9 = r0[i4];

        $r10 = virtualinvoke $r9.<org.objectweb.asm.Attribute: org.objectweb.asm.Attribute read(org.objectweb.asm.ClassReader,int,int,char[],int,org.objectweb.asm.Label[])>(r3, i1, i2, r7, i3, r8);

        return $r10;

     label2:
        i4 = i4 + 1;

        goto label1;

     label3:
        $r11 = new org.objectweb.asm.Attribute;

        specialinvoke $r11.<org.objectweb.asm.Attribute: void <init>(java.lang.String)>(r2);

        $i6 = (int) -1;

        $r4 = virtualinvoke $r11.<org.objectweb.asm.Attribute: org.objectweb.asm.Attribute read(org.objectweb.asm.ClassReader,int,int,char[],int,org.objectweb.asm.Label[])>(r3, i1, i2, null, $i6, null);

        return $r4;
    }

    public int getItemCount()
    {
        int $i0;
        org.objectweb.asm.ClassReader r0;
        int[] $r1;

        r0 := @this: org.objectweb.asm.ClassReader;

        $r1 = r0.<org.objectweb.asm.ClassReader: int[] items>;

        $i0 = lengthof $r1;

        return $i0;
    }

    public int getItem(int)
    {
        org.objectweb.asm.ClassReader r0;
        int[] $r1;
        int i0, $i1;

        r0 := @this: org.objectweb.asm.ClassReader;

        i0 := @parameter0: int;

        $r1 = r0.<org.objectweb.asm.ClassReader: int[] items>;

        $i1 = $r1[i0];

        return $i1;
    }

    public int getMaxStringLength()
    {
        int $i0;
        org.objectweb.asm.ClassReader r0;

        r0 := @this: org.objectweb.asm.ClassReader;

        $i0 = r0.<org.objectweb.asm.ClassReader: int maxStringLength>;

        return $i0;
    }

    public int readByte(int)
    {
        byte[] $r1;
        short $s2, $s3;
        org.objectweb.asm.ClassReader r0;
        byte $b1;
        int i0, $i4;

        r0 := @this: org.objectweb.asm.ClassReader;

        i0 := @parameter0: int;

        $r1 = r0.<org.objectweb.asm.ClassReader: byte[] b>;

        $b1 = $r1[i0];

        $s3 = (short) $b1;

        $s2 = $s3 & 255;

        $i4 = (int) $s2;

        return $i4;
    }

    public int readUnsignedShort(int)
    {
        byte[] r1;
        short $s2, $s5, $s8, $s10;
        org.objectweb.asm.ClassReader r0;
        byte $b1, $b4;
        int i0, $i3, $i6, $i7, $i9, $i11;

        r0 := @this: org.objectweb.asm.ClassReader;

        i0 := @parameter0: int;

        r1 = r0.<org.objectweb.asm.ClassReader: byte[] b>;

        $b1 = r1[i0];

        $s8 = (short) $b1;

        $s2 = $s8 & 255;

        $i9 = (int) $s2;

        $i6 = $i9 << 8;

        $i3 = i0 + 1;

        $b4 = r1[$i3];

        $s10 = (short) $b4;

        $s5 = $s10 & 255;

        $i11 = (int) $s5;

        $i7 = $i6 | $i11;

        return $i7;
    }

    public short readShort(int)
    {
        byte[] r1;
        short $s2, $s5, $s8, $s9, $s11;
        org.objectweb.asm.ClassReader r0;
        byte $b1, $b4;
        int i0, $i3, $i6, $i7, $i10, $i12;

        r0 := @this: org.objectweb.asm.ClassReader;

        i0 := @parameter0: int;

        r1 = r0.<org.objectweb.asm.ClassReader: byte[] b>;

        $b1 = r1[i0];

        $s9 = (short) $b1;

        $s2 = $s9 & 255;

        $i10 = (int) $s2;

        $i6 = $i10 << 8;

        $i3 = i0 + 1;

        $b4 = r1[$i3];

        $s11 = (short) $b4;

        $s5 = $s11 & 255;

        $i12 = (int) $s5;

        $i7 = $i6 | $i12;

        $s8 = (short) $i7;

        return $s8;
    }

    public int readInt(int)
    {
        byte[] r1;
        short $s2, $s5, $s10, $s15, $s18, $s20, $s22, $s24;
        byte $b1, $b4, $b9, $b14;
        int i0, $i3, $i6, $i7, $i8, $i11, $i12, $i13, $i16, $i17, $i19, $i21, $i23, $i25;
        org.objectweb.asm.ClassReader r0;

        r0 := @this: org.objectweb.asm.ClassReader;

        i0 := @parameter0: int;

        r1 = r0.<org.objectweb.asm.ClassReader: byte[] b>;

        $b1 = r1[i0];

        $s18 = (short) $b1;

        $s2 = $s18 & 255;

        $i19 = (int) $s2;

        $i7 = $i19 << 24;

        $i3 = i0 + 1;

        $b4 = r1[$i3];

        $s20 = (short) $b4;

        $s5 = $s20 & 255;

        $i21 = (int) $s5;

        $i6 = $i21 << 16;

        $i12 = $i7 | $i6;

        $i8 = i0 + 2;

        $b9 = r1[$i8];

        $s22 = (short) $b9;

        $s10 = $s22 & 255;

        $i23 = (int) $s10;

        $i11 = $i23 << 8;

        $i16 = $i12 | $i11;

        $i13 = i0 + 3;

        $b14 = r1[$i13];

        $s24 = (short) $b14;

        $s15 = $s24 & 255;

        $i25 = (int) $s15;

        $i17 = $i16 | $i25;

        return $i17;
    }

    public long readLong(int)
    {
        long l2, $l5, l6, $l7, $l8;
        org.objectweb.asm.ClassReader r0;
        int i0, $i1, $i3, $i4;

        r0 := @this: org.objectweb.asm.ClassReader;

        i0 := @parameter0: int;

        $i1 = virtualinvoke r0.<org.objectweb.asm.ClassReader: int readInt(int)>(i0);

        l2 = (long) $i1;

        $i3 = i0 + 4;

        $i4 = virtualinvoke r0.<org.objectweb.asm.ClassReader: int readInt(int)>($i3);

        $l5 = (long) $i4;

        l6 = $l5 & 4294967295L;

        $l7 = l2 << 32;

        $l8 = $l7 | l6;

        return $l8;
    }

    public java.lang.String readUTF8(int, char[])
    {
        java.lang.String[] $r1, $r4;
        org.objectweb.asm.ClassReader r0;
        int[] $r3;
        int $i0, $i1, $i2, i3, i4;
        char[] r5;
        java.lang.String r2, $r6;

        r0 := @this: org.objectweb.asm.ClassReader;

        i3 := @parameter0: int;

        r5 := @parameter1: char[];

        $i0 = virtualinvoke r0.<org.objectweb.asm.ClassReader: int readUnsignedShort(int)>(i3);

        if i3 == 0 goto label1;

        if $i0 != 0 goto label2;

     label1:
        return null;

     label2:
        $r1 = r0.<org.objectweb.asm.ClassReader: java.lang.String[] strings>;

        r2 = $r1[$i0];

        if r2 == null goto label3;

        return r2;

     label3:
        $r3 = r0.<org.objectweb.asm.ClassReader: int[] items>;

        i4 = $r3[$i0];

        $r4 = r0.<org.objectweb.asm.ClassReader: java.lang.String[] strings>;

        $i1 = i4 + 2;

        $i2 = virtualinvoke r0.<org.objectweb.asm.ClassReader: int readUnsignedShort(int)>(i4);

        $r6 = specialinvoke r0.<org.objectweb.asm.ClassReader: java.lang.String readUTF(int,int,char[])>($i1, $i2, r5);

        $r4[$i0] = $r6;

        return $r6;
    }

    private java.lang.String readUTF(int, int, char[])
    {
        byte[] r1;
        short $s11, $s12, s20, $s21;
        byte $b3, $b7, b17, b19;
        int i0, i1, $i2, $i4, $i5, $i6, $i8, $i9, $i13, i15, i16, i18, $i22, $i23, $i24, $i25, $i26;
        java.lang.String $r4;
        char $c10, $c14;
        org.objectweb.asm.ClassReader r0;
        char[] r3;

        r0 := @this: org.objectweb.asm.ClassReader;

        i15 := @parameter0: int;

        i0 := @parameter1: int;

        r3 := @parameter2: char[];

        i1 = i15 + i0;

        r1 = r0.<org.objectweb.asm.ClassReader: byte[] b>;

        i16 = 0;

        b17 = 0;

        i18 = 0;

     label1:
        if i15 >= i1 goto label8;

        $i2 = i15;

        i15 = i15 + 1;

        b19 = r1[$i2];

        tableswitch(b17)
        {
            case 0: goto label2;
            case 1: goto label5;
            case 2: goto label6;
            default: goto label7;
        };

     label2:
        $s21 = (short) b19;

        s20 = $s21 & 255;

        $i22 = (int) s20;

        if $i22 >= 128 goto label3;

        $i13 = i16;

        i16 = i16 + 1;

        $c14 = (char) s20;

        r3[$i13] = $c14;

        goto label7;

     label3:
        $i23 = (int) s20;

        if $i23 >= 224 goto label4;

        $i24 = (int) s20;

        if $i24 <= 191 goto label4;

        $s12 = s20 & 31;

        i18 = (char) $s12;

        b17 = 1;

        goto label7;

     label4:
        $s11 = s20 & 15;

        i18 = (char) $s11;

        b17 = 2;

        goto label7;

     label5:
        $i6 = i16;

        i16 = i16 + 1;

        $i8 = i18 << 6;

        $b7 = b19 & 63;

        $i25 = (int) $b7;

        $i9 = $i8 | $i25;

        $c10 = (char) $i9;

        r3[$i6] = $c10;

        b17 = 0;

        goto label7;

     label6:
        $i4 = i18 << 6;

        $b3 = b19 & 63;

        $i26 = (int) $b3;

        $i5 = $i4 | $i26;

        i18 = (char) $i5;

        b17 = 1;

     label7:
        goto label1;

     label8:
        $r4 = new java.lang.String;

        specialinvoke $r4.<java.lang.String: void <init>(char[],int,int)>(r3, 0, i16);

        return $r4;
    }

    public java.lang.String readClass(int, char[])
    {
        org.objectweb.asm.ClassReader r0;
        int[] $r1;
        int i0, $i1, $i2;
        char[] r2;
        java.lang.String $r3;

        r0 := @this: org.objectweb.asm.ClassReader;

        i0 := @parameter0: int;

        r2 := @parameter1: char[];

        $r1 = r0.<org.objectweb.asm.ClassReader: int[] items>;

        $i1 = virtualinvoke r0.<org.objectweb.asm.ClassReader: int readUnsignedShort(int)>(i0);

        $i2 = $r1[$i1];

        $r3 = virtualinvoke r0.<org.objectweb.asm.ClassReader: java.lang.String readUTF8(int,char[])>($i2, r2);

        return $r3;
    }

    public java.lang.Object readConst(int, char[])
    {
        byte[] $r2;
        java.lang.Float $r19;
        org.objectweb.asm.Type $r5, $r8;
        java.lang.Integer $r18;
        byte $b3;
        int[] $r1, r13;
        java.lang.Long $r20;
        org.objectweb.asm.ClassReader r0;
        float $f0;
        java.lang.Double $r21;
        long $l4, $l5;
        int i0, i1, $i2, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, i14, i15, $i16;
        java.lang.String $r4, $r6, $r7, $r14, $r15, $r16;
        double $d0;
        org.objectweb.asm.Handle $r22;
        char[] r3;

        r0 := @this: org.objectweb.asm.ClassReader;

        i0 := @parameter0: int;

        r3 := @parameter1: char[];

        $r1 = r0.<org.objectweb.asm.ClassReader: int[] items>;

        i1 = $r1[i0];

        $r2 = r0.<org.objectweb.asm.ClassReader: byte[] b>;

        $i2 = i1 - 1;

        $b3 = $r2[$i2];

        $i16 = (int) $b3;

        tableswitch($i16)
        {
            case 3: goto label1;
            case 4: goto label2;
            case 5: goto label3;
            case 6: goto label4;
            case 7: goto label5;
            case 8: goto label6;
            case 9: goto label8;
            case 10: goto label8;
            case 11: goto label8;
            case 12: goto label8;
            case 13: goto label8;
            case 14: goto label8;
            case 15: goto label8;
            case 16: goto label7;
            default: goto label8;
        };

     label1:
        $r18 = new java.lang.Integer;

        $i7 = virtualinvoke r0.<org.objectweb.asm.ClassReader: int readInt(int)>(i1);

        specialinvoke $r18.<java.lang.Integer: void <init>(int)>($i7);

        return $r18;

     label2:
        $r19 = new java.lang.Float;

        $i6 = virtualinvoke r0.<org.objectweb.asm.ClassReader: int readInt(int)>(i1);

        $f0 = staticinvoke <java.lang.Float: float intBitsToFloat(int)>($i6);

        specialinvoke $r19.<java.lang.Float: void <init>(float)>($f0);

        return $r19;

     label3:
        $r20 = new java.lang.Long;

        $l5 = virtualinvoke r0.<org.objectweb.asm.ClassReader: long readLong(int)>(i1);

        specialinvoke $r20.<java.lang.Long: void <init>(long)>($l5);

        return $r20;

     label4:
        $r21 = new java.lang.Double;

        $l4 = virtualinvoke r0.<org.objectweb.asm.ClassReader: long readLong(int)>(i1);

        $d0 = staticinvoke <java.lang.Double: double longBitsToDouble(long)>($l4);

        specialinvoke $r21.<java.lang.Double: void <init>(double)>($d0);

        return $r21;

     label5:
        $r7 = virtualinvoke r0.<org.objectweb.asm.ClassReader: java.lang.String readUTF8(int,char[])>(i1, r3);

        $r8 = staticinvoke <org.objectweb.asm.Type: org.objectweb.asm.Type getObjectType(java.lang.String)>($r7);

        return $r8;

     label6:
        $r6 = virtualinvoke r0.<org.objectweb.asm.ClassReader: java.lang.String readUTF8(int,char[])>(i1, r3);

        return $r6;

     label7:
        $r4 = virtualinvoke r0.<org.objectweb.asm.ClassReader: java.lang.String readUTF8(int,char[])>(i1, r3);

        $r5 = staticinvoke <org.objectweb.asm.Type: org.objectweb.asm.Type getMethodType(java.lang.String)>($r4);

        return $r5;

     label8:
        $i8 = virtualinvoke r0.<org.objectweb.asm.ClassReader: int readByte(int)>(i1);

        r13 = r0.<org.objectweb.asm.ClassReader: int[] items>;

        $i9 = i1 + 1;

        $i10 = virtualinvoke r0.<org.objectweb.asm.ClassReader: int readUnsignedShort(int)>($i9);

        i14 = r13[$i10];

        $r14 = virtualinvoke r0.<org.objectweb.asm.ClassReader: java.lang.String readClass(int,char[])>(i14, r3);

        $i11 = i14 + 2;

        $i12 = virtualinvoke r0.<org.objectweb.asm.ClassReader: int readUnsignedShort(int)>($i11);

        i15 = r13[$i12];

        $r15 = virtualinvoke r0.<org.objectweb.asm.ClassReader: java.lang.String readUTF8(int,char[])>(i15, r3);

        $i13 = i15 + 2;

        $r16 = virtualinvoke r0.<org.objectweb.asm.ClassReader: java.lang.String readUTF8(int,char[])>($i13, r3);

        $r22 = new org.objectweb.asm.Handle;

        specialinvoke $r22.<org.objectweb.asm.Handle: void <init>(int,java.lang.String,java.lang.String,java.lang.String)>($i8, $r14, $r15, $r16);

        return $r22;
    }

    public static void <clinit>()
    {
        <org.objectweb.asm.ClassReader: int EXPAND_FRAMES> = 8;

        <org.objectweb.asm.ClassReader: int SKIP_FRAMES> = 4;

        <org.objectweb.asm.ClassReader: int SKIP_DEBUG> = 2;

        <org.objectweb.asm.ClassReader: int SKIP_CODE> = 1;

        <org.objectweb.asm.ClassReader: boolean RESIZE> = 1;

        <org.objectweb.asm.ClassReader: boolean WRITER> = 1;

        <org.objectweb.asm.ClassReader: boolean FRAMES> = 1;

        <org.objectweb.asm.ClassReader: boolean ANNOTATIONS> = 1;

        <org.objectweb.asm.ClassReader: boolean SIGNATURES> = 1;

        return;
    }
}
