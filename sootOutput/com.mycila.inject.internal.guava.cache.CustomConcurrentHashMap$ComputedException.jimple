final class com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ComputedException extends java.lang.Object implements com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ComputedValue
{
    final java.lang.Exception e;

    void <init>(java.lang.Exception)
    {
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ComputedException r0;
        java.lang.Exception r1;

        r0 := @this: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ComputedException;

        r1 := @parameter0: java.lang.Exception;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ComputedException: java.lang.Exception e> = r1;

        return;
    }

    public java.lang.Object get() throws java.util.concurrent.ExecutionException
    {
        java.util.concurrent.ExecutionException $r0;
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ComputedException r1;
        java.lang.Exception $r2;

        r1 := @this: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ComputedException;

        $r0 = new java.util.concurrent.ExecutionException;

        $r2 = r1.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ComputedException: java.lang.Exception e>;

        specialinvoke $r0.<java.util.concurrent.ExecutionException: void <init>(java.lang.Throwable)>($r2);

        throw $r0;
    }
}
