final class org.apache.lucene.analysis.miscellaneous.PatternAnalyzer$FastStringTokenizer extends org.apache.lucene.analysis.Tokenizer
{
    private java.lang.String str;
    private int pos;
    private final boolean isLetter;
    private final boolean toLowerCase;
    private final org.apache.lucene.analysis.util.CharArraySet stopWords;
    private static final java.util.Locale locale;
    private final org.apache.lucene.analysis.tokenattributes.CharTermAttribute termAtt;
    private final org.apache.lucene.analysis.tokenattributes.OffsetAttribute offsetAtt;

    public void <init>(java.io.Reader, boolean, boolean, org.apache.lucene.analysis.util.CharArraySet)
    {
        org.apache.lucene.analysis.tokenattributes.CharTermAttribute $r3;
        org.apache.lucene.analysis.miscellaneous.PatternAnalyzer$FastStringTokenizer r0;
        java.io.Reader r1;
        org.apache.lucene.analysis.tokenattributes.OffsetAttribute $r5;
        org.apache.lucene.analysis.util.CharArraySet r6;
        org.apache.lucene.util.Attribute $r2, $r4;
        boolean z0, z1;

        r0 := @this: org.apache.lucene.analysis.miscellaneous.PatternAnalyzer$FastStringTokenizer;

        r1 := @parameter0: java.io.Reader;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        r6 := @parameter3: org.apache.lucene.analysis.util.CharArraySet;

        specialinvoke r0.<org.apache.lucene.analysis.Tokenizer: void <init>(java.io.Reader)>(r1);

        $r2 = virtualinvoke r0.<org.apache.lucene.analysis.miscellaneous.PatternAnalyzer$FastStringTokenizer: org.apache.lucene.util.Attribute addAttribute(java.lang.Class)>(class "Lorg/apache/lucene/analysis/tokenattributes/CharTermAttribute;");

        $r3 = (org.apache.lucene.analysis.tokenattributes.CharTermAttribute) $r2;

        r0.<org.apache.lucene.analysis.miscellaneous.PatternAnalyzer$FastStringTokenizer: org.apache.lucene.analysis.tokenattributes.CharTermAttribute termAtt> = $r3;

        $r4 = virtualinvoke r0.<org.apache.lucene.analysis.miscellaneous.PatternAnalyzer$FastStringTokenizer: org.apache.lucene.util.Attribute addAttribute(java.lang.Class)>(class "Lorg/apache/lucene/analysis/tokenattributes/OffsetAttribute;");

        $r5 = (org.apache.lucene.analysis.tokenattributes.OffsetAttribute) $r4;

        r0.<org.apache.lucene.analysis.miscellaneous.PatternAnalyzer$FastStringTokenizer: org.apache.lucene.analysis.tokenattributes.OffsetAttribute offsetAtt> = $r5;

        r0.<org.apache.lucene.analysis.miscellaneous.PatternAnalyzer$FastStringTokenizer: boolean isLetter> = z0;

        r0.<org.apache.lucene.analysis.miscellaneous.PatternAnalyzer$FastStringTokenizer: boolean toLowerCase> = z1;

        r0.<org.apache.lucene.analysis.miscellaneous.PatternAnalyzer$FastStringTokenizer: org.apache.lucene.analysis.util.CharArraySet stopWords> = r6;

        return;
    }

    public boolean incrementToken()
    {
        org.apache.lucene.analysis.miscellaneous.PatternAnalyzer$FastStringTokenizer r0;
        java.util.Locale $r6;
        int $i0, $i1, $i2, i5, i6;
        java.lang.String r1, $r5, r7;
        boolean z0, $z1, $z2, $z3, $z4;
        org.apache.lucene.analysis.tokenattributes.CharTermAttribute $r2, $r3;
        char $c3, $c4;
        org.apache.lucene.analysis.tokenattributes.OffsetAttribute $r4;

        r0 := @this: org.apache.lucene.analysis.miscellaneous.PatternAnalyzer$FastStringTokenizer;

        virtualinvoke r0.<org.apache.lucene.analysis.miscellaneous.PatternAnalyzer$FastStringTokenizer: void clearAttributes()>();

        r1 = r0.<org.apache.lucene.analysis.miscellaneous.PatternAnalyzer$FastStringTokenizer: java.lang.String str>;

        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        i5 = r0.<org.apache.lucene.analysis.miscellaneous.PatternAnalyzer$FastStringTokenizer: int pos>;

        z0 = r0.<org.apache.lucene.analysis.miscellaneous.PatternAnalyzer$FastStringTokenizer: boolean isLetter>;

        i6 = 0;

     label1:
        r7 = null;

     label2:
        if i5 >= $i0 goto label3;

        $c4 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i5);

        $z4 = specialinvoke r0.<org.apache.lucene.analysis.miscellaneous.PatternAnalyzer$FastStringTokenizer: boolean isTokenChar(char,boolean)>($c4, z0);

        if $z4 != 0 goto label3;

        i5 = i5 + 1;

        goto label2;

     label3:
        if i5 >= $i0 goto label6;

        i6 = i5;

     label4:
        if i5 >= $i0 goto label5;

        $c3 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i5);

        $z3 = specialinvoke r0.<org.apache.lucene.analysis.miscellaneous.PatternAnalyzer$FastStringTokenizer: boolean isTokenChar(char,boolean)>($c3, z0);

        if $z3 == 0 goto label5;

        i5 = i5 + 1;

        goto label4;

     label5:
        $r5 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(i6, i5);

        r7 = $r5;

        $z2 = r0.<org.apache.lucene.analysis.miscellaneous.PatternAnalyzer$FastStringTokenizer: boolean toLowerCase>;

        if $z2 == 0 goto label6;

        $r6 = <org.apache.lucene.analysis.miscellaneous.PatternAnalyzer$FastStringTokenizer: java.util.Locale locale>;

        r7 = virtualinvoke $r5.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r6);

     label6:
        if r7 == null goto label7;

        $z1 = specialinvoke r0.<org.apache.lucene.analysis.miscellaneous.PatternAnalyzer$FastStringTokenizer: boolean isStopWord(java.lang.String)>(r7);

        if $z1 != 0 goto label1;

     label7:
        r0.<org.apache.lucene.analysis.miscellaneous.PatternAnalyzer$FastStringTokenizer: int pos> = i5;

        if r7 != null goto label8;

        return 0;

     label8:
        $r2 = r0.<org.apache.lucene.analysis.miscellaneous.PatternAnalyzer$FastStringTokenizer: org.apache.lucene.analysis.tokenattributes.CharTermAttribute termAtt>;

        $r3 = interfaceinvoke $r2.<org.apache.lucene.analysis.tokenattributes.CharTermAttribute: org.apache.lucene.analysis.tokenattributes.CharTermAttribute setEmpty()>();

        interfaceinvoke $r3.<org.apache.lucene.analysis.tokenattributes.CharTermAttribute: org.apache.lucene.analysis.tokenattributes.CharTermAttribute append(java.lang.String)>(r7);

        $r4 = r0.<org.apache.lucene.analysis.miscellaneous.PatternAnalyzer$FastStringTokenizer: org.apache.lucene.analysis.tokenattributes.OffsetAttribute offsetAtt>;

        $i1 = virtualinvoke r0.<org.apache.lucene.analysis.miscellaneous.PatternAnalyzer$FastStringTokenizer: int correctOffset(int)>(i6);

        $i2 = virtualinvoke r0.<org.apache.lucene.analysis.miscellaneous.PatternAnalyzer$FastStringTokenizer: int correctOffset(int)>(i5);

        interfaceinvoke $r4.<org.apache.lucene.analysis.tokenattributes.OffsetAttribute: void setOffset(int,int)>($i1, $i2);

        return 1;
    }

    public final void end()
    {
        org.apache.lucene.analysis.miscellaneous.PatternAnalyzer$FastStringTokenizer r0;
        int $i0, $i1, $i2;
        java.lang.String $r1;
        org.apache.lucene.analysis.tokenattributes.OffsetAttribute $r2;

        r0 := @this: org.apache.lucene.analysis.miscellaneous.PatternAnalyzer$FastStringTokenizer;

        $r1 = r0.<org.apache.lucene.analysis.miscellaneous.PatternAnalyzer$FastStringTokenizer: java.lang.String str>;

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        $r2 = r0.<org.apache.lucene.analysis.miscellaneous.PatternAnalyzer$FastStringTokenizer: org.apache.lucene.analysis.tokenattributes.OffsetAttribute offsetAtt>;

        $i1 = virtualinvoke r0.<org.apache.lucene.analysis.miscellaneous.PatternAnalyzer$FastStringTokenizer: int correctOffset(int)>($i0);

        $i2 = virtualinvoke r0.<org.apache.lucene.analysis.miscellaneous.PatternAnalyzer$FastStringTokenizer: int correctOffset(int)>($i0);

        interfaceinvoke $r2.<org.apache.lucene.analysis.tokenattributes.OffsetAttribute: void setOffset(int,int)>($i1, $i2);

        return;
    }

    private boolean isTokenChar(char, boolean)
    {
        org.apache.lucene.analysis.miscellaneous.PatternAnalyzer$FastStringTokenizer r0;
        char c0;
        boolean z0, $z1, $z2;

        r0 := @this: org.apache.lucene.analysis.miscellaneous.PatternAnalyzer$FastStringTokenizer;

        c0 := @parameter0: char;

        z0 := @parameter1: boolean;

        if z0 == 0 goto label1;

        $z2 = staticinvoke <java.lang.Character: boolean isLetter(char)>(c0);

        goto label3;

     label1:
        $z1 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>(c0);

        if $z1 != 0 goto label2;

        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    private boolean isStopWord(java.lang.String)
    {
        org.apache.lucene.analysis.miscellaneous.PatternAnalyzer$FastStringTokenizer r0;
        org.apache.lucene.analysis.util.CharArraySet $r1, $r3;
        java.lang.String r2;
        boolean $z0, $z1;

        r0 := @this: org.apache.lucene.analysis.miscellaneous.PatternAnalyzer$FastStringTokenizer;

        r2 := @parameter0: java.lang.String;

        $r1 = r0.<org.apache.lucene.analysis.miscellaneous.PatternAnalyzer$FastStringTokenizer: org.apache.lucene.analysis.util.CharArraySet stopWords>;

        if $r1 == null goto label1;

        $r3 = r0.<org.apache.lucene.analysis.miscellaneous.PatternAnalyzer$FastStringTokenizer: org.apache.lucene.analysis.util.CharArraySet stopWords>;

        $z0 = virtualinvoke $r3.<org.apache.lucene.analysis.util.CharArraySet: boolean contains(java.lang.CharSequence)>(r2);

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public void reset() throws java.io.IOException
    {
        java.io.Reader $r1;
        java.lang.String $r2;
        org.apache.lucene.analysis.miscellaneous.PatternAnalyzer$FastStringTokenizer r0;

        r0 := @this: org.apache.lucene.analysis.miscellaneous.PatternAnalyzer$FastStringTokenizer;

        specialinvoke r0.<org.apache.lucene.analysis.Tokenizer: void reset()>();

        $r1 = r0.<org.apache.lucene.analysis.miscellaneous.PatternAnalyzer$FastStringTokenizer: java.io.Reader input>;

        $r2 = staticinvoke <org.apache.lucene.analysis.miscellaneous.PatternAnalyzer: java.lang.String access$000(java.io.Reader)>($r1);

        r0.<org.apache.lucene.analysis.miscellaneous.PatternAnalyzer$FastStringTokenizer: java.lang.String str> = $r2;

        r0.<org.apache.lucene.analysis.miscellaneous.PatternAnalyzer$FastStringTokenizer: int pos> = 0;

        return;
    }

    static void <clinit>()
    {
        java.util.Locale $r0;

        $r0 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        <org.apache.lucene.analysis.miscellaneous.PatternAnalyzer$FastStringTokenizer: java.util.Locale locale> = $r0;

        return;
    }
}
