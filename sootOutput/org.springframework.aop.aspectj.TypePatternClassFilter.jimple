public class org.springframework.aop.aspectj.TypePatternClassFilter extends java.lang.Object implements org.springframework.aop.ClassFilter
{
    private java.lang.String typePattern;
    private org.aspectj.weaver.tools.TypePatternMatcher aspectJTypePatternMatcher;

    public void <init>()
    {
        org.springframework.aop.aspectj.TypePatternClassFilter r0;

        r0 := @this: org.springframework.aop.aspectj.TypePatternClassFilter;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void <init>(java.lang.String)
    {
        org.springframework.aop.aspectj.TypePatternClassFilter r0;
        java.lang.String r1;

        r0 := @this: org.springframework.aop.aspectj.TypePatternClassFilter;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        virtualinvoke r0.<org.springframework.aop.aspectj.TypePatternClassFilter: void setTypePattern(java.lang.String)>(r1);

        return;
    }

    public void setTypePattern(java.lang.String)
    {
        org.aspectj.weaver.tools.PointcutParser $r2;
        org.springframework.aop.aspectj.TypePatternClassFilter r1;
        java.lang.String r0, $r3;
        org.aspectj.weaver.tools.TypePatternMatcher $r4;

        r1 := @this: org.springframework.aop.aspectj.TypePatternClassFilter;

        r0 := @parameter0: java.lang.String;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object)>(r0);

        r1.<org.springframework.aop.aspectj.TypePatternClassFilter: java.lang.String typePattern> = r0;

        $r2 = staticinvoke <org.aspectj.weaver.tools.PointcutParser: org.aspectj.weaver.tools.PointcutParser getPointcutParserSupportingAllPrimitivesAndUsingContextClassloaderForResolution()>();

        $r3 = specialinvoke r1.<org.springframework.aop.aspectj.TypePatternClassFilter: java.lang.String replaceBooleanOperators(java.lang.String)>(r0);

        $r4 = virtualinvoke $r2.<org.aspectj.weaver.tools.PointcutParser: org.aspectj.weaver.tools.TypePatternMatcher parseTypePattern(java.lang.String)>($r3);

        r1.<org.springframework.aop.aspectj.TypePatternClassFilter: org.aspectj.weaver.tools.TypePatternMatcher aspectJTypePatternMatcher> = $r4;

        return;
    }

    public java.lang.String getTypePattern()
    {
        org.springframework.aop.aspectj.TypePatternClassFilter r0;
        java.lang.String $r1;

        r0 := @this: org.springframework.aop.aspectj.TypePatternClassFilter;

        $r1 = r0.<org.springframework.aop.aspectj.TypePatternClassFilter: java.lang.String typePattern>;

        return $r1;
    }

    public boolean matches(java.lang.Class)
    {
        java.lang.IllegalStateException $r4;
        org.springframework.aop.aspectj.TypePatternClassFilter r0;
        java.lang.Class r2;
        org.aspectj.weaver.tools.TypePatternMatcher $r1, $r3;
        boolean $z0;

        r0 := @this: org.springframework.aop.aspectj.TypePatternClassFilter;

        r2 := @parameter0: java.lang.Class;

        $r1 = r0.<org.springframework.aop.aspectj.TypePatternClassFilter: org.aspectj.weaver.tools.TypePatternMatcher aspectJTypePatternMatcher>;

        if $r1 != null goto label1;

        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("No \'typePattern\' has been set via ctor/setter.");

        throw $r4;

     label1:
        $r3 = r0.<org.springframework.aop.aspectj.TypePatternClassFilter: org.aspectj.weaver.tools.TypePatternMatcher aspectJTypePatternMatcher>;

        $z0 = interfaceinvoke $r3.<org.aspectj.weaver.tools.TypePatternMatcher: boolean matches(java.lang.Class)>(r2);

        return $z0;
    }

    private java.lang.String replaceBooleanOperators(java.lang.String)
    {
        org.springframework.aop.aspectj.TypePatternClassFilter r3;
        java.lang.String $r0, $r1, $r2, r4;

        r3 := @this: org.springframework.aop.aspectj.TypePatternClassFilter;

        r4 := @parameter0: java.lang.String;

        $r0 = staticinvoke <org.springframework.util.StringUtils: java.lang.String replace(java.lang.String,java.lang.String,java.lang.String)>(r4, " and ", " && ");

        $r1 = staticinvoke <org.springframework.util.StringUtils: java.lang.String replace(java.lang.String,java.lang.String,java.lang.String)>($r0, " or ", " || ");

        $r2 = staticinvoke <org.springframework.util.StringUtils: java.lang.String replace(java.lang.String,java.lang.String,java.lang.String)>($r1, " not ", " ! ");

        return $r2;
    }
}
