public final class org.wiztools.restclient.util.HttpUtil extends java.lang.Object
{
    public static final org.wiztools.restclient.bean.ContentType DEFAULT_CONTENT_TYPE;
    public static final java.nio.charset.Charset DEFAULT_CHARSET;

    public void <init>()
    {
        org.wiztools.restclient.util.HttpUtil r0;

        r0 := @this: org.wiztools.restclient.util.HttpUtil;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static org.wiztools.restclient.bean.ContentType getContentType(java.lang.String)
    {
        java.util.regex.Matcher $r3;
        java.nio.charset.Charset $r6;
        org.wiztools.restclient.bean.ContentTypeBean $r1, $r7;
        java.lang.String r0, $r4, $r5;
        java.util.regex.Pattern $r2;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<java.lang.String: boolean contains(java.lang.CharSequence)>("charset");

        if $z0 == 0 goto label2;

        $r2 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("([^;]+);\\s*charset=([^;]+)");

        $r3 = virtualinvoke $r2.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r0);

        $z1 = virtualinvoke $r3.<java.util.regex.Matcher: boolean matches()>();

        if $z1 == 0 goto label1;

        $r4 = virtualinvoke $r3.<java.util.regex.Matcher: java.lang.String group(int)>(1);

        $r5 = virtualinvoke $r3.<java.util.regex.Matcher: java.lang.String group(int)>(2);

        $r6 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>($r5);

        $r7 = new org.wiztools.restclient.bean.ContentTypeBean;

        specialinvoke $r7.<org.wiztools.restclient.bean.ContentTypeBean: void <init>(java.lang.String,java.nio.charset.Charset)>($r4, $r6);

        return $r7;

     label1:
        goto label3;

     label2:
        $r1 = new org.wiztools.restclient.bean.ContentTypeBean;

        specialinvoke $r1.<org.wiztools.restclient.bean.ContentTypeBean: void <init>(java.lang.String,java.nio.charset.Charset)>(r0, null);

        return $r1;

     label3:
        return null;
    }

    public static org.wiztools.restclient.bean.ContentType getContentType(org.wiztools.commons.MultiValueMap)
    {
        java.util.Iterator $r2, $r8;
        java.util.Collection $r7;
        java.util.Set $r1;
        java.lang.Object $r3, $r9;
        java.lang.String r4, $r5, $r6, $r10;
        org.wiztools.restclient.bean.ContentType $r11;
        org.wiztools.commons.MultiValueMap r0;
        boolean $z0, $z1;

        r0 := @parameter0: org.wiztools.commons.MultiValueMap;

        $r1 = interfaceinvoke r0.<org.wiztools.commons.MultiValueMap: java.util.Set keySet()>();

        $r2 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.lang.String) $r3;

        $r5 = "content-type";

        $r6 = virtualinvoke r4.<java.lang.String: java.lang.String trim()>();

        $z1 = virtualinvoke $r5.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r6);

        if $z1 == 0 goto label2;

        $r7 = interfaceinvoke r0.<org.wiztools.commons.MultiValueMap: java.util.Collection get(java.lang.Object)>(r4);

        $r8 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>();

        $r9 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        $r10 = (java.lang.String) $r9;

        $r11 = staticinvoke <org.wiztools.restclient.util.HttpUtil: org.wiztools.restclient.bean.ContentType getContentType(java.lang.String)>($r10);

        return $r11;

     label2:
        goto label1;

     label3:
        return null;
    }

    public static int getStatusCodeFromStatusLine(java.lang.String)
    {
        java.util.regex.Matcher $r2;
        int i0, $i2;
        java.util.regex.Pattern $r0;
        java.lang.String r1, $r3;
        boolean $z0;

        r1 := @parameter0: java.lang.String;

        $i2 = (int) -1;

        i0 = $i2;

        $r0 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("[^\\s]+\\s([0-9]{3})\\s.*");

        $r2 = virtualinvoke $r0.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r1);

        $z0 = virtualinvoke $r2.<java.util.regex.Matcher: boolean matches()>();

        if $z0 == 0 goto label1;

        $r3 = virtualinvoke $r2.<java.util.regex.Matcher: java.lang.String group(int)>(1);

        i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r3);

     label1:
        return i0;
    }

    public static java.lang.String getFormattedContentType(java.lang.String, java.lang.String)
    {
        java.lang.StringBuilder $r1, $r2, $r3, $r4, $r6, $r7;
        java.lang.String r0, r5, $r8, $r9;
        boolean $z0;

        r5 := @parameter0: java.lang.String;

        r0 := @parameter1: java.lang.String;

        $z0 = staticinvoke <org.wiztools.commons.StringUtil: boolean isEmpty(java.lang.String)>(r0);

        if $z0 == 0 goto label1;

        $r9 = "";

        goto label2;

     label1:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; charset=");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r9 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

     label2:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;
    }

    public static java.lang.String getFormattedContentType(java.lang.String, java.nio.charset.Charset)
    {
        java.nio.charset.Charset r1;
        java.lang.String r0, $r2, $r3;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.nio.charset.Charset;

        if r1 == null goto label1;

        $r3 = virtualinvoke r1.<java.nio.charset.Charset: java.lang.String name()>();

        goto label2;

     label1:
        $r3 = null;

     label2:
        $r2 = staticinvoke <org.wiztools.restclient.util.HttpUtil: java.lang.String getFormattedContentType(java.lang.String,java.lang.String)>(r0, $r3);

        return $r2;
    }

    public static java.lang.String getFormattedContentType(org.wiztools.restclient.bean.ContentType)
    {
        java.nio.charset.Charset $r2;
        org.wiztools.restclient.bean.ContentType r0;
        java.lang.String $r1, $r3;

        r0 := @parameter0: org.wiztools.restclient.bean.ContentType;

        $r1 = interfaceinvoke r0.<org.wiztools.restclient.bean.ContentType: java.lang.String getContentType()>();

        $r2 = interfaceinvoke r0.<org.wiztools.restclient.bean.ContentType: java.nio.charset.Charset getCharset()>();

        $r3 = staticinvoke <org.wiztools.restclient.util.HttpUtil: java.lang.String getFormattedContentType(java.lang.String,java.nio.charset.Charset)>($r1, $r2);

        return $r3;
    }

    public static java.lang.String getCharsetFromContentType(java.lang.String)
    {
        java.util.regex.Matcher $r2;
        java.util.regex.Pattern $r0;
        java.lang.String r1, $r3, $r4;
        boolean $z0;

        r1 := @parameter0: java.lang.String;

        $r0 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("^.+charset=([^;]+).*$");

        $r2 = virtualinvoke $r0.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r1);

        $z0 = virtualinvoke $r2.<java.util.regex.Matcher: boolean matches()>();

        if $z0 == 0 goto label1;

        $r3 = virtualinvoke $r2.<java.util.regex.Matcher: java.lang.String group(int)>(1);

        $r4 = virtualinvoke $r3.<java.lang.String: java.lang.String trim()>();

        return $r4;

     label1:
        return null;
    }

    public static java.lang.String getMimeFromContentType(java.lang.String)
    {
        int $i0, $i2;
        java.lang.String r0, $r1;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(59);

        $i2 = (int) -1;

        if $i0 != $i2 goto label1;

        return r0;

     label1:
        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        return $r1;
    }

    private static java.lang.String getContentTypeBeforeSemiColon(java.lang.String)
    {
        int $i0, $i2;
        java.lang.String[] $r1;
        java.lang.String r0, $r2;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(59);

        $i2 = (int) -1;

        if $i0 == $i2 goto label1;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String[] split(java.lang.String)>(";");

        $r2 = $r1[0];

        goto label2;

     label1:
        $r2 = r0;

     label2:
        return $r2;
    }

    public static boolean isWebImageContentType(java.lang.String)
    {
        java.lang.String r0, $r1;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.wiztools.restclient.util.HttpUtil: java.lang.String getContentTypeBeforeSemiColon(java.lang.String)>(r0);

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("image/jpeg");

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("image/png");

        if $z1 != 0 goto label1;

        $z2 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("image/gif");

        if $z2 == 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }

    public static boolean isTextContentType(java.lang.String)
    {
        java.lang.String r0, $r1;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.wiztools.restclient.util.HttpUtil: java.lang.String getContentTypeBeforeSemiColon(java.lang.String)>(r0);

        $z0 = virtualinvoke $r1.<java.lang.String: boolean startsWith(java.lang.String)>("text/");

        if $z0 != 0 goto label1;

        $z1 = staticinvoke <org.wiztools.restclient.util.HttpUtil: boolean isXmlContentType(java.lang.String)>($r1);

        if $z1 != 0 goto label1;

        $z2 = staticinvoke <org.wiztools.restclient.util.HttpUtil: boolean isJsonContentType(java.lang.String)>($r1);

        if $z2 == 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }

    public static boolean isXmlContentType(java.lang.String)
    {
        java.lang.String r0, $r1;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.wiztools.restclient.util.HttpUtil: java.lang.String getContentTypeBeforeSemiColon(java.lang.String)>(r0);

        $z0 = virtualinvoke $r1.<java.lang.String: boolean startsWith(java.lang.String)>("application/xml");

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke $r1.<java.lang.String: boolean startsWith(java.lang.String)>("text/xml");

        if $z1 != 0 goto label1;

        $z2 = virtualinvoke $r1.<java.lang.String: boolean endsWith(java.lang.String)>("+xml");

        if $z2 == 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }

    public static boolean isJsonContentType(java.lang.String)
    {
        java.lang.String r0, $r1;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.wiztools.restclient.util.HttpUtil: java.lang.String getContentTypeBeforeSemiColon(java.lang.String)>(r0);

        $z0 = virtualinvoke $r1.<java.lang.String: boolean startsWith(java.lang.String)>("application/json");

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke $r1.<java.lang.String: boolean endsWith(java.lang.String)>("+json");

        if $z1 == 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }

    public static java.nio.charset.Charset getCharsetDefault(org.wiztools.restclient.bean.ContentType)
    {
        org.wiztools.restclient.bean.ContentType r0;
        java.nio.charset.Charset $r1, $r2;

        r0 := @parameter0: org.wiztools.restclient.bean.ContentType;

        if r0 == null goto label2;

        $r1 = interfaceinvoke r0.<org.wiztools.restclient.bean.ContentType: java.nio.charset.Charset getCharset()>();

        if $r1 == null goto label1;

        $r2 = interfaceinvoke r0.<org.wiztools.restclient.bean.ContentType: java.nio.charset.Charset getCharset()>();

        goto label3;

     label1:
        $r2 = <org.wiztools.restclient.util.HttpUtil: java.nio.charset.Charset DEFAULT_CHARSET>;

        goto label3;

     label2:
        $r2 = <org.wiztools.restclient.util.HttpUtil: java.nio.charset.Charset DEFAULT_CHARSET>;

     label3:
        return $r2;
    }

    static void <clinit>()
    {
        java.nio.charset.Charset $r1, $r2;
        org.wiztools.restclient.bean.ContentTypeBean $r0;

        $r0 = new org.wiztools.restclient.bean.ContentTypeBean;

        $r1 = <org.wiztools.commons.Charsets: java.nio.charset.Charset UTF_8>;

        specialinvoke $r0.<org.wiztools.restclient.bean.ContentTypeBean: void <init>(java.lang.String,java.nio.charset.Charset)>("text/plain", $r1);

        <org.wiztools.restclient.util.HttpUtil: org.wiztools.restclient.bean.ContentType DEFAULT_CONTENT_TYPE> = $r0;

        $r2 = <org.wiztools.commons.Charsets: java.nio.charset.Charset UTF_8>;

        <org.wiztools.restclient.util.HttpUtil: java.nio.charset.Charset DEFAULT_CHARSET> = $r2;

        return;
    }
}
