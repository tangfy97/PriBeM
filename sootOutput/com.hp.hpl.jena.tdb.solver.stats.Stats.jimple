public class com.hp.hpl.jena.tdb.solver.stats.Stats extends java.lang.Object
{
    static com.hp.hpl.jena.sparql.sse.Item ZERO;

    public void <init>()
    {
        com.hp.hpl.jena.tdb.solver.stats.Stats r0;

        r0 := @this: com.hp.hpl.jena.tdb.solver.stats.Stats;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void write(java.lang.String, com.hp.hpl.jena.tdb.solver.stats.StatsResults)
    {
        java.util.Map $r2, $r3;
        long $l0;
        java.lang.String r0;
        com.hp.hpl.jena.tdb.solver.stats.StatsResults r1;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: com.hp.hpl.jena.tdb.solver.stats.StatsResults;

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.tdb.solver.stats.StatsResults: java.util.Map getPredicates()>();

        $r3 = virtualinvoke r1.<com.hp.hpl.jena.tdb.solver.stats.StatsResults: java.util.Map getTypes()>();

        $l0 = virtualinvoke r1.<com.hp.hpl.jena.tdb.solver.stats.StatsResults: long getCount()>();

        staticinvoke <com.hp.hpl.jena.tdb.solver.stats.Stats: void write(java.lang.String,java.util.Map,java.util.Map,long)>(r0, $r2, $r3, $l0);

        return;
    }

    public static void write(java.io.OutputStream, com.hp.hpl.jena.tdb.solver.stats.StatsResults)
    {
        java.io.OutputStream r0;
        java.util.Map $r2, $r3;
        long $l0;
        com.hp.hpl.jena.tdb.solver.stats.StatsResults r1;

        r0 := @parameter0: java.io.OutputStream;

        r1 := @parameter1: com.hp.hpl.jena.tdb.solver.stats.StatsResults;

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.tdb.solver.stats.StatsResults: java.util.Map getPredicates()>();

        $r3 = virtualinvoke r1.<com.hp.hpl.jena.tdb.solver.stats.StatsResults: java.util.Map getTypes()>();

        $l0 = virtualinvoke r1.<com.hp.hpl.jena.tdb.solver.stats.StatsResults: long getCount()>();

        staticinvoke <com.hp.hpl.jena.tdb.solver.stats.Stats: void write(java.io.OutputStream,java.util.Map,java.util.Map,long)>(r0, $r2, $r3, $l0);

        return;
    }

    private static void write(java.lang.String, java.util.Map, java.util.Map, long)
    {
        java.util.Map r2, r3;
        java.io.FileOutputStream $r0;
        long l0;
        java.io.IOException $r4;
        java.lang.String r1;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.util.Map;

        r3 := @parameter2: java.util.Map;

        l0 := @parameter3: long;

     label1:
        $r0 = new java.io.FileOutputStream;

        specialinvoke $r0.<java.io.FileOutputStream: void <init>(java.lang.String)>(r1);

        staticinvoke <com.hp.hpl.jena.tdb.solver.stats.Stats: void write(java.io.OutputStream,java.util.Map,java.util.Map,long)>($r0, r2, r3, l0);

        virtualinvoke $r0.<java.io.OutputStream: void close()>();

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        staticinvoke <org.apache.jena.atlas.logging.Log: void warn(java.lang.Class,java.lang.String,java.lang.Throwable)>(class "Lcom/hp/hpl/jena/tdb/solver/stats/Stats;", "Problem when writing stats file", $r4);

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    private static void write(java.io.OutputStream, java.util.Map, java.util.Map, long)
    {
        java.io.OutputStream r3;
        java.util.Map r0, r1;
        long l0;
        com.hp.hpl.jena.sparql.sse.Item $r2;

        r3 := @parameter0: java.io.OutputStream;

        r0 := @parameter1: java.util.Map;

        r1 := @parameter2: java.util.Map;

        l0 := @parameter3: long;

        $r2 = staticinvoke <com.hp.hpl.jena.tdb.solver.stats.Stats: com.hp.hpl.jena.sparql.sse.Item format(java.util.Map,java.util.Map,long)>(r0, r1, l0);

        staticinvoke <com.hp.hpl.jena.sparql.sse.ItemWriter: void write(java.io.OutputStream,com.hp.hpl.jena.sparql.sse.Item)>(r3, $r2);

        return;
    }

    public static com.hp.hpl.jena.tdb.solver.stats.StatsCollector gather(com.hp.hpl.jena.graph.Graph)
    {
        com.hp.hpl.jena.graph.Node $r2, $r3, $r4, $r8, $r9, $r10;
        com.hp.hpl.jena.graph.Triple r7;
        com.hp.hpl.jena.tdb.solver.stats.StatsCollector $r0;
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r5;
        java.lang.Object $r6;
        com.hp.hpl.jena.graph.Graph r1;
        boolean $z0;

        r1 := @parameter0: com.hp.hpl.jena.graph.Graph;

        $r0 = new com.hp.hpl.jena.tdb.solver.stats.StatsCollector;

        specialinvoke $r0.<com.hp.hpl.jena.tdb.solver.stats.StatsCollector: void <init>()>();

        $r4 = <com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.Node ANY>;

        $r3 = <com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.Node ANY>;

        $r2 = <com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.Node ANY>;

        $r5 = interfaceinvoke r1.<com.hp.hpl.jena.graph.Graph: com.hp.hpl.jena.util.iterator.ExtendedIterator find(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r4, $r3, $r2);

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (com.hp.hpl.jena.graph.Triple) $r6;

        $r8 = virtualinvoke r7.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getSubject()>();

        $r9 = virtualinvoke r7.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getPredicate()>();

        $r10 = virtualinvoke r7.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getObject()>();

        virtualinvoke $r0.<com.hp.hpl.jena.tdb.solver.stats.StatsCollector: void record(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(null, $r8, $r9, $r10);

        goto label1;

     label2:
        return $r0;
    }

    public static com.hp.hpl.jena.sparql.sse.Item format(com.hp.hpl.jena.tdb.solver.stats.StatsResults)
    {
        java.util.Map $r1, $r2;
        long $l0;
        com.hp.hpl.jena.sparql.sse.Item $r3;
        com.hp.hpl.jena.tdb.solver.stats.StatsResults r0;

        r0 := @parameter0: com.hp.hpl.jena.tdb.solver.stats.StatsResults;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.tdb.solver.stats.StatsResults: java.util.Map getPredicates()>();

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.tdb.solver.stats.StatsResults: java.util.Map getTypes()>();

        $l0 = virtualinvoke r0.<com.hp.hpl.jena.tdb.solver.stats.StatsResults: long getCount()>();

        $r3 = staticinvoke <com.hp.hpl.jena.tdb.solver.stats.Stats: com.hp.hpl.jena.sparql.sse.Item format(java.util.Map,java.util.Map,long)>($r1, $r2, $l0);

        return $r3;
    }

    private static com.hp.hpl.jena.sparql.sse.Item format(java.util.Map, java.util.Map, long)
    {
        com.hp.hpl.jena.graph.Node $r4, $r20, $r25, $r27, r29, r31;
        java.lang.Integer $r19, $r24;
        byte $b1;
        java.util.Map r7, r10;
        boolean $z0, $z1, $z2;
        java.util.Set $r8, $r11;
        com.hp.hpl.jena.sparql.sse.Item $r0, $r2, $r13, $r14;
        long l0;
        int $i2, $i3, $i4, $i5;
        java.lang.String $r6, $r17;
        java.util.Map$Entry r28, r30;
        com.hp.hpl.jena.sparql.sse.ItemList $r1, $r3, $r5, $r26;
        java.util.Iterator $r9, $r12;
        java.lang.Object $r15, $r16, $r18, $r21, $r22, $r23;

        r10 := @parameter0: java.util.Map;

        r7 := @parameter1: java.util.Map;

        l0 := @parameter2: long;

        $r0 = staticinvoke <com.hp.hpl.jena.sparql.sse.Item: com.hp.hpl.jena.sparql.sse.Item createList()>();

        $r1 = virtualinvoke $r0.<com.hp.hpl.jena.sparql.sse.Item: com.hp.hpl.jena.sparql.sse.ItemList getList()>();

        virtualinvoke $r1.<com.hp.hpl.jena.sparql.sse.ItemList: void add(java.lang.String)>("stats");

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.sse.Item: com.hp.hpl.jena.sparql.sse.Item createTagged(java.lang.String)>("meta");

        $r3 = virtualinvoke $r2.<com.hp.hpl.jena.sparql.sse.Item: com.hp.hpl.jena.sparql.sse.ItemList getList()>();

        $r4 = staticinvoke <com.hp.hpl.jena.sparql.util.NodeFactoryExtra: com.hp.hpl.jena.graph.Node nowAsDateTime()>();

        staticinvoke <com.hp.hpl.jena.sparql.sse.Item: void addPair(com.hp.hpl.jena.sparql.sse.ItemList,java.lang.String,com.hp.hpl.jena.graph.Node)>($r3, "timestamp", $r4);

        $r5 = virtualinvoke $r2.<com.hp.hpl.jena.sparql.sse.Item: com.hp.hpl.jena.sparql.sse.ItemList getList()>();

        $r6 = staticinvoke <com.hp.hpl.jena.sparql.util.Utils: java.lang.String nowAsString()>();

        staticinvoke <com.hp.hpl.jena.sparql.sse.Item: void addPair(com.hp.hpl.jena.sparql.sse.ItemList,java.lang.String,java.lang.String)>($r5, "run@", $r6);

        $b1 = l0 cmp 0L;

        $i5 = (int) $b1;

        if $i5 < 0 goto label1;

        $r26 = virtualinvoke $r2.<com.hp.hpl.jena.sparql.sse.Item: com.hp.hpl.jena.sparql.sse.ItemList getList()>();

        $i4 = (int) l0;

        $r27 = staticinvoke <com.hp.hpl.jena.sparql.util.NodeFactoryExtra: com.hp.hpl.jena.graph.Node intToNode(int)>($i4);

        staticinvoke <com.hp.hpl.jena.sparql.sse.Item: void addPair(com.hp.hpl.jena.sparql.sse.ItemList,java.lang.String,com.hp.hpl.jena.graph.Node)>($r26, "count", $r27);

     label1:
        virtualinvoke $r1.<com.hp.hpl.jena.sparql.sse.ItemList: void add(com.hp.hpl.jena.sparql.sse.Item)>($r2);

        $r8 = interfaceinvoke r7.<java.util.Map: java.util.Set entrySet()>();

        $r9 = interfaceinvoke $r8.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r21 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        r28 = (java.util.Map$Entry) $r21;

        $r22 = interfaceinvoke r28.<java.util.Map$Entry: java.lang.Object getKey()>();

        r29 = (com.hp.hpl.jena.graph.Node) $r22;

        $r23 = interfaceinvoke r28.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r24 = (java.lang.Integer) $r23;

        $i3 = virtualinvoke $r24.<java.lang.Integer: int intValue()>();

        $r25 = staticinvoke <com.hp.hpl.jena.sparql.util.NodeFactoryExtra: com.hp.hpl.jena.graph.Node intToNode(int)>($i3);

        staticinvoke <com.hp.hpl.jena.tdb.solver.stats.Stats: void addTypeTriple(com.hp.hpl.jena.sparql.sse.ItemList,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r1, r29, $r25);

        goto label2;

     label3:
        $r11 = interfaceinvoke r10.<java.util.Map: java.util.Set entrySet()>();

        $r12 = interfaceinvoke $r11.<java.util.Set: java.util.Iterator iterator()>();

     label4:
        $z2 = interfaceinvoke $r12.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label6;

        $r15 = interfaceinvoke $r12.<java.util.Iterator: java.lang.Object next()>();

        r30 = (java.util.Map$Entry) $r15;

        $r16 = interfaceinvoke r30.<java.util.Map$Entry: java.lang.Object getKey()>();

        r31 = (com.hp.hpl.jena.graph.Node) $r16;

        $r17 = virtualinvoke r31.<com.hp.hpl.jena.graph.Node: java.lang.String getURI()>();

        $z0 = virtualinvoke $r17.<java.lang.String: boolean startsWith(java.lang.String)>("http://www.w3.org/1999/02/22-rdf-syntax-ns#_");

        if $z0 == 0 goto label5;

        goto label4;

     label5:
        $r18 = interfaceinvoke r30.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r19 = (java.lang.Integer) $r18;

        $i2 = virtualinvoke $r19.<java.lang.Integer: int intValue()>();

        $r20 = staticinvoke <com.hp.hpl.jena.sparql.util.NodeFactoryExtra: com.hp.hpl.jena.graph.Node intToNode(int)>($i2);

        staticinvoke <com.hp.hpl.jena.sparql.sse.Item: void addPair(com.hp.hpl.jena.sparql.sse.ItemList,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r1, r31, $r20);

        goto label4;

     label6:
        $r14 = <com.hp.hpl.jena.sparql.engine.optimizer.StatsMatcher: com.hp.hpl.jena.sparql.sse.Item OTHER>;

        $r13 = <com.hp.hpl.jena.tdb.solver.stats.Stats: com.hp.hpl.jena.sparql.sse.Item ZERO>;

        staticinvoke <com.hp.hpl.jena.sparql.sse.Item: void addPair(com.hp.hpl.jena.sparql.sse.ItemList,com.hp.hpl.jena.sparql.sse.Item,com.hp.hpl.jena.sparql.sse.Item)>($r1, $r14, $r13);

        return $r0;
    }

    private static void addTypeTriple(com.hp.hpl.jena.sparql.sse.ItemList, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.sparql.sse.ItemList $r0, r3;
        com.hp.hpl.jena.sparql.sse.Item $r4, $r6;
        com.hp.hpl.jena.graph.Node $r1, r2, r5;

        r3 := @parameter0: com.hp.hpl.jena.sparql.sse.ItemList;

        r2 := @parameter1: com.hp.hpl.jena.graph.Node;

        r5 := @parameter2: com.hp.hpl.jena.graph.Node;

        $r0 = new com.hp.hpl.jena.sparql.sse.ItemList;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.sse.ItemList: void <init>()>();

        virtualinvoke $r0.<com.hp.hpl.jena.sparql.sse.ItemList: void add(java.lang.String)>("VAR");

        $r1 = <com.hp.hpl.jena.sparql.graph.NodeConst: com.hp.hpl.jena.graph.Node nodeRDFType>;

        virtualinvoke $r0.<com.hp.hpl.jena.sparql.sse.ItemList: void add(com.hp.hpl.jena.graph.Node)>($r1);

        virtualinvoke $r0.<com.hp.hpl.jena.sparql.sse.ItemList: void add(com.hp.hpl.jena.graph.Node)>(r2);

        $r4 = staticinvoke <com.hp.hpl.jena.sparql.sse.Item: com.hp.hpl.jena.sparql.sse.Item createList(com.hp.hpl.jena.sparql.sse.ItemList)>($r0);

        $r6 = staticinvoke <com.hp.hpl.jena.sparql.sse.Item: com.hp.hpl.jena.sparql.sse.Item createNode(com.hp.hpl.jena.graph.Node)>(r5);

        staticinvoke <com.hp.hpl.jena.sparql.sse.Item: void addPair(com.hp.hpl.jena.sparql.sse.ItemList,com.hp.hpl.jena.sparql.sse.Item,com.hp.hpl.jena.sparql.sse.Item)>(r3, $r4, $r6);

        return;
    }

    static void <clinit>()
    {
        com.hp.hpl.jena.sparql.sse.Item $r1;
        com.hp.hpl.jena.graph.Node $r0;

        $r0 = staticinvoke <com.hp.hpl.jena.sparql.util.NodeFactoryExtra: com.hp.hpl.jena.graph.Node intToNode(int)>(0);

        $r1 = staticinvoke <com.hp.hpl.jena.sparql.sse.Item: com.hp.hpl.jena.sparql.sse.Item createNode(com.hp.hpl.jena.graph.Node)>($r0);

        <com.hp.hpl.jena.tdb.solver.stats.Stats: com.hp.hpl.jena.sparql.sse.Item ZERO> = $r1;

        return;
    }
}
