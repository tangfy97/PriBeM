public abstract class org.apache.lucene.analysis.Tokenizer extends org.apache.lucene.analysis.TokenStream
{
    protected java.io.Reader input;
    static final boolean $assertionsDisabled;

    protected void <init>(java.io.Reader)
    {
        org.apache.lucene.analysis.Tokenizer r0;
        java.io.Reader r1;
        java.lang.AssertionError $r2;
        boolean $z0;

        r0 := @this: org.apache.lucene.analysis.Tokenizer;

        r1 := @parameter0: java.io.Reader;

        specialinvoke r0.<org.apache.lucene.analysis.TokenStream: void <init>()>();

        $z0 = <org.apache.lucene.analysis.Tokenizer: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if r1 != null goto label1;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>(java.lang.Object)>("input must not be null");

        throw $r2;

     label1:
        r0.<org.apache.lucene.analysis.Tokenizer: java.io.Reader input> = r1;

        return;
    }

    protected void <init>(org.apache.lucene.util.AttributeSource$AttributeFactory, java.io.Reader)
    {
        org.apache.lucene.analysis.Tokenizer r0;
        org.apache.lucene.util.AttributeSource$AttributeFactory r1;
        java.io.Reader r2;
        java.lang.AssertionError $r3;
        boolean $z0;

        r0 := @this: org.apache.lucene.analysis.Tokenizer;

        r1 := @parameter0: org.apache.lucene.util.AttributeSource$AttributeFactory;

        r2 := @parameter1: java.io.Reader;

        specialinvoke r0.<org.apache.lucene.analysis.TokenStream: void <init>(org.apache.lucene.util.AttributeSource$AttributeFactory)>(r1);

        $z0 = <org.apache.lucene.analysis.Tokenizer: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if r2 != null goto label1;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>(java.lang.Object)>("input must not be null");

        throw $r3;

     label1:
        r0.<org.apache.lucene.analysis.Tokenizer: java.io.Reader input> = r2;

        return;
    }

    public void close() throws java.io.IOException
    {
        org.apache.lucene.analysis.Tokenizer r0;
        java.io.Reader $r1, $r2;

        r0 := @this: org.apache.lucene.analysis.Tokenizer;

        $r1 = r0.<org.apache.lucene.analysis.Tokenizer: java.io.Reader input>;

        if $r1 == null goto label1;

        $r2 = r0.<org.apache.lucene.analysis.Tokenizer: java.io.Reader input>;

        virtualinvoke $r2.<java.io.Reader: void close()>();

        r0.<org.apache.lucene.analysis.Tokenizer: java.io.Reader input> = null;

     label1:
        return;
    }

    protected final int correctOffset(int)
    {
        org.apache.lucene.analysis.Tokenizer r0;
        java.io.Reader $r1, $r2, $r4;
        java.lang.AssertionError $r5;
        org.apache.lucene.analysis.CharFilter $r3;
        int i0, $i1;
        boolean $z0, $z1;

        r0 := @this: org.apache.lucene.analysis.Tokenizer;

        i0 := @parameter0: int;

        $z0 = <org.apache.lucene.analysis.Tokenizer: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r4 = r0.<org.apache.lucene.analysis.Tokenizer: java.io.Reader input>;

        if $r4 != null goto label1;

        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>(java.lang.Object)>("this tokenizer is closed");

        throw $r5;

     label1:
        $r1 = r0.<org.apache.lucene.analysis.Tokenizer: java.io.Reader input>;

        $z1 = $r1 instanceof org.apache.lucene.analysis.CharFilter;

        if $z1 == 0 goto label2;

        $r2 = r0.<org.apache.lucene.analysis.Tokenizer: java.io.Reader input>;

        $r3 = (org.apache.lucene.analysis.CharFilter) $r2;

        $i1 = virtualinvoke $r3.<org.apache.lucene.analysis.CharFilter: int correctOffset(int)>(i0);

        goto label3;

     label2:
        $i1 = i0;

     label3:
        return $i1;
    }

    public final void setReader(java.io.Reader) throws java.io.IOException
    {
        org.apache.lucene.analysis.Tokenizer r0;
        java.io.Reader r1;
        java.lang.AssertionError $r2, $r3;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.lucene.analysis.Tokenizer;

        r1 := @parameter0: java.io.Reader;

        $z0 = <org.apache.lucene.analysis.Tokenizer: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if r1 != null goto label1;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>(java.lang.Object)>("input must not be null");

        throw $r3;

     label1:
        r0.<org.apache.lucene.analysis.Tokenizer: java.io.Reader input> = r1;

        $z1 = <org.apache.lucene.analysis.Tokenizer: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        $z2 = virtualinvoke r0.<org.apache.lucene.analysis.Tokenizer: boolean setReaderTestPoint()>();

        if $z2 != 0 goto label2;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label2:
        return;
    }

    boolean setReaderTestPoint()
    {
        org.apache.lucene.analysis.Tokenizer r0;

        r0 := @this: org.apache.lucene.analysis.Tokenizer;

        return 1;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/apache/lucene/analysis/Tokenizer;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.lucene.analysis.Tokenizer: boolean $assertionsDisabled> = $z1;

        return;
    }
}
