final class com.mycila.inject.internal.guava.cache.CacheBuilder$NullComputingConcurrentMap extends com.mycila.inject.internal.guava.cache.CacheBuilder$NullConcurrentMap
{
    private static final long serialVersionUID;
    final com.mycila.inject.internal.guava.cache.CacheLoader loader;

    void <init>(com.mycila.inject.internal.guava.cache.CacheBuilder, com.mycila.inject.internal.guava.cache.CacheLoader)
    {
        com.mycila.inject.internal.guava.cache.CacheBuilder$NullComputingConcurrentMap r0;
        com.mycila.inject.internal.guava.cache.CacheLoader r2, $r4;
        com.mycila.inject.internal.guava.cache.CacheBuilder r1;
        java.lang.Object $r3;

        r0 := @this: com.mycila.inject.internal.guava.cache.CacheBuilder$NullComputingConcurrentMap;

        r1 := @parameter0: com.mycila.inject.internal.guava.cache.CacheBuilder;

        r2 := @parameter1: com.mycila.inject.internal.guava.cache.CacheLoader;

        specialinvoke r0.<com.mycila.inject.internal.guava.cache.CacheBuilder$NullConcurrentMap: void <init>(com.mycila.inject.internal.guava.cache.CacheBuilder)>(r1);

        $r3 = staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r2);

        $r4 = (com.mycila.inject.internal.guava.cache.CacheLoader) $r3;

        r0.<com.mycila.inject.internal.guava.cache.CacheBuilder$NullComputingConcurrentMap: com.mycila.inject.internal.guava.cache.CacheLoader loader> = $r4;

        return;
    }

    public java.lang.Object get(java.lang.Object)
    {
        com.mycila.inject.internal.guava.cache.CacheBuilder$NullComputingConcurrentMap r1;
        com.mycila.inject.internal.guava.cache.CacheLoader $r4;
        java.lang.Object r0, $r2;
        java.lang.StringBuilder $r3, $r5, $r6, $r7, $r8;
        java.lang.String $r9;

        r1 := @this: com.mycila.inject.internal.guava.cache.CacheBuilder$NullComputingConcurrentMap;

        r0 := @parameter0: java.lang.Object;

        $r2 = specialinvoke r1.<com.mycila.inject.internal.guava.cache.CacheBuilder$NullComputingConcurrentMap: java.lang.Object compute(java.lang.Object)>(r0);

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = r1.<com.mycila.inject.internal.guava.cache.CacheBuilder$NullComputingConcurrentMap: com.mycila.inject.internal.guava.cache.CacheLoader loader>;

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" returned null for key ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>($r2, $r9);

        virtualinvoke r1.<com.mycila.inject.internal.guava.cache.CacheBuilder$NullComputingConcurrentMap: void notifyRemoval(java.lang.Object,java.lang.Object)>(r0, $r2);

        return $r2;
    }

    private java.lang.Object compute(java.lang.Object)
    {
        java.lang.Error $r4;
        com.mycila.inject.internal.guava.util.concurrent.ExecutionError $r5;
        java.lang.Exception $r6;
        com.mycila.inject.internal.guava.cache.CacheBuilder$NullComputingConcurrentMap r1;
        com.mycila.inject.internal.guava.cache.CacheLoader $r2;
        java.lang.Object r0, $r3;
        com.mycila.inject.internal.guava.util.concurrent.UncheckedExecutionException $r7;

        r1 := @this: com.mycila.inject.internal.guava.cache.CacheBuilder$NullComputingConcurrentMap;

        r0 := @parameter0: java.lang.Object;

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

     label1:
        $r2 = r1.<com.mycila.inject.internal.guava.cache.CacheBuilder$NullComputingConcurrentMap: com.mycila.inject.internal.guava.cache.CacheLoader loader>;

        $r3 = virtualinvoke $r2.<com.mycila.inject.internal.guava.cache.CacheLoader: java.lang.Object load(java.lang.Object)>(r0);

     label2:
        return $r3;

     label3:
        $r6 := @caughtexception;

        $r7 = new com.mycila.inject.internal.guava.util.concurrent.UncheckedExecutionException;

        specialinvoke $r7.<com.mycila.inject.internal.guava.util.concurrent.UncheckedExecutionException: void <init>(java.lang.Throwable)>($r6);

        throw $r7;

     label4:
        $r4 := @caughtexception;

        $r5 = new com.mycila.inject.internal.guava.util.concurrent.ExecutionError;

        specialinvoke $r5.<com.mycila.inject.internal.guava.util.concurrent.ExecutionError: void <init>(java.lang.Error)>($r4);

        throw $r5;

        catch java.lang.Exception from label1 to label2 with label3;
        catch java.lang.Error from label1 to label2 with label4;
    }

    public static void <clinit>()
    {
        <com.mycila.inject.internal.guava.cache.CacheBuilder$NullComputingConcurrentMap: long serialVersionUID> = 0L;

        return;
    }
}
