public final class org.apache.cxf.interceptor.LoggingMessage extends java.lang.Object
{
    public static final java.lang.String ID_KEY;
    private static final java.util.concurrent.atomic.AtomicInteger ID;
    private final java.lang.String heading;
    private final java.lang.StringBuilder address;
    private final java.lang.StringBuilder contentType;
    private final java.lang.StringBuilder encoding;
    private final java.lang.StringBuilder httpMethod;
    private final java.lang.StringBuilder header;
    private final java.lang.StringBuilder message;
    private final java.lang.StringBuilder payload;
    private final java.lang.StringBuilder responseCode;
    private final java.lang.String id;

    public void <init>(java.lang.String, java.lang.String)
    {
        org.apache.cxf.interceptor.LoggingMessage r0;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10;
        java.lang.String r1, r2;

        r0 := @this: org.apache.cxf.interceptor.LoggingMessage;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.cxf.interceptor.LoggingMessage: java.lang.String heading> = r1;

        r0.<org.apache.cxf.interceptor.LoggingMessage: java.lang.String id> = r2;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        r0.<org.apache.cxf.interceptor.LoggingMessage: java.lang.StringBuilder contentType> = $r3;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        r0.<org.apache.cxf.interceptor.LoggingMessage: java.lang.StringBuilder address> = $r4;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        r0.<org.apache.cxf.interceptor.LoggingMessage: java.lang.StringBuilder encoding> = $r5;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        r0.<org.apache.cxf.interceptor.LoggingMessage: java.lang.StringBuilder httpMethod> = $r6;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        r0.<org.apache.cxf.interceptor.LoggingMessage: java.lang.StringBuilder header> = $r7;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        r0.<org.apache.cxf.interceptor.LoggingMessage: java.lang.StringBuilder message> = $r8;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        r0.<org.apache.cxf.interceptor.LoggingMessage: java.lang.StringBuilder payload> = $r9;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        r0.<org.apache.cxf.interceptor.LoggingMessage: java.lang.StringBuilder responseCode> = $r10;

        return;
    }

    public static java.lang.String nextId()
    {
        int $i0;
        java.lang.String $r1;
        java.util.concurrent.atomic.AtomicInteger $r0;

        $r0 = <org.apache.cxf.interceptor.LoggingMessage: java.util.concurrent.atomic.AtomicInteger ID>;

        $i0 = virtualinvoke $r0.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>();

        $r1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i0);

        return $r1;
    }

    public java.lang.StringBuilder getAddress()
    {
        java.lang.StringBuilder $r1;
        org.apache.cxf.interceptor.LoggingMessage r0;

        r0 := @this: org.apache.cxf.interceptor.LoggingMessage;

        $r1 = r0.<org.apache.cxf.interceptor.LoggingMessage: java.lang.StringBuilder address>;

        return $r1;
    }

    public java.lang.StringBuilder getEncoding()
    {
        java.lang.StringBuilder $r1;
        org.apache.cxf.interceptor.LoggingMessage r0;

        r0 := @this: org.apache.cxf.interceptor.LoggingMessage;

        $r1 = r0.<org.apache.cxf.interceptor.LoggingMessage: java.lang.StringBuilder encoding>;

        return $r1;
    }

    public java.lang.StringBuilder getHeader()
    {
        java.lang.StringBuilder $r1;
        org.apache.cxf.interceptor.LoggingMessage r0;

        r0 := @this: org.apache.cxf.interceptor.LoggingMessage;

        $r1 = r0.<org.apache.cxf.interceptor.LoggingMessage: java.lang.StringBuilder header>;

        return $r1;
    }

    public java.lang.StringBuilder getHttpMethod()
    {
        java.lang.StringBuilder $r1;
        org.apache.cxf.interceptor.LoggingMessage r0;

        r0 := @this: org.apache.cxf.interceptor.LoggingMessage;

        $r1 = r0.<org.apache.cxf.interceptor.LoggingMessage: java.lang.StringBuilder httpMethod>;

        return $r1;
    }

    public java.lang.StringBuilder getContentType()
    {
        java.lang.StringBuilder $r1;
        org.apache.cxf.interceptor.LoggingMessage r0;

        r0 := @this: org.apache.cxf.interceptor.LoggingMessage;

        $r1 = r0.<org.apache.cxf.interceptor.LoggingMessage: java.lang.StringBuilder contentType>;

        return $r1;
    }

    public java.lang.StringBuilder getMessage()
    {
        java.lang.StringBuilder $r1;
        org.apache.cxf.interceptor.LoggingMessage r0;

        r0 := @this: org.apache.cxf.interceptor.LoggingMessage;

        $r1 = r0.<org.apache.cxf.interceptor.LoggingMessage: java.lang.StringBuilder message>;

        return $r1;
    }

    public java.lang.StringBuilder getPayload()
    {
        java.lang.StringBuilder $r1;
        org.apache.cxf.interceptor.LoggingMessage r0;

        r0 := @this: org.apache.cxf.interceptor.LoggingMessage;

        $r1 = r0.<org.apache.cxf.interceptor.LoggingMessage: java.lang.StringBuilder payload>;

        return $r1;
    }

    public java.lang.StringBuilder getResponseCode()
    {
        java.lang.StringBuilder $r1;
        org.apache.cxf.interceptor.LoggingMessage r0;

        r0 := @this: org.apache.cxf.interceptor.LoggingMessage;

        $r1 = r0.<org.apache.cxf.interceptor.LoggingMessage: java.lang.StringBuilder responseCode>;

        return $r1;
    }

    public java.lang.String toString()
    {
        org.apache.cxf.interceptor.LoggingMessage r1;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.String $r2, $r4, $r13;
        java.lang.StringBuilder $r0, $r3, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r14, $r15, $r16, $r17, $r18, $r19;

        r1 := @this: org.apache.cxf.interceptor.LoggingMessage;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = r1.<org.apache.cxf.interceptor.LoggingMessage: java.lang.String heading>;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\nID: ");

        $r4 = r1.<org.apache.cxf.interceptor.LoggingMessage: java.lang.String id>;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r5 = r1.<org.apache.cxf.interceptor.LoggingMessage: java.lang.StringBuilder address>;

        $i0 = virtualinvoke $r5.<java.lang.StringBuilder: int length()>();

        if $i0 <= 0 goto label1;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\nAddress: ");

        $r19 = r1.<org.apache.cxf.interceptor.LoggingMessage: java.lang.StringBuilder address>;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>($r19);

     label1:
        $r6 = r1.<org.apache.cxf.interceptor.LoggingMessage: java.lang.StringBuilder responseCode>;

        $i1 = virtualinvoke $r6.<java.lang.StringBuilder: int length()>();

        if $i1 <= 0 goto label2;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\nResponse-Code: ");

        $r18 = r1.<org.apache.cxf.interceptor.LoggingMessage: java.lang.StringBuilder responseCode>;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>($r18);

     label2:
        $r7 = r1.<org.apache.cxf.interceptor.LoggingMessage: java.lang.StringBuilder encoding>;

        $i2 = virtualinvoke $r7.<java.lang.StringBuilder: int length()>();

        if $i2 <= 0 goto label3;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\nEncoding: ");

        $r17 = r1.<org.apache.cxf.interceptor.LoggingMessage: java.lang.StringBuilder encoding>;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>($r17);

     label3:
        $r8 = r1.<org.apache.cxf.interceptor.LoggingMessage: java.lang.StringBuilder httpMethod>;

        $i3 = virtualinvoke $r8.<java.lang.StringBuilder: int length()>();

        if $i3 <= 0 goto label4;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\nHttp-Method: ");

        $r16 = r1.<org.apache.cxf.interceptor.LoggingMessage: java.lang.StringBuilder httpMethod>;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>($r16);

     label4:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\nContent-Type: ");

        $r9 = r1.<org.apache.cxf.interceptor.LoggingMessage: java.lang.StringBuilder contentType>;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>($r9);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\nHeaders: ");

        $r10 = r1.<org.apache.cxf.interceptor.LoggingMessage: java.lang.StringBuilder header>;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>($r10);

        $r11 = r1.<org.apache.cxf.interceptor.LoggingMessage: java.lang.StringBuilder message>;

        $i4 = virtualinvoke $r11.<java.lang.StringBuilder: int length()>();

        if $i4 <= 0 goto label5;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\nMessages: ");

        $r15 = r1.<org.apache.cxf.interceptor.LoggingMessage: java.lang.StringBuilder message>;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>($r15);

     label5:
        $r12 = r1.<org.apache.cxf.interceptor.LoggingMessage: java.lang.StringBuilder payload>;

        $i5 = virtualinvoke $r12.<java.lang.StringBuilder: int length()>();

        if $i5 <= 0 goto label6;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\nPayload: ");

        $r14 = r1.<org.apache.cxf.interceptor.LoggingMessage: java.lang.StringBuilder payload>;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>($r14);

     label6:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n--------------------------------------");

        $r13 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r13;
    }

    static void <clinit>()
    {
        java.util.concurrent.atomic.AtomicInteger $r6;
        java.lang.StringBuilder $r0, $r3, $r4;
        java.lang.Class $r1;
        java.lang.String $r2, $r5;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = class "Lorg/apache/cxf/interceptor/LoggingMessage;";

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".ID");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        <org.apache.cxf.interceptor.LoggingMessage: java.lang.String ID_KEY> = $r5;

        $r6 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke $r6.<java.util.concurrent.atomic.AtomicInteger: void <init>()>();

        <org.apache.cxf.interceptor.LoggingMessage: java.util.concurrent.atomic.AtomicInteger ID> = $r6;

        return;
    }
}
