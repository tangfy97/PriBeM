public class com.hp.hpl.jena.sparql.util.graph.GraphContainerUtils extends java.lang.Object
{
    private static final com.hp.hpl.jena.graph.Node RDFtype;
    private static final com.hp.hpl.jena.graph.Node BAG;
    private static final com.hp.hpl.jena.graph.Node ALT;
    private static final com.hp.hpl.jena.graph.Node SEQ;
    private static final java.lang.String membershipPattern;
    private static final int NOT_FOUND;
    static java.util.regex.Pattern pattern;
    static com.hp.hpl.jena.sparql.util.graph.GraphContainerUtils$ContainerOrder order;

    public void <init>()
    {
        com.hp.hpl.jena.sparql.util.graph.GraphContainerUtils r0;

        r0 := @this: com.hp.hpl.jena.sparql.util.graph.GraphContainerUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.util.Collection containerMembers(com.hp.hpl.jena.graph.Graph, com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.graph.Node r1;
        com.hp.hpl.jena.graph.Graph r0;
        java.util.Collection $r2;

        r0 := @parameter0: com.hp.hpl.jena.graph.Graph;

        r1 := @parameter1: com.hp.hpl.jena.graph.Node;

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.util.graph.GraphContainerUtils: java.util.Collection containerMembers(com.hp.hpl.jena.graph.Graph,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r0, r1, null);

        return $r2;
    }

    public static java.util.Collection containerMembers(com.hp.hpl.jena.graph.Graph, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node)
    {
        java.lang.Throwable $r13;
        com.hp.hpl.jena.graph.Node r1, r2, $r3, $r4, $r12;
        java.lang.Integer $r15;
        int $i0, $i2;
        com.hp.hpl.jena.sparql.util.graph.GraphContainerUtils$ContainerOrder $r7;
        com.hp.hpl.jena.graph.Graph r0;
        boolean $z0, $z1;
        java.util.Collection $r8;
        com.hp.hpl.jena.graph.Triple r10;
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r5;
        java.util.TreeMap $r14;
        java.lang.Object $r9;

        r0 := @parameter0: com.hp.hpl.jena.graph.Graph;

        r1 := @parameter1: com.hp.hpl.jena.graph.Node;

        r2 := @parameter2: com.hp.hpl.jena.graph.Node;

        $z0 = staticinvoke <com.hp.hpl.jena.sparql.util.graph.GraphContainerUtils: boolean isContainer(com.hp.hpl.jena.graph.Graph,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r0, r1, r2);

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r4 = <com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.Node ANY>;

        $r3 = <com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.Node ANY>;

        $r5 = interfaceinvoke r0.<com.hp.hpl.jena.graph.Graph: com.hp.hpl.jena.util.iterator.ExtendedIterator find(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r1, $r4, $r3);

        $r14 = new java.util.TreeMap;

        $r7 = <com.hp.hpl.jena.sparql.util.graph.GraphContainerUtils: com.hp.hpl.jena.sparql.util.graph.GraphContainerUtils$ContainerOrder order>;

        specialinvoke $r14.<java.util.TreeMap: void <init>(java.util.Comparator)>($r7);

     label2:
        $z1 = interfaceinvoke $r5.<com.hp.hpl.jena.util.iterator.ExtendedIterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r9 = interfaceinvoke $r5.<com.hp.hpl.jena.util.iterator.ExtendedIterator: java.lang.Object next()>();

        r10 = (com.hp.hpl.jena.graph.Triple) $r9;

        $i0 = staticinvoke <com.hp.hpl.jena.sparql.util.graph.GraphContainerUtils: int getIndex(com.hp.hpl.jena.graph.Triple)>(r10);

        $i2 = (int) -9999;

        if $i0 != $i2 goto label3;

        goto label2;

     label3:
        $r15 = new java.lang.Integer;

        specialinvoke $r15.<java.lang.Integer: void <init>(int)>($i0);

        $r12 = virtualinvoke r10.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getObject()>();

        interfaceinvoke $r14.<java.util.SortedMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r15, $r12);

        goto label2;

     label4:
        interfaceinvoke $r5.<com.hp.hpl.jena.util.iterator.ExtendedIterator: void close()>();

        goto label7;

     label5:
        $r13 := @caughtexception;

     label6:
        interfaceinvoke $r5.<com.hp.hpl.jena.util.iterator.ExtendedIterator: void close()>();

        throw $r13;

     label7:
        $r8 = interfaceinvoke $r14.<java.util.SortedMap: java.util.Collection values()>();

        return $r8;

        catch java.lang.Throwable from label2 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public static boolean isContainerMember(com.hp.hpl.jena.graph.Graph, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node)
    {
        int $i0;
        com.hp.hpl.jena.graph.Node r1, r2, r3;
        com.hp.hpl.jena.graph.Graph r0;
        boolean $z0;

        r0 := @parameter0: com.hp.hpl.jena.graph.Graph;

        r1 := @parameter1: com.hp.hpl.jena.graph.Node;

        r2 := @parameter2: com.hp.hpl.jena.graph.Node;

        r3 := @parameter3: com.hp.hpl.jena.graph.Node;

        $i0 = staticinvoke <com.hp.hpl.jena.sparql.util.graph.GraphContainerUtils: int countContainerMember(com.hp.hpl.jena.graph.Graph,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,boolean)>(r0, r1, r2, r3, 1);

        if $i0 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static int countContainerMember(com.hp.hpl.jena.graph.Graph, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node)
    {
        int $i0;
        com.hp.hpl.jena.graph.Node r1, r2, r3;
        com.hp.hpl.jena.graph.Graph r0;

        r0 := @parameter0: com.hp.hpl.jena.graph.Graph;

        r1 := @parameter1: com.hp.hpl.jena.graph.Node;

        r2 := @parameter2: com.hp.hpl.jena.graph.Node;

        r3 := @parameter3: com.hp.hpl.jena.graph.Node;

        $i0 = staticinvoke <com.hp.hpl.jena.sparql.util.graph.GraphContainerUtils: int countContainerMember(com.hp.hpl.jena.graph.Graph,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,boolean)>(r0, r1, r2, r3, 0);

        return $i0;
    }

    private static int countContainerMember(com.hp.hpl.jena.graph.Graph, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, boolean)
    {
        java.lang.Throwable $r11;
        com.hp.hpl.jena.graph.Node r1, r2, r3, $r4, $r8;
        int i0;
        java.lang.String $r9, $r10;
        com.hp.hpl.jena.graph.Graph r0;
        boolean $z0, $z1, $z2, z3;
        com.hp.hpl.jena.graph.Triple r7;
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r5;
        java.lang.Object $r6;

        r0 := @parameter0: com.hp.hpl.jena.graph.Graph;

        r1 := @parameter1: com.hp.hpl.jena.graph.Node;

        r3 := @parameter2: com.hp.hpl.jena.graph.Node;

        r2 := @parameter3: com.hp.hpl.jena.graph.Node;

        z3 := @parameter4: boolean;

        if r0 != null goto label01;

        staticinvoke <org.apache.jena.atlas.logging.Log: void warn(java.lang.Class,java.lang.String)>(class "Lcom/hp/hpl/jena/sparql/util/graph/GraphContainerUtils;", "containerMember called with null graph");

        return 0;

     label01:
        if r1 != null goto label02;

        staticinvoke <org.apache.jena.atlas.logging.Log: void warn(java.lang.Class,java.lang.String)>(class "Lcom/hp/hpl/jena/sparql/util/graph/GraphContainerUtils;", "containerMember called with null list");

        return 0;

     label02:
        if r2 != null goto label03;

        staticinvoke <org.apache.jena.atlas.logging.Log: void warn(java.lang.Class,java.lang.String)>(class "Lcom/hp/hpl/jena/sparql/util/graph/GraphContainerUtils;", "containerMember called with null member");

        return 0;

     label03:
        $z0 = staticinvoke <com.hp.hpl.jena.sparql.util.graph.GraphContainerUtils: boolean isContainer(com.hp.hpl.jena.graph.Graph,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r0, r1, r3);

        if $z0 != 0 goto label04;

        return 0;

     label04:
        i0 = 0;

        $r4 = <com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.Node ANY>;

        $r5 = interfaceinvoke r0.<com.hp.hpl.jena.graph.Graph: com.hp.hpl.jena.util.iterator.ExtendedIterator find(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r1, $r4, r2);

     label05:
        $z1 = interfaceinvoke $r5.<com.hp.hpl.jena.util.iterator.ExtendedIterator: boolean hasNext()>();

        if $z1 == 0 goto label08;

        $r6 = interfaceinvoke $r5.<com.hp.hpl.jena.util.iterator.ExtendedIterator: java.lang.Object next()>();

        r7 = (com.hp.hpl.jena.graph.Triple) $r6;

        $r8 = virtualinvoke r7.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getPredicate()>();

        $r9 = virtualinvoke $r8.<com.hp.hpl.jena.graph.Node: java.lang.String getURI()>();

        $r10 = <com.hp.hpl.jena.sparql.util.graph.GraphContainerUtils: java.lang.String membershipPattern>;

        $z2 = virtualinvoke $r9.<java.lang.String: boolean matches(java.lang.String)>($r10);

        if $z2 == 0 goto label07;

        i0 = i0 + 1;

        if z3 == 0 goto label07;

     label06:
        interfaceinvoke $r5.<com.hp.hpl.jena.util.iterator.ExtendedIterator: void close()>();

        return i0;

     label07:
        goto label05;

     label08:
        interfaceinvoke $r5.<com.hp.hpl.jena.util.iterator.ExtendedIterator: void close()>();

        goto label11;

     label09:
        $r11 := @caughtexception;

     label10:
        interfaceinvoke $r5.<com.hp.hpl.jena.util.iterator.ExtendedIterator: void close()>();

        throw $r11;

     label11:
        return i0;

        catch java.lang.Throwable from label05 to label06 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    public static boolean isContainer(com.hp.hpl.jena.graph.Graph, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.graph.Node r0, r2, $r3, $r4, $r5, $r6;
        com.hp.hpl.jena.graph.Graph r1;
        boolean $z0, $z1, $z2, $z3, $z4;

        r1 := @parameter0: com.hp.hpl.jena.graph.Graph;

        r2 := @parameter1: com.hp.hpl.jena.graph.Node;

        r0 := @parameter2: com.hp.hpl.jena.graph.Node;

        if r0 != null goto label4;

        $r4 = <com.hp.hpl.jena.sparql.util.graph.GraphContainerUtils: com.hp.hpl.jena.graph.Node BAG>;

        $z1 = staticinvoke <com.hp.hpl.jena.sparql.util.graph.GraphContainerUtils: boolean isContainer(com.hp.hpl.jena.graph.Graph,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r1, r2, $r4);

        if $z1 != 0 goto label1;

        $r5 = <com.hp.hpl.jena.sparql.util.graph.GraphContainerUtils: com.hp.hpl.jena.graph.Node ALT>;

        $z2 = staticinvoke <com.hp.hpl.jena.sparql.util.graph.GraphContainerUtils: boolean isContainer(com.hp.hpl.jena.graph.Graph,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r1, r2, $r5);

        if $z2 != 0 goto label1;

        $r6 = <com.hp.hpl.jena.sparql.util.graph.GraphContainerUtils: com.hp.hpl.jena.graph.Node SEQ>;

        $z3 = staticinvoke <com.hp.hpl.jena.sparql.util.graph.GraphContainerUtils: boolean isContainer(com.hp.hpl.jena.graph.Graph,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r1, r2, $r6);

        if $z3 == 0 goto label2;

     label1:
        $z4 = 1;

        goto label3;

     label2:
        $z4 = 0;

     label3:
        return $z4;

     label4:
        $r3 = <com.hp.hpl.jena.sparql.util.graph.GraphContainerUtils: com.hp.hpl.jena.graph.Node RDFtype>;

        $z0 = interfaceinvoke r1.<com.hp.hpl.jena.graph.Graph: boolean contains(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r2, $r3, r0);

        return $z0;
    }

    private static int getIndex(com.hp.hpl.jena.graph.Triple)
    {
        com.hp.hpl.jena.graph.Node $r1;
        com.hp.hpl.jena.graph.Triple r0;
        java.util.regex.Matcher $r4;
        int $i0, $i2;
        java.lang.String $r2, $r5;
        java.util.regex.Pattern $r3;
        boolean $z0;

        r0 := @parameter0: com.hp.hpl.jena.graph.Triple;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getPredicate()>();

        $r2 = virtualinvoke $r1.<com.hp.hpl.jena.graph.Node: java.lang.String getURI()>();

        $r3 = <com.hp.hpl.jena.sparql.util.graph.GraphContainerUtils: java.util.regex.Pattern pattern>;

        $r4 = virtualinvoke $r3.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r2);

        $z0 = virtualinvoke $r4.<java.util.regex.Matcher: boolean find()>();

        if $z0 != 0 goto label1;

        $i2 = (int) -9999;

        return $i2;

     label1:
        $r5 = virtualinvoke $r4.<java.util.regex.Matcher: java.lang.String group(int)>(1);

        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r5);

        return $i0;
    }

    static void <clinit>()
    {
        com.hp.hpl.jena.graph.Node $r1, $r3, $r5, $r7;
        com.hp.hpl.jena.rdf.model.Property $r0;
        com.hp.hpl.jena.sparql.util.graph.GraphContainerUtils$ContainerOrder $r15;
        java.lang.String $r9, $r12, $r13;
        com.hp.hpl.jena.rdf.model.Resource $r2, $r4, $r6;
        java.lang.StringBuilder $r8, $r10, $r11;
        java.util.regex.Pattern $r14;

        <com.hp.hpl.jena.sparql.util.graph.GraphContainerUtils: int NOT_FOUND> = -9999;

        $r0 = <com.hp.hpl.jena.vocabulary.RDF: com.hp.hpl.jena.rdf.model.Property type>;

        $r1 = interfaceinvoke $r0.<com.hp.hpl.jena.rdf.model.Property: com.hp.hpl.jena.graph.Node asNode()>();

        <com.hp.hpl.jena.sparql.util.graph.GraphContainerUtils: com.hp.hpl.jena.graph.Node RDFtype> = $r1;

        $r2 = <com.hp.hpl.jena.vocabulary.RDF: com.hp.hpl.jena.rdf.model.Resource Bag>;

        $r3 = interfaceinvoke $r2.<com.hp.hpl.jena.rdf.model.Resource: com.hp.hpl.jena.graph.Node asNode()>();

        <com.hp.hpl.jena.sparql.util.graph.GraphContainerUtils: com.hp.hpl.jena.graph.Node BAG> = $r3;

        $r4 = <com.hp.hpl.jena.vocabulary.RDF: com.hp.hpl.jena.rdf.model.Resource Alt>;

        $r5 = interfaceinvoke $r4.<com.hp.hpl.jena.rdf.model.Resource: com.hp.hpl.jena.graph.Node asNode()>();

        <com.hp.hpl.jena.sparql.util.graph.GraphContainerUtils: com.hp.hpl.jena.graph.Node ALT> = $r5;

        $r6 = <com.hp.hpl.jena.vocabulary.RDF: com.hp.hpl.jena.rdf.model.Resource Seq>;

        $r7 = interfaceinvoke $r6.<com.hp.hpl.jena.rdf.model.Resource: com.hp.hpl.jena.graph.Node asNode()>();

        <com.hp.hpl.jena.sparql.util.graph.GraphContainerUtils: com.hp.hpl.jena.graph.Node SEQ> = $r7;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = staticinvoke <com.hp.hpl.jena.vocabulary.RDF: java.lang.String getURI()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_(\\d+)");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        <com.hp.hpl.jena.sparql.util.graph.GraphContainerUtils: java.lang.String membershipPattern> = $r12;

        $r13 = <com.hp.hpl.jena.sparql.util.graph.GraphContainerUtils: java.lang.String membershipPattern>;

        $r14 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>($r13);

        <com.hp.hpl.jena.sparql.util.graph.GraphContainerUtils: java.util.regex.Pattern pattern> = $r14;

        $r15 = new com.hp.hpl.jena.sparql.util.graph.GraphContainerUtils$ContainerOrder;

        specialinvoke $r15.<com.hp.hpl.jena.sparql.util.graph.GraphContainerUtils$ContainerOrder: void <init>(com.hp.hpl.jena.sparql.util.graph.GraphContainerUtils$1)>(null);

        <com.hp.hpl.jena.sparql.util.graph.GraphContainerUtils: com.hp.hpl.jena.sparql.util.graph.GraphContainerUtils$ContainerOrder order> = $r15;

        return;
    }
}
