public class org.aspectj.internal.lang.reflect.DeclareSoftImpl extends java.lang.Object implements org.aspectj.lang.reflect.DeclareSoft
{
    private org.aspectj.lang.reflect.AjType declaringType;
    private org.aspectj.lang.reflect.PointcutExpression pointcut;
    private org.aspectj.lang.reflect.AjType exceptionType;
    private java.lang.String missingTypeName;

    public void <init>(org.aspectj.lang.reflect.AjType, java.lang.String, java.lang.String)
    {
        org.aspectj.lang.reflect.AjType r1, $r8;
        org.aspectj.internal.lang.reflect.PointcutExpressionImpl $r2;
        java.lang.Class $r4, $r7;
        java.lang.ClassNotFoundException $r9;
        java.lang.String r3, r6;
        java.lang.ClassLoader $r5;
        org.aspectj.internal.lang.reflect.DeclareSoftImpl r0;

        r0 := @this: org.aspectj.internal.lang.reflect.DeclareSoftImpl;

        r1 := @parameter0: org.aspectj.lang.reflect.AjType;

        r3 := @parameter1: java.lang.String;

        r6 := @parameter2: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.aspectj.internal.lang.reflect.DeclareSoftImpl: org.aspectj.lang.reflect.AjType declaringType> = r1;

        $r2 = new org.aspectj.internal.lang.reflect.PointcutExpressionImpl;

        specialinvoke $r2.<org.aspectj.internal.lang.reflect.PointcutExpressionImpl: void <init>(java.lang.String)>(r3);

        r0.<org.aspectj.internal.lang.reflect.DeclareSoftImpl: org.aspectj.lang.reflect.PointcutExpression pointcut> = $r2;

     label1:
        $r4 = interfaceinvoke r1.<org.aspectj.lang.reflect.AjType: java.lang.Class getJavaClass()>();

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r7 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>(r6, 0, $r5);

        $r8 = staticinvoke <org.aspectj.lang.reflect.AjTypeSystem: org.aspectj.lang.reflect.AjType getAjType(java.lang.Class)>($r7);

        r0.<org.aspectj.internal.lang.reflect.DeclareSoftImpl: org.aspectj.lang.reflect.AjType exceptionType> = $r8;

     label2:
        goto label4;

     label3:
        $r9 := @caughtexception;

        r0.<org.aspectj.internal.lang.reflect.DeclareSoftImpl: java.lang.String missingTypeName> = r6;

     label4:
        return;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    public org.aspectj.lang.reflect.AjType getDeclaringType()
    {
        org.aspectj.internal.lang.reflect.DeclareSoftImpl r0;
        org.aspectj.lang.reflect.AjType $r1;

        r0 := @this: org.aspectj.internal.lang.reflect.DeclareSoftImpl;

        $r1 = r0.<org.aspectj.internal.lang.reflect.DeclareSoftImpl: org.aspectj.lang.reflect.AjType declaringType>;

        return $r1;
    }

    public org.aspectj.lang.reflect.AjType getSoftenedExceptionType() throws java.lang.ClassNotFoundException
    {
        org.aspectj.lang.reflect.AjType $r2;
        java.lang.ClassNotFoundException $r3;
        java.lang.String $r1, $r4;
        org.aspectj.internal.lang.reflect.DeclareSoftImpl r0;

        r0 := @this: org.aspectj.internal.lang.reflect.DeclareSoftImpl;

        $r1 = r0.<org.aspectj.internal.lang.reflect.DeclareSoftImpl: java.lang.String missingTypeName>;

        if $r1 == null goto label1;

        $r3 = new java.lang.ClassNotFoundException;

        $r4 = r0.<org.aspectj.internal.lang.reflect.DeclareSoftImpl: java.lang.String missingTypeName>;

        specialinvoke $r3.<java.lang.ClassNotFoundException: void <init>(java.lang.String)>($r4);

        throw $r3;

     label1:
        $r2 = r0.<org.aspectj.internal.lang.reflect.DeclareSoftImpl: org.aspectj.lang.reflect.AjType exceptionType>;

        return $r2;
    }

    public org.aspectj.lang.reflect.PointcutExpression getPointcutExpression()
    {
        org.aspectj.internal.lang.reflect.DeclareSoftImpl r0;
        org.aspectj.lang.reflect.PointcutExpression $r1;

        r0 := @this: org.aspectj.internal.lang.reflect.DeclareSoftImpl;

        $r1 = r0.<org.aspectj.internal.lang.reflect.DeclareSoftImpl: org.aspectj.lang.reflect.PointcutExpression pointcut>;

        return $r1;
    }

    public java.lang.String toString()
    {
        org.aspectj.lang.reflect.AjType $r7;
        org.aspectj.lang.reflect.PointcutExpression $r4;
        java.lang.StringBuffer $r0;
        java.lang.String $r2, $r3, $r5, $r6, $r8;
        org.aspectj.internal.lang.reflect.DeclareSoftImpl r1;

        r1 := @this: org.aspectj.internal.lang.reflect.DeclareSoftImpl;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("declare soft : ");

        $r2 = r1.<org.aspectj.internal.lang.reflect.DeclareSoftImpl: java.lang.String missingTypeName>;

        if $r2 == null goto label1;

        $r7 = r1.<org.aspectj.internal.lang.reflect.DeclareSoftImpl: org.aspectj.lang.reflect.AjType exceptionType>;

        $r8 = interfaceinvoke $r7.<org.aspectj.lang.reflect.AjType: java.lang.String getName()>();

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);

        goto label2;

     label1:
        $r3 = r1.<org.aspectj.internal.lang.reflect.DeclareSoftImpl: java.lang.String missingTypeName>;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

     label2:
        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" : ");

        $r4 = virtualinvoke r1.<org.aspectj.internal.lang.reflect.DeclareSoftImpl: org.aspectj.lang.reflect.PointcutExpression getPointcutExpression()>();

        $r5 = interfaceinvoke $r4.<org.aspectj.lang.reflect.PointcutExpression: java.lang.String asString()>();

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r6 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r6;
    }
}
