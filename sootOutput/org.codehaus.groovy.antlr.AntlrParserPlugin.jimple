public class org.codehaus.groovy.antlr.AntlrParserPlugin extends org.codehaus.groovy.syntax.ASTHelper implements org.codehaus.groovy.control.ParserPlugin, org.codehaus.groovy.antlr.parser.GroovyTokenTypes
{
    protected groovyjarjarantlr.collections.AST ast;
    private org.codehaus.groovy.ast.ClassNode classNode;
    private java.lang.String[] tokenNames;
    static java.lang.Class class$org$codehaus$groovy$ast$expr$PropertyExpression;

    public void <init>()
    {
        org.codehaus.groovy.antlr.AntlrParserPlugin r0;

        r0 := @this: org.codehaus.groovy.antlr.AntlrParserPlugin;

        specialinvoke r0.<org.codehaus.groovy.syntax.ASTHelper: void <init>()>();

        return;
    }

    public org.codehaus.groovy.syntax.Reduction parseCST(org.codehaus.groovy.control.SourceUnit, java.io.Reader) throws org.codehaus.groovy.control.CompilationFailedException
    {
        org.codehaus.groovy.antlr.SourceBuffer $r0;
        org.codehaus.groovy.antlr.AntlrParserPlugin r1;
        org.codehaus.groovy.syntax.Reduction $r4;
        org.codehaus.groovy.control.SourceUnit r2;
        java.io.Reader r3;

        r1 := @this: org.codehaus.groovy.antlr.AntlrParserPlugin;

        r2 := @parameter0: org.codehaus.groovy.control.SourceUnit;

        r3 := @parameter1: java.io.Reader;

        $r0 = new org.codehaus.groovy.antlr.SourceBuffer;

        specialinvoke $r0.<org.codehaus.groovy.antlr.SourceBuffer: void <init>()>();

        virtualinvoke r1.<org.codehaus.groovy.antlr.AntlrParserPlugin: void transformCSTIntoAST(org.codehaus.groovy.control.SourceUnit,java.io.Reader,org.codehaus.groovy.antlr.SourceBuffer)>(r2, r3, $r0);

        virtualinvoke r1.<org.codehaus.groovy.antlr.AntlrParserPlugin: void processAST()>();

        $r4 = virtualinvoke r1.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.syntax.Reduction outputAST(org.codehaus.groovy.control.SourceUnit,org.codehaus.groovy.antlr.SourceBuffer)>(r2, $r0);

        return $r4;
    }

    protected void transformCSTIntoAST(org.codehaus.groovy.control.SourceUnit, java.io.Reader, org.codehaus.groovy.antlr.SourceBuffer) throws org.codehaus.groovy.control.CompilationFailedException
    {
        org.codehaus.groovy.antlr.parser.GroovyRecognizer $r6;
        groovyjarjarantlr.TokenStreamRecognitionException $r13;
        java.lang.String[] $r7;
        int $i0, $i1, $i2, $i3;
        java.lang.String $r8, $r12, $r15;
        org.codehaus.groovy.antlr.UnicodeEscapingReader $r2;
        org.codehaus.groovy.antlr.AntlrParserPlugin r0;
        org.codehaus.groovy.control.SourceUnit r1;
        org.codehaus.groovy.antlr.parser.GroovyLexer $r5;
        java.io.Reader r3;
        org.codehaus.groovy.antlr.SourceBuffer r4;
        groovyjarjarantlr.TokenStreamException $r9;
        groovyjarjarantlr.collections.AST $r17;
        groovyjarjarantlr.RecognitionException $r10, r16;
        org.codehaus.groovy.syntax.SyntaxException $r11, $r14;

        r0 := @this: org.codehaus.groovy.antlr.AntlrParserPlugin;

        r1 := @parameter0: org.codehaus.groovy.control.SourceUnit;

        r3 := @parameter1: java.io.Reader;

        r4 := @parameter2: org.codehaus.groovy.antlr.SourceBuffer;

        r0.<org.codehaus.groovy.antlr.AntlrParserPlugin: groovyjarjarantlr.collections.AST ast> = null;

        virtualinvoke r0.<org.codehaus.groovy.antlr.AntlrParserPlugin: void setController(org.codehaus.groovy.control.SourceUnit)>(r1);

        $r2 = new org.codehaus.groovy.antlr.UnicodeEscapingReader;

        specialinvoke $r2.<org.codehaus.groovy.antlr.UnicodeEscapingReader: void <init>(java.io.Reader,org.codehaus.groovy.antlr.SourceBuffer)>(r3, r4);

        $r5 = new org.codehaus.groovy.antlr.parser.GroovyLexer;

        specialinvoke $r5.<org.codehaus.groovy.antlr.parser.GroovyLexer: void <init>(java.io.Reader)>($r2);

        virtualinvoke $r2.<org.codehaus.groovy.antlr.UnicodeEscapingReader: void setLexer(groovyjarjarantlr.CharScanner)>($r5);

        $r6 = staticinvoke <org.codehaus.groovy.antlr.parser.GroovyRecognizer: org.codehaus.groovy.antlr.parser.GroovyRecognizer make(org.codehaus.groovy.antlr.parser.GroovyLexer)>($r5);

        virtualinvoke $r6.<org.codehaus.groovy.antlr.parser.GroovyRecognizer: void setSourceBuffer(org.codehaus.groovy.antlr.SourceBuffer)>(r4);

        $r7 = virtualinvoke $r6.<org.codehaus.groovy.antlr.parser.GroovyRecognizer: java.lang.String[] getTokenNames()>();

        r0.<org.codehaus.groovy.antlr.AntlrParserPlugin: java.lang.String[] tokenNames> = $r7;

        $r8 = virtualinvoke r1.<org.codehaus.groovy.control.SourceUnit: java.lang.String getName()>();

        virtualinvoke $r6.<org.codehaus.groovy.antlr.parser.GroovyRecognizer: void setFilename(java.lang.String)>($r8);

     label1:
        virtualinvoke $r6.<org.codehaus.groovy.antlr.parser.GroovyRecognizer: void compilationUnit()>();

     label2:
        goto label6;

     label3:
        $r13 := @caughtexception;

        r16 = $r13.<groovyjarjarantlr.TokenStreamRecognitionException: groovyjarjarantlr.RecognitionException recog>;

        $r14 = new org.codehaus.groovy.syntax.SyntaxException;

        $r15 = virtualinvoke r16.<groovyjarjarantlr.RecognitionException: java.lang.String getMessage()>();

        $i2 = virtualinvoke r16.<groovyjarjarantlr.RecognitionException: int getLine()>();

        $i3 = virtualinvoke r16.<groovyjarjarantlr.RecognitionException: int getColumn()>();

        specialinvoke $r14.<org.codehaus.groovy.syntax.SyntaxException: void <init>(java.lang.String,java.lang.Throwable,int,int)>($r15, r16, $i2, $i3);

        virtualinvoke $r14.<org.codehaus.groovy.syntax.SyntaxException: void setFatal(boolean)>(1);

        virtualinvoke r1.<org.codehaus.groovy.control.SourceUnit: void addError(org.codehaus.groovy.syntax.SyntaxException)>($r14);

        goto label6;

     label4:
        $r10 := @caughtexception;

        $r11 = new org.codehaus.groovy.syntax.SyntaxException;

        $r12 = virtualinvoke $r10.<groovyjarjarantlr.RecognitionException: java.lang.String getMessage()>();

        $i0 = virtualinvoke $r10.<groovyjarjarantlr.RecognitionException: int getLine()>();

        $i1 = virtualinvoke $r10.<groovyjarjarantlr.RecognitionException: int getColumn()>();

        specialinvoke $r11.<org.codehaus.groovy.syntax.SyntaxException: void <init>(java.lang.String,java.lang.Throwable,int,int)>($r12, $r10, $i0, $i1);

        virtualinvoke $r11.<org.codehaus.groovy.syntax.SyntaxException: void setFatal(boolean)>(1);

        virtualinvoke r1.<org.codehaus.groovy.control.SourceUnit: void addError(org.codehaus.groovy.syntax.SyntaxException)>($r11);

        goto label6;

     label5:
        $r9 := @caughtexception;

        virtualinvoke r1.<org.codehaus.groovy.control.SourceUnit: void addException(java.lang.Exception)>($r9);

     label6:
        $r17 = virtualinvoke $r6.<org.codehaus.groovy.antlr.parser.GroovyRecognizer: groovyjarjarantlr.collections.AST getAST()>();

        r0.<org.codehaus.groovy.antlr.AntlrParserPlugin: groovyjarjarantlr.collections.AST ast> = $r17;

        return;

        catch groovyjarjarantlr.TokenStreamRecognitionException from label1 to label2 with label3;
        catch groovyjarjarantlr.RecognitionException from label1 to label2 with label4;
        catch groovyjarjarantlr.TokenStreamException from label1 to label2 with label5;
    }

    protected void processAST()
    {
        org.codehaus.groovy.antlr.AntlrParserPlugin r1;
        groovyjarjarantlr.collections.AST $r2, $r3;
        org.codehaus.groovy.antlr.AntlrASTProcessSnippets $r0;

        r1 := @this: org.codehaus.groovy.antlr.AntlrParserPlugin;

        $r0 = new org.codehaus.groovy.antlr.AntlrASTProcessSnippets;

        specialinvoke $r0.<org.codehaus.groovy.antlr.AntlrASTProcessSnippets: void <init>()>();

        $r2 = r1.<org.codehaus.groovy.antlr.AntlrParserPlugin: groovyjarjarantlr.collections.AST ast>;

        $r3 = interfaceinvoke $r0.<org.codehaus.groovy.antlr.AntlrASTProcessor: groovyjarjarantlr.collections.AST process(groovyjarjarantlr.collections.AST)>($r2);

        r1.<org.codehaus.groovy.antlr.AntlrParserPlugin: groovyjarjarantlr.collections.AST ast> = $r3;

        return;
    }

    public org.codehaus.groovy.syntax.Reduction outputAST(org.codehaus.groovy.control.SourceUnit, org.codehaus.groovy.antlr.SourceBuffer)
    {
        org.codehaus.groovy.antlr.SourceBuffer r3;
        org.codehaus.groovy.antlr.AntlrParserPlugin r1;
        org.codehaus.groovy.control.SourceUnit r2;
        org.codehaus.groovy.antlr.AntlrParserPlugin$1 $r0;

        r1 := @this: org.codehaus.groovy.antlr.AntlrParserPlugin;

        r2 := @parameter0: org.codehaus.groovy.control.SourceUnit;

        r3 := @parameter1: org.codehaus.groovy.antlr.SourceBuffer;

        $r0 = new org.codehaus.groovy.antlr.AntlrParserPlugin$1;

        specialinvoke $r0.<org.codehaus.groovy.antlr.AntlrParserPlugin$1: void <init>(org.codehaus.groovy.antlr.AntlrParserPlugin,org.codehaus.groovy.control.SourceUnit,org.codehaus.groovy.antlr.SourceBuffer)>(r1, r2, r3);

        staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r0);

        return null;
    }

    private void outputASTInVariousFormsIfNeeded(org.codehaus.groovy.control.SourceUnit, org.codehaus.groovy.antlr.SourceBuffer)
    {
        org.codehaus.groovy.antlr.treewalker.PreOrderTraversal $r31, $r42;
        org.codehaus.groovy.antlr.AntlrParserPlugin r14;
        org.codehaus.groovy.antlr.SourceBuffer r29;
        groovyjarjarantlr.collections.AST $r20, $r32, $r43, $r54, $r56;
        org.codehaus.groovy.antlr.treewalker.SourcePrinter $r16, $r51;
        java.util.ArrayList $r12;
        java.lang.StringBuffer $r6, $r9, $r10, $r23, $r25, $r26, $r35, $r37, $r38, $r46, $r48, $r49, $r58, $r60, $r62, $r63, $r66, $r68, $r70, $r71, $r74, $r76, $r78, $r79, $r82, $r84, $r86, $r87;
        org.codehaus.groovy.antlr.treewalker.MindMapPrinter $r28, $r40;
        java.lang.String $r0, $r1, $r2, $r3, $r8, $r11, $r24, $r27, $r36, $r39, $r47, $r50, $r55, $r61, $r64, $r69, $r72, $r77, $r80, $r85, $r88, $r89, $r90, $r91, $r92, $r93, $r94;
        org.codehaus.groovy.control.SourceUnit r7;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor $r18;
        java.io.FileOutputStream $r5, $r22, $r34, $r45;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.io.FileNotFoundException $r57, $r65, $r73, $r81;
        org.codehaus.groovy.antlr.treewalker.SourceCodeTraversal $r19, $r53;
        org.codehaus.groovy.antlr.treewalker.NodeAsHTMLPrinter $r13;
        java.lang.String[] $r15, $r17, $r30, $r41, $r52;
        java.io.PrintStream $r4, $r21, $r33, $r44, $r59, $r67, $r75, $r83;

        r14 := @this: org.codehaus.groovy.antlr.AntlrParserPlugin;

        r7 := @parameter0: org.codehaus.groovy.control.SourceUnit;

        r29 := @parameter1: org.codehaus.groovy.antlr.SourceBuffer;

        $r0 = "xml";

        $r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("groovyjarjarantlr.ast");

        $z0 = virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label01;

        $r55 = virtualinvoke r7.<org.codehaus.groovy.control.SourceUnit: java.lang.String getName()>();

        $r56 = r14.<org.codehaus.groovy.antlr.AntlrParserPlugin: groovyjarjarantlr.collections.AST ast>;

        specialinvoke r14.<org.codehaus.groovy.antlr.AntlrParserPlugin: void saveAsXML(java.lang.String,groovyjarjarantlr.collections.AST)>($r55, $r56);

     label01:
        $r2 = "groovy";

        $r3 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("groovyjarjarantlr.ast");

        $z1 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z1 == 0 goto label05;

     label02:
        $r44 = new java.io.PrintStream;

        $r45 = new java.io.FileOutputStream;

        $r46 = new java.lang.StringBuffer;

        specialinvoke $r46.<java.lang.StringBuffer: void <init>()>();

        $r47 = virtualinvoke r7.<org.codehaus.groovy.control.SourceUnit: java.lang.String getName()>();

        $r48 = virtualinvoke $r46.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r47);

        $r49 = virtualinvoke $r48.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".pretty.groovy");

        $r50 = virtualinvoke $r49.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r45.<java.io.FileOutputStream: void <init>(java.lang.String)>($r50);

        specialinvoke $r44.<java.io.PrintStream: void <init>(java.io.OutputStream)>($r45);

        $r51 = new org.codehaus.groovy.antlr.treewalker.SourcePrinter;

        $r52 = r14.<org.codehaus.groovy.antlr.AntlrParserPlugin: java.lang.String[] tokenNames>;

        specialinvoke $r51.<org.codehaus.groovy.antlr.treewalker.SourcePrinter: void <init>(java.io.PrintStream,java.lang.String[])>($r44, $r52);

        $r53 = new org.codehaus.groovy.antlr.treewalker.SourceCodeTraversal;

        specialinvoke $r53.<org.codehaus.groovy.antlr.treewalker.SourceCodeTraversal: void <init>(org.codehaus.groovy.antlr.treewalker.Visitor)>($r51);

        $r54 = r14.<org.codehaus.groovy.antlr.AntlrParserPlugin: groovyjarjarantlr.collections.AST ast>;

        interfaceinvoke $r53.<org.codehaus.groovy.antlr.AntlrASTProcessor: groovyjarjarantlr.collections.AST process(groovyjarjarantlr.collections.AST)>($r54);

     label03:
        goto label05;

     label04:
        $r81 := @caughtexception;

        $r83 = <java.lang.System: java.io.PrintStream out>;

        $r82 = new java.lang.StringBuffer;

        specialinvoke $r82.<java.lang.StringBuffer: void <init>()>();

        $r84 = virtualinvoke $r82.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Cannot create ");

        $r85 = virtualinvoke r7.<org.codehaus.groovy.control.SourceUnit: java.lang.String getName()>();

        $r86 = virtualinvoke $r84.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r85);

        $r87 = virtualinvoke $r86.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".pretty.groovy");

        $r88 = virtualinvoke $r87.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r83.<java.io.PrintStream: void println(java.lang.String)>($r88);

     label05:
        $r89 = "mindmap";

        $r90 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("groovyjarjarantlr.ast");

        $z2 = virtualinvoke $r89.<java.lang.String: boolean equals(java.lang.Object)>($r90);

        if $z2 == 0 goto label09;

     label06:
        $r33 = new java.io.PrintStream;

        $r34 = new java.io.FileOutputStream;

        $r35 = new java.lang.StringBuffer;

        specialinvoke $r35.<java.lang.StringBuffer: void <init>()>();

        $r36 = virtualinvoke r7.<org.codehaus.groovy.control.SourceUnit: java.lang.String getName()>();

        $r37 = virtualinvoke $r35.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r36);

        $r38 = virtualinvoke $r37.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".mm");

        $r39 = virtualinvoke $r38.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r34.<java.io.FileOutputStream: void <init>(java.lang.String)>($r39);

        specialinvoke $r33.<java.io.PrintStream: void <init>(java.io.OutputStream)>($r34);

        $r40 = new org.codehaus.groovy.antlr.treewalker.MindMapPrinter;

        $r41 = r14.<org.codehaus.groovy.antlr.AntlrParserPlugin: java.lang.String[] tokenNames>;

        specialinvoke $r40.<org.codehaus.groovy.antlr.treewalker.MindMapPrinter: void <init>(java.io.PrintStream,java.lang.String[])>($r33, $r41);

        $r42 = new org.codehaus.groovy.antlr.treewalker.PreOrderTraversal;

        specialinvoke $r42.<org.codehaus.groovy.antlr.treewalker.PreOrderTraversal: void <init>(org.codehaus.groovy.antlr.treewalker.Visitor)>($r40);

        $r43 = r14.<org.codehaus.groovy.antlr.AntlrParserPlugin: groovyjarjarantlr.collections.AST ast>;

        interfaceinvoke $r42.<org.codehaus.groovy.antlr.AntlrASTProcessor: groovyjarjarantlr.collections.AST process(groovyjarjarantlr.collections.AST)>($r43);

     label07:
        goto label09;

     label08:
        $r73 := @caughtexception;

        $r75 = <java.lang.System: java.io.PrintStream out>;

        $r74 = new java.lang.StringBuffer;

        specialinvoke $r74.<java.lang.StringBuffer: void <init>()>();

        $r76 = virtualinvoke $r74.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Cannot create ");

        $r77 = virtualinvoke r7.<org.codehaus.groovy.control.SourceUnit: java.lang.String getName()>();

        $r78 = virtualinvoke $r76.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r77);

        $r79 = virtualinvoke $r78.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".mm");

        $r80 = virtualinvoke $r79.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r75.<java.io.PrintStream: void println(java.lang.String)>($r80);

     label09:
        $r91 = "extendedMindmap";

        $r92 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("groovyjarjarantlr.ast");

        $z3 = virtualinvoke $r91.<java.lang.String: boolean equals(java.lang.Object)>($r92);

        if $z3 == 0 goto label13;

     label10:
        $r21 = new java.io.PrintStream;

        $r22 = new java.io.FileOutputStream;

        $r23 = new java.lang.StringBuffer;

        specialinvoke $r23.<java.lang.StringBuffer: void <init>()>();

        $r24 = virtualinvoke r7.<org.codehaus.groovy.control.SourceUnit: java.lang.String getName()>();

        $r25 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r24);

        $r26 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".mm");

        $r27 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r22.<java.io.FileOutputStream: void <init>(java.lang.String)>($r27);

        specialinvoke $r21.<java.io.PrintStream: void <init>(java.io.OutputStream)>($r22);

        $r28 = new org.codehaus.groovy.antlr.treewalker.MindMapPrinter;

        $r30 = r14.<org.codehaus.groovy.antlr.AntlrParserPlugin: java.lang.String[] tokenNames>;

        specialinvoke $r28.<org.codehaus.groovy.antlr.treewalker.MindMapPrinter: void <init>(java.io.PrintStream,java.lang.String[],org.codehaus.groovy.antlr.SourceBuffer)>($r21, $r30, r29);

        $r31 = new org.codehaus.groovy.antlr.treewalker.PreOrderTraversal;

        specialinvoke $r31.<org.codehaus.groovy.antlr.treewalker.PreOrderTraversal: void <init>(org.codehaus.groovy.antlr.treewalker.Visitor)>($r28);

        $r32 = r14.<org.codehaus.groovy.antlr.AntlrParserPlugin: groovyjarjarantlr.collections.AST ast>;

        interfaceinvoke $r31.<org.codehaus.groovy.antlr.AntlrASTProcessor: groovyjarjarantlr.collections.AST process(groovyjarjarantlr.collections.AST)>($r32);

     label11:
        goto label13;

     label12:
        $r65 := @caughtexception;

        $r67 = <java.lang.System: java.io.PrintStream out>;

        $r66 = new java.lang.StringBuffer;

        specialinvoke $r66.<java.lang.StringBuffer: void <init>()>();

        $r68 = virtualinvoke $r66.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Cannot create ");

        $r69 = virtualinvoke r7.<org.codehaus.groovy.control.SourceUnit: java.lang.String getName()>();

        $r70 = virtualinvoke $r68.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r69);

        $r71 = virtualinvoke $r70.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".mm");

        $r72 = virtualinvoke $r71.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r67.<java.io.PrintStream: void println(java.lang.String)>($r72);

     label13:
        $r93 = "html";

        $r94 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("groovyjarjarantlr.ast");

        $z4 = virtualinvoke $r93.<java.lang.String: boolean equals(java.lang.Object)>($r94);

        if $z4 == 0 goto label17;

     label14:
        $r4 = new java.io.PrintStream;

        $r5 = new java.io.FileOutputStream;

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r8 = virtualinvoke r7.<org.codehaus.groovy.control.SourceUnit: java.lang.String getName()>();

        $r9 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".html");

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r5.<java.io.FileOutputStream: void <init>(java.lang.String)>($r11);

        specialinvoke $r4.<java.io.PrintStream: void <init>(java.io.OutputStream)>($r5);

        $r12 = new java.util.ArrayList;

        specialinvoke $r12.<java.util.ArrayList: void <init>()>();

        $r13 = new org.codehaus.groovy.antlr.treewalker.NodeAsHTMLPrinter;

        $r15 = r14.<org.codehaus.groovy.antlr.AntlrParserPlugin: java.lang.String[] tokenNames>;

        specialinvoke $r13.<org.codehaus.groovy.antlr.treewalker.NodeAsHTMLPrinter: void <init>(java.io.PrintStream,java.lang.String[])>($r4, $r15);

        interfaceinvoke $r12.<java.util.List: boolean add(java.lang.Object)>($r13);

        $r16 = new org.codehaus.groovy.antlr.treewalker.SourcePrinter;

        $r17 = r14.<org.codehaus.groovy.antlr.AntlrParserPlugin: java.lang.String[] tokenNames>;

        specialinvoke $r16.<org.codehaus.groovy.antlr.treewalker.SourcePrinter: void <init>(java.io.PrintStream,java.lang.String[])>($r4, $r17);

        interfaceinvoke $r12.<java.util.List: boolean add(java.lang.Object)>($r16);

        $r18 = new org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        specialinvoke $r18.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: void <init>(java.util.List)>($r12);

        $r19 = new org.codehaus.groovy.antlr.treewalker.SourceCodeTraversal;

        specialinvoke $r19.<org.codehaus.groovy.antlr.treewalker.SourceCodeTraversal: void <init>(org.codehaus.groovy.antlr.treewalker.Visitor)>($r18);

        $r20 = r14.<org.codehaus.groovy.antlr.AntlrParserPlugin: groovyjarjarantlr.collections.AST ast>;

        interfaceinvoke $r19.<org.codehaus.groovy.antlr.AntlrASTProcessor: groovyjarjarantlr.collections.AST process(groovyjarjarantlr.collections.AST)>($r20);

     label15:
        goto label17;

     label16:
        $r57 := @caughtexception;

        $r59 = <java.lang.System: java.io.PrintStream out>;

        $r58 = new java.lang.StringBuffer;

        specialinvoke $r58.<java.lang.StringBuffer: void <init>()>();

        $r60 = virtualinvoke $r58.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Cannot create ");

        $r61 = virtualinvoke r7.<org.codehaus.groovy.control.SourceUnit: java.lang.String getName()>();

        $r62 = virtualinvoke $r60.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r61);

        $r63 = virtualinvoke $r62.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".html");

        $r64 = virtualinvoke $r63.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r59.<java.io.PrintStream: void println(java.lang.String)>($r64);

     label17:
        return;

        catch java.io.FileNotFoundException from label02 to label03 with label04;
        catch java.io.FileNotFoundException from label06 to label07 with label08;
        catch java.io.FileNotFoundException from label10 to label11 with label12;
        catch java.io.FileNotFoundException from label14 to label15 with label16;
    }

    private void saveAsXML(java.lang.String, groovyjarjarantlr.collections.AST)
    {
        com.thoughtworks.xstream.XStream $r0;
        java.lang.StringBuffer $r3, $r5, $r6, $r8, $r10, $r11, $r12, $r15, $r17, $r18, $r19;
        java.lang.String r4, $r7, $r13, $r20;
        java.io.PrintStream $r9, $r16;
        org.codehaus.groovy.antlr.AntlrParserPlugin r21;
        java.io.FileWriter $r2;
        java.lang.Exception $r14;
        groovyjarjarantlr.collections.AST r1;

        r21 := @this: org.codehaus.groovy.antlr.AntlrParserPlugin;

        r4 := @parameter0: java.lang.String;

        r1 := @parameter1: groovyjarjarantlr.collections.AST;

        $r0 = new com.thoughtworks.xstream.XStream;

        specialinvoke $r0.<com.thoughtworks.xstream.XStream: void <init>()>();

     label1:
        $r2 = new java.io.FileWriter;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".antlr.xml");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r2.<java.io.FileWriter: void <init>(java.lang.String)>($r7);

        virtualinvoke $r0.<com.thoughtworks.xstream.XStream: void toXML(java.lang.Object,java.io.Writer)>(r1, $r2);

        $r9 = <java.lang.System: java.io.PrintStream out>;

        $r8 = new java.lang.StringBuffer;

        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Written AST to ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r4);

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".antlr.xml");

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>($r13);

     label2:
        goto label4;

     label3:
        $r14 := @caughtexception;

        $r16 = <java.lang.System: java.io.PrintStream out>;

        $r15 = new java.lang.StringBuffer;

        specialinvoke $r15.<java.lang.StringBuffer: void <init>()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Couldn\'t write to ");

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r4);

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".antlr.xml");

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r16.<java.io.PrintStream: void println(java.lang.String)>($r20);

        virtualinvoke $r14.<java.lang.Exception: void printStackTrace()>();

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public org.codehaus.groovy.ast.ModuleNode buildAST(org.codehaus.groovy.control.SourceUnit, java.lang.ClassLoader, org.codehaus.groovy.syntax.Reduction) throws org.codehaus.groovy.syntax.ParserException
    {
        org.codehaus.groovy.antlr.AntlrParserPlugin r0;
        org.codehaus.groovy.control.SourceUnit r10;
        org.codehaus.groovy.antlr.ASTParserException $r5;
        org.codehaus.groovy.ast.ModuleNode $r3;
        org.codehaus.groovy.antlr.ASTRuntimeException $r4;
        org.codehaus.groovy.syntax.Reduction r14;
        java.lang.StringBuffer $r6, $r8, $r9, $r12;
        java.lang.ClassLoader r1;
        java.lang.String $r7, $r11, $r13;
        groovyjarjarantlr.collections.AST $r2;

        r0 := @this: org.codehaus.groovy.antlr.AntlrParserPlugin;

        r10 := @parameter0: org.codehaus.groovy.control.SourceUnit;

        r1 := @parameter1: java.lang.ClassLoader;

        r14 := @parameter2: org.codehaus.groovy.syntax.Reduction;

        virtualinvoke r0.<org.codehaus.groovy.antlr.AntlrParserPlugin: void setClassLoader(java.lang.ClassLoader)>(r1);

        virtualinvoke r0.<org.codehaus.groovy.antlr.AntlrParserPlugin: void makeModule()>();

     label1:
        $r2 = r0.<org.codehaus.groovy.antlr.AntlrParserPlugin: groovyjarjarantlr.collections.AST ast>;

        virtualinvoke r0.<org.codehaus.groovy.antlr.AntlrParserPlugin: void convertGroovy(groovyjarjarantlr.collections.AST)>($r2);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        $r5 = new org.codehaus.groovy.antlr.ASTParserException;

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r7 = virtualinvoke $r4.<org.codehaus.groovy.antlr.ASTRuntimeException: java.lang.String getMessage()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(". File: ");

        $r11 = virtualinvoke r10.<org.codehaus.groovy.control.SourceUnit: java.lang.String getName()>();

        $r12 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r5.<org.codehaus.groovy.antlr.ASTParserException: void <init>(java.lang.String,org.codehaus.groovy.antlr.ASTRuntimeException)>($r13, $r4);

        throw $r5;

     label4:
        $r3 = r0.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.ModuleNode output>;

        return $r3;

        catch org.codehaus.groovy.antlr.ASTRuntimeException from label1 to label2 with label3;
    }

    protected void convertGroovy(groovyjarjarantlr.collections.AST)
    {
        org.codehaus.groovy.ast.stmt.Statement $r1;
        org.codehaus.groovy.antlr.AntlrParserPlugin r0;
        int $i0;
        groovyjarjarantlr.collections.AST r3;
        org.codehaus.groovy.ast.ModuleNode $r2;

        r0 := @this: org.codehaus.groovy.antlr.AntlrParserPlugin;

        r3 := @parameter0: groovyjarjarantlr.collections.AST;

     label01:
        if r3 == null goto label10;

        $i0 = interfaceinvoke r3.<groovyjarjarantlr.collections.AST: int getType()>();

        lookupswitch($i0)
        {
            case 8: goto label06;
            case 13: goto label04;
            case 14: goto label05;
            case 15: goto label02;
            case 28: goto label03;
            case 59: goto label03;
            case 60: goto label07;
            default: goto label08;
        };

     label02:
        virtualinvoke r0.<org.codehaus.groovy.antlr.AntlrParserPlugin: void packageDef(groovyjarjarantlr.collections.AST)>(r3);

        goto label09;

     label03:
        virtualinvoke r0.<org.codehaus.groovy.antlr.AntlrParserPlugin: void importDef(groovyjarjarantlr.collections.AST)>(r3);

        goto label09;

     label04:
        virtualinvoke r0.<org.codehaus.groovy.antlr.AntlrParserPlugin: void classDef(groovyjarjarantlr.collections.AST)>(r3);

        goto label09;

     label05:
        virtualinvoke r0.<org.codehaus.groovy.antlr.AntlrParserPlugin: void interfaceDef(groovyjarjarantlr.collections.AST)>(r3);

        goto label09;

     label06:
        virtualinvoke r0.<org.codehaus.groovy.antlr.AntlrParserPlugin: void methodDef(groovyjarjarantlr.collections.AST)>(r3);

        goto label09;

     label07:
        virtualinvoke r0.<org.codehaus.groovy.antlr.AntlrParserPlugin: void enumDef(groovyjarjarantlr.collections.AST)>(r3);

        goto label09;

     label08:
        $r1 = virtualinvoke r0.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.stmt.Statement statement(groovyjarjarantlr.collections.AST)>(r3);

        $r2 = r0.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.ModuleNode output>;

        virtualinvoke $r2.<org.codehaus.groovy.ast.ModuleNode: void addStatement(org.codehaus.groovy.ast.stmt.Statement)>($r1);

     label09:
        r3 = interfaceinvoke r3.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getNextSibling()>();

        goto label01;

     label10:
        return;
    }

    protected void packageDef(groovyjarjarantlr.collections.AST)
    {
        org.codehaus.groovy.antlr.AntlrParserPlugin r3;
        java.lang.String $r2;
        groovyjarjarantlr.collections.AST r0, $r1, r4;
        boolean $z0;

        r3 := @this: org.codehaus.groovy.antlr.AntlrParserPlugin;

        r0 := @parameter0: groovyjarjarantlr.collections.AST;

        $r1 = interfaceinvoke r0.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getFirstChild()>();

        r4 = $r1;

        $z0 = staticinvoke <org.codehaus.groovy.antlr.AntlrParserPlugin: boolean isType(int,groovyjarjarantlr.collections.AST)>(64, $r1);

        if $z0 == 0 goto label1;

        r4 = interfaceinvoke $r1.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getNextSibling()>();

     label1:
        $r2 = staticinvoke <org.codehaus.groovy.antlr.AntlrParserPlugin: java.lang.String qualifiedName(groovyjarjarantlr.collections.AST)>(r4);

        virtualinvoke r3.<org.codehaus.groovy.antlr.AntlrParserPlugin: void setPackageName(java.lang.String)>($r2);

        return;
    }

    protected void importDef(groovyjarjarantlr.collections.AST)
    {
        java.lang.StringBuffer $r7, $r8, $r9, $r10;
        int $i0, $i1;
        java.lang.String $r3, $r6, $r11, $r16, r21;
        boolean z0, $z1, $z2, $z3;
        org.codehaus.groovy.antlr.AntlrParserPlugin r5;
        org.codehaus.groovy.ast.ClassNode $r12, $r13, $r15, $r17;
        org.codehaus.groovy.GroovyBugError $r14;
        groovyjarjarantlr.collections.AST r0, $r1, $r2, $r4, $r18, $r19, r20;

        r5 := @this: org.codehaus.groovy.antlr.AntlrParserPlugin;

        r0 := @parameter0: groovyjarjarantlr.collections.AST;

        $i0 = interfaceinvoke r0.<groovyjarjarantlr.collections.AST: int getType()>();

        if $i0 != 59 goto label1;

        $z3 = 1;

        goto label2;

     label1:
        $z3 = 0;

     label2:
        z0 = $z3;

        $r1 = interfaceinvoke r0.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getFirstChild()>();

        r20 = $r1;

        r21 = null;

        $z1 = staticinvoke <org.codehaus.groovy.antlr.AntlrParserPlugin: boolean isType(int,groovyjarjarantlr.collections.AST)>(110, $r1);

        if $z1 == 0 goto label3;

        $r18 = interfaceinvoke $r1.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getFirstChild()>();

        r20 = $r18;

        $r19 = interfaceinvoke $r18.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getNextSibling()>();

        r21 = virtualinvoke r5.<org.codehaus.groovy.antlr.AntlrParserPlugin: java.lang.String identifier(groovyjarjarantlr.collections.AST)>($r19);

     label3:
        $i1 = interfaceinvoke r20.<groovyjarjarantlr.collections.AST: int getNumberOfChildren()>();

        if $i1 != 0 goto label4;

        $r16 = virtualinvoke r5.<org.codehaus.groovy.antlr.AntlrParserPlugin: java.lang.String identifier(groovyjarjarantlr.collections.AST)>(r20);

        $r17 = staticinvoke <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode make(java.lang.String)>($r16);

        virtualinvoke r5.<org.codehaus.groovy.antlr.AntlrParserPlugin: void configureAST(org.codehaus.groovy.ast.ASTNode,groovyjarjarantlr.collections.AST)>($r17, r0);

        virtualinvoke r5.<org.codehaus.groovy.antlr.AntlrParserPlugin: void importClass(org.codehaus.groovy.ast.ClassNode,java.lang.String,java.lang.String)>($r17, $r16, r21);

        return;

     label4:
        $r2 = interfaceinvoke r20.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getFirstChild()>();

        $r3 = staticinvoke <org.codehaus.groovy.antlr.AntlrParserPlugin: java.lang.String qualifiedName(groovyjarjarantlr.collections.AST)>($r2);

        $r4 = interfaceinvoke $r2.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getNextSibling()>();

        $z2 = staticinvoke <org.codehaus.groovy.antlr.AntlrParserPlugin: boolean isType(int,groovyjarjarantlr.collections.AST)>(109, $r4);

        if $z2 == 0 goto label7;

        if z0 == 0 goto label5;

        $r15 = staticinvoke <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode make(java.lang.String)>($r3);

        virtualinvoke r5.<org.codehaus.groovy.antlr.AntlrParserPlugin: void configureAST(org.codehaus.groovy.ast.ASTNode,groovyjarjarantlr.collections.AST)>($r15, r0);

        virtualinvoke r5.<org.codehaus.groovy.antlr.AntlrParserPlugin: void staticImportClassWithStar(org.codehaus.groovy.ast.ClassNode,java.lang.String)>($r15, $r3);

        goto label6;

     label5:
        virtualinvoke r5.<org.codehaus.groovy.antlr.AntlrParserPlugin: void importPackageWithStar(java.lang.String)>($r3);

     label6:
        if r21 == null goto label9;

        $r14 = new org.codehaus.groovy.GroovyBugError;

        specialinvoke $r14.<org.codehaus.groovy.GroovyBugError: void <init>(java.lang.String)>("imports like \'import foo.* as Bar\' are not supported and should be caught by the grammar");

        throw $r14;

     label7:
        $r6 = virtualinvoke r5.<org.codehaus.groovy.antlr.AntlrParserPlugin: java.lang.String identifier(groovyjarjarantlr.collections.AST)>($r4);

        if z0 == 0 goto label8;

        $r13 = staticinvoke <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode make(java.lang.String)>($r3);

        virtualinvoke r5.<org.codehaus.groovy.antlr.AntlrParserPlugin: void configureAST(org.codehaus.groovy.ast.ASTNode,groovyjarjarantlr.collections.AST)>($r13, r0);

        virtualinvoke r5.<org.codehaus.groovy.antlr.AntlrParserPlugin: void staticImportMethodOrField(org.codehaus.groovy.ast.ClassNode,java.lang.String,java.lang.String)>($r13, $r6, r21);

        goto label9;

     label8:
        $r7 = new java.lang.StringBuffer;

        specialinvoke $r7.<java.lang.StringBuffer: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".");

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

        $r12 = staticinvoke <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode make(java.lang.String)>($r11);

        virtualinvoke r5.<org.codehaus.groovy.antlr.AntlrParserPlugin: void configureAST(org.codehaus.groovy.ast.ASTNode,groovyjarjarantlr.collections.AST)>($r12, r0);

        virtualinvoke r5.<org.codehaus.groovy.antlr.AntlrParserPlugin: void importClass(org.codehaus.groovy.ast.ClassNode,java.lang.String,java.lang.String)>($r12, $r6, r21);

     label9:
        return;
    }

    protected void interfaceDef(groovyjarjarantlr.collections.AST)
    {
        java.util.ArrayList $r0;
        org.codehaus.groovy.ast.ModuleNode $r13;
        int $i0, $i1, i2;
        org.codehaus.groovy.ast.ClassNode[] r18;
        org.codehaus.groovy.ast.GenericsType[] r17;
        java.lang.String $r4, $r7, $r8;
        boolean $z0, $z1, $z2;
        org.codehaus.groovy.antlr.AntlrParserPlugin r3;
        org.codehaus.groovy.ast.ClassNode $r6, $r9, $r10, $r11, $r12, $r14;
        groovyjarjarantlr.collections.AST r1, $r2, $r5, r15, r16;

        r3 := @this: org.codehaus.groovy.antlr.AntlrParserPlugin;

        r1 := @parameter0: groovyjarjarantlr.collections.AST;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r2 = interfaceinvoke r1.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getFirstChild()>();

        r15 = $r2;

        i2 = 1;

        $z0 = staticinvoke <org.codehaus.groovy.antlr.AntlrParserPlugin: boolean isType(int,groovyjarjarantlr.collections.AST)>(5, $r2);

        if $z0 == 0 goto label1;

        $i0 = virtualinvoke r3.<org.codehaus.groovy.antlr.AntlrParserPlugin: int modifiers(groovyjarjarantlr.collections.AST,java.util.List,int)>($r2, $r0, 1);

        i2 = $i0;

        specialinvoke r3.<org.codehaus.groovy.antlr.AntlrParserPlugin: void checkNoInvalidModifier(groovyjarjarantlr.collections.AST,java.lang.String,int,int,java.lang.String)>(r1, "Interface", $i0, 32, "synchronized");

        r15 = interfaceinvoke $r2.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getNextSibling()>();

     label1:
        $i1 = i2 | 1536;

        $r4 = virtualinvoke r3.<org.codehaus.groovy.antlr.AntlrParserPlugin: java.lang.String identifier(groovyjarjarantlr.collections.AST)>(r15);

        $r5 = interfaceinvoke r15.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getNextSibling()>();

        r16 = $r5;

        $r14 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode OBJECT_TYPE>;

        r17 = null;

        $z1 = staticinvoke <org.codehaus.groovy.antlr.AntlrParserPlugin: boolean isType(int,groovyjarjarantlr.collections.AST)>(71, $r5);

        if $z1 == 0 goto label2;

        r17 = virtualinvoke r3.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.GenericsType[] makeGenericsType(groovyjarjarantlr.collections.AST)>($r5);

        r16 = interfaceinvoke $r5.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getNextSibling()>();

     label2:
        r18 = <org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode[] EMPTY_ARRAY>;

        $z2 = staticinvoke <org.codehaus.groovy.antlr.AntlrParserPlugin: boolean isType(int,groovyjarjarantlr.collections.AST)>(17, r16);

        if $z2 == 0 goto label3;

        r18 = virtualinvoke r3.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.ClassNode[] interfaces(groovyjarjarantlr.collections.AST)>(r16);

        r16 = interfaceinvoke r16.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getNextSibling()>();

     label3:
        virtualinvoke r3.<org.codehaus.groovy.antlr.AntlrParserPlugin: void addNewClassName(java.lang.String)>($r4);

        $r6 = new org.codehaus.groovy.ast.ClassNode;

        $r7 = virtualinvoke r3.<org.codehaus.groovy.antlr.AntlrParserPlugin: java.lang.String getPackageName()>();

        $r8 = staticinvoke <org.codehaus.groovy.antlr.AntlrParserPlugin: java.lang.String dot(java.lang.String,java.lang.String)>($r7, $r4);

        specialinvoke $r6.<org.codehaus.groovy.ast.ClassNode: void <init>(java.lang.String,int,org.codehaus.groovy.ast.ClassNode,org.codehaus.groovy.ast.ClassNode[],org.codehaus.groovy.ast.MixinNode[])>($r8, $i1, $r14, r18, null);

        r3.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.ClassNode classNode> = $r6;

        $r9 = r3.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.ClassNode classNode>;

        virtualinvoke $r9.<org.codehaus.groovy.ast.ClassNode: void addAnnotations(java.util.List)>($r0);

        $r10 = r3.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.ClassNode classNode>;

        virtualinvoke $r10.<org.codehaus.groovy.ast.ClassNode: void setGenericsTypes(org.codehaus.groovy.ast.GenericsType[])>(r17);

        $r11 = r3.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.ClassNode classNode>;

        virtualinvoke r3.<org.codehaus.groovy.antlr.AntlrParserPlugin: void configureAST(org.codehaus.groovy.ast.ASTNode,groovyjarjarantlr.collections.AST)>($r11, r1);

        virtualinvoke r3.<org.codehaus.groovy.antlr.AntlrParserPlugin: void assertNodeType(int,groovyjarjarantlr.collections.AST)>(6, r16);

        virtualinvoke r3.<org.codehaus.groovy.antlr.AntlrParserPlugin: void objectBlock(groovyjarjarantlr.collections.AST)>(r16);

        $r13 = r3.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.ModuleNode output>;

        $r12 = r3.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.ClassNode classNode>;

        virtualinvoke $r13.<org.codehaus.groovy.ast.ModuleNode: void addClass(org.codehaus.groovy.ast.ClassNode)>($r12);

        r3.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.ClassNode classNode> = null;

        return;
    }

    protected void classDef(groovyjarjarantlr.collections.AST)
    {
        java.util.ArrayList $r0;
        org.codehaus.groovy.ast.ModuleNode $r13;
        int $i0, i1;
        org.codehaus.groovy.ast.ClassNode[] r19;
        org.codehaus.groovy.ast.GenericsType[] r17;
        java.lang.String $r4, $r7, $r8;
        boolean $z0, $z1, $z2, $z3;
        org.codehaus.groovy.ast.MixinNode[] $r14;
        org.codehaus.groovy.antlr.AntlrParserPlugin r3;
        org.codehaus.groovy.ast.ClassNode $r6, $r9, $r10, $r11, $r12, r18;
        groovyjarjarantlr.collections.AST r1, $r2, $r5, r15, r16;

        r3 := @this: org.codehaus.groovy.antlr.AntlrParserPlugin;

        r1 := @parameter0: groovyjarjarantlr.collections.AST;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r2 = interfaceinvoke r1.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getFirstChild()>();

        r15 = $r2;

        i1 = 1;

        $z0 = staticinvoke <org.codehaus.groovy.antlr.AntlrParserPlugin: boolean isType(int,groovyjarjarantlr.collections.AST)>(5, $r2);

        if $z0 == 0 goto label1;

        $i0 = virtualinvoke r3.<org.codehaus.groovy.antlr.AntlrParserPlugin: int modifiers(groovyjarjarantlr.collections.AST,java.util.List,int)>($r2, $r0, 1);

        i1 = $i0;

        specialinvoke r3.<org.codehaus.groovy.antlr.AntlrParserPlugin: void checkNoInvalidModifier(groovyjarjarantlr.collections.AST,java.lang.String,int,int,java.lang.String)>(r1, "Class", $i0, 32, "synchronized");

        r15 = interfaceinvoke $r2.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getNextSibling()>();

     label1:
        $r4 = virtualinvoke r3.<org.codehaus.groovy.antlr.AntlrParserPlugin: java.lang.String identifier(groovyjarjarantlr.collections.AST)>(r15);

        $r5 = interfaceinvoke r15.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getNextSibling()>();

        r16 = $r5;

        r17 = null;

        $z1 = staticinvoke <org.codehaus.groovy.antlr.AntlrParserPlugin: boolean isType(int,groovyjarjarantlr.collections.AST)>(71, $r5);

        if $z1 == 0 goto label2;

        r17 = virtualinvoke r3.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.GenericsType[] makeGenericsType(groovyjarjarantlr.collections.AST)>($r5);

        r16 = interfaceinvoke $r5.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getNextSibling()>();

     label2:
        r18 = null;

        $z2 = staticinvoke <org.codehaus.groovy.antlr.AntlrParserPlugin: boolean isType(int,groovyjarjarantlr.collections.AST)>(17, r16);

        if $z2 == 0 goto label3;

        r18 = virtualinvoke r3.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.ClassNode makeTypeWithArguments(groovyjarjarantlr.collections.AST)>(r16);

        r16 = interfaceinvoke r16.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getNextSibling()>();

     label3:
        r19 = <org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode[] EMPTY_ARRAY>;

        $z3 = staticinvoke <org.codehaus.groovy.antlr.AntlrParserPlugin: boolean isType(int,groovyjarjarantlr.collections.AST)>(18, r16);

        if $z3 == 0 goto label4;

        r19 = virtualinvoke r3.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.ClassNode[] interfaces(groovyjarjarantlr.collections.AST)>(r16);

        r16 = interfaceinvoke r16.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getNextSibling()>();

     label4:
        $r14 = newarray (org.codehaus.groovy.ast.MixinNode)[0];

        virtualinvoke r3.<org.codehaus.groovy.antlr.AntlrParserPlugin: void addNewClassName(java.lang.String)>($r4);

        $r6 = new org.codehaus.groovy.ast.ClassNode;

        $r7 = virtualinvoke r3.<org.codehaus.groovy.antlr.AntlrParserPlugin: java.lang.String getPackageName()>();

        $r8 = staticinvoke <org.codehaus.groovy.antlr.AntlrParserPlugin: java.lang.String dot(java.lang.String,java.lang.String)>($r7, $r4);

        specialinvoke $r6.<org.codehaus.groovy.ast.ClassNode: void <init>(java.lang.String,int,org.codehaus.groovy.ast.ClassNode,org.codehaus.groovy.ast.ClassNode[],org.codehaus.groovy.ast.MixinNode[])>($r8, i1, r18, r19, $r14);

        r3.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.ClassNode classNode> = $r6;

        $r9 = r3.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.ClassNode classNode>;

        virtualinvoke $r9.<org.codehaus.groovy.ast.ClassNode: void addAnnotations(java.util.List)>($r0);

        $r10 = r3.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.ClassNode classNode>;

        virtualinvoke $r10.<org.codehaus.groovy.ast.ClassNode: void setGenericsTypes(org.codehaus.groovy.ast.GenericsType[])>(r17);

        $r11 = r3.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.ClassNode classNode>;

        virtualinvoke r3.<org.codehaus.groovy.antlr.AntlrParserPlugin: void configureAST(org.codehaus.groovy.ast.ASTNode,groovyjarjarantlr.collections.AST)>($r11, r1);

        virtualinvoke r3.<org.codehaus.groovy.antlr.AntlrParserPlugin: void assertNodeType(int,groovyjarjarantlr.collections.AST)>(6, r16);

        virtualinvoke r3.<org.codehaus.groovy.antlr.AntlrParserPlugin: void objectBlock(groovyjarjarantlr.collections.AST)>(r16);

        $r13 = r3.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.ModuleNode output>;

        $r12 = r3.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.ClassNode classNode>;

        virtualinvoke $r13.<org.codehaus.groovy.ast.ModuleNode: void addClass(org.codehaus.groovy.ast.ClassNode)>($r12);

        r3.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.ClassNode classNode> = null;

        return;
    }

    protected void objectBlock(groovyjarjarantlr.collections.AST)
    {
        org.codehaus.groovy.antlr.AntlrParserPlugin r1;
        int $i0;
        groovyjarjarantlr.collections.AST r0, r2;

        r1 := @this: org.codehaus.groovy.antlr.AntlrParserPlugin;

        r0 := @parameter0: groovyjarjarantlr.collections.AST;

        r2 = interfaceinvoke r0.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getFirstChild()>();

     label01:
        if r2 == null goto label12;

        $i0 = interfaceinvoke r2.<groovyjarjarantlr.collections.AST: int getType()>();

        lookupswitch($i0)
        {
            case 6: goto label02;
            case 8: goto label03;
            case 9: goto label05;
            case 10: goto label07;
            case 11: goto label06;
            case 45: goto label04;
            case 60: goto label08;
            case 61: goto label09;
            default: goto label10;
        };

     label02:
        virtualinvoke r1.<org.codehaus.groovy.antlr.AntlrParserPlugin: void objectBlock(groovyjarjarantlr.collections.AST)>(r2);

        goto label11;

     label03:
        virtualinvoke r1.<org.codehaus.groovy.antlr.AntlrParserPlugin: void methodDef(groovyjarjarantlr.collections.AST)>(r2);

        goto label11;

     label04:
        virtualinvoke r1.<org.codehaus.groovy.antlr.AntlrParserPlugin: void constructorDef(groovyjarjarantlr.collections.AST)>(r2);

        goto label11;

     label05:
        virtualinvoke r1.<org.codehaus.groovy.antlr.AntlrParserPlugin: void fieldDef(groovyjarjarantlr.collections.AST)>(r2);

        goto label11;

     label06:
        virtualinvoke r1.<org.codehaus.groovy.antlr.AntlrParserPlugin: void staticInit(groovyjarjarantlr.collections.AST)>(r2);

        goto label11;

     label07:
        virtualinvoke r1.<org.codehaus.groovy.antlr.AntlrParserPlugin: void objectInit(groovyjarjarantlr.collections.AST)>(r2);

        goto label11;

     label08:
        virtualinvoke r1.<org.codehaus.groovy.antlr.AntlrParserPlugin: void enumDef(groovyjarjarantlr.collections.AST)>(r2);

        goto label11;

     label09:
        virtualinvoke r1.<org.codehaus.groovy.antlr.AntlrParserPlugin: void enumConstantDef(groovyjarjarantlr.collections.AST)>(r2);

        goto label11;

     label10:
        virtualinvoke r1.<org.codehaus.groovy.antlr.AntlrParserPlugin: void unknownAST(groovyjarjarantlr.collections.AST)>(r2);

     label11:
        r2 = interfaceinvoke r2.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getNextSibling()>();

        goto label01;

     label12:
        return;
    }

    protected void enumDef(groovyjarjarantlr.collections.AST)
    {
        java.util.ArrayList $r2;
        org.codehaus.groovy.ast.ModuleNode $r12;
        org.codehaus.groovy.ast.ClassNode[] $r6;
        int i0;
        java.lang.String $r4, $r8, $r9;
        boolean $z0;
        org.codehaus.groovy.antlr.AntlrParserPlugin r0;
        org.codehaus.groovy.ast.ClassNode $r10, $r11, $r13;
        groovyjarjarantlr.collections.AST r1, $r3, $r5, $r7, r14;

        r0 := @this: org.codehaus.groovy.antlr.AntlrParserPlugin;

        r1 := @parameter0: groovyjarjarantlr.collections.AST;

        virtualinvoke r0.<org.codehaus.groovy.antlr.AntlrParserPlugin: void assertNodeType(int,groovyjarjarantlr.collections.AST)>(60, r1);

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        $r3 = interfaceinvoke r1.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getFirstChild()>();

        r14 = $r3;

        i0 = 1;

        $z0 = staticinvoke <org.codehaus.groovy.antlr.AntlrParserPlugin: boolean isType(int,groovyjarjarantlr.collections.AST)>(5, $r3);

        if $z0 == 0 goto label1;

        i0 = virtualinvoke r0.<org.codehaus.groovy.antlr.AntlrParserPlugin: int modifiers(groovyjarjarantlr.collections.AST,java.util.List,int)>($r3, $r2, 1);

        r14 = interfaceinvoke $r3.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getNextSibling()>();

     label1:
        $r4 = virtualinvoke r0.<org.codehaus.groovy.antlr.AntlrParserPlugin: java.lang.String identifier(groovyjarjarantlr.collections.AST)>(r14);

        $r5 = interfaceinvoke r14.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getNextSibling()>();

        $r6 = virtualinvoke r0.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.ClassNode[] interfaces(groovyjarjarantlr.collections.AST)>($r5);

        $r7 = interfaceinvoke $r5.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getNextSibling()>();

        $r8 = virtualinvoke r0.<org.codehaus.groovy.antlr.AntlrParserPlugin: java.lang.String getPackageName()>();

        $r9 = staticinvoke <org.codehaus.groovy.antlr.AntlrParserPlugin: java.lang.String dot(java.lang.String,java.lang.String)>($r8, $r4);

        $r10 = r0.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.ClassNode classNode>;

        $r11 = staticinvoke <org.codehaus.groovy.antlr.EnumHelper: org.codehaus.groovy.ast.ClassNode makeEnumNode(java.lang.String,int,org.codehaus.groovy.ast.ClassNode[],org.codehaus.groovy.ast.ClassNode)>($r9, i0, $r6, $r10);

        $r13 = r0.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.ClassNode classNode>;

        r0.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.ClassNode classNode> = $r11;

        virtualinvoke r0.<org.codehaus.groovy.antlr.AntlrParserPlugin: void assertNodeType(int,groovyjarjarantlr.collections.AST)>(6, $r7);

        virtualinvoke r0.<org.codehaus.groovy.antlr.AntlrParserPlugin: void objectBlock(groovyjarjarantlr.collections.AST)>($r7);

        r0.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.ClassNode classNode> = $r13;

        $r12 = r0.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.ModuleNode output>;

        virtualinvoke $r12.<org.codehaus.groovy.ast.ModuleNode: void addClass(org.codehaus.groovy.ast.ClassNode)>($r11);

        return;
    }

    protected void enumConstantDef(groovyjarjarantlr.collections.AST)
    {
        org.codehaus.groovy.ast.expr.ListExpression $r6, $r7;
        org.codehaus.groovy.antlr.AntlrParserPlugin r0;
        org.codehaus.groovy.ast.ClassNode $r10;
        java.lang.String $r3;
        org.codehaus.groovy.ast.expr.Expression $r5, r9;
        groovyjarjarantlr.collections.AST r1, $r2, $r4, r8;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: org.codehaus.groovy.antlr.AntlrParserPlugin;

        r1 := @parameter0: groovyjarjarantlr.collections.AST;

        virtualinvoke r0.<org.codehaus.groovy.antlr.AntlrParserPlugin: void assertNodeType(int,groovyjarjarantlr.collections.AST)>(61, r1);

        $r2 = interfaceinvoke r1.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getFirstChild()>();

        r8 = $r2;

        $z0 = staticinvoke <org.codehaus.groovy.antlr.AntlrParserPlugin: boolean isType(int,groovyjarjarantlr.collections.AST)>(64, $r2);

        if $z0 == 0 goto label1;

        r8 = interfaceinvoke $r2.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getNextSibling()>();

     label1:
        $r3 = virtualinvoke r0.<org.codehaus.groovy.antlr.AntlrParserPlugin: java.lang.String identifier(groovyjarjarantlr.collections.AST)>(r8);

        r9 = null;

        $r4 = interfaceinvoke r8.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getNextSibling()>();

        if $r4 == null goto label2;

        $r5 = virtualinvoke r0.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.expr.Expression expression(groovyjarjarantlr.collections.AST)>($r4);

        r9 = $r5;

        $z1 = staticinvoke <org.codehaus.groovy.antlr.AntlrParserPlugin: boolean isType(int,groovyjarjarantlr.collections.AST)>(32, $r4);

        if $z1 == 0 goto label2;

        $z2 = $r5 instanceof org.codehaus.groovy.ast.expr.ListExpression;

        if $z2 == 0 goto label2;

        $r6 = (org.codehaus.groovy.ast.expr.ListExpression) $r5;

        $z3 = virtualinvoke $r6.<org.codehaus.groovy.ast.expr.ListExpression: boolean isWrapped()>();

        if $z3 != 0 goto label2;

        $r7 = new org.codehaus.groovy.ast.expr.ListExpression;

        specialinvoke $r7.<org.codehaus.groovy.ast.expr.ListExpression: void <init>()>();

        virtualinvoke $r7.<org.codehaus.groovy.ast.expr.ListExpression: void addExpression(org.codehaus.groovy.ast.expr.Expression)>($r5);

        r9 = $r7;

     label2:
        $r10 = r0.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.ClassNode classNode>;

        staticinvoke <org.codehaus.groovy.antlr.EnumHelper: void addEnumConstant(org.codehaus.groovy.ast.ClassNode,java.lang.String,org.codehaus.groovy.ast.expr.Expression)>($r10, $r3, r9);

        return;
    }

    protected void throwsList(groovyjarjarantlr.collections.AST, java.util.List)
    {
        org.codehaus.groovy.antlr.AntlrParserPlugin r1;
        java.util.List r3;
        org.codehaus.groovy.ast.ClassNode $r2;
        java.lang.String r5;
        groovyjarjarantlr.collections.AST r0, $r4;
        boolean $z0;

        r1 := @this: org.codehaus.groovy.antlr.AntlrParserPlugin;

        r0 := @parameter0: groovyjarjarantlr.collections.AST;

        r3 := @parameter1: java.util.List;

        $z0 = staticinvoke <org.codehaus.groovy.antlr.AntlrParserPlugin: boolean isType(int,groovyjarjarantlr.collections.AST)>(87, r0);

        if $z0 == 0 goto label1;

        r5 = staticinvoke <org.codehaus.groovy.antlr.AntlrParserPlugin: java.lang.String qualifiedName(groovyjarjarantlr.collections.AST)>(r0);

        goto label2;

     label1:
        r5 = virtualinvoke r1.<org.codehaus.groovy.antlr.AntlrParserPlugin: java.lang.String identifier(groovyjarjarantlr.collections.AST)>(r0);

     label2:
        $r2 = staticinvoke <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode make(java.lang.String)>(r5);

        virtualinvoke r1.<org.codehaus.groovy.antlr.AntlrParserPlugin: void configureAST(org.codehaus.groovy.ast.ASTNode,groovyjarjarantlr.collections.AST)>($r2, r0);

        interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>($r2);

        $r4 = interfaceinvoke r0.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getNextSibling()>();

        if $r4 == null goto label3;

        virtualinvoke r1.<org.codehaus.groovy.antlr.AntlrParserPlugin: void throwsList(groovyjarjarantlr.collections.AST,java.util.List)>($r4, r3);

     label3:
        return;
    }

    protected void methodDef(groovyjarjarantlr.collections.AST)
    {
        org.codehaus.groovy.ast.ModuleNode $r11;
        org.codehaus.groovy.ast.GenericsType[] r24;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        org.codehaus.groovy.antlr.AntlrParserPlugin r3;
        groovyjarjarantlr.collections.AST r1, $r2, $r6, $r8, $r14, r23, r27;
        org.codehaus.groovy.ast.stmt.Statement r29;
        java.lang.Object[] $r16;
        java.util.ArrayList $r0, $r15;
        org.codehaus.groovy.ast.MethodNode $r9;
        int $i0, $i1, i2;
        org.codehaus.groovy.ast.ClassNode[] $r17, $r18, r28;
        java.lang.String $r4, $r20;
        org.codehaus.groovy.ast.ClassNode $r5, $r10, $r12, $r19, r25;
        org.codehaus.groovy.antlr.ASTRuntimeException $r13, $r21, $r22;
        org.codehaus.groovy.ast.Parameter[] $r7, r26;

        r3 := @this: org.codehaus.groovy.antlr.AntlrParserPlugin;

        r1 := @parameter0: groovyjarjarantlr.collections.AST;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r2 = interfaceinvoke r1.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getFirstChild()>();

        r23 = $r2;

        r24 = null;

        $z0 = staticinvoke <org.codehaus.groovy.antlr.AntlrParserPlugin: boolean isType(int,groovyjarjarantlr.collections.AST)>(71, $r2);

        if $z0 == 0 goto label01;

        r24 = virtualinvoke r3.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.GenericsType[] makeGenericsType(groovyjarjarantlr.collections.AST)>($r2);

        r23 = interfaceinvoke $r2.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getNextSibling()>();

     label01:
        i2 = 1;

        $z1 = staticinvoke <org.codehaus.groovy.antlr.AntlrParserPlugin: boolean isType(int,groovyjarjarantlr.collections.AST)>(5, r23);

        if $z1 == 0 goto label02;

        $i1 = virtualinvoke r3.<org.codehaus.groovy.antlr.AntlrParserPlugin: int modifiers(groovyjarjarantlr.collections.AST,java.util.List,int)>(r23, $r0, 1);

        i2 = $i1;

        specialinvoke r3.<org.codehaus.groovy.antlr.AntlrParserPlugin: void checkNoInvalidModifier(groovyjarjarantlr.collections.AST,java.lang.String,int,int,java.lang.String)>(r1, "Method", $i1, 64, "volatile");

        r23 = interfaceinvoke r23.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getNextSibling()>();

     label02:
        $z2 = specialinvoke r3.<org.codehaus.groovy.antlr.AntlrParserPlugin: boolean isAnInterface()>();

        if $z2 == 0 goto label03;

        i2 = i2 | 1024;

     label03:
        r25 = null;

        $z3 = staticinvoke <org.codehaus.groovy.antlr.AntlrParserPlugin: boolean isType(int,groovyjarjarantlr.collections.AST)>(12, r23);

        if $z3 == 0 goto label04;

        r25 = virtualinvoke r3.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.ClassNode makeTypeWithArguments(groovyjarjarantlr.collections.AST)>(r23);

        r23 = interfaceinvoke r23.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getNextSibling()>();

     label04:
        $r4 = virtualinvoke r3.<org.codehaus.groovy.antlr.AntlrParserPlugin: java.lang.String identifier(groovyjarjarantlr.collections.AST)>(r23);

        $r5 = r3.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.ClassNode classNode>;

        if $r5 == null goto label06;

        $r19 = r3.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.ClassNode classNode>;

        $r20 = virtualinvoke $r19.<org.codehaus.groovy.ast.ClassNode: java.lang.String getNameWithoutPackage()>();

        $z5 = virtualinvoke $r20.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z5 == 0 goto label06;

        $z6 = specialinvoke r3.<org.codehaus.groovy.antlr.AntlrParserPlugin: boolean isAnInterface()>();

        if $z6 == 0 goto label05;

        $r22 = new org.codehaus.groovy.antlr.ASTRuntimeException;

        specialinvoke $r22.<org.codehaus.groovy.antlr.ASTRuntimeException: void <init>(groovyjarjarantlr.collections.AST,java.lang.String)>(r1, "Constructor not permitted within an interface.");

        throw $r22;

     label05:
        $r21 = new org.codehaus.groovy.antlr.ASTRuntimeException;

        specialinvoke $r21.<org.codehaus.groovy.antlr.ASTRuntimeException: void <init>(groovyjarjarantlr.collections.AST,java.lang.String)>(r1, "Invalid constructor format. Try remove the \'def\' expression?");

        throw $r21;

     label06:
        $r6 = interfaceinvoke r23.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getNextSibling()>();

        virtualinvoke r3.<org.codehaus.groovy.antlr.AntlrParserPlugin: void assertNodeType(int,groovyjarjarantlr.collections.AST)>(19, $r6);

        $r7 = virtualinvoke r3.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.Parameter[] parameters(groovyjarjarantlr.collections.AST)>($r6);

        r26 = $r7;

        if $r7 != null goto label07;

        r26 = <org.codehaus.groovy.ast.Parameter: org.codehaus.groovy.ast.Parameter[] EMPTY_ARRAY>;

     label07:
        $r8 = interfaceinvoke $r6.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getNextSibling()>();

        r27 = $r8;

        $r18 = <org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode[] EMPTY_ARRAY>;

        r28 = $r18;

        $z4 = staticinvoke <org.codehaus.groovy.antlr.AntlrParserPlugin: boolean isType(int,groovyjarjarantlr.collections.AST)>(127, $r8);

        if $z4 == 0 goto label08;

        $r14 = interfaceinvoke $r8.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getFirstChild()>();

        $r15 = new java.util.ArrayList;

        specialinvoke $r15.<java.util.ArrayList: void <init>()>();

        virtualinvoke r3.<org.codehaus.groovy.antlr.AntlrParserPlugin: void throwsList(groovyjarjarantlr.collections.AST,java.util.List)>($r14, $r15);

        $r16 = interfaceinvoke $r15.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r18);

        $r17 = (org.codehaus.groovy.ast.ClassNode[]) $r16;

        r28 = (org.codehaus.groovy.ast.ClassNode[]) $r17;

        r27 = interfaceinvoke $r8.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getNextSibling()>();

     label08:
        r29 = null;

        $i0 = i2 & 1024;

        if $i0 != 0 goto label10;

        if r27 != null goto label09;

        $r13 = new org.codehaus.groovy.antlr.ASTRuntimeException;

        specialinvoke $r13.<org.codehaus.groovy.antlr.ASTRuntimeException: void <init>(groovyjarjarantlr.collections.AST,java.lang.String)>(r1, "You defined a method without body. Try adding a body, or declare it abstract.");

        throw $r13;

     label09:
        virtualinvoke r3.<org.codehaus.groovy.antlr.AntlrParserPlugin: void assertNodeType(int,groovyjarjarantlr.collections.AST)>(7, r27);

        r29 = virtualinvoke r3.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.stmt.Statement statementList(groovyjarjarantlr.collections.AST)>(r27);

     label10:
        $r9 = new org.codehaus.groovy.ast.MethodNode;

        specialinvoke $r9.<org.codehaus.groovy.ast.MethodNode: void <init>(java.lang.String,int,org.codehaus.groovy.ast.ClassNode,org.codehaus.groovy.ast.Parameter[],org.codehaus.groovy.ast.ClassNode[],org.codehaus.groovy.ast.stmt.Statement)>($r4, i2, r25, r26, r28, r29);

        virtualinvoke $r9.<org.codehaus.groovy.ast.MethodNode: void addAnnotations(java.util.List)>($r0);

        virtualinvoke $r9.<org.codehaus.groovy.ast.MethodNode: void setGenericsTypes(org.codehaus.groovy.ast.GenericsType[])>(r24);

        virtualinvoke r3.<org.codehaus.groovy.antlr.AntlrParserPlugin: void configureAST(org.codehaus.groovy.ast.ASTNode,groovyjarjarantlr.collections.AST)>($r9, r1);

        $r10 = r3.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.ClassNode classNode>;

        if $r10 == null goto label11;

        $r12 = r3.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.ClassNode classNode>;

        virtualinvoke $r12.<org.codehaus.groovy.ast.ClassNode: void addMethod(org.codehaus.groovy.ast.MethodNode)>($r9);

        goto label12;

     label11:
        $r11 = r3.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.ModuleNode output>;

        virtualinvoke $r11.<org.codehaus.groovy.ast.ModuleNode: void addMethod(org.codehaus.groovy.ast.MethodNode)>($r9);

     label12:
        return;
    }

    private void checkNoInvalidModifier(groovyjarjarantlr.collections.AST, java.lang.String, int, int, java.lang.String)
    {
        org.codehaus.groovy.antlr.AntlrParserPlugin r10;
        org.codehaus.groovy.antlr.ASTRuntimeException $r0;
        java.lang.StringBuffer $r2, $r4, $r5, $r7, $r8;
        int i0, i1, $i2;
        java.lang.String r3, r6, $r9;
        groovyjarjarantlr.collections.AST r1;

        r10 := @this: org.codehaus.groovy.antlr.AntlrParserPlugin;

        r1 := @parameter0: groovyjarjarantlr.collections.AST;

        r3 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        r6 := @parameter4: java.lang.String;

        $i2 = i0 & i1;

        if $i2 == 0 goto label1;

        $r0 = new org.codehaus.groovy.antlr.ASTRuntimeException;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" has an incorrect modifier \'");

        $r7 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'.");

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r0.<org.codehaus.groovy.antlr.ASTRuntimeException: void <init>(groovyjarjarantlr.collections.AST,java.lang.String)>(r1, $r9);

        throw $r0;

     label1:
        return;
    }

    private boolean isAnInterface()
    {
        org.codehaus.groovy.antlr.AntlrParserPlugin r0;
        org.codehaus.groovy.ast.ClassNode $r1, $r2;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.AntlrParserPlugin;

        $r1 = r0.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.ClassNode classNode>;

        if $r1 == null goto label1;

        $r2 = r0.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.ClassNode classNode>;

        $i0 = virtualinvoke $r2.<org.codehaus.groovy.ast.ClassNode: int getModifiers()>();

        $i1 = $i0 & 512;

        if $i1 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    protected void staticInit(groovyjarjarantlr.collections.AST)
    {
        org.codehaus.groovy.ast.stmt.Statement $r2;
        org.codehaus.groovy.antlr.AntlrParserPlugin r0;
        java.util.List $r5;
        org.codehaus.groovy.ast.stmt.BlockStatement r3;
        org.codehaus.groovy.ast.ClassNode $r4;
        groovyjarjarantlr.collections.AST r1;

        r0 := @this: org.codehaus.groovy.antlr.AntlrParserPlugin;

        r1 := @parameter0: groovyjarjarantlr.collections.AST;

        $r2 = virtualinvoke r0.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.stmt.Statement statementList(groovyjarjarantlr.collections.AST)>(r1);

        r3 = (org.codehaus.groovy.ast.stmt.BlockStatement) $r2;

        $r4 = r0.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.ClassNode classNode>;

        $r5 = virtualinvoke r3.<org.codehaus.groovy.ast.stmt.BlockStatement: java.util.List getStatements()>();

        virtualinvoke $r4.<org.codehaus.groovy.ast.ClassNode: void addStaticInitializerStatements(java.util.List,boolean)>($r5, 0);

        return;
    }

    protected void objectInit(groovyjarjarantlr.collections.AST)
    {
        org.codehaus.groovy.ast.stmt.Statement $r2;
        org.codehaus.groovy.antlr.AntlrParserPlugin r0;
        org.codehaus.groovy.ast.stmt.BlockStatement r3;
        org.codehaus.groovy.ast.ClassNode $r4;
        groovyjarjarantlr.collections.AST r1;

        r0 := @this: org.codehaus.groovy.antlr.AntlrParserPlugin;

        r1 := @parameter0: groovyjarjarantlr.collections.AST;

        $r2 = virtualinvoke r0.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.stmt.Statement statementList(groovyjarjarantlr.collections.AST)>(r1);

        r3 = (org.codehaus.groovy.ast.stmt.BlockStatement) $r2;

        $r4 = r0.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.ClassNode classNode>;

        virtualinvoke $r4.<org.codehaus.groovy.ast.ClassNode: void addObjectInitializerStatements(org.codehaus.groovy.ast.stmt.Statement)>(r3);

        return;
    }

    protected void constructorDef(groovyjarjarantlr.collections.AST)
    {
        org.codehaus.groovy.ast.stmt.Statement $r6;
        java.lang.Object[] $r11;
        java.util.ArrayList $r0, $r10;
        org.codehaus.groovy.ast.ClassNode[] $r12, $r13, r17;
        int i0;
        boolean $z0, $z1;
        org.codehaus.groovy.antlr.AntlrParserPlugin r3;
        org.codehaus.groovy.ast.ClassNode $r7;
        org.codehaus.groovy.ast.Parameter[] $r4, r15;
        groovyjarjarantlr.collections.AST r1, $r2, $r5, $r9, r14, r16;
        org.codehaus.groovy.ast.ConstructorNode $r8;

        r3 := @this: org.codehaus.groovy.antlr.AntlrParserPlugin;

        r1 := @parameter0: groovyjarjarantlr.collections.AST;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r2 = interfaceinvoke r1.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getFirstChild()>();

        r14 = $r2;

        i0 = 1;

        $z0 = staticinvoke <org.codehaus.groovy.antlr.AntlrParserPlugin: boolean isType(int,groovyjarjarantlr.collections.AST)>(5, $r2);

        if $z0 == 0 goto label1;

        i0 = virtualinvoke r3.<org.codehaus.groovy.antlr.AntlrParserPlugin: int modifiers(groovyjarjarantlr.collections.AST,java.util.List,int)>($r2, $r0, 1);

        r14 = interfaceinvoke $r2.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getNextSibling()>();

     label1:
        virtualinvoke r3.<org.codehaus.groovy.antlr.AntlrParserPlugin: void assertNodeType(int,groovyjarjarantlr.collections.AST)>(19, r14);

        $r4 = virtualinvoke r3.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.Parameter[] parameters(groovyjarjarantlr.collections.AST)>(r14);

        r15 = $r4;

        if $r4 != null goto label2;

        r15 = <org.codehaus.groovy.ast.Parameter: org.codehaus.groovy.ast.Parameter[] EMPTY_ARRAY>;

     label2:
        $r5 = interfaceinvoke r14.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getNextSibling()>();

        r16 = $r5;

        $r13 = <org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode[] EMPTY_ARRAY>;

        r17 = $r13;

        $z1 = staticinvoke <org.codehaus.groovy.antlr.AntlrParserPlugin: boolean isType(int,groovyjarjarantlr.collections.AST)>(127, $r5);

        if $z1 == 0 goto label3;

        $r9 = interfaceinvoke $r5.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getFirstChild()>();

        $r10 = new java.util.ArrayList;

        specialinvoke $r10.<java.util.ArrayList: void <init>()>();

        virtualinvoke r3.<org.codehaus.groovy.antlr.AntlrParserPlugin: void throwsList(groovyjarjarantlr.collections.AST,java.util.List)>($r9, $r10);

        $r11 = interfaceinvoke $r10.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r13);

        $r12 = (org.codehaus.groovy.ast.ClassNode[]) $r11;

        r17 = (org.codehaus.groovy.ast.ClassNode[]) $r12;

        r16 = interfaceinvoke $r5.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getNextSibling()>();

     label3:
        virtualinvoke r3.<org.codehaus.groovy.antlr.AntlrParserPlugin: void assertNodeType(int,groovyjarjarantlr.collections.AST)>(7, r16);

        $r6 = virtualinvoke r3.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.stmt.Statement statementList(groovyjarjarantlr.collections.AST)>(r16);

        $r7 = r3.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.ClassNode classNode>;

        $r8 = virtualinvoke $r7.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ConstructorNode addConstructor(int,org.codehaus.groovy.ast.Parameter[],org.codehaus.groovy.ast.ClassNode[],org.codehaus.groovy.ast.stmt.Statement)>(i0, r15, r17, $r6);

        virtualinvoke $r8.<org.codehaus.groovy.ast.ConstructorNode: void addAnnotations(java.util.List)>($r0);

        virtualinvoke r3.<org.codehaus.groovy.antlr.AntlrParserPlugin: void configureAST(org.codehaus.groovy.ast.ASTNode,groovyjarjarantlr.collections.AST)>($r8, r1);

        return;
    }

    protected void fieldDef(groovyjarjarantlr.collections.AST)
    {
        java.lang.Float $r35;
        java.lang.Integer $r41;
        java.lang.Character $r29;
        byte b4;
        java.lang.Long $r39;
        org.codehaus.groovy.ast.PropertyNode $r9, $r49;
        org.codehaus.groovy.antlr.AntlrParserPlugin r3;
        groovyjarjarantlr.collections.AST r1, $r2, $r6, $r42, r43;
        java.lang.Double $r37;
        java.util.ArrayList $r0;
        java.lang.String $r5, $r15;
        org.codehaus.groovy.ast.expr.Expression r45;
        org.codehaus.groovy.ast.ClassNode $r4, $r7, $r8, $r11, $r14, $r17, $r18, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, r44, $r47, $r50, $r51;
        org.codehaus.groovy.ast.expr.ConstantExpression $r28, $r30, $r32, $r34, $r36, $r38, $r40;
        java.lang.Short $r33;
        java.lang.Byte $r31;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        java.util.List $r12, $r19;
        int $i0, $i1, $i2, i3;
        org.codehaus.groovy.ast.FieldNode $r10, $r13, $r16, $r46, r48;

        r3 := @this: org.codehaus.groovy.antlr.AntlrParserPlugin;

        r1 := @parameter0: groovyjarjarantlr.collections.AST;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r2 = interfaceinvoke r1.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getFirstChild()>();

        r43 = $r2;

        i3 = 0;

        $z0 = staticinvoke <org.codehaus.groovy.antlr.AntlrParserPlugin: boolean isType(int,groovyjarjarantlr.collections.AST)>(5, $r2);

        if $z0 == 0 goto label01;

        i3 = virtualinvoke r3.<org.codehaus.groovy.antlr.AntlrParserPlugin: int modifiers(groovyjarjarantlr.collections.AST,java.util.List,int)>($r2, $r0, 0);

        r43 = interfaceinvoke $r2.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getNextSibling()>();

     label01:
        $r4 = r3.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.ClassNode classNode>;

        $z1 = virtualinvoke $r4.<org.codehaus.groovy.ast.ClassNode: boolean isInterface()>();

        if $z1 == 0 goto label02;

        i3 = i3 | 24;

        $i2 = i3 & 6;

        if $i2 != 0 goto label02;

        i3 = i3 | 1;

     label02:
        r44 = null;

        $z6 = staticinvoke <org.codehaus.groovy.antlr.AntlrParserPlugin: boolean isType(int,groovyjarjarantlr.collections.AST)>(12, r43);

        if $z6 == 0 goto label03;

        r44 = virtualinvoke r3.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.ClassNode makeTypeWithArguments(groovyjarjarantlr.collections.AST)>(r43);

        r43 = interfaceinvoke r43.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getNextSibling()>();

     label03:
        $r5 = virtualinvoke r3.<org.codehaus.groovy.antlr.AntlrParserPlugin: java.lang.String identifier(groovyjarjarantlr.collections.AST)>(r43);

        $r6 = interfaceinvoke r43.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getNextSibling()>();

        r45 = null;

        if $r6 == null goto label04;

        virtualinvoke r3.<org.codehaus.groovy.antlr.AntlrParserPlugin: void assertNodeType(int,groovyjarjarantlr.collections.AST)>(120, $r6);

        $r42 = interfaceinvoke $r6.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getFirstChild()>();

        r45 = virtualinvoke r3.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.expr.Expression expression(groovyjarjarantlr.collections.AST)>($r42);

     label04:
        $r7 = r3.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.ClassNode classNode>;

        $z2 = virtualinvoke $r7.<org.codehaus.groovy.ast.ClassNode: boolean isInterface()>();

        if $z2 == 0 goto label12;

        if r45 != null goto label12;

        if r44 == null goto label12;

        $r20 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode int_TYPE>;

        if r44 != $r20 goto label05;

        $r40 = new org.codehaus.groovy.ast.expr.ConstantExpression;

        $r41 = new java.lang.Integer;

        specialinvoke $r41.<java.lang.Integer: void <init>(int)>(0);

        specialinvoke $r40.<org.codehaus.groovy.ast.expr.ConstantExpression: void <init>(java.lang.Object)>($r41);

        r45 = $r40;

        goto label12;

     label05:
        $r21 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode long_TYPE>;

        if r44 != $r21 goto label06;

        $r38 = new org.codehaus.groovy.ast.expr.ConstantExpression;

        $r39 = new java.lang.Long;

        specialinvoke $r39.<java.lang.Long: void <init>(long)>(0L);

        specialinvoke $r38.<org.codehaus.groovy.ast.expr.ConstantExpression: void <init>(java.lang.Object)>($r39);

        r45 = $r38;

        goto label12;

     label06:
        $r22 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode double_TYPE>;

        if r44 != $r22 goto label07;

        $r36 = new org.codehaus.groovy.ast.expr.ConstantExpression;

        $r37 = new java.lang.Double;

        specialinvoke $r37.<java.lang.Double: void <init>(double)>(0.0);

        specialinvoke $r36.<org.codehaus.groovy.ast.expr.ConstantExpression: void <init>(java.lang.Object)>($r37);

        r45 = $r36;

        goto label12;

     label07:
        $r23 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode float_TYPE>;

        if r44 != $r23 goto label08;

        $r34 = new org.codehaus.groovy.ast.expr.ConstantExpression;

        $r35 = new java.lang.Float;

        specialinvoke $r35.<java.lang.Float: void <init>(float)>(0.0F);

        specialinvoke $r34.<org.codehaus.groovy.ast.expr.ConstantExpression: void <init>(java.lang.Object)>($r35);

        r45 = $r34;

        goto label12;

     label08:
        $r24 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode boolean_TYPE>;

        if r44 != $r24 goto label09;

        r45 = <org.codehaus.groovy.ast.expr.ConstantExpression: org.codehaus.groovy.ast.expr.ConstantExpression FALSE>;

        goto label12;

     label09:
        $r25 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode short_TYPE>;

        if r44 != $r25 goto label10;

        $r32 = new org.codehaus.groovy.ast.expr.ConstantExpression;

        $r33 = new java.lang.Short;

        specialinvoke $r33.<java.lang.Short: void <init>(short)>(0);

        specialinvoke $r32.<org.codehaus.groovy.ast.expr.ConstantExpression: void <init>(java.lang.Object)>($r33);

        r45 = $r32;

        goto label12;

     label10:
        $r26 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode byte_TYPE>;

        if r44 != $r26 goto label11;

        $r30 = new org.codehaus.groovy.ast.expr.ConstantExpression;

        $r31 = new java.lang.Byte;

        specialinvoke $r31.<java.lang.Byte: void <init>(byte)>(0);

        specialinvoke $r30.<org.codehaus.groovy.ast.expr.ConstantExpression: void <init>(java.lang.Object)>($r31);

        r45 = $r30;

        goto label12;

     label11:
        $r27 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode char_TYPE>;

        if r44 != $r27 goto label12;

        $r28 = new org.codehaus.groovy.ast.expr.ConstantExpression;

        $r29 = new java.lang.Character;

        specialinvoke $r29.<java.lang.Character: void <init>(char)>(0);

        specialinvoke $r28.<org.codehaus.groovy.ast.expr.ConstantExpression: void <init>(java.lang.Object)>($r29);

        r45 = $r28;

     label12:
        $r46 = new org.codehaus.groovy.ast.FieldNode;

        $r47 = r3.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.ClassNode classNode>;

        specialinvoke $r46.<org.codehaus.groovy.ast.FieldNode: void <init>(java.lang.String,int,org.codehaus.groovy.ast.ClassNode,org.codehaus.groovy.ast.ClassNode,org.codehaus.groovy.ast.expr.Expression)>($r5, i3, r44, $r47, r45);

        r48 = $r46;

        virtualinvoke $r46.<org.codehaus.groovy.ast.FieldNode: void addAnnotations(java.util.List)>($r0);

        virtualinvoke r3.<org.codehaus.groovy.antlr.AntlrParserPlugin: void configureAST(org.codehaus.groovy.ast.ASTNode,groovyjarjarantlr.collections.AST)>($r46, r1);

        $z7 = virtualinvoke r3.<org.codehaus.groovy.antlr.AntlrParserPlugin: boolean hasVisibility(int)>(i3);

        if $z7 != 0 goto label15;

        b4 = 0;

        $z4 = virtualinvoke r3.<org.codehaus.groovy.antlr.AntlrParserPlugin: boolean hasVisibility(int)>(i3);

        if $z4 != 0 goto label13;

        i3 = i3 | 1;

        b4 = 2;

     label13:
        $i0 = i3 & 216;

        $i1 = b4 | $i0;

        virtualinvoke $r46.<org.codehaus.groovy.ast.FieldNode: void setModifiers(int)>($i1);

        virtualinvoke $r46.<org.codehaus.groovy.ast.FieldNode: void setSynthetic(boolean)>(1);

        $r14 = r3.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.ClassNode classNode>;

        $r15 = virtualinvoke $r46.<org.codehaus.groovy.ast.FieldNode: java.lang.String getName()>();

        $r16 = virtualinvoke $r14.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.FieldNode getDeclaredField(java.lang.String)>($r15);

        if $r16 == null goto label14;

        $r17 = r3.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.ClassNode classNode>;

        $z5 = virtualinvoke $r17.<org.codehaus.groovy.ast.ClassNode: boolean hasProperty(java.lang.String)>($r5);

        if $z5 != 0 goto label14;

        r48 = $r16;

        $r18 = r3.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.ClassNode classNode>;

        $r19 = virtualinvoke $r18.<org.codehaus.groovy.ast.ClassNode: java.util.List getFields()>();

        interfaceinvoke $r19.<java.util.List: boolean remove(java.lang.Object)>($r16);

     label14:
        $r49 = new org.codehaus.groovy.ast.PropertyNode;

        specialinvoke $r49.<org.codehaus.groovy.ast.PropertyNode: void <init>(org.codehaus.groovy.ast.FieldNode,int,org.codehaus.groovy.ast.stmt.Statement,org.codehaus.groovy.ast.stmt.Statement)>(r48, i3, null, null);

        virtualinvoke r3.<org.codehaus.groovy.antlr.AntlrParserPlugin: void configureAST(org.codehaus.groovy.ast.ASTNode,groovyjarjarantlr.collections.AST)>($r49, r1);

        $r50 = r3.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.ClassNode classNode>;

        virtualinvoke $r50.<org.codehaus.groovy.ast.ClassNode: void addProperty(org.codehaus.groovy.ast.PropertyNode)>($r49);

        goto label17;

     label15:
        virtualinvoke $r46.<org.codehaus.groovy.ast.FieldNode: void setModifiers(int)>(i3);

        $r8 = r3.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.ClassNode classNode>;

        $r9 = virtualinvoke $r8.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.PropertyNode getProperty(java.lang.String)>($r5);

        if $r9 == null goto label16;

        $r10 = virtualinvoke $r9.<org.codehaus.groovy.ast.PropertyNode: org.codehaus.groovy.ast.FieldNode getField()>();

        $z3 = virtualinvoke $r10.<org.codehaus.groovy.ast.FieldNode: boolean isSynthetic()>();

        if $z3 == 0 goto label16;

        $r11 = r3.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.ClassNode classNode>;

        $r12 = virtualinvoke $r11.<org.codehaus.groovy.ast.ClassNode: java.util.List getFields()>();

        $r13 = virtualinvoke $r9.<org.codehaus.groovy.ast.PropertyNode: org.codehaus.groovy.ast.FieldNode getField()>();

        interfaceinvoke $r12.<java.util.List: boolean remove(java.lang.Object)>($r13);

        virtualinvoke $r9.<org.codehaus.groovy.ast.PropertyNode: void setField(org.codehaus.groovy.ast.FieldNode)>($r46);

     label16:
        $r51 = r3.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.ClassNode classNode>;

        virtualinvoke $r51.<org.codehaus.groovy.ast.ClassNode: void addField(org.codehaus.groovy.ast.FieldNode)>($r46);

     label17:
        return;
    }

    protected org.codehaus.groovy.ast.ClassNode[] interfaces(groovyjarjarantlr.collections.AST)
    {
        org.codehaus.groovy.antlr.AntlrParserPlugin r2;
        org.codehaus.groovy.ast.ClassNode $r3;
        java.util.ArrayList $r0;
        int $i0;
        org.codehaus.groovy.ast.ClassNode[] r5;
        groovyjarjarantlr.collections.AST r1, r4;
        boolean $z0;

        r2 := @this: org.codehaus.groovy.antlr.AntlrParserPlugin;

        r1 := @parameter0: groovyjarjarantlr.collections.AST;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        r4 = interfaceinvoke r1.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getFirstChild()>();

     label1:
        if r4 == null goto label2;

        $r3 = virtualinvoke r2.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.ClassNode makeTypeWithArguments(groovyjarjarantlr.collections.AST)>(r4);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r3);

        r4 = interfaceinvoke r4.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getNextSibling()>();

        goto label1;

     label2:
        r5 = <org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode[] EMPTY_ARRAY>;

        $z0 = interfaceinvoke $r0.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label3;

        $i0 = interfaceinvoke $r0.<java.util.List: int size()>();

        r5 = newarray (org.codehaus.groovy.ast.ClassNode)[$i0];

        interfaceinvoke $r0.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>(r5);

     label3:
        return r5;
    }

    protected org.codehaus.groovy.ast.Parameter[] parameters(groovyjarjarantlr.collections.AST)
    {
        org.codehaus.groovy.antlr.AntlrParserPlugin r3;
        org.codehaus.groovy.ast.Parameter $r4;
        java.util.ArrayList $r2;
        org.codehaus.groovy.ast.Parameter[] r6, $r7;
        int $i0;
        groovyjarjarantlr.collections.AST r0, $r1, $r5, r8;
        boolean $z0;

        r3 := @this: org.codehaus.groovy.antlr.AntlrParserPlugin;

        r0 := @parameter0: groovyjarjarantlr.collections.AST;

        $r1 = interfaceinvoke r0.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getFirstChild()>();

        r8 = $r1;

        if $r1 != null goto label2;

        $z0 = staticinvoke <org.codehaus.groovy.antlr.AntlrParserPlugin: boolean isType(int,groovyjarjarantlr.collections.AST)>(50, r0);

        if $z0 == 0 goto label1;

        $r7 = <org.codehaus.groovy.ast.Parameter: org.codehaus.groovy.ast.Parameter[] EMPTY_ARRAY>;

        return $r7;

     label1:
        return null;

     label2:
        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

     label3:
        $r4 = virtualinvoke r3.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.Parameter parameter(groovyjarjarantlr.collections.AST)>(r8);

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r4);

        $r5 = interfaceinvoke r8.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getNextSibling()>();

        r8 = $r5;

        if $r5 != null goto label3;

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        r6 = newarray (org.codehaus.groovy.ast.Parameter)[$i0];

        interfaceinvoke $r2.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>(r6);

        return r6;
    }

    protected org.codehaus.groovy.ast.Parameter parameter(groovyjarjarantlr.collections.AST)
    {
        java.util.ArrayList $r0;
        java.lang.StringBuffer $r9, $r10, $r11, $r12, $r14, $r15;
        org.codehaus.groovy.ast.expr.Expression $r6;
        java.lang.String $r13, $r16, $r20;
        boolean $z0, $z1, $z2, $z3;
        org.codehaus.groovy.antlr.AntlrParserPlugin r3;
        org.codehaus.groovy.ast.Parameter $r4, $r7, r23;
        org.codehaus.groovy.ast.expr.VariableExpression $r22;
        org.codehaus.groovy.ast.ClassNode $r17, r19;
        org.codehaus.groovy.antlr.ASTRuntimeException $r8;
        groovyjarjarantlr.collections.AST r1, $r2, $r5, r18, $r21;

        r3 := @this: org.codehaus.groovy.antlr.AntlrParserPlugin;

        r1 := @parameter0: groovyjarjarantlr.collections.AST;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $z0 = staticinvoke <org.codehaus.groovy.antlr.AntlrParserPlugin: boolean isType(int,groovyjarjarantlr.collections.AST)>(46, r1);

        $r2 = interfaceinvoke r1.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getFirstChild()>();

        r18 = $r2;

        $z1 = staticinvoke <org.codehaus.groovy.antlr.AntlrParserPlugin: boolean isType(int,groovyjarjarantlr.collections.AST)>(5, $r2);

        if $z1 == 0 goto label1;

        virtualinvoke r3.<org.codehaus.groovy.antlr.AntlrParserPlugin: int modifiers(groovyjarjarantlr.collections.AST,java.util.List,int)>($r2, $r0, 0);

        r18 = interfaceinvoke $r2.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getNextSibling()>();

     label1:
        r19 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode DYNAMIC_TYPE>;

        $z2 = staticinvoke <org.codehaus.groovy.antlr.AntlrParserPlugin: boolean isType(int,groovyjarjarantlr.collections.AST)>(12, r18);

        if $z2 == 0 goto label3;

        $r17 = virtualinvoke r3.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.ClassNode makeTypeWithArguments(groovyjarjarantlr.collections.AST)>(r18);

        r19 = $r17;

        if $z0 == 0 goto label2;

        r19 = virtualinvoke $r17.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode makeArray()>();

     label2:
        r18 = interfaceinvoke r18.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getNextSibling()>();

     label3:
        $r20 = virtualinvoke r3.<org.codehaus.groovy.antlr.AntlrParserPlugin: java.lang.String identifier(groovyjarjarantlr.collections.AST)>(r18);

        $r21 = interfaceinvoke r18.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getNextSibling()>();

        $r22 = new org.codehaus.groovy.ast.expr.VariableExpression;

        specialinvoke $r22.<org.codehaus.groovy.ast.expr.VariableExpression: void <init>(java.lang.String,org.codehaus.groovy.ast.ClassNode)>($r20, r19);

        virtualinvoke r3.<org.codehaus.groovy.antlr.AntlrParserPlugin: void configureAST(org.codehaus.groovy.ast.ASTNode,groovyjarjarantlr.collections.AST)>($r22, r1);

        if $r21 == null goto label5;

        virtualinvoke r3.<org.codehaus.groovy.antlr.AntlrParserPlugin: void assertNodeType(int,groovyjarjarantlr.collections.AST)>(120, $r21);

        $r5 = interfaceinvoke $r21.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getFirstChild()>();

        $r6 = virtualinvoke r3.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.expr.Expression expression(groovyjarjarantlr.collections.AST)>($r5);

        $z3 = specialinvoke r3.<org.codehaus.groovy.antlr.AntlrParserPlugin: boolean isAnInterface()>();

        if $z3 == 0 goto label4;

        $r8 = new org.codehaus.groovy.antlr.ASTRuntimeException;

        $r9 = new java.lang.StringBuffer;

        specialinvoke $r9.<java.lang.StringBuffer: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Cannot specify default value for method parameter \'");

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r20);

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" = ");

        $r13 = virtualinvoke $r6.<org.codehaus.groovy.ast.expr.Expression: java.lang.String getText()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' inside an interface");

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r8.<org.codehaus.groovy.antlr.ASTRuntimeException: void <init>(groovyjarjarantlr.collections.AST,java.lang.String)>($r21, $r16);

        throw $r8;

     label4:
        $r7 = new org.codehaus.groovy.ast.Parameter;

        specialinvoke $r7.<org.codehaus.groovy.ast.Parameter: void <init>(org.codehaus.groovy.ast.ClassNode,java.lang.String,org.codehaus.groovy.ast.expr.Expression)>(r19, $r20, $r6);

        r23 = $r7;

        goto label6;

     label5:
        $r4 = new org.codehaus.groovy.ast.Parameter;

        specialinvoke $r4.<org.codehaus.groovy.ast.Parameter: void <init>(org.codehaus.groovy.ast.ClassNode,java.lang.String)>(r19, $r20);

        r23 = $r4;

     label6:
        virtualinvoke r3.<org.codehaus.groovy.antlr.AntlrParserPlugin: void configureAST(org.codehaus.groovy.ast.ASTNode,groovyjarjarantlr.collections.AST)>(r23, r1);

        virtualinvoke r23.<org.codehaus.groovy.ast.Parameter: void addAnnotations(java.util.List)>($r0);

        return r23;
    }

    protected int modifiers(groovyjarjarantlr.collections.AST, java.util.List, int)
    {
        org.codehaus.groovy.antlr.AntlrParserPlugin r0;
        org.codehaus.groovy.ast.AnnotationNode $r3;
        java.util.List r2;
        int i0, $i1, i2;
        groovyjarjarantlr.collections.AST r1, r4;
        boolean z0;

        r0 := @this: org.codehaus.groovy.antlr.AntlrParserPlugin;

        r1 := @parameter0: groovyjarjarantlr.collections.AST;

        r2 := @parameter1: java.util.List;

        i0 := @parameter2: int;

        virtualinvoke r0.<org.codehaus.groovy.antlr.AntlrParserPlugin: void assertNodeType(int,groovyjarjarantlr.collections.AST)>(5, r1);

        z0 = 0;

        i2 = 0;

        r4 = interfaceinvoke r1.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getFirstChild()>();

     label01:
        if r4 == null goto label17;

        $i1 = interfaceinvoke r4.<groovyjarjarantlr.collections.AST: int getType()>();

        lookupswitch($i1)
        {
            case 37: goto label08;
            case 38: goto label07;
            case 42: goto label11;
            case 59: goto label02;
            case 65: goto label03;
            case 80: goto label10;
            case 111: goto label04;
            case 112: goto label06;
            case 113: goto label05;
            case 114: goto label13;
            case 115: goto label09;
            case 117: goto label12;
            case 118: goto label14;
            default: goto label15;
        };

     label02:
        goto label16;

     label03:
        $r3 = virtualinvoke r0.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.AnnotationNode 'annotation'(groovyjarjarantlr.collections.AST)>(r4);

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r3);

        goto label16;

     label04:
        i2 = virtualinvoke r0.<org.codehaus.groovy.antlr.AntlrParserPlugin: int setModifierBit(groovyjarjarantlr.collections.AST,int,int)>(r4, i2, 2);

        z0 = virtualinvoke r0.<org.codehaus.groovy.antlr.AntlrParserPlugin: boolean setAccessTrue(groovyjarjarantlr.collections.AST,boolean)>(r4, z0);

        goto label16;

     label05:
        i2 = virtualinvoke r0.<org.codehaus.groovy.antlr.AntlrParserPlugin: int setModifierBit(groovyjarjarantlr.collections.AST,int,int)>(r4, i2, 4);

        z0 = virtualinvoke r0.<org.codehaus.groovy.antlr.AntlrParserPlugin: boolean setAccessTrue(groovyjarjarantlr.collections.AST,boolean)>(r4, z0);

        goto label16;

     label06:
        i2 = virtualinvoke r0.<org.codehaus.groovy.antlr.AntlrParserPlugin: int setModifierBit(groovyjarjarantlr.collections.AST,int,int)>(r4, i2, 1);

        z0 = virtualinvoke r0.<org.codehaus.groovy.antlr.AntlrParserPlugin: boolean setAccessTrue(groovyjarjarantlr.collections.AST,boolean)>(r4, z0);

        goto label16;

     label07:
        i2 = virtualinvoke r0.<org.codehaus.groovy.antlr.AntlrParserPlugin: int setModifierBit(groovyjarjarantlr.collections.AST,int,int)>(r4, i2, 1024);

        goto label16;

     label08:
        i2 = virtualinvoke r0.<org.codehaus.groovy.antlr.AntlrParserPlugin: int setModifierBit(groovyjarjarantlr.collections.AST,int,int)>(r4, i2, 16);

        goto label16;

     label09:
        i2 = virtualinvoke r0.<org.codehaus.groovy.antlr.AntlrParserPlugin: int setModifierBit(groovyjarjarantlr.collections.AST,int,int)>(r4, i2, 256);

        goto label16;

     label10:
        i2 = virtualinvoke r0.<org.codehaus.groovy.antlr.AntlrParserPlugin: int setModifierBit(groovyjarjarantlr.collections.AST,int,int)>(r4, i2, 8);

        goto label16;

     label11:
        i2 = virtualinvoke r0.<org.codehaus.groovy.antlr.AntlrParserPlugin: int setModifierBit(groovyjarjarantlr.collections.AST,int,int)>(r4, i2, 2048);

        goto label16;

     label12:
        i2 = virtualinvoke r0.<org.codehaus.groovy.antlr.AntlrParserPlugin: int setModifierBit(groovyjarjarantlr.collections.AST,int,int)>(r4, i2, 32);

        goto label16;

     label13:
        i2 = virtualinvoke r0.<org.codehaus.groovy.antlr.AntlrParserPlugin: int setModifierBit(groovyjarjarantlr.collections.AST,int,int)>(r4, i2, 128);

        goto label16;

     label14:
        i2 = virtualinvoke r0.<org.codehaus.groovy.antlr.AntlrParserPlugin: int setModifierBit(groovyjarjarantlr.collections.AST,int,int)>(r4, i2, 64);

        goto label16;

     label15:
        virtualinvoke r0.<org.codehaus.groovy.antlr.AntlrParserPlugin: void unknownAST(groovyjarjarantlr.collections.AST)>(r4);

     label16:
        r4 = interfaceinvoke r4.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getNextSibling()>();

        goto label01;

     label17:
        if z0 != 0 goto label18;

        i2 = i2 | i0;

     label18:
        return i2;
    }

    protected boolean setAccessTrue(groovyjarjarantlr.collections.AST, boolean)
    {
        org.codehaus.groovy.antlr.AntlrParserPlugin r8;
        org.codehaus.groovy.antlr.ASTRuntimeException $r0;
        java.lang.StringBuffer $r2, $r3, $r5, $r6;
        java.lang.String $r4, $r7;
        groovyjarjarantlr.collections.AST r1;
        boolean z0;

        r8 := @this: org.codehaus.groovy.antlr.AntlrParserPlugin;

        r1 := @parameter0: groovyjarjarantlr.collections.AST;

        z0 := @parameter1: boolean;

        if z0 != 0 goto label1;

        return 1;

     label1:
        $r0 = new org.codehaus.groovy.antlr.ASTRuntimeException;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Cannot specify modifier: ");

        $r4 = interfaceinvoke r1.<groovyjarjarantlr.collections.AST: java.lang.String getText()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" when access scope has already been defined");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r0.<org.codehaus.groovy.antlr.ASTRuntimeException: void <init>(groovyjarjarantlr.collections.AST,java.lang.String)>(r1, $r7);

        throw $r0;
    }

    protected int setModifierBit(groovyjarjarantlr.collections.AST, int, int)
    {
        org.codehaus.groovy.antlr.AntlrParserPlugin r7;
        org.codehaus.groovy.antlr.ASTRuntimeException $r0;
        java.lang.StringBuffer $r2, $r3, $r5;
        int i0, i1, $i2, $i3;
        java.lang.String $r4, $r6;
        groovyjarjarantlr.collections.AST r1;

        r7 := @this: org.codehaus.groovy.antlr.AntlrParserPlugin;

        r1 := @parameter0: groovyjarjarantlr.collections.AST;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i2 = i0 & i1;

        if $i2 == 0 goto label1;

        $r0 = new org.codehaus.groovy.antlr.ASTRuntimeException;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Cannot repeat modifier: ");

        $r4 = interfaceinvoke r1.<groovyjarjarantlr.collections.AST: java.lang.String getText()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r0.<org.codehaus.groovy.antlr.ASTRuntimeException: void <init>(groovyjarjarantlr.collections.AST,java.lang.String)>(r1, $r6);

        throw $r0;

     label1:
        $i3 = i0 | i1;

        return $i3;
    }

    protected org.codehaus.groovy.ast.AnnotationNode 'annotation'(groovyjarjarantlr.collections.AST)
    {
        org.codehaus.groovy.ast.AnnotationNode $r3;
        java.lang.StringBuffer $r13, $r14, $r15, $r16;
        java.lang.String $r2, $r8, $r17;
        org.codehaus.groovy.ast.expr.Expression $r10, $r11;
        boolean $z0;
        org.codehaus.groovy.antlr.AntlrParserPlugin r5;
        org.codehaus.groovy.ast.ClassNode $r4;
        org.codehaus.groovy.antlr.ASTRuntimeException $r12;
        groovyjarjarantlr.collections.AST r0, $r1, $r6, $r7, $r9, r18;

        r5 := @this: org.codehaus.groovy.antlr.AntlrParserPlugin;

        r0 := @parameter0: groovyjarjarantlr.collections.AST;

        $r1 = interfaceinvoke r0.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getFirstChild()>();

        r18 = $r1;

        $r2 = staticinvoke <org.codehaus.groovy.antlr.AntlrParserPlugin: java.lang.String qualifiedName(groovyjarjarantlr.collections.AST)>($r1);

        $r3 = new org.codehaus.groovy.ast.AnnotationNode;

        $r4 = staticinvoke <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode make(java.lang.String)>($r2);

        specialinvoke $r3.<org.codehaus.groovy.ast.AnnotationNode: void <init>(org.codehaus.groovy.ast.ClassNode)>($r4);

        virtualinvoke r5.<org.codehaus.groovy.antlr.AntlrParserPlugin: void configureAST(org.codehaus.groovy.ast.ASTNode,groovyjarjarantlr.collections.AST)>($r3, $r1);

     label1:
        $r6 = interfaceinvoke r18.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getNextSibling()>();

        r18 = $r6;

        $z0 = staticinvoke <org.codehaus.groovy.antlr.AntlrParserPlugin: boolean isType(int,groovyjarjarantlr.collections.AST)>(66, $r6);

        if $z0 == 0 goto label3;

        $r7 = interfaceinvoke $r6.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getFirstChild()>();

        $r8 = virtualinvoke r5.<org.codehaus.groovy.antlr.AntlrParserPlugin: java.lang.String identifier(groovyjarjarantlr.collections.AST)>($r7);

        $r9 = interfaceinvoke $r7.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getNextSibling()>();

        $r10 = virtualinvoke r5.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.expr.Expression expression(groovyjarjarantlr.collections.AST)>($r9);

        $r11 = virtualinvoke $r3.<org.codehaus.groovy.ast.AnnotationNode: org.codehaus.groovy.ast.expr.Expression getMember(java.lang.String)>($r8);

        if $r11 == null goto label2;

        $r12 = new org.codehaus.groovy.antlr.ASTRuntimeException;

        $r13 = new java.lang.StringBuffer;

        specialinvoke $r13.<java.lang.StringBuffer: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Annotation member \'");

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' has already been associated with a value");

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r12.<org.codehaus.groovy.antlr.ASTRuntimeException: void <init>(groovyjarjarantlr.collections.AST,java.lang.String)>($r7, $r17);

        throw $r12;

     label2:
        virtualinvoke $r3.<org.codehaus.groovy.ast.AnnotationNode: void setMember(java.lang.String,org.codehaus.groovy.ast.expr.Expression)>($r8, $r10);

        goto label1;

     label3:
        return $r3;
    }

    protected org.codehaus.groovy.ast.stmt.Statement statement(groovyjarjarantlr.collections.AST)
    {
        org.codehaus.groovy.ast.stmt.Statement r4;
        org.codehaus.groovy.antlr.AntlrParserPlugin r1;
        org.codehaus.groovy.ast.stmt.ExpressionStatement $r2;
        int $i0;
        org.codehaus.groovy.ast.expr.Expression $r3;
        groovyjarjarantlr.collections.AST r0;

        r1 := @this: org.codehaus.groovy.antlr.AntlrParserPlugin;

        r0 := @parameter0: groovyjarjarantlr.collections.AST;

        $i0 = interfaceinvoke r0.<groovyjarjarantlr.collections.AST: int getType()>();

        lookupswitch($i0)
        {
            case 7: goto label01;
            case 9: goto label03;
            case 21: goto label04;
            case 26: goto label02;
            case 117: goto label11;
            case 133: goto label08;
            case 135: goto label15;
            case 136: goto label12;
            case 137: goto label09;
            case 139: goto label10;
            case 140: goto label06;
            case 141: goto label07;
            case 142: goto label14;
            case 143: goto label05;
            case 147: goto label13;
            case 148: goto label01;
            default: goto label16;
        };

     label01:
        r4 = virtualinvoke r1.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.stmt.Statement statementList(groovyjarjarantlr.collections.AST)>(r0);

        goto label17;

     label02:
        r4 = virtualinvoke r1.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.stmt.Statement methodCall(groovyjarjarantlr.collections.AST)>(r0);

        goto label17;

     label03:
        r4 = virtualinvoke r1.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.stmt.Statement variableDef(groovyjarjarantlr.collections.AST)>(r0);

        goto label17;

     label04:
        r4 = virtualinvoke r1.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.stmt.Statement labelledStatement(groovyjarjarantlr.collections.AST)>(r0);

        goto label17;

     label05:
        r4 = virtualinvoke r1.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.stmt.Statement assertStatement(groovyjarjarantlr.collections.AST)>(r0);

        goto label17;

     label06:
        r4 = virtualinvoke r1.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.stmt.Statement breakStatement(groovyjarjarantlr.collections.AST)>(r0);

        goto label17;

     label07:
        r4 = virtualinvoke r1.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.stmt.Statement continueStatement(groovyjarjarantlr.collections.AST)>(r0);

        goto label17;

     label08:
        r4 = virtualinvoke r1.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.stmt.Statement ifStatement(groovyjarjarantlr.collections.AST)>(r0);

        goto label17;

     label09:
        r4 = virtualinvoke r1.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.stmt.Statement forStatement(groovyjarjarantlr.collections.AST)>(r0);

        goto label17;

     label10:
        r4 = virtualinvoke r1.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.stmt.Statement returnStatement(groovyjarjarantlr.collections.AST)>(r0);

        goto label17;

     label11:
        r4 = virtualinvoke r1.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.stmt.Statement synchronizedStatement(groovyjarjarantlr.collections.AST)>(r0);

        goto label17;

     label12:
        r4 = virtualinvoke r1.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.stmt.Statement switchStatement(groovyjarjarantlr.collections.AST)>(r0);

        goto label17;

     label13:
        r4 = virtualinvoke r1.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.stmt.Statement tryStatement(groovyjarjarantlr.collections.AST)>(r0);

        goto label17;

     label14:
        r4 = virtualinvoke r1.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.stmt.Statement throwStatement(groovyjarjarantlr.collections.AST)>(r0);

        goto label17;

     label15:
        r4 = virtualinvoke r1.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.stmt.Statement whileStatement(groovyjarjarantlr.collections.AST)>(r0);

        goto label17;

     label16:
        $r2 = new org.codehaus.groovy.ast.stmt.ExpressionStatement;

        $r3 = virtualinvoke r1.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.expr.Expression expression(groovyjarjarantlr.collections.AST)>(r0);

        specialinvoke $r2.<org.codehaus.groovy.ast.stmt.ExpressionStatement: void <init>(org.codehaus.groovy.ast.expr.Expression)>($r3);

        r4 = $r2;

     label17:
        if r4 == null goto label18;

        virtualinvoke r1.<org.codehaus.groovy.antlr.AntlrParserPlugin: void configureAST(org.codehaus.groovy.ast.ASTNode,groovyjarjarantlr.collections.AST)>(r4, r0);

     label18:
        return r4;
    }

    protected org.codehaus.groovy.ast.stmt.Statement statementList(groovyjarjarantlr.collections.AST)
    {
        org.codehaus.groovy.ast.stmt.Statement $r3;
        org.codehaus.groovy.antlr.AntlrParserPlugin r0;
        groovyjarjarantlr.collections.AST r1, $r2;

        r0 := @this: org.codehaus.groovy.antlr.AntlrParserPlugin;

        r1 := @parameter0: groovyjarjarantlr.collections.AST;

        $r2 = interfaceinvoke r1.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getFirstChild()>();

        $r3 = virtualinvoke r0.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.stmt.Statement statementListNoChild(groovyjarjarantlr.collections.AST,groovyjarjarantlr.collections.AST)>($r2, r1);

        return $r3;
    }

    protected org.codehaus.groovy.ast.stmt.Statement statementListNoChild(groovyjarjarantlr.collections.AST, groovyjarjarantlr.collections.AST)
    {
        org.codehaus.groovy.ast.stmt.Statement $r3;
        org.codehaus.groovy.antlr.AntlrParserPlugin r1;
        org.codehaus.groovy.ast.stmt.BlockStatement $r0;
        groovyjarjarantlr.collections.AST r2, r4;

        r1 := @this: org.codehaus.groovy.antlr.AntlrParserPlugin;

        r4 := @parameter0: groovyjarjarantlr.collections.AST;

        r2 := @parameter1: groovyjarjarantlr.collections.AST;

        $r0 = new org.codehaus.groovy.ast.stmt.BlockStatement;

        specialinvoke $r0.<org.codehaus.groovy.ast.stmt.BlockStatement: void <init>()>();

        if r4 == null goto label1;

        virtualinvoke r1.<org.codehaus.groovy.antlr.AntlrParserPlugin: void configureAST(org.codehaus.groovy.ast.ASTNode,groovyjarjarantlr.collections.AST)>($r0, r4);

        goto label2;

     label1:
        virtualinvoke r1.<org.codehaus.groovy.antlr.AntlrParserPlugin: void configureAST(org.codehaus.groovy.ast.ASTNode,groovyjarjarantlr.collections.AST)>($r0, r2);

     label2:
        if r4 == null goto label3;

        $r3 = virtualinvoke r1.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.stmt.Statement statement(groovyjarjarantlr.collections.AST)>(r4);

        virtualinvoke $r0.<org.codehaus.groovy.ast.stmt.BlockStatement: void addStatement(org.codehaus.groovy.ast.stmt.Statement)>($r3);

        r4 = interfaceinvoke r4.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getNextSibling()>();

        goto label2;

     label3:
        return $r0;
    }

    protected org.codehaus.groovy.ast.stmt.Statement assertStatement(groovyjarjarantlr.collections.AST)
    {
        org.codehaus.groovy.ast.expr.BooleanExpression $r3;
        org.codehaus.groovy.antlr.AntlrParserPlugin r2;
        org.codehaus.groovy.ast.stmt.AssertStatement $r5;
        org.codehaus.groovy.ast.expr.Expression r6;
        groovyjarjarantlr.collections.AST r0, $r1, $r4;

        r2 := @this: org.codehaus.groovy.antlr.AntlrParserPlugin;

        r0 := @parameter0: groovyjarjarantlr.collections.AST;

        $r1 = interfaceinvoke r0.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getFirstChild()>();

        $r3 = virtualinvoke r2.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.expr.BooleanExpression booleanExpression(groovyjarjarantlr.collections.AST)>($r1);

        $r4 = interfaceinvoke $r1.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getNextSibling()>();

        if $r4 == null goto label1;

        r6 = virtualinvoke r2.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.expr.Expression expression(groovyjarjarantlr.collections.AST)>($r4);

        goto label2;

     label1:
        r6 = <org.codehaus.groovy.ast.expr.ConstantExpression: org.codehaus.groovy.ast.expr.ConstantExpression NULL>;

     label2:
        $r5 = new org.codehaus.groovy.ast.stmt.AssertStatement;

        specialinvoke $r5.<org.codehaus.groovy.ast.stmt.AssertStatement: void <init>(org.codehaus.groovy.ast.expr.BooleanExpression,org.codehaus.groovy.ast.expr.Expression)>($r3, r6);

        virtualinvoke r2.<org.codehaus.groovy.antlr.AntlrParserPlugin: void configureAST(org.codehaus.groovy.ast.ASTNode,groovyjarjarantlr.collections.AST)>($r5, r0);

        return $r5;
    }

    protected org.codehaus.groovy.ast.stmt.Statement breakStatement(groovyjarjarantlr.collections.AST)
    {
        org.codehaus.groovy.antlr.AntlrParserPlugin r1;
        org.codehaus.groovy.ast.stmt.BreakStatement $r0;
        java.lang.String $r3;
        groovyjarjarantlr.collections.AST r2;

        r1 := @this: org.codehaus.groovy.antlr.AntlrParserPlugin;

        r2 := @parameter0: groovyjarjarantlr.collections.AST;

        $r0 = new org.codehaus.groovy.ast.stmt.BreakStatement;

        $r3 = virtualinvoke r1.<org.codehaus.groovy.antlr.AntlrParserPlugin: java.lang.String label(groovyjarjarantlr.collections.AST)>(r2);

        specialinvoke $r0.<org.codehaus.groovy.ast.stmt.BreakStatement: void <init>(java.lang.String)>($r3);

        virtualinvoke r1.<org.codehaus.groovy.antlr.AntlrParserPlugin: void configureAST(org.codehaus.groovy.ast.ASTNode,groovyjarjarantlr.collections.AST)>($r0, r2);

        return $r0;
    }

    protected org.codehaus.groovy.ast.stmt.Statement continueStatement(groovyjarjarantlr.collections.AST)
    {
        org.codehaus.groovy.antlr.AntlrParserPlugin r1;
        java.lang.String $r3;
        org.codehaus.groovy.ast.stmt.ContinueStatement $r0;
        groovyjarjarantlr.collections.AST r2;

        r1 := @this: org.codehaus.groovy.antlr.AntlrParserPlugin;

        r2 := @parameter0: groovyjarjarantlr.collections.AST;

        $r0 = new org.codehaus.groovy.ast.stmt.ContinueStatement;

        $r3 = virtualinvoke r1.<org.codehaus.groovy.antlr.AntlrParserPlugin: java.lang.String label(groovyjarjarantlr.collections.AST)>(r2);

        specialinvoke $r0.<org.codehaus.groovy.ast.stmt.ContinueStatement: void <init>(java.lang.String)>($r3);

        virtualinvoke r1.<org.codehaus.groovy.antlr.AntlrParserPlugin: void configureAST(org.codehaus.groovy.ast.ASTNode,groovyjarjarantlr.collections.AST)>($r0, r2);

        return $r0;
    }

    protected org.codehaus.groovy.ast.stmt.Statement forStatement(groovyjarjarantlr.collections.AST)
    {
        boolean $z0, $z1, $z2, $z3;
        org.codehaus.groovy.ast.stmt.ForStatement $r30;
        org.codehaus.groovy.antlr.AntlrParserPlugin r4;
        org.codehaus.groovy.ast.expr.ClosureListExpression $r9;
        java.util.List $r10;
        groovyjarjarantlr.collections.AST r0, $r1, $r2, $r3, $r6, r18, r20, $r23;
        org.codehaus.groovy.ast.stmt.Statement r24;
        java.util.ArrayList $r27;
        java.lang.StringBuffer $r13, $r14, $r25;
        int $i0, $i1, $i2, $i4;
        java.lang.String $r15, $r21;
        org.codehaus.groovy.ast.expr.Expression r16;
        org.codehaus.groovy.ast.Parameter r17, $r29;
        org.codehaus.groovy.ast.ClassNode r19;
        org.codehaus.groovy.antlr.ASTRuntimeException $r26, $r28;

        r4 := @this: org.codehaus.groovy.antlr.AntlrParserPlugin;

        r0 := @parameter0: groovyjarjarantlr.collections.AST;

        $r1 = interfaceinvoke r0.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getFirstChild()>();

        $z0 = staticinvoke <org.codehaus.groovy.antlr.AntlrParserPlugin: boolean isType(int,groovyjarjarantlr.collections.AST)>(76, $r1);

        if $z0 == 0 goto label2;

        $r9 = specialinvoke r4.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.expr.ClosureListExpression closureListExpression(groovyjarjarantlr.collections.AST)>($r1);

        $r10 = virtualinvoke $r9.<org.codehaus.groovy.ast.expr.ClosureListExpression: java.util.List getExpressions()>();

        $i2 = interfaceinvoke $r10.<java.util.List: int size()>();

        if $i2 == 3 goto label1;

        $r26 = new org.codehaus.groovy.antlr.ASTRuntimeException;

        $r25 = new java.lang.StringBuffer;

        specialinvoke $r25.<java.lang.StringBuffer: void <init>()>();

        $r13 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("3 expressions are required for the classic for loop, you gave ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i2);

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r26.<org.codehaus.groovy.antlr.ASTRuntimeException: void <init>(groovyjarjarantlr.collections.AST,java.lang.String)>($r1, $r15);

        throw $r26;

     label1:
        r16 = $r9;

        r17 = <org.codehaus.groovy.ast.stmt.ForStatement: org.codehaus.groovy.ast.Parameter FOR_LOOP_DUMMY>;

        goto label6;

     label2:
        $r2 = interfaceinvoke $r1.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getFirstChild()>();

        r18 = $r2;

        $r3 = interfaceinvoke $r2.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getNextSibling()>();

        r19 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode OBJECT_TYPE>;

        $z1 = staticinvoke <org.codehaus.groovy.antlr.AntlrParserPlugin: boolean isType(int,groovyjarjarantlr.collections.AST)>(9, $r2);

        if $z1 == 0 goto label5;

        $r6 = interfaceinvoke $r2.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getFirstChild()>();

        r20 = $r6;

        $z2 = staticinvoke <org.codehaus.groovy.antlr.AntlrParserPlugin: boolean isType(int,groovyjarjarantlr.collections.AST)>(5, $r6);

        if $z2 == 0 goto label4;

        $r27 = new java.util.ArrayList;

        specialinvoke $r27.<java.util.ArrayList: void <init>()>();

        $i0 = virtualinvoke r4.<org.codehaus.groovy.antlr.AntlrParserPlugin: int modifiers(groovyjarjarantlr.collections.AST,java.util.List,int)>($r6, $r27, 0);

        $i4 = (int) -17;

        $i1 = $i0 & $i4;

        if $i1 == 0 goto label3;

        $r28 = new org.codehaus.groovy.antlr.ASTRuntimeException;

        specialinvoke $r28.<org.codehaus.groovy.antlr.ASTRuntimeException: void <init>(groovyjarjarantlr.collections.AST,java.lang.String)>($r6, "Only the \'final\' modifier is allowed in front of the for loop variable.");

        throw $r28;

     label3:
        r20 = interfaceinvoke $r6.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getNextSibling()>();

     label4:
        r19 = virtualinvoke r4.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.ClassNode makeTypeWithArguments(groovyjarjarantlr.collections.AST)>(r20);

        r18 = interfaceinvoke r20.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getNextSibling()>();

     label5:
        $r21 = virtualinvoke r4.<org.codehaus.groovy.antlr.AntlrParserPlugin: java.lang.String identifier(groovyjarjarantlr.collections.AST)>(r18);

        r16 = virtualinvoke r4.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.expr.Expression expression(groovyjarjarantlr.collections.AST)>($r3);

        $r29 = new org.codehaus.groovy.ast.Parameter;

        specialinvoke $r29.<org.codehaus.groovy.ast.Parameter: void <init>(org.codehaus.groovy.ast.ClassNode,java.lang.String)>(r19, $r21);

        r17 = $r29;

        virtualinvoke r4.<org.codehaus.groovy.antlr.AntlrParserPlugin: void configureAST(org.codehaus.groovy.ast.ASTNode,groovyjarjarantlr.collections.AST)>($r29, r18);

     label6:
        $r23 = interfaceinvoke $r1.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getNextSibling()>();

        $z3 = staticinvoke <org.codehaus.groovy.antlr.AntlrParserPlugin: boolean isType(int,groovyjarjarantlr.collections.AST)>(124, $r23);

        if $z3 == 0 goto label7;

        r24 = <org.codehaus.groovy.ast.stmt.EmptyStatement: org.codehaus.groovy.ast.stmt.EmptyStatement INSTANCE>;

        goto label8;

     label7:
        r24 = virtualinvoke r4.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.stmt.Statement statement(groovyjarjarantlr.collections.AST)>($r23);

     label8:
        $r30 = new org.codehaus.groovy.ast.stmt.ForStatement;

        specialinvoke $r30.<org.codehaus.groovy.ast.stmt.ForStatement: void <init>(org.codehaus.groovy.ast.Parameter,org.codehaus.groovy.ast.expr.Expression,org.codehaus.groovy.ast.stmt.Statement)>(r17, r16, r24);

        virtualinvoke r4.<org.codehaus.groovy.antlr.AntlrParserPlugin: void configureAST(org.codehaus.groovy.ast.ASTNode,groovyjarjarantlr.collections.AST)>($r30, r0);

        return $r30;
    }

    protected org.codehaus.groovy.ast.stmt.Statement ifStatement(groovyjarjarantlr.collections.AST)
    {
        org.codehaus.groovy.ast.stmt.Statement $r5, r8;
        org.codehaus.groovy.ast.expr.BooleanExpression $r3;
        org.codehaus.groovy.antlr.AntlrParserPlugin r2;
        org.codehaus.groovy.ast.stmt.IfStatement $r7;
        groovyjarjarantlr.collections.AST r0, $r1, $r4, $r6;

        r2 := @this: org.codehaus.groovy.antlr.AntlrParserPlugin;

        r0 := @parameter0: groovyjarjarantlr.collections.AST;

        $r1 = interfaceinvoke r0.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getFirstChild()>();

        virtualinvoke r2.<org.codehaus.groovy.antlr.AntlrParserPlugin: void assertNodeType(int,groovyjarjarantlr.collections.AST)>(27, $r1);

        $r3 = virtualinvoke r2.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.expr.BooleanExpression booleanExpression(groovyjarjarantlr.collections.AST)>($r1);

        $r4 = interfaceinvoke $r1.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getNextSibling()>();

        $r5 = virtualinvoke r2.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.stmt.Statement statement(groovyjarjarantlr.collections.AST)>($r4);

        r8 = <org.codehaus.groovy.ast.stmt.EmptyStatement: org.codehaus.groovy.ast.stmt.EmptyStatement INSTANCE>;

        $r6 = interfaceinvoke $r4.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getNextSibling()>();

        if $r6 == null goto label1;

        r8 = virtualinvoke r2.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.stmt.Statement statement(groovyjarjarantlr.collections.AST)>($r6);

     label1:
        $r7 = new org.codehaus.groovy.ast.stmt.IfStatement;

        specialinvoke $r7.<org.codehaus.groovy.ast.stmt.IfStatement: void <init>(org.codehaus.groovy.ast.expr.BooleanExpression,org.codehaus.groovy.ast.stmt.Statement,org.codehaus.groovy.ast.stmt.Statement)>($r3, $r5, r8);

        virtualinvoke r2.<org.codehaus.groovy.antlr.AntlrParserPlugin: void configureAST(org.codehaus.groovy.ast.ASTNode,groovyjarjarantlr.collections.AST)>($r7, r0);

        return $r7;
    }

    protected org.codehaus.groovy.ast.stmt.Statement labelledStatement(groovyjarjarantlr.collections.AST)
    {
        org.codehaus.groovy.ast.stmt.Statement $r5;
        org.codehaus.groovy.antlr.AntlrParserPlugin r2;
        java.lang.String $r3;
        groovyjarjarantlr.collections.AST r0, $r1, $r4;

        r2 := @this: org.codehaus.groovy.antlr.AntlrParserPlugin;

        r0 := @parameter0: groovyjarjarantlr.collections.AST;

        $r1 = interfaceinvoke r0.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getFirstChild()>();

        $r3 = virtualinvoke r2.<org.codehaus.groovy.antlr.AntlrParserPlugin: java.lang.String identifier(groovyjarjarantlr.collections.AST)>($r1);

        $r4 = interfaceinvoke $r1.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getNextSibling()>();

        $r5 = virtualinvoke r2.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.stmt.Statement statement(groovyjarjarantlr.collections.AST)>($r4);

        virtualinvoke $r5.<org.codehaus.groovy.ast.stmt.Statement: void setStatementLabel(java.lang.String)>($r3);

        return $r5;
    }

    protected org.codehaus.groovy.ast.stmt.Statement methodCall(groovyjarjarantlr.collections.AST)
    {
        org.codehaus.groovy.antlr.AntlrParserPlugin r0;
        org.codehaus.groovy.ast.stmt.ExpressionStatement $r3;
        org.codehaus.groovy.ast.expr.Expression $r2;
        groovyjarjarantlr.collections.AST r1;

        r0 := @this: org.codehaus.groovy.antlr.AntlrParserPlugin;

        r1 := @parameter0: groovyjarjarantlr.collections.AST;

        $r2 = virtualinvoke r0.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.expr.Expression methodCallExpression(groovyjarjarantlr.collections.AST)>(r1);

        $r3 = new org.codehaus.groovy.ast.stmt.ExpressionStatement;

        specialinvoke $r3.<org.codehaus.groovy.ast.stmt.ExpressionStatement: void <init>(org.codehaus.groovy.ast.expr.Expression)>($r2);

        virtualinvoke r0.<org.codehaus.groovy.antlr.AntlrParserPlugin: void configureAST(org.codehaus.groovy.ast.ASTNode,groovyjarjarantlr.collections.AST)>($r3, r1);

        return $r3;
    }

    protected org.codehaus.groovy.ast.expr.Expression declarationExpression(groovyjarjarantlr.collections.AST)
    {
        java.util.ArrayList $r2;
        org.codehaus.groovy.ast.stmt.ExpressionStatement $r9;
        java.lang.String $r4;
        org.codehaus.groovy.ast.expr.Expression r13;
        boolean $z0, $z1;
        org.codehaus.groovy.antlr.AntlrParserPlugin r3;
        org.codehaus.groovy.ast.expr.VariableExpression $r5;
        org.codehaus.groovy.ast.ClassNode r12;
        org.codehaus.groovy.syntax.Token $r7;
        org.codehaus.groovy.ast.expr.DeclarationExpression $r8;
        groovyjarjarantlr.collections.AST r0, $r1, $r6, $r10, r11;

        r3 := @this: org.codehaus.groovy.antlr.AntlrParserPlugin;

        r0 := @parameter0: groovyjarjarantlr.collections.AST;

        $r1 = interfaceinvoke r0.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getFirstChild()>();

        r11 = $r1;

        r12 = null;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        $z0 = staticinvoke <org.codehaus.groovy.antlr.AntlrParserPlugin: boolean isType(int,groovyjarjarantlr.collections.AST)>(5, $r1);

        if $z0 == 0 goto label1;

        virtualinvoke r3.<org.codehaus.groovy.antlr.AntlrParserPlugin: int modifiers(groovyjarjarantlr.collections.AST,java.util.List,int)>($r1, $r2, 0);

        r11 = interfaceinvoke $r1.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getNextSibling()>();

     label1:
        $z1 = staticinvoke <org.codehaus.groovy.antlr.AntlrParserPlugin: boolean isType(int,groovyjarjarantlr.collections.AST)>(12, r11);

        if $z1 == 0 goto label2;

        r12 = virtualinvoke r3.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.ClassNode makeTypeWithArguments(groovyjarjarantlr.collections.AST)>(r11);

        r11 = interfaceinvoke r11.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getNextSibling()>();

     label2:
        $r4 = virtualinvoke r3.<org.codehaus.groovy.antlr.AntlrParserPlugin: java.lang.String identifier(groovyjarjarantlr.collections.AST)>(r11);

        $r5 = new org.codehaus.groovy.ast.expr.VariableExpression;

        specialinvoke $r5.<org.codehaus.groovy.ast.expr.VariableExpression: void <init>(java.lang.String,org.codehaus.groovy.ast.ClassNode)>($r4, r12);

        virtualinvoke r3.<org.codehaus.groovy.antlr.AntlrParserPlugin: void configureAST(org.codehaus.groovy.ast.ASTNode,groovyjarjarantlr.collections.AST)>($r5, r11);

        $r6 = interfaceinvoke r11.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getNextSibling()>();

        r13 = <org.codehaus.groovy.ast.expr.ConstantExpression: org.codehaus.groovy.ast.expr.ConstantExpression NULL>;

        if $r6 == null goto label3;

        virtualinvoke r3.<org.codehaus.groovy.antlr.AntlrParserPlugin: void assertNodeType(int,groovyjarjarantlr.collections.AST)>(120, $r6);

        $r10 = interfaceinvoke $r6.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getFirstChild()>();

        r13 = virtualinvoke r3.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.expr.Expression expression(groovyjarjarantlr.collections.AST)>($r10);

     label3:
        $r7 = staticinvoke <org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.syntax.Token makeToken(int,groovyjarjarantlr.collections.AST)>(100, r0);

        $r8 = new org.codehaus.groovy.ast.expr.DeclarationExpression;

        specialinvoke $r8.<org.codehaus.groovy.ast.expr.DeclarationExpression: void <init>(org.codehaus.groovy.ast.expr.VariableExpression,org.codehaus.groovy.syntax.Token,org.codehaus.groovy.ast.expr.Expression)>($r5, $r7, r13);

        virtualinvoke r3.<org.codehaus.groovy.antlr.AntlrParserPlugin: void configureAST(org.codehaus.groovy.ast.ASTNode,groovyjarjarantlr.collections.AST)>($r8, r0);

        $r9 = new org.codehaus.groovy.ast.stmt.ExpressionStatement;

        specialinvoke $r9.<org.codehaus.groovy.ast.stmt.ExpressionStatement: void <init>(org.codehaus.groovy.ast.expr.Expression)>($r8);

        virtualinvoke r3.<org.codehaus.groovy.antlr.AntlrParserPlugin: void configureAST(org.codehaus.groovy.ast.ASTNode,groovyjarjarantlr.collections.AST)>($r9, r0);

        return $r8;
    }

    protected org.codehaus.groovy.ast.stmt.Statement variableDef(groovyjarjarantlr.collections.AST)
    {
        org.codehaus.groovy.antlr.AntlrParserPlugin r1;
        org.codehaus.groovy.ast.stmt.ExpressionStatement $r0;
        org.codehaus.groovy.ast.expr.Expression $r3;
        groovyjarjarantlr.collections.AST r2;

        r1 := @this: org.codehaus.groovy.antlr.AntlrParserPlugin;

        r2 := @parameter0: groovyjarjarantlr.collections.AST;

        $r0 = new org.codehaus.groovy.ast.stmt.ExpressionStatement;

        $r3 = virtualinvoke r1.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.expr.Expression declarationExpression(groovyjarjarantlr.collections.AST)>(r2);

        specialinvoke $r0.<org.codehaus.groovy.ast.stmt.ExpressionStatement: void <init>(org.codehaus.groovy.ast.expr.Expression)>($r3);

        virtualinvoke r1.<org.codehaus.groovy.antlr.AntlrParserPlugin: void configureAST(org.codehaus.groovy.ast.ASTNode,groovyjarjarantlr.collections.AST)>($r0, r2);

        return $r0;
    }

    protected org.codehaus.groovy.ast.stmt.Statement returnStatement(groovyjarjarantlr.collections.AST)
    {
        org.codehaus.groovy.antlr.AntlrParserPlugin r3;
        org.codehaus.groovy.ast.stmt.ReturnStatement $r2, $r5, $r7;
        org.codehaus.groovy.ast.expr.ConstantExpression r8;
        java.lang.Object $r6;
        org.codehaus.groovy.ast.expr.Expression $r4;
        groovyjarjarantlr.collections.AST r0, $r1;
        boolean $z0;

        r3 := @this: org.codehaus.groovy.antlr.AntlrParserPlugin;

        r0 := @parameter0: groovyjarjarantlr.collections.AST;

        $r1 = interfaceinvoke r0.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getFirstChild()>();

        if $r1 == null goto label2;

        $r4 = virtualinvoke r3.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.expr.Expression expression(groovyjarjarantlr.collections.AST)>($r1);

        $z0 = $r4 instanceof org.codehaus.groovy.ast.expr.ConstantExpression;

        if $z0 == 0 goto label1;

        r8 = (org.codehaus.groovy.ast.expr.ConstantExpression) $r4;

        $r6 = virtualinvoke r8.<org.codehaus.groovy.ast.expr.ConstantExpression: java.lang.Object getValue()>();

        if $r6 != null goto label1;

        $r7 = <org.codehaus.groovy.ast.stmt.ReturnStatement: org.codehaus.groovy.ast.stmt.ReturnStatement RETURN_NULL_OR_VOID>;

        return $r7;

     label1:
        $r5 = new org.codehaus.groovy.ast.stmt.ReturnStatement;

        specialinvoke $r5.<org.codehaus.groovy.ast.stmt.ReturnStatement: void <init>(org.codehaus.groovy.ast.expr.Expression)>($r4);

        virtualinvoke r3.<org.codehaus.groovy.antlr.AntlrParserPlugin: void configureAST(org.codehaus.groovy.ast.ASTNode,groovyjarjarantlr.collections.AST)>($r5, r0);

        return $r5;

     label2:
        $r2 = <org.codehaus.groovy.ast.stmt.ReturnStatement: org.codehaus.groovy.ast.stmt.ReturnStatement RETURN_NULL_OR_VOID>;

        return $r2;
    }

    protected org.codehaus.groovy.ast.stmt.Statement switchStatement(groovyjarjarantlr.collections.AST)
    {
        org.codehaus.groovy.ast.stmt.Statement r9;
        org.codehaus.groovy.antlr.AntlrParserPlugin r2;
        java.util.ArrayList $r4;
        org.codehaus.groovy.ast.stmt.SwitchStatement $r5;
        org.codehaus.groovy.ast.expr.Expression $r3;
        java.util.LinkedList $r8;
        groovyjarjarantlr.collections.AST r0, $r1, $r6, $r7, r10;
        boolean $z0, $z1;

        r2 := @this: org.codehaus.groovy.antlr.AntlrParserPlugin;

        r0 := @parameter0: groovyjarjarantlr.collections.AST;

        $r1 = interfaceinvoke r0.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getFirstChild()>();

        $r3 = virtualinvoke r2.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.expr.Expression expression(groovyjarjarantlr.collections.AST)>($r1);

        r9 = <org.codehaus.groovy.ast.stmt.EmptyStatement: org.codehaus.groovy.ast.stmt.EmptyStatement INSTANCE>;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r10 = interfaceinvoke $r1.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getNextSibling()>();

     label1:
        $z0 = staticinvoke <org.codehaus.groovy.antlr.AntlrParserPlugin: boolean isType(int,groovyjarjarantlr.collections.AST)>(31, r10);

        if $z0 == 0 goto label4;

        $r6 = interfaceinvoke r10.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getFirstChild()>();

        $z1 = staticinvoke <org.codehaus.groovy.antlr.AntlrParserPlugin: boolean isType(int,groovyjarjarantlr.collections.AST)>(146, $r6);

        if $z1 == 0 goto label2;

        $r8 = new java.util.LinkedList;

        specialinvoke $r8.<java.util.LinkedList: void <init>()>();

        r9 = virtualinvoke r2.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.stmt.Statement caseStatements(groovyjarjarantlr.collections.AST,java.util.List)>($r6, $r8);

        interfaceinvoke $r4.<java.util.List: boolean addAll(java.util.Collection)>($r8);

        goto label3;

     label2:
        $r7 = interfaceinvoke $r6.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getNextSibling()>();

        r9 = virtualinvoke r2.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.stmt.Statement statement(groovyjarjarantlr.collections.AST)>($r7);

     label3:
        r10 = interfaceinvoke r10.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getNextSibling()>();

        goto label1;

     label4:
        if r10 == null goto label5;

        virtualinvoke r2.<org.codehaus.groovy.antlr.AntlrParserPlugin: void unknownAST(groovyjarjarantlr.collections.AST)>(r10);

     label5:
        $r5 = new org.codehaus.groovy.ast.stmt.SwitchStatement;

        specialinvoke $r5.<org.codehaus.groovy.ast.stmt.SwitchStatement: void <init>(org.codehaus.groovy.ast.expr.Expression,java.util.List,org.codehaus.groovy.ast.stmt.Statement)>($r3, $r4, r9);

        virtualinvoke r2.<org.codehaus.groovy.antlr.AntlrParserPlugin: void configureAST(org.codehaus.groovy.ast.ASTNode,groovyjarjarantlr.collections.AST)>($r5, r0);

        return $r5;
    }

    protected org.codehaus.groovy.ast.stmt.Statement caseStatements(groovyjarjarantlr.collections.AST, java.util.List)
    {
        org.codehaus.groovy.ast.stmt.Statement r13, r14;
        org.codehaus.groovy.ast.stmt.CaseStatement $r8, $r10, r17;
        org.codehaus.groovy.ast.expr.Expression $r4, r7;
        java.util.LinkedList $r0;
        boolean $z0, $z1, $z2, $z3;
        org.codehaus.groovy.antlr.AntlrParserPlugin r2;
        java.util.Iterator $r16;
        org.codehaus.groovy.ast.stmt.EmptyStatement $r11;
        java.util.List r9;
        java.lang.Object $r6;
        groovyjarjarantlr.collections.AST r1, $r3, $r5, $r12, r15;

        r2 := @this: org.codehaus.groovy.antlr.AntlrParserPlugin;

        r1 := @parameter0: groovyjarjarantlr.collections.AST;

        r9 := @parameter1: java.util.List;

        $r0 = new java.util.LinkedList;

        specialinvoke $r0.<java.util.LinkedList: void <init>()>();

        r13 = <org.codehaus.groovy.ast.stmt.EmptyStatement: org.codehaus.groovy.ast.stmt.EmptyStatement INSTANCE>;

        r14 = <org.codehaus.groovy.ast.stmt.EmptyStatement: org.codehaus.groovy.ast.stmt.EmptyStatement INSTANCE>;

        r15 = r1;

     label1:
        $r3 = interfaceinvoke r15.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getFirstChild()>();

        $r4 = virtualinvoke r2.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.expr.Expression expression(groovyjarjarantlr.collections.AST)>($r3);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r4);

        $r5 = interfaceinvoke r15.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getNextSibling()>();

        r15 = $r5;

        $z0 = staticinvoke <org.codehaus.groovy.antlr.AntlrParserPlugin: boolean isType(int,groovyjarjarantlr.collections.AST)>(146, $r5);

        if $z0 != 0 goto label1;

        if $r5 == null goto label3;

        $z2 = staticinvoke <org.codehaus.groovy.antlr.AntlrParserPlugin: boolean isType(int,groovyjarjarantlr.collections.AST)>(126, $r5);

        if $z2 == 0 goto label2;

        $r12 = interfaceinvoke $r5.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getNextSibling()>();

        r14 = virtualinvoke r2.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.stmt.Statement statement(groovyjarjarantlr.collections.AST)>($r12);

        r13 = <org.codehaus.groovy.ast.stmt.EmptyStatement: org.codehaus.groovy.ast.stmt.EmptyStatement INSTANCE>;

        goto label3;

     label2:
        r13 = virtualinvoke r2.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.stmt.Statement statement(groovyjarjarantlr.collections.AST)>($r5);

     label3:
        $r16 = interfaceinvoke $r0.<java.util.List: java.util.Iterator iterator()>();

     label4:
        $z3 = interfaceinvoke $r16.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label7;

        $r6 = interfaceinvoke $r16.<java.util.Iterator: java.lang.Object next()>();

        r7 = (org.codehaus.groovy.ast.expr.Expression) $r6;

        $z1 = interfaceinvoke $r16.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label5;

        $r10 = new org.codehaus.groovy.ast.stmt.CaseStatement;

        $r11 = <org.codehaus.groovy.ast.stmt.EmptyStatement: org.codehaus.groovy.ast.stmt.EmptyStatement INSTANCE>;

        specialinvoke $r10.<org.codehaus.groovy.ast.stmt.CaseStatement: void <init>(org.codehaus.groovy.ast.expr.Expression,org.codehaus.groovy.ast.stmt.Statement)>(r7, $r11);

        r17 = $r10;

        goto label6;

     label5:
        $r8 = new org.codehaus.groovy.ast.stmt.CaseStatement;

        specialinvoke $r8.<org.codehaus.groovy.ast.stmt.CaseStatement: void <init>(org.codehaus.groovy.ast.expr.Expression,org.codehaus.groovy.ast.stmt.Statement)>(r7, r13);

        r17 = $r8;

     label6:
        virtualinvoke r2.<org.codehaus.groovy.antlr.AntlrParserPlugin: void configureAST(org.codehaus.groovy.ast.ASTNode,groovyjarjarantlr.collections.AST)>(r17, r1);

        interfaceinvoke r9.<java.util.List: boolean add(java.lang.Object)>(r17);

        goto label4;

     label7:
        return r14;
    }

    protected org.codehaus.groovy.ast.stmt.Statement synchronizedStatement(groovyjarjarantlr.collections.AST)
    {
        org.codehaus.groovy.ast.stmt.Statement $r5;
        org.codehaus.groovy.antlr.AntlrParserPlugin r2;
        org.codehaus.groovy.ast.expr.Expression $r3;
        org.codehaus.groovy.ast.stmt.SynchronizedStatement $r6;
        groovyjarjarantlr.collections.AST r0, $r1, $r4;

        r2 := @this: org.codehaus.groovy.antlr.AntlrParserPlugin;

        r0 := @parameter0: groovyjarjarantlr.collections.AST;

        $r1 = interfaceinvoke r0.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getFirstChild()>();

        $r3 = virtualinvoke r2.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.expr.Expression expression(groovyjarjarantlr.collections.AST)>($r1);

        $r4 = interfaceinvoke $r1.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getNextSibling()>();

        $r5 = virtualinvoke r2.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.stmt.Statement statement(groovyjarjarantlr.collections.AST)>($r4);

        $r6 = new org.codehaus.groovy.ast.stmt.SynchronizedStatement;

        specialinvoke $r6.<org.codehaus.groovy.ast.stmt.SynchronizedStatement: void <init>(org.codehaus.groovy.ast.expr.Expression,org.codehaus.groovy.ast.stmt.Statement)>($r3, $r5);

        virtualinvoke r2.<org.codehaus.groovy.antlr.AntlrParserPlugin: void configureAST(org.codehaus.groovy.ast.ASTNode,groovyjarjarantlr.collections.AST)>($r6, r0);

        return $r6;
    }

    protected org.codehaus.groovy.ast.stmt.Statement throwStatement(groovyjarjarantlr.collections.AST)
    {
        org.codehaus.groovy.antlr.ASTRuntimeException $r5;
        org.codehaus.groovy.antlr.AntlrParserPlugin r3;
        org.codehaus.groovy.ast.stmt.ThrowStatement $r2;
        org.codehaus.groovy.ast.expr.Expression $r4;
        groovyjarjarantlr.collections.AST r0, $r1, r6;

        r3 := @this: org.codehaus.groovy.antlr.AntlrParserPlugin;

        r0 := @parameter0: groovyjarjarantlr.collections.AST;

        $r1 = interfaceinvoke r0.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getFirstChild()>();

        r6 = $r1;

        if $r1 != null goto label1;

        r6 = interfaceinvoke r0.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getNextSibling()>();

     label1:
        if r6 != null goto label2;

        $r5 = new org.codehaus.groovy.antlr.ASTRuntimeException;

        specialinvoke $r5.<org.codehaus.groovy.antlr.ASTRuntimeException: void <init>(groovyjarjarantlr.collections.AST,java.lang.String)>(r0, "No expression available");

        throw $r5;

     label2:
        $r2 = new org.codehaus.groovy.ast.stmt.ThrowStatement;

        $r4 = virtualinvoke r3.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.expr.Expression expression(groovyjarjarantlr.collections.AST)>(r6);

        specialinvoke $r2.<org.codehaus.groovy.ast.stmt.ThrowStatement: void <init>(org.codehaus.groovy.ast.expr.Expression)>($r4);

        virtualinvoke r3.<org.codehaus.groovy.antlr.AntlrParserPlugin: void configureAST(org.codehaus.groovy.ast.ASTNode,groovyjarjarantlr.collections.AST)>($r2, r0);

        return $r2;
    }

    protected org.codehaus.groovy.ast.stmt.Statement tryStatement(groovyjarjarantlr.collections.AST)
    {
        org.codehaus.groovy.ast.stmt.Statement $r3, r11;
        java.util.ArrayList $r4;
        int $i0;
        boolean $z0, $z1, $z2, $z3;
        org.codehaus.groovy.antlr.AntlrParserPlugin r2;
        java.util.Iterator $r6;
        org.codehaus.groovy.ast.stmt.CatchStatement r8, $r10;
        org.codehaus.groovy.antlr.ASTRuntimeException $r9;
        org.codehaus.groovy.ast.stmt.TryCatchStatement $r5;
        java.lang.Object $r7;
        groovyjarjarantlr.collections.AST r0, $r1, r12;

        r2 := @this: org.codehaus.groovy.antlr.AntlrParserPlugin;

        r0 := @parameter0: groovyjarjarantlr.collections.AST;

        $r1 = interfaceinvoke r0.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getFirstChild()>();

        $r3 = virtualinvoke r2.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.stmt.Statement statement(groovyjarjarantlr.collections.AST)>($r1);

        r11 = <org.codehaus.groovy.ast.stmt.EmptyStatement: org.codehaus.groovy.ast.stmt.EmptyStatement INSTANCE>;

        r12 = interfaceinvoke $r1.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getNextSibling()>();

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

     label1:
        if r12 == null goto label2;

        $z2 = staticinvoke <org.codehaus.groovy.antlr.AntlrParserPlugin: boolean isType(int,groovyjarjarantlr.collections.AST)>(149, r12);

        if $z2 == 0 goto label2;

        $r10 = virtualinvoke r2.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.stmt.CatchStatement catchStatement(groovyjarjarantlr.collections.AST)>(r12);

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r10);

        r12 = interfaceinvoke r12.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getNextSibling()>();

        goto label1;

     label2:
        $z0 = staticinvoke <org.codehaus.groovy.antlr.AntlrParserPlugin: boolean isType(int,groovyjarjarantlr.collections.AST)>(148, r12);

        if $z0 == 0 goto label3;

        r11 = virtualinvoke r2.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.stmt.Statement statement(groovyjarjarantlr.collections.AST)>(r12);

        interfaceinvoke r12.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getNextSibling()>();

     label3:
        $z1 = r11 instanceof org.codehaus.groovy.ast.stmt.EmptyStatement;

        if $z1 == 0 goto label4;

        $i0 = interfaceinvoke $r4.<java.util.List: int size()>();

        if $i0 != 0 goto label4;

        $r9 = new org.codehaus.groovy.antlr.ASTRuntimeException;

        specialinvoke $r9.<org.codehaus.groovy.antlr.ASTRuntimeException: void <init>(groovyjarjarantlr.collections.AST,java.lang.String)>(r0, "A try statement must have at least one catch or finally block.");

        throw $r9;

     label4:
        $r5 = new org.codehaus.groovy.ast.stmt.TryCatchStatement;

        specialinvoke $r5.<org.codehaus.groovy.ast.stmt.TryCatchStatement: void <init>(org.codehaus.groovy.ast.stmt.Statement,org.codehaus.groovy.ast.stmt.Statement)>($r3, r11);

        virtualinvoke r2.<org.codehaus.groovy.antlr.AntlrParserPlugin: void configureAST(org.codehaus.groovy.ast.ASTNode,groovyjarjarantlr.collections.AST)>($r5, r0);

        $r6 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label5:
        $z3 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label6;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r8 = (org.codehaus.groovy.ast.stmt.CatchStatement) $r7;

        virtualinvoke $r5.<org.codehaus.groovy.ast.stmt.TryCatchStatement: void addCatch(org.codehaus.groovy.ast.stmt.CatchStatement)>(r8);

        goto label5;

     label6:
        return $r5;
    }

    protected org.codehaus.groovy.ast.stmt.CatchStatement catchStatement(groovyjarjarantlr.collections.AST)
    {
        org.codehaus.groovy.ast.stmt.Statement $r7;
        org.codehaus.groovy.antlr.AntlrParserPlugin r2;
        org.codehaus.groovy.ast.Parameter $r3, $r8;
        org.codehaus.groovy.ast.ClassNode $r4;
        org.codehaus.groovy.ast.stmt.CatchStatement $r9;
        java.lang.String $r5;
        groovyjarjarantlr.collections.AST r0, $r1, $r6;

        r2 := @this: org.codehaus.groovy.antlr.AntlrParserPlugin;

        r0 := @parameter0: groovyjarjarantlr.collections.AST;

        $r1 = interfaceinvoke r0.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getFirstChild()>();

        $r3 = virtualinvoke r2.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.Parameter parameter(groovyjarjarantlr.collections.AST)>($r1);

        $r4 = virtualinvoke $r3.<org.codehaus.groovy.ast.Parameter: org.codehaus.groovy.ast.ClassNode getType()>();

        $r5 = virtualinvoke $r3.<org.codehaus.groovy.ast.Parameter: java.lang.String getName()>();

        $r6 = interfaceinvoke $r1.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getNextSibling()>();

        $r7 = virtualinvoke r2.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.stmt.Statement statement(groovyjarjarantlr.collections.AST)>($r6);

        $r8 = new org.codehaus.groovy.ast.Parameter;

        specialinvoke $r8.<org.codehaus.groovy.ast.Parameter: void <init>(org.codehaus.groovy.ast.ClassNode,java.lang.String)>($r4, $r5);

        $r9 = new org.codehaus.groovy.ast.stmt.CatchStatement;

        specialinvoke $r9.<org.codehaus.groovy.ast.stmt.CatchStatement: void <init>(org.codehaus.groovy.ast.Parameter,org.codehaus.groovy.ast.stmt.Statement)>($r8, $r7);

        virtualinvoke r2.<org.codehaus.groovy.antlr.AntlrParserPlugin: void configureAST(org.codehaus.groovy.ast.ASTNode,groovyjarjarantlr.collections.AST)>($r9, r0);

        return $r9;
    }

    protected org.codehaus.groovy.ast.stmt.Statement whileStatement(groovyjarjarantlr.collections.AST)
    {
        org.codehaus.groovy.ast.stmt.Statement r8;
        org.codehaus.groovy.ast.expr.BooleanExpression $r4;
        org.codehaus.groovy.antlr.AntlrParserPlugin r2;
        org.codehaus.groovy.ast.stmt.WhileStatement $r6;
        org.codehaus.groovy.antlr.ASTRuntimeException $r7;
        groovyjarjarantlr.collections.AST r0, $r1, $r3, $r5;
        boolean $z0, $z1;

        r2 := @this: org.codehaus.groovy.antlr.AntlrParserPlugin;

        r0 := @parameter0: groovyjarjarantlr.collections.AST;

        $r1 = interfaceinvoke r0.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getFirstChild()>();

        virtualinvoke r2.<org.codehaus.groovy.antlr.AntlrParserPlugin: void assertNodeType(int,groovyjarjarantlr.collections.AST)>(27, $r1);

        $r3 = interfaceinvoke $r1.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getFirstChild()>();

        $z0 = staticinvoke <org.codehaus.groovy.antlr.AntlrParserPlugin: boolean isType(int,groovyjarjarantlr.collections.AST)>(9, $r3);

        if $z0 == 0 goto label1;

        $r7 = new org.codehaus.groovy.antlr.ASTRuntimeException;

        specialinvoke $r7.<org.codehaus.groovy.antlr.ASTRuntimeException: void <init>(groovyjarjarantlr.collections.AST,java.lang.String)>(r0, "While loop condition contains a declaration; this is currently unsupported.");

        throw $r7;

     label1:
        $r4 = virtualinvoke r2.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.expr.BooleanExpression booleanExpression(groovyjarjarantlr.collections.AST)>($r1);

        $r5 = interfaceinvoke $r1.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getNextSibling()>();

        $z1 = staticinvoke <org.codehaus.groovy.antlr.AntlrParserPlugin: boolean isType(int,groovyjarjarantlr.collections.AST)>(124, $r5);

        if $z1 == 0 goto label2;

        r8 = <org.codehaus.groovy.ast.stmt.EmptyStatement: org.codehaus.groovy.ast.stmt.EmptyStatement INSTANCE>;

        goto label3;

     label2:
        r8 = virtualinvoke r2.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.stmt.Statement statement(groovyjarjarantlr.collections.AST)>($r5);

     label3:
        $r6 = new org.codehaus.groovy.ast.stmt.WhileStatement;

        specialinvoke $r6.<org.codehaus.groovy.ast.stmt.WhileStatement: void <init>(org.codehaus.groovy.ast.expr.BooleanExpression,org.codehaus.groovy.ast.stmt.Statement)>($r4, r8);

        virtualinvoke r2.<org.codehaus.groovy.antlr.AntlrParserPlugin: void configureAST(org.codehaus.groovy.ast.ASTNode,groovyjarjarantlr.collections.AST)>($r6, r0);

        return $r6;
    }

    protected org.codehaus.groovy.ast.expr.Expression expression(groovyjarjarantlr.collections.AST)
    {
        org.codehaus.groovy.antlr.AntlrParserPlugin r0;
        org.codehaus.groovy.ast.expr.Expression $r2;
        groovyjarjarantlr.collections.AST r1;

        r0 := @this: org.codehaus.groovy.antlr.AntlrParserPlugin;

        r1 := @parameter0: groovyjarjarantlr.collections.AST;

        $r2 = virtualinvoke r0.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.expr.Expression expression(groovyjarjarantlr.collections.AST,boolean)>(r1, 0);

        return $r2;
    }

    protected org.codehaus.groovy.ast.expr.Expression expression(groovyjarjarantlr.collections.AST, boolean)
    {
        org.codehaus.groovy.antlr.AntlrParserPlugin r0;
        org.codehaus.groovy.ast.expr.VariableExpression $r3, $r4, r5;
        org.codehaus.groovy.ast.expr.ConstantExpression $r6;
        org.codehaus.groovy.ast.expr.Expression $r2, r8;
        java.lang.String $r7;
        groovyjarjarantlr.collections.AST r1;
        boolean z0, $z1;

        r0 := @this: org.codehaus.groovy.antlr.AntlrParserPlugin;

        r1 := @parameter0: groovyjarjarantlr.collections.AST;

        z0 := @parameter1: boolean;

        $r2 = virtualinvoke r0.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.expr.Expression expressionSwitch(groovyjarjarantlr.collections.AST)>(r1);

        r8 = $r2;

        if z0 == 0 goto label1;

        $r3 = <org.codehaus.groovy.ast.expr.VariableExpression: org.codehaus.groovy.ast.expr.VariableExpression THIS_EXPRESSION>;

        if $r2 == $r3 goto label1;

        $r4 = <org.codehaus.groovy.ast.expr.VariableExpression: org.codehaus.groovy.ast.expr.VariableExpression SUPER_EXPRESSION>;

        if $r2 == $r4 goto label1;

        $z1 = $r2 instanceof org.codehaus.groovy.ast.expr.VariableExpression;

        if $z1 == 0 goto label1;

        r5 = (org.codehaus.groovy.ast.expr.VariableExpression) $r2;

        $r6 = new org.codehaus.groovy.ast.expr.ConstantExpression;

        $r7 = virtualinvoke r5.<org.codehaus.groovy.ast.expr.VariableExpression: java.lang.String getName()>();

        specialinvoke $r6.<org.codehaus.groovy.ast.expr.ConstantExpression: void <init>(java.lang.Object)>($r7);

        r8 = $r6;

     label1:
        virtualinvoke r0.<org.codehaus.groovy.antlr.AntlrParserPlugin: void configureAST(org.codehaus.groovy.ast.ASTNode,groovyjarjarantlr.collections.AST)>(r8, r1);

        return r8;
    }

    protected org.codehaus.groovy.ast.expr.Expression expressionSwitch(groovyjarjarantlr.collections.AST)
    {
        org.codehaus.groovy.antlr.AntlrParserPlugin r1;
        org.codehaus.groovy.ast.expr.ClosureListExpression $r65;
        org.codehaus.groovy.ast.expr.VariableExpression $r50, $r58;
        groovyjarjarantlr.collections.AST r0, $r9, $r12, $r83;
        org.codehaus.groovy.ast.expr.Expression $r7, $r10, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r30, $r31, $r32, $r33, $r34, $r35, $r36, $r37, $r38, $r39, $r40, $r41, $r42, $r43, $r44, $r45, $r46, $r47, $r48, $r49, $r51, $r52, $r53, $r54, $r55, $r56, $r57, $r59, $r60, $r61, $r64, $r68, $r69, $r70, $r71, $r73, $r75, $r77, $r79, $r80, $r81, $r82, $r84, $r85, $r86, $r87, $r88, $r89, $r90, $r91;
        java.lang.String $r63;
        org.codehaus.groovy.ast.ClassNode $r76, $r78;
        org.codehaus.groovy.ast.expr.AnnotationConstantExpression $r66;
        org.codehaus.groovy.ast.expr.BitwiseNegationExpression $r11;
        org.codehaus.groovy.ast.expr.ConstantExpression $r2, $r3, $r4, $r5, $r6, $r62;
        org.codehaus.groovy.ast.expr.NotExpression $r8;
        org.codehaus.groovy.ast.AnnotationNode $r67;
        int $i0;
        org.codehaus.groovy.ast.expr.ClosureExpression $r74;
        org.codehaus.groovy.ast.expr.MapEntryExpression $r72;

        r1 := @this: org.codehaus.groovy.antlr.AntlrParserPlugin;

        r0 := @parameter0: groovyjarjarantlr.collections.AST;

        $i0 = interfaceinvoke r0.<groovyjarjarantlr.collections.AST: int getType()>();

        tableswitch($i0)
        {
            case 7: goto label03;
            case 8: goto label82;
            case 9: goto label73;
            case 10: goto label82;
            case 11: goto label82;
            case 12: goto label82;
            case 13: goto label82;
            case 14: goto label82;
            case 15: goto label82;
            case 16: goto label82;
            case 17: goto label82;
            case 18: goto label82;
            case 19: goto label82;
            case 20: goto label82;
            case 21: goto label82;
            case 22: goto label21;
            case 23: goto label18;
            case 24: goto label37;
            case 25: goto label38;
            case 26: goto label06;
            case 27: goto label01;
            case 28: goto label82;
            case 29: goto label32;
            case 30: goto label34;
            case 31: goto label82;
            case 32: goto label02;
            case 33: goto label82;
            case 34: goto label82;
            case 35: goto label82;
            case 36: goto label82;
            case 37: goto label82;
            case 38: goto label82;
            case 39: goto label82;
            case 40: goto label82;
            case 41: goto label82;
            case 42: goto label82;
            case 43: goto label05;
            case 44: goto label08;
            case 45: goto label82;
            case 46: goto label82;
            case 47: goto label26;
            case 48: goto label82;
            case 49: goto label04;
            case 50: goto label82;
            case 51: goto label82;
            case 52: goto label78;
            case 53: goto label14;
            case 54: goto label15;
            case 55: goto label16;
            case 56: goto label12;
            case 57: goto label13;
            case 58: goto label82;
            case 59: goto label82;
            case 60: goto label82;
            case 61: goto label82;
            case 62: goto label82;
            case 63: goto label82;
            case 64: goto label82;
            case 65: goto label80;
            case 66: goto label82;
            case 67: goto label82;
            case 68: goto label82;
            case 69: goto label82;
            case 70: goto label82;
            case 71: goto label82;
            case 72: goto label82;
            case 73: goto label82;
            case 74: goto label82;
            case 75: goto label82;
            case 76: goto label81;
            case 77: goto label82;
            case 78: goto label82;
            case 79: goto label82;
            case 80: goto label82;
            case 81: goto label82;
            case 82: goto label82;
            case 83: goto label82;
            case 84: goto label11;
            case 85: goto label25;
            case 86: goto label44;
            case 87: goto label10;
            case 88: goto label82;
            case 89: goto label82;
            case 90: goto label82;
            case 91: goto label82;
            case 92: goto label82;
            case 93: goto label09;
            case 94: goto label82;
            case 95: goto label30;
            case 96: goto label82;
            case 97: goto label45;
            case 98: goto label69;
            case 99: goto label71;
            case 100: goto label11;
            case 101: goto label11;
            case 102: goto label11;
            case 103: goto label11;
            case 104: goto label11;
            case 105: goto label11;
            case 106: goto label11;
            case 107: goto label11;
            case 108: goto label11;
            case 109: goto label59;
            case 110: goto label20;
            case 111: goto label82;
            case 112: goto label82;
            case 113: goto label82;
            case 114: goto label82;
            case 115: goto label82;
            case 116: goto label82;
            case 117: goto label82;
            case 118: goto label82;
            case 119: goto label82;
            case 120: goto label39;
            case 121: goto label49;
            case 122: goto label82;
            case 123: goto label82;
            case 124: goto label82;
            case 125: goto label82;
            case 126: goto label82;
            case 127: goto label82;
            case 128: goto label82;
            case 129: goto label29;
            case 130: goto label82;
            case 131: goto label82;
            case 132: goto label82;
            case 133: goto label82;
            case 134: goto label82;
            case 135: goto label82;
            case 136: goto label82;
            case 137: goto label82;
            case 138: goto label79;
            case 139: goto label82;
            case 140: goto label82;
            case 141: goto label82;
            case 142: goto label82;
            case 143: goto label82;
            case 144: goto label55;
            case 145: goto label57;
            case 146: goto label82;
            case 147: goto label82;
            case 148: goto label82;
            case 149: goto label82;
            case 150: goto label10;
            case 151: goto label10;
            case 152: goto label17;
            case 153: goto label56;
            case 154: goto label58;
            case 155: goto label60;
            case 156: goto label64;
            case 157: goto label66;
            case 158: goto label70;
            case 159: goto label72;
            case 160: goto label68;
            case 161: goto label50;
            case 162: goto label54;
            case 163: goto label52;
            case 164: goto label62;
            case 165: goto label09;
            case 166: goto label48;
            case 167: goto label47;
            case 168: goto label51;
            case 169: goto label53;
            case 170: goto label74;
            case 171: goto label75;
            case 172: goto label41;
            case 173: goto label40;
            case 174: goto label42;
            case 175: goto label43;
            case 176: goto label46;
            case 177: goto label19;
            case 178: goto label67;
            case 179: goto label76;
            case 180: goto label77;
            case 181: goto label35;
            case 182: goto label63;
            case 183: goto label65;
            case 184: goto label36;
            case 185: goto label61;
            case 186: goto label33;
            case 187: goto label31;
            case 188: goto label82;
            case 189: goto label82;
            case 190: goto label07;
            case 191: goto label22;
            case 192: goto label23;
            case 193: goto label24;
            case 194: goto label28;
            case 195: goto label27;
            case 196: goto label28;
            case 197: goto label27;
            case 198: goto label28;
            case 199: goto label27;
            default: goto label82;
        };

     label01:
        $r83 = interfaceinvoke r0.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getFirstChild()>();

        $r84 = virtualinvoke r1.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.expr.Expression expression(groovyjarjarantlr.collections.AST)>($r83);

        return $r84;

     label02:
        $r80 = virtualinvoke r1.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.expr.Expression expressionList(groovyjarjarantlr.collections.AST)>(r0);

        return $r80;

     label03:
        $r91 = virtualinvoke r1.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.expr.Expression blockExpression(groovyjarjarantlr.collections.AST)>(r0);

        return $r91;

     label04:
        $r74 = virtualinvoke r1.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.expr.ClosureExpression closureExpression(groovyjarjarantlr.collections.AST)>(r0);

        return $r74;

     label05:
        $r78 = <org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode SUPER>;

        $r79 = virtualinvoke r1.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.expr.Expression specialConstructorCallExpression(groovyjarjarantlr.collections.AST,org.codehaus.groovy.ast.ClassNode)>(r0, $r78);

        return $r79;

     label06:
        $r85 = virtualinvoke r1.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.expr.Expression methodCallExpression(groovyjarjarantlr.collections.AST)>(r0);

        return $r85;

     label07:
        $r7 = virtualinvoke r1.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.expr.Expression constructorCallExpression(groovyjarjarantlr.collections.AST)>(r0);

        return $r7;

     label08:
        $r76 = <org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode THIS>;

        $r77 = virtualinvoke r1.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.expr.Expression specialConstructorCallExpression(groovyjarjarantlr.collections.AST,org.codehaus.groovy.ast.ClassNode)>(r0, $r76);

        return $r77;

     label09:
        $r59 = virtualinvoke r1.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.expr.Expression ternaryExpression(groovyjarjarantlr.collections.AST)>(r0);

        return $r59;

     label10:
        $r60 = virtualinvoke r1.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.expr.Expression dotExpression(groovyjarjarantlr.collections.AST)>(r0);

        return $r60;

     label11:
        $r64 = virtualinvoke r1.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.expr.Expression variableExpression(groovyjarjarantlr.collections.AST)>(r0);

        return $r64;

     label12:
        $r69 = virtualinvoke r1.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.expr.Expression listExpression(groovyjarjarantlr.collections.AST)>(r0);

        return $r69;

     label13:
        $r68 = virtualinvoke r1.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.expr.Expression mapExpression(groovyjarjarantlr.collections.AST)>(r0);

        return $r68;

     label14:
        $r72 = virtualinvoke r1.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.expr.MapEntryExpression mapEntryExpression(groovyjarjarantlr.collections.AST)>(r0);

        return $r72;

     label15:
        $r71 = virtualinvoke r1.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.expr.Expression spreadExpression(groovyjarjarantlr.collections.AST)>(r0);

        return $r71;

     label16:
        $r70 = virtualinvoke r1.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.expr.Expression spreadMapExpression(groovyjarjarantlr.collections.AST)>(r0);

        return $r70;

     label17:
        $r46 = virtualinvoke r1.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.expr.Expression methodPointerExpression(groovyjarjarantlr.collections.AST)>(r0);

        return $r46;

     label18:
        $r88 = virtualinvoke r1.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.expr.Expression indexExpression(groovyjarjarantlr.collections.AST)>(r0);

        return $r88;

     label19:
        $r22 = virtualinvoke r1.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.expr.Expression instanceofExpression(groovyjarjarantlr.collections.AST)>(r0);

        return $r22;

     label20:
        $r53 = virtualinvoke r1.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.expr.Expression asExpression(groovyjarjarantlr.collections.AST)>(r0);

        return $r53;

     label21:
        $r89 = virtualinvoke r1.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.expr.Expression castExpression(groovyjarjarantlr.collections.AST)>(r0);

        return $r89;

     label22:
        $r6 = <org.codehaus.groovy.ast.expr.ConstantExpression: org.codehaus.groovy.ast.expr.ConstantExpression TRUE>;

        return $r6;

     label23:
        $r5 = <org.codehaus.groovy.ast.expr.ConstantExpression: org.codehaus.groovy.ast.expr.ConstantExpression FALSE>;

        return $r5;

     label24:
        $r4 = <org.codehaus.groovy.ast.expr.ConstantExpression: org.codehaus.groovy.ast.expr.ConstantExpression NULL>;

        return $r4;

     label25:
        $r62 = new org.codehaus.groovy.ast.expr.ConstantExpression;

        $r63 = interfaceinvoke r0.<groovyjarjarantlr.collections.AST: java.lang.String getText()>();

        specialinvoke $r62.<org.codehaus.groovy.ast.expr.ConstantExpression: void <init>(java.lang.Object)>($r63);

        virtualinvoke r1.<org.codehaus.groovy.antlr.AntlrParserPlugin: void configureAST(org.codehaus.groovy.ast.ASTNode,groovyjarjarantlr.collections.AST)>($r62, r0);

        return $r62;

     label26:
        $r75 = virtualinvoke r1.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.expr.Expression gstring(groovyjarjarantlr.collections.AST)>(r0);

        return $r75;

     label27:
        $r2 = virtualinvoke r1.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.expr.ConstantExpression decimalExpression(groovyjarjarantlr.collections.AST)>(r0);

        return $r2;

     label28:
        $r3 = virtualinvoke r1.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.expr.ConstantExpression integerExpression(groovyjarjarantlr.collections.AST)>(r0);

        return $r3;

     label29:
        $r50 = <org.codehaus.groovy.ast.expr.VariableExpression: org.codehaus.groovy.ast.expr.VariableExpression THIS_EXPRESSION>;

        return $r50;

     label30:
        $r58 = <org.codehaus.groovy.ast.expr.VariableExpression: org.codehaus.groovy.ast.expr.VariableExpression SUPER_EXPRESSION>;

        return $r58;

     label31:
        $r8 = new org.codehaus.groovy.ast.expr.NotExpression;

        $r9 = interfaceinvoke r0.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getFirstChild()>();

        $r10 = virtualinvoke r1.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.expr.Expression expression(groovyjarjarantlr.collections.AST)>($r9);

        specialinvoke $r8.<org.codehaus.groovy.ast.expr.NotExpression: void <init>(org.codehaus.groovy.ast.expr.Expression)>($r10);

        virtualinvoke r1.<org.codehaus.groovy.antlr.AntlrParserPlugin: void configureAST(org.codehaus.groovy.ast.ASTNode,groovyjarjarantlr.collections.AST)>($r8, r0);

        return $r8;

     label32:
        $r82 = virtualinvoke r1.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.expr.Expression unaryMinusExpression(groovyjarjarantlr.collections.AST)>(r0);

        return $r82;

     label33:
        $r11 = new org.codehaus.groovy.ast.expr.BitwiseNegationExpression;

        $r12 = interfaceinvoke r0.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getFirstChild()>();

        $r13 = virtualinvoke r1.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.expr.Expression expression(groovyjarjarantlr.collections.AST)>($r12);

        specialinvoke $r11.<org.codehaus.groovy.ast.expr.BitwiseNegationExpression: void <init>(org.codehaus.groovy.ast.expr.Expression)>($r13);

        virtualinvoke r1.<org.codehaus.groovy.antlr.AntlrParserPlugin: void configureAST(org.codehaus.groovy.ast.ASTNode,groovyjarjarantlr.collections.AST)>($r11, r0);

        return $r11;

     label34:
        $r81 = virtualinvoke r1.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.expr.Expression unaryPlusExpression(groovyjarjarantlr.collections.AST)>(r0);

        return $r81;

     label35:
        $r18 = virtualinvoke r1.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.expr.Expression prefixExpression(groovyjarjarantlr.collections.AST,int)>(r0, 250);

        return $r18;

     label36:
        $r15 = virtualinvoke r1.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.expr.Expression prefixExpression(groovyjarjarantlr.collections.AST,int)>(r0, 260);

        return $r15;

     label37:
        $r87 = virtualinvoke r1.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.expr.Expression postfixExpression(groovyjarjarantlr.collections.AST,int)>(r0, 250);

        return $r87;

     label38:
        $r86 = virtualinvoke r1.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.expr.Expression postfixExpression(groovyjarjarantlr.collections.AST,int)>(r0, 260);

        return $r86;

     label39:
        $r52 = virtualinvoke r1.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.expr.Expression binaryExpression(int,groovyjarjarantlr.collections.AST)>(100, r0);

        return $r52;

     label40:
        $r26 = virtualinvoke r1.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.expr.Expression binaryExpression(int,groovyjarjarantlr.collections.AST)>(123, r0);

        return $r26;

     label41:
        $r27 = virtualinvoke r1.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.expr.Expression binaryExpression(int,groovyjarjarantlr.collections.AST)>(120, r0);

        return $r27;

     label42:
        $r25 = virtualinvoke r1.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.expr.Expression binaryExpression(int,groovyjarjarantlr.collections.AST)>(128, r0);

        return $r25;

     label43:
        $r24 = virtualinvoke r1.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.expr.Expression binaryExpression(int,groovyjarjarantlr.collections.AST)>(125, r0);

        return $r24;

     label44:
        $r61 = virtualinvoke r1.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.expr.Expression binaryExpression(int,groovyjarjarantlr.collections.AST)>(124, r0);

        return $r61;

     label45:
        $r57 = virtualinvoke r1.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.expr.Expression binaryExpression(int,groovyjarjarantlr.collections.AST)>(126, r0);

        return $r57;

     label46:
        $r23 = virtualinvoke r1.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.expr.Expression binaryExpression(int,groovyjarjarantlr.collections.AST)>(127, r0);

        return $r23;

     label47:
        $r32 = virtualinvoke r1.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.expr.Expression binaryExpression(int,groovyjarjarantlr.collections.AST)>(164, r0);

        return $r32;

     label48:
        $r33 = virtualinvoke r1.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.expr.Expression binaryExpression(int,groovyjarjarantlr.collections.AST)>(162, r0);

        return $r33;

     label49:
        $r51 = virtualinvoke r1.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.expr.Expression binaryExpression(int,groovyjarjarantlr.collections.AST)>(341, r0);

        return $r51;

     label50:
        $r37 = virtualinvoke r1.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.expr.Expression binaryExpression(int,groovyjarjarantlr.collections.AST)>(351, r0);

        return $r37;

     label51:
        $r31 = virtualinvoke r1.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.expr.Expression binaryExpression(int,groovyjarjarantlr.collections.AST)>(340, r0);

        return $r31;

     label52:
        $r35 = virtualinvoke r1.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.expr.Expression binaryExpression(int,groovyjarjarantlr.collections.AST)>(350, r0);

        return $r35;

     label53:
        $r30 = virtualinvoke r1.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.expr.Expression binaryExpression(int,groovyjarjarantlr.collections.AST)>(342, r0);

        return $r30;

     label54:
        $r36 = virtualinvoke r1.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.expr.Expression binaryExpression(int,groovyjarjarantlr.collections.AST)>(352, r0);

        return $r36;

     label55:
        $r48 = virtualinvoke r1.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.expr.Expression binaryExpression(int,groovyjarjarantlr.collections.AST)>(200, r0);

        return $r48;

     label56:
        $r45 = virtualinvoke r1.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.expr.Expression binaryExpression(int,groovyjarjarantlr.collections.AST)>(210, r0);

        return $r45;

     label57:
        $r47 = virtualinvoke r1.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.expr.Expression binaryExpression(int,groovyjarjarantlr.collections.AST)>(201, r0);

        return $r47;

     label58:
        $r44 = virtualinvoke r1.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.expr.Expression binaryExpression(int,groovyjarjarantlr.collections.AST)>(211, r0);

        return $r44;

     label59:
        $r54 = virtualinvoke r1.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.expr.Expression binaryExpression(int,groovyjarjarantlr.collections.AST)>(202, r0);

        return $r54;

     label60:
        $r43 = virtualinvoke r1.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.expr.Expression binaryExpression(int,groovyjarjarantlr.collections.AST)>(212, r0);

        return $r43;

     label61:
        $r14 = virtualinvoke r1.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.expr.Expression binaryExpression(int,groovyjarjarantlr.collections.AST)>(206, r0);

        return $r14;

     label62:
        $r34 = virtualinvoke r1.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.expr.Expression binaryExpression(int,groovyjarjarantlr.collections.AST)>(216, r0);

        return $r34;

     label63:
        $r17 = virtualinvoke r1.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.expr.Expression binaryExpression(int,groovyjarjarantlr.collections.AST)>(203, r0);

        return $r17;

     label64:
        $r42 = virtualinvoke r1.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.expr.Expression binaryExpression(int,groovyjarjarantlr.collections.AST)>(213, r0);

        return $r42;

     label65:
        $r16 = virtualinvoke r1.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.expr.Expression binaryExpression(int,groovyjarjarantlr.collections.AST)>(205, r0);

        return $r16;

     label66:
        $r41 = virtualinvoke r1.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.expr.Expression binaryExpression(int,groovyjarjarantlr.collections.AST)>(215, r0);

        return $r41;

     label67:
        $r21 = virtualinvoke r1.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.expr.Expression binaryExpression(int,groovyjarjarantlr.collections.AST)>(280, r0);

        return $r21;

     label68:
        $r38 = virtualinvoke r1.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.expr.Expression binaryExpression(int,groovyjarjarantlr.collections.AST)>(285, r0);

        return $r38;

     label69:
        $r56 = virtualinvoke r1.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.expr.Expression binaryExpression(int,groovyjarjarantlr.collections.AST)>(281, r0);

        return $r56;

     label70:
        $r40 = virtualinvoke r1.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.expr.Expression binaryExpression(int,groovyjarjarantlr.collections.AST)>(286, r0);

        return $r40;

     label71:
        $r55 = virtualinvoke r1.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.expr.Expression binaryExpression(int,groovyjarjarantlr.collections.AST)>(282, r0);

        return $r55;

     label72:
        $r39 = virtualinvoke r1.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.expr.Expression binaryExpression(int,groovyjarjarantlr.collections.AST)>(287, r0);

        return $r39;

     label73:
        $r90 = virtualinvoke r1.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.expr.Expression declarationExpression(groovyjarjarantlr.collections.AST)>(r0);

        return $r90;

     label74:
        $r29 = virtualinvoke r1.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.expr.Expression binaryExpression(int,groovyjarjarantlr.collections.AST)>(90, r0);

        return $r29;

     label75:
        $r28 = virtualinvoke r1.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.expr.Expression binaryExpression(int,groovyjarjarantlr.collections.AST)>(94, r0);

        return $r28;

     label76:
        $r20 = virtualinvoke r1.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.expr.Expression rangeExpression(groovyjarjarantlr.collections.AST,boolean)>(r0, 1);

        return $r20;

     label77:
        $r19 = virtualinvoke r1.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.expr.Expression rangeExpression(groovyjarjarantlr.collections.AST,boolean)>(r0, 0);

        return $r19;

     label78:
        $r73 = virtualinvoke r1.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.expr.Expression dynamicMemberExpression(groovyjarjarantlr.collections.AST)>(r0);

        return $r73;

     label79:
        $r49 = virtualinvoke r1.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.expr.Expression binaryExpression(int,groovyjarjarantlr.collections.AST)>(573, r0);

        return $r49;

     label80:
        $r66 = new org.codehaus.groovy.ast.expr.AnnotationConstantExpression;

        $r67 = virtualinvoke r1.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.AnnotationNode 'annotation'(groovyjarjarantlr.collections.AST)>(r0);

        specialinvoke $r66.<org.codehaus.groovy.ast.expr.AnnotationConstantExpression: void <init>(org.codehaus.groovy.ast.AnnotationNode)>($r67);

        return $r66;

     label81:
        $r65 = specialinvoke r1.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.expr.ClosureListExpression closureListExpression(groovyjarjarantlr.collections.AST)>(r0);

        return $r65;

     label82:
        virtualinvoke r1.<org.codehaus.groovy.antlr.AntlrParserPlugin: void unknownAST(groovyjarjarantlr.collections.AST)>(r0);

        return null;
    }

    private org.codehaus.groovy.ast.expr.ClosureListExpression closureListExpression(groovyjarjarantlr.collections.AST)
    {
        org.codehaus.groovy.antlr.AntlrParserPlugin r3;
        org.codehaus.groovy.ast.expr.ClosureListExpression $r2;
        org.codehaus.groovy.ast.expr.EmptyExpression $r4;
        org.codehaus.groovy.ast.expr.Expression $r5;
        java.util.LinkedList $r1;
        groovyjarjarantlr.collections.AST r0, r6;
        boolean $z0;

        r3 := @this: org.codehaus.groovy.antlr.AntlrParserPlugin;

        r0 := @parameter0: groovyjarjarantlr.collections.AST;

        r6 = interfaceinvoke r0.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getFirstChild()>();

        $r1 = new java.util.LinkedList;

        specialinvoke $r1.<java.util.LinkedList: void <init>()>();

     label1:
        if r6 == null goto label4;

        $z0 = staticinvoke <org.codehaus.groovy.antlr.AntlrParserPlugin: boolean isType(int,groovyjarjarantlr.collections.AST)>(27, r6);

        if $z0 == 0 goto label2;

        $r5 = virtualinvoke r3.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.expr.Expression expression(groovyjarjarantlr.collections.AST)>(r6);

        virtualinvoke r3.<org.codehaus.groovy.antlr.AntlrParserPlugin: void configureAST(org.codehaus.groovy.ast.ASTNode,groovyjarjarantlr.collections.AST)>($r5, r6);

        virtualinvoke $r1.<java.util.LinkedList: boolean add(java.lang.Object)>($r5);

        goto label3;

     label2:
        virtualinvoke r3.<org.codehaus.groovy.antlr.AntlrParserPlugin: void assertNodeType(int,groovyjarjarantlr.collections.AST)>(36, r6);

        $r4 = <org.codehaus.groovy.ast.expr.EmptyExpression: org.codehaus.groovy.ast.expr.EmptyExpression INSTANCE>;

        virtualinvoke $r1.<java.util.LinkedList: boolean add(java.lang.Object)>($r4);

     label3:
        r6 = interfaceinvoke r6.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getNextSibling()>();

        goto label1;

     label4:
        $r2 = new org.codehaus.groovy.ast.expr.ClosureListExpression;

        specialinvoke $r2.<org.codehaus.groovy.ast.expr.ClosureListExpression: void <init>(java.util.List)>($r1);

        virtualinvoke r3.<org.codehaus.groovy.antlr.AntlrParserPlugin: void configureAST(org.codehaus.groovy.ast.ASTNode,groovyjarjarantlr.collections.AST)>($r2, r0);

        return $r2;
    }

    protected org.codehaus.groovy.ast.expr.Expression dynamicMemberExpression(groovyjarjarantlr.collections.AST)
    {
        org.codehaus.groovy.antlr.AntlrParserPlugin r2;
        org.codehaus.groovy.ast.expr.Expression $r3;
        groovyjarjarantlr.collections.AST r0, $r1;

        r2 := @this: org.codehaus.groovy.antlr.AntlrParserPlugin;

        r0 := @parameter0: groovyjarjarantlr.collections.AST;

        $r1 = interfaceinvoke r0.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getFirstChild()>();

        $r3 = virtualinvoke r2.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.expr.Expression expression(groovyjarjarantlr.collections.AST)>($r1);

        return $r3;
    }

    protected org.codehaus.groovy.ast.expr.Expression ternaryExpression(groovyjarjarantlr.collections.AST)
    {
        org.codehaus.groovy.ast.expr.BooleanExpression $r8;
        org.codehaus.groovy.antlr.AntlrParserPlugin r2;
        org.codehaus.groovy.ast.expr.ElvisOperatorExpression $r10;
        org.codehaus.groovy.ast.expr.TernaryExpression $r9, r11;
        org.codehaus.groovy.ast.expr.Expression $r3, $r5, $r7;
        groovyjarjarantlr.collections.AST r0, $r1, $r4, $r6;

        r2 := @this: org.codehaus.groovy.antlr.AntlrParserPlugin;

        r0 := @parameter0: groovyjarjarantlr.collections.AST;

        $r1 = interfaceinvoke r0.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getFirstChild()>();

        $r3 = virtualinvoke r2.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.expr.Expression expression(groovyjarjarantlr.collections.AST)>($r1);

        $r4 = interfaceinvoke $r1.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getNextSibling()>();

        $r5 = virtualinvoke r2.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.expr.Expression expression(groovyjarjarantlr.collections.AST)>($r4);

        $r6 = interfaceinvoke $r4.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getNextSibling()>();

        if $r6 != null goto label1;

        $r10 = new org.codehaus.groovy.ast.expr.ElvisOperatorExpression;

        specialinvoke $r10.<org.codehaus.groovy.ast.expr.ElvisOperatorExpression: void <init>(org.codehaus.groovy.ast.expr.Expression,org.codehaus.groovy.ast.expr.Expression)>($r3, $r5);

        r11 = $r10;

        goto label2;

     label1:
        $r7 = virtualinvoke r2.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.expr.Expression expression(groovyjarjarantlr.collections.AST)>($r6);

        $r8 = new org.codehaus.groovy.ast.expr.BooleanExpression;

        specialinvoke $r8.<org.codehaus.groovy.ast.expr.BooleanExpression: void <init>(org.codehaus.groovy.ast.expr.Expression)>($r3);

        virtualinvoke $r8.<org.codehaus.groovy.ast.expr.BooleanExpression: void setSourcePosition(org.codehaus.groovy.ast.ASTNode)>($r3);

        $r9 = new org.codehaus.groovy.ast.expr.TernaryExpression;

        specialinvoke $r9.<org.codehaus.groovy.ast.expr.TernaryExpression: void <init>(org.codehaus.groovy.ast.expr.BooleanExpression,org.codehaus.groovy.ast.expr.Expression,org.codehaus.groovy.ast.expr.Expression)>($r8, $r5, $r7);

        r11 = $r9;

     label2:
        virtualinvoke r2.<org.codehaus.groovy.antlr.AntlrParserPlugin: void configureAST(org.codehaus.groovy.ast.ASTNode,groovyjarjarantlr.collections.AST)>(r11, r0);

        return r11;
    }

    protected org.codehaus.groovy.ast.expr.Expression variableExpression(groovyjarjarantlr.collections.AST)
    {
        org.codehaus.groovy.antlr.AntlrParserPlugin r3;
        org.codehaus.groovy.ast.expr.VariableExpression $r2;
        java.lang.String $r1;
        groovyjarjarantlr.collections.AST r0;

        r3 := @this: org.codehaus.groovy.antlr.AntlrParserPlugin;

        r0 := @parameter0: groovyjarjarantlr.collections.AST;

        $r1 = interfaceinvoke r0.<groovyjarjarantlr.collections.AST: java.lang.String getText()>();

        $r2 = new org.codehaus.groovy.ast.expr.VariableExpression;

        specialinvoke $r2.<org.codehaus.groovy.ast.expr.VariableExpression: void <init>(java.lang.String)>($r1);

        virtualinvoke r3.<org.codehaus.groovy.antlr.AntlrParserPlugin: void configureAST(org.codehaus.groovy.ast.ASTNode,groovyjarjarantlr.collections.AST)>($r2, r0);

        return $r2;
    }

    protected org.codehaus.groovy.ast.expr.Expression rangeExpression(groovyjarjarantlr.collections.AST, boolean)
    {
        org.codehaus.groovy.antlr.AntlrParserPlugin r2;
        org.codehaus.groovy.ast.expr.RangeExpression $r6;
        org.codehaus.groovy.ast.expr.Expression $r3, $r5;
        groovyjarjarantlr.collections.AST r0, $r1, $r4;
        boolean z0;

        r2 := @this: org.codehaus.groovy.antlr.AntlrParserPlugin;

        r0 := @parameter0: groovyjarjarantlr.collections.AST;

        z0 := @parameter1: boolean;

        $r1 = interfaceinvoke r0.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getFirstChild()>();

        $r3 = virtualinvoke r2.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.expr.Expression expression(groovyjarjarantlr.collections.AST)>($r1);

        $r4 = interfaceinvoke $r1.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getNextSibling()>();

        $r5 = virtualinvoke r2.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.expr.Expression expression(groovyjarjarantlr.collections.AST)>($r4);

        $r6 = new org.codehaus.groovy.ast.expr.RangeExpression;

        specialinvoke $r6.<org.codehaus.groovy.ast.expr.RangeExpression: void <init>(org.codehaus.groovy.ast.expr.Expression,org.codehaus.groovy.ast.expr.Expression,boolean)>($r3, $r5, z0);

        virtualinvoke r2.<org.codehaus.groovy.antlr.AntlrParserPlugin: void configureAST(org.codehaus.groovy.ast.ASTNode,groovyjarjarantlr.collections.AST)>($r6, r0);

        return $r6;
    }

    protected org.codehaus.groovy.ast.expr.Expression spreadExpression(groovyjarjarantlr.collections.AST)
    {
        org.codehaus.groovy.ast.expr.SpreadExpression $r5;
        org.codehaus.groovy.antlr.AntlrParserPlugin r3;
        org.codehaus.groovy.ast.expr.Expression $r4;
        groovyjarjarantlr.collections.AST r0, $r1, $r2;

        r3 := @this: org.codehaus.groovy.antlr.AntlrParserPlugin;

        r0 := @parameter0: groovyjarjarantlr.collections.AST;

        $r1 = interfaceinvoke r0.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getFirstChild()>();

        $r2 = interfaceinvoke $r1.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getFirstChild()>();

        $r4 = virtualinvoke r3.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.expr.Expression expression(groovyjarjarantlr.collections.AST)>($r2);

        $r5 = new org.codehaus.groovy.ast.expr.SpreadExpression;

        specialinvoke $r5.<org.codehaus.groovy.ast.expr.SpreadExpression: void <init>(org.codehaus.groovy.ast.expr.Expression)>($r4);

        virtualinvoke r3.<org.codehaus.groovy.antlr.AntlrParserPlugin: void configureAST(org.codehaus.groovy.ast.ASTNode,groovyjarjarantlr.collections.AST)>($r5, r0);

        return $r5;
    }

    protected org.codehaus.groovy.ast.expr.Expression spreadMapExpression(groovyjarjarantlr.collections.AST)
    {
        org.codehaus.groovy.ast.expr.SpreadMapExpression $r4;
        org.codehaus.groovy.antlr.AntlrParserPlugin r2;
        org.codehaus.groovy.ast.expr.Expression $r3;
        groovyjarjarantlr.collections.AST r0, $r1;

        r2 := @this: org.codehaus.groovy.antlr.AntlrParserPlugin;

        r0 := @parameter0: groovyjarjarantlr.collections.AST;

        $r1 = interfaceinvoke r0.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getFirstChild()>();

        $r3 = virtualinvoke r2.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.expr.Expression expression(groovyjarjarantlr.collections.AST)>($r1);

        $r4 = new org.codehaus.groovy.ast.expr.SpreadMapExpression;

        specialinvoke $r4.<org.codehaus.groovy.ast.expr.SpreadMapExpression: void <init>(org.codehaus.groovy.ast.expr.Expression)>($r3);

        virtualinvoke r2.<org.codehaus.groovy.antlr.AntlrParserPlugin: void configureAST(org.codehaus.groovy.ast.ASTNode,groovyjarjarantlr.collections.AST)>($r4, r0);

        return $r4;
    }

    protected org.codehaus.groovy.ast.expr.Expression methodPointerExpression(groovyjarjarantlr.collections.AST)
    {
        org.codehaus.groovy.antlr.AntlrParserPlugin r2;
        org.codehaus.groovy.ast.expr.ConstantExpression $r5;
        org.codehaus.groovy.ast.expr.MethodPointerExpression $r7;
        org.codehaus.groovy.ast.expr.Expression $r3, r8;
        java.lang.String $r6;
        groovyjarjarantlr.collections.AST r0, $r1, $r4;
        boolean $z0;

        r2 := @this: org.codehaus.groovy.antlr.AntlrParserPlugin;

        r0 := @parameter0: groovyjarjarantlr.collections.AST;

        $r1 = interfaceinvoke r0.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getFirstChild()>();

        $r3 = virtualinvoke r2.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.expr.Expression expression(groovyjarjarantlr.collections.AST)>($r1);

        $r4 = interfaceinvoke $r1.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getNextSibling()>();

        $z0 = staticinvoke <org.codehaus.groovy.antlr.AntlrParserPlugin: boolean isType(int,groovyjarjarantlr.collections.AST)>(52, $r4);

        if $z0 == 0 goto label1;

        r8 = virtualinvoke r2.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.expr.Expression expression(groovyjarjarantlr.collections.AST)>($r4);

        goto label2;

     label1:
        $r5 = new org.codehaus.groovy.ast.expr.ConstantExpression;

        $r6 = virtualinvoke r2.<org.codehaus.groovy.antlr.AntlrParserPlugin: java.lang.String identifier(groovyjarjarantlr.collections.AST)>($r4);

        specialinvoke $r5.<org.codehaus.groovy.ast.expr.ConstantExpression: void <init>(java.lang.Object)>($r6);

        r8 = $r5;

     label2:
        virtualinvoke r2.<org.codehaus.groovy.antlr.AntlrParserPlugin: void configureAST(org.codehaus.groovy.ast.ASTNode,groovyjarjarantlr.collections.AST)>(r8, $r4);

        $r7 = new org.codehaus.groovy.ast.expr.MethodPointerExpression;

        specialinvoke $r7.<org.codehaus.groovy.ast.expr.MethodPointerExpression: void <init>(org.codehaus.groovy.ast.expr.Expression,org.codehaus.groovy.ast.expr.Expression)>($r3, r8);

        virtualinvoke r2.<org.codehaus.groovy.antlr.AntlrParserPlugin: void configureAST(org.codehaus.groovy.ast.ASTNode,groovyjarjarantlr.collections.AST)>($r7, r0);

        return $r7;
    }

    protected org.codehaus.groovy.ast.expr.Expression listExpression(groovyjarjarantlr.collections.AST)
    {
        org.codehaus.groovy.ast.expr.ListExpression $r4;
        org.codehaus.groovy.antlr.AntlrParserPlugin r3;
        java.util.ArrayList $r0;
        int $i0;
        org.codehaus.groovy.ast.expr.Expression $r6;
        groovyjarjarantlr.collections.AST r1, $r2, r5;

        r3 := @this: org.codehaus.groovy.antlr.AntlrParserPlugin;

        r1 := @parameter0: groovyjarjarantlr.collections.AST;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r2 = interfaceinvoke r1.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getFirstChild()>();

        virtualinvoke r3.<org.codehaus.groovy.antlr.AntlrParserPlugin: void assertNodeType(int,groovyjarjarantlr.collections.AST)>(32, $r2);

        r5 = interfaceinvoke $r2.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getFirstChild()>();

     label1:
        if r5 == null goto label5;

        $i0 = interfaceinvoke r5.<groovyjarjarantlr.collections.AST: int getType()>();

        lookupswitch($i0)
        {
            case 53: goto label2;
            case 55: goto label3;
            default: goto label4;
        };

     label2:
        virtualinvoke r3.<org.codehaus.groovy.antlr.AntlrParserPlugin: void assertNodeType(int,groovyjarjarantlr.collections.AST)>(96, r5);

        goto label4;

     label3:
        virtualinvoke r3.<org.codehaus.groovy.antlr.AntlrParserPlugin: void assertNodeType(int,groovyjarjarantlr.collections.AST)>(54, r5);

     label4:
        $r6 = virtualinvoke r3.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.expr.Expression expression(groovyjarjarantlr.collections.AST)>(r5);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r6);

        r5 = interfaceinvoke r5.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getNextSibling()>();

        goto label1;

     label5:
        $r4 = new org.codehaus.groovy.ast.expr.ListExpression;

        specialinvoke $r4.<org.codehaus.groovy.ast.expr.ListExpression: void <init>(java.util.List)>($r0);

        virtualinvoke r3.<org.codehaus.groovy.antlr.AntlrParserPlugin: void configureAST(org.codehaus.groovy.ast.ASTNode,groovyjarjarantlr.collections.AST)>($r4, r1);

        return $r4;
    }

    protected org.codehaus.groovy.ast.expr.Expression mapExpression(groovyjarjarantlr.collections.AST)
    {
        org.codehaus.groovy.antlr.AntlrParserPlugin r4;
        org.codehaus.groovy.ast.expr.MapExpression $r3;
        java.util.ArrayList $r0;
        int $i0;
        groovyjarjarantlr.collections.AST r1, $r2, r5;
        org.codehaus.groovy.ast.expr.MapEntryExpression $r6;

        r4 := @this: org.codehaus.groovy.antlr.AntlrParserPlugin;

        r1 := @parameter0: groovyjarjarantlr.collections.AST;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r2 = interfaceinvoke r1.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getFirstChild()>();

        if $r2 == null goto label6;

        virtualinvoke r4.<org.codehaus.groovy.antlr.AntlrParserPlugin: void assertNodeType(int,groovyjarjarantlr.collections.AST)>(32, $r2);

        r5 = interfaceinvoke $r2.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getFirstChild()>();

     label1:
        if r5 == null goto label6;

        $i0 = interfaceinvoke r5.<groovyjarjarantlr.collections.AST: int getType()>();

        tableswitch($i0)
        {
            case 53: goto label2;
            case 54: goto label3;
            case 55: goto label2;
            default: goto label4;
        };

     label2:
        goto label5;

     label3:
        virtualinvoke r4.<org.codehaus.groovy.antlr.AntlrParserPlugin: void assertNodeType(int,groovyjarjarantlr.collections.AST)>(55, r5);

        goto label5;

     label4:
        virtualinvoke r4.<org.codehaus.groovy.antlr.AntlrParserPlugin: void assertNodeType(int,groovyjarjarantlr.collections.AST)>(53, r5);

     label5:
        $r6 = virtualinvoke r4.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.expr.MapEntryExpression mapEntryExpression(groovyjarjarantlr.collections.AST)>(r5);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r6);

        r5 = interfaceinvoke r5.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getNextSibling()>();

        goto label1;

     label6:
        $r3 = new org.codehaus.groovy.ast.expr.MapExpression;

        specialinvoke $r3.<org.codehaus.groovy.ast.expr.MapExpression: void <init>(java.util.List)>($r0);

        virtualinvoke r4.<org.codehaus.groovy.antlr.AntlrParserPlugin: void configureAST(org.codehaus.groovy.ast.ASTNode,groovyjarjarantlr.collections.AST)>($r3, r1);

        return $r3;
    }

    protected org.codehaus.groovy.ast.expr.MapEntryExpression mapEntryExpression(groovyjarjarantlr.collections.AST)
    {
        org.codehaus.groovy.antlr.AntlrParserPlugin r2;
        int $i0;
        org.codehaus.groovy.ast.expr.Expression $r3, $r5, $r8, $r9;
        groovyjarjarantlr.collections.AST r0, $r1, $r4, $r7;
        org.codehaus.groovy.ast.expr.MapEntryExpression $r6, $r10;

        r2 := @this: org.codehaus.groovy.antlr.AntlrParserPlugin;

        r0 := @parameter0: groovyjarjarantlr.collections.AST;

        $i0 = interfaceinvoke r0.<groovyjarjarantlr.collections.AST: int getType()>();

        if $i0 != 55 goto label1;

        $r7 = interfaceinvoke r0.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getFirstChild()>();

        $r8 = virtualinvoke r2.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.expr.Expression spreadMapExpression(groovyjarjarantlr.collections.AST)>(r0);

        $r9 = virtualinvoke r2.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.expr.Expression expression(groovyjarjarantlr.collections.AST)>($r7);

        $r10 = new org.codehaus.groovy.ast.expr.MapEntryExpression;

        specialinvoke $r10.<org.codehaus.groovy.ast.expr.MapEntryExpression: void <init>(org.codehaus.groovy.ast.expr.Expression,org.codehaus.groovy.ast.expr.Expression)>($r8, $r9);

        virtualinvoke r2.<org.codehaus.groovy.antlr.AntlrParserPlugin: void configureAST(org.codehaus.groovy.ast.ASTNode,groovyjarjarantlr.collections.AST)>($r10, r0);

        return $r10;

     label1:
        $r1 = interfaceinvoke r0.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getFirstChild()>();

        $r3 = virtualinvoke r2.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.expr.Expression expression(groovyjarjarantlr.collections.AST)>($r1);

        $r4 = interfaceinvoke $r1.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getNextSibling()>();

        $r5 = virtualinvoke r2.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.expr.Expression expression(groovyjarjarantlr.collections.AST)>($r4);

        $r6 = new org.codehaus.groovy.ast.expr.MapEntryExpression;

        specialinvoke $r6.<org.codehaus.groovy.ast.expr.MapEntryExpression: void <init>(org.codehaus.groovy.ast.expr.Expression,org.codehaus.groovy.ast.expr.Expression)>($r3, $r5);

        virtualinvoke r2.<org.codehaus.groovy.antlr.AntlrParserPlugin: void configureAST(org.codehaus.groovy.ast.ASTNode,groovyjarjarantlr.collections.AST)>($r6, r0);

        return $r6;
    }

    protected org.codehaus.groovy.ast.expr.Expression instanceofExpression(groovyjarjarantlr.collections.AST)
    {
        org.codehaus.groovy.antlr.AntlrParserPlugin r2;
        org.codehaus.groovy.ast.ClassNode $r5;
        org.codehaus.groovy.syntax.Token $r8;
        org.codehaus.groovy.ast.expr.ClassExpression $r6;
        org.codehaus.groovy.ast.expr.BinaryExpression $r7;
        org.codehaus.groovy.ast.expr.Expression $r3;
        groovyjarjarantlr.collections.AST r0, $r1, $r4;

        r2 := @this: org.codehaus.groovy.antlr.AntlrParserPlugin;

        r0 := @parameter0: groovyjarjarantlr.collections.AST;

        $r1 = interfaceinvoke r0.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getFirstChild()>();

        $r3 = virtualinvoke r2.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.expr.Expression expression(groovyjarjarantlr.collections.AST)>($r1);

        $r4 = interfaceinvoke $r1.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getNextSibling()>();

        $r5 = virtualinvoke r2.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.ClassNode buildName(groovyjarjarantlr.collections.AST)>($r4);

        virtualinvoke r2.<org.codehaus.groovy.antlr.AntlrParserPlugin: void assertTypeNotNull(org.codehaus.groovy.ast.ClassNode,groovyjarjarantlr.collections.AST)>($r5, $r4);

        $r6 = new org.codehaus.groovy.ast.expr.ClassExpression;

        specialinvoke $r6.<org.codehaus.groovy.ast.expr.ClassExpression: void <init>(org.codehaus.groovy.ast.ClassNode)>($r5);

        virtualinvoke r2.<org.codehaus.groovy.antlr.AntlrParserPlugin: void configureAST(org.codehaus.groovy.ast.ASTNode,groovyjarjarantlr.collections.AST)>($r6, $r4);

        $r7 = new org.codehaus.groovy.ast.expr.BinaryExpression;

        $r8 = staticinvoke <org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.syntax.Token makeToken(int,groovyjarjarantlr.collections.AST)>(544, r0);

        specialinvoke $r7.<org.codehaus.groovy.ast.expr.BinaryExpression: void <init>(org.codehaus.groovy.ast.expr.Expression,org.codehaus.groovy.syntax.Token,org.codehaus.groovy.ast.expr.Expression)>($r3, $r8, $r6);

        virtualinvoke r2.<org.codehaus.groovy.antlr.AntlrParserPlugin: void configureAST(org.codehaus.groovy.ast.ASTNode,groovyjarjarantlr.collections.AST)>($r7, r0);

        return $r7;
    }

    protected void assertTypeNotNull(org.codehaus.groovy.ast.ClassNode, groovyjarjarantlr.collections.AST)
    {
        org.codehaus.groovy.antlr.AntlrParserPlugin r8;
        org.codehaus.groovy.ast.ClassNode r0;
        org.codehaus.groovy.antlr.ASTRuntimeException $r1;
        java.lang.StringBuffer $r3, $r4, $r6;
        java.lang.String $r5, $r7;
        groovyjarjarantlr.collections.AST r2;

        r8 := @this: org.codehaus.groovy.antlr.AntlrParserPlugin;

        r0 := @parameter0: org.codehaus.groovy.ast.ClassNode;

        r2 := @parameter1: groovyjarjarantlr.collections.AST;

        if r0 != null goto label1;

        $r1 = new org.codehaus.groovy.antlr.ASTRuntimeException;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("No type available for: ");

        $r5 = staticinvoke <org.codehaus.groovy.antlr.AntlrParserPlugin: java.lang.String qualifiedName(groovyjarjarantlr.collections.AST)>(r2);

        $r6 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r1.<org.codehaus.groovy.antlr.ASTRuntimeException: void <init>(groovyjarjarantlr.collections.AST,java.lang.String)>(r2, $r7);

        throw $r1;

     label1:
        return;
    }

    protected org.codehaus.groovy.ast.expr.Expression asExpression(groovyjarjarantlr.collections.AST)
    {
        org.codehaus.groovy.antlr.AntlrParserPlugin r2;
        org.codehaus.groovy.ast.ClassNode $r5;
        org.codehaus.groovy.ast.expr.Expression $r3;
        org.codehaus.groovy.ast.expr.CastExpression $r6;
        groovyjarjarantlr.collections.AST r0, $r1, $r4;

        r2 := @this: org.codehaus.groovy.antlr.AntlrParserPlugin;

        r0 := @parameter0: groovyjarjarantlr.collections.AST;

        $r1 = interfaceinvoke r0.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getFirstChild()>();

        $r3 = virtualinvoke r2.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.expr.Expression expression(groovyjarjarantlr.collections.AST)>($r1);

        $r4 = interfaceinvoke $r1.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getNextSibling()>();

        $r5 = virtualinvoke r2.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.ClassNode buildName(groovyjarjarantlr.collections.AST)>($r4);

        $r6 = staticinvoke <org.codehaus.groovy.ast.expr.CastExpression: org.codehaus.groovy.ast.expr.CastExpression asExpression(org.codehaus.groovy.ast.ClassNode,org.codehaus.groovy.ast.expr.Expression)>($r5, $r3);

        return $r6;
    }

    protected org.codehaus.groovy.ast.expr.Expression castExpression(groovyjarjarantlr.collections.AST)
    {
        org.codehaus.groovy.antlr.AntlrParserPlugin r2;
        org.codehaus.groovy.ast.ClassNode $r3;
        org.codehaus.groovy.ast.expr.Expression $r5;
        org.codehaus.groovy.ast.expr.CastExpression $r6;
        groovyjarjarantlr.collections.AST r0, $r1, $r4;

        r2 := @this: org.codehaus.groovy.antlr.AntlrParserPlugin;

        r0 := @parameter0: groovyjarjarantlr.collections.AST;

        $r1 = interfaceinvoke r0.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getFirstChild()>();

        $r3 = virtualinvoke r2.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.ClassNode buildName(groovyjarjarantlr.collections.AST)>($r1);

        virtualinvoke r2.<org.codehaus.groovy.antlr.AntlrParserPlugin: void assertTypeNotNull(org.codehaus.groovy.ast.ClassNode,groovyjarjarantlr.collections.AST)>($r3, $r1);

        $r4 = interfaceinvoke $r1.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getNextSibling()>();

        $r5 = virtualinvoke r2.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.expr.Expression expression(groovyjarjarantlr.collections.AST)>($r4);

        $r6 = new org.codehaus.groovy.ast.expr.CastExpression;

        specialinvoke $r6.<org.codehaus.groovy.ast.expr.CastExpression: void <init>(org.codehaus.groovy.ast.ClassNode,org.codehaus.groovy.ast.expr.Expression)>($r3, $r5);

        virtualinvoke r2.<org.codehaus.groovy.antlr.AntlrParserPlugin: void configureAST(org.codehaus.groovy.ast.ASTNode,groovyjarjarantlr.collections.AST)>($r6, r0);

        return $r6;
    }

    protected org.codehaus.groovy.ast.expr.Expression indexExpression(groovyjarjarantlr.collections.AST)
    {
        org.codehaus.groovy.antlr.AntlrParserPlugin r2;
        org.codehaus.groovy.syntax.Token $r7;
        org.codehaus.groovy.ast.expr.BinaryExpression $r6;
        org.codehaus.groovy.ast.expr.Expression $r3, $r5;
        groovyjarjarantlr.collections.AST r0, $r1, $r4;

        r2 := @this: org.codehaus.groovy.antlr.AntlrParserPlugin;

        r0 := @parameter0: groovyjarjarantlr.collections.AST;

        $r1 = interfaceinvoke r0.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getFirstChild()>();

        $r3 = virtualinvoke r2.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.expr.Expression expression(groovyjarjarantlr.collections.AST)>($r1);

        $r4 = interfaceinvoke $r1.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getNextSibling()>();

        $r5 = virtualinvoke r2.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.expr.Expression expression(groovyjarjarantlr.collections.AST)>($r4);

        $r6 = new org.codehaus.groovy.ast.expr.BinaryExpression;

        $r7 = staticinvoke <org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.syntax.Token makeToken(int,groovyjarjarantlr.collections.AST)>(30, r0);

        specialinvoke $r6.<org.codehaus.groovy.ast.expr.BinaryExpression: void <init>(org.codehaus.groovy.ast.expr.Expression,org.codehaus.groovy.syntax.Token,org.codehaus.groovy.ast.expr.Expression)>($r3, $r7, $r5);

        virtualinvoke r2.<org.codehaus.groovy.antlr.AntlrParserPlugin: void configureAST(org.codehaus.groovy.ast.ASTNode,groovyjarjarantlr.collections.AST)>($r6, r0);

        return $r6;
    }

    protected org.codehaus.groovy.ast.expr.Expression binaryExpression(int, groovyjarjarantlr.collections.AST)
    {
        org.codehaus.groovy.antlr.AntlrParserPlugin r3;
        org.codehaus.groovy.syntax.Token $r1, $r44;
        groovyjarjarantlr.collections.AST r0, $r2, $r5;
        java.lang.StringBuffer $r9, $r10, $r12, $r13, $r15, $r16, $r19, $r20, $r23, $r24, $r27, $r28, $r31, $r32, $r35, $r36, $r39, $r40, $r46, $r47, $r50, $r51, $r54, $r55, $r58, $r59;
        org.codehaus.groovy.ast.expr.Expression $r4, $r62;
        java.lang.String $r14, $r17, $r22, $r25, $r30, $r33, $r38, $r41, $r49, $r52, $r60;
        org.codehaus.groovy.antlr.ASTRuntimeException $r8, $r18, $r26, $r34, $r45, $r53;
        org.codehaus.groovy.ast.expr.GStringExpression $r37;
        org.codehaus.groovy.ast.expr.MapExpression $r21;
        org.codehaus.groovy.ast.expr.ConstantExpression $r56;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10;
        org.codehaus.groovy.ast.expr.BinaryExpression $r42, $r43, $r48, $r63;
        int i0, $i1;
        org.codehaus.groovy.ast.expr.MethodCallExpression $r29;
        java.lang.Class $r6, $r7, $r11, $r61;
        java.lang.Object $r57;

        r3 := @this: org.codehaus.groovy.antlr.AntlrParserPlugin;

        i0 := @parameter0: int;

        r0 := @parameter1: groovyjarjarantlr.collections.AST;

        $r1 = staticinvoke <org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.syntax.Token makeToken(int,groovyjarjarantlr.collections.AST)>(i0, r0);

        $r2 = interfaceinvoke r0.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getFirstChild()>();

        $r4 = virtualinvoke r3.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.expr.Expression expression(groovyjarjarantlr.collections.AST)>($r2);

        $r5 = interfaceinvoke $r2.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getNextSibling()>();

        if $r5 != null goto label01;

        return $r4;

     label01:
        $z0 = staticinvoke <org.codehaus.groovy.syntax.Types: boolean ofType(int,int)>(i0, 1100);

        if $z0 == 0 goto label11;

        $z1 = $r4 instanceof org.codehaus.groovy.ast.expr.VariableExpression;

        if $z1 != 0 goto label11;

        $r6 = virtualinvoke $r4.<java.lang.Object: java.lang.Class getClass()>();

        $r7 = <org.codehaus.groovy.antlr.AntlrParserPlugin: java.lang.Class class$org$codehaus$groovy$ast$expr$PropertyExpression>;

        if $r7 != null goto label02;

        $r61 = staticinvoke <org.codehaus.groovy.antlr.AntlrParserPlugin: java.lang.Class class$(java.lang.String)>("org.codehaus.groovy.ast.expr.PropertyExpression");

        <org.codehaus.groovy.antlr.AntlrParserPlugin: java.lang.Class class$org$codehaus$groovy$ast$expr$PropertyExpression> = $r61;

        goto label03;

     label02:
        $r61 = <org.codehaus.groovy.antlr.AntlrParserPlugin: java.lang.Class class$org$codehaus$groovy$ast$expr$PropertyExpression>;

     label03:
        if $r6 == $r61 goto label11;

        $z2 = $r4 instanceof org.codehaus.groovy.ast.expr.FieldExpression;

        if $z2 != 0 goto label11;

        $z3 = $r4 instanceof org.codehaus.groovy.ast.expr.AttributeExpression;

        if $z3 != 0 goto label11;

        $z4 = $r4 instanceof org.codehaus.groovy.ast.expr.DeclarationExpression;

        if $z4 == 0 goto label04;

        goto label11;

     label04:
        $z5 = $r4 instanceof org.codehaus.groovy.ast.expr.ConstantExpression;

        if $z5 == 0 goto label05;

        $r53 = new org.codehaus.groovy.antlr.ASTRuntimeException;

        $r54 = new java.lang.StringBuffer;

        specialinvoke $r54.<java.lang.StringBuffer: void <init>()>();

        $r55 = virtualinvoke $r54.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n[");

        $r56 = (org.codehaus.groovy.ast.expr.ConstantExpression) $r4;

        $r57 = virtualinvoke $r56.<org.codehaus.groovy.ast.expr.ConstantExpression: java.lang.Object getValue()>();

        $r58 = virtualinvoke $r55.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r57);

        $r59 = virtualinvoke $r58.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("] is a constant expression, but it should be a variable expression");

        $r60 = virtualinvoke $r59.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r53.<org.codehaus.groovy.antlr.ASTRuntimeException: void <init>(groovyjarjarantlr.collections.AST,java.lang.String)>(r0, $r60);

        throw $r53;

     label05:
        $z6 = $r4 instanceof org.codehaus.groovy.ast.expr.BinaryExpression;

        if $z6 == 0 goto label07;

        $r42 = (org.codehaus.groovy.ast.expr.BinaryExpression) $r4;

        virtualinvoke $r42.<org.codehaus.groovy.ast.expr.BinaryExpression: org.codehaus.groovy.ast.expr.Expression getLeftExpression()>();

        $r43 = (org.codehaus.groovy.ast.expr.BinaryExpression) $r4;

        $r44 = virtualinvoke $r43.<org.codehaus.groovy.ast.expr.BinaryExpression: org.codehaus.groovy.syntax.Token getOperation()>();

        $i1 = virtualinvoke $r44.<org.codehaus.groovy.syntax.Token: int getType()>();

        $z10 = staticinvoke <org.codehaus.groovy.syntax.Types: boolean ofType(int,int)>($i1, 1100);

        if $z10 != 0 goto label06;

        if $i1 == 30 goto label06;

        $r45 = new org.codehaus.groovy.antlr.ASTRuntimeException;

        $r46 = new java.lang.StringBuffer;

        specialinvoke $r46.<java.lang.StringBuffer: void <init>()>();

        $r47 = virtualinvoke $r46.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n");

        $r48 = (org.codehaus.groovy.ast.expr.BinaryExpression) $r4;

        $r49 = virtualinvoke $r48.<org.codehaus.groovy.ast.expr.BinaryExpression: java.lang.String getText()>();

        $r50 = virtualinvoke $r47.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r49);

        $r51 = virtualinvoke $r50.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" is a binary expression, but it should be a variable expression");

        $r52 = virtualinvoke $r51.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r45.<org.codehaus.groovy.antlr.ASTRuntimeException: void <init>(groovyjarjarantlr.collections.AST,java.lang.String)>(r0, $r52);

        throw $r45;

     label06:
        goto label11;

     label07:
        $z7 = $r4 instanceof org.codehaus.groovy.ast.expr.GStringExpression;

        if $z7 == 0 goto label08;

        $r34 = new org.codehaus.groovy.antlr.ASTRuntimeException;

        $r35 = new java.lang.StringBuffer;

        specialinvoke $r35.<java.lang.StringBuffer: void <init>()>();

        $r36 = virtualinvoke $r35.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n\"");

        $r37 = (org.codehaus.groovy.ast.expr.GStringExpression) $r4;

        $r38 = virtualinvoke $r37.<org.codehaus.groovy.ast.expr.GStringExpression: java.lang.String getText()>();

        $r39 = virtualinvoke $r36.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r38);

        $r40 = virtualinvoke $r39.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\" is a GString expression, but it should be a variable expression");

        $r41 = virtualinvoke $r40.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r34.<org.codehaus.groovy.antlr.ASTRuntimeException: void <init>(groovyjarjarantlr.collections.AST,java.lang.String)>(r0, $r41);

        throw $r34;

     label08:
        $z8 = $r4 instanceof org.codehaus.groovy.ast.expr.MethodCallExpression;

        if $z8 == 0 goto label09;

        $r26 = new org.codehaus.groovy.antlr.ASTRuntimeException;

        $r27 = new java.lang.StringBuffer;

        specialinvoke $r27.<java.lang.StringBuffer: void <init>()>();

        $r28 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n\"");

        $r29 = (org.codehaus.groovy.ast.expr.MethodCallExpression) $r4;

        $r30 = virtualinvoke $r29.<org.codehaus.groovy.ast.expr.MethodCallExpression: java.lang.String getText()>();

        $r31 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r30);

        $r32 = virtualinvoke $r31.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\" is a method call expression, but it should be a variable expression");

        $r33 = virtualinvoke $r32.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r26.<org.codehaus.groovy.antlr.ASTRuntimeException: void <init>(groovyjarjarantlr.collections.AST,java.lang.String)>(r0, $r33);

        throw $r26;

     label09:
        $z9 = $r4 instanceof org.codehaus.groovy.ast.expr.MapExpression;

        if $z9 == 0 goto label10;

        $r18 = new org.codehaus.groovy.antlr.ASTRuntimeException;

        $r19 = new java.lang.StringBuffer;

        specialinvoke $r19.<java.lang.StringBuffer: void <init>()>();

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n\'");

        $r21 = (org.codehaus.groovy.ast.expr.MapExpression) $r4;

        $r22 = virtualinvoke $r21.<org.codehaus.groovy.ast.expr.MapExpression: java.lang.String getText()>();

        $r23 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r22);

        $r24 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' is a map expression, but it should be a variable expression");

        $r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r18.<org.codehaus.groovy.antlr.ASTRuntimeException: void <init>(groovyjarjarantlr.collections.AST,java.lang.String)>(r0, $r25);

        throw $r18;

     label10:
        $r8 = new org.codehaus.groovy.antlr.ASTRuntimeException;

        $r9 = new java.lang.StringBuffer;

        specialinvoke $r9.<java.lang.StringBuffer: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n");

        $r11 = virtualinvoke $r4.<java.lang.Object: java.lang.Class getClass()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", with its value \'");

        $r14 = virtualinvoke $r4.<org.codehaus.groovy.ast.expr.Expression: java.lang.String getText()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\', is a bad expression as the left hand side of an assignment operator");

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r8.<org.codehaus.groovy.antlr.ASTRuntimeException: void <init>(groovyjarjarantlr.collections.AST,java.lang.String)>(r0, $r17);

        throw $r8;

     label11:
        $r62 = virtualinvoke r3.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.expr.Expression expression(groovyjarjarantlr.collections.AST)>($r5);

        $r63 = new org.codehaus.groovy.ast.expr.BinaryExpression;

        specialinvoke $r63.<org.codehaus.groovy.ast.expr.BinaryExpression: void <init>(org.codehaus.groovy.ast.expr.Expression,org.codehaus.groovy.syntax.Token,org.codehaus.groovy.ast.expr.Expression)>($r4, $r1, $r62);

        virtualinvoke r3.<org.codehaus.groovy.antlr.AntlrParserPlugin: void configureAST(org.codehaus.groovy.ast.ASTNode,groovyjarjarantlr.collections.AST)>($r63, r0);

        return $r63;
    }

    protected org.codehaus.groovy.ast.expr.Expression prefixExpression(groovyjarjarantlr.collections.AST, int)
    {
        org.codehaus.groovy.ast.expr.PrefixExpression $r4;
        org.codehaus.groovy.antlr.AntlrParserPlugin r0;
        int i0;
        org.codehaus.groovy.ast.expr.Expression $r3;
        org.codehaus.groovy.syntax.Token $r5;
        groovyjarjarantlr.collections.AST r1, $r2;

        r0 := @this: org.codehaus.groovy.antlr.AntlrParserPlugin;

        r1 := @parameter0: groovyjarjarantlr.collections.AST;

        i0 := @parameter1: int;

        $r2 = interfaceinvoke r1.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getFirstChild()>();

        $r3 = virtualinvoke r0.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.expr.Expression expression(groovyjarjarantlr.collections.AST)>($r2);

        $r4 = new org.codehaus.groovy.ast.expr.PrefixExpression;

        $r5 = staticinvoke <org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.syntax.Token makeToken(int,groovyjarjarantlr.collections.AST)>(i0, r1);

        specialinvoke $r4.<org.codehaus.groovy.ast.expr.PrefixExpression: void <init>(org.codehaus.groovy.syntax.Token,org.codehaus.groovy.ast.expr.Expression)>($r5, $r3);

        virtualinvoke r0.<org.codehaus.groovy.antlr.AntlrParserPlugin: void configureAST(org.codehaus.groovy.ast.ASTNode,groovyjarjarantlr.collections.AST)>($r4, r1);

        return $r4;
    }

    protected org.codehaus.groovy.ast.expr.Expression postfixExpression(groovyjarjarantlr.collections.AST, int)
    {
        org.codehaus.groovy.antlr.AntlrParserPlugin r0;
        org.codehaus.groovy.ast.expr.PostfixExpression $r4;
        int i0;
        org.codehaus.groovy.ast.expr.Expression $r3;
        org.codehaus.groovy.syntax.Token $r5;
        groovyjarjarantlr.collections.AST r1, $r2;

        r0 := @this: org.codehaus.groovy.antlr.AntlrParserPlugin;

        r1 := @parameter0: groovyjarjarantlr.collections.AST;

        i0 := @parameter1: int;

        $r2 = interfaceinvoke r1.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getFirstChild()>();

        $r3 = virtualinvoke r0.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.expr.Expression expression(groovyjarjarantlr.collections.AST)>($r2);

        $r4 = new org.codehaus.groovy.ast.expr.PostfixExpression;

        $r5 = staticinvoke <org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.syntax.Token makeToken(int,groovyjarjarantlr.collections.AST)>(i0, r1);

        specialinvoke $r4.<org.codehaus.groovy.ast.expr.PostfixExpression: void <init>(org.codehaus.groovy.ast.expr.Expression,org.codehaus.groovy.syntax.Token)>($r3, $r5);

        virtualinvoke r0.<org.codehaus.groovy.antlr.AntlrParserPlugin: void configureAST(org.codehaus.groovy.ast.ASTNode,groovyjarjarantlr.collections.AST)>($r4, r1);

        return $r4;
    }

    protected org.codehaus.groovy.ast.expr.BooleanExpression booleanExpression(groovyjarjarantlr.collections.AST)
    {
        org.codehaus.groovy.ast.expr.BooleanExpression $r0;
        org.codehaus.groovy.antlr.AntlrParserPlugin r1;
        org.codehaus.groovy.ast.expr.Expression $r3;
        groovyjarjarantlr.collections.AST r2;

        r1 := @this: org.codehaus.groovy.antlr.AntlrParserPlugin;

        r2 := @parameter0: groovyjarjarantlr.collections.AST;

        $r0 = new org.codehaus.groovy.ast.expr.BooleanExpression;

        $r3 = virtualinvoke r1.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.expr.Expression expression(groovyjarjarantlr.collections.AST)>(r2);

        specialinvoke $r0.<org.codehaus.groovy.ast.expr.BooleanExpression: void <init>(org.codehaus.groovy.ast.expr.Expression)>($r3);

        virtualinvoke r1.<org.codehaus.groovy.antlr.AntlrParserPlugin: void configureAST(org.codehaus.groovy.ast.ASTNode,groovyjarjarantlr.collections.AST)>($r0, r2);

        return $r0;
    }

    protected org.codehaus.groovy.ast.expr.Expression dotExpression(groovyjarjarantlr.collections.AST)
    {
        org.codehaus.groovy.ast.expr.PropertyExpression $r7;
        int $i0, $i1, $i2, $i3;
        org.codehaus.groovy.ast.expr.Expression $r3, $r5, $r6, $r9;
        boolean $z0, $z1, $z2;
        org.codehaus.groovy.antlr.AntlrParserPlugin r2;
        org.codehaus.groovy.ast.expr.AttributeExpression $r10;
        groovyjarjarantlr.collections.AST r0, $r1, $r4, $r8;

        r2 := @this: org.codehaus.groovy.antlr.AntlrParserPlugin;

        r0 := @parameter0: groovyjarjarantlr.collections.AST;

        $r1 = interfaceinvoke r0.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getFirstChild()>();

        if $r1 == null goto label8;

        $r4 = interfaceinvoke $r1.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getNextSibling()>();

        if $r4 == null goto label8;

        $r5 = virtualinvoke r2.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.expr.Expression expression(groovyjarjarantlr.collections.AST)>($r1);

        $z0 = staticinvoke <org.codehaus.groovy.antlr.AntlrParserPlugin: boolean isType(int,groovyjarjarantlr.collections.AST)>(51, $r4);

        if $z0 == 0 goto label4;

        $r8 = interfaceinvoke $r4.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getFirstChild()>();

        $r9 = virtualinvoke r2.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.expr.Expression expression(groovyjarjarantlr.collections.AST,boolean)>($r8, 1);

        $r10 = new org.codehaus.groovy.ast.expr.AttributeExpression;

        $i2 = interfaceinvoke r0.<groovyjarjarantlr.collections.AST: int getType()>();

        if $i2 == 87 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        specialinvoke $r10.<org.codehaus.groovy.ast.expr.AttributeExpression: void <init>(org.codehaus.groovy.ast.expr.Expression,org.codehaus.groovy.ast.expr.Expression,boolean)>($r5, $r9, $z1);

        $i3 = interfaceinvoke r0.<groovyjarjarantlr.collections.AST: int getType()>();

        if $i3 != 150 goto label3;

        virtualinvoke $r10.<org.codehaus.groovy.ast.expr.AttributeExpression: void setSpreadSafe(boolean)>(1);

     label3:
        virtualinvoke r2.<org.codehaus.groovy.antlr.AntlrParserPlugin: void configureAST(org.codehaus.groovy.ast.ASTNode,groovyjarjarantlr.collections.AST)>($r10, r0);

        return $r10;

     label4:
        $r6 = virtualinvoke r2.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.expr.Expression expression(groovyjarjarantlr.collections.AST,boolean)>($r4, 1);

        $r7 = new org.codehaus.groovy.ast.expr.PropertyExpression;

        $i0 = interfaceinvoke r0.<groovyjarjarantlr.collections.AST: int getType()>();

        if $i0 == 87 goto label5;

        $z2 = 1;

        goto label6;

     label5:
        $z2 = 0;

     label6:
        specialinvoke $r7.<org.codehaus.groovy.ast.expr.PropertyExpression: void <init>(org.codehaus.groovy.ast.expr.Expression,org.codehaus.groovy.ast.expr.Expression,boolean)>($r5, $r6, $z2);

        $i1 = interfaceinvoke r0.<groovyjarjarantlr.collections.AST: int getType()>();

        if $i1 != 150 goto label7;

        virtualinvoke $r7.<org.codehaus.groovy.ast.expr.PropertyExpression: void setSpreadSafe(boolean)>(1);

     label7:
        virtualinvoke r2.<org.codehaus.groovy.antlr.AntlrParserPlugin: void configureAST(org.codehaus.groovy.ast.ASTNode,groovyjarjarantlr.collections.AST)>($r7, r0);

        return $r7;

     label8:
        $r3 = virtualinvoke r2.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.expr.Expression methodCallExpression(groovyjarjarantlr.collections.AST)>(r0);

        return $r3;
    }

    protected org.codehaus.groovy.ast.expr.Expression specialConstructorCallExpression(groovyjarjarantlr.collections.AST, org.codehaus.groovy.ast.ClassNode)
    {
        org.codehaus.groovy.antlr.AntlrParserPlugin r2;
        org.codehaus.groovy.ast.expr.ConstructorCallExpression $r4;
        org.codehaus.groovy.ast.ClassNode r5;
        org.codehaus.groovy.ast.expr.Expression $r3;
        groovyjarjarantlr.collections.AST r0, $r1;

        r2 := @this: org.codehaus.groovy.antlr.AntlrParserPlugin;

        r0 := @parameter0: groovyjarjarantlr.collections.AST;

        r5 := @parameter1: org.codehaus.groovy.ast.ClassNode;

        $r1 = interfaceinvoke r0.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getFirstChild()>();

        $r3 = virtualinvoke r2.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.expr.Expression arguments(groovyjarjarantlr.collections.AST)>($r1);

        $r4 = new org.codehaus.groovy.ast.expr.ConstructorCallExpression;

        specialinvoke $r4.<org.codehaus.groovy.ast.expr.ConstructorCallExpression: void <init>(org.codehaus.groovy.ast.ClassNode,org.codehaus.groovy.ast.expr.Expression)>(r5, $r3);

        virtualinvoke r2.<org.codehaus.groovy.antlr.AntlrParserPlugin: void configureAST(org.codehaus.groovy.ast.ASTNode,groovyjarjarantlr.collections.AST)>($r4, r0);

        return $r4;
    }

    private int getTypeInParenthesis(groovyjarjarantlr.collections.AST)
    {
        org.codehaus.groovy.antlr.AntlrParserPlugin r1;
        int $i0, $i2;
        groovyjarjarantlr.collections.AST $r0, r2;
        boolean $z0, $z1;

        r1 := @this: org.codehaus.groovy.antlr.AntlrParserPlugin;

        r2 := @parameter0: groovyjarjarantlr.collections.AST;

        $z0 = staticinvoke <org.codehaus.groovy.antlr.AntlrParserPlugin: boolean isType(int,groovyjarjarantlr.collections.AST)>(27, r2);

        if $z0 != 0 goto label1;

        r2 = interfaceinvoke r2.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getFirstChild()>();

     label1:
        if r2 == null goto label2;

        $z1 = staticinvoke <org.codehaus.groovy.antlr.AntlrParserPlugin: boolean isType(int,groovyjarjarantlr.collections.AST)>(27, r2);

        if $z1 == 0 goto label2;

        $r0 = interfaceinvoke r2.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getNextSibling()>();

        if $r0 != null goto label2;

        r2 = interfaceinvoke r2.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getFirstChild()>();

        goto label1;

     label2:
        if r2 != null goto label3;

        $i2 = (int) -1;

        return $i2;

     label3:
        $i0 = interfaceinvoke r2.<groovyjarjarantlr.collections.AST: int getType()>();

        return $i0;
    }

    protected org.codehaus.groovy.ast.expr.Expression methodCallExpression(groovyjarjarantlr.collections.AST)
    {
        org.codehaus.groovy.ast.expr.ConstantExpression $r12, $r26;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, z12, $z13, $z14, z15, z16;
        org.codehaus.groovy.antlr.AntlrParserPlugin r3;
        org.codehaus.groovy.ast.expr.VariableExpression $r27;
        groovyjarjarantlr.collections.AST r0, $r1, $r2, $r13, $r28, r30;
        java.lang.StringBuffer $r20, $r21, $r23, $r24;
        int $i0;
        org.codehaus.groovy.ast.expr.MethodCallExpression $r7, $r17;
        java.lang.String $r5, $r8, $r9, $r22, $r25, $r32;
        org.codehaus.groovy.ast.expr.Expression $r6, $r14, $r16, $r18, r29, r31, r33;
        org.codehaus.groovy.ast.expr.ConstructorCallExpression $r10;
        org.codehaus.groovy.ast.ClassNode $r11;
        org.codehaus.groovy.antlr.ASTRuntimeException $r4, $r19;
        org.codehaus.groovy.ast.expr.AttributeExpression $r15;

        r3 := @this: org.codehaus.groovy.antlr.AntlrParserPlugin;

        r0 := @parameter0: groovyjarjarantlr.collections.AST;

        $r1 = interfaceinvoke r0.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getFirstChild()>();

        $r2 = interfaceinvoke $r1.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getNextSibling()>();

        z12 = 0;

        z16 = 0;

        z15 = 0;

        $z0 = staticinvoke <org.codehaus.groovy.antlr.AntlrParserPlugin: boolean isType(int,groovyjarjarantlr.collections.AST)>(151, $r1);

        $z1 = staticinvoke <org.codehaus.groovy.antlr.AntlrParserPlugin: boolean isType(int,groovyjarjarantlr.collections.AST)>(150, $r1);

        $z2 = staticinvoke <org.codehaus.groovy.antlr.AntlrParserPlugin: boolean isType(int,groovyjarjarantlr.collections.AST)>(87, $r1);

        if $z2 != 0 goto label01;

        if $z0 != 0 goto label01;

        if $z1 == 0 goto label02;

     label01:
        $r28 = interfaceinvoke $r1.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getFirstChild()>();

        r29 = virtualinvoke r3.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.expr.Expression expression(groovyjarjarantlr.collections.AST)>($r28);

        r30 = interfaceinvoke $r28.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getNextSibling()>();

        goto label03;

     label02:
        z12 = 1;

        z16 = 1;

        z15 = 1;

        r29 = <org.codehaus.groovy.ast.expr.VariableExpression: org.codehaus.groovy.ast.expr.VariableExpression THIS_EXPRESSION>;

        r30 = $r1;

     label03:
        $z3 = staticinvoke <org.codehaus.groovy.antlr.AntlrParserPlugin: boolean isType(int,groovyjarjarantlr.collections.AST)>(95, r30);

        if $z3 == 0 goto label04;

        z12 = 1;

        z16 = 1;

        z15 = 1;

        $r26 = new org.codehaus.groovy.ast.expr.ConstantExpression;

        specialinvoke $r26.<org.codehaus.groovy.ast.expr.ConstantExpression: void <init>(java.lang.Object)>("super");

        r31 = $r26;

        $r27 = <org.codehaus.groovy.ast.expr.VariableExpression: org.codehaus.groovy.ast.expr.VariableExpression THIS_EXPRESSION>;

        if r29 != $r27 goto label11;

        r29 = <org.codehaus.groovy.ast.expr.VariableExpression: org.codehaus.groovy.ast.expr.VariableExpression SUPER_EXPRESSION>;

        goto label11;

     label04:
        $z4 = virtualinvoke r3.<org.codehaus.groovy.antlr.AntlrParserPlugin: boolean isPrimitiveTypeLiteral(groovyjarjarantlr.collections.AST)>(r30);

        if $z4 == 0 goto label05;

        $r19 = new org.codehaus.groovy.antlr.ASTRuntimeException;

        $r20 = new java.lang.StringBuffer;

        specialinvoke $r20.<java.lang.StringBuffer: void <init>()>();

        $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Primitive type literal: ");

        $r22 = interfaceinvoke r30.<groovyjarjarantlr.collections.AST: java.lang.String getText()>();

        $r23 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r22);

        $r24 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" cannot be used as a method name");

        $r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r19.<org.codehaus.groovy.antlr.ASTRuntimeException: void <init>(groovyjarjarantlr.collections.AST,java.lang.String)>(r30, $r25);

        throw $r19;

     label05:
        $z5 = staticinvoke <org.codehaus.groovy.antlr.AntlrParserPlugin: boolean isType(int,groovyjarjarantlr.collections.AST)>(51, r30);

        if $z5 == 0 goto label08;

        $r13 = interfaceinvoke r30.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getFirstChild()>();

        $r14 = virtualinvoke r3.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.expr.Expression expression(groovyjarjarantlr.collections.AST,boolean)>($r13, 1);

        $r15 = new org.codehaus.groovy.ast.expr.AttributeExpression;

        $r18 = r29;

        $i0 = interfaceinvoke $r1.<groovyjarjarantlr.collections.AST: int getType()>();

        if $i0 == 87 goto label06;

        $z13 = 1;

        goto label07;

     label06:
        $z13 = 0;

     label07:
        specialinvoke $r15.<org.codehaus.groovy.ast.expr.AttributeExpression: void <init>(org.codehaus.groovy.ast.expr.Expression,org.codehaus.groovy.ast.expr.Expression,boolean)>($r18, $r14, $z13);

        virtualinvoke r3.<org.codehaus.groovy.antlr.AntlrParserPlugin: void configureAST(org.codehaus.groovy.ast.ASTNode,groovyjarjarantlr.collections.AST)>($r15, $r1);

        $r16 = virtualinvoke r3.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.expr.Expression arguments(groovyjarjarantlr.collections.AST)>($r2);

        $r17 = new org.codehaus.groovy.ast.expr.MethodCallExpression;

        specialinvoke $r17.<org.codehaus.groovy.ast.expr.MethodCallExpression: void <init>(org.codehaus.groovy.ast.expr.Expression,java.lang.String,org.codehaus.groovy.ast.expr.Expression)>($r15, "call", $r16);

        virtualinvoke r3.<org.codehaus.groovy.antlr.AntlrParserPlugin: void configureAST(org.codehaus.groovy.ast.ASTNode,groovyjarjarantlr.collections.AST)>($r17, r0);

        return $r17;

     label08:
        $z6 = staticinvoke <org.codehaus.groovy.antlr.AntlrParserPlugin: boolean isType(int,groovyjarjarantlr.collections.AST)>(52, r30);

        if $z6 != 0 goto label09;

        $z9 = staticinvoke <org.codehaus.groovy.antlr.AntlrParserPlugin: boolean isType(int,groovyjarjarantlr.collections.AST)>(84, r30);

        if $z9 != 0 goto label09;

        $z10 = staticinvoke <org.codehaus.groovy.antlr.AntlrParserPlugin: boolean isType(int,groovyjarjarantlr.collections.AST)>(47, r30);

        if $z10 != 0 goto label09;

        $z11 = staticinvoke <org.codehaus.groovy.antlr.AntlrParserPlugin: boolean isType(int,groovyjarjarantlr.collections.AST)>(85, r30);

        if $z11 == 0 goto label10;

     label09:
        r31 = virtualinvoke r3.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.expr.Expression expression(groovyjarjarantlr.collections.AST,boolean)>(r30, 1);

        goto label11;

     label10:
        z12 = 0;

        z16 = 0;

        z15 = 0;

        $r12 = new org.codehaus.groovy.ast.expr.ConstantExpression;

        specialinvoke $r12.<org.codehaus.groovy.ast.expr.ConstantExpression: void <init>(java.lang.Object)>("call");

        r31 = $r12;

        r29 = virtualinvoke r3.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.expr.Expression expression(groovyjarjarantlr.collections.AST,boolean)>(r30, 1);

     label11:
        $r32 = interfaceinvoke r30.<groovyjarjarantlr.collections.AST: java.lang.String getText()>();

        $z14 = virtualinvoke $r32.<java.lang.String: boolean equals(java.lang.Object)>("this");

        if $z14 != 0 goto label12;

        $r5 = interfaceinvoke r30.<groovyjarjarantlr.collections.AST: java.lang.String getText()>();

        $z7 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>("super");

        if $z7 == 0 goto label13;

     label12:
        $r4 = new org.codehaus.groovy.antlr.ASTRuntimeException;

        specialinvoke $r4.<org.codehaus.groovy.antlr.ASTRuntimeException: void <init>(groovyjarjarantlr.collections.AST,java.lang.String)>($r2, "Constructor call must be the first statement in a constructor.");

        throw $r4;

     label13:
        $r6 = virtualinvoke r3.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.expr.Expression arguments(groovyjarjarantlr.collections.AST)>($r2);

        $r7 = new org.codehaus.groovy.ast.expr.MethodCallExpression;

        specialinvoke $r7.<org.codehaus.groovy.ast.expr.MethodCallExpression: void <init>(org.codehaus.groovy.ast.expr.Expression,org.codehaus.groovy.ast.expr.Expression,org.codehaus.groovy.ast.expr.Expression)>(r29, r31, $r6);

        virtualinvoke $r7.<org.codehaus.groovy.ast.expr.MethodCallExpression: void setSafe(boolean)>($z0);

        virtualinvoke $r7.<org.codehaus.groovy.ast.expr.MethodCallExpression: void setSpreadSafe(boolean)>($z1);

        virtualinvoke $r7.<org.codehaus.groovy.ast.expr.MethodCallExpression: void setImplicitThis(boolean)>(z16);

        r33 = $r7;

        if z15 == 0 goto label14;

        $r8 = "this";

        $r9 = virtualinvoke $r7.<org.codehaus.groovy.ast.expr.MethodCallExpression: java.lang.String getMethodAsString()>();

        $z8 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>($r9);

        if $z8 == 0 goto label14;

        $r10 = new org.codehaus.groovy.ast.expr.ConstructorCallExpression;

        $r11 = r3.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.ClassNode classNode>;

        specialinvoke $r10.<org.codehaus.groovy.ast.expr.ConstructorCallExpression: void <init>(org.codehaus.groovy.ast.ClassNode,org.codehaus.groovy.ast.expr.Expression)>($r11, $r6);

        r33 = $r10;

     label14:
        virtualinvoke r3.<org.codehaus.groovy.antlr.AntlrParserPlugin: void configureAST(org.codehaus.groovy.ast.ASTNode,groovyjarjarantlr.collections.AST)>(r33, r0);

        return r33;
    }

    protected org.codehaus.groovy.ast.expr.Expression constructorCallExpression(groovyjarjarantlr.collections.AST)
    {
        org.codehaus.groovy.ast.expr.Expression $r3;
        java.lang.String $r9, $r10;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.codehaus.groovy.antlr.AntlrParserPlugin r1;
        org.codehaus.groovy.ast.expr.ConstructorCallExpression $r4;
        org.codehaus.groovy.ast.expr.ArrayExpression $r7;
        org.codehaus.groovy.ast.ClassNode $r2, r12;
        org.codehaus.groovy.antlr.ASTRuntimeException $r8;
        java.util.List $r6;
        groovyjarjarantlr.collections.AST r0, $r5, r11, $r13, r14;

        r1 := @this: org.codehaus.groovy.antlr.AntlrParserPlugin;

        r11 := @parameter0: groovyjarjarantlr.collections.AST;

        r0 = r11;

        $r2 = virtualinvoke r1.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.ClassNode makeTypeWithArguments(groovyjarjarantlr.collections.AST)>(r11);

        r12 = $r2;

        $z0 = staticinvoke <org.codehaus.groovy.antlr.AntlrParserPlugin: boolean isType(int,groovyjarjarantlr.collections.AST)>(44, r11);

        if $z0 != 0 goto label1;

        $z3 = staticinvoke <org.codehaus.groovy.antlr.AntlrParserPlugin: boolean isType(int,groovyjarjarantlr.collections.AST)>(190, r11);

        if $z3 == 0 goto label2;

     label1:
        r11 = interfaceinvoke r11.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getFirstChild()>();

     label2:
        $r13 = interfaceinvoke r11.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getNextSibling()>();

        r14 = $r13;

        if $r13 != null goto label3;

        $z1 = staticinvoke <org.codehaus.groovy.antlr.AntlrParserPlugin: boolean isType(int,groovyjarjarantlr.collections.AST)>(32, r11);

        if $z1 == 0 goto label3;

        r14 = r11;

        $r9 = "(";

        $r10 = virtualinvoke $r2.<org.codehaus.groovy.ast.ClassNode: java.lang.String getName()>();

        $z2 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>($r10);

        if $z2 == 0 goto label3;

        r12 = r1.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.ClassNode classNode>;

     label3:
        $z4 = staticinvoke <org.codehaus.groovy.antlr.AntlrParserPlugin: boolean isType(int,groovyjarjarantlr.collections.AST)>(16, r14);

        if $z4 == 0 goto label5;

        $r5 = interfaceinvoke r14.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getFirstChild()>();

        if $r5 != null goto label4;

        $r8 = new org.codehaus.groovy.antlr.ASTRuntimeException;

        specialinvoke $r8.<org.codehaus.groovy.antlr.ASTRuntimeException: void <init>(groovyjarjarantlr.collections.AST,java.lang.String)>(r14, "No expression for the array constructor call");

        throw $r8;

     label4:
        $r6 = virtualinvoke r1.<org.codehaus.groovy.antlr.AntlrParserPlugin: java.util.List arraySizeExpression(groovyjarjarantlr.collections.AST)>($r5);

        $r7 = new org.codehaus.groovy.ast.expr.ArrayExpression;

        specialinvoke $r7.<org.codehaus.groovy.ast.expr.ArrayExpression: void <init>(org.codehaus.groovy.ast.ClassNode,java.util.List,java.util.List)>(r12, null, $r6);

        virtualinvoke r1.<org.codehaus.groovy.antlr.AntlrParserPlugin: void configureAST(org.codehaus.groovy.ast.ASTNode,groovyjarjarantlr.collections.AST)>($r7, r0);

        return $r7;

     label5:
        $r3 = virtualinvoke r1.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.expr.Expression arguments(groovyjarjarantlr.collections.AST)>(r14);

        $r4 = new org.codehaus.groovy.ast.expr.ConstructorCallExpression;

        specialinvoke $r4.<org.codehaus.groovy.ast.expr.ConstructorCallExpression: void <init>(org.codehaus.groovy.ast.ClassNode,org.codehaus.groovy.ast.expr.Expression)>(r12, $r3);

        virtualinvoke r1.<org.codehaus.groovy.antlr.AntlrParserPlugin: void configureAST(org.codehaus.groovy.ast.ASTNode,groovyjarjarantlr.collections.AST)>($r4, r0);

        return $r4;
    }

    protected java.util.List arraySizeExpression(groovyjarjarantlr.collections.AST)
    {
        org.codehaus.groovy.antlr.AntlrParserPlugin r1;
        java.util.ArrayList $r2;
        java.util.List r6;
        org.codehaus.groovy.ast.expr.Expression r5;
        groovyjarjarantlr.collections.AST r0, $r3, $r4;
        boolean $z0;

        r1 := @this: org.codehaus.groovy.antlr.AntlrParserPlugin;

        r0 := @parameter0: groovyjarjarantlr.collections.AST;

        $z0 = staticinvoke <org.codehaus.groovy.antlr.AntlrParserPlugin: boolean isType(int,groovyjarjarantlr.collections.AST)>(16, r0);

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke r0.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getNextSibling()>();

        if $r3 == null goto label1;

        r5 = virtualinvoke r1.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.expr.Expression expression(groovyjarjarantlr.collections.AST)>($r3);

        goto label2;

     label1:
        r5 = <org.codehaus.groovy.ast.expr.ConstantExpression: org.codehaus.groovy.ast.expr.ConstantExpression EMTPY_EXPRESSION>;

     label2:
        $r4 = interfaceinvoke r0.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getFirstChild()>();

        r6 = virtualinvoke r1.<org.codehaus.groovy.antlr.AntlrParserPlugin: java.util.List arraySizeExpression(groovyjarjarantlr.collections.AST)>($r4);

        goto label4;

     label3:
        r5 = virtualinvoke r1.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.expr.Expression expression(groovyjarjarantlr.collections.AST)>(r0);

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r6 = $r2;

     label4:
        interfaceinvoke r6.<java.util.List: boolean add(java.lang.Object)>(r5);

        return r6;
    }

    protected org.codehaus.groovy.ast.expr.Expression arguments(groovyjarjarantlr.collections.AST)
    {
        org.codehaus.groovy.ast.expr.MapExpression $r7;
        java.util.ArrayList $r0, $r5;
        org.codehaus.groovy.ast.expr.NamedArgumentListExpression $r4;
        org.codehaus.groovy.ast.expr.Expression r12;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, z7;
        org.codehaus.groovy.antlr.AntlrParserPlugin r3;
        java.util.Iterator $r6;
        org.codehaus.groovy.ast.expr.ArgumentListExpression $r2, $r8;
        java.lang.Object $r9;
        groovyjarjarantlr.collections.AST r1, r10, r11;

        r3 := @this: org.codehaus.groovy.antlr.AntlrParserPlugin;

        r1 := @parameter0: groovyjarjarantlr.collections.AST;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        z7 = 0;

        r10 = r1;

     label01:
        if r10 == null goto label06;

        $z4 = staticinvoke <org.codehaus.groovy.antlr.AntlrParserPlugin: boolean isType(int,groovyjarjarantlr.collections.AST)>(32, r10);

        if $z4 == 0 goto label04;

        r11 = interfaceinvoke r10.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getFirstChild()>();

     label02:
        if r11 == null goto label03;

        $z6 = virtualinvoke r3.<org.codehaus.groovy.antlr.AntlrParserPlugin: boolean addArgumentExpression(groovyjarjarantlr.collections.AST,java.util.List)>(r11, $r0);

        z7 = z7 | $z6;

        r11 = interfaceinvoke r11.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getNextSibling()>();

        goto label02;

     label03:
        goto label05;

     label04:
        $z5 = virtualinvoke r3.<org.codehaus.groovy.antlr.AntlrParserPlugin: boolean addArgumentExpression(groovyjarjarantlr.collections.AST,java.util.List)>(r10, $r0);

        z7 = z7 | $z5;

     label05:
        r10 = interfaceinvoke r10.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getNextSibling()>();

        goto label01;

     label06:
        if z7 == 0 goto label11;

        $z0 = interfaceinvoke $r0.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label10;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        $r6 = interfaceinvoke $r0.<java.util.List: java.util.Iterator iterator()>();

     label07:
        $z1 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label09;

        $r9 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r12 = (org.codehaus.groovy.ast.expr.Expression) $r9;

        $z3 = r12 instanceof org.codehaus.groovy.ast.expr.MapEntryExpression;

        if $z3 != 0 goto label08;

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>(r12);

     label08:
        goto label07;

     label09:
        $z2 = interfaceinvoke $r5.<java.util.List: boolean isEmpty()>();

        if $z2 != 0 goto label10;

        interfaceinvoke $r0.<java.util.List: boolean removeAll(java.util.Collection)>($r5);

        $r7 = new org.codehaus.groovy.ast.expr.MapExpression;

        specialinvoke $r7.<org.codehaus.groovy.ast.expr.MapExpression: void <init>(java.util.List)>($r0);

        virtualinvoke r3.<org.codehaus.groovy.antlr.AntlrParserPlugin: void configureAST(org.codehaus.groovy.ast.ASTNode,groovyjarjarantlr.collections.AST)>($r7, r1);

        interfaceinvoke $r5.<java.util.List: void add(int,java.lang.Object)>(0, $r7);

        $r8 = new org.codehaus.groovy.ast.expr.ArgumentListExpression;

        specialinvoke $r8.<org.codehaus.groovy.ast.expr.ArgumentListExpression: void <init>(java.util.List)>($r5);

        virtualinvoke r3.<org.codehaus.groovy.antlr.AntlrParserPlugin: void configureAST(org.codehaus.groovy.ast.ASTNode,groovyjarjarantlr.collections.AST)>($r8, r1);

        return $r8;

     label10:
        $r4 = new org.codehaus.groovy.ast.expr.NamedArgumentListExpression;

        specialinvoke $r4.<org.codehaus.groovy.ast.expr.NamedArgumentListExpression: void <init>(java.util.List)>($r0);

        virtualinvoke r3.<org.codehaus.groovy.antlr.AntlrParserPlugin: void configureAST(org.codehaus.groovy.ast.ASTNode,groovyjarjarantlr.collections.AST)>($r4, r1);

        return $r4;

     label11:
        $r2 = new org.codehaus.groovy.ast.expr.ArgumentListExpression;

        specialinvoke $r2.<org.codehaus.groovy.ast.expr.ArgumentListExpression: void <init>(java.util.List)>($r0);

        virtualinvoke r3.<org.codehaus.groovy.antlr.AntlrParserPlugin: void configureAST(org.codehaus.groovy.ast.ASTNode,groovyjarjarantlr.collections.AST)>($r2, r1);

        return $r2;
    }

    protected boolean addArgumentExpression(groovyjarjarantlr.collections.AST, java.util.List)
    {
        org.codehaus.groovy.antlr.AntlrParserPlugin r1;
        java.util.List r3;
        int $i0;
        org.codehaus.groovy.ast.expr.Expression $r2, $r5, $r6;
        groovyjarjarantlr.collections.AST r0, $r4;
        org.codehaus.groovy.ast.expr.MapEntryExpression $r7;
        boolean $z0;

        r1 := @this: org.codehaus.groovy.antlr.AntlrParserPlugin;

        r0 := @parameter0: groovyjarjarantlr.collections.AST;

        r3 := @parameter1: java.util.List;

        $i0 = interfaceinvoke r0.<groovyjarjarantlr.collections.AST: int getType()>();

        if $i0 != 55 goto label1;

        $r4 = interfaceinvoke r0.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getFirstChild()>();

        $r5 = virtualinvoke r1.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.expr.Expression spreadMapExpression(groovyjarjarantlr.collections.AST)>(r0);

        $r6 = virtualinvoke r1.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.expr.Expression expression(groovyjarjarantlr.collections.AST)>($r4);

        $r7 = new org.codehaus.groovy.ast.expr.MapEntryExpression;

        specialinvoke $r7.<org.codehaus.groovy.ast.expr.MapEntryExpression: void <init>(org.codehaus.groovy.ast.expr.Expression,org.codehaus.groovy.ast.expr.Expression)>($r5, $r6);

        interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>($r7);

        return 1;

     label1:
        $r2 = virtualinvoke r1.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.expr.Expression expression(groovyjarjarantlr.collections.AST)>(r0);

        interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>($r2);

        $z0 = $r2 instanceof org.codehaus.groovy.ast.expr.MapEntryExpression;

        return $z0;
    }

    protected org.codehaus.groovy.ast.expr.Expression expressionList(groovyjarjarantlr.collections.AST)
    {
        org.codehaus.groovy.ast.expr.ListExpression $r2;
        org.codehaus.groovy.antlr.AntlrParserPlugin r3;
        java.util.ArrayList $r0;
        int $i0;
        java.lang.Object $r4;
        org.codehaus.groovy.ast.expr.Expression $r5, $r6;
        groovyjarjarantlr.collections.AST r1, r7;

        r3 := @this: org.codehaus.groovy.antlr.AntlrParserPlugin;

        r1 := @parameter0: groovyjarjarantlr.collections.AST;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        r7 = interfaceinvoke r1.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getFirstChild()>();

     label1:
        if r7 == null goto label2;

        $r6 = virtualinvoke r3.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.expr.Expression expression(groovyjarjarantlr.collections.AST)>(r7);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r6);

        r7 = interfaceinvoke r7.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getNextSibling()>();

        goto label1;

     label2:
        $i0 = interfaceinvoke $r0.<java.util.List: int size()>();

        if $i0 != 1 goto label3;

        $r4 = interfaceinvoke $r0.<java.util.List: java.lang.Object get(int)>(0);

        $r5 = (org.codehaus.groovy.ast.expr.Expression) $r4;

        return $r5;

     label3:
        $r2 = new org.codehaus.groovy.ast.expr.ListExpression;

        specialinvoke $r2.<org.codehaus.groovy.ast.expr.ListExpression: void <init>(java.util.List)>($r0);

        virtualinvoke $r2.<org.codehaus.groovy.ast.expr.ListExpression: void setWrapped(boolean)>(1);

        virtualinvoke r3.<org.codehaus.groovy.antlr.AntlrParserPlugin: void configureAST(org.codehaus.groovy.ast.ASTNode,groovyjarjarantlr.collections.AST)>($r2, r1);

        return $r2;
    }

    protected org.codehaus.groovy.ast.expr.ClosureExpression closureExpression(groovyjarjarantlr.collections.AST)
    {
        org.codehaus.groovy.ast.stmt.Statement $r5;
        org.codehaus.groovy.antlr.AntlrParserPlugin r2;
        org.codehaus.groovy.ast.expr.ClosureExpression $r6;
        org.codehaus.groovy.ast.Parameter[] r3;
        groovyjarjarantlr.collections.AST r0, $r1, r4;
        boolean $z0, $z1;

        r2 := @this: org.codehaus.groovy.antlr.AntlrParserPlugin;

        r0 := @parameter0: groovyjarjarantlr.collections.AST;

        $r1 = interfaceinvoke r0.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getFirstChild()>();

        r3 = null;

        r4 = $r1;

        $z0 = staticinvoke <org.codehaus.groovy.antlr.AntlrParserPlugin: boolean isType(int,groovyjarjarantlr.collections.AST)>(19, $r1);

        if $z0 != 0 goto label1;

        $z1 = staticinvoke <org.codehaus.groovy.antlr.AntlrParserPlugin: boolean isType(int,groovyjarjarantlr.collections.AST)>(50, $r1);

        if $z1 == 0 goto label2;

     label1:
        r3 = virtualinvoke r2.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.Parameter[] parameters(groovyjarjarantlr.collections.AST)>($r1);

        r4 = interfaceinvoke $r1.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getNextSibling()>();

     label2:
        $r5 = virtualinvoke r2.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.stmt.Statement statementListNoChild(groovyjarjarantlr.collections.AST,groovyjarjarantlr.collections.AST)>(r4, r0);

        $r6 = new org.codehaus.groovy.ast.expr.ClosureExpression;

        specialinvoke $r6.<org.codehaus.groovy.ast.expr.ClosureExpression: void <init>(org.codehaus.groovy.ast.Parameter[],org.codehaus.groovy.ast.stmt.Statement)>(r3, $r5);

        virtualinvoke r2.<org.codehaus.groovy.antlr.AntlrParserPlugin: void configureAST(org.codehaus.groovy.ast.ASTNode,groovyjarjarantlr.collections.AST)>($r6, r0);

        return $r6;
    }

    protected org.codehaus.groovy.ast.expr.Expression blockExpression(groovyjarjarantlr.collections.AST)
    {
        org.codehaus.groovy.ast.stmt.Statement $r3;
        org.codehaus.groovy.antlr.AntlrParserPlugin r2;
        org.codehaus.groovy.ast.expr.ArgumentListExpression $r5;
        org.codehaus.groovy.ast.expr.ConstantExpression $r10;
        org.codehaus.groovy.ast.expr.ClosureExpression $r4;
        org.codehaus.groovy.ast.Parameter[] $r8;
        int $i0;
        org.codehaus.groovy.ast.expr.MethodCallExpression $r6;
        org.codehaus.groovy.ast.expr.Expression $r9;
        groovyjarjarantlr.collections.AST r0, $r1, $r7;

        r2 := @this: org.codehaus.groovy.antlr.AntlrParserPlugin;

        r0 := @parameter0: groovyjarjarantlr.collections.AST;

        $r1 = interfaceinvoke r0.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getFirstChild()>();

        if $r1 != null goto label1;

        $r10 = <org.codehaus.groovy.ast.expr.ConstantExpression: org.codehaus.groovy.ast.expr.ConstantExpression NULL>;

        return $r10;

     label1:
        $i0 = interfaceinvoke $r1.<groovyjarjarantlr.collections.AST: int getType()>();

        if $i0 != 27 goto label2;

        $r7 = interfaceinvoke $r1.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getNextSibling()>();

        if $r7 != null goto label2;

        $r9 = virtualinvoke r2.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.expr.Expression expression(groovyjarjarantlr.collections.AST)>($r1);

        return $r9;

     label2:
        $r8 = <org.codehaus.groovy.ast.Parameter: org.codehaus.groovy.ast.Parameter[] EMPTY_ARRAY>;

        $r3 = virtualinvoke r2.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.stmt.Statement statementListNoChild(groovyjarjarantlr.collections.AST,groovyjarjarantlr.collections.AST)>($r1, r0);

        $r4 = new org.codehaus.groovy.ast.expr.ClosureExpression;

        specialinvoke $r4.<org.codehaus.groovy.ast.expr.ClosureExpression: void <init>(org.codehaus.groovy.ast.Parameter[],org.codehaus.groovy.ast.stmt.Statement)>($r8, $r3);

        virtualinvoke r2.<org.codehaus.groovy.antlr.AntlrParserPlugin: void configureAST(org.codehaus.groovy.ast.ASTNode,groovyjarjarantlr.collections.AST)>($r4, r0);

        $r5 = new org.codehaus.groovy.ast.expr.ArgumentListExpression;

        specialinvoke $r5.<org.codehaus.groovy.ast.expr.ArgumentListExpression: void <init>()>();

        $r6 = new org.codehaus.groovy.ast.expr.MethodCallExpression;

        specialinvoke $r6.<org.codehaus.groovy.ast.expr.MethodCallExpression: void <init>(org.codehaus.groovy.ast.expr.Expression,java.lang.String,org.codehaus.groovy.ast.expr.Expression)>($r4, "call", $r5);

        virtualinvoke r2.<org.codehaus.groovy.antlr.AntlrParserPlugin: void configureAST(org.codehaus.groovy.ast.ASTNode,groovyjarjarantlr.collections.AST)>($r6, r0);

        return $r6;
    }

    protected org.codehaus.groovy.ast.expr.Expression unaryMinusExpression(groovyjarjarantlr.collections.AST)
    {
        org.codehaus.groovy.ast.expr.ConstantExpression $r3, $r10;
        java.lang.StringBuffer $r4, $r5, $r6, $r11, $r12, $r13;
        int $i0;
        java.lang.String $r2, $r7, $r14;
        org.codehaus.groovy.ast.expr.Expression $r17;
        java.lang.Number $r8, $r15;
        org.codehaus.groovy.ast.expr.UnaryMinusExpression $r16;
        org.codehaus.groovy.antlr.AntlrParserPlugin r9;
        groovyjarjarantlr.collections.AST r0, $r1;

        r9 := @this: org.codehaus.groovy.antlr.AntlrParserPlugin;

        r0 := @parameter0: groovyjarjarantlr.collections.AST;

        $r1 = interfaceinvoke r0.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getFirstChild()>();

        $r2 = interfaceinvoke $r1.<groovyjarjarantlr.collections.AST: java.lang.String getText()>();

        $i0 = interfaceinvoke $r1.<groovyjarjarantlr.collections.AST: int getType()>();

        tableswitch($i0)
        {
            case 194: goto label2;
            case 195: goto label1;
            case 196: goto label2;
            case 197: goto label1;
            case 198: goto label2;
            case 199: goto label1;
            default: goto label3;
        };

     label1:
        $r3 = new org.codehaus.groovy.ast.expr.ConstantExpression;

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("-");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        $r8 = staticinvoke <org.codehaus.groovy.syntax.Numbers: java.lang.Number parseDecimal(java.lang.String)>($r7);

        specialinvoke $r3.<org.codehaus.groovy.ast.expr.ConstantExpression: void <init>(java.lang.Object)>($r8);

        virtualinvoke r9.<org.codehaus.groovy.antlr.AntlrParserPlugin: void configureAST(org.codehaus.groovy.ast.ASTNode,groovyjarjarantlr.collections.AST)>($r3, r0);

        return $r3;

     label2:
        $r10 = new org.codehaus.groovy.ast.expr.ConstantExpression;

        $r11 = new java.lang.StringBuffer;

        specialinvoke $r11.<java.lang.StringBuffer: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("-");

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.String toString()>();

        $r15 = staticinvoke <org.codehaus.groovy.syntax.Numbers: java.lang.Number parseInteger(java.lang.String)>($r14);

        specialinvoke $r10.<org.codehaus.groovy.ast.expr.ConstantExpression: void <init>(java.lang.Object)>($r15);

        virtualinvoke r9.<org.codehaus.groovy.antlr.AntlrParserPlugin: void configureAST(org.codehaus.groovy.ast.ASTNode,groovyjarjarantlr.collections.AST)>($r10, r0);

        return $r10;

     label3:
        $r16 = new org.codehaus.groovy.ast.expr.UnaryMinusExpression;

        $r17 = virtualinvoke r9.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.expr.Expression expression(groovyjarjarantlr.collections.AST)>($r1);

        specialinvoke $r16.<org.codehaus.groovy.ast.expr.UnaryMinusExpression: void <init>(org.codehaus.groovy.ast.expr.Expression)>($r17);

        virtualinvoke r9.<org.codehaus.groovy.antlr.AntlrParserPlugin: void configureAST(org.codehaus.groovy.ast.ASTNode,groovyjarjarantlr.collections.AST)>($r16, r0);

        return $r16;
    }

    protected org.codehaus.groovy.ast.expr.Expression unaryPlusExpression(groovyjarjarantlr.collections.AST)
    {
        org.codehaus.groovy.antlr.AntlrParserPlugin r2;
        org.codehaus.groovy.ast.expr.UnaryPlusExpression $r4;
        int $i0;
        org.codehaus.groovy.ast.expr.Expression $r3, $r5;
        groovyjarjarantlr.collections.AST r0, $r1;

        r2 := @this: org.codehaus.groovy.antlr.AntlrParserPlugin;

        r0 := @parameter0: groovyjarjarantlr.collections.AST;

        $r1 = interfaceinvoke r0.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getFirstChild()>();

        $i0 = interfaceinvoke $r1.<groovyjarjarantlr.collections.AST: int getType()>();

        tableswitch($i0)
        {
            case 194: goto label1;
            case 195: goto label1;
            case 196: goto label1;
            case 197: goto label1;
            case 198: goto label1;
            case 199: goto label1;
            default: goto label2;
        };

     label1:
        $r3 = virtualinvoke r2.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.expr.Expression expression(groovyjarjarantlr.collections.AST)>($r1);

        return $r3;

     label2:
        $r4 = new org.codehaus.groovy.ast.expr.UnaryPlusExpression;

        $r5 = virtualinvoke r2.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.expr.Expression expression(groovyjarjarantlr.collections.AST)>($r1);

        specialinvoke $r4.<org.codehaus.groovy.ast.expr.UnaryPlusExpression: void <init>(org.codehaus.groovy.ast.expr.Expression)>($r5);

        virtualinvoke r2.<org.codehaus.groovy.antlr.AntlrParserPlugin: void configureAST(org.codehaus.groovy.ast.ASTNode,groovyjarjarantlr.collections.AST)>($r4, r0);

        return $r4;
    }

    protected org.codehaus.groovy.ast.expr.ConstantExpression decimalExpression(groovyjarjarantlr.collections.AST)
    {
        org.codehaus.groovy.antlr.AntlrParserPlugin r4;
        java.lang.String $r1;
        org.codehaus.groovy.ast.expr.ConstantExpression $r2;
        java.lang.Number $r3;
        groovyjarjarantlr.collections.AST r0;

        r4 := @this: org.codehaus.groovy.antlr.AntlrParserPlugin;

        r0 := @parameter0: groovyjarjarantlr.collections.AST;

        $r1 = interfaceinvoke r0.<groovyjarjarantlr.collections.AST: java.lang.String getText()>();

        $r2 = new org.codehaus.groovy.ast.expr.ConstantExpression;

        $r3 = staticinvoke <org.codehaus.groovy.syntax.Numbers: java.lang.Number parseDecimal(java.lang.String)>($r1);

        specialinvoke $r2.<org.codehaus.groovy.ast.expr.ConstantExpression: void <init>(java.lang.Object)>($r3);

        virtualinvoke r4.<org.codehaus.groovy.antlr.AntlrParserPlugin: void configureAST(org.codehaus.groovy.ast.ASTNode,groovyjarjarantlr.collections.AST)>($r2, r0);

        return $r2;
    }

    protected org.codehaus.groovy.ast.expr.ConstantExpression integerExpression(groovyjarjarantlr.collections.AST)
    {
        org.codehaus.groovy.antlr.AntlrParserPlugin r4;
        java.lang.String $r1;
        org.codehaus.groovy.ast.expr.ConstantExpression $r2;
        java.lang.Number $r3;
        groovyjarjarantlr.collections.AST r0;

        r4 := @this: org.codehaus.groovy.antlr.AntlrParserPlugin;

        r0 := @parameter0: groovyjarjarantlr.collections.AST;

        $r1 = interfaceinvoke r0.<groovyjarjarantlr.collections.AST: java.lang.String getText()>();

        $r2 = new org.codehaus.groovy.ast.expr.ConstantExpression;

        $r3 = staticinvoke <org.codehaus.groovy.syntax.Numbers: java.lang.Number parseInteger(java.lang.String)>($r1);

        specialinvoke $r2.<org.codehaus.groovy.ast.expr.ConstantExpression: void <init>(java.lang.Object)>($r3);

        virtualinvoke r4.<org.codehaus.groovy.antlr.AntlrParserPlugin: void configureAST(org.codehaus.groovy.ast.ASTNode,groovyjarjarantlr.collections.AST)>($r2, r0);

        return $r2;
    }

    protected org.codehaus.groovy.ast.expr.Expression gstring(groovyjarjarantlr.collections.AST)
    {
        org.codehaus.groovy.ast.expr.ConstantExpression $r8;
        java.util.ArrayList $r0, $r1;
        java.lang.StringBuffer $r2;
        int $i0;
        java.lang.String $r5, $r7, $r10;
        org.codehaus.groovy.ast.expr.Expression $r9;
        boolean z0, z1, z2;
        org.codehaus.groovy.antlr.AntlrParserPlugin r6;
        org.codehaus.groovy.ast.expr.GStringExpression $r4;
        groovyjarjarantlr.collections.AST r3, r11;

        r6 := @this: org.codehaus.groovy.antlr.AntlrParserPlugin;

        r3 := @parameter0: groovyjarjarantlr.collections.AST;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        z0 = 0;

        z2 = 0;

        z1 = 0;

        r11 = interfaceinvoke r3.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getFirstChild()>();

     label1:
        if r11 == null goto label7;

        $i0 = interfaceinvoke r11.<groovyjarjarantlr.collections.AST: int getType()>();

        lookupswitch($i0)
        {
            case 85: goto label2;
            default: goto label4;
        };

     label2:
        if z1 == 0 goto label3;

        virtualinvoke r6.<org.codehaus.groovy.antlr.AntlrParserPlugin: void assertNodeType(int,groovyjarjarantlr.collections.AST)>(84, r11);

     label3:
        z0 = 1;

        z2 = 1;

        z1 = 1;

        $r7 = interfaceinvoke r11.<groovyjarjarantlr.collections.AST: java.lang.String getText()>();

        $r8 = new org.codehaus.groovy.ast.expr.ConstantExpression;

        specialinvoke $r8.<org.codehaus.groovy.ast.expr.ConstantExpression: void <init>(java.lang.Object)>($r7);

        virtualinvoke r6.<org.codehaus.groovy.antlr.AntlrParserPlugin: void configureAST(org.codehaus.groovy.ast.ASTNode,groovyjarjarantlr.collections.AST)>($r8, r11);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r8);

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        goto label6;

     label4:
        if z2 != 0 goto label5;

        virtualinvoke r6.<org.codehaus.groovy.antlr.AntlrParserPlugin: void assertNodeType(int,groovyjarjarantlr.collections.AST)>(84, r11);

     label5:
        z0 = 0;

        z2 = 0;

        z1 = 0;

        $r9 = virtualinvoke r6.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.expr.Expression expression(groovyjarjarantlr.collections.AST)>(r11);

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r9);

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("$");

        $r10 = virtualinvoke $r9.<org.codehaus.groovy.ast.expr.Expression: java.lang.String getText()>();

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r10);

     label6:
        r11 = interfaceinvoke r11.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getNextSibling()>();

        goto label1;

     label7:
        $r4 = new org.codehaus.groovy.ast.expr.GStringExpression;

        $r5 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r4.<org.codehaus.groovy.ast.expr.GStringExpression: void <init>(java.lang.String,java.util.List,java.util.List)>($r5, $r0, $r1);

        virtualinvoke r6.<org.codehaus.groovy.antlr.AntlrParserPlugin: void configureAST(org.codehaus.groovy.ast.ASTNode,groovyjarjarantlr.collections.AST)>($r4, r3);

        return $r4;
    }

    protected org.codehaus.groovy.ast.ClassNode type(groovyjarjarantlr.collections.AST)
    {
        org.codehaus.groovy.antlr.AntlrParserPlugin r0;
        org.codehaus.groovy.ast.ClassNode $r3;
        groovyjarjarantlr.collections.AST r1, $r2;

        r0 := @this: org.codehaus.groovy.antlr.AntlrParserPlugin;

        r1 := @parameter0: groovyjarjarantlr.collections.AST;

        $r2 = interfaceinvoke r1.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getFirstChild()>();

        $r3 = virtualinvoke r0.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.ClassNode buildName(groovyjarjarantlr.collections.AST)>($r2);

        return $r3;
    }

    public static java.lang.String qualifiedName(groovyjarjarantlr.collections.AST)
    {
        java.lang.StringBuffer $r2;
        java.lang.String $r1, $r3, $r4, $r5;
        groovyjarjarantlr.collections.AST r0, r6;
        boolean $z0, $z1, $z2, z3;

        r0 := @parameter0: groovyjarjarantlr.collections.AST;

        $z0 = staticinvoke <org.codehaus.groovy.antlr.AntlrParserPlugin: boolean isType(int,groovyjarjarantlr.collections.AST)>(84, r0);

        if $z0 == 0 goto label1;

        $r5 = interfaceinvoke r0.<groovyjarjarantlr.collections.AST: java.lang.String getText()>();

        return $r5;

     label1:
        $z1 = staticinvoke <org.codehaus.groovy.antlr.AntlrParserPlugin: boolean isType(int,groovyjarjarantlr.collections.AST)>(87, r0);

        if $z1 == 0 goto label6;

        r6 = interfaceinvoke r0.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getFirstChild()>();

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        z3 = 1;

     label2:
        if r6 == null goto label5;

        $z2 = staticinvoke <org.codehaus.groovy.antlr.AntlrParserPlugin: boolean isType(int,groovyjarjarantlr.collections.AST)>(69, r6);

        if $z2 != 0 goto label5;

        if z3 == 0 goto label3;

        z3 = 0;

        goto label4;

     label3:
        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".");

     label4:
        $r4 = staticinvoke <org.codehaus.groovy.antlr.AntlrParserPlugin: java.lang.String qualifiedName(groovyjarjarantlr.collections.AST)>(r6);

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        r6 = interfaceinvoke r6.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getNextSibling()>();

        goto label2;

     label5:
        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r3;

     label6:
        $r1 = interfaceinvoke r0.<groovyjarjarantlr.collections.AST: java.lang.String getText()>();

        return $r1;
    }

    private static groovyjarjarantlr.collections.AST getTypeArgumentsNode(groovyjarjarantlr.collections.AST)
    {
        groovyjarjarantlr.collections.AST r0;
        boolean $z0;

        r0 := @parameter0: groovyjarjarantlr.collections.AST;

     label1:
        if r0 == null goto label2;

        $z0 = staticinvoke <org.codehaus.groovy.antlr.AntlrParserPlugin: boolean isType(int,groovyjarjarantlr.collections.AST)>(69, r0);

        if $z0 != 0 goto label2;

        r0 = interfaceinvoke r0.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getNextSibling()>();

        goto label1;

     label2:
        return r0;
    }

    private int getBoundType(groovyjarjarantlr.collections.AST)
    {
        java.lang.StringBuffer $r3, $r6, $r7, $r9, $r10, $r12, $r14;
        int $i1;
        java.lang.String $r5, $r8, $r11, $r13;
        boolean $z0, $z1;
        org.codehaus.groovy.antlr.AntlrParserPlugin r4;
        org.codehaus.groovy.antlr.ASTRuntimeException $r15;
        groovyjarjarantlr.collections.AST r0;

        r4 := @this: org.codehaus.groovy.antlr.AntlrParserPlugin;

        r0 := @parameter0: groovyjarjarantlr.collections.AST;

        if r0 != null goto label1;

        $i1 = (int) -1;

        return $i1;

     label1:
        $z0 = staticinvoke <org.codehaus.groovy.antlr.AntlrParserPlugin: boolean isType(int,groovyjarjarantlr.collections.AST)>(74, r0);

        if $z0 == 0 goto label2;

        return 74;

     label2:
        $z1 = staticinvoke <org.codehaus.groovy.antlr.AntlrParserPlugin: boolean isType(int,groovyjarjarantlr.collections.AST)>(75, r0);

        if $z1 == 0 goto label3;

        return 75;

     label3:
        $r15 = new org.codehaus.groovy.antlr.ASTRuntimeException;

        $r14 = new java.lang.StringBuffer;

        specialinvoke $r14.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Unexpected node type: ");

        $r5 = specialinvoke r4.<org.codehaus.groovy.antlr.AntlrParserPlugin: java.lang.String getTokenName(groovyjarjarantlr.collections.AST)>(r0);

        $r6 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" found when expecting type: ");

        $r8 = specialinvoke r4.<org.codehaus.groovy.antlr.AntlrParserPlugin: java.lang.String getTokenName(int)>(74);

        $r9 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" or type: ");

        $r11 = specialinvoke r4.<org.codehaus.groovy.antlr.AntlrParserPlugin: java.lang.String getTokenName(int)>(75);

        $r12 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r15.<org.codehaus.groovy.antlr.ASTRuntimeException: void <init>(groovyjarjarantlr.collections.AST,java.lang.String)>(r0, $r13);

        throw $r15;
    }

    private org.codehaus.groovy.ast.GenericsType makeGenericsArgumentType(groovyjarjarantlr.collections.AST)
    {
        int $i0;
        org.codehaus.groovy.ast.ClassNode[] $r9;
        boolean $z0;
        org.codehaus.groovy.antlr.AntlrParserPlugin r2;
        org.codehaus.groovy.ast.ClassNode $r3, $r5, $r11;
        org.codehaus.groovy.ast.GenericsType $r4, $r7, $r10, $r12, r13;
        groovyjarjarantlr.collections.AST r0, $r1, $r6, $r8;

        r2 := @this: org.codehaus.groovy.antlr.AntlrParserPlugin;

        r0 := @parameter0: groovyjarjarantlr.collections.AST;

        $r1 = interfaceinvoke r0.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getFirstChild()>();

        $z0 = staticinvoke <org.codehaus.groovy.antlr.AntlrParserPlugin: boolean isType(int,groovyjarjarantlr.collections.AST)>(73, $r1);

        if $z0 == 0 goto label5;

        $r5 = staticinvoke <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode makeWithoutCaching(java.lang.String)>("?");

        $r6 = interfaceinvoke $r1.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getNextSibling()>();

        if $r6 == null goto label3;

        $r8 = interfaceinvoke $r1.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getNextSibling()>();

        $i0 = specialinvoke r2.<org.codehaus.groovy.antlr.AntlrParserPlugin: int getBoundType(groovyjarjarantlr.collections.AST)>($r8);

        $r9 = specialinvoke r2.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.ClassNode[] makeGenericsBounds(groovyjarjarantlr.collections.AST,int)>($r1, $i0);

        if $i0 != 74 goto label1;

        $r12 = new org.codehaus.groovy.ast.GenericsType;

        specialinvoke $r12.<org.codehaus.groovy.ast.GenericsType: void <init>(org.codehaus.groovy.ast.ClassNode,org.codehaus.groovy.ast.ClassNode[],org.codehaus.groovy.ast.ClassNode)>($r5, $r9, null);

        r13 = $r12;

        goto label2;

     label1:
        $r10 = new org.codehaus.groovy.ast.GenericsType;

        $r11 = $r9[0];

        specialinvoke $r10.<org.codehaus.groovy.ast.GenericsType: void <init>(org.codehaus.groovy.ast.ClassNode,org.codehaus.groovy.ast.ClassNode[],org.codehaus.groovy.ast.ClassNode)>($r5, null, $r11);

        r13 = $r10;

     label2:
        goto label4;

     label3:
        $r7 = new org.codehaus.groovy.ast.GenericsType;

        specialinvoke $r7.<org.codehaus.groovy.ast.GenericsType: void <init>(org.codehaus.groovy.ast.ClassNode,org.codehaus.groovy.ast.ClassNode[],org.codehaus.groovy.ast.ClassNode)>($r5, null, null);

        r13 = $r7;

     label4:
        virtualinvoke r13.<org.codehaus.groovy.ast.GenericsType: void setName(java.lang.String)>("?");

        virtualinvoke r13.<org.codehaus.groovy.ast.GenericsType: void setWildcard(boolean)>(1);

        goto label6;

     label5:
        $r3 = virtualinvoke r2.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.ClassNode makeTypeWithArguments(groovyjarjarantlr.collections.AST)>($r1);

        $r4 = new org.codehaus.groovy.ast.GenericsType;

        specialinvoke $r4.<org.codehaus.groovy.ast.GenericsType: void <init>(org.codehaus.groovy.ast.ClassNode)>($r3);

        r13 = $r4;

     label6:
        virtualinvoke r2.<org.codehaus.groovy.antlr.AntlrParserPlugin: void configureAST(org.codehaus.groovy.ast.ASTNode,groovyjarjarantlr.collections.AST)>(r13, r0);

        return r13;
    }

    protected org.codehaus.groovy.ast.ClassNode makeTypeWithArguments(groovyjarjarantlr.collections.AST)
    {
        java.lang.Object[] $r7;
        int $i0;
        org.codehaus.groovy.ast.GenericsType[] $r6, $r8, $r9;
        java.util.LinkedList $r3;
        boolean $z0, $z1, $z2;
        org.codehaus.groovy.antlr.AntlrParserPlugin r0;
        org.codehaus.groovy.ast.ClassNode $r2;
        org.codehaus.groovy.ast.GenericsType $r10;
        groovyjarjarantlr.collections.AST r1, $r4, $r5, r11;

        r0 := @this: org.codehaus.groovy.antlr.AntlrParserPlugin;

        r1 := @parameter0: groovyjarjarantlr.collections.AST;

        $r2 = virtualinvoke r0.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.ClassNode makeType(groovyjarjarantlr.collections.AST)>(r1);

        $r3 = new java.util.LinkedList;

        specialinvoke $r3.<java.util.LinkedList: void <init>()>();

        $r4 = interfaceinvoke r1.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getFirstChild()>();

        if $r4 == null goto label1;

        $z0 = staticinvoke <org.codehaus.groovy.antlr.AntlrParserPlugin: boolean isType(int,groovyjarjarantlr.collections.AST)>(23, $r4);

        if $z0 != 0 goto label1;

        $z1 = staticinvoke <org.codehaus.groovy.antlr.AntlrParserPlugin: boolean isType(int,groovyjarjarantlr.collections.AST)>(16, $r4);

        if $z1 == 0 goto label2;

     label1:
        return $r2;

     label2:
        $z2 = staticinvoke <org.codehaus.groovy.antlr.AntlrParserPlugin: boolean isType(int,groovyjarjarantlr.collections.AST)>(87, $r4);

        if $z2 == 0 goto label3;

        return $r2;

     label3:
        $r5 = interfaceinvoke $r4.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getFirstChild()>();

        if $r5 != null goto label4;

        return $r2;

     label4:
        virtualinvoke r0.<org.codehaus.groovy.antlr.AntlrParserPlugin: void assertNodeType(int,groovyjarjarantlr.collections.AST)>(69, $r5);

        r11 = interfaceinvoke $r5.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getFirstChild()>();

     label5:
        if r11 == null goto label6;

        virtualinvoke r0.<org.codehaus.groovy.antlr.AntlrParserPlugin: void assertNodeType(int,groovyjarjarantlr.collections.AST)>(70, r11);

        $r10 = specialinvoke r0.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.GenericsType makeGenericsArgumentType(groovyjarjarantlr.collections.AST)>(r11);

        virtualinvoke $r3.<java.util.LinkedList: boolean add(java.lang.Object)>($r10);

        r11 = interfaceinvoke r11.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getNextSibling()>();

        goto label5;

     label6:
        $i0 = virtualinvoke $r3.<java.util.LinkedList: int size()>();

        if $i0 <= 0 goto label7;

        $r6 = newarray (org.codehaus.groovy.ast.GenericsType)[0];

        $r7 = virtualinvoke $r3.<java.util.LinkedList: java.lang.Object[] toArray(java.lang.Object[])>($r6);

        $r8 = (org.codehaus.groovy.ast.GenericsType[]) $r7;

        $r9 = (org.codehaus.groovy.ast.GenericsType[]) $r8;

        virtualinvoke $r2.<org.codehaus.groovy.ast.ClassNode: void setGenericsTypes(org.codehaus.groovy.ast.GenericsType[])>($r9);

     label7:
        return $r2;
    }

    private org.codehaus.groovy.ast.ClassNode[] makeGenericsBounds(groovyjarjarantlr.collections.AST, int)
    {
        org.codehaus.groovy.antlr.AntlrParserPlugin r2;
        java.lang.Object[] $r5;
        org.codehaus.groovy.ast.ClassNode $r8;
        int i0, $i1, $i2;
        org.codehaus.groovy.ast.ClassNode[] $r4, $r6, $r7;
        java.util.LinkedList $r3;
        groovyjarjarantlr.collections.AST r0, $r1, r9;

        r2 := @this: org.codehaus.groovy.antlr.AntlrParserPlugin;

        r0 := @parameter0: groovyjarjarantlr.collections.AST;

        i0 := @parameter1: int;

        $r1 = interfaceinvoke r0.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getNextSibling()>();

        if $r1 != null goto label1;

        return null;

     label1:
        virtualinvoke r2.<org.codehaus.groovy.antlr.AntlrParserPlugin: void assertNodeType(int,groovyjarjarantlr.collections.AST)>(i0, $r1);

        $r3 = new java.util.LinkedList;

        specialinvoke $r3.<java.util.LinkedList: void <init>()>();

        r9 = interfaceinvoke $r1.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getFirstChild()>();

     label2:
        if r9 == null goto label3;

        $r8 = virtualinvoke r2.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.ClassNode makeTypeWithArguments(groovyjarjarantlr.collections.AST)>(r9);

        virtualinvoke r2.<org.codehaus.groovy.antlr.AntlrParserPlugin: void configureAST(org.codehaus.groovy.ast.ASTNode,groovyjarjarantlr.collections.AST)>($r8, r9);

        virtualinvoke $r3.<java.util.LinkedList: boolean add(java.lang.Object)>($r8);

        r9 = interfaceinvoke r9.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getNextSibling()>();

        goto label2;

     label3:
        $i1 = virtualinvoke $r3.<java.util.LinkedList: int size()>();

        if $i1 != 0 goto label4;

        return null;

     label4:
        $i2 = virtualinvoke $r3.<java.util.LinkedList: int size()>();

        $r4 = newarray (org.codehaus.groovy.ast.ClassNode)[$i2];

        $r5 = virtualinvoke $r3.<java.util.LinkedList: java.lang.Object[] toArray(java.lang.Object[])>($r4);

        $r6 = (org.codehaus.groovy.ast.ClassNode[]) $r5;

        $r7 = (org.codehaus.groovy.ast.ClassNode[]) $r6;

        return $r7;
    }

    protected org.codehaus.groovy.ast.GenericsType[] makeGenericsType(groovyjarjarantlr.collections.AST)
    {
        org.codehaus.groovy.antlr.AntlrParserPlugin r3;
        java.lang.Object[] $r5;
        org.codehaus.groovy.ast.ClassNode $r9;
        org.codehaus.groovy.ast.GenericsType $r10;
        org.codehaus.groovy.ast.ClassNode[] $r11;
        org.codehaus.groovy.ast.GenericsType[] $r4, $r6, $r7;
        java.util.LinkedList $r2;
        groovyjarjarantlr.collections.AST r0, $r1, $r8, r12;
        boolean $z0;

        r3 := @this: org.codehaus.groovy.antlr.AntlrParserPlugin;

        r0 := @parameter0: groovyjarjarantlr.collections.AST;

        $r1 = interfaceinvoke r0.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getFirstChild()>();

        r12 = $r1;

        $r2 = new java.util.LinkedList;

        specialinvoke $r2.<java.util.LinkedList: void <init>()>();

        virtualinvoke r3.<org.codehaus.groovy.antlr.AntlrParserPlugin: void assertNodeType(int,groovyjarjarantlr.collections.AST)>(72, $r1);

     label1:
        $z0 = staticinvoke <org.codehaus.groovy.antlr.AntlrParserPlugin: boolean isType(int,groovyjarjarantlr.collections.AST)>(72, r12);

        if $z0 == 0 goto label2;

        $r8 = interfaceinvoke r12.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getFirstChild()>();

        $r9 = virtualinvoke r3.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.ClassNode makeType(groovyjarjarantlr.collections.AST)>(r12);

        $r10 = new org.codehaus.groovy.ast.GenericsType;

        $r11 = specialinvoke r3.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.ClassNode[] makeGenericsBounds(groovyjarjarantlr.collections.AST,int)>($r8, 74);

        specialinvoke $r10.<org.codehaus.groovy.ast.GenericsType: void <init>(org.codehaus.groovy.ast.ClassNode,org.codehaus.groovy.ast.ClassNode[],org.codehaus.groovy.ast.ClassNode)>($r9, $r11, null);

        virtualinvoke r3.<org.codehaus.groovy.antlr.AntlrParserPlugin: void configureAST(org.codehaus.groovy.ast.ASTNode,groovyjarjarantlr.collections.AST)>($r10, r12);

        virtualinvoke $r2.<java.util.LinkedList: boolean add(java.lang.Object)>($r10);

        r12 = interfaceinvoke r12.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getNextSibling()>();

        goto label1;

     label2:
        $r4 = newarray (org.codehaus.groovy.ast.GenericsType)[0];

        $r5 = virtualinvoke $r2.<java.util.LinkedList: java.lang.Object[] toArray(java.lang.Object[])>($r4);

        $r6 = (org.codehaus.groovy.ast.GenericsType[]) $r5;

        $r7 = (org.codehaus.groovy.ast.GenericsType[]) $r6;

        return $r7;
    }

    protected org.codehaus.groovy.ast.ClassNode makeType(groovyjarjarantlr.collections.AST)
    {
        org.codehaus.groovy.antlr.AntlrParserPlugin r2;
        org.codehaus.groovy.ast.ClassNode $r3, r5;
        java.lang.String $r4;
        groovyjarjarantlr.collections.AST r0, $r1;
        boolean $z0, $z1;

        r2 := @this: org.codehaus.groovy.antlr.AntlrParserPlugin;

        r0 := @parameter0: groovyjarjarantlr.collections.AST;

        r5 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode DYNAMIC_TYPE>;

        $r1 = interfaceinvoke r0.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getFirstChild()>();

        if $r1 == null goto label4;

        $z0 = staticinvoke <org.codehaus.groovy.antlr.AntlrParserPlugin: boolean isType(int,groovyjarjarantlr.collections.AST)>(23, $r1);

        if $z0 != 0 goto label1;

        $z1 = staticinvoke <org.codehaus.groovy.antlr.AntlrParserPlugin: boolean isType(int,groovyjarjarantlr.collections.AST)>(16, $r1);

        if $z1 == 0 goto label2;

     label1:
        $r3 = virtualinvoke r2.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.ClassNode makeType(groovyjarjarantlr.collections.AST)>($r1);

        r5 = virtualinvoke $r3.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode makeArray()>();

        goto label3;

     label2:
        $r4 = staticinvoke <org.codehaus.groovy.antlr.AntlrParserPlugin: java.lang.String qualifiedName(groovyjarjarantlr.collections.AST)>($r1);

        r5 = staticinvoke <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode make(java.lang.String)>($r4);

     label3:
        virtualinvoke r2.<org.codehaus.groovy.antlr.AntlrParserPlugin: void configureAST(org.codehaus.groovy.ast.ASTNode,groovyjarjarantlr.collections.AST)>(r5, $r1);

     label4:
        return r5;
    }

    protected org.codehaus.groovy.ast.ClassNode buildName(groovyjarjarantlr.collections.AST)
    {
        java.lang.String $r0, $r6, $r7;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        org.codehaus.groovy.antlr.AntlrParserPlugin r2;
        org.codehaus.groovy.ast.ClassNode $r1, $r4, $r5, r9;
        groovyjarjarantlr.collections.AST $r3, r8, $r10;

        r2 := @this: org.codehaus.groovy.antlr.AntlrParserPlugin;

        r8 := @parameter0: groovyjarjarantlr.collections.AST;

        $z0 = staticinvoke <org.codehaus.groovy.antlr.AntlrParserPlugin: boolean isType(int,groovyjarjarantlr.collections.AST)>(12, r8);

        if $z0 == 0 goto label1;

        r8 = interfaceinvoke r8.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getFirstChild()>();

     label1:
        $z1 = staticinvoke <org.codehaus.groovy.antlr.AntlrParserPlugin: boolean isType(int,groovyjarjarantlr.collections.AST)>(87, r8);

        if $z1 != 0 goto label2;

        $z3 = staticinvoke <org.codehaus.groovy.antlr.AntlrParserPlugin: boolean isType(int,groovyjarjarantlr.collections.AST)>(151, r8);

        if $z3 == 0 goto label3;

     label2:
        $r0 = staticinvoke <org.codehaus.groovy.antlr.AntlrParserPlugin: java.lang.String qualifiedName(groovyjarjarantlr.collections.AST)>(r8);

        r9 = staticinvoke <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode make(java.lang.String)>($r0);

        goto label7;

     label3:
        $z4 = virtualinvoke r2.<org.codehaus.groovy.antlr.AntlrParserPlugin: boolean isPrimitiveTypeLiteral(groovyjarjarantlr.collections.AST)>(r8);

        if $z4 == 0 goto label4;

        $r7 = interfaceinvoke r8.<groovyjarjarantlr.collections.AST: java.lang.String getText()>();

        r9 = staticinvoke <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode make(java.lang.String)>($r7);

        goto label7;

     label4:
        $z5 = staticinvoke <org.codehaus.groovy.antlr.AntlrParserPlugin: boolean isType(int,groovyjarjarantlr.collections.AST)>(23, r8);

        if $z5 != 0 goto label5;

        $z6 = staticinvoke <org.codehaus.groovy.antlr.AntlrParserPlugin: boolean isType(int,groovyjarjarantlr.collections.AST)>(16, r8);

        if $z6 == 0 goto label6;

     label5:
        $r3 = interfaceinvoke r8.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getFirstChild()>();

        $r4 = virtualinvoke r2.<org.codehaus.groovy.antlr.AntlrParserPlugin: org.codehaus.groovy.ast.ClassNode buildName(groovyjarjarantlr.collections.AST)>($r3);

        $r5 = virtualinvoke $r4.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode makeArray()>();

        virtualinvoke r2.<org.codehaus.groovy.antlr.AntlrParserPlugin: void configureAST(org.codehaus.groovy.ast.ASTNode,groovyjarjarantlr.collections.AST)>($r5, r8);

        return $r5;

     label6:
        $r6 = interfaceinvoke r8.<groovyjarjarantlr.collections.AST: java.lang.String getText()>();

        r9 = staticinvoke <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode make(java.lang.String)>($r6);

     label7:
        $r10 = interfaceinvoke r8.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getNextSibling()>();

        $z7 = staticinvoke <org.codehaus.groovy.antlr.AntlrParserPlugin: boolean isType(int,groovyjarjarantlr.collections.AST)>(23, $r10);

        if $z7 != 0 goto label8;

        $z2 = staticinvoke <org.codehaus.groovy.antlr.AntlrParserPlugin: boolean isType(int,groovyjarjarantlr.collections.AST)>(16, r8);

        if $z2 == 0 goto label9;

     label8:
        $r1 = virtualinvoke r9.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode makeArray()>();

        virtualinvoke r2.<org.codehaus.groovy.antlr.AntlrParserPlugin: void configureAST(org.codehaus.groovy.ast.ASTNode,groovyjarjarantlr.collections.AST)>($r1, r8);

        return $r1;

     label9:
        virtualinvoke r2.<org.codehaus.groovy.antlr.AntlrParserPlugin: void configureAST(org.codehaus.groovy.ast.ASTNode,groovyjarjarantlr.collections.AST)>(r9, r8);

        return r9;
    }

    protected boolean isPrimitiveTypeLiteral(groovyjarjarantlr.collections.AST)
    {
        int $i0;
        org.codehaus.groovy.antlr.AntlrParserPlugin r1;
        groovyjarjarantlr.collections.AST r0;

        r1 := @this: org.codehaus.groovy.antlr.AntlrParserPlugin;

        r0 := @parameter0: groovyjarjarantlr.collections.AST;

        $i0 = interfaceinvoke r0.<groovyjarjarantlr.collections.AST: int getType()>();

        tableswitch($i0)
        {
            case 101: goto label1;
            case 102: goto label1;
            case 103: goto label1;
            case 104: goto label1;
            case 105: goto label1;
            case 106: goto label1;
            case 107: goto label1;
            case 108: goto label1;
            default: goto label2;
        };

     label1:
        return 1;

     label2:
        return 0;
    }

    protected java.lang.String identifier(groovyjarjarantlr.collections.AST)
    {
        org.codehaus.groovy.antlr.AntlrParserPlugin r0;
        java.lang.String $r2;
        groovyjarjarantlr.collections.AST r1;

        r0 := @this: org.codehaus.groovy.antlr.AntlrParserPlugin;

        r1 := @parameter0: groovyjarjarantlr.collections.AST;

        virtualinvoke r0.<org.codehaus.groovy.antlr.AntlrParserPlugin: void assertNodeType(int,groovyjarjarantlr.collections.AST)>(84, r1);

        $r2 = interfaceinvoke r1.<groovyjarjarantlr.collections.AST: java.lang.String getText()>();

        return $r2;
    }

    protected java.lang.String label(groovyjarjarantlr.collections.AST)
    {
        org.codehaus.groovy.antlr.AntlrParserPlugin r2;
        java.lang.String $r3;
        groovyjarjarantlr.collections.AST r0, $r1;

        r2 := @this: org.codehaus.groovy.antlr.AntlrParserPlugin;

        r0 := @parameter0: groovyjarjarantlr.collections.AST;

        $r1 = interfaceinvoke r0.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getFirstChild()>();

        if $r1 != null goto label1;

        return null;

     label1:
        $r3 = virtualinvoke r2.<org.codehaus.groovy.antlr.AntlrParserPlugin: java.lang.String identifier(groovyjarjarantlr.collections.AST)>($r1);

        return $r3;
    }

    protected boolean hasVisibility(int)
    {
        org.codehaus.groovy.antlr.AntlrParserPlugin r0;
        int i0, $i1;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.AntlrParserPlugin;

        i0 := @parameter0: int;

        $i1 = i0 & 7;

        if $i1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    protected void configureAST(org.codehaus.groovy.ast.ASTNode, groovyjarjarantlr.collections.AST)
    {
        java.lang.StringBuffer $r5, $r6, $r9, $r10;
        int $i0, $i1, $i2, $i3;
        java.lang.String $r8, $r11;
        boolean $z0;
        org.codehaus.groovy.antlr.GroovySourceAST $r2, $r3;
        org.codehaus.groovy.antlr.AntlrParserPlugin r12;
        org.codehaus.groovy.antlr.ASTRuntimeException $r4;
        org.codehaus.groovy.ast.ASTNode r1;
        java.lang.Class $r7;
        groovyjarjarantlr.collections.AST r0;

        r12 := @this: org.codehaus.groovy.antlr.AntlrParserPlugin;

        r1 := @parameter0: org.codehaus.groovy.ast.ASTNode;

        r0 := @parameter1: groovyjarjarantlr.collections.AST;

        if r0 != null goto label1;

        $r4 = new org.codehaus.groovy.antlr.ASTRuntimeException;

        $r5 = new java.lang.StringBuffer;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("PARSER BUG: Tried to configure ");

        $r7 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r8 = virtualinvoke $r7.<java.lang.Class: java.lang.String getName()>();

        $r9 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" with null Node");

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r4.<org.codehaus.groovy.antlr.ASTRuntimeException: void <init>(groovyjarjarantlr.collections.AST,java.lang.String)>(r0, $r11);

        throw $r4;

     label1:
        $i0 = interfaceinvoke r0.<groovyjarjarantlr.collections.AST: int getColumn()>();

        virtualinvoke r1.<org.codehaus.groovy.ast.ASTNode: void setColumnNumber(int)>($i0);

        $i1 = interfaceinvoke r0.<groovyjarjarantlr.collections.AST: int getLine()>();

        virtualinvoke r1.<org.codehaus.groovy.ast.ASTNode: void setLineNumber(int)>($i1);

        $z0 = r0 instanceof org.codehaus.groovy.antlr.GroovySourceAST;

        if $z0 == 0 goto label2;

        $r2 = (org.codehaus.groovy.antlr.GroovySourceAST) r0;

        $i2 = virtualinvoke $r2.<org.codehaus.groovy.antlr.GroovySourceAST: int getColumnLast()>();

        virtualinvoke r1.<org.codehaus.groovy.ast.ASTNode: void setLastColumnNumber(int)>($i2);

        $r3 = (org.codehaus.groovy.antlr.GroovySourceAST) r0;

        $i3 = virtualinvoke $r3.<org.codehaus.groovy.antlr.GroovySourceAST: int getLineLast()>();

        virtualinvoke r1.<org.codehaus.groovy.ast.ASTNode: void setLastLineNumber(int)>($i3);

     label2:
        return;
    }

    protected static org.codehaus.groovy.syntax.Token makeToken(int, groovyjarjarantlr.collections.AST)
    {
        int i0, $i1, $i2;
        org.codehaus.groovy.syntax.Token $r1;
        groovyjarjarantlr.collections.AST r0;

        i0 := @parameter0: int;

        r0 := @parameter1: groovyjarjarantlr.collections.AST;

        $i1 = interfaceinvoke r0.<groovyjarjarantlr.collections.AST: int getLine()>();

        $i2 = interfaceinvoke r0.<groovyjarjarantlr.collections.AST: int getColumn()>();

        $r1 = staticinvoke <org.codehaus.groovy.syntax.Token: org.codehaus.groovy.syntax.Token newSymbol(int,int,int)>(i0, $i1, $i2);

        return $r1;
    }

    protected java.lang.String getFirstChildText(groovyjarjarantlr.collections.AST)
    {
        org.codehaus.groovy.antlr.AntlrParserPlugin r2;
        java.lang.String $r3;
        groovyjarjarantlr.collections.AST r0, $r1;

        r2 := @this: org.codehaus.groovy.antlr.AntlrParserPlugin;

        r0 := @parameter0: groovyjarjarantlr.collections.AST;

        $r1 = interfaceinvoke r0.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getFirstChild()>();

        if $r1 == null goto label1;

        $r3 = interfaceinvoke $r1.<groovyjarjarantlr.collections.AST: java.lang.String getText()>();

        goto label2;

     label1:
        $r3 = null;

     label2:
        return $r3;
    }

    public static boolean isType(int, groovyjarjarantlr.collections.AST)
    {
        int $i0, i1;
        groovyjarjarantlr.collections.AST r0;
        boolean $z0;

        i1 := @parameter0: int;

        r0 := @parameter1: groovyjarjarantlr.collections.AST;

        if r0 == null goto label1;

        $i0 = interfaceinvoke r0.<groovyjarjarantlr.collections.AST: int getType()>();

        if $i0 != i1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private java.lang.String getTokenName(int)
    {
        org.codehaus.groovy.antlr.AntlrParserPlugin r0;
        java.lang.String[] $r1, $r2;
        java.lang.StringBuffer $r4, $r5, $r6;
        int i0;
        java.lang.String $r3, $r7;

        r0 := @this: org.codehaus.groovy.antlr.AntlrParserPlugin;

        i0 := @parameter0: int;

        $r1 = r0.<org.codehaus.groovy.antlr.AntlrParserPlugin: java.lang.String[] tokenNames>;

        if $r1 != null goto label1;

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r7;

     label1:
        $r2 = r0.<org.codehaus.groovy.antlr.AntlrParserPlugin: java.lang.String[] tokenNames>;

        $r3 = $r2[i0];

        return $r3;
    }

    private java.lang.String getTokenName(groovyjarjarantlr.collections.AST)
    {
        org.codehaus.groovy.antlr.AntlrParserPlugin r1;
        int $i0;
        java.lang.String $r2;
        groovyjarjarantlr.collections.AST r0;

        r1 := @this: org.codehaus.groovy.antlr.AntlrParserPlugin;

        r0 := @parameter0: groovyjarjarantlr.collections.AST;

        if r0 != null goto label1;

        return "null";

     label1:
        $i0 = interfaceinvoke r0.<groovyjarjarantlr.collections.AST: int getType()>();

        $r2 = specialinvoke r1.<org.codehaus.groovy.antlr.AntlrParserPlugin: java.lang.String getTokenName(int)>($i0);

        return $r2;
    }

    protected void assertNodeType(int, groovyjarjarantlr.collections.AST)
    {
        java.lang.StringBuffer $r2, $r3, $r6, $r7, $r9, $r12, $r13, $r15;
        int $i0, i1;
        java.lang.String $r5, $r8, $r10, $r14, $r16;
        org.codehaus.groovy.antlr.AntlrParserPlugin r4;
        org.codehaus.groovy.antlr.ASTRuntimeException $r1, $r11;
        groovyjarjarantlr.collections.AST r0;

        r4 := @this: org.codehaus.groovy.antlr.AntlrParserPlugin;

        i1 := @parameter0: int;

        r0 := @parameter1: groovyjarjarantlr.collections.AST;

        if r0 != null goto label1;

        $r11 = new org.codehaus.groovy.antlr.ASTRuntimeException;

        $r12 = new java.lang.StringBuffer;

        specialinvoke $r12.<java.lang.StringBuffer: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("No child node available in AST when expecting type: ");

        $r14 = specialinvoke r4.<org.codehaus.groovy.antlr.AntlrParserPlugin: java.lang.String getTokenName(int)>(i1);

        $r15 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r11.<org.codehaus.groovy.antlr.ASTRuntimeException: void <init>(groovyjarjarantlr.collections.AST,java.lang.String)>(r0, $r16);

        throw $r11;

     label1:
        $i0 = interfaceinvoke r0.<groovyjarjarantlr.collections.AST: int getType()>();

        if $i0 == i1 goto label2;

        $r1 = new org.codehaus.groovy.antlr.ASTRuntimeException;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Unexpected node type: ");

        $r5 = specialinvoke r4.<org.codehaus.groovy.antlr.AntlrParserPlugin: java.lang.String getTokenName(groovyjarjarantlr.collections.AST)>(r0);

        $r6 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" found when expecting type: ");

        $r8 = specialinvoke r4.<org.codehaus.groovy.antlr.AntlrParserPlugin: java.lang.String getTokenName(int)>(i1);

        $r9 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r1.<org.codehaus.groovy.antlr.ASTRuntimeException: void <init>(groovyjarjarantlr.collections.AST,java.lang.String)>(r0, $r10);

        throw $r1;

     label2:
        return;
    }

    protected void notImplementedYet(groovyjarjarantlr.collections.AST)
    {
        org.codehaus.groovy.antlr.AntlrParserPlugin r4;
        org.codehaus.groovy.antlr.ASTRuntimeException $r0;
        java.lang.StringBuffer $r2, $r3, $r6;
        java.lang.String $r5, $r7;
        groovyjarjarantlr.collections.AST r1;

        r4 := @this: org.codehaus.groovy.antlr.AntlrParserPlugin;

        r1 := @parameter0: groovyjarjarantlr.collections.AST;

        $r0 = new org.codehaus.groovy.antlr.ASTRuntimeException;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("AST node not implemented yet for type: ");

        $r5 = specialinvoke r4.<org.codehaus.groovy.antlr.AntlrParserPlugin: java.lang.String getTokenName(groovyjarjarantlr.collections.AST)>(r1);

        $r6 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r0.<org.codehaus.groovy.antlr.ASTRuntimeException: void <init>(groovyjarjarantlr.collections.AST,java.lang.String)>(r1, $r7);

        throw $r0;
    }

    protected void unknownAST(groovyjarjarantlr.collections.AST)
    {
        org.codehaus.groovy.antlr.AntlrParserPlugin r4;
        org.codehaus.groovy.antlr.ASTRuntimeException $r1, $r8;
        java.lang.StringBuffer $r2, $r3, $r6;
        int $i0;
        java.lang.String $r5, $r7;
        groovyjarjarantlr.collections.AST r0;

        r4 := @this: org.codehaus.groovy.antlr.AntlrParserPlugin;

        r0 := @parameter0: groovyjarjarantlr.collections.AST;

        $i0 = interfaceinvoke r0.<groovyjarjarantlr.collections.AST: int getType()>();

        if $i0 != 13 goto label1;

        $r8 = new org.codehaus.groovy.antlr.ASTRuntimeException;

        specialinvoke $r8.<org.codehaus.groovy.antlr.ASTRuntimeException: void <init>(groovyjarjarantlr.collections.AST,java.lang.String)>(r0, "Class definition not expected here. Possible attempt to use inner class. Inner classes not supported, perhaps try using a closure instead.");

        throw $r8;

     label1:
        $r1 = new org.codehaus.groovy.antlr.ASTRuntimeException;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Unknown type: ");

        $r5 = specialinvoke r4.<org.codehaus.groovy.antlr.AntlrParserPlugin: java.lang.String getTokenName(groovyjarjarantlr.collections.AST)>(r0);

        $r6 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r1.<org.codehaus.groovy.antlr.ASTRuntimeException: void <init>(groovyjarjarantlr.collections.AST,java.lang.String)>(r0, $r7);

        throw $r1;
    }

    protected void dumpTree(groovyjarjarantlr.collections.AST)
    {
        org.codehaus.groovy.antlr.AntlrParserPlugin r1;
        groovyjarjarantlr.collections.AST r0, r2;

        r1 := @this: org.codehaus.groovy.antlr.AntlrParserPlugin;

        r0 := @parameter0: groovyjarjarantlr.collections.AST;

        r2 = interfaceinvoke r0.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getFirstChild()>();

     label1:
        if r2 == null goto label2;

        virtualinvoke r1.<org.codehaus.groovy.antlr.AntlrParserPlugin: void dump(groovyjarjarantlr.collections.AST)>(r2);

        r2 = interfaceinvoke r2.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getNextSibling()>();

        goto label1;

     label2:
        return;
    }

    protected void dump(groovyjarjarantlr.collections.AST)
    {
        java.io.PrintStream $r1;
        org.codehaus.groovy.antlr.AntlrParserPlugin r3;
        java.lang.StringBuffer $r0, $r2, $r6, $r7, $r9;
        java.lang.String $r5, $r8, $r10;
        groovyjarjarantlr.collections.AST r4;

        r3 := @this: org.codehaus.groovy.antlr.AntlrParserPlugin;

        r4 := @parameter0: groovyjarjarantlr.collections.AST;

        $r1 = <java.lang.System: java.io.PrintStream out>;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Type: ");

        $r5 = specialinvoke r3.<org.codehaus.groovy.antlr.AntlrParserPlugin: java.lang.String getTokenName(groovyjarjarantlr.collections.AST)>(r4);

        $r6 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" text: ");

        $r8 = interfaceinvoke r4.<groovyjarjarantlr.collections.AST: java.lang.String getText()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>($r10);

        return;
    }

    static void access$000(org.codehaus.groovy.antlr.AntlrParserPlugin, org.codehaus.groovy.control.SourceUnit, org.codehaus.groovy.antlr.SourceBuffer)
    {
        org.codehaus.groovy.antlr.SourceBuffer r2;
        org.codehaus.groovy.antlr.AntlrParserPlugin r0;
        org.codehaus.groovy.control.SourceUnit r1;

        r0 := @parameter0: org.codehaus.groovy.antlr.AntlrParserPlugin;

        r1 := @parameter1: org.codehaus.groovy.control.SourceUnit;

        r2 := @parameter2: org.codehaus.groovy.antlr.SourceBuffer;

        specialinvoke r0.<org.codehaus.groovy.antlr.AntlrParserPlugin: void outputASTInVariousFormsIfNeeded(org.codehaus.groovy.control.SourceUnit,org.codehaus.groovy.antlr.SourceBuffer)>(r1, r2);

        return;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Throwable $r4;
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.NoClassDefFoundError: java.lang.Throwable initCause(java.lang.Throwable)>($r2);

        throw $r4;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }
}
