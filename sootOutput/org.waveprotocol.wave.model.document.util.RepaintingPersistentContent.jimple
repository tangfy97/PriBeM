public abstract class org.waveprotocol.wave.model.document.util.RepaintingPersistentContent extends org.waveprotocol.wave.model.document.util.PersistentContent
{
    private final org.waveprotocol.wave.model.document.raw.RawDocument fullDoc;

    public void <init>(org.waveprotocol.wave.model.document.raw.RawDocument, org.waveprotocol.wave.model.document.util.ElementManager)
    {
        org.waveprotocol.wave.model.document.util.ElementManager r2;
        org.waveprotocol.wave.model.document.raw.RawDocument r1;
        org.waveprotocol.wave.model.document.util.RepaintingPersistentContent r0;

        r0 := @this: org.waveprotocol.wave.model.document.util.RepaintingPersistentContent;

        r1 := @parameter0: org.waveprotocol.wave.model.document.raw.RawDocument;

        r2 := @parameter1: org.waveprotocol.wave.model.document.util.ElementManager;

        specialinvoke r0.<org.waveprotocol.wave.model.document.util.PersistentContent: void <init>(org.waveprotocol.wave.model.document.raw.RawDocument,org.waveprotocol.wave.model.document.util.ElementManager)>(r1, r2);

        r0.<org.waveprotocol.wave.model.document.util.RepaintingPersistentContent: org.waveprotocol.wave.model.document.raw.RawDocument fullDoc> = r1;

        return;
    }

    public java.lang.Object createTextNode(java.lang.String, java.lang.Object, java.lang.Object)
    {
        java.lang.Object r2, r3, $r4;
        java.lang.String r1;
        org.waveprotocol.wave.model.document.util.RepaintingPersistentContent r0;

        r0 := @this: org.waveprotocol.wave.model.document.util.RepaintingPersistentContent;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        $r4 = specialinvoke r0.<org.waveprotocol.wave.model.document.util.PersistentContent: java.lang.Object createTextNode(java.lang.String,java.lang.Object,java.lang.Object)>(r1, r2, r3);

        virtualinvoke r0.<org.waveprotocol.wave.model.document.util.RepaintingPersistentContent: void schedulePaint(java.lang.Object)>($r4);

        return $r4;
    }

    public void insertData(java.lang.Object, int, java.lang.String)
    {
        int i0;
        java.lang.Object r1;
        java.lang.String r2;
        org.waveprotocol.wave.model.document.util.RepaintingPersistentContent r0;

        r0 := @this: org.waveprotocol.wave.model.document.util.RepaintingPersistentContent;

        r1 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.String;

        specialinvoke r0.<org.waveprotocol.wave.model.document.util.PersistentContent: void insertData(java.lang.Object,int,java.lang.String)>(r1, i0, r2);

        if i0 != 0 goto label1;

        virtualinvoke r0.<org.waveprotocol.wave.model.document.util.RepaintingPersistentContent: void schedulePaint(java.lang.Object)>(r1);

     label1:
        return;
    }

    public void removeChild(java.lang.Object, java.lang.Object)
    {
        org.waveprotocol.wave.model.document.raw.RawDocument $r2, $r5;
        java.lang.Object r1, $r3, r4, $r6;
        org.waveprotocol.wave.model.document.util.RepaintingPersistentContent r0;

        r0 := @this: org.waveprotocol.wave.model.document.util.RepaintingPersistentContent;

        r4 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        $r2 = r0.<org.waveprotocol.wave.model.document.util.RepaintingPersistentContent: org.waveprotocol.wave.model.document.raw.RawDocument fullDoc>;

        $r3 = interfaceinvoke $r2.<org.waveprotocol.wave.model.document.raw.RawDocument: java.lang.Object getParentElement(java.lang.Object)>(r1);

        specialinvoke r0.<org.waveprotocol.wave.model.document.util.PersistentContent: void removeChild(java.lang.Object,java.lang.Object)>(r4, r1);

        $r5 = r0.<org.waveprotocol.wave.model.document.util.RepaintingPersistentContent: org.waveprotocol.wave.model.document.raw.RawDocument fullDoc>;

        $r6 = interfaceinvoke $r5.<org.waveprotocol.wave.model.document.raw.RawDocument: java.lang.Object getFirstChild(java.lang.Object)>($r3);

        if $r6 != null goto label1;

        virtualinvoke r0.<org.waveprotocol.wave.model.document.util.RepaintingPersistentContent: void schedulePaint(java.lang.Object)>($r3);

     label1:
        return;
    }

    protected abstract void schedulePaint(java.lang.Object);
}
