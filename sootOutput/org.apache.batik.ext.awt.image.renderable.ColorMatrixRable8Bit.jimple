public class org.apache.batik.ext.awt.image.renderable.ColorMatrixRable8Bit extends org.apache.batik.ext.awt.image.renderable.AbstractColorInterpolationRable implements org.apache.batik.ext.awt.image.renderable.ColorMatrixRable
{
    private static float[][] MATRIX_LUMINANCE_TO_ALPHA;
    private int type;
    private float[][] matrix;

    public void setSource(org.apache.batik.ext.awt.image.renderable.Filter)
    {
        org.apache.batik.ext.awt.image.renderable.Filter r1;
        org.apache.batik.ext.awt.image.renderable.ColorMatrixRable8Bit r0;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.ColorMatrixRable8Bit;

        r1 := @parameter0: org.apache.batik.ext.awt.image.renderable.Filter;

        virtualinvoke r0.<org.apache.batik.ext.awt.image.renderable.AbstractRable: void init(org.apache.batik.ext.awt.image.renderable.Filter,java.util.Map)>(r1, null);

        return;
    }

    public org.apache.batik.ext.awt.image.renderable.Filter getSource()
    {
        java.util.Vector $r1;
        java.lang.Object $r2;
        org.apache.batik.ext.awt.image.renderable.Filter $r3;
        org.apache.batik.ext.awt.image.renderable.ColorMatrixRable8Bit r0;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.ColorMatrixRable8Bit;

        $r1 = virtualinvoke r0.<org.apache.batik.ext.awt.image.renderable.AbstractRable: java.util.Vector getSources()>();

        $r2 = virtualinvoke $r1.<java.util.Vector: java.lang.Object get(int)>(0);

        $r3 = (org.apache.batik.ext.awt.image.renderable.Filter) $r2;

        return $r3;
    }

    public int getType()
    {
        int $i0;
        org.apache.batik.ext.awt.image.renderable.ColorMatrixRable8Bit r0;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.ColorMatrixRable8Bit;

        $i0 = r0.<org.apache.batik.ext.awt.image.renderable.ColorMatrixRable8Bit: int type>;

        return $i0;
    }

    public float[][] getMatrix()
    {
        float[][] $r1;
        org.apache.batik.ext.awt.image.renderable.ColorMatrixRable8Bit r0;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.ColorMatrixRable8Bit;

        $r1 = r0.<org.apache.batik.ext.awt.image.renderable.ColorMatrixRable8Bit: float[][] matrix>;

        return $r1;
    }

    private void <init>()
    {
        org.apache.batik.ext.awt.image.renderable.ColorMatrixRable8Bit r0;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.ColorMatrixRable8Bit;

        specialinvoke r0.<org.apache.batik.ext.awt.image.renderable.AbstractColorInterpolationRable: void <init>()>();

        return;
    }

    public static org.apache.batik.ext.awt.image.renderable.ColorMatrixRable buildMatrix(float[][])
    {
        float[][] r0, r1;
        float[] $r2, $r3, r9;
        java.lang.IllegalArgumentException $r4, $r5, $r7, $r8;
        org.apache.batik.ext.awt.image.renderable.ColorMatrixRable8Bit $r6;
        int $i0, $i1, i2, i3;
        float $f0;

        r0 := @parameter0: float[][];

        if r0 != null goto label1;

        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r8;

     label1:
        $i0 = lengthof r0;

        if $i0 == 4 goto label2;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r7;

     label2:
        r1 = newarray (float[])[4];

        i2 = 0;

        goto label8;

     label3:
        r9 = r0[i2];

        if r9 != null goto label4;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r5;

     label4:
        $i1 = lengthof r9;

        if $i1 == 5 goto label5;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r4;

     label5:
        $r2 = newarray (float)[5];

        r1[i2] = $r2;

        i3 = 0;

        goto label7;

     label6:
        $r3 = r1[i2];

        $f0 = r9[i3];

        $r3[i3] = $f0;

        i3 = i3 + 1;

     label7:
        if i3 < 5 goto label6;

        i2 = i2 + 1;

     label8:
        if i2 < 4 goto label3;

        $r6 = new org.apache.batik.ext.awt.image.renderable.ColorMatrixRable8Bit;

        specialinvoke $r6.<org.apache.batik.ext.awt.image.renderable.ColorMatrixRable8Bit: void <init>()>();

        $r6.<org.apache.batik.ext.awt.image.renderable.ColorMatrixRable8Bit: int type> = 0;

        $r6.<org.apache.batik.ext.awt.image.renderable.ColorMatrixRable8Bit: float[][] matrix> = r1;

        return $r6;
    }

    public static org.apache.batik.ext.awt.image.renderable.ColorMatrixRable buildSaturate(float)
    {
        float[] $r2, $r3, $r4, $r5;
        float[][] $r1;
        org.apache.batik.ext.awt.image.renderable.ColorMatrixRable8Bit $r0;
        float f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17, $f18;

        f0 := @parameter0: float;

        $r0 = new org.apache.batik.ext.awt.image.renderable.ColorMatrixRable8Bit;

        specialinvoke $r0.<org.apache.batik.ext.awt.image.renderable.ColorMatrixRable8Bit: void <init>()>();

        $r0.<org.apache.batik.ext.awt.image.renderable.ColorMatrixRable8Bit: int type> = 1;

        $r1 = newarray (float[])[4];

        $r2 = newarray (float)[5];

        $f1 = 0.787F * f0;

        $f2 = 0.213F + $f1;

        $r2[0] = $f2;

        $f3 = 0.715F * f0;

        $f4 = 0.715F - $f3;

        $r2[1] = $f4;

        $f5 = 0.072F * f0;

        $f6 = 0.072F - $f5;

        $r2[2] = $f6;

        $r2[3] = 0.0F;

        $r2[4] = 0.0F;

        $r1[0] = $r2;

        $r3 = newarray (float)[5];

        $f7 = 0.213F * f0;

        $f8 = 0.213F - $f7;

        $r3[0] = $f8;

        $f9 = 0.285F * f0;

        $f10 = 0.715F + $f9;

        $r3[1] = $f10;

        $f11 = 0.072F * f0;

        $f12 = 0.072F - $f11;

        $r3[2] = $f12;

        $r3[3] = 0.0F;

        $r3[4] = 0.0F;

        $r1[1] = $r3;

        $r4 = newarray (float)[5];

        $f13 = 0.213F * f0;

        $f14 = 0.213F - $f13;

        $r4[0] = $f14;

        $f15 = 0.715F * f0;

        $f16 = 0.715F - $f15;

        $r4[1] = $f16;

        $f17 = 0.928F * f0;

        $f18 = 0.072F + $f17;

        $r4[2] = $f18;

        $r4[3] = 0.0F;

        $r4[4] = 0.0F;

        $r1[2] = $r4;

        $r5 = newarray (float)[5];

        $r5[0] = 0.0F;

        $r5[1] = 0.0F;

        $r5[2] = 0.0F;

        $r5[3] = 1.0F;

        $r5[4] = 0.0F;

        $r1[3] = $r5;

        $r0.<org.apache.batik.ext.awt.image.renderable.ColorMatrixRable8Bit: float[][] matrix> = $r1;

        return $r0;
    }

    public static org.apache.batik.ext.awt.image.renderable.ColorMatrixRable buildHueRotate(float)
    {
        org.apache.batik.ext.awt.image.renderable.ColorMatrixRable8Bit $r0;
        float f0, f1, f2, $f3, $f4, $f5, f6, $f7, $f8, $f9, f10, $f11, $f12, $f13, f14, $f15, $f16, $f17, f18, $f19, $f20, $f21, f22, $f23, $f24, $f25, f26, $f27, $f28, $f29, f30, $f31, $f32, $f33, f34, $f35, $f36, $f37, f38;
        float[] $r2, $r3, $r4, $r5;
        double $d0, $d1, $d2, $d3;
        float[][] $r1;

        f0 := @parameter0: float;

        $r0 = new org.apache.batik.ext.awt.image.renderable.ColorMatrixRable8Bit;

        specialinvoke $r0.<org.apache.batik.ext.awt.image.renderable.ColorMatrixRable8Bit: void <init>()>();

        $r0.<org.apache.batik.ext.awt.image.renderable.ColorMatrixRable8Bit: int type> = 2;

        $d0 = (double) f0;

        $d1 = staticinvoke <java.lang.Math: double cos(double)>($d0);

        f1 = (float) $d1;

        $d2 = (double) f0;

        $d3 = staticinvoke <java.lang.Math: double sin(double)>($d2);

        f2 = (float) $d3;

        $f3 = f1 * 0.787F;

        $f5 = 0.213F + $f3;

        $f4 = f2 * 0.213F;

        f6 = $f5 - $f4;

        $f7 = f1 * 0.212F;

        $f9 = 0.213F - $f7;

        $f8 = f2 * 0.143F;

        f10 = $f9 + $f8;

        $f11 = f1 * 0.213F;

        $f13 = 0.213F - $f11;

        $f12 = f2 * 0.787F;

        f14 = $f13 - $f12;

        $f15 = f1 * 0.715F;

        $f17 = 0.715F - $f15;

        $f16 = f2 * 0.715F;

        f18 = $f17 - $f16;

        $f19 = f1 * 0.285F;

        $f21 = 0.715F + $f19;

        $f20 = f2 * 0.14F;

        f22 = $f21 + $f20;

        $f23 = f1 * 0.715F;

        $f25 = 0.715F - $f23;

        $f24 = f2 * 0.715F;

        f26 = $f25 + $f24;

        $f27 = f1 * 0.072F;

        $f29 = 0.072F - $f27;

        $f28 = f2 * 0.928F;

        f30 = $f29 + $f28;

        $f31 = f1 * 0.072F;

        $f33 = 0.072F - $f31;

        $f32 = f2 * 0.283F;

        f34 = $f33 - $f32;

        $f35 = f1 * 0.928F;

        $f37 = 0.072F + $f35;

        $f36 = f2 * 0.072F;

        f38 = $f37 + $f36;

        $r1 = newarray (float[])[4];

        $r2 = newarray (float)[5];

        $r2[0] = f6;

        $r2[1] = f18;

        $r2[2] = f30;

        $r2[3] = 0.0F;

        $r2[4] = 0.0F;

        $r1[0] = $r2;

        $r3 = newarray (float)[5];

        $r3[0] = f10;

        $r3[1] = f22;

        $r3[2] = f34;

        $r3[3] = 0.0F;

        $r3[4] = 0.0F;

        $r1[1] = $r3;

        $r4 = newarray (float)[5];

        $r4[0] = f14;

        $r4[1] = f26;

        $r4[2] = f38;

        $r4[3] = 0.0F;

        $r4[4] = 0.0F;

        $r1[2] = $r4;

        $r5 = newarray (float)[5];

        $r5[0] = 0.0F;

        $r5[1] = 0.0F;

        $r5[2] = 0.0F;

        $r5[3] = 1.0F;

        $r5[4] = 0.0F;

        $r1[3] = $r5;

        $r0.<org.apache.batik.ext.awt.image.renderable.ColorMatrixRable8Bit: float[][] matrix> = $r1;

        return $r0;
    }

    public static org.apache.batik.ext.awt.image.renderable.ColorMatrixRable buildLuminanceToAlpha()
    {
        float[][] $r1;
        org.apache.batik.ext.awt.image.renderable.ColorMatrixRable8Bit $r0;

        $r0 = new org.apache.batik.ext.awt.image.renderable.ColorMatrixRable8Bit;

        specialinvoke $r0.<org.apache.batik.ext.awt.image.renderable.ColorMatrixRable8Bit: void <init>()>();

        $r0.<org.apache.batik.ext.awt.image.renderable.ColorMatrixRable8Bit: int type> = 3;

        $r1 = <org.apache.batik.ext.awt.image.renderable.ColorMatrixRable8Bit: float[][] MATRIX_LUMINANCE_TO_ALPHA>;

        $r0.<org.apache.batik.ext.awt.image.renderable.ColorMatrixRable8Bit: float[][] matrix> = $r1;

        return $r0;
    }

    public java.awt.image.RenderedImage createRendering(java.awt.image.renderable.RenderContext)
    {
        java.awt.image.renderable.RenderContext r2;
        float[][] $r6;
        org.apache.batik.ext.awt.image.rendered.CachableRed $r5;
        java.awt.image.RenderedImage $r3;
        org.apache.batik.ext.awt.image.rendered.ColorMatrixRed $r4;
        org.apache.batik.ext.awt.image.renderable.Filter $r1;
        org.apache.batik.ext.awt.image.renderable.ColorMatrixRable8Bit r0;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.ColorMatrixRable8Bit;

        r2 := @parameter0: java.awt.image.renderable.RenderContext;

        $r1 = virtualinvoke r0.<org.apache.batik.ext.awt.image.renderable.ColorMatrixRable8Bit: org.apache.batik.ext.awt.image.renderable.Filter getSource()>();

        $r3 = interfaceinvoke $r1.<java.awt.image.renderable.RenderableImage: java.awt.image.RenderedImage createRendering(java.awt.image.renderable.RenderContext)>(r2);

        if $r3 != null goto label1;

        return null;

     label1:
        $r4 = new org.apache.batik.ext.awt.image.rendered.ColorMatrixRed;

        $r5 = virtualinvoke r0.<org.apache.batik.ext.awt.image.renderable.AbstractColorInterpolationRable: org.apache.batik.ext.awt.image.rendered.CachableRed convertSourceCS(java.awt.image.RenderedImage)>($r3);

        $r6 = r0.<org.apache.batik.ext.awt.image.renderable.ColorMatrixRable8Bit: float[][] matrix>;

        specialinvoke $r4.<org.apache.batik.ext.awt.image.rendered.ColorMatrixRed: void <init>(org.apache.batik.ext.awt.image.rendered.CachableRed,float[][])>($r5, $r6);

        return $r4;
    }

    static void <clinit>()
    {
        float[][] $r0;
        float[] $r1, $r2, $r3, $r4;

        $r0 = newarray (float[])[4];

        $r1 = newarray (float)[5];

        $r1[0] = 0.0F;

        $r1[1] = 0.0F;

        $r1[2] = 0.0F;

        $r1[3] = 0.0F;

        $r1[4] = 0.0F;

        $r0[0] = $r1;

        $r2 = newarray (float)[5];

        $r2[0] = 0.0F;

        $r2[1] = 0.0F;

        $r2[2] = 0.0F;

        $r2[3] = 0.0F;

        $r2[4] = 0.0F;

        $r0[1] = $r2;

        $r3 = newarray (float)[5];

        $r3[0] = 0.0F;

        $r3[1] = 0.0F;

        $r3[2] = 0.0F;

        $r3[3] = 0.0F;

        $r3[4] = 0.0F;

        $r0[2] = $r3;

        $r4 = newarray (float)[5];

        $r4[0] = 0.2125F;

        $r4[1] = 0.7154F;

        $r4[2] = 0.0721F;

        $r4[3] = 0.0F;

        $r4[4] = 0.0F;

        $r0[3] = $r4;

        <org.apache.batik.ext.awt.image.renderable.ColorMatrixRable8Bit: float[][] MATRIX_LUMINANCE_TO_ALPHA> = $r0;

        return;
    }
}
