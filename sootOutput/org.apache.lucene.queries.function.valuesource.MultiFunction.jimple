public abstract class org.apache.lucene.queries.function.valuesource.MultiFunction extends org.apache.lucene.queries.function.ValueSource
{
    protected final java.util.List sources;

    public void <init>(java.util.List)
    {
        java.util.List r1;
        org.apache.lucene.queries.function.valuesource.MultiFunction r0;

        r0 := @this: org.apache.lucene.queries.function.valuesource.MultiFunction;

        r1 := @parameter0: java.util.List;

        specialinvoke r0.<org.apache.lucene.queries.function.ValueSource: void <init>()>();

        r0.<org.apache.lucene.queries.function.valuesource.MultiFunction: java.util.List sources> = r1;

        return;
    }

    protected abstract java.lang.String name();

    public java.lang.String description()
    {
        java.util.List $r2;
        org.apache.lucene.queries.function.valuesource.MultiFunction r0;
        java.lang.String $r1, $r3;

        r0 := @this: org.apache.lucene.queries.function.valuesource.MultiFunction;

        $r1 = virtualinvoke r0.<org.apache.lucene.queries.function.valuesource.MultiFunction: java.lang.String name()>();

        $r2 = r0.<org.apache.lucene.queries.function.valuesource.MultiFunction: java.util.List sources>;

        $r3 = staticinvoke <org.apache.lucene.queries.function.valuesource.MultiFunction: java.lang.String description(java.lang.String,java.util.List)>($r1, $r2);

        return $r3;
    }

    public static java.lang.String description(java.lang.String, java.util.List)
    {
        java.util.Iterator $r4;
        org.apache.lucene.queries.function.ValueSource r7;
        java.util.List r3;
        java.lang.StringBuilder $r0, $r2;
        java.lang.Object $r6;
        java.lang.String r1, $r5;
        boolean $z0, z1;

        r1 := @parameter0: java.lang.String;

        r3 := @parameter1: java.util.List;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(40);

        z1 = 1;

        $r4 = interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r6 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r7 = (org.apache.lucene.queries.function.ValueSource) $r6;

        if z1 == 0 goto label2;

        z1 = 0;

        goto label3;

     label2:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44);

     label3:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r7);

        goto label1;

     label4:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(41);

        $r5 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    public static org.apache.lucene.queries.function.FunctionValues[] valsArr(java.util.List, java.util.Map, org.apache.lucene.index.AtomicReaderContext) throws java.io.IOException
    {
        java.util.Iterator $r2;
        org.apache.lucene.queries.function.FunctionValues[] r1;
        org.apache.lucene.queries.function.ValueSource r4;
        java.util.List r0;
        java.util.Map r5;
        int $i0, $i1, i2;
        java.lang.Object $r3;
        org.apache.lucene.queries.function.FunctionValues $r7;
        org.apache.lucene.index.AtomicReaderContext r6;
        boolean $z0;

        r0 := @parameter0: java.util.List;

        r5 := @parameter1: java.util.Map;

        r6 := @parameter2: org.apache.lucene.index.AtomicReaderContext;

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        r1 = newarray (org.apache.lucene.queries.function.FunctionValues)[$i0];

        i2 = 0;

        $r2 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.apache.lucene.queries.function.ValueSource) $r3;

        $i1 = i2;

        i2 = i2 + 1;

        $r7 = virtualinvoke r4.<org.apache.lucene.queries.function.ValueSource: org.apache.lucene.queries.function.FunctionValues getValues(java.util.Map,org.apache.lucene.index.AtomicReaderContext)>(r5, r6);

        r1[$i1] = $r7;

        goto label1;

     label2:
        return r1;
    }

    public static java.lang.String toString(java.lang.String, org.apache.lucene.queries.function.FunctionValues[], int)
    {
        org.apache.lucene.queries.function.FunctionValues[] r3;
        int i0, i1, i2;
        java.lang.StringBuilder $r0, $r2;
        org.apache.lucene.queries.function.FunctionValues r5;
        java.lang.String r1, $r4, $r6;
        boolean z0;

        r1 := @parameter0: java.lang.String;

        r3 := @parameter1: org.apache.lucene.queries.function.FunctionValues[];

        i1 := @parameter2: int;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(40);

        z0 = 1;

        i0 = lengthof r3;

        i2 = 0;

     label1:
        if i2 >= i0 goto label4;

        r5 = r3[i2];

        if z0 == 0 goto label2;

        z0 = 0;

        goto label3;

     label2:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44);

     label3:
        $r6 = virtualinvoke r5.<org.apache.lucene.queries.function.FunctionValues: java.lang.String toString(int)>(i1);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        i2 = i2 + 1;

        goto label1;

     label4:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(41);

        $r4 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;
    }

    public void createWeight(java.util.Map, org.apache.lucene.search.IndexSearcher) throws java.io.IOException
    {
        java.util.Iterator $r2;
        org.apache.lucene.queries.function.ValueSource r4;
        java.util.List $r1;
        org.apache.lucene.queries.function.valuesource.MultiFunction r0;
        java.util.Map r5;
        java.lang.Object $r3;
        boolean $z0;
        org.apache.lucene.search.IndexSearcher r6;

        r0 := @this: org.apache.lucene.queries.function.valuesource.MultiFunction;

        r5 := @parameter0: java.util.Map;

        r6 := @parameter1: org.apache.lucene.search.IndexSearcher;

        $r1 = r0.<org.apache.lucene.queries.function.valuesource.MultiFunction: java.util.List sources>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.apache.lucene.queries.function.ValueSource) $r3;

        virtualinvoke r4.<org.apache.lucene.queries.function.ValueSource: void createWeight(java.util.Map,org.apache.lucene.search.IndexSearcher)>(r5, r6);

        goto label1;

     label2:
        return;
    }

    public int hashCode()
    {
        java.util.List $r1;
        org.apache.lucene.queries.function.valuesource.MultiFunction r0;
        int $i0, $i1, $i2;
        java.lang.String $r2;

        r0 := @this: org.apache.lucene.queries.function.valuesource.MultiFunction;

        $r1 = r0.<org.apache.lucene.queries.function.valuesource.MultiFunction: java.util.List sources>;

        $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>();

        $r2 = virtualinvoke r0.<org.apache.lucene.queries.function.valuesource.MultiFunction: java.lang.String name()>();

        $i1 = virtualinvoke $r2.<java.lang.String: int hashCode()>();

        $i2 = $i0 + $i1;

        return $i2;
    }

    public boolean equals(java.lang.Object)
    {
        java.util.List $r5, $r6;
        org.apache.lucene.queries.function.valuesource.MultiFunction r0, r4;
        java.lang.Class $r1, $r3;
        java.lang.Object r2;
        boolean $z0;

        r0 := @this: org.apache.lucene.queries.function.valuesource.MultiFunction;

        r2 := @parameter0: java.lang.Object;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>();

        if $r1 == $r3 goto label1;

        return 0;

     label1:
        r4 = (org.apache.lucene.queries.function.valuesource.MultiFunction) r2;

        $r6 = r0.<org.apache.lucene.queries.function.valuesource.MultiFunction: java.util.List sources>;

        $r5 = r4.<org.apache.lucene.queries.function.valuesource.MultiFunction: java.util.List sources>;

        $z0 = virtualinvoke $r6.<java.lang.Object: boolean equals(java.lang.Object)>($r5);

        return $z0;
    }
}
