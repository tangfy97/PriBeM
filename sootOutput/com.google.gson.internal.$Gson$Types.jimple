public final class com.google.gson.internal.$Gson$Types extends java.lang.Object
{
    static final java.lang.reflect.Type[] EMPTY_TYPE_ARRAY;

    private void <init>()
    {
        com.google.gson.internal.$Gson$Types r0;

        r0 := @this: com.google.gson.internal.$Gson$Types;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static transient java.lang.reflect.ParameterizedType newParameterizedTypeWithOwner(java.lang.reflect.Type, java.lang.reflect.Type, java.lang.reflect.Type[])
    {
        java.lang.reflect.Type r1, r2;
        com.google.gson.internal.$Gson$Types$ParameterizedTypeImpl $r0;
        java.lang.reflect.Type[] r3;

        r1 := @parameter0: java.lang.reflect.Type;

        r2 := @parameter1: java.lang.reflect.Type;

        r3 := @parameter2: java.lang.reflect.Type[];

        $r0 = new com.google.gson.internal.$Gson$Types$ParameterizedTypeImpl;

        specialinvoke $r0.<com.google.gson.internal.$Gson$Types$ParameterizedTypeImpl: void <init>(java.lang.reflect.Type,java.lang.reflect.Type,java.lang.reflect.Type[])>(r1, r2, r3);

        return $r0;
    }

    public static java.lang.reflect.GenericArrayType arrayOf(java.lang.reflect.Type)
    {
        java.lang.reflect.Type r1;
        com.google.gson.internal.$Gson$Types$GenericArrayTypeImpl $r0;

        r1 := @parameter0: java.lang.reflect.Type;

        $r0 = new com.google.gson.internal.$Gson$Types$GenericArrayTypeImpl;

        specialinvoke $r0.<com.google.gson.internal.$Gson$Types$GenericArrayTypeImpl: void <init>(java.lang.reflect.Type)>(r1);

        return $r0;
    }

    public static java.lang.reflect.WildcardType subtypeOf(java.lang.reflect.Type)
    {
        java.lang.reflect.Type r2;
        com.google.gson.internal.$Gson$Types$WildcardTypeImpl $r0;
        java.lang.reflect.Type[] $r1, $r3;

        r2 := @parameter0: java.lang.reflect.Type;

        $r0 = new com.google.gson.internal.$Gson$Types$WildcardTypeImpl;

        $r1 = newarray (java.lang.reflect.Type)[1];

        $r1[0] = r2;

        $r3 = <com.google.gson.internal.$Gson$Types: java.lang.reflect.Type[] EMPTY_TYPE_ARRAY>;

        specialinvoke $r0.<com.google.gson.internal.$Gson$Types$WildcardTypeImpl: void <init>(java.lang.reflect.Type[],java.lang.reflect.Type[])>($r1, $r3);

        return $r0;
    }

    public static java.lang.reflect.WildcardType supertypeOf(java.lang.reflect.Type)
    {
        java.lang.reflect.Type r3;
        com.google.gson.internal.$Gson$Types$WildcardTypeImpl $r0;
        java.lang.reflect.Type[] $r1, $r2;

        r3 := @parameter0: java.lang.reflect.Type;

        $r0 = new com.google.gson.internal.$Gson$Types$WildcardTypeImpl;

        $r1 = newarray (java.lang.reflect.Type)[1];

        $r1[0] = class "Ljava/lang/Object;";

        $r2 = newarray (java.lang.reflect.Type)[1];

        $r2[0] = r3;

        specialinvoke $r0.<com.google.gson.internal.$Gson$Types$WildcardTypeImpl: void <init>(java.lang.reflect.Type[],java.lang.reflect.Type[])>($r1, $r2);

        return $r0;
    }

    public static java.lang.reflect.Type canonicalize(java.lang.reflect.Type)
    {
        java.lang.reflect.GenericArrayType r15;
        java.lang.reflect.WildcardType r16;
        boolean $z0, $z1, $z2, $z3, $z4;
        com.google.gson.internal.$Gson$Types$WildcardTypeImpl $r20;
        java.lang.reflect.ParameterizedType r14;
        java.lang.reflect.Type r0, $r5, $r7, $r8, $r11, $r13;
        com.google.gson.internal.$Gson$Types$ParameterizedTypeImpl $r18;
        java.lang.reflect.Type[] $r2, $r3, $r9;
        java.lang.Class $r10, r12;
        com.google.gson.internal.$Gson$Types$GenericArrayTypeImpl $r17, $r19;

        r0 := @parameter0: java.lang.reflect.Type;

        $z0 = r0 instanceof java.lang.Class;

        if $z0 == 0 goto label3;

        r12 = (java.lang.Class) r0;

        $z4 = virtualinvoke r12.<java.lang.Class: boolean isArray()>();

        if $z4 == 0 goto label1;

        $r17 = new com.google.gson.internal.$Gson$Types$GenericArrayTypeImpl;

        $r13 = $r17;

        $r10 = virtualinvoke r12.<java.lang.Class: java.lang.Class getComponentType()>();

        $r11 = staticinvoke <com.google.gson.internal.$Gson$Types: java.lang.reflect.Type canonicalize(java.lang.reflect.Type)>($r10);

        specialinvoke $r17.<com.google.gson.internal.$Gson$Types$GenericArrayTypeImpl: void <init>(java.lang.reflect.Type)>($r11);

        goto label2;

     label1:
        $r13 = r12;

     label2:
        return $r13;

     label3:
        $z1 = r0 instanceof java.lang.reflect.ParameterizedType;

        if $z1 == 0 goto label4;

        r14 = (java.lang.reflect.ParameterizedType) r0;

        $r18 = new com.google.gson.internal.$Gson$Types$ParameterizedTypeImpl;

        $r7 = interfaceinvoke r14.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getOwnerType()>();

        $r8 = interfaceinvoke r14.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>();

        $r9 = interfaceinvoke r14.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();

        specialinvoke $r18.<com.google.gson.internal.$Gson$Types$ParameterizedTypeImpl: void <init>(java.lang.reflect.Type,java.lang.reflect.Type,java.lang.reflect.Type[])>($r7, $r8, $r9);

        return $r18;

     label4:
        $z2 = r0 instanceof java.lang.reflect.GenericArrayType;

        if $z2 == 0 goto label5;

        r15 = (java.lang.reflect.GenericArrayType) r0;

        $r19 = new com.google.gson.internal.$Gson$Types$GenericArrayTypeImpl;

        $r5 = interfaceinvoke r15.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>();

        specialinvoke $r19.<com.google.gson.internal.$Gson$Types$GenericArrayTypeImpl: void <init>(java.lang.reflect.Type)>($r5);

        return $r19;

     label5:
        $z3 = r0 instanceof java.lang.reflect.WildcardType;

        if $z3 == 0 goto label6;

        r16 = (java.lang.reflect.WildcardType) r0;

        $r20 = new com.google.gson.internal.$Gson$Types$WildcardTypeImpl;

        $r2 = interfaceinvoke r16.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getUpperBounds()>();

        $r3 = interfaceinvoke r16.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()>();

        specialinvoke $r20.<com.google.gson.internal.$Gson$Types$WildcardTypeImpl: void <init>(java.lang.reflect.Type[],java.lang.reflect.Type[])>($r2, $r3);

        return $r20;

     label6:
        return r0;
    }

    public static java.lang.Class getRawType(java.lang.reflect.Type)
    {
        java.lang.reflect.GenericArrayType $r13;
        java.lang.reflect.WildcardType $r9;
        java.lang.String $r8, $r22;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.lang.IllegalArgumentException $r2;
        java.lang.reflect.ParameterizedType r21;
        java.lang.reflect.Type r0, $r11, $r14, $r18;
        java.lang.reflect.Type[] $r10;
        java.lang.Class $r1, $r12, $r15, $r17, $r19, $r20;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r7;
        java.lang.Object $r16;

        r0 := @parameter0: java.lang.reflect.Type;

        $z0 = r0 instanceof java.lang.Class;

        if $z0 == 0 goto label1;

        $r20 = (java.lang.Class) r0;

        return $r20;

     label1:
        $z1 = r0 instanceof java.lang.reflect.ParameterizedType;

        if $z1 == 0 goto label2;

        r21 = (java.lang.reflect.ParameterizedType) r0;

        $r18 = interfaceinvoke r21.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>();

        $z5 = $r18 instanceof java.lang.Class;

        staticinvoke <com.google.gson.internal.$Gson$Preconditions: void checkArgument(boolean)>($z5);

        $r19 = (java.lang.Class) $r18;

        return $r19;

     label2:
        $z2 = r0 instanceof java.lang.reflect.GenericArrayType;

        if $z2 == 0 goto label3;

        $r13 = (java.lang.reflect.GenericArrayType) r0;

        $r14 = interfaceinvoke $r13.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>();

        $r15 = staticinvoke <com.google.gson.internal.$Gson$Types: java.lang.Class getRawType(java.lang.reflect.Type)>($r14);

        $r16 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>($r15, 0);

        $r17 = virtualinvoke $r16.<java.lang.Object: java.lang.Class getClass()>();

        return $r17;

     label3:
        $z3 = r0 instanceof java.lang.reflect.TypeVariable;

        if $z3 == 0 goto label4;

        return class "Ljava/lang/Object;";

     label4:
        $z4 = r0 instanceof java.lang.reflect.WildcardType;

        if $z4 == 0 goto label5;

        $r9 = (java.lang.reflect.WildcardType) r0;

        $r10 = interfaceinvoke $r9.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getUpperBounds()>();

        $r11 = $r10[0];

        $r12 = staticinvoke <com.google.gson.internal.$Gson$Types: java.lang.Class getRawType(java.lang.reflect.Type)>($r11);

        return $r12;

     label5:
        if r0 != null goto label6;

        $r22 = "null";

        goto label7;

     label6:
        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r22 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

     label7:
        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Expected a Class, ParameterizedType, or GenericArrayType, but <");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("> is of type ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r2;
    }

    static boolean equal(java.lang.Object, java.lang.Object)
    {
        java.lang.Object r0, r1;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        if r0 == r1 goto label1;

        if r0 == null goto label2;

        $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    public static boolean equals(java.lang.reflect.Type, java.lang.reflect.Type)
    {
        java.lang.reflect.GenericArrayType r20, r21;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19;
        java.lang.reflect.Type r0, r1, $r10, $r11, $r12, $r13, $r14, $r15;
        java.lang.reflect.Type[] $r6, $r7, $r8, $r9, $r16, $r17;
        java.lang.reflect.WildcardType r22, r23;
        java.lang.String $r4, $r5;
        java.lang.reflect.GenericDeclaration $r2, $r3;
        java.lang.reflect.TypeVariable r24, r25;
        java.lang.reflect.ParameterizedType r18, r19;

        r0 := @parameter0: java.lang.reflect.Type;

        r1 := @parameter1: java.lang.reflect.Type;

        if r0 != r1 goto label01;

        return 1;

     label01:
        $z0 = r0 instanceof java.lang.Class;

        if $z0 == 0 goto label02;

        $z16 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

        return $z16;

     label02:
        $z1 = r0 instanceof java.lang.reflect.ParameterizedType;

        if $z1 == 0 goto label06;

        $z12 = r1 instanceof java.lang.reflect.ParameterizedType;

        if $z12 != 0 goto label03;

        return 0;

     label03:
        r18 = (java.lang.reflect.ParameterizedType) r0;

        r19 = (java.lang.reflect.ParameterizedType) r1;

        $r12 = interfaceinvoke r18.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getOwnerType()>();

        $r13 = interfaceinvoke r19.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getOwnerType()>();

        $z13 = staticinvoke <com.google.gson.internal.$Gson$Types: boolean equal(java.lang.Object,java.lang.Object)>($r12, $r13);

        if $z13 == 0 goto label04;

        $r14 = interfaceinvoke r18.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>();

        $r15 = interfaceinvoke r19.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>();

        $z14 = virtualinvoke $r14.<java.lang.Object: boolean equals(java.lang.Object)>($r15);

        if $z14 == 0 goto label04;

        $r16 = interfaceinvoke r18.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();

        $r17 = interfaceinvoke r19.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();

        $z15 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>($r16, $r17);

        if $z15 == 0 goto label04;

        $z17 = 1;

        goto label05;

     label04:
        $z17 = 0;

     label05:
        return $z17;

     label06:
        $z2 = r0 instanceof java.lang.reflect.GenericArrayType;

        if $z2 == 0 goto label08;

        $z10 = r1 instanceof java.lang.reflect.GenericArrayType;

        if $z10 != 0 goto label07;

        return 0;

     label07:
        r20 = (java.lang.reflect.GenericArrayType) r0;

        r21 = (java.lang.reflect.GenericArrayType) r1;

        $r10 = interfaceinvoke r20.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>();

        $r11 = interfaceinvoke r21.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>();

        $z11 = staticinvoke <com.google.gson.internal.$Gson$Types: boolean equals(java.lang.reflect.Type,java.lang.reflect.Type)>($r10, $r11);

        return $z11;

     label08:
        $z3 = r0 instanceof java.lang.reflect.WildcardType;

        if $z3 == 0 goto label12;

        $z7 = r1 instanceof java.lang.reflect.WildcardType;

        if $z7 != 0 goto label09;

        return 0;

     label09:
        r22 = (java.lang.reflect.WildcardType) r0;

        r23 = (java.lang.reflect.WildcardType) r1;

        $r6 = interfaceinvoke r22.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getUpperBounds()>();

        $r7 = interfaceinvoke r23.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getUpperBounds()>();

        $z8 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>($r6, $r7);

        if $z8 == 0 goto label10;

        $r8 = interfaceinvoke r22.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()>();

        $r9 = interfaceinvoke r23.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()>();

        $z9 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>($r8, $r9);

        if $z9 == 0 goto label10;

        $z18 = 1;

        goto label11;

     label10:
        $z18 = 0;

     label11:
        return $z18;

     label12:
        $z4 = r0 instanceof java.lang.reflect.TypeVariable;

        if $z4 == 0 goto label16;

        $z5 = r1 instanceof java.lang.reflect.TypeVariable;

        if $z5 != 0 goto label13;

        return 0;

     label13:
        r24 = (java.lang.reflect.TypeVariable) r0;

        r25 = (java.lang.reflect.TypeVariable) r1;

        $r2 = interfaceinvoke r24.<java.lang.reflect.TypeVariable: java.lang.reflect.GenericDeclaration getGenericDeclaration()>();

        $r3 = interfaceinvoke r25.<java.lang.reflect.TypeVariable: java.lang.reflect.GenericDeclaration getGenericDeclaration()>();

        if $r2 != $r3 goto label14;

        $r4 = interfaceinvoke r24.<java.lang.reflect.TypeVariable: java.lang.String getName()>();

        $r5 = interfaceinvoke r25.<java.lang.reflect.TypeVariable: java.lang.String getName()>();

        $z6 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z6 == 0 goto label14;

        $z19 = 1;

        goto label15;

     label14:
        $z19 = 0;

     label15:
        return $z19;

     label16:
        return 0;
    }

    private static int hashCodeOrZero(java.lang.Object)
    {
        int $i0;
        java.lang.Object r0;

        r0 := @parameter0: java.lang.Object;

        if r0 == null goto label1;

        $i0 = virtualinvoke r0.<java.lang.Object: int hashCode()>();

        goto label2;

     label1:
        $i0 = 0;

     label2:
        return $i0;
    }

    public static java.lang.String typeToString(java.lang.reflect.Type)
    {
        java.lang.reflect.Type r0;
        java.lang.Class $r1;
        java.lang.String $r2;
        boolean $z0;

        r0 := @parameter0: java.lang.reflect.Type;

        $z0 = r0 instanceof java.lang.Class;

        if $z0 == 0 goto label1;

        $r1 = (java.lang.Class) r0;

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        goto label2;

     label1:
        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>();

     label2:
        return $r2;
    }

    static java.lang.reflect.Type getGenericSupertype(java.lang.reflect.Type, java.lang.Class, java.lang.Class)
    {
        int i0, i1;
        boolean $z0, $z1, $z2, $z3;
        java.lang.Class[] $r5;
        java.lang.reflect.Type $r2, $r3, $r4, $r10, $r11, $r13, r14;
        java.lang.reflect.Type[] $r8, $r12;
        java.lang.Class r0, $r1, $r6, $r7, $r9, r15;

        r14 := @parameter0: java.lang.reflect.Type;

        r15 := @parameter1: java.lang.Class;

        r0 := @parameter2: java.lang.Class;

        if r0 != r15 goto label1;

        return r14;

     label1:
        $z0 = virtualinvoke r0.<java.lang.Class: boolean isInterface()>();

        if $z0 == 0 goto label5;

        $r5 = virtualinvoke r15.<java.lang.Class: java.lang.Class[] getInterfaces()>();

        i1 = 0;

        i0 = lengthof $r5;

     label2:
        if i1 >= i0 goto label5;

        $r6 = $r5[i1];

        if $r6 != r0 goto label3;

        $r12 = virtualinvoke r15.<java.lang.Class: java.lang.reflect.Type[] getGenericInterfaces()>();

        $r13 = $r12[i1];

        return $r13;

     label3:
        $r7 = $r5[i1];

        $z3 = virtualinvoke r0.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r7);

        if $z3 == 0 goto label4;

        $r8 = virtualinvoke r15.<java.lang.Class: java.lang.reflect.Type[] getGenericInterfaces()>();

        $r10 = $r8[i1];

        $r9 = $r5[i1];

        $r11 = staticinvoke <com.google.gson.internal.$Gson$Types: java.lang.reflect.Type getGenericSupertype(java.lang.reflect.Type,java.lang.Class,java.lang.Class)>($r10, $r9, r0);

        return $r11;

     label4:
        i1 = i1 + 1;

        goto label2;

     label5:
        $z1 = virtualinvoke r15.<java.lang.Class: boolean isInterface()>();

        if $z1 != 0 goto label9;

     label6:
        if r15 == class "Ljava/lang/Object;" goto label9;

        $r1 = virtualinvoke r15.<java.lang.Class: java.lang.Class getSuperclass()>();

        if $r1 != r0 goto label7;

        $r4 = virtualinvoke r15.<java.lang.Class: java.lang.reflect.Type getGenericSuperclass()>();

        return $r4;

     label7:
        $z2 = virtualinvoke r0.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r1);

        if $z2 == 0 goto label8;

        $r2 = virtualinvoke r15.<java.lang.Class: java.lang.reflect.Type getGenericSuperclass()>();

        $r3 = staticinvoke <com.google.gson.internal.$Gson$Types: java.lang.reflect.Type getGenericSupertype(java.lang.reflect.Type,java.lang.Class,java.lang.Class)>($r2, $r1, r0);

        return $r3;

     label8:
        r15 = $r1;

        goto label6;

     label9:
        return r0;
    }

    static java.lang.reflect.Type getSupertype(java.lang.reflect.Type, java.lang.Class, java.lang.Class)
    {
        java.lang.reflect.Type r2, $r3, $r4;
        java.lang.Class r0, r1;
        boolean $z0;

        r2 := @parameter0: java.lang.reflect.Type;

        r1 := @parameter1: java.lang.Class;

        r0 := @parameter2: java.lang.Class;

        $z0 = virtualinvoke r0.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r1);

        staticinvoke <com.google.gson.internal.$Gson$Preconditions: void checkArgument(boolean)>($z0);

        $r3 = staticinvoke <com.google.gson.internal.$Gson$Types: java.lang.reflect.Type getGenericSupertype(java.lang.reflect.Type,java.lang.Class,java.lang.Class)>(r2, r1, r0);

        $r4 = staticinvoke <com.google.gson.internal.$Gson$Types: java.lang.reflect.Type resolve(java.lang.reflect.Type,java.lang.Class,java.lang.reflect.Type)>(r2, r1, $r3);

        return $r4;
    }

    public static boolean isArray(java.lang.reflect.Type)
    {
        java.lang.reflect.Type r0;
        java.lang.Class $r1;
        boolean $z0, $z1, $z2, $z3;

        r0 := @parameter0: java.lang.reflect.Type;

        $z0 = r0 instanceof java.lang.reflect.GenericArrayType;

        if $z0 != 0 goto label1;

        $z1 = r0 instanceof java.lang.Class;

        if $z1 == 0 goto label2;

        $r1 = (java.lang.Class) r0;

        $z2 = virtualinvoke $r1.<java.lang.Class: boolean isArray()>();

        if $z2 == 0 goto label2;

     label1:
        $z3 = 1;

        goto label3;

     label2:
        $z3 = 0;

     label3:
        return $z3;
    }

    public static java.lang.reflect.Type getArrayComponentType(java.lang.reflect.Type)
    {
        java.lang.reflect.GenericArrayType $r2;
        java.lang.reflect.Type r0, $r3;
        java.lang.Class $r1;
        boolean $z0;

        r0 := @parameter0: java.lang.reflect.Type;

        $z0 = r0 instanceof java.lang.reflect.GenericArrayType;

        if $z0 == 0 goto label1;

        $r2 = (java.lang.reflect.GenericArrayType) r0;

        $r3 = interfaceinvoke $r2.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>();

        goto label2;

     label1:
        $r1 = (java.lang.Class) r0;

        $r3 = virtualinvoke $r1.<java.lang.Class: java.lang.Class getComponentType()>();

     label2:
        return $r3;
    }

    public static java.lang.reflect.Type getCollectionElementType(java.lang.reflect.Type, java.lang.Class)
    {
        java.lang.reflect.ParameterizedType $r3;
        java.lang.reflect.Type r0, $r2, $r5;
        java.lang.reflect.Type[] $r4;
        java.lang.Class r1;

        r0 := @parameter0: java.lang.reflect.Type;

        r1 := @parameter1: java.lang.Class;

        $r2 = staticinvoke <com.google.gson.internal.$Gson$Types: java.lang.reflect.Type getSupertype(java.lang.reflect.Type,java.lang.Class,java.lang.Class)>(r0, r1, class "Ljava/util/Collection;");

        $r3 = (java.lang.reflect.ParameterizedType) $r2;

        $r4 = interfaceinvoke $r3.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();

        $r5 = $r4[0];

        return $r5;
    }

    public static java.lang.reflect.Type[] getMapKeyAndValueTypes(java.lang.reflect.Type, java.lang.Class)
    {
        java.lang.reflect.ParameterizedType r3;
        java.lang.reflect.Type r0, $r2;
        java.lang.reflect.Type[] $r4, $r5;
        java.lang.Class r1;

        r0 := @parameter0: java.lang.reflect.Type;

        r1 := @parameter1: java.lang.Class;

        if r0 != class "Ljava/util/Properties;" goto label1;

        $r5 = newarray (java.lang.reflect.Type)[2];

        $r5[0] = class "Ljava/lang/String;";

        $r5[1] = class "Ljava/lang/String;";

        return $r5;

     label1:
        $r2 = staticinvoke <com.google.gson.internal.$Gson$Types: java.lang.reflect.Type getSupertype(java.lang.reflect.Type,java.lang.Class,java.lang.Class)>(r0, r1, class "Ljava/util/Map;");

        r3 = (java.lang.reflect.ParameterizedType) $r2;

        $r4 = interfaceinvoke r3.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();

        return $r4;
    }

    public static java.lang.reflect.Type resolve(java.lang.reflect.Type, java.lang.Class, java.lang.reflect.Type)
    {
        java.lang.reflect.GenericArrayType r30, $r31;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, z7;
        java.lang.reflect.Type r2, $r4, $r5, $r6, $r8, $r9, $r10, $r12, $r13, $r15, $r16, $r17, $r18, $r20, $r21, $r24, $r25, r26, $r29;
        java.lang.reflect.Type[] $r0, $r1, $r14, r33;
        java.lang.reflect.WildcardType $r7, $r11, r35;
        int $i0, $i1, $i2, i3;
        java.lang.reflect.TypeVariable r27;
        java.lang.reflect.ParameterizedType r32, $r34;
        java.lang.Class r3, $r22, $r23, r28;
        java.lang.Object $r19;

        r2 := @parameter0: java.lang.reflect.Type;

        r3 := @parameter1: java.lang.Class;

        r26 := @parameter2: java.lang.reflect.Type;

     label01:
        $z0 = r26 instanceof java.lang.reflect.TypeVariable;

        if $z0 == 0 goto label03;

        r27 = (java.lang.reflect.TypeVariable) r26;

        $r25 = staticinvoke <com.google.gson.internal.$Gson$Types: java.lang.reflect.Type resolveTypeVariable(java.lang.reflect.Type,java.lang.Class,java.lang.reflect.TypeVariable)>(r2, r3, r27);

        r26 = $r25;

        if $r25 != r27 goto label02;

        return $r25;

     label02:
        goto label01;

     label03:
        $z1 = r26 instanceof java.lang.Class;

        if $z1 == 0 goto label06;

        $r22 = (java.lang.Class) r26;

        $z5 = virtualinvoke $r22.<java.lang.Class: boolean isArray()>();

        if $z5 == 0 goto label06;

        r28 = (java.lang.Class) r26;

        $r23 = virtualinvoke r28.<java.lang.Class: java.lang.Class getComponentType()>();

        $r24 = staticinvoke <com.google.gson.internal.$Gson$Types: java.lang.reflect.Type resolve(java.lang.reflect.Type,java.lang.Class,java.lang.reflect.Type)>(r2, r3, $r23);

        if $r23 != $r24 goto label04;

        $r29 = r28;

        goto label05;

     label04:
        $r29 = staticinvoke <com.google.gson.internal.$Gson$Types: java.lang.reflect.GenericArrayType arrayOf(java.lang.reflect.Type)>($r24);

     label05:
        return $r29;

     label06:
        $z2 = r26 instanceof java.lang.reflect.GenericArrayType;

        if $z2 == 0 goto label09;

        r30 = (java.lang.reflect.GenericArrayType) r26;

        $r20 = interfaceinvoke r30.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>();

        $r21 = staticinvoke <com.google.gson.internal.$Gson$Types: java.lang.reflect.Type resolve(java.lang.reflect.Type,java.lang.Class,java.lang.reflect.Type)>(r2, r3, $r20);

        if $r20 != $r21 goto label07;

        $r31 = r30;

        goto label08;

     label07:
        $r31 = staticinvoke <com.google.gson.internal.$Gson$Types: java.lang.reflect.GenericArrayType arrayOf(java.lang.reflect.Type)>($r21);

     label08:
        return $r31;

     label09:
        $z3 = r26 instanceof java.lang.reflect.ParameterizedType;

        if $z3 == 0 goto label18;

        r32 = (java.lang.reflect.ParameterizedType) r26;

        $r12 = interfaceinvoke r32.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getOwnerType()>();

        $r13 = staticinvoke <com.google.gson.internal.$Gson$Types: java.lang.reflect.Type resolve(java.lang.reflect.Type,java.lang.Class,java.lang.reflect.Type)>(r2, r3, $r12);

        if $r13 == $r12 goto label10;

        $z6 = 1;

        goto label11;

     label10:
        $z6 = 0;

     label11:
        z7 = $z6;

        $r14 = interfaceinvoke r32.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();

        r33 = $r14;

        i3 = 0;

        $i2 = lengthof $r14;

     label12:
        if i3 >= $i2 goto label15;

        $r16 = r33[i3];

        $r17 = staticinvoke <com.google.gson.internal.$Gson$Types: java.lang.reflect.Type resolve(java.lang.reflect.Type,java.lang.Class,java.lang.reflect.Type)>(r2, r3, $r16);

        $r18 = r33[i3];

        if $r17 == $r18 goto label14;

        if z7 != 0 goto label13;

        $r19 = virtualinvoke r33.<java.lang.Object: java.lang.Object clone()>();

        r33 = (java.lang.reflect.Type[]) $r19;

        z7 = 1;

     label13:
        r33[i3] = $r17;

     label14:
        i3 = i3 + 1;

        goto label12;

     label15:
        if z7 == 0 goto label16;

        $r15 = interfaceinvoke r32.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>();

        $r34 = staticinvoke <com.google.gson.internal.$Gson$Types: java.lang.reflect.ParameterizedType newParameterizedTypeWithOwner(java.lang.reflect.Type,java.lang.reflect.Type,java.lang.reflect.Type[])>($r13, $r15, r33);

        goto label17;

     label16:
        $r34 = r32;

     label17:
        return $r34;

     label18:
        $z4 = r26 instanceof java.lang.reflect.WildcardType;

        if $z4 == 0 goto label22;

        r35 = (java.lang.reflect.WildcardType) r26;

        $r0 = interfaceinvoke r35.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()>();

        $r1 = interfaceinvoke r35.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getUpperBounds()>();

        $i0 = lengthof $r0;

        if $i0 != 1 goto label20;

        $r8 = $r0[0];

        $r9 = staticinvoke <com.google.gson.internal.$Gson$Types: java.lang.reflect.Type resolve(java.lang.reflect.Type,java.lang.Class,java.lang.reflect.Type)>(r2, r3, $r8);

        $r10 = $r0[0];

        if $r9 == $r10 goto label19;

        $r11 = staticinvoke <com.google.gson.internal.$Gson$Types: java.lang.reflect.WildcardType supertypeOf(java.lang.reflect.Type)>($r9);

        return $r11;

     label19:
        goto label21;

     label20:
        $i1 = lengthof $r1;

        if $i1 != 1 goto label21;

        $r4 = $r1[0];

        $r5 = staticinvoke <com.google.gson.internal.$Gson$Types: java.lang.reflect.Type resolve(java.lang.reflect.Type,java.lang.Class,java.lang.reflect.Type)>(r2, r3, $r4);

        $r6 = $r1[0];

        if $r5 == $r6 goto label21;

        $r7 = staticinvoke <com.google.gson.internal.$Gson$Types: java.lang.reflect.WildcardType subtypeOf(java.lang.reflect.Type)>($r5);

        return $r7;

     label21:
        return r35;

     label22:
        return r26;
    }

    static java.lang.reflect.Type resolveTypeVariable(java.lang.reflect.Type, java.lang.Class, java.lang.reflect.TypeVariable)
    {
        java.lang.reflect.TypeVariable r0;
        java.lang.reflect.ParameterizedType $r6;
        java.lang.reflect.Type r2, $r4, $r8;
        java.lang.reflect.TypeVariable[] $r5;
        int $i0;
        java.lang.reflect.Type[] $r7;
        java.lang.Class $r1, r3;
        boolean $z0;

        r2 := @parameter0: java.lang.reflect.Type;

        r3 := @parameter1: java.lang.Class;

        r0 := @parameter2: java.lang.reflect.TypeVariable;

        $r1 = staticinvoke <com.google.gson.internal.$Gson$Types: java.lang.Class declaringClassOf(java.lang.reflect.TypeVariable)>(r0);

        if $r1 != null goto label1;

        return r0;

     label1:
        $r4 = staticinvoke <com.google.gson.internal.$Gson$Types: java.lang.reflect.Type getGenericSupertype(java.lang.reflect.Type,java.lang.Class,java.lang.Class)>(r2, r3, $r1);

        $z0 = $r4 instanceof java.lang.reflect.ParameterizedType;

        if $z0 == 0 goto label2;

        $r5 = virtualinvoke $r1.<java.lang.Class: java.lang.reflect.TypeVariable[] getTypeParameters()>();

        $i0 = staticinvoke <com.google.gson.internal.$Gson$Types: int indexOf(java.lang.Object[],java.lang.Object)>($r5, r0);

        $r6 = (java.lang.reflect.ParameterizedType) $r4;

        $r7 = interfaceinvoke $r6.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();

        $r8 = $r7[$i0];

        return $r8;

     label2:
        return r0;
    }

    private static int indexOf(java.lang.Object[], java.lang.Object)
    {
        java.lang.Object[] r0;
        int $i0, i1;
        java.lang.Object r2, $r3;
        java.util.NoSuchElementException $r1;
        boolean $z0;

        r0 := @parameter0: java.lang.Object[];

        r2 := @parameter1: java.lang.Object;

        i1 = 0;

     label1:
        $i0 = lengthof r0;

        if i1 >= $i0 goto label3;

        $r3 = r0[i1];

        $z0 = virtualinvoke r2.<java.lang.Object: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label2;

        return i1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        $r1 = new java.util.NoSuchElementException;

        specialinvoke $r1.<java.util.NoSuchElementException: void <init>()>();

        throw $r1;
    }

    private static java.lang.Class declaringClassOf(java.lang.reflect.TypeVariable)
    {
        java.lang.reflect.GenericDeclaration $r1;
        java.lang.reflect.TypeVariable r0;
        java.lang.Class $r2;
        boolean $z0;

        r0 := @parameter0: java.lang.reflect.TypeVariable;

        $r1 = interfaceinvoke r0.<java.lang.reflect.TypeVariable: java.lang.reflect.GenericDeclaration getGenericDeclaration()>();

        $z0 = $r1 instanceof java.lang.Class;

        if $z0 == 0 goto label1;

        $r2 = (java.lang.Class) $r1;

        goto label2;

     label1:
        $r2 = null;

     label2:
        return $r2;
    }

    private static void checkNotPrimitive(java.lang.reflect.Type)
    {
        java.lang.reflect.Type r0;
        java.lang.Class $r1;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: java.lang.reflect.Type;

        $z0 = r0 instanceof java.lang.Class;

        if $z0 == 0 goto label1;

        $r1 = (java.lang.Class) r0;

        $z1 = virtualinvoke $r1.<java.lang.Class: boolean isPrimitive()>();

        if $z1 != 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        staticinvoke <com.google.gson.internal.$Gson$Preconditions: void checkArgument(boolean)>($z2);

        return;
    }

    static void access$000(java.lang.reflect.Type)
    {
        java.lang.reflect.Type r0;

        r0 := @parameter0: java.lang.reflect.Type;

        staticinvoke <com.google.gson.internal.$Gson$Types: void checkNotPrimitive(java.lang.reflect.Type)>(r0);

        return;
    }

    static int access$100(java.lang.Object)
    {
        int $i0;
        java.lang.Object r0;

        r0 := @parameter0: java.lang.Object;

        $i0 = staticinvoke <com.google.gson.internal.$Gson$Types: int hashCodeOrZero(java.lang.Object)>(r0);

        return $i0;
    }

    static void <clinit>()
    {
        java.lang.reflect.Type[] $r0;

        $r0 = newarray (java.lang.reflect.Type)[0];

        <com.google.gson.internal.$Gson$Types: java.lang.reflect.Type[] EMPTY_TYPE_ARRAY> = $r0;

        return;
    }
}
