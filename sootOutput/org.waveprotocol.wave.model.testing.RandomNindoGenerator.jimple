public final class org.waveprotocol.wave.model.testing.RandomNindoGenerator extends java.lang.Object
{
    static final boolean $assertionsDisabled;

    private void <init>()
    {
        org.waveprotocol.wave.model.testing.RandomNindoGenerator r0;

        r0 := @this: org.waveprotocol.wave.model.testing.RandomNindoGenerator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static java.lang.Object randomElement(org.waveprotocol.wave.model.testing.RandomDocOpGenerator$RandomProvider, java.util.List)
    {
        java.util.List r0;
        org.waveprotocol.wave.model.testing.RandomDocOpGenerator$RandomProvider r1;
        int $i0, $i1;
        java.lang.Object $r2;

        r1 := @parameter0: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$RandomProvider;

        r0 := @parameter1: java.util.List;

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        $i1 = interfaceinvoke r1.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$RandomProvider: int nextInt(int)>($i0);

        $r2 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>($i1);

        return $r2;
    }

    private static java.lang.Object randomElement(org.waveprotocol.wave.model.testing.RandomDocOpGenerator$RandomProvider, java.util.Set)
    {
        java.util.Iterator $r2;
        org.waveprotocol.wave.model.testing.RandomDocOpGenerator$RandomProvider r0;
        java.util.Set r1;
        java.lang.AssertionError $r6;
        java.lang.RuntimeException $r7;
        int $i0, i1, $i3;
        java.lang.Object $r5;
        boolean $z0, $z1;

        r0 := @parameter0: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$RandomProvider;

        r1 := @parameter1: java.util.Set;

        $i0 = interfaceinvoke r1.<java.util.Set: int size()>();

        i1 = staticinvoke <org.waveprotocol.wave.model.testing.RandomNindoGenerator: int randomIntFromRange(org.waveprotocol.wave.model.testing.RandomDocOpGenerator$RandomProvider,int,int)>(r0, 0, $i0);

        $r2 = interfaceinvoke r1.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        if i1 != 0 goto label2;

        return $r5;

     label2:
        $i3 = (int) -1;

        i1 = i1 + $i3;

        goto label1;

     label3:
        $z1 = <org.waveprotocol.wave.model.testing.RandomNindoGenerator: boolean $assertionsDisabled>;

        if $z1 != 0 goto label4;

        $r6 = new java.lang.AssertionError;

        specialinvoke $r6.<java.lang.AssertionError: void <init>()>();

        throw $r6;

     label4:
        $r7 = new java.lang.RuntimeException;

        specialinvoke $r7.<java.lang.RuntimeException: void <init>(java.lang.String)>("fell off end of loop");

        throw $r7;
    }

    private static int randomIntFromRange(org.waveprotocol.wave.model.testing.RandomDocOpGenerator$RandomProvider, int, int)
    {
        org.waveprotocol.wave.model.testing.RandomDocOpGenerator$RandomProvider r0;
        java.lang.AssertionError $r1, $r2, $r3, $r4;
        int i0, i1, $i2, $i3, $i4;
        boolean $z0, $z1, $z2, $z3;

        r0 := @parameter0: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$RandomProvider;

        i1 := @parameter1: int;

        i0 := @parameter2: int;

        $z0 = <org.waveprotocol.wave.model.testing.RandomNindoGenerator: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if 0 <= i1 goto label1;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label1:
        $z1 = <org.waveprotocol.wave.model.testing.RandomNindoGenerator: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        if i1 < i0 goto label2;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label2:
        $i2 = i0 - i1;

        $i3 = interfaceinvoke r0.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$RandomProvider: int nextInt(int)>($i2);

        $i4 = $i3 + i1;

        $z2 = <org.waveprotocol.wave.model.testing.RandomNindoGenerator: boolean $assertionsDisabled>;

        if $z2 != 0 goto label3;

        if i1 <= $i4 goto label3;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label3:
        $z3 = <org.waveprotocol.wave.model.testing.RandomNindoGenerator: boolean $assertionsDisabled>;

        if $z3 != 0 goto label4;

        if $i4 < i0 goto label4;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label4:
        return $i4;
    }

    private static java.lang.Object pickRandomNonNullMappedElement(org.waveprotocol.wave.model.testing.RandomDocOpGenerator$RandomProvider, java.util.List, org.waveprotocol.wave.model.testing.RandomNindoGenerator$Mapper)
    {
        org.waveprotocol.wave.model.testing.RandomDocOpGenerator$RandomProvider r2;
        java.util.ArrayList $r0;
        java.util.List r1;
        org.waveprotocol.wave.model.testing.RandomNindoGenerator$Mapper r3;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.Object $r4, $r5, $r6;
        boolean $z0;

        r2 := @parameter0: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$RandomProvider;

        r1 := @parameter1: java.util.List;

        r3 := @parameter2: org.waveprotocol.wave.model.testing.RandomNindoGenerator$Mapper;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>(java.util.Collection)>(r1);

     label1:
        $z0 = interfaceinvoke $r0.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label3;

        $i0 = interfaceinvoke $r0.<java.util.List: int size()>();

        $i1 = staticinvoke <org.waveprotocol.wave.model.testing.RandomNindoGenerator: int randomIntFromRange(org.waveprotocol.wave.model.testing.RandomDocOpGenerator$RandomProvider,int,int)>(r2, 0, $i0);

        $r4 = interfaceinvoke $r0.<java.util.List: java.lang.Object get(int)>($i1);

        $r5 = interfaceinvoke r3.<org.waveprotocol.wave.model.testing.RandomNindoGenerator$Mapper: java.lang.Object map(java.lang.Object)>($r4);

        if $r5 == null goto label2;

        return $r5;

     label2:
        $i2 = interfaceinvoke $r0.<java.util.List: int size()>();

        $i3 = $i2 - 1;

        $r6 = interfaceinvoke $r0.<java.util.List: java.lang.Object get(int)>($i3);

        interfaceinvoke $r0.<java.util.List: java.lang.Object set(int,java.lang.Object)>($i1, $r6);

        $i4 = interfaceinvoke $r0.<java.util.List: int size()>();

        $i5 = $i4 - 1;

        interfaceinvoke $r0.<java.util.List: java.lang.Object remove(int)>($i5);

        goto label1;

     label3:
        return null;
    }

    public static org.waveprotocol.wave.model.document.operation.Nindo generate(org.waveprotocol.wave.model.testing.RandomDocOpGenerator$RandomProvider, org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Parameters, org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema, org.waveprotocol.wave.model.document.indexed.IndexedDocument)
    {
        org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator $r0;
        org.waveprotocol.wave.model.document.indexed.IndexedDocument r4;
        org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Parameters r2;
        org.waveprotocol.wave.model.testing.RandomDocOpGenerator$RandomProvider r1;
        org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema r3;
        java.lang.AssertionError $r7, $r8;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector $r6;
        org.waveprotocol.wave.model.document.operation.Nindo $r5;
        boolean $z0, $z1, $z2, $z3, $z4;

        r1 := @parameter0: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$RandomProvider;

        r2 := @parameter1: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Parameters;

        r3 := @parameter2: org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema;

        r4 := @parameter3: org.waveprotocol.wave.model.document.indexed.IndexedDocument;

        $r0 = new org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator;

        specialinvoke $r0.<org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator: void <init>(org.waveprotocol.wave.model.testing.RandomDocOpGenerator$RandomProvider,org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Parameters,org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema,org.waveprotocol.wave.model.document.indexed.IndexedDocument)>(r1, r2, r3, r4);

        $r5 = virtualinvoke $r0.<org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator: org.waveprotocol.wave.model.document.operation.Nindo generate()>();

        $r6 = staticinvoke <org.waveprotocol.wave.model.document.operation.NindoValidator: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector validate(org.waveprotocol.wave.model.document.indexed.IndexedDocument,org.waveprotocol.wave.model.document.operation.Nindo,org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema)>(r4, $r5, r3);

        $z0 = <org.waveprotocol.wave.model.testing.RandomNindoGenerator: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z4 = virtualinvoke $r6.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector: boolean isIllFormed()>();

        if $z4 == 0 goto label1;

        $r8 = new java.lang.AssertionError;

        specialinvoke $r8.<java.lang.AssertionError: void <init>()>();

        throw $r8;

     label1:
        $z1 = <org.waveprotocol.wave.model.testing.RandomNindoGenerator: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        $z2 = virtualinvoke r2.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Parameters: boolean getValidity()>();

        $z3 = virtualinvoke $r6.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector: boolean isValid()>();

        if $z2 == $z3 goto label2;

        $r7 = new java.lang.AssertionError;

        specialinvoke $r7.<java.lang.AssertionError: void <init>()>();

        throw $r7;

     label2:
        return $r5;
    }

    public static void main(java.lang.String[])
    {
        java.lang.String[] r0;

        r0 := @parameter0: java.lang.String[];

        return;
    }

    static int access$000(org.waveprotocol.wave.model.testing.RandomDocOpGenerator$RandomProvider, int, int)
    {
        org.waveprotocol.wave.model.testing.RandomDocOpGenerator$RandomProvider r0;
        int i0, i1, $i2;

        r0 := @parameter0: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$RandomProvider;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i2 = staticinvoke <org.waveprotocol.wave.model.testing.RandomNindoGenerator: int randomIntFromRange(org.waveprotocol.wave.model.testing.RandomDocOpGenerator$RandomProvider,int,int)>(r0, i0, i1);

        return $i2;
    }

    static java.lang.Object access$100(org.waveprotocol.wave.model.testing.RandomDocOpGenerator$RandomProvider, java.util.List, org.waveprotocol.wave.model.testing.RandomNindoGenerator$Mapper)
    {
        java.util.List r1;
        org.waveprotocol.wave.model.testing.RandomDocOpGenerator$RandomProvider r0;
        org.waveprotocol.wave.model.testing.RandomNindoGenerator$Mapper r2;
        java.lang.Object $r3;

        r0 := @parameter0: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$RandomProvider;

        r1 := @parameter1: java.util.List;

        r2 := @parameter2: org.waveprotocol.wave.model.testing.RandomNindoGenerator$Mapper;

        $r3 = staticinvoke <org.waveprotocol.wave.model.testing.RandomNindoGenerator: java.lang.Object pickRandomNonNullMappedElement(org.waveprotocol.wave.model.testing.RandomDocOpGenerator$RandomProvider,java.util.List,org.waveprotocol.wave.model.testing.RandomNindoGenerator$Mapper)>(r0, r1, r2);

        return $r3;
    }

    static java.lang.Object access$200(org.waveprotocol.wave.model.testing.RandomDocOpGenerator$RandomProvider, java.util.List)
    {
        java.util.List r1;
        java.lang.Object $r2;
        org.waveprotocol.wave.model.testing.RandomDocOpGenerator$RandomProvider r0;

        r0 := @parameter0: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$RandomProvider;

        r1 := @parameter1: java.util.List;

        $r2 = staticinvoke <org.waveprotocol.wave.model.testing.RandomNindoGenerator: java.lang.Object randomElement(org.waveprotocol.wave.model.testing.RandomDocOpGenerator$RandomProvider,java.util.List)>(r0, r1);

        return $r2;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/waveprotocol/wave/model/testing/RandomNindoGenerator;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.waveprotocol.wave.model.testing.RandomNindoGenerator: boolean $assertionsDisabled> = $z1;

        return;
    }
}
