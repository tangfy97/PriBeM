public class com.mongodb.io.ByteBufferInputStream extends java.io.InputStream
{
    final java.util.List _lst;
    private int _pos;

    public void <init>(java.util.List)
    {
        java.util.List r1;
        com.mongodb.io.ByteBufferInputStream r0;

        r0 := @this: com.mongodb.io.ByteBufferInputStream;

        r1 := @parameter0: java.util.List;

        specialinvoke r0.<com.mongodb.io.ByteBufferInputStream: void <init>(java.util.List,boolean)>(r1, 0);

        return;
    }

    public void <init>(java.util.List, boolean)
    {
        java.util.Iterator $r3;
        java.nio.ByteBuffer r5;
        com.mongodb.io.ByteBufferInputStream r0;
        java.util.List r1, $r2;
        java.lang.Object $r4;
        boolean z0, $z1;

        r0 := @this: com.mongodb.io.ByteBufferInputStream;

        r1 := @parameter0: java.util.List;

        z0 := @parameter1: boolean;

        specialinvoke r0.<java.io.InputStream: void <init>()>();

        r0.<com.mongodb.io.ByteBufferInputStream: int _pos> = 0;

        r0.<com.mongodb.io.ByteBufferInputStream: java.util.List _lst> = r1;

        if z0 == 0 goto label2;

        $r2 = r0.<com.mongodb.io.ByteBufferInputStream: java.util.List _lst>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.nio.ByteBuffer) $r4;

        virtualinvoke r5.<java.nio.ByteBuffer: java.nio.Buffer flip()>();

        goto label1;

     label2:
        return;
    }

    public int available()
    {
        java.nio.ByteBuffer $r4;
        com.mongodb.io.ByteBufferInputStream r0;
        java.util.List $r1, $r2;
        int $i0, $i1, i2, i3;
        java.lang.Object $r3;

        r0 := @this: com.mongodb.io.ByteBufferInputStream;

        i2 = 0;

        i3 = r0.<com.mongodb.io.ByteBufferInputStream: int _pos>;

     label1:
        $r1 = r0.<com.mongodb.io.ByteBufferInputStream: java.util.List _lst>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        if i3 >= $i0 goto label2;

        $r2 = r0.<com.mongodb.io.ByteBufferInputStream: java.util.List _lst>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(i3);

        $r4 = (java.nio.ByteBuffer) $r3;

        $i1 = virtualinvoke $r4.<java.nio.ByteBuffer: int remaining()>();

        i2 = i2 + $i1;

        i3 = i3 + 1;

        goto label1;

     label2:
        return i2;
    }

    public void close()
    {
        com.mongodb.io.ByteBufferInputStream r0;

        r0 := @this: com.mongodb.io.ByteBufferInputStream;

        return;
    }

    public void mark(int)
    {
        int i0;
        java.lang.RuntimeException $r0;
        com.mongodb.io.ByteBufferInputStream r1;

        r1 := @this: com.mongodb.io.ByteBufferInputStream;

        i0 := @parameter0: int;

        $r0 = new java.lang.RuntimeException;

        specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("mark not supported");

        throw $r0;
    }

    public void reset()
    {
        java.lang.RuntimeException $r0;
        com.mongodb.io.ByteBufferInputStream r1;

        r1 := @this: com.mongodb.io.ByteBufferInputStream;

        $r0 = new java.lang.RuntimeException;

        specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("mark not supported");

        throw $r0;
    }

    public boolean markSupported()
    {
        com.mongodb.io.ByteBufferInputStream r0;

        r0 := @this: com.mongodb.io.ByteBufferInputStream;

        return 0;
    }

    public int read()
    {
        java.nio.ByteBuffer r4;
        com.mongodb.io.ByteBufferInputStream r0;
        short $s8, $s11;
        byte $b7;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i10, $i12;
        java.util.List $r1, $r2;
        java.lang.Object $r3;

        r0 := @this: com.mongodb.io.ByteBufferInputStream;

        $i0 = r0.<com.mongodb.io.ByteBufferInputStream: int _pos>;

        $r1 = r0.<com.mongodb.io.ByteBufferInputStream: java.util.List _lst>;

        $i1 = interfaceinvoke $r1.<java.util.List: int size()>();

        if $i0 < $i1 goto label1;

        $i10 = (int) -1;

        return $i10;

     label1:
        $r2 = r0.<com.mongodb.io.ByteBufferInputStream: java.util.List _lst>;

        $i2 = r0.<com.mongodb.io.ByteBufferInputStream: int _pos>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>($i2);

        r4 = (java.nio.ByteBuffer) $r3;

        $i3 = virtualinvoke r4.<java.nio.ByteBuffer: int remaining()>();

        if $i3 <= 0 goto label2;

        $b7 = virtualinvoke r4.<java.nio.ByteBuffer: byte get()>();

        $s11 = (short) $b7;

        $s8 = $s11 & 255;

        $i12 = (int) $s8;

        return $i12;

     label2:
        $i4 = r0.<com.mongodb.io.ByteBufferInputStream: int _pos>;

        $i5 = $i4 + 1;

        r0.<com.mongodb.io.ByteBufferInputStream: int _pos> = $i5;

        $i6 = virtualinvoke r0.<com.mongodb.io.ByteBufferInputStream: int read()>();

        return $i6;
    }

    public int read(byte[])
    {
        byte[] r1;
        int $i0, $i1;
        com.mongodb.io.ByteBufferInputStream r0;

        r0 := @this: com.mongodb.io.ByteBufferInputStream;

        r1 := @parameter0: byte[];

        $i0 = lengthof r1;

        $i1 = virtualinvoke r0.<com.mongodb.io.ByteBufferInputStream: int read(byte[],int,int)>(r1, 0, $i0);

        return $i1;
    }

    public int read(byte[], int, int)
    {
        byte[] r5;
        java.nio.ByteBuffer r4;
        com.mongodb.io.ByteBufferInputStream r0;
        int $i0, $i1, $i2, $i3, i4, $i5, $i6, i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i21;
        java.util.List $r1, $r2, $r6;
        java.lang.Object $r3;

        r0 := @this: com.mongodb.io.ByteBufferInputStream;

        r5 := @parameter0: byte[];

        i7 := @parameter1: int;

        i4 := @parameter2: int;

        $i0 = r0.<com.mongodb.io.ByteBufferInputStream: int _pos>;

        $r1 = r0.<com.mongodb.io.ByteBufferInputStream: java.util.List _lst>;

        $i1 = interfaceinvoke $r1.<java.util.List: int size()>();

        if $i0 < $i1 goto label1;

        $i21 = (int) -1;

        return $i21;

     label1:
        $r2 = r0.<com.mongodb.io.ByteBufferInputStream: java.util.List _lst>;

        $i2 = r0.<com.mongodb.io.ByteBufferInputStream: int _pos>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>($i2);

        r4 = (java.nio.ByteBuffer) $r3;

        $i3 = virtualinvoke r4.<java.nio.ByteBuffer: int remaining()>();

        if $i3 != 0 goto label2;

        $i17 = r0.<com.mongodb.io.ByteBufferInputStream: int _pos>;

        $i18 = $i17 + 1;

        r0.<com.mongodb.io.ByteBufferInputStream: int _pos> = $i18;

        $i19 = virtualinvoke r0.<com.mongodb.io.ByteBufferInputStream: int read(byte[],int,int)>(r5, i7, i4);

        return $i19;

     label2:
        $i5 = virtualinvoke r4.<java.nio.ByteBuffer: int remaining()>();

        $i6 = staticinvoke <java.lang.Math: int min(int,int)>(i4, $i5);

        virtualinvoke r4.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[],int,int)>(r5, i7, $i6);

        if $i6 == i4 goto label3;

        $i8 = r0.<com.mongodb.io.ByteBufferInputStream: int _pos>;

        $i9 = $i8 + 1;

        $r6 = r0.<com.mongodb.io.ByteBufferInputStream: java.util.List _lst>;

        $i10 = interfaceinvoke $r6.<java.util.List: int size()>();

        if $i9 < $i10 goto label4;

     label3:
        return $i6;

     label4:
        $i11 = r0.<com.mongodb.io.ByteBufferInputStream: int _pos>;

        $i12 = $i11 + 1;

        r0.<com.mongodb.io.ByteBufferInputStream: int _pos> = $i12;

        $i14 = i7 + $i6;

        $i13 = i4 - $i6;

        $i15 = virtualinvoke r0.<com.mongodb.io.ByteBufferInputStream: int read(byte[],int,int)>(r5, $i14, $i13);

        $i16 = $i6 + $i15;

        return $i16;
    }

    public long skip(long)
    {
        long $l5, $l8, $l9, $l12, $l14, l18, l19, l20;
        java.nio.ByteBuffer r4;
        com.mongodb.io.ByteBufferInputStream r0;
        byte $b0, $b6;
        int $i1, $i2, $i3, $i4, $i7, $i10, $i11, $i13, $i15, $i16, $i17, $i21, $i22;
        java.util.List $r1, $r2;
        java.lang.Object $r3;

        r0 := @this: com.mongodb.io.ByteBufferInputStream;

        l18 := @parameter0: long;

        l19 = 0L;

     label1:
        $b0 = l18 cmp 0L;

        $i21 = (int) $b0;

        if $i21 < 0 goto label3;

        $i1 = r0.<com.mongodb.io.ByteBufferInputStream: int _pos>;

        $r1 = r0.<com.mongodb.io.ByteBufferInputStream: java.util.List _lst>;

        $i2 = interfaceinvoke $r1.<java.util.List: int size()>();

        if $i1 >= $i2 goto label3;

        $r2 = r0.<com.mongodb.io.ByteBufferInputStream: java.util.List _lst>;

        $i3 = r0.<com.mongodb.io.ByteBufferInputStream: int _pos>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>($i3);

        r4 = (java.nio.ByteBuffer) $r3;

        $i4 = virtualinvoke r4.<java.nio.ByteBuffer: int remaining()>();

        $l5 = (long) $i4;

        $b6 = $l5 cmp l18;

        $i22 = (int) $b6;

        if $i22 >= 0 goto label2;

        $i11 = virtualinvoke r4.<java.nio.ByteBuffer: int remaining()>();

        $l12 = (long) $i11;

        l19 = l19 + $l12;

        $i13 = virtualinvoke r4.<java.nio.ByteBuffer: int remaining()>();

        $l14 = (long) $i13;

        l18 = l18 - $l14;

        $i15 = virtualinvoke r4.<java.nio.ByteBuffer: int limit()>();

        virtualinvoke r4.<java.nio.ByteBuffer: java.nio.Buffer position(int)>($i15);

        $i16 = r0.<com.mongodb.io.ByteBufferInputStream: int _pos>;

        $i17 = $i16 + 1;

        r0.<com.mongodb.io.ByteBufferInputStream: int _pos> = $i17;

        goto label1;

     label2:
        l20 = l19 + l18;

        $i7 = virtualinvoke r4.<java.nio.ByteBuffer: int position()>();

        $l8 = (long) $i7;

        $l9 = $l8 + l18;

        $i10 = (int) $l9;

        virtualinvoke r4.<java.nio.ByteBuffer: java.nio.Buffer position(int)>($i10);

        return l20;

     label3:
        return l19;
    }
}
