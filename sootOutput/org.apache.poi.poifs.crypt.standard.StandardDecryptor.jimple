public class org.apache.poi.poifs.crypt.standard.StandardDecryptor extends org.apache.poi.poifs.crypt.Decryptor
{
    private long _length;
    static final boolean $assertionsDisabled;

    protected void <init>(org.apache.poi.poifs.crypt.EncryptionInfo)
    {
        org.apache.poi.poifs.crypt.standard.StandardDecryptor r0;
        org.apache.poi.poifs.crypt.EncryptionInfo r1;

        r0 := @this: org.apache.poi.poifs.crypt.standard.StandardDecryptor;

        r1 := @parameter0: org.apache.poi.poifs.crypt.EncryptionInfo;

        specialinvoke r0.<org.apache.poi.poifs.crypt.Decryptor: void <init>(org.apache.poi.poifs.crypt.EncryptionInfo)>(r1);

        r0.<org.apache.poi.poifs.crypt.standard.StandardDecryptor: long _length> = -1L;

        return;
    }

    public boolean verifyPassword(java.lang.String)
    {
        byte[] $r6, $r7, $r10, $r11, $r12, $r13;
        java.security.MessageDigest $r9;
        org.apache.poi.poifs.crypt.standard.StandardDecryptor r0;
        javax.crypto.Cipher $r5;
        java.security.GeneralSecurityException $r14;
        org.apache.poi.poifs.crypt.EncryptionVerifier $r2;
        int $i0, $i1;
        java.lang.String r3;
        org.apache.poi.poifs.crypt.EncryptionInfo $r1;
        boolean $z0;
        org.apache.poi.poifs.crypt.HashAlgorithm $r8;
        org.apache.poi.EncryptedDocumentException $r15;
        javax.crypto.SecretKey $r4;

        r0 := @this: org.apache.poi.poifs.crypt.standard.StandardDecryptor;

        r3 := @parameter0: java.lang.String;

        $r1 = r0.<org.apache.poi.poifs.crypt.standard.StandardDecryptor: org.apache.poi.poifs.crypt.EncryptionInfo info>;

        $r2 = virtualinvoke $r1.<org.apache.poi.poifs.crypt.EncryptionInfo: org.apache.poi.poifs.crypt.EncryptionVerifier getVerifier()>();

        $i0 = virtualinvoke r0.<org.apache.poi.poifs.crypt.standard.StandardDecryptor: int getKeySizeInBytes()>();

        $r4 = staticinvoke <org.apache.poi.poifs.crypt.standard.StandardDecryptor: javax.crypto.SecretKey generateSecretKey(java.lang.String,org.apache.poi.poifs.crypt.EncryptionVerifier,int)>(r3, $r2, $i0);

        $r5 = specialinvoke r0.<org.apache.poi.poifs.crypt.standard.StandardDecryptor: javax.crypto.Cipher getCipher(javax.crypto.SecretKey)>($r4);

     label1:
        $r6 = virtualinvoke $r2.<org.apache.poi.poifs.crypt.EncryptionVerifier: byte[] getEncryptedVerifier()>();

        $r7 = virtualinvoke $r5.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r6);

        virtualinvoke r0.<org.apache.poi.poifs.crypt.standard.StandardDecryptor: void setVerifier(byte[])>($r7);

        $r8 = virtualinvoke $r2.<org.apache.poi.poifs.crypt.EncryptionVerifier: org.apache.poi.poifs.crypt.HashAlgorithm getHashAlgorithm()>();

        $r9 = staticinvoke <org.apache.poi.poifs.crypt.CryptoFunctions: java.security.MessageDigest getMessageDigest(org.apache.poi.poifs.crypt.HashAlgorithm)>($r8);

        $r10 = virtualinvoke $r9.<java.security.MessageDigest: byte[] digest(byte[])>($r7);

        $r11 = virtualinvoke $r2.<org.apache.poi.poifs.crypt.EncryptionVerifier: byte[] getEncryptedVerifierHash()>();

        $r12 = virtualinvoke $r5.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r11);

        $i1 = lengthof $r10;

        $r13 = staticinvoke <org.apache.poi.poifs.crypt.standard.StandardDecryptor: byte[] truncateOrPad(byte[],int)>($r12, $i1);

        $z0 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>($r10, $r13);

        if $z0 == 0 goto label3;

        virtualinvoke r0.<org.apache.poi.poifs.crypt.standard.StandardDecryptor: void setSecretKey(javax.crypto.SecretKey)>($r4);

     label2:
        return 1;

     label3:
        return 0;

     label4:
        $r14 := @caughtexception;

        $r15 = new org.apache.poi.EncryptedDocumentException;

        specialinvoke $r15.<org.apache.poi.EncryptedDocumentException: void <init>(java.lang.Throwable)>($r14);

        throw $r15;

        catch java.security.GeneralSecurityException from label1 to label2 with label4;
    }

    protected static javax.crypto.SecretKey generateSecretKey(java.lang.String, org.apache.poi.poifs.crypt.EncryptionVerifier, int)
    {
        byte[] $r3, $r4, r5, $r6, $r7, $r8, r9, $r10;
        javax.crypto.spec.SecretKeySpec $r11;
        org.apache.poi.poifs.crypt.EncryptionVerifier r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8;
        java.lang.String r2, $r13;
        org.apache.poi.poifs.crypt.HashAlgorithm $r1;
        org.apache.poi.poifs.crypt.CipherAlgorithm $r12;

        r2 := @parameter0: java.lang.String;

        r0 := @parameter1: org.apache.poi.poifs.crypt.EncryptionVerifier;

        i8 := @parameter2: int;

        $r1 = virtualinvoke r0.<org.apache.poi.poifs.crypt.EncryptionVerifier: org.apache.poi.poifs.crypt.HashAlgorithm getHashAlgorithm()>();

        $r3 = virtualinvoke r0.<org.apache.poi.poifs.crypt.EncryptionVerifier: byte[] getSalt()>();

        $i0 = virtualinvoke r0.<org.apache.poi.poifs.crypt.EncryptionVerifier: int getSpinCount()>();

        $r4 = staticinvoke <org.apache.poi.poifs.crypt.CryptoFunctions: byte[] hashPassword(java.lang.String,org.apache.poi.poifs.crypt.HashAlgorithm,byte[],int)>(r2, $r1, $r3, $i0);

        r5 = newarray (byte)[4];

        staticinvoke <org.apache.poi.util.LittleEndian: void putInt(byte[],int,int)>(r5, 0, 0);

        $i1 = $r1.<org.apache.poi.poifs.crypt.HashAlgorithm: int hashSize>;

        $r6 = staticinvoke <org.apache.poi.poifs.crypt.CryptoFunctions: byte[] generateKey(byte[],org.apache.poi.poifs.crypt.HashAlgorithm,byte[],int)>($r4, $r1, r5, $i1);

        $r7 = staticinvoke <org.apache.poi.poifs.crypt.standard.StandardDecryptor: byte[] fillAndXor(byte[],byte)>($r6, 54);

        $r8 = staticinvoke <org.apache.poi.poifs.crypt.standard.StandardDecryptor: byte[] fillAndXor(byte[],byte)>($r6, 92);

        $i3 = lengthof $r7;

        $i2 = lengthof $r8;

        $i4 = $i3 + $i2;

        r9 = newarray (byte)[$i4];

        $i5 = lengthof $r7;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r7, 0, r9, 0, $i5);

        $i7 = lengthof $r7;

        $i6 = lengthof $r8;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r8, 0, r9, $i7, $i6);

        $r10 = staticinvoke <org.apache.poi.poifs.crypt.standard.StandardDecryptor: byte[] truncateOrPad(byte[],int)>(r9, i8);

        $r11 = new javax.crypto.spec.SecretKeySpec;

        $r12 = virtualinvoke r0.<org.apache.poi.poifs.crypt.EncryptionVerifier: org.apache.poi.poifs.crypt.CipherAlgorithm getCipherAlgorithm()>();

        $r13 = $r12.<org.apache.poi.poifs.crypt.CipherAlgorithm: java.lang.String jceId>;

        specialinvoke $r11.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r10, $r13);

        return $r11;
    }

    protected static byte[] fillAndXor(byte[], byte)
    {
        byte[] r0, r1, $r4;
        java.security.MessageDigest $r3;
        org.apache.poi.poifs.crypt.HashAlgorithm $r2;
        byte b0, $b2, $b3, $b4, $b5;
        int $i1, i6;

        r1 := @parameter0: byte[];

        b0 := @parameter1: byte;

        r0 = newarray (byte)[64];

        staticinvoke <java.util.Arrays: void fill(byte[],byte)>(r0, b0);

        i6 = 0;

     label1:
        $i1 = lengthof r1;

        if i6 >= $i1 goto label2;

        $b3 = r0[i6];

        $b2 = r1[i6];

        $b4 = $b3 ^ $b2;

        $b5 = (byte) $b4;

        r0[i6] = $b5;

        i6 = i6 + 1;

        goto label1;

     label2:
        $r2 = <org.apache.poi.poifs.crypt.HashAlgorithm: org.apache.poi.poifs.crypt.HashAlgorithm sha1>;

        $r3 = staticinvoke <org.apache.poi.poifs.crypt.CryptoFunctions: java.security.MessageDigest getMessageDigest(org.apache.poi.poifs.crypt.HashAlgorithm)>($r2);

        $r4 = virtualinvoke $r3.<java.security.MessageDigest: byte[] digest(byte[])>(r0);

        return $r4;
    }

    protected static byte[] truncateOrPad(byte[], int)
    {
        byte[] r0, r1;
        int i0, $i1, $i2, $i3, i4;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        r0 = newarray (byte)[i0];

        $i1 = lengthof r1;

        $i2 = staticinvoke <java.lang.Math: int min(int,int)>(i0, $i1);

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, r0, 0, $i2);

        $i3 = lengthof r1;

        if i0 <= $i3 goto label2;

        i4 = lengthof r1;

     label1:
        if i4 >= i0 goto label2;

        r0[i4] = 0;

        i4 = i4 + 1;

        goto label1;

     label2:
        return r0;
    }

    private javax.crypto.Cipher getCipher(javax.crypto.SecretKey)
    {
        org.apache.poi.poifs.crypt.ChainingMode $r3, $r7;
        java.lang.AssertionError $r8;
        org.apache.poi.poifs.crypt.standard.StandardDecryptor r0;
        javax.crypto.Cipher $r6;
        org.apache.poi.poifs.crypt.EncryptionHeader $r2;
        javax.crypto.SecretKey r4;
        org.apache.poi.poifs.crypt.CipherAlgorithm $r5;
        org.apache.poi.poifs.crypt.EncryptionInfo $r1;
        boolean $z0;

        r0 := @this: org.apache.poi.poifs.crypt.standard.StandardDecryptor;

        r4 := @parameter0: javax.crypto.SecretKey;

        $r1 = r0.<org.apache.poi.poifs.crypt.standard.StandardDecryptor: org.apache.poi.poifs.crypt.EncryptionInfo info>;

        $r2 = virtualinvoke $r1.<org.apache.poi.poifs.crypt.EncryptionInfo: org.apache.poi.poifs.crypt.EncryptionHeader getHeader()>();

        $r3 = virtualinvoke $r2.<org.apache.poi.poifs.crypt.EncryptionHeader: org.apache.poi.poifs.crypt.ChainingMode getChainingMode()>();

        $z0 = <org.apache.poi.poifs.crypt.standard.StandardDecryptor: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r7 = <org.apache.poi.poifs.crypt.ChainingMode: org.apache.poi.poifs.crypt.ChainingMode ecb>;

        if $r3 == $r7 goto label1;

        $r8 = new java.lang.AssertionError;

        specialinvoke $r8.<java.lang.AssertionError: void <init>()>();

        throw $r8;

     label1:
        $r5 = virtualinvoke $r2.<org.apache.poi.poifs.crypt.EncryptionHeader: org.apache.poi.poifs.crypt.CipherAlgorithm getCipherAlgorithm()>();

        $r6 = staticinvoke <org.apache.poi.poifs.crypt.CryptoFunctions: javax.crypto.Cipher getCipher(javax.crypto.SecretKey,org.apache.poi.poifs.crypt.CipherAlgorithm,org.apache.poi.poifs.crypt.ChainingMode,byte[],int)>(r4, $r5, $r3, null, 2);

        return $r6;
    }

    public java.io.InputStream getDataStream(org.apache.poi.poifs.filesystem.DirectoryNode) throws java.io.IOException
    {
        long $l0, $l1;
        org.apache.poi.poifs.crypt.standard.StandardDecryptor r2;
        javax.crypto.Cipher $r6;
        org.apache.poi.poifs.filesystem.DirectoryNode r0;
        javax.crypto.CipherInputStream $r4;
        org.apache.poi.util.BoundedInputStream $r3;
        javax.crypto.SecretKey $r5;
        org.apache.poi.poifs.filesystem.DocumentInputStream $r1;

        r2 := @this: org.apache.poi.poifs.crypt.standard.StandardDecryptor;

        r0 := @parameter0: org.apache.poi.poifs.filesystem.DirectoryNode;

        $r1 = virtualinvoke r0.<org.apache.poi.poifs.filesystem.DirectoryNode: org.apache.poi.poifs.filesystem.DocumentInputStream createDocumentInputStream(java.lang.String)>("EncryptedPackage");

        $l0 = virtualinvoke $r1.<org.apache.poi.poifs.filesystem.DocumentInputStream: long readLong()>();

        r2.<org.apache.poi.poifs.crypt.standard.StandardDecryptor: long _length> = $l0;

        $r3 = new org.apache.poi.util.BoundedInputStream;

        $r4 = new javax.crypto.CipherInputStream;

        $r5 = virtualinvoke r2.<org.apache.poi.poifs.crypt.standard.StandardDecryptor: javax.crypto.SecretKey getSecretKey()>();

        $r6 = specialinvoke r2.<org.apache.poi.poifs.crypt.standard.StandardDecryptor: javax.crypto.Cipher getCipher(javax.crypto.SecretKey)>($r5);

        specialinvoke $r4.<javax.crypto.CipherInputStream: void <init>(java.io.InputStream,javax.crypto.Cipher)>($r1, $r6);

        $l1 = r2.<org.apache.poi.poifs.crypt.standard.StandardDecryptor: long _length>;

        specialinvoke $r3.<org.apache.poi.util.BoundedInputStream: void <init>(java.io.InputStream,long)>($r4, $l1);

        return $r3;
    }

    public long getLength()
    {
        java.lang.IllegalStateException $r1;
        byte $b1;
        long $l0, $l2;
        org.apache.poi.poifs.crypt.standard.StandardDecryptor r0;

        r0 := @this: org.apache.poi.poifs.crypt.standard.StandardDecryptor;

        $l0 = r0.<org.apache.poi.poifs.crypt.standard.StandardDecryptor: long _length>;

        $b1 = $l0 cmp -1L;

        if $b1 != 0 goto label1;

        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Decryptor.getDataStream() was not called");

        throw $r1;

     label1:
        $l2 = r0.<org.apache.poi.poifs.crypt.standard.StandardDecryptor: long _length>;

        return $l2;
    }

    protected int getKeySizeInBytes()
    {
        org.apache.poi.poifs.crypt.EncryptionHeader $r2;
        int $i0, $i1;
        org.apache.poi.poifs.crypt.standard.StandardDecryptor r0;
        org.apache.poi.poifs.crypt.EncryptionInfo $r1;

        r0 := @this: org.apache.poi.poifs.crypt.standard.StandardDecryptor;

        $r1 = r0.<org.apache.poi.poifs.crypt.standard.StandardDecryptor: org.apache.poi.poifs.crypt.EncryptionInfo info>;

        $r2 = virtualinvoke $r1.<org.apache.poi.poifs.crypt.EncryptionInfo: org.apache.poi.poifs.crypt.EncryptionHeader getHeader()>();

        $i0 = virtualinvoke $r2.<org.apache.poi.poifs.crypt.EncryptionHeader: int getKeySize()>();

        $i1 = $i0 / 8;

        return $i1;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/apache/poi/poifs/crypt/standard/StandardDecryptor;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.poi.poifs.crypt.standard.StandardDecryptor: boolean $assertionsDisabled> = $z1;

        return;
    }
}
