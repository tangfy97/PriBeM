public class org.jdesktop.swingx.calendar.CalendarUtils extends java.lang.Object
{
    public static final int ONE_MINUTE;
    public static final int ONE_HOUR;
    public static final int THREE_HOURS;
    public static final int ONE_DAY;
    public static final int DECADE;
    public static final int YEAR_IN_DECADE;

    public void <init>()
    {
        org.jdesktop.swingx.calendar.CalendarUtils r0;

        r0 := @this: org.jdesktop.swingx.calendar.CalendarUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void add(java.util.Calendar, int, int)
    {
        java.lang.IllegalArgumentException $r1;
        java.util.Calendar r0;
        int i0, i1, $i2;
        java.lang.StringBuilder $r2, $r3, $r4;
        java.lang.String $r5;
        boolean $z0;

        r0 := @parameter0: java.util.Calendar;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $z0 = staticinvoke <org.jdesktop.swingx.calendar.CalendarUtils: boolean isNativeField(int)>(i0);

        if $z0 == 0 goto label1;

        virtualinvoke r0.<java.util.Calendar: void add(int,int)>(i0, i1);

        goto label4;

     label1:
        lookupswitch(i0)
        {
            case 5467: goto label2;
            default: goto label3;
        };

     label2:
        $i2 = i1 * 10;

        virtualinvoke r0.<java.util.Calendar: void add(int,int)>(1, $i2);

        goto label4;

     label3:
        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unsupported field: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r1;

     label4:
        return;
    }

    public static int get(java.util.Calendar, int)
    {
        java.lang.IllegalArgumentException $r1;
        java.util.Calendar r0;
        int i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.StringBuilder $r2, $r3, $r4;
        java.lang.String $r5;
        boolean $z0;

        r0 := @parameter0: java.util.Calendar;

        i0 := @parameter1: int;

        $z0 = staticinvoke <org.jdesktop.swingx.calendar.CalendarUtils: boolean isNativeField(int)>(i0);

        if $z0 == 0 goto label1;

        $i5 = virtualinvoke r0.<java.util.Calendar: int get(int)>(i0);

        return $i5;

     label1:
        lookupswitch(i0)
        {
            case 5467: goto label2;
            case 5468: goto label3;
            default: goto label4;
        };

     label2:
        $i3 = virtualinvoke r0.<java.util.Calendar: int get(int)>(1);

        $i4 = staticinvoke <org.jdesktop.swingx.calendar.CalendarUtils: int decade(int)>($i3);

        return $i4;

     label3:
        $i1 = virtualinvoke r0.<java.util.Calendar: int get(int)>(1);

        $i2 = $i1 % 10;

        return $i2;

     label4:
        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unsupported field: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r1;
    }

    public static void set(java.util.Calendar, int, int)
    {
        java.util.Calendar r0;
        int i0, $i1, i2, $i3, $i4, $i5, $i6;
        java.lang.String $r5, $r10, $r15;
        boolean $z0;
        java.lang.IllegalArgumentException $r1, $r6, $r11;
        java.lang.StringBuilder $r2, $r3, $r4, $r7, $r8, $r9, $r12, $r13, $r14;

        r0 := @parameter0: java.util.Calendar;

        i0 := @parameter1: int;

        i2 := @parameter2: int;

        $z0 = staticinvoke <org.jdesktop.swingx.calendar.CalendarUtils: boolean isNativeField(int)>(i0);

        if $z0 == 0 goto label1;

        virtualinvoke r0.<java.util.Calendar: void set(int,int)>(i0, i2);

        goto label7;

     label1:
        lookupswitch(i0)
        {
            case 5467: goto label2;
            case 5468: goto label5;
            default: goto label6;
        };

     label2:
        if i2 > 0 goto label3;

        $r6 = new java.lang.IllegalArgumentException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("value must be a positive but was: ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r6;

     label3:
        $i4 = i2 % 10;

        if $i4 == 0 goto label4;

        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("value must be a multiple of 10 but was: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r1;

     label4:
        $i5 = staticinvoke <org.jdesktop.swingx.calendar.CalendarUtils: int get(java.util.Calendar,int)>(r0, 5468);

        $i6 = i2 + $i5;

        virtualinvoke r0.<java.util.Calendar: void set(int,int)>(1, $i6);

        goto label7;

     label5:
        $i1 = staticinvoke <org.jdesktop.swingx.calendar.CalendarUtils: int get(java.util.Calendar,int)>(r0, 5467);

        $i3 = i2 + $i1;

        virtualinvoke r0.<java.util.Calendar: void set(int,int)>(1, $i3);

        goto label7;

     label6:
        $r11 = new java.lang.IllegalArgumentException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unsupported field: ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r15);

        throw $r11;

     label7:
        return;
    }

    private static boolean isNativeField(int)
    {
        int i0;
        boolean $z0;

        i0 := @parameter0: int;

        if i0 >= 5467 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static java.util.Date getEndOfDST(java.util.Calendar)
    {
        java.util.TimeZone $r1, $r2;
        java.util.Date $r3, $r4;
        long $l0;
        java.util.Calendar r0;
        int i1, $i3;
        boolean $z0, $z1;

        r0 := @parameter0: java.util.Calendar;

        $r1 = virtualinvoke r0.<java.util.Calendar: java.util.TimeZone getTimeZone()>();

        $z0 = virtualinvoke $r1.<java.util.TimeZone: boolean useDaylightTime()>();

        if $z0 != 0 goto label1;

        return null;

     label1:
        $l0 = virtualinvoke r0.<java.util.Calendar: long getTimeInMillis()>();

        virtualinvoke r0.<java.util.Calendar: void set(int,int)>(2, 11);

        staticinvoke <org.jdesktop.swingx.calendar.CalendarUtils: void endOfMonth(java.util.Calendar)>(r0);

        staticinvoke <org.jdesktop.swingx.calendar.CalendarUtils: void startOfDay(java.util.Calendar)>(r0);

        i1 = 0;

     label2:
        if i1 >= 366 goto label4;

        $i3 = (int) -1;

        virtualinvoke r0.<java.util.Calendar: void add(int,int)>(5, $i3);

        $r2 = virtualinvoke r0.<java.util.Calendar: java.util.TimeZone getTimeZone()>();

        $r3 = virtualinvoke r0.<java.util.Calendar: java.util.Date getTime()>();

        $z1 = virtualinvoke $r2.<java.util.TimeZone: boolean inDaylightTime(java.util.Date)>($r3);

        if $z1 == 0 goto label3;

        staticinvoke <org.jdesktop.swingx.calendar.CalendarUtils: void endOfDay(java.util.Calendar)>(r0);

        $r4 = virtualinvoke r0.<java.util.Calendar: java.util.Date getTime()>();

        return $r4;

     label3:
        i1 = i1 + 1;

        goto label2;

     label4:
        virtualinvoke r0.<java.util.Calendar: void setTimeInMillis(long)>($l0);

        return null;
    }

    public static java.util.Date getStartOfDST(java.util.Calendar)
    {
        java.util.TimeZone $r1, $r2;
        java.util.Date $r3, $r4;
        long $l0;
        java.util.Calendar r0;
        int i1;
        boolean $z0, $z1;

        r0 := @parameter0: java.util.Calendar;

        $r1 = virtualinvoke r0.<java.util.Calendar: java.util.TimeZone getTimeZone()>();

        $z0 = virtualinvoke $r1.<java.util.TimeZone: boolean useDaylightTime()>();

        if $z0 != 0 goto label1;

        return null;

     label1:
        $l0 = virtualinvoke r0.<java.util.Calendar: long getTimeInMillis()>();

        virtualinvoke r0.<java.util.Calendar: void set(int,int)>(2, 0);

        staticinvoke <org.jdesktop.swingx.calendar.CalendarUtils: void startOfMonth(java.util.Calendar)>(r0);

        staticinvoke <org.jdesktop.swingx.calendar.CalendarUtils: void endOfDay(java.util.Calendar)>(r0);

        i1 = 0;

     label2:
        if i1 >= 366 goto label4;

        virtualinvoke r0.<java.util.Calendar: void add(int,int)>(5, 1);

        $r2 = virtualinvoke r0.<java.util.Calendar: java.util.TimeZone getTimeZone()>();

        $r3 = virtualinvoke r0.<java.util.Calendar: java.util.Date getTime()>();

        $z1 = virtualinvoke $r2.<java.util.TimeZone: boolean inDaylightTime(java.util.Date)>($r3);

        if $z1 == 0 goto label3;

        staticinvoke <org.jdesktop.swingx.calendar.CalendarUtils: void endOfDay(java.util.Calendar)>(r0);

        $r4 = virtualinvoke r0.<java.util.Calendar: java.util.Date getTime()>();

        return $r4;

     label3:
        i1 = i1 + 1;

        goto label2;

     label4:
        virtualinvoke r0.<java.util.Calendar: void setTimeInMillis(long)>($l0);

        return null;
    }

    public static boolean isStartOfDay(java.util.Calendar)
    {
        java.util.Calendar r0, r2;
        int $i0, $i1, $i3;
        java.lang.Object $r1;
        boolean $z0;

        r0 := @parameter0: java.util.Calendar;

        $r1 = virtualinvoke r0.<java.util.Calendar: java.lang.Object clone()>();

        r2 = (java.util.Calendar) $r1;

        $i3 = (int) -1;

        virtualinvoke r2.<java.util.Calendar: void add(int,int)>(14, $i3);

        $i0 = virtualinvoke r2.<java.util.Calendar: int get(int)>(5);

        $i1 = virtualinvoke r0.<java.util.Calendar: int get(int)>(5);

        if $i0 == $i1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static boolean isEndOfDay(java.util.Calendar)
    {
        java.util.Calendar r0, r2;
        int $i0, $i1;
        java.lang.Object $r1;
        boolean $z0;

        r0 := @parameter0: java.util.Calendar;

        $r1 = virtualinvoke r0.<java.util.Calendar: java.lang.Object clone()>();

        r2 = (java.util.Calendar) $r1;

        virtualinvoke r2.<java.util.Calendar: void add(int,int)>(14, 1);

        $i0 = virtualinvoke r2.<java.util.Calendar: int get(int)>(5);

        $i1 = virtualinvoke r0.<java.util.Calendar: int get(int)>(5);

        if $i0 == $i1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static boolean isStartOfMonth(java.util.Calendar)
    {
        java.util.Calendar r0, r2;
        int $i0, $i1, $i3;
        java.lang.Object $r1;
        boolean $z0;

        r0 := @parameter0: java.util.Calendar;

        $r1 = virtualinvoke r0.<java.util.Calendar: java.lang.Object clone()>();

        r2 = (java.util.Calendar) $r1;

        $i3 = (int) -1;

        virtualinvoke r2.<java.util.Calendar: void add(int,int)>(14, $i3);

        $i0 = virtualinvoke r2.<java.util.Calendar: int get(int)>(2);

        $i1 = virtualinvoke r0.<java.util.Calendar: int get(int)>(2);

        if $i0 == $i1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static boolean isEndOfMonth(java.util.Calendar)
    {
        java.util.Calendar r0, r2;
        int $i0, $i1;
        java.lang.Object $r1;
        boolean $z0;

        r0 := @parameter0: java.util.Calendar;

        $r1 = virtualinvoke r0.<java.util.Calendar: java.lang.Object clone()>();

        r2 = (java.util.Calendar) $r1;

        virtualinvoke r2.<java.util.Calendar: void add(int,int)>(14, 1);

        $i0 = virtualinvoke r2.<java.util.Calendar: int get(int)>(2);

        $i1 = virtualinvoke r0.<java.util.Calendar: int get(int)>(2);

        if $i0 == $i1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static boolean isStartOfWeek(java.util.Calendar)
    {
        java.util.Calendar r0, r2;
        int $i0, $i1, $i3;
        java.lang.Object $r1;
        boolean $z0;

        r0 := @parameter0: java.util.Calendar;

        $r1 = virtualinvoke r0.<java.util.Calendar: java.lang.Object clone()>();

        r2 = (java.util.Calendar) $r1;

        $i3 = (int) -1;

        virtualinvoke r2.<java.util.Calendar: void add(int,int)>(14, $i3);

        $i0 = virtualinvoke r2.<java.util.Calendar: int get(int)>(3);

        $i1 = virtualinvoke r0.<java.util.Calendar: int get(int)>(3);

        if $i0 == $i1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static boolean isEndOfWeek(java.util.Calendar)
    {
        java.util.Calendar r0, r2;
        int $i0, $i1;
        java.lang.Object $r1;
        boolean $z0;

        r0 := @parameter0: java.util.Calendar;

        $r1 = virtualinvoke r0.<java.util.Calendar: java.lang.Object clone()>();

        r2 = (java.util.Calendar) $r1;

        virtualinvoke r2.<java.util.Calendar: void add(int,int)>(14, 1);

        $i0 = virtualinvoke r2.<java.util.Calendar: int get(int)>(3);

        $i1 = virtualinvoke r0.<java.util.Calendar: int get(int)>(3);

        if $i0 == $i1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static void startOfWeek(java.util.Calendar)
    {
        int $i0;
        java.util.Calendar r0;

        r0 := @parameter0: java.util.Calendar;

        $i0 = virtualinvoke r0.<java.util.Calendar: int getFirstDayOfWeek()>();

        virtualinvoke r0.<java.util.Calendar: void set(int,int)>(7, $i0);

        staticinvoke <org.jdesktop.swingx.calendar.CalendarUtils: void startOfDay(java.util.Calendar)>(r0);

        return;
    }

    public static void endOfWeek(java.util.Calendar)
    {
        int $i1;
        java.util.Calendar r0;

        r0 := @parameter0: java.util.Calendar;

        staticinvoke <org.jdesktop.swingx.calendar.CalendarUtils: void startOfWeek(java.util.Calendar)>(r0);

        virtualinvoke r0.<java.util.Calendar: void add(int,int)>(5, 7);

        $i1 = (int) -1;

        virtualinvoke r0.<java.util.Calendar: void add(int,int)>(14, $i1);

        return;
    }

    public static java.util.Date endOfWeek(java.util.Calendar, java.util.Date)
    {
        java.util.Calendar r0;
        java.util.Date r1, $r2;

        r0 := @parameter0: java.util.Calendar;

        r1 := @parameter1: java.util.Date;

        virtualinvoke r0.<java.util.Calendar: void setTime(java.util.Date)>(r1);

        staticinvoke <org.jdesktop.swingx.calendar.CalendarUtils: void endOfWeek(java.util.Calendar)>(r0);

        $r2 = virtualinvoke r0.<java.util.Calendar: java.util.Date getTime()>();

        return $r2;
    }

    public static java.util.Date startOfWeek(java.util.Calendar, java.util.Date)
    {
        java.util.Calendar r0;
        java.util.Date r1, $r2;

        r0 := @parameter0: java.util.Calendar;

        r1 := @parameter1: java.util.Date;

        virtualinvoke r0.<java.util.Calendar: void setTime(java.util.Date)>(r1);

        staticinvoke <org.jdesktop.swingx.calendar.CalendarUtils: void startOfWeek(java.util.Calendar)>(r0);

        $r2 = virtualinvoke r0.<java.util.Calendar: java.util.Date getTime()>();

        return $r2;
    }

    public static void startOfDecade(java.util.Calendar)
    {
        int $i0, $i1;
        java.util.Calendar r0;

        r0 := @parameter0: java.util.Calendar;

        $i0 = virtualinvoke r0.<java.util.Calendar: int get(int)>(1);

        $i1 = staticinvoke <org.jdesktop.swingx.calendar.CalendarUtils: int decade(int)>($i0);

        virtualinvoke r0.<java.util.Calendar: void set(int,int)>(1, $i1);

        staticinvoke <org.jdesktop.swingx.calendar.CalendarUtils: void startOfYear(java.util.Calendar)>(r0);

        return;
    }

    private static int decade(int)
    {
        int i0, $i1, $i2;

        i0 := @parameter0: int;

        $i1 = i0 / 10;

        $i2 = $i1 * 10;

        return $i2;
    }

    public static java.util.Date startOfDecade(java.util.Calendar, java.util.Date)
    {
        java.util.Calendar r0;
        java.util.Date r1, $r2;

        r0 := @parameter0: java.util.Calendar;

        r1 := @parameter1: java.util.Date;

        virtualinvoke r0.<java.util.Calendar: void setTime(java.util.Date)>(r1);

        staticinvoke <org.jdesktop.swingx.calendar.CalendarUtils: void startOfDecade(java.util.Calendar)>(r0);

        $r2 = virtualinvoke r0.<java.util.Calendar: java.util.Date getTime()>();

        return $r2;
    }

    public static boolean isStartOfDecade(java.util.Calendar)
    {
        java.util.Calendar r0, r2;
        int $i0, $i1, $i2, $i3, $i5;
        java.lang.Object $r1;
        boolean $z0;

        r0 := @parameter0: java.util.Calendar;

        $r1 = virtualinvoke r0.<java.util.Calendar: java.lang.Object clone()>();

        r2 = (java.util.Calendar) $r1;

        $i5 = (int) -1;

        virtualinvoke r2.<java.util.Calendar: void add(int,int)>(14, $i5);

        $i0 = virtualinvoke r2.<java.util.Calendar: int get(int)>(1);

        $i1 = staticinvoke <org.jdesktop.swingx.calendar.CalendarUtils: int decade(int)>($i0);

        $i2 = virtualinvoke r0.<java.util.Calendar: int get(int)>(1);

        $i3 = staticinvoke <org.jdesktop.swingx.calendar.CalendarUtils: int decade(int)>($i2);

        if $i1 == $i3 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static void startOfYear(java.util.Calendar)
    {
        java.util.Calendar r0;

        r0 := @parameter0: java.util.Calendar;

        virtualinvoke r0.<java.util.Calendar: void set(int,int)>(2, 0);

        staticinvoke <org.jdesktop.swingx.calendar.CalendarUtils: void startOfMonth(java.util.Calendar)>(r0);

        return;
    }

    public static java.util.Date startOfYear(java.util.Calendar, java.util.Date)
    {
        java.util.Calendar r0;
        java.util.Date r1, $r2;

        r0 := @parameter0: java.util.Calendar;

        r1 := @parameter1: java.util.Date;

        virtualinvoke r0.<java.util.Calendar: void setTime(java.util.Date)>(r1);

        staticinvoke <org.jdesktop.swingx.calendar.CalendarUtils: void startOfDecade(java.util.Calendar)>(r0);

        $r2 = virtualinvoke r0.<java.util.Calendar: java.util.Date getTime()>();

        return $r2;
    }

    public static boolean isStartOfYear(java.util.Calendar)
    {
        java.util.Calendar r0, r2;
        int $i0, $i1, $i3;
        java.lang.Object $r1;
        boolean $z0;

        r0 := @parameter0: java.util.Calendar;

        $r1 = virtualinvoke r0.<java.util.Calendar: java.lang.Object clone()>();

        r2 = (java.util.Calendar) $r1;

        $i3 = (int) -1;

        virtualinvoke r2.<java.util.Calendar: void add(int,int)>(14, $i3);

        $i0 = virtualinvoke r2.<java.util.Calendar: int get(int)>(1);

        $i1 = virtualinvoke r0.<java.util.Calendar: int get(int)>(1);

        if $i0 == $i1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static void startOfMonth(java.util.Calendar)
    {
        java.util.Calendar r0;

        r0 := @parameter0: java.util.Calendar;

        virtualinvoke r0.<java.util.Calendar: void set(int,int)>(5, 1);

        staticinvoke <org.jdesktop.swingx.calendar.CalendarUtils: void startOfDay(java.util.Calendar)>(r0);

        return;
    }

    public static void endOfMonth(java.util.Calendar)
    {
        int $i1;
        java.util.Calendar r0;

        r0 := @parameter0: java.util.Calendar;

        virtualinvoke r0.<java.util.Calendar: void add(int,int)>(2, 1);

        staticinvoke <org.jdesktop.swingx.calendar.CalendarUtils: void startOfMonth(java.util.Calendar)>(r0);

        $i1 = (int) -1;

        virtualinvoke r0.<java.util.Calendar: void add(int,int)>(14, $i1);

        return;
    }

    public static java.util.Date startOfDay(java.util.Calendar, java.util.Date)
    {
        java.util.Calendar r0;
        java.util.Date r1, $r2;

        r0 := @parameter0: java.util.Calendar;

        r1 := @parameter1: java.util.Date;

        virtualinvoke r0.<java.util.Calendar: void setTime(java.util.Date)>(r1);

        staticinvoke <org.jdesktop.swingx.calendar.CalendarUtils: void startOfDay(java.util.Calendar)>(r0);

        $r2 = virtualinvoke r0.<java.util.Calendar: java.util.Date getTime()>();

        return $r2;
    }

    public static java.util.Date endOfDay(java.util.Calendar, java.util.Date)
    {
        java.util.Calendar r0;
        java.util.Date r1, $r2;

        r0 := @parameter0: java.util.Calendar;

        r1 := @parameter1: java.util.Date;

        virtualinvoke r0.<java.util.Calendar: void setTime(java.util.Date)>(r1);

        staticinvoke <org.jdesktop.swingx.calendar.CalendarUtils: void endOfDay(java.util.Calendar)>(r0);

        $r2 = virtualinvoke r0.<java.util.Calendar: java.util.Date getTime()>();

        return $r2;
    }

    public static void startOfDay(java.util.Calendar)
    {
        java.util.Calendar r0;

        r0 := @parameter0: java.util.Calendar;

        virtualinvoke r0.<java.util.Calendar: void set(int,int)>(11, 0);

        virtualinvoke r0.<java.util.Calendar: void set(int,int)>(14, 0);

        virtualinvoke r0.<java.util.Calendar: void set(int,int)>(13, 0);

        virtualinvoke r0.<java.util.Calendar: void set(int,int)>(12, 0);

        virtualinvoke r0.<java.util.Calendar: long getTimeInMillis()>();

        return;
    }

    public static void endOfDay(java.util.Calendar)
    {
        int $i1;
        java.util.Calendar r0;

        r0 := @parameter0: java.util.Calendar;

        virtualinvoke r0.<java.util.Calendar: void add(int,int)>(5, 1);

        staticinvoke <org.jdesktop.swingx.calendar.CalendarUtils: void startOfDay(java.util.Calendar)>(r0);

        $i1 = (int) -1;

        virtualinvoke r0.<java.util.Calendar: void add(int,int)>(14, $i1);

        return;
    }

    public static void startOf(java.util.Calendar, int)
    {
        java.util.Calendar r0;
        int i0;
        java.lang.StringBuilder $r2, $r3, $r4;
        java.lang.String $r5;
        java.lang.IllegalArgumentException $r1;

        r0 := @parameter0: java.util.Calendar;

        i0 := @parameter1: int;

        lookupswitch(i0)
        {
            case 1: goto label4;
            case 2: goto label2;
            case 3: goto label3;
            case 5: goto label1;
            case 5467: goto label5;
            default: goto label6;
        };

     label1:
        staticinvoke <org.jdesktop.swingx.calendar.CalendarUtils: void startOfDay(java.util.Calendar)>(r0);

        goto label7;

     label2:
        staticinvoke <org.jdesktop.swingx.calendar.CalendarUtils: void startOfMonth(java.util.Calendar)>(r0);

        goto label7;

     label3:
        staticinvoke <org.jdesktop.swingx.calendar.CalendarUtils: void startOfWeek(java.util.Calendar)>(r0);

        goto label7;

     label4:
        staticinvoke <org.jdesktop.swingx.calendar.CalendarUtils: void startOfYear(java.util.Calendar)>(r0);

        goto label7;

     label5:
        staticinvoke <org.jdesktop.swingx.calendar.CalendarUtils: void startOfDecade(java.util.Calendar)>(r0);

        goto label7;

     label6:
        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unsupported field: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r1;

     label7:
        return;
    }

    public static boolean isStartOf(java.util.Calendar, int)
    {
        java.lang.IllegalArgumentException $r1;
        java.util.Calendar r0;
        int i0;
        java.lang.StringBuilder $r2, $r3, $r4;
        java.lang.String $r5;
        boolean $z0, $z1, $z2, $z3, $z4;

        r0 := @parameter0: java.util.Calendar;

        i0 := @parameter1: int;

        lookupswitch(i0)
        {
            case 1: goto label4;
            case 2: goto label2;
            case 3: goto label3;
            case 5: goto label1;
            case 5467: goto label5;
            default: goto label6;
        };

     label1:
        $z1 = staticinvoke <org.jdesktop.swingx.calendar.CalendarUtils: boolean isStartOfDay(java.util.Calendar)>(r0);

        return $z1;

     label2:
        $z3 = staticinvoke <org.jdesktop.swingx.calendar.CalendarUtils: boolean isStartOfMonth(java.util.Calendar)>(r0);

        return $z3;

     label3:
        $z2 = staticinvoke <org.jdesktop.swingx.calendar.CalendarUtils: boolean isStartOfWeek(java.util.Calendar)>(r0);

        return $z2;

     label4:
        $z4 = staticinvoke <org.jdesktop.swingx.calendar.CalendarUtils: boolean isStartOfYear(java.util.Calendar)>(r0);

        return $z4;

     label5:
        $z0 = staticinvoke <org.jdesktop.swingx.calendar.CalendarUtils: boolean isStartOfDecade(java.util.Calendar)>(r0);

        return $z0;

     label6:
        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unsupported field: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r1;
    }

    public static boolean areEqual(java.util.Date, java.util.Date)
    {
        java.util.Date r0, r1;
        boolean $z0;

        r1 := @parameter0: java.util.Date;

        r0 := @parameter1: java.util.Date;

        if r0 != null goto label1;

        if r1 != null goto label1;

        return 1;

     label1:
        if r0 == null goto label2;

        $z0 = virtualinvoke r0.<java.util.Date: boolean equals(java.lang.Object)>(r1);

        return $z0;

     label2:
        return 0;
    }

    public static boolean isSameDay(java.util.Calendar, java.util.Date)
    {
        java.util.Calendar r0, r2;
        java.util.Date $r3, r4, $r5;
        java.lang.Object $r1;
        boolean $z0;

        r0 := @parameter0: java.util.Calendar;

        r4 := @parameter1: java.util.Date;

        $r1 = virtualinvoke r0.<java.util.Calendar: java.lang.Object clone()>();

        r2 = (java.util.Calendar) $r1;

        staticinvoke <org.jdesktop.swingx.calendar.CalendarUtils: void startOfDay(java.util.Calendar)>(r2);

        $r3 = virtualinvoke r2.<java.util.Calendar: java.util.Date getTime()>();

        virtualinvoke r2.<java.util.Calendar: void setTime(java.util.Date)>(r4);

        staticinvoke <org.jdesktop.swingx.calendar.CalendarUtils: void startOfDay(java.util.Calendar)>(r2);

        $r5 = virtualinvoke r2.<java.util.Calendar: java.util.Date getTime()>();

        $z0 = virtualinvoke $r3.<java.util.Date: boolean equals(java.lang.Object)>($r5);

        return $z0;
    }

    public static boolean isSame(java.util.Calendar, java.util.Date, int)
    {
        java.util.Date $r3, r4, $r5;
        java.util.Calendar r0, r2;
        int i0;
        java.lang.Object $r1;
        boolean $z0;

        r0 := @parameter0: java.util.Calendar;

        r4 := @parameter1: java.util.Date;

        i0 := @parameter2: int;

        $r1 = virtualinvoke r0.<java.util.Calendar: java.lang.Object clone()>();

        r2 = (java.util.Calendar) $r1;

        staticinvoke <org.jdesktop.swingx.calendar.CalendarUtils: void startOf(java.util.Calendar,int)>(r2, i0);

        $r3 = virtualinvoke r2.<java.util.Calendar: java.util.Date getTime()>();

        virtualinvoke r2.<java.util.Calendar: void setTime(java.util.Date)>(r4);

        staticinvoke <org.jdesktop.swingx.calendar.CalendarUtils: void startOf(java.util.Calendar,int)>(r2, i0);

        $r5 = virtualinvoke r2.<java.util.Calendar: java.util.Date getTime()>();

        $z0 = virtualinvoke $r3.<java.util.Date: boolean equals(java.lang.Object)>($r5);

        return $z0;
    }

    public static boolean isFlushed(java.util.Calendar)
    {
        java.util.Calendar r0;
        java.lang.String $r1;
        boolean $z0, $z1;

        r0 := @parameter0: java.util.Calendar;

        $r1 = virtualinvoke r0.<java.util.Calendar: java.lang.String toString()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean contains(java.lang.CharSequence)>("time=?");

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public static void <clinit>()
    {
        <org.jdesktop.swingx.calendar.CalendarUtils: int YEAR_IN_DECADE> = 5468;

        <org.jdesktop.swingx.calendar.CalendarUtils: int DECADE> = 5467;

        <org.jdesktop.swingx.calendar.CalendarUtils: int ONE_DAY> = 86400000;

        <org.jdesktop.swingx.calendar.CalendarUtils: int THREE_HOURS> = 10800000;

        <org.jdesktop.swingx.calendar.CalendarUtils: int ONE_HOUR> = 3600000;

        <org.jdesktop.swingx.calendar.CalendarUtils: int ONE_MINUTE> = 60000;

        return;
    }
}
