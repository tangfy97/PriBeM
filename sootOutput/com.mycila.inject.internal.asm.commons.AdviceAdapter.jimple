public abstract class com.mycila.inject.internal.asm.commons.AdviceAdapter extends com.mycila.inject.internal.asm.commons.GeneratorAdapter implements com.mycila.inject.internal.asm.Opcodes
{
    private static final java.lang.Object THIS;
    private static final java.lang.Object OTHER;
    protected int methodAccess;
    protected java.lang.String methodDesc;
    private boolean constructor;
    private boolean superInitialized;
    private java.util.List stackFrame;
    private java.util.Map branches;

    protected void <init>(com.mycila.inject.internal.asm.MethodVisitor, int, java.lang.String, java.lang.String)
    {
        com.mycila.inject.internal.asm.MethodVisitor r1;
        int i0;
        java.lang.String r2, r3, $r4;
        com.mycila.inject.internal.asm.commons.AdviceAdapter r0;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.asm.commons.AdviceAdapter;

        r1 := @parameter0: com.mycila.inject.internal.asm.MethodVisitor;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.String;

        specialinvoke r0.<com.mycila.inject.internal.asm.commons.GeneratorAdapter: void <init>(com.mycila.inject.internal.asm.MethodVisitor,int,java.lang.String,java.lang.String)>(r1, i0, r2, r3);

        r0.<com.mycila.inject.internal.asm.commons.AdviceAdapter: int methodAccess> = i0;

        r0.<com.mycila.inject.internal.asm.commons.AdviceAdapter: java.lang.String methodDesc> = r3;

        $r4 = "<init>";

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        r0.<com.mycila.inject.internal.asm.commons.AdviceAdapter: boolean constructor> = $z0;

        return;
    }

    public void visitCode()
    {
        com.mycila.inject.internal.asm.MethodVisitor $r1;
        java.util.HashMap $r3;
        com.mycila.inject.internal.asm.commons.AdviceAdapter r0;
        boolean $z0;
        java.util.ArrayList $r2;

        r0 := @this: com.mycila.inject.internal.asm.commons.AdviceAdapter;

        $r1 = r0.<com.mycila.inject.internal.asm.commons.AdviceAdapter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        interfaceinvoke $r1.<com.mycila.inject.internal.asm.MethodVisitor: void visitCode()>();

        $z0 = r0.<com.mycila.inject.internal.asm.commons.AdviceAdapter: boolean constructor>;

        if $z0 == 0 goto label1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<com.mycila.inject.internal.asm.commons.AdviceAdapter: java.util.List stackFrame> = $r2;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        r0.<com.mycila.inject.internal.asm.commons.AdviceAdapter: java.util.Map branches> = $r3;

        goto label2;

     label1:
        r0.<com.mycila.inject.internal.asm.commons.AdviceAdapter: boolean superInitialized> = 1;

        virtualinvoke r0.<com.mycila.inject.internal.asm.commons.AdviceAdapter: void onMethodEnter()>();

     label2:
        return;
    }

    public void visitLabel(com.mycila.inject.internal.asm.Label)
    {
        com.mycila.inject.internal.asm.commons.AdviceAdapter r0;
        java.util.List r6;
        com.mycila.inject.internal.asm.MethodVisitor $r2;
        java.util.Map $r3, $r4, $r7;
        com.mycila.inject.internal.asm.Label r1;
        java.lang.Object $r5;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.asm.commons.AdviceAdapter;

        r1 := @parameter0: com.mycila.inject.internal.asm.Label;

        $r2 = r0.<com.mycila.inject.internal.asm.commons.AdviceAdapter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        interfaceinvoke $r2.<com.mycila.inject.internal.asm.MethodVisitor: void visitLabel(com.mycila.inject.internal.asm.Label)>(r1);

        $z0 = r0.<com.mycila.inject.internal.asm.commons.AdviceAdapter: boolean constructor>;

        if $z0 == 0 goto label1;

        $r3 = r0.<com.mycila.inject.internal.asm.commons.AdviceAdapter: java.util.Map branches>;

        if $r3 == null goto label1;

        $r4 = r0.<com.mycila.inject.internal.asm.commons.AdviceAdapter: java.util.Map branches>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r6 = (java.util.List) $r5;

        if r6 == null goto label1;

        r0.<com.mycila.inject.internal.asm.commons.AdviceAdapter: java.util.List stackFrame> = r6;

        $r7 = r0.<com.mycila.inject.internal.asm.commons.AdviceAdapter: java.util.Map branches>;

        interfaceinvoke $r7.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

     label1:
        return;
    }

    public void visitInsn(int)
    {
        com.mycila.inject.internal.asm.commons.AdviceAdapter r0;
        com.mycila.inject.internal.asm.MethodVisitor $r39;
        boolean $z0;
        java.util.List $r1, $r2, $r3, $r5, $r6, $r7, $r8, $r10, $r11, $r13, $r14, $r15, $r17, $r18, $r20, $r21, $r22, $r24, $r25, $r27, $r28, $r29, $r31, $r32, $r33;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24;
        java.lang.Object $r4, $r9, $r12, $r16, $r19, $r23, $r26, $r30, $r34, $r35, $r36, $r37, $r38;

        r0 := @this: com.mycila.inject.internal.asm.commons.AdviceAdapter;

        i0 := @parameter0: int;

        $z0 = r0.<com.mycila.inject.internal.asm.commons.AdviceAdapter: boolean constructor>;

        if $z0 == 0 goto label19;

        tableswitch(i0)
        {
            case 0: goto label04;
            case 1: goto label05;
            case 2: goto label05;
            case 3: goto label05;
            case 4: goto label05;
            case 5: goto label05;
            case 6: goto label05;
            case 7: goto label05;
            case 8: goto label05;
            case 9: goto label06;
            case 10: goto label06;
            case 11: goto label05;
            case 12: goto label05;
            case 13: goto label05;
            case 14: goto label06;
            case 15: goto label06;
            case 16: goto label18;
            case 17: goto label18;
            case 18: goto label18;
            case 19: goto label18;
            case 20: goto label18;
            case 21: goto label18;
            case 22: goto label18;
            case 23: goto label18;
            case 24: goto label18;
            case 25: goto label18;
            case 26: goto label18;
            case 27: goto label18;
            case 28: goto label18;
            case 29: goto label18;
            case 30: goto label18;
            case 31: goto label18;
            case 32: goto label18;
            case 33: goto label18;
            case 34: goto label18;
            case 35: goto label18;
            case 36: goto label18;
            case 37: goto label18;
            case 38: goto label18;
            case 39: goto label18;
            case 40: goto label18;
            case 41: goto label18;
            case 42: goto label18;
            case 43: goto label18;
            case 44: goto label18;
            case 45: goto label18;
            case 46: goto label07;
            case 47: goto label04;
            case 48: goto label07;
            case 49: goto label04;
            case 50: goto label07;
            case 51: goto label07;
            case 52: goto label07;
            case 53: goto label07;
            case 54: goto label18;
            case 55: goto label18;
            case 56: goto label18;
            case 57: goto label18;
            case 58: goto label18;
            case 59: goto label18;
            case 60: goto label18;
            case 61: goto label18;
            case 62: goto label18;
            case 63: goto label18;
            case 64: goto label18;
            case 65: goto label18;
            case 66: goto label18;
            case 67: goto label18;
            case 68: goto label18;
            case 69: goto label18;
            case 70: goto label18;
            case 71: goto label18;
            case 72: goto label18;
            case 73: goto label18;
            case 74: goto label18;
            case 75: goto label18;
            case 76: goto label18;
            case 77: goto label18;
            case 78: goto label18;
            case 79: goto label09;
            case 80: goto label10;
            case 81: goto label09;
            case 82: goto label10;
            case 83: goto label09;
            case 84: goto label09;
            case 85: goto label09;
            case 86: goto label09;
            case 87: goto label07;
            case 88: goto label08;
            case 89: goto label11;
            case 90: goto label12;
            case 91: goto label13;
            case 92: goto label14;
            case 93: goto label15;
            case 94: goto label16;
            case 95: goto label17;
            case 96: goto label07;
            case 97: goto label08;
            case 98: goto label07;
            case 99: goto label08;
            case 100: goto label07;
            case 101: goto label08;
            case 102: goto label07;
            case 103: goto label08;
            case 104: goto label07;
            case 105: goto label08;
            case 106: goto label07;
            case 107: goto label08;
            case 108: goto label07;
            case 109: goto label08;
            case 110: goto label07;
            case 111: goto label08;
            case 112: goto label07;
            case 113: goto label08;
            case 114: goto label07;
            case 115: goto label08;
            case 116: goto label04;
            case 117: goto label04;
            case 118: goto label04;
            case 119: goto label04;
            case 120: goto label07;
            case 121: goto label07;
            case 122: goto label07;
            case 123: goto label07;
            case 124: goto label07;
            case 125: goto label07;
            case 126: goto label07;
            case 127: goto label08;
            case 128: goto label07;
            case 129: goto label08;
            case 130: goto label07;
            case 131: goto label08;
            case 132: goto label18;
            case 133: goto label05;
            case 134: goto label04;
            case 135: goto label05;
            case 136: goto label07;
            case 137: goto label07;
            case 138: goto label04;
            case 139: goto label04;
            case 140: goto label05;
            case 141: goto label05;
            case 142: goto label07;
            case 143: goto label04;
            case 144: goto label07;
            case 145: goto label04;
            case 146: goto label04;
            case 147: goto label04;
            case 148: goto label09;
            case 149: goto label07;
            case 150: goto label07;
            case 151: goto label09;
            case 152: goto label09;
            case 153: goto label18;
            case 154: goto label18;
            case 155: goto label18;
            case 156: goto label18;
            case 157: goto label18;
            case 158: goto label18;
            case 159: goto label18;
            case 160: goto label18;
            case 161: goto label18;
            case 162: goto label18;
            case 163: goto label18;
            case 164: goto label18;
            case 165: goto label18;
            case 166: goto label18;
            case 167: goto label18;
            case 168: goto label18;
            case 169: goto label18;
            case 170: goto label18;
            case 171: goto label18;
            case 172: goto label02;
            case 173: goto label03;
            case 174: goto label02;
            case 175: goto label03;
            case 176: goto label02;
            case 177: goto label01;
            case 178: goto label18;
            case 179: goto label18;
            case 180: goto label18;
            case 181: goto label18;
            case 182: goto label18;
            case 183: goto label18;
            case 184: goto label18;
            case 185: goto label18;
            case 186: goto label18;
            case 187: goto label18;
            case 188: goto label18;
            case 189: goto label18;
            case 190: goto label04;
            case 191: goto label02;
            case 192: goto label18;
            case 193: goto label18;
            case 194: goto label07;
            case 195: goto label07;
            default: goto label18;
        };

     label01:
        virtualinvoke r0.<com.mycila.inject.internal.asm.commons.AdviceAdapter: void onMethodExit(int)>(i0);

        goto label18;

     label02:
        specialinvoke r0.<com.mycila.inject.internal.asm.commons.AdviceAdapter: java.lang.Object popValue()>();

        virtualinvoke r0.<com.mycila.inject.internal.asm.commons.AdviceAdapter: void onMethodExit(int)>(i0);

        goto label18;

     label03:
        specialinvoke r0.<com.mycila.inject.internal.asm.commons.AdviceAdapter: java.lang.Object popValue()>();

        specialinvoke r0.<com.mycila.inject.internal.asm.commons.AdviceAdapter: java.lang.Object popValue()>();

        virtualinvoke r0.<com.mycila.inject.internal.asm.commons.AdviceAdapter: void onMethodExit(int)>(i0);

        goto label18;

     label04:
        goto label18;

     label05:
        $r38 = <com.mycila.inject.internal.asm.commons.AdviceAdapter: java.lang.Object OTHER>;

        specialinvoke r0.<com.mycila.inject.internal.asm.commons.AdviceAdapter: void pushValue(java.lang.Object)>($r38);

        goto label18;

     label06:
        $r36 = <com.mycila.inject.internal.asm.commons.AdviceAdapter: java.lang.Object OTHER>;

        specialinvoke r0.<com.mycila.inject.internal.asm.commons.AdviceAdapter: void pushValue(java.lang.Object)>($r36);

        $r37 = <com.mycila.inject.internal.asm.commons.AdviceAdapter: java.lang.Object OTHER>;

        specialinvoke r0.<com.mycila.inject.internal.asm.commons.AdviceAdapter: void pushValue(java.lang.Object)>($r37);

        goto label18;

     label07:
        specialinvoke r0.<com.mycila.inject.internal.asm.commons.AdviceAdapter: java.lang.Object popValue()>();

        goto label18;

     label08:
        specialinvoke r0.<com.mycila.inject.internal.asm.commons.AdviceAdapter: java.lang.Object popValue()>();

        specialinvoke r0.<com.mycila.inject.internal.asm.commons.AdviceAdapter: java.lang.Object popValue()>();

        goto label18;

     label09:
        specialinvoke r0.<com.mycila.inject.internal.asm.commons.AdviceAdapter: java.lang.Object popValue()>();

        specialinvoke r0.<com.mycila.inject.internal.asm.commons.AdviceAdapter: java.lang.Object popValue()>();

        specialinvoke r0.<com.mycila.inject.internal.asm.commons.AdviceAdapter: java.lang.Object popValue()>();

        goto label18;

     label10:
        specialinvoke r0.<com.mycila.inject.internal.asm.commons.AdviceAdapter: java.lang.Object popValue()>();

        specialinvoke r0.<com.mycila.inject.internal.asm.commons.AdviceAdapter: java.lang.Object popValue()>();

        specialinvoke r0.<com.mycila.inject.internal.asm.commons.AdviceAdapter: java.lang.Object popValue()>();

        specialinvoke r0.<com.mycila.inject.internal.asm.commons.AdviceAdapter: java.lang.Object popValue()>();

        goto label18;

     label11:
        $r35 = specialinvoke r0.<com.mycila.inject.internal.asm.commons.AdviceAdapter: java.lang.Object peekValue()>();

        specialinvoke r0.<com.mycila.inject.internal.asm.commons.AdviceAdapter: void pushValue(java.lang.Object)>($r35);

        goto label18;

     label12:
        $r31 = r0.<com.mycila.inject.internal.asm.commons.AdviceAdapter: java.util.List stackFrame>;

        $i22 = interfaceinvoke $r31.<java.util.List: int size()>();

        $r33 = r0.<com.mycila.inject.internal.asm.commons.AdviceAdapter: java.util.List stackFrame>;

        $i24 = $i22 - 2;

        $r32 = r0.<com.mycila.inject.internal.asm.commons.AdviceAdapter: java.util.List stackFrame>;

        $i23 = $i22 - 1;

        $r34 = interfaceinvoke $r32.<java.util.List: java.lang.Object get(int)>($i23);

        interfaceinvoke $r33.<java.util.List: void add(int,java.lang.Object)>($i24, $r34);

        goto label18;

     label13:
        $r27 = r0.<com.mycila.inject.internal.asm.commons.AdviceAdapter: java.util.List stackFrame>;

        $i19 = interfaceinvoke $r27.<java.util.List: int size()>();

        $r29 = r0.<com.mycila.inject.internal.asm.commons.AdviceAdapter: java.util.List stackFrame>;

        $i21 = $i19 - 3;

        $r28 = r0.<com.mycila.inject.internal.asm.commons.AdviceAdapter: java.util.List stackFrame>;

        $i20 = $i19 - 1;

        $r30 = interfaceinvoke $r28.<java.util.List: java.lang.Object get(int)>($i20);

        interfaceinvoke $r29.<java.util.List: void add(int,java.lang.Object)>($i21, $r30);

        goto label18;

     label14:
        $r20 = r0.<com.mycila.inject.internal.asm.commons.AdviceAdapter: java.util.List stackFrame>;

        $i14 = interfaceinvoke $r20.<java.util.List: int size()>();

        $r22 = r0.<com.mycila.inject.internal.asm.commons.AdviceAdapter: java.util.List stackFrame>;

        $i16 = $i14 - 2;

        $r21 = r0.<com.mycila.inject.internal.asm.commons.AdviceAdapter: java.util.List stackFrame>;

        $i15 = $i14 - 1;

        $r23 = interfaceinvoke $r21.<java.util.List: java.lang.Object get(int)>($i15);

        interfaceinvoke $r22.<java.util.List: void add(int,java.lang.Object)>($i16, $r23);

        $r25 = r0.<com.mycila.inject.internal.asm.commons.AdviceAdapter: java.util.List stackFrame>;

        $i18 = $i14 - 2;

        $r24 = r0.<com.mycila.inject.internal.asm.commons.AdviceAdapter: java.util.List stackFrame>;

        $i17 = $i14 - 1;

        $r26 = interfaceinvoke $r24.<java.util.List: java.lang.Object get(int)>($i17);

        interfaceinvoke $r25.<java.util.List: void add(int,java.lang.Object)>($i18, $r26);

        goto label18;

     label15:
        $r13 = r0.<com.mycila.inject.internal.asm.commons.AdviceAdapter: java.util.List stackFrame>;

        $i9 = interfaceinvoke $r13.<java.util.List: int size()>();

        $r15 = r0.<com.mycila.inject.internal.asm.commons.AdviceAdapter: java.util.List stackFrame>;

        $i11 = $i9 - 3;

        $r14 = r0.<com.mycila.inject.internal.asm.commons.AdviceAdapter: java.util.List stackFrame>;

        $i10 = $i9 - 1;

        $r16 = interfaceinvoke $r14.<java.util.List: java.lang.Object get(int)>($i10);

        interfaceinvoke $r15.<java.util.List: void add(int,java.lang.Object)>($i11, $r16);

        $r18 = r0.<com.mycila.inject.internal.asm.commons.AdviceAdapter: java.util.List stackFrame>;

        $i13 = $i9 - 3;

        $r17 = r0.<com.mycila.inject.internal.asm.commons.AdviceAdapter: java.util.List stackFrame>;

        $i12 = $i9 - 1;

        $r19 = interfaceinvoke $r17.<java.util.List: java.lang.Object get(int)>($i12);

        interfaceinvoke $r18.<java.util.List: void add(int,java.lang.Object)>($i13, $r19);

        goto label18;

     label16:
        $r6 = r0.<com.mycila.inject.internal.asm.commons.AdviceAdapter: java.util.List stackFrame>;

        $i4 = interfaceinvoke $r6.<java.util.List: int size()>();

        $r8 = r0.<com.mycila.inject.internal.asm.commons.AdviceAdapter: java.util.List stackFrame>;

        $i6 = $i4 - 4;

        $r7 = r0.<com.mycila.inject.internal.asm.commons.AdviceAdapter: java.util.List stackFrame>;

        $i5 = $i4 - 1;

        $r9 = interfaceinvoke $r7.<java.util.List: java.lang.Object get(int)>($i5);

        interfaceinvoke $r8.<java.util.List: void add(int,java.lang.Object)>($i6, $r9);

        $r11 = r0.<com.mycila.inject.internal.asm.commons.AdviceAdapter: java.util.List stackFrame>;

        $i8 = $i4 - 4;

        $r10 = r0.<com.mycila.inject.internal.asm.commons.AdviceAdapter: java.util.List stackFrame>;

        $i7 = $i4 - 1;

        $r12 = interfaceinvoke $r10.<java.util.List: java.lang.Object get(int)>($i7);

        interfaceinvoke $r11.<java.util.List: void add(int,java.lang.Object)>($i8, $r12);

        goto label18;

     label17:
        $r1 = r0.<com.mycila.inject.internal.asm.commons.AdviceAdapter: java.util.List stackFrame>;

        $i1 = interfaceinvoke $r1.<java.util.List: int size()>();

        $r3 = r0.<com.mycila.inject.internal.asm.commons.AdviceAdapter: java.util.List stackFrame>;

        $i3 = $i1 - 2;

        $r2 = r0.<com.mycila.inject.internal.asm.commons.AdviceAdapter: java.util.List stackFrame>;

        $i2 = $i1 - 1;

        $r4 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>($i2);

        interfaceinvoke $r3.<java.util.List: void add(int,java.lang.Object)>($i3, $r4);

        $r5 = r0.<com.mycila.inject.internal.asm.commons.AdviceAdapter: java.util.List stackFrame>;

        interfaceinvoke $r5.<java.util.List: java.lang.Object remove(int)>($i1);

     label18:
        goto label21;

     label19:
        tableswitch(i0)
        {
            case 172: goto label20;
            case 173: goto label20;
            case 174: goto label20;
            case 175: goto label20;
            case 176: goto label20;
            case 177: goto label20;
            case 178: goto label21;
            case 179: goto label21;
            case 180: goto label21;
            case 181: goto label21;
            case 182: goto label21;
            case 183: goto label21;
            case 184: goto label21;
            case 185: goto label21;
            case 186: goto label21;
            case 187: goto label21;
            case 188: goto label21;
            case 189: goto label21;
            case 190: goto label21;
            case 191: goto label20;
            default: goto label21;
        };

     label20:
        virtualinvoke r0.<com.mycila.inject.internal.asm.commons.AdviceAdapter: void onMethodExit(int)>(i0);

     label21:
        $r39 = r0.<com.mycila.inject.internal.asm.commons.AdviceAdapter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        interfaceinvoke $r39.<com.mycila.inject.internal.asm.MethodVisitor: void visitInsn(int)>(i0);

        return;
    }

    public void visitVarInsn(int, int)
    {
        com.mycila.inject.internal.asm.commons.AdviceAdapter r0;
        int i0, i1;
        java.lang.Object $r1, $r2, $r3, $r4;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.asm.commons.AdviceAdapter;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<com.mycila.inject.internal.asm.commons.GeneratorAdapter: void visitVarInsn(int,int)>(i0, i1);

        $z0 = r0.<com.mycila.inject.internal.asm.commons.AdviceAdapter: boolean constructor>;

        if $z0 == 0 goto label8;

        tableswitch(i0)
        {
            case 21: goto label1;
            case 22: goto label2;
            case 23: goto label1;
            case 24: goto label2;
            case 25: goto label3;
            case 26: goto label8;
            case 27: goto label8;
            case 28: goto label8;
            case 29: goto label8;
            case 30: goto label8;
            case 31: goto label8;
            case 32: goto label8;
            case 33: goto label8;
            case 34: goto label8;
            case 35: goto label8;
            case 36: goto label8;
            case 37: goto label8;
            case 38: goto label8;
            case 39: goto label8;
            case 40: goto label8;
            case 41: goto label8;
            case 42: goto label8;
            case 43: goto label8;
            case 44: goto label8;
            case 45: goto label8;
            case 46: goto label8;
            case 47: goto label8;
            case 48: goto label8;
            case 49: goto label8;
            case 50: goto label8;
            case 51: goto label8;
            case 52: goto label8;
            case 53: goto label8;
            case 54: goto label6;
            case 55: goto label7;
            case 56: goto label6;
            case 57: goto label7;
            case 58: goto label6;
            default: goto label8;
        };

     label1:
        $r3 = <com.mycila.inject.internal.asm.commons.AdviceAdapter: java.lang.Object OTHER>;

        specialinvoke r0.<com.mycila.inject.internal.asm.commons.AdviceAdapter: void pushValue(java.lang.Object)>($r3);

        goto label8;

     label2:
        $r1 = <com.mycila.inject.internal.asm.commons.AdviceAdapter: java.lang.Object OTHER>;

        specialinvoke r0.<com.mycila.inject.internal.asm.commons.AdviceAdapter: void pushValue(java.lang.Object)>($r1);

        $r2 = <com.mycila.inject.internal.asm.commons.AdviceAdapter: java.lang.Object OTHER>;

        specialinvoke r0.<com.mycila.inject.internal.asm.commons.AdviceAdapter: void pushValue(java.lang.Object)>($r2);

        goto label8;

     label3:
        if i1 != 0 goto label4;

        $r4 = <com.mycila.inject.internal.asm.commons.AdviceAdapter: java.lang.Object THIS>;

        goto label5;

     label4:
        $r4 = <com.mycila.inject.internal.asm.commons.AdviceAdapter: java.lang.Object OTHER>;

     label5:
        specialinvoke r0.<com.mycila.inject.internal.asm.commons.AdviceAdapter: void pushValue(java.lang.Object)>($r4);

        goto label8;

     label6:
        specialinvoke r0.<com.mycila.inject.internal.asm.commons.AdviceAdapter: java.lang.Object popValue()>();

        goto label8;

     label7:
        specialinvoke r0.<com.mycila.inject.internal.asm.commons.AdviceAdapter: java.lang.Object popValue()>();

        specialinvoke r0.<com.mycila.inject.internal.asm.commons.AdviceAdapter: java.lang.Object popValue()>();

     label8:
        return;
    }

    public void visitFieldInsn(int, java.lang.String, java.lang.String, java.lang.String)
    {
        com.mycila.inject.internal.asm.commons.AdviceAdapter r0;
        com.mycila.inject.internal.asm.MethodVisitor $r4;
        int i0, $i2, $i3;
        java.lang.String r1, r2, r3;
        boolean $z0, $z2, $z3, $z4, $z5;
        char $c1;
        java.lang.Object $r5, $r6, $r7;

        r0 := @this: com.mycila.inject.internal.asm.commons.AdviceAdapter;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.String;

        $r4 = r0.<com.mycila.inject.internal.asm.commons.AdviceAdapter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        interfaceinvoke $r4.<com.mycila.inject.internal.asm.MethodVisitor: void visitFieldInsn(int,java.lang.String,java.lang.String,java.lang.String)>(i0, r1, r2, r3);

        $z0 = r0.<com.mycila.inject.internal.asm.commons.AdviceAdapter: boolean constructor>;

        if $z0 == 0 goto label8;

        $c1 = virtualinvoke r3.<java.lang.String: char charAt(int)>(0);

        $i2 = (int) $c1;

        if $i2 == 74 goto label1;

        $i3 = (int) $c1;

        if $i3 != 68 goto label2;

     label1:
        $z5 = 1;

        $z4 = 1;

        $z3 = 1;

        $z2 = 1;

        goto label3;

     label2:
        $z5 = 0;

        $z4 = 0;

        $z3 = 0;

        $z2 = 0;

     label3:
        tableswitch(i0)
        {
            case 178: goto label4;
            case 179: goto label5;
            case 180: goto label7;
            case 181: goto label6;
            default: goto label7;
        };

     label4:
        $r5 = <com.mycila.inject.internal.asm.commons.AdviceAdapter: java.lang.Object OTHER>;

        specialinvoke r0.<com.mycila.inject.internal.asm.commons.AdviceAdapter: void pushValue(java.lang.Object)>($r5);

        if $z5 == 0 goto label8;

        $r6 = <com.mycila.inject.internal.asm.commons.AdviceAdapter: java.lang.Object OTHER>;

        specialinvoke r0.<com.mycila.inject.internal.asm.commons.AdviceAdapter: void pushValue(java.lang.Object)>($r6);

        goto label8;

     label5:
        specialinvoke r0.<com.mycila.inject.internal.asm.commons.AdviceAdapter: java.lang.Object popValue()>();

        if $z3 == 0 goto label8;

        specialinvoke r0.<com.mycila.inject.internal.asm.commons.AdviceAdapter: java.lang.Object popValue()>();

        goto label8;

     label6:
        specialinvoke r0.<com.mycila.inject.internal.asm.commons.AdviceAdapter: java.lang.Object popValue()>();

        if $z4 == 0 goto label8;

        specialinvoke r0.<com.mycila.inject.internal.asm.commons.AdviceAdapter: java.lang.Object popValue()>();

        specialinvoke r0.<com.mycila.inject.internal.asm.commons.AdviceAdapter: java.lang.Object popValue()>();

        goto label8;

     label7:
        if $z2 == 0 goto label8;

        $r7 = <com.mycila.inject.internal.asm.commons.AdviceAdapter: java.lang.Object OTHER>;

        specialinvoke r0.<com.mycila.inject.internal.asm.commons.AdviceAdapter: void pushValue(java.lang.Object)>($r7);

     label8:
        return;
    }

    public void visitIntInsn(int, int)
    {
        com.mycila.inject.internal.asm.MethodVisitor $r1;
        int i0, i1;
        java.lang.Object $r2;
        com.mycila.inject.internal.asm.commons.AdviceAdapter r0;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.asm.commons.AdviceAdapter;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<com.mycila.inject.internal.asm.commons.AdviceAdapter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        interfaceinvoke $r1.<com.mycila.inject.internal.asm.MethodVisitor: void visitIntInsn(int,int)>(i0, i1);

        $z0 = r0.<com.mycila.inject.internal.asm.commons.AdviceAdapter: boolean constructor>;

        if $z0 == 0 goto label1;

        if i0 == 188 goto label1;

        $r2 = <com.mycila.inject.internal.asm.commons.AdviceAdapter: java.lang.Object OTHER>;

        specialinvoke r0.<com.mycila.inject.internal.asm.commons.AdviceAdapter: void pushValue(java.lang.Object)>($r2);

     label1:
        return;
    }

    public void visitLdcInsn(java.lang.Object)
    {
        com.mycila.inject.internal.asm.commons.AdviceAdapter r0;
        com.mycila.inject.internal.asm.MethodVisitor $r2;
        java.lang.Object r1, $r3, $r4;
        boolean $z0, $z1, $z2;

        r0 := @this: com.mycila.inject.internal.asm.commons.AdviceAdapter;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<com.mycila.inject.internal.asm.commons.AdviceAdapter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        interfaceinvoke $r2.<com.mycila.inject.internal.asm.MethodVisitor: void visitLdcInsn(java.lang.Object)>(r1);

        $z0 = r0.<com.mycila.inject.internal.asm.commons.AdviceAdapter: boolean constructor>;

        if $z0 == 0 goto label2;

        $r3 = <com.mycila.inject.internal.asm.commons.AdviceAdapter: java.lang.Object OTHER>;

        specialinvoke r0.<com.mycila.inject.internal.asm.commons.AdviceAdapter: void pushValue(java.lang.Object)>($r3);

        $z1 = r1 instanceof java.lang.Double;

        if $z1 != 0 goto label1;

        $z2 = r1 instanceof java.lang.Long;

        if $z2 == 0 goto label2;

     label1:
        $r4 = <com.mycila.inject.internal.asm.commons.AdviceAdapter: java.lang.Object OTHER>;

        specialinvoke r0.<com.mycila.inject.internal.asm.commons.AdviceAdapter: void pushValue(java.lang.Object)>($r4);

     label2:
        return;
    }

    public void visitMultiANewArrayInsn(java.lang.String, int)
    {
        com.mycila.inject.internal.asm.MethodVisitor $r2;
        int i0, i1;
        java.lang.Object $r3;
        java.lang.String r1;
        com.mycila.inject.internal.asm.commons.AdviceAdapter r0;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.asm.commons.AdviceAdapter;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r2 = r0.<com.mycila.inject.internal.asm.commons.AdviceAdapter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        interfaceinvoke $r2.<com.mycila.inject.internal.asm.MethodVisitor: void visitMultiANewArrayInsn(java.lang.String,int)>(r1, i0);

        $z0 = r0.<com.mycila.inject.internal.asm.commons.AdviceAdapter: boolean constructor>;

        if $z0 == 0 goto label3;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        specialinvoke r0.<com.mycila.inject.internal.asm.commons.AdviceAdapter: java.lang.Object popValue()>();

        i1 = i1 + 1;

        goto label1;

     label2:
        $r3 = <com.mycila.inject.internal.asm.commons.AdviceAdapter: java.lang.Object OTHER>;

        specialinvoke r0.<com.mycila.inject.internal.asm.commons.AdviceAdapter: void pushValue(java.lang.Object)>($r3);

     label3:
        return;
    }

    public void visitTypeInsn(int, java.lang.String)
    {
        com.mycila.inject.internal.asm.MethodVisitor $r2;
        int i0;
        java.lang.Object $r3;
        java.lang.String r1;
        com.mycila.inject.internal.asm.commons.AdviceAdapter r0;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.asm.commons.AdviceAdapter;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        $r2 = r0.<com.mycila.inject.internal.asm.commons.AdviceAdapter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        interfaceinvoke $r2.<com.mycila.inject.internal.asm.MethodVisitor: void visitTypeInsn(int,java.lang.String)>(i0, r1);

        $z0 = r0.<com.mycila.inject.internal.asm.commons.AdviceAdapter: boolean constructor>;

        if $z0 == 0 goto label1;

        if i0 != 187 goto label1;

        $r3 = <com.mycila.inject.internal.asm.commons.AdviceAdapter: java.lang.Object OTHER>;

        specialinvoke r0.<com.mycila.inject.internal.asm.commons.AdviceAdapter: void pushValue(java.lang.Object)>($r3);

     label1:
        return;
    }

    public void visitMethodInsn(int, java.lang.String, java.lang.String, java.lang.String)
    {
        com.mycila.inject.internal.asm.Type $r10, $r11, $r12;
        com.mycila.inject.internal.asm.commons.AdviceAdapter r0;
        com.mycila.inject.internal.asm.MethodVisitor $r4;
        int i0, $i1, $i2, $i3, i4;
        java.lang.String r1, r2, r3;
        com.mycila.inject.internal.asm.Type[] $r5;
        boolean $z0, $z1;
        java.lang.Object $r6, $r7, $r8, $r9;

        r0 := @this: com.mycila.inject.internal.asm.commons.AdviceAdapter;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.String;

        $r4 = r0.<com.mycila.inject.internal.asm.commons.AdviceAdapter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        interfaceinvoke $r4.<com.mycila.inject.internal.asm.MethodVisitor: void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String)>(i0, r1, r2, r3);

        $z0 = r0.<com.mycila.inject.internal.asm.commons.AdviceAdapter: boolean constructor>;

        if $z0 == 0 goto label7;

        $r5 = staticinvoke <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type[] getArgumentTypes(java.lang.String)>(r3);

        i4 = 0;

     label1:
        $i1 = lengthof $r5;

        if i4 >= $i1 goto label3;

        specialinvoke r0.<com.mycila.inject.internal.asm.commons.AdviceAdapter: java.lang.Object popValue()>();

        $r10 = $r5[i4];

        $i3 = virtualinvoke $r10.<com.mycila.inject.internal.asm.Type: int getSize()>();

        if $i3 != 2 goto label2;

        specialinvoke r0.<com.mycila.inject.internal.asm.commons.AdviceAdapter: java.lang.Object popValue()>();

     label2:
        i4 = i4 + 1;

        goto label1;

     label3:
        tableswitch(i0)
        {
            case 182: goto label4;
            case 183: goto label5;
            case 184: goto label6;
            case 185: goto label4;
            default: goto label6;
        };

     label4:
        specialinvoke r0.<com.mycila.inject.internal.asm.commons.AdviceAdapter: java.lang.Object popValue()>();

        goto label6;

     label5:
        $r6 = specialinvoke r0.<com.mycila.inject.internal.asm.commons.AdviceAdapter: java.lang.Object popValue()>();

        $r7 = <com.mycila.inject.internal.asm.commons.AdviceAdapter: java.lang.Object THIS>;

        if $r6 != $r7 goto label6;

        $z1 = r0.<com.mycila.inject.internal.asm.commons.AdviceAdapter: boolean superInitialized>;

        if $z1 != 0 goto label6;

        virtualinvoke r0.<com.mycila.inject.internal.asm.commons.AdviceAdapter: void onMethodEnter()>();

        r0.<com.mycila.inject.internal.asm.commons.AdviceAdapter: boolean superInitialized> = 1;

        r0.<com.mycila.inject.internal.asm.commons.AdviceAdapter: boolean constructor> = 0;

     label6:
        $r11 = staticinvoke <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type getReturnType(java.lang.String)>(r3);

        $r12 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type VOID_TYPE>;

        if $r11 == $r12 goto label7;

        $r8 = <com.mycila.inject.internal.asm.commons.AdviceAdapter: java.lang.Object OTHER>;

        specialinvoke r0.<com.mycila.inject.internal.asm.commons.AdviceAdapter: void pushValue(java.lang.Object)>($r8);

        $i2 = virtualinvoke $r11.<com.mycila.inject.internal.asm.Type: int getSize()>();

        if $i2 != 2 goto label7;

        $r9 = <com.mycila.inject.internal.asm.commons.AdviceAdapter: java.lang.Object OTHER>;

        specialinvoke r0.<com.mycila.inject.internal.asm.commons.AdviceAdapter: void pushValue(java.lang.Object)>($r9);

     label7:
        return;
    }

    public void visitJumpInsn(int, com.mycila.inject.internal.asm.Label)
    {
        com.mycila.inject.internal.asm.MethodVisitor $r2;
        int i0;
        com.mycila.inject.internal.asm.Label r1;
        java.lang.Object $r3;
        com.mycila.inject.internal.asm.commons.AdviceAdapter r0;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.asm.commons.AdviceAdapter;

        i0 := @parameter0: int;

        r1 := @parameter1: com.mycila.inject.internal.asm.Label;

        $r2 = r0.<com.mycila.inject.internal.asm.commons.AdviceAdapter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        interfaceinvoke $r2.<com.mycila.inject.internal.asm.MethodVisitor: void visitJumpInsn(int,com.mycila.inject.internal.asm.Label)>(i0, r1);

        $z0 = r0.<com.mycila.inject.internal.asm.commons.AdviceAdapter: boolean constructor>;

        if $z0 == 0 goto label5;

        tableswitch(i0)
        {
            case 153: goto label1;
            case 154: goto label1;
            case 155: goto label1;
            case 156: goto label1;
            case 157: goto label1;
            case 158: goto label1;
            case 159: goto label2;
            case 160: goto label2;
            case 161: goto label2;
            case 162: goto label2;
            case 163: goto label2;
            case 164: goto label2;
            case 165: goto label2;
            case 166: goto label2;
            case 167: goto label4;
            case 168: goto label3;
            case 169: goto label4;
            case 170: goto label4;
            case 171: goto label4;
            case 172: goto label4;
            case 173: goto label4;
            case 174: goto label4;
            case 175: goto label4;
            case 176: goto label4;
            case 177: goto label4;
            case 178: goto label4;
            case 179: goto label4;
            case 180: goto label4;
            case 181: goto label4;
            case 182: goto label4;
            case 183: goto label4;
            case 184: goto label4;
            case 185: goto label4;
            case 186: goto label4;
            case 187: goto label4;
            case 188: goto label4;
            case 189: goto label4;
            case 190: goto label4;
            case 191: goto label4;
            case 192: goto label4;
            case 193: goto label4;
            case 194: goto label4;
            case 195: goto label4;
            case 196: goto label4;
            case 197: goto label4;
            case 198: goto label1;
            case 199: goto label1;
            default: goto label4;
        };

     label1:
        specialinvoke r0.<com.mycila.inject.internal.asm.commons.AdviceAdapter: java.lang.Object popValue()>();

        goto label4;

     label2:
        specialinvoke r0.<com.mycila.inject.internal.asm.commons.AdviceAdapter: java.lang.Object popValue()>();

        specialinvoke r0.<com.mycila.inject.internal.asm.commons.AdviceAdapter: java.lang.Object popValue()>();

        goto label4;

     label3:
        $r3 = <com.mycila.inject.internal.asm.commons.AdviceAdapter: java.lang.Object OTHER>;

        specialinvoke r0.<com.mycila.inject.internal.asm.commons.AdviceAdapter: void pushValue(java.lang.Object)>($r3);

     label4:
        specialinvoke r0.<com.mycila.inject.internal.asm.commons.AdviceAdapter: void addBranch(com.mycila.inject.internal.asm.Label)>(r1);

     label5:
        return;
    }

    public void visitLookupSwitchInsn(com.mycila.inject.internal.asm.Label, int[], com.mycila.inject.internal.asm.Label[])
    {
        int[] r2;
        com.mycila.inject.internal.asm.MethodVisitor $r4;
        com.mycila.inject.internal.asm.Label r1;
        com.mycila.inject.internal.asm.Label[] r3;
        com.mycila.inject.internal.asm.commons.AdviceAdapter r0;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.asm.commons.AdviceAdapter;

        r1 := @parameter0: com.mycila.inject.internal.asm.Label;

        r2 := @parameter1: int[];

        r3 := @parameter2: com.mycila.inject.internal.asm.Label[];

        $r4 = r0.<com.mycila.inject.internal.asm.commons.AdviceAdapter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        interfaceinvoke $r4.<com.mycila.inject.internal.asm.MethodVisitor: void visitLookupSwitchInsn(com.mycila.inject.internal.asm.Label,int[],com.mycila.inject.internal.asm.Label[])>(r1, r2, r3);

        $z0 = r0.<com.mycila.inject.internal.asm.commons.AdviceAdapter: boolean constructor>;

        if $z0 == 0 goto label1;

        specialinvoke r0.<com.mycila.inject.internal.asm.commons.AdviceAdapter: java.lang.Object popValue()>();

        specialinvoke r0.<com.mycila.inject.internal.asm.commons.AdviceAdapter: void addBranches(com.mycila.inject.internal.asm.Label,com.mycila.inject.internal.asm.Label[])>(r1, r3);

     label1:
        return;
    }

    public void visitTableSwitchInsn(int, int, com.mycila.inject.internal.asm.Label, com.mycila.inject.internal.asm.Label[])
    {
        com.mycila.inject.internal.asm.MethodVisitor $r3;
        int i0, i1;
        com.mycila.inject.internal.asm.Label r1;
        com.mycila.inject.internal.asm.Label[] r2;
        com.mycila.inject.internal.asm.commons.AdviceAdapter r0;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.asm.commons.AdviceAdapter;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: com.mycila.inject.internal.asm.Label;

        r2 := @parameter3: com.mycila.inject.internal.asm.Label[];

        $r3 = r0.<com.mycila.inject.internal.asm.commons.AdviceAdapter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        interfaceinvoke $r3.<com.mycila.inject.internal.asm.MethodVisitor: void visitTableSwitchInsn(int,int,com.mycila.inject.internal.asm.Label,com.mycila.inject.internal.asm.Label[])>(i0, i1, r1, r2);

        $z0 = r0.<com.mycila.inject.internal.asm.commons.AdviceAdapter: boolean constructor>;

        if $z0 == 0 goto label1;

        specialinvoke r0.<com.mycila.inject.internal.asm.commons.AdviceAdapter: java.lang.Object popValue()>();

        specialinvoke r0.<com.mycila.inject.internal.asm.commons.AdviceAdapter: void addBranches(com.mycila.inject.internal.asm.Label,com.mycila.inject.internal.asm.Label[])>(r1, r2);

     label1:
        return;
    }

    private void addBranches(com.mycila.inject.internal.asm.Label, com.mycila.inject.internal.asm.Label[])
    {
        com.mycila.inject.internal.asm.Label r1, $r3;
        int $i0, i1;
        com.mycila.inject.internal.asm.Label[] r2;
        com.mycila.inject.internal.asm.commons.AdviceAdapter r0;

        r0 := @this: com.mycila.inject.internal.asm.commons.AdviceAdapter;

        r1 := @parameter0: com.mycila.inject.internal.asm.Label;

        r2 := @parameter1: com.mycila.inject.internal.asm.Label[];

        specialinvoke r0.<com.mycila.inject.internal.asm.commons.AdviceAdapter: void addBranch(com.mycila.inject.internal.asm.Label)>(r1);

        i1 = 0;

     label1:
        $i0 = lengthof r2;

        if i1 >= $i0 goto label2;

        $r3 = r2[i1];

        specialinvoke r0.<com.mycila.inject.internal.asm.commons.AdviceAdapter: void addBranch(com.mycila.inject.internal.asm.Label)>($r3);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    private void addBranch(com.mycila.inject.internal.asm.Label)
    {
        java.util.List $r4;
        java.util.Map $r2, $r5;
        com.mycila.inject.internal.asm.Label r1;
        com.mycila.inject.internal.asm.commons.AdviceAdapter r0;
        boolean $z0;
        java.util.ArrayList $r3;

        r0 := @this: com.mycila.inject.internal.asm.commons.AdviceAdapter;

        r1 := @parameter0: com.mycila.inject.internal.asm.Label;

        $r2 = r0.<com.mycila.inject.internal.asm.commons.AdviceAdapter: java.util.Map branches>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        return;

     label1:
        $r5 = r0.<com.mycila.inject.internal.asm.commons.AdviceAdapter: java.util.Map branches>;

        $r3 = new java.util.ArrayList;

        $r4 = r0.<com.mycila.inject.internal.asm.commons.AdviceAdapter: java.util.List stackFrame>;

        specialinvoke $r3.<java.util.ArrayList: void <init>(java.util.Collection)>($r4);

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r3);

        return;
    }

    private java.lang.Object popValue()
    {
        java.util.List $r1, $r2;
        int $i0, $i1;
        java.lang.Object $r3;
        com.mycila.inject.internal.asm.commons.AdviceAdapter r0;

        r0 := @this: com.mycila.inject.internal.asm.commons.AdviceAdapter;

        $r2 = r0.<com.mycila.inject.internal.asm.commons.AdviceAdapter: java.util.List stackFrame>;

        $r1 = r0.<com.mycila.inject.internal.asm.commons.AdviceAdapter: java.util.List stackFrame>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        $i1 = $i0 - 1;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object remove(int)>($i1);

        return $r3;
    }

    private java.lang.Object peekValue()
    {
        java.util.List $r1, $r2;
        int $i0, $i1;
        java.lang.Object $r3;
        com.mycila.inject.internal.asm.commons.AdviceAdapter r0;

        r0 := @this: com.mycila.inject.internal.asm.commons.AdviceAdapter;

        $r2 = r0.<com.mycila.inject.internal.asm.commons.AdviceAdapter: java.util.List stackFrame>;

        $r1 = r0.<com.mycila.inject.internal.asm.commons.AdviceAdapter: java.util.List stackFrame>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        $i1 = $i0 - 1;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>($i1);

        return $r3;
    }

    private void pushValue(java.lang.Object)
    {
        java.lang.Object r1;
        java.util.List $r2;
        com.mycila.inject.internal.asm.commons.AdviceAdapter r0;

        r0 := @this: com.mycila.inject.internal.asm.commons.AdviceAdapter;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<com.mycila.inject.internal.asm.commons.AdviceAdapter: java.util.List stackFrame>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        return;
    }

    protected void onMethodEnter()
    {
        com.mycila.inject.internal.asm.commons.AdviceAdapter r0;

        r0 := @this: com.mycila.inject.internal.asm.commons.AdviceAdapter;

        return;
    }

    protected void onMethodExit(int)
    {
        int i0;
        com.mycila.inject.internal.asm.commons.AdviceAdapter r0;

        r0 := @this: com.mycila.inject.internal.asm.commons.AdviceAdapter;

        i0 := @parameter0: int;

        return;
    }

    static void <clinit>()
    {
        java.lang.Object $r0, $r1;

        $r0 = new java.lang.Object;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        <com.mycila.inject.internal.asm.commons.AdviceAdapter: java.lang.Object THIS> = $r0;

        $r1 = new java.lang.Object;

        specialinvoke $r1.<java.lang.Object: void <init>()>();

        <com.mycila.inject.internal.asm.commons.AdviceAdapter: java.lang.Object OTHER> = $r1;

        return;
    }
}
