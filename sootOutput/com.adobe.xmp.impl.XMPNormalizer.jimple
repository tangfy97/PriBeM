public class com.adobe.xmp.impl.XMPNormalizer extends java.lang.Object
{
    private static java.util.Map dcArrayForms;

    private void <init>()
    {
        com.adobe.xmp.impl.XMPNormalizer r0;

        r0 := @this: com.adobe.xmp.impl.XMPNormalizer;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static com.adobe.xmp.XMPMeta process(com.adobe.xmp.impl.XMPMetaImpl, com.adobe.xmp.options.ParseOptions) throws com.adobe.xmp.XMPException
    {
        com.adobe.xmp.impl.XMPMetaImpl r0;
        com.adobe.xmp.impl.XMPNode $r1;
        com.adobe.xmp.options.ParseOptions r2;

        r0 := @parameter0: com.adobe.xmp.impl.XMPMetaImpl;

        r2 := @parameter1: com.adobe.xmp.options.ParseOptions;

        $r1 = virtualinvoke r0.<com.adobe.xmp.impl.XMPMetaImpl: com.adobe.xmp.impl.XMPNode getRoot()>();

        staticinvoke <com.adobe.xmp.impl.XMPNormalizer: void touchUpDataModel(com.adobe.xmp.impl.XMPMetaImpl)>(r0);

        staticinvoke <com.adobe.xmp.impl.XMPNormalizer: void moveExplicitAliases(com.adobe.xmp.impl.XMPNode,com.adobe.xmp.options.ParseOptions)>($r1, r2);

        staticinvoke <com.adobe.xmp.impl.XMPNormalizer: void tweakOldXMP(com.adobe.xmp.impl.XMPNode)>($r1);

        staticinvoke <com.adobe.xmp.impl.XMPNormalizer: void deleteEmptySchemas(com.adobe.xmp.impl.XMPNode)>($r1);

        return r0;
    }

    private static void tweakOldXMP(com.adobe.xmp.impl.XMPNode) throws com.adobe.xmp.XMPException
    {
        com.adobe.xmp.XMPException $r7;
        int $i0;
        java.lang.String $r1, $r2, $r3, $r4, $r11, r12;
        boolean $z0, $z1;
        com.adobe.xmp.impl.xpath.XMPPath $r5;
        com.adobe.xmp.impl.XMPNode r0, $r6;
        java.lang.StringBuilder $r8, $r9, $r10;

        r0 := @parameter0: com.adobe.xmp.impl.XMPNode;

        $r1 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: java.lang.String getName()>();

        if $r1 == null goto label3;

        $r2 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: java.lang.String getName()>();

        $i0 = virtualinvoke $r2.<java.lang.String: int length()>();

        if $i0 < 36 goto label3;

        $r3 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: java.lang.String getName()>();

        $r4 = virtualinvoke $r3.<java.lang.String: java.lang.String toLowerCase()>();

        r12 = $r4;

        $z0 = virtualinvoke $r4.<java.lang.String: boolean startsWith(java.lang.String)>("uuid:");

        if $z0 == 0 goto label1;

        r12 = virtualinvoke $r4.<java.lang.String: java.lang.String substring(int)>(5);

     label1:
        $z1 = staticinvoke <com.adobe.xmp.impl.Utils: boolean checkUUIDFormat(java.lang.String)>(r12);

        if $z1 == 0 goto label3;

        $r5 = staticinvoke <com.adobe.xmp.impl.xpath.XMPPathParser: com.adobe.xmp.impl.xpath.XMPPath expandXPath(java.lang.String,java.lang.String)>("http://ns.adobe.com/xap/1.0/mm/", "InstanceID");

        $r6 = staticinvoke <com.adobe.xmp.impl.XMPNodeUtils: com.adobe.xmp.impl.XMPNode findNode(com.adobe.xmp.impl.XMPNode,com.adobe.xmp.impl.xpath.XMPPath,boolean,com.adobe.xmp.options.PropertyOptions)>(r0, $r5, 1, null);

        if $r6 == null goto label2;

        virtualinvoke $r6.<com.adobe.xmp.impl.XMPNode: void setOptions(com.adobe.xmp.options.PropertyOptions)>(null);

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("uuid:");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r12);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r6.<com.adobe.xmp.impl.XMPNode: void setValue(java.lang.String)>($r11);

        virtualinvoke $r6.<com.adobe.xmp.impl.XMPNode: void removeChildren()>();

        virtualinvoke $r6.<com.adobe.xmp.impl.XMPNode: void removeQualifiers()>();

        virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: void setName(java.lang.String)>(null);

        goto label3;

     label2:
        $r7 = new com.adobe.xmp.XMPException;

        specialinvoke $r7.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Failure creating xmpMM:InstanceID", 9);

        throw $r7;

     label3:
        return;
    }

    private static void touchUpDataModel(com.adobe.xmp.impl.XMPMetaImpl) throws com.adobe.xmp.XMPException
    {
        com.adobe.xmp.impl.XMPMetaImpl r0;
        java.lang.String $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.util.Iterator $r3;
        com.adobe.xmp.impl.XMPNode $r1, $r2, r5, $r14, $r15, $r16;
        java.lang.Object $r4;

        r0 := @parameter0: com.adobe.xmp.impl.XMPMetaImpl;

        $r1 = virtualinvoke r0.<com.adobe.xmp.impl.XMPMetaImpl: com.adobe.xmp.impl.XMPNode getRoot()>();

        staticinvoke <com.adobe.xmp.impl.XMPNodeUtils: com.adobe.xmp.impl.XMPNode findSchemaNode(com.adobe.xmp.impl.XMPNode,java.lang.String,boolean)>($r1, "http://purl.org/dc/elements/1.1/", 1);

        $r2 = virtualinvoke r0.<com.adobe.xmp.impl.XMPMetaImpl: com.adobe.xmp.impl.XMPNode getRoot()>();

        $r3 = virtualinvoke $r2.<com.adobe.xmp.impl.XMPNode: java.util.Iterator iterateChildren()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label8;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (com.adobe.xmp.impl.XMPNode) $r4;

        $r6 = "http://purl.org/dc/elements/1.1/";

        $r7 = virtualinvoke r5.<com.adobe.xmp.impl.XMPNode: java.lang.String getName()>();

        $z1 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r7);

        if $z1 == 0 goto label2;

        staticinvoke <com.adobe.xmp.impl.XMPNormalizer: void normalizeDCArrays(com.adobe.xmp.impl.XMPNode)>(r5);

        goto label7;

     label2:
        $r8 = "http://ns.adobe.com/exif/1.0/";

        $r9 = virtualinvoke r5.<com.adobe.xmp.impl.XMPNode: java.lang.String getName()>();

        $z2 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>($r9);

        if $z2 == 0 goto label4;

        staticinvoke <com.adobe.xmp.impl.XMPNormalizer: void fixGPSTimeStamp(com.adobe.xmp.impl.XMPNode)>(r5);

        $r16 = staticinvoke <com.adobe.xmp.impl.XMPNodeUtils: com.adobe.xmp.impl.XMPNode findChildNode(com.adobe.xmp.impl.XMPNode,java.lang.String,boolean)>(r5, "exif:UserComment", 0);

        if $r16 == null goto label3;

        staticinvoke <com.adobe.xmp.impl.XMPNormalizer: void repairAltText(com.adobe.xmp.impl.XMPNode)>($r16);

     label3:
        goto label7;

     label4:
        $r10 = "http://ns.adobe.com/xmp/1.0/DynamicMedia/";

        $r11 = virtualinvoke r5.<com.adobe.xmp.impl.XMPNode: java.lang.String getName()>();

        $z3 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>($r11);

        if $z3 == 0 goto label6;

        $r15 = staticinvoke <com.adobe.xmp.impl.XMPNodeUtils: com.adobe.xmp.impl.XMPNode findChildNode(com.adobe.xmp.impl.XMPNode,java.lang.String,boolean)>(r5, "xmpDM:copyright", 0);

        if $r15 == null goto label5;

        staticinvoke <com.adobe.xmp.impl.XMPNormalizer: void migrateAudioCopyright(com.adobe.xmp.XMPMeta,com.adobe.xmp.impl.XMPNode)>(r0, $r15);

     label5:
        goto label7;

     label6:
        $r12 = "http://ns.adobe.com/xap/1.0/rights/";

        $r13 = virtualinvoke r5.<com.adobe.xmp.impl.XMPNode: java.lang.String getName()>();

        $z4 = virtualinvoke $r12.<java.lang.String: boolean equals(java.lang.Object)>($r13);

        if $z4 == 0 goto label7;

        $r14 = staticinvoke <com.adobe.xmp.impl.XMPNodeUtils: com.adobe.xmp.impl.XMPNode findChildNode(com.adobe.xmp.impl.XMPNode,java.lang.String,boolean)>(r5, "xmpRights:UsageTerms", 0);

        if $r14 == null goto label7;

        staticinvoke <com.adobe.xmp.impl.XMPNormalizer: void repairAltText(com.adobe.xmp.impl.XMPNode)>($r14);

     label7:
        goto label1;

     label8:
        return;
    }

    private static void normalizeDCArrays(com.adobe.xmp.impl.XMPNode) throws com.adobe.xmp.XMPException
    {
        java.util.Map $r2;
        int $i0, i1;
        java.lang.String $r3, $r10;
        boolean $z0, $z1, $z2, $z3;
        com.adobe.xmp.options.PropertyOptions r5, $r6, $r7, $r8, $r11;
        com.adobe.xmp.impl.XMPNode r0, $r1, $r9, $r12;
        java.lang.Object $r4;

        r0 := @parameter0: com.adobe.xmp.impl.XMPNode;

        i1 = 1;

     label1:
        $i0 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: int getChildrenLength()>();

        if i1 > $i0 goto label6;

        $r1 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.impl.XMPNode getChild(int)>(i1);

        $r2 = <com.adobe.xmp.impl.XMPNormalizer: java.util.Map dcArrayForms>;

        $r3 = virtualinvoke $r1.<com.adobe.xmp.impl.XMPNode: java.lang.String getName()>();

        $r4 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r3);

        r5 = (com.adobe.xmp.options.PropertyOptions) $r4;

        if r5 != null goto label2;

        goto label5;

     label2:
        $r6 = virtualinvoke $r1.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions getOptions()>();

        $z0 = virtualinvoke $r6.<com.adobe.xmp.options.PropertyOptions: boolean isSimple()>();

        if $z0 == 0 goto label4;

        $r9 = new com.adobe.xmp.impl.XMPNode;

        $r10 = virtualinvoke $r1.<com.adobe.xmp.impl.XMPNode: java.lang.String getName()>();

        specialinvoke $r9.<com.adobe.xmp.impl.XMPNode: void <init>(java.lang.String,com.adobe.xmp.options.PropertyOptions)>($r10, r5);

        virtualinvoke $r1.<com.adobe.xmp.impl.XMPNode: void setName(java.lang.String)>("[]");

        virtualinvoke $r9.<com.adobe.xmp.impl.XMPNode: void addChild(com.adobe.xmp.impl.XMPNode)>($r1);

        virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: void replaceChild(int,com.adobe.xmp.impl.XMPNode)>(i1, $r9);

        $z2 = virtualinvoke r5.<com.adobe.xmp.options.PropertyOptions: boolean isArrayAltText()>();

        if $z2 == 0 goto label3;

        $r11 = virtualinvoke $r1.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions getOptions()>();

        $z3 = virtualinvoke $r11.<com.adobe.xmp.options.PropertyOptions: boolean getHasLanguage()>();

        if $z3 != 0 goto label3;

        $r12 = new com.adobe.xmp.impl.XMPNode;

        specialinvoke $r12.<com.adobe.xmp.impl.XMPNode: void <init>(java.lang.String,java.lang.String,com.adobe.xmp.options.PropertyOptions)>("xml:lang", "x-default", null);

        virtualinvoke $r1.<com.adobe.xmp.impl.XMPNode: void addQualifier(com.adobe.xmp.impl.XMPNode)>($r12);

     label3:
        goto label5;

     label4:
        $r7 = virtualinvoke $r1.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions getOptions()>();

        virtualinvoke $r7.<com.adobe.xmp.options.PropertyOptions: void setOption(int,boolean)>(7680, 0);

        $r8 = virtualinvoke $r1.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions getOptions()>();

        virtualinvoke $r8.<com.adobe.xmp.options.PropertyOptions: void mergeWith(com.adobe.xmp.options.PropertyOptions)>(r5);

        $z1 = virtualinvoke r5.<com.adobe.xmp.options.PropertyOptions: boolean isArrayAltText()>();

        if $z1 == 0 goto label5;

        staticinvoke <com.adobe.xmp.impl.XMPNormalizer: void repairAltText(com.adobe.xmp.impl.XMPNode)>($r1);

     label5:
        i1 = i1 + 1;

        goto label1;

     label6:
        return;
    }

    private static void repairAltText(com.adobe.xmp.impl.XMPNode) throws com.adobe.xmp.XMPException
    {
        int $i0;
        java.lang.String $r10;
        boolean $z0, $z1, $z2, $z3;
        com.adobe.xmp.options.PropertyOptions $r1, $r2, $r3, $r4, $r8, $r9;
        java.util.Iterator $r5;
        com.adobe.xmp.impl.XMPNode r0, r7, $r11;
        java.lang.Object $r6;

        r0 := @parameter0: com.adobe.xmp.impl.XMPNode;

        if r0 == null goto label1;

        $r1 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions getOptions()>();

        $z0 = virtualinvoke $r1.<com.adobe.xmp.options.PropertyOptions: boolean isArray()>();

        if $z0 != 0 goto label2;

     label1:
        return;

     label2:
        $r2 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions getOptions()>();

        $r3 = virtualinvoke $r2.<com.adobe.xmp.options.PropertyOptions: com.adobe.xmp.options.PropertyOptions setArrayOrdered(boolean)>(1);

        $r4 = virtualinvoke $r3.<com.adobe.xmp.options.PropertyOptions: com.adobe.xmp.options.PropertyOptions setArrayAlternate(boolean)>(1);

        virtualinvoke $r4.<com.adobe.xmp.options.PropertyOptions: com.adobe.xmp.options.PropertyOptions setArrayAltText(boolean)>(1);

        $r5 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: java.util.Iterator iterateChildren()>();

     label3:
        $z1 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label8;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (com.adobe.xmp.impl.XMPNode) $r6;

        $r8 = virtualinvoke r7.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions getOptions()>();

        $z2 = virtualinvoke $r8.<com.adobe.xmp.options.PropertyOptions: boolean isCompositeProperty()>();

        if $z2 == 0 goto label4;

        interfaceinvoke $r5.<java.util.Iterator: void remove()>();

        goto label7;

     label4:
        $r9 = virtualinvoke r7.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions getOptions()>();

        $z3 = virtualinvoke $r9.<com.adobe.xmp.options.PropertyOptions: boolean getHasLanguage()>();

        if $z3 != 0 goto label7;

        $r10 = virtualinvoke r7.<com.adobe.xmp.impl.XMPNode: java.lang.String getValue()>();

        if $r10 == null goto label5;

        $i0 = virtualinvoke $r10.<java.lang.String: int length()>();

        if $i0 != 0 goto label6;

     label5:
        interfaceinvoke $r5.<java.util.Iterator: void remove()>();

        goto label7;

     label6:
        $r11 = new com.adobe.xmp.impl.XMPNode;

        specialinvoke $r11.<com.adobe.xmp.impl.XMPNode: void <init>(java.lang.String,java.lang.String,com.adobe.xmp.options.PropertyOptions)>("xml:lang", "x-repair", null);

        virtualinvoke r7.<com.adobe.xmp.impl.XMPNode: void addQualifier(com.adobe.xmp.impl.XMPNode)>($r11);

     label7:
        goto label3;

     label8:
        return;
    }

    private static void moveExplicitAliases(com.adobe.xmp.impl.XMPNode, com.adobe.xmp.options.ParseOptions) throws com.adobe.xmp.XMPException
    {
        com.adobe.xmp.properties.XMPAliasInfo $r11;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        com.adobe.xmp.options.PropertyOptions $r32;
        java.util.List $r2;
        java.lang.StringBuilder $r16, $r18, $r27, $r29, $r35, $r37, $r40, $r41, $r42;
        com.adobe.xmp.options.AliasOptions $r21, $r22, $r23, $r31;
        com.adobe.xmp.XMPSchemaRegistry $r9;
        int $i0, $i2;
        java.lang.String $r10, $r12, $r15, $r17, $r19, $r26, $r28, $r30, $r34, $r36, $r38;
        com.adobe.xmp.options.ParseOptions r1;
        java.util.Iterator $r3, $r6;
        com.adobe.xmp.impl.XMPNode r0, r5, r8, $r13, $r20, r39, $r43;
        java.lang.Object $r4, $r7;

        r0 := @parameter0: com.adobe.xmp.impl.XMPNode;

        r1 := @parameter1: com.adobe.xmp.options.ParseOptions;

        $z0 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: boolean getHasAliases()>();

        if $z0 != 0 goto label01;

        return;

     label01:
        virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: void setHasAliases(boolean)>(0);

        $z1 = virtualinvoke r1.<com.adobe.xmp.options.ParseOptions: boolean getStrictAliasing()>();

        $r2 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: java.util.List getUnmodifiableChildren()>();

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label02:
        $z8 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z8 == 0 goto label17;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (com.adobe.xmp.impl.XMPNode) $r4;

        $z2 = virtualinvoke r5.<com.adobe.xmp.impl.XMPNode: boolean getHasAliases()>();

        if $z2 != 0 goto label03;

        goto label02;

     label03:
        $r6 = virtualinvoke r5.<com.adobe.xmp.impl.XMPNode: java.util.Iterator iterateChildren()>();

     label04:
        $z9 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z9 == 0 goto label16;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r8 = (com.adobe.xmp.impl.XMPNode) $r7;

        $z3 = virtualinvoke r8.<com.adobe.xmp.impl.XMPNode: boolean isAlias()>();

        if $z3 != 0 goto label05;

        goto label04;

     label05:
        virtualinvoke r8.<com.adobe.xmp.impl.XMPNode: void setAlias(boolean)>(0);

        $r9 = staticinvoke <com.adobe.xmp.XMPMetaFactory: com.adobe.xmp.XMPSchemaRegistry getSchemaRegistry()>();

        $r10 = virtualinvoke r8.<com.adobe.xmp.impl.XMPNode: java.lang.String getName()>();

        $r11 = interfaceinvoke $r9.<com.adobe.xmp.XMPSchemaRegistry: com.adobe.xmp.properties.XMPAliasInfo findAlias(java.lang.String)>($r10);

        if $r11 == null goto label15;

        $r12 = interfaceinvoke $r11.<com.adobe.xmp.properties.XMPAliasInfo: java.lang.String getNamespace()>();

        $r13 = staticinvoke <com.adobe.xmp.impl.XMPNodeUtils: com.adobe.xmp.impl.XMPNode findSchemaNode(com.adobe.xmp.impl.XMPNode,java.lang.String,java.lang.String,boolean)>(r0, $r12, null, 1);

        virtualinvoke $r13.<com.adobe.xmp.impl.XMPNode: void setImplicit(boolean)>(0);

        $r40 = new java.lang.StringBuilder;

        specialinvoke $r40.<java.lang.StringBuilder: void <init>()>();

        $r15 = interfaceinvoke $r11.<com.adobe.xmp.properties.XMPAliasInfo: java.lang.String getPrefix()>();

        $r16 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = interfaceinvoke $r11.<com.adobe.xmp.properties.XMPAliasInfo: java.lang.String getPropName()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        $r20 = staticinvoke <com.adobe.xmp.impl.XMPNodeUtils: com.adobe.xmp.impl.XMPNode findChildNode(com.adobe.xmp.impl.XMPNode,java.lang.String,boolean)>($r13, $r19, 0);

        if $r20 != null goto label07;

        $r23 = interfaceinvoke $r11.<com.adobe.xmp.properties.XMPAliasInfo: com.adobe.xmp.options.AliasOptions getAliasForm()>();

        $z7 = virtualinvoke $r23.<com.adobe.xmp.options.AliasOptions: boolean isSimple()>();

        if $z7 == 0 goto label06;

        $r41 = new java.lang.StringBuilder;

        specialinvoke $r41.<java.lang.StringBuilder: void <init>()>();

        $r34 = interfaceinvoke $r11.<com.adobe.xmp.properties.XMPAliasInfo: java.lang.String getPrefix()>();

        $r35 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r34);

        $r36 = interfaceinvoke $r11.<com.adobe.xmp.properties.XMPAliasInfo: java.lang.String getPropName()>();

        $r37 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r36);

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r8.<com.adobe.xmp.impl.XMPNode: void setName(java.lang.String)>($r38);

        virtualinvoke $r13.<com.adobe.xmp.impl.XMPNode: void addChild(com.adobe.xmp.impl.XMPNode)>(r8);

        interfaceinvoke $r6.<java.util.Iterator: void remove()>();

        goto label15;

     label06:
        $r43 = new com.adobe.xmp.impl.XMPNode;

        $r42 = new java.lang.StringBuilder;

        specialinvoke $r42.<java.lang.StringBuilder: void <init>()>();

        $r26 = interfaceinvoke $r11.<com.adobe.xmp.properties.XMPAliasInfo: java.lang.String getPrefix()>();

        $r27 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r26);

        $r28 = interfaceinvoke $r11.<com.adobe.xmp.properties.XMPAliasInfo: java.lang.String getPropName()>();

        $r29 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r28);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        $r31 = interfaceinvoke $r11.<com.adobe.xmp.properties.XMPAliasInfo: com.adobe.xmp.options.AliasOptions getAliasForm()>();

        $r32 = virtualinvoke $r31.<com.adobe.xmp.options.AliasOptions: com.adobe.xmp.options.PropertyOptions toPropertyOptions()>();

        specialinvoke $r43.<com.adobe.xmp.impl.XMPNode: void <init>(java.lang.String,com.adobe.xmp.options.PropertyOptions)>($r30, $r32);

        virtualinvoke $r13.<com.adobe.xmp.impl.XMPNode: void addChild(com.adobe.xmp.impl.XMPNode)>($r43);

        staticinvoke <com.adobe.xmp.impl.XMPNormalizer: void transplantArrayItemAlias(java.util.Iterator,com.adobe.xmp.impl.XMPNode,com.adobe.xmp.impl.XMPNode)>($r6, r8, $r43);

        goto label15;

     label07:
        $r21 = interfaceinvoke $r11.<com.adobe.xmp.properties.XMPAliasInfo: com.adobe.xmp.options.AliasOptions getAliasForm()>();

        $z4 = virtualinvoke $r21.<com.adobe.xmp.options.AliasOptions: boolean isSimple()>();

        if $z4 == 0 goto label09;

        if $z1 == 0 goto label08;

        staticinvoke <com.adobe.xmp.impl.XMPNormalizer: void compareAliasedSubtrees(com.adobe.xmp.impl.XMPNode,com.adobe.xmp.impl.XMPNode,boolean)>(r8, $r20, 1);

     label08:
        interfaceinvoke $r6.<java.util.Iterator: void remove()>();

        goto label15;

     label09:
        r39 = null;

        $r22 = interfaceinvoke $r11.<com.adobe.xmp.properties.XMPAliasInfo: com.adobe.xmp.options.AliasOptions getAliasForm()>();

        $z5 = virtualinvoke $r22.<com.adobe.xmp.options.AliasOptions: boolean isArrayAltText()>();

        if $z5 == 0 goto label11;

        $i0 = staticinvoke <com.adobe.xmp.impl.XMPNodeUtils: int lookupLanguageItem(com.adobe.xmp.impl.XMPNode,java.lang.String)>($r20, "x-default");

        $i2 = (int) -1;

        if $i0 == $i2 goto label10;

        r39 = virtualinvoke $r20.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.impl.XMPNode getChild(int)>($i0);

     label10:
        goto label12;

     label11:
        $z6 = virtualinvoke $r20.<com.adobe.xmp.impl.XMPNode: boolean hasChildren()>();

        if $z6 == 0 goto label12;

        r39 = virtualinvoke $r20.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.impl.XMPNode getChild(int)>(1);

     label12:
        if r39 != null goto label13;

        staticinvoke <com.adobe.xmp.impl.XMPNormalizer: void transplantArrayItemAlias(java.util.Iterator,com.adobe.xmp.impl.XMPNode,com.adobe.xmp.impl.XMPNode)>($r6, r8, $r20);

        goto label15;

     label13:
        if $z1 == 0 goto label14;

        staticinvoke <com.adobe.xmp.impl.XMPNormalizer: void compareAliasedSubtrees(com.adobe.xmp.impl.XMPNode,com.adobe.xmp.impl.XMPNode,boolean)>(r8, r39, 1);

     label14:
        interfaceinvoke $r6.<java.util.Iterator: void remove()>();

     label15:
        goto label04;

     label16:
        virtualinvoke r5.<com.adobe.xmp.impl.XMPNode: void setHasAliases(boolean)>(0);

        goto label02;

     label17:
        return;
    }

    private static void transplantArrayItemAlias(java.util.Iterator, com.adobe.xmp.impl.XMPNode, com.adobe.xmp.impl.XMPNode) throws com.adobe.xmp.XMPException
    {
        com.adobe.xmp.options.PropertyOptions $r1, $r4;
        java.util.Iterator r2;
        com.adobe.xmp.impl.XMPNode r0, r3, $r5;
        com.adobe.xmp.XMPException $r6;
        boolean $z0, $z1;

        r2 := @parameter0: java.util.Iterator;

        r3 := @parameter1: com.adobe.xmp.impl.XMPNode;

        r0 := @parameter2: com.adobe.xmp.impl.XMPNode;

        $r1 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions getOptions()>();

        $z0 = virtualinvoke $r1.<com.adobe.xmp.options.PropertyOptions: boolean isArrayAltText()>();

        if $z0 == 0 goto label2;

        $r4 = virtualinvoke r3.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions getOptions()>();

        $z1 = virtualinvoke $r4.<com.adobe.xmp.options.PropertyOptions: boolean getHasLanguage()>();

        if $z1 == 0 goto label1;

        $r6 = new com.adobe.xmp.XMPException;

        specialinvoke $r6.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Alias to x-default already has a language qualifier", 203);

        throw $r6;

     label1:
        $r5 = new com.adobe.xmp.impl.XMPNode;

        specialinvoke $r5.<com.adobe.xmp.impl.XMPNode: void <init>(java.lang.String,java.lang.String,com.adobe.xmp.options.PropertyOptions)>("xml:lang", "x-default", null);

        virtualinvoke r3.<com.adobe.xmp.impl.XMPNode: void addQualifier(com.adobe.xmp.impl.XMPNode)>($r5);

     label2:
        interfaceinvoke r2.<java.util.Iterator: void remove()>();

        virtualinvoke r3.<com.adobe.xmp.impl.XMPNode: void setName(java.lang.String)>("[]");

        virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: void addChild(com.adobe.xmp.impl.XMPNode)>(r3);

        return;
    }

    private static void fixGPSTimeStamp(com.adobe.xmp.impl.XMPNode) throws com.adobe.xmp.XMPException
    {
        com.adobe.xmp.XMPDateTime $r3, $r6;
        com.adobe.xmp.impl.XMPDateTimeImpl $r8;
        java.util.Calendar $r7;
        com.adobe.xmp.XMPException $r10;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.String $r2, $r5, $r9;
        com.adobe.xmp.impl.XMPNode r0, $r1, $r4, r11;

        r0 := @parameter0: com.adobe.xmp.impl.XMPNode;

        $r1 = staticinvoke <com.adobe.xmp.impl.XMPNodeUtils: com.adobe.xmp.impl.XMPNode findChildNode(com.adobe.xmp.impl.XMPNode,java.lang.String,boolean)>(r0, "exif:GPSTimeStamp", 0);

        if $r1 != null goto label1;

        return;

     label1:
        $r2 = virtualinvoke $r1.<com.adobe.xmp.impl.XMPNode: java.lang.String getValue()>();

        $r3 = staticinvoke <com.adobe.xmp.XMPUtils: com.adobe.xmp.XMPDateTime convertToDate(java.lang.String)>($r2);

        $i0 = interfaceinvoke $r3.<com.adobe.xmp.XMPDateTime: int getYear()>();

        if $i0 != 0 goto label2;

        $i1 = interfaceinvoke $r3.<com.adobe.xmp.XMPDateTime: int getMonth()>();

        if $i1 != 0 goto label2;

        $i2 = interfaceinvoke $r3.<com.adobe.xmp.XMPDateTime: int getDay()>();

        if $i2 == 0 goto label3;

     label2:
        return;

     label3:
        $r4 = staticinvoke <com.adobe.xmp.impl.XMPNodeUtils: com.adobe.xmp.impl.XMPNode findChildNode(com.adobe.xmp.impl.XMPNode,java.lang.String,boolean)>(r0, "exif:DateTimeOriginal", 0);

        r11 = $r4;

        if $r4 != null goto label4;

        r11 = staticinvoke <com.adobe.xmp.impl.XMPNodeUtils: com.adobe.xmp.impl.XMPNode findChildNode(com.adobe.xmp.impl.XMPNode,java.lang.String,boolean)>(r0, "exif:DateTimeDigitized", 0);

     label4:
        $r5 = virtualinvoke r11.<com.adobe.xmp.impl.XMPNode: java.lang.String getValue()>();

        $r6 = staticinvoke <com.adobe.xmp.XMPUtils: com.adobe.xmp.XMPDateTime convertToDate(java.lang.String)>($r5);

        $r7 = interfaceinvoke $r3.<com.adobe.xmp.XMPDateTime: java.util.Calendar getCalendar()>();

        $i3 = interfaceinvoke $r6.<com.adobe.xmp.XMPDateTime: int getYear()>();

        virtualinvoke $r7.<java.util.Calendar: void set(int,int)>(1, $i3);

        $i4 = interfaceinvoke $r6.<com.adobe.xmp.XMPDateTime: int getMonth()>();

        virtualinvoke $r7.<java.util.Calendar: void set(int,int)>(2, $i4);

        $i5 = interfaceinvoke $r6.<com.adobe.xmp.XMPDateTime: int getDay()>();

        virtualinvoke $r7.<java.util.Calendar: void set(int,int)>(5, $i5);

        $r8 = new com.adobe.xmp.impl.XMPDateTimeImpl;

        specialinvoke $r8.<com.adobe.xmp.impl.XMPDateTimeImpl: void <init>(java.util.Calendar)>($r7);

        $r9 = staticinvoke <com.adobe.xmp.XMPUtils: java.lang.String convertFromDate(com.adobe.xmp.XMPDateTime)>($r8);

        virtualinvoke $r1.<com.adobe.xmp.impl.XMPNode: void setValue(java.lang.String)>($r9);

     label5:
        goto label7;

     label6:
        $r10 := @caughtexception;

        return;

     label7:
        return;

        catch com.adobe.xmp.XMPException from label1 to label2 with label6;
        catch com.adobe.xmp.XMPException from label3 to label5 with label6;
    }

    private static void deleteEmptySchemas(com.adobe.xmp.impl.XMPNode)
    {
        com.adobe.xmp.impl.XMPNode r0, r3;
        java.util.Iterator $r1;
        java.lang.Object $r2;
        boolean $z0, $z1;

        r0 := @parameter0: com.adobe.xmp.impl.XMPNode;

        $r1 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: java.util.Iterator iterateChildren()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (com.adobe.xmp.impl.XMPNode) $r2;

        $z1 = virtualinvoke r3.<com.adobe.xmp.impl.XMPNode: boolean hasChildren()>();

        if $z1 != 0 goto label2;

        interfaceinvoke $r1.<java.util.Iterator: void remove()>();

     label2:
        goto label1;

     label3:
        return;
    }

    private static void compareAliasedSubtrees(com.adobe.xmp.impl.XMPNode, com.adobe.xmp.impl.XMPNode, boolean) throws com.adobe.xmp.XMPException
    {
        boolean $z0, z1, $z2, $z3, $z4, $z5, $z6, $z7;
        com.adobe.xmp.options.PropertyOptions $r15, $r16;
        com.adobe.xmp.XMPException $r4, $r17;
        int $i0, $i1, $i2, $i3;
        java.lang.String $r1, $r3, $r13, $r14;
        java.util.Iterator $r5, $r6, $r7, $r8;
        com.adobe.xmp.impl.XMPNode r0, r2, r18, r19, r20, r21;
        java.lang.Object $r9, $r10, $r11, $r12;

        r0 := @parameter0: com.adobe.xmp.impl.XMPNode;

        r2 := @parameter1: com.adobe.xmp.impl.XMPNode;

        z1 := @parameter2: boolean;

        $r1 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: java.lang.String getValue()>();

        $r3 = virtualinvoke r2.<com.adobe.xmp.impl.XMPNode: java.lang.String getValue()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label1;

        $i0 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: int getChildrenLength()>();

        $i1 = virtualinvoke r2.<com.adobe.xmp.impl.XMPNode: int getChildrenLength()>();

        if $i0 == $i1 goto label2;

     label1:
        $r4 = new com.adobe.xmp.XMPException;

        specialinvoke $r4.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Mismatch between alias and base nodes", 203);

        throw $r4;

     label2:
        if z1 != 0 goto label4;

        $r13 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: java.lang.String getName()>();

        $r14 = virtualinvoke r2.<com.adobe.xmp.impl.XMPNode: java.lang.String getName()>();

        $z4 = virtualinvoke $r13.<java.lang.String: boolean equals(java.lang.Object)>($r14);

        if $z4 == 0 goto label3;

        $r15 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions getOptions()>();

        $r16 = virtualinvoke r2.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions getOptions()>();

        $z5 = virtualinvoke $r15.<com.adobe.xmp.options.PropertyOptions: boolean equals(java.lang.Object)>($r16);

        if $z5 == 0 goto label3;

        $i2 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: int getQualifierLength()>();

        $i3 = virtualinvoke r2.<com.adobe.xmp.impl.XMPNode: int getQualifierLength()>();

        if $i2 == $i3 goto label4;

     label3:
        $r17 = new com.adobe.xmp.XMPException;

        specialinvoke $r17.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Mismatch between alias and base nodes", 203);

        throw $r17;

     label4:
        $r5 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: java.util.Iterator iterateChildren()>();

        $r6 = virtualinvoke r2.<com.adobe.xmp.impl.XMPNode: java.util.Iterator iterateChildren()>();

     label5:
        $z6 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z6 == 0 goto label6;

        $z3 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label6;

        $r11 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r18 = (com.adobe.xmp.impl.XMPNode) $r11;

        $r12 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r19 = (com.adobe.xmp.impl.XMPNode) $r12;

        staticinvoke <com.adobe.xmp.impl.XMPNormalizer: void compareAliasedSubtrees(com.adobe.xmp.impl.XMPNode,com.adobe.xmp.impl.XMPNode,boolean)>(r18, r19, 0);

        goto label5;

     label6:
        $r7 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: java.util.Iterator iterateQualifier()>();

        $r8 = virtualinvoke r2.<com.adobe.xmp.impl.XMPNode: java.util.Iterator iterateQualifier()>();

     label7:
        $z7 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z7 == 0 goto label8;

        $z2 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label8;

        $r9 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r20 = (com.adobe.xmp.impl.XMPNode) $r9;

        $r10 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        r21 = (com.adobe.xmp.impl.XMPNode) $r10;

        staticinvoke <com.adobe.xmp.impl.XMPNormalizer: void compareAliasedSubtrees(com.adobe.xmp.impl.XMPNode,com.adobe.xmp.impl.XMPNode,boolean)>(r20, r21, 0);

        goto label7;

     label8:
        return;
    }

    private static void migrateAudioCopyright(com.adobe.xmp.XMPMeta, com.adobe.xmp.impl.XMPNode)
    {
        boolean $z0, $z1, $z2;
        com.adobe.xmp.XMPMeta r0;
        java.lang.StringBuilder $r7, $r8, $r9, $r14, $r16, $r17, $r19, $r20, $r21, $r22;
        com.adobe.xmp.XMPException $r26;
        com.adobe.xmp.impl.XMPMetaImpl $r1;
        int $i0, $i1, $i2, $i3, i4;
        java.lang.String $r5, $r10, $r12, $r13, $r15, $r18, $r23, $r25;
        com.adobe.xmp.impl.XMPNode $r2, $r3, r4, $r6, $r11, $r24, $r27;

        r0 := @parameter0: com.adobe.xmp.XMPMeta;

        r4 := @parameter1: com.adobe.xmp.impl.XMPNode;

     label1:
        $r1 = (com.adobe.xmp.impl.XMPMetaImpl) r0;

        $r2 = virtualinvoke $r1.<com.adobe.xmp.impl.XMPMetaImpl: com.adobe.xmp.impl.XMPNode getRoot()>();

        $r3 = staticinvoke <com.adobe.xmp.impl.XMPNodeUtils: com.adobe.xmp.impl.XMPNode findSchemaNode(com.adobe.xmp.impl.XMPNode,java.lang.String,boolean)>($r2, "http://purl.org/dc/elements/1.1/", 1);

        $r5 = virtualinvoke r4.<com.adobe.xmp.impl.XMPNode: java.lang.String getValue()>();

        $r6 = staticinvoke <com.adobe.xmp.impl.XMPNodeUtils: com.adobe.xmp.impl.XMPNode findChildNode(com.adobe.xmp.impl.XMPNode,java.lang.String,boolean)>($r3, "dc:rights", 0);

        if $r6 == null goto label2;

        $z0 = virtualinvoke $r6.<com.adobe.xmp.impl.XMPNode: boolean hasChildren()>();

        if $z0 != 0 goto label3;

     label2:
        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n\n");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r0.<com.adobe.xmp.XMPMeta: void setLocalizedText(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,com.adobe.xmp.options.PropertyOptions)>("http://purl.org/dc/elements/1.1/", "rights", "", "x-default", $r10, null);

        goto label6;

     label3:
        $i0 = staticinvoke <com.adobe.xmp.impl.XMPNodeUtils: int lookupLanguageItem(com.adobe.xmp.impl.XMPNode,java.lang.String)>($r6, "x-default");

        i4 = $i0;

        if $i0 >= 0 goto label4;

        $r24 = virtualinvoke $r6.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.impl.XMPNode getChild(int)>(1);

        $r25 = virtualinvoke $r24.<com.adobe.xmp.impl.XMPNode: java.lang.String getValue()>();

        interfaceinvoke r0.<com.adobe.xmp.XMPMeta: void setLocalizedText(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,com.adobe.xmp.options.PropertyOptions)>("http://purl.org/dc/elements/1.1/", "rights", "", "x-default", $r25, null);

        i4 = staticinvoke <com.adobe.xmp.impl.XMPNodeUtils: int lookupLanguageItem(com.adobe.xmp.impl.XMPNode,java.lang.String)>($r6, "x-default");

     label4:
        $r11 = virtualinvoke $r6.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.impl.XMPNode getChild(int)>(i4);

        $r12 = virtualinvoke $r11.<com.adobe.xmp.impl.XMPNode: java.lang.String getValue()>();

        $i1 = virtualinvoke $r12.<java.lang.String: int indexOf(java.lang.String)>("\n\n");

        if $i1 >= 0 goto label5;

        $z2 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r12);

        if $z2 != 0 goto label6;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n\n");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r11.<com.adobe.xmp.impl.XMPNode: void setValue(java.lang.String)>($r23);

        goto label6;

     label5:
        $i2 = $i1 + 2;

        $r13 = virtualinvoke $r12.<java.lang.String: java.lang.String substring(int)>($i2);

        $z1 = virtualinvoke $r13.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z1 != 0 goto label6;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $i3 = $i1 + 2;

        $r15 = virtualinvoke $r12.<java.lang.String: java.lang.String substring(int,int)>(0, $i3);

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r11.<com.adobe.xmp.impl.XMPNode: void setValue(java.lang.String)>($r18);

     label6:
        $r27 = virtualinvoke r4.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.impl.XMPNode getParent()>();

        virtualinvoke $r27.<com.adobe.xmp.impl.XMPNode: void removeChild(com.adobe.xmp.impl.XMPNode)>(r4);

     label7:
        goto label9;

     label8:
        $r26 := @caughtexception;

     label9:
        return;

        catch com.adobe.xmp.XMPException from label1 to label7 with label8;
    }

    private static void initDCArrays()
    {
        com.adobe.xmp.options.PropertyOptions $r1, $r8, $r11;
        java.util.HashMap $r0;
        java.util.Map $r2, $r3, $r4, $r5, $r6, $r7, $r9, $r10, $r12, $r13, $r14;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        <com.adobe.xmp.impl.XMPNormalizer: java.util.Map dcArrayForms> = $r0;

        $r1 = new com.adobe.xmp.options.PropertyOptions;

        specialinvoke $r1.<com.adobe.xmp.options.PropertyOptions: void <init>()>();

        virtualinvoke $r1.<com.adobe.xmp.options.PropertyOptions: com.adobe.xmp.options.PropertyOptions setArray(boolean)>(1);

        $r2 = <com.adobe.xmp.impl.XMPNormalizer: java.util.Map dcArrayForms>;

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("dc:contributor", $r1);

        $r3 = <com.adobe.xmp.impl.XMPNormalizer: java.util.Map dcArrayForms>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("dc:language", $r1);

        $r4 = <com.adobe.xmp.impl.XMPNormalizer: java.util.Map dcArrayForms>;

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("dc:publisher", $r1);

        $r5 = <com.adobe.xmp.impl.XMPNormalizer: java.util.Map dcArrayForms>;

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("dc:relation", $r1);

        $r6 = <com.adobe.xmp.impl.XMPNormalizer: java.util.Map dcArrayForms>;

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("dc:subject", $r1);

        $r7 = <com.adobe.xmp.impl.XMPNormalizer: java.util.Map dcArrayForms>;

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("dc:type", $r1);

        $r8 = new com.adobe.xmp.options.PropertyOptions;

        specialinvoke $r8.<com.adobe.xmp.options.PropertyOptions: void <init>()>();

        virtualinvoke $r8.<com.adobe.xmp.options.PropertyOptions: com.adobe.xmp.options.PropertyOptions setArray(boolean)>(1);

        virtualinvoke $r8.<com.adobe.xmp.options.PropertyOptions: com.adobe.xmp.options.PropertyOptions setArrayOrdered(boolean)>(1);

        $r9 = <com.adobe.xmp.impl.XMPNormalizer: java.util.Map dcArrayForms>;

        interfaceinvoke $r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("dc:creator", $r8);

        $r10 = <com.adobe.xmp.impl.XMPNormalizer: java.util.Map dcArrayForms>;

        interfaceinvoke $r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("dc:date", $r8);

        $r11 = new com.adobe.xmp.options.PropertyOptions;

        specialinvoke $r11.<com.adobe.xmp.options.PropertyOptions: void <init>()>();

        virtualinvoke $r11.<com.adobe.xmp.options.PropertyOptions: com.adobe.xmp.options.PropertyOptions setArray(boolean)>(1);

        virtualinvoke $r11.<com.adobe.xmp.options.PropertyOptions: com.adobe.xmp.options.PropertyOptions setArrayOrdered(boolean)>(1);

        virtualinvoke $r11.<com.adobe.xmp.options.PropertyOptions: com.adobe.xmp.options.PropertyOptions setArrayAlternate(boolean)>(1);

        virtualinvoke $r11.<com.adobe.xmp.options.PropertyOptions: com.adobe.xmp.options.PropertyOptions setArrayAltText(boolean)>(1);

        $r12 = <com.adobe.xmp.impl.XMPNormalizer: java.util.Map dcArrayForms>;

        interfaceinvoke $r12.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("dc:description", $r11);

        $r13 = <com.adobe.xmp.impl.XMPNormalizer: java.util.Map dcArrayForms>;

        interfaceinvoke $r13.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("dc:rights", $r11);

        $r14 = <com.adobe.xmp.impl.XMPNormalizer: java.util.Map dcArrayForms>;

        interfaceinvoke $r14.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("dc:title", $r11);

        return;
    }

    static void <clinit>()
    {
        staticinvoke <com.adobe.xmp.impl.XMPNormalizer: void initDCArrays()>();

        return;
    }
}
