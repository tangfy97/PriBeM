public class org.bouncycastle.jce.provider.JDKKeyPairGenerator$DSA extends org.bouncycastle.jce.provider.JDKKeyPairGenerator
{
    org.bouncycastle.crypto.params.DSAKeyGenerationParameters param;
    org.bouncycastle.crypto.generators.DSAKeyPairGenerator engine;
    int strength;
    int certainty;
    java.security.SecureRandom random;
    boolean initialised;

    public void <init>()
    {
        java.security.SecureRandom $r2;
        org.bouncycastle.jce.provider.JDKKeyPairGenerator$DSA r0;
        org.bouncycastle.crypto.generators.DSAKeyPairGenerator $r1;

        r0 := @this: org.bouncycastle.jce.provider.JDKKeyPairGenerator$DSA;

        specialinvoke r0.<org.bouncycastle.jce.provider.JDKKeyPairGenerator: void <init>(java.lang.String)>("DSA");

        $r1 = new org.bouncycastle.crypto.generators.DSAKeyPairGenerator;

        specialinvoke $r1.<org.bouncycastle.crypto.generators.DSAKeyPairGenerator: void <init>()>();

        r0.<org.bouncycastle.jce.provider.JDKKeyPairGenerator$DSA: org.bouncycastle.crypto.generators.DSAKeyPairGenerator engine> = $r1;

        r0.<org.bouncycastle.jce.provider.JDKKeyPairGenerator$DSA: int strength> = 1024;

        r0.<org.bouncycastle.jce.provider.JDKKeyPairGenerator$DSA: int certainty> = 20;

        $r2 = new java.security.SecureRandom;

        specialinvoke $r2.<java.security.SecureRandom: void <init>()>();

        r0.<org.bouncycastle.jce.provider.JDKKeyPairGenerator$DSA: java.security.SecureRandom random> = $r2;

        r0.<org.bouncycastle.jce.provider.JDKKeyPairGenerator$DSA: boolean initialised> = 0;

        return;
    }

    public void initialize(int, java.security.SecureRandom)
    {
        java.security.SecureRandom r1;
        org.bouncycastle.jce.provider.JDKKeyPairGenerator$DSA r0;
        java.security.InvalidParameterException $r2;
        int i0, $i1;

        r0 := @this: org.bouncycastle.jce.provider.JDKKeyPairGenerator$DSA;

        i0 := @parameter0: int;

        r1 := @parameter1: java.security.SecureRandom;

        if i0 < 512 goto label1;

        if i0 > 1024 goto label1;

        $i1 = i0 % 64;

        if $i1 == 0 goto label2;

     label1:
        $r2 = new java.security.InvalidParameterException;

        specialinvoke $r2.<java.security.InvalidParameterException: void <init>(java.lang.String)>("strength must be from 512 - 1024 and a multiple of 64");

        throw $r2;

     label2:
        r0.<org.bouncycastle.jce.provider.JDKKeyPairGenerator$DSA: int strength> = i0;

        r0.<org.bouncycastle.jce.provider.JDKKeyPairGenerator$DSA: java.security.SecureRandom random> = r1;

        return;
    }

    public void initialize(java.security.spec.AlgorithmParameterSpec, java.security.SecureRandom) throws java.security.InvalidAlgorithmParameterException
    {
        org.bouncycastle.jce.provider.JDKKeyPairGenerator$DSA r2;
        org.bouncycastle.crypto.params.DSAParameters $r5;
        org.bouncycastle.crypto.generators.DSAKeyPairGenerator $r10;
        java.security.InvalidAlgorithmParameterException $r11;
        java.security.spec.DSAParameterSpec r1;
        java.security.SecureRandom r4;
        org.bouncycastle.crypto.params.DSAKeyGenerationParameters $r3, $r9;
        java.math.BigInteger $r6, $r7, $r8;
        java.security.spec.AlgorithmParameterSpec r0;
        boolean $z0;

        r2 := @this: org.bouncycastle.jce.provider.JDKKeyPairGenerator$DSA;

        r0 := @parameter0: java.security.spec.AlgorithmParameterSpec;

        r4 := @parameter1: java.security.SecureRandom;

        $z0 = r0 instanceof java.security.spec.DSAParameterSpec;

        if $z0 != 0 goto label1;

        $r11 = new java.security.InvalidAlgorithmParameterException;

        specialinvoke $r11.<java.security.InvalidAlgorithmParameterException: void <init>(java.lang.String)>("parameter object not a DSAParameterSpec");

        throw $r11;

     label1:
        r1 = (java.security.spec.DSAParameterSpec) r0;

        $r3 = new org.bouncycastle.crypto.params.DSAKeyGenerationParameters;

        $r5 = new org.bouncycastle.crypto.params.DSAParameters;

        $r6 = virtualinvoke r1.<java.security.spec.DSAParameterSpec: java.math.BigInteger getP()>();

        $r7 = virtualinvoke r1.<java.security.spec.DSAParameterSpec: java.math.BigInteger getQ()>();

        $r8 = virtualinvoke r1.<java.security.spec.DSAParameterSpec: java.math.BigInteger getG()>();

        specialinvoke $r5.<org.bouncycastle.crypto.params.DSAParameters: void <init>(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger)>($r6, $r7, $r8);

        specialinvoke $r3.<org.bouncycastle.crypto.params.DSAKeyGenerationParameters: void <init>(java.security.SecureRandom,org.bouncycastle.crypto.params.DSAParameters)>(r4, $r5);

        r2.<org.bouncycastle.jce.provider.JDKKeyPairGenerator$DSA: org.bouncycastle.crypto.params.DSAKeyGenerationParameters param> = $r3;

        $r10 = r2.<org.bouncycastle.jce.provider.JDKKeyPairGenerator$DSA: org.bouncycastle.crypto.generators.DSAKeyPairGenerator engine>;

        $r9 = r2.<org.bouncycastle.jce.provider.JDKKeyPairGenerator$DSA: org.bouncycastle.crypto.params.DSAKeyGenerationParameters param>;

        virtualinvoke $r10.<org.bouncycastle.crypto.generators.DSAKeyPairGenerator: void init(org.bouncycastle.crypto.KeyGenerationParameters)>($r9);

        r2.<org.bouncycastle.jce.provider.JDKKeyPairGenerator$DSA: boolean initialised> = 1;

        return;
    }

    public java.security.KeyPair generateKeyPair()
    {
        java.security.KeyPair $r5;
        org.bouncycastle.crypto.generators.DSAKeyPairGenerator $r1, $r14;
        org.bouncycastle.crypto.params.DSAPrivateKeyParameters $r16;
        java.security.SecureRandom $r9, $r11;
        org.bouncycastle.crypto.AsymmetricCipherKeyPair $r2;
        int $i0, $i1;
        boolean $z0;
        org.bouncycastle.crypto.CipherParameters $r3, $r4;
        org.bouncycastle.jce.provider.JDKDSAPrivateKey $r7;
        org.bouncycastle.jce.provider.JDKKeyPairGenerator$DSA r0;
        org.bouncycastle.crypto.params.DSAParameters $r12;
        org.bouncycastle.crypto.params.DSAPublicKeyParameters $r15;
        org.bouncycastle.jce.provider.JDKDSAPublicKey $r6;
        org.bouncycastle.crypto.generators.DSAParametersGenerator $r8;
        org.bouncycastle.crypto.params.DSAKeyGenerationParameters $r10, $r13;

        r0 := @this: org.bouncycastle.jce.provider.JDKKeyPairGenerator$DSA;

        $z0 = r0.<org.bouncycastle.jce.provider.JDKKeyPairGenerator$DSA: boolean initialised>;

        if $z0 != 0 goto label1;

        $r8 = new org.bouncycastle.crypto.generators.DSAParametersGenerator;

        specialinvoke $r8.<org.bouncycastle.crypto.generators.DSAParametersGenerator: void <init>()>();

        $i1 = r0.<org.bouncycastle.jce.provider.JDKKeyPairGenerator$DSA: int strength>;

        $i0 = r0.<org.bouncycastle.jce.provider.JDKKeyPairGenerator$DSA: int certainty>;

        $r9 = r0.<org.bouncycastle.jce.provider.JDKKeyPairGenerator$DSA: java.security.SecureRandom random>;

        virtualinvoke $r8.<org.bouncycastle.crypto.generators.DSAParametersGenerator: void init(int,int,java.security.SecureRandom)>($i1, $i0, $r9);

        $r10 = new org.bouncycastle.crypto.params.DSAKeyGenerationParameters;

        $r11 = r0.<org.bouncycastle.jce.provider.JDKKeyPairGenerator$DSA: java.security.SecureRandom random>;

        $r12 = virtualinvoke $r8.<org.bouncycastle.crypto.generators.DSAParametersGenerator: org.bouncycastle.crypto.params.DSAParameters generateParameters()>();

        specialinvoke $r10.<org.bouncycastle.crypto.params.DSAKeyGenerationParameters: void <init>(java.security.SecureRandom,org.bouncycastle.crypto.params.DSAParameters)>($r11, $r12);

        r0.<org.bouncycastle.jce.provider.JDKKeyPairGenerator$DSA: org.bouncycastle.crypto.params.DSAKeyGenerationParameters param> = $r10;

        $r14 = r0.<org.bouncycastle.jce.provider.JDKKeyPairGenerator$DSA: org.bouncycastle.crypto.generators.DSAKeyPairGenerator engine>;

        $r13 = r0.<org.bouncycastle.jce.provider.JDKKeyPairGenerator$DSA: org.bouncycastle.crypto.params.DSAKeyGenerationParameters param>;

        virtualinvoke $r14.<org.bouncycastle.crypto.generators.DSAKeyPairGenerator: void init(org.bouncycastle.crypto.KeyGenerationParameters)>($r13);

        r0.<org.bouncycastle.jce.provider.JDKKeyPairGenerator$DSA: boolean initialised> = 1;

     label1:
        $r1 = r0.<org.bouncycastle.jce.provider.JDKKeyPairGenerator$DSA: org.bouncycastle.crypto.generators.DSAKeyPairGenerator engine>;

        $r2 = virtualinvoke $r1.<org.bouncycastle.crypto.generators.DSAKeyPairGenerator: org.bouncycastle.crypto.AsymmetricCipherKeyPair generateKeyPair()>();

        $r3 = virtualinvoke $r2.<org.bouncycastle.crypto.AsymmetricCipherKeyPair: org.bouncycastle.crypto.CipherParameters getPublic()>();

        $r15 = (org.bouncycastle.crypto.params.DSAPublicKeyParameters) $r3;

        $r4 = virtualinvoke $r2.<org.bouncycastle.crypto.AsymmetricCipherKeyPair: org.bouncycastle.crypto.CipherParameters getPrivate()>();

        $r16 = (org.bouncycastle.crypto.params.DSAPrivateKeyParameters) $r4;

        $r5 = new java.security.KeyPair;

        $r6 = new org.bouncycastle.jce.provider.JDKDSAPublicKey;

        specialinvoke $r6.<org.bouncycastle.jce.provider.JDKDSAPublicKey: void <init>(org.bouncycastle.crypto.params.DSAPublicKeyParameters)>($r15);

        $r7 = new org.bouncycastle.jce.provider.JDKDSAPrivateKey;

        specialinvoke $r7.<org.bouncycastle.jce.provider.JDKDSAPrivateKey: void <init>(org.bouncycastle.crypto.params.DSAPrivateKeyParameters)>($r16);

        specialinvoke $r5.<java.security.KeyPair: void <init>(java.security.PublicKey,java.security.PrivateKey)>($r6, $r7);

        return $r5;
    }
}
