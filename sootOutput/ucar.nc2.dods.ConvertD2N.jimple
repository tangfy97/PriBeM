public class ucar.nc2.dods.ConvertD2N extends java.lang.Object
{
    private static org.slf4j.Logger logger;

    public void <init>()
    {
        ucar.nc2.dods.ConvertD2N r0;

        r0 := @this: ucar.nc2.dods.ConvertD2N;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public ucar.ma2.Array convertNestedVariable(ucar.nc2.Variable, java.util.List, ucar.nc2.dods.DodsV, boolean) throws java.io.IOException, opendap.dap.DAP2Exception
    {
        ucar.ma2.ArrayStructure r5, $r11;
        ucar.ma2.StructureMembers$Member $r8;
        java.util.ArrayList $r6;
        ucar.nc2.dods.ConvertD2N r0;
        ucar.nc2.Variable r1, r13;
        java.lang.String $r7, $r12;
        boolean z0, $z1, $z2;
        ucar.ma2.Array $r4, $r9;
        java.util.List r2;
        ucar.nc2.dods.DodsV r3;
        ucar.ma2.ArraySequenceNested r10;

        r0 := @this: ucar.nc2.dods.ConvertD2N;

        r1 := @parameter0: ucar.nc2.Variable;

        r2 := @parameter1: java.util.List;

        r3 := @parameter2: ucar.nc2.dods.DodsV;

        z0 := @parameter3: boolean;

        $r4 = virtualinvoke r0.<ucar.nc2.dods.ConvertD2N: ucar.ma2.Array convertTopVariable(ucar.nc2.Variable,java.util.List,ucar.nc2.dods.DodsV)>(r1, r2, r3);

        if z0 == 0 goto label4;

        r5 = (ucar.ma2.ArrayStructure) $r4;

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        r13 = r1;

     label1:
        $z1 = virtualinvoke r13.<ucar.nc2.Variable: boolean isMemberOfStructure()>();

        if $z1 == 0 goto label2;

        $r12 = virtualinvoke r13.<ucar.nc2.Variable: java.lang.String getShortName()>();

        interfaceinvoke $r6.<java.util.List: void add(int,java.lang.Object)>(0, $r12);

        r13 = virtualinvoke r13.<ucar.nc2.Variable: ucar.nc2.Structure getParentStructure()>();

        goto label1;

     label2:
        $r7 = virtualinvoke r1.<ucar.nc2.Variable: java.lang.String getShortName()>();

        $r8 = specialinvoke r0.<ucar.nc2.dods.ConvertD2N: ucar.ma2.StructureMembers$Member findNested(ucar.ma2.ArrayStructure,java.util.List,java.lang.String)>(r5, $r6, $r7);

        $r9 = virtualinvoke $r8.<ucar.ma2.StructureMembers$Member: ucar.ma2.Array getDataArray()>();

        $z2 = $r9 instanceof ucar.ma2.ArraySequenceNested;

        if $z2 == 0 goto label3;

        r10 = (ucar.ma2.ArraySequenceNested) $r9;

        $r11 = virtualinvoke r10.<ucar.ma2.ArraySequenceNested: ucar.ma2.ArrayStructure flatten()>();

        return $r11;

     label3:
        return $r9;

     label4:
        return $r4;
    }

    private ucar.ma2.StructureMembers$Member findNested(ucar.ma2.ArrayStructure, java.util.List, java.lang.String)
    {
        ucar.ma2.ArrayStructure r3, r8;
        ucar.ma2.Array $r7;
        ucar.ma2.StructureMembers$Member $r5, $r10;
        java.util.List r0;
        ucar.ma2.StructureMembers $r4;
        ucar.nc2.dods.ConvertD2N r9;
        java.lang.Object $r1;
        java.lang.String r2, r6;
        boolean $z0;

        r9 := @this: ucar.nc2.dods.ConvertD2N;

        r3 := @parameter0: ucar.ma2.ArrayStructure;

        r0 := @parameter1: java.util.List;

        r6 := @parameter2: java.lang.String;

        $r1 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(0);

        r2 = (java.lang.String) $r1;

        $r4 = virtualinvoke r3.<ucar.ma2.ArrayStructure: ucar.ma2.StructureMembers getStructureMembers()>();

        $r5 = virtualinvoke $r4.<ucar.ma2.StructureMembers: ucar.ma2.StructureMembers$Member findMember(java.lang.String)>(r2);

        $z0 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>(r6);

        if $z0 == 0 goto label1;

        return $r5;

     label1:
        $r7 = virtualinvoke $r5.<ucar.ma2.StructureMembers$Member: ucar.ma2.Array getDataArray()>();

        r8 = (ucar.ma2.ArrayStructure) $r7;

        interfaceinvoke r0.<java.util.List: java.lang.Object remove(int)>(0);

        $r10 = specialinvoke r9.<ucar.nc2.dods.ConvertD2N: ucar.ma2.StructureMembers$Member findNested(ucar.ma2.ArrayStructure,java.util.List,java.lang.String)>(r8, r0, r6);

        return $r10;
    }

    public ucar.ma2.Array convertTopVariable(ucar.nc2.Variable, java.util.List, ucar.nc2.dods.DodsV) throws java.io.IOException, opendap.dap.DAP2Exception
    {
        ucar.nc2.dods.ConvertD2N r0;
        ucar.nc2.Variable r5;
        java.lang.String $r18;
        boolean $z0, $z1;
        org.slf4j.Logger $r19;
        opendap.dap.DArray $r3, $r22;
        opendap.dap.BaseType $r4, $r9;
        ucar.ma2.DataType $r6, $r7, $r10, $r11, $r12, $r13, $r16;
        java.lang.IllegalArgumentException $r20;
        ucar.ma2.Array $r2, $r8, $r23, $r24;
        ucar.nc2.dods.DodsV r1;
        java.util.List r21;
        java.lang.StringBuilder $r14, $r15, $r17;

        r0 := @this: ucar.nc2.dods.ConvertD2N;

        r5 := @parameter0: ucar.nc2.Variable;

        r21 := @parameter1: java.util.List;

        r1 := @parameter2: ucar.nc2.dods.DodsV;

        $r2 = virtualinvoke r0.<ucar.nc2.dods.ConvertD2N: ucar.ma2.Array convert(ucar.nc2.dods.DodsV)>(r1);

        $r3 = r1.<ucar.nc2.dods.DodsV: opendap.dap.DArray darray>;

        if $r3 == null goto label3;

        $r9 = r1.<ucar.nc2.dods.DodsV: opendap.dap.BaseType bt>;

        $z1 = $r9 instanceof opendap.dap.DString;

        if $z1 == 0 goto label3;

        $r10 = virtualinvoke r5.<ucar.nc2.Variable: ucar.ma2.DataType getDataType()>();

        $r11 = <ucar.ma2.DataType: ucar.ma2.DataType STRING>;

        if $r10 != $r11 goto label1;

        $r24 = specialinvoke r0.<ucar.nc2.dods.ConvertD2N: ucar.ma2.Array convertStringArray(ucar.ma2.Array,ucar.nc2.Variable)>($r2, r5);

        return $r24;

     label1:
        $r12 = virtualinvoke r5.<ucar.nc2.Variable: ucar.ma2.DataType getDataType()>();

        $r13 = <ucar.ma2.DataType: ucar.ma2.DataType CHAR>;

        if $r12 != $r13 goto label2;

        $r22 = r1.<ucar.nc2.dods.DodsV: opendap.dap.DArray darray>;

        $r23 = specialinvoke r0.<ucar.nc2.dods.ConvertD2N: ucar.ma2.Array convertStringArrayToChar(opendap.dap.DArray,ucar.nc2.Variable,java.util.List)>($r22, r5, r21);

        return $r23;

     label2:
        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("DODSVariable convertArray String invalid dataType= ");

        $r16 = virtualinvoke r5.<ucar.nc2.Variable: ucar.ma2.DataType getDataType()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        $r19 = <ucar.nc2.dods.ConvertD2N: org.slf4j.Logger logger>;

        interfaceinvoke $r19.<org.slf4j.Logger: void error(java.lang.String)>($r18);

        $r20 = new java.lang.IllegalArgumentException;

        specialinvoke $r20.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r18);

        throw $r20;

     label3:
        $r4 = r1.<ucar.nc2.dods.DodsV: opendap.dap.BaseType bt>;

        $z0 = $r4 instanceof opendap.dap.DString;

        if $z0 == 0 goto label4;

        $r6 = virtualinvoke r5.<ucar.nc2.Variable: ucar.ma2.DataType getDataType()>();

        $r7 = <ucar.ma2.DataType: ucar.ma2.DataType CHAR>;

        if $r6 != $r7 goto label4;

        $r8 = specialinvoke r0.<ucar.nc2.dods.ConvertD2N: ucar.ma2.Array convertStringToChar(ucar.ma2.Array,ucar.nc2.Variable)>($r2, r5);

        return $r8;

     label4:
        return $r2;
    }

    public ucar.ma2.Array convert(ucar.nc2.dods.DodsV) throws java.io.IOException, opendap.dap.DAP2Exception
    {
        java.lang.IllegalStateException $r50, $r52;
        ucar.ma2.ArrayStructure $r29, $r41, $r46;
        ucar.nc2.dods.ConvertD2N r23;
        int[] $r25, $r37;
        boolean $z0, $z1, $z2, $z3, $z4;
        opendap.dap.BaseType $r5, $r15, $r16, $r20, $r32, $r33, $r34, $r35, $r40, $r42, $r47;
        ucar.ma2.DataType $r21, $r36;
        ucar.ma2.StructureMembers $r31, $r44, $r49;
        java.lang.StringBuilder $r4, $r8, $r9, $r11, $r51;
        opendap.dap.DConstructor $r53;
        opendap.dap.DSequence $r43;
        java.lang.String $r7, $r10, $r12;
        org.slf4j.Logger $r13;
        ucar.ma2.IndexIterator $r39;
        opendap.dap.DArray $r1, $r2, $r17, $r24, $r27, $r30;
        ucar.ma2.Array $r26, $r28, $r38;
        ucar.nc2.dods.DodsV r0;
        opendap.dap.DStructure $r48;
        java.lang.Class $r6, $r22;
        java.lang.Object $r19;
        opendap.dap.PrimitiveVector $r18;
        opendap.dap.DVector $r54;

        r23 := @this: ucar.nc2.dods.ConvertD2N;

        r0 := @parameter0: ucar.nc2.dods.DodsV;

        $r1 = r0.<ucar.nc2.dods.DodsV: opendap.dap.DArray darray>;

        if $r1 != null goto label4;

        $r32 = r0.<ucar.nc2.dods.DodsV: opendap.dap.BaseType bt>;

        $z2 = $r32 instanceof opendap.dap.DStructure;

        if $z2 == 0 goto label1;

        $r46 = specialinvoke r23.<ucar.nc2.dods.ConvertD2N: ucar.ma2.ArrayStructure makeArrayStructure(ucar.nc2.dods.DodsV)>(r0);

        $r47 = r0.<ucar.nc2.dods.DodsV: opendap.dap.BaseType bt>;

        $r48 = (opendap.dap.DStructure) $r47;

        $r49 = virtualinvoke $r46.<ucar.ma2.ArrayStructure: ucar.ma2.StructureMembers getStructureMembers()>();

        $r53 = (opendap.dap.DConstructor) $r48;

        specialinvoke r23.<ucar.nc2.dods.ConvertD2N: void iconvertDataStructure(opendap.dap.DConstructor,ucar.ma2.StructureMembers)>($r53, $r49);

        return $r46;

     label1:
        $r33 = r0.<ucar.nc2.dods.DodsV: opendap.dap.BaseType bt>;

        $z3 = $r33 instanceof opendap.dap.DGrid;

        if $z3 == 0 goto label2;

        $r50 = new java.lang.IllegalStateException;

        specialinvoke $r50.<java.lang.IllegalStateException: void <init>(java.lang.String)>("DGrid without a darray");

        throw $r50;

     label2:
        $r34 = r0.<ucar.nc2.dods.DodsV: opendap.dap.BaseType bt>;

        $z4 = $r34 instanceof opendap.dap.DSequence;

        if $z4 == 0 goto label3;

        $r41 = specialinvoke r23.<ucar.nc2.dods.ConvertD2N: ucar.ma2.ArrayStructure makeArrayStructure(ucar.nc2.dods.DodsV)>(r0);

        $r42 = r0.<ucar.nc2.dods.DodsV: opendap.dap.BaseType bt>;

        $r43 = (opendap.dap.DSequence) $r42;

        $r44 = virtualinvoke $r41.<ucar.ma2.ArrayStructure: ucar.ma2.StructureMembers getStructureMembers()>();

        specialinvoke r23.<ucar.nc2.dods.ConvertD2N: void iconvertDataSequenceArray(opendap.dap.DSequence,ucar.ma2.StructureMembers)>($r43, $r44);

        return $r41;

     label3:
        $r35 = r0.<ucar.nc2.dods.DodsV: opendap.dap.BaseType elemType>;

        $r36 = staticinvoke <ucar.nc2.dods.DODSNetcdfFile: ucar.ma2.DataType convertToNCType(opendap.dap.BaseType)>($r35);

        $r37 = newarray (int)[0];

        $r38 = staticinvoke <ucar.ma2.Array: ucar.ma2.Array factory(ucar.ma2.DataType,int[])>($r36, $r37);

        $r39 = virtualinvoke $r38.<ucar.ma2.Array: ucar.ma2.IndexIterator getIndexIterator()>();

        $r40 = r0.<ucar.nc2.dods.DodsV: opendap.dap.BaseType bt>;

        specialinvoke r23.<ucar.nc2.dods.ConvertD2N: void iconvertDataPrimitiveScalar(opendap.dap.BaseType,ucar.ma2.IndexIterator)>($r40, $r39);

        return $r38;

     label4:
        $r2 = r0.<ucar.nc2.dods.DodsV: opendap.dap.DArray darray>;

        if $r2 == null goto label7;

        $r15 = r0.<ucar.nc2.dods.DodsV: opendap.dap.BaseType bt>;

        $z0 = $r15 instanceof opendap.dap.DStructure;

        if $z0 == 0 goto label5;

        $r29 = specialinvoke r23.<ucar.nc2.dods.ConvertD2N: ucar.ma2.ArrayStructure makeArrayStructure(ucar.nc2.dods.DodsV)>(r0);

        $r30 = r0.<ucar.nc2.dods.DodsV: opendap.dap.DArray darray>;

        $r31 = virtualinvoke $r29.<ucar.ma2.ArrayStructure: ucar.ma2.StructureMembers getStructureMembers()>();

        $r54 = (opendap.dap.DVector) $r30;

        specialinvoke r23.<ucar.nc2.dods.ConvertD2N: void iconvertDataStructureArray(opendap.dap.DVector,ucar.ma2.StructureMembers)>($r54, $r31);

        return $r29;

     label5:
        $r16 = r0.<ucar.nc2.dods.DodsV: opendap.dap.BaseType bt>;

        $z1 = $r16 instanceof opendap.dap.DString;

        if $z1 == 0 goto label6;

        $r27 = r0.<ucar.nc2.dods.DodsV: opendap.dap.DArray darray>;

        $r28 = specialinvoke r23.<ucar.nc2.dods.ConvertD2N: ucar.ma2.Array convertStringArray(opendap.dap.DArray)>($r27);

        return $r28;

     label6:
        $r17 = r0.<ucar.nc2.dods.DodsV: opendap.dap.DArray darray>;

        $r18 = virtualinvoke $r17.<opendap.dap.DArray: opendap.dap.PrimitiveVector getPrimitiveVector()>();

        $r19 = virtualinvoke $r18.<opendap.dap.PrimitiveVector: java.lang.Object getInternalStorage()>();

        $r20 = r0.<ucar.nc2.dods.DodsV: opendap.dap.BaseType elemType>;

        $r21 = staticinvoke <ucar.nc2.dods.DODSNetcdfFile: ucar.ma2.DataType convertToNCType(opendap.dap.BaseType)>($r20);

        $r22 = virtualinvoke $r21.<ucar.ma2.DataType: java.lang.Class getPrimitiveClassType()>();

        $r24 = r0.<ucar.nc2.dods.DodsV: opendap.dap.DArray darray>;

        $r25 = specialinvoke r23.<ucar.nc2.dods.ConvertD2N: int[] makeShape(opendap.dap.DArray)>($r24);

        $r26 = staticinvoke <ucar.ma2.Array: ucar.ma2.Array factory(java.lang.Class,int[],java.lang.Object)>($r22, $r25, $r19);

        return $r26;

     label7:
        $r51 = new java.lang.StringBuilder;

        specialinvoke $r51.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown baseType ");

        $r5 = r0.<ucar.nc2.dods.DodsV: opendap.dap.BaseType bt>;

        $r6 = virtualinvoke $r5.<java.lang.Object: java.lang.Class getClass()>();

        $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.String getName()>();

        $r8 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" name=");

        $r10 = virtualinvoke r0.<ucar.nc2.dods.DodsV: java.lang.String getName()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        $r13 = <ucar.nc2.dods.ConvertD2N: org.slf4j.Logger logger>;

        interfaceinvoke $r13.<org.slf4j.Logger: void error(java.lang.String)>($r12);

        $r52 = new java.lang.IllegalStateException;

        specialinvoke $r52.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r12);

        throw $r52;
    }

    private ucar.ma2.ArrayStructure makeArrayStructure(ucar.nc2.dods.DodsV)
    {
        ucar.ma2.ArrayStructure $r19;
        ucar.ma2.StructureMembers$Member $r12;
        int[] $r6, $r11, $r18, $r20;
        ucar.nc2.dods.ConvertD2N r14;
        java.lang.String $r2, $r9;
        boolean $z0, $z1, $z2, $z3;
        ucar.ma2.ArrayStructureMA $r5;
        java.util.Iterator $r4;
        ucar.ma2.IndexIterator $r22;
        opendap.dap.BaseType $r13, $r15, $r16;
        ucar.ma2.DataType $r10, $r17;
        ucar.ma2.Array r21;
        ucar.nc2.dods.DodsV r1, r8;
        java.util.List $r3;
        ucar.ma2.StructureMembers $r0;
        java.lang.Object $r7;

        r14 := @this: ucar.nc2.dods.ConvertD2N;

        r1 := @parameter0: ucar.nc2.dods.DodsV;

        $r0 = new ucar.ma2.StructureMembers;

        $r2 = virtualinvoke r1.<ucar.nc2.dods.DodsV: java.lang.String getNetcdfShortName()>();

        specialinvoke $r0.<ucar.ma2.StructureMembers: void <init>(java.lang.String)>($r2);

        $r3 = r1.<ucar.nc2.dods.DodsV: java.util.List children>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r7 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r8 = (ucar.nc2.dods.DodsV) $r7;

        $r9 = virtualinvoke r8.<ucar.nc2.dods.DodsV: java.lang.String getNetcdfShortName()>();

        $r10 = virtualinvoke r8.<ucar.nc2.dods.DodsV: ucar.ma2.DataType getDataType()>();

        $r11 = virtualinvoke r8.<ucar.nc2.dods.DodsV: int[] getShape()>();

        $r12 = virtualinvoke $r0.<ucar.ma2.StructureMembers: ucar.ma2.StructureMembers$Member addMember(java.lang.String,java.lang.String,java.lang.String,ucar.ma2.DataType,int[])>($r9, null, null, $r10, $r11);

        $r13 = r8.<ucar.nc2.dods.DodsV: opendap.dap.BaseType bt>;

        $z1 = $r13 instanceof opendap.dap.DStructure;

        if $z1 != 0 goto label2;

        $r15 = r8.<ucar.nc2.dods.DodsV: opendap.dap.BaseType bt>;

        $z2 = $r15 instanceof opendap.dap.DGrid;

        if $z2 == 0 goto label3;

     label2:
        r21 = specialinvoke r14.<ucar.nc2.dods.ConvertD2N: ucar.ma2.ArrayStructure makeArrayStructure(ucar.nc2.dods.DodsV)>(r8);

        goto label5;

     label3:
        $r16 = r8.<ucar.nc2.dods.DodsV: opendap.dap.BaseType bt>;

        $z3 = $r16 instanceof opendap.dap.DSequence;

        if $z3 == 0 goto label4;

        $r19 = specialinvoke r14.<ucar.nc2.dods.ConvertD2N: ucar.ma2.ArrayStructure makeArrayNestedSequence(ucar.nc2.dods.DodsV)>(r8);

        r21 = $r19;

        $r20 = virtualinvoke $r19.<ucar.ma2.Array: int[] getShape()>();

        virtualinvoke $r12.<ucar.ma2.StructureMembers$Member: void setShape(int[])>($r20);

        goto label5;

     label4:
        $r17 = virtualinvoke r8.<ucar.nc2.dods.DodsV: ucar.ma2.DataType getDataType()>();

        $r18 = virtualinvoke r8.<ucar.nc2.dods.DodsV: int[] getShapeAll()>();

        r21 = staticinvoke <ucar.ma2.Array: ucar.ma2.Array factory(ucar.ma2.DataType,int[])>($r17, $r18);

     label5:
        virtualinvoke $r12.<ucar.ma2.StructureMembers$Member: void setDataArray(ucar.ma2.Array)>(r21);

        $r22 = virtualinvoke r21.<ucar.ma2.Array: ucar.ma2.IndexIterator getIndexIterator()>();

        virtualinvoke $r12.<ucar.ma2.StructureMembers$Member: void setDataObject(java.lang.Object)>($r22);

        goto label1;

     label6:
        $r5 = new ucar.ma2.ArrayStructureMA;

        $r6 = virtualinvoke r1.<ucar.nc2.dods.DodsV: int[] getShapeAll()>();

        specialinvoke $r5.<ucar.ma2.ArrayStructureMA: void <init>(ucar.ma2.StructureMembers,int[])>($r0, $r6);

        return $r5;
    }

    private ucar.ma2.ArrayStructure makeArrayNestedSequence(ucar.nc2.dods.DodsV)
    {
        ucar.ma2.StructureMembers$Member r26;
        java.util.Vector $r14;
        int[] $r21;
        ucar.nc2.dods.ConvertD2N r22;
        boolean $z0, $z1, $z2;
        opendap.dap.BaseType $r6, r25;
        ucar.ma2.DataType $r20;
        java.util.List $r3, $r9;
        ucar.ma2.StructureMembers $r0;
        opendap.dap.DSequence r17, r24;
        int $i0, $i1, $i2, i3, i4;
        java.lang.String $r2, $r8, $r16, $r19;
        java.util.Iterator $r4, $r10;
        ucar.ma2.IndexIterator $r13;
        ucar.ma2.Array $r12;
        ucar.nc2.dods.DodsV r1, $r5, r23;
        java.lang.Object $r11, $r15, $r18;
        ucar.ma2.ArraySequenceNested $r7;

        r22 := @this: ucar.nc2.dods.ConvertD2N;

        r1 := @parameter0: ucar.nc2.dods.DodsV;

        $r0 = new ucar.ma2.StructureMembers;

        $r2 = virtualinvoke r1.<ucar.nc2.dods.DodsV: java.lang.String getName()>();

        specialinvoke $r0.<ucar.ma2.StructureMembers: void <init>(java.lang.String)>($r2);

        $r3 = r1.<ucar.nc2.dods.DodsV: java.util.List children>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r18 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r23 = (ucar.nc2.dods.DodsV) $r18;

        $r19 = virtualinvoke r23.<ucar.nc2.dods.DodsV: java.lang.String getNetcdfShortName()>();

        $r20 = virtualinvoke r23.<ucar.nc2.dods.DodsV: ucar.ma2.DataType getDataType()>();

        $r21 = virtualinvoke r23.<ucar.nc2.dods.DodsV: int[] getShape()>();

        virtualinvoke $r0.<ucar.ma2.StructureMembers: ucar.ma2.StructureMembers$Member addMember(java.lang.String,java.lang.String,java.lang.String,ucar.ma2.DataType,int[])>($r19, null, null, $r20, $r21);

        goto label1;

     label2:
        $r5 = r1.<ucar.nc2.dods.DodsV: ucar.nc2.dods.DodsV parent>;

        $r6 = $r5.<ucar.nc2.dods.DodsV: opendap.dap.BaseType bt>;

        r24 = (opendap.dap.DSequence) $r6;

        $i0 = virtualinvoke r24.<opendap.dap.DSequence: int getRowCount()>();

        $r7 = new ucar.ma2.ArraySequenceNested;

        specialinvoke $r7.<ucar.ma2.ArraySequenceNested: void <init>(ucar.ma2.StructureMembers,int)>($r0, $i0);

        $r8 = virtualinvoke r1.<ucar.nc2.dods.DodsV: java.lang.String getName()>();

        i3 = 0;

     label3:
        if i3 >= $i0 goto label7;

        $r14 = virtualinvoke r24.<opendap.dap.DSequence: java.util.Vector getRow(int)>(i3);

        i4 = 0;

     label4:
        $i1 = virtualinvoke $r14.<java.util.Vector: int size()>();

        if i4 >= $i1 goto label6;

        $r15 = virtualinvoke $r14.<java.util.Vector: java.lang.Object elementAt(int)>(i4);

        r25 = (opendap.dap.BaseType) $r15;

        $r16 = virtualinvoke r25.<opendap.dap.BaseType: java.lang.String getName()>();

        $z2 = virtualinvoke $r16.<java.lang.String: boolean equals(java.lang.Object)>($r8);

        if $z2 == 0 goto label5;

        r17 = (opendap.dap.DSequence) r25;

        $i2 = virtualinvoke r17.<opendap.dap.DSequence: int getRowCount()>();

        virtualinvoke $r7.<ucar.ma2.ArraySequenceNested: void setSequenceLength(int,int)>(i3, $i2);

     label5:
        i4 = i4 + 1;

        goto label4;

     label6:
        i3 = i3 + 1;

        goto label3;

     label7:
        virtualinvoke $r7.<ucar.ma2.ArraySequenceNested: void finish()>();

        $r9 = virtualinvoke $r0.<ucar.ma2.StructureMembers: java.util.List getMembers()>();

        $r10 = interfaceinvoke $r9.<java.util.List: java.util.Iterator iterator()>();

     label8:
        $z1 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label9;

        $r11 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        r26 = (ucar.ma2.StructureMembers$Member) $r11;

        $r12 = virtualinvoke r26.<ucar.ma2.StructureMembers$Member: ucar.ma2.Array getDataArray()>();

        $r13 = virtualinvoke $r12.<ucar.ma2.Array: ucar.ma2.IndexIterator getIndexIterator()>();

        virtualinvoke r26.<ucar.ma2.StructureMembers$Member: void setDataObject(java.lang.Object)>($r13);

        goto label8;

     label9:
        return $r7;
    }

    private void iconvertDataStructureArray(opendap.dap.DVector, ucar.ma2.StructureMembers) throws opendap.dap.DAP2Exception
    {
        opendap.dap.BaseTypePrimitiveVector r10;
        ucar.ma2.StructureMembers$Member r4;
        ucar.nc2.dods.ConvertD2N r14;
        int $i0, i1;
        java.lang.String $r5;
        boolean $z0;
        java.util.Iterator $r2;
        ucar.ma2.IndexIterator r7;
        opendap.dap.BaseType $r11, $r13;
        java.util.List $r1;
        ucar.ma2.StructureMembers r0;
        opendap.dap.DStructure r12;
        java.lang.Object $r3, $r6;
        opendap.dap.PrimitiveVector $r9;
        opendap.dap.DVector r8;

        r14 := @this: ucar.nc2.dods.ConvertD2N;

        r8 := @parameter0: opendap.dap.DVector;

        r0 := @parameter1: ucar.ma2.StructureMembers;

        $r1 = virtualinvoke r0.<ucar.ma2.StructureMembers: java.util.List getMembers()>();

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (ucar.ma2.StructureMembers$Member) $r3;

        $r5 = virtualinvoke r4.<ucar.ma2.StructureMembers$Member: java.lang.String getName()>();

        $r6 = virtualinvoke r4.<ucar.ma2.StructureMembers$Member: java.lang.Object getDataObject()>();

        r7 = (ucar.ma2.IndexIterator) $r6;

        $r9 = virtualinvoke r8.<opendap.dap.DVector: opendap.dap.PrimitiveVector getPrimitiveVector()>();

        r10 = (opendap.dap.BaseTypePrimitiveVector) $r9;

        i1 = 0;

     label2:
        $i0 = virtualinvoke r10.<opendap.dap.BaseTypePrimitiveVector: int getLength()>();

        if i1 >= $i0 goto label3;

        $r11 = virtualinvoke r10.<opendap.dap.BaseTypePrimitiveVector: opendap.dap.BaseType getValue(int)>(i1);

        r12 = (opendap.dap.DStructure) $r11;

        $r13 = virtualinvoke r12.<opendap.dap.DStructure: opendap.dap.BaseType getVariable(java.lang.String)>($r5);

        specialinvoke r14.<ucar.nc2.dods.ConvertD2N: void iconvertData(opendap.dap.BaseType,ucar.ma2.IndexIterator)>($r13, r7);

        i1 = i1 + 1;

        goto label2;

     label3:
        goto label1;

     label4:
        return;
    }

    private void iconvertDataSequenceArray(opendap.dap.DSequence, ucar.ma2.StructureMembers) throws opendap.dap.DAP2Exception
    {
        ucar.ma2.IndexIterator r8;
        opendap.dap.BaseType r3;
        ucar.ma2.StructureMembers$Member $r6;
        opendap.dap.DSequence r0;
        java.util.Vector $r1;
        ucar.ma2.StructureMembers r4;
        ucar.nc2.dods.ConvertD2N r9;
        int $i0, $i1, i2, i3;
        java.lang.Object $r2, $r7;
        java.lang.String $r5;

        r9 := @this: ucar.nc2.dods.ConvertD2N;

        r0 := @parameter0: opendap.dap.DSequence;

        r4 := @parameter1: ucar.ma2.StructureMembers;

        i2 = 0;

     label1:
        $i0 = virtualinvoke r0.<opendap.dap.DSequence: int getRowCount()>();

        if i2 >= $i0 goto label4;

        $r1 = virtualinvoke r0.<opendap.dap.DSequence: java.util.Vector getRow(int)>(i2);

        i3 = 0;

     label2:
        $i1 = virtualinvoke $r1.<java.util.Vector: int size()>();

        if i3 >= $i1 goto label3;

        $r2 = virtualinvoke $r1.<java.util.Vector: java.lang.Object elementAt(int)>(i3);

        r3 = (opendap.dap.BaseType) $r2;

        $r5 = virtualinvoke r3.<opendap.dap.BaseType: java.lang.String getName()>();

        $r6 = virtualinvoke r4.<ucar.ma2.StructureMembers: ucar.ma2.StructureMembers$Member findMember(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<ucar.ma2.StructureMembers$Member: java.lang.Object getDataObject()>();

        r8 = (ucar.ma2.IndexIterator) $r7;

        specialinvoke r9.<ucar.nc2.dods.ConvertD2N: void iconvertData(opendap.dap.BaseType,ucar.ma2.IndexIterator)>(r3, r8);

        i3 = i3 + 1;

        goto label2;

     label3:
        i2 = i2 + 1;

        goto label1;

     label4:
        return;
    }

    private void iconvertDataStructure(opendap.dap.DConstructor, ucar.ma2.StructureMembers) throws opendap.dap.DAP2Exception
    {
        java.lang.Throwable $r18;
        ucar.ma2.StructureMembers$Member r4;
        opendap.dap.DConstructor r8;
        ucar.nc2.dods.ConvertD2N r10;
        java.lang.String $r7, $r15;
        opendap.dap.DAP2Exception $r17;
        boolean $z0;
        java.util.Iterator $r2;
        ucar.ma2.IndexIterator r6;
        opendap.dap.BaseType $r9;
        java.util.List $r1;
        ucar.ma2.StructureMembers r0;
        java.lang.Object $r3, $r5;
        java.lang.StringBuilder $r13, $r14, $r16;

        r10 := @this: ucar.nc2.dods.ConvertD2N;

        r8 := @parameter0: opendap.dap.DConstructor;

        r0 := @parameter1: ucar.ma2.StructureMembers;

        $r1 = virtualinvoke r0.<ucar.ma2.StructureMembers: java.util.List getMembers()>();

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (ucar.ma2.StructureMembers$Member) $r3;

        $r5 = virtualinvoke r4.<ucar.ma2.StructureMembers$Member: java.lang.Object getDataObject()>();

        r6 = (ucar.ma2.IndexIterator) $r5;

        $r7 = virtualinvoke r4.<ucar.ma2.StructureMembers$Member: java.lang.String getName()>();

        if $r7 != null goto label2;

        $r17 = new opendap.dap.DAP2Exception;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cant find dodsName for member variable ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r17.<opendap.dap.DAP2Exception: void <init>(java.lang.String)>($r15);

        $r18 = (java.lang.Throwable) $r17;

        throw $r18;

     label2:
        $r9 = virtualinvoke r8.<opendap.dap.DConstructor: opendap.dap.BaseType getVariable(java.lang.String)>($r7);

        specialinvoke r10.<ucar.nc2.dods.ConvertD2N: void iconvertData(opendap.dap.BaseType,ucar.ma2.IndexIterator)>($r9, r6);

        goto label1;

     label3:
        return;
    }

    private void iconvertData(opendap.dap.BaseType, ucar.ma2.IndexIterator) throws opendap.dap.DAP2Exception
    {
        opendap.dap.DConstructor $r13;
        ucar.ma2.StructureData r11, $r14, r18;
        opendap.dap.DSequence r17;
        ucar.nc2.dods.ConvertD2N r3;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.lang.UnsupportedOperationException $r8, $r9;
        ucar.ma2.IndexIterator r1;
        opendap.dap.BaseType r0, $r6;
        ucar.ma2.StructureMembers $r4, $r12, $r16;
        java.lang.Object $r2, $r10, $r15;
        opendap.dap.PrimitiveVector $r5, $r7;
        opendap.dap.DVector r19;

        r3 := @this: ucar.nc2.dods.ConvertD2N;

        r0 := @parameter0: opendap.dap.BaseType;

        r1 := @parameter1: ucar.ma2.IndexIterator;

        $z0 = r0 instanceof opendap.dap.DSequence;

        if $z0 == 0 goto label1;

        r17 = (opendap.dap.DSequence) r0;

        $r15 = interfaceinvoke r1.<ucar.ma2.IndexIterator: java.lang.Object getObjectNext()>();

        r18 = (ucar.ma2.StructureData) $r15;

        $r16 = virtualinvoke r18.<ucar.ma2.StructureData: ucar.ma2.StructureMembers getStructureMembers()>();

        specialinvoke r3.<ucar.nc2.dods.ConvertD2N: void iconvertDataSequenceArray(opendap.dap.DSequence,ucar.ma2.StructureMembers)>(r17, $r16);

        goto label9;

     label1:
        $z1 = r0 instanceof opendap.dap.DStructure;

        if $z1 != 0 goto label2;

        $z2 = r0 instanceof opendap.dap.DGrid;

        if $z2 == 0 goto label3;

     label2:
        $r13 = (opendap.dap.DConstructor) r0;

        $r2 = interfaceinvoke r1.<ucar.ma2.IndexIterator: java.lang.Object getObjectNext()>();

        $r14 = (ucar.ma2.StructureData) $r2;

        $r4 = virtualinvoke $r14.<ucar.ma2.StructureData: ucar.ma2.StructureMembers getStructureMembers()>();

        specialinvoke r3.<ucar.nc2.dods.ConvertD2N: void iconvertDataStructure(opendap.dap.DConstructor,ucar.ma2.StructureMembers)>($r13, $r4);

        goto label9;

     label3:
        $z3 = r0 instanceof opendap.dap.DVector;

        if $z3 == 0 goto label8;

        r19 = (opendap.dap.DVector) r0;

        $r5 = virtualinvoke r19.<opendap.dap.DVector: opendap.dap.PrimitiveVector getPrimitiveVector()>();

        $r6 = virtualinvoke $r5.<opendap.dap.PrimitiveVector: opendap.dap.BaseType getTemplate()>();

        $z4 = $r6 instanceof opendap.dap.DStructure;

        if $z4 == 0 goto label4;

        $r10 = interfaceinvoke r1.<ucar.ma2.IndexIterator: java.lang.Object getObjectNext()>();

        r11 = (ucar.ma2.StructureData) $r10;

        $r12 = virtualinvoke r11.<ucar.ma2.StructureData: ucar.ma2.StructureMembers getStructureMembers()>();

        specialinvoke r3.<ucar.nc2.dods.ConvertD2N: void iconvertDataStructureArray(opendap.dap.DVector,ucar.ma2.StructureMembers)>(r19, $r12);

        goto label7;

     label4:
        $z5 = $r6 instanceof opendap.dap.DGrid;

        if $z5 == 0 goto label5;

        $r9 = new java.lang.UnsupportedOperationException;

        specialinvoke $r9.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r9;

     label5:
        $z6 = $r6 instanceof opendap.dap.DSequence;

        if $z6 == 0 goto label6;

        $r8 = new java.lang.UnsupportedOperationException;

        specialinvoke $r8.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r8;

     label6:
        $r7 = virtualinvoke r19.<opendap.dap.DVector: opendap.dap.PrimitiveVector getPrimitiveVector()>();

        specialinvoke r3.<ucar.nc2.dods.ConvertD2N: void iconvertDataPrimitiveArray(opendap.dap.PrimitiveVector,ucar.ma2.IndexIterator)>($r7, r1);

     label7:
        goto label9;

     label8:
        specialinvoke r3.<ucar.nc2.dods.ConvertD2N: void iconvertDataPrimitiveScalar(opendap.dap.BaseType,ucar.ma2.IndexIterator)>(r0, r1);

     label9:
        return;
    }

    private void iconvertDataPrimitiveScalar(opendap.dap.BaseType, ucar.ma2.IndexIterator)
    {
        opendap.dap.DByte $r9;
        byte $b0;
        ucar.nc2.dods.ConvertD2N r18;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        opendap.dap.BaseType r0;
        opendap.dap.DInt32 $r11;
        opendap.dap.DFloat64 $r12;
        float $f0;
        java.lang.StringBuilder $r2, $r3, $r6;
        long $l6;
        opendap.dap.DFloat32 $r13;
        short $s1, $s3;
        int $i2, $i4, $i5;
        java.lang.String $r5, $r7, $r17;
        opendap.dap.DUInt16 $r14;
        double $d0;
        opendap.dap.DString $r16;
        opendap.dap.DUInt32 $r15;
        ucar.ma2.IndexIterator r8;
        java.lang.IllegalArgumentException $r1;
        opendap.dap.DInt16 $r10;
        java.lang.Class $r4;

        r18 := @this: ucar.nc2.dods.ConvertD2N;

        r0 := @parameter0: opendap.dap.BaseType;

        r8 := @parameter1: ucar.ma2.IndexIterator;

        $z0 = r0 instanceof opendap.dap.DString;

        if $z0 == 0 goto label1;

        $r16 = (opendap.dap.DString) r0;

        $r17 = virtualinvoke $r16.<opendap.dap.DString: java.lang.String getValue()>();

        interfaceinvoke r8.<ucar.ma2.IndexIterator: void setObjectNext(java.lang.Object)>($r17);

        goto label9;

     label1:
        $z1 = r0 instanceof opendap.dap.DUInt32;

        if $z1 == 0 goto label2;

        $r15 = (opendap.dap.DUInt32) r0;

        $i5 = virtualinvoke $r15.<opendap.dap.DUInt32: int getValue()>();

        $l6 = staticinvoke <ucar.ma2.DataType: long unsignedIntToLong(int)>($i5);

        interfaceinvoke r8.<ucar.ma2.IndexIterator: void setLongNext(long)>($l6);

        goto label9;

     label2:
        $z2 = r0 instanceof opendap.dap.DUInt16;

        if $z2 == 0 goto label3;

        $r14 = (opendap.dap.DUInt16) r0;

        $s3 = virtualinvoke $r14.<opendap.dap.DUInt16: short getValue()>();

        $i4 = staticinvoke <ucar.ma2.DataType: int unsignedShortToInt(short)>($s3);

        interfaceinvoke r8.<ucar.ma2.IndexIterator: void setIntNext(int)>($i4);

        goto label9;

     label3:
        $z3 = r0 instanceof opendap.dap.DFloat32;

        if $z3 == 0 goto label4;

        $r13 = (opendap.dap.DFloat32) r0;

        $f0 = virtualinvoke $r13.<opendap.dap.DFloat32: float getValue()>();

        interfaceinvoke r8.<ucar.ma2.IndexIterator: void setFloatNext(float)>($f0);

        goto label9;

     label4:
        $z4 = r0 instanceof opendap.dap.DFloat64;

        if $z4 == 0 goto label5;

        $r12 = (opendap.dap.DFloat64) r0;

        $d0 = virtualinvoke $r12.<opendap.dap.DFloat64: double getValue()>();

        interfaceinvoke r8.<ucar.ma2.IndexIterator: void setDoubleNext(double)>($d0);

        goto label9;

     label5:
        $z5 = r0 instanceof opendap.dap.DInt32;

        if $z5 == 0 goto label6;

        $r11 = (opendap.dap.DInt32) r0;

        $i2 = virtualinvoke $r11.<opendap.dap.DInt32: int getValue()>();

        interfaceinvoke r8.<ucar.ma2.IndexIterator: void setIntNext(int)>($i2);

        goto label9;

     label6:
        $z6 = r0 instanceof opendap.dap.DInt16;

        if $z6 == 0 goto label7;

        $r10 = (opendap.dap.DInt16) r0;

        $s1 = virtualinvoke $r10.<opendap.dap.DInt16: short getValue()>();

        interfaceinvoke r8.<ucar.ma2.IndexIterator: void setShortNext(short)>($s1);

        goto label9;

     label7:
        $z7 = r0 instanceof opendap.dap.DByte;

        if $z7 == 0 goto label8;

        $r9 = (opendap.dap.DByte) r0;

        $b0 = virtualinvoke $r9.<opendap.dap.DByte: byte getValue()>();

        interfaceinvoke r8.<ucar.ma2.IndexIterator: void setByteNext(byte)>($b0);

        goto label9;

     label8:
        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("DODSVariable extractScalar invalid dataType= ");

        $r4 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.String getName()>();

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r1;

     label9:
        return;
    }

    private void iconvertDataPrimitiveArray(opendap.dap.PrimitiveVector, ucar.ma2.IndexIterator)
    {
        opendap.dap.Int16PrimitiveVector r20;
        opendap.dap.UInt16PrimitiveVector r16;
        opendap.dap.UInt32PrimitiveVector r15;
        byte $b1;
        ucar.nc2.dods.ConvertD2N r12;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        opendap.dap.BaseType $r1, $r10;
        opendap.dap.BytePrimitiveVector r21;
        float $f0;
        java.lang.StringBuilder $r3, $r4, $r7;
        opendap.dap.BaseTypePrimitiveVector r13;
        long $l13;
        short $s3, $s9;
        opendap.dap.Float32PrimitiveVector r17;
        int $i0, $i2, $i4, $i5, $i6, $i7, $i8, $i10, $i11, $i12, $i14, i15, i16, i17, i18, i19, i20, i21, i22;
        java.lang.String $r6, $r8, $r11;
        double $d0;
        opendap.dap.DString r14;
        ucar.ma2.IndexIterator r9;
        java.lang.IllegalArgumentException $r2;
        opendap.dap.Float64PrimitiveVector r18;
        java.lang.Class $r5;
        opendap.dap.PrimitiveVector r0;
        opendap.dap.Int32PrimitiveVector r19;

        r12 := @this: ucar.nc2.dods.ConvertD2N;

        r0 := @parameter0: opendap.dap.PrimitiveVector;

        r9 := @parameter1: ucar.ma2.IndexIterator;

        $r1 = virtualinvoke r0.<opendap.dap.PrimitiveVector: opendap.dap.BaseType getTemplate()>();

        $z0 = $r1 instanceof opendap.dap.DString;

        if $z0 == 0 goto label03;

        r13 = (opendap.dap.BaseTypePrimitiveVector) r0;

        i15 = 0;

     label01:
        $i14 = virtualinvoke r13.<opendap.dap.BaseTypePrimitiveVector: int getLength()>();

        if i15 >= $i14 goto label02;

        $r10 = virtualinvoke r13.<opendap.dap.BaseTypePrimitiveVector: opendap.dap.BaseType getValue(int)>(i15);

        r14 = (opendap.dap.DString) $r10;

        $r11 = virtualinvoke r14.<opendap.dap.DString: java.lang.String getValue()>();

        interfaceinvoke r9.<ucar.ma2.IndexIterator: void setObjectNext(java.lang.Object)>($r11);

        i15 = i15 + 1;

        goto label01;

     label02:
        goto label25;

     label03:
        $z1 = $r1 instanceof opendap.dap.DUInt32;

        if $z1 == 0 goto label06;

        r15 = (opendap.dap.UInt32PrimitiveVector) r0;

        i16 = 0;

     label04:
        $i11 = virtualinvoke r15.<opendap.dap.UInt32PrimitiveVector: int getLength()>();

        if i16 >= $i11 goto label05;

        $i12 = virtualinvoke r15.<opendap.dap.UInt32PrimitiveVector: int getValue(int)>(i16);

        $l13 = staticinvoke <ucar.ma2.DataType: long unsignedIntToLong(int)>($i12);

        interfaceinvoke r9.<ucar.ma2.IndexIterator: void setLongNext(long)>($l13);

        i16 = i16 + 1;

        goto label04;

     label05:
        goto label25;

     label06:
        $z2 = $r1 instanceof opendap.dap.DUInt16;

        if $z2 == 0 goto label09;

        r16 = (opendap.dap.UInt16PrimitiveVector) r0;

        i17 = 0;

     label07:
        $i8 = virtualinvoke r16.<opendap.dap.UInt16PrimitiveVector: int getLength()>();

        if i17 >= $i8 goto label08;

        $s9 = virtualinvoke r16.<opendap.dap.UInt16PrimitiveVector: short getValue(int)>(i17);

        $i10 = staticinvoke <ucar.ma2.DataType: int unsignedShortToInt(short)>($s9);

        interfaceinvoke r9.<ucar.ma2.IndexIterator: void setIntNext(int)>($i10);

        i17 = i17 + 1;

        goto label07;

     label08:
        goto label25;

     label09:
        $z3 = $r1 instanceof opendap.dap.DFloat32;

        if $z3 == 0 goto label12;

        r17 = (opendap.dap.Float32PrimitiveVector) r0;

        i18 = 0;

     label10:
        $i7 = virtualinvoke r17.<opendap.dap.Float32PrimitiveVector: int getLength()>();

        if i18 >= $i7 goto label11;

        $f0 = virtualinvoke r17.<opendap.dap.Float32PrimitiveVector: float getValue(int)>(i18);

        interfaceinvoke r9.<ucar.ma2.IndexIterator: void setFloatNext(float)>($f0);

        i18 = i18 + 1;

        goto label10;

     label11:
        goto label25;

     label12:
        $z4 = $r1 instanceof opendap.dap.DFloat64;

        if $z4 == 0 goto label15;

        r18 = (opendap.dap.Float64PrimitiveVector) r0;

        i19 = 0;

     label13:
        $i6 = virtualinvoke r18.<opendap.dap.Float64PrimitiveVector: int getLength()>();

        if i19 >= $i6 goto label14;

        $d0 = virtualinvoke r18.<opendap.dap.Float64PrimitiveVector: double getValue(int)>(i19);

        interfaceinvoke r9.<ucar.ma2.IndexIterator: void setDoubleNext(double)>($d0);

        i19 = i19 + 1;

        goto label13;

     label14:
        goto label25;

     label15:
        $z5 = $r1 instanceof opendap.dap.DInt32;

        if $z5 == 0 goto label18;

        r19 = (opendap.dap.Int32PrimitiveVector) r0;

        i20 = 0;

     label16:
        $i4 = virtualinvoke r19.<opendap.dap.Int32PrimitiveVector: int getLength()>();

        if i20 >= $i4 goto label17;

        $i5 = virtualinvoke r19.<opendap.dap.Int32PrimitiveVector: int getValue(int)>(i20);

        interfaceinvoke r9.<ucar.ma2.IndexIterator: void setIntNext(int)>($i5);

        i20 = i20 + 1;

        goto label16;

     label17:
        goto label25;

     label18:
        $z6 = $r1 instanceof opendap.dap.DInt16;

        if $z6 == 0 goto label21;

        r20 = (opendap.dap.Int16PrimitiveVector) r0;

        i21 = 0;

     label19:
        $i2 = virtualinvoke r20.<opendap.dap.Int16PrimitiveVector: int getLength()>();

        if i21 >= $i2 goto label20;

        $s3 = virtualinvoke r20.<opendap.dap.Int16PrimitiveVector: short getValue(int)>(i21);

        interfaceinvoke r9.<ucar.ma2.IndexIterator: void setShortNext(short)>($s3);

        i21 = i21 + 1;

        goto label19;

     label20:
        goto label25;

     label21:
        $z7 = $r1 instanceof opendap.dap.DByte;

        if $z7 == 0 goto label24;

        r21 = (opendap.dap.BytePrimitiveVector) r0;

        i22 = 0;

     label22:
        $i0 = virtualinvoke r21.<opendap.dap.BytePrimitiveVector: int getLength()>();

        if i22 >= $i0 goto label23;

        $b1 = virtualinvoke r21.<opendap.dap.BytePrimitiveVector: byte getValue(int)>(i22);

        interfaceinvoke r9.<ucar.ma2.IndexIterator: void setByteNext(byte)>($b1);

        i22 = i22 + 1;

        goto label22;

     label23:
        goto label25;

     label24:
        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("DODSVariable extractScalar invalid dataType= ");

        $r5 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>();

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r2;

     label25:
        return;
    }

    private ucar.ma2.Array convertStringArray(opendap.dap.DArray)
    {
        opendap.dap.DString r10;
        opendap.dap.BaseTypePrimitiveVector r2;
        opendap.dap.DArray r0;
        opendap.dap.BaseType $r9;
        ucar.ma2.DataType $r4;
        java.lang.String[] r3;
        ucar.ma2.Array $r8;
        ucar.nc2.dods.ConvertD2N r6;
        int[] $r7;
        int $i0, i1;
        java.lang.Class $r5;
        java.lang.String $r11;
        opendap.dap.PrimitiveVector $r1;

        r6 := @this: ucar.nc2.dods.ConvertD2N;

        r0 := @parameter0: opendap.dap.DArray;

        $r1 = virtualinvoke r0.<opendap.dap.DArray: opendap.dap.PrimitiveVector getPrimitiveVector()>();

        r2 = (opendap.dap.BaseTypePrimitiveVector) $r1;

        $i0 = virtualinvoke r2.<opendap.dap.BaseTypePrimitiveVector: int getLength()>();

        r3 = newarray (java.lang.String)[$i0];

        i1 = 0;

     label1:
        if i1 >= $i0 goto label2;

        $r9 = virtualinvoke r2.<opendap.dap.BaseTypePrimitiveVector: opendap.dap.BaseType getValue(int)>(i1);

        r10 = (opendap.dap.DString) $r9;

        $r11 = virtualinvoke r10.<opendap.dap.DString: java.lang.String getValue()>();

        r3[i1] = $r11;

        i1 = i1 + 1;

        goto label1;

     label2:
        $r4 = <ucar.ma2.DataType: ucar.ma2.DataType STRING>;

        $r5 = virtualinvoke $r4.<ucar.ma2.DataType: java.lang.Class getPrimitiveClassType()>();

        $r7 = specialinvoke r6.<ucar.nc2.dods.ConvertD2N: int[] makeShape(opendap.dap.DArray)>(r0);

        $r8 = staticinvoke <ucar.ma2.Array: ucar.ma2.Array factory(java.lang.Class,int[],java.lang.Object)>($r5, $r7, r3);

        return $r8;
    }

    private ucar.ma2.Array convertStringArray(ucar.ma2.Array, ucar.nc2.Variable)
    {
        java.lang.String[] $r2, r3;
        long $l0;
        int[] $r8;
        ucar.nc2.dods.ConvertD2N r11;
        int i1, $i2, $i3, $i5, i6, i7, i8, i9, i10, i11;
        ucar.nc2.Variable r4;
        java.lang.String r10, r12;
        ucar.ma2.DataType $r5, $r6;
        char $c4;
        ucar.ma2.Array r0, $r9;
        char[] r13;
        java.lang.Object $r1;
        java.lang.Class $r7;

        r11 := @this: ucar.nc2.dods.ConvertD2N;

        r0 := @parameter0: ucar.ma2.Array;

        r4 := @parameter1: ucar.nc2.Variable;

        $r1 = virtualinvoke r0.<ucar.ma2.Array: java.lang.Object getStorage()>();

        $r2 = (java.lang.String[]) $r1;

        r3 = (java.lang.String[]) $r2;

        i6 = 0;

        i7 = lengthof r3;

        i8 = 0;

     label1:
        if i8 >= i7 goto label2;

        r12 = r3[i8];

        $i5 = virtualinvoke r12.<java.lang.String: int length()>();

        i6 = staticinvoke <java.lang.Math: int max(int,int)>(i6, $i5);

        i8 = i8 + 1;

        goto label1;

     label2:
        if i6 <= 1 goto label3;

        return r0;

     label3:
        i9 = 0;

        $l0 = virtualinvoke r0.<ucar.ma2.Array: long getSize()>();

        i10 = (int) $l0;

        r13 = newarray (char)[i10];

        i1 = lengthof r3;

        i11 = 0;

     label4:
        if i11 >= i1 goto label6;

        r10 = r3[i11];

        $i2 = virtualinvoke r10.<java.lang.String: int length()>();

        if $i2 <= 0 goto label5;

        $i3 = i9;

        i9 = i9 + 1;

        $c4 = virtualinvoke r10.<java.lang.String: char charAt(int)>(0);

        r13[$i3] = $c4;

     label5:
        i11 = i11 + 1;

        goto label4;

     label6:
        $r5 = <ucar.ma2.DataType: ucar.ma2.DataType CHAR>;

        virtualinvoke r4.<ucar.nc2.Variable: void setDataType(ucar.ma2.DataType)>($r5);

        $r6 = <ucar.ma2.DataType: ucar.ma2.DataType CHAR>;

        $r7 = virtualinvoke $r6.<ucar.ma2.DataType: java.lang.Class getPrimitiveClassType()>();

        $r8 = virtualinvoke r0.<ucar.ma2.Array: int[] getShape()>();

        $r9 = staticinvoke <ucar.ma2.Array: ucar.ma2.Array factory(java.lang.Class,int[],java.lang.Object)>($r7, $r8, r13);

        return $r9;
    }

    private ucar.ma2.Array convertStringArrayToChar(opendap.dap.DArray, ucar.nc2.Variable, java.util.List)
    {
        int[] $r3, $r5;
        ucar.nc2.dods.ConvertD2N r19;
        opendap.dap.BaseType $r9, $r15, $r17;
        ucar.ma2.DataType $r6, $r12;
        java.util.List r20;
        opendap.dap.BaseTypePrimitiveVector r2;
        long $l1;
        int $i0, $i2, $i3, $i4, $i5, $i6, $i8, $i9, $i10, $i11, i12, i13, i14, i16, i17, i18, i19;
        ucar.nc2.Variable r4;
        java.lang.String $r11, $r16, $r18;
        opendap.dap.DString r10, r21, r23;
        opendap.dap.DArray r0;
        char $c7, $c15;
        ucar.ma2.Array $r8, $r14;
        char[] r22, r24;
        java.lang.Class $r7, $r13;
        opendap.dap.PrimitiveVector $r1;

        r19 := @this: ucar.nc2.dods.ConvertD2N;

        r0 := @parameter0: opendap.dap.DArray;

        r4 := @parameter1: ucar.nc2.Variable;

        r20 := @parameter2: java.util.List;

        $r1 = virtualinvoke r0.<opendap.dap.DArray: opendap.dap.PrimitiveVector getPrimitiveVector()>();

        r2 = (opendap.dap.BaseTypePrimitiveVector) $r1;

        $i0 = virtualinvoke r2.<opendap.dap.BaseTypePrimitiveVector: int getLength()>();

        if r20 != null goto label01;

        r20 = virtualinvoke r4.<ucar.nc2.Variable: java.util.List getRanges()>();

     label01:
        $r3 = staticinvoke <ucar.ma2.Range: int[] getShape(java.util.List)>(r20);

        $l1 = staticinvoke <ucar.ma2.Index: long computeSize(int[])>($r3);

        $i11 = (int) $l1;

        i12 = 0;

        i13 = 0;

     label02:
        if i13 >= $i0 goto label03;

        $r17 = virtualinvoke r2.<opendap.dap.BaseTypePrimitiveVector: opendap.dap.BaseType getValue(int)>(i13);

        r21 = (opendap.dap.DString) $r17;

        $r18 = virtualinvoke r21.<opendap.dap.DString: java.lang.String getValue()>();

        $i10 = virtualinvoke $r18.<java.lang.String: int length()>();

        i12 = staticinvoke <java.lang.Math: int max(int,int)>(i12, $i10);

        i13 = i13 + 1;

        goto label02;

     label03:
        if i12 != 1 goto label08;

        r22 = newarray (char)[$i11];

        i14 = 0;

     label04:
        if i14 >= $i0 goto label07;

        $r15 = virtualinvoke r2.<opendap.dap.BaseTypePrimitiveVector: opendap.dap.BaseType getValue(int)>(i14);

        r23 = (opendap.dap.DString) $r15;

        $r16 = virtualinvoke r23.<opendap.dap.DString: java.lang.String getValue()>();

        $i9 = i14;

        $i8 = virtualinvoke $r16.<java.lang.String: int length()>();

        if $i8 <= 0 goto label05;

        $c15 = virtualinvoke $r16.<java.lang.String: char charAt(int)>(0);

        goto label06;

     label05:
        $c15 = 0;

     label06:
        r22[$i9] = $c15;

        i14 = i14 + 1;

        goto label04;

     label07:
        $r12 = <ucar.ma2.DataType: ucar.ma2.DataType CHAR>;

        $r13 = virtualinvoke $r12.<ucar.ma2.DataType: java.lang.Class getPrimitiveClassType()>();

        $r14 = staticinvoke <ucar.ma2.Array: ucar.ma2.Array factory(java.lang.Class,int[],java.lang.Object)>($r13, $r3, r22);

        return $r14;

     label08:
        $r5 = virtualinvoke r4.<ucar.nc2.Variable: int[] getShape()>();

        $i2 = virtualinvoke r4.<ucar.nc2.Variable: int getRank()>();

        $i3 = $i2 - 1;

        i16 = $r5[$i3];

        r24 = newarray (char)[$i11];

        i17 = 0;

        i18 = 0;

     label09:
        if i18 >= $i0 goto label12;

        $r9 = virtualinvoke r2.<opendap.dap.BaseTypePrimitiveVector: opendap.dap.BaseType getValue(int)>(i18);

        r10 = (opendap.dap.DString) $r9;

        $r11 = virtualinvoke r10.<opendap.dap.DString: java.lang.String getValue()>();

        $i4 = virtualinvoke $r11.<java.lang.String: int length()>();

        $i5 = staticinvoke <java.lang.Math: int min(int,int)>($i4, i16);

        i19 = 0;

     label10:
        if i19 >= $i5 goto label11;

        $i6 = i17 + i19;

        $c7 = virtualinvoke $r11.<java.lang.String: char charAt(int)>(i19);

        r24[$i6] = $c7;

        i19 = i19 + 1;

        goto label10;

     label11:
        i17 = i17 + i16;

        i18 = i18 + 1;

        goto label09;

     label12:
        $r6 = <ucar.ma2.DataType: ucar.ma2.DataType CHAR>;

        $r7 = virtualinvoke $r6.<ucar.ma2.DataType: java.lang.Class getPrimitiveClassType()>();

        $r8 = staticinvoke <ucar.ma2.Array: ucar.ma2.Array factory(java.lang.Class,int[],java.lang.Object)>($r7, $r3, r24);

        return $r8;
    }

    private ucar.ma2.Array convertStringToChar(ucar.ma2.Array, ucar.nc2.Variable)
    {
        long $l0;
        int[] $r8;
        ucar.nc2.dods.ConvertD2N r10;
        int i1, $i2, $i3, i5;
        ucar.nc2.Variable r4;
        java.lang.String r3;
        ucar.ma2.Index0D $r1;
        ucar.ma2.DataType $r6;
        char $c4;
        ucar.ma2.Array r0, $r9;
        char[] r5;
        java.lang.Object $r2;
        java.lang.Class $r7;

        r10 := @this: ucar.nc2.dods.ConvertD2N;

        r0 := @parameter0: ucar.ma2.Array;

        r4 := @parameter1: ucar.nc2.Variable;

        $r1 = <ucar.ma2.Index: ucar.ma2.Index0D scalarIndexImmutable>;

        $r2 = virtualinvoke r0.<ucar.ma2.Array: java.lang.Object getObject(ucar.ma2.Index)>($r1);

        r3 = (java.lang.String) $r2;

        $l0 = virtualinvoke r4.<ucar.nc2.Variable: long getSize()>();

        i1 = (int) $l0;

        r5 = newarray (char)[i1];

        $i2 = virtualinvoke r3.<java.lang.String: int length()>();

        $i3 = staticinvoke <java.lang.Math: int min(int,int)>($i2, i1);

        i5 = 0;

     label1:
        if i5 >= $i3 goto label2;

        $c4 = virtualinvoke r3.<java.lang.String: char charAt(int)>(i5);

        r5[i5] = $c4;

        i5 = i5 + 1;

        goto label1;

     label2:
        $r6 = <ucar.ma2.DataType: ucar.ma2.DataType CHAR>;

        $r7 = virtualinvoke $r6.<ucar.ma2.DataType: java.lang.Class getPrimitiveClassType()>();

        $r8 = virtualinvoke r4.<ucar.nc2.Variable: int[] getShape()>();

        $r9 = staticinvoke <ucar.ma2.Array: ucar.ma2.Array factory(java.lang.Class,int[],java.lang.Object)>($r7, $r8, r5);

        return $r9;
    }

    private int[] makeShape(opendap.dap.DArray)
    {
        java.util.Enumeration $r1, $r3;
        opendap.dap.DArrayDimension r5;
        opendap.dap.DArray r0;
        int[] r2;
        ucar.nc2.dods.ConvertD2N r6;
        int $i0, $i1, i2, i3;
        java.lang.Object $r4;
        boolean $z0, $z1;

        r6 := @this: ucar.nc2.dods.ConvertD2N;

        r0 := @parameter0: opendap.dap.DArray;

        i2 = 0;

        $r1 = virtualinvoke r0.<opendap.dap.DArray: java.util.Enumeration getDimensions()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 == 0 goto label2;

        i2 = i2 + 1;

        interfaceinvoke $r1.<java.util.Enumeration: java.lang.Object nextElement()>();

        goto label1;

     label2:
        r2 = newarray (int)[i2];

        $r3 = virtualinvoke r0.<opendap.dap.DArray: java.util.Enumeration getDimensions()>();

        i3 = 0;

     label3:
        $z1 = interfaceinvoke $r3.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z1 == 0 goto label4;

        $r4 = interfaceinvoke $r3.<java.util.Enumeration: java.lang.Object nextElement()>();

        r5 = (opendap.dap.DArrayDimension) $r4;

        $i0 = i3;

        i3 = i3 + 1;

        $i1 = virtualinvoke r5.<opendap.dap.DArrayDimension: int getSize()>();

        r2[$i0] = $i1;

        goto label3;

     label4:
        return r2;
    }

    static void <clinit>()
    {
        org.slf4j.Logger $r0;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lucar/nc2/dods/DODSNetcdfFile;");

        <ucar.nc2.dods.ConvertD2N: org.slf4j.Logger logger> = $r0;

        return;
    }
}
