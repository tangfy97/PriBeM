final class org.mozilla.classfile.ConstantPool extends java.lang.Object
{
    private static final int ConstantPoolSize;
    private static final byte CONSTANT_Class;
    private static final byte CONSTANT_Fieldref;
    private static final byte CONSTANT_Methodref;
    private static final byte CONSTANT_InterfaceMethodref;
    private static final byte CONSTANT_String;
    private static final byte CONSTANT_Integer;
    private static final byte CONSTANT_Float;
    private static final byte CONSTANT_Long;
    private static final byte CONSTANT_Double;
    private static final byte CONSTANT_NameAndType;
    private static final byte CONSTANT_Utf8;
    private org.mozilla.classfile.ClassFileWriter cfw;
    private static final int MAX_UTF_ENCODING_SIZE;
    private org.mozilla.javascript.UintMap itsStringConstHash;
    private org.mozilla.javascript.ObjToIntMap itsUtf8Hash;
    private org.mozilla.javascript.ObjToIntMap itsFieldRefHash;
    private org.mozilla.javascript.ObjToIntMap itsMethodRefHash;
    private org.mozilla.javascript.ObjToIntMap itsClassHash;
    private int itsTop;
    private int itsTopIndex;
    private byte[] itsPool;

    void <init>(org.mozilla.classfile.ClassFileWriter)
    {
        byte[] $r7;
        org.mozilla.classfile.ConstantPool r0;
        org.mozilla.javascript.UintMap $r1;
        org.mozilla.classfile.ClassFileWriter r6;
        org.mozilla.javascript.ObjToIntMap $r2, $r3, $r4, $r5;

        r0 := @this: org.mozilla.classfile.ConstantPool;

        r6 := @parameter0: org.mozilla.classfile.ClassFileWriter;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new org.mozilla.javascript.UintMap;

        specialinvoke $r1.<org.mozilla.javascript.UintMap: void <init>()>();

        r0.<org.mozilla.classfile.ConstantPool: org.mozilla.javascript.UintMap itsStringConstHash> = $r1;

        $r2 = new org.mozilla.javascript.ObjToIntMap;

        specialinvoke $r2.<org.mozilla.javascript.ObjToIntMap: void <init>()>();

        r0.<org.mozilla.classfile.ConstantPool: org.mozilla.javascript.ObjToIntMap itsUtf8Hash> = $r2;

        $r3 = new org.mozilla.javascript.ObjToIntMap;

        specialinvoke $r3.<org.mozilla.javascript.ObjToIntMap: void <init>()>();

        r0.<org.mozilla.classfile.ConstantPool: org.mozilla.javascript.ObjToIntMap itsFieldRefHash> = $r3;

        $r4 = new org.mozilla.javascript.ObjToIntMap;

        specialinvoke $r4.<org.mozilla.javascript.ObjToIntMap: void <init>()>();

        r0.<org.mozilla.classfile.ConstantPool: org.mozilla.javascript.ObjToIntMap itsMethodRefHash> = $r4;

        $r5 = new org.mozilla.javascript.ObjToIntMap;

        specialinvoke $r5.<org.mozilla.javascript.ObjToIntMap: void <init>()>();

        r0.<org.mozilla.classfile.ConstantPool: org.mozilla.javascript.ObjToIntMap itsClassHash> = $r5;

        r0.<org.mozilla.classfile.ConstantPool: org.mozilla.classfile.ClassFileWriter cfw> = r6;

        r0.<org.mozilla.classfile.ConstantPool: int itsTopIndex> = 1;

        $r7 = newarray (byte)[256];

        r0.<org.mozilla.classfile.ConstantPool: byte[] itsPool> = $r7;

        r0.<org.mozilla.classfile.ConstantPool: int itsTop> = 0;

        return;
    }

    int write(byte[], int)
    {
        byte[] r1, $r2;
        org.mozilla.classfile.ConstantPool r0;
        short $s1;
        int $i0, $i2, $i3, $i4, i5, i6, $i7;

        r0 := @this: org.mozilla.classfile.ConstantPool;

        r1 := @parameter0: byte[];

        i5 := @parameter1: int;

        $i0 = r0.<org.mozilla.classfile.ConstantPool: int itsTopIndex>;

        $s1 = (short) $i0;

        $i7 = (int) $s1;

        $i2 = staticinvoke <org.mozilla.classfile.ClassFileWriter: int putInt16(int,byte[],int)>($i7, r1, i5);

        $r2 = r0.<org.mozilla.classfile.ConstantPool: byte[] itsPool>;

        $i3 = r0.<org.mozilla.classfile.ConstantPool: int itsTop>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, r1, $i2, $i3);

        $i4 = r0.<org.mozilla.classfile.ConstantPool: int itsTop>;

        i6 = $i2 + $i4;

        return i6;
    }

    int getWriteSize()
    {
        int $i0, $i1;
        org.mozilla.classfile.ConstantPool r0;

        r0 := @this: org.mozilla.classfile.ConstantPool;

        $i0 = r0.<org.mozilla.classfile.ConstantPool: int itsTop>;

        $i1 = 2 + $i0;

        return $i1;
    }

    int addConstant(int)
    {
        byte[] $r1, $r2;
        org.mozilla.classfile.ConstantPool r0;
        short $s7;
        int $i0, $i1, i2, $i3, $i4, $i5, $i6, $i8;

        r0 := @this: org.mozilla.classfile.ConstantPool;

        i2 := @parameter0: int;

        virtualinvoke r0.<org.mozilla.classfile.ConstantPool: void ensure(int)>(5);

        $r1 = r0.<org.mozilla.classfile.ConstantPool: byte[] itsPool>;

        $i0 = r0.<org.mozilla.classfile.ConstantPool: int itsTop>;

        $i1 = $i0 + 1;

        r0.<org.mozilla.classfile.ConstantPool: int itsTop> = $i1;

        $r1[$i0] = 3;

        $r2 = r0.<org.mozilla.classfile.ConstantPool: byte[] itsPool>;

        $i3 = r0.<org.mozilla.classfile.ConstantPool: int itsTop>;

        $i4 = staticinvoke <org.mozilla.classfile.ClassFileWriter: int putInt32(int,byte[],int)>(i2, $r2, $i3);

        r0.<org.mozilla.classfile.ConstantPool: int itsTop> = $i4;

        $i5 = r0.<org.mozilla.classfile.ConstantPool: int itsTopIndex>;

        $i6 = $i5 + 1;

        r0.<org.mozilla.classfile.ConstantPool: int itsTopIndex> = $i6;

        $s7 = (short) $i5;

        $i8 = (int) $s7;

        return $i8;
    }

    int addConstant(long)
    {
        byte[] $r1, $r2;
        org.mozilla.classfile.ConstantPool r0;
        long l2;
        int $i0, $i1, $i3, $i4, i5, $i6, $i7;

        r0 := @this: org.mozilla.classfile.ConstantPool;

        l2 := @parameter0: long;

        virtualinvoke r0.<org.mozilla.classfile.ConstantPool: void ensure(int)>(9);

        $r1 = r0.<org.mozilla.classfile.ConstantPool: byte[] itsPool>;

        $i0 = r0.<org.mozilla.classfile.ConstantPool: int itsTop>;

        $i1 = $i0 + 1;

        r0.<org.mozilla.classfile.ConstantPool: int itsTop> = $i1;

        $r1[$i0] = 5;

        $r2 = r0.<org.mozilla.classfile.ConstantPool: byte[] itsPool>;

        $i3 = r0.<org.mozilla.classfile.ConstantPool: int itsTop>;

        $i4 = staticinvoke <org.mozilla.classfile.ClassFileWriter: int putInt64(long,byte[],int)>(l2, $r2, $i3);

        r0.<org.mozilla.classfile.ConstantPool: int itsTop> = $i4;

        i5 = r0.<org.mozilla.classfile.ConstantPool: int itsTopIndex>;

        $i6 = r0.<org.mozilla.classfile.ConstantPool: int itsTopIndex>;

        $i7 = $i6 + 2;

        r0.<org.mozilla.classfile.ConstantPool: int itsTopIndex> = $i7;

        return i5;
    }

    int addConstant(float)
    {
        byte[] $r1, $r2;
        org.mozilla.classfile.ConstantPool r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        float f0;

        r0 := @this: org.mozilla.classfile.ConstantPool;

        f0 := @parameter0: float;

        virtualinvoke r0.<org.mozilla.classfile.ConstantPool: void ensure(int)>(5);

        $r1 = r0.<org.mozilla.classfile.ConstantPool: byte[] itsPool>;

        $i0 = r0.<org.mozilla.classfile.ConstantPool: int itsTop>;

        $i1 = $i0 + 1;

        r0.<org.mozilla.classfile.ConstantPool: int itsTop> = $i1;

        $r1[$i0] = 4;

        $i2 = staticinvoke <java.lang.Float: int floatToIntBits(float)>(f0);

        $r2 = r0.<org.mozilla.classfile.ConstantPool: byte[] itsPool>;

        $i3 = r0.<org.mozilla.classfile.ConstantPool: int itsTop>;

        $i4 = staticinvoke <org.mozilla.classfile.ClassFileWriter: int putInt32(int,byte[],int)>($i2, $r2, $i3);

        r0.<org.mozilla.classfile.ConstantPool: int itsTop> = $i4;

        $i5 = r0.<org.mozilla.classfile.ConstantPool: int itsTopIndex>;

        $i6 = $i5 + 1;

        r0.<org.mozilla.classfile.ConstantPool: int itsTopIndex> = $i6;

        return $i5;
    }

    int addConstant(double)
    {
        byte[] $r1, $r2;
        org.mozilla.classfile.ConstantPool r0;
        long $l2;
        int $i0, $i1, $i3, $i4, i5, $i6, $i7;
        double d0;

        r0 := @this: org.mozilla.classfile.ConstantPool;

        d0 := @parameter0: double;

        virtualinvoke r0.<org.mozilla.classfile.ConstantPool: void ensure(int)>(9);

        $r1 = r0.<org.mozilla.classfile.ConstantPool: byte[] itsPool>;

        $i0 = r0.<org.mozilla.classfile.ConstantPool: int itsTop>;

        $i1 = $i0 + 1;

        r0.<org.mozilla.classfile.ConstantPool: int itsTop> = $i1;

        $r1[$i0] = 6;

        $l2 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>(d0);

        $r2 = r0.<org.mozilla.classfile.ConstantPool: byte[] itsPool>;

        $i3 = r0.<org.mozilla.classfile.ConstantPool: int itsTop>;

        $i4 = staticinvoke <org.mozilla.classfile.ClassFileWriter: int putInt64(long,byte[],int)>($l2, $r2, $i3);

        r0.<org.mozilla.classfile.ConstantPool: int itsTop> = $i4;

        i5 = r0.<org.mozilla.classfile.ConstantPool: int itsTopIndex>;

        $i6 = r0.<org.mozilla.classfile.ConstantPool: int itsTopIndex>;

        $i7 = $i6 + 2;

        r0.<org.mozilla.classfile.ConstantPool: int itsTopIndex> = $i7;

        return i5;
    }

    int addConstant(java.lang.String)
    {
        byte[] $r3, $r4;
        short $s0;
        int i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i9, $i11, $i12, $i14, $i16;
        java.lang.String r1;
        org.mozilla.classfile.ConstantPool r0;
        org.mozilla.javascript.UintMap $r2, $r5;

        r0 := @this: org.mozilla.classfile.ConstantPool;

        r1 := @parameter0: java.lang.String;

        $s0 = virtualinvoke r0.<org.mozilla.classfile.ConstantPool: short addUtf8(java.lang.String)>(r1);

        $i11 = (int) 65535;

        $i12 = (int) $s0;

        i1 = $i11 & $i12;

        $r2 = r0.<org.mozilla.classfile.ConstantPool: org.mozilla.javascript.UintMap itsStringConstHash>;

        $i14 = (int) -1;

        $i2 = virtualinvoke $r2.<org.mozilla.javascript.UintMap: int getInt(int,int)>(i1, $i14);

        i9 = $i2;

        $i16 = (int) -1;

        if $i2 != $i16 goto label1;

        $i3 = r0.<org.mozilla.classfile.ConstantPool: int itsTopIndex>;

        $i4 = $i3 + 1;

        r0.<org.mozilla.classfile.ConstantPool: int itsTopIndex> = $i4;

        i9 = $i3;

        virtualinvoke r0.<org.mozilla.classfile.ConstantPool: void ensure(int)>(3);

        $r3 = r0.<org.mozilla.classfile.ConstantPool: byte[] itsPool>;

        $i5 = r0.<org.mozilla.classfile.ConstantPool: int itsTop>;

        $i6 = $i5 + 1;

        r0.<org.mozilla.classfile.ConstantPool: int itsTop> = $i6;

        $r3[$i5] = 8;

        $r4 = r0.<org.mozilla.classfile.ConstantPool: byte[] itsPool>;

        $i7 = r0.<org.mozilla.classfile.ConstantPool: int itsTop>;

        $i8 = staticinvoke <org.mozilla.classfile.ClassFileWriter: int putInt16(int,byte[],int)>(i1, $r4, $i7);

        r0.<org.mozilla.classfile.ConstantPool: int itsTop> = $i8;

        $r5 = r0.<org.mozilla.classfile.ConstantPool: org.mozilla.javascript.UintMap itsStringConstHash>;

        virtualinvoke $r5.<org.mozilla.javascript.UintMap: void put(int,int)>(i1, $i3);

     label1:
        return i9;
    }

    boolean isUnderUtfEncodingLimit(java.lang.String)
    {
        org.mozilla.classfile.ConstantPool r1;
        int $i0, $i1, $i2, $i4, $i6;
        java.lang.String r0;
        boolean $z0;

        r1 := @this: org.mozilla.classfile.ConstantPool;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        $i1 = $i0 * 3;

        $i4 = (int) 65535;

        if $i1 > $i4 goto label1;

        return 1;

     label1:
        $i6 = (int) 65535;

        if $i0 <= $i6 goto label2;

        return 0;

     label2:
        $i2 = virtualinvoke r1.<org.mozilla.classfile.ConstantPool: int getUtfEncodingLimit(java.lang.String,int,int)>(r0, 0, $i0);

        if $i0 != $i2 goto label3;

        $z0 = 1;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        return $z0;
    }

    int getUtfEncodingLimit(java.lang.String, int, int)
    {
        int i0, i1, $i2, $i3, i5, i6, $i8, $i10, $i11, $i13, $i14, $i16, $i18;
        java.lang.String r0;
        org.mozilla.classfile.ConstantPool r1;
        char $c4;

        r1 := @this: org.mozilla.classfile.ConstantPool;

        r0 := @parameter0: java.lang.String;

        i1 := @parameter1: int;

        i0 := @parameter2: int;

        $i2 = i0 - i1;

        $i3 = $i2 * 3;

        $i8 = (int) 65535;

        if $i3 > $i8 goto label1;

        return i0;

     label1:
        $i10 = (int) 65535;

        i5 = $i10;

        i6 = i1;

     label2:
        if i6 == i0 goto label7;

        $c4 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i6);

        if 0 == $c4 goto label3;

        $i11 = (int) $c4;

        if $i11 > 127 goto label3;

        $i13 = (int) -1;

        i5 = i5 + $i13;

        goto label5;

     label3:
        $i14 = (int) $c4;

        if $i14 >= 2047 goto label4;

        $i16 = (int) -2;

        i5 = i5 + $i16;

        goto label5;

     label4:
        $i18 = (int) -3;

        i5 = i5 + $i18;

     label5:
        if i5 >= 0 goto label6;

        return i6;

     label6:
        i6 = i6 + 1;

        goto label2;

     label7:
        return i0;
    }

    short addUtf8(java.lang.String)
    {
        byte[] $r3, $r6, $r7, $r10, $r11, $r12, $r13, $r14, $r15;
        byte $b10, $b13, $b20, $b23, $b26, $b30, $b33, $b35;
        org.mozilla.classfile.ConstantPool r0;
        short $s1, $s22, $s32;
        java.lang.String r1;
        char[] $r5;
        org.mozilla.javascript.ObjToIntMap $r2, $r8;
        boolean z0;
        org.mozilla.classfile.ClassFileWriter $r4;
        int $i0, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i11, $i12, $i14, $i15, $i16, $i18, $i19, $i24, $i25, $i27, $i28, $i29, $i34, i36, i37, i38, i39, i40, i41, i42, i43, i44, $i46, $i48, $i50, $i51, $i52, $i53, $i54, $i55, $i57;
        char c17, $c21, $c31;
        java.lang.IllegalArgumentException $r16;

        r0 := @this: org.mozilla.classfile.ConstantPool;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.mozilla.classfile.ConstantPool: org.mozilla.javascript.ObjToIntMap itsUtf8Hash>;

        $i46 = (int) -1;

        $i0 = virtualinvoke $r2.<org.mozilla.javascript.ObjToIntMap: int get(java.lang.Object,int)>(r1, $i46);

        i36 = $i0;

        $i48 = (int) -1;

        if $i0 != $i48 goto label9;

        $i2 = virtualinvoke r1.<java.lang.String: int length()>();

        $i50 = (int) 65535;

        if $i2 <= $i50 goto label1;

        z0 = 1;

        goto label8;

     label1:
        z0 = 0;

        $i3 = $i2 * 3;

        $i4 = 3 + $i3;

        virtualinvoke r0.<org.mozilla.classfile.ConstantPool: void ensure(int)>($i4);

        i37 = r0.<org.mozilla.classfile.ConstantPool: int itsTop>;

        $r3 = r0.<org.mozilla.classfile.ConstantPool: byte[] itsPool>;

        i38 = i37 + 1;

        $r3[i37] = 1;

        i39 = i38 + 2;

        $r4 = r0.<org.mozilla.classfile.ConstantPool: org.mozilla.classfile.ClassFileWriter cfw>;

        $r5 = virtualinvoke $r4.<org.mozilla.classfile.ClassFileWriter: char[] getCharBuffer(int)>($i2);

        virtualinvoke r1.<java.lang.String: void getChars(int,int,char[],int)>(0, $i2, $r5, 0);

        i40 = 0;

     label2:
        if i40 == $i2 goto label6;

        c17 = $r5[i40];

        if c17 == 0 goto label3;

        $i51 = (int) c17;

        if $i51 > 127 goto label3;

        $r15 = r0.<org.mozilla.classfile.ConstantPool: byte[] itsPool>;

        $i34 = i39;

        i39 = i39 + 1;

        $b35 = (byte) c17;

        $r15[$i34] = $b35;

        goto label5;

     label3:
        $i52 = (int) c17;

        if $i52 <= 2047 goto label4;

        $r12 = r0.<org.mozilla.classfile.ConstantPool: byte[] itsPool>;

        i41 = i39 + 1;

        $i53 = (int) c17;

        $i24 = $i53 >> 12;

        $i25 = 224 | $i24;

        $b26 = (byte) $i25;

        $r12[i39] = $b26;

        $r13 = r0.<org.mozilla.classfile.ConstantPool: byte[] itsPool>;

        i42 = i41 + 1;

        $i54 = (int) c17;

        $i27 = $i54 >> 6;

        $i28 = $i27 & 63;

        $i29 = 128 | $i28;

        $b30 = (byte) $i29;

        $r13[i41] = $b30;

        $r14 = r0.<org.mozilla.classfile.ConstantPool: byte[] itsPool>;

        i39 = i42 + 1;

        $c31 = c17 & 63;

        $s32 = 128 | $c31;

        $b33 = (byte) $s32;

        $r14[i42] = $b33;

        goto label5;

     label4:
        $r10 = r0.<org.mozilla.classfile.ConstantPool: byte[] itsPool>;

        i43 = i39 + 1;

        $i55 = (int) c17;

        $i18 = $i55 >> 6;

        $i19 = 192 | $i18;

        $b20 = (byte) $i19;

        $r10[i39] = $b20;

        $r11 = r0.<org.mozilla.classfile.ConstantPool: byte[] itsPool>;

        i39 = i43 + 1;

        $c21 = c17 & 63;

        $s22 = 128 | $c21;

        $b23 = (byte) $s22;

        $r11[i43] = $b23;

     label5:
        i40 = i40 + 1;

        goto label2;

     label6:
        $i5 = r0.<org.mozilla.classfile.ConstantPool: int itsTop>;

        $i6 = $i5 + 1;

        $i7 = $i6 + 2;

        i44 = i39 - $i7;

        $i57 = (int) 65535;

        if i44 <= $i57 goto label7;

        z0 = 1;

        goto label8;

     label7:
        $r6 = r0.<org.mozilla.classfile.ConstantPool: byte[] itsPool>;

        $i8 = r0.<org.mozilla.classfile.ConstantPool: int itsTop>;

        $i11 = $i8 + 1;

        $i9 = i44 >>> 8;

        $b10 = (byte) $i9;

        $r6[$i11] = $b10;

        $r7 = r0.<org.mozilla.classfile.ConstantPool: byte[] itsPool>;

        $i12 = r0.<org.mozilla.classfile.ConstantPool: int itsTop>;

        $i14 = $i12 + 2;

        $b13 = (byte) i44;

        $r7[$i14] = $b13;

        r0.<org.mozilla.classfile.ConstantPool: int itsTop> = i39;

        $i15 = r0.<org.mozilla.classfile.ConstantPool: int itsTopIndex>;

        $i16 = $i15 + 1;

        r0.<org.mozilla.classfile.ConstantPool: int itsTopIndex> = $i16;

        i36 = $i15;

        $r8 = r0.<org.mozilla.classfile.ConstantPool: org.mozilla.javascript.ObjToIntMap itsUtf8Hash>;

        virtualinvoke $r8.<org.mozilla.javascript.ObjToIntMap: void put(java.lang.Object,int)>(r1, $i15);

     label8:
        if z0 == 0 goto label9;

        $r16 = new java.lang.IllegalArgumentException;

        specialinvoke $r16.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Too big string");

        throw $r16;

     label9:
        $s1 = (short) i36;

        return $s1;
    }

    private short addNameAndType(java.lang.String, java.lang.String)
    {
        byte[] $r3, $r4, $r5;
        short $s0, $s1, $s10;
        int $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i11, $i12;
        java.lang.String r1, r2;
        org.mozilla.classfile.ConstantPool r0;

        r0 := @this: org.mozilla.classfile.ConstantPool;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $s0 = virtualinvoke r0.<org.mozilla.classfile.ConstantPool: short addUtf8(java.lang.String)>(r1);

        $s1 = virtualinvoke r0.<org.mozilla.classfile.ConstantPool: short addUtf8(java.lang.String)>(r2);

        virtualinvoke r0.<org.mozilla.classfile.ConstantPool: void ensure(int)>(5);

        $r3 = r0.<org.mozilla.classfile.ConstantPool: byte[] itsPool>;

        $i2 = r0.<org.mozilla.classfile.ConstantPool: int itsTop>;

        $i3 = $i2 + 1;

        r0.<org.mozilla.classfile.ConstantPool: int itsTop> = $i3;

        $r3[$i2] = 12;

        $r4 = r0.<org.mozilla.classfile.ConstantPool: byte[] itsPool>;

        $i4 = r0.<org.mozilla.classfile.ConstantPool: int itsTop>;

        $i11 = (int) $s0;

        $i5 = staticinvoke <org.mozilla.classfile.ClassFileWriter: int putInt16(int,byte[],int)>($i11, $r4, $i4);

        r0.<org.mozilla.classfile.ConstantPool: int itsTop> = $i5;

        $r5 = r0.<org.mozilla.classfile.ConstantPool: byte[] itsPool>;

        $i6 = r0.<org.mozilla.classfile.ConstantPool: int itsTop>;

        $i12 = (int) $s1;

        $i7 = staticinvoke <org.mozilla.classfile.ClassFileWriter: int putInt16(int,byte[],int)>($i12, $r5, $i6);

        r0.<org.mozilla.classfile.ConstantPool: int itsTop> = $i7;

        $i8 = r0.<org.mozilla.classfile.ConstantPool: int itsTopIndex>;

        $i9 = $i8 + 1;

        r0.<org.mozilla.classfile.ConstantPool: int itsTopIndex> = $i9;

        $s10 = (short) $i8;

        return $s10;
    }

    short addClass(java.lang.String)
    {
        byte[] $r3, $r4;
        short $s2, $s11;
        int $i0, $i1, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10, $i13, $i15, $i17, $i19, $i21, $i22;
        java.lang.String r1, $r7, r10;
        org.mozilla.classfile.ConstantPool r0;
        org.mozilla.javascript.ObjToIntMap $r2, $r5, $r6, $r8, $r9;

        r0 := @this: org.mozilla.classfile.ConstantPool;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.mozilla.classfile.ConstantPool: org.mozilla.javascript.ObjToIntMap itsClassHash>;

        $i13 = (int) -1;

        $i0 = virtualinvoke $r2.<org.mozilla.javascript.ObjToIntMap: int get(java.lang.Object,int)>(r1, $i13);

        i10 = $i0;

        $i15 = (int) -1;

        if $i0 != $i15 goto label2;

        r10 = r1;

        $i1 = virtualinvoke r1.<java.lang.String: int indexOf(int)>(46);

        if $i1 <= 0 goto label1;

        $r7 = staticinvoke <org.mozilla.classfile.ClassFileWriter: java.lang.String getSlashedForm(java.lang.String)>(r1);

        r10 = $r7;

        $r8 = r0.<org.mozilla.classfile.ConstantPool: org.mozilla.javascript.ObjToIntMap itsClassHash>;

        $i17 = (int) -1;

        $i9 = virtualinvoke $r8.<org.mozilla.javascript.ObjToIntMap: int get(java.lang.Object,int)>($r7, $i17);

        i10 = $i9;

        $i19 = (int) -1;

        if $i9 == $i19 goto label1;

        $r9 = r0.<org.mozilla.classfile.ConstantPool: org.mozilla.javascript.ObjToIntMap itsClassHash>;

        virtualinvoke $r9.<org.mozilla.javascript.ObjToIntMap: void put(java.lang.Object,int)>(r1, $i9);

     label1:
        $i21 = (int) -1;

        if i10 != $i21 goto label2;

        $s2 = virtualinvoke r0.<org.mozilla.classfile.ConstantPool: short addUtf8(java.lang.String)>(r10);

        virtualinvoke r0.<org.mozilla.classfile.ConstantPool: void ensure(int)>(3);

        $r3 = r0.<org.mozilla.classfile.ConstantPool: byte[] itsPool>;

        $i3 = r0.<org.mozilla.classfile.ConstantPool: int itsTop>;

        $i4 = $i3 + 1;

        r0.<org.mozilla.classfile.ConstantPool: int itsTop> = $i4;

        $r3[$i3] = 7;

        $r4 = r0.<org.mozilla.classfile.ConstantPool: byte[] itsPool>;

        $i5 = r0.<org.mozilla.classfile.ConstantPool: int itsTop>;

        $i22 = (int) $s2;

        $i6 = staticinvoke <org.mozilla.classfile.ClassFileWriter: int putInt16(int,byte[],int)>($i22, $r4, $i5);

        r0.<org.mozilla.classfile.ConstantPool: int itsTop> = $i6;

        $i7 = r0.<org.mozilla.classfile.ConstantPool: int itsTopIndex>;

        $i8 = $i7 + 1;

        r0.<org.mozilla.classfile.ConstantPool: int itsTopIndex> = $i8;

        i10 = $i7;

        $r5 = r0.<org.mozilla.classfile.ConstantPool: org.mozilla.javascript.ObjToIntMap itsClassHash>;

        virtualinvoke $r5.<org.mozilla.javascript.ObjToIntMap: void put(java.lang.Object,int)>(r10, $i7);

        if r1 == r10 goto label2;

        $r6 = r0.<org.mozilla.classfile.ConstantPool: org.mozilla.javascript.ObjToIntMap itsClassHash>;

        virtualinvoke $r6.<org.mozilla.javascript.ObjToIntMap: void put(java.lang.Object,int)>(r1, $i7);

     label2:
        $s11 = (short) i10;

        return $s11;
    }

    short addFieldRef(java.lang.String, java.lang.String, java.lang.String)
    {
        byte[] $r6, $r7, $r8;
        org.mozilla.classfile.FieldOrMethodRef $r10;
        short $s1, $s2, $s3;
        int $i0, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i12, $i14, $i16, $i17, $i18;
        java.lang.String r1, r2, r3;
        org.mozilla.classfile.ConstantPool r4;
        org.mozilla.javascript.ObjToIntMap $r5, $r9;

        r4 := @this: org.mozilla.classfile.ConstantPool;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        $r10 = new org.mozilla.classfile.FieldOrMethodRef;

        specialinvoke $r10.<org.mozilla.classfile.FieldOrMethodRef: void <init>(java.lang.String,java.lang.String,java.lang.String)>(r1, r2, r3);

        $r5 = r4.<org.mozilla.classfile.ConstantPool: org.mozilla.javascript.ObjToIntMap itsFieldRefHash>;

        $i14 = (int) -1;

        $i0 = virtualinvoke $r5.<org.mozilla.javascript.ObjToIntMap: int get(java.lang.Object,int)>($r10, $i14);

        i12 = $i0;

        $i16 = (int) -1;

        if $i0 != $i16 goto label1;

        $s2 = specialinvoke r4.<org.mozilla.classfile.ConstantPool: short addNameAndType(java.lang.String,java.lang.String)>(r2, r3);

        $s3 = virtualinvoke r4.<org.mozilla.classfile.ConstantPool: short addClass(java.lang.String)>(r1);

        virtualinvoke r4.<org.mozilla.classfile.ConstantPool: void ensure(int)>(5);

        $r6 = r4.<org.mozilla.classfile.ConstantPool: byte[] itsPool>;

        $i4 = r4.<org.mozilla.classfile.ConstantPool: int itsTop>;

        $i5 = $i4 + 1;

        r4.<org.mozilla.classfile.ConstantPool: int itsTop> = $i5;

        $r6[$i4] = 9;

        $r7 = r4.<org.mozilla.classfile.ConstantPool: byte[] itsPool>;

        $i6 = r4.<org.mozilla.classfile.ConstantPool: int itsTop>;

        $i17 = (int) $s3;

        $i7 = staticinvoke <org.mozilla.classfile.ClassFileWriter: int putInt16(int,byte[],int)>($i17, $r7, $i6);

        r4.<org.mozilla.classfile.ConstantPool: int itsTop> = $i7;

        $r8 = r4.<org.mozilla.classfile.ConstantPool: byte[] itsPool>;

        $i8 = r4.<org.mozilla.classfile.ConstantPool: int itsTop>;

        $i18 = (int) $s2;

        $i9 = staticinvoke <org.mozilla.classfile.ClassFileWriter: int putInt16(int,byte[],int)>($i18, $r8, $i8);

        r4.<org.mozilla.classfile.ConstantPool: int itsTop> = $i9;

        $i10 = r4.<org.mozilla.classfile.ConstantPool: int itsTopIndex>;

        $i11 = $i10 + 1;

        r4.<org.mozilla.classfile.ConstantPool: int itsTopIndex> = $i11;

        i12 = $i10;

        $r9 = r4.<org.mozilla.classfile.ConstantPool: org.mozilla.javascript.ObjToIntMap itsFieldRefHash>;

        virtualinvoke $r9.<org.mozilla.javascript.ObjToIntMap: void put(java.lang.Object,int)>($r10, $i10);

     label1:
        $s1 = (short) i12;

        return $s1;
    }

    short addMethodRef(java.lang.String, java.lang.String, java.lang.String)
    {
        byte[] $r6, $r7, $r8;
        org.mozilla.classfile.FieldOrMethodRef $r10;
        short $s1, $s2, $s3;
        int $i0, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i12, $i14, $i16, $i17, $i18;
        java.lang.String r1, r2, r3;
        org.mozilla.classfile.ConstantPool r4;
        org.mozilla.javascript.ObjToIntMap $r5, $r9;

        r4 := @this: org.mozilla.classfile.ConstantPool;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        $r10 = new org.mozilla.classfile.FieldOrMethodRef;

        specialinvoke $r10.<org.mozilla.classfile.FieldOrMethodRef: void <init>(java.lang.String,java.lang.String,java.lang.String)>(r1, r2, r3);

        $r5 = r4.<org.mozilla.classfile.ConstantPool: org.mozilla.javascript.ObjToIntMap itsMethodRefHash>;

        $i14 = (int) -1;

        $i0 = virtualinvoke $r5.<org.mozilla.javascript.ObjToIntMap: int get(java.lang.Object,int)>($r10, $i14);

        i12 = $i0;

        $i16 = (int) -1;

        if $i0 != $i16 goto label1;

        $s2 = specialinvoke r4.<org.mozilla.classfile.ConstantPool: short addNameAndType(java.lang.String,java.lang.String)>(r2, r3);

        $s3 = virtualinvoke r4.<org.mozilla.classfile.ConstantPool: short addClass(java.lang.String)>(r1);

        virtualinvoke r4.<org.mozilla.classfile.ConstantPool: void ensure(int)>(5);

        $r6 = r4.<org.mozilla.classfile.ConstantPool: byte[] itsPool>;

        $i4 = r4.<org.mozilla.classfile.ConstantPool: int itsTop>;

        $i5 = $i4 + 1;

        r4.<org.mozilla.classfile.ConstantPool: int itsTop> = $i5;

        $r6[$i4] = 10;

        $r7 = r4.<org.mozilla.classfile.ConstantPool: byte[] itsPool>;

        $i6 = r4.<org.mozilla.classfile.ConstantPool: int itsTop>;

        $i17 = (int) $s3;

        $i7 = staticinvoke <org.mozilla.classfile.ClassFileWriter: int putInt16(int,byte[],int)>($i17, $r7, $i6);

        r4.<org.mozilla.classfile.ConstantPool: int itsTop> = $i7;

        $r8 = r4.<org.mozilla.classfile.ConstantPool: byte[] itsPool>;

        $i8 = r4.<org.mozilla.classfile.ConstantPool: int itsTop>;

        $i18 = (int) $s2;

        $i9 = staticinvoke <org.mozilla.classfile.ClassFileWriter: int putInt16(int,byte[],int)>($i18, $r8, $i8);

        r4.<org.mozilla.classfile.ConstantPool: int itsTop> = $i9;

        $i10 = r4.<org.mozilla.classfile.ConstantPool: int itsTopIndex>;

        $i11 = $i10 + 1;

        r4.<org.mozilla.classfile.ConstantPool: int itsTopIndex> = $i11;

        i12 = $i10;

        $r9 = r4.<org.mozilla.classfile.ConstantPool: org.mozilla.javascript.ObjToIntMap itsMethodRefHash>;

        virtualinvoke $r9.<org.mozilla.javascript.ObjToIntMap: void put(java.lang.Object,int)>($r10, $i10);

     label1:
        $s1 = (short) i12;

        return $s1;
    }

    short addInterfaceMethodRef(java.lang.String, java.lang.String, java.lang.String)
    {
        byte[] $r4, $r5, $r6;
        short $s0, $s1, $s10;
        int $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i11, $i12;
        java.lang.String r1, r2, r3;
        org.mozilla.classfile.ConstantPool r0;

        r0 := @this: org.mozilla.classfile.ConstantPool;

        r3 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        $s0 = specialinvoke r0.<org.mozilla.classfile.ConstantPool: short addNameAndType(java.lang.String,java.lang.String)>(r1, r2);

        $s1 = virtualinvoke r0.<org.mozilla.classfile.ConstantPool: short addClass(java.lang.String)>(r3);

        virtualinvoke r0.<org.mozilla.classfile.ConstantPool: void ensure(int)>(5);

        $r4 = r0.<org.mozilla.classfile.ConstantPool: byte[] itsPool>;

        $i2 = r0.<org.mozilla.classfile.ConstantPool: int itsTop>;

        $i3 = $i2 + 1;

        r0.<org.mozilla.classfile.ConstantPool: int itsTop> = $i3;

        $r4[$i2] = 11;

        $r5 = r0.<org.mozilla.classfile.ConstantPool: byte[] itsPool>;

        $i4 = r0.<org.mozilla.classfile.ConstantPool: int itsTop>;

        $i11 = (int) $s1;

        $i5 = staticinvoke <org.mozilla.classfile.ClassFileWriter: int putInt16(int,byte[],int)>($i11, $r5, $i4);

        r0.<org.mozilla.classfile.ConstantPool: int itsTop> = $i5;

        $r6 = r0.<org.mozilla.classfile.ConstantPool: byte[] itsPool>;

        $i6 = r0.<org.mozilla.classfile.ConstantPool: int itsTop>;

        $i12 = (int) $s0;

        $i7 = staticinvoke <org.mozilla.classfile.ClassFileWriter: int putInt16(int,byte[],int)>($i12, $r6, $i6);

        r0.<org.mozilla.classfile.ConstantPool: int itsTop> = $i7;

        $i8 = r0.<org.mozilla.classfile.ConstantPool: int itsTopIndex>;

        $i9 = $i8 + 1;

        r0.<org.mozilla.classfile.ConstantPool: int itsTopIndex> = $i9;

        $s10 = (short) $i8;

        return $s10;
    }

    void ensure(int)
    {
        byte[] $r1, $r2, $r3, $r4;
        org.mozilla.classfile.ConstantPool r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i9;

        r0 := @this: org.mozilla.classfile.ConstantPool;

        i0 := @parameter0: int;

        $i1 = r0.<org.mozilla.classfile.ConstantPool: int itsTop>;

        $i3 = $i1 + i0;

        $r1 = r0.<org.mozilla.classfile.ConstantPool: byte[] itsPool>;

        $i2 = lengthof $r1;

        if $i3 <= $i2 goto label2;

        $r2 = r0.<org.mozilla.classfile.ConstantPool: byte[] itsPool>;

        $i4 = lengthof $r2;

        i9 = $i4 * 2;

        $i5 = r0.<org.mozilla.classfile.ConstantPool: int itsTop>;

        $i6 = $i5 + i0;

        if $i6 <= i9 goto label1;

        $i8 = r0.<org.mozilla.classfile.ConstantPool: int itsTop>;

        i9 = $i8 + i0;

     label1:
        $r4 = newarray (byte)[i9];

        $r3 = r0.<org.mozilla.classfile.ConstantPool: byte[] itsPool>;

        $i7 = r0.<org.mozilla.classfile.ConstantPool: int itsTop>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, $r4, 0, $i7);

        r0.<org.mozilla.classfile.ConstantPool: byte[] itsPool> = $r4;

     label2:
        return;
    }

    public static void <clinit>()
    {
        <org.mozilla.classfile.ConstantPool: int MAX_UTF_ENCODING_SIZE> = 65535;

        <org.mozilla.classfile.ConstantPool: byte CONSTANT_Utf8> = 1;

        <org.mozilla.classfile.ConstantPool: byte CONSTANT_NameAndType> = 12;

        <org.mozilla.classfile.ConstantPool: byte CONSTANT_Double> = 6;

        <org.mozilla.classfile.ConstantPool: byte CONSTANT_Long> = 5;

        <org.mozilla.classfile.ConstantPool: byte CONSTANT_Float> = 4;

        <org.mozilla.classfile.ConstantPool: byte CONSTANT_Integer> = 3;

        <org.mozilla.classfile.ConstantPool: byte CONSTANT_String> = 8;

        <org.mozilla.classfile.ConstantPool: byte CONSTANT_InterfaceMethodref> = 11;

        <org.mozilla.classfile.ConstantPool: byte CONSTANT_Methodref> = 10;

        <org.mozilla.classfile.ConstantPool: byte CONSTANT_Fieldref> = 9;

        <org.mozilla.classfile.ConstantPool: byte CONSTANT_Class> = 7;

        <org.mozilla.classfile.ConstantPool: int ConstantPoolSize> = 256;

        return;
    }
}
