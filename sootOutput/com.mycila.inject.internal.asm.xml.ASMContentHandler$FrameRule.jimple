final class com.mycila.inject.internal.asm.xml.ASMContentHandler$FrameRule extends com.mycila.inject.internal.asm.xml.ASMContentHandler$Rule
{
    private final com.mycila.inject.internal.asm.xml.ASMContentHandler this$0;

    void <init>(com.mycila.inject.internal.asm.xml.ASMContentHandler)
    {
        com.mycila.inject.internal.asm.xml.ASMContentHandler$FrameRule r0;
        com.mycila.inject.internal.asm.xml.ASMContentHandler r1;

        r0 := @this: com.mycila.inject.internal.asm.xml.ASMContentHandler$FrameRule;

        r1 := @parameter0: com.mycila.inject.internal.asm.xml.ASMContentHandler;

        specialinvoke r0.<com.mycila.inject.internal.asm.xml.ASMContentHandler$Rule: void <init>(com.mycila.inject.internal.asm.xml.ASMContentHandler)>(r1);

        r0.<com.mycila.inject.internal.asm.xml.ASMContentHandler$FrameRule: com.mycila.inject.internal.asm.xml.ASMContentHandler this$0> = r1;

        return;
    }

    public void begin(java.lang.String, org.xml.sax.Attributes)
    {
        java.util.HashMap $r0;
        java.util.ArrayList $r1, $r2;
        com.mycila.inject.internal.asm.xml.ASMContentHandler $r5, $r7, $r9;
        org.xml.sax.Attributes r4;
        java.lang.String $r6, $r8, r10, $r11;
        com.mycila.inject.internal.asm.xml.ASMContentHandler$FrameRule r3;

        r3 := @this: com.mycila.inject.internal.asm.xml.ASMContentHandler$FrameRule;

        r10 := @parameter0: java.lang.String;

        r4 := @parameter1: org.xml.sax.Attributes;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("local", $r1);

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("stack", $r2);

        $r5 = r3.<com.mycila.inject.internal.asm.xml.ASMContentHandler$FrameRule: com.mycila.inject.internal.asm.xml.ASMContentHandler this$0>;

        $r6 = interfaceinvoke r4.<org.xml.sax.Attributes: java.lang.String getValue(java.lang.String)>("type");

        virtualinvoke $r5.<com.mycila.inject.internal.asm.xml.ASMContentHandler: void push(java.lang.Object)>($r6);

        $r7 = r3.<com.mycila.inject.internal.asm.xml.ASMContentHandler$FrameRule: com.mycila.inject.internal.asm.xml.ASMContentHandler this$0>;

        $r8 = interfaceinvoke r4.<org.xml.sax.Attributes: java.lang.String getValue(java.lang.String)>("count");

        if $r8 != null goto label1;

        $r11 = "0";

        goto label2;

     label1:
        $r11 = interfaceinvoke r4.<org.xml.sax.Attributes: java.lang.String getValue(java.lang.String)>("count");

     label2:
        virtualinvoke $r7.<com.mycila.inject.internal.asm.xml.ASMContentHandler: void push(java.lang.Object)>($r11);

        $r9 = r3.<com.mycila.inject.internal.asm.xml.ASMContentHandler$FrameRule: com.mycila.inject.internal.asm.xml.ASMContentHandler this$0>;

        virtualinvoke $r9.<com.mycila.inject.internal.asm.xml.ASMContentHandler: void push(java.lang.Object)>($r0);

        return;
    }

    public void end(java.lang.String)
    {
        com.mycila.inject.internal.asm.MethodVisitor $r22, $r23, $r24, $r25, $r26, $r27;
        java.util.Map r3;
        com.mycila.inject.internal.asm.xml.ASMContentHandler$FrameRule r0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        com.mycila.inject.internal.asm.xml.ASMContentHandler $r1, $r10, $r13;
        java.util.List r5, r8;
        java.lang.Object[] $r6, $r9;
        int $i0, $i1, $i2, $i4;
        java.lang.String r12, r15, $r16, $r17, $r18, $r19, $r20, $r21, r28;
        java.lang.Object $r2, $r4, $r7, $r11, $r14;

        r0 := @this: com.mycila.inject.internal.asm.xml.ASMContentHandler$FrameRule;

        r28 := @parameter0: java.lang.String;

        $r1 = r0.<com.mycila.inject.internal.asm.xml.ASMContentHandler$FrameRule: com.mycila.inject.internal.asm.xml.ASMContentHandler this$0>;

        $r2 = virtualinvoke $r1.<com.mycila.inject.internal.asm.xml.ASMContentHandler: java.lang.Object pop()>();

        r3 = (java.util.Map) $r2;

        $r4 = interfaceinvoke r3.<java.util.Map: java.lang.Object get(java.lang.Object)>("local");

        r5 = (java.util.List) $r4;

        $i0 = interfaceinvoke r5.<java.util.List: int size()>();

        $r6 = interfaceinvoke r5.<java.util.List: java.lang.Object[] toArray()>();

        $r7 = interfaceinvoke r3.<java.util.Map: java.lang.Object get(java.lang.Object)>("stack");

        r8 = (java.util.List) $r7;

        $i1 = interfaceinvoke r8.<java.util.List: int size()>();

        $r9 = interfaceinvoke r8.<java.util.List: java.lang.Object[] toArray()>();

        $r10 = r0.<com.mycila.inject.internal.asm.xml.ASMContentHandler$FrameRule: com.mycila.inject.internal.asm.xml.ASMContentHandler this$0>;

        $r11 = virtualinvoke $r10.<com.mycila.inject.internal.asm.xml.ASMContentHandler: java.lang.Object pop()>();

        r12 = (java.lang.String) $r11;

        $r13 = r0.<com.mycila.inject.internal.asm.xml.ASMContentHandler$FrameRule: com.mycila.inject.internal.asm.xml.ASMContentHandler this$0>;

        $r14 = virtualinvoke $r13.<com.mycila.inject.internal.asm.xml.ASMContentHandler: java.lang.Object pop()>();

        r15 = (java.lang.String) $r14;

        $r16 = "NEW";

        $z0 = virtualinvoke $r16.<java.lang.String: boolean equals(java.lang.Object)>(r15);

        if $z0 == 0 goto label1;

        $r27 = virtualinvoke r0.<com.mycila.inject.internal.asm.xml.ASMContentHandler$FrameRule: com.mycila.inject.internal.asm.MethodVisitor getCodeVisitor()>();

        $i4 = (int) -1;

        interfaceinvoke $r27.<com.mycila.inject.internal.asm.MethodVisitor: void visitFrame(int,int,java.lang.Object[],int,java.lang.Object[])>($i4, $i0, $r6, $i1, $r9);

        goto label6;

     label1:
        $r17 = "FULL";

        $z1 = virtualinvoke $r17.<java.lang.String: boolean equals(java.lang.Object)>(r15);

        if $z1 == 0 goto label2;

        $r26 = virtualinvoke r0.<com.mycila.inject.internal.asm.xml.ASMContentHandler$FrameRule: com.mycila.inject.internal.asm.MethodVisitor getCodeVisitor()>();

        interfaceinvoke $r26.<com.mycila.inject.internal.asm.MethodVisitor: void visitFrame(int,int,java.lang.Object[],int,java.lang.Object[])>(0, $i0, $r6, $i1, $r9);

        goto label6;

     label2:
        $r18 = "APPEND";

        $z2 = virtualinvoke $r18.<java.lang.String: boolean equals(java.lang.Object)>(r15);

        if $z2 == 0 goto label3;

        $r25 = virtualinvoke r0.<com.mycila.inject.internal.asm.xml.ASMContentHandler$FrameRule: com.mycila.inject.internal.asm.MethodVisitor getCodeVisitor()>();

        interfaceinvoke $r25.<com.mycila.inject.internal.asm.MethodVisitor: void visitFrame(int,int,java.lang.Object[],int,java.lang.Object[])>(1, $i0, $r6, 0, null);

        goto label6;

     label3:
        $r19 = "CHOP";

        $z3 = virtualinvoke $r19.<java.lang.String: boolean equals(java.lang.Object)>(r15);

        if $z3 == 0 goto label4;

        $r24 = virtualinvoke r0.<com.mycila.inject.internal.asm.xml.ASMContentHandler$FrameRule: com.mycila.inject.internal.asm.MethodVisitor getCodeVisitor()>();

        $i2 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r12);

        interfaceinvoke $r24.<com.mycila.inject.internal.asm.MethodVisitor: void visitFrame(int,int,java.lang.Object[],int,java.lang.Object[])>(2, $i2, null, 0, null);

        goto label6;

     label4:
        $r20 = "SAME";

        $z4 = virtualinvoke $r20.<java.lang.String: boolean equals(java.lang.Object)>(r15);

        if $z4 == 0 goto label5;

        $r23 = virtualinvoke r0.<com.mycila.inject.internal.asm.xml.ASMContentHandler$FrameRule: com.mycila.inject.internal.asm.MethodVisitor getCodeVisitor()>();

        interfaceinvoke $r23.<com.mycila.inject.internal.asm.MethodVisitor: void visitFrame(int,int,java.lang.Object[],int,java.lang.Object[])>(3, 0, null, 0, null);

        goto label6;

     label5:
        $r21 = "SAME1";

        $z5 = virtualinvoke $r21.<java.lang.String: boolean equals(java.lang.Object)>(r15);

        if $z5 == 0 goto label6;

        $r22 = virtualinvoke r0.<com.mycila.inject.internal.asm.xml.ASMContentHandler$FrameRule: com.mycila.inject.internal.asm.MethodVisitor getCodeVisitor()>();

        interfaceinvoke $r22.<com.mycila.inject.internal.asm.MethodVisitor: void visitFrame(int,int,java.lang.Object[],int,java.lang.Object[])>(4, 0, null, $i1, $r9);

     label6:
        return;
    }
}
