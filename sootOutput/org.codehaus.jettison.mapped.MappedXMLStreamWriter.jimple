public class org.codehaus.jettison.mapped.MappedXMLStreamWriter extends org.codehaus.jettison.AbstractXMLStreamWriter
{
    private static final java.lang.String MIXED_CONTENT_VALUE_KEY;
    private org.codehaus.jettison.mapped.MappedNamespaceConvention convention;
    protected java.io.Writer writer;
    private javax.xml.namespace.NamespaceContext namespaceContext;
    private java.lang.String valueKey;
    private java.util.Stack stack;
    private org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONProperty current;

    public void <init>(org.codehaus.jettison.mapped.MappedNamespaceConvention, java.io.Writer)
    {
        org.codehaus.jettison.mapped.MappedNamespaceConvention r2;
        java.io.Writer r3;
        org.codehaus.jettison.mapped.MappedXMLStreamWriter r0;
        java.util.Stack $r1;

        r0 := @this: org.codehaus.jettison.mapped.MappedXMLStreamWriter;

        r2 := @parameter0: org.codehaus.jettison.mapped.MappedNamespaceConvention;

        r3 := @parameter1: java.io.Writer;

        specialinvoke r0.<org.codehaus.jettison.AbstractXMLStreamWriter: void <init>()>();

        r0.<org.codehaus.jettison.mapped.MappedXMLStreamWriter: java.lang.String valueKey> = "$";

        $r1 = new java.util.Stack;

        specialinvoke $r1.<java.util.Stack: void <init>()>();

        r0.<org.codehaus.jettison.mapped.MappedXMLStreamWriter: java.util.Stack stack> = $r1;

        r0.<org.codehaus.jettison.mapped.MappedXMLStreamWriter: org.codehaus.jettison.mapped.MappedNamespaceConvention convention> = r2;

        r0.<org.codehaus.jettison.mapped.MappedXMLStreamWriter: java.io.Writer writer> = r3;

        r0.<org.codehaus.jettison.mapped.MappedXMLStreamWriter: javax.xml.namespace.NamespaceContext namespaceContext> = r2;

        return;
    }

    public javax.xml.namespace.NamespaceContext getNamespaceContext()
    {
        org.codehaus.jettison.mapped.MappedXMLStreamWriter r0;
        javax.xml.namespace.NamespaceContext $r1;

        r0 := @this: org.codehaus.jettison.mapped.MappedXMLStreamWriter;

        $r1 = r0.<org.codehaus.jettison.mapped.MappedXMLStreamWriter: javax.xml.namespace.NamespaceContext namespaceContext>;

        return $r1;
    }

    public void setNamespaceContext(javax.xml.namespace.NamespaceContext) throws javax.xml.stream.XMLStreamException
    {
        org.codehaus.jettison.mapped.MappedXMLStreamWriter r0;
        javax.xml.namespace.NamespaceContext r1;

        r0 := @this: org.codehaus.jettison.mapped.MappedXMLStreamWriter;

        r1 := @parameter0: javax.xml.namespace.NamespaceContext;

        r0.<org.codehaus.jettison.mapped.MappedXMLStreamWriter: javax.xml.namespace.NamespaceContext namespaceContext> = r1;

        return;
    }

    public java.lang.String getTextKey()
    {
        org.codehaus.jettison.mapped.MappedXMLStreamWriter r0;
        java.lang.String $r1;

        r0 := @this: org.codehaus.jettison.mapped.MappedXMLStreamWriter;

        $r1 = r0.<org.codehaus.jettison.mapped.MappedXMLStreamWriter: java.lang.String valueKey>;

        return $r1;
    }

    public void setValueKey(java.lang.String)
    {
        org.codehaus.jettison.mapped.MappedXMLStreamWriter r0;
        java.lang.String r1;

        r0 := @this: org.codehaus.jettison.mapped.MappedXMLStreamWriter;

        r1 := @parameter0: java.lang.String;

        r0.<org.codehaus.jettison.mapped.MappedXMLStreamWriter: java.lang.String valueKey> = r1;

        return;
    }

    public void writeStartDocument() throws javax.xml.stream.XMLStreamException
    {
        org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyObject $r1;
        org.codehaus.jettison.json.JSONObject $r2;
        org.codehaus.jettison.mapped.MappedXMLStreamWriter r0;
        java.util.Stack $r3;

        r0 := @this: org.codehaus.jettison.mapped.MappedXMLStreamWriter;

        $r1 = new org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyObject;

        $r2 = new org.codehaus.jettison.json.JSONObject;

        specialinvoke $r2.<org.codehaus.jettison.json.JSONObject: void <init>()>();

        specialinvoke $r1.<org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyObject: void <init>(org.codehaus.jettison.mapped.MappedXMLStreamWriter,java.lang.String,org.codehaus.jettison.json.JSONObject)>(r0, null, $r2);

        r0.<org.codehaus.jettison.mapped.MappedXMLStreamWriter: org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONProperty current> = $r1;

        $r3 = r0.<org.codehaus.jettison.mapped.MappedXMLStreamWriter: java.util.Stack stack>;

        virtualinvoke $r3.<java.util.Stack: void clear()>();

        return;
    }

    public void writeStartElement(java.lang.String, java.lang.String, java.lang.String) throws javax.xml.stream.XMLStreamException
    {
        org.codehaus.jettison.mapped.MappedNamespaceConvention $r6;
        java.util.Stack $r2;
        org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyString $r8;
        org.codehaus.jettison.mapped.MappedXMLStreamWriter r0;
        java.lang.String r3, r4, r5, $r7;
        org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONProperty $r1;

        r0 := @this: org.codehaus.jettison.mapped.MappedXMLStreamWriter;

        r3 := @parameter0: java.lang.String;

        r5 := @parameter1: java.lang.String;

        r4 := @parameter2: java.lang.String;

        $r2 = r0.<org.codehaus.jettison.mapped.MappedXMLStreamWriter: java.util.Stack stack>;

        $r1 = r0.<org.codehaus.jettison.mapped.MappedXMLStreamWriter: org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONProperty current>;

        virtualinvoke $r2.<java.util.Stack: java.lang.Object push(java.lang.Object)>($r1);

        $r6 = r0.<org.codehaus.jettison.mapped.MappedXMLStreamWriter: org.codehaus.jettison.mapped.MappedNamespaceConvention convention>;

        $r7 = virtualinvoke $r6.<org.codehaus.jettison.mapped.MappedNamespaceConvention: java.lang.String createKey(java.lang.String,java.lang.String,java.lang.String)>(r3, r4, r5);

        $r8 = new org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyString;

        specialinvoke $r8.<org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyString: void <init>(org.codehaus.jettison.mapped.MappedXMLStreamWriter,java.lang.String)>(r0, $r7);

        r0.<org.codehaus.jettison.mapped.MappedXMLStreamWriter: org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONProperty current> = $r8;

        return;
    }

    public void writeAttribute(java.lang.String, java.lang.String, java.lang.String, java.lang.String) throws javax.xml.stream.XMLStreamException
    {
        org.codehaus.jettison.mapped.MappedNamespaceConvention $r4, $r5, $r10;
        org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyString $r6;
        org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyObject $r9;
        org.codehaus.jettison.mapped.MappedXMLStreamWriter r0;
        java.lang.String r1, r2, r3, r7, $r11;
        org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONProperty $r8;
        boolean $z0;

        r0 := @this: org.codehaus.jettison.mapped.MappedXMLStreamWriter;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r7 := @parameter3: java.lang.String;

        $r4 = r0.<org.codehaus.jettison.mapped.MappedXMLStreamWriter: org.codehaus.jettison.mapped.MappedNamespaceConvention convention>;

        $z0 = virtualinvoke $r4.<org.codehaus.jettison.mapped.MappedNamespaceConvention: boolean isElement(java.lang.String,java.lang.String,java.lang.String)>(r1, r2, r3);

        if $z0 == 0 goto label1;

        $r10 = r0.<org.codehaus.jettison.mapped.MappedXMLStreamWriter: org.codehaus.jettison.mapped.MappedNamespaceConvention convention>;

        $r11 = virtualinvoke $r10.<org.codehaus.jettison.mapped.MappedNamespaceConvention: java.lang.String createKey(java.lang.String,java.lang.String,java.lang.String)>(r1, r2, r3);

        goto label2;

     label1:
        $r5 = r0.<org.codehaus.jettison.mapped.MappedXMLStreamWriter: org.codehaus.jettison.mapped.MappedNamespaceConvention convention>;

        $r11 = virtualinvoke $r5.<org.codehaus.jettison.mapped.MappedNamespaceConvention: java.lang.String createAttributeKey(java.lang.String,java.lang.String,java.lang.String)>(r1, r2, r3);

     label2:
        $r6 = new org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyString;

        specialinvoke $r6.<org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyString: void <init>(org.codehaus.jettison.mapped.MappedXMLStreamWriter,java.lang.String)>(r0, $r11);

        virtualinvoke $r6.<org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyString: void addText(java.lang.String)>(r7);

        $r8 = r0.<org.codehaus.jettison.mapped.MappedXMLStreamWriter: org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONProperty current>;

        $r9 = virtualinvoke $r8.<org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONProperty: org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyObject withProperty(org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONProperty,boolean)>($r6, 0);

        r0.<org.codehaus.jettison.mapped.MappedXMLStreamWriter: org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONProperty current> = $r9;

        return;
    }

    public void writeAttribute(java.lang.String, java.lang.String, java.lang.String) throws javax.xml.stream.XMLStreamException
    {
        org.codehaus.jettison.mapped.MappedXMLStreamWriter r0;
        java.lang.String r1, r2, r3;

        r0 := @this: org.codehaus.jettison.mapped.MappedXMLStreamWriter;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        virtualinvoke r0.<org.codehaus.jettison.mapped.MappedXMLStreamWriter: void writeAttribute(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(null, r1, r2, r3);

        return;
    }

    public void writeAttribute(java.lang.String, java.lang.String) throws javax.xml.stream.XMLStreamException
    {
        org.codehaus.jettison.mapped.MappedXMLStreamWriter r0;
        java.lang.String r1, r2;

        r0 := @this: org.codehaus.jettison.mapped.MappedXMLStreamWriter;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        virtualinvoke r0.<org.codehaus.jettison.mapped.MappedXMLStreamWriter: void writeAttribute(java.lang.String,java.lang.String,java.lang.String)>(null, r1, r2);

        return;
    }

    public void writeCharacters(java.lang.String) throws javax.xml.stream.XMLStreamException
    {
        org.codehaus.jettison.mapped.MappedXMLStreamWriter r0;
        java.lang.String r1;
        org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONProperty $r2;

        r0 := @this: org.codehaus.jettison.mapped.MappedXMLStreamWriter;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.codehaus.jettison.mapped.MappedXMLStreamWriter: org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONProperty current>;

        virtualinvoke $r2.<org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONProperty: void addText(java.lang.String)>(r1);

        return;
    }

    public void writeEndElement() throws javax.xml.stream.XMLStreamException
    {
        java.util.Stack $r1, $r2;
        org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyObject $r6;
        javax.xml.stream.XMLStreamException $r7;
        org.codehaus.jettison.mapped.MappedXMLStreamWriter r0;
        java.lang.Object $r3;
        org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONProperty $r4, $r5;
        boolean $z0;

        r0 := @this: org.codehaus.jettison.mapped.MappedXMLStreamWriter;

        $r1 = r0.<org.codehaus.jettison.mapped.MappedXMLStreamWriter: java.util.Stack stack>;

        $z0 = virtualinvoke $r1.<java.util.Stack: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r7 = new javax.xml.stream.XMLStreamException;

        specialinvoke $r7.<javax.xml.stream.XMLStreamException: void <init>(java.lang.String)>("Too many closing tags.");

        throw $r7;

     label1:
        $r2 = r0.<org.codehaus.jettison.mapped.MappedXMLStreamWriter: java.util.Stack stack>;

        $r3 = virtualinvoke $r2.<java.util.Stack: java.lang.Object pop()>();

        $r5 = (org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONProperty) $r3;

        $r4 = r0.<org.codehaus.jettison.mapped.MappedXMLStreamWriter: org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONProperty current>;

        $r6 = virtualinvoke $r5.<org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONProperty: org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyObject withProperty(org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONProperty)>($r4);

        r0.<org.codehaus.jettison.mapped.MappedXMLStreamWriter: org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONProperty current> = $r6;

        return;
    }

    public void writeEndDocument() throws javax.xml.stream.XMLStreamException
    {
        org.codehaus.jettison.json.JSONObject $r4;
        java.io.IOException $r7;
        java.util.Stack $r1;
        javax.xml.stream.XMLStreamException $r6, $r8;
        java.io.Writer $r5;
        org.codehaus.jettison.mapped.MappedXMLStreamWriter r0;
        java.lang.Object $r3;
        org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONProperty $r2;
        boolean $z0;

        r0 := @this: org.codehaus.jettison.mapped.MappedXMLStreamWriter;

        $r1 = r0.<org.codehaus.jettison.mapped.MappedXMLStreamWriter: java.util.Stack stack>;

        $z0 = virtualinvoke $r1.<java.util.Stack: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $r6 = new javax.xml.stream.XMLStreamException;

        specialinvoke $r6.<javax.xml.stream.XMLStreamException: void <init>(java.lang.String)>("Missing some closing tags.");

        throw $r6;

     label1:
        $r2 = r0.<org.codehaus.jettison.mapped.MappedXMLStreamWriter: org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONProperty current>;

        $r3 = virtualinvoke $r2.<org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONProperty: java.lang.Object getValue()>();

        $r4 = (org.codehaus.jettison.json.JSONObject) $r3;

        virtualinvoke r0.<org.codehaus.jettison.mapped.MappedXMLStreamWriter: void writeJSONObject(org.codehaus.jettison.json.JSONObject)>($r4);

     label2:
        $r5 = r0.<org.codehaus.jettison.mapped.MappedXMLStreamWriter: java.io.Writer writer>;

        virtualinvoke $r5.<java.io.Writer: void flush()>();

     label3:
        goto label5;

     label4:
        $r7 := @caughtexception;

        $r8 = new javax.xml.stream.XMLStreamException;

        specialinvoke $r8.<javax.xml.stream.XMLStreamException: void <init>(java.lang.Throwable)>($r7);

        throw $r8;

     label5:
        return;

        catch java.io.IOException from label2 to label3 with label4;
    }

    protected void writeJSONObject(org.codehaus.jettison.json.JSONObject) throws javax.xml.stream.XMLStreamException
    {
        org.codehaus.jettison.json.JSONObject r0;
        java.io.IOException $r4;
        org.codehaus.jettison.json.JSONException $r6;
        javax.xml.stream.XMLStreamException $r5, $r7;
        java.io.Writer $r2, $r3;
        org.codehaus.jettison.mapped.MappedXMLStreamWriter r1;

        r1 := @this: org.codehaus.jettison.mapped.MappedXMLStreamWriter;

        r0 := @parameter0: org.codehaus.jettison.json.JSONObject;

     label1:
        if r0 != null goto label2;

        $r3 = r1.<org.codehaus.jettison.mapped.MappedXMLStreamWriter: java.io.Writer writer>;

        virtualinvoke $r3.<java.io.Writer: void write(java.lang.String)>("null");

        goto label3;

     label2:
        $r2 = r1.<org.codehaus.jettison.mapped.MappedXMLStreamWriter: java.io.Writer writer>;

        virtualinvoke r0.<org.codehaus.jettison.json.JSONObject: java.io.Writer write(java.io.Writer)>($r2);

     label3:
        goto label6;

     label4:
        $r6 := @caughtexception;

        $r7 = new javax.xml.stream.XMLStreamException;

        specialinvoke $r7.<javax.xml.stream.XMLStreamException: void <init>(java.lang.Throwable)>($r6);

        throw $r7;

     label5:
        $r4 := @caughtexception;

        $r5 = new javax.xml.stream.XMLStreamException;

        specialinvoke $r5.<javax.xml.stream.XMLStreamException: void <init>(java.lang.Throwable)>($r4);

        throw $r5;

     label6:
        return;

        catch org.codehaus.jettison.json.JSONException from label1 to label3 with label4;
        catch java.io.IOException from label1 to label3 with label5;
    }

    public void close() throws javax.xml.stream.XMLStreamException
    {
        org.codehaus.jettison.mapped.MappedXMLStreamWriter r0;

        r0 := @this: org.codehaus.jettison.mapped.MappedXMLStreamWriter;

        return;
    }

    public void flush() throws javax.xml.stream.XMLStreamException
    {
        org.codehaus.jettison.mapped.MappedXMLStreamWriter r0;

        r0 := @this: org.codehaus.jettison.mapped.MappedXMLStreamWriter;

        return;
    }

    public java.lang.String getPrefix(java.lang.String) throws javax.xml.stream.XMLStreamException
    {
        org.codehaus.jettison.mapped.MappedXMLStreamWriter r0;
        java.lang.String r1;

        r0 := @this: org.codehaus.jettison.mapped.MappedXMLStreamWriter;

        r1 := @parameter0: java.lang.String;

        return null;
    }

    public java.lang.Object getProperty(java.lang.String) throws java.lang.IllegalArgumentException
    {
        org.codehaus.jettison.mapped.MappedXMLStreamWriter r0;
        java.lang.String r1;

        r0 := @this: org.codehaus.jettison.mapped.MappedXMLStreamWriter;

        r1 := @parameter0: java.lang.String;

        return null;
    }

    public void setDefaultNamespace(java.lang.String) throws javax.xml.stream.XMLStreamException
    {
        org.codehaus.jettison.mapped.MappedXMLStreamWriter r0;
        java.lang.String r1;

        r0 := @this: org.codehaus.jettison.mapped.MappedXMLStreamWriter;

        r1 := @parameter0: java.lang.String;

        return;
    }

    public void setPrefix(java.lang.String, java.lang.String) throws javax.xml.stream.XMLStreamException
    {
        org.codehaus.jettison.mapped.MappedXMLStreamWriter r0;
        java.lang.String r1, r2;

        r0 := @this: org.codehaus.jettison.mapped.MappedXMLStreamWriter;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        return;
    }

    public void writeDefaultNamespace(java.lang.String) throws javax.xml.stream.XMLStreamException
    {
        org.codehaus.jettison.mapped.MappedXMLStreamWriter r0;
        java.lang.String r1;

        r0 := @this: org.codehaus.jettison.mapped.MappedXMLStreamWriter;

        r1 := @parameter0: java.lang.String;

        return;
    }

    public void writeEntityRef(java.lang.String) throws javax.xml.stream.XMLStreamException
    {
        org.codehaus.jettison.mapped.MappedXMLStreamWriter r0;
        java.lang.String r1;

        r0 := @this: org.codehaus.jettison.mapped.MappedXMLStreamWriter;

        r1 := @parameter0: java.lang.String;

        return;
    }

    public void writeNamespace(java.lang.String, java.lang.String) throws javax.xml.stream.XMLStreamException
    {
        org.codehaus.jettison.mapped.MappedXMLStreamWriter r0;
        java.lang.String r1, r2;

        r0 := @this: org.codehaus.jettison.mapped.MappedXMLStreamWriter;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        return;
    }

    public void writeProcessingInstruction(java.lang.String) throws javax.xml.stream.XMLStreamException
    {
        org.codehaus.jettison.mapped.MappedXMLStreamWriter r0;
        java.lang.String r1;

        r0 := @this: org.codehaus.jettison.mapped.MappedXMLStreamWriter;

        r1 := @parameter0: java.lang.String;

        return;
    }

    public void writeProcessingInstruction(java.lang.String, java.lang.String) throws javax.xml.stream.XMLStreamException
    {
        org.codehaus.jettison.mapped.MappedXMLStreamWriter r0;
        java.lang.String r1, r2;

        r0 := @this: org.codehaus.jettison.mapped.MappedXMLStreamWriter;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        return;
    }

    static java.lang.String access$000(org.codehaus.jettison.mapped.MappedXMLStreamWriter)
    {
        org.codehaus.jettison.mapped.MappedXMLStreamWriter r0;
        java.lang.String $r1;

        r0 := @parameter0: org.codehaus.jettison.mapped.MappedXMLStreamWriter;

        $r1 = r0.<org.codehaus.jettison.mapped.MappedXMLStreamWriter: java.lang.String valueKey>;

        return $r1;
    }

    static org.codehaus.jettison.mapped.MappedNamespaceConvention access$100(org.codehaus.jettison.mapped.MappedXMLStreamWriter)
    {
        org.codehaus.jettison.mapped.MappedNamespaceConvention $r1;
        org.codehaus.jettison.mapped.MappedXMLStreamWriter r0;

        r0 := @parameter0: org.codehaus.jettison.mapped.MappedXMLStreamWriter;

        $r1 = r0.<org.codehaus.jettison.mapped.MappedXMLStreamWriter: org.codehaus.jettison.mapped.MappedNamespaceConvention convention>;

        return $r1;
    }

    public static void <clinit>()
    {
        <org.codehaus.jettison.mapped.MappedXMLStreamWriter: java.lang.String MIXED_CONTENT_VALUE_KEY> = "$";

        return;
    }
}
