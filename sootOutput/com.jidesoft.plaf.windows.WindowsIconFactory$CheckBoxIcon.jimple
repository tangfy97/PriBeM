class com.jidesoft.plaf.windows.WindowsIconFactory$CheckBoxIcon extends java.lang.Object implements javax.swing.Icon, java.io.Serializable, javax.swing.plaf.UIResource
{
    static final int csize;
    static int cw;
    static int ch;

    private void <init>()
    {
        com.jidesoft.plaf.windows.WindowsIconFactory$CheckBoxIcon r0;

        r0 := @this: com.jidesoft.plaf.windows.WindowsIconFactory$CheckBoxIcon;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void paintIcon(java.awt.Component, java.awt.Graphics, int, int)
    {
        java.awt.Color $r5, $r6, $r7, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21;
        com.jidesoft.plaf.windows.TMSchema$State r23;
        javax.swing.ButtonModel $r2, $r9, $r11;
        java.awt.Component r0;
        com.jidesoft.plaf.windows.TMSchema$Part $r24;
        com.jidesoft.plaf.windows.XPStyle $r3;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z21, $z22, $z23, $z24, $z25, $z26;
        com.jidesoft.swing.TristateButtonModel $r12, $r22;
        com.jidesoft.plaf.windows.WindowsIconFactory$CheckBoxIcon r13;
        com.jidesoft.plaf.windows.XPStyle$Skin $r25;
        com.jidesoft.swing.TristateCheckBox $r8, $r10;
        javax.swing.JCheckBox r1;
        java.awt.Graphics r4;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $i64, $i65, $i66, $i67, $i68;

        r13 := @this: com.jidesoft.plaf.windows.WindowsIconFactory$CheckBoxIcon;

        r0 := @parameter0: java.awt.Component;

        r4 := @parameter1: java.awt.Graphics;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        r1 = (javax.swing.JCheckBox) r0;

        $r2 = virtualinvoke r1.<javax.swing.JCheckBox: javax.swing.ButtonModel getModel()>();

        $r3 = staticinvoke <com.jidesoft.plaf.windows.XPStyle: com.jidesoft.plaf.windows.XPStyle getXP()>();

        if $r3 == null goto label10;

        $z10 = $r2 instanceof com.jidesoft.swing.TristateButtonModel;

        if $z10 == 0 goto label03;

        $r22 = (com.jidesoft.swing.TristateButtonModel) $r2;

        $z20 = virtualinvoke $r22.<com.jidesoft.swing.TristateButtonModel: boolean isMixed()>();

        if $z20 == 0 goto label03;

        r23 = <com.jidesoft.plaf.windows.TMSchema$State: com.jidesoft.plaf.windows.TMSchema$State MIXEDNORMAL>;

        $z21 = interfaceinvoke $r2.<javax.swing.ButtonModel: boolean isEnabled()>();

        if $z21 != 0 goto label01;

        r23 = <com.jidesoft.plaf.windows.TMSchema$State: com.jidesoft.plaf.windows.TMSchema$State MIXEDDISABLED>;

        goto label09;

     label01:
        $z22 = interfaceinvoke $r2.<javax.swing.ButtonModel: boolean isPressed()>();

        if $z22 == 0 goto label02;

        $z24 = interfaceinvoke $r2.<javax.swing.ButtonModel: boolean isArmed()>();

        if $z24 == 0 goto label02;

        r23 = <com.jidesoft.plaf.windows.TMSchema$State: com.jidesoft.plaf.windows.TMSchema$State MIXEDPRESSED>;

        goto label09;

     label02:
        $z23 = interfaceinvoke $r2.<javax.swing.ButtonModel: boolean isRollover()>();

        if $z23 == 0 goto label09;

        r23 = <com.jidesoft.plaf.windows.TMSchema$State: com.jidesoft.plaf.windows.TMSchema$State MIXEDHOT>;

        goto label09;

     label03:
        $z11 = interfaceinvoke $r2.<javax.swing.ButtonModel: boolean isSelected()>();

        if $z11 == 0 goto label06;

        r23 = <com.jidesoft.plaf.windows.TMSchema$State: com.jidesoft.plaf.windows.TMSchema$State CHECKEDNORMAL>;

        $z16 = interfaceinvoke $r2.<javax.swing.ButtonModel: boolean isEnabled()>();

        if $z16 != 0 goto label04;

        r23 = <com.jidesoft.plaf.windows.TMSchema$State: com.jidesoft.plaf.windows.TMSchema$State CHECKEDDISABLED>;

        goto label09;

     label04:
        $z17 = interfaceinvoke $r2.<javax.swing.ButtonModel: boolean isPressed()>();

        if $z17 == 0 goto label05;

        $z19 = interfaceinvoke $r2.<javax.swing.ButtonModel: boolean isArmed()>();

        if $z19 == 0 goto label05;

        r23 = <com.jidesoft.plaf.windows.TMSchema$State: com.jidesoft.plaf.windows.TMSchema$State CHECKEDPRESSED>;

        goto label09;

     label05:
        $z18 = interfaceinvoke $r2.<javax.swing.ButtonModel: boolean isRollover()>();

        if $z18 == 0 goto label09;

        r23 = <com.jidesoft.plaf.windows.TMSchema$State: com.jidesoft.plaf.windows.TMSchema$State CHECKEDHOT>;

        goto label09;

     label06:
        r23 = <com.jidesoft.plaf.windows.TMSchema$State: com.jidesoft.plaf.windows.TMSchema$State UNCHECKEDNORMAL>;

        $z12 = interfaceinvoke $r2.<javax.swing.ButtonModel: boolean isEnabled()>();

        if $z12 != 0 goto label07;

        r23 = <com.jidesoft.plaf.windows.TMSchema$State: com.jidesoft.plaf.windows.TMSchema$State UNCHECKEDDISABLED>;

        goto label09;

     label07:
        $z13 = interfaceinvoke $r2.<javax.swing.ButtonModel: boolean isPressed()>();

        if $z13 == 0 goto label08;

        $z15 = interfaceinvoke $r2.<javax.swing.ButtonModel: boolean isArmed()>();

        if $z15 == 0 goto label08;

        r23 = <com.jidesoft.plaf.windows.TMSchema$State: com.jidesoft.plaf.windows.TMSchema$State UNCHECKEDPRESSED>;

        goto label09;

     label08:
        $z14 = interfaceinvoke $r2.<javax.swing.ButtonModel: boolean isRollover()>();

        if $z14 == 0 goto label09;

        r23 = <com.jidesoft.plaf.windows.TMSchema$State: com.jidesoft.plaf.windows.TMSchema$State UNCHECKEDHOT>;

     label09:
        $r24 = <com.jidesoft.plaf.windows.TMSchema$Part: com.jidesoft.plaf.windows.TMSchema$Part BP_CHECKBOX>;

        $r25 = virtualinvoke $r3.<com.jidesoft.plaf.windows.XPStyle: com.jidesoft.plaf.windows.XPStyle$Skin getSkin(java.awt.Component,com.jidesoft.plaf.windows.TMSchema$Part)>(r0, $r24);

        virtualinvoke $r25.<com.jidesoft.plaf.windows.XPStyle$Skin: void paintSkin(java.awt.Graphics,int,int,com.jidesoft.plaf.windows.TMSchema$State)>(r4, i0, i1, r23);

        goto label24;

     label10:
        $z0 = virtualinvoke r1.<javax.swing.JCheckBox: boolean isBorderPaintedFlat()>();

        if $z0 != 0 goto label15;

        $r16 = staticinvoke <javax.swing.UIManager: java.awt.Color getColor(java.lang.Object)>("CheckBox.shadow");

        virtualinvoke r4.<java.awt.Graphics: void setColor(java.awt.Color)>($r16);

        $i42 = i0 + 11;

        virtualinvoke r4.<java.awt.Graphics: void drawLine(int,int,int,int)>(i0, i1, $i42, i1);

        $i44 = i1 + 1;

        $i43 = i1 + 11;

        virtualinvoke r4.<java.awt.Graphics: void drawLine(int,int,int,int)>(i0, $i44, i0, $i43);

        $r17 = staticinvoke <javax.swing.UIManager: java.awt.Color getColor(java.lang.Object)>("CheckBox.highlight");

        virtualinvoke r4.<java.awt.Graphics: void setColor(java.awt.Color)>($r17);

        $i47 = i0 + 12;

        $i46 = i0 + 12;

        $i45 = i1 + 12;

        virtualinvoke r4.<java.awt.Graphics: void drawLine(int,int,int,int)>($i47, i1, $i46, $i45);

        $i50 = i1 + 12;

        $i49 = i0 + 11;

        $i48 = i1 + 12;

        virtualinvoke r4.<java.awt.Graphics: void drawLine(int,int,int,int)>(i0, $i50, $i49, $i48);

        $r18 = staticinvoke <javax.swing.UIManager: java.awt.Color getColor(java.lang.Object)>("CheckBox.darkShadow");

        virtualinvoke r4.<java.awt.Graphics: void setColor(java.awt.Color)>($r18);

        $i54 = i0 + 1;

        $i53 = i1 + 1;

        $i52 = i0 + 10;

        $i51 = i1 + 1;

        virtualinvoke r4.<java.awt.Graphics: void drawLine(int,int,int,int)>($i54, $i53, $i52, $i51);

        $i58 = i0 + 1;

        $i57 = i1 + 2;

        $i56 = i0 + 1;

        $i55 = i1 + 10;

        virtualinvoke r4.<java.awt.Graphics: void drawLine(int,int,int,int)>($i58, $i57, $i56, $i55);

        $r19 = staticinvoke <javax.swing.UIManager: java.awt.Color getColor(java.lang.Object)>("CheckBox.light");

        virtualinvoke r4.<java.awt.Graphics: void setColor(java.awt.Color)>($r19);

        $i62 = i0 + 1;

        $i61 = i1 + 11;

        $i60 = i0 + 11;

        $i59 = i1 + 11;

        virtualinvoke r4.<java.awt.Graphics: void drawLine(int,int,int,int)>($i62, $i61, $i60, $i59);

        $i66 = i0 + 11;

        $i65 = i1 + 1;

        $i64 = i0 + 11;

        $i63 = i1 + 10;

        virtualinvoke r4.<java.awt.Graphics: void drawLine(int,int,int,int)>($i66, $i65, $i64, $i63);

        $z7 = interfaceinvoke $r2.<javax.swing.ButtonModel: boolean isPressed()>();

        if $z7 == 0 goto label11;

        $z9 = interfaceinvoke $r2.<javax.swing.ButtonModel: boolean isArmed()>();

        if $z9 != 0 goto label12;

     label11:
        $z8 = interfaceinvoke $r2.<javax.swing.ButtonModel: boolean isEnabled()>();

        if $z8 != 0 goto label13;

     label12:
        $r21 = staticinvoke <javax.swing.UIManager: java.awt.Color getColor(java.lang.Object)>("CheckBox.background");

        virtualinvoke r4.<java.awt.Graphics: void setColor(java.awt.Color)>($r21);

        goto label14;

     label13:
        $r20 = staticinvoke <javax.swing.UIManager: java.awt.Color getColor(java.lang.Object)>("CheckBox.interiorBackground");

        virtualinvoke r4.<java.awt.Graphics: void setColor(java.awt.Color)>($r20);

     label14:
        $i68 = i0 + 2;

        $i67 = i1 + 2;

        virtualinvoke r4.<java.awt.Graphics: void fillRect(int,int,int,int)>($i68, $i67, 9, 9);

        goto label20;

     label15:
        $r5 = staticinvoke <javax.swing.UIManager: java.awt.Color getColor(java.lang.Object)>("CheckBox.shadow");

        virtualinvoke r4.<java.awt.Graphics: void setColor(java.awt.Color)>($r5);

        $i3 = i0 + 1;

        $i2 = i1 + 1;

        virtualinvoke r4.<java.awt.Graphics: void drawRect(int,int,int,int)>($i3, $i2, 10, 10);

        $z1 = interfaceinvoke $r2.<javax.swing.ButtonModel: boolean isPressed()>();

        if $z1 == 0 goto label16;

        $z6 = interfaceinvoke $r2.<javax.swing.ButtonModel: boolean isArmed()>();

        if $z6 != 0 goto label17;

     label16:
        $z2 = interfaceinvoke $r2.<javax.swing.ButtonModel: boolean isEnabled()>();

        if $z2 != 0 goto label18;

     label17:
        $r15 = staticinvoke <javax.swing.UIManager: java.awt.Color getColor(java.lang.Object)>("CheckBox.background");

        virtualinvoke r4.<java.awt.Graphics: void setColor(java.awt.Color)>($r15);

        goto label19;

     label18:
        $r6 = staticinvoke <javax.swing.UIManager: java.awt.Color getColor(java.lang.Object)>("CheckBox.interiorBackground");

        virtualinvoke r4.<java.awt.Graphics: void setColor(java.awt.Color)>($r6);

     label19:
        $i5 = i0 + 2;

        $i4 = i1 + 2;

        virtualinvoke r4.<java.awt.Graphics: void fillRect(int,int,int,int)>($i5, $i4, 9, 9);

     label20:
        $z25 = interfaceinvoke $r2.<javax.swing.ButtonModel: boolean isEnabled()>();

        if $z25 == 0 goto label21;

        $r14 = staticinvoke <javax.swing.UIManager: java.awt.Color getColor(java.lang.Object)>("CheckBox.foreground");

        virtualinvoke r4.<java.awt.Graphics: void setColor(java.awt.Color)>($r14);

        goto label22;

     label21:
        $r7 = staticinvoke <javax.swing.UIManager: java.awt.Color getColor(java.lang.Object)>("CheckBox.shadow");

        virtualinvoke r4.<java.awt.Graphics: void setColor(java.awt.Color)>($r7);

     label22:
        $z3 = r0 instanceof com.jidesoft.swing.TristateCheckBox;

        if $z3 == 0 goto label23;

        $r8 = (com.jidesoft.swing.TristateCheckBox) r0;

        $r9 = virtualinvoke $r8.<com.jidesoft.swing.TristateCheckBox: javax.swing.ButtonModel getModel()>();

        $z4 = $r9 instanceof com.jidesoft.swing.TristateButtonModel;

        if $z4 == 0 goto label23;

        $r10 = (com.jidesoft.swing.TristateCheckBox) r0;

        $r11 = virtualinvoke $r10.<com.jidesoft.swing.TristateCheckBox: javax.swing.ButtonModel getModel()>();

        $r12 = (com.jidesoft.swing.TristateButtonModel) $r11;

        $z5 = virtualinvoke $r12.<com.jidesoft.swing.TristateButtonModel: boolean isMixed()>();

        if $z5 == 0 goto label23;

        virtualinvoke r13.<com.jidesoft.plaf.windows.WindowsIconFactory$CheckBoxIcon: void drawSquare(java.awt.Component,java.awt.Graphics,int,int)>(r0, r4, i0, i1);

        goto label24;

     label23:
        $z26 = interfaceinvoke $r2.<javax.swing.ButtonModel: boolean isSelected()>();

        if $z26 == 0 goto label24;

        $i9 = i0 + 9;

        $i8 = i1 + 3;

        $i7 = i0 + 9;

        $i6 = i1 + 3;

        virtualinvoke r4.<java.awt.Graphics: void drawLine(int,int,int,int)>($i9, $i8, $i7, $i6);

        $i13 = i0 + 8;

        $i12 = i1 + 4;

        $i11 = i0 + 9;

        $i10 = i1 + 4;

        virtualinvoke r4.<java.awt.Graphics: void drawLine(int,int,int,int)>($i13, $i12, $i11, $i10);

        $i17 = i0 + 7;

        $i16 = i1 + 5;

        $i15 = i0 + 9;

        $i14 = i1 + 5;

        virtualinvoke r4.<java.awt.Graphics: void drawLine(int,int,int,int)>($i17, $i16, $i15, $i14);

        $i21 = i0 + 6;

        $i20 = i1 + 6;

        $i19 = i0 + 8;

        $i18 = i1 + 6;

        virtualinvoke r4.<java.awt.Graphics: void drawLine(int,int,int,int)>($i21, $i20, $i19, $i18);

        $i25 = i0 + 3;

        $i24 = i1 + 7;

        $i23 = i0 + 7;

        $i22 = i1 + 7;

        virtualinvoke r4.<java.awt.Graphics: void drawLine(int,int,int,int)>($i25, $i24, $i23, $i22);

        $i29 = i0 + 4;

        $i28 = i1 + 8;

        $i27 = i0 + 6;

        $i26 = i1 + 8;

        virtualinvoke r4.<java.awt.Graphics: void drawLine(int,int,int,int)>($i29, $i28, $i27, $i26);

        $i33 = i0 + 5;

        $i32 = i1 + 9;

        $i31 = i0 + 5;

        $i30 = i1 + 9;

        virtualinvoke r4.<java.awt.Graphics: void drawLine(int,int,int,int)>($i33, $i32, $i31, $i30);

        $i37 = i0 + 3;

        $i36 = i1 + 5;

        $i35 = i0 + 3;

        $i34 = i1 + 5;

        virtualinvoke r4.<java.awt.Graphics: void drawLine(int,int,int,int)>($i37, $i36, $i35, $i34);

        $i41 = i0 + 3;

        $i40 = i1 + 6;

        $i39 = i0 + 4;

        $i38 = i1 + 6;

        virtualinvoke r4.<java.awt.Graphics: void drawLine(int,int,int,int)>($i41, $i40, $i39, $i38);

     label24:
        return;
    }

    protected void drawSquare(java.awt.Component, java.awt.Graphics, int, int)
    {
        java.awt.Component r2;
        com.jidesoft.plaf.windows.WindowsIconFactory$CheckBoxIcon r0;
        int $i0, $i1, i2, i3, i4, $i5, $i6, $i7, $i8, $i9, $i10;
        java.awt.Graphics r1;

        r0 := @this: com.jidesoft.plaf.windows.WindowsIconFactory$CheckBoxIcon;

        r2 := @parameter0: java.awt.Component;

        r1 := @parameter1: java.awt.Graphics;

        i3 := @parameter2: int;

        i4 := @parameter3: int;

        $i0 = virtualinvoke r0.<com.jidesoft.plaf.windows.WindowsIconFactory$CheckBoxIcon: int getIconWidth()>();

        $i1 = virtualinvoke r0.<com.jidesoft.plaf.windows.WindowsIconFactory$CheckBoxIcon: int getIconHeight()>();

        i2 = $i0 / 3;

        $i10 = i3 + i2;

        $i9 = i4 + i2;

        $i5 = i2 * 2;

        $i8 = $i0 - $i5;

        $i6 = i2 * 2;

        $i7 = $i1 - $i6;

        virtualinvoke r1.<java.awt.Graphics: void fillRect(int,int,int,int)>($i10, $i9, $i8, $i7);

        return;
    }

    public int getIconWidth()
    {
        com.jidesoft.plaf.windows.TMSchema$Part $r1;
        com.jidesoft.plaf.windows.WindowsIconFactory$CheckBoxIcon r3;
        com.jidesoft.plaf.windows.XPStyle$Skin $r2;
        com.jidesoft.plaf.windows.XPStyle $r0;
        int $i0, $i1, $i2, $i4;

        r3 := @this: com.jidesoft.plaf.windows.WindowsIconFactory$CheckBoxIcon;

        $r0 = staticinvoke <com.jidesoft.plaf.windows.XPStyle: com.jidesoft.plaf.windows.XPStyle getXP()>();

        if $r0 == null goto label2;

        $i0 = <com.jidesoft.plaf.windows.WindowsIconFactory$CheckBoxIcon: int cw>;

        $i4 = (int) -1;

        if $i0 != $i4 goto label1;

        $r1 = <com.jidesoft.plaf.windows.TMSchema$Part: com.jidesoft.plaf.windows.TMSchema$Part BP_CHECKBOX>;

        $r2 = virtualinvoke $r0.<com.jidesoft.plaf.windows.XPStyle: com.jidesoft.plaf.windows.XPStyle$Skin getSkin(java.awt.Component,com.jidesoft.plaf.windows.TMSchema$Part)>(null, $r1);

        $i2 = virtualinvoke $r2.<com.jidesoft.plaf.windows.XPStyle$Skin: int getWidth()>();

        <com.jidesoft.plaf.windows.WindowsIconFactory$CheckBoxIcon: int cw> = $i2;

     label1:
        $i1 = <com.jidesoft.plaf.windows.WindowsIconFactory$CheckBoxIcon: int cw>;

        return $i1;

     label2:
        return 13;
    }

    public int getIconHeight()
    {
        com.jidesoft.plaf.windows.TMSchema$Part $r1;
        com.jidesoft.plaf.windows.WindowsIconFactory$CheckBoxIcon r3;
        com.jidesoft.plaf.windows.XPStyle$Skin $r2;
        com.jidesoft.plaf.windows.XPStyle $r0;
        int $i0, $i1, $i2, $i4;

        r3 := @this: com.jidesoft.plaf.windows.WindowsIconFactory$CheckBoxIcon;

        $r0 = staticinvoke <com.jidesoft.plaf.windows.XPStyle: com.jidesoft.plaf.windows.XPStyle getXP()>();

        if $r0 == null goto label2;

        $i0 = <com.jidesoft.plaf.windows.WindowsIconFactory$CheckBoxIcon: int ch>;

        $i4 = (int) -1;

        if $i0 != $i4 goto label1;

        $r1 = <com.jidesoft.plaf.windows.TMSchema$Part: com.jidesoft.plaf.windows.TMSchema$Part BP_CHECKBOX>;

        $r2 = virtualinvoke $r0.<com.jidesoft.plaf.windows.XPStyle: com.jidesoft.plaf.windows.XPStyle$Skin getSkin(java.awt.Component,com.jidesoft.plaf.windows.TMSchema$Part)>(null, $r1);

        $i2 = virtualinvoke $r2.<com.jidesoft.plaf.windows.XPStyle$Skin: int getHeight()>();

        <com.jidesoft.plaf.windows.WindowsIconFactory$CheckBoxIcon: int ch> = $i2;

     label1:
        $i1 = <com.jidesoft.plaf.windows.WindowsIconFactory$CheckBoxIcon: int ch>;

        return $i1;

     label2:
        return 13;
    }

    void <init>(com.jidesoft.plaf.windows.WindowsIconFactory$1)
    {
        com.jidesoft.plaf.windows.WindowsIconFactory$CheckBoxIcon r0;
        com.jidesoft.plaf.windows.WindowsIconFactory$1 r1;

        r0 := @this: com.jidesoft.plaf.windows.WindowsIconFactory$CheckBoxIcon;

        r1 := @parameter0: com.jidesoft.plaf.windows.WindowsIconFactory$1;

        specialinvoke r0.<com.jidesoft.plaf.windows.WindowsIconFactory$CheckBoxIcon: void <init>()>();

        return;
    }

    static void <clinit>()
    {
        <com.jidesoft.plaf.windows.WindowsIconFactory$CheckBoxIcon: int csize> = 13;

        <com.jidesoft.plaf.windows.WindowsIconFactory$CheckBoxIcon: int cw> = -1;

        <com.jidesoft.plaf.windows.WindowsIconFactory$CheckBoxIcon: int ch> = -1;

        return;
    }
}
