public class org.codehaus.jackson.map.deser.std.StdDeserializer$BigIntegerDeserializer extends org.codehaus.jackson.map.deser.std.StdScalarDeserializer
{

    public void <init>()
    {
        org.codehaus.jackson.map.deser.std.StdDeserializer$BigIntegerDeserializer r0;

        r0 := @this: org.codehaus.jackson.map.deser.std.StdDeserializer$BigIntegerDeserializer;

        specialinvoke r0.<org.codehaus.jackson.map.deser.std.StdScalarDeserializer: void <init>(java.lang.Class)>(class "Ljava/math/BigInteger;");

        return;
    }

    public java.math.BigInteger deserialize(org.codehaus.jackson.JsonParser, org.codehaus.jackson.map.DeserializationContext) throws java.io.IOException, org.codehaus.jackson.JsonProcessingException
    {
        org.codehaus.jackson.JsonToken $r1, $r2, $r3, $r4;
        long $l3;
        org.codehaus.jackson.map.DeserializationContext r8;
        java.math.BigDecimal $r12;
        org.codehaus.jackson.map.JsonMappingException $r11, $r19;
        int[] $r14;
        int $i0, $i1, $i2;
        java.math.BigInteger $r7, $r13, $r16;
        java.lang.String $r5, $r6;
        org.codehaus.jackson.JsonParser r0;
        java.lang.IllegalArgumentException $r17;
        org.codehaus.jackson.JsonParser$NumberType $r15;
        org.codehaus.jackson.map.deser.std.StdDeserializer$BigIntegerDeserializer r9;
        java.lang.Class $r10, $r18;

        r9 := @this: org.codehaus.jackson.map.deser.std.StdDeserializer$BigIntegerDeserializer;

        r0 := @parameter0: org.codehaus.jackson.JsonParser;

        r8 := @parameter1: org.codehaus.jackson.map.DeserializationContext;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonToken getCurrentToken()>();

        $r2 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_NUMBER_INT>;

        if $r1 != $r2 goto label3;

        $r14 = <org.codehaus.jackson.map.deser.std.StdDeserializer$1: int[] $SwitchMap$org$codehaus$jackson$JsonParser$NumberType>;

        $r15 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonParser$NumberType getNumberType()>();

        $i1 = virtualinvoke $r15.<org.codehaus.jackson.JsonParser$NumberType: int ordinal()>();

        $i2 = $r14[$i1];

        lookupswitch($i2)
        {
            case 1: goto label1;
            case 2: goto label1;
            default: goto label2;
        };

     label1:
        $l3 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: long getLongValue()>();

        $r16 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>($l3);

        return $r16;

     label2:
        goto label5;

     label3:
        $r3 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_NUMBER_FLOAT>;

        if $r1 != $r3 goto label4;

        $r12 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: java.math.BigDecimal getDecimalValue()>();

        $r13 = virtualinvoke $r12.<java.math.BigDecimal: java.math.BigInteger toBigInteger()>();

        return $r13;

     label4:
        $r4 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_STRING>;

        if $r1 == $r4 goto label5;

        $r10 = r9.<org.codehaus.jackson.map.deser.std.StdDeserializer$BigIntegerDeserializer: java.lang.Class _valueClass>;

        $r11 = virtualinvoke r8.<org.codehaus.jackson.map.DeserializationContext: org.codehaus.jackson.map.JsonMappingException mappingException(java.lang.Class,org.codehaus.jackson.JsonToken)>($r10, $r1);

        throw $r11;

     label5:
        $r5 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: java.lang.String getText()>();

        $r6 = virtualinvoke $r5.<java.lang.String: java.lang.String trim()>();

        $i0 = virtualinvoke $r6.<java.lang.String: int length()>();

        if $i0 != 0 goto label6;

        return null;

     label6:
        $r7 = new java.math.BigInteger;

        specialinvoke $r7.<java.math.BigInteger: void <init>(java.lang.String)>($r6);

     label7:
        return $r7;

     label8:
        $r17 := @caughtexception;

        $r18 = r9.<org.codehaus.jackson.map.deser.std.StdDeserializer$BigIntegerDeserializer: java.lang.Class _valueClass>;

        $r19 = virtualinvoke r8.<org.codehaus.jackson.map.DeserializationContext: org.codehaus.jackson.map.JsonMappingException weirdStringException(java.lang.Class,java.lang.String)>($r18, "not a valid representation");

        throw $r19;

        catch java.lang.IllegalArgumentException from label6 to label7 with label8;
    }

    public volatile java.lang.Object deserialize(org.codehaus.jackson.JsonParser, org.codehaus.jackson.map.DeserializationContext) throws java.io.IOException, org.codehaus.jackson.JsonProcessingException
    {
        org.codehaus.jackson.map.deser.std.StdDeserializer$BigIntegerDeserializer r0;
        java.math.BigInteger $r3;
        org.codehaus.jackson.JsonParser r1;
        org.codehaus.jackson.map.DeserializationContext r2;

        r0 := @this: org.codehaus.jackson.map.deser.std.StdDeserializer$BigIntegerDeserializer;

        r1 := @parameter0: org.codehaus.jackson.JsonParser;

        r2 := @parameter1: org.codehaus.jackson.map.DeserializationContext;

        $r3 = virtualinvoke r0.<org.codehaus.jackson.map.deser.std.StdDeserializer$BigIntegerDeserializer: java.math.BigInteger deserialize(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext)>(r1, r2);

        return $r3;
    }
}
