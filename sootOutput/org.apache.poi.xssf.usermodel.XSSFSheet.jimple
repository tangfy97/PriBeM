public class org.apache.poi.xssf.usermodel.XSSFSheet extends org.apache.poi.POIXMLDocumentPart implements org.apache.poi.ss.usermodel.Sheet
{
    private static final org.apache.poi.util.POILogger logger;
    protected org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheet sheet;
    protected org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet worksheet;
    private java.util.TreeMap _rows;
    private java.util.List hyperlinks;
    private org.apache.poi.xssf.usermodel.helpers.ColumnHelper columnHelper;
    private org.apache.poi.xssf.model.CommentsTable sheetComments;
    private java.util.Map sharedFormulas;
    private java.util.TreeMap tables;
    private java.util.List arrayFormulas;
    private org.apache.poi.xssf.usermodel.XSSFDataValidationHelper dataValidationHelper;

    protected void <init>()
    {
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        org.apache.poi.xssf.usermodel.XSSFDataValidationHelper $r1;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        specialinvoke r0.<org.apache.poi.POIXMLDocumentPart: void <init>()>();

        $r1 = new org.apache.poi.xssf.usermodel.XSSFDataValidationHelper;

        specialinvoke $r1.<org.apache.poi.xssf.usermodel.XSSFDataValidationHelper: void <init>(org.apache.poi.xssf.usermodel.XSSFSheet)>(r0);

        r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.apache.poi.xssf.usermodel.XSSFDataValidationHelper dataValidationHelper> = $r1;

        virtualinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: void onDocumentCreate()>();

        return;
    }

    protected void <init>(org.apache.poi.openxml4j.opc.PackagePart, org.apache.poi.openxml4j.opc.PackageRelationship)
    {
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        org.apache.poi.openxml4j.opc.PackagePart r1;
        org.apache.poi.xssf.usermodel.XSSFDataValidationHelper $r3;
        org.apache.poi.openxml4j.opc.PackageRelationship r2;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        r1 := @parameter0: org.apache.poi.openxml4j.opc.PackagePart;

        r2 := @parameter1: org.apache.poi.openxml4j.opc.PackageRelationship;

        specialinvoke r0.<org.apache.poi.POIXMLDocumentPart: void <init>(org.apache.poi.openxml4j.opc.PackagePart,org.apache.poi.openxml4j.opc.PackageRelationship)>(r1, r2);

        $r3 = new org.apache.poi.xssf.usermodel.XSSFDataValidationHelper;

        specialinvoke $r3.<org.apache.poi.xssf.usermodel.XSSFDataValidationHelper: void <init>(org.apache.poi.xssf.usermodel.XSSFSheet)>(r0);

        r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.apache.poi.xssf.usermodel.XSSFDataValidationHelper dataValidationHelper> = $r3;

        return;
    }

    public org.apache.poi.xssf.usermodel.XSSFWorkbook getWorkbook()
    {
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        org.apache.poi.xssf.usermodel.XSSFWorkbook $r2;
        org.apache.poi.POIXMLDocumentPart $r1;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        $r1 = virtualinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.apache.poi.POIXMLDocumentPart getParent()>();

        $r2 = (org.apache.poi.xssf.usermodel.XSSFWorkbook) $r1;

        return $r2;
    }

    protected void onDocumentRead()
    {
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        org.apache.poi.openxml4j.opc.PackagePart $r1;
        java.io.IOException $r3;
        org.apache.poi.POIXMLException $r4;
        java.io.InputStream $r2;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

     label1:
        $r1 = virtualinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.apache.poi.openxml4j.opc.PackagePart getPackagePart()>();

        $r2 = virtualinvoke $r1.<org.apache.poi.openxml4j.opc.PackagePart: java.io.InputStream getInputStream()>();

        virtualinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: void read(java.io.InputStream)>($r2);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        $r4 = new org.apache.poi.POIXMLException;

        specialinvoke $r4.<org.apache.poi.POIXMLException: void <init>(java.lang.Throwable)>($r3);

        throw $r4;

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    protected void read(java.io.InputStream) throws java.io.IOException
    {
        org.apache.poi.xssf.usermodel.XSSFPivotTable $r13;
        org.apache.poi.openxml4j.opc.PackageRelationship $r15;
        org.apache.poi.xssf.usermodel.XSSFWorkbook $r11;
        org.apache.poi.POIXMLDocumentPart r10;
        java.lang.String $r16;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.WorksheetDocument $r2;
        org.apache.poi.POIXMLException $r20;
        boolean $z0, $z1, $z2, $z3;
        java.util.Iterator $r8;
        org.apache.poi.xssf.usermodel.XSSFTable $r17;
        org.apache.poi.xssf.model.CommentsTable $r18;
        org.apache.poi.xssf.usermodel.helpers.ColumnHelper $r5;
        java.util.List $r7, $r12;
        org.apache.xmlbeans.XmlException $r19;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet $r3, $r4, $r6;
        java.util.TreeMap $r14;
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        java.lang.Object $r9;
        java.io.InputStream r1;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        r1 := @parameter0: java.io.InputStream;

     label1:
        $r2 = staticinvoke <org.openxmlformats.schemas.spreadsheetml.x2006.main.WorksheetDocument$Factory: org.openxmlformats.schemas.spreadsheetml.x2006.main.WorksheetDocument parse(java.io.InputStream)>(r1);

        $r3 = interfaceinvoke $r2.<org.openxmlformats.schemas.spreadsheetml.x2006.main.WorksheetDocument: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet getWorksheet()>();

        r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet worksheet> = $r3;

     label2:
        goto label4;

     label3:
        $r19 := @caughtexception;

        $r20 = new org.apache.poi.POIXMLException;

        specialinvoke $r20.<org.apache.poi.POIXMLException: void <init>(java.lang.Throwable)>($r19);

        throw $r20;

     label4:
        $r4 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet worksheet>;

        specialinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: void initRows(org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet)>($r4);

        $r5 = new org.apache.poi.xssf.usermodel.helpers.ColumnHelper;

        $r6 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet worksheet>;

        specialinvoke $r5.<org.apache.poi.xssf.usermodel.helpers.ColumnHelper: void <init>(org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet)>($r6);

        r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.apache.poi.xssf.usermodel.helpers.ColumnHelper columnHelper> = $r5;

        $r7 = virtualinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: java.util.List getRelations()>();

        $r8 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>();

     label5:
        $z0 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label9;

        $r9 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        r10 = (org.apache.poi.POIXMLDocumentPart) $r9;

        $z1 = r10 instanceof org.apache.poi.xssf.model.CommentsTable;

        if $z1 == 0 goto label6;

        $r18 = (org.apache.poi.xssf.model.CommentsTable) r10;

        r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.apache.poi.xssf.model.CommentsTable sheetComments> = $r18;

     label6:
        $z2 = r10 instanceof org.apache.poi.xssf.usermodel.XSSFTable;

        if $z2 == 0 goto label7;

        $r14 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: java.util.TreeMap tables>;

        $r15 = virtualinvoke r10.<org.apache.poi.POIXMLDocumentPart: org.apache.poi.openxml4j.opc.PackageRelationship getPackageRelationship()>();

        $r16 = virtualinvoke $r15.<org.apache.poi.openxml4j.opc.PackageRelationship: java.lang.String getId()>();

        $r17 = (org.apache.poi.xssf.usermodel.XSSFTable) r10;

        virtualinvoke $r14.<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r16, $r17);

     label7:
        $z3 = r10 instanceof org.apache.poi.xssf.usermodel.XSSFPivotTable;

        if $z3 == 0 goto label8;

        $r11 = virtualinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.apache.poi.xssf.usermodel.XSSFWorkbook getWorkbook()>();

        $r12 = virtualinvoke $r11.<org.apache.poi.xssf.usermodel.XSSFWorkbook: java.util.List getPivotTables()>();

        $r13 = (org.apache.poi.xssf.usermodel.XSSFPivotTable) r10;

        interfaceinvoke $r12.<java.util.List: boolean add(java.lang.Object)>($r13);

     label8:
        goto label5;

     label9:
        specialinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: void initHyperlinks()>();

        return;

        catch org.apache.xmlbeans.XmlException from label1 to label2 with label3;
    }

    protected void onDocumentCreate()
    {
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet $r1, $r2, $r4;
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        org.apache.poi.xssf.usermodel.helpers.ColumnHelper $r3;
        java.util.ArrayList $r5;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        $r1 = staticinvoke <org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet newSheet()>();

        r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet worksheet> = $r1;

        $r2 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet worksheet>;

        specialinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: void initRows(org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet)>($r2);

        $r3 = new org.apache.poi.xssf.usermodel.helpers.ColumnHelper;

        $r4 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet worksheet>;

        specialinvoke $r3.<org.apache.poi.xssf.usermodel.helpers.ColumnHelper: void <init>(org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet)>($r4);

        r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.apache.poi.xssf.usermodel.helpers.ColumnHelper columnHelper> = $r3;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.poi.xssf.usermodel.XSSFSheet: java.util.List hyperlinks> = $r5;

        return;
    }

    private void initRows(org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet)
    {
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetData $r6;
        java.util.HashMap $r3;
        java.lang.Integer $r11;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTRow[] $r7;
        java.util.ArrayList $r4;
        org.apache.poi.xssf.usermodel.XSSFRow $r9;
        java.util.TreeMap $r1, $r2, $r10;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet r5;
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        int i0, $i1, i2;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTRow r8;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        r5 := @parameter0: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet;

        $r1 = new java.util.TreeMap;

        specialinvoke $r1.<java.util.TreeMap: void <init>()>();

        r0.<org.apache.poi.xssf.usermodel.XSSFSheet: java.util.TreeMap _rows> = $r1;

        $r2 = new java.util.TreeMap;

        specialinvoke $r2.<java.util.TreeMap: void <init>()>();

        r0.<org.apache.poi.xssf.usermodel.XSSFSheet: java.util.TreeMap tables> = $r2;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        r0.<org.apache.poi.xssf.usermodel.XSSFSheet: java.util.Map sharedFormulas> = $r3;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.poi.xssf.usermodel.XSSFSheet: java.util.List arrayFormulas> = $r4;

        $r6 = interfaceinvoke r5.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetData getSheetData()>();

        $r7 = interfaceinvoke $r6.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetData: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTRow[] getRowArray()>();

        i0 = lengthof $r7;

        i2 = 0;

     label1:
        if i2 >= i0 goto label2;

        r8 = $r7[i2];

        $r9 = new org.apache.poi.xssf.usermodel.XSSFRow;

        specialinvoke $r9.<org.apache.poi.xssf.usermodel.XSSFRow: void <init>(org.openxmlformats.schemas.spreadsheetml.x2006.main.CTRow,org.apache.poi.xssf.usermodel.XSSFSheet)>(r8, r0);

        $r10 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: java.util.TreeMap _rows>;

        $i1 = virtualinvoke $r9.<org.apache.poi.xssf.usermodel.XSSFRow: int getRowNum()>();

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        virtualinvoke $r10.<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r11, $r9);

        i2 = i2 + 1;

        goto label1;

     label2:
        return;
    }

    private void initHyperlinks()
    {
        org.apache.poi.xssf.usermodel.XSSFRelation $r4;
        org.apache.poi.openxml4j.opc.PackageRelationship r17;
        java.util.ArrayList $r1;
        org.apache.poi.openxml4j.opc.PackageRelationshipCollection $r6;
        int i0, i1;
        org.apache.poi.openxml4j.opc.PackagePart $r3;
        java.lang.String $r5, $r11, $r14;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTHyperlink[] $r9;
        org.apache.poi.POIXMLException $r16;
        boolean $z0;
        org.apache.poi.openxml4j.exceptions.InvalidFormatException $r15;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTHyperlinks $r8;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTHyperlink r10;
        org.apache.poi.xssf.usermodel.XSSFHyperlink $r12;
        java.util.List $r13;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet $r2, $r7;
        org.apache.poi.xssf.usermodel.XSSFSheet r0;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.poi.xssf.usermodel.XSSFSheet: java.util.List hyperlinks> = $r1;

        $r2 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet worksheet>;

        $z0 = interfaceinvoke $r2.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet: boolean isSetHyperlinks()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        $r3 = virtualinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.apache.poi.openxml4j.opc.PackagePart getPackagePart()>();

        $r4 = <org.apache.poi.xssf.usermodel.XSSFRelation: org.apache.poi.xssf.usermodel.XSSFRelation SHEET_HYPERLINKS>;

        $r5 = virtualinvoke $r4.<org.apache.poi.xssf.usermodel.XSSFRelation: java.lang.String getRelation()>();

        $r6 = virtualinvoke $r3.<org.apache.poi.openxml4j.opc.PackagePart: org.apache.poi.openxml4j.opc.PackageRelationshipCollection getRelationshipsByType(java.lang.String)>($r5);

        $r7 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet worksheet>;

        $r8 = interfaceinvoke $r7.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTHyperlinks getHyperlinks()>();

        $r9 = interfaceinvoke $r8.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTHyperlinks: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTHyperlink[] getHyperlinkArray()>();

        i0 = lengthof $r9;

        i1 = 0;

     label2:
        if i1 >= i0 goto label4;

        r10 = $r9[i1];

        r17 = null;

        $r11 = interfaceinvoke r10.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTHyperlink: java.lang.String getId()>();

        if $r11 == null goto label3;

        $r14 = interfaceinvoke r10.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTHyperlink: java.lang.String getId()>();

        r17 = virtualinvoke $r6.<org.apache.poi.openxml4j.opc.PackageRelationshipCollection: org.apache.poi.openxml4j.opc.PackageRelationship getRelationshipByID(java.lang.String)>($r14);

     label3:
        $r13 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: java.util.List hyperlinks>;

        $r12 = new org.apache.poi.xssf.usermodel.XSSFHyperlink;

        specialinvoke $r12.<org.apache.poi.xssf.usermodel.XSSFHyperlink: void <init>(org.openxmlformats.schemas.spreadsheetml.x2006.main.CTHyperlink,org.apache.poi.openxml4j.opc.PackageRelationship)>(r10, r17);

        interfaceinvoke $r13.<java.util.List: boolean add(java.lang.Object)>($r12);

        i1 = i1 + 1;

        goto label2;

     label4:
        goto label6;

     label5:
        $r15 := @caughtexception;

        $r16 = new org.apache.poi.POIXMLException;

        specialinvoke $r16.<org.apache.poi.POIXMLException: void <init>(java.lang.Throwable)>($r15);

        throw $r16;

     label6:
        return;

        catch org.apache.poi.openxml4j.exceptions.InvalidFormatException from label1 to label4 with label5;
    }

    private static org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet newSheet()
    {
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetFormatPr $r1;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet $r0;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetViews $r2;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetDimension $r4;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetView $r3;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTPageMargins $r5;

        $r0 = staticinvoke <org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet$Factory: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet newInstance()>();

        $r1 = interfaceinvoke $r0.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetFormatPr addNewSheetFormatPr()>();

        interfaceinvoke $r1.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetFormatPr: void setDefaultRowHeight(double)>(15.0);

        $r2 = interfaceinvoke $r0.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetViews addNewSheetViews()>();

        $r3 = interfaceinvoke $r2.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetViews: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetView addNewSheetView()>();

        interfaceinvoke $r3.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetView: void setWorkbookViewId(long)>(0L);

        $r4 = interfaceinvoke $r0.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetDimension addNewDimension()>();

        interfaceinvoke $r4.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetDimension: void setRef(java.lang.String)>("A1");

        interfaceinvoke $r0.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetData addNewSheetData()>();

        $r5 = interfaceinvoke $r0.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTPageMargins addNewPageMargins()>();

        interfaceinvoke $r5.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTPageMargins: void setBottom(double)>(0.75);

        interfaceinvoke $r5.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTPageMargins: void setFooter(double)>(0.3);

        interfaceinvoke $r5.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTPageMargins: void setHeader(double)>(0.3);

        interfaceinvoke $r5.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTPageMargins: void setLeft(double)>(0.7);

        interfaceinvoke $r5.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTPageMargins: void setRight(double)>(0.7);

        interfaceinvoke $r5.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTPageMargins: void setTop(double)>(0.75);

        return $r0;
    }

    public org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet getCTWorksheet()
    {
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet $r1;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        $r1 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet worksheet>;

        return $r1;
    }

    public org.apache.poi.xssf.usermodel.helpers.ColumnHelper getColumnHelper()
    {
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        org.apache.poi.xssf.usermodel.helpers.ColumnHelper $r1;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        $r1 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.apache.poi.xssf.usermodel.helpers.ColumnHelper columnHelper>;

        return $r1;
    }

    public java.lang.String getSheetName()
    {
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        java.lang.String $r2;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheet $r1;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        $r1 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheet sheet>;

        $r2 = interfaceinvoke $r1.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheet: java.lang.String getName()>();

        return $r2;
    }

    public int addMergedRegion(org.apache.poi.ss.util.CellRangeAddress)
    {
        org.apache.poi.ss.util.CellRangeAddress r0;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTMergeCell $r5;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTMergeCells $r8;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet $r3, $r4, $r7;
        org.apache.poi.ss.SpreadsheetVersion $r1;
        org.apache.poi.xssf.usermodel.XSSFSheet r2;
        int $i0;
        java.lang.String $r6;
        boolean $z0;

        r2 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        r0 := @parameter0: org.apache.poi.ss.util.CellRangeAddress;

        $r1 = <org.apache.poi.ss.SpreadsheetVersion: org.apache.poi.ss.SpreadsheetVersion EXCEL2007>;

        virtualinvoke r0.<org.apache.poi.ss.util.CellRangeAddress: void validate(org.apache.poi.ss.SpreadsheetVersion)>($r1);

        specialinvoke r2.<org.apache.poi.xssf.usermodel.XSSFSheet: void validateArrayFormulas(org.apache.poi.ss.util.CellRangeAddress)>(r0);

        $r3 = r2.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet worksheet>;

        $z0 = interfaceinvoke $r3.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet: boolean isSetMergeCells()>();

        if $z0 == 0 goto label1;

        $r7 = r2.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet worksheet>;

        $r8 = interfaceinvoke $r7.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTMergeCells getMergeCells()>();

        goto label2;

     label1:
        $r4 = r2.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet worksheet>;

        $r8 = interfaceinvoke $r4.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTMergeCells addNewMergeCells()>();

     label2:
        $r5 = interfaceinvoke $r8.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTMergeCells: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTMergeCell addNewMergeCell()>();

        $r6 = virtualinvoke r0.<org.apache.poi.ss.util.CellRangeAddress: java.lang.String formatAsString()>();

        interfaceinvoke $r5.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTMergeCell: void setRef(java.lang.String)>($r6);

        $i0 = interfaceinvoke $r8.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTMergeCells: int sizeOfMergeCellArray()>();

        return $i0;
    }

    private void validateArrayFormulas(org.apache.poi.ss.util.CellRangeAddress)
    {
        java.lang.IllegalStateException $r12;
        org.apache.poi.xssf.usermodel.XSSFRow $r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i9, i10;
        java.lang.String $r7, $r11;
        boolean $z0, $z1, $z2;
        org.apache.poi.ss.util.CellRangeAddress r0, $r4;
        org.apache.poi.xssf.usermodel.XSSFSheet r1;
        java.lang.StringBuilder $r5, $r6, $r8, $r9, $r10;
        org.apache.poi.xssf.usermodel.XSSFCell $r3;

        r1 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        r0 := @parameter0: org.apache.poi.ss.util.CellRangeAddress;

        $i0 = virtualinvoke r0.<org.apache.poi.ss.util.CellRangeAddress: int getFirstRow()>();

        $i1 = virtualinvoke r0.<org.apache.poi.ss.util.CellRangeAddress: int getFirstColumn()>();

        $i2 = virtualinvoke r0.<org.apache.poi.ss.util.CellRangeAddress: int getLastRow()>();

        $i3 = virtualinvoke r0.<org.apache.poi.ss.util.CellRangeAddress: int getLastColumn()>();

        i9 = $i0;

     label1:
        if i9 > $i2 goto label8;

        i10 = $i1;

     label2:
        if i10 > $i3 goto label7;

        $r2 = virtualinvoke r1.<org.apache.poi.xssf.usermodel.XSSFSheet: org.apache.poi.xssf.usermodel.XSSFRow getRow(int)>(i9);

        if $r2 != null goto label3;

        goto label6;

     label3:
        $r3 = virtualinvoke $r2.<org.apache.poi.xssf.usermodel.XSSFRow: org.apache.poi.xssf.usermodel.XSSFCell getCell(int)>(i10);

        if $r3 != null goto label4;

        goto label6;

     label4:
        $z0 = virtualinvoke $r3.<org.apache.poi.xssf.usermodel.XSSFCell: boolean isPartOfArrayFormulaGroup()>();

        if $z0 == 0 goto label6;

        $r4 = virtualinvoke $r3.<org.apache.poi.xssf.usermodel.XSSFCell: org.apache.poi.ss.util.CellRangeAddress getArrayFormulaRange()>();

        $i4 = virtualinvoke $r4.<org.apache.poi.ss.util.CellRangeAddress: int getNumberOfCells()>();

        if $i4 <= 1 goto label6;

        $i5 = virtualinvoke r0.<org.apache.poi.ss.util.CellRangeAddress: int getFirstRow()>();

        $i6 = virtualinvoke r0.<org.apache.poi.ss.util.CellRangeAddress: int getFirstColumn()>();

        $z1 = virtualinvoke $r4.<org.apache.poi.ss.util.CellRangeAddress: boolean isInRange(int,int)>($i5, $i6);

        if $z1 != 0 goto label5;

        $i7 = virtualinvoke r0.<org.apache.poi.ss.util.CellRangeAddress: int getFirstRow()>();

        $i8 = virtualinvoke r0.<org.apache.poi.ss.util.CellRangeAddress: int getFirstColumn()>();

        $z2 = virtualinvoke $r4.<org.apache.poi.ss.util.CellRangeAddress: boolean isInRange(int,int)>($i7, $i8);

        if $z2 == 0 goto label6;

     label5:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The range ");

        $r7 = virtualinvoke r0.<org.apache.poi.ss.util.CellRangeAddress: java.lang.String formatAsString()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" intersects with a multi-cell array formula. ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("You cannot merge cells of an array.");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        $r12 = new java.lang.IllegalStateException;

        specialinvoke $r12.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r11);

        throw $r12;

     label6:
        i10 = i10 + 1;

        goto label2;

     label7:
        i9 = i9 + 1;

        goto label1;

     label8:
        return;
    }

    public void autoSizeColumn(int)
    {
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        int i0;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        i0 := @parameter0: int;

        virtualinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: void autoSizeColumn(int,boolean)>(i0, 0);

        return;
    }

    public void autoSizeColumn(int, boolean)
    {
        long $l4;
        org.apache.poi.xssf.usermodel.helpers.ColumnHelper $r1;
        byte $b1, $b2;
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        int i0, $i3, $i5;
        boolean z0;
        double $d0, $d1, d2;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        $d0 = staticinvoke <org.apache.poi.ss.util.SheetUtil: double getColumnWidth(org.apache.poi.ss.usermodel.Sheet,int,boolean)>(r0, i0, z0);

        $b1 = $d0 cmpl -1.0;

        if $b1 == 0 goto label2;

        d2 = $d0 * 256.0;

        $d1 = (double) 65280;

        $b2 = d2 cmpl $d1;

        $i5 = (int) $b2;

        if $i5 <= 0 goto label1;

        d2 = (double) 65280;

     label1:
        $i3 = (int) d2;

        virtualinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: void setColumnWidth(int,int)>(i0, $i3);

        $r1 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.apache.poi.xssf.usermodel.helpers.ColumnHelper columnHelper>;

        $l4 = (long) i0;

        virtualinvoke $r1.<org.apache.poi.xssf.usermodel.helpers.ColumnHelper: void setColBestFit(long,boolean)>($l4, 1);

     label2:
        return;
    }

    public org.apache.poi.xssf.usermodel.XSSFDrawing createDrawingPatriarch()
    {
        org.apache.poi.xssf.usermodel.XSSFFactory $r22;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTDrawing $r1, $r27;
        org.apache.poi.openxml4j.opc.PackagePart $r16;
        boolean $z0, $z1, $z2;
        org.apache.poi.util.POILogger $r5;
        java.util.List $r2;
        org.apache.poi.xssf.usermodel.XSSFDrawing r12, r28;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet $r26;
        org.apache.poi.openxml4j.opc.OPCPackage $r17;
        java.lang.StringBuilder $r4, $r6, $r8, $r9;
        org.apache.poi.xssf.usermodel.XSSFRelation $r18, $r21;
        org.apache.poi.openxml4j.opc.PackageRelationship $r13, $r24;
        java.util.ArrayList $r20;
        org.apache.poi.POIXMLDocumentPart $r23, r29;
        int $i0, i1;
        java.lang.String $r7, $r10, $r14, $r15, $r19, $r25;
        java.util.Iterator $r3;
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        java.lang.Object $r11;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        r28 = null;

        $r1 = virtualinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTDrawing getCTDrawing()>();

        if $r1 != null goto label1;

        $r16 = virtualinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.apache.poi.openxml4j.opc.PackagePart getPackagePart()>();

        $r17 = virtualinvoke $r16.<org.apache.poi.openxml4j.opc.PackagePart: org.apache.poi.openxml4j.opc.OPCPackage getPackage()>();

        $r18 = <org.apache.poi.xssf.usermodel.XSSFRelation: org.apache.poi.xssf.usermodel.XSSFRelation DRAWINGS>;

        $r19 = virtualinvoke $r18.<org.apache.poi.xssf.usermodel.XSSFRelation: java.lang.String getContentType()>();

        $r20 = virtualinvoke $r17.<org.apache.poi.openxml4j.opc.OPCPackage: java.util.ArrayList getPartsByContentType(java.lang.String)>($r19);

        $i0 = virtualinvoke $r20.<java.util.ArrayList: int size()>();

        i1 = $i0 + 1;

        $r21 = <org.apache.poi.xssf.usermodel.XSSFRelation: org.apache.poi.xssf.usermodel.XSSFRelation DRAWINGS>;

        $r22 = staticinvoke <org.apache.poi.xssf.usermodel.XSSFFactory: org.apache.poi.xssf.usermodel.XSSFFactory getInstance()>();

        $r23 = virtualinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.apache.poi.POIXMLDocumentPart createRelationship(org.apache.poi.POIXMLRelation,org.apache.poi.POIXMLFactory,int)>($r21, $r22, i1);

        r28 = (org.apache.poi.xssf.usermodel.XSSFDrawing) $r23;

        $r24 = virtualinvoke r28.<org.apache.poi.xssf.usermodel.XSSFDrawing: org.apache.poi.openxml4j.opc.PackageRelationship getPackageRelationship()>();

        $r25 = virtualinvoke $r24.<org.apache.poi.openxml4j.opc.PackageRelationship: java.lang.String getId()>();

        $r26 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet worksheet>;

        $r27 = interfaceinvoke $r26.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTDrawing addNewDrawing()>();

        interfaceinvoke $r27.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTDrawing: void setId(java.lang.String)>($r25);

        goto label5;

     label1:
        $r2 = virtualinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: java.util.List getRelations()>();

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r11 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r29 = (org.apache.poi.POIXMLDocumentPart) $r11;

        $z1 = r29 instanceof org.apache.poi.xssf.usermodel.XSSFDrawing;

        if $z1 == 0 goto label3;

        r12 = (org.apache.poi.xssf.usermodel.XSSFDrawing) r29;

        $r13 = virtualinvoke r12.<org.apache.poi.xssf.usermodel.XSSFDrawing: org.apache.poi.openxml4j.opc.PackageRelationship getPackageRelationship()>();

        $r14 = virtualinvoke $r13.<org.apache.poi.openxml4j.opc.PackageRelationship: java.lang.String getId()>();

        $r15 = interfaceinvoke $r1.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTDrawing: java.lang.String getId()>();

        $z2 = virtualinvoke $r14.<java.lang.String: boolean equals(java.lang.Object)>($r15);

        if $z2 == 0 goto label4;

        r28 = r12;

        goto label4;

     label3:
        goto label2;

     label4:
        if r28 != null goto label5;

        $r5 = <org.apache.poi.xssf.usermodel.XSSFSheet: org.apache.poi.util.POILogger logger>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t find drawing with id=");

        $r7 = interfaceinvoke $r1.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTDrawing: java.lang.String getId()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in the list of the sheet\'s relationships");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r5.<org.apache.poi.util.POILogger: void log(int,java.lang.Object)>(7, $r10);

     label5:
        return r28;
    }

    protected org.apache.poi.xssf.usermodel.XSSFVMLDrawing getVMLDrawing(boolean)
    {
        org.apache.poi.xssf.usermodel.XSSFFactory $r22;
        org.apache.poi.openxml4j.opc.PackagePart $r16;
        boolean $z0, $z1, $z2, z3;
        org.apache.poi.xssf.usermodel.XSSFVMLDrawing r12, r28;
        org.apache.poi.util.POILogger $r5;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTLegacyDrawing $r1, $r27;
        java.util.List $r2;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet $r26;
        org.apache.poi.openxml4j.opc.OPCPackage $r17;
        java.lang.StringBuilder $r4, $r6, $r8, $r9;
        org.apache.poi.xssf.usermodel.XSSFRelation $r18, $r21;
        org.apache.poi.openxml4j.opc.PackageRelationship $r13, $r24;
        java.util.ArrayList $r20;
        org.apache.poi.POIXMLDocumentPart $r23, r29;
        int $i0, i1;
        java.lang.String $r7, $r10, $r14, $r15, $r19, $r25;
        java.util.Iterator $r3;
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        java.lang.Object $r11;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        z3 := @parameter0: boolean;

        r28 = null;

        $r1 = virtualinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTLegacyDrawing getCTLegacyDrawing()>();

        if $r1 != null goto label1;

        if z3 == 0 goto label5;

        $r16 = virtualinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.apache.poi.openxml4j.opc.PackagePart getPackagePart()>();

        $r17 = virtualinvoke $r16.<org.apache.poi.openxml4j.opc.PackagePart: org.apache.poi.openxml4j.opc.OPCPackage getPackage()>();

        $r18 = <org.apache.poi.xssf.usermodel.XSSFRelation: org.apache.poi.xssf.usermodel.XSSFRelation VML_DRAWINGS>;

        $r19 = virtualinvoke $r18.<org.apache.poi.xssf.usermodel.XSSFRelation: java.lang.String getContentType()>();

        $r20 = virtualinvoke $r17.<org.apache.poi.openxml4j.opc.OPCPackage: java.util.ArrayList getPartsByContentType(java.lang.String)>($r19);

        $i0 = virtualinvoke $r20.<java.util.ArrayList: int size()>();

        i1 = $i0 + 1;

        $r21 = <org.apache.poi.xssf.usermodel.XSSFRelation: org.apache.poi.xssf.usermodel.XSSFRelation VML_DRAWINGS>;

        $r22 = staticinvoke <org.apache.poi.xssf.usermodel.XSSFFactory: org.apache.poi.xssf.usermodel.XSSFFactory getInstance()>();

        $r23 = virtualinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.apache.poi.POIXMLDocumentPart createRelationship(org.apache.poi.POIXMLRelation,org.apache.poi.POIXMLFactory,int)>($r21, $r22, i1);

        r28 = (org.apache.poi.xssf.usermodel.XSSFVMLDrawing) $r23;

        $r24 = virtualinvoke r28.<org.apache.poi.xssf.usermodel.XSSFVMLDrawing: org.apache.poi.openxml4j.opc.PackageRelationship getPackageRelationship()>();

        $r25 = virtualinvoke $r24.<org.apache.poi.openxml4j.opc.PackageRelationship: java.lang.String getId()>();

        $r26 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet worksheet>;

        $r27 = interfaceinvoke $r26.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTLegacyDrawing addNewLegacyDrawing()>();

        interfaceinvoke $r27.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTLegacyDrawing: void setId(java.lang.String)>($r25);

        goto label5;

     label1:
        $r2 = virtualinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: java.util.List getRelations()>();

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r11 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r29 = (org.apache.poi.POIXMLDocumentPart) $r11;

        $z1 = r29 instanceof org.apache.poi.xssf.usermodel.XSSFVMLDrawing;

        if $z1 == 0 goto label3;

        r12 = (org.apache.poi.xssf.usermodel.XSSFVMLDrawing) r29;

        $r13 = virtualinvoke r12.<org.apache.poi.xssf.usermodel.XSSFVMLDrawing: org.apache.poi.openxml4j.opc.PackageRelationship getPackageRelationship()>();

        $r14 = virtualinvoke $r13.<org.apache.poi.openxml4j.opc.PackageRelationship: java.lang.String getId()>();

        $r15 = interfaceinvoke $r1.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTLegacyDrawing: java.lang.String getId()>();

        $z2 = virtualinvoke $r14.<java.lang.String: boolean equals(java.lang.Object)>($r15);

        if $z2 == 0 goto label4;

        r28 = r12;

        goto label4;

     label3:
        goto label2;

     label4:
        if r28 != null goto label5;

        $r5 = <org.apache.poi.xssf.usermodel.XSSFSheet: org.apache.poi.util.POILogger logger>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t find VML drawing with id=");

        $r7 = interfaceinvoke $r1.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTLegacyDrawing: java.lang.String getId()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in the list of the sheet\'s relationships");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r5.<org.apache.poi.util.POILogger: void log(int,java.lang.Object)>(7, $r10);

     label5:
        return r28;
    }

    protected org.openxmlformats.schemas.spreadsheetml.x2006.main.CTDrawing getCTDrawing()
    {
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTDrawing $r2;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet $r1;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        $r1 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet worksheet>;

        $r2 = interfaceinvoke $r1.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTDrawing getDrawing()>();

        return $r2;
    }

    protected org.openxmlformats.schemas.spreadsheetml.x2006.main.CTLegacyDrawing getCTLegacyDrawing()
    {
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet $r1;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTLegacyDrawing $r2;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        $r1 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet worksheet>;

        $r2 = interfaceinvoke $r1.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTLegacyDrawing getLegacyDrawing()>();

        return $r2;
    }

    public void createFreezePane(int, int)
    {
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        int i0, i1;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        virtualinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: void createFreezePane(int,int,int,int)>(i0, i1, i0, i1);

        return;
    }

    public void createFreezePane(int, int, int, int)
    {
        org.apache.poi.ss.util.CellReference $r3, $r6, $r9;
        int i0, i1, i2, i3;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTPane $r2;
        java.lang.String $r4, $r7, $r10;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.STPane$Enum $r5, $r8, $r11, $r14;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetView $r1;
        boolean $z0, $z1, $z2, $z3;
        double $d0, $d1;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSelection $r13;
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.STPaneState$Enum $r12;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i3 := @parameter2: int;

        i2 := @parameter3: int;

        $r1 = specialinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetView getDefaultSheetView()>();

        if i0 != 0 goto label02;

        if i1 != 0 goto label02;

        $z3 = interfaceinvoke $r1.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetView: boolean isSetPane()>();

        if $z3 == 0 goto label01;

        interfaceinvoke $r1.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetView: void unsetPane()>();

     label01:
        interfaceinvoke $r1.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetView: void setSelectionArray(org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSelection[])>(null);

        return;

     label02:
        $z0 = interfaceinvoke $r1.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetView: boolean isSetPane()>();

        if $z0 != 0 goto label03;

        interfaceinvoke $r1.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetView: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTPane addNewPane()>();

     label03:
        $r2 = interfaceinvoke $r1.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetView: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTPane getPane()>();

        if i0 <= 0 goto label04;

        $d1 = (double) i0;

        interfaceinvoke $r2.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTPane: void setXSplit(double)>($d1);

        goto label05;

     label04:
        $z1 = interfaceinvoke $r2.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTPane: boolean isSetXSplit()>();

        if $z1 == 0 goto label05;

        interfaceinvoke $r2.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTPane: void unsetXSplit()>();

     label05:
        if i1 <= 0 goto label06;

        $d0 = (double) i1;

        interfaceinvoke $r2.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTPane: void setYSplit(double)>($d0);

        goto label07;

     label06:
        $z2 = interfaceinvoke $r2.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTPane: boolean isSetYSplit()>();

        if $z2 == 0 goto label07;

        interfaceinvoke $r2.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTPane: void unsetYSplit()>();

     label07:
        $r12 = <org.openxmlformats.schemas.spreadsheetml.x2006.main.STPaneState: org.openxmlformats.schemas.spreadsheetml.x2006.main.STPaneState$Enum FROZEN>;

        interfaceinvoke $r2.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTPane: void setState(org.openxmlformats.schemas.spreadsheetml.x2006.main.STPaneState$Enum)>($r12);

        if i1 != 0 goto label08;

        $r9 = new org.apache.poi.ss.util.CellReference;

        specialinvoke $r9.<org.apache.poi.ss.util.CellReference: void <init>(int,int)>(0, i3);

        $r10 = virtualinvoke $r9.<org.apache.poi.ss.util.CellReference: java.lang.String formatAsString()>();

        interfaceinvoke $r2.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTPane: void setTopLeftCell(java.lang.String)>($r10);

        $r11 = <org.openxmlformats.schemas.spreadsheetml.x2006.main.STPane: org.openxmlformats.schemas.spreadsheetml.x2006.main.STPane$Enum TOP_RIGHT>;

        interfaceinvoke $r2.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTPane: void setActivePane(org.openxmlformats.schemas.spreadsheetml.x2006.main.STPane$Enum)>($r11);

        goto label10;

     label08:
        if i0 != 0 goto label09;

        $r6 = new org.apache.poi.ss.util.CellReference;

        specialinvoke $r6.<org.apache.poi.ss.util.CellReference: void <init>(int,int)>(i2, 0);

        $r7 = virtualinvoke $r6.<org.apache.poi.ss.util.CellReference: java.lang.String formatAsString()>();

        interfaceinvoke $r2.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTPane: void setTopLeftCell(java.lang.String)>($r7);

        $r8 = <org.openxmlformats.schemas.spreadsheetml.x2006.main.STPane: org.openxmlformats.schemas.spreadsheetml.x2006.main.STPane$Enum BOTTOM_LEFT>;

        interfaceinvoke $r2.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTPane: void setActivePane(org.openxmlformats.schemas.spreadsheetml.x2006.main.STPane$Enum)>($r8);

        goto label10;

     label09:
        $r3 = new org.apache.poi.ss.util.CellReference;

        specialinvoke $r3.<org.apache.poi.ss.util.CellReference: void <init>(int,int)>(i2, i3);

        $r4 = virtualinvoke $r3.<org.apache.poi.ss.util.CellReference: java.lang.String formatAsString()>();

        interfaceinvoke $r2.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTPane: void setTopLeftCell(java.lang.String)>($r4);

        $r5 = <org.openxmlformats.schemas.spreadsheetml.x2006.main.STPane: org.openxmlformats.schemas.spreadsheetml.x2006.main.STPane$Enum BOTTOM_RIGHT>;

        interfaceinvoke $r2.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTPane: void setActivePane(org.openxmlformats.schemas.spreadsheetml.x2006.main.STPane$Enum)>($r5);

     label10:
        interfaceinvoke $r1.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetView: void setSelectionArray(org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSelection[])>(null);

        $r13 = interfaceinvoke $r1.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetView: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSelection addNewSelection()>();

        $r14 = interfaceinvoke $r2.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTPane: org.openxmlformats.schemas.spreadsheetml.x2006.main.STPane$Enum getActivePane()>();

        interfaceinvoke $r13.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSelection: void setPane(org.openxmlformats.schemas.spreadsheetml.x2006.main.STPane$Enum)>($r14);

        return;
    }

    public org.apache.poi.xssf.usermodel.XSSFComment createComment()
    {
        org.apache.poi.xssf.usermodel.XSSFClientAnchor $r2;
        org.apache.poi.xssf.usermodel.XSSFDrawing $r1;
        org.apache.poi.xssf.usermodel.XSSFComment $r3;
        org.apache.poi.xssf.usermodel.XSSFSheet r0;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        $r1 = virtualinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.apache.poi.xssf.usermodel.XSSFDrawing createDrawingPatriarch()>();

        $r2 = new org.apache.poi.xssf.usermodel.XSSFClientAnchor;

        specialinvoke $r2.<org.apache.poi.xssf.usermodel.XSSFClientAnchor: void <init>()>();

        $r3 = virtualinvoke $r1.<org.apache.poi.xssf.usermodel.XSSFDrawing: org.apache.poi.xssf.usermodel.XSSFComment createCellComment(org.apache.poi.ss.usermodel.ClientAnchor)>($r2);

        return $r3;
    }

    public org.apache.poi.xssf.usermodel.XSSFRow createRow(int)
    {
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetData $r7, $r15;
        java.lang.Integer $r2, $r10, $r12, $r21;
        org.apache.poi.xssf.usermodel.XSSFRow r4, $r19;
        int i0, $i1, $i2;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTRow $r16, $r17, r18;
        boolean $z0;
        java.util.TreeMap $r1, $r5, $r8, $r11, $r20;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet $r6, $r14;
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        java.lang.Object $r3, $r9;
        java.util.SortedMap $r13;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: java.util.TreeMap _rows>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r3 = virtualinvoke $r1.<java.util.TreeMap: java.lang.Object get(java.lang.Object)>($r2);

        r4 = (org.apache.poi.xssf.usermodel.XSSFRow) $r3;

        if r4 == null goto label1;

        $r16 = virtualinvoke r4.<org.apache.poi.xssf.usermodel.XSSFRow: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTRow getCTRow()>();

        r18 = $r16;

        $r17 = staticinvoke <org.openxmlformats.schemas.spreadsheetml.x2006.main.CTRow$Factory: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTRow newInstance()>();

        interfaceinvoke $r16.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTRow: org.apache.xmlbeans.XmlObject set(org.apache.xmlbeans.XmlObject)>($r17);

        goto label4;

     label1:
        $r5 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: java.util.TreeMap _rows>;

        $z0 = virtualinvoke $r5.<java.util.TreeMap: boolean isEmpty()>();

        if $z0 != 0 goto label2;

        $r8 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: java.util.TreeMap _rows>;

        $r9 = virtualinvoke $r8.<java.util.TreeMap: java.lang.Object lastKey()>();

        $r10 = (java.lang.Integer) $r9;

        $i1 = virtualinvoke $r10.<java.lang.Integer: int intValue()>();

        if i0 <= $i1 goto label3;

     label2:
        $r6 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet worksheet>;

        $r7 = interfaceinvoke $r6.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetData getSheetData()>();

        r18 = interfaceinvoke $r7.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetData: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTRow addNewRow()>();

        goto label4;

     label3:
        $r11 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: java.util.TreeMap _rows>;

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r13 = virtualinvoke $r11.<java.util.TreeMap: java.util.SortedMap headMap(java.lang.Object)>($r12);

        $i2 = interfaceinvoke $r13.<java.util.SortedMap: int size()>();

        $r14 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet worksheet>;

        $r15 = interfaceinvoke $r14.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetData getSheetData()>();

        r18 = interfaceinvoke $r15.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetData: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTRow insertNewRow(int)>($i2);

     label4:
        $r19 = new org.apache.poi.xssf.usermodel.XSSFRow;

        specialinvoke $r19.<org.apache.poi.xssf.usermodel.XSSFRow: void <init>(org.openxmlformats.schemas.spreadsheetml.x2006.main.CTRow,org.apache.poi.xssf.usermodel.XSSFSheet)>(r18, r0);

        virtualinvoke $r19.<org.apache.poi.xssf.usermodel.XSSFRow: void setRowNum(int)>(i0);

        $r20 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: java.util.TreeMap _rows>;

        $r21 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        virtualinvoke $r20.<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r21, $r19);

        return $r19;
    }

    public void createSplitPane(int, int, int, int, int)
    {
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        int i0, i1, i2, i3, i4;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTPane $r1, $r3;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.STPane$Enum $r4;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.STPaneState$Enum $r2;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        i4 := @parameter4: int;

        virtualinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: void createFreezePane(int,int,int,int)>(i0, i1, i2, i3);

        $r1 = specialinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTPane getPane()>();

        $r2 = <org.openxmlformats.schemas.spreadsheetml.x2006.main.STPaneState: org.openxmlformats.schemas.spreadsheetml.x2006.main.STPaneState$Enum SPLIT>;

        interfaceinvoke $r1.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTPane: void setState(org.openxmlformats.schemas.spreadsheetml.x2006.main.STPaneState$Enum)>($r2);

        $r3 = specialinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTPane getPane()>();

        $r4 = staticinvoke <org.openxmlformats.schemas.spreadsheetml.x2006.main.STPane$Enum: org.openxmlformats.schemas.spreadsheetml.x2006.main.STPane$Enum forInt(int)>(i4);

        interfaceinvoke $r3.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTPane: void setActivePane(org.openxmlformats.schemas.spreadsheetml.x2006.main.STPane$Enum)>($r4);

        return;
    }

    public org.apache.poi.xssf.usermodel.XSSFComment getCellComment(int, int)
    {
        org.apache.poi.xssf.usermodel.XSSFVMLDrawing $r6;
        org.apache.poi.xssf.model.CommentsTable $r1, $r4, $r8;
        org.apache.poi.ss.util.CellReference $r2;
        org.apache.poi.xssf.usermodel.XSSFComment $r7;
        schemasMicrosoftComVml.CTShape $r9;
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        int i0, i1;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTComment $r5;
        java.lang.String $r3;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.apache.poi.xssf.model.CommentsTable sheetComments>;

        if $r1 != null goto label1;

        return null;

     label1:
        $r2 = new org.apache.poi.ss.util.CellReference;

        specialinvoke $r2.<org.apache.poi.ss.util.CellReference: void <init>(int,int)>(i0, i1);

        $r3 = virtualinvoke $r2.<org.apache.poi.ss.util.CellReference: java.lang.String formatAsString()>();

        $r4 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.apache.poi.xssf.model.CommentsTable sheetComments>;

        $r5 = virtualinvoke $r4.<org.apache.poi.xssf.model.CommentsTable: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTComment getCTComment(java.lang.String)>($r3);

        if $r5 != null goto label2;

        return null;

     label2:
        $r6 = virtualinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.apache.poi.xssf.usermodel.XSSFVMLDrawing getVMLDrawing(boolean)>(0);

        $r7 = new org.apache.poi.xssf.usermodel.XSSFComment;

        $r8 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.apache.poi.xssf.model.CommentsTable sheetComments>;

        if $r6 != null goto label3;

        $r9 = null;

        goto label4;

     label3:
        $r9 = virtualinvoke $r6.<org.apache.poi.xssf.usermodel.XSSFVMLDrawing: schemasMicrosoftComVml.CTShape findCommentShape(int,int)>(i0, i1);

     label4:
        specialinvoke $r7.<org.apache.poi.xssf.usermodel.XSSFComment: void <init>(org.apache.poi.xssf.model.CommentsTable,org.openxmlformats.schemas.spreadsheetml.x2006.main.CTComment,schemasMicrosoftComVml.CTShape)>($r8, $r5, $r9);

        return $r7;
    }

    public org.apache.poi.xssf.usermodel.XSSFHyperlink getHyperlink(int, int)
    {
        java.util.Iterator $r4;
        org.apache.poi.ss.util.CellReference $r0;
        org.apache.poi.xssf.usermodel.XSSFHyperlink r6;
        java.util.List $r3;
        int i0, i1;
        org.apache.poi.xssf.usermodel.XSSFSheet r2;
        java.lang.Object $r5;
        java.lang.String $r1, $r7;
        boolean $z0, $z1;

        r2 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r0 = new org.apache.poi.ss.util.CellReference;

        specialinvoke $r0.<org.apache.poi.ss.util.CellReference: void <init>(int,int)>(i0, i1);

        $r1 = virtualinvoke $r0.<org.apache.poi.ss.util.CellReference: java.lang.String formatAsString()>();

        $r3 = r2.<org.apache.poi.xssf.usermodel.XSSFSheet: java.util.List hyperlinks>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (org.apache.poi.xssf.usermodel.XSSFHyperlink) $r5;

        $r7 = virtualinvoke r6.<org.apache.poi.xssf.usermodel.XSSFHyperlink: java.lang.String getCellRef()>();

        $z1 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z1 == 0 goto label2;

        return r6;

     label2:
        goto label1;

     label3:
        return null;
    }

    public int[] getColumnBreaks()
    {
        long $l3;
        int[] $r2, r8;
        int $i0, $i1, $i2, $i4, $i5, i6;
        boolean $z0;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTPageBreak $r4, $r6;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTBreak[] $r7;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet $r1, $r3, $r5;
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTBreak r9;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        $r1 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet worksheet>;

        $z0 = interfaceinvoke $r1.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet: boolean isSetColBreaks()>();

        if $z0 == 0 goto label1;

        $r3 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet worksheet>;

        $r4 = interfaceinvoke $r3.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTPageBreak getColBreaks()>();

        $i0 = interfaceinvoke $r4.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTPageBreak: int sizeOfBrkArray()>();

        if $i0 != 0 goto label2;

     label1:
        $r2 = newarray (int)[0];

        return $r2;

     label2:
        $r5 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet worksheet>;

        $r6 = interfaceinvoke $r5.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTPageBreak getColBreaks()>();

        $r7 = interfaceinvoke $r6.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTPageBreak: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTBreak[] getBrkArray()>();

        $i1 = lengthof $r7;

        r8 = newarray (int)[$i1];

        i6 = 0;

     label3:
        $i2 = lengthof $r7;

        if i6 >= $i2 goto label4;

        r9 = $r7[i6];

        $l3 = interfaceinvoke r9.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTBreak: long getId()>();

        $i4 = (int) $l3;

        $i5 = $i4 - 1;

        r8[i6] = $i5;

        i6 = i6 + 1;

        goto label3;

     label4:
        return r8;
    }

    public int getColumnWidth(int)
    {
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCol $r2;
        long $l1;
        org.apache.poi.xssf.usermodel.helpers.ColumnHelper $r1;
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        int i0, $i2, $i3;
        double $d0, $d1;
        boolean $z0;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.apache.poi.xssf.usermodel.helpers.ColumnHelper columnHelper>;

        $l1 = (long) i0;

        $r2 = virtualinvoke $r1.<org.apache.poi.xssf.usermodel.helpers.ColumnHelper: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCol getColumn(long,boolean)>($l1, 0);

        if $r2 == null goto label1;

        $z0 = interfaceinvoke $r2.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCol: boolean isSetWidth()>();

        if $z0 != 0 goto label2;

     label1:
        $i2 = virtualinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: int getDefaultColumnWidth()>();

        $d1 = (double) $i2;

        goto label3;

     label2:
        $d1 = interfaceinvoke $r2.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCol: double getWidth()>();

     label3:
        $d0 = $d1 * 256.0;

        $i3 = (int) $d0;

        return $i3;
    }

    public int getDefaultColumnWidth()
    {
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetFormatPr $r2;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet $r1;
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        int $i1;
        long $l0;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        $r1 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet worksheet>;

        $r2 = interfaceinvoke $r1.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetFormatPr getSheetFormatPr()>();

        if $r2 != null goto label1;

        $i1 = 8;

        goto label2;

     label1:
        $l0 = interfaceinvoke $r2.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetFormatPr: long getBaseColWidth()>();

        $i1 = (int) $l0;

     label2:
        return $i1;
    }

    public short getDefaultRowHeight()
    {
        short $s1;
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        int $i0;
        float $f0, $f1;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        $f0 = virtualinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: float getDefaultRowHeightInPoints()>();

        $f1 = $f0 * 20.0F;

        $i0 = (int) $f1;

        $s1 = (short) $i0;

        return $s1;
    }

    public float getDefaultRowHeightInPoints()
    {
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetFormatPr $r2;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet $r1;
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        float $f0, $f1;
        double $d0;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        $r1 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet worksheet>;

        $r2 = interfaceinvoke $r1.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetFormatPr getSheetFormatPr()>();

        if $r2 != null goto label1;

        $f1 = (float) 0.0;

        return $f1;

     label1:
        $d0 = interfaceinvoke $r2.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetFormatPr: double getDefaultRowHeight()>();

        $f0 = (float) $d0;

        return $f0;
    }

    private org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetFormatPr getSheetTypeSheetFormatPr()
    {
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetFormatPr $r4;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet $r1, $r2, $r3;
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        boolean $z0;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        $r1 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet worksheet>;

        $z0 = interfaceinvoke $r1.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet: boolean isSetSheetFormatPr()>();

        if $z0 == 0 goto label1;

        $r3 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet worksheet>;

        $r4 = interfaceinvoke $r3.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetFormatPr getSheetFormatPr()>();

        goto label2;

     label1:
        $r2 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet worksheet>;

        $r4 = interfaceinvoke $r2.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetFormatPr addNewSheetFormatPr()>();

     label2:
        return $r4;
    }

    public org.apache.poi.ss.usermodel.CellStyle getColumnStyle(int)
    {
        long $l1;
        org.apache.poi.xssf.usermodel.helpers.ColumnHelper $r1;
        org.apache.poi.xssf.usermodel.XSSFCellStyle $r3;
        org.apache.poi.xssf.usermodel.XSSFWorkbook $r2;
        short $s3;
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        int i0, $i2, $i4, $i6;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.apache.poi.xssf.usermodel.helpers.ColumnHelper columnHelper>;

        $l1 = (long) i0;

        $i2 = virtualinvoke $r1.<org.apache.poi.xssf.usermodel.helpers.ColumnHelper: int getColDefaultStyle(long)>($l1);

        $r2 = virtualinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.apache.poi.xssf.usermodel.XSSFWorkbook getWorkbook()>();

        $i6 = (int) -1;

        if $i2 != $i6 goto label1;

        $i4 = 0;

        goto label2;

     label1:
        $i4 = $i2;

     label2:
        $s3 = (short) $i4;

        $r3 = virtualinvoke $r2.<org.apache.poi.xssf.usermodel.XSSFWorkbook: org.apache.poi.xssf.usermodel.XSSFCellStyle getCellStyleAt(short)>($s3);

        return $r3;
    }

    public void setRightToLeft(boolean)
    {
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetView $r1;
        boolean z0;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        z0 := @parameter0: boolean;

        $r1 = specialinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetView getDefaultSheetView()>();

        interfaceinvoke $r1.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetView: void setRightToLeft(boolean)>(z0);

        return;
    }

    public boolean isRightToLeft()
    {
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetView $r1;
        boolean $z0;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        $r1 = specialinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetView getDefaultSheetView()>();

        if $r1 != null goto label1;

        $z0 = 0;

        goto label2;

     label1:
        $z0 = interfaceinvoke $r1.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetView: boolean getRightToLeft()>();

     label2:
        return $z0;
    }

    public boolean getDisplayGuts()
    {
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTOutlinePr $r2, $r3;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetPr $r1;
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        boolean $z0;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        $r1 = specialinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetPr getSheetTypeSheetPr()>();

        $r2 = interfaceinvoke $r1.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetPr: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTOutlinePr getOutlinePr()>();

        if $r2 != null goto label1;

        $r3 = staticinvoke <org.openxmlformats.schemas.spreadsheetml.x2006.main.CTOutlinePr$Factory: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTOutlinePr newInstance()>();

        goto label2;

     label1:
        $r3 = interfaceinvoke $r1.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetPr: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTOutlinePr getOutlinePr()>();

     label2:
        $z0 = interfaceinvoke $r3.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTOutlinePr: boolean getShowOutlineSymbols()>();

        return $z0;
    }

    public void setDisplayGuts(boolean)
    {
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTOutlinePr $r2, $r3;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetPr $r1;
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        boolean z0;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        z0 := @parameter0: boolean;

        $r1 = specialinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetPr getSheetTypeSheetPr()>();

        $r2 = interfaceinvoke $r1.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetPr: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTOutlinePr getOutlinePr()>();

        if $r2 != null goto label1;

        $r3 = interfaceinvoke $r1.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetPr: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTOutlinePr addNewOutlinePr()>();

        goto label2;

     label1:
        $r3 = interfaceinvoke $r1.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetPr: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTOutlinePr getOutlinePr()>();

     label2:
        interfaceinvoke $r3.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTOutlinePr: void setShowOutlineSymbols(boolean)>(z0);

        return;
    }

    public boolean isDisplayZeros()
    {
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetView $r1;
        boolean $z0;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        $r1 = specialinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetView getDefaultSheetView()>();

        if $r1 != null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = interfaceinvoke $r1.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetView: boolean getShowZeros()>();

     label2:
        return $z0;
    }

    public void setDisplayZeros(boolean)
    {
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetView $r1;
        boolean z0;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        z0 := @parameter0: boolean;

        $r1 = specialinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetView getSheetTypeSheetView()>();

        interfaceinvoke $r1.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetView: void setShowZeros(boolean)>(z0);

        return;
    }

    public int getFirstRowNum()
    {
        java.util.TreeMap $r1, $r2;
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        int $i0, $i1;
        java.lang.Object $r3;
        java.lang.Integer $r4;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        $r1 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: java.util.TreeMap _rows>;

        $i0 = virtualinvoke $r1.<java.util.TreeMap: int size()>();

        if $i0 != 0 goto label1;

        $i1 = 0;

        goto label2;

     label1:
        $r2 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: java.util.TreeMap _rows>;

        $r3 = virtualinvoke $r2.<java.util.TreeMap: java.lang.Object firstKey()>();

        $r4 = (java.lang.Integer) $r3;

        $i1 = virtualinvoke $r4.<java.lang.Integer: int intValue()>();

     label2:
        return $i1;
    }

    public boolean getFitToPage()
    {
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetPr $r1;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTPageSetUpPr $r2;
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        boolean $z0, $z1;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        $r1 = specialinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetPr getSheetTypeSheetPr()>();

        if $r1 == null goto label1;

        $z1 = interfaceinvoke $r1.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetPr: boolean isSetPageSetUpPr()>();

        if $z1 != 0 goto label2;

     label1:
        $r2 = staticinvoke <org.openxmlformats.schemas.spreadsheetml.x2006.main.CTPageSetUpPr$Factory: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTPageSetUpPr newInstance()>();

        goto label3;

     label2:
        $r2 = interfaceinvoke $r1.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetPr: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTPageSetUpPr getPageSetUpPr()>();

     label3:
        $z0 = interfaceinvoke $r2.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTPageSetUpPr: boolean getFitToPage()>();

        return $z0;
    }

    private org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetPr getSheetTypeSheetPr()
    {
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet $r1, $r3, $r5;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetPr $r2, $r4, $r6;
        org.apache.poi.xssf.usermodel.XSSFSheet r0;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        $r1 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet worksheet>;

        $r2 = interfaceinvoke $r1.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetPr getSheetPr()>();

        if $r2 != null goto label1;

        $r5 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet worksheet>;

        $r6 = staticinvoke <org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetPr$Factory: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetPr newInstance()>();

        interfaceinvoke $r5.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet: void setSheetPr(org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetPr)>($r6);

     label1:
        $r3 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet worksheet>;

        $r4 = interfaceinvoke $r3.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetPr getSheetPr()>();

        return $r4;
    }

    private org.openxmlformats.schemas.spreadsheetml.x2006.main.CTHeaderFooter getSheetTypeHeaderFooter()
    {
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet $r1, $r3, $r5;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTHeaderFooter $r2, $r4, $r6;
        org.apache.poi.xssf.usermodel.XSSFSheet r0;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        $r1 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet worksheet>;

        $r2 = interfaceinvoke $r1.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTHeaderFooter getHeaderFooter()>();

        if $r2 != null goto label1;

        $r5 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet worksheet>;

        $r6 = staticinvoke <org.openxmlformats.schemas.spreadsheetml.x2006.main.CTHeaderFooter$Factory: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTHeaderFooter newInstance()>();

        interfaceinvoke $r5.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet: void setHeaderFooter(org.openxmlformats.schemas.spreadsheetml.x2006.main.CTHeaderFooter)>($r6);

     label1:
        $r3 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet worksheet>;

        $r4 = interfaceinvoke $r3.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTHeaderFooter getHeaderFooter()>();

        return $r4;
    }

    public org.apache.poi.ss.usermodel.Footer getFooter()
    {
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        org.apache.poi.ss.usermodel.Footer $r1;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        $r1 = virtualinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.apache.poi.ss.usermodel.Footer getOddFooter()>();

        return $r1;
    }

    public org.apache.poi.ss.usermodel.Header getHeader()
    {
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        org.apache.poi.ss.usermodel.Header $r1;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        $r1 = virtualinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.apache.poi.ss.usermodel.Header getOddHeader()>();

        return $r1;
    }

    public org.apache.poi.ss.usermodel.Footer getOddFooter()
    {
        org.apache.poi.xssf.usermodel.XSSFSheet r1;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTHeaderFooter $r2;
        org.apache.poi.xssf.usermodel.XSSFOddFooter $r0;

        r1 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        $r0 = new org.apache.poi.xssf.usermodel.XSSFOddFooter;

        $r2 = specialinvoke r1.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTHeaderFooter getSheetTypeHeaderFooter()>();

        specialinvoke $r0.<org.apache.poi.xssf.usermodel.XSSFOddFooter: void <init>(org.openxmlformats.schemas.spreadsheetml.x2006.main.CTHeaderFooter)>($r2);

        return $r0;
    }

    public org.apache.poi.ss.usermodel.Footer getEvenFooter()
    {
        org.apache.poi.xssf.usermodel.XSSFSheet r1;
        org.apache.poi.xssf.usermodel.XSSFEvenFooter $r0;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTHeaderFooter $r2;

        r1 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        $r0 = new org.apache.poi.xssf.usermodel.XSSFEvenFooter;

        $r2 = specialinvoke r1.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTHeaderFooter getSheetTypeHeaderFooter()>();

        specialinvoke $r0.<org.apache.poi.xssf.usermodel.XSSFEvenFooter: void <init>(org.openxmlformats.schemas.spreadsheetml.x2006.main.CTHeaderFooter)>($r2);

        return $r0;
    }

    public org.apache.poi.ss.usermodel.Footer getFirstFooter()
    {
        org.apache.poi.xssf.usermodel.XSSFSheet r1;
        org.apache.poi.xssf.usermodel.XSSFFirstFooter $r0;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTHeaderFooter $r2;

        r1 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        $r0 = new org.apache.poi.xssf.usermodel.XSSFFirstFooter;

        $r2 = specialinvoke r1.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTHeaderFooter getSheetTypeHeaderFooter()>();

        specialinvoke $r0.<org.apache.poi.xssf.usermodel.XSSFFirstFooter: void <init>(org.openxmlformats.schemas.spreadsheetml.x2006.main.CTHeaderFooter)>($r2);

        return $r0;
    }

    public org.apache.poi.ss.usermodel.Header getOddHeader()
    {
        org.apache.poi.xssf.usermodel.XSSFOddHeader $r0;
        org.apache.poi.xssf.usermodel.XSSFSheet r1;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTHeaderFooter $r2;

        r1 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        $r0 = new org.apache.poi.xssf.usermodel.XSSFOddHeader;

        $r2 = specialinvoke r1.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTHeaderFooter getSheetTypeHeaderFooter()>();

        specialinvoke $r0.<org.apache.poi.xssf.usermodel.XSSFOddHeader: void <init>(org.openxmlformats.schemas.spreadsheetml.x2006.main.CTHeaderFooter)>($r2);

        return $r0;
    }

    public org.apache.poi.ss.usermodel.Header getEvenHeader()
    {
        org.apache.poi.xssf.usermodel.XSSFSheet r1;
        org.apache.poi.xssf.usermodel.XSSFEvenHeader $r0;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTHeaderFooter $r2;

        r1 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        $r0 = new org.apache.poi.xssf.usermodel.XSSFEvenHeader;

        $r2 = specialinvoke r1.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTHeaderFooter getSheetTypeHeaderFooter()>();

        specialinvoke $r0.<org.apache.poi.xssf.usermodel.XSSFEvenHeader: void <init>(org.openxmlformats.schemas.spreadsheetml.x2006.main.CTHeaderFooter)>($r2);

        return $r0;
    }

    public org.apache.poi.ss.usermodel.Header getFirstHeader()
    {
        org.apache.poi.xssf.usermodel.XSSFSheet r1;
        org.apache.poi.xssf.usermodel.XSSFFirstHeader $r0;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTHeaderFooter $r2;

        r1 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        $r0 = new org.apache.poi.xssf.usermodel.XSSFFirstHeader;

        $r2 = specialinvoke r1.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTHeaderFooter getSheetTypeHeaderFooter()>();

        specialinvoke $r0.<org.apache.poi.xssf.usermodel.XSSFFirstHeader: void <init>(org.openxmlformats.schemas.spreadsheetml.x2006.main.CTHeaderFooter)>($r2);

        return $r0;
    }

    public boolean getHorizontallyCenter()
    {
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet $r1;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTPrintOptions $r2;
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        boolean $z0, $z1;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        $r1 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet worksheet>;

        $r2 = interfaceinvoke $r1.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTPrintOptions getPrintOptions()>();

        if $r2 == null goto label1;

        $z0 = interfaceinvoke $r2.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTPrintOptions: boolean getHorizontalCentered()>();

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public int getLastRowNum()
    {
        java.util.TreeMap $r1, $r2;
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        int $i0, $i1;
        java.lang.Object $r3;
        java.lang.Integer $r4;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        $r1 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: java.util.TreeMap _rows>;

        $i0 = virtualinvoke $r1.<java.util.TreeMap: int size()>();

        if $i0 != 0 goto label1;

        $i1 = 0;

        goto label2;

     label1:
        $r2 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: java.util.TreeMap _rows>;

        $r3 = virtualinvoke $r2.<java.util.TreeMap: java.lang.Object lastKey()>();

        $r4 = (java.lang.Integer) $r3;

        $i1 = virtualinvoke $r4.<java.lang.Integer: int intValue()>();

     label2:
        return $i1;
    }

    public short getLeftCol()
    {
        short $s0;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet $r1;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetViews $r2;
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        java.lang.String $r4;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetView $r3;
        org.apache.poi.ss.util.CellReference $r5;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        $r1 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet worksheet>;

        $r2 = interfaceinvoke $r1.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetViews getSheetViews()>();

        $r3 = interfaceinvoke $r2.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetViews: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetView getSheetViewArray(int)>(0);

        $r4 = interfaceinvoke $r3.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetView: java.lang.String getTopLeftCell()>();

        if $r4 != null goto label1;

        return 0;

     label1:
        $r5 = new org.apache.poi.ss.util.CellReference;

        specialinvoke $r5.<org.apache.poi.ss.util.CellReference: void <init>(java.lang.String)>($r4);

        $s0 = virtualinvoke $r5.<org.apache.poi.ss.util.CellReference: short getCol()>();

        return $s0;
    }

    public double getMargin(short)
    {
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTPageMargins $r3;
        short s0;
        int $i1, $i2;
        java.lang.String $r8;
        boolean $z0;
        double $d0, $d1, $d2, $d3, $d4, $d5;
        java.lang.IllegalArgumentException $r10;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet $r1, $r2;
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        java.lang.StringBuilder $r6, $r7, $r9;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        s0 := @parameter0: short;

        $r1 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet worksheet>;

        $z0 = interfaceinvoke $r1.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet: boolean isSetPageMargins()>();

        if $z0 != 0 goto label1;

        return 0.0;

     label1:
        $r2 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet worksheet>;

        $r3 = interfaceinvoke $r2.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTPageMargins getPageMargins()>();

        $i1 = (int) s0;

        tableswitch($i1)
        {
            case 0: goto label2;
            case 1: goto label3;
            case 2: goto label4;
            case 3: goto label5;
            case 4: goto label6;
            case 5: goto label7;
            default: goto label8;
        };

     label2:
        $d5 = interfaceinvoke $r3.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTPageMargins: double getLeft()>();

        return $d5;

     label3:
        $d4 = interfaceinvoke $r3.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTPageMargins: double getRight()>();

        return $d4;

     label4:
        $d3 = interfaceinvoke $r3.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTPageMargins: double getTop()>();

        return $d3;

     label5:
        $d2 = interfaceinvoke $r3.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTPageMargins: double getBottom()>();

        return $d2;

     label6:
        $d1 = interfaceinvoke $r3.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTPageMargins: double getHeader()>();

        return $d1;

     label7:
        $d0 = interfaceinvoke $r3.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTPageMargins: double getFooter()>();

        return $d0;

     label8:
        $r10 = new java.lang.IllegalArgumentException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown margin constant:  ");

        $i2 = (int) s0;

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r10;
    }

    public void setMargin(short, double)
    {
        java.lang.IllegalArgumentException $r11;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTPageMargins $r9;
        short s0;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet $r1, $r2, $r8;
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        int $i1, $i2;
        java.lang.StringBuilder $r5, $r6, $r10;
        java.lang.String $r7;
        boolean $z0;
        double d0;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        s0 := @parameter0: short;

        d0 := @parameter1: double;

        $r1 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet worksheet>;

        $z0 = interfaceinvoke $r1.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet: boolean isSetPageMargins()>();

        if $z0 == 0 goto label01;

        $r8 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet worksheet>;

        $r9 = interfaceinvoke $r8.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTPageMargins getPageMargins()>();

        goto label02;

     label01:
        $r2 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet worksheet>;

        $r9 = interfaceinvoke $r2.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTPageMargins addNewPageMargins()>();

     label02:
        $i1 = (int) s0;

        tableswitch($i1)
        {
            case 0: goto label03;
            case 1: goto label04;
            case 2: goto label05;
            case 3: goto label06;
            case 4: goto label07;
            case 5: goto label08;
            default: goto label09;
        };

     label03:
        interfaceinvoke $r9.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTPageMargins: void setLeft(double)>(d0);

        goto label10;

     label04:
        interfaceinvoke $r9.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTPageMargins: void setRight(double)>(d0);

        goto label10;

     label05:
        interfaceinvoke $r9.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTPageMargins: void setTop(double)>(d0);

        goto label10;

     label06:
        interfaceinvoke $r9.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTPageMargins: void setBottom(double)>(d0);

        goto label10;

     label07:
        interfaceinvoke $r9.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTPageMargins: void setHeader(double)>(d0);

        goto label10;

     label08:
        interfaceinvoke $r9.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTPageMargins: void setFooter(double)>(d0);

        goto label10;

     label09:
        $r11 = new java.lang.IllegalArgumentException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown margin constant:  ");

        $i2 = (int) s0;

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r11;

     label10:
        return;
    }

    public org.apache.poi.ss.util.CellRangeAddress getMergedRegion(int)
    {
        org.apache.poi.ss.util.CellRangeAddress $r5;
        java.lang.IllegalStateException $r6;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTMergeCells $r2;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTMergeCell $r3;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet $r1;
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        int i0;
        java.lang.String $r4;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet worksheet>;

        $r2 = interfaceinvoke $r1.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTMergeCells getMergeCells()>();

        if $r2 != null goto label1;

        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>("This worksheet does not contain merged regions");

        throw $r6;

     label1:
        $r3 = interfaceinvoke $r2.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTMergeCells: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTMergeCell getMergeCellArray(int)>(i0);

        $r4 = interfaceinvoke $r3.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTMergeCell: java.lang.String getRef()>();

        $r5 = staticinvoke <org.apache.poi.ss.util.CellRangeAddress: org.apache.poi.ss.util.CellRangeAddress valueOf(java.lang.String)>($r4);

        return $r5;
    }

    public int getNumMergedRegions()
    {
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTMergeCells $r2;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet $r1;
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        int $i0;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        $r1 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet worksheet>;

        $r2 = interfaceinvoke $r1.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTMergeCells getMergeCells()>();

        if $r2 != null goto label1;

        $i0 = 0;

        goto label2;

     label1:
        $i0 = interfaceinvoke $r2.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTMergeCells: int sizeOfMergeCellArray()>();

     label2:
        return $i0;
    }

    public int getNumHyperlinks()
    {
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        int $i0;
        java.util.List $r1;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        $r1 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: java.util.List hyperlinks>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        return $i0;
    }

    public org.apache.poi.hssf.util.PaneInformation getPaneInformation()
    {
        org.apache.poi.hssf.util.PaneInformation $r9;
        org.apache.poi.ss.util.CellReference r3, $r8;
        short $s4, $s5, $s7, $s8;
        byte $b9;
        int $i0, $i1, $i2, $i3, $i6;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTPane $r2;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.STPane$Enum $r4;
        java.lang.String $r7;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetView $r1;
        boolean $z0, $z1;
        double $d0, $d1;
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.STPaneState$Enum $r5, $r6;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        $r1 = specialinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetView getDefaultSheetView()>();

        $r2 = interfaceinvoke $r1.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetView: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTPane getPane()>();

        if $r2 != null goto label1;

        return null;

     label1:
        $z0 = interfaceinvoke $r2.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTPane: boolean isSetTopLeftCell()>();

        if $z0 == 0 goto label2;

        $r8 = new org.apache.poi.ss.util.CellReference;

        $r7 = interfaceinvoke $r2.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTPane: java.lang.String getTopLeftCell()>();

        specialinvoke $r8.<org.apache.poi.ss.util.CellReference: void <init>(java.lang.String)>($r7);

        goto label3;

     label2:
        $r8 = null;

     label3:
        r3 = $r8;

        $r9 = new org.apache.poi.hssf.util.PaneInformation;

        $d0 = interfaceinvoke $r2.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTPane: double getXSplit()>();

        $i0 = (int) $d0;

        $s4 = (short) $i0;

        $d1 = interfaceinvoke $r2.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTPane: double getYSplit()>();

        $i1 = (int) $d1;

        $s5 = (short) $i1;

        if $r8 != null goto label4;

        $i6 = 0;

        goto label5;

     label4:
        $i6 = virtualinvoke $r8.<org.apache.poi.ss.util.CellReference: int getRow()>();

     label5:
        $s7 = (short) $i6;

        if r3 != null goto label6;

        $s8 = 0;

        goto label7;

     label6:
        $s8 = virtualinvoke r3.<org.apache.poi.ss.util.CellReference: short getCol()>();

     label7:
        $r4 = interfaceinvoke $r2.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTPane: org.openxmlformats.schemas.spreadsheetml.x2006.main.STPane$Enum getActivePane()>();

        $i2 = virtualinvoke $r4.<org.openxmlformats.schemas.spreadsheetml.x2006.main.STPane$Enum: int intValue()>();

        $i3 = $i2 - 1;

        $b9 = (byte) $i3;

        $r5 = interfaceinvoke $r2.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTPane: org.openxmlformats.schemas.spreadsheetml.x2006.main.STPaneState$Enum getState()>();

        $r6 = <org.openxmlformats.schemas.spreadsheetml.x2006.main.STPaneState: org.openxmlformats.schemas.spreadsheetml.x2006.main.STPaneState$Enum FROZEN>;

        if $r5 != $r6 goto label8;

        $z1 = 1;

        goto label9;

     label8:
        $z1 = 0;

     label9:
        specialinvoke $r9.<org.apache.poi.hssf.util.PaneInformation: void <init>(short,short,short,short,byte,boolean)>($s4, $s5, $s7, $s8, $b9, $z1);

        return $r9;
    }

    public int getPhysicalNumberOfRows()
    {
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        int $i0;
        java.util.TreeMap $r1;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        $r1 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: java.util.TreeMap _rows>;

        $i0 = virtualinvoke $r1.<java.util.TreeMap: int size()>();

        return $i0;
    }

    public org.apache.poi.xssf.usermodel.XSSFPrintSetup getPrintSetup()
    {
        org.apache.poi.xssf.usermodel.XSSFSheet r1;
        org.apache.poi.xssf.usermodel.XSSFPrintSetup $r0;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet $r2;

        r1 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        $r0 = new org.apache.poi.xssf.usermodel.XSSFPrintSetup;

        $r2 = r1.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet worksheet>;

        specialinvoke $r0.<org.apache.poi.xssf.usermodel.XSSFPrintSetup: void <init>(org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet)>($r2);

        return $r0;
    }

    public boolean getProtect()
    {
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet $r1;
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        $r1 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet worksheet>;

        $z0 = interfaceinvoke $r1.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet: boolean isSetSheetProtection()>();

        if $z0 == 0 goto label1;

        $z1 = specialinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: boolean sheetProtectionEnabled()>();

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    public void protectSheet(java.lang.String)
    {
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet $r2, $r3;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.STUnsignedShortHex $r5;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetProtection $r4;
        org.apache.poi.xssf.usermodel.XSSFSheet r1;
        java.lang.String r0;

        r1 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        $r3 = r1.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet worksheet>;

        $r4 = interfaceinvoke $r3.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetProtection addNewSheetProtection()>();

        $r5 = specialinvoke r1.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.STUnsignedShortHex stringToExcelPassword(java.lang.String)>(r0);

        interfaceinvoke $r4.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetProtection: void xsetPassword(org.openxmlformats.schemas.spreadsheetml.x2006.main.STUnsignedShortHex)>($r5);

        interfaceinvoke $r4.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetProtection: void setSheet(boolean)>(1);

        interfaceinvoke $r4.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetProtection: void setScenarios(boolean)>(1);

        interfaceinvoke $r4.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetProtection: void setObjects(boolean)>(1);

        goto label2;

     label1:
        $r2 = r1.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet worksheet>;

        interfaceinvoke $r2.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet: void unsetSheetProtection()>();

     label2:
        return;
    }

    private org.openxmlformats.schemas.spreadsheetml.x2006.main.STUnsignedShortHex stringToExcelPassword(java.lang.String)
    {
        short $s0;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.STUnsignedShortHex $r0;
        org.apache.poi.xssf.usermodel.XSSFSheet r5;
        int $i1;
        char[] $r2;
        java.lang.String r1, $r3, $r4;

        r5 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        r1 := @parameter0: java.lang.String;

        $r0 = staticinvoke <org.openxmlformats.schemas.spreadsheetml.x2006.main.STUnsignedShortHex$Factory: org.openxmlformats.schemas.spreadsheetml.x2006.main.STUnsignedShortHex newInstance()>();

        $s0 = staticinvoke <org.apache.poi.hssf.record.PasswordRecord: short hashPassword(java.lang.String)>(r1);

        $i1 = (int) $s0;

        $r2 = staticinvoke <org.apache.poi.util.HexDump: char[] shortToHex(int)>($i1);

        $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(char[])>($r2);

        $r4 = virtualinvoke $r3.<java.lang.String: java.lang.String substring(int)>(2);

        interfaceinvoke $r0.<org.openxmlformats.schemas.spreadsheetml.x2006.main.STUnsignedShortHex: void setStringValue(java.lang.String)>($r4);

        return $r0;
    }

    public org.apache.poi.xssf.usermodel.XSSFRow getRow(int)
    {
        java.util.TreeMap $r1;
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        int i0;
        java.lang.Object $r3;
        java.lang.Integer $r2;
        org.apache.poi.xssf.usermodel.XSSFRow $r4;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: java.util.TreeMap _rows>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r3 = virtualinvoke $r1.<java.util.TreeMap: java.lang.Object get(java.lang.Object)>($r2);

        $r4 = (org.apache.poi.xssf.usermodel.XSSFRow) $r3;

        return $r4;
    }

    public int[] getRowBreaks()
    {
        long $l3;
        int[] $r2, r8;
        int $i0, $i1, $i2, $i4, $i5, i6;
        boolean $z0;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTPageBreak $r4, $r6;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTBreak[] $r7;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet $r1, $r3, $r5;
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTBreak r9;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        $r1 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet worksheet>;

        $z0 = interfaceinvoke $r1.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet: boolean isSetRowBreaks()>();

        if $z0 == 0 goto label1;

        $r3 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet worksheet>;

        $r4 = interfaceinvoke $r3.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTPageBreak getRowBreaks()>();

        $i0 = interfaceinvoke $r4.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTPageBreak: int sizeOfBrkArray()>();

        if $i0 != 0 goto label2;

     label1:
        $r2 = newarray (int)[0];

        return $r2;

     label2:
        $r5 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet worksheet>;

        $r6 = interfaceinvoke $r5.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTPageBreak getRowBreaks()>();

        $r7 = interfaceinvoke $r6.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTPageBreak: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTBreak[] getBrkArray()>();

        $i1 = lengthof $r7;

        r8 = newarray (int)[$i1];

        i6 = 0;

     label3:
        $i2 = lengthof $r7;

        if i6 >= $i2 goto label4;

        r9 = $r7[i6];

        $l3 = interfaceinvoke r9.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTBreak: long getId()>();

        $i4 = (int) $l3;

        $i5 = $i4 - 1;

        r8[i6] = $i5;

        i6 = i6 + 1;

        goto label3;

     label4:
        return r8;
    }

    public boolean getRowSumsBelow()
    {
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTOutlinePr $r3;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet $r1;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetPr $r2;
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        $r1 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet worksheet>;

        $r2 = interfaceinvoke $r1.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetPr getSheetPr()>();

        if $r2 == null goto label1;

        $z1 = interfaceinvoke $r2.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetPr: boolean isSetOutlinePr()>();

        if $z1 == 0 goto label1;

        $r3 = interfaceinvoke $r2.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetPr: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTOutlinePr getOutlinePr()>();

        goto label2;

     label1:
        $r3 = null;

     label2:
        if $r3 == null goto label3;

        $z0 = interfaceinvoke $r3.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTOutlinePr: boolean getSummaryBelow()>();

        if $z0 == 0 goto label4;

     label3:
        $z2 = 1;

        goto label5;

     label4:
        $z2 = 0;

     label5:
        return $z2;
    }

    public void setRowSumsBelow(boolean)
    {
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTOutlinePr $r1;
        boolean z0;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        z0 := @parameter0: boolean;

        $r1 = specialinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTOutlinePr ensureOutlinePr()>();

        interfaceinvoke $r1.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTOutlinePr: void setSummaryBelow(boolean)>(z0);

        return;
    }

    public boolean getRowSumsRight()
    {
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTOutlinePr $r3;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet $r1;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetPr $r2;
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        boolean $z0, $z1;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        $r1 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet worksheet>;

        $r2 = interfaceinvoke $r1.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetPr getSheetPr()>();

        if $r2 == null goto label1;

        $z0 = interfaceinvoke $r2.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetPr: boolean isSetOutlinePr()>();

        if $z0 == 0 goto label1;

        $r3 = interfaceinvoke $r2.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetPr: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTOutlinePr getOutlinePr()>();

        goto label2;

     label1:
        $r3 = staticinvoke <org.openxmlformats.schemas.spreadsheetml.x2006.main.CTOutlinePr$Factory: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTOutlinePr newInstance()>();

     label2:
        $z1 = interfaceinvoke $r3.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTOutlinePr: boolean getSummaryRight()>();

        return $z1;
    }

    public void setRowSumsRight(boolean)
    {
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTOutlinePr $r1;
        boolean z0;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        z0 := @parameter0: boolean;

        $r1 = specialinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTOutlinePr ensureOutlinePr()>();

        interfaceinvoke $r1.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTOutlinePr: void setSummaryRight(boolean)>(z0);

        return;
    }

    private org.openxmlformats.schemas.spreadsheetml.x2006.main.CTOutlinePr ensureOutlinePr()
    {
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetPr $r4;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTOutlinePr $r5;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet $r1, $r2, $r3;
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        boolean $z0, $z1;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        $r1 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet worksheet>;

        $z0 = interfaceinvoke $r1.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet: boolean isSetSheetPr()>();

        if $z0 == 0 goto label1;

        $r3 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet worksheet>;

        $r4 = interfaceinvoke $r3.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetPr getSheetPr()>();

        goto label2;

     label1:
        $r2 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet worksheet>;

        $r4 = interfaceinvoke $r2.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetPr addNewSheetPr()>();

     label2:
        $z1 = interfaceinvoke $r4.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetPr: boolean isSetOutlinePr()>();

        if $z1 == 0 goto label3;

        $r5 = interfaceinvoke $r4.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetPr: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTOutlinePr getOutlinePr()>();

        goto label4;

     label3:
        $r5 = interfaceinvoke $r4.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetPr: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTOutlinePr addNewOutlinePr()>();

     label4:
        return $r5;
    }

    public boolean getScenarioProtect()
    {
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet $r1, $r2;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetProtection $r3;
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        $r1 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet worksheet>;

        $z0 = interfaceinvoke $r1.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet: boolean isSetSheetProtection()>();

        if $z0 == 0 goto label1;

        $r2 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet worksheet>;

        $r3 = interfaceinvoke $r2.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetProtection getSheetProtection()>();

        $z1 = interfaceinvoke $r3.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetProtection: boolean getScenarios()>();

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    public short getTopRow()
    {
        short $s1;
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        int $i0;
        java.lang.String $r2;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetView $r1;
        org.apache.poi.ss.util.CellReference $r3;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        $r1 = specialinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetView getSheetTypeSheetView()>();

        $r2 = interfaceinvoke $r1.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetView: java.lang.String getTopLeftCell()>();

        if $r2 != null goto label1;

        return 0;

     label1:
        $r3 = new org.apache.poi.ss.util.CellReference;

        specialinvoke $r3.<org.apache.poi.ss.util.CellReference: void <init>(java.lang.String)>($r2);

        $i0 = virtualinvoke $r3.<org.apache.poi.ss.util.CellReference: int getRow()>();

        $s1 = (short) $i0;

        return $s1;
    }

    public boolean getVerticallyCenter()
    {
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet $r1;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTPrintOptions $r2;
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        boolean $z0, $z1;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        $r1 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet worksheet>;

        $r2 = interfaceinvoke $r1.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTPrintOptions getPrintOptions()>();

        if $r2 == null goto label1;

        $z0 = interfaceinvoke $r2.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTPrintOptions: boolean getVerticalCentered()>();

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public void groupColumn(int, int)
    {
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        int i0, i1, $i2, $i3;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $i3 = i0 + 1;

        $i2 = i1 + 1;

        specialinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: void groupColumn1Based(int,int)>($i3, $i2);

        return;
    }

    private void groupColumn1Based(int, int)
    {
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCol $r3, $r5, $r8, $r11, r14;
        long $l1, $l3, $l4, $l5, $l6, $l10;
        short $s7, $s9;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCols $r2;
        int i0, i2, $i8, i11, i12, $i13;
        org.apache.xmlbeans.XmlObject $r13;
        org.apache.poi.xssf.usermodel.helpers.ColumnHelper $r4, $r6, $r7, $r10, $r12;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet $r1, $r9;
        org.apache.poi.xssf.usermodel.XSSFSheet r0;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        i2 := @parameter0: int;

        i0 := @parameter1: int;

        $r1 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet worksheet>;

        $r2 = interfaceinvoke $r1.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCols getColsArray(int)>(0);

        $r3 = staticinvoke <org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCol$Factory: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCol newInstance()>();

        $r4 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.apache.poi.xssf.usermodel.helpers.ColumnHelper columnHelper>;

        $l1 = (long) i0;

        $r5 = virtualinvoke $r4.<org.apache.poi.xssf.usermodel.helpers.ColumnHelper: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCol getColumn1Based(long,boolean)>($l1, 0);

        r14 = $r5;

        if $r5 == null goto label1;

        $r13 = interfaceinvoke $r5.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCol: org.apache.xmlbeans.XmlObject copy()>();

        r14 = (org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCol) $r13;

     label1:
        $l3 = (long) i2;

        interfaceinvoke $r3.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCol: void setMin(long)>($l3);

        $l4 = (long) i0;

        interfaceinvoke $r3.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCol: void setMax(long)>($l4);

        $r6 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.apache.poi.xssf.usermodel.helpers.ColumnHelper columnHelper>;

        virtualinvoke $r6.<org.apache.poi.xssf.usermodel.helpers.ColumnHelper: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCols addCleanColIntoCols(org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCols,org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCol)>($r2, $r3);

        $r7 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.apache.poi.xssf.usermodel.helpers.ColumnHelper columnHelper>;

        $l5 = (long) i0;

        $r8 = virtualinvoke $r7.<org.apache.poi.xssf.usermodel.helpers.ColumnHelper: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCol getColumn1Based(long,boolean)>($l5, 0);

        if r14 == null goto label2;

        if $r8 == null goto label2;

        $r12 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.apache.poi.xssf.usermodel.helpers.ColumnHelper columnHelper>;

        virtualinvoke $r12.<org.apache.poi.xssf.usermodel.helpers.ColumnHelper: void setColumnAttributes(org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCol,org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCol)>(r14, $r8);

     label2:
        i11 = i2;

     label3:
        if i11 > i0 goto label4;

        $r10 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.apache.poi.xssf.usermodel.helpers.ColumnHelper columnHelper>;

        $l6 = (long) i11;

        $r11 = virtualinvoke $r10.<org.apache.poi.xssf.usermodel.helpers.ColumnHelper: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCol getColumn1Based(long,boolean)>($l6, 0);

        $s7 = interfaceinvoke $r11.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCol: short getOutlineLevel()>();

        $i13 = (int) $s7;

        $i8 = $i13 + 1;

        $s9 = (short) $i8;

        interfaceinvoke $r11.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCol: void setOutlineLevel(short)>($s9);

        $l10 = interfaceinvoke $r11.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCol: long getMax()>();

        i12 = (int) $l10;

        i11 = i12 + 1;

        goto label3;

     label4:
        $r9 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet worksheet>;

        interfaceinvoke $r9.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet: void setColsArray(int,org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCols)>(0, $r2);

        specialinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: void setSheetFormatPrOutlineLevelCol()>();

        return;
    }

    private void setColWidthAttribute(org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCols)
    {
        java.util.Iterator $r2;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCol r4;
        java.util.List $r1;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCols r0;
        org.apache.poi.xssf.usermodel.XSSFSheet r5;
        int $i0;
        java.lang.Object $r3;
        boolean $z0, $z1;
        double $d0;

        r5 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        r0 := @parameter0: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCols;

        $r1 = interfaceinvoke r0.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCols: java.util.List getColList()>();

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCol) $r3;

        $z1 = interfaceinvoke r4.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCol: boolean isSetWidth()>();

        if $z1 != 0 goto label2;

        $i0 = virtualinvoke r5.<org.apache.poi.xssf.usermodel.XSSFSheet: int getDefaultColumnWidth()>();

        $d0 = (double) $i0;

        interfaceinvoke r4.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCol: void setWidth(double)>($d0);

        interfaceinvoke r4.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCol: void setCustomWidth(boolean)>(0);

     label2:
        goto label1;

     label3:
        return;
    }

    public void groupRow(int, int)
    {
        org.apache.poi.xssf.usermodel.XSSFRow $r1, r3;
        short $s2, $s4;
        int i0, i1, $i3, i5, $i6;
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTRow $r2;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i5 = i0;

     label1:
        if i5 > i1 goto label3;

        $r1 = virtualinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.apache.poi.xssf.usermodel.XSSFRow getRow(int)>(i5);

        r3 = $r1;

        if $r1 != null goto label2;

        r3 = virtualinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.apache.poi.xssf.usermodel.XSSFRow createRow(int)>(i5);

     label2:
        $r2 = virtualinvoke r3.<org.apache.poi.xssf.usermodel.XSSFRow: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTRow getCTRow()>();

        $s2 = interfaceinvoke $r2.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTRow: short getOutlineLevel()>();

        $i6 = (int) $s2;

        $i3 = $i6 + 1;

        $s4 = (short) $i3;

        interfaceinvoke $r2.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTRow: void setOutlineLevel(short)>($s4);

        i5 = i5 + 1;

        goto label1;

     label3:
        specialinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: void setSheetFormatPrOutlineLevelRow()>();

        return;
    }

    private short getMaxOutlineLevelRows()
    {
        java.util.Iterator $r3;
        java.util.Collection $r2;
        org.apache.poi.xssf.usermodel.XSSFRow r5;
        short $s0, s1, $s2;
        java.util.TreeMap $r1;
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        int $i3;
        java.lang.Object $r4;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTRow $r6, $r7;
        boolean $z0;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        s1 = 0;

        $r1 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: java.util.TreeMap _rows>;

        $r2 = virtualinvoke $r1.<java.util.TreeMap: java.util.Collection values()>();

        $r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.apache.poi.xssf.usermodel.XSSFRow) $r4;

        $r6 = virtualinvoke r5.<org.apache.poi.xssf.usermodel.XSSFRow: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTRow getCTRow()>();

        $s0 = interfaceinvoke $r6.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTRow: short getOutlineLevel()>();

        $i3 = (int) $s0;

        if $i3 <= s1 goto label2;

        $r7 = virtualinvoke r5.<org.apache.poi.xssf.usermodel.XSSFRow: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTRow getCTRow()>();

        $s2 = interfaceinvoke $r7.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTRow: short getOutlineLevel()>();

        goto label3;

     label2:
        $s2 = s1;

     label3:
        s1 = $s2;

        goto label1;

     label4:
        return s1;
    }

    private short getMaxOutlineLevelCols()
    {
        java.util.Iterator $r4;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCol r6;
        java.util.List $r3;
        short $s0, s1, $s2;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet $r1;
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCols $r2;
        int $i3;
        java.lang.Object $r5;
        boolean $z0;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        $r1 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet worksheet>;

        $r2 = interfaceinvoke $r1.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCols getColsArray(int)>(0);

        s1 = 0;

        $r3 = interfaceinvoke $r2.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCols: java.util.List getColList()>();

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCol) $r5;

        $s0 = interfaceinvoke r6.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCol: short getOutlineLevel()>();

        $i3 = (int) $s0;

        if $i3 <= s1 goto label2;

        $s2 = interfaceinvoke r6.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCol: short getOutlineLevel()>();

        goto label3;

     label2:
        $s2 = s1;

     label3:
        s1 = $s2;

        goto label1;

     label4:
        return s1;
    }

    public boolean isColumnBroken(int)
    {
        int[] $r1;
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        int i0, i1, i2, i3;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        i2 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: int[] getColumnBreaks()>();

        i0 = lengthof $r1;

        i3 = 0;

     label1:
        if i3 >= i0 goto label3;

        i1 = $r1[i3];

        if i1 != i2 goto label2;

        return 1;

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        return 0;
    }

    public boolean isColumnHidden(int)
    {
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCol $r2;
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        int i0;
        long $l1;
        org.apache.poi.xssf.usermodel.helpers.ColumnHelper $r1;
        boolean $z0, $z1;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.apache.poi.xssf.usermodel.helpers.ColumnHelper columnHelper>;

        $l1 = (long) i0;

        $r2 = virtualinvoke $r1.<org.apache.poi.xssf.usermodel.helpers.ColumnHelper: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCol getColumn(long,boolean)>($l1, 0);

        if $r2 == null goto label1;

        $z0 = interfaceinvoke $r2.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCol: boolean getHidden()>();

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public boolean isDisplayFormulas()
    {
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetView $r1;
        boolean $z0;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        $r1 = specialinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetView getSheetTypeSheetView()>();

        $z0 = interfaceinvoke $r1.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetView: boolean getShowFormulas()>();

        return $z0;
    }

    public boolean isDisplayGridlines()
    {
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetView $r1;
        boolean $z0;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        $r1 = specialinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetView getSheetTypeSheetView()>();

        $z0 = interfaceinvoke $r1.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetView: boolean getShowGridLines()>();

        return $z0;
    }

    public void setDisplayGridlines(boolean)
    {
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetView $r1;
        boolean z0;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        z0 := @parameter0: boolean;

        $r1 = specialinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetView getSheetTypeSheetView()>();

        interfaceinvoke $r1.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetView: void setShowGridLines(boolean)>(z0);

        return;
    }

    public boolean isDisplayRowColHeadings()
    {
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetView $r1;
        boolean $z0;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        $r1 = specialinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetView getSheetTypeSheetView()>();

        $z0 = interfaceinvoke $r1.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetView: boolean getShowRowColHeaders()>();

        return $z0;
    }

    public void setDisplayRowColHeadings(boolean)
    {
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetView $r1;
        boolean z0;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        z0 := @parameter0: boolean;

        $r1 = specialinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetView getSheetTypeSheetView()>();

        interfaceinvoke $r1.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetView: void setShowRowColHeaders(boolean)>(z0);

        return;
    }

    public boolean isPrintGridlines()
    {
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet $r1;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTPrintOptions $r2;
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        boolean $z0, $z1;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        $r1 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet worksheet>;

        $r2 = interfaceinvoke $r1.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTPrintOptions getPrintOptions()>();

        if $r2 == null goto label1;

        $z0 = interfaceinvoke $r2.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTPrintOptions: boolean getGridLines()>();

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public void setPrintGridlines(boolean)
    {
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet $r1, $r2, $r3;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTPrintOptions $r4;
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        boolean $z0, z1;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        z1 := @parameter0: boolean;

        $r1 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet worksheet>;

        $z0 = interfaceinvoke $r1.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet: boolean isSetPrintOptions()>();

        if $z0 == 0 goto label1;

        $r3 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet worksheet>;

        $r4 = interfaceinvoke $r3.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTPrintOptions getPrintOptions()>();

        goto label2;

     label1:
        $r2 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet worksheet>;

        $r4 = interfaceinvoke $r2.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTPrintOptions addNewPrintOptions()>();

     label2:
        interfaceinvoke $r4.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTPrintOptions: void setGridLines(boolean)>(z1);

        return;
    }

    public boolean isRowBroken(int)
    {
        int[] $r1;
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        int i0, i1, i2, i3;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        i2 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: int[] getRowBreaks()>();

        i0 = lengthof $r1;

        i3 = 0;

     label1:
        if i3 >= i0 goto label3;

        i1 = $r1[i3];

        if i1 != i2 goto label2;

        return 1;

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        return 0;
    }

    public void setRowBreak(int)
    {
        long $l2, $l4, $l6, $l8;
        int i0, $i1, $i3, $i5, $i7;
        boolean $z0, $z1;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTPageBreak $r6;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet $r1, $r2, $r5;
        org.apache.poi.ss.SpreadsheetVersion $r4;
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTBreak $r3;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet worksheet>;

        $z0 = interfaceinvoke $r1.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet: boolean isSetRowBreaks()>();

        if $z0 == 0 goto label1;

        $r5 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet worksheet>;

        $r6 = interfaceinvoke $r5.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTPageBreak getRowBreaks()>();

        goto label2;

     label1:
        $r2 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet worksheet>;

        $r6 = interfaceinvoke $r2.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTPageBreak addNewRowBreaks()>();

     label2:
        $z1 = virtualinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: boolean isRowBroken(int)>(i0);

        if $z1 != 0 goto label3;

        $r3 = interfaceinvoke $r6.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTPageBreak: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTBreak addNewBrk()>();

        $i1 = i0 + 1;

        $l2 = (long) $i1;

        interfaceinvoke $r3.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTBreak: void setId(long)>($l2);

        interfaceinvoke $r3.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTBreak: void setMan(boolean)>(1);

        $r4 = <org.apache.poi.ss.SpreadsheetVersion: org.apache.poi.ss.SpreadsheetVersion EXCEL2007>;

        $i3 = virtualinvoke $r4.<org.apache.poi.ss.SpreadsheetVersion: int getLastColumnIndex()>();

        $l4 = (long) $i3;

        interfaceinvoke $r3.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTBreak: void setMax(long)>($l4);

        $i5 = interfaceinvoke $r6.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTPageBreak: int sizeOfBrkArray()>();

        $l6 = (long) $i5;

        interfaceinvoke $r6.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTPageBreak: void setCount(long)>($l6);

        $i7 = interfaceinvoke $r6.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTPageBreak: int sizeOfBrkArray()>();

        $l8 = (long) $i7;

        interfaceinvoke $r6.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTPageBreak: void setManualBreakCount(long)>($l8);

     label3:
        return;
    }

    public void removeColumnBreak(int)
    {
        long $l1, $l4;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTPageBreak $r3;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTBreak[] $r4;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet $r1, $r2;
        byte $b5;
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        int $i0, i2, $i3, i6;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTBreak $r5;
        boolean $z0;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        i2 := @parameter0: int;

        $r1 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet worksheet>;

        $z0 = interfaceinvoke $r1.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet: boolean isSetColBreaks()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        $r2 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet worksheet>;

        $r3 = interfaceinvoke $r2.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTPageBreak getColBreaks()>();

        $r4 = interfaceinvoke $r3.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTPageBreak: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTBreak[] getBrkArray()>();

        i6 = 0;

     label2:
        $i0 = lengthof $r4;

        if i6 >= $i0 goto label4;

        $r5 = $r4[i6];

        $l1 = interfaceinvoke $r5.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTBreak: long getId()>();

        $i3 = i2 + 1;

        $l4 = (long) $i3;

        $b5 = $l1 cmp $l4;

        if $b5 != 0 goto label3;

        interfaceinvoke $r3.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTPageBreak: void removeBrk(int)>(i6);

     label3:
        i6 = i6 + 1;

        goto label2;

     label4:
        return;
    }

    public void removeMergedRegion(int)
    {
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTMergeCells $r2;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTMergeCell $r5, $r6;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet $r1, $r4;
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        int $i0, $i1, $i2, $i3, i4, $i5, i6;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTMergeCell[] r3;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        i4 := @parameter0: int;

        $r1 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet worksheet>;

        $r2 = interfaceinvoke $r1.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTMergeCells getMergeCells()>();

        $i0 = interfaceinvoke $r2.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTMergeCells: int sizeOfMergeCellArray()>();

        $i1 = $i0 - 1;

        r3 = newarray (org.openxmlformats.schemas.spreadsheetml.x2006.main.CTMergeCell)[$i1];

        i6 = 0;

     label1:
        $i2 = interfaceinvoke $r2.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTMergeCells: int sizeOfMergeCellArray()>();

        if i6 >= $i2 goto label4;

        if i6 >= i4 goto label2;

        $r6 = interfaceinvoke $r2.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTMergeCells: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTMergeCell getMergeCellArray(int)>(i6);

        r3[i6] = $r6;

        goto label3;

     label2:
        if i6 <= i4 goto label3;

        $i5 = i6 - 1;

        $r5 = interfaceinvoke $r2.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTMergeCells: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTMergeCell getMergeCellArray(int)>(i6);

        r3[$i5] = $r5;

     label3:
        i6 = i6 + 1;

        goto label1;

     label4:
        $i3 = lengthof r3;

        if $i3 <= 0 goto label5;

        interfaceinvoke $r2.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTMergeCells: void setMergeCellArray(org.openxmlformats.schemas.spreadsheetml.x2006.main.CTMergeCell[])>(r3);

        goto label6;

     label5:
        $r4 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet worksheet>;

        interfaceinvoke $r4.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet: void unsetMergeCells()>();

     label6:
        return;
    }

    public void removeRow(org.apache.poi.ss.usermodel.Row)
    {
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetData $r12;
        java.lang.Integer $r7, $r10;
        java.util.ArrayList $r3;
        int $i0, $i1, $i2;
        org.apache.poi.ss.usermodel.Cell r17;
        boolean $z0, $z1;
        org.apache.poi.ss.usermodel.Sheet $r1;
        java.util.Iterator $r4, $r5;
        java.lang.IllegalArgumentException $r16;
        java.util.TreeMap $r6, $r9;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet $r11;
        org.apache.poi.xssf.usermodel.XSSFSheet r2;
        org.apache.poi.ss.usermodel.Row r0;
        java.lang.Object $r13, $r14;
        org.apache.poi.xssf.usermodel.XSSFCell $r15, r18;
        java.util.SortedMap $r8;

        r2 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        r0 := @parameter0: org.apache.poi.ss.usermodel.Row;

        $r1 = interfaceinvoke r0.<org.apache.poi.ss.usermodel.Row: org.apache.poi.ss.usermodel.Sheet getSheet()>();

        if $r1 == r2 goto label1;

        $r16 = new java.lang.IllegalArgumentException;

        specialinvoke $r16.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Specified row does not belong to this sheet");

        throw $r16;

     label1:
        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        $r4 = interfaceinvoke r0.<org.apache.poi.ss.usermodel.Row: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r14 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r17 = (org.apache.poi.ss.usermodel.Cell) $r14;

        $r15 = (org.apache.poi.xssf.usermodel.XSSFCell) r17;

        virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>($r15);

        goto label2;

     label3:
        $r5 = virtualinvoke $r3.<java.util.ArrayList: java.util.Iterator iterator()>();

     label4:
        $z1 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label5;

        $r13 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r18 = (org.apache.poi.xssf.usermodel.XSSFCell) $r13;

        interfaceinvoke r0.<org.apache.poi.ss.usermodel.Row: void removeCell(org.apache.poi.ss.usermodel.Cell)>(r18);

        goto label4;

     label5:
        $r6 = r2.<org.apache.poi.xssf.usermodel.XSSFSheet: java.util.TreeMap _rows>;

        $i0 = interfaceinvoke r0.<org.apache.poi.ss.usermodel.Row: int getRowNum()>();

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r8 = virtualinvoke $r6.<java.util.TreeMap: java.util.SortedMap headMap(java.lang.Object)>($r7);

        $i1 = interfaceinvoke $r8.<java.util.SortedMap: int size()>();

        $r9 = r2.<org.apache.poi.xssf.usermodel.XSSFSheet: java.util.TreeMap _rows>;

        $i2 = interfaceinvoke r0.<org.apache.poi.ss.usermodel.Row: int getRowNum()>();

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        virtualinvoke $r9.<java.util.TreeMap: java.lang.Object remove(java.lang.Object)>($r10);

        $r11 = r2.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet worksheet>;

        $r12 = interfaceinvoke $r11.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetData getSheetData()>();

        interfaceinvoke $r12.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetData: void removeRow(int)>($i1);

        return;
    }

    public void removeRowBreak(int)
    {
        long $l1, $l4;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTPageBreak $r3;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTBreak[] $r4;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet $r1, $r2;
        byte $b5;
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        int $i0, i2, $i3, i6;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTBreak $r5;
        boolean $z0;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        i2 := @parameter0: int;

        $r1 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet worksheet>;

        $z0 = interfaceinvoke $r1.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet: boolean isSetRowBreaks()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        $r2 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet worksheet>;

        $r3 = interfaceinvoke $r2.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTPageBreak getRowBreaks()>();

        $r4 = interfaceinvoke $r3.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTPageBreak: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTBreak[] getBrkArray()>();

        i6 = 0;

     label2:
        $i0 = lengthof $r4;

        if i6 >= $i0 goto label4;

        $r5 = $r4[i6];

        $l1 = interfaceinvoke $r5.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTBreak: long getId()>();

        $i3 = i2 + 1;

        $l4 = (long) $i3;

        $b5 = $l1 cmp $l4;

        if $b5 != 0 goto label3;

        interfaceinvoke $r3.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTPageBreak: void removeBrk(int)>(i6);

     label3:
        i6 = i6 + 1;

        goto label2;

     label4:
        return;
    }

    public void setForceFormulaRecalculation(boolean)
    {
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetCalcPr $r9, $r11;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.STCalcMode$Enum $r5, $r6, $r7;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCalcPr $r3;
        org.apache.poi.xssf.usermodel.XSSFWorkbook $r1;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet $r4, $r8, $r10;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorkbook $r2;
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        boolean $z0, z1;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        z1 := @parameter0: boolean;

        $r1 = virtualinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.apache.poi.xssf.usermodel.XSSFWorkbook getWorkbook()>();

        $r2 = virtualinvoke $r1.<org.apache.poi.xssf.usermodel.XSSFWorkbook: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorkbook getCTWorkbook()>();

        $r3 = interfaceinvoke $r2.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorkbook: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCalcPr getCalcPr()>();

        $r4 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet worksheet>;

        $z0 = interfaceinvoke $r4.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet: boolean isSetSheetCalcPr()>();

        if $z0 == 0 goto label1;

        $r10 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet worksheet>;

        $r11 = interfaceinvoke $r10.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetCalcPr getSheetCalcPr()>();

        interfaceinvoke $r11.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetCalcPr: void setFullCalcOnLoad(boolean)>(z1);

        goto label2;

     label1:
        if z1 == 0 goto label2;

        $r8 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet worksheet>;

        $r9 = interfaceinvoke $r8.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetCalcPr addNewSheetCalcPr()>();

        interfaceinvoke $r9.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetCalcPr: void setFullCalcOnLoad(boolean)>(z1);

     label2:
        if z1 == 0 goto label3;

        if $r3 == null goto label3;

        $r5 = interfaceinvoke $r3.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCalcPr: org.openxmlformats.schemas.spreadsheetml.x2006.main.STCalcMode$Enum getCalcMode()>();

        $r6 = <org.openxmlformats.schemas.spreadsheetml.x2006.main.STCalcMode: org.openxmlformats.schemas.spreadsheetml.x2006.main.STCalcMode$Enum MANUAL>;

        if $r5 != $r6 goto label3;

        $r7 = <org.openxmlformats.schemas.spreadsheetml.x2006.main.STCalcMode: org.openxmlformats.schemas.spreadsheetml.x2006.main.STCalcMode$Enum AUTO>;

        interfaceinvoke $r3.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCalcPr: void setCalcMode(org.openxmlformats.schemas.spreadsheetml.x2006.main.STCalcMode$Enum)>($r7);

     label3:
        return;
    }

    public boolean getForceFormulaRecalculation()
    {
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetCalcPr $r3;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet $r1, $r2;
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        boolean $z0, $z1;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        $r1 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet worksheet>;

        $z0 = interfaceinvoke $r1.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet: boolean isSetSheetCalcPr()>();

        if $z0 == 0 goto label1;

        $r2 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet worksheet>;

        $r3 = interfaceinvoke $r2.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetCalcPr getSheetCalcPr()>();

        $z1 = interfaceinvoke $r3.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetCalcPr: boolean getFullCalcOnLoad()>();

        return $z1;

     label1:
        return 0;
    }

    public java.util.Iterator rowIterator()
    {
        java.util.TreeMap $r1;
        java.util.Iterator $r3;
        java.util.Collection $r2;
        org.apache.poi.xssf.usermodel.XSSFSheet r0;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        $r1 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: java.util.TreeMap _rows>;

        $r2 = virtualinvoke $r1.<java.util.TreeMap: java.util.Collection values()>();

        $r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>();

        return $r3;
    }

    public java.util.Iterator iterator()
    {
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        java.util.Iterator $r1;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        $r1 = virtualinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: java.util.Iterator rowIterator()>();

        return $r1;
    }

    public boolean getAutobreaks()
    {
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetPr $r1;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTPageSetUpPr $r2;
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        boolean $z0, $z1;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        $r1 = specialinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetPr getSheetTypeSheetPr()>();

        if $r1 == null goto label1;

        $z1 = interfaceinvoke $r1.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetPr: boolean isSetPageSetUpPr()>();

        if $z1 != 0 goto label2;

     label1:
        $r2 = staticinvoke <org.openxmlformats.schemas.spreadsheetml.x2006.main.CTPageSetUpPr$Factory: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTPageSetUpPr newInstance()>();

        goto label3;

     label2:
        $r2 = interfaceinvoke $r1.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetPr: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTPageSetUpPr getPageSetUpPr()>();

     label3:
        $z0 = interfaceinvoke $r2.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTPageSetUpPr: boolean getAutoPageBreaks()>();

        return $z0;
    }

    public void setAutobreaks(boolean)
    {
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetPr $r1;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTPageSetUpPr $r2;
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        boolean $z0, z1;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        z1 := @parameter0: boolean;

        $r1 = specialinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetPr getSheetTypeSheetPr()>();

        $z0 = interfaceinvoke $r1.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetPr: boolean isSetPageSetUpPr()>();

        if $z0 == 0 goto label1;

        $r2 = interfaceinvoke $r1.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetPr: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTPageSetUpPr getPageSetUpPr()>();

        goto label2;

     label1:
        $r2 = interfaceinvoke $r1.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetPr: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTPageSetUpPr addNewPageSetUpPr()>();

     label2:
        interfaceinvoke $r2.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTPageSetUpPr: void setAutoPageBreaks(boolean)>(z1);

        return;
    }

    public void setColumnBreak(int)
    {
        long $l2, $l4, $l6, $l8;
        int i0, $i1, $i3, $i5, $i7;
        boolean $z0, $z1;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTPageBreak $r6;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet $r1, $r2, $r5;
        org.apache.poi.ss.SpreadsheetVersion $r4;
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTBreak $r3;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        i0 := @parameter0: int;

        $z0 = virtualinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: boolean isColumnBroken(int)>(i0);

        if $z0 != 0 goto label3;

        $r1 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet worksheet>;

        $z1 = interfaceinvoke $r1.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet: boolean isSetColBreaks()>();

        if $z1 == 0 goto label1;

        $r5 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet worksheet>;

        $r6 = interfaceinvoke $r5.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTPageBreak getColBreaks()>();

        goto label2;

     label1:
        $r2 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet worksheet>;

        $r6 = interfaceinvoke $r2.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTPageBreak addNewColBreaks()>();

     label2:
        $r3 = interfaceinvoke $r6.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTPageBreak: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTBreak addNewBrk()>();

        $i1 = i0 + 1;

        $l2 = (long) $i1;

        interfaceinvoke $r3.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTBreak: void setId(long)>($l2);

        interfaceinvoke $r3.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTBreak: void setMan(boolean)>(1);

        $r4 = <org.apache.poi.ss.SpreadsheetVersion: org.apache.poi.ss.SpreadsheetVersion EXCEL2007>;

        $i3 = virtualinvoke $r4.<org.apache.poi.ss.SpreadsheetVersion: int getLastRowIndex()>();

        $l4 = (long) $i3;

        interfaceinvoke $r3.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTBreak: void setMax(long)>($l4);

        $i5 = interfaceinvoke $r6.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTPageBreak: int sizeOfBrkArray()>();

        $l6 = (long) $i5;

        interfaceinvoke $r6.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTPageBreak: void setCount(long)>($l6);

        $i7 = interfaceinvoke $r6.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTPageBreak: int sizeOfBrkArray()>();

        $l8 = (long) $i7;

        interfaceinvoke $r6.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTPageBreak: void setManualBreakCount(long)>($l8);

     label3:
        return;
    }

    public void setColumnGroupCollapsed(int, boolean)
    {
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        int i0;
        boolean z0;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        if z0 == 0 goto label1;

        specialinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: void collapseColumn(int)>(i0);

        goto label2;

     label1:
        specialinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: void expandColumn(int)>(i0);

     label2:
        return;
    }

    private void collapseColumn(int)
    {
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCol $r4, $r6;
        long $l1;
        java.lang.Integer $r7;
        short $s4;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCols $r2;
        int i0, $i2, $i3, $i5, $i6, $i8, $i9;
        java.lang.Boolean $r8;
        org.apache.poi.xssf.usermodel.helpers.ColumnHelper $r3, $r5;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet $r1;
        org.apache.poi.xssf.usermodel.XSSFSheet r0;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet worksheet>;

        $r2 = interfaceinvoke $r1.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCols getColsArray(int)>(0);

        $r3 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.apache.poi.xssf.usermodel.helpers.ColumnHelper columnHelper>;

        $l1 = (long) i0;

        $r4 = virtualinvoke $r3.<org.apache.poi.xssf.usermodel.helpers.ColumnHelper: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCol getColumn(long,boolean)>($l1, 0);

        $r5 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.apache.poi.xssf.usermodel.helpers.ColumnHelper columnHelper>;

        $i2 = virtualinvoke $r5.<org.apache.poi.xssf.usermodel.helpers.ColumnHelper: int getIndexOfColumn(org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCols,org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCol)>($r2, $r4);

        $i8 = (int) -1;

        if $i2 != $i8 goto label1;

        return;

     label1:
        $i3 = specialinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: int findStartOfColumnOutlineGroup(int)>($i2);

        $r6 = interfaceinvoke $r2.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCols: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCol getColArray(int)>($i3);

        $s4 = interfaceinvoke $r6.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCol: short getOutlineLevel()>();

        $i9 = (int) $s4;

        $i5 = specialinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: int setGroupHidden(int,int,boolean)>($i3, $i9, 1);

        $i6 = $i5 + 1;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r8 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        specialinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: void setColumn(int,java.lang.Short,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Boolean)>($i6, null, $r7, null, null, $r8);

        return;
    }

    private void setColumn(int, java.lang.Short, java.lang.Integer, java.lang.Integer, java.lang.Boolean, java.lang.Boolean)
    {
        java.lang.Integer r3, r4;
        byte $b4, $b7, $b10, $b18, $b30, $b36, $b41, $b44, $b47;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCols $r2;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet $r1;
        long $l1, $l3, $l5, $l6, $l8, $l9, $l12, $l13, $l15, $l16, $l17, $l19, $l22, $l23, $l24, $l26, $l27, $l28, $l29, $l33, $l35, $l37, $l38, $l39, $l40, $l42, $l43, $l45, $l46;
        short $s31;
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCol $r8, $r11, $r13, $r16, $r18, r20;
        java.lang.Short r19;
        boolean z0, z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, z11, $z12, $z13, $z14, $z15;
        int $i0, i2, $i11, $i14, i20, $i21, $i25, $i32, $i34, i48, $i49, $i50, $i51, $i52;
        java.lang.Boolean r5, r6;
        org.apache.poi.xssf.usermodel.helpers.ColumnHelper $r7, $r9, $r10, $r12, $r14, $r15, $r17;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        i2 := @parameter0: int;

        r19 := @parameter1: java.lang.Short;

        r3 := @parameter2: java.lang.Integer;

        r4 := @parameter3: java.lang.Integer;

        r5 := @parameter4: java.lang.Boolean;

        r6 := @parameter5: java.lang.Boolean;

        $r1 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet worksheet>;

        $r2 = interfaceinvoke $r1.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCols getColsArray(int)>(0);

        r20 = null;

        i48 = 0;

     label01:
        $i0 = interfaceinvoke $r2.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCols: int sizeOfColArray()>();

        if i48 >= $i0 goto label04;

        $r18 = interfaceinvoke $r2.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCols: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCol getColArray(int)>(i48);

        $l39 = interfaceinvoke $r18.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCol: long getMin()>();

        $l40 = (long) i2;

        $b41 = $l39 cmp $l40;

        $i49 = (int) $b41;

        if $i49 < 0 goto label02;

        $l45 = interfaceinvoke $r18.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCol: long getMax()>();

        $l46 = (long) i2;

        $b47 = $l45 cmp $l46;

        $i50 = (int) $b47;

        if $i50 > 0 goto label02;

        r20 = $r18;

        goto label04;

     label02:
        $l42 = interfaceinvoke $r18.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCol: long getMin()>();

        $l43 = (long) i2;

        $b44 = $l42 cmp $l43;

        $i51 = (int) $b44;

        if $i51 <= 0 goto label03;

        goto label04;

     label03:
        i48 = i48 + 1;

        goto label01;

     label04:
        if r20 != null goto label05;

        $r16 = staticinvoke <org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCol$Factory: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCol newInstance()>();

        $l37 = (long) i2;

        interfaceinvoke $r16.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCol: void setMin(long)>($l37);

        $l38 = (long) i2;

        interfaceinvoke $r16.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCol: void setMax(long)>($l38);

        $z9 = virtualinvoke r6.<java.lang.Boolean: boolean booleanValue()>();

        specialinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: void unsetCollapsed(boolean,org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCol)>($z9, $r16);

        $r17 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.apache.poi.xssf.usermodel.helpers.ColumnHelper columnHelper>;

        virtualinvoke $r17.<org.apache.poi.xssf.usermodel.helpers.ColumnHelper: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCols addCleanColIntoCols(org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCols,org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCol)>($r2, $r16);

        return;

     label05:
        if r3 == null goto label06;

        $l33 = interfaceinvoke r20.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCol: long getStyle()>();

        $i34 = virtualinvoke r3.<java.lang.Integer: int intValue()>();

        $l35 = (long) $i34;

        $b36 = $l33 cmp $l35;

        if $b36 == 0 goto label06;

        $z10 = 1;

        goto label07;

     label06:
        $z10 = 0;

     label07:
        z11 = $z10;

        if r4 == null goto label08;

        $s31 = interfaceinvoke r20.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCol: short getOutlineLevel()>();

        $i32 = virtualinvoke r4.<java.lang.Integer: int intValue()>();

        $i52 = (int) $s31;

        if $i52 == $i32 goto label08;

        $z12 = 1;

        goto label09;

     label08:
        $z12 = 0;

     label09:
        z0 = $z12;

        if r5 == null goto label10;

        $z7 = interfaceinvoke r20.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCol: boolean getHidden()>();

        $z8 = virtualinvoke r5.<java.lang.Boolean: boolean booleanValue()>();

        if $z7 == $z8 goto label10;

        $z13 = 1;

        goto label11;

     label10:
        $z13 = 0;

     label11:
        z1 = $z13;

        if r6 == null goto label12;

        $z5 = interfaceinvoke r20.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCol: boolean getCollapsed()>();

        $z6 = virtualinvoke r6.<java.lang.Boolean: boolean booleanValue()>();

        if $z5 == $z6 goto label12;

        $z14 = 1;

        goto label13;

     label12:
        $z14 = 0;

     label13:
        if z0 != 0 goto label14;

        if z1 != 0 goto label14;

        if $z14 != 0 goto label14;

        if z11 == 0 goto label15;

     label14:
        $z15 = 1;

        goto label16;

     label15:
        $z15 = 0;

     label16:
        if $z15 != 0 goto label17;

        return;

     label17:
        $l1 = interfaceinvoke r20.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCol: long getMin()>();

        $l3 = (long) i2;

        $b4 = $l1 cmp $l3;

        if $b4 != 0 goto label18;

        $l28 = interfaceinvoke r20.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCol: long getMax()>();

        $l29 = (long) i2;

        $b30 = $l28 cmp $l29;

        if $b30 != 0 goto label18;

        $z4 = virtualinvoke r6.<java.lang.Boolean: boolean booleanValue()>();

        specialinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: void unsetCollapsed(boolean,org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCol)>($z4, r20);

        return;

     label18:
        $l5 = interfaceinvoke r20.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCol: long getMin()>();

        $l6 = (long) i2;

        $b7 = $l5 cmp $l6;

        if $b7 == 0 goto label19;

        $l16 = interfaceinvoke r20.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCol: long getMax()>();

        $l17 = (long) i2;

        $b18 = $l16 cmp $l17;

        if $b18 != 0 goto label22;

     label19:
        $l8 = interfaceinvoke r20.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCol: long getMin()>();

        $l9 = (long) i2;

        $b10 = $l8 cmp $l9;

        if $b10 != 0 goto label20;

        $i14 = i2 + 1;

        $l15 = (long) $i14;

        interfaceinvoke r20.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCol: void setMin(long)>($l15);

        goto label21;

     label20:
        $i11 = i2 - 1;

        $l12 = (long) $i11;

        interfaceinvoke r20.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCol: void setMax(long)>($l12);

     label21:
        $r7 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.apache.poi.xssf.usermodel.helpers.ColumnHelper columnHelper>;

        $r8 = virtualinvoke $r7.<org.apache.poi.xssf.usermodel.helpers.ColumnHelper: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCol cloneCol(org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCols,org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCol)>($r2, r20);

        $l13 = (long) i2;

        interfaceinvoke $r8.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCol: void setMin(long)>($l13);

        $z2 = virtualinvoke r6.<java.lang.Boolean: boolean booleanValue()>();

        specialinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: void unsetCollapsed(boolean,org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCol)>($z2, $r8);

        $r9 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.apache.poi.xssf.usermodel.helpers.ColumnHelper columnHelper>;

        virtualinvoke $r9.<org.apache.poi.xssf.usermodel.helpers.ColumnHelper: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCols addCleanColIntoCols(org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCols,org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCol)>($r2, $r8);

        goto label23;

     label22:
        $r10 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.apache.poi.xssf.usermodel.helpers.ColumnHelper columnHelper>;

        $r11 = virtualinvoke $r10.<org.apache.poi.xssf.usermodel.helpers.ColumnHelper: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCol cloneCol(org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCols,org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCol)>($r2, r20);

        $r12 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.apache.poi.xssf.usermodel.helpers.ColumnHelper columnHelper>;

        $r13 = virtualinvoke $r12.<org.apache.poi.xssf.usermodel.helpers.ColumnHelper: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCol cloneCol(org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCols,org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCol)>($r2, r20);

        $l19 = interfaceinvoke r20.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCol: long getMax()>();

        i20 = (int) $l19;

        $i21 = i2 - 1;

        $l22 = (long) $i21;

        interfaceinvoke r20.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCol: void setMax(long)>($l22);

        $l23 = (long) i2;

        interfaceinvoke $r11.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCol: void setMin(long)>($l23);

        $l24 = (long) i2;

        interfaceinvoke $r11.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCol: void setMax(long)>($l24);

        $z3 = virtualinvoke r6.<java.lang.Boolean: boolean booleanValue()>();

        specialinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: void unsetCollapsed(boolean,org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCol)>($z3, $r11);

        $r14 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.apache.poi.xssf.usermodel.helpers.ColumnHelper columnHelper>;

        virtualinvoke $r14.<org.apache.poi.xssf.usermodel.helpers.ColumnHelper: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCols addCleanColIntoCols(org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCols,org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCol)>($r2, $r11);

        $i25 = i2 + 1;

        $l26 = (long) $i25;

        interfaceinvoke $r13.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCol: void setMin(long)>($l26);

        $l27 = (long) i20;

        interfaceinvoke $r13.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCol: void setMax(long)>($l27);

        $r15 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.apache.poi.xssf.usermodel.helpers.ColumnHelper columnHelper>;

        virtualinvoke $r15.<org.apache.poi.xssf.usermodel.helpers.ColumnHelper: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCols addCleanColIntoCols(org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCols,org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCol)>($r2, $r13);

     label23:
        return;
    }

    private void unsetCollapsed(boolean, org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCol)
    {
        org.apache.poi.xssf.usermodel.XSSFSheet r1;
        boolean z0;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCol r0;

        r1 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        z0 := @parameter0: boolean;

        r0 := @parameter1: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCol;

        if z0 == 0 goto label1;

        interfaceinvoke r0.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCol: void setCollapsed(boolean)>(z0);

        goto label2;

     label1:
        interfaceinvoke r0.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCol: void unsetCollapsed()>();

     label2:
        return;
    }

    private int setGroupHidden(int, int, boolean)
    {
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCol $r3, r4;
        long $l8;
        short $s5;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCols $r2;
        int i0, $i1, $i2, $i3, $i4, i6, i7, $i9, $i10;
        boolean z0, $z1;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet $r1;
        org.apache.poi.xssf.usermodel.XSSFSheet r0;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        i0 := @parameter0: int;

        i6 := @parameter1: int;

        z0 := @parameter2: boolean;

        $r1 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet worksheet>;

        $r2 = interfaceinvoke $r1.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCols getColsArray(int)>(0);

        i7 = i0;

        r4 = interfaceinvoke $r2.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCols: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCol getColArray(int)>(i0);

     label1:
        $i1 = interfaceinvoke $r2.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCols: int sizeOfColArray()>();

        if i7 >= $i1 goto label5;

        interfaceinvoke r4.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCol: void setHidden(boolean)>(z0);

        $i2 = i7 + 1;

        $i3 = interfaceinvoke $r2.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCols: int sizeOfColArray()>();

        if $i2 >= $i3 goto label4;

        $i4 = i7 + 1;

        $r3 = interfaceinvoke $r2.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCols: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCol getColArray(int)>($i4);

        $z1 = specialinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: boolean isAdjacentBefore(org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCol,org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCol)>(r4, $r3);

        if $z1 != 0 goto label2;

        goto label5;

     label2:
        $s5 = interfaceinvoke $r3.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCol: short getOutlineLevel()>();

        $i10 = (int) $s5;

        if $i10 >= i6 goto label3;

        goto label5;

     label3:
        r4 = $r3;

     label4:
        i7 = i7 + 1;

        goto label1;

     label5:
        $l8 = interfaceinvoke r4.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCol: long getMax()>();

        $i9 = (int) $l8;

        return $i9;
    }

    private boolean isAdjacentBefore(org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCol, org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCol)
    {
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCol r0, r1;
        long $l0, $l1, $l2;
        byte $b3;
        org.apache.poi.xssf.usermodel.XSSFSheet r2;
        boolean $z0;

        r2 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        r0 := @parameter0: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCol;

        r1 := @parameter1: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCol;

        $l0 = interfaceinvoke r0.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCol: long getMax()>();

        $l1 = interfaceinvoke r1.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCol: long getMin()>();

        $l2 = $l1 - 1L;

        $b3 = $l0 cmp $l2;

        if $b3 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private int findStartOfColumnOutlineGroup(int)
    {
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCol $r3, $r4, r5;
        short $s1, $s3;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet $r1;
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCols $r2;
        int i0, $i2, i4, $i5, $i6, $i8;
        boolean $z0;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet worksheet>;

        $r2 = interfaceinvoke $r1.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCols getColsArray(int)>(0);

        $r3 = interfaceinvoke $r2.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCols: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCol getColArray(int)>(i0);

        r5 = $r3;

        $s1 = interfaceinvoke $r3.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCol: short getOutlineLevel()>();

        i4 = i0;

     label1:
        if i4 == 0 goto label4;

        $i2 = i4 - 1;

        $r4 = interfaceinvoke $r2.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCols: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCol getColArray(int)>($i2);

        $z0 = specialinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: boolean isAdjacentBefore(org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCol,org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCol)>($r4, r5);

        if $z0 != 0 goto label2;

        goto label4;

     label2:
        $s3 = interfaceinvoke $r4.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCol: short getOutlineLevel()>();

        $i5 = (int) $s3;

        $i6 = (int) $s1;

        if $i5 >= $i6 goto label3;

        goto label4;

     label3:
        $i8 = (int) -1;

        i4 = i4 + $i8;

        r5 = $r4;

        goto label1;

     label4:
        return i4;
    }

    private int findEndOfColumnOutlineGroup(int)
    {
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCol $r3, $r4, r5;
        short $s1, $s5;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCols $r2;
        int i0, $i2, $i3, $i4, i6, $i7, $i8;
        boolean $z0;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet $r1;
        org.apache.poi.xssf.usermodel.XSSFSheet r0;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet worksheet>;

        $r2 = interfaceinvoke $r1.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCols getColsArray(int)>(0);

        $r3 = interfaceinvoke $r2.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCols: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCol getColArray(int)>(i0);

        r5 = $r3;

        $s1 = interfaceinvoke $r3.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCol: short getOutlineLevel()>();

        i6 = i0;

     label1:
        $i2 = interfaceinvoke $r2.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCols: int sizeOfColArray()>();

        $i3 = $i2 - 1;

        if i6 >= $i3 goto label4;

        $i4 = i6 + 1;

        $r4 = interfaceinvoke $r2.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCols: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCol getColArray(int)>($i4);

        $z0 = specialinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: boolean isAdjacentBefore(org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCol,org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCol)>(r5, $r4);

        if $z0 != 0 goto label2;

        goto label4;

     label2:
        $s5 = interfaceinvoke $r4.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCol: short getOutlineLevel()>();

        $i7 = (int) $s5;

        $i8 = (int) $s1;

        if $i7 >= $i8 goto label3;

        goto label4;

     label3:
        i6 = i6 + 1;

        r5 = $r4;

        goto label1;

     label4:
        return i6;
    }

    private void expandColumn(int)
    {
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCol $r4, $r6, $r9;
        long $l1, $l3, $l8;
        short $s11, $s12;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCols $r2;
        int i0, $i2, $i4, $i5, $i6, $i7, $i9, $i10, i13, $i15, $i16, $i17;
        java.lang.Boolean $r7, $r8;
        boolean $z0, $z1, z2;
        org.apache.poi.xssf.usermodel.helpers.ColumnHelper $r3, $r5;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet $r1;
        org.apache.poi.xssf.usermodel.XSSFSheet r0;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet worksheet>;

        $r2 = interfaceinvoke $r1.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCols getColsArray(int)>(0);

        $r3 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.apache.poi.xssf.usermodel.helpers.ColumnHelper columnHelper>;

        $l1 = (long) i0;

        $r4 = virtualinvoke $r3.<org.apache.poi.xssf.usermodel.helpers.ColumnHelper: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCol getColumn(long,boolean)>($l1, 0);

        $r5 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.apache.poi.xssf.usermodel.helpers.ColumnHelper columnHelper>;

        $i2 = virtualinvoke $r5.<org.apache.poi.xssf.usermodel.helpers.ColumnHelper: int getIndexOfColumn(org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCols,org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCol)>($r2, $r4);

        $l3 = interfaceinvoke $r4.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCol: long getMax()>();

        $i4 = (int) $l3;

        $i5 = specialinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: int findColInfoIdx(int,int)>($i4, $i2);

        $i15 = (int) -1;

        if $i5 != $i15 goto label1;

        return;

     label1:
        $z0 = specialinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: boolean isColumnGroupCollapsed(int)>($i5);

        if $z0 != 0 goto label2;

        return;

     label2:
        $i6 = specialinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: int findStartOfColumnOutlineGroup(int)>($i5);

        $i7 = specialinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: int findEndOfColumnOutlineGroup(int)>($i5);

        $r6 = interfaceinvoke $r2.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCols: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCol getColArray(int)>($i7);

        $z1 = specialinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: boolean isColumnGroupHiddenByParent(int)>($i5);

        if $z1 != 0 goto label6;

        $s11 = interfaceinvoke $r6.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCol: short getOutlineLevel()>();

        z2 = 0;

        i13 = $i6;

     label3:
        if i13 > $i7 goto label6;

        $r9 = interfaceinvoke $r2.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCols: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCol getColArray(int)>(i13);

        $s12 = interfaceinvoke $r9.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCol: short getOutlineLevel()>();

        $i16 = (int) $s11;

        $i17 = (int) $s12;

        if $i16 != $i17 goto label4;

        interfaceinvoke $r9.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCol: void unsetHidden()>();

        if z2 == 0 goto label5;

        z2 = 0;

        interfaceinvoke $r9.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCol: void setCollapsed(boolean)>(1);

        goto label5;

     label4:
        z2 = 1;

     label5:
        i13 = i13 + 1;

        goto label3;

     label6:
        $l8 = interfaceinvoke $r6.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCol: long getMax()>();

        $i9 = (int) $l8;

        $i10 = $i9 + 1;

        $r8 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        $r7 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        specialinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: void setColumn(int,java.lang.Short,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Boolean)>($i10, null, null, null, $r8, $r7);

        return;
    }

    private boolean isColumnGroupHiddenByParent(int)
    {
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCol $r3, $r4, $r5, $r6;
        short s5, s6;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCols $r2;
        int i0, $i1, $i2, $i3, $i4, $i7;
        boolean $z0, $z1, z2, z3;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet $r1;
        org.apache.poi.xssf.usermodel.XSSFSheet r0;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet worksheet>;

        $r2 = interfaceinvoke $r1.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCols getColsArray(int)>(0);

        s5 = 0;

        z2 = 0;

        $i1 = specialinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: int findEndOfColumnOutlineGroup(int)>(i0);

        $i2 = interfaceinvoke $r2.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCols: int sizeOfColArray()>();

        if $i1 >= $i2 goto label1;

        $i4 = $i1 + 1;

        $r5 = interfaceinvoke $r2.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCols: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCol getColArray(int)>($i4);

        $r6 = interfaceinvoke $r2.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCols: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCol getColArray(int)>($i1);

        $z1 = specialinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: boolean isAdjacentBefore(org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCol,org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCol)>($r6, $r5);

        if $z1 == 0 goto label1;

        s5 = interfaceinvoke $r5.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCol: short getOutlineLevel()>();

        z2 = interfaceinvoke $r5.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCol: boolean getHidden()>();

     label1:
        s6 = 0;

        z3 = 0;

        $i7 = specialinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: int findStartOfColumnOutlineGroup(int)>(i0);

        if $i7 <= 0 goto label2;

        $i3 = $i7 - 1;

        $r3 = interfaceinvoke $r2.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCols: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCol getColArray(int)>($i3);

        $r4 = interfaceinvoke $r2.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCols: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCol getColArray(int)>($i7);

        $z0 = specialinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: boolean isAdjacentBefore(org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCol,org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCol)>($r3, $r4);

        if $z0 == 0 goto label2;

        s6 = interfaceinvoke $r3.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCol: short getOutlineLevel()>();

        z3 = interfaceinvoke $r3.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCol: boolean getHidden()>();

     label2:
        if s5 <= s6 goto label3;

        return z2;

     label3:
        return z3;
    }

    private int findColInfoIdx(int, int)
    {
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCol $r3;
        long $l3, $l4;
        byte $b5;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCols $r2;
        int i0, i1, $i2, i6, $i7, $i9;
        java.lang.String $r8, $r13;
        boolean $z0;
        java.lang.IllegalArgumentException $r15, $r17;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet $r1;
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        java.lang.StringBuilder $r6, $r7, $r11, $r12, $r14, $r16;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet worksheet>;

        $r2 = interfaceinvoke $r1.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCols getColsArray(int)>(0);

        if i0 >= 0 goto label1;

        $r15 = new java.lang.IllegalArgumentException;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("column parameter out of range: ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r15.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r13);

        throw $r15;

     label1:
        if i1 >= 0 goto label2;

        $r17 = new java.lang.IllegalArgumentException;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("fromIdx parameter out of range: ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r17.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r17;

     label2:
        i6 = i1;

     label3:
        $i2 = interfaceinvoke $r2.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCols: int sizeOfColArray()>();

        if i6 >= $i2 goto label6;

        $r3 = interfaceinvoke $r2.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCols: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCol getColArray(int)>(i6);

        $z0 = specialinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: boolean containsColumn(org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCol,int)>($r3, i0);

        if $z0 == 0 goto label4;

        return i6;

     label4:
        $l3 = interfaceinvoke $r3.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCol: long getMin()>();

        $l4 = (long) i1;

        $b5 = $l3 cmp $l4;

        $i7 = (int) $b5;

        if $i7 <= 0 goto label5;

        goto label6;

     label5:
        i6 = i6 + 1;

        goto label3;

     label6:
        $i9 = (int) -1;

        return $i9;
    }

    private boolean containsColumn(org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCol, int)
    {
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCol r0;
        long $l0, $l2, $l4, $l5;
        byte $b3, $b6;
        int i1, $i7, $i8;
        org.apache.poi.xssf.usermodel.XSSFSheet r1;
        boolean $z0;

        r1 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        r0 := @parameter0: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCol;

        i1 := @parameter1: int;

        $l0 = interfaceinvoke r0.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCol: long getMin()>();

        $l2 = (long) i1;

        $b3 = $l0 cmp $l2;

        $i7 = (int) $b3;

        if $i7 > 0 goto label1;

        $l4 = (long) i1;

        $l5 = interfaceinvoke r0.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCol: long getMax()>();

        $b6 = $l4 cmp $l5;

        $i8 = (int) $b6;

        if $i8 > 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private boolean isColumnGroupCollapsed(int)
    {
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCol $r3, $r4;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet $r1;
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCols $r2;
        int i0, $i1, i2, $i3;
        boolean $z0, $z1;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet worksheet>;

        $r2 = interfaceinvoke $r1.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCols getColsArray(int)>(0);

        $i1 = specialinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: int findEndOfColumnOutlineGroup(int)>(i0);

        i2 = $i1 + 1;

        $i3 = interfaceinvoke $r2.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCols: int sizeOfColArray()>();

        if i2 < $i3 goto label1;

        return 0;

     label1:
        $r3 = interfaceinvoke $r2.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCols: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCol getColArray(int)>(i2);

        $r4 = interfaceinvoke $r2.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCols: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCol getColArray(int)>($i1);

        $z0 = specialinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: boolean isAdjacentBefore(org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCol,org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCol)>($r4, $r3);

        if $z0 != 0 goto label2;

        return 0;

     label2:
        $z1 = interfaceinvoke $r3.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCol: boolean getCollapsed()>();

        return $z1;
    }

    public void setColumnHidden(int, boolean)
    {
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        int i0;
        long $l1;
        org.apache.poi.xssf.usermodel.helpers.ColumnHelper $r1;
        boolean z0;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        $r1 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.apache.poi.xssf.usermodel.helpers.ColumnHelper columnHelper>;

        $l1 = (long) i0;

        virtualinvoke $r1.<org.apache.poi.xssf.usermodel.helpers.ColumnHelper: void setColHidden(long,boolean)>($l1, z0);

        return;
    }

    public void setColumnWidth(int, int)
    {
        long $l2, $l3;
        org.apache.poi.xssf.usermodel.helpers.ColumnHelper $r1, $r2;
        java.lang.IllegalArgumentException $r4;
        int i0, i1, $i5;
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        double $d0, $d1;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        i1 := @parameter0: int;

        i0 := @parameter1: int;

        $i5 = (int) 65280;

        if i0 <= $i5 goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The maximum column width for an individual cell is 255 characters.");

        throw $r4;

     label1:
        $r1 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.apache.poi.xssf.usermodel.helpers.ColumnHelper columnHelper>;

        $l2 = (long) i1;

        $d0 = (double) i0;

        $d1 = $d0 / 256.0;

        virtualinvoke $r1.<org.apache.poi.xssf.usermodel.helpers.ColumnHelper: void setColWidth(long,double)>($l2, $d1);

        $r2 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.apache.poi.xssf.usermodel.helpers.ColumnHelper columnHelper>;

        $l3 = (long) i1;

        virtualinvoke $r2.<org.apache.poi.xssf.usermodel.helpers.ColumnHelper: void setCustomWidth(long,boolean)>($l3, 1);

        return;
    }

    public void setDefaultColumnStyle(int, org.apache.poi.ss.usermodel.CellStyle)
    {
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        int i0;
        long $l1;
        org.apache.poi.ss.usermodel.CellStyle r1;
        org.apache.poi.xssf.usermodel.helpers.ColumnHelper $r2;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        i0 := @parameter0: int;

        r1 := @parameter1: org.apache.poi.ss.usermodel.CellStyle;

        $r2 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.apache.poi.xssf.usermodel.helpers.ColumnHelper columnHelper>;

        $l1 = (long) i0;

        virtualinvoke $r2.<org.apache.poi.xssf.usermodel.helpers.ColumnHelper: void setColDefaultStyle(long,org.apache.poi.ss.usermodel.CellStyle)>($l1, r1);

        return;
    }

    public void setDefaultColumnWidth(int)
    {
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetFormatPr $r1;
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        int i0;
        long $l1;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        i0 := @parameter0: int;

        $r1 = specialinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetFormatPr getSheetTypeSheetFormatPr()>();

        $l1 = (long) i0;

        interfaceinvoke $r1.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetFormatPr: void setBaseColWidth(long)>($l1);

        return;
    }

    public void setDefaultRowHeight(short)
    {
        short s0;
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        float $f0, $f1;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        s0 := @parameter0: short;

        $f0 = (float) s0;

        $f1 = $f0 / 20.0F;

        virtualinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: void setDefaultRowHeightInPoints(float)>($f1);

        return;
    }

    public void setDefaultRowHeightInPoints(float)
    {
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetFormatPr $r1;
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        float f0;
        double $d0;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        f0 := @parameter0: float;

        $r1 = specialinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetFormatPr getSheetTypeSheetFormatPr()>();

        $d0 = (double) f0;

        interfaceinvoke $r1.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetFormatPr: void setDefaultRowHeight(double)>($d0);

        interfaceinvoke $r1.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetFormatPr: void setCustomHeight(boolean)>(1);

        return;
    }

    public void setDisplayFormulas(boolean)
    {
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetView $r1;
        boolean z0;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        z0 := @parameter0: boolean;

        $r1 = specialinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetView getSheetTypeSheetView()>();

        interfaceinvoke $r1.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetView: void setShowFormulas(boolean)>(z0);

        return;
    }

    private org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetView getSheetTypeSheetView()
    {
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetViews $r3;
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetView $r1, $r2, $r4;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        $r1 = specialinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetView getDefaultSheetView()>();

        if $r1 != null goto label1;

        $r3 = specialinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetViews getSheetTypeSheetViews()>();

        $r4 = staticinvoke <org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetView$Factory: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetView newInstance()>();

        interfaceinvoke $r3.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetViews: void setSheetViewArray(int,org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetView)>(0, $r4);

     label1:
        $r2 = specialinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetView getDefaultSheetView()>();

        return $r2;
    }

    public void setFitToPage(boolean)
    {
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTPageSetUpPr $r1;
        boolean z0;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        z0 := @parameter0: boolean;

        $r1 = specialinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTPageSetUpPr getSheetTypePageSetUpPr()>();

        interfaceinvoke $r1.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTPageSetUpPr: void setFitToPage(boolean)>(z0);

        return;
    }

    public void setHorizontallyCenter(boolean)
    {
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet $r1, $r2, $r3;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTPrintOptions $r4;
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        boolean $z0, z1;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        z1 := @parameter0: boolean;

        $r1 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet worksheet>;

        $z0 = interfaceinvoke $r1.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet: boolean isSetPrintOptions()>();

        if $z0 == 0 goto label1;

        $r3 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet worksheet>;

        $r4 = interfaceinvoke $r3.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTPrintOptions getPrintOptions()>();

        goto label2;

     label1:
        $r2 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet worksheet>;

        $r4 = interfaceinvoke $r2.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTPrintOptions addNewPrintOptions()>();

     label2:
        interfaceinvoke $r4.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTPrintOptions: void setHorizontalCentered(boolean)>(z1);

        return;
    }

    public void setVerticallyCenter(boolean)
    {
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet $r1, $r2, $r3;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTPrintOptions $r4;
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        boolean $z0, z1;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        z1 := @parameter0: boolean;

        $r1 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet worksheet>;

        $z0 = interfaceinvoke $r1.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet: boolean isSetPrintOptions()>();

        if $z0 == 0 goto label1;

        $r3 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet worksheet>;

        $r4 = interfaceinvoke $r3.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTPrintOptions getPrintOptions()>();

        goto label2;

     label1:
        $r2 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet worksheet>;

        $r4 = interfaceinvoke $r2.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTPrintOptions addNewPrintOptions()>();

     label2:
        interfaceinvoke $r4.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTPrintOptions: void setVerticalCentered(boolean)>(z1);

        return;
    }

    public void setRowGroupCollapsed(int, boolean)
    {
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        int i0;
        boolean z0;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        if z0 == 0 goto label1;

        specialinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: void collapseRow(int)>(i0);

        goto label2;

     label1:
        specialinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: void expandRow(int)>(i0);

     label2:
        return;
    }

    private void collapseRow(int)
    {
        org.apache.poi.xssf.usermodel.XSSFRow $r1, $r2, $r3, $r5;
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        int i0, $i1, $i2;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTRow $r4, $r6;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.apache.poi.xssf.usermodel.XSSFRow getRow(int)>(i0);

        if $r1 == null goto label2;

        $i1 = specialinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: int findStartOfRowOutlineGroup(int)>(i0);

        $i2 = specialinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: int writeHidden(org.apache.poi.xssf.usermodel.XSSFRow,int,boolean)>($r1, $i1, 1);

        $r2 = virtualinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.apache.poi.xssf.usermodel.XSSFRow getRow(int)>($i2);

        if $r2 == null goto label1;

        $r5 = virtualinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.apache.poi.xssf.usermodel.XSSFRow getRow(int)>($i2);

        $r6 = virtualinvoke $r5.<org.apache.poi.xssf.usermodel.XSSFRow: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTRow getCTRow()>();

        interfaceinvoke $r6.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTRow: void setCollapsed(boolean)>(1);

        goto label2;

     label1:
        $r3 = virtualinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.apache.poi.xssf.usermodel.XSSFRow createRow(int)>($i2);

        $r4 = virtualinvoke $r3.<org.apache.poi.xssf.usermodel.XSSFRow: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTRow getCTRow()>();

        interfaceinvoke $r4.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTRow: void setCollapsed(boolean)>(1);

     label2:
        return;
    }

    private int findStartOfRowOutlineGroup(int)
    {
        org.apache.poi.xssf.usermodel.XSSFRow $r1, $r3, $r4;
        short $s1, $s2;
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        int i0, $i3, i4, $i5, $i6, $i8;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTRow $r2, $r5;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.apache.poi.xssf.usermodel.XSSFRow getRow(int)>(i0);

        $r2 = virtualinvoke $r1.<org.apache.poi.xssf.usermodel.XSSFRow: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTRow getCTRow()>();

        $s1 = interfaceinvoke $r2.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTRow: short getOutlineLevel()>();

        i4 = i0;

     label1:
        $r3 = virtualinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.apache.poi.xssf.usermodel.XSSFRow getRow(int)>(i4);

        if $r3 == null goto label3;

        $r4 = virtualinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.apache.poi.xssf.usermodel.XSSFRow getRow(int)>(i4);

        $r5 = virtualinvoke $r4.<org.apache.poi.xssf.usermodel.XSSFRow: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTRow getCTRow()>();

        $s2 = interfaceinvoke $r5.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTRow: short getOutlineLevel()>();

        $i5 = (int) $s2;

        $i6 = (int) $s1;

        if $i5 >= $i6 goto label2;

        $i3 = i4 + 1;

        return $i3;

     label2:
        $i8 = (int) -1;

        i4 = i4 + $i8;

        goto label1;

     label3:
        return i4;
    }

    private int writeHidden(org.apache.poi.xssf.usermodel.XSSFRow, int, boolean)
    {
        org.apache.poi.xssf.usermodel.XSSFRow r6, r7;
        short $s0, $s2;
        int $i1, i3, $i4, $i5;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTRow $r0, $r4, $r5;
        boolean z0, $z1;
        java.util.Iterator $r2;
        org.apache.poi.xssf.usermodel.XSSFSheet r1;
        java.lang.Object $r3;

        r1 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        r6 := @parameter0: org.apache.poi.xssf.usermodel.XSSFRow;

        i3 := @parameter1: int;

        z0 := @parameter2: boolean;

        $r0 = virtualinvoke r6.<org.apache.poi.xssf.usermodel.XSSFRow: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTRow getCTRow()>();

        $s0 = interfaceinvoke $r0.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTRow: short getOutlineLevel()>();

        $r2 = virtualinvoke r1.<org.apache.poi.xssf.usermodel.XSSFSheet: java.util.Iterator rowIterator()>();

     label1:
        $z1 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r7 = (org.apache.poi.xssf.usermodel.XSSFRow) $r3;

        $i1 = virtualinvoke r7.<org.apache.poi.xssf.usermodel.XSSFRow: int getRowNum()>();

        if $i1 >= i3 goto label2;

        goto label1;

     label2:
        $r4 = virtualinvoke r7.<org.apache.poi.xssf.usermodel.XSSFRow: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTRow getCTRow()>();

        $s2 = interfaceinvoke $r4.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTRow: short getOutlineLevel()>();

        $i4 = (int) $s2;

        $i5 = (int) $s0;

        if $i4 < $i5 goto label1;

        $r5 = virtualinvoke r7.<org.apache.poi.xssf.usermodel.XSSFRow: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTRow getCTRow()>();

        interfaceinvoke $r5.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTRow: void setHidden(boolean)>(z0);

        i3 = i3 + 1;

        goto label1;

     label3:
        return i3;
    }

    private void expandRow(int)
    {
        org.apache.poi.xssf.usermodel.XSSFRow $r1, $r3, $r6, $r8, $r10;
        short $s3, $s4;
        int i0, $i1, $i2, i5, $i7, $i8, $i9;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTRow $r2, $r4, $r5, $r7, $r9, $r11;
        boolean $z0, $z1, $z2, $z3;
        org.apache.poi.xssf.usermodel.XSSFSheet r0;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        i0 := @parameter0: int;

        $i7 = (int) -1;

        if i0 != $i7 goto label1;

        return;

     label1:
        $r1 = virtualinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.apache.poi.xssf.usermodel.XSSFRow getRow(int)>(i0);

        $r2 = virtualinvoke $r1.<org.apache.poi.xssf.usermodel.XSSFRow: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTRow getCTRow()>();

        $z0 = interfaceinvoke $r2.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTRow: boolean isSetHidden()>();

        if $z0 != 0 goto label2;

        return;

     label2:
        $i1 = specialinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: int findStartOfRowOutlineGroup(int)>(i0);

        $i2 = virtualinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: int findEndOfRowOutlineGroup(int)>(i0);

        $z1 = specialinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: boolean isRowGroupHiddenByParent(int)>(i0);

        if $z1 != 0 goto label6;

        i5 = $i1;

     label3:
        if i5 >= $i2 goto label6;

        $r5 = virtualinvoke $r1.<org.apache.poi.xssf.usermodel.XSSFRow: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTRow getCTRow()>();

        $s3 = interfaceinvoke $r5.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTRow: short getOutlineLevel()>();

        $r6 = virtualinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.apache.poi.xssf.usermodel.XSSFRow getRow(int)>(i5);

        $r7 = virtualinvoke $r6.<org.apache.poi.xssf.usermodel.XSSFRow: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTRow getCTRow()>();

        $s4 = interfaceinvoke $r7.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTRow: short getOutlineLevel()>();

        $i8 = (int) $s3;

        $i9 = (int) $s4;

        if $i8 != $i9 goto label4;

        $r10 = virtualinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.apache.poi.xssf.usermodel.XSSFRow getRow(int)>(i5);

        $r11 = virtualinvoke $r10.<org.apache.poi.xssf.usermodel.XSSFRow: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTRow getCTRow()>();

        interfaceinvoke $r11.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTRow: void unsetHidden()>();

        goto label5;

     label4:
        $z3 = specialinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: boolean isRowGroupCollapsed(int)>(i5);

        if $z3 != 0 goto label5;

        $r8 = virtualinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.apache.poi.xssf.usermodel.XSSFRow getRow(int)>(i5);

        $r9 = virtualinvoke $r8.<org.apache.poi.xssf.usermodel.XSSFRow: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTRow getCTRow()>();

        interfaceinvoke $r9.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTRow: void unsetHidden()>();

     label5:
        i5 = i5 + 1;

        goto label3;

     label6:
        $r3 = virtualinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.apache.poi.xssf.usermodel.XSSFRow getRow(int)>($i2);

        $r4 = virtualinvoke $r3.<org.apache.poi.xssf.usermodel.XSSFRow: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTRow getCTRow()>();

        $z2 = interfaceinvoke $r4.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTRow: boolean getCollapsed()>();

        if $z2 == 0 goto label7;

        interfaceinvoke $r4.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTRow: void unsetCollapsed()>();

     label7:
        return;
    }

    public int findEndOfRowOutlineGroup(int)
    {
        org.apache.poi.xssf.usermodel.XSSFRow $r1, $r3, $r4;
        short $s1, $s3;
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        int i0, $i2, i4, $i5, $i6;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTRow $r2, $r5;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.apache.poi.xssf.usermodel.XSSFRow getRow(int)>(i0);

        $r2 = virtualinvoke $r1.<org.apache.poi.xssf.usermodel.XSSFRow: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTRow getCTRow()>();

        $s1 = interfaceinvoke $r2.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTRow: short getOutlineLevel()>();

        i4 = i0;

     label1:
        $i2 = virtualinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: int getLastRowNum()>();

        if i4 >= $i2 goto label3;

        $r3 = virtualinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.apache.poi.xssf.usermodel.XSSFRow getRow(int)>(i4);

        if $r3 == null goto label3;

        $r4 = virtualinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.apache.poi.xssf.usermodel.XSSFRow getRow(int)>(i4);

        $r5 = virtualinvoke $r4.<org.apache.poi.xssf.usermodel.XSSFRow: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTRow getCTRow()>();

        $s3 = interfaceinvoke $r5.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTRow: short getOutlineLevel()>();

        $i5 = (int) $s3;

        $i6 = (int) $s1;

        if $i5 >= $i6 goto label2;

        goto label3;

     label2:
        i4 = i4 + 1;

        goto label1;

     label3:
        return i4;
    }

    private boolean isRowGroupHiddenByParent(int)
    {
        org.apache.poi.xssf.usermodel.XSSFRow $r1, $r2, $r4, $r6, $r7, $r9;
        short s3, s4;
        int i0, $i1, $i2;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTRow $r3, $r5, $r8, $r10;
        boolean z0, z1;
        org.apache.poi.xssf.usermodel.XSSFSheet r0;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        i0 := @parameter0: int;

        $i1 = virtualinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: int findEndOfRowOutlineGroup(int)>(i0);

        $r1 = virtualinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.apache.poi.xssf.usermodel.XSSFRow getRow(int)>($i1);

        if $r1 != null goto label1;

        s3 = 0;

        z0 = 0;

        goto label2;

     label1:
        $r2 = virtualinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.apache.poi.xssf.usermodel.XSSFRow getRow(int)>($i1);

        $r3 = virtualinvoke $r2.<org.apache.poi.xssf.usermodel.XSSFRow: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTRow getCTRow()>();

        s3 = interfaceinvoke $r3.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTRow: short getOutlineLevel()>();

        $r4 = virtualinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.apache.poi.xssf.usermodel.XSSFRow getRow(int)>($i1);

        $r5 = virtualinvoke $r4.<org.apache.poi.xssf.usermodel.XSSFRow: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTRow getCTRow()>();

        z0 = interfaceinvoke $r5.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTRow: boolean getHidden()>();

     label2:
        $i2 = specialinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: int findStartOfRowOutlineGroup(int)>(i0);

        if $i2 < 0 goto label3;

        $r6 = virtualinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.apache.poi.xssf.usermodel.XSSFRow getRow(int)>($i2);

        if $r6 != null goto label4;

     label3:
        s4 = 0;

        z1 = 0;

        goto label5;

     label4:
        $r7 = virtualinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.apache.poi.xssf.usermodel.XSSFRow getRow(int)>($i2);

        $r8 = virtualinvoke $r7.<org.apache.poi.xssf.usermodel.XSSFRow: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTRow getCTRow()>();

        s4 = interfaceinvoke $r8.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTRow: short getOutlineLevel()>();

        $r9 = virtualinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.apache.poi.xssf.usermodel.XSSFRow getRow(int)>($i2);

        $r10 = virtualinvoke $r9.<org.apache.poi.xssf.usermodel.XSSFRow: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTRow getCTRow()>();

        z1 = interfaceinvoke $r10.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTRow: boolean getHidden()>();

     label5:
        if s3 <= s4 goto label6;

        return z0;

     label6:
        return z1;
    }

    private boolean isRowGroupCollapsed(int)
    {
        org.apache.poi.xssf.usermodel.XSSFRow $r1, $r2;
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        int i0, $i1, i2;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTRow $r3;
        boolean $z0;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        i0 := @parameter0: int;

        $i1 = virtualinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: int findEndOfRowOutlineGroup(int)>(i0);

        i2 = $i1 + 1;

        $r1 = virtualinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.apache.poi.xssf.usermodel.XSSFRow getRow(int)>(i2);

        if $r1 != null goto label1;

        return 0;

     label1:
        $r2 = virtualinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.apache.poi.xssf.usermodel.XSSFRow getRow(int)>(i2);

        $r3 = virtualinvoke $r2.<org.apache.poi.xssf.usermodel.XSSFRow: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTRow getCTRow()>();

        $z0 = interfaceinvoke $r3.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTRow: boolean getCollapsed()>();

        return $z0;
    }

    public void setZoom(int, int)
    {
        int i0, i1, $i2, i3;
        org.apache.poi.xssf.usermodel.XSSFSheet r0;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $i2 = 100 * i0;

        i3 = $i2 / i1;

        virtualinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: void setZoom(int)>(i3);

        return;
    }

    public void setZoom(int)
    {
        int i0;
        org.apache.poi.xssf.usermodel.XSSFSheet r1;
        long $l1;
        java.lang.IllegalArgumentException $r0;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetView $r2;

        r1 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        i0 := @parameter0: int;

        if i0 < 10 goto label1;

        if i0 <= 400 goto label2;

     label1:
        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Valid scale values range from 10 to 400");

        throw $r0;

     label2:
        $r2 = specialinvoke r1.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetView getSheetTypeSheetView()>();

        $l1 = (long) i0;

        interfaceinvoke $r2.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetView: void setZoomScale(long)>($l1);

        return;
    }

    public void shiftRows(int, int, int)
    {
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        int i0, i1, i2;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        virtualinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: void shiftRows(int,int,int,boolean,boolean)>(i0, i1, i2, 0, 0);

        return;
    }

    public void shiftRows(int, int, int, boolean, boolean)
    {
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCommentList $r18;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetData $r31;
        java.lang.Integer $r13, $r28;
        org.apache.poi.xssf.usermodel.XSSFWorkbook $r4, $r5;
        boolean $z0, $z1, z2, $z3, z4, $z5;
        org.apache.poi.xssf.model.CommentsTable $r15, $r16, $r25;
        java.util.Collection $r10;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet $r30;
        java.util.SortedMap $r29;
        org.apache.poi.xssf.usermodel.XSSFRow r32, r33, r34;
        org.apache.poi.ss.util.CellReference $r35, $r36;
        short $s8, $s15;
        int $i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i9, $i10, $i11, i12, i13;
        org.apache.poi.ss.formula.FormulaShifter $r7;
        java.lang.String $r6, $r21, $r24;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTComments $r17;
        java.util.Iterator $r1, $r2, $r11;
        org.apache.poi.xssf.usermodel.helpers.XSSFRowShifter $r37;
        java.util.TreeMap $r9, $r27, $r38;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTComment[] $r19;
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTComment r20;
        java.lang.Object $r12, $r14, $r26;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        i1 := @parameter0: int;

        i2 := @parameter1: int;

        i3 := @parameter2: int;

        z2 := @parameter3: boolean;

        z4 := @parameter4: boolean;

        $r1 = virtualinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: java.util.Iterator rowIterator()>();

     label01:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label03;

        $r26 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r32 = (org.apache.poi.xssf.usermodel.XSSFRow) $r26;

        $i9 = virtualinvoke r32.<org.apache.poi.xssf.usermodel.XSSFRow: int getRowNum()>();

        $z3 = specialinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: boolean removeRow(int,int,int,int)>(i1, i2, i3, $i9);

        if $z3 == 0 goto label02;

        $r27 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: java.util.TreeMap _rows>;

        $i10 = virtualinvoke r32.<org.apache.poi.xssf.usermodel.XSSFRow: int getRowNum()>();

        $r28 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i10);

        $r29 = virtualinvoke $r27.<java.util.TreeMap: java.util.SortedMap headMap(java.lang.Object)>($r28);

        $i11 = interfaceinvoke $r29.<java.util.SortedMap: int size()>();

        $r30 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet worksheet>;

        $r31 = interfaceinvoke $r30.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetData getSheetData()>();

        interfaceinvoke $r31.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetData: void removeRow(int)>($i11);

        interfaceinvoke $r1.<java.util.Iterator: void remove()>();

     label02:
        goto label01;

     label03:
        $r2 = virtualinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: java.util.Iterator rowIterator()>();

     label04:
        $z5 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label10;

        $r14 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r33 = (org.apache.poi.xssf.usermodel.XSSFRow) $r14;

        $i5 = virtualinvoke r33.<org.apache.poi.xssf.usermodel.XSSFRow: int getRowNum()>();

        $r15 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.apache.poi.xssf.model.CommentsTable sheetComments>;

        if $r15 == null goto label07;

        $r16 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.apache.poi.xssf.model.CommentsTable sheetComments>;

        $r17 = virtualinvoke $r16.<org.apache.poi.xssf.model.CommentsTable: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTComments getCTComments()>();

        $r18 = interfaceinvoke $r17.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTComments: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCommentList getCommentList()>();

        $r19 = interfaceinvoke $r18.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCommentList: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTComment[] getCommentArray()>();

        i12 = lengthof $r19;

        i13 = 0;

     label05:
        if i13 >= i12 goto label07;

        r20 = $r19[i13];

        $r21 = interfaceinvoke r20.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTComment: java.lang.String getRef()>();

        $r35 = new org.apache.poi.ss.util.CellReference;

        specialinvoke $r35.<org.apache.poi.ss.util.CellReference: void <init>(java.lang.String)>($r21);

        $i6 = virtualinvoke $r35.<org.apache.poi.ss.util.CellReference: int getRow()>();

        if $i6 != $i5 goto label06;

        $r36 = new org.apache.poi.ss.util.CellReference;

        $i7 = $i5 + i3;

        $s8 = virtualinvoke $r35.<org.apache.poi.ss.util.CellReference: short getCol()>();

        specialinvoke $r36.<org.apache.poi.ss.util.CellReference: void <init>(int,short)>($i7, $s8);

        $r24 = virtualinvoke $r36.<org.apache.poi.ss.util.CellReference: java.lang.String formatAsString()>();

        interfaceinvoke r20.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTComment: void setRef(java.lang.String)>($r24);

        $r25 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.apache.poi.xssf.model.CommentsTable sheetComments>;

        virtualinvoke $r25.<org.apache.poi.xssf.model.CommentsTable: void referenceUpdated(java.lang.String,org.openxmlformats.schemas.spreadsheetml.x2006.main.CTComment)>($r21, r20);

     label06:
        i13 = i13 + 1;

        goto label05;

     label07:
        if $i5 < i1 goto label04;

        if $i5 <= i2 goto label08;

        goto label04;

     label08:
        if z2 != 0 goto label09;

        $s15 = (short) -1;

        virtualinvoke r33.<org.apache.poi.xssf.usermodel.XSSFRow: void setHeight(short)>($s15);

     label09:
        virtualinvoke r33.<org.apache.poi.xssf.usermodel.XSSFRow: void shift(int)>(i3);

        goto label04;

     label10:
        $r37 = new org.apache.poi.xssf.usermodel.helpers.XSSFRowShifter;

        specialinvoke $r37.<org.apache.poi.xssf.usermodel.helpers.XSSFRowShifter: void <init>(org.apache.poi.xssf.usermodel.XSSFSheet)>(r0);

        $r4 = virtualinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.apache.poi.xssf.usermodel.XSSFWorkbook getWorkbook()>();

        $i0 = virtualinvoke $r4.<org.apache.poi.xssf.usermodel.XSSFWorkbook: int getSheetIndex(org.apache.poi.ss.usermodel.Sheet)>(r0);

        $r5 = virtualinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.apache.poi.xssf.usermodel.XSSFWorkbook getWorkbook()>();

        $r6 = virtualinvoke $r5.<org.apache.poi.xssf.usermodel.XSSFWorkbook: java.lang.String getSheetName(int)>($i0);

        $r7 = staticinvoke <org.apache.poi.ss.formula.FormulaShifter: org.apache.poi.ss.formula.FormulaShifter createForRowShift(int,java.lang.String,int,int,int)>($i0, $r6, i1, i2, i3);

        virtualinvoke $r37.<org.apache.poi.xssf.usermodel.helpers.XSSFRowShifter: void updateNamedRanges(org.apache.poi.ss.formula.FormulaShifter)>($r7);

        virtualinvoke $r37.<org.apache.poi.xssf.usermodel.helpers.XSSFRowShifter: void updateFormulas(org.apache.poi.ss.formula.FormulaShifter)>($r7);

        virtualinvoke $r37.<org.apache.poi.xssf.usermodel.helpers.XSSFRowShifter: java.util.List shiftMerged(int,int,int)>(i1, i2, i3);

        virtualinvoke $r37.<org.apache.poi.xssf.usermodel.helpers.XSSFRowShifter: void updateConditionalFormatting(org.apache.poi.ss.formula.FormulaShifter)>($r7);

        $r38 = new java.util.TreeMap;

        specialinvoke $r38.<java.util.TreeMap: void <init>()>();

        $r9 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: java.util.TreeMap _rows>;

        $r10 = virtualinvoke $r9.<java.util.TreeMap: java.util.Collection values()>();

        $r11 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>();

     label11:
        $z1 = interfaceinvoke $r11.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label12;

        $r12 = interfaceinvoke $r11.<java.util.Iterator: java.lang.Object next()>();

        r34 = (org.apache.poi.xssf.usermodel.XSSFRow) $r12;

        $i4 = virtualinvoke r34.<org.apache.poi.xssf.usermodel.XSSFRow: int getRowNum()>();

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);

        virtualinvoke $r38.<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r13, r34);

        goto label11;

     label12:
        r0.<org.apache.poi.xssf.usermodel.XSSFSheet: java.util.TreeMap _rows> = $r38;

        return;
    }

    public void showInPane(int, int)
    {
        int i0, i1;
        org.apache.poi.xssf.usermodel.XSSFSheet r2;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTPane $r3;
        java.lang.String $r1;
        org.apache.poi.ss.util.CellReference $r0;

        r2 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r0 = new org.apache.poi.ss.util.CellReference;

        specialinvoke $r0.<org.apache.poi.ss.util.CellReference: void <init>(int,int)>(i0, i1);

        $r1 = virtualinvoke $r0.<org.apache.poi.ss.util.CellReference: java.lang.String formatAsString()>();

        $r3 = specialinvoke r2.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTPane getPane()>();

        interfaceinvoke $r3.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTPane: void setTopLeftCell(java.lang.String)>($r1);

        return;
    }

    public void showInPane(short, short)
    {
        short s0, s1;
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        int $i2, $i3;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        s0 := @parameter0: short;

        s1 := @parameter1: short;

        $i2 = (int) s0;

        $i3 = (int) s1;

        virtualinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: void showInPane(int,int)>($i2, $i3);

        return;
    }

    public void ungroupColumn(int, int)
    {
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCol $r5;
        long $l2, $l6;
        short $s3, $s5, $s7;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCols $r2, $r8;
        int i0, i1, $i4, $i8, i9, $i10, $i11;
        org.apache.poi.xssf.usermodel.helpers.ColumnHelper $r4, $r6;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet $r1, $r3, $r7;
        org.apache.poi.xssf.usermodel.XSSFSheet r0;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet worksheet>;

        $r2 = interfaceinvoke $r1.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCols getColsArray(int)>(0);

        i9 = i0;

     label1:
        if i9 > i1 goto label3;

        $r4 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.apache.poi.xssf.usermodel.helpers.ColumnHelper columnHelper>;

        $l2 = (long) i9;

        $r5 = virtualinvoke $r4.<org.apache.poi.xssf.usermodel.helpers.ColumnHelper: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCol getColumn(long,boolean)>($l2, 0);

        if $r5 == null goto label2;

        $s3 = interfaceinvoke $r5.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCol: short getOutlineLevel()>();

        $i10 = (int) $s3;

        $i4 = $i10 - 1;

        $s5 = (short) $i4;

        interfaceinvoke $r5.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCol: void setOutlineLevel(short)>($s5);

        $l6 = interfaceinvoke $r5.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCol: long getMax()>();

        i9 = (int) $l6;

        $s7 = interfaceinvoke $r5.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCol: short getOutlineLevel()>();

        $i11 = (int) $s7;

        if $i11 > 0 goto label2;

        $r6 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.apache.poi.xssf.usermodel.helpers.ColumnHelper columnHelper>;

        $i8 = virtualinvoke $r6.<org.apache.poi.xssf.usermodel.helpers.ColumnHelper: int getIndexOfColumn(org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCols,org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCol)>($r2, $r5);

        $r7 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet worksheet>;

        $r8 = interfaceinvoke $r7.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCols getColsArray(int)>(0);

        interfaceinvoke $r8.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCols: void removeCol(int)>($i8);

     label2:
        i9 = i9 + 1;

        goto label1;

     label3:
        $r3 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet worksheet>;

        interfaceinvoke $r3.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet: void setColsArray(int,org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCols)>(0, $r2);

        specialinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: void setSheetFormatPrOutlineLevelCol()>();

        return;
    }

    public void ungroupRow(int, int)
    {
        org.apache.poi.xssf.usermodel.XSSFRow $r1;
        short $s2, $s4, $s5, $s6;
        int i0, i1, $i3, i7, $i8, $i9, $i11;
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTRow $r2;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i7 = i0;

     label1:
        if i7 > i1 goto label3;

        $r1 = virtualinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.apache.poi.xssf.usermodel.XSSFRow getRow(int)>(i7);

        if $r1 == null goto label2;

        $r2 = virtualinvoke $r1.<org.apache.poi.xssf.usermodel.XSSFRow: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTRow getCTRow()>();

        $s2 = interfaceinvoke $r2.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTRow: short getOutlineLevel()>();

        $i8 = (int) $s2;

        $i3 = $i8 - 1;

        $s4 = (short) $i3;

        interfaceinvoke $r2.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTRow: void setOutlineLevel(short)>($s4);

        $s5 = interfaceinvoke $r2.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTRow: short getOutlineLevel()>();

        if $s5 != 0 goto label2;

        $s6 = virtualinvoke $r1.<org.apache.poi.xssf.usermodel.XSSFRow: short getFirstCellNum()>();

        $i9 = (int) $s6;

        $i11 = (int) -1;

        if $i9 != $i11 goto label2;

        virtualinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: void removeRow(org.apache.poi.ss.usermodel.Row)>($r1);

     label2:
        i7 = i7 + 1;

        goto label1;

     label3:
        specialinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: void setSheetFormatPrOutlineLevelRow()>();

        return;
    }

    private void setSheetFormatPrOutlineLevelRow()
    {
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        short $s0;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetFormatPr $r1;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        $s0 = specialinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: short getMaxOutlineLevelRows()>();

        $r1 = specialinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetFormatPr getSheetTypeSheetFormatPr()>();

        interfaceinvoke $r1.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetFormatPr: void setOutlineLevelRow(short)>($s0);

        return;
    }

    private void setSheetFormatPrOutlineLevelCol()
    {
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        short $s0;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetFormatPr $r1;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        $s0 = specialinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: short getMaxOutlineLevelCols()>();

        $r1 = specialinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetFormatPr getSheetTypeSheetFormatPr()>();

        interfaceinvoke $r1.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetFormatPr: void setOutlineLevelCol(short)>($s0);

        return;
    }

    private org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetViews getSheetTypeSheetViews()
    {
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetViews $r2, $r4, $r6, $r8;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet $r1, $r3, $r5, $r7;
        org.apache.poi.xssf.usermodel.XSSFSheet r0;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        $r1 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet worksheet>;

        $r2 = interfaceinvoke $r1.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetViews getSheetViews()>();

        if $r2 != null goto label1;

        $r5 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet worksheet>;

        $r6 = staticinvoke <org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetViews$Factory: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetViews newInstance()>();

        interfaceinvoke $r5.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet: void setSheetViews(org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetViews)>($r6);

        $r7 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet worksheet>;

        $r8 = interfaceinvoke $r7.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetViews getSheetViews()>();

        interfaceinvoke $r8.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetViews: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetView addNewSheetView()>();

     label1:
        $r3 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet worksheet>;

        $r4 = interfaceinvoke $r3.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetViews getSheetViews()>();

        return $r4;
    }

    public boolean isSelected()
    {
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetView $r1;
        boolean $z0, $z1;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        $r1 = specialinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetView getDefaultSheetView()>();

        if $r1 == null goto label1;

        $z0 = interfaceinvoke $r1.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetView: boolean getTabSelected()>();

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public void setSelected(boolean)
    {
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetView[] $r2;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetViews $r1;
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        int i0, i1;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetView r3;
        boolean z0;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        z0 := @parameter0: boolean;

        $r1 = specialinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetViews getSheetTypeSheetViews()>();

        $r2 = interfaceinvoke $r1.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetViews: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetView[] getSheetViewArray()>();

        i0 = lengthof $r2;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r3 = $r2[i1];

        interfaceinvoke r3.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetView: void setTabSelected(boolean)>(z0);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public static void setCellComment(java.lang.String, org.apache.poi.xssf.usermodel.XSSFComment)
    {
        short $s1;
        org.apache.poi.xssf.usermodel.XSSFComment r2;
        int $i0, $i2;
        java.lang.String r1;
        org.apache.poi.ss.util.CellReference $r3;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.apache.poi.xssf.usermodel.XSSFComment;

        $r3 = new org.apache.poi.ss.util.CellReference;

        specialinvoke $r3.<org.apache.poi.ss.util.CellReference: void <init>(java.lang.String)>(r1);

        $i0 = virtualinvoke $r3.<org.apache.poi.ss.util.CellReference: int getRow()>();

        virtualinvoke r2.<org.apache.poi.xssf.usermodel.XSSFComment: void setRow(int)>($i0);

        $s1 = virtualinvoke $r3.<org.apache.poi.ss.util.CellReference: short getCol()>();

        $i2 = (int) $s1;

        virtualinvoke r2.<org.apache.poi.xssf.usermodel.XSSFComment: void setColumn(int)>($i2);

        return;
    }

    public void addHyperlink(org.apache.poi.xssf.usermodel.XSSFHyperlink)
    {
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        java.util.List $r2;
        org.apache.poi.xssf.usermodel.XSSFHyperlink r1;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        r1 := @parameter0: org.apache.poi.xssf.usermodel.XSSFHyperlink;

        $r2 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: java.util.List hyperlinks>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        return;
    }

    public java.lang.String getActiveCell()
    {
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSelection $r1;
        java.lang.String $r2;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        $r1 = specialinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSelection getSheetTypeSelection()>();

        $r2 = interfaceinvoke $r1.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSelection: java.lang.String getActiveCell()>();

        return $r2;
    }

    public void setActiveCell(java.lang.String)
    {
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSelection $r1;
        java.util.List $r4;
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        java.lang.String[] $r3;
        java.lang.String r2;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        r2 := @parameter0: java.lang.String;

        $r1 = specialinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSelection getSheetTypeSelection()>();

        interfaceinvoke $r1.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSelection: void setActiveCell(java.lang.String)>(r2);

        $r3 = newarray (java.lang.String)[1];

        $r3[0] = r2;

        $r4 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r3);

        interfaceinvoke $r1.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSelection: void setSqref(java.util.List)>($r4);

        return;
    }

    public boolean hasComments()
    {
        org.apache.poi.xssf.model.CommentsTable $r1, $r2;
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        int $i0;
        boolean $z0;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        $r1 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.apache.poi.xssf.model.CommentsTable sheetComments>;

        if $r1 != null goto label1;

        return 0;

     label1:
        $r2 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.apache.poi.xssf.model.CommentsTable sheetComments>;

        $i0 = virtualinvoke $r2.<org.apache.poi.xssf.model.CommentsTable: int getNumberOfComments()>();

        if $i0 <= 0 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    protected int getNumberOfComments()
    {
        org.apache.poi.xssf.model.CommentsTable $r1, $r2;
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        int $i0;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        $r1 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.apache.poi.xssf.model.CommentsTable sheetComments>;

        if $r1 != null goto label1;

        return 0;

     label1:
        $r2 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.apache.poi.xssf.model.CommentsTable sheetComments>;

        $i0 = virtualinvoke $r2.<org.apache.poi.xssf.model.CommentsTable: int getNumberOfComments()>();

        return $i0;
    }

    private org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSelection getSheetTypeSelection()
    {
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSelection $r3;
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        int $i0;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetView $r1, $r2, $r4;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        $r1 = specialinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetView getSheetTypeSheetView()>();

        $i0 = interfaceinvoke $r1.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetView: int sizeOfSelectionArray()>();

        if $i0 != 0 goto label1;

        $r4 = specialinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetView getSheetTypeSheetView()>();

        interfaceinvoke $r4.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetView: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSelection insertNewSelection(int)>(0);

     label1:
        $r2 = specialinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetView getSheetTypeSheetView()>();

        $r3 = interfaceinvoke $r2.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetView: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSelection getSelectionArray(int)>(0);

        return $r3;
    }

    private org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetView getDefaultSheetView()
    {
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetViews $r1;
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        int $i0, $i1;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetView $r2;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        $r1 = specialinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetViews getSheetTypeSheetViews()>();

        if $r1 != null goto label1;

        $i1 = 0;

        goto label2;

     label1:
        $i1 = interfaceinvoke $r1.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetViews: int sizeOfSheetViewArray()>();

     label2:
        if $i1 != 0 goto label3;

        return null;

     label3:
        $i0 = $i1 - 1;

        $r2 = interfaceinvoke $r1.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetViews: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetView getSheetViewArray(int)>($i0);

        return $r2;
    }

    protected org.apache.poi.xssf.model.CommentsTable getCommentsTable(boolean)
    {
        org.apache.poi.xssf.usermodel.XSSFRelation $r2, $r8;
        long $l0;
        org.apache.poi.POIXMLDocumentPart $r5, $r10;
        org.apache.poi.xssf.usermodel.XSSFFactory $r3, $r9;
        int $i1, $i3;
        boolean z0;
        org.apache.poi.xssf.model.CommentsTable $r1, $r6, $r11, $r12;
        org.apache.poi.openxml4j.exceptions.PartAlreadyExistsException $r7;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheet $r4;
        org.apache.poi.xssf.usermodel.XSSFSheet r0;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        z0 := @parameter0: boolean;

        $r1 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.apache.poi.xssf.model.CommentsTable sheetComments>;

        if $r1 != null goto label4;

        if z0 == 0 goto label4;

     label1:
        $r2 = <org.apache.poi.xssf.usermodel.XSSFRelation: org.apache.poi.xssf.usermodel.XSSFRelation SHEET_COMMENTS>;

        $r3 = staticinvoke <org.apache.poi.xssf.usermodel.XSSFFactory: org.apache.poi.xssf.usermodel.XSSFFactory getInstance()>();

        $r4 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheet sheet>;

        $l0 = interfaceinvoke $r4.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheet: long getSheetId()>();

        $i1 = (int) $l0;

        $r5 = virtualinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.apache.poi.POIXMLDocumentPart createRelationship(org.apache.poi.POIXMLRelation,org.apache.poi.POIXMLFactory,int)>($r2, $r3, $i1);

        $r6 = (org.apache.poi.xssf.model.CommentsTable) $r5;

        r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.apache.poi.xssf.model.CommentsTable sheetComments> = $r6;

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

        $r8 = <org.apache.poi.xssf.usermodel.XSSFRelation: org.apache.poi.xssf.usermodel.XSSFRelation SHEET_COMMENTS>;

        $r9 = staticinvoke <org.apache.poi.xssf.usermodel.XSSFFactory: org.apache.poi.xssf.usermodel.XSSFFactory getInstance()>();

        $i3 = (int) -1;

        $r10 = virtualinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.apache.poi.POIXMLDocumentPart createRelationship(org.apache.poi.POIXMLRelation,org.apache.poi.POIXMLFactory,int)>($r8, $r9, $i3);

        $r11 = (org.apache.poi.xssf.model.CommentsTable) $r10;

        r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.apache.poi.xssf.model.CommentsTable sheetComments> = $r11;

     label4:
        $r12 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.apache.poi.xssf.model.CommentsTable sheetComments>;

        return $r12;

        catch org.apache.poi.openxml4j.exceptions.PartAlreadyExistsException from label1 to label2 with label3;
    }

    private org.openxmlformats.schemas.spreadsheetml.x2006.main.CTPageSetUpPr getSheetTypePageSetUpPr()
    {
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetPr $r1;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTPageSetUpPr $r2;
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        boolean $z0;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        $r1 = specialinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetPr getSheetTypeSheetPr()>();

        $z0 = interfaceinvoke $r1.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetPr: boolean isSetPageSetUpPr()>();

        if $z0 == 0 goto label1;

        $r2 = interfaceinvoke $r1.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetPr: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTPageSetUpPr getPageSetUpPr()>();

        goto label2;

     label1:
        $r2 = interfaceinvoke $r1.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetPr: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTPageSetUpPr addNewPageSetUpPr()>();

     label2:
        return $r2;
    }

    private boolean removeRow(int, int, int, int)
    {
        int i0, i1, i2, $i3, i4, $i5;
        org.apache.poi.xssf.usermodel.XSSFSheet r0;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        i1 := @parameter0: int;

        i4 := @parameter1: int;

        i2 := @parameter2: int;

        i0 := @parameter3: int;

        $i3 = i1 + i2;

        if i0 < $i3 goto label2;

        $i5 = i4 + i2;

        if i0 > $i5 goto label2;

        if i2 <= 0 goto label1;

        if i0 <= i4 goto label1;

        return 1;

     label1:
        if i2 >= 0 goto label2;

        if i0 >= i1 goto label2;

        return 1;

     label2:
        return 0;
    }

    private org.openxmlformats.schemas.spreadsheetml.x2006.main.CTPane getPane()
    {
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTPane $r2, $r4;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetView $r1, $r3, $r5;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        $r1 = specialinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetView getDefaultSheetView()>();

        $r2 = interfaceinvoke $r1.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetView: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTPane getPane()>();

        if $r2 != null goto label1;

        $r5 = specialinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetView getDefaultSheetView()>();

        interfaceinvoke $r5.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetView: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTPane addNewPane()>();

     label1:
        $r3 = specialinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetView getDefaultSheetView()>();

        $r4 = interfaceinvoke $r3.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetView: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTPane getPane()>();

        return $r4;
    }

    public org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCellFormula getSharedFormula(int)
    {
        java.util.Map $r1;
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        int i0;
        java.lang.Object $r3;
        java.lang.Integer $r2;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCellFormula $r4;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: java.util.Map sharedFormulas>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r3 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r2);

        $r4 = (org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCellFormula) $r3;

        return $r4;
    }

    void onReadCell(org.apache.poi.xssf.usermodel.XSSFCell)
    {
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCell $r1;
        java.lang.Integer $r21;
        java.util.Map $r20;
        boolean $z0;
        org.apache.poi.ss.util.CellRangeAddress $r9, $r16, $r23;
        java.util.List $r7;
        long $l12;
        org.apache.poi.ss.util.CellReference $r22;
        short $s0, $s6;
        int $i1, $i2, $i3, $i4, $i5, $i7, $i8, $i9, $i10, $i11, $i13, $i14, $i15;
        java.lang.String $r5, $r8, $r12, $r15, $r19;
        org.apache.xmlbeans.XmlObject $r13;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.STCellFormulaType$Enum $r3, $r4, $r10, $r11;
        org.apache.poi.xssf.usermodel.XSSFSheet r6;
        org.apache.poi.xssf.usermodel.XSSFCell r0;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCellFormula $r2, r14;

        r6 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        r0 := @parameter0: org.apache.poi.xssf.usermodel.XSSFCell;

        $r1 = virtualinvoke r0.<org.apache.poi.xssf.usermodel.XSSFCell: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCell getCTCell()>();

        $r2 = interfaceinvoke $r1.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCell: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCellFormula getF()>();

        if $r2 == null goto label3;

        $r10 = interfaceinvoke $r2.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCellFormula: org.openxmlformats.schemas.spreadsheetml.x2006.main.STCellFormulaType$Enum getT()>();

        $r11 = <org.openxmlformats.schemas.spreadsheetml.x2006.main.STCellFormulaType: org.openxmlformats.schemas.spreadsheetml.x2006.main.STCellFormulaType$Enum SHARED>;

        if $r10 != $r11 goto label3;

        $z0 = interfaceinvoke $r2.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCellFormula: boolean isSetRef()>();

        if $z0 == 0 goto label3;

        $r12 = interfaceinvoke $r2.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCellFormula: java.lang.String getStringValue()>();

        if $r12 == null goto label3;

        $r13 = interfaceinvoke $r2.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCellFormula: org.apache.xmlbeans.XmlObject copy()>();

        r14 = (org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCellFormula) $r13;

        $r15 = interfaceinvoke r14.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCellFormula: java.lang.String getRef()>();

        $r16 = staticinvoke <org.apache.poi.ss.util.CellRangeAddress: org.apache.poi.ss.util.CellRangeAddress valueOf(java.lang.String)>($r15);

        $r22 = new org.apache.poi.ss.util.CellReference;

        specialinvoke $r22.<org.apache.poi.ss.util.CellReference: void <init>(org.apache.poi.ss.usermodel.Cell)>(r0);

        $s0 = virtualinvoke $r22.<org.apache.poi.ss.util.CellReference: short getCol()>();

        $i1 = virtualinvoke $r16.<org.apache.poi.ss.util.CellRangeAddress: int getFirstColumn()>();

        $i14 = (int) $s0;

        if $i14 > $i1 goto label1;

        $i10 = virtualinvoke $r22.<org.apache.poi.ss.util.CellReference: int getRow()>();

        $i11 = virtualinvoke $r16.<org.apache.poi.ss.util.CellRangeAddress: int getFirstRow()>();

        if $i10 <= $i11 goto label2;

     label1:
        $r23 = new org.apache.poi.ss.util.CellRangeAddress;

        $i2 = virtualinvoke $r22.<org.apache.poi.ss.util.CellReference: int getRow()>();

        $i3 = virtualinvoke $r16.<org.apache.poi.ss.util.CellRangeAddress: int getFirstRow()>();

        $i4 = staticinvoke <java.lang.Math: int max(int,int)>($i2, $i3);

        $i5 = virtualinvoke $r16.<org.apache.poi.ss.util.CellRangeAddress: int getLastRow()>();

        $s6 = virtualinvoke $r22.<org.apache.poi.ss.util.CellReference: short getCol()>();

        $i7 = virtualinvoke $r16.<org.apache.poi.ss.util.CellRangeAddress: int getFirstColumn()>();

        $i15 = (int) $s6;

        $i8 = staticinvoke <java.lang.Math: int max(int,int)>($i15, $i7);

        $i9 = virtualinvoke $r16.<org.apache.poi.ss.util.CellRangeAddress: int getLastColumn()>();

        specialinvoke $r23.<org.apache.poi.ss.util.CellRangeAddress: void <init>(int,int,int,int)>($i4, $i5, $i8, $i9);

        $r19 = virtualinvoke $r23.<org.apache.poi.ss.util.CellRangeAddress: java.lang.String formatAsString()>();

        interfaceinvoke r14.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCellFormula: void setRef(java.lang.String)>($r19);

     label2:
        $r20 = r6.<org.apache.poi.xssf.usermodel.XSSFSheet: java.util.Map sharedFormulas>;

        $l12 = interfaceinvoke $r2.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCellFormula: long getSi()>();

        $i13 = (int) $l12;

        $r21 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i13);

        interfaceinvoke $r20.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r21, r14);

     label3:
        if $r2 == null goto label4;

        $r3 = interfaceinvoke $r2.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCellFormula: org.openxmlformats.schemas.spreadsheetml.x2006.main.STCellFormulaType$Enum getT()>();

        $r4 = <org.openxmlformats.schemas.spreadsheetml.x2006.main.STCellFormulaType: org.openxmlformats.schemas.spreadsheetml.x2006.main.STCellFormulaType$Enum ARRAY>;

        if $r3 != $r4 goto label4;

        $r5 = interfaceinvoke $r2.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCellFormula: java.lang.String getRef()>();

        if $r5 == null goto label4;

        $r7 = r6.<org.apache.poi.xssf.usermodel.XSSFSheet: java.util.List arrayFormulas>;

        $r8 = interfaceinvoke $r2.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCellFormula: java.lang.String getRef()>();

        $r9 = staticinvoke <org.apache.poi.ss.util.CellRangeAddress: org.apache.poi.ss.util.CellRangeAddress valueOf(java.lang.String)>($r8);

        interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>($r9);

     label4:
        return;
    }

    protected void commit() throws java.io.IOException
    {
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        java.io.OutputStream $r2;
        org.apache.poi.openxml4j.opc.PackagePart $r1;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        $r1 = virtualinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.apache.poi.openxml4j.opc.PackagePart getPackagePart()>();

        $r2 = virtualinvoke $r1.<org.apache.poi.openxml4j.opc.PackagePart: java.io.OutputStream getOutputStream()>();

        virtualinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: void write(java.io.OutputStream)>($r2);

        virtualinvoke $r2.<java.io.OutputStream: void close()>();

        return;
    }

    protected void write(java.io.OutputStream) throws java.io.IOException
    {
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCols $r32;
        org.apache.poi.openxml4j.opc.PackagePart $r27;
        org.apache.xmlbeans.SchemaType $r8, $r12;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTHyperlink[] $r30;
        boolean z0, $z1;
        java.util.Collection $r3;
        java.util.List $r21, $r24, $r34;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet $r1, $r16, $r17, $r19, $r22, $r29, $r31, $r33;
        javax.xml.namespace.QName $r7, $r9, $r13;
        java.util.HashMap $r11;
        org.apache.poi.xssf.usermodel.XSSFRow r35;
        int $i0, $i1, $i2, $i3, i4, $i5;
        java.lang.String $r10, $r14;
        java.io.OutputStream r15;
        java.util.Iterator $r4;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTHyperlinks $r20, $r23;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTHyperlink $r28;
        org.apache.poi.xssf.usermodel.XSSFHyperlink r26;
        java.util.TreeMap $r2;
        org.apache.xmlbeans.XmlOptions $r5, $r6;
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        java.lang.Object $r18, $r25;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        r15 := @parameter0: java.io.OutputStream;

        z0 = 0;

        $r1 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet worksheet>;

        $i0 = interfaceinvoke $r1.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet: int sizeOfColsArray()>();

        if $i0 != 1 goto label2;

        $r31 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet worksheet>;

        $r32 = interfaceinvoke $r31.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCols getColsArray(int)>(0);

        $i2 = interfaceinvoke $r32.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCols: int sizeOfColArray()>();

        if $i2 != 0 goto label1;

        z0 = 1;

        $r33 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet worksheet>;

        interfaceinvoke $r33.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet: void setColsArray(org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCols[])>(null);

        goto label2;

     label1:
        specialinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: void setColWidthAttribute(org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCols)>($r32);

     label2:
        $r34 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: java.util.List hyperlinks>;

        $i3 = interfaceinvoke $r34.<java.util.List: int size()>();

        if $i3 <= 0 goto label6;

        $r19 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet worksheet>;

        $r20 = interfaceinvoke $r19.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTHyperlinks getHyperlinks()>();

        if $r20 != null goto label3;

        $r29 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet worksheet>;

        interfaceinvoke $r29.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTHyperlinks addNewHyperlinks()>();

     label3:
        $r21 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: java.util.List hyperlinks>;

        $i1 = interfaceinvoke $r21.<java.util.List: int size()>();

        $r30 = newarray (org.openxmlformats.schemas.spreadsheetml.x2006.main.CTHyperlink)[$i1];

        i4 = 0;

     label4:
        $i5 = lengthof $r30;

        if i4 >= $i5 goto label5;

        $r24 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: java.util.List hyperlinks>;

        $r25 = interfaceinvoke $r24.<java.util.List: java.lang.Object get(int)>(i4);

        r26 = (org.apache.poi.xssf.usermodel.XSSFHyperlink) $r25;

        $r27 = virtualinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.apache.poi.openxml4j.opc.PackagePart getPackagePart()>();

        virtualinvoke r26.<org.apache.poi.xssf.usermodel.XSSFHyperlink: void generateRelationIfNeeded(org.apache.poi.openxml4j.opc.PackagePart)>($r27);

        $r28 = virtualinvoke r26.<org.apache.poi.xssf.usermodel.XSSFHyperlink: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTHyperlink getCTHyperlink()>();

        $r30[i4] = $r28;

        i4 = i4 + 1;

        goto label4;

     label5:
        $r22 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet worksheet>;

        $r23 = interfaceinvoke $r22.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTHyperlinks getHyperlinks()>();

        interfaceinvoke $r23.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTHyperlinks: void setHyperlinkArray(org.openxmlformats.schemas.spreadsheetml.x2006.main.CTHyperlink[])>($r30);

     label6:
        $r2 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: java.util.TreeMap _rows>;

        $r3 = virtualinvoke $r2.<java.util.TreeMap: java.util.Collection values()>();

        $r4 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>();

     label7:
        $z1 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label8;

        $r18 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r35 = (org.apache.poi.xssf.usermodel.XSSFRow) $r18;

        virtualinvoke r35.<org.apache.poi.xssf.usermodel.XSSFRow: void onDocumentWrite()>();

        goto label7;

     label8:
        $r5 = new org.apache.xmlbeans.XmlOptions;

        $r6 = <org.apache.poi.xssf.usermodel.XSSFSheet: org.apache.xmlbeans.XmlOptions DEFAULT_XML_OPTIONS>;

        specialinvoke $r5.<org.apache.xmlbeans.XmlOptions: void <init>(org.apache.xmlbeans.XmlOptions)>($r6);

        $r7 = new javax.xml.namespace.QName;

        $r8 = <org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet: org.apache.xmlbeans.SchemaType type>;

        $r9 = interfaceinvoke $r8.<org.apache.xmlbeans.SchemaType: javax.xml.namespace.QName getName()>();

        $r10 = virtualinvoke $r9.<javax.xml.namespace.QName: java.lang.String getNamespaceURI()>();

        specialinvoke $r7.<javax.xml.namespace.QName: void <init>(java.lang.String,java.lang.String)>($r10, "worksheet");

        virtualinvoke $r5.<org.apache.xmlbeans.XmlOptions: org.apache.xmlbeans.XmlOptions setSaveSyntheticDocumentElement(javax.xml.namespace.QName)>($r7);

        $r11 = new java.util.HashMap;

        specialinvoke $r11.<java.util.HashMap: void <init>()>();

        $r12 = <org.openxmlformats.schemas.officeDocument.x2006.relationships.STRelationshipId: org.apache.xmlbeans.SchemaType type>;

        $r13 = interfaceinvoke $r12.<org.apache.xmlbeans.SchemaType: javax.xml.namespace.QName getName()>();

        $r14 = virtualinvoke $r13.<javax.xml.namespace.QName: java.lang.String getNamespaceURI()>();

        interfaceinvoke $r11.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r14, "r");

        virtualinvoke $r5.<org.apache.xmlbeans.XmlOptions: org.apache.xmlbeans.XmlOptions setSaveSuggestedPrefixes(java.util.Map)>($r11);

        $r16 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet worksheet>;

        interfaceinvoke $r16.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet: void save(java.io.OutputStream,org.apache.xmlbeans.XmlOptions)>(r15, $r5);

        if z0 == 0 goto label9;

        $r17 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet worksheet>;

        interfaceinvoke $r17.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCols addNewCols()>();

     label9:
        return;
    }

    public boolean isAutoFilterLocked()
    {
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet $r1;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetProtection $r2;
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        specialinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: void createProtectionFieldIfNotPresent()>();

        $z0 = specialinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: boolean sheetProtectionEnabled()>();

        if $z0 == 0 goto label1;

        $r1 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet worksheet>;

        $r2 = interfaceinvoke $r1.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetProtection getSheetProtection()>();

        $z1 = interfaceinvoke $r2.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetProtection: boolean getAutoFilter()>();

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    public boolean isDeleteColumnsLocked()
    {
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet $r1;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetProtection $r2;
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        specialinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: void createProtectionFieldIfNotPresent()>();

        $z0 = specialinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: boolean sheetProtectionEnabled()>();

        if $z0 == 0 goto label1;

        $r1 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet worksheet>;

        $r2 = interfaceinvoke $r1.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetProtection getSheetProtection()>();

        $z1 = interfaceinvoke $r2.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetProtection: boolean getDeleteColumns()>();

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    public boolean isDeleteRowsLocked()
    {
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet $r1;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetProtection $r2;
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        specialinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: void createProtectionFieldIfNotPresent()>();

        $z0 = specialinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: boolean sheetProtectionEnabled()>();

        if $z0 == 0 goto label1;

        $r1 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet worksheet>;

        $r2 = interfaceinvoke $r1.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetProtection getSheetProtection()>();

        $z1 = interfaceinvoke $r2.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetProtection: boolean getDeleteRows()>();

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    public boolean isFormatCellsLocked()
    {
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet $r1;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetProtection $r2;
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        specialinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: void createProtectionFieldIfNotPresent()>();

        $z0 = specialinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: boolean sheetProtectionEnabled()>();

        if $z0 == 0 goto label1;

        $r1 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet worksheet>;

        $r2 = interfaceinvoke $r1.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetProtection getSheetProtection()>();

        $z1 = interfaceinvoke $r2.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetProtection: boolean getFormatCells()>();

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    public boolean isFormatColumnsLocked()
    {
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet $r1;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetProtection $r2;
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        specialinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: void createProtectionFieldIfNotPresent()>();

        $z0 = specialinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: boolean sheetProtectionEnabled()>();

        if $z0 == 0 goto label1;

        $r1 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet worksheet>;

        $r2 = interfaceinvoke $r1.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetProtection getSheetProtection()>();

        $z1 = interfaceinvoke $r2.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetProtection: boolean getFormatColumns()>();

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    public boolean isFormatRowsLocked()
    {
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet $r1;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetProtection $r2;
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        specialinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: void createProtectionFieldIfNotPresent()>();

        $z0 = specialinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: boolean sheetProtectionEnabled()>();

        if $z0 == 0 goto label1;

        $r1 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet worksheet>;

        $r2 = interfaceinvoke $r1.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetProtection getSheetProtection()>();

        $z1 = interfaceinvoke $r2.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetProtection: boolean getFormatRows()>();

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    public boolean isInsertColumnsLocked()
    {
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet $r1;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetProtection $r2;
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        specialinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: void createProtectionFieldIfNotPresent()>();

        $z0 = specialinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: boolean sheetProtectionEnabled()>();

        if $z0 == 0 goto label1;

        $r1 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet worksheet>;

        $r2 = interfaceinvoke $r1.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetProtection getSheetProtection()>();

        $z1 = interfaceinvoke $r2.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetProtection: boolean getInsertColumns()>();

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    public boolean isInsertHyperlinksLocked()
    {
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet $r1;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetProtection $r2;
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        specialinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: void createProtectionFieldIfNotPresent()>();

        $z0 = specialinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: boolean sheetProtectionEnabled()>();

        if $z0 == 0 goto label1;

        $r1 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet worksheet>;

        $r2 = interfaceinvoke $r1.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetProtection getSheetProtection()>();

        $z1 = interfaceinvoke $r2.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetProtection: boolean getInsertHyperlinks()>();

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    public boolean isInsertRowsLocked()
    {
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet $r1;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetProtection $r2;
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        specialinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: void createProtectionFieldIfNotPresent()>();

        $z0 = specialinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: boolean sheetProtectionEnabled()>();

        if $z0 == 0 goto label1;

        $r1 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet worksheet>;

        $r2 = interfaceinvoke $r1.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetProtection getSheetProtection()>();

        $z1 = interfaceinvoke $r2.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetProtection: boolean getInsertRows()>();

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    public boolean isPivotTablesLocked()
    {
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet $r1;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetProtection $r2;
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        specialinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: void createProtectionFieldIfNotPresent()>();

        $z0 = specialinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: boolean sheetProtectionEnabled()>();

        if $z0 == 0 goto label1;

        $r1 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet worksheet>;

        $r2 = interfaceinvoke $r1.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetProtection getSheetProtection()>();

        $z1 = interfaceinvoke $r2.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetProtection: boolean getPivotTables()>();

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    public boolean isSortLocked()
    {
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet $r1;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetProtection $r2;
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        specialinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: void createProtectionFieldIfNotPresent()>();

        $z0 = specialinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: boolean sheetProtectionEnabled()>();

        if $z0 == 0 goto label1;

        $r1 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet worksheet>;

        $r2 = interfaceinvoke $r1.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetProtection getSheetProtection()>();

        $z1 = interfaceinvoke $r2.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetProtection: boolean getSort()>();

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    public boolean isObjectsLocked()
    {
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet $r1;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetProtection $r2;
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        specialinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: void createProtectionFieldIfNotPresent()>();

        $z0 = specialinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: boolean sheetProtectionEnabled()>();

        if $z0 == 0 goto label1;

        $r1 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet worksheet>;

        $r2 = interfaceinvoke $r1.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetProtection getSheetProtection()>();

        $z1 = interfaceinvoke $r2.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetProtection: boolean getObjects()>();

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    public boolean isScenariosLocked()
    {
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet $r1;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetProtection $r2;
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        specialinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: void createProtectionFieldIfNotPresent()>();

        $z0 = specialinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: boolean sheetProtectionEnabled()>();

        if $z0 == 0 goto label1;

        $r1 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet worksheet>;

        $r2 = interfaceinvoke $r1.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetProtection getSheetProtection()>();

        $z1 = interfaceinvoke $r2.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetProtection: boolean getScenarios()>();

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    public boolean isSelectLockedCellsLocked()
    {
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet $r1;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetProtection $r2;
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        specialinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: void createProtectionFieldIfNotPresent()>();

        $z0 = specialinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: boolean sheetProtectionEnabled()>();

        if $z0 == 0 goto label1;

        $r1 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet worksheet>;

        $r2 = interfaceinvoke $r1.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetProtection getSheetProtection()>();

        $z1 = interfaceinvoke $r2.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetProtection: boolean getSelectLockedCells()>();

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    public boolean isSelectUnlockedCellsLocked()
    {
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet $r1;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetProtection $r2;
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        specialinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: void createProtectionFieldIfNotPresent()>();

        $z0 = specialinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: boolean sheetProtectionEnabled()>();

        if $z0 == 0 goto label1;

        $r1 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet worksheet>;

        $r2 = interfaceinvoke $r1.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetProtection getSheetProtection()>();

        $z1 = interfaceinvoke $r2.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetProtection: boolean getSelectUnlockedCells()>();

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    public boolean isSheetLocked()
    {
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet $r1;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetProtection $r2;
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        specialinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: void createProtectionFieldIfNotPresent()>();

        $z0 = specialinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: boolean sheetProtectionEnabled()>();

        if $z0 == 0 goto label1;

        $r1 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet worksheet>;

        $r2 = interfaceinvoke $r1.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetProtection getSheetProtection()>();

        $z1 = interfaceinvoke $r2.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetProtection: boolean getSheet()>();

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    public void enableLocking()
    {
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet $r1;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetProtection $r2;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        specialinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: void createProtectionFieldIfNotPresent()>();

        $r1 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet worksheet>;

        $r2 = interfaceinvoke $r1.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetProtection getSheetProtection()>();

        interfaceinvoke $r2.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetProtection: void setSheet(boolean)>(1);

        return;
    }

    public void disableLocking()
    {
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet $r1;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetProtection $r2;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        specialinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: void createProtectionFieldIfNotPresent()>();

        $r1 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet worksheet>;

        $r2 = interfaceinvoke $r1.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetProtection getSheetProtection()>();

        interfaceinvoke $r2.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetProtection: void setSheet(boolean)>(0);

        return;
    }

    public void lockAutoFilter()
    {
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet $r1;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetProtection $r2;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        specialinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: void createProtectionFieldIfNotPresent()>();

        $r1 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet worksheet>;

        $r2 = interfaceinvoke $r1.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetProtection getSheetProtection()>();

        interfaceinvoke $r2.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetProtection: void setAutoFilter(boolean)>(1);

        return;
    }

    public void lockDeleteColumns()
    {
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet $r1;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetProtection $r2;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        specialinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: void createProtectionFieldIfNotPresent()>();

        $r1 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet worksheet>;

        $r2 = interfaceinvoke $r1.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetProtection getSheetProtection()>();

        interfaceinvoke $r2.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetProtection: void setDeleteColumns(boolean)>(1);

        return;
    }

    public void lockDeleteRows()
    {
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet $r1;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetProtection $r2;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        specialinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: void createProtectionFieldIfNotPresent()>();

        $r1 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet worksheet>;

        $r2 = interfaceinvoke $r1.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetProtection getSheetProtection()>();

        interfaceinvoke $r2.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetProtection: void setDeleteRows(boolean)>(1);

        return;
    }

    public void lockFormatCells()
    {
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet $r1;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetProtection $r2;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        specialinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: void createProtectionFieldIfNotPresent()>();

        $r1 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet worksheet>;

        $r2 = interfaceinvoke $r1.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetProtection getSheetProtection()>();

        interfaceinvoke $r2.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetProtection: void setDeleteColumns(boolean)>(1);

        return;
    }

    public void lockFormatColumns()
    {
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet $r1;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetProtection $r2;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        specialinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: void createProtectionFieldIfNotPresent()>();

        $r1 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet worksheet>;

        $r2 = interfaceinvoke $r1.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetProtection getSheetProtection()>();

        interfaceinvoke $r2.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetProtection: void setFormatColumns(boolean)>(1);

        return;
    }

    public void lockFormatRows()
    {
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet $r1;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetProtection $r2;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        specialinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: void createProtectionFieldIfNotPresent()>();

        $r1 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet worksheet>;

        $r2 = interfaceinvoke $r1.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetProtection getSheetProtection()>();

        interfaceinvoke $r2.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetProtection: void setFormatRows(boolean)>(1);

        return;
    }

    public void lockInsertColumns()
    {
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet $r1;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetProtection $r2;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        specialinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: void createProtectionFieldIfNotPresent()>();

        $r1 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet worksheet>;

        $r2 = interfaceinvoke $r1.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetProtection getSheetProtection()>();

        interfaceinvoke $r2.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetProtection: void setInsertColumns(boolean)>(1);

        return;
    }

    public void lockInsertHyperlinks()
    {
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet $r1;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetProtection $r2;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        specialinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: void createProtectionFieldIfNotPresent()>();

        $r1 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet worksheet>;

        $r2 = interfaceinvoke $r1.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetProtection getSheetProtection()>();

        interfaceinvoke $r2.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetProtection: void setInsertHyperlinks(boolean)>(1);

        return;
    }

    public void lockInsertRows()
    {
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet $r1;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetProtection $r2;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        specialinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: void createProtectionFieldIfNotPresent()>();

        $r1 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet worksheet>;

        $r2 = interfaceinvoke $r1.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetProtection getSheetProtection()>();

        interfaceinvoke $r2.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetProtection: void setInsertRows(boolean)>(1);

        return;
    }

    public void lockPivotTables()
    {
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet $r1;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetProtection $r2;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        specialinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: void createProtectionFieldIfNotPresent()>();

        $r1 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet worksheet>;

        $r2 = interfaceinvoke $r1.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetProtection getSheetProtection()>();

        interfaceinvoke $r2.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetProtection: void setPivotTables(boolean)>(1);

        return;
    }

    public void lockSort()
    {
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet $r1;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetProtection $r2;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        specialinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: void createProtectionFieldIfNotPresent()>();

        $r1 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet worksheet>;

        $r2 = interfaceinvoke $r1.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetProtection getSheetProtection()>();

        interfaceinvoke $r2.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetProtection: void setSort(boolean)>(1);

        return;
    }

    public void lockObjects()
    {
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet $r1;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetProtection $r2;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        specialinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: void createProtectionFieldIfNotPresent()>();

        $r1 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet worksheet>;

        $r2 = interfaceinvoke $r1.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetProtection getSheetProtection()>();

        interfaceinvoke $r2.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetProtection: void setObjects(boolean)>(1);

        return;
    }

    public void lockScenarios()
    {
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet $r1;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetProtection $r2;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        specialinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: void createProtectionFieldIfNotPresent()>();

        $r1 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet worksheet>;

        $r2 = interfaceinvoke $r1.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetProtection getSheetProtection()>();

        interfaceinvoke $r2.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetProtection: void setScenarios(boolean)>(1);

        return;
    }

    public void lockSelectLockedCells()
    {
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet $r1;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetProtection $r2;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        specialinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: void createProtectionFieldIfNotPresent()>();

        $r1 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet worksheet>;

        $r2 = interfaceinvoke $r1.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetProtection getSheetProtection()>();

        interfaceinvoke $r2.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetProtection: void setSelectLockedCells(boolean)>(1);

        return;
    }

    public void lockSelectUnlockedCells()
    {
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet $r1;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetProtection $r2;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        specialinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: void createProtectionFieldIfNotPresent()>();

        $r1 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet worksheet>;

        $r2 = interfaceinvoke $r1.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetProtection getSheetProtection()>();

        interfaceinvoke $r2.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetProtection: void setSelectUnlockedCells(boolean)>(1);

        return;
    }

    private void createProtectionFieldIfNotPresent()
    {
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet $r1, $r3;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetProtection $r2, $r4;
        org.apache.poi.xssf.usermodel.XSSFSheet r0;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        $r1 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet worksheet>;

        $r2 = interfaceinvoke $r1.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetProtection getSheetProtection()>();

        if $r2 != null goto label1;

        $r3 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet worksheet>;

        $r4 = staticinvoke <org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetProtection$Factory: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetProtection newInstance()>();

        interfaceinvoke $r3.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet: void setSheetProtection(org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetProtection)>($r4);

     label1:
        return;
    }

    private boolean sheetProtectionEnabled()
    {
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet $r1;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetProtection $r2;
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        boolean $z0;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        $r1 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet worksheet>;

        $r2 = interfaceinvoke $r1.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetProtection getSheetProtection()>();

        $z0 = interfaceinvoke $r2.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetProtection: boolean getSheet()>();

        return $z0;
    }

    boolean isCellInArrayFormulaContext(org.apache.poi.xssf.usermodel.XSSFCell)
    {
        org.apache.poi.ss.util.CellRangeAddress r4;
        java.util.Iterator $r2;
        java.util.List $r1;
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        int $i0, $i1;
        java.lang.Object $r3;
        org.apache.poi.xssf.usermodel.XSSFCell r5;
        boolean $z0, $z1;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        r5 := @parameter0: org.apache.poi.xssf.usermodel.XSSFCell;

        $r1 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: java.util.List arrayFormulas>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.apache.poi.ss.util.CellRangeAddress) $r3;

        $i0 = virtualinvoke r5.<org.apache.poi.xssf.usermodel.XSSFCell: int getRowIndex()>();

        $i1 = virtualinvoke r5.<org.apache.poi.xssf.usermodel.XSSFCell: int getColumnIndex()>();

        $z1 = virtualinvoke r4.<org.apache.poi.ss.util.CellRangeAddress: boolean isInRange(int,int)>($i0, $i1);

        if $z1 == 0 goto label2;

        return 1;

     label2:
        goto label1;

     label3:
        return 0;
    }

    org.apache.poi.xssf.usermodel.XSSFCell getFirstCellInArrayFormula(org.apache.poi.xssf.usermodel.XSSFCell)
    {
        org.apache.poi.ss.util.CellRangeAddress r4;
        java.util.Iterator $r2;
        org.apache.poi.xssf.usermodel.XSSFRow $r6;
        java.util.List $r1;
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        int $i0, $i1, $i2, $i3;
        java.lang.Object $r3;
        org.apache.poi.xssf.usermodel.XSSFCell r5, $r7;
        boolean $z0, $z1;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        r5 := @parameter0: org.apache.poi.xssf.usermodel.XSSFCell;

        $r1 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: java.util.List arrayFormulas>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.apache.poi.ss.util.CellRangeAddress) $r3;

        $i0 = virtualinvoke r5.<org.apache.poi.xssf.usermodel.XSSFCell: int getRowIndex()>();

        $i1 = virtualinvoke r5.<org.apache.poi.xssf.usermodel.XSSFCell: int getColumnIndex()>();

        $z1 = virtualinvoke r4.<org.apache.poi.ss.util.CellRangeAddress: boolean isInRange(int,int)>($i0, $i1);

        if $z1 == 0 goto label2;

        $i2 = virtualinvoke r4.<org.apache.poi.ss.util.CellRangeAddress: int getFirstRow()>();

        $r6 = virtualinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.apache.poi.xssf.usermodel.XSSFRow getRow(int)>($i2);

        $i3 = virtualinvoke r4.<org.apache.poi.ss.util.CellRangeAddress: int getFirstColumn()>();

        $r7 = virtualinvoke $r6.<org.apache.poi.xssf.usermodel.XSSFRow: org.apache.poi.xssf.usermodel.XSSFCell getCell(int)>($i3);

        return $r7;

     label2:
        goto label1;

     label3:
        return null;
    }

    private org.apache.poi.ss.usermodel.CellRange getCellRange(org.apache.poi.ss.util.CellRangeAddress)
    {
        java.util.ArrayList $r1;
        org.apache.poi.xssf.usermodel.XSSFRow $r4, r6;
        int $i0, $i1, $i2, $i3, $i4, i5, $i6, i7, $i8, i9, i10;
        org.apache.poi.ss.util.CellRangeAddress r0;
        org.apache.poi.ss.util.SSCellRange $r2;
        org.apache.poi.xssf.usermodel.XSSFSheet r3;
        org.apache.poi.xssf.usermodel.XSSFCell $r5, r7;

        r3 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        r0 := @parameter0: org.apache.poi.ss.util.CellRangeAddress;

        $i0 = virtualinvoke r0.<org.apache.poi.ss.util.CellRangeAddress: int getFirstRow()>();

        $i1 = virtualinvoke r0.<org.apache.poi.ss.util.CellRangeAddress: int getFirstColumn()>();

        $i2 = virtualinvoke r0.<org.apache.poi.ss.util.CellRangeAddress: int getLastRow()>();

        $i3 = virtualinvoke r0.<org.apache.poi.ss.util.CellRangeAddress: int getLastColumn()>();

        $i4 = $i2 - $i0;

        i5 = $i4 + 1;

        $i6 = $i3 - $i1;

        i7 = $i6 + 1;

        $r1 = new java.util.ArrayList;

        $i8 = i5 * i7;

        specialinvoke $r1.<java.util.ArrayList: void <init>(int)>($i8);

        i9 = $i0;

     label1:
        if i9 > $i2 goto label6;

        i10 = $i1;

     label2:
        if i10 > $i3 goto label5;

        $r4 = virtualinvoke r3.<org.apache.poi.xssf.usermodel.XSSFSheet: org.apache.poi.xssf.usermodel.XSSFRow getRow(int)>(i9);

        r6 = $r4;

        if $r4 != null goto label3;

        r6 = virtualinvoke r3.<org.apache.poi.xssf.usermodel.XSSFSheet: org.apache.poi.xssf.usermodel.XSSFRow createRow(int)>(i9);

     label3:
        $r5 = virtualinvoke r6.<org.apache.poi.xssf.usermodel.XSSFRow: org.apache.poi.xssf.usermodel.XSSFCell getCell(int)>(i10);

        r7 = $r5;

        if $r5 != null goto label4;

        r7 = virtualinvoke r6.<org.apache.poi.xssf.usermodel.XSSFRow: org.apache.poi.xssf.usermodel.XSSFCell createCell(int)>(i10);

     label4:
        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>(r7);

        i10 = i10 + 1;

        goto label2;

     label5:
        i9 = i9 + 1;

        goto label1;

     label6:
        $r2 = staticinvoke <org.apache.poi.ss.util.SSCellRange: org.apache.poi.ss.util.SSCellRange create(int,int,int,int,java.util.List,java.lang.Class)>($i0, $i1, i5, i7, $r1, class "Lorg/apache/poi/xssf/usermodel/XSSFCell;");

        return $r2;
    }

    public org.apache.poi.ss.usermodel.CellRange setArrayFormula(java.lang.String, org.apache.poi.ss.util.CellRangeAddress)
    {
        org.apache.poi.ss.util.CellRangeAddress r1;
        java.util.List $r6;
        org.apache.poi.ss.usermodel.CellRange $r2;
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        org.apache.poi.ss.usermodel.Cell $r3;
        java.lang.String r5;
        org.apache.poi.xssf.usermodel.XSSFCell r4;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        r5 := @parameter0: java.lang.String;

        r1 := @parameter1: org.apache.poi.ss.util.CellRangeAddress;

        $r2 = specialinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.apache.poi.ss.usermodel.CellRange getCellRange(org.apache.poi.ss.util.CellRangeAddress)>(r1);

        $r3 = interfaceinvoke $r2.<org.apache.poi.ss.usermodel.CellRange: org.apache.poi.ss.usermodel.Cell getTopLeftCell()>();

        r4 = (org.apache.poi.xssf.usermodel.XSSFCell) $r3;

        virtualinvoke r4.<org.apache.poi.xssf.usermodel.XSSFCell: void setCellArrayFormula(java.lang.String,org.apache.poi.ss.util.CellRangeAddress)>(r5, r1);

        $r6 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: java.util.List arrayFormulas>;

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>(r1);

        return $r2;
    }

    public org.apache.poi.ss.usermodel.CellRange removeArrayFormula(org.apache.poi.ss.usermodel.Cell)
    {
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCell $r6;
        org.apache.poi.ss.usermodel.Cell r0;
        int $i0, $i1;
        java.lang.String $r7, $r13;
        boolean $z0, $z1, $z2;
        org.apache.poi.ss.util.CellRangeAddress r15;
        org.apache.poi.ss.usermodel.Sheet $r1;
        java.util.Iterator $r4, $r18;
        java.lang.IllegalArgumentException $r8, $r21;
        java.util.List $r3, $r16;
        org.apache.poi.ss.usermodel.CellRange $r17;
        org.apache.poi.xssf.usermodel.XSSFSheet r2;
        java.lang.StringBuilder $r9, $r10, $r11, $r12;
        java.lang.Object $r14, $r19;
        org.apache.poi.xssf.usermodel.XSSFCell $r5, r20;

        r2 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        r0 := @parameter0: org.apache.poi.ss.usermodel.Cell;

        $r1 = interfaceinvoke r0.<org.apache.poi.ss.usermodel.Cell: org.apache.poi.ss.usermodel.Sheet getSheet()>();

        if $r1 == r2 goto label1;

        $r21 = new java.lang.IllegalArgumentException;

        specialinvoke $r21.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Specified cell does not belong to this sheet.");

        throw $r21;

     label1:
        $r3 = r2.<org.apache.poi.xssf.usermodel.XSSFSheet: java.util.List arrayFormulas>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r14 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r15 = (org.apache.poi.ss.util.CellRangeAddress) $r14;

        $i0 = interfaceinvoke r0.<org.apache.poi.ss.usermodel.Cell: int getRowIndex()>();

        $i1 = interfaceinvoke r0.<org.apache.poi.ss.usermodel.Cell: int getColumnIndex()>();

        $z1 = virtualinvoke r15.<org.apache.poi.ss.util.CellRangeAddress: boolean isInRange(int,int)>($i0, $i1);

        if $z1 == 0 goto label5;

        $r16 = r2.<org.apache.poi.xssf.usermodel.XSSFSheet: java.util.List arrayFormulas>;

        interfaceinvoke $r16.<java.util.List: boolean remove(java.lang.Object)>(r15);

        $r17 = specialinvoke r2.<org.apache.poi.xssf.usermodel.XSSFSheet: org.apache.poi.ss.usermodel.CellRange getCellRange(org.apache.poi.ss.util.CellRangeAddress)>(r15);

        $r18 = interfaceinvoke $r17.<org.apache.poi.ss.usermodel.CellRange: java.util.Iterator iterator()>();

     label3:
        $z2 = interfaceinvoke $r18.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label4;

        $r19 = interfaceinvoke $r18.<java.util.Iterator: java.lang.Object next()>();

        r20 = (org.apache.poi.xssf.usermodel.XSSFCell) $r19;

        virtualinvoke r20.<org.apache.poi.xssf.usermodel.XSSFCell: void setCellType(int)>(3);

        goto label3;

     label4:
        return $r17;

     label5:
        goto label2;

     label6:
        $r5 = (org.apache.poi.xssf.usermodel.XSSFCell) r0;

        $r6 = virtualinvoke $r5.<org.apache.poi.xssf.usermodel.XSSFCell: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCell getCTCell()>();

        $r7 = interfaceinvoke $r6.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCell: java.lang.String getR()>();

        $r8 = new java.lang.IllegalArgumentException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cell ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not part of an array formula.");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r13);

        throw $r8;
    }

    public org.apache.poi.ss.usermodel.DataValidationHelper getDataValidationHelper()
    {
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        org.apache.poi.xssf.usermodel.XSSFDataValidationHelper $r1;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        $r1 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.apache.poi.xssf.usermodel.XSSFDataValidationHelper dataValidationHelper>;

        return $r1;
    }

    public java.util.List getDataValidations()
    {
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTDataValidation[] $r4;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTDataValidation r5;
        byte $b1;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTDataValidations $r3;
        boolean $z0;
        org.apache.poi.ss.util.CellRangeAddress $r24;
        java.util.List $r7;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet $r2;
        org.apache.poi.ss.util.CellRangeAddressList $r21;
        long $l0;
        java.lang.String[] $r12, $r14;
        org.apache.poi.ss.util.CellReference $r19, $r22, $r23;
        java.util.ArrayList $r20;
        short $s7, $s8;
        int i2, i3, $i4, $i5, $i6, i9, i10, $i11, $i12, $i13;
        java.lang.String r11, r13, $r16, $r18;
        java.util.Iterator $r8;
        org.apache.poi.xssf.usermodel.XSSFDataValidation $r25;
        org.apache.poi.xssf.usermodel.XSSFSheet r1;
        java.lang.Object $r10;

        r1 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        $r20 = new java.util.ArrayList;

        specialinvoke $r20.<java.util.ArrayList: void <init>()>();

        $r2 = r1.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet worksheet>;

        $r3 = interfaceinvoke $r2.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTDataValidations getDataValidations()>();

        if $r3 == null goto label8;

        $l0 = interfaceinvoke $r3.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTDataValidations: long getCount()>();

        $b1 = $l0 cmp 0L;

        $i11 = (int) $b1;

        if $i11 <= 0 goto label8;

        $r4 = interfaceinvoke $r3.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTDataValidations: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTDataValidation[] getDataValidationArray()>();

        i2 = lengthof $r4;

        i9 = 0;

     label1:
        if i9 >= i2 goto label8;

        r5 = $r4[i9];

        $r21 = new org.apache.poi.ss.util.CellRangeAddressList;

        specialinvoke $r21.<org.apache.poi.ss.util.CellRangeAddressList: void <init>()>();

        $r7 = interfaceinvoke r5.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTDataValidation: java.util.List getSqref()>();

        $r8 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label7;

        $r10 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        r11 = (java.lang.String) $r10;

        $r12 = virtualinvoke r11.<java.lang.String: java.lang.String[] split(java.lang.String)>(" ");

        i3 = lengthof $r12;

        i10 = 0;

     label3:
        if i10 >= i3 goto label6;

        r13 = $r12[i10];

        $r14 = virtualinvoke r13.<java.lang.String: java.lang.String[] split(java.lang.String)>(":");

        $r22 = new org.apache.poi.ss.util.CellReference;

        $r16 = $r14[0];

        specialinvoke $r22.<org.apache.poi.ss.util.CellReference: void <init>(java.lang.String)>($r16);

        $i4 = lengthof $r14;

        if $i4 <= 1 goto label4;

        $r23 = new org.apache.poi.ss.util.CellReference;

        $r19 = $r23;

        $r18 = $r14[1];

        specialinvoke $r23.<org.apache.poi.ss.util.CellReference: void <init>(java.lang.String)>($r18);

        goto label5;

     label4:
        $r19 = $r22;

     label5:
        $r24 = new org.apache.poi.ss.util.CellRangeAddress;

        $i5 = virtualinvoke $r22.<org.apache.poi.ss.util.CellReference: int getRow()>();

        $i6 = virtualinvoke $r19.<org.apache.poi.ss.util.CellReference: int getRow()>();

        $s7 = virtualinvoke $r22.<org.apache.poi.ss.util.CellReference: short getCol()>();

        $s8 = virtualinvoke $r19.<org.apache.poi.ss.util.CellReference: short getCol()>();

        $i12 = (int) $s7;

        $i13 = (int) $s8;

        specialinvoke $r24.<org.apache.poi.ss.util.CellRangeAddress: void <init>(int,int,int,int)>($i5, $i6, $i12, $i13);

        virtualinvoke $r21.<org.apache.poi.ss.util.CellRangeAddressList: void addCellRangeAddress(org.apache.poi.ss.util.CellRangeAddress)>($r24);

        i10 = i10 + 1;

        goto label3;

     label6:
        goto label2;

     label7:
        $r25 = new org.apache.poi.xssf.usermodel.XSSFDataValidation;

        specialinvoke $r25.<org.apache.poi.xssf.usermodel.XSSFDataValidation: void <init>(org.apache.poi.ss.util.CellRangeAddressList,org.openxmlformats.schemas.spreadsheetml.x2006.main.CTDataValidation)>($r21, r5);

        interfaceinvoke $r20.<java.util.List: boolean add(java.lang.Object)>($r25);

        i9 = i9 + 1;

        goto label1;

     label8:
        return $r20;
    }

    public void addValidationData(org.apache.poi.ss.usermodel.DataValidation)
    {
        org.apache.poi.xssf.usermodel.XSSFDataValidation r1;
        org.apache.poi.ss.usermodel.DataValidation r0;
        long $l2;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTDataValidation $r5, $r6;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet $r3, $r7;
        org.apache.poi.xssf.usermodel.XSSFSheet r2;
        int $i0, $i1;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTDataValidations $r4, r8;

        r2 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        r0 := @parameter0: org.apache.poi.ss.usermodel.DataValidation;

        r1 = (org.apache.poi.xssf.usermodel.XSSFDataValidation) r0;

        $r3 = r2.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet worksheet>;

        $r4 = interfaceinvoke $r3.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTDataValidations getDataValidations()>();

        r8 = $r4;

        if $r4 != null goto label1;

        $r7 = r2.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet worksheet>;

        r8 = interfaceinvoke $r7.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTDataValidations addNewDataValidations()>();

     label1:
        $i0 = interfaceinvoke r8.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTDataValidations: int sizeOfDataValidationArray()>();

        $r5 = interfaceinvoke r8.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTDataValidations: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTDataValidation addNewDataValidation()>();

        $r6 = virtualinvoke r1.<org.apache.poi.xssf.usermodel.XSSFDataValidation: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTDataValidation getCtDdataValidation()>();

        interfaceinvoke $r5.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTDataValidation: org.apache.xmlbeans.XmlObject set(org.apache.xmlbeans.XmlObject)>($r6);

        $i1 = $i0 + 1;

        $l2 = (long) $i1;

        interfaceinvoke r8.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTDataValidations: void setCount(long)>($l2);

        return;
    }

    public org.apache.poi.xssf.usermodel.XSSFAutoFilter setAutoFilter(org.apache.poi.ss.util.CellRangeAddress)
    {
        org.apache.poi.xssf.usermodel.XSSFWorkbook $r6, $r7;
        org.apache.poi.xssf.usermodel.XSSFName $r8, r23;
        org.apache.poi.ss.util.CellRangeAddress $r3, r4;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTDefinedName $r9;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet $r1, $r21;
        java.lang.StringBuilder $r13, $r15, $r16, $r18;
        org.apache.poi.xssf.usermodel.XSSFAutoFilter $r20;
        org.apache.poi.ss.util.CellReference $r10, $r12;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        java.lang.String $r5, $r11, $r14, $r17, $r19;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTAutoFilter $r2, r22;
        org.apache.poi.xssf.usermodel.XSSFSheet r0;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        r4 := @parameter0: org.apache.poi.ss.util.CellRangeAddress;

        $r1 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet worksheet>;

        $r2 = interfaceinvoke $r1.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTAutoFilter getAutoFilter()>();

        r22 = $r2;

        if $r2 != null goto label1;

        $r21 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet worksheet>;

        r22 = interfaceinvoke $r21.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTAutoFilter addNewAutoFilter()>();

     label1:
        $r3 = new org.apache.poi.ss.util.CellRangeAddress;

        $i0 = virtualinvoke r4.<org.apache.poi.ss.util.CellRangeAddress: int getFirstRow()>();

        $i1 = virtualinvoke r4.<org.apache.poi.ss.util.CellRangeAddress: int getLastRow()>();

        $i2 = virtualinvoke r4.<org.apache.poi.ss.util.CellRangeAddress: int getFirstColumn()>();

        $i3 = virtualinvoke r4.<org.apache.poi.ss.util.CellRangeAddress: int getLastColumn()>();

        specialinvoke $r3.<org.apache.poi.ss.util.CellRangeAddress: void <init>(int,int,int,int)>($i0, $i1, $i2, $i3);

        $r5 = virtualinvoke $r3.<org.apache.poi.ss.util.CellRangeAddress: java.lang.String formatAsString()>();

        interfaceinvoke r22.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTAutoFilter: void setRef(java.lang.String)>($r5);

        $r6 = virtualinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.apache.poi.xssf.usermodel.XSSFWorkbook getWorkbook()>();

        $r7 = virtualinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.apache.poi.xssf.usermodel.XSSFWorkbook getWorkbook()>();

        $i4 = virtualinvoke $r7.<org.apache.poi.xssf.usermodel.XSSFWorkbook: int getSheetIndex(org.apache.poi.ss.usermodel.Sheet)>(r0);

        $r8 = virtualinvoke $r6.<org.apache.poi.xssf.usermodel.XSSFWorkbook: org.apache.poi.xssf.usermodel.XSSFName getBuiltInName(java.lang.String,int)>("_xlnm._FilterDatabase", $i4);

        r23 = $r8;

        if $r8 != null goto label2;

        r23 = virtualinvoke $r6.<org.apache.poi.xssf.usermodel.XSSFWorkbook: org.apache.poi.xssf.usermodel.XSSFName createBuiltInName(java.lang.String,int)>("_xlnm._FilterDatabase", $i4);

     label2:
        $r9 = virtualinvoke r23.<org.apache.poi.xssf.usermodel.XSSFName: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTDefinedName getCTName()>();

        interfaceinvoke $r9.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTDefinedName: void setHidden(boolean)>(1);

        $r10 = new org.apache.poi.ss.util.CellReference;

        $r11 = virtualinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: java.lang.String getSheetName()>();

        $i5 = virtualinvoke r4.<org.apache.poi.ss.util.CellRangeAddress: int getFirstRow()>();

        $i6 = virtualinvoke r4.<org.apache.poi.ss.util.CellRangeAddress: int getFirstColumn()>();

        specialinvoke $r10.<org.apache.poi.ss.util.CellReference: void <init>(java.lang.String,int,int,boolean,boolean)>($r11, $i5, $i6, 1, 1);

        $r12 = new org.apache.poi.ss.util.CellReference;

        $i7 = virtualinvoke r4.<org.apache.poi.ss.util.CellRangeAddress: int getLastRow()>();

        $i8 = virtualinvoke r4.<org.apache.poi.ss.util.CellRangeAddress: int getLastColumn()>();

        specialinvoke $r12.<org.apache.poi.ss.util.CellReference: void <init>(java.lang.String,int,int,boolean,boolean)>(null, $i7, $i8, 1, 1);

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r10.<org.apache.poi.ss.util.CellReference: java.lang.String formatAsString()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r17 = virtualinvoke $r12.<org.apache.poi.ss.util.CellReference: java.lang.String formatAsString()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r23.<org.apache.poi.xssf.usermodel.XSSFName: void setRefersToFormula(java.lang.String)>($r19);

        $r20 = new org.apache.poi.xssf.usermodel.XSSFAutoFilter;

        specialinvoke $r20.<org.apache.poi.xssf.usermodel.XSSFAutoFilter: void <init>(org.apache.poi.xssf.usermodel.XSSFSheet)>(r0);

        return $r20;
    }

    public org.apache.poi.xssf.usermodel.XSSFTable createTable()
    {
        org.apache.poi.xssf.usermodel.XSSFRelation $r7, $r10;
        org.apache.poi.openxml4j.opc.PackageRelationship $r13;
        java.util.ArrayList $r9;
        org.apache.poi.POIXMLDocumentPart $r12;
        org.apache.poi.xssf.usermodel.XSSFFactory $r11;
        int $i0, $i1;
        org.apache.poi.openxml4j.opc.PackagePart $r5;
        java.lang.String $r8, $r14, $r16;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTTablePart $r4;
        boolean $z0;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTTableParts $r3;
        org.apache.poi.xssf.usermodel.XSSFTable $r18;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet $r1, $r2, $r17;
        java.util.TreeMap $r15;
        org.apache.poi.openxml4j.opc.OPCPackage $r6;
        org.apache.poi.xssf.usermodel.XSSFSheet r0;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        $r1 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet worksheet>;

        $z0 = interfaceinvoke $r1.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet: boolean isSetTableParts()>();

        if $z0 != 0 goto label1;

        $r17 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet worksheet>;

        interfaceinvoke $r17.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTTableParts addNewTableParts()>();

     label1:
        $r2 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet worksheet>;

        $r3 = interfaceinvoke $r2.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTTableParts getTableParts()>();

        $r4 = interfaceinvoke $r3.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTTableParts: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTTablePart addNewTablePart()>();

        $r5 = virtualinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.apache.poi.openxml4j.opc.PackagePart getPackagePart()>();

        $r6 = virtualinvoke $r5.<org.apache.poi.openxml4j.opc.PackagePart: org.apache.poi.openxml4j.opc.OPCPackage getPackage()>();

        $r7 = <org.apache.poi.xssf.usermodel.XSSFRelation: org.apache.poi.xssf.usermodel.XSSFRelation TABLE>;

        $r8 = virtualinvoke $r7.<org.apache.poi.xssf.usermodel.XSSFRelation: java.lang.String getContentType()>();

        $r9 = virtualinvoke $r6.<org.apache.poi.openxml4j.opc.OPCPackage: java.util.ArrayList getPartsByContentType(java.lang.String)>($r8);

        $i0 = virtualinvoke $r9.<java.util.ArrayList: int size()>();

        $i1 = $i0 + 1;

        $r10 = <org.apache.poi.xssf.usermodel.XSSFRelation: org.apache.poi.xssf.usermodel.XSSFRelation TABLE>;

        $r11 = staticinvoke <org.apache.poi.xssf.usermodel.XSSFFactory: org.apache.poi.xssf.usermodel.XSSFFactory getInstance()>();

        $r12 = virtualinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.apache.poi.POIXMLDocumentPart createRelationship(org.apache.poi.POIXMLRelation,org.apache.poi.POIXMLFactory,int)>($r10, $r11, $i1);

        $r18 = (org.apache.poi.xssf.usermodel.XSSFTable) $r12;

        $r13 = virtualinvoke $r18.<org.apache.poi.xssf.usermodel.XSSFTable: org.apache.poi.openxml4j.opc.PackageRelationship getPackageRelationship()>();

        $r14 = virtualinvoke $r13.<org.apache.poi.openxml4j.opc.PackageRelationship: java.lang.String getId()>();

        interfaceinvoke $r4.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTTablePart: void setId(java.lang.String)>($r14);

        $r15 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: java.util.TreeMap tables>;

        $r16 = interfaceinvoke $r4.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTTablePart: java.lang.String getId()>();

        virtualinvoke $r15.<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r16, $r18);

        return $r18;
    }

    public java.util.List getTables()
    {
        java.util.TreeMap $r2;
        java.util.Collection $r3;
        org.apache.poi.xssf.usermodel.XSSFSheet r1;
        java.util.ArrayList $r0;

        r1 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        $r0 = new java.util.ArrayList;

        $r2 = r1.<org.apache.poi.xssf.usermodel.XSSFSheet: java.util.TreeMap tables>;

        $r3 = virtualinvoke $r2.<java.util.TreeMap: java.util.Collection values()>();

        specialinvoke $r0.<java.util.ArrayList: void <init>(java.util.Collection)>($r3);

        return $r0;
    }

    public org.apache.poi.xssf.usermodel.XSSFSheetConditionalFormatting getSheetConditionalFormatting()
    {
        org.apache.poi.xssf.usermodel.XSSFSheet r1;
        org.apache.poi.xssf.usermodel.XSSFSheetConditionalFormatting $r0;

        r1 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        $r0 = new org.apache.poi.xssf.usermodel.XSSFSheetConditionalFormatting;

        specialinvoke $r0.<org.apache.poi.xssf.usermodel.XSSFSheetConditionalFormatting: void <init>(org.apache.poi.xssf.usermodel.XSSFSheet)>(r1);

        return $r0;
    }

    public void setTabColor(int)
    {
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetPr $r2, r5;
        long $l1;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTColor $r3;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet $r1, $r4;
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        int i0;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet worksheet>;

        $r2 = interfaceinvoke $r1.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetPr getSheetPr()>();

        r5 = $r2;

        if $r2 != null goto label1;

        $r4 = r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet worksheet>;

        r5 = interfaceinvoke $r4.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetPr addNewSheetPr()>();

     label1:
        $r3 = staticinvoke <org.openxmlformats.schemas.spreadsheetml.x2006.main.CTColor$Factory: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTColor newInstance()>();

        $l1 = (long) i0;

        interfaceinvoke $r3.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTColor: void setIndexed(long)>($l1);

        interfaceinvoke r5.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSheetPr: void setTabColor(org.openxmlformats.schemas.spreadsheetml.x2006.main.CTColor)>($r3);

        return;
    }

    public org.apache.poi.ss.util.CellRangeAddress getRepeatingRows()
    {
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        org.apache.poi.ss.util.CellRangeAddress $r1;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        $r1 = specialinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.apache.poi.ss.util.CellRangeAddress getRepeatingRowsOrColums(boolean)>(1);

        return $r1;
    }

    public org.apache.poi.ss.util.CellRangeAddress getRepeatingColumns()
    {
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        org.apache.poi.ss.util.CellRangeAddress $r1;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        $r1 = specialinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.apache.poi.ss.util.CellRangeAddress getRepeatingRowsOrColums(boolean)>(0);

        return $r1;
    }

    public void setRepeatingRows(org.apache.poi.ss.util.CellRangeAddress)
    {
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        org.apache.poi.ss.util.CellRangeAddress $r1, r2;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        r2 := @parameter0: org.apache.poi.ss.util.CellRangeAddress;

        $r1 = virtualinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.apache.poi.ss.util.CellRangeAddress getRepeatingColumns()>();

        specialinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: void setRepeatingRowsAndColumns(org.apache.poi.ss.util.CellRangeAddress,org.apache.poi.ss.util.CellRangeAddress)>(r2, $r1);

        return;
    }

    public void setRepeatingColumns(org.apache.poi.ss.util.CellRangeAddress)
    {
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        org.apache.poi.ss.util.CellRangeAddress $r1, r2;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        r2 := @parameter0: org.apache.poi.ss.util.CellRangeAddress;

        $r1 = virtualinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.apache.poi.ss.util.CellRangeAddress getRepeatingRows()>();

        specialinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: void setRepeatingRowsAndColumns(org.apache.poi.ss.util.CellRangeAddress,org.apache.poi.ss.util.CellRangeAddress)>($r1, r2);

        return;
    }

    private void setRepeatingRowsAndColumns(org.apache.poi.ss.util.CellRangeAddress, org.apache.poi.ss.util.CellRangeAddress)
    {
        org.apache.poi.xssf.usermodel.XSSFWorkbook $r3, $r9, $r10, $r13;
        org.apache.poi.xssf.usermodel.XSSFName $r14, r15;
        boolean $z0, $z1, $z2;
        org.apache.poi.ss.util.CellRangeAddress r0, r1;
        org.apache.poi.xssf.usermodel.XSSFPrintSetup $r7;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet $r6, $r8;
        int $i0, $i1, $i2, $i3, $i4, i5, i6, i7, i8, $i10, $i12, $i14, $i16, $i18, $i20, $i22, $i24, $i26, $i28, $i30, $i32;
        java.lang.String $r4, $r5;
        java.lang.IllegalArgumentException $r16, $r17;
        org.apache.poi.xssf.usermodel.XSSFSheet r2;

        r2 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        r0 := @parameter0: org.apache.poi.ss.util.CellRangeAddress;

        r1 := @parameter1: org.apache.poi.ss.util.CellRangeAddress;

        $i10 = (int) -1;

        i5 = $i10;

        $i12 = (int) -1;

        i6 = $i12;

        $i14 = (int) -1;

        i7 = $i14;

        $i16 = (int) -1;

        i8 = $i16;

        if r0 == null goto label03;

        $i3 = virtualinvoke r0.<org.apache.poi.ss.util.CellRangeAddress: int getFirstRow()>();

        i7 = $i3;

        $i4 = virtualinvoke r0.<org.apache.poi.ss.util.CellRangeAddress: int getLastRow()>();

        i8 = $i4;

        $i18 = (int) -1;

        if $i3 != $i18 goto label01;

        $i20 = (int) -1;

        if $i4 != $i20 goto label02;

     label01:
        $i22 = (int) -1;

        if $i3 < $i22 goto label02;

        $i24 = (int) -1;

        if $i4 < $i24 goto label02;

        if $i3 <= $i4 goto label03;

     label02:
        $r16 = new java.lang.IllegalArgumentException;

        specialinvoke $r16.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid row range specification");

        throw $r16;

     label03:
        if r1 == null goto label06;

        $i1 = virtualinvoke r1.<org.apache.poi.ss.util.CellRangeAddress: int getFirstColumn()>();

        i5 = $i1;

        $i2 = virtualinvoke r1.<org.apache.poi.ss.util.CellRangeAddress: int getLastColumn()>();

        i6 = $i2;

        $i26 = (int) -1;

        if $i1 != $i26 goto label04;

        $i28 = (int) -1;

        if $i2 != $i28 goto label05;

     label04:
        $i30 = (int) -1;

        if $i1 < $i30 goto label05;

        $i32 = (int) -1;

        if $i2 < $i32 goto label05;

        if $i1 <= $i2 goto label06;

     label05:
        $r17 = new java.lang.IllegalArgumentException;

        specialinvoke $r17.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid column range specification");

        throw $r17;

     label06:
        $r3 = virtualinvoke r2.<org.apache.poi.xssf.usermodel.XSSFSheet: org.apache.poi.xssf.usermodel.XSSFWorkbook getWorkbook()>();

        $i0 = virtualinvoke $r3.<org.apache.poi.xssf.usermodel.XSSFWorkbook: int getSheetIndex(org.apache.poi.ss.usermodel.Sheet)>(r2);

        if r0 != null goto label07;

        if r1 != null goto label07;

        $z2 = 1;

        goto label08;

     label07:
        $z2 = 0;

     label08:
        $r13 = virtualinvoke r2.<org.apache.poi.xssf.usermodel.XSSFSheet: org.apache.poi.xssf.usermodel.XSSFWorkbook getWorkbook()>();

        $r14 = virtualinvoke $r13.<org.apache.poi.xssf.usermodel.XSSFWorkbook: org.apache.poi.xssf.usermodel.XSSFName getBuiltInName(java.lang.String,int)>("_xlnm.Print_Titles", $i0);

        r15 = $r14;

        if $z2 == 0 goto label10;

        if $r14 == null goto label09;

        $r10 = virtualinvoke r2.<org.apache.poi.xssf.usermodel.XSSFSheet: org.apache.poi.xssf.usermodel.XSSFWorkbook getWorkbook()>();

        virtualinvoke $r10.<org.apache.poi.xssf.usermodel.XSSFWorkbook: void removeName(org.apache.poi.xssf.usermodel.XSSFName)>($r14);

     label09:
        return;

     label10:
        if $r14 != null goto label11;

        $r9 = virtualinvoke r2.<org.apache.poi.xssf.usermodel.XSSFSheet: org.apache.poi.xssf.usermodel.XSSFWorkbook getWorkbook()>();

        r15 = virtualinvoke $r9.<org.apache.poi.xssf.usermodel.XSSFWorkbook: org.apache.poi.xssf.usermodel.XSSFName createBuiltInName(java.lang.String,int)>("_xlnm.Print_Titles", $i0);

     label11:
        $r4 = virtualinvoke r15.<org.apache.poi.xssf.usermodel.XSSFName: java.lang.String getSheetName()>();

        $r5 = staticinvoke <org.apache.poi.xssf.usermodel.XSSFSheet: java.lang.String getReferenceBuiltInRecord(java.lang.String,int,int,int,int)>($r4, i5, i6, i7, i8);

        virtualinvoke r15.<org.apache.poi.xssf.usermodel.XSSFName: void setRefersToFormula(java.lang.String)>($r5);

        $r6 = r2.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet worksheet>;

        $z0 = interfaceinvoke $r6.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet: boolean isSetPageSetup()>();

        if $z0 == 0 goto label12;

        $r8 = r2.<org.apache.poi.xssf.usermodel.XSSFSheet: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet worksheet>;

        $z1 = interfaceinvoke $r8.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet: boolean isSetPageMargins()>();

        if $z1 == 0 goto label12;

        goto label13;

     label12:
        $r7 = virtualinvoke r2.<org.apache.poi.xssf.usermodel.XSSFSheet: org.apache.poi.xssf.usermodel.XSSFPrintSetup getPrintSetup()>();

        virtualinvoke $r7.<org.apache.poi.xssf.usermodel.XSSFPrintSetup: void setValidSettings(boolean)>(0);

     label13:
        return;
    }

    private static java.lang.String getReferenceBuiltInRecord(java.lang.String, int, int, int, int)
    {
        boolean $z0, $z1;
        java.lang.StringBuilder $r7, $r8, $r11, $r12, $r15, $r21, $r22, $r25, $r26, $r29, $r38, $r39;
        java.lang.String[] $r9, $r13, $r16, $r18, $r23, $r27;
        org.apache.poi.ss.util.CellReference $r34, $r35, $r36, $r37;
        java.lang.StringBuffer $r40;
        int i0, i1, i2, i3, $i4, $i5, $i7, $i9, $i11, $i13;
        java.lang.String r1, $r5, $r10, $r14, $r17, $r19, $r24, $r28, r30, r31, $r33;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        $r34 = new org.apache.poi.ss.util.CellReference;

        specialinvoke $r34.<org.apache.poi.ss.util.CellReference: void <init>(java.lang.String,int,int,boolean,boolean)>(r1, 0, i0, 1, 1);

        $r35 = new org.apache.poi.ss.util.CellReference;

        specialinvoke $r35.<org.apache.poi.ss.util.CellReference: void <init>(java.lang.String,int,int,boolean,boolean)>(r1, 0, i1, 1, 1);

        $r36 = new org.apache.poi.ss.util.CellReference;

        specialinvoke $r36.<org.apache.poi.ss.util.CellReference: void <init>(java.lang.String,int,int,boolean,boolean)>(r1, i2, 0, 1, 1);

        $r37 = new org.apache.poi.ss.util.CellReference;

        specialinvoke $r37.<org.apache.poi.ss.util.CellReference: void <init>(java.lang.String,int,int,boolean,boolean)>(r1, i3, 0, 1, 1);

        $r5 = staticinvoke <org.apache.poi.ss.formula.SheetNameFormatter: java.lang.String format(java.lang.String)>(r1);

        r30 = "";

        r31 = "";

        $i7 = (int) -1;

        if i0 != $i7 goto label1;

        $i9 = (int) -1;

        if i1 != $i9 goto label1;

        goto label2;

     label1:
        $r38 = new java.lang.StringBuilder;

        specialinvoke $r38.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("!$");

        $r9 = virtualinvoke $r34.<org.apache.poi.ss.util.CellReference: java.lang.String[] getCellRefParts()>();

        $r10 = $r9[2];

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":$");

        $r13 = virtualinvoke $r35.<org.apache.poi.ss.util.CellReference: java.lang.String[] getCellRefParts()>();

        $r14 = $r13[2];

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        r30 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

     label2:
        $i11 = (int) -1;

        if i2 != $i11 goto label3;

        $i13 = (int) -1;

        if i3 != $i13 goto label3;

        goto label4;

     label3:
        $r16 = virtualinvoke $r36.<org.apache.poi.ss.util.CellReference: java.lang.String[] getCellRefParts()>();

        $r17 = $r16[1];

        $z0 = virtualinvoke $r17.<java.lang.String: boolean equals(java.lang.Object)>("0");

        if $z0 != 0 goto label4;

        $r18 = virtualinvoke $r37.<org.apache.poi.ss.util.CellReference: java.lang.String[] getCellRefParts()>();

        $r19 = $r18[1];

        $z1 = virtualinvoke $r19.<java.lang.String: boolean equals(java.lang.Object)>("0");

        if $z1 != 0 goto label4;

        $r39 = new java.lang.StringBuilder;

        specialinvoke $r39.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("!$");

        $r23 = virtualinvoke $r36.<org.apache.poi.ss.util.CellReference: java.lang.String[] getCellRefParts()>();

        $r24 = $r23[1];

        $r25 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":$");

        $r27 = virtualinvoke $r37.<org.apache.poi.ss.util.CellReference: java.lang.String[] getCellRefParts()>();

        $r28 = $r27[1];

        $r29 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r28);

        r31 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

     label4:
        $r40 = new java.lang.StringBuffer;

        specialinvoke $r40.<java.lang.StringBuffer: void <init>()>();

        virtualinvoke $r40.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r30);

        $i5 = virtualinvoke $r40.<java.lang.StringBuffer: int length()>();

        if $i5 <= 0 goto label5;

        $i4 = virtualinvoke r31.<java.lang.String: int length()>();

        if $i4 <= 0 goto label5;

        virtualinvoke $r40.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(44);

     label5:
        virtualinvoke $r40.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r31);

        $r33 = virtualinvoke $r40.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r33;
    }

    private org.apache.poi.ss.util.CellRangeAddress getRepeatingRowsOrColums(boolean)
    {
        java.lang.String[] $r5;
        org.apache.poi.xssf.usermodel.XSSFWorkbook $r1, $r2;
        org.apache.poi.xssf.usermodel.XSSFName $r3;
        int $i0, $i1, $i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i12, $i14, $i16, $i18, $i20;
        java.lang.String $r4, r8;
        boolean z0;
        org.apache.poi.ss.util.CellRangeAddress $r9;
        org.apache.poi.ss.SpreadsheetVersion $r6, $r7;
        org.apache.poi.xssf.usermodel.XSSFSheet r0;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        z0 := @parameter0: boolean;

        $r1 = virtualinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.apache.poi.xssf.usermodel.XSSFWorkbook getWorkbook()>();

        $i0 = virtualinvoke $r1.<org.apache.poi.xssf.usermodel.XSSFWorkbook: int getSheetIndex(org.apache.poi.ss.usermodel.Sheet)>(r0);

        $r2 = virtualinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.apache.poi.xssf.usermodel.XSSFWorkbook getWorkbook()>();

        $r3 = virtualinvoke $r2.<org.apache.poi.xssf.usermodel.XSSFWorkbook: org.apache.poi.xssf.usermodel.XSSFName getBuiltInName(java.lang.String,int)>("_xlnm.Print_Titles", $i0);

        if $r3 != null goto label01;

        return null;

     label01:
        $r4 = virtualinvoke $r3.<org.apache.poi.xssf.usermodel.XSSFName: java.lang.String getRefersToFormula()>();

        if $r4 != null goto label02;

        return null;

     label02:
        $r5 = virtualinvoke $r4.<java.lang.String: java.lang.String[] split(java.lang.String)>(",");

        $r6 = <org.apache.poi.ss.SpreadsheetVersion: org.apache.poi.ss.SpreadsheetVersion EXCEL2007>;

        $i1 = virtualinvoke $r6.<org.apache.poi.ss.SpreadsheetVersion: int getLastRowIndex()>();

        $r7 = <org.apache.poi.ss.SpreadsheetVersion: org.apache.poi.ss.SpreadsheetVersion EXCEL2007>;

        $i2 = virtualinvoke $r7.<org.apache.poi.ss.SpreadsheetVersion: int getLastColumnIndex()>();

        i3 = lengthof $r5;

        i12 = 0;

     label03:
        if i12 >= i3 goto label10;

        r8 = $r5[i12];

        $r9 = staticinvoke <org.apache.poi.ss.util.CellRangeAddress: org.apache.poi.ss.util.CellRangeAddress valueOf(java.lang.String)>(r8);

        $i4 = virtualinvoke $r9.<org.apache.poi.ss.util.CellRangeAddress: int getFirstColumn()>();

        if $i4 != 0 goto label04;

        $i11 = virtualinvoke $r9.<org.apache.poi.ss.util.CellRangeAddress: int getLastColumn()>();

        if $i11 == $i2 goto label05;

     label04:
        $i5 = virtualinvoke $r9.<org.apache.poi.ss.util.CellRangeAddress: int getFirstColumn()>();

        $i14 = (int) -1;

        if $i5 != $i14 goto label06;

        $i10 = virtualinvoke $r9.<org.apache.poi.ss.util.CellRangeAddress: int getLastColumn()>();

        $i16 = (int) -1;

        if $i10 != $i16 goto label06;

     label05:
        if z0 == 0 goto label09;

        return $r9;

     label06:
        $i6 = virtualinvoke $r9.<org.apache.poi.ss.util.CellRangeAddress: int getFirstRow()>();

        if $i6 != 0 goto label07;

        $i9 = virtualinvoke $r9.<org.apache.poi.ss.util.CellRangeAddress: int getLastRow()>();

        if $i9 == $i1 goto label08;

     label07:
        $i7 = virtualinvoke $r9.<org.apache.poi.ss.util.CellRangeAddress: int getFirstRow()>();

        $i18 = (int) -1;

        if $i7 != $i18 goto label09;

        $i8 = virtualinvoke $r9.<org.apache.poi.ss.util.CellRangeAddress: int getLastRow()>();

        $i20 = (int) -1;

        if $i8 != $i20 goto label09;

     label08:
        if z0 != 0 goto label09;

        return $r9;

     label09:
        i12 = i12 + 1;

        goto label03;

     label10:
        return null;
    }

    private org.apache.poi.xssf.usermodel.XSSFPivotTable createPivotTable()
    {
        org.apache.poi.xssf.usermodel.XSSFWorkbook $r1, $r3, $r9;
        org.apache.poi.xssf.usermodel.XSSFFactory $r6, $r11, $r24;
        org.apache.poi.openxml4j.opc.PackagePart $r15, $r16;
        org.apache.poi.openxml4j.opc.PackagePartName $r17;
        java.util.List $r2, $r4;
        org.apache.poi.xssf.usermodel.XSSFPivotCacheRecords r26;
        org.apache.poi.xssf.usermodel.XSSFRelation $r5, $r10, $r18, $r23;
        org.apache.poi.xssf.usermodel.XSSFPivotTable r8;
        org.apache.poi.POIXMLDocumentPart $r7, $r12, $r25;
        org.apache.poi.xssf.usermodel.XSSFPivotCacheDefinition r13, $r27;
        int $i0, i1;
        java.lang.String $r14, $r20, $r29;
        org.apache.poi.xssf.usermodel.XSSFPivotCache $r21;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTPivotCacheDefinition $r28;
        org.apache.poi.openxml4j.opc.TargetMode $r19;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTPivotCache $r22;
        org.apache.poi.xssf.usermodel.XSSFSheet r0;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        $r1 = virtualinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.apache.poi.xssf.usermodel.XSSFWorkbook getWorkbook()>();

        $r2 = virtualinvoke $r1.<org.apache.poi.xssf.usermodel.XSSFWorkbook: java.util.List getPivotTables()>();

        $r3 = virtualinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.apache.poi.xssf.usermodel.XSSFWorkbook getWorkbook()>();

        $r4 = virtualinvoke $r3.<org.apache.poi.xssf.usermodel.XSSFWorkbook: java.util.List getPivotTables()>();

        $i0 = interfaceinvoke $r4.<java.util.List: int size()>();

        i1 = $i0 + 1;

        $r5 = <org.apache.poi.xssf.usermodel.XSSFRelation: org.apache.poi.xssf.usermodel.XSSFRelation PIVOT_TABLE>;

        $r6 = staticinvoke <org.apache.poi.xssf.usermodel.XSSFFactory: org.apache.poi.xssf.usermodel.XSSFFactory getInstance()>();

        $r7 = virtualinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.apache.poi.POIXMLDocumentPart createRelationship(org.apache.poi.POIXMLRelation,org.apache.poi.POIXMLFactory,int)>($r5, $r6, i1);

        r8 = (org.apache.poi.xssf.usermodel.XSSFPivotTable) $r7;

        virtualinvoke r8.<org.apache.poi.xssf.usermodel.XSSFPivotTable: void setParentSheet(org.apache.poi.xssf.usermodel.XSSFSheet)>(r0);

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r8);

        $r9 = virtualinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.apache.poi.xssf.usermodel.XSSFWorkbook getWorkbook()>();

        $r10 = <org.apache.poi.xssf.usermodel.XSSFRelation: org.apache.poi.xssf.usermodel.XSSFRelation PIVOT_CACHE_DEFINITION>;

        $r11 = staticinvoke <org.apache.poi.xssf.usermodel.XSSFFactory: org.apache.poi.xssf.usermodel.XSSFFactory getInstance()>();

        $r12 = virtualinvoke $r9.<org.apache.poi.xssf.usermodel.XSSFWorkbook: org.apache.poi.POIXMLDocumentPart createRelationship(org.apache.poi.POIXMLRelation,org.apache.poi.POIXMLFactory,int)>($r10, $r11, i1);

        r13 = (org.apache.poi.xssf.usermodel.XSSFPivotCacheDefinition) $r12;

        $r14 = virtualinvoke $r9.<org.apache.poi.xssf.usermodel.XSSFWorkbook: java.lang.String getRelationId(org.apache.poi.POIXMLDocumentPart)>(r13);

        $r15 = virtualinvoke r8.<org.apache.poi.xssf.usermodel.XSSFPivotTable: org.apache.poi.openxml4j.opc.PackagePart getPackagePart()>();

        $r16 = virtualinvoke r13.<org.apache.poi.xssf.usermodel.XSSFPivotCacheDefinition: org.apache.poi.openxml4j.opc.PackagePart getPackagePart()>();

        $r17 = virtualinvoke $r16.<org.apache.poi.openxml4j.opc.PackagePart: org.apache.poi.openxml4j.opc.PackagePartName getPartName()>();

        $r19 = <org.apache.poi.openxml4j.opc.TargetMode: org.apache.poi.openxml4j.opc.TargetMode INTERNAL>;

        $r18 = <org.apache.poi.xssf.usermodel.XSSFRelation: org.apache.poi.xssf.usermodel.XSSFRelation PIVOT_CACHE_DEFINITION>;

        $r20 = virtualinvoke $r18.<org.apache.poi.xssf.usermodel.XSSFRelation: java.lang.String getRelation()>();

        virtualinvoke $r15.<org.apache.poi.openxml4j.opc.PackagePart: org.apache.poi.openxml4j.opc.PackageRelationship addRelationship(org.apache.poi.openxml4j.opc.PackagePartName,org.apache.poi.openxml4j.opc.TargetMode,java.lang.String)>($r17, $r19, $r20);

        virtualinvoke r8.<org.apache.poi.xssf.usermodel.XSSFPivotTable: void setPivotCacheDefinition(org.apache.poi.xssf.usermodel.XSSFPivotCacheDefinition)>(r13);

        $r21 = new org.apache.poi.xssf.usermodel.XSSFPivotCache;

        $r22 = virtualinvoke $r9.<org.apache.poi.xssf.usermodel.XSSFWorkbook: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTPivotCache addPivotCache(java.lang.String)>($r14);

        specialinvoke $r21.<org.apache.poi.xssf.usermodel.XSSFPivotCache: void <init>(org.openxmlformats.schemas.spreadsheetml.x2006.main.CTPivotCache)>($r22);

        virtualinvoke r8.<org.apache.poi.xssf.usermodel.XSSFPivotTable: void setPivotCache(org.apache.poi.xssf.usermodel.XSSFPivotCache)>($r21);

        $r23 = <org.apache.poi.xssf.usermodel.XSSFRelation: org.apache.poi.xssf.usermodel.XSSFRelation PIVOT_CACHE_RECORDS>;

        $r24 = staticinvoke <org.apache.poi.xssf.usermodel.XSSFFactory: org.apache.poi.xssf.usermodel.XSSFFactory getInstance()>();

        $r25 = virtualinvoke r13.<org.apache.poi.xssf.usermodel.XSSFPivotCacheDefinition: org.apache.poi.POIXMLDocumentPart createRelationship(org.apache.poi.POIXMLRelation,org.apache.poi.POIXMLFactory,int)>($r23, $r24, i1);

        r26 = (org.apache.poi.xssf.usermodel.XSSFPivotCacheRecords) $r25;

        $r27 = virtualinvoke r8.<org.apache.poi.xssf.usermodel.XSSFPivotTable: org.apache.poi.xssf.usermodel.XSSFPivotCacheDefinition getPivotCacheDefinition()>();

        $r28 = virtualinvoke $r27.<org.apache.poi.xssf.usermodel.XSSFPivotCacheDefinition: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTPivotCacheDefinition getCTPivotCacheDefinition()>();

        $r29 = virtualinvoke r13.<org.apache.poi.xssf.usermodel.XSSFPivotCacheDefinition: java.lang.String getRelationId(org.apache.poi.POIXMLDocumentPart)>(r26);

        interfaceinvoke $r28.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTPivotCacheDefinition: void setId(java.lang.String)>($r29);

        virtualinvoke $r1.<org.apache.poi.xssf.usermodel.XSSFWorkbook: void setPivotTables(java.util.List)>($r2);

        return r8;
    }

    public org.apache.poi.xssf.usermodel.XSSFPivotTable createPivotTable(org.apache.poi.ss.util.AreaReference, org.apache.poi.ss.util.CellReference, org.apache.poi.ss.usermodel.Sheet)
    {
        org.apache.poi.xssf.usermodel.XSSFPivotTable $r4;
        org.apache.poi.ss.util.CellReference $r1, r5, $r8;
        org.apache.poi.xssf.usermodel.XSSFPivotCacheDefinition $r7;
        java.lang.String $r2, $r9, $r10, $r14, $r17;
        boolean $z0;
        org.apache.poi.ss.usermodel.Sheet r6;
        java.lang.IllegalArgumentException $r11;
        org.apache.poi.ss.util.AreaReference r0;
        org.apache.poi.xssf.usermodel.XSSFSheet r3;
        java.lang.StringBuilder $r12, $r13, $r15, $r16;

        r3 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        r0 := @parameter0: org.apache.poi.ss.util.AreaReference;

        r5 := @parameter1: org.apache.poi.ss.util.CellReference;

        r6 := @parameter2: org.apache.poi.ss.usermodel.Sheet;

        $r1 = virtualinvoke r0.<org.apache.poi.ss.util.AreaReference: org.apache.poi.ss.util.CellReference getFirstCell()>();

        $r2 = virtualinvoke $r1.<org.apache.poi.ss.util.CellReference: java.lang.String getSheetName()>();

        if $r2 == null goto label1;

        $r8 = virtualinvoke r0.<org.apache.poi.ss.util.AreaReference: org.apache.poi.ss.util.CellReference getFirstCell()>();

        $r9 = virtualinvoke $r8.<org.apache.poi.ss.util.CellReference: java.lang.String getSheetName()>();

        $r10 = interfaceinvoke r6.<org.apache.poi.ss.usermodel.Sheet: java.lang.String getSheetName()>();

        $z0 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>($r10);

        if $z0 != 0 goto label1;

        $r11 = new java.lang.IllegalArgumentException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The area is referenced in another sheet than the defined source sheet ");

        $r14 = interfaceinvoke r6.<org.apache.poi.ss.usermodel.Sheet: java.lang.String getSheetName()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r17);

        throw $r11;

     label1:
        $r4 = specialinvoke r3.<org.apache.poi.xssf.usermodel.XSSFSheet: org.apache.poi.xssf.usermodel.XSSFPivotTable createPivotTable()>();

        virtualinvoke $r4.<org.apache.poi.xssf.usermodel.XSSFPivotTable: void setDefaultPivotTableDefinition()>();

        virtualinvoke $r4.<org.apache.poi.xssf.usermodel.XSSFPivotTable: void createSourceReferences(org.apache.poi.ss.util.AreaReference,org.apache.poi.ss.util.CellReference,org.apache.poi.ss.usermodel.Sheet)>(r0, r5, r6);

        $r7 = virtualinvoke $r4.<org.apache.poi.xssf.usermodel.XSSFPivotTable: org.apache.poi.xssf.usermodel.XSSFPivotCacheDefinition getPivotCacheDefinition()>();

        virtualinvoke $r7.<org.apache.poi.xssf.usermodel.XSSFPivotCacheDefinition: void createCacheFields(org.apache.poi.ss.usermodel.Sheet)>(r6);

        virtualinvoke $r4.<org.apache.poi.xssf.usermodel.XSSFPivotTable: void createDefaultDataColumns()>();

        return $r4;
    }

    public org.apache.poi.xssf.usermodel.XSSFPivotTable createPivotTable(org.apache.poi.ss.util.AreaReference, org.apache.poi.ss.util.CellReference)
    {
        org.apache.poi.xssf.usermodel.XSSFPivotTable $r5, $r13;
        org.apache.poi.ss.util.CellReference $r1, r4, $r6, $r10;
        org.apache.poi.xssf.usermodel.XSSFWorkbook $r9;
        org.apache.poi.ss.util.AreaReference r0;
        org.apache.poi.xssf.usermodel.XSSFSheet r3, $r12;
        java.lang.String $r2, $r7, $r8, $r11;
        boolean $z0;

        r3 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        r0 := @parameter0: org.apache.poi.ss.util.AreaReference;

        r4 := @parameter1: org.apache.poi.ss.util.CellReference;

        $r1 = virtualinvoke r0.<org.apache.poi.ss.util.AreaReference: org.apache.poi.ss.util.CellReference getFirstCell()>();

        $r2 = virtualinvoke $r1.<org.apache.poi.ss.util.CellReference: java.lang.String getSheetName()>();

        if $r2 == null goto label1;

        $r6 = virtualinvoke r0.<org.apache.poi.ss.util.AreaReference: org.apache.poi.ss.util.CellReference getFirstCell()>();

        $r7 = virtualinvoke $r6.<org.apache.poi.ss.util.CellReference: java.lang.String getSheetName()>();

        $r8 = virtualinvoke r3.<org.apache.poi.xssf.usermodel.XSSFSheet: java.lang.String getSheetName()>();

        $z0 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>($r8);

        if $z0 != 0 goto label1;

        $r9 = virtualinvoke r3.<org.apache.poi.xssf.usermodel.XSSFSheet: org.apache.poi.xssf.usermodel.XSSFWorkbook getWorkbook()>();

        $r10 = virtualinvoke r0.<org.apache.poi.ss.util.AreaReference: org.apache.poi.ss.util.CellReference getFirstCell()>();

        $r11 = virtualinvoke $r10.<org.apache.poi.ss.util.CellReference: java.lang.String getSheetName()>();

        $r12 = virtualinvoke $r9.<org.apache.poi.xssf.usermodel.XSSFWorkbook: org.apache.poi.xssf.usermodel.XSSFSheet getSheet(java.lang.String)>($r11);

        $r13 = virtualinvoke r3.<org.apache.poi.xssf.usermodel.XSSFSheet: org.apache.poi.xssf.usermodel.XSSFPivotTable createPivotTable(org.apache.poi.ss.util.AreaReference,org.apache.poi.ss.util.CellReference,org.apache.poi.ss.usermodel.Sheet)>(r0, r4, $r12);

        return $r13;

     label1:
        $r5 = virtualinvoke r3.<org.apache.poi.xssf.usermodel.XSSFSheet: org.apache.poi.xssf.usermodel.XSSFPivotTable createPivotTable(org.apache.poi.ss.util.AreaReference,org.apache.poi.ss.util.CellReference,org.apache.poi.ss.usermodel.Sheet)>(r0, r4, r3);

        return $r5;
    }

    public java.util.List getPivotTables()
    {
        java.util.Iterator $r4;
        org.apache.poi.xssf.usermodel.XSSFPivotTable r6;
        java.util.ArrayList $r0;
        org.apache.poi.xssf.usermodel.XSSFWorkbook $r2;
        java.util.List $r3;
        org.apache.poi.POIXMLDocumentPart $r7;
        org.apache.poi.xssf.usermodel.XSSFSheet r1;
        java.lang.Object $r5;
        boolean $z0;

        r1 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r2 = virtualinvoke r1.<org.apache.poi.xssf.usermodel.XSSFSheet: org.apache.poi.xssf.usermodel.XSSFWorkbook getWorkbook()>();

        $r3 = virtualinvoke $r2.<org.apache.poi.xssf.usermodel.XSSFWorkbook: java.util.List getPivotTables()>();

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (org.apache.poi.xssf.usermodel.XSSFPivotTable) $r5;

        $r7 = virtualinvoke r6.<org.apache.poi.xssf.usermodel.XSSFPivotTable: org.apache.poi.POIXMLDocumentPart getParent()>();

        if $r7 != r1 goto label2;

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(r6);

     label2:
        goto label1;

     label3:
        return $r0;
    }

    public volatile org.apache.poi.ss.usermodel.SheetConditionalFormatting getSheetConditionalFormatting()
    {
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        org.apache.poi.xssf.usermodel.XSSFSheetConditionalFormatting $r1;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        $r1 = virtualinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.apache.poi.xssf.usermodel.XSSFSheetConditionalFormatting getSheetConditionalFormatting()>();

        return $r1;
    }

    public volatile org.apache.poi.ss.usermodel.AutoFilter setAutoFilter(org.apache.poi.ss.util.CellRangeAddress)
    {
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        org.apache.poi.ss.util.CellRangeAddress r1;
        org.apache.poi.xssf.usermodel.XSSFAutoFilter $r2;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        r1 := @parameter0: org.apache.poi.ss.util.CellRangeAddress;

        $r2 = virtualinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.apache.poi.xssf.usermodel.XSSFAutoFilter setAutoFilter(org.apache.poi.ss.util.CellRangeAddress)>(r1);

        return $r2;
    }

    public volatile org.apache.poi.ss.usermodel.Workbook getWorkbook()
    {
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        org.apache.poi.xssf.usermodel.XSSFWorkbook $r1;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        $r1 = virtualinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.apache.poi.xssf.usermodel.XSSFWorkbook getWorkbook()>();

        return $r1;
    }

    public volatile org.apache.poi.ss.usermodel.Drawing createDrawingPatriarch()
    {
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        org.apache.poi.xssf.usermodel.XSSFDrawing $r1;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        $r1 = virtualinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.apache.poi.xssf.usermodel.XSSFDrawing createDrawingPatriarch()>();

        return $r1;
    }

    public volatile org.apache.poi.ss.usermodel.Comment getCellComment(int, int)
    {
        org.apache.poi.xssf.usermodel.XSSFComment $r1;
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        int i0, i1;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = virtualinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.apache.poi.xssf.usermodel.XSSFComment getCellComment(int,int)>(i0, i1);

        return $r1;
    }

    public volatile org.apache.poi.ss.usermodel.PrintSetup getPrintSetup()
    {
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        org.apache.poi.xssf.usermodel.XSSFPrintSetup $r1;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        $r1 = virtualinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.apache.poi.xssf.usermodel.XSSFPrintSetup getPrintSetup()>();

        return $r1;
    }

    public volatile org.apache.poi.ss.usermodel.Row getRow(int)
    {
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        int i0;
        org.apache.poi.xssf.usermodel.XSSFRow $r1;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.apache.poi.xssf.usermodel.XSSFRow getRow(int)>(i0);

        return $r1;
    }

    public volatile org.apache.poi.ss.usermodel.Row createRow(int)
    {
        org.apache.poi.xssf.usermodel.XSSFSheet r0;
        int i0;
        org.apache.poi.xssf.usermodel.XSSFRow $r1;

        r0 := @this: org.apache.poi.xssf.usermodel.XSSFSheet;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.apache.poi.xssf.usermodel.XSSFSheet: org.apache.poi.xssf.usermodel.XSSFRow createRow(int)>(i0);

        return $r1;
    }

    static void <clinit>()
    {
        org.apache.poi.util.POILogger $r0;

        $r0 = staticinvoke <org.apache.poi.util.POILogFactory: org.apache.poi.util.POILogger getLogger(java.lang.Class)>(class "Lorg/apache/poi/xssf/usermodel/XSSFSheet;");

        <org.apache.poi.xssf.usermodel.XSSFSheet: org.apache.poi.util.POILogger logger> = $r0;

        return;
    }
}
