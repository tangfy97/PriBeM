class org.waveprotocol.wave.client.editor.content.ContentDocument$7 extends java.lang.Object implements org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext$LowLevelEditingConcerns
{
    final org.waveprotocol.wave.client.editor.content.ContentDocument this$0;

    void <init>(org.waveprotocol.wave.client.editor.content.ContentDocument)
    {
        org.waveprotocol.wave.client.editor.content.ContentDocument$7 r0;
        org.waveprotocol.wave.client.editor.content.ContentDocument r1;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentDocument$7;

        r1 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentDocument;

        r0.<org.waveprotocol.wave.client.editor.content.ContentDocument$7: org.waveprotocol.wave.client.editor.content.ContentDocument this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public org.waveprotocol.wave.client.editor.selection.content.SelectionHelper getSelectionHelper()
    {
        org.waveprotocol.wave.client.editor.EditorImpl$MiniBundle $r2;
        org.waveprotocol.wave.client.editor.content.ContentDocument$7 r0;
        org.waveprotocol.wave.client.editor.content.ContentDocument $r1;
        org.waveprotocol.wave.client.editor.selection.content.PassiveSelectionHelper $r3;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentDocument$7;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument$7: org.waveprotocol.wave.client.editor.content.ContentDocument this$0>;

        $r2 = staticinvoke <org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.EditorImpl$MiniBundle access$1600(org.waveprotocol.wave.client.editor.content.ContentDocument)>($r1);

        $r3 = interfaceinvoke $r2.<org.waveprotocol.wave.client.editor.EditorImpl$MiniBundle: org.waveprotocol.wave.client.editor.selection.content.PassiveSelectionHelper getPassiveSelectionHelper()>();

        return $r3;
    }

    public org.waveprotocol.wave.client.editor.extract.TypingExtractor getTypingExtractor()
    {
        org.waveprotocol.wave.client.editor.EditorImpl$MiniBundle $r2;
        org.waveprotocol.wave.client.editor.content.ContentDocument$7 r0;
        org.waveprotocol.wave.client.editor.content.ContentDocument $r1;
        org.waveprotocol.wave.client.editor.extract.TypingExtractor $r3;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentDocument$7;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument$7: org.waveprotocol.wave.client.editor.content.ContentDocument this$0>;

        $r2 = staticinvoke <org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.EditorImpl$MiniBundle access$1600(org.waveprotocol.wave.client.editor.content.ContentDocument)>($r1);

        $r3 = interfaceinvoke $r2.<org.waveprotocol.wave.client.editor.EditorImpl$MiniBundle: org.waveprotocol.wave.client.editor.extract.TypingExtractor getTypingExtractor()>();

        return $r3;
    }

    public void textNodeletAffected(com.google.gwt.dom.client.Text, int, int, org.waveprotocol.wave.client.editor.content.SelectionMaintainer$TextNodeChangeType)
    {
        int i0, i1;
        org.waveprotocol.wave.client.editor.content.SelectionMaintainer$TextNodeChangeType r4;
        org.waveprotocol.wave.client.editor.content.ContentDocument$7 r0;
        org.waveprotocol.wave.client.editor.content.ContentDocument $r1;
        org.waveprotocol.wave.client.editor.content.SelectionMaintainer $r2;
        com.google.gwt.dom.client.Text r3;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentDocument$7;

        r3 := @parameter0: com.google.gwt.dom.client.Text;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r4 := @parameter3: org.waveprotocol.wave.client.editor.content.SelectionMaintainer$TextNodeChangeType;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument$7: org.waveprotocol.wave.client.editor.content.ContentDocument this$0>;

        $r2 = staticinvoke <org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.SelectionMaintainer access$1800(org.waveprotocol.wave.client.editor.content.ContentDocument)>($r1);

        virtualinvoke $r2.<org.waveprotocol.wave.client.editor.content.SelectionMaintainer: void textNodeletAffected(com.google.gwt.dom.client.Text,int,int,org.waveprotocol.wave.client.editor.content.SelectionMaintainer$TextNodeChangeType)>(r3, i0, i1, r4);

        return;
    }

    public org.waveprotocol.wave.client.editor.sugg.SuggestionsManager getSuggestionsManager()
    {
        org.waveprotocol.wave.client.editor.sugg.SuggestionsManager $r3;
        org.waveprotocol.wave.client.editor.EditorImpl$MiniBundle $r2;
        org.waveprotocol.wave.client.editor.content.ContentDocument$7 r0;
        org.waveprotocol.wave.client.editor.content.ContentDocument $r1;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentDocument$7;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument$7: org.waveprotocol.wave.client.editor.content.ContentDocument this$0>;

        $r2 = staticinvoke <org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.EditorImpl$MiniBundle access$1600(org.waveprotocol.wave.client.editor.content.ContentDocument)>($r1);

        $r3 = interfaceinvoke $r2.<org.waveprotocol.wave.client.editor.EditorImpl$MiniBundle: org.waveprotocol.wave.client.editor.sugg.SuggestionsManager getSuggestionsManager()>();

        return $r3;
    }

    public boolean hasEditor()
    {
        org.waveprotocol.wave.client.editor.content.ContentDocument$7 r0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentDocument$7;

        return 1;
    }

    public org.waveprotocol.wave.client.editor.EditorContext editorContext()
    {
        org.waveprotocol.wave.client.editor.EditorContext $r3;
        org.waveprotocol.wave.client.editor.EditorImpl$MiniBundle $r2;
        org.waveprotocol.wave.client.editor.content.ContentDocument$7 r0;
        org.waveprotocol.wave.client.editor.content.ContentDocument $r1;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentDocument$7;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument$7: org.waveprotocol.wave.client.editor.content.ContentDocument this$0>;

        $r2 = staticinvoke <org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.EditorImpl$MiniBundle access$1600(org.waveprotocol.wave.client.editor.content.ContentDocument)>($r1);

        $r3 = interfaceinvoke $r2.<org.waveprotocol.wave.client.editor.EditorImpl$MiniBundle: org.waveprotocol.wave.client.editor.EditorContext getEditorContext()>();

        return $r3;
    }
}
