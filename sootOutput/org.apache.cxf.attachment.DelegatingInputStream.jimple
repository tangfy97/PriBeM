public class org.apache.cxf.attachment.DelegatingInputStream extends java.io.InputStream
{
    private java.io.InputStream is;
    private org.apache.cxf.attachment.AttachmentDeserializer deserializer;
    private boolean isClosed;

    void <init>(java.io.InputStream, org.apache.cxf.attachment.AttachmentDeserializer)
    {
        org.apache.cxf.attachment.DelegatingInputStream r0;
        java.io.InputStream r1;
        org.apache.cxf.attachment.AttachmentDeserializer r2;

        r0 := @this: org.apache.cxf.attachment.DelegatingInputStream;

        r1 := @parameter0: java.io.InputStream;

        r2 := @parameter1: org.apache.cxf.attachment.AttachmentDeserializer;

        specialinvoke r0.<java.io.InputStream: void <init>()>();

        r0.<org.apache.cxf.attachment.DelegatingInputStream: java.io.InputStream is> = r1;

        r0.<org.apache.cxf.attachment.DelegatingInputStream: org.apache.cxf.attachment.AttachmentDeserializer deserializer> = r2;

        return;
    }

    void <init>(java.io.InputStream)
    {
        org.apache.cxf.attachment.DelegatingInputStream r0;
        java.io.InputStream r1;

        r0 := @this: org.apache.cxf.attachment.DelegatingInputStream;

        r1 := @parameter0: java.io.InputStream;

        specialinvoke r0.<java.io.InputStream: void <init>()>();

        r0.<org.apache.cxf.attachment.DelegatingInputStream: java.io.InputStream is> = r1;

        r0.<org.apache.cxf.attachment.DelegatingInputStream: org.apache.cxf.attachment.AttachmentDeserializer deserializer> = null;

        return;
    }

    public void close() throws java.io.IOException
    {
        org.apache.cxf.attachment.DelegatingInputStream r0;
        java.io.InputStream $r1, $r2;
        boolean $z0;
        org.apache.cxf.attachment.AttachmentDeserializer $r3, $r4;

        r0 := @this: org.apache.cxf.attachment.DelegatingInputStream;

        $r1 = r0.<org.apache.cxf.attachment.DelegatingInputStream: java.io.InputStream is>;

        staticinvoke <org.apache.cxf.helpers.IOUtils: void consume(java.io.InputStream)>($r1);

        $r2 = r0.<org.apache.cxf.attachment.DelegatingInputStream: java.io.InputStream is>;

        virtualinvoke $r2.<java.io.InputStream: void close()>();

        $z0 = r0.<org.apache.cxf.attachment.DelegatingInputStream: boolean isClosed>;

        if $z0 != 0 goto label1;

        $r3 = r0.<org.apache.cxf.attachment.DelegatingInputStream: org.apache.cxf.attachment.AttachmentDeserializer deserializer>;

        if $r3 == null goto label1;

        $r4 = r0.<org.apache.cxf.attachment.DelegatingInputStream: org.apache.cxf.attachment.AttachmentDeserializer deserializer>;

        virtualinvoke $r4.<org.apache.cxf.attachment.AttachmentDeserializer: void markClosed(org.apache.cxf.attachment.DelegatingInputStream)>(r0);

     label1:
        r0.<org.apache.cxf.attachment.DelegatingInputStream: boolean isClosed> = 1;

        return;
    }

    public boolean isClosed()
    {
        org.apache.cxf.attachment.DelegatingInputStream r0;
        boolean $z0;

        r0 := @this: org.apache.cxf.attachment.DelegatingInputStream;

        $z0 = r0.<org.apache.cxf.attachment.DelegatingInputStream: boolean isClosed>;

        return $z0;
    }

    public void setClosed(boolean)
    {
        org.apache.cxf.attachment.DelegatingInputStream r0;
        boolean z0;

        r0 := @this: org.apache.cxf.attachment.DelegatingInputStream;

        z0 := @parameter0: boolean;

        r0.<org.apache.cxf.attachment.DelegatingInputStream: boolean isClosed> = z0;

        return;
    }

    public int read() throws java.io.IOException
    {
        int $i0;
        org.apache.cxf.attachment.DelegatingInputStream r0;
        java.io.InputStream $r1;

        r0 := @this: org.apache.cxf.attachment.DelegatingInputStream;

        $r1 = r0.<org.apache.cxf.attachment.DelegatingInputStream: java.io.InputStream is>;

        $i0 = virtualinvoke $r1.<java.io.InputStream: int read()>();

        return $i0;
    }

    public int available() throws java.io.IOException
    {
        int $i0;
        org.apache.cxf.attachment.DelegatingInputStream r0;
        java.io.InputStream $r1;

        r0 := @this: org.apache.cxf.attachment.DelegatingInputStream;

        $r1 = r0.<org.apache.cxf.attachment.DelegatingInputStream: java.io.InputStream is>;

        $i0 = virtualinvoke $r1.<java.io.InputStream: int available()>();

        return $i0;
    }

    public synchronized void mark(int)
    {
        int i0;
        org.apache.cxf.attachment.DelegatingInputStream r0;
        java.io.InputStream $r1;

        r0 := @this: org.apache.cxf.attachment.DelegatingInputStream;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.cxf.attachment.DelegatingInputStream: java.io.InputStream is>;

        virtualinvoke $r1.<java.io.InputStream: void mark(int)>(i0);

        return;
    }

    public boolean markSupported()
    {
        org.apache.cxf.attachment.DelegatingInputStream r0;
        java.io.InputStream $r1;
        boolean $z0;

        r0 := @this: org.apache.cxf.attachment.DelegatingInputStream;

        $r1 = r0.<org.apache.cxf.attachment.DelegatingInputStream: java.io.InputStream is>;

        $z0 = virtualinvoke $r1.<java.io.InputStream: boolean markSupported()>();

        return $z0;
    }

    public int read(byte[], int, int) throws java.io.IOException
    {
        byte[] r1;
        int i0, i1, $i2;
        org.apache.cxf.attachment.DelegatingInputStream r0;
        java.io.InputStream $r2;

        r0 := @this: org.apache.cxf.attachment.DelegatingInputStream;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = r0.<org.apache.cxf.attachment.DelegatingInputStream: java.io.InputStream is>;

        $i2 = virtualinvoke $r2.<java.io.InputStream: int read(byte[],int,int)>(r1, i0, i1);

        return $i2;
    }

    public int read(byte[]) throws java.io.IOException
    {
        byte[] r1;
        int $i0;
        org.apache.cxf.attachment.DelegatingInputStream r0;
        java.io.InputStream $r2;

        r0 := @this: org.apache.cxf.attachment.DelegatingInputStream;

        r1 := @parameter0: byte[];

        $r2 = r0.<org.apache.cxf.attachment.DelegatingInputStream: java.io.InputStream is>;

        $i0 = virtualinvoke $r2.<java.io.InputStream: int read(byte[])>(r1);

        return $i0;
    }

    public synchronized void reset() throws java.io.IOException
    {
        org.apache.cxf.attachment.DelegatingInputStream r0;
        java.io.InputStream $r1;

        r0 := @this: org.apache.cxf.attachment.DelegatingInputStream;

        $r1 = r0.<org.apache.cxf.attachment.DelegatingInputStream: java.io.InputStream is>;

        virtualinvoke $r1.<java.io.InputStream: void reset()>();

        return;
    }

    public long skip(long) throws java.io.IOException
    {
        long l0, $l1;
        org.apache.cxf.attachment.DelegatingInputStream r0;
        java.io.InputStream $r1;

        r0 := @this: org.apache.cxf.attachment.DelegatingInputStream;

        l0 := @parameter0: long;

        $r1 = r0.<org.apache.cxf.attachment.DelegatingInputStream: java.io.InputStream is>;

        $l1 = virtualinvoke $r1.<java.io.InputStream: long skip(long)>(l0);

        return $l1;
    }

    public void setInputStream(java.io.InputStream)
    {
        org.apache.cxf.attachment.DelegatingInputStream r0;
        java.io.InputStream r1;

        r0 := @this: org.apache.cxf.attachment.DelegatingInputStream;

        r1 := @parameter0: java.io.InputStream;

        r0.<org.apache.cxf.attachment.DelegatingInputStream: java.io.InputStream is> = r1;

        return;
    }

    public java.io.InputStream getInputStream()
    {
        org.apache.cxf.attachment.DelegatingInputStream r0;
        java.io.InputStream $r1;

        r0 := @this: org.apache.cxf.attachment.DelegatingInputStream;

        $r1 = r0.<org.apache.cxf.attachment.DelegatingInputStream: java.io.InputStream is>;

        return $r1;
    }
}
