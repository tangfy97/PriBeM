class bsh.BSHAllocationExpression extends bsh.SimpleNode
{
    private static int innerClassCount;

    void <init>(int)
    {
        int i0;
        bsh.BSHAllocationExpression r0;

        r0 := @this: bsh.BSHAllocationExpression;

        i0 := @parameter0: int;

        specialinvoke r0.<bsh.SimpleNode: void <init>(int)>(i0);

        return;
    }

    public java.lang.Object eval(bsh.CallStack, bsh.Interpreter) throws bsh.EvalError
    {
        bsh.SimpleNode r2, r4;
        bsh.CallStack r5;
        bsh.BSHArguments $r13;
        bsh.BSHAmbiguousName r10;
        bsh.BSHAllocationExpression r0;
        boolean $z0, $z1;
        bsh.Interpreter r6;
        bsh.BSHPrimitiveType $r8;
        java.lang.Object $r9, $r12, $r14;
        bsh.Node $r1, $r3;
        bsh.BSHArrayDimensions $r7, $r11;

        r0 := @this: bsh.BSHAllocationExpression;

        r5 := @parameter0: bsh.CallStack;

        r6 := @parameter1: bsh.Interpreter;

        $r1 = virtualinvoke r0.<bsh.BSHAllocationExpression: bsh.Node jjtGetChild(int)>(0);

        r2 = (bsh.SimpleNode) $r1;

        $r3 = virtualinvoke r0.<bsh.BSHAllocationExpression: bsh.Node jjtGetChild(int)>(1);

        r4 = (bsh.SimpleNode) $r3;

        $z0 = r2 instanceof bsh.BSHAmbiguousName;

        if $z0 == 0 goto label2;

        r10 = (bsh.BSHAmbiguousName) r2;

        $z1 = r4 instanceof bsh.BSHArguments;

        if $z1 == 0 goto label1;

        $r13 = (bsh.BSHArguments) r4;

        $r14 = specialinvoke r0.<bsh.BSHAllocationExpression: java.lang.Object objectAllocation(bsh.BSHAmbiguousName,bsh.BSHArguments,bsh.CallStack,bsh.Interpreter)>(r10, $r13, r5, r6);

        return $r14;

     label1:
        $r11 = (bsh.BSHArrayDimensions) r4;

        $r12 = specialinvoke r0.<bsh.BSHAllocationExpression: java.lang.Object objectArrayAllocation(bsh.BSHAmbiguousName,bsh.BSHArrayDimensions,bsh.CallStack,bsh.Interpreter)>(r10, $r11, r5, r6);

        return $r12;

     label2:
        $r8 = (bsh.BSHPrimitiveType) r2;

        $r7 = (bsh.BSHArrayDimensions) r4;

        $r9 = specialinvoke r0.<bsh.BSHAllocationExpression: java.lang.Object primitiveArrayAllocation(bsh.BSHPrimitiveType,bsh.BSHArrayDimensions,bsh.CallStack,bsh.Interpreter)>($r8, $r7, r5, r6);

        return $r9;
    }

    private java.lang.Object objectAllocation(bsh.BSHAmbiguousName, bsh.BSHArguments, bsh.CallStack, bsh.Interpreter) throws bsh.EvalError
    {
        java.lang.Object[] $r3;
        bsh.BSHBlock r17;
        bsh.CallStack r0;
        bsh.BSHArguments r1;
        bsh.BSHAmbiguousName r4;
        java.lang.StringBuffer $r7, $r8, $r10;
        int $i0;
        java.lang.String $r9, $r11;
        boolean $z0, $z1, $z2;
        bsh.BSHAllocationExpression r12;
        bsh.EvalError $r6, $r20;
        bsh.Interpreter r2;
        bsh.ClassIdentifier $r13;
        java.lang.Object $r5, $r15, $r18, $r19;
        java.lang.Class $r14;
        bsh.Node $r16;

        r12 := @this: bsh.BSHAllocationExpression;

        r4 := @parameter0: bsh.BSHAmbiguousName;

        r1 := @parameter1: bsh.BSHArguments;

        r0 := @parameter2: bsh.CallStack;

        r2 := @parameter3: bsh.Interpreter;

        virtualinvoke r0.<bsh.CallStack: bsh.NameSpace top()>();

        $r3 = virtualinvoke r1.<bsh.BSHArguments: java.lang.Object[] getArguments(bsh.CallStack,bsh.Interpreter)>(r0, r2);

        if $r3 != null goto label1;

        $r20 = new bsh.EvalError;

        specialinvoke $r20.<bsh.EvalError: void <init>(java.lang.String,bsh.SimpleNode,bsh.CallStack)>("Null args in new.", r12, r0);

        throw $r20;

     label1:
        virtualinvoke r4.<bsh.BSHAmbiguousName: java.lang.Object toObject(bsh.CallStack,bsh.Interpreter,boolean)>(r0, r2, 0);

        $r5 = virtualinvoke r4.<bsh.BSHAmbiguousName: java.lang.Object toObject(bsh.CallStack,bsh.Interpreter,boolean)>(r0, r2, 1);

        $z0 = $r5 instanceof bsh.ClassIdentifier;

        if $z0 == 0 goto label2;

        $r13 = (bsh.ClassIdentifier) $r5;

        $r14 = virtualinvoke $r13.<bsh.ClassIdentifier: java.lang.Class getTargetClass()>();

        goto label3;

     label2:
        $r6 = new bsh.EvalError;

        $r7 = new java.lang.StringBuffer;

        specialinvoke $r7.<java.lang.StringBuffer: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Unknown class: ");

        $r9 = r4.<bsh.BSHAmbiguousName: java.lang.String text>;

        $r10 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r6.<bsh.EvalError: void <init>(java.lang.String,bsh.SimpleNode,bsh.CallStack)>($r11, r12, r0);

        throw $r6;

     label3:
        $i0 = virtualinvoke r12.<bsh.BSHAllocationExpression: int jjtGetNumChildren()>();

        if $i0 <= 2 goto label4;

        $z2 = 1;

        goto label5;

     label4:
        $z2 = 0;

     label5:
        if $z2 == 0 goto label7;

        $r16 = virtualinvoke r12.<bsh.BSHAllocationExpression: bsh.Node jjtGetChild(int)>(2);

        r17 = (bsh.BSHBlock) $r16;

        $z1 = virtualinvoke $r14.<java.lang.Class: boolean isInterface()>();

        if $z1 == 0 goto label6;

        $r19 = specialinvoke r12.<bsh.BSHAllocationExpression: java.lang.Object constructWithInterfaceBody(java.lang.Class,java.lang.Object[],bsh.BSHBlock,bsh.CallStack,bsh.Interpreter)>($r14, $r3, r17, r0, r2);

        return $r19;

     label6:
        $r18 = specialinvoke r12.<bsh.BSHAllocationExpression: java.lang.Object constructWithClassBody(java.lang.Class,java.lang.Object[],bsh.BSHBlock,bsh.CallStack,bsh.Interpreter)>($r14, $r3, r17, r0, r2);

        return $r18;

     label7:
        $r15 = specialinvoke r12.<bsh.BSHAllocationExpression: java.lang.Object constructObject(java.lang.Class,java.lang.Object[],bsh.CallStack)>($r14, $r3, r0);

        return $r15;
    }

    private java.lang.Object constructObject(java.lang.Class, java.lang.Object[], bsh.CallStack) throws bsh.EvalError
    {
        boolean $z0;
        bsh.TargetError $r36;
        java.lang.reflect.InvocationTargetException $r18;
        java.lang.Throwable $r21, $r25;
        java.lang.Object[] r1;
        bsh.NameSpace $r5, $r7, $r8;
        bsh.UtilEvalError $r15;
        bsh.CallStack r4;
        bsh.ClassGenerator $r14;
        bsh.This $r6;
        java.lang.StringBuffer $r11, $r12, $r20, $r22, $r29, $r31, $r33, $r35, $r37;
        int $i0, $i2;
        java.lang.String $r3, $r10, $r13, $r23, $r30, $r32;
        bsh.BSHAllocationExpression r16;
        bsh.ReflectError $r26;
        bsh.EvalError $r17, $r34;
        java.lang.Class r0;
        java.lang.Object $r2;

        r16 := @this: bsh.BSHAllocationExpression;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.Object[];

        r4 := @parameter2: bsh.CallStack;

     label01:
        $r2 = staticinvoke <bsh.Reflect: java.lang.Object constructObject(java.lang.Class,java.lang.Object[])>(r0, r1);

     label02:
        goto label05;

     label03:
        $r26 := @caughtexception;

        $r34 = new bsh.EvalError;

        $r33 = new java.lang.StringBuffer;

        specialinvoke $r33.<java.lang.StringBuffer: void <init>()>();

        $r29 = virtualinvoke $r33.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Constructor error: ");

        $r30 = virtualinvoke $r26.<bsh.ReflectError: java.lang.String getMessage()>();

        $r31 = virtualinvoke $r29.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r30);

        $r32 = virtualinvoke $r31.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r34.<bsh.EvalError: void <init>(java.lang.String,bsh.SimpleNode,bsh.CallStack)>($r32, r16, r4);

        throw $r34;

     label04:
        $r18 := @caughtexception;

        $r35 = new java.lang.StringBuffer;

        specialinvoke $r35.<java.lang.StringBuffer: void <init>()>();

        $r20 = virtualinvoke $r35.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("The constructor threw an exception:\n\t");

        $r21 = virtualinvoke $r18.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>();

        $r22 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r21);

        $r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <bsh.Interpreter: void debug(java.lang.String)>($r23);

        $r36 = new bsh.TargetError;

        $r25 = virtualinvoke $r18.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>();

        specialinvoke $r36.<bsh.TargetError: void <init>(java.lang.String,java.lang.Throwable,bsh.SimpleNode,bsh.CallStack,boolean)>("Object constructor", $r25, r16, r4, 1);

        throw $r36;

     label05:
        $r3 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $i0 = virtualinvoke $r3.<java.lang.String: int indexOf(java.lang.String)>("$");

        $i2 = (int) -1;

        if $i0 != $i2 goto label06;

        return $r2;

     label06:
        $r5 = virtualinvoke r4.<bsh.CallStack: bsh.NameSpace top()>();

        $r6 = virtualinvoke $r5.<bsh.NameSpace: bsh.This getThis(bsh.Interpreter)>(null);

        $r7 = virtualinvoke $r6.<bsh.This: bsh.NameSpace getNameSpace()>();

        $r8 = staticinvoke <bsh.Name: bsh.NameSpace getClassNameSpace(bsh.NameSpace)>($r7);

        if $r8 == null goto label10;

        $r37 = new java.lang.StringBuffer;

        specialinvoke $r37.<java.lang.StringBuffer: void <init>()>();

        $r10 = virtualinvoke $r8.<bsh.NameSpace: java.lang.String getName()>();

        $r11 = virtualinvoke $r37.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("$");

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>();

        $z0 = virtualinvoke $r3.<java.lang.String: boolean startsWith(java.lang.String)>($r13);

        if $z0 == 0 goto label10;

     label07:
        $r14 = staticinvoke <bsh.ClassGenerator: bsh.ClassGenerator getClassGenerator()>();

        virtualinvoke $r14.<bsh.ClassGenerator: void setInstanceNameSpaceParent(java.lang.Object,java.lang.String,bsh.NameSpace)>($r2, $r3, $r8);

     label08:
        goto label10;

     label09:
        $r15 := @caughtexception;

        $r17 = virtualinvoke $r15.<bsh.UtilEvalError: bsh.EvalError toEvalError(bsh.SimpleNode,bsh.CallStack)>(r16, r4);

        throw $r17;

     label10:
        return $r2;

        catch bsh.ReflectError from label01 to label02 with label03;
        catch java.lang.reflect.InvocationTargetException from label01 to label02 with label04;
        catch bsh.UtilEvalError from label07 to label08 with label09;
    }

    private java.lang.Object constructWithClassBody(java.lang.Class, java.lang.Object[], bsh.BSHBlock, bsh.CallStack, bsh.Interpreter) throws bsh.EvalError
    {
        java.lang.Throwable $r24;
        java.lang.Object[] r14;
        bsh.NameSpace $r2;
        bsh.BSHBlock r11;
        bsh.UtilEvalError $r25;
        bsh.CallStack r1;
        bsh.ClassGenerator $r9;
        java.lang.StringBuffer $r0, $r4, $r5, $r6, $r18, $r19, $r20;
        bsh.Modifiers $r8;
        int $i0, $i1;
        java.lang.String $r3, $r7, $r21;
        boolean $z0;
        bsh.BSHAllocationExpression r22;
        bsh.EvalError $r17, $r26;
        bsh.Interpreter r12;
        java.lang.Exception $r16, r27;
        java.lang.reflect.InvocationTargetException $r23;
        java.lang.Class r10, $r13;
        java.lang.Object $r15;

        r22 := @this: bsh.BSHAllocationExpression;

        r10 := @parameter0: java.lang.Class;

        r14 := @parameter1: java.lang.Object[];

        r11 := @parameter2: bsh.BSHBlock;

        r1 := @parameter3: bsh.CallStack;

        r12 := @parameter4: bsh.Interpreter;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke r1.<bsh.CallStack: bsh.NameSpace top()>();

        $r3 = virtualinvoke $r2.<bsh.NameSpace: java.lang.String getName()>();

        $r4 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("$");

        $i0 = <bsh.BSHAllocationExpression: int innerClassCount>;

        $i1 = $i0 + 1;

        <bsh.BSHAllocationExpression: int innerClassCount> = $i1;

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        $r8 = new bsh.Modifiers;

        specialinvoke $r8.<bsh.Modifiers: void <init>()>();

        virtualinvoke $r8.<bsh.Modifiers: void addModifier(int,java.lang.String)>(0, "public");

     label1:
        $r9 = staticinvoke <bsh.ClassGenerator: bsh.ClassGenerator getClassGenerator()>();

        $r13 = virtualinvoke $r9.<bsh.ClassGenerator: java.lang.Class generateClass(java.lang.String,bsh.Modifiers,java.lang.Class[],java.lang.Class,bsh.BSHBlock,boolean,bsh.CallStack,bsh.Interpreter)>($r7, $r8, null, r10, r11, 0, r1, r12);

     label2:
        goto label4;

     label3:
        $r25 := @caughtexception;

        $r26 = virtualinvoke $r25.<bsh.UtilEvalError: bsh.EvalError toEvalError(bsh.SimpleNode,bsh.CallStack)>(r22, r1);

        throw $r26;

     label4:
        $r15 = staticinvoke <bsh.Reflect: java.lang.Object constructObject(java.lang.Class,java.lang.Object[])>($r13, r14);

     label5:
        return $r15;

     label6:
        $r16 := @caughtexception;

        r27 = $r16;

        $z0 = $r16 instanceof java.lang.reflect.InvocationTargetException;

        if $z0 == 0 goto label7;

        $r23 = (java.lang.reflect.InvocationTargetException) $r16;

        $r24 = virtualinvoke $r23.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>();

        r27 = (java.lang.Exception) $r24;

     label7:
        $r17 = new bsh.EvalError;

        $r18 = new java.lang.StringBuffer;

        specialinvoke $r18.<java.lang.StringBuffer: void <init>()>();

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Error constructing inner class instance: ");

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r27);

        $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r17.<bsh.EvalError: void <init>(java.lang.String,bsh.SimpleNode,bsh.CallStack)>($r21, r22, r1);

        throw $r17;

        catch bsh.UtilEvalError from label1 to label2 with label3;
        catch java.lang.Exception from label4 to label5 with label6;
    }

    private java.lang.Object constructWithInterfaceBody(java.lang.Class, java.lang.Object[], bsh.BSHBlock, bsh.CallStack, bsh.Interpreter) throws bsh.EvalError
    {
        bsh.EvalError $r10;
        bsh.Interpreter r4;
        java.lang.Object[] r11;
        bsh.NameSpace $r1, $r2;
        bsh.BSHBlock r3;
        bsh.UtilEvalError $r8;
        bsh.CallStack r0;
        bsh.This $r6;
        java.lang.Class r5;
        java.lang.Object $r7;
        bsh.BSHAllocationExpression r9;

        r9 := @this: bsh.BSHAllocationExpression;

        r5 := @parameter0: java.lang.Class;

        r11 := @parameter1: java.lang.Object[];

        r3 := @parameter2: bsh.BSHBlock;

        r0 := @parameter3: bsh.CallStack;

        r4 := @parameter4: bsh.Interpreter;

        $r1 = virtualinvoke r0.<bsh.CallStack: bsh.NameSpace top()>();

        $r2 = new bsh.NameSpace;

        specialinvoke $r2.<bsh.NameSpace: void <init>(bsh.NameSpace,java.lang.String)>($r1, "AnonymousBlock");

        virtualinvoke r0.<bsh.CallStack: void push(bsh.NameSpace)>($r2);

        virtualinvoke r3.<bsh.BSHBlock: java.lang.Object eval(bsh.CallStack,bsh.Interpreter,boolean)>(r0, r4, 1);

        virtualinvoke r0.<bsh.CallStack: bsh.NameSpace pop()>();

        virtualinvoke $r2.<bsh.NameSpace: void importStatic(java.lang.Class)>(r5);

     label1:
        $r6 = virtualinvoke $r2.<bsh.NameSpace: bsh.This getThis(bsh.Interpreter)>(r4);

        $r7 = virtualinvoke $r6.<bsh.This: java.lang.Object getInterface(java.lang.Class)>(r5);

     label2:
        return $r7;

     label3:
        $r8 := @caughtexception;

        $r10 = virtualinvoke $r8.<bsh.UtilEvalError: bsh.EvalError toEvalError(bsh.SimpleNode,bsh.CallStack)>(r9, r0);

        throw $r10;

        catch bsh.UtilEvalError from label1 to label2 with label3;
    }

    private java.lang.Object objectArrayAllocation(bsh.BSHAmbiguousName, bsh.BSHArrayDimensions, bsh.CallStack, bsh.Interpreter) throws bsh.EvalError
    {
        bsh.EvalError $r8;
        bsh.Interpreter r3;
        bsh.Name $r11;
        bsh.NameSpace $r1;
        bsh.CallStack r0;
        bsh.BSHAmbiguousName r2;
        java.lang.StringBuffer $r9, $r10, $r12, $r13;
        java.lang.Class $r4;
        java.lang.Object $r7;
        java.lang.String $r14;
        bsh.BSHArrayDimensions r6;
        bsh.BSHAllocationExpression r5;

        r5 := @this: bsh.BSHAllocationExpression;

        r2 := @parameter0: bsh.BSHAmbiguousName;

        r6 := @parameter1: bsh.BSHArrayDimensions;

        r0 := @parameter2: bsh.CallStack;

        r3 := @parameter3: bsh.Interpreter;

        $r1 = virtualinvoke r0.<bsh.CallStack: bsh.NameSpace top()>();

        $r4 = virtualinvoke r2.<bsh.BSHAmbiguousName: java.lang.Class toClass(bsh.CallStack,bsh.Interpreter)>(r0, r3);

        if $r4 != null goto label1;

        $r8 = new bsh.EvalError;

        $r9 = new java.lang.StringBuffer;

        specialinvoke $r9.<java.lang.StringBuffer: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Class ");

        $r11 = virtualinvoke r2.<bsh.BSHAmbiguousName: bsh.Name getName(bsh.NameSpace)>($r1);

        $r12 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" not found.");

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r8.<bsh.EvalError: void <init>(java.lang.String,bsh.SimpleNode,bsh.CallStack)>($r14, r5, r0);

        throw $r8;

     label1:
        $r7 = specialinvoke r5.<bsh.BSHAllocationExpression: java.lang.Object arrayAllocation(bsh.BSHArrayDimensions,java.lang.Class,bsh.CallStack,bsh.Interpreter)>(r6, $r4, r0, r3);

        return $r7;
    }

    private java.lang.Object primitiveArrayAllocation(bsh.BSHPrimitiveType, bsh.BSHArrayDimensions, bsh.CallStack, bsh.Interpreter) throws bsh.EvalError
    {
        bsh.BSHPrimitiveType r0;
        bsh.Interpreter r5;
        java.lang.Class $r1;
        java.lang.Object $r6;
        bsh.CallStack r4;
        bsh.BSHArrayDimensions r3;
        bsh.BSHAllocationExpression r2;

        r2 := @this: bsh.BSHAllocationExpression;

        r0 := @parameter0: bsh.BSHPrimitiveType;

        r3 := @parameter1: bsh.BSHArrayDimensions;

        r4 := @parameter2: bsh.CallStack;

        r5 := @parameter3: bsh.Interpreter;

        $r1 = virtualinvoke r0.<bsh.BSHPrimitiveType: java.lang.Class getType()>();

        $r6 = specialinvoke r2.<bsh.BSHAllocationExpression: java.lang.Object arrayAllocation(bsh.BSHArrayDimensions,java.lang.Class,bsh.CallStack,bsh.Interpreter)>(r3, $r1, r4, r5);

        return $r6;
    }

    private java.lang.Object arrayAllocation(bsh.BSHArrayDimensions, java.lang.Class, bsh.CallStack, bsh.Interpreter) throws bsh.EvalError
    {
        bsh.Interpreter r3;
        bsh.CallStack r2;
        bsh.Primitive $r5;
        java.lang.Class r1;
        java.lang.Object $r4, $r7;
        bsh.BSHArrayDimensions r0;
        bsh.BSHAllocationExpression r6;

        r6 := @this: bsh.BSHAllocationExpression;

        r0 := @parameter0: bsh.BSHArrayDimensions;

        r1 := @parameter1: java.lang.Class;

        r2 := @parameter2: bsh.CallStack;

        r3 := @parameter3: bsh.Interpreter;

        $r4 = virtualinvoke r0.<bsh.BSHArrayDimensions: java.lang.Object eval(java.lang.Class,bsh.CallStack,bsh.Interpreter)>(r1, r2, r3);

        $r5 = <bsh.Primitive: bsh.Primitive VOID>;

        if $r4 == $r5 goto label1;

        return $r4;

     label1:
        $r7 = specialinvoke r6.<bsh.BSHAllocationExpression: java.lang.Object arrayNewInstance(java.lang.Class,bsh.BSHArrayDimensions,bsh.CallStack)>(r1, r0, r2);

        return $r7;
    }

    private java.lang.Object arrayNewInstance(java.lang.Class, bsh.BSHArrayDimensions, bsh.CallStack) throws bsh.EvalError
    {
        bsh.CallStack r13;
        int[] $r1, $r3;
        java.lang.StringBuffer $r7, $r8, $r10;
        int $i0, $i1;
        java.lang.String $r9, $r11;
        bsh.BSHAllocationExpression r12;
        java.lang.NegativeArraySizeException $r14;
        bsh.TargetError $r15;
        bsh.EvalError $r6;
        java.lang.Exception $r5;
        java.lang.Object $r2, $r4;
        java.lang.Class r16;
        bsh.BSHArrayDimensions r0;

        r12 := @this: bsh.BSHAllocationExpression;

        r16 := @parameter0: java.lang.Class;

        r0 := @parameter1: bsh.BSHArrayDimensions;

        r13 := @parameter2: bsh.CallStack;

        $i0 = r0.<bsh.BSHArrayDimensions: int numUndefinedDims>;

        if $i0 <= 0 goto label1;

        $i1 = r0.<bsh.BSHArrayDimensions: int numUndefinedDims>;

        $r3 = newarray (int)[$i1];

        $r4 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>(r16, $r3);

        r16 = virtualinvoke $r4.<java.lang.Object: java.lang.Class getClass()>();

     label1:
        $r1 = r0.<bsh.BSHArrayDimensions: int[] definedDimensions>;

        $r2 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>(r16, $r1);

     label2:
        return $r2;

     label3:
        $r14 := @caughtexception;

        $r15 = new bsh.TargetError;

        specialinvoke $r15.<bsh.TargetError: void <init>(java.lang.Throwable,bsh.SimpleNode,bsh.CallStack)>($r14, r12, r13);

        throw $r15;

     label4:
        $r5 := @caughtexception;

        $r6 = new bsh.EvalError;

        $r7 = new java.lang.StringBuffer;

        specialinvoke $r7.<java.lang.StringBuffer: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Can\'t construct primitive array: ");

        $r9 = virtualinvoke $r5.<java.lang.Exception: java.lang.String getMessage()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r6.<bsh.EvalError: void <init>(java.lang.String,bsh.SimpleNode,bsh.CallStack)>($r11, r12, r13);

        throw $r6;

        catch java.lang.NegativeArraySizeException from label1 to label2 with label3;
        catch java.lang.Exception from label1 to label2 with label4;
    }

    static void <clinit>()
    {
        <bsh.BSHAllocationExpression: int innerClassCount> = 0;

        return;
    }
}
