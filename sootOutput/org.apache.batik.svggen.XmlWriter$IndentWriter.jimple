class org.apache.batik.svggen.XmlWriter$IndentWriter extends java.io.Writer
{
    protected java.io.Writer proxied;
    protected int indentLevel;
    protected int column;

    public void <init>(java.io.Writer)
    {
        java.io.Writer r1;
        org.apache.batik.svggen.XmlWriter$IndentWriter r0;
        org.apache.batik.svggen.SVGGraphics2DRuntimeException $r2;

        r0 := @this: org.apache.batik.svggen.XmlWriter$IndentWriter;

        r1 := @parameter0: java.io.Writer;

        specialinvoke r0.<java.io.Writer: void <init>()>();

        if r1 != null goto label1;

        $r2 = new org.apache.batik.svggen.SVGGraphics2DRuntimeException;

        specialinvoke $r2.<org.apache.batik.svggen.SVGGraphics2DRuntimeException: void <init>(java.lang.String)>("proxy should not be null");

        throw $r2;

     label1:
        r0.<org.apache.batik.svggen.XmlWriter$IndentWriter: java.io.Writer proxied> = r1;

        return;
    }

    public void setIndentLevel(int)
    {
        int i0;
        org.apache.batik.svggen.XmlWriter$IndentWriter r0;

        r0 := @this: org.apache.batik.svggen.XmlWriter$IndentWriter;

        i0 := @parameter0: int;

        r0.<org.apache.batik.svggen.XmlWriter$IndentWriter: int indentLevel> = i0;

        return;
    }

    public int getIndentLevel()
    {
        int $i0;
        org.apache.batik.svggen.XmlWriter$IndentWriter r0;

        r0 := @this: org.apache.batik.svggen.XmlWriter$IndentWriter;

        $i0 = r0.<org.apache.batik.svggen.XmlWriter$IndentWriter: int indentLevel>;

        return $i0;
    }

    public void printIndent() throws java.io.IOException
    {
        org.apache.batik.svggen.XmlWriter$IndentWriter r0;
        java.io.Writer $r1, $r3, $r5;
        int $i0, $i1, $i2, $i3, i4;
        char[] $r4, $r6;
        java.lang.String $r2;

        r0 := @this: org.apache.batik.svggen.XmlWriter$IndentWriter;

        $r1 = r0.<org.apache.batik.svggen.XmlWriter$IndentWriter: java.io.Writer proxied>;

        $r2 = staticinvoke <org.apache.batik.svggen.XmlWriter: java.lang.String access$000()>();

        virtualinvoke $r1.<java.io.Writer: void write(java.lang.String)>($r2);

        i4 = r0.<org.apache.batik.svggen.XmlWriter$IndentWriter: int indentLevel>;

        goto label3;

     label1:
        $i0 = staticinvoke <org.apache.batik.svggen.XmlWriter: int access$100()>();

        if i4 <= $i0 goto label2;

        $r5 = r0.<org.apache.batik.svggen.XmlWriter$IndentWriter: java.io.Writer proxied>;

        $r6 = staticinvoke <org.apache.batik.svggen.XmlWriter: char[] access$200()>();

        $i2 = staticinvoke <org.apache.batik.svggen.XmlWriter: int access$100()>();

        virtualinvoke $r5.<java.io.Writer: void write(char[],int,int)>($r6, 0, $i2);

        $i3 = staticinvoke <org.apache.batik.svggen.XmlWriter: int access$100()>();

        i4 = i4 - $i3;

        goto label3;

     label2:
        $r3 = r0.<org.apache.batik.svggen.XmlWriter$IndentWriter: java.io.Writer proxied>;

        $r4 = staticinvoke <org.apache.batik.svggen.XmlWriter: char[] access$200()>();

        virtualinvoke $r3.<java.io.Writer: void write(char[],int,int)>($r4, 0, i4);

        goto label4;

     label3:
        if i4 > 0 goto label1;

     label4:
        $i1 = r0.<org.apache.batik.svggen.XmlWriter$IndentWriter: int indentLevel>;

        r0.<org.apache.batik.svggen.XmlWriter$IndentWriter: int column> = $i1;

        return;
    }

    public java.io.Writer getProxied()
    {
        java.io.Writer $r1;
        org.apache.batik.svggen.XmlWriter$IndentWriter r0;

        r0 := @this: org.apache.batik.svggen.XmlWriter$IndentWriter;

        $r1 = r0.<org.apache.batik.svggen.XmlWriter$IndentWriter: java.io.Writer proxied>;

        return $r1;
    }

    public int getColumn()
    {
        int $i0;
        org.apache.batik.svggen.XmlWriter$IndentWriter r0;

        r0 := @this: org.apache.batik.svggen.XmlWriter$IndentWriter;

        $i0 = r0.<org.apache.batik.svggen.XmlWriter$IndentWriter: int column>;

        return $i0;
    }

    public void write(int) throws java.io.IOException
    {
        int $i0, $i1, i2;
        java.io.Writer $r1;
        org.apache.batik.svggen.XmlWriter$IndentWriter r0;

        r0 := @this: org.apache.batik.svggen.XmlWriter$IndentWriter;

        i2 := @parameter0: int;

        $i0 = r0.<org.apache.batik.svggen.XmlWriter$IndentWriter: int column>;

        $i1 = $i0 + 1;

        r0.<org.apache.batik.svggen.XmlWriter$IndentWriter: int column> = $i1;

        $r1 = r0.<org.apache.batik.svggen.XmlWriter$IndentWriter: java.io.Writer proxied>;

        virtualinvoke $r1.<java.io.Writer: void write(int)>(i2);

        return;
    }

    public void write(char[]) throws java.io.IOException
    {
        int $i0, $i1, $i2;
        java.io.Writer $r2;
        char[] r1;
        org.apache.batik.svggen.XmlWriter$IndentWriter r0;

        r0 := @this: org.apache.batik.svggen.XmlWriter$IndentWriter;

        r1 := @parameter0: char[];

        $i1 = r0.<org.apache.batik.svggen.XmlWriter$IndentWriter: int column>;

        $i0 = lengthof r1;

        $i2 = $i1 + $i0;

        r0.<org.apache.batik.svggen.XmlWriter$IndentWriter: int column> = $i2;

        $r2 = r0.<org.apache.batik.svggen.XmlWriter$IndentWriter: java.io.Writer proxied>;

        virtualinvoke $r2.<java.io.Writer: void write(char[])>(r1);

        return;
    }

    public void write(char[], int, int) throws java.io.IOException
    {
        int i0, $i1, $i2, i3;
        java.io.Writer $r2;
        char[] r1;
        org.apache.batik.svggen.XmlWriter$IndentWriter r0;

        r0 := @this: org.apache.batik.svggen.XmlWriter$IndentWriter;

        r1 := @parameter0: char[];

        i3 := @parameter1: int;

        i0 := @parameter2: int;

        $i1 = r0.<org.apache.batik.svggen.XmlWriter$IndentWriter: int column>;

        $i2 = $i1 + i0;

        r0.<org.apache.batik.svggen.XmlWriter$IndentWriter: int column> = $i2;

        $r2 = r0.<org.apache.batik.svggen.XmlWriter$IndentWriter: java.io.Writer proxied>;

        virtualinvoke $r2.<java.io.Writer: void write(char[],int,int)>(r1, i3, i0);

        return;
    }

    public void write(java.lang.String) throws java.io.IOException
    {
        int $i0, $i1, $i2;
        java.io.Writer $r2;
        org.apache.batik.svggen.XmlWriter$IndentWriter r0;
        java.lang.String r1;

        r0 := @this: org.apache.batik.svggen.XmlWriter$IndentWriter;

        r1 := @parameter0: java.lang.String;

        $i0 = r0.<org.apache.batik.svggen.XmlWriter$IndentWriter: int column>;

        $i1 = virtualinvoke r1.<java.lang.String: int length()>();

        $i2 = $i0 + $i1;

        r0.<org.apache.batik.svggen.XmlWriter$IndentWriter: int column> = $i2;

        $r2 = r0.<org.apache.batik.svggen.XmlWriter$IndentWriter: java.io.Writer proxied>;

        virtualinvoke $r2.<java.io.Writer: void write(java.lang.String)>(r1);

        return;
    }

    public void write(java.lang.String, int, int) throws java.io.IOException
    {
        int i0, $i1, $i2, i3;
        java.io.Writer $r2;
        org.apache.batik.svggen.XmlWriter$IndentWriter r0;
        java.lang.String r1;

        r0 := @this: org.apache.batik.svggen.XmlWriter$IndentWriter;

        r1 := @parameter0: java.lang.String;

        i3 := @parameter1: int;

        i0 := @parameter2: int;

        $i1 = r0.<org.apache.batik.svggen.XmlWriter$IndentWriter: int column>;

        $i2 = $i1 + i0;

        r0.<org.apache.batik.svggen.XmlWriter$IndentWriter: int column> = $i2;

        $r2 = r0.<org.apache.batik.svggen.XmlWriter$IndentWriter: java.io.Writer proxied>;

        virtualinvoke $r2.<java.io.Writer: void write(java.lang.String,int,int)>(r1, i3, i0);

        return;
    }

    public void flush() throws java.io.IOException
    {
        java.io.Writer $r1;
        org.apache.batik.svggen.XmlWriter$IndentWriter r0;

        r0 := @this: org.apache.batik.svggen.XmlWriter$IndentWriter;

        $r1 = r0.<org.apache.batik.svggen.XmlWriter$IndentWriter: java.io.Writer proxied>;

        virtualinvoke $r1.<java.io.Writer: void flush()>();

        return;
    }

    public void close() throws java.io.IOException
    {
        java.io.Writer $r1;
        int $i1;
        org.apache.batik.svggen.XmlWriter$IndentWriter r0;

        r0 := @this: org.apache.batik.svggen.XmlWriter$IndentWriter;

        $i1 = (int) -1;

        r0.<org.apache.batik.svggen.XmlWriter$IndentWriter: int column> = $i1;

        $r1 = r0.<org.apache.batik.svggen.XmlWriter$IndentWriter: java.io.Writer proxied>;

        virtualinvoke $r1.<java.io.Writer: void close()>();

        return;
    }
}
