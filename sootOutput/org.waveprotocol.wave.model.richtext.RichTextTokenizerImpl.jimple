public class org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl extends java.lang.Object implements org.waveprotocol.wave.model.richtext.RichTextTokenizer
{
    private static final org.waveprotocol.wave.model.util.StringMap fontWeightMap;
    private static final org.waveprotocol.wave.model.util.StringMap fontStyleMap;
    private static final org.waveprotocol.wave.model.util.StringMap textDecorationMap;
    private static final org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl$StyleTokenExtractor FONT_WEIGHT_HANDLER;
    private static final org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl$StyleTokenExtractor FONT_STYLE_HANDLER;
    private static final org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl$StyleTokenExtractor TEXT_DECORATION_HANDLER;
    private final java.util.List tokenList;
    private final int[] activeTokenCounts;
    protected final org.waveprotocol.wave.model.document.util.ElementStyleView document;
    private int tokenIndex;
    private boolean endBlockPending;
    private java.lang.Object root;
    private boolean mergeNextNewLine;
    static final boolean $assertionsDisabled;

    public void <init>(org.waveprotocol.wave.model.document.util.ElementStyleView)
    {
        org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type[] $r3;
        org.waveprotocol.wave.model.document.util.ElementStyleView r1;
        java.util.ArrayList $r8;
        org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl r0;
        int[] $r4, $r5, $r7;
        int $i0, $i1, i2, $i4;
        java.lang.Object $r6;

        r0 := @this: org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl;

        r1 := @parameter0: org.waveprotocol.wave.model.document.util.ElementStyleView;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i4 = (int) -1;

        r0.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: int tokenIndex> = $i4;

        r0.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: boolean endBlockPending> = 0;

        r0.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: java.lang.Object root> = null;

        r0.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: boolean mergeNextNewLine> = 0;

        r0.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: org.waveprotocol.wave.model.document.util.ElementStyleView document> = r1;

        $r8 = new java.util.ArrayList;

        specialinvoke $r8.<java.util.ArrayList: void <init>()>();

        r0.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: java.util.List tokenList> = $r8;

        $r3 = staticinvoke <org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type: org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type[] values()>();

        $i0 = lengthof $r3;

        $r4 = newarray (int)[$i0];

        r0.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: int[] activeTokenCounts> = $r4;

        i2 = 0;

     label1:
        $r5 = r0.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: int[] activeTokenCounts>;

        $i1 = lengthof $r5;

        if i2 >= $i1 goto label2;

        $r7 = r0.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: int[] activeTokenCounts>;

        $r7[i2] = 0;

        i2 = i2 + 1;

        goto label1;

     label2:
        $r6 = interfaceinvoke r1.<org.waveprotocol.wave.model.document.util.ElementStyleView: java.lang.Object getDocumentElement()>();

        virtualinvoke r0.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: void process(java.lang.Object)>($r6);

        return;
    }

    private void <init>(org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl)
    {
        java.util.ArrayList $r11;
        org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl r0, r1;
        int[] $r2, $r3, $r4, $r9, $r10;
        int $i0, $i1, $i2, $i3, i4, $i6;
        boolean $z0, $z1;
        org.waveprotocol.wave.model.document.util.ElementStyleView $r7;
        java.util.List $r6;
        java.lang.Object $r8;

        r0 := @this: org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl;

        r1 := @parameter0: org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i6 = (int) -1;

        r0.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: int tokenIndex> = $i6;

        r0.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: boolean endBlockPending> = 0;

        r0.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: java.lang.Object root> = null;

        r0.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: boolean mergeNextNewLine> = 0;

        $r2 = r1.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: int[] activeTokenCounts>;

        $i0 = lengthof $r2;

        $r3 = newarray (int)[$i0];

        r0.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: int[] activeTokenCounts> = $r3;

        i4 = 0;

     label1:
        $r4 = r1.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: int[] activeTokenCounts>;

        $i1 = lengthof $r4;

        if i4 >= $i1 goto label2;

        $r10 = r0.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: int[] activeTokenCounts>;

        $r9 = r1.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: int[] activeTokenCounts>;

        $i3 = $r9[i4];

        $r10[i4] = $i3;

        i4 = i4 + 1;

        goto label1;

     label2:
        $r11 = new java.util.ArrayList;

        $r6 = r1.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: java.util.List tokenList>;

        specialinvoke $r11.<java.util.ArrayList: void <init>(java.util.Collection)>($r6);

        r0.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: java.util.List tokenList> = $r11;

        $r7 = r1.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: org.waveprotocol.wave.model.document.util.ElementStyleView document>;

        r0.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: org.waveprotocol.wave.model.document.util.ElementStyleView document> = $r7;

        $i2 = r1.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: int tokenIndex>;

        r0.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: int tokenIndex> = $i2;

        $z0 = r1.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: boolean endBlockPending>;

        r0.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: boolean endBlockPending> = $z0;

        $r8 = r1.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: java.lang.Object root>;

        r0.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: java.lang.Object root> = $r8;

        $z1 = r1.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: boolean mergeNextNewLine>;

        r0.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: boolean mergeNextNewLine> = $z1;

        return;
    }

    public org.waveprotocol.wave.model.richtext.RichTextTokenizer copy()
    {
        org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl $r0, r1;

        r1 := @this: org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl;

        $r0 = new org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl;

        specialinvoke $r0.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: void <init>(org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl)>(r1);

        return $r0;
    }

    public boolean hasNext()
    {
        java.util.List $r1;
        org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl r0;
        int $i0, $i1, $i2;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl;

        $i0 = r0.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: int tokenIndex>;

        $r1 = r0.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: java.util.List tokenList>;

        $i1 = interfaceinvoke $r1.<java.util.List: int size()>();

        $i2 = $i1 - 1;

        if $i0 >= $i2 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type next()
    {
        org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl$Token $r1;
        org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl r0;
        int $i0, $i1;
        java.util.NoSuchElementException $r3;
        org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type $r2;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl;

        $z0 = virtualinvoke r0.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: boolean hasNext()>();

        if $z0 != 0 goto label1;

        $r3 = new java.util.NoSuchElementException;

        specialinvoke $r3.<java.util.NoSuchElementException: void <init>()>();

        throw $r3;

     label1:
        $i0 = r0.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: int tokenIndex>;

        $i1 = $i0 + 1;

        r0.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: int tokenIndex> = $i1;

        $r1 = specialinvoke r0.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl$Token getCurrentToken()>();

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl$Token: org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type getType()>();

        return $r2;
    }

    public org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type getCurrentType()
    {
        org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl$Token $r1;
        org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl r0;
        org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type $r2;

        r0 := @this: org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl;

        $r1 = specialinvoke r0.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl$Token getCurrentToken()>();

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl$Token: org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type getType()>();

        return $r2;
    }

    public java.lang.String getData()
    {
        org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl$Token $r1;
        java.lang.String $r2;
        org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl r0;

        r0 := @this: org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl;

        $r1 = specialinvoke r0.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl$Token getCurrentToken()>();

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl$Token: java.lang.String getData()>();

        return $r2;
    }

    private org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl$Token getCurrentToken()
    {
        java.lang.IllegalStateException $r5;
        org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl$Token $r4;
        java.util.List $r1, $r2;
        org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl r0;
        int $i0, $i1, $i2;
        java.lang.Object $r3;

        r0 := @this: org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl;

        $i0 = r0.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: int tokenIndex>;

        $r1 = r0.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: java.util.List tokenList>;

        $i1 = interfaceinvoke $r1.<java.util.List: int size()>();

        if $i0 < $i1 goto label1;

        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>("No token available.");

        throw $r5;

     label1:
        $r2 = r0.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: java.util.List tokenList>;

        $i2 = r0.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: int tokenIndex>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>($i2);

        $r4 = (org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl$Token) $r3;

        return $r4;
    }

    protected final void process(java.lang.Object)
    {
        java.lang.AssertionError $r13;
        org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl r1;
        int[] $r5, $r6;
        int $i0, $i1, i2, $i4;
        boolean $z0;
        org.waveprotocol.wave.model.document.util.ElementStyleView $r4, $r8;
        java.lang.IllegalArgumentException $r12;
        java.util.List $r2;
        java.lang.Object r0, $r3, r10, r11;

        r1 := @this: org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl;

        r0 := @parameter0: java.lang.Object;

        if r0 != null goto label1;

        $r12 = new java.lang.IllegalArgumentException;

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r12;

     label1:
        r1.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: java.lang.Object root> = r0;

        $r2 = r1.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: java.util.List tokenList>;

        interfaceinvoke $r2.<java.util.List: void clear()>();

        $i4 = (int) -1;

        r1.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: int tokenIndex> = $i4;

        r10 = null;

        $r4 = r1.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: org.waveprotocol.wave.model.document.util.ElementStyleView document>;

        $r3 = r1.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: java.lang.Object root>;

        r11 = interfaceinvoke $r4.<org.waveprotocol.wave.model.document.util.ElementStyleView: java.lang.Object getFirstChild(java.lang.Object)>($r3);

     label2:
        if r11 == null goto label3;

        specialinvoke r1.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: void processNode(java.lang.Object,java.lang.Object)>(r11, r10);

        r10 = r11;

        $r8 = r1.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: org.waveprotocol.wave.model.document.util.ElementStyleView document>;

        r11 = interfaceinvoke $r8.<org.waveprotocol.wave.model.document.util.ElementStyleView: java.lang.Object getNextSibling(java.lang.Object)>(r11);

        goto label2;

     label3:
        i2 = 0;

     label4:
        $r5 = r1.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: int[] activeTokenCounts>;

        $i0 = lengthof $r5;

        if i2 >= $i0 goto label6;

        $z0 = <org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: boolean $assertionsDisabled>;

        if $z0 != 0 goto label5;

        $r6 = r1.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: int[] activeTokenCounts>;

        $i1 = $r6[i2];

        if $i1 == 0 goto label5;

        $r13 = new java.lang.AssertionError;

        specialinvoke $r13.<java.lang.AssertionError: void <init>()>();

        throw $r13;

     label5:
        i2 = i2 + 1;

        goto label4;

     label6:
        return;
    }

    private void processNode(java.lang.Object, java.lang.Object)
    {
        org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl r0;
        org.waveprotocol.wave.model.document.util.ElementStyleView $r2;
        java.lang.Object r1, $r3, $r4, r5;

        r0 := @this: org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl;

        r1 := @parameter0: java.lang.Object;

        r5 := @parameter1: java.lang.Object;

        $r2 = r0.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: org.waveprotocol.wave.model.document.util.ElementStyleView document>;

        $r3 = interfaceinvoke $r2.<org.waveprotocol.wave.model.document.util.ElementStyleView: java.lang.Object asText(java.lang.Object)>(r1);

        if $r3 == null goto label1;

        virtualinvoke r0.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: void processTextNode(java.lang.Object,java.lang.Object)>($r3, r5);

        return;

     label1:
        $r4 = specialinvoke r0.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: java.lang.Object asElement(java.lang.Object)>(r1);

        if $r4 == null goto label2;

        specialinvoke r0.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: void processElement(java.lang.Object,java.lang.Object)>($r4, r5);

     label2:
        return;
    }

    final void processTextNode(java.lang.Object, java.lang.Object)
    {
        org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl r0;
        java.lang.Object r1, r2;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $z0 = r0.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: boolean endBlockPending>;

        if $z0 == 0 goto label1;

        specialinvoke r0.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: boolean maybeInsertNewline()>();

        r0.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: boolean endBlockPending> = 0;

     label1:
        virtualinvoke r0.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: void processTextNodeInner(java.lang.Object,java.lang.Object)>(r1, r2);

        return;
    }

    protected void processTextNodeInner(java.lang.Object, java.lang.Object)
    {
        org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl r0;
        org.waveprotocol.wave.model.document.util.ElementStyleView $r2;
        java.lang.Object r1, r4;
        java.lang.String $r3;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl;

        r1 := @parameter0: java.lang.Object;

        r4 := @parameter1: java.lang.Object;

        $r2 = r0.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: org.waveprotocol.wave.model.document.util.ElementStyleView document>;

        $r3 = interfaceinvoke $r2.<org.waveprotocol.wave.model.document.util.ElementStyleView: java.lang.String getData(java.lang.Object)>(r1);

        $z0 = virtualinvoke $r3.<java.lang.String: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        virtualinvoke r0.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: void addTextToken(java.lang.String)>($r3);

     label1:
        return;
    }

    final void addTextToken(java.lang.String)
    {
        org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl r2;
        int $i0, $i1, $i2, $i4, $i5, $i6, i7, $i8, $i9, $i10;
        java.lang.String r1, $r5, $r11;
        org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl$Token $r14, $r15, $r17;
        char $c3;
        org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type $r4, $r7, $r10;
        java.lang.StringBuilder r12, $r13, $r16;

        r2 := @this: org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl;

        r1 := @parameter0: java.lang.String;

        $r13 = new java.lang.StringBuilder;

        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        specialinvoke $r13.<java.lang.StringBuilder: void <init>(int)>($i0);

        r12 = $r13;

        i7 = 0;

     label1:
        $i1 = virtualinvoke r1.<java.lang.String: int length()>();

        if i7 >= $i1 goto label7;

        $c3 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i7);

        $i8 = (int) $c3;

        if $i8 != 160 goto label2;

        virtualinvoke r12.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

        goto label6;

     label2:
        $i9 = (int) $c3;

        if $i9 != 9 goto label3;

        virtualinvoke r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    ");

        goto label6;

     label3:
        $i10 = (int) $c3;

        if $i10 != 10 goto label5;

        $i4 = virtualinvoke r12.<java.lang.StringBuilder: int length()>();

        if $i4 == 0 goto label4;

        $r14 = new org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl$Token;

        $r10 = <org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type: org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type TEXT>;

        $r11 = virtualinvoke r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl$Token: void <init>(org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type,java.lang.String)>($r10, $r11);

        specialinvoke r2.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: void addToken(org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl$Token)>($r14);

     label4:
        $r15 = new org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl$Token;

        $r7 = <org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type: org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type NEW_LINE>;

        specialinvoke $r15.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl$Token: void <init>(org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type)>($r7);

        specialinvoke r2.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: void addToken(org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl$Token)>($r15);

        $r16 = new java.lang.StringBuilder;

        $i5 = virtualinvoke r1.<java.lang.String: int length()>();

        $i6 = $i5 - i7;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>(int)>($i6);

        r12 = $r16;

        goto label6;

     label5:
        virtualinvoke r12.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c3);

     label6:
        i7 = i7 + 1;

        goto label1;

     label7:
        $i2 = virtualinvoke r12.<java.lang.StringBuilder: int length()>();

        if $i2 == 0 goto label8;

        $r17 = new org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl$Token;

        $r4 = <org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type: org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type TEXT>;

        $r5 = virtualinvoke r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r17.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl$Token: void <init>(org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type,java.lang.String)>($r4, $r5);

        specialinvoke r2.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: void addToken(org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl$Token)>($r17);

     label8:
        return;
    }

    private void processElement(java.lang.Object, java.lang.Object)
    {
        org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl r0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, z15, z16;
        org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl$Token $r8, $r10, $r12, $r15, $r17, $r19;
        org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type $r6, $r11, $r13, $r14, $r16, $r18, $r20, r25;
        java.util.ArrayList $r5;
        int $i0, $i1;
        java.lang.String $r3, $r4;
        org.waveprotocol.wave.model.document.util.ElementStyleView $r2, $r9, $r23;
        java.lang.Object r1, $r7, r21, r22, r24;

        r0 := @this: org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl;

        r1 := @parameter0: java.lang.Object;

        r21 := @parameter1: java.lang.Object;

        $r2 = r0.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: org.waveprotocol.wave.model.document.util.ElementStyleView document>;

        $r3 = interfaceinvoke $r2.<org.waveprotocol.wave.model.document.util.ElementStyleView: java.lang.String getTagName(java.lang.Object)>(r1);

        $r4 = virtualinvoke $r3.<java.lang.String: java.lang.String toLowerCase()>();

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        z15 = 0;

        z16 = 0;

        $z0 = staticinvoke <org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: boolean isBlockElement(java.lang.String)>($r4);

        if $z0 == 0 goto label02;

        $z13 = staticinvoke <org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: boolean isListItem(java.lang.String)>($r4);

        if $z13 == 0 goto label01;

        $r19 = new org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl$Token;

        $r20 = <org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type: org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type LIST_ITEM>;

        specialinvoke $r19.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl$Token: void <init>(org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type)>($r20);

        specialinvoke r0.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: void addToken(org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl$Token)>($r19);

        goto label09;

     label01:
        $z14 = specialinvoke r0.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: boolean ignorableBlock(java.lang.Object,java.lang.String)>(r1, $r4);

        if $z14 != 0 goto label09;

        specialinvoke r0.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: boolean maybeInsertNewline()>();

        z15 = 1;

        z16 = 1;

        goto label09;

     label02:
        $z1 = staticinvoke <org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: boolean isNewline(java.lang.String)>($r4);

        if $z1 == 0 goto label03;

        $z12 = specialinvoke r0.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: boolean isLastLinebreak(java.lang.Object)>(r1);

        if $z12 != 0 goto label09;

        $r17 = new org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl$Token;

        $r18 = <org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type: org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type NEW_LINE>;

        specialinvoke $r17.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl$Token: void <init>(org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type)>($r18);

        specialinvoke r0.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: void addToken(org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl$Token)>($r17);

        r0.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: boolean mergeNextNewLine> = 0;

        goto label09;

     label03:
        $z2 = staticinvoke <org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: boolean isHeading(java.lang.String)>($r4);

        if $z2 == 0 goto label04;

        $r15 = new org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl$Token;

        $r16 = <org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type: org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type NEW_LINE>;

        specialinvoke $r15.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl$Token: void <init>(org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type,java.lang.String)>($r16, $r4);

        specialinvoke r0.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: void addToken(org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl$Token)>($r15);

        z15 = 1;

        z16 = 1;

        goto label09;

     label04:
        $z3 = staticinvoke <org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: boolean isList(java.lang.String)>($r4);

        if $z3 == 0 goto label05;

        $r14 = specialinvoke r0.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type handleListElement(java.lang.Object,java.lang.String)>(r1, $r4);

        specialinvoke r0.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: void putIfNotNull(java.util.List,java.lang.Object)>($r5, $r14);

        z15 = 0;

        z16 = 1;

        goto label09;

     label05:
        $z4 = staticinvoke <org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: boolean isTableRelated(java.lang.String)>($r4);

        if $z4 == 0 goto label08;

        $z9 = staticinvoke <org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: boolean isTable(java.lang.String)>($r4);

        if $z9 == 0 goto label06;

        $r12 = new org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl$Token;

        $r13 = <org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type: org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type NEW_LINE>;

        specialinvoke $r12.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl$Token: void <init>(org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type)>($r13);

        specialinvoke r0.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: void addToken(org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl$Token)>($r12);

        goto label09;

     label06:
        $z10 = staticinvoke <org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: boolean isTableRow(java.lang.String)>($r4);

        if $z10 == 0 goto label07;

        z15 = 1;

        z16 = 1;

        goto label09;

     label07:
        $z11 = staticinvoke <org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: boolean isTableCell(java.lang.String)>($r4);

        if $z11 == 0 goto label09;

        $r10 = new org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl$Token;

        $r11 = <org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type: org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type TEXT>;

        specialinvoke $r10.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl$Token: void <init>(org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type,java.lang.String)>($r11, " ");

        specialinvoke r0.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: void addToken(org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl$Token)>($r10);

        goto label09;

     label08:
        $r6 = specialinvoke r0.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type handleLinkElement(java.lang.Object,java.lang.String)>(r1, $r4);

        specialinvoke r0.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: void putIfNotNull(java.util.List,java.lang.Object)>($r5, $r6);

     label09:
        specialinvoke r0.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: void handleStyleElements(java.lang.Object,java.lang.String,java.util.List)>(r1, $r4, $r5);

        r22 = null;

        $r23 = r0.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: org.waveprotocol.wave.model.document.util.ElementStyleView document>;

        r24 = interfaceinvoke $r23.<org.waveprotocol.wave.model.document.util.ElementStyleView: java.lang.Object getFirstChild(java.lang.Object)>(r1);

     label10:
        if r24 == null goto label11;

        specialinvoke r0.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: void processNode(java.lang.Object,java.lang.Object)>(r24, r22);

        r22 = r24;

        $r9 = r0.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: org.waveprotocol.wave.model.document.util.ElementStyleView document>;

        r24 = interfaceinvoke $r9.<org.waveprotocol.wave.model.document.util.ElementStyleView: java.lang.Object getNextSibling(java.lang.Object)>(r24);

        goto label10;

     label11:
        $z5 = interfaceinvoke $r5.<java.util.List: boolean isEmpty()>();

        if $z5 != 0 goto label12;

        $i0 = interfaceinvoke $r5.<java.util.List: int size()>();

        $i1 = $i0 - 1;

        $r7 = interfaceinvoke $r5.<java.util.List: java.lang.Object remove(int)>($i1);

        r25 = (org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type) $r7;

        $r8 = new org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl$Token;

        specialinvoke $r8.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl$Token: void <init>(org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type)>(r25);

        specialinvoke r0.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: void addToken(org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl$Token)>($r8);

        specialinvoke r0.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: boolean decrementTypeCounter(org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type)>(r25);

        goto label11;

     label12:
        $z6 = r0.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: boolean endBlockPending>;

        $z7 = $z6 | z16;

        r0.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: boolean endBlockPending> = $z7;

        if z15 == 0 goto label13;

        $z8 = r0.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: boolean endBlockPending>;

        if $z8 == 0 goto label13;

        specialinvoke r0.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: boolean maybeInsertNewline()>();

        r0.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: boolean endBlockPending> = 0;

     label13:
        return;
    }

    private void putIfNotNull(java.util.List, java.lang.Object)
    {
        java.lang.Object r0;
        java.util.List r1;
        org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl r2;

        r2 := @this: org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl;

        r1 := @parameter0: java.util.List;

        r0 := @parameter1: java.lang.Object;

        if r0 == null goto label1;

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(r0);

     label1:
        return;
    }

    private boolean maybeInsertNewline()
    {
        org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl$Token $r1;
        org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl r0;
        org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type $r2;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl;

        $z0 = r0.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: boolean mergeNextNewLine>;

        if $z0 != 0 goto label1;

        $r1 = new org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl$Token;

        $r2 = <org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type: org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type NEW_LINE>;

        specialinvoke $r1.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl$Token: void <init>(org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type)>($r2);

        specialinvoke r0.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: void addToken(org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl$Token)>($r1);

        return 1;

     label1:
        return 0;
    }

    private void handleStyleElements(java.lang.Object, java.lang.String, java.util.List)
    {
        org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl r0;
        org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl$StyleTokenExtractor $r4, $r5, $r6;
        java.lang.String r2, $r8, $r14, $r20;
        boolean $z0, $z1, $z2;
        org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl$Token $r9, $r15, $r21;
        org.waveprotocol.wave.model.document.util.ElementStyleView $r7, $r13, $r19;
        org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type $r10, $r11, $r12, $r16, $r17, $r18, $r22, $r23, $r24;
        java.util.List r3;
        java.lang.Object r1;

        r0 := @this: org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.util.List;

        $r4 = <org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl$StyleTokenExtractor FONT_WEIGHT_HANDLER>;

        specialinvoke r0.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: void maybeExtractStyleToken(java.lang.Object,java.lang.String,java.util.List,org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl$StyleTokenExtractor)>(r1, r2, r3, $r4);

        $r5 = <org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl$StyleTokenExtractor FONT_STYLE_HANDLER>;

        specialinvoke r0.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: void maybeExtractStyleToken(java.lang.Object,java.lang.String,java.util.List,org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl$StyleTokenExtractor)>(r1, r2, r3, $r5);

        $r6 = <org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl$StyleTokenExtractor TEXT_DECORATION_HANDLER>;

        specialinvoke r0.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: void maybeExtractStyleToken(java.lang.Object,java.lang.String,java.util.List,org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl$StyleTokenExtractor)>(r1, r2, r3, $r6);

        $z0 = specialinvoke r0.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: boolean isColor(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r19 = r0.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: org.waveprotocol.wave.model.document.util.ElementStyleView document>;

        $r20 = interfaceinvoke $r19.<org.waveprotocol.wave.model.document.util.ElementStyleView: java.lang.String getStylePropertyValue(java.lang.Object,java.lang.String)>(r1, "color");

        $r21 = new org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl$Token;

        $r22 = <org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type: org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type STYLE_COLOR_START>;

        specialinvoke $r21.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl$Token: void <init>(org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type,java.lang.String)>($r22, $r20);

        $r23 = <org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type: org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type STYLE_COLOR_END>;

        specialinvoke r0.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: void addTokenOrIncrement(boolean,org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl$Token,org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type)>(1, $r21, $r23);

        $r24 = <org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type: org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type STYLE_COLOR_END>;

        interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>($r24);

     label1:
        $z1 = specialinvoke r0.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: boolean isBackgroundColor(java.lang.Object)>(r1);

        if $z1 == 0 goto label2;

        $r13 = r0.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: org.waveprotocol.wave.model.document.util.ElementStyleView document>;

        $r14 = interfaceinvoke $r13.<org.waveprotocol.wave.model.document.util.ElementStyleView: java.lang.String getStylePropertyValue(java.lang.Object,java.lang.String)>(r1, "backgroundColor");

        $r15 = new org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl$Token;

        $r16 = <org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type: org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type STYLE_BG_COLOR_START>;

        specialinvoke $r15.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl$Token: void <init>(org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type,java.lang.String)>($r16, $r14);

        $r17 = <org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type: org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type STYLE_BG_COLOR_END>;

        specialinvoke r0.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: void addTokenOrIncrement(boolean,org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl$Token,org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type)>(1, $r15, $r17);

        $r18 = <org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type: org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type STYLE_BG_COLOR_END>;

        interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>($r18);

     label2:
        $z2 = specialinvoke r0.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: boolean isFontFamily(java.lang.Object)>(r1);

        if $z2 == 0 goto label3;

        $r7 = r0.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: org.waveprotocol.wave.model.document.util.ElementStyleView document>;

        $r8 = interfaceinvoke $r7.<org.waveprotocol.wave.model.document.util.ElementStyleView: java.lang.String getStylePropertyValue(java.lang.Object,java.lang.String)>(r1, "fontFamily");

        $r9 = new org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl$Token;

        $r10 = <org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type: org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type STYLE_FONT_FAMILY_START>;

        specialinvoke $r9.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl$Token: void <init>(org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type,java.lang.String)>($r10, $r8);

        $r11 = <org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type: org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type STYLE_FONT_FAMILY_END>;

        specialinvoke r0.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: void addTokenOrIncrement(boolean,org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl$Token,org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type)>(1, $r9, $r11);

        $r12 = <org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type: org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type STYLE_FONT_FAMILY_END>;

        interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>($r12);

     label3:
        return;
    }

    private org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type handleLinkElement(java.lang.Object, java.lang.String)
    {
        org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl$Token $r5;
        org.waveprotocol.wave.model.document.util.ElementStyleView $r3;
        org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type $r6, $r7, $r8;
        org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl r1;
        java.lang.Object r2;
        java.lang.String r0, $r4;
        boolean $z0;

        r1 := @this: org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl;

        r2 := @parameter0: java.lang.Object;

        r0 := @parameter1: java.lang.String;

        $z0 = staticinvoke <org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: boolean isLink(java.lang.String)>(r0);

        if $z0 == 0 goto label1;

        $r3 = r1.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: org.waveprotocol.wave.model.document.util.ElementStyleView document>;

        $r4 = interfaceinvoke $r3.<org.waveprotocol.wave.model.document.util.ElementStyleView: java.lang.String getAttribute(java.lang.Object,java.lang.String)>(r2, "href");

        if $r4 == null goto label1;

        $r5 = new org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl$Token;

        $r6 = <org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type: org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type LINK_START>;

        specialinvoke $r5.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl$Token: void <init>(org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type,java.lang.String)>($r6, $r4);

        $r7 = <org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type: org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type LINK_END>;

        specialinvoke r1.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: void addTokenOrIncrement(org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl$Token,org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type)>($r5, $r7);

        $r8 = <org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type: org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type LINK_END>;

        return $r8;

     label1:
        return null;
    }

    private org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type handleListElement(java.lang.Object, java.lang.String)
    {
        org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl$Token $r2, $r6;
        org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type $r3, $r4, $r5, $r7, $r8, $r9;
        org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl r1;
        java.lang.Object r10;
        java.lang.String r0;
        boolean $z0, $z1;

        r1 := @this: org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl;

        r10 := @parameter0: java.lang.Object;

        r0 := @parameter1: java.lang.String;

        $z0 = staticinvoke <org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: boolean isOrderedList(java.lang.String)>(r0);

        if $z0 == 0 goto label1;

        $r6 = new org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl$Token;

        $r7 = <org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type: org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type ORDERED_LIST_START>;

        specialinvoke $r6.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl$Token: void <init>(org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type)>($r7);

        $r8 = <org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type: org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type ORDERED_LIST_END>;

        specialinvoke r1.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: void addTokenOrIncrement(boolean,org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl$Token,org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type)>(1, $r6, $r8);

        $r9 = <org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type: org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type ORDERED_LIST_END>;

        return $r9;

     label1:
        $z1 = staticinvoke <org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: boolean isUnorderedList(java.lang.String)>(r0);

        if $z1 == 0 goto label2;

        $r2 = new org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl$Token;

        $r3 = <org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type: org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type UNORDERED_LIST_START>;

        specialinvoke $r2.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl$Token: void <init>(org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type)>($r3);

        $r4 = <org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type: org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type UNORDERED_LIST_END>;

        specialinvoke r1.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: void addTokenOrIncrement(boolean,org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl$Token,org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type)>(1, $r2, $r4);

        $r5 = <org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type: org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type UNORDERED_LIST_END>;

        return $r5;

     label2:
        return null;
    }

    private void addToken(org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl$Token)
    {
        org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl$Token r0;
        org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type $r1, $r3;
        java.util.List $r6;
        org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl r2;
        org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type$TypeGroup $r4, $r5;
        boolean $z0, $z1;

        r2 := @this: org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl;

        r0 := @parameter0: org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl$Token;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl$Token: org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type getType()>();

        $z0 = virtualinvoke $r1.<org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type: boolean isStructural()>();

        if $z0 == 0 goto label3;

        $r3 = virtualinvoke r0.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl$Token: org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type getType()>();

        $r4 = virtualinvoke $r3.<org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type: org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type$TypeGroup group()>();

        $r5 = <org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type$TypeGroup: org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type$TypeGroup BLOCK>;

        if $r4 != $r5 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        r2.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: boolean mergeNextNewLine> = $z1;

     label3:
        $r6 = r2.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: java.util.List tokenList>;

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>(r0);

        return;
    }

    private void addTokenOrIncrement(org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl$Token, org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type)
    {
        org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl$Token r1;
        org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl r0;
        org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type r2;

        r0 := @this: org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl;

        r1 := @parameter0: org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl$Token;

        r2 := @parameter1: org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type;

        specialinvoke r0.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: void addTokenOrIncrement(boolean,org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl$Token,org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type)>(0, r1, r2);

        return;
    }

    private void addTokenOrIncrement(boolean, org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl$Token, org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type)
    {
        org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl$Token r1;
        org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl r0;
        org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type r2;
        boolean z0, $z1;

        r0 := @this: org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl;

        z0 := @parameter0: boolean;

        r1 := @parameter1: org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl$Token;

        r2 := @parameter2: org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type;

        if z0 != 0 goto label1;

        $z1 = specialinvoke r0.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: boolean isTypeInUse(org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type)>(r2);

        if $z1 != 0 goto label2;

     label1:
        specialinvoke r0.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: void addToken(org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl$Token)>(r1);

     label2:
        specialinvoke r0.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: void incrementTypeCounter(org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type)>(r2);

        return;
    }

    private java.lang.Object asElement(java.lang.Object)
    {
        org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl r1;
        org.waveprotocol.wave.model.document.util.ElementStyleView $r2;
        java.lang.Object r0, $r3;

        r1 := @this: org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl;

        r0 := @parameter0: java.lang.Object;

        if r0 == null goto label1;

        $r2 = r1.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: org.waveprotocol.wave.model.document.util.ElementStyleView document>;

        $r3 = interfaceinvoke $r2.<org.waveprotocol.wave.model.document.util.ElementStyleView: java.lang.Object asElement(java.lang.Object)>(r0);

        return $r3;

     label1:
        return null;
    }

    private boolean isLastLinebreak(java.lang.Object)
    {
        org.waveprotocol.wave.model.document.util.ElementStyleView $r2, $r5;
        org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl r0;
        int $i0;
        java.lang.Object r1, $r3, $r4;
        java.lang.String $r6;
        boolean $z0, $z1;

        r0 := @this: org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: org.waveprotocol.wave.model.document.util.ElementStyleView document>;

        $r3 = interfaceinvoke $r2.<org.waveprotocol.wave.model.document.util.ElementStyleView: java.lang.Object getNextSibling(java.lang.Object)>(r1);

        if $r3 == null goto label2;

        $r4 = specialinvoke r0.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: java.lang.Object asElement(java.lang.Object)>($r3);

        if $r4 == null goto label1;

        $r5 = r0.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: org.waveprotocol.wave.model.document.util.ElementStyleView document>;

        $r6 = interfaceinvoke $r5.<org.waveprotocol.wave.model.document.util.ElementStyleView: java.lang.String getTagName(java.lang.Object)>($r4);

        $z0 = staticinvoke <org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: boolean isBlockElement(java.lang.String)>($r6);

        if $z0 != 0 goto label2;

     label1:
        return 0;

     label2:
        $i0 = specialinvoke r0.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: int getDepthFromBlock(java.lang.Object)>(r1);

        if $i0 != 1 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        return $z1;
    }

    private boolean ignorableBlock(java.lang.Object, java.lang.String)
    {
        org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl r2;
        org.waveprotocol.wave.model.document.util.ElementStyleView $r4;
        java.lang.Object r3, $r5;
        java.lang.String r0, $r1;
        boolean $z0;

        r2 := @this: org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl;

        r3 := @parameter0: java.lang.Object;

        r0 := @parameter1: java.lang.String;

        $r1 = "div";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r0);

        if $z0 == 0 goto label1;

        $r4 = r2.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: org.waveprotocol.wave.model.document.util.ElementStyleView document>;

        $r5 = interfaceinvoke $r4.<org.waveprotocol.wave.model.document.util.ElementStyleView: java.lang.Object getFirstChild(java.lang.Object)>(r3);

        if $r5 != null goto label1;

        return 1;

     label1:
        return 0;
    }

    private int getDepthFromBlock(java.lang.Object)
    {
        org.waveprotocol.wave.model.document.util.ElementStyleView $r2, $r4, $r6;
        org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl r0;
        int i0;
        java.lang.Object r1, $r3, r7;
        java.lang.String $r5;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl;

        r1 := @parameter0: java.lang.Object;

        i0 = 1;

        $r2 = r0.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: org.waveprotocol.wave.model.document.util.ElementStyleView document>;

        r7 = interfaceinvoke $r2.<org.waveprotocol.wave.model.document.util.ElementStyleView: java.lang.Object getParentElement(java.lang.Object)>(r1);

     label1:
        if r7 == null goto label3;

        $r3 = r0.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: java.lang.Object root>;

        if r7 == $r3 goto label3;

        $r4 = r0.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: org.waveprotocol.wave.model.document.util.ElementStyleView document>;

        $r5 = interfaceinvoke $r4.<org.waveprotocol.wave.model.document.util.ElementStyleView: java.lang.String getTagName(java.lang.Object)>(r7);

        $z0 = staticinvoke <org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: boolean isBlockElement(java.lang.String)>($r5);

        if $z0 == 0 goto label2;

        goto label3;

     label2:
        i0 = i0 + 1;

        $r6 = r0.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: org.waveprotocol.wave.model.document.util.ElementStyleView document>;

        r7 = interfaceinvoke $r6.<org.waveprotocol.wave.model.document.util.ElementStyleView: java.lang.Object getParentElement(java.lang.Object)>(r7);

        goto label1;

     label3:
        return i0;
    }

    private boolean isTypeInUse(org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type)
    {
        org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl r0;
        int[] $r2;
        int $i0, $i1;
        org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type r1;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl;

        r1 := @parameter0: org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type;

        $r2 = r0.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: int[] activeTokenCounts>;

        $i0 = virtualinvoke r1.<org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type: int ordinal()>();

        $i1 = $r2[$i0];

        if $i1 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private void incrementTypeCounter(org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type)
    {
        org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl r0;
        int[] $r2;
        int $i0, $i1, $i2;
        org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type r1;

        r0 := @this: org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl;

        r1 := @parameter0: org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type;

        $r2 = r0.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: int[] activeTokenCounts>;

        $i0 = virtualinvoke r1.<org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type: int ordinal()>();

        $i1 = $r2[$i0];

        $i2 = $i1 + 1;

        $r2[$i0] = $i2;

        return;
    }

    private boolean decrementTypeCounter(org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type)
    {
        java.lang.AssertionError $r3;
        org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type r1;
        org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl r0;
        int[] $r2;
        int $i0, $i1, $i2;
        boolean $z0, $z1;

        r0 := @this: org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl;

        r1 := @parameter0: org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type;

        $r2 = r0.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: int[] activeTokenCounts>;

        $i0 = virtualinvoke r1.<org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type: int ordinal()>();

        $i1 = $r2[$i0];

        $i2 = $i1 - 1;

        $r2[$i0] = $i2;

        $z0 = <org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if $i2 >= 0 goto label1;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label1:
        if $i2 != 0 goto label2;

        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    private static boolean isBlockElement(java.lang.String)
    {
        java.lang.String r0, $r1, $r2;
        boolean $z0, $z1, $z2, $z3;

        r0 := @parameter0: java.lang.String;

        $r1 = "p";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r0);

        if $z0 != 0 goto label1;

        $r2 = "div";

        $z1 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r0);

        if $z1 != 0 goto label1;

        $z2 = staticinvoke <org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: boolean isListItem(java.lang.String)>(r0);

        if $z2 == 0 goto label2;

     label1:
        $z3 = 1;

        goto label3;

     label2:
        $z3 = 0;

     label3:
        return $z3;
    }

    private static boolean isNewline(java.lang.String)
    {
        java.lang.String r0, $r1;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        $r1 = "br";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r0);

        return $z0;
    }

    private void maybeExtractStyleToken(java.lang.Object, java.lang.String, java.util.List, org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl$StyleTokenExtractor)
    {
        org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl$Token $r5;
        org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type $r6, $r7, $r9;
        java.util.List r8;
        org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl r0;
        org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl$StyleTokenExtractor r3;
        java.lang.Object r1;
        java.lang.String r2, $r4;

        r0 := @this: org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.String;

        r8 := @parameter2: java.util.List;

        r3 := @parameter3: org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl$StyleTokenExtractor;

        $r4 = specialinvoke r0.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: java.lang.String getStyleProperty(java.lang.Object,java.lang.String,org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl$StyleTokenExtractor)>(r1, r2, r3);

        if $r4 == null goto label1;

        $r5 = new org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl$Token;

        $r6 = r3.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl$StyleTokenExtractor: org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type tokenStartType>;

        specialinvoke $r5.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl$Token: void <init>(org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type,java.lang.String)>($r6, $r4);

        $r7 = r3.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl$StyleTokenExtractor: org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type tokenEndType>;

        specialinvoke r0.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: void addTokenOrIncrement(boolean,org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl$Token,org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type)>(1, $r5, $r7);

        $r9 = r3.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl$StyleTokenExtractor: org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type tokenEndType>;

        interfaceinvoke r8.<java.util.List: boolean add(java.lang.Object)>($r9);

     label1:
        return;
    }

    private java.lang.String getStyleProperty(java.lang.Object, java.lang.String, org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl$StyleTokenExtractor)
    {
        org.waveprotocol.wave.model.document.util.ElementStyleView $r4;
        org.waveprotocol.wave.model.util.StringMap $r8, $r9;
        org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl r0;
        org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl$StyleTokenExtractor r2;
        java.lang.Object r1, $r10;
        java.lang.String $r3, $r5, r6, $r7, $r11;
        boolean $z0, $z1;

        r0 := @this: org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl;

        r1 := @parameter0: java.lang.Object;

        r6 := @parameter1: java.lang.String;

        r2 := @parameter2: org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl$StyleTokenExtractor;

        $r4 = r0.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: org.waveprotocol.wave.model.document.util.ElementStyleView document>;

        $r3 = r2.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl$StyleTokenExtractor: java.lang.String stylePropertyName>;

        $r5 = interfaceinvoke $r4.<org.waveprotocol.wave.model.document.util.ElementStyleView: java.lang.String getStylePropertyValue(java.lang.Object,java.lang.String)>(r1, $r3);

        if $r5 == null goto label1;

        $z1 = virtualinvoke $r5.<java.lang.String: boolean isEmpty()>();

        if $z1 != 0 goto label1;

        return $r5;

     label1:
        $r7 = virtualinvoke r6.<java.lang.String: java.lang.String toLowerCase()>();

        $r8 = r2.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl$StyleTokenExtractor: org.waveprotocol.wave.model.util.StringMap tagToValue>;

        $z0 = interfaceinvoke $r8.<org.waveprotocol.wave.model.util.StringMap: boolean containsKey(java.lang.String)>($r7);

        if $z0 == 0 goto label2;

        $r9 = r2.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl$StyleTokenExtractor: org.waveprotocol.wave.model.util.StringMap tagToValue>;

        $r10 = interfaceinvoke $r9.<org.waveprotocol.wave.model.util.StringMap: java.lang.Object get(java.lang.String)>($r7);

        $r11 = (java.lang.String) $r10;

        goto label3;

     label2:
        $r11 = null;

     label3:
        return $r11;
    }

    private boolean isColor(java.lang.Object)
    {
        java.lang.Object r1;
        org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl;

        r1 := @parameter0: java.lang.Object;

        $z0 = specialinvoke r0.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: boolean isStylePropertySet(java.lang.Object,java.lang.String)>(r1, "color");

        return $z0;
    }

    private boolean isBackgroundColor(java.lang.Object)
    {
        java.lang.Object r1;
        org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl;

        r1 := @parameter0: java.lang.Object;

        $z0 = specialinvoke r0.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: boolean isStylePropertySet(java.lang.Object,java.lang.String)>(r1, "backgroundColor");

        return $z0;
    }

    private boolean isFontFamily(java.lang.Object)
    {
        java.lang.Object r1;
        org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl;

        r1 := @parameter0: java.lang.Object;

        $z0 = specialinvoke r0.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: boolean isStylePropertySet(java.lang.Object,java.lang.String)>(r1, "fontFamily");

        return $z0;
    }

    private static boolean isHeading(java.lang.String)
    {
        char $c1, $c2, $c3;
        int $i0, $i4, $i5, $i6, $i7;
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 != 2 goto label2;

        $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(0);

        $i5 = (int) $c1;

        if $i5 == 104 goto label1;

        $c3 = virtualinvoke r0.<java.lang.String: char charAt(int)>(0);

        $i6 = (int) $c3;

        if $i6 != 72 goto label2;

     label1:
        $c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(1);

        $i7 = (int) $c2;

        $i4 = $i7 - 48;

        if $i4 < 1 goto label2;

        if $i4 > 4 goto label2;

        return 1;

     label2:
        return 0;
    }

    private static boolean isLink(java.lang.String)
    {
        java.lang.String r0, $r1;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        $r1 = "a";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r0);

        return $z0;
    }

    private static boolean isListItem(java.lang.String)
    {
        java.lang.String r0, $r1;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        $r1 = "li";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r0);

        return $z0;
    }

    private static boolean isList(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: java.lang.String;

        $z0 = staticinvoke <org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: boolean isOrderedList(java.lang.String)>(r0);

        if $z0 != 0 goto label1;

        $z1 = staticinvoke <org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: boolean isUnorderedList(java.lang.String)>(r0);

        if $z1 == 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    private static boolean isOrderedList(java.lang.String)
    {
        java.lang.String r0, $r1;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        $r1 = "ol";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r0);

        return $z0;
    }

    private static boolean isUnorderedList(java.lang.String)
    {
        java.lang.String r0, $r1;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        $r1 = "ul";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r0);

        return $z0;
    }

    private static boolean isTable(java.lang.String)
    {
        java.lang.String r0, $r1;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        $r1 = "table";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r0);

        return $z0;
    }

    private static boolean isTableRow(java.lang.String)
    {
        java.lang.String r0, $r1;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        $r1 = "tr";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r0);

        return $z0;
    }

    private static boolean isTableCell(java.lang.String)
    {
        java.lang.String r0, $r1, $r2;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: java.lang.String;

        $r1 = "th";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r0);

        if $z0 != 0 goto label1;

        $r2 = "td";

        $z1 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r0);

        if $z1 == 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    private static boolean isTableRelated(java.lang.String)
    {
        java.lang.String r0, $r1, $r2;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;

        r0 := @parameter0: java.lang.String;

        $z0 = staticinvoke <org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: boolean isTable(java.lang.String)>(r0);

        if $z0 != 0 goto label1;

        $z1 = staticinvoke <org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: boolean isTableRow(java.lang.String)>(r0);

        if $z1 != 0 goto label1;

        $z2 = staticinvoke <org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: boolean isTableCell(java.lang.String)>(r0);

        if $z2 != 0 goto label1;

        $r1 = "thead";

        $z3 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r0);

        if $z3 != 0 goto label1;

        $r2 = "tbody";

        $z4 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r0);

        if $z4 == 0 goto label2;

     label1:
        $z5 = 1;

        goto label3;

     label2:
        $z5 = 0;

     label3:
        return $z5;
    }

    private boolean isStylePropertySet(java.lang.Object, java.lang.String)
    {
        org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl r0;
        org.waveprotocol.wave.model.document.util.ElementStyleView $r3;
        java.lang.Object r1;
        java.lang.String r2, $r4;
        boolean $z0, $z1;

        r0 := @this: org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.String;

        $r3 = r0.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: org.waveprotocol.wave.model.document.util.ElementStyleView document>;

        $r4 = interfaceinvoke $r3.<org.waveprotocol.wave.model.document.util.ElementStyleView: java.lang.String getStylePropertyValue(java.lang.Object,java.lang.String)>(r1, r2);

        if $r4 == null goto label1;

        $z0 = virtualinvoke $r4.<java.lang.String: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public java.lang.String toString()
    {
        java.util.List $r1;
        java.lang.String $r2;
        org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl r0;

        r0 := @this: org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl;

        $r1 = r0.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: java.util.List tokenList>;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        return $r2;
    }

    static void <clinit>()
    {
        org.waveprotocol.wave.model.util.StringMap $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r10, $r14, $r18;
        org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl$StyleTokenExtractor $r9, $r13, $r17;
        boolean $z0, $z1;
        org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type $r11, $r12, $r15, $r16, $r19, $r20;
        java.lang.Class $r0;

        $r0 = class "Lorg/waveprotocol/wave/model/richtext/RichTextTokenizerImpl;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: boolean $assertionsDisabled> = $z1;

        $r1 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: org.waveprotocol.wave.model.util.StringMap createStringMap()>();

        <org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: org.waveprotocol.wave.model.util.StringMap fontWeightMap> = $r1;

        $r2 = <org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: org.waveprotocol.wave.model.util.StringMap fontWeightMap>;

        interfaceinvoke $r2.<org.waveprotocol.wave.model.util.StringMap: void put(java.lang.String,java.lang.Object)>("b", "bold");

        $r3 = <org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: org.waveprotocol.wave.model.util.StringMap fontWeightMap>;

        interfaceinvoke $r3.<org.waveprotocol.wave.model.util.StringMap: void put(java.lang.String,java.lang.Object)>("strong", "bold");

        $r4 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: org.waveprotocol.wave.model.util.StringMap createStringMap()>();

        <org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: org.waveprotocol.wave.model.util.StringMap fontStyleMap> = $r4;

        $r5 = <org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: org.waveprotocol.wave.model.util.StringMap fontStyleMap>;

        interfaceinvoke $r5.<org.waveprotocol.wave.model.util.StringMap: void put(java.lang.String,java.lang.Object)>("i", "italic");

        $r6 = <org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: org.waveprotocol.wave.model.util.StringMap fontStyleMap>;

        interfaceinvoke $r6.<org.waveprotocol.wave.model.util.StringMap: void put(java.lang.String,java.lang.Object)>("em", "italic");

        $r7 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: org.waveprotocol.wave.model.util.StringMap createStringMap()>();

        <org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: org.waveprotocol.wave.model.util.StringMap textDecorationMap> = $r7;

        $r8 = <org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: org.waveprotocol.wave.model.util.StringMap textDecorationMap>;

        interfaceinvoke $r8.<org.waveprotocol.wave.model.util.StringMap: void put(java.lang.String,java.lang.Object)>("u", "underline");

        $r9 = new org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl$StyleTokenExtractor;

        $r12 = <org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type: org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type STYLE_FONT_WEIGHT_START>;

        $r11 = <org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type: org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type STYLE_FONT_WEIGHT_END>;

        $r10 = <org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: org.waveprotocol.wave.model.util.StringMap fontWeightMap>;

        specialinvoke $r9.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl$StyleTokenExtractor: void <init>(org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type,org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type,org.waveprotocol.wave.model.util.StringMap,java.lang.String,org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl$1)>($r12, $r11, $r10, "fontWeight", null);

        <org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl$StyleTokenExtractor FONT_WEIGHT_HANDLER> = $r9;

        $r13 = new org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl$StyleTokenExtractor;

        $r16 = <org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type: org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type STYLE_FONT_STYLE_START>;

        $r15 = <org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type: org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type STYLE_FONT_STYLE_END>;

        $r14 = <org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: org.waveprotocol.wave.model.util.StringMap fontStyleMap>;

        specialinvoke $r13.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl$StyleTokenExtractor: void <init>(org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type,org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type,org.waveprotocol.wave.model.util.StringMap,java.lang.String,org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl$1)>($r16, $r15, $r14, "fontStyle", null);

        <org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl$StyleTokenExtractor FONT_STYLE_HANDLER> = $r13;

        $r17 = new org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl$StyleTokenExtractor;

        $r20 = <org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type: org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type STYLE_TEXT_DECORATION_START>;

        $r19 = <org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type: org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type STYLE_TEXT_DECORATION_END>;

        $r18 = <org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: org.waveprotocol.wave.model.util.StringMap textDecorationMap>;

        specialinvoke $r17.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl$StyleTokenExtractor: void <init>(org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type,org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type,org.waveprotocol.wave.model.util.StringMap,java.lang.String,org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl$1)>($r20, $r19, $r18, "textDecoration", null);

        <org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl$StyleTokenExtractor TEXT_DECORATION_HANDLER> = $r17;

        return;
    }
}
