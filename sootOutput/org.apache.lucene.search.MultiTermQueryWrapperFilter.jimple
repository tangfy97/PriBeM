public class org.apache.lucene.search.MultiTermQueryWrapperFilter extends org.apache.lucene.search.Filter
{
    protected final org.apache.lucene.search.MultiTermQuery query;
    static final boolean $assertionsDisabled;

    protected void <init>(org.apache.lucene.search.MultiTermQuery)
    {
        org.apache.lucene.search.MultiTermQuery r1;
        org.apache.lucene.search.MultiTermQueryWrapperFilter r0;

        r0 := @this: org.apache.lucene.search.MultiTermQueryWrapperFilter;

        r1 := @parameter0: org.apache.lucene.search.MultiTermQuery;

        specialinvoke r0.<org.apache.lucene.search.Filter: void <init>()>();

        r0.<org.apache.lucene.search.MultiTermQueryWrapperFilter: org.apache.lucene.search.MultiTermQuery query> = r1;

        return;
    }

    public java.lang.String toString()
    {
        java.lang.String $r2;
        org.apache.lucene.search.MultiTermQuery $r1;
        org.apache.lucene.search.MultiTermQueryWrapperFilter r0;

        r0 := @this: org.apache.lucene.search.MultiTermQueryWrapperFilter;

        $r1 = r0.<org.apache.lucene.search.MultiTermQueryWrapperFilter: org.apache.lucene.search.MultiTermQuery query>;

        $r2 = virtualinvoke $r1.<org.apache.lucene.search.MultiTermQuery: java.lang.String toString()>();

        return $r2;
    }

    public final boolean equals(java.lang.Object)
    {
        org.apache.lucene.search.MultiTermQuery $r5, $r6;
        org.apache.lucene.search.MultiTermQueryWrapperFilter r1, $r4;
        java.lang.Object r0;
        java.lang.Class $r2, $r3;
        boolean $z0, $z1;

        r1 := @this: org.apache.lucene.search.MultiTermQueryWrapperFilter;

        r0 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        if r0 != null goto label2;

        return 0;

     label2:
        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label3;

        $r6 = r1.<org.apache.lucene.search.MultiTermQueryWrapperFilter: org.apache.lucene.search.MultiTermQuery query>;

        $r4 = (org.apache.lucene.search.MultiTermQueryWrapperFilter) r0;

        $r5 = $r4.<org.apache.lucene.search.MultiTermQueryWrapperFilter: org.apache.lucene.search.MultiTermQuery query>;

        $z1 = virtualinvoke $r6.<org.apache.lucene.search.MultiTermQuery: boolean equals(java.lang.Object)>($r5);

        return $z1;

     label3:
        return 0;
    }

    public final int hashCode()
    {
        int $i0;
        org.apache.lucene.search.MultiTermQuery $r1;
        org.apache.lucene.search.MultiTermQueryWrapperFilter r0;

        r0 := @this: org.apache.lucene.search.MultiTermQueryWrapperFilter;

        $r1 = r0.<org.apache.lucene.search.MultiTermQueryWrapperFilter: org.apache.lucene.search.MultiTermQuery query>;

        $i0 = virtualinvoke $r1.<org.apache.lucene.search.MultiTermQuery: int hashCode()>();

        return $i0;
    }

    public final java.lang.String getField()
    {
        java.lang.String $r2;
        org.apache.lucene.search.MultiTermQuery $r1;
        org.apache.lucene.search.MultiTermQueryWrapperFilter r0;

        r0 := @this: org.apache.lucene.search.MultiTermQueryWrapperFilter;

        $r1 = r0.<org.apache.lucene.search.MultiTermQueryWrapperFilter: org.apache.lucene.search.MultiTermQuery query>;

        $r2 = virtualinvoke $r1.<org.apache.lucene.search.MultiTermQuery: java.lang.String getField()>();

        return $r2;
    }

    public org.apache.lucene.search.DocIdSet getDocIdSet(org.apache.lucene.index.AtomicReaderContext, org.apache.lucene.util.Bits) throws java.io.IOException
    {
        org.apache.lucene.index.Fields $r2;
        org.apache.lucene.util.FixedBitSet $r11;
        java.lang.AssertionError $r16;
        org.apache.lucene.search.DocIdSet $r10, $r17, $r18;
        org.apache.lucene.search.MultiTermQuery $r4, $r7;
        org.apache.lucene.search.MultiTermQueryWrapperFilter r3;
        org.apache.lucene.index.TermsEnum $r8;
        int $i0, $i1;
        java.lang.String $r5;
        org.apache.lucene.util.Bits r13;
        boolean $z0;
        org.apache.lucene.index.Terms $r6;
        org.apache.lucene.util.BytesRef $r9, $r15;
        org.apache.lucene.index.DocsEnum $r14, r19;
        org.apache.lucene.index.AtomicReaderContext r0;
        org.apache.lucene.index.AtomicReader $r1, $r12;

        r3 := @this: org.apache.lucene.search.MultiTermQueryWrapperFilter;

        r0 := @parameter0: org.apache.lucene.index.AtomicReaderContext;

        r13 := @parameter1: org.apache.lucene.util.Bits;

        $r1 = virtualinvoke r0.<org.apache.lucene.index.AtomicReaderContext: org.apache.lucene.index.AtomicReader reader()>();

        $r2 = virtualinvoke $r1.<org.apache.lucene.index.AtomicReader: org.apache.lucene.index.Fields fields()>();

        if $r2 != null goto label1;

        $r18 = <org.apache.lucene.search.DocIdSet: org.apache.lucene.search.DocIdSet EMPTY_DOCIDSET>;

        return $r18;

     label1:
        $r4 = r3.<org.apache.lucene.search.MultiTermQueryWrapperFilter: org.apache.lucene.search.MultiTermQuery query>;

        $r5 = $r4.<org.apache.lucene.search.MultiTermQuery: java.lang.String field>;

        $r6 = virtualinvoke $r2.<org.apache.lucene.index.Fields: org.apache.lucene.index.Terms terms(java.lang.String)>($r5);

        if $r6 != null goto label2;

        $r17 = <org.apache.lucene.search.DocIdSet: org.apache.lucene.search.DocIdSet EMPTY_DOCIDSET>;

        return $r17;

     label2:
        $r7 = r3.<org.apache.lucene.search.MultiTermQueryWrapperFilter: org.apache.lucene.search.MultiTermQuery query>;

        $r8 = virtualinvoke $r7.<org.apache.lucene.search.MultiTermQuery: org.apache.lucene.index.TermsEnum getTermsEnum(org.apache.lucene.index.Terms)>($r6);

        $z0 = <org.apache.lucene.search.MultiTermQueryWrapperFilter: boolean $assertionsDisabled>;

        if $z0 != 0 goto label3;

        if $r8 != null goto label3;

        $r16 = new java.lang.AssertionError;

        specialinvoke $r16.<java.lang.AssertionError: void <init>()>();

        throw $r16;

     label3:
        $r9 = virtualinvoke $r8.<org.apache.lucene.index.TermsEnum: org.apache.lucene.util.BytesRef next()>();

        if $r9 == null goto label7;

        $r11 = new org.apache.lucene.util.FixedBitSet;

        $r12 = virtualinvoke r0.<org.apache.lucene.index.AtomicReaderContext: org.apache.lucene.index.AtomicReader reader()>();

        $i0 = virtualinvoke $r12.<org.apache.lucene.index.AtomicReader: int maxDoc()>();

        specialinvoke $r11.<org.apache.lucene.util.FixedBitSet: void <init>(int)>($i0);

        r19 = null;

     label4:
        $r14 = virtualinvoke $r8.<org.apache.lucene.index.TermsEnum: org.apache.lucene.index.DocsEnum docs(org.apache.lucene.util.Bits,org.apache.lucene.index.DocsEnum,int)>(r13, r19, 0);

        r19 = $r14;

     label5:
        $i1 = virtualinvoke $r14.<org.apache.lucene.index.DocsEnum: int nextDoc()>();

        if $i1 == 2147483647 goto label6;

        virtualinvoke $r11.<org.apache.lucene.util.FixedBitSet: void set(int)>($i1);

        goto label5;

     label6:
        $r15 = virtualinvoke $r8.<org.apache.lucene.index.TermsEnum: org.apache.lucene.util.BytesRef next()>();

        if $r15 != null goto label4;

        return $r11;

     label7:
        $r10 = <org.apache.lucene.search.DocIdSet: org.apache.lucene.search.DocIdSet EMPTY_DOCIDSET>;

        return $r10;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/apache/lucene/search/MultiTermQueryWrapperFilter;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.lucene.search.MultiTermQueryWrapperFilter: boolean $assertionsDisabled> = $z1;

        return;
    }
}
