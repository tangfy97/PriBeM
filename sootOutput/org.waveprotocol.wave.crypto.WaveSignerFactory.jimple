public class org.waveprotocol.wave.crypto.WaveSignerFactory extends java.lang.Object
{
    private static final java.lang.String CERTIFICATE_TYPE;

    public void <init>()
    {
        org.waveprotocol.wave.crypto.WaveSignerFactory r0;

        r0 := @this: org.waveprotocol.wave.crypto.WaveSignerFactory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public org.waveprotocol.wave.crypto.WaveSigner getSigner(java.io.InputStream, java.lang.Iterable, java.lang.String) throws org.waveprotocol.wave.crypto.SignatureException
    {
        org.waveprotocol.wave.crypto.WaveSigner $r8;
        java.lang.Iterable r3;
        java.util.List $r4;
        org.waveprotocol.wave.crypto.WaveSignerFactory r0;
        org.waveprotocol.wave.federation.Proto$ProtocolSignerInfo$HashAlgorithm $r7;
        java.security.PrivateKey $r2;
        org.waveprotocol.wave.crypto.SignerInfo $r5;
        java.lang.String r6;
        java.io.InputStream r1;
        org.waveprotocol.wave.federation.Proto$ProtocolSignature$SignatureAlgorithm $r9;

        r0 := @this: org.waveprotocol.wave.crypto.WaveSignerFactory;

        r1 := @parameter0: java.io.InputStream;

        r3 := @parameter1: java.lang.Iterable;

        r6 := @parameter2: java.lang.String;

        $r2 = specialinvoke r0.<org.waveprotocol.wave.crypto.WaveSignerFactory: java.security.PrivateKey getPrivateKey(java.io.InputStream)>(r1);

        $r4 = specialinvoke r0.<org.waveprotocol.wave.crypto.WaveSignerFactory: java.util.List getCertificates(java.lang.Iterable)>(r3);

        $r5 = new org.waveprotocol.wave.crypto.SignerInfo;

        $r7 = <org.waveprotocol.wave.federation.Proto$ProtocolSignerInfo$HashAlgorithm: org.waveprotocol.wave.federation.Proto$ProtocolSignerInfo$HashAlgorithm SHA256>;

        specialinvoke $r5.<org.waveprotocol.wave.crypto.SignerInfo: void <init>(org.waveprotocol.wave.federation.Proto$ProtocolSignerInfo$HashAlgorithm,java.util.List,java.lang.String)>($r7, $r4, r6);

        $r8 = new org.waveprotocol.wave.crypto.WaveSigner;

        $r9 = <org.waveprotocol.wave.federation.Proto$ProtocolSignature$SignatureAlgorithm: org.waveprotocol.wave.federation.Proto$ProtocolSignature$SignatureAlgorithm SHA1_RSA>;

        specialinvoke $r8.<org.waveprotocol.wave.crypto.WaveSigner: void <init>(org.waveprotocol.wave.federation.Proto$ProtocolSignature$SignatureAlgorithm,java.security.PrivateKey,org.waveprotocol.wave.crypto.SignerInfo)>($r9, $r2, $r5);

        return $r8;
    }

    private java.util.List getCertificates(java.lang.Iterable) throws org.waveprotocol.wave.crypto.SignatureException
    {
        java.security.cert.X509Certificate $r6;
        java.util.Iterator $r2;
        java.security.cert.CertificateException $r7;
        java.lang.Iterable r1;
        java.util.ArrayList $r0;
        org.waveprotocol.wave.crypto.WaveSignerFactory r5;
        org.waveprotocol.wave.crypto.SignatureException $r8;
        java.lang.Object $r3;
        boolean $z0;
        java.io.InputStream r4;

        r5 := @this: org.waveprotocol.wave.crypto.WaveSignerFactory;

        r1 := @parameter0: java.lang.Iterable;

     label1:
        $r0 = staticinvoke <com.google.common.collect.Lists: java.util.ArrayList newArrayList()>();

        $r2 = interfaceinvoke r1.<java.lang.Iterable: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.io.InputStream) $r3;

        $r6 = specialinvoke r5.<org.waveprotocol.wave.crypto.WaveSignerFactory: java.security.cert.X509Certificate getCertificate(java.io.InputStream)>(r4);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r6);

        goto label2;

     label3:
        return $r0;

     label4:
        $r7 := @caughtexception;

        $r8 = new org.waveprotocol.wave.crypto.SignatureException;

        specialinvoke $r8.<org.waveprotocol.wave.crypto.SignatureException: void <init>(java.lang.Throwable)>($r7);

        throw $r8;

        catch java.security.cert.CertificateException from label1 to label3 with label4;
    }

    private java.security.cert.X509Certificate getCertificate(java.io.InputStream) throws java.security.cert.CertificateException
    {
        java.security.cert.X509Certificate $r3;
        java.security.cert.Certificate $r2;
        java.security.cert.CertificateFactory $r0;
        org.waveprotocol.wave.crypto.WaveSignerFactory r4;
        java.io.InputStream r1;

        r4 := @this: org.waveprotocol.wave.crypto.WaveSignerFactory;

        r1 := @parameter0: java.io.InputStream;

        $r0 = staticinvoke <java.security.cert.CertificateFactory: java.security.cert.CertificateFactory getInstance(java.lang.String)>("X.509");

        $r2 = virtualinvoke $r0.<java.security.cert.CertificateFactory: java.security.cert.Certificate generateCertificate(java.io.InputStream)>(r1);

        $r3 = (java.security.cert.X509Certificate) $r2;

        return $r3;
    }

    private java.security.PrivateKey getPrivateKey(java.io.InputStream) throws org.waveprotocol.wave.crypto.SignatureException
    {
        byte[] $r3;
        java.security.spec.PKCS8EncodedKeySpec $r0;
        java.security.spec.InvalidKeySpecException $r8;
        java.io.IOException $r6;
        java.security.KeyFactory $r4;
        org.waveprotocol.wave.crypto.WaveSignerFactory r1;
        java.security.PrivateKey $r5;
        org.waveprotocol.wave.crypto.SignatureException $r7, $r9, $r11;
        java.security.NoSuchAlgorithmException $r10;
        java.io.InputStream r2;

        r1 := @this: org.waveprotocol.wave.crypto.WaveSignerFactory;

        r2 := @parameter0: java.io.InputStream;

     label1:
        $r0 = new java.security.spec.PKCS8EncodedKeySpec;

        $r3 = specialinvoke r1.<org.waveprotocol.wave.crypto.WaveSignerFactory: byte[] readBase64Bytes(java.io.InputStream)>(r2);

        specialinvoke $r0.<java.security.spec.PKCS8EncodedKeySpec: void <init>(byte[])>($r3);

        $r4 = staticinvoke <java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String)>("RSA");

        $r5 = virtualinvoke $r4.<java.security.KeyFactory: java.security.PrivateKey generatePrivate(java.security.spec.KeySpec)>($r0);

     label2:
        return $r5;

     label3:
        $r10 := @caughtexception;

        $r11 = new org.waveprotocol.wave.crypto.SignatureException;

        specialinvoke $r11.<org.waveprotocol.wave.crypto.SignatureException: void <init>(java.lang.Throwable)>($r10);

        throw $r11;

     label4:
        $r8 := @caughtexception;

        $r9 = new org.waveprotocol.wave.crypto.SignatureException;

        specialinvoke $r9.<org.waveprotocol.wave.crypto.SignatureException: void <init>(java.lang.Throwable)>($r8);

        throw $r9;

     label5:
        $r6 := @caughtexception;

        $r7 = new org.waveprotocol.wave.crypto.SignatureException;

        specialinvoke $r7.<org.waveprotocol.wave.crypto.SignatureException: void <init>(java.lang.Throwable)>($r6);

        throw $r7;

        catch java.security.NoSuchAlgorithmException from label1 to label2 with label3;
        catch java.security.spec.InvalidKeySpecException from label1 to label2 with label4;
        catch java.io.IOException from label1 to label2 with label5;
    }

    private byte[] readBase64Bytes(java.io.InputStream) throws java.io.IOException
    {
        byte[] $r5, $r6;
        java.io.InputStreamReader $r2;
        org.waveprotocol.wave.crypto.WaveSignerFactory r8;
        java.lang.StringBuilder $r0;
        java.io.BufferedReader $r1;
        java.lang.String $r4, $r7, $r9;
        java.io.InputStream r3;
        boolean $z0, $z1;

        r8 := @this: org.waveprotocol.wave.crypto.WaveSignerFactory;

        r3 := @parameter0: java.io.InputStream;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = new java.io.BufferedReader;

        $r2 = new java.io.InputStreamReader;

        specialinvoke $r2.<java.io.InputStreamReader: void <init>(java.io.InputStream)>(r3);

        specialinvoke $r1.<java.io.BufferedReader: void <init>(java.io.Reader)>($r2);

     label1:
        $r9 = virtualinvoke $r1.<java.io.BufferedReader: java.lang.String readLine()>();

        if $r9 == null goto label3;

        $r7 = virtualinvoke $r9.<java.lang.String: java.lang.String trim()>();

        $z0 = virtualinvoke $r7.<java.lang.String: boolean startsWith(java.lang.String)>("-----BEGIN");

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke $r7.<java.lang.String: boolean startsWith(java.lang.String)>("-----END");

        if $z1 == 0 goto label2;

        goto label1;

     label2:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        goto label1;

     label3:
        $r4 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        $r5 = virtualinvoke $r4.<java.lang.String: byte[] getBytes()>();

        $r6 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] decodeBase64(byte[])>($r5);

        return $r6;
    }

    public static void <clinit>()
    {
        <org.waveprotocol.wave.crypto.WaveSignerFactory: java.lang.String CERTIFICATE_TYPE> = "X.509";

        return;
    }
}
