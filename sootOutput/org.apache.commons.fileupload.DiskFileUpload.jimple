public class org.apache.commons.fileupload.DiskFileUpload extends org.apache.commons.fileupload.FileUploadBase
{
    private org.apache.commons.fileupload.DefaultFileItemFactory fileItemFactory;

    public void <init>()
    {
        org.apache.commons.fileupload.DiskFileUpload r0;
        org.apache.commons.fileupload.DefaultFileItemFactory $r1;

        r0 := @this: org.apache.commons.fileupload.DiskFileUpload;

        specialinvoke r0.<org.apache.commons.fileupload.FileUploadBase: void <init>()>();

        $r1 = new org.apache.commons.fileupload.DefaultFileItemFactory;

        specialinvoke $r1.<org.apache.commons.fileupload.DefaultFileItemFactory: void <init>()>();

        r0.<org.apache.commons.fileupload.DiskFileUpload: org.apache.commons.fileupload.DefaultFileItemFactory fileItemFactory> = $r1;

        return;
    }

    public void <init>(org.apache.commons.fileupload.DefaultFileItemFactory)
    {
        org.apache.commons.fileupload.DiskFileUpload r0;
        org.apache.commons.fileupload.DefaultFileItemFactory r1;

        r0 := @this: org.apache.commons.fileupload.DiskFileUpload;

        r1 := @parameter0: org.apache.commons.fileupload.DefaultFileItemFactory;

        specialinvoke r0.<org.apache.commons.fileupload.FileUploadBase: void <init>()>();

        r0.<org.apache.commons.fileupload.DiskFileUpload: org.apache.commons.fileupload.DefaultFileItemFactory fileItemFactory> = r1;

        return;
    }

    public org.apache.commons.fileupload.FileItemFactory getFileItemFactory()
    {
        org.apache.commons.fileupload.DiskFileUpload r0;
        org.apache.commons.fileupload.DefaultFileItemFactory $r1;

        r0 := @this: org.apache.commons.fileupload.DiskFileUpload;

        $r1 = r0.<org.apache.commons.fileupload.DiskFileUpload: org.apache.commons.fileupload.DefaultFileItemFactory fileItemFactory>;

        return $r1;
    }

    public void setFileItemFactory(org.apache.commons.fileupload.FileItemFactory)
    {
        org.apache.commons.fileupload.FileItemFactory r1;
        org.apache.commons.fileupload.DiskFileUpload r0;
        org.apache.commons.fileupload.DefaultFileItemFactory $r2;

        r0 := @this: org.apache.commons.fileupload.DiskFileUpload;

        r1 := @parameter0: org.apache.commons.fileupload.FileItemFactory;

        $r2 = (org.apache.commons.fileupload.DefaultFileItemFactory) r1;

        r0.<org.apache.commons.fileupload.DiskFileUpload: org.apache.commons.fileupload.DefaultFileItemFactory fileItemFactory> = $r2;

        return;
    }

    public int getSizeThreshold()
    {
        int $i0;
        org.apache.commons.fileupload.DiskFileUpload r0;
        org.apache.commons.fileupload.DefaultFileItemFactory $r1;

        r0 := @this: org.apache.commons.fileupload.DiskFileUpload;

        $r1 = r0.<org.apache.commons.fileupload.DiskFileUpload: org.apache.commons.fileupload.DefaultFileItemFactory fileItemFactory>;

        $i0 = virtualinvoke $r1.<org.apache.commons.fileupload.DefaultFileItemFactory: int getSizeThreshold()>();

        return $i0;
    }

    public void setSizeThreshold(int)
    {
        int i0;
        org.apache.commons.fileupload.DiskFileUpload r0;
        org.apache.commons.fileupload.DefaultFileItemFactory $r1;

        r0 := @this: org.apache.commons.fileupload.DiskFileUpload;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.commons.fileupload.DiskFileUpload: org.apache.commons.fileupload.DefaultFileItemFactory fileItemFactory>;

        virtualinvoke $r1.<org.apache.commons.fileupload.DefaultFileItemFactory: void setSizeThreshold(int)>(i0);

        return;
    }

    public java.lang.String getRepositoryPath()
    {
        org.apache.commons.fileupload.DiskFileUpload r0;
        java.lang.String $r3;
        java.io.File $r2;
        org.apache.commons.fileupload.DefaultFileItemFactory $r1;

        r0 := @this: org.apache.commons.fileupload.DiskFileUpload;

        $r1 = r0.<org.apache.commons.fileupload.DiskFileUpload: org.apache.commons.fileupload.DefaultFileItemFactory fileItemFactory>;

        $r2 = virtualinvoke $r1.<org.apache.commons.fileupload.DefaultFileItemFactory: java.io.File getRepository()>();

        $r3 = virtualinvoke $r2.<java.io.File: java.lang.String getPath()>();

        return $r3;
    }

    public void setRepositoryPath(java.lang.String)
    {
        org.apache.commons.fileupload.DiskFileUpload r0;
        java.lang.String r2;
        java.io.File $r1;
        org.apache.commons.fileupload.DefaultFileItemFactory $r3;

        r0 := @this: org.apache.commons.fileupload.DiskFileUpload;

        r2 := @parameter0: java.lang.String;

        $r3 = r0.<org.apache.commons.fileupload.DiskFileUpload: org.apache.commons.fileupload.DefaultFileItemFactory fileItemFactory>;

        $r1 = new java.io.File;

        specialinvoke $r1.<java.io.File: void <init>(java.lang.String)>(r2);

        virtualinvoke $r3.<org.apache.commons.fileupload.DefaultFileItemFactory: void setRepository(java.io.File)>($r1);

        return;
    }

    public java.util.List parseRequest(javax.servlet.http.HttpServletRequest, int, long, java.lang.String) throws org.apache.commons.fileupload.FileUploadException
    {
        javax.servlet.http.HttpServletRequest r2;
        java.util.List $r3;
        org.apache.commons.fileupload.DiskFileUpload r0;
        int i0;
        long l1;
        java.lang.String r1;

        r0 := @this: org.apache.commons.fileupload.DiskFileUpload;

        r2 := @parameter0: javax.servlet.http.HttpServletRequest;

        i0 := @parameter1: int;

        l1 := @parameter2: long;

        r1 := @parameter3: java.lang.String;

        virtualinvoke r0.<org.apache.commons.fileupload.DiskFileUpload: void setSizeThreshold(int)>(i0);

        virtualinvoke r0.<org.apache.commons.fileupload.DiskFileUpload: void setSizeMax(long)>(l1);

        virtualinvoke r0.<org.apache.commons.fileupload.DiskFileUpload: void setRepositoryPath(java.lang.String)>(r1);

        $r3 = virtualinvoke r0.<org.apache.commons.fileupload.DiskFileUpload: java.util.List parseRequest(javax.servlet.http.HttpServletRequest)>(r2);

        return $r3;
    }
}
