public class org.waveprotocol.wave.model.id.ModernIdSerialiser extends java.lang.Object implements org.waveprotocol.wave.model.id.IdSerialiser
{
    public static final org.waveprotocol.wave.model.id.ModernIdSerialiser INSTANCE;
    private static final java.lang.String SEP;
    private static final java.lang.String ELIDE;

    public java.lang.String serialiseWaveId(org.waveprotocol.wave.model.id.WaveId)
    {
        java.lang.Object[] $r2, $r5;
        java.lang.String $r1, $r3, $r4, $r6, $r8, $r10, $r12;
        boolean $z0, $z1;
        org.waveprotocol.wave.model.id.WaveId r0;
        org.waveprotocol.wave.model.id.ModernIdSerialiser r13;
        java.lang.StringBuilder $r7, $r9, $r11;

        r13 := @this: org.waveprotocol.wave.model.id.ModernIdSerialiser;

        r0 := @parameter0: org.waveprotocol.wave.model.id.WaveId;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.id.WaveId: java.lang.String getDomain()>();

        $z0 = staticinvoke <org.waveprotocol.wave.model.id.WaveIdentifiers: boolean isValidDomain(int,java.lang.String)>(0, $r1);

        $r2 = newarray (java.lang.Object)[1];

        $r3 = virtualinvoke r0.<org.waveprotocol.wave.model.id.WaveId: java.lang.String getDomain()>();

        $r2[0] = $r3;

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object[])>($z0, "Invalid domain %s", $r2);

        $r4 = virtualinvoke r0.<org.waveprotocol.wave.model.id.WaveId: java.lang.String getId()>();

        $z1 = staticinvoke <org.waveprotocol.wave.model.id.WaveIdentifiers: boolean isValidIdentifier(java.lang.String)>($r4);

        $r5 = newarray (java.lang.Object)[1];

        $r6 = virtualinvoke r0.<org.waveprotocol.wave.model.id.WaveId: java.lang.String getId()>();

        $r5[0] = $r6;

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object[])>($z1, "Invalid id %s", $r5);

        $r7 = new java.lang.StringBuilder;

        $r8 = virtualinvoke r0.<org.waveprotocol.wave.model.id.WaveId: java.lang.String getDomain()>();

        specialinvoke $r7.<java.lang.StringBuilder: void <init>(java.lang.String)>($r8);

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $r10 = virtualinvoke r0.<org.waveprotocol.wave.model.id.WaveId: java.lang.String getId()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r12;
    }

    public java.lang.String serialiseWaveletId(org.waveprotocol.wave.model.id.WaveletId)
    {
        java.lang.Object[] $r2, $r5;
        org.waveprotocol.wave.model.id.WaveletId r0;
        java.lang.String $r1, $r3, $r4, $r6, $r8, $r10, $r12;
        boolean $z0, $z1;
        org.waveprotocol.wave.model.id.ModernIdSerialiser r13;
        java.lang.StringBuilder $r7, $r9, $r11;

        r13 := @this: org.waveprotocol.wave.model.id.ModernIdSerialiser;

        r0 := @parameter0: org.waveprotocol.wave.model.id.WaveletId;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.id.WaveletId: java.lang.String getDomain()>();

        $z0 = staticinvoke <org.waveprotocol.wave.model.id.WaveIdentifiers: boolean isValidDomain(int,java.lang.String)>(0, $r1);

        $r2 = newarray (java.lang.Object)[1];

        $r3 = virtualinvoke r0.<org.waveprotocol.wave.model.id.WaveletId: java.lang.String getDomain()>();

        $r2[0] = $r3;

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object[])>($z0, "Invalid domain %s", $r2);

        $r4 = virtualinvoke r0.<org.waveprotocol.wave.model.id.WaveletId: java.lang.String getId()>();

        $z1 = staticinvoke <org.waveprotocol.wave.model.id.WaveIdentifiers: boolean isValidIdentifier(java.lang.String)>($r4);

        $r5 = newarray (java.lang.Object)[1];

        $r6 = virtualinvoke r0.<org.waveprotocol.wave.model.id.WaveletId: java.lang.String getId()>();

        $r5[0] = $r6;

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object[])>($z1, "Invalid id %s", $r5);

        $r7 = new java.lang.StringBuilder;

        $r8 = virtualinvoke r0.<org.waveprotocol.wave.model.id.WaveletId: java.lang.String getDomain()>();

        specialinvoke $r7.<java.lang.StringBuilder: void <init>(java.lang.String)>($r8);

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $r10 = virtualinvoke r0.<org.waveprotocol.wave.model.id.WaveletId: java.lang.String getId()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r12;
    }

    public java.lang.String serialiseWaveletName(org.waveprotocol.wave.model.id.WaveletName)
    {
        org.waveprotocol.wave.model.id.WaveletId $r6, $r10, $r13;
        java.lang.String $r4, $r7, $r9, $r11, $r14, $r15;
        boolean $z0;
        org.waveprotocol.wave.model.id.WaveletName r2;
        org.waveprotocol.wave.model.id.WaveId $r3, $r8;
        org.waveprotocol.wave.model.id.ModernIdSerialiser r1;
        java.lang.StringBuilder $r0, $r5, $r12;

        r1 := @this: org.waveprotocol.wave.model.id.ModernIdSerialiser;

        r2 := @parameter0: org.waveprotocol.wave.model.id.WaveletName;

        $r0 = new java.lang.StringBuilder;

        $r3 = r2.<org.waveprotocol.wave.model.id.WaveletName: org.waveprotocol.wave.model.id.WaveId waveId>;

        $r4 = virtualinvoke r1.<org.waveprotocol.wave.model.id.ModernIdSerialiser: java.lang.String serialiseWaveId(org.waveprotocol.wave.model.id.WaveId)>($r3);

        specialinvoke $r0.<java.lang.StringBuilder: void <init>(java.lang.String)>($r4);

        $r5 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $r6 = r2.<org.waveprotocol.wave.model.id.WaveletName: org.waveprotocol.wave.model.id.WaveletId waveletId>;

        $r7 = virtualinvoke $r6.<org.waveprotocol.wave.model.id.WaveletId: java.lang.String getDomain()>();

        $r8 = r2.<org.waveprotocol.wave.model.id.WaveletName: org.waveprotocol.wave.model.id.WaveId waveId>;

        $r9 = virtualinvoke $r8.<org.waveprotocol.wave.model.id.WaveId: java.lang.String getDomain()>();

        $z0 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>($r9);

        if $z0 == 0 goto label1;

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("~");

        goto label2;

     label1:
        $r10 = r2.<org.waveprotocol.wave.model.id.WaveletName: org.waveprotocol.wave.model.id.WaveletId waveletId>;

        $r11 = virtualinvoke $r10.<org.waveprotocol.wave.model.id.WaveletId: java.lang.String getDomain()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

     label2:
        $r12 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $r13 = r2.<org.waveprotocol.wave.model.id.WaveletName: org.waveprotocol.wave.model.id.WaveletId waveletId>;

        $r14 = virtualinvoke $r13.<org.waveprotocol.wave.model.id.WaveletId: java.lang.String getId()>();

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r15 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r15;
    }

    public org.waveprotocol.wave.model.id.WaveId deserialiseWaveId(java.lang.String) throws org.waveprotocol.wave.model.id.InvalidIdException
    {
        org.waveprotocol.wave.model.id.WaveId $r4;
        org.waveprotocol.wave.model.id.InvalidIdException $r5;
        java.lang.String[] $r1;
        int $i0;
        org.waveprotocol.wave.model.id.ModernIdSerialiser r10;
        java.lang.StringBuilder $r6, $r7, $r8;
        java.lang.String r0, $r2, $r3, $r9;

        r10 := @this: org.waveprotocol.wave.model.id.ModernIdSerialiser;

        r0 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String[] split(java.lang.String)>("/");

        $i0 = lengthof $r1;

        if $i0 == 2 goto label1;

        $r5 = new org.waveprotocol.wave.model.id.InvalidIdException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Required 2 \'/\'-separated tokens in serialised wave id: ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<org.waveprotocol.wave.model.id.InvalidIdException: void <init>(java.lang.String,java.lang.String)>(r0, $r9);

        throw $r5;

     label1:
        $r3 = $r1[0];

        $r2 = $r1[1];

        $r4 = staticinvoke <org.waveprotocol.wave.model.id.WaveId: org.waveprotocol.wave.model.id.WaveId ofChecked(java.lang.String,java.lang.String)>($r3, $r2);

        return $r4;
    }

    public org.waveprotocol.wave.model.id.WaveletId deserialiseWaveletId(java.lang.String) throws org.waveprotocol.wave.model.id.InvalidIdException
    {
        org.waveprotocol.wave.model.id.InvalidIdException $r5;
        java.lang.String[] $r1;
        org.waveprotocol.wave.model.id.WaveletId $r4;
        int $i0;
        org.waveprotocol.wave.model.id.ModernIdSerialiser r10;
        java.lang.StringBuilder $r6, $r7, $r8;
        java.lang.String r0, $r2, $r3, $r9;

        r10 := @this: org.waveprotocol.wave.model.id.ModernIdSerialiser;

        r0 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String[] split(java.lang.String)>("/");

        $i0 = lengthof $r1;

        if $i0 == 2 goto label1;

        $r5 = new org.waveprotocol.wave.model.id.InvalidIdException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Required 2 \'/\'-separated tokens in serialised wavelet id: ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<org.waveprotocol.wave.model.id.InvalidIdException: void <init>(java.lang.String,java.lang.String)>(r0, $r9);

        throw $r5;

     label1:
        $r3 = $r1[0];

        $r2 = $r1[1];

        $r4 = staticinvoke <org.waveprotocol.wave.model.id.WaveletId: org.waveprotocol.wave.model.id.WaveletId ofChecked(java.lang.String,java.lang.String)>($r3, $r2);

        return $r4;
    }

    public org.waveprotocol.wave.model.id.WaveletName deserialiseWaveletName(java.lang.String) throws org.waveprotocol.wave.model.id.InvalidIdException
    {
        java.lang.String[] $r1;
        org.waveprotocol.wave.model.id.WaveletId $r10;
        int $i0;
        java.lang.String r0, $r2, $r3, $r4, $r5, $r6, $r8, $r9, $r12, $r18;
        boolean $z0, $z1, $z2;
        org.waveprotocol.wave.model.id.WaveletName $r11;
        org.waveprotocol.wave.model.id.WaveId $r7;
        org.waveprotocol.wave.model.id.InvalidIdException $r13, $r14, $r19;
        org.waveprotocol.wave.model.id.ModernIdSerialiser r20;
        java.lang.StringBuilder $r15, $r16, $r17;

        r20 := @this: org.waveprotocol.wave.model.id.ModernIdSerialiser;

        r0 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<java.lang.String: boolean endsWith(java.lang.String)>("/");

        if $z0 == 0 goto label1;

        $r19 = new org.waveprotocol.wave.model.id.InvalidIdException;

        specialinvoke $r19.<org.waveprotocol.wave.model.id.InvalidIdException: void <init>(java.lang.String,java.lang.String)>(r0, "Serialised wavelet name had trailing \'/\'");

        throw $r19;

     label1:
        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String[] split(java.lang.String)>("/");

        $i0 = lengthof $r1;

        if $i0 == 4 goto label2;

        $r14 = new org.waveprotocol.wave.model.id.InvalidIdException;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Required 4 \'/\'-separated tokens in serialised wavelet name: ");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<org.waveprotocol.wave.model.id.InvalidIdException: void <init>(java.lang.String,java.lang.String)>(r0, $r18);

        throw $r14;

     label2:
        $r3 = $r1[2];

        $r2 = $r1[0];

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z1 == 0 goto label3;

        $r13 = new org.waveprotocol.wave.model.id.InvalidIdException;

        specialinvoke $r13.<org.waveprotocol.wave.model.id.InvalidIdException: void <init>(java.lang.String,java.lang.String)>(r0, "Serialised wavelet name had un-normalised domains");

        throw $r13;

     label3:
        $r4 = $r1[2];

        $z2 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("~");

        if $z2 == 0 goto label4;

        $r12 = $r1[0];

        $r1[2] = $r12;

     label4:
        $r6 = $r1[0];

        $r5 = $r1[1];

        $r7 = staticinvoke <org.waveprotocol.wave.model.id.WaveId: org.waveprotocol.wave.model.id.WaveId ofChecked(java.lang.String,java.lang.String)>($r6, $r5);

        $r9 = $r1[2];

        $r8 = $r1[3];

        $r10 = staticinvoke <org.waveprotocol.wave.model.id.WaveletId: org.waveprotocol.wave.model.id.WaveletId ofChecked(java.lang.String,java.lang.String)>($r9, $r8);

        $r11 = staticinvoke <org.waveprotocol.wave.model.id.WaveletName: org.waveprotocol.wave.model.id.WaveletName of(org.waveprotocol.wave.model.id.WaveId,org.waveprotocol.wave.model.id.WaveletId)>($r7, $r10);

        return $r11;
    }

    private void <init>()
    {
        org.waveprotocol.wave.model.id.ModernIdSerialiser r0;

        r0 := @this: org.waveprotocol.wave.model.id.ModernIdSerialiser;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static void <clinit>()
    {
        org.waveprotocol.wave.model.id.ModernIdSerialiser $r0;

        <org.waveprotocol.wave.model.id.ModernIdSerialiser: java.lang.String ELIDE> = "~";

        <org.waveprotocol.wave.model.id.ModernIdSerialiser: java.lang.String SEP> = "/";

        $r0 = new org.waveprotocol.wave.model.id.ModernIdSerialiser;

        specialinvoke $r0.<org.waveprotocol.wave.model.id.ModernIdSerialiser: void <init>()>();

        <org.waveprotocol.wave.model.id.ModernIdSerialiser: org.waveprotocol.wave.model.id.ModernIdSerialiser INSTANCE> = $r0;

        return;
    }
}
