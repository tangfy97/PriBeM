public class org.apache.batik.ext.awt.image.rendered.Any2LsRGBRed extends org.apache.batik.ext.awt.image.rendered.AbstractRed
{
    boolean srcIssRGB;
    private static final double GAMMA;
    private static final double LFACT;
    private static final int[] sRGBToLsRGBLut;

    public void <init>(org.apache.batik.ext.awt.image.rendered.CachableRed)
    {
        java.awt.Rectangle $r2;
        java.awt.color.ColorSpace $r6, $r7;
        java.awt.image.SampleModel $r4;
        org.apache.batik.ext.awt.image.rendered.Any2LsRGBRed r0;
        org.apache.batik.ext.awt.image.rendered.CachableRed r1;
        java.awt.image.ColorModel $r3, $r5;
        int $i0, $i1;

        r0 := @this: org.apache.batik.ext.awt.image.rendered.Any2LsRGBRed;

        r1 := @parameter0: org.apache.batik.ext.awt.image.rendered.CachableRed;

        $r2 = interfaceinvoke r1.<org.apache.batik.ext.awt.image.rendered.CachableRed: java.awt.Rectangle getBounds()>();

        $r3 = staticinvoke <org.apache.batik.ext.awt.image.rendered.Any2LsRGBRed: java.awt.image.ColorModel fixColorModel(org.apache.batik.ext.awt.image.rendered.CachableRed)>(r1);

        $r4 = staticinvoke <org.apache.batik.ext.awt.image.rendered.Any2LsRGBRed: java.awt.image.SampleModel fixSampleModel(org.apache.batik.ext.awt.image.rendered.CachableRed)>(r1);

        $i0 = interfaceinvoke r1.<java.awt.image.RenderedImage: int getTileGridXOffset()>();

        $i1 = interfaceinvoke r1.<java.awt.image.RenderedImage: int getTileGridYOffset()>();

        specialinvoke r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: void <init>(org.apache.batik.ext.awt.image.rendered.CachableRed,java.awt.Rectangle,java.awt.image.ColorModel,java.awt.image.SampleModel,int,int,java.util.Map)>(r1, $r2, $r3, $r4, $i0, $i1, null);

        r0.<org.apache.batik.ext.awt.image.rendered.Any2LsRGBRed: boolean srcIssRGB> = 0;

        $r5 = interfaceinvoke r1.<java.awt.image.RenderedImage: java.awt.image.ColorModel getColorModel()>();

        if $r5 != null goto label1;

        return;

     label1:
        $r6 = virtualinvoke $r5.<java.awt.image.ColorModel: java.awt.color.ColorSpace getColorSpace()>();

        $r7 = staticinvoke <java.awt.color.ColorSpace: java.awt.color.ColorSpace getInstance(int)>(1000);

        if $r6 != $r7 goto label2;

        r0.<org.apache.batik.ext.awt.image.rendered.Any2LsRGBRed: boolean srcIssRGB> = 1;

     label2:
        return;
    }

    public static final double sRGBToLsRGB(double)
    {
        byte $b0;
        int $i1;
        double d0, $d1, $d2, $d3, $d4;

        d0 := @parameter0: double;

        $b0 = d0 cmpg 0.003928;

        $i1 = (int) $b0;

        if $i1 > 0 goto label1;

        $d4 = d0 * 0.07739938080495357;

        return $d4;

     label1:
        $d1 = d0 + 0.055;

        $d2 = $d1 / 1.055;

        $d3 = staticinvoke <java.lang.Math: double pow(double,double)>($d2, 2.4);

        return $d3;
    }

    public java.awt.image.WritableRaster copyData(java.awt.image.WritableRaster)
    {
        java.awt.image.SampleModel $r5, $r8, $r19, $r21, $r40;
        java.awt.image.ColorConvertOp $r53;
        java.util.Vector $r1;
        org.apache.batik.ext.awt.image.rendered.CachableRed r3;
        java.awt.image.BandCombineOp $r45;
        float[] $r26, $r27, $r28, $r29, $r30, $r31, $r32, $r33, $r34, $r35, $r36, $r37, $r38, $r39;
        java.awt.image.Raster $r18, $r44;
        java.awt.image.SinglePixelPackedSampleModel $r10, r47;
        java.awt.Point $r13, $r22;
        int[] $r9, $r11, $r41;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        java.awt.image.BufferedImage $r16, $r24, r46, $r51;
        java.awt.image.DataBuffer $r12;
        java.awt.Rectangle $r17, $r20, $r43;
        org.apache.batik.ext.awt.image.rendered.Any2LsRGBRed r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24;
        float[][] r42;
        java.awt.image.ColorModel $r4, $r6, r48, r49;
        java.lang.Object $r2;
        java.awt.image.WritableRaster r7, $r14, $r15, $r23, $r25, r50, $r52;

        r0 := @this: org.apache.batik.ext.awt.image.rendered.Any2LsRGBRed;

        r7 := @parameter0: java.awt.image.WritableRaster;

        $r1 = virtualinvoke r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: java.util.Vector getSources()>();

        $r2 = virtualinvoke $r1.<java.util.Vector: java.lang.Object get(int)>(0);

        r3 = (org.apache.batik.ext.awt.image.rendered.CachableRed) $r2;

        $r4 = interfaceinvoke r3.<java.awt.image.RenderedImage: java.awt.image.ColorModel getColorModel()>();

        $r5 = interfaceinvoke r3.<java.awt.image.RenderedImage: java.awt.image.SampleModel getSampleModel()>();

        $z0 = r0.<org.apache.batik.ext.awt.image.rendered.Any2LsRGBRed: boolean srcIssRGB>;

        if $z0 == 0 goto label02;

        $r40 = virtualinvoke r7.<java.awt.image.Raster: java.awt.image.SampleModel getSampleModel()>();

        $z5 = staticinvoke <org.apache.batik.ext.awt.image.rendered.Any2sRGBRed: boolean is_INT_PACK_COMP(java.awt.image.SampleModel)>($r40);

        if $z5 == 0 goto label02;

        interfaceinvoke r3.<java.awt.image.RenderedImage: java.awt.image.WritableRaster copyData(java.awt.image.WritableRaster)>(r7);

        $z6 = virtualinvoke $r4.<java.awt.image.ColorModel: boolean hasAlpha()>();

        if $z6 == 0 goto label01;

        staticinvoke <org.apache.batik.ext.awt.image.GraphicsUtil: java.awt.image.ColorModel coerceData(java.awt.image.WritableRaster,java.awt.image.ColorModel,boolean)>(r7, $r4, 0);

     label01:
        $r41 = <org.apache.batik.ext.awt.image.rendered.Any2LsRGBRed: int[] sRGBToLsRGBLut>;

        staticinvoke <org.apache.batik.ext.awt.image.rendered.Any2sRGBRed: java.awt.image.WritableRaster applyLut_INT(java.awt.image.WritableRaster,int[])>(r7, $r41);

        return r7;

     label02:
        if $r4 != null goto label08;

        $i23 = virtualinvoke $r5.<java.awt.image.SampleModel: int getNumBands()>();

        tableswitch($i23)
        {
            case 1: goto label03;
            case 2: goto label04;
            case 3: goto label05;
            default: goto label06;
        };

     label03:
        r42 = newmultiarray (float)[1][3];

        $r33 = r42[0];

        $r33[0] = 1.0F;

        $r34 = r42[0];

        $r34[1] = 1.0F;

        $r35 = r42[0];

        $r35[2] = 1.0F;

        goto label07;

     label04:
        r42 = newmultiarray (float)[2][4];

        $r29 = r42[0];

        $r29[0] = 1.0F;

        $r30 = r42[0];

        $r30[1] = 1.0F;

        $r31 = r42[0];

        $r31[2] = 1.0F;

        $r32 = r42[1];

        $r32[3] = 1.0F;

        goto label07;

     label05:
        r42 = newmultiarray (float)[3][3];

        $r26 = r42[0];

        $r26[0] = 1.0F;

        $r27 = r42[1];

        $r27[1] = 1.0F;

        $r28 = r42[2];

        $r28[2] = 1.0F;

        goto label07;

     label06:
        $i24 = virtualinvoke $r5.<java.awt.image.SampleModel: int getNumBands()>();

        r42 = newmultiarray (float)[$i24][4];

        $r36 = r42[0];

        $r36[0] = 1.0F;

        $r37 = r42[1];

        $r37[1] = 1.0F;

        $r38 = r42[2];

        $r38[2] = 1.0F;

        $r39 = r42[3];

        $r39[3] = 1.0F;

     label07:
        $r43 = virtualinvoke r7.<java.awt.image.Raster: java.awt.Rectangle getBounds()>();

        $r44 = interfaceinvoke r3.<java.awt.image.RenderedImage: java.awt.image.Raster getData(java.awt.Rectangle)>($r43);

        $r45 = new java.awt.image.BandCombineOp;

        specialinvoke $r45.<java.awt.image.BandCombineOp: void <init>(float[][],java.awt.RenderingHints)>(r42, null);

        virtualinvoke $r45.<java.awt.image.BandCombineOp: java.awt.image.WritableRaster filter(java.awt.image.Raster,java.awt.image.WritableRaster)>($r44, r7);

        goto label13;

     label08:
        $r6 = virtualinvoke r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: java.awt.image.ColorModel getColorModel()>();

        $z1 = virtualinvoke $r6.<java.awt.image.ColorModel: boolean hasAlpha()>();

        if $z1 != 0 goto label09;

        $r24 = new java.awt.image.BufferedImage;

        $r25 = virtualinvoke r7.<java.awt.image.WritableRaster: java.awt.image.WritableRaster createWritableTranslatedChild(int,int)>(0, 0);

        $z4 = virtualinvoke $r6.<java.awt.image.ColorModel: boolean isAlphaPremultiplied()>();

        specialinvoke $r24.<java.awt.image.BufferedImage: void <init>(java.awt.image.ColorModel,java.awt.image.WritableRaster,boolean,java.util.Hashtable)>($r6, $r25, $z4, null);

        r46 = $r24;

        goto label10;

     label09:
        $r8 = virtualinvoke r7.<java.awt.image.Raster: java.awt.image.SampleModel getSampleModel()>();

        r47 = (java.awt.image.SinglePixelPackedSampleModel) $r8;

        $r9 = virtualinvoke r47.<java.awt.image.SinglePixelPackedSampleModel: int[] getBitMasks()>();

        $r10 = new java.awt.image.SinglePixelPackedSampleModel;

        $i0 = virtualinvoke r47.<java.awt.image.SampleModel: int getDataType()>();

        $i1 = virtualinvoke r47.<java.awt.image.SampleModel: int getWidth()>();

        $i2 = virtualinvoke r47.<java.awt.image.SampleModel: int getHeight()>();

        $i3 = virtualinvoke r47.<java.awt.image.SinglePixelPackedSampleModel: int getScanlineStride()>();

        $r11 = newarray (int)[3];

        $i4 = $r9[0];

        $r11[0] = $i4;

        $i5 = $r9[1];

        $r11[1] = $i5;

        $i6 = $r9[2];

        $r11[2] = $i6;

        specialinvoke $r10.<java.awt.image.SinglePixelPackedSampleModel: void <init>(int,int,int,int,int[])>($i0, $i1, $i2, $i3, $r11);

        r48 = <org.apache.batik.ext.awt.image.GraphicsUtil: java.awt.image.ColorModel Linear_sRGB>;

        $r12 = virtualinvoke r7.<java.awt.image.Raster: java.awt.image.DataBuffer getDataBuffer()>();

        $r13 = new java.awt.Point;

        specialinvoke $r13.<java.awt.Point: void <init>(int,int)>(0, 0);

        $r14 = staticinvoke <java.awt.image.Raster: java.awt.image.WritableRaster createWritableRaster(java.awt.image.SampleModel,java.awt.image.DataBuffer,java.awt.Point)>($r10, $r12, $r13);

        $i7 = virtualinvoke r7.<java.awt.image.Raster: int getMinX()>();

        $i8 = virtualinvoke r7.<java.awt.image.Raster: int getSampleModelTranslateX()>();

        $i9 = $i7 - $i8;

        $i10 = virtualinvoke r7.<java.awt.image.Raster: int getMinY()>();

        $i11 = virtualinvoke r7.<java.awt.image.Raster: int getSampleModelTranslateY()>();

        $i12 = $i10 - $i11;

        $i13 = virtualinvoke r7.<java.awt.image.Raster: int getWidth()>();

        $i14 = virtualinvoke r7.<java.awt.image.Raster: int getHeight()>();

        $r15 = virtualinvoke $r14.<java.awt.image.WritableRaster: java.awt.image.WritableRaster createWritableChild(int,int,int,int,int,int,int[])>($i9, $i12, $i13, $i14, 0, 0, null);

        $r16 = new java.awt.image.BufferedImage;

        specialinvoke $r16.<java.awt.image.BufferedImage: void <init>(java.awt.image.ColorModel,java.awt.image.WritableRaster,boolean,java.util.Hashtable)>(r48, $r15, 0, null);

        r46 = $r16;

     label10:
        r49 = $r4;

        $z2 = virtualinvoke $r4.<java.awt.image.ColorModel: boolean hasAlpha()>();

        if $z2 == 0 goto label11;

        $z3 = virtualinvoke $r4.<java.awt.image.ColorModel: boolean isAlphaPremultiplied()>();

        if $z3 == 0 goto label11;

        $r20 = virtualinvoke r7.<java.awt.image.Raster: java.awt.Rectangle getBounds()>();

        $i20 = $r20.<java.awt.Rectangle: int width>;

        $i19 = $r20.<java.awt.Rectangle: int height>;

        $r21 = virtualinvoke $r4.<java.awt.image.ColorModel: java.awt.image.SampleModel createCompatibleSampleModel(int,int)>($i20, $i19);

        $r22 = new java.awt.Point;

        $i22 = $r20.<java.awt.Rectangle: int x>;

        $i21 = $r20.<java.awt.Rectangle: int y>;

        specialinvoke $r22.<java.awt.Point: void <init>(int,int)>($i22, $i21);

        $r23 = staticinvoke <java.awt.image.Raster: java.awt.image.WritableRaster createWritableRaster(java.awt.image.SampleModel,java.awt.Point)>($r21, $r22);

        r50 = $r23;

        interfaceinvoke r3.<java.awt.image.RenderedImage: java.awt.image.WritableRaster copyData(java.awt.image.WritableRaster)>($r23);

        r49 = staticinvoke <org.apache.batik.ext.awt.image.GraphicsUtil: java.awt.image.ColorModel coerceData(java.awt.image.WritableRaster,java.awt.image.ColorModel,boolean)>($r23, $r4, 0);

        goto label12;

     label11:
        $r17 = virtualinvoke r7.<java.awt.image.Raster: java.awt.Rectangle getBounds()>();

        $r18 = interfaceinvoke r3.<java.awt.image.RenderedImage: java.awt.image.Raster getData(java.awt.Rectangle)>($r17);

        r50 = staticinvoke <org.apache.batik.ext.awt.image.GraphicsUtil: java.awt.image.WritableRaster makeRasterWritable(java.awt.image.Raster)>($r18);

     label12:
        $r51 = new java.awt.image.BufferedImage;

        $r52 = virtualinvoke r50.<java.awt.image.WritableRaster: java.awt.image.WritableRaster createWritableTranslatedChild(int,int)>(0, 0);

        specialinvoke $r51.<java.awt.image.BufferedImage: void <init>(java.awt.image.ColorModel,java.awt.image.WritableRaster,boolean,java.util.Hashtable)>(r49, $r52, 0, null);

        $r53 = new java.awt.image.ColorConvertOp;

        specialinvoke $r53.<java.awt.image.ColorConvertOp: void <init>(java.awt.RenderingHints)>(null);

        virtualinvoke $r53.<java.awt.image.ColorConvertOp: java.awt.image.BufferedImage filter(java.awt.image.BufferedImage,java.awt.image.BufferedImage)>($r51, r46);

        $z7 = virtualinvoke $r6.<java.awt.image.ColorModel: boolean hasAlpha()>();

        if $z7 == 0 goto label13;

        $i15 = virtualinvoke $r5.<java.awt.image.SampleModel: int getNumBands()>();

        $i16 = $i15 - 1;

        $r19 = virtualinvoke r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: java.awt.image.SampleModel getSampleModel()>();

        $i17 = virtualinvoke $r19.<java.awt.image.SampleModel: int getNumBands()>();

        $i18 = $i17 - 1;

        staticinvoke <org.apache.batik.ext.awt.image.rendered.AbstractRed: void copyBand(java.awt.image.Raster,int,java.awt.image.WritableRaster,int)>(r50, $i16, r7, $i18);

     label13:
        return r7;
    }

    protected static java.awt.image.ColorModel fixColorModel(org.apache.batik.ext.awt.image.rendered.CachableRed)
    {
        java.awt.image.SampleModel $r2;
        org.apache.batik.ext.awt.image.rendered.CachableRed r0;
        java.awt.image.ColorModel $r1, $r3, $r4, $r5, $r6, $r7, $r8;
        int $i0;
        boolean $z0;

        r0 := @parameter0: org.apache.batik.ext.awt.image.rendered.CachableRed;

        $r1 = interfaceinvoke r0.<java.awt.image.RenderedImage: java.awt.image.ColorModel getColorModel()>();

        if $r1 == null goto label2;

        $z0 = virtualinvoke $r1.<java.awt.image.ColorModel: boolean hasAlpha()>();

        if $z0 == 0 goto label1;

        $r8 = <org.apache.batik.ext.awt.image.GraphicsUtil: java.awt.image.ColorModel Linear_sRGB_Unpre>;

        return $r8;

     label1:
        $r7 = <org.apache.batik.ext.awt.image.GraphicsUtil: java.awt.image.ColorModel Linear_sRGB>;

        return $r7;

     label2:
        $r2 = interfaceinvoke r0.<java.awt.image.RenderedImage: java.awt.image.SampleModel getSampleModel()>();

        $i0 = virtualinvoke $r2.<java.awt.image.SampleModel: int getNumBands()>();

        tableswitch($i0)
        {
            case 1: goto label3;
            case 2: goto label4;
            case 3: goto label5;
            default: goto label6;
        };

     label3:
        $r5 = <org.apache.batik.ext.awt.image.GraphicsUtil: java.awt.image.ColorModel Linear_sRGB>;

        return $r5;

     label4:
        $r4 = <org.apache.batik.ext.awt.image.GraphicsUtil: java.awt.image.ColorModel Linear_sRGB_Unpre>;

        return $r4;

     label5:
        $r3 = <org.apache.batik.ext.awt.image.GraphicsUtil: java.awt.image.ColorModel Linear_sRGB>;

        return $r3;

     label6:
        $r6 = <org.apache.batik.ext.awt.image.GraphicsUtil: java.awt.image.ColorModel Linear_sRGB_Unpre>;

        return $r6;
    }

    protected static java.awt.image.SampleModel fixSampleModel(org.apache.batik.ext.awt.image.rendered.CachableRed)
    {
        java.awt.image.SampleModel $r1;
        org.apache.batik.ext.awt.image.rendered.CachableRed r0;
        java.awt.image.ColorModel $r2;
        int[] $r4, $r6;
        int $i0, $i1, $i2, $i3, $i4, $i6, $i8;
        java.awt.image.SinglePixelPackedSampleModel $r7, $r8;
        boolean z0;

        r0 := @parameter0: org.apache.batik.ext.awt.image.rendered.CachableRed;

        $r1 = interfaceinvoke r0.<java.awt.image.RenderedImage: java.awt.image.SampleModel getSampleModel()>();

        $r2 = interfaceinvoke r0.<java.awt.image.RenderedImage: java.awt.image.ColorModel getColorModel()>();

        if $r2 == null goto label1;

        z0 = virtualinvoke $r2.<java.awt.image.ColorModel: boolean hasAlpha()>();

        goto label4;

     label1:
        $i0 = virtualinvoke $r1.<java.awt.image.SampleModel: int getNumBands()>();

        lookupswitch($i0)
        {
            case 1: goto label2;
            case 3: goto label2;
            default: goto label3;
        };

     label2:
        z0 = 0;

        goto label4;

     label3:
        z0 = 1;

     label4:
        if z0 == 0 goto label5;

        $r7 = new java.awt.image.SinglePixelPackedSampleModel;

        $i3 = virtualinvoke $r1.<java.awt.image.SampleModel: int getWidth()>();

        $i4 = virtualinvoke $r1.<java.awt.image.SampleModel: int getHeight()>();

        $r6 = newarray (int)[4];

        $r6[0] = 16711680;

        $i6 = (int) 65280;

        $r6[1] = $i6;

        $r6[2] = 255;

        $r6[3] = -16777216;

        specialinvoke $r7.<java.awt.image.SinglePixelPackedSampleModel: void <init>(int,int,int,int[])>(3, $i3, $i4, $r6);

        return $r7;

     label5:
        $r8 = new java.awt.image.SinglePixelPackedSampleModel;

        $i1 = virtualinvoke $r1.<java.awt.image.SampleModel: int getWidth()>();

        $i2 = virtualinvoke $r1.<java.awt.image.SampleModel: int getHeight()>();

        $r4 = newarray (int)[3];

        $r4[0] = 16711680;

        $i8 = (int) 65280;

        $r4[1] = $i8;

        $r4[2] = 255;

        specialinvoke $r8.<java.awt.image.SinglePixelPackedSampleModel: void <init>(int,int,int,int[])>(3, $i1, $i2, $r4);

        return $r8;
    }

    static void <clinit>()
    {
        long $l0;
        int[] $r0, $r1;
        int $i1, i2;
        double $d0, $d1, $d2, $d3;

        <org.apache.batik.ext.awt.image.rendered.Any2LsRGBRed: double LFACT> = 0.07739938080495357;

        <org.apache.batik.ext.awt.image.rendered.Any2LsRGBRed: double GAMMA> = 2.4;

        $r0 = newarray (int)[256];

        <org.apache.batik.ext.awt.image.rendered.Any2LsRGBRed: int[] sRGBToLsRGBLut> = $r0;

        i2 = 0;

        goto label2;

     label1:
        $d0 = (double) i2;

        $d1 = $d0 * 0.00392156862745098;

        $d2 = staticinvoke <org.apache.batik.ext.awt.image.rendered.Any2LsRGBRed: double sRGBToLsRGB(double)>($d1);

        $r1 = <org.apache.batik.ext.awt.image.rendered.Any2LsRGBRed: int[] sRGBToLsRGBLut>;

        $d3 = $d2 * 255.0;

        $l0 = staticinvoke <java.lang.Math: long round(double)>($d3);

        $i1 = (int) $l0;

        $r1[i2] = $i1;

        i2 = i2 + 1;

     label2:
        if i2 < 256 goto label1;

        return;
    }
}
