public class org.apache.batik.util.Base64DecodeStream extends java.io.InputStream
{
    java.io.InputStream src;
    private static final byte[] pem_array;
    byte[] decode_buffer;
    byte[] out_buffer;
    int out_offset;
    boolean EOF;

    public void <init>(java.io.InputStream)
    {
        byte[] $r1, $r2;
        org.apache.batik.util.Base64DecodeStream r0;
        java.io.InputStream r3;

        r0 := @this: org.apache.batik.util.Base64DecodeStream;

        r3 := @parameter0: java.io.InputStream;

        specialinvoke r0.<java.io.InputStream: void <init>()>();

        $r1 = newarray (byte)[4];

        r0.<org.apache.batik.util.Base64DecodeStream: byte[] decode_buffer> = $r1;

        $r2 = newarray (byte)[3];

        r0.<org.apache.batik.util.Base64DecodeStream: byte[] out_buffer> = $r2;

        r0.<org.apache.batik.util.Base64DecodeStream: int out_offset> = 3;

        r0.<org.apache.batik.util.Base64DecodeStream: boolean EOF> = 0;

        r0.<org.apache.batik.util.Base64DecodeStream: java.io.InputStream src> = r3;

        return;
    }

    public boolean markSupported()
    {
        org.apache.batik.util.Base64DecodeStream r0;

        r0 := @this: org.apache.batik.util.Base64DecodeStream;

        return 0;
    }

    public void close() throws java.io.IOException
    {
        org.apache.batik.util.Base64DecodeStream r0;

        r0 := @this: org.apache.batik.util.Base64DecodeStream;

        r0.<org.apache.batik.util.Base64DecodeStream: boolean EOF> = 1;

        return;
    }

    public int available() throws java.io.IOException
    {
        int $i0, $i1;
        org.apache.batik.util.Base64DecodeStream r0;

        r0 := @this: org.apache.batik.util.Base64DecodeStream;

        $i0 = r0.<org.apache.batik.util.Base64DecodeStream: int out_offset>;

        $i1 = 3 - $i0;

        return $i1;
    }

    public int read() throws java.io.IOException
    {
        byte[] $r1;
        short $s4, $s7;
        byte $b3;
        int $i0, $i1, $i2, $i6, $i8;
        org.apache.batik.util.Base64DecodeStream r0;
        boolean $z0, $z1;

        r0 := @this: org.apache.batik.util.Base64DecodeStream;

        $i0 = r0.<org.apache.batik.util.Base64DecodeStream: int out_offset>;

        if $i0 != 3 goto label2;

        $z0 = r0.<org.apache.batik.util.Base64DecodeStream: boolean EOF>;

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r0.<org.apache.batik.util.Base64DecodeStream: boolean getNextAtom()>();

        if $z1 == 0 goto label2;

     label1:
        r0.<org.apache.batik.util.Base64DecodeStream: boolean EOF> = 1;

        $i6 = (int) -1;

        return $i6;

     label2:
        $r1 = r0.<org.apache.batik.util.Base64DecodeStream: byte[] out_buffer>;

        $i1 = r0.<org.apache.batik.util.Base64DecodeStream: int out_offset>;

        $i2 = $i1 + 1;

        r0.<org.apache.batik.util.Base64DecodeStream: int out_offset> = $i2;

        $b3 = $r1[$i1];

        $s7 = (short) $b3;

        $s4 = $s7 & 255;

        $i8 = (int) $s4;

        return $i8;
    }

    public int read(byte[], int, int) throws java.io.IOException
    {
        byte[] r1, $r2;
        byte $b6;
        int i0, $i1, i2, $i3, $i4, $i5, i7, $i9;
        org.apache.batik.util.Base64DecodeStream r0;
        boolean $z0, $z1;

        r0 := @this: org.apache.batik.util.Base64DecodeStream;

        r1 := @parameter0: byte[];

        i2 := @parameter1: int;

        i0 := @parameter2: int;

        i7 = 0;

        goto label5;

     label1:
        $i1 = r0.<org.apache.batik.util.Base64DecodeStream: int out_offset>;

        if $i1 != 3 goto label4;

        $z0 = r0.<org.apache.batik.util.Base64DecodeStream: boolean EOF>;

        if $z0 != 0 goto label2;

        $z1 = virtualinvoke r0.<org.apache.batik.util.Base64DecodeStream: boolean getNextAtom()>();

        if $z1 == 0 goto label4;

     label2:
        r0.<org.apache.batik.util.Base64DecodeStream: boolean EOF> = 1;

        if i7 != 0 goto label3;

        $i9 = (int) -1;

        return $i9;

     label3:
        return i7;

     label4:
        $i5 = i2 + i7;

        $r2 = r0.<org.apache.batik.util.Base64DecodeStream: byte[] out_buffer>;

        $i3 = r0.<org.apache.batik.util.Base64DecodeStream: int out_offset>;

        $i4 = $i3 + 1;

        r0.<org.apache.batik.util.Base64DecodeStream: int out_offset> = $i4;

        $b6 = $r2[$i3];

        r1[$i5] = $b6;

        i7 = i7 + 1;

     label5:
        if i7 < i0 goto label1;

        return i7;
    }

    final boolean getNextAtom() throws java.io.IOException
    {
        byte[] $r1, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26;
        byte $b2, $b3, $b4, $b6, $b7, b9, $b10, b12, $b13, b15, $b16, b18, $b22, $b26, $b29, $b30, $b31, $b32, $b33, $b34;
        org.apache.batik.util.Base64DecodeStream r0;
        short $s8, $s11, $s14, $s17, $s44, $s46, $s48, $s50;
        int $i0, $i1, $i5, $i19, $i20, $i21, $i23, $i24, $i25, $i27, $i28, i35, i36, i37, $i38, $i40, $i41, $i42, $i43, $i45, $i47, $i49, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59;
        java.io.InputStream $r2;

        r0 := @this: org.apache.batik.util.Base64DecodeStream;

        i35 = 0;

        goto label6;

     label1:
        $r2 = r0.<org.apache.batik.util.Base64DecodeStream: java.io.InputStream src>;

        $r1 = r0.<org.apache.batik.util.Base64DecodeStream: byte[] decode_buffer>;

        $i0 = 4 - i35;

        $i1 = virtualinvoke $r2.<java.io.InputStream: int read(byte[],int,int)>($r1, i35, $i0);

        $i40 = (int) -1;

        if $i1 != $i40 goto label2;

        return 1;

     label2:
        i36 = i35;

        i37 = i35;

        goto label5;

     label3:
        $r3 = r0.<org.apache.batik.util.Base64DecodeStream: byte[] decode_buffer>;

        $b2 = $r3[i36];

        $i41 = (int) $b2;

        if $i41 == 10 goto label4;

        $r4 = r0.<org.apache.batik.util.Base64DecodeStream: byte[] decode_buffer>;

        $b3 = $r4[i36];

        $i42 = (int) $b3;

        if $i42 == 13 goto label4;

        $r5 = r0.<org.apache.batik.util.Base64DecodeStream: byte[] decode_buffer>;

        $b4 = $r5[i36];

        $i43 = (int) $b4;

        if $i43 == 32 goto label4;

        $r7 = r0.<org.apache.batik.util.Base64DecodeStream: byte[] decode_buffer>;

        $i5 = i37;

        i37 = i37 + 1;

        $r6 = r0.<org.apache.batik.util.Base64DecodeStream: byte[] decode_buffer>;

        $b6 = $r6[i36];

        $r7[$i5] = $b6;

     label4:
        i36 = i36 + 1;

     label5:
        $i38 = i35 + $i1;

        if i36 < $i38 goto label3;

        i35 = i37;

     label6:
        if i35 != 4 goto label1;

        $r9 = <org.apache.batik.util.Base64DecodeStream: byte[] pem_array>;

        $r8 = r0.<org.apache.batik.util.Base64DecodeStream: byte[] decode_buffer>;

        $b7 = $r8[0];

        $s44 = (short) $b7;

        $s8 = $s44 & 255;

        $i45 = (int) $s8;

        b9 = $r9[$i45];

        $r11 = <org.apache.batik.util.Base64DecodeStream: byte[] pem_array>;

        $r10 = r0.<org.apache.batik.util.Base64DecodeStream: byte[] decode_buffer>;

        $b10 = $r10[1];

        $s46 = (short) $b10;

        $s11 = $s46 & 255;

        $i47 = (int) $s11;

        b12 = $r11[$i47];

        $r13 = <org.apache.batik.util.Base64DecodeStream: byte[] pem_array>;

        $r12 = r0.<org.apache.batik.util.Base64DecodeStream: byte[] decode_buffer>;

        $b13 = $r12[2];

        $s48 = (short) $b13;

        $s14 = $s48 & 255;

        $i49 = (int) $s14;

        b15 = $r13[$i49];

        $r15 = <org.apache.batik.util.Base64DecodeStream: byte[] pem_array>;

        $r14 = r0.<org.apache.batik.util.Base64DecodeStream: byte[] decode_buffer>;

        $b16 = $r14[3];

        $s50 = (short) $b16;

        $s17 = $s50 & 255;

        $i51 = (int) $s17;

        b18 = $r15[$i51];

        $r16 = r0.<org.apache.batik.util.Base64DecodeStream: byte[] out_buffer>;

        $i52 = (int) b9;

        $i20 = $i52 << 2;

        $i53 = (int) b12;

        $i19 = $i53 >>> 4;

        $i21 = $i20 | $i19;

        $b22 = (byte) $i21;

        $r16[0] = $b22;

        $r17 = r0.<org.apache.batik.util.Base64DecodeStream: byte[] out_buffer>;

        $i54 = (int) b12;

        $i24 = $i54 << 4;

        $i55 = (int) b15;

        $i23 = $i55 >>> 2;

        $i25 = $i24 | $i23;

        $b26 = (byte) $i25;

        $r17[1] = $b26;

        $r18 = r0.<org.apache.batik.util.Base64DecodeStream: byte[] out_buffer>;

        $i56 = (int) b15;

        $i27 = $i56 << 6;

        $i57 = (int) b18;

        $i28 = $i27 | $i57;

        $b29 = (byte) $i28;

        $r18[2] = $b29;

        $r19 = r0.<org.apache.batik.util.Base64DecodeStream: byte[] decode_buffer>;

        $b30 = $r19[3];

        $i58 = (int) $b30;

        if $i58 == 61 goto label7;

        r0.<org.apache.batik.util.Base64DecodeStream: int out_offset> = 0;

        goto label9;

     label7:
        $r20 = r0.<org.apache.batik.util.Base64DecodeStream: byte[] decode_buffer>;

        $b31 = $r20[2];

        $i59 = (int) $b31;

        if $i59 != 61 goto label8;

        $r26 = r0.<org.apache.batik.util.Base64DecodeStream: byte[] out_buffer>;

        $r25 = r0.<org.apache.batik.util.Base64DecodeStream: byte[] out_buffer>;

        $b34 = $r25[0];

        $r26[2] = $b34;

        r0.<org.apache.batik.util.Base64DecodeStream: int out_offset> = 2;

        r0.<org.apache.batik.util.Base64DecodeStream: boolean EOF> = 1;

        goto label9;

     label8:
        $r22 = r0.<org.apache.batik.util.Base64DecodeStream: byte[] out_buffer>;

        $r21 = r0.<org.apache.batik.util.Base64DecodeStream: byte[] out_buffer>;

        $b32 = $r21[1];

        $r22[2] = $b32;

        $r24 = r0.<org.apache.batik.util.Base64DecodeStream: byte[] out_buffer>;

        $r23 = r0.<org.apache.batik.util.Base64DecodeStream: byte[] out_buffer>;

        $b33 = $r23[0];

        $r24[1] = $b33;

        r0.<org.apache.batik.util.Base64DecodeStream: int out_offset> = 1;

        r0.<org.apache.batik.util.Base64DecodeStream: boolean EOF> = 1;

     label9:
        return 0;
    }

    static void <clinit>()
    {
        byte[] $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7;
        byte $b2, $b5, $b8, $b10, $b11;
        int $i0, $i1, $i3, $i4, $i6, $i7, $i9, i12, i13, i14, i15, i16, i17;

        $r0 = newarray (byte)[256];

        <org.apache.batik.util.Base64DecodeStream: byte[] pem_array> = $r0;

        i12 = 0;

        goto label2;

     label1:
        $r2 = <org.apache.batik.util.Base64DecodeStream: byte[] pem_array>;

        $r2[i12] = -1;

        i12 = i12 + 1;

     label2:
        $r1 = <org.apache.batik.util.Base64DecodeStream: byte[] pem_array>;

        $i0 = lengthof $r1;

        if i12 < $i0 goto label1;

        i13 = 0;

        i14 = 65;

        goto label4;

     label3:
        $r3 = <org.apache.batik.util.Base64DecodeStream: byte[] pem_array>;

        $i1 = i13;

        i13 = i13 + 1;

        $b2 = (byte) $i1;

        $r3[i14] = $b2;

        $i3 = i14 + 1;

        i14 = (char) $i3;

     label4:
        if i14 <= 90 goto label3;

        i15 = 97;

        goto label6;

     label5:
        $r4 = <org.apache.batik.util.Base64DecodeStream: byte[] pem_array>;

        $i4 = i13;

        i13 = i13 + 1;

        $b5 = (byte) $i4;

        $r4[i15] = $b5;

        $i6 = i15 + 1;

        i15 = (char) $i6;

     label6:
        if i15 <= 122 goto label5;

        i16 = 48;

        goto label8;

     label7:
        $r5 = <org.apache.batik.util.Base64DecodeStream: byte[] pem_array>;

        $i7 = i13;

        i13 = i13 + 1;

        $b8 = (byte) $i7;

        $r5[i16] = $b8;

        $i9 = i16 + 1;

        i16 = (char) $i9;

     label8:
        if i16 <= 57 goto label7;

        $r6 = <org.apache.batik.util.Base64DecodeStream: byte[] pem_array>;

        i17 = i13 + 1;

        $b10 = (byte) i13;

        $r6[43] = $b10;

        $r7 = <org.apache.batik.util.Base64DecodeStream: byte[] pem_array>;

        $b11 = (byte) i17;

        $r7[47] = $b11;

        return;
    }
}
