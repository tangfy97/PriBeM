public class org.springframework.beans.factory.support.BeanDefinitionReaderUtils extends java.lang.Object
{
    public static final java.lang.String GENERATED_BEAN_NAME_SEPARATOR;

    public void <init>()
    {
        org.springframework.beans.factory.support.BeanDefinitionReaderUtils r0;

        r0 := @this: org.springframework.beans.factory.support.BeanDefinitionReaderUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static org.springframework.beans.factory.support.AbstractBeanDefinition createBeanDefinition(java.lang.String, java.lang.String, java.lang.ClassLoader) throws java.lang.ClassNotFoundException
    {
        java.lang.Class $r4;
        java.lang.String r1, r2;
        java.lang.ClassLoader r3;
        org.springframework.beans.factory.support.GenericBeanDefinition $r0;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.ClassLoader;

        $r0 = new org.springframework.beans.factory.support.GenericBeanDefinition;

        specialinvoke $r0.<org.springframework.beans.factory.support.GenericBeanDefinition: void <init>()>();

        virtualinvoke $r0.<org.springframework.beans.factory.support.GenericBeanDefinition: void setParentName(java.lang.String)>(r1);

        if r2 == null goto label2;

        if r3 == null goto label1;

        $r4 = staticinvoke <org.springframework.util.ClassUtils: java.lang.Class forName(java.lang.String,java.lang.ClassLoader)>(r2, r3);

        virtualinvoke $r0.<org.springframework.beans.factory.support.GenericBeanDefinition: void setBeanClass(java.lang.Class)>($r4);

        goto label2;

     label1:
        virtualinvoke $r0.<org.springframework.beans.factory.support.GenericBeanDefinition: void setBeanClassName(java.lang.String)>(r2);

     label2:
        return $r0;
    }

    public static java.lang.String generateBeanName(org.springframework.beans.factory.config.BeanDefinition, org.springframework.beans.factory.support.BeanDefinitionRegistry, boolean) throws org.springframework.beans.factory.BeanDefinitionStoreException
    {
        org.springframework.beans.factory.support.BeanDefinitionRegistry r6;
        int i0, $i2, $i4;
        org.springframework.beans.factory.config.BeanDefinition r0;
        java.lang.String $r1, $r3, $r8, $r10, $r13, $r14, $r16, $r17, $r20, $r21, r23, r24;
        boolean z0, $z1, $z2;
        org.springframework.beans.factory.BeanDefinitionStoreException $r27;
        java.lang.StringBuilder $r4, $r5, $r9, $r11, $r18, $r22, $r25, $r26, $r28, $r29;

        r0 := @parameter0: org.springframework.beans.factory.config.BeanDefinition;

        r6 := @parameter1: org.springframework.beans.factory.support.BeanDefinitionRegistry;

        z0 := @parameter2: boolean;

        $r1 = interfaceinvoke r0.<org.springframework.beans.factory.config.BeanDefinition: java.lang.String getBeanClassName()>();

        r23 = $r1;

        if $r1 != null goto label2;

        $r13 = interfaceinvoke r0.<org.springframework.beans.factory.config.BeanDefinition: java.lang.String getParentName()>();

        if $r13 == null goto label1;

        $r25 = new java.lang.StringBuilder;

        $r20 = interfaceinvoke r0.<org.springframework.beans.factory.config.BeanDefinition: java.lang.String getParentName()>();

        $r21 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r20);

        specialinvoke $r25.<java.lang.StringBuilder: void <init>(java.lang.String)>($r21);

        $r22 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("$child");

        r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label2;

     label1:
        $r14 = interfaceinvoke r0.<org.springframework.beans.factory.config.BeanDefinition: java.lang.String getFactoryBeanName()>();

        if $r14 == null goto label2;

        $r26 = new java.lang.StringBuilder;

        $r16 = interfaceinvoke r0.<org.springframework.beans.factory.config.BeanDefinition: java.lang.String getFactoryBeanName()>();

        $r17 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r16);

        specialinvoke $r26.<java.lang.StringBuilder: void <init>(java.lang.String)>($r17);

        $r18 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("$created");

        r23 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

     label2:
        $z2 = staticinvoke <org.springframework.util.StringUtils: boolean hasText(java.lang.String)>(r23);

        if $z2 != 0 goto label3;

        $r27 = new org.springframework.beans.factory.BeanDefinitionStoreException;

        specialinvoke $r27.<org.springframework.beans.factory.BeanDefinitionStoreException: void <init>(java.lang.String)>("Unnamed bean definition specifies neither \'class\' nor \'parent\' nor \'factory-bean\' - can\'t generate bean name");

        throw $r27;

     label3:
        r24 = r23;

        if z0 == 0 goto label4;

        $r28 = new java.lang.StringBuilder;

        $r8 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r23);

        specialinvoke $r28.<java.lang.StringBuilder: void <init>(java.lang.String)>($r8);

        $r9 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("#");

        $r10 = staticinvoke <org.springframework.util.ObjectUtils: java.lang.String getIdentityHexString(java.lang.Object)>(r0);

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        r24 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label7;

     label4:
        $i2 = (int) -1;

        i0 = $i2;

        goto label6;

     label5:
        i0 = i0 + 1;

        $r29 = new java.lang.StringBuilder;

        $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r23);

        specialinvoke $r29.<java.lang.StringBuilder: void <init>(java.lang.String)>($r3);

        $r4 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("#");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        r24 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

     label6:
        $i4 = (int) -1;

        if i0 == $i4 goto label5;

        $z1 = interfaceinvoke r6.<org.springframework.beans.factory.support.BeanDefinitionRegistry: boolean containsBeanDefinition(java.lang.String)>(r24);

        if $z1 != 0 goto label5;

     label7:
        return r24;
    }

    public static java.lang.String generateBeanName(org.springframework.beans.factory.config.BeanDefinition, org.springframework.beans.factory.support.BeanDefinitionRegistry) throws org.springframework.beans.factory.BeanDefinitionStoreException
    {
        org.springframework.beans.factory.config.BeanDefinition r0;
        java.lang.String $r2;
        org.springframework.beans.factory.support.BeanDefinitionRegistry r1;

        r0 := @parameter0: org.springframework.beans.factory.config.BeanDefinition;

        r1 := @parameter1: org.springframework.beans.factory.support.BeanDefinitionRegistry;

        $r2 = staticinvoke <org.springframework.beans.factory.support.BeanDefinitionReaderUtils: java.lang.String generateBeanName(org.springframework.beans.factory.config.BeanDefinition,org.springframework.beans.factory.support.BeanDefinitionRegistry,boolean)>(r0, r1, 0);

        return $r2;
    }

    public static void registerBeanDefinition(org.springframework.beans.factory.config.BeanDefinitionHolder, org.springframework.beans.factory.support.BeanDefinitionRegistry) throws org.springframework.beans.factory.BeanDefinitionStoreException
    {
        java.lang.String[] $r4;
        org.springframework.beans.factory.support.BeanDefinitionRegistry r2;
        org.springframework.beans.factory.config.BeanDefinitionHolder r0;
        int i0, i1;
        org.springframework.beans.factory.config.BeanDefinition $r3;
        java.lang.String $r1, r5;

        r0 := @parameter0: org.springframework.beans.factory.config.BeanDefinitionHolder;

        r2 := @parameter1: org.springframework.beans.factory.support.BeanDefinitionRegistry;

        $r1 = virtualinvoke r0.<org.springframework.beans.factory.config.BeanDefinitionHolder: java.lang.String getBeanName()>();

        $r3 = virtualinvoke r0.<org.springframework.beans.factory.config.BeanDefinitionHolder: org.springframework.beans.factory.config.BeanDefinition getBeanDefinition()>();

        interfaceinvoke r2.<org.springframework.beans.factory.support.BeanDefinitionRegistry: void registerBeanDefinition(java.lang.String,org.springframework.beans.factory.config.BeanDefinition)>($r1, $r3);

        $r4 = virtualinvoke r0.<org.springframework.beans.factory.config.BeanDefinitionHolder: java.lang.String[] getAliases()>();

        if $r4 == null goto label3;

        i0 = lengthof $r4;

        i1 = 0;

        goto label2;

     label1:
        r5 = $r4[i1];

        interfaceinvoke r2.<org.springframework.beans.factory.support.BeanDefinitionRegistry: void registerAlias(java.lang.String,java.lang.String)>($r1, r5);

        i1 = i1 + 1;

     label2:
        if i1 < i0 goto label1;

     label3:
        return;
    }

    public static java.lang.String registerWithGeneratedName(org.springframework.beans.factory.support.AbstractBeanDefinition, org.springframework.beans.factory.support.BeanDefinitionRegistry) throws org.springframework.beans.factory.BeanDefinitionStoreException
    {
        org.springframework.beans.factory.support.AbstractBeanDefinition r0;
        java.lang.String $r2;
        org.springframework.beans.factory.support.BeanDefinitionRegistry r1;

        r0 := @parameter0: org.springframework.beans.factory.support.AbstractBeanDefinition;

        r1 := @parameter1: org.springframework.beans.factory.support.BeanDefinitionRegistry;

        $r2 = staticinvoke <org.springframework.beans.factory.support.BeanDefinitionReaderUtils: java.lang.String generateBeanName(org.springframework.beans.factory.config.BeanDefinition,org.springframework.beans.factory.support.BeanDefinitionRegistry,boolean)>(r0, r1, 0);

        interfaceinvoke r1.<org.springframework.beans.factory.support.BeanDefinitionRegistry: void registerBeanDefinition(java.lang.String,org.springframework.beans.factory.config.BeanDefinition)>($r2, r0);

        return $r2;
    }

    public static void <clinit>()
    {
        <org.springframework.beans.factory.support.BeanDefinitionReaderUtils: java.lang.String GENERATED_BEAN_NAME_SEPARATOR> = "#";

        return;
    }
}
