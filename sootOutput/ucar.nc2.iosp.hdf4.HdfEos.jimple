public class ucar.nc2.iosp.hdf4.HdfEos extends java.lang.Object
{
    private static org.slf4j.Logger log;
    static boolean showWork;
    private static final java.lang.String GEOLOC_FIELDS;
    private static final java.lang.String DATA_FIELDS;
    static final boolean $assertionsDisabled;

    public void <init>()
    {
        ucar.nc2.iosp.hdf4.HdfEos r0;

        r0 := @this: ucar.nc2.iosp.hdf4.HdfEos;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static boolean amendFromODL(ucar.nc2.NetcdfFile, ucar.nc2.Group) throws java.io.IOException
    {
        ucar.nc2.iosp.hdf4.HdfEos $r2;
        java.lang.String $r1;
        ucar.nc2.NetcdfFile r3;
        ucar.nc2.Group r0;

        r3 := @parameter0: ucar.nc2.NetcdfFile;

        r0 := @parameter1: ucar.nc2.Group;

        $r1 = staticinvoke <ucar.nc2.iosp.hdf4.HdfEos: java.lang.String getStructMetadata(ucar.nc2.Group)>(r0);

        if $r1 != null goto label1;

        return 0;

     label1:
        $r2 = new ucar.nc2.iosp.hdf4.HdfEos;

        specialinvoke $r2.<ucar.nc2.iosp.hdf4.HdfEos: void <init>()>();

        specialinvoke $r2.<ucar.nc2.iosp.hdf4.HdfEos: void amendFromODL(ucar.nc2.NetcdfFile,java.lang.String)>(r3, $r1);

        return 1;
    }

    public static void getEosInfo(ucar.nc2.NetcdfFile, ucar.nc2.Group, java.util.Formatter) throws java.io.IOException
    {
        java.lang.Object[] $r3, $r6, $r8;
        ucar.nc2.iosp.hdf4.ODLparser $r4;
        java.io.ByteArrayOutputStream $r5;
        ucar.nc2.Group r0;
        java.util.Formatter r2;
        java.lang.String $r1, $r7, $r9;
        ucar.nc2.NetcdfFile r10;

        r10 := @parameter0: ucar.nc2.NetcdfFile;

        r0 := @parameter1: ucar.nc2.Group;

        r2 := @parameter2: java.util.Formatter;

        $r1 = staticinvoke <ucar.nc2.iosp.hdf4.HdfEos: java.lang.String getStructMetadata(ucar.nc2.Group)>(r0);

        if $r1 != null goto label1;

        $r8 = newarray (java.lang.Object)[1];

        $r9 = virtualinvoke r0.<ucar.nc2.Group: java.lang.String getName()>();

        $r8[0] = $r9;

        virtualinvoke r2.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("No StructMetadata variables in group %s %n", $r8);

        return;

     label1:
        $r3 = newarray (java.lang.Object)[1];

        $r3[0] = $r1;

        virtualinvoke r2.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("raw = %n%s%n", $r3);

        $r4 = new ucar.nc2.iosp.hdf4.ODLparser;

        specialinvoke $r4.<ucar.nc2.iosp.hdf4.ODLparser: void <init>()>();

        virtualinvoke $r4.<ucar.nc2.iosp.hdf4.ODLparser: org.jdom.Element parseFromString(java.lang.String)>($r1);

        $r5 = new java.io.ByteArrayOutputStream;

        specialinvoke $r5.<java.io.ByteArrayOutputStream: void <init>(int)>(1000000);

        virtualinvoke $r4.<ucar.nc2.iosp.hdf4.ODLparser: void showDoc(java.io.OutputStream)>($r5);

        $r6 = newarray (java.lang.Object)[1];

        $r7 = virtualinvoke $r5.<java.io.ByteArrayOutputStream: java.lang.String toString()>();

        $r6[0] = $r7;

        virtualinvoke r2.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("parsed = %n%s%n", $r6);

        return;
    }

    private static java.lang.String getStructMetadata(ucar.nc2.Group) throws java.io.IOException
    {
        ucar.nc2.Group r0;
        ucar.ma2.Array $r9;
        ucar.ma2.ArrayChar $r10;
        int i0, $i2;
        java.lang.StringBuilder $r2, $r3, r7, $r13, $r14;
        ucar.nc2.Variable $r5;
        java.lang.String $r4, r8, $r11, $r12;

        r0 := @parameter0: ucar.nc2.Group;

        r7 = null;

        r8 = null;

        i0 = 0;

     label1:
        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("StructMetadata.");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $r5 = virtualinvoke r0.<ucar.nc2.Group: ucar.nc2.Variable findVariable(java.lang.String)>($r4);

        if $r5 != null goto label2;

        goto label5;

     label2:
        if r8 == null goto label3;

        if r7 != null goto label3;

        $r14 = new java.lang.StringBuilder;

        $i2 = (int) 64000;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>(int)>($i2);

        r7 = $r14;

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r8);

     label3:
        $r9 = virtualinvoke $r5.<ucar.nc2.Variable: ucar.ma2.Array read()>();

        $r10 = (ucar.ma2.ArrayChar) $r9;

        $r11 = virtualinvoke $r10.<ucar.ma2.ArrayChar: java.lang.String getString()>();

        r8 = $r11;

        if r7 == null goto label4;

        virtualinvoke r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

     label4:
        i0 = i0 + 1;

        goto label1;

     label5:
        if r7 == null goto label6;

        $r12 = virtualinvoke r7.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label7;

     label6:
        $r12 = r8;

     label7:
        return $r12;
    }

    private void amendFromODL(ucar.nc2.NetcdfFile, java.lang.String) throws java.io.IOException
    {
        ucar.nc2.iosp.hdf4.HdfEos r21;
        ucar.nc2.constants.FeatureType r68;
        ucar.nc2.Group $r1, $r22, $r39, $r56;
        ucar.nc2.Attribute $r8;
        java.lang.StringBuilder $r10, $r12, $r14, $r23, $r25, $r26, $r28, $r30, $r32, $r40, $r42, $r43, $r45, $r47, $r49, $r57, $r59, $r60, $r62, $r64, $r66;
        java.lang.String r3, $r9, $r13, $r15, $r20, $r27, $r31, $r33, $r38, $r44, $r48, $r50, $r55, $r61, $r65, $r67;
        org.jdom.Element $r4, $r5, $r6, $r7, $r19, $r37, $r54, r69, r70, r71;
        ucar.nc2.iosp.hdf4.ODLparser $r2;
        boolean $z0, $z1, $z2, $z3;
        java.util.List $r16, $r34, $r51;
        ucar.nc2.NetcdfFile r0;
        java.io.PrintStream $r11;
        org.slf4j.Logger $r24, $r29, $r41, $r46, $r58, $r63;
        java.util.Iterator $r17, $r35, $r52;
        java.lang.Object $r18, $r36, $r53;

        r21 := @this: ucar.nc2.iosp.hdf4.HdfEos;

        r0 := @parameter0: ucar.nc2.NetcdfFile;

        r3 := @parameter1: java.lang.String;

        $r1 = virtualinvoke r0.<ucar.nc2.NetcdfFile: ucar.nc2.Group getRootGroup()>();

        $r2 = new ucar.nc2.iosp.hdf4.ODLparser;

        specialinvoke $r2.<ucar.nc2.iosp.hdf4.ODLparser: void <init>()>();

        $r4 = virtualinvoke $r2.<ucar.nc2.iosp.hdf4.ODLparser: org.jdom.Element parseFromString(java.lang.String)>(r3);

        r68 = null;

        $r5 = virtualinvoke $r4.<org.jdom.Element: org.jdom.Element getChild(java.lang.String)>("SwathStructure");

        if $r5 == null goto label05;

        $r51 = virtualinvoke $r5.<org.jdom.Element: java.util.List getChildren()>();

        $r52 = interfaceinvoke $r51.<java.util.List: java.util.Iterator iterator()>();

     label01:
        $z1 = interfaceinvoke $r52.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label05;

        $r53 = interfaceinvoke $r52.<java.util.Iterator: java.lang.Object next()>();

        r69 = (org.jdom.Element) $r53;

        $r54 = virtualinvoke r69.<org.jdom.Element: org.jdom.Element getChild(java.lang.String)>("SwathName");

        if $r54 != null goto label02;

        $r63 = <ucar.nc2.iosp.hdf4.HdfEos: org.slf4j.Logger log>;

        $r62 = new java.lang.StringBuilder;

        specialinvoke $r62.<java.lang.StringBuilder: void <init>()>();

        $r64 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No SwathName element in ");

        $r65 = virtualinvoke r69.<org.jdom.Element: java.lang.String getName()>();

        $r66 = virtualinvoke $r64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r65);

        $r67 = virtualinvoke $r66.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r63.<org.slf4j.Logger: void warn(java.lang.String)>($r67);

        goto label01;

     label02:
        $r55 = virtualinvoke $r54.<org.jdom.Element: java.lang.String getText()>();

        $r56 = specialinvoke r21.<ucar.nc2.iosp.hdf4.HdfEos: ucar.nc2.Group findGroupNested(ucar.nc2.Group,java.lang.String)>($r1, $r55);

        if $r56 == null goto label03;

        r68 = specialinvoke r21.<ucar.nc2.iosp.hdf4.HdfEos: ucar.nc2.constants.FeatureType amendSwath(ucar.nc2.NetcdfFile,org.jdom.Element,ucar.nc2.Group)>(r0, r69, $r56);

        goto label04;

     label03:
        $r58 = <ucar.nc2.iosp.hdf4.HdfEos: org.slf4j.Logger log>;

        $r57 = new java.lang.StringBuilder;

        specialinvoke $r57.<java.lang.StringBuilder: void <init>()>();

        $r59 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cant find swath group ");

        $r60 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r55);

        $r61 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r58.<org.slf4j.Logger: void warn(java.lang.String)>($r61);

     label04:
        goto label01;

     label05:
        $r6 = virtualinvoke $r4.<org.jdom.Element: org.jdom.Element getChild(java.lang.String)>("GridStructure");

        if $r6 == null goto label10;

        $r34 = virtualinvoke $r6.<org.jdom.Element: java.util.List getChildren()>();

        $r35 = interfaceinvoke $r34.<java.util.List: java.util.Iterator iterator()>();

     label06:
        $z2 = interfaceinvoke $r35.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label10;

        $r36 = interfaceinvoke $r35.<java.util.Iterator: java.lang.Object next()>();

        r70 = (org.jdom.Element) $r36;

        $r37 = virtualinvoke r70.<org.jdom.Element: org.jdom.Element getChild(java.lang.String)>("GridName");

        if $r37 != null goto label07;

        $r46 = <ucar.nc2.iosp.hdf4.HdfEos: org.slf4j.Logger log>;

        $r45 = new java.lang.StringBuilder;

        specialinvoke $r45.<java.lang.StringBuilder: void <init>()>();

        $r47 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Ne GridName element in ");

        $r48 = virtualinvoke r70.<org.jdom.Element: java.lang.String getName()>();

        $r49 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r48);

        $r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r46.<org.slf4j.Logger: void warn(java.lang.String)>($r50);

        goto label06;

     label07:
        $r38 = virtualinvoke $r37.<org.jdom.Element: java.lang.String getText()>();

        $r39 = specialinvoke r21.<ucar.nc2.iosp.hdf4.HdfEos: ucar.nc2.Group findGroupNested(ucar.nc2.Group,java.lang.String)>($r1, $r38);

        if $r39 == null goto label08;

        r68 = specialinvoke r21.<ucar.nc2.iosp.hdf4.HdfEos: ucar.nc2.constants.FeatureType amendGrid(org.jdom.Element,ucar.nc2.Group)>(r70, $r39);

        goto label09;

     label08:
        $r41 = <ucar.nc2.iosp.hdf4.HdfEos: org.slf4j.Logger log>;

        $r40 = new java.lang.StringBuilder;

        specialinvoke $r40.<java.lang.StringBuilder: void <init>()>();

        $r42 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cant find Grid group ");

        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r38);

        $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r41.<org.slf4j.Logger: void warn(java.lang.String)>($r44);

     label09:
        goto label06;

     label10:
        $r7 = virtualinvoke $r4.<org.jdom.Element: org.jdom.Element getChild(java.lang.String)>("PointStructure");

        if $r7 == null goto label15;

        $r16 = virtualinvoke $r7.<org.jdom.Element: java.util.List getChildren()>();

        $r17 = interfaceinvoke $r16.<java.util.List: java.util.Iterator iterator()>();

     label11:
        $z3 = interfaceinvoke $r17.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label15;

        $r18 = interfaceinvoke $r17.<java.util.Iterator: java.lang.Object next()>();

        r71 = (org.jdom.Element) $r18;

        $r19 = virtualinvoke r71.<org.jdom.Element: org.jdom.Element getChild(java.lang.String)>("PointName");

        if $r19 != null goto label12;

        $r29 = <ucar.nc2.iosp.hdf4.HdfEos: org.slf4j.Logger log>;

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        $r30 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No PointName element in ");

        $r31 = virtualinvoke r71.<org.jdom.Element: java.lang.String getName()>();

        $r32 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r31);

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r29.<org.slf4j.Logger: void warn(java.lang.String)>($r33);

        goto label11;

     label12:
        $r20 = virtualinvoke $r19.<org.jdom.Element: java.lang.String getText()>();

        $r22 = specialinvoke r21.<ucar.nc2.iosp.hdf4.HdfEos: ucar.nc2.Group findGroupNested(ucar.nc2.Group,java.lang.String)>($r1, $r20);

        if $r22 == null goto label13;

        r68 = <ucar.nc2.constants.FeatureType: ucar.nc2.constants.FeatureType POINT>;

        goto label14;

     label13:
        $r24 = <ucar.nc2.iosp.hdf4.HdfEos: org.slf4j.Logger log>;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r25 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cant find Point group ");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r24.<org.slf4j.Logger: void warn(java.lang.String)>($r27);

     label14:
        goto label11;

     label15:
        if r68 == null goto label17;

        $z0 = <ucar.nc2.iosp.hdf4.HdfEos: boolean showWork>;

        if $z0 == 0 goto label16;

        $r11 = <java.lang.System: java.io.PrintStream out>;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("***EOS featureType= ");

        $r13 = virtualinvoke r68.<ucar.nc2.constants.FeatureType: java.lang.String toString()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r11.<java.io.PrintStream: void println(java.lang.String)>($r15);

     label16:
        $r8 = new ucar.nc2.Attribute;

        $r9 = virtualinvoke r68.<ucar.nc2.constants.FeatureType: java.lang.String toString()>();

        specialinvoke $r8.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.String)>("cdm_data_type", $r9);

        virtualinvoke $r1.<ucar.nc2.Group: void addAttribute(ucar.nc2.Attribute)>($r8);

     label17:
        return;
    }

    private ucar.nc2.constants.FeatureType amendSwath(ucar.nc2.NetcdfFile, org.jdom.Element, ucar.nc2.Group)
    {
        ucar.nc2.iosp.hdf4.HdfEos r19;
        ucar.nc2.constants.AxisType $r34, $r35, $r36;
        ucar.nc2.constants.FeatureType r80;
        ucar.nc2.Group r8, $r9, $r86;
        ucar.nc2.Attribute $r58;
        java.lang.StringBuilder $r20, $r22, $r23, $r67, $r69, $r70, $r71, $r72;
        java.lang.Object[] $r39, $r59, $r75, $r78;
        long $l3;
        java.lang.AssertionError $r41;
        java.util.ArrayList $r0;
        java.lang.String $r15, $r24, $r32, $r44, $r45, $r47, $r48, $r50, $r52, $r63, $r64, $r66, $r73;
        ucar.ma2.Array $r57;
        ucar.nc2.Dimension $r74, $r77;
        org.jdom.Element r1, $r2, $r5, $r10, $r14, $r17, $r25, $r31, $r37, $r43, $r46, $r49, $r51, $r62, $r65, r81, r82, r85, r87;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        ucar.nc2.Variable[] $r28;
        ucar.ma2.DataType $r55, $r56;
        java.util.List $r3, $r6, $r11, $r18, $r26, $r29, $r38;
        ucar.nc2.NetcdfFile r54;
        int $i0, $i1, $i2, $i4, i5;
        ucar.nc2.Variable $r16, $r33, $r53, r83, r84;
        double $d0, $d1;
        java.io.PrintStream $r40, $r60, $r76, $r79;
        org.slf4j.Logger $r21, $r68;
        java.util.Iterator $r4, $r7, $r12, $r27;
        java.lang.Object $r13, $r30, $r42, $r61;

        r19 := @this: ucar.nc2.iosp.hdf4.HdfEos;

        r54 := @parameter0: ucar.nc2.NetcdfFile;

        r1 := @parameter1: org.jdom.Element;

        r8 := @parameter2: ucar.nc2.Group;

        r80 = <ucar.nc2.constants.FeatureType: ucar.nc2.constants.FeatureType SWATH>;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r2 = virtualinvoke r1.<org.jdom.Element: org.jdom.Element getChild(java.lang.String)>("Dimension");

        $r3 = virtualinvoke $r2.<org.jdom.Element: java.util.List getChildren()>();

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label01:
        $z8 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z8 == 0 goto label06;

        $r61 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r81 = (org.jdom.Element) $r61;

        $r62 = virtualinvoke r81.<org.jdom.Element: org.jdom.Element getChild(java.lang.String)>("DimensionName");

        $r63 = virtualinvoke $r62.<org.jdom.Element: java.lang.String getText()>();

        $r64 = staticinvoke <ucar.nc2.iosp.hdf4.H4header: java.lang.String createValidObjectName(java.lang.String)>($r63);

        $z5 = virtualinvoke $r64.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("scalar");

        if $z5 == 0 goto label02;

        goto label01;

     label02:
        $r65 = virtualinvoke r81.<org.jdom.Element: org.jdom.Element getChild(java.lang.String)>("Size");

        $r66 = virtualinvoke $r65.<org.jdom.Element: java.lang.String getText()>();

        $i4 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r66);

        if $i4 <= 0 goto label04;

        $r77 = new ucar.nc2.Dimension;

        specialinvoke $r77.<ucar.nc2.Dimension: void <init>(java.lang.String,int)>($r64, $i4);

        virtualinvoke r8.<ucar.nc2.Group: void addDimension(ucar.nc2.Dimension)>($r77);

        $z7 = <ucar.nc2.iosp.hdf4.HdfEos: boolean showWork>;

        if $z7 == 0 goto label03;

        $r79 = <java.lang.System: java.io.PrintStream out>;

        $r78 = newarray (java.lang.Object)[1];

        $r78[0] = $r77;

        virtualinvoke $r79.<java.io.PrintStream: java.io.PrintStream printf(java.lang.String,java.lang.Object[])>(" Add dimension %s %n", $r78);

     label03:
        goto label05;

     label04:
        $r68 = <ucar.nc2.iosp.hdf4.HdfEos: org.slf4j.Logger log>;

        $r67 = new java.lang.StringBuilder;

        specialinvoke $r67.<java.lang.StringBuilder: void <init>()>();

        $r69 = virtualinvoke $r67.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Dimension ");

        $r70 = virtualinvoke $r69.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r64);

        $r71 = virtualinvoke $r70.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" has size ");

        $r72 = virtualinvoke $r71.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r66);

        $r73 = virtualinvoke $r72.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r68.<org.slf4j.Logger: void warn(java.lang.String)>($r73);

        $r74 = new ucar.nc2.Dimension;

        specialinvoke $r74.<ucar.nc2.Dimension: void <init>(java.lang.String,int)>($r64, 1);

        virtualinvoke $r74.<ucar.nc2.Dimension: void setGroup(ucar.nc2.Group)>(r8);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r74);

        $z6 = <ucar.nc2.iosp.hdf4.HdfEos: boolean showWork>;

        if $z6 == 0 goto label05;

        $r76 = <java.lang.System: java.io.PrintStream out>;

        $r75 = newarray (java.lang.Object)[1];

        $r75[0] = $r74;

        virtualinvoke $r76.<java.io.PrintStream: java.io.PrintStream printf(java.lang.String,java.lang.Object[])>(" Add dimension %s %n", $r75);

     label05:
        goto label01;

     label06:
        $r5 = virtualinvoke r1.<org.jdom.Element: org.jdom.Element getChild(java.lang.String)>("DimensionMap");

        $r6 = virtualinvoke $r5.<org.jdom.Element: java.util.List getChildren()>();

        $r7 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();

     label07:
        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label09;

        $r42 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r82 = (org.jdom.Element) $r42;

        $r43 = virtualinvoke r82.<org.jdom.Element: org.jdom.Element getChild(java.lang.String)>("GeoDimension");

        $r44 = virtualinvoke $r43.<org.jdom.Element: java.lang.String getText()>();

        $r45 = staticinvoke <ucar.nc2.iosp.hdf4.H4header: java.lang.String createValidObjectName(java.lang.String)>($r44);

        $r46 = virtualinvoke r82.<org.jdom.Element: org.jdom.Element getChild(java.lang.String)>("DataDimension");

        $r47 = virtualinvoke $r46.<org.jdom.Element: java.lang.String getText()>();

        $r48 = staticinvoke <ucar.nc2.iosp.hdf4.H4header: java.lang.String createValidObjectName(java.lang.String)>($r47);

        $r49 = virtualinvoke r82.<org.jdom.Element: org.jdom.Element getChild(java.lang.String)>("Offset");

        $r50 = virtualinvoke $r49.<org.jdom.Element: java.lang.String getText()>();

        $r51 = virtualinvoke r82.<org.jdom.Element: org.jdom.Element getChild(java.lang.String)>("Increment");

        $r52 = virtualinvoke $r51.<org.jdom.Element: java.lang.String getText()>();

        $i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r50);

        $i2 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r52);

        $r53 = new ucar.nc2.Variable;

        specialinvoke $r53.<ucar.nc2.Variable: void <init>(ucar.nc2.NetcdfFile,ucar.nc2.Group,ucar.nc2.Structure,java.lang.String)>(r54, r8, null, $r48);

        virtualinvoke $r53.<ucar.nc2.Variable: void setDimensions(java.lang.String)>($r45);

        $r55 = <ucar.ma2.DataType: ucar.ma2.DataType INT>;

        virtualinvoke $r53.<ucar.nc2.Variable: void setDataType(ucar.ma2.DataType)>($r55);

        $l3 = virtualinvoke $r53.<ucar.nc2.Variable: long getSize()>();

        i5 = (int) $l3;

        $r56 = virtualinvoke $r53.<ucar.nc2.Variable: ucar.ma2.DataType getDataType()>();

        $d1 = (double) $i1;

        $d0 = (double) $i2;

        $r57 = staticinvoke <ucar.ma2.Array: ucar.ma2.Array makeArray(ucar.ma2.DataType,int,double,double)>($r56, i5, $d1, $d0);

        virtualinvoke $r53.<ucar.nc2.Variable: void setCachedData(ucar.ma2.Array,boolean)>($r57, 1);

        $r58 = new ucar.nc2.Attribute;

        specialinvoke $r58.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.String)>("_DimensionMap", "");

        virtualinvoke $r53.<ucar.nc2.Variable: ucar.nc2.Attribute addAttribute(ucar.nc2.Attribute)>($r58);

        virtualinvoke r8.<ucar.nc2.Group: void addVariable(ucar.nc2.Variable)>($r53);

        $z4 = <ucar.nc2.iosp.hdf4.HdfEos: boolean showWork>;

        if $z4 == 0 goto label08;

        $r60 = <java.lang.System: java.io.PrintStream out>;

        $r59 = newarray (java.lang.Object)[1];

        $r59[0] = $r53;

        virtualinvoke $r60.<java.io.PrintStream: java.io.PrintStream printf(java.lang.String,java.lang.Object[])>(" Add dimensionMap %s %n", $r59);

     label08:
        goto label07;

     label09:
        $r9 = virtualinvoke r8.<ucar.nc2.Group: ucar.nc2.Group findGroup(java.lang.String)>("Geolocation Fields");

        if $r9 == null goto label16;

        r83 = null;

        r84 = null;

        $r25 = virtualinvoke r1.<org.jdom.Element: org.jdom.Element getChild(java.lang.String)>("GeoField");

        $r26 = virtualinvoke $r25.<org.jdom.Element: java.util.List getChildren()>();

        $r27 = interfaceinvoke $r26.<java.util.List: java.util.Iterator iterator()>();

     label10:
        $z1 = interfaceinvoke $r27.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label15;

        $r30 = interfaceinvoke $r27.<java.util.Iterator: java.lang.Object next()>();

        r85 = (org.jdom.Element) $r30;

        $r31 = virtualinvoke r85.<org.jdom.Element: org.jdom.Element getChild(java.lang.String)>("GeoFieldName");

        $r32 = virtualinvoke $r31.<org.jdom.Element: java.lang.String getText()>();

        $r33 = virtualinvoke $r9.<ucar.nc2.Group: ucar.nc2.Variable findVariable(java.lang.String)>($r32);

        $z2 = <ucar.nc2.iosp.hdf4.HdfEos: boolean $assertionsDisabled>;

        if $z2 != 0 goto label11;

        if $r33 != null goto label11;

        $r41 = new java.lang.AssertionError;

        specialinvoke $r41.<java.lang.AssertionError: void <init>(java.lang.Object)>($r32);

        throw $r41;

     label11:
        $r34 = specialinvoke r19.<ucar.nc2.iosp.hdf4.HdfEos: ucar.nc2.constants.AxisType addAxisType(ucar.nc2.Variable)>($r33);

        $r35 = <ucar.nc2.constants.AxisType: ucar.nc2.constants.AxisType Lat>;

        if $r34 != $r35 goto label12;

        r83 = $r33;

     label12:
        $r36 = <ucar.nc2.constants.AxisType: ucar.nc2.constants.AxisType Lon>;

        if $r34 != $r36 goto label13;

        r84 = $r33;

     label13:
        $r37 = virtualinvoke r85.<org.jdom.Element: org.jdom.Element getChild(java.lang.String)>("DimList");

        $r38 = virtualinvoke $r37.<org.jdom.Element: java.util.List getChildren(java.lang.String)>("value");

        specialinvoke r19.<ucar.nc2.iosp.hdf4.HdfEos: void setSharedDimensions(ucar.nc2.Variable,java.util.List,java.util.List)>($r33, $r38, $r0);

        $z3 = <ucar.nc2.iosp.hdf4.HdfEos: boolean showWork>;

        if $z3 == 0 goto label14;

        $r40 = <java.lang.System: java.io.PrintStream out>;

        $r39 = newarray (java.lang.Object)[1];

        $r39[0] = $r33;

        virtualinvoke $r40.<java.io.PrintStream: java.io.PrintStream printf(java.lang.String,java.lang.Object[])>(" set coordinate %s %n", $r39);

     label14:
        goto label10;

     label15:
        if r83 == null goto label16;

        if r84 == null goto label16;

        $r28 = newarray (ucar.nc2.Variable)[2];

        $r28[0] = r83;

        $r28[1] = r84;

        $r29 = staticinvoke <ucar.nc2.dataset.CoordinateSystem: java.util.List makeDomain(ucar.nc2.Variable[])>($r28);

        $i0 = interfaceinvoke $r29.<java.util.List: int size()>();

        if $i0 >= 2 goto label16;

        r80 = <ucar.nc2.constants.FeatureType: ucar.nc2.constants.FeatureType PROFILE>;

     label16:
        $r86 = virtualinvoke r8.<ucar.nc2.Group: ucar.nc2.Group findGroup(java.lang.String)>("Data Fields");

        if $r86 == null goto label20;

        $r10 = virtualinvoke r1.<org.jdom.Element: org.jdom.Element getChild(java.lang.String)>("DataField");

        $r11 = virtualinvoke $r10.<org.jdom.Element: java.util.List getChildren()>();

        $r12 = interfaceinvoke $r11.<java.util.List: java.util.Iterator iterator()>();

     label17:
        $z9 = interfaceinvoke $r12.<java.util.Iterator: boolean hasNext()>();

        if $z9 == 0 goto label20;

        $r13 = interfaceinvoke $r12.<java.util.Iterator: java.lang.Object next()>();

        r87 = (org.jdom.Element) $r13;

        $r14 = virtualinvoke r87.<org.jdom.Element: org.jdom.Element getChild(java.lang.String)>("DataFieldName");

        if $r14 != null goto label18;

        goto label17;

     label18:
        $r15 = virtualinvoke $r14.<org.jdom.Element: java.lang.String getText()>();

        $r16 = virtualinvoke $r86.<ucar.nc2.Group: ucar.nc2.Variable findVariable(java.lang.String)>($r15);

        if $r16 != null goto label19;

        $r21 = <ucar.nc2.iosp.hdf4.HdfEos: org.slf4j.Logger log>;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cant find variable ");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r21.<org.slf4j.Logger: void error(java.lang.String)>($r24);

        goto label17;

     label19:
        $r17 = virtualinvoke r87.<org.jdom.Element: org.jdom.Element getChild(java.lang.String)>("DimList");

        $r18 = virtualinvoke $r17.<org.jdom.Element: java.util.List getChildren(java.lang.String)>("value");

        specialinvoke r19.<ucar.nc2.iosp.hdf4.HdfEos: void setSharedDimensions(ucar.nc2.Variable,java.util.List,java.util.List)>($r16, $r18, $r0);

        goto label17;

     label20:
        return r80;
    }

    private ucar.nc2.constants.AxisType addAxisType(ucar.nc2.Variable)
    {
        ucar.nc2.iosp.hdf4.HdfEos r27;
        ucar.nc2.constants.AxisType $r3, $r6, $r8, $r11, $r13, $r15, $r17, $r20, $r23, $r26;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        ucar.nc2.Attribute $r2, $r5, $r7, $r10, $r12, $r16, $r19, $r21, $r22, $r25;
        ucar.nc2.Variable r0;
        java.lang.String $r1, $r4, $r9, $r14, $r18, $r24;

        r27 := @this: ucar.nc2.iosp.hdf4.HdfEos;

        r0 := @parameter0: ucar.nc2.Variable;

        $r1 = virtualinvoke r0.<ucar.nc2.Variable: java.lang.String getShortName()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("Latitude");

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("GeodeticLatitude");

        if $z1 == 0 goto label2;

     label1:
        $r2 = new ucar.nc2.Attribute;

        $r3 = <ucar.nc2.constants.AxisType: ucar.nc2.constants.AxisType Lat>;

        $r4 = virtualinvoke $r3.<ucar.nc2.constants.AxisType: java.lang.String toString()>();

        specialinvoke $r2.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.String)>("_CoordinateAxisType", $r4);

        virtualinvoke r0.<ucar.nc2.Variable: ucar.nc2.Attribute addAttribute(ucar.nc2.Attribute)>($r2);

        $r5 = new ucar.nc2.Attribute;

        specialinvoke $r5.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.String)>("units", "degrees_north");

        virtualinvoke r0.<ucar.nc2.Variable: ucar.nc2.Attribute addAttribute(ucar.nc2.Attribute)>($r5);

        $r6 = <ucar.nc2.constants.AxisType: ucar.nc2.constants.AxisType Lat>;

        return $r6;

     label2:
        $z2 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("Longitude");

        if $z2 == 0 goto label3;

        $r22 = new ucar.nc2.Attribute;

        $r23 = <ucar.nc2.constants.AxisType: ucar.nc2.constants.AxisType Lon>;

        $r24 = virtualinvoke $r23.<ucar.nc2.constants.AxisType: java.lang.String toString()>();

        specialinvoke $r22.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.String)>("_CoordinateAxisType", $r24);

        virtualinvoke r0.<ucar.nc2.Variable: ucar.nc2.Attribute addAttribute(ucar.nc2.Attribute)>($r22);

        $r25 = new ucar.nc2.Attribute;

        specialinvoke $r25.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.String)>("units", "degrees_east");

        virtualinvoke r0.<ucar.nc2.Variable: ucar.nc2.Attribute addAttribute(ucar.nc2.Attribute)>($r25);

        $r26 = <ucar.nc2.constants.AxisType: ucar.nc2.constants.AxisType Lon>;

        return $r26;

     label3:
        $z3 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("Time");

        if $z3 == 0 goto label5;

        $r16 = new ucar.nc2.Attribute;

        $r17 = <ucar.nc2.constants.AxisType: ucar.nc2.constants.AxisType Time>;

        $r18 = virtualinvoke $r17.<ucar.nc2.constants.AxisType: java.lang.String toString()>();

        specialinvoke $r16.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.String)>("_CoordinateAxisType", $r18);

        virtualinvoke r0.<ucar.nc2.Variable: ucar.nc2.Attribute addAttribute(ucar.nc2.Attribute)>($r16);

        $r19 = virtualinvoke r0.<ucar.nc2.Variable: ucar.nc2.Attribute findAttribute(java.lang.String)>("units");

        if $r19 != null goto label4;

        $r21 = new ucar.nc2.Attribute;

        specialinvoke $r21.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.String)>("units", "secs since 1970-01-01 00:00:00");

        virtualinvoke r0.<ucar.nc2.Variable: ucar.nc2.Attribute addAttribute(ucar.nc2.Attribute)>($r21);

     label4:
        $r20 = <ucar.nc2.constants.AxisType: ucar.nc2.constants.AxisType Time>;

        return $r20;

     label5:
        $z4 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("Pressure");

        if $z4 == 0 goto label6;

        $r12 = new ucar.nc2.Attribute;

        $r13 = <ucar.nc2.constants.AxisType: ucar.nc2.constants.AxisType Pressure>;

        $r14 = virtualinvoke $r13.<ucar.nc2.constants.AxisType: java.lang.String toString()>();

        specialinvoke $r12.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.String)>("_CoordinateAxisType", $r14);

        virtualinvoke r0.<ucar.nc2.Variable: ucar.nc2.Attribute addAttribute(ucar.nc2.Attribute)>($r12);

        $r15 = <ucar.nc2.constants.AxisType: ucar.nc2.constants.AxisType Pressure>;

        return $r15;

     label6:
        $z5 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("Altitude");

        if $z5 == 0 goto label7;

        $r7 = new ucar.nc2.Attribute;

        $r8 = <ucar.nc2.constants.AxisType: ucar.nc2.constants.AxisType Height>;

        $r9 = virtualinvoke $r8.<ucar.nc2.constants.AxisType: java.lang.String toString()>();

        specialinvoke $r7.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.String)>("_CoordinateAxisType", $r9);

        virtualinvoke r0.<ucar.nc2.Variable: ucar.nc2.Attribute addAttribute(ucar.nc2.Attribute)>($r7);

        $r10 = new ucar.nc2.Attribute;

        specialinvoke $r10.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.String)>("positive", "up");

        virtualinvoke r0.<ucar.nc2.Variable: ucar.nc2.Attribute addAttribute(ucar.nc2.Attribute)>($r10);

        $r11 = <ucar.nc2.constants.AxisType: ucar.nc2.constants.AxisType Height>;

        return $r11;

     label7:
        return null;
    }

    private ucar.nc2.constants.FeatureType amendGrid(org.jdom.Element, ucar.nc2.Group)
    {
        ucar.nc2.iosp.hdf4.HdfEos r37;
        ucar.nc2.constants.AxisType $r23, $r26;
        ucar.nc2.constants.FeatureType $r16;
        ucar.nc2.Group r6, $r12, $r13;
        ucar.nc2.Attribute $r22, $r25;
        java.lang.StringBuilder $r56, $r58, $r59, $r60, $r61;
        java.lang.Object[] $r64, $r67;
        java.lang.AssertionError $r38, $r48;
        java.util.ArrayList $r0;
        java.lang.String $r3, $r5, $r15, $r20, $r21, $r24, $r27, $r33, $r44, $r51, $r52, $r54, $r62, r72;
        ucar.nc2.Dimension $r7, $r8, $r55, $r63, $r66;
        org.jdom.Element r1, $r2, $r4, $r9, $r14, $r28, $r32, $r35, $r39, $r43, $r46, $r50, $r53, r69, r70, r71;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12;
        java.util.List $r10, $r17, $r29, $r36, $r40, $r47;
        int $i0, $i1, $i2, $i3;
        ucar.nc2.Variable $r34, $r45, r73;
        java.io.PrintStream $r65, $r68;
        org.slf4j.Logger $r57;
        java.util.Iterator $r11, $r18, $r30, $r41;
        java.lang.Object $r19, $r31, $r42, $r49;

        r37 := @this: ucar.nc2.iosp.hdf4.HdfEos;

        r1 := @parameter0: org.jdom.Element;

        r6 := @parameter1: ucar.nc2.Group;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r2 = virtualinvoke r1.<org.jdom.Element: org.jdom.Element getChild(java.lang.String)>("XDim");

        $r3 = virtualinvoke $r2.<org.jdom.Element: java.lang.String getText()>();

        $r4 = virtualinvoke r1.<org.jdom.Element: org.jdom.Element getChild(java.lang.String)>("YDim");

        $r5 = virtualinvoke $r4.<org.jdom.Element: java.lang.String getText()>();

        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r3);

        $i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r5);

        $r7 = new ucar.nc2.Dimension;

        specialinvoke $r7.<ucar.nc2.Dimension: void <init>(java.lang.String,int)>("XDim", $i0);

        virtualinvoke r6.<ucar.nc2.Group: void addDimension(ucar.nc2.Dimension)>($r7);

        $r8 = new ucar.nc2.Dimension;

        specialinvoke $r8.<ucar.nc2.Dimension: void <init>(java.lang.String,int)>("YDim", $i1);

        virtualinvoke r6.<ucar.nc2.Group: void addDimension(ucar.nc2.Dimension)>($r8);

        $r9 = virtualinvoke r1.<org.jdom.Element: org.jdom.Element getChild(java.lang.String)>("Dimension");

        $r10 = virtualinvoke $r9.<org.jdom.Element: java.util.List getChildren()>();

        $r11 = interfaceinvoke $r10.<java.util.List: java.util.Iterator iterator()>();

     label01:
        $z12 = interfaceinvoke $r11.<java.util.Iterator: boolean hasNext()>();

        if $z12 == 0 goto label07;

        $r49 = interfaceinvoke $r11.<java.util.Iterator: java.lang.Object next()>();

        r69 = (org.jdom.Element) $r49;

        $r50 = virtualinvoke r69.<org.jdom.Element: org.jdom.Element getChild(java.lang.String)>("DimensionName");

        $r51 = virtualinvoke $r50.<org.jdom.Element: java.lang.String getText()>();

        $r52 = staticinvoke <ucar.nc2.iosp.hdf4.H4header: java.lang.String createValidObjectName(java.lang.String)>($r51);

        $z9 = virtualinvoke $r52.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("scalar");

        if $z9 == 0 goto label02;

        goto label01;

     label02:
        $r53 = virtualinvoke r69.<org.jdom.Element: org.jdom.Element getChild(java.lang.String)>("Size");

        $r54 = virtualinvoke $r53.<org.jdom.Element: java.lang.String getText()>();

        $i2 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r54);

        $r55 = virtualinvoke r6.<ucar.nc2.Group: ucar.nc2.Dimension findDimension(java.lang.String)>($r52);

        if $r55 == null goto label03;

        $i3 = virtualinvoke $r55.<ucar.nc2.Dimension: int getLength()>();

        if $i3 == $i2 goto label06;

     label03:
        if $i2 <= 0 goto label05;

        $r66 = new ucar.nc2.Dimension;

        specialinvoke $r66.<ucar.nc2.Dimension: void <init>(java.lang.String,int)>($r52, $i2);

        virtualinvoke r6.<ucar.nc2.Group: void addDimension(ucar.nc2.Dimension)>($r66);

        $z11 = <ucar.nc2.iosp.hdf4.HdfEos: boolean showWork>;

        if $z11 == 0 goto label04;

        $r68 = <java.lang.System: java.io.PrintStream out>;

        $r67 = newarray (java.lang.Object)[1];

        $r67[0] = $r66;

        virtualinvoke $r68.<java.io.PrintStream: java.io.PrintStream printf(java.lang.String,java.lang.Object[])>(" Add dimension %s %n", $r67);

     label04:
        goto label06;

     label05:
        $r57 = <ucar.nc2.iosp.hdf4.HdfEos: org.slf4j.Logger log>;

        $r56 = new java.lang.StringBuilder;

        specialinvoke $r56.<java.lang.StringBuilder: void <init>()>();

        $r58 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Dimension ");

        $r59 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r52);

        $r60 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" has size ");

        $r61 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r54);

        $r62 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r57.<org.slf4j.Logger: void warn(java.lang.String)>($r62);

        $r63 = new ucar.nc2.Dimension;

        specialinvoke $r63.<ucar.nc2.Dimension: void <init>(java.lang.String,int)>($r52, 1);

        virtualinvoke $r63.<ucar.nc2.Dimension: void setGroup(ucar.nc2.Group)>(r6);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r63);

        $z10 = <ucar.nc2.iosp.hdf4.HdfEos: boolean showWork>;

        if $z10 == 0 goto label06;

        $r65 = <java.lang.System: java.io.PrintStream out>;

        $r64 = newarray (java.lang.Object)[1];

        $r64[0] = $r63;

        virtualinvoke $r65.<java.io.PrintStream: java.io.PrintStream printf(java.lang.String,java.lang.Object[])>(" Add dimension %s %n", $r64);

     label06:
        goto label01;

     label07:
        $r12 = virtualinvoke r6.<ucar.nc2.Group: ucar.nc2.Group findGroup(java.lang.String)>("Geolocation Fields");

        if $r12 == null goto label10;

        $r39 = virtualinvoke r1.<org.jdom.Element: org.jdom.Element getChild(java.lang.String)>("GeoField");

        $r40 = virtualinvoke $r39.<org.jdom.Element: java.util.List getChildren()>();

        $r41 = interfaceinvoke $r40.<java.util.List: java.util.Iterator iterator()>();

     label08:
        $z7 = interfaceinvoke $r41.<java.util.Iterator: boolean hasNext()>();

        if $z7 == 0 goto label10;

        $r42 = interfaceinvoke $r41.<java.util.Iterator: java.lang.Object next()>();

        r70 = (org.jdom.Element) $r42;

        $r43 = virtualinvoke r70.<org.jdom.Element: org.jdom.Element getChild(java.lang.String)>("GeoFieldName");

        $r44 = virtualinvoke $r43.<org.jdom.Element: java.lang.String getText()>();

        $r45 = virtualinvoke $r12.<ucar.nc2.Group: ucar.nc2.Variable findVariable(java.lang.String)>($r44);

        $z8 = <ucar.nc2.iosp.hdf4.HdfEos: boolean $assertionsDisabled>;

        if $z8 != 0 goto label09;

        if $r45 != null goto label09;

        $r48 = new java.lang.AssertionError;

        specialinvoke $r48.<java.lang.AssertionError: void <init>(java.lang.Object)>($r44);

        throw $r48;

     label09:
        $r46 = virtualinvoke r70.<org.jdom.Element: org.jdom.Element getChild(java.lang.String)>("DimList");

        $r47 = virtualinvoke $r46.<org.jdom.Element: java.util.List getChildren(java.lang.String)>("value");

        specialinvoke r37.<ucar.nc2.iosp.hdf4.HdfEos: void setSharedDimensions(ucar.nc2.Variable,java.util.List,java.util.List)>($r45, $r47, $r0);

        goto label08;

     label10:
        $r13 = virtualinvoke r6.<ucar.nc2.Group: ucar.nc2.Group findGroup(java.lang.String)>("Data Fields");

        if $r13 == null goto label13;

        $r28 = virtualinvoke r1.<org.jdom.Element: org.jdom.Element getChild(java.lang.String)>("DataField");

        $r29 = virtualinvoke $r28.<org.jdom.Element: java.util.List getChildren()>();

        $r30 = interfaceinvoke $r29.<java.util.List: java.util.Iterator iterator()>();

     label11:
        $z5 = interfaceinvoke $r30.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label13;

        $r31 = interfaceinvoke $r30.<java.util.Iterator: java.lang.Object next()>();

        r71 = (org.jdom.Element) $r31;

        $r32 = virtualinvoke r71.<org.jdom.Element: org.jdom.Element getChild(java.lang.String)>("DataFieldName");

        $r33 = virtualinvoke $r32.<org.jdom.Element: java.lang.String getText()>();

        $r34 = virtualinvoke $r13.<ucar.nc2.Group: ucar.nc2.Variable findVariable(java.lang.String)>($r33);

        $z6 = <ucar.nc2.iosp.hdf4.HdfEos: boolean $assertionsDisabled>;

        if $z6 != 0 goto label12;

        if $r34 != null goto label12;

        $r38 = new java.lang.AssertionError;

        specialinvoke $r38.<java.lang.AssertionError: void <init>(java.lang.Object)>($r33);

        throw $r38;

     label12:
        $r35 = virtualinvoke r71.<org.jdom.Element: org.jdom.Element getChild(java.lang.String)>("DimList");

        $r36 = virtualinvoke $r35.<org.jdom.Element: java.util.List getChildren(java.lang.String)>("value");

        specialinvoke r37.<ucar.nc2.iosp.hdf4.HdfEos: void setSharedDimensions(ucar.nc2.Variable,java.util.List,java.util.List)>($r34, $r36, $r0);

        goto label11;

     label13:
        r72 = null;

        $r14 = virtualinvoke r1.<org.jdom.Element: org.jdom.Element getChild(java.lang.String)>("Projection");

        if $r14 == null goto label14;

        r72 = virtualinvoke $r14.<org.jdom.Element: java.lang.String getText()>();

     label14:
        $r15 = "GCTP_GEO";

        $z0 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>(r72);

        if $z0 == 0 goto label18;

        $r17 = virtualinvoke $r13.<ucar.nc2.Group: java.util.List getVariables()>();

        $r18 = interfaceinvoke $r17.<java.util.List: java.util.Iterator iterator()>();

     label15:
        $z1 = interfaceinvoke $r18.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label18;

        $r19 = interfaceinvoke $r18.<java.util.Iterator: java.lang.Object next()>();

        r73 = (ucar.nc2.Variable) $r19;

        $z2 = virtualinvoke r73.<ucar.nc2.Variable: boolean isCoordinateVariable()>();

        if $z2 == 0 goto label17;

        $r20 = virtualinvoke r73.<ucar.nc2.Variable: java.lang.String getShortName()>();

        $z3 = virtualinvoke $r20.<java.lang.String: boolean equals(java.lang.Object)>("YDim");

        if $z3 == 0 goto label16;

        $r25 = new ucar.nc2.Attribute;

        $r26 = <ucar.nc2.constants.AxisType: ucar.nc2.constants.AxisType Lat>;

        $r27 = virtualinvoke $r26.<ucar.nc2.constants.AxisType: java.lang.String toString()>();

        specialinvoke $r25.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.String)>("_CoordinateAxisType", $r27);

        virtualinvoke r73.<ucar.nc2.Variable: ucar.nc2.Attribute addAttribute(ucar.nc2.Attribute)>($r25);

     label16:
        $r21 = virtualinvoke r73.<ucar.nc2.Variable: java.lang.String getShortName()>();

        $z4 = virtualinvoke $r21.<java.lang.String: boolean equals(java.lang.Object)>("XDim");

        if $z4 == 0 goto label17;

        $r22 = new ucar.nc2.Attribute;

        $r23 = <ucar.nc2.constants.AxisType: ucar.nc2.constants.AxisType Lon>;

        $r24 = virtualinvoke $r23.<ucar.nc2.constants.AxisType: java.lang.String toString()>();

        specialinvoke $r22.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.String)>("_CoordinateAxisType", $r24);

        virtualinvoke r73.<ucar.nc2.Variable: ucar.nc2.Attribute addAttribute(ucar.nc2.Attribute)>($r22);

     label17:
        goto label15;

     label18:
        $r16 = <ucar.nc2.constants.FeatureType: ucar.nc2.constants.FeatureType GRID>;

        return $r16;
    }

    private void setSharedDimensions(ucar.nc2.Variable, java.util.List, java.util.List)
    {
        ucar.nc2.iosp.hdf4.HdfEos r39;
        boolean $z0, $z1, $z2;
        ucar.nc2.Group $r5;
        java.util.List r0, $r3, r40;
        java.lang.StringBuilder $r16, $r18, $r20, $r21, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r31, $r33, $r34, $r35, $r37, $r41, $r43, $r44;
        java.lang.Object[] $r6;
        java.util.ArrayList $r4;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8;
        ucar.nc2.Variable r2;
        java.lang.String $r8, $r11, $r12, $r19, $r22, $r30, $r36, $r38, $r45, $r47;
        java.io.PrintStream $r7;
        org.slf4j.Logger $r17, $r32, $r42;
        java.util.Iterator $r1;
        java.lang.Object $r9, $r14, $r46;
        ucar.nc2.Dimension $r13, r15, r49;
        org.jdom.Element r10, r48;

        r39 := @this: ucar.nc2.iosp.hdf4.HdfEos;

        r2 := @parameter0: ucar.nc2.Variable;

        r0 := @parameter1: java.util.List;

        r40 := @parameter2: java.util.List;

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        if $i0 != 0 goto label01;

        return;

     label01:
        $r1 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label02:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label04;

        $r46 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r48 = (org.jdom.Element) $r46;

        $r47 = virtualinvoke r48.<org.jdom.Element: java.lang.String getText()>();

        $z2 = virtualinvoke $r47.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("scalar");

        if $z2 == 0 goto label03;

        interfaceinvoke $r1.<java.util.Iterator: void remove()>();

     label03:
        goto label02;

     label04:
        $r3 = virtualinvoke r2.<ucar.nc2.Variable: java.util.List getDimensions()>();

        $i1 = interfaceinvoke $r3.<java.util.List: int size()>();

        $i2 = interfaceinvoke r0.<java.util.List: int size()>();

        if $i1 == $i2 goto label05;

        $r42 = <ucar.nc2.iosp.hdf4.HdfEos: org.slf4j.Logger log>;

        $r41 = new java.lang.StringBuilder;

        specialinvoke $r41.<java.lang.StringBuilder: void <init>()>();

        $r43 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Different number of dimensions for ");

        $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r42.<org.slf4j.Logger: void error(java.lang.String)>($r45);

        return;

     label05:
        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        $r5 = virtualinvoke r2.<ucar.nc2.Variable: ucar.nc2.Group getParentGroup()>();

        i8 = 0;

     label06:
        $i3 = interfaceinvoke r0.<java.util.List: int size()>();

        if i8 >= $i3 goto label10;

        $r9 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i8);

        r10 = (org.jdom.Element) $r9;

        $r11 = virtualinvoke r10.<org.jdom.Element: java.lang.String getText()>();

        $r12 = staticinvoke <ucar.nc2.iosp.hdf4.H4header: java.lang.String createValidObjectName(java.lang.String)>($r11);

        $r13 = virtualinvoke $r5.<ucar.nc2.Group: ucar.nc2.Dimension findDimension(java.lang.String)>($r12);

        r49 = $r13;

        $r14 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(i8);

        r15 = (ucar.nc2.Dimension) $r14;

        if $r13 != null goto label07;

        r49 = specialinvoke r39.<ucar.nc2.iosp.hdf4.HdfEos: ucar.nc2.Dimension checkUnknownDims(java.lang.String,java.util.List,ucar.nc2.Dimension)>($r12, r40, r15);

     label07:
        if r49 != null goto label08;

        $r32 = <ucar.nc2.iosp.hdf4.HdfEos: org.slf4j.Logger log>;

        $r31 = new java.lang.StringBuilder;

        specialinvoke $r31.<java.lang.StringBuilder: void <init>()>();

        $r33 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown Dimension= ");

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for variable = ");

        $r36 = virtualinvoke r2.<ucar.nc2.Variable: java.lang.String getName()>();

        $r37 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r36);

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r32.<org.slf4j.Logger: void error(java.lang.String)>($r38);

        return;

     label08:
        $i4 = virtualinvoke r49.<ucar.nc2.Dimension: int getLength()>();

        $i5 = virtualinvoke r15.<ucar.nc2.Dimension: int getLength()>();

        if $i4 == $i5 goto label09;

        $r17 = <ucar.nc2.iosp.hdf4.HdfEos: org.slf4j.Logger log>;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Shared dimension (");

        $r19 = virtualinvoke r49.<ucar.nc2.Dimension: java.lang.String getName()>();

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") has different length than data dimension (");

        $r22 = virtualinvoke r15.<ucar.nc2.Dimension: java.lang.String getName()>();

        $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") shared=");

        $i6 = virtualinvoke r49.<ucar.nc2.Dimension: int getLength()>();

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" org=");

        $i7 = virtualinvoke r15.<ucar.nc2.Dimension: int getLength()>();

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for ");

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r17.<org.slf4j.Logger: void error(java.lang.String)>($r30);

        return;

     label09:
        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>(r49);

        i8 = i8 + 1;

        goto label06;

     label10:
        virtualinvoke r2.<ucar.nc2.Variable: void setDimensions(java.util.List)>($r4);

        $z1 = <ucar.nc2.iosp.hdf4.HdfEos: boolean showWork>;

        if $z1 == 0 goto label11;

        $r7 = <java.lang.System: java.io.PrintStream out>;

        $r6 = newarray (java.lang.Object)[1];

        $r8 = virtualinvoke r2.<ucar.nc2.Variable: java.lang.String getNameAndDimensions()>();

        $r6[0] = $r8;

        virtualinvoke $r7.<java.io.PrintStream: java.io.PrintStream printf(java.lang.String,java.lang.Object[])>(" set shared dimensions for %s %n", $r6);

     label11:
        return;
    }

    private ucar.nc2.Dimension checkUnknownDims(java.lang.String, java.util.List, ucar.nc2.Dimension)
    {
        ucar.nc2.iosp.hdf4.HdfEos r15;
        int $i0, $i1;
        java.lang.String $r4, r5, $r14;
        boolean $z0, $z1;
        org.slf4j.Logger $r9;
        java.util.Iterator $r1;
        ucar.nc2.Group $r7;
        java.util.List r0;
        java.lang.Object $r2;
        ucar.nc2.Dimension r3, r6;
        java.lang.StringBuilder $r8, $r10, $r11, $r12, $r13;

        r15 := @this: ucar.nc2.iosp.hdf4.HdfEos;

        r5 := @parameter0: java.lang.String;

        r0 := @parameter1: java.util.List;

        r6 := @parameter2: ucar.nc2.Dimension;

        $r1 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (ucar.nc2.Dimension) $r2;

        $r4 = virtualinvoke r3.<ucar.nc2.Dimension: java.lang.String getName()>();

        $z1 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>(r5);

        if $z1 == 0 goto label3;

        $i0 = virtualinvoke r6.<ucar.nc2.Dimension: int getLength()>();

        if $i0 != 0 goto label2;

        virtualinvoke r3.<ucar.nc2.Dimension: void setUnlimited(boolean)>(1);

     label2:
        virtualinvoke r3.<ucar.nc2.Dimension: void setLength(int)>($i0);

        $r7 = virtualinvoke r3.<ucar.nc2.Dimension: ucar.nc2.Group getGroup()>();

        virtualinvoke $r7.<ucar.nc2.Group: void addDimension(ucar.nc2.Dimension)>(r3);

        interfaceinvoke r0.<java.util.List: boolean remove(java.lang.Object)>(r3);

        $r9 = <ucar.nc2.iosp.hdf4.HdfEos: org.slf4j.Logger log>;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unknownDim ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" length set to ");

        $i1 = virtualinvoke r6.<ucar.nc2.Dimension: int getLength()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r9.<org.slf4j.Logger: void warn(java.lang.String)>($r14);

        return r3;

     label3:
        goto label1;

     label4:
        return null;
    }

    private ucar.nc2.Group findGroupNested(ucar.nc2.Group, java.lang.String)
    {
        ucar.nc2.iosp.hdf4.HdfEos r6;
        java.lang.String r7, $r10;
        boolean $z0, $z1, $z2;
        java.util.Iterator $r2, $r4;
        ucar.nc2.Group r0, $r8, r11, r12;
        java.util.List $r1, $r3;
        java.lang.Object $r5, $r9;

        r6 := @this: ucar.nc2.iosp.hdf4.HdfEos;

        r0 := @parameter0: ucar.nc2.Group;

        r7 := @parameter1: java.lang.String;

        $r1 = virtualinvoke r0.<ucar.nc2.Group: java.util.List getGroups()>();

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r9 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r11 = (ucar.nc2.Group) $r9;

        $r10 = virtualinvoke r11.<ucar.nc2.Group: java.lang.String getShortName()>();

        $z2 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>(r7);

        if $z2 == 0 goto label2;

        return r11;

     label2:
        goto label1;

     label3:
        $r3 = virtualinvoke r0.<ucar.nc2.Group: java.util.List getGroups()>();

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label4:
        $z1 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label6;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r12 = (ucar.nc2.Group) $r5;

        $r8 = specialinvoke r6.<ucar.nc2.iosp.hdf4.HdfEos: ucar.nc2.Group findGroupNested(ucar.nc2.Group,java.lang.String)>(r12, r7);

        if $r8 == null goto label5;

        return $r8;

     label5:
        goto label4;

     label6:
        return null;
    }

    static void <clinit>()
    {
        org.slf4j.Logger $r1;
        java.lang.Class $r0;
        boolean $z0, $z1;

        <ucar.nc2.iosp.hdf4.HdfEos: java.lang.String DATA_FIELDS> = "Data Fields";

        <ucar.nc2.iosp.hdf4.HdfEos: java.lang.String GEOLOC_FIELDS> = "Geolocation Fields";

        $r0 = class "Lucar/nc2/iosp/hdf4/HdfEos;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <ucar.nc2.iosp.hdf4.HdfEos: boolean $assertionsDisabled> = $z1;

        $r1 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lucar/nc2/iosp/hdf4/HdfEos;");

        <ucar.nc2.iosp.hdf4.HdfEos: org.slf4j.Logger log> = $r1;

        <ucar.nc2.iosp.hdf4.HdfEos: boolean showWork> = 0;

        return;
    }
}
