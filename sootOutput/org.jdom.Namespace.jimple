public final class org.jdom.Namespace extends java.lang.Object
{
    private static final java.lang.String CVS_ID;
    private static java.util.HashMap namespaces;
    public static final org.jdom.Namespace NO_NAMESPACE;
    public static final org.jdom.Namespace XML_NAMESPACE;
    private java.lang.String prefix;
    private java.lang.String uri;

    static void <clinit>()
    {
        org.jdom.Namespace $r0, $r1, $r3, $r5;
        java.util.HashMap $r2, $r4, $r6;

        <org.jdom.Namespace: java.lang.String CVS_ID> = "@(#) $RCSfile: Namespace.java,v $ $Revision: 1.41 $ $Date: 2004/02/27 11:32:57 $ $Name: jdom_1_0 $";

        $r0 = new org.jdom.Namespace;

        specialinvoke $r0.<org.jdom.Namespace: void <init>(java.lang.String,java.lang.String)>("", "");

        <org.jdom.Namespace: org.jdom.Namespace NO_NAMESPACE> = $r0;

        $r1 = new org.jdom.Namespace;

        specialinvoke $r1.<org.jdom.Namespace: void <init>(java.lang.String,java.lang.String)>("xml", "http://www.w3.org/XML/1998/namespace");

        <org.jdom.Namespace: org.jdom.Namespace XML_NAMESPACE> = $r1;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        <org.jdom.Namespace: java.util.HashMap namespaces> = $r2;

        $r4 = <org.jdom.Namespace: java.util.HashMap namespaces>;

        $r3 = <org.jdom.Namespace: org.jdom.Namespace NO_NAMESPACE>;

        virtualinvoke $r4.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("&", $r3);

        $r6 = <org.jdom.Namespace: java.util.HashMap namespaces>;

        $r5 = <org.jdom.Namespace: org.jdom.Namespace XML_NAMESPACE>;

        virtualinvoke $r6.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("xml&http://www.w3.org/XML/1998/namespace", $r5);

        return;
    }

    private void <init>(java.lang.String, java.lang.String)
    {
        org.jdom.Namespace r0;
        java.lang.String r1, r2;

        r0 := @this: org.jdom.Namespace;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.jdom.Namespace: java.lang.String prefix> = r1;

        r0.<org.jdom.Namespace: java.lang.String uri> = r2;

        return;
    }

    public boolean equals(java.lang.Object)
    {
        org.jdom.Namespace r0, $r2;
        java.lang.Object r1;
        java.lang.String $r3, $r4;
        boolean $z0, $z1;

        r0 := @this: org.jdom.Namespace;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = r1 instanceof org.jdom.Namespace;

        if $z0 == 0 goto label2;

        $r4 = r0.<org.jdom.Namespace: java.lang.String uri>;

        $r2 = (org.jdom.Namespace) r1;

        $r3 = $r2.<org.jdom.Namespace: java.lang.String uri>;

        $z1 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        return $z1;

     label2:
        return 0;
    }

    public static org.jdom.Namespace getNamespace(java.lang.String)
    {
        org.jdom.Namespace $r1;
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.jdom.Namespace: org.jdom.Namespace getNamespace(java.lang.String,java.lang.String)>("", r0);

        return $r1;
    }

    public static org.jdom.Namespace getNamespace(java.lang.String, java.lang.String)
    {
        java.util.HashMap $r3, $r18;
        java.lang.StringBuffer $r13, $r14, $r15, $r16;
        org.jdom.Namespace $r2, $r20;
        java.lang.String $r0, $r1, $r9, $r10, r11, r12, $r17;
        org.jdom.IllegalNameException $r4, $r5, $r6, $r7, $r8;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.lang.Object $r19;

        r11 := @parameter0: java.lang.String;

        r12 := @parameter1: java.lang.String;

        if r11 == null goto label01;

        $r10 = virtualinvoke r11.<java.lang.String: java.lang.String trim()>();

        $z5 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z5 == 0 goto label02;

     label01:
        r11 = "";

     label02:
        if r12 == null goto label03;

        $r9 = virtualinvoke r12.<java.lang.String: java.lang.String trim()>();

        $z4 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z4 == 0 goto label04;

     label03:
        r12 = "";

     label04:
        $r13 = new java.lang.StringBuffer;

        specialinvoke $r13.<java.lang.StringBuffer: void <init>(int)>(64);

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r11);

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(38);

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r12);

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.String toString()>();

        $r18 = <org.jdom.Namespace: java.util.HashMap namespaces>;

        $r19 = virtualinvoke $r18.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r17);

        $r20 = (org.jdom.Namespace) $r19;

        if $r20 == null goto label05;

        return $r20;

     label05:
        $r0 = staticinvoke <org.jdom.Verifier: java.lang.String checkNamespacePrefix(java.lang.String)>(r11);

        if $r0 == null goto label06;

        $r8 = new org.jdom.IllegalNameException;

        specialinvoke $r8.<org.jdom.IllegalNameException: void <init>(java.lang.String,java.lang.String,java.lang.String)>(r11, "Namespace prefix", $r0);

        throw $r8;

     label06:
        $r1 = staticinvoke <org.jdom.Verifier: java.lang.String checkNamespaceURI(java.lang.String)>(r12);

        if $r1 == null goto label07;

        $r7 = new org.jdom.IllegalNameException;

        specialinvoke $r7.<org.jdom.IllegalNameException: void <init>(java.lang.String,java.lang.String,java.lang.String)>(r12, "Namespace URI", $r1);

        throw $r7;

     label07:
        $z0 = virtualinvoke r11.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z0 != 0 goto label08;

        $z3 = virtualinvoke r12.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z3 == 0 goto label08;

        $r6 = new org.jdom.IllegalNameException;

        specialinvoke $r6.<org.jdom.IllegalNameException: void <init>(java.lang.String,java.lang.String,java.lang.String)>("", "namespace", "Namespace URIs must be non-null and non-empty Strings");

        throw $r6;

     label08:
        $z1 = virtualinvoke r11.<java.lang.String: boolean equals(java.lang.Object)>("xml");

        if $z1 == 0 goto label09;

        $r5 = new org.jdom.IllegalNameException;

        specialinvoke $r5.<org.jdom.IllegalNameException: void <init>(java.lang.String,java.lang.String,java.lang.String)>(r11, "Namespace prefix", "The xml prefix can only be bound to http://www.w3.org/XML/1998/namespace");

        throw $r5;

     label09:
        $z2 = virtualinvoke r12.<java.lang.String: boolean equals(java.lang.Object)>("http://www.w3.org/XML/1998/namespace");

        if $z2 == 0 goto label10;

        $r4 = new org.jdom.IllegalNameException;

        specialinvoke $r4.<org.jdom.IllegalNameException: void <init>(java.lang.String,java.lang.String,java.lang.String)>(r12, "Namespace URI", "The http://www.w3.org/XML/1998/namespace must be bound to the xml prefix.");

        throw $r4;

     label10:
        $r2 = new org.jdom.Namespace;

        specialinvoke $r2.<org.jdom.Namespace: void <init>(java.lang.String,java.lang.String)>(r11, r12);

        $r3 = <org.jdom.Namespace: java.util.HashMap namespaces>;

        virtualinvoke $r3.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r17, $r2);

        return $r2;
    }

    public java.lang.String getPrefix()
    {
        org.jdom.Namespace r0;
        java.lang.String $r1;

        r0 := @this: org.jdom.Namespace;

        $r1 = r0.<org.jdom.Namespace: java.lang.String prefix>;

        return $r1;
    }

    public java.lang.String getURI()
    {
        org.jdom.Namespace r0;
        java.lang.String $r1;

        r0 := @this: org.jdom.Namespace;

        $r1 = r0.<org.jdom.Namespace: java.lang.String uri>;

        return $r1;
    }

    public int hashCode()
    {
        int $i0;
        org.jdom.Namespace r0;
        java.lang.String $r1;

        r0 := @this: org.jdom.Namespace;

        $r1 = r0.<org.jdom.Namespace: java.lang.String uri>;

        $i0 = virtualinvoke $r1.<java.lang.String: int hashCode()>();

        return $i0;
    }

    public java.lang.String toString()
    {
        java.lang.StringBuffer $r0, $r3, $r4, $r6, $r7;
        org.jdom.Namespace r1;
        java.lang.String $r2, $r5, $r8;

        r1 := @this: org.jdom.Namespace;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>(java.lang.String)>("[Namespace: prefix \"");

        $r2 = r1.<org.jdom.Namespace: java.lang.String prefix>;

        $r3 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\" is mapped to URI \"");

        $r5 = r1.<org.jdom.Namespace: java.lang.String uri>;

        $r6 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\"]");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r8;
    }
}
