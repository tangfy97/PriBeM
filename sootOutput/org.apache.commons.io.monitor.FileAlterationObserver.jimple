public class org.apache.commons.io.monitor.FileAlterationObserver extends java.lang.Object implements java.io.Serializable
{
    private final java.util.List listeners;
    private final org.apache.commons.io.monitor.FileEntry rootEntry;
    private final java.io.FileFilter fileFilter;
    private final java.util.Comparator comparator;

    public void <init>(java.lang.String)
    {
        java.lang.String r2;
        java.io.File $r1;
        org.apache.commons.io.monitor.FileAlterationObserver r0;

        r0 := @this: org.apache.commons.io.monitor.FileAlterationObserver;

        r2 := @parameter0: java.lang.String;

        $r1 = new java.io.File;

        specialinvoke $r1.<java.io.File: void <init>(java.lang.String)>(r2);

        specialinvoke r0.<org.apache.commons.io.monitor.FileAlterationObserver: void <init>(java.io.File)>($r1);

        return;
    }

    public void <init>(java.lang.String, java.io.FileFilter)
    {
        java.io.FileFilter r3;
        org.apache.commons.io.monitor.FileAlterationObserver r0;
        java.lang.String r2;
        java.io.File $r1;

        r0 := @this: org.apache.commons.io.monitor.FileAlterationObserver;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.io.FileFilter;

        $r1 = new java.io.File;

        specialinvoke $r1.<java.io.File: void <init>(java.lang.String)>(r2);

        specialinvoke r0.<org.apache.commons.io.monitor.FileAlterationObserver: void <init>(java.io.File,java.io.FileFilter)>($r1, r3);

        return;
    }

    public void <init>(java.lang.String, java.io.FileFilter, org.apache.commons.io.IOCase)
    {
        java.io.FileFilter r3;
        org.apache.commons.io.IOCase r4;
        org.apache.commons.io.monitor.FileAlterationObserver r0;
        java.lang.String r2;
        java.io.File $r1;

        r0 := @this: org.apache.commons.io.monitor.FileAlterationObserver;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.io.FileFilter;

        r4 := @parameter2: org.apache.commons.io.IOCase;

        $r1 = new java.io.File;

        specialinvoke $r1.<java.io.File: void <init>(java.lang.String)>(r2);

        specialinvoke r0.<org.apache.commons.io.monitor.FileAlterationObserver: void <init>(java.io.File,java.io.FileFilter,org.apache.commons.io.IOCase)>($r1, r3, r4);

        return;
    }

    public void <init>(java.io.File)
    {
        java.io.File r1;
        org.apache.commons.io.monitor.FileAlterationObserver r0;

        r0 := @this: org.apache.commons.io.monitor.FileAlterationObserver;

        r1 := @parameter0: java.io.File;

        specialinvoke r0.<org.apache.commons.io.monitor.FileAlterationObserver: void <init>(java.io.File,java.io.FileFilter)>(r1, null);

        return;
    }

    public void <init>(java.io.File, java.io.FileFilter)
    {
        java.io.FileFilter r2;
        java.io.File r1;
        org.apache.commons.io.monitor.FileAlterationObserver r0;

        r0 := @this: org.apache.commons.io.monitor.FileAlterationObserver;

        r1 := @parameter0: java.io.File;

        r2 := @parameter1: java.io.FileFilter;

        specialinvoke r0.<org.apache.commons.io.monitor.FileAlterationObserver: void <init>(java.io.File,java.io.FileFilter,org.apache.commons.io.IOCase)>(r1, r2, null);

        return;
    }

    public void <init>(java.io.File, java.io.FileFilter, org.apache.commons.io.IOCase)
    {
        org.apache.commons.io.monitor.FileEntry $r1;
        java.io.FileFilter r3;
        org.apache.commons.io.IOCase r4;
        org.apache.commons.io.monitor.FileAlterationObserver r0;
        java.io.File r2;

        r0 := @this: org.apache.commons.io.monitor.FileAlterationObserver;

        r2 := @parameter0: java.io.File;

        r3 := @parameter1: java.io.FileFilter;

        r4 := @parameter2: org.apache.commons.io.IOCase;

        $r1 = new org.apache.commons.io.monitor.FileEntry;

        specialinvoke $r1.<org.apache.commons.io.monitor.FileEntry: void <init>(java.io.File)>(r2);

        specialinvoke r0.<org.apache.commons.io.monitor.FileAlterationObserver: void <init>(org.apache.commons.io.monitor.FileEntry,java.io.FileFilter,org.apache.commons.io.IOCase)>($r1, r3, r4);

        return;
    }

    protected void <init>(org.apache.commons.io.monitor.FileEntry, java.io.FileFilter, org.apache.commons.io.IOCase)
    {
        org.apache.commons.io.monitor.FileEntry r2;
        org.apache.commons.io.IOCase r5, $r7, $r8;
        org.apache.commons.io.monitor.FileAlterationObserver r0;
        java.lang.IllegalArgumentException $r11, $r12;
        java.io.File $r3;
        java.io.FileFilter r4;
        java.util.Comparator $r6, $r9, $r10;
        java.util.concurrent.CopyOnWriteArrayList $r1;
        boolean $z0, $z1;

        r0 := @this: org.apache.commons.io.monitor.FileAlterationObserver;

        r2 := @parameter0: org.apache.commons.io.monitor.FileEntry;

        r4 := @parameter1: java.io.FileFilter;

        r5 := @parameter2: org.apache.commons.io.IOCase;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.concurrent.CopyOnWriteArrayList;

        specialinvoke $r1.<java.util.concurrent.CopyOnWriteArrayList: void <init>()>();

        r0.<org.apache.commons.io.monitor.FileAlterationObserver: java.util.List listeners> = $r1;

        if r2 != null goto label1;

        $r12 = new java.lang.IllegalArgumentException;

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Root entry is missing");

        throw $r12;

     label1:
        $r3 = virtualinvoke r2.<org.apache.commons.io.monitor.FileEntry: java.io.File getFile()>();

        if $r3 != null goto label2;

        $r11 = new java.lang.IllegalArgumentException;

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Root directory is missing");

        throw $r11;

     label2:
        r0.<org.apache.commons.io.monitor.FileAlterationObserver: org.apache.commons.io.monitor.FileEntry rootEntry> = r2;

        r0.<org.apache.commons.io.monitor.FileAlterationObserver: java.io.FileFilter fileFilter> = r4;

        if r5 == null goto label3;

        $r7 = <org.apache.commons.io.IOCase: org.apache.commons.io.IOCase SYSTEM>;

        $z0 = virtualinvoke r5.<java.lang.Object: boolean equals(java.lang.Object)>($r7);

        if $z0 == 0 goto label4;

     label3:
        $r6 = <org.apache.commons.io.comparator.NameFileComparator: java.util.Comparator NAME_SYSTEM_COMPARATOR>;

        r0.<org.apache.commons.io.monitor.FileAlterationObserver: java.util.Comparator comparator> = $r6;

        goto label6;

     label4:
        $r8 = <org.apache.commons.io.IOCase: org.apache.commons.io.IOCase INSENSITIVE>;

        $z1 = virtualinvoke r5.<java.lang.Object: boolean equals(java.lang.Object)>($r8);

        if $z1 == 0 goto label5;

        $r10 = <org.apache.commons.io.comparator.NameFileComparator: java.util.Comparator NAME_INSENSITIVE_COMPARATOR>;

        r0.<org.apache.commons.io.monitor.FileAlterationObserver: java.util.Comparator comparator> = $r10;

        goto label6;

     label5:
        $r9 = <org.apache.commons.io.comparator.NameFileComparator: java.util.Comparator NAME_COMPARATOR>;

        r0.<org.apache.commons.io.monitor.FileAlterationObserver: java.util.Comparator comparator> = $r9;

     label6:
        return;
    }

    public java.io.File getDirectory()
    {
        org.apache.commons.io.monitor.FileEntry $r1;
        java.io.File $r2;
        org.apache.commons.io.monitor.FileAlterationObserver r0;

        r0 := @this: org.apache.commons.io.monitor.FileAlterationObserver;

        $r1 = r0.<org.apache.commons.io.monitor.FileAlterationObserver: org.apache.commons.io.monitor.FileEntry rootEntry>;

        $r2 = virtualinvoke $r1.<org.apache.commons.io.monitor.FileEntry: java.io.File getFile()>();

        return $r2;
    }

    public java.io.FileFilter getFileFilter()
    {
        java.io.FileFilter $r1;
        org.apache.commons.io.monitor.FileAlterationObserver r0;

        r0 := @this: org.apache.commons.io.monitor.FileAlterationObserver;

        $r1 = r0.<org.apache.commons.io.monitor.FileAlterationObserver: java.io.FileFilter fileFilter>;

        return $r1;
    }

    public void addListener(org.apache.commons.io.monitor.FileAlterationListener)
    {
        java.util.List $r2;
        org.apache.commons.io.monitor.FileAlterationListener r0;
        org.apache.commons.io.monitor.FileAlterationObserver r1;

        r1 := @this: org.apache.commons.io.monitor.FileAlterationObserver;

        r0 := @parameter0: org.apache.commons.io.monitor.FileAlterationListener;

        if r0 == null goto label1;

        $r2 = r1.<org.apache.commons.io.monitor.FileAlterationObserver: java.util.List listeners>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r0);

     label1:
        return;
    }

    public void removeListener(org.apache.commons.io.monitor.FileAlterationListener)
    {
        java.util.List $r2;
        org.apache.commons.io.monitor.FileAlterationListener r0;
        org.apache.commons.io.monitor.FileAlterationObserver r1;
        boolean $z0;

        r1 := @this: org.apache.commons.io.monitor.FileAlterationObserver;

        r0 := @parameter0: org.apache.commons.io.monitor.FileAlterationListener;

        if r0 == null goto label2;

     label1:
        $r2 = r1.<org.apache.commons.io.monitor.FileAlterationObserver: java.util.List listeners>;

        $z0 = interfaceinvoke $r2.<java.util.List: boolean remove(java.lang.Object)>(r0);

        if $z0 == 0 goto label2;

        goto label1;

     label2:
        return;
    }

    public java.lang.Iterable getListeners()
    {
        java.util.List $r1;
        org.apache.commons.io.monitor.FileAlterationObserver r0;

        r0 := @this: org.apache.commons.io.monitor.FileAlterationObserver;

        $r1 = r0.<org.apache.commons.io.monitor.FileAlterationObserver: java.util.List listeners>;

        return $r1;
    }

    public void initialize() throws java.lang.Exception
    {
        org.apache.commons.io.monitor.FileEntry $r1, $r2, $r4, $r8, $r10, $r11;
        org.apache.commons.io.monitor.FileAlterationObserver r0;
        org.apache.commons.io.monitor.FileEntry[] r7, $r12;
        int $i0, $i1, i2, $i3;
        java.io.File $r3, $r5, $r9;
        java.io.File[] $r6;

        r0 := @this: org.apache.commons.io.monitor.FileAlterationObserver;

        $r2 = r0.<org.apache.commons.io.monitor.FileAlterationObserver: org.apache.commons.io.monitor.FileEntry rootEntry>;

        $r1 = r0.<org.apache.commons.io.monitor.FileAlterationObserver: org.apache.commons.io.monitor.FileEntry rootEntry>;

        $r3 = virtualinvoke $r1.<org.apache.commons.io.monitor.FileEntry: java.io.File getFile()>();

        virtualinvoke $r2.<org.apache.commons.io.monitor.FileEntry: boolean refresh(java.io.File)>($r3);

        $r4 = r0.<org.apache.commons.io.monitor.FileAlterationObserver: org.apache.commons.io.monitor.FileEntry rootEntry>;

        $r5 = virtualinvoke $r4.<org.apache.commons.io.monitor.FileEntry: java.io.File getFile()>();

        $r6 = specialinvoke r0.<org.apache.commons.io.monitor.FileAlterationObserver: java.io.File[] listFiles(java.io.File)>($r5);

        $i0 = lengthof $r6;

        if $i0 <= 0 goto label1;

        $i1 = lengthof $r6;

        $r12 = newarray (org.apache.commons.io.monitor.FileEntry)[$i1];

        goto label2;

     label1:
        $r12 = <org.apache.commons.io.monitor.FileEntry: org.apache.commons.io.monitor.FileEntry[] EMPTY_ENTRIES>;

     label2:
        r7 = $r12;

        i2 = 0;

     label3:
        $i3 = lengthof $r6;

        if i2 >= $i3 goto label4;

        $r10 = r0.<org.apache.commons.io.monitor.FileAlterationObserver: org.apache.commons.io.monitor.FileEntry rootEntry>;

        $r9 = $r6[i2];

        $r11 = specialinvoke r0.<org.apache.commons.io.monitor.FileAlterationObserver: org.apache.commons.io.monitor.FileEntry createFileEntry(org.apache.commons.io.monitor.FileEntry,java.io.File)>($r10, $r9);

        r7[i2] = $r11;

        i2 = i2 + 1;

        goto label3;

     label4:
        $r8 = r0.<org.apache.commons.io.monitor.FileAlterationObserver: org.apache.commons.io.monitor.FileEntry rootEntry>;

        virtualinvoke $r8.<org.apache.commons.io.monitor.FileEntry: void setChildren(org.apache.commons.io.monitor.FileEntry[])>(r7);

        return;
    }

    public void destroy() throws java.lang.Exception
    {
        org.apache.commons.io.monitor.FileAlterationObserver r0;

        r0 := @this: org.apache.commons.io.monitor.FileAlterationObserver;

        return;
    }

    public void checkAndNotify()
    {
        org.apache.commons.io.monitor.FileEntry $r3, $r5, $r8, $r9, $r12, $r13;
        org.apache.commons.io.monitor.FileAlterationObserver r0;
        org.apache.commons.io.monitor.FileEntry[] $r10, $r14;
        boolean $z0, $z1, $z2, $z3;
        java.util.Iterator $r2, $r19;
        org.apache.commons.io.monitor.FileAlterationListener r7, r17;
        java.io.File $r4;
        java.util.List $r1, $r18;
        java.lang.Object $r6, $r16;
        java.io.File[] $r11, $r15;

        r0 := @this: org.apache.commons.io.monitor.FileAlterationObserver;

        $r1 = r0.<org.apache.commons.io.monitor.FileAlterationObserver: java.util.List listeners>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r16 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r17 = (org.apache.commons.io.monitor.FileAlterationListener) $r16;

        interfaceinvoke r17.<org.apache.commons.io.monitor.FileAlterationListener: void onStart(org.apache.commons.io.monitor.FileAlterationObserver)>(r0);

        goto label1;

     label2:
        $r3 = r0.<org.apache.commons.io.monitor.FileAlterationObserver: org.apache.commons.io.monitor.FileEntry rootEntry>;

        $r4 = virtualinvoke $r3.<org.apache.commons.io.monitor.FileEntry: java.io.File getFile()>();

        $z1 = virtualinvoke $r4.<java.io.File: boolean exists()>();

        if $z1 == 0 goto label3;

        $r13 = r0.<org.apache.commons.io.monitor.FileAlterationObserver: org.apache.commons.io.monitor.FileEntry rootEntry>;

        $r12 = r0.<org.apache.commons.io.monitor.FileAlterationObserver: org.apache.commons.io.monitor.FileEntry rootEntry>;

        $r14 = virtualinvoke $r12.<org.apache.commons.io.monitor.FileEntry: org.apache.commons.io.monitor.FileEntry[] getChildren()>();

        $r15 = specialinvoke r0.<org.apache.commons.io.monitor.FileAlterationObserver: java.io.File[] listFiles(java.io.File)>($r4);

        specialinvoke r0.<org.apache.commons.io.monitor.FileAlterationObserver: void checkAndNotify(org.apache.commons.io.monitor.FileEntry,org.apache.commons.io.monitor.FileEntry[],java.io.File[])>($r13, $r14, $r15);

        goto label4;

     label3:
        $r5 = r0.<org.apache.commons.io.monitor.FileAlterationObserver: org.apache.commons.io.monitor.FileEntry rootEntry>;

        $z2 = virtualinvoke $r5.<org.apache.commons.io.monitor.FileEntry: boolean isExists()>();

        if $z2 == 0 goto label4;

        $r9 = r0.<org.apache.commons.io.monitor.FileAlterationObserver: org.apache.commons.io.monitor.FileEntry rootEntry>;

        $r8 = r0.<org.apache.commons.io.monitor.FileAlterationObserver: org.apache.commons.io.monitor.FileEntry rootEntry>;

        $r10 = virtualinvoke $r8.<org.apache.commons.io.monitor.FileEntry: org.apache.commons.io.monitor.FileEntry[] getChildren()>();

        $r11 = <org.apache.commons.io.FileUtils: java.io.File[] EMPTY_FILE_ARRAY>;

        specialinvoke r0.<org.apache.commons.io.monitor.FileAlterationObserver: void checkAndNotify(org.apache.commons.io.monitor.FileEntry,org.apache.commons.io.monitor.FileEntry[],java.io.File[])>($r9, $r10, $r11);

     label4:
        $r18 = r0.<org.apache.commons.io.monitor.FileAlterationObserver: java.util.List listeners>;

        $r19 = interfaceinvoke $r18.<java.util.List: java.util.Iterator iterator()>();

     label5:
        $z3 = interfaceinvoke $r19.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label6;

        $r6 = interfaceinvoke $r19.<java.util.Iterator: java.lang.Object next()>();

        r7 = (org.apache.commons.io.monitor.FileAlterationListener) $r6;

        interfaceinvoke r7.<org.apache.commons.io.monitor.FileAlterationListener: void onStop(org.apache.commons.io.monitor.FileAlterationObserver)>(r0);

        goto label5;

     label6:
        return;
    }

    private void checkAndNotify(org.apache.commons.io.monitor.FileEntry, org.apache.commons.io.monitor.FileEntry[], java.io.File[])
    {
        org.apache.commons.io.monitor.FileAlterationObserver r4;
        org.apache.commons.io.monitor.FileEntry r3, $r6, $r7, r8, $r22, $r23;
        org.apache.commons.io.monitor.FileEntry[] r1, r2, $r9, $r15, $r24;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, i9;
        java.io.File $r5, $r12, $r13, $r14, $r16, $r19, $r20, $r21;
        java.util.Comparator $r11, $r18;
        java.io.File[] r0, $r10, $r17;

        r4 := @this: org.apache.commons.io.monitor.FileAlterationObserver;

        r3 := @parameter0: org.apache.commons.io.monitor.FileEntry;

        r2 := @parameter1: org.apache.commons.io.monitor.FileEntry[];

        r0 := @parameter2: java.io.File[];

        i8 = 0;

        $i0 = lengthof r0;

        if $i0 <= 0 goto label1;

        $i6 = lengthof r0;

        $r24 = newarray (org.apache.commons.io.monitor.FileEntry)[$i6];

        goto label2;

     label1:
        $r24 = <org.apache.commons.io.monitor.FileEntry: org.apache.commons.io.monitor.FileEntry[] EMPTY_ENTRIES>;

     label2:
        r1 = $r24;

        $i7 = lengthof r2;

        i9 = 0;

     label3:
        if i9 >= $i7 goto label8;

        r8 = r2[i9];

     label4:
        $i2 = lengthof r0;

        if i8 >= $i2 goto label5;

        $r18 = r4.<org.apache.commons.io.monitor.FileAlterationObserver: java.util.Comparator comparator>;

        $r19 = virtualinvoke r8.<org.apache.commons.io.monitor.FileEntry: java.io.File getFile()>();

        $r20 = r0[i8];

        $i5 = interfaceinvoke $r18.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>($r19, $r20);

        if $i5 <= 0 goto label5;

        $r21 = r0[i8];

        $r22 = specialinvoke r4.<org.apache.commons.io.monitor.FileAlterationObserver: org.apache.commons.io.monitor.FileEntry createFileEntry(org.apache.commons.io.monitor.FileEntry,java.io.File)>(r3, $r21);

        r1[i8] = $r22;

        $r23 = r1[i8];

        specialinvoke r4.<org.apache.commons.io.monitor.FileAlterationObserver: void doCreate(org.apache.commons.io.monitor.FileEntry)>($r23);

        i8 = i8 + 1;

        goto label4;

     label5:
        $i3 = lengthof r0;

        if i8 >= $i3 goto label6;

        $r11 = r4.<org.apache.commons.io.monitor.FileAlterationObserver: java.util.Comparator comparator>;

        $r12 = virtualinvoke r8.<org.apache.commons.io.monitor.FileEntry: java.io.File getFile()>();

        $r13 = r0[i8];

        $i4 = interfaceinvoke $r11.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>($r12, $r13);

        if $i4 != 0 goto label6;

        $r14 = r0[i8];

        specialinvoke r4.<org.apache.commons.io.monitor.FileAlterationObserver: void doMatch(org.apache.commons.io.monitor.FileEntry,java.io.File)>(r8, $r14);

        $r15 = virtualinvoke r8.<org.apache.commons.io.monitor.FileEntry: org.apache.commons.io.monitor.FileEntry[] getChildren()>();

        $r16 = r0[i8];

        $r17 = specialinvoke r4.<org.apache.commons.io.monitor.FileAlterationObserver: java.io.File[] listFiles(java.io.File)>($r16);

        specialinvoke r4.<org.apache.commons.io.monitor.FileAlterationObserver: void checkAndNotify(org.apache.commons.io.monitor.FileEntry,org.apache.commons.io.monitor.FileEntry[],java.io.File[])>(r8, $r15, $r17);

        r1[i8] = r8;

        i8 = i8 + 1;

        goto label7;

     label6:
        $r9 = virtualinvoke r8.<org.apache.commons.io.monitor.FileEntry: org.apache.commons.io.monitor.FileEntry[] getChildren()>();

        $r10 = <org.apache.commons.io.FileUtils: java.io.File[] EMPTY_FILE_ARRAY>;

        specialinvoke r4.<org.apache.commons.io.monitor.FileAlterationObserver: void checkAndNotify(org.apache.commons.io.monitor.FileEntry,org.apache.commons.io.monitor.FileEntry[],java.io.File[])>(r8, $r9, $r10);

        specialinvoke r4.<org.apache.commons.io.monitor.FileAlterationObserver: void doDelete(org.apache.commons.io.monitor.FileEntry)>(r8);

     label7:
        i9 = i9 + 1;

        goto label3;

     label8:
        $i1 = lengthof r0;

        if i8 >= $i1 goto label9;

        $r5 = r0[i8];

        $r6 = specialinvoke r4.<org.apache.commons.io.monitor.FileAlterationObserver: org.apache.commons.io.monitor.FileEntry createFileEntry(org.apache.commons.io.monitor.FileEntry,java.io.File)>(r3, $r5);

        r1[i8] = $r6;

        $r7 = r1[i8];

        specialinvoke r4.<org.apache.commons.io.monitor.FileAlterationObserver: void doCreate(org.apache.commons.io.monitor.FileEntry)>($r7);

        i8 = i8 + 1;

        goto label8;

     label9:
        virtualinvoke r3.<org.apache.commons.io.monitor.FileEntry: void setChildren(org.apache.commons.io.monitor.FileEntry[])>(r1);

        return;
    }

    private org.apache.commons.io.monitor.FileEntry createFileEntry(org.apache.commons.io.monitor.FileEntry, java.io.File)
    {
        org.apache.commons.io.monitor.FileEntry r0, $r2, $r7;
        org.apache.commons.io.monitor.FileAlterationObserver r3;
        java.io.File r1, $r6;
        org.apache.commons.io.monitor.FileEntry[] r5, $r8;
        int $i0, $i1, i2, $i3;
        java.io.File[] $r4;

        r3 := @this: org.apache.commons.io.monitor.FileAlterationObserver;

        r0 := @parameter0: org.apache.commons.io.monitor.FileEntry;

        r1 := @parameter1: java.io.File;

        $r2 = virtualinvoke r0.<org.apache.commons.io.monitor.FileEntry: org.apache.commons.io.monitor.FileEntry newChildInstance(java.io.File)>(r1);

        virtualinvoke $r2.<org.apache.commons.io.monitor.FileEntry: boolean refresh(java.io.File)>(r1);

        $r4 = specialinvoke r3.<org.apache.commons.io.monitor.FileAlterationObserver: java.io.File[] listFiles(java.io.File)>(r1);

        $i0 = lengthof $r4;

        if $i0 <= 0 goto label1;

        $i1 = lengthof $r4;

        $r8 = newarray (org.apache.commons.io.monitor.FileEntry)[$i1];

        goto label2;

     label1:
        $r8 = <org.apache.commons.io.monitor.FileEntry: org.apache.commons.io.monitor.FileEntry[] EMPTY_ENTRIES>;

     label2:
        r5 = $r8;

        i2 = 0;

     label3:
        $i3 = lengthof $r4;

        if i2 >= $i3 goto label4;

        $r6 = $r4[i2];

        $r7 = specialinvoke r3.<org.apache.commons.io.monitor.FileAlterationObserver: org.apache.commons.io.monitor.FileEntry createFileEntry(org.apache.commons.io.monitor.FileEntry,java.io.File)>($r2, $r6);

        r5[i2] = $r7;

        i2 = i2 + 1;

        goto label3;

     label4:
        virtualinvoke $r2.<org.apache.commons.io.monitor.FileEntry: void setChildren(org.apache.commons.io.monitor.FileEntry[])>(r5);

        return $r2;
    }

    private void doCreate(org.apache.commons.io.monitor.FileEntry)
    {
        org.apache.commons.io.monitor.FileEntry r3, r5;
        java.util.Iterator $r2;
        org.apache.commons.io.monitor.FileAlterationListener r9;
        org.apache.commons.io.monitor.FileAlterationObserver r0;
        java.io.File $r7, $r8;
        java.util.List $r1;
        org.apache.commons.io.monitor.FileEntry[] $r4;
        int i0, i1;
        java.lang.Object $r6;
        boolean $z0, $z1;

        r0 := @this: org.apache.commons.io.monitor.FileAlterationObserver;

        r3 := @parameter0: org.apache.commons.io.monitor.FileEntry;

        $r1 = r0.<org.apache.commons.io.monitor.FileAlterationObserver: java.util.List listeners>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r6 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r9 = (org.apache.commons.io.monitor.FileAlterationListener) $r6;

        $z1 = virtualinvoke r3.<org.apache.commons.io.monitor.FileEntry: boolean isDirectory()>();

        if $z1 == 0 goto label2;

        $r8 = virtualinvoke r3.<org.apache.commons.io.monitor.FileEntry: java.io.File getFile()>();

        interfaceinvoke r9.<org.apache.commons.io.monitor.FileAlterationListener: void onDirectoryCreate(java.io.File)>($r8);

        goto label3;

     label2:
        $r7 = virtualinvoke r3.<org.apache.commons.io.monitor.FileEntry: java.io.File getFile()>();

        interfaceinvoke r9.<org.apache.commons.io.monitor.FileAlterationListener: void onFileCreate(java.io.File)>($r7);

     label3:
        goto label1;

     label4:
        $r4 = virtualinvoke r3.<org.apache.commons.io.monitor.FileEntry: org.apache.commons.io.monitor.FileEntry[] getChildren()>();

        i0 = lengthof $r4;

        i1 = 0;

     label5:
        if i1 >= i0 goto label6;

        r5 = $r4[i1];

        specialinvoke r0.<org.apache.commons.io.monitor.FileAlterationObserver: void doCreate(org.apache.commons.io.monitor.FileEntry)>(r5);

        i1 = i1 + 1;

        goto label5;

     label6:
        return;
    }

    private void doMatch(org.apache.commons.io.monitor.FileEntry, java.io.File)
    {
        org.apache.commons.io.monitor.FileEntry r0;
        java.util.Iterator $r4;
        org.apache.commons.io.monitor.FileAlterationListener r6;
        org.apache.commons.io.monitor.FileAlterationObserver r2;
        java.io.File r1;
        java.util.List $r3;
        java.lang.Object $r5;
        boolean $z0, $z1, $z2;

        r2 := @this: org.apache.commons.io.monitor.FileAlterationObserver;

        r0 := @parameter0: org.apache.commons.io.monitor.FileEntry;

        r1 := @parameter1: java.io.File;

        $z0 = virtualinvoke r0.<org.apache.commons.io.monitor.FileEntry: boolean refresh(java.io.File)>(r1);

        if $z0 == 0 goto label4;

        $r3 = r2.<org.apache.commons.io.monitor.FileAlterationObserver: java.util.List listeners>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (org.apache.commons.io.monitor.FileAlterationListener) $r5;

        $z2 = virtualinvoke r0.<org.apache.commons.io.monitor.FileEntry: boolean isDirectory()>();

        if $z2 == 0 goto label2;

        interfaceinvoke r6.<org.apache.commons.io.monitor.FileAlterationListener: void onDirectoryChange(java.io.File)>(r1);

        goto label3;

     label2:
        interfaceinvoke r6.<org.apache.commons.io.monitor.FileAlterationListener: void onFileChange(java.io.File)>(r1);

     label3:
        goto label1;

     label4:
        return;
    }

    private void doDelete(org.apache.commons.io.monitor.FileEntry)
    {
        org.apache.commons.io.monitor.FileEntry r5;
        java.util.Iterator $r2;
        org.apache.commons.io.monitor.FileAlterationListener r4;
        org.apache.commons.io.monitor.FileAlterationObserver r0;
        java.io.File $r6, $r7;
        java.util.List $r1;
        java.lang.Object $r3;
        boolean $z0, $z1;

        r0 := @this: org.apache.commons.io.monitor.FileAlterationObserver;

        r5 := @parameter0: org.apache.commons.io.monitor.FileEntry;

        $r1 = r0.<org.apache.commons.io.monitor.FileAlterationObserver: java.util.List listeners>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.apache.commons.io.monitor.FileAlterationListener) $r3;

        $z1 = virtualinvoke r5.<org.apache.commons.io.monitor.FileEntry: boolean isDirectory()>();

        if $z1 == 0 goto label2;

        $r7 = virtualinvoke r5.<org.apache.commons.io.monitor.FileEntry: java.io.File getFile()>();

        interfaceinvoke r4.<org.apache.commons.io.monitor.FileAlterationListener: void onDirectoryDelete(java.io.File)>($r7);

        goto label3;

     label2:
        $r6 = virtualinvoke r5.<org.apache.commons.io.monitor.FileEntry: java.io.File getFile()>();

        interfaceinvoke r4.<org.apache.commons.io.monitor.FileAlterationListener: void onFileDelete(java.io.File)>($r6);

     label3:
        goto label1;

     label4:
        return;
    }

    private java.io.File[] listFiles(java.io.File)
    {
        org.apache.commons.io.monitor.FileAlterationObserver r1;
        java.io.File r0;
        java.io.FileFilter $r4, $r5;
        int $i0;
        java.util.Comparator $r2, $r3;
        java.io.File[] r6, $r7;
        boolean $z0;

        r1 := @this: org.apache.commons.io.monitor.FileAlterationObserver;

        r0 := @parameter0: java.io.File;

        r6 = null;

        $z0 = virtualinvoke r0.<java.io.File: boolean isDirectory()>();

        if $z0 == 0 goto label3;

        $r4 = r1.<org.apache.commons.io.monitor.FileAlterationObserver: java.io.FileFilter fileFilter>;

        if $r4 != null goto label1;

        $r7 = virtualinvoke r0.<java.io.File: java.io.File[] listFiles()>();

        goto label2;

     label1:
        $r5 = r1.<org.apache.commons.io.monitor.FileAlterationObserver: java.io.FileFilter fileFilter>;

        $r7 = virtualinvoke r0.<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>($r5);

     label2:
        r6 = $r7;

     label3:
        if r6 != null goto label4;

        r6 = <org.apache.commons.io.FileUtils: java.io.File[] EMPTY_FILE_ARRAY>;

     label4:
        $r2 = r1.<org.apache.commons.io.monitor.FileAlterationObserver: java.util.Comparator comparator>;

        if $r2 == null goto label5;

        $i0 = lengthof r6;

        if $i0 <= 1 goto label5;

        $r3 = r1.<org.apache.commons.io.monitor.FileAlterationObserver: java.util.Comparator comparator>;

        staticinvoke <java.util.Arrays: void sort(java.lang.Object[],java.util.Comparator)>(r6, $r3);

     label5:
        return r6;
    }

    public java.lang.String toString()
    {
        org.apache.commons.io.monitor.FileAlterationObserver r1;
        java.io.File $r4;
        java.util.List $r7;
        java.io.FileFilter $r6, $r9;
        int $i0;
        java.lang.StringBuilder $r0;
        java.lang.Class $r2;
        java.lang.String $r3, $r5, $r8, $r10;

        r1 := @this: org.apache.commons.io.monitor.FileAlterationObserver;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getSimpleName()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[file=\'");

        $r4 = virtualinvoke r1.<org.apache.commons.io.monitor.FileAlterationObserver: java.io.File getDirectory()>();

        $r5 = virtualinvoke $r4.<java.io.File: java.lang.String getPath()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(39);

        $r6 = r1.<org.apache.commons.io.monitor.FileAlterationObserver: java.io.FileFilter fileFilter>;

        if $r6 == null goto label1;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r9 = r1.<org.apache.commons.io.monitor.FileAlterationObserver: java.io.FileFilter fileFilter>;

        $r10 = virtualinvoke $r9.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

     label1:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", listeners=");

        $r7 = r1.<org.apache.commons.io.monitor.FileAlterationObserver: java.util.List listeners>;

        $i0 = interfaceinvoke $r7.<java.util.List: int size()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r8 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;
    }
}
