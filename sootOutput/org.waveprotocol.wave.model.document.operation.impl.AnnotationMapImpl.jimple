public class org.waveprotocol.wave.model.document.operation.impl.AnnotationMapImpl extends org.waveprotocol.wave.model.document.operation.util.ImmutableStateMap implements org.waveprotocol.wave.model.document.operation.impl.AnnotationMap
{
    public static final org.waveprotocol.wave.model.document.operation.impl.AnnotationMapImpl EMPTY_MAP;

    public void <init>()
    {
        org.waveprotocol.wave.model.document.operation.impl.AnnotationMapImpl r0;

        r0 := @this: org.waveprotocol.wave.model.document.operation.impl.AnnotationMapImpl;

        specialinvoke r0.<org.waveprotocol.wave.model.document.operation.util.ImmutableStateMap: void <init>()>();

        return;
    }

    public void <init>(java.util.Map)
    {
        org.waveprotocol.wave.model.document.operation.impl.AnnotationMapImpl r0;
        java.util.Map r1;

        r0 := @this: org.waveprotocol.wave.model.document.operation.impl.AnnotationMapImpl;

        r1 := @parameter0: java.util.Map;

        specialinvoke r0.<org.waveprotocol.wave.model.document.operation.util.ImmutableStateMap: void <init>(java.util.Map)>(r1);

        return;
    }

    void <init>(java.util.List)
    {
        java.util.List r1;
        org.waveprotocol.wave.model.document.operation.impl.AnnotationMapImpl r0;

        r0 := @this: org.waveprotocol.wave.model.document.operation.impl.AnnotationMapImpl;

        r1 := @parameter0: java.util.List;

        specialinvoke r0.<org.waveprotocol.wave.model.document.operation.util.ImmutableStateMap: void <init>(java.util.List)>(r1);

        return;
    }

    protected org.waveprotocol.wave.model.document.operation.impl.AnnotationMapImpl createFromList(java.util.List)
    {
        java.util.List r1;
        org.waveprotocol.wave.model.document.operation.impl.AnnotationMapImpl $r0, r2;

        r2 := @this: org.waveprotocol.wave.model.document.operation.impl.AnnotationMapImpl;

        r1 := @parameter0: java.util.List;

        $r0 = new org.waveprotocol.wave.model.document.operation.impl.AnnotationMapImpl;

        specialinvoke $r0.<org.waveprotocol.wave.model.document.operation.impl.AnnotationMapImpl: void <init>(java.util.List)>(r1);

        return $r0;
    }

    protected volatile org.waveprotocol.wave.model.document.operation.util.ImmutableStateMap createFromList(java.util.List)
    {
        java.util.List r1;
        org.waveprotocol.wave.model.document.operation.impl.AnnotationMapImpl r0, $r2;

        r0 := @this: org.waveprotocol.wave.model.document.operation.impl.AnnotationMapImpl;

        r1 := @parameter0: java.util.List;

        $r2 = virtualinvoke r0.<org.waveprotocol.wave.model.document.operation.impl.AnnotationMapImpl: org.waveprotocol.wave.model.document.operation.impl.AnnotationMapImpl createFromList(java.util.List)>(r1);

        return $r2;
    }

    public volatile org.waveprotocol.wave.model.document.operation.impl.AnnotationMap updateWithNoCompatibilityCheck(org.waveprotocol.wave.model.document.operation.impl.AnnotationsUpdate)
    {
        org.waveprotocol.wave.model.document.operation.util.ImmutableStateMap $r2;
        org.waveprotocol.wave.model.document.operation.impl.AnnotationMapImpl r0;
        org.waveprotocol.wave.model.document.operation.impl.AnnotationsUpdate r1;
        org.waveprotocol.wave.model.document.operation.impl.AnnotationMap $r3;

        r0 := @this: org.waveprotocol.wave.model.document.operation.impl.AnnotationMapImpl;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.impl.AnnotationsUpdate;

        $r2 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.util.ImmutableStateMap: org.waveprotocol.wave.model.document.operation.util.ImmutableStateMap updateWithNoCompatibilityCheck(org.waveprotocol.wave.model.document.operation.util.UpdateMap)>(r1);

        $r3 = (org.waveprotocol.wave.model.document.operation.impl.AnnotationMap) $r2;

        return $r3;
    }

    public volatile org.waveprotocol.wave.model.document.operation.impl.AnnotationMap updateWith(org.waveprotocol.wave.model.document.operation.impl.AnnotationsUpdate)
    {
        org.waveprotocol.wave.model.document.operation.util.ImmutableStateMap $r2;
        org.waveprotocol.wave.model.document.operation.impl.AnnotationMapImpl r0;
        org.waveprotocol.wave.model.document.operation.impl.AnnotationsUpdate r1;
        org.waveprotocol.wave.model.document.operation.impl.AnnotationMap $r3;

        r0 := @this: org.waveprotocol.wave.model.document.operation.impl.AnnotationMapImpl;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.impl.AnnotationsUpdate;

        $r2 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.util.ImmutableStateMap: org.waveprotocol.wave.model.document.operation.util.ImmutableStateMap updateWith(org.waveprotocol.wave.model.document.operation.util.UpdateMap)>(r1);

        $r3 = (org.waveprotocol.wave.model.document.operation.impl.AnnotationMap) $r2;

        return $r3;
    }

    static void <clinit>()
    {
        org.waveprotocol.wave.model.document.operation.impl.AnnotationMapImpl $r0;

        $r0 = new org.waveprotocol.wave.model.document.operation.impl.AnnotationMapImpl;

        specialinvoke $r0.<org.waveprotocol.wave.model.document.operation.impl.AnnotationMapImpl: void <init>()>();

        <org.waveprotocol.wave.model.document.operation.impl.AnnotationMapImpl: org.waveprotocol.wave.model.document.operation.impl.AnnotationMapImpl EMPTY_MAP> = $r0;

        return;
    }
}
