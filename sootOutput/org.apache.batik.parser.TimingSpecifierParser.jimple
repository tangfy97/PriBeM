public class org.apache.batik.parser.TimingSpecifierParser extends org.apache.batik.parser.TimingParser
{
    protected org.apache.batik.parser.TimingSpecifierHandler timingSpecifierHandler;

    public void <init>(boolean, boolean)
    {
        org.apache.batik.parser.TimingSpecifierHandler $r1;
        org.apache.batik.parser.TimingSpecifierParser r0;
        boolean z0, z1;

        r0 := @this: org.apache.batik.parser.TimingSpecifierParser;

        z0 := @parameter0: boolean;

        z1 := @parameter1: boolean;

        specialinvoke r0.<org.apache.batik.parser.TimingParser: void <init>(boolean,boolean)>(z0, z1);

        $r1 = <org.apache.batik.parser.DefaultTimingSpecifierHandler: org.apache.batik.parser.TimingSpecifierHandler INSTANCE>;

        r0.<org.apache.batik.parser.TimingSpecifierParser: org.apache.batik.parser.TimingSpecifierHandler timingSpecifierHandler> = $r1;

        return;
    }

    public void setTimingSpecifierHandler(org.apache.batik.parser.TimingSpecifierHandler)
    {
        org.apache.batik.parser.TimingSpecifierHandler r1;
        org.apache.batik.parser.TimingSpecifierParser r0;

        r0 := @this: org.apache.batik.parser.TimingSpecifierParser;

        r1 := @parameter0: org.apache.batik.parser.TimingSpecifierHandler;

        r0.<org.apache.batik.parser.TimingSpecifierParser: org.apache.batik.parser.TimingSpecifierHandler timingSpecifierHandler> = r1;

        return;
    }

    public org.apache.batik.parser.TimingSpecifierHandler getTimingSpecifierHandler()
    {
        org.apache.batik.parser.TimingSpecifierHandler $r1;
        org.apache.batik.parser.TimingSpecifierParser r0;

        r0 := @this: org.apache.batik.parser.TimingSpecifierParser;

        $r1 = r0.<org.apache.batik.parser.TimingSpecifierParser: org.apache.batik.parser.TimingSpecifierHandler timingSpecifierHandler>;

        return $r1;
    }

    protected void doParse() throws org.apache.batik.parser.ParseException, java.io.IOException
    {
        java.lang.Object[] $r2, $r3;
        org.apache.batik.util.io.NormalizingReader $r1;
        java.lang.Integer $r5;
        int $i0, $i1, $i2, $i4;
        org.apache.batik.parser.TimingSpecifierParser r0;

        r0 := @this: org.apache.batik.parser.TimingSpecifierParser;

        $r1 = r0.<org.apache.batik.parser.AbstractParser: org.apache.batik.util.io.NormalizingReader reader>;

        $i0 = virtualinvoke $r1.<java.io.Reader: int read()>();

        r0.<org.apache.batik.parser.AbstractParser: int current> = $i0;

        $r2 = virtualinvoke r0.<org.apache.batik.parser.TimingParser: java.lang.Object[] parseTimingSpecifier()>();

        virtualinvoke r0.<org.apache.batik.parser.AbstractParser: void skipSpaces()>();

        $i1 = r0.<org.apache.batik.parser.AbstractParser: int current>;

        $i4 = (int) -1;

        if $i1 == $i4 goto label1;

        $r3 = newarray (java.lang.Object)[1];

        $r5 = new java.lang.Integer;

        $i2 = r0.<org.apache.batik.parser.AbstractParser: int current>;

        specialinvoke $r5.<java.lang.Integer: void <init>(int)>($i2);

        $r3[0] = $r5;

        virtualinvoke r0.<org.apache.batik.parser.AbstractParser: void reportError(java.lang.String,java.lang.Object[])>("end.of.stream.expected", $r3);

     label1:
        virtualinvoke r0.<org.apache.batik.parser.TimingSpecifierParser: void handleTimingSpecifier(java.lang.Object[])>($r2);

        return;
    }

    protected void handleTimingSpecifier(java.lang.Object[])
    {
        java.lang.Float $r14, $r19, $r24, $r33, $r40, $r47;
        java.lang.Integer $r2, $r29;
        org.apache.batik.parser.TimingSpecifierHandler $r4, $r7, $r12, $r15, $r20, $r30, $r31, $r34, $r41, $r48;
        java.lang.Character $r22;
        float $f0, $f1, $f2, $f3, $f4, $f5;
        java.lang.Object[] r0;
        java.util.Calendar $r6;
        int $i0, $i2;
        java.lang.String $r10, $r11, $r17, r26, $r37, $r38, $r44, $r45;
        org.apache.batik.parser.TimingSpecifierParser r3;
        char $c1;
        java.lang.Object $r1, $r5, $r8, $r9, $r13, $r16, $r18, $r21, $r23, $r25, $r27, $r28, $r32, $r35, $r36, $r39, $r42, $r43, $r46;

        r3 := @this: org.apache.batik.parser.TimingSpecifierParser;

        r0 := @parameter0: java.lang.Object[];

        $r1 = r0[0];

        $r2 = (java.lang.Integer) $r1;

        $i0 = virtualinvoke $r2.<java.lang.Integer: int intValue()>();

        tableswitch($i0)
        {
            case 0: goto label01;
            case 1: goto label02;
            case 2: goto label03;
            case 3: goto label04;
            case 4: goto label06;
            case 5: goto label07;
            case 6: goto label08;
            case 7: goto label09;
            case 8: goto label10;
            default: goto label11;
        };

     label01:
        $r48 = r3.<org.apache.batik.parser.TimingSpecifierParser: org.apache.batik.parser.TimingSpecifierHandler timingSpecifierHandler>;

        $r46 = r0[1];

        $r47 = (java.lang.Float) $r46;

        $f5 = virtualinvoke $r47.<java.lang.Float: float floatValue()>();

        interfaceinvoke $r48.<org.apache.batik.parser.TimingSpecifierHandler: void offset(float)>($f5);

        goto label11;

     label02:
        $r41 = r3.<org.apache.batik.parser.TimingSpecifierParser: org.apache.batik.parser.TimingSpecifierHandler timingSpecifierHandler>;

        $r39 = r0[1];

        $r40 = (java.lang.Float) $r39;

        $f4 = virtualinvoke $r40.<java.lang.Float: float floatValue()>();

        $r42 = r0[2];

        $r45 = (java.lang.String) $r42;

        $r43 = r0[3];

        $r44 = (java.lang.String) $r43;

        interfaceinvoke $r41.<org.apache.batik.parser.TimingSpecifierHandler: void syncbase(float,java.lang.String,java.lang.String)>($f4, $r45, $r44);

        goto label11;

     label03:
        $r34 = r3.<org.apache.batik.parser.TimingSpecifierParser: org.apache.batik.parser.TimingSpecifierHandler timingSpecifierHandler>;

        $r32 = r0[1];

        $r33 = (java.lang.Float) $r32;

        $f3 = virtualinvoke $r33.<java.lang.Float: float floatValue()>();

        $r35 = r0[2];

        $r38 = (java.lang.String) $r35;

        $r36 = r0[3];

        $r37 = (java.lang.String) $r36;

        interfaceinvoke $r34.<org.apache.batik.parser.TimingSpecifierHandler: void eventbase(float,java.lang.String,java.lang.String)>($f3, $r38, $r37);

        goto label11;

     label04:
        $r23 = r0[1];

        $r24 = (java.lang.Float) $r23;

        $f2 = virtualinvoke $r24.<java.lang.Float: float floatValue()>();

        $r25 = r0[2];

        r26 = (java.lang.String) $r25;

        $r27 = r0[3];

        if $r27 != null goto label05;

        $r31 = r3.<org.apache.batik.parser.TimingSpecifierParser: org.apache.batik.parser.TimingSpecifierHandler timingSpecifierHandler>;

        interfaceinvoke $r31.<org.apache.batik.parser.TimingSpecifierHandler: void repeat(float,java.lang.String)>($f2, r26);

        goto label11;

     label05:
        $r30 = r3.<org.apache.batik.parser.TimingSpecifierParser: org.apache.batik.parser.TimingSpecifierHandler timingSpecifierHandler>;

        $r28 = r0[3];

        $r29 = (java.lang.Integer) $r28;

        $i2 = virtualinvoke $r29.<java.lang.Integer: int intValue()>();

        interfaceinvoke $r30.<org.apache.batik.parser.TimingSpecifierHandler: void repeat(float,java.lang.String,int)>($f2, r26, $i2);

        goto label11;

     label06:
        $r20 = r3.<org.apache.batik.parser.TimingSpecifierParser: org.apache.batik.parser.TimingSpecifierHandler timingSpecifierHandler>;

        $r18 = r0[1];

        $r19 = (java.lang.Float) $r18;

        $f1 = virtualinvoke $r19.<java.lang.Float: float floatValue()>();

        $r21 = r0[2];

        $r22 = (java.lang.Character) $r21;

        $c1 = virtualinvoke $r22.<java.lang.Character: char charValue()>();

        interfaceinvoke $r20.<org.apache.batik.parser.TimingSpecifierHandler: void accesskey(float,char)>($f1, $c1);

        goto label11;

     label07:
        $r15 = r3.<org.apache.batik.parser.TimingSpecifierParser: org.apache.batik.parser.TimingSpecifierHandler timingSpecifierHandler>;

        $r13 = r0[1];

        $r14 = (java.lang.Float) $r13;

        $f0 = virtualinvoke $r14.<java.lang.Float: float floatValue()>();

        $r16 = r0[2];

        $r17 = (java.lang.String) $r16;

        interfaceinvoke $r15.<org.apache.batik.parser.TimingSpecifierHandler: void accessKeySVG12(float,java.lang.String)>($f0, $r17);

        goto label11;

     label08:
        $r12 = r3.<org.apache.batik.parser.TimingSpecifierParser: org.apache.batik.parser.TimingSpecifierHandler timingSpecifierHandler>;

        $r8 = r0[1];

        $r11 = (java.lang.String) $r8;

        $r9 = r0[2];

        $r10 = (java.lang.String) $r9;

        interfaceinvoke $r12.<org.apache.batik.parser.TimingSpecifierHandler: void mediaMarker(java.lang.String,java.lang.String)>($r11, $r10);

        goto label11;

     label09:
        $r7 = r3.<org.apache.batik.parser.TimingSpecifierParser: org.apache.batik.parser.TimingSpecifierHandler timingSpecifierHandler>;

        $r5 = r0[1];

        $r6 = (java.util.Calendar) $r5;

        interfaceinvoke $r7.<org.apache.batik.parser.TimingSpecifierHandler: void wallclock(java.util.Calendar)>($r6);

        goto label11;

     label10:
        $r4 = r3.<org.apache.batik.parser.TimingSpecifierParser: org.apache.batik.parser.TimingSpecifierHandler timingSpecifierHandler>;

        interfaceinvoke $r4.<org.apache.batik.parser.TimingSpecifierHandler: void indefinite()>();

     label11:
        return;
    }
}
