class org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler$DelegatingErrorHandlingCallable extends java.lang.Object implements java.util.concurrent.Callable
{
    private final java.util.concurrent.Callable delegate;
    private final org.springframework.util.ErrorHandler errorHandler;

    void <init>(java.util.concurrent.Callable, org.springframework.util.ErrorHandler)
    {
        org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler$DelegatingErrorHandlingCallable r0;
        org.springframework.util.ErrorHandler r2;
        java.util.concurrent.Callable r1;

        r0 := @this: org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler$DelegatingErrorHandlingCallable;

        r1 := @parameter0: java.util.concurrent.Callable;

        r2 := @parameter1: org.springframework.util.ErrorHandler;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler$DelegatingErrorHandlingCallable: java.util.concurrent.Callable delegate> = r1;

        r0.<org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler$DelegatingErrorHandlingCallable: org.springframework.util.ErrorHandler errorHandler> = r2;

        return;
    }

    public java.lang.Object call() throws java.lang.Exception
    {
        java.lang.Throwable $r3;
        org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler$DelegatingErrorHandlingCallable r0;
        org.springframework.util.ErrorHandler $r4;
        java.util.concurrent.Callable $r1;
        java.lang.Object $r2;

        r0 := @this: org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler$DelegatingErrorHandlingCallable;

     label1:
        $r1 = r0.<org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler$DelegatingErrorHandlingCallable: java.util.concurrent.Callable delegate>;

        $r2 = interfaceinvoke $r1.<java.util.concurrent.Callable: java.lang.Object call()>();

     label2:
        return $r2;

     label3:
        $r3 := @caughtexception;

        $r4 = r0.<org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler$DelegatingErrorHandlingCallable: org.springframework.util.ErrorHandler errorHandler>;

        interfaceinvoke $r4.<org.springframework.util.ErrorHandler: void handleError(java.lang.Throwable)>($r3);

        return null;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
}
