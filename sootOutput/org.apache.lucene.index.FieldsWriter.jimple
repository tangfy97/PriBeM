final class org.apache.lucene.index.FieldsWriter extends java.lang.Object
{
    static final int FIELD_IS_TOKENIZED;
    static final int FIELD_IS_BINARY;
    static final int FIELD_IS_COMPRESSED;
    private static final int _NUMERIC_BIT_SHIFT;
    static final int FIELD_IS_NUMERIC_MASK;
    static final int FIELD_IS_NUMERIC_INT;
    static final int FIELD_IS_NUMERIC_LONG;
    static final int FIELD_IS_NUMERIC_FLOAT;
    static final int FIELD_IS_NUMERIC_DOUBLE;
    static final int FORMAT;
    static final int FORMAT_VERSION_UTF8_LENGTH_IN_BYTES;
    static final int FORMAT_LUCENE_3_0_NO_COMPRESSED_FIELDS;
    static final int FORMAT_LUCENE_3_2_NUMERIC_FIELDS;
    static final int FORMAT_CURRENT;
    private org.apache.lucene.index.FieldInfos fieldInfos;
    private org.apache.lucene.store.Directory directory;
    private java.lang.String segment;
    private org.apache.lucene.store.IndexOutput fieldsStream;
    private org.apache.lucene.store.IndexOutput indexStream;
    static final boolean $assertionsDisabled;

    void <init>(org.apache.lucene.store.Directory, java.lang.String, org.apache.lucene.index.FieldInfos) throws java.io.IOException
    {
        java.lang.Throwable $r10;
        org.apache.lucene.store.Directory r1;
        java.lang.String r2, $r4, $r6;
        org.apache.lucene.index.FieldInfos r3;
        org.apache.lucene.store.IndexOutput $r5, $r7, $r8, $r9;
        org.apache.lucene.index.FieldsWriter r0;
        boolean z0;

        r0 := @this: org.apache.lucene.index.FieldsWriter;

        r1 := @parameter0: org.apache.lucene.store.Directory;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: org.apache.lucene.index.FieldInfos;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.lucene.index.FieldsWriter: org.apache.lucene.store.Directory directory> = r1;

        r0.<org.apache.lucene.index.FieldsWriter: java.lang.String segment> = r2;

        r0.<org.apache.lucene.index.FieldsWriter: org.apache.lucene.index.FieldInfos fieldInfos> = r3;

        z0 = 0;

     label1:
        $r4 = staticinvoke <org.apache.lucene.index.IndexFileNames: java.lang.String segmentFileName(java.lang.String,java.lang.String)>(r2, "fdt");

        $r5 = virtualinvoke r1.<org.apache.lucene.store.Directory: org.apache.lucene.store.IndexOutput createOutput(java.lang.String)>($r4);

        r0.<org.apache.lucene.index.FieldsWriter: org.apache.lucene.store.IndexOutput fieldsStream> = $r5;

        $r6 = staticinvoke <org.apache.lucene.index.IndexFileNames: java.lang.String segmentFileName(java.lang.String,java.lang.String)>(r2, "fdx");

        $r7 = virtualinvoke r1.<org.apache.lucene.store.Directory: org.apache.lucene.store.IndexOutput createOutput(java.lang.String)>($r6);

        r0.<org.apache.lucene.index.FieldsWriter: org.apache.lucene.store.IndexOutput indexStream> = $r7;

        $r8 = r0.<org.apache.lucene.index.FieldsWriter: org.apache.lucene.store.IndexOutput fieldsStream>;

        virtualinvoke $r8.<org.apache.lucene.store.IndexOutput: void writeInt(int)>(3);

        $r9 = r0.<org.apache.lucene.index.FieldsWriter: org.apache.lucene.store.IndexOutput indexStream>;

        virtualinvoke $r9.<org.apache.lucene.store.IndexOutput: void writeInt(int)>(3);

        z0 = 1;

        goto label6;

     label2:
        goto label5;

     label3:
        $r10 := @caughtexception;

        goto label8;

     label4:
        throw $r10;

     label5:
        return;

     label6:
        if 1 != 0 goto label7;

        virtualinvoke r0.<org.apache.lucene.index.FieldsWriter: void abort()>();

     label7:
        goto label2;

     label8:
        if z0 != 0 goto label9;

        virtualinvoke r0.<org.apache.lucene.index.FieldsWriter: void abort()>();

     label9:
        goto label4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    void <init>(org.apache.lucene.store.IndexOutput, org.apache.lucene.store.IndexOutput, org.apache.lucene.index.FieldInfos)
    {
        org.apache.lucene.index.FieldInfos r1;
        org.apache.lucene.store.IndexOutput r2, r3;
        org.apache.lucene.index.FieldsWriter r0;

        r0 := @this: org.apache.lucene.index.FieldsWriter;

        r3 := @parameter0: org.apache.lucene.store.IndexOutput;

        r2 := @parameter1: org.apache.lucene.store.IndexOutput;

        r1 := @parameter2: org.apache.lucene.index.FieldInfos;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.lucene.index.FieldsWriter: org.apache.lucene.store.Directory directory> = null;

        r0.<org.apache.lucene.index.FieldsWriter: java.lang.String segment> = null;

        r0.<org.apache.lucene.index.FieldsWriter: org.apache.lucene.index.FieldInfos fieldInfos> = r1;

        r0.<org.apache.lucene.index.FieldsWriter: org.apache.lucene.store.IndexOutput fieldsStream> = r2;

        r0.<org.apache.lucene.index.FieldsWriter: org.apache.lucene.store.IndexOutput indexStream> = r3;

        return;
    }

    void setFieldsStream(org.apache.lucene.store.IndexOutput)
    {
        org.apache.lucene.store.IndexOutput r1;
        org.apache.lucene.index.FieldsWriter r0;

        r0 := @this: org.apache.lucene.index.FieldsWriter;

        r1 := @parameter0: org.apache.lucene.store.IndexOutput;

        r0.<org.apache.lucene.index.FieldsWriter: org.apache.lucene.store.IndexOutput fieldsStream> = r1;

        return;
    }

    void flushDocument(int, org.apache.lucene.store.RAMOutputStream) throws java.io.IOException
    {
        long $l0;
        org.apache.lucene.store.RAMOutputStream r4;
        int i1;
        org.apache.lucene.store.IndexOutput $r1, $r2, $r3, $r5;
        org.apache.lucene.index.FieldsWriter r0;

        r0 := @this: org.apache.lucene.index.FieldsWriter;

        i1 := @parameter0: int;

        r4 := @parameter1: org.apache.lucene.store.RAMOutputStream;

        $r2 = r0.<org.apache.lucene.index.FieldsWriter: org.apache.lucene.store.IndexOutput indexStream>;

        $r1 = r0.<org.apache.lucene.index.FieldsWriter: org.apache.lucene.store.IndexOutput fieldsStream>;

        $l0 = virtualinvoke $r1.<org.apache.lucene.store.IndexOutput: long getFilePointer()>();

        virtualinvoke $r2.<org.apache.lucene.store.IndexOutput: void writeLong(long)>($l0);

        $r3 = r0.<org.apache.lucene.index.FieldsWriter: org.apache.lucene.store.IndexOutput fieldsStream>;

        virtualinvoke $r3.<org.apache.lucene.store.IndexOutput: void writeVInt(int)>(i1);

        $r5 = r0.<org.apache.lucene.index.FieldsWriter: org.apache.lucene.store.IndexOutput fieldsStream>;

        virtualinvoke r4.<org.apache.lucene.store.RAMOutputStream: void writeTo(org.apache.lucene.store.IndexOutput)>($r5);

        return;
    }

    void skipDocument() throws java.io.IOException
    {
        long $l0;
        org.apache.lucene.store.IndexOutput $r1, $r2, $r3;
        org.apache.lucene.index.FieldsWriter r0;

        r0 := @this: org.apache.lucene.index.FieldsWriter;

        $r2 = r0.<org.apache.lucene.index.FieldsWriter: org.apache.lucene.store.IndexOutput indexStream>;

        $r1 = r0.<org.apache.lucene.index.FieldsWriter: org.apache.lucene.store.IndexOutput fieldsStream>;

        $l0 = virtualinvoke $r1.<org.apache.lucene.store.IndexOutput: long getFilePointer()>();

        virtualinvoke $r2.<org.apache.lucene.store.IndexOutput: void writeLong(long)>($l0);

        $r3 = r0.<org.apache.lucene.index.FieldsWriter: org.apache.lucene.store.IndexOutput fieldsStream>;

        virtualinvoke $r3.<org.apache.lucene.store.IndexOutput: void writeVInt(int)>(0);

        return;
    }

    void close() throws java.io.IOException
    {
        java.lang.Throwable $r5;
        org.apache.lucene.store.Directory $r1;
        java.io.Closeable[] $r2;
        org.apache.lucene.store.IndexOutput $r3, $r4;
        org.apache.lucene.index.FieldsWriter r0;

        r0 := @this: org.apache.lucene.index.FieldsWriter;

        $r1 = r0.<org.apache.lucene.index.FieldsWriter: org.apache.lucene.store.Directory directory>;

        if $r1 == null goto label5;

     label1:
        $r2 = newarray (java.io.Closeable)[2];

        $r3 = r0.<org.apache.lucene.index.FieldsWriter: org.apache.lucene.store.IndexOutput fieldsStream>;

        $r2[0] = $r3;

        $r4 = r0.<org.apache.lucene.index.FieldsWriter: org.apache.lucene.store.IndexOutput indexStream>;

        $r2[1] = $r4;

        staticinvoke <org.apache.lucene.util.IOUtils: void close(java.io.Closeable[])>($r2);

        goto label6;

     label2:
        goto label5;

     label3:
        $r5 := @caughtexception;

        goto label7;

     label4:
        throw $r5;

     label5:
        return;

     label6:
        r0.<org.apache.lucene.index.FieldsWriter: org.apache.lucene.store.IndexOutput indexStream> = null;

        r0.<org.apache.lucene.index.FieldsWriter: org.apache.lucene.store.IndexOutput fieldsStream> = null;

        goto label2;

     label7:
        r0.<org.apache.lucene.index.FieldsWriter: org.apache.lucene.store.IndexOutput indexStream> = null;

        r0.<org.apache.lucene.index.FieldsWriter: org.apache.lucene.store.IndexOutput fieldsStream> = null;

        goto label4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    void abort()
    {
        java.io.IOException $r8, $r9, $r10;
        org.apache.lucene.store.Directory $r1, $r3, $r6;
        java.lang.String $r2, $r4, $r5, $r7;
        org.apache.lucene.index.FieldsWriter r0;

        r0 := @this: org.apache.lucene.index.FieldsWriter;

        $r1 = r0.<org.apache.lucene.index.FieldsWriter: org.apache.lucene.store.Directory directory>;

        if $r1 == null goto label10;

     label01:
        virtualinvoke r0.<org.apache.lucene.index.FieldsWriter: void close()>();

     label02:
        goto label04;

     label03:
        $r10 := @caughtexception;

     label04:
        $r3 = r0.<org.apache.lucene.index.FieldsWriter: org.apache.lucene.store.Directory directory>;

        $r2 = r0.<org.apache.lucene.index.FieldsWriter: java.lang.String segment>;

        $r4 = staticinvoke <org.apache.lucene.index.IndexFileNames: java.lang.String segmentFileName(java.lang.String,java.lang.String)>($r2, "fdt");

        virtualinvoke $r3.<org.apache.lucene.store.Directory: void deleteFile(java.lang.String)>($r4);

     label05:
        goto label07;

     label06:
        $r9 := @caughtexception;

     label07:
        $r6 = r0.<org.apache.lucene.index.FieldsWriter: org.apache.lucene.store.Directory directory>;

        $r5 = r0.<org.apache.lucene.index.FieldsWriter: java.lang.String segment>;

        $r7 = staticinvoke <org.apache.lucene.index.IndexFileNames: java.lang.String segmentFileName(java.lang.String,java.lang.String)>($r5, "fdx");

        virtualinvoke $r6.<org.apache.lucene.store.Directory: void deleteFile(java.lang.String)>($r7);

     label08:
        goto label10;

     label09:
        $r8 := @caughtexception;

     label10:
        return;

        catch java.io.IOException from label01 to label02 with label03;
        catch java.io.IOException from label04 to label05 with label06;
        catch java.io.IOException from label07 to label08 with label09;
    }

    final void writeField(org.apache.lucene.index.FieldInfo, org.apache.lucene.document.Fieldable) throws java.io.IOException
    {
        org.apache.lucene.document.Fieldable r3;
        byte[] $r14;
        org.apache.lucene.document.NumericField$DataType $r8, $r19;
        byte b11, $b12;
        int[] $r7, $r18;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        float $f0;
        org.apache.lucene.document.NumericField $r17, r22;
        org.apache.lucene.index.FieldsWriter r0;
        long $l3, $l5;
        java.lang.AssertionError $r13, $r20;
        int $i0, $i1, $i2, $i4, $i6, $i7, $i8, $i9, $i10;
        java.lang.String $r5;
        java.lang.Number $r6;
        org.apache.lucene.store.IndexOutput $r2, $r4, $r9, $r10, $r11, $r12, $r15, $r16, $r21;
        double $d0;
        org.apache.lucene.index.FieldInfo r1;

        r0 := @this: org.apache.lucene.index.FieldsWriter;

        r1 := @parameter0: org.apache.lucene.index.FieldInfo;

        r3 := @parameter1: org.apache.lucene.document.Fieldable;

        $r2 = r0.<org.apache.lucene.index.FieldsWriter: org.apache.lucene.store.IndexOutput fieldsStream>;

        $i0 = r1.<org.apache.lucene.index.FieldInfo: int number>;

        virtualinvoke $r2.<org.apache.lucene.store.IndexOutput: void writeVInt(int)>($i0);

        b11 = 0;

        $z0 = interfaceinvoke r3.<org.apache.lucene.document.Fieldable: boolean isTokenized()>();

        if $z0 == 0 goto label01;

        b11 = 1;

     label01:
        $z1 = interfaceinvoke r3.<org.apache.lucene.document.Fieldable: boolean isBinary()>();

        if $z1 == 0 goto label02;

        b11 = b11 | 2;

     label02:
        $z2 = r3 instanceof org.apache.lucene.document.NumericField;

        if $z2 == 0 goto label08;

        $r18 = <org.apache.lucene.index.FieldsWriter$1: int[] $SwitchMap$org$apache$lucene$document$NumericField$DataType>;

        $r17 = (org.apache.lucene.document.NumericField) r3;

        $r19 = virtualinvoke $r17.<org.apache.lucene.document.NumericField: org.apache.lucene.document.NumericField$DataType getDataType()>();

        $i9 = virtualinvoke $r19.<org.apache.lucene.document.NumericField$DataType: int ordinal()>();

        $i10 = $r18[$i9];

        tableswitch($i10)
        {
            case 1: goto label03;
            case 2: goto label04;
            case 3: goto label05;
            case 4: goto label06;
            default: goto label07;
        };

     label03:
        b11 = b11 | 8;

        goto label08;

     label04:
        b11 = b11 | 16;

        goto label08;

     label05:
        b11 = b11 | 24;

        goto label08;

     label06:
        b11 = b11 | 32;

        goto label08;

     label07:
        $z5 = <org.apache.lucene.index.FieldsWriter: boolean $assertionsDisabled>;

        if $z5 != 0 goto label08;

        $r20 = new java.lang.AssertionError;

        specialinvoke $r20.<java.lang.AssertionError: void <init>(java.lang.Object)>("Should never get here");

        throw $r20;

     label08:
        $r21 = r0.<org.apache.lucene.index.FieldsWriter: org.apache.lucene.store.IndexOutput fieldsStream>;

        $b12 = (byte) b11;

        virtualinvoke $r21.<org.apache.lucene.store.IndexOutput: void writeByte(byte)>($b12);

        $z6 = interfaceinvoke r3.<org.apache.lucene.document.Fieldable: boolean isBinary()>();

        if $z6 == 0 goto label09;

        $r14 = interfaceinvoke r3.<org.apache.lucene.document.Fieldable: byte[] getBinaryValue()>();

        $i7 = interfaceinvoke r3.<org.apache.lucene.document.Fieldable: int getBinaryLength()>();

        $i8 = interfaceinvoke r3.<org.apache.lucene.document.Fieldable: int getBinaryOffset()>();

        $r15 = r0.<org.apache.lucene.index.FieldsWriter: org.apache.lucene.store.IndexOutput fieldsStream>;

        virtualinvoke $r15.<org.apache.lucene.store.IndexOutput: void writeVInt(int)>($i7);

        $r16 = r0.<org.apache.lucene.index.FieldsWriter: org.apache.lucene.store.IndexOutput fieldsStream>;

        virtualinvoke $r16.<org.apache.lucene.store.IndexOutput: void writeBytes(byte[],int,int)>($r14, $i8, $i7);

        goto label17;

     label09:
        $z3 = r3 instanceof org.apache.lucene.document.NumericField;

        if $z3 == 0 goto label16;

        r22 = (org.apache.lucene.document.NumericField) r3;

        $r6 = virtualinvoke r22.<org.apache.lucene.document.NumericField: java.lang.Number getNumericValue()>();

        $r7 = <org.apache.lucene.index.FieldsWriter$1: int[] $SwitchMap$org$apache$lucene$document$NumericField$DataType>;

        $r8 = virtualinvoke r22.<org.apache.lucene.document.NumericField: org.apache.lucene.document.NumericField$DataType getDataType()>();

        $i1 = virtualinvoke $r8.<org.apache.lucene.document.NumericField$DataType: int ordinal()>();

        $i2 = $r7[$i1];

        tableswitch($i2)
        {
            case 1: goto label10;
            case 2: goto label11;
            case 3: goto label12;
            case 4: goto label13;
            default: goto label14;
        };

     label10:
        $r12 = r0.<org.apache.lucene.index.FieldsWriter: org.apache.lucene.store.IndexOutput fieldsStream>;

        $i6 = virtualinvoke $r6.<java.lang.Number: int intValue()>();

        virtualinvoke $r12.<org.apache.lucene.store.IndexOutput: void writeInt(int)>($i6);

        goto label15;

     label11:
        $r11 = r0.<org.apache.lucene.index.FieldsWriter: org.apache.lucene.store.IndexOutput fieldsStream>;

        $l5 = virtualinvoke $r6.<java.lang.Number: long longValue()>();

        virtualinvoke $r11.<org.apache.lucene.store.IndexOutput: void writeLong(long)>($l5);

        goto label15;

     label12:
        $r10 = r0.<org.apache.lucene.index.FieldsWriter: org.apache.lucene.store.IndexOutput fieldsStream>;

        $f0 = virtualinvoke $r6.<java.lang.Number: float floatValue()>();

        $i4 = staticinvoke <java.lang.Float: int floatToIntBits(float)>($f0);

        virtualinvoke $r10.<org.apache.lucene.store.IndexOutput: void writeInt(int)>($i4);

        goto label15;

     label13:
        $r9 = r0.<org.apache.lucene.index.FieldsWriter: org.apache.lucene.store.IndexOutput fieldsStream>;

        $d0 = virtualinvoke $r6.<java.lang.Number: double doubleValue()>();

        $l3 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d0);

        virtualinvoke $r9.<org.apache.lucene.store.IndexOutput: void writeLong(long)>($l3);

        goto label15;

     label14:
        $z4 = <org.apache.lucene.index.FieldsWriter: boolean $assertionsDisabled>;

        if $z4 != 0 goto label15;

        $r13 = new java.lang.AssertionError;

        specialinvoke $r13.<java.lang.AssertionError: void <init>(java.lang.Object)>("Should never get here");

        throw $r13;

     label15:
        goto label17;

     label16:
        $r4 = r0.<org.apache.lucene.index.FieldsWriter: org.apache.lucene.store.IndexOutput fieldsStream>;

        $r5 = interfaceinvoke r3.<org.apache.lucene.document.Fieldable: java.lang.String stringValue()>();

        virtualinvoke $r4.<org.apache.lucene.store.IndexOutput: void writeString(java.lang.String)>($r5);

     label17:
        return;
    }

    final void addRawDocuments(org.apache.lucene.store.IndexInput, int[], int) throws java.io.IOException
    {
        long $l0, $l2, $l3, $l6, l7;
        java.lang.AssertionError $r5;
        byte $b4;
        int[] r7;
        int i1, $i5, i8;
        org.apache.lucene.store.IndexOutput $r1, $r3, $r4, $r6;
        boolean $z0;
        org.apache.lucene.store.IndexInput r2;
        org.apache.lucene.index.FieldsWriter r0;

        r0 := @this: org.apache.lucene.index.FieldsWriter;

        r2 := @parameter0: org.apache.lucene.store.IndexInput;

        r7 := @parameter1: int[];

        i1 := @parameter2: int;

        $r1 = r0.<org.apache.lucene.index.FieldsWriter: org.apache.lucene.store.IndexOutput fieldsStream>;

        $l0 = virtualinvoke $r1.<org.apache.lucene.store.IndexOutput: long getFilePointer()>();

        l7 = $l0;

        i8 = 0;

     label1:
        if i8 >= i1 goto label2;

        $r6 = r0.<org.apache.lucene.index.FieldsWriter: org.apache.lucene.store.IndexOutput indexStream>;

        virtualinvoke $r6.<org.apache.lucene.store.IndexOutput: void writeLong(long)>(l7);

        $i5 = r7[i8];

        $l6 = (long) $i5;

        l7 = l7 + $l6;

        i8 = i8 + 1;

        goto label1;

     label2:
        $r3 = r0.<org.apache.lucene.index.FieldsWriter: org.apache.lucene.store.IndexOutput fieldsStream>;

        $l2 = l7 - $l0;

        virtualinvoke $r3.<org.apache.lucene.store.IndexOutput: void copyBytes(org.apache.lucene.store.DataInput,long)>(r2, $l2);

        $z0 = <org.apache.lucene.index.FieldsWriter: boolean $assertionsDisabled>;

        if $z0 != 0 goto label3;

        $r4 = r0.<org.apache.lucene.index.FieldsWriter: org.apache.lucene.store.IndexOutput fieldsStream>;

        $l3 = virtualinvoke $r4.<org.apache.lucene.store.IndexOutput: long getFilePointer()>();

        $b4 = $l3 cmp l7;

        if $b4 == 0 goto label3;

        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();

        throw $r5;

     label3:
        return;
    }

    final void addDocument(org.apache.lucene.document.Document) throws java.io.IOException
    {
        org.apache.lucene.document.Fieldable r13, r14;
        long $l0;
        org.apache.lucene.document.Document r3;
        int i1;
        java.lang.String $r10;
        org.apache.lucene.index.FieldInfos $r9;
        org.apache.lucene.store.IndexOutput $r1, $r2, $r6;
        boolean $z0, $z1, $z2, $z3;
        java.util.Iterator $r5, $r7;
        java.util.List $r4;
        org.apache.lucene.index.FieldInfo $r11;
        java.lang.Object $r8, $r12;
        org.apache.lucene.index.FieldsWriter r0;

        r0 := @this: org.apache.lucene.index.FieldsWriter;

        r3 := @parameter0: org.apache.lucene.document.Document;

        $r2 = r0.<org.apache.lucene.index.FieldsWriter: org.apache.lucene.store.IndexOutput indexStream>;

        $r1 = r0.<org.apache.lucene.index.FieldsWriter: org.apache.lucene.store.IndexOutput fieldsStream>;

        $l0 = virtualinvoke $r1.<org.apache.lucene.store.IndexOutput: long getFilePointer()>();

        virtualinvoke $r2.<org.apache.lucene.store.IndexOutput: void writeLong(long)>($l0);

        i1 = 0;

        $r4 = virtualinvoke r3.<org.apache.lucene.document.Document: java.util.List getFields()>();

        $r5 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r12 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r13 = (org.apache.lucene.document.Fieldable) $r12;

        $z3 = interfaceinvoke r13.<org.apache.lucene.document.Fieldable: boolean isStored()>();

        if $z3 == 0 goto label2;

        i1 = i1 + 1;

     label2:
        goto label1;

     label3:
        $r6 = r0.<org.apache.lucene.index.FieldsWriter: org.apache.lucene.store.IndexOutput fieldsStream>;

        virtualinvoke $r6.<org.apache.lucene.store.IndexOutput: void writeVInt(int)>(i1);

        $r7 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label4:
        $z1 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label6;

        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r14 = (org.apache.lucene.document.Fieldable) $r8;

        $z2 = interfaceinvoke r14.<org.apache.lucene.document.Fieldable: boolean isStored()>();

        if $z2 == 0 goto label5;

        $r9 = r0.<org.apache.lucene.index.FieldsWriter: org.apache.lucene.index.FieldInfos fieldInfos>;

        $r10 = interfaceinvoke r14.<org.apache.lucene.document.Fieldable: java.lang.String name()>();

        $r11 = virtualinvoke $r9.<org.apache.lucene.index.FieldInfos: org.apache.lucene.index.FieldInfo fieldInfo(java.lang.String)>($r10);

        virtualinvoke r0.<org.apache.lucene.index.FieldsWriter: void writeField(org.apache.lucene.index.FieldInfo,org.apache.lucene.document.Fieldable)>($r11, r14);

     label5:
        goto label4;

     label6:
        return;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        <org.apache.lucene.index.FieldsWriter: int FORMAT_CURRENT> = 3;

        <org.apache.lucene.index.FieldsWriter: int FORMAT_LUCENE_3_2_NUMERIC_FIELDS> = 3;

        <org.apache.lucene.index.FieldsWriter: int FORMAT_LUCENE_3_0_NO_COMPRESSED_FIELDS> = 2;

        <org.apache.lucene.index.FieldsWriter: int FORMAT_VERSION_UTF8_LENGTH_IN_BYTES> = 1;

        <org.apache.lucene.index.FieldsWriter: int FORMAT> = 0;

        <org.apache.lucene.index.FieldsWriter: int FIELD_IS_NUMERIC_DOUBLE> = 32;

        <org.apache.lucene.index.FieldsWriter: int FIELD_IS_NUMERIC_FLOAT> = 24;

        <org.apache.lucene.index.FieldsWriter: int FIELD_IS_NUMERIC_LONG> = 16;

        <org.apache.lucene.index.FieldsWriter: int FIELD_IS_NUMERIC_INT> = 8;

        <org.apache.lucene.index.FieldsWriter: int FIELD_IS_NUMERIC_MASK> = 56;

        <org.apache.lucene.index.FieldsWriter: int _NUMERIC_BIT_SHIFT> = 3;

        <org.apache.lucene.index.FieldsWriter: int FIELD_IS_COMPRESSED> = 4;

        <org.apache.lucene.index.FieldsWriter: int FIELD_IS_BINARY> = 2;

        <org.apache.lucene.index.FieldsWriter: int FIELD_IS_TOKENIZED> = 1;

        $r0 = class "Lorg/apache/lucene/index/FieldsWriter;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.lucene.index.FieldsWriter: boolean $assertionsDisabled> = $z1;

        return;
    }
}
