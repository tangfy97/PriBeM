public class org.springframework.jndi.TypeMismatchNamingException extends javax.naming.NamingException
{
    private java.lang.Class requiredType;
    private java.lang.Class actualType;

    public void <init>(java.lang.String, java.lang.Class, java.lang.Class)
    {
        org.springframework.jndi.TypeMismatchNamingException r0;
        java.lang.StringBuilder $r1, $r3, $r4, $r6, $r7, $r10, $r11;
        java.lang.Class r2, r8;
        java.lang.String r5, $r9, $r12;

        r0 := @this: org.springframework.jndi.TypeMismatchNamingException;

        r5 := @parameter0: java.lang.String;

        r8 := @parameter1: java.lang.Class;

        r2 := @parameter2: java.lang.Class;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>("Object of type [");

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] available at JNDI location [");

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] is not assignable to [");

        $r9 = virtualinvoke r8.<java.lang.Class: java.lang.String getName()>();

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<javax.naming.NamingException: void <init>(java.lang.String)>($r12);

        r0.<org.springframework.jndi.TypeMismatchNamingException: java.lang.Class requiredType> = r8;

        r0.<org.springframework.jndi.TypeMismatchNamingException: java.lang.Class actualType> = r2;

        return;
    }

    public void <init>(java.lang.String)
    {
        org.springframework.jndi.TypeMismatchNamingException r0;
        java.lang.String r1;

        r0 := @this: org.springframework.jndi.TypeMismatchNamingException;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<javax.naming.NamingException: void <init>(java.lang.String)>(r1);

        return;
    }

    public final java.lang.Class getRequiredType()
    {
        org.springframework.jndi.TypeMismatchNamingException r0;
        java.lang.Class $r1;

        r0 := @this: org.springframework.jndi.TypeMismatchNamingException;

        $r1 = r0.<org.springframework.jndi.TypeMismatchNamingException: java.lang.Class requiredType>;

        return $r1;
    }

    public final java.lang.Class getActualType()
    {
        org.springframework.jndi.TypeMismatchNamingException r0;
        java.lang.Class $r1;

        r0 := @this: org.springframework.jndi.TypeMismatchNamingException;

        $r1 = r0.<org.springframework.jndi.TypeMismatchNamingException: java.lang.Class actualType>;

        return $r1;
    }
}
