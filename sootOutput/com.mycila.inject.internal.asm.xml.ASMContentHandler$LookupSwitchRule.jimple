final class com.mycila.inject.internal.asm.xml.ASMContentHandler$LookupSwitchRule extends com.mycila.inject.internal.asm.xml.ASMContentHandler$Rule
{
    private final com.mycila.inject.internal.asm.xml.ASMContentHandler this$0;

    void <init>(com.mycila.inject.internal.asm.xml.ASMContentHandler)
    {
        com.mycila.inject.internal.asm.xml.ASMContentHandler$LookupSwitchRule r0;
        com.mycila.inject.internal.asm.xml.ASMContentHandler r1;

        r0 := @this: com.mycila.inject.internal.asm.xml.ASMContentHandler$LookupSwitchRule;

        r1 := @parameter0: com.mycila.inject.internal.asm.xml.ASMContentHandler;

        specialinvoke r0.<com.mycila.inject.internal.asm.xml.ASMContentHandler$Rule: void <init>(com.mycila.inject.internal.asm.xml.ASMContentHandler)>(r1);

        r0.<com.mycila.inject.internal.asm.xml.ASMContentHandler$LookupSwitchRule: com.mycila.inject.internal.asm.xml.ASMContentHandler this$0> = r1;

        return;
    }

    public final void begin(java.lang.String, org.xml.sax.Attributes)
    {
        java.util.HashMap $r0;
        com.mycila.inject.internal.asm.xml.ASMContentHandler$LookupSwitchRule r5;
        java.util.ArrayList $r3, $r4;
        com.mycila.inject.internal.asm.xml.ASMContentHandler $r6;
        org.xml.sax.Attributes r1;
        java.lang.String $r2, r7;

        r5 := @this: com.mycila.inject.internal.asm.xml.ASMContentHandler$LookupSwitchRule;

        r7 := @parameter0: java.lang.String;

        r1 := @parameter1: org.xml.sax.Attributes;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        $r2 = interfaceinvoke r1.<org.xml.sax.Attributes: java.lang.String getValue(java.lang.String)>("dflt");

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("dflt", $r2);

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("labels", $r3);

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("keys", $r4);

        $r6 = r5.<com.mycila.inject.internal.asm.xml.ASMContentHandler$LookupSwitchRule: com.mycila.inject.internal.asm.xml.ASMContentHandler this$0>;

        virtualinvoke $r6.<com.mycila.inject.internal.asm.xml.ASMContentHandler: void push(java.lang.Object)>($r0);

        return;
    }

    public final void end(java.lang.String)
    {
        java.lang.Object[] $r11;
        com.mycila.inject.internal.asm.xml.ASMContentHandler$LookupSwitchRule r0;
        com.mycila.inject.internal.asm.Label[] $r10, $r12, r13;
        int[] r14;
        com.mycila.inject.internal.asm.MethodVisitor $r15;
        java.util.Map r3;
        int $i0, $i1, $i2, $i3, i4;
        java.lang.String $r17, r18;
        com.mycila.inject.internal.asm.xml.ASMContentHandler $r1;
        java.util.List r7, r9;
        com.mycila.inject.internal.asm.Label $r5;
        java.lang.Object $r2, $r4, $r6, $r8, $r16;

        r0 := @this: com.mycila.inject.internal.asm.xml.ASMContentHandler$LookupSwitchRule;

        r18 := @parameter0: java.lang.String;

        $r1 = r0.<com.mycila.inject.internal.asm.xml.ASMContentHandler$LookupSwitchRule: com.mycila.inject.internal.asm.xml.ASMContentHandler this$0>;

        $r2 = virtualinvoke $r1.<com.mycila.inject.internal.asm.xml.ASMContentHandler: java.lang.Object pop()>();

        r3 = (java.util.Map) $r2;

        $r4 = interfaceinvoke r3.<java.util.Map: java.lang.Object get(java.lang.Object)>("dflt");

        $r5 = virtualinvoke r0.<com.mycila.inject.internal.asm.xml.ASMContentHandler$LookupSwitchRule: com.mycila.inject.internal.asm.Label getLabel(java.lang.Object)>($r4);

        $r6 = interfaceinvoke r3.<java.util.Map: java.lang.Object get(java.lang.Object)>("keys");

        r7 = (java.util.List) $r6;

        $r8 = interfaceinvoke r3.<java.util.Map: java.lang.Object get(java.lang.Object)>("labels");

        r9 = (java.util.List) $r8;

        $i0 = interfaceinvoke r9.<java.util.List: int size()>();

        $r10 = newarray (com.mycila.inject.internal.asm.Label)[$i0];

        $r11 = interfaceinvoke r9.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r10);

        $r12 = (com.mycila.inject.internal.asm.Label[]) $r11;

        r13 = (com.mycila.inject.internal.asm.Label[]) $r12;

        $i1 = interfaceinvoke r7.<java.util.List: int size()>();

        r14 = newarray (int)[$i1];

        i4 = 0;

     label1:
        $i2 = lengthof r14;

        if i4 >= $i2 goto label2;

        $r16 = interfaceinvoke r7.<java.util.List: java.lang.Object get(int)>(i4);

        $r17 = (java.lang.String) $r16;

        $i3 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r17);

        r14[i4] = $i3;

        i4 = i4 + 1;

        goto label1;

     label2:
        $r15 = virtualinvoke r0.<com.mycila.inject.internal.asm.xml.ASMContentHandler$LookupSwitchRule: com.mycila.inject.internal.asm.MethodVisitor getCodeVisitor()>();

        interfaceinvoke $r15.<com.mycila.inject.internal.asm.MethodVisitor: void visitLookupSwitchInsn(com.mycila.inject.internal.asm.Label,int[],com.mycila.inject.internal.asm.Label[])>($r5, r14, r13);

        return;
    }
}
