public class org.springframework.core.io.support.PathMatchingResourcePatternResolver extends java.lang.Object implements org.springframework.core.io.support.ResourcePatternResolver
{
    private static final org.apache.commons.logging.Log logger;
    private static java.lang.reflect.Method equinoxResolveMethod;
    private final org.springframework.core.io.ResourceLoader resourceLoader;
    private org.springframework.util.PathMatcher pathMatcher;

    static void <clinit>()
    {
        java.lang.Throwable $r7;
        java.lang.Class[] $r4;
        org.apache.commons.logging.Log $r0, $r6;
        java.lang.Class $r1, $r3;
        java.lang.ClassLoader $r2;
        java.lang.reflect.Method $r5;

        $r0 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>(class "Lorg/springframework/core/io/support/PathMatchingResourcePatternResolver;");

        <org.springframework.core.io.support.PathMatchingResourcePatternResolver: org.apache.commons.logging.Log logger> = $r0;

     label1:
        $r1 = class "Lorg/springframework/core/io/support/PathMatchingResourcePatternResolver;";

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r3 = virtualinvoke $r2.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>("org.eclipse.core.runtime.FileLocator");

        $r4 = newarray (java.lang.Class)[1];

        $r4[0] = class "Ljava/net/URL;";

        $r5 = virtualinvoke $r3.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("resolve", $r4);

        <org.springframework.core.io.support.PathMatchingResourcePatternResolver: java.lang.reflect.Method equinoxResolveMethod> = $r5;

        $r6 = <org.springframework.core.io.support.PathMatchingResourcePatternResolver: org.apache.commons.logging.Log logger>;

        interfaceinvoke $r6.<org.apache.commons.logging.Log: void debug(java.lang.Object)>("Found Equinox FileLocator for OSGi bundle URL resolution");

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

        <org.springframework.core.io.support.PathMatchingResourcePatternResolver: java.lang.reflect.Method equinoxResolveMethod> = null;

     label4:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void <init>()
    {
        org.springframework.core.io.support.PathMatchingResourcePatternResolver r0;
        org.springframework.util.AntPathMatcher $r1;
        org.springframework.core.io.DefaultResourceLoader $r2;

        r0 := @this: org.springframework.core.io.support.PathMatchingResourcePatternResolver;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new org.springframework.util.AntPathMatcher;

        specialinvoke $r1.<org.springframework.util.AntPathMatcher: void <init>()>();

        r0.<org.springframework.core.io.support.PathMatchingResourcePatternResolver: org.springframework.util.PathMatcher pathMatcher> = $r1;

        $r2 = new org.springframework.core.io.DefaultResourceLoader;

        specialinvoke $r2.<org.springframework.core.io.DefaultResourceLoader: void <init>()>();

        r0.<org.springframework.core.io.support.PathMatchingResourcePatternResolver: org.springframework.core.io.ResourceLoader resourceLoader> = $r2;

        return;
    }

    public void <init>(java.lang.ClassLoader)
    {
        org.springframework.core.io.support.PathMatchingResourcePatternResolver r0;
        org.springframework.core.io.DefaultResourceLoader $r2;
        org.springframework.util.AntPathMatcher $r1;
        java.lang.ClassLoader r3;

        r0 := @this: org.springframework.core.io.support.PathMatchingResourcePatternResolver;

        r3 := @parameter0: java.lang.ClassLoader;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new org.springframework.util.AntPathMatcher;

        specialinvoke $r1.<org.springframework.util.AntPathMatcher: void <init>()>();

        r0.<org.springframework.core.io.support.PathMatchingResourcePatternResolver: org.springframework.util.PathMatcher pathMatcher> = $r1;

        $r2 = new org.springframework.core.io.DefaultResourceLoader;

        specialinvoke $r2.<org.springframework.core.io.DefaultResourceLoader: void <init>(java.lang.ClassLoader)>(r3);

        r0.<org.springframework.core.io.support.PathMatchingResourcePatternResolver: org.springframework.core.io.ResourceLoader resourceLoader> = $r2;

        return;
    }

    public void <init>(org.springframework.core.io.ResourceLoader)
    {
        org.springframework.core.io.support.PathMatchingResourcePatternResolver r0;
        org.springframework.util.AntPathMatcher $r1;
        org.springframework.core.io.ResourceLoader r2;

        r0 := @this: org.springframework.core.io.support.PathMatchingResourcePatternResolver;

        r2 := @parameter0: org.springframework.core.io.ResourceLoader;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new org.springframework.util.AntPathMatcher;

        specialinvoke $r1.<org.springframework.util.AntPathMatcher: void <init>()>();

        r0.<org.springframework.core.io.support.PathMatchingResourcePatternResolver: org.springframework.util.PathMatcher pathMatcher> = $r1;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r2, "ResourceLoader must not be null");

        r0.<org.springframework.core.io.support.PathMatchingResourcePatternResolver: org.springframework.core.io.ResourceLoader resourceLoader> = r2;

        return;
    }

    public org.springframework.core.io.ResourceLoader getResourceLoader()
    {
        org.springframework.core.io.support.PathMatchingResourcePatternResolver r0;
        org.springframework.core.io.ResourceLoader $r1;

        r0 := @this: org.springframework.core.io.support.PathMatchingResourcePatternResolver;

        $r1 = r0.<org.springframework.core.io.support.PathMatchingResourcePatternResolver: org.springframework.core.io.ResourceLoader resourceLoader>;

        return $r1;
    }

    public java.lang.ClassLoader getClassLoader()
    {
        org.springframework.core.io.support.PathMatchingResourcePatternResolver r0;
        org.springframework.core.io.ResourceLoader $r1;
        java.lang.ClassLoader $r2;

        r0 := @this: org.springframework.core.io.support.PathMatchingResourcePatternResolver;

        $r1 = virtualinvoke r0.<org.springframework.core.io.support.PathMatchingResourcePatternResolver: org.springframework.core.io.ResourceLoader getResourceLoader()>();

        $r2 = interfaceinvoke $r1.<org.springframework.core.io.ResourceLoader: java.lang.ClassLoader getClassLoader()>();

        return $r2;
    }

    public void setPathMatcher(org.springframework.util.PathMatcher)
    {
        org.springframework.core.io.support.PathMatchingResourcePatternResolver r1;
        org.springframework.util.PathMatcher r0;

        r1 := @this: org.springframework.core.io.support.PathMatchingResourcePatternResolver;

        r0 := @parameter0: org.springframework.util.PathMatcher;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "PathMatcher must not be null");

        r1.<org.springframework.core.io.support.PathMatchingResourcePatternResolver: org.springframework.util.PathMatcher pathMatcher> = r0;

        return;
    }

    public org.springframework.util.PathMatcher getPathMatcher()
    {
        org.springframework.core.io.support.PathMatchingResourcePatternResolver r0;
        org.springframework.util.PathMatcher $r1;

        r0 := @this: org.springframework.core.io.support.PathMatchingResourcePatternResolver;

        $r1 = r0.<org.springframework.core.io.support.PathMatchingResourcePatternResolver: org.springframework.util.PathMatcher pathMatcher>;

        return $r1;
    }

    public org.springframework.core.io.Resource getResource(java.lang.String)
    {
        org.springframework.core.io.support.PathMatchingResourcePatternResolver r0;
        org.springframework.core.io.ResourceLoader $r1;
        java.lang.String r2;
        org.springframework.core.io.Resource $r3;

        r0 := @this: org.springframework.core.io.support.PathMatchingResourcePatternResolver;

        r2 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<org.springframework.core.io.support.PathMatchingResourcePatternResolver: org.springframework.core.io.ResourceLoader getResourceLoader()>();

        $r3 = interfaceinvoke $r1.<org.springframework.core.io.ResourceLoader: org.springframework.core.io.Resource getResource(java.lang.String)>(r2);

        return $r3;
    }

    public org.springframework.core.io.Resource[] getResources(java.lang.String) throws java.io.IOException
    {
        org.springframework.core.io.support.PathMatchingResourcePatternResolver r1;
        int $i0, i1, $i2, $i3;
        java.lang.String r0, $r3, $r9, $r10, $r11, $r12;
        boolean $z0, $z1, $z2;
        org.springframework.core.io.Resource $r6;
        org.springframework.core.io.ResourceLoader $r5;
        org.springframework.util.PathMatcher $r2, $r8;
        org.springframework.core.io.Resource[] $r4, $r7, $r13, $r14;

        r1 := @this: org.springframework.core.io.support.PathMatchingResourcePatternResolver;

        r0 := @parameter0: java.lang.String;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "Location pattern must not be null");

        $z0 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("classpath*:");

        if $z0 == 0 goto label2;

        $r8 = virtualinvoke r1.<org.springframework.core.io.support.PathMatchingResourcePatternResolver: org.springframework.util.PathMatcher getPathMatcher()>();

        $r9 = "classpath*:";

        $i2 = virtualinvoke $r9.<java.lang.String: int length()>();

        $r10 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>($i2);

        $z2 = interfaceinvoke $r8.<org.springframework.util.PathMatcher: boolean isPattern(java.lang.String)>($r10);

        if $z2 == 0 goto label1;

        $r14 = virtualinvoke r1.<org.springframework.core.io.support.PathMatchingResourcePatternResolver: org.springframework.core.io.Resource[] findPathMatchingResources(java.lang.String)>(r0);

        return $r14;

     label1:
        $r11 = "classpath*:";

        $i3 = virtualinvoke $r11.<java.lang.String: int length()>();

        $r12 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>($i3);

        $r13 = virtualinvoke r1.<org.springframework.core.io.support.PathMatchingResourcePatternResolver: org.springframework.core.io.Resource[] findAllClassPathResources(java.lang.String)>($r12);

        return $r13;

     label2:
        $i0 = virtualinvoke r0.<java.lang.String: int indexOf(java.lang.String)>(":");

        i1 = $i0 + 1;

        $r2 = virtualinvoke r1.<org.springframework.core.io.support.PathMatchingResourcePatternResolver: org.springframework.util.PathMatcher getPathMatcher()>();

        $r3 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>(i1);

        $z1 = interfaceinvoke $r2.<org.springframework.util.PathMatcher: boolean isPattern(java.lang.String)>($r3);

        if $z1 == 0 goto label3;

        $r7 = virtualinvoke r1.<org.springframework.core.io.support.PathMatchingResourcePatternResolver: org.springframework.core.io.Resource[] findPathMatchingResources(java.lang.String)>(r0);

        return $r7;

     label3:
        $r4 = newarray (org.springframework.core.io.Resource)[1];

        $r5 = virtualinvoke r1.<org.springframework.core.io.support.PathMatchingResourcePatternResolver: org.springframework.core.io.ResourceLoader getResourceLoader()>();

        $r6 = interfaceinvoke $r5.<org.springframework.core.io.ResourceLoader: org.springframework.core.io.Resource getResource(java.lang.String)>(r0);

        $r4[0] = $r6;

        return $r4;
    }

    protected org.springframework.core.io.Resource[] findAllClassPathResources(java.lang.String) throws java.io.IOException
    {
        java.lang.Object[] $r9;
        java.util.Enumeration $r3;
        java.net.URL r6;
        org.springframework.core.io.support.PathMatchingResourcePatternResolver r1;
        org.springframework.core.io.Resource[] $r8, $r10;
        int $i0;
        java.lang.Object $r5;
        java.lang.String r0, r11;
        java.lang.ClassLoader $r2;
        java.util.LinkedHashSet $r4;
        boolean $z0, $z1;
        org.springframework.core.io.Resource $r7;

        r1 := @this: org.springframework.core.io.support.PathMatchingResourcePatternResolver;

        r0 := @parameter0: java.lang.String;

        r11 = r0;

        $z0 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("/");

        if $z0 == 0 goto label1;

        r11 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>(1);

     label1:
        $r2 = virtualinvoke r1.<org.springframework.core.io.support.PathMatchingResourcePatternResolver: java.lang.ClassLoader getClassLoader()>();

        $r3 = virtualinvoke $r2.<java.lang.ClassLoader: java.util.Enumeration getResources(java.lang.String)>(r11);

        $r4 = new java.util.LinkedHashSet;

        specialinvoke $r4.<java.util.LinkedHashSet: void <init>(int)>(16);

        goto label3;

     label2:
        $r5 = interfaceinvoke $r3.<java.util.Enumeration: java.lang.Object nextElement()>();

        r6 = (java.net.URL) $r5;

        $r7 = virtualinvoke r1.<org.springframework.core.io.support.PathMatchingResourcePatternResolver: org.springframework.core.io.Resource convertClassLoaderURL(java.net.URL)>(r6);

        interfaceinvoke $r4.<java.util.Set: boolean add(java.lang.Object)>($r7);

     label3:
        $z1 = interfaceinvoke $r3.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z1 != 0 goto label2;

        $i0 = interfaceinvoke $r4.<java.util.Set: int size()>();

        $r8 = newarray (org.springframework.core.io.Resource)[$i0];

        $r9 = interfaceinvoke $r4.<java.util.Set: java.lang.Object[] toArray(java.lang.Object[])>($r8);

        $r10 = (org.springframework.core.io.Resource[]) $r9;

        return $r10;
    }

    protected org.springframework.core.io.Resource convertClassLoaderURL(java.net.URL)
    {
        org.springframework.core.io.support.PathMatchingResourcePatternResolver r2;
        org.springframework.core.io.UrlResource $r0;
        java.net.URL r1;

        r2 := @this: org.springframework.core.io.support.PathMatchingResourcePatternResolver;

        r1 := @parameter0: java.net.URL;

        $r0 = new org.springframework.core.io.UrlResource;

        specialinvoke $r0.<org.springframework.core.io.UrlResource: void <init>(java.net.URL)>(r1);

        return $r0;
    }

    protected org.springframework.core.io.Resource[] findPathMatchingResources(java.lang.String) throws java.io.IOException
    {
        java.lang.Object[] $r15;
        java.net.URL $r7;
        org.springframework.core.io.support.PathMatchingResourcePatternResolver r0;
        int $i0, i1, $i2, i3;
        java.lang.String r1, $r2, $r3, $r8, $r22;
        java.util.LinkedHashSet $r5;
        org.springframework.core.io.Resource $r6, r23;
        boolean $z0, $z1, $z2;
        org.springframework.util.PathMatcher $r10;
        java.util.Set $r9, $r11, $r12;
        org.springframework.core.io.Resource[] $r4, $r14, $r16;
        org.apache.commons.logging.Log $r13, $r18;
        java.lang.StringBuilder $r17, $r19, $r20, $r21;

        r0 := @this: org.springframework.core.io.support.PathMatchingResourcePatternResolver;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.springframework.core.io.support.PathMatchingResourcePatternResolver: java.lang.String determineRootDir(java.lang.String)>(r1);

        $i0 = virtualinvoke $r2.<java.lang.String: int length()>();

        $r3 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int)>($i0);

        $r4 = virtualinvoke r0.<org.springframework.core.io.support.PathMatchingResourcePatternResolver: org.springframework.core.io.Resource[] getResources(java.lang.String)>($r2);

        $r5 = new java.util.LinkedHashSet;

        specialinvoke $r5.<java.util.LinkedHashSet: void <init>(int)>(16);

        i1 = lengthof $r4;

        i3 = 0;

        goto label5;

     label1:
        r23 = $r4[i3];

        $r6 = virtualinvoke r0.<org.springframework.core.io.support.PathMatchingResourcePatternResolver: org.springframework.core.io.Resource resolveRootDirResource(org.springframework.core.io.Resource)>(r23);

        $z0 = virtualinvoke r0.<org.springframework.core.io.support.PathMatchingResourcePatternResolver: boolean isJarResource(org.springframework.core.io.Resource)>($r6);

        if $z0 == 0 goto label2;

        $r12 = virtualinvoke r0.<org.springframework.core.io.support.PathMatchingResourcePatternResolver: java.util.Set doFindPathMatchingJarResources(org.springframework.core.io.Resource,java.lang.String)>($r6, $r3);

        interfaceinvoke $r5.<java.util.Set: boolean addAll(java.util.Collection)>($r12);

        goto label4;

     label2:
        $r7 = interfaceinvoke $r6.<org.springframework.core.io.Resource: java.net.URL getURL()>();

        $r8 = virtualinvoke $r7.<java.net.URL: java.lang.String getProtocol()>();

        $z1 = virtualinvoke $r8.<java.lang.String: boolean startsWith(java.lang.String)>("vfs");

        if $z1 == 0 goto label3;

        $r10 = virtualinvoke r0.<org.springframework.core.io.support.PathMatchingResourcePatternResolver: org.springframework.util.PathMatcher getPathMatcher()>();

        $r11 = staticinvoke <org.springframework.core.io.support.PathMatchingResourcePatternResolver$VfsResourceMatchingDelegate: java.util.Set findMatchingResources(org.springframework.core.io.Resource,java.lang.String,org.springframework.util.PathMatcher)>($r6, $r3, $r10);

        interfaceinvoke $r5.<java.util.Set: boolean addAll(java.util.Collection)>($r11);

        goto label4;

     label3:
        $r9 = virtualinvoke r0.<org.springframework.core.io.support.PathMatchingResourcePatternResolver: java.util.Set doFindPathMatchingFileResources(org.springframework.core.io.Resource,java.lang.String)>($r6, $r3);

        interfaceinvoke $r5.<java.util.Set: boolean addAll(java.util.Collection)>($r9);

     label4:
        i3 = i3 + 1;

     label5:
        if i3 < i1 goto label1;

        $r13 = <org.springframework.core.io.support.PathMatchingResourcePatternResolver: org.apache.commons.logging.Log logger>;

        $z2 = interfaceinvoke $r13.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z2 == 0 goto label6;

        $r18 = <org.springframework.core.io.support.PathMatchingResourcePatternResolver: org.apache.commons.logging.Log logger>;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>(java.lang.String)>("Resolved location pattern [");

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] to resources ");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r18.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r22);

     label6:
        $i2 = interfaceinvoke $r5.<java.util.Set: int size()>();

        $r14 = newarray (org.springframework.core.io.Resource)[$i2];

        $r15 = interfaceinvoke $r5.<java.util.Set: java.lang.Object[] toArray(java.lang.Object[])>($r14);

        $r16 = (org.springframework.core.io.Resource[]) $r15;

        return $r16;
    }

    protected java.lang.String determineRootDir(java.lang.String)
    {
        org.springframework.util.PathMatcher $r3;
        org.springframework.core.io.support.PathMatchingResourcePatternResolver r2;
        int $i0, i1, $i2, $i3, i4;
        java.lang.String r0, $r1, $r4;
        boolean $z0;

        r2 := @this: org.springframework.core.io.support.PathMatchingResourcePatternResolver;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int indexOf(java.lang.String)>(":");

        i1 = $i0 + 1;

        i4 = virtualinvoke r0.<java.lang.String: int length()>();

        goto label2;

     label1:
        $i2 = i4 - 2;

        $i3 = virtualinvoke r0.<java.lang.String: int lastIndexOf(int,int)>(47, $i2);

        i4 = $i3 + 1;

     label2:
        if i4 <= i1 goto label3;

        $r3 = virtualinvoke r2.<org.springframework.core.io.support.PathMatchingResourcePatternResolver: org.springframework.util.PathMatcher getPathMatcher()>();

        $r4 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(i1, i4);

        $z0 = interfaceinvoke $r3.<org.springframework.util.PathMatcher: boolean isPattern(java.lang.String)>($r4);

        if $z0 != 0 goto label1;

     label3:
        if i4 != 0 goto label4;

        i4 = i1;

     label4:
        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, i4);

        return $r1;
    }

    protected org.springframework.core.io.Resource resolveRootDirResource(org.springframework.core.io.Resource) throws java.io.IOException
    {
        java.lang.Object[] $r5;
        org.springframework.core.io.UrlResource $r4;
        java.net.URL $r2, $r8;
        org.springframework.core.io.support.PathMatchingResourcePatternResolver r9;
        java.lang.Object $r7;
        java.lang.String $r3;
        java.lang.reflect.Method $r0, $r6;
        org.springframework.core.io.Resource r1;
        boolean $z0;

        r9 := @this: org.springframework.core.io.support.PathMatchingResourcePatternResolver;

        r1 := @parameter0: org.springframework.core.io.Resource;

        $r0 = <org.springframework.core.io.support.PathMatchingResourcePatternResolver: java.lang.reflect.Method equinoxResolveMethod>;

        if $r0 == null goto label1;

        $r2 = interfaceinvoke r1.<org.springframework.core.io.Resource: java.net.URL getURL()>();

        $r3 = virtualinvoke $r2.<java.net.URL: java.lang.String getProtocol()>();

        $z0 = virtualinvoke $r3.<java.lang.String: boolean startsWith(java.lang.String)>("bundle");

        if $z0 == 0 goto label1;

        $r4 = new org.springframework.core.io.UrlResource;

        $r6 = <org.springframework.core.io.support.PathMatchingResourcePatternResolver: java.lang.reflect.Method equinoxResolveMethod>;

        $r5 = newarray (java.lang.Object)[1];

        $r5[0] = $r2;

        $r7 = staticinvoke <org.springframework.util.ReflectionUtils: java.lang.Object invokeMethod(java.lang.reflect.Method,java.lang.Object,java.lang.Object[])>($r6, null, $r5);

        $r8 = (java.net.URL) $r7;

        specialinvoke $r4.<org.springframework.core.io.UrlResource: void <init>(java.net.URL)>($r8);

        return $r4;

     label1:
        return r1;
    }

    protected boolean isJarResource(org.springframework.core.io.Resource) throws java.io.IOException
    {
        org.springframework.core.io.support.PathMatchingResourcePatternResolver r2;
        java.net.URL $r1;
        org.springframework.core.io.Resource r0;
        boolean $z0;

        r2 := @this: org.springframework.core.io.support.PathMatchingResourcePatternResolver;

        r0 := @parameter0: org.springframework.core.io.Resource;

        $r1 = interfaceinvoke r0.<org.springframework.core.io.Resource: java.net.URL getURL()>();

        $z0 = staticinvoke <org.springframework.util.ResourceUtils: boolean isJarURL(java.net.URL)>($r1);

        return $z0;
    }

    protected java.util.Set doFindPathMatchingJarResources(org.springframework.core.io.Resource, java.lang.String) throws java.io.IOException
    {
        java.util.Enumeration $r35;
        java.net.URL $r1, $r3, $r25;
        java.util.jar.JarFile r29, $r36;
        org.springframework.core.io.support.PathMatchingResourcePatternResolver r11;
        java.net.JarURLConnection r28;
        org.springframework.core.io.Resource r0, $r14;
        boolean $z0, $z1, $z2, $z3, $z4, z5, $z6, $z7, z8, z9;
        java.lang.StringBuilder $r17, $r20, $r21, $r37, $r38;
        java.lang.Throwable $r27;
        java.util.jar.JarEntry r8, $r26;
        java.net.URLConnection $r2;
        int $i0, $i1, $i2, $i3, $i5;
        java.lang.String $r4, $r6, $r9, $r10, r13, $r16, $r22, $r23, $r24, r30, $r31, r32;
        java.util.LinkedHashSet $r39;
        org.springframework.util.PathMatcher $r12;
        java.lang.Object $r7;
        org.apache.commons.logging.Log $r19, $r33;

        r11 := @this: org.springframework.core.io.support.PathMatchingResourcePatternResolver;

        r0 := @parameter0: org.springframework.core.io.Resource;

        r13 := @parameter1: java.lang.String;

        $r1 = interfaceinvoke r0.<org.springframework.core.io.Resource: java.net.URL getURL()>();

        $r2 = virtualinvoke $r1.<java.net.URL: java.net.URLConnection openConnection()>();

        z5 = 0;

        z9 = 0;

        z8 = 0;

        $z0 = $r2 instanceof java.net.JarURLConnection;

        if $z0 == 0 goto label03;

        r28 = (java.net.JarURLConnection) $r2;

        virtualinvoke r28.<java.net.JarURLConnection: void setUseCaches(boolean)>(0);

        r29 = virtualinvoke r28.<java.net.JarURLConnection: java.util.jar.JarFile getJarFile()>();

        $r25 = virtualinvoke r28.<java.net.JarURLConnection: java.net.URL getJarFileURL()>();

        r30 = virtualinvoke $r25.<java.net.URL: java.lang.String toExternalForm()>();

        $r26 = virtualinvoke r28.<java.net.JarURLConnection: java.util.jar.JarEntry getJarEntry()>();

        if $r26 == null goto label01;

        $r31 = virtualinvoke $r26.<java.util.jar.JarEntry: java.lang.String getName()>();

        goto label02;

     label01:
        $r31 = "";

     label02:
        r32 = $r31;

        goto label06;

     label03:
        $r3 = interfaceinvoke r0.<org.springframework.core.io.Resource: java.net.URL getURL()>();

        $r4 = virtualinvoke $r3.<java.net.URL: java.lang.String getFile()>();

        $i0 = virtualinvoke $r4.<java.lang.String: int indexOf(java.lang.String)>("!/");

        $i5 = (int) -1;

        if $i0 == $i5 goto label04;

        $r23 = virtualinvoke $r4.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        r30 = $r23;

        $r24 = "!/";

        $i2 = virtualinvoke $r24.<java.lang.String: int length()>();

        $i3 = $i0 + $i2;

        r32 = virtualinvoke $r4.<java.lang.String: java.lang.String substring(int)>($i3);

        r29 = virtualinvoke r11.<org.springframework.core.io.support.PathMatchingResourcePatternResolver: java.util.jar.JarFile getJarFile(java.lang.String)>($r23);

        goto label05;

     label04:
        $r36 = new java.util.jar.JarFile;

        specialinvoke $r36.<java.util.jar.JarFile: void <init>(java.lang.String)>($r4);

        r29 = $r36;

        r30 = $r4;

        r32 = "";

     label05:
        z5 = 1;

        z9 = 1;

        z8 = 1;

     label06:
        $r33 = <org.springframework.core.io.support.PathMatchingResourcePatternResolver: org.apache.commons.logging.Log logger>;

        $z6 = interfaceinvoke $r33.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z6 == 0 goto label07;

        $r19 = <org.springframework.core.io.support.PathMatchingResourcePatternResolver: org.apache.commons.logging.Log logger>;

        $r37 = new java.lang.StringBuilder;

        specialinvoke $r37.<java.lang.StringBuilder: void <init>(java.lang.String)>("Looking for matching resources in jar file [");

        $r20 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r30);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r19.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r22);

     label07:
        $r6 = "";

        $z1 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>(r32);

        if $z1 != 0 goto label08;

        $z4 = virtualinvoke r32.<java.lang.String: boolean endsWith(java.lang.String)>("/");

        if $z4 != 0 goto label08;

        $r38 = new java.lang.StringBuilder;

        $r16 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r32);

        specialinvoke $r38.<java.lang.StringBuilder: void <init>(java.lang.String)>($r16);

        $r17 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        r32 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

     label08:
        $r39 = new java.util.LinkedHashSet;

        specialinvoke $r39.<java.util.LinkedHashSet: void <init>(int)>(8);

        $r35 = virtualinvoke r29.<java.util.jar.JarFile: java.util.Enumeration entries()>();

        goto label10;

     label09:
        $r7 = interfaceinvoke $r35.<java.util.Enumeration: java.lang.Object nextElement()>();

        r8 = (java.util.jar.JarEntry) $r7;

        $r9 = virtualinvoke r8.<java.util.jar.JarEntry: java.lang.String getName()>();

        $z2 = virtualinvoke $r9.<java.lang.String: boolean startsWith(java.lang.String)>(r32);

        if $z2 == 0 goto label10;

        $i1 = virtualinvoke r32.<java.lang.String: int length()>();

        $r10 = virtualinvoke $r9.<java.lang.String: java.lang.String substring(int)>($i1);

        $r12 = virtualinvoke r11.<org.springframework.core.io.support.PathMatchingResourcePatternResolver: org.springframework.util.PathMatcher getPathMatcher()>();

        $z3 = interfaceinvoke $r12.<org.springframework.util.PathMatcher: boolean match(java.lang.String,java.lang.String)>(r13, $r10);

        if $z3 == 0 goto label10;

        $r14 = interfaceinvoke r0.<org.springframework.core.io.Resource: org.springframework.core.io.Resource createRelative(java.lang.String)>($r10);

        interfaceinvoke $r39.<java.util.Set: boolean add(java.lang.Object)>($r14);

     label10:
        $z7 = interfaceinvoke $r35.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z7 != 0 goto label09;

     label11:
        if z9 == 0 goto label12;

        virtualinvoke r29.<java.util.jar.JarFile: void close()>();

     label12:
        return $r39;

     label13:
        $r27 := @caughtexception;

        if z8 == 0 goto label14;

        virtualinvoke r29.<java.util.jar.JarFile: void close()>();

     label14:
        throw $r27;

        catch java.lang.Throwable from label06 to label11 with label13;
    }

    protected java.util.jar.JarFile getJarFile(java.lang.String) throws java.io.IOException
    {
        java.net.URISyntaxException $r5;
        java.util.jar.JarFile $r1, $r2, $r6;
        org.springframework.core.io.support.PathMatchingResourcePatternResolver r9;
        int $i0;
        java.lang.String r0, $r4, $r7, $r8;
        java.net.URI $r3;
        boolean $z0;

        r9 := @this: org.springframework.core.io.support.PathMatchingResourcePatternResolver;

        r0 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("file:");

        if $z0 == 0 goto label4;

     label1:
        $r2 = new java.util.jar.JarFile;

        $r3 = staticinvoke <org.springframework.util.ResourceUtils: java.net.URI toURI(java.lang.String)>(r0);

        $r4 = virtualinvoke $r3.<java.net.URI: java.lang.String getSchemeSpecificPart()>();

        specialinvoke $r2.<java.util.jar.JarFile: void <init>(java.lang.String)>($r4);

     label2:
        return $r2;

     label3:
        $r5 := @caughtexception;

        $r6 = new java.util.jar.JarFile;

        $r7 = "file:";

        $i0 = virtualinvoke $r7.<java.lang.String: int length()>();

        $r8 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>($i0);

        specialinvoke $r6.<java.util.jar.JarFile: void <init>(java.lang.String)>($r8);

        return $r6;

     label4:
        $r1 = new java.util.jar.JarFile;

        specialinvoke $r1.<java.util.jar.JarFile: void <init>(java.lang.String)>(r0);

        return $r1;

        catch java.net.URISyntaxException from label1 to label2 with label3;
    }

    protected java.util.Set doFindPathMatchingFileResources(org.springframework.core.io.Resource, java.lang.String) throws java.io.IOException
    {
        java.util.Set $r5, $r8;
        java.io.IOException $r6;
        java.io.File $r1, $r2;
        org.springframework.core.io.support.PathMatchingResourcePatternResolver r3;
        org.apache.commons.logging.Log $r7, $r10;
        java.lang.StringBuilder $r9, $r11, $r12;
        java.lang.String r4, $r13;
        org.springframework.core.io.Resource r0;
        boolean $z0;

        r3 := @this: org.springframework.core.io.support.PathMatchingResourcePatternResolver;

        r0 := @parameter0: org.springframework.core.io.Resource;

        r4 := @parameter1: java.lang.String;

     label1:
        $r1 = interfaceinvoke r0.<org.springframework.core.io.Resource: java.io.File getFile()>();

        $r2 = virtualinvoke $r1.<java.io.File: java.io.File getAbsoluteFile()>();

     label2:
        goto label5;

     label3:
        $r6 := @caughtexception;

        $r7 = <org.springframework.core.io.support.PathMatchingResourcePatternResolver: org.apache.commons.logging.Log logger>;

        $z0 = interfaceinvoke $r7.<org.apache.commons.logging.Log: boolean isWarnEnabled()>();

        if $z0 == 0 goto label4;

        $r10 = <org.springframework.core.io.support.PathMatchingResourcePatternResolver: org.apache.commons.logging.Log logger>;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>(java.lang.String)>("Cannot search for matching files underneath ");

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" because it does not correspond to a directory in the file system");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r10.<org.apache.commons.logging.Log: void warn(java.lang.Object,java.lang.Throwable)>($r13, $r6);

     label4:
        $r8 = staticinvoke <java.util.Collections: java.util.Set emptySet()>();

        return $r8;

     label5:
        $r5 = virtualinvoke r3.<org.springframework.core.io.support.PathMatchingResourcePatternResolver: java.util.Set doFindMatchingFileSystemResources(java.io.File,java.lang.String)>($r2, r4);

        return $r5;

        catch java.io.IOException from label1 to label2 with label3;
    }

    protected java.util.Set doFindMatchingFileSystemResources(java.io.File, java.lang.String) throws java.io.IOException
    {
        org.springframework.core.io.support.PathMatchingResourcePatternResolver r1;
        int $i0;
        java.lang.String r3, $r12, $r15;
        java.util.LinkedHashSet $r5;
        boolean $z0, $z1;
        java.util.Iterator $r6;
        java.util.Set $r4;
        org.springframework.core.io.FileSystemResource $r9;
        java.io.File r2, r8;
        org.apache.commons.logging.Log $r0, $r11;
        java.lang.Object $r7;
        java.lang.StringBuilder $r10, $r13, $r14;

        r1 := @this: org.springframework.core.io.support.PathMatchingResourcePatternResolver;

        r2 := @parameter0: java.io.File;

        r3 := @parameter1: java.lang.String;

        $r0 = <org.springframework.core.io.support.PathMatchingResourcePatternResolver: org.apache.commons.logging.Log logger>;

        $z0 = interfaceinvoke $r0.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z0 == 0 goto label1;

        $r11 = <org.springframework.core.io.support.PathMatchingResourcePatternResolver: org.apache.commons.logging.Log logger>;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>(java.lang.String)>("Looking for matching resources in directory tree [");

        $r12 = virtualinvoke r2.<java.io.File: java.lang.String getPath()>();

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r11.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r15);

     label1:
        $r4 = virtualinvoke r1.<org.springframework.core.io.support.PathMatchingResourcePatternResolver: java.util.Set retrieveMatchingFiles(java.io.File,java.lang.String)>(r2, r3);

        $r5 = new java.util.LinkedHashSet;

        $i0 = interfaceinvoke $r4.<java.util.Set: int size()>();

        specialinvoke $r5.<java.util.LinkedHashSet: void <init>(int)>($i0);

        $r6 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

        goto label3;

     label2:
        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r8 = (java.io.File) $r7;

        $r9 = new org.springframework.core.io.FileSystemResource;

        specialinvoke $r9.<org.springframework.core.io.FileSystemResource: void <init>(java.io.File)>(r8);

        interfaceinvoke $r5.<java.util.Set: boolean add(java.lang.Object)>($r9);

     label3:
        $z1 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label2;

        return $r5;
    }

    protected java.util.Set retrieveMatchingFiles(java.io.File, java.lang.String) throws java.io.IOException
    {
        org.springframework.core.io.support.PathMatchingResourcePatternResolver r12;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.util.Set $r17, $r25, $r33;
        java.lang.StringBuilder $r5, $r9, $r13, $r15, $r18, $r21, $r22, $r26, $r29, $r30, $r34, $r37, $r38;
        java.lang.String $r1, $r2, $r3, r4, $r6, $r7, $r8, $r10, $r14, $r20, $r23, $r28, $r31, $r36, $r39, r40;
        java.util.LinkedHashSet $r11;
        java.io.File r0;
        org.apache.commons.logging.Log $r16, $r19, $r24, $r27, $r32, $r35;

        r12 := @this: org.springframework.core.io.support.PathMatchingResourcePatternResolver;

        r0 := @parameter0: java.io.File;

        r4 := @parameter1: java.lang.String;

        $z0 = virtualinvoke r0.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label2;

        $r32 = <org.springframework.core.io.support.PathMatchingResourcePatternResolver: org.apache.commons.logging.Log logger>;

        $z6 = interfaceinvoke $r32.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z6 == 0 goto label1;

        $r35 = <org.springframework.core.io.support.PathMatchingResourcePatternResolver: org.apache.commons.logging.Log logger>;

        $r34 = new java.lang.StringBuilder;

        specialinvoke $r34.<java.lang.StringBuilder: void <init>(java.lang.String)>("Skipping [");

        $r36 = virtualinvoke r0.<java.io.File: java.lang.String getAbsolutePath()>();

        $r37 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r36);

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] because it does not exist");

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r35.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r39);

     label1:
        $r33 = staticinvoke <java.util.Collections: java.util.Set emptySet()>();

        return $r33;

     label2:
        $z1 = virtualinvoke r0.<java.io.File: boolean isDirectory()>();

        if $z1 != 0 goto label4;

        $r24 = <org.springframework.core.io.support.PathMatchingResourcePatternResolver: org.apache.commons.logging.Log logger>;

        $z5 = interfaceinvoke $r24.<org.apache.commons.logging.Log: boolean isWarnEnabled()>();

        if $z5 == 0 goto label3;

        $r27 = <org.springframework.core.io.support.PathMatchingResourcePatternResolver: org.apache.commons.logging.Log logger>;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>(java.lang.String)>("Skipping [");

        $r28 = virtualinvoke r0.<java.io.File: java.lang.String getAbsolutePath()>();

        $r29 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r28);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] because it does not denote a directory");

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r27.<org.apache.commons.logging.Log: void warn(java.lang.Object)>($r31);

     label3:
        $r25 = staticinvoke <java.util.Collections: java.util.Set emptySet()>();

        return $r25;

     label4:
        $z2 = virtualinvoke r0.<java.io.File: boolean canRead()>();

        if $z2 != 0 goto label6;

        $r16 = <org.springframework.core.io.support.PathMatchingResourcePatternResolver: org.apache.commons.logging.Log logger>;

        $z4 = interfaceinvoke $r16.<org.apache.commons.logging.Log: boolean isWarnEnabled()>();

        if $z4 == 0 goto label5;

        $r19 = <org.springframework.core.io.support.PathMatchingResourcePatternResolver: org.apache.commons.logging.Log logger>;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>(java.lang.String)>("Cannot search for matching files underneath directory [");

        $r20 = virtualinvoke r0.<java.io.File: java.lang.String getAbsolutePath()>();

        $r21 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] because the application is not allowed to read the directory");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r19.<org.apache.commons.logging.Log: void warn(java.lang.Object)>($r23);

     label5:
        $r17 = staticinvoke <java.util.Collections: java.util.Set emptySet()>();

        return $r17;

     label6:
        $r1 = virtualinvoke r0.<java.io.File: java.lang.String getAbsolutePath()>();

        $r2 = <java.io.File: java.lang.String separator>;

        $r3 = staticinvoke <org.springframework.util.StringUtils: java.lang.String replace(java.lang.String,java.lang.String,java.lang.String)>($r1, $r2, "/");

        r40 = $r3;

        $z3 = virtualinvoke r4.<java.lang.String: boolean startsWith(java.lang.String)>("/");

        if $z3 != 0 goto label7;

        $r13 = new java.lang.StringBuilder;

        $r14 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r3);

        specialinvoke $r13.<java.lang.StringBuilder: void <init>(java.lang.String)>($r14);

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        r40 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

     label7:
        $r5 = new java.lang.StringBuilder;

        $r6 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r40);

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>($r6);

        $r7 = <java.io.File: java.lang.String separator>;

        $r8 = staticinvoke <org.springframework.util.StringUtils: java.lang.String replace(java.lang.String,java.lang.String,java.lang.String)>(r4, $r7, "/");

        $r9 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        $r11 = new java.util.LinkedHashSet;

        specialinvoke $r11.<java.util.LinkedHashSet: void <init>(int)>(8);

        virtualinvoke r12.<org.springframework.core.io.support.PathMatchingResourcePatternResolver: void doRetrieveMatchingFiles(java.lang.String,java.io.File,java.util.Set)>($r10, r0, $r11);

        return $r11;
    }

    protected void doRetrieveMatchingFiles(java.lang.String, java.io.File, java.util.Set) throws java.io.IOException
    {
        org.springframework.core.io.support.PathMatchingResourcePatternResolver r7;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.util.Set r9;
        java.lang.StringBuilder $r11, $r13, $r16, $r19, $r20, $r23, $r26, $r27, $r29, $r32, $r33, $r34, $r35;
        int i0, i1;
        java.lang.String $r4, $r5, $r6, r8, $r12, $r14, $r18, $r21, $r25, $r28, $r31, $r36;
        org.springframework.util.PathMatcher $r10, $r37;
        java.io.File r1, r3;
        org.apache.commons.logging.Log $r0, $r15, $r17, $r22, $r24, $r30;
        java.io.File[] $r2;

        r7 := @this: org.springframework.core.io.support.PathMatchingResourcePatternResolver;

        r8 := @parameter0: java.lang.String;

        r1 := @parameter1: java.io.File;

        r9 := @parameter2: java.util.Set;

        $r0 = <org.springframework.core.io.support.PathMatchingResourcePatternResolver: org.apache.commons.logging.Log logger>;

        $z0 = interfaceinvoke $r0.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z0 == 0 goto label1;

        $r30 = <org.springframework.core.io.support.PathMatchingResourcePatternResolver: org.apache.commons.logging.Log logger>;

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>(java.lang.String)>("Searching directory [");

        $r31 = virtualinvoke r1.<java.io.File: java.lang.String getAbsolutePath()>();

        $r32 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r31);

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] for files matching pattern [");

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r8);

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r30.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r36);

     label1:
        $r2 = virtualinvoke r1.<java.io.File: java.io.File[] listFiles()>();

        if $r2 != null goto label3;

        $r22 = <org.springframework.core.io.support.PathMatchingResourcePatternResolver: org.apache.commons.logging.Log logger>;

        $z5 = interfaceinvoke $r22.<org.apache.commons.logging.Log: boolean isWarnEnabled()>();

        if $z5 == 0 goto label2;

        $r24 = <org.springframework.core.io.support.PathMatchingResourcePatternResolver: org.apache.commons.logging.Log logger>;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>(java.lang.String)>("Could not retrieve contents of directory [");

        $r25 = virtualinvoke r1.<java.io.File: java.lang.String getAbsolutePath()>();

        $r26 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r25);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r24.<org.apache.commons.logging.Log: void warn(java.lang.Object)>($r28);

     label2:
        return;

     label3:
        i0 = lengthof $r2;

        i1 = 0;

        goto label8;

     label4:
        r3 = $r2[i1];

        $r4 = virtualinvoke r3.<java.io.File: java.lang.String getAbsolutePath()>();

        $r5 = <java.io.File: java.lang.String separator>;

        $r6 = staticinvoke <org.springframework.util.StringUtils: java.lang.String replace(java.lang.String,java.lang.String,java.lang.String)>($r4, $r5, "/");

        $z1 = virtualinvoke r3.<java.io.File: boolean isDirectory()>();

        if $z1 == 0 goto label6;

        $r10 = virtualinvoke r7.<org.springframework.core.io.support.PathMatchingResourcePatternResolver: org.springframework.util.PathMatcher getPathMatcher()>();

        $r11 = new java.lang.StringBuilder;

        $r12 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r6);

        specialinvoke $r11.<java.lang.StringBuilder: void <init>(java.lang.String)>($r12);

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        $z2 = interfaceinvoke $r10.<org.springframework.util.PathMatcher: boolean matchStart(java.lang.String,java.lang.String)>(r8, $r14);

        if $z2 == 0 goto label6;

        $z3 = virtualinvoke r3.<java.io.File: boolean canRead()>();

        if $z3 != 0 goto label5;

        $r15 = <org.springframework.core.io.support.PathMatchingResourcePatternResolver: org.apache.commons.logging.Log logger>;

        $z4 = interfaceinvoke $r15.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z4 == 0 goto label6;

        $r17 = <org.springframework.core.io.support.PathMatchingResourcePatternResolver: org.apache.commons.logging.Log logger>;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>(java.lang.String)>("Skipping subdirectory [");

        $r18 = virtualinvoke r1.<java.io.File: java.lang.String getAbsolutePath()>();

        $r19 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] because the application is not allowed to read the directory");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r17.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r21);

        goto label6;

     label5:
        virtualinvoke r7.<org.springframework.core.io.support.PathMatchingResourcePatternResolver: void doRetrieveMatchingFiles(java.lang.String,java.io.File,java.util.Set)>(r8, r3, r9);

     label6:
        $r37 = virtualinvoke r7.<org.springframework.core.io.support.PathMatchingResourcePatternResolver: org.springframework.util.PathMatcher getPathMatcher()>();

        $z6 = interfaceinvoke $r37.<org.springframework.util.PathMatcher: boolean match(java.lang.String,java.lang.String)>(r8, $r6);

        if $z6 == 0 goto label7;

        interfaceinvoke r9.<java.util.Set: boolean add(java.lang.Object)>(r3);

     label7:
        i1 = i1 + 1;

     label8:
        if i1 < i0 goto label4;

        return;
    }
}
