public class com.hp.hpl.jena.sparql.algebra.op.OpFilter extends com.hp.hpl.jena.sparql.algebra.op.Op1
{
    com.hp.hpl.jena.sparql.expr.ExprList expressions;

    public static com.hp.hpl.jena.sparql.algebra.Op filter(com.hp.hpl.jena.sparql.expr.Expr, com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpFilter $r1;
        com.hp.hpl.jena.sparql.expr.Expr r3;
        com.hp.hpl.jena.sparql.expr.ExprList $r2;
        com.hp.hpl.jena.sparql.algebra.Op r0;

        r3 := @parameter0: com.hp.hpl.jena.sparql.expr.Expr;

        r0 := @parameter1: com.hp.hpl.jena.sparql.algebra.Op;

        $r1 = staticinvoke <com.hp.hpl.jena.sparql.algebra.op.OpFilter: com.hp.hpl.jena.sparql.algebra.op.OpFilter filter(com.hp.hpl.jena.sparql.algebra.Op)>(r0);

        $r2 = virtualinvoke $r1.<com.hp.hpl.jena.sparql.algebra.op.OpFilter: com.hp.hpl.jena.sparql.expr.ExprList getExprs()>();

        virtualinvoke $r2.<com.hp.hpl.jena.sparql.expr.ExprList: void add(com.hp.hpl.jena.sparql.expr.Expr)>(r3);

        return $r1;
    }

    public static com.hp.hpl.jena.sparql.algebra.op.OpFilter filter(com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpFilter $r1, $r2;
        com.hp.hpl.jena.sparql.algebra.Op r0;
        boolean $z0;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.Op;

        $z0 = r0 instanceof com.hp.hpl.jena.sparql.algebra.op.OpFilter;

        if $z0 == 0 goto label1;

        $r2 = (com.hp.hpl.jena.sparql.algebra.op.OpFilter) r0;

        return $r2;

     label1:
        $r1 = new com.hp.hpl.jena.sparql.algebra.op.OpFilter;

        specialinvoke $r1.<com.hp.hpl.jena.sparql.algebra.op.OpFilter: void <init>(com.hp.hpl.jena.sparql.algebra.Op)>(r0);

        return $r1;
    }

    public static com.hp.hpl.jena.sparql.algebra.Op filter(com.hp.hpl.jena.sparql.expr.ExprList, com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpFilter $r2;
        com.hp.hpl.jena.sparql.expr.ExprList r0, $r3;
        com.hp.hpl.jena.sparql.algebra.Op r1;
        boolean $z0;

        r0 := @parameter0: com.hp.hpl.jena.sparql.expr.ExprList;

        r1 := @parameter1: com.hp.hpl.jena.sparql.algebra.Op;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.ExprList: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return r1;

     label1:
        $r2 = staticinvoke <com.hp.hpl.jena.sparql.algebra.op.OpFilter: com.hp.hpl.jena.sparql.algebra.op.OpFilter filter(com.hp.hpl.jena.sparql.algebra.Op)>(r1);

        $r3 = virtualinvoke $r2.<com.hp.hpl.jena.sparql.algebra.op.OpFilter: com.hp.hpl.jena.sparql.expr.ExprList getExprs()>();

        virtualinvoke $r3.<com.hp.hpl.jena.sparql.expr.ExprList: void addAll(com.hp.hpl.jena.sparql.expr.ExprList)>(r0);

        return $r2;
    }

    public static com.hp.hpl.jena.sparql.algebra.op.OpFilter filterDirect(com.hp.hpl.jena.sparql.expr.ExprList, com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpFilter $r0;
        com.hp.hpl.jena.sparql.expr.ExprList r1;
        com.hp.hpl.jena.sparql.algebra.Op r2;

        r1 := @parameter0: com.hp.hpl.jena.sparql.expr.ExprList;

        r2 := @parameter1: com.hp.hpl.jena.sparql.algebra.Op;

        $r0 = new com.hp.hpl.jena.sparql.algebra.op.OpFilter;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.algebra.op.OpFilter: void <init>(com.hp.hpl.jena.sparql.expr.ExprList,com.hp.hpl.jena.sparql.algebra.Op)>(r1, r2);

        return $r0;
    }

    private void <init>(com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpFilter r0;
        com.hp.hpl.jena.sparql.expr.ExprList $r2;
        com.hp.hpl.jena.sparql.algebra.Op r1;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.op.OpFilter;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.Op;

        specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.Op1: void <init>(com.hp.hpl.jena.sparql.algebra.Op)>(r1);

        $r2 = new com.hp.hpl.jena.sparql.expr.ExprList;

        specialinvoke $r2.<com.hp.hpl.jena.sparql.expr.ExprList: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.algebra.op.OpFilter: com.hp.hpl.jena.sparql.expr.ExprList expressions> = $r2;

        return;
    }

    private void <init>(com.hp.hpl.jena.sparql.expr.ExprList, com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpFilter r0;
        com.hp.hpl.jena.sparql.expr.ExprList r2;
        com.hp.hpl.jena.sparql.algebra.Op r1;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.op.OpFilter;

        r2 := @parameter0: com.hp.hpl.jena.sparql.expr.ExprList;

        r1 := @parameter1: com.hp.hpl.jena.sparql.algebra.Op;

        specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.Op1: void <init>(com.hp.hpl.jena.sparql.algebra.Op)>(r1);

        r0.<com.hp.hpl.jena.sparql.algebra.op.OpFilter: com.hp.hpl.jena.sparql.expr.ExprList expressions> = r2;

        return;
    }

    public static com.hp.hpl.jena.sparql.algebra.op.OpFilter tidy(com.hp.hpl.jena.sparql.algebra.op.OpFilter)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpFilter r1, $r2, r3;
        com.hp.hpl.jena.sparql.expr.ExprList $r0, $r4;
        com.hp.hpl.jena.sparql.algebra.Op r5;
        boolean $z0;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpFilter;

        $r0 = new com.hp.hpl.jena.sparql.expr.ExprList;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.expr.ExprList: void <init>()>();

        r5 = r1;

     label1:
        $z0 = r5 instanceof com.hp.hpl.jena.sparql.algebra.op.OpFilter;

        if $z0 == 0 goto label2;

        r3 = (com.hp.hpl.jena.sparql.algebra.op.OpFilter) r5;

        $r4 = virtualinvoke r3.<com.hp.hpl.jena.sparql.algebra.op.OpFilter: com.hp.hpl.jena.sparql.expr.ExprList getExprs()>();

        virtualinvoke $r0.<com.hp.hpl.jena.sparql.expr.ExprList: void addAll(com.hp.hpl.jena.sparql.expr.ExprList)>($r4);

        r5 = virtualinvoke r3.<com.hp.hpl.jena.sparql.algebra.op.OpFilter: com.hp.hpl.jena.sparql.algebra.Op getSubOp()>();

        goto label1;

     label2:
        $r2 = new com.hp.hpl.jena.sparql.algebra.op.OpFilter;

        specialinvoke $r2.<com.hp.hpl.jena.sparql.algebra.op.OpFilter: void <init>(com.hp.hpl.jena.sparql.expr.ExprList,com.hp.hpl.jena.sparql.algebra.Op)>($r0, r5);

        return $r2;
    }

    public com.hp.hpl.jena.sparql.expr.ExprList getExprs()
    {
        com.hp.hpl.jena.sparql.algebra.op.OpFilter r0;
        com.hp.hpl.jena.sparql.expr.ExprList $r1;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.op.OpFilter;

        $r1 = r0.<com.hp.hpl.jena.sparql.algebra.op.OpFilter: com.hp.hpl.jena.sparql.expr.ExprList expressions>;

        return $r1;
    }

    public java.lang.String getName()
    {
        com.hp.hpl.jena.sparql.algebra.op.OpFilter r0;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.op.OpFilter;

        return "filter";
    }

    public com.hp.hpl.jena.sparql.algebra.Op apply(com.hp.hpl.jena.sparql.algebra.Transform, com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpFilter r1;
        com.hp.hpl.jena.sparql.algebra.Transform r0;
        com.hp.hpl.jena.sparql.algebra.Op r2, $r3;

        r1 := @this: com.hp.hpl.jena.sparql.algebra.op.OpFilter;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.Transform;

        r2 := @parameter1: com.hp.hpl.jena.sparql.algebra.Op;

        $r3 = interfaceinvoke r0.<com.hp.hpl.jena.sparql.algebra.Transform: com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpFilter,com.hp.hpl.jena.sparql.algebra.Op)>(r1, r2);

        return $r3;
    }

    public void visit(com.hp.hpl.jena.sparql.algebra.OpVisitor)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpFilter r1;
        com.hp.hpl.jena.sparql.algebra.OpVisitor r0;

        r1 := @this: com.hp.hpl.jena.sparql.algebra.op.OpFilter;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.OpVisitor;

        interfaceinvoke r0.<com.hp.hpl.jena.sparql.algebra.OpVisitor: void visit(com.hp.hpl.jena.sparql.algebra.op.OpFilter)>(r1);

        return;
    }

    public com.hp.hpl.jena.sparql.algebra.op.Op1 copy(com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpFilter $r0, r1;
        com.hp.hpl.jena.sparql.expr.ExprList $r3;
        com.hp.hpl.jena.sparql.algebra.Op r2;

        r1 := @this: com.hp.hpl.jena.sparql.algebra.op.OpFilter;

        r2 := @parameter0: com.hp.hpl.jena.sparql.algebra.Op;

        $r0 = new com.hp.hpl.jena.sparql.algebra.op.OpFilter;

        $r3 = r1.<com.hp.hpl.jena.sparql.algebra.op.OpFilter: com.hp.hpl.jena.sparql.expr.ExprList expressions>;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.algebra.op.OpFilter: void <init>(com.hp.hpl.jena.sparql.expr.ExprList,com.hp.hpl.jena.sparql.algebra.Op)>($r3, r2);

        return $r0;
    }

    public int hashCode()
    {
        int $i0;
        com.hp.hpl.jena.sparql.algebra.op.OpFilter r0;
        com.hp.hpl.jena.sparql.expr.ExprList $r1;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.op.OpFilter;

        $r1 = r0.<com.hp.hpl.jena.sparql.algebra.op.OpFilter: com.hp.hpl.jena.sparql.expr.ExprList expressions>;

        $i0 = virtualinvoke $r1.<com.hp.hpl.jena.sparql.expr.ExprList: int hashCode()>();

        return $i0;
    }

    public boolean equalTo(com.hp.hpl.jena.sparql.algebra.Op, com.hp.hpl.jena.sparql.util.NodeIsomorphismMap)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpFilter r1, r2;
        com.hp.hpl.jena.sparql.expr.ExprList $r3, $r4;
        com.hp.hpl.jena.sparql.util.NodeIsomorphismMap r7;
        com.hp.hpl.jena.sparql.algebra.Op r0, $r5, $r6;
        boolean $z0, $z1, $z2;

        r2 := @this: com.hp.hpl.jena.sparql.algebra.op.OpFilter;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.Op;

        r7 := @parameter1: com.hp.hpl.jena.sparql.util.NodeIsomorphismMap;

        $z0 = r0 instanceof com.hp.hpl.jena.sparql.algebra.op.OpFilter;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        r1 = (com.hp.hpl.jena.sparql.algebra.op.OpFilter) r0;

        $r4 = r2.<com.hp.hpl.jena.sparql.algebra.op.OpFilter: com.hp.hpl.jena.sparql.expr.ExprList expressions>;

        $r3 = r1.<com.hp.hpl.jena.sparql.algebra.op.OpFilter: com.hp.hpl.jena.sparql.expr.ExprList expressions>;

        $z1 = virtualinvoke $r4.<com.hp.hpl.jena.sparql.expr.ExprList: boolean equals(java.lang.Object)>($r3);

        if $z1 != 0 goto label2;

        return 0;

     label2:
        $r5 = virtualinvoke r2.<com.hp.hpl.jena.sparql.algebra.op.OpFilter: com.hp.hpl.jena.sparql.algebra.Op getSubOp()>();

        $r6 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpFilter: com.hp.hpl.jena.sparql.algebra.Op getSubOp()>();

        $z2 = interfaceinvoke $r5.<com.hp.hpl.jena.sparql.algebra.Op: boolean equalTo(com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.util.NodeIsomorphismMap)>($r6, r7);

        return $z2;
    }
}
