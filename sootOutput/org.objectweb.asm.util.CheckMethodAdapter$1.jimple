class org.objectweb.asm.util.CheckMethodAdapter$1 extends org.objectweb.asm.tree.MethodNode
{
    final org.objectweb.asm.MethodVisitor val$cmv;

    void <init>(int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[], org.objectweb.asm.MethodVisitor)
    {
        org.objectweb.asm.MethodVisitor r1;
        org.objectweb.asm.util.CheckMethodAdapter$1 r0;
        int i0;
        java.lang.String[] r5;
        java.lang.String r2, r3, r4;

        r0 := @this: org.objectweb.asm.util.CheckMethodAdapter$1;

        i0 := @parameter0: int;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String;

        r5 := @parameter4: java.lang.String[];

        r1 := @parameter5: org.objectweb.asm.MethodVisitor;

        r0.<org.objectweb.asm.util.CheckMethodAdapter$1: org.objectweb.asm.MethodVisitor val$cmv> = r1;

        specialinvoke r0.<org.objectweb.asm.tree.MethodNode: void <init>(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])>(i0, r2, r3, r4, r5);

        return;
    }

    public void visitEnd()
    {
        org.objectweb.asm.MethodVisitor $r3;
        org.objectweb.asm.tree.analysis.Analyzer $r0;
        int $i0, $i1;
        java.lang.String $r10, $r13, $r15;
        boolean $z0;
        java.io.PrintWriter $r7;
        org.objectweb.asm.tree.analysis.BasicVerifier $r1;
        java.io.StringWriter $r6;
        java.lang.RuntimeException $r5, $r8;
        java.lang.Exception $r4;
        org.objectweb.asm.util.CheckMethodAdapter$1 r2;
        java.lang.StringBuilder $r9, $r11, $r12, $r14;

        r2 := @this: org.objectweb.asm.util.CheckMethodAdapter$1;

        $r0 = new org.objectweb.asm.tree.analysis.Analyzer;

        $r1 = new org.objectweb.asm.tree.analysis.BasicVerifier;

        specialinvoke $r1.<org.objectweb.asm.tree.analysis.BasicVerifier: void <init>()>();

        specialinvoke $r0.<org.objectweb.asm.tree.analysis.Analyzer: void <init>(org.objectweb.asm.tree.analysis.Interpreter)>($r1);

     label1:
        virtualinvoke $r0.<org.objectweb.asm.tree.analysis.Analyzer: org.objectweb.asm.tree.analysis.Frame[] analyze(java.lang.String,org.objectweb.asm.tree.MethodNode)>("dummy", r2);

     label2:
        goto label5;

     label3:
        $r4 := @caughtexception;

        $z0 = $r4 instanceof java.lang.IndexOutOfBoundsException;

        if $z0 == 0 goto label4;

        $i0 = r2.<org.objectweb.asm.util.CheckMethodAdapter$1: int maxLocals>;

        if $i0 != 0 goto label4;

        $i1 = r2.<org.objectweb.asm.util.CheckMethodAdapter$1: int maxStack>;

        if $i1 != 0 goto label4;

        $r5 = new java.lang.RuntimeException;

        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.String)>("Data flow checking option requires valid, non zero maxLocals and maxStack values.");

        throw $r5;

     label4:
        virtualinvoke $r4.<java.lang.Exception: void printStackTrace()>();

        $r6 = new java.io.StringWriter;

        specialinvoke $r6.<java.io.StringWriter: void <init>()>();

        $r7 = new java.io.PrintWriter;

        specialinvoke $r7.<java.io.PrintWriter: void <init>(java.io.Writer,boolean)>($r6, 1);

        staticinvoke <org.objectweb.asm.util.CheckClassAdapter: void printAnalyzerResult(org.objectweb.asm.tree.MethodNode,org.objectweb.asm.tree.analysis.Analyzer,java.io.PrintWriter)>(r2, $r0, $r7);

        virtualinvoke $r7.<java.io.PrintWriter: void close()>();

        $r8 = new java.lang.RuntimeException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r4.<java.lang.Exception: java.lang.String getMessage()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

        $r13 = virtualinvoke $r6.<java.io.StringWriter: java.lang.String toString()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.RuntimeException: void <init>(java.lang.String)>($r15);

        throw $r8;

     label5:
        $r3 = r2.<org.objectweb.asm.util.CheckMethodAdapter$1: org.objectweb.asm.MethodVisitor val$cmv>;

        virtualinvoke r2.<org.objectweb.asm.util.CheckMethodAdapter$1: void accept(org.objectweb.asm.MethodVisitor)>($r3);

        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }
}
