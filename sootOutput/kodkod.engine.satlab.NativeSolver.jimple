abstract class kodkod.engine.satlab.NativeSolver extends java.lang.Object implements kodkod.engine.satlab.SATSolver
{
    private long peer;
    private java.lang.Boolean sat;
    private int clauses;
    private int vars;
    static final boolean $assertionsDisabled;

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lkodkod/engine/satlab/NativeSolver;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <kodkod.engine.satlab.NativeSolver: boolean $assertionsDisabled> = $z1;

        return;
    }

    void <init>(long)
    {
        kodkod.engine.satlab.NativeSolver r0;
        long l0;

        r0 := @this: kodkod.engine.satlab.NativeSolver;

        l0 := @parameter0: long;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<kodkod.engine.satlab.NativeSolver: long peer> = l0;

        r0.<kodkod.engine.satlab.NativeSolver: int vars> = 0;

        r0.<kodkod.engine.satlab.NativeSolver: int clauses> = 0;

        r0.<kodkod.engine.satlab.NativeSolver: java.lang.Boolean sat> = null;

        return;
    }

    static void loadLibrary(java.lang.String)
    {
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        staticinvoke <java.lang.System: void loadLibrary(java.lang.String)>(r0);

        return;
    }

    public final int numberOfVariables()
    {
        int $i0;
        kodkod.engine.satlab.NativeSolver r0;

        r0 := @this: kodkod.engine.satlab.NativeSolver;

        $i0 = r0.<kodkod.engine.satlab.NativeSolver: int vars>;

        return $i0;
    }

    public final int numberOfClauses()
    {
        int $i0;
        kodkod.engine.satlab.NativeSolver r0;

        r0 := @this: kodkod.engine.satlab.NativeSolver;

        $i0 = r0.<kodkod.engine.satlab.NativeSolver: int clauses>;

        return $i0;
    }

    void adjustClauseCount(int)
    {
        kodkod.engine.satlab.NativeSolver r0;
        int i0;
        java.lang.AssertionError $r1;
        boolean $z0;

        r0 := @this: kodkod.engine.satlab.NativeSolver;

        i0 := @parameter0: int;

        $z0 = <kodkod.engine.satlab.NativeSolver: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if i0 >= 0 goto label1;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label1:
        r0.<kodkod.engine.satlab.NativeSolver: int clauses> = i0;

        return;
    }

    public final void addVariables(int)
    {
        long $l3;
        java.lang.IllegalArgumentException $r1;
        kodkod.engine.satlab.NativeSolver r0;
        int i0, $i1, $i2;
        java.lang.StringBuilder $r2, $r3;
        java.lang.String $r4;

        r0 := @this: kodkod.engine.satlab.NativeSolver;

        i0 := @parameter0: int;

        if i0 >= 0 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>("vars < 0: ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r1;

     label1:
        if i0 <= 0 goto label2;

        $i1 = r0.<kodkod.engine.satlab.NativeSolver: int vars>;

        $i2 = $i1 + i0;

        r0.<kodkod.engine.satlab.NativeSolver: int vars> = $i2;

        $l3 = r0.<kodkod.engine.satlab.NativeSolver: long peer>;

        virtualinvoke r0.<kodkod.engine.satlab.NativeSolver: void addVariables(long,int)>($l3, i0);

     label2:
        return;
    }

    public final boolean addClause(int[])
    {
        kodkod.engine.satlab.NativeSolver r1;
        int[] r0;
        int $i0, $i2, $i3;
        long $l1;
        boolean $z0;

        r1 := @this: kodkod.engine.satlab.NativeSolver;

        r0 := @parameter0: int[];

        $i0 = lengthof r0;

        if $i0 <= 0 goto label1;

        $l1 = r1.<kodkod.engine.satlab.NativeSolver: long peer>;

        $z0 = virtualinvoke r1.<kodkod.engine.satlab.NativeSolver: boolean addClause(long,int[])>($l1, r0);

        if $z0 == 0 goto label1;

        $i2 = r1.<kodkod.engine.satlab.NativeSolver: int clauses>;

        $i3 = $i2 + 1;

        r1.<kodkod.engine.satlab.NativeSolver: int clauses> = $i3;

        return 1;

     label1:
        return 0;
    }

    final long peer()
    {
        kodkod.engine.satlab.NativeSolver r0;
        long $l0;

        r0 := @this: kodkod.engine.satlab.NativeSolver;

        $l0 = r0.<kodkod.engine.satlab.NativeSolver: long peer>;

        return $l0;
    }

    final java.lang.Boolean status()
    {
        kodkod.engine.satlab.NativeSolver r0;
        java.lang.Boolean $r1;

        r0 := @this: kodkod.engine.satlab.NativeSolver;

        $r1 = r0.<kodkod.engine.satlab.NativeSolver: java.lang.Boolean sat>;

        return $r1;
    }

    public final boolean solve()
    {
        kodkod.engine.satlab.NativeSolver r0;
        java.lang.Boolean $r1;
        long $l0;
        boolean $z0, $z1;

        r0 := @this: kodkod.engine.satlab.NativeSolver;

        $l0 = r0.<kodkod.engine.satlab.NativeSolver: long peer>;

        $z0 = virtualinvoke r0.<kodkod.engine.satlab.NativeSolver: boolean solve(long)>($l0);

        $r1 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        r0.<kodkod.engine.satlab.NativeSolver: java.lang.Boolean sat> = $r1;

        $z1 = virtualinvoke $r1.<java.lang.Boolean: boolean booleanValue()>();

        return $z1;
    }

    final void validateVariable(int)
    {
        java.lang.IllegalArgumentException $r0;
        kodkod.engine.satlab.NativeSolver r4;
        int i0, $i1, $i2;
        java.lang.StringBuilder $r1, $r3, $r5, $r6;
        java.lang.String $r2, $r7;

        r4 := @this: kodkod.engine.satlab.NativeSolver;

        i0 := @parameter0: int;

        if i0 < 1 goto label1;

        $i2 = r4.<kodkod.engine.satlab.NativeSolver: int vars>;

        if i0 <= $i2 goto label2;

     label1:
        $r0 = new java.lang.IllegalArgumentException;

        $r1 = new java.lang.StringBuilder;

        $r2 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(i0);

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>($r2);

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" !in [1..");

        $i1 = r4.<kodkod.engine.satlab.NativeSolver: int vars>;

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r0;

     label2:
        return;
    }

    public final boolean valueOf(int)
    {
        java.lang.IllegalStateException $r3;
        long $l1;
        kodkod.engine.satlab.NativeSolver r0;
        int i0;
        java.lang.Boolean $r1, $r2;
        boolean $z0, $z1;

        r0 := @this: kodkod.engine.satlab.NativeSolver;

        i0 := @parameter0: int;

        $r2 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        $r1 = r0.<kodkod.engine.satlab.NativeSolver: java.lang.Boolean sat>;

        $z0 = virtualinvoke $r2.<java.lang.Boolean: boolean equals(java.lang.Object)>($r1);

        if $z0 != 0 goto label1;

        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>()>();

        throw $r3;

     label1:
        virtualinvoke r0.<kodkod.engine.satlab.NativeSolver: void validateVariable(int)>(i0);

        $l1 = r0.<kodkod.engine.satlab.NativeSolver: long peer>;

        $z1 = virtualinvoke r0.<kodkod.engine.satlab.NativeSolver: boolean valueOf(long,int)>($l1, i0);

        return $z1;
    }

    public final synchronized void free()
    {
        kodkod.engine.satlab.NativeSolver r0;
        byte $b1;
        long $l0, $l2;

        r0 := @this: kodkod.engine.satlab.NativeSolver;

        $l0 = r0.<kodkod.engine.satlab.NativeSolver: long peer>;

        $b1 = $l0 cmp 0L;

        if $b1 == 0 goto label1;

        $l2 = r0.<kodkod.engine.satlab.NativeSolver: long peer>;

        virtualinvoke r0.<kodkod.engine.satlab.NativeSolver: void free(long)>($l2);

        r0.<kodkod.engine.satlab.NativeSolver: long peer> = 0L;

     label1:
        return;
    }

    protected final void finalize() throws java.lang.Throwable
    {
        kodkod.engine.satlab.NativeSolver r0;

        r0 := @this: kodkod.engine.satlab.NativeSolver;

        specialinvoke r0.<java.lang.Object: void finalize()>();

        virtualinvoke r0.<kodkod.engine.satlab.NativeSolver: void free()>();

        return;
    }

    abstract void free(long);

    abstract void addVariables(long, int);

    abstract boolean addClause(long, int[]);

    abstract boolean solve(long);

    abstract boolean valueOf(long, int);
}
