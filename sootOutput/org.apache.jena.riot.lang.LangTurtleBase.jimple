public abstract class org.apache.jena.riot.lang.LangTurtleBase extends org.apache.jena.riot.lang.LangBase
{
    protected static final java.lang.String KW_A;
    protected static final java.lang.String KW_SAME_AS;
    protected static final java.lang.String KW_LOG_IMPLIES;
    protected static final java.lang.String KW_TRUE;
    protected static final java.lang.String KW_FALSE;
    protected static final boolean VERBOSE;
    private com.hp.hpl.jena.graph.Node currentGraph;
    protected static final com.hp.hpl.jena.graph.Node nodeSameAs;
    protected static final com.hp.hpl.jena.graph.Node nodeLogImplies;

    public final com.hp.hpl.jena.graph.Node getCurrentGraph()
    {
        org.apache.jena.riot.lang.LangTurtleBase r0;
        com.hp.hpl.jena.graph.Node $r1;

        r0 := @this: org.apache.jena.riot.lang.LangTurtleBase;

        $r1 = r0.<org.apache.jena.riot.lang.LangTurtleBase: com.hp.hpl.jena.graph.Node currentGraph>;

        return $r1;
    }

    public final void setCurrentGraph(com.hp.hpl.jena.graph.Node)
    {
        org.apache.jena.riot.lang.LangTurtleBase r0;
        com.hp.hpl.jena.graph.Node r1;

        r0 := @this: org.apache.jena.riot.lang.LangTurtleBase;

        r1 := @parameter0: com.hp.hpl.jena.graph.Node;

        r0.<org.apache.jena.riot.lang.LangTurtleBase: com.hp.hpl.jena.graph.Node currentGraph> = r1;

        return;
    }

    protected void <init>(org.apache.jena.riot.tokens.Tokenizer, org.apache.jena.riot.system.ParserProfile, org.apache.jena.riot.system.StreamRDF)
    {
        org.apache.jena.riot.lang.LangTurtleBase r0;
        org.apache.jena.riot.tokens.Tokenizer r1;
        org.apache.jena.riot.system.ParserProfile r2;
        org.apache.jena.riot.system.StreamRDF r3;

        r0 := @this: org.apache.jena.riot.lang.LangTurtleBase;

        r1 := @parameter0: org.apache.jena.riot.tokens.Tokenizer;

        r2 := @parameter1: org.apache.jena.riot.system.ParserProfile;

        r3 := @parameter2: org.apache.jena.riot.system.StreamRDF;

        specialinvoke r0.<org.apache.jena.riot.lang.LangBase: void <init>(org.apache.jena.riot.tokens.Tokenizer,org.apache.jena.riot.system.ParserProfile,org.apache.jena.riot.system.StreamRDF)>(r1, r2, r3);

        r0.<org.apache.jena.riot.lang.LangTurtleBase: com.hp.hpl.jena.graph.Node currentGraph> = null;

        return;
    }

    protected final void runParser()
    {
        org.apache.jena.riot.tokens.Token $r1;
        org.apache.jena.riot.lang.LangTurtleBase r0;
        org.apache.jena.riot.tokens.TokenType $r2, $r3, $r4;
        java.lang.String $r5, $r6;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;

        r0 := @this: org.apache.jena.riot.lang.LangTurtleBase;

     label1:
        $z5 = virtualinvoke r0.<org.apache.jena.riot.lang.LangTurtleBase: boolean moreTokens()>();

        if $z5 == 0 goto label6;

        $r1 = virtualinvoke r0.<org.apache.jena.riot.lang.LangTurtleBase: org.apache.jena.riot.tokens.Token peekToken()>();

        $r2 = <org.apache.jena.riot.tokens.TokenType: org.apache.jena.riot.tokens.TokenType DIRECTIVE>;

        $z0 = virtualinvoke r0.<org.apache.jena.riot.lang.LangTurtleBase: boolean lookingAt(org.apache.jena.riot.tokens.TokenType)>($r2);

        if $z0 == 0 goto label2;

        virtualinvoke r0.<org.apache.jena.riot.lang.LangTurtleBase: void directive()>();

        goto label1;

     label2:
        $r3 = <org.apache.jena.riot.tokens.TokenType: org.apache.jena.riot.tokens.TokenType KEYWORD>;

        $z1 = virtualinvoke r0.<org.apache.jena.riot.lang.LangTurtleBase: boolean lookingAt(org.apache.jena.riot.tokens.TokenType)>($r3);

        if $z1 == 0 goto label4;

        $r5 = virtualinvoke $r1.<org.apache.jena.riot.tokens.Token: java.lang.String getImage()>();

        $z3 = virtualinvoke $r5.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("PREFIX");

        if $z3 != 0 goto label3;

        $r6 = virtualinvoke $r1.<org.apache.jena.riot.tokens.Token: java.lang.String getImage()>();

        $z4 = virtualinvoke $r6.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("BASE");

        if $z4 == 0 goto label4;

     label3:
        virtualinvoke r0.<org.apache.jena.riot.lang.LangTurtleBase: void directiveKeyword()>();

        goto label1;

     label4:
        virtualinvoke r0.<org.apache.jena.riot.lang.LangTurtleBase: void oneTopLevelElement()>();

        $r4 = <org.apache.jena.riot.tokens.TokenType: org.apache.jena.riot.tokens.TokenType EOF>;

        $z2 = virtualinvoke r0.<org.apache.jena.riot.lang.LangTurtleBase: boolean lookingAt(org.apache.jena.riot.tokens.TokenType)>($r4);

        if $z2 == 0 goto label5;

        goto label6;

     label5:
        goto label1;

     label6:
        return;
    }

    protected abstract void oneTopLevelElement();

    protected abstract void emit(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node);

    protected final void directiveKeyword()
    {
        org.apache.jena.riot.lang.LangTurtleBase r0;
        java.lang.Object[] $r3;
        java.lang.String $r2;
        org.apache.jena.riot.tokens.Token $r1;
        boolean $z0, $z1;

        r0 := @this: org.apache.jena.riot.lang.LangTurtleBase;

        $r1 = virtualinvoke r0.<org.apache.jena.riot.lang.LangTurtleBase: org.apache.jena.riot.tokens.Token peekToken()>();

        $r2 = virtualinvoke $r1.<org.apache.jena.riot.tokens.Token: java.lang.String getImage()>();

        virtualinvoke r0.<org.apache.jena.riot.lang.LangTurtleBase: org.apache.jena.riot.tokens.Token nextToken()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("BASE");

        if $z0 == 0 goto label1;

        virtualinvoke r0.<org.apache.jena.riot.lang.LangTurtleBase: void directiveBase()>();

        return;

     label1:
        $z1 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("PREFIX");

        if $z1 == 0 goto label2;

        virtualinvoke r0.<org.apache.jena.riot.lang.LangTurtleBase: void directivePrefix()>();

        return;

     label2:
        $r3 = newarray (java.lang.Object)[1];

        $r3[0] = $r2;

        virtualinvoke r0.<org.apache.jena.riot.lang.LangTurtleBase: void exception(org.apache.jena.riot.tokens.Token,java.lang.String,java.lang.Object[])>($r1, "Unrecognized keyword for directive: %s", $r3);

        return;
    }

    protected final void directive()
    {
        java.lang.Object[] $r3;
        org.apache.jena.riot.tokens.Token $r1;
        org.apache.jena.riot.lang.LangTurtleBase r0;
        org.apache.jena.riot.tokens.TokenType $r4, $r5;
        java.lang.String $r2;
        boolean $z0, $z1;

        r0 := @this: org.apache.jena.riot.lang.LangTurtleBase;

        $r1 = virtualinvoke r0.<org.apache.jena.riot.lang.LangTurtleBase: org.apache.jena.riot.tokens.Token peekToken()>();

        $r2 = virtualinvoke $r1.<org.apache.jena.riot.tokens.Token: java.lang.String getImage()>();

        virtualinvoke r0.<org.apache.jena.riot.lang.LangTurtleBase: org.apache.jena.riot.tokens.Token nextToken()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("base");

        if $z0 == 0 goto label1;

        virtualinvoke r0.<org.apache.jena.riot.lang.LangTurtleBase: void directiveBase()>();

        $r5 = <org.apache.jena.riot.tokens.TokenType: org.apache.jena.riot.tokens.TokenType DOT>;

        virtualinvoke r0.<org.apache.jena.riot.lang.LangTurtleBase: void skipIf(org.apache.jena.riot.tokens.TokenType)>($r5);

        return;

     label1:
        $z1 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("prefix");

        if $z1 == 0 goto label2;

        virtualinvoke r0.<org.apache.jena.riot.lang.LangTurtleBase: void directivePrefix()>();

        $r4 = <org.apache.jena.riot.tokens.TokenType: org.apache.jena.riot.tokens.TokenType DOT>;

        virtualinvoke r0.<org.apache.jena.riot.lang.LangTurtleBase: void skipIf(org.apache.jena.riot.tokens.TokenType)>($r4);

        return;

     label2:
        $r3 = newarray (java.lang.Object)[1];

        $r3[0] = $r2;

        virtualinvoke r0.<org.apache.jena.riot.lang.LangTurtleBase: void exception(org.apache.jena.riot.tokens.Token,java.lang.String,java.lang.Object[])>($r1, "Unrecognized directive: %s", $r3);

        return;
    }

    protected final void directivePrefix()
    {
        org.apache.jena.iri.IRI $r11;
        boolean $z0, $z1;
        org.apache.jena.riot.system.ParserProfile $r10, $r12;
        java.lang.StringBuilder $r16, $r17, $r19, $r20, $r24, $r25, $r27, $r28, $r32, $r33, $r35, $r36;
        java.lang.Object[] $r22, $r30, $r38;
        org.apache.jena.riot.system.Prologue $r13;
        long $l1, $l2;
        org.apache.jena.riot.tokens.Token $r2, $r4, $r7, $r15, $r18, $r23, $r26, $r31, $r34;
        org.apache.jena.riot.lang.LangTurtleBase r0;
        org.apache.jena.riot.system.PrefixMap $r14;
        int $i0;
        java.lang.String $r3, $r5, $r8, $r21, $r29, $r37;
        org.apache.jena.riot.system.StreamRDF $r9;
        org.apache.jena.riot.tokens.TokenType $r1, $r6;

        r0 := @this: org.apache.jena.riot.lang.LangTurtleBase;

        $r1 = <org.apache.jena.riot.tokens.TokenType: org.apache.jena.riot.tokens.TokenType PREFIXED_NAME>;

        $z0 = virtualinvoke r0.<org.apache.jena.riot.lang.LangTurtleBase: boolean lookingAt(org.apache.jena.riot.tokens.TokenType)>($r1);

        if $z0 != 0 goto label1;

        $r31 = virtualinvoke r0.<org.apache.jena.riot.lang.LangTurtleBase: org.apache.jena.riot.tokens.Token peekToken()>();

        $r32 = new java.lang.StringBuilder;

        specialinvoke $r32.<java.lang.StringBuilder: void <init>()>();

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("@prefix requires a prefix (found \'");

        $r34 = virtualinvoke r0.<org.apache.jena.riot.lang.LangTurtleBase: org.apache.jena.riot.tokens.Token peekToken()>();

        $r35 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r34);

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\')");

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>();

        $r38 = newarray (java.lang.Object)[0];

        virtualinvoke r0.<org.apache.jena.riot.lang.LangTurtleBase: void exception(org.apache.jena.riot.tokens.Token,java.lang.String,java.lang.Object[])>($r31, $r37, $r38);

     label1:
        $r2 = virtualinvoke r0.<org.apache.jena.riot.lang.LangTurtleBase: org.apache.jena.riot.tokens.Token peekToken()>();

        $r3 = virtualinvoke $r2.<org.apache.jena.riot.tokens.Token: java.lang.String getImage2()>();

        $i0 = virtualinvoke $r3.<java.lang.String: int length()>();

        if $i0 == 0 goto label2;

        $r23 = virtualinvoke r0.<org.apache.jena.riot.lang.LangTurtleBase: org.apache.jena.riot.tokens.Token peekToken()>();

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("@prefix requires a prefix and no suffix (found \'");

        $r26 = virtualinvoke r0.<org.apache.jena.riot.lang.LangTurtleBase: org.apache.jena.riot.tokens.Token peekToken()>();

        $r27 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r26);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\')");

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        $r30 = newarray (java.lang.Object)[0];

        virtualinvoke r0.<org.apache.jena.riot.lang.LangTurtleBase: void exception(org.apache.jena.riot.tokens.Token,java.lang.String,java.lang.Object[])>($r23, $r29, $r30);

     label2:
        $r4 = virtualinvoke r0.<org.apache.jena.riot.lang.LangTurtleBase: org.apache.jena.riot.tokens.Token peekToken()>();

        $r5 = virtualinvoke $r4.<org.apache.jena.riot.tokens.Token: java.lang.String getImage()>();

        virtualinvoke r0.<org.apache.jena.riot.lang.LangTurtleBase: org.apache.jena.riot.tokens.Token nextToken()>();

        $r6 = <org.apache.jena.riot.tokens.TokenType: org.apache.jena.riot.tokens.TokenType IRI>;

        $z1 = virtualinvoke r0.<org.apache.jena.riot.lang.LangTurtleBase: boolean lookingAt(org.apache.jena.riot.tokens.TokenType)>($r6);

        if $z1 != 0 goto label3;

        $r15 = virtualinvoke r0.<org.apache.jena.riot.lang.LangTurtleBase: org.apache.jena.riot.tokens.Token peekToken()>();

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("@prefix requires an IRI (found \'");

        $r18 = virtualinvoke r0.<org.apache.jena.riot.lang.LangTurtleBase: org.apache.jena.riot.tokens.Token peekToken()>();

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r18);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\')");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        $r22 = newarray (java.lang.Object)[0];

        virtualinvoke r0.<org.apache.jena.riot.lang.LangTurtleBase: void exception(org.apache.jena.riot.tokens.Token,java.lang.String,java.lang.Object[])>($r15, $r21, $r22);

     label3:
        $r7 = virtualinvoke r0.<org.apache.jena.riot.lang.LangTurtleBase: org.apache.jena.riot.tokens.Token peekToken()>();

        $r8 = virtualinvoke $r7.<org.apache.jena.riot.tokens.Token: java.lang.String getImage()>();

        $r9 = r0.<org.apache.jena.riot.lang.LangTurtleBase: org.apache.jena.riot.system.StreamRDF dest>;

        interfaceinvoke $r9.<org.apache.jena.riot.system.StreamRDF: void prefix(java.lang.String,java.lang.String)>($r5, $r8);

        $r10 = r0.<org.apache.jena.riot.lang.LangTurtleBase: org.apache.jena.riot.system.ParserProfile profile>;

        $l2 = r0.<org.apache.jena.riot.lang.LangTurtleBase: long currLine>;

        $l1 = r0.<org.apache.jena.riot.lang.LangTurtleBase: long currCol>;

        $r11 = interfaceinvoke $r10.<org.apache.jena.riot.system.ParserProfile: org.apache.jena.iri.IRI makeIRI(java.lang.String,long,long)>($r8, $l2, $l1);

        $r12 = r0.<org.apache.jena.riot.lang.LangTurtleBase: org.apache.jena.riot.system.ParserProfile profile>;

        $r13 = interfaceinvoke $r12.<org.apache.jena.riot.system.ParserProfile: org.apache.jena.riot.system.Prologue getPrologue()>();

        $r14 = virtualinvoke $r13.<org.apache.jena.riot.system.Prologue: org.apache.jena.riot.system.PrefixMap getPrefixMap()>();

        interfaceinvoke $r14.<org.apache.jena.riot.system.PrefixMap: void add(java.lang.String,org.apache.jena.iri.IRI)>($r5, $r11);

        virtualinvoke r0.<org.apache.jena.riot.lang.LangTurtleBase: org.apache.jena.riot.tokens.Token nextToken()>();

        return;
    }

    protected final void directiveBase()
    {
        java.lang.Object[] $r15;
        org.apache.jena.riot.system.Prologue $r9;
        long $l0, $l1;
        org.apache.jena.riot.tokens.Token $r1;
        org.apache.jena.riot.lang.LangTurtleBase r0;
        java.lang.String $r3, $r14;
        org.apache.jena.iri.IRI $r6;
        boolean $z0;
        org.apache.jena.riot.system.ParserProfile $r5, $r8;
        org.apache.jena.riot.system.StreamRDF $r4;
        org.apache.jena.riot.tokens.TokenType $r2, $r7;
        java.lang.StringBuilder $r10, $r11, $r12, $r13;

        r0 := @this: org.apache.jena.riot.lang.LangTurtleBase;

        $r1 = virtualinvoke r0.<org.apache.jena.riot.lang.LangTurtleBase: org.apache.jena.riot.tokens.Token peekToken()>();

        $r2 = <org.apache.jena.riot.tokens.TokenType: org.apache.jena.riot.tokens.TokenType IRI>;

        $z0 = virtualinvoke r0.<org.apache.jena.riot.lang.LangTurtleBase: boolean lookingAt(org.apache.jena.riot.tokens.TokenType)>($r2);

        if $z0 != 0 goto label1;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("@base requires an IRI (found \'");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\')");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        $r15 = newarray (java.lang.Object)[0];

        virtualinvoke r0.<org.apache.jena.riot.lang.LangTurtleBase: void exception(org.apache.jena.riot.tokens.Token,java.lang.String,java.lang.Object[])>($r1, $r14, $r15);

     label1:
        $r3 = virtualinvoke $r1.<org.apache.jena.riot.tokens.Token: java.lang.String getImage()>();

        $r4 = r0.<org.apache.jena.riot.lang.LangTurtleBase: org.apache.jena.riot.system.StreamRDF dest>;

        interfaceinvoke $r4.<org.apache.jena.riot.system.StreamRDF: void base(java.lang.String)>($r3);

        $r5 = r0.<org.apache.jena.riot.lang.LangTurtleBase: org.apache.jena.riot.system.ParserProfile profile>;

        $l1 = r0.<org.apache.jena.riot.lang.LangTurtleBase: long currLine>;

        $l0 = r0.<org.apache.jena.riot.lang.LangTurtleBase: long currCol>;

        $r6 = interfaceinvoke $r5.<org.apache.jena.riot.system.ParserProfile: org.apache.jena.iri.IRI makeIRI(java.lang.String,long,long)>($r3, $l1, $l0);

        $r7 = <org.apache.jena.riot.tokens.TokenType: org.apache.jena.riot.tokens.TokenType DOT>;

        virtualinvoke r0.<org.apache.jena.riot.lang.LangTurtleBase: void skipIf(org.apache.jena.riot.tokens.TokenType)>($r7);

        virtualinvoke r0.<org.apache.jena.riot.lang.LangTurtleBase: org.apache.jena.riot.tokens.Token nextToken()>();

        $r8 = r0.<org.apache.jena.riot.lang.LangTurtleBase: org.apache.jena.riot.system.ParserProfile profile>;

        $r9 = interfaceinvoke $r8.<org.apache.jena.riot.system.ParserProfile: org.apache.jena.riot.system.Prologue getPrologue()>();

        virtualinvoke $r9.<org.apache.jena.riot.system.Prologue: void setBaseURI(org.apache.jena.iri.IRI)>($r6);

        return;
    }

    protected final void triplesSameSubject()
    {
        java.lang.Object[] $r3, $r9;
        com.hp.hpl.jena.graph.Node $r5;
        org.apache.jena.riot.tokens.Token $r2, $r4, $r8, $r10;
        org.apache.jena.riot.lang.LangTurtleBase r0;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.apache.jena.riot.tokens.TokenType $r1, $r6, $r7;

        r0 := @this: org.apache.jena.riot.lang.LangTurtleBase;

        $r1 = <org.apache.jena.riot.tokens.TokenType: org.apache.jena.riot.tokens.TokenType NODE>;

        $z0 = virtualinvoke r0.<org.apache.jena.riot.lang.LangTurtleBase: boolean lookingAt(org.apache.jena.riot.tokens.TokenType)>($r1);

        if $z0 == 0 goto label1;

        virtualinvoke r0.<org.apache.jena.riot.lang.LangTurtleBase: void triples()>();

        return;

     label1:
        $z1 = virtualinvoke r0.<org.apache.jena.riot.lang.LangTurtleBase: boolean peekTriplesNodeCompound()>();

        if $z1 == 0 goto label5;

        $r5 = virtualinvoke r0.<org.apache.jena.riot.lang.LangTurtleBase: com.hp.hpl.jena.graph.Node triplesNodeCompound()>();

        $r6 = <org.apache.jena.riot.tokens.TokenType: org.apache.jena.riot.tokens.TokenType EOF>;

        $z2 = virtualinvoke r0.<org.apache.jena.riot.lang.LangTurtleBase: boolean lookingAt(org.apache.jena.riot.tokens.TokenType)>($r6);

        if $z2 == 0 goto label2;

        return;

     label2:
        $r7 = <org.apache.jena.riot.tokens.TokenType: org.apache.jena.riot.tokens.TokenType DOT>;

        $z3 = virtualinvoke r0.<org.apache.jena.riot.lang.LangTurtleBase: boolean lookingAt(org.apache.jena.riot.tokens.TokenType)>($r7);

        if $z3 == 0 goto label3;

        virtualinvoke r0.<org.apache.jena.riot.lang.LangTurtleBase: org.apache.jena.riot.tokens.Token nextToken()>();

        return;

     label3:
        $z4 = virtualinvoke r0.<org.apache.jena.riot.lang.LangTurtleBase: boolean peekPredicate()>();

        if $z4 == 0 goto label4;

        virtualinvoke r0.<org.apache.jena.riot.lang.LangTurtleBase: void predicateObjectList(com.hp.hpl.jena.graph.Node)>($r5);

        virtualinvoke r0.<org.apache.jena.riot.lang.LangTurtleBase: void expectEndOfTriples()>();

        return;

     label4:
        $r8 = virtualinvoke r0.<org.apache.jena.riot.lang.LangTurtleBase: org.apache.jena.riot.tokens.Token peekToken()>();

        $r9 = newarray (java.lang.Object)[1];

        $r10 = virtualinvoke r0.<org.apache.jena.riot.lang.LangTurtleBase: org.apache.jena.riot.tokens.Token peekToken()>();

        $r9[0] = $r10;

        virtualinvoke r0.<org.apache.jena.riot.lang.LangTurtleBase: void exception(org.apache.jena.riot.tokens.Token,java.lang.String,java.lang.Object[])>($r8, "Unexpected token : %s", $r9);

     label5:
        $r2 = virtualinvoke r0.<org.apache.jena.riot.lang.LangTurtleBase: org.apache.jena.riot.tokens.Token peekToken()>();

        $r3 = newarray (java.lang.Object)[1];

        $r4 = virtualinvoke r0.<org.apache.jena.riot.lang.LangTurtleBase: org.apache.jena.riot.tokens.Token peekToken()>();

        $r3[0] = $r4;

        virtualinvoke r0.<org.apache.jena.riot.lang.LangTurtleBase: void exception(org.apache.jena.riot.tokens.Token,java.lang.String,java.lang.Object[])>($r2, "Out of place: %s", $r3);

        return;
    }

    protected final void triples()
    {
        org.apache.jena.riot.lang.LangTurtleBase r0;
        java.lang.Object[] $r3;
        com.hp.hpl.jena.graph.Node $r1;
        java.lang.String $r5;
        org.apache.jena.riot.tokens.Token $r2, $r4;

        r0 := @this: org.apache.jena.riot.lang.LangTurtleBase;

        $r1 = virtualinvoke r0.<org.apache.jena.riot.lang.LangTurtleBase: com.hp.hpl.jena.graph.Node node()>();

        if $r1 != null goto label1;

        $r2 = virtualinvoke r0.<org.apache.jena.riot.lang.LangTurtleBase: org.apache.jena.riot.tokens.Token peekToken()>();

        $r3 = newarray (java.lang.Object)[1];

        $r4 = virtualinvoke r0.<org.apache.jena.riot.lang.LangTurtleBase: org.apache.jena.riot.tokens.Token peekToken()>();

        $r5 = virtualinvoke $r4.<org.apache.jena.riot.tokens.Token: java.lang.String text()>();

        $r3[0] = $r5;

        virtualinvoke r0.<org.apache.jena.riot.lang.LangTurtleBase: void exception(org.apache.jena.riot.tokens.Token,java.lang.String,java.lang.Object[])>($r2, "Not recognized: expected node: %s", $r3);

     label1:
        virtualinvoke r0.<org.apache.jena.riot.lang.LangTurtleBase: org.apache.jena.riot.tokens.Token nextToken()>();

        virtualinvoke r0.<org.apache.jena.riot.lang.LangTurtleBase: void predicateObjectList(com.hp.hpl.jena.graph.Node)>($r1);

        virtualinvoke r0.<org.apache.jena.riot.lang.LangTurtleBase: void expectEndOfTriples()>();

        return;
    }

    protected abstract void expectEndOfTriples();

    protected void expectEndOfTriplesTurtle()
    {
        org.apache.jena.riot.lang.LangTurtleBase r0;
        org.apache.jena.riot.tokens.TokenType $r2, $r3;
        org.apache.jena.riot.system.ParserProfile $r1;
        boolean $z0;

        r0 := @this: org.apache.jena.riot.lang.LangTurtleBase;

        $r1 = r0.<org.apache.jena.riot.lang.LangTurtleBase: org.apache.jena.riot.system.ParserProfile profile>;

        $z0 = interfaceinvoke $r1.<org.apache.jena.riot.system.ParserProfile: boolean isStrictMode()>();

        if $z0 == 0 goto label1;

        $r3 = <org.apache.jena.riot.tokens.TokenType: org.apache.jena.riot.tokens.TokenType DOT>;

        virtualinvoke r0.<org.apache.jena.riot.lang.LangTurtleBase: void expect(java.lang.String,org.apache.jena.riot.tokens.TokenType)>("Triples not terminated by DOT", $r3);

        goto label2;

     label1:
        $r2 = <org.apache.jena.riot.tokens.TokenType: org.apache.jena.riot.tokens.TokenType DOT>;

        virtualinvoke r0.<org.apache.jena.riot.lang.LangTurtleBase: void expectOrEOF(java.lang.String,org.apache.jena.riot.tokens.TokenType)>("Triples not terminated by DOT", $r2);

     label2:
        return;
    }

    protected final void predicateObjectList(com.hp.hpl.jena.graph.Node)
    {
        org.apache.jena.riot.lang.LangTurtleBase r0;
        org.apache.jena.riot.tokens.TokenType $r2, $r3;
        com.hp.hpl.jena.graph.Node r1;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.jena.riot.lang.LangTurtleBase;

        r1 := @parameter0: com.hp.hpl.jena.graph.Node;

        virtualinvoke r0.<org.apache.jena.riot.lang.LangTurtleBase: void predicateObjectItem(com.hp.hpl.jena.graph.Node)>(r1);

     label1:
        $r2 = <org.apache.jena.riot.tokens.TokenType: org.apache.jena.riot.tokens.TokenType SEMICOLON>;

        $z0 = virtualinvoke r0.<org.apache.jena.riot.lang.LangTurtleBase: boolean lookingAt(org.apache.jena.riot.tokens.TokenType)>($r2);

        if $z0 != 0 goto label2;

        goto label5;

     label2:
        $r3 = <org.apache.jena.riot.tokens.TokenType: org.apache.jena.riot.tokens.TokenType SEMICOLON>;

        $z1 = virtualinvoke r0.<org.apache.jena.riot.lang.LangTurtleBase: boolean lookingAt(org.apache.jena.riot.tokens.TokenType)>($r3);

        if $z1 == 0 goto label3;

        virtualinvoke r0.<org.apache.jena.riot.lang.LangTurtleBase: org.apache.jena.riot.tokens.Token nextToken()>();

        goto label2;

     label3:
        $z2 = virtualinvoke r0.<org.apache.jena.riot.lang.LangTurtleBase: boolean peekPredicate()>();

        if $z2 != 0 goto label4;

        goto label5;

     label4:
        virtualinvoke r0.<org.apache.jena.riot.lang.LangTurtleBase: void predicateObjectItem(com.hp.hpl.jena.graph.Node)>(r1);

        goto label1;

     label5:
        return;
    }

    protected final void predicateObjectItem(com.hp.hpl.jena.graph.Node)
    {
        org.apache.jena.riot.lang.LangTurtleBase r0;
        com.hp.hpl.jena.graph.Node $r1, r2;

        r0 := @this: org.apache.jena.riot.lang.LangTurtleBase;

        r2 := @parameter0: com.hp.hpl.jena.graph.Node;

        $r1 = virtualinvoke r0.<org.apache.jena.riot.lang.LangTurtleBase: com.hp.hpl.jena.graph.Node predicate()>();

        virtualinvoke r0.<org.apache.jena.riot.lang.LangTurtleBase: org.apache.jena.riot.tokens.Token nextToken()>();

        virtualinvoke r0.<org.apache.jena.riot.lang.LangTurtleBase: void objectList(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r2, $r1);

        return;
    }

    protected final com.hp.hpl.jena.graph.Node predicate()
    {
        java.lang.Object[] $r3, $r12;
        com.hp.hpl.jena.graph.Node $r13, $r14, $r15, $r16;
        org.apache.jena.riot.tokens.Token $r1, $r5, $r6;
        org.apache.jena.riot.lang.LangTurtleBase r0;
        java.lang.String $r7, $r11;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        org.apache.jena.riot.system.ParserProfile $r4;
        org.apache.jena.riot.tokens.TokenType $r2;
        java.lang.StringBuilder $r8, $r9, $r10;

        r0 := @this: org.apache.jena.riot.lang.LangTurtleBase;

        $r1 = virtualinvoke r0.<org.apache.jena.riot.lang.LangTurtleBase: org.apache.jena.riot.tokens.Token peekToken()>();

        $r2 = <org.apache.jena.riot.tokens.TokenType: org.apache.jena.riot.tokens.TokenType KEYWORD>;

        $z0 = virtualinvoke $r1.<org.apache.jena.riot.tokens.Token: boolean hasType(org.apache.jena.riot.tokens.TokenType)>($r2);

        if $z0 == 0 goto label4;

        $r4 = r0.<org.apache.jena.riot.lang.LangTurtleBase: org.apache.jena.riot.system.ParserProfile profile>;

        $z2 = interfaceinvoke $r4.<org.apache.jena.riot.system.ParserProfile: boolean isStrictMode()>();

        $r5 = virtualinvoke r0.<org.apache.jena.riot.lang.LangTurtleBase: org.apache.jena.riot.tokens.Token peekToken()>();

        $r6 = virtualinvoke r0.<org.apache.jena.riot.lang.LangTurtleBase: org.apache.jena.riot.tokens.Token peekToken()>();

        $r7 = virtualinvoke $r6.<org.apache.jena.riot.tokens.Token: java.lang.String getImage()>();

        $z3 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>("a");

        if $z3 == 0 goto label1;

        $r15 = <com.hp.hpl.jena.sparql.graph.NodeConst: com.hp.hpl.jena.graph.Node nodeRDFType>;

        return $r15;

     label1:
        if $z2 != 0 goto label2;

        $z5 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>("=");

        if $z5 == 0 goto label2;

        $r14 = <org.apache.jena.riot.lang.LangTurtleBase: com.hp.hpl.jena.graph.Node nodeSameAs>;

        return $r14;

     label2:
        if $z2 != 0 goto label3;

        $z4 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>("=>");

        if $z4 == 0 goto label3;

        $r13 = <com.hp.hpl.jena.sparql.graph.NodeConst: com.hp.hpl.jena.graph.Node nodeRDFType>;

        return $r13;

     label3:
        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unrecognized: ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        $r12 = newarray (java.lang.Object)[0];

        virtualinvoke r0.<org.apache.jena.riot.lang.LangTurtleBase: void exception(org.apache.jena.riot.tokens.Token,java.lang.String,java.lang.Object[])>($r5, $r11, $r12);

     label4:
        $r16 = virtualinvoke r0.<org.apache.jena.riot.lang.LangTurtleBase: com.hp.hpl.jena.graph.Node node()>();

        if $r16 == null goto label5;

        $z1 = virtualinvoke $r16.<com.hp.hpl.jena.graph.Node: boolean isURI()>();

        if $z1 != 0 goto label6;

     label5:
        $r3 = newarray (java.lang.Object)[1];

        $r3[0] = $r1;

        virtualinvoke r0.<org.apache.jena.riot.lang.LangTurtleBase: void exception(org.apache.jena.riot.tokens.Token,java.lang.String,java.lang.Object[])>($r1, "Expected IRI for predicate: got: %s", $r3);

     label6:
        return $r16;
    }

    protected final boolean peekPredicate()
    {
        org.apache.jena.riot.system.ParserProfile $r6;
        org.apache.jena.riot.tokens.Token $r4;
        org.apache.jena.riot.lang.LangTurtleBase r0;
        org.apache.jena.riot.tokens.TokenType $r1, $r2, $r3;
        java.lang.String $r5;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;

        r0 := @this: org.apache.jena.riot.lang.LangTurtleBase;

        $r1 = <org.apache.jena.riot.tokens.TokenType: org.apache.jena.riot.tokens.TokenType KEYWORD>;

        $z0 = virtualinvoke r0.<org.apache.jena.riot.lang.LangTurtleBase: boolean lookingAt(org.apache.jena.riot.tokens.TokenType)>($r1);

        if $z0 == 0 goto label4;

        $r4 = virtualinvoke r0.<org.apache.jena.riot.lang.LangTurtleBase: org.apache.jena.riot.tokens.Token peekToken()>();

        $r5 = virtualinvoke $r4.<org.apache.jena.riot.tokens.Token: java.lang.String getImage()>();

        $r6 = r0.<org.apache.jena.riot.lang.LangTurtleBase: org.apache.jena.riot.system.ParserProfile profile>;

        $z3 = interfaceinvoke $r6.<org.apache.jena.riot.system.ParserProfile: boolean isStrictMode()>();

        $z4 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>("a");

        if $z4 == 0 goto label1;

        return 1;

     label1:
        if $z3 != 0 goto label2;

        $z6 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>("=");

        if $z6 == 0 goto label2;

        return 1;

     label2:
        if $z3 != 0 goto label3;

        $z5 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>("=>");

        if $z5 == 0 goto label3;

        return 1;

     label3:
        return 0;

     label4:
        $r2 = <org.apache.jena.riot.tokens.TokenType: org.apache.jena.riot.tokens.TokenType IRI>;

        $z1 = virtualinvoke r0.<org.apache.jena.riot.lang.LangTurtleBase: boolean lookingAt(org.apache.jena.riot.tokens.TokenType)>($r2);

        if $z1 == 0 goto label5;

        return 1;

     label5:
        $r3 = <org.apache.jena.riot.tokens.TokenType: org.apache.jena.riot.tokens.TokenType PREFIXED_NAME>;

        $z2 = virtualinvoke r0.<org.apache.jena.riot.lang.LangTurtleBase: boolean lookingAt(org.apache.jena.riot.tokens.TokenType)>($r3);

        if $z2 == 0 goto label6;

        return 1;

     label6:
        return 0;
    }

    protected final com.hp.hpl.jena.graph.Node node()
    {
        org.apache.jena.riot.lang.LangTurtleBase r0;
        com.hp.hpl.jena.graph.Node $r2;
        org.apache.jena.riot.tokens.Token $r1;

        r0 := @this: org.apache.jena.riot.lang.LangTurtleBase;

        $r1 = virtualinvoke r0.<org.apache.jena.riot.lang.LangTurtleBase: org.apache.jena.riot.tokens.Token peekToken()>();

        $r2 = virtualinvoke r0.<org.apache.jena.riot.lang.LangTurtleBase: com.hp.hpl.jena.graph.Node tokenAsNode(org.apache.jena.riot.tokens.Token)>($r1);

        if $r2 != null goto label1;

        return null;

     label1:
        return $r2;
    }

    protected final void objectList(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node)
    {
        org.apache.jena.riot.lang.LangTurtleBase r0;
        org.apache.jena.riot.tokens.TokenType $r4;
        com.hp.hpl.jena.graph.Node $r1, r2, r3;
        boolean $z0, $z1;

        r0 := @this: org.apache.jena.riot.lang.LangTurtleBase;

        r2 := @parameter0: com.hp.hpl.jena.graph.Node;

        r3 := @parameter1: com.hp.hpl.jena.graph.Node;

     label1:
        $r1 = virtualinvoke r0.<org.apache.jena.riot.lang.LangTurtleBase: com.hp.hpl.jena.graph.Node triplesNode()>();

        virtualinvoke r0.<org.apache.jena.riot.lang.LangTurtleBase: void checkEmitTriple(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r2, r3, $r1);

        $z0 = virtualinvoke r0.<org.apache.jena.riot.lang.LangTurtleBase: boolean moreTokens()>();

        if $z0 != 0 goto label2;

        goto label4;

     label2:
        $r4 = <org.apache.jena.riot.tokens.TokenType: org.apache.jena.riot.tokens.TokenType COMMA>;

        $z1 = virtualinvoke r0.<org.apache.jena.riot.lang.LangTurtleBase: boolean lookingAt(org.apache.jena.riot.tokens.TokenType)>($r4);

        if $z1 != 0 goto label3;

        goto label4;

     label3:
        virtualinvoke r0.<org.apache.jena.riot.lang.LangTurtleBase: org.apache.jena.riot.tokens.Token nextToken()>();

        goto label1;

     label4:
        return;
    }

    protected final com.hp.hpl.jena.graph.Node triplesNode()
    {
        java.lang.Object[] $r10, $r11;
        com.hp.hpl.jena.graph.Node $r12, $r13, $r14, $r15;
        org.apache.jena.riot.tokens.Token $r3, $r4;
        org.apache.jena.riot.lang.LangTurtleBase r0;
        java.lang.String $r5, $r9;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.apache.jena.riot.tokens.TokenType $r1, $r2;
        java.lang.StringBuilder $r6, $r7, $r8;

        r0 := @this: org.apache.jena.riot.lang.LangTurtleBase;

        $r1 = <org.apache.jena.riot.tokens.TokenType: org.apache.jena.riot.tokens.TokenType NODE>;

        $z0 = virtualinvoke r0.<org.apache.jena.riot.lang.LangTurtleBase: boolean lookingAt(org.apache.jena.riot.tokens.TokenType)>($r1);

        if $z0 == 0 goto label1;

        $r14 = virtualinvoke r0.<org.apache.jena.riot.lang.LangTurtleBase: com.hp.hpl.jena.graph.Node node()>();

        virtualinvoke r0.<org.apache.jena.riot.lang.LangTurtleBase: org.apache.jena.riot.tokens.Token nextToken()>();

        return $r14;

     label1:
        $r2 = <org.apache.jena.riot.tokens.TokenType: org.apache.jena.riot.tokens.TokenType KEYWORD>;

        $z1 = virtualinvoke r0.<org.apache.jena.riot.lang.LangTurtleBase: boolean lookingAt(org.apache.jena.riot.tokens.TokenType)>($r2);

        if $z1 == 0 goto label5;

        $r3 = virtualinvoke r0.<org.apache.jena.riot.lang.LangTurtleBase: org.apache.jena.riot.tokens.Token peekToken()>();

        $r4 = virtualinvoke r0.<org.apache.jena.riot.lang.LangTurtleBase: org.apache.jena.riot.tokens.Token peekToken()>();

        $r5 = virtualinvoke $r4.<org.apache.jena.riot.tokens.Token: java.lang.String getImage()>();

        virtualinvoke r0.<org.apache.jena.riot.lang.LangTurtleBase: org.apache.jena.riot.tokens.Token nextToken()>();

        $z2 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>("true");

        if $z2 == 0 goto label2;

        $r13 = <com.hp.hpl.jena.sparql.graph.NodeConst: com.hp.hpl.jena.graph.Node nodeTrue>;

        return $r13;

     label2:
        $z3 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>("false");

        if $z3 == 0 goto label3;

        $r12 = <com.hp.hpl.jena.sparql.graph.NodeConst: com.hp.hpl.jena.graph.Node nodeFalse>;

        return $r12;

     label3:
        $z4 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>("a");

        if $z4 == 0 goto label4;

        $r11 = newarray (java.lang.Object)[0];

        virtualinvoke r0.<org.apache.jena.riot.lang.LangTurtleBase: void exception(org.apache.jena.riot.tokens.Token,java.lang.String,java.lang.Object[])>($r3, "Keyword \'a\' not legal at this point", $r11);

     label4:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unrecognized keyword: ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        $r10 = newarray (java.lang.Object)[0];

        virtualinvoke r0.<org.apache.jena.riot.lang.LangTurtleBase: void exception(org.apache.jena.riot.tokens.Token,java.lang.String,java.lang.Object[])>($r3, $r9, $r10);

     label5:
        $r15 = virtualinvoke r0.<org.apache.jena.riot.lang.LangTurtleBase: com.hp.hpl.jena.graph.Node triplesNodeCompound()>();

        return $r15;
    }

    protected final boolean peekTriplesNodeCompound()
    {
        org.apache.jena.riot.lang.LangTurtleBase r0;
        org.apache.jena.riot.tokens.TokenType $r1, $r2, $r3;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.jena.riot.lang.LangTurtleBase;

        $r1 = <org.apache.jena.riot.tokens.TokenType: org.apache.jena.riot.tokens.TokenType LBRACKET>;

        $z0 = virtualinvoke r0.<org.apache.jena.riot.lang.LangTurtleBase: boolean lookingAt(org.apache.jena.riot.tokens.TokenType)>($r1);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $r2 = <org.apache.jena.riot.tokens.TokenType: org.apache.jena.riot.tokens.TokenType LBRACE>;

        $z1 = virtualinvoke r0.<org.apache.jena.riot.lang.LangTurtleBase: boolean lookingAt(org.apache.jena.riot.tokens.TokenType)>($r2);

        if $z1 == 0 goto label2;

        return 1;

     label2:
        $r3 = <org.apache.jena.riot.tokens.TokenType: org.apache.jena.riot.tokens.TokenType LPAREN>;

        $z2 = virtualinvoke r0.<org.apache.jena.riot.lang.LangTurtleBase: boolean lookingAt(org.apache.jena.riot.tokens.TokenType)>($r3);

        if $z2 == 0 goto label3;

        return 1;

     label3:
        return 0;
    }

    protected final com.hp.hpl.jena.graph.Node triplesNodeCompound()
    {
        java.lang.Object[] $r10;
        com.hp.hpl.jena.graph.Node $r11, $r12, $r13;
        org.apache.jena.riot.tokens.Token $r4, $r7;
        org.apache.jena.riot.lang.LangTurtleBase r0;
        java.lang.String $r9;
        boolean $z0, $z1, $z2;
        org.apache.jena.riot.tokens.TokenType $r1, $r2, $r3;
        java.lang.StringBuilder $r5, $r6, $r8;

        r0 := @this: org.apache.jena.riot.lang.LangTurtleBase;

        $r1 = <org.apache.jena.riot.tokens.TokenType: org.apache.jena.riot.tokens.TokenType LBRACKET>;

        $z0 = virtualinvoke r0.<org.apache.jena.riot.lang.LangTurtleBase: boolean lookingAt(org.apache.jena.riot.tokens.TokenType)>($r1);

        if $z0 == 0 goto label1;

        $r13 = virtualinvoke r0.<org.apache.jena.riot.lang.LangTurtleBase: com.hp.hpl.jena.graph.Node triplesBlankNode()>();

        return $r13;

     label1:
        $r2 = <org.apache.jena.riot.tokens.TokenType: org.apache.jena.riot.tokens.TokenType LBRACE>;

        $z1 = virtualinvoke r0.<org.apache.jena.riot.lang.LangTurtleBase: boolean lookingAt(org.apache.jena.riot.tokens.TokenType)>($r2);

        if $z1 == 0 goto label2;

        $r12 = virtualinvoke r0.<org.apache.jena.riot.lang.LangTurtleBase: com.hp.hpl.jena.graph.Node triplesFormula()>();

        return $r12;

     label2:
        $r3 = <org.apache.jena.riot.tokens.TokenType: org.apache.jena.riot.tokens.TokenType LPAREN>;

        $z2 = virtualinvoke r0.<org.apache.jena.riot.lang.LangTurtleBase: boolean lookingAt(org.apache.jena.riot.tokens.TokenType)>($r3);

        if $z2 == 0 goto label3;

        $r11 = virtualinvoke r0.<org.apache.jena.riot.lang.LangTurtleBase: com.hp.hpl.jena.graph.Node triplesList()>();

        return $r11;

     label3:
        $r4 = virtualinvoke r0.<org.apache.jena.riot.lang.LangTurtleBase: org.apache.jena.riot.tokens.Token peekToken()>();

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unrecognized: ");

        $r7 = virtualinvoke r0.<org.apache.jena.riot.lang.LangTurtleBase: org.apache.jena.riot.tokens.Token peekToken()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        $r10 = newarray (java.lang.Object)[0];

        virtualinvoke r0.<org.apache.jena.riot.lang.LangTurtleBase: void exception(org.apache.jena.riot.tokens.Token,java.lang.String,java.lang.Object[])>($r4, $r9, $r10);

        return null;
    }

    protected final com.hp.hpl.jena.graph.Node triplesBlankNode()
    {
        org.apache.jena.riot.lang.LangTurtleBase r0;
        org.apache.jena.riot.system.ParserProfile $r2;
        long $l0, $l1;
        com.hp.hpl.jena.graph.Node $r3, $r4;
        org.apache.jena.riot.tokens.Token $r1;

        r0 := @this: org.apache.jena.riot.lang.LangTurtleBase;

        $r1 = virtualinvoke r0.<org.apache.jena.riot.lang.LangTurtleBase: org.apache.jena.riot.tokens.Token nextToken()>();

        $r2 = r0.<org.apache.jena.riot.lang.LangTurtleBase: org.apache.jena.riot.system.ParserProfile profile>;

        $r3 = r0.<org.apache.jena.riot.lang.LangTurtleBase: com.hp.hpl.jena.graph.Node currentGraph>;

        $l0 = virtualinvoke $r1.<org.apache.jena.riot.tokens.Token: long getLine()>();

        $l1 = virtualinvoke $r1.<org.apache.jena.riot.tokens.Token: long getColumn()>();

        $r4 = interfaceinvoke $r2.<org.apache.jena.riot.system.ParserProfile: com.hp.hpl.jena.graph.Node createBlankNode(com.hp.hpl.jena.graph.Node,long,long)>($r3, $l0, $l1);

        virtualinvoke r0.<org.apache.jena.riot.lang.LangTurtleBase: void triplesBlankNode(com.hp.hpl.jena.graph.Node)>($r4);

        return $r4;
    }

    protected final void triplesBlankNode(com.hp.hpl.jena.graph.Node)
    {
        org.apache.jena.riot.lang.LangTurtleBase r0;
        org.apache.jena.riot.tokens.TokenType $r1;
        com.hp.hpl.jena.graph.Node r2;
        boolean $z0;

        r0 := @this: org.apache.jena.riot.lang.LangTurtleBase;

        r2 := @parameter0: com.hp.hpl.jena.graph.Node;

        $z0 = virtualinvoke r0.<org.apache.jena.riot.lang.LangTurtleBase: boolean peekPredicate()>();

        if $z0 == 0 goto label1;

        virtualinvoke r0.<org.apache.jena.riot.lang.LangTurtleBase: void predicateObjectList(com.hp.hpl.jena.graph.Node)>(r2);

     label1:
        $r1 = <org.apache.jena.riot.tokens.TokenType: org.apache.jena.riot.tokens.TokenType RBRACKET>;

        virtualinvoke r0.<org.apache.jena.riot.lang.LangTurtleBase: void expect(java.lang.String,org.apache.jena.riot.tokens.TokenType)>("Triples not terminated properly in []-list", $r1);

        return;
    }

    protected final com.hp.hpl.jena.graph.Node triplesFormula()
    {
        org.apache.jena.riot.lang.LangTurtleBase r0;
        java.lang.Object[] $r2;
        org.apache.jena.riot.tokens.Token $r1;

        r0 := @this: org.apache.jena.riot.lang.LangTurtleBase;

        $r1 = virtualinvoke r0.<org.apache.jena.riot.lang.LangTurtleBase: org.apache.jena.riot.tokens.Token peekToken()>();

        $r2 = newarray (java.lang.Object)[0];

        virtualinvoke r0.<org.apache.jena.riot.lang.LangTurtleBase: void exception(org.apache.jena.riot.tokens.Token,java.lang.String,java.lang.Object[])>($r1, "Not implemented (formulae, graph literals)", $r2);

        return null;
    }

    protected final com.hp.hpl.jena.graph.Node triplesList()
    {
        java.lang.Object[] $r10, $r12;
        com.hp.hpl.jena.graph.Node $r3, $r4, $r5, $r6, $r7, $r8, $r9, r13, r14;
        org.apache.jena.riot.tokens.Token $r1, $r11;
        org.apache.jena.riot.lang.LangTurtleBase r0;
        boolean $z0, $z1, $z2;
        org.apache.jena.riot.tokens.TokenType $r2;

        r0 := @this: org.apache.jena.riot.lang.LangTurtleBase;

        virtualinvoke r0.<org.apache.jena.riot.lang.LangTurtleBase: org.apache.jena.riot.tokens.Token nextToken()>();

        r13 = null;

        r14 = null;

        virtualinvoke r0.<org.apache.jena.riot.lang.LangTurtleBase: void startList()>();

     label1:
        $r1 = virtualinvoke r0.<org.apache.jena.riot.lang.LangTurtleBase: org.apache.jena.riot.tokens.Token peekToken()>();

        $z0 = virtualinvoke r0.<org.apache.jena.riot.lang.LangTurtleBase: boolean eof()>();

        if $z0 == 0 goto label2;

        $r11 = virtualinvoke r0.<org.apache.jena.riot.lang.LangTurtleBase: org.apache.jena.riot.tokens.Token peekToken()>();

        $r12 = newarray (java.lang.Object)[0];

        virtualinvoke r0.<org.apache.jena.riot.lang.LangTurtleBase: void exception(org.apache.jena.riot.tokens.Token,java.lang.String,java.lang.Object[])>($r11, "Unterminated list", $r12);

     label2:
        $r2 = <org.apache.jena.riot.tokens.TokenType: org.apache.jena.riot.tokens.TokenType RPAREN>;

        $z1 = virtualinvoke r0.<org.apache.jena.riot.lang.LangTurtleBase: boolean lookingAt(org.apache.jena.riot.tokens.TokenType)>($r2);

        if $z1 == 0 goto label3;

        virtualinvoke r0.<org.apache.jena.riot.lang.LangTurtleBase: org.apache.jena.riot.tokens.Token nextToken()>();

        goto label8;

     label3:
        $r3 = virtualinvoke r0.<org.apache.jena.riot.lang.LangTurtleBase: com.hp.hpl.jena.graph.Node triplesNode()>();

        if $r3 != null goto label4;

        $r10 = newarray (java.lang.Object)[0];

        virtualinvoke r0.<org.apache.jena.riot.lang.LangTurtleBase: void exception(org.apache.jena.riot.tokens.Token,java.lang.String,java.lang.Object[])>($r1, "Malformed list", $r10);

     label4:
        $r4 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createAnon()>();

        if r14 != null goto label5;

        r14 = $r4;

     label5:
        if r13 == null goto label6;

        $r9 = <com.hp.hpl.jena.sparql.graph.NodeConst: com.hp.hpl.jena.graph.Node nodeRest>;

        virtualinvoke r0.<org.apache.jena.riot.lang.LangTurtleBase: void checkEmitTriple(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r13, $r9, $r4);

     label6:
        r13 = $r4;

        $r5 = <com.hp.hpl.jena.sparql.graph.NodeConst: com.hp.hpl.jena.graph.Node nodeFirst>;

        virtualinvoke r0.<org.apache.jena.riot.lang.LangTurtleBase: void checkEmitTriple(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r4, $r5, $r3);

        $z2 = virtualinvoke r0.<org.apache.jena.riot.lang.LangTurtleBase: boolean moreTokens()>();

        if $z2 != 0 goto label7;

        goto label8;

     label7:
        goto label1;

     label8:
        if r13 != null goto label9;

        $r8 = <com.hp.hpl.jena.sparql.graph.NodeConst: com.hp.hpl.jena.graph.Node nodeNil>;

        return $r8;

     label9:
        $r7 = <com.hp.hpl.jena.sparql.graph.NodeConst: com.hp.hpl.jena.graph.Node nodeRest>;

        $r6 = <com.hp.hpl.jena.sparql.graph.NodeConst: com.hp.hpl.jena.graph.Node nodeNil>;

        virtualinvoke r0.<org.apache.jena.riot.lang.LangTurtleBase: void checkEmitTriple(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r13, $r7, $r6);

        virtualinvoke r0.<org.apache.jena.riot.lang.LangTurtleBase: void finishList()>();

        return r14;
    }

    protected void finishList()
    {
        org.apache.jena.riot.lang.LangTurtleBase r0;

        r0 := @this: org.apache.jena.riot.lang.LangTurtleBase;

        return;
    }

    protected void startList()
    {
        org.apache.jena.riot.lang.LangTurtleBase r0;

        r0 := @this: org.apache.jena.riot.lang.LangTurtleBase;

        return;
    }

    protected final void checkEmitTriple(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node)
    {
        org.apache.jena.riot.lang.LangTurtleBase r0;
        com.hp.hpl.jena.graph.Node r1, r2, r3;

        r0 := @this: org.apache.jena.riot.lang.LangTurtleBase;

        r1 := @parameter0: com.hp.hpl.jena.graph.Node;

        r2 := @parameter1: com.hp.hpl.jena.graph.Node;

        r3 := @parameter2: com.hp.hpl.jena.graph.Node;

        virtualinvoke r0.<org.apache.jena.riot.lang.LangTurtleBase: void emit(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r1, r2, r3);

        return;
    }

    protected final com.hp.hpl.jena.graph.Node tokenAsNode(org.apache.jena.riot.tokens.Token)
    {
        org.apache.jena.riot.lang.LangTurtleBase r0;
        org.apache.jena.riot.system.ParserProfile $r3;
        com.hp.hpl.jena.graph.Node $r2, $r4;
        org.apache.jena.riot.tokens.Token r1;

        r0 := @this: org.apache.jena.riot.lang.LangTurtleBase;

        r1 := @parameter0: org.apache.jena.riot.tokens.Token;

        $r3 = r0.<org.apache.jena.riot.lang.LangTurtleBase: org.apache.jena.riot.system.ParserProfile profile>;

        $r2 = r0.<org.apache.jena.riot.lang.LangTurtleBase: com.hp.hpl.jena.graph.Node currentGraph>;

        $r4 = interfaceinvoke $r3.<org.apache.jena.riot.system.ParserProfile: com.hp.hpl.jena.graph.Node create(com.hp.hpl.jena.graph.Node,org.apache.jena.riot.tokens.Token)>($r2, r1);

        return $r4;
    }

    static void <clinit>()
    {
        com.hp.hpl.jena.graph.Node $r1, $r2;
        com.hp.hpl.jena.rdf.model.Property $r0;

        <org.apache.jena.riot.lang.LangTurtleBase: boolean VERBOSE> = 0;

        <org.apache.jena.riot.lang.LangTurtleBase: java.lang.String KW_FALSE> = "false";

        <org.apache.jena.riot.lang.LangTurtleBase: java.lang.String KW_TRUE> = "true";

        <org.apache.jena.riot.lang.LangTurtleBase: java.lang.String KW_LOG_IMPLIES> = "=>";

        <org.apache.jena.riot.lang.LangTurtleBase: java.lang.String KW_SAME_AS> = "=";

        <org.apache.jena.riot.lang.LangTurtleBase: java.lang.String KW_A> = "a";

        $r0 = <com.hp.hpl.jena.vocabulary.OWL: com.hp.hpl.jena.rdf.model.Property sameAs>;

        $r1 = interfaceinvoke $r0.<com.hp.hpl.jena.rdf.model.Property: com.hp.hpl.jena.graph.Node asNode()>();

        <org.apache.jena.riot.lang.LangTurtleBase: com.hp.hpl.jena.graph.Node nodeSameAs> = $r1;

        $r2 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createURI(java.lang.String)>("http://www.w3.org/2000/10/swap/log#implies");

        <org.apache.jena.riot.lang.LangTurtleBase: com.hp.hpl.jena.graph.Node nodeLogImplies> = $r2;

        return;
    }
}
