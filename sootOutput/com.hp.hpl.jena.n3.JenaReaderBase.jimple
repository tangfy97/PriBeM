public abstract class com.hp.hpl.jena.n3.JenaReaderBase extends java.lang.Object implements com.hp.hpl.jena.rdf.model.RDFReader
{
    protected com.hp.hpl.jena.rdf.model.RDFErrorHandler errorHandler;

    public void <init>()
    {
        com.hp.hpl.jena.n3.JenaReaderBase r0;

        r0 := @this: com.hp.hpl.jena.n3.JenaReaderBase;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.hp.hpl.jena.n3.JenaReaderBase: com.hp.hpl.jena.rdf.model.RDFErrorHandler errorHandler> = null;

        return;
    }

    public final void read(com.hp.hpl.jena.rdf.model.Model, java.io.Reader, java.lang.String)
    {
        com.hp.hpl.jena.n3.JenaReaderBase r0;
        com.hp.hpl.jena.rdf.model.Model r2;
        java.io.Reader r1;
        java.lang.String r3;

        r0 := @this: com.hp.hpl.jena.n3.JenaReaderBase;

        r2 := @parameter0: com.hp.hpl.jena.rdf.model.Model;

        r1 := @parameter1: java.io.Reader;

        r3 := @parameter2: java.lang.String;

        virtualinvoke r0.<com.hp.hpl.jena.n3.JenaReaderBase: void checkReader(java.io.Reader)>(r1);

        specialinvoke r0.<com.hp.hpl.jena.n3.JenaReaderBase: void readImpl(com.hp.hpl.jena.rdf.model.Model,java.io.Reader,java.lang.String)>(r2, r1, r3);

        return;
    }

    public final void read(com.hp.hpl.jena.rdf.model.Model, java.lang.String)
    {
        com.hp.hpl.jena.shared.JenaException $r15, $r16;
        java.net.URL $r0;
        java.net.URLConnection $r2;
        java.lang.String r1, $r3;
        org.slf4j.Logger $r6;
        com.hp.hpl.jena.n3.JenaReaderBase r4;
        java.io.InputStreamReader $r8, $r10;
        java.lang.Exception $r12;
        com.hp.hpl.jena.rdf.model.Model r7;
        com.hp.hpl.jena.rdf.model.RDFErrorHandler $r13, $r14, $r17, $r18;
        java.lang.Class $r5;
        java.io.InputStream $r9, $r11;

        r4 := @this: com.hp.hpl.jena.n3.JenaReaderBase;

        r7 := @parameter0: com.hp.hpl.jena.rdf.model.Model;

        r1 := @parameter1: java.lang.String;

     label1:
        $r0 = new java.net.URL;

        specialinvoke $r0.<java.net.URL: void <init>(java.lang.String)>(r1);

        $r2 = virtualinvoke $r0.<java.net.URL: java.net.URLConnection openConnection()>();

        $r3 = virtualinvoke $r2.<java.net.URLConnection: java.lang.String getContentEncoding()>();

        if $r3 != null goto label2;

        $r10 = new java.io.InputStreamReader;

        $r11 = virtualinvoke $r2.<java.net.URLConnection: java.io.InputStream getInputStream()>();

        specialinvoke $r10.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>($r11, "utf-8");

        virtualinvoke r4.<com.hp.hpl.jena.n3.JenaReaderBase: void read(com.hp.hpl.jena.rdf.model.Model,java.io.Reader,java.lang.String)>(r7, $r10, r1);

        goto label3;

     label2:
        $r5 = virtualinvoke r4.<java.lang.Object: java.lang.Class getClass()>();

        $r6 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>($r5);

        interfaceinvoke $r6.<org.slf4j.Logger: void warn(java.lang.String)>("URL content is not UTF-8");

        $r8 = new java.io.InputStreamReader;

        $r9 = virtualinvoke $r2.<java.net.URLConnection: java.io.InputStream getInputStream()>();

        specialinvoke $r8.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>($r9, $r3);

        virtualinvoke r4.<com.hp.hpl.jena.n3.JenaReaderBase: void read(com.hp.hpl.jena.rdf.model.Model,java.io.Reader,java.lang.String)>(r7, $r8, r1);

     label3:
        goto label8;

     label4:
        $r16 := @caughtexception;

        $r17 = r4.<com.hp.hpl.jena.n3.JenaReaderBase: com.hp.hpl.jena.rdf.model.RDFErrorHandler errorHandler>;

        if $r17 != null goto label5;

        throw $r16;

     label5:
        $r18 = r4.<com.hp.hpl.jena.n3.JenaReaderBase: com.hp.hpl.jena.rdf.model.RDFErrorHandler errorHandler>;

        interfaceinvoke $r18.<com.hp.hpl.jena.rdf.model.RDFErrorHandler: void error(java.lang.Exception)>($r16);

        goto label8;

     label6:
        $r12 := @caughtexception;

        $r13 = r4.<com.hp.hpl.jena.n3.JenaReaderBase: com.hp.hpl.jena.rdf.model.RDFErrorHandler errorHandler>;

        if $r13 != null goto label7;

        $r15 = new com.hp.hpl.jena.shared.JenaException;

        specialinvoke $r15.<com.hp.hpl.jena.shared.JenaException: void <init>(java.lang.Throwable)>($r12);

        throw $r15;

     label7:
        $r14 = r4.<com.hp.hpl.jena.n3.JenaReaderBase: com.hp.hpl.jena.rdf.model.RDFErrorHandler errorHandler>;

        interfaceinvoke $r14.<com.hp.hpl.jena.rdf.model.RDFErrorHandler: void error(java.lang.Exception)>($r12);

     label8:
        return;

        catch com.hp.hpl.jena.shared.JenaException from label1 to label3 with label4;
        catch java.lang.Exception from label1 to label3 with label6;
    }

    public final void read(com.hp.hpl.jena.rdf.model.Model, java.io.InputStream, java.lang.String)
    {
        com.hp.hpl.jena.n3.JenaReaderBase r0;
        com.hp.hpl.jena.rdf.model.Model r1;
        java.io.BufferedReader $r3;
        java.lang.String r4;
        java.io.InputStream r2;

        r0 := @this: com.hp.hpl.jena.n3.JenaReaderBase;

        r1 := @parameter0: com.hp.hpl.jena.rdf.model.Model;

        r2 := @parameter1: java.io.InputStream;

        r4 := @parameter2: java.lang.String;

        $r3 = staticinvoke <com.hp.hpl.jena.util.FileUtils: java.io.BufferedReader asBufferedUTF8(java.io.InputStream)>(r2);

        specialinvoke r0.<com.hp.hpl.jena.n3.JenaReaderBase: void readImpl(com.hp.hpl.jena.rdf.model.Model,java.io.Reader,java.lang.String)>(r1, $r3, r4);

        return;
    }

    public final com.hp.hpl.jena.rdf.model.RDFErrorHandler setErrorHandler(com.hp.hpl.jena.rdf.model.RDFErrorHandler)
    {
        com.hp.hpl.jena.n3.JenaReaderBase r0;
        com.hp.hpl.jena.rdf.model.RDFErrorHandler r1, r2;

        r0 := @this: com.hp.hpl.jena.n3.JenaReaderBase;

        r2 := @parameter0: com.hp.hpl.jena.rdf.model.RDFErrorHandler;

        r1 = r0.<com.hp.hpl.jena.n3.JenaReaderBase: com.hp.hpl.jena.rdf.model.RDFErrorHandler errorHandler>;

        r0.<com.hp.hpl.jena.n3.JenaReaderBase: com.hp.hpl.jena.rdf.model.RDFErrorHandler errorHandler> = r2;

        return r1;
    }

    public final java.lang.Object setProperty(java.lang.String, java.lang.Object)
    {
        com.hp.hpl.jena.n3.JenaReaderBase r0;
        java.lang.Object r2;
        java.lang.String r1;

        r0 := @this: com.hp.hpl.jena.n3.JenaReaderBase;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

        return null;
    }

    protected void checkReader(java.io.Reader)
    {
        org.slf4j.Logger $r5;
        com.hp.hpl.jena.n3.JenaReaderBase r3;
        java.io.Reader r0;
        java.lang.Class $r4;
        java.io.FileReader r1;
        java.lang.String $r2;
        boolean $z0, $z1;

        r3 := @this: com.hp.hpl.jena.n3.JenaReaderBase;

        r0 := @parameter0: java.io.Reader;

        $z0 = r0 instanceof java.io.FileReader;

        if $z0 == 0 goto label1;

        r1 = (java.io.FileReader) r0;

        $r2 = virtualinvoke r1.<java.io.FileReader: java.lang.String getEncoding()>();

        $z1 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("utf-8");

        if $z1 == 0 goto label1;

        $r4 = virtualinvoke r3.<java.lang.Object: java.lang.Class getClass()>();

        $r5 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>($r4);

        interfaceinvoke $r5.<org.slf4j.Logger: void warn(java.lang.String)>("FileReader is not UTF-8");

     label1:
        return;
    }

    private void readImpl(com.hp.hpl.jena.rdf.model.Model, java.io.Reader, java.lang.String)
    {
        java.lang.Throwable $r5;
        com.hp.hpl.jena.shared.JenaException $r11, $r12;
        java.lang.String r16;
        com.hp.hpl.jena.n3.JenaReaderBase r2;
        com.hp.hpl.jena.graph.GraphEvents $r1, $r4, $r6, $r10, $r15;
        java.io.Reader r3;
        java.lang.Exception $r7;
        com.hp.hpl.jena.rdf.model.Model r0;
        com.hp.hpl.jena.rdf.model.RDFErrorHandler $r8, $r9, $r13, $r14;

        r2 := @this: com.hp.hpl.jena.n3.JenaReaderBase;

        r0 := @parameter0: com.hp.hpl.jena.rdf.model.Model;

        r3 := @parameter1: java.io.Reader;

        r16 := @parameter2: java.lang.String;

        if r16 == null goto label01;

        r16 = staticinvoke <com.hp.hpl.jena.n3.IRIResolver: java.lang.String resolveGlobal(java.lang.String)>(r16);

     label01:
        $r1 = <com.hp.hpl.jena.graph.GraphEvents: com.hp.hpl.jena.graph.GraphEvents startRead>;

        interfaceinvoke r0.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.rdf.model.Model notifyEvent(java.lang.Object)>($r1);

        virtualinvoke r2.<com.hp.hpl.jena.n3.JenaReaderBase: void readWorker(com.hp.hpl.jena.rdf.model.Model,java.io.Reader,java.lang.String)>(r0, r3, r16);

     label02:
        $r4 = <com.hp.hpl.jena.graph.GraphEvents: com.hp.hpl.jena.graph.GraphEvents finishRead>;

        interfaceinvoke r0.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.rdf.model.Model notifyEvent(java.lang.Object)>($r4);

        goto label11;

     label03:
        $r12 := @caughtexception;

        $r13 = r2.<com.hp.hpl.jena.n3.JenaReaderBase: com.hp.hpl.jena.rdf.model.RDFErrorHandler errorHandler>;

        if $r13 != null goto label04;

        throw $r12;

     label04:
        $r14 = r2.<com.hp.hpl.jena.n3.JenaReaderBase: com.hp.hpl.jena.rdf.model.RDFErrorHandler errorHandler>;

        interfaceinvoke $r14.<com.hp.hpl.jena.rdf.model.RDFErrorHandler: void error(java.lang.Exception)>($r12);

     label05:
        $r15 = <com.hp.hpl.jena.graph.GraphEvents: com.hp.hpl.jena.graph.GraphEvents finishRead>;

        interfaceinvoke r0.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.rdf.model.Model notifyEvent(java.lang.Object)>($r15);

        goto label11;

     label06:
        $r7 := @caughtexception;

        $r8 = r2.<com.hp.hpl.jena.n3.JenaReaderBase: com.hp.hpl.jena.rdf.model.RDFErrorHandler errorHandler>;

        if $r8 != null goto label07;

        $r11 = new com.hp.hpl.jena.shared.JenaException;

        specialinvoke $r11.<com.hp.hpl.jena.shared.JenaException: void <init>(java.lang.Throwable)>($r7);

        throw $r11;

     label07:
        $r9 = r2.<com.hp.hpl.jena.n3.JenaReaderBase: com.hp.hpl.jena.rdf.model.RDFErrorHandler errorHandler>;

        interfaceinvoke $r9.<com.hp.hpl.jena.rdf.model.RDFErrorHandler: void error(java.lang.Exception)>($r7);

     label08:
        $r10 = <com.hp.hpl.jena.graph.GraphEvents: com.hp.hpl.jena.graph.GraphEvents finishRead>;

        interfaceinvoke r0.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.rdf.model.Model notifyEvent(java.lang.Object)>($r10);

        goto label11;

     label09:
        $r5 := @caughtexception;

     label10:
        $r6 = <com.hp.hpl.jena.graph.GraphEvents: com.hp.hpl.jena.graph.GraphEvents finishRead>;

        interfaceinvoke r0.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.rdf.model.Model notifyEvent(java.lang.Object)>($r6);

        throw $r5;

     label11:
        return;

        catch com.hp.hpl.jena.shared.JenaException from label01 to label02 with label03;
        catch java.lang.Exception from label01 to label02 with label06;
        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label03 to label05 with label09;
        catch java.lang.Throwable from label06 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    protected abstract void readWorker(com.hp.hpl.jena.rdf.model.Model, java.io.Reader, java.lang.String) throws java.lang.Exception;
}
