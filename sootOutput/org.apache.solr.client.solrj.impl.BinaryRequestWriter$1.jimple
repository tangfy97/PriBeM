class org.apache.solr.client.solrj.impl.BinaryRequestWriter$1 extends java.lang.Object implements org.apache.solr.common.util.ContentStream
{
    final org.apache.solr.client.solrj.impl.BinaryRequestWriter$BAOS val$baos;
    final org.apache.solr.client.solrj.impl.BinaryRequestWriter this$0;

    void <init>(org.apache.solr.client.solrj.impl.BinaryRequestWriter, org.apache.solr.client.solrj.impl.BinaryRequestWriter$BAOS)
    {
        org.apache.solr.client.solrj.impl.BinaryRequestWriter$1 r0;
        org.apache.solr.client.solrj.impl.BinaryRequestWriter r1;
        org.apache.solr.client.solrj.impl.BinaryRequestWriter$BAOS r2;

        r0 := @this: org.apache.solr.client.solrj.impl.BinaryRequestWriter$1;

        r1 := @parameter0: org.apache.solr.client.solrj.impl.BinaryRequestWriter;

        r2 := @parameter1: org.apache.solr.client.solrj.impl.BinaryRequestWriter$BAOS;

        r0.<org.apache.solr.client.solrj.impl.BinaryRequestWriter$1: org.apache.solr.client.solrj.impl.BinaryRequestWriter this$0> = r1;

        r0.<org.apache.solr.client.solrj.impl.BinaryRequestWriter$1: org.apache.solr.client.solrj.impl.BinaryRequestWriter$BAOS val$baos> = r2;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public java.lang.String getName()
    {
        org.apache.solr.client.solrj.impl.BinaryRequestWriter$1 r0;

        r0 := @this: org.apache.solr.client.solrj.impl.BinaryRequestWriter$1;

        return null;
    }

    public java.lang.String getSourceInfo()
    {
        org.apache.solr.client.solrj.impl.BinaryRequestWriter$1 r0;

        r0 := @this: org.apache.solr.client.solrj.impl.BinaryRequestWriter$1;

        return "javabin";
    }

    public java.lang.String getContentType()
    {
        org.apache.solr.client.solrj.impl.BinaryRequestWriter$1 r0;

        r0 := @this: org.apache.solr.client.solrj.impl.BinaryRequestWriter$1;

        return "application/javabin";
    }

    public java.lang.Long getSize()
    {
        java.lang.Long $r0;
        org.apache.solr.client.solrj.impl.BinaryRequestWriter$BAOS $r2;
        int $i0;
        long $l1;
        org.apache.solr.client.solrj.impl.BinaryRequestWriter$1 r1;

        r1 := @this: org.apache.solr.client.solrj.impl.BinaryRequestWriter$1;

        $r0 = new java.lang.Long;

        $r2 = r1.<org.apache.solr.client.solrj.impl.BinaryRequestWriter$1: org.apache.solr.client.solrj.impl.BinaryRequestWriter$BAOS val$baos>;

        $i0 = virtualinvoke $r2.<org.apache.solr.client.solrj.impl.BinaryRequestWriter$BAOS: int size()>();

        $l1 = (long) $i0;

        specialinvoke $r0.<java.lang.Long: void <init>(long)>($l1);

        return $r0;
    }

    public java.io.InputStream getStream()
    {
        byte[] $r3;
        java.io.ByteArrayInputStream $r0;
        org.apache.solr.client.solrj.impl.BinaryRequestWriter$BAOS $r2, $r4;
        int $i0;
        org.apache.solr.client.solrj.impl.BinaryRequestWriter$1 r1;

        r1 := @this: org.apache.solr.client.solrj.impl.BinaryRequestWriter$1;

        $r0 = new java.io.ByteArrayInputStream;

        $r2 = r1.<org.apache.solr.client.solrj.impl.BinaryRequestWriter$1: org.apache.solr.client.solrj.impl.BinaryRequestWriter$BAOS val$baos>;

        $r3 = virtualinvoke $r2.<org.apache.solr.client.solrj.impl.BinaryRequestWriter$BAOS: byte[] getbuf()>();

        $r4 = r1.<org.apache.solr.client.solrj.impl.BinaryRequestWriter$1: org.apache.solr.client.solrj.impl.BinaryRequestWriter$BAOS val$baos>;

        $i0 = virtualinvoke $r4.<org.apache.solr.client.solrj.impl.BinaryRequestWriter$BAOS: int size()>();

        specialinvoke $r0.<java.io.ByteArrayInputStream: void <init>(byte[],int,int)>($r3, 0, $i0);

        return $r0;
    }

    public java.io.Reader getReader()
    {
        java.lang.RuntimeException $r0;
        org.apache.solr.client.solrj.impl.BinaryRequestWriter$1 r1;

        r1 := @this: org.apache.solr.client.solrj.impl.BinaryRequestWriter$1;

        $r0 = new java.lang.RuntimeException;

        specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("No reader available . this is a binarystream");

        throw $r0;
    }
}
