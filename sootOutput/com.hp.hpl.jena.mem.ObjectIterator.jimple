public abstract class com.hp.hpl.jena.mem.ObjectIterator extends com.hp.hpl.jena.util.iterator.NiceIterator
{
    final java.util.Iterator domain;
    final java.util.Set seen;
    final java.util.List pending;

    public void <init>(java.util.Iterator)
    {
        java.util.Iterator r3;
        java.util.Set $r1;
        com.hp.hpl.jena.mem.ObjectIterator r0;
        java.util.ArrayList $r2;

        r0 := @this: com.hp.hpl.jena.mem.ObjectIterator;

        r3 := @parameter0: java.util.Iterator;

        specialinvoke r0.<com.hp.hpl.jena.util.iterator.NiceIterator: void <init>()>();

        $r1 = staticinvoke <com.hp.hpl.jena.util.CollectionFactory: java.util.Set createHashedSet()>();

        r0.<com.hp.hpl.jena.mem.ObjectIterator: java.util.Set seen> = $r1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<com.hp.hpl.jena.mem.ObjectIterator: java.util.List pending> = $r2;

        r0.<com.hp.hpl.jena.mem.ObjectIterator: java.util.Iterator domain> = r3;

        return;
    }

    protected abstract java.util.Iterator iteratorFor(java.lang.Object);

    public boolean hasNext()
    {
        java.util.Iterator $r3;
        com.hp.hpl.jena.mem.ObjectIterator r0;
        java.util.List $r1, $r2;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: com.hp.hpl.jena.mem.ObjectIterator;

     label1:
        $r1 = r0.<com.hp.hpl.jena.mem.ObjectIterator: java.util.List pending>;

        $z0 = interfaceinvoke $r1.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label2;

        $r3 = r0.<com.hp.hpl.jena.mem.ObjectIterator: java.util.Iterator domain>;

        $z2 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label2;

        virtualinvoke r0.<com.hp.hpl.jena.mem.ObjectIterator: void refillPending()>();

        goto label1;

     label2:
        $r2 = r0.<com.hp.hpl.jena.mem.ObjectIterator: java.util.List pending>;

        $z1 = interfaceinvoke $r2.<java.util.List: boolean isEmpty()>();

        if $z1 != 0 goto label3;

        $z3 = 1;

        goto label4;

     label3:
        $z3 = 0;

     label4:
        return $z3;
    }

    public com.hp.hpl.jena.graph.Node next()
    {
        com.hp.hpl.jena.mem.ObjectIterator r0;
        com.hp.hpl.jena.graph.Node $r4;
        java.util.List $r1, $r2;
        int $i0, $i1;
        java.lang.Object $r3;
        java.util.NoSuchElementException $r5;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.mem.ObjectIterator;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.mem.ObjectIterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        $r5 = new java.util.NoSuchElementException;

        specialinvoke $r5.<java.util.NoSuchElementException: void <init>(java.lang.String)>("ObjectIterator.next()");

        throw $r5;

     label1:
        $r2 = r0.<com.hp.hpl.jena.mem.ObjectIterator: java.util.List pending>;

        $r1 = r0.<com.hp.hpl.jena.mem.ObjectIterator: java.util.List pending>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        $i1 = $i0 - 1;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object remove(int)>($i1);

        $r4 = (com.hp.hpl.jena.graph.Node) $r3;

        return $r4;
    }

    protected void refillPending()
    {
        java.util.Iterator $r1, $r3;
        java.util.Set $r7;
        com.hp.hpl.jena.mem.ObjectIterator r0;
        com.hp.hpl.jena.graph.Node $r6, $r9;
        com.hp.hpl.jena.graph.Triple $r5;
        java.util.List $r8, $r10;
        java.lang.Object $r2, $r4;
        boolean $z0, $z1, $z2;

        r0 := @this: com.hp.hpl.jena.mem.ObjectIterator;

        $r1 = r0.<com.hp.hpl.jena.mem.ObjectIterator: java.util.Iterator domain>;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $z0 = $r2 instanceof com.hp.hpl.jena.graph.Node;

        if $z0 == 0 goto label1;

        $r10 = r0.<com.hp.hpl.jena.mem.ObjectIterator: java.util.List pending>;

        $r9 = (com.hp.hpl.jena.graph.Node) $r2;

        interfaceinvoke $r10.<java.util.List: boolean add(java.lang.Object)>($r9);

        goto label4;

     label1:
        $r3 = virtualinvoke r0.<com.hp.hpl.jena.mem.ObjectIterator: java.util.Iterator iteratorFor(java.lang.Object)>($r2);

     label2:
        $z1 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (com.hp.hpl.jena.graph.Triple) $r4;

        $r6 = virtualinvoke $r5.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getObject()>();

        $r7 = r0.<com.hp.hpl.jena.mem.ObjectIterator: java.util.Set seen>;

        $z2 = interfaceinvoke $r7.<java.util.Set: boolean add(java.lang.Object)>($r6);

        if $z2 == 0 goto label3;

        $r8 = r0.<com.hp.hpl.jena.mem.ObjectIterator: java.util.List pending>;

        interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>($r6);

     label3:
        goto label2;

     label4:
        return;
    }

    public void remove()
    {
        java.lang.UnsupportedOperationException $r0;
        com.hp.hpl.jena.mem.ObjectIterator r1;

        r1 := @this: com.hp.hpl.jena.mem.ObjectIterator;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("listObjects remove()");

        throw $r0;
    }

    public volatile java.lang.Object next()
    {
        com.hp.hpl.jena.mem.ObjectIterator r0;
        com.hp.hpl.jena.graph.Node $r1;

        r0 := @this: com.hp.hpl.jena.mem.ObjectIterator;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.mem.ObjectIterator: com.hp.hpl.jena.graph.Node next()>();

        return $r1;
    }
}
