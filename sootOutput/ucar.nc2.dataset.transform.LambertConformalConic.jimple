public class ucar.nc2.dataset.transform.LambertConformalConic extends ucar.nc2.dataset.transform.AbstractCoordTransBuilder
{

    public void <init>()
    {
        ucar.nc2.dataset.transform.LambertConformalConic r0;

        r0 := @this: ucar.nc2.dataset.transform.LambertConformalConic;

        specialinvoke r0.<ucar.nc2.dataset.transform.AbstractCoordTransBuilder: void <init>()>();

        return;
    }

    public java.lang.String getTransformName()
    {
        ucar.nc2.dataset.transform.LambertConformalConic r0;

        r0 := @this: ucar.nc2.dataset.transform.LambertConformalConic;

        return "lambert_conformal_conic";
    }

    public ucar.nc2.dataset.TransformType getTransformType()
    {
        ucar.nc2.dataset.TransformType $r0;
        ucar.nc2.dataset.transform.LambertConformalConic r1;

        r1 := @this: ucar.nc2.dataset.transform.LambertConformalConic;

        $r0 = <ucar.nc2.dataset.TransformType: ucar.nc2.dataset.TransformType Projection>;

        return $r0;
    }

    public ucar.nc2.dataset.CoordinateTransform makeCoordinateTransform(ucar.nc2.dataset.NetcdfDataset, ucar.nc2.Variable)
    {
        ucar.nc2.dataset.transform.LambertConformalConic r0;
        ucar.unidata.geoloc.ProjectionImpl r8;
        byte $b0, $b1, $b2;
        boolean $z0, $z1;
        ucar.nc2.Attribute $r2;
        double[] $r3;
        ucar.nc2.Variable r1;
        ucar.unidata.geoloc.Earth $r6;
        java.lang.String $r10;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, d9, d10, $d11, $d12, $d13, $d14, $d15, $d16;
        ucar.nc2.dataset.ProjectionCT $r9;
        ucar.unidata.geoloc.projection.proj4.LambertConformalConicEllipse $r7;
        ucar.unidata.geoloc.projection.LambertConformal $r5;
        ucar.nc2.dataset.NetcdfDataset r4;

        r0 := @this: ucar.nc2.dataset.transform.LambertConformalConic;

        r4 := @parameter0: ucar.nc2.dataset.NetcdfDataset;

        r1 := @parameter1: ucar.nc2.Variable;

        $r2 = virtualinvoke r1.<ucar.nc2.Variable: ucar.nc2.Attribute findAttribute(java.lang.String)>("standard_parallel");

        $r3 = virtualinvoke r0.<ucar.nc2.dataset.transform.LambertConformalConic: double[] readAttributeDouble2(ucar.nc2.Attribute)>($r2);

        if $r3 != null goto label1;

        return null;

     label1:
        $d0 = virtualinvoke r0.<ucar.nc2.dataset.transform.LambertConformalConic: double readAttributeDouble(ucar.nc2.Variable,java.lang.String,double)>(r1, "longitude_of_central_meridian", #NaN);

        $d1 = virtualinvoke r0.<ucar.nc2.dataset.transform.LambertConformalConic: double readAttributeDouble(ucar.nc2.Variable,java.lang.String,double)>(r1, "latitude_of_projection_origin", #NaN);

        $d2 = virtualinvoke r0.<ucar.nc2.dataset.transform.LambertConformalConic: double readAttributeDouble(ucar.nc2.Variable,java.lang.String,double)>(r1, "false_easting", 0.0);

        d9 = $d2;

        $d3 = virtualinvoke r0.<ucar.nc2.dataset.transform.LambertConformalConic: double readAttributeDouble(ucar.nc2.Variable,java.lang.String,double)>(r1, "false_northing", 0.0);

        d10 = $d3;

        $b0 = $d2 cmpl 0.0;

        if $b0 != 0 goto label2;

        $b2 = $d3 cmpl 0.0;

        if $b2 == 0 goto label3;

     label2:
        $d4 = staticinvoke <ucar.nc2.dataset.transform.LambertConformalConic: double getFalseEastingScaleFactor(ucar.nc2.dataset.NetcdfDataset,ucar.nc2.Variable)>(r4, r1);

        d9 = $d2 * $d4;

        d10 = $d3 * $d4;

     label3:
        $d11 = staticinvoke <ucar.unidata.geoloc.Earth: double getRadius()>();

        $d12 = virtualinvoke r0.<ucar.nc2.dataset.transform.LambertConformalConic: double readAttributeDouble(ucar.nc2.Variable,java.lang.String,double)>(r1, "earth_radius", $d11);

        $d13 = $d12 * 0.001;

        $d14 = virtualinvoke r0.<ucar.nc2.dataset.transform.LambertConformalConic: double readAttributeDouble(ucar.nc2.Variable,java.lang.String,double)>(r1, "semi_major_axis", #NaN);

        $d15 = virtualinvoke r0.<ucar.nc2.dataset.transform.LambertConformalConic: double readAttributeDouble(ucar.nc2.Variable,java.lang.String,double)>(r1, "semi_minor_axis", #NaN);

        $d16 = virtualinvoke r0.<ucar.nc2.dataset.transform.LambertConformalConic: double readAttributeDouble(ucar.nc2.Variable,java.lang.String,double)>(r1, "inverse_flattening", 0.0);

        $z1 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d14);

        if $z1 != 0 goto label5;

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d15);

        if $z0 == 0 goto label4;

        $b1 = $d16 cmpl 0.0;

        if $b1 == 0 goto label5;

     label4:
        $r6 = new ucar.unidata.geoloc.Earth;

        specialinvoke $r6.<ucar.unidata.geoloc.Earth: void <init>(double,double,double)>($d14, $d15, $d16);

        $r7 = new ucar.unidata.geoloc.projection.proj4.LambertConformalConicEllipse;

        $d8 = $r3[0];

        $d7 = $r3[1];

        specialinvoke $r7.<ucar.unidata.geoloc.projection.proj4.LambertConformalConicEllipse: void <init>(double,double,double,double,double,double,ucar.unidata.geoloc.Earth)>($d1, $d0, $d8, $d7, d9, d10, $r6);

        r8 = $r7;

        goto label6;

     label5:
        $r5 = new ucar.unidata.geoloc.projection.LambertConformal;

        $d6 = $r3[0];

        $d5 = $r3[1];

        specialinvoke $r5.<ucar.unidata.geoloc.projection.LambertConformal: void <init>(double,double,double,double,double,double,double)>($d1, $d0, $d6, $d5, d9, d10, $d13);

        r8 = $r5;

     label6:
        $r9 = new ucar.nc2.dataset.ProjectionCT;

        $r10 = virtualinvoke r1.<ucar.nc2.Variable: java.lang.String getShortName()>();

        specialinvoke $r9.<ucar.nc2.dataset.ProjectionCT: void <init>(java.lang.String,java.lang.String,ucar.unidata.geoloc.ProjectionImpl)>($r10, "FGDC", r8);

        return $r9;
    }
}
