public class org.apache.cxf.attachment.AttachmentSerializer extends java.lang.Object
{
    private static final java.lang.String DEFAULT_MULTIPART_TYPE;
    private org.apache.cxf.message.Message message;
    private java.lang.String bodyBoundary;
    private java.io.OutputStream out;
    private java.lang.String encoding;
    private java.lang.String multipartType;
    private java.util.Map rootHeaders;
    private boolean xop;
    private boolean writeOptionalTypeParameters;

    public void <init>(org.apache.cxf.message.Message)
    {
        org.apache.cxf.attachment.AttachmentSerializer r0;
        org.apache.cxf.message.Message r2;
        java.util.Map $r1;

        r0 := @this: org.apache.cxf.attachment.AttachmentSerializer;

        r2 := @parameter0: org.apache.cxf.message.Message;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>();

        r0.<org.apache.cxf.attachment.AttachmentSerializer: java.util.Map rootHeaders> = $r1;

        r0.<org.apache.cxf.attachment.AttachmentSerializer: boolean xop> = 1;

        r0.<org.apache.cxf.attachment.AttachmentSerializer: boolean writeOptionalTypeParameters> = 1;

        r0.<org.apache.cxf.attachment.AttachmentSerializer: org.apache.cxf.message.Message message> = r2;

        return;
    }

    public void <init>(org.apache.cxf.message.Message, java.lang.String, boolean, java.util.Map)
    {
        org.apache.cxf.attachment.AttachmentSerializer r0;
        org.apache.cxf.message.Message r2;
        java.util.Map $r1, r4;
        java.lang.String r3;
        boolean z0;

        r0 := @this: org.apache.cxf.attachment.AttachmentSerializer;

        r2 := @parameter0: org.apache.cxf.message.Message;

        r3 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        r4 := @parameter3: java.util.Map;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>();

        r0.<org.apache.cxf.attachment.AttachmentSerializer: java.util.Map rootHeaders> = $r1;

        r0.<org.apache.cxf.attachment.AttachmentSerializer: boolean xop> = 1;

        r0.<org.apache.cxf.attachment.AttachmentSerializer: boolean writeOptionalTypeParameters> = 1;

        r0.<org.apache.cxf.attachment.AttachmentSerializer: org.apache.cxf.message.Message message> = r2;

        r0.<org.apache.cxf.attachment.AttachmentSerializer: java.lang.String multipartType> = r3;

        r0.<org.apache.cxf.attachment.AttachmentSerializer: boolean writeOptionalTypeParameters> = z0;

        r0.<org.apache.cxf.attachment.AttachmentSerializer: java.util.Map rootHeaders> = r4;

        return;
    }

    public void writeProlog() throws java.io.IOException
    {
        byte[] $r19;
        java.util.Map $r14;
        java.lang.StringBuilder $r6, $r7, $r8, $r21, $r22, $r24, $r26, $r27, $r28, $r29, $r30, $r32, $r33, $r34, $r39, $r46, $r47, $r49, $r62, $r63, $r65, $r66;
        java.lang.StringBuffer $r16;
        java.lang.String $r1, $r4, $r10, $r12, $r13, $r17, $r18, $r23, $r25, $r31, $r35, $r36, $r38, $r40, r41, r42, $r43, $r44, r45, $r48, $r50, $r52, $r57, $r59, $r60, $r61;
        java.io.StringWriter $r64;
        boolean $z0, z1, $z2, $z3, $z4, $z5, $z6, $z7, $z9, $z10;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i7, $i9, $i11;
        java.io.OutputStream $r15, $r55;
        org.apache.cxf.attachment.AttachmentSerializer r0;
        org.apache.cxf.message.Message $r2, $r51, $r53, $r56;
        java.lang.Object $r3, $r54, $r58;

        r0 := @this: org.apache.cxf.attachment.AttachmentSerializer;

        $r1 = staticinvoke <org.apache.cxf.attachment.AttachmentUtil: java.lang.String getUniqueBoundaryValue()>();

        r0.<org.apache.cxf.attachment.AttachmentSerializer: java.lang.String bodyBoundary> = $r1;

        $r2 = r0.<org.apache.cxf.attachment.AttachmentSerializer: org.apache.cxf.message.Message message>;

        $r3 = interfaceinvoke $r2.<org.apache.cxf.message.Message: java.lang.Object get(java.lang.Object)>("Content-Type");

        r41 = (java.lang.String) $r3;

        $r4 = virtualinvoke r41.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\"", "\\\"");

        r42 = $r4;

        $i0 = virtualinvoke $r4.<java.lang.String: int indexOf(int)>(34);

        $i7 = (int) -1;

        if $i0 == $i7 goto label01;

        $i2 = virtualinvoke $r4.<java.lang.String: int indexOf(int)>(59);

        $i9 = (int) -1;

        if $i2 == $i9 goto label01;

        $i3 = virtualinvoke $r4.<java.lang.String: int indexOf(int)>(59);

        $r62 = new java.lang.StringBuilder;

        $r38 = virtualinvoke $r4.<java.lang.String: java.lang.String substring(int,int)>(0, $i3);

        specialinvoke $r62.<java.lang.StringBuilder: void <init>(java.lang.String)>($r38);

        $r39 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $i4 = virtualinvoke $r4.<java.lang.String: int length()>();

        $i5 = $i4 - 1;

        $r40 = virtualinvoke $r4.<java.lang.String: java.lang.String substring(int,int)>($i3, $i5);

        virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r40);

        r42 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.String toString()>();

     label01:
        $r43 = r0.<org.apache.cxf.attachment.AttachmentSerializer: java.lang.String multipartType>;

        if $r43 != null goto label02;

        $r44 = "multipart/related";

        goto label03;

     label02:
        $r44 = r0.<org.apache.cxf.attachment.AttachmentSerializer: java.lang.String multipartType>;

     label03:
        r45 = $r44;

        $r63 = new java.lang.StringBuilder;

        specialinvoke $r63.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r44);

        $z0 = r0.<org.apache.cxf.attachment.AttachmentSerializer: boolean xop>;

        if $z0 != 0 goto label04;

        $r35 = "multipart/related";

        $z6 = virtualinvoke $r35.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r44);

        if $z6 != 0 goto label04;

        $r36 = "multipart/related";

        $z7 = virtualinvoke $r36.<java.lang.String: boolean startsWith(java.lang.String)>($r44);

        if $z7 == 0 goto label05;

     label04:
        $z10 = 1;

        $z9 = 1;

        goto label06;

     label05:
        $z10 = 0;

        $z9 = 0;

     label06:
        z1 = $z9;

        if $z10 == 0 goto label08;

        $i1 = virtualinvoke r45.<java.lang.String: int indexOf(java.lang.String)>("type=");

        $i11 = (int) -1;

        if $i1 != $i11 goto label08;

        virtualinvoke $r63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; ");

        $z5 = r0.<org.apache.cxf.attachment.AttachmentSerializer: boolean xop>;

        if $z5 == 0 goto label07;

        virtualinvoke $r63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("type=\"application/xop+xml\"");

        goto label08;

     label07:
        $r33 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("type=\"");

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r42);

        virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

     label08:
        $r46 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; ");

        $r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("boundary=\"");

        $r48 = r0.<org.apache.cxf.attachment.AttachmentSerializer: java.lang.String bodyBoundary>;

        $r49 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r48);

        virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $r50 = specialinvoke r0.<org.apache.cxf.attachment.AttachmentSerializer: java.lang.String getHeaderValue(java.lang.String,java.lang.String)>("Content-ID", "root.message@cxf.apache.org");

        if z1 == 0 goto label09;

        $r29 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; ");

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("start=\"<");

        $r31 = staticinvoke <org.apache.cxf.attachment.AttachmentSerializer: java.lang.String checkAngleBrackets(java.lang.String)>($r50);

        $r32 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r31);

        virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">\"");

     label09:
        $z2 = r0.<org.apache.cxf.attachment.AttachmentSerializer: boolean writeOptionalTypeParameters>;

        if $z2 != 0 goto label10;

        $z4 = r0.<org.apache.cxf.attachment.AttachmentSerializer: boolean xop>;

        if $z4 == 0 goto label11;

     label10:
        $r6 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("start-info=\"");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r42);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

     label11:
        $r51 = r0.<org.apache.cxf.attachment.AttachmentSerializer: org.apache.cxf.message.Message message>;

        $r52 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r51.<org.apache.cxf.message.Message: java.lang.Object put(java.lang.Object,java.lang.Object)>("Content-Type", $r52);

        $r53 = r0.<org.apache.cxf.attachment.AttachmentSerializer: org.apache.cxf.message.Message message>;

        $r54 = interfaceinvoke $r53.<org.apache.cxf.message.Message: java.lang.Object getContent(java.lang.Class)>(class "Ljava/io/OutputStream;");

        $r55 = (java.io.OutputStream) $r54;

        r0.<org.apache.cxf.attachment.AttachmentSerializer: java.io.OutputStream out> = $r55;

        $r56 = r0.<org.apache.cxf.attachment.AttachmentSerializer: org.apache.cxf.message.Message message>;

        $r57 = <org.apache.cxf.message.Message: java.lang.String ENCODING>;

        $r58 = interfaceinvoke $r56.<org.apache.cxf.message.Message: java.lang.Object get(java.lang.Object)>($r57);

        $r59 = (java.lang.String) $r58;

        r0.<org.apache.cxf.attachment.AttachmentSerializer: java.lang.String encoding> = $r59;

        $r60 = r0.<org.apache.cxf.attachment.AttachmentSerializer: java.lang.String encoding>;

        if $r60 != null goto label12;

        r0.<org.apache.cxf.attachment.AttachmentSerializer: java.lang.String encoding> = "UTF-8";

     label12:
        $r64 = new java.io.StringWriter;

        specialinvoke $r64.<java.io.StringWriter: void <init>()>();

        virtualinvoke $r64.<java.io.StringWriter: void write(java.lang.String)>("--");

        $r10 = r0.<org.apache.cxf.attachment.AttachmentSerializer: java.lang.String bodyBoundary>;

        virtualinvoke $r64.<java.io.StringWriter: void write(java.lang.String)>($r10);

        $r65 = new java.lang.StringBuilder;

        specialinvoke $r65.<java.lang.StringBuilder: void <init>()>();

        $r12 = specialinvoke r0.<org.apache.cxf.attachment.AttachmentSerializer: java.lang.String getHeaderValue(java.lang.String,java.lang.String)>("Content-Type", null);

        if $r12 != null goto label15;

        $r66 = new java.lang.StringBuilder;

        specialinvoke $r66.<java.lang.StringBuilder: void <init>()>();

        $z3 = r0.<org.apache.cxf.attachment.AttachmentSerializer: boolean xop>;

        if $z3 == 0 goto label13;

        $r61 = "application/xop+xml";

        goto label14;

     label13:
        $r61 = "text/xml";

     label14:
        $r21 = virtualinvoke $r66.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r61);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; charset=");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        $r24 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23);

        $r25 = r0.<org.apache.cxf.attachment.AttachmentSerializer: java.lang.String encoding>;

        $r26 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r25);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; type=\"");

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r42);

        virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        goto label16;

     label15:
        virtualinvoke $r65.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

     label16:
        $r13 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.String toString()>();

        $r14 = r0.<org.apache.cxf.attachment.AttachmentSerializer: java.util.Map rootHeaders>;

        staticinvoke <org.apache.cxf.attachment.AttachmentSerializer: void writeHeaders(java.lang.String,java.lang.String,java.util.Map,java.io.Writer)>($r13, $r50, $r14, $r64);

        $r15 = r0.<org.apache.cxf.attachment.AttachmentSerializer: java.io.OutputStream out>;

        $r16 = virtualinvoke $r64.<java.io.StringWriter: java.lang.StringBuffer getBuffer()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.String toString()>();

        $r18 = r0.<org.apache.cxf.attachment.AttachmentSerializer: java.lang.String encoding>;

        $r19 = virtualinvoke $r17.<java.lang.String: byte[] getBytes(java.lang.String)>($r18);

        virtualinvoke $r15.<java.io.OutputStream: void write(byte[])>($r19);

        return;
    }

    private java.lang.String getHeaderValue(java.lang.String, java.lang.String)
    {
        org.apache.cxf.attachment.AttachmentSerializer r0;
        java.util.List r4;
        java.util.Map $r2;
        int $i0, $i1, $i2, i3;
        java.lang.Object $r3, $r8;
        java.lang.StringBuilder $r6;
        java.lang.String r1, r5, $r7, $r9;
        boolean $z0;

        r0 := @this: org.apache.cxf.attachment.AttachmentSerializer;

        r1 := @parameter0: java.lang.String;

        r5 := @parameter1: java.lang.String;

        $r2 = r0.<org.apache.cxf.attachment.AttachmentSerializer: java.util.Map rootHeaders>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (java.util.List) $r3;

        if r4 == null goto label1;

        $z0 = interfaceinvoke r4.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label2;

     label1:
        return r5;

     label2:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        i3 = 0;

     label3:
        $i0 = interfaceinvoke r4.<java.util.List: int size()>();

        if i3 >= $i0 goto label5;

        $r8 = interfaceinvoke r4.<java.util.List: java.lang.Object get(int)>(i3);

        $r9 = (java.lang.String) $r8;

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $i1 = i3 + 1;

        $i2 = interfaceinvoke r4.<java.util.List: int size()>();

        if $i1 >= $i2 goto label4;

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44);

     label4:
        i3 = i3 + 1;

        goto label3;

     label5:
        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;
    }

    private static void writeHeaders(java.lang.String, java.lang.String, java.util.Map, java.io.Writer) throws java.io.IOException
    {
        java.util.Map r2;
        int $i0, $i1, $i2, i3;
        java.lang.String r1, r8, $r9, $r10, $r11, $r15, $r19, $r20, $r21, r22;
        boolean $z0, $z1, $z2, $z3;
        java.util.Map$Entry r6;
        java.util.Iterator $r4;
        java.util.Set $r3;
        java.util.List r17;
        java.io.Writer r0;
        java.lang.Object $r5, $r7, $r16, $r18;
        java.lang.StringBuilder $r12, $r13, $r14;

        r1 := @parameter0: java.lang.String;

        r22 := @parameter1: java.lang.String;

        r2 := @parameter2: java.util.Map;

        r0 := @parameter3: java.io.Writer;

        virtualinvoke r0.<java.io.Writer: void write(java.lang.String)>("\r\n");

        virtualinvoke r0.<java.io.Writer: void write(java.lang.String)>("Content-Type: ");

        virtualinvoke r0.<java.io.Writer: void write(java.lang.String)>(r1);

        virtualinvoke r0.<java.io.Writer: void write(java.lang.String)>("\r\n");

        virtualinvoke r0.<java.io.Writer: void write(java.lang.String)>("Content-Transfer-Encoding: binary\r\n");

        if r22 == null goto label1;

        $r20 = staticinvoke <org.apache.cxf.attachment.AttachmentSerializer: java.lang.String checkAngleBrackets(java.lang.String)>(r22);

        virtualinvoke r0.<java.io.Writer: void write(java.lang.String)>("Content-ID: <");

        $r21 = staticinvoke <java.net.URLDecoder: java.lang.String decode(java.lang.String,java.lang.String)>($r20, "UTF-8");

        virtualinvoke r0.<java.io.Writer: void write(java.lang.String)>($r21);

        virtualinvoke r0.<java.io.Writer: void write(java.lang.String)>(">\r\n");

     label1:
        $r3 = interfaceinvoke r2.<java.util.Map: java.util.Set entrySet()>();

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z3 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label7;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.util.Map$Entry) $r5;

        $r7 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getKey()>();

        r8 = (java.lang.String) $r7;

        $r9 = "Content-Type";

        $z0 = virtualinvoke $r9.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r8);

        if $z0 != 0 goto label2;

        $r10 = "Content-ID";

        $z1 = virtualinvoke $r10.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r8);

        if $z1 != 0 goto label2;

        $r11 = "Content-Transfer-Encoding";

        $z2 = virtualinvoke $r11.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r8);

        if $z2 == 0 goto label3;

        goto label2;

     label3:
        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r8);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<java.io.Writer: void write(java.lang.String)>($r15);

        $r16 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getValue()>();

        r17 = (java.util.List) $r16;

        i3 = 0;

     label4:
        $i0 = interfaceinvoke r17.<java.util.List: int size()>();

        if i3 >= $i0 goto label6;

        $r18 = interfaceinvoke r17.<java.util.List: java.lang.Object get(int)>(i3);

        $r19 = (java.lang.String) $r18;

        virtualinvoke r0.<java.io.Writer: void write(java.lang.String)>($r19);

        $i1 = i3 + 1;

        $i2 = interfaceinvoke r17.<java.util.List: int size()>();

        if $i1 >= $i2 goto label5;

        virtualinvoke r0.<java.io.Writer: void write(java.lang.String)>(",");

     label5:
        i3 = i3 + 1;

        goto label4;

     label6:
        virtualinvoke r0.<java.io.Writer: void write(java.lang.String)>("\r\n");

        goto label2;

     label7:
        virtualinvoke r0.<java.io.Writer: void write(java.lang.String)>("\r\n");

        return;
    }

    private static java.lang.String checkAngleBrackets(java.lang.String)
    {
        char $c0, $c3;
        int $i1, $i2, $i4, $i5, $i6, $i7;
        java.lang.String r0, $r1;

        r0 := @parameter0: java.lang.String;

        $c0 = virtualinvoke r0.<java.lang.String: char charAt(int)>(0);

        $i6 = (int) $c0;

        if $i6 != 60 goto label1;

        $i1 = virtualinvoke r0.<java.lang.String: int length()>();

        $i2 = $i1 - 1;

        $c3 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i2);

        $i7 = (int) $c3;

        if $i7 != 62 goto label1;

        $i4 = virtualinvoke r0.<java.lang.String: int length()>();

        $i5 = $i4 - 1;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(1, $i5);

        return $r1;

     label1:
        return r0;
    }

    public void writeAttachments() throws java.io.IOException
    {
        byte[] $r9, $r27;
        java.util.Map r33;
        boolean $z0, $z1, $z2;
        java.util.Collection $r2, $r12;
        java.util.List $r32;
        javax.activation.DataHandler $r19;
        javax.activation.CommandMap $r20;
        java.util.LinkedHashMap $r29;
        org.apache.cxf.message.Attachment r15;
        java.lang.StringBuffer $r6, $r24;
        java.lang.String $r4, $r7, $r8, $r17, $r21, $r22, $r25, $r26, $r31, r34;
        java.io.OutputStream $r5, $r10, $r23, $r28;
        java.util.Iterator $r13, $r18;
        org.apache.cxf.attachment.AttachmentSerializer r0;
        org.apache.cxf.message.Message $r1, $r11;
        java.io.StringWriter $r3, $r16;
        java.lang.Object $r14, $r30;

        r0 := @this: org.apache.cxf.attachment.AttachmentSerializer;

        $r1 = r0.<org.apache.cxf.attachment.AttachmentSerializer: org.apache.cxf.message.Message message>;

        $r2 = interfaceinvoke $r1.<org.apache.cxf.message.Message: java.util.Collection getAttachments()>();

        if $r2 == null goto label5;

        $r11 = r0.<org.apache.cxf.attachment.AttachmentSerializer: org.apache.cxf.message.Message message>;

        $r12 = interfaceinvoke $r11.<org.apache.cxf.message.Message: java.util.Collection getAttachments()>();

        $r13 = interfaceinvoke $r12.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r13.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r14 = interfaceinvoke $r13.<java.util.Iterator: java.lang.Object next()>();

        r15 = (org.apache.cxf.message.Attachment) $r14;

        $r16 = new java.io.StringWriter;

        specialinvoke $r16.<java.io.StringWriter: void <init>()>();

        virtualinvoke $r16.<java.io.StringWriter: void write(java.lang.String)>("\r\n");

        virtualinvoke $r16.<java.io.StringWriter: void write(java.lang.String)>("--");

        $r17 = r0.<org.apache.cxf.attachment.AttachmentSerializer: java.lang.String bodyBoundary>;

        virtualinvoke $r16.<java.io.StringWriter: void write(java.lang.String)>($r17);

        $r18 = interfaceinvoke r15.<org.apache.cxf.message.Attachment: java.util.Iterator getHeaderNames()>();

        $z1 = interfaceinvoke $r18.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r29 = new java.util.LinkedHashMap;

        specialinvoke $r29.<java.util.LinkedHashMap: void <init>()>();

        r33 = $r29;

     label2:
        $z2 = interfaceinvoke $r18.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label4;

        $r30 = interfaceinvoke $r18.<java.util.Iterator: java.lang.Object next()>();

        r34 = (java.lang.String) $r30;

        $r31 = interfaceinvoke r15.<org.apache.cxf.message.Attachment: java.lang.String getHeader(java.lang.String)>(r34);

        $r32 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>($r31);

        interfaceinvoke $r29.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r34, $r32);

        goto label2;

     label3:
        r33 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>();

     label4:
        $r19 = interfaceinvoke r15.<org.apache.cxf.message.Attachment: javax.activation.DataHandler getDataHandler()>();

        $r20 = staticinvoke <org.apache.cxf.attachment.AttachmentUtil: javax.activation.CommandMap getCommandMap()>();

        virtualinvoke $r19.<javax.activation.DataHandler: void setCommandMap(javax.activation.CommandMap)>($r20);

        $r21 = virtualinvoke $r19.<javax.activation.DataHandler: java.lang.String getContentType()>();

        $r22 = interfaceinvoke r15.<org.apache.cxf.message.Attachment: java.lang.String getId()>();

        staticinvoke <org.apache.cxf.attachment.AttachmentSerializer: void writeHeaders(java.lang.String,java.lang.String,java.util.Map,java.io.Writer)>($r21, $r22, r33, $r16);

        $r23 = r0.<org.apache.cxf.attachment.AttachmentSerializer: java.io.OutputStream out>;

        $r24 = virtualinvoke $r16.<java.io.StringWriter: java.lang.StringBuffer getBuffer()>();

        $r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.String toString()>();

        $r26 = r0.<org.apache.cxf.attachment.AttachmentSerializer: java.lang.String encoding>;

        $r27 = virtualinvoke $r25.<java.lang.String: byte[] getBytes(java.lang.String)>($r26);

        virtualinvoke $r23.<java.io.OutputStream: void write(byte[])>($r27);

        $r28 = r0.<org.apache.cxf.attachment.AttachmentSerializer: java.io.OutputStream out>;

        virtualinvoke $r19.<javax.activation.DataHandler: void writeTo(java.io.OutputStream)>($r28);

        goto label1;

     label5:
        $r3 = new java.io.StringWriter;

        specialinvoke $r3.<java.io.StringWriter: void <init>()>();

        virtualinvoke $r3.<java.io.StringWriter: void write(java.lang.String)>("\r\n");

        virtualinvoke $r3.<java.io.StringWriter: void write(java.lang.String)>("--");

        $r4 = r0.<org.apache.cxf.attachment.AttachmentSerializer: java.lang.String bodyBoundary>;

        virtualinvoke $r3.<java.io.StringWriter: void write(java.lang.String)>($r4);

        virtualinvoke $r3.<java.io.StringWriter: void write(java.lang.String)>("--");

        $r5 = r0.<org.apache.cxf.attachment.AttachmentSerializer: java.io.OutputStream out>;

        $r6 = virtualinvoke $r3.<java.io.StringWriter: java.lang.StringBuffer getBuffer()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        $r8 = r0.<org.apache.cxf.attachment.AttachmentSerializer: java.lang.String encoding>;

        $r9 = virtualinvoke $r7.<java.lang.String: byte[] getBytes(java.lang.String)>($r8);

        virtualinvoke $r5.<java.io.OutputStream: void write(byte[])>($r9);

        $r10 = r0.<org.apache.cxf.attachment.AttachmentSerializer: java.io.OutputStream out>;

        virtualinvoke $r10.<java.io.OutputStream: void flush()>();

        return;
    }

    public boolean isXop()
    {
        org.apache.cxf.attachment.AttachmentSerializer r0;
        boolean $z0;

        r0 := @this: org.apache.cxf.attachment.AttachmentSerializer;

        $z0 = r0.<org.apache.cxf.attachment.AttachmentSerializer: boolean xop>;

        return $z0;
    }

    public void setXop(boolean)
    {
        org.apache.cxf.attachment.AttachmentSerializer r0;
        boolean z0;

        r0 := @this: org.apache.cxf.attachment.AttachmentSerializer;

        z0 := @parameter0: boolean;

        r0.<org.apache.cxf.attachment.AttachmentSerializer: boolean xop> = z0;

        return;
    }

    public static void <clinit>()
    {
        <org.apache.cxf.attachment.AttachmentSerializer: java.lang.String DEFAULT_MULTIPART_TYPE> = "multipart/related";

        return;
    }
}
