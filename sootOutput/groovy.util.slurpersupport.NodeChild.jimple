public class groovy.util.slurpersupport.NodeChild extends groovy.util.slurpersupport.GPathResult
{
    private final groovy.util.slurpersupport.Node node;

    public void <init>(groovy.util.slurpersupport.Node, groovy.util.slurpersupport.GPathResult, java.lang.String, java.util.Map)
    {
        groovy.util.slurpersupport.Node r2;
        groovy.util.slurpersupport.NodeChild r0;
        java.util.Map r5;
        java.lang.String $r3, r4;
        groovy.util.slurpersupport.GPathResult r1;

        r0 := @this: groovy.util.slurpersupport.NodeChild;

        r2 := @parameter0: groovy.util.slurpersupport.Node;

        r1 := @parameter1: groovy.util.slurpersupport.GPathResult;

        r4 := @parameter2: java.lang.String;

        r5 := @parameter3: java.util.Map;

        $r3 = virtualinvoke r2.<groovy.util.slurpersupport.Node: java.lang.String name()>();

        specialinvoke r0.<groovy.util.slurpersupport.GPathResult: void <init>(groovy.util.slurpersupport.GPathResult,java.lang.String,java.lang.String,java.util.Map)>(r1, $r3, r4, r5);

        r0.<groovy.util.slurpersupport.NodeChild: groovy.util.slurpersupport.Node node> = r2;

        return;
    }

    public void <init>(groovy.util.slurpersupport.Node, groovy.util.slurpersupport.GPathResult, java.util.Map)
    {
        groovy.util.slurpersupport.Node r1;
        groovy.util.slurpersupport.NodeChild r0;
        java.util.Map r3;
        groovy.util.slurpersupport.GPathResult r2;

        r0 := @this: groovy.util.slurpersupport.NodeChild;

        r1 := @parameter0: groovy.util.slurpersupport.Node;

        r2 := @parameter1: groovy.util.slurpersupport.GPathResult;

        r3 := @parameter2: java.util.Map;

        specialinvoke r0.<groovy.util.slurpersupport.NodeChild: void <init>(groovy.util.slurpersupport.Node,groovy.util.slurpersupport.GPathResult,java.lang.String,java.util.Map)>(r1, r2, "*", r3);

        return;
    }

    public int size()
    {
        groovy.util.slurpersupport.NodeChild r0;

        r0 := @this: groovy.util.slurpersupport.NodeChild;

        return 1;
    }

    public java.lang.String text()
    {
        groovy.util.slurpersupport.Node $r1;
        java.lang.String $r2;
        groovy.util.slurpersupport.NodeChild r0;

        r0 := @this: groovy.util.slurpersupport.NodeChild;

        $r1 = r0.<groovy.util.slurpersupport.NodeChild: groovy.util.slurpersupport.Node node>;

        $r2 = virtualinvoke $r1.<groovy.util.slurpersupport.Node: java.lang.String text()>();

        return $r2;
    }

    public groovy.util.slurpersupport.GPathResult parents()
    {
        groovy.lang.GroovyRuntimeException $r0;
        groovy.util.slurpersupport.NodeChild r1;

        r1 := @this: groovy.util.slurpersupport.NodeChild;

        $r0 = new groovy.lang.GroovyRuntimeException;

        specialinvoke $r0.<groovy.lang.GroovyRuntimeException: void <init>(java.lang.String)>("parents() not implemented yet");

        throw $r0;
    }

    public java.util.Iterator iterator()
    {
        groovy.util.slurpersupport.NodeChild r1;
        groovy.util.slurpersupport.NodeChild$1 $r0;

        r1 := @this: groovy.util.slurpersupport.NodeChild;

        $r0 = new groovy.util.slurpersupport.NodeChild$1;

        specialinvoke $r0.<groovy.util.slurpersupport.NodeChild$1: void <init>(groovy.util.slurpersupport.NodeChild)>(r1);

        return $r0;
    }

    public java.util.Iterator nodeIterator()
    {
        groovy.util.slurpersupport.NodeChild$2 $r0;
        groovy.util.slurpersupport.NodeChild r1;

        r1 := @this: groovy.util.slurpersupport.NodeChild;

        $r0 = new groovy.util.slurpersupport.NodeChild$2;

        specialinvoke $r0.<groovy.util.slurpersupport.NodeChild$2: void <init>(groovy.util.slurpersupport.NodeChild)>(r1);

        return $r0;
    }

    public java.lang.Object getAt(int)
    {
        groovy.util.slurpersupport.Node $r2;
        groovy.util.slurpersupport.NodeChild r1;
        int i0;
        java.lang.ArrayIndexOutOfBoundsException $r0;

        r1 := @this: groovy.util.slurpersupport.NodeChild;

        i0 := @parameter0: int;

        if i0 != 0 goto label1;

        $r2 = r1.<groovy.util.slurpersupport.NodeChild: groovy.util.slurpersupport.Node node>;

        return $r2;

     label1:
        $r0 = new java.lang.ArrayIndexOutOfBoundsException;

        specialinvoke $r0.<java.lang.ArrayIndexOutOfBoundsException: void <init>(int)>(i0);

        throw $r0;
    }

    public java.util.Map attributes()
    {
        groovy.util.slurpersupport.Node $r1;
        groovy.util.slurpersupport.NodeChild r0;
        java.util.Map $r2;

        r0 := @this: groovy.util.slurpersupport.NodeChild;

        $r1 = r0.<groovy.util.slurpersupport.NodeChild: groovy.util.slurpersupport.Node node>;

        $r2 = virtualinvoke $r1.<groovy.util.slurpersupport.Node: java.util.Map attributes()>();

        return $r2;
    }

    public java.util.Iterator childNodes()
    {
        groovy.util.slurpersupport.Node $r1;
        java.util.Iterator $r2;
        groovy.util.slurpersupport.NodeChild r0;

        r0 := @this: groovy.util.slurpersupport.NodeChild;

        $r1 = r0.<groovy.util.slurpersupport.NodeChild: groovy.util.slurpersupport.Node node>;

        $r2 = virtualinvoke $r1.<groovy.util.slurpersupport.Node: java.util.Iterator childNodes()>();

        return $r2;
    }

    public groovy.util.slurpersupport.GPathResult find(groovy.lang.Closure)
    {
        java.lang.Object[] $r1;
        groovy.util.slurpersupport.NoChildren $r5;
        groovy.util.slurpersupport.NodeChild r2;
        groovy.lang.Closure r0;
        groovy.util.slurpersupport.Node $r3;
        java.util.Map $r6;
        java.lang.Object $r4;
        boolean $z0;

        r2 := @this: groovy.util.slurpersupport.NodeChild;

        r0 := @parameter0: groovy.lang.Closure;

        $r1 = newarray (java.lang.Object)[1];

        $r3 = r2.<groovy.util.slurpersupport.NodeChild: groovy.util.slurpersupport.Node node>;

        $r1[0] = $r3;

        $r4 = virtualinvoke r0.<groovy.lang.Closure: java.lang.Object call(java.lang.Object[])>($r1);

        $z0 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: boolean castToBoolean(java.lang.Object)>($r4);

        if $z0 == 0 goto label1;

        return r2;

     label1:
        $r5 = new groovy.util.slurpersupport.NoChildren;

        $r6 = r2.<groovy.util.slurpersupport.NodeChild: java.util.Map namespaceTagHints>;

        specialinvoke $r5.<groovy.util.slurpersupport.NoChildren: void <init>(groovy.util.slurpersupport.GPathResult,java.lang.String,java.util.Map)>(r2, "", $r6);

        return $r5;
    }

    public groovy.util.slurpersupport.GPathResult findAll(groovy.lang.Closure)
    {
        groovy.lang.Closure r1;
        groovy.util.slurpersupport.NodeChild r0;
        groovy.util.slurpersupport.GPathResult $r2;

        r0 := @this: groovy.util.slurpersupport.NodeChild;

        r1 := @parameter0: groovy.lang.Closure;

        $r2 = virtualinvoke r0.<groovy.util.slurpersupport.NodeChild: groovy.util.slurpersupport.GPathResult find(groovy.lang.Closure)>(r1);

        return $r2;
    }

    public void build(groovy.lang.GroovyObject)
    {
        groovy.lang.GroovyObject r1;
        groovy.util.slurpersupport.Node $r4;
        groovy.util.slurpersupport.NodeChild r0;
        java.util.Map $r2, $r3;

        r0 := @this: groovy.util.slurpersupport.NodeChild;

        r1 := @parameter0: groovy.lang.GroovyObject;

        $r4 = r0.<groovy.util.slurpersupport.NodeChild: groovy.util.slurpersupport.Node node>;

        $r3 = r0.<groovy.util.slurpersupport.NodeChild: java.util.Map namespaceMap>;

        $r2 = r0.<groovy.util.slurpersupport.NodeChild: java.util.Map namespaceTagHints>;

        virtualinvoke $r4.<groovy.util.slurpersupport.Node: void build(groovy.lang.GroovyObject,java.util.Map,java.util.Map)>(r1, $r3, $r2);

        return;
    }

    public java.io.Writer writeTo(java.io.Writer) throws java.io.IOException
    {
        groovy.util.slurpersupport.Node $r2;
        groovy.util.slurpersupport.NodeChild r0;
        java.io.Writer r1, $r3;

        r0 := @this: groovy.util.slurpersupport.NodeChild;

        r1 := @parameter0: java.io.Writer;

        $r2 = r0.<groovy.util.slurpersupport.NodeChild: groovy.util.slurpersupport.Node node>;

        $r3 = virtualinvoke $r2.<groovy.util.slurpersupport.Node: java.io.Writer writeTo(java.io.Writer)>(r1);

        return $r3;
    }

    protected void replaceNode(groovy.lang.Closure)
    {
        groovy.lang.Closure r1;
        groovy.util.slurpersupport.Node $r2;
        groovy.util.slurpersupport.NodeChild r0;

        r0 := @this: groovy.util.slurpersupport.NodeChild;

        r1 := @parameter0: groovy.lang.Closure;

        $r2 = r0.<groovy.util.slurpersupport.NodeChild: groovy.util.slurpersupport.Node node>;

        virtualinvoke $r2.<groovy.util.slurpersupport.Node: void replaceNode(groovy.lang.Closure,groovy.util.slurpersupport.GPathResult)>(r1, r0);

        return;
    }

    protected void replaceBody(java.lang.Object)
    {
        java.lang.Object r1;
        groovy.util.slurpersupport.Node $r2;
        groovy.util.slurpersupport.NodeChild r0;

        r0 := @this: groovy.util.slurpersupport.NodeChild;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<groovy.util.slurpersupport.NodeChild: groovy.util.slurpersupport.Node node>;

        virtualinvoke $r2.<groovy.util.slurpersupport.Node: void replaceBody(java.lang.Object)>(r1);

        return;
    }

    protected void appendNode(java.lang.Object)
    {
        java.lang.Object r1;
        groovy.util.slurpersupport.Node $r2;
        groovy.util.slurpersupport.NodeChild r0;

        r0 := @this: groovy.util.slurpersupport.NodeChild;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<groovy.util.slurpersupport.NodeChild: groovy.util.slurpersupport.Node node>;

        virtualinvoke $r2.<groovy.util.slurpersupport.Node: void appendNode(java.lang.Object,groovy.util.slurpersupport.GPathResult)>(r1, r0);

        return;
    }

    static groovy.util.slurpersupport.Node access$000(groovy.util.slurpersupport.NodeChild)
    {
        groovy.util.slurpersupport.Node $r1;
        groovy.util.slurpersupport.NodeChild r0;

        r0 := @parameter0: groovy.util.slurpersupport.NodeChild;

        $r1 = r0.<groovy.util.slurpersupport.NodeChild: groovy.util.slurpersupport.Node node>;

        return $r1;
    }
}
