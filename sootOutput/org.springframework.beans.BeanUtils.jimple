public abstract class org.springframework.beans.BeanUtils extends java.lang.Object
{
    private static final org.apache.commons.logging.Log logger;
    private static final java.util.Map unknownEditorTypes;

    static void <clinit>()
    {
        org.apache.commons.logging.Log $r0;
        java.util.WeakHashMap $r1;
        java.util.Map $r2;

        $r0 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>(class "Lorg/springframework/beans/BeanUtils;");

        <org.springframework.beans.BeanUtils: org.apache.commons.logging.Log logger> = $r0;

        $r1 = new java.util.WeakHashMap;

        specialinvoke $r1.<java.util.WeakHashMap: void <init>()>();

        $r2 = staticinvoke <java.util.Collections: java.util.Map synchronizedMap(java.util.Map)>($r1);

        <org.springframework.beans.BeanUtils: java.util.Map unknownEditorTypes> = $r2;

        return;
    }

    public void <init>()
    {
        org.springframework.beans.BeanUtils r0;

        r0 := @this: org.springframework.beans.BeanUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.Object instantiate(java.lang.Class) throws org.springframework.beans.BeanInstantiationException
    {
        org.springframework.beans.BeanInstantiationException $r2, $r4, $r6;
        java.lang.IllegalAccessException $r3;
        java.lang.InstantiationException $r5;
        java.lang.Class r0;
        java.lang.Object $r1;
        boolean $z0;

        r0 := @parameter0: java.lang.Class;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "Class must not be null");

        $z0 = virtualinvoke r0.<java.lang.Class: boolean isInterface()>();

        if $z0 == 0 goto label1;

        $r2 = new org.springframework.beans.BeanInstantiationException;

        specialinvoke $r2.<org.springframework.beans.BeanInstantiationException: void <init>(java.lang.Class,java.lang.String)>(r0, "Specified class is an interface");

        throw $r2;

     label1:
        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.Object newInstance()>();

     label2:
        return $r1;

     label3:
        $r5 := @caughtexception;

        $r6 = new org.springframework.beans.BeanInstantiationException;

        specialinvoke $r6.<org.springframework.beans.BeanInstantiationException: void <init>(java.lang.Class,java.lang.String,java.lang.Throwable)>(r0, "Is it an abstract class?", $r5);

        throw $r6;

     label4:
        $r3 := @caughtexception;

        $r4 = new org.springframework.beans.BeanInstantiationException;

        specialinvoke $r4.<org.springframework.beans.BeanInstantiationException: void <init>(java.lang.Class,java.lang.String,java.lang.Throwable)>(r0, "Is the constructor accessible?", $r3);

        throw $r4;

        catch java.lang.InstantiationException from label1 to label2 with label3;
        catch java.lang.IllegalAccessException from label1 to label2 with label4;
    }

    public static java.lang.Object instantiateClass(java.lang.Class) throws org.springframework.beans.BeanInstantiationException
    {
        org.springframework.beans.BeanInstantiationException $r5, $r7;
        java.lang.Object[] $r3;
        java.lang.NoSuchMethodException $r6;
        java.lang.Class[] $r1;
        java.lang.reflect.Constructor $r2;
        java.lang.Class r0;
        java.lang.Object $r4;
        boolean $z0;

        r0 := @parameter0: java.lang.Class;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "Class must not be null");

        $z0 = virtualinvoke r0.<java.lang.Class: boolean isInterface()>();

        if $z0 == 0 goto label1;

        $r5 = new org.springframework.beans.BeanInstantiationException;

        specialinvoke $r5.<org.springframework.beans.BeanInstantiationException: void <init>(java.lang.Class,java.lang.String)>(r0, "Specified class is an interface");

        throw $r5;

     label1:
        $r1 = newarray (java.lang.Class)[0];

        $r2 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])>($r1);

        $r3 = newarray (java.lang.Object)[0];

        $r4 = staticinvoke <org.springframework.beans.BeanUtils: java.lang.Object instantiateClass(java.lang.reflect.Constructor,java.lang.Object[])>($r2, $r3);

     label2:
        return $r4;

     label3:
        $r6 := @caughtexception;

        $r7 = new org.springframework.beans.BeanInstantiationException;

        specialinvoke $r7.<org.springframework.beans.BeanInstantiationException: void <init>(java.lang.Class,java.lang.String,java.lang.Throwable)>(r0, "No default constructor found", $r6);

        throw $r7;

        catch java.lang.NoSuchMethodException from label1 to label2 with label3;
    }

    public static transient java.lang.Object instantiateClass(java.lang.reflect.Constructor, java.lang.Object[]) throws org.springframework.beans.BeanInstantiationException
    {
        java.lang.Throwable $r6;
        org.springframework.beans.BeanInstantiationException $r4, $r8, $r11, $r14;
        java.lang.Object[] r1;
        java.lang.reflect.Constructor r0;
        java.lang.InstantiationException $r13;
        java.lang.IllegalAccessException $r10;
        java.lang.IllegalArgumentException $r7;
        java.lang.reflect.InvocationTargetException $r3;
        java.lang.Object $r2;
        java.lang.Class $r5, $r9, $r12, $r15;

        r0 := @parameter0: java.lang.reflect.Constructor;

        r1 := @parameter1: java.lang.Object[];

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "Constructor must not be null");

     label1:
        staticinvoke <org.springframework.util.ReflectionUtils: void makeAccessible(java.lang.reflect.Constructor)>(r0);

        $r2 = virtualinvoke r0.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>(r1);

     label2:
        return $r2;

     label3:
        $r13 := @caughtexception;

        $r14 = new org.springframework.beans.BeanInstantiationException;

        $r15 = virtualinvoke r0.<java.lang.reflect.Constructor: java.lang.Class getDeclaringClass()>();

        specialinvoke $r14.<org.springframework.beans.BeanInstantiationException: void <init>(java.lang.Class,java.lang.String,java.lang.Throwable)>($r15, "Is it an abstract class?", $r13);

        throw $r14;

     label4:
        $r10 := @caughtexception;

        $r11 = new org.springframework.beans.BeanInstantiationException;

        $r12 = virtualinvoke r0.<java.lang.reflect.Constructor: java.lang.Class getDeclaringClass()>();

        specialinvoke $r11.<org.springframework.beans.BeanInstantiationException: void <init>(java.lang.Class,java.lang.String,java.lang.Throwable)>($r12, "Is the constructor accessible?", $r10);

        throw $r11;

     label5:
        $r7 := @caughtexception;

        $r8 = new org.springframework.beans.BeanInstantiationException;

        $r9 = virtualinvoke r0.<java.lang.reflect.Constructor: java.lang.Class getDeclaringClass()>();

        specialinvoke $r8.<org.springframework.beans.BeanInstantiationException: void <init>(java.lang.Class,java.lang.String,java.lang.Throwable)>($r9, "Illegal arguments for constructor", $r7);

        throw $r8;

     label6:
        $r3 := @caughtexception;

        $r4 = new org.springframework.beans.BeanInstantiationException;

        $r5 = virtualinvoke r0.<java.lang.reflect.Constructor: java.lang.Class getDeclaringClass()>();

        $r6 = virtualinvoke $r3.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>();

        specialinvoke $r4.<org.springframework.beans.BeanInstantiationException: void <init>(java.lang.Class,java.lang.String,java.lang.Throwable)>($r5, "Constructor threw exception", $r6);

        throw $r4;

        catch java.lang.InstantiationException from label1 to label2 with label3;
        catch java.lang.IllegalAccessException from label1 to label2 with label4;
        catch java.lang.IllegalArgumentException from label1 to label2 with label5;
        catch java.lang.reflect.InvocationTargetException from label1 to label2 with label6;
    }

    public static transient java.lang.reflect.Method findMethod(java.lang.Class, java.lang.String, java.lang.Class[])
    {
        java.lang.NoSuchMethodException $r4;
        java.lang.Class[] r2;
        java.lang.Class r0;
        java.lang.String r1;
        java.lang.reflect.Method $r3, $r5;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.Class[];

     label1:
        $r3 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(r1, r2);

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        $r5 = staticinvoke <org.springframework.beans.BeanUtils: java.lang.reflect.Method findDeclaredMethod(java.lang.Class,java.lang.String,java.lang.Class[])>(r0, r1, r2);

        return $r5;

        catch java.lang.NoSuchMethodException from label1 to label2 with label3;
    }

    public static java.lang.reflect.Method findDeclaredMethod(java.lang.Class, java.lang.String, java.lang.Class[])
    {
        java.lang.NoSuchMethodException $r4;
        java.lang.Class[] r2;
        java.lang.Class r0, $r5, $r6;
        java.lang.String r1;
        java.lang.reflect.Method $r3, $r7;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.Class[];

     label1:
        $r3 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>(r1, r2);

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        $r5 = virtualinvoke r0.<java.lang.Class: java.lang.Class getSuperclass()>();

        if $r5 == null goto label4;

        $r6 = virtualinvoke r0.<java.lang.Class: java.lang.Class getSuperclass()>();

        $r7 = staticinvoke <org.springframework.beans.BeanUtils: java.lang.reflect.Method findDeclaredMethod(java.lang.Class,java.lang.String,java.lang.Class[])>($r6, r1, r2);

        return $r7;

     label4:
        return null;

        catch java.lang.NoSuchMethodException from label1 to label2 with label3;
    }

    public static java.lang.reflect.Method findMethodWithMinimalParameters(java.lang.Class, java.lang.String) throws java.lang.IllegalArgumentException
    {
        java.lang.Class r0;
        java.lang.String r2;
        java.lang.reflect.Method $r3, r4;
        java.lang.reflect.Method[] $r1;

        r0 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.lang.String;

        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Method[] getMethods()>();

        $r3 = staticinvoke <org.springframework.beans.BeanUtils: java.lang.reflect.Method findMethodWithMinimalParameters(java.lang.reflect.Method[],java.lang.String)>($r1, r2);

        r4 = $r3;

        if $r3 != null goto label1;

        r4 = staticinvoke <org.springframework.beans.BeanUtils: java.lang.reflect.Method findDeclaredMethodWithMinimalParameters(java.lang.Class,java.lang.String)>(r0, r2);

     label1:
        return r4;
    }

    public static java.lang.reflect.Method findDeclaredMethodWithMinimalParameters(java.lang.Class, java.lang.String) throws java.lang.IllegalArgumentException
    {
        java.lang.Class r0, $r4, $r5;
        java.lang.String r2;
        java.lang.reflect.Method $r3, r6;
        java.lang.reflect.Method[] $r1;

        r0 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.lang.String;

        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>();

        $r3 = staticinvoke <org.springframework.beans.BeanUtils: java.lang.reflect.Method findMethodWithMinimalParameters(java.lang.reflect.Method[],java.lang.String)>($r1, r2);

        r6 = $r3;

        if $r3 != null goto label1;

        $r4 = virtualinvoke r0.<java.lang.Class: java.lang.Class getSuperclass()>();

        if $r4 == null goto label1;

        $r5 = virtualinvoke r0.<java.lang.Class: java.lang.Class getSuperclass()>();

        r6 = staticinvoke <org.springframework.beans.BeanUtils: java.lang.reflect.Method findDeclaredMethodWithMinimalParameters(java.lang.Class,java.lang.String)>($r5, r2);

     label1:
        return r6;
    }

    public static java.lang.reflect.Method findMethodWithMinimalParameters(java.lang.reflect.Method[], java.lang.String) throws java.lang.IllegalArgumentException
    {
        java.lang.reflect.Method[] r0;
        int i0, i1, $i2, $i3, i4, i5;
        java.lang.String $r2, r3, $r14;
        java.lang.reflect.Method r1, r15;
        boolean $z0;
        java.lang.Class[] $r4, $r5, $r6;
        java.lang.IllegalArgumentException $r7;
        java.lang.StringBuilder $r8, $r9, $r10, $r11, $r12, $r13;

        r0 := @parameter0: java.lang.reflect.Method[];

        r3 := @parameter1: java.lang.String;

        r15 = null;

        i4 = 0;

        i0 = lengthof r0;

        i5 = 0;

        goto label5;

     label1:
        r1 = r0[i5];

        $r2 = virtualinvoke r1.<java.lang.reflect.Method: java.lang.String getName()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(r3);

        if $z0 == 0 goto label4;

        $r4 = virtualinvoke r1.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        i1 = lengthof $r4;

        if r15 == null goto label2;

        $r5 = virtualinvoke r15.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $i2 = lengthof $r5;

        if i1 >= $i2 goto label3;

     label2:
        r15 = r1;

        i4 = 1;

        goto label4;

     label3:
        $r6 = virtualinvoke r15.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $i3 = lengthof $r6;

        if $i3 != i1 goto label4;

        i4 = i4 + 1;

     label4:
        i5 = i5 + 1;

     label5:
        if i5 < i0 goto label1;

        if i4 <= 1 goto label6;

        $r7 = new java.lang.IllegalArgumentException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>(java.lang.String)>("Cannot resolve method \'");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' to a unique method. Attempted to resolve to overloaded method with ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("the least number of parameters, but there were ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i4);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" candidates.");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r14);

        throw $r7;

     label6:
        return r15;
    }

    public static java.lang.reflect.Method resolveSignature(java.lang.String, java.lang.Class)
    {
        java.lang.reflect.Method $r9, $r11;
        java.lang.StringBuilder $r14, $r15, $r19, $r20, $r25, $r26, $r27, $r28, $r29, $r31, $r33, $r35;
        java.lang.ClassLoader $r7;
        java.lang.Throwable $r22;
        java.lang.String[] $r4;
        int $i0, $i1, $i2, $i3, $i4, i5, $i7, $i9, $i11, $i13, $i15, $i17;
        java.lang.String r0, $r2, $r3, $r5, $r6, $r16, $r21, $r30;
        java.lang.Class[] $r10;
        java.lang.IllegalArgumentException $r32, $r34, $r36;
        java.lang.Class r1, $r8;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.Class;

        staticinvoke <org.springframework.util.Assert: void hasText(java.lang.String,java.lang.String)>(r0, "\'signature\' must not be empty");

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r1, "Class must not be null");

        $i0 = virtualinvoke r0.<java.lang.String: int indexOf(java.lang.String)>("(");

        $i1 = virtualinvoke r0.<java.lang.String: int indexOf(java.lang.String)>(")");

        $i7 = (int) -1;

        if $i0 <= $i7 goto label1;

        $i9 = (int) -1;

        if $i1 != $i9 goto label1;

        $r32 = new java.lang.IllegalArgumentException;

        $r31 = new java.lang.StringBuilder;

        specialinvoke $r31.<java.lang.StringBuilder: void <init>(java.lang.String)>("Invalid method signature \'");

        $r19 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\': expected closing \')\' for args list");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r32.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r21);

        throw $r32;

     label1:
        $i11 = (int) -1;

        if $i1 <= $i11 goto label2;

        $i13 = (int) -1;

        if $i0 != $i13 goto label2;

        $r34 = new java.lang.IllegalArgumentException;

        $r33 = new java.lang.StringBuilder;

        specialinvoke $r33.<java.lang.StringBuilder: void <init>(java.lang.String)>("Invalid method signature \'");

        $r14 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\': expected opening \'(\' for args list");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r34.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r16);

        throw $r34;

     label2:
        $i15 = (int) -1;

        if $i0 != $i15 goto label3;

        $i17 = (int) -1;

        if $i1 != $i17 goto label3;

        $r11 = staticinvoke <org.springframework.beans.BeanUtils: java.lang.reflect.Method findMethodWithMinimalParameters(java.lang.Class,java.lang.String)>(r1, r0);

        return $r11;

     label3:
        $r2 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        $i2 = $i0 + 1;

        $r3 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>($i2, $i1);

        $r4 = staticinvoke <org.springframework.util.StringUtils: java.lang.String[] commaDelimitedListToStringArray(java.lang.String)>($r3);

        $i3 = lengthof $r4;

        $r10 = newarray (java.lang.Class)[$i3];

        i5 = 0;

        goto label9;

     label4:
        $r5 = $r4[i5];

        $r6 = virtualinvoke $r5.<java.lang.String: java.lang.String trim()>();

     label5:
        $r7 = virtualinvoke r1.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r8 = staticinvoke <org.springframework.util.ClassUtils: java.lang.Class forName(java.lang.String,java.lang.ClassLoader)>($r6, $r7);

        $r10[i5] = $r8;

     label6:
        goto label8;

     label7:
        $r22 := @caughtexception;

        $r36 = new java.lang.IllegalArgumentException;

        $r35 = new java.lang.StringBuilder;

        specialinvoke $r35.<java.lang.StringBuilder: void <init>(java.lang.String)>("Invalid method signature: unable to resolve type [");

        $r25 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] for argument ");

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i5);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(". Root cause: ");

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r22);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r36.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r30);

        throw $r36;

     label8:
        i5 = i5 + 1;

     label9:
        $i4 = lengthof $r4;

        if i5 < $i4 goto label4;

        $r9 = staticinvoke <org.springframework.beans.BeanUtils: java.lang.reflect.Method findMethod(java.lang.Class,java.lang.String,java.lang.Class[])>(r1, $r2, $r10);

        return $r9;

        catch java.lang.Throwable from label5 to label6 with label7;
    }

    public static java.beans.PropertyDescriptor[] getPropertyDescriptors(java.lang.Class) throws org.springframework.beans.BeansException
    {
        org.springframework.beans.CachedIntrospectionResults $r1;
        java.lang.Class r0;
        java.beans.PropertyDescriptor[] $r2;

        r0 := @parameter0: java.lang.Class;

        $r1 = staticinvoke <org.springframework.beans.CachedIntrospectionResults: org.springframework.beans.CachedIntrospectionResults forClass(java.lang.Class)>(r0);

        $r2 = virtualinvoke $r1.<org.springframework.beans.CachedIntrospectionResults: java.beans.PropertyDescriptor[] getPropertyDescriptors()>();

        return $r2;
    }

    public static java.beans.PropertyDescriptor getPropertyDescriptor(java.lang.Class, java.lang.String) throws org.springframework.beans.BeansException
    {
        java.beans.PropertyDescriptor $r3;
        org.springframework.beans.CachedIntrospectionResults $r1;
        java.lang.Class r0;
        java.lang.String r2;

        r0 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.lang.String;

        $r1 = staticinvoke <org.springframework.beans.CachedIntrospectionResults: org.springframework.beans.CachedIntrospectionResults forClass(java.lang.Class)>(r0);

        $r3 = virtualinvoke $r1.<org.springframework.beans.CachedIntrospectionResults: java.beans.PropertyDescriptor getPropertyDescriptor(java.lang.String)>(r2);

        return $r3;
    }

    public static java.beans.PropertyDescriptor findPropertyForMethod(java.lang.reflect.Method) throws org.springframework.beans.BeansException
    {
        java.beans.PropertyDescriptor[] $r2;
        java.beans.PropertyDescriptor r3;
        int i0, i1;
        java.lang.Class $r1;
        java.lang.reflect.Method r0, $r4, $r5;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.reflect.Method;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "Method must not be null");

        $r1 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>();

        $r2 = staticinvoke <org.springframework.beans.BeanUtils: java.beans.PropertyDescriptor[] getPropertyDescriptors(java.lang.Class)>($r1);

        i0 = lengthof $r2;

        i1 = 0;

        goto label4;

     label1:
        r3 = $r2[i1];

        $r4 = virtualinvoke r3.<java.beans.PropertyDescriptor: java.lang.reflect.Method getReadMethod()>();

        $z0 = virtualinvoke r0.<java.lang.reflect.Method: boolean equals(java.lang.Object)>($r4);

        if $z0 != 0 goto label2;

        $r5 = virtualinvoke r3.<java.beans.PropertyDescriptor: java.lang.reflect.Method getWriteMethod()>();

        $z1 = virtualinvoke r0.<java.lang.reflect.Method: boolean equals(java.lang.Object)>($r5);

        if $z1 == 0 goto label3;

     label2:
        return r3;

     label3:
        i1 = i1 + 1;

     label4:
        if i1 < i0 goto label1;

        return null;
    }

    public static java.beans.PropertyEditor findEditorByConvention(java.lang.Class)
    {
        java.util.Map $r1, $r14, $r24;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.lang.StringBuilder $r3, $r6, $r15, $r17, $r18, $r25, $r27, $r28, $r30, $r31, $r35, $r37;
        java.lang.ClassLoader $r2, $r20, r39;
        java.lang.Throwable $r33;
        java.lang.Boolean $r13, $r23;
        java.lang.String $r4, $r5, $r7, $r19, $r29, $r32, $r38;
        java.beans.PropertyEditor $r11;
        java.lang.Class r0, $r8, $r9;
        java.lang.Object $r10;
        org.apache.commons.logging.Log $r12, $r16, $r22, $r26, $r34, $r36;
        java.lang.ClassNotFoundException $r21;

        r0 := @parameter0: java.lang.Class;

        if r0 == null goto label01;

        $z0 = virtualinvoke r0.<java.lang.Class: boolean isArray()>();

        if $z0 != 0 goto label01;

        $r1 = <org.springframework.beans.BeanUtils: java.util.Map unknownEditorTypes>;

        $z1 = interfaceinvoke $r1.<java.util.Map: boolean containsKey(java.lang.Object)>(r0);

        if $z1 == 0 goto label02;

     label01:
        return null;

     label02:
        $r2 = virtualinvoke r0.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        r39 = $r2;

        if $r2 != null goto label07;

     label03:
        $r20 = staticinvoke <java.lang.ClassLoader: java.lang.ClassLoader getSystemClassLoader()>();

        r39 = $r20;

        if $r20 != null goto label07;

     label04:
        return null;

     label05:
        $r33 := @caughtexception;

        $r34 = <org.springframework.beans.BeanUtils: org.apache.commons.logging.Log logger>;

        $z5 = interfaceinvoke $r34.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z5 == 0 goto label06;

        $r36 = <org.springframework.beans.BeanUtils: org.apache.commons.logging.Log logger>;

        $r35 = new java.lang.StringBuilder;

        specialinvoke $r35.<java.lang.StringBuilder: void <init>(java.lang.String)>("Could not access system ClassLoader: ");

        $r37 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r33);

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r36.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r38);

     label06:
        return null;

     label07:
        $r3 = new java.lang.StringBuilder;

        $r4 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r5 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r4);

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>($r5);

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Editor");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

     label08:
        $r8 = virtualinvoke r39.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>($r7);

        $r9 = class "Ljava/beans/PropertyEditor;";

        $z2 = virtualinvoke $r9.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r8);

        if $z2 != 0 goto label11;

        $r12 = <org.springframework.beans.BeanUtils: org.apache.commons.logging.Log logger>;

        $z3 = interfaceinvoke $r12.<org.apache.commons.logging.Log: boolean isWarnEnabled()>();

        if $z3 == 0 goto label09;

        $r16 = <org.springframework.beans.BeanUtils: org.apache.commons.logging.Log logger>;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>(java.lang.String)>("Editor class [");

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] does not implement [java.beans.PropertyEditor] interface");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r16.<org.apache.commons.logging.Log: void warn(java.lang.Object)>($r19);

     label09:
        $r14 = <org.springframework.beans.BeanUtils: java.util.Map unknownEditorTypes>;

        $r13 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        interfaceinvoke $r14.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, $r13);

     label10:
        return null;

     label11:
        $r10 = staticinvoke <org.springframework.beans.BeanUtils: java.lang.Object instantiateClass(java.lang.Class)>($r8);

        $r11 = (java.beans.PropertyEditor) $r10;

     label12:
        return $r11;

     label13:
        $r21 := @caughtexception;

        $r22 = <org.springframework.beans.BeanUtils: org.apache.commons.logging.Log logger>;

        $z4 = interfaceinvoke $r22.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z4 == 0 goto label14;

        $r26 = <org.springframework.beans.BeanUtils: org.apache.commons.logging.Log logger>;

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>(java.lang.String)>("No property editor [");

        $r27 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] found for type ");

        $r29 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r30 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r29);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" according to \'Editor\' suffix convention");

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r26.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r32);

     label14:
        $r24 = <org.springframework.beans.BeanUtils: java.util.Map unknownEditorTypes>;

        $r23 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        interfaceinvoke $r24.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, $r23);

        return null;

        catch java.lang.Throwable from label03 to label04 with label05;
        catch java.lang.ClassNotFoundException from label08 to label10 with label13;
        catch java.lang.ClassNotFoundException from label11 to label12 with label13;
    }

    public static java.lang.Class findPropertyType(java.lang.String, java.lang.Class[])
    {
        java.beans.PropertyDescriptor $r3;
        int i0, i1;
        java.lang.Class[] r0;
        java.lang.Class r1, $r4;
        java.lang.String r2;

        r2 := @parameter0: java.lang.String;

        r0 := @parameter1: java.lang.Class[];

        if r0 == null goto label4;

        i0 = lengthof r0;

        i1 = 0;

        goto label3;

     label1:
        r1 = r0[i1];

        $r3 = staticinvoke <org.springframework.beans.BeanUtils: java.beans.PropertyDescriptor getPropertyDescriptor(java.lang.Class,java.lang.String)>(r1, r2);

        if $r3 == null goto label2;

        $r4 = virtualinvoke $r3.<java.beans.PropertyDescriptor: java.lang.Class getPropertyType()>();

        return $r4;

     label2:
        i1 = i1 + 1;

     label3:
        if i1 < i0 goto label1;

     label4:
        return class "Ljava/lang/Object;";
    }

    public static org.springframework.core.MethodParameter getWriteMethodParameter(java.beans.PropertyDescriptor)
    {
        java.beans.PropertyDescriptor r0;
        org.springframework.core.MethodParameter $r1, $r3, $r5;
        org.springframework.beans.GenericTypeAwarePropertyDescriptor $r4;
        java.lang.reflect.Method $r2;
        boolean $z0;

        r0 := @parameter0: java.beans.PropertyDescriptor;

        $z0 = r0 instanceof org.springframework.beans.GenericTypeAwarePropertyDescriptor;

        if $z0 == 0 goto label1;

        $r3 = new org.springframework.core.MethodParameter;

        $r4 = (org.springframework.beans.GenericTypeAwarePropertyDescriptor) r0;

        $r5 = virtualinvoke $r4.<org.springframework.beans.GenericTypeAwarePropertyDescriptor: org.springframework.core.MethodParameter getWriteMethodParameter()>();

        specialinvoke $r3.<org.springframework.core.MethodParameter: void <init>(org.springframework.core.MethodParameter)>($r5);

        return $r3;

     label1:
        $r1 = new org.springframework.core.MethodParameter;

        $r2 = virtualinvoke r0.<java.beans.PropertyDescriptor: java.lang.reflect.Method getWriteMethod()>();

        specialinvoke $r1.<org.springframework.core.MethodParameter: void <init>(java.lang.reflect.Method,int)>($r2, 0);

        return $r1;
    }

    public static boolean isSimpleProperty(java.lang.Class)
    {
        java.lang.Class r0, $r1;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: java.lang.Class;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "Class must not be null");

        $z0 = staticinvoke <org.springframework.beans.BeanUtils: boolean isSimpleValueType(java.lang.Class)>(r0);

        if $z0 != 0 goto label2;

        $z1 = virtualinvoke r0.<java.lang.Class: boolean isArray()>();

        if $z1 == 0 goto label1;

        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.Class getComponentType()>();

        $z2 = staticinvoke <org.springframework.beans.BeanUtils: boolean isSimpleValueType(java.lang.Class)>($r1);

        if $z2 != 0 goto label2;

     label1:
        return 0;

     label2:
        return 1;
    }

    public static boolean isSimpleValueType(java.lang.Class)
    {
        java.lang.Class r0, $r1, $r2, $r3;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;

        r0 := @parameter0: java.lang.Class;

        $z0 = staticinvoke <org.springframework.util.ClassUtils: boolean isPrimitiveOrWrapper(java.lang.Class)>(r0);

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r0.<java.lang.Class: boolean isEnum()>();

        if $z1 != 0 goto label1;

        $r1 = class "Ljava/lang/CharSequence;";

        $z2 = virtualinvoke $r1.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r0);

        if $z2 != 0 goto label1;

        $r2 = class "Ljava/lang/Number;";

        $z3 = virtualinvoke $r2.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r0);

        if $z3 != 0 goto label1;

        $r3 = class "Ljava/util/Date;";

        $z4 = virtualinvoke $r3.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r0);

        if $z4 != 0 goto label1;

        $z5 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(class "Ljava/net/URI;");

        if $z5 != 0 goto label1;

        $z6 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(class "Ljava/net/URL;");

        if $z6 != 0 goto label1;

        $z7 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(class "Ljava/util/Locale;");

        if $z7 != 0 goto label1;

        $z8 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(class "Ljava/lang/Class;");

        if $z8 != 0 goto label1;

        return 0;

     label1:
        return 1;
    }

    public static void copyProperties(java.lang.Object, java.lang.Object) throws org.springframework.beans.BeansException
    {
        java.lang.Object r0, r1;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        staticinvoke <org.springframework.beans.BeanUtils: void copyProperties(java.lang.Object,java.lang.Object,java.lang.Class,java.lang.String[])>(r0, r1, null, null);

        return;
    }

    public static void copyProperties(java.lang.Object, java.lang.Object, java.lang.Class) throws org.springframework.beans.BeansException
    {
        java.lang.Object r0, r1;
        java.lang.Class r2;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.lang.Class;

        staticinvoke <org.springframework.beans.BeanUtils: void copyProperties(java.lang.Object,java.lang.Object,java.lang.Class,java.lang.String[])>(r0, r1, r2, null);

        return;
    }

    public static void copyProperties(java.lang.Object, java.lang.Object, java.lang.String[]) throws org.springframework.beans.BeansException
    {
        java.lang.Object r0, r1;
        java.lang.String[] r2;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.lang.String[];

        staticinvoke <org.springframework.beans.BeanUtils: void copyProperties(java.lang.Object,java.lang.Object,java.lang.Class,java.lang.String[])>(r0, r1, null, r2);

        return;
    }

    private static void copyProperties(java.lang.Object, java.lang.Object, java.lang.Class, java.lang.String[]) throws org.springframework.beans.BeansException
    {
        java.beans.PropertyDescriptor[] $r3;
        java.lang.reflect.Method $r7, $r11, $r12, $r16;
        boolean $z0, $z1, $z2, $z3;
        java.util.List r5, $r33;
        java.beans.PropertyDescriptor r6, $r10;
        java.lang.StringBuilder $r21, $r24, $r25, $r27, $r28;
        java.lang.Throwable $r30;
        java.lang.Object[] $r14, $r18;
        java.lang.String[] r4;
        int $i0, $i1, $i2, i3;
        java.lang.String $r9, $r19, $r23, $r26, $r29;
        org.springframework.beans.FatalBeanException $r31;
        java.lang.IllegalArgumentException $r20;
        java.lang.Object r0, r1, $r15;
        java.lang.Class r2, $r8, $r13, $r17, $r22, r32;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.lang.Class;

        r4 := @parameter3: java.lang.String[];

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "Source must not be null");

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r1, "Target must not be null");

        r32 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        if r2 == null goto label02;

        $z3 = virtualinvoke r2.<java.lang.Class: boolean isInstance(java.lang.Object)>(r1);

        if $z3 != 0 goto label01;

        $r20 = new java.lang.IllegalArgumentException;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>(java.lang.String)>("Target class [");

        $r22 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r23 = virtualinvoke $r22.<java.lang.Class: java.lang.String getName()>();

        $r24 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] not assignable to Editable class [");

        $r26 = virtualinvoke r2.<java.lang.Class: java.lang.String getName()>();

        $r27 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r26);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r20.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r29);

        throw $r20;

     label01:
        r32 = r2;

     label02:
        $r3 = staticinvoke <org.springframework.beans.BeanUtils: java.beans.PropertyDescriptor[] getPropertyDescriptors(java.lang.Class)>(r32);

        if r4 == null goto label03;

        $r33 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r4);

        goto label04;

     label03:
        $r33 = null;

     label04:
        r5 = $r33;

        $i2 = lengthof $r3;

        i3 = 0;

        goto label13;

     label05:
        r6 = $r3[i3];

        $r7 = virtualinvoke r6.<java.beans.PropertyDescriptor: java.lang.reflect.Method getWriteMethod()>();

        if $r7 == null goto label12;

        if r4 == null goto label06;

        $r19 = virtualinvoke r6.<java.beans.PropertyDescriptor: java.lang.String getName()>();

        $z2 = interfaceinvoke r5.<java.util.List: boolean contains(java.lang.Object)>($r19);

        if $z2 != 0 goto label12;

     label06:
        $r8 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r9 = virtualinvoke r6.<java.beans.PropertyDescriptor: java.lang.String getName()>();

        $r10 = staticinvoke <org.springframework.beans.BeanUtils: java.beans.PropertyDescriptor getPropertyDescriptor(java.lang.Class,java.lang.String)>($r8, $r9);

        if $r10 == null goto label12;

        $r11 = virtualinvoke $r10.<java.beans.PropertyDescriptor: java.lang.reflect.Method getReadMethod()>();

        if $r11 == null goto label12;

     label07:
        $r12 = virtualinvoke $r10.<java.beans.PropertyDescriptor: java.lang.reflect.Method getReadMethod()>();

        $r13 = virtualinvoke $r12.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>();

        $i0 = virtualinvoke $r13.<java.lang.Class: int getModifiers()>();

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>($i0);

        if $z0 != 0 goto label08;

        virtualinvoke $r12.<java.lang.reflect.Method: void setAccessible(boolean)>(1);

     label08:
        $r14 = newarray (java.lang.Object)[0];

        $r15 = virtualinvoke $r12.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r0, $r14);

        $r16 = virtualinvoke r6.<java.beans.PropertyDescriptor: java.lang.reflect.Method getWriteMethod()>();

        $r17 = virtualinvoke $r16.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>();

        $i1 = virtualinvoke $r17.<java.lang.Class: int getModifiers()>();

        $z1 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>($i1);

        if $z1 != 0 goto label09;

        virtualinvoke $r16.<java.lang.reflect.Method: void setAccessible(boolean)>(1);

     label09:
        $r18 = newarray (java.lang.Object)[1];

        $r18[0] = $r15;

        virtualinvoke $r16.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r1, $r18);

     label10:
        goto label12;

     label11:
        $r30 := @caughtexception;

        $r31 = new org.springframework.beans.FatalBeanException;

        specialinvoke $r31.<org.springframework.beans.FatalBeanException: void <init>(java.lang.String,java.lang.Throwable)>("Could not copy properties from source to target", $r30);

        throw $r31;

     label12:
        i3 = i3 + 1;

     label13:
        if i3 < $i2 goto label05;

        return;

        catch java.lang.Throwable from label07 to label10 with label11;
    }
}
