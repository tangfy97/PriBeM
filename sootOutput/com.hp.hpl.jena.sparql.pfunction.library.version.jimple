public class com.hp.hpl.jena.sparql.pfunction.library.version extends com.hp.hpl.jena.sparql.pfunction.PropertyFunctionEval
{

    public void <init>()
    {
        com.hp.hpl.jena.sparql.pfunction.PropFuncArgType $r1, $r2;
        com.hp.hpl.jena.sparql.pfunction.library.version r0;

        r0 := @this: com.hp.hpl.jena.sparql.pfunction.library.version;

        $r2 = <com.hp.hpl.jena.sparql.pfunction.PropFuncArgType: com.hp.hpl.jena.sparql.pfunction.PropFuncArgType PF_ARG_SINGLE>;

        $r1 = <com.hp.hpl.jena.sparql.pfunction.PropFuncArgType: com.hp.hpl.jena.sparql.pfunction.PropFuncArgType PF_ARG_SINGLE>;

        specialinvoke r0.<com.hp.hpl.jena.sparql.pfunction.PropertyFunctionEval: void <init>(com.hp.hpl.jena.sparql.pfunction.PropFuncArgType,com.hp.hpl.jena.sparql.pfunction.PropFuncArgType)>($r2, $r1);

        return;
    }

    public com.hp.hpl.jena.sparql.engine.QueryIterator execEvaluated(com.hp.hpl.jena.sparql.engine.binding.Binding, com.hp.hpl.jena.sparql.pfunction.PropFuncArg, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.sparql.pfunction.PropFuncArg, com.hp.hpl.jena.sparql.engine.ExecutionContext)
    {
        com.hp.hpl.jena.sparql.mgt.SystemInfo r10;
        com.hp.hpl.jena.graph.Node $r2, $r4, $r12, $r14, $r19, r20;
        java.util.ArrayList $r0;
        com.hp.hpl.jena.sparql.pfunction.PropFuncArg r1, r3;
        com.hp.hpl.jena.sparql.engine.binding.BindingMap $r16;
        com.hp.hpl.jena.sparql.engine.ExecutionContext r8;
        java.lang.String $r13;
        boolean $z0, $z1, $z2, $z3, $z4;
        com.hp.hpl.jena.sparql.engine.iterator.QueryIterPlainWrapper $r6;
        java.util.Iterator $r5, $r7;
        com.hp.hpl.jena.sparql.core.Var $r17, $r18;
        com.hp.hpl.jena.sparql.engine.binding.Binding r15;
        java.lang.Object $r9;
        com.hp.hpl.jena.sparql.pfunction.library.version r11;

        r11 := @this: com.hp.hpl.jena.sparql.pfunction.library.version;

        r15 := @parameter0: com.hp.hpl.jena.sparql.engine.binding.Binding;

        r1 := @parameter1: com.hp.hpl.jena.sparql.pfunction.PropFuncArg;

        r20 := @parameter2: com.hp.hpl.jena.graph.Node;

        r3 := @parameter3: com.hp.hpl.jena.sparql.pfunction.PropFuncArg;

        r8 := @parameter4: com.hp.hpl.jena.sparql.engine.ExecutionContext;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.sparql.pfunction.PropFuncArg: com.hp.hpl.jena.graph.Node getArg()>();

        $r4 = virtualinvoke r3.<com.hp.hpl.jena.sparql.pfunction.PropFuncArg: com.hp.hpl.jena.graph.Node getArg()>();

        $r5 = staticinvoke <com.hp.hpl.jena.sparql.SystemARQ: java.util.Iterator registeredSubsystems()>();

     label1:
        $z4 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label6;

        $r9 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r10 = (com.hp.hpl.jena.sparql.mgt.SystemInfo) $r9;

        $r12 = virtualinvoke r10.<com.hp.hpl.jena.sparql.mgt.SystemInfo: com.hp.hpl.jena.graph.Node getIRI()>();

        $z0 = specialinvoke r11.<com.hp.hpl.jena.sparql.pfunction.library.version: boolean isSameOrVar(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r2, $r12);

        if $z0 != 0 goto label2;

        goto label1;

     label2:
        $r13 = virtualinvoke r10.<com.hp.hpl.jena.sparql.mgt.SystemInfo: java.lang.String getVersion()>();

        $r14 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createLiteral(java.lang.String)>($r13);

        $z1 = specialinvoke r11.<com.hp.hpl.jena.sparql.pfunction.library.version: boolean isSameOrVar(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r4, $r14);

        if $z1 != 0 goto label3;

        goto label1;

     label3:
        $r16 = staticinvoke <com.hp.hpl.jena.sparql.engine.binding.BindingFactory: com.hp.hpl.jena.sparql.engine.binding.BindingMap create(com.hp.hpl.jena.sparql.engine.binding.Binding)>(r15);

        $z2 = virtualinvoke $r2.<com.hp.hpl.jena.graph.Node: boolean isVariable()>();

        if $z2 == 0 goto label4;

        $r18 = staticinvoke <com.hp.hpl.jena.sparql.core.Var: com.hp.hpl.jena.sparql.core.Var alloc(com.hp.hpl.jena.graph.Node)>($r2);

        $r19 = virtualinvoke r10.<com.hp.hpl.jena.sparql.mgt.SystemInfo: com.hp.hpl.jena.graph.Node getIRI()>();

        interfaceinvoke $r16.<com.hp.hpl.jena.sparql.engine.binding.BindingMap: void add(com.hp.hpl.jena.sparql.core.Var,com.hp.hpl.jena.graph.Node)>($r18, $r19);

     label4:
        $z3 = virtualinvoke $r2.<com.hp.hpl.jena.graph.Node: boolean isVariable()>();

        if $z3 == 0 goto label5;

        $r17 = staticinvoke <com.hp.hpl.jena.sparql.core.Var: com.hp.hpl.jena.sparql.core.Var alloc(com.hp.hpl.jena.graph.Node)>($r4);

        interfaceinvoke $r16.<com.hp.hpl.jena.sparql.engine.binding.BindingMap: void add(com.hp.hpl.jena.sparql.core.Var,com.hp.hpl.jena.graph.Node)>($r17, $r14);

     label5:
        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r16);

        goto label1;

     label6:
        $r6 = new com.hp.hpl.jena.sparql.engine.iterator.QueryIterPlainWrapper;

        $r7 = interfaceinvoke $r0.<java.util.List: java.util.Iterator iterator()>();

        specialinvoke $r6.<com.hp.hpl.jena.sparql.engine.iterator.QueryIterPlainWrapper: void <init>(java.util.Iterator,com.hp.hpl.jena.sparql.engine.ExecutionContext)>($r7, r8);

        return $r6;
    }

    private boolean isSameOrVar(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.graph.Node r0, r1;
        com.hp.hpl.jena.sparql.pfunction.library.version r2;
        boolean $z0, $z1, $z2;

        r2 := @this: com.hp.hpl.jena.sparql.pfunction.library.version;

        r0 := @parameter0: com.hp.hpl.jena.graph.Node;

        r1 := @parameter1: com.hp.hpl.jena.graph.Node;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: boolean isVariable()>();

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: boolean equals(java.lang.Object)>(r1);

        if $z1 == 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }
}
