public class org.springframework.http.converter.ByteArrayHttpMessageConverter extends org.springframework.http.converter.AbstractHttpMessageConverter
{

    public void <init>()
    {
        org.springframework.http.converter.ByteArrayHttpMessageConverter r0;
        org.springframework.http.MediaType[] $r1;
        org.springframework.http.MediaType $r2, $r3;

        r0 := @this: org.springframework.http.converter.ByteArrayHttpMessageConverter;

        $r1 = newarray (org.springframework.http.MediaType)[2];

        $r2 = new org.springframework.http.MediaType;

        specialinvoke $r2.<org.springframework.http.MediaType: void <init>(java.lang.String,java.lang.String)>("application", "octet-stream");

        $r1[0] = $r2;

        $r3 = <org.springframework.http.MediaType: org.springframework.http.MediaType ALL>;

        $r1[1] = $r3;

        specialinvoke r0.<org.springframework.http.converter.AbstractHttpMessageConverter: void <init>(org.springframework.http.MediaType[])>($r1);

        return;
    }

    public boolean supports(java.lang.Class)
    {
        org.springframework.http.converter.ByteArrayHttpMessageConverter r2;
        java.lang.Class r0, $r1;
        boolean $z0;

        r2 := @this: org.springframework.http.converter.ByteArrayHttpMessageConverter;

        r0 := @parameter0: java.lang.Class;

        $r1 = class "[B";

        $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>(r0);

        return $z0;
    }

    public byte[] readInternal(java.lang.Class, org.springframework.http.HttpInputMessage) throws java.io.IOException
    {
        byte[] $r3, $r6;
        org.springframework.http.converter.ByteArrayHttpMessageConverter r7;
        java.io.ByteArrayOutputStream $r9;
        org.springframework.http.HttpHeaders $r1;
        long $l0;
        org.springframework.http.HttpInputMessage r0;
        byte $b1;
        int $i2, $i3;
        java.lang.Class r8;
        java.io.InputStream $r2, $r5;

        r7 := @this: org.springframework.http.converter.ByteArrayHttpMessageConverter;

        r8 := @parameter0: java.lang.Class;

        r0 := @parameter1: org.springframework.http.HttpInputMessage;

        $r1 = interfaceinvoke r0.<org.springframework.http.HttpInputMessage: org.springframework.http.HttpHeaders getHeaders()>();

        $l0 = virtualinvoke $r1.<org.springframework.http.HttpHeaders: long getContentLength()>();

        $b1 = $l0 cmp 0L;

        $i3 = (int) $b1;

        if $i3 < 0 goto label1;

        $r9 = new java.io.ByteArrayOutputStream;

        $i2 = (int) $l0;

        specialinvoke $r9.<java.io.ByteArrayOutputStream: void <init>(int)>($i2);

        $r5 = interfaceinvoke r0.<org.springframework.http.HttpInputMessage: java.io.InputStream getBody()>();

        staticinvoke <org.springframework.util.FileCopyUtils: int copy(java.io.InputStream,java.io.OutputStream)>($r5, $r9);

        $r6 = virtualinvoke $r9.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        return $r6;

     label1:
        $r2 = interfaceinvoke r0.<org.springframework.http.HttpInputMessage: java.io.InputStream getBody()>();

        $r3 = staticinvoke <org.springframework.util.FileCopyUtils: byte[] copyToByteArray(java.io.InputStream)>($r2);

        return $r3;
    }

    protected java.lang.Long getContentLength(byte[], org.springframework.http.MediaType)
    {
        byte[] r0;
        org.springframework.http.converter.ByteArrayHttpMessageConverter r2;
        java.lang.Long $r1;
        org.springframework.http.MediaType r3;
        int $i0;
        long $l1;

        r2 := @this: org.springframework.http.converter.ByteArrayHttpMessageConverter;

        r0 := @parameter0: byte[];

        r3 := @parameter1: org.springframework.http.MediaType;

        $i0 = lengthof r0;

        $l1 = (long) $i0;

        $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

        return $r1;
    }

    protected void writeInternal(byte[], org.springframework.http.HttpOutputMessage) throws java.io.IOException
    {
        java.io.OutputStream $r2;
        byte[] r0;
        org.springframework.http.converter.ByteArrayHttpMessageConverter r3;
        org.springframework.http.HttpOutputMessage r1;

        r3 := @this: org.springframework.http.converter.ByteArrayHttpMessageConverter;

        r0 := @parameter0: byte[];

        r1 := @parameter1: org.springframework.http.HttpOutputMessage;

        $r2 = interfaceinvoke r1.<org.springframework.http.HttpOutputMessage: java.io.OutputStream getBody()>();

        staticinvoke <org.springframework.util.FileCopyUtils: void copy(byte[],java.io.OutputStream)>(r0, $r2);

        return;
    }

    public volatile java.lang.Object readInternal(java.lang.Class, org.springframework.http.HttpInputMessage) throws java.io.IOException, org.springframework.http.converter.HttpMessageNotReadableException
    {
        org.springframework.http.converter.ByteArrayHttpMessageConverter r0;
        byte[] $r4;
        org.springframework.http.HttpInputMessage r2;
        java.lang.Class r1, $r3;

        r0 := @this: org.springframework.http.converter.ByteArrayHttpMessageConverter;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: org.springframework.http.HttpInputMessage;

        $r3 = (java.lang.Class) r1;

        $r4 = virtualinvoke r0.<org.springframework.http.converter.ByteArrayHttpMessageConverter: byte[] readInternal(java.lang.Class,org.springframework.http.HttpInputMessage)>($r3, r2);

        return $r4;
    }

    protected volatile java.lang.Long getContentLength(java.lang.Object, org.springframework.http.MediaType)
    {
        org.springframework.http.converter.ByteArrayHttpMessageConverter r0;
        byte[] $r3;
        java.lang.Long $r4;
        org.springframework.http.MediaType r2;
        java.lang.Object r1;

        r0 := @this: org.springframework.http.converter.ByteArrayHttpMessageConverter;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.springframework.http.MediaType;

        $r3 = (byte[]) r1;

        $r4 = virtualinvoke r0.<org.springframework.http.converter.ByteArrayHttpMessageConverter: java.lang.Long getContentLength(byte[],org.springframework.http.MediaType)>($r3, r2);

        return $r4;
    }

    protected volatile void writeInternal(java.lang.Object, org.springframework.http.HttpOutputMessage) throws java.io.IOException, org.springframework.http.converter.HttpMessageNotWritableException
    {
        org.springframework.http.converter.ByteArrayHttpMessageConverter r0;
        byte[] $r3;
        java.lang.Object r1;
        org.springframework.http.HttpOutputMessage r2;

        r0 := @this: org.springframework.http.converter.ByteArrayHttpMessageConverter;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.springframework.http.HttpOutputMessage;

        $r3 = (byte[]) r1;

        virtualinvoke r0.<org.springframework.http.converter.ByteArrayHttpMessageConverter: void writeInternal(byte[],org.springframework.http.HttpOutputMessage)>($r3, r2);

        return;
    }
}
