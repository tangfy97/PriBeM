public abstract class org.dom4j.tree.AbstractBranch extends org.dom4j.tree.AbstractNode implements org.dom4j.Branch
{
    protected static final int DEFAULT_CONTENT_LIST_SIZE;

    public void <init>()
    {
        org.dom4j.tree.AbstractBranch r0;

        r0 := @this: org.dom4j.tree.AbstractBranch;

        specialinvoke r0.<org.dom4j.tree.AbstractNode: void <init>()>();

        return;
    }

    public boolean isReadOnly()
    {
        org.dom4j.tree.AbstractBranch r0;

        r0 := @this: org.dom4j.tree.AbstractBranch;

        return 0;
    }

    public boolean hasContent()
    {
        int $i0;
        org.dom4j.tree.AbstractBranch r0;
        boolean $z0;

        r0 := @this: org.dom4j.tree.AbstractBranch;

        $i0 = virtualinvoke r0.<org.dom4j.tree.AbstractBranch: int nodeCount()>();

        if $i0 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public java.util.List content()
    {
        org.dom4j.tree.ContentListFacade $r2;
        java.util.List $r1;
        org.dom4j.tree.AbstractBranch r0;

        r0 := @this: org.dom4j.tree.AbstractBranch;

        $r1 = virtualinvoke r0.<org.dom4j.tree.AbstractBranch: java.util.List contentList()>();

        $r2 = new org.dom4j.tree.ContentListFacade;

        specialinvoke $r2.<org.dom4j.tree.ContentListFacade: void <init>(org.dom4j.tree.AbstractBranch,java.util.List)>(r0, $r1);

        return $r2;
    }

    public java.lang.String getText()
    {
        java.util.List $r1;
        java.lang.StringBuffer $r4;
        int $i0, i1;
        java.lang.Object $r2, $r6;
        org.dom4j.tree.AbstractBranch r0;
        java.lang.String $r3, $r5, $r7;

        r0 := @this: org.dom4j.tree.AbstractBranch;

        $r1 = virtualinvoke r0.<org.dom4j.tree.AbstractBranch: java.util.List contentList()>();

        if $r1 == null goto label4;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        if $i0 < 1 goto label4;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(0);

        $r3 = virtualinvoke r0.<org.dom4j.tree.AbstractBranch: java.lang.String getContentAsText(java.lang.Object)>($r2);

        if $i0 != 1 goto label1;

        return $r3;

     label1:
        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>(java.lang.String)>($r3);

        i1 = 1;

     label2:
        if i1 >= $i0 goto label3;

        $r6 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i1);

        $r7 = virtualinvoke r0.<org.dom4j.tree.AbstractBranch: java.lang.String getContentAsText(java.lang.Object)>($r6);

        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        i1 = i1 + 1;

        goto label2;

     label3:
        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r5;

     label4:
        return "";
    }

    protected java.lang.String getContentAsText(java.lang.Object)
    {
        org.dom4j.Node r2;
        short $s0;
        int $i1;
        java.lang.Object r0;
        java.lang.String $r1, $r3;
        org.dom4j.tree.AbstractBranch r4;
        boolean $z0, $z1;

        r4 := @this: org.dom4j.tree.AbstractBranch;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof org.dom4j.Node;

        if $z0 == 0 goto label3;

        r2 = (org.dom4j.Node) r0;

        $s0 = interfaceinvoke r2.<org.dom4j.Node: short getNodeType()>();

        $i1 = (int) $s0;

        tableswitch($i1)
        {
            case 3: goto label1;
            case 4: goto label1;
            case 5: goto label1;
            default: goto label2;
        };

     label1:
        $r3 = interfaceinvoke r2.<org.dom4j.Node: java.lang.String getText()>();

        return $r3;

     label2:
        goto label4;

     label3:
        $z1 = r0 instanceof java.lang.String;

        if $z1 == 0 goto label4;

        $r1 = (java.lang.String) r0;

        return $r1;

     label4:
        return "";
    }

    protected java.lang.String getContentAsStringValue(java.lang.Object)
    {
        org.dom4j.Node r2;
        short $s0;
        int $i1;
        java.lang.Object r0;
        java.lang.String $r1, $r3;
        org.dom4j.tree.AbstractBranch r4;
        boolean $z0, $z1;

        r4 := @this: org.dom4j.tree.AbstractBranch;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof org.dom4j.Node;

        if $z0 == 0 goto label3;

        r2 = (org.dom4j.Node) r0;

        $s0 = interfaceinvoke r2.<org.dom4j.Node: short getNodeType()>();

        $i1 = (int) $s0;

        tableswitch($i1)
        {
            case 1: goto label1;
            case 2: goto label2;
            case 3: goto label1;
            case 4: goto label1;
            case 5: goto label1;
            default: goto label2;
        };

     label1:
        $r3 = interfaceinvoke r2.<org.dom4j.Node: java.lang.String getStringValue()>();

        return $r3;

     label2:
        goto label4;

     label3:
        $z1 = r0 instanceof java.lang.String;

        if $z1 == 0 goto label4;

        $r1 = (java.lang.String) r0;

        return $r1;

     label4:
        return "";
    }

    public java.lang.String getTextTrim()
    {
        java.lang.StringBuffer $r2;
        java.util.StringTokenizer $r3;
        org.dom4j.tree.AbstractBranch r0;
        java.lang.String $r1, $r4, $r5;
        boolean $z0, $z1;

        r0 := @this: org.dom4j.tree.AbstractBranch;

        $r1 = virtualinvoke r0.<org.dom4j.tree.AbstractBranch: java.lang.String getText()>();

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r3 = new java.util.StringTokenizer;

        specialinvoke $r3.<java.util.StringTokenizer: void <init>(java.lang.String)>($r1);

     label1:
        $z0 = virtualinvoke $r3.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z0 == 0 goto label3;

        $r5 = virtualinvoke $r3.<java.util.StringTokenizer: java.lang.String nextToken()>();

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $z1 = virtualinvoke $r3.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z1 == 0 goto label2;

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");

     label2:
        goto label1;

     label3:
        $r4 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r4;
    }

    public void setProcessingInstructions(java.util.List)
    {
        java.util.List r0;
        java.util.Iterator $r1;
        java.lang.Object $r2;
        org.dom4j.tree.AbstractBranch r4;
        org.dom4j.ProcessingInstruction r3;
        boolean $z0;

        r4 := @this: org.dom4j.tree.AbstractBranch;

        r0 := @parameter0: java.util.List;

        $r1 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (org.dom4j.ProcessingInstruction) $r2;

        virtualinvoke r4.<org.dom4j.tree.AbstractBranch: void addNode(org.dom4j.Node)>(r3);

        goto label1;

     label2:
        return;
    }

    public org.dom4j.Element addElement(java.lang.String)
    {
        org.dom4j.Element $r3;
        org.dom4j.tree.AbstractBranch r0;
        java.lang.String r2;
        org.dom4j.DocumentFactory $r1;

        r0 := @this: org.dom4j.tree.AbstractBranch;

        r2 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<org.dom4j.tree.AbstractBranch: org.dom4j.DocumentFactory getDocumentFactory()>();

        $r3 = virtualinvoke $r1.<org.dom4j.DocumentFactory: org.dom4j.Element createElement(java.lang.String)>(r2);

        virtualinvoke r0.<org.dom4j.tree.AbstractBranch: void add(org.dom4j.Element)>($r3);

        return $r3;
    }

    public org.dom4j.Element addElement(java.lang.String, java.lang.String)
    {
        org.dom4j.Element $r4;
        org.dom4j.tree.AbstractBranch r0;
        java.lang.String r2, r3;
        org.dom4j.DocumentFactory $r1;

        r0 := @this: org.dom4j.tree.AbstractBranch;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        $r1 = virtualinvoke r0.<org.dom4j.tree.AbstractBranch: org.dom4j.DocumentFactory getDocumentFactory()>();

        $r4 = virtualinvoke $r1.<org.dom4j.DocumentFactory: org.dom4j.Element createElement(java.lang.String,java.lang.String)>(r2, r3);

        virtualinvoke r0.<org.dom4j.tree.AbstractBranch: void add(org.dom4j.Element)>($r4);

        return $r4;
    }

    public org.dom4j.Element addElement(org.dom4j.QName)
    {
        org.dom4j.QName r2;
        org.dom4j.Element $r3;
        org.dom4j.tree.AbstractBranch r0;
        org.dom4j.DocumentFactory $r1;

        r0 := @this: org.dom4j.tree.AbstractBranch;

        r2 := @parameter0: org.dom4j.QName;

        $r1 = virtualinvoke r0.<org.dom4j.tree.AbstractBranch: org.dom4j.DocumentFactory getDocumentFactory()>();

        $r3 = virtualinvoke $r1.<org.dom4j.DocumentFactory: org.dom4j.Element createElement(org.dom4j.QName)>(r2);

        virtualinvoke r0.<org.dom4j.tree.AbstractBranch: void add(org.dom4j.Element)>($r3);

        return $r3;
    }

    public org.dom4j.Element addElement(java.lang.String, java.lang.String, java.lang.String)
    {
        org.dom4j.Namespace $r2;
        org.dom4j.DocumentFactory $r4;
        org.dom4j.QName $r6;
        org.dom4j.Element $r7;
        java.lang.String r0, r1, r5;
        org.dom4j.tree.AbstractBranch r3;

        r3 := @this: org.dom4j.tree.AbstractBranch;

        r5 := @parameter0: java.lang.String;

        r0 := @parameter1: java.lang.String;

        r1 := @parameter2: java.lang.String;

        $r2 = staticinvoke <org.dom4j.Namespace: org.dom4j.Namespace get(java.lang.String,java.lang.String)>(r0, r1);

        $r4 = virtualinvoke r3.<org.dom4j.tree.AbstractBranch: org.dom4j.DocumentFactory getDocumentFactory()>();

        $r6 = virtualinvoke $r4.<org.dom4j.DocumentFactory: org.dom4j.QName createQName(java.lang.String,org.dom4j.Namespace)>(r5, $r2);

        $r7 = virtualinvoke r3.<org.dom4j.tree.AbstractBranch: org.dom4j.Element addElement(org.dom4j.QName)>($r6);

        return $r7;
    }

    public void add(org.dom4j.Node)
    {
        short $s0;
        org.dom4j.Node r0;
        org.dom4j.Comment $r2;
        int $i1;
        org.dom4j.Element $r4;
        org.dom4j.tree.AbstractBranch r1;
        org.dom4j.ProcessingInstruction $r3;

        r1 := @this: org.dom4j.tree.AbstractBranch;

        r0 := @parameter0: org.dom4j.Node;

        $s0 = interfaceinvoke r0.<org.dom4j.Node: short getNodeType()>();

        $i1 = (int) $s0;

        lookupswitch($i1)
        {
            case 1: goto label1;
            case 7: goto label3;
            case 8: goto label2;
            default: goto label4;
        };

     label1:
        $r4 = (org.dom4j.Element) r0;

        virtualinvoke r1.<org.dom4j.tree.AbstractBranch: void add(org.dom4j.Element)>($r4);

        goto label5;

     label2:
        $r2 = (org.dom4j.Comment) r0;

        virtualinvoke r1.<org.dom4j.tree.AbstractBranch: void add(org.dom4j.Comment)>($r2);

        goto label5;

     label3:
        $r3 = (org.dom4j.ProcessingInstruction) r0;

        virtualinvoke r1.<org.dom4j.tree.AbstractBranch: void add(org.dom4j.ProcessingInstruction)>($r3);

        goto label5;

     label4:
        virtualinvoke r1.<org.dom4j.tree.AbstractBranch: void invalidNodeTypeAddException(org.dom4j.Node)>(r0);

     label5:
        return;
    }

    public boolean remove(org.dom4j.Node)
    {
        org.dom4j.Node r0;
        short $s0;
        org.dom4j.Comment $r2;
        int $i1;
        org.dom4j.Element $r4;
        org.dom4j.tree.AbstractBranch r1;
        org.dom4j.ProcessingInstruction $r3;
        boolean $z0, $z1, $z2;

        r1 := @this: org.dom4j.tree.AbstractBranch;

        r0 := @parameter0: org.dom4j.Node;

        $s0 = interfaceinvoke r0.<org.dom4j.Node: short getNodeType()>();

        $i1 = (int) $s0;

        lookupswitch($i1)
        {
            case 1: goto label1;
            case 7: goto label3;
            case 8: goto label2;
            default: goto label4;
        };

     label1:
        $r4 = (org.dom4j.Element) r0;

        $z2 = virtualinvoke r1.<org.dom4j.tree.AbstractBranch: boolean remove(org.dom4j.Element)>($r4);

        return $z2;

     label2:
        $r2 = (org.dom4j.Comment) r0;

        $z0 = virtualinvoke r1.<org.dom4j.tree.AbstractBranch: boolean remove(org.dom4j.Comment)>($r2);

        return $z0;

     label3:
        $r3 = (org.dom4j.ProcessingInstruction) r0;

        $z1 = virtualinvoke r1.<org.dom4j.tree.AbstractBranch: boolean remove(org.dom4j.ProcessingInstruction)>($r3);

        return $z1;

     label4:
        virtualinvoke r1.<org.dom4j.tree.AbstractBranch: void invalidNodeTypeAddException(org.dom4j.Node)>(r0);

        return 0;
    }

    public void add(org.dom4j.Comment)
    {
        org.dom4j.tree.AbstractBranch r0;
        org.dom4j.Comment r1;

        r0 := @this: org.dom4j.tree.AbstractBranch;

        r1 := @parameter0: org.dom4j.Comment;

        virtualinvoke r0.<org.dom4j.tree.AbstractBranch: void addNode(org.dom4j.Node)>(r1);

        return;
    }

    public void add(org.dom4j.Element)
    {
        org.dom4j.Element r1;
        org.dom4j.tree.AbstractBranch r0;

        r0 := @this: org.dom4j.tree.AbstractBranch;

        r1 := @parameter0: org.dom4j.Element;

        virtualinvoke r0.<org.dom4j.tree.AbstractBranch: void addNode(org.dom4j.Node)>(r1);

        return;
    }

    public void add(org.dom4j.ProcessingInstruction)
    {
        org.dom4j.tree.AbstractBranch r0;
        org.dom4j.ProcessingInstruction r1;

        r0 := @this: org.dom4j.tree.AbstractBranch;

        r1 := @parameter0: org.dom4j.ProcessingInstruction;

        virtualinvoke r0.<org.dom4j.tree.AbstractBranch: void addNode(org.dom4j.Node)>(r1);

        return;
    }

    public boolean remove(org.dom4j.Comment)
    {
        org.dom4j.tree.AbstractBranch r0;
        org.dom4j.Comment r1;
        boolean $z0;

        r0 := @this: org.dom4j.tree.AbstractBranch;

        r1 := @parameter0: org.dom4j.Comment;

        $z0 = virtualinvoke r0.<org.dom4j.tree.AbstractBranch: boolean removeNode(org.dom4j.Node)>(r1);

        return $z0;
    }

    public boolean remove(org.dom4j.Element)
    {
        org.dom4j.Element r1;
        org.dom4j.tree.AbstractBranch r0;
        boolean $z0;

        r0 := @this: org.dom4j.tree.AbstractBranch;

        r1 := @parameter0: org.dom4j.Element;

        $z0 = virtualinvoke r0.<org.dom4j.tree.AbstractBranch: boolean removeNode(org.dom4j.Node)>(r1);

        return $z0;
    }

    public boolean remove(org.dom4j.ProcessingInstruction)
    {
        org.dom4j.tree.AbstractBranch r0;
        org.dom4j.ProcessingInstruction r1;
        boolean $z0;

        r0 := @this: org.dom4j.tree.AbstractBranch;

        r1 := @parameter0: org.dom4j.ProcessingInstruction;

        $z0 = virtualinvoke r0.<org.dom4j.tree.AbstractBranch: boolean removeNode(org.dom4j.Node)>(r1);

        return $z0;
    }

    public org.dom4j.Element elementByID(java.lang.String)
    {
        org.dom4j.Node $r1;
        int $i0, i1;
        org.dom4j.Element $r4, r5;
        org.dom4j.tree.AbstractBranch r0;
        java.lang.String $r2, r3;
        boolean $z0, $z1;

        r0 := @this: org.dom4j.tree.AbstractBranch;

        r3 := @parameter0: java.lang.String;

        i1 = 0;

        $i0 = virtualinvoke r0.<org.dom4j.tree.AbstractBranch: int nodeCount()>();

     label1:
        if i1 >= $i0 goto label4;

        $r1 = virtualinvoke r0.<org.dom4j.tree.AbstractBranch: org.dom4j.Node node(int)>(i1);

        $z0 = $r1 instanceof org.dom4j.Element;

        if $z0 == 0 goto label3;

        r5 = (org.dom4j.Element) $r1;

        $r2 = virtualinvoke r0.<org.dom4j.tree.AbstractBranch: java.lang.String elementID(org.dom4j.Element)>(r5);

        if $r2 == null goto label2;

        $z1 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(r3);

        if $z1 == 0 goto label2;

        return r5;

     label2:
        $r4 = interfaceinvoke r5.<org.dom4j.Element: org.dom4j.Element elementByID(java.lang.String)>(r3);

        if $r4 == null goto label3;

        return $r4;

     label3:
        i1 = i1 + 1;

        goto label1;

     label4:
        return null;
    }

    public void appendContent(org.dom4j.Branch)
    {
        org.dom4j.Branch r0;
        org.dom4j.Node $r1, $r4;
        int $i0, i1;
        java.lang.Object $r3;
        org.dom4j.tree.AbstractBranch r2;

        r2 := @this: org.dom4j.tree.AbstractBranch;

        r0 := @parameter0: org.dom4j.Branch;

        i1 = 0;

        $i0 = interfaceinvoke r0.<org.dom4j.Branch: int nodeCount()>();

     label1:
        if i1 >= $i0 goto label2;

        $r1 = interfaceinvoke r0.<org.dom4j.Branch: org.dom4j.Node node(int)>(i1);

        $r3 = interfaceinvoke $r1.<org.dom4j.Node: java.lang.Object clone()>();

        $r4 = (org.dom4j.Node) $r3;

        virtualinvoke r2.<org.dom4j.tree.AbstractBranch: void add(org.dom4j.Node)>($r4);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public org.dom4j.Node node(int)
    {
        org.dom4j.Node $r6;
        org.dom4j.Text $r5;
        org.dom4j.DocumentFactory $r3;
        java.util.List $r1;
        int i0;
        java.lang.Object $r2;
        org.dom4j.tree.AbstractBranch r0;
        java.lang.String $r4;
        boolean $z0, $z1;

        r0 := @this: org.dom4j.tree.AbstractBranch;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.dom4j.tree.AbstractBranch: java.util.List contentList()>();

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i0);

        $z0 = $r2 instanceof org.dom4j.Node;

        if $z0 == 0 goto label1;

        $r6 = (org.dom4j.Node) $r2;

        return $r6;

     label1:
        $z1 = $r2 instanceof java.lang.String;

        if $z1 == 0 goto label2;

        $r3 = virtualinvoke r0.<org.dom4j.tree.AbstractBranch: org.dom4j.DocumentFactory getDocumentFactory()>();

        $r4 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>();

        $r5 = virtualinvoke $r3.<org.dom4j.DocumentFactory: org.dom4j.Text createText(java.lang.String)>($r4);

        return $r5;

     label2:
        return null;
    }

    public int nodeCount()
    {
        int $i0;
        java.util.List $r1;
        org.dom4j.tree.AbstractBranch r0;

        r0 := @this: org.dom4j.tree.AbstractBranch;

        $r1 = virtualinvoke r0.<org.dom4j.tree.AbstractBranch: java.util.List contentList()>();

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        return $i0;
    }

    public int indexOf(org.dom4j.Node)
    {
        java.util.List $r1;
        org.dom4j.Node r2;
        int $i0;
        org.dom4j.tree.AbstractBranch r0;

        r0 := @this: org.dom4j.tree.AbstractBranch;

        r2 := @parameter0: org.dom4j.Node;

        $r1 = virtualinvoke r0.<org.dom4j.tree.AbstractBranch: java.util.List contentList()>();

        $i0 = interfaceinvoke $r1.<java.util.List: int indexOf(java.lang.Object)>(r2);

        return $i0;
    }

    public java.util.Iterator nodeIterator()
    {
        java.util.List $r1;
        org.dom4j.tree.AbstractBranch r0;
        java.util.Iterator $r2;

        r0 := @this: org.dom4j.tree.AbstractBranch;

        $r1 = virtualinvoke r0.<org.dom4j.tree.AbstractBranch: java.util.List contentList()>();

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

        return $r2;
    }

    protected java.lang.String elementID(org.dom4j.Element)
    {
        org.dom4j.Element r0;
        java.lang.String $r1;
        org.dom4j.tree.AbstractBranch r2;

        r2 := @this: org.dom4j.tree.AbstractBranch;

        r0 := @parameter0: org.dom4j.Element;

        $r1 = interfaceinvoke r0.<org.dom4j.Element: java.lang.String attributeValue(java.lang.String)>("ID");

        return $r1;
    }

    protected abstract java.util.List contentList();

    protected java.util.List createContentList()
    {
        org.dom4j.tree.AbstractBranch r1;
        java.util.ArrayList $r0;

        r1 := @this: org.dom4j.tree.AbstractBranch;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>(int)>(5);

        return $r0;
    }

    protected java.util.List createContentList(int)
    {
        int i0;
        org.dom4j.tree.AbstractBranch r1;
        java.util.ArrayList $r0;

        r1 := @this: org.dom4j.tree.AbstractBranch;

        i0 := @parameter0: int;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>(int)>(i0);

        return $r0;
    }

    protected org.dom4j.tree.BackedList createResultList()
    {
        java.util.List $r2;
        org.dom4j.tree.BackedList $r0;
        org.dom4j.tree.AbstractBranch r1;

        r1 := @this: org.dom4j.tree.AbstractBranch;

        $r0 = new org.dom4j.tree.BackedList;

        $r2 = virtualinvoke r1.<org.dom4j.tree.AbstractBranch: java.util.List contentList()>();

        specialinvoke $r0.<org.dom4j.tree.BackedList: void <init>(org.dom4j.tree.AbstractBranch,java.util.List)>(r1, $r2);

        return $r0;
    }

    protected java.util.List createSingleResultList(java.lang.Object)
    {
        java.util.List $r2;
        java.lang.Object r3;
        org.dom4j.tree.BackedList $r0;
        org.dom4j.tree.AbstractBranch r1;

        r1 := @this: org.dom4j.tree.AbstractBranch;

        r3 := @parameter0: java.lang.Object;

        $r0 = new org.dom4j.tree.BackedList;

        $r2 = virtualinvoke r1.<org.dom4j.tree.AbstractBranch: java.util.List contentList()>();

        specialinvoke $r0.<org.dom4j.tree.BackedList: void <init>(org.dom4j.tree.AbstractBranch,java.util.List,int)>(r1, $r2, 1);

        virtualinvoke $r0.<org.dom4j.tree.BackedList: void addLocal(java.lang.Object)>(r3);

        return $r0;
    }

    protected java.util.List createEmptyList()
    {
        java.util.List $r2;
        org.dom4j.tree.BackedList $r0;
        org.dom4j.tree.AbstractBranch r1;

        r1 := @this: org.dom4j.tree.AbstractBranch;

        $r0 = new org.dom4j.tree.BackedList;

        $r2 = virtualinvoke r1.<org.dom4j.tree.AbstractBranch: java.util.List contentList()>();

        specialinvoke $r0.<org.dom4j.tree.BackedList: void <init>(org.dom4j.tree.AbstractBranch,java.util.List,int)>(r1, $r2, 0);

        return $r0;
    }

    protected abstract void addNode(org.dom4j.Node);

    protected abstract void addNode(int, org.dom4j.Node);

    protected abstract boolean removeNode(org.dom4j.Node);

    protected abstract void childAdded(org.dom4j.Node);

    protected abstract void childRemoved(org.dom4j.Node);

    protected void contentRemoved()
    {
        java.util.List $r1;
        org.dom4j.Node $r3;
        int $i0, i1;
        java.lang.Object $r2;
        org.dom4j.tree.AbstractBranch r0;
        boolean $z0;

        r0 := @this: org.dom4j.tree.AbstractBranch;

        $r1 = virtualinvoke r0.<org.dom4j.tree.AbstractBranch: java.util.List contentList()>();

        i1 = 0;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

     label1:
        if i1 >= $i0 goto label3;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i1);

        $z0 = $r2 instanceof org.dom4j.Node;

        if $z0 == 0 goto label2;

        $r3 = (org.dom4j.Node) $r2;

        virtualinvoke r0.<org.dom4j.tree.AbstractBranch: void childRemoved(org.dom4j.Node)>($r3);

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return;
    }

    protected void invalidNodeTypeAddException(org.dom4j.Node)
    {
        org.dom4j.Node r3;
        java.lang.StringBuffer $r1, $r2, $r4, $r5, $r7;
        org.dom4j.IllegalAddException $r0;
        org.dom4j.tree.AbstractBranch r6;
        java.lang.String $r8;

        r6 := @this: org.dom4j.tree.AbstractBranch;

        r3 := @parameter0: org.dom4j.Node;

        $r0 = new org.dom4j.IllegalAddException;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Invalid node type. Cannot add node: ");

        $r4 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" to this branch: ");

        $r7 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r0.<org.dom4j.IllegalAddException: void <init>(java.lang.String)>($r8);

        throw $r0;
    }

    public static void <clinit>()
    {
        <org.dom4j.tree.AbstractBranch: int DEFAULT_CONTENT_LIST_SIZE> = 5;

        return;
    }
}
