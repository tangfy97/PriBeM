class org.apache.tika.fork.InputStreamProxy extends java.io.InputStream implements org.apache.tika.fork.ForkProxy
{
    private static final long serialVersionUID;
    private final int resource;
    private transient java.io.DataInputStream input;
    private transient java.io.DataOutputStream output;

    public void <init>(int)
    {
        int i0;
        org.apache.tika.fork.InputStreamProxy r0;

        r0 := @this: org.apache.tika.fork.InputStreamProxy;

        i0 := @parameter0: int;

        specialinvoke r0.<java.io.InputStream: void <init>()>();

        r0.<org.apache.tika.fork.InputStreamProxy: int resource> = i0;

        return;
    }

    public void init(java.io.DataInputStream, java.io.DataOutputStream)
    {
        java.io.DataInputStream r1;
        org.apache.tika.fork.InputStreamProxy r0;
        java.io.DataOutputStream r2;

        r0 := @this: org.apache.tika.fork.InputStreamProxy;

        r1 := @parameter0: java.io.DataInputStream;

        r2 := @parameter1: java.io.DataOutputStream;

        r0.<org.apache.tika.fork.InputStreamProxy: java.io.DataInputStream input> = r1;

        r0.<org.apache.tika.fork.InputStreamProxy: java.io.DataOutputStream output> = r2;

        return;
    }

    public int read() throws java.io.IOException
    {
        java.io.DataInputStream $r5, $r6;
        org.apache.tika.fork.InputStreamProxy r0;
        java.io.DataOutputStream $r1, $r2, $r3, $r4;
        int $i0, $i1, $i2;

        r0 := @this: org.apache.tika.fork.InputStreamProxy;

        $r1 = r0.<org.apache.tika.fork.InputStreamProxy: java.io.DataOutputStream output>;

        virtualinvoke $r1.<java.io.DataOutputStream: void writeByte(int)>(3);

        $r2 = r0.<org.apache.tika.fork.InputStreamProxy: java.io.DataOutputStream output>;

        $i0 = r0.<org.apache.tika.fork.InputStreamProxy: int resource>;

        virtualinvoke $r2.<java.io.DataOutputStream: void writeByte(int)>($i0);

        $r3 = r0.<org.apache.tika.fork.InputStreamProxy: java.io.DataOutputStream output>;

        virtualinvoke $r3.<java.io.DataOutputStream: void writeInt(int)>(1);

        $r4 = r0.<org.apache.tika.fork.InputStreamProxy: java.io.DataOutputStream output>;

        virtualinvoke $r4.<java.io.DataOutputStream: void flush()>();

        $r5 = r0.<org.apache.tika.fork.InputStreamProxy: java.io.DataInputStream input>;

        $i1 = virtualinvoke $r5.<java.io.DataInputStream: int readInt()>();

        if $i1 != 1 goto label1;

        $r6 = r0.<org.apache.tika.fork.InputStreamProxy: java.io.DataInputStream input>;

        $i2 = virtualinvoke $r6.<java.io.DataInputStream: int readUnsignedByte()>();

        return $i2;

     label1:
        return $i1;
    }

    public int read(byte[], int, int) throws java.io.IOException
    {
        java.io.DataInputStream $r5, $r7;
        byte[] r6;
        org.apache.tika.fork.InputStreamProxy r0;
        java.io.DataOutputStream $r1, $r2, $r3, $r4;
        int $i0, i1, $i2, i3;

        r0 := @this: org.apache.tika.fork.InputStreamProxy;

        r6 := @parameter0: byte[];

        i3 := @parameter1: int;

        i1 := @parameter2: int;

        $r1 = r0.<org.apache.tika.fork.InputStreamProxy: java.io.DataOutputStream output>;

        virtualinvoke $r1.<java.io.DataOutputStream: void writeByte(int)>(3);

        $r2 = r0.<org.apache.tika.fork.InputStreamProxy: java.io.DataOutputStream output>;

        $i0 = r0.<org.apache.tika.fork.InputStreamProxy: int resource>;

        virtualinvoke $r2.<java.io.DataOutputStream: void writeByte(int)>($i0);

        $r3 = r0.<org.apache.tika.fork.InputStreamProxy: java.io.DataOutputStream output>;

        virtualinvoke $r3.<java.io.DataOutputStream: void writeInt(int)>(i1);

        $r4 = r0.<org.apache.tika.fork.InputStreamProxy: java.io.DataOutputStream output>;

        virtualinvoke $r4.<java.io.DataOutputStream: void flush()>();

        $r5 = r0.<org.apache.tika.fork.InputStreamProxy: java.io.DataInputStream input>;

        $i2 = virtualinvoke $r5.<java.io.DataInputStream: int readInt()>();

        if $i2 <= 0 goto label1;

        $r7 = r0.<org.apache.tika.fork.InputStreamProxy: java.io.DataInputStream input>;

        virtualinvoke $r7.<java.io.DataInputStream: void readFully(byte[],int,int)>(r6, i3, $i2);

     label1:
        return $i2;
    }

    public static void <clinit>()
    {
        <org.apache.tika.fork.InputStreamProxy: long serialVersionUID> = 4350939227765568438L;

        return;
    }
}
