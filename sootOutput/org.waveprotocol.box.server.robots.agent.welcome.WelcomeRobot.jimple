public class org.waveprotocol.box.server.robots.agent.welcome.WelcomeRobot extends org.waveprotocol.box.server.robots.agent.AbstractBaseRobotAgent
{
    private static final java.util.logging.Logger LOG;
    public static final java.lang.String ROBOT_URI;
    private org.waveprotocol.wave.model.id.WaveId welcomeWaveId;

    public void <init>(com.google.inject.Injector)
    {
        com.google.inject.Key $r3;
        java.util.logging.Level $r12;
        java.lang.String r5, $r6, $r7, $r15;
        boolean $z0;
        org.waveprotocol.box.server.robots.agent.welcome.WelcomeRobot r0;
        org.waveprotocol.wave.model.id.WaveId $r8;
        org.waveprotocol.wave.model.id.InvalidIdException $r9;
        java.util.logging.Logger $r11;
        com.google.inject.Injector r1;
        com.google.inject.name.Named $r2;
        java.lang.Object $r4;
        java.lang.StringBuilder $r10, $r13, $r14;

        r0 := @this: org.waveprotocol.box.server.robots.agent.welcome.WelcomeRobot;

        r1 := @parameter0: com.google.inject.Injector;

        specialinvoke r0.<org.waveprotocol.box.server.robots.agent.AbstractBaseRobotAgent: void <init>(com.google.inject.Injector)>(r1);

        r0.<org.waveprotocol.box.server.robots.agent.welcome.WelcomeRobot: org.waveprotocol.wave.model.id.WaveId welcomeWaveId> = null;

        $r2 = staticinvoke <com.google.inject.name.Names: com.google.inject.name.Named named(java.lang.String)>("welcome_wave_id");

        $r3 = staticinvoke <com.google.inject.Key: com.google.inject.Key get(java.lang.Class,java.lang.'annotation'.Annotation)>(class "Ljava/lang/String;", $r2);

        $r4 = interfaceinvoke r1.<com.google.inject.Injector: java.lang.Object getInstance(com.google.inject.Key)>($r3);

        r5 = (java.lang.String) $r4;

        $r6 = "UNDEFINED";

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>(r5);

        if $z0 != 0 goto label4;

     label1:
        $r7 = virtualinvoke r0.<org.waveprotocol.box.server.robots.agent.welcome.WelcomeRobot: java.lang.String getWaveDomain()>();

        $r8 = staticinvoke <org.waveprotocol.wave.model.id.WaveId: org.waveprotocol.wave.model.id.WaveId ofChecked(java.lang.String,java.lang.String)>($r7, r5);

        r0.<org.waveprotocol.box.server.robots.agent.welcome.WelcomeRobot: org.waveprotocol.wave.model.id.WaveId welcomeWaveId> = $r8;

     label2:
        goto label4;

     label3:
        $r9 := @caughtexception;

        $r11 = <org.waveprotocol.box.server.robots.agent.welcome.WelcomeRobot: java.util.logging.Logger LOG>;

        $r12 = <java.util.logging.Level: java.util.logging.Level WARNING>;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Problem parsing welcome wave id: ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r11.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String)>($r12, $r15);

     label4:
        return;

        catch org.waveprotocol.wave.model.id.InvalidIdException from label1 to label2 with label3;
    }

    public void greet(org.waveprotocol.wave.model.wave.ParticipantId) throws java.io.IOException
    {
        org.waveprotocol.box.server.account.RobotAccountData r47;
        org.waveprotocol.wave.model.wave.ParticipantId r0, $r15, $r17;
        com.google.wave.api.Wavelet $r24, $r36;
        org.waveprotocol.wave.model.id.WaveId $r25, $r33;
        java.util.logging.Logger $r41;
        java.lang.StringBuilder $r1, $r4, $r5, $r8, $r10, $r11, $r13, $r27, $r28, $r30, $r31, $r40, $r43, $r45;
        org.waveprotocol.box.server.account.AccountData $r16;
        java.lang.String[] $r21;
        org.waveprotocol.wave.model.id.WaveletId $r35;
        org.waveprotocol.box.server.persistence.PersistenceException $r39;
        com.google.wave.api.Blip $r26, $r37, $r38;
        java.util.logging.Level $r42;
        java.util.HashSet $r23;
        java.lang.String $r3, $r6, $r9, $r12, $r14, $r18, $r19, $r20, $r22, $r29, $r32, $r34, $r44, $r46;
        org.waveprotocol.box.server.robots.agent.welcome.WelcomeRobot r2;
        org.waveprotocol.box.server.persistence.AccountStore $r7;

        r2 := @this: org.waveprotocol.box.server.robots.agent.welcome.WelcomeRobot;

        r0 := @parameter0: org.waveprotocol.wave.model.wave.ParticipantId;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        r47 = null;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke r2.<org.waveprotocol.box.server.robots.agent.welcome.WelcomeRobot: java.lang.String getFrontEndAddress()>();

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/robot/rpc");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

     label1:
        $r7 = virtualinvoke r2.<org.waveprotocol.box.server.robots.agent.welcome.WelcomeRobot: org.waveprotocol.box.server.persistence.AccountStore getAccountStore()>();

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke r2.<org.waveprotocol.box.server.robots.agent.welcome.WelcomeRobot: java.lang.String getRobotId()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("@");

        $r12 = virtualinvoke r2.<org.waveprotocol.box.server.robots.agent.welcome.WelcomeRobot: java.lang.String getWaveDomain()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        $r15 = staticinvoke <org.waveprotocol.wave.model.wave.ParticipantId: org.waveprotocol.wave.model.wave.ParticipantId ofUnsafe(java.lang.String)>($r14);

        $r16 = interfaceinvoke $r7.<org.waveprotocol.box.server.persistence.AccountStore: org.waveprotocol.box.server.account.AccountData getAccount(org.waveprotocol.wave.model.wave.ParticipantId)>($r15);

        r47 = interfaceinvoke $r16.<org.waveprotocol.box.server.account.AccountData: org.waveprotocol.box.server.account.RobotAccountData asRobot()>();

     label2:
        goto label4;

     label3:
        $r39 := @caughtexception;

        $r41 = <org.waveprotocol.box.server.robots.agent.welcome.WelcomeRobot: java.util.logging.Logger LOG>;

        $r42 = <java.util.logging.Level: java.util.logging.Level WARNING>;

        $r40 = new java.lang.StringBuilder;

        specialinvoke $r40.<java.lang.StringBuilder: void <init>()>();

        $r43 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot fetch account data for robot id: ");

        $r44 = virtualinvoke r2.<org.waveprotocol.box.server.robots.agent.welcome.WelcomeRobot: java.lang.String getRobotId()>();

        $r45 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r44);

        $r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r41.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r42, $r46, $r39);

     label4:
        if r47 == null goto label7;

        $r17 = interfaceinvoke r47.<org.waveprotocol.box.server.account.RobotAccountData: org.waveprotocol.wave.model.wave.ParticipantId getId()>();

        $r18 = virtualinvoke $r17.<org.waveprotocol.wave.model.wave.ParticipantId: java.lang.String getAddress()>();

        $r19 = interfaceinvoke r47.<org.waveprotocol.box.server.account.RobotAccountData: java.lang.String getConsumerSecret()>();

        virtualinvoke r2.<org.waveprotocol.box.server.robots.agent.welcome.WelcomeRobot: void setupOAuth(java.lang.String,java.lang.String,java.lang.String)>($r18, $r19, $r6);

        $r20 = virtualinvoke r2.<org.waveprotocol.box.server.robots.agent.welcome.WelcomeRobot: java.lang.String getWaveDomain()>();

        $r21 = newarray (java.lang.String)[1];

        $r22 = virtualinvoke r0.<org.waveprotocol.wave.model.wave.ParticipantId: java.lang.String getAddress()>();

        $r21[0] = $r22;

        $r23 = staticinvoke <com.google.common.collect.Sets: java.util.HashSet newHashSet(java.lang.Object[])>($r21);

        $r24 = virtualinvoke r2.<org.waveprotocol.box.server.robots.agent.welcome.WelcomeRobot: com.google.wave.api.Wavelet newWave(java.lang.String,java.util.Set)>($r20, $r23);

        $r25 = r2.<org.waveprotocol.box.server.robots.agent.welcome.WelcomeRobot: org.waveprotocol.wave.model.id.WaveId welcomeWaveId>;

        if $r25 == null goto label5;

        $r33 = r2.<org.waveprotocol.box.server.robots.agent.welcome.WelcomeRobot: org.waveprotocol.wave.model.id.WaveId welcomeWaveId>;

        $r34 = virtualinvoke r2.<org.waveprotocol.box.server.robots.agent.welcome.WelcomeRobot: java.lang.String getWaveDomain()>();

        $r35 = staticinvoke <org.waveprotocol.wave.model.id.WaveletId: org.waveprotocol.wave.model.id.WaveletId of(java.lang.String,java.lang.String)>($r34, "conv+root");

        $r36 = virtualinvoke r2.<org.waveprotocol.box.server.robots.agent.welcome.WelcomeRobot: com.google.wave.api.Wavelet fetchWavelet(org.waveprotocol.wave.model.id.WaveId,org.waveprotocol.wave.model.id.WaveletId,java.lang.String)>($r33, $r35, $r6);

        $r37 = virtualinvoke $r36.<com.google.wave.api.Wavelet: com.google.wave.api.Blip getRootBlip()>();

        $r38 = virtualinvoke $r24.<com.google.wave.api.Wavelet: com.google.wave.api.Blip getRootBlip()>();

        staticinvoke <org.waveprotocol.box.server.robots.util.RobotsUtil: void copyBlipContents(com.google.wave.api.Blip,com.google.wave.api.Blip)>($r37, $r38);

        goto label6;

     label5:
        $r26 = virtualinvoke $r24.<com.google.wave.api.Wavelet: com.google.wave.api.Blip getRootBlip()>();

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>()>();

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Welcome to ");

        $r29 = virtualinvoke r2.<org.waveprotocol.box.server.robots.agent.welcome.WelcomeRobot: java.lang.String getWaveDomain()>();

        $r30 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r29);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("!");

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.waveprotocol.box.server.robots.agent.RobotAgentUtil: void appendLine(com.google.wave.api.Blip,java.lang.String)>($r26, $r32);

     label6:
        virtualinvoke r2.<org.waveprotocol.box.server.robots.agent.welcome.WelcomeRobot: java.util.List submit(com.google.wave.api.Wavelet,java.lang.String)>($r24, $r6);

     label7:
        return;

        catch org.waveprotocol.box.server.persistence.PersistenceException from label1 to label2 with label3;
    }

    public java.lang.String getRobotUri()
    {
        org.waveprotocol.box.server.robots.agent.welcome.WelcomeRobot r0;

        r0 := @this: org.waveprotocol.box.server.robots.agent.welcome.WelcomeRobot;

        return "/agent/welcome";
    }

    public java.lang.String getRobotId()
    {
        org.waveprotocol.box.server.robots.agent.welcome.WelcomeRobot r0;

        r0 := @this: org.waveprotocol.box.server.robots.agent.welcome.WelcomeRobot;

        return "welcome-bot";
    }

    protected java.lang.String getRobotName()
    {
        org.waveprotocol.box.server.robots.agent.welcome.WelcomeRobot r0;

        r0 := @this: org.waveprotocol.box.server.robots.agent.welcome.WelcomeRobot;

        return "Welcome-Bot";
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.String $r1;
        java.util.logging.Logger $r2;

        <org.waveprotocol.box.server.robots.agent.welcome.WelcomeRobot: java.lang.String ROBOT_URI> = "/agent/welcome";

        $r0 = class "Lorg/waveprotocol/box/server/robots/agent/passwd/PasswordRobot;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getName()>();

        $r2 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>($r1);

        <org.waveprotocol.box.server.robots.agent.welcome.WelcomeRobot: java.util.logging.Logger LOG> = $r2;

        return;
    }
}
