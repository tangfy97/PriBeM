public class org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl extends java.lang.Object implements org.apache.xmlbeans.impl.richParser.XMLStreamReaderExt
{
    private final javax.xml.stream.XMLStreamReader _xmlStream;
    private final org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS _charSeq;
    private java.lang.String _defaultValue;
    static java.lang.Class class$org$apache$xmlbeans$impl$richParser$XMLStreamReaderExtImpl;

    public void <init>(javax.xml.stream.XMLStreamReader)
    {
        org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl r0;
        javax.xml.stream.XMLStreamReader r1;
        org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS $r2;
        java.lang.IllegalArgumentException $r3;

        r0 := @this: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl;

        r1 := @parameter0: javax.xml.stream.XMLStreamReader;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if r1 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r3;

     label1:
        r0.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: javax.xml.stream.XMLStreamReader _xmlStream> = r1;

        $r2 = new org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS;

        specialinvoke $r2.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS: void <init>(org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl)>(r0);

        r0.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS _charSeq> = $r2;

        return;
    }

    public javax.xml.stream.XMLStreamReader getUnderlyingXmlStream()
    {
        org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl r0;
        javax.xml.stream.XMLStreamReader $r1;

        r0 := @this: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl;

        $r1 = r0.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: javax.xml.stream.XMLStreamReader _xmlStream>;

        return $r1;
    }

    public java.lang.String getStringValue() throws javax.xml.stream.XMLStreamException
    {
        org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl r0;
        org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS $r1, $r2;
        java.lang.String $r3;

        r0 := @this: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl;

        $r1 = r0.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS _charSeq>;

        virtualinvoke $r1.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS: void reload(int)>(1);

        $r2 = r0.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS _charSeq>;

        $r3 = virtualinvoke $r2.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS: java.lang.String toString()>();

        return $r3;
    }

    public java.lang.String getStringValue(int) throws javax.xml.stream.XMLStreamException
    {
        org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl r0;
        int i0;
        org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS $r1, $r2;
        java.lang.String $r3, $r4;

        r0 := @this: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS _charSeq>;

        virtualinvoke $r1.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS: void reload(int)>(1);

        $r2 = r0.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS _charSeq>;

        $r3 = virtualinvoke $r2.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS: java.lang.String toString()>();

        $r4 = staticinvoke <org.apache.xmlbeans.impl.common.XmlWhitespace: java.lang.String collapse(java.lang.String,int)>($r3, i0);

        return $r4;
    }

    public boolean getBooleanValue() throws javax.xml.stream.XMLStreamException, org.apache.xmlbeans.impl.common.InvalidLexicalValueException
    {
        org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS $r1, $r2, $r5;
        org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl r0;
        javax.xml.stream.Location $r6;
        org.apache.xmlbeans.impl.common.InvalidLexicalValueException $r3, $r4;
        boolean $z0;

        r0 := @this: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl;

        $r1 = r0.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS _charSeq>;

        virtualinvoke $r1.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS: void reload(int)>(2);

     label1:
        $r2 = r0.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS _charSeq>;

        $z0 = staticinvoke <org.apache.xmlbeans.impl.util.XsTypeConverter: boolean lexBoolean(java.lang.CharSequence)>($r2);

     label2:
        return $z0;

     label3:
        $r3 := @caughtexception;

        $r4 = new org.apache.xmlbeans.impl.common.InvalidLexicalValueException;

        $r5 = r0.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS _charSeq>;

        $r6 = virtualinvoke $r5.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS: javax.xml.stream.Location getLocation()>();

        specialinvoke $r4.<org.apache.xmlbeans.impl.common.InvalidLexicalValueException: void <init>(java.lang.Throwable,javax.xml.stream.Location)>($r3, $r6);

        throw $r4;

        catch org.apache.xmlbeans.impl.common.InvalidLexicalValueException from label1 to label2 with label3;
    }

    public byte getByteValue() throws javax.xml.stream.XMLStreamException, org.apache.xmlbeans.impl.common.InvalidLexicalValueException
    {
        org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS $r1, $r2, $r5;
        java.lang.NumberFormatException $r3;
        org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl r0;
        byte $b0;
        javax.xml.stream.Location $r6;
        org.apache.xmlbeans.impl.common.InvalidLexicalValueException $r4;

        r0 := @this: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl;

        $r1 = r0.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS _charSeq>;

        virtualinvoke $r1.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS: void reload(int)>(2);

     label1:
        $r2 = r0.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS _charSeq>;

        $b0 = staticinvoke <org.apache.xmlbeans.impl.util.XsTypeConverter: byte lexByte(java.lang.CharSequence)>($r2);

     label2:
        return $b0;

     label3:
        $r3 := @caughtexception;

        $r4 = new org.apache.xmlbeans.impl.common.InvalidLexicalValueException;

        $r5 = r0.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS _charSeq>;

        $r6 = virtualinvoke $r5.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS: javax.xml.stream.Location getLocation()>();

        specialinvoke $r4.<org.apache.xmlbeans.impl.common.InvalidLexicalValueException: void <init>(java.lang.Throwable,javax.xml.stream.Location)>($r3, $r6);

        throw $r4;

        catch java.lang.NumberFormatException from label1 to label2 with label3;
    }

    public short getShortValue() throws javax.xml.stream.XMLStreamException, org.apache.xmlbeans.impl.common.InvalidLexicalValueException
    {
        org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS $r1, $r2, $r5;
        java.lang.NumberFormatException $r3;
        short $s0;
        org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl r0;
        javax.xml.stream.Location $r6;
        org.apache.xmlbeans.impl.common.InvalidLexicalValueException $r4;

        r0 := @this: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl;

        $r1 = r0.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS _charSeq>;

        virtualinvoke $r1.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS: void reload(int)>(2);

     label1:
        $r2 = r0.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS _charSeq>;

        $s0 = staticinvoke <org.apache.xmlbeans.impl.util.XsTypeConverter: short lexShort(java.lang.CharSequence)>($r2);

     label2:
        return $s0;

     label3:
        $r3 := @caughtexception;

        $r4 = new org.apache.xmlbeans.impl.common.InvalidLexicalValueException;

        $r5 = r0.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS _charSeq>;

        $r6 = virtualinvoke $r5.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS: javax.xml.stream.Location getLocation()>();

        specialinvoke $r4.<org.apache.xmlbeans.impl.common.InvalidLexicalValueException: void <init>(java.lang.Throwable,javax.xml.stream.Location)>($r3, $r6);

        throw $r4;

        catch java.lang.NumberFormatException from label1 to label2 with label3;
    }

    public int getIntValue() throws javax.xml.stream.XMLStreamException, org.apache.xmlbeans.impl.common.InvalidLexicalValueException
    {
        org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS $r1, $r2, $r5;
        java.lang.NumberFormatException $r3;
        org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl r0;
        javax.xml.stream.Location $r6;
        int $i0;
        org.apache.xmlbeans.impl.common.InvalidLexicalValueException $r4;

        r0 := @this: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl;

        $r1 = r0.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS _charSeq>;

        virtualinvoke $r1.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS: void reload(int)>(2);

     label1:
        $r2 = r0.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS _charSeq>;

        $i0 = staticinvoke <org.apache.xmlbeans.impl.util.XsTypeConverter: int lexInt(java.lang.CharSequence)>($r2);

     label2:
        return $i0;

     label3:
        $r3 := @caughtexception;

        $r4 = new org.apache.xmlbeans.impl.common.InvalidLexicalValueException;

        $r5 = r0.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS _charSeq>;

        $r6 = virtualinvoke $r5.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS: javax.xml.stream.Location getLocation()>();

        specialinvoke $r4.<org.apache.xmlbeans.impl.common.InvalidLexicalValueException: void <init>(java.lang.Throwable,javax.xml.stream.Location)>($r3, $r6);

        throw $r4;

        catch java.lang.NumberFormatException from label1 to label2 with label3;
    }

    public long getLongValue() throws javax.xml.stream.XMLStreamException, org.apache.xmlbeans.impl.common.InvalidLexicalValueException
    {
        org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS $r1, $r2, $r5;
        long $l0;
        java.lang.NumberFormatException $r3;
        org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl r0;
        javax.xml.stream.Location $r6;
        org.apache.xmlbeans.impl.common.InvalidLexicalValueException $r4;

        r0 := @this: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl;

        $r1 = r0.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS _charSeq>;

        virtualinvoke $r1.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS: void reload(int)>(2);

     label1:
        $r2 = r0.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS _charSeq>;

        $l0 = staticinvoke <org.apache.xmlbeans.impl.util.XsTypeConverter: long lexLong(java.lang.CharSequence)>($r2);

     label2:
        return $l0;

     label3:
        $r3 := @caughtexception;

        $r4 = new org.apache.xmlbeans.impl.common.InvalidLexicalValueException;

        $r5 = r0.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS _charSeq>;

        $r6 = virtualinvoke $r5.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS: javax.xml.stream.Location getLocation()>();

        specialinvoke $r4.<org.apache.xmlbeans.impl.common.InvalidLexicalValueException: void <init>(java.lang.Throwable,javax.xml.stream.Location)>($r3, $r6);

        throw $r4;

        catch java.lang.NumberFormatException from label1 to label2 with label3;
    }

    public java.math.BigInteger getBigIntegerValue() throws javax.xml.stream.XMLStreamException, org.apache.xmlbeans.impl.common.InvalidLexicalValueException
    {
        org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS $r1, $r2, $r6;
        java.lang.NumberFormatException $r4;
        org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl r0;
        javax.xml.stream.Location $r7;
        org.apache.xmlbeans.impl.common.InvalidLexicalValueException $r5;
        java.math.BigInteger $r3;

        r0 := @this: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl;

        $r1 = r0.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS _charSeq>;

        virtualinvoke $r1.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS: void reload(int)>(2);

     label1:
        $r2 = r0.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS _charSeq>;

        $r3 = staticinvoke <org.apache.xmlbeans.impl.util.XsTypeConverter: java.math.BigInteger lexInteger(java.lang.CharSequence)>($r2);

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        $r5 = new org.apache.xmlbeans.impl.common.InvalidLexicalValueException;

        $r6 = r0.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS _charSeq>;

        $r7 = virtualinvoke $r6.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS: javax.xml.stream.Location getLocation()>();

        specialinvoke $r5.<org.apache.xmlbeans.impl.common.InvalidLexicalValueException: void <init>(java.lang.Throwable,javax.xml.stream.Location)>($r4, $r7);

        throw $r5;

        catch java.lang.NumberFormatException from label1 to label2 with label3;
    }

    public java.math.BigDecimal getBigDecimalValue() throws javax.xml.stream.XMLStreamException, org.apache.xmlbeans.impl.common.InvalidLexicalValueException
    {
        org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS $r1, $r2, $r6;
        java.lang.NumberFormatException $r4;
        java.math.BigDecimal $r3;
        org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl r0;
        javax.xml.stream.Location $r7;
        org.apache.xmlbeans.impl.common.InvalidLexicalValueException $r5;

        r0 := @this: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl;

        $r1 = r0.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS _charSeq>;

        virtualinvoke $r1.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS: void reload(int)>(2);

     label1:
        $r2 = r0.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS _charSeq>;

        $r3 = staticinvoke <org.apache.xmlbeans.impl.util.XsTypeConverter: java.math.BigDecimal lexDecimal(java.lang.CharSequence)>($r2);

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        $r5 = new org.apache.xmlbeans.impl.common.InvalidLexicalValueException;

        $r6 = r0.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS _charSeq>;

        $r7 = virtualinvoke $r6.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS: javax.xml.stream.Location getLocation()>();

        specialinvoke $r5.<org.apache.xmlbeans.impl.common.InvalidLexicalValueException: void <init>(java.lang.Throwable,javax.xml.stream.Location)>($r4, $r7);

        throw $r5;

        catch java.lang.NumberFormatException from label1 to label2 with label3;
    }

    public float getFloatValue() throws javax.xml.stream.XMLStreamException, org.apache.xmlbeans.impl.common.InvalidLexicalValueException
    {
        org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS $r1, $r2, $r5;
        java.lang.NumberFormatException $r3;
        org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl r0;
        javax.xml.stream.Location $r6;
        float $f0;
        org.apache.xmlbeans.impl.common.InvalidLexicalValueException $r4;

        r0 := @this: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl;

        $r1 = r0.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS _charSeq>;

        virtualinvoke $r1.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS: void reload(int)>(2);

     label1:
        $r2 = r0.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS _charSeq>;

        $f0 = staticinvoke <org.apache.xmlbeans.impl.util.XsTypeConverter: float lexFloat(java.lang.CharSequence)>($r2);

     label2:
        return $f0;

     label3:
        $r3 := @caughtexception;

        $r4 = new org.apache.xmlbeans.impl.common.InvalidLexicalValueException;

        $r5 = r0.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS _charSeq>;

        $r6 = virtualinvoke $r5.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS: javax.xml.stream.Location getLocation()>();

        specialinvoke $r4.<org.apache.xmlbeans.impl.common.InvalidLexicalValueException: void <init>(java.lang.Throwable,javax.xml.stream.Location)>($r3, $r6);

        throw $r4;

        catch java.lang.NumberFormatException from label1 to label2 with label3;
    }

    public double getDoubleValue() throws javax.xml.stream.XMLStreamException, org.apache.xmlbeans.impl.common.InvalidLexicalValueException
    {
        org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS $r1, $r2, $r5;
        java.lang.NumberFormatException $r3;
        org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl r0;
        javax.xml.stream.Location $r6;
        org.apache.xmlbeans.impl.common.InvalidLexicalValueException $r4;
        double $d0;

        r0 := @this: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl;

        $r1 = r0.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS _charSeq>;

        virtualinvoke $r1.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS: void reload(int)>(2);

     label1:
        $r2 = r0.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS _charSeq>;

        $d0 = staticinvoke <org.apache.xmlbeans.impl.util.XsTypeConverter: double lexDouble(java.lang.CharSequence)>($r2);

     label2:
        return $d0;

     label3:
        $r3 := @caughtexception;

        $r4 = new org.apache.xmlbeans.impl.common.InvalidLexicalValueException;

        $r5 = r0.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS _charSeq>;

        $r6 = virtualinvoke $r5.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS: javax.xml.stream.Location getLocation()>();

        specialinvoke $r4.<org.apache.xmlbeans.impl.common.InvalidLexicalValueException: void <init>(java.lang.Throwable,javax.xml.stream.Location)>($r3, $r6);

        throw $r4;

        catch java.lang.NumberFormatException from label1 to label2 with label3;
    }

    public java.io.InputStream getHexBinaryValue() throws javax.xml.stream.XMLStreamException, org.apache.xmlbeans.impl.common.InvalidLexicalValueException
    {
        byte[] $r4, $r5;
        org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS $r1, $r2, $r7;
        org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl r0;
        java.io.ByteArrayInputStream $r9;
        javax.xml.stream.Location $r8;
        org.apache.xmlbeans.impl.common.InvalidLexicalValueException $r6;
        java.lang.String $r3;

        r0 := @this: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl;

        $r1 = r0.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS _charSeq>;

        virtualinvoke $r1.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS: void reload(int)>(2);

        $r2 = r0.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS _charSeq>;

        $r3 = virtualinvoke $r2.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS: java.lang.String toString()>();

        $r4 = virtualinvoke $r3.<java.lang.String: byte[] getBytes()>();

        $r5 = staticinvoke <org.apache.xmlbeans.impl.util.HexBin: byte[] decode(byte[])>($r4);

        if $r5 == null goto label1;

        $r9 = new java.io.ByteArrayInputStream;

        specialinvoke $r9.<java.io.ByteArrayInputStream: void <init>(byte[])>($r5);

        return $r9;

     label1:
        $r6 = new org.apache.xmlbeans.impl.common.InvalidLexicalValueException;

        $r7 = r0.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS _charSeq>;

        $r8 = virtualinvoke $r7.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS: javax.xml.stream.Location getLocation()>();

        specialinvoke $r6.<org.apache.xmlbeans.impl.common.InvalidLexicalValueException: void <init>(java.lang.String,javax.xml.stream.Location)>("invalid hexBinary value", $r8);

        throw $r6;
    }

    public java.io.InputStream getBase64Value() throws javax.xml.stream.XMLStreamException, org.apache.xmlbeans.impl.common.InvalidLexicalValueException
    {
        byte[] $r4, $r5;
        org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS $r1, $r2, $r7;
        org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl r0;
        java.io.ByteArrayInputStream $r9;
        javax.xml.stream.Location $r8;
        org.apache.xmlbeans.impl.common.InvalidLexicalValueException $r6;
        java.lang.String $r3;

        r0 := @this: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl;

        $r1 = r0.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS _charSeq>;

        virtualinvoke $r1.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS: void reload(int)>(2);

        $r2 = r0.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS _charSeq>;

        $r3 = virtualinvoke $r2.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS: java.lang.String toString()>();

        $r4 = virtualinvoke $r3.<java.lang.String: byte[] getBytes()>();

        $r5 = staticinvoke <org.apache.xmlbeans.impl.util.Base64: byte[] decode(byte[])>($r4);

        if $r5 == null goto label1;

        $r9 = new java.io.ByteArrayInputStream;

        specialinvoke $r9.<java.io.ByteArrayInputStream: void <init>(byte[])>($r5);

        return $r9;

     label1:
        $r6 = new org.apache.xmlbeans.impl.common.InvalidLexicalValueException;

        $r7 = r0.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS _charSeq>;

        $r8 = virtualinvoke $r7.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS: javax.xml.stream.Location getLocation()>();

        specialinvoke $r6.<org.apache.xmlbeans.impl.common.InvalidLexicalValueException: void <init>(java.lang.String,javax.xml.stream.Location)>("invalid base64Binary value", $r8);

        throw $r6;
    }

    public org.apache.xmlbeans.XmlCalendar getCalendarValue() throws javax.xml.stream.XMLStreamException, org.apache.xmlbeans.impl.common.InvalidLexicalValueException
    {
        org.apache.xmlbeans.GDateBuilder $r2;
        org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS $r1, $r3, $r7;
        java.lang.IllegalArgumentException $r5;
        org.apache.xmlbeans.XmlCalendar $r4;
        org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl r0;
        javax.xml.stream.Location $r8;
        org.apache.xmlbeans.impl.common.InvalidLexicalValueException $r6;

        r0 := @this: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl;

        $r1 = r0.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS _charSeq>;

        virtualinvoke $r1.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS: void reload(int)>(2);

     label1:
        $r2 = new org.apache.xmlbeans.GDateBuilder;

        $r3 = r0.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS _charSeq>;

        specialinvoke $r2.<org.apache.xmlbeans.GDateBuilder: void <init>(java.lang.CharSequence)>($r3);

        $r4 = virtualinvoke $r2.<org.apache.xmlbeans.GDateBuilder: org.apache.xmlbeans.XmlCalendar getCalendar()>();

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        $r6 = new org.apache.xmlbeans.impl.common.InvalidLexicalValueException;

        $r7 = r0.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS _charSeq>;

        $r8 = virtualinvoke $r7.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS: javax.xml.stream.Location getLocation()>();

        specialinvoke $r6.<org.apache.xmlbeans.impl.common.InvalidLexicalValueException: void <init>(java.lang.Throwable,javax.xml.stream.Location)>($r5, $r8);

        throw $r6;

        catch java.lang.IllegalArgumentException from label1 to label2 with label3;
    }

    public java.util.Date getDateValue() throws javax.xml.stream.XMLStreamException, org.apache.xmlbeans.impl.common.InvalidLexicalValueException
    {
        org.apache.xmlbeans.GDateBuilder $r2;
        java.util.Date $r4;
        org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS $r1, $r3, $r7;
        java.lang.IllegalArgumentException $r5;
        org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl r0;
        javax.xml.stream.Location $r8;
        org.apache.xmlbeans.impl.common.InvalidLexicalValueException $r6;

        r0 := @this: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl;

        $r1 = r0.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS _charSeq>;

        virtualinvoke $r1.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS: void reload(int)>(2);

     label1:
        $r2 = new org.apache.xmlbeans.GDateBuilder;

        $r3 = r0.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS _charSeq>;

        specialinvoke $r2.<org.apache.xmlbeans.GDateBuilder: void <init>(java.lang.CharSequence)>($r3);

        $r4 = virtualinvoke $r2.<org.apache.xmlbeans.GDateBuilder: java.util.Date getDate()>();

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        $r6 = new org.apache.xmlbeans.impl.common.InvalidLexicalValueException;

        $r7 = r0.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS _charSeq>;

        $r8 = virtualinvoke $r7.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS: javax.xml.stream.Location getLocation()>();

        specialinvoke $r6.<org.apache.xmlbeans.impl.common.InvalidLexicalValueException: void <init>(java.lang.Throwable,javax.xml.stream.Location)>($r5, $r8);

        throw $r6;

        catch java.lang.IllegalArgumentException from label1 to label2 with label3;
    }

    public org.apache.xmlbeans.GDate getGDateValue() throws javax.xml.stream.XMLStreamException, org.apache.xmlbeans.impl.common.InvalidLexicalValueException
    {
        org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS $r1, $r2, $r6;
        java.lang.IllegalArgumentException $r4;
        org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl r0;
        javax.xml.stream.Location $r7;
        org.apache.xmlbeans.impl.common.InvalidLexicalValueException $r5;
        org.apache.xmlbeans.GDate $r3;

        r0 := @this: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl;

        $r1 = r0.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS _charSeq>;

        virtualinvoke $r1.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS: void reload(int)>(2);

     label1:
        $r2 = r0.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS _charSeq>;

        $r3 = staticinvoke <org.apache.xmlbeans.impl.util.XsTypeConverter: org.apache.xmlbeans.GDate lexGDate(java.lang.CharSequence)>($r2);

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        $r5 = new org.apache.xmlbeans.impl.common.InvalidLexicalValueException;

        $r6 = r0.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS _charSeq>;

        $r7 = virtualinvoke $r6.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS: javax.xml.stream.Location getLocation()>();

        specialinvoke $r5.<org.apache.xmlbeans.impl.common.InvalidLexicalValueException: void <init>(java.lang.Throwable,javax.xml.stream.Location)>($r4, $r7);

        throw $r5;

        catch java.lang.IllegalArgumentException from label1 to label2 with label3;
    }

    public org.apache.xmlbeans.GDuration getGDurationValue() throws javax.xml.stream.XMLStreamException, org.apache.xmlbeans.impl.common.InvalidLexicalValueException
    {
        org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS $r1, $r3, $r6;
        java.lang.IllegalArgumentException $r4;
        org.apache.xmlbeans.GDuration $r2;
        org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl r0;
        javax.xml.stream.Location $r7;
        org.apache.xmlbeans.impl.common.InvalidLexicalValueException $r5;

        r0 := @this: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl;

        $r1 = r0.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS _charSeq>;

        virtualinvoke $r1.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS: void reload(int)>(2);

     label1:
        $r2 = new org.apache.xmlbeans.GDuration;

        $r3 = r0.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS _charSeq>;

        specialinvoke $r2.<org.apache.xmlbeans.GDuration: void <init>(java.lang.CharSequence)>($r3);

     label2:
        return $r2;

     label3:
        $r4 := @caughtexception;

        $r5 = new org.apache.xmlbeans.impl.common.InvalidLexicalValueException;

        $r6 = r0.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS _charSeq>;

        $r7 = virtualinvoke $r6.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS: javax.xml.stream.Location getLocation()>();

        specialinvoke $r5.<org.apache.xmlbeans.impl.common.InvalidLexicalValueException: void <init>(java.lang.Throwable,javax.xml.stream.Location)>($r4, $r7);

        throw $r5;

        catch java.lang.IllegalArgumentException from label1 to label2 with label3;
    }

    public javax.xml.namespace.QName getQNameValue() throws javax.xml.stream.XMLStreamException, org.apache.xmlbeans.impl.common.InvalidLexicalValueException
    {
        org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS $r1, $r3, $r9;
        org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl r0;
        javax.xml.stream.XMLStreamReader $r2;
        javax.xml.stream.Location $r10;
        org.apache.xmlbeans.impl.common.InvalidLexicalValueException $r6, $r7;
        javax.xml.namespace.NamespaceContext $r4;
        javax.xml.namespace.QName $r5;
        java.lang.String $r8;

        r0 := @this: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl;

        $r1 = r0.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS _charSeq>;

        virtualinvoke $r1.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS: void reload(int)>(2);

     label1:
        $r3 = r0.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS _charSeq>;

        $r2 = r0.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: javax.xml.stream.XMLStreamReader _xmlStream>;

        $r4 = interfaceinvoke $r2.<javax.xml.stream.XMLStreamReader: javax.xml.namespace.NamespaceContext getNamespaceContext()>();

        $r5 = staticinvoke <org.apache.xmlbeans.impl.util.XsTypeConverter: javax.xml.namespace.QName lexQName(java.lang.CharSequence,javax.xml.namespace.NamespaceContext)>($r3, $r4);

     label2:
        return $r5;

     label3:
        $r6 := @caughtexception;

        $r7 = new org.apache.xmlbeans.impl.common.InvalidLexicalValueException;

        $r8 = virtualinvoke $r6.<org.apache.xmlbeans.impl.common.InvalidLexicalValueException: java.lang.String getMessage()>();

        $r9 = r0.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS _charSeq>;

        $r10 = virtualinvoke $r9.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS: javax.xml.stream.Location getLocation()>();

        specialinvoke $r7.<org.apache.xmlbeans.impl.common.InvalidLexicalValueException: void <init>(java.lang.String,javax.xml.stream.Location)>($r8, $r10);

        throw $r7;

        catch org.apache.xmlbeans.impl.common.InvalidLexicalValueException from label1 to label2 with label3;
    }

    public java.lang.String getAttributeStringValue(int) throws javax.xml.stream.XMLStreamException
    {
        org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl r0;
        javax.xml.stream.XMLStreamReader $r1;
        int i0;
        java.lang.String $r2;

        r0 := @this: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: javax.xml.stream.XMLStreamReader _xmlStream>;

        $r2 = interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: java.lang.String getAttributeValue(int)>(i0);

        return $r2;
    }

    public java.lang.String getAttributeStringValue(int, int) throws javax.xml.stream.XMLStreamException
    {
        org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl r0;
        javax.xml.stream.XMLStreamReader $r1;
        int i0, i1;
        java.lang.String $r2, $r3;

        r0 := @this: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: javax.xml.stream.XMLStreamReader _xmlStream>;

        $r2 = interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: java.lang.String getAttributeValue(int)>(i0);

        $r3 = staticinvoke <org.apache.xmlbeans.impl.common.XmlWhitespace: java.lang.String collapse(java.lang.String,int)>($r2, i1);

        return $r3;
    }

    public boolean getAttributeBooleanValue(int) throws javax.xml.stream.XMLStreamException
    {
        java.lang.CharSequence $r2;
        org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS $r1, $r5;
        org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl r0;
        javax.xml.stream.Location $r6;
        int i0;
        org.apache.xmlbeans.impl.common.InvalidLexicalValueException $r3, $r4;
        boolean $z0;

        r0 := @this: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl;

        i0 := @parameter0: int;

     label1:
        $r1 = r0.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS _charSeq>;

        $r2 = virtualinvoke $r1.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS: java.lang.CharSequence reloadAtt(int,int)>(i0, 2);

        $z0 = staticinvoke <org.apache.xmlbeans.impl.util.XsTypeConverter: boolean lexBoolean(java.lang.CharSequence)>($r2);

     label2:
        return $z0;

     label3:
        $r3 := @caughtexception;

        $r4 = new org.apache.xmlbeans.impl.common.InvalidLexicalValueException;

        $r5 = r0.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS _charSeq>;

        $r6 = virtualinvoke $r5.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS: javax.xml.stream.Location getLocation()>();

        specialinvoke $r4.<org.apache.xmlbeans.impl.common.InvalidLexicalValueException: void <init>(java.lang.Throwable,javax.xml.stream.Location)>($r3, $r6);

        throw $r4;

        catch org.apache.xmlbeans.impl.common.InvalidLexicalValueException from label1 to label2 with label3;
    }

    public byte getAttributeByteValue(int) throws javax.xml.stream.XMLStreamException
    {
        java.lang.CharSequence $r2;
        org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS $r1, $r5;
        java.lang.NumberFormatException $r3;
        org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl r0;
        byte $b1;
        javax.xml.stream.Location $r6;
        int i0;
        org.apache.xmlbeans.impl.common.InvalidLexicalValueException $r4;

        r0 := @this: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl;

        i0 := @parameter0: int;

     label1:
        $r1 = r0.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS _charSeq>;

        $r2 = virtualinvoke $r1.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS: java.lang.CharSequence reloadAtt(int,int)>(i0, 2);

        $b1 = staticinvoke <org.apache.xmlbeans.impl.util.XsTypeConverter: byte lexByte(java.lang.CharSequence)>($r2);

     label2:
        return $b1;

     label3:
        $r3 := @caughtexception;

        $r4 = new org.apache.xmlbeans.impl.common.InvalidLexicalValueException;

        $r5 = r0.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS _charSeq>;

        $r6 = virtualinvoke $r5.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS: javax.xml.stream.Location getLocation()>();

        specialinvoke $r4.<org.apache.xmlbeans.impl.common.InvalidLexicalValueException: void <init>(java.lang.Throwable,javax.xml.stream.Location)>($r3, $r6);

        throw $r4;

        catch java.lang.NumberFormatException from label1 to label2 with label3;
    }

    public short getAttributeShortValue(int) throws javax.xml.stream.XMLStreamException
    {
        java.lang.CharSequence $r2;
        org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS $r1, $r5;
        java.lang.NumberFormatException $r3;
        short $s1;
        org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl r0;
        javax.xml.stream.Location $r6;
        int i0;
        org.apache.xmlbeans.impl.common.InvalidLexicalValueException $r4;

        r0 := @this: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl;

        i0 := @parameter0: int;

     label1:
        $r1 = r0.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS _charSeq>;

        $r2 = virtualinvoke $r1.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS: java.lang.CharSequence reloadAtt(int,int)>(i0, 2);

        $s1 = staticinvoke <org.apache.xmlbeans.impl.util.XsTypeConverter: short lexShort(java.lang.CharSequence)>($r2);

     label2:
        return $s1;

     label3:
        $r3 := @caughtexception;

        $r4 = new org.apache.xmlbeans.impl.common.InvalidLexicalValueException;

        $r5 = r0.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS _charSeq>;

        $r6 = virtualinvoke $r5.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS: javax.xml.stream.Location getLocation()>();

        specialinvoke $r4.<org.apache.xmlbeans.impl.common.InvalidLexicalValueException: void <init>(java.lang.Throwable,javax.xml.stream.Location)>($r3, $r6);

        throw $r4;

        catch java.lang.NumberFormatException from label1 to label2 with label3;
    }

    public int getAttributeIntValue(int) throws javax.xml.stream.XMLStreamException
    {
        java.lang.CharSequence $r2;
        org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS $r1, $r5;
        java.lang.NumberFormatException $r3;
        org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl r0;
        javax.xml.stream.Location $r6;
        int i0, $i1;
        org.apache.xmlbeans.impl.common.InvalidLexicalValueException $r4;

        r0 := @this: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl;

        i0 := @parameter0: int;

     label1:
        $r1 = r0.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS _charSeq>;

        $r2 = virtualinvoke $r1.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS: java.lang.CharSequence reloadAtt(int,int)>(i0, 2);

        $i1 = staticinvoke <org.apache.xmlbeans.impl.util.XsTypeConverter: int lexInt(java.lang.CharSequence)>($r2);

     label2:
        return $i1;

     label3:
        $r3 := @caughtexception;

        $r4 = new org.apache.xmlbeans.impl.common.InvalidLexicalValueException;

        $r5 = r0.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS _charSeq>;

        $r6 = virtualinvoke $r5.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS: javax.xml.stream.Location getLocation()>();

        specialinvoke $r4.<org.apache.xmlbeans.impl.common.InvalidLexicalValueException: void <init>(java.lang.Throwable,javax.xml.stream.Location)>($r3, $r6);

        throw $r4;

        catch java.lang.NumberFormatException from label1 to label2 with label3;
    }

    public long getAttributeLongValue(int) throws javax.xml.stream.XMLStreamException
    {
        java.lang.CharSequence $r2;
        org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS $r1, $r5;
        long $l1;
        java.lang.NumberFormatException $r3;
        org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl r0;
        javax.xml.stream.Location $r6;
        int i0;
        org.apache.xmlbeans.impl.common.InvalidLexicalValueException $r4;

        r0 := @this: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl;

        i0 := @parameter0: int;

     label1:
        $r1 = r0.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS _charSeq>;

        $r2 = virtualinvoke $r1.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS: java.lang.CharSequence reloadAtt(int,int)>(i0, 2);

        $l1 = staticinvoke <org.apache.xmlbeans.impl.util.XsTypeConverter: long lexLong(java.lang.CharSequence)>($r2);

     label2:
        return $l1;

     label3:
        $r3 := @caughtexception;

        $r4 = new org.apache.xmlbeans.impl.common.InvalidLexicalValueException;

        $r5 = r0.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS _charSeq>;

        $r6 = virtualinvoke $r5.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS: javax.xml.stream.Location getLocation()>();

        specialinvoke $r4.<org.apache.xmlbeans.impl.common.InvalidLexicalValueException: void <init>(java.lang.Throwable,javax.xml.stream.Location)>($r3, $r6);

        throw $r4;

        catch java.lang.NumberFormatException from label1 to label2 with label3;
    }

    public java.math.BigInteger getAttributeBigIntegerValue(int) throws javax.xml.stream.XMLStreamException
    {
        java.lang.CharSequence $r2;
        org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS $r1, $r6;
        java.lang.NumberFormatException $r4;
        org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl r0;
        javax.xml.stream.Location $r7;
        int i0;
        org.apache.xmlbeans.impl.common.InvalidLexicalValueException $r5;
        java.math.BigInteger $r3;

        r0 := @this: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl;

        i0 := @parameter0: int;

     label1:
        $r1 = r0.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS _charSeq>;

        $r2 = virtualinvoke $r1.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS: java.lang.CharSequence reloadAtt(int,int)>(i0, 2);

        $r3 = staticinvoke <org.apache.xmlbeans.impl.util.XsTypeConverter: java.math.BigInteger lexInteger(java.lang.CharSequence)>($r2);

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        $r5 = new org.apache.xmlbeans.impl.common.InvalidLexicalValueException;

        $r6 = r0.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS _charSeq>;

        $r7 = virtualinvoke $r6.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS: javax.xml.stream.Location getLocation()>();

        specialinvoke $r5.<org.apache.xmlbeans.impl.common.InvalidLexicalValueException: void <init>(java.lang.Throwable,javax.xml.stream.Location)>($r4, $r7);

        throw $r5;

        catch java.lang.NumberFormatException from label1 to label2 with label3;
    }

    public java.math.BigDecimal getAttributeBigDecimalValue(int) throws javax.xml.stream.XMLStreamException
    {
        java.lang.CharSequence $r2;
        org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS $r1, $r6;
        java.lang.NumberFormatException $r4;
        java.math.BigDecimal $r3;
        org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl r0;
        javax.xml.stream.Location $r7;
        int i0;
        org.apache.xmlbeans.impl.common.InvalidLexicalValueException $r5;

        r0 := @this: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl;

        i0 := @parameter0: int;

     label1:
        $r1 = r0.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS _charSeq>;

        $r2 = virtualinvoke $r1.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS: java.lang.CharSequence reloadAtt(int,int)>(i0, 2);

        $r3 = staticinvoke <org.apache.xmlbeans.impl.util.XsTypeConverter: java.math.BigDecimal lexDecimal(java.lang.CharSequence)>($r2);

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        $r5 = new org.apache.xmlbeans.impl.common.InvalidLexicalValueException;

        $r6 = r0.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS _charSeq>;

        $r7 = virtualinvoke $r6.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS: javax.xml.stream.Location getLocation()>();

        specialinvoke $r5.<org.apache.xmlbeans.impl.common.InvalidLexicalValueException: void <init>(java.lang.Throwable,javax.xml.stream.Location)>($r4, $r7);

        throw $r5;

        catch java.lang.NumberFormatException from label1 to label2 with label3;
    }

    public float getAttributeFloatValue(int) throws javax.xml.stream.XMLStreamException
    {
        java.lang.CharSequence $r2;
        org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS $r1, $r5;
        java.lang.NumberFormatException $r3;
        org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl r0;
        javax.xml.stream.Location $r6;
        int i0;
        float $f0;
        org.apache.xmlbeans.impl.common.InvalidLexicalValueException $r4;

        r0 := @this: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl;

        i0 := @parameter0: int;

     label1:
        $r1 = r0.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS _charSeq>;

        $r2 = virtualinvoke $r1.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS: java.lang.CharSequence reloadAtt(int,int)>(i0, 2);

        $f0 = staticinvoke <org.apache.xmlbeans.impl.util.XsTypeConverter: float lexFloat(java.lang.CharSequence)>($r2);

     label2:
        return $f0;

     label3:
        $r3 := @caughtexception;

        $r4 = new org.apache.xmlbeans.impl.common.InvalidLexicalValueException;

        $r5 = r0.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS _charSeq>;

        $r6 = virtualinvoke $r5.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS: javax.xml.stream.Location getLocation()>();

        specialinvoke $r4.<org.apache.xmlbeans.impl.common.InvalidLexicalValueException: void <init>(java.lang.Throwable,javax.xml.stream.Location)>($r3, $r6);

        throw $r4;

        catch java.lang.NumberFormatException from label1 to label2 with label3;
    }

    public double getAttributeDoubleValue(int) throws javax.xml.stream.XMLStreamException
    {
        java.lang.CharSequence $r2;
        org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS $r1, $r5;
        java.lang.NumberFormatException $r3;
        org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl r0;
        javax.xml.stream.Location $r6;
        int i0;
        org.apache.xmlbeans.impl.common.InvalidLexicalValueException $r4;
        double $d0;

        r0 := @this: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl;

        i0 := @parameter0: int;

     label1:
        $r1 = r0.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS _charSeq>;

        $r2 = virtualinvoke $r1.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS: java.lang.CharSequence reloadAtt(int,int)>(i0, 2);

        $d0 = staticinvoke <org.apache.xmlbeans.impl.util.XsTypeConverter: double lexDouble(java.lang.CharSequence)>($r2);

     label2:
        return $d0;

     label3:
        $r3 := @caughtexception;

        $r4 = new org.apache.xmlbeans.impl.common.InvalidLexicalValueException;

        $r5 = r0.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS _charSeq>;

        $r6 = virtualinvoke $r5.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS: javax.xml.stream.Location getLocation()>();

        specialinvoke $r4.<org.apache.xmlbeans.impl.common.InvalidLexicalValueException: void <init>(java.lang.Throwable,javax.xml.stream.Location)>($r3, $r6);

        throw $r4;

        catch java.lang.NumberFormatException from label1 to label2 with label3;
    }

    public java.io.InputStream getAttributeHexBinaryValue(int) throws javax.xml.stream.XMLStreamException
    {
        byte[] $r4, $r5;
        java.lang.CharSequence $r2;
        org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS $r1, $r7;
        org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl r0;
        java.io.ByteArrayInputStream $r9;
        javax.xml.stream.Location $r8;
        int i0;
        org.apache.xmlbeans.impl.common.InvalidLexicalValueException $r6;
        java.lang.String $r3;

        r0 := @this: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS _charSeq>;

        $r2 = virtualinvoke $r1.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS: java.lang.CharSequence reloadAtt(int,int)>(i0, 2);

        $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>();

        $r4 = virtualinvoke $r3.<java.lang.String: byte[] getBytes()>();

        $r5 = staticinvoke <org.apache.xmlbeans.impl.util.HexBin: byte[] decode(byte[])>($r4);

        if $r5 == null goto label1;

        $r9 = new java.io.ByteArrayInputStream;

        specialinvoke $r9.<java.io.ByteArrayInputStream: void <init>(byte[])>($r5);

        return $r9;

     label1:
        $r6 = new org.apache.xmlbeans.impl.common.InvalidLexicalValueException;

        $r7 = r0.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS _charSeq>;

        $r8 = virtualinvoke $r7.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS: javax.xml.stream.Location getLocation()>();

        specialinvoke $r6.<org.apache.xmlbeans.impl.common.InvalidLexicalValueException: void <init>(java.lang.String,javax.xml.stream.Location)>("invalid hexBinary value", $r8);

        throw $r6;
    }

    public java.io.InputStream getAttributeBase64Value(int) throws javax.xml.stream.XMLStreamException
    {
        byte[] $r4, $r5;
        java.lang.CharSequence $r2;
        org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS $r1, $r7;
        org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl r0;
        java.io.ByteArrayInputStream $r9;
        javax.xml.stream.Location $r8;
        int i0;
        org.apache.xmlbeans.impl.common.InvalidLexicalValueException $r6;
        java.lang.String $r3;

        r0 := @this: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS _charSeq>;

        $r2 = virtualinvoke $r1.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS: java.lang.CharSequence reloadAtt(int,int)>(i0, 2);

        $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>();

        $r4 = virtualinvoke $r3.<java.lang.String: byte[] getBytes()>();

        $r5 = staticinvoke <org.apache.xmlbeans.impl.util.Base64: byte[] decode(byte[])>($r4);

        if $r5 == null goto label1;

        $r9 = new java.io.ByteArrayInputStream;

        specialinvoke $r9.<java.io.ByteArrayInputStream: void <init>(byte[])>($r5);

        return $r9;

     label1:
        $r6 = new org.apache.xmlbeans.impl.common.InvalidLexicalValueException;

        $r7 = r0.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS _charSeq>;

        $r8 = virtualinvoke $r7.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS: javax.xml.stream.Location getLocation()>();

        specialinvoke $r6.<org.apache.xmlbeans.impl.common.InvalidLexicalValueException: void <init>(java.lang.String,javax.xml.stream.Location)>("invalid base64Binary value", $r8);

        throw $r6;
    }

    public org.apache.xmlbeans.XmlCalendar getAttributeCalendarValue(int) throws javax.xml.stream.XMLStreamException
    {
        org.apache.xmlbeans.GDateBuilder $r0;
        java.lang.CharSequence $r3;
        org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS $r2, $r7;
        java.lang.IllegalArgumentException $r5;
        org.apache.xmlbeans.XmlCalendar $r4;
        org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl r1;
        javax.xml.stream.Location $r8;
        int i0;
        org.apache.xmlbeans.impl.common.InvalidLexicalValueException $r6;

        r1 := @this: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl;

        i0 := @parameter0: int;

     label1:
        $r0 = new org.apache.xmlbeans.GDateBuilder;

        $r2 = r1.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS _charSeq>;

        $r3 = virtualinvoke $r2.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS: java.lang.CharSequence reloadAtt(int,int)>(i0, 2);

        specialinvoke $r0.<org.apache.xmlbeans.GDateBuilder: void <init>(java.lang.CharSequence)>($r3);

        $r4 = virtualinvoke $r0.<org.apache.xmlbeans.GDateBuilder: org.apache.xmlbeans.XmlCalendar getCalendar()>();

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        $r6 = new org.apache.xmlbeans.impl.common.InvalidLexicalValueException;

        $r7 = r1.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS _charSeq>;

        $r8 = virtualinvoke $r7.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS: javax.xml.stream.Location getLocation()>();

        specialinvoke $r6.<org.apache.xmlbeans.impl.common.InvalidLexicalValueException: void <init>(java.lang.Throwable,javax.xml.stream.Location)>($r5, $r8);

        throw $r6;

        catch java.lang.IllegalArgumentException from label1 to label2 with label3;
    }

    public java.util.Date getAttributeDateValue(int) throws javax.xml.stream.XMLStreamException
    {
        org.apache.xmlbeans.GDateBuilder $r0;
        java.lang.CharSequence $r3;
        java.util.Date $r4;
        org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS $r2, $r7;
        java.lang.IllegalArgumentException $r5;
        org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl r1;
        javax.xml.stream.Location $r8;
        int i0;
        org.apache.xmlbeans.impl.common.InvalidLexicalValueException $r6;

        r1 := @this: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl;

        i0 := @parameter0: int;

     label1:
        $r0 = new org.apache.xmlbeans.GDateBuilder;

        $r2 = r1.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS _charSeq>;

        $r3 = virtualinvoke $r2.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS: java.lang.CharSequence reloadAtt(int,int)>(i0, 2);

        specialinvoke $r0.<org.apache.xmlbeans.GDateBuilder: void <init>(java.lang.CharSequence)>($r3);

        $r4 = virtualinvoke $r0.<org.apache.xmlbeans.GDateBuilder: java.util.Date getDate()>();

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        $r6 = new org.apache.xmlbeans.impl.common.InvalidLexicalValueException;

        $r7 = r1.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS _charSeq>;

        $r8 = virtualinvoke $r7.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS: javax.xml.stream.Location getLocation()>();

        specialinvoke $r6.<org.apache.xmlbeans.impl.common.InvalidLexicalValueException: void <init>(java.lang.Throwable,javax.xml.stream.Location)>($r5, $r8);

        throw $r6;

        catch java.lang.IllegalArgumentException from label1 to label2 with label3;
    }

    public org.apache.xmlbeans.GDate getAttributeGDateValue(int) throws javax.xml.stream.XMLStreamException
    {
        java.lang.CharSequence $r3;
        org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS $r2, $r6;
        java.lang.IllegalArgumentException $r4;
        org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl r1;
        javax.xml.stream.Location $r7;
        int i0;
        org.apache.xmlbeans.impl.common.InvalidLexicalValueException $r5;
        org.apache.xmlbeans.GDate $r0;

        r1 := @this: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl;

        i0 := @parameter0: int;

     label1:
        $r0 = new org.apache.xmlbeans.GDate;

        $r2 = r1.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS _charSeq>;

        $r3 = virtualinvoke $r2.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS: java.lang.CharSequence reloadAtt(int,int)>(i0, 2);

        specialinvoke $r0.<org.apache.xmlbeans.GDate: void <init>(java.lang.CharSequence)>($r3);

     label2:
        return $r0;

     label3:
        $r4 := @caughtexception;

        $r5 = new org.apache.xmlbeans.impl.common.InvalidLexicalValueException;

        $r6 = r1.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS _charSeq>;

        $r7 = virtualinvoke $r6.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS: javax.xml.stream.Location getLocation()>();

        specialinvoke $r5.<org.apache.xmlbeans.impl.common.InvalidLexicalValueException: void <init>(java.lang.Throwable,javax.xml.stream.Location)>($r4, $r7);

        throw $r5;

        catch java.lang.IllegalArgumentException from label1 to label2 with label3;
    }

    public org.apache.xmlbeans.GDuration getAttributeGDurationValue(int) throws javax.xml.stream.XMLStreamException
    {
        java.lang.CharSequence $r3;
        org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS $r2, $r6;
        java.lang.IllegalArgumentException $r4;
        org.apache.xmlbeans.GDuration $r0;
        org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl r1;
        javax.xml.stream.Location $r7;
        int i0;
        org.apache.xmlbeans.impl.common.InvalidLexicalValueException $r5;

        r1 := @this: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl;

        i0 := @parameter0: int;

     label1:
        $r0 = new org.apache.xmlbeans.GDuration;

        $r2 = r1.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS _charSeq>;

        $r3 = virtualinvoke $r2.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS: java.lang.CharSequence reloadAtt(int,int)>(i0, 2);

        specialinvoke $r0.<org.apache.xmlbeans.GDuration: void <init>(java.lang.CharSequence)>($r3);

     label2:
        return $r0;

     label3:
        $r4 := @caughtexception;

        $r5 = new org.apache.xmlbeans.impl.common.InvalidLexicalValueException;

        $r6 = r1.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS _charSeq>;

        $r7 = virtualinvoke $r6.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS: javax.xml.stream.Location getLocation()>();

        specialinvoke $r5.<org.apache.xmlbeans.impl.common.InvalidLexicalValueException: void <init>(java.lang.Throwable,javax.xml.stream.Location)>($r4, $r7);

        throw $r5;

        catch java.lang.IllegalArgumentException from label1 to label2 with label3;
    }

    public javax.xml.namespace.QName getAttributeQNameValue(int) throws javax.xml.stream.XMLStreamException
    {
        java.lang.CharSequence $r2;
        org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS $r1, $r9;
        org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl r0;
        javax.xml.stream.XMLStreamReader $r3;
        javax.xml.stream.Location $r10;
        int i0;
        org.apache.xmlbeans.impl.common.InvalidLexicalValueException $r6, $r7;
        javax.xml.namespace.NamespaceContext $r4;
        javax.xml.namespace.QName $r5;
        java.lang.String $r8;

        r0 := @this: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl;

        i0 := @parameter0: int;

     label1:
        $r1 = r0.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS _charSeq>;

        $r2 = virtualinvoke $r1.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS: java.lang.CharSequence reloadAtt(int,int)>(i0, 2);

        $r3 = r0.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: javax.xml.stream.XMLStreamReader _xmlStream>;

        $r4 = interfaceinvoke $r3.<javax.xml.stream.XMLStreamReader: javax.xml.namespace.NamespaceContext getNamespaceContext()>();

        $r5 = staticinvoke <org.apache.xmlbeans.impl.util.XsTypeConverter: javax.xml.namespace.QName lexQName(java.lang.CharSequence,javax.xml.namespace.NamespaceContext)>($r2, $r4);

     label2:
        return $r5;

     label3:
        $r6 := @caughtexception;

        $r7 = new org.apache.xmlbeans.impl.common.InvalidLexicalValueException;

        $r8 = virtualinvoke $r6.<org.apache.xmlbeans.impl.common.InvalidLexicalValueException: java.lang.String getMessage()>();

        $r9 = r0.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS _charSeq>;

        $r10 = virtualinvoke $r9.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS: javax.xml.stream.Location getLocation()>();

        specialinvoke $r7.<org.apache.xmlbeans.impl.common.InvalidLexicalValueException: void <init>(java.lang.String,javax.xml.stream.Location)>($r8, $r10);

        throw $r7;

        catch org.apache.xmlbeans.impl.common.InvalidLexicalValueException from label1 to label2 with label3;
    }

    public java.lang.String getAttributeStringValue(java.lang.String, java.lang.String) throws javax.xml.stream.XMLStreamException
    {
        org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl r0;
        java.lang.CharSequence $r4;
        org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS $r3;
        java.lang.String r1, r2, $r5;

        r0 := @this: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = r0.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS _charSeq>;

        $r4 = virtualinvoke $r3.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS: java.lang.CharSequence reloadAtt(java.lang.String,java.lang.String,int)>(r1, r2, 1);

        $r5 = virtualinvoke $r4.<java.lang.Object: java.lang.String toString()>();

        return $r5;
    }

    public java.lang.String getAttributeStringValue(java.lang.String, java.lang.String, int) throws javax.xml.stream.XMLStreamException
    {
        org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl r0;
        javax.xml.stream.XMLStreamReader $r3;
        int i0;
        java.lang.String r1, r2, $r4, $r5;

        r0 := @this: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        $r3 = r0.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: javax.xml.stream.XMLStreamReader _xmlStream>;

        $r4 = interfaceinvoke $r3.<javax.xml.stream.XMLStreamReader: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(r1, r2);

        $r5 = staticinvoke <org.apache.xmlbeans.impl.common.XmlWhitespace: java.lang.String collapse(java.lang.String,int)>($r4, i0);

        return $r5;
    }

    public boolean getAttributeBooleanValue(java.lang.String, java.lang.String) throws javax.xml.stream.XMLStreamException
    {
        java.lang.CharSequence $r4;
        org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS $r3, $r7;
        org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl r0;
        javax.xml.stream.Location $r8;
        org.apache.xmlbeans.impl.common.InvalidLexicalValueException $r5, $r6;
        java.lang.String r1, r2;
        boolean $z0;

        r0 := @this: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = r0.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS _charSeq>;

        $r4 = virtualinvoke $r3.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS: java.lang.CharSequence reloadAtt(java.lang.String,java.lang.String,int)>(r1, r2, 2);

     label1:
        $z0 = staticinvoke <org.apache.xmlbeans.impl.util.XsTypeConverter: boolean lexBoolean(java.lang.CharSequence)>($r4);

     label2:
        return $z0;

     label3:
        $r5 := @caughtexception;

        $r6 = new org.apache.xmlbeans.impl.common.InvalidLexicalValueException;

        $r7 = r0.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS _charSeq>;

        $r8 = virtualinvoke $r7.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS: javax.xml.stream.Location getLocation()>();

        specialinvoke $r6.<org.apache.xmlbeans.impl.common.InvalidLexicalValueException: void <init>(java.lang.Throwable,javax.xml.stream.Location)>($r5, $r8);

        throw $r6;

        catch org.apache.xmlbeans.impl.common.InvalidLexicalValueException from label1 to label2 with label3;
    }

    public byte getAttributeByteValue(java.lang.String, java.lang.String) throws javax.xml.stream.XMLStreamException
    {
        java.lang.CharSequence $r4;
        org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS $r3, $r7;
        java.lang.NumberFormatException $r5;
        org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl r0;
        byte $b0;
        javax.xml.stream.Location $r8;
        org.apache.xmlbeans.impl.common.InvalidLexicalValueException $r6;
        java.lang.String r1, r2;

        r0 := @this: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = r0.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS _charSeq>;

        $r4 = virtualinvoke $r3.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS: java.lang.CharSequence reloadAtt(java.lang.String,java.lang.String,int)>(r1, r2, 2);

     label1:
        $b0 = staticinvoke <org.apache.xmlbeans.impl.util.XsTypeConverter: byte lexByte(java.lang.CharSequence)>($r4);

     label2:
        return $b0;

     label3:
        $r5 := @caughtexception;

        $r6 = new org.apache.xmlbeans.impl.common.InvalidLexicalValueException;

        $r7 = r0.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS _charSeq>;

        $r8 = virtualinvoke $r7.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS: javax.xml.stream.Location getLocation()>();

        specialinvoke $r6.<org.apache.xmlbeans.impl.common.InvalidLexicalValueException: void <init>(java.lang.Throwable,javax.xml.stream.Location)>($r5, $r8);

        throw $r6;

        catch java.lang.NumberFormatException from label1 to label2 with label3;
    }

    public short getAttributeShortValue(java.lang.String, java.lang.String) throws javax.xml.stream.XMLStreamException
    {
        java.lang.CharSequence $r4;
        org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS $r3, $r7;
        java.lang.NumberFormatException $r5;
        short $s0;
        org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl r0;
        javax.xml.stream.Location $r8;
        org.apache.xmlbeans.impl.common.InvalidLexicalValueException $r6;
        java.lang.String r1, r2;

        r0 := @this: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = r0.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS _charSeq>;

        $r4 = virtualinvoke $r3.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS: java.lang.CharSequence reloadAtt(java.lang.String,java.lang.String,int)>(r1, r2, 2);

     label1:
        $s0 = staticinvoke <org.apache.xmlbeans.impl.util.XsTypeConverter: short lexShort(java.lang.CharSequence)>($r4);

     label2:
        return $s0;

     label3:
        $r5 := @caughtexception;

        $r6 = new org.apache.xmlbeans.impl.common.InvalidLexicalValueException;

        $r7 = r0.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS _charSeq>;

        $r8 = virtualinvoke $r7.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS: javax.xml.stream.Location getLocation()>();

        specialinvoke $r6.<org.apache.xmlbeans.impl.common.InvalidLexicalValueException: void <init>(java.lang.Throwable,javax.xml.stream.Location)>($r5, $r8);

        throw $r6;

        catch java.lang.NumberFormatException from label1 to label2 with label3;
    }

    public int getAttributeIntValue(java.lang.String, java.lang.String) throws javax.xml.stream.XMLStreamException
    {
        java.lang.CharSequence $r4;
        org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS $r3, $r7;
        java.lang.NumberFormatException $r5;
        org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl r0;
        javax.xml.stream.Location $r8;
        int $i0;
        org.apache.xmlbeans.impl.common.InvalidLexicalValueException $r6;
        java.lang.String r1, r2;

        r0 := @this: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = r0.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS _charSeq>;

        $r4 = virtualinvoke $r3.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS: java.lang.CharSequence reloadAtt(java.lang.String,java.lang.String,int)>(r1, r2, 2);

     label1:
        $i0 = staticinvoke <org.apache.xmlbeans.impl.util.XsTypeConverter: int lexInt(java.lang.CharSequence)>($r4);

     label2:
        return $i0;

     label3:
        $r5 := @caughtexception;

        $r6 = new org.apache.xmlbeans.impl.common.InvalidLexicalValueException;

        $r7 = r0.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS _charSeq>;

        $r8 = virtualinvoke $r7.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS: javax.xml.stream.Location getLocation()>();

        specialinvoke $r6.<org.apache.xmlbeans.impl.common.InvalidLexicalValueException: void <init>(java.lang.Throwable,javax.xml.stream.Location)>($r5, $r8);

        throw $r6;

        catch java.lang.NumberFormatException from label1 to label2 with label3;
    }

    public long getAttributeLongValue(java.lang.String, java.lang.String) throws javax.xml.stream.XMLStreamException
    {
        java.lang.CharSequence $r4;
        org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS $r3, $r7;
        long $l0;
        java.lang.NumberFormatException $r5;
        org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl r0;
        javax.xml.stream.Location $r8;
        org.apache.xmlbeans.impl.common.InvalidLexicalValueException $r6;
        java.lang.String r1, r2;

        r0 := @this: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = r0.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS _charSeq>;

        $r4 = virtualinvoke $r3.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS: java.lang.CharSequence reloadAtt(java.lang.String,java.lang.String,int)>(r1, r2, 2);

     label1:
        $l0 = staticinvoke <org.apache.xmlbeans.impl.util.XsTypeConverter: long lexLong(java.lang.CharSequence)>($r4);

     label2:
        return $l0;

     label3:
        $r5 := @caughtexception;

        $r6 = new org.apache.xmlbeans.impl.common.InvalidLexicalValueException;

        $r7 = r0.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS _charSeq>;

        $r8 = virtualinvoke $r7.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS: javax.xml.stream.Location getLocation()>();

        specialinvoke $r6.<org.apache.xmlbeans.impl.common.InvalidLexicalValueException: void <init>(java.lang.Throwable,javax.xml.stream.Location)>($r5, $r8);

        throw $r6;

        catch java.lang.NumberFormatException from label1 to label2 with label3;
    }

    public java.math.BigInteger getAttributeBigIntegerValue(java.lang.String, java.lang.String) throws javax.xml.stream.XMLStreamException
    {
        java.lang.CharSequence $r4;
        org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS $r3, $r8;
        java.lang.NumberFormatException $r6;
        org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl r0;
        javax.xml.stream.Location $r9;
        org.apache.xmlbeans.impl.common.InvalidLexicalValueException $r7;
        java.math.BigInteger $r5;
        java.lang.String r1, r2;

        r0 := @this: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = r0.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS _charSeq>;

        $r4 = virtualinvoke $r3.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS: java.lang.CharSequence reloadAtt(java.lang.String,java.lang.String,int)>(r1, r2, 2);

     label1:
        $r5 = staticinvoke <org.apache.xmlbeans.impl.util.XsTypeConverter: java.math.BigInteger lexInteger(java.lang.CharSequence)>($r4);

     label2:
        return $r5;

     label3:
        $r6 := @caughtexception;

        $r7 = new org.apache.xmlbeans.impl.common.InvalidLexicalValueException;

        $r8 = r0.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS _charSeq>;

        $r9 = virtualinvoke $r8.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS: javax.xml.stream.Location getLocation()>();

        specialinvoke $r7.<org.apache.xmlbeans.impl.common.InvalidLexicalValueException: void <init>(java.lang.Throwable,javax.xml.stream.Location)>($r6, $r9);

        throw $r7;

        catch java.lang.NumberFormatException from label1 to label2 with label3;
    }

    public java.math.BigDecimal getAttributeBigDecimalValue(java.lang.String, java.lang.String) throws javax.xml.stream.XMLStreamException
    {
        java.lang.CharSequence $r4;
        org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS $r3, $r8;
        java.lang.NumberFormatException $r6;
        java.math.BigDecimal $r5;
        org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl r0;
        javax.xml.stream.Location $r9;
        org.apache.xmlbeans.impl.common.InvalidLexicalValueException $r7;
        java.lang.String r1, r2;

        r0 := @this: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = r0.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS _charSeq>;

        $r4 = virtualinvoke $r3.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS: java.lang.CharSequence reloadAtt(java.lang.String,java.lang.String,int)>(r1, r2, 2);

     label1:
        $r5 = staticinvoke <org.apache.xmlbeans.impl.util.XsTypeConverter: java.math.BigDecimal lexDecimal(java.lang.CharSequence)>($r4);

     label2:
        return $r5;

     label3:
        $r6 := @caughtexception;

        $r7 = new org.apache.xmlbeans.impl.common.InvalidLexicalValueException;

        $r8 = r0.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS _charSeq>;

        $r9 = virtualinvoke $r8.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS: javax.xml.stream.Location getLocation()>();

        specialinvoke $r7.<org.apache.xmlbeans.impl.common.InvalidLexicalValueException: void <init>(java.lang.Throwable,javax.xml.stream.Location)>($r6, $r9);

        throw $r7;

        catch java.lang.NumberFormatException from label1 to label2 with label3;
    }

    public float getAttributeFloatValue(java.lang.String, java.lang.String) throws javax.xml.stream.XMLStreamException
    {
        java.lang.CharSequence $r4;
        org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS $r3, $r7;
        java.lang.NumberFormatException $r5;
        org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl r0;
        javax.xml.stream.Location $r8;
        float $f0;
        org.apache.xmlbeans.impl.common.InvalidLexicalValueException $r6;
        java.lang.String r1, r2;

        r0 := @this: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = r0.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS _charSeq>;

        $r4 = virtualinvoke $r3.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS: java.lang.CharSequence reloadAtt(java.lang.String,java.lang.String,int)>(r1, r2, 2);

     label1:
        $f0 = staticinvoke <org.apache.xmlbeans.impl.util.XsTypeConverter: float lexFloat(java.lang.CharSequence)>($r4);

     label2:
        return $f0;

     label3:
        $r5 := @caughtexception;

        $r6 = new org.apache.xmlbeans.impl.common.InvalidLexicalValueException;

        $r7 = r0.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS _charSeq>;

        $r8 = virtualinvoke $r7.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS: javax.xml.stream.Location getLocation()>();

        specialinvoke $r6.<org.apache.xmlbeans.impl.common.InvalidLexicalValueException: void <init>(java.lang.Throwable,javax.xml.stream.Location)>($r5, $r8);

        throw $r6;

        catch java.lang.NumberFormatException from label1 to label2 with label3;
    }

    public double getAttributeDoubleValue(java.lang.String, java.lang.String) throws javax.xml.stream.XMLStreamException
    {
        java.lang.CharSequence $r4;
        org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS $r3, $r7;
        java.lang.NumberFormatException $r5;
        org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl r0;
        javax.xml.stream.Location $r8;
        org.apache.xmlbeans.impl.common.InvalidLexicalValueException $r6;
        java.lang.String r1, r2;
        double $d0;

        r0 := @this: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = r0.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS _charSeq>;

        $r4 = virtualinvoke $r3.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS: java.lang.CharSequence reloadAtt(java.lang.String,java.lang.String,int)>(r1, r2, 2);

     label1:
        $d0 = staticinvoke <org.apache.xmlbeans.impl.util.XsTypeConverter: double lexDouble(java.lang.CharSequence)>($r4);

     label2:
        return $d0;

     label3:
        $r5 := @caughtexception;

        $r6 = new org.apache.xmlbeans.impl.common.InvalidLexicalValueException;

        $r7 = r0.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS _charSeq>;

        $r8 = virtualinvoke $r7.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS: javax.xml.stream.Location getLocation()>();

        specialinvoke $r6.<org.apache.xmlbeans.impl.common.InvalidLexicalValueException: void <init>(java.lang.Throwable,javax.xml.stream.Location)>($r5, $r8);

        throw $r6;

        catch java.lang.NumberFormatException from label1 to label2 with label3;
    }

    public java.io.InputStream getAttributeHexBinaryValue(java.lang.String, java.lang.String) throws javax.xml.stream.XMLStreamException
    {
        byte[] $r6, $r7;
        java.lang.CharSequence $r4;
        org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS $r3, $r9;
        org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl r0;
        java.io.ByteArrayInputStream $r11;
        javax.xml.stream.Location $r10;
        org.apache.xmlbeans.impl.common.InvalidLexicalValueException $r8;
        java.lang.String r1, r2, $r5;

        r0 := @this: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = r0.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS _charSeq>;

        $r4 = virtualinvoke $r3.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS: java.lang.CharSequence reloadAtt(java.lang.String,java.lang.String,int)>(r1, r2, 2);

        $r5 = virtualinvoke $r4.<java.lang.Object: java.lang.String toString()>();

        $r6 = virtualinvoke $r5.<java.lang.String: byte[] getBytes()>();

        $r7 = staticinvoke <org.apache.xmlbeans.impl.util.HexBin: byte[] decode(byte[])>($r6);

        if $r7 == null goto label1;

        $r11 = new java.io.ByteArrayInputStream;

        specialinvoke $r11.<java.io.ByteArrayInputStream: void <init>(byte[])>($r7);

        return $r11;

     label1:
        $r8 = new org.apache.xmlbeans.impl.common.InvalidLexicalValueException;

        $r9 = r0.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS _charSeq>;

        $r10 = virtualinvoke $r9.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS: javax.xml.stream.Location getLocation()>();

        specialinvoke $r8.<org.apache.xmlbeans.impl.common.InvalidLexicalValueException: void <init>(java.lang.String,javax.xml.stream.Location)>("invalid hexBinary value", $r10);

        throw $r8;
    }

    public java.io.InputStream getAttributeBase64Value(java.lang.String, java.lang.String) throws javax.xml.stream.XMLStreamException
    {
        byte[] $r6, $r7;
        java.lang.CharSequence $r4;
        org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS $r3, $r9;
        org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl r0;
        java.io.ByteArrayInputStream $r11;
        javax.xml.stream.Location $r10;
        org.apache.xmlbeans.impl.common.InvalidLexicalValueException $r8;
        java.lang.String r1, r2, $r5;

        r0 := @this: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = r0.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS _charSeq>;

        $r4 = virtualinvoke $r3.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS: java.lang.CharSequence reloadAtt(java.lang.String,java.lang.String,int)>(r1, r2, 2);

        $r5 = virtualinvoke $r4.<java.lang.Object: java.lang.String toString()>();

        $r6 = virtualinvoke $r5.<java.lang.String: byte[] getBytes()>();

        $r7 = staticinvoke <org.apache.xmlbeans.impl.util.Base64: byte[] decode(byte[])>($r6);

        if $r7 == null goto label1;

        $r11 = new java.io.ByteArrayInputStream;

        specialinvoke $r11.<java.io.ByteArrayInputStream: void <init>(byte[])>($r7);

        return $r11;

     label1:
        $r8 = new org.apache.xmlbeans.impl.common.InvalidLexicalValueException;

        $r9 = r0.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS _charSeq>;

        $r10 = virtualinvoke $r9.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS: javax.xml.stream.Location getLocation()>();

        specialinvoke $r8.<org.apache.xmlbeans.impl.common.InvalidLexicalValueException: void <init>(java.lang.String,javax.xml.stream.Location)>("invalid base64Binary value", $r10);

        throw $r8;
    }

    public org.apache.xmlbeans.XmlCalendar getAttributeCalendarValue(java.lang.String, java.lang.String) throws javax.xml.stream.XMLStreamException
    {
        java.lang.CharSequence $r4;
        org.apache.xmlbeans.GDateBuilder $r5;
        org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS $r3, $r9;
        java.lang.IllegalArgumentException $r7;
        org.apache.xmlbeans.XmlCalendar $r6;
        org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl r0;
        javax.xml.stream.Location $r10;
        org.apache.xmlbeans.impl.common.InvalidLexicalValueException $r8;
        java.lang.String r1, r2;

        r0 := @this: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = r0.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS _charSeq>;

        $r4 = virtualinvoke $r3.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS: java.lang.CharSequence reloadAtt(java.lang.String,java.lang.String,int)>(r1, r2, 2);

     label1:
        $r5 = new org.apache.xmlbeans.GDateBuilder;

        specialinvoke $r5.<org.apache.xmlbeans.GDateBuilder: void <init>(java.lang.CharSequence)>($r4);

        $r6 = virtualinvoke $r5.<org.apache.xmlbeans.GDateBuilder: org.apache.xmlbeans.XmlCalendar getCalendar()>();

     label2:
        return $r6;

     label3:
        $r7 := @caughtexception;

        $r8 = new org.apache.xmlbeans.impl.common.InvalidLexicalValueException;

        $r9 = r0.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS _charSeq>;

        $r10 = virtualinvoke $r9.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS: javax.xml.stream.Location getLocation()>();

        specialinvoke $r8.<org.apache.xmlbeans.impl.common.InvalidLexicalValueException: void <init>(java.lang.Throwable,javax.xml.stream.Location)>($r7, $r10);

        throw $r8;

        catch java.lang.IllegalArgumentException from label1 to label2 with label3;
    }

    public java.util.Date getAttributeDateValue(java.lang.String, java.lang.String) throws javax.xml.stream.XMLStreamException
    {
        java.lang.CharSequence $r4;
        org.apache.xmlbeans.GDateBuilder $r5;
        java.util.Date $r6;
        org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS $r3, $r9;
        java.lang.IllegalArgumentException $r7;
        org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl r0;
        javax.xml.stream.Location $r10;
        org.apache.xmlbeans.impl.common.InvalidLexicalValueException $r8;
        java.lang.String r1, r2;

        r0 := @this: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

     label1:
        $r3 = r0.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS _charSeq>;

        $r4 = virtualinvoke $r3.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS: java.lang.CharSequence reloadAtt(java.lang.String,java.lang.String,int)>(r1, r2, 2);

        $r5 = new org.apache.xmlbeans.GDateBuilder;

        specialinvoke $r5.<org.apache.xmlbeans.GDateBuilder: void <init>(java.lang.CharSequence)>($r4);

        $r6 = virtualinvoke $r5.<org.apache.xmlbeans.GDateBuilder: java.util.Date getDate()>();

     label2:
        return $r6;

     label3:
        $r7 := @caughtexception;

        $r8 = new org.apache.xmlbeans.impl.common.InvalidLexicalValueException;

        $r9 = r0.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS _charSeq>;

        $r10 = virtualinvoke $r9.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS: javax.xml.stream.Location getLocation()>();

        specialinvoke $r8.<org.apache.xmlbeans.impl.common.InvalidLexicalValueException: void <init>(java.lang.Throwable,javax.xml.stream.Location)>($r7, $r10);

        throw $r8;

        catch java.lang.IllegalArgumentException from label1 to label2 with label3;
    }

    public org.apache.xmlbeans.GDate getAttributeGDateValue(java.lang.String, java.lang.String) throws javax.xml.stream.XMLStreamException
    {
        java.lang.CharSequence $r4;
        org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS $r3, $r8;
        java.lang.IllegalArgumentException $r6;
        org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl r0;
        javax.xml.stream.Location $r9;
        org.apache.xmlbeans.impl.common.InvalidLexicalValueException $r7;
        org.apache.xmlbeans.GDate $r5;
        java.lang.String r1, r2;

        r0 := @this: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

     label1:
        $r3 = r0.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS _charSeq>;

        $r4 = virtualinvoke $r3.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS: java.lang.CharSequence reloadAtt(java.lang.String,java.lang.String,int)>(r1, r2, 2);

        $r5 = new org.apache.xmlbeans.GDate;

        specialinvoke $r5.<org.apache.xmlbeans.GDate: void <init>(java.lang.CharSequence)>($r4);

     label2:
        return $r5;

     label3:
        $r6 := @caughtexception;

        $r7 = new org.apache.xmlbeans.impl.common.InvalidLexicalValueException;

        $r8 = r0.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS _charSeq>;

        $r9 = virtualinvoke $r8.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS: javax.xml.stream.Location getLocation()>();

        specialinvoke $r7.<org.apache.xmlbeans.impl.common.InvalidLexicalValueException: void <init>(java.lang.Throwable,javax.xml.stream.Location)>($r6, $r9);

        throw $r7;

        catch java.lang.IllegalArgumentException from label1 to label2 with label3;
    }

    public org.apache.xmlbeans.GDuration getAttributeGDurationValue(java.lang.String, java.lang.String) throws javax.xml.stream.XMLStreamException
    {
        java.lang.CharSequence $r5;
        org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS $r4, $r8;
        java.lang.IllegalArgumentException $r6;
        org.apache.xmlbeans.GDuration $r0;
        org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl r1;
        javax.xml.stream.Location $r9;
        org.apache.xmlbeans.impl.common.InvalidLexicalValueException $r7;
        java.lang.String r2, r3;

        r1 := @this: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

     label1:
        $r0 = new org.apache.xmlbeans.GDuration;

        $r4 = r1.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS _charSeq>;

        $r5 = virtualinvoke $r4.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS: java.lang.CharSequence reloadAtt(java.lang.String,java.lang.String,int)>(r2, r3, 2);

        specialinvoke $r0.<org.apache.xmlbeans.GDuration: void <init>(java.lang.CharSequence)>($r5);

     label2:
        return $r0;

     label3:
        $r6 := @caughtexception;

        $r7 = new org.apache.xmlbeans.impl.common.InvalidLexicalValueException;

        $r8 = r1.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS _charSeq>;

        $r9 = virtualinvoke $r8.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS: javax.xml.stream.Location getLocation()>();

        specialinvoke $r7.<org.apache.xmlbeans.impl.common.InvalidLexicalValueException: void <init>(java.lang.Throwable,javax.xml.stream.Location)>($r6, $r9);

        throw $r7;

        catch java.lang.IllegalArgumentException from label1 to label2 with label3;
    }

    public javax.xml.namespace.QName getAttributeQNameValue(java.lang.String, java.lang.String) throws javax.xml.stream.XMLStreamException
    {
        java.lang.CharSequence $r4;
        org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS $r3, $r11;
        org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl r0;
        javax.xml.stream.XMLStreamReader $r5;
        javax.xml.stream.Location $r12;
        org.apache.xmlbeans.impl.common.InvalidLexicalValueException $r8, $r9;
        javax.xml.namespace.NamespaceContext $r6;
        java.lang.String r1, r2, $r10;
        javax.xml.namespace.QName $r7;

        r0 := @this: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = r0.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS _charSeq>;

        $r4 = virtualinvoke $r3.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS: java.lang.CharSequence reloadAtt(java.lang.String,java.lang.String,int)>(r1, r2, 2);

     label1:
        $r5 = r0.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: javax.xml.stream.XMLStreamReader _xmlStream>;

        $r6 = interfaceinvoke $r5.<javax.xml.stream.XMLStreamReader: javax.xml.namespace.NamespaceContext getNamespaceContext()>();

        $r7 = staticinvoke <org.apache.xmlbeans.impl.util.XsTypeConverter: javax.xml.namespace.QName lexQName(java.lang.CharSequence,javax.xml.namespace.NamespaceContext)>($r4, $r6);

     label2:
        return $r7;

     label3:
        $r8 := @caughtexception;

        $r9 = new org.apache.xmlbeans.impl.common.InvalidLexicalValueException;

        $r10 = virtualinvoke $r8.<org.apache.xmlbeans.impl.common.InvalidLexicalValueException: java.lang.String getMessage()>();

        $r11 = r0.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS _charSeq>;

        $r12 = virtualinvoke $r11.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl$CharSeqTrimWS: javax.xml.stream.Location getLocation()>();

        specialinvoke $r9.<org.apache.xmlbeans.impl.common.InvalidLexicalValueException: void <init>(java.lang.String,javax.xml.stream.Location)>($r10, $r12);

        throw $r9;

        catch org.apache.xmlbeans.impl.common.InvalidLexicalValueException from label1 to label2 with label3;
    }

    public void setDefaultValue(java.lang.String) throws javax.xml.stream.XMLStreamException
    {
        org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl r0;
        java.lang.String r1;

        r0 := @this: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl;

        r1 := @parameter0: java.lang.String;

        r0.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: java.lang.String _defaultValue> = r1;

        return;
    }

    public java.lang.Object getProperty(java.lang.String) throws java.lang.IllegalArgumentException
    {
        org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl r0;
        javax.xml.stream.XMLStreamReader $r2;
        java.lang.Object $r3;
        java.lang.String r1;

        r0 := @this: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: javax.xml.stream.XMLStreamReader _xmlStream>;

        $r3 = interfaceinvoke $r2.<javax.xml.stream.XMLStreamReader: java.lang.Object getProperty(java.lang.String)>(r1);

        return $r3;
    }

    public int next() throws javax.xml.stream.XMLStreamException
    {
        int $i0;
        org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl r0;
        javax.xml.stream.XMLStreamReader $r1;

        r0 := @this: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl;

        $r1 = r0.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: javax.xml.stream.XMLStreamReader _xmlStream>;

        $i0 = interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: int next()>();

        return $i0;
    }

    public void require(int, java.lang.String, java.lang.String) throws javax.xml.stream.XMLStreamException
    {
        org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl r0;
        javax.xml.stream.XMLStreamReader $r3;
        int i0;
        java.lang.String r1, r2;

        r0 := @this: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        $r3 = r0.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: javax.xml.stream.XMLStreamReader _xmlStream>;

        interfaceinvoke $r3.<javax.xml.stream.XMLStreamReader: void require(int,java.lang.String,java.lang.String)>(i0, r1, r2);

        return;
    }

    public java.lang.String getElementText() throws javax.xml.stream.XMLStreamException
    {
        org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl r0;
        java.lang.String $r2;
        javax.xml.stream.XMLStreamReader $r1;

        r0 := @this: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl;

        $r1 = r0.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: javax.xml.stream.XMLStreamReader _xmlStream>;

        $r2 = interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: java.lang.String getElementText()>();

        return $r2;
    }

    public int nextTag() throws javax.xml.stream.XMLStreamException
    {
        int $i0;
        org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl r0;
        javax.xml.stream.XMLStreamReader $r1;

        r0 := @this: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl;

        $r1 = r0.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: javax.xml.stream.XMLStreamReader _xmlStream>;

        $i0 = interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: int nextTag()>();

        return $i0;
    }

    public boolean hasNext() throws javax.xml.stream.XMLStreamException
    {
        org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl r0;
        javax.xml.stream.XMLStreamReader $r1;
        boolean $z0;

        r0 := @this: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl;

        $r1 = r0.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: javax.xml.stream.XMLStreamReader _xmlStream>;

        $z0 = interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: boolean hasNext()>();

        return $z0;
    }

    public void close() throws javax.xml.stream.XMLStreamException
    {
        org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl r0;
        javax.xml.stream.XMLStreamReader $r1;

        r0 := @this: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl;

        $r1 = r0.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: javax.xml.stream.XMLStreamReader _xmlStream>;

        interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: void close()>();

        return;
    }

    public java.lang.String getNamespaceURI(java.lang.String)
    {
        org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl r0;
        javax.xml.stream.XMLStreamReader $r2;
        java.lang.String r1, $r3;

        r0 := @this: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: javax.xml.stream.XMLStreamReader _xmlStream>;

        $r3 = interfaceinvoke $r2.<javax.xml.stream.XMLStreamReader: java.lang.String getNamespaceURI(java.lang.String)>(r1);

        return $r3;
    }

    public boolean isStartElement()
    {
        org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl r0;
        javax.xml.stream.XMLStreamReader $r1;
        boolean $z0;

        r0 := @this: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl;

        $r1 = r0.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: javax.xml.stream.XMLStreamReader _xmlStream>;

        $z0 = interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: boolean isStartElement()>();

        return $z0;
    }

    public boolean isEndElement()
    {
        org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl r0;
        javax.xml.stream.XMLStreamReader $r1;
        boolean $z0;

        r0 := @this: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl;

        $r1 = r0.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: javax.xml.stream.XMLStreamReader _xmlStream>;

        $z0 = interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: boolean isEndElement()>();

        return $z0;
    }

    public boolean isCharacters()
    {
        org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl r0;
        javax.xml.stream.XMLStreamReader $r1;
        boolean $z0;

        r0 := @this: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl;

        $r1 = r0.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: javax.xml.stream.XMLStreamReader _xmlStream>;

        $z0 = interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: boolean isCharacters()>();

        return $z0;
    }

    public boolean isWhiteSpace()
    {
        org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl r0;
        javax.xml.stream.XMLStreamReader $r1;
        boolean $z0;

        r0 := @this: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl;

        $r1 = r0.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: javax.xml.stream.XMLStreamReader _xmlStream>;

        $z0 = interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: boolean isWhiteSpace()>();

        return $z0;
    }

    public java.lang.String getAttributeValue(java.lang.String, java.lang.String)
    {
        org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl r0;
        javax.xml.stream.XMLStreamReader $r3;
        java.lang.String r1, r2, $r4;

        r0 := @this: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = r0.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: javax.xml.stream.XMLStreamReader _xmlStream>;

        $r4 = interfaceinvoke $r3.<javax.xml.stream.XMLStreamReader: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(r1, r2);

        return $r4;
    }

    public int getAttributeCount()
    {
        int $i0;
        org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl r0;
        javax.xml.stream.XMLStreamReader $r1;

        r0 := @this: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl;

        $r1 = r0.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: javax.xml.stream.XMLStreamReader _xmlStream>;

        $i0 = interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: int getAttributeCount()>();

        return $i0;
    }

    public javax.xml.namespace.QName getAttributeName(int)
    {
        org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl r0;
        javax.xml.stream.XMLStreamReader $r1;
        int i0;
        javax.xml.namespace.QName $r2;

        r0 := @this: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: javax.xml.stream.XMLStreamReader _xmlStream>;

        $r2 = interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: javax.xml.namespace.QName getAttributeName(int)>(i0);

        return $r2;
    }

    public java.lang.String getAttributeNamespace(int)
    {
        org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl r0;
        javax.xml.stream.XMLStreamReader $r1;
        int i0;
        java.lang.String $r2;

        r0 := @this: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: javax.xml.stream.XMLStreamReader _xmlStream>;

        $r2 = interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: java.lang.String getAttributeNamespace(int)>(i0);

        return $r2;
    }

    public java.lang.String getAttributeLocalName(int)
    {
        org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl r0;
        javax.xml.stream.XMLStreamReader $r1;
        int i0;
        java.lang.String $r2;

        r0 := @this: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: javax.xml.stream.XMLStreamReader _xmlStream>;

        $r2 = interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: java.lang.String getAttributeLocalName(int)>(i0);

        return $r2;
    }

    public java.lang.String getAttributePrefix(int)
    {
        org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl r0;
        javax.xml.stream.XMLStreamReader $r1;
        int i0;
        java.lang.String $r2;

        r0 := @this: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: javax.xml.stream.XMLStreamReader _xmlStream>;

        $r2 = interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: java.lang.String getAttributePrefix(int)>(i0);

        return $r2;
    }

    public java.lang.String getAttributeType(int)
    {
        org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl r0;
        javax.xml.stream.XMLStreamReader $r1;
        int i0;
        java.lang.String $r2;

        r0 := @this: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: javax.xml.stream.XMLStreamReader _xmlStream>;

        $r2 = interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: java.lang.String getAttributeType(int)>(i0);

        return $r2;
    }

    public java.lang.String getAttributeValue(int)
    {
        org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl r0;
        javax.xml.stream.XMLStreamReader $r1;
        int i0;
        java.lang.String $r2;

        r0 := @this: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: javax.xml.stream.XMLStreamReader _xmlStream>;

        $r2 = interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: java.lang.String getAttributeValue(int)>(i0);

        return $r2;
    }

    public boolean isAttributeSpecified(int)
    {
        org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl r0;
        javax.xml.stream.XMLStreamReader $r1;
        int i0;
        boolean $z0;

        r0 := @this: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: javax.xml.stream.XMLStreamReader _xmlStream>;

        $z0 = interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: boolean isAttributeSpecified(int)>(i0);

        return $z0;
    }

    public int getNamespaceCount()
    {
        int $i0;
        org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl r0;
        javax.xml.stream.XMLStreamReader $r1;

        r0 := @this: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl;

        $r1 = r0.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: javax.xml.stream.XMLStreamReader _xmlStream>;

        $i0 = interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: int getNamespaceCount()>();

        return $i0;
    }

    public java.lang.String getNamespacePrefix(int)
    {
        org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl r0;
        javax.xml.stream.XMLStreamReader $r1;
        int i0;
        java.lang.String $r2;

        r0 := @this: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: javax.xml.stream.XMLStreamReader _xmlStream>;

        $r2 = interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: java.lang.String getNamespacePrefix(int)>(i0);

        return $r2;
    }

    public java.lang.String getNamespaceURI(int)
    {
        org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl r0;
        javax.xml.stream.XMLStreamReader $r1;
        int i0;
        java.lang.String $r2;

        r0 := @this: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: javax.xml.stream.XMLStreamReader _xmlStream>;

        $r2 = interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: java.lang.String getNamespaceURI(int)>(i0);

        return $r2;
    }

    public javax.xml.namespace.NamespaceContext getNamespaceContext()
    {
        javax.xml.namespace.NamespaceContext $r2;
        org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl r0;
        javax.xml.stream.XMLStreamReader $r1;

        r0 := @this: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl;

        $r1 = r0.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: javax.xml.stream.XMLStreamReader _xmlStream>;

        $r2 = interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: javax.xml.namespace.NamespaceContext getNamespaceContext()>();

        return $r2;
    }

    public int getEventType()
    {
        int $i0;
        org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl r0;
        javax.xml.stream.XMLStreamReader $r1;

        r0 := @this: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl;

        $r1 = r0.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: javax.xml.stream.XMLStreamReader _xmlStream>;

        $i0 = interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: int getEventType()>();

        return $i0;
    }

    public java.lang.String getText()
    {
        org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl r0;
        java.lang.String $r2;
        javax.xml.stream.XMLStreamReader $r1;

        r0 := @this: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl;

        $r1 = r0.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: javax.xml.stream.XMLStreamReader _xmlStream>;

        $r2 = interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: java.lang.String getText()>();

        return $r2;
    }

    public char[] getTextCharacters()
    {
        char[] $r2;
        org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl r0;
        javax.xml.stream.XMLStreamReader $r1;

        r0 := @this: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl;

        $r1 = r0.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: javax.xml.stream.XMLStreamReader _xmlStream>;

        $r2 = interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: char[] getTextCharacters()>();

        return $r2;
    }

    public int getTextCharacters(int, char[], int, int) throws javax.xml.stream.XMLStreamException
    {
        org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl r0;
        javax.xml.stream.XMLStreamReader $r2;
        int i0, i1, i2, $i3;
        char[] r1;

        r0 := @this: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl;

        i0 := @parameter0: int;

        r1 := @parameter1: char[];

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        $r2 = r0.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: javax.xml.stream.XMLStreamReader _xmlStream>;

        $i3 = interfaceinvoke $r2.<javax.xml.stream.XMLStreamReader: int getTextCharacters(int,char[],int,int)>(i0, r1, i1, i2);

        return $i3;
    }

    public int getTextStart()
    {
        int $i0;
        org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl r0;
        javax.xml.stream.XMLStreamReader $r1;

        r0 := @this: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl;

        $r1 = r0.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: javax.xml.stream.XMLStreamReader _xmlStream>;

        $i0 = interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: int getTextStart()>();

        return $i0;
    }

    public int getTextLength()
    {
        int $i0;
        org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl r0;
        javax.xml.stream.XMLStreamReader $r1;

        r0 := @this: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl;

        $r1 = r0.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: javax.xml.stream.XMLStreamReader _xmlStream>;

        $i0 = interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: int getTextLength()>();

        return $i0;
    }

    public java.lang.String getEncoding()
    {
        org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl r0;
        java.lang.String $r2;
        javax.xml.stream.XMLStreamReader $r1;

        r0 := @this: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl;

        $r1 = r0.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: javax.xml.stream.XMLStreamReader _xmlStream>;

        $r2 = interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: java.lang.String getEncoding()>();

        return $r2;
    }

    public boolean hasText()
    {
        org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl r0;
        javax.xml.stream.XMLStreamReader $r1;
        boolean $z0;

        r0 := @this: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl;

        $r1 = r0.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: javax.xml.stream.XMLStreamReader _xmlStream>;

        $z0 = interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: boolean hasText()>();

        return $z0;
    }

    public javax.xml.stream.Location getLocation()
    {
        org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl r0;
        javax.xml.stream.XMLStreamReader $r1;
        javax.xml.stream.Location $r2;

        r0 := @this: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl;

        $r1 = r0.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: javax.xml.stream.XMLStreamReader _xmlStream>;

        $r2 = interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: javax.xml.stream.Location getLocation()>();

        return $r2;
    }

    public javax.xml.namespace.QName getName()
    {
        org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl r0;
        javax.xml.namespace.QName $r2;
        javax.xml.stream.XMLStreamReader $r1;

        r0 := @this: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl;

        $r1 = r0.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: javax.xml.stream.XMLStreamReader _xmlStream>;

        $r2 = interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: javax.xml.namespace.QName getName()>();

        return $r2;
    }

    public java.lang.String getLocalName()
    {
        org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl r0;
        java.lang.String $r2;
        javax.xml.stream.XMLStreamReader $r1;

        r0 := @this: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl;

        $r1 = r0.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: javax.xml.stream.XMLStreamReader _xmlStream>;

        $r2 = interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: java.lang.String getLocalName()>();

        return $r2;
    }

    public boolean hasName()
    {
        org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl r0;
        javax.xml.stream.XMLStreamReader $r1;
        boolean $z0;

        r0 := @this: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl;

        $r1 = r0.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: javax.xml.stream.XMLStreamReader _xmlStream>;

        $z0 = interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: boolean hasName()>();

        return $z0;
    }

    public java.lang.String getNamespaceURI()
    {
        org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl r0;
        java.lang.String $r2;
        javax.xml.stream.XMLStreamReader $r1;

        r0 := @this: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl;

        $r1 = r0.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: javax.xml.stream.XMLStreamReader _xmlStream>;

        $r2 = interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: java.lang.String getNamespaceURI()>();

        return $r2;
    }

    public java.lang.String getPrefix()
    {
        org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl r0;
        java.lang.String $r2;
        javax.xml.stream.XMLStreamReader $r1;

        r0 := @this: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl;

        $r1 = r0.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: javax.xml.stream.XMLStreamReader _xmlStream>;

        $r2 = interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: java.lang.String getPrefix()>();

        return $r2;
    }

    public java.lang.String getVersion()
    {
        org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl r0;
        java.lang.String $r2;
        javax.xml.stream.XMLStreamReader $r1;

        r0 := @this: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl;

        $r1 = r0.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: javax.xml.stream.XMLStreamReader _xmlStream>;

        $r2 = interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: java.lang.String getVersion()>();

        return $r2;
    }

    public boolean isStandalone()
    {
        org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl r0;
        javax.xml.stream.XMLStreamReader $r1;
        boolean $z0;

        r0 := @this: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl;

        $r1 = r0.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: javax.xml.stream.XMLStreamReader _xmlStream>;

        $z0 = interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: boolean isStandalone()>();

        return $z0;
    }

    public boolean standaloneSet()
    {
        org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl r0;
        javax.xml.stream.XMLStreamReader $r1;
        boolean $z0;

        r0 := @this: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl;

        $r1 = r0.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: javax.xml.stream.XMLStreamReader _xmlStream>;

        $z0 = interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: boolean standaloneSet()>();

        return $z0;
    }

    public java.lang.String getCharacterEncodingScheme()
    {
        org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl r0;
        java.lang.String $r2;
        javax.xml.stream.XMLStreamReader $r1;

        r0 := @this: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl;

        $r1 = r0.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: javax.xml.stream.XMLStreamReader _xmlStream>;

        $r2 = interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: java.lang.String getCharacterEncodingScheme()>();

        return $r2;
    }

    public java.lang.String getPITarget()
    {
        org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl r0;
        java.lang.String $r2;
        javax.xml.stream.XMLStreamReader $r1;

        r0 := @this: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl;

        $r1 = r0.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: javax.xml.stream.XMLStreamReader _xmlStream>;

        $r2 = interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: java.lang.String getPITarget()>();

        return $r2;
    }

    public java.lang.String getPIData()
    {
        org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl r0;
        java.lang.String $r2;
        javax.xml.stream.XMLStreamReader $r1;

        r0 := @this: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl;

        $r1 = r0.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: javax.xml.stream.XMLStreamReader _xmlStream>;

        $r2 = interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: java.lang.String getPIData()>();

        return $r2;
    }

    static java.lang.String access$000(org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl)
    {
        org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl r0;
        java.lang.String $r1;

        r0 := @parameter0: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl;

        $r1 = r0.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: java.lang.String _defaultValue>;

        return $r1;
    }

    static java.lang.String access$002(org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl, java.lang.String)
    {
        org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl r0;
        java.lang.String r1;

        r0 := @parameter0: org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl;

        r1 := @parameter1: java.lang.String;

        r0.<org.apache.xmlbeans.impl.richParser.XMLStreamReaderExtImpl: java.lang.String _defaultValue> = r1;

        return r1;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Throwable $r4;
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.NoClassDefFoundError: java.lang.Throwable initCause(java.lang.Throwable)>($r2);

        throw $r4;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }
}
