public final class org.apache.lucene.analysis.miscellaneous.PatternAnalyzer extends org.apache.lucene.analysis.Analyzer
{
    public static final java.util.regex.Pattern NON_WORD_PATTERN;
    public static final java.util.regex.Pattern WHITESPACE_PATTERN;
    private static final org.apache.lucene.analysis.util.CharArraySet EXTENDED_ENGLISH_STOP_WORDS;
    public static final org.apache.lucene.analysis.miscellaneous.PatternAnalyzer DEFAULT_ANALYZER;
    public static final org.apache.lucene.analysis.miscellaneous.PatternAnalyzer EXTENDED_ANALYZER;
    private final java.util.regex.Pattern pattern;
    private final boolean toLowerCase;
    private final org.apache.lucene.analysis.util.CharArraySet stopWords;
    private final org.apache.lucene.util.Version matchVersion;

    public void <init>(org.apache.lucene.util.Version, java.util.regex.Pattern, boolean, org.apache.lucene.analysis.util.CharArraySet)
    {
        java.lang.IllegalArgumentException $r4;
        org.apache.lucene.util.Version r3;
        org.apache.lucene.analysis.miscellaneous.PatternAnalyzer r0;
        int $i0;
        org.apache.lucene.analysis.util.CharArraySet r6;
        java.util.regex.Pattern $r1, $r2, r5;
        boolean $z0, $z1, z2;

        r0 := @this: org.apache.lucene.analysis.miscellaneous.PatternAnalyzer;

        r3 := @parameter0: org.apache.lucene.util.Version;

        r5 := @parameter1: java.util.regex.Pattern;

        z2 := @parameter2: boolean;

        r6 := @parameter3: org.apache.lucene.analysis.util.CharArraySet;

        specialinvoke r0.<org.apache.lucene.analysis.Analyzer: void <init>()>();

        if r5 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("pattern must not be null");

        throw $r4;

     label1:
        $r1 = <org.apache.lucene.analysis.miscellaneous.PatternAnalyzer: java.util.regex.Pattern NON_WORD_PATTERN>;

        $z0 = staticinvoke <org.apache.lucene.analysis.miscellaneous.PatternAnalyzer: boolean eqPattern(java.util.regex.Pattern,java.util.regex.Pattern)>($r1, r5);

        if $z0 == 0 goto label2;

        r5 = <org.apache.lucene.analysis.miscellaneous.PatternAnalyzer: java.util.regex.Pattern NON_WORD_PATTERN>;

        goto label3;

     label2:
        $r2 = <org.apache.lucene.analysis.miscellaneous.PatternAnalyzer: java.util.regex.Pattern WHITESPACE_PATTERN>;

        $z1 = staticinvoke <org.apache.lucene.analysis.miscellaneous.PatternAnalyzer: boolean eqPattern(java.util.regex.Pattern,java.util.regex.Pattern)>($r2, r5);

        if $z1 == 0 goto label3;

        r5 = <org.apache.lucene.analysis.miscellaneous.PatternAnalyzer: java.util.regex.Pattern WHITESPACE_PATTERN>;

     label3:
        if r6 == null goto label4;

        $i0 = virtualinvoke r6.<org.apache.lucene.analysis.util.CharArraySet: int size()>();

        if $i0 != 0 goto label4;

        r6 = null;

     label4:
        r0.<org.apache.lucene.analysis.miscellaneous.PatternAnalyzer: java.util.regex.Pattern pattern> = r5;

        r0.<org.apache.lucene.analysis.miscellaneous.PatternAnalyzer: boolean toLowerCase> = z2;

        r0.<org.apache.lucene.analysis.miscellaneous.PatternAnalyzer: org.apache.lucene.analysis.util.CharArraySet stopWords> = r6;

        r0.<org.apache.lucene.analysis.miscellaneous.PatternAnalyzer: org.apache.lucene.util.Version matchVersion> = r3;

        return;
    }

    public org.apache.lucene.analysis.Analyzer$TokenStreamComponents createComponents(java.lang.String, java.io.Reader, java.lang.String)
    {
        org.apache.lucene.analysis.miscellaneous.PatternAnalyzer$FastStringTokenizer $r23, $r25;
        org.apache.lucene.analysis.miscellaneous.PatternAnalyzer$PatternTokenizer $r27;
        java.lang.String r18, r19;
        boolean $z0, $z1, $z2;
        org.apache.lucene.analysis.TokenStream $r21;
        java.io.Reader r20;
        org.apache.lucene.util.Version $r10;
        org.apache.lucene.analysis.core.StopFilter $r28;
        org.apache.lucene.analysis.miscellaneous.PatternAnalyzer r0;
        org.apache.lucene.analysis.miscellaneous.PatternAnalyzer$FastStringReader $r22;
        org.apache.lucene.analysis.Analyzer$TokenStreamComponents $r24, $r26, $r29;
        org.apache.lucene.analysis.util.CharArraySet $r7, $r9, $r13, $r16;
        java.util.regex.Pattern $r1, $r2, $r3, $r4, $r6;

        r0 := @this: org.apache.lucene.analysis.miscellaneous.PatternAnalyzer;

        r19 := @parameter0: java.lang.String;

        r20 := @parameter1: java.io.Reader;

        r18 := @parameter2: java.lang.String;

        if r20 != null goto label1;

        $r22 = new org.apache.lucene.analysis.miscellaneous.PatternAnalyzer$FastStringReader;

        specialinvoke $r22.<org.apache.lucene.analysis.miscellaneous.PatternAnalyzer$FastStringReader: void <init>(java.lang.String)>(r18);

        r20 = $r22;

     label1:
        $r2 = r0.<org.apache.lucene.analysis.miscellaneous.PatternAnalyzer: java.util.regex.Pattern pattern>;

        $r1 = <org.apache.lucene.analysis.miscellaneous.PatternAnalyzer: java.util.regex.Pattern NON_WORD_PATTERN>;

        if $r2 != $r1 goto label2;

        $r24 = new org.apache.lucene.analysis.Analyzer$TokenStreamComponents;

        $r23 = new org.apache.lucene.analysis.miscellaneous.PatternAnalyzer$FastStringTokenizer;

        $z2 = r0.<org.apache.lucene.analysis.miscellaneous.PatternAnalyzer: boolean toLowerCase>;

        $r16 = r0.<org.apache.lucene.analysis.miscellaneous.PatternAnalyzer: org.apache.lucene.analysis.util.CharArraySet stopWords>;

        specialinvoke $r23.<org.apache.lucene.analysis.miscellaneous.PatternAnalyzer$FastStringTokenizer: void <init>(java.io.Reader,boolean,boolean,org.apache.lucene.analysis.util.CharArraySet)>(r20, 1, $z2, $r16);

        specialinvoke $r24.<org.apache.lucene.analysis.Analyzer$TokenStreamComponents: void <init>(org.apache.lucene.analysis.Tokenizer)>($r23);

        return $r24;

     label2:
        $r4 = r0.<org.apache.lucene.analysis.miscellaneous.PatternAnalyzer: java.util.regex.Pattern pattern>;

        $r3 = <org.apache.lucene.analysis.miscellaneous.PatternAnalyzer: java.util.regex.Pattern WHITESPACE_PATTERN>;

        if $r4 != $r3 goto label3;

        $r26 = new org.apache.lucene.analysis.Analyzer$TokenStreamComponents;

        $r25 = new org.apache.lucene.analysis.miscellaneous.PatternAnalyzer$FastStringTokenizer;

        $z1 = r0.<org.apache.lucene.analysis.miscellaneous.PatternAnalyzer: boolean toLowerCase>;

        $r13 = r0.<org.apache.lucene.analysis.miscellaneous.PatternAnalyzer: org.apache.lucene.analysis.util.CharArraySet stopWords>;

        specialinvoke $r25.<org.apache.lucene.analysis.miscellaneous.PatternAnalyzer$FastStringTokenizer: void <init>(java.io.Reader,boolean,boolean,org.apache.lucene.analysis.util.CharArraySet)>(r20, 0, $z1, $r13);

        specialinvoke $r26.<org.apache.lucene.analysis.Analyzer$TokenStreamComponents: void <init>(org.apache.lucene.analysis.Tokenizer)>($r25);

        return $r26;

     label3:
        $r27 = new org.apache.lucene.analysis.miscellaneous.PatternAnalyzer$PatternTokenizer;

        $r6 = r0.<org.apache.lucene.analysis.miscellaneous.PatternAnalyzer: java.util.regex.Pattern pattern>;

        $z0 = r0.<org.apache.lucene.analysis.miscellaneous.PatternAnalyzer: boolean toLowerCase>;

        specialinvoke $r27.<org.apache.lucene.analysis.miscellaneous.PatternAnalyzer$PatternTokenizer: void <init>(java.io.Reader,java.util.regex.Pattern,boolean)>(r20, $r6, $z0);

        $r7 = r0.<org.apache.lucene.analysis.miscellaneous.PatternAnalyzer: org.apache.lucene.analysis.util.CharArraySet stopWords>;

        if $r7 == null goto label4;

        $r28 = new org.apache.lucene.analysis.core.StopFilter;

        $r21 = $r28;

        $r10 = r0.<org.apache.lucene.analysis.miscellaneous.PatternAnalyzer: org.apache.lucene.util.Version matchVersion>;

        $r9 = r0.<org.apache.lucene.analysis.miscellaneous.PatternAnalyzer: org.apache.lucene.analysis.util.CharArraySet stopWords>;

        specialinvoke $r28.<org.apache.lucene.analysis.core.StopFilter: void <init>(org.apache.lucene.util.Version,org.apache.lucene.analysis.TokenStream,org.apache.lucene.analysis.util.CharArraySet)>($r10, $r27, $r9);

        goto label5;

     label4:
        $r21 = $r27;

     label5:
        $r29 = new org.apache.lucene.analysis.Analyzer$TokenStreamComponents;

        specialinvoke $r29.<org.apache.lucene.analysis.Analyzer$TokenStreamComponents: void <init>(org.apache.lucene.analysis.Tokenizer,org.apache.lucene.analysis.TokenStream)>($r27, $r21);

        return $r29;
    }

    public org.apache.lucene.analysis.Analyzer$TokenStreamComponents createComponents(java.lang.String, java.io.Reader)
    {
        org.apache.lucene.analysis.miscellaneous.PatternAnalyzer r0;
        org.apache.lucene.analysis.Analyzer$TokenStreamComponents $r3;
        java.lang.String r1;
        java.io.Reader r2;

        r0 := @this: org.apache.lucene.analysis.miscellaneous.PatternAnalyzer;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.io.Reader;

        $r3 = virtualinvoke r0.<org.apache.lucene.analysis.miscellaneous.PatternAnalyzer: org.apache.lucene.analysis.Analyzer$TokenStreamComponents createComponents(java.lang.String,java.io.Reader,java.lang.String)>(r1, r2, null);

        return $r3;
    }

    public boolean equals(java.lang.Object)
    {
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        org.apache.lucene.analysis.miscellaneous.PatternAnalyzer r0, $r2, $r3, r4, $r9, $r10;
        org.apache.lucene.analysis.util.CharArraySet $r7, $r8;
        java.lang.Object r1;
        java.util.regex.Pattern $r5, $r6;

        r0 := @this: org.apache.lucene.analysis.miscellaneous.PatternAnalyzer;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $r2 = <org.apache.lucene.analysis.miscellaneous.PatternAnalyzer: org.apache.lucene.analysis.miscellaneous.PatternAnalyzer DEFAULT_ANALYZER>;

        if r0 != $r2 goto label2;

        $r10 = <org.apache.lucene.analysis.miscellaneous.PatternAnalyzer: org.apache.lucene.analysis.miscellaneous.PatternAnalyzer EXTENDED_ANALYZER>;

        if r1 != $r10 goto label2;

        return 0;

     label2:
        $r3 = <org.apache.lucene.analysis.miscellaneous.PatternAnalyzer: org.apache.lucene.analysis.miscellaneous.PatternAnalyzer DEFAULT_ANALYZER>;

        if r1 != $r3 goto label3;

        $r9 = <org.apache.lucene.analysis.miscellaneous.PatternAnalyzer: org.apache.lucene.analysis.miscellaneous.PatternAnalyzer EXTENDED_ANALYZER>;

        if r0 != $r9 goto label3;

        return 0;

     label3:
        $z0 = r1 instanceof org.apache.lucene.analysis.miscellaneous.PatternAnalyzer;

        if $z0 == 0 goto label6;

        r4 = (org.apache.lucene.analysis.miscellaneous.PatternAnalyzer) r1;

        $z2 = r0.<org.apache.lucene.analysis.miscellaneous.PatternAnalyzer: boolean toLowerCase>;

        $z1 = r4.<org.apache.lucene.analysis.miscellaneous.PatternAnalyzer: boolean toLowerCase>;

        if $z2 != $z1 goto label4;

        $r6 = r0.<org.apache.lucene.analysis.miscellaneous.PatternAnalyzer: java.util.regex.Pattern pattern>;

        $r5 = r4.<org.apache.lucene.analysis.miscellaneous.PatternAnalyzer: java.util.regex.Pattern pattern>;

        $z3 = staticinvoke <org.apache.lucene.analysis.miscellaneous.PatternAnalyzer: boolean eqPattern(java.util.regex.Pattern,java.util.regex.Pattern)>($r6, $r5);

        if $z3 == 0 goto label4;

        $r8 = r0.<org.apache.lucene.analysis.miscellaneous.PatternAnalyzer: org.apache.lucene.analysis.util.CharArraySet stopWords>;

        $r7 = r4.<org.apache.lucene.analysis.miscellaneous.PatternAnalyzer: org.apache.lucene.analysis.util.CharArraySet stopWords>;

        $z4 = staticinvoke <org.apache.lucene.analysis.miscellaneous.PatternAnalyzer: boolean eq(java.lang.Object,java.lang.Object)>($r8, $r7);

        if $z4 == 0 goto label4;

        $z5 = 1;

        goto label5;

     label4:
        $z5 = 0;

     label5:
        return $z5;

     label6:
        return 0;
    }

    public int hashCode()
    {
        short $s9;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, i8, $i10;
        java.lang.String $r4;
        boolean $z0;
        org.apache.lucene.analysis.miscellaneous.PatternAnalyzer r0, $r1, $r2;
        org.apache.lucene.analysis.util.CharArraySet $r6, $r7;
        java.util.regex.Pattern $r3, $r5;

        r0 := @this: org.apache.lucene.analysis.miscellaneous.PatternAnalyzer;

        $r1 = <org.apache.lucene.analysis.miscellaneous.PatternAnalyzer: org.apache.lucene.analysis.miscellaneous.PatternAnalyzer DEFAULT_ANALYZER>;

        if r0 != $r1 goto label1;

        return -1218418418;

     label1:
        $r2 = <org.apache.lucene.analysis.miscellaneous.PatternAnalyzer: org.apache.lucene.analysis.miscellaneous.PatternAnalyzer EXTENDED_ANALYZER>;

        if r0 != $r2 goto label2;

        return 1303507063;

     label2:
        $r3 = r0.<org.apache.lucene.analysis.miscellaneous.PatternAnalyzer: java.util.regex.Pattern pattern>;

        $r4 = virtualinvoke $r3.<java.util.regex.Pattern: java.lang.String pattern()>();

        $i0 = virtualinvoke $r4.<java.lang.String: int hashCode()>();

        i7 = 31 + $i0;

        $i1 = 31 * i7;

        $r5 = r0.<org.apache.lucene.analysis.miscellaneous.PatternAnalyzer: java.util.regex.Pattern pattern>;

        $i2 = virtualinvoke $r5.<java.util.regex.Pattern: int flags()>();

        i8 = $i1 + $i2;

        $i3 = 31 * i8;

        $z0 = r0.<org.apache.lucene.analysis.miscellaneous.PatternAnalyzer: boolean toLowerCase>;

        if $z0 == 0 goto label3;

        $s9 = 1231;

        goto label4;

     label3:
        $s9 = 1237;

     label4:
        $i6 = $i3 + $s9;

        $i4 = 31 * $i6;

        $r6 = r0.<org.apache.lucene.analysis.miscellaneous.PatternAnalyzer: org.apache.lucene.analysis.util.CharArraySet stopWords>;

        if $r6 == null goto label5;

        $r7 = r0.<org.apache.lucene.analysis.miscellaneous.PatternAnalyzer: org.apache.lucene.analysis.util.CharArraySet stopWords>;

        $i10 = virtualinvoke $r7.<org.apache.lucene.analysis.util.CharArraySet: int hashCode()>();

        goto label6;

     label5:
        $i10 = 0;

     label6:
        $i5 = $i4 + $i10;

        return $i5;
    }

    private static boolean eq(java.lang.Object, java.lang.Object)
    {
        java.lang.Object r0, r1;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        if r0 == r1 goto label1;

        if r0 == null goto label2;

        $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    private static boolean eqPattern(java.util.regex.Pattern, java.util.regex.Pattern)
    {
        int $i0, $i1;
        java.util.regex.Pattern r0, r1;
        java.lang.String $r2, $r3;
        boolean $z0, $z1;

        r0 := @parameter0: java.util.regex.Pattern;

        r1 := @parameter1: java.util.regex.Pattern;

        if r0 == r1 goto label1;

        $i0 = virtualinvoke r0.<java.util.regex.Pattern: int flags()>();

        $i1 = virtualinvoke r1.<java.util.regex.Pattern: int flags()>();

        if $i0 != $i1 goto label2;

        $r2 = virtualinvoke r0.<java.util.regex.Pattern: java.lang.String pattern()>();

        $r3 = virtualinvoke r1.<java.util.regex.Pattern: java.lang.String pattern()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    private static java.lang.String toString(java.io.Reader) throws java.io.IOException
    {
        java.lang.Throwable $r4;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7;
        java.lang.String $r1, $r3;
        boolean $z0;
        java.io.Reader r0;
        org.apache.lucene.analysis.miscellaneous.PatternAnalyzer$FastStringReader $r2;
        char[] r5, r6, r7;

        r0 := @parameter0: java.io.Reader;

        $z0 = r0 instanceof org.apache.lucene.analysis.miscellaneous.PatternAnalyzer$FastStringReader;

        if $z0 == 0 goto label1;

        $r2 = (org.apache.lucene.analysis.miscellaneous.PatternAnalyzer$FastStringReader) r0;

        $r3 = virtualinvoke $r2.<org.apache.lucene.analysis.miscellaneous.PatternAnalyzer$FastStringReader: java.lang.String getString()>();

        return $r3;

     label1:
        r5 = newarray (char)[256];

        r6 = newarray (char)[256];

        i7 = 0;

     label2:
        $i0 = virtualinvoke r0.<java.io.Reader: int read(char[])>(r5);

        if $i0 < 0 goto label5;

        $i2 = i7 + $i0;

        $i1 = lengthof r6;

        if $i2 <= $i1 goto label3;

        $i3 = lengthof r6;

        $i5 = $i3 << 1;

        $i4 = i7 + $i0;

        $i6 = staticinvoke <java.lang.Math: int max(int,int)>($i5, $i4);

        r7 = newarray (char)[$i6];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r6, 0, r7, 0, i7);

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r5, 0, r7, i7, $i0);

        r5 = r6;

        r6 = r7;

        goto label4;

     label3:
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r5, 0, r6, i7, $i0);

     label4:
        i7 = i7 + $i0;

        goto label2;

     label5:
        $r1 = new java.lang.String;

        specialinvoke $r1.<java.lang.String: void <init>(char[],int,int)>(r6, 0, i7);

     label6:
        virtualinvoke r0.<java.io.Reader: void close()>();

        return $r1;

     label7:
        $r4 := @caughtexception;

     label8:
        virtualinvoke r0.<java.io.Reader: void close()>();

        throw $r4;

        catch java.lang.Throwable from label1 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    static java.lang.String access$000(java.io.Reader) throws java.io.IOException
    {
        java.io.Reader r0;
        java.lang.String $r1;

        r0 := @parameter0: java.io.Reader;

        $r1 = staticinvoke <org.apache.lucene.analysis.miscellaneous.PatternAnalyzer: java.lang.String toString(java.io.Reader)>(r0);

        return $r1;
    }

    static void <clinit>()
    {
        java.lang.String[] $r3;
        org.apache.lucene.util.Version $r4, $r10, $r14;
        java.util.List $r5;
        org.apache.lucene.analysis.miscellaneous.PatternAnalyzer $r7, $r11;
        org.apache.lucene.analysis.util.CharArraySet $r2, $r6, $r8, $r12;
        java.util.regex.Pattern $r0, $r1, $r9, $r13;

        $r0 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("\\W+");

        <org.apache.lucene.analysis.miscellaneous.PatternAnalyzer: java.util.regex.Pattern NON_WORD_PATTERN> = $r0;

        $r1 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("\\s+");

        <org.apache.lucene.analysis.miscellaneous.PatternAnalyzer: java.util.regex.Pattern WHITESPACE_PATTERN> = $r1;

        $r2 = new org.apache.lucene.analysis.util.CharArraySet;

        $r4 = <org.apache.lucene.util.Version: org.apache.lucene.util.Version LUCENE_CURRENT>;

        $r3 = newarray (java.lang.String)[274];

        $r3[0] = "a";

        $r3[1] = "about";

        $r3[2] = "above";

        $r3[3] = "across";

        $r3[4] = "adj";

        $r3[5] = "after";

        $r3[6] = "afterwards";

        $r3[7] = "again";

        $r3[8] = "against";

        $r3[9] = "albeit";

        $r3[10] = "all";

        $r3[11] = "almost";

        $r3[12] = "alone";

        $r3[13] = "along";

        $r3[14] = "already";

        $r3[15] = "also";

        $r3[16] = "although";

        $r3[17] = "always";

        $r3[18] = "among";

        $r3[19] = "amongst";

        $r3[20] = "an";

        $r3[21] = "and";

        $r3[22] = "another";

        $r3[23] = "any";

        $r3[24] = "anyhow";

        $r3[25] = "anyone";

        $r3[26] = "anything";

        $r3[27] = "anywhere";

        $r3[28] = "are";

        $r3[29] = "around";

        $r3[30] = "as";

        $r3[31] = "at";

        $r3[32] = "be";

        $r3[33] = "became";

        $r3[34] = "because";

        $r3[35] = "become";

        $r3[36] = "becomes";

        $r3[37] = "becoming";

        $r3[38] = "been";

        $r3[39] = "before";

        $r3[40] = "beforehand";

        $r3[41] = "behind";

        $r3[42] = "being";

        $r3[43] = "below";

        $r3[44] = "beside";

        $r3[45] = "besides";

        $r3[46] = "between";

        $r3[47] = "beyond";

        $r3[48] = "both";

        $r3[49] = "but";

        $r3[50] = "by";

        $r3[51] = "can";

        $r3[52] = "cannot";

        $r3[53] = "co";

        $r3[54] = "could";

        $r3[55] = "down";

        $r3[56] = "during";

        $r3[57] = "each";

        $r3[58] = "eg";

        $r3[59] = "either";

        $r3[60] = "else";

        $r3[61] = "elsewhere";

        $r3[62] = "enough";

        $r3[63] = "etc";

        $r3[64] = "even";

        $r3[65] = "ever";

        $r3[66] = "every";

        $r3[67] = "everyone";

        $r3[68] = "everything";

        $r3[69] = "everywhere";

        $r3[70] = "except";

        $r3[71] = "few";

        $r3[72] = "first";

        $r3[73] = "for";

        $r3[74] = "former";

        $r3[75] = "formerly";

        $r3[76] = "from";

        $r3[77] = "further";

        $r3[78] = "had";

        $r3[79] = "has";

        $r3[80] = "have";

        $r3[81] = "he";

        $r3[82] = "hence";

        $r3[83] = "her";

        $r3[84] = "here";

        $r3[85] = "hereafter";

        $r3[86] = "hereby";

        $r3[87] = "herein";

        $r3[88] = "hereupon";

        $r3[89] = "hers";

        $r3[90] = "herself";

        $r3[91] = "him";

        $r3[92] = "himself";

        $r3[93] = "his";

        $r3[94] = "how";

        $r3[95] = "however";

        $r3[96] = "i";

        $r3[97] = "ie";

        $r3[98] = "if";

        $r3[99] = "in";

        $r3[100] = "inc";

        $r3[101] = "indeed";

        $r3[102] = "into";

        $r3[103] = "is";

        $r3[104] = "it";

        $r3[105] = "its";

        $r3[106] = "itself";

        $r3[107] = "last";

        $r3[108] = "latter";

        $r3[109] = "latterly";

        $r3[110] = "least";

        $r3[111] = "less";

        $r3[112] = "ltd";

        $r3[113] = "many";

        $r3[114] = "may";

        $r3[115] = "me";

        $r3[116] = "meanwhile";

        $r3[117] = "might";

        $r3[118] = "more";

        $r3[119] = "moreover";

        $r3[120] = "most";

        $r3[121] = "mostly";

        $r3[122] = "much";

        $r3[123] = "must";

        $r3[124] = "my";

        $r3[125] = "myself";

        $r3[126] = "namely";

        $r3[127] = "neither";

        $r3[128] = "never";

        $r3[129] = "nevertheless";

        $r3[130] = "next";

        $r3[131] = "no";

        $r3[132] = "nobody";

        $r3[133] = "none";

        $r3[134] = "noone";

        $r3[135] = "nor";

        $r3[136] = "not";

        $r3[137] = "nothing";

        $r3[138] = "now";

        $r3[139] = "nowhere";

        $r3[140] = "of";

        $r3[141] = "off";

        $r3[142] = "often";

        $r3[143] = "on";

        $r3[144] = "once one";

        $r3[145] = "only";

        $r3[146] = "onto";

        $r3[147] = "or";

        $r3[148] = "other";

        $r3[149] = "others";

        $r3[150] = "otherwise";

        $r3[151] = "our";

        $r3[152] = "ours";

        $r3[153] = "ourselves";

        $r3[154] = "out";

        $r3[155] = "over";

        $r3[156] = "own";

        $r3[157] = "per";

        $r3[158] = "perhaps";

        $r3[159] = "rather";

        $r3[160] = "s";

        $r3[161] = "same";

        $r3[162] = "seem";

        $r3[163] = "seemed";

        $r3[164] = "seeming";

        $r3[165] = "seems";

        $r3[166] = "several";

        $r3[167] = "she";

        $r3[168] = "should";

        $r3[169] = "since";

        $r3[170] = "so";

        $r3[171] = "some";

        $r3[172] = "somehow";

        $r3[173] = "someone";

        $r3[174] = "something";

        $r3[175] = "sometime";

        $r3[176] = "sometimes";

        $r3[177] = "somewhere";

        $r3[178] = "still";

        $r3[179] = "such";

        $r3[180] = "t";

        $r3[181] = "than";

        $r3[182] = "that";

        $r3[183] = "the";

        $r3[184] = "their";

        $r3[185] = "them";

        $r3[186] = "themselves";

        $r3[187] = "then";

        $r3[188] = "thence";

        $r3[189] = "there";

        $r3[190] = "thereafter";

        $r3[191] = "thereby";

        $r3[192] = "therefor";

        $r3[193] = "therein";

        $r3[194] = "thereupon";

        $r3[195] = "these";

        $r3[196] = "they";

        $r3[197] = "this";

        $r3[198] = "those";

        $r3[199] = "though";

        $r3[200] = "through";

        $r3[201] = "throughout";

        $r3[202] = "thru";

        $r3[203] = "thus";

        $r3[204] = "to";

        $r3[205] = "together";

        $r3[206] = "too";

        $r3[207] = "toward";

        $r3[208] = "towards";

        $r3[209] = "under";

        $r3[210] = "until";

        $r3[211] = "up";

        $r3[212] = "upon";

        $r3[213] = "us";

        $r3[214] = "very";

        $r3[215] = "via";

        $r3[216] = "was";

        $r3[217] = "we";

        $r3[218] = "well";

        $r3[219] = "were";

        $r3[220] = "what";

        $r3[221] = "whatever";

        $r3[222] = "whatsoever";

        $r3[223] = "when";

        $r3[224] = "whence";

        $r3[225] = "whenever";

        $r3[226] = "whensoever";

        $r3[227] = "where";

        $r3[228] = "whereafter";

        $r3[229] = "whereas";

        $r3[230] = "whereat";

        $r3[231] = "whereby";

        $r3[232] = "wherefrom";

        $r3[233] = "wherein";

        $r3[234] = "whereinto";

        $r3[235] = "whereof";

        $r3[236] = "whereon";

        $r3[237] = "whereto";

        $r3[238] = "whereunto";

        $r3[239] = "whereupon";

        $r3[240] = "wherever";

        $r3[241] = "wherewith";

        $r3[242] = "whether";

        $r3[243] = "which";

        $r3[244] = "whichever";

        $r3[245] = "whichsoever";

        $r3[246] = "while";

        $r3[247] = "whilst";

        $r3[248] = "whither";

        $r3[249] = "who";

        $r3[250] = "whoever";

        $r3[251] = "whole";

        $r3[252] = "whom";

        $r3[253] = "whomever";

        $r3[254] = "whomsoever";

        $r3[255] = "whose";

        $r3[256] = "whosoever";

        $r3[257] = "why";

        $r3[258] = "will";

        $r3[259] = "with";

        $r3[260] = "within";

        $r3[261] = "without";

        $r3[262] = "would";

        $r3[263] = "xsubj";

        $r3[264] = "xcal";

        $r3[265] = "xauthor";

        $r3[266] = "xother ";

        $r3[267] = "xnote";

        $r3[268] = "yet";

        $r3[269] = "you";

        $r3[270] = "your";

        $r3[271] = "yours";

        $r3[272] = "yourself";

        $r3[273] = "yourselves";

        $r5 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r3);

        specialinvoke $r2.<org.apache.lucene.analysis.util.CharArraySet: void <init>(org.apache.lucene.util.Version,java.util.Collection,boolean)>($r4, $r5, 1);

        $r6 = staticinvoke <org.apache.lucene.analysis.util.CharArraySet: org.apache.lucene.analysis.util.CharArraySet unmodifiableSet(org.apache.lucene.analysis.util.CharArraySet)>($r2);

        <org.apache.lucene.analysis.miscellaneous.PatternAnalyzer: org.apache.lucene.analysis.util.CharArraySet EXTENDED_ENGLISH_STOP_WORDS> = $r6;

        $r7 = new org.apache.lucene.analysis.miscellaneous.PatternAnalyzer;

        $r10 = <org.apache.lucene.util.Version: org.apache.lucene.util.Version LUCENE_CURRENT>;

        $r9 = <org.apache.lucene.analysis.miscellaneous.PatternAnalyzer: java.util.regex.Pattern NON_WORD_PATTERN>;

        $r8 = <org.apache.lucene.analysis.core.StopAnalyzer: org.apache.lucene.analysis.util.CharArraySet ENGLISH_STOP_WORDS_SET>;

        specialinvoke $r7.<org.apache.lucene.analysis.miscellaneous.PatternAnalyzer: void <init>(org.apache.lucene.util.Version,java.util.regex.Pattern,boolean,org.apache.lucene.analysis.util.CharArraySet)>($r10, $r9, 1, $r8);

        <org.apache.lucene.analysis.miscellaneous.PatternAnalyzer: org.apache.lucene.analysis.miscellaneous.PatternAnalyzer DEFAULT_ANALYZER> = $r7;

        $r11 = new org.apache.lucene.analysis.miscellaneous.PatternAnalyzer;

        $r14 = <org.apache.lucene.util.Version: org.apache.lucene.util.Version LUCENE_CURRENT>;

        $r13 = <org.apache.lucene.analysis.miscellaneous.PatternAnalyzer: java.util.regex.Pattern NON_WORD_PATTERN>;

        $r12 = <org.apache.lucene.analysis.miscellaneous.PatternAnalyzer: org.apache.lucene.analysis.util.CharArraySet EXTENDED_ENGLISH_STOP_WORDS>;

        specialinvoke $r11.<org.apache.lucene.analysis.miscellaneous.PatternAnalyzer: void <init>(org.apache.lucene.util.Version,java.util.regex.Pattern,boolean,org.apache.lucene.analysis.util.CharArraySet)>($r14, $r13, 1, $r12);

        <org.apache.lucene.analysis.miscellaneous.PatternAnalyzer: org.apache.lucene.analysis.miscellaneous.PatternAnalyzer EXTENDED_ANALYZER> = $r11;

        return;
    }
}
