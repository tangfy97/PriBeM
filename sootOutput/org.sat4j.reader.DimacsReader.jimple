public class org.sat4j.reader.DimacsReader extends org.sat4j.reader.Reader implements java.io.Serializable
{
    private static final long serialVersionUID;
    protected int expectedNbOfConstr;
    protected final org.sat4j.specs.ISolver solver;
    private boolean checkConstrNb;
    protected final java.lang.String formatString;
    protected org.sat4j.reader.EfficientScanner scanner;
    protected org.sat4j.specs.IVecInt literals;
    static final boolean $assertionsDisabled;

    public void <init>(org.sat4j.specs.ISolver)
    {
        org.sat4j.reader.DimacsReader r0;
        org.sat4j.specs.ISolver r1;

        r0 := @this: org.sat4j.reader.DimacsReader;

        r1 := @parameter0: org.sat4j.specs.ISolver;

        specialinvoke r0.<org.sat4j.reader.DimacsReader: void <init>(org.sat4j.specs.ISolver,java.lang.String)>(r1, "cnf");

        return;
    }

    public void <init>(org.sat4j.specs.ISolver, java.lang.String)
    {
        org.sat4j.reader.DimacsReader r0;
        org.sat4j.specs.ISolver r2;
        org.sat4j.core.VecInt $r1;
        java.lang.String r3;

        r0 := @this: org.sat4j.reader.DimacsReader;

        r2 := @parameter0: org.sat4j.specs.ISolver;

        r3 := @parameter1: java.lang.String;

        specialinvoke r0.<org.sat4j.reader.Reader: void <init>()>();

        r0.<org.sat4j.reader.DimacsReader: boolean checkConstrNb> = 1;

        $r1 = new org.sat4j.core.VecInt;

        specialinvoke $r1.<org.sat4j.core.VecInt: void <init>()>();

        r0.<org.sat4j.reader.DimacsReader: org.sat4j.specs.IVecInt literals> = $r1;

        r0.<org.sat4j.reader.DimacsReader: org.sat4j.specs.ISolver solver> = r2;

        r0.<org.sat4j.reader.DimacsReader: java.lang.String formatString> = r3;

        return;
    }

    public void disableNumberOfConstraintCheck()
    {
        org.sat4j.reader.DimacsReader r0;

        r0 := @this: org.sat4j.reader.DimacsReader;

        r0.<org.sat4j.reader.DimacsReader: boolean checkConstrNb> = 0;

        return;
    }

    protected void skipComments() throws java.io.IOException
    {
        org.sat4j.reader.DimacsReader r0;
        org.sat4j.reader.EfficientScanner $r1;

        r0 := @this: org.sat4j.reader.DimacsReader;

        $r1 = r0.<org.sat4j.reader.DimacsReader: org.sat4j.reader.EfficientScanner scanner>;

        virtualinvoke $r1.<org.sat4j.reader.EfficientScanner: void skipComments()>();

        return;
    }

    protected void readProblemLine() throws java.io.IOException, org.sat4j.reader.ParseFormatException
    {
        org.sat4j.reader.DimacsReader r0;
        org.sat4j.specs.ISolver $r10, $r12;
        java.lang.String[] $r4;
        java.lang.AssertionError $r13, $r14;
        int $i0, $i1, $i2, $i3, $i4;
        java.lang.String $r2, $r3, $r5, $r6, $r7, $r8, $r9, $r11;
        boolean $z0, $z1, $z2, $z3;
        org.sat4j.reader.ParseFormatException $r15, $r16;
        org.sat4j.reader.EfficientScanner $r1;

        r0 := @this: org.sat4j.reader.DimacsReader;

        $r1 = r0.<org.sat4j.reader.DimacsReader: org.sat4j.reader.EfficientScanner scanner>;

        $r2 = virtualinvoke $r1.<org.sat4j.reader.EfficientScanner: java.lang.String nextLine()>();

        $r3 = virtualinvoke $r2.<java.lang.String: java.lang.String trim()>();

        if $r3 != null goto label1;

        $r15 = new org.sat4j.reader.ParseFormatException;

        specialinvoke $r15.<org.sat4j.reader.ParseFormatException: void <init>(java.lang.String)>("premature end of file: <p cnf ...> expected");

        throw $r15;

     label1:
        $r4 = virtualinvoke $r3.<java.lang.String: java.lang.String[] split(java.lang.String)>("\\s+");

        $i0 = lengthof $r4;

        if $i0 < 4 goto label2;

        $r6 = "p";

        $r5 = $r4[0];

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z0 == 0 goto label2;

        $r8 = r0.<org.sat4j.reader.DimacsReader: java.lang.String formatString>;

        $r7 = $r4[1];

        $z1 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>($r7);

        if $z1 != 0 goto label3;

     label2:
        $r16 = new org.sat4j.reader.ParseFormatException;

        specialinvoke $r16.<org.sat4j.reader.ParseFormatException: void <init>(java.lang.String)>("problem line expected (p cnf ...)");

        throw $r16;

     label3:
        $r9 = $r4[2];

        $i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r9);

        $z2 = <org.sat4j.reader.DimacsReader: boolean $assertionsDisabled>;

        if $z2 != 0 goto label4;

        if $i1 > 0 goto label4;

        $r14 = new java.lang.AssertionError;

        specialinvoke $r14.<java.lang.AssertionError: void <init>()>();

        throw $r14;

     label4:
        $r10 = r0.<org.sat4j.reader.DimacsReader: org.sat4j.specs.ISolver solver>;

        interfaceinvoke $r10.<org.sat4j.specs.ISolver: int newVar(int)>($i1);

        $r11 = $r4[3];

        $i2 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r11);

        r0.<org.sat4j.reader.DimacsReader: int expectedNbOfConstr> = $i2;

        $z3 = <org.sat4j.reader.DimacsReader: boolean $assertionsDisabled>;

        if $z3 != 0 goto label5;

        $i4 = r0.<org.sat4j.reader.DimacsReader: int expectedNbOfConstr>;

        if $i4 > 0 goto label5;

        $r13 = new java.lang.AssertionError;

        specialinvoke $r13.<java.lang.AssertionError: void <init>()>();

        throw $r13;

     label5:
        $r12 = r0.<org.sat4j.reader.DimacsReader: org.sat4j.specs.ISolver solver>;

        $i3 = r0.<org.sat4j.reader.DimacsReader: int expectedNbOfConstr>;

        interfaceinvoke $r12.<org.sat4j.specs.ISolver: void setExpectedNumberOfClauses(int)>($i3);

        return;
    }

    protected void readConstrs() throws java.io.IOException, org.sat4j.reader.ParseFormatException, org.sat4j.specs.ContradictionException
    {
        org.sat4j.reader.DimacsReader r0;
        org.sat4j.specs.ISolver $r13;
        int $i0, $i1, $i4, $i5, i6, $i7, $i8;
        java.lang.String $r9;
        boolean $z0, $z1, z2, z3, $z4;
        java.io.PrintStream $r14;
        org.sat4j.specs.IVecInt $r1, $r16;
        char $c2, $c3;
        org.sat4j.reader.ParseFormatException $r18;
        java.lang.StringBuilder $r4, $r5, $r6, $r7, $r8, $r17;
        org.sat4j.reader.EfficientScanner $r10, $r11, $r12, $r15;

        r0 := @this: org.sat4j.reader.DimacsReader;

        i6 = 0;

        $r1 = r0.<org.sat4j.reader.DimacsReader: org.sat4j.specs.IVecInt literals>;

        interfaceinvoke $r1.<org.sat4j.specs.IVecInt: void clear()>();

        z2 = 1;

     label1:
        if z2 == 0 goto label8;

        z3 = 0;

        $r10 = r0.<org.sat4j.reader.DimacsReader: org.sat4j.reader.EfficientScanner scanner>;

        $z0 = virtualinvoke $r10.<org.sat4j.reader.EfficientScanner: boolean eof()>();

        if $z0 == 0 goto label3;

        $r16 = r0.<org.sat4j.reader.DimacsReader: org.sat4j.specs.IVecInt literals>;

        $i5 = interfaceinvoke $r16.<org.sat4j.specs.IVecInt: int size()>();

        if $i5 <= 0 goto label2;

        virtualinvoke r0.<org.sat4j.reader.DimacsReader: void flushConstraint()>();

        z3 = 1;

     label2:
        z2 = 0;

        goto label6;

     label3:
        $r11 = r0.<org.sat4j.reader.DimacsReader: org.sat4j.reader.EfficientScanner scanner>;

        $c2 = virtualinvoke $r11.<org.sat4j.reader.EfficientScanner: char currentChar()>();

        $i7 = (int) $c2;

        if $i7 != 99 goto label4;

        $r15 = r0.<org.sat4j.reader.DimacsReader: org.sat4j.reader.EfficientScanner scanner>;

        virtualinvoke $r15.<org.sat4j.reader.EfficientScanner: void skipRestOfLine()>();

        goto label1;

     label4:
        $r12 = r0.<org.sat4j.reader.DimacsReader: org.sat4j.reader.EfficientScanner scanner>;

        $c3 = virtualinvoke $r12.<org.sat4j.reader.EfficientScanner: char currentChar()>();

        $i8 = (int) $c3;

        if $i8 != 37 goto label5;

        $i4 = r0.<org.sat4j.reader.DimacsReader: int expectedNbOfConstr>;

        if $i4 != i6 goto label5;

        $r13 = r0.<org.sat4j.reader.DimacsReader: org.sat4j.specs.ISolver solver>;

        $z1 = interfaceinvoke $r13.<org.sat4j.specs.ISolver: boolean isVerbose()>();

        if $z1 == 0 goto label8;

        $r14 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r14.<java.io.PrintStream: void println(java.lang.String)>("Ignoring the rest of the file (SATLIB format");

        goto label8;

     label5:
        z3 = virtualinvoke r0.<org.sat4j.reader.DimacsReader: boolean handleLine()>();

     label6:
        if z3 == 0 goto label7;

        i6 = i6 + 1;

     label7:
        goto label1;

     label8:
        $z4 = r0.<org.sat4j.reader.DimacsReader: boolean checkConstrNb>;

        if $z4 == 0 goto label9;

        $i0 = r0.<org.sat4j.reader.DimacsReader: int expectedNbOfConstr>;

        if $i0 == i6 goto label9;

        $r18 = new org.sat4j.reader.ParseFormatException;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("wrong nbclauses parameter. Found ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i6);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $i1 = r0.<org.sat4j.reader.DimacsReader: int expectedNbOfConstr>;

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" expected");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r18.<org.sat4j.reader.ParseFormatException: void <init>(java.lang.String)>($r9);

        throw $r18;

     label9:
        return;
    }

    protected void flushConstraint() throws org.sat4j.specs.ContradictionException
    {
        java.io.PrintStream $r5;
        org.sat4j.reader.DimacsReader r0;
        org.sat4j.specs.ISolver $r2;
        org.sat4j.specs.IVecInt $r1, $r7;
        java.lang.IllegalArgumentException $r3;
        java.lang.StringBuilder $r4, $r6, $r8;
        java.lang.String $r9;
        boolean $z0;

        r0 := @this: org.sat4j.reader.DimacsReader;

     label1:
        $r2 = r0.<org.sat4j.reader.DimacsReader: org.sat4j.specs.ISolver solver>;

        $r1 = r0.<org.sat4j.reader.DimacsReader: org.sat4j.specs.IVecInt literals>;

        interfaceinvoke $r2.<org.sat4j.specs.ISolver: org.sat4j.specs.IConstr addClause(org.sat4j.specs.IVecInt)>($r1);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        $z0 = virtualinvoke r0.<org.sat4j.reader.DimacsReader: boolean isVerbose()>();

        if $z0 == 0 goto label4;

        $r5 = <java.lang.System: java.io.PrintStream err>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("c Skipping constraint ");

        $r7 = r0.<org.sat4j.reader.DimacsReader: org.sat4j.specs.IVecInt literals>;

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>($r9);

     label4:
        return;

        catch java.lang.IllegalArgumentException from label1 to label2 with label3;
    }

    protected boolean handleLine() throws org.sat4j.specs.ContradictionException, java.io.IOException, org.sat4j.reader.ParseFormatException
    {
        org.sat4j.reader.DimacsReader r0;
        org.sat4j.specs.IVecInt $r3, $r4, $r5;
        int $i0, $i1;
        org.sat4j.reader.EfficientScanner $r1, $r2;
        boolean $z0, z1;

        r0 := @this: org.sat4j.reader.DimacsReader;

        z1 = 0;

     label1:
        $r1 = r0.<org.sat4j.reader.DimacsReader: org.sat4j.reader.EfficientScanner scanner>;

        $z0 = virtualinvoke $r1.<org.sat4j.reader.EfficientScanner: boolean eof()>();

        if $z0 != 0 goto label3;

        $r2 = r0.<org.sat4j.reader.DimacsReader: org.sat4j.reader.EfficientScanner scanner>;

        $i0 = virtualinvoke $r2.<org.sat4j.reader.EfficientScanner: int nextInt()>();

        if $i0 != 0 goto label2;

        $r4 = r0.<org.sat4j.reader.DimacsReader: org.sat4j.specs.IVecInt literals>;

        $i1 = interfaceinvoke $r4.<org.sat4j.specs.IVecInt: int size()>();

        if $i1 <= 0 goto label3;

        virtualinvoke r0.<org.sat4j.reader.DimacsReader: void flushConstraint()>();

        $r5 = r0.<org.sat4j.reader.DimacsReader: org.sat4j.specs.IVecInt literals>;

        interfaceinvoke $r5.<org.sat4j.specs.IVecInt: void clear()>();

        z1 = 1;

        goto label3;

     label2:
        $r3 = r0.<org.sat4j.reader.DimacsReader: org.sat4j.specs.IVecInt literals>;

        interfaceinvoke $r3.<org.sat4j.specs.IVecInt: org.sat4j.specs.IVecInt push(int)>($i0);

        goto label1;

     label3:
        return z1;
    }

    public org.sat4j.specs.IProblem parseInstance(java.io.InputStream) throws org.sat4j.reader.ParseFormatException, org.sat4j.specs.ContradictionException, java.io.IOException
    {
        org.sat4j.specs.IProblem $r3;
        org.sat4j.reader.DimacsReader r0;
        org.sat4j.reader.EfficientScanner $r1;
        java.io.InputStream r2;

        r0 := @this: org.sat4j.reader.DimacsReader;

        r2 := @parameter0: java.io.InputStream;

        $r1 = new org.sat4j.reader.EfficientScanner;

        specialinvoke $r1.<org.sat4j.reader.EfficientScanner: void <init>(java.io.InputStream)>(r2);

        r0.<org.sat4j.reader.DimacsReader: org.sat4j.reader.EfficientScanner scanner> = $r1;

        $r3 = specialinvoke r0.<org.sat4j.reader.DimacsReader: org.sat4j.specs.IProblem parseInstance()>();

        return $r3;
    }

    private org.sat4j.specs.IProblem parseInstance() throws org.sat4j.reader.ParseFormatException, org.sat4j.specs.ContradictionException
    {
        org.sat4j.reader.DimacsReader r0;
        org.sat4j.specs.ISolver $r1, $r3;
        java.lang.NumberFormatException $r4;
        java.io.IOException $r6;
        org.sat4j.reader.ParseFormatException $r5, $r7;
        org.sat4j.reader.EfficientScanner $r2;

        r0 := @this: org.sat4j.reader.DimacsReader;

        $r1 = r0.<org.sat4j.reader.DimacsReader: org.sat4j.specs.ISolver solver>;

        interfaceinvoke $r1.<org.sat4j.specs.ISolver: void reset()>();

     label1:
        virtualinvoke r0.<org.sat4j.reader.DimacsReader: void skipComments()>();

        virtualinvoke r0.<org.sat4j.reader.DimacsReader: void readProblemLine()>();

        virtualinvoke r0.<org.sat4j.reader.DimacsReader: void readConstrs()>();

        $r2 = r0.<org.sat4j.reader.DimacsReader: org.sat4j.reader.EfficientScanner scanner>;

        virtualinvoke $r2.<org.sat4j.reader.EfficientScanner: void close()>();

        $r3 = r0.<org.sat4j.reader.DimacsReader: org.sat4j.specs.ISolver solver>;

     label2:
        return $r3;

     label3:
        $r6 := @caughtexception;

        $r7 = new org.sat4j.reader.ParseFormatException;

        specialinvoke $r7.<org.sat4j.reader.ParseFormatException: void <init>(java.lang.Throwable)>($r6);

        throw $r7;

     label4:
        $r4 := @caughtexception;

        $r5 = new org.sat4j.reader.ParseFormatException;

        specialinvoke $r5.<org.sat4j.reader.ParseFormatException: void <init>(java.lang.String)>("integer value expected ");

        throw $r5;

        catch java.io.IOException from label1 to label2 with label3;
        catch java.lang.NumberFormatException from label1 to label2 with label4;
    }

    public java.lang.String decode(int[])
    {
        int[] r1;
        java.lang.StringBuffer $r0;
        org.sat4j.reader.DimacsReader r3;
        int i0, i1, i2;
        java.lang.String $r2;

        r3 := @this: org.sat4j.reader.DimacsReader;

        r1 := @parameter0: int[];

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        i0 = lengthof r1;

        i2 = 0;

     label1:
        if i2 >= i0 goto label2;

        i1 = r1[i2];

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i1);

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");

        i2 = i2 + 1;

        goto label1;

     label2:
        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("0");

        $r2 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r2;
    }

    public void decode(int[], java.io.PrintWriter)
    {
        java.io.PrintWriter r1;
        int[] r0;
        org.sat4j.reader.DimacsReader r2;
        int i0, i1, i2;

        r2 := @this: org.sat4j.reader.DimacsReader;

        r0 := @parameter0: int[];

        r1 := @parameter1: java.io.PrintWriter;

        i0 = lengthof r0;

        i2 = 0;

     label1:
        if i2 >= i0 goto label2;

        i1 = r0[i2];

        virtualinvoke r1.<java.io.PrintWriter: void print(int)>(i1);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(" ");

        i2 = i2 + 1;

        goto label1;

     label2:
        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("0");

        return;
    }

    protected org.sat4j.specs.ISolver getSolver()
    {
        org.sat4j.reader.DimacsReader r0;
        org.sat4j.specs.ISolver $r1;

        r0 := @this: org.sat4j.reader.DimacsReader;

        $r1 = r0.<org.sat4j.reader.DimacsReader: org.sat4j.specs.ISolver solver>;

        return $r1;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        <org.sat4j.reader.DimacsReader: long serialVersionUID> = 1L;

        $r0 = class "Lorg/sat4j/reader/DimacsReader;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.sat4j.reader.DimacsReader: boolean $assertionsDisabled> = $z1;

        return;
    }
}
