public abstract class com.ctc.wstx.sw.BaseStreamWriter extends java.lang.Object implements org.codehaus.stax2.XMLStreamWriter2, org.codehaus.stax2.validation.ValidationContext, javax.xml.stream.XMLStreamConstants, com.ctc.wstx.cfg.OutputConfigFlags
{
    protected static final int STATE_PROLOG;
    protected static final int STATE_TREE;
    protected static final int STATE_EPILOG;
    protected static final char CHAR_SPACE;
    protected static final java.lang.String NO_NS_URI;
    protected static final java.lang.String NO_PREFIX;
    protected static final int MIN_ARRAYCOPY;
    protected static final int ATTR_MIN_ARRAYCOPY;
    protected static final int DEFAULT_COPYBUFFER_LEN;
    protected final com.ctc.wstx.sw.XmlWriter mWriter;
    protected char[] mCopyBuffer;
    protected final com.ctc.wstx.api.WriterConfig mConfig;
    protected final boolean mCfgCDataAsText;
    protected final boolean mCfgCopyDefaultAttrs;
    protected final boolean mCfgAutomaticEmptyElems;
    protected boolean mCheckStructure;
    protected boolean mCheckAttrs;
    protected java.lang.String mEncoding;
    protected org.codehaus.stax2.validation.XMLValidator mValidator;
    protected boolean mXml11;
    protected org.codehaus.stax2.validation.ValidationProblemHandler mVldProbHandler;
    protected int mState;
    protected boolean mAnyOutput;
    protected boolean mStartElementOpen;
    protected boolean mEmptyElement;
    protected int mVldContent;
    protected java.lang.String mDtdRootElem;
    protected org.codehaus.stax2.XMLStreamReader2 mLastReader;
    protected com.ctc.wstx.sr.StreamReaderImpl mLastReaderImpl;
    protected com.ctc.wstx.sr.AttributeCollector mAttrCollector;
    protected com.ctc.wstx.sr.InputElementStack mInputElemStack;

    protected void <init>(com.ctc.wstx.sw.XmlWriter, java.lang.String, com.ctc.wstx.api.WriterConfig)
    {
        com.ctc.wstx.sw.BaseStreamWriter r0;
        com.ctc.wstx.sw.XmlWriter r1;
        com.ctc.wstx.api.WriterConfig r3;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.String r2;
        boolean $z0, $z1, $z2, $z3, $z4;

        r0 := @this: com.ctc.wstx.sw.BaseStreamWriter;

        r1 := @parameter0: com.ctc.wstx.sw.XmlWriter;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: com.ctc.wstx.api.WriterConfig;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.ctc.wstx.sw.BaseStreamWriter: char[] mCopyBuffer> = null;

        r0.<com.ctc.wstx.sw.BaseStreamWriter: org.codehaus.stax2.validation.XMLValidator mValidator> = null;

        r0.<com.ctc.wstx.sw.BaseStreamWriter: boolean mXml11> = 0;

        r0.<com.ctc.wstx.sw.BaseStreamWriter: org.codehaus.stax2.validation.ValidationProblemHandler mVldProbHandler> = null;

        r0.<com.ctc.wstx.sw.BaseStreamWriter: int mState> = 1;

        r0.<com.ctc.wstx.sw.BaseStreamWriter: boolean mAnyOutput> = 0;

        r0.<com.ctc.wstx.sw.BaseStreamWriter: boolean mStartElementOpen> = 0;

        r0.<com.ctc.wstx.sw.BaseStreamWriter: boolean mEmptyElement> = 0;

        r0.<com.ctc.wstx.sw.BaseStreamWriter: int mVldContent> = 3;

        r0.<com.ctc.wstx.sw.BaseStreamWriter: java.lang.String mDtdRootElem> = null;

        r0.<com.ctc.wstx.sw.BaseStreamWriter: org.codehaus.stax2.XMLStreamReader2 mLastReader> = null;

        r0.<com.ctc.wstx.sw.BaseStreamWriter: com.ctc.wstx.sr.StreamReaderImpl mLastReaderImpl> = null;

        r0.<com.ctc.wstx.sw.BaseStreamWriter: com.ctc.wstx.sr.AttributeCollector mAttrCollector> = null;

        r0.<com.ctc.wstx.sw.BaseStreamWriter: com.ctc.wstx.sr.InputElementStack mInputElemStack> = null;

        r0.<com.ctc.wstx.sw.BaseStreamWriter: com.ctc.wstx.sw.XmlWriter mWriter> = r1;

        r0.<com.ctc.wstx.sw.BaseStreamWriter: java.lang.String mEncoding> = r2;

        r0.<com.ctc.wstx.sw.BaseStreamWriter: com.ctc.wstx.api.WriterConfig mConfig> = r3;

        $i0 = virtualinvoke r3.<com.ctc.wstx.api.WriterConfig: int getConfigFlags()>();

        $i1 = $i0 & 256;

        if $i1 == 0 goto label01;

        $z0 = 1;

        goto label02;

     label01:
        $z0 = 0;

     label02:
        r0.<com.ctc.wstx.sw.BaseStreamWriter: boolean mCheckStructure> = $z0;

        $i2 = $i0 & 2048;

        if $i2 == 0 goto label03;

        $z1 = 1;

        goto label04;

     label03:
        $z1 = 0;

     label04:
        r0.<com.ctc.wstx.sw.BaseStreamWriter: boolean mCheckAttrs> = $z1;

        $i3 = $i0 & 4;

        if $i3 == 0 goto label05;

        $z2 = 1;

        goto label06;

     label05:
        $z2 = 0;

     label06:
        r0.<com.ctc.wstx.sw.BaseStreamWriter: boolean mCfgAutomaticEmptyElems> = $z2;

        $i4 = $i0 & 8;

        if $i4 == 0 goto label07;

        $z3 = 1;

        goto label08;

     label07:
        $z3 = 0;

     label08:
        r0.<com.ctc.wstx.sw.BaseStreamWriter: boolean mCfgCDataAsText> = $z3;

        $i5 = $i0 & 16;

        if $i5 == 0 goto label09;

        $z4 = 1;

        goto label10;

     label09:
        $z4 = 0;

     label10:
        r0.<com.ctc.wstx.sw.BaseStreamWriter: boolean mCfgCopyDefaultAttrs> = $z4;

        return;
    }

    public void close() throws javax.xml.stream.XMLStreamException
    {
        com.ctc.wstx.sw.BaseStreamWriter r0;

        r0 := @this: com.ctc.wstx.sw.BaseStreamWriter;

        specialinvoke r0.<com.ctc.wstx.sw.BaseStreamWriter: void finishDocument()>();

        return;
    }

    public void flush() throws javax.xml.stream.XMLStreamException
    {
        com.ctc.wstx.sw.BaseStreamWriter r0;
        com.ctc.wstx.sw.XmlWriter $r1;
        com.ctc.wstx.exc.WstxIOException $r3;
        java.io.IOException $r2;

        r0 := @this: com.ctc.wstx.sw.BaseStreamWriter;

     label1:
        $r1 = r0.<com.ctc.wstx.sw.BaseStreamWriter: com.ctc.wstx.sw.XmlWriter mWriter>;

        virtualinvoke $r1.<com.ctc.wstx.sw.XmlWriter: void flush()>();

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        $r3 = new com.ctc.wstx.exc.WstxIOException;

        specialinvoke $r3.<com.ctc.wstx.exc.WstxIOException: void <init>(java.io.IOException)>($r2);

        throw $r3;

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public abstract javax.xml.namespace.NamespaceContext getNamespaceContext();

    public abstract java.lang.String getPrefix(java.lang.String);

    public java.lang.Object getProperty(java.lang.String)
    {
        com.ctc.wstx.sw.BaseStreamWriter r1;
        com.ctc.wstx.sw.XmlWriter $r4, $r6;
        java.io.OutputStream $r7;
        com.ctc.wstx.api.WriterConfig $r2;
        java.io.Writer $r5;
        java.lang.Object $r3;
        java.lang.String r0;
        boolean $z0, $z1;

        r1 := @this: com.ctc.wstx.sw.BaseStreamWriter;

        r0 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("com.ctc.wstx.outputUnderlyingStream");

        if $z0 == 0 goto label1;

        $r6 = r1.<com.ctc.wstx.sw.BaseStreamWriter: com.ctc.wstx.sw.XmlWriter mWriter>;

        $r7 = virtualinvoke $r6.<com.ctc.wstx.sw.XmlWriter: java.io.OutputStream getOutputStream()>();

        return $r7;

     label1:
        $z1 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("com.ctc.wstx.outputUnderlyingWriter");

        if $z1 == 0 goto label2;

        $r4 = r1.<com.ctc.wstx.sw.BaseStreamWriter: com.ctc.wstx.sw.XmlWriter mWriter>;

        $r5 = virtualinvoke $r4.<com.ctc.wstx.sw.XmlWriter: java.io.Writer getWriter()>();

        return $r5;

     label2:
        $r2 = r1.<com.ctc.wstx.sw.BaseStreamWriter: com.ctc.wstx.api.WriterConfig mConfig>;

        $r3 = virtualinvoke $r2.<com.ctc.wstx.api.WriterConfig: java.lang.Object getProperty(java.lang.String)>(r0);

        return $r3;
    }

    public abstract void setDefaultNamespace(java.lang.String) throws javax.xml.stream.XMLStreamException;

    public abstract void setNamespaceContext(javax.xml.namespace.NamespaceContext) throws javax.xml.stream.XMLStreamException;

    public abstract void setPrefix(java.lang.String, java.lang.String) throws javax.xml.stream.XMLStreamException;

    public abstract void writeAttribute(java.lang.String, java.lang.String) throws javax.xml.stream.XMLStreamException;

    public abstract void writeAttribute(java.lang.String, java.lang.String, java.lang.String) throws javax.xml.stream.XMLStreamException;

    public abstract void writeAttribute(java.lang.String, java.lang.String, java.lang.String, java.lang.String) throws javax.xml.stream.XMLStreamException;

    public void writeCData(java.lang.String) throws javax.xml.stream.XMLStreamException
    {
        com.ctc.wstx.sw.BaseStreamWriter r0;
        com.ctc.wstx.sw.XmlWriter $r8;
        java.io.IOException $r6;
        java.lang.Integer $r2;
        org.codehaus.stax2.validation.XMLValidator $r4, $r5;
        int $i0, $i1;
        com.ctc.wstx.exc.WstxIOException $r7;
        java.lang.String r1, $r3;
        boolean $z0, $z1, $z2;

        r0 := @this: com.ctc.wstx.sw.BaseStreamWriter;

        r1 := @parameter0: java.lang.String;

        $z0 = r0.<com.ctc.wstx.sw.BaseStreamWriter: boolean mCfgCDataAsText>;

        if $z0 == 0 goto label1;

        virtualinvoke r0.<com.ctc.wstx.sw.BaseStreamWriter: void writeCharacters(java.lang.String)>(r1);

        return;

     label1:
        r0.<com.ctc.wstx.sw.BaseStreamWriter: boolean mAnyOutput> = 1;

        $z1 = r0.<com.ctc.wstx.sw.BaseStreamWriter: boolean mStartElementOpen>;

        if $z1 == 0 goto label2;

        $z2 = r0.<com.ctc.wstx.sw.BaseStreamWriter: boolean mEmptyElement>;

        virtualinvoke r0.<com.ctc.wstx.sw.BaseStreamWriter: void closeStartElement(boolean)>($z2);

     label2:
        virtualinvoke r0.<com.ctc.wstx.sw.BaseStreamWriter: void verifyWriteCData()>();

        $i0 = r0.<com.ctc.wstx.sw.BaseStreamWriter: int mVldContent>;

        if $i0 != 2 goto label3;

        $r4 = r0.<com.ctc.wstx.sw.BaseStreamWriter: org.codehaus.stax2.validation.XMLValidator mValidator>;

        if $r4 == null goto label3;

        $r5 = r0.<com.ctc.wstx.sw.BaseStreamWriter: org.codehaus.stax2.validation.XMLValidator mValidator>;

        virtualinvoke $r5.<org.codehaus.stax2.validation.XMLValidator: void validateText(java.lang.String,boolean)>(r1, 0);

     label3:
        $r8 = r0.<com.ctc.wstx.sw.BaseStreamWriter: com.ctc.wstx.sw.XmlWriter mWriter>;

        $i1 = virtualinvoke $r8.<com.ctc.wstx.sw.XmlWriter: int writeCData(java.lang.String)>(r1);

     label4:
        goto label6;

     label5:
        $r6 := @caughtexception;

        $r7 = new com.ctc.wstx.exc.WstxIOException;

        specialinvoke $r7.<com.ctc.wstx.exc.WstxIOException: void <init>(java.io.IOException)>($r6);

        throw $r7;

     label6:
        if $i1 < 0 goto label7;

        $r3 = <com.ctc.wstx.cfg.ErrorConsts: java.lang.String WERR_CDATA_CONTENT>;

        $r2 = new java.lang.Integer;

        specialinvoke $r2.<java.lang.Integer: void <init>(int)>($i1);

        staticinvoke <com.ctc.wstx.sw.BaseStreamWriter: void reportNwfContent(java.lang.String,java.lang.Object)>($r3, $r2);

     label7:
        return;

        catch java.io.IOException from label3 to label4 with label5;
    }

    public void writeCharacters(char[], int, int) throws javax.xml.stream.XMLStreamException
    {
        com.ctc.wstx.sw.BaseStreamWriter r0;
        com.ctc.wstx.sw.XmlWriter $r2, $r3;
        int $i0, i1, i2, $i3, $i4;
        com.ctc.wstx.exc.WstxIOException $r8;
        java.lang.String $r6;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.io.IOException $r7;
        org.codehaus.stax2.validation.XMLValidator $r4, $r5;
        char[] r1;

        r0 := @this: com.ctc.wstx.sw.BaseStreamWriter;

        r1 := @parameter0: char[];

        i2 := @parameter1: int;

        i1 := @parameter2: int;

        r0.<com.ctc.wstx.sw.BaseStreamWriter: boolean mAnyOutput> = 1;

        $z0 = r0.<com.ctc.wstx.sw.BaseStreamWriter: boolean mStartElementOpen>;

        if $z0 == 0 goto label01;

        $z6 = r0.<com.ctc.wstx.sw.BaseStreamWriter: boolean mEmptyElement>;

        virtualinvoke r0.<com.ctc.wstx.sw.BaseStreamWriter: void closeStartElement(boolean)>($z6);

     label01:
        $z1 = r0.<com.ctc.wstx.sw.BaseStreamWriter: boolean mCheckStructure>;

        if $z1 == 0 goto label02;

        $z4 = virtualinvoke r0.<com.ctc.wstx.sw.BaseStreamWriter: boolean inPrologOrEpilog()>();

        if $z4 == 0 goto label02;

        $z5 = staticinvoke <com.ctc.wstx.util.StringUtil: boolean isAllWhitespace(char[],int,int)>(r1, i2, i1);

        if $z5 != 0 goto label02;

        $r6 = <com.ctc.wstx.cfg.ErrorConsts: java.lang.String WERR_PROLOG_NONWS_TEXT>;

        staticinvoke <com.ctc.wstx.sw.BaseStreamWriter: void reportNwfStructure(java.lang.String)>($r6);

     label02:
        $i4 = r0.<com.ctc.wstx.sw.BaseStreamWriter: int mVldContent>;

        if $i4 > 1 goto label04;

        $i3 = r0.<com.ctc.wstx.sw.BaseStreamWriter: int mVldContent>;

        if $i3 != 0 goto label03;

        virtualinvoke r0.<com.ctc.wstx.sw.BaseStreamWriter: void reportInvalidContent(int)>(4);

        goto label05;

     label03:
        $z3 = staticinvoke <com.ctc.wstx.util.StringUtil: boolean isAllWhitespace(char[],int,int)>(r1, i2, i1);

        if $z3 != 0 goto label05;

        virtualinvoke r0.<com.ctc.wstx.sw.BaseStreamWriter: void reportInvalidContent(int)>(4);

        goto label05;

     label04:
        $i0 = r0.<com.ctc.wstx.sw.BaseStreamWriter: int mVldContent>;

        if $i0 != 2 goto label05;

        $r4 = r0.<com.ctc.wstx.sw.BaseStreamWriter: org.codehaus.stax2.validation.XMLValidator mValidator>;

        if $r4 == null goto label05;

        $r5 = r0.<com.ctc.wstx.sw.BaseStreamWriter: org.codehaus.stax2.validation.XMLValidator mValidator>;

        virtualinvoke $r5.<org.codehaus.stax2.validation.XMLValidator: void validateText(char[],int,int,boolean)>(r1, i2, i1, 0);

     label05:
        if i1 <= 0 goto label10;

     label06:
        $z2 = virtualinvoke r0.<com.ctc.wstx.sw.BaseStreamWriter: boolean inPrologOrEpilog()>();

        if $z2 == 0 goto label07;

        $r3 = r0.<com.ctc.wstx.sw.BaseStreamWriter: com.ctc.wstx.sw.XmlWriter mWriter>;

        virtualinvoke $r3.<com.ctc.wstx.sw.XmlWriter: void writeRaw(char[],int,int)>(r1, i2, i1);

        goto label08;

     label07:
        $r2 = r0.<com.ctc.wstx.sw.BaseStreamWriter: com.ctc.wstx.sw.XmlWriter mWriter>;

        virtualinvoke $r2.<com.ctc.wstx.sw.XmlWriter: void writeCharacters(char[],int,int)>(r1, i2, i1);

     label08:
        goto label10;

     label09:
        $r7 := @caughtexception;

        $r8 = new com.ctc.wstx.exc.WstxIOException;

        specialinvoke $r8.<com.ctc.wstx.exc.WstxIOException: void <init>(java.io.IOException)>($r7);

        throw $r8;

     label10:
        return;

        catch java.io.IOException from label06 to label08 with label09;
    }

    public void writeCharacters(java.lang.String) throws javax.xml.stream.XMLStreamException
    {
        com.ctc.wstx.exc.WstxIOException $r11, $r13, $r15;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        com.ctc.wstx.sw.BaseStreamWriter r0;
        com.ctc.wstx.sw.XmlWriter $r2, $r3, $r6;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, i7, $i8;
        java.lang.String r1, $r9;
        java.io.IOException $r10, $r12, $r14;
        org.codehaus.stax2.validation.XMLValidator $r7, $r8;
        com.ctc.wstx.api.WriterConfig $r4;
        char[] $r5, r16;

        r0 := @this: com.ctc.wstx.sw.BaseStreamWriter;

        r1 := @parameter0: java.lang.String;

        r0.<com.ctc.wstx.sw.BaseStreamWriter: boolean mAnyOutput> = 1;

        $z0 = r0.<com.ctc.wstx.sw.BaseStreamWriter: boolean mStartElementOpen>;

        if $z0 == 0 goto label01;

        $z5 = r0.<com.ctc.wstx.sw.BaseStreamWriter: boolean mEmptyElement>;

        virtualinvoke r0.<com.ctc.wstx.sw.BaseStreamWriter: void closeStartElement(boolean)>($z5);

     label01:
        $z1 = r0.<com.ctc.wstx.sw.BaseStreamWriter: boolean mCheckStructure>;

        if $z1 == 0 goto label02;

        $z3 = virtualinvoke r0.<com.ctc.wstx.sw.BaseStreamWriter: boolean inPrologOrEpilog()>();

        if $z3 == 0 goto label02;

        $z4 = staticinvoke <com.ctc.wstx.util.StringUtil: boolean isAllWhitespace(java.lang.String)>(r1);

        if $z4 != 0 goto label02;

        $r9 = <com.ctc.wstx.cfg.ErrorConsts: java.lang.String WERR_PROLOG_NONWS_TEXT>;

        staticinvoke <com.ctc.wstx.sw.BaseStreamWriter: void reportNwfStructure(java.lang.String)>($r9);

     label02:
        $i5 = r0.<com.ctc.wstx.sw.BaseStreamWriter: int mVldContent>;

        if $i5 > 1 goto label04;

        $i4 = r0.<com.ctc.wstx.sw.BaseStreamWriter: int mVldContent>;

        if $i4 != 0 goto label03;

        virtualinvoke r0.<com.ctc.wstx.sw.BaseStreamWriter: void reportInvalidContent(int)>(4);

        goto label05;

     label03:
        $z2 = staticinvoke <com.ctc.wstx.util.StringUtil: boolean isAllWhitespace(java.lang.String)>(r1);

        if $z2 != 0 goto label05;

        virtualinvoke r0.<com.ctc.wstx.sw.BaseStreamWriter: void reportInvalidContent(int)>(4);

        goto label05;

     label04:
        $i0 = r0.<com.ctc.wstx.sw.BaseStreamWriter: int mVldContent>;

        if $i0 != 2 goto label05;

        $r7 = r0.<com.ctc.wstx.sw.BaseStreamWriter: org.codehaus.stax2.validation.XMLValidator mValidator>;

        if $r7 == null goto label05;

        $r8 = r0.<com.ctc.wstx.sw.BaseStreamWriter: org.codehaus.stax2.validation.XMLValidator mValidator>;

        virtualinvoke $r8.<org.codehaus.stax2.validation.XMLValidator: void validateText(java.lang.String,boolean)>(r1, 0);

     label05:
        $z6 = virtualinvoke r0.<com.ctc.wstx.sw.BaseStreamWriter: boolean inPrologOrEpilog()>();

        if $z6 == 0 goto label10;

     label06:
        $r6 = r0.<com.ctc.wstx.sw.BaseStreamWriter: com.ctc.wstx.sw.XmlWriter mWriter>;

        virtualinvoke $r6.<com.ctc.wstx.sw.XmlWriter: void writeRaw(java.lang.String)>(r1);

     label07:
        goto label09;

     label08:
        $r14 := @caughtexception;

        $r15 = new com.ctc.wstx.exc.WstxIOException;

        specialinvoke $r15.<com.ctc.wstx.exc.WstxIOException: void <init>(java.io.IOException)>($r14);

        throw $r15;

     label09:
        return;

     label10:
        $i1 = virtualinvoke r1.<java.lang.String: int length()>();

        i6 = $i1;

        if $i1 < 12 goto label20;

        r16 = r0.<com.ctc.wstx.sw.BaseStreamWriter: char[] mCopyBuffer>;

        if r16 != null goto label11;

        $r4 = r0.<com.ctc.wstx.sw.BaseStreamWriter: com.ctc.wstx.api.WriterConfig mConfig>;

        $r5 = virtualinvoke $r4.<com.ctc.wstx.api.WriterConfig: char[] allocMediumCBuffer(int)>(512);

        r16 = $r5;

        r0.<com.ctc.wstx.sw.BaseStreamWriter: char[] mCopyBuffer> = $r5;

     label11:
        i7 = 0;

     label12:
        if i6 <= 0 goto label19;

        $i2 = lengthof r16;

        if i6 <= $i2 goto label13;

        $i8 = lengthof r16;

        goto label14;

     label13:
        $i8 = i6;

     label14:
        $i3 = i7 + $i8;

        virtualinvoke r1.<java.lang.String: void getChars(int,int,char[],int)>(i7, $i3, r16, 0);

     label15:
        $r3 = r0.<com.ctc.wstx.sw.BaseStreamWriter: com.ctc.wstx.sw.XmlWriter mWriter>;

        virtualinvoke $r3.<com.ctc.wstx.sw.XmlWriter: void writeCharacters(char[],int,int)>(r16, 0, $i8);

     label16:
        goto label18;

     label17:
        $r12 := @caughtexception;

        $r13 = new com.ctc.wstx.exc.WstxIOException;

        specialinvoke $r13.<com.ctc.wstx.exc.WstxIOException: void <init>(java.io.IOException)>($r12);

        throw $r13;

     label18:
        i7 = i7 + $i8;

        i6 = i6 - $i8;

        goto label12;

     label19:
        goto label23;

     label20:
        $r2 = r0.<com.ctc.wstx.sw.BaseStreamWriter: com.ctc.wstx.sw.XmlWriter mWriter>;

        virtualinvoke $r2.<com.ctc.wstx.sw.XmlWriter: void writeCharacters(java.lang.String)>(r1);

     label21:
        goto label23;

     label22:
        $r10 := @caughtexception;

        $r11 = new com.ctc.wstx.exc.WstxIOException;

        specialinvoke $r11.<com.ctc.wstx.exc.WstxIOException: void <init>(java.io.IOException)>($r10);

        throw $r11;

     label23:
        return;

        catch java.io.IOException from label06 to label07 with label08;
        catch java.io.IOException from label15 to label16 with label17;
        catch java.io.IOException from label20 to label21 with label22;
    }

    public void writeComment(java.lang.String) throws javax.xml.stream.XMLStreamException
    {
        com.ctc.wstx.sw.BaseStreamWriter r0;
        com.ctc.wstx.sw.XmlWriter $r2;
        java.io.IOException $r5;
        java.lang.Integer $r3;
        int $i0, $i1;
        com.ctc.wstx.exc.WstxIOException $r6;
        java.lang.String r1, $r4;
        boolean $z0, $z1;

        r0 := @this: com.ctc.wstx.sw.BaseStreamWriter;

        r1 := @parameter0: java.lang.String;

        r0.<com.ctc.wstx.sw.BaseStreamWriter: boolean mAnyOutput> = 1;

        $z0 = r0.<com.ctc.wstx.sw.BaseStreamWriter: boolean mStartElementOpen>;

        if $z0 == 0 goto label1;

        $z1 = r0.<com.ctc.wstx.sw.BaseStreamWriter: boolean mEmptyElement>;

        virtualinvoke r0.<com.ctc.wstx.sw.BaseStreamWriter: void closeStartElement(boolean)>($z1);

     label1:
        $i0 = r0.<com.ctc.wstx.sw.BaseStreamWriter: int mVldContent>;

        if $i0 != 0 goto label2;

        virtualinvoke r0.<com.ctc.wstx.sw.BaseStreamWriter: void reportInvalidContent(int)>(5);

     label2:
        $r2 = r0.<com.ctc.wstx.sw.BaseStreamWriter: com.ctc.wstx.sw.XmlWriter mWriter>;

        $i1 = virtualinvoke $r2.<com.ctc.wstx.sw.XmlWriter: int writeComment(java.lang.String)>(r1);

     label3:
        goto label5;

     label4:
        $r5 := @caughtexception;

        $r6 = new com.ctc.wstx.exc.WstxIOException;

        specialinvoke $r6.<com.ctc.wstx.exc.WstxIOException: void <init>(java.io.IOException)>($r5);

        throw $r6;

     label5:
        if $i1 < 0 goto label6;

        $r4 = <com.ctc.wstx.cfg.ErrorConsts: java.lang.String WERR_COMMENT_CONTENT>;

        $r3 = new java.lang.Integer;

        specialinvoke $r3.<java.lang.Integer: void <init>(int)>($i1);

        staticinvoke <com.ctc.wstx.sw.BaseStreamWriter: void reportNwfContent(java.lang.String,java.lang.Object)>($r4, $r3);

     label6:
        return;

        catch java.io.IOException from label2 to label3 with label4;
    }

    public abstract void writeDefaultNamespace(java.lang.String) throws javax.xml.stream.XMLStreamException;

    public void writeDTD(java.lang.String) throws javax.xml.stream.XMLStreamException
    {
        com.ctc.wstx.sw.BaseStreamWriter r0;
        com.ctc.wstx.sw.XmlWriter $r2;
        com.ctc.wstx.exc.WstxIOException $r4;
        java.io.IOException $r3;
        java.lang.String r1;

        r0 := @this: com.ctc.wstx.sw.BaseStreamWriter;

        r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<com.ctc.wstx.sw.BaseStreamWriter: void verifyWriteDTD()>();

        r0.<com.ctc.wstx.sw.BaseStreamWriter: java.lang.String mDtdRootElem> = "";

     label1:
        $r2 = r0.<com.ctc.wstx.sw.BaseStreamWriter: com.ctc.wstx.sw.XmlWriter mWriter>;

        virtualinvoke $r2.<com.ctc.wstx.sw.XmlWriter: void writeDTD(java.lang.String)>(r1);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        $r4 = new com.ctc.wstx.exc.WstxIOException;

        specialinvoke $r4.<com.ctc.wstx.exc.WstxIOException: void <init>(java.io.IOException)>($r3);

        throw $r4;

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public abstract void writeEmptyElement(java.lang.String) throws javax.xml.stream.XMLStreamException;

    public abstract void writeEmptyElement(java.lang.String, java.lang.String) throws javax.xml.stream.XMLStreamException;

    public abstract void writeEmptyElement(java.lang.String, java.lang.String, java.lang.String) throws javax.xml.stream.XMLStreamException;

    public void writeEndDocument() throws javax.xml.stream.XMLStreamException
    {
        com.ctc.wstx.sw.BaseStreamWriter r0;

        r0 := @this: com.ctc.wstx.sw.BaseStreamWriter;

        specialinvoke r0.<com.ctc.wstx.sw.BaseStreamWriter: void finishDocument()>();

        return;
    }

    public abstract void writeEndElement() throws javax.xml.stream.XMLStreamException;

    public void writeEntityRef(java.lang.String) throws javax.xml.stream.XMLStreamException
    {
        com.ctc.wstx.sw.BaseStreamWriter r0;
        com.ctc.wstx.sw.XmlWriter $r2;
        java.io.IOException $r3;
        com.ctc.wstx.exc.WstxIOException $r4;
        int $i0;
        java.lang.String r1;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: com.ctc.wstx.sw.BaseStreamWriter;

        r1 := @parameter0: java.lang.String;

        r0.<com.ctc.wstx.sw.BaseStreamWriter: boolean mAnyOutput> = 1;

        $z0 = r0.<com.ctc.wstx.sw.BaseStreamWriter: boolean mStartElementOpen>;

        if $z0 == 0 goto label1;

        $z3 = r0.<com.ctc.wstx.sw.BaseStreamWriter: boolean mEmptyElement>;

        virtualinvoke r0.<com.ctc.wstx.sw.BaseStreamWriter: void closeStartElement(boolean)>($z3);

     label1:
        $z1 = r0.<com.ctc.wstx.sw.BaseStreamWriter: boolean mCheckStructure>;

        if $z1 == 0 goto label2;

        $z2 = virtualinvoke r0.<com.ctc.wstx.sw.BaseStreamWriter: boolean inPrologOrEpilog()>();

        if $z2 == 0 goto label2;

        staticinvoke <com.ctc.wstx.sw.BaseStreamWriter: void reportNwfStructure(java.lang.String)>("Trying to output an entity reference outside main element tree (in prolog or epilog)");

     label2:
        $i0 = r0.<com.ctc.wstx.sw.BaseStreamWriter: int mVldContent>;

        if $i0 != 0 goto label3;

        virtualinvoke r0.<com.ctc.wstx.sw.BaseStreamWriter: void reportInvalidContent(int)>(9);

     label3:
        $r2 = r0.<com.ctc.wstx.sw.BaseStreamWriter: com.ctc.wstx.sw.XmlWriter mWriter>;

        virtualinvoke $r2.<com.ctc.wstx.sw.XmlWriter: void writeEntityReference(java.lang.String)>(r1);

     label4:
        goto label6;

     label5:
        $r3 := @caughtexception;

        $r4 = new com.ctc.wstx.exc.WstxIOException;

        specialinvoke $r4.<com.ctc.wstx.exc.WstxIOException: void <init>(java.io.IOException)>($r3);

        throw $r4;

     label6:
        return;

        catch java.io.IOException from label3 to label4 with label5;
    }

    public abstract void writeNamespace(java.lang.String, java.lang.String) throws javax.xml.stream.XMLStreamException;

    public void writeProcessingInstruction(java.lang.String) throws javax.xml.stream.XMLStreamException
    {
        com.ctc.wstx.sw.BaseStreamWriter r0;
        java.lang.String r1;

        r0 := @this: com.ctc.wstx.sw.BaseStreamWriter;

        r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<com.ctc.wstx.sw.BaseStreamWriter: void writeProcessingInstruction(java.lang.String,java.lang.String)>(r1, null);

        return;
    }

    public void writeProcessingInstruction(java.lang.String, java.lang.String) throws javax.xml.stream.XMLStreamException
    {
        com.ctc.wstx.sw.BaseStreamWriter r0;
        com.ctc.wstx.sw.XmlWriter $r3;
        java.lang.StringBuffer $r5, $r6, $r7, $r8;
        javax.xml.stream.XMLStreamException $r4;
        int $i0, $i1;
        com.ctc.wstx.exc.WstxIOException $r11;
        java.lang.String r1, r2, $r9;
        boolean $z0, $z1;
        java.io.IOException $r10;

        r0 := @this: com.ctc.wstx.sw.BaseStreamWriter;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r0.<com.ctc.wstx.sw.BaseStreamWriter: boolean mAnyOutput> = 1;

        $z0 = r0.<com.ctc.wstx.sw.BaseStreamWriter: boolean mStartElementOpen>;

        if $z0 == 0 goto label1;

        $z1 = r0.<com.ctc.wstx.sw.BaseStreamWriter: boolean mEmptyElement>;

        virtualinvoke r0.<com.ctc.wstx.sw.BaseStreamWriter: void closeStartElement(boolean)>($z1);

     label1:
        $i0 = r0.<com.ctc.wstx.sw.BaseStreamWriter: int mVldContent>;

        if $i0 != 0 goto label2;

        virtualinvoke r0.<com.ctc.wstx.sw.BaseStreamWriter: void reportInvalidContent(int)>(3);

     label2:
        $r3 = r0.<com.ctc.wstx.sw.BaseStreamWriter: com.ctc.wstx.sw.XmlWriter mWriter>;

        $i1 = virtualinvoke $r3.<com.ctc.wstx.sw.XmlWriter: int writePI(java.lang.String,java.lang.String)>(r1, r2);

     label3:
        goto label5;

     label4:
        $r10 := @caughtexception;

        $r11 = new com.ctc.wstx.exc.WstxIOException;

        specialinvoke $r11.<com.ctc.wstx.exc.WstxIOException: void <init>(java.io.IOException)>($r10);

        throw $r11;

     label5:
        if $i1 < 0 goto label6;

        $r4 = new javax.xml.stream.XMLStreamException;

        $r5 = new java.lang.StringBuffer;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Illegal input: processing instruction content has embedded \'?>\' in it (index ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r4.<javax.xml.stream.XMLStreamException: void <init>(java.lang.String)>($r9);

        throw $r4;

     label6:
        return;

        catch java.io.IOException from label2 to label3 with label4;
    }

    public void writeStartDocument() throws javax.xml.stream.XMLStreamException
    {
        com.ctc.wstx.sw.BaseStreamWriter r0;
        java.lang.String $r1, $r2;

        r0 := @this: com.ctc.wstx.sw.BaseStreamWriter;

        $r1 = r0.<com.ctc.wstx.sw.BaseStreamWriter: java.lang.String mEncoding>;

        if $r1 != null goto label1;

        r0.<com.ctc.wstx.sw.BaseStreamWriter: java.lang.String mEncoding> = "UTF-8";

     label1:
        $r2 = r0.<com.ctc.wstx.sw.BaseStreamWriter: java.lang.String mEncoding>;

        virtualinvoke r0.<com.ctc.wstx.sw.BaseStreamWriter: void writeStartDocument(java.lang.String,java.lang.String)>($r2, "1.0");

        return;
    }

    public void writeStartDocument(java.lang.String) throws javax.xml.stream.XMLStreamException
    {
        com.ctc.wstx.sw.BaseStreamWriter r0;
        java.lang.String r1, $r2;

        r0 := @this: com.ctc.wstx.sw.BaseStreamWriter;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.ctc.wstx.sw.BaseStreamWriter: java.lang.String mEncoding>;

        virtualinvoke r0.<com.ctc.wstx.sw.BaseStreamWriter: void writeStartDocument(java.lang.String,java.lang.String)>($r2, r1);

        return;
    }

    public void writeStartDocument(java.lang.String, java.lang.String) throws javax.xml.stream.XMLStreamException
    {
        com.ctc.wstx.sw.BaseStreamWriter r0;
        java.lang.String r1, r2;

        r0 := @this: com.ctc.wstx.sw.BaseStreamWriter;

        r2 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        virtualinvoke r0.<com.ctc.wstx.sw.BaseStreamWriter: void doWriteStartDocument(java.lang.String,java.lang.String,java.lang.String)>(r1, r2, null);

        return;
    }

    protected void doWriteStartDocument(java.lang.String, java.lang.String, java.lang.String) throws javax.xml.stream.XMLStreamException
    {
        com.ctc.wstx.exc.WstxIOException $r16;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        com.ctc.wstx.sw.BaseStreamWriter r0;
        com.ctc.wstx.sw.XmlWriter $r5, $r20;
        java.lang.StringBuffer $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13;
        int $i0, $i1, $i2, $i3;
        java.lang.String r1, r2, $r3, $r4, $r14, r17, $r19;
        java.io.IOException $r15;
        com.ctc.wstx.api.WriterConfig $r18;

        r0 := @this: com.ctc.wstx.sw.BaseStreamWriter;

        r17 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        $z0 = r0.<com.ctc.wstx.sw.BaseStreamWriter: boolean mCheckStructure>;

        if $z0 == 0 goto label01;

        $z3 = r0.<com.ctc.wstx.sw.BaseStreamWriter: boolean mAnyOutput>;

        if $z3 == 0 goto label01;

        staticinvoke <com.ctc.wstx.sw.BaseStreamWriter: void reportNwfStructure(java.lang.String)>("Can not output XML declaration, after other output has already been done.");

     label01:
        r0.<com.ctc.wstx.sw.BaseStreamWriter: boolean mAnyOutput> = 1;

        $r18 = r0.<com.ctc.wstx.sw.BaseStreamWriter: com.ctc.wstx.api.WriterConfig mConfig>;

        $z4 = virtualinvoke $r18.<com.ctc.wstx.api.WriterConfig: boolean willValidateContent()>();

        if $z4 == 0 goto label02;

        if r17 == null goto label02;

        $i3 = virtualinvoke r17.<java.lang.String: int length()>();

        if $i3 <= 0 goto label02;

        $z1 = virtualinvoke r17.<java.lang.String: boolean equals(java.lang.Object)>("1.0");

        if $z1 != 0 goto label02;

        $z2 = virtualinvoke r17.<java.lang.String: boolean equals(java.lang.Object)>("1.1");

        if $z2 != 0 goto label02;

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Illegal version argument (\'");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r17);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'); should only use \'");

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("1.0");

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' or \'");

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("1.1");

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'");

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <com.ctc.wstx.sw.BaseStreamWriter: void reportNwfContent(java.lang.String)>($r14);

     label02:
        if r17 == null goto label03;

        $i2 = virtualinvoke r17.<java.lang.String: int length()>();

        if $i2 != 0 goto label04;

     label03:
        r17 = "1.0";

     label04:
        $r19 = "1.1";

        $z5 = virtualinvoke $r19.<java.lang.String: boolean equals(java.lang.Object)>(r17);

        r0.<com.ctc.wstx.sw.BaseStreamWriter: boolean mXml11> = $z5;

        $z6 = r0.<com.ctc.wstx.sw.BaseStreamWriter: boolean mXml11>;

        if $z6 == 0 goto label05;

        $r5 = r0.<com.ctc.wstx.sw.BaseStreamWriter: com.ctc.wstx.sw.XmlWriter mWriter>;

        virtualinvoke $r5.<com.ctc.wstx.sw.XmlWriter: void enableXml11()>();

     label05:
        if r1 == null goto label07;

        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i0 <= 0 goto label07;

        $r3 = r0.<com.ctc.wstx.sw.BaseStreamWriter: java.lang.String mEncoding>;

        if $r3 == null goto label06;

        $r4 = r0.<com.ctc.wstx.sw.BaseStreamWriter: java.lang.String mEncoding>;

        $i1 = virtualinvoke $r4.<java.lang.String: int length()>();

        if $i1 != 0 goto label07;

     label06:
        r0.<com.ctc.wstx.sw.BaseStreamWriter: java.lang.String mEncoding> = r1;

     label07:
        $r20 = r0.<com.ctc.wstx.sw.BaseStreamWriter: com.ctc.wstx.sw.XmlWriter mWriter>;

        virtualinvoke $r20.<com.ctc.wstx.sw.XmlWriter: void writeXmlDeclaration(java.lang.String,java.lang.String,java.lang.String)>(r17, r1, r2);

     label08:
        goto label10;

     label09:
        $r15 := @caughtexception;

        $r16 = new com.ctc.wstx.exc.WstxIOException;

        specialinvoke $r16.<com.ctc.wstx.exc.WstxIOException: void <init>(java.io.IOException)>($r15);

        throw $r16;

     label10:
        return;

        catch java.io.IOException from label07 to label08 with label09;
    }

    public abstract void writeStartElement(java.lang.String) throws javax.xml.stream.XMLStreamException;

    public abstract void writeStartElement(java.lang.String, java.lang.String) throws javax.xml.stream.XMLStreamException;

    public abstract void writeStartElement(java.lang.String, java.lang.String, java.lang.String) throws javax.xml.stream.XMLStreamException;

    public void copyEventFromReader(org.codehaus.stax2.XMLStreamReader2, boolean) throws javax.xml.stream.XMLStreamException
    {
        org.codehaus.stax2.XMLStreamReader2 r0, $r19;
        org.codehaus.stax2.DTDInfo $r4;
        javax.xml.stream.XMLStreamException $r27, $r34;
        com.ctc.wstx.exc.WstxIOException $r41;
        com.ctc.wstx.sr.StreamReaderImpl $r22, $r23, $r25;
        boolean $z0, $z1, z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14;
        com.ctc.wstx.sr.AttributeCollector $r20, $r24;
        java.io.Writer $r2, $r11, $r13, $r17, $r43;
        com.ctc.wstx.sw.BaseStreamWriter r1;
        com.ctc.wstx.sw.XmlWriter $r12, $r14, $r15, $r18, $r42, $r44;
        com.ctc.wstx.sr.InputElementStack $r21, $r26;
        java.lang.StringBuffer $r28, $r29, $r31, $r32, $r35, $r36, $r37, $r38;
        int $i0, $i1, $i2;
        java.lang.String $r3, $r5, $r6, $r7, $r8, $r9, $r10, $r16, $r33, $r39;
        java.io.IOException $r40;
        java.lang.Class $r30;

        r1 := @this: com.ctc.wstx.sw.BaseStreamWriter;

        r0 := @parameter0: org.codehaus.stax2.XMLStreamReader2;

        z2 := @parameter1: boolean;

     label01:
        $i0 = interfaceinvoke r0.<org.codehaus.stax2.XMLStreamReader2: int getEventType()>();

        tableswitch($i0)
        {
            case 1: goto label08;
            case 2: goto label12;
            case 3: goto label27;
            case 4: goto label21;
            case 5: goto label24;
            case 6: goto label14;
            case 7: goto label02;
            case 8: goto label06;
            case 9: goto label32;
            case 10: goto label34;
            case 11: goto label29;
            case 12: goto label17;
            case 13: goto label34;
            case 14: goto label34;
            case 15: goto label34;
            default: goto label34;
        };

     label02:
        $r6 = interfaceinvoke r0.<org.codehaus.stax2.XMLStreamReader2: java.lang.String getVersion()>();

        if $r6 == null goto label05;

        $i1 = virtualinvoke $r6.<java.lang.String: int length()>();

        if $i1 != 0 goto label03;

        goto label05;

     label03:
        $z8 = interfaceinvoke r0.<org.codehaus.stax2.XMLStreamReader2: boolean standaloneSet()>();

        if $z8 == 0 goto label04;

        $r9 = interfaceinvoke r0.<org.codehaus.stax2.XMLStreamReader2: java.lang.String getVersion()>();

        $r10 = interfaceinvoke r0.<org.codehaus.stax2.XMLStreamReader2: java.lang.String getCharacterEncodingScheme()>();

        $z9 = interfaceinvoke r0.<org.codehaus.stax2.XMLStreamReader2: boolean isStandalone()>();

        virtualinvoke r1.<com.ctc.wstx.sw.BaseStreamWriter: void writeStartDocument(java.lang.String,java.lang.String,boolean)>($r9, $r10, $z9);

        goto label05;

     label04:
        $r7 = interfaceinvoke r0.<org.codehaus.stax2.XMLStreamReader2: java.lang.String getCharacterEncodingScheme()>();

        $r8 = interfaceinvoke r0.<org.codehaus.stax2.XMLStreamReader2: java.lang.String getVersion()>();

        virtualinvoke r1.<com.ctc.wstx.sw.BaseStreamWriter: void writeStartDocument(java.lang.String,java.lang.String)>($r7, $r8);

     label05:
        return;

     label06:
        virtualinvoke r1.<com.ctc.wstx.sw.BaseStreamWriter: void writeEndDocument()>();

     label07:
        return;

     label08:
        $r19 = r1.<com.ctc.wstx.sw.BaseStreamWriter: org.codehaus.stax2.XMLStreamReader2 mLastReader>;

        if r0 == $r19 goto label10;

        r1.<com.ctc.wstx.sw.BaseStreamWriter: org.codehaus.stax2.XMLStreamReader2 mLastReader> = r0;

        $z14 = r0 instanceof com.ctc.wstx.sr.StreamReaderImpl;

        if $z14 != 0 goto label09;

        $r27 = new javax.xml.stream.XMLStreamException;

        $r28 = new java.lang.StringBuffer;

        specialinvoke $r28.<java.lang.StringBuffer: void <init>()>();

        $r29 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Can not yet copy START_ELEMENT events from non-Woodstox stream readers (class ");

        $r30 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r31 = virtualinvoke $r29.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r30);

        $r32 = virtualinvoke $r31.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r33 = virtualinvoke $r32.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r27.<javax.xml.stream.XMLStreamException: void <init>(java.lang.String)>($r33);

        throw $r27;

     label09:
        $r22 = (com.ctc.wstx.sr.StreamReaderImpl) r0;

        r1.<com.ctc.wstx.sw.BaseStreamWriter: com.ctc.wstx.sr.StreamReaderImpl mLastReaderImpl> = $r22;

        $r23 = r1.<com.ctc.wstx.sw.BaseStreamWriter: com.ctc.wstx.sr.StreamReaderImpl mLastReaderImpl>;

        $r24 = interfaceinvoke $r23.<com.ctc.wstx.sr.StreamReaderImpl: com.ctc.wstx.sr.AttributeCollector getAttributeCollector()>();

        r1.<com.ctc.wstx.sw.BaseStreamWriter: com.ctc.wstx.sr.AttributeCollector mAttrCollector> = $r24;

        $r25 = r1.<com.ctc.wstx.sw.BaseStreamWriter: com.ctc.wstx.sr.StreamReaderImpl mLastReaderImpl>;

        $r26 = interfaceinvoke $r25.<com.ctc.wstx.sr.StreamReaderImpl: com.ctc.wstx.sr.InputElementStack getInputElementStack()>();

        r1.<com.ctc.wstx.sw.BaseStreamWriter: com.ctc.wstx.sr.InputElementStack mInputElemStack> = $r26;

     label10:
        $r21 = r1.<com.ctc.wstx.sw.BaseStreamWriter: com.ctc.wstx.sr.InputElementStack mInputElemStack>;

        $r20 = r1.<com.ctc.wstx.sw.BaseStreamWriter: com.ctc.wstx.sr.AttributeCollector mAttrCollector>;

        virtualinvoke r1.<com.ctc.wstx.sw.BaseStreamWriter: void copyStartElement(com.ctc.wstx.sr.InputElementStack,com.ctc.wstx.sr.AttributeCollector)>($r21, $r20);

     label11:
        return;

     label12:
        virtualinvoke r1.<com.ctc.wstx.sw.BaseStreamWriter: void writeEndElement()>();

     label13:
        return;

     label14:
        r1.<com.ctc.wstx.sw.BaseStreamWriter: boolean mAnyOutput> = 1;

        $z10 = r1.<com.ctc.wstx.sw.BaseStreamWriter: boolean mStartElementOpen>;

        if $z10 == 0 goto label15;

        $z11 = r1.<com.ctc.wstx.sw.BaseStreamWriter: boolean mEmptyElement>;

        virtualinvoke r1.<com.ctc.wstx.sw.BaseStreamWriter: void closeStartElement(boolean)>($z11);

     label15:
        $r11 = virtualinvoke r1.<com.ctc.wstx.sw.BaseStreamWriter: java.io.Writer wrapAsRawWriter()>();

        interfaceinvoke r0.<org.codehaus.stax2.XMLStreamReader2: int getText(java.io.Writer,boolean)>($r11, z2);

     label16:
        return;

     label17:
        $z0 = r1.<com.ctc.wstx.sw.BaseStreamWriter: boolean mCfgCDataAsText>;

        if $z0 != 0 goto label21;

        r1.<com.ctc.wstx.sw.BaseStreamWriter: boolean mAnyOutput> = 1;

        $z4 = r1.<com.ctc.wstx.sw.BaseStreamWriter: boolean mStartElementOpen>;

        if $z4 == 0 goto label18;

        $z7 = r1.<com.ctc.wstx.sw.BaseStreamWriter: boolean mEmptyElement>;

        virtualinvoke r1.<com.ctc.wstx.sw.BaseStreamWriter: void closeStartElement(boolean)>($z7);

     label18:
        $z5 = r1.<com.ctc.wstx.sw.BaseStreamWriter: boolean mCheckStructure>;

        if $z5 == 0 goto label19;

        $z6 = virtualinvoke r1.<com.ctc.wstx.sw.BaseStreamWriter: boolean inPrologOrEpilog()>();

        if $z6 == 0 goto label19;

        $r3 = <com.ctc.wstx.cfg.ErrorConsts: java.lang.String WERR_PROLOG_CDATA>;

        staticinvoke <com.ctc.wstx.sw.BaseStreamWriter: void reportNwfStructure(java.lang.String)>($r3);

     label19:
        $r42 = r1.<com.ctc.wstx.sw.BaseStreamWriter: com.ctc.wstx.sw.XmlWriter mWriter>;

        virtualinvoke $r42.<com.ctc.wstx.sw.XmlWriter: void writeCDataStart()>();

        $r43 = virtualinvoke r1.<com.ctc.wstx.sw.BaseStreamWriter: java.io.Writer wrapAsRawWriter()>();

        interfaceinvoke r0.<org.codehaus.stax2.XMLStreamReader2: int getText(java.io.Writer,boolean)>($r43, z2);

        $r44 = r1.<com.ctc.wstx.sw.BaseStreamWriter: com.ctc.wstx.sw.XmlWriter mWriter>;

        virtualinvoke $r44.<com.ctc.wstx.sw.XmlWriter: void writeCDataEnd()>();

     label20:
        return;

     label21:
        r1.<com.ctc.wstx.sw.BaseStreamWriter: boolean mAnyOutput> = 1;

        $z1 = r1.<com.ctc.wstx.sw.BaseStreamWriter: boolean mStartElementOpen>;

        if $z1 == 0 goto label22;

        $z3 = r1.<com.ctc.wstx.sw.BaseStreamWriter: boolean mEmptyElement>;

        virtualinvoke r1.<com.ctc.wstx.sw.BaseStreamWriter: void closeStartElement(boolean)>($z3);

     label22:
        $r2 = virtualinvoke r1.<com.ctc.wstx.sw.BaseStreamWriter: java.io.Writer wrapAsTextWriter()>();

        interfaceinvoke r0.<org.codehaus.stax2.XMLStreamReader2: int getText(java.io.Writer,boolean)>($r2, z2);

     label23:
        return;

     label24:
        r1.<com.ctc.wstx.sw.BaseStreamWriter: boolean mAnyOutput> = 1;

        $z12 = r1.<com.ctc.wstx.sw.BaseStreamWriter: boolean mStartElementOpen>;

        if $z12 == 0 goto label25;

        $z13 = r1.<com.ctc.wstx.sw.BaseStreamWriter: boolean mEmptyElement>;

        virtualinvoke r1.<com.ctc.wstx.sw.BaseStreamWriter: void closeStartElement(boolean)>($z13);

     label25:
        $r12 = r1.<com.ctc.wstx.sw.BaseStreamWriter: com.ctc.wstx.sw.XmlWriter mWriter>;

        virtualinvoke $r12.<com.ctc.wstx.sw.XmlWriter: void writeCommentStart()>();

        $r13 = virtualinvoke r1.<com.ctc.wstx.sw.BaseStreamWriter: java.io.Writer wrapAsRawWriter()>();

        interfaceinvoke r0.<org.codehaus.stax2.XMLStreamReader2: int getText(java.io.Writer,boolean)>($r13, z2);

        $r14 = r1.<com.ctc.wstx.sw.BaseStreamWriter: com.ctc.wstx.sw.XmlWriter mWriter>;

        virtualinvoke $r14.<com.ctc.wstx.sw.XmlWriter: void writeCommentEnd()>();

     label26:
        return;

     label27:
        $r15 = r1.<com.ctc.wstx.sw.BaseStreamWriter: com.ctc.wstx.sw.XmlWriter mWriter>;

        $r16 = interfaceinvoke r0.<org.codehaus.stax2.XMLStreamReader2: java.lang.String getPITarget()>();

        virtualinvoke $r15.<com.ctc.wstx.sw.XmlWriter: void writePIStart(java.lang.String,boolean)>($r16, 1);

        $r17 = virtualinvoke r1.<com.ctc.wstx.sw.BaseStreamWriter: java.io.Writer wrapAsRawWriter()>();

        interfaceinvoke r0.<org.codehaus.stax2.XMLStreamReader2: int getText(java.io.Writer,boolean)>($r17, z2);

        $r18 = r1.<com.ctc.wstx.sw.BaseStreamWriter: com.ctc.wstx.sw.XmlWriter mWriter>;

        virtualinvoke $r18.<com.ctc.wstx.sw.XmlWriter: void writePIEnd()>();

     label28:
        return;

     label29:
        $r4 = interfaceinvoke r0.<org.codehaus.stax2.XMLStreamReader2: org.codehaus.stax2.DTDInfo getDTDInfo()>();

        if $r4 != null goto label30;

        staticinvoke <com.ctc.wstx.sw.BaseStreamWriter: void throwOutputError(java.lang.String)>("Current state DOCTYPE, but not DTDInfo Object returned -- reader doesn\'t support DTDs?");

     label30:
        virtualinvoke r1.<com.ctc.wstx.sw.BaseStreamWriter: void writeDTD(org.codehaus.stax2.DTDInfo)>($r4);

     label31:
        return;

     label32:
        $r5 = interfaceinvoke r0.<org.codehaus.stax2.XMLStreamReader2: java.lang.String getLocalName()>();

        virtualinvoke r1.<com.ctc.wstx.sw.BaseStreamWriter: void writeEntityRef(java.lang.String)>($r5);

     label33:
        return;

     label34:
        goto label36;

     label35:
        $r40 := @caughtexception;

        $r41 = new com.ctc.wstx.exc.WstxIOException;

        specialinvoke $r41.<com.ctc.wstx.exc.WstxIOException: void <init>(java.io.IOException)>($r40);

        throw $r41;

     label36:
        $r34 = new javax.xml.stream.XMLStreamException;

        $r35 = new java.lang.StringBuffer;

        specialinvoke $r35.<java.lang.StringBuffer: void <init>()>();

        $r36 = virtualinvoke $r35.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Unrecognized event type (");

        $i2 = interfaceinvoke r0.<org.codehaus.stax2.XMLStreamReader2: int getEventType()>();

        $r37 = virtualinvoke $r36.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i2);

        $r38 = virtualinvoke $r37.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("); not sure how to copy");

        $r39 = virtualinvoke $r38.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r34.<javax.xml.stream.XMLStreamException: void <init>(java.lang.String)>($r39);

        throw $r34;

        catch java.io.IOException from label01 to label05 with label35;
        catch java.io.IOException from label06 to label07 with label35;
        catch java.io.IOException from label08 to label11 with label35;
        catch java.io.IOException from label12 to label13 with label35;
        catch java.io.IOException from label14 to label16 with label35;
        catch java.io.IOException from label17 to label20 with label35;
        catch java.io.IOException from label21 to label23 with label35;
        catch java.io.IOException from label24 to label26 with label35;
        catch java.io.IOException from label27 to label28 with label35;
        catch java.io.IOException from label29 to label31 with label35;
        catch java.io.IOException from label32 to label33 with label35;
    }

    public boolean isPropertySupported(java.lang.String)
    {
        com.ctc.wstx.sw.BaseStreamWriter r0;
        com.ctc.wstx.api.WriterConfig $r2;
        java.lang.String r1;
        boolean $z0;

        r0 := @this: com.ctc.wstx.sw.BaseStreamWriter;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.ctc.wstx.sw.BaseStreamWriter: com.ctc.wstx.api.WriterConfig mConfig>;

        $z0 = virtualinvoke $r2.<com.ctc.wstx.api.WriterConfig: boolean isPropertySupported(java.lang.String)>(r1);

        return $z0;
    }

    public boolean setProperty(java.lang.String, java.lang.Object)
    {
        com.ctc.wstx.sw.BaseStreamWriter r0;
        com.ctc.wstx.api.WriterConfig $r3;
        java.lang.Object r2;
        java.lang.String r1;
        boolean $z0;

        r0 := @this: com.ctc.wstx.sw.BaseStreamWriter;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

        $r3 = r0.<com.ctc.wstx.sw.BaseStreamWriter: com.ctc.wstx.api.WriterConfig mConfig>;

        $z0 = virtualinvoke $r3.<com.ctc.wstx.api.WriterConfig: boolean setProperty(java.lang.String,java.lang.Object)>(r1, r2);

        return $z0;
    }

    public org.codehaus.stax2.validation.XMLValidator validateAgainst(org.codehaus.stax2.validation.XMLValidationSchema) throws javax.xml.stream.XMLStreamException
    {
        com.ctc.wstx.sw.BaseStreamWriter r1;
        org.codehaus.stax2.validation.ValidatorPair $r4;
        org.codehaus.stax2.validation.XMLValidator $r2, $r3, $r5;
        org.codehaus.stax2.validation.XMLValidationSchema r0;

        r1 := @this: com.ctc.wstx.sw.BaseStreamWriter;

        r0 := @parameter0: org.codehaus.stax2.validation.XMLValidationSchema;

        $r2 = interfaceinvoke r0.<org.codehaus.stax2.validation.XMLValidationSchema: org.codehaus.stax2.validation.XMLValidator createValidator(org.codehaus.stax2.validation.ValidationContext)>(r1);

        $r3 = r1.<com.ctc.wstx.sw.BaseStreamWriter: org.codehaus.stax2.validation.XMLValidator mValidator>;

        if $r3 != null goto label1;

        r1.<com.ctc.wstx.sw.BaseStreamWriter: boolean mCheckStructure> = 1;

        r1.<com.ctc.wstx.sw.BaseStreamWriter: boolean mCheckAttrs> = 1;

        r1.<com.ctc.wstx.sw.BaseStreamWriter: org.codehaus.stax2.validation.XMLValidator mValidator> = $r2;

        goto label2;

     label1:
        $r4 = new org.codehaus.stax2.validation.ValidatorPair;

        $r5 = r1.<com.ctc.wstx.sw.BaseStreamWriter: org.codehaus.stax2.validation.XMLValidator mValidator>;

        specialinvoke $r4.<org.codehaus.stax2.validation.ValidatorPair: void <init>(org.codehaus.stax2.validation.XMLValidator,org.codehaus.stax2.validation.XMLValidator)>($r5, $r2);

        r1.<com.ctc.wstx.sw.BaseStreamWriter: org.codehaus.stax2.validation.XMLValidator mValidator> = $r4;

     label2:
        return $r2;
    }

    public org.codehaus.stax2.validation.XMLValidator stopValidatingAgainst(org.codehaus.stax2.validation.XMLValidationSchema) throws javax.xml.stream.XMLStreamException
    {
        org.codehaus.stax2.validation.XMLValidator[] r0;
        com.ctc.wstx.sw.BaseStreamWriter r1;
        org.codehaus.stax2.validation.XMLValidationSchema r2;
        org.codehaus.stax2.validation.XMLValidator $r3, $r4, $r5, r6;
        boolean $z0;

        r1 := @this: com.ctc.wstx.sw.BaseStreamWriter;

        r2 := @parameter0: org.codehaus.stax2.validation.XMLValidationSchema;

        r0 = newarray (org.codehaus.stax2.validation.XMLValidator)[2];

        r6 = null;

        $r3 = r1.<com.ctc.wstx.sw.BaseStreamWriter: org.codehaus.stax2.validation.XMLValidator mValidator>;

        $z0 = staticinvoke <org.codehaus.stax2.validation.ValidatorPair: boolean removeValidator(org.codehaus.stax2.validation.XMLValidator,org.codehaus.stax2.validation.XMLValidationSchema,org.codehaus.stax2.validation.XMLValidator[])>($r3, r2, r0);

        if $z0 == 0 goto label1;

        r6 = r0[0];

        $r4 = r0[1];

        r1.<com.ctc.wstx.sw.BaseStreamWriter: org.codehaus.stax2.validation.XMLValidator mValidator> = $r4;

        virtualinvoke r6.<org.codehaus.stax2.validation.XMLValidator: void validationCompleted(boolean)>(0);

        $r5 = r1.<com.ctc.wstx.sw.BaseStreamWriter: org.codehaus.stax2.validation.XMLValidator mValidator>;

        if $r5 != null goto label1;

        specialinvoke r1.<com.ctc.wstx.sw.BaseStreamWriter: void resetValidationFlags()>();

     label1:
        return r6;
    }

    public org.codehaus.stax2.validation.XMLValidator stopValidatingAgainst(org.codehaus.stax2.validation.XMLValidator) throws javax.xml.stream.XMLStreamException
    {
        org.codehaus.stax2.validation.XMLValidator[] r0;
        com.ctc.wstx.sw.BaseStreamWriter r1;
        org.codehaus.stax2.validation.XMLValidator r2, $r3, $r4, $r5, r6;
        boolean $z0;

        r1 := @this: com.ctc.wstx.sw.BaseStreamWriter;

        r2 := @parameter0: org.codehaus.stax2.validation.XMLValidator;

        r0 = newarray (org.codehaus.stax2.validation.XMLValidator)[2];

        r6 = null;

        $r3 = r1.<com.ctc.wstx.sw.BaseStreamWriter: org.codehaus.stax2.validation.XMLValidator mValidator>;

        $z0 = staticinvoke <org.codehaus.stax2.validation.ValidatorPair: boolean removeValidator(org.codehaus.stax2.validation.XMLValidator,org.codehaus.stax2.validation.XMLValidator,org.codehaus.stax2.validation.XMLValidator[])>($r3, r2, r0);

        if $z0 == 0 goto label1;

        r6 = r0[0];

        $r4 = r0[1];

        r1.<com.ctc.wstx.sw.BaseStreamWriter: org.codehaus.stax2.validation.XMLValidator mValidator> = $r4;

        virtualinvoke r6.<org.codehaus.stax2.validation.XMLValidator: void validationCompleted(boolean)>(0);

        $r5 = r1.<com.ctc.wstx.sw.BaseStreamWriter: org.codehaus.stax2.validation.XMLValidator mValidator>;

        if $r5 != null goto label1;

        specialinvoke r1.<com.ctc.wstx.sw.BaseStreamWriter: void resetValidationFlags()>();

     label1:
        return r6;
    }

    public org.codehaus.stax2.validation.ValidationProblemHandler setValidationProblemHandler(org.codehaus.stax2.validation.ValidationProblemHandler)
    {
        com.ctc.wstx.sw.BaseStreamWriter r0;
        org.codehaus.stax2.validation.ValidationProblemHandler r1, r2;

        r0 := @this: com.ctc.wstx.sw.BaseStreamWriter;

        r2 := @parameter0: org.codehaus.stax2.validation.ValidationProblemHandler;

        r1 = r0.<com.ctc.wstx.sw.BaseStreamWriter: org.codehaus.stax2.validation.ValidationProblemHandler mVldProbHandler>;

        r0.<com.ctc.wstx.sw.BaseStreamWriter: org.codehaus.stax2.validation.ValidationProblemHandler mVldProbHandler> = r2;

        return r1;
    }

    private void resetValidationFlags()
    {
        com.ctc.wstx.sw.BaseStreamWriter r0;
        com.ctc.wstx.api.WriterConfig $r1;
        int $i0, $i1, $i2;
        boolean $z0, $z1;

        r0 := @this: com.ctc.wstx.sw.BaseStreamWriter;

        $r1 = r0.<com.ctc.wstx.sw.BaseStreamWriter: com.ctc.wstx.api.WriterConfig mConfig>;

        $i0 = virtualinvoke $r1.<com.ctc.wstx.api.WriterConfig: int getConfigFlags()>();

        $i1 = $i0 & 256;

        if $i1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        r0.<com.ctc.wstx.sw.BaseStreamWriter: boolean mCheckStructure> = $z0;

        $i2 = $i0 & 2048;

        if $i2 == 0 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        r0.<com.ctc.wstx.sw.BaseStreamWriter: boolean mCheckAttrs> = $z1;

        return;
    }

    public org.codehaus.stax2.XMLStreamLocation2 getLocation()
    {
        com.ctc.wstx.sw.BaseStreamWriter r1;
        com.ctc.wstx.sw.XmlWriter $r2, $r3, $r4;
        int $i0, $i1, $i2;
        com.ctc.wstx.io.WstxInputLocation $r0;

        r1 := @this: com.ctc.wstx.sw.BaseStreamWriter;

        $r0 = new com.ctc.wstx.io.WstxInputLocation;

        $r2 = r1.<com.ctc.wstx.sw.BaseStreamWriter: com.ctc.wstx.sw.XmlWriter mWriter>;

        $i0 = virtualinvoke $r2.<com.ctc.wstx.sw.XmlWriter: int getAbsOffset()>();

        $r3 = r1.<com.ctc.wstx.sw.BaseStreamWriter: com.ctc.wstx.sw.XmlWriter mWriter>;

        $i1 = virtualinvoke $r3.<com.ctc.wstx.sw.XmlWriter: int getRow()>();

        $r4 = r1.<com.ctc.wstx.sw.BaseStreamWriter: com.ctc.wstx.sw.XmlWriter mWriter>;

        $i2 = virtualinvoke $r4.<com.ctc.wstx.sw.XmlWriter: int getColumn()>();

        specialinvoke $r0.<com.ctc.wstx.io.WstxInputLocation: void <init>(com.ctc.wstx.io.WstxInputLocation,java.lang.String,java.lang.String,int,int,int)>(null, null, null, $i0, $i1, $i2);

        return $r0;
    }

    public java.lang.String getEncoding()
    {
        com.ctc.wstx.sw.BaseStreamWriter r0;
        java.lang.String $r1;

        r0 := @this: com.ctc.wstx.sw.BaseStreamWriter;

        $r1 = r0.<com.ctc.wstx.sw.BaseStreamWriter: java.lang.String mEncoding>;

        return $r1;
    }

    public void writeCData(char[], int, int) throws javax.xml.stream.XMLStreamException
    {
        com.ctc.wstx.sw.BaseStreamWriter r0;
        com.ctc.wstx.sw.XmlWriter $r8;
        java.lang.Integer $r2;
        int $i0, i1, i2, $i3;
        com.ctc.wstx.exc.WstxIOException $r7;
        java.lang.String $r3;
        boolean $z0, $z1, $z2;
        java.io.IOException $r6;
        org.codehaus.stax2.validation.XMLValidator $r4, $r5;
        char[] r1;

        r0 := @this: com.ctc.wstx.sw.BaseStreamWriter;

        r1 := @parameter0: char[];

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        $z0 = r0.<com.ctc.wstx.sw.BaseStreamWriter: boolean mCfgCDataAsText>;

        if $z0 == 0 goto label1;

        virtualinvoke r0.<com.ctc.wstx.sw.BaseStreamWriter: void writeCharacters(char[],int,int)>(r1, i1, i2);

        return;

     label1:
        r0.<com.ctc.wstx.sw.BaseStreamWriter: boolean mAnyOutput> = 1;

        $z1 = r0.<com.ctc.wstx.sw.BaseStreamWriter: boolean mStartElementOpen>;

        if $z1 == 0 goto label2;

        $z2 = r0.<com.ctc.wstx.sw.BaseStreamWriter: boolean mEmptyElement>;

        virtualinvoke r0.<com.ctc.wstx.sw.BaseStreamWriter: void closeStartElement(boolean)>($z2);

     label2:
        virtualinvoke r0.<com.ctc.wstx.sw.BaseStreamWriter: void verifyWriteCData()>();

        $i0 = r0.<com.ctc.wstx.sw.BaseStreamWriter: int mVldContent>;

        if $i0 != 2 goto label3;

        $r4 = r0.<com.ctc.wstx.sw.BaseStreamWriter: org.codehaus.stax2.validation.XMLValidator mValidator>;

        if $r4 == null goto label3;

        $r5 = r0.<com.ctc.wstx.sw.BaseStreamWriter: org.codehaus.stax2.validation.XMLValidator mValidator>;

        virtualinvoke $r5.<org.codehaus.stax2.validation.XMLValidator: void validateText(char[],int,int,boolean)>(r1, i1, i2, 0);

     label3:
        $r8 = r0.<com.ctc.wstx.sw.BaseStreamWriter: com.ctc.wstx.sw.XmlWriter mWriter>;

        $i3 = virtualinvoke $r8.<com.ctc.wstx.sw.XmlWriter: int writeCData(char[],int,int)>(r1, i1, i2);

     label4:
        goto label6;

     label5:
        $r6 := @caughtexception;

        $r7 = new com.ctc.wstx.exc.WstxIOException;

        specialinvoke $r7.<com.ctc.wstx.exc.WstxIOException: void <init>(java.io.IOException)>($r6);

        throw $r7;

     label6:
        if $i3 < 0 goto label7;

        $r3 = <com.ctc.wstx.cfg.ErrorConsts: java.lang.String WERR_CDATA_CONTENT>;

        $r2 = new java.lang.Integer;

        specialinvoke $r2.<java.lang.Integer: void <init>(int)>($i3);

        staticinvoke <com.ctc.wstx.sw.BaseStreamWriter: void throwOutputError(java.lang.String,java.lang.Object)>($r3, $r2);

     label7:
        return;

        catch java.io.IOException from label3 to label4 with label5;
    }

    public void writeDTD(org.codehaus.stax2.DTDInfo) throws javax.xml.stream.XMLStreamException
    {
        com.ctc.wstx.sw.BaseStreamWriter r0;
        org.codehaus.stax2.DTDInfo r1;
        java.lang.String $r2, $r3, $r4, $r5;

        r0 := @this: com.ctc.wstx.sw.BaseStreamWriter;

        r1 := @parameter0: org.codehaus.stax2.DTDInfo;

        $r2 = interfaceinvoke r1.<org.codehaus.stax2.DTDInfo: java.lang.String getDTDRootName()>();

        $r3 = interfaceinvoke r1.<org.codehaus.stax2.DTDInfo: java.lang.String getDTDSystemId()>();

        $r4 = interfaceinvoke r1.<org.codehaus.stax2.DTDInfo: java.lang.String getDTDPublicId()>();

        $r5 = interfaceinvoke r1.<org.codehaus.stax2.DTDInfo: java.lang.String getDTDInternalSubset()>();

        virtualinvoke r0.<com.ctc.wstx.sw.BaseStreamWriter: void writeDTD(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r2, $r3, $r4, $r5);

        return;
    }

    public void writeDTD(java.lang.String, java.lang.String, java.lang.String, java.lang.String) throws javax.xml.stream.XMLStreamException
    {
        com.ctc.wstx.sw.BaseStreamWriter r0;
        com.ctc.wstx.sw.XmlWriter $r5;
        java.io.IOException $r6;
        com.ctc.wstx.exc.WstxIOException $r7;
        java.lang.String r1, r2, r3, r4;

        r0 := @this: com.ctc.wstx.sw.BaseStreamWriter;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String;

        virtualinvoke r0.<com.ctc.wstx.sw.BaseStreamWriter: void verifyWriteDTD()>();

        r0.<com.ctc.wstx.sw.BaseStreamWriter: java.lang.String mDtdRootElem> = r1;

     label1:
        $r5 = r0.<com.ctc.wstx.sw.BaseStreamWriter: com.ctc.wstx.sw.XmlWriter mWriter>;

        virtualinvoke $r5.<com.ctc.wstx.sw.XmlWriter: void writeDTD(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(r1, r2, r3, r4);

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        $r7 = new com.ctc.wstx.exc.WstxIOException;

        specialinvoke $r7.<com.ctc.wstx.exc.WstxIOException: void <init>(java.io.IOException)>($r6);

        throw $r7;

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public abstract void writeFullEndElement() throws javax.xml.stream.XMLStreamException;

    public void writeStartDocument(java.lang.String, java.lang.String, boolean) throws javax.xml.stream.XMLStreamException
    {
        com.ctc.wstx.sw.BaseStreamWriter r0;
        java.lang.String r1, r2, $r3;
        boolean z0;

        r0 := @this: com.ctc.wstx.sw.BaseStreamWriter;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        if z0 == 0 goto label1;

        $r3 = "yes";

        goto label2;

     label1:
        $r3 = "no";

     label2:
        virtualinvoke r0.<com.ctc.wstx.sw.BaseStreamWriter: void doWriteStartDocument(java.lang.String,java.lang.String,java.lang.String)>(r1, r2, $r3);

        return;
    }

    public void writeRaw(java.lang.String) throws javax.xml.stream.XMLStreamException
    {
        com.ctc.wstx.sw.BaseStreamWriter r0;
        com.ctc.wstx.sw.XmlWriter $r2;
        java.io.IOException $r3;
        int $i0;
        com.ctc.wstx.exc.WstxIOException $r4;
        java.lang.String r1;
        boolean $z0, $z1;

        r0 := @this: com.ctc.wstx.sw.BaseStreamWriter;

        r1 := @parameter0: java.lang.String;

        r0.<com.ctc.wstx.sw.BaseStreamWriter: boolean mAnyOutput> = 1;

        $z0 = r0.<com.ctc.wstx.sw.BaseStreamWriter: boolean mStartElementOpen>;

        if $z0 == 0 goto label1;

        $z1 = r0.<com.ctc.wstx.sw.BaseStreamWriter: boolean mEmptyElement>;

        virtualinvoke r0.<com.ctc.wstx.sw.BaseStreamWriter: void closeStartElement(boolean)>($z1);

     label1:
        $r2 = r0.<com.ctc.wstx.sw.BaseStreamWriter: com.ctc.wstx.sw.XmlWriter mWriter>;

        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        virtualinvoke $r2.<com.ctc.wstx.sw.XmlWriter: void writeRaw(java.lang.String,int,int)>(r1, 0, $i0);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        $r4 = new com.ctc.wstx.exc.WstxIOException;

        specialinvoke $r4.<com.ctc.wstx.exc.WstxIOException: void <init>(java.io.IOException)>($r3);

        throw $r4;

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public void writeRaw(java.lang.String, int, int) throws javax.xml.stream.XMLStreamException
    {
        com.ctc.wstx.sw.BaseStreamWriter r0;
        com.ctc.wstx.sw.XmlWriter $r2;
        java.io.IOException $r3;
        int i0, i1;
        com.ctc.wstx.exc.WstxIOException $r4;
        java.lang.String r1;
        boolean $z0, $z1;

        r0 := @this: com.ctc.wstx.sw.BaseStreamWriter;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r0.<com.ctc.wstx.sw.BaseStreamWriter: boolean mAnyOutput> = 1;

        $z0 = r0.<com.ctc.wstx.sw.BaseStreamWriter: boolean mStartElementOpen>;

        if $z0 == 0 goto label1;

        $z1 = r0.<com.ctc.wstx.sw.BaseStreamWriter: boolean mEmptyElement>;

        virtualinvoke r0.<com.ctc.wstx.sw.BaseStreamWriter: void closeStartElement(boolean)>($z1);

     label1:
        $r2 = r0.<com.ctc.wstx.sw.BaseStreamWriter: com.ctc.wstx.sw.XmlWriter mWriter>;

        virtualinvoke $r2.<com.ctc.wstx.sw.XmlWriter: void writeRaw(java.lang.String,int,int)>(r1, i0, i1);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        $r4 = new com.ctc.wstx.exc.WstxIOException;

        specialinvoke $r4.<com.ctc.wstx.exc.WstxIOException: void <init>(java.io.IOException)>($r3);

        throw $r4;

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public void writeRaw(char[], int, int) throws javax.xml.stream.XMLStreamException
    {
        com.ctc.wstx.sw.BaseStreamWriter r0;
        com.ctc.wstx.sw.XmlWriter $r2;
        java.io.IOException $r3;
        int i0, i1;
        com.ctc.wstx.exc.WstxIOException $r4;
        char[] r1;
        boolean $z0, $z1;

        r0 := @this: com.ctc.wstx.sw.BaseStreamWriter;

        r1 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r0.<com.ctc.wstx.sw.BaseStreamWriter: boolean mAnyOutput> = 1;

        $z0 = r0.<com.ctc.wstx.sw.BaseStreamWriter: boolean mStartElementOpen>;

        if $z0 == 0 goto label1;

        $z1 = r0.<com.ctc.wstx.sw.BaseStreamWriter: boolean mEmptyElement>;

        virtualinvoke r0.<com.ctc.wstx.sw.BaseStreamWriter: void closeStartElement(boolean)>($z1);

     label1:
        $r2 = r0.<com.ctc.wstx.sw.BaseStreamWriter: com.ctc.wstx.sw.XmlWriter mWriter>;

        virtualinvoke $r2.<com.ctc.wstx.sw.XmlWriter: void writeRaw(char[],int,int)>(r1, i0, i1);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        $r4 = new com.ctc.wstx.exc.WstxIOException;

        specialinvoke $r4.<com.ctc.wstx.exc.WstxIOException: void <init>(java.io.IOException)>($r3);

        throw $r4;

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public java.lang.String getXmlVersion()
    {
        com.ctc.wstx.sw.BaseStreamWriter r0;
        java.lang.String $r1;
        boolean $z0;

        r0 := @this: com.ctc.wstx.sw.BaseStreamWriter;

        $z0 = r0.<com.ctc.wstx.sw.BaseStreamWriter: boolean mXml11>;

        if $z0 == 0 goto label1;

        $r1 = "1.1";

        goto label2;

     label1:
        $r1 = "1.0";

     label2:
        return $r1;
    }

    public abstract javax.xml.namespace.QName getCurrentElementName();

    public abstract java.lang.String getNamespaceURI(java.lang.String);

    public java.lang.String getBaseUri()
    {
        com.ctc.wstx.sw.BaseStreamWriter r0;

        r0 := @this: com.ctc.wstx.sw.BaseStreamWriter;

        return null;
    }

    public javax.xml.stream.Location getValidationLocation()
    {
        com.ctc.wstx.sw.BaseStreamWriter r0;
        org.codehaus.stax2.XMLStreamLocation2 $r1;

        r0 := @this: com.ctc.wstx.sw.BaseStreamWriter;

        $r1 = virtualinvoke r0.<com.ctc.wstx.sw.BaseStreamWriter: org.codehaus.stax2.XMLStreamLocation2 getLocation()>();

        return $r1;
    }

    public void reportProblem(org.codehaus.stax2.validation.XMLValidationProblem) throws org.codehaus.stax2.validation.XMLValidationException
    {
        com.ctc.wstx.sw.BaseStreamWriter r0;
        org.codehaus.stax2.validation.XMLValidationProblem r2;
        com.ctc.wstx.api.WriterConfig $r3;
        org.codehaus.stax2.validation.ValidationProblemHandler $r1, $r9;
        javax.xml.stream.Location $r7;
        int $i0;
        com.ctc.wstx.exc.WstxValidationException $r8;
        java.lang.String $r5, $r6;
        javax.xml.stream.XMLReporter $r4;
        boolean $z0;

        r0 := @this: com.ctc.wstx.sw.BaseStreamWriter;

        r2 := @parameter0: org.codehaus.stax2.validation.XMLValidationProblem;

        $r1 = r0.<com.ctc.wstx.sw.BaseStreamWriter: org.codehaus.stax2.validation.ValidationProblemHandler mVldProbHandler>;

        if $r1 == null goto label1;

        $r9 = r0.<com.ctc.wstx.sw.BaseStreamWriter: org.codehaus.stax2.validation.ValidationProblemHandler mVldProbHandler>;

        interfaceinvoke $r9.<org.codehaus.stax2.validation.ValidationProblemHandler: void reportProblem(org.codehaus.stax2.validation.XMLValidationProblem)>(r2);

        return;

     label1:
        $i0 = virtualinvoke r2.<org.codehaus.stax2.validation.XMLValidationProblem: int getSeverity()>();

        if $i0 < 2 goto label2;

        $z0 = virtualinvoke r0.<com.ctc.wstx.sw.BaseStreamWriter: boolean isValidating()>();

        if $z0 == 0 goto label2;

        $r8 = staticinvoke <com.ctc.wstx.exc.WstxValidationException: com.ctc.wstx.exc.WstxValidationException create(org.codehaus.stax2.validation.XMLValidationProblem)>(r2);

        throw $r8;

     label2:
        $r3 = r0.<com.ctc.wstx.sw.BaseStreamWriter: com.ctc.wstx.api.WriterConfig mConfig>;

        $r4 = virtualinvoke $r3.<com.ctc.wstx.api.WriterConfig: javax.xml.stream.XMLReporter getProblemReporter()>();

        if $r4 == null goto label3;

        $r5 = <com.ctc.wstx.cfg.ErrorConsts: java.lang.String WT_VALIDATION>;

        $r6 = virtualinvoke r2.<org.codehaus.stax2.validation.XMLValidationProblem: java.lang.String getMessage()>();

        $r7 = virtualinvoke r2.<org.codehaus.stax2.validation.XMLValidationProblem: javax.xml.stream.Location getLocation()>();

        virtualinvoke r0.<com.ctc.wstx.sw.BaseStreamWriter: void doReportProblem(javax.xml.stream.XMLReporter,java.lang.String,java.lang.String,javax.xml.stream.Location)>($r4, $r5, $r6, $r7);

     label3:
        return;
    }

    public int addDefaultAttribute(java.lang.String, java.lang.String, java.lang.String, java.lang.String)
    {
        com.ctc.wstx.sw.BaseStreamWriter r0;
        int $i1;
        java.lang.String r1, r2, r3, r4;

        r0 := @this: com.ctc.wstx.sw.BaseStreamWriter;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String;

        $i1 = (int) -1;

        return $i1;
    }

    public boolean isNotationDeclared(java.lang.String)
    {
        com.ctc.wstx.sw.BaseStreamWriter r0;
        java.lang.String r1;

        r0 := @this: com.ctc.wstx.sw.BaseStreamWriter;

        r1 := @parameter0: java.lang.String;

        return 0;
    }

    public boolean isUnparsedEntityDeclared(java.lang.String)
    {
        com.ctc.wstx.sw.BaseStreamWriter r0;
        java.lang.String r1;

        r0 := @this: com.ctc.wstx.sw.BaseStreamWriter;

        r1 := @parameter0: java.lang.String;

        return 0;
    }

    public int getAttributeCount()
    {
        com.ctc.wstx.sw.BaseStreamWriter r0;

        r0 := @this: com.ctc.wstx.sw.BaseStreamWriter;

        return 0;
    }

    public java.lang.String getAttributeLocalName(int)
    {
        com.ctc.wstx.sw.BaseStreamWriter r0;
        int i0;

        r0 := @this: com.ctc.wstx.sw.BaseStreamWriter;

        i0 := @parameter0: int;

        return null;
    }

    public java.lang.String getAttributeNamespace(int)
    {
        com.ctc.wstx.sw.BaseStreamWriter r0;
        int i0;

        r0 := @this: com.ctc.wstx.sw.BaseStreamWriter;

        i0 := @parameter0: int;

        return null;
    }

    public java.lang.String getAttributePrefix(int)
    {
        com.ctc.wstx.sw.BaseStreamWriter r0;
        int i0;

        r0 := @this: com.ctc.wstx.sw.BaseStreamWriter;

        i0 := @parameter0: int;

        return null;
    }

    public java.lang.String getAttributeValue(int)
    {
        com.ctc.wstx.sw.BaseStreamWriter r0;
        int i0;

        r0 := @this: com.ctc.wstx.sw.BaseStreamWriter;

        i0 := @parameter0: int;

        return null;
    }

    public java.lang.String getAttributeValue(java.lang.String, java.lang.String)
    {
        com.ctc.wstx.sw.BaseStreamWriter r0;
        java.lang.String r1, r2;

        r0 := @this: com.ctc.wstx.sw.BaseStreamWriter;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        return null;
    }

    public int findAttributeIndex(java.lang.String, java.lang.String)
    {
        com.ctc.wstx.sw.BaseStreamWriter r0;
        int $i1;
        java.lang.String r1, r2;

        r0 := @this: com.ctc.wstx.sw.BaseStreamWriter;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $i1 = (int) -1;

        return $i1;
    }

    public final java.io.Writer wrapAsRawWriter()
    {
        com.ctc.wstx.sw.BaseStreamWriter r0;
        com.ctc.wstx.sw.XmlWriter $r1;
        java.io.Writer $r2;

        r0 := @this: com.ctc.wstx.sw.BaseStreamWriter;

        $r1 = r0.<com.ctc.wstx.sw.BaseStreamWriter: com.ctc.wstx.sw.XmlWriter mWriter>;

        $r2 = virtualinvoke $r1.<com.ctc.wstx.sw.XmlWriter: java.io.Writer wrapAsRawWriter()>();

        return $r2;
    }

    public final java.io.Writer wrapAsTextWriter()
    {
        com.ctc.wstx.sw.BaseStreamWriter r0;
        com.ctc.wstx.sw.XmlWriter $r1;
        java.io.Writer $r2;

        r0 := @this: com.ctc.wstx.sw.BaseStreamWriter;

        $r1 = r0.<com.ctc.wstx.sw.BaseStreamWriter: com.ctc.wstx.sw.XmlWriter mWriter>;

        $r2 = virtualinvoke $r1.<com.ctc.wstx.sw.XmlWriter: java.io.Writer wrapAsTextWriter()>();

        return $r2;
    }

    protected boolean isValidating()
    {
        com.ctc.wstx.sw.BaseStreamWriter r0;
        org.codehaus.stax2.validation.XMLValidator $r1;
        boolean $z0;

        r0 := @this: com.ctc.wstx.sw.BaseStreamWriter;

        $r1 = r0.<com.ctc.wstx.sw.BaseStreamWriter: org.codehaus.stax2.validation.XMLValidator mValidator>;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public abstract void writeStartElement(javax.xml.stream.events.StartElement) throws javax.xml.stream.XMLStreamException;

    public abstract void writeEndElement(javax.xml.namespace.QName) throws javax.xml.stream.XMLStreamException;

    public void writeCharacters(javax.xml.stream.events.Characters) throws javax.xml.stream.XMLStreamException
    {
        com.ctc.wstx.sw.BaseStreamWriter r0;
        com.ctc.wstx.sw.XmlWriter $r8;
        int $i0, $i1, $i2;
        com.ctc.wstx.exc.WstxIOException $r7;
        java.lang.String $r4, $r5, $r9;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        java.io.IOException $r6;
        org.codehaus.stax2.validation.XMLValidator $r2, $r3;
        javax.xml.stream.events.Characters r1;

        r0 := @this: com.ctc.wstx.sw.BaseStreamWriter;

        r1 := @parameter0: javax.xml.stream.events.Characters;

        $z0 = r0.<com.ctc.wstx.sw.BaseStreamWriter: boolean mStartElementOpen>;

        if $z0 == 0 goto label1;

        $z7 = r0.<com.ctc.wstx.sw.BaseStreamWriter: boolean mEmptyElement>;

        virtualinvoke r0.<com.ctc.wstx.sw.BaseStreamWriter: void closeStartElement(boolean)>($z7);

     label1:
        $z1 = r0.<com.ctc.wstx.sw.BaseStreamWriter: boolean mCheckStructure>;

        if $z1 == 0 goto label2;

        $z4 = virtualinvoke r0.<com.ctc.wstx.sw.BaseStreamWriter: boolean inPrologOrEpilog()>();

        if $z4 == 0 goto label2;

        $z5 = interfaceinvoke r1.<javax.xml.stream.events.Characters: boolean isIgnorableWhiteSpace()>();

        if $z5 != 0 goto label2;

        $z6 = interfaceinvoke r1.<javax.xml.stream.events.Characters: boolean isWhiteSpace()>();

        if $z6 != 0 goto label2;

        $r5 = <com.ctc.wstx.cfg.ErrorConsts: java.lang.String WERR_PROLOG_NONWS_TEXT>;

        staticinvoke <com.ctc.wstx.sw.BaseStreamWriter: void reportNwfStructure(java.lang.String)>($r5);

     label2:
        $i2 = r0.<com.ctc.wstx.sw.BaseStreamWriter: int mVldContent>;

        if $i2 > 1 goto label4;

        $i1 = r0.<com.ctc.wstx.sw.BaseStreamWriter: int mVldContent>;

        if $i1 != 0 goto label3;

        virtualinvoke r0.<com.ctc.wstx.sw.BaseStreamWriter: void reportInvalidContent(int)>(4);

        goto label5;

     label3:
        $z2 = interfaceinvoke r1.<javax.xml.stream.events.Characters: boolean isIgnorableWhiteSpace()>();

        if $z2 != 0 goto label5;

        $z3 = interfaceinvoke r1.<javax.xml.stream.events.Characters: boolean isWhiteSpace()>();

        if $z3 != 0 goto label5;

        virtualinvoke r0.<com.ctc.wstx.sw.BaseStreamWriter: void reportInvalidContent(int)>(4);

        goto label5;

     label4:
        $i0 = r0.<com.ctc.wstx.sw.BaseStreamWriter: int mVldContent>;

        if $i0 != 2 goto label5;

        $r2 = r0.<com.ctc.wstx.sw.BaseStreamWriter: org.codehaus.stax2.validation.XMLValidator mValidator>;

        if $r2 == null goto label5;

        $r3 = r0.<com.ctc.wstx.sw.BaseStreamWriter: org.codehaus.stax2.validation.XMLValidator mValidator>;

        $r4 = interfaceinvoke r1.<javax.xml.stream.events.Characters: java.lang.String getData()>();

        virtualinvoke $r3.<org.codehaus.stax2.validation.XMLValidator: void validateText(java.lang.String,boolean)>($r4, 0);

     label5:
        $r8 = r0.<com.ctc.wstx.sw.BaseStreamWriter: com.ctc.wstx.sw.XmlWriter mWriter>;

        $r9 = interfaceinvoke r1.<javax.xml.stream.events.Characters: java.lang.String getData()>();

        virtualinvoke $r8.<com.ctc.wstx.sw.XmlWriter: void writeCharacters(java.lang.String)>($r9);

     label6:
        goto label8;

     label7:
        $r6 := @caughtexception;

        $r7 = new com.ctc.wstx.exc.WstxIOException;

        specialinvoke $r7.<com.ctc.wstx.exc.WstxIOException: void <init>(java.io.IOException)>($r6);

        throw $r7;

     label8:
        return;

        catch java.io.IOException from label5 to label6 with label7;
    }

    protected abstract void closeStartElement(boolean) throws javax.xml.stream.XMLStreamException;

    protected final boolean inPrologOrEpilog()
    {
        com.ctc.wstx.sw.BaseStreamWriter r0;
        int $i0;
        boolean $z0;

        r0 := @this: com.ctc.wstx.sw.BaseStreamWriter;

        $i0 = r0.<com.ctc.wstx.sw.BaseStreamWriter: int mState>;

        if $i0 == 2 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public abstract void copyStartElement(com.ctc.wstx.sr.InputElementStack, com.ctc.wstx.sr.AttributeCollector) throws java.io.IOException, javax.xml.stream.XMLStreamException;

    protected final void verifyWriteCData() throws javax.xml.stream.XMLStreamException
    {
        com.ctc.wstx.sw.BaseStreamWriter r0;
        int $i0;
        java.lang.String $r1;
        boolean $z0, $z1;

        r0 := @this: com.ctc.wstx.sw.BaseStreamWriter;

        $z0 = r0.<com.ctc.wstx.sw.BaseStreamWriter: boolean mCheckStructure>;

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke r0.<com.ctc.wstx.sw.BaseStreamWriter: boolean inPrologOrEpilog()>();

        if $z1 == 0 goto label1;

        $r1 = <com.ctc.wstx.cfg.ErrorConsts: java.lang.String WERR_PROLOG_CDATA>;

        staticinvoke <com.ctc.wstx.sw.BaseStreamWriter: void reportNwfStructure(java.lang.String)>($r1);

     label1:
        $i0 = r0.<com.ctc.wstx.sw.BaseStreamWriter: int mVldContent>;

        if $i0 > 1 goto label2;

        virtualinvoke r0.<com.ctc.wstx.sw.BaseStreamWriter: void reportInvalidContent(int)>(12);

     label2:
        return;
    }

    protected final void verifyWriteDTD() throws javax.xml.stream.XMLStreamException
    {
        com.ctc.wstx.sw.BaseStreamWriter r0;
        java.lang.StringBuffer $r4, $r5, $r6, $r7;
        javax.xml.stream.XMLStreamException $r2, $r3;
        int $i0, $i1;
        java.lang.String $r1, $r8;
        boolean $z0;

        r0 := @this: com.ctc.wstx.sw.BaseStreamWriter;

        $z0 = r0.<com.ctc.wstx.sw.BaseStreamWriter: boolean mCheckStructure>;

        if $z0 == 0 goto label2;

        $i0 = r0.<com.ctc.wstx.sw.BaseStreamWriter: int mState>;

        if $i0 == 1 goto label1;

        $r3 = new javax.xml.stream.XMLStreamException;

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Can not write DOCTYPE declaration (DTD) when not in prolog any more (state ");

        $i1 = r0.<com.ctc.wstx.sw.BaseStreamWriter: int mState>;

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("; start element(s) written)");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r3.<javax.xml.stream.XMLStreamException: void <init>(java.lang.String)>($r8);

        throw $r3;

     label1:
        $r1 = r0.<com.ctc.wstx.sw.BaseStreamWriter: java.lang.String mDtdRootElem>;

        if $r1 == null goto label2;

        $r2 = new javax.xml.stream.XMLStreamException;

        specialinvoke $r2.<javax.xml.stream.XMLStreamException: void <init>(java.lang.String)>("Trying to write multiple DOCTYPE declarations");

        throw $r2;

     label2:
        return;
    }

    protected void verifyRootElement(java.lang.String, java.lang.String) throws org.codehaus.stax2.validation.XMLValidationException
    {
        com.ctc.wstx.sw.BaseStreamWriter r0;
        java.lang.StringBuffer $r8, $r9, $r10, $r14, $r15, $r19, $r20;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i7;
        java.lang.String $r1, $r2, r3, $r4, $r5, r6, $r11, $r12, $r16, $r17, r18;
        boolean $z0, $z1, $z2;
        char $c6;

        r0 := @this: com.ctc.wstx.sw.BaseStreamWriter;

        r3 := @parameter0: java.lang.String;

        r6 := @parameter1: java.lang.String;

        $z0 = virtualinvoke r0.<com.ctc.wstx.sw.BaseStreamWriter: boolean isValidating()>();

        if $z0 == 0 goto label6;

        $r1 = r0.<com.ctc.wstx.sw.BaseStreamWriter: java.lang.String mDtdRootElem>;

        if $r1 == null goto label6;

        $r2 = r0.<com.ctc.wstx.sw.BaseStreamWriter: java.lang.String mDtdRootElem>;

        $i0 = virtualinvoke $r2.<java.lang.String: int length()>();

        if $i0 <= 0 goto label6;

        r18 = null;

        $r4 = r0.<com.ctc.wstx.sw.BaseStreamWriter: java.lang.String mDtdRootElem>;

        $z1 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z1 == 0 goto label1;

        goto label5;

     label1:
        $i1 = virtualinvoke r3.<java.lang.String: int length()>();

        $r5 = r0.<com.ctc.wstx.sw.BaseStreamWriter: java.lang.String mDtdRootElem>;

        $i2 = virtualinvoke $r5.<java.lang.String: int length()>();

        if $i2 <= $i1 goto label2;

        $r16 = r0.<com.ctc.wstx.sw.BaseStreamWriter: java.lang.String mDtdRootElem>;

        $z2 = virtualinvoke $r16.<java.lang.String: boolean endsWith(java.lang.String)>(r3);

        if $z2 == 0 goto label2;

        $r17 = r0.<com.ctc.wstx.sw.BaseStreamWriter: java.lang.String mDtdRootElem>;

        $i4 = $i2 - $i1;

        $i5 = $i4 - 1;

        $c6 = virtualinvoke $r17.<java.lang.String: char charAt(int)>($i5);

        $i7 = (int) $c6;

        if $i7 != 58 goto label2;

        goto label5;

     label2:
        if r6 != null goto label3;

        r18 = r3;

        goto label5;

     label3:
        $i3 = virtualinvoke r6.<java.lang.String: int length()>();

        if $i3 != 0 goto label4;

        $r19 = new java.lang.StringBuffer;

        specialinvoke $r19.<java.lang.StringBuffer: void <init>()>();

        $r14 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[unknown]:");

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r3);

        r18 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.String toString()>();

        goto label5;

     label4:
        $r20 = new java.lang.StringBuffer;

        specialinvoke $r20.<java.lang.StringBuffer: void <init>()>();

        $r8 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r6);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(":");

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r3);

        r18 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

     label5:
        if r18 == null goto label6;

        $r12 = <com.ctc.wstx.cfg.ErrorConsts: java.lang.String ERR_VLD_WRONG_ROOT>;

        $r11 = r0.<com.ctc.wstx.sw.BaseStreamWriter: java.lang.String mDtdRootElem>;

        virtualinvoke r0.<com.ctc.wstx.sw.BaseStreamWriter: void reportValidationProblem(java.lang.String,java.lang.Object,java.lang.Object)>($r12, r18, $r11);

     label6:
        r0.<com.ctc.wstx.sw.BaseStreamWriter: int mState> = 2;

        return;
    }

    protected static void throwOutputError(java.lang.String) throws javax.xml.stream.XMLStreamException
    {
        java.lang.String r1;
        javax.xml.stream.XMLStreamException $r0;

        r1 := @parameter0: java.lang.String;

        $r0 = new javax.xml.stream.XMLStreamException;

        specialinvoke $r0.<javax.xml.stream.XMLStreamException: void <init>(java.lang.String)>(r1);

        throw $r0;
    }

    protected static void throwOutputError(java.lang.String, java.lang.Object) throws javax.xml.stream.XMLStreamException
    {
        java.lang.Object[] $r1;
        java.lang.Object r2;
        java.lang.String r0, $r3;

        r0 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

        $r1 = newarray (java.lang.Object)[1];

        $r1[0] = r2;

        $r3 = staticinvoke <java.text.MessageFormat: java.lang.String format(java.lang.String,java.lang.Object[])>(r0, $r1);

        staticinvoke <com.ctc.wstx.sw.BaseStreamWriter: void throwOutputError(java.lang.String)>($r3);

        return;
    }

    protected static void reportIllegalMethod(java.lang.String) throws javax.xml.stream.XMLStreamException
    {
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        staticinvoke <com.ctc.wstx.sw.BaseStreamWriter: void throwOutputError(java.lang.String)>(r0);

        return;
    }

    protected static void reportNwfStructure(java.lang.String) throws javax.xml.stream.XMLStreamException
    {
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        staticinvoke <com.ctc.wstx.sw.BaseStreamWriter: void throwOutputError(java.lang.String)>(r0);

        return;
    }

    protected static void reportNwfStructure(java.lang.String, java.lang.Object) throws javax.xml.stream.XMLStreamException
    {
        java.lang.Object r1;
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.Object;

        staticinvoke <com.ctc.wstx.sw.BaseStreamWriter: void throwOutputError(java.lang.String,java.lang.Object)>(r0, r1);

        return;
    }

    protected static void reportNwfContent(java.lang.String) throws javax.xml.stream.XMLStreamException
    {
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        staticinvoke <com.ctc.wstx.sw.BaseStreamWriter: void throwOutputError(java.lang.String)>(r0);

        return;
    }

    protected static void reportNwfContent(java.lang.String, java.lang.Object) throws javax.xml.stream.XMLStreamException
    {
        java.lang.Object r1;
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.Object;

        staticinvoke <com.ctc.wstx.sw.BaseStreamWriter: void throwOutputError(java.lang.String,java.lang.Object)>(r0, r1);

        return;
    }

    protected static void reportNwfAttr(java.lang.String) throws javax.xml.stream.XMLStreamException
    {
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        staticinvoke <com.ctc.wstx.sw.BaseStreamWriter: void throwOutputError(java.lang.String)>(r0);

        return;
    }

    protected static void reportNwfAttr(java.lang.String, java.lang.Object) throws javax.xml.stream.XMLStreamException
    {
        java.lang.Object r1;
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.Object;

        staticinvoke <com.ctc.wstx.sw.BaseStreamWriter: void throwOutputError(java.lang.String,java.lang.Object)>(r0, r1);

        return;
    }

    protected static void throwFromIOE(java.io.IOException) throws javax.xml.stream.XMLStreamException
    {
        com.ctc.wstx.exc.WstxIOException $r0;
        java.io.IOException r1;

        r1 := @parameter0: java.io.IOException;

        $r0 = new com.ctc.wstx.exc.WstxIOException;

        specialinvoke $r0.<com.ctc.wstx.exc.WstxIOException: void <init>(java.io.IOException)>(r1);

        throw $r0;
    }

    protected static void reportIllegalArg(java.lang.String) throws java.lang.IllegalArgumentException
    {
        java.lang.String r1;
        java.lang.IllegalArgumentException $r0;

        r1 := @parameter0: java.lang.String;

        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(r1);

        throw $r0;
    }

    protected void reportInvalidContent(int) throws javax.xml.stream.XMLStreamException
    {
        com.ctc.wstx.sw.BaseStreamWriter r0;
        java.lang.StringBuffer $r9, $r10, $r11;
        int $i0, i1;
        java.lang.String $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r12;

        r0 := @this: com.ctc.wstx.sw.BaseStreamWriter;

        i1 := @parameter0: int;

        $i0 = r0.<com.ctc.wstx.sw.BaseStreamWriter: int mVldContent>;

        tableswitch($i0)
        {
            case 0: goto label1;
            case 1: goto label2;
            case 2: goto label3;
            case 3: goto label3;
            default: goto label4;
        };

     label1:
        $r6 = <com.ctc.wstx.cfg.ErrorConsts: java.lang.String ERR_VLD_EMPTY>;

        $r7 = virtualinvoke r0.<com.ctc.wstx.sw.BaseStreamWriter: java.lang.String getTopElementDesc()>();

        $r8 = staticinvoke <com.ctc.wstx.cfg.ErrorConsts: java.lang.String tokenTypeDesc(int)>(i1);

        virtualinvoke r0.<com.ctc.wstx.sw.BaseStreamWriter: void reportValidationProblem(java.lang.String,java.lang.Object,java.lang.Object)>($r6, $r7, $r8);

        goto label5;

     label2:
        $r4 = <com.ctc.wstx.cfg.ErrorConsts: java.lang.String ERR_VLD_NON_MIXED>;

        $r5 = virtualinvoke r0.<com.ctc.wstx.sw.BaseStreamWriter: java.lang.String getTopElementDesc()>();

        virtualinvoke r0.<com.ctc.wstx.sw.BaseStreamWriter: void reportValidationProblem(java.lang.String,java.lang.Object)>($r4, $r5);

        goto label5;

     label3:
        $r1 = <com.ctc.wstx.cfg.ErrorConsts: java.lang.String ERR_VLD_ANY>;

        $r2 = virtualinvoke r0.<com.ctc.wstx.sw.BaseStreamWriter: java.lang.String getTopElementDesc()>();

        $r3 = staticinvoke <com.ctc.wstx.cfg.ErrorConsts: java.lang.String tokenTypeDesc(int)>(i1);

        virtualinvoke r0.<com.ctc.wstx.sw.BaseStreamWriter: void reportValidationProblem(java.lang.String,java.lang.Object,java.lang.Object)>($r1, $r2, $r3);

        goto label5;

     label4:
        $r9 = new java.lang.StringBuffer;

        specialinvoke $r9.<java.lang.StringBuffer: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Internal error: trying to report invalid content for ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i1);

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<com.ctc.wstx.sw.BaseStreamWriter: void reportValidationProblem(java.lang.String)>($r12);

     label5:
        return;
    }

    public void reportValidationProblem(java.lang.String, javax.xml.stream.Location, int) throws org.codehaus.stax2.validation.XMLValidationException
    {
        com.ctc.wstx.sw.BaseStreamWriter r0;
        org.codehaus.stax2.validation.XMLValidationProblem $r1;
        javax.xml.stream.Location r2;
        int i0;
        java.lang.String r3;

        r0 := @this: com.ctc.wstx.sw.BaseStreamWriter;

        r3 := @parameter0: java.lang.String;

        r2 := @parameter1: javax.xml.stream.Location;

        i0 := @parameter2: int;

        $r1 = new org.codehaus.stax2.validation.XMLValidationProblem;

        specialinvoke $r1.<org.codehaus.stax2.validation.XMLValidationProblem: void <init>(javax.xml.stream.Location,java.lang.String,int)>(r2, r3, i0);

        virtualinvoke r0.<com.ctc.wstx.sw.BaseStreamWriter: void reportProblem(org.codehaus.stax2.validation.XMLValidationProblem)>($r1);

        return;
    }

    public void reportValidationProblem(java.lang.String, int) throws org.codehaus.stax2.validation.XMLValidationException
    {
        com.ctc.wstx.sw.BaseStreamWriter r0;
        org.codehaus.stax2.validation.XMLValidationProblem $r1;
        javax.xml.stream.Location $r2;
        int i0;
        java.lang.String r3;

        r0 := @this: com.ctc.wstx.sw.BaseStreamWriter;

        r3 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r1 = new org.codehaus.stax2.validation.XMLValidationProblem;

        $r2 = virtualinvoke r0.<com.ctc.wstx.sw.BaseStreamWriter: javax.xml.stream.Location getValidationLocation()>();

        specialinvoke $r1.<org.codehaus.stax2.validation.XMLValidationProblem: void <init>(javax.xml.stream.Location,java.lang.String,int)>($r2, r3, i0);

        virtualinvoke r0.<com.ctc.wstx.sw.BaseStreamWriter: void reportProblem(org.codehaus.stax2.validation.XMLValidationProblem)>($r1);

        return;
    }

    public void reportValidationProblem(java.lang.String) throws org.codehaus.stax2.validation.XMLValidationException
    {
        com.ctc.wstx.sw.BaseStreamWriter r0;
        org.codehaus.stax2.validation.XMLValidationProblem $r1;
        javax.xml.stream.Location $r2;
        java.lang.String r3;

        r0 := @this: com.ctc.wstx.sw.BaseStreamWriter;

        r3 := @parameter0: java.lang.String;

        $r1 = new org.codehaus.stax2.validation.XMLValidationProblem;

        $r2 = virtualinvoke r0.<com.ctc.wstx.sw.BaseStreamWriter: javax.xml.stream.Location getValidationLocation()>();

        specialinvoke $r1.<org.codehaus.stax2.validation.XMLValidationProblem: void <init>(javax.xml.stream.Location,java.lang.String,int)>($r2, r3, 2);

        virtualinvoke r0.<com.ctc.wstx.sw.BaseStreamWriter: void reportProblem(org.codehaus.stax2.validation.XMLValidationProblem)>($r1);

        return;
    }

    public void reportValidationProblem(javax.xml.stream.Location, java.lang.String) throws org.codehaus.stax2.validation.XMLValidationException
    {
        com.ctc.wstx.sw.BaseStreamWriter r0;
        org.codehaus.stax2.validation.XMLValidationProblem $r1;
        javax.xml.stream.Location $r2, r4;
        java.lang.String r3;

        r0 := @this: com.ctc.wstx.sw.BaseStreamWriter;

        r4 := @parameter0: javax.xml.stream.Location;

        r3 := @parameter1: java.lang.String;

        $r1 = new org.codehaus.stax2.validation.XMLValidationProblem;

        $r2 = virtualinvoke r0.<com.ctc.wstx.sw.BaseStreamWriter: javax.xml.stream.Location getValidationLocation()>();

        specialinvoke $r1.<org.codehaus.stax2.validation.XMLValidationProblem: void <init>(javax.xml.stream.Location,java.lang.String)>($r2, r3);

        virtualinvoke r0.<com.ctc.wstx.sw.BaseStreamWriter: void reportProblem(org.codehaus.stax2.validation.XMLValidationProblem)>($r1);

        return;
    }

    public void reportValidationProblem(java.lang.String, java.lang.Object) throws org.codehaus.stax2.validation.XMLValidationException
    {
        com.ctc.wstx.sw.BaseStreamWriter r4;
        org.codehaus.stax2.validation.XMLValidationProblem $r5;
        java.lang.Object[] $r1;
        javax.xml.stream.Location $r6;
        java.lang.Object r2;
        java.lang.String r0, $r3;

        r4 := @this: com.ctc.wstx.sw.BaseStreamWriter;

        r0 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

        $r1 = newarray (java.lang.Object)[1];

        $r1[0] = r2;

        $r3 = staticinvoke <java.text.MessageFormat: java.lang.String format(java.lang.String,java.lang.Object[])>(r0, $r1);

        $r5 = new org.codehaus.stax2.validation.XMLValidationProblem;

        $r6 = virtualinvoke r4.<com.ctc.wstx.sw.BaseStreamWriter: javax.xml.stream.Location getValidationLocation()>();

        specialinvoke $r5.<org.codehaus.stax2.validation.XMLValidationProblem: void <init>(javax.xml.stream.Location,java.lang.String)>($r6, $r3);

        virtualinvoke r4.<com.ctc.wstx.sw.BaseStreamWriter: void reportProblem(org.codehaus.stax2.validation.XMLValidationProblem)>($r5);

        return;
    }

    public void reportValidationProblem(java.lang.String, java.lang.Object, java.lang.Object) throws org.codehaus.stax2.validation.XMLValidationException
    {
        com.ctc.wstx.sw.BaseStreamWriter r5;
        org.codehaus.stax2.validation.XMLValidationProblem $r6;
        java.lang.Object[] $r1;
        javax.xml.stream.Location $r7;
        java.lang.Object r2, r3;
        java.lang.String r0, $r4;

        r5 := @this: com.ctc.wstx.sw.BaseStreamWriter;

        r0 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        $r1 = newarray (java.lang.Object)[2];

        $r1[0] = r2;

        $r1[1] = r3;

        $r4 = staticinvoke <java.text.MessageFormat: java.lang.String format(java.lang.String,java.lang.Object[])>(r0, $r1);

        $r6 = new org.codehaus.stax2.validation.XMLValidationProblem;

        $r7 = virtualinvoke r5.<com.ctc.wstx.sw.BaseStreamWriter: javax.xml.stream.Location getValidationLocation()>();

        specialinvoke $r6.<org.codehaus.stax2.validation.XMLValidationProblem: void <init>(javax.xml.stream.Location,java.lang.String)>($r7, $r4);

        virtualinvoke r5.<com.ctc.wstx.sw.BaseStreamWriter: void reportProblem(org.codehaus.stax2.validation.XMLValidationProblem)>($r6);

        return;
    }

    protected final void doReportProblem(javax.xml.stream.XMLReporter, java.lang.String, java.lang.String, javax.xml.stream.Location)
    {
        java.io.PrintStream $r6;
        com.ctc.wstx.sw.BaseStreamWriter r10;
        java.lang.StringBuffer $r5, $r7, $r8;
        javax.xml.stream.Location r3;
        javax.xml.stream.XMLStreamException $r4;
        java.lang.String r1, r2, $r9;
        javax.xml.stream.XMLReporter r0;

        r10 := @this: com.ctc.wstx.sw.BaseStreamWriter;

        r0 := @parameter0: javax.xml.stream.XMLReporter;

        r2 := @parameter1: java.lang.String;

        r1 := @parameter2: java.lang.String;

        r3 := @parameter3: javax.xml.stream.Location;

        if r0 == null goto label4;

     label1:
        interfaceinvoke r0.<javax.xml.stream.XMLReporter: void report(java.lang.String,java.lang.String,java.lang.Object,javax.xml.stream.Location)>(r1, r2, null, r3);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        $r6 = <java.lang.System: java.io.PrintStream err>;

        $r5 = new java.lang.StringBuffer;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Problem reporting a problem: ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r4);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r6.<java.io.PrintStream: void println(java.lang.String)>($r9);

     label4:
        return;

        catch javax.xml.stream.XMLStreamException from label1 to label2 with label3;
    }

    protected abstract java.lang.String getTopElementDesc();

    private final void finishDocument() throws javax.xml.stream.XMLStreamException
    {
        com.ctc.wstx.sw.BaseStreamWriter r0;
        com.ctc.wstx.sw.XmlWriter $r1;
        java.io.IOException $r4;
        com.ctc.wstx.api.WriterConfig $r2;
        int $i0, $i1, $i2;
        com.ctc.wstx.exc.WstxIOException $r5;
        char[] $r3;
        boolean $z0, $z1, $z2;

        r0 := @this: com.ctc.wstx.sw.BaseStreamWriter;

        $i0 = r0.<com.ctc.wstx.sw.BaseStreamWriter: int mState>;

        if $i0 == 3 goto label3;

        $z0 = r0.<com.ctc.wstx.sw.BaseStreamWriter: boolean mCheckStructure>;

        if $z0 == 0 goto label1;

        $i1 = r0.<com.ctc.wstx.sw.BaseStreamWriter: int mState>;

        if $i1 != 1 goto label1;

        staticinvoke <com.ctc.wstx.sw.BaseStreamWriter: void reportNwfStructure(java.lang.String)>("Trying to write END_DOCUMENT when document has no root (ie. trying to output empty document).");

     label1:
        $z2 = r0.<com.ctc.wstx.sw.BaseStreamWriter: boolean mStartElementOpen>;

        if $z2 == 0 goto label2;

        $z1 = r0.<com.ctc.wstx.sw.BaseStreamWriter: boolean mEmptyElement>;

        virtualinvoke r0.<com.ctc.wstx.sw.BaseStreamWriter: void closeStartElement(boolean)>($z1);

     label2:
        $i2 = r0.<com.ctc.wstx.sw.BaseStreamWriter: int mState>;

        if $i2 == 3 goto label3;

        virtualinvoke r0.<com.ctc.wstx.sw.BaseStreamWriter: void writeEndElement()>();

        goto label2;

     label3:
        $r3 = r0.<com.ctc.wstx.sw.BaseStreamWriter: char[] mCopyBuffer>;

        if $r3 == null goto label4;

        r0.<com.ctc.wstx.sw.BaseStreamWriter: char[] mCopyBuffer> = null;

        $r2 = r0.<com.ctc.wstx.sw.BaseStreamWriter: com.ctc.wstx.api.WriterConfig mConfig>;

        virtualinvoke $r2.<com.ctc.wstx.api.WriterConfig: void freeMediumCBuffer(char[])>($r3);

     label4:
        $r1 = r0.<com.ctc.wstx.sw.BaseStreamWriter: com.ctc.wstx.sw.XmlWriter mWriter>;

        virtualinvoke $r1.<com.ctc.wstx.sw.XmlWriter: void close()>();

     label5:
        goto label7;

     label6:
        $r4 := @caughtexception;

        $r5 = new com.ctc.wstx.exc.WstxIOException;

        specialinvoke $r5.<com.ctc.wstx.exc.WstxIOException: void <init>(java.io.IOException)>($r4);

        throw $r5;

     label7:
        return;

        catch java.io.IOException from label3 to label5 with label6;
    }

    public java.lang.String toString()
    {
        com.ctc.wstx.sw.BaseStreamWriter r2;
        com.ctc.wstx.sw.XmlWriter $r6, $r7;
        java.lang.StringBuffer $r0, $r1, $r4, $r5, $r8;
        java.lang.Class $r3;
        java.lang.String $r9, $r10;

        r2 := @this: com.ctc.wstx.sw.BaseStreamWriter;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[StreamWriter: ");

        $r3 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", underlying outputter: ");

        $r6 = r2.<com.ctc.wstx.sw.BaseStreamWriter: com.ctc.wstx.sw.XmlWriter mWriter>;

        if $r6 != null goto label1;

        $r10 = "NULL";

        goto label2;

     label1:
        $r7 = r2.<com.ctc.wstx.sw.BaseStreamWriter: com.ctc.wstx.sw.XmlWriter mWriter>;

        $r10 = virtualinvoke $r7.<java.lang.Object: java.lang.String toString()>();

     label2:
        $r8 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r10);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r9;
    }

    static void <clinit>()
    {
        <com.ctc.wstx.sw.BaseStreamWriter: int DEFAULT_COPYBUFFER_LEN> = 512;

        <com.ctc.wstx.sw.BaseStreamWriter: int ATTR_MIN_ARRAYCOPY> = 12;

        <com.ctc.wstx.sw.BaseStreamWriter: int MIN_ARRAYCOPY> = 12;

        <com.ctc.wstx.sw.BaseStreamWriter: java.lang.String NO_NS_URI> = "";

        <com.ctc.wstx.sw.BaseStreamWriter: char CHAR_SPACE> = 32;

        <com.ctc.wstx.sw.BaseStreamWriter: int STATE_EPILOG> = 3;

        <com.ctc.wstx.sw.BaseStreamWriter: int STATE_TREE> = 2;

        <com.ctc.wstx.sw.BaseStreamWriter: int STATE_PROLOG> = 1;

        <com.ctc.wstx.sw.BaseStreamWriter: java.lang.String NO_PREFIX> = null;

        return;
    }
}
