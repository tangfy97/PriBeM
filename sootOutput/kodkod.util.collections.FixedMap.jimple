public final class kodkod.util.collections.FixedMap extends java.util.AbstractMap implements kodkod.util.collections.Indexer
{
    private final java.lang.Object[] keys;
    private final java.lang.Object[] values;

    public void <init>(java.util.Map)
    {
        java.lang.Object[] $r3, $r5;
        kodkod.util.collections.FixedMap r0;
        java.util.Set $r2;
        java.util.Map r1;
        int $i0, i1;
        java.lang.Object $r4, $r6;

        r0 := @this: kodkod.util.collections.FixedMap;

        r1 := @parameter0: java.util.Map;

        $r2 = interfaceinvoke r1.<java.util.Map: java.util.Set keySet()>();

        specialinvoke r0.<kodkod.util.collections.FixedMap: void <init>(java.util.Set)>($r2);

        i1 = 0;

        $i0 = interfaceinvoke r1.<java.util.Map: int size()>();

        goto label2;

     label1:
        $r5 = r0.<kodkod.util.collections.FixedMap: java.lang.Object[] values>;

        $r3 = r0.<kodkod.util.collections.FixedMap: java.lang.Object[] keys>;

        $r4 = $r3[i1];

        $r6 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r4);

        $r5[i1] = $r6;

        i1 = i1 + 1;

     label2:
        if i1 < $i0 goto label1;

        return;
    }

    public void <init>(java.util.Set)
    {
        java.lang.Object[] $r2, $r3, $r4, $r5;
        kodkod.util.collections.FixedMap r0;
        int $i0;
        java.util.Set r1;

        r0 := @this: kodkod.util.collections.FixedMap;

        r1 := @parameter0: java.util.Set;

        specialinvoke r0.<java.util.AbstractMap: void <init>()>();

        $i0 = interfaceinvoke r1.<java.util.Set: int size()>();

        $r2 = newarray (java.lang.Object)[$i0];

        $r3 = interfaceinvoke r1.<java.util.Set: java.lang.Object[] toArray(java.lang.Object[])>($r2);

        $r4 = staticinvoke <kodkod.util.collections.Containers: java.lang.Object[] identitySort(java.lang.Object[])>($r3);

        r0.<kodkod.util.collections.FixedMap: java.lang.Object[] keys> = $r4;

        $r5 = newarray (java.lang.Object)[$i0];

        r0.<kodkod.util.collections.FixedMap: java.lang.Object[] values> = $r5;

        return;
    }

    public void <init>(java.lang.Object[])
    {
        java.lang.Object[] r1, $r2;
        kodkod.util.collections.FixedMap r0;
        int $i0;

        r0 := @this: kodkod.util.collections.FixedMap;

        r1 := @parameter0: java.lang.Object[];

        specialinvoke r0.<java.util.AbstractMap: void <init>()>();

        r0.<kodkod.util.collections.FixedMap: java.lang.Object[] keys> = r1;

        $i0 = lengthof r1;

        $r2 = newarray (java.lang.Object)[$i0];

        r0.<kodkod.util.collections.FixedMap: java.lang.Object[] values> = $r2;

        return;
    }

    public final int indexOf(java.lang.Object)
    {
        java.lang.Object[] $r2;
        kodkod.util.collections.FixedMap r0;
        int $i0;
        java.lang.Object r1;

        r0 := @this: kodkod.util.collections.FixedMap;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<kodkod.util.collections.FixedMap: java.lang.Object[] keys>;

        $i0 = staticinvoke <kodkod.util.collections.Containers: int identityBinarySearch(java.lang.Object[],java.lang.Object)>($r2, r1);

        return $i0;
    }

    public final java.lang.Object keyAt(int)
    {
        java.lang.IndexOutOfBoundsException $r4;
        java.lang.Object[] $r1;
        kodkod.util.collections.FixedMap r0;
        int i0;
        java.lang.Object $r2;
        java.lang.ArrayIndexOutOfBoundsException $r3;

        r0 := @this: kodkod.util.collections.FixedMap;

        i0 := @parameter0: int;

     label1:
        $r1 = r0.<kodkod.util.collections.FixedMap: java.lang.Object[] keys>;

        $r2 = $r1[i0];

     label2:
        return $r2;

     label3:
        $r3 := @caughtexception;

        $r4 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r4.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r4;

        catch java.lang.ArrayIndexOutOfBoundsException from label1 to label2 with label3;
    }

    public final boolean containsKey(java.lang.Object)
    {
        int $i0;
        java.lang.Object r1;
        kodkod.util.collections.FixedMap r0;

        r0 := @this: kodkod.util.collections.FixedMap;

        r1 := @parameter0: java.lang.Object;

        $i0 = virtualinvoke r0.<kodkod.util.collections.FixedMap: int indexOf(java.lang.Object)>(r1);

        if $i0 < 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public final boolean containsValue(java.lang.Object)
    {
        java.lang.Object[] r1;
        kodkod.util.collections.FixedMap r0;
        int i0, i1;
        java.lang.Object r2, r3;

        r0 := @this: kodkod.util.collections.FixedMap;

        r3 := @parameter0: java.lang.Object;

        r1 = r0.<kodkod.util.collections.FixedMap: java.lang.Object[] values>;

        i1 = 0;

        i0 = lengthof r1;

        goto label3;

     label1:
        r2 = r1[i1];

        if r2 != r3 goto label2;

        return 1;

     label2:
        i1 = i1 + 1;

     label3:
        if i1 < i0 goto label1;

        return 0;
    }

    public final java.util.Set entrySet()
    {
        kodkod.util.collections.FixedMap$1 $r0;
        kodkod.util.collections.FixedMap r1;

        r1 := @this: kodkod.util.collections.FixedMap;

        $r0 = new kodkod.util.collections.FixedMap$1;

        specialinvoke $r0.<kodkod.util.collections.FixedMap$1: void <init>(kodkod.util.collections.FixedMap)>(r1);

        return $r0;
    }

    public final java.lang.Object get(java.lang.Object)
    {
        java.lang.Object[] $r2;
        kodkod.util.collections.FixedMap r0;
        int $i0;
        java.lang.Object r1, $r3;

        r0 := @this: kodkod.util.collections.FixedMap;

        r1 := @parameter0: java.lang.Object;

        $i0 = virtualinvoke r0.<kodkod.util.collections.FixedMap: int indexOf(java.lang.Object)>(r1);

        if $i0 >= 0 goto label1;

        $r3 = null;

        goto label2;

     label1:
        $r2 = r0.<kodkod.util.collections.FixedMap: java.lang.Object[] values>;

        $r3 = $r2[$i0];

     label2:
        return $r3;
    }

    public final java.lang.Object get(int)
    {
        java.lang.IndexOutOfBoundsException $r4;
        java.lang.Object[] $r1;
        kodkod.util.collections.FixedMap r0;
        int i0;
        java.lang.Object $r2;
        java.lang.ArrayIndexOutOfBoundsException $r3;

        r0 := @this: kodkod.util.collections.FixedMap;

        i0 := @parameter0: int;

     label1:
        $r1 = r0.<kodkod.util.collections.FixedMap: java.lang.Object[] values>;

        $r2 = $r1[i0];

     label2:
        return $r2;

     label3:
        $r3 := @caughtexception;

        $r4 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r4.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r4;

        catch java.lang.ArrayIndexOutOfBoundsException from label1 to label2 with label3;
    }

    public final boolean isEmpty()
    {
        int $i0;
        java.lang.Object[] $r1;
        kodkod.util.collections.FixedMap r0;

        r0 := @this: kodkod.util.collections.FixedMap;

        $r1 = r0.<kodkod.util.collections.FixedMap: java.lang.Object[] keys>;

        $i0 = lengthof $r1;

        if $i0 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public final java.lang.Object put(java.lang.Object, java.lang.Object)
    {
        java.lang.Object[] $r2, $r5;
        kodkod.util.collections.FixedMap r0;
        java.lang.IllegalArgumentException $r6;
        int $i0;
        java.lang.Object r1, r3, r4;

        r0 := @this: kodkod.util.collections.FixedMap;

        r1 := @parameter0: java.lang.Object;

        r4 := @parameter1: java.lang.Object;

        $i0 = virtualinvoke r0.<kodkod.util.collections.FixedMap: int indexOf(java.lang.Object)>(r1);

        if $i0 >= 0 goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r6;

     label1:
        $r2 = r0.<kodkod.util.collections.FixedMap: java.lang.Object[] values>;

        r3 = $r2[$i0];

        $r5 = r0.<kodkod.util.collections.FixedMap: java.lang.Object[] values>;

        $r5[$i0] = r4;

        return r3;
    }

    public final java.lang.Object remove(java.lang.Object)
    {
        java.lang.UnsupportedOperationException $r0;
        java.lang.Object r2;
        kodkod.util.collections.FixedMap r1;

        r1 := @this: kodkod.util.collections.FixedMap;

        r2 := @parameter0: java.lang.Object;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public final int size()
    {
        int $i0;
        java.lang.Object[] $r1;
        kodkod.util.collections.FixedMap r0;

        r0 := @this: kodkod.util.collections.FixedMap;

        $r1 = r0.<kodkod.util.collections.FixedMap: java.lang.Object[] keys>;

        $i0 = lengthof $r1;

        return $i0;
    }

    public int hashCode()
    {
        java.lang.Object[] $r1, $r2, $r4;
        kodkod.util.collections.FixedMap r0;
        int $i0, $i1, $i2, $i3, i4, i5;
        java.lang.Object $r3, $r5;

        r0 := @this: kodkod.util.collections.FixedMap;

        i4 = 0;

        i5 = 0;

        goto label2;

     label1:
        $r2 = r0.<kodkod.util.collections.FixedMap: java.lang.Object[] keys>;

        $r3 = $r2[i5];

        $i1 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>($r3);

        $r4 = r0.<kodkod.util.collections.FixedMap: java.lang.Object[] values>;

        $r5 = $r4[i5];

        $i2 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>($r5);

        $i3 = $i1 ^ $i2;

        i4 = i4 + $i3;

        i5 = i5 + 1;

     label2:
        $r1 = r0.<kodkod.util.collections.FixedMap: java.lang.Object[] keys>;

        $i0 = lengthof $r1;

        if i5 < $i0 goto label1;

        return i4;
    }

    public boolean equals(java.lang.Object)
    {
        java.lang.Object[] $r4, $r5, $r6, $r9, $r10;
        java.util.Map r14;
        int $i0, $i1, $i2, i3;
        boolean $z0, $z1, $z2;
        kodkod.util.collections.FixedMap r1, r13;
        java.util.Set $r2, $r3;
        java.lang.Object r0, $r7, $r8, $r11, $r12;

        r1 := @this: kodkod.util.collections.FixedMap;

        r0 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = r0 instanceof kodkod.util.collections.FixedMap;

        if $z0 == 0 goto label7;

        r13 = (kodkod.util.collections.FixedMap) r0;

        $i0 = virtualinvoke r13.<kodkod.util.collections.FixedMap: int size()>();

        $i1 = virtualinvoke r1.<kodkod.util.collections.FixedMap: int size()>();

        if $i0 == $i1 goto label2;

        return 0;

     label2:
        i3 = 0;

        goto label6;

     label3:
        $r5 = r1.<kodkod.util.collections.FixedMap: java.lang.Object[] keys>;

        $r8 = $r5[i3];

        $r6 = r13.<kodkod.util.collections.FixedMap: java.lang.Object[] keys>;

        $r7 = $r6[i3];

        if $r8 != $r7 goto label4;

        $r9 = r1.<kodkod.util.collections.FixedMap: java.lang.Object[] values>;

        $r12 = $r9[i3];

        $r10 = r13.<kodkod.util.collections.FixedMap: java.lang.Object[] values>;

        $r11 = $r10[i3];

        if $r12 == $r11 goto label5;

     label4:
        return 0;

     label5:
        i3 = i3 + 1;

     label6:
        $r4 = r1.<kodkod.util.collections.FixedMap: java.lang.Object[] keys>;

        $i2 = lengthof $r4;

        if i3 < $i2 goto label3;

        return 1;

     label7:
        $z1 = r0 instanceof java.util.Map;

        if $z1 == 0 goto label8;

        r14 = (java.util.Map) r0;

        $r2 = virtualinvoke r1.<kodkod.util.collections.FixedMap: java.util.Set entrySet()>();

        $r3 = interfaceinvoke r14.<java.util.Map: java.util.Set entrySet()>();

        $z2 = interfaceinvoke $r2.<java.util.Set: boolean equals(java.lang.Object)>($r3);

        return $z2;

     label8:
        return 0;
    }

    static java.lang.Object[] access$0(kodkod.util.collections.FixedMap)
    {
        java.lang.Object[] $r1;
        kodkod.util.collections.FixedMap r0;

        r0 := @parameter0: kodkod.util.collections.FixedMap;

        $r1 = r0.<kodkod.util.collections.FixedMap: java.lang.Object[] keys>;

        return $r1;
    }

    static java.lang.Object[] access$1(kodkod.util.collections.FixedMap)
    {
        java.lang.Object[] $r1;
        kodkod.util.collections.FixedMap r0;

        r0 := @parameter0: kodkod.util.collections.FixedMap;

        $r1 = r0.<kodkod.util.collections.FixedMap: java.lang.Object[] values>;

        return $r1;
    }
}
