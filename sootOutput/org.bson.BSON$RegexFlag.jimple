final enum class org.bson.BSON$RegexFlag extends java.lang.Enum
{
    public static final enum org.bson.BSON$RegexFlag CANON_EQ;
    public static final enum org.bson.BSON$RegexFlag UNIX_LINES;
    public static final enum org.bson.BSON$RegexFlag GLOBAL;
    public static final enum org.bson.BSON$RegexFlag CASE_INSENSITIVE;
    public static final enum org.bson.BSON$RegexFlag MULTILINE;
    public static final enum org.bson.BSON$RegexFlag DOTALL;
    public static final enum org.bson.BSON$RegexFlag LITERAL;
    public static final enum org.bson.BSON$RegexFlag UNICODE_CASE;
    public static final enum org.bson.BSON$RegexFlag COMMENTS;
    private static final java.util.Map byCharacter;
    public final int javaFlag;
    public final char flagChar;
    public final java.lang.String unsupported;
    private static final org.bson.BSON$RegexFlag[] $VALUES;

    public static org.bson.BSON$RegexFlag[] values()
    {
        java.lang.Object $r1;
        org.bson.BSON$RegexFlag[] $r0, $r2;

        $r0 = <org.bson.BSON$RegexFlag: org.bson.BSON$RegexFlag[] $VALUES>;

        $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (org.bson.BSON$RegexFlag[]) $r1;

        return $r2;
    }

    public static org.bson.BSON$RegexFlag valueOf(java.lang.String)
    {
        org.bson.BSON$RegexFlag $r2;
        java.lang.String r0;
        java.lang.Enum $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Lorg/bson/BSON$RegexFlag;", r0);

        $r2 = (org.bson.BSON$RegexFlag) $r1;

        return $r2;
    }

    public static org.bson.BSON$RegexFlag getByCharacter(char)
    {
        java.lang.Character $r1;
        java.util.Map $r0;
        char c0;
        java.lang.Object $r2;
        org.bson.BSON$RegexFlag $r3;

        c0 := @parameter0: char;

        $r0 = <org.bson.BSON$RegexFlag: java.util.Map byCharacter>;

        $r1 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(c0);

        $r2 = interfaceinvoke $r0.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        $r3 = (org.bson.BSON$RegexFlag) $r2;

        return $r3;
    }

    private void <init>(java.lang.String, int, int, char, java.lang.String)
    {
        int i0, i1;
        org.bson.BSON$RegexFlag r0;
        char c2;
        java.lang.String r1, r2;

        r0 := @this: org.bson.BSON$RegexFlag;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        c2 := @parameter3: char;

        r2 := @parameter4: java.lang.String;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        r0.<org.bson.BSON$RegexFlag: int javaFlag> = i1;

        r0.<org.bson.BSON$RegexFlag: char flagChar> = c2;

        r0.<org.bson.BSON$RegexFlag: java.lang.String unsupported> = r2;

        return;
    }

    static void <clinit>()
    {
        java.util.HashMap $r19;
        java.lang.Character $r23;
        java.util.Map $r22;
        int i0, i2;
        org.bson.BSON$RegexFlag $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, r21;
        org.bson.BSON$RegexFlag[] $r9, $r20;
        char $c1;

        $r0 = new org.bson.BSON$RegexFlag;

        specialinvoke $r0.<org.bson.BSON$RegexFlag: void <init>(java.lang.String,int,int,char,java.lang.String)>("CANON_EQ", 0, 128, 99, "Pattern.CANON_EQ");

        <org.bson.BSON$RegexFlag: org.bson.BSON$RegexFlag CANON_EQ> = $r0;

        $r1 = new org.bson.BSON$RegexFlag;

        specialinvoke $r1.<org.bson.BSON$RegexFlag: void <init>(java.lang.String,int,int,char,java.lang.String)>("UNIX_LINES", 1, 1, 100, "Pattern.UNIX_LINES");

        <org.bson.BSON$RegexFlag: org.bson.BSON$RegexFlag UNIX_LINES> = $r1;

        $r2 = new org.bson.BSON$RegexFlag;

        specialinvoke $r2.<org.bson.BSON$RegexFlag: void <init>(java.lang.String,int,int,char,java.lang.String)>("GLOBAL", 2, 256, 103, null);

        <org.bson.BSON$RegexFlag: org.bson.BSON$RegexFlag GLOBAL> = $r2;

        $r3 = new org.bson.BSON$RegexFlag;

        specialinvoke $r3.<org.bson.BSON$RegexFlag: void <init>(java.lang.String,int,int,char,java.lang.String)>("CASE_INSENSITIVE", 3, 2, 105, null);

        <org.bson.BSON$RegexFlag: org.bson.BSON$RegexFlag CASE_INSENSITIVE> = $r3;

        $r4 = new org.bson.BSON$RegexFlag;

        specialinvoke $r4.<org.bson.BSON$RegexFlag: void <init>(java.lang.String,int,int,char,java.lang.String)>("MULTILINE", 4, 8, 109, null);

        <org.bson.BSON$RegexFlag: org.bson.BSON$RegexFlag MULTILINE> = $r4;

        $r5 = new org.bson.BSON$RegexFlag;

        specialinvoke $r5.<org.bson.BSON$RegexFlag: void <init>(java.lang.String,int,int,char,java.lang.String)>("DOTALL", 5, 32, 115, "Pattern.DOTALL");

        <org.bson.BSON$RegexFlag: org.bson.BSON$RegexFlag DOTALL> = $r5;

        $r6 = new org.bson.BSON$RegexFlag;

        specialinvoke $r6.<org.bson.BSON$RegexFlag: void <init>(java.lang.String,int,int,char,java.lang.String)>("LITERAL", 6, 16, 116, "Pattern.LITERAL");

        <org.bson.BSON$RegexFlag: org.bson.BSON$RegexFlag LITERAL> = $r6;

        $r7 = new org.bson.BSON$RegexFlag;

        specialinvoke $r7.<org.bson.BSON$RegexFlag: void <init>(java.lang.String,int,int,char,java.lang.String)>("UNICODE_CASE", 7, 64, 117, "Pattern.UNICODE_CASE");

        <org.bson.BSON$RegexFlag: org.bson.BSON$RegexFlag UNICODE_CASE> = $r7;

        $r8 = new org.bson.BSON$RegexFlag;

        specialinvoke $r8.<org.bson.BSON$RegexFlag: void <init>(java.lang.String,int,int,char,java.lang.String)>("COMMENTS", 8, 4, 120, null);

        <org.bson.BSON$RegexFlag: org.bson.BSON$RegexFlag COMMENTS> = $r8;

        $r9 = newarray (org.bson.BSON$RegexFlag)[9];

        $r10 = <org.bson.BSON$RegexFlag: org.bson.BSON$RegexFlag CANON_EQ>;

        $r9[0] = $r10;

        $r11 = <org.bson.BSON$RegexFlag: org.bson.BSON$RegexFlag UNIX_LINES>;

        $r9[1] = $r11;

        $r12 = <org.bson.BSON$RegexFlag: org.bson.BSON$RegexFlag GLOBAL>;

        $r9[2] = $r12;

        $r13 = <org.bson.BSON$RegexFlag: org.bson.BSON$RegexFlag CASE_INSENSITIVE>;

        $r9[3] = $r13;

        $r14 = <org.bson.BSON$RegexFlag: org.bson.BSON$RegexFlag MULTILINE>;

        $r9[4] = $r14;

        $r15 = <org.bson.BSON$RegexFlag: org.bson.BSON$RegexFlag DOTALL>;

        $r9[5] = $r15;

        $r16 = <org.bson.BSON$RegexFlag: org.bson.BSON$RegexFlag LITERAL>;

        $r9[6] = $r16;

        $r17 = <org.bson.BSON$RegexFlag: org.bson.BSON$RegexFlag UNICODE_CASE>;

        $r9[7] = $r17;

        $r18 = <org.bson.BSON$RegexFlag: org.bson.BSON$RegexFlag COMMENTS>;

        $r9[8] = $r18;

        <org.bson.BSON$RegexFlag: org.bson.BSON$RegexFlag[] $VALUES> = $r9;

        $r19 = new java.util.HashMap;

        specialinvoke $r19.<java.util.HashMap: void <init>()>();

        <org.bson.BSON$RegexFlag: java.util.Map byCharacter> = $r19;

        $r20 = staticinvoke <org.bson.BSON$RegexFlag: org.bson.BSON$RegexFlag[] values()>();

        i0 = lengthof $r20;

        i2 = 0;

     label1:
        if i2 >= i0 goto label2;

        r21 = $r20[i2];

        $r22 = <org.bson.BSON$RegexFlag: java.util.Map byCharacter>;

        $c1 = r21.<org.bson.BSON$RegexFlag: char flagChar>;

        $r23 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>($c1);

        interfaceinvoke $r22.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r23, r21);

        i2 = i2 + 1;

        goto label1;

     label2:
        return;
    }
}
