public class org.waveprotocol.wave.client.editor.content.paragraph.ParagraphHelperAlwaysBr extends org.waveprotocol.wave.client.editor.content.paragraph.ParagraphHelperBr
{
    static final boolean $assertionsDisabled;

    public void <init>()
    {
        org.waveprotocol.wave.client.editor.content.paragraph.ParagraphHelperAlwaysBr r0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.paragraph.ParagraphHelperAlwaysBr;

        specialinvoke r0.<org.waveprotocol.wave.client.editor.content.paragraph.ParagraphHelperBr: void <init>()>();

        return;
    }

    public void onChildAdded(com.google.gwt.dom.client.Node, com.google.gwt.dom.client.Element)
    {
        com.google.gwt.dom.client.Element r1;
        org.waveprotocol.wave.client.editor.content.paragraph.ParagraphHelperAlwaysBr r0;
        com.google.gwt.dom.client.Node r2;

        r0 := @this: org.waveprotocol.wave.client.editor.content.paragraph.ParagraphHelperAlwaysBr;

        r2 := @parameter0: com.google.gwt.dom.client.Node;

        r1 := @parameter1: com.google.gwt.dom.client.Element;

        virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.paragraph.ParagraphHelperAlwaysBr: void appendSpacer(com.google.gwt.dom.client.Element)>(r1);

        return;
    }

    public void onRemovingChild(com.google.gwt.dom.client.Node, com.google.gwt.dom.client.Element)
    {
        com.google.gwt.dom.client.Element r1;
        org.waveprotocol.wave.client.editor.content.paragraph.ParagraphHelperAlwaysBr r0;
        com.google.gwt.dom.client.Node r2;

        r0 := @this: org.waveprotocol.wave.client.editor.content.paragraph.ParagraphHelperAlwaysBr;

        r2 := @parameter0: com.google.gwt.dom.client.Node;

        r1 := @parameter1: com.google.gwt.dom.client.Element;

        virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.paragraph.ParagraphHelperAlwaysBr: void appendSpacer(com.google.gwt.dom.client.Element)>(r1);

        return;
    }

    public void onRepair(org.waveprotocol.wave.client.editor.content.ContentElement)
    {
        com.google.gwt.dom.client.Element $r2;
        org.waveprotocol.wave.client.editor.content.ContentElement r1;
        org.waveprotocol.wave.client.editor.content.paragraph.ParagraphHelperAlwaysBr r0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.paragraph.ParagraphHelperAlwaysBr;

        r1 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentElement;

        $r2 = virtualinvoke r1.<org.waveprotocol.wave.client.editor.content.ContentElement: com.google.gwt.dom.client.Element getImplNodelet()>();

        virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.paragraph.ParagraphHelperAlwaysBr: void appendSpacer(com.google.gwt.dom.client.Element)>($r2);

        return;
    }

    public void assertHealthy(org.waveprotocol.wave.client.editor.content.ContentElement)
    {
        org.waveprotocol.wave.client.editor.content.ContentView $r1;
        java.lang.AssertionError $r6, $r7;
        org.waveprotocol.wave.client.editor.content.paragraph.ParagraphHelperAlwaysBr r3;
        com.google.gwt.dom.client.Element $r4;
        org.waveprotocol.wave.client.editor.content.ContentElement r0;
        java.lang.Object $r2;
        com.google.gwt.dom.client.Node $r5, r8;
        boolean $z0, $z1, $z2, $z3, $z4;

        r3 := @this: org.waveprotocol.wave.client.editor.content.paragraph.ParagraphHelperAlwaysBr;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentElement;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentElement: org.waveprotocol.wave.client.editor.content.ContentView getRenderedContentView()>();

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.client.editor.content.ContentView: java.lang.Object getFirstChild(java.lang.Object)>(r0);

        if $r2 == null goto label4;

        $r4 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentElement: com.google.gwt.dom.client.Element getImplNodelet()>();

        $r5 = virtualinvoke $r4.<com.google.gwt.dom.client.Element: com.google.gwt.dom.client.Node getLastChild()>();

        $z0 = <org.waveprotocol.wave.client.editor.content.paragraph.ParagraphHelperAlwaysBr: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z4 = virtualinvoke r3.<org.waveprotocol.wave.client.editor.content.paragraph.ParagraphHelperAlwaysBr: boolean isSpacer(com.google.gwt.dom.client.Node)>($r5);

        if $z4 != 0 goto label1;

        $r7 = new java.lang.AssertionError;

        specialinvoke $r7.<java.lang.AssertionError: void <init>(java.lang.Object)>("Last nodelet child should be spacer");

        throw $r7;

     label1:
        r8 = virtualinvoke $r4.<com.google.gwt.dom.client.Element: com.google.gwt.dom.client.Node getFirstChild()>();

     label2:
        if r8 == null goto label4;

        $z1 = virtualinvoke r8.<com.google.gwt.dom.client.Node: boolean equals(java.lang.Object)>($r5);

        if $z1 != 0 goto label4;

        $z2 = <org.waveprotocol.wave.client.editor.content.paragraph.ParagraphHelperAlwaysBr: boolean $assertionsDisabled>;

        if $z2 != 0 goto label3;

        $z3 = virtualinvoke r3.<org.waveprotocol.wave.client.editor.content.paragraph.ParagraphHelperAlwaysBr: boolean isSpacer(com.google.gwt.dom.client.Node)>(r8);

        if $z3 == 0 goto label3;

        $r6 = new java.lang.AssertionError;

        specialinvoke $r6.<java.lang.AssertionError: void <init>(java.lang.Object)>("Only last nodelet child should be spacer");

        throw $r6;

     label3:
        r8 = virtualinvoke r8.<com.google.gwt.dom.client.Node: com.google.gwt.dom.client.Node getNextSibling()>();

        goto label2;

     label4:
        specialinvoke r3.<org.waveprotocol.wave.client.editor.content.paragraph.ParagraphHelperBr: void assertHealthy(org.waveprotocol.wave.client.editor.content.ContentElement)>(r0);

        return;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/waveprotocol/wave/client/editor/content/paragraph/ParagraphHelperAlwaysBr;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.waveprotocol.wave.client.editor.content.paragraph.ParagraphHelperAlwaysBr: boolean $assertionsDisabled> = $z1;

        return;
    }
}
