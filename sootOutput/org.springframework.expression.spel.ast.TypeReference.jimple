public class org.springframework.expression.spel.ast.TypeReference extends org.springframework.expression.spel.ast.SpelNodeImpl
{

    public void <init>(int, org.springframework.expression.spel.ast.SpelNodeImpl)
    {
        int i0;
        org.springframework.expression.spel.ast.TypeReference r0;
        org.springframework.expression.spel.ast.SpelNodeImpl r2;
        org.springframework.expression.spel.ast.SpelNodeImpl[] $r1;

        r0 := @this: org.springframework.expression.spel.ast.TypeReference;

        i0 := @parameter0: int;

        r2 := @parameter1: org.springframework.expression.spel.ast.SpelNodeImpl;

        $r1 = newarray (org.springframework.expression.spel.ast.SpelNodeImpl)[1];

        $r1[0] = r2;

        specialinvoke r0.<org.springframework.expression.spel.ast.SpelNodeImpl: void <init>(int,org.springframework.expression.spel.ast.SpelNodeImpl[])>(i0, $r1);

        return;
    }

    public org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState) throws org.springframework.expression.EvaluationException
    {
        org.springframework.expression.spel.ast.TypeReference r0;
        int $i0, $i3;
        java.lang.String r6, $r7;
        org.springframework.expression.TypedValue $r4, $r14, $r15;
        boolean $z0;
        org.springframework.expression.spel.ast.TypeCode $r8, $r9;
        char $c1;
        org.springframework.expression.spel.ast.SpelNodeImpl[] $r1;
        org.springframework.expression.spel.ExpressionState r2;
        java.lang.Object $r5;
        java.lang.Class $r11, $r13;
        org.springframework.expression.spel.ast.SpelNodeImpl $r3;

        r0 := @this: org.springframework.expression.spel.ast.TypeReference;

        r2 := @parameter0: org.springframework.expression.spel.ExpressionState;

        $r1 = r0.<org.springframework.expression.spel.ast.TypeReference: org.springframework.expression.spel.ast.SpelNodeImpl[] children>;

        $r3 = $r1[0];

        $r4 = virtualinvoke $r3.<org.springframework.expression.spel.ast.SpelNodeImpl: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>(r2);

        $r5 = virtualinvoke $r4.<org.springframework.expression.TypedValue: java.lang.Object getValue()>();

        r6 = (java.lang.String) $r5;

        $i0 = virtualinvoke r6.<java.lang.String: int indexOf(java.lang.String)>(".");

        $i3 = (int) -1;

        if $i0 != $i3 goto label1;

        $c1 = virtualinvoke r6.<java.lang.String: char charAt(int)>(0);

        $z0 = staticinvoke <java.lang.Character: boolean isLowerCase(char)>($c1);

        if $z0 == 0 goto label1;

        $r7 = virtualinvoke r6.<java.lang.String: java.lang.String toUpperCase()>();

        $r8 = staticinvoke <org.springframework.expression.spel.ast.TypeCode: org.springframework.expression.spel.ast.TypeCode valueOf(java.lang.String)>($r7);

        $r9 = <org.springframework.expression.spel.ast.TypeCode: org.springframework.expression.spel.ast.TypeCode OBJECT>;

        if $r8 == $r9 goto label1;

        $r14 = new org.springframework.expression.TypedValue;

        $r11 = virtualinvoke $r8.<org.springframework.expression.spel.ast.TypeCode: java.lang.Class getType()>();

        specialinvoke $r14.<org.springframework.expression.TypedValue: void <init>(java.lang.Object)>($r11);

        return $r14;

     label1:
        $r15 = new org.springframework.expression.TypedValue;

        $r13 = virtualinvoke r2.<org.springframework.expression.spel.ExpressionState: java.lang.Class findType(java.lang.String)>(r6);

        specialinvoke $r15.<org.springframework.expression.TypedValue: void <init>(java.lang.Object)>($r13);

        return $r15;
    }

    public java.lang.String toStringAST()
    {
        org.springframework.expression.spel.ast.TypeReference r1;
        java.lang.StringBuilder $r0;
        java.lang.String $r3, $r4;
        org.springframework.expression.spel.SpelNode $r2;

        r1 := @this: org.springframework.expression.spel.ast.TypeReference;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("T(");

        $r2 = virtualinvoke r1.<org.springframework.expression.spel.ast.TypeReference: org.springframework.expression.spel.SpelNode getChild(int)>(0);

        $r3 = interfaceinvoke $r2.<org.springframework.expression.spel.SpelNode: java.lang.String toStringAST()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r4 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;
    }
}
