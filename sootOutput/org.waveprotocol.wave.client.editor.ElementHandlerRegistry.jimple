public class org.waveprotocol.wave.client.editor.ElementHandlerRegistry extends java.lang.Object
{
    private static final org.waveprotocol.wave.model.util.DataDomain handlerDataDomain;
    public static final org.waveprotocol.wave.client.editor.ElementHandlerRegistry ROOT;
    private final org.waveprotocol.wave.model.util.ChainedData data;

    private void <init>()
    {
        org.waveprotocol.wave.model.util.DataDomain $r2;
        org.waveprotocol.wave.client.editor.ElementHandlerRegistry r0;
        org.waveprotocol.wave.model.util.ChainedData $r1;

        r0 := @this: org.waveprotocol.wave.client.editor.ElementHandlerRegistry;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new org.waveprotocol.wave.model.util.ChainedData;

        $r2 = <org.waveprotocol.wave.client.editor.ElementHandlerRegistry: org.waveprotocol.wave.model.util.DataDomain handlerDataDomain>;

        specialinvoke $r1.<org.waveprotocol.wave.model.util.ChainedData: void <init>(org.waveprotocol.wave.model.util.DataDomain)>($r2);

        r0.<org.waveprotocol.wave.client.editor.ElementHandlerRegistry: org.waveprotocol.wave.model.util.ChainedData data> = $r1;

        return;
    }

    private void <init>(org.waveprotocol.wave.client.editor.ElementHandlerRegistry)
    {
        org.waveprotocol.wave.client.editor.ElementHandlerRegistry r0, r2;
        org.waveprotocol.wave.model.util.ChainedData $r1, $r3;

        r0 := @this: org.waveprotocol.wave.client.editor.ElementHandlerRegistry;

        r2 := @parameter0: org.waveprotocol.wave.client.editor.ElementHandlerRegistry;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new org.waveprotocol.wave.model.util.ChainedData;

        $r3 = r2.<org.waveprotocol.wave.client.editor.ElementHandlerRegistry: org.waveprotocol.wave.model.util.ChainedData data>;

        specialinvoke $r1.<org.waveprotocol.wave.model.util.ChainedData: void <init>(org.waveprotocol.wave.model.util.ChainedData)>($r3);

        r0.<org.waveprotocol.wave.client.editor.ElementHandlerRegistry: org.waveprotocol.wave.model.util.ChainedData data> = $r1;

        return;
    }

    public org.waveprotocol.wave.client.editor.ElementHandlerRegistry createExtension()
    {
        org.waveprotocol.wave.client.editor.ElementHandlerRegistry $r0, r1;

        r1 := @this: org.waveprotocol.wave.client.editor.ElementHandlerRegistry;

        $r0 = new org.waveprotocol.wave.client.editor.ElementHandlerRegistry;

        specialinvoke $r0.<org.waveprotocol.wave.client.editor.ElementHandlerRegistry: void <init>(org.waveprotocol.wave.client.editor.ElementHandlerRegistry)>(r1);

        return $r0;
    }

    public void registerRenderer(java.lang.String, org.waveprotocol.wave.client.editor.content.Renderer)
    {
        org.waveprotocol.wave.client.editor.content.Renderer r5;
        java.lang.Object $r2;
        java.lang.String r4;
        org.waveprotocol.wave.model.util.StringMap $r6;
        org.waveprotocol.wave.client.editor.ElementHandlerRegistry$HandlerData $r3;
        org.waveprotocol.wave.client.editor.ElementHandlerRegistry r0;
        org.waveprotocol.wave.model.util.ChainedData $r1;

        r0 := @this: org.waveprotocol.wave.client.editor.ElementHandlerRegistry;

        r4 := @parameter0: java.lang.String;

        r5 := @parameter1: org.waveprotocol.wave.client.editor.content.Renderer;

        $r1 = r0.<org.waveprotocol.wave.client.editor.ElementHandlerRegistry: org.waveprotocol.wave.model.util.ChainedData data>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.util.ChainedData: java.lang.Object modify()>();

        $r3 = (org.waveprotocol.wave.client.editor.ElementHandlerRegistry$HandlerData) $r2;

        $r6 = $r3.<org.waveprotocol.wave.client.editor.ElementHandlerRegistry$HandlerData: org.waveprotocol.wave.model.util.StringMap renderers>;

        interfaceinvoke $r6.<org.waveprotocol.wave.model.util.StringMap: void put(java.lang.String,java.lang.Object)>(r4, r5);

        return;
    }

    public void registerEventHandler(java.lang.String, org.waveprotocol.wave.client.editor.NodeEventHandler)
    {
        java.lang.Object $r2;
        java.lang.String r4;
        org.waveprotocol.wave.model.util.StringMap $r6;
        org.waveprotocol.wave.client.editor.ElementHandlerRegistry$HandlerData $r3;
        org.waveprotocol.wave.client.editor.NodeEventHandler r5;
        org.waveprotocol.wave.client.editor.ElementHandlerRegistry r0;
        org.waveprotocol.wave.model.util.ChainedData $r1;

        r0 := @this: org.waveprotocol.wave.client.editor.ElementHandlerRegistry;

        r4 := @parameter0: java.lang.String;

        r5 := @parameter1: org.waveprotocol.wave.client.editor.NodeEventHandler;

        $r1 = r0.<org.waveprotocol.wave.client.editor.ElementHandlerRegistry: org.waveprotocol.wave.model.util.ChainedData data>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.util.ChainedData: java.lang.Object modify()>();

        $r3 = (org.waveprotocol.wave.client.editor.ElementHandlerRegistry$HandlerData) $r2;

        $r6 = $r3.<org.waveprotocol.wave.client.editor.ElementHandlerRegistry$HandlerData: org.waveprotocol.wave.model.util.StringMap eventHandlers>;

        interfaceinvoke $r6.<org.waveprotocol.wave.model.util.StringMap: void put(java.lang.String,java.lang.Object)>(r4, r5);

        return;
    }

    public void registerMutationHandler(java.lang.String, org.waveprotocol.wave.client.editor.NodeMutationHandler)
    {
        org.waveprotocol.wave.client.editor.NodeMutationHandler r5;
        java.lang.Object $r2;
        java.lang.String r4;
        org.waveprotocol.wave.model.util.StringMap $r6;
        org.waveprotocol.wave.client.editor.ElementHandlerRegistry$HandlerData $r3;
        org.waveprotocol.wave.client.editor.ElementHandlerRegistry r0;
        org.waveprotocol.wave.model.util.ChainedData $r1;

        r0 := @this: org.waveprotocol.wave.client.editor.ElementHandlerRegistry;

        r4 := @parameter0: java.lang.String;

        r5 := @parameter1: org.waveprotocol.wave.client.editor.NodeMutationHandler;

        $r1 = r0.<org.waveprotocol.wave.client.editor.ElementHandlerRegistry: org.waveprotocol.wave.model.util.ChainedData data>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.util.ChainedData: java.lang.Object modify()>();

        $r3 = (org.waveprotocol.wave.client.editor.ElementHandlerRegistry$HandlerData) $r2;

        $r6 = $r3.<org.waveprotocol.wave.client.editor.ElementHandlerRegistry$HandlerData: org.waveprotocol.wave.model.util.StringMap mutationHandlers>;

        interfaceinvoke $r6.<org.waveprotocol.wave.model.util.StringMap: void put(java.lang.String,java.lang.Object)>(r4, r5);

        return;
    }

    public void registerRenderingMutationHandler(java.lang.String, org.waveprotocol.wave.client.editor.RenderingMutationHandler)
    {
        org.waveprotocol.wave.client.editor.RenderingMutationHandler r5;
        org.waveprotocol.wave.model.util.StringMap $r6, $r7;
        org.waveprotocol.wave.client.editor.ElementHandlerRegistry$HandlerData r3;
        org.waveprotocol.wave.client.editor.ElementHandlerRegistry r0;
        java.lang.Object $r2;
        java.lang.String r4;
        org.waveprotocol.wave.model.util.ChainedData $r1;

        r0 := @this: org.waveprotocol.wave.client.editor.ElementHandlerRegistry;

        r4 := @parameter0: java.lang.String;

        r5 := @parameter1: org.waveprotocol.wave.client.editor.RenderingMutationHandler;

        $r1 = r0.<org.waveprotocol.wave.client.editor.ElementHandlerRegistry: org.waveprotocol.wave.model.util.ChainedData data>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.util.ChainedData: java.lang.Object modify()>();

        r3 = (org.waveprotocol.wave.client.editor.ElementHandlerRegistry$HandlerData) $r2;

        $r6 = r3.<org.waveprotocol.wave.client.editor.ElementHandlerRegistry$HandlerData: org.waveprotocol.wave.model.util.StringMap renderers>;

        interfaceinvoke $r6.<org.waveprotocol.wave.model.util.StringMap: void put(java.lang.String,java.lang.Object)>(r4, r5);

        $r7 = r3.<org.waveprotocol.wave.client.editor.ElementHandlerRegistry$HandlerData: org.waveprotocol.wave.model.util.StringMap mutationHandlers>;

        interfaceinvoke $r7.<org.waveprotocol.wave.model.util.StringMap: void put(java.lang.String,java.lang.Object)>(r4, r5);

        return;
    }

    public void registerNiceHtmlRenderer(java.lang.String, org.waveprotocol.wave.client.editor.content.NiceHtmlRenderer)
    {
        org.waveprotocol.wave.client.editor.content.NiceHtmlRenderer r5;
        java.lang.Object $r2;
        java.lang.String r4;
        org.waveprotocol.wave.model.util.StringMap $r6;
        org.waveprotocol.wave.client.editor.ElementHandlerRegistry$HandlerData $r3;
        org.waveprotocol.wave.client.editor.ElementHandlerRegistry r0;
        org.waveprotocol.wave.model.util.ChainedData $r1;

        r0 := @this: org.waveprotocol.wave.client.editor.ElementHandlerRegistry;

        r4 := @parameter0: java.lang.String;

        r5 := @parameter1: org.waveprotocol.wave.client.editor.content.NiceHtmlRenderer;

        $r1 = r0.<org.waveprotocol.wave.client.editor.ElementHandlerRegistry: org.waveprotocol.wave.model.util.ChainedData data>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.util.ChainedData: java.lang.Object modify()>();

        $r3 = (org.waveprotocol.wave.client.editor.ElementHandlerRegistry$HandlerData) $r2;

        $r6 = $r3.<org.waveprotocol.wave.client.editor.ElementHandlerRegistry$HandlerData: org.waveprotocol.wave.model.util.StringMap niceHtmlRenderers>;

        interfaceinvoke $r6.<org.waveprotocol.wave.model.util.StringMap: void put(java.lang.String,java.lang.Object)>(r4, r5);

        return;
    }

    public org.waveprotocol.wave.client.editor.content.Renderer getRenderer(org.waveprotocol.wave.client.editor.ElementHandlerRegistry$HasHandlers)
    {
        org.waveprotocol.wave.model.util.StringMap $r5;
        org.waveprotocol.wave.client.editor.ElementHandlerRegistry$HandlerData $r3;
        org.waveprotocol.wave.client.editor.ElementHandlerRegistry r0;
        org.waveprotocol.wave.client.editor.content.Renderer $r8;
        java.lang.Object $r2, $r7;
        org.waveprotocol.wave.client.editor.ElementHandlerRegistry$HasHandlers r4;
        java.lang.String $r6;
        org.waveprotocol.wave.model.util.ChainedData $r1;

        r0 := @this: org.waveprotocol.wave.client.editor.ElementHandlerRegistry;

        r4 := @parameter0: org.waveprotocol.wave.client.editor.ElementHandlerRegistry$HasHandlers;

        $r1 = r0.<org.waveprotocol.wave.client.editor.ElementHandlerRegistry: org.waveprotocol.wave.model.util.ChainedData data>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.util.ChainedData: java.lang.Object inspect()>();

        $r3 = (org.waveprotocol.wave.client.editor.ElementHandlerRegistry$HandlerData) $r2;

        $r5 = $r3.<org.waveprotocol.wave.client.editor.ElementHandlerRegistry$HandlerData: org.waveprotocol.wave.model.util.StringMap renderers>;

        $r6 = interfaceinvoke r4.<org.waveprotocol.wave.client.editor.ElementHandlerRegistry$HasHandlers: java.lang.String getTagName()>();

        $r7 = interfaceinvoke $r5.<org.waveprotocol.wave.model.util.StringMap: java.lang.Object get(java.lang.String)>($r6);

        $r8 = (org.waveprotocol.wave.client.editor.content.Renderer) $r7;

        return $r8;
    }

    public org.waveprotocol.wave.client.editor.NodeEventHandler getEventHandler(org.waveprotocol.wave.client.editor.ElementHandlerRegistry$HasHandlers)
    {
        org.waveprotocol.wave.model.util.StringMap $r5;
        org.waveprotocol.wave.client.editor.ElementHandlerRegistry$HandlerData $r3;
        org.waveprotocol.wave.client.editor.ElementHandlerRegistry r0;
        java.lang.Object $r2, $r7;
        org.waveprotocol.wave.client.editor.ElementHandlerRegistry$HasHandlers r4;
        java.lang.String $r6;
        org.waveprotocol.wave.client.editor.NodeEventHandler $r8;
        org.waveprotocol.wave.model.util.ChainedData $r1;

        r0 := @this: org.waveprotocol.wave.client.editor.ElementHandlerRegistry;

        r4 := @parameter0: org.waveprotocol.wave.client.editor.ElementHandlerRegistry$HasHandlers;

        $r1 = r0.<org.waveprotocol.wave.client.editor.ElementHandlerRegistry: org.waveprotocol.wave.model.util.ChainedData data>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.util.ChainedData: java.lang.Object inspect()>();

        $r3 = (org.waveprotocol.wave.client.editor.ElementHandlerRegistry$HandlerData) $r2;

        $r5 = $r3.<org.waveprotocol.wave.client.editor.ElementHandlerRegistry$HandlerData: org.waveprotocol.wave.model.util.StringMap eventHandlers>;

        $r6 = interfaceinvoke r4.<org.waveprotocol.wave.client.editor.ElementHandlerRegistry$HasHandlers: java.lang.String getTagName()>();

        $r7 = interfaceinvoke $r5.<org.waveprotocol.wave.model.util.StringMap: java.lang.Object get(java.lang.String)>($r6);

        $r8 = (org.waveprotocol.wave.client.editor.NodeEventHandler) $r7;

        return $r8;
    }

    public org.waveprotocol.wave.client.editor.NodeMutationHandler getMutationHandler(org.waveprotocol.wave.client.editor.ElementHandlerRegistry$HasHandlers)
    {
        org.waveprotocol.wave.client.editor.NodeMutationHandler $r8;
        org.waveprotocol.wave.model.util.StringMap $r5;
        org.waveprotocol.wave.client.editor.ElementHandlerRegistry$HandlerData $r3;
        org.waveprotocol.wave.client.editor.ElementHandlerRegistry r0;
        java.lang.Object $r2, $r7;
        org.waveprotocol.wave.client.editor.ElementHandlerRegistry$HasHandlers r4;
        java.lang.String $r6;
        org.waveprotocol.wave.model.util.ChainedData $r1;

        r0 := @this: org.waveprotocol.wave.client.editor.ElementHandlerRegistry;

        r4 := @parameter0: org.waveprotocol.wave.client.editor.ElementHandlerRegistry$HasHandlers;

        $r1 = r0.<org.waveprotocol.wave.client.editor.ElementHandlerRegistry: org.waveprotocol.wave.model.util.ChainedData data>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.util.ChainedData: java.lang.Object inspect()>();

        $r3 = (org.waveprotocol.wave.client.editor.ElementHandlerRegistry$HandlerData) $r2;

        $r5 = $r3.<org.waveprotocol.wave.client.editor.ElementHandlerRegistry$HandlerData: org.waveprotocol.wave.model.util.StringMap mutationHandlers>;

        $r6 = interfaceinvoke r4.<org.waveprotocol.wave.client.editor.ElementHandlerRegistry$HasHandlers: java.lang.String getTagName()>();

        $r7 = interfaceinvoke $r5.<org.waveprotocol.wave.model.util.StringMap: java.lang.Object get(java.lang.String)>($r6);

        $r8 = (org.waveprotocol.wave.client.editor.NodeMutationHandler) $r7;

        return $r8;
    }

    public org.waveprotocol.wave.client.editor.content.NiceHtmlRenderer getNiceHtmlRenderer(org.waveprotocol.wave.client.editor.ElementHandlerRegistry$HasHandlers)
    {
        org.waveprotocol.wave.client.editor.content.NiceHtmlRenderer $r8;
        org.waveprotocol.wave.model.util.StringMap $r5;
        org.waveprotocol.wave.client.editor.ElementHandlerRegistry$HandlerData $r3;
        org.waveprotocol.wave.client.editor.ElementHandlerRegistry r0;
        java.lang.Object $r2, $r7;
        org.waveprotocol.wave.client.editor.ElementHandlerRegistry$HasHandlers r4;
        java.lang.String $r6;
        org.waveprotocol.wave.model.util.ChainedData $r1;

        r0 := @this: org.waveprotocol.wave.client.editor.ElementHandlerRegistry;

        r4 := @parameter0: org.waveprotocol.wave.client.editor.ElementHandlerRegistry$HasHandlers;

        $r1 = r0.<org.waveprotocol.wave.client.editor.ElementHandlerRegistry: org.waveprotocol.wave.model.util.ChainedData data>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.util.ChainedData: java.lang.Object inspect()>();

        $r3 = (org.waveprotocol.wave.client.editor.ElementHandlerRegistry$HandlerData) $r2;

        $r5 = $r3.<org.waveprotocol.wave.client.editor.ElementHandlerRegistry$HandlerData: org.waveprotocol.wave.model.util.StringMap niceHtmlRenderers>;

        $r6 = interfaceinvoke r4.<org.waveprotocol.wave.client.editor.ElementHandlerRegistry$HasHandlers: java.lang.String getTagName()>();

        $r7 = interfaceinvoke $r5.<org.waveprotocol.wave.model.util.StringMap: java.lang.Object get(java.lang.String)>($r6);

        $r8 = (org.waveprotocol.wave.client.editor.content.NiceHtmlRenderer) $r7;

        return $r8;
    }

    static void <clinit>()
    {
        org.waveprotocol.wave.client.editor.ElementHandlerRegistry$1 $r0;
        org.waveprotocol.wave.client.editor.ElementHandlerRegistry $r1;

        $r0 = new org.waveprotocol.wave.client.editor.ElementHandlerRegistry$1;

        specialinvoke $r0.<org.waveprotocol.wave.client.editor.ElementHandlerRegistry$1: void <init>()>();

        <org.waveprotocol.wave.client.editor.ElementHandlerRegistry: org.waveprotocol.wave.model.util.DataDomain handlerDataDomain> = $r0;

        $r1 = new org.waveprotocol.wave.client.editor.ElementHandlerRegistry;

        specialinvoke $r1.<org.waveprotocol.wave.client.editor.ElementHandlerRegistry: void <init>()>();

        <org.waveprotocol.wave.client.editor.ElementHandlerRegistry: org.waveprotocol.wave.client.editor.ElementHandlerRegistry ROOT> = $r1;

        return;
    }
}
