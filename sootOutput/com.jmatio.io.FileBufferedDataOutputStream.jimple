class com.jmatio.io.FileBufferedDataOutputStream extends java.io.OutputStream implements com.jmatio.io.DataOutputStream
{
    private static final int BUFFER_SIZE;
    private java.nio.ByteBuffer buf;
    private final java.nio.channels.FileChannel rwChannel;
    private final java.io.RandomAccessFile raFile;
    private final java.io.File file;

    public void <init>() throws java.io.IOException
    {
        com.jmatio.io.FileBufferedDataOutputStream r0;
        java.io.RandomAccessFile $r3, $r5;
        java.io.File $r1, $r2, $r4;
        java.nio.ByteBuffer $r7;
        java.nio.channels.FileChannel $r6;

        r0 := @this: com.jmatio.io.FileBufferedDataOutputStream;

        specialinvoke r0.<java.io.OutputStream: void <init>()>();

        $r1 = staticinvoke <java.io.File: java.io.File createTempFile(java.lang.String,java.lang.String)>("jmatio-", null);

        r0.<com.jmatio.io.FileBufferedDataOutputStream: java.io.File file> = $r1;

        $r2 = r0.<com.jmatio.io.FileBufferedDataOutputStream: java.io.File file>;

        virtualinvoke $r2.<java.io.File: void deleteOnExit()>();

        $r3 = new java.io.RandomAccessFile;

        $r4 = r0.<com.jmatio.io.FileBufferedDataOutputStream: java.io.File file>;

        specialinvoke $r3.<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>($r4, "rw");

        r0.<com.jmatio.io.FileBufferedDataOutputStream: java.io.RandomAccessFile raFile> = $r3;

        $r5 = r0.<com.jmatio.io.FileBufferedDataOutputStream: java.io.RandomAccessFile raFile>;

        $r6 = virtualinvoke $r5.<java.io.RandomAccessFile: java.nio.channels.FileChannel getChannel()>();

        r0.<com.jmatio.io.FileBufferedDataOutputStream: java.nio.channels.FileChannel rwChannel> = $r6;

        $r7 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>(1024);

        r0.<com.jmatio.io.FileBufferedDataOutputStream: java.nio.ByteBuffer buf> = $r7;

        return;
    }

    public void <init>(com.jmatio.types.MLArray) throws java.io.IOException
    {
        com.jmatio.io.FileBufferedDataOutputStream r0;
        java.io.RandomAccessFile $r10, $r12;
        java.io.File $r8, $r9, $r11;
        java.nio.ByteBuffer $r14;
        com.jmatio.types.MLArray r3;
        java.lang.StringBuilder $r1, $r2, $r5, $r6;
        java.lang.String $r4, $r7;
        java.nio.channels.FileChannel $r13;

        r0 := @this: com.jmatio.io.FileBufferedDataOutputStream;

        r3 := @parameter0: com.jmatio.types.MLArray;

        specialinvoke r0.<java.io.OutputStream: void <init>()>();

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("jmatio-");

        $r4 = virtualinvoke r3.<com.jmatio.types.MLArray: java.lang.String getName()>();

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $r8 = staticinvoke <java.io.File: java.io.File createTempFile(java.lang.String,java.lang.String)>($r7, null);

        r0.<com.jmatio.io.FileBufferedDataOutputStream: java.io.File file> = $r8;

        $r9 = r0.<com.jmatio.io.FileBufferedDataOutputStream: java.io.File file>;

        virtualinvoke $r9.<java.io.File: void deleteOnExit()>();

        $r10 = new java.io.RandomAccessFile;

        $r11 = r0.<com.jmatio.io.FileBufferedDataOutputStream: java.io.File file>;

        specialinvoke $r10.<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>($r11, "rw");

        r0.<com.jmatio.io.FileBufferedDataOutputStream: java.io.RandomAccessFile raFile> = $r10;

        $r12 = r0.<com.jmatio.io.FileBufferedDataOutputStream: java.io.RandomAccessFile raFile>;

        $r13 = virtualinvoke $r12.<java.io.RandomAccessFile: java.nio.channels.FileChannel getChannel()>();

        r0.<com.jmatio.io.FileBufferedDataOutputStream: java.nio.channels.FileChannel rwChannel> = $r13;

        $r14 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>(1024);

        r0.<com.jmatio.io.FileBufferedDataOutputStream: java.nio.ByteBuffer buf> = $r14;

        return;
    }

    public void write(int) throws java.io.IOException
    {
        com.jmatio.io.FileBufferedDataOutputStream r0;
        java.nio.ByteBuffer $r1, $r2, $r3;
        byte $b4;
        int $i0, $i1, i2, $i3;

        r0 := @this: com.jmatio.io.FileBufferedDataOutputStream;

        i2 := @parameter0: int;

        $r1 = r0.<com.jmatio.io.FileBufferedDataOutputStream: java.nio.ByteBuffer buf>;

        $i0 = virtualinvoke $r1.<java.nio.ByteBuffer: int position()>();

        $r2 = r0.<com.jmatio.io.FileBufferedDataOutputStream: java.nio.ByteBuffer buf>;

        $i1 = virtualinvoke $r2.<java.nio.ByteBuffer: int capacity()>();

        if $i0 < $i1 goto label1;

        virtualinvoke r0.<com.jmatio.io.FileBufferedDataOutputStream: void flush()>();

     label1:
        $r3 = r0.<com.jmatio.io.FileBufferedDataOutputStream: java.nio.ByteBuffer buf>;

        $i3 = i2 & 255;

        $b4 = (byte) $i3;

        virtualinvoke $r3.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte)>($b4);

        return;
    }

    public void write(byte[]) throws java.io.IOException
    {
        int $i0;
        com.jmatio.io.FileBufferedDataOutputStream r0;
        byte[] r1;

        r0 := @this: com.jmatio.io.FileBufferedDataOutputStream;

        r1 := @parameter0: byte[];

        $i0 = lengthof r1;

        virtualinvoke r0.<com.jmatio.io.FileBufferedDataOutputStream: void write(byte[],int,int)>(r1, 0, $i0);

        return;
    }

    public void write(byte[], int, int) throws java.io.IOException
    {
        com.jmatio.io.FileBufferedDataOutputStream r0;
        byte[] r5;
        java.nio.ByteBuffer $r1, $r2, $r3, $r4, $r6;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, i9;

        r0 := @this: com.jmatio.io.FileBufferedDataOutputStream;

        r5 := @parameter0: byte[];

        i1 := @parameter1: int;

        i0 := @parameter2: int;

        i8 = i0;

        i9 = i1;

     label1:
        if i8 <= 0 goto label3;

        $r1 = r0.<com.jmatio.io.FileBufferedDataOutputStream: java.nio.ByteBuffer buf>;

        $i2 = virtualinvoke $r1.<java.nio.ByteBuffer: int position()>();

        $r2 = r0.<com.jmatio.io.FileBufferedDataOutputStream: java.nio.ByteBuffer buf>;

        $i3 = virtualinvoke $r2.<java.nio.ByteBuffer: int capacity()>();

        if $i2 < $i3 goto label2;

        virtualinvoke r0.<com.jmatio.io.FileBufferedDataOutputStream: void flush()>();

     label2:
        $r3 = r0.<com.jmatio.io.FileBufferedDataOutputStream: java.nio.ByteBuffer buf>;

        $i4 = virtualinvoke $r3.<java.nio.ByteBuffer: int limit()>();

        $r4 = r0.<com.jmatio.io.FileBufferedDataOutputStream: java.nio.ByteBuffer buf>;

        $i5 = virtualinvoke $r4.<java.nio.ByteBuffer: int position()>();

        $i6 = $i4 - $i5;

        $i7 = staticinvoke <java.lang.Math: int min(int,int)>(i8, $i6);

        $r6 = r0.<com.jmatio.io.FileBufferedDataOutputStream: java.nio.ByteBuffer buf>;

        virtualinvoke $r6.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte[],int,int)>(r5, i9, $i7);

        i9 = i9 + $i7;

        i8 = i8 - $i7;

        goto label1;

     label3:
        return;
    }

    public void close() throws java.io.IOException
    {
        com.jmatio.io.FileBufferedDataOutputStream r0;
        java.io.RandomAccessFile $r2;
        java.nio.channels.FileChannel $r1, $r3;
        boolean $z0;

        r0 := @this: com.jmatio.io.FileBufferedDataOutputStream;

        virtualinvoke r0.<com.jmatio.io.FileBufferedDataOutputStream: void flush()>();

        r0.<com.jmatio.io.FileBufferedDataOutputStream: java.nio.ByteBuffer buf> = null;

        $r1 = r0.<com.jmatio.io.FileBufferedDataOutputStream: java.nio.channels.FileChannel rwChannel>;

        $z0 = virtualinvoke $r1.<java.nio.channels.FileChannel: boolean isOpen()>();

        if $z0 == 0 goto label1;

        $r3 = r0.<com.jmatio.io.FileBufferedDataOutputStream: java.nio.channels.FileChannel rwChannel>;

        virtualinvoke $r3.<java.nio.channels.FileChannel: void close()>();

     label1:
        $r2 = r0.<com.jmatio.io.FileBufferedDataOutputStream: java.io.RandomAccessFile raFile>;

        virtualinvoke $r2.<java.io.RandomAccessFile: void close()>();

        return;
    }

    public void flush() throws java.io.IOException
    {
        com.jmatio.io.FileBufferedDataOutputStream r0;
        java.nio.ByteBuffer $r1, $r2, $r3, $r4, $r6;
        int $i0;
        java.nio.channels.FileChannel $r5;

        r0 := @this: com.jmatio.io.FileBufferedDataOutputStream;

        $r1 = r0.<com.jmatio.io.FileBufferedDataOutputStream: java.nio.ByteBuffer buf>;

        if $r1 == null goto label1;

        $r2 = r0.<com.jmatio.io.FileBufferedDataOutputStream: java.nio.ByteBuffer buf>;

        $i0 = virtualinvoke $r2.<java.nio.ByteBuffer: int position()>();

        if $i0 <= 0 goto label1;

        $r3 = r0.<com.jmatio.io.FileBufferedDataOutputStream: java.nio.ByteBuffer buf>;

        virtualinvoke $r3.<java.nio.ByteBuffer: java.nio.Buffer flip()>();

        $r5 = r0.<com.jmatio.io.FileBufferedDataOutputStream: java.nio.channels.FileChannel rwChannel>;

        $r4 = r0.<com.jmatio.io.FileBufferedDataOutputStream: java.nio.ByteBuffer buf>;

        virtualinvoke $r5.<java.nio.channels.FileChannel: int write(java.nio.ByteBuffer)>($r4);

        $r6 = r0.<com.jmatio.io.FileBufferedDataOutputStream: java.nio.ByteBuffer buf>;

        virtualinvoke $r6.<java.nio.ByteBuffer: java.nio.Buffer clear()>();

     label1:
        return;
    }

    public int size() throws java.io.IOException
    {
        com.jmatio.io.FileBufferedDataOutputStream r0;
        int $i1;
        long $l0;
        java.io.File $r1;

        r0 := @this: com.jmatio.io.FileBufferedDataOutputStream;

        virtualinvoke r0.<com.jmatio.io.FileBufferedDataOutputStream: void flush()>();

        $r1 = r0.<com.jmatio.io.FileBufferedDataOutputStream: java.io.File file>;

        $l0 = virtualinvoke $r1.<java.io.File: long length()>();

        $i1 = (int) $l0;

        return $i1;
    }

    public java.nio.ByteBuffer getByteBuffer() throws java.io.IOException
    {
        com.jmatio.io.FileBufferedDataOutputStream r0;
        long $l0;
        java.nio.channels.FileChannel $r2;
        java.nio.channels.FileChannel$MapMode $r3;
        java.io.File $r1;
        java.nio.MappedByteBuffer $r4;

        r0 := @this: com.jmatio.io.FileBufferedDataOutputStream;

        $r2 = r0.<com.jmatio.io.FileBufferedDataOutputStream: java.nio.channels.FileChannel rwChannel>;

        $r3 = <java.nio.channels.FileChannel$MapMode: java.nio.channels.FileChannel$MapMode READ_ONLY>;

        $r1 = r0.<com.jmatio.io.FileBufferedDataOutputStream: java.io.File file>;

        $l0 = virtualinvoke $r1.<java.io.File: long length()>();

        $r4 = virtualinvoke $r2.<java.nio.channels.FileChannel: java.nio.MappedByteBuffer map(java.nio.channels.FileChannel$MapMode,long,long)>($r3, 0L, $l0);

        return $r4;
    }

    public void write(java.nio.ByteBuffer) throws java.io.IOException
    {
        byte[] r0;
        com.jmatio.io.FileBufferedDataOutputStream r2;
        int $i0, $i1, $i2;
        java.nio.ByteBuffer r1;
        boolean $z0;

        r2 := @this: com.jmatio.io.FileBufferedDataOutputStream;

        r1 := @parameter0: java.nio.ByteBuffer;

        r0 = newarray (byte)[1024];

     label1:
        $z0 = virtualinvoke r1.<java.nio.ByteBuffer: boolean hasRemaining()>();

        if $z0 == 0 goto label2;

        $i0 = virtualinvoke r1.<java.nio.ByteBuffer: int remaining()>();

        $i1 = lengthof r0;

        $i2 = staticinvoke <java.lang.Math: int min(int,int)>($i0, $i1);

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[],int,int)>(r0, 0, $i2);

        virtualinvoke r2.<com.jmatio.io.FileBufferedDataOutputStream: void write(byte[],int,int)>(r0, 0, $i2);

        goto label1;

     label2:
        return;
    }

    public static void <clinit>()
    {
        <com.jmatio.io.FileBufferedDataOutputStream: int BUFFER_SIZE> = 1024;

        return;
    }
}
