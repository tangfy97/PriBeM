public class org.waveprotocol.box.server.persistence.memory.MemoryDeltaCollection extends java.lang.Object implements org.waveprotocol.box.server.waveserver.DeltaStore$DeltasAccess
{
    private final java.util.Map deltas;
    private final java.util.Map endDeltas;
    private final org.waveprotocol.wave.model.id.WaveletName waveletName;
    private org.waveprotocol.wave.model.version.HashedVersion endVersion;

    public void <init>(org.waveprotocol.wave.model.id.WaveletName)
    {
        org.waveprotocol.wave.model.id.WaveletName r3;
        org.waveprotocol.box.server.persistence.memory.MemoryDeltaCollection r0;
        java.util.HashMap $r1, $r2;

        r0 := @this: org.waveprotocol.box.server.persistence.memory.MemoryDeltaCollection;

        r3 := @parameter0: org.waveprotocol.wave.model.id.WaveletName;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = staticinvoke <com.google.common.collect.Maps: java.util.HashMap newHashMap()>();

        r0.<org.waveprotocol.box.server.persistence.memory.MemoryDeltaCollection: java.util.Map deltas> = $r1;

        $r2 = staticinvoke <com.google.common.collect.Maps: java.util.HashMap newHashMap()>();

        r0.<org.waveprotocol.box.server.persistence.memory.MemoryDeltaCollection: java.util.Map endDeltas> = $r2;

        r0.<org.waveprotocol.box.server.persistence.memory.MemoryDeltaCollection: org.waveprotocol.wave.model.version.HashedVersion endVersion> = null;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r3);

        r0.<org.waveprotocol.box.server.persistence.memory.MemoryDeltaCollection: org.waveprotocol.wave.model.id.WaveletName waveletName> = r3;

        return;
    }

    public boolean isEmpty()
    {
        org.waveprotocol.box.server.persistence.memory.MemoryDeltaCollection r0;
        java.util.Map $r1;
        boolean $z0;

        r0 := @this: org.waveprotocol.box.server.persistence.memory.MemoryDeltaCollection;

        $r1 = r0.<org.waveprotocol.box.server.persistence.memory.MemoryDeltaCollection: java.util.Map deltas>;

        $z0 = interfaceinvoke $r1.<java.util.Map: boolean isEmpty()>();

        return $z0;
    }

    public org.waveprotocol.wave.model.id.WaveletName getWaveletName()
    {
        org.waveprotocol.wave.model.id.WaveletName $r1;
        org.waveprotocol.box.server.persistence.memory.MemoryDeltaCollection r0;

        r0 := @this: org.waveprotocol.box.server.persistence.memory.MemoryDeltaCollection;

        $r1 = r0.<org.waveprotocol.box.server.persistence.memory.MemoryDeltaCollection: org.waveprotocol.wave.model.id.WaveletName waveletName>;

        return $r1;
    }

    public org.waveprotocol.wave.model.version.HashedVersion getEndVersion()
    {
        org.waveprotocol.wave.model.version.HashedVersion $r1;
        org.waveprotocol.box.server.persistence.memory.MemoryDeltaCollection r0;

        r0 := @this: org.waveprotocol.box.server.persistence.memory.MemoryDeltaCollection;

        $r1 = r0.<org.waveprotocol.box.server.persistence.memory.MemoryDeltaCollection: org.waveprotocol.wave.model.version.HashedVersion endVersion>;

        return $r1;
    }

    public org.waveprotocol.box.server.waveserver.WaveletDeltaRecord getDelta(long)
    {
        java.lang.Long $r2;
        org.waveprotocol.box.server.persistence.memory.MemoryDeltaCollection r0;
        java.util.Map $r1;
        long l0;
        java.lang.Object $r3;
        org.waveprotocol.box.server.waveserver.WaveletDeltaRecord $r4;

        r0 := @this: org.waveprotocol.box.server.persistence.memory.MemoryDeltaCollection;

        l0 := @parameter0: long;

        $r1 = r0.<org.waveprotocol.box.server.persistence.memory.MemoryDeltaCollection: java.util.Map deltas>;

        $r2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        $r3 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r2);

        $r4 = (org.waveprotocol.box.server.waveserver.WaveletDeltaRecord) $r3;

        return $r4;
    }

    public org.waveprotocol.box.server.waveserver.WaveletDeltaRecord getDeltaByEndVersion(long)
    {
        java.lang.Long $r2;
        org.waveprotocol.box.server.persistence.memory.MemoryDeltaCollection r0;
        java.util.Map $r1;
        long l0;
        java.lang.Object $r3;
        org.waveprotocol.box.server.waveserver.WaveletDeltaRecord $r4;

        r0 := @this: org.waveprotocol.box.server.persistence.memory.MemoryDeltaCollection;

        l0 := @parameter0: long;

        $r1 = r0.<org.waveprotocol.box.server.persistence.memory.MemoryDeltaCollection: java.util.Map endDeltas>;

        $r2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        $r3 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r2);

        $r4 = (org.waveprotocol.box.server.waveserver.WaveletDeltaRecord) $r3;

        return $r4;
    }

    public org.waveprotocol.wave.model.version.HashedVersion getAppliedAtVersion(long) throws com.google.protobuf.InvalidProtocolBufferException
    {
        org.waveprotocol.box.server.persistence.memory.MemoryDeltaCollection r0;
        org.waveprotocol.wave.model.version.HashedVersion $r2;
        long l0;
        org.waveprotocol.box.server.waveserver.WaveletDeltaRecord $r1;

        r0 := @this: org.waveprotocol.box.server.persistence.memory.MemoryDeltaCollection;

        l0 := @parameter0: long;

        $r1 = virtualinvoke r0.<org.waveprotocol.box.server.persistence.memory.MemoryDeltaCollection: org.waveprotocol.box.server.waveserver.WaveletDeltaRecord getDelta(long)>(l0);

        if $r1 == null goto label1;

        $r2 = virtualinvoke $r1.<org.waveprotocol.box.server.waveserver.WaveletDeltaRecord: org.waveprotocol.wave.model.version.HashedVersion getAppliedAtVersion()>();

        goto label2;

     label1:
        $r2 = null;

     label2:
        return $r2;
    }

    public org.waveprotocol.wave.model.version.HashedVersion getResultingVersion(long)
    {
        org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta $r2;
        org.waveprotocol.box.server.persistence.memory.MemoryDeltaCollection r0;
        org.waveprotocol.wave.model.version.HashedVersion $r3;
        long l0;
        org.waveprotocol.box.server.waveserver.WaveletDeltaRecord $r1;

        r0 := @this: org.waveprotocol.box.server.persistence.memory.MemoryDeltaCollection;

        l0 := @parameter0: long;

        $r1 = virtualinvoke r0.<org.waveprotocol.box.server.persistence.memory.MemoryDeltaCollection: org.waveprotocol.box.server.waveserver.WaveletDeltaRecord getDelta(long)>(l0);

        if $r1 == null goto label1;

        $r2 = $r1.<org.waveprotocol.box.server.waveserver.WaveletDeltaRecord: org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta transformed>;

        $r3 = virtualinvoke $r2.<org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta: org.waveprotocol.wave.model.version.HashedVersion getResultingVersion()>();

        goto label2;

     label1:
        $r3 = null;

     label2:
        return $r3;
    }

    public org.waveprotocol.box.server.waveserver.ByteStringMessage getAppliedDelta(long)
    {
        org.waveprotocol.box.server.persistence.memory.MemoryDeltaCollection r0;
        long l0;
        org.waveprotocol.box.server.waveserver.WaveletDeltaRecord $r1;
        org.waveprotocol.box.server.waveserver.ByteStringMessage $r2;

        r0 := @this: org.waveprotocol.box.server.persistence.memory.MemoryDeltaCollection;

        l0 := @parameter0: long;

        $r1 = virtualinvoke r0.<org.waveprotocol.box.server.persistence.memory.MemoryDeltaCollection: org.waveprotocol.box.server.waveserver.WaveletDeltaRecord getDelta(long)>(l0);

        if $r1 == null goto label1;

        $r2 = $r1.<org.waveprotocol.box.server.waveserver.WaveletDeltaRecord: org.waveprotocol.box.server.waveserver.ByteStringMessage applied>;

        goto label2;

     label1:
        $r2 = null;

     label2:
        return $r2;
    }

    public org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta getTransformedDelta(long)
    {
        org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta $r2;
        org.waveprotocol.box.server.persistence.memory.MemoryDeltaCollection r0;
        long l0;
        org.waveprotocol.box.server.waveserver.WaveletDeltaRecord $r1;

        r0 := @this: org.waveprotocol.box.server.persistence.memory.MemoryDeltaCollection;

        l0 := @parameter0: long;

        $r1 = virtualinvoke r0.<org.waveprotocol.box.server.persistence.memory.MemoryDeltaCollection: org.waveprotocol.box.server.waveserver.WaveletDeltaRecord getDelta(long)>(l0);

        if $r1 == null goto label1;

        $r2 = $r1.<org.waveprotocol.box.server.waveserver.WaveletDeltaRecord: org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta transformed>;

        goto label2;

     label1:
        $r2 = null;

     label2:
        return $r2;
    }

    public void close()
    {
        org.waveprotocol.box.server.persistence.memory.MemoryDeltaCollection r0;

        r0 := @this: org.waveprotocol.box.server.persistence.memory.MemoryDeltaCollection;

        return;
    }

    public void append(java.util.Collection)
    {
        org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta $r4, $r9;
        long $l0, $l2, $l4;
        byte $b1, $b3;
        java.lang.Long $r8, $r13;
        java.util.Map $r7, $r12;
        org.waveprotocol.wave.model.version.HashedVersion $r6, $r10, $r11, $r14;
        org.waveprotocol.box.server.waveserver.WaveletDeltaRecord r3;
        boolean $z0, $z1;
        java.util.Iterator $r1;
        java.util.Collection r0;
        org.waveprotocol.box.server.persistence.memory.MemoryDeltaCollection r5;
        java.lang.Object $r2;

        r5 := @this: org.waveprotocol.box.server.persistence.memory.MemoryDeltaCollection;

        r0 := @parameter0: java.util.Collection;

        $r1 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (org.waveprotocol.box.server.waveserver.WaveletDeltaRecord) $r2;

        $r4 = r3.<org.waveprotocol.box.server.waveserver.WaveletDeltaRecord: org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta transformed>;

        $l0 = virtualinvoke $r4.<org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta: long getAppliedAtVersion()>();

        $b1 = $l0 cmp 0L;

        if $b1 != 0 goto label2;

        $r14 = r5.<org.waveprotocol.box.server.persistence.memory.MemoryDeltaCollection: org.waveprotocol.wave.model.version.HashedVersion endVersion>;

        if $r14 == null goto label3;

     label2:
        $r6 = r5.<org.waveprotocol.box.server.persistence.memory.MemoryDeltaCollection: org.waveprotocol.wave.model.version.HashedVersion endVersion>;

        $l2 = virtualinvoke $r6.<org.waveprotocol.wave.model.version.HashedVersion: long getVersion()>();

        $b3 = $l0 cmp $l2;

        if $b3 != 0 goto label4;

     label3:
        $z1 = 1;

        goto label5;

     label4:
        $z1 = 0;

     label5:
        staticinvoke <com.google.common.base.Preconditions: void checkState(boolean)>($z1);

        $r7 = r5.<org.waveprotocol.box.server.persistence.memory.MemoryDeltaCollection: java.util.Map deltas>;

        $r8 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r8, r3);

        $r9 = r3.<org.waveprotocol.box.server.waveserver.WaveletDeltaRecord: org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta transformed>;

        $r10 = virtualinvoke $r9.<org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta: org.waveprotocol.wave.model.version.HashedVersion getResultingVersion()>();

        r5.<org.waveprotocol.box.server.persistence.memory.MemoryDeltaCollection: org.waveprotocol.wave.model.version.HashedVersion endVersion> = $r10;

        $r12 = r5.<org.waveprotocol.box.server.persistence.memory.MemoryDeltaCollection: java.util.Map endDeltas>;

        $r11 = r5.<org.waveprotocol.box.server.persistence.memory.MemoryDeltaCollection: org.waveprotocol.wave.model.version.HashedVersion endVersion>;

        $l4 = virtualinvoke $r11.<org.waveprotocol.wave.model.version.HashedVersion: long getVersion()>();

        $r13 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l4);

        interfaceinvoke $r12.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r13, r3);

        goto label1;

     label6:
        return;
    }
}
