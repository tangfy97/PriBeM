public class org.apache.xalan.lib.sql.DTMDocument extends org.apache.xml.dtm.ref.DTMDefaultBaseIterators
{
    private boolean DEBUG;
    protected static final java.lang.String S_NAMESPACE;
    protected static final java.lang.String S_ATTRIB_NOT_SUPPORTED;
    protected static final java.lang.String S_ISTRUE;
    protected static final java.lang.String S_ISFALSE;
    protected static final java.lang.String S_DOCUMENT;
    protected static final java.lang.String S_TEXT_NODE;
    protected static final java.lang.String S_ELEMENT_NODE;
    protected int m_Document_TypeID;
    protected int m_TextNode_TypeID;
    protected org.apache.xalan.lib.sql.ObjectArray m_ObjectArray;
    protected org.apache.xml.utils.SuballocatedIntVector m_attribute;
    protected int m_DocumentIdx;

    public void <init>(org.apache.xml.dtm.DTMManager, int)
    {
        org.apache.xml.utils.SuballocatedIntVector $r4;
        org.apache.xml.utils.XMLStringFactory $r2;
        org.apache.xml.dtm.DTMManager r1;
        int i0;
        org.apache.xalan.lib.sql.ObjectArray $r3;
        org.apache.xalan.lib.sql.DTMDocument r0;

        r0 := @this: org.apache.xalan.lib.sql.DTMDocument;

        r1 := @parameter0: org.apache.xml.dtm.DTMManager;

        i0 := @parameter1: int;

        $r2 = virtualinvoke r1.<org.apache.xml.dtm.DTMManager: org.apache.xml.utils.XMLStringFactory getXMLStringFactory()>();

        specialinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBaseIterators: void <init>(org.apache.xml.dtm.DTMManager,javax.xml.transform.Source,int,org.apache.xml.dtm.DTMWSFilter,org.apache.xml.utils.XMLStringFactory,boolean)>(r1, null, i0, null, $r2, 1);

        r0.<org.apache.xalan.lib.sql.DTMDocument: boolean DEBUG> = 0;

        r0.<org.apache.xalan.lib.sql.DTMDocument: int m_Document_TypeID> = 0;

        r0.<org.apache.xalan.lib.sql.DTMDocument: int m_TextNode_TypeID> = 0;

        $r3 = new org.apache.xalan.lib.sql.ObjectArray;

        specialinvoke $r3.<org.apache.xalan.lib.sql.ObjectArray: void <init>()>();

        r0.<org.apache.xalan.lib.sql.DTMDocument: org.apache.xalan.lib.sql.ObjectArray m_ObjectArray> = $r3;

        $r4 = new org.apache.xml.utils.SuballocatedIntVector;

        specialinvoke $r4.<org.apache.xml.utils.SuballocatedIntVector: void <init>(int)>(512);

        r0.<org.apache.xalan.lib.sql.DTMDocument: org.apache.xml.utils.SuballocatedIntVector m_attribute> = $r4;

        return;
    }

    private int allocateNodeObject(java.lang.Object)
    {
        int $i0, $i1, $i2;
        java.lang.Object r1;
        org.apache.xalan.lib.sql.ObjectArray $r2;
        org.apache.xalan.lib.sql.DTMDocument r0;

        r0 := @this: org.apache.xalan.lib.sql.DTMDocument;

        r1 := @parameter0: java.lang.Object;

        $i0 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int m_size>;

        $i1 = $i0 + 1;

        r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int m_size> = $i1;

        $r2 = r0.<org.apache.xalan.lib.sql.DTMDocument: org.apache.xalan.lib.sql.ObjectArray m_ObjectArray>;

        $i2 = virtualinvoke $r2.<org.apache.xalan.lib.sql.ObjectArray: int append(java.lang.Object)>(r1);

        return $i2;
    }

    protected int addElementWithData(java.lang.Object, int, int, int, int)
    {
        int i0, i1, i2, i3, $i4, $i5, $i6, $i8, $i10, $i12, $i14;
        org.apache.xml.utils.SuballocatedIntVector $r2, $r3, $r4, $r5, $r6, $r7, $r8;
        java.lang.Object r1;
        org.apache.xalan.lib.sql.DTMDocument r0;

        r0 := @this: org.apache.xalan.lib.sql.DTMDocument;

        r1 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        $i4 = virtualinvoke r0.<org.apache.xalan.lib.sql.DTMDocument: int addElement(int,int,int,int)>(i0, i1, i2, i3);

        $i5 = specialinvoke r0.<org.apache.xalan.lib.sql.DTMDocument: int allocateNodeObject(java.lang.Object)>(r1);

        $r2 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.SuballocatedIntVector m_firstch>;

        virtualinvoke $r2.<org.apache.xml.utils.SuballocatedIntVector: void setElementAt(int,int)>($i5, $i4);

        $r3 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.SuballocatedIntVector m_exptype>;

        $i6 = r0.<org.apache.xalan.lib.sql.DTMDocument: int m_TextNode_TypeID>;

        virtualinvoke $r3.<org.apache.xml.utils.SuballocatedIntVector: void setElementAt(int,int)>($i6, $i5);

        $r4 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.SuballocatedIntVector m_parent>;

        virtualinvoke $r4.<org.apache.xml.utils.SuballocatedIntVector: void setElementAt(int,int)>($i4, $i5);

        $r5 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.SuballocatedIntVector m_prevsib>;

        $i8 = (int) -1;

        virtualinvoke $r5.<org.apache.xml.utils.SuballocatedIntVector: void setElementAt(int,int)>($i8, $i5);

        $r6 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.SuballocatedIntVector m_nextsib>;

        $i10 = (int) -1;

        virtualinvoke $r6.<org.apache.xml.utils.SuballocatedIntVector: void setElementAt(int,int)>($i10, $i5);

        $r7 = r0.<org.apache.xalan.lib.sql.DTMDocument: org.apache.xml.utils.SuballocatedIntVector m_attribute>;

        $i12 = (int) -1;

        virtualinvoke $r7.<org.apache.xml.utils.SuballocatedIntVector: void setElementAt(int,int)>($i12, $i5);

        $r8 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.SuballocatedIntVector m_firstch>;

        $i14 = (int) -1;

        virtualinvoke $r8.<org.apache.xml.utils.SuballocatedIntVector: void setElementAt(int,int)>($i14, $i5);

        return $i4;
    }

    protected int addElement(int, int, int, int)
    {
        org.apache.xml.utils.SuballocatedIntVector $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12;
        java.lang.Exception $r13;
        java.lang.StringBuffer $r15, $r17, $r19;
        int $i0, i1, i2, i3, $i4, $i5, $i6, i7, i8, $i10, $i12, $i14, $i16, $i18, $i20, $i22, $i24;
        java.lang.String $r16, $r18;
        org.apache.xalan.lib.sql.DTMDocument r0;

        r0 := @this: org.apache.xalan.lib.sql.DTMDocument;

        i7 := @parameter0: int;

        i1 := @parameter1: int;

        i3 := @parameter2: int;

        i2 := @parameter3: int;

        $i10 = (int) -1;

        i8 = $i10;

     label1:
        $i0 = specialinvoke r0.<org.apache.xalan.lib.sql.DTMDocument: int allocateNodeObject(java.lang.Object)>("#element");

        i8 = $i0;

        $r1 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.SuballocatedIntVector m_exptype>;

        virtualinvoke $r1.<org.apache.xml.utils.SuballocatedIntVector: void setElementAt(int,int)>(i1, $i0);

        $r2 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.SuballocatedIntVector m_nextsib>;

        $i12 = (int) -1;

        virtualinvoke $r2.<org.apache.xml.utils.SuballocatedIntVector: void setElementAt(int,int)>($i12, $i0);

        $r3 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.SuballocatedIntVector m_prevsib>;

        virtualinvoke $r3.<org.apache.xml.utils.SuballocatedIntVector: void setElementAt(int,int)>(i2, $i0);

        $r4 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.SuballocatedIntVector m_parent>;

        virtualinvoke $r4.<org.apache.xml.utils.SuballocatedIntVector: void setElementAt(int,int)>(i3, $i0);

        $r5 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.SuballocatedIntVector m_firstch>;

        $i14 = (int) -1;

        virtualinvoke $r5.<org.apache.xml.utils.SuballocatedIntVector: void setElementAt(int,int)>($i14, $i0);

        $r6 = r0.<org.apache.xalan.lib.sql.DTMDocument: org.apache.xml.utils.SuballocatedIntVector m_attribute>;

        $i16 = (int) -1;

        virtualinvoke $r6.<org.apache.xml.utils.SuballocatedIntVector: void setElementAt(int,int)>($i16, $i0);

        $i18 = (int) -1;

        if i2 == $i18 goto label3;

        $r9 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.SuballocatedIntVector m_nextsib>;

        $i5 = virtualinvoke $r9.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>(i2);

        $i20 = (int) -1;

        if $i5 == $i20 goto label2;

        $r12 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.SuballocatedIntVector m_nextsib>;

        $r11 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.SuballocatedIntVector m_nextsib>;

        $i6 = virtualinvoke $r11.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>(i2);

        virtualinvoke $r12.<org.apache.xml.utils.SuballocatedIntVector: void setElementAt(int,int)>($i6, $i0);

     label2:
        $r10 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.SuballocatedIntVector m_nextsib>;

        virtualinvoke $r10.<org.apache.xml.utils.SuballocatedIntVector: void setElementAt(int,int)>($i0, i2);

     label3:
        $i22 = (int) -1;

        if i3 == $i22 goto label4;

        $r7 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.SuballocatedIntVector m_prevsib>;

        $i4 = virtualinvoke $r7.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>($i0);

        $i24 = (int) -1;

        if $i4 != $i24 goto label4;

        $r8 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.SuballocatedIntVector m_firstch>;

        virtualinvoke $r8.<org.apache.xml.utils.SuballocatedIntVector: void setElementAt(int,int)>($i0, i3);

     label4:
        goto label6;

     label5:
        $r13 := @caughtexception;

        $r19 = new java.lang.StringBuffer;

        specialinvoke $r19.<java.lang.StringBuffer: void <init>()>();

        $r15 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Error in addElement: ");

        $r16 = virtualinvoke $r13.<java.lang.Throwable: java.lang.String getMessage()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.xalan.lib.sql.DTMDocument: void error(java.lang.String)>($r18);

     label6:
        return i8;

        catch java.lang.Exception from label1 to label4 with label5;
    }

    protected int addAttributeToNode(java.lang.Object, int, int)
    {
        java.lang.StringBuffer $r15, $r17, $r19;
        int $i0, i1, i2, $i3, $i4, i5, $i7, $i9, $i11, $i13, $i15, $i17;
        java.lang.String $r16, $r18;
        org.apache.xml.utils.SuballocatedIntVector $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12;
        java.lang.Exception $r13;
        java.lang.Object r1;
        org.apache.xalan.lib.sql.DTMDocument r0;

        r0 := @this: org.apache.xalan.lib.sql.DTMDocument;

        r1 := @parameter0: java.lang.Object;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        $i7 = (int) -1;

        i5 = $i7;

     label1:
        $i0 = specialinvoke r0.<org.apache.xalan.lib.sql.DTMDocument: int allocateNodeObject(java.lang.Object)>(r1);

        i5 = $i0;

        $r2 = r0.<org.apache.xalan.lib.sql.DTMDocument: org.apache.xml.utils.SuballocatedIntVector m_attribute>;

        $i9 = (int) -1;

        virtualinvoke $r2.<org.apache.xml.utils.SuballocatedIntVector: void setElementAt(int,int)>($i9, $i0);

        $r3 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.SuballocatedIntVector m_exptype>;

        virtualinvoke $r3.<org.apache.xml.utils.SuballocatedIntVector: void setElementAt(int,int)>(i1, $i0);

        $r4 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.SuballocatedIntVector m_nextsib>;

        $i11 = (int) -1;

        virtualinvoke $r4.<org.apache.xml.utils.SuballocatedIntVector: void setElementAt(int,int)>($i11, $i0);

        $r5 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.SuballocatedIntVector m_prevsib>;

        $i13 = (int) -1;

        virtualinvoke $r5.<org.apache.xml.utils.SuballocatedIntVector: void setElementAt(int,int)>($i13, $i0);

        $r6 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.SuballocatedIntVector m_parent>;

        virtualinvoke $r6.<org.apache.xml.utils.SuballocatedIntVector: void setElementAt(int,int)>(i2, $i0);

        $r7 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.SuballocatedIntVector m_firstch>;

        $i15 = (int) -1;

        virtualinvoke $r7.<org.apache.xml.utils.SuballocatedIntVector: void setElementAt(int,int)>($i15, $i0);

        $r8 = r0.<org.apache.xalan.lib.sql.DTMDocument: org.apache.xml.utils.SuballocatedIntVector m_attribute>;

        $i3 = virtualinvoke $r8.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>(i2);

        $i17 = (int) -1;

        if $i3 == $i17 goto label2;

        $r10 = r0.<org.apache.xalan.lib.sql.DTMDocument: org.apache.xml.utils.SuballocatedIntVector m_attribute>;

        $i4 = virtualinvoke $r10.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>(i2);

        $r11 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.SuballocatedIntVector m_nextsib>;

        virtualinvoke $r11.<org.apache.xml.utils.SuballocatedIntVector: void setElementAt(int,int)>($i4, $i0);

        $r12 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.SuballocatedIntVector m_prevsib>;

        virtualinvoke $r12.<org.apache.xml.utils.SuballocatedIntVector: void setElementAt(int,int)>($i0, $i4);

     label2:
        $r9 = r0.<org.apache.xalan.lib.sql.DTMDocument: org.apache.xml.utils.SuballocatedIntVector m_attribute>;

        virtualinvoke $r9.<org.apache.xml.utils.SuballocatedIntVector: void setElementAt(int,int)>($i0, i2);

     label3:
        goto label5;

     label4:
        $r13 := @caughtexception;

        $r19 = new java.lang.StringBuffer;

        specialinvoke $r19.<java.lang.StringBuffer: void <init>()>();

        $r15 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Error in addAttributeToNode: ");

        $r16 = virtualinvoke $r13.<java.lang.Throwable: java.lang.String getMessage()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.xalan.lib.sql.DTMDocument: void error(java.lang.String)>($r18);

     label5:
        return i5;

        catch java.lang.Exception from label1 to label3 with label4;
    }

    protected void cloneAttributeFromNode(int, int)
    {
        org.apache.xml.utils.SuballocatedIntVector $r1, $r2, $r3;
        java.lang.Exception $r4;
        int i0, $i1, i2, $i3, $i5;
        org.apache.xalan.lib.sql.DTMDocument r0;

        r0 := @this: org.apache.xalan.lib.sql.DTMDocument;

        i0 := @parameter0: int;

        i2 := @parameter1: int;

     label1:
        $r1 = r0.<org.apache.xalan.lib.sql.DTMDocument: org.apache.xml.utils.SuballocatedIntVector m_attribute>;

        $i1 = virtualinvoke $r1.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>(i0);

        $i5 = (int) -1;

        if $i1 == $i5 goto label2;

        virtualinvoke r0.<org.apache.xalan.lib.sql.DTMDocument: void error(java.lang.String)>("Cloneing Attributes, where from Node already had addtibures assigned");

     label2:
        $r3 = r0.<org.apache.xalan.lib.sql.DTMDocument: org.apache.xml.utils.SuballocatedIntVector m_attribute>;

        $r2 = r0.<org.apache.xalan.lib.sql.DTMDocument: org.apache.xml.utils.SuballocatedIntVector m_attribute>;

        $i3 = virtualinvoke $r2.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>(i2);

        virtualinvoke $r3.<org.apache.xml.utils.SuballocatedIntVector: void setElementAt(int,int)>($i3, i0);

     label3:
        goto label5;

     label4:
        $r4 := @caughtexception;

        virtualinvoke r0.<org.apache.xalan.lib.sql.DTMDocument: void error(java.lang.String)>("Cloning attributes");

     label5:
        return;

        catch java.lang.Exception from label1 to label3 with label4;
    }

    public int getFirstAttribute(int)
    {
        java.io.PrintStream $r3;
        org.apache.xml.utils.SuballocatedIntVector $r1;
        java.lang.StringBuffer $r4, $r5, $r6, $r8;
        int i0, $i1, $i2, $i3, $i5, $i7;
        java.lang.String $r7;
        org.apache.xalan.lib.sql.DTMDocument r0;
        boolean $z0;

        r0 := @this: org.apache.xalan.lib.sql.DTMDocument;

        i0 := @parameter0: int;

        $z0 = r0.<org.apache.xalan.lib.sql.DTMDocument: boolean DEBUG>;

        if $z0 == 0 goto label1;

        $r3 = <java.lang.System: java.io.PrintStream out>;

        $r8 = new java.lang.StringBuffer;

        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("getFirstAttribute(");

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>($r7);

     label1:
        $i1 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int makeNodeIdentity(int)>(i0);

        $i5 = (int) -1;

        if $i1 == $i5 goto label2;

        $r1 = r0.<org.apache.xalan.lib.sql.DTMDocument: org.apache.xml.utils.SuballocatedIntVector m_attribute>;

        $i2 = virtualinvoke $r1.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>($i1);

        $i3 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int makeNodeHandle(int)>($i2);

        return $i3;

     label2:
        $i7 = (int) -1;

        return $i7;
    }

    public java.lang.String getNodeValue(int)
    {
        java.io.PrintStream $r5;
        java.lang.Exception $r10;
        java.lang.StringBuffer $r4, $r6, $r7, $r8;
        int i0, $i1;
        java.lang.Object $r2;
        java.lang.String $r3, $r9;
        org.apache.xalan.lib.sql.ObjectArray $r1;
        org.apache.xalan.lib.sql.DTMDocument r0;
        boolean $z0;

        r0 := @this: org.apache.xalan.lib.sql.DTMDocument;

        i0 := @parameter0: int;

        $z0 = r0.<org.apache.xalan.lib.sql.DTMDocument: boolean DEBUG>;

        if $z0 == 0 goto label1;

        $r5 = <java.lang.System: java.io.PrintStream out>;

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("getNodeValue(");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>($r9);

     label1:
        $r1 = r0.<org.apache.xalan.lib.sql.DTMDocument: org.apache.xalan.lib.sql.ObjectArray m_ObjectArray>;

        $i1 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int makeNodeIdentity(int)>(i0);

        $r2 = virtualinvoke $r1.<org.apache.xalan.lib.sql.ObjectArray: java.lang.Object getAt(int)>($i1);

        if $r2 == null goto label2;

        if $r2 == "#element" goto label2;

        $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>();

        return $r3;

     label2:
        return "";

     label3:
        $r10 := @caughtexception;

        virtualinvoke r0.<org.apache.xalan.lib.sql.DTMDocument: void error(java.lang.String)>("Getting String Value");

        return null;

        catch java.lang.Exception from label1 to label3 with label3;
    }

    public org.apache.xml.utils.XMLString getStringValue(int)
    {
        java.lang.Throwable $r17;
        org.apache.xml.utils.XMLString $r4, $r7, $r10;
        org.apache.xml.utils.XMLStringFactory $r3, $r5, $r9;
        java.lang.StringBuffer $r11, $r13, $r14, $r15;
        int i0, $i1, $i2;
        java.lang.String $r6, $r16, $r18;
        boolean $z0;
        java.io.PrintStream $r12;
        org.apache.xml.utils.FastStringBuffer $r8;
        java.lang.Object $r2;
        org.apache.xalan.lib.sql.ObjectArray $r1;
        org.apache.xalan.lib.sql.DTMDocument r0;

        r0 := @this: org.apache.xalan.lib.sql.DTMDocument;

        i0 := @parameter0: int;

        $i1 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int makeNodeIdentity(int)>(i0);

        $z0 = r0.<org.apache.xalan.lib.sql.DTMDocument: boolean DEBUG>;

        if $z0 == 0 goto label01;

        $r12 = <java.lang.System: java.io.PrintStream out>;

        $r11 = new java.lang.StringBuffer;

        specialinvoke $r11.<java.lang.StringBuffer: void <init>()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("getStringValue(");

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i1);

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r12.<java.io.PrintStream: void println(java.lang.String)>($r16);

     label01:
        $r1 = r0.<org.apache.xalan.lib.sql.DTMDocument: org.apache.xalan.lib.sql.ObjectArray m_ObjectArray>;

        $r2 = virtualinvoke $r1.<org.apache.xalan.lib.sql.ObjectArray: java.lang.Object getAt(int)>($i1);

        if $r2 != "#element" goto label09;

        $r8 = staticinvoke <org.apache.xml.utils.StringBufferPool: org.apache.xml.utils.FastStringBuffer get()>();

     label02:
        virtualinvoke r0.<org.apache.xalan.lib.sql.DTMDocument: void getNodeData(int,org.apache.xml.utils.FastStringBuffer)>($i1, $r8);

        $i2 = virtualinvoke $r8.<org.apache.xml.utils.FastStringBuffer: int length()>();

        if $i2 <= 0 goto label03;

        $r18 = virtualinvoke $r8.<org.apache.xml.utils.FastStringBuffer: java.lang.String toString()>();

        goto label04;

     label03:
        $r18 = "";

     label04:
        goto label11;

     label05:
        goto label08;

     label06:
        $r17 := @caughtexception;

        goto label12;

     label07:
        throw $r17;

     label08:
        $r9 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.XMLStringFactory m_xstrf>;

        $r10 = virtualinvoke $r9.<org.apache.xml.utils.XMLStringFactory: org.apache.xml.utils.XMLString newstr(java.lang.String)>($r18);

        return $r10;

     label09:
        if $r2 == null goto label10;

        $r5 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.XMLStringFactory m_xstrf>;

        $r6 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>();

        $r7 = virtualinvoke $r5.<org.apache.xml.utils.XMLStringFactory: org.apache.xml.utils.XMLString newstr(java.lang.String)>($r6);

        return $r7;

     label10:
        $r3 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.XMLStringFactory m_xstrf>;

        $r4 = virtualinvoke $r3.<org.apache.xml.utils.XMLStringFactory: org.apache.xml.utils.XMLString emptystr()>();

        return $r4;

     label11:
        staticinvoke <org.apache.xml.utils.StringBufferPool: void free(org.apache.xml.utils.FastStringBuffer)>($r8);

        goto label05;

     label12:
        staticinvoke <org.apache.xml.utils.StringBufferPool: void free(org.apache.xml.utils.FastStringBuffer)>($r8);

        goto label07;

        catch java.lang.Throwable from label02 to label06 with label06;
    }

    protected void getNodeData(int, org.apache.xml.utils.FastStringBuffer)
    {
        org.apache.xml.utils.FastStringBuffer r3;
        int i0, i1, $i3;
        java.lang.Object $r2;
        java.lang.String $r4;
        org.apache.xalan.lib.sql.ObjectArray $r1;
        org.apache.xalan.lib.sql.DTMDocument r0;

        r0 := @this: org.apache.xalan.lib.sql.DTMDocument;

        i0 := @parameter0: int;

        r3 := @parameter1: org.apache.xml.utils.FastStringBuffer;

        i1 = virtualinvoke r0.<org.apache.xalan.lib.sql.DTMDocument: int _firstch(int)>(i0);

        goto label4;

     label1:
        $r1 = r0.<org.apache.xalan.lib.sql.DTMDocument: org.apache.xalan.lib.sql.ObjectArray m_ObjectArray>;

        $r2 = virtualinvoke $r1.<org.apache.xalan.lib.sql.ObjectArray: java.lang.Object getAt(int)>(i1);

        if $r2 != "#element" goto label2;

        virtualinvoke r0.<org.apache.xalan.lib.sql.DTMDocument: void getNodeData(int,org.apache.xml.utils.FastStringBuffer)>(i1, r3);

        goto label3;

     label2:
        if $r2 == null goto label3;

        $r4 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke r3.<org.apache.xml.utils.FastStringBuffer: void append(java.lang.String)>($r4);

     label3:
        i1 = virtualinvoke r0.<org.apache.xalan.lib.sql.DTMDocument: int _nextsib(int)>(i1);

     label4:
        $i3 = (int) -1;

        if i1 != $i3 goto label1;

        return;
    }

    public int getNextAttribute(int)
    {
        java.io.PrintStream $r3;
        org.apache.xml.utils.SuballocatedIntVector $r1;
        java.lang.StringBuffer $r4, $r5, $r6, $r8;
        int i0, $i1, $i2, $i3, $i5, $i7;
        java.lang.String $r7;
        org.apache.xalan.lib.sql.DTMDocument r0;
        boolean $z0;

        r0 := @this: org.apache.xalan.lib.sql.DTMDocument;

        i0 := @parameter0: int;

        $i1 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int makeNodeIdentity(int)>(i0);

        $z0 = r0.<org.apache.xalan.lib.sql.DTMDocument: boolean DEBUG>;

        if $z0 == 0 goto label1;

        $r3 = <java.lang.System: java.io.PrintStream out>;

        $r8 = new java.lang.StringBuffer;

        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("getNextAttribute(");

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>($r7);

     label1:
        $i5 = (int) -1;

        if $i1 == $i5 goto label2;

        $r1 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.SuballocatedIntVector m_nextsib>;

        $i2 = virtualinvoke $r1.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>($i1);

        $i3 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int makeNodeHandle(int)>($i2);

        return $i3;

     label2:
        $i7 = (int) -1;

        return $i7;
    }

    protected int getNumberOfNodes()
    {
        java.io.PrintStream $r1;
        int $i0;
        org.apache.xalan.lib.sql.DTMDocument r0;
        boolean $z0;

        r0 := @this: org.apache.xalan.lib.sql.DTMDocument;

        $z0 = r0.<org.apache.xalan.lib.sql.DTMDocument: boolean DEBUG>;

        if $z0 == 0 goto label1;

        $r1 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>("getNumberOfNodes()");

     label1:
        $i0 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int m_size>;

        return $i0;
    }

    protected boolean nextNode()
    {
        java.io.PrintStream $r1;
        org.apache.xalan.lib.sql.DTMDocument r0;
        boolean $z0;

        r0 := @this: org.apache.xalan.lib.sql.DTMDocument;

        $z0 = r0.<org.apache.xalan.lib.sql.DTMDocument: boolean DEBUG>;

        if $z0 == 0 goto label1;

        $r1 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>("nextNode()");

     label1:
        return 0;
    }

    protected void createExpandedNameTable()
    {
        int $i0, $i1;
        org.apache.xml.dtm.ref.ExpandedNameTable $r1, $r2;
        org.apache.xalan.lib.sql.DTMDocument r0;

        r0 := @this: org.apache.xalan.lib.sql.DTMDocument;

        $r1 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.dtm.ref.ExpandedNameTable m_expandedNameTable>;

        $i0 = virtualinvoke $r1.<org.apache.xml.dtm.ref.ExpandedNameTable: int getExpandedTypeID(java.lang.String,java.lang.String,int)>("http://xml.apache.org/xalan/SQLExtension", "#root", 9);

        r0.<org.apache.xalan.lib.sql.DTMDocument: int m_Document_TypeID> = $i0;

        $r2 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.dtm.ref.ExpandedNameTable m_expandedNameTable>;

        $i1 = virtualinvoke $r2.<org.apache.xml.dtm.ref.ExpandedNameTable: int getExpandedTypeID(java.lang.String,java.lang.String,int)>("http://xml.apache.org/xalan/SQLExtension", "#text", 3);

        r0.<org.apache.xalan.lib.sql.DTMDocument: int m_TextNode_TypeID> = $i1;

        return;
    }

    public void dumpDTM()
    {
        org.apache.xml.utils.SuballocatedIntVector $r88;
        short $s9;
        java.lang.StringBuffer $r3, $r5, $r11, $r12, $r15, $r16, $r17, $r20, $r22, $r25, $r27, $r30, $r32, $r35, $r37, $r40, $r42, $r45, $r47, $r50, $r51, $r54, $r55, $r58, $r59, $r62, $r63, $r69, $r70, $r73, $r74, $r77, $r79, $r82, $r84, $r87, $r89, $r92, $r95, $r96, $r97, $r98, $r99, $r100, $r101, $r102, $r103, $r104, $r105, $r106, $r107, $r108, $r109, $r110, $r111;
        java.lang.String $r4, $r6, $r13, $r18, $r21, $r23, $r26, $r28, $r31, $r33, $r36, $r38, $r41, $r43, $r46, $r48, $r52, $r56, $r60, $r64, r67, $r71, $r75, $r78, $r80, $r85, $r90;
        java.io.FileOutputStream $r93;
        java.io.IOException $r65;
        java.io.File $r91;
        org.apache.xalan.lib.sql.DTMDocument r9;
        org.apache.xml.utils.XMLString $r83;
        boolean $z0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i19, $i21, $i23, $i25, $i27, $i29, $i31, $i33, $i35;
        java.io.PrintStream $r2, $r66, $r94;

        r9 := @this: org.apache.xalan.lib.sql.DTMDocument;

     label01:
        $r91 = new java.io.File;

        specialinvoke $r91.<java.io.File: void <init>(java.lang.String)>("DTMDump.txt");

        $r2 = <java.lang.System: java.io.PrintStream err>;

        $r92 = new java.lang.StringBuffer;

        specialinvoke $r92.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r92.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Dumping... ");

        $r4 = virtualinvoke $r91.<java.io.File: java.lang.String getAbsolutePath()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>($r6);

        $r94 = new java.io.PrintStream;

        $r93 = new java.io.FileOutputStream;

        specialinvoke $r93.<java.io.FileOutputStream: void <init>(java.io.File)>($r91);

        specialinvoke $r94.<java.io.PrintStream: void <init>(java.io.OutputStream)>($r93);

        goto label02;

     label02:
        $z0 = virtualinvoke r9.<org.apache.xalan.lib.sql.DTMDocument: boolean nextNode()>();

        if $z0 != 0 goto label02;

        i0 = r9.<org.apache.xml.dtm.ref.DTMDefaultBase: int m_size>;

        $r95 = new java.lang.StringBuffer;

        specialinvoke $r95.<java.lang.StringBuffer: void <init>()>();

        $r11 = virtualinvoke $r95.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Total nodes: ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r94.<java.io.PrintStream: void println(java.lang.String)>($r13);

        i10 = 0;

        goto label32;

     label03:
        $r96 = new java.lang.StringBuffer;

        specialinvoke $r96.<java.lang.StringBuffer: void <init>()>();

        $r15 = virtualinvoke $r96.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("=========== ");

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i10);

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ===========");

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r94.<java.io.PrintStream: void println(java.lang.String)>($r18);

        $r97 = new java.lang.StringBuffer;

        specialinvoke $r97.<java.lang.StringBuffer: void <init>()>();

        $r20 = virtualinvoke $r97.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("NodeName: ");

        $i1 = virtualinvoke r9.<org.apache.xml.dtm.ref.DTMDefaultBase: int makeNodeHandle(int)>(i10);

        $r21 = virtualinvoke r9.<org.apache.xalan.lib.sql.DTMDocument: java.lang.String getNodeName(int)>($i1);

        $r22 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r21);

        $r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r94.<java.io.PrintStream: void println(java.lang.String)>($r23);

        $r98 = new java.lang.StringBuffer;

        specialinvoke $r98.<java.lang.StringBuffer: void <init>()>();

        $r25 = virtualinvoke $r98.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("NodeNameX: ");

        $i2 = virtualinvoke r9.<org.apache.xml.dtm.ref.DTMDefaultBase: int makeNodeHandle(int)>(i10);

        $r26 = virtualinvoke r9.<org.apache.xalan.lib.sql.DTMDocument: java.lang.String getNodeNameX(int)>($i2);

        $r27 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r26);

        $r28 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r94.<java.io.PrintStream: void println(java.lang.String)>($r28);

        $r99 = new java.lang.StringBuffer;

        specialinvoke $r99.<java.lang.StringBuffer: void <init>()>();

        $r30 = virtualinvoke $r99.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("LocalName: ");

        $i3 = virtualinvoke r9.<org.apache.xml.dtm.ref.DTMDefaultBase: int makeNodeHandle(int)>(i10);

        $r31 = virtualinvoke r9.<org.apache.xalan.lib.sql.DTMDocument: java.lang.String getLocalName(int)>($i3);

        $r32 = virtualinvoke $r30.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r31);

        $r33 = virtualinvoke $r32.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r94.<java.io.PrintStream: void println(java.lang.String)>($r33);

        $r100 = new java.lang.StringBuffer;

        specialinvoke $r100.<java.lang.StringBuffer: void <init>()>();

        $r35 = virtualinvoke $r100.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("NamespaceURI: ");

        $i4 = virtualinvoke r9.<org.apache.xml.dtm.ref.DTMDefaultBase: int makeNodeHandle(int)>(i10);

        $r36 = virtualinvoke r9.<org.apache.xalan.lib.sql.DTMDocument: java.lang.String getNamespaceURI(int)>($i4);

        $r37 = virtualinvoke $r35.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r36);

        $r38 = virtualinvoke $r37.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r94.<java.io.PrintStream: void println(java.lang.String)>($r38);

        $r101 = new java.lang.StringBuffer;

        specialinvoke $r101.<java.lang.StringBuffer: void <init>()>();

        $r40 = virtualinvoke $r101.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Prefix: ");

        $i5 = virtualinvoke r9.<org.apache.xml.dtm.ref.DTMDefaultBase: int makeNodeHandle(int)>(i10);

        $r41 = virtualinvoke r9.<org.apache.xalan.lib.sql.DTMDocument: java.lang.String getPrefix(int)>($i5);

        $r42 = virtualinvoke $r40.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r41);

        $r43 = virtualinvoke $r42.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r94.<java.io.PrintStream: void println(java.lang.String)>($r43);

        $i6 = virtualinvoke r9.<org.apache.xml.dtm.ref.DTMDefaultBase: int makeNodeHandle(int)>(i10);

        $i7 = virtualinvoke r9.<org.apache.xalan.lib.sql.DTMDocument: int getExpandedTypeID(int)>($i6);

        $r102 = new java.lang.StringBuffer;

        specialinvoke $r102.<java.lang.StringBuffer: void <init>()>();

        $r45 = virtualinvoke $r102.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Expanded Type ID: ");

        $r46 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i7);

        $r47 = virtualinvoke $r45.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r46);

        $r48 = virtualinvoke $r47.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r94.<java.io.PrintStream: void println(java.lang.String)>($r48);

        $i8 = virtualinvoke r9.<org.apache.xml.dtm.ref.DTMDefaultBase: int makeNodeHandle(int)>(i10);

        $s9 = virtualinvoke r9.<org.apache.xalan.lib.sql.DTMDocument: short getNodeType(int)>($i8);

        $i17 = (int) $s9;

        tableswitch($i17)
        {
            case -1: goto label15;
            case 0: goto label18;
            case 1: goto label10;
            case 2: goto label04;
            case 3: goto label17;
            case 4: goto label05;
            case 5: goto label12;
            case 6: goto label11;
            case 7: goto label16;
            case 8: goto label06;
            case 9: goto label08;
            case 10: goto label09;
            case 11: goto label07;
            case 12: goto label14;
            case 13: goto label13;
            default: goto label18;
        };

     label04:
        r67 = "ATTRIBUTE_NODE";

        goto label19;

     label05:
        r67 = "CDATA_SECTION_NODE";

        goto label19;

     label06:
        r67 = "COMMENT_NODE";

        goto label19;

     label07:
        r67 = "DOCUMENT_FRAGMENT_NODE";

        goto label19;

     label08:
        r67 = "DOCUMENT_NODE";

        goto label19;

     label09:
        r67 = "DOCUMENT_NODE";

        goto label19;

     label10:
        r67 = "ELEMENT_NODE";

        goto label19;

     label11:
        r67 = "ENTITY_NODE";

        goto label19;

     label12:
        r67 = "ENTITY_REFERENCE_NODE";

        goto label19;

     label13:
        r67 = "NAMESPACE_NODE";

        goto label19;

     label14:
        r67 = "NOTATION_NODE";

        goto label19;

     label15:
        r67 = "NULL";

        goto label19;

     label16:
        r67 = "PROCESSING_INSTRUCTION_NODE";

        goto label19;

     label17:
        r67 = "TEXT_NODE";

        goto label19;

     label18:
        r67 = "Unknown!";

     label19:
        $r103 = new java.lang.StringBuffer;

        specialinvoke $r103.<java.lang.StringBuffer: void <init>()>();

        $r69 = virtualinvoke $r103.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Type: ");

        $r70 = virtualinvoke $r69.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r67);

        $r71 = virtualinvoke $r70.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r94.<java.io.PrintStream: void println(java.lang.String)>($r71);

        $i11 = virtualinvoke r9.<org.apache.xalan.lib.sql.DTMDocument: int _firstch(int)>(i10);

        $i19 = (int) -1;

        if $i19 != $i11 goto label20;

        virtualinvoke $r94.<java.io.PrintStream: void println(java.lang.String)>("First child: DTM.NULL");

        goto label22;

     label20:
        $i21 = (int) -2;

        if $i21 != $i11 goto label21;

        virtualinvoke $r94.<java.io.PrintStream: void println(java.lang.String)>("First child: NOTPROCESSED");

        goto label22;

     label21:
        $r104 = new java.lang.StringBuffer;

        specialinvoke $r104.<java.lang.StringBuffer: void <init>()>();

        $r50 = virtualinvoke $r104.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("First child: ");

        $r51 = virtualinvoke $r50.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i11);

        $r52 = virtualinvoke $r51.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r94.<java.io.PrintStream: void println(java.lang.String)>($r52);

     label22:
        $i12 = virtualinvoke r9.<org.apache.xalan.lib.sql.DTMDocument: int _prevsib(int)>(i10);

        $i23 = (int) -1;

        if $i23 != $i12 goto label23;

        virtualinvoke $r94.<java.io.PrintStream: void println(java.lang.String)>("Prev sibling: DTM.NULL");

        goto label25;

     label23:
        $i25 = (int) -2;

        if $i25 != $i12 goto label24;

        virtualinvoke $r94.<java.io.PrintStream: void println(java.lang.String)>("Prev sibling: NOTPROCESSED");

        goto label25;

     label24:
        $r105 = new java.lang.StringBuffer;

        specialinvoke $r105.<java.lang.StringBuffer: void <init>()>();

        $r54 = virtualinvoke $r105.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Prev sibling: ");

        $r55 = virtualinvoke $r54.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i12);

        $r56 = virtualinvoke $r55.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r94.<java.io.PrintStream: void println(java.lang.String)>($r56);

     label25:
        $i13 = virtualinvoke r9.<org.apache.xalan.lib.sql.DTMDocument: int _nextsib(int)>(i10);

        $i27 = (int) -1;

        if $i27 != $i13 goto label26;

        virtualinvoke $r94.<java.io.PrintStream: void println(java.lang.String)>("Next sibling: DTM.NULL");

        goto label28;

     label26:
        $i29 = (int) -2;

        if $i29 != $i13 goto label27;

        virtualinvoke $r94.<java.io.PrintStream: void println(java.lang.String)>("Next sibling: NOTPROCESSED");

        goto label28;

     label27:
        $r106 = new java.lang.StringBuffer;

        specialinvoke $r106.<java.lang.StringBuffer: void <init>()>();

        $r58 = virtualinvoke $r106.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Next sibling: ");

        $r59 = virtualinvoke $r58.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i13);

        $r60 = virtualinvoke $r59.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r94.<java.io.PrintStream: void println(java.lang.String)>($r60);

     label28:
        $i14 = virtualinvoke r9.<org.apache.xalan.lib.sql.DTMDocument: int _parent(int)>(i10);

        $i31 = (int) -1;

        if $i31 != $i14 goto label29;

        virtualinvoke $r94.<java.io.PrintStream: void println(java.lang.String)>("Parent: DTM.NULL");

        goto label31;

     label29:
        $i33 = (int) -2;

        if $i33 != $i14 goto label30;

        virtualinvoke $r94.<java.io.PrintStream: void println(java.lang.String)>("Parent: NOTPROCESSED");

        goto label31;

     label30:
        $r107 = new java.lang.StringBuffer;

        specialinvoke $r107.<java.lang.StringBuffer: void <init>()>();

        $r62 = virtualinvoke $r107.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Parent: ");

        $r63 = virtualinvoke $r62.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i14);

        $r64 = virtualinvoke $r63.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r94.<java.io.PrintStream: void println(java.lang.String)>($r64);

     label31:
        $i15 = virtualinvoke r9.<org.apache.xalan.lib.sql.DTMDocument: int _level(int)>(i10);

        $r108 = new java.lang.StringBuffer;

        specialinvoke $r108.<java.lang.StringBuffer: void <init>()>();

        $r73 = virtualinvoke $r108.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Level: ");

        $r74 = virtualinvoke $r73.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i15);

        $r75 = virtualinvoke $r74.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r94.<java.io.PrintStream: void println(java.lang.String)>($r75);

        $r109 = new java.lang.StringBuffer;

        specialinvoke $r109.<java.lang.StringBuffer: void <init>()>();

        $r77 = virtualinvoke $r109.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Node Value: ");

        $r78 = virtualinvoke r9.<org.apache.xalan.lib.sql.DTMDocument: java.lang.String getNodeValue(int)>(i10);

        $r79 = virtualinvoke $r77.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r78);

        $r80 = virtualinvoke $r79.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r94.<java.io.PrintStream: void println(java.lang.String)>($r80);

        $r110 = new java.lang.StringBuffer;

        specialinvoke $r110.<java.lang.StringBuffer: void <init>()>();

        $r82 = virtualinvoke $r110.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("String Value: ");

        $r83 = virtualinvoke r9.<org.apache.xalan.lib.sql.DTMDocument: org.apache.xml.utils.XMLString getStringValue(int)>(i10);

        $r84 = virtualinvoke $r82.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r83);

        $r85 = virtualinvoke $r84.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r94.<java.io.PrintStream: void println(java.lang.String)>($r85);

        $r111 = new java.lang.StringBuffer;

        specialinvoke $r111.<java.lang.StringBuffer: void <init>()>();

        $r87 = virtualinvoke $r111.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("First Attribute Node: ");

        $r88 = r9.<org.apache.xalan.lib.sql.DTMDocument: org.apache.xml.utils.SuballocatedIntVector m_attribute>;

        $i16 = virtualinvoke $r88.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>(i10);

        $r89 = virtualinvoke $r87.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i16);

        $r90 = virtualinvoke $r89.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r94.<java.io.PrintStream: void println(java.lang.String)>($r90);

        i10 = i10 + 1;

     label32:
        if i10 < i0 goto label03;

     label33:
        goto label35;

     label34:
        $r65 := @caughtexception;

        $r66 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r65.<java.lang.Throwable: void printStackTrace(java.io.PrintStream)>($r66);

        $i35 = (int) -1;

        staticinvoke <java.lang.System: void exit(int)>($i35);

     label35:
        return;

        catch java.io.IOException from label01 to label33 with label34;
    }

    protected static void dispatchNodeData(org.w3c.dom.Node, org.xml.sax.ContentHandler, int) throws org.xml.sax.SAXException
    {
        short $s0;
        org.w3c.dom.Node r0, r5;
        int i1, $i2, $i3, $i4;
        char[] $r3;
        java.lang.String $r1;
        org.xml.sax.ContentHandler r2;
        org.apache.xalan.lib.sql.DTMDocument$CharacterNodeHandler $r4;
        boolean $z0;

        r0 := @parameter0: org.w3c.dom.Node;

        r2 := @parameter1: org.xml.sax.ContentHandler;

        i1 := @parameter2: int;

        $s0 = interfaceinvoke r0.<org.w3c.dom.Node: short getNodeType()>();

        $i4 = (int) $s0;

        tableswitch($i4)
        {
            case 1: goto label1;
            case 2: goto label5;
            case 3: goto label5;
            case 4: goto label5;
            case 5: goto label7;
            case 6: goto label7;
            case 7: goto label4;
            case 8: goto label4;
            case 9: goto label1;
            case 10: goto label7;
            case 11: goto label1;
            default: goto label7;
        };

     label1:
        r5 = interfaceinvoke r0.<org.w3c.dom.Node: org.w3c.dom.Node getFirstChild()>();

        goto label3;

     label2:
        $i3 = i1 + 1;

        staticinvoke <org.apache.xalan.lib.sql.DTMDocument: void dispatchNodeData(org.w3c.dom.Node,org.xml.sax.ContentHandler,int)>(r5, r2, $i3);

        r5 = interfaceinvoke r5.<org.w3c.dom.Node: org.w3c.dom.Node getNextSibling()>();

     label3:
        if null != r5 goto label2;

        goto label7;

     label4:
        if 0 == i1 goto label5;

        goto label7;

     label5:
        $r1 = interfaceinvoke r0.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

        $z0 = r2 instanceof org.apache.xalan.lib.sql.DTMDocument$CharacterNodeHandler;

        if $z0 == 0 goto label6;

        $r4 = (org.apache.xalan.lib.sql.DTMDocument$CharacterNodeHandler) r2;

        interfaceinvoke $r4.<org.apache.xalan.lib.sql.DTMDocument$CharacterNodeHandler: void characters(org.w3c.dom.Node)>(r0);

        goto label7;

     label6:
        $r3 = virtualinvoke $r1.<java.lang.String: char[] toCharArray()>();

        $i2 = virtualinvoke $r1.<java.lang.String: int length()>();

        interfaceinvoke r2.<org.xml.sax.ContentHandler: void characters(char[],int,int)>($r3, 0, $i2);

        goto label7;

     label7:
        return;
    }

    public void setProperty(java.lang.String, java.lang.Object)
    {
        java.lang.Object r2;
        java.lang.String r1;
        org.apache.xalan.lib.sql.DTMDocument r0;

        r0 := @this: org.apache.xalan.lib.sql.DTMDocument;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

        return;
    }

    public javax.xml.transform.SourceLocator getSourceLocatorFor(int)
    {
        int i0;
        org.apache.xalan.lib.sql.DTMDocument r0;

        r0 := @this: org.apache.xalan.lib.sql.DTMDocument;

        i0 := @parameter0: int;

        return null;
    }

    protected int getNextNodeIdentity(int)
    {
        java.io.PrintStream $r2;
        java.lang.StringBuffer $r3, $r4, $r5, $r7;
        int i0, $i2;
        java.lang.String $r6;
        org.apache.xalan.lib.sql.DTMDocument r0;
        boolean $z0;

        r0 := @this: org.apache.xalan.lib.sql.DTMDocument;

        i0 := @parameter0: int;

        $z0 = r0.<org.apache.xalan.lib.sql.DTMDocument: boolean DEBUG>;

        if $z0 == 0 goto label1;

        $r2 = <java.lang.System: java.io.PrintStream out>;

        $r7 = new java.lang.StringBuffer;

        specialinvoke $r7.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("getNextNodeIdenty(");

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>($r6);

     label1:
        $i2 = (int) -1;

        return $i2;
    }

    public int getAttributeNode(int, java.lang.String, java.lang.String)
    {
        java.lang.StringBuffer $r3, $r4, $r5, $r7, $r8, $r10, $r11, $r13;
        int i0, $i2;
        java.lang.String r6, r9, $r12;
        boolean $z0;
        java.io.PrintStream $r2;
        org.apache.xalan.lib.sql.DTMDocument r0;

        r0 := @this: org.apache.xalan.lib.sql.DTMDocument;

        i0 := @parameter0: int;

        r6 := @parameter1: java.lang.String;

        r9 := @parameter2: java.lang.String;

        $z0 = r0.<org.apache.xalan.lib.sql.DTMDocument: boolean DEBUG>;

        if $z0 == 0 goto label1;

        $r2 = <java.lang.System: java.io.PrintStream out>;

        $r13 = new java.lang.StringBuffer;

        specialinvoke $r13.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("getAttributeNode(");

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(",");

        $r7 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(",");

        $r10 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>($r12);

     label1:
        $i2 = (int) -1;

        return $i2;
    }

    public java.lang.String getLocalName(int)
    {
        java.lang.StringBuffer $r2, $r4, $r5, $r6, $r8, $r10, $r12;
        int i0, $i1;
        java.lang.String $r1, $r7, $r11, $r13;
        boolean $z0;
        java.io.PrintStream $r3, $r9;
        org.apache.xalan.lib.sql.DTMDocument r0;

        r0 := @this: org.apache.xalan.lib.sql.DTMDocument;

        i0 := @parameter0: int;

        $i1 = virtualinvoke r0.<org.apache.xalan.lib.sql.DTMDocument: int getExpandedTypeID(int)>(i0);

        $z0 = r0.<org.apache.xalan.lib.sql.DTMDocument: boolean DEBUG>;

        if $z0 == 0 goto label1;

        r0.<org.apache.xalan.lib.sql.DTMDocument: boolean DEBUG> = 0;

        $r3 = <java.lang.System: java.io.PrintStream out>;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("getLocalName(");

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(") -> ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r3.<java.io.PrintStream: void print(java.lang.String)>($r7);

        $r9 = <java.lang.System: java.io.PrintStream out>;

        $r8 = new java.lang.StringBuffer;

        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("...");

        $r11 = virtualinvoke r0.<org.apache.xalan.lib.sql.DTMDocument: java.lang.String getLocalNameFromExpandedNameID(int)>($i1);

        $r12 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>($r13);

        r0.<org.apache.xalan.lib.sql.DTMDocument: boolean DEBUG> = 1;

     label1:
        $r1 = virtualinvoke r0.<org.apache.xalan.lib.sql.DTMDocument: java.lang.String getLocalNameFromExpandedNameID(int)>($i1);

        return $r1;
    }

    public java.lang.String getNodeName(int)
    {
        java.lang.StringBuffer $r2, $r4, $r5, $r6, $r8, $r10, $r12;
        int i0, $i1;
        java.lang.String $r1, $r7, $r11, $r13;
        boolean $z0;
        java.io.PrintStream $r3, $r9;
        org.apache.xalan.lib.sql.DTMDocument r0;

        r0 := @this: org.apache.xalan.lib.sql.DTMDocument;

        i0 := @parameter0: int;

        $i1 = virtualinvoke r0.<org.apache.xalan.lib.sql.DTMDocument: int getExpandedTypeID(int)>(i0);

        $z0 = r0.<org.apache.xalan.lib.sql.DTMDocument: boolean DEBUG>;

        if $z0 == 0 goto label1;

        r0.<org.apache.xalan.lib.sql.DTMDocument: boolean DEBUG> = 0;

        $r3 = <java.lang.System: java.io.PrintStream out>;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("getLocalName(");

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(") -> ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r3.<java.io.PrintStream: void print(java.lang.String)>($r7);

        $r9 = <java.lang.System: java.io.PrintStream out>;

        $r8 = new java.lang.StringBuffer;

        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("...");

        $r11 = virtualinvoke r0.<org.apache.xalan.lib.sql.DTMDocument: java.lang.String getLocalNameFromExpandedNameID(int)>($i1);

        $r12 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>($r13);

        r0.<org.apache.xalan.lib.sql.DTMDocument: boolean DEBUG> = 1;

     label1:
        $r1 = virtualinvoke r0.<org.apache.xalan.lib.sql.DTMDocument: java.lang.String getLocalNameFromExpandedNameID(int)>($i1);

        return $r1;
    }

    public boolean isAttributeSpecified(int)
    {
        java.io.PrintStream $r2;
        java.lang.StringBuffer $r1, $r3, $r4, $r5;
        int i0;
        java.lang.String $r6;
        org.apache.xalan.lib.sql.DTMDocument r0;
        boolean $z0;

        r0 := @this: org.apache.xalan.lib.sql.DTMDocument;

        i0 := @parameter0: int;

        $z0 = r0.<org.apache.xalan.lib.sql.DTMDocument: boolean DEBUG>;

        if $z0 == 0 goto label1;

        $r2 = <java.lang.System: java.io.PrintStream out>;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("isAttributeSpecified(");

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>($r6);

     label1:
        return 0;
    }

    public java.lang.String getUnparsedEntityURI(java.lang.String)
    {
        java.io.PrintStream $r2;
        java.lang.StringBuffer $r1, $r3, $r5, $r6;
        java.lang.String r4, $r7;
        org.apache.xalan.lib.sql.DTMDocument r0;
        boolean $z0;

        r0 := @this: org.apache.xalan.lib.sql.DTMDocument;

        r4 := @parameter0: java.lang.String;

        $z0 = r0.<org.apache.xalan.lib.sql.DTMDocument: boolean DEBUG>;

        if $z0 == 0 goto label1;

        $r2 = <java.lang.System: java.io.PrintStream out>;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("getUnparsedEntityURI(");

        $r5 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>($r7);

     label1:
        return "";
    }

    public org.xml.sax.DTDHandler getDTDHandler()
    {
        java.io.PrintStream $r1;
        org.apache.xalan.lib.sql.DTMDocument r0;
        boolean $z0;

        r0 := @this: org.apache.xalan.lib.sql.DTMDocument;

        $z0 = r0.<org.apache.xalan.lib.sql.DTMDocument: boolean DEBUG>;

        if $z0 == 0 goto label1;

        $r1 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>("getDTDHandler()");

     label1:
        return null;
    }

    public java.lang.String getPrefix(int)
    {
        java.io.PrintStream $r2;
        java.lang.StringBuffer $r1, $r3, $r4, $r5;
        int i0;
        java.lang.String $r6;
        org.apache.xalan.lib.sql.DTMDocument r0;
        boolean $z0;

        r0 := @this: org.apache.xalan.lib.sql.DTMDocument;

        i0 := @parameter0: int;

        $z0 = r0.<org.apache.xalan.lib.sql.DTMDocument: boolean DEBUG>;

        if $z0 == 0 goto label1;

        $r2 = <java.lang.System: java.io.PrintStream out>;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("getPrefix(");

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>($r6);

     label1:
        return "";
    }

    public org.xml.sax.EntityResolver getEntityResolver()
    {
        java.io.PrintStream $r1;
        org.apache.xalan.lib.sql.DTMDocument r0;
        boolean $z0;

        r0 := @this: org.apache.xalan.lib.sql.DTMDocument;

        $z0 = r0.<org.apache.xalan.lib.sql.DTMDocument: boolean DEBUG>;

        if $z0 == 0 goto label1;

        $r1 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>("getEntityResolver()");

     label1:
        return null;
    }

    public java.lang.String getDocumentTypeDeclarationPublicIdentifier()
    {
        java.io.PrintStream $r1;
        org.apache.xalan.lib.sql.DTMDocument r0;
        boolean $z0;

        r0 := @this: org.apache.xalan.lib.sql.DTMDocument;

        $z0 = r0.<org.apache.xalan.lib.sql.DTMDocument: boolean DEBUG>;

        if $z0 == 0 goto label1;

        $r1 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>("get_DTD_PubId()");

     label1:
        return "";
    }

    public org.xml.sax.ext.LexicalHandler getLexicalHandler()
    {
        java.io.PrintStream $r1;
        org.apache.xalan.lib.sql.DTMDocument r0;
        boolean $z0;

        r0 := @this: org.apache.xalan.lib.sql.DTMDocument;

        $z0 = r0.<org.apache.xalan.lib.sql.DTMDocument: boolean DEBUG>;

        if $z0 == 0 goto label1;

        $r1 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>("getLexicalHandler()");

     label1:
        return null;
    }

    public boolean needsTwoThreads()
    {
        java.io.PrintStream $r1;
        org.apache.xalan.lib.sql.DTMDocument r0;
        boolean $z0;

        r0 := @this: org.apache.xalan.lib.sql.DTMDocument;

        $z0 = r0.<org.apache.xalan.lib.sql.DTMDocument: boolean DEBUG>;

        if $z0 == 0 goto label1;

        $r1 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>("needsTwoThreads()");

     label1:
        return 0;
    }

    public org.xml.sax.ContentHandler getContentHandler()
    {
        java.io.PrintStream $r1;
        org.apache.xalan.lib.sql.DTMDocument r0;
        boolean $z0;

        r0 := @this: org.apache.xalan.lib.sql.DTMDocument;

        $z0 = r0.<org.apache.xalan.lib.sql.DTMDocument: boolean DEBUG>;

        if $z0 == 0 goto label1;

        $r1 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>("getContentHandler()");

     label1:
        return null;
    }

    public void dispatchToEvents(int, org.xml.sax.ContentHandler) throws org.xml.sax.SAXException
    {
        java.io.PrintStream $r2;
        java.lang.StringBuffer $r1, $r3, $r4, $r5, $r7, $r8;
        int i0;
        org.xml.sax.ContentHandler r6;
        java.lang.String $r9;
        org.apache.xalan.lib.sql.DTMDocument r0;
        boolean $z0;

        r0 := @this: org.apache.xalan.lib.sql.DTMDocument;

        i0 := @parameter0: int;

        r6 := @parameter1: org.xml.sax.ContentHandler;

        $z0 = r0.<org.apache.xalan.lib.sql.DTMDocument: boolean DEBUG>;

        if $z0 == 0 goto label1;

        $r2 = <java.lang.System: java.io.PrintStream out>;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("dispathcToEvents(");

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(",");

        $r7 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>($r9);

     label1:
        return;
    }

    public java.lang.String getNamespaceURI(int)
    {
        java.io.PrintStream $r2;
        java.lang.StringBuffer $r1, $r3, $r4, $r5;
        int i0;
        java.lang.String $r6;
        org.apache.xalan.lib.sql.DTMDocument r0;
        boolean $z0;

        r0 := @this: org.apache.xalan.lib.sql.DTMDocument;

        i0 := @parameter0: int;

        $z0 = r0.<org.apache.xalan.lib.sql.DTMDocument: boolean DEBUG>;

        if $z0 == 0 goto label1;

        $r2 = <java.lang.System: java.io.PrintStream out>;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("getNamespaceURI(");

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>($r6);

     label1:
        return "";
    }

    public void dispatchCharactersEvents(int, org.xml.sax.ContentHandler, boolean) throws org.xml.sax.SAXException
    {
        org.apache.xml.utils.XMLString $r3, $r4;
        java.lang.StringBuffer $r5, $r7, $r8, $r9, $r10, $r11, $r12, $r13;
        org.w3c.dom.Node $r1;
        int i0;
        org.xml.sax.ContentHandler r2;
        java.lang.String $r14;
        boolean $z0, z1;
        java.io.PrintStream $r6;
        org.apache.xalan.lib.sql.DTMDocument r0;

        r0 := @this: org.apache.xalan.lib.sql.DTMDocument;

        i0 := @parameter0: int;

        r2 := @parameter1: org.xml.sax.ContentHandler;

        z1 := @parameter2: boolean;

        $z0 = r0.<org.apache.xalan.lib.sql.DTMDocument: boolean DEBUG>;

        if $z0 == 0 goto label1;

        $r6 = <java.lang.System: java.io.PrintStream out>;

        $r5 = new java.lang.StringBuffer;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("dispatchCharacterEvents(");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(",");

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r2);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(",");

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(boolean)>(z1);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r6.<java.io.PrintStream: void println(java.lang.String)>($r14);

     label1:
        if z1 == 0 goto label2;

        $r3 = virtualinvoke r0.<org.apache.xalan.lib.sql.DTMDocument: org.apache.xml.utils.XMLString getStringValue(int)>(i0);

        $r4 = interfaceinvoke $r3.<org.apache.xml.utils.XMLString: org.apache.xml.utils.XMLString fixWhiteSpace(boolean,boolean,boolean)>(1, 1, 0);

        interfaceinvoke $r4.<org.apache.xml.utils.XMLString: void dispatchCharactersEvents(org.xml.sax.ContentHandler)>(r2);

        goto label3;

     label2:
        virtualinvoke r0.<org.apache.xalan.lib.sql.DTMDocument: short getNodeType(int)>(i0);

        $r1 = virtualinvoke r0.<org.apache.xalan.lib.sql.DTMDocument: org.w3c.dom.Node getNode(int)>(i0);

        staticinvoke <org.apache.xalan.lib.sql.DTMDocument: void dispatchNodeData(org.w3c.dom.Node,org.xml.sax.ContentHandler,int)>($r1, r2, 0);

     label3:
        return;
    }

    public boolean supportsPreStripping()
    {
        java.io.PrintStream $r1;
        org.apache.xalan.lib.sql.DTMDocument r0;
        boolean $z0, $z1;

        r0 := @this: org.apache.xalan.lib.sql.DTMDocument;

        $z0 = r0.<org.apache.xalan.lib.sql.DTMDocument: boolean DEBUG>;

        if $z0 == 0 goto label1;

        $r1 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>("supportsPreStripping()");

     label1:
        $z1 = specialinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: boolean supportsPreStripping()>();

        return $z1;
    }

    protected int _exptype(int)
    {
        java.io.PrintStream $r2;
        java.lang.StringBuffer $r1, $r3, $r4, $r5;
        int i0, $i1;
        java.lang.String $r6;
        org.apache.xalan.lib.sql.DTMDocument r0;
        boolean $z0;

        r0 := @this: org.apache.xalan.lib.sql.DTMDocument;

        i0 := @parameter0: int;

        $z0 = r0.<org.apache.xalan.lib.sql.DTMDocument: boolean DEBUG>;

        if $z0 == 0 goto label1;

        $r2 = <java.lang.System: java.io.PrintStream out>;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("_exptype(");

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>($r6);

     label1:
        $i1 = specialinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int _exptype(int)>(i0);

        return $i1;
    }

    protected org.apache.xml.utils.SuballocatedIntVector findNamespaceContext(int)
    {
        java.io.PrintStream $r3;
        org.apache.xml.utils.SuballocatedIntVector $r1;
        java.lang.StringBuffer $r2, $r4, $r5, $r6;
        int i0;
        java.lang.String $r7;
        org.apache.xalan.lib.sql.DTMDocument r0;
        boolean $z0;

        r0 := @this: org.apache.xalan.lib.sql.DTMDocument;

        i0 := @parameter0: int;

        $z0 = r0.<org.apache.xalan.lib.sql.DTMDocument: boolean DEBUG>;

        if $z0 == 0 goto label1;

        $r3 = <java.lang.System: java.io.PrintStream out>;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("SuballocatedIntVector(");

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>($r7);

     label1:
        $r1 = specialinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.SuballocatedIntVector findNamespaceContext(int)>(i0);

        return $r1;
    }

    protected int _prevsib(int)
    {
        java.io.PrintStream $r2;
        java.lang.StringBuffer $r1, $r3, $r4, $r5;
        int i0, $i1;
        java.lang.String $r6;
        org.apache.xalan.lib.sql.DTMDocument r0;
        boolean $z0;

        r0 := @this: org.apache.xalan.lib.sql.DTMDocument;

        i0 := @parameter0: int;

        $z0 = r0.<org.apache.xalan.lib.sql.DTMDocument: boolean DEBUG>;

        if $z0 == 0 goto label1;

        $r2 = <java.lang.System: java.io.PrintStream out>;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("_prevsib(");

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>($r6);

     label1:
        $i1 = specialinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int _prevsib(int)>(i0);

        return $i1;
    }

    protected short _type(int)
    {
        java.io.PrintStream $r2;
        short $s1;
        java.lang.StringBuffer $r1, $r3, $r4, $r5;
        int i0;
        java.lang.String $r6;
        org.apache.xalan.lib.sql.DTMDocument r0;
        boolean $z0;

        r0 := @this: org.apache.xalan.lib.sql.DTMDocument;

        i0 := @parameter0: int;

        $z0 = r0.<org.apache.xalan.lib.sql.DTMDocument: boolean DEBUG>;

        if $z0 == 0 goto label1;

        $r2 = <java.lang.System: java.io.PrintStream out>;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("_type(");

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>($r6);

     label1:
        $s1 = specialinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: short _type(int)>(i0);

        return $s1;
    }

    public org.w3c.dom.Node getNode(int)
    {
        java.io.PrintStream $r3;
        java.lang.StringBuffer $r2, $r4, $r5, $r6;
        org.w3c.dom.Node $r1;
        int i0;
        java.lang.String $r7;
        org.apache.xalan.lib.sql.DTMDocument r0;
        boolean $z0;

        r0 := @this: org.apache.xalan.lib.sql.DTMDocument;

        i0 := @parameter0: int;

        $z0 = r0.<org.apache.xalan.lib.sql.DTMDocument: boolean DEBUG>;

        if $z0 == 0 goto label1;

        $r3 = <java.lang.System: java.io.PrintStream out>;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("getNode(");

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>($r7);

     label1:
        $r1 = specialinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.w3c.dom.Node getNode(int)>(i0);

        return $r1;
    }

    public int getPreviousSibling(int)
    {
        java.io.PrintStream $r2;
        java.lang.StringBuffer $r1, $r3, $r4, $r5;
        int i0, $i1;
        java.lang.String $r6;
        org.apache.xalan.lib.sql.DTMDocument r0;
        boolean $z0;

        r0 := @this: org.apache.xalan.lib.sql.DTMDocument;

        i0 := @parameter0: int;

        $z0 = r0.<org.apache.xalan.lib.sql.DTMDocument: boolean DEBUG>;

        if $z0 == 0 goto label1;

        $r2 = <java.lang.System: java.io.PrintStream out>;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("getPrevSib(");

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>($r6);

     label1:
        $i1 = specialinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int getPreviousSibling(int)>(i0);

        return $i1;
    }

    public java.lang.String getDocumentStandalone(int)
    {
        java.io.PrintStream $r3;
        java.lang.StringBuffer $r2, $r4, $r5, $r6;
        int i0;
        java.lang.String $r1, $r7;
        org.apache.xalan.lib.sql.DTMDocument r0;
        boolean $z0;

        r0 := @this: org.apache.xalan.lib.sql.DTMDocument;

        i0 := @parameter0: int;

        $z0 = r0.<org.apache.xalan.lib.sql.DTMDocument: boolean DEBUG>;

        if $z0 == 0 goto label1;

        $r3 = <java.lang.System: java.io.PrintStream out>;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("getDOcStandAlone(");

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>($r7);

     label1:
        $r1 = specialinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: java.lang.String getDocumentStandalone(int)>(i0);

        return $r1;
    }

    public java.lang.String getNodeNameX(int)
    {
        java.io.PrintStream $r3;
        java.lang.StringBuffer $r2, $r4, $r5, $r6;
        int i0;
        java.lang.String $r1, $r7;
        org.apache.xalan.lib.sql.DTMDocument r0;
        boolean $z0;

        r0 := @this: org.apache.xalan.lib.sql.DTMDocument;

        i0 := @parameter0: int;

        $z0 = r0.<org.apache.xalan.lib.sql.DTMDocument: boolean DEBUG>;

        if $z0 == 0 goto label1;

        $r3 = <java.lang.System: java.io.PrintStream out>;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("getNodeNameX(");

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>($r7);

     label1:
        $r1 = virtualinvoke r0.<org.apache.xalan.lib.sql.DTMDocument: java.lang.String getNodeName(int)>(i0);

        return $r1;
    }

    public void setFeature(java.lang.String, boolean)
    {
        java.io.PrintStream $r3;
        java.lang.StringBuffer $r2, $r4, $r5, $r6, $r7, $r8;
        java.lang.String r1, $r9;
        org.apache.xalan.lib.sql.DTMDocument r0;
        boolean $z0, z1;

        r0 := @this: org.apache.xalan.lib.sql.DTMDocument;

        r1 := @parameter0: java.lang.String;

        z1 := @parameter1: boolean;

        $z0 = r0.<org.apache.xalan.lib.sql.DTMDocument: boolean DEBUG>;

        if $z0 == 0 goto label1;

        $r3 = <java.lang.System: java.io.PrintStream out>;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("setFeature(");

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(",");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(boolean)>(z1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>($r9);

     label1:
        specialinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: void setFeature(java.lang.String,boolean)>(r1, z1);

        return;
    }

    protected int _parent(int)
    {
        java.io.PrintStream $r2;
        java.lang.StringBuffer $r1, $r3, $r4, $r5;
        int i0, $i1;
        java.lang.String $r6;
        org.apache.xalan.lib.sql.DTMDocument r0;
        boolean $z0;

        r0 := @this: org.apache.xalan.lib.sql.DTMDocument;

        i0 := @parameter0: int;

        $z0 = r0.<org.apache.xalan.lib.sql.DTMDocument: boolean DEBUG>;

        if $z0 == 0 goto label1;

        $r2 = <java.lang.System: java.io.PrintStream out>;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("_parent(");

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>($r6);

     label1:
        $i1 = specialinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int _parent(int)>(i0);

        return $i1;
    }

    protected void indexNode(int, int)
    {
        java.io.PrintStream $r2;
        java.lang.StringBuffer $r1, $r3, $r4, $r5, $r6, $r7;
        int i0, i1;
        java.lang.String $r8;
        org.apache.xalan.lib.sql.DTMDocument r0;
        boolean $z0;

        r0 := @this: org.apache.xalan.lib.sql.DTMDocument;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $z0 = r0.<org.apache.xalan.lib.sql.DTMDocument: boolean DEBUG>;

        if $z0 == 0 goto label1;

        $r2 = <java.lang.System: java.io.PrintStream out>;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("indexNode(");

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(",");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>($r8);

     label1:
        specialinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: void indexNode(int,int)>(i0, i1);

        return;
    }

    protected boolean getShouldStripWhitespace()
    {
        java.io.PrintStream $r1;
        org.apache.xalan.lib.sql.DTMDocument r0;
        boolean $z0, $z1;

        r0 := @this: org.apache.xalan.lib.sql.DTMDocument;

        $z0 = r0.<org.apache.xalan.lib.sql.DTMDocument: boolean DEBUG>;

        if $z0 == 0 goto label1;

        $r1 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>("getShouldStripWS()");

     label1:
        $z1 = specialinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: boolean getShouldStripWhitespace()>();

        return $z1;
    }

    protected void popShouldStripWhitespace()
    {
        java.io.PrintStream $r1;
        org.apache.xalan.lib.sql.DTMDocument r0;
        boolean $z0;

        r0 := @this: org.apache.xalan.lib.sql.DTMDocument;

        $z0 = r0.<org.apache.xalan.lib.sql.DTMDocument: boolean DEBUG>;

        if $z0 == 0 goto label1;

        $r1 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>("popShouldStripWS()");

     label1:
        specialinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: void popShouldStripWhitespace()>();

        return;
    }

    public boolean isNodeAfter(int, int)
    {
        java.io.PrintStream $r2;
        java.lang.StringBuffer $r1, $r3, $r4, $r5, $r6, $r7;
        int i0, i1;
        java.lang.String $r8;
        org.apache.xalan.lib.sql.DTMDocument r0;
        boolean $z0, $z1;

        r0 := @this: org.apache.xalan.lib.sql.DTMDocument;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $z0 = r0.<org.apache.xalan.lib.sql.DTMDocument: boolean DEBUG>;

        if $z0 == 0 goto label1;

        $r2 = <java.lang.System: java.io.PrintStream out>;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("isNodeAfter(");

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(",");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>($r8);

     label1:
        $z1 = specialinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: boolean isNodeAfter(int,int)>(i0, i1);

        return $z1;
    }

    public int getNamespaceType(int)
    {
        java.io.PrintStream $r2;
        java.lang.StringBuffer $r1, $r3, $r4, $r5;
        int i0, $i1;
        java.lang.String $r6;
        org.apache.xalan.lib.sql.DTMDocument r0;
        boolean $z0;

        r0 := @this: org.apache.xalan.lib.sql.DTMDocument;

        i0 := @parameter0: int;

        $z0 = r0.<org.apache.xalan.lib.sql.DTMDocument: boolean DEBUG>;

        if $z0 == 0 goto label1;

        $r2 = <java.lang.System: java.io.PrintStream out>;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("getNamespaceType(");

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>($r6);

     label1:
        $i1 = specialinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int getNamespaceType(int)>(i0);

        return $i1;
    }

    protected int _level(int)
    {
        java.io.PrintStream $r2;
        java.lang.StringBuffer $r1, $r3, $r4, $r5;
        int i0, $i1;
        java.lang.String $r6;
        org.apache.xalan.lib.sql.DTMDocument r0;
        boolean $z0;

        r0 := @this: org.apache.xalan.lib.sql.DTMDocument;

        i0 := @parameter0: int;

        $z0 = r0.<org.apache.xalan.lib.sql.DTMDocument: boolean DEBUG>;

        if $z0 == 0 goto label1;

        $r2 = <java.lang.System: java.io.PrintStream out>;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("_level(");

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>($r6);

     label1:
        $i1 = specialinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int _level(int)>(i0);

        return $i1;
    }

    protected void pushShouldStripWhitespace(boolean)
    {
        java.io.PrintStream $r2;
        java.lang.StringBuffer $r1, $r3, $r4, $r5;
        java.lang.String $r6;
        org.apache.xalan.lib.sql.DTMDocument r0;
        boolean $z0, z1;

        r0 := @this: org.apache.xalan.lib.sql.DTMDocument;

        z1 := @parameter0: boolean;

        $z0 = r0.<org.apache.xalan.lib.sql.DTMDocument: boolean DEBUG>;

        if $z0 == 0 goto label1;

        $r2 = <java.lang.System: java.io.PrintStream out>;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("push_ShouldStripWS(");

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(boolean)>(z1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>($r6);

     label1:
        specialinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: void pushShouldStripWhitespace(boolean)>(z1);

        return;
    }

    public java.lang.String getDocumentVersion(int)
    {
        java.io.PrintStream $r3;
        java.lang.StringBuffer $r2, $r4, $r5, $r6;
        int i0;
        java.lang.String $r1, $r7;
        org.apache.xalan.lib.sql.DTMDocument r0;
        boolean $z0;

        r0 := @this: org.apache.xalan.lib.sql.DTMDocument;

        i0 := @parameter0: int;

        $z0 = r0.<org.apache.xalan.lib.sql.DTMDocument: boolean DEBUG>;

        if $z0 == 0 goto label1;

        $r3 = <java.lang.System: java.io.PrintStream out>;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("getDocVer(");

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>($r7);

     label1:
        $r1 = specialinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: java.lang.String getDocumentVersion(int)>(i0);

        return $r1;
    }

    public boolean isSupported(java.lang.String, java.lang.String)
    {
        java.io.PrintStream $r4;
        java.lang.StringBuffer $r3, $r5, $r6, $r7, $r8, $r9;
        java.lang.String r1, r2, $r10;
        org.apache.xalan.lib.sql.DTMDocument r0;
        boolean $z0, $z1;

        r0 := @this: org.apache.xalan.lib.sql.DTMDocument;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $z0 = r0.<org.apache.xalan.lib.sql.DTMDocument: boolean DEBUG>;

        if $z0 == 0 goto label1;

        $r4 = <java.lang.System: java.io.PrintStream out>;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("isSupported(");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(",");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r2);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>($r10);

     label1:
        $z1 = specialinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: boolean isSupported(java.lang.String,java.lang.String)>(r1, r2);

        return $z1;
    }

    protected void setShouldStripWhitespace(boolean)
    {
        java.io.PrintStream $r2;
        java.lang.StringBuffer $r1, $r3, $r4, $r5;
        java.lang.String $r6;
        org.apache.xalan.lib.sql.DTMDocument r0;
        boolean $z0, z1;

        r0 := @this: org.apache.xalan.lib.sql.DTMDocument;

        z1 := @parameter0: boolean;

        $z0 = r0.<org.apache.xalan.lib.sql.DTMDocument: boolean DEBUG>;

        if $z0 == 0 goto label1;

        $r2 = <java.lang.System: java.io.PrintStream out>;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("set_ShouldStripWS(");

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(boolean)>(z1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>($r6);

     label1:
        specialinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: void setShouldStripWhitespace(boolean)>(z1);

        return;
    }

    protected void ensureSizeOfIndex(int, int)
    {
        java.io.PrintStream $r2;
        java.lang.StringBuffer $r1, $r3, $r4, $r5, $r6, $r7;
        int i0, i1;
        java.lang.String $r8;
        org.apache.xalan.lib.sql.DTMDocument r0;
        boolean $z0;

        r0 := @this: org.apache.xalan.lib.sql.DTMDocument;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $z0 = r0.<org.apache.xalan.lib.sql.DTMDocument: boolean DEBUG>;

        if $z0 == 0 goto label1;

        $r2 = <java.lang.System: java.io.PrintStream out>;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("ensureSizeOfIndex(");

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(",");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>($r8);

     label1:
        specialinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: void ensureSizeOfIndex(int,int)>(i0, i1);

        return;
    }

    protected void ensureSize(int)
    {
        java.io.PrintStream $r2;
        java.lang.StringBuffer $r1, $r3, $r4, $r5;
        int i0;
        java.lang.String $r6;
        org.apache.xalan.lib.sql.DTMDocument r0;
        boolean $z0;

        r0 := @this: org.apache.xalan.lib.sql.DTMDocument;

        i0 := @parameter0: int;

        $z0 = r0.<org.apache.xalan.lib.sql.DTMDocument: boolean DEBUG>;

        if $z0 == 0 goto label1;

        $r2 = <java.lang.System: java.io.PrintStream out>;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("ensureSize(");

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>($r6);

     label1:
        return;
    }

    public java.lang.String getDocumentEncoding(int)
    {
        java.io.PrintStream $r3;
        java.lang.StringBuffer $r2, $r4, $r5, $r6;
        int i0;
        java.lang.String $r1, $r7;
        org.apache.xalan.lib.sql.DTMDocument r0;
        boolean $z0;

        r0 := @this: org.apache.xalan.lib.sql.DTMDocument;

        i0 := @parameter0: int;

        $z0 = r0.<org.apache.xalan.lib.sql.DTMDocument: boolean DEBUG>;

        if $z0 == 0 goto label1;

        $r3 = <java.lang.System: java.io.PrintStream out>;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("getDocumentEncoding(");

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>($r7);

     label1:
        $r1 = specialinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: java.lang.String getDocumentEncoding(int)>(i0);

        return $r1;
    }

    public void appendChild(int, boolean, boolean)
    {
        java.io.PrintStream $r2;
        java.lang.StringBuffer $r1, $r3, $r4, $r5, $r6, $r7, $r8, $r9;
        int i0;
        java.lang.String $r10;
        org.apache.xalan.lib.sql.DTMDocument r0;
        boolean $z0, z1, z2;

        r0 := @this: org.apache.xalan.lib.sql.DTMDocument;

        i0 := @parameter0: int;

        z1 := @parameter1: boolean;

        z2 := @parameter2: boolean;

        $z0 = r0.<org.apache.xalan.lib.sql.DTMDocument: boolean DEBUG>;

        if $z0 == 0 goto label1;

        $r2 = <java.lang.System: java.io.PrintStream out>;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("appendChild(");

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(",");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(boolean)>(z1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(",");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(boolean)>(z2);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>($r10);

     label1:
        specialinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: void appendChild(int,boolean,boolean)>(i0, z1, z2);

        return;
    }

    public short getLevel(int)
    {
        java.io.PrintStream $r2;
        short $s1;
        java.lang.StringBuffer $r1, $r3, $r4, $r5;
        int i0;
        java.lang.String $r6;
        org.apache.xalan.lib.sql.DTMDocument r0;
        boolean $z0;

        r0 := @this: org.apache.xalan.lib.sql.DTMDocument;

        i0 := @parameter0: int;

        $z0 = r0.<org.apache.xalan.lib.sql.DTMDocument: boolean DEBUG>;

        if $z0 == 0 goto label1;

        $r2 = <java.lang.System: java.io.PrintStream out>;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("getLevel(");

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>($r6);

     label1:
        $s1 = specialinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: short getLevel(int)>(i0);

        return $s1;
    }

    public java.lang.String getDocumentBaseURI()
    {
        java.io.PrintStream $r2;
        java.lang.String $r1;
        org.apache.xalan.lib.sql.DTMDocument r0;
        boolean $z0;

        r0 := @this: org.apache.xalan.lib.sql.DTMDocument;

        $z0 = r0.<org.apache.xalan.lib.sql.DTMDocument: boolean DEBUG>;

        if $z0 == 0 goto label1;

        $r2 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>("getDocBaseURI()");

     label1:
        $r1 = specialinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: java.lang.String getDocumentBaseURI()>();

        return $r1;
    }

    public int getNextNamespaceNode(int, int, boolean)
    {
        java.lang.StringBuffer $r1, $r3, $r4, $r5, $r6, $r7, $r8, $r9;
        int i0, i1, $i2;
        java.lang.String $r10;
        boolean $z0, z1;
        java.io.PrintStream $r2;
        org.apache.xalan.lib.sql.DTMDocument r0;

        r0 := @this: org.apache.xalan.lib.sql.DTMDocument;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        z1 := @parameter2: boolean;

        $z0 = r0.<org.apache.xalan.lib.sql.DTMDocument: boolean DEBUG>;

        if $z0 == 0 goto label1;

        $r2 = <java.lang.System: java.io.PrintStream out>;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("getNextNamesapceNode(");

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(",");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(",");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(boolean)>(z1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>($r10);

     label1:
        $i2 = specialinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int getNextNamespaceNode(int,int,boolean)>(i0, i1, z1);

        return $i2;
    }

    public void appendTextChild(java.lang.String)
    {
        java.io.PrintStream $r3;
        java.lang.StringBuffer $r2, $r4, $r5, $r6;
        java.lang.String r1, $r7;
        org.apache.xalan.lib.sql.DTMDocument r0;
        boolean $z0;

        r0 := @this: org.apache.xalan.lib.sql.DTMDocument;

        r1 := @parameter0: java.lang.String;

        $z0 = r0.<org.apache.xalan.lib.sql.DTMDocument: boolean DEBUG>;

        if $z0 == 0 goto label1;

        $r3 = <java.lang.System: java.io.PrintStream out>;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("appendTextChild(");

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>($r7);

     label1:
        specialinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: void appendTextChild(java.lang.String)>(r1);

        return;
    }

    protected int findGTE(int[], int, int, int)
    {
        int[] r1;
        java.lang.StringBuffer $r2, $r4, $r5, $r6, $r7, $r8, $r9, $r10;
        int i0, i1, i2, $i3;
        java.lang.String $r11;
        boolean $z0;
        java.io.PrintStream $r3;
        org.apache.xalan.lib.sql.DTMDocument r0;

        r0 := @this: org.apache.xalan.lib.sql.DTMDocument;

        r1 := @parameter0: int[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        $z0 = r0.<org.apache.xalan.lib.sql.DTMDocument: boolean DEBUG>;

        if $z0 == 0 goto label1;

        $r3 = <java.lang.System: java.io.PrintStream out>;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("findGTE(");

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(",");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(",");

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>($r11);

     label1:
        $i3 = specialinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int findGTE(int[],int,int,int)>(r1, i0, i1, i2);

        return $i3;
    }

    public int getFirstNamespaceNode(int, boolean)
    {
        java.io.PrintStream $r1;
        int i0, $i1;
        org.apache.xalan.lib.sql.DTMDocument r0;
        boolean $z0, z1;

        r0 := @this: org.apache.xalan.lib.sql.DTMDocument;

        i0 := @parameter0: int;

        z1 := @parameter1: boolean;

        $z0 = r0.<org.apache.xalan.lib.sql.DTMDocument: boolean DEBUG>;

        if $z0 == 0 goto label1;

        $r1 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>("getFirstNamespaceNode()");

     label1:
        $i1 = specialinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int getFirstNamespaceNode(int,boolean)>(i0, z1);

        return $i1;
    }

    public int getStringValueChunkCount(int)
    {
        java.io.PrintStream $r2;
        java.lang.StringBuffer $r1, $r3, $r4, $r5;
        int i0, $i1;
        java.lang.String $r6;
        org.apache.xalan.lib.sql.DTMDocument r0;
        boolean $z0;

        r0 := @this: org.apache.xalan.lib.sql.DTMDocument;

        i0 := @parameter0: int;

        $z0 = r0.<org.apache.xalan.lib.sql.DTMDocument: boolean DEBUG>;

        if $z0 == 0 goto label1;

        $r2 = <java.lang.System: java.io.PrintStream out>;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("getStringChunkCount(");

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>($r6);

     label1:
        $i1 = specialinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int getStringValueChunkCount(int)>(i0);

        return $i1;
    }

    public int getLastChild(int)
    {
        java.io.PrintStream $r2;
        java.lang.StringBuffer $r1, $r3, $r4, $r5;
        int i0, $i1;
        java.lang.String $r6;
        org.apache.xalan.lib.sql.DTMDocument r0;
        boolean $z0;

        r0 := @this: org.apache.xalan.lib.sql.DTMDocument;

        i0 := @parameter0: int;

        $z0 = r0.<org.apache.xalan.lib.sql.DTMDocument: boolean DEBUG>;

        if $z0 == 0 goto label1;

        $r2 = <java.lang.System: java.io.PrintStream out>;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("getLastChild(");

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>($r6);

     label1:
        $i1 = specialinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int getLastChild(int)>(i0);

        return $i1;
    }

    public boolean hasChildNodes(int)
    {
        java.io.PrintStream $r2;
        java.lang.StringBuffer $r1, $r3, $r4, $r5;
        int i0;
        java.lang.String $r6;
        org.apache.xalan.lib.sql.DTMDocument r0;
        boolean $z0, $z1;

        r0 := @this: org.apache.xalan.lib.sql.DTMDocument;

        i0 := @parameter0: int;

        $z0 = r0.<org.apache.xalan.lib.sql.DTMDocument: boolean DEBUG>;

        if $z0 == 0 goto label1;

        $r2 = <java.lang.System: java.io.PrintStream out>;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("hasChildNodes(");

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>($r6);

     label1:
        $z1 = specialinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: boolean hasChildNodes(int)>(i0);

        return $z1;
    }

    public short getNodeType(int)
    {
        short $s1, $s3;
        java.lang.StringBuffer $r3, $r4, $r5, $r10, $r11, $r12, $r13, $r14, $r15, $r17, $r18;
        int i0, $i2, $i4;
        java.lang.String $r6, $r7, $r16;
        boolean $z0;
        java.io.PrintStream $r2, $r9;
        org.apache.xalan.lib.sql.DTMDocument r0;

        r0 := @this: org.apache.xalan.lib.sql.DTMDocument;

        i0 := @parameter0: int;

        $z0 = r0.<org.apache.xalan.lib.sql.DTMDocument: boolean DEBUG>;

        if $z0 == 0 goto label1;

        r0.<org.apache.xalan.lib.sql.DTMDocument: boolean DEBUG> = 0;

        $r2 = <java.lang.System: java.io.PrintStream out>;

        $r17 = new java.lang.StringBuffer;

        specialinvoke $r17.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("getNodeType(");

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(") ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r2.<java.io.PrintStream: void print(java.lang.String)>($r6);

        $i2 = virtualinvoke r0.<org.apache.xalan.lib.sql.DTMDocument: int getExpandedTypeID(int)>(i0);

        $r7 = virtualinvoke r0.<org.apache.xalan.lib.sql.DTMDocument: java.lang.String getLocalNameFromExpandedNameID(int)>($i2);

        $r9 = <java.lang.System: java.io.PrintStream out>;

        $r18 = new java.lang.StringBuffer;

        specialinvoke $r18.<java.lang.StringBuffer: void <init>()>();

        $r10 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".. Node name [");

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("]");

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[");

        $s3 = virtualinvoke r0.<org.apache.xalan.lib.sql.DTMDocument: short getNodeType(int)>(i0);

        $i4 = (int) $s3;

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i4);

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("]");

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>($r16);

        r0.<org.apache.xalan.lib.sql.DTMDocument: boolean DEBUG> = 1;

     label1:
        $s1 = specialinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: short getNodeType(int)>(i0);

        return $s1;
    }

    public boolean isCharacterElementContentWhitespace(int)
    {
        java.io.PrintStream $r2;
        java.lang.StringBuffer $r1, $r3, $r4, $r5;
        int i0;
        java.lang.String $r6;
        org.apache.xalan.lib.sql.DTMDocument r0;
        boolean $z0, $z1;

        r0 := @this: org.apache.xalan.lib.sql.DTMDocument;

        i0 := @parameter0: int;

        $z0 = r0.<org.apache.xalan.lib.sql.DTMDocument: boolean DEBUG>;

        if $z0 == 0 goto label1;

        $r2 = <java.lang.System: java.io.PrintStream out>;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("isCharacterElementContentWhitespace(");

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>($r6);

     label1:
        $z1 = specialinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: boolean isCharacterElementContentWhitespace(int)>(i0);

        return $z1;
    }

    public int getFirstChild(int)
    {
        java.io.PrintStream $r2;
        java.lang.StringBuffer $r1, $r3, $r4, $r5;
        int i0, $i1;
        java.lang.String $r6;
        org.apache.xalan.lib.sql.DTMDocument r0;
        boolean $z0;

        r0 := @this: org.apache.xalan.lib.sql.DTMDocument;

        i0 := @parameter0: int;

        $z0 = r0.<org.apache.xalan.lib.sql.DTMDocument: boolean DEBUG>;

        if $z0 == 0 goto label1;

        $r2 = <java.lang.System: java.io.PrintStream out>;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("getFirstChild(");

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>($r6);

     label1:
        $i1 = specialinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int getFirstChild(int)>(i0);

        return $i1;
    }

    public java.lang.String getDocumentSystemIdentifier(int)
    {
        java.io.PrintStream $r3;
        java.lang.StringBuffer $r2, $r4, $r5, $r6;
        int i0;
        java.lang.String $r1, $r7;
        org.apache.xalan.lib.sql.DTMDocument r0;
        boolean $z0;

        r0 := @this: org.apache.xalan.lib.sql.DTMDocument;

        i0 := @parameter0: int;

        $z0 = r0.<org.apache.xalan.lib.sql.DTMDocument: boolean DEBUG>;

        if $z0 == 0 goto label1;

        $r3 = <java.lang.System: java.io.PrintStream out>;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("getDocSysID(");

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>($r7);

     label1:
        $r1 = specialinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: java.lang.String getDocumentSystemIdentifier(int)>(i0);

        return $r1;
    }

    protected void declareNamespaceInContext(int, int)
    {
        java.io.PrintStream $r2;
        java.lang.StringBuffer $r1, $r3, $r4, $r5, $r6, $r7;
        int i0, i1;
        java.lang.String $r8;
        org.apache.xalan.lib.sql.DTMDocument r0;
        boolean $z0;

        r0 := @this: org.apache.xalan.lib.sql.DTMDocument;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $z0 = r0.<org.apache.xalan.lib.sql.DTMDocument: boolean DEBUG>;

        if $z0 == 0 goto label1;

        $r2 = <java.lang.System: java.io.PrintStream out>;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("declareNamespaceContext(");

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(",");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>($r8);

     label1:
        specialinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: void declareNamespaceInContext(int,int)>(i0, i1);

        return;
    }

    public java.lang.String getNamespaceFromExpandedNameID(int)
    {
        java.lang.StringBuffer $r2, $r4, $r5, $r6, $r8, $r10, $r12;
        int i0;
        java.lang.String $r1, $r7, $r11, $r13;
        boolean $z0;
        java.io.PrintStream $r3, $r9;
        org.apache.xalan.lib.sql.DTMDocument r0;

        r0 := @this: org.apache.xalan.lib.sql.DTMDocument;

        i0 := @parameter0: int;

        $z0 = r0.<org.apache.xalan.lib.sql.DTMDocument: boolean DEBUG>;

        if $z0 == 0 goto label1;

        r0.<org.apache.xalan.lib.sql.DTMDocument: boolean DEBUG> = 0;

        $r3 = <java.lang.System: java.io.PrintStream out>;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("getNamespaceFromExpandedNameID(");

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r3.<java.io.PrintStream: void print(java.lang.String)>($r7);

        $r9 = <java.lang.System: java.io.PrintStream out>;

        $r8 = new java.lang.StringBuffer;

        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("...");

        $r11 = specialinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: java.lang.String getNamespaceFromExpandedNameID(int)>(i0);

        $r12 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>($r13);

        r0.<org.apache.xalan.lib.sql.DTMDocument: boolean DEBUG> = 1;

     label1:
        $r1 = specialinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: java.lang.String getNamespaceFromExpandedNameID(int)>(i0);

        return $r1;
    }

    public java.lang.String getLocalNameFromExpandedNameID(int)
    {
        java.lang.StringBuffer $r2, $r4, $r5, $r6, $r8, $r10, $r12;
        int i0;
        java.lang.String $r1, $r7, $r11, $r13;
        boolean $z0;
        java.io.PrintStream $r3, $r9;
        org.apache.xalan.lib.sql.DTMDocument r0;

        r0 := @this: org.apache.xalan.lib.sql.DTMDocument;

        i0 := @parameter0: int;

        $z0 = r0.<org.apache.xalan.lib.sql.DTMDocument: boolean DEBUG>;

        if $z0 == 0 goto label1;

        r0.<org.apache.xalan.lib.sql.DTMDocument: boolean DEBUG> = 0;

        $r3 = <java.lang.System: java.io.PrintStream out>;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("getLocalNameFromExpandedNameID(");

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r3.<java.io.PrintStream: void print(java.lang.String)>($r7);

        $r9 = <java.lang.System: java.io.PrintStream out>;

        $r8 = new java.lang.StringBuffer;

        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("...");

        $r11 = specialinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: java.lang.String getLocalNameFromExpandedNameID(int)>(i0);

        $r12 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>($r13);

        r0.<org.apache.xalan.lib.sql.DTMDocument: boolean DEBUG> = 1;

     label1:
        $r1 = specialinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: java.lang.String getLocalNameFromExpandedNameID(int)>(i0);

        return $r1;
    }

    public int getExpandedTypeID(int)
    {
        java.io.PrintStream $r2;
        java.lang.StringBuffer $r1, $r3, $r4, $r5;
        int i0, $i1;
        java.lang.String $r6;
        org.apache.xalan.lib.sql.DTMDocument r0;
        boolean $z0;

        r0 := @this: org.apache.xalan.lib.sql.DTMDocument;

        i0 := @parameter0: int;

        $z0 = r0.<org.apache.xalan.lib.sql.DTMDocument: boolean DEBUG>;

        if $z0 == 0 goto label1;

        $r2 = <java.lang.System: java.io.PrintStream out>;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("getExpandedTypeID(");

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>($r6);

     label1:
        $i1 = specialinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int getExpandedTypeID(int)>(i0);

        return $i1;
    }

    public int getDocument()
    {
        java.io.PrintStream $r1;
        int $i0;
        org.apache.xalan.lib.sql.DTMDocument r0;
        boolean $z0;

        r0 := @this: org.apache.xalan.lib.sql.DTMDocument;

        $z0 = r0.<org.apache.xalan.lib.sql.DTMDocument: boolean DEBUG>;

        if $z0 == 0 goto label1;

        $r1 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>("getDocument()");

     label1:
        $i0 = specialinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int getDocument()>();

        return $i0;
    }

    protected int findInSortedSuballocatedIntVector(org.apache.xml.utils.SuballocatedIntVector, int)
    {
        java.io.PrintStream $r3;
        org.apache.xml.utils.SuballocatedIntVector r1;
        java.lang.StringBuffer $r2, $r4, $r5, $r6, $r7, $r8;
        int i0, $i1;
        java.lang.String $r9;
        org.apache.xalan.lib.sql.DTMDocument r0;
        boolean $z0;

        r0 := @this: org.apache.xalan.lib.sql.DTMDocument;

        r1 := @parameter0: org.apache.xml.utils.SuballocatedIntVector;

        i0 := @parameter1: int;

        $z0 = r0.<org.apache.xalan.lib.sql.DTMDocument: boolean DEBUG>;

        if $z0 == 0 goto label1;

        $r3 = <java.lang.System: java.io.PrintStream out>;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("findInSortedSubAlloctedVector(");

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(",");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>($r9);

     label1:
        $i1 = specialinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int findInSortedSuballocatedIntVector(org.apache.xml.utils.SuballocatedIntVector,int)>(r1, i0);

        return $i1;
    }

    public boolean isDocumentAllDeclarationsProcessed(int)
    {
        java.io.PrintStream $r2;
        java.lang.StringBuffer $r1, $r3, $r4, $r5;
        int i0;
        java.lang.String $r6;
        org.apache.xalan.lib.sql.DTMDocument r0;
        boolean $z0, $z1;

        r0 := @this: org.apache.xalan.lib.sql.DTMDocument;

        i0 := @parameter0: int;

        $z0 = r0.<org.apache.xalan.lib.sql.DTMDocument: boolean DEBUG>;

        if $z0 == 0 goto label1;

        $r2 = <java.lang.System: java.io.PrintStream out>;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("isDocumentAllDeclProc(");

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>($r6);

     label1:
        $z1 = specialinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: boolean isDocumentAllDeclarationsProcessed(int)>(i0);

        return $z1;
    }

    protected void error(java.lang.String)
    {
        java.io.PrintStream $r3;
        java.lang.StringBuffer $r2, $r4, $r5, $r6;
        java.lang.String r1, $r7;
        org.apache.xalan.lib.sql.DTMDocument r0;
        boolean $z0;

        r0 := @this: org.apache.xalan.lib.sql.DTMDocument;

        r1 := @parameter0: java.lang.String;

        $z0 = r0.<org.apache.xalan.lib.sql.DTMDocument: boolean DEBUG>;

        if $z0 == 0 goto label1;

        $r3 = <java.lang.System: java.io.PrintStream out>;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("error(");

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>($r7);

     label1:
        specialinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: void error(java.lang.String)>(r1);

        return;
    }

    protected int _firstch(int)
    {
        java.io.PrintStream $r2;
        java.lang.StringBuffer $r1, $r3, $r4, $r5;
        int i0, $i1;
        java.lang.String $r6;
        org.apache.xalan.lib.sql.DTMDocument r0;
        boolean $z0;

        r0 := @this: org.apache.xalan.lib.sql.DTMDocument;

        i0 := @parameter0: int;

        $z0 = r0.<org.apache.xalan.lib.sql.DTMDocument: boolean DEBUG>;

        if $z0 == 0 goto label1;

        $r2 = <java.lang.System: java.io.PrintStream out>;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("_firstch(");

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>($r6);

     label1:
        $i1 = specialinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int _firstch(int)>(i0);

        return $i1;
    }

    public int getOwnerDocument(int)
    {
        java.io.PrintStream $r2;
        java.lang.StringBuffer $r1, $r3, $r4, $r5;
        int i0, $i1;
        java.lang.String $r6;
        org.apache.xalan.lib.sql.DTMDocument r0;
        boolean $z0;

        r0 := @this: org.apache.xalan.lib.sql.DTMDocument;

        i0 := @parameter0: int;

        $z0 = r0.<org.apache.xalan.lib.sql.DTMDocument: boolean DEBUG>;

        if $z0 == 0 goto label1;

        $r2 = <java.lang.System: java.io.PrintStream out>;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("getOwnerDoc(");

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>($r6);

     label1:
        $i1 = specialinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int getOwnerDocument(int)>(i0);

        return $i1;
    }

    protected int _nextsib(int)
    {
        java.io.PrintStream $r2;
        java.lang.StringBuffer $r1, $r3, $r4, $r5;
        int i0, $i1;
        java.lang.String $r6;
        org.apache.xalan.lib.sql.DTMDocument r0;
        boolean $z0;

        r0 := @this: org.apache.xalan.lib.sql.DTMDocument;

        i0 := @parameter0: int;

        $z0 = r0.<org.apache.xalan.lib.sql.DTMDocument: boolean DEBUG>;

        if $z0 == 0 goto label1;

        $r2 = <java.lang.System: java.io.PrintStream out>;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("_nextSib(");

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>($r6);

     label1:
        $i1 = specialinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int _nextsib(int)>(i0);

        return $i1;
    }

    public int getNextSibling(int)
    {
        java.io.PrintStream $r2;
        java.lang.StringBuffer $r1, $r3, $r4, $r5;
        int i0, $i1;
        java.lang.String $r6;
        org.apache.xalan.lib.sql.DTMDocument r0;
        boolean $z0;

        r0 := @this: org.apache.xalan.lib.sql.DTMDocument;

        i0 := @parameter0: int;

        $z0 = r0.<org.apache.xalan.lib.sql.DTMDocument: boolean DEBUG>;

        if $z0 == 0 goto label1;

        $r2 = <java.lang.System: java.io.PrintStream out>;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("getNextSibling(");

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>($r6);

     label1:
        $i1 = specialinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int getNextSibling(int)>(i0);

        return $i1;
    }

    public boolean getDocumentAllDeclarationsProcessed()
    {
        java.io.PrintStream $r1;
        org.apache.xalan.lib.sql.DTMDocument r0;
        boolean $z0, $z1;

        r0 := @this: org.apache.xalan.lib.sql.DTMDocument;

        $z0 = r0.<org.apache.xalan.lib.sql.DTMDocument: boolean DEBUG>;

        if $z0 == 0 goto label1;

        $r1 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>("getDocAllDeclProc()");

     label1:
        $z1 = specialinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: boolean getDocumentAllDeclarationsProcessed()>();

        return $z1;
    }

    public int getParent(int)
    {
        java.io.PrintStream $r2;
        java.lang.StringBuffer $r1, $r3, $r4, $r5;
        int i0, $i1;
        java.lang.String $r6;
        org.apache.xalan.lib.sql.DTMDocument r0;
        boolean $z0;

        r0 := @this: org.apache.xalan.lib.sql.DTMDocument;

        i0 := @parameter0: int;

        $z0 = r0.<org.apache.xalan.lib.sql.DTMDocument: boolean DEBUG>;

        if $z0 == 0 goto label1;

        $r2 = <java.lang.System: java.io.PrintStream out>;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("getParent(");

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>($r6);

     label1:
        $i1 = specialinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int getParent(int)>(i0);

        return $i1;
    }

    public int getExpandedTypeID(java.lang.String, java.lang.String, int)
    {
        java.io.PrintStream $r3;
        int i0, $i1;
        java.lang.String r1, r2;
        org.apache.xalan.lib.sql.DTMDocument r0;
        boolean $z0;

        r0 := @this: org.apache.xalan.lib.sql.DTMDocument;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        $z0 = r0.<org.apache.xalan.lib.sql.DTMDocument: boolean DEBUG>;

        if $z0 == 0 goto label1;

        $r3 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>("getExpandedTypeID()");

     label1:
        $i1 = specialinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int getExpandedTypeID(java.lang.String,java.lang.String,int)>(r1, r2, i0);

        return $i1;
    }

    public void setDocumentBaseURI(java.lang.String)
    {
        java.io.PrintStream $r2;
        java.lang.String r1;
        org.apache.xalan.lib.sql.DTMDocument r0;
        boolean $z0;

        r0 := @this: org.apache.xalan.lib.sql.DTMDocument;

        r1 := @parameter0: java.lang.String;

        $z0 = r0.<org.apache.xalan.lib.sql.DTMDocument: boolean DEBUG>;

        if $z0 == 0 goto label1;

        $r2 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>("setDocBaseURI()");

     label1:
        specialinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: void setDocumentBaseURI(java.lang.String)>(r1);

        return;
    }

    public char[] getStringValueChunk(int, int, int[])
    {
        java.io.PrintStream $r4;
        int[] r1;
        java.lang.StringBuffer $r3, $r5, $r6, $r7, $r8, $r9;
        int i0, i1;
        char[] $r2;
        java.lang.String $r10;
        org.apache.xalan.lib.sql.DTMDocument r0;
        boolean $z0;

        r0 := @this: org.apache.xalan.lib.sql.DTMDocument;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: int[];

        $z0 = r0.<org.apache.xalan.lib.sql.DTMDocument: boolean DEBUG>;

        if $z0 == 0 goto label1;

        $r4 = <java.lang.System: java.io.PrintStream out>;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("getStringChunkValue(");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(",");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>($r10);

     label1:
        $r2 = specialinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: char[] getStringValueChunk(int,int,int[])>(i0, i1, r1);

        return $r2;
    }

    public org.apache.xml.dtm.DTMAxisTraverser getAxisTraverser(int)
    {
        java.io.PrintStream $r3;
        java.lang.StringBuffer $r2, $r4, $r5, $r6;
        int i0;
        java.lang.String $r7;
        org.apache.xml.dtm.DTMAxisTraverser $r1;
        org.apache.xalan.lib.sql.DTMDocument r0;
        boolean $z0;

        r0 := @this: org.apache.xalan.lib.sql.DTMDocument;

        i0 := @parameter0: int;

        $z0 = r0.<org.apache.xalan.lib.sql.DTMDocument: boolean DEBUG>;

        if $z0 == 0 goto label1;

        $r3 = <java.lang.System: java.io.PrintStream out>;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("getAxixTraverser(");

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>($r7);

     label1:
        $r1 = specialinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBaseTraversers: org.apache.xml.dtm.DTMAxisTraverser getAxisTraverser(int)>(i0);

        return $r1;
    }

    public org.apache.xml.dtm.DTMAxisIterator getTypedAxisIterator(int, int)
    {
        java.io.PrintStream $r3;
        org.apache.xml.dtm.DTMAxisIterator $r1;
        java.lang.StringBuffer $r2, $r4, $r5, $r6, $r7, $r8;
        int i0, i1;
        java.lang.String $r9;
        org.apache.xalan.lib.sql.DTMDocument r0;
        boolean $z0;

        r0 := @this: org.apache.xalan.lib.sql.DTMDocument;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $z0 = r0.<org.apache.xalan.lib.sql.DTMDocument: boolean DEBUG>;

        if $z0 == 0 goto label1;

        $r3 = <java.lang.System: java.io.PrintStream out>;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("getTypedAxisIterator(");

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(",");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>($r9);

     label1:
        $r1 = specialinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBaseIterators: org.apache.xml.dtm.DTMAxisIterator getTypedAxisIterator(int,int)>(i0, i1);

        return $r1;
    }

    public org.apache.xml.dtm.DTMAxisIterator getAxisIterator(int)
    {
        java.io.PrintStream $r3;
        org.apache.xml.dtm.DTMAxisIterator $r1;
        java.lang.StringBuffer $r2, $r4, $r5, $r6;
        int i0;
        java.lang.String $r7;
        org.apache.xalan.lib.sql.DTMDocument r0;
        boolean $z0;

        r0 := @this: org.apache.xalan.lib.sql.DTMDocument;

        i0 := @parameter0: int;

        $z0 = r0.<org.apache.xalan.lib.sql.DTMDocument: boolean DEBUG>;

        if $z0 == 0 goto label1;

        $r3 = <java.lang.System: java.io.PrintStream out>;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("getAxisIterator(");

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>($r7);

     label1:
        $r1 = specialinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBaseIterators: org.apache.xml.dtm.DTMAxisIterator getAxisIterator(int)>(i0);

        return $r1;
    }

    public int getElementById(java.lang.String)
    {
        java.io.PrintStream $r2;
        java.lang.StringBuffer $r3, $r5, $r6, $r8;
        int $i1;
        java.lang.String r4, $r7;
        org.apache.xalan.lib.sql.DTMDocument r0;
        boolean $z0;

        r0 := @this: org.apache.xalan.lib.sql.DTMDocument;

        r4 := @parameter0: java.lang.String;

        $z0 = r0.<org.apache.xalan.lib.sql.DTMDocument: boolean DEBUG>;

        if $z0 == 0 goto label1;

        $r2 = <java.lang.System: java.io.PrintStream out>;

        $r8 = new java.lang.StringBuffer;

        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("getElementByID(");

        $r5 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>($r7);

     label1:
        $i1 = (int) -1;

        return $i1;
    }

    public org.xml.sax.ext.DeclHandler getDeclHandler()
    {
        java.io.PrintStream $r1;
        org.apache.xalan.lib.sql.DTMDocument r0;
        boolean $z0;

        r0 := @this: org.apache.xalan.lib.sql.DTMDocument;

        $z0 = r0.<org.apache.xalan.lib.sql.DTMDocument: boolean DEBUG>;

        if $z0 == 0 goto label1;

        $r1 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>("getDeclHandler()");

     label1:
        return null;
    }

    public org.xml.sax.ErrorHandler getErrorHandler()
    {
        java.io.PrintStream $r1;
        org.apache.xalan.lib.sql.DTMDocument r0;
        boolean $z0;

        r0 := @this: org.apache.xalan.lib.sql.DTMDocument;

        $z0 = r0.<org.apache.xalan.lib.sql.DTMDocument: boolean DEBUG>;

        if $z0 == 0 goto label1;

        $r1 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>("getErrorHandler()");

     label1:
        return null;
    }

    public java.lang.String getDocumentTypeDeclarationSystemIdentifier()
    {
        java.io.PrintStream $r1;
        org.apache.xalan.lib.sql.DTMDocument r0;
        boolean $z0;

        r0 := @this: org.apache.xalan.lib.sql.DTMDocument;

        $z0 = r0.<org.apache.xalan.lib.sql.DTMDocument: boolean DEBUG>;

        if $z0 == 0 goto label1;

        $r1 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>("get_DTD-SID()");

     label1:
        return null;
    }

    public static void <clinit>()
    {
        <org.apache.xalan.lib.sql.DTMDocument: java.lang.String S_ELEMENT_NODE> = "#element";

        <org.apache.xalan.lib.sql.DTMDocument: java.lang.String S_TEXT_NODE> = "#text";

        <org.apache.xalan.lib.sql.DTMDocument: java.lang.String S_DOCUMENT> = "#root";

        <org.apache.xalan.lib.sql.DTMDocument: java.lang.String S_ISFALSE> = "false";

        <org.apache.xalan.lib.sql.DTMDocument: java.lang.String S_ISTRUE> = "true";

        <org.apache.xalan.lib.sql.DTMDocument: java.lang.String S_ATTRIB_NOT_SUPPORTED> = "Not Supported";

        <org.apache.xalan.lib.sql.DTMDocument: java.lang.String S_NAMESPACE> = "http://xml.apache.org/xalan/SQLExtension";

        return;
    }
}
