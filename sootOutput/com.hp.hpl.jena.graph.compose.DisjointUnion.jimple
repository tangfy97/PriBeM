public class com.hp.hpl.jena.graph.compose.DisjointUnion extends com.hp.hpl.jena.graph.compose.Dyadic
{

    public void <init>(com.hp.hpl.jena.graph.Graph, com.hp.hpl.jena.graph.Graph)
    {
        com.hp.hpl.jena.graph.compose.DisjointUnion r0;
        com.hp.hpl.jena.graph.Graph r1, r2;

        r0 := @this: com.hp.hpl.jena.graph.compose.DisjointUnion;

        r1 := @parameter0: com.hp.hpl.jena.graph.Graph;

        r2 := @parameter1: com.hp.hpl.jena.graph.Graph;

        specialinvoke r0.<com.hp.hpl.jena.graph.compose.Dyadic: void <init>(com.hp.hpl.jena.graph.Graph,com.hp.hpl.jena.graph.Graph)>(r1, r2);

        return;
    }

    protected com.hp.hpl.jena.util.iterator.ExtendedIterator _graphBaseFind(com.hp.hpl.jena.graph.TripleMatch)
    {
        com.hp.hpl.jena.graph.compose.DisjointUnion r0;
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r3, $r5, $r6;
        com.hp.hpl.jena.graph.TripleMatch r1;
        com.hp.hpl.jena.graph.Graph $r2, $r4;

        r0 := @this: com.hp.hpl.jena.graph.compose.DisjointUnion;

        r1 := @parameter0: com.hp.hpl.jena.graph.TripleMatch;

        $r2 = r0.<com.hp.hpl.jena.graph.compose.DisjointUnion: com.hp.hpl.jena.graph.Graph L>;

        $r3 = interfaceinvoke $r2.<com.hp.hpl.jena.graph.Graph: com.hp.hpl.jena.util.iterator.ExtendedIterator find(com.hp.hpl.jena.graph.TripleMatch)>(r1);

        $r4 = r0.<com.hp.hpl.jena.graph.compose.DisjointUnion: com.hp.hpl.jena.graph.Graph R>;

        $r5 = interfaceinvoke $r4.<com.hp.hpl.jena.graph.Graph: com.hp.hpl.jena.util.iterator.ExtendedIterator find(com.hp.hpl.jena.graph.TripleMatch)>(r1);

        $r6 = interfaceinvoke $r3.<com.hp.hpl.jena.util.iterator.ExtendedIterator: com.hp.hpl.jena.util.iterator.ExtendedIterator andThen(java.util.Iterator)>($r5);

        return $r6;
    }

    public boolean graphBaseContains(com.hp.hpl.jena.graph.Triple)
    {
        com.hp.hpl.jena.graph.compose.DisjointUnion r0;
        com.hp.hpl.jena.graph.Graph $r2, $r3;
        com.hp.hpl.jena.graph.Triple r1;
        boolean $z0, $z1, $z2;

        r0 := @this: com.hp.hpl.jena.graph.compose.DisjointUnion;

        r1 := @parameter0: com.hp.hpl.jena.graph.Triple;

        $r2 = r0.<com.hp.hpl.jena.graph.compose.DisjointUnion: com.hp.hpl.jena.graph.Graph L>;

        $z0 = interfaceinvoke $r2.<com.hp.hpl.jena.graph.Graph: boolean contains(com.hp.hpl.jena.graph.Triple)>(r1);

        if $z0 != 0 goto label1;

        $r3 = r0.<com.hp.hpl.jena.graph.compose.DisjointUnion: com.hp.hpl.jena.graph.Graph R>;

        $z1 = interfaceinvoke $r3.<com.hp.hpl.jena.graph.Graph: boolean contains(com.hp.hpl.jena.graph.Triple)>(r1);

        if $z1 == 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    public void performDelete(com.hp.hpl.jena.graph.Triple)
    {
        com.hp.hpl.jena.graph.compose.DisjointUnion r0;
        com.hp.hpl.jena.graph.Graph $r2, $r3;
        com.hp.hpl.jena.graph.Triple r1;

        r0 := @this: com.hp.hpl.jena.graph.compose.DisjointUnion;

        r1 := @parameter0: com.hp.hpl.jena.graph.Triple;

        $r2 = r0.<com.hp.hpl.jena.graph.compose.DisjointUnion: com.hp.hpl.jena.graph.Graph L>;

        interfaceinvoke $r2.<com.hp.hpl.jena.graph.Graph: void delete(com.hp.hpl.jena.graph.Triple)>(r1);

        $r3 = r0.<com.hp.hpl.jena.graph.compose.DisjointUnion: com.hp.hpl.jena.graph.Graph R>;

        interfaceinvoke $r3.<com.hp.hpl.jena.graph.Graph: void delete(com.hp.hpl.jena.graph.Triple)>(r1);

        return;
    }

    public void performAdd(com.hp.hpl.jena.graph.Triple)
    {
        com.hp.hpl.jena.graph.compose.DisjointUnion r0;
        com.hp.hpl.jena.graph.Graph $r2, $r3;
        com.hp.hpl.jena.graph.Triple r1;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.graph.compose.DisjointUnion;

        r1 := @parameter0: com.hp.hpl.jena.graph.Triple;

        $r2 = r0.<com.hp.hpl.jena.graph.compose.DisjointUnion: com.hp.hpl.jena.graph.Graph R>;

        $z0 = interfaceinvoke $r2.<com.hp.hpl.jena.graph.Graph: boolean contains(com.hp.hpl.jena.graph.Triple)>(r1);

        if $z0 != 0 goto label1;

        $r3 = r0.<com.hp.hpl.jena.graph.compose.DisjointUnion: com.hp.hpl.jena.graph.Graph L>;

        interfaceinvoke $r3.<com.hp.hpl.jena.graph.Graph: void add(com.hp.hpl.jena.graph.Triple)>(r1);

     label1:
        return;
    }
}
