public final class org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicSet extends org.waveprotocol.wave.model.adt.AbstractObservableBasicSet
{
    private final org.waveprotocol.wave.model.document.util.DocumentEventRouter router;
    private final org.waveprotocol.wave.model.util.Serializer serializer;
    private final java.lang.Object container;
    private final java.lang.String entryTagName;
    private final java.lang.String valueAttrName;
    private final java.util.Map valueElements;
    private final java.util.Set obsoleteElements;
    static final boolean $assertionsDisabled;

    private void <init>(org.waveprotocol.wave.model.document.util.DocumentEventRouter, java.lang.Object, org.waveprotocol.wave.model.util.Serializer, java.lang.String, java.lang.String)
    {
        org.waveprotocol.wave.model.util.Serializer r5;
        java.util.HashMap $r1;
        org.waveprotocol.wave.model.document.util.DocumentEventRouter r3;
        java.util.HashSet $r2;
        org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicSet r0;
        java.lang.Object r4;
        java.lang.String r6, r7;

        r0 := @this: org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicSet;

        r3 := @parameter0: org.waveprotocol.wave.model.document.util.DocumentEventRouter;

        r4 := @parameter1: java.lang.Object;

        r5 := @parameter2: org.waveprotocol.wave.model.util.Serializer;

        r6 := @parameter3: java.lang.String;

        r7 := @parameter4: java.lang.String;

        specialinvoke r0.<org.waveprotocol.wave.model.adt.AbstractObservableBasicSet: void <init>()>();

        $r1 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: java.util.HashMap newHashMap()>();

        r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicSet: java.util.Map valueElements> = $r1;

        $r2 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: java.util.HashSet newHashSet()>();

        r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicSet: java.util.Set obsoleteElements> = $r2;

        r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicSet: org.waveprotocol.wave.model.document.util.DocumentEventRouter router> = r3;

        r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicSet: java.lang.Object container> = r4;

        r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicSet: org.waveprotocol.wave.model.util.Serializer serializer> = r5;

        r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicSet: java.lang.String entryTagName> = r6;

        r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicSet: java.lang.String valueAttrName> = r7;

        return;
    }

    public static org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicSet create(org.waveprotocol.wave.model.document.util.DocumentEventRouter, java.lang.Object, org.waveprotocol.wave.model.util.Serializer, java.lang.String, java.lang.String)
    {
        org.waveprotocol.wave.model.util.Serializer r3;
        org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicSet $r0, $r6;
        java.lang.Object r2;
        java.lang.String r4, r5;
        org.waveprotocol.wave.model.document.util.DocumentEventRouter r1;

        r1 := @parameter0: org.waveprotocol.wave.model.document.util.DocumentEventRouter;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: org.waveprotocol.wave.model.util.Serializer;

        r4 := @parameter3: java.lang.String;

        r5 := @parameter4: java.lang.String;

        $r0 = new org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicSet;

        specialinvoke $r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicSet: void <init>(org.waveprotocol.wave.model.document.util.DocumentEventRouter,java.lang.Object,org.waveprotocol.wave.model.util.Serializer,java.lang.String,java.lang.String)>(r1, r2, r3, r4, r5);

        $r6 = specialinvoke $r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicSet: org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicSet init()>();

        return $r6;
    }

    private org.waveprotocol.wave.model.document.ObservableMutableDocument getDocument()
    {
        org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicSet r0;
        org.waveprotocol.wave.model.document.util.DocumentEventRouter $r1;
        org.waveprotocol.wave.model.document.ObservableMutableDocument $r2;

        r0 := @this: org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicSet;

        $r1 = r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicSet: org.waveprotocol.wave.model.document.util.DocumentEventRouter router>;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.model.document.util.DocumentEventRouter: org.waveprotocol.wave.model.document.ObservableMutableDocument getDocument()>();

        return $r2;
    }

    private org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicSet init()
    {
        org.waveprotocol.wave.model.document.util.DocumentEventRouter $r2;
        org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicSet$1 $r1;
        org.waveprotocol.wave.model.document.ObservableMutableDocument $r4;
        org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicSet r0;
        java.lang.Object $r3, $r5, $r6, r7;

        r0 := @this: org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicSet;

        $r2 = r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicSet: org.waveprotocol.wave.model.document.util.DocumentEventRouter router>;

        $r3 = r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicSet: java.lang.Object container>;

        $r1 = new org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicSet$1;

        specialinvoke $r1.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicSet$1: void <init>(org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicSet)>(r0);

        interfaceinvoke $r2.<org.waveprotocol.wave.model.document.util.DocumentEventRouter: org.waveprotocol.wave.model.document.util.ListenerRegistration addChildListener(java.lang.Object,org.waveprotocol.wave.model.util.ElementListener)>($r3, $r1);

        $r4 = specialinvoke r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicSet: org.waveprotocol.wave.model.document.ObservableMutableDocument getDocument()>();

        $r5 = r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicSet: java.lang.Object container>;

        r7 = staticinvoke <org.waveprotocol.wave.model.document.util.DocHelper: java.lang.Object getFirstChildElement(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object)>($r4, $r5);

     label1:
        if r7 == null goto label2;

        $r6 = staticinvoke <org.waveprotocol.wave.model.document.util.DocHelper: java.lang.Object getNextSiblingElement(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object)>($r4, r7);

        specialinvoke r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicSet: void handleElementAdded(java.lang.Object)>(r7);

        r7 = $r6;

        goto label1;

     label2:
        return r0;
    }

    public java.lang.Iterable getValues()
    {
        java.util.Map $r1;
        java.util.Set $r2;
        org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicSet r0;
        java.util.ArrayList $r3;

        r0 := @this: org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicSet;

        $r1 = r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicSet: java.util.Map valueElements>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>();

        $r3 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: java.util.ArrayList newArrayList(java.lang.Iterable)>($r2);

        return $r3;
    }

    public boolean contains(java.lang.Object)
    {
        java.util.Map $r2;
        org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicSet r0;
        java.lang.Object r1;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicSet;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicSet: java.util.Map valueElements>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        return $z0;
    }

    public void add(java.lang.Object)
    {
        org.waveprotocol.wave.model.util.Serializer $r6;
        java.lang.String[] $r4;
        org.waveprotocol.wave.model.document.operation.impl.AttributesImpl $r3;
        org.waveprotocol.wave.model.document.ObservableMutableDocument $r8;
        java.util.Map $r2;
        java.lang.Object r0, $r10;
        org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicSet r1;
        java.lang.String $r5, $r7, $r9;
        boolean $z0;

        r1 := @this: org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicSet;

        r0 := @parameter0: java.lang.Object;

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r0, "value must not be null");

        $r2 = r1.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicSet: java.util.Map valueElements>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r0);

        if $z0 != 0 goto label1;

        $r3 = new org.waveprotocol.wave.model.document.operation.impl.AttributesImpl;

        $r4 = newarray (java.lang.String)[2];

        $r5 = r1.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicSet: java.lang.String valueAttrName>;

        $r4[0] = $r5;

        $r6 = r1.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicSet: org.waveprotocol.wave.model.util.Serializer serializer>;

        $r7 = interfaceinvoke $r6.<org.waveprotocol.wave.model.util.Serializer: java.lang.String toString(java.lang.Object)>(r0);

        $r4[1] = $r7;

        specialinvoke $r3.<org.waveprotocol.wave.model.document.operation.impl.AttributesImpl: void <init>(java.lang.String[])>($r4);

        $r8 = specialinvoke r1.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicSet: org.waveprotocol.wave.model.document.ObservableMutableDocument getDocument()>();

        $r10 = r1.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicSet: java.lang.Object container>;

        $r9 = r1.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicSet: java.lang.String entryTagName>;

        interfaceinvoke $r8.<org.waveprotocol.wave.model.document.ObservableMutableDocument: java.lang.Object createChildElement(java.lang.Object,java.lang.String,java.util.Map)>($r10, $r9, $r3);

        specialinvoke r1.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicSet: void deleteObsoleteElements()>();

     label1:
        return;
    }

    public void remove(java.lang.Object)
    {
        org.waveprotocol.wave.model.document.ObservableMutableDocument $r3;
        java.util.Map $r2, $r4;
        org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicSet r0;
        java.lang.Object r1, $r5;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicSet;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicSet: java.util.Map valueElements>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        specialinvoke r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicSet: void deleteObsoleteElements()>();

        $r3 = specialinvoke r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicSet: org.waveprotocol.wave.model.document.ObservableMutableDocument getDocument()>();

        $r4 = r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicSet: java.util.Map valueElements>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        interfaceinvoke $r3.<org.waveprotocol.wave.model.document.ObservableMutableDocument: void deleteNode(java.lang.Object)>($r5);

     label1:
        return;
    }

    public void clear()
    {
        java.util.Iterator $r6;
        java.util.Collection $r5;
        org.waveprotocol.wave.model.document.ObservableMutableDocument $r2;
        java.util.Map $r1, $r3, $r4;
        org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicSet r0;
        java.lang.Object $r7;
        boolean $z0, $z1;

        r0 := @this: org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicSet;

        $r1 = r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicSet: java.util.Map valueElements>;

        $z0 = interfaceinvoke $r1.<java.util.Map: boolean isEmpty()>();

        if $z0 != 0 goto label2;

        specialinvoke r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicSet: void deleteObsoleteElements()>();

        $r2 = specialinvoke r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicSet: org.waveprotocol.wave.model.document.ObservableMutableDocument getDocument()>();

     label1:
        $r3 = r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicSet: java.util.Map valueElements>;

        $z1 = interfaceinvoke $r3.<java.util.Map: boolean isEmpty()>();

        if $z1 != 0 goto label2;

        $r4 = r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicSet: java.util.Map valueElements>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.util.Collection values()>();

        $r6 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>();

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        interfaceinvoke $r2.<org.waveprotocol.wave.model.document.ObservableMutableDocument: void deleteNode(java.lang.Object)>($r7);

        goto label1;

     label2:
        return;
    }

    private void handleElementAdded(java.lang.Object)
    {
        java.lang.AssertionError $r14;
        org.waveprotocol.wave.model.document.ObservableMutableDocument $r1;
        java.util.Map $r6, $r9, $r11;
        int $i0, $i1;
        java.lang.String $r3, $r4;
        boolean $z0, $z1, $z2;
        java.util.Set $r8, $r10;
        org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicSet r0;
        java.lang.Object r2, $r5, $r7, $r12, $r13;

        r0 := @this: org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicSet;

        r2 := @parameter0: java.lang.Object;

        $r1 = specialinvoke r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicSet: org.waveprotocol.wave.model.document.ObservableMutableDocument getDocument()>();

        $z0 = <org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicSet: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r12 = r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicSet: java.lang.Object container>;

        $r13 = interfaceinvoke $r1.<org.waveprotocol.wave.model.document.ObservableMutableDocument: java.lang.Object getParentElement(java.lang.Object)>(r2);

        $z2 = virtualinvoke $r12.<java.lang.Object: boolean equals(java.lang.Object)>($r13);

        if $z2 != 0 goto label1;

        $r14 = new java.lang.AssertionError;

        specialinvoke $r14.<java.lang.AssertionError: void <init>()>();

        throw $r14;

     label1:
        $r3 = r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicSet: java.lang.String entryTagName>;

        $r4 = interfaceinvoke $r1.<org.waveprotocol.wave.model.document.ObservableMutableDocument: java.lang.String getTagName(java.lang.Object)>(r2);

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z1 != 0 goto label2;

        return;

     label2:
        $r5 = specialinvoke r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicSet: java.lang.Object valueOf(java.lang.Object)>(r2);

        $r6 = r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicSet: java.util.Map valueElements>;

        $r7 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>($r5);

        if $r7 != null goto label3;

        $r11 = r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicSet: java.util.Map valueElements>;

        interfaceinvoke $r11.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, r2);

        virtualinvoke r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicSet: void fireOnValueAdded(java.lang.Object)>($r5);

        goto label5;

     label3:
        $i0 = interfaceinvoke $r1.<org.waveprotocol.wave.model.document.ObservableMutableDocument: int getLocation(java.lang.Object)>($r7);

        $i1 = interfaceinvoke $r1.<org.waveprotocol.wave.model.document.ObservableMutableDocument: int getLocation(java.lang.Object)>(r2);

        if $i0 >= $i1 goto label4;

        $r10 = r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicSet: java.util.Set obsoleteElements>;

        interfaceinvoke $r10.<java.util.Set: boolean add(java.lang.Object)>(r2);

        goto label5;

     label4:
        $r8 = r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicSet: java.util.Set obsoleteElements>;

        interfaceinvoke $r8.<java.util.Set: boolean add(java.lang.Object)>($r7);

        $r9 = r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicSet: java.util.Map valueElements>;

        interfaceinvoke $r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, r2);

     label5:
        return;
    }

    private void handleElementRemoved(java.lang.Object)
    {
        java.util.Set $r5;
        org.waveprotocol.wave.model.document.ObservableMutableDocument $r2;
        java.util.Map $r7, $r9;
        org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicSet r0;
        java.lang.Object r3, $r6, $r8;
        java.lang.String $r1, $r4;
        boolean $z0, $z1;

        r0 := @this: org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicSet;

        r3 := @parameter0: java.lang.Object;

        $r1 = r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicSet: java.lang.String entryTagName>;

        $r2 = specialinvoke r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicSet: org.waveprotocol.wave.model.document.ObservableMutableDocument getDocument()>();

        $r4 = interfaceinvoke $r2.<org.waveprotocol.wave.model.document.ObservableMutableDocument: java.lang.String getTagName(java.lang.Object)>(r3);

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z0 != 0 goto label1;

        return;

     label1:
        $r5 = r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicSet: java.util.Set obsoleteElements>;

        $z1 = interfaceinvoke $r5.<java.util.Set: boolean remove(java.lang.Object)>(r3);

        if $z1 == 0 goto label2;

        return;

     label2:
        $r6 = specialinvoke r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicSet: java.lang.Object valueOf(java.lang.Object)>(r3);

        $r7 = r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicSet: java.util.Map valueElements>;

        $r8 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>($r6);

        if $r8 == r3 goto label3;

        goto label4;

     label3:
        $r9 = r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicSet: java.util.Map valueElements>;

        interfaceinvoke $r9.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r6);

        virtualinvoke r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicSet: void fireOnValueRemoved(java.lang.Object)>($r6);

     label4:
        return;
    }

    private void deleteObsoleteElements()
    {
        java.util.Iterator $r4;
        org.waveprotocol.wave.model.document.ObservableMutableDocument $r1;
        java.util.Set $r2, $r3;
        org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicSet r0;
        java.lang.Object $r5;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicSet;

        $r1 = specialinvoke r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicSet: org.waveprotocol.wave.model.document.ObservableMutableDocument getDocument()>();

     label1:
        $r2 = r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicSet: java.util.Set obsoleteElements>;

        $z0 = interfaceinvoke $r2.<java.util.Set: boolean isEmpty()>();

        if $z0 != 0 goto label2;

        $r3 = r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicSet: java.util.Set obsoleteElements>;

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        interfaceinvoke $r1.<org.waveprotocol.wave.model.document.ObservableMutableDocument: void deleteNode(java.lang.Object)>($r5);

        goto label1;

     label2:
        return;
    }

    private java.lang.Object valueOf(java.lang.Object)
    {
        org.waveprotocol.wave.model.util.Serializer $r1;
        org.waveprotocol.wave.model.document.ObservableMutableDocument $r2;
        org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicSet r0;
        java.lang.Object r3, $r6;
        java.lang.String $r4, $r5;

        r0 := @this: org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicSet;

        r3 := @parameter0: java.lang.Object;

        $r1 = r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicSet: org.waveprotocol.wave.model.util.Serializer serializer>;

        $r2 = specialinvoke r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicSet: org.waveprotocol.wave.model.document.ObservableMutableDocument getDocument()>();

        $r4 = r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicSet: java.lang.String valueAttrName>;

        $r5 = interfaceinvoke $r2.<org.waveprotocol.wave.model.document.ObservableMutableDocument: java.lang.String getAttribute(java.lang.Object,java.lang.String)>(r3, $r4);

        $r6 = interfaceinvoke $r1.<org.waveprotocol.wave.model.util.Serializer: java.lang.Object fromString(java.lang.String)>($r5);

        return $r6;
    }

    static void access$000(org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicSet, java.lang.Object)
    {
        org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicSet r0;
        java.lang.Object r1;

        r0 := @parameter0: org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicSet;

        r1 := @parameter1: java.lang.Object;

        specialinvoke r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicSet: void handleElementAdded(java.lang.Object)>(r1);

        return;
    }

    static void access$100(org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicSet, java.lang.Object)
    {
        org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicSet r0;
        java.lang.Object r1;

        r0 := @parameter0: org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicSet;

        r1 := @parameter1: java.lang.Object;

        specialinvoke r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicSet: void handleElementRemoved(java.lang.Object)>(r1);

        return;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/waveprotocol/wave/model/adt/docbased/DocumentBasedBasicSet;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicSet: boolean $assertionsDisabled> = $z1;

        return;
    }
}
