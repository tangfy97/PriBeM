public class com.jhlabs.image.GradientWipeFilter extends com.jhlabs.image.AbstractBufferedImageOp
{
    private float density;
    private float softness;
    private boolean invert;
    private java.awt.image.BufferedImage mask;

    public void <init>()
    {
        com.jhlabs.image.GradientWipeFilter r0;

        r0 := @this: com.jhlabs.image.GradientWipeFilter;

        specialinvoke r0.<com.jhlabs.image.AbstractBufferedImageOp: void <init>()>();

        r0.<com.jhlabs.image.GradientWipeFilter: float density> = 0.0F;

        r0.<com.jhlabs.image.GradientWipeFilter: float softness> = 0.0F;

        return;
    }

    public void setDensity(float)
    {
        com.jhlabs.image.GradientWipeFilter r0;
        float f0;

        r0 := @this: com.jhlabs.image.GradientWipeFilter;

        f0 := @parameter0: float;

        r0.<com.jhlabs.image.GradientWipeFilter: float density> = f0;

        return;
    }

    public float getDensity()
    {
        com.jhlabs.image.GradientWipeFilter r0;
        float $f0;

        r0 := @this: com.jhlabs.image.GradientWipeFilter;

        $f0 = r0.<com.jhlabs.image.GradientWipeFilter: float density>;

        return $f0;
    }

    public void setSoftness(float)
    {
        com.jhlabs.image.GradientWipeFilter r0;
        float f0;

        r0 := @this: com.jhlabs.image.GradientWipeFilter;

        f0 := @parameter0: float;

        r0.<com.jhlabs.image.GradientWipeFilter: float softness> = f0;

        return;
    }

    public float getSoftness()
    {
        com.jhlabs.image.GradientWipeFilter r0;
        float $f0;

        r0 := @this: com.jhlabs.image.GradientWipeFilter;

        $f0 = r0.<com.jhlabs.image.GradientWipeFilter: float softness>;

        return $f0;
    }

    public void setMask(java.awt.image.BufferedImage)
    {
        com.jhlabs.image.GradientWipeFilter r0;
        java.awt.image.BufferedImage r1;

        r0 := @this: com.jhlabs.image.GradientWipeFilter;

        r1 := @parameter0: java.awt.image.BufferedImage;

        r0.<com.jhlabs.image.GradientWipeFilter: java.awt.image.BufferedImage mask> = r1;

        return;
    }

    public java.awt.image.BufferedImage getMask()
    {
        com.jhlabs.image.GradientWipeFilter r0;
        java.awt.image.BufferedImage $r1;

        r0 := @this: com.jhlabs.image.GradientWipeFilter;

        $r1 = r0.<com.jhlabs.image.GradientWipeFilter: java.awt.image.BufferedImage mask>;

        return $r1;
    }

    public void setInvert(boolean)
    {
        com.jhlabs.image.GradientWipeFilter r0;
        boolean z0;

        r0 := @this: com.jhlabs.image.GradientWipeFilter;

        z0 := @parameter0: boolean;

        r0.<com.jhlabs.image.GradientWipeFilter: boolean invert> = z0;

        return;
    }

    public boolean getInvert()
    {
        com.jhlabs.image.GradientWipeFilter r0;
        boolean $z0;

        r0 := @this: com.jhlabs.image.GradientWipeFilter;

        $z0 = r0.<com.jhlabs.image.GradientWipeFilter: boolean invert>;

        return $z0;
    }

    public java.awt.image.BufferedImage filter(java.awt.image.BufferedImage, java.awt.image.BufferedImage)
    {
        int[] r5, r6;
        boolean $z0;
        java.awt.image.BufferedImage r0, $r2, $r3, $r4, $r7, r8;
        com.jhlabs.image.GradientWipeFilter r1;
        float $f0, $f1, $f2, f3, $f4, $f5, f6, f7, $f8, $f9, $f10;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, i7, $i8, $i9, $i10, $i11, i12, i13, i14;

        r1 := @this: com.jhlabs.image.GradientWipeFilter;

        r0 := @parameter0: java.awt.image.BufferedImage;

        r8 := @parameter1: java.awt.image.BufferedImage;

        $i0 = virtualinvoke r0.<java.awt.image.BufferedImage: int getWidth()>();

        $i1 = virtualinvoke r0.<java.awt.image.BufferedImage: int getHeight()>();

        if r8 != null goto label1;

        r8 = virtualinvoke r1.<com.jhlabs.image.AbstractBufferedImageOp: java.awt.image.BufferedImage createCompatibleDestImage(java.awt.image.BufferedImage,java.awt.image.ColorModel)>(r0, null);

     label1:
        $r2 = r1.<com.jhlabs.image.GradientWipeFilter: java.awt.image.BufferedImage mask>;

        if $r2 != null goto label2;

        return r8;

     label2:
        $r3 = r1.<com.jhlabs.image.GradientWipeFilter: java.awt.image.BufferedImage mask>;

        $i2 = virtualinvoke $r3.<java.awt.image.BufferedImage: int getWidth()>();

        $r4 = r1.<com.jhlabs.image.GradientWipeFilter: java.awt.image.BufferedImage mask>;

        $i3 = virtualinvoke $r4.<java.awt.image.BufferedImage: int getHeight()>();

        $f2 = r1.<com.jhlabs.image.GradientWipeFilter: float density>;

        $f0 = r1.<com.jhlabs.image.GradientWipeFilter: float softness>;

        $f1 = 1.0F + $f0;

        f3 = $f2 * $f1;

        $f4 = r1.<com.jhlabs.image.GradientWipeFilter: float softness>;

        $f5 = f3 - $f4;

        f6 = 255.0F * $f5;

        f7 = 255.0F * f3;

        r5 = newarray (int)[$i0];

        r6 = newarray (int)[$i2];

        i12 = 0;

     label3:
        if i12 >= $i1 goto label7;

        virtualinvoke r1.<com.jhlabs.image.AbstractBufferedImageOp: int[] getRGB(java.awt.image.BufferedImage,int,int,int,int,int[])>(r0, 0, i12, $i0, 1, r5);

        $r7 = r1.<com.jhlabs.image.GradientWipeFilter: java.awt.image.BufferedImage mask>;

        $i4 = i12 % $i3;

        virtualinvoke r1.<com.jhlabs.image.AbstractBufferedImageOp: int[] getRGB(java.awt.image.BufferedImage,int,int,int,int,int[])>($r7, 0, $i4, $i2, 1, r6);

        i13 = 0;

     label4:
        if i13 >= $i0 goto label6;

        $i5 = i13 % $i2;

        i6 = r6[$i5];

        i7 = r5[i13];

        $i8 = staticinvoke <com.jhlabs.image.PixelUtils: int brightness(int)>(i6);

        $f8 = (float) $i8;

        $f9 = staticinvoke <com.jhlabs.image.ImageMath: float smoothStep(float,float,float)>(f6, f7, $f8);

        $f10 = 255.0F * $f9;

        i14 = (int) $f10;

        $z0 = r1.<com.jhlabs.image.GradientWipeFilter: boolean invert>;

        if $z0 == 0 goto label5;

        i14 = 255 - i14;

     label5:
        $i10 = i14 << 24;

        $i9 = i7 & 16777215;

        $i11 = $i10 | $i9;

        r5[i13] = $i11;

        i13 = i13 + 1;

        goto label4;

     label6:
        virtualinvoke r1.<com.jhlabs.image.AbstractBufferedImageOp: void setRGB(java.awt.image.BufferedImage,int,int,int,int,int[])>(r8, 0, i12, $i0, 1, r5);

        i12 = i12 + 1;

        goto label3;

     label7:
        return r8;
    }

    public java.lang.String toString()
    {
        com.jhlabs.image.GradientWipeFilter r0;

        r0 := @this: com.jhlabs.image.GradientWipeFilter;

        return "Transitions/Gradient Wipe...";
    }
}
