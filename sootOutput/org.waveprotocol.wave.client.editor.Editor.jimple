public interface  org.waveprotocol.wave.client.editor.Editor extends java.lang.Object implements org.waveprotocol.wave.client.editor.EditorContext
{
    public static final org.waveprotocol.wave.client.editor.ElementHandlerRegistry ROOT_HANDLER_REGISTRY;
    public static final org.waveprotocol.wave.model.document.util.AnnotationRegistryImpl ROOT_ANNOTATION_REGISTRY;
    public static final org.waveprotocol.wave.client.editor.content.PainterRegistry ROOT_PAINT_REGISTRY;
    public static final org.waveprotocol.wave.client.editor.content.Registries ROOT_REGISTRIES;
    public static final org.waveprotocol.wave.model.util.StringSet TAB_TARGETS;

    public abstract com.google.gwt.user.client.ui.Widget getWidget();

    public abstract void init(org.waveprotocol.wave.client.editor.content.Registries, org.waveprotocol.wave.client.editor.keys.KeyBindingRegistry, org.waveprotocol.wave.client.editor.EditorSettings);

    public abstract void reset();

    public abstract void setOutputSink(org.waveprotocol.wave.model.operation.SilentOperationSink);

    public abstract void clearOutputSink();

    public abstract boolean hasDocument();

    public abstract com.google.gwt.dom.client.Element getDocumentHtmlElement();

    public abstract org.waveprotocol.wave.client.editor.content.ContentView getPersistentDocument();

    public abstract void setContent(org.waveprotocol.wave.model.document.operation.DocInitialization, org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema);

    public abstract void setContent(org.waveprotocol.wave.client.editor.content.ContentDocument);

    public abstract org.waveprotocol.wave.model.document.operation.DocInitialization getDocumentInitialization();

    public abstract org.waveprotocol.wave.client.editor.content.ContentDocument getContent();

    public abstract org.waveprotocol.wave.client.editor.content.ContentDocument removeContent();

    public abstract org.waveprotocol.wave.client.editor.content.ContentDocument removeContentAndUnrender();

    public abstract void setEditing(boolean);

    public abstract void cleanup();

    public abstract void addKeySignalListener(org.waveprotocol.wave.client.common.util.KeySignalListener);

    public abstract void removeKeySignalListener(org.waveprotocol.wave.client.common.util.KeySignalListener);

    public abstract void flushUpdates();

    public abstract void debugToggleDebugDialog();

    public abstract void flushAnnotationPainting();

    public abstract void flushSaveSelection();

    static void <clinit>()
    {
        org.waveprotocol.wave.model.util.StringSet $r9;
        org.waveprotocol.wave.client.editor.content.RegistriesImpl $r4;
        org.waveprotocol.wave.client.editor.content.AnnotationPainter $r3;
        java.lang.String[] $r8;
        org.waveprotocol.wave.client.editor.ElementHandlerRegistry $r0, $r7;
        org.waveprotocol.wave.client.scheduler.TimerService $r10;
        org.waveprotocol.wave.client.editor.content.PainterRegistryImpl $r2;
        org.waveprotocol.wave.client.editor.content.PainterRegistry $r5;
        org.waveprotocol.wave.model.document.util.AnnotationRegistryImpl $r1, $r6;
        boolean $z0;

        $r0 = <org.waveprotocol.wave.client.editor.ElementHandlerRegistry: org.waveprotocol.wave.client.editor.ElementHandlerRegistry ROOT>;

        <org.waveprotocol.wave.client.editor.Editor: org.waveprotocol.wave.client.editor.ElementHandlerRegistry ROOT_HANDLER_REGISTRY> = $r0;

        $r1 = <org.waveprotocol.wave.model.document.util.AnnotationRegistryImpl: org.waveprotocol.wave.model.document.util.AnnotationRegistryImpl ROOT>;

        <org.waveprotocol.wave.client.editor.Editor: org.waveprotocol.wave.model.document.util.AnnotationRegistryImpl ROOT_ANNOTATION_REGISTRY> = $r1;

        $r2 = new org.waveprotocol.wave.client.editor.content.PainterRegistryImpl;

        $r3 = new org.waveprotocol.wave.client.editor.content.AnnotationPainter;

        $z0 = staticinvoke <com.google.gwt.core.client.GWT: boolean isClient()>();

        if $z0 == 0 goto label1;

        $r10 = staticinvoke <org.waveprotocol.wave.client.scheduler.SchedulerInstance: org.waveprotocol.wave.client.scheduler.TimerService getMediumPriorityTimer()>();

        goto label2;

     label1:
        $r10 = null;

     label2:
        specialinvoke $r3.<org.waveprotocol.wave.client.editor.content.AnnotationPainter: void <init>(org.waveprotocol.wave.client.scheduler.TimerService)>($r10);

        specialinvoke $r2.<org.waveprotocol.wave.client.editor.content.PainterRegistryImpl: void <init>(java.lang.String,java.lang.String,org.waveprotocol.wave.client.editor.content.AnnotationPainter)>("l:s", "l:b", $r3);

        <org.waveprotocol.wave.client.editor.Editor: org.waveprotocol.wave.client.editor.content.PainterRegistry ROOT_PAINT_REGISTRY> = $r2;

        $r4 = new org.waveprotocol.wave.client.editor.content.RegistriesImpl;

        $r7 = <org.waveprotocol.wave.client.editor.Editor: org.waveprotocol.wave.client.editor.ElementHandlerRegistry ROOT_HANDLER_REGISTRY>;

        $r6 = <org.waveprotocol.wave.client.editor.Editor: org.waveprotocol.wave.model.document.util.AnnotationRegistryImpl ROOT_ANNOTATION_REGISTRY>;

        $r5 = <org.waveprotocol.wave.client.editor.Editor: org.waveprotocol.wave.client.editor.content.PainterRegistry ROOT_PAINT_REGISTRY>;

        specialinvoke $r4.<org.waveprotocol.wave.client.editor.content.RegistriesImpl: void <init>(org.waveprotocol.wave.client.editor.ElementHandlerRegistry,org.waveprotocol.wave.model.document.util.AnnotationRegistry,org.waveprotocol.wave.client.editor.content.PainterRegistry)>($r7, $r6, $r5);

        <org.waveprotocol.wave.client.editor.Editor: org.waveprotocol.wave.client.editor.content.Registries ROOT_REGISTRIES> = $r4;

        $r8 = newarray (java.lang.String)[0];

        $r9 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: org.waveprotocol.wave.model.util.StringSet newStringSet(java.lang.String[])>($r8);

        <org.waveprotocol.wave.client.editor.Editor: org.waveprotocol.wave.model.util.StringSet TAB_TARGETS> = $r9;

        return;
    }
}
