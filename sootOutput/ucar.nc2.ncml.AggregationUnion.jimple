public class ucar.nc2.ncml.AggregationUnion extends ucar.nc2.ncml.Aggregation
{
    private java.util.List openDatasets;

    public void <init>(ucar.nc2.dataset.NetcdfDataset, java.lang.String, java.lang.String)
    {
        ucar.nc2.ncml.Aggregation$Type $r4;
        ucar.nc2.ncml.AggregationUnion r0;
        java.lang.String r2, r3;
        ucar.nc2.dataset.NetcdfDataset r1;
        java.util.ArrayList $r5;

        r0 := @this: ucar.nc2.ncml.AggregationUnion;

        r1 := @parameter0: ucar.nc2.dataset.NetcdfDataset;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        $r4 = <ucar.nc2.ncml.Aggregation$Type: ucar.nc2.ncml.Aggregation$Type union>;

        specialinvoke r0.<ucar.nc2.ncml.Aggregation: void <init>(ucar.nc2.dataset.NetcdfDataset,java.lang.String,ucar.nc2.ncml.Aggregation$Type,java.lang.String)>(r1, r2, $r4, r3);

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        r0.<ucar.nc2.ncml.AggregationUnion: java.util.List openDatasets> = $r5;

        return;
    }

    protected void buildNetcdfDataset(ucar.nc2.util.CancelTask) throws java.io.IOException
    {
        ucar.nc2.ncml.AggregationUnion r0;
        java.util.Iterator $r2;
        java.util.List $r1, $r8;
        ucar.nc2.ncml.Aggregation$Dataset r4;
        ucar.nc2.util.CancelTask r5;
        java.lang.Object $r3;
        ucar.nc2.NetcdfFile $r6;
        ucar.nc2.dataset.NetcdfDataset $r7;
        boolean $z0;

        r0 := @this: ucar.nc2.ncml.AggregationUnion;

        r5 := @parameter0: ucar.nc2.util.CancelTask;

        $r1 = virtualinvoke r0.<ucar.nc2.ncml.AggregationUnion: java.util.List getDatasets()>();

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (ucar.nc2.ncml.Aggregation$Dataset) $r3;

        $r6 = virtualinvoke r4.<ucar.nc2.ncml.Aggregation$Dataset: ucar.nc2.NetcdfFile acquireFile(ucar.nc2.util.CancelTask)>(r5);

        $r7 = r0.<ucar.nc2.ncml.AggregationUnion: ucar.nc2.dataset.NetcdfDataset ncDataset>;

        staticinvoke <ucar.nc2.dataset.DatasetConstructor: void transferDataset(ucar.nc2.NetcdfFile,ucar.nc2.dataset.NetcdfDataset,ucar.nc2.dataset.ReplaceVariableCheck)>($r6, $r7, null);

        $r8 = r0.<ucar.nc2.ncml.AggregationUnion: java.util.List openDatasets>;

        interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>($r6);

        goto label1;

     label2:
        return;
    }

    protected void rebuildDataset() throws java.io.IOException
    {
        ucar.nc2.ncml.AggregationUnion r0;
        ucar.nc2.dataset.NetcdfDataset $r1;

        r0 := @this: ucar.nc2.ncml.AggregationUnion;

        $r1 = r0.<ucar.nc2.ncml.AggregationUnion: ucar.nc2.dataset.NetcdfDataset ncDataset>;

        virtualinvoke $r1.<ucar.nc2.dataset.NetcdfDataset: void empty()>();

        virtualinvoke r0.<ucar.nc2.ncml.AggregationUnion: void buildNetcdfDataset(ucar.nc2.util.CancelTask)>(null);

        return;
    }

    protected void closeDatasets() throws java.io.IOException
    {
        ucar.nc2.ncml.AggregationUnion r0;
        java.util.List $r1;
        java.util.Iterator $r2;
        java.lang.Object $r3;
        java.io.IOException $r5;
        ucar.nc2.NetcdfFile r4;
        boolean $z0;

        r0 := @this: ucar.nc2.ncml.AggregationUnion;

        $r1 = r0.<ucar.nc2.ncml.AggregationUnion: java.util.List openDatasets>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (ucar.nc2.NetcdfFile) $r3;

     label2:
        virtualinvoke r4.<ucar.nc2.NetcdfFile: void close()>();

     label3:
        goto label5;

     label4:
        $r5 := @caughtexception;

     label5:
        goto label1;

     label6:
        specialinvoke r0.<ucar.nc2.ncml.Aggregation: void closeDatasets()>();

        return;

        catch java.io.IOException from label2 to label3 with label4;
    }
}
