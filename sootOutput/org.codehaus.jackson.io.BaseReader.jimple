abstract class org.codehaus.jackson.io.BaseReader extends java.io.Reader
{
    protected static final int LAST_VALID_UNICODE_CHAR;
    protected static final char NULL_CHAR;
    protected static final char NULL_BYTE;
    protected final org.codehaus.jackson.io.IOContext mContext;
    protected java.io.InputStream mIn;
    protected byte[] mBuffer;
    protected int mPtr;
    protected int mLength;
    char[] mTmpBuf;

    protected void <init>(org.codehaus.jackson.io.IOContext, java.io.InputStream, byte[], int, int)
    {
        org.codehaus.jackson.io.IOContext r1;
        byte[] r3;
        org.codehaus.jackson.io.BaseReader r0;
        int i0, i1;
        java.io.InputStream r2;

        r0 := @this: org.codehaus.jackson.io.BaseReader;

        r1 := @parameter0: org.codehaus.jackson.io.IOContext;

        r2 := @parameter1: java.io.InputStream;

        r3 := @parameter2: byte[];

        i0 := @parameter3: int;

        i1 := @parameter4: int;

        specialinvoke r0.<java.io.Reader: void <init>()>();

        r0.<org.codehaus.jackson.io.BaseReader: char[] mTmpBuf> = null;

        r0.<org.codehaus.jackson.io.BaseReader: org.codehaus.jackson.io.IOContext mContext> = r1;

        r0.<org.codehaus.jackson.io.BaseReader: java.io.InputStream mIn> = r2;

        r0.<org.codehaus.jackson.io.BaseReader: byte[] mBuffer> = r3;

        r0.<org.codehaus.jackson.io.BaseReader: int mPtr> = i0;

        r0.<org.codehaus.jackson.io.BaseReader: int mLength> = i1;

        return;
    }

    public void close() throws java.io.IOException
    {
        org.codehaus.jackson.io.BaseReader r0;
        java.io.InputStream r1;

        r0 := @this: org.codehaus.jackson.io.BaseReader;

        r1 = r0.<org.codehaus.jackson.io.BaseReader: java.io.InputStream mIn>;

        if r1 == null goto label1;

        r0.<org.codehaus.jackson.io.BaseReader: java.io.InputStream mIn> = null;

        virtualinvoke r0.<org.codehaus.jackson.io.BaseReader: void freeBuffers()>();

        virtualinvoke r1.<java.io.InputStream: void close()>();

     label1:
        return;
    }

    public int read() throws java.io.IOException
    {
        char $c1;
        org.codehaus.jackson.io.BaseReader r0;
        int $i0, $i3, $i4;
        char[] $r1, $r2, $r3, $r4;

        r0 := @this: org.codehaus.jackson.io.BaseReader;

        $r1 = r0.<org.codehaus.jackson.io.BaseReader: char[] mTmpBuf>;

        if $r1 != null goto label1;

        $r4 = newarray (char)[1];

        r0.<org.codehaus.jackson.io.BaseReader: char[] mTmpBuf> = $r4;

     label1:
        $r2 = r0.<org.codehaus.jackson.io.BaseReader: char[] mTmpBuf>;

        $i0 = virtualinvoke r0.<org.codehaus.jackson.io.BaseReader: int read(char[],int,int)>($r2, 0, 1);

        if $i0 >= 1 goto label2;

        $i3 = (int) -1;

        return $i3;

     label2:
        $r3 = r0.<org.codehaus.jackson.io.BaseReader: char[] mTmpBuf>;

        $c1 = $r3[0];

        $i4 = (int) $c1;

        return $i4;
    }

    public final void freeBuffers()
    {
        byte[] r1;
        org.codehaus.jackson.io.IOContext $r2;
        org.codehaus.jackson.io.BaseReader r0;

        r0 := @this: org.codehaus.jackson.io.BaseReader;

        r1 = r0.<org.codehaus.jackson.io.BaseReader: byte[] mBuffer>;

        if r1 == null goto label1;

        r0.<org.codehaus.jackson.io.BaseReader: byte[] mBuffer> = null;

        $r2 = r0.<org.codehaus.jackson.io.BaseReader: org.codehaus.jackson.io.IOContext mContext>;

        virtualinvoke $r2.<org.codehaus.jackson.io.IOContext: void releaseReadIOBuffer(byte[])>(r1);

     label1:
        return;
    }

    protected void reportBounds(char[], int, int) throws java.io.IOException
    {
        java.lang.ArrayIndexOutOfBoundsException $r0;
        org.codehaus.jackson.io.BaseReader r11;
        int i0, i1, $i2;
        char[] r7;
        java.lang.StringBuilder $r1, $r2, $r3, $r4, $r5, $r6, $r8, $r9;
        java.lang.String $r10;

        r11 := @this: org.codehaus.jackson.io.BaseReader;

        r7 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r0 = new java.lang.ArrayIndexOutOfBoundsException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("read(buf,");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("), cbuf[");

        $i2 = lengthof r7;

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.ArrayIndexOutOfBoundsException: void <init>(java.lang.String)>($r10);

        throw $r0;
    }

    protected void reportStrangeStream() throws java.io.IOException
    {
        java.io.IOException $r0;
        org.codehaus.jackson.io.BaseReader r1;

        r1 := @this: org.codehaus.jackson.io.BaseReader;

        $r0 = new java.io.IOException;

        specialinvoke $r0.<java.io.IOException: void <init>(java.lang.String)>("Strange I/O stream, returned 0 bytes on read");

        throw $r0;
    }

    public static void <clinit>()
    {
        <org.codehaus.jackson.io.BaseReader: char NULL_BYTE> = 0;

        <org.codehaus.jackson.io.BaseReader: char NULL_CHAR> = 0;

        <org.codehaus.jackson.io.BaseReader: int LAST_VALID_UNICODE_CHAR> = 1114111;

        return;
    }
}
