final class kodkod.engine.Solver$SolutionIterator extends java.lang.Object implements java.util.Iterator
{
    private final kodkod.engine.config.Options options;
    private kodkod.ast.Formula formula;
    private kodkod.instance.Bounds bounds;
    private kodkod.engine.fol2sat.Translation translation;
    private long translTime;
    private int trivial;

    void <init>(kodkod.ast.Formula, kodkod.instance.Bounds, kodkod.engine.config.Options)
    {
        kodkod.engine.config.Options r3;
        kodkod.instance.Bounds r2;
        kodkod.ast.Formula r1;
        kodkod.engine.Solver$SolutionIterator r0;

        r0 := @this: kodkod.engine.Solver$SolutionIterator;

        r1 := @parameter0: kodkod.ast.Formula;

        r2 := @parameter1: kodkod.instance.Bounds;

        r3 := @parameter2: kodkod.engine.config.Options;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<kodkod.engine.Solver$SolutionIterator: kodkod.ast.Formula formula> = r1;

        r0.<kodkod.engine.Solver$SolutionIterator: kodkod.instance.Bounds bounds> = r2;

        r0.<kodkod.engine.Solver$SolutionIterator: kodkod.engine.config.Options options> = r3;

        r0.<kodkod.engine.Solver$SolutionIterator: kodkod.engine.fol2sat.Translation translation> = null;

        r0.<kodkod.engine.Solver$SolutionIterator: int trivial> = 0;

        return;
    }

    public boolean hasNext()
    {
        kodkod.engine.Solver$SolutionIterator r0;
        kodkod.ast.Formula $r1;

        r0 := @this: kodkod.engine.Solver$SolutionIterator;

        $r1 = r0.<kodkod.engine.Solver$SolutionIterator: kodkod.ast.Formula formula>;

        if $r1 == null goto label1;

        return 1;

     label1:
        return 0;
    }

    private kodkod.engine.Solution nonTrivialSolution()
    {
        kodkod.instance.Bounds $r12;
        int[] r16;
        kodkod.engine.fol2sat.Translation $r1, $r5, $r7, $r8, $r10, $r15;
        boolean $z0, $z1;
        kodkod.engine.config.Reporter $r4;
        kodkod.engine.satlab.SATAbortedException $r17;
        kodkod.engine.AbortedException $r18;
        kodkod.engine.Solver$SolutionIterator r0;
        kodkod.engine.satlab.SATSolver $r2;
        kodkod.engine.config.Options $r3;
        long $l3, $l4, $l5, $l6;
        kodkod.instance.Instance $r11, $r13;
        int $i0, $i1, $i2, $i7, $i8, i9, $i10;
        kodkod.engine.Statistics $r6;
        kodkod.engine.Solution $r9, $r14;

        r0 := @this: kodkod.engine.Solver$SolutionIterator;

     label1:
        $r1 = r0.<kodkod.engine.Solver$SolutionIterator: kodkod.engine.fol2sat.Translation translation>;

        $r2 = virtualinvoke $r1.<kodkod.engine.fol2sat.Translation: kodkod.engine.satlab.SATSolver cnf()>();

        $r3 = r0.<kodkod.engine.Solver$SolutionIterator: kodkod.engine.config.Options options>;

        $r4 = virtualinvoke $r3.<kodkod.engine.config.Options: kodkod.engine.config.Reporter reporter()>();

        $r5 = r0.<kodkod.engine.Solver$SolutionIterator: kodkod.engine.fol2sat.Translation translation>;

        $i0 = virtualinvoke $r5.<kodkod.engine.fol2sat.Translation: int numPrimaryVariables()>();

        $i1 = interfaceinvoke $r2.<kodkod.engine.satlab.SATSolver: int numberOfVariables()>();

        $i2 = interfaceinvoke $r2.<kodkod.engine.satlab.SATSolver: int numberOfClauses()>();

        interfaceinvoke $r4.<kodkod.engine.config.Reporter: void solvingCNF(int,int,int)>($i0, $i1, $i2);

        $l3 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $z0 = interfaceinvoke $r2.<kodkod.engine.satlab.SATSolver: boolean solve()>();

        $l4 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $r6 = new kodkod.engine.Statistics;

        $r7 = r0.<kodkod.engine.Solver$SolutionIterator: kodkod.engine.fol2sat.Translation translation>;

        $l6 = r0.<kodkod.engine.Solver$SolutionIterator: long translTime>;

        $l5 = $l4 - $l3;

        specialinvoke $r6.<kodkod.engine.Statistics: void <init>(kodkod.engine.fol2sat.Translation,long,long)>($r7, $l6, $l5);

        if $z0 == 0 goto label7;

        $r10 = r0.<kodkod.engine.Solver$SolutionIterator: kodkod.engine.fol2sat.Translation translation>;

        $r11 = virtualinvoke $r10.<kodkod.engine.fol2sat.Translation: kodkod.instance.Instance interpret()>();

        $r12 = r0.<kodkod.engine.Solver$SolutionIterator: kodkod.instance.Bounds bounds>;

        $r13 = staticinvoke <kodkod.engine.Solver: kodkod.instance.Instance access$0(kodkod.instance.Instance,kodkod.instance.Bounds)>($r11, $r12);

        $r14 = staticinvoke <kodkod.engine.Solution: kodkod.engine.Solution satisfiable(kodkod.engine.Statistics,kodkod.instance.Instance)>($r6, $r13);

        $r15 = r0.<kodkod.engine.Solver$SolutionIterator: kodkod.engine.fol2sat.Translation translation>;

        $i7 = virtualinvoke $r15.<kodkod.engine.fol2sat.Translation: int numPrimaryVariables()>();

        r16 = newarray (int)[$i7];

        i9 = 1;

        goto label5;

     label2:
        $i8 = i9 - 1;

        $z1 = interfaceinvoke $r2.<kodkod.engine.satlab.SATSolver: boolean valueOf(int)>(i9);

        if $z1 == 0 goto label3;

        $i10 = neg i9;

        goto label4;

     label3:
        $i10 = i9;

     label4:
        r16[$i8] = $i10;

        i9 = i9 + 1;

     label5:
        if i9 <= $i7 goto label2;

        interfaceinvoke $r2.<kodkod.engine.satlab.SATSolver: boolean addClause(int[])>(r16);

     label6:
        return $r14;

     label7:
        r0.<kodkod.engine.Solver$SolutionIterator: kodkod.ast.Formula formula> = null;

        r0.<kodkod.engine.Solver$SolutionIterator: kodkod.instance.Bounds bounds> = null;

        $r8 = r0.<kodkod.engine.Solver$SolutionIterator: kodkod.engine.fol2sat.Translation translation>;

        $r9 = staticinvoke <kodkod.engine.Solver: kodkod.engine.Solution access$1(kodkod.engine.fol2sat.Translation,kodkod.engine.Statistics)>($r8, $r6);

     label8:
        return $r9;

     label9:
        $r17 := @caughtexception;

        $r18 = new kodkod.engine.AbortedException;

        specialinvoke $r18.<kodkod.engine.AbortedException: void <init>(java.lang.Throwable)>($r17);

        throw $r18;

        catch kodkod.engine.satlab.SATAbortedException from label1 to label6 with label9;
        catch kodkod.engine.satlab.SATAbortedException from label7 to label8 with label9;
    }

    private kodkod.engine.Solution trivialSolution(kodkod.engine.fol2sat.TrivialFormulaException)
    {
        kodkod.engine.bool.BooleanConstant $r3;
        kodkod.instance.Bounds $r7, $r9, $r37, $r39;
        java.util.Map $r13;
        boolean $z0, $z1, $z2, $z3, $z4;
        kodkod.engine.fol2sat.TrivialFormulaException r2;
        java.util.Set $r14, $r20;
        java.lang.StringBuilder $r25, $r28, $r29;
        kodkod.engine.Solver$SolutionIterator r1;
        kodkod.ast.Relation r19, $r31;
        kodkod.engine.fol2sat.TranslationLog $r4;
        long $l0;
        kodkod.instance.Instance $r8, $r10;
        int $i1, $i2, $i3, $i4;
        java.lang.String $r26, $r27, $r30;
        java.util.LinkedList $r12;
        kodkod.engine.Statistics $r0;
        kodkod.instance.TupleSet $r21, $r22, $r24, $r33, $r38, $r40;
        kodkod.engine.Proof $r5;
        java.util.Map$Entry r17;
        java.util.Iterator $r15;
        kodkod.ast.Formula $r34, $r35, $r36, $r41, $r42, $r43;
        kodkod.engine.Solution $r6, $r11;
        java.lang.Object $r16, $r18, $r23, $r32;

        r1 := @this: kodkod.engine.Solver$SolutionIterator;

        r2 := @parameter0: kodkod.engine.fol2sat.TrivialFormulaException;

        $r0 = new kodkod.engine.Statistics;

        $l0 = r1.<kodkod.engine.Solver$SolutionIterator: long translTime>;

        specialinvoke $r0.<kodkod.engine.Statistics: void <init>(int,int,int,long,long)>(0, 0, 0, $l0, 0L);

        $r3 = virtualinvoke r2.<kodkod.engine.fol2sat.TrivialFormulaException: kodkod.engine.bool.BooleanConstant value()>();

        $z0 = virtualinvoke $r3.<kodkod.engine.bool.BooleanConstant: boolean booleanValue()>();

        if $z0 == 0 goto label7;

        $i1 = r1.<kodkod.engine.Solver$SolutionIterator: int trivial>;

        $i2 = $i1 + 1;

        r1.<kodkod.engine.Solver$SolutionIterator: int trivial> = $i2;

        $r7 = virtualinvoke r2.<kodkod.engine.fol2sat.TrivialFormulaException: kodkod.instance.Bounds bounds()>();

        $r8 = staticinvoke <kodkod.engine.Solver: kodkod.instance.Instance access$2(kodkod.instance.Bounds)>($r7);

        $r9 = r1.<kodkod.engine.Solver$SolutionIterator: kodkod.instance.Bounds bounds>;

        $r10 = staticinvoke <kodkod.engine.Solver: kodkod.instance.Instance access$0(kodkod.instance.Instance,kodkod.instance.Bounds)>($r8, $r9);

        $r11 = staticinvoke <kodkod.engine.Solution: kodkod.engine.Solution triviallySatisfiable(kodkod.engine.Statistics,kodkod.instance.Instance)>($r0, $r10);

        $r12 = new java.util.LinkedList;

        specialinvoke $r12.<java.util.LinkedList: void <init>()>();

        $r13 = virtualinvoke $r10.<kodkod.instance.Instance: java.util.Map relationTuples()>();

        $r14 = interfaceinvoke $r13.<java.util.Map: java.util.Set entrySet()>();

        $r15 = interfaceinvoke $r14.<java.util.Set: java.util.Iterator iterator()>();

        goto label4;

     label1:
        $r16 = interfaceinvoke $r15.<java.util.Iterator: java.lang.Object next()>();

        r17 = (java.util.Map$Entry) $r16;

        $r18 = interfaceinvoke r17.<java.util.Map$Entry: java.lang.Object getKey()>();

        r19 = (kodkod.ast.Relation) $r18;

        $r20 = virtualinvoke $r7.<kodkod.instance.Bounds: java.util.Set relations()>();

        $z1 = interfaceinvoke $r20.<java.util.Set: boolean contains(java.lang.Object)>(r19);

        if $z1 != 0 goto label2;

        $r37 = r1.<kodkod.engine.Solver$SolutionIterator: kodkod.instance.Bounds bounds>;

        $r38 = virtualinvoke $r37.<kodkod.instance.Bounds: kodkod.instance.TupleSet lowerBound(kodkod.ast.Relation)>(r19);

        $r39 = r1.<kodkod.engine.Solver$SolutionIterator: kodkod.instance.Bounds bounds>;

        $r40 = virtualinvoke $r39.<kodkod.instance.Bounds: kodkod.instance.TupleSet upperBound(kodkod.ast.Relation)>(r19);

        virtualinvoke $r7.<kodkod.instance.Bounds: void bound(kodkod.ast.Relation,kodkod.instance.TupleSet,kodkod.instance.TupleSet)>(r19, $r38, $r40);

     label2:
        $r21 = virtualinvoke $r7.<kodkod.instance.Bounds: kodkod.instance.TupleSet lowerBound(kodkod.ast.Relation)>(r19);

        $r22 = virtualinvoke $r7.<kodkod.instance.Bounds: kodkod.instance.TupleSet upperBound(kodkod.ast.Relation)>(r19);

        if $r21 == $r22 goto label4;

        $r23 = interfaceinvoke r17.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r24 = (kodkod.instance.TupleSet) $r23;

        $z2 = virtualinvoke $r24.<kodkod.instance.TupleSet: boolean isEmpty()>();

        if $z2 == 0 goto label3;

        $r36 = virtualinvoke r19.<kodkod.ast.Relation: kodkod.ast.Formula some()>();

        interfaceinvoke $r12.<java.util.List: boolean add(java.lang.Object)>($r36);

        goto label4;

     label3:
        $r25 = new java.lang.StringBuilder;

        $r26 = virtualinvoke r19.<kodkod.ast.Relation: java.lang.String name()>();

        $r27 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r26);

        specialinvoke $r25.<java.lang.StringBuilder: void <init>(java.lang.String)>($r27);

        $r28 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_");

        $i3 = r1.<kodkod.engine.Solver$SolutionIterator: int trivial>;

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        $i4 = virtualinvoke r19.<kodkod.ast.Relation: int arity()>();

        $r31 = staticinvoke <kodkod.ast.Relation: kodkod.ast.Relation nary(java.lang.String,int)>($r30, $i4);

        $r32 = interfaceinvoke r17.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r33 = (kodkod.instance.TupleSet) $r32;

        virtualinvoke $r7.<kodkod.instance.Bounds: void boundExactly(kodkod.ast.Relation,kodkod.instance.TupleSet)>($r31, $r33);

        $r34 = virtualinvoke r19.<kodkod.ast.Relation: kodkod.ast.Formula eq(kodkod.ast.Expression)>($r31);

        $r35 = virtualinvoke $r34.<kodkod.ast.Formula: kodkod.ast.Formula not()>();

        interfaceinvoke $r12.<java.util.List: boolean add(java.lang.Object)>($r35);

     label4:
        $z4 = interfaceinvoke $r15.<java.util.Iterator: boolean hasNext()>();

        if $z4 != 0 goto label1;

        r1.<kodkod.engine.Solver$SolutionIterator: kodkod.instance.Bounds bounds> = $r7;

        $z3 = interfaceinvoke $r12.<java.util.List: boolean isEmpty()>();

        if $z3 == 0 goto label5;

        $r43 = <kodkod.ast.Formula: kodkod.ast.Formula FALSE>;

        goto label6;

     label5:
        $r41 = virtualinvoke r2.<kodkod.engine.fol2sat.TrivialFormulaException: kodkod.ast.Formula formula()>();

        $r42 = staticinvoke <kodkod.ast.Formula: kodkod.ast.Formula or(java.util.Collection)>($r12);

        $r43 = virtualinvoke $r41.<kodkod.ast.Formula: kodkod.ast.Formula and(kodkod.ast.Formula)>($r42);

     label6:
        r1.<kodkod.engine.Solver$SolutionIterator: kodkod.ast.Formula formula> = $r43;

        return $r11;

     label7:
        r1.<kodkod.engine.Solver$SolutionIterator: kodkod.ast.Formula formula> = null;

        r1.<kodkod.engine.Solver$SolutionIterator: kodkod.instance.Bounds bounds> = null;

        $r4 = virtualinvoke r2.<kodkod.engine.fol2sat.TrivialFormulaException: kodkod.engine.fol2sat.TranslationLog log()>();

        $r5 = staticinvoke <kodkod.engine.Solver: kodkod.engine.Proof access$3(kodkod.engine.fol2sat.TranslationLog)>($r4);

        $r6 = staticinvoke <kodkod.engine.Solution: kodkod.engine.Solution triviallyUnsatisfiable(kodkod.engine.Statistics,kodkod.engine.Proof)>($r0, $r5);

        return $r6;
    }

    public kodkod.engine.Solution next()
    {
        kodkod.engine.config.Options $r3;
        long $l0, $l1, $l2, $l3, $l4, $l5, $l6;
        kodkod.instance.Bounds $r4;
        kodkod.engine.fol2sat.Translation $r1, $r6;
        java.util.NoSuchElementException $r8;
        boolean $z0;
        kodkod.engine.fol2sat.TrivialFormulaException $r9;
        kodkod.ast.Formula $r5;
        kodkod.engine.Solution $r2, $r7, $r10;
        kodkod.engine.Solver$SolutionIterator r0;

        r0 := @this: kodkod.engine.Solver$SolutionIterator;

        $z0 = virtualinvoke r0.<kodkod.engine.Solver$SolutionIterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        $r8 = new java.util.NoSuchElementException;

        specialinvoke $r8.<java.util.NoSuchElementException: void <init>()>();

        throw $r8;

     label1:
        $r1 = r0.<kodkod.engine.Solver$SolutionIterator: kodkod.engine.fol2sat.Translation translation>;

        if $r1 != null goto label5;

     label2:
        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        r0.<kodkod.engine.Solver$SolutionIterator: long translTime> = $l0;

        $r5 = r0.<kodkod.engine.Solver$SolutionIterator: kodkod.ast.Formula formula>;

        $r4 = r0.<kodkod.engine.Solver$SolutionIterator: kodkod.instance.Bounds bounds>;

        $r3 = r0.<kodkod.engine.Solver$SolutionIterator: kodkod.engine.config.Options options>;

        $r6 = staticinvoke <kodkod.engine.fol2sat.Translator: kodkod.engine.fol2sat.Translation translate(kodkod.ast.Formula,kodkod.instance.Bounds,kodkod.engine.config.Options)>($r5, $r4, $r3);

        r0.<kodkod.engine.Solver$SolutionIterator: kodkod.engine.fol2sat.Translation translation> = $r6;

        $l1 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l2 = r0.<kodkod.engine.Solver$SolutionIterator: long translTime>;

        $l3 = $l1 - $l2;

        r0.<kodkod.engine.Solver$SolutionIterator: long translTime> = $l3;

        $r7 = specialinvoke r0.<kodkod.engine.Solver$SolutionIterator: kodkod.engine.Solution nonTrivialSolution()>();

     label3:
        return $r7;

     label4:
        $r9 := @caughtexception;

        $l4 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l5 = r0.<kodkod.engine.Solver$SolutionIterator: long translTime>;

        $l6 = $l4 - $l5;

        r0.<kodkod.engine.Solver$SolutionIterator: long translTime> = $l6;

        $r10 = specialinvoke r0.<kodkod.engine.Solver$SolutionIterator: kodkod.engine.Solution trivialSolution(kodkod.engine.fol2sat.TrivialFormulaException)>($r9);

        return $r10;

     label5:
        $r2 = specialinvoke r0.<kodkod.engine.Solver$SolutionIterator: kodkod.engine.Solution nonTrivialSolution()>();

        return $r2;

        catch kodkod.engine.fol2sat.TrivialFormulaException from label2 to label3 with label4;
    }

    public void remove()
    {
        java.lang.UnsupportedOperationException $r0;
        kodkod.engine.Solver$SolutionIterator r1;

        r1 := @this: kodkod.engine.Solver$SolutionIterator;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public volatile java.lang.Object next()
    {
        kodkod.engine.Solution $r1;
        kodkod.engine.Solver$SolutionIterator r0;

        r0 := @this: kodkod.engine.Solver$SolutionIterator;

        $r1 = virtualinvoke r0.<kodkod.engine.Solver$SolutionIterator: kodkod.engine.Solution next()>();

        return $r1;
    }
}
