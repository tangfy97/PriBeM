public class org.apache.batik.util.DoublyLinkedList$Node extends java.lang.Object
{
    private org.apache.batik.util.DoublyLinkedList$Node next;
    private org.apache.batik.util.DoublyLinkedList$Node prev;

    public void <init>()
    {
        org.apache.batik.util.DoublyLinkedList$Node r0;

        r0 := @this: org.apache.batik.util.DoublyLinkedList$Node;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.batik.util.DoublyLinkedList$Node: org.apache.batik.util.DoublyLinkedList$Node next> = null;

        r0.<org.apache.batik.util.DoublyLinkedList$Node: org.apache.batik.util.DoublyLinkedList$Node prev> = null;

        return;
    }

    public final org.apache.batik.util.DoublyLinkedList$Node getNext()
    {
        org.apache.batik.util.DoublyLinkedList$Node r0, $r1;

        r0 := @this: org.apache.batik.util.DoublyLinkedList$Node;

        $r1 = r0.<org.apache.batik.util.DoublyLinkedList$Node: org.apache.batik.util.DoublyLinkedList$Node next>;

        return $r1;
    }

    public final org.apache.batik.util.DoublyLinkedList$Node getPrev()
    {
        org.apache.batik.util.DoublyLinkedList$Node r0, $r1;

        r0 := @this: org.apache.batik.util.DoublyLinkedList$Node;

        $r1 = r0.<org.apache.batik.util.DoublyLinkedList$Node: org.apache.batik.util.DoublyLinkedList$Node prev>;

        return $r1;
    }

    protected final void setNext(org.apache.batik.util.DoublyLinkedList$Node)
    {
        org.apache.batik.util.DoublyLinkedList$Node r0, r1;

        r0 := @this: org.apache.batik.util.DoublyLinkedList$Node;

        r1 := @parameter0: org.apache.batik.util.DoublyLinkedList$Node;

        r0.<org.apache.batik.util.DoublyLinkedList$Node: org.apache.batik.util.DoublyLinkedList$Node next> = r1;

        return;
    }

    protected final void setPrev(org.apache.batik.util.DoublyLinkedList$Node)
    {
        org.apache.batik.util.DoublyLinkedList$Node r0, r1;

        r0 := @this: org.apache.batik.util.DoublyLinkedList$Node;

        r1 := @parameter0: org.apache.batik.util.DoublyLinkedList$Node;

        r0.<org.apache.batik.util.DoublyLinkedList$Node: org.apache.batik.util.DoublyLinkedList$Node prev> = r1;

        return;
    }

    protected final void unlink()
    {
        org.apache.batik.util.DoublyLinkedList$Node r0, $r1, $r2, $r3, $r4, $r5, $r6;

        r0 := @this: org.apache.batik.util.DoublyLinkedList$Node;

        $r1 = virtualinvoke r0.<org.apache.batik.util.DoublyLinkedList$Node: org.apache.batik.util.DoublyLinkedList$Node getNext()>();

        if $r1 == null goto label1;

        $r5 = virtualinvoke r0.<org.apache.batik.util.DoublyLinkedList$Node: org.apache.batik.util.DoublyLinkedList$Node getNext()>();

        $r6 = virtualinvoke r0.<org.apache.batik.util.DoublyLinkedList$Node: org.apache.batik.util.DoublyLinkedList$Node getPrev()>();

        virtualinvoke $r5.<org.apache.batik.util.DoublyLinkedList$Node: void setPrev(org.apache.batik.util.DoublyLinkedList$Node)>($r6);

     label1:
        $r2 = virtualinvoke r0.<org.apache.batik.util.DoublyLinkedList$Node: org.apache.batik.util.DoublyLinkedList$Node getPrev()>();

        if $r2 == null goto label2;

        $r3 = virtualinvoke r0.<org.apache.batik.util.DoublyLinkedList$Node: org.apache.batik.util.DoublyLinkedList$Node getPrev()>();

        $r4 = virtualinvoke r0.<org.apache.batik.util.DoublyLinkedList$Node: org.apache.batik.util.DoublyLinkedList$Node getNext()>();

        virtualinvoke $r3.<org.apache.batik.util.DoublyLinkedList$Node: void setNext(org.apache.batik.util.DoublyLinkedList$Node)>($r4);

     label2:
        virtualinvoke r0.<org.apache.batik.util.DoublyLinkedList$Node: void setNext(org.apache.batik.util.DoublyLinkedList$Node)>(null);

        virtualinvoke r0.<org.apache.batik.util.DoublyLinkedList$Node: void setPrev(org.apache.batik.util.DoublyLinkedList$Node)>(null);

        return;
    }

    protected final void insertBefore(org.apache.batik.util.DoublyLinkedList$Node)
    {
        org.apache.batik.util.DoublyLinkedList$Node r0, r1, $r2, $r3, $r4, $r5;

        r0 := @this: org.apache.batik.util.DoublyLinkedList$Node;

        r1 := @parameter0: org.apache.batik.util.DoublyLinkedList$Node;

        if r0 != r1 goto label1;

        return;

     label1:
        $r2 = virtualinvoke r0.<org.apache.batik.util.DoublyLinkedList$Node: org.apache.batik.util.DoublyLinkedList$Node getPrev()>();

        if $r2 == null goto label2;

        virtualinvoke r0.<org.apache.batik.util.DoublyLinkedList$Node: void unlink()>();

     label2:
        if r1 != null goto label3;

        virtualinvoke r0.<org.apache.batik.util.DoublyLinkedList$Node: void setNext(org.apache.batik.util.DoublyLinkedList$Node)>(r0);

        virtualinvoke r0.<org.apache.batik.util.DoublyLinkedList$Node: void setPrev(org.apache.batik.util.DoublyLinkedList$Node)>(r0);

        goto label4;

     label3:
        virtualinvoke r0.<org.apache.batik.util.DoublyLinkedList$Node: void setNext(org.apache.batik.util.DoublyLinkedList$Node)>(r1);

        $r3 = virtualinvoke r1.<org.apache.batik.util.DoublyLinkedList$Node: org.apache.batik.util.DoublyLinkedList$Node getPrev()>();

        virtualinvoke r0.<org.apache.batik.util.DoublyLinkedList$Node: void setPrev(org.apache.batik.util.DoublyLinkedList$Node)>($r3);

        virtualinvoke r1.<org.apache.batik.util.DoublyLinkedList$Node: void setPrev(org.apache.batik.util.DoublyLinkedList$Node)>(r0);

        $r4 = virtualinvoke r0.<org.apache.batik.util.DoublyLinkedList$Node: org.apache.batik.util.DoublyLinkedList$Node getPrev()>();

        if $r4 == null goto label4;

        $r5 = virtualinvoke r0.<org.apache.batik.util.DoublyLinkedList$Node: org.apache.batik.util.DoublyLinkedList$Node getPrev()>();

        virtualinvoke $r5.<org.apache.batik.util.DoublyLinkedList$Node: void setNext(org.apache.batik.util.DoublyLinkedList$Node)>(r0);

     label4:
        return;
    }
}
