class org.waveprotocol.wave.concurrencycontrol.wave.DuplexOpSinkFactory$1$1 extends java.lang.Object implements org.waveprotocol.wave.concurrencycontrol.wave.DuplexOpSink
{
    final org.waveprotocol.wave.concurrencycontrol.wave.FlushingOperationSink val$fromChannel;
    final org.waveprotocol.wave.model.operation.SilentOperationSink val$toChannel;
    final org.waveprotocol.wave.concurrencycontrol.wave.DuplexOpSinkFactory$1 this$0;

    void <init>(org.waveprotocol.wave.concurrencycontrol.wave.DuplexOpSinkFactory$1, org.waveprotocol.wave.concurrencycontrol.wave.FlushingOperationSink, org.waveprotocol.wave.model.operation.SilentOperationSink)
    {
        org.waveprotocol.wave.model.operation.SilentOperationSink r3;
        org.waveprotocol.wave.concurrencycontrol.wave.FlushingOperationSink r2;
        org.waveprotocol.wave.concurrencycontrol.wave.DuplexOpSinkFactory$1$1 r0;
        org.waveprotocol.wave.concurrencycontrol.wave.DuplexOpSinkFactory$1 r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.wave.DuplexOpSinkFactory$1$1;

        r1 := @parameter0: org.waveprotocol.wave.concurrencycontrol.wave.DuplexOpSinkFactory$1;

        r2 := @parameter1: org.waveprotocol.wave.concurrencycontrol.wave.FlushingOperationSink;

        r3 := @parameter2: org.waveprotocol.wave.model.operation.SilentOperationSink;

        r0.<org.waveprotocol.wave.concurrencycontrol.wave.DuplexOpSinkFactory$1$1: org.waveprotocol.wave.concurrencycontrol.wave.DuplexOpSinkFactory$1 this$0> = r1;

        r0.<org.waveprotocol.wave.concurrencycontrol.wave.DuplexOpSinkFactory$1$1: org.waveprotocol.wave.concurrencycontrol.wave.FlushingOperationSink val$fromChannel> = r2;

        r0.<org.waveprotocol.wave.concurrencycontrol.wave.DuplexOpSinkFactory$1$1: org.waveprotocol.wave.model.operation.SilentOperationSink val$toChannel> = r3;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public org.waveprotocol.wave.concurrencycontrol.wave.FlushingOperationSink incoming()
    {
        org.waveprotocol.wave.concurrencycontrol.wave.FlushingOperationSink $r1;
        org.waveprotocol.wave.concurrencycontrol.wave.DuplexOpSinkFactory$1$1 r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.wave.DuplexOpSinkFactory$1$1;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.wave.DuplexOpSinkFactory$1$1: org.waveprotocol.wave.concurrencycontrol.wave.FlushingOperationSink val$fromChannel>;

        return $r1;
    }

    public org.waveprotocol.wave.model.operation.SilentOperationSink outgoing()
    {
        org.waveprotocol.wave.model.operation.SilentOperationSink $r1;
        org.waveprotocol.wave.concurrencycontrol.wave.DuplexOpSinkFactory$1$1 r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.wave.DuplexOpSinkFactory$1$1;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.wave.DuplexOpSinkFactory$1$1: org.waveprotocol.wave.model.operation.SilentOperationSink val$toChannel>;

        return $r1;
    }
}
