class org.springframework.expression.spel.standard.InternalSpelExpressionParser extends org.springframework.expression.common.TemplateAwareExpressionParser
{
    private java.lang.String expressionString;
    private java.util.List tokenStream;
    private int tokenStreamLength;
    private int tokenStreamPointer;
    private java.util.Stack constructedNodes;
    private org.springframework.expression.spel.SpelParserConfiguration configuration;

    public void <init>(org.springframework.expression.spel.SpelParserConfiguration)
    {
        org.springframework.expression.spel.SpelParserConfiguration r2;
        org.springframework.expression.spel.standard.InternalSpelExpressionParser r0;
        java.util.Stack $r1;

        r0 := @this: org.springframework.expression.spel.standard.InternalSpelExpressionParser;

        r2 := @parameter0: org.springframework.expression.spel.SpelParserConfiguration;

        specialinvoke r0.<org.springframework.expression.common.TemplateAwareExpressionParser: void <init>()>();

        $r1 = new java.util.Stack;

        specialinvoke $r1.<java.util.Stack: void <init>()>();

        r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: java.util.Stack constructedNodes> = $r1;

        r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: org.springframework.expression.spel.SpelParserConfiguration configuration> = r2;

        return;
    }

    protected org.springframework.expression.spel.standard.SpelExpression doParseExpression(java.lang.String, org.springframework.expression.ParserContext) throws org.springframework.expression.ParseException
    {
        java.lang.Object[] $r12;
        org.springframework.expression.spel.standard.Token $r11, $r14;
        org.springframework.expression.ParserContext r18;
        java.util.Stack $r5, $r7;
        org.springframework.expression.spel.SpelParseException $r10, $r17;
        org.springframework.expression.spel.InternalParseException $r16;
        int $i0, $i1;
        java.lang.String r1, $r15;
        boolean $z0, $z1;
        org.springframework.expression.spel.SpelMessage $r13;
        org.springframework.expression.spel.SpelParserConfiguration $r9;
        java.util.List $r3, $r4;
        org.springframework.expression.spel.standard.SpelExpression $r8;
        org.springframework.expression.spel.standard.InternalSpelExpressionParser r0;
        org.springframework.expression.spel.standard.Tokenizer $r2;
        org.springframework.expression.spel.ast.SpelNodeImpl $r6;

        r0 := @this: org.springframework.expression.spel.standard.InternalSpelExpressionParser;

        r1 := @parameter0: java.lang.String;

        r18 := @parameter1: org.springframework.expression.ParserContext;

     label1:
        r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: java.lang.String expressionString> = r1;

        $r2 = new org.springframework.expression.spel.standard.Tokenizer;

        specialinvoke $r2.<org.springframework.expression.spel.standard.Tokenizer: void <init>(java.lang.String)>(r1);

        virtualinvoke $r2.<org.springframework.expression.spel.standard.Tokenizer: void process()>();

        $r3 = virtualinvoke $r2.<org.springframework.expression.spel.standard.Tokenizer: java.util.List getTokens()>();

        r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: java.util.List tokenStream> = $r3;

        $r4 = r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: java.util.List tokenStream>;

        $i0 = interfaceinvoke $r4.<java.util.List: int size()>();

        r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: int tokenStreamLength> = $i0;

        r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: int tokenStreamPointer> = 0;

        $r5 = r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: java.util.Stack constructedNodes>;

        virtualinvoke $r5.<java.util.Stack: void clear()>();

        $r6 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: org.springframework.expression.spel.ast.SpelNodeImpl eatExpression()>();

        $z0 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: boolean moreTokens()>();

        if $z0 == 0 goto label2;

        $r10 = new org.springframework.expression.spel.SpelParseException;

        $r11 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: org.springframework.expression.spel.standard.Token peekToken()>();

        $i1 = $r11.<org.springframework.expression.spel.standard.Token: int startpos>;

        $r13 = <org.springframework.expression.spel.SpelMessage: org.springframework.expression.spel.SpelMessage MORE_INPUT>;

        $r12 = newarray (java.lang.Object)[1];

        $r14 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: org.springframework.expression.spel.standard.Token nextToken()>();

        $r15 = virtualinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: java.lang.String toString(org.springframework.expression.spel.standard.Token)>($r14);

        $r12[0] = $r15;

        specialinvoke $r10.<org.springframework.expression.spel.SpelParseException: void <init>(int,org.springframework.expression.spel.SpelMessage,java.lang.Object[])>($i1, $r13, $r12);

        throw $r10;

     label2:
        $r7 = r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: java.util.Stack constructedNodes>;

        $z1 = virtualinvoke $r7.<java.util.Stack: boolean isEmpty()>();

        staticinvoke <org.springframework.util.Assert: void isTrue(boolean)>($z1);

        $r8 = new org.springframework.expression.spel.standard.SpelExpression;

        $r9 = r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: org.springframework.expression.spel.SpelParserConfiguration configuration>;

        specialinvoke $r8.<org.springframework.expression.spel.standard.SpelExpression: void <init>(java.lang.String,org.springframework.expression.spel.ast.SpelNodeImpl,org.springframework.expression.spel.SpelParserConfiguration)>(r1, $r6, $r9);

     label3:
        return $r8;

     label4:
        $r16 := @caughtexception;

        $r17 = virtualinvoke $r16.<org.springframework.expression.spel.InternalParseException: org.springframework.expression.spel.SpelParseException getCause()>();

        throw $r17;

        catch org.springframework.expression.spel.InternalParseException from label1 to label3 with label4;
    }

    private org.springframework.expression.spel.ast.SpelNodeImpl eatExpression()
    {
        org.springframework.expression.spel.ast.Elvis $r16;
        boolean $z0;
        org.springframework.expression.spel.ast.Ternary $r12;
        org.springframework.expression.spel.ast.SpelNodeImpl[] $r13, $r17, $r22;
        org.springframework.expression.spel.ast.SpelNodeImpl $r1, $r9, $r11, $r15, $r20, r24, r25;
        org.springframework.expression.spel.standard.TokenKind $r3, $r4, $r5, $r6, $r7, $r8, $r10;
        org.springframework.expression.spel.ast.NullLiteral $r14, $r18, $r19, $r23;
        org.springframework.expression.spel.standard.Token $r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22;
        org.springframework.expression.spel.ast.Assign $r21;
        org.springframework.expression.spel.standard.InternalSpelExpressionParser r0;

        r0 := @this: org.springframework.expression.spel.standard.InternalSpelExpressionParser;

        $r1 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: org.springframework.expression.spel.ast.SpelNodeImpl eatLogicalOrExpression()>();

        r24 = $r1;

        $z0 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: boolean moreTokens()>();

        if $z0 == 0 goto label7;

        $r2 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: org.springframework.expression.spel.standard.Token peekToken()>();

        $r4 = $r2.<org.springframework.expression.spel.standard.Token: org.springframework.expression.spel.standard.TokenKind kind>;

        $r3 = <org.springframework.expression.spel.standard.TokenKind: org.springframework.expression.spel.standard.TokenKind ASSIGN>;

        if $r4 != $r3 goto label2;

        if $r1 != null goto label1;

        $r23 = new org.springframework.expression.spel.ast.NullLiteral;

        $i18 = $r2.<org.springframework.expression.spel.standard.Token: int startpos>;

        $i21 = $i18 - 1;

        $i19 = $r2.<org.springframework.expression.spel.standard.Token: int endpos>;

        $i20 = $i19 - 1;

        $i22 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: int toPos(int,int)>($i21, $i20);

        specialinvoke $r23.<org.springframework.expression.spel.ast.NullLiteral: void <init>(int)>($i22);

        r24 = $r23;

     label1:
        specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: org.springframework.expression.spel.standard.Token nextToken()>();

        $r20 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: org.springframework.expression.spel.ast.SpelNodeImpl eatLogicalOrExpression()>();

        $r21 = new org.springframework.expression.spel.ast.Assign;

        $i17 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: int toPos(org.springframework.expression.spel.standard.Token)>($r2);

        $r22 = newarray (org.springframework.expression.spel.ast.SpelNodeImpl)[2];

        $r22[0] = r24;

        $r22[1] = $r20;

        specialinvoke $r21.<org.springframework.expression.spel.ast.Assign: void <init>(int,org.springframework.expression.spel.ast.SpelNodeImpl[])>($i17, $r22);

        return $r21;

     label2:
        $r6 = $r2.<org.springframework.expression.spel.standard.Token: org.springframework.expression.spel.standard.TokenKind kind>;

        $r5 = <org.springframework.expression.spel.standard.TokenKind: org.springframework.expression.spel.standard.TokenKind ELVIS>;

        if $r6 != $r5 goto label5;

        if $r1 != null goto label3;

        $r19 = new org.springframework.expression.spel.ast.NullLiteral;

        $i12 = $r2.<org.springframework.expression.spel.standard.Token: int startpos>;

        $i15 = $i12 - 1;

        $i13 = $r2.<org.springframework.expression.spel.standard.Token: int endpos>;

        $i14 = $i13 - 2;

        $i16 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: int toPos(int,int)>($i15, $i14);

        specialinvoke $r19.<org.springframework.expression.spel.ast.NullLiteral: void <init>(int)>($i16);

        r24 = $r19;

     label3:
        specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: org.springframework.expression.spel.standard.Token nextToken()>();

        $r15 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: org.springframework.expression.spel.ast.SpelNodeImpl eatExpression()>();

        r25 = $r15;

        if $r15 != null goto label4;

        $r18 = new org.springframework.expression.spel.ast.NullLiteral;

        $i7 = $r2.<org.springframework.expression.spel.standard.Token: int startpos>;

        $i10 = $i7 + 1;

        $i8 = $r2.<org.springframework.expression.spel.standard.Token: int endpos>;

        $i9 = $i8 + 1;

        $i11 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: int toPos(int,int)>($i10, $i9);

        specialinvoke $r18.<org.springframework.expression.spel.ast.NullLiteral: void <init>(int)>($i11);

        r25 = $r18;

     label4:
        $r16 = new org.springframework.expression.spel.ast.Elvis;

        $i6 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: int toPos(org.springframework.expression.spel.standard.Token)>($r2);

        $r17 = newarray (org.springframework.expression.spel.ast.SpelNodeImpl)[2];

        $r17[0] = r24;

        $r17[1] = r25;

        specialinvoke $r16.<org.springframework.expression.spel.ast.Elvis: void <init>(int,org.springframework.expression.spel.ast.SpelNodeImpl[])>($i6, $r17);

        return $r16;

     label5:
        $r8 = $r2.<org.springframework.expression.spel.standard.Token: org.springframework.expression.spel.standard.TokenKind kind>;

        $r7 = <org.springframework.expression.spel.standard.TokenKind: org.springframework.expression.spel.standard.TokenKind QMARK>;

        if $r8 != $r7 goto label7;

        if $r1 != null goto label6;

        $r14 = new org.springframework.expression.spel.ast.NullLiteral;

        $i1 = $r2.<org.springframework.expression.spel.standard.Token: int startpos>;

        $i4 = $i1 - 1;

        $i2 = $r2.<org.springframework.expression.spel.standard.Token: int endpos>;

        $i3 = $i2 - 1;

        $i5 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: int toPos(int,int)>($i4, $i3);

        specialinvoke $r14.<org.springframework.expression.spel.ast.NullLiteral: void <init>(int)>($i5);

        r24 = $r14;

     label6:
        specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: org.springframework.expression.spel.standard.Token nextToken()>();

        $r9 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: org.springframework.expression.spel.ast.SpelNodeImpl eatExpression()>();

        $r10 = <org.springframework.expression.spel.standard.TokenKind: org.springframework.expression.spel.standard.TokenKind COLON>;

        specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: org.springframework.expression.spel.standard.Token eatToken(org.springframework.expression.spel.standard.TokenKind)>($r10);

        $r11 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: org.springframework.expression.spel.ast.SpelNodeImpl eatExpression()>();

        $r12 = new org.springframework.expression.spel.ast.Ternary;

        $i0 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: int toPos(org.springframework.expression.spel.standard.Token)>($r2);

        $r13 = newarray (org.springframework.expression.spel.ast.SpelNodeImpl)[3];

        $r13[0] = r24;

        $r13[1] = $r9;

        $r13[2] = $r11;

        specialinvoke $r12.<org.springframework.expression.spel.ast.Ternary: void <init>(int,org.springframework.expression.spel.ast.SpelNodeImpl[])>($i0, $r13);

        return $r12;

     label7:
        return $r1;
    }

    private org.springframework.expression.spel.ast.SpelNodeImpl eatLogicalOrExpression()
    {
        org.springframework.expression.spel.ast.OpOr $r3;
        org.springframework.expression.spel.standard.Token $r1;
        org.springframework.expression.spel.ast.SpelNodeImpl[] $r4;
        org.springframework.expression.spel.standard.InternalSpelExpressionParser r0;
        int $i0;
        org.springframework.expression.spel.ast.SpelNodeImpl $r2, r5;
        boolean $z0;

        r0 := @this: org.springframework.expression.spel.standard.InternalSpelExpressionParser;

        r5 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: org.springframework.expression.spel.ast.SpelNodeImpl eatLogicalAndExpression()>();

        goto label2;

     label1:
        $r1 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: org.springframework.expression.spel.standard.Token nextToken()>();

        $r2 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: org.springframework.expression.spel.ast.SpelNodeImpl eatLogicalAndExpression()>();

        specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: void checkRightOperand(org.springframework.expression.spel.standard.Token,org.springframework.expression.spel.ast.SpelNodeImpl)>($r1, $r2);

        $r3 = new org.springframework.expression.spel.ast.OpOr;

        $i0 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: int toPos(org.springframework.expression.spel.standard.Token)>($r1);

        $r4 = newarray (org.springframework.expression.spel.ast.SpelNodeImpl)[2];

        $r4[0] = r5;

        $r4[1] = $r2;

        specialinvoke $r3.<org.springframework.expression.spel.ast.OpOr: void <init>(int,org.springframework.expression.spel.ast.SpelNodeImpl[])>($i0, $r4);

        r5 = $r3;

     label2:
        $z0 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: boolean peekIdentifierToken(java.lang.String)>("or");

        if $z0 != 0 goto label1;

        return r5;
    }

    private org.springframework.expression.spel.ast.SpelNodeImpl eatLogicalAndExpression()
    {
        org.springframework.expression.spel.standard.Token $r1;
        org.springframework.expression.spel.ast.SpelNodeImpl[] $r4;
        org.springframework.expression.spel.standard.InternalSpelExpressionParser r0;
        org.springframework.expression.spel.ast.OpAnd $r3;
        int $i0;
        org.springframework.expression.spel.ast.SpelNodeImpl $r2, r5;
        boolean $z0;

        r0 := @this: org.springframework.expression.spel.standard.InternalSpelExpressionParser;

        r5 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: org.springframework.expression.spel.ast.SpelNodeImpl eatRelationalExpression()>();

        goto label2;

     label1:
        $r1 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: org.springframework.expression.spel.standard.Token nextToken()>();

        $r2 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: org.springframework.expression.spel.ast.SpelNodeImpl eatRelationalExpression()>();

        specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: void checkRightOperand(org.springframework.expression.spel.standard.Token,org.springframework.expression.spel.ast.SpelNodeImpl)>($r1, $r2);

        $r3 = new org.springframework.expression.spel.ast.OpAnd;

        $i0 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: int toPos(org.springframework.expression.spel.standard.Token)>($r1);

        $r4 = newarray (org.springframework.expression.spel.ast.SpelNodeImpl)[2];

        $r4[0] = r5;

        $r4[1] = $r2;

        specialinvoke $r3.<org.springframework.expression.spel.ast.OpAnd: void <init>(int,org.springframework.expression.spel.ast.SpelNodeImpl[])>($i0, $r4);

        r5 = $r3;

     label2:
        $z0 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: boolean peekIdentifierToken(java.lang.String)>("and");

        if $z0 != 0 goto label1;

        return r5;
    }

    private org.springframework.expression.spel.ast.SpelNodeImpl eatRelationalExpression()
    {
        org.springframework.expression.spel.ast.OperatorMatches $r11;
        boolean $z0, $z1, $z2;
        org.springframework.expression.spel.ast.OpGE $r25;
        org.springframework.expression.spel.ast.SpelNodeImpl[] $r10, $r12, $r14, $r22, $r24, $r26, $r28, $r30, $r32;
        org.springframework.expression.spel.ast.OpGT $r31;
        org.springframework.expression.spel.ast.SpelNodeImpl $r1, $r4;
        org.springframework.expression.spel.standard.TokenKind r5, $r6, $r7, $r8, $r15, $r16, $r17, $r18, $r19, $r20;
        org.springframework.expression.spel.standard.Token $r2, $r3;
        org.springframework.expression.spel.ast.OpLE $r27;
        int $i0, $i1, $i2, $i3;
        org.springframework.expression.spel.ast.OpLT $r29;
        org.springframework.expression.spel.ast.OperatorBetween $r9;
        org.springframework.expression.spel.ast.OperatorInstanceof $r13;
        org.springframework.expression.spel.ast.OpNE $r21;
        org.springframework.expression.spel.standard.InternalSpelExpressionParser r0;
        org.springframework.expression.spel.ast.OpEQ $r23;

        r0 := @this: org.springframework.expression.spel.standard.InternalSpelExpressionParser;

        $r1 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: org.springframework.expression.spel.ast.SpelNodeImpl eatSumExpression()>();

        $r2 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: org.springframework.expression.spel.standard.Token maybeEatRelationalOperator()>();

        if $r2 == null goto label13;

        $r3 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: org.springframework.expression.spel.standard.Token nextToken()>();

        $r4 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: org.springframework.expression.spel.ast.SpelNodeImpl eatSumExpression()>();

        specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: void checkRightOperand(org.springframework.expression.spel.standard.Token,org.springframework.expression.spel.ast.SpelNodeImpl)>($r3, $r4);

        r5 = $r2.<org.springframework.expression.spel.standard.Token: org.springframework.expression.spel.standard.TokenKind kind>;

        $z0 = virtualinvoke $r2.<org.springframework.expression.spel.standard.Token: boolean isNumericRelationalOperator()>();

        if $z0 == 0 goto label08;

        $i3 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: int toPos(org.springframework.expression.spel.standard.Token)>($r3);

        $r15 = <org.springframework.expression.spel.standard.TokenKind: org.springframework.expression.spel.standard.TokenKind GT>;

        if r5 != $r15 goto label01;

        $r31 = new org.springframework.expression.spel.ast.OpGT;

        $r32 = newarray (org.springframework.expression.spel.ast.SpelNodeImpl)[2];

        $r32[0] = $r1;

        $r32[1] = $r4;

        specialinvoke $r31.<org.springframework.expression.spel.ast.OpGT: void <init>(int,org.springframework.expression.spel.ast.SpelNodeImpl[])>($i3, $r32);

        return $r31;

     label01:
        $r16 = <org.springframework.expression.spel.standard.TokenKind: org.springframework.expression.spel.standard.TokenKind LT>;

        if r5 != $r16 goto label02;

        $r29 = new org.springframework.expression.spel.ast.OpLT;

        $r30 = newarray (org.springframework.expression.spel.ast.SpelNodeImpl)[2];

        $r30[0] = $r1;

        $r30[1] = $r4;

        specialinvoke $r29.<org.springframework.expression.spel.ast.OpLT: void <init>(int,org.springframework.expression.spel.ast.SpelNodeImpl[])>($i3, $r30);

        return $r29;

     label02:
        $r17 = <org.springframework.expression.spel.standard.TokenKind: org.springframework.expression.spel.standard.TokenKind LE>;

        if r5 != $r17 goto label03;

        $r27 = new org.springframework.expression.spel.ast.OpLE;

        $r28 = newarray (org.springframework.expression.spel.ast.SpelNodeImpl)[2];

        $r28[0] = $r1;

        $r28[1] = $r4;

        specialinvoke $r27.<org.springframework.expression.spel.ast.OpLE: void <init>(int,org.springframework.expression.spel.ast.SpelNodeImpl[])>($i3, $r28);

        return $r27;

     label03:
        $r18 = <org.springframework.expression.spel.standard.TokenKind: org.springframework.expression.spel.standard.TokenKind GE>;

        if r5 != $r18 goto label04;

        $r25 = new org.springframework.expression.spel.ast.OpGE;

        $r26 = newarray (org.springframework.expression.spel.ast.SpelNodeImpl)[2];

        $r26[0] = $r1;

        $r26[1] = $r4;

        specialinvoke $r25.<org.springframework.expression.spel.ast.OpGE: void <init>(int,org.springframework.expression.spel.ast.SpelNodeImpl[])>($i3, $r26);

        return $r25;

     label04:
        $r19 = <org.springframework.expression.spel.standard.TokenKind: org.springframework.expression.spel.standard.TokenKind EQ>;

        if r5 != $r19 goto label05;

        $r23 = new org.springframework.expression.spel.ast.OpEQ;

        $r24 = newarray (org.springframework.expression.spel.ast.SpelNodeImpl)[2];

        $r24[0] = $r1;

        $r24[1] = $r4;

        specialinvoke $r23.<org.springframework.expression.spel.ast.OpEQ: void <init>(int,org.springframework.expression.spel.ast.SpelNodeImpl[])>($i3, $r24);

        return $r23;

     label05:
        $r20 = <org.springframework.expression.spel.standard.TokenKind: org.springframework.expression.spel.standard.TokenKind NE>;

        if r5 != $r20 goto label06;

        $z1 = 1;

        goto label07;

     label06:
        $z1 = 0;

     label07:
        staticinvoke <org.springframework.util.Assert: void isTrue(boolean)>($z1);

        $r21 = new org.springframework.expression.spel.ast.OpNE;

        $r22 = newarray (org.springframework.expression.spel.ast.SpelNodeImpl)[2];

        $r22[0] = $r1;

        $r22[1] = $r4;

        specialinvoke $r21.<org.springframework.expression.spel.ast.OpNE: void <init>(int,org.springframework.expression.spel.ast.SpelNodeImpl[])>($i3, $r22);

        return $r21;

     label08:
        $r6 = <org.springframework.expression.spel.standard.TokenKind: org.springframework.expression.spel.standard.TokenKind INSTANCEOF>;

        if r5 != $r6 goto label09;

        $r13 = new org.springframework.expression.spel.ast.OperatorInstanceof;

        $i2 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: int toPos(org.springframework.expression.spel.standard.Token)>($r3);

        $r14 = newarray (org.springframework.expression.spel.ast.SpelNodeImpl)[2];

        $r14[0] = $r1;

        $r14[1] = $r4;

        specialinvoke $r13.<org.springframework.expression.spel.ast.OperatorInstanceof: void <init>(int,org.springframework.expression.spel.ast.SpelNodeImpl[])>($i2, $r14);

        return $r13;

     label09:
        $r7 = <org.springframework.expression.spel.standard.TokenKind: org.springframework.expression.spel.standard.TokenKind MATCHES>;

        if r5 != $r7 goto label10;

        $r11 = new org.springframework.expression.spel.ast.OperatorMatches;

        $i1 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: int toPos(org.springframework.expression.spel.standard.Token)>($r3);

        $r12 = newarray (org.springframework.expression.spel.ast.SpelNodeImpl)[2];

        $r12[0] = $r1;

        $r12[1] = $r4;

        specialinvoke $r11.<org.springframework.expression.spel.ast.OperatorMatches: void <init>(int,org.springframework.expression.spel.ast.SpelNodeImpl[])>($i1, $r12);

        return $r11;

     label10:
        $r8 = <org.springframework.expression.spel.standard.TokenKind: org.springframework.expression.spel.standard.TokenKind BETWEEN>;

        if r5 != $r8 goto label11;

        $z2 = 1;

        goto label12;

     label11:
        $z2 = 0;

     label12:
        staticinvoke <org.springframework.util.Assert: void isTrue(boolean)>($z2);

        $r9 = new org.springframework.expression.spel.ast.OperatorBetween;

        $i0 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: int toPos(org.springframework.expression.spel.standard.Token)>($r3);

        $r10 = newarray (org.springframework.expression.spel.ast.SpelNodeImpl)[2];

        $r10[0] = $r1;

        $r10[1] = $r4;

        specialinvoke $r9.<org.springframework.expression.spel.ast.OperatorBetween: void <init>(int,org.springframework.expression.spel.ast.SpelNodeImpl[])>($i0, $r10);

        return $r9;

     label13:
        return $r1;
    }

    private org.springframework.expression.spel.ast.SpelNodeImpl eatSumExpression()
    {
        org.springframework.expression.spel.standard.Token $r1;
        int $i0, $i1;
        boolean $z0, $z1;
        org.springframework.expression.spel.ast.OpPlus $r9;
        org.springframework.expression.spel.ast.SpelNodeImpl[] $r8, $r10;
        org.springframework.expression.spel.standard.InternalSpelExpressionParser r0;
        org.springframework.expression.spel.ast.SpelNodeImpl $r2, r11;
        org.springframework.expression.spel.standard.TokenKind $r3, $r4, $r5, $r6, $r12, $r13;
        org.springframework.expression.spel.ast.OpMinus $r7;

        r0 := @this: org.springframework.expression.spel.standard.InternalSpelExpressionParser;

        r11 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: org.springframework.expression.spel.ast.SpelNodeImpl eatProductExpression()>();

        goto label5;

     label1:
        $r1 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: org.springframework.expression.spel.standard.Token nextToken()>();

        $r2 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: org.springframework.expression.spel.ast.SpelNodeImpl eatProductExpression()>();

        specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: void checkRightOperand(org.springframework.expression.spel.standard.Token,org.springframework.expression.spel.ast.SpelNodeImpl)>($r1, $r2);

        $r4 = $r1.<org.springframework.expression.spel.standard.Token: org.springframework.expression.spel.standard.TokenKind kind>;

        $r3 = <org.springframework.expression.spel.standard.TokenKind: org.springframework.expression.spel.standard.TokenKind PLUS>;

        if $r4 != $r3 goto label2;

        $r9 = new org.springframework.expression.spel.ast.OpPlus;

        $i1 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: int toPos(org.springframework.expression.spel.standard.Token)>($r1);

        $r10 = newarray (org.springframework.expression.spel.ast.SpelNodeImpl)[2];

        $r10[0] = r11;

        $r10[1] = $r2;

        specialinvoke $r9.<org.springframework.expression.spel.ast.OpPlus: void <init>(int,org.springframework.expression.spel.ast.SpelNodeImpl[])>($i1, $r10);

        r11 = $r9;

        goto label5;

     label2:
        $r6 = $r1.<org.springframework.expression.spel.standard.Token: org.springframework.expression.spel.standard.TokenKind kind>;

        $r5 = <org.springframework.expression.spel.standard.TokenKind: org.springframework.expression.spel.standard.TokenKind MINUS>;

        if $r6 != $r5 goto label3;

        $z0 = 1;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        staticinvoke <org.springframework.util.Assert: void isTrue(boolean)>($z0);

        $r7 = new org.springframework.expression.spel.ast.OpMinus;

        $i0 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: int toPos(org.springframework.expression.spel.standard.Token)>($r1);

        $r8 = newarray (org.springframework.expression.spel.ast.SpelNodeImpl)[2];

        $r8[0] = r11;

        $r8[1] = $r2;

        specialinvoke $r7.<org.springframework.expression.spel.ast.OpMinus: void <init>(int,org.springframework.expression.spel.ast.SpelNodeImpl[])>($i0, $r8);

        r11 = $r7;

     label5:
        $r12 = <org.springframework.expression.spel.standard.TokenKind: org.springframework.expression.spel.standard.TokenKind PLUS>;

        $r13 = <org.springframework.expression.spel.standard.TokenKind: org.springframework.expression.spel.standard.TokenKind MINUS>;

        $z1 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: boolean peekToken(org.springframework.expression.spel.standard.TokenKind,org.springframework.expression.spel.standard.TokenKind)>($r12, $r13);

        if $z1 != 0 goto label1;

        return r11;
    }

    private org.springframework.expression.spel.ast.SpelNodeImpl eatProductExpression()
    {
        org.springframework.expression.spel.standard.Token $r1;
        org.springframework.expression.spel.ast.OpDivide $r11;
        int $i0, $i1, $i2;
        boolean $z0, $z1;
        org.springframework.expression.spel.ast.SpelNodeImpl[] $r10, $r12, $r14;
        org.springframework.expression.spel.standard.InternalSpelExpressionParser r0;
        org.springframework.expression.spel.ast.OpModulus $r9;
        org.springframework.expression.spel.ast.SpelNodeImpl $r2, r15;
        org.springframework.expression.spel.standard.TokenKind $r3, $r4, $r5, $r6, $r7, $r8, $r16, $r17, $r18;
        org.springframework.expression.spel.ast.OpMultiply $r13;

        r0 := @this: org.springframework.expression.spel.standard.InternalSpelExpressionParser;

        r15 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: org.springframework.expression.spel.ast.SpelNodeImpl eatPowerExpression()>();

        goto label6;

     label1:
        $r1 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: org.springframework.expression.spel.standard.Token nextToken()>();

        $r2 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: org.springframework.expression.spel.ast.SpelNodeImpl eatPowerExpression()>();

        specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: void checkRightOperand(org.springframework.expression.spel.standard.Token,org.springframework.expression.spel.ast.SpelNodeImpl)>($r1, $r2);

        $r4 = $r1.<org.springframework.expression.spel.standard.Token: org.springframework.expression.spel.standard.TokenKind kind>;

        $r3 = <org.springframework.expression.spel.standard.TokenKind: org.springframework.expression.spel.standard.TokenKind STAR>;

        if $r4 != $r3 goto label2;

        $r13 = new org.springframework.expression.spel.ast.OpMultiply;

        $i2 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: int toPos(org.springframework.expression.spel.standard.Token)>($r1);

        $r14 = newarray (org.springframework.expression.spel.ast.SpelNodeImpl)[2];

        $r14[0] = r15;

        $r14[1] = $r2;

        specialinvoke $r13.<org.springframework.expression.spel.ast.OpMultiply: void <init>(int,org.springframework.expression.spel.ast.SpelNodeImpl[])>($i2, $r14);

        r15 = $r13;

        goto label6;

     label2:
        $r6 = $r1.<org.springframework.expression.spel.standard.Token: org.springframework.expression.spel.standard.TokenKind kind>;

        $r5 = <org.springframework.expression.spel.standard.TokenKind: org.springframework.expression.spel.standard.TokenKind DIV>;

        if $r6 != $r5 goto label3;

        $r11 = new org.springframework.expression.spel.ast.OpDivide;

        $i1 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: int toPos(org.springframework.expression.spel.standard.Token)>($r1);

        $r12 = newarray (org.springframework.expression.spel.ast.SpelNodeImpl)[2];

        $r12[0] = r15;

        $r12[1] = $r2;

        specialinvoke $r11.<org.springframework.expression.spel.ast.OpDivide: void <init>(int,org.springframework.expression.spel.ast.SpelNodeImpl[])>($i1, $r12);

        r15 = $r11;

        goto label6;

     label3:
        $r8 = $r1.<org.springframework.expression.spel.standard.Token: org.springframework.expression.spel.standard.TokenKind kind>;

        $r7 = <org.springframework.expression.spel.standard.TokenKind: org.springframework.expression.spel.standard.TokenKind MOD>;

        if $r8 != $r7 goto label4;

        $z0 = 1;

        goto label5;

     label4:
        $z0 = 0;

     label5:
        staticinvoke <org.springframework.util.Assert: void isTrue(boolean)>($z0);

        $r9 = new org.springframework.expression.spel.ast.OpModulus;

        $i0 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: int toPos(org.springframework.expression.spel.standard.Token)>($r1);

        $r10 = newarray (org.springframework.expression.spel.ast.SpelNodeImpl)[2];

        $r10[0] = r15;

        $r10[1] = $r2;

        specialinvoke $r9.<org.springframework.expression.spel.ast.OpModulus: void <init>(int,org.springframework.expression.spel.ast.SpelNodeImpl[])>($i0, $r10);

        r15 = $r9;

     label6:
        $r16 = <org.springframework.expression.spel.standard.TokenKind: org.springframework.expression.spel.standard.TokenKind STAR>;

        $r17 = <org.springframework.expression.spel.standard.TokenKind: org.springframework.expression.spel.standard.TokenKind DIV>;

        $r18 = <org.springframework.expression.spel.standard.TokenKind: org.springframework.expression.spel.standard.TokenKind MOD>;

        $z1 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: boolean peekToken(org.springframework.expression.spel.standard.TokenKind,org.springframework.expression.spel.standard.TokenKind,org.springframework.expression.spel.standard.TokenKind)>($r16, $r17, $r18);

        if $z1 != 0 goto label1;

        return r15;
    }

    private org.springframework.expression.spel.ast.SpelNodeImpl eatPowerExpression()
    {
        org.springframework.expression.spel.standard.Token $r3;
        org.springframework.expression.spel.ast.OperatorPower $r5;
        org.springframework.expression.spel.ast.SpelNodeImpl[] $r6;
        org.springframework.expression.spel.standard.InternalSpelExpressionParser r0;
        int $i0;
        org.springframework.expression.spel.ast.SpelNodeImpl $r1, $r4;
        org.springframework.expression.spel.standard.TokenKind $r2;
        boolean $z0;

        r0 := @this: org.springframework.expression.spel.standard.InternalSpelExpressionParser;

        $r1 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: org.springframework.expression.spel.ast.SpelNodeImpl eatUnaryExpression()>();

        $r2 = <org.springframework.expression.spel.standard.TokenKind: org.springframework.expression.spel.standard.TokenKind POWER>;

        $z0 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: boolean peekToken(org.springframework.expression.spel.standard.TokenKind)>($r2);

        if $z0 == 0 goto label1;

        $r3 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: org.springframework.expression.spel.standard.Token nextToken()>();

        $r4 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: org.springframework.expression.spel.ast.SpelNodeImpl eatUnaryExpression()>();

        specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: void checkRightOperand(org.springframework.expression.spel.standard.Token,org.springframework.expression.spel.ast.SpelNodeImpl)>($r3, $r4);

        $r5 = new org.springframework.expression.spel.ast.OperatorPower;

        $i0 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: int toPos(org.springframework.expression.spel.standard.Token)>($r3);

        $r6 = newarray (org.springframework.expression.spel.ast.SpelNodeImpl)[2];

        $r6[0] = $r1;

        $r6[1] = $r4;

        specialinvoke $r5.<org.springframework.expression.spel.ast.OperatorPower: void <init>(int,org.springframework.expression.spel.ast.SpelNodeImpl[])>($i0, $r6);

        return $r5;

     label1:
        return $r1;
    }

    private org.springframework.expression.spel.ast.SpelNodeImpl eatUnaryExpression()
    {
        org.springframework.expression.spel.standard.Token $r5;
        int $i0, $i1, $i2;
        boolean $z0, $z1;
        org.springframework.expression.spel.ast.OpPlus $r15;
        org.springframework.expression.spel.ast.OperatorNot $r17;
        org.springframework.expression.spel.ast.SpelNodeImpl[] $r14, $r16;
        org.springframework.expression.spel.standard.InternalSpelExpressionParser r0;
        org.springframework.expression.spel.standard.TokenKind $r1, $r2, $r3, $r7, $r8, $r9, $r10, $r11, $r12;
        org.springframework.expression.spel.ast.SpelNodeImpl $r4, $r6;
        org.springframework.expression.spel.ast.OpMinus $r13;

        r0 := @this: org.springframework.expression.spel.standard.InternalSpelExpressionParser;

        $r3 = <org.springframework.expression.spel.standard.TokenKind: org.springframework.expression.spel.standard.TokenKind PLUS>;

        $r2 = <org.springframework.expression.spel.standard.TokenKind: org.springframework.expression.spel.standard.TokenKind MINUS>;

        $r1 = <org.springframework.expression.spel.standard.TokenKind: org.springframework.expression.spel.standard.TokenKind NOT>;

        $z0 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: boolean peekToken(org.springframework.expression.spel.standard.TokenKind,org.springframework.expression.spel.standard.TokenKind,org.springframework.expression.spel.standard.TokenKind)>($r3, $r2, $r1);

        if $z0 == 0 goto label5;

        $r5 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: org.springframework.expression.spel.standard.Token nextToken()>();

        $r6 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: org.springframework.expression.spel.ast.SpelNodeImpl eatUnaryExpression()>();

        $r8 = $r5.<org.springframework.expression.spel.standard.Token: org.springframework.expression.spel.standard.TokenKind kind>;

        $r7 = <org.springframework.expression.spel.standard.TokenKind: org.springframework.expression.spel.standard.TokenKind NOT>;

        if $r8 != $r7 goto label1;

        $r17 = new org.springframework.expression.spel.ast.OperatorNot;

        $i2 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: int toPos(org.springframework.expression.spel.standard.Token)>($r5);

        specialinvoke $r17.<org.springframework.expression.spel.ast.OperatorNot: void <init>(int,org.springframework.expression.spel.ast.SpelNodeImpl)>($i2, $r6);

        return $r17;

     label1:
        $r10 = $r5.<org.springframework.expression.spel.standard.Token: org.springframework.expression.spel.standard.TokenKind kind>;

        $r9 = <org.springframework.expression.spel.standard.TokenKind: org.springframework.expression.spel.standard.TokenKind PLUS>;

        if $r10 != $r9 goto label2;

        $r15 = new org.springframework.expression.spel.ast.OpPlus;

        $i1 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: int toPos(org.springframework.expression.spel.standard.Token)>($r5);

        $r16 = newarray (org.springframework.expression.spel.ast.SpelNodeImpl)[1];

        $r16[0] = $r6;

        specialinvoke $r15.<org.springframework.expression.spel.ast.OpPlus: void <init>(int,org.springframework.expression.spel.ast.SpelNodeImpl[])>($i1, $r16);

        return $r15;

     label2:
        $r12 = $r5.<org.springframework.expression.spel.standard.Token: org.springframework.expression.spel.standard.TokenKind kind>;

        $r11 = <org.springframework.expression.spel.standard.TokenKind: org.springframework.expression.spel.standard.TokenKind MINUS>;

        if $r12 != $r11 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        staticinvoke <org.springframework.util.Assert: void isTrue(boolean)>($z1);

        $r13 = new org.springframework.expression.spel.ast.OpMinus;

        $i0 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: int toPos(org.springframework.expression.spel.standard.Token)>($r5);

        $r14 = newarray (org.springframework.expression.spel.ast.SpelNodeImpl)[1];

        $r14[0] = $r6;

        specialinvoke $r13.<org.springframework.expression.spel.ast.OpMinus: void <init>(int,org.springframework.expression.spel.ast.SpelNodeImpl[])>($i0, $r14);

        return $r13;

     label5:
        $r4 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: org.springframework.expression.spel.ast.SpelNodeImpl eatPrimaryExpression()>();

        return $r4;
    }

    private org.springframework.expression.spel.ast.SpelNodeImpl eatPrimaryExpression()
    {
        java.lang.Object[] $r8;
        java.util.ArrayList $r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        boolean $z0;
        org.springframework.expression.spel.ast.SpelNodeImpl[] $r7, $r9;
        org.springframework.expression.spel.standard.InternalSpelExpressionParser r1;
        org.springframework.expression.spel.ast.CompoundExpression $r4;
        java.lang.Object $r5, $r10;
        org.springframework.expression.spel.ast.SpelNodeImpl $r2, $r3, $r6, $r11;

        r1 := @this: org.springframework.expression.spel.standard.InternalSpelExpressionParser;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r2 = specialinvoke r1.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: org.springframework.expression.spel.ast.SpelNodeImpl eatStartNode()>();

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r2);

        goto label2;

     label1:
        $r3 = specialinvoke r1.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: org.springframework.expression.spel.ast.SpelNodeImpl pop()>();

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r3);

     label2:
        $z0 = specialinvoke r1.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: boolean maybeEatNode()>();

        if $z0 != 0 goto label1;

        $i0 = interfaceinvoke $r0.<java.util.List: int size()>();

        if $i0 != 1 goto label3;

        $r10 = interfaceinvoke $r0.<java.util.List: java.lang.Object get(int)>(0);

        $r11 = (org.springframework.expression.spel.ast.SpelNodeImpl) $r10;

        return $r11;

     label3:
        $r4 = new org.springframework.expression.spel.ast.CompoundExpression;

        $i1 = virtualinvoke $r2.<org.springframework.expression.spel.ast.SpelNodeImpl: int getStartPosition()>();

        $i2 = interfaceinvoke $r0.<java.util.List: int size()>();

        $i3 = $i2 - 1;

        $r5 = interfaceinvoke $r0.<java.util.List: java.lang.Object get(int)>($i3);

        $r6 = (org.springframework.expression.spel.ast.SpelNodeImpl) $r5;

        $i4 = virtualinvoke $r6.<org.springframework.expression.spel.ast.SpelNodeImpl: int getEndPosition()>();

        $i5 = specialinvoke r1.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: int toPos(int,int)>($i1, $i4);

        $i6 = interfaceinvoke $r0.<java.util.List: int size()>();

        $r7 = newarray (org.springframework.expression.spel.ast.SpelNodeImpl)[$i6];

        $r8 = interfaceinvoke $r0.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r7);

        $r9 = (org.springframework.expression.spel.ast.SpelNodeImpl[]) $r8;

        specialinvoke $r4.<org.springframework.expression.spel.ast.CompoundExpression: void <init>(int,org.springframework.expression.spel.ast.SpelNodeImpl[])>($i5, $r9);

        return $r4;
    }

    private boolean maybeEatNode()
    {
        org.springframework.expression.spel.standard.InternalSpelExpressionParser r0;
        org.springframework.expression.spel.standard.TokenKind $r1, $r2;
        org.springframework.expression.spel.ast.SpelNodeImpl r3;
        boolean $z0;

        r0 := @this: org.springframework.expression.spel.standard.InternalSpelExpressionParser;

        $r2 = <org.springframework.expression.spel.standard.TokenKind: org.springframework.expression.spel.standard.TokenKind DOT>;

        $r1 = <org.springframework.expression.spel.standard.TokenKind: org.springframework.expression.spel.standard.TokenKind SAFE_NAVI>;

        $z0 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: boolean peekToken(org.springframework.expression.spel.standard.TokenKind,org.springframework.expression.spel.standard.TokenKind)>($r2, $r1);

        if $z0 == 0 goto label1;

        r3 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: org.springframework.expression.spel.ast.SpelNodeImpl eatDottedNode()>();

        goto label2;

     label1:
        r3 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: org.springframework.expression.spel.ast.SpelNodeImpl maybeEatNonDottedNode()>();

     label2:
        if r3 != null goto label3;

        return 0;

     label3:
        specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: void push(org.springframework.expression.spel.ast.SpelNodeImpl)>(r3);

        return 1;
    }

    private org.springframework.expression.spel.ast.SpelNodeImpl maybeEatNonDottedNode()
    {
        org.springframework.expression.spel.standard.InternalSpelExpressionParser r0;
        org.springframework.expression.spel.standard.TokenKind $r1;
        org.springframework.expression.spel.ast.SpelNodeImpl $r2;
        boolean $z0, $z1;

        r0 := @this: org.springframework.expression.spel.standard.InternalSpelExpressionParser;

        $r1 = <org.springframework.expression.spel.standard.TokenKind: org.springframework.expression.spel.standard.TokenKind LSQUARE>;

        $z0 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: boolean peekToken(org.springframework.expression.spel.standard.TokenKind)>($r1);

        if $z0 == 0 goto label1;

        $z1 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: boolean maybeEatIndexer()>();

        if $z1 == 0 goto label1;

        $r2 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: org.springframework.expression.spel.ast.SpelNodeImpl pop()>();

        return $r2;

     label1:
        return null;
    }

    private org.springframework.expression.spel.ast.SpelNodeImpl eatDottedNode()
    {
        java.lang.Object[] $r5, $r9;
        org.springframework.expression.spel.standard.Token $r1, $r4, $r7;
        int $i0, $i1;
        java.lang.String $r8;
        boolean $z0, $z1, $z2, $z3, $z5, $z6, $z7;
        org.springframework.expression.spel.SpelMessage $r6, $r10;
        org.springframework.expression.spel.standard.InternalSpelExpressionParser r0;
        org.springframework.expression.spel.standard.TokenKind $r2, $r3;
        org.springframework.expression.spel.ast.SpelNodeImpl $r11;

        r0 := @this: org.springframework.expression.spel.standard.InternalSpelExpressionParser;

        $r1 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: org.springframework.expression.spel.standard.Token nextToken()>();

        $r3 = $r1.<org.springframework.expression.spel.standard.Token: org.springframework.expression.spel.standard.TokenKind kind>;

        $r2 = <org.springframework.expression.spel.standard.TokenKind: org.springframework.expression.spel.standard.TokenKind SAFE_NAVI>;

        if $r3 != $r2 goto label1;

        $z7 = 1;

        $z6 = 1;

        $z5 = 1;

        goto label2;

     label1:
        $z7 = 0;

        $z6 = 0;

        $z5 = 0;

     label2:
        $z0 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: boolean maybeEatMethodOrProperty(boolean)>($z5);

        if $z0 != 0 goto label3;

        $z1 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: boolean maybeEatFunctionOrVar()>();

        if $z1 != 0 goto label3;

        $z2 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: boolean maybeEatProjection(boolean)>($z6);

        if $z2 != 0 goto label3;

        $z3 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: boolean maybeEatSelection(boolean)>($z7);

        if $z3 == 0 goto label4;

     label3:
        $r11 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: org.springframework.expression.spel.ast.SpelNodeImpl pop()>();

        return $r11;

     label4:
        $r4 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: org.springframework.expression.spel.standard.Token peekToken()>();

        if $r4 != null goto label5;

        $i1 = $r1.<org.springframework.expression.spel.standard.Token: int startpos>;

        $r10 = <org.springframework.expression.spel.SpelMessage: org.springframework.expression.spel.SpelMessage OOD>;

        $r9 = newarray (java.lang.Object)[0];

        specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: void raiseInternalException(int,org.springframework.expression.spel.SpelMessage,java.lang.Object[])>($i1, $r10, $r9);

        goto label6;

     label5:
        $i0 = $r1.<org.springframework.expression.spel.standard.Token: int startpos>;

        $r6 = <org.springframework.expression.spel.SpelMessage: org.springframework.expression.spel.SpelMessage UNEXPECTED_DATA_AFTER_DOT>;

        $r5 = newarray (java.lang.Object)[1];

        $r7 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: org.springframework.expression.spel.standard.Token peekToken()>();

        $r8 = virtualinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: java.lang.String toString(org.springframework.expression.spel.standard.Token)>($r7);

        $r5[0] = $r8;

        specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: void raiseInternalException(int,org.springframework.expression.spel.SpelMessage,java.lang.Object[])>($i0, $r6, $r5);

     label6:
        return null;
    }

    private boolean maybeEatFunctionOrVar()
    {
        org.springframework.expression.spel.standard.Token $r2, $r4;
        org.springframework.expression.spel.ast.FunctionReference $r6;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.String $r7, $r9;
        boolean $z0;
        org.springframework.expression.spel.ast.VariableReference $r8;
        org.springframework.expression.spel.ast.SpelNodeImpl[] $r5;
        org.springframework.expression.spel.standard.InternalSpelExpressionParser r0;
        org.springframework.expression.spel.standard.TokenKind $r1, $r3;

        r0 := @this: org.springframework.expression.spel.standard.InternalSpelExpressionParser;

        $r1 = <org.springframework.expression.spel.standard.TokenKind: org.springframework.expression.spel.standard.TokenKind HASH>;

        $z0 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: boolean peekToken(org.springframework.expression.spel.standard.TokenKind)>($r1);

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r2 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: org.springframework.expression.spel.standard.Token nextToken()>();

        $r3 = <org.springframework.expression.spel.standard.TokenKind: org.springframework.expression.spel.standard.TokenKind IDENTIFIER>;

        $r4 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: org.springframework.expression.spel.standard.Token eatToken(org.springframework.expression.spel.standard.TokenKind)>($r3);

        $r5 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: org.springframework.expression.spel.ast.SpelNodeImpl[] maybeEatMethodArgs()>();

        if $r5 != null goto label2;

        $r8 = new org.springframework.expression.spel.ast.VariableReference;

        $r9 = $r4.<org.springframework.expression.spel.standard.Token: java.lang.String data>;

        $i4 = $r2.<org.springframework.expression.spel.standard.Token: int startpos>;

        $i3 = $r4.<org.springframework.expression.spel.standard.Token: int endpos>;

        $i5 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: int toPos(int,int)>($i4, $i3);

        specialinvoke $r8.<org.springframework.expression.spel.ast.VariableReference: void <init>(java.lang.String,int)>($r9, $i5);

        specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: void push(org.springframework.expression.spel.ast.SpelNodeImpl)>($r8);

        return 1;

     label2:
        $r6 = new org.springframework.expression.spel.ast.FunctionReference;

        $r7 = $r4.<org.springframework.expression.spel.standard.Token: java.lang.String data>;

        $i1 = $r2.<org.springframework.expression.spel.standard.Token: int startpos>;

        $i0 = $r4.<org.springframework.expression.spel.standard.Token: int endpos>;

        $i2 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: int toPos(int,int)>($i1, $i0);

        specialinvoke $r6.<org.springframework.expression.spel.ast.FunctionReference: void <init>(java.lang.String,int,org.springframework.expression.spel.ast.SpelNodeImpl[])>($r7, $i2, $r5);

        specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: void push(org.springframework.expression.spel.ast.SpelNodeImpl)>($r6);

        return 1;
    }

    private org.springframework.expression.spel.ast.SpelNodeImpl[] maybeEatMethodArgs()
    {
        java.lang.Object[] $r5;
        java.util.ArrayList $r2;
        org.springframework.expression.spel.ast.SpelNodeImpl[] $r4, $r6;
        org.springframework.expression.spel.standard.InternalSpelExpressionParser r0;
        int $i0;
        org.springframework.expression.spel.standard.TokenKind $r1, $r3;
        boolean $z0;

        r0 := @this: org.springframework.expression.spel.standard.InternalSpelExpressionParser;

        $r1 = <org.springframework.expression.spel.standard.TokenKind: org.springframework.expression.spel.standard.TokenKind LPAREN>;

        $z0 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: boolean peekToken(org.springframework.expression.spel.standard.TokenKind)>($r1);

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: void consumeArguments(java.util.List)>($r2);

        $r3 = <org.springframework.expression.spel.standard.TokenKind: org.springframework.expression.spel.standard.TokenKind RPAREN>;

        specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: org.springframework.expression.spel.standard.Token eatToken(org.springframework.expression.spel.standard.TokenKind)>($r3);

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        $r4 = newarray (org.springframework.expression.spel.ast.SpelNodeImpl)[$i0];

        $r5 = interfaceinvoke $r2.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r4);

        $r6 = (org.springframework.expression.spel.ast.SpelNodeImpl[]) $r5;

        return $r6;
    }

    private void eatConstructorArgs(java.util.List)
    {
        org.springframework.expression.spel.SpelMessage $r9;
        java.lang.Object[] $r8;
        org.springframework.expression.spel.standard.Token $r7;
        org.springframework.expression.spel.SpelParseException $r5;
        org.springframework.expression.spel.InternalParseException $r4;
        java.util.List r2;
        org.springframework.expression.spel.standard.InternalSpelExpressionParser r0;
        int $i0;
        java.lang.String $r6;
        org.springframework.expression.spel.standard.TokenKind $r1, $r3;
        boolean $z0;

        r0 := @this: org.springframework.expression.spel.standard.InternalSpelExpressionParser;

        r2 := @parameter0: java.util.List;

        $r1 = <org.springframework.expression.spel.standard.TokenKind: org.springframework.expression.spel.standard.TokenKind LPAREN>;

        $z0 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: boolean peekToken(org.springframework.expression.spel.standard.TokenKind)>($r1);

        if $z0 != 0 goto label1;

        $r4 = new org.springframework.expression.spel.InternalParseException;

        $r5 = new org.springframework.expression.spel.SpelParseException;

        $r6 = r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: java.lang.String expressionString>;

        $r7 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: org.springframework.expression.spel.standard.Token peekToken()>();

        $i0 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: int positionOf(org.springframework.expression.spel.standard.Token)>($r7);

        $r9 = <org.springframework.expression.spel.SpelMessage: org.springframework.expression.spel.SpelMessage MISSING_CONSTRUCTOR_ARGS>;

        $r8 = newarray (java.lang.Object)[0];

        specialinvoke $r5.<org.springframework.expression.spel.SpelParseException: void <init>(java.lang.String,int,org.springframework.expression.spel.SpelMessage,java.lang.Object[])>($r6, $i0, $r9, $r8);

        specialinvoke $r4.<org.springframework.expression.spel.InternalParseException: void <init>(org.springframework.expression.spel.SpelParseException)>($r5);

        throw $r4;

     label1:
        specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: void consumeArguments(java.util.List)>(r2);

        $r3 = <org.springframework.expression.spel.standard.TokenKind: org.springframework.expression.spel.standard.TokenKind RPAREN>;

        specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: org.springframework.expression.spel.standard.Token eatToken(org.springframework.expression.spel.standard.TokenKind)>($r3);

        return;
    }

    private void consumeArguments(java.util.List)
    {
        org.springframework.expression.spel.SpelMessage $r7, $r13;
        java.lang.Object[] $r6, $r12;
        org.springframework.expression.spel.standard.Token $r1, $r2, $r5;
        java.util.List r10;
        org.springframework.expression.spel.standard.InternalSpelExpressionParser r0;
        int i0;
        org.springframework.expression.spel.standard.TokenKind $r3, $r4, $r8, $r9;
        org.springframework.expression.spel.ast.SpelNodeImpl $r11;

        r0 := @this: org.springframework.expression.spel.standard.InternalSpelExpressionParser;

        r10 := @parameter0: java.util.List;

        $r1 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: org.springframework.expression.spel.standard.Token peekToken()>();

        i0 = $r1.<org.springframework.expression.spel.standard.Token: int startpos>;

     label1:
        specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: org.springframework.expression.spel.standard.Token nextToken()>();

        $r2 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: org.springframework.expression.spel.standard.Token peekToken()>();

        if $r2 != null goto label2;

        $r13 = <org.springframework.expression.spel.SpelMessage: org.springframework.expression.spel.SpelMessage RUN_OUT_OF_ARGUMENTS>;

        $r12 = newarray (java.lang.Object)[0];

        specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: void raiseInternalException(int,org.springframework.expression.spel.SpelMessage,java.lang.Object[])>(i0, $r13, $r12);

     label2:
        $r4 = $r2.<org.springframework.expression.spel.standard.Token: org.springframework.expression.spel.standard.TokenKind kind>;

        $r3 = <org.springframework.expression.spel.standard.TokenKind: org.springframework.expression.spel.standard.TokenKind RPAREN>;

        if $r4 == $r3 goto label3;

        $r11 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: org.springframework.expression.spel.ast.SpelNodeImpl eatExpression()>();

        interfaceinvoke r10.<java.util.List: boolean add(java.lang.Object)>($r11);

     label3:
        $r5 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: org.springframework.expression.spel.standard.Token peekToken()>();

        if $r5 == null goto label4;

        $r9 = $r5.<org.springframework.expression.spel.standard.Token: org.springframework.expression.spel.standard.TokenKind kind>;

        $r8 = <org.springframework.expression.spel.standard.TokenKind: org.springframework.expression.spel.standard.TokenKind COMMA>;

        if $r9 == $r8 goto label1;

     label4:
        if $r5 != null goto label5;

        $r7 = <org.springframework.expression.spel.SpelMessage: org.springframework.expression.spel.SpelMessage RUN_OUT_OF_ARGUMENTS>;

        $r6 = newarray (java.lang.Object)[0];

        specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: void raiseInternalException(int,org.springframework.expression.spel.SpelMessage,java.lang.Object[])>(i0, $r7, $r6);

     label5:
        return;
    }

    private int positionOf(org.springframework.expression.spel.standard.Token)
    {
        org.springframework.expression.spel.standard.InternalSpelExpressionParser r1;
        org.springframework.expression.spel.standard.Token r0;
        int $i0, $i1;
        java.lang.String $r2;

        r1 := @this: org.springframework.expression.spel.standard.InternalSpelExpressionParser;

        r0 := @parameter0: org.springframework.expression.spel.standard.Token;

        if r0 != null goto label1;

        $r2 = r1.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: java.lang.String expressionString>;

        $i1 = virtualinvoke $r2.<java.lang.String: int length()>();

        return $i1;

     label1:
        $i0 = r0.<org.springframework.expression.spel.standard.Token: int startpos>;

        return $i0;
    }

    private org.springframework.expression.spel.ast.SpelNodeImpl eatStartNode()
    {
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11;
        org.springframework.expression.spel.standard.InternalSpelExpressionParser r0;
        org.springframework.expression.spel.ast.SpelNodeImpl $r1, $r2, $r3, $r4, $r5, $r6;

        r0 := @this: org.springframework.expression.spel.standard.InternalSpelExpressionParser;

        $z0 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: boolean maybeEatLiteral()>();

        if $z0 == 0 goto label1;

        $r4 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: org.springframework.expression.spel.ast.SpelNodeImpl pop()>();

        return $r4;

     label1:
        $z1 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: boolean maybeEatParenExpression()>();

        if $z1 == 0 goto label2;

        $r3 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: org.springframework.expression.spel.ast.SpelNodeImpl pop()>();

        return $r3;

     label2:
        $z2 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: boolean maybeEatTypeReference()>();

        if $z2 != 0 goto label3;

        $z3 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: boolean maybeEatNullReference()>();

        if $z3 != 0 goto label3;

        $z4 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: boolean maybeEatConstructorReference()>();

        if $z4 != 0 goto label3;

        $z5 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: boolean maybeEatMethodOrProperty(boolean)>(0);

        if $z5 != 0 goto label3;

        $z6 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: boolean maybeEatFunctionOrVar()>();

        if $z6 == 0 goto label4;

     label3:
        $r5 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: org.springframework.expression.spel.ast.SpelNodeImpl pop()>();

        return $r5;

     label4:
        $z7 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: boolean maybeEatBeanReference()>();

        if $z7 == 0 goto label5;

        $r2 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: org.springframework.expression.spel.ast.SpelNodeImpl pop()>();

        return $r2;

     label5:
        $z8 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: boolean maybeEatProjection(boolean)>(0);

        if $z8 != 0 goto label6;

        $z9 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: boolean maybeEatSelection(boolean)>(0);

        if $z9 != 0 goto label6;

        $z10 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: boolean maybeEatIndexer()>();

        if $z10 == 0 goto label7;

     label6:
        $r6 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: org.springframework.expression.spel.ast.SpelNodeImpl pop()>();

        return $r6;

     label7:
        $z11 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: boolean maybeEatInlineList()>();

        if $z11 == 0 goto label8;

        $r1 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: org.springframework.expression.spel.ast.SpelNodeImpl pop()>();

        return $r1;

     label8:
        return null;
    }

    private boolean maybeEatBeanReference()
    {
        java.lang.Object[] $r5;
        org.springframework.expression.spel.standard.Token $r2, $r8, $r11, r12;
        org.springframework.expression.spel.ast.BeanReference $r14;
        java.util.Stack $r15;
        int $i0, $i1, $i2, $i3;
        java.lang.String $r9, r13;
        boolean $z0, $z1, $z2;
        org.springframework.expression.spel.SpelMessage $r6;
        org.springframework.expression.spel.standard.InternalSpelExpressionParser r0;
        org.springframework.expression.spel.standard.TokenKind $r1, $r3, $r4, $r7, $r10;

        r0 := @this: org.springframework.expression.spel.standard.InternalSpelExpressionParser;

        $r1 = <org.springframework.expression.spel.standard.TokenKind: org.springframework.expression.spel.standard.TokenKind BEAN_REF>;

        $z0 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: boolean peekToken(org.springframework.expression.spel.standard.TokenKind)>($r1);

        if $z0 == 0 goto label4;

        $r2 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: org.springframework.expression.spel.standard.Token nextToken()>();

        r12 = null;

        r13 = null;

        $r3 = <org.springframework.expression.spel.standard.TokenKind: org.springframework.expression.spel.standard.TokenKind IDENTIFIER>;

        $z1 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: boolean peekToken(org.springframework.expression.spel.standard.TokenKind)>($r3);

        if $z1 == 0 goto label1;

        $r10 = <org.springframework.expression.spel.standard.TokenKind: org.springframework.expression.spel.standard.TokenKind IDENTIFIER>;

        $r11 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: org.springframework.expression.spel.standard.Token eatToken(org.springframework.expression.spel.standard.TokenKind)>($r10);

        r12 = $r11;

        r13 = $r11.<org.springframework.expression.spel.standard.Token: java.lang.String data>;

        goto label3;

     label1:
        $r4 = <org.springframework.expression.spel.standard.TokenKind: org.springframework.expression.spel.standard.TokenKind LITERAL_STRING>;

        $z2 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: boolean peekToken(org.springframework.expression.spel.standard.TokenKind)>($r4);

        if $z2 == 0 goto label2;

        $r7 = <org.springframework.expression.spel.standard.TokenKind: org.springframework.expression.spel.standard.TokenKind LITERAL_STRING>;

        $r8 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: org.springframework.expression.spel.standard.Token eatToken(org.springframework.expression.spel.standard.TokenKind)>($r7);

        r12 = $r8;

        $r9 = virtualinvoke $r8.<org.springframework.expression.spel.standard.Token: java.lang.String stringValue()>();

        $i1 = virtualinvoke $r9.<java.lang.String: int length()>();

        $i2 = $i1 - 1;

        r13 = virtualinvoke $r9.<java.lang.String: java.lang.String substring(int,int)>(1, $i2);

        goto label3;

     label2:
        $i0 = $r2.<org.springframework.expression.spel.standard.Token: int startpos>;

        $r6 = <org.springframework.expression.spel.SpelMessage: org.springframework.expression.spel.SpelMessage INVALID_BEAN_REFERENCE>;

        $r5 = newarray (java.lang.Object)[0];

        specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: void raiseInternalException(int,org.springframework.expression.spel.SpelMessage,java.lang.Object[])>($i0, $r6, $r5);

     label3:
        $r14 = new org.springframework.expression.spel.ast.BeanReference;

        $i3 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: int toPos(org.springframework.expression.spel.standard.Token)>(r12);

        specialinvoke $r14.<org.springframework.expression.spel.ast.BeanReference: void <init>(int,java.lang.String)>($i3, r13);

        $r15 = r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: java.util.Stack constructedNodes>;

        virtualinvoke $r15.<java.util.Stack: java.lang.Object push(java.lang.Object)>($r14);

        return 1;

     label4:
        return 0;
    }

    private boolean maybeEatTypeReference()
    {
        org.springframework.expression.spel.standard.Token $r2;
        org.springframework.expression.spel.ast.TypeReference $r7;
        java.util.Stack $r8;
        org.springframework.expression.spel.standard.InternalSpelExpressionParser r0;
        int $i0;
        java.lang.String $r3;
        org.springframework.expression.spel.standard.TokenKind $r1, $r4, $r6;
        org.springframework.expression.spel.ast.SpelNodeImpl $r5;
        boolean $z0, $z1;

        r0 := @this: org.springframework.expression.spel.standard.InternalSpelExpressionParser;

        $r1 = <org.springframework.expression.spel.standard.TokenKind: org.springframework.expression.spel.standard.TokenKind IDENTIFIER>;

        $z0 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: boolean peekToken(org.springframework.expression.spel.standard.TokenKind)>($r1);

        if $z0 == 0 goto label2;

        $r2 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: org.springframework.expression.spel.standard.Token peekToken()>();

        $r3 = virtualinvoke $r2.<org.springframework.expression.spel.standard.Token: java.lang.String stringValue()>();

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("T");

        if $z1 != 0 goto label1;

        return 0;

     label1:
        specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: org.springframework.expression.spel.standard.Token nextToken()>();

        $r4 = <org.springframework.expression.spel.standard.TokenKind: org.springframework.expression.spel.standard.TokenKind LPAREN>;

        specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: org.springframework.expression.spel.standard.Token eatToken(org.springframework.expression.spel.standard.TokenKind)>($r4);

        $r5 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: org.springframework.expression.spel.ast.SpelNodeImpl eatPossiblyQualifiedId()>();

        $r6 = <org.springframework.expression.spel.standard.TokenKind: org.springframework.expression.spel.standard.TokenKind RPAREN>;

        specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: org.springframework.expression.spel.standard.Token eatToken(org.springframework.expression.spel.standard.TokenKind)>($r6);

        $r8 = r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: java.util.Stack constructedNodes>;

        $r7 = new org.springframework.expression.spel.ast.TypeReference;

        $i0 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: int toPos(org.springframework.expression.spel.standard.Token)>($r2);

        specialinvoke $r7.<org.springframework.expression.spel.ast.TypeReference: void <init>(int,org.springframework.expression.spel.ast.SpelNodeImpl)>($i0, $r5);

        virtualinvoke $r8.<java.util.Stack: java.lang.Object push(java.lang.Object)>($r7);

        return 1;

     label2:
        return 0;
    }

    private boolean maybeEatNullReference()
    {
        org.springframework.expression.spel.standard.Token $r2;
        java.util.Stack $r5;
        org.springframework.expression.spel.standard.InternalSpelExpressionParser r0;
        int $i0;
        java.lang.String $r3;
        org.springframework.expression.spel.standard.TokenKind $r1;
        boolean $z0, $z1;
        org.springframework.expression.spel.ast.NullLiteral $r4;

        r0 := @this: org.springframework.expression.spel.standard.InternalSpelExpressionParser;

        $r1 = <org.springframework.expression.spel.standard.TokenKind: org.springframework.expression.spel.standard.TokenKind IDENTIFIER>;

        $z0 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: boolean peekToken(org.springframework.expression.spel.standard.TokenKind)>($r1);

        if $z0 == 0 goto label2;

        $r2 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: org.springframework.expression.spel.standard.Token peekToken()>();

        $r3 = virtualinvoke $r2.<org.springframework.expression.spel.standard.Token: java.lang.String stringValue()>();

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("null");

        if $z1 != 0 goto label1;

        return 0;

     label1:
        specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: org.springframework.expression.spel.standard.Token nextToken()>();

        $r5 = r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: java.util.Stack constructedNodes>;

        $r4 = new org.springframework.expression.spel.ast.NullLiteral;

        $i0 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: int toPos(org.springframework.expression.spel.standard.Token)>($r2);

        specialinvoke $r4.<org.springframework.expression.spel.ast.NullLiteral: void <init>(int)>($i0);

        virtualinvoke $r5.<java.util.Stack: java.lang.Object push(java.lang.Object)>($r4);

        return 1;

     label2:
        return 0;
    }

    private boolean maybeEatProjection(boolean)
    {
        org.springframework.expression.spel.standard.Token $r1;
        java.util.Stack $r6;
        org.springframework.expression.spel.standard.InternalSpelExpressionParser r0;
        int $i0;
        org.springframework.expression.spel.ast.Projection $r5;
        org.springframework.expression.spel.standard.TokenKind $r2, $r4;
        org.springframework.expression.spel.ast.SpelNodeImpl $r3;
        boolean $z0, z1;

        r0 := @this: org.springframework.expression.spel.standard.InternalSpelExpressionParser;

        z1 := @parameter0: boolean;

        $r1 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: org.springframework.expression.spel.standard.Token peekToken()>();

        $r2 = <org.springframework.expression.spel.standard.TokenKind: org.springframework.expression.spel.standard.TokenKind PROJECT>;

        $z0 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: boolean peekToken(org.springframework.expression.spel.standard.TokenKind,boolean)>($r2, 1);

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r3 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: org.springframework.expression.spel.ast.SpelNodeImpl eatExpression()>();

        $r4 = <org.springframework.expression.spel.standard.TokenKind: org.springframework.expression.spel.standard.TokenKind RSQUARE>;

        specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: org.springframework.expression.spel.standard.Token eatToken(org.springframework.expression.spel.standard.TokenKind)>($r4);

        $r6 = r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: java.util.Stack constructedNodes>;

        $r5 = new org.springframework.expression.spel.ast.Projection;

        $i0 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: int toPos(org.springframework.expression.spel.standard.Token)>($r1);

        specialinvoke $r5.<org.springframework.expression.spel.ast.Projection: void <init>(boolean,int,org.springframework.expression.spel.ast.SpelNodeImpl)>(z1, $i0, $r3);

        virtualinvoke $r6.<java.util.Stack: java.lang.Object push(java.lang.Object)>($r5);

        return 1;
    }

    private boolean maybeEatInlineList()
    {
        java.lang.Object[] $r12;
        org.springframework.expression.spel.standard.Token $r1, $r3, $r9;
        org.springframework.expression.spel.ast.InlineList $r10, $r15, r17;
        java.util.Stack $r14;
        java.util.ArrayList $r5;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        boolean $z0, $z1, $z2;
        org.springframework.expression.spel.ast.SpelNodeImpl[] $r11, $r13, $r16;
        org.springframework.expression.spel.standard.InternalSpelExpressionParser r0;
        org.springframework.expression.spel.standard.TokenKind $r2, $r4, $r7, $r8;
        org.springframework.expression.spel.ast.SpelNodeImpl $r6;

        r0 := @this: org.springframework.expression.spel.standard.InternalSpelExpressionParser;

        $r1 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: org.springframework.expression.spel.standard.Token peekToken()>();

        $r2 = <org.springframework.expression.spel.standard.TokenKind: org.springframework.expression.spel.standard.TokenKind LCURLY>;

        $z0 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: boolean peekToken(org.springframework.expression.spel.standard.TokenKind,boolean)>($r2, 1);

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r3 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: org.springframework.expression.spel.standard.Token peekToken()>();

        $r4 = <org.springframework.expression.spel.standard.TokenKind: org.springframework.expression.spel.standard.TokenKind RCURLY>;

        $z1 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: boolean peekToken(org.springframework.expression.spel.standard.TokenKind,boolean)>($r4, 1);

        if $z1 == 0 goto label2;

        $r15 = new org.springframework.expression.spel.ast.InlineList;

        $i5 = $r1.<org.springframework.expression.spel.standard.Token: int startpos>;

        $i4 = $r3.<org.springframework.expression.spel.standard.Token: int endpos>;

        $i6 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: int toPos(int,int)>($i5, $i4);

        $r16 = newarray (org.springframework.expression.spel.ast.SpelNodeImpl)[0];

        specialinvoke $r15.<org.springframework.expression.spel.ast.InlineList: void <init>(int,org.springframework.expression.spel.ast.SpelNodeImpl[])>($i6, $r16);

        r17 = $r15;

        goto label4;

     label2:
        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

     label3:
        $r6 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: org.springframework.expression.spel.ast.SpelNodeImpl eatExpression()>();

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r6);

        $r7 = <org.springframework.expression.spel.standard.TokenKind: org.springframework.expression.spel.standard.TokenKind COMMA>;

        $z2 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: boolean peekToken(org.springframework.expression.spel.standard.TokenKind,boolean)>($r7, 1);

        if $z2 != 0 goto label3;

        $r8 = <org.springframework.expression.spel.standard.TokenKind: org.springframework.expression.spel.standard.TokenKind RCURLY>;

        $r9 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: org.springframework.expression.spel.standard.Token eatToken(org.springframework.expression.spel.standard.TokenKind)>($r8);

        $r10 = new org.springframework.expression.spel.ast.InlineList;

        $i1 = $r1.<org.springframework.expression.spel.standard.Token: int startpos>;

        $i0 = $r9.<org.springframework.expression.spel.standard.Token: int endpos>;

        $i2 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: int toPos(int,int)>($i1, $i0);

        $i3 = interfaceinvoke $r5.<java.util.List: int size()>();

        $r11 = newarray (org.springframework.expression.spel.ast.SpelNodeImpl)[$i3];

        $r12 = interfaceinvoke $r5.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r11);

        $r13 = (org.springframework.expression.spel.ast.SpelNodeImpl[]) $r12;

        specialinvoke $r10.<org.springframework.expression.spel.ast.InlineList: void <init>(int,org.springframework.expression.spel.ast.SpelNodeImpl[])>($i2, $r13);

        r17 = $r10;

     label4:
        $r14 = r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: java.util.Stack constructedNodes>;

        virtualinvoke $r14.<java.util.Stack: java.lang.Object push(java.lang.Object)>(r17);

        return 1;
    }

    private boolean maybeEatIndexer()
    {
        org.springframework.expression.spel.standard.Token $r1;
        java.util.Stack $r6;
        org.springframework.expression.spel.ast.Indexer $r5;
        org.springframework.expression.spel.standard.InternalSpelExpressionParser r0;
        int $i0;
        org.springframework.expression.spel.standard.TokenKind $r2, $r4;
        org.springframework.expression.spel.ast.SpelNodeImpl $r3;
        boolean $z0;

        r0 := @this: org.springframework.expression.spel.standard.InternalSpelExpressionParser;

        $r1 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: org.springframework.expression.spel.standard.Token peekToken()>();

        $r2 = <org.springframework.expression.spel.standard.TokenKind: org.springframework.expression.spel.standard.TokenKind LSQUARE>;

        $z0 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: boolean peekToken(org.springframework.expression.spel.standard.TokenKind,boolean)>($r2, 1);

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r3 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: org.springframework.expression.spel.ast.SpelNodeImpl eatExpression()>();

        $r4 = <org.springframework.expression.spel.standard.TokenKind: org.springframework.expression.spel.standard.TokenKind RSQUARE>;

        specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: org.springframework.expression.spel.standard.Token eatToken(org.springframework.expression.spel.standard.TokenKind)>($r4);

        $r6 = r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: java.util.Stack constructedNodes>;

        $r5 = new org.springframework.expression.spel.ast.Indexer;

        $i0 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: int toPos(org.springframework.expression.spel.standard.Token)>($r1);

        specialinvoke $r5.<org.springframework.expression.spel.ast.Indexer: void <init>(int,org.springframework.expression.spel.ast.SpelNodeImpl)>($i0, $r3);

        virtualinvoke $r6.<java.util.Stack: java.lang.Object push(java.lang.Object)>($r5);

        return 1;
    }

    private boolean maybeEatSelection(boolean)
    {
        org.springframework.expression.spel.standard.Token $r1;
        java.util.Stack $r9, $r11, $r13;
        int $i0, $i1, $i2;
        org.springframework.expression.spel.ast.Selection $r8, $r10, $r12;
        boolean $z0, z1;
        org.springframework.expression.spel.standard.InternalSpelExpressionParser r0;
        org.springframework.expression.spel.ast.SpelNodeImpl $r2;
        org.springframework.expression.spel.standard.TokenKind $r3, $r4, $r5, $r6, $r7;

        r0 := @this: org.springframework.expression.spel.standard.InternalSpelExpressionParser;

        z1 := @parameter0: boolean;

        $r1 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: org.springframework.expression.spel.standard.Token peekToken()>();

        $z0 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: boolean peekSelectToken()>();

        if $z0 != 0 goto label1;

        return 0;

     label1:
        specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: org.springframework.expression.spel.standard.Token nextToken()>();

        $r2 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: org.springframework.expression.spel.ast.SpelNodeImpl eatExpression()>();

        $r3 = <org.springframework.expression.spel.standard.TokenKind: org.springframework.expression.spel.standard.TokenKind RSQUARE>;

        specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: org.springframework.expression.spel.standard.Token eatToken(org.springframework.expression.spel.standard.TokenKind)>($r3);

        $r5 = $r1.<org.springframework.expression.spel.standard.Token: org.springframework.expression.spel.standard.TokenKind kind>;

        $r4 = <org.springframework.expression.spel.standard.TokenKind: org.springframework.expression.spel.standard.TokenKind SELECT_FIRST>;

        if $r5 != $r4 goto label2;

        $r13 = r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: java.util.Stack constructedNodes>;

        $r12 = new org.springframework.expression.spel.ast.Selection;

        $i2 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: int toPos(org.springframework.expression.spel.standard.Token)>($r1);

        specialinvoke $r12.<org.springframework.expression.spel.ast.Selection: void <init>(boolean,int,int,org.springframework.expression.spel.ast.SpelNodeImpl)>(z1, 1, $i2, $r2);

        virtualinvoke $r13.<java.util.Stack: java.lang.Object push(java.lang.Object)>($r12);

        goto label4;

     label2:
        $r7 = $r1.<org.springframework.expression.spel.standard.Token: org.springframework.expression.spel.standard.TokenKind kind>;

        $r6 = <org.springframework.expression.spel.standard.TokenKind: org.springframework.expression.spel.standard.TokenKind SELECT_LAST>;

        if $r7 != $r6 goto label3;

        $r11 = r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: java.util.Stack constructedNodes>;

        $r10 = new org.springframework.expression.spel.ast.Selection;

        $i1 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: int toPos(org.springframework.expression.spel.standard.Token)>($r1);

        specialinvoke $r10.<org.springframework.expression.spel.ast.Selection: void <init>(boolean,int,int,org.springframework.expression.spel.ast.SpelNodeImpl)>(z1, 2, $i1, $r2);

        virtualinvoke $r11.<java.util.Stack: java.lang.Object push(java.lang.Object)>($r10);

        goto label4;

     label3:
        $r9 = r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: java.util.Stack constructedNodes>;

        $r8 = new org.springframework.expression.spel.ast.Selection;

        $i0 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: int toPos(org.springframework.expression.spel.standard.Token)>($r1);

        specialinvoke $r8.<org.springframework.expression.spel.ast.Selection: void <init>(boolean,int,int,org.springframework.expression.spel.ast.SpelNodeImpl)>(z1, 0, $i0, $r2);

        virtualinvoke $r9.<java.util.Stack: java.lang.Object push(java.lang.Object)>($r8);

     label4:
        return 1;
    }

    private org.springframework.expression.spel.ast.SpelNodeImpl eatPossiblyQualifiedId()
    {
        java.lang.Object[] $r15;
        org.springframework.expression.spel.standard.Token $r3, $r8;
        java.util.ArrayList $r0;
        org.springframework.expression.spel.ast.Identifier $r4, $r9;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        java.lang.String $r5, $r10;
        org.springframework.expression.spel.ast.QualifiedIdentifier $r11;
        boolean $z0;
        org.springframework.expression.spel.ast.SpelNodeImpl[] $r14, $r16;
        org.springframework.expression.spel.standard.InternalSpelExpressionParser r1;
        java.lang.Object $r12;
        org.springframework.expression.spel.standard.TokenKind $r2, $r6, $r7;
        org.springframework.expression.spel.ast.SpelNodeImpl $r13;

        r1 := @this: org.springframework.expression.spel.standard.InternalSpelExpressionParser;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r2 = <org.springframework.expression.spel.standard.TokenKind: org.springframework.expression.spel.standard.TokenKind IDENTIFIER>;

        $r3 = specialinvoke r1.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: org.springframework.expression.spel.standard.Token eatToken(org.springframework.expression.spel.standard.TokenKind)>($r2);

        $r4 = new org.springframework.expression.spel.ast.Identifier;

        $r5 = virtualinvoke $r3.<org.springframework.expression.spel.standard.Token: java.lang.String stringValue()>();

        $i0 = specialinvoke r1.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: int toPos(org.springframework.expression.spel.standard.Token)>($r3);

        specialinvoke $r4.<org.springframework.expression.spel.ast.Identifier: void <init>(java.lang.String,int)>($r5, $i0);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r4);

        goto label2;

     label1:
        $r7 = <org.springframework.expression.spel.standard.TokenKind: org.springframework.expression.spel.standard.TokenKind IDENTIFIER>;

        $r8 = specialinvoke r1.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: org.springframework.expression.spel.standard.Token eatToken(org.springframework.expression.spel.standard.TokenKind)>($r7);

        $r9 = new org.springframework.expression.spel.ast.Identifier;

        $r10 = virtualinvoke $r8.<org.springframework.expression.spel.standard.Token: java.lang.String stringValue()>();

        $i1 = specialinvoke r1.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: int toPos(org.springframework.expression.spel.standard.Token)>($r8);

        specialinvoke $r9.<org.springframework.expression.spel.ast.Identifier: void <init>(java.lang.String,int)>($r10, $i1);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r9);

     label2:
        $r6 = <org.springframework.expression.spel.standard.TokenKind: org.springframework.expression.spel.standard.TokenKind DOT>;

        $z0 = specialinvoke r1.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: boolean peekToken(org.springframework.expression.spel.standard.TokenKind,boolean)>($r6, 1);

        if $z0 != 0 goto label1;

        $r11 = new org.springframework.expression.spel.ast.QualifiedIdentifier;

        $i2 = $r3.<org.springframework.expression.spel.standard.Token: int startpos>;

        $i3 = interfaceinvoke $r0.<java.util.List: int size()>();

        $i4 = $i3 - 1;

        $r12 = interfaceinvoke $r0.<java.util.List: java.lang.Object get(int)>($i4);

        $r13 = (org.springframework.expression.spel.ast.SpelNodeImpl) $r12;

        $i5 = virtualinvoke $r13.<org.springframework.expression.spel.ast.SpelNodeImpl: int getEndPosition()>();

        $i6 = specialinvoke r1.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: int toPos(int,int)>($i2, $i5);

        $i7 = interfaceinvoke $r0.<java.util.List: int size()>();

        $r14 = newarray (org.springframework.expression.spel.ast.SpelNodeImpl)[$i7];

        $r15 = interfaceinvoke $r0.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r14);

        $r16 = (org.springframework.expression.spel.ast.SpelNodeImpl[]) $r15;

        specialinvoke $r11.<org.springframework.expression.spel.ast.QualifiedIdentifier: void <init>(int,org.springframework.expression.spel.ast.SpelNodeImpl[])>($i6, $r16);

        return $r11;
    }

    private boolean maybeEatMethodOrProperty(boolean)
    {
        org.springframework.expression.spel.standard.Token $r2;
        org.springframework.expression.spel.ast.SpelNodeImpl[] $r3;
        org.springframework.expression.spel.ast.MethodReference $r4;
        org.springframework.expression.spel.standard.InternalSpelExpressionParser r0;
        int $i0, $i1;
        org.springframework.expression.spel.ast.PropertyOrFieldReference $r6;
        java.lang.String $r5, $r7;
        org.springframework.expression.spel.standard.TokenKind $r1;
        boolean $z0, z1;

        r0 := @this: org.springframework.expression.spel.standard.InternalSpelExpressionParser;

        z1 := @parameter0: boolean;

        $r1 = <org.springframework.expression.spel.standard.TokenKind: org.springframework.expression.spel.standard.TokenKind IDENTIFIER>;

        $z0 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: boolean peekToken(org.springframework.expression.spel.standard.TokenKind)>($r1);

        if $z0 == 0 goto label2;

        $r2 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: org.springframework.expression.spel.standard.Token nextToken()>();

        $r3 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: org.springframework.expression.spel.ast.SpelNodeImpl[] maybeEatMethodArgs()>();

        if $r3 != null goto label1;

        $r6 = new org.springframework.expression.spel.ast.PropertyOrFieldReference;

        $r7 = $r2.<org.springframework.expression.spel.standard.Token: java.lang.String data>;

        $i1 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: int toPos(org.springframework.expression.spel.standard.Token)>($r2);

        specialinvoke $r6.<org.springframework.expression.spel.ast.PropertyOrFieldReference: void <init>(boolean,java.lang.String,int)>(z1, $r7, $i1);

        specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: void push(org.springframework.expression.spel.ast.SpelNodeImpl)>($r6);

        return 1;

     label1:
        $r4 = new org.springframework.expression.spel.ast.MethodReference;

        $r5 = $r2.<org.springframework.expression.spel.standard.Token: java.lang.String data>;

        $i0 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: int toPos(org.springframework.expression.spel.standard.Token)>($r2);

        specialinvoke $r4.<org.springframework.expression.spel.ast.MethodReference: void <init>(boolean,java.lang.String,int,org.springframework.expression.spel.ast.SpelNodeImpl[])>(z1, $r5, $i0, $r3);

        specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: void push(org.springframework.expression.spel.ast.SpelNodeImpl)>($r4);

        return 1;

     label2:
        return 0;
    }

    private boolean maybeEatConstructorReference()
    {
        org.springframework.expression.spel.ast.ConstructorReference $r5, $r13;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.springframework.expression.spel.ast.SpelNodeImpl[] $r6, $r8, $r14, $r16, $r17, $r19;
        org.springframework.expression.spel.ast.SpelNodeImpl $r2, $r12, $r20;
        org.springframework.expression.spel.standard.TokenKind $r4, $r10, $r11, $r21;
        java.lang.Object[] $r7, $r15, $r18;
        org.springframework.expression.spel.standard.Token $r1;
        java.util.ArrayList $r3, $r9;
        int $i0, $i1, $i2, $i3, $i4;
        org.springframework.expression.spel.standard.InternalSpelExpressionParser r0;

        r0 := @this: org.springframework.expression.spel.standard.InternalSpelExpressionParser;

        $z0 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: boolean peekIdentifierToken(java.lang.String)>("new");

        if $z0 == 0 goto label8;

        $r1 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: org.springframework.expression.spel.standard.Token nextToken()>();

        $r2 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: org.springframework.expression.spel.ast.SpelNodeImpl eatPossiblyQualifiedId()>();

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r2);

        $r4 = <org.springframework.expression.spel.standard.TokenKind: org.springframework.expression.spel.standard.TokenKind LSQUARE>;

        $z1 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: boolean peekToken(org.springframework.expression.spel.standard.TokenKind)>($r4);

        if $z1 == 0 goto label6;

        $r9 = new java.util.ArrayList;

        specialinvoke $r9.<java.util.ArrayList: void <init>()>();

        goto label4;

     label1:
        $r10 = <org.springframework.expression.spel.standard.TokenKind: org.springframework.expression.spel.standard.TokenKind RSQUARE>;

        $z2 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: boolean peekToken(org.springframework.expression.spel.standard.TokenKind)>($r10);

        if $z2 != 0 goto label2;

        $r12 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: org.springframework.expression.spel.ast.SpelNodeImpl eatExpression()>();

        interfaceinvoke $r9.<java.util.List: boolean add(java.lang.Object)>($r12);

        goto label3;

     label2:
        interfaceinvoke $r9.<java.util.List: boolean add(java.lang.Object)>(null);

     label3:
        $r11 = <org.springframework.expression.spel.standard.TokenKind: org.springframework.expression.spel.standard.TokenKind RSQUARE>;

        specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: org.springframework.expression.spel.standard.Token eatToken(org.springframework.expression.spel.standard.TokenKind)>($r11);

     label4:
        $r21 = <org.springframework.expression.spel.standard.TokenKind: org.springframework.expression.spel.standard.TokenKind LSQUARE>;

        $z4 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: boolean peekToken(org.springframework.expression.spel.standard.TokenKind,boolean)>($r21, 1);

        if $z4 != 0 goto label1;

        $z3 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: boolean maybeEatInlineList()>();

        if $z3 == 0 goto label5;

        $r20 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: org.springframework.expression.spel.ast.SpelNodeImpl pop()>();

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r20);

     label5:
        $r13 = new org.springframework.expression.spel.ast.ConstructorReference;

        $i2 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: int toPos(org.springframework.expression.spel.standard.Token)>($r1);

        $i3 = interfaceinvoke $r9.<java.util.List: int size()>();

        $r14 = newarray (org.springframework.expression.spel.ast.SpelNodeImpl)[$i3];

        $r15 = interfaceinvoke $r9.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r14);

        $r16 = (org.springframework.expression.spel.ast.SpelNodeImpl[]) $r15;

        $i4 = interfaceinvoke $r3.<java.util.List: int size()>();

        $r17 = newarray (org.springframework.expression.spel.ast.SpelNodeImpl)[$i4];

        $r18 = interfaceinvoke $r3.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r17);

        $r19 = (org.springframework.expression.spel.ast.SpelNodeImpl[]) $r18;

        specialinvoke $r13.<org.springframework.expression.spel.ast.ConstructorReference: void <init>(int,org.springframework.expression.spel.ast.SpelNodeImpl[],org.springframework.expression.spel.ast.SpelNodeImpl[])>($i2, $r16, $r19);

        specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: void push(org.springframework.expression.spel.ast.SpelNodeImpl)>($r13);

        goto label7;

     label6:
        specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: void eatConstructorArgs(java.util.List)>($r3);

        $r5 = new org.springframework.expression.spel.ast.ConstructorReference;

        $i0 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: int toPos(org.springframework.expression.spel.standard.Token)>($r1);

        $i1 = interfaceinvoke $r3.<java.util.List: int size()>();

        $r6 = newarray (org.springframework.expression.spel.ast.SpelNodeImpl)[$i1];

        $r7 = interfaceinvoke $r3.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r6);

        $r8 = (org.springframework.expression.spel.ast.SpelNodeImpl[]) $r7;

        specialinvoke $r5.<org.springframework.expression.spel.ast.ConstructorReference: void <init>(int,org.springframework.expression.spel.ast.SpelNodeImpl[])>($i0, $r8);

        specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: void push(org.springframework.expression.spel.ast.SpelNodeImpl)>($r5);

     label7:
        return 1;

     label8:
        return 0;
    }

    private void push(org.springframework.expression.spel.ast.SpelNodeImpl)
    {
        org.springframework.expression.spel.standard.InternalSpelExpressionParser r0;
        org.springframework.expression.spel.ast.SpelNodeImpl r1;
        java.util.Stack $r2;

        r0 := @this: org.springframework.expression.spel.standard.InternalSpelExpressionParser;

        r1 := @parameter0: org.springframework.expression.spel.ast.SpelNodeImpl;

        $r2 = r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: java.util.Stack constructedNodes>;

        virtualinvoke $r2.<java.util.Stack: java.lang.Object push(java.lang.Object)>(r1);

        return;
    }

    private org.springframework.expression.spel.ast.SpelNodeImpl pop()
    {
        org.springframework.expression.spel.standard.InternalSpelExpressionParser r0;
        java.lang.Object $r2;
        java.util.Stack $r1;
        org.springframework.expression.spel.ast.SpelNodeImpl $r3;

        r0 := @this: org.springframework.expression.spel.standard.InternalSpelExpressionParser;

        $r1 = r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: java.util.Stack constructedNodes>;

        $r2 = virtualinvoke $r1.<java.util.Stack: java.lang.Object pop()>();

        $r3 = (org.springframework.expression.spel.ast.SpelNodeImpl) $r2;

        return $r3;
    }

    private boolean maybeEatLiteral()
    {
        org.springframework.expression.spel.ast.BooleanLiteral $r19, $r21;
        boolean $z0, $z1;
        org.springframework.expression.spel.ast.Literal $r24, $r26, $r28, $r30, $r32, $r34;
        org.springframework.expression.spel.ast.StringLiteral $r16;
        org.springframework.expression.spel.standard.TokenKind $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15;
        org.springframework.expression.spel.standard.Token $r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        java.lang.String $r17, $r18, $r20, $r22, $r23, $r25, $r27, $r29, $r31, $r33;
        org.springframework.expression.spel.standard.InternalSpelExpressionParser r0;

        r0 := @this: org.springframework.expression.spel.standard.InternalSpelExpressionParser;

        $r1 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: org.springframework.expression.spel.standard.Token peekToken()>();

        if $r1 != null goto label01;

        return 0;

     label01:
        $r3 = $r1.<org.springframework.expression.spel.standard.Token: org.springframework.expression.spel.standard.TokenKind kind>;

        $r2 = <org.springframework.expression.spel.standard.TokenKind: org.springframework.expression.spel.standard.TokenKind LITERAL_INT>;

        if $r3 != $r2 goto label02;

        $r33 = $r1.<org.springframework.expression.spel.standard.Token: java.lang.String data>;

        $i8 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: int toPos(org.springframework.expression.spel.standard.Token)>($r1);

        $r34 = staticinvoke <org.springframework.expression.spel.ast.Literal: org.springframework.expression.spel.ast.Literal getIntLiteral(java.lang.String,int,int)>($r33, $i8, 10);

        specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: void push(org.springframework.expression.spel.ast.SpelNodeImpl)>($r34);

        goto label11;

     label02:
        $r5 = $r1.<org.springframework.expression.spel.standard.Token: org.springframework.expression.spel.standard.TokenKind kind>;

        $r4 = <org.springframework.expression.spel.standard.TokenKind: org.springframework.expression.spel.standard.TokenKind LITERAL_LONG>;

        if $r5 != $r4 goto label03;

        $r31 = $r1.<org.springframework.expression.spel.standard.Token: java.lang.String data>;

        $i7 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: int toPos(org.springframework.expression.spel.standard.Token)>($r1);

        $r32 = staticinvoke <org.springframework.expression.spel.ast.Literal: org.springframework.expression.spel.ast.Literal getLongLiteral(java.lang.String,int,int)>($r31, $i7, 10);

        specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: void push(org.springframework.expression.spel.ast.SpelNodeImpl)>($r32);

        goto label11;

     label03:
        $r7 = $r1.<org.springframework.expression.spel.standard.Token: org.springframework.expression.spel.standard.TokenKind kind>;

        $r6 = <org.springframework.expression.spel.standard.TokenKind: org.springframework.expression.spel.standard.TokenKind LITERAL_HEXINT>;

        if $r7 != $r6 goto label04;

        $r29 = $r1.<org.springframework.expression.spel.standard.Token: java.lang.String data>;

        $i6 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: int toPos(org.springframework.expression.spel.standard.Token)>($r1);

        $r30 = staticinvoke <org.springframework.expression.spel.ast.Literal: org.springframework.expression.spel.ast.Literal getIntLiteral(java.lang.String,int,int)>($r29, $i6, 16);

        specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: void push(org.springframework.expression.spel.ast.SpelNodeImpl)>($r30);

        goto label11;

     label04:
        $r9 = $r1.<org.springframework.expression.spel.standard.Token: org.springframework.expression.spel.standard.TokenKind kind>;

        $r8 = <org.springframework.expression.spel.standard.TokenKind: org.springframework.expression.spel.standard.TokenKind LITERAL_HEXLONG>;

        if $r9 != $r8 goto label05;

        $r27 = $r1.<org.springframework.expression.spel.standard.Token: java.lang.String data>;

        $i5 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: int toPos(org.springframework.expression.spel.standard.Token)>($r1);

        $r28 = staticinvoke <org.springframework.expression.spel.ast.Literal: org.springframework.expression.spel.ast.Literal getLongLiteral(java.lang.String,int,int)>($r27, $i5, 16);

        specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: void push(org.springframework.expression.spel.ast.SpelNodeImpl)>($r28);

        goto label11;

     label05:
        $r11 = $r1.<org.springframework.expression.spel.standard.Token: org.springframework.expression.spel.standard.TokenKind kind>;

        $r10 = <org.springframework.expression.spel.standard.TokenKind: org.springframework.expression.spel.standard.TokenKind LITERAL_REAL>;

        if $r11 != $r10 goto label06;

        $r25 = $r1.<org.springframework.expression.spel.standard.Token: java.lang.String data>;

        $i4 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: int toPos(org.springframework.expression.spel.standard.Token)>($r1);

        $r26 = staticinvoke <org.springframework.expression.spel.ast.Literal: org.springframework.expression.spel.ast.Literal getRealLiteral(java.lang.String,int,boolean)>($r25, $i4, 0);

        specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: void push(org.springframework.expression.spel.ast.SpelNodeImpl)>($r26);

        goto label11;

     label06:
        $r13 = $r1.<org.springframework.expression.spel.standard.Token: org.springframework.expression.spel.standard.TokenKind kind>;

        $r12 = <org.springframework.expression.spel.standard.TokenKind: org.springframework.expression.spel.standard.TokenKind LITERAL_REAL_FLOAT>;

        if $r13 != $r12 goto label07;

        $r23 = $r1.<org.springframework.expression.spel.standard.Token: java.lang.String data>;

        $i3 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: int toPos(org.springframework.expression.spel.standard.Token)>($r1);

        $r24 = staticinvoke <org.springframework.expression.spel.ast.Literal: org.springframework.expression.spel.ast.Literal getRealLiteral(java.lang.String,int,boolean)>($r23, $i3, 1);

        specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: void push(org.springframework.expression.spel.ast.SpelNodeImpl)>($r24);

        goto label11;

     label07:
        $z0 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: boolean peekIdentifierToken(java.lang.String)>("true");

        if $z0 == 0 goto label08;

        $r21 = new org.springframework.expression.spel.ast.BooleanLiteral;

        $r22 = $r1.<org.springframework.expression.spel.standard.Token: java.lang.String data>;

        $i2 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: int toPos(org.springframework.expression.spel.standard.Token)>($r1);

        specialinvoke $r21.<org.springframework.expression.spel.ast.BooleanLiteral: void <init>(java.lang.String,int,boolean)>($r22, $i2, 1);

        specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: void push(org.springframework.expression.spel.ast.SpelNodeImpl)>($r21);

        goto label11;

     label08:
        $z1 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: boolean peekIdentifierToken(java.lang.String)>("false");

        if $z1 == 0 goto label09;

        $r19 = new org.springframework.expression.spel.ast.BooleanLiteral;

        $r20 = $r1.<org.springframework.expression.spel.standard.Token: java.lang.String data>;

        $i1 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: int toPos(org.springframework.expression.spel.standard.Token)>($r1);

        specialinvoke $r19.<org.springframework.expression.spel.ast.BooleanLiteral: void <init>(java.lang.String,int,boolean)>($r20, $i1, 0);

        specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: void push(org.springframework.expression.spel.ast.SpelNodeImpl)>($r19);

        goto label11;

     label09:
        $r15 = $r1.<org.springframework.expression.spel.standard.Token: org.springframework.expression.spel.standard.TokenKind kind>;

        $r14 = <org.springframework.expression.spel.standard.TokenKind: org.springframework.expression.spel.standard.TokenKind LITERAL_STRING>;

        if $r15 != $r14 goto label10;

        $r16 = new org.springframework.expression.spel.ast.StringLiteral;

        $r17 = $r1.<org.springframework.expression.spel.standard.Token: java.lang.String data>;

        $i0 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: int toPos(org.springframework.expression.spel.standard.Token)>($r1);

        $r18 = $r1.<org.springframework.expression.spel.standard.Token: java.lang.String data>;

        specialinvoke $r16.<org.springframework.expression.spel.ast.StringLiteral: void <init>(java.lang.String,int,java.lang.String)>($r17, $i0, $r18);

        specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: void push(org.springframework.expression.spel.ast.SpelNodeImpl)>($r16);

        goto label11;

     label10:
        return 0;

     label11:
        specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: org.springframework.expression.spel.standard.Token nextToken()>();

        return 1;
    }

    private boolean maybeEatParenExpression()
    {
        org.springframework.expression.spel.standard.InternalSpelExpressionParser r0;
        org.springframework.expression.spel.standard.TokenKind $r1, $r3;
        org.springframework.expression.spel.ast.SpelNodeImpl $r2;
        boolean $z0;

        r0 := @this: org.springframework.expression.spel.standard.InternalSpelExpressionParser;

        $r1 = <org.springframework.expression.spel.standard.TokenKind: org.springframework.expression.spel.standard.TokenKind LPAREN>;

        $z0 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: boolean peekToken(org.springframework.expression.spel.standard.TokenKind)>($r1);

        if $z0 == 0 goto label1;

        specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: org.springframework.expression.spel.standard.Token nextToken()>();

        $r2 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: org.springframework.expression.spel.ast.SpelNodeImpl eatExpression()>();

        $r3 = <org.springframework.expression.spel.standard.TokenKind: org.springframework.expression.spel.standard.TokenKind RPAREN>;

        specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: org.springframework.expression.spel.standard.Token eatToken(org.springframework.expression.spel.standard.TokenKind)>($r3);

        specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: void push(org.springframework.expression.spel.ast.SpelNodeImpl)>($r2);

        return 1;

     label1:
        return 0;
    }

    private org.springframework.expression.spel.standard.Token maybeEatRelationalOperator()
    {
        org.springframework.expression.spel.standard.Token $r1, $r3, $r4, $r5;
        org.springframework.expression.spel.standard.InternalSpelExpressionParser r0;
        java.lang.String $r2;
        boolean $z0, $z1, $z2, $z3, $z4;

        r0 := @this: org.springframework.expression.spel.standard.InternalSpelExpressionParser;

        $r1 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: org.springframework.expression.spel.standard.Token peekToken()>();

        if $r1 != null goto label1;

        return null;

     label1:
        $z0 = virtualinvoke $r1.<org.springframework.expression.spel.standard.Token: boolean isNumericRelationalOperator()>();

        if $z0 == 0 goto label2;

        return $r1;

     label2:
        $z1 = virtualinvoke $r1.<org.springframework.expression.spel.standard.Token: boolean isIdentifier()>();

        if $z1 == 0 goto label5;

        $r2 = virtualinvoke $r1.<org.springframework.expression.spel.standard.Token: java.lang.String stringValue()>();

        $z2 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("instanceof");

        if $z2 == 0 goto label3;

        $r5 = virtualinvoke $r1.<org.springframework.expression.spel.standard.Token: org.springframework.expression.spel.standard.Token asInstanceOfToken()>();

        return $r5;

     label3:
        $z3 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("matches");

        if $z3 == 0 goto label4;

        $r4 = virtualinvoke $r1.<org.springframework.expression.spel.standard.Token: org.springframework.expression.spel.standard.Token asMatchesToken()>();

        return $r4;

     label4:
        $z4 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("between");

        if $z4 == 0 goto label5;

        $r3 = virtualinvoke $r1.<org.springframework.expression.spel.standard.Token: org.springframework.expression.spel.standard.Token asBetweenToken()>();

        return $r3;

     label5:
        return null;
    }

    private org.springframework.expression.spel.standard.Token eatToken(org.springframework.expression.spel.standard.TokenKind)
    {
        java.lang.Object[] $r4, $r12;
        org.springframework.expression.spel.standard.Token $r1;
        int $i0, $i1;
        java.lang.String $r6, $r7, $r9, $r10, $r11;
        org.springframework.expression.spel.SpelMessage $r5, $r13;
        org.springframework.expression.spel.standard.InternalSpelExpressionParser r0;
        org.springframework.expression.spel.standard.TokenKind r2, $r3, $r8;

        r0 := @this: org.springframework.expression.spel.standard.InternalSpelExpressionParser;

        r2 := @parameter0: org.springframework.expression.spel.standard.TokenKind;

        $r1 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: org.springframework.expression.spel.standard.Token nextToken()>();

        if $r1 != null goto label1;

        $r11 = r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: java.lang.String expressionString>;

        $i1 = virtualinvoke $r11.<java.lang.String: int length()>();

        $r13 = <org.springframework.expression.spel.SpelMessage: org.springframework.expression.spel.SpelMessage OOD>;

        $r12 = newarray (java.lang.Object)[0];

        specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: void raiseInternalException(int,org.springframework.expression.spel.SpelMessage,java.lang.Object[])>($i1, $r13, $r12);

     label1:
        $r3 = $r1.<org.springframework.expression.spel.standard.Token: org.springframework.expression.spel.standard.TokenKind kind>;

        if $r3 == r2 goto label2;

        $i0 = $r1.<org.springframework.expression.spel.standard.Token: int startpos>;

        $r5 = <org.springframework.expression.spel.SpelMessage: org.springframework.expression.spel.SpelMessage NOT_EXPECTED_TOKEN>;

        $r4 = newarray (java.lang.Object)[2];

        $r6 = virtualinvoke r2.<org.springframework.expression.spel.standard.TokenKind: java.lang.String toString()>();

        $r7 = virtualinvoke $r6.<java.lang.String: java.lang.String toLowerCase()>();

        $r4[0] = $r7;

        $r8 = virtualinvoke $r1.<org.springframework.expression.spel.standard.Token: org.springframework.expression.spel.standard.TokenKind getKind()>();

        $r9 = virtualinvoke $r8.<org.springframework.expression.spel.standard.TokenKind: java.lang.String toString()>();

        $r10 = virtualinvoke $r9.<java.lang.String: java.lang.String toLowerCase()>();

        $r4[1] = $r10;

        specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: void raiseInternalException(int,org.springframework.expression.spel.SpelMessage,java.lang.Object[])>($i0, $r5, $r4);

     label2:
        return $r1;
    }

    private boolean peekToken(org.springframework.expression.spel.standard.TokenKind)
    {
        org.springframework.expression.spel.standard.InternalSpelExpressionParser r0;
        org.springframework.expression.spel.standard.TokenKind r1;
        boolean $z0;

        r0 := @this: org.springframework.expression.spel.standard.InternalSpelExpressionParser;

        r1 := @parameter0: org.springframework.expression.spel.standard.TokenKind;

        $z0 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: boolean peekToken(org.springframework.expression.spel.standard.TokenKind,boolean)>(r1, 0);

        return $z0;
    }

    private boolean peekToken(org.springframework.expression.spel.standard.TokenKind, boolean)
    {
        org.springframework.expression.spel.standard.Token $r1;
        org.springframework.expression.spel.standard.InternalSpelExpressionParser r0;
        int $i0, $i1;
        org.springframework.expression.spel.standard.TokenKind r2, $r3;
        boolean $z0, z1;

        r0 := @this: org.springframework.expression.spel.standard.InternalSpelExpressionParser;

        r2 := @parameter0: org.springframework.expression.spel.standard.TokenKind;

        z1 := @parameter1: boolean;

        $z0 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: boolean moreTokens()>();

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r1 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: org.springframework.expression.spel.standard.Token peekToken()>();

        $r3 = $r1.<org.springframework.expression.spel.standard.Token: org.springframework.expression.spel.standard.TokenKind kind>;

        if $r3 != r2 goto label3;

        if z1 == 0 goto label2;

        $i0 = r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: int tokenStreamPointer>;

        $i1 = $i0 + 1;

        r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: int tokenStreamPointer> = $i1;

     label2:
        return 1;

     label3:
        return 0;
    }

    private boolean peekToken(org.springframework.expression.spel.standard.TokenKind, org.springframework.expression.spel.standard.TokenKind)
    {
        org.springframework.expression.spel.standard.InternalSpelExpressionParser r0;
        org.springframework.expression.spel.standard.Token $r1;
        org.springframework.expression.spel.standard.TokenKind r2, $r3, r4, $r5;
        boolean $z0;

        r0 := @this: org.springframework.expression.spel.standard.InternalSpelExpressionParser;

        r2 := @parameter0: org.springframework.expression.spel.standard.TokenKind;

        r4 := @parameter1: org.springframework.expression.spel.standard.TokenKind;

        $z0 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: boolean moreTokens()>();

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r1 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: org.springframework.expression.spel.standard.Token peekToken()>();

        $r3 = $r1.<org.springframework.expression.spel.standard.Token: org.springframework.expression.spel.standard.TokenKind kind>;

        if $r3 == r2 goto label2;

        $r5 = $r1.<org.springframework.expression.spel.standard.Token: org.springframework.expression.spel.standard.TokenKind kind>;

        if $r5 == r4 goto label2;

        return 0;

     label2:
        return 1;
    }

    private boolean peekToken(org.springframework.expression.spel.standard.TokenKind, org.springframework.expression.spel.standard.TokenKind, org.springframework.expression.spel.standard.TokenKind)
    {
        org.springframework.expression.spel.standard.Token $r1;
        org.springframework.expression.spel.standard.InternalSpelExpressionParser r0;
        org.springframework.expression.spel.standard.TokenKind r2, $r3, r4, $r5, r6, $r7;
        boolean $z0;

        r0 := @this: org.springframework.expression.spel.standard.InternalSpelExpressionParser;

        r2 := @parameter0: org.springframework.expression.spel.standard.TokenKind;

        r4 := @parameter1: org.springframework.expression.spel.standard.TokenKind;

        r6 := @parameter2: org.springframework.expression.spel.standard.TokenKind;

        $z0 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: boolean moreTokens()>();

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r1 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: org.springframework.expression.spel.standard.Token peekToken()>();

        $r3 = $r1.<org.springframework.expression.spel.standard.Token: org.springframework.expression.spel.standard.TokenKind kind>;

        if $r3 == r2 goto label2;

        $r5 = $r1.<org.springframework.expression.spel.standard.Token: org.springframework.expression.spel.standard.TokenKind kind>;

        if $r5 == r4 goto label2;

        $r7 = $r1.<org.springframework.expression.spel.standard.Token: org.springframework.expression.spel.standard.TokenKind kind>;

        if $r7 == r6 goto label2;

        return 0;

     label2:
        return 1;
    }

    private boolean peekIdentifierToken(java.lang.String)
    {
        org.springframework.expression.spel.standard.Token $r1;
        org.springframework.expression.spel.standard.InternalSpelExpressionParser r0;
        java.lang.String $r4, r5;
        org.springframework.expression.spel.standard.TokenKind $r2, $r3;
        boolean $z0, $z1;

        r0 := @this: org.springframework.expression.spel.standard.InternalSpelExpressionParser;

        r5 := @parameter0: java.lang.String;

        $z0 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: boolean moreTokens()>();

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r1 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: org.springframework.expression.spel.standard.Token peekToken()>();

        $r3 = $r1.<org.springframework.expression.spel.standard.Token: org.springframework.expression.spel.standard.TokenKind kind>;

        $r2 = <org.springframework.expression.spel.standard.TokenKind: org.springframework.expression.spel.standard.TokenKind IDENTIFIER>;

        if $r3 != $r2 goto label2;

        $r4 = virtualinvoke $r1.<org.springframework.expression.spel.standard.Token: java.lang.String stringValue()>();

        $z1 = virtualinvoke $r4.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r5);

        if $z1 == 0 goto label2;

        return 1;

     label2:
        return 0;
    }

    private boolean peekSelectToken()
    {
        org.springframework.expression.spel.standard.Token $r1;
        org.springframework.expression.spel.standard.InternalSpelExpressionParser r0;
        org.springframework.expression.spel.standard.TokenKind $r2, $r3, $r4, $r5, $r6, $r7;
        boolean $z0;

        r0 := @this: org.springframework.expression.spel.standard.InternalSpelExpressionParser;

        $z0 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: boolean moreTokens()>();

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r1 = specialinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: org.springframework.expression.spel.standard.Token peekToken()>();

        $r3 = $r1.<org.springframework.expression.spel.standard.Token: org.springframework.expression.spel.standard.TokenKind kind>;

        $r2 = <org.springframework.expression.spel.standard.TokenKind: org.springframework.expression.spel.standard.TokenKind SELECT>;

        if $r3 == $r2 goto label2;

        $r5 = $r1.<org.springframework.expression.spel.standard.Token: org.springframework.expression.spel.standard.TokenKind kind>;

        $r4 = <org.springframework.expression.spel.standard.TokenKind: org.springframework.expression.spel.standard.TokenKind SELECT_FIRST>;

        if $r5 == $r4 goto label2;

        $r7 = $r1.<org.springframework.expression.spel.standard.Token: org.springframework.expression.spel.standard.TokenKind kind>;

        $r6 = <org.springframework.expression.spel.standard.TokenKind: org.springframework.expression.spel.standard.TokenKind SELECT_LAST>;

        if $r7 == $r6 goto label2;

        return 0;

     label2:
        return 1;
    }

    private boolean moreTokens()
    {
        java.util.List $r1;
        org.springframework.expression.spel.standard.InternalSpelExpressionParser r0;
        int $i0, $i1;

        r0 := @this: org.springframework.expression.spel.standard.InternalSpelExpressionParser;

        $i0 = r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: int tokenStreamPointer>;

        $r1 = r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: java.util.List tokenStream>;

        $i1 = interfaceinvoke $r1.<java.util.List: int size()>();

        if $i0 >= $i1 goto label1;

        return 1;

     label1:
        return 0;
    }

    private org.springframework.expression.spel.standard.Token nextToken()
    {
        org.springframework.expression.spel.standard.Token $r3;
        java.util.List $r1;
        org.springframework.expression.spel.standard.InternalSpelExpressionParser r0;
        int $i0, $i1, $i2, $i3;
        java.lang.Object $r2;

        r0 := @this: org.springframework.expression.spel.standard.InternalSpelExpressionParser;

        $i1 = r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: int tokenStreamPointer>;

        $i0 = r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: int tokenStreamLength>;

        if $i1 < $i0 goto label1;

        return null;

     label1:
        $r1 = r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: java.util.List tokenStream>;

        $i2 = r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: int tokenStreamPointer>;

        $i3 = $i2 + 1;

        r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: int tokenStreamPointer> = $i3;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>($i2);

        $r3 = (org.springframework.expression.spel.standard.Token) $r2;

        return $r3;
    }

    private org.springframework.expression.spel.standard.Token peekToken()
    {
        java.util.List $r1;
        org.springframework.expression.spel.standard.InternalSpelExpressionParser r0;
        org.springframework.expression.spel.standard.Token $r3;
        int $i0, $i1, $i2;
        java.lang.Object $r2;

        r0 := @this: org.springframework.expression.spel.standard.InternalSpelExpressionParser;

        $i1 = r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: int tokenStreamPointer>;

        $i0 = r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: int tokenStreamLength>;

        if $i1 < $i0 goto label1;

        return null;

     label1:
        $r1 = r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: java.util.List tokenStream>;

        $i2 = r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: int tokenStreamPointer>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>($i2);

        $r3 = (org.springframework.expression.spel.standard.Token) $r2;

        return $r3;
    }

    private transient void raiseInternalException(int, org.springframework.expression.spel.SpelMessage, java.lang.Object[])
    {
        org.springframework.expression.spel.InternalParseException $r0;
        org.springframework.expression.spel.SpelMessage r3;
        java.lang.Object[] r4;
        org.springframework.expression.spel.standard.InternalSpelExpressionParser r2;
        int i0;
        java.lang.String $r5;
        org.springframework.expression.spel.SpelParseException $r1;

        r2 := @this: org.springframework.expression.spel.standard.InternalSpelExpressionParser;

        i0 := @parameter0: int;

        r3 := @parameter1: org.springframework.expression.spel.SpelMessage;

        r4 := @parameter2: java.lang.Object[];

        $r0 = new org.springframework.expression.spel.InternalParseException;

        $r1 = new org.springframework.expression.spel.SpelParseException;

        $r5 = r2.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: java.lang.String expressionString>;

        specialinvoke $r1.<org.springframework.expression.spel.SpelParseException: void <init>(java.lang.String,int,org.springframework.expression.spel.SpelMessage,java.lang.Object[])>($r5, i0, r3, r4);

        specialinvoke $r0.<org.springframework.expression.spel.InternalParseException: void <init>(org.springframework.expression.spel.SpelParseException)>($r1);

        throw $r0;
    }

    public java.lang.String toString(org.springframework.expression.spel.standard.Token)
    {
        org.springframework.expression.spel.standard.Token r0;
        org.springframework.expression.spel.standard.InternalSpelExpressionParser r6;
        java.lang.String $r3, $r4, $r5;
        org.springframework.expression.spel.standard.TokenKind $r1, $r2;
        boolean $z0;

        r6 := @this: org.springframework.expression.spel.standard.InternalSpelExpressionParser;

        r0 := @parameter0: org.springframework.expression.spel.standard.Token;

        $r1 = virtualinvoke r0.<org.springframework.expression.spel.standard.Token: org.springframework.expression.spel.standard.TokenKind getKind()>();

        $z0 = virtualinvoke $r1.<org.springframework.expression.spel.standard.TokenKind: boolean hasPayload()>();

        if $z0 == 0 goto label1;

        $r5 = virtualinvoke r0.<org.springframework.expression.spel.standard.Token: java.lang.String stringValue()>();

        return $r5;

     label1:
        $r2 = r0.<org.springframework.expression.spel.standard.Token: org.springframework.expression.spel.standard.TokenKind kind>;

        $r3 = virtualinvoke $r2.<org.springframework.expression.spel.standard.TokenKind: java.lang.String toString()>();

        $r4 = virtualinvoke $r3.<java.lang.String: java.lang.String toLowerCase()>();

        return $r4;
    }

    private void checkRightOperand(org.springframework.expression.spel.standard.Token, org.springframework.expression.spel.ast.SpelNodeImpl)
    {
        org.springframework.expression.spel.SpelMessage $r4;
        java.lang.Object[] $r3;
        org.springframework.expression.spel.standard.InternalSpelExpressionParser r1;
        org.springframework.expression.spel.standard.Token r2;
        int $i0;
        org.springframework.expression.spel.ast.SpelNodeImpl r0;

        r1 := @this: org.springframework.expression.spel.standard.InternalSpelExpressionParser;

        r2 := @parameter0: org.springframework.expression.spel.standard.Token;

        r0 := @parameter1: org.springframework.expression.spel.ast.SpelNodeImpl;

        if r0 != null goto label1;

        $i0 = r2.<org.springframework.expression.spel.standard.Token: int startpos>;

        $r4 = <org.springframework.expression.spel.SpelMessage: org.springframework.expression.spel.SpelMessage RIGHT_OPERAND_PROBLEM>;

        $r3 = newarray (java.lang.Object)[0];

        specialinvoke r1.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: void raiseInternalException(int,org.springframework.expression.spel.SpelMessage,java.lang.Object[])>($i0, $r4, $r3);

     label1:
        return;
    }

    private int toPos(org.springframework.expression.spel.standard.Token)
    {
        org.springframework.expression.spel.standard.InternalSpelExpressionParser r1;
        org.springframework.expression.spel.standard.Token r0;
        int $i0, $i1, $i2, $i3;

        r1 := @this: org.springframework.expression.spel.standard.InternalSpelExpressionParser;

        r0 := @parameter0: org.springframework.expression.spel.standard.Token;

        $i0 = r0.<org.springframework.expression.spel.standard.Token: int startpos>;

        $i2 = $i0 << 16;

        $i1 = r0.<org.springframework.expression.spel.standard.Token: int endpos>;

        $i3 = $i2 + $i1;

        return $i3;
    }

    private int toPos(int, int)
    {
        org.springframework.expression.spel.standard.InternalSpelExpressionParser r0;
        int i0, i1, $i2, $i3;

        r0 := @this: org.springframework.expression.spel.standard.InternalSpelExpressionParser;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $i2 = i0 << 16;

        $i3 = $i2 + i1;

        return $i3;
    }

    protected volatile org.springframework.expression.Expression doParseExpression(java.lang.String, org.springframework.expression.ParserContext) throws org.springframework.expression.ParseException
    {
        org.springframework.expression.spel.standard.SpelExpression $r3;
        org.springframework.expression.spel.standard.InternalSpelExpressionParser r0;
        org.springframework.expression.ParserContext r2;
        java.lang.String r1;

        r0 := @this: org.springframework.expression.spel.standard.InternalSpelExpressionParser;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.springframework.expression.ParserContext;

        $r3 = virtualinvoke r0.<org.springframework.expression.spel.standard.InternalSpelExpressionParser: org.springframework.expression.spel.standard.SpelExpression doParseExpression(java.lang.String,org.springframework.expression.ParserContext)>(r1, r2);

        return $r3;
    }
}
