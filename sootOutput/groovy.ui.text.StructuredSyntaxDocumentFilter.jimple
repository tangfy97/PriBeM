public class groovy.ui.text.StructuredSyntaxDocumentFilter extends javax.swing.text.DocumentFilter
{
    public static final java.lang.String TAB_REPLACEMENT;
    private static final groovy.ui.text.StructuredSyntaxDocumentFilter$MLComparator ML_COMPARATOR;
    protected groovy.ui.text.StructuredSyntaxDocumentFilter$LexerNode lexer;
    protected javax.swing.text.DefaultStyledDocument styledDocument;
    private javax.swing.text.Segment segment;
    private java.nio.CharBuffer buffer;
    protected java.util.TreeSet mlTextRunSet;

    private static void checkRegexp(java.lang.String)
    {
        java.lang.StringBuffer $r4, $r5, $r6, $r8, $r9, $r13, $r14, $r16, $r17, $r18;
        int $i0, i1, $i3;
        java.lang.String r0, $r1, $r2, $r10, r15;
        java.lang.IllegalArgumentException $r19;

        r0 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\\\\\\(", "X");

        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\\(\\?", "X");

        $i0 = virtualinvoke $r2.<java.lang.String: int indexOf(int)>(40);

        $i3 = (int) -1;

        if $i0 <= $i3 goto label3;

        $r16 = new java.lang.StringBuffer;

        specialinvoke $r16.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Only non-capturing groups allowed:\r\n");

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\r\n");

        r15 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        i1 = 0;

     label1:
        if i1 >= $i0 goto label2;

        $r17 = new java.lang.StringBuffer;

        specialinvoke $r17.<java.lang.StringBuffer: void <init>()>();

        $r13 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r15);

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");

        r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.String toString()>();

        i1 = i1 + 1;

        goto label1;

     label2:
        $r18 = new java.lang.StringBuffer;

        specialinvoke $r18.<java.lang.StringBuffer: void <init>()>();

        $r8 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r15);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("^");

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();

        $r19 = new java.lang.IllegalArgumentException;

        specialinvoke $r19.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r19;

     label3:
        return;
    }

    public void <init>(javax.swing.text.DefaultStyledDocument)
    {
        groovy.ui.text.StructuredSyntaxDocumentFilter r0;
        javax.swing.text.DefaultStyledDocument r5;
        groovy.ui.text.StructuredSyntaxDocumentFilter$MLComparator $r4;
        groovy.ui.text.StructuredSyntaxDocumentFilter$LexerNode $r1;
        javax.swing.text.Segment $r2;
        java.util.TreeSet $r3;

        r0 := @this: groovy.ui.text.StructuredSyntaxDocumentFilter;

        r5 := @parameter0: javax.swing.text.DefaultStyledDocument;

        specialinvoke r0.<javax.swing.text.DocumentFilter: void <init>()>();

        $r1 = new groovy.ui.text.StructuredSyntaxDocumentFilter$LexerNode;

        specialinvoke $r1.<groovy.ui.text.StructuredSyntaxDocumentFilter$LexerNode: void <init>(groovy.ui.text.StructuredSyntaxDocumentFilter,boolean)>(r0, 1);

        r0.<groovy.ui.text.StructuredSyntaxDocumentFilter: groovy.ui.text.StructuredSyntaxDocumentFilter$LexerNode lexer> = $r1;

        $r2 = new javax.swing.text.Segment;

        specialinvoke $r2.<javax.swing.text.Segment: void <init>()>();

        r0.<groovy.ui.text.StructuredSyntaxDocumentFilter: javax.swing.text.Segment segment> = $r2;

        $r3 = new java.util.TreeSet;

        $r4 = <groovy.ui.text.StructuredSyntaxDocumentFilter: groovy.ui.text.StructuredSyntaxDocumentFilter$MLComparator ML_COMPARATOR>;

        specialinvoke $r3.<java.util.TreeSet: void <init>(java.util.Comparator)>($r4);

        r0.<groovy.ui.text.StructuredSyntaxDocumentFilter: java.util.TreeSet mlTextRunSet> = $r3;

        r0.<groovy.ui.text.StructuredSyntaxDocumentFilter: javax.swing.text.DefaultStyledDocument styledDocument> = r5;

        return;
    }

    private int calcBeginParse(int)
    {
        groovy.ui.text.StructuredSyntaxDocumentFilter r0;
        javax.swing.text.DefaultStyledDocument $r2;
        groovy.ui.text.StructuredSyntaxDocumentFilter$MultiLineRun $r1, $r4;
        int $i0, $i1, i2, i3, $i4;
        javax.swing.text.Element $r3;

        r0 := @this: groovy.ui.text.StructuredSyntaxDocumentFilter;

        i2 := @parameter0: int;

        $r1 = specialinvoke r0.<groovy.ui.text.StructuredSyntaxDocumentFilter: groovy.ui.text.StructuredSyntaxDocumentFilter$MultiLineRun getMultiLineRun(int)>(i2);

        if $r1 == null goto label1;

        i3 = virtualinvoke $r1.<groovy.ui.text.StructuredSyntaxDocumentFilter$MultiLineRun: int start()>();

        goto label4;

     label1:
        $r2 = r0.<groovy.ui.text.StructuredSyntaxDocumentFilter: javax.swing.text.DefaultStyledDocument styledDocument>;

        $r3 = virtualinvoke $r2.<javax.swing.text.DefaultStyledDocument: javax.swing.text.Element getParagraphElement(int)>(i2);

        $i0 = interfaceinvoke $r3.<javax.swing.text.Element: int getStartOffset()>();

        $r4 = specialinvoke r0.<groovy.ui.text.StructuredSyntaxDocumentFilter: groovy.ui.text.StructuredSyntaxDocumentFilter$MultiLineRun getMultiLineRun(int)>($i0);

        if $r4 != null goto label2;

        $i4 = $i0;

        goto label3;

     label2:
        $i1 = virtualinvoke $r4.<groovy.ui.text.StructuredSyntaxDocumentFilter$MultiLineRun: int end()>();

        $i4 = $i1 + 1;

     label3:
        i3 = $i4;

     label4:
        return i3;
    }

    private int calcEndParse(int)
    {
        groovy.ui.text.StructuredSyntaxDocumentFilter r0;
        javax.swing.text.DefaultStyledDocument $r2;
        groovy.ui.text.StructuredSyntaxDocumentFilter$MultiLineRun $r1, $r4;
        int $i0, i1, i2, $i3;
        javax.swing.text.Element $r3;

        r0 := @this: groovy.ui.text.StructuredSyntaxDocumentFilter;

        i1 := @parameter0: int;

        $r1 = specialinvoke r0.<groovy.ui.text.StructuredSyntaxDocumentFilter: groovy.ui.text.StructuredSyntaxDocumentFilter$MultiLineRun getMultiLineRun(int)>(i1);

        if $r1 == null goto label1;

        i2 = virtualinvoke $r1.<groovy.ui.text.StructuredSyntaxDocumentFilter$MultiLineRun: int end()>();

        goto label4;

     label1:
        $r2 = r0.<groovy.ui.text.StructuredSyntaxDocumentFilter: javax.swing.text.DefaultStyledDocument styledDocument>;

        $r3 = virtualinvoke $r2.<javax.swing.text.DefaultStyledDocument: javax.swing.text.Element getParagraphElement(int)>(i1);

        $i0 = interfaceinvoke $r3.<javax.swing.text.Element: int getEndOffset()>();

        $r4 = specialinvoke r0.<groovy.ui.text.StructuredSyntaxDocumentFilter: groovy.ui.text.StructuredSyntaxDocumentFilter$MultiLineRun getMultiLineRun(int)>($i0);

        if $r4 != null goto label2;

        $i3 = $i0;

        goto label3;

     label2:
        $i3 = virtualinvoke $r4.<groovy.ui.text.StructuredSyntaxDocumentFilter$MultiLineRun: int end()>();

     label3:
        i2 = $i3;

     label4:
        return i2;
    }

    public groovy.ui.text.StructuredSyntaxDocumentFilter$LexerNode createLexerNode()
    {
        groovy.ui.text.StructuredSyntaxDocumentFilter r1;
        groovy.ui.text.StructuredSyntaxDocumentFilter$LexerNode $r0;

        r1 := @this: groovy.ui.text.StructuredSyntaxDocumentFilter;

        $r0 = new groovy.ui.text.StructuredSyntaxDocumentFilter$LexerNode;

        specialinvoke $r0.<groovy.ui.text.StructuredSyntaxDocumentFilter$LexerNode: void <init>(groovy.ui.text.StructuredSyntaxDocumentFilter,boolean)>(r1, 0);

        return $r0;
    }

    private groovy.ui.text.StructuredSyntaxDocumentFilter$MultiLineRun getMultiLineRun(int)
    {
        groovy.ui.text.StructuredSyntaxDocumentFilter r1;
        java.util.SortedSet $r3;
        groovy.ui.text.StructuredSyntaxDocumentFilter$MultiLineRun r5, r6, $r7;
        java.lang.Integer $r0;
        java.util.TreeSet $r2;
        int i0, $i1;
        java.lang.Object $r4;
        boolean $z0;

        r1 := @this: groovy.ui.text.StructuredSyntaxDocumentFilter;

        i0 := @parameter0: int;

        r5 = null;

        if i0 <= 0 goto label3;

        $r0 = new java.lang.Integer;

        specialinvoke $r0.<java.lang.Integer: void <init>(int)>(i0);

        $r2 = r1.<groovy.ui.text.StructuredSyntaxDocumentFilter: java.util.TreeSet mlTextRunSet>;

        $r3 = virtualinvoke $r2.<java.util.TreeSet: java.util.SortedSet headSet(java.lang.Object)>($r0);

        $z0 = interfaceinvoke $r3.<java.util.SortedSet: boolean isEmpty()>();

        if $z0 != 0 goto label3;

        $r4 = interfaceinvoke $r3.<java.util.SortedSet: java.lang.Object last()>();

        r6 = (groovy.ui.text.StructuredSyntaxDocumentFilter$MultiLineRun) $r4;

        $i1 = virtualinvoke r6.<groovy.ui.text.StructuredSyntaxDocumentFilter$MultiLineRun: int end()>();

        if $i1 < i0 goto label1;

        $r7 = r6;

        goto label2;

     label1:
        $r7 = null;

     label2:
        r5 = $r7;

     label3:
        return r5;
    }

    public groovy.ui.text.StructuredSyntaxDocumentFilter$LexerNode getRootNode()
    {
        groovy.ui.text.StructuredSyntaxDocumentFilter r0;
        groovy.ui.text.StructuredSyntaxDocumentFilter$LexerNode $r1;

        r0 := @this: groovy.ui.text.StructuredSyntaxDocumentFilter;

        $r1 = r0.<groovy.ui.text.StructuredSyntaxDocumentFilter: groovy.ui.text.StructuredSyntaxDocumentFilter$LexerNode lexer>;

        return $r1;
    }

    public void insertString(javax.swing.text.DocumentFilter$FilterBypass, int, java.lang.String, javax.swing.text.AttributeSet) throws javax.swing.text.BadLocationException
    {
        groovy.ui.text.StructuredSyntaxDocumentFilter r0;
        javax.swing.text.DocumentFilter$FilterBypass r2;
        int i0, $i1;
        java.lang.String $r1, r4;
        javax.swing.text.AttributeSet r3;

        r0 := @this: groovy.ui.text.StructuredSyntaxDocumentFilter;

        r2 := @parameter0: javax.swing.text.DocumentFilter$FilterBypass;

        i0 := @parameter1: int;

        r4 := @parameter2: java.lang.String;

        r3 := @parameter3: javax.swing.text.AttributeSet;

        $r1 = specialinvoke r0.<groovy.ui.text.StructuredSyntaxDocumentFilter: java.lang.String replaceMetaCharacters(java.lang.String)>(r4);

        virtualinvoke r2.<javax.swing.text.DocumentFilter$FilterBypass: void insertString(int,java.lang.String,javax.swing.text.AttributeSet)>(i0, $r1, r3);

        $i1 = virtualinvoke $r1.<java.lang.String: int length()>();

        virtualinvoke r0.<groovy.ui.text.StructuredSyntaxDocumentFilter: void parseDocument(int,int)>(i0, $i1);

        return;
    }

    protected void parseDocument(int, int) throws javax.swing.text.BadLocationException
    {
        groovy.ui.text.StructuredSyntaxDocumentFilter r0;
        javax.swing.text.DefaultStyledDocument $r1, $r2, $r14;
        java.util.SortedSet $r12;
        groovy.ui.text.StructuredSyntaxDocumentFilter$LexerNode $r8, $r13, $r15;
        java.lang.Integer $r9, $r11;
        java.util.TreeSet $r10;
        int $i0, i1, $i2, $i3, $i4, i5, i6, i7, i8;
        boolean $z0;
        java.nio.CharBuffer $r6, $r7, $r16;
        char[] $r5;
        javax.swing.text.Segment $r3, $r4;

        r0 := @this: groovy.ui.text.StructuredSyntaxDocumentFilter;

        i5 := @parameter0: int;

        i6 := @parameter1: int;

        $r2 = r0.<groovy.ui.text.StructuredSyntaxDocumentFilter: javax.swing.text.DefaultStyledDocument styledDocument>;

        $r1 = r0.<groovy.ui.text.StructuredSyntaxDocumentFilter: javax.swing.text.DefaultStyledDocument styledDocument>;

        $i0 = virtualinvoke $r1.<javax.swing.text.DefaultStyledDocument: int getLength()>();

        $r3 = r0.<groovy.ui.text.StructuredSyntaxDocumentFilter: javax.swing.text.Segment segment>;

        virtualinvoke $r2.<javax.swing.text.DefaultStyledDocument: void getText(int,int,javax.swing.text.Segment)>(0, $i0, $r3);

        $r4 = r0.<groovy.ui.text.StructuredSyntaxDocumentFilter: javax.swing.text.Segment segment>;

        $r5 = $r4.<javax.swing.text.Segment: char[] array>;

        $r6 = staticinvoke <java.nio.CharBuffer: java.nio.CharBuffer wrap(char[])>($r5);

        $r7 = virtualinvoke $r6.<java.nio.CharBuffer: java.nio.CharBuffer asReadOnlyBuffer()>();

        r0.<groovy.ui.text.StructuredSyntaxDocumentFilter: java.nio.CharBuffer buffer> = $r7;

        $r8 = r0.<groovy.ui.text.StructuredSyntaxDocumentFilter: groovy.ui.text.StructuredSyntaxDocumentFilter$LexerNode lexer>;

        $z0 = virtualinvoke $r8.<groovy.ui.text.StructuredSyntaxDocumentFilter$LexerNode: boolean isInitialized()>();

        if $z0 != 0 goto label1;

        $r13 = r0.<groovy.ui.text.StructuredSyntaxDocumentFilter: groovy.ui.text.StructuredSyntaxDocumentFilter$LexerNode lexer>;

        staticinvoke <groovy.ui.text.StructuredSyntaxDocumentFilter$LexerNode: void access$100(groovy.ui.text.StructuredSyntaxDocumentFilter$LexerNode)>($r13);

        i7 = 0;

        $r14 = r0.<groovy.ui.text.StructuredSyntaxDocumentFilter: javax.swing.text.DefaultStyledDocument styledDocument>;

        i8 = virtualinvoke $r14.<javax.swing.text.DefaultStyledDocument: int getLength()>();

        goto label2;

     label1:
        i1 = i5 + i6;

        $i2 = specialinvoke r0.<groovy.ui.text.StructuredSyntaxDocumentFilter: int calcBeginParse(int)>(i5);

        i7 = $i2;

        $i3 = specialinvoke r0.<groovy.ui.text.StructuredSyntaxDocumentFilter: int calcEndParse(int)>(i1);

        i8 = $i3 - $i2;

        $r10 = r0.<groovy.ui.text.StructuredSyntaxDocumentFilter: java.util.TreeSet mlTextRunSet>;

        $r9 = new java.lang.Integer;

        specialinvoke $r9.<java.lang.Integer: void <init>(int)>($i2);

        $r11 = new java.lang.Integer;

        $i4 = $i2 + i8;

        specialinvoke $r11.<java.lang.Integer: void <init>(int)>($i4);

        $r12 = virtualinvoke $r10.<java.util.TreeSet: java.util.SortedSet subSet(java.lang.Object,java.lang.Object)>($r9, $r11);

        if $r12 == null goto label2;

        interfaceinvoke $r12.<java.util.SortedSet: void clear()>();

     label2:
        $r15 = r0.<groovy.ui.text.StructuredSyntaxDocumentFilter: groovy.ui.text.StructuredSyntaxDocumentFilter$LexerNode lexer>;

        $r16 = r0.<groovy.ui.text.StructuredSyntaxDocumentFilter: java.nio.CharBuffer buffer>;

        virtualinvoke $r15.<groovy.ui.text.StructuredSyntaxDocumentFilter$LexerNode: void parse(java.nio.CharBuffer,int,int)>($r16, i7, i8);

        return;
    }

    public void remove(javax.swing.text.DocumentFilter$FilterBypass, int, int) throws javax.swing.text.BadLocationException
    {
        groovy.ui.text.StructuredSyntaxDocumentFilter r2;
        javax.swing.text.DocumentFilter$FilterBypass r0;
        groovy.ui.text.StructuredSyntaxDocumentFilter$LexerNode $r5;
        java.util.TreeSet $r3;
        javax.swing.text.Style $r6;
        int i0, i1, $i2, $i3, $i4, $i5, $i6;
        javax.swing.text.Document $r1, $r4;

        r2 := @this: groovy.ui.text.StructuredSyntaxDocumentFilter;

        r0 := @parameter0: javax.swing.text.DocumentFilter$FilterBypass;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        if i0 != 0 goto label1;

        $r4 = virtualinvoke r0.<javax.swing.text.DocumentFilter$FilterBypass: javax.swing.text.Document getDocument()>();

        $i6 = interfaceinvoke $r4.<javax.swing.text.Document: int getLength()>();

        if i1 == $i6 goto label1;

        $r5 = r2.<groovy.ui.text.StructuredSyntaxDocumentFilter: groovy.ui.text.StructuredSyntaxDocumentFilter$LexerNode lexer>;

        $r6 = staticinvoke <groovy.ui.text.StructuredSyntaxDocumentFilter$LexerNode: javax.swing.text.Style access$200(groovy.ui.text.StructuredSyntaxDocumentFilter$LexerNode)>($r5);

        virtualinvoke r0.<javax.swing.text.DocumentFilter$FilterBypass: void replace(int,int,java.lang.String,javax.swing.text.AttributeSet)>(0, i1, "\n", $r6);

        virtualinvoke r2.<groovy.ui.text.StructuredSyntaxDocumentFilter: void parseDocument(int,int)>(i0, 2);

        virtualinvoke r0.<javax.swing.text.DocumentFilter$FilterBypass: void remove(int,int)>(i0, 1);

        goto label4;

     label1:
        virtualinvoke r0.<javax.swing.text.DocumentFilter$FilterBypass: void remove(int,int)>(i0, i1);

        $i2 = i0 + 1;

        $r1 = virtualinvoke r0.<javax.swing.text.DocumentFilter$FilterBypass: javax.swing.text.Document getDocument()>();

        $i3 = interfaceinvoke $r1.<javax.swing.text.Document: int getLength()>();

        if $i2 >= $i3 goto label2;

        virtualinvoke r2.<groovy.ui.text.StructuredSyntaxDocumentFilter: void parseDocument(int,int)>(i0, 1);

        goto label4;

     label2:
        $i4 = i0 - 1;

        if $i4 <= 0 goto label3;

        $i5 = i0 - 1;

        virtualinvoke r2.<groovy.ui.text.StructuredSyntaxDocumentFilter: void parseDocument(int,int)>($i5, 1);

        goto label4;

     label3:
        $r3 = r2.<groovy.ui.text.StructuredSyntaxDocumentFilter: java.util.TreeSet mlTextRunSet>;

        virtualinvoke $r3.<java.util.TreeSet: void clear()>();

     label4:
        return;
    }

    public void replace(javax.swing.text.DocumentFilter$FilterBypass, int, int, java.lang.String, javax.swing.text.AttributeSet) throws javax.swing.text.BadLocationException
    {
        groovy.ui.text.StructuredSyntaxDocumentFilter r0;
        javax.swing.text.DocumentFilter$FilterBypass r2;
        int i0, i1, $i2;
        java.lang.String $r1, r4;
        javax.swing.text.AttributeSet r3;

        r0 := @this: groovy.ui.text.StructuredSyntaxDocumentFilter;

        r2 := @parameter0: javax.swing.text.DocumentFilter$FilterBypass;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r4 := @parameter3: java.lang.String;

        r3 := @parameter4: javax.swing.text.AttributeSet;

        $r1 = specialinvoke r0.<groovy.ui.text.StructuredSyntaxDocumentFilter: java.lang.String replaceMetaCharacters(java.lang.String)>(r4);

        virtualinvoke r2.<javax.swing.text.DocumentFilter$FilterBypass: void replace(int,int,java.lang.String,javax.swing.text.AttributeSet)>(i0, i1, $r1, r3);

        $i2 = virtualinvoke $r1.<java.lang.String: int length()>();

        virtualinvoke r0.<groovy.ui.text.StructuredSyntaxDocumentFilter: void parseDocument(int,int)>(i0, $i2);

        return;
    }

    private java.lang.String replaceMetaCharacters(java.lang.String)
    {
        groovy.ui.text.StructuredSyntaxDocumentFilter r1;
        java.lang.String $r0, r2;

        r1 := @this: groovy.ui.text.StructuredSyntaxDocumentFilter;

        r2 := @parameter0: java.lang.String;

        $r0 = virtualinvoke r2.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\\t", "    ");

        return $r0;
    }

    static void access$300(java.lang.String)
    {
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        staticinvoke <groovy.ui.text.StructuredSyntaxDocumentFilter: void checkRegexp(java.lang.String)>(r0);

        return;
    }

    static void <clinit>()
    {
        groovy.ui.text.StructuredSyntaxDocumentFilter$MLComparator $r0;

        <groovy.ui.text.StructuredSyntaxDocumentFilter: java.lang.String TAB_REPLACEMENT> = "    ";

        $r0 = new groovy.ui.text.StructuredSyntaxDocumentFilter$MLComparator;

        specialinvoke $r0.<groovy.ui.text.StructuredSyntaxDocumentFilter$MLComparator: void <init>(groovy.ui.text.StructuredSyntaxDocumentFilter$1)>(null);

        <groovy.ui.text.StructuredSyntaxDocumentFilter: groovy.ui.text.StructuredSyntaxDocumentFilter$MLComparator ML_COMPARATOR> = $r0;

        return;
    }
}
