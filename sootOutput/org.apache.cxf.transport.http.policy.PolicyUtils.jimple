public final class org.apache.cxf.transport.http.policy.PolicyUtils extends java.lang.Object
{
    public static final java.lang.String HTTPCONF_NAMESPACE;
    public static final javax.xml.namespace.QName HTTPCLIENTPOLICY_ASSERTION_QNAME;
    public static final javax.xml.namespace.QName HTTPSERVERPOLICY_ASSERTION_QNAME;
    private static final java.util.logging.Logger LOG;

    private void <init>()
    {
        org.apache.cxf.transport.http.policy.PolicyUtils r0;

        r0 := @this: org.apache.cxf.transport.http.policy.PolicyUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static org.apache.cxf.transports.http.configuration.HTTPClientPolicy getClient(org.apache.cxf.message.Message, org.apache.cxf.transports.http.configuration.HTTPClientPolicy)
    {
        org.apache.cxf.ws.policy.PolicyException $r14;
        java.lang.Object[] $r16;
        org.apache.cxf.common.i18n.Message $r15;
        java.util.ArrayList $r9;
        java.util.logging.Level $r12;
        org.apache.cxf.ws.policy.AssertionInfoMap r4;
        boolean $z0, $z1, $z2;
        org.apache.cxf.ws.policy.AssertionInfo r19;
        java.util.Iterator $r10;
        org.apache.cxf.message.Message r0;
        java.util.Collection r8;
        org.apache.neethi.Assertion $r20;
        java.util.logging.Logger $r13, $r17;
        java.lang.Object $r1, $r3, $r7, $r18;
        org.apache.cxf.transports.http.configuration.HTTPClientPolicy r2, r5, $r11, $r21, r22;
        javax.xml.namespace.QName $r6;

        r0 := @parameter0: org.apache.cxf.message.Message;

        r5 := @parameter1: org.apache.cxf.transports.http.configuration.HTTPClientPolicy;

        $r1 = interfaceinvoke r0.<org.apache.cxf.message.Message: java.lang.Object get(java.lang.Class)>(class "Lorg/apache/cxf/transports/http/configuration/HTTPClientPolicy;");

        r2 = (org.apache.cxf.transports.http.configuration.HTTPClientPolicy) $r1;

        if r2 == null goto label1;

        $r21 = staticinvoke <org.apache.cxf.transport.http.policy.PolicyUtils: org.apache.cxf.transports.http.configuration.HTTPClientPolicy intersect(org.apache.cxf.transports.http.configuration.HTTPClientPolicy,org.apache.cxf.transports.http.configuration.HTTPClientPolicy)>(r2, r5);

        return $r21;

     label1:
        $r3 = interfaceinvoke r0.<org.apache.cxf.message.Message: java.lang.Object get(java.lang.Class)>(class "Lorg/apache/cxf/ws/policy/AssertionInfoMap;");

        r4 = (org.apache.cxf.ws.policy.AssertionInfoMap) $r3;

        if null == r4 goto label2;

        $z0 = virtualinvoke r4.<org.apache.cxf.ws.policy.AssertionInfoMap: boolean isEmpty()>();

        if $z0 == 0 goto label3;

     label2:
        return r5;

     label3:
        $r6 = <org.apache.cxf.transport.http.policy.PolicyUtils: javax.xml.namespace.QName HTTPCLIENTPOLICY_ASSERTION_QNAME>;

        $r7 = virtualinvoke r4.<org.apache.cxf.ws.policy.AssertionInfoMap: java.lang.Object get(java.lang.Object)>($r6);

        r8 = (java.util.Collection) $r7;

        if null != r8 goto label4;

        return r5;

     label4:
        $r9 = new java.util.ArrayList;

        specialinvoke $r9.<java.util.ArrayList: void <init>()>();

        $r10 = interfaceinvoke r8.<java.util.Collection: java.util.Iterator iterator()>();

     label5:
        $z1 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label6;

        $r18 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        r19 = (org.apache.cxf.ws.policy.AssertionInfo) $r18;

        $r20 = virtualinvoke r19.<org.apache.cxf.ws.policy.AssertionInfo: org.apache.neethi.Assertion getAssertion()>();

        interfaceinvoke $r9.<java.util.Collection: boolean add(java.lang.Object)>($r20);

        goto label5;

     label6:
        $r11 = staticinvoke <org.apache.cxf.transport.http.policy.PolicyUtils: org.apache.cxf.transports.http.configuration.HTTPClientPolicy getClient(java.util.Collection)>($r9);

        r22 = $r11;

        if null == $r11 goto label8;

        if null == r5 goto label8;

        $z2 = staticinvoke <org.apache.cxf.transport.http.policy.PolicyUtils: boolean compatible(org.apache.cxf.transports.http.configuration.HTTPClientPolicy,org.apache.cxf.transports.http.configuration.HTTPClientPolicy)>($r11, r5);

        if $z2 == 0 goto label7;

        r22 = staticinvoke <org.apache.cxf.transport.http.policy.PolicyUtils: org.apache.cxf.transports.http.configuration.HTTPClientPolicy intersect(org.apache.cxf.transports.http.configuration.HTTPClientPolicy,org.apache.cxf.transports.http.configuration.HTTPClientPolicy)>($r11, r5);

        goto label8;

     label7:
        $r13 = <org.apache.cxf.transport.http.policy.PolicyUtils: java.util.logging.Logger LOG>;

        $r12 = <java.util.logging.Level: java.util.logging.Level SEVERE>;

        staticinvoke <org.apache.cxf.common.logging.LogUtils: void log(java.util.logging.Logger,java.util.logging.Level,java.lang.String)>($r13, $r12, "INCOMPATIBLE_HTTPCLIENTPOLICY_ASSERTIONS");

        $r14 = new org.apache.cxf.ws.policy.PolicyException;

        $r15 = new org.apache.cxf.common.i18n.Message;

        $r17 = <org.apache.cxf.transport.http.policy.PolicyUtils: java.util.logging.Logger LOG>;

        $r16 = newarray (java.lang.Object)[0];

        specialinvoke $r15.<org.apache.cxf.common.i18n.Message: void <init>(java.lang.String,java.util.logging.Logger,java.lang.Object[])>("INCOMPATIBLE_HTTPCLIENTPOLICY_ASSERTIONS", $r17, $r16);

        specialinvoke $r14.<org.apache.cxf.ws.policy.PolicyException: void <init>(org.apache.cxf.common.i18n.Message)>($r15);

        throw $r14;

     label8:
        return r22;
    }

    public static org.apache.cxf.transports.http.configuration.HTTPServerPolicy getServer(org.apache.cxf.message.Message, org.apache.cxf.transports.http.configuration.HTTPServerPolicy)
    {
        org.apache.cxf.ws.policy.PolicyException $r12;
        java.lang.Object[] $r14;
        org.apache.cxf.common.i18n.Message $r13;
        java.util.ArrayList $r6;
        java.util.logging.Level $r10;
        org.apache.cxf.ws.policy.AssertionInfoMap r2;
        boolean $z0, $z1;
        org.apache.cxf.ws.policy.AssertionInfo r17;
        java.util.Iterator $r7;
        org.apache.cxf.message.Message r0;
        org.apache.cxf.transports.http.configuration.HTTPServerPolicy $r8, r9, r19;
        java.util.Collection r5;
        org.apache.neethi.Assertion $r18;
        java.util.logging.Logger $r11, $r15;
        java.lang.Object $r1, $r4, $r16;
        javax.xml.namespace.QName $r3;

        r0 := @parameter0: org.apache.cxf.message.Message;

        r9 := @parameter1: org.apache.cxf.transports.http.configuration.HTTPServerPolicy;

        $r1 = interfaceinvoke r0.<org.apache.cxf.message.Message: java.lang.Object get(java.lang.Class)>(class "Lorg/apache/cxf/ws/policy/AssertionInfoMap;");

        r2 = (org.apache.cxf.ws.policy.AssertionInfoMap) $r1;

        if null != r2 goto label1;

        return r9;

     label1:
        $r3 = <org.apache.cxf.transport.http.policy.PolicyUtils: javax.xml.namespace.QName HTTPSERVERPOLICY_ASSERTION_QNAME>;

        $r4 = virtualinvoke r2.<org.apache.cxf.ws.policy.AssertionInfoMap: java.lang.Object get(java.lang.Object)>($r3);

        r5 = (java.util.Collection) $r4;

        if null != r5 goto label2;

        return r9;

     label2:
        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        $r7 = interfaceinvoke r5.<java.util.Collection: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r16 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r17 = (org.apache.cxf.ws.policy.AssertionInfo) $r16;

        $r18 = virtualinvoke r17.<org.apache.cxf.ws.policy.AssertionInfo: org.apache.neethi.Assertion getAssertion()>();

        interfaceinvoke $r6.<java.util.Collection: boolean add(java.lang.Object)>($r18);

        goto label3;

     label4:
        $r8 = staticinvoke <org.apache.cxf.transport.http.policy.PolicyUtils: org.apache.cxf.transports.http.configuration.HTTPServerPolicy getServer(java.util.Collection)>($r6);

        r19 = $r8;

        if null == $r8 goto label6;

        if null == r9 goto label6;

        $z1 = staticinvoke <org.apache.cxf.transport.http.policy.PolicyUtils: boolean compatible(org.apache.cxf.transports.http.configuration.HTTPServerPolicy,org.apache.cxf.transports.http.configuration.HTTPServerPolicy)>($r8, r9);

        if $z1 == 0 goto label5;

        r19 = staticinvoke <org.apache.cxf.transport.http.policy.PolicyUtils: org.apache.cxf.transports.http.configuration.HTTPServerPolicy intersect(org.apache.cxf.transports.http.configuration.HTTPServerPolicy,org.apache.cxf.transports.http.configuration.HTTPServerPolicy)>($r8, r9);

        goto label6;

     label5:
        $r11 = <org.apache.cxf.transport.http.policy.PolicyUtils: java.util.logging.Logger LOG>;

        $r10 = <java.util.logging.Level: java.util.logging.Level SEVERE>;

        staticinvoke <org.apache.cxf.common.logging.LogUtils: void log(java.util.logging.Logger,java.util.logging.Level,java.lang.String)>($r11, $r10, "INCOMPATIBLE_HTTPSERVERPOLICY_ASSERTIONS");

        $r12 = new org.apache.cxf.ws.policy.PolicyException;

        $r13 = new org.apache.cxf.common.i18n.Message;

        $r15 = <org.apache.cxf.transport.http.policy.PolicyUtils: java.util.logging.Logger LOG>;

        $r14 = newarray (java.lang.Object)[0];

        specialinvoke $r13.<org.apache.cxf.common.i18n.Message: void <init>(java.lang.String,java.util.logging.Logger,java.lang.Object[])>("INCOMPATIBLE_HTTPSERVERPOLICY_ASSERTIONS", $r15, $r14);

        specialinvoke $r12.<org.apache.cxf.ws.policy.PolicyException: void <init>(org.apache.cxf.common.i18n.Message)>($r13);

        throw $r12;

     label6:
        return r19;
    }

    public static org.apache.cxf.transports.http.configuration.HTTPClientPolicy getClient(org.apache.cxf.ws.policy.PolicyEngine, org.apache.cxf.service.model.EndpointInfo, org.apache.cxf.transport.Conduit)
    {
        org.apache.cxf.ws.policy.PolicyException $r16;
        org.apache.cxf.ws.policy.builder.jaxb.JaxbAssertion $r10;
        java.lang.Object[] $r18;
        org.apache.cxf.ws.policy.PolicyEngine r0;
        org.apache.cxf.transport.Conduit r2;
        org.apache.cxf.common.i18n.Message $r17;
        java.util.logging.Level $r14;
        boolean $z0, $z1;
        org.apache.cxf.service.model.EndpointInfo r1;
        java.util.Iterator $r5;
        java.util.Collection $r4;
        org.apache.neethi.Assertion r7;
        java.util.logging.Logger $r15, $r19;
        org.apache.cxf.ws.policy.EndpointPolicy $r3;
        java.lang.Object $r6, $r11;
        javax.xml.namespace.QName $r8, $r9;
        org.apache.cxf.transports.http.configuration.HTTPClientPolicy r12, $r13, r20;

        r0 := @parameter0: org.apache.cxf.ws.policy.PolicyEngine;

        r1 := @parameter1: org.apache.cxf.service.model.EndpointInfo;

        r2 := @parameter2: org.apache.cxf.transport.Conduit;

        $r3 = interfaceinvoke r0.<org.apache.cxf.ws.policy.PolicyEngine: org.apache.cxf.ws.policy.EndpointPolicy getClientEndpointPolicy(org.apache.cxf.service.model.EndpointInfo,org.apache.cxf.transport.Conduit)>(r1, r2);

        $r4 = interfaceinvoke $r3.<org.apache.cxf.ws.policy.EndpointPolicy: java.util.Collection getChosenAlternative()>();

        r20 = null;

        $r5 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (org.apache.neethi.Assertion) $r6;

        $r8 = <org.apache.cxf.transport.http.policy.PolicyUtils: javax.xml.namespace.QName HTTPCLIENTPOLICY_ASSERTION_QNAME>;

        $r9 = interfaceinvoke r7.<org.apache.neethi.Assertion: javax.xml.namespace.QName getName()>();

        $z1 = virtualinvoke $r8.<javax.xml.namespace.QName: boolean equals(java.lang.Object)>($r9);

        if $z1 == 0 goto label3;

        $r10 = staticinvoke <org.apache.cxf.ws.policy.builder.jaxb.JaxbAssertion: org.apache.cxf.ws.policy.builder.jaxb.JaxbAssertion cast(org.apache.neethi.Assertion,java.lang.Class)>(r7, class "Lorg/apache/cxf/transports/http/configuration/HTTPClientPolicy;");

        $r11 = virtualinvoke $r10.<org.apache.cxf.ws.policy.builder.jaxb.JaxbAssertion: java.lang.Object getData()>();

        r12 = (org.apache.cxf.transports.http.configuration.HTTPClientPolicy) $r11;

        if null != r20 goto label2;

        r20 = r12;

        goto label3;

     label2:
        $r13 = staticinvoke <org.apache.cxf.transport.http.policy.PolicyUtils: org.apache.cxf.transports.http.configuration.HTTPClientPolicy intersect(org.apache.cxf.transports.http.configuration.HTTPClientPolicy,org.apache.cxf.transports.http.configuration.HTTPClientPolicy)>(r20, r12);

        r20 = $r13;

        if null != $r13 goto label3;

        $r15 = <org.apache.cxf.transport.http.policy.PolicyUtils: java.util.logging.Logger LOG>;

        $r14 = <java.util.logging.Level: java.util.logging.Level SEVERE>;

        staticinvoke <org.apache.cxf.common.logging.LogUtils: void log(java.util.logging.Logger,java.util.logging.Level,java.lang.String)>($r15, $r14, "INCOMPATIBLE_HTTPCLIENTPOLICY_ASSERTIONS");

        $r16 = new org.apache.cxf.ws.policy.PolicyException;

        $r17 = new org.apache.cxf.common.i18n.Message;

        $r19 = <org.apache.cxf.transport.http.policy.PolicyUtils: java.util.logging.Logger LOG>;

        $r18 = newarray (java.lang.Object)[0];

        specialinvoke $r17.<org.apache.cxf.common.i18n.Message: void <init>(java.lang.String,java.util.logging.Logger,java.lang.Object[])>("INCOMPATIBLE_HTTPCLIENTPOLICY_ASSERTIONS", $r19, $r18);

        specialinvoke $r16.<org.apache.cxf.ws.policy.PolicyException: void <init>(org.apache.cxf.common.i18n.Message)>($r17);

        throw $r16;

     label3:
        goto label1;

     label4:
        return r20;
    }

    public static org.apache.cxf.transports.http.configuration.HTTPServerPolicy getServer(org.apache.cxf.ws.policy.PolicyEngine, org.apache.cxf.service.model.EndpointInfo, org.apache.cxf.transport.Destination)
    {
        org.apache.cxf.ws.policy.PolicyException $r16;
        org.apache.cxf.ws.policy.builder.jaxb.JaxbAssertion $r10;
        java.lang.Object[] $r18;
        org.apache.cxf.ws.policy.PolicyEngine r0;
        org.apache.cxf.transport.Destination r2;
        org.apache.cxf.common.i18n.Message $r17;
        java.util.logging.Level $r14;
        boolean $z0, $z1;
        org.apache.cxf.service.model.EndpointInfo r1;
        java.util.Iterator $r5;
        org.apache.cxf.transports.http.configuration.HTTPServerPolicy r12, $r13, r20;
        java.util.Collection $r4;
        org.apache.neethi.Assertion r7;
        java.util.logging.Logger $r15, $r19;
        org.apache.cxf.ws.policy.EndpointPolicy $r3;
        java.lang.Object $r6, $r11;
        javax.xml.namespace.QName $r8, $r9;

        r0 := @parameter0: org.apache.cxf.ws.policy.PolicyEngine;

        r1 := @parameter1: org.apache.cxf.service.model.EndpointInfo;

        r2 := @parameter2: org.apache.cxf.transport.Destination;

        $r3 = interfaceinvoke r0.<org.apache.cxf.ws.policy.PolicyEngine: org.apache.cxf.ws.policy.EndpointPolicy getServerEndpointPolicy(org.apache.cxf.service.model.EndpointInfo,org.apache.cxf.transport.Destination)>(r1, r2);

        $r4 = interfaceinvoke $r3.<org.apache.cxf.ws.policy.EndpointPolicy: java.util.Collection getChosenAlternative()>();

        r20 = null;

        $r5 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (org.apache.neethi.Assertion) $r6;

        $r8 = <org.apache.cxf.transport.http.policy.PolicyUtils: javax.xml.namespace.QName HTTPSERVERPOLICY_ASSERTION_QNAME>;

        $r9 = interfaceinvoke r7.<org.apache.neethi.Assertion: javax.xml.namespace.QName getName()>();

        $z1 = virtualinvoke $r8.<javax.xml.namespace.QName: boolean equals(java.lang.Object)>($r9);

        if $z1 == 0 goto label3;

        $r10 = staticinvoke <org.apache.cxf.ws.policy.builder.jaxb.JaxbAssertion: org.apache.cxf.ws.policy.builder.jaxb.JaxbAssertion cast(org.apache.neethi.Assertion,java.lang.Class)>(r7, class "Lorg/apache/cxf/transports/http/configuration/HTTPServerPolicy;");

        $r11 = virtualinvoke $r10.<org.apache.cxf.ws.policy.builder.jaxb.JaxbAssertion: java.lang.Object getData()>();

        r12 = (org.apache.cxf.transports.http.configuration.HTTPServerPolicy) $r11;

        if null != r20 goto label2;

        r20 = r12;

        goto label3;

     label2:
        $r13 = staticinvoke <org.apache.cxf.transport.http.policy.PolicyUtils: org.apache.cxf.transports.http.configuration.HTTPServerPolicy intersect(org.apache.cxf.transports.http.configuration.HTTPServerPolicy,org.apache.cxf.transports.http.configuration.HTTPServerPolicy)>(r20, r12);

        r20 = $r13;

        if null != $r13 goto label3;

        $r15 = <org.apache.cxf.transport.http.policy.PolicyUtils: java.util.logging.Logger LOG>;

        $r14 = <java.util.logging.Level: java.util.logging.Level SEVERE>;

        staticinvoke <org.apache.cxf.common.logging.LogUtils: void log(java.util.logging.Logger,java.util.logging.Level,java.lang.String)>($r15, $r14, "INCOMPATIBLE_HTTPSERVERPOLICY_ASSERTIONS");

        $r16 = new org.apache.cxf.ws.policy.PolicyException;

        $r17 = new org.apache.cxf.common.i18n.Message;

        $r19 = <org.apache.cxf.transport.http.policy.PolicyUtils: java.util.logging.Logger LOG>;

        $r18 = newarray (java.lang.Object)[0];

        specialinvoke $r17.<org.apache.cxf.common.i18n.Message: void <init>(java.lang.String,java.util.logging.Logger,java.lang.Object[])>("INCOMPATIBLE_HTTPSERVERPOLICY_ASSERTIONS", $r19, $r18);

        specialinvoke $r16.<org.apache.cxf.ws.policy.PolicyException: void <init>(org.apache.cxf.common.i18n.Message)>($r17);

        throw $r16;

     label3:
        goto label1;

     label4:
        return r20;
    }

    public static void assertClientPolicy(org.apache.cxf.message.Message, org.apache.cxf.transports.http.configuration.HTTPClientPolicy)
    {
        org.apache.cxf.ws.policy.builder.jaxb.JaxbAssertion $r12;
        org.apache.cxf.ws.policy.AssertionInfoMap $r15;
        int $i0;
        boolean $z0, $z1, $z2, $z3;
        org.apache.cxf.ws.policy.AssertionInfo r17, r18;
        java.util.Iterator $r7, $r9;
        org.apache.cxf.message.Message r0;
        java.util.Collection r6;
        org.apache.neethi.Assertion $r11;
        java.lang.Object $r1, $r3, $r5, $r8, $r10, $r13;
        org.apache.cxf.transports.http.configuration.HTTPClientPolicy r2, r14, r16;
        javax.xml.namespace.QName $r4;

        r0 := @parameter0: org.apache.cxf.message.Message;

        r16 := @parameter1: org.apache.cxf.transports.http.configuration.HTTPClientPolicy;

        $r1 = interfaceinvoke r0.<org.apache.cxf.message.Message: java.lang.Object get(java.lang.Class)>(class "Lorg/apache/cxf/transports/http/configuration/HTTPClientPolicy;");

        r2 = (org.apache.cxf.transports.http.configuration.HTTPClientPolicy) $r1;

        if r2 == null goto label01;

        r16 = staticinvoke <org.apache.cxf.transport.http.policy.PolicyUtils: org.apache.cxf.transports.http.configuration.HTTPClientPolicy intersect(org.apache.cxf.transports.http.configuration.HTTPClientPolicy,org.apache.cxf.transports.http.configuration.HTTPClientPolicy)>(r2, r16);

     label01:
        $r3 = interfaceinvoke r0.<org.apache.cxf.message.Message: java.lang.Object get(java.lang.Class)>(class "Lorg/apache/cxf/ws/policy/AssertionInfoMap;");

        $r15 = (org.apache.cxf.ws.policy.AssertionInfoMap) $r3;

        if null != $r15 goto label02;

        return;

     label02:
        $r4 = <org.apache.cxf.transport.http.policy.PolicyUtils: javax.xml.namespace.QName HTTPCLIENTPOLICY_ASSERTION_QNAME>;

        $r5 = virtualinvoke $r15.<org.apache.cxf.ws.policy.AssertionInfoMap: java.lang.Object get(java.lang.Object)>($r4);

        r6 = (java.util.Collection) $r5;

        if null == r6 goto label03;

        $i0 = interfaceinvoke r6.<java.util.Collection: int size()>();

        if $i0 != 0 goto label04;

     label03:
        return;

     label04:
        $z0 = staticinvoke <org.apache.cxf.message.MessageUtils: boolean isOutbound(org.apache.cxf.message.Message)>(r0);

        if $z0 == 0 goto label08;

        $r9 = interfaceinvoke r6.<java.util.Collection: java.util.Iterator iterator()>();

     label05:
        $z2 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label07;

        $r10 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        r17 = (org.apache.cxf.ws.policy.AssertionInfo) $r10;

        $r11 = virtualinvoke r17.<org.apache.cxf.ws.policy.AssertionInfo: org.apache.neethi.Assertion getAssertion()>();

        $r12 = staticinvoke <org.apache.cxf.ws.policy.builder.jaxb.JaxbAssertion: org.apache.cxf.ws.policy.builder.jaxb.JaxbAssertion cast(org.apache.neethi.Assertion,java.lang.Class)>($r11, class "Lorg/apache/cxf/transports/http/configuration/HTTPClientPolicy;");

        $r13 = virtualinvoke $r12.<org.apache.cxf.ws.policy.builder.jaxb.JaxbAssertion: java.lang.Object getData()>();

        r14 = (org.apache.cxf.transports.http.configuration.HTTPClientPolicy) $r13;

        $z3 = staticinvoke <org.apache.cxf.transport.http.policy.PolicyUtils: boolean compatible(org.apache.cxf.transports.http.configuration.HTTPClientPolicy,org.apache.cxf.transports.http.configuration.HTTPClientPolicy)>(r14, r16);

        if $z3 == 0 goto label06;

        virtualinvoke r17.<org.apache.cxf.ws.policy.AssertionInfo: void setAsserted(boolean)>(1);

     label06:
        goto label05;

     label07:
        goto label10;

     label08:
        $r7 = interfaceinvoke r6.<java.util.Collection: java.util.Iterator iterator()>();

     label09:
        $z1 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label10;

        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r18 = (org.apache.cxf.ws.policy.AssertionInfo) $r8;

        virtualinvoke r18.<org.apache.cxf.ws.policy.AssertionInfo: void setAsserted(boolean)>(1);

        goto label09;

     label10:
        return;
    }

    public static void assertServerPolicy(org.apache.cxf.message.Message, org.apache.cxf.transports.http.configuration.HTTPServerPolicy)
    {
        org.apache.cxf.ws.policy.builder.jaxb.JaxbAssertion $r9;
        org.apache.cxf.ws.policy.AssertionInfoMap r2;
        int $i0;
        boolean $z0, $z1, $z2, $z3;
        org.apache.cxf.ws.policy.AssertionInfo r15, r16;
        java.util.Iterator $r6, $r13;
        org.apache.cxf.message.Message r0;
        org.apache.cxf.transports.http.configuration.HTTPServerPolicy r11, r12;
        java.util.Collection r5;
        org.apache.neethi.Assertion $r8;
        java.lang.Object $r1, $r4, $r7, $r10, $r14;
        javax.xml.namespace.QName $r3;

        r0 := @parameter0: org.apache.cxf.message.Message;

        r12 := @parameter1: org.apache.cxf.transports.http.configuration.HTTPServerPolicy;

        $r1 = interfaceinvoke r0.<org.apache.cxf.message.Message: java.lang.Object get(java.lang.Class)>(class "Lorg/apache/cxf/ws/policy/AssertionInfoMap;");

        r2 = (org.apache.cxf.ws.policy.AssertionInfoMap) $r1;

        if null != r2 goto label1;

        return;

     label1:
        $r3 = <org.apache.cxf.transport.http.policy.PolicyUtils: javax.xml.namespace.QName HTTPSERVERPOLICY_ASSERTION_QNAME>;

        $r4 = virtualinvoke r2.<org.apache.cxf.ws.policy.AssertionInfoMap: java.lang.Object get(java.lang.Object)>($r3);

        r5 = (java.util.Collection) $r4;

        if null == r5 goto label2;

        $i0 = interfaceinvoke r5.<java.util.Collection: int size()>();

        if $i0 != 0 goto label3;

     label2:
        return;

     label3:
        $z0 = staticinvoke <org.apache.cxf.message.MessageUtils: boolean isOutbound(org.apache.cxf.message.Message)>(r0);

        if $z0 == 0 goto label6;

        $r13 = interfaceinvoke r5.<java.util.Collection: java.util.Iterator iterator()>();

     label4:
        $z3 = interfaceinvoke $r13.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label5;

        $r14 = interfaceinvoke $r13.<java.util.Iterator: java.lang.Object next()>();

        r15 = (org.apache.cxf.ws.policy.AssertionInfo) $r14;

        virtualinvoke r15.<org.apache.cxf.ws.policy.AssertionInfo: void setAsserted(boolean)>(1);

        goto label4;

     label5:
        goto label9;

     label6:
        $r6 = interfaceinvoke r5.<java.util.Collection: java.util.Iterator iterator()>();

     label7:
        $z1 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label9;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r16 = (org.apache.cxf.ws.policy.AssertionInfo) $r7;

        $r8 = virtualinvoke r16.<org.apache.cxf.ws.policy.AssertionInfo: org.apache.neethi.Assertion getAssertion()>();

        $r9 = staticinvoke <org.apache.cxf.ws.policy.builder.jaxb.JaxbAssertion: org.apache.cxf.ws.policy.builder.jaxb.JaxbAssertion cast(org.apache.neethi.Assertion,java.lang.Class)>($r8, class "Lorg/apache/cxf/transports/http/configuration/HTTPServerPolicy;");

        $r10 = virtualinvoke $r9.<org.apache.cxf.ws.policy.builder.jaxb.JaxbAssertion: java.lang.Object getData()>();

        r11 = (org.apache.cxf.transports.http.configuration.HTTPServerPolicy) $r10;

        $z2 = staticinvoke <org.apache.cxf.transport.http.policy.PolicyUtils: boolean equals(org.apache.cxf.transports.http.configuration.HTTPServerPolicy,org.apache.cxf.transports.http.configuration.HTTPServerPolicy)>(r11, r12);

        if $z2 == 0 goto label8;

        virtualinvoke r16.<org.apache.cxf.ws.policy.AssertionInfo: void setAsserted(boolean)>(1);

     label8:
        goto label7;

     label9:
        return;
    }

    public static boolean compatible(org.apache.cxf.transports.http.configuration.HTTPClientPolicy, org.apache.cxf.transports.http.configuration.HTTPClientPolicy)
    {
        org.apache.cxf.transports.http.configuration.ConnectionType $r16, $r18;
        java.lang.String $r2, $r3, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r17, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z21, $z22, $z23, $z24, $z25, $z26, $z27, $z28, $z29, $z30, $z31, $z32, z33, $z34, $z35, $z36, $z37, $z38, $z39, $z40;
        org.apache.cxf.transports.http.configuration.ProxyServerType $r4, $r5;
        int $i0, $i1;
        org.apache.cxf.transports.http.configuration.HTTPClientPolicy r0, r1;

        r0 := @parameter0: org.apache.cxf.transports.http.configuration.HTTPClientPolicy;

        r1 := @parameter1: org.apache.cxf.transports.http.configuration.HTTPClientPolicy;

        if r0 == r1 goto label01;

        $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label02;

     label01:
        return 1;

     label02:
        z33 = 1;

        if 1 == 0 goto label03;

        $r28 = virtualinvoke r0.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: java.lang.String getAccept()>();

        $r29 = virtualinvoke r1.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: java.lang.String getAccept()>();

        $z32 = staticinvoke <org.apache.cxf.transport.http.policy.PolicyUtils: boolean compatible(java.lang.String,java.lang.String)>($r28, $r29);

        z33 = 1 & $z32;

     label03:
        if z33 == 0 goto label04;

        $r26 = virtualinvoke r0.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: java.lang.String getAcceptEncoding()>();

        $r27 = virtualinvoke r1.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: java.lang.String getAcceptEncoding()>();

        $z31 = staticinvoke <org.apache.cxf.transport.http.policy.PolicyUtils: boolean compatible(java.lang.String,java.lang.String)>($r26, $r27);

        z33 = z33 & $z31;

     label04:
        if z33 == 0 goto label05;

        $r24 = virtualinvoke r0.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: java.lang.String getAcceptLanguage()>();

        $r25 = virtualinvoke r1.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: java.lang.String getAcceptLanguage()>();

        $z30 = staticinvoke <org.apache.cxf.transport.http.policy.PolicyUtils: boolean compatible(java.lang.String,java.lang.String)>($r24, $r25);

        z33 = z33 & $z30;

     label05:
        if z33 == 0 goto label06;

        $r22 = virtualinvoke r0.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: java.lang.String getBrowserType()>();

        $r23 = virtualinvoke r1.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: java.lang.String getBrowserType()>();

        $z29 = staticinvoke <org.apache.cxf.transport.http.policy.PolicyUtils: boolean compatible(java.lang.String,java.lang.String)>($r22, $r23);

        z33 = z33 & $z29;

     label06:
        if z33 == 0 goto label10;

        $z28 = z33;

        $z25 = virtualinvoke r0.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: boolean isSetCacheControl()>();

        if $z25 == 0 goto label07;

        $z26 = virtualinvoke r1.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: boolean isSetCacheControl()>();

        if $z26 == 0 goto label07;

        $r20 = virtualinvoke r0.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: java.lang.String getCacheControl()>();

        $r21 = virtualinvoke r1.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: java.lang.String getCacheControl()>();

        $z27 = virtualinvoke $r20.<java.lang.String: boolean equals(java.lang.Object)>($r21);

        if $z27 == 0 goto label08;

     label07:
        $z34 = 1;

        goto label09;

     label08:
        $z34 = 0;

     label09:
        z33 = $z28 & $z34;

     label10:
        if z33 == 0 goto label14;

        $z22 = virtualinvoke r0.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: boolean isSetConnection()>();

        if $z22 == 0 goto label11;

        $z23 = virtualinvoke r1.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: boolean isSetConnection()>();

        if $z23 == 0 goto label11;

        $r16 = virtualinvoke r0.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: org.apache.cxf.transports.http.configuration.ConnectionType getConnection()>();

        $r17 = virtualinvoke $r16.<org.apache.cxf.transports.http.configuration.ConnectionType: java.lang.String value()>();

        $r18 = virtualinvoke r1.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: org.apache.cxf.transports.http.configuration.ConnectionType getConnection()>();

        $r19 = virtualinvoke $r18.<org.apache.cxf.transports.http.configuration.ConnectionType: java.lang.String value()>();

        $z24 = virtualinvoke $r17.<java.lang.String: boolean equals(java.lang.Object)>($r19);

        if $z24 == 0 goto label12;

     label11:
        $z35 = 1;

        goto label13;

     label12:
        $z35 = 0;

     label13:
        z33 = $z35;

     label14:
        if z33 == 0 goto label18;

        $z19 = virtualinvoke r0.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: boolean isSetContentType()>();

        if $z19 == 0 goto label15;

        $z20 = virtualinvoke r1.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: boolean isSetContentType()>();

        if $z20 == 0 goto label15;

        $r14 = virtualinvoke r0.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: java.lang.String getContentType()>();

        $r15 = virtualinvoke r1.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: java.lang.String getContentType()>();

        $z21 = virtualinvoke $r14.<java.lang.String: boolean equals(java.lang.Object)>($r15);

        if $z21 == 0 goto label16;

     label15:
        $z36 = 1;

        goto label17;

     label16:
        $z36 = 0;

     label17:
        z33 = $z36;

     label18:
        if z33 == 0 goto label19;

        $r12 = virtualinvoke r0.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: java.lang.String getCookie()>();

        $r13 = virtualinvoke r1.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: java.lang.String getCookie()>();

        $z18 = staticinvoke <org.apache.cxf.transport.http.policy.PolicyUtils: boolean compatible(java.lang.String,java.lang.String)>($r12, $r13);

        z33 = z33 & $z18;

     label19:
        if z33 == 0 goto label20;

        $r10 = virtualinvoke r0.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: java.lang.String getDecoupledEndpoint()>();

        $r11 = virtualinvoke r1.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: java.lang.String getDecoupledEndpoint()>();

        $z17 = staticinvoke <org.apache.cxf.transport.http.policy.PolicyUtils: boolean compatible(java.lang.String,java.lang.String)>($r10, $r11);

        z33 = z33 & $z17;

     label20:
        if z33 == 0 goto label21;

        $r8 = virtualinvoke r0.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: java.lang.String getHost()>();

        $r9 = virtualinvoke r1.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: java.lang.String getHost()>();

        $z16 = staticinvoke <org.apache.cxf.transport.http.policy.PolicyUtils: boolean compatible(java.lang.String,java.lang.String)>($r8, $r9);

        z33 = z33 & $z16;

     label21:
        if z33 == 0 goto label22;

        $r6 = virtualinvoke r0.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: java.lang.String getProxyServer()>();

        $r7 = virtualinvoke r1.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: java.lang.String getProxyServer()>();

        $z15 = staticinvoke <org.apache.cxf.transport.http.policy.PolicyUtils: boolean compatible(java.lang.String,java.lang.String)>($r6, $r7);

        z33 = z33 & $z15;

     label22:
        if z33 == 0 goto label26;

        $z14 = z33;

        $z12 = virtualinvoke r0.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: boolean isSetProxyServerPort()>();

        if $z12 == 0 goto label23;

        $z13 = virtualinvoke r1.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: boolean isSetProxyServerPort()>();

        if $z13 == 0 goto label23;

        $i0 = virtualinvoke r0.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: int getProxyServerPort()>();

        $i1 = virtualinvoke r1.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: int getProxyServerPort()>();

        if $i0 != $i1 goto label24;

     label23:
        $z37 = 1;

        goto label25;

     label24:
        $z37 = 0;

     label25:
        z33 = $z14 & $z37;

     label26:
        if z33 == 0 goto label30;

        $z11 = z33;

        $z8 = virtualinvoke r0.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: boolean isSetProxyServerType()>();

        if $z8 == 0 goto label27;

        $z9 = virtualinvoke r1.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: boolean isSetProxyServerType()>();

        if $z9 == 0 goto label27;

        $r4 = virtualinvoke r0.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: org.apache.cxf.transports.http.configuration.ProxyServerType getProxyServerType()>();

        $r5 = virtualinvoke r1.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: org.apache.cxf.transports.http.configuration.ProxyServerType getProxyServerType()>();

        $z10 = virtualinvoke $r4.<org.apache.cxf.transports.http.configuration.ProxyServerType: boolean equals(java.lang.Object)>($r5);

        if $z10 == 0 goto label28;

     label27:
        $z38 = 1;

        goto label29;

     label28:
        $z38 = 0;

     label29:
        z33 = $z11 & $z38;

     label30:
        if z33 == 0 goto label31;

        $r2 = virtualinvoke r0.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: java.lang.String getReferer()>();

        $r3 = virtualinvoke r1.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: java.lang.String getReferer()>();

        $z7 = staticinvoke <org.apache.cxf.transport.http.policy.PolicyUtils: boolean compatible(java.lang.String,java.lang.String)>($r2, $r3);

        z33 = z33 & $z7;

     label31:
        if z33 == 0 goto label34;

        $z6 = z33;

        $z4 = virtualinvoke r0.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: boolean isAllowChunking()>();

        $z5 = virtualinvoke r1.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: boolean isAllowChunking()>();

        if $z4 != $z5 goto label32;

        $z39 = 1;

        goto label33;

     label32:
        $z39 = 0;

     label33:
        z33 = $z6 & $z39;

     label34:
        if z33 == 0 goto label37;

        $z3 = z33;

        $z1 = virtualinvoke r0.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: boolean isAutoRedirect()>();

        $z2 = virtualinvoke r1.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: boolean isAutoRedirect()>();

        if $z1 != $z2 goto label35;

        $z40 = 1;

        goto label36;

     label35:
        $z40 = 0;

     label36:
        z33 = $z3 & $z40;

     label37:
        return z33;
    }

    public static org.apache.cxf.transports.http.configuration.HTTPClientPolicy intersect(org.apache.cxf.transports.http.configuration.HTTPClientPolicy, org.apache.cxf.transports.http.configuration.HTTPClientPolicy)
    {
        long $l0, $l1, $l2, $l3, $l4, $l5;
        org.apache.cxf.transports.http.configuration.ConnectionType $r16, $r17;
        java.lang.String $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r14, $r15, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r30, $r31, $r32, $r33, $r34, $r35, $r36, $r37;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z21, $z22;
        org.apache.cxf.transports.http.configuration.ProxyServerType $r12, $r13;
        int $i6, $i7;
        org.apache.cxf.transports.http.configuration.HTTPClientPolicy r0, r1, $r2;

        r0 := @parameter0: org.apache.cxf.transports.http.configuration.HTTPClientPolicy;

        r1 := @parameter1: org.apache.cxf.transports.http.configuration.HTTPClientPolicy;

        $z0 = staticinvoke <org.apache.cxf.transport.http.policy.PolicyUtils: boolean compatible(org.apache.cxf.transports.http.configuration.HTTPClientPolicy,org.apache.cxf.transports.http.configuration.HTTPClientPolicy)>(r0, r1);

        if $z0 != 0 goto label01;

        return null;

     label01:
        $r2 = new org.apache.cxf.transports.http.configuration.HTTPClientPolicy;

        specialinvoke $r2.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: void <init>()>();

        $r3 = virtualinvoke r0.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: java.lang.String getAccept()>();

        $r4 = virtualinvoke r1.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: java.lang.String getAccept()>();

        $r5 = staticinvoke <org.apache.cxf.transport.http.policy.PolicyUtils: java.lang.String combine(java.lang.String,java.lang.String)>($r3, $r4);

        virtualinvoke $r2.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: void setAccept(java.lang.String)>($r5);

        $r6 = virtualinvoke r0.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: java.lang.String getAcceptEncoding()>();

        $r7 = virtualinvoke r1.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: java.lang.String getAcceptEncoding()>();

        $r8 = staticinvoke <org.apache.cxf.transport.http.policy.PolicyUtils: java.lang.String combine(java.lang.String,java.lang.String)>($r6, $r7);

        virtualinvoke $r2.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: void setAcceptEncoding(java.lang.String)>($r8);

        $r9 = virtualinvoke r0.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: java.lang.String getAcceptLanguage()>();

        $r10 = virtualinvoke r1.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: java.lang.String getAcceptLanguage()>();

        $r11 = staticinvoke <org.apache.cxf.transport.http.policy.PolicyUtils: java.lang.String combine(java.lang.String,java.lang.String)>($r9, $r10);

        virtualinvoke $r2.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: void setAcceptLanguage(java.lang.String)>($r11);

        $z1 = virtualinvoke r0.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: boolean isSetAllowChunking()>();

        if $z1 == 0 goto label02;

        $z14 = virtualinvoke r0.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: boolean isAllowChunking()>();

        virtualinvoke $r2.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: void setAllowChunking(boolean)>($z14);

        goto label03;

     label02:
        $z2 = virtualinvoke r1.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: boolean isSetAllowChunking()>();

        if $z2 == 0 goto label03;

        $z13 = virtualinvoke r1.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: boolean isAllowChunking()>();

        virtualinvoke $r2.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: void setAllowChunking(boolean)>($z13);

     label03:
        $z15 = virtualinvoke r0.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: boolean isSetAutoRedirect()>();

        if $z15 == 0 goto label04;

        $z12 = virtualinvoke r0.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: boolean isAutoRedirect()>();

        virtualinvoke $r2.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: void setAutoRedirect(boolean)>($z12);

        goto label05;

     label04:
        $z3 = virtualinvoke r1.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: boolean isSetAutoRedirect()>();

        if $z3 == 0 goto label05;

        $z11 = virtualinvoke r1.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: boolean isAutoRedirect()>();

        virtualinvoke $r2.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: void setAutoRedirect(boolean)>($z11);

     label05:
        $r20 = virtualinvoke r0.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: java.lang.String getBrowserType()>();

        $r21 = virtualinvoke r1.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: java.lang.String getBrowserType()>();

        $r22 = staticinvoke <org.apache.cxf.transport.http.policy.PolicyUtils: java.lang.String combine(java.lang.String,java.lang.String)>($r20, $r21);

        virtualinvoke $r2.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: void setBrowserType(java.lang.String)>($r22);

        $z16 = virtualinvoke r0.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: boolean isSetCacheControl()>();

        if $z16 == 0 goto label06;

        $r19 = virtualinvoke r0.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: java.lang.String getCacheControl()>();

        virtualinvoke $r2.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: void setCacheControl(java.lang.String)>($r19);

        goto label07;

     label06:
        $z4 = virtualinvoke r1.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: boolean isSetCacheControl()>();

        if $z4 == 0 goto label07;

        $r18 = virtualinvoke r1.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: java.lang.String getCacheControl()>();

        virtualinvoke $r2.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: void setCacheControl(java.lang.String)>($r18);

     label07:
        $z17 = virtualinvoke r0.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: boolean isSetConnection()>();

        if $z17 == 0 goto label08;

        $r17 = virtualinvoke r0.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: org.apache.cxf.transports.http.configuration.ConnectionType getConnection()>();

        virtualinvoke $r2.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: void setConnection(org.apache.cxf.transports.http.configuration.ConnectionType)>($r17);

        goto label09;

     label08:
        $z5 = virtualinvoke r1.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: boolean isSetConnection()>();

        if $z5 == 0 goto label09;

        $r16 = virtualinvoke r1.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: org.apache.cxf.transports.http.configuration.ConnectionType getConnection()>();

        virtualinvoke $r2.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: void setConnection(org.apache.cxf.transports.http.configuration.ConnectionType)>($r16);

     label09:
        $z18 = virtualinvoke r0.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: boolean isSetContentType()>();

        if $z18 == 0 goto label10;

        $r15 = virtualinvoke r0.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: java.lang.String getContentType()>();

        virtualinvoke $r2.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: void setContentType(java.lang.String)>($r15);

        goto label11;

     label10:
        $z6 = virtualinvoke r1.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: boolean isSetContentType()>();

        if $z6 == 0 goto label11;

        $r14 = virtualinvoke r1.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: java.lang.String getContentType()>();

        virtualinvoke $r2.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: void setContentType(java.lang.String)>($r14);

     label11:
        $r23 = virtualinvoke r0.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: java.lang.String getCookie()>();

        $r24 = virtualinvoke r1.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: java.lang.String getCookie()>();

        $r25 = staticinvoke <org.apache.cxf.transport.http.policy.PolicyUtils: java.lang.String combine(java.lang.String,java.lang.String)>($r23, $r24);

        virtualinvoke $r2.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: void setCookie(java.lang.String)>($r25);

        $r26 = virtualinvoke r0.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: java.lang.String getDecoupledEndpoint()>();

        $r27 = virtualinvoke r1.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: java.lang.String getDecoupledEndpoint()>();

        $r28 = staticinvoke <org.apache.cxf.transport.http.policy.PolicyUtils: java.lang.String combine(java.lang.String,java.lang.String)>($r26, $r27);

        virtualinvoke $r2.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: void setDecoupledEndpoint(java.lang.String)>($r28);

        $r29 = virtualinvoke r0.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: java.lang.String getHost()>();

        $r30 = virtualinvoke r1.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: java.lang.String getHost()>();

        $r31 = staticinvoke <org.apache.cxf.transport.http.policy.PolicyUtils: java.lang.String combine(java.lang.String,java.lang.String)>($r29, $r30);

        virtualinvoke $r2.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: void setHost(java.lang.String)>($r31);

        $r32 = virtualinvoke r0.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: java.lang.String getProxyServer()>();

        $r33 = virtualinvoke r1.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: java.lang.String getProxyServer()>();

        $r34 = staticinvoke <org.apache.cxf.transport.http.policy.PolicyUtils: java.lang.String combine(java.lang.String,java.lang.String)>($r32, $r33);

        virtualinvoke $r2.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: void setProxyServer(java.lang.String)>($r34);

        $z19 = virtualinvoke r0.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: boolean isSetProxyServerPort()>();

        if $z19 == 0 goto label12;

        $i7 = virtualinvoke r0.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: int getProxyServerPort()>();

        virtualinvoke $r2.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: void setProxyServerPort(int)>($i7);

        goto label13;

     label12:
        $z7 = virtualinvoke r1.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: boolean isSetProxyServerPort()>();

        if $z7 == 0 goto label13;

        $i6 = virtualinvoke r1.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: int getProxyServerPort()>();

        virtualinvoke $r2.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: void setProxyServerPort(int)>($i6);

     label13:
        $z20 = virtualinvoke r0.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: boolean isSetProxyServerType()>();

        if $z20 == 0 goto label14;

        $r13 = virtualinvoke r0.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: org.apache.cxf.transports.http.configuration.ProxyServerType getProxyServerType()>();

        virtualinvoke $r2.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: void setProxyServerType(org.apache.cxf.transports.http.configuration.ProxyServerType)>($r13);

        goto label15;

     label14:
        $z8 = virtualinvoke r1.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: boolean isSetProxyServerType()>();

        if $z8 == 0 goto label15;

        $r12 = virtualinvoke r1.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: org.apache.cxf.transports.http.configuration.ProxyServerType getProxyServerType()>();

        virtualinvoke $r2.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: void setProxyServerType(org.apache.cxf.transports.http.configuration.ProxyServerType)>($r12);

     label15:
        $r35 = virtualinvoke r0.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: java.lang.String getReferer()>();

        $r36 = virtualinvoke r1.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: java.lang.String getReferer()>();

        $r37 = staticinvoke <org.apache.cxf.transport.http.policy.PolicyUtils: java.lang.String combine(java.lang.String,java.lang.String)>($r35, $r36);

        virtualinvoke $r2.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: void setReferer(java.lang.String)>($r37);

        $z21 = virtualinvoke r0.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: boolean isSetConnectionTimeout()>();

        if $z21 != 0 goto label16;

        $z10 = virtualinvoke r1.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: boolean isSetConnectionTimeout()>();

        if $z10 == 0 goto label17;

     label16:
        $l0 = virtualinvoke r0.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: long getConnectionTimeout()>();

        $l1 = virtualinvoke r1.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: long getConnectionTimeout()>();

        $l2 = staticinvoke <java.lang.Math: long min(long,long)>($l0, $l1);

        virtualinvoke $r2.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: void setConnectionTimeout(long)>($l2);

     label17:
        $z22 = virtualinvoke r0.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: boolean isSetReceiveTimeout()>();

        if $z22 != 0 goto label18;

        $z9 = virtualinvoke r1.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: boolean isSetReceiveTimeout()>();

        if $z9 == 0 goto label19;

     label18:
        $l3 = virtualinvoke r0.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: long getReceiveTimeout()>();

        $l4 = virtualinvoke r1.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: long getReceiveTimeout()>();

        $l5 = staticinvoke <java.lang.Math: long min(long,long)>($l3, $l4);

        virtualinvoke $r2.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: void setReceiveTimeout(long)>($l5);

     label19:
        return $r2;
    }

    public static boolean equals(org.apache.cxf.transports.http.configuration.HTTPClientPolicy, org.apache.cxf.transports.http.configuration.HTTPClientPolicy)
    {
        byte $b2, $b7;
        long $l0, $l1, $l5, $l6;
        org.apache.cxf.transports.http.configuration.ConnectionType $r13, $r15;
        java.lang.String $r2, $r3, $r4, $r5, $r6, $r8, $r10, $r11, $r12, $r14, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r30, $r31, $r32, $r33;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z21, $z22, $z23, $z24;
        org.apache.cxf.transports.http.configuration.ProxyServerType $r7, $r9;
        int $i3, $i4;
        org.apache.cxf.transports.http.configuration.HTTPClientPolicy r0, r1;

        r0 := @parameter0: org.apache.cxf.transports.http.configuration.HTTPClientPolicy;

        r1 := @parameter1: org.apache.cxf.transports.http.configuration.HTTPClientPolicy;

        if r0 != r1 goto label01;

        return 1;

     label01:
        $z0 = virtualinvoke r0.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: boolean isAllowChunking()>();

        $z1 = virtualinvoke r1.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: boolean isAllowChunking()>();

        if $z0 != $z1 goto label02;

        $z13 = virtualinvoke r0.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: boolean isAutoRedirect()>();

        $z14 = virtualinvoke r1.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: boolean isAutoRedirect()>();

        if $z13 != $z14 goto label02;

        $r26 = virtualinvoke r0.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: java.lang.String getAccept()>();

        $r27 = virtualinvoke r1.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: java.lang.String getAccept()>();

        $z15 = staticinvoke <org.apache.cxf.transport.http.policy.PolicyUtils: boolean equals(java.lang.String,java.lang.String)>($r26, $r27);

        if $z15 == 0 goto label02;

        $r28 = virtualinvoke r0.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: java.lang.String getAcceptEncoding()>();

        $r29 = virtualinvoke r1.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: java.lang.String getAcceptEncoding()>();

        $z16 = staticinvoke <org.apache.cxf.transport.http.policy.PolicyUtils: boolean equals(java.lang.String,java.lang.String)>($r28, $r29);

        if $z16 == 0 goto label02;

        $r30 = virtualinvoke r0.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: java.lang.String getAcceptLanguage()>();

        $r31 = virtualinvoke r1.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: java.lang.String getAcceptLanguage()>();

        $z17 = staticinvoke <org.apache.cxf.transport.http.policy.PolicyUtils: boolean equals(java.lang.String,java.lang.String)>($r30, $r31);

        if $z17 == 0 goto label02;

        $r32 = virtualinvoke r0.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: java.lang.String getBrowserType()>();

        $r33 = virtualinvoke r1.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: java.lang.String getBrowserType()>();

        $z18 = staticinvoke <org.apache.cxf.transport.http.policy.PolicyUtils: boolean equals(java.lang.String,java.lang.String)>($r32, $r33);

        if $z18 == 0 goto label02;

        $z19 = 1;

        goto label03;

     label02:
        $z19 = 0;

     label03:
        $z20 = 1 & $z19;

        if $z20 != 0 goto label04;

        return 0;

     label04:
        $r2 = virtualinvoke r0.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: java.lang.String getCacheControl()>();

        if $r2 != null goto label05;

        $r25 = virtualinvoke r1.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: java.lang.String getCacheControl()>();

        if $r25 != null goto label07;

        goto label06;

     label05:
        $r3 = virtualinvoke r0.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: java.lang.String getCacheControl()>();

        $r4 = virtualinvoke r1.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: java.lang.String getCacheControl()>();

        $z2 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z2 == 0 goto label07;

        $r13 = virtualinvoke r0.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: org.apache.cxf.transports.http.configuration.ConnectionType getConnection()>();

        $r14 = virtualinvoke $r13.<org.apache.cxf.transports.http.configuration.ConnectionType: java.lang.String value()>();

        $r15 = virtualinvoke r1.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: org.apache.cxf.transports.http.configuration.ConnectionType getConnection()>();

        $r16 = virtualinvoke $r15.<org.apache.cxf.transports.http.configuration.ConnectionType: java.lang.String value()>();

        $z8 = virtualinvoke $r14.<java.lang.String: boolean equals(java.lang.Object)>($r16);

        if $z8 == 0 goto label07;

     label06:
        $l5 = virtualinvoke r0.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: long getConnectionTimeout()>();

        $l6 = virtualinvoke r1.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: long getConnectionTimeout()>();

        $b7 = $l5 cmp $l6;

        if $b7 != 0 goto label07;

        $r17 = virtualinvoke r0.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: java.lang.String getContentType()>();

        $r18 = virtualinvoke r1.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: java.lang.String getContentType()>();

        $z9 = staticinvoke <org.apache.cxf.transport.http.policy.PolicyUtils: boolean equals(java.lang.String,java.lang.String)>($r17, $r18);

        if $z9 == 0 goto label07;

        $r19 = virtualinvoke r0.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: java.lang.String getCookie()>();

        $r20 = virtualinvoke r1.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: java.lang.String getCookie()>();

        $z10 = staticinvoke <org.apache.cxf.transport.http.policy.PolicyUtils: boolean equals(java.lang.String,java.lang.String)>($r19, $r20);

        if $z10 == 0 goto label07;

        $r21 = virtualinvoke r0.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: java.lang.String getDecoupledEndpoint()>();

        $r22 = virtualinvoke r1.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: java.lang.String getDecoupledEndpoint()>();

        $z11 = staticinvoke <org.apache.cxf.transport.http.policy.PolicyUtils: boolean equals(java.lang.String,java.lang.String)>($r21, $r22);

        if $z11 == 0 goto label07;

        $r23 = virtualinvoke r0.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: java.lang.String getHost()>();

        $r24 = virtualinvoke r1.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: java.lang.String getHost()>();

        $z12 = staticinvoke <org.apache.cxf.transport.http.policy.PolicyUtils: boolean equals(java.lang.String,java.lang.String)>($r23, $r24);

        if $z12 == 0 goto label07;

        $z21 = 1;

        goto label08;

     label07:
        $z21 = 0;

     label08:
        $z22 = $z20 & $z21;

        if $z22 != 0 goto label09;

        return 0;

     label09:
        $r5 = virtualinvoke r0.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: java.lang.String getProxyServer()>();

        $r6 = virtualinvoke r1.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: java.lang.String getProxyServer()>();

        $z3 = staticinvoke <org.apache.cxf.transport.http.policy.PolicyUtils: boolean equals(java.lang.String,java.lang.String)>($r5, $r6);

        if $z3 == 0 goto label12;

        $z4 = virtualinvoke r0.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: boolean isSetProxyServerPort()>();

        if $z4 == 0 goto label10;

        $i3 = virtualinvoke r0.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: int getProxyServerPort()>();

        $i4 = virtualinvoke r1.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: int getProxyServerPort()>();

        if $i3 != $i4 goto label12;

        goto label11;

     label10:
        $z5 = virtualinvoke r1.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: boolean isSetProxyServerPort()>();

        if $z5 != 0 goto label12;

     label11:
        $r7 = virtualinvoke r0.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: org.apache.cxf.transports.http.configuration.ProxyServerType getProxyServerType()>();

        $r8 = virtualinvoke $r7.<org.apache.cxf.transports.http.configuration.ProxyServerType: java.lang.String value()>();

        $r9 = virtualinvoke r1.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: org.apache.cxf.transports.http.configuration.ProxyServerType getProxyServerType()>();

        $r10 = virtualinvoke $r9.<org.apache.cxf.transports.http.configuration.ProxyServerType: java.lang.String value()>();

        $z6 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>($r10);

        if $z6 == 0 goto label12;

        $l0 = virtualinvoke r0.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: long getReceiveTimeout()>();

        $l1 = virtualinvoke r1.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: long getReceiveTimeout()>();

        $b2 = $l0 cmp $l1;

        if $b2 != 0 goto label12;

        $r11 = virtualinvoke r0.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: java.lang.String getReferer()>();

        $r12 = virtualinvoke r1.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: java.lang.String getReferer()>();

        $z7 = staticinvoke <org.apache.cxf.transport.http.policy.PolicyUtils: boolean equals(java.lang.String,java.lang.String)>($r11, $r12);

        if $z7 == 0 goto label12;

        $z23 = 1;

        goto label13;

     label12:
        $z23 = 0;

     label13:
        $z24 = $z22 & $z23;

        return $z24;
    }

    public static boolean compatible(org.apache.cxf.transports.http.configuration.HTTPServerPolicy, org.apache.cxf.transports.http.configuration.HTTPServerPolicy)
    {
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, z19, $z20, $z21, $z22, $z23;
        org.apache.cxf.transports.http.configuration.HTTPServerPolicy r0, r1;
        java.lang.String $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15;

        r0 := @parameter0: org.apache.cxf.transports.http.configuration.HTTPServerPolicy;

        r1 := @parameter1: org.apache.cxf.transports.http.configuration.HTTPServerPolicy;

        if r0 == r1 goto label01;

        $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label02;

     label01:
        return 1;

     label02:
        z19 = 1;

        if 1 == 0 goto label06;

        $z16 = virtualinvoke r0.<org.apache.cxf.transports.http.configuration.HTTPServerPolicy: boolean isSetCacheControl()>();

        if $z16 == 0 goto label03;

        $z17 = virtualinvoke r1.<org.apache.cxf.transports.http.configuration.HTTPServerPolicy: boolean isSetCacheControl()>();

        if $z17 == 0 goto label03;

        $r14 = virtualinvoke r0.<org.apache.cxf.transports.http.configuration.HTTPServerPolicy: java.lang.String getCacheControl()>();

        $r15 = virtualinvoke r1.<org.apache.cxf.transports.http.configuration.HTTPServerPolicy: java.lang.String getCacheControl()>();

        $z18 = virtualinvoke $r14.<java.lang.String: boolean equals(java.lang.Object)>($r15);

        if $z18 == 0 goto label04;

     label03:
        $z20 = 1;

        goto label05;

     label04:
        $z20 = 0;

     label05:
        z19 = 1 & $z20;

     label06:
        if z19 == 0 goto label07;

        $r12 = virtualinvoke r0.<org.apache.cxf.transports.http.configuration.HTTPServerPolicy: java.lang.String getContentEncoding()>();

        $r13 = virtualinvoke r1.<org.apache.cxf.transports.http.configuration.HTTPServerPolicy: java.lang.String getContentEncoding()>();

        $z15 = staticinvoke <org.apache.cxf.transport.http.policy.PolicyUtils: boolean compatible(java.lang.String,java.lang.String)>($r12, $r13);

        z19 = z19 & $z15;

     label07:
        if z19 == 0 goto label08;

        $r10 = virtualinvoke r0.<org.apache.cxf.transports.http.configuration.HTTPServerPolicy: java.lang.String getContentLocation()>();

        $r11 = virtualinvoke r1.<org.apache.cxf.transports.http.configuration.HTTPServerPolicy: java.lang.String getContentLocation()>();

        $z14 = staticinvoke <org.apache.cxf.transport.http.policy.PolicyUtils: boolean compatible(java.lang.String,java.lang.String)>($r10, $r11);

        z19 = z19 & $z14;

     label08:
        if z19 == 0 goto label09;

        $r8 = virtualinvoke r0.<org.apache.cxf.transports.http.configuration.HTTPServerPolicy: java.lang.String getContentType()>();

        $r9 = virtualinvoke r1.<org.apache.cxf.transports.http.configuration.HTTPServerPolicy: java.lang.String getContentType()>();

        $z13 = staticinvoke <org.apache.cxf.transport.http.policy.PolicyUtils: boolean compatible(java.lang.String,java.lang.String)>($r8, $r9);

        z19 = z19 & $z13;

     label09:
        if z19 == 0 goto label10;

        $r6 = virtualinvoke r0.<org.apache.cxf.transports.http.configuration.HTTPServerPolicy: java.lang.String getRedirectURL()>();

        $r7 = virtualinvoke r1.<org.apache.cxf.transports.http.configuration.HTTPServerPolicy: java.lang.String getRedirectURL()>();

        $z12 = staticinvoke <org.apache.cxf.transport.http.policy.PolicyUtils: boolean compatible(java.lang.String,java.lang.String)>($r6, $r7);

        z19 = z19 & $z12;

     label10:
        if z19 == 0 goto label11;

        $r4 = virtualinvoke r0.<org.apache.cxf.transports.http.configuration.HTTPServerPolicy: java.lang.String getServerType()>();

        $r5 = virtualinvoke r1.<org.apache.cxf.transports.http.configuration.HTTPServerPolicy: java.lang.String getServerType()>();

        $z11 = staticinvoke <org.apache.cxf.transport.http.policy.PolicyUtils: boolean compatible(java.lang.String,java.lang.String)>($r4, $r5);

        z19 = z19 & $z11;

     label11:
        if z19 == 0 goto label14;

        $z10 = z19;

        $z8 = virtualinvoke r0.<org.apache.cxf.transports.http.configuration.HTTPServerPolicy: boolean isHonorKeepAlive()>();

        $z9 = virtualinvoke r1.<org.apache.cxf.transports.http.configuration.HTTPServerPolicy: boolean isHonorKeepAlive()>();

        if $z8 != $z9 goto label12;

        $z21 = 1;

        goto label13;

     label12:
        $z21 = 0;

     label13:
        z19 = $z10 & $z21;

     label14:
        if z19 == 0 goto label17;

        $z7 = z19;

        $z5 = virtualinvoke r0.<org.apache.cxf.transports.http.configuration.HTTPServerPolicy: boolean isSuppressClientReceiveErrors()>();

        $z6 = virtualinvoke r1.<org.apache.cxf.transports.http.configuration.HTTPServerPolicy: boolean isSuppressClientReceiveErrors()>();

        if $z5 != $z6 goto label15;

        $z22 = 1;

        goto label16;

     label15:
        $z22 = 0;

     label16:
        z19 = $z7 & $z22;

     label17:
        if z19 == 0 goto label20;

        $z4 = z19;

        $z2 = virtualinvoke r0.<org.apache.cxf.transports.http.configuration.HTTPServerPolicy: boolean isSuppressClientSendErrors()>();

        $z3 = virtualinvoke r1.<org.apache.cxf.transports.http.configuration.HTTPServerPolicy: boolean isSuppressClientSendErrors()>();

        if $z2 != $z3 goto label18;

        $z23 = 1;

        goto label19;

     label18:
        $z23 = 0;

     label19:
        z19 = $z4 & $z23;

     label20:
        if z19 == 0 goto label21;

        $r2 = virtualinvoke r0.<org.apache.cxf.transports.http.configuration.HTTPServerPolicy: java.lang.String getKeepAliveParameters()>();

        $r3 = virtualinvoke r1.<org.apache.cxf.transports.http.configuration.HTTPServerPolicy: java.lang.String getKeepAliveParameters()>();

        $z1 = staticinvoke <org.apache.cxf.transport.http.policy.PolicyUtils: boolean compatible(java.lang.String,java.lang.String)>($r2, $r3);

        z19 = z19 & $z1;

     label21:
        return z19;
    }

    public static org.apache.cxf.transports.http.configuration.HTTPServerPolicy intersect(org.apache.cxf.transports.http.configuration.HTTPServerPolicy, org.apache.cxf.transports.http.configuration.HTTPServerPolicy)
    {
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20;
        org.apache.cxf.transports.http.configuration.HTTPServerPolicy r0, r1, $r2;
        long $l0, $l1, $l2;
        java.lang.String $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20;

        r0 := @parameter0: org.apache.cxf.transports.http.configuration.HTTPServerPolicy;

        r1 := @parameter1: org.apache.cxf.transports.http.configuration.HTTPServerPolicy;

        $z0 = staticinvoke <org.apache.cxf.transport.http.policy.PolicyUtils: boolean compatible(org.apache.cxf.transports.http.configuration.HTTPServerPolicy,org.apache.cxf.transports.http.configuration.HTTPServerPolicy)>(r0, r1);

        if $z0 != 0 goto label01;

        return null;

     label01:
        $r2 = new org.apache.cxf.transports.http.configuration.HTTPServerPolicy;

        specialinvoke $r2.<org.apache.cxf.transports.http.configuration.HTTPServerPolicy: void <init>()>();

        $z1 = virtualinvoke r0.<org.apache.cxf.transports.http.configuration.HTTPServerPolicy: boolean isSetCacheControl()>();

        if $z1 == 0 goto label02;

        $r8 = virtualinvoke r0.<org.apache.cxf.transports.http.configuration.HTTPServerPolicy: java.lang.String getCacheControl()>();

        virtualinvoke $r2.<org.apache.cxf.transports.http.configuration.HTTPServerPolicy: void setCacheControl(java.lang.String)>($r8);

        goto label03;

     label02:
        $z2 = virtualinvoke r1.<org.apache.cxf.transports.http.configuration.HTTPServerPolicy: boolean isSetCacheControl()>();

        if $z2 == 0 goto label03;

        $r7 = virtualinvoke r1.<org.apache.cxf.transports.http.configuration.HTTPServerPolicy: java.lang.String getCacheControl()>();

        virtualinvoke $r2.<org.apache.cxf.transports.http.configuration.HTTPServerPolicy: void setCacheControl(java.lang.String)>($r7);

     label03:
        $r9 = virtualinvoke r0.<org.apache.cxf.transports.http.configuration.HTTPServerPolicy: java.lang.String getContentEncoding()>();

        $r10 = virtualinvoke r1.<org.apache.cxf.transports.http.configuration.HTTPServerPolicy: java.lang.String getContentEncoding()>();

        $r11 = staticinvoke <org.apache.cxf.transport.http.policy.PolicyUtils: java.lang.String combine(java.lang.String,java.lang.String)>($r9, $r10);

        virtualinvoke $r2.<org.apache.cxf.transports.http.configuration.HTTPServerPolicy: void setContentEncoding(java.lang.String)>($r11);

        $r12 = virtualinvoke r0.<org.apache.cxf.transports.http.configuration.HTTPServerPolicy: java.lang.String getContentLocation()>();

        $r13 = virtualinvoke r1.<org.apache.cxf.transports.http.configuration.HTTPServerPolicy: java.lang.String getContentLocation()>();

        $r14 = staticinvoke <org.apache.cxf.transport.http.policy.PolicyUtils: java.lang.String combine(java.lang.String,java.lang.String)>($r12, $r13);

        virtualinvoke $r2.<org.apache.cxf.transports.http.configuration.HTTPServerPolicy: void setContentLocation(java.lang.String)>($r14);

        $z15 = virtualinvoke r0.<org.apache.cxf.transports.http.configuration.HTTPServerPolicy: boolean isSetContentType()>();

        if $z15 == 0 goto label04;

        $r6 = virtualinvoke r0.<org.apache.cxf.transports.http.configuration.HTTPServerPolicy: java.lang.String getContentType()>();

        virtualinvoke $r2.<org.apache.cxf.transports.http.configuration.HTTPServerPolicy: void setContentType(java.lang.String)>($r6);

        goto label05;

     label04:
        $z3 = virtualinvoke r1.<org.apache.cxf.transports.http.configuration.HTTPServerPolicy: boolean isSetContentType()>();

        if $z3 == 0 goto label05;

        $r5 = virtualinvoke r1.<org.apache.cxf.transports.http.configuration.HTTPServerPolicy: java.lang.String getContentType()>();

        virtualinvoke $r2.<org.apache.cxf.transports.http.configuration.HTTPServerPolicy: void setContentType(java.lang.String)>($r5);

     label05:
        $z16 = virtualinvoke r0.<org.apache.cxf.transports.http.configuration.HTTPServerPolicy: boolean isSetHonorKeepAlive()>();

        if $z16 == 0 goto label06;

        $z14 = virtualinvoke r0.<org.apache.cxf.transports.http.configuration.HTTPServerPolicy: boolean isHonorKeepAlive()>();

        virtualinvoke $r2.<org.apache.cxf.transports.http.configuration.HTTPServerPolicy: void setHonorKeepAlive(boolean)>($z14);

        goto label07;

     label06:
        $z4 = virtualinvoke r1.<org.apache.cxf.transports.http.configuration.HTTPServerPolicy: boolean isSetHonorKeepAlive()>();

        if $z4 == 0 goto label07;

        $z13 = virtualinvoke r1.<org.apache.cxf.transports.http.configuration.HTTPServerPolicy: boolean isHonorKeepAlive()>();

        virtualinvoke $r2.<org.apache.cxf.transports.http.configuration.HTTPServerPolicy: void setHonorKeepAlive(boolean)>($z13);

     label07:
        $z17 = virtualinvoke r0.<org.apache.cxf.transports.http.configuration.HTTPServerPolicy: boolean isSetKeepAliveParameters()>();

        if $z17 == 0 goto label08;

        $r4 = virtualinvoke r0.<org.apache.cxf.transports.http.configuration.HTTPServerPolicy: java.lang.String getKeepAliveParameters()>();

        virtualinvoke $r2.<org.apache.cxf.transports.http.configuration.HTTPServerPolicy: void setKeepAliveParameters(java.lang.String)>($r4);

        goto label09;

     label08:
        $z5 = virtualinvoke r1.<org.apache.cxf.transports.http.configuration.HTTPServerPolicy: boolean isSetKeepAliveParameters()>();

        if $z5 == 0 goto label09;

        $r3 = virtualinvoke r1.<org.apache.cxf.transports.http.configuration.HTTPServerPolicy: java.lang.String getKeepAliveParameters()>();

        virtualinvoke $r2.<org.apache.cxf.transports.http.configuration.HTTPServerPolicy: void setKeepAliveParameters(java.lang.String)>($r3);

     label09:
        $z18 = virtualinvoke r0.<org.apache.cxf.transports.http.configuration.HTTPServerPolicy: boolean isSetReceiveTimeout()>();

        if $z18 != 0 goto label10;

        $z12 = virtualinvoke r1.<org.apache.cxf.transports.http.configuration.HTTPServerPolicy: boolean isSetReceiveTimeout()>();

        if $z12 == 0 goto label11;

     label10:
        $l0 = virtualinvoke r0.<org.apache.cxf.transports.http.configuration.HTTPServerPolicy: long getReceiveTimeout()>();

        $l1 = virtualinvoke r1.<org.apache.cxf.transports.http.configuration.HTTPServerPolicy: long getReceiveTimeout()>();

        $l2 = staticinvoke <java.lang.Math: long min(long,long)>($l0, $l1);

        virtualinvoke $r2.<org.apache.cxf.transports.http.configuration.HTTPServerPolicy: void setReceiveTimeout(long)>($l2);

     label11:
        $r15 = virtualinvoke r0.<org.apache.cxf.transports.http.configuration.HTTPServerPolicy: java.lang.String getRedirectURL()>();

        $r16 = virtualinvoke r1.<org.apache.cxf.transports.http.configuration.HTTPServerPolicy: java.lang.String getRedirectURL()>();

        $r17 = staticinvoke <org.apache.cxf.transport.http.policy.PolicyUtils: java.lang.String combine(java.lang.String,java.lang.String)>($r15, $r16);

        virtualinvoke $r2.<org.apache.cxf.transports.http.configuration.HTTPServerPolicy: void setRedirectURL(java.lang.String)>($r17);

        $r18 = virtualinvoke r0.<org.apache.cxf.transports.http.configuration.HTTPServerPolicy: java.lang.String getServerType()>();

        $r19 = virtualinvoke r1.<org.apache.cxf.transports.http.configuration.HTTPServerPolicy: java.lang.String getServerType()>();

        $r20 = staticinvoke <org.apache.cxf.transport.http.policy.PolicyUtils: java.lang.String combine(java.lang.String,java.lang.String)>($r18, $r19);

        virtualinvoke $r2.<org.apache.cxf.transports.http.configuration.HTTPServerPolicy: void setServerType(java.lang.String)>($r20);

        $z19 = virtualinvoke r0.<org.apache.cxf.transports.http.configuration.HTTPServerPolicy: boolean isSetSuppressClientReceiveErrors()>();

        if $z19 == 0 goto label12;

        $z11 = virtualinvoke r0.<org.apache.cxf.transports.http.configuration.HTTPServerPolicy: boolean isSuppressClientReceiveErrors()>();

        virtualinvoke $r2.<org.apache.cxf.transports.http.configuration.HTTPServerPolicy: void setSuppressClientReceiveErrors(boolean)>($z11);

        goto label13;

     label12:
        $z6 = virtualinvoke r1.<org.apache.cxf.transports.http.configuration.HTTPServerPolicy: boolean isSetSuppressClientReceiveErrors()>();

        if $z6 == 0 goto label13;

        $z10 = virtualinvoke r1.<org.apache.cxf.transports.http.configuration.HTTPServerPolicy: boolean isSuppressClientReceiveErrors()>();

        virtualinvoke $r2.<org.apache.cxf.transports.http.configuration.HTTPServerPolicy: void setSuppressClientReceiveErrors(boolean)>($z10);

     label13:
        $z20 = virtualinvoke r0.<org.apache.cxf.transports.http.configuration.HTTPServerPolicy: boolean isSetSuppressClientSendErrors()>();

        if $z20 == 0 goto label14;

        $z9 = virtualinvoke r0.<org.apache.cxf.transports.http.configuration.HTTPServerPolicy: boolean isSuppressClientSendErrors()>();

        virtualinvoke $r2.<org.apache.cxf.transports.http.configuration.HTTPServerPolicy: void setSuppressClientSendErrors(boolean)>($z9);

        goto label15;

     label14:
        $z7 = virtualinvoke r1.<org.apache.cxf.transports.http.configuration.HTTPServerPolicy: boolean isSetSuppressClientSendErrors()>();

        if $z7 == 0 goto label15;

        $z8 = virtualinvoke r1.<org.apache.cxf.transports.http.configuration.HTTPServerPolicy: boolean isSuppressClientSendErrors()>();

        virtualinvoke $r2.<org.apache.cxf.transports.http.configuration.HTTPServerPolicy: void setSuppressClientSendErrors(boolean)>($z8);

     label15:
        return $r2;
    }

    public static boolean equals(org.apache.cxf.transports.http.configuration.HTTPServerPolicy, org.apache.cxf.transports.http.configuration.HTTPServerPolicy)
    {
        byte $b2;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16;
        org.apache.cxf.transports.http.configuration.HTTPServerPolicy r0, r1;
        long $l0, $l1;
        java.lang.String $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17;

        r0 := @parameter0: org.apache.cxf.transports.http.configuration.HTTPServerPolicy;

        r1 := @parameter1: org.apache.cxf.transports.http.configuration.HTTPServerPolicy;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = virtualinvoke r0.<org.apache.cxf.transports.http.configuration.HTTPServerPolicy: boolean isHonorKeepAlive()>();

        $z1 = virtualinvoke r1.<org.apache.cxf.transports.http.configuration.HTTPServerPolicy: boolean isHonorKeepAlive()>();

        if $z0 != $z1 goto label4;

        $r6 = virtualinvoke r0.<org.apache.cxf.transports.http.configuration.HTTPServerPolicy: java.lang.String getCacheControl()>();

        if $r6 != null goto label2;

        $r17 = virtualinvoke r1.<org.apache.cxf.transports.http.configuration.HTTPServerPolicy: java.lang.String getCacheControl()>();

        if $r17 != null goto label4;

        goto label3;

     label2:
        $r7 = virtualinvoke r0.<org.apache.cxf.transports.http.configuration.HTTPServerPolicy: java.lang.String getCacheControl()>();

        $r8 = virtualinvoke r1.<org.apache.cxf.transports.http.configuration.HTTPServerPolicy: java.lang.String getCacheControl()>();

        $z8 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>($r8);

        if $z8 == 0 goto label4;

     label3:
        $r9 = virtualinvoke r0.<org.apache.cxf.transports.http.configuration.HTTPServerPolicy: java.lang.String getContentEncoding()>();

        $r10 = virtualinvoke r1.<org.apache.cxf.transports.http.configuration.HTTPServerPolicy: java.lang.String getContentEncoding()>();

        $z9 = staticinvoke <org.apache.cxf.transport.http.policy.PolicyUtils: boolean equals(java.lang.String,java.lang.String)>($r9, $r10);

        if $z9 == 0 goto label4;

        $r11 = virtualinvoke r0.<org.apache.cxf.transports.http.configuration.HTTPServerPolicy: java.lang.String getContentLocation()>();

        $r12 = virtualinvoke r1.<org.apache.cxf.transports.http.configuration.HTTPServerPolicy: java.lang.String getContentLocation()>();

        $z10 = staticinvoke <org.apache.cxf.transport.http.policy.PolicyUtils: boolean equals(java.lang.String,java.lang.String)>($r11, $r12);

        if $z10 == 0 goto label4;

        $r13 = virtualinvoke r0.<org.apache.cxf.transports.http.configuration.HTTPServerPolicy: java.lang.String getContentType()>();

        $r14 = virtualinvoke r1.<org.apache.cxf.transports.http.configuration.HTTPServerPolicy: java.lang.String getContentType()>();

        $z11 = staticinvoke <org.apache.cxf.transport.http.policy.PolicyUtils: boolean equals(java.lang.String,java.lang.String)>($r13, $r14);

        if $z11 == 0 goto label4;

        $r15 = virtualinvoke r0.<org.apache.cxf.transports.http.configuration.HTTPServerPolicy: java.lang.String getKeepAliveParameters()>();

        $r16 = virtualinvoke r1.<org.apache.cxf.transports.http.configuration.HTTPServerPolicy: java.lang.String getKeepAliveParameters()>();

        $z12 = staticinvoke <org.apache.cxf.transport.http.policy.PolicyUtils: boolean equals(java.lang.String,java.lang.String)>($r15, $r16);

        if $z12 == 0 goto label4;

        $z13 = 1;

        goto label5;

     label4:
        $z13 = 0;

     label5:
        $z14 = 1 & $z13;

        if $z14 != 0 goto label6;

        return 0;

     label6:
        $l0 = virtualinvoke r0.<org.apache.cxf.transports.http.configuration.HTTPServerPolicy: long getReceiveTimeout()>();

        $l1 = virtualinvoke r1.<org.apache.cxf.transports.http.configuration.HTTPServerPolicy: long getReceiveTimeout()>();

        $b2 = $l0 cmp $l1;

        if $b2 != 0 goto label7;

        $r2 = virtualinvoke r0.<org.apache.cxf.transports.http.configuration.HTTPServerPolicy: java.lang.String getRedirectURL()>();

        $r3 = virtualinvoke r1.<org.apache.cxf.transports.http.configuration.HTTPServerPolicy: java.lang.String getRedirectURL()>();

        $z2 = staticinvoke <org.apache.cxf.transport.http.policy.PolicyUtils: boolean equals(java.lang.String,java.lang.String)>($r2, $r3);

        if $z2 == 0 goto label7;

        $r4 = virtualinvoke r0.<org.apache.cxf.transports.http.configuration.HTTPServerPolicy: java.lang.String getServerType()>();

        $r5 = virtualinvoke r1.<org.apache.cxf.transports.http.configuration.HTTPServerPolicy: java.lang.String getServerType()>();

        $z3 = staticinvoke <org.apache.cxf.transport.http.policy.PolicyUtils: boolean equals(java.lang.String,java.lang.String)>($r4, $r5);

        if $z3 == 0 goto label7;

        $z4 = virtualinvoke r0.<org.apache.cxf.transports.http.configuration.HTTPServerPolicy: boolean isSuppressClientReceiveErrors()>();

        $z5 = virtualinvoke r1.<org.apache.cxf.transports.http.configuration.HTTPServerPolicy: boolean isSuppressClientReceiveErrors()>();

        if $z4 != $z5 goto label7;

        $z6 = virtualinvoke r0.<org.apache.cxf.transports.http.configuration.HTTPServerPolicy: boolean isSuppressClientSendErrors()>();

        $z7 = virtualinvoke r1.<org.apache.cxf.transports.http.configuration.HTTPServerPolicy: boolean isSuppressClientSendErrors()>();

        if $z6 != $z7 goto label7;

        $z15 = 1;

        goto label8;

     label7:
        $z15 = 0;

     label8:
        $z16 = $z14 & $z15;

        return $z16;
    }

    private static java.lang.String combine(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1, $r2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        if r0 != null goto label1;

        $r2 = r1;

        goto label2;

     label1:
        $r2 = r0;

     label2:
        return $r2;
    }

    private static boolean equals(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        if r0 != null goto label2;

        if r1 != null goto label1;

        $z0 = 1;

        goto label3;

     label1:
        $z0 = 0;

        goto label3;

     label2:
        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>(r1);

     label3:
        return $z0;
    }

    private static boolean compatible(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        if r0 == null goto label1;

        if r1 == null goto label1;

        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    private static org.apache.cxf.transports.http.configuration.HTTPClientPolicy getClient(java.util.Collection)
    {
        org.apache.cxf.ws.policy.PolicyException $r15;
        org.apache.cxf.ws.policy.builder.jaxb.JaxbAssertion $r6;
        java.lang.Object[] $r13;
        org.apache.cxf.common.i18n.Message $r12;
        java.util.logging.Level $r10;
        boolean $z0, $z1;
        java.util.Iterator $r1;
        java.util.Collection r0;
        org.apache.neethi.Assertion r3;
        java.util.logging.Logger $r11, $r14;
        java.lang.Object $r2, $r7;
        javax.xml.namespace.QName $r4, $r5;
        org.apache.cxf.transports.http.configuration.HTTPClientPolicy r8, $r9, r16;

        r0 := @parameter0: java.util.Collection;

        r16 = null;

        $r1 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (org.apache.neethi.Assertion) $r2;

        $r4 = <org.apache.cxf.transport.http.policy.PolicyUtils: javax.xml.namespace.QName HTTPCLIENTPOLICY_ASSERTION_QNAME>;

        $r5 = interfaceinvoke r3.<org.apache.neethi.Assertion: javax.xml.namespace.QName getName()>();

        $z1 = virtualinvoke $r4.<javax.xml.namespace.QName: boolean equals(java.lang.Object)>($r5);

        if $z1 == 0 goto label3;

        $r6 = staticinvoke <org.apache.cxf.ws.policy.builder.jaxb.JaxbAssertion: org.apache.cxf.ws.policy.builder.jaxb.JaxbAssertion cast(org.apache.neethi.Assertion,java.lang.Class)>(r3, class "Lorg/apache/cxf/transports/http/configuration/HTTPClientPolicy;");

        $r7 = virtualinvoke $r6.<org.apache.cxf.ws.policy.builder.jaxb.JaxbAssertion: java.lang.Object getData()>();

        r8 = (org.apache.cxf.transports.http.configuration.HTTPClientPolicy) $r7;

        if null != r16 goto label2;

        r16 = r8;

        goto label3;

     label2:
        $r9 = staticinvoke <org.apache.cxf.transport.http.policy.PolicyUtils: org.apache.cxf.transports.http.configuration.HTTPClientPolicy intersect(org.apache.cxf.transports.http.configuration.HTTPClientPolicy,org.apache.cxf.transports.http.configuration.HTTPClientPolicy)>(r16, r8);

        r16 = $r9;

        if null != $r9 goto label3;

        $r11 = <org.apache.cxf.transport.http.policy.PolicyUtils: java.util.logging.Logger LOG>;

        $r10 = <java.util.logging.Level: java.util.logging.Level SEVERE>;

        staticinvoke <org.apache.cxf.common.logging.LogUtils: void log(java.util.logging.Logger,java.util.logging.Level,java.lang.String)>($r11, $r10, "INCOMPATIBLE_HTTPCLIENTPOLICY_ASSERTIONS");

        $r12 = new org.apache.cxf.common.i18n.Message;

        $r14 = <org.apache.cxf.transport.http.policy.PolicyUtils: java.util.logging.Logger LOG>;

        $r13 = newarray (java.lang.Object)[0];

        specialinvoke $r12.<org.apache.cxf.common.i18n.Message: void <init>(java.lang.String,java.util.logging.Logger,java.lang.Object[])>("INCOMPATIBLE_HTTPCLIENTPOLICY_ASSERTIONS", $r14, $r13);

        $r15 = new org.apache.cxf.ws.policy.PolicyException;

        specialinvoke $r15.<org.apache.cxf.ws.policy.PolicyException: void <init>(org.apache.cxf.common.i18n.Message)>($r12);

        throw $r15;

     label3:
        goto label1;

     label4:
        return r16;
    }

    private static org.apache.cxf.transports.http.configuration.HTTPServerPolicy getServer(java.util.Collection)
    {
        org.apache.cxf.ws.policy.PolicyException $r15;
        org.apache.cxf.ws.policy.builder.jaxb.JaxbAssertion $r6;
        java.lang.Object[] $r13;
        org.apache.cxf.common.i18n.Message $r12;
        java.util.logging.Level $r10;
        boolean $z0, $z1;
        java.util.Iterator $r1;
        org.apache.cxf.transports.http.configuration.HTTPServerPolicy r8, $r9, r16;
        java.util.Collection r0;
        org.apache.neethi.Assertion r3;
        java.util.logging.Logger $r11, $r14;
        java.lang.Object $r2, $r7;
        javax.xml.namespace.QName $r4, $r5;

        r0 := @parameter0: java.util.Collection;

        r16 = null;

        $r1 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (org.apache.neethi.Assertion) $r2;

        $r4 = <org.apache.cxf.transport.http.policy.PolicyUtils: javax.xml.namespace.QName HTTPSERVERPOLICY_ASSERTION_QNAME>;

        $r5 = interfaceinvoke r3.<org.apache.neethi.Assertion: javax.xml.namespace.QName getName()>();

        $z1 = virtualinvoke $r4.<javax.xml.namespace.QName: boolean equals(java.lang.Object)>($r5);

        if $z1 == 0 goto label3;

        $r6 = staticinvoke <org.apache.cxf.ws.policy.builder.jaxb.JaxbAssertion: org.apache.cxf.ws.policy.builder.jaxb.JaxbAssertion cast(org.apache.neethi.Assertion,java.lang.Class)>(r3, class "Lorg/apache/cxf/transports/http/configuration/HTTPServerPolicy;");

        $r7 = virtualinvoke $r6.<org.apache.cxf.ws.policy.builder.jaxb.JaxbAssertion: java.lang.Object getData()>();

        r8 = (org.apache.cxf.transports.http.configuration.HTTPServerPolicy) $r7;

        if null != r16 goto label2;

        r16 = r8;

        goto label3;

     label2:
        $r9 = staticinvoke <org.apache.cxf.transport.http.policy.PolicyUtils: org.apache.cxf.transports.http.configuration.HTTPServerPolicy intersect(org.apache.cxf.transports.http.configuration.HTTPServerPolicy,org.apache.cxf.transports.http.configuration.HTTPServerPolicy)>(r16, r8);

        r16 = $r9;

        if null != $r9 goto label3;

        $r11 = <org.apache.cxf.transport.http.policy.PolicyUtils: java.util.logging.Logger LOG>;

        $r10 = <java.util.logging.Level: java.util.logging.Level SEVERE>;

        staticinvoke <org.apache.cxf.common.logging.LogUtils: void log(java.util.logging.Logger,java.util.logging.Level,java.lang.String)>($r11, $r10, "INCOMPATIBLE_HTTPSERVERPOLICY_ASSERTIONS");

        $r12 = new org.apache.cxf.common.i18n.Message;

        $r14 = <org.apache.cxf.transport.http.policy.PolicyUtils: java.util.logging.Logger LOG>;

        $r13 = newarray (java.lang.Object)[0];

        specialinvoke $r12.<org.apache.cxf.common.i18n.Message: void <init>(java.lang.String,java.util.logging.Logger,java.lang.Object[])>("INCOMPATIBLE_HTTPSERVERPOLICY_ASSERTIONS", $r14, $r13);

        $r15 = new org.apache.cxf.ws.policy.PolicyException;

        specialinvoke $r15.<org.apache.cxf.ws.policy.PolicyException: void <init>(org.apache.cxf.common.i18n.Message)>($r12);

        throw $r15;

     label3:
        goto label1;

     label4:
        return r16;
    }

    public static java.lang.String toString(org.apache.cxf.transports.http.configuration.HTTPClientPolicy)
    {
        java.lang.StringBuilder $r0;
        long $l0;
        org.apache.cxf.transports.http.configuration.HTTPClientPolicy r1;
        java.lang.String $r2, $r3;

        r1 := @parameter0: org.apache.cxf.transports.http.configuration.HTTPClientPolicy;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[DecoupledEndpoint=\"");

        $r2 = virtualinvoke r1.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: java.lang.String getDecoupledEndpoint()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\", ReceiveTimeout=");

        $l0 = virtualinvoke r1.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: long getReceiveTimeout()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("])");

        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }

    public static java.lang.String toString(org.apache.cxf.transports.http.configuration.HTTPServerPolicy)
    {
        org.apache.cxf.transports.http.configuration.HTTPServerPolicy r1;
        java.lang.StringBuilder $r0;
        long $l0;
        java.lang.String $r2, $r3;

        r1 := @parameter0: org.apache.cxf.transports.http.configuration.HTTPServerPolicy;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[ContentType=\"");

        $r2 = virtualinvoke r1.<org.apache.cxf.transports.http.configuration.HTTPServerPolicy: java.lang.String getContentType()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\", ReceiveTimeout=");

        $l0 = virtualinvoke r1.<org.apache.cxf.transports.http.configuration.HTTPServerPolicy: long getReceiveTimeout()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("])");

        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }

    static void <clinit>()
    {
        javax.xml.namespace.QName $r0, $r1;
        java.util.logging.Logger $r2;

        <org.apache.cxf.transport.http.policy.PolicyUtils: java.lang.String HTTPCONF_NAMESPACE> = "http://cxf.apache.org/transports/http/configuration";

        $r0 = new javax.xml.namespace.QName;

        specialinvoke $r0.<javax.xml.namespace.QName: void <init>(java.lang.String,java.lang.String)>("http://cxf.apache.org/transports/http/configuration", "client");

        <org.apache.cxf.transport.http.policy.PolicyUtils: javax.xml.namespace.QName HTTPCLIENTPOLICY_ASSERTION_QNAME> = $r0;

        $r1 = new javax.xml.namespace.QName;

        specialinvoke $r1.<javax.xml.namespace.QName: void <init>(java.lang.String,java.lang.String)>("http://cxf.apache.org/transports/http/configuration", "server");

        <org.apache.cxf.transport.http.policy.PolicyUtils: javax.xml.namespace.QName HTTPSERVERPOLICY_ASSERTION_QNAME> = $r1;

        $r2 = staticinvoke <org.apache.cxf.common.logging.LogUtils: java.util.logging.Logger getL7dLogger(java.lang.Class)>(class "Lorg/apache/cxf/transport/http/policy/PolicyUtils;");

        <org.apache.cxf.transport.http.policy.PolicyUtils: java.util.logging.Logger LOG> = $r2;

        return;
    }
}
