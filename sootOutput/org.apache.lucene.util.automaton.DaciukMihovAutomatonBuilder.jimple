final class org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder extends java.lang.Object
{
    private java.util.HashMap stateRegistry;
    private org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$State root;
    private org.apache.lucene.util.CharsRef previous;
    private static final java.util.Comparator comparator;
    static final boolean $assertionsDisabled;

    void <init>()
    {
        java.util.HashMap $r1;
        org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder r0;
        org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$State $r2;

        r0 := @this: org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder: java.util.HashMap stateRegistry> = $r1;

        $r2 = new org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$State;

        specialinvoke $r2.<org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$State: void <init>(org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$1)>(null);

        r0.<org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder: org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$State root> = $r2;

        return;
    }

    public void add(org.apache.lucene.util.CharsRef)
    {
        java.util.HashMap $r15;
        java.lang.AssertionError $r3, $r7, $r16;
        org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$State $r2, r17;
        int $i0, $i1, $i2, $i3, $i4, i5;
        java.lang.String $r14;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder r1;
        org.apache.lucene.util.CharsRef r0, $r4, $r5, $r10;
        java.lang.StringBuilder $r8, $r9, $r11, $r12, $r13;
        java.util.Comparator $r6;

        r1 := @this: org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder;

        r0 := @parameter0: org.apache.lucene.util.CharsRef;

        $z0 = <org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r15 = r1.<org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder: java.util.HashMap stateRegistry>;

        if $r15 != null goto label1;

        $r16 = new java.lang.AssertionError;

        specialinvoke $r16.<java.lang.AssertionError: void <init>(java.lang.Object)>("Automaton already built.");

        throw $r16;

     label1:
        $z1 = <org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        $r4 = r1.<org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder: org.apache.lucene.util.CharsRef previous>;

        if $r4 == null goto label2;

        $r6 = <org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder: java.util.Comparator comparator>;

        $r5 = r1.<org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder: org.apache.lucene.util.CharsRef previous>;

        $i4 = interfaceinvoke $r6.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>($r5, r0);

        if $i4 <= 0 goto label2;

        $r7 = new java.lang.AssertionError;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Input must be in sorted UTF-8 order: ");

        $r10 = r1.<org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder: org.apache.lucene.util.CharsRef previous>;

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" >= ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.AssertionError: void <init>(java.lang.Object)>($r14);

        throw $r7;

     label2:
        $z4 = <org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder: boolean $assertionsDisabled>;

        if $z4 != 0 goto label3;

        $z3 = specialinvoke r1.<org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder: boolean setPrevious(org.apache.lucene.util.CharsRef)>(r0);

        if $z3 != 0 goto label3;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label3:
        i5 = 0;

        $i0 = virtualinvoke r0.<org.apache.lucene.util.CharsRef: int length()>();

        r17 = r1.<org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder: org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$State root>;

     label4:
        if i5 >= $i0 goto label5;

        $i1 = staticinvoke <java.lang.Character: int codePointAt(java.lang.CharSequence,int)>(r0, i5);

        $r2 = virtualinvoke r17.<org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$State: org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$State lastChild(int)>($i1);

        if $r2 == null goto label5;

        r17 = $r2;

        $i2 = staticinvoke <java.lang.Character: int codePointAt(java.lang.CharSequence,int)>(r0, i5);

        $i3 = staticinvoke <java.lang.Character: int charCount(int)>($i2);

        i5 = i5 + $i3;

        goto label4;

     label5:
        $z2 = virtualinvoke r17.<org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$State: boolean hasChildren()>();

        if $z2 == 0 goto label6;

        specialinvoke r1.<org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder: void replaceOrRegister(org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$State)>(r17);

     label6:
        specialinvoke r1.<org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder: void addSuffix(org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$State,java.lang.CharSequence,int)>(r17, r0, i5);

        return;
    }

    public org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$State complete()
    {
        java.lang.IllegalStateException $r5;
        org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder r0;
        java.util.HashMap $r1;
        org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$State $r2, $r3, $r4;
        boolean $z0;

        r0 := @this: org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder;

        $r1 = r0.<org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder: java.util.HashMap stateRegistry>;

        if $r1 != null goto label1;

        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>()>();

        throw $r5;

     label1:
        $r2 = r0.<org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder: org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$State root>;

        $z0 = virtualinvoke $r2.<org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$State: boolean hasChildren()>();

        if $z0 == 0 goto label2;

        $r4 = r0.<org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder: org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$State root>;

        specialinvoke r0.<org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder: void replaceOrRegister(org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$State)>($r4);

     label2:
        r0.<org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder: java.util.HashMap stateRegistry> = null;

        $r3 = r0.<org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder: org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$State root>;

        return $r3;
    }

    private static org.apache.lucene.util.automaton.State convert(org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$State, java.util.IdentityHashMap)
    {
        org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$State r1, r6;
        int[] r4;
        int i0, $i1, $i2, i3, i4;
        boolean $z0;
        org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$State[] r5;
        java.util.IdentityHashMap r0;
        org.apache.lucene.util.automaton.Transition $r7;
        org.apache.lucene.util.automaton.State $r3, $r8, r9;
        java.lang.Object $r2;

        r1 := @parameter0: org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$State;

        r0 := @parameter1: java.util.IdentityHashMap;

        $r2 = virtualinvoke r0.<java.util.IdentityHashMap: java.lang.Object get(java.lang.Object)>(r1);

        r9 = (org.apache.lucene.util.automaton.State) $r2;

        if r9 == null goto label1;

        return r9;

     label1:
        $r3 = new org.apache.lucene.util.automaton.State;

        specialinvoke $r3.<org.apache.lucene.util.automaton.State: void <init>()>();

        $z0 = r1.<org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$State: boolean is_final>;

        virtualinvoke $r3.<org.apache.lucene.util.automaton.State: void setAccept(boolean)>($z0);

        virtualinvoke r0.<java.util.IdentityHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r3);

        i3 = 0;

        r4 = r1.<org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$State: int[] labels>;

        r5 = r1.<org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$State: org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$State[] states>;

        i0 = lengthof r5;

        i4 = 0;

     label2:
        if i4 >= i0 goto label3;

        r6 = r5[i4];

        $r7 = new org.apache.lucene.util.automaton.Transition;

        $i1 = i3;

        i3 = i3 + 1;

        $i2 = r4[$i1];

        $r8 = staticinvoke <org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder: org.apache.lucene.util.automaton.State convert(org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$State,java.util.IdentityHashMap)>(r6, r0);

        specialinvoke $r7.<org.apache.lucene.util.automaton.Transition: void <init>(int,org.apache.lucene.util.automaton.State)>($i2, $r8);

        virtualinvoke $r3.<org.apache.lucene.util.automaton.State: void addTransition(org.apache.lucene.util.automaton.Transition)>($r7);

        i4 = i4 + 1;

        goto label2;

     label3:
        return $r3;
    }

    public static org.apache.lucene.util.automaton.Automaton build(java.util.Collection)
    {
        java.util.IdentityHashMap $r6;
        org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder $r0;
        java.util.Iterator $r3;
        org.apache.lucene.util.automaton.Automaton $r4;
        org.apache.lucene.util.BytesRef r9;
        java.util.Collection r2;
        org.apache.lucene.util.automaton.State $r7;
        org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$State $r5;
        org.apache.lucene.util.CharsRef $r1;
        java.lang.Object $r8;
        boolean $z0;

        r2 := @parameter0: java.util.Collection;

        $r0 = new org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder;

        specialinvoke $r0.<org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder: void <init>()>();

        $r1 = new org.apache.lucene.util.CharsRef;

        specialinvoke $r1.<org.apache.lucene.util.CharsRef: void <init>()>();

        $r3 = interfaceinvoke r2.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r8 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r9 = (org.apache.lucene.util.BytesRef) $r8;

        staticinvoke <org.apache.lucene.util.UnicodeUtil: void UTF8toUTF16(org.apache.lucene.util.BytesRef,org.apache.lucene.util.CharsRef)>(r9, $r1);

        virtualinvoke $r0.<org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder: void add(org.apache.lucene.util.CharsRef)>($r1);

        goto label1;

     label2:
        $r4 = new org.apache.lucene.util.automaton.Automaton;

        specialinvoke $r4.<org.apache.lucene.util.automaton.Automaton: void <init>()>();

        $r5 = virtualinvoke $r0.<org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder: org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$State complete()>();

        $r6 = new java.util.IdentityHashMap;

        specialinvoke $r6.<java.util.IdentityHashMap: void <init>()>();

        $r7 = staticinvoke <org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder: org.apache.lucene.util.automaton.State convert(org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$State,java.util.IdentityHashMap)>($r5, $r6);

        $r4.<org.apache.lucene.util.automaton.Automaton: org.apache.lucene.util.automaton.State initial> = $r7;

        $r4.<org.apache.lucene.util.automaton.Automaton: boolean deterministic> = 1;

        return $r4;
    }

    private boolean setPrevious(org.apache.lucene.util.CharsRef)
    {
        org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder r0;
        org.apache.lucene.util.CharsRef r1, $r2;

        r0 := @this: org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder;

        r1 := @parameter0: org.apache.lucene.util.CharsRef;

        $r2 = staticinvoke <org.apache.lucene.util.CharsRef: org.apache.lucene.util.CharsRef deepCopyOf(org.apache.lucene.util.CharsRef)>(r1);

        r0.<org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder: org.apache.lucene.util.CharsRef previous> = $r2;

        return 1;
    }

    private void replaceOrRegister(org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$State)
    {
        org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder r2;
        java.util.HashMap $r3, $r5;
        org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$State r0, $r1, $r6;
        java.lang.Object $r4;
        boolean $z0;

        r2 := @this: org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder;

        r0 := @parameter0: org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$State;

        $r1 = virtualinvoke r0.<org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$State: org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$State lastChild()>();

        $z0 = virtualinvoke $r1.<org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$State: boolean hasChildren()>();

        if $z0 == 0 goto label1;

        specialinvoke r2.<org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder: void replaceOrRegister(org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$State)>($r1);

     label1:
        $r3 = r2.<org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder: java.util.HashMap stateRegistry>;

        $r4 = virtualinvoke $r3.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r1);

        $r6 = (org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$State) $r4;

        if $r6 == null goto label2;

        virtualinvoke r0.<org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$State: void replaceLastChild(org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$State)>($r6);

        goto label3;

     label2:
        $r5 = r2.<org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder: java.util.HashMap stateRegistry>;

        virtualinvoke $r5.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r1);

     label3:
        return;
    }

    private void addSuffix(org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$State, java.lang.CharSequence, int)
    {
        java.lang.CharSequence r0;
        org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder r1;
        int $i0, $i1, $i2, i3;
        org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$State r2;

        r1 := @this: org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder;

        r2 := @parameter0: org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$State;

        r0 := @parameter1: java.lang.CharSequence;

        i3 := @parameter2: int;

        $i0 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

     label1:
        if i3 >= $i0 goto label2;

        $i1 = staticinvoke <java.lang.Character: int codePointAt(java.lang.CharSequence,int)>(r0, i3);

        r2 = virtualinvoke r2.<org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$State: org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$State newState(int)>($i1);

        $i2 = staticinvoke <java.lang.Character: int charCount(int)>($i1);

        i3 = i3 + $i2;

        goto label1;

     label2:
        r2.<org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$State: boolean is_final> = 1;

        return;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        java.util.Comparator $r1;
        boolean $z0, $z1;

        $r0 = class "Lorg/apache/lucene/util/automaton/DaciukMihovAutomatonBuilder;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder: boolean $assertionsDisabled> = $z1;

        $r1 = staticinvoke <org.apache.lucene.util.CharsRef: java.util.Comparator getUTF16SortedAsUTF8Comparator()>();

        <org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder: java.util.Comparator comparator> = $r1;

        return;
    }
}
