public abstract class com.mycila.inject.internal.guava.collect.ContiguousSet extends com.mycila.inject.internal.guava.collect.ImmutableSortedSet
{
    final com.mycila.inject.internal.guava.collect.DiscreteDomain domain;

    void <init>(com.mycila.inject.internal.guava.collect.DiscreteDomain)
    {
        com.mycila.inject.internal.guava.collect.DiscreteDomain r2;
        com.mycila.inject.internal.guava.collect.ContiguousSet r0;
        com.mycila.inject.internal.guava.collect.Ordering $r1;

        r0 := @this: com.mycila.inject.internal.guava.collect.ContiguousSet;

        r2 := @parameter0: com.mycila.inject.internal.guava.collect.DiscreteDomain;

        $r1 = staticinvoke <com.mycila.inject.internal.guava.collect.Ordering: com.mycila.inject.internal.guava.collect.Ordering natural()>();

        specialinvoke r0.<com.mycila.inject.internal.guava.collect.ImmutableSortedSet: void <init>(java.util.Comparator)>($r1);

        r0.<com.mycila.inject.internal.guava.collect.ContiguousSet: com.mycila.inject.internal.guava.collect.DiscreteDomain domain> = r2;

        return;
    }

    public com.mycila.inject.internal.guava.collect.ContiguousSet headSet(java.lang.Comparable)
    {
        com.mycila.inject.internal.guava.collect.ContiguousSet r0, $r4;
        java.lang.Comparable r1, $r3;
        java.lang.Object $r2;

        r0 := @this: com.mycila.inject.internal.guava.collect.ContiguousSet;

        r1 := @parameter0: java.lang.Comparable;

        $r2 = staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r3 = (java.lang.Comparable) $r2;

        $r4 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ContiguousSet: com.mycila.inject.internal.guava.collect.ContiguousSet headSet(java.lang.Comparable,boolean)>($r3, 0);

        return $r4;
    }

    com.mycila.inject.internal.guava.collect.ContiguousSet headSet(java.lang.Comparable, boolean)
    {
        com.mycila.inject.internal.guava.collect.ContiguousSet r0, $r4;
        java.lang.Comparable r1, $r3;
        java.lang.Object $r2;
        boolean z0;

        r0 := @this: com.mycila.inject.internal.guava.collect.ContiguousSet;

        r1 := @parameter0: java.lang.Comparable;

        z0 := @parameter1: boolean;

        $r2 = staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r3 = (java.lang.Comparable) $r2;

        $r4 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ContiguousSet: com.mycila.inject.internal.guava.collect.ContiguousSet headSetImpl(java.lang.Comparable,boolean)>($r3, z0);

        return $r4;
    }

    public com.mycila.inject.internal.guava.collect.ContiguousSet subSet(java.lang.Comparable, java.lang.Comparable)
    {
        com.mycila.inject.internal.guava.collect.ContiguousSet r2, $r4;
        int $i0;
        java.lang.Comparable r0, r1;
        java.util.Comparator $r3;
        boolean $z0;

        r2 := @this: com.mycila.inject.internal.guava.collect.ContiguousSet;

        r0 := @parameter0: java.lang.Comparable;

        r1 := @parameter1: java.lang.Comparable;

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r3 = virtualinvoke r2.<com.mycila.inject.internal.guava.collect.ContiguousSet: java.util.Comparator comparator()>();

        $i0 = interfaceinvoke $r3.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>(r0, r1);

        if $i0 > 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: void checkArgument(boolean)>($z0);

        $r4 = virtualinvoke r2.<com.mycila.inject.internal.guava.collect.ContiguousSet: com.mycila.inject.internal.guava.collect.ContiguousSet subSet(java.lang.Comparable,boolean,java.lang.Comparable,boolean)>(r0, 1, r1, 0);

        return $r4;
    }

    com.mycila.inject.internal.guava.collect.ContiguousSet subSet(java.lang.Comparable, boolean, java.lang.Comparable, boolean)
    {
        com.mycila.inject.internal.guava.collect.ContiguousSet r2, $r4;
        int $i0;
        java.lang.Comparable r0, r1;
        java.util.Comparator $r3;
        boolean z0, z1, $z2;

        r2 := @this: com.mycila.inject.internal.guava.collect.ContiguousSet;

        r0 := @parameter0: java.lang.Comparable;

        z0 := @parameter1: boolean;

        r1 := @parameter2: java.lang.Comparable;

        z1 := @parameter3: boolean;

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r3 = virtualinvoke r2.<com.mycila.inject.internal.guava.collect.ContiguousSet: java.util.Comparator comparator()>();

        $i0 = interfaceinvoke $r3.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>(r0, r1);

        if $i0 > 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: void checkArgument(boolean)>($z2);

        $r4 = virtualinvoke r2.<com.mycila.inject.internal.guava.collect.ContiguousSet: com.mycila.inject.internal.guava.collect.ContiguousSet subSetImpl(java.lang.Comparable,boolean,java.lang.Comparable,boolean)>(r0, z0, r1, z1);

        return $r4;
    }

    public com.mycila.inject.internal.guava.collect.ContiguousSet tailSet(java.lang.Comparable)
    {
        com.mycila.inject.internal.guava.collect.ContiguousSet r0, $r4;
        java.lang.Comparable r1, $r3;
        java.lang.Object $r2;

        r0 := @this: com.mycila.inject.internal.guava.collect.ContiguousSet;

        r1 := @parameter0: java.lang.Comparable;

        $r2 = staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r3 = (java.lang.Comparable) $r2;

        $r4 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ContiguousSet: com.mycila.inject.internal.guava.collect.ContiguousSet tailSet(java.lang.Comparable,boolean)>($r3, 1);

        return $r4;
    }

    com.mycila.inject.internal.guava.collect.ContiguousSet tailSet(java.lang.Comparable, boolean)
    {
        com.mycila.inject.internal.guava.collect.ContiguousSet r0, $r4;
        java.lang.Comparable r1, $r3;
        java.lang.Object $r2;
        boolean z0;

        r0 := @this: com.mycila.inject.internal.guava.collect.ContiguousSet;

        r1 := @parameter0: java.lang.Comparable;

        z0 := @parameter1: boolean;

        $r2 = staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r3 = (java.lang.Comparable) $r2;

        $r4 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ContiguousSet: com.mycila.inject.internal.guava.collect.ContiguousSet tailSetImpl(java.lang.Comparable,boolean)>($r3, z0);

        return $r4;
    }

    abstract com.mycila.inject.internal.guava.collect.ContiguousSet headSetImpl(java.lang.Comparable, boolean);

    abstract com.mycila.inject.internal.guava.collect.ContiguousSet subSetImpl(java.lang.Comparable, boolean, java.lang.Comparable, boolean);

    abstract com.mycila.inject.internal.guava.collect.ContiguousSet tailSetImpl(java.lang.Comparable, boolean);

    public abstract com.mycila.inject.internal.guava.collect.ContiguousSet intersection(com.mycila.inject.internal.guava.collect.ContiguousSet);

    public abstract com.mycila.inject.internal.guava.collect.Range range();

    public abstract com.mycila.inject.internal.guava.collect.Range range(com.mycila.inject.internal.guava.collect.BoundType, com.mycila.inject.internal.guava.collect.BoundType);

    public java.lang.String toString()
    {
        com.mycila.inject.internal.guava.collect.Range $r1;
        java.lang.String $r2;
        com.mycila.inject.internal.guava.collect.ContiguousSet r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.ContiguousSet;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ContiguousSet: com.mycila.inject.internal.guava.collect.Range range()>();

        $r2 = virtualinvoke $r1.<com.mycila.inject.internal.guava.collect.Range: java.lang.String toString()>();

        return $r2;
    }

    volatile com.mycila.inject.internal.guava.collect.ImmutableSortedSet tailSetImpl(java.lang.Object, boolean)
    {
        com.mycila.inject.internal.guava.collect.ContiguousSet r0, $r3;
        java.lang.Object r1;
        java.lang.Comparable $r2;
        boolean z0;

        r0 := @this: com.mycila.inject.internal.guava.collect.ContiguousSet;

        r1 := @parameter0: java.lang.Object;

        z0 := @parameter1: boolean;

        $r2 = (java.lang.Comparable) r1;

        $r3 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ContiguousSet: com.mycila.inject.internal.guava.collect.ContiguousSet tailSetImpl(java.lang.Comparable,boolean)>($r2, z0);

        return $r3;
    }

    volatile com.mycila.inject.internal.guava.collect.ImmutableSortedSet subSetImpl(java.lang.Object, boolean, java.lang.Object, boolean)
    {
        com.mycila.inject.internal.guava.collect.ContiguousSet r0, $r5;
        java.lang.Object r1, r2;
        java.lang.Comparable $r3, $r4;
        boolean z0, z1;

        r0 := @this: com.mycila.inject.internal.guava.collect.ContiguousSet;

        r1 := @parameter0: java.lang.Object;

        z0 := @parameter1: boolean;

        r2 := @parameter2: java.lang.Object;

        z1 := @parameter3: boolean;

        $r4 = (java.lang.Comparable) r1;

        $r3 = (java.lang.Comparable) r2;

        $r5 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ContiguousSet: com.mycila.inject.internal.guava.collect.ContiguousSet subSetImpl(java.lang.Comparable,boolean,java.lang.Comparable,boolean)>($r4, z0, $r3, z1);

        return $r5;
    }

    volatile com.mycila.inject.internal.guava.collect.ImmutableSortedSet headSetImpl(java.lang.Object, boolean)
    {
        com.mycila.inject.internal.guava.collect.ContiguousSet r0, $r3;
        java.lang.Object r1;
        java.lang.Comparable $r2;
        boolean z0;

        r0 := @this: com.mycila.inject.internal.guava.collect.ContiguousSet;

        r1 := @parameter0: java.lang.Object;

        z0 := @parameter1: boolean;

        $r2 = (java.lang.Comparable) r1;

        $r3 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ContiguousSet: com.mycila.inject.internal.guava.collect.ContiguousSet headSetImpl(java.lang.Comparable,boolean)>($r2, z0);

        return $r3;
    }

    volatile com.mycila.inject.internal.guava.collect.ImmutableSortedSet tailSet(java.lang.Object, boolean)
    {
        com.mycila.inject.internal.guava.collect.ContiguousSet r0, $r3;
        java.lang.Object r1;
        java.lang.Comparable $r2;
        boolean z0;

        r0 := @this: com.mycila.inject.internal.guava.collect.ContiguousSet;

        r1 := @parameter0: java.lang.Object;

        z0 := @parameter1: boolean;

        $r2 = (java.lang.Comparable) r1;

        $r3 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ContiguousSet: com.mycila.inject.internal.guava.collect.ContiguousSet tailSet(java.lang.Comparable,boolean)>($r2, z0);

        return $r3;
    }

    public volatile com.mycila.inject.internal.guava.collect.ImmutableSortedSet tailSet(java.lang.Object)
    {
        com.mycila.inject.internal.guava.collect.ContiguousSet r0, $r3;
        java.lang.Object r1;
        java.lang.Comparable $r2;

        r0 := @this: com.mycila.inject.internal.guava.collect.ContiguousSet;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.Comparable) r1;

        $r3 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ContiguousSet: com.mycila.inject.internal.guava.collect.ContiguousSet tailSet(java.lang.Comparable)>($r2);

        return $r3;
    }

    volatile com.mycila.inject.internal.guava.collect.ImmutableSortedSet subSet(java.lang.Object, boolean, java.lang.Object, boolean)
    {
        com.mycila.inject.internal.guava.collect.ContiguousSet r0, $r5;
        java.lang.Object r1, r2;
        java.lang.Comparable $r3, $r4;
        boolean z0, z1;

        r0 := @this: com.mycila.inject.internal.guava.collect.ContiguousSet;

        r1 := @parameter0: java.lang.Object;

        z0 := @parameter1: boolean;

        r2 := @parameter2: java.lang.Object;

        z1 := @parameter3: boolean;

        $r4 = (java.lang.Comparable) r1;

        $r3 = (java.lang.Comparable) r2;

        $r5 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ContiguousSet: com.mycila.inject.internal.guava.collect.ContiguousSet subSet(java.lang.Comparable,boolean,java.lang.Comparable,boolean)>($r4, z0, $r3, z1);

        return $r5;
    }

    public volatile com.mycila.inject.internal.guava.collect.ImmutableSortedSet subSet(java.lang.Object, java.lang.Object)
    {
        com.mycila.inject.internal.guava.collect.ContiguousSet r0, $r5;
        java.lang.Object r1, r2;
        java.lang.Comparable $r3, $r4;

        r0 := @this: com.mycila.inject.internal.guava.collect.ContiguousSet;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (java.lang.Comparable) r1;

        $r3 = (java.lang.Comparable) r2;

        $r5 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ContiguousSet: com.mycila.inject.internal.guava.collect.ContiguousSet subSet(java.lang.Comparable,java.lang.Comparable)>($r4, $r3);

        return $r5;
    }

    volatile com.mycila.inject.internal.guava.collect.ImmutableSortedSet headSet(java.lang.Object, boolean)
    {
        com.mycila.inject.internal.guava.collect.ContiguousSet r0, $r3;
        java.lang.Object r1;
        java.lang.Comparable $r2;
        boolean z0;

        r0 := @this: com.mycila.inject.internal.guava.collect.ContiguousSet;

        r1 := @parameter0: java.lang.Object;

        z0 := @parameter1: boolean;

        $r2 = (java.lang.Comparable) r1;

        $r3 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ContiguousSet: com.mycila.inject.internal.guava.collect.ContiguousSet headSet(java.lang.Comparable,boolean)>($r2, z0);

        return $r3;
    }

    public volatile com.mycila.inject.internal.guava.collect.ImmutableSortedSet headSet(java.lang.Object)
    {
        com.mycila.inject.internal.guava.collect.ContiguousSet r0, $r3;
        java.lang.Object r1;
        java.lang.Comparable $r2;

        r0 := @this: com.mycila.inject.internal.guava.collect.ContiguousSet;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.Comparable) r1;

        $r3 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ContiguousSet: com.mycila.inject.internal.guava.collect.ContiguousSet headSet(java.lang.Comparable)>($r2);

        return $r3;
    }

    public volatile java.util.SortedSet tailSet(java.lang.Object)
    {
        com.mycila.inject.internal.guava.collect.ContiguousSet r0, $r3;
        java.lang.Object r1;
        java.lang.Comparable $r2;

        r0 := @this: com.mycila.inject.internal.guava.collect.ContiguousSet;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.Comparable) r1;

        $r3 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ContiguousSet: com.mycila.inject.internal.guava.collect.ContiguousSet tailSet(java.lang.Comparable)>($r2);

        return $r3;
    }

    public volatile java.util.SortedSet headSet(java.lang.Object)
    {
        com.mycila.inject.internal.guava.collect.ContiguousSet r0, $r3;
        java.lang.Object r1;
        java.lang.Comparable $r2;

        r0 := @this: com.mycila.inject.internal.guava.collect.ContiguousSet;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.Comparable) r1;

        $r3 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ContiguousSet: com.mycila.inject.internal.guava.collect.ContiguousSet headSet(java.lang.Comparable)>($r2);

        return $r3;
    }

    public volatile java.util.SortedSet subSet(java.lang.Object, java.lang.Object)
    {
        com.mycila.inject.internal.guava.collect.ContiguousSet r0, $r5;
        java.lang.Object r1, r2;
        java.lang.Comparable $r3, $r4;

        r0 := @this: com.mycila.inject.internal.guava.collect.ContiguousSet;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (java.lang.Comparable) r1;

        $r3 = (java.lang.Comparable) r2;

        $r5 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ContiguousSet: com.mycila.inject.internal.guava.collect.ContiguousSet subSet(java.lang.Comparable,java.lang.Comparable)>($r4, $r3);

        return $r5;
    }
}
