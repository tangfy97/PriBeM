class org.apache.pdfbox.encoding.SingleByteCharset$Decoder extends java.nio.charset.CharsetDecoder
{
    final org.apache.pdfbox.encoding.SingleByteCharset this$0;

    protected void <init>(org.apache.pdfbox.encoding.SingleByteCharset)
    {
        org.apache.pdfbox.encoding.SingleByteCharset$Decoder r0;
        org.apache.pdfbox.encoding.SingleByteCharset r1;

        r0 := @this: org.apache.pdfbox.encoding.SingleByteCharset$Decoder;

        r1 := @parameter0: org.apache.pdfbox.encoding.SingleByteCharset;

        r0.<org.apache.pdfbox.encoding.SingleByteCharset$Decoder: org.apache.pdfbox.encoding.SingleByteCharset this$0> = r1;

        specialinvoke r0.<java.nio.charset.CharsetDecoder: void <init>(java.nio.charset.Charset,float,float)>(r1, 1.0F, 1.0F);

        return;
    }

    protected java.nio.charset.CoderResult decodeLoop(java.nio.ByteBuffer, java.nio.CharBuffer)
    {
        java.nio.ByteBuffer r0;
        short $s1, $s7;
        java.nio.charset.CoderResult $r1, $r6, $r7;
        byte $b0;
        int $i3, $i4, $i5, $i6, $i8, $i9, $i11;
        boolean $z0, $z1;
        org.apache.pdfbox.encoding.SingleByteCharset$Decoder r3;
        org.apache.pdfbox.encoding.SingleByteCharset $r4;
        java.nio.CharBuffer r2;
        char c2;
        char[] $r5;

        r3 := @this: org.apache.pdfbox.encoding.SingleByteCharset$Decoder;

        r0 := @parameter0: java.nio.ByteBuffer;

        r2 := @parameter1: java.nio.CharBuffer;

     label1:
        $z0 = virtualinvoke r0.<java.nio.ByteBuffer: boolean hasRemaining()>();

        if $z0 == 0 goto label4;

        $b0 = virtualinvoke r0.<java.nio.ByteBuffer: byte get()>();

        $z1 = virtualinvoke r2.<java.nio.CharBuffer: boolean hasRemaining()>();

        if $z1 != 0 goto label2;

        $i5 = virtualinvoke r0.<java.nio.ByteBuffer: int position()>();

        $i6 = $i5 - 1;

        virtualinvoke r0.<java.nio.ByteBuffer: java.nio.Buffer position(int)>($i6);

        $r7 = <java.nio.charset.CoderResult: java.nio.charset.CoderResult OVERFLOW>;

        return $r7;

     label2:
        $r4 = r3.<org.apache.pdfbox.encoding.SingleByteCharset$Decoder: org.apache.pdfbox.encoding.SingleByteCharset this$0>;

        $r5 = staticinvoke <org.apache.pdfbox.encoding.SingleByteCharset: char[] access$000(org.apache.pdfbox.encoding.SingleByteCharset)>($r4);

        $s7 = (short) $b0;

        $s1 = $s7 & 255;

        $i8 = (int) $s1;

        c2 = $r5[$i8];

        $i9 = (int) c2;

        $i11 = (int) 65533;

        if $i9 != $i11 goto label3;

        $i3 = virtualinvoke r0.<java.nio.ByteBuffer: int position()>();

        $i4 = $i3 - 1;

        virtualinvoke r0.<java.nio.ByteBuffer: java.nio.Buffer position(int)>($i4);

        $r6 = staticinvoke <java.nio.charset.CoderResult: java.nio.charset.CoderResult unmappableForLength(int)>(1);

        return $r6;

     label3:
        virtualinvoke r2.<java.nio.CharBuffer: java.nio.CharBuffer put(char)>(c2);

        goto label1;

     label4:
        $r1 = <java.nio.charset.CoderResult: java.nio.charset.CoderResult UNDERFLOW>;

        return $r1;
    }
}
