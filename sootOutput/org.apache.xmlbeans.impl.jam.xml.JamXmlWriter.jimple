class org.apache.xmlbeans.impl.jam.xml.JamXmlWriter extends java.lang.Object implements org.apache.xmlbeans.impl.jam.xml.JamXmlElements
{
    private javax.xml.stream.XMLStreamWriter mOut;
    private boolean mInBody;
    private boolean mWriteSourceURI;

    public void <init>(java.io.Writer) throws javax.xml.stream.XMLStreamException
    {
        javax.xml.stream.XMLOutputFactory $r2;
        java.io.Writer r1;
        javax.xml.stream.XMLStreamWriter $r3;
        java.lang.IllegalArgumentException $r4;
        org.apache.xmlbeans.impl.jam.xml.JamXmlWriter r0;

        r0 := @this: org.apache.xmlbeans.impl.jam.xml.JamXmlWriter;

        r1 := @parameter0: java.io.Writer;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.xmlbeans.impl.jam.xml.JamXmlWriter: boolean mInBody> = 0;

        r0.<org.apache.xmlbeans.impl.jam.xml.JamXmlWriter: boolean mWriteSourceURI> = 0;

        if r1 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("null out");

        throw $r4;

     label1:
        $r2 = staticinvoke <javax.xml.stream.XMLOutputFactory: javax.xml.stream.XMLOutputFactory newInstance()>();

        $r3 = virtualinvoke $r2.<javax.xml.stream.XMLOutputFactory: javax.xml.stream.XMLStreamWriter createXMLStreamWriter(java.io.Writer)>(r1);

        r0.<org.apache.xmlbeans.impl.jam.xml.JamXmlWriter: javax.xml.stream.XMLStreamWriter mOut> = $r3;

        return;
    }

    public void <init>(javax.xml.stream.XMLStreamWriter)
    {
        javax.xml.stream.XMLStreamWriter r1;
        java.lang.IllegalArgumentException $r2;
        org.apache.xmlbeans.impl.jam.xml.JamXmlWriter r0;

        r0 := @this: org.apache.xmlbeans.impl.jam.xml.JamXmlWriter;

        r1 := @parameter0: javax.xml.stream.XMLStreamWriter;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.xmlbeans.impl.jam.xml.JamXmlWriter: boolean mInBody> = 0;

        r0.<org.apache.xmlbeans.impl.jam.xml.JamXmlWriter: boolean mWriteSourceURI> = 0;

        if r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("null out");

        throw $r2;

     label1:
        r0.<org.apache.xmlbeans.impl.jam.xml.JamXmlWriter: javax.xml.stream.XMLStreamWriter mOut> = r1;

        return;
    }

    public void begin() throws javax.xml.stream.XMLStreamException
    {
        javax.xml.stream.XMLStreamException $r2;
        javax.xml.stream.XMLStreamWriter $r1;
        org.apache.xmlbeans.impl.jam.xml.JamXmlWriter r0;
        boolean $z0;

        r0 := @this: org.apache.xmlbeans.impl.jam.xml.JamXmlWriter;

        $z0 = r0.<org.apache.xmlbeans.impl.jam.xml.JamXmlWriter: boolean mInBody>;

        if $z0 == 0 goto label1;

        $r2 = new javax.xml.stream.XMLStreamException;

        specialinvoke $r2.<javax.xml.stream.XMLStreamException: void <init>(java.lang.String)>("begin() already called");

        throw $r2;

     label1:
        $r1 = r0.<org.apache.xmlbeans.impl.jam.xml.JamXmlWriter: javax.xml.stream.XMLStreamWriter mOut>;

        interfaceinvoke $r1.<javax.xml.stream.XMLStreamWriter: void writeStartElement(java.lang.String)>("jam-service");

        r0.<org.apache.xmlbeans.impl.jam.xml.JamXmlWriter: boolean mInBody> = 1;

        return;
    }

    public void end() throws javax.xml.stream.XMLStreamException
    {
        javax.xml.stream.XMLStreamException $r2;
        javax.xml.stream.XMLStreamWriter $r1;
        org.apache.xmlbeans.impl.jam.xml.JamXmlWriter r0;
        boolean $z0;

        r0 := @this: org.apache.xmlbeans.impl.jam.xml.JamXmlWriter;

        $z0 = r0.<org.apache.xmlbeans.impl.jam.xml.JamXmlWriter: boolean mInBody>;

        if $z0 != 0 goto label1;

        $r2 = new javax.xml.stream.XMLStreamException;

        specialinvoke $r2.<javax.xml.stream.XMLStreamException: void <init>(java.lang.String)>("begin() never called");

        throw $r2;

     label1:
        $r1 = r0.<org.apache.xmlbeans.impl.jam.xml.JamXmlWriter: javax.xml.stream.XMLStreamWriter mOut>;

        interfaceinvoke $r1.<javax.xml.stream.XMLStreamWriter: void writeEndElement()>();

        r0.<org.apache.xmlbeans.impl.jam.xml.JamXmlWriter: boolean mInBody> = 0;

        return;
    }

    public void write(org.apache.xmlbeans.impl.jam.JClass) throws javax.xml.stream.XMLStreamException
    {
        org.apache.xmlbeans.impl.jam.JConstructor[] $r7;
        org.apache.xmlbeans.impl.jam.JField $r12;
        org.apache.xmlbeans.impl.jam.JMethod[] $r8;
        org.apache.xmlbeans.impl.jam.JConstructor $r11;
        int $i0, $i1, $i2, i3, $i4, i5, i6;
        javax.xml.stream.XMLStreamWriter $r1, $r9;
        java.lang.String $r3, $r13;
        org.apache.xmlbeans.impl.jam.JClass[] $r5;
        org.apache.xmlbeans.impl.jam.xml.JamXmlWriter r0;
        boolean $z0;
        org.apache.xmlbeans.impl.jam.JClass r2, $r4;
        org.apache.xmlbeans.impl.jam.JField[] $r6;
        org.apache.xmlbeans.impl.jam.JMethod $r10;

        r0 := @this: org.apache.xmlbeans.impl.jam.xml.JamXmlWriter;

        r2 := @parameter0: org.apache.xmlbeans.impl.jam.JClass;

        specialinvoke r0.<org.apache.xmlbeans.impl.jam.xml.JamXmlWriter: void assertStarted()>();

        $r1 = r0.<org.apache.xmlbeans.impl.jam.xml.JamXmlWriter: javax.xml.stream.XMLStreamWriter mOut>;

        interfaceinvoke $r1.<javax.xml.stream.XMLStreamWriter: void writeStartElement(java.lang.String)>("class");

        $r3 = interfaceinvoke r2.<org.apache.xmlbeans.impl.jam.JClass: java.lang.String getFieldDescriptor()>();

        specialinvoke r0.<org.apache.xmlbeans.impl.jam.xml.JamXmlWriter: void writeValueElement(java.lang.String,java.lang.String)>("name", $r3);

        $z0 = interfaceinvoke r2.<org.apache.xmlbeans.impl.jam.JClass: boolean isInterface()>();

        specialinvoke r0.<org.apache.xmlbeans.impl.jam.xml.JamXmlWriter: void writeValueElement(java.lang.String,boolean)>("is-interface", $z0);

        $i0 = interfaceinvoke r2.<org.apache.xmlbeans.impl.jam.JClass: int getModifiers()>();

        specialinvoke r0.<org.apache.xmlbeans.impl.jam.xml.JamXmlWriter: void writeModifiers(int)>($i0);

        $r4 = interfaceinvoke r2.<org.apache.xmlbeans.impl.jam.JClass: org.apache.xmlbeans.impl.jam.JClass getSuperclass()>();

        if $r4 == null goto label1;

        $r13 = interfaceinvoke $r4.<org.apache.xmlbeans.impl.jam.JClass: java.lang.String getFieldDescriptor()>();

        specialinvoke r0.<org.apache.xmlbeans.impl.jam.xml.JamXmlWriter: void writeValueElement(java.lang.String,java.lang.String)>("superclass", $r13);

     label1:
        $r5 = interfaceinvoke r2.<org.apache.xmlbeans.impl.jam.JClass: org.apache.xmlbeans.impl.jam.JClass[] getInterfaces()>();

        specialinvoke r0.<org.apache.xmlbeans.impl.jam.xml.JamXmlWriter: void writeClassList(java.lang.String,org.apache.xmlbeans.impl.jam.JClass[])>("interface", $r5);

        $r6 = interfaceinvoke r2.<org.apache.xmlbeans.impl.jam.JClass: org.apache.xmlbeans.impl.jam.JField[] getDeclaredFields()>();

        i3 = 0;

     label2:
        $i4 = lengthof $r6;

        if i3 >= $i4 goto label3;

        $r12 = $r6[i3];

        specialinvoke r0.<org.apache.xmlbeans.impl.jam.xml.JamXmlWriter: void write(org.apache.xmlbeans.impl.jam.JField)>($r12);

        i3 = i3 + 1;

        goto label2;

     label3:
        $r7 = interfaceinvoke r2.<org.apache.xmlbeans.impl.jam.JClass: org.apache.xmlbeans.impl.jam.JConstructor[] getConstructors()>();

        i5 = 0;

     label4:
        $i1 = lengthof $r7;

        if i5 >= $i1 goto label5;

        $r11 = $r7[i5];

        specialinvoke r0.<org.apache.xmlbeans.impl.jam.xml.JamXmlWriter: void write(org.apache.xmlbeans.impl.jam.JConstructor)>($r11);

        i5 = i5 + 1;

        goto label4;

     label5:
        $r8 = interfaceinvoke r2.<org.apache.xmlbeans.impl.jam.JClass: org.apache.xmlbeans.impl.jam.JMethod[] getDeclaredMethods()>();

        i6 = 0;

     label6:
        $i2 = lengthof $r8;

        if i6 >= $i2 goto label7;

        $r10 = $r8[i6];

        specialinvoke r0.<org.apache.xmlbeans.impl.jam.xml.JamXmlWriter: void write(org.apache.xmlbeans.impl.jam.JMethod)>($r10);

        i6 = i6 + 1;

        goto label6;

     label7:
        specialinvoke r0.<org.apache.xmlbeans.impl.jam.xml.JamXmlWriter: void writeAnnotatedElement(org.apache.xmlbeans.impl.jam.JAnnotatedElement)>(r2);

        $r9 = r0.<org.apache.xmlbeans.impl.jam.xml.JamXmlWriter: javax.xml.stream.XMLStreamWriter mOut>;

        interfaceinvoke $r9.<javax.xml.stream.XMLStreamWriter: void writeEndElement()>();

        return;
    }

    private void write(org.apache.xmlbeans.impl.jam.JMethod) throws javax.xml.stream.XMLStreamException
    {
        javax.xml.stream.XMLStreamWriter $r1, $r6;
        java.lang.String $r3, $r5;
        org.apache.xmlbeans.impl.jam.JMethod r2;
        org.apache.xmlbeans.impl.jam.JClass $r4;
        org.apache.xmlbeans.impl.jam.xml.JamXmlWriter r0;

        r0 := @this: org.apache.xmlbeans.impl.jam.xml.JamXmlWriter;

        r2 := @parameter0: org.apache.xmlbeans.impl.jam.JMethod;

        $r1 = r0.<org.apache.xmlbeans.impl.jam.xml.JamXmlWriter: javax.xml.stream.XMLStreamWriter mOut>;

        interfaceinvoke $r1.<javax.xml.stream.XMLStreamWriter: void writeStartElement(java.lang.String)>("method");

        $r3 = interfaceinvoke r2.<org.apache.xmlbeans.impl.jam.JMethod: java.lang.String getSimpleName()>();

        specialinvoke r0.<org.apache.xmlbeans.impl.jam.xml.JamXmlWriter: void writeValueElement(java.lang.String,java.lang.String)>("name", $r3);

        $r4 = interfaceinvoke r2.<org.apache.xmlbeans.impl.jam.JMethod: org.apache.xmlbeans.impl.jam.JClass getReturnType()>();

        $r5 = interfaceinvoke $r4.<org.apache.xmlbeans.impl.jam.JClass: java.lang.String getFieldDescriptor()>();

        specialinvoke r0.<org.apache.xmlbeans.impl.jam.xml.JamXmlWriter: void writeValueElement(java.lang.String,java.lang.String)>("return-type", $r5);

        specialinvoke r0.<org.apache.xmlbeans.impl.jam.xml.JamXmlWriter: void writeInvokable(org.apache.xmlbeans.impl.jam.JInvokable)>(r2);

        $r6 = r0.<org.apache.xmlbeans.impl.jam.xml.JamXmlWriter: javax.xml.stream.XMLStreamWriter mOut>;

        interfaceinvoke $r6.<javax.xml.stream.XMLStreamWriter: void writeEndElement()>();

        return;
    }

    private void write(org.apache.xmlbeans.impl.jam.JConstructor) throws javax.xml.stream.XMLStreamException
    {
        org.apache.xmlbeans.impl.jam.JConstructor r2;
        javax.xml.stream.XMLStreamWriter $r1, $r3;
        org.apache.xmlbeans.impl.jam.xml.JamXmlWriter r0;

        r0 := @this: org.apache.xmlbeans.impl.jam.xml.JamXmlWriter;

        r2 := @parameter0: org.apache.xmlbeans.impl.jam.JConstructor;

        $r1 = r0.<org.apache.xmlbeans.impl.jam.xml.JamXmlWriter: javax.xml.stream.XMLStreamWriter mOut>;

        interfaceinvoke $r1.<javax.xml.stream.XMLStreamWriter: void writeStartElement(java.lang.String)>("constructor");

        specialinvoke r0.<org.apache.xmlbeans.impl.jam.xml.JamXmlWriter: void writeInvokable(org.apache.xmlbeans.impl.jam.JInvokable)>(r2);

        $r3 = r0.<org.apache.xmlbeans.impl.jam.xml.JamXmlWriter: javax.xml.stream.XMLStreamWriter mOut>;

        interfaceinvoke $r3.<javax.xml.stream.XMLStreamWriter: void writeEndElement()>();

        return;
    }

    private void write(org.apache.xmlbeans.impl.jam.JField) throws javax.xml.stream.XMLStreamException
    {
        org.apache.xmlbeans.impl.jam.JField r2;
        org.apache.xmlbeans.impl.jam.JClass $r4;
        int $i0;
        javax.xml.stream.XMLStreamWriter $r1, $r6;
        java.lang.String $r3, $r5;
        org.apache.xmlbeans.impl.jam.xml.JamXmlWriter r0;

        r0 := @this: org.apache.xmlbeans.impl.jam.xml.JamXmlWriter;

        r2 := @parameter0: org.apache.xmlbeans.impl.jam.JField;

        $r1 = r0.<org.apache.xmlbeans.impl.jam.xml.JamXmlWriter: javax.xml.stream.XMLStreamWriter mOut>;

        interfaceinvoke $r1.<javax.xml.stream.XMLStreamWriter: void writeStartElement(java.lang.String)>("field");

        $r3 = interfaceinvoke r2.<org.apache.xmlbeans.impl.jam.JField: java.lang.String getSimpleName()>();

        specialinvoke r0.<org.apache.xmlbeans.impl.jam.xml.JamXmlWriter: void writeValueElement(java.lang.String,java.lang.String)>("name", $r3);

        $i0 = interfaceinvoke r2.<org.apache.xmlbeans.impl.jam.JField: int getModifiers()>();

        specialinvoke r0.<org.apache.xmlbeans.impl.jam.xml.JamXmlWriter: void writeModifiers(int)>($i0);

        $r4 = interfaceinvoke r2.<org.apache.xmlbeans.impl.jam.JField: org.apache.xmlbeans.impl.jam.JClass getType()>();

        $r5 = interfaceinvoke $r4.<org.apache.xmlbeans.impl.jam.JClass: java.lang.String getFieldDescriptor()>();

        specialinvoke r0.<org.apache.xmlbeans.impl.jam.xml.JamXmlWriter: void writeValueElement(java.lang.String,java.lang.String)>("type", $r5);

        specialinvoke r0.<org.apache.xmlbeans.impl.jam.xml.JamXmlWriter: void writeAnnotatedElement(org.apache.xmlbeans.impl.jam.JAnnotatedElement)>(r2);

        $r6 = r0.<org.apache.xmlbeans.impl.jam.xml.JamXmlWriter: javax.xml.stream.XMLStreamWriter mOut>;

        interfaceinvoke $r6.<javax.xml.stream.XMLStreamWriter: void writeEndElement()>();

        return;
    }

    private void writeInvokable(org.apache.xmlbeans.impl.jam.JInvokable) throws javax.xml.stream.XMLStreamException
    {
        org.apache.xmlbeans.impl.jam.JParameter[] $r2;
        org.apache.xmlbeans.impl.jam.JInvokable r1;
        org.apache.xmlbeans.impl.jam.JClass $r7;
        org.apache.xmlbeans.impl.jam.JParameter $r4, $r6, $r9;
        int $i0, $i1, i2;
        javax.xml.stream.XMLStreamWriter $r3, $r10;
        java.lang.String $r5, $r8;
        org.apache.xmlbeans.impl.jam.xml.JamXmlWriter r0;

        r0 := @this: org.apache.xmlbeans.impl.jam.xml.JamXmlWriter;

        r1 := @parameter0: org.apache.xmlbeans.impl.jam.JInvokable;

        $i0 = interfaceinvoke r1.<org.apache.xmlbeans.impl.jam.JInvokable: int getModifiers()>();

        specialinvoke r0.<org.apache.xmlbeans.impl.jam.xml.JamXmlWriter: void writeModifiers(int)>($i0);

        $r2 = interfaceinvoke r1.<org.apache.xmlbeans.impl.jam.JInvokable: org.apache.xmlbeans.impl.jam.JParameter[] getParameters()>();

        i2 = 0;

     label1:
        $i1 = lengthof $r2;

        if i2 >= $i1 goto label2;

        $r3 = r0.<org.apache.xmlbeans.impl.jam.xml.JamXmlWriter: javax.xml.stream.XMLStreamWriter mOut>;

        interfaceinvoke $r3.<javax.xml.stream.XMLStreamWriter: void writeStartElement(java.lang.String)>("parameter");

        $r4 = $r2[i2];

        $r5 = interfaceinvoke $r4.<org.apache.xmlbeans.impl.jam.JParameter: java.lang.String getSimpleName()>();

        specialinvoke r0.<org.apache.xmlbeans.impl.jam.xml.JamXmlWriter: void writeValueElement(java.lang.String,java.lang.String)>("name", $r5);

        $r6 = $r2[i2];

        $r7 = interfaceinvoke $r6.<org.apache.xmlbeans.impl.jam.JParameter: org.apache.xmlbeans.impl.jam.JClass getType()>();

        $r8 = interfaceinvoke $r7.<org.apache.xmlbeans.impl.jam.JClass: java.lang.String getFieldDescriptor()>();

        specialinvoke r0.<org.apache.xmlbeans.impl.jam.xml.JamXmlWriter: void writeValueElement(java.lang.String,java.lang.String)>("type", $r8);

        $r9 = $r2[i2];

        specialinvoke r0.<org.apache.xmlbeans.impl.jam.xml.JamXmlWriter: void writeAnnotatedElement(org.apache.xmlbeans.impl.jam.JAnnotatedElement)>($r9);

        $r10 = r0.<org.apache.xmlbeans.impl.jam.xml.JamXmlWriter: javax.xml.stream.XMLStreamWriter mOut>;

        interfaceinvoke $r10.<javax.xml.stream.XMLStreamWriter: void writeEndElement()>();

        i2 = i2 + 1;

        goto label1;

     label2:
        specialinvoke r0.<org.apache.xmlbeans.impl.jam.xml.JamXmlWriter: void writeAnnotatedElement(org.apache.xmlbeans.impl.jam.JAnnotatedElement)>(r1);

        return;
    }

    private void writeClassList(java.lang.String, org.apache.xmlbeans.impl.jam.JClass[]) throws javax.xml.stream.XMLStreamException
    {
        org.apache.xmlbeans.impl.jam.JClass $r4;
        int $i0, i1;
        javax.xml.stream.XMLStreamWriter $r3, $r5, $r7;
        org.apache.xmlbeans.impl.jam.JClass[] r0;
        java.lang.String r2, $r6;
        org.apache.xmlbeans.impl.jam.xml.JamXmlWriter r1;

        r1 := @this: org.apache.xmlbeans.impl.jam.xml.JamXmlWriter;

        r2 := @parameter0: java.lang.String;

        r0 := @parameter1: org.apache.xmlbeans.impl.jam.JClass[];

        i1 = 0;

     label1:
        $i0 = lengthof r0;

        if i1 >= $i0 goto label2;

        $r3 = r1.<org.apache.xmlbeans.impl.jam.xml.JamXmlWriter: javax.xml.stream.XMLStreamWriter mOut>;

        interfaceinvoke $r3.<javax.xml.stream.XMLStreamWriter: void writeStartElement(java.lang.String)>(r2);

        $r5 = r1.<org.apache.xmlbeans.impl.jam.xml.JamXmlWriter: javax.xml.stream.XMLStreamWriter mOut>;

        $r4 = r0[i1];

        $r6 = interfaceinvoke $r4.<org.apache.xmlbeans.impl.jam.JClass: java.lang.String getFieldDescriptor()>();

        interfaceinvoke $r5.<javax.xml.stream.XMLStreamWriter: void writeCharacters(java.lang.String)>($r6);

        $r7 = r1.<org.apache.xmlbeans.impl.jam.xml.JamXmlWriter: javax.xml.stream.XMLStreamWriter mOut>;

        interfaceinvoke $r7.<javax.xml.stream.XMLStreamWriter: void writeEndElement()>();

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    private void writeModifiers(int) throws javax.xml.stream.XMLStreamException
    {
        int i0;
        javax.xml.stream.XMLStreamWriter $r1, $r2, $r4;
        java.lang.String $r3;
        org.apache.xmlbeans.impl.jam.xml.JamXmlWriter r0;

        r0 := @this: org.apache.xmlbeans.impl.jam.xml.JamXmlWriter;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.xmlbeans.impl.jam.xml.JamXmlWriter: javax.xml.stream.XMLStreamWriter mOut>;

        interfaceinvoke $r1.<javax.xml.stream.XMLStreamWriter: void writeStartElement(java.lang.String)>("modifiers");

        $r2 = r0.<org.apache.xmlbeans.impl.jam.xml.JamXmlWriter: javax.xml.stream.XMLStreamWriter mOut>;

        $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(i0);

        interfaceinvoke $r2.<javax.xml.stream.XMLStreamWriter: void writeCharacters(java.lang.String)>($r3);

        $r4 = r0.<org.apache.xmlbeans.impl.jam.xml.JamXmlWriter: javax.xml.stream.XMLStreamWriter mOut>;

        interfaceinvoke $r4.<javax.xml.stream.XMLStreamWriter: void writeEndElement()>();

        return;
    }

    private void writeValueElement(java.lang.String, boolean) throws javax.xml.stream.XMLStreamException
    {
        javax.xml.stream.XMLStreamWriter $r2, $r3, $r5;
        java.lang.String r1, $r4;
        org.apache.xmlbeans.impl.jam.xml.JamXmlWriter r0;
        boolean z0;

        r0 := @this: org.apache.xmlbeans.impl.jam.xml.JamXmlWriter;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        $r2 = r0.<org.apache.xmlbeans.impl.jam.xml.JamXmlWriter: javax.xml.stream.XMLStreamWriter mOut>;

        interfaceinvoke $r2.<javax.xml.stream.XMLStreamWriter: void writeStartElement(java.lang.String)>(r1);

        $r3 = r0.<org.apache.xmlbeans.impl.jam.xml.JamXmlWriter: javax.xml.stream.XMLStreamWriter mOut>;

        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(boolean)>(z0);

        interfaceinvoke $r3.<javax.xml.stream.XMLStreamWriter: void writeCharacters(java.lang.String)>($r4);

        $r5 = r0.<org.apache.xmlbeans.impl.jam.xml.JamXmlWriter: javax.xml.stream.XMLStreamWriter mOut>;

        interfaceinvoke $r5.<javax.xml.stream.XMLStreamWriter: void writeEndElement()>();

        return;
    }

    private void writeValueElement(java.lang.String, int) throws javax.xml.stream.XMLStreamException
    {
        int i0;
        javax.xml.stream.XMLStreamWriter $r2, $r3, $r5;
        java.lang.String r1, $r4;
        org.apache.xmlbeans.impl.jam.xml.JamXmlWriter r0;

        r0 := @this: org.apache.xmlbeans.impl.jam.xml.JamXmlWriter;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r2 = r0.<org.apache.xmlbeans.impl.jam.xml.JamXmlWriter: javax.xml.stream.XMLStreamWriter mOut>;

        interfaceinvoke $r2.<javax.xml.stream.XMLStreamWriter: void writeStartElement(java.lang.String)>(r1);

        $r3 = r0.<org.apache.xmlbeans.impl.jam.xml.JamXmlWriter: javax.xml.stream.XMLStreamWriter mOut>;

        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(i0);

        interfaceinvoke $r3.<javax.xml.stream.XMLStreamWriter: void writeCharacters(java.lang.String)>($r4);

        $r5 = r0.<org.apache.xmlbeans.impl.jam.xml.JamXmlWriter: javax.xml.stream.XMLStreamWriter mOut>;

        interfaceinvoke $r5.<javax.xml.stream.XMLStreamWriter: void writeEndElement()>();

        return;
    }

    private void writeValueElement(java.lang.String, java.lang.String) throws javax.xml.stream.XMLStreamException
    {
        javax.xml.stream.XMLStreamWriter $r2, $r4, $r5;
        java.lang.String r1, r3;
        org.apache.xmlbeans.impl.jam.xml.JamXmlWriter r0;

        r0 := @this: org.apache.xmlbeans.impl.jam.xml.JamXmlWriter;

        r1 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        $r2 = r0.<org.apache.xmlbeans.impl.jam.xml.JamXmlWriter: javax.xml.stream.XMLStreamWriter mOut>;

        interfaceinvoke $r2.<javax.xml.stream.XMLStreamWriter: void writeStartElement(java.lang.String)>(r1);

        $r4 = r0.<org.apache.xmlbeans.impl.jam.xml.JamXmlWriter: javax.xml.stream.XMLStreamWriter mOut>;

        interfaceinvoke $r4.<javax.xml.stream.XMLStreamWriter: void writeCharacters(java.lang.String)>(r3);

        $r5 = r0.<org.apache.xmlbeans.impl.jam.xml.JamXmlWriter: javax.xml.stream.XMLStreamWriter mOut>;

        interfaceinvoke $r5.<javax.xml.stream.XMLStreamWriter: void writeEndElement()>();

        return;
    }

    private void writeValueElement(java.lang.String, java.lang.String[]) throws javax.xml.stream.XMLStreamException
    {
        int $i0, i1;
        java.lang.String[] r0;
        java.lang.String r2, $r3;
        org.apache.xmlbeans.impl.jam.xml.JamXmlWriter r1;

        r1 := @this: org.apache.xmlbeans.impl.jam.xml.JamXmlWriter;

        r2 := @parameter0: java.lang.String;

        r0 := @parameter1: java.lang.String[];

        i1 = 0;

     label1:
        $i0 = lengthof r0;

        if i1 >= $i0 goto label2;

        $r3 = r0[i1];

        specialinvoke r1.<org.apache.xmlbeans.impl.jam.xml.JamXmlWriter: void writeValueElement(java.lang.String,java.lang.String)>(r2, $r3);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    private void writeAnnotatedElement(org.apache.xmlbeans.impl.jam.JAnnotatedElement) throws javax.xml.stream.XMLStreamException
    {
        org.apache.xmlbeans.impl.jam.JAnnotation[] $r1;
        org.apache.xmlbeans.impl.jam.JComment $r2;
        org.apache.xmlbeans.impl.jam.JAnnotatedElement r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, $i8, $i10;
        javax.xml.stream.XMLStreamWriter $r4, $r10, $r11, $r13, $r16;
        java.net.URI $r5, $r6;
        java.lang.String $r7, $r8, $r9, $r12;
        org.apache.xmlbeans.impl.jam.xml.JamXmlWriter r3;
        boolean $z0;
        org.apache.xmlbeans.impl.jam.JAnnotation $r14;
        org.apache.xmlbeans.impl.jam.JSourcePosition $r15;

        r3 := @this: org.apache.xmlbeans.impl.jam.xml.JamXmlWriter;

        r0 := @parameter0: org.apache.xmlbeans.impl.jam.JAnnotatedElement;

        $r1 = interfaceinvoke r0.<org.apache.xmlbeans.impl.jam.JAnnotatedElement: org.apache.xmlbeans.impl.jam.JAnnotation[] getAnnotations()>();

        i6 = 0;

     label1:
        $i0 = lengthof $r1;

        if i6 >= $i0 goto label2;

        $r14 = $r1[i6];

        specialinvoke r3.<org.apache.xmlbeans.impl.jam.xml.JamXmlWriter: void writeAnnotation(org.apache.xmlbeans.impl.jam.JAnnotation)>($r14);

        i6 = i6 + 1;

        goto label1;

     label2:
        $r2 = interfaceinvoke r0.<org.apache.xmlbeans.impl.jam.JAnnotatedElement: org.apache.xmlbeans.impl.jam.JComment getComment()>();

        if $r2 == null goto label3;

        $r8 = interfaceinvoke $r2.<org.apache.xmlbeans.impl.jam.JComment: java.lang.String getText()>();

        if $r8 == null goto label3;

        $r9 = virtualinvoke $r8.<java.lang.String: java.lang.String trim()>();

        $i5 = virtualinvoke $r9.<java.lang.String: int length()>();

        if $i5 <= 0 goto label3;

        $r10 = r3.<org.apache.xmlbeans.impl.jam.xml.JamXmlWriter: javax.xml.stream.XMLStreamWriter mOut>;

        interfaceinvoke $r10.<javax.xml.stream.XMLStreamWriter: void writeStartElement(java.lang.String)>("comment");

        $r11 = r3.<org.apache.xmlbeans.impl.jam.xml.JamXmlWriter: javax.xml.stream.XMLStreamWriter mOut>;

        $r12 = interfaceinvoke $r2.<org.apache.xmlbeans.impl.jam.JComment: java.lang.String getText()>();

        interfaceinvoke $r11.<javax.xml.stream.XMLStreamWriter: void writeCData(java.lang.String)>($r12);

        $r13 = r3.<org.apache.xmlbeans.impl.jam.xml.JamXmlWriter: javax.xml.stream.XMLStreamWriter mOut>;

        interfaceinvoke $r13.<javax.xml.stream.XMLStreamWriter: void writeEndElement()>();

     label3:
        $r15 = interfaceinvoke r0.<org.apache.xmlbeans.impl.jam.JAnnotatedElement: org.apache.xmlbeans.impl.jam.JSourcePosition getSourcePosition()>();

        if $r15 == null goto label7;

        $r4 = r3.<org.apache.xmlbeans.impl.jam.xml.JamXmlWriter: javax.xml.stream.XMLStreamWriter mOut>;

        interfaceinvoke $r4.<javax.xml.stream.XMLStreamWriter: void writeStartElement(java.lang.String)>("source-position");

        $i1 = interfaceinvoke $r15.<org.apache.xmlbeans.impl.jam.JSourcePosition: int getLine()>();

        $i8 = (int) -1;

        if $i1 == $i8 goto label4;

        $i4 = interfaceinvoke $r15.<org.apache.xmlbeans.impl.jam.JSourcePosition: int getLine()>();

        specialinvoke r3.<org.apache.xmlbeans.impl.jam.xml.JamXmlWriter: void writeValueElement(java.lang.String,int)>("line", $i4);

     label4:
        $i2 = interfaceinvoke $r15.<org.apache.xmlbeans.impl.jam.JSourcePosition: int getColumn()>();

        $i10 = (int) -1;

        if $i2 == $i10 goto label5;

        $i3 = interfaceinvoke $r15.<org.apache.xmlbeans.impl.jam.JSourcePosition: int getColumn()>();

        specialinvoke r3.<org.apache.xmlbeans.impl.jam.xml.JamXmlWriter: void writeValueElement(java.lang.String,int)>("column", $i3);

     label5:
        $z0 = r3.<org.apache.xmlbeans.impl.jam.xml.JamXmlWriter: boolean mWriteSourceURI>;

        if $z0 == 0 goto label6;

        $r5 = interfaceinvoke $r15.<org.apache.xmlbeans.impl.jam.JSourcePosition: java.net.URI getSourceURI()>();

        if $r5 == null goto label6;

        $r6 = interfaceinvoke $r15.<org.apache.xmlbeans.impl.jam.JSourcePosition: java.net.URI getSourceURI()>();

        $r7 = virtualinvoke $r6.<java.net.URI: java.lang.String toString()>();

        specialinvoke r3.<org.apache.xmlbeans.impl.jam.xml.JamXmlWriter: void writeValueElement(java.lang.String,java.lang.String)>("source-uri", $r7);

     label6:
        $r16 = r3.<org.apache.xmlbeans.impl.jam.xml.JamXmlWriter: javax.xml.stream.XMLStreamWriter mOut>;

        interfaceinvoke $r16.<javax.xml.stream.XMLStreamWriter: void writeEndElement()>();

     label7:
        return;
    }

    private void writeAnnotation(org.apache.xmlbeans.impl.jam.JAnnotation) throws javax.xml.stream.XMLStreamException
    {
        org.apache.xmlbeans.impl.jam.JAnnotation r2;
        org.apache.xmlbeans.impl.jam.JAnnotationValue $r6;
        int $i0, i1;
        javax.xml.stream.XMLStreamWriter $r1, $r5;
        org.apache.xmlbeans.impl.jam.JAnnotationValue[] $r4;
        java.lang.String $r3;
        org.apache.xmlbeans.impl.jam.xml.JamXmlWriter r0;

        r0 := @this: org.apache.xmlbeans.impl.jam.xml.JamXmlWriter;

        r2 := @parameter0: org.apache.xmlbeans.impl.jam.JAnnotation;

        $r1 = r0.<org.apache.xmlbeans.impl.jam.xml.JamXmlWriter: javax.xml.stream.XMLStreamWriter mOut>;

        interfaceinvoke $r1.<javax.xml.stream.XMLStreamWriter: void writeStartElement(java.lang.String)>("annotation");

        $r3 = interfaceinvoke r2.<org.apache.xmlbeans.impl.jam.JAnnotation: java.lang.String getQualifiedName()>();

        specialinvoke r0.<org.apache.xmlbeans.impl.jam.xml.JamXmlWriter: void writeValueElement(java.lang.String,java.lang.String)>("name", $r3);

        $r4 = interfaceinvoke r2.<org.apache.xmlbeans.impl.jam.JAnnotation: org.apache.xmlbeans.impl.jam.JAnnotationValue[] getValues()>();

        i1 = 0;

     label1:
        $i0 = lengthof $r4;

        if i1 >= $i0 goto label2;

        $r6 = $r4[i1];

        specialinvoke r0.<org.apache.xmlbeans.impl.jam.xml.JamXmlWriter: void writeAnnotationValue(org.apache.xmlbeans.impl.jam.JAnnotationValue)>($r6);

        i1 = i1 + 1;

        goto label1;

     label2:
        $r5 = r0.<org.apache.xmlbeans.impl.jam.xml.JamXmlWriter: javax.xml.stream.XMLStreamWriter mOut>;

        interfaceinvoke $r5.<javax.xml.stream.XMLStreamWriter: void writeEndElement()>();

        return;
    }

    private void writeAnnotationValue(org.apache.xmlbeans.impl.jam.JAnnotationValue) throws javax.xml.stream.XMLStreamException
    {
        org.apache.xmlbeans.impl.jam.JAnnotationValue r2;
        java.lang.String[] $r9;
        org.apache.xmlbeans.impl.jam.JClass $r4, $r6;
        javax.xml.stream.XMLStreamWriter $r1, $r8;
        java.lang.String $r3, $r5, $r7;
        org.apache.xmlbeans.impl.jam.xml.JamXmlWriter r0;
        boolean $z0;

        r0 := @this: org.apache.xmlbeans.impl.jam.xml.JamXmlWriter;

        r2 := @parameter0: org.apache.xmlbeans.impl.jam.JAnnotationValue;

        $r1 = r0.<org.apache.xmlbeans.impl.jam.xml.JamXmlWriter: javax.xml.stream.XMLStreamWriter mOut>;

        interfaceinvoke $r1.<javax.xml.stream.XMLStreamWriter: void writeStartElement(java.lang.String)>("annotation-value");

        $r3 = interfaceinvoke r2.<org.apache.xmlbeans.impl.jam.JAnnotationValue: java.lang.String getName()>();

        specialinvoke r0.<org.apache.xmlbeans.impl.jam.xml.JamXmlWriter: void writeValueElement(java.lang.String,java.lang.String)>("name", $r3);

        $r4 = interfaceinvoke r2.<org.apache.xmlbeans.impl.jam.JAnnotationValue: org.apache.xmlbeans.impl.jam.JClass getType()>();

        $r5 = interfaceinvoke $r4.<org.apache.xmlbeans.impl.jam.JClass: java.lang.String getFieldDescriptor()>();

        specialinvoke r0.<org.apache.xmlbeans.impl.jam.xml.JamXmlWriter: void writeValueElement(java.lang.String,java.lang.String)>("type", $r5);

        $r6 = interfaceinvoke r2.<org.apache.xmlbeans.impl.jam.JAnnotationValue: org.apache.xmlbeans.impl.jam.JClass getType()>();

        $z0 = interfaceinvoke $r6.<org.apache.xmlbeans.impl.jam.JClass: boolean isArrayType()>();

        if $z0 == 0 goto label1;

        $r9 = interfaceinvoke r2.<org.apache.xmlbeans.impl.jam.JAnnotationValue: java.lang.String[] asStringArray()>();

        specialinvoke r0.<org.apache.xmlbeans.impl.jam.xml.JamXmlWriter: void writeValueElement(java.lang.String,java.lang.String[])>("value", $r9);

        goto label2;

     label1:
        $r7 = interfaceinvoke r2.<org.apache.xmlbeans.impl.jam.JAnnotationValue: java.lang.String asString()>();

        specialinvoke r0.<org.apache.xmlbeans.impl.jam.xml.JamXmlWriter: void writeValueElement(java.lang.String,java.lang.String)>("value", $r7);

     label2:
        $r8 = r0.<org.apache.xmlbeans.impl.jam.xml.JamXmlWriter: javax.xml.stream.XMLStreamWriter mOut>;

        interfaceinvoke $r8.<javax.xml.stream.XMLStreamWriter: void writeEndElement()>();

        return;
    }

    private void assertStarted() throws javax.xml.stream.XMLStreamException
    {
        org.apache.xmlbeans.impl.jam.xml.JamXmlWriter r0;
        boolean $z0;
        javax.xml.stream.XMLStreamException $r1;

        r0 := @this: org.apache.xmlbeans.impl.jam.xml.JamXmlWriter;

        $z0 = r0.<org.apache.xmlbeans.impl.jam.xml.JamXmlWriter: boolean mInBody>;

        if $z0 != 0 goto label1;

        $r1 = new javax.xml.stream.XMLStreamException;

        specialinvoke $r1.<javax.xml.stream.XMLStreamException: void <init>(java.lang.String)>("begin() not called");

        throw $r1;

     label1:
        return;
    }
}
