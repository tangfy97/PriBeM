final class kodkod.engine.ResolutionBasedProof extends kodkod.engine.Proof
{
    private kodkod.engine.satlab.SATProver solver;
    private kodkod.engine.fol2sat.RecordFilter coreFilter;
    private java.util.Map coreRoots;

    void <init>(kodkod.engine.satlab.SATProver, kodkod.engine.fol2sat.TranslationLog)
    {
        kodkod.engine.ResolutionBasedProof r0;
        kodkod.engine.fol2sat.TranslationLog r1;
        kodkod.engine.satlab.SATProver r2;

        r0 := @this: kodkod.engine.ResolutionBasedProof;

        r2 := @parameter0: kodkod.engine.satlab.SATProver;

        r1 := @parameter1: kodkod.engine.fol2sat.TranslationLog;

        specialinvoke r0.<kodkod.engine.Proof: void <init>(kodkod.engine.fol2sat.TranslationLog)>(r1);

        r0.<kodkod.engine.ResolutionBasedProof: kodkod.engine.satlab.SATProver solver> = r2;

        r0.<kodkod.engine.ResolutionBasedProof: kodkod.engine.fol2sat.RecordFilter coreFilter> = null;

        r0.<kodkod.engine.ResolutionBasedProof: java.util.Map coreRoots> = null;

        return;
    }

    private java.util.Set connectedCore(kodkod.util.ints.IntSet)
    {
        kodkod.util.collections.IdentityHashSet $r0, $r9;
        kodkod.engine.fol2sat.TranslationLog $r4, $r11;
        kodkod.engine.fol2sat.TranslationRecord $r7;
        boolean $z0, $z1;
        kodkod.engine.ResolutionBasedProof$1 $r1;
        java.util.Iterator $r5, $r13;
        kodkod.engine.ResolutionBasedProof$2 $r10;
        kodkod.util.ints.IntSet r3;
        kodkod.ast.Formula $r8, r15;
        java.util.Set $r12;
        kodkod.engine.ResolutionBasedProof r2;
        java.lang.Object $r6, $r14;

        r2 := @this: kodkod.engine.ResolutionBasedProof;

        r3 := @parameter0: kodkod.util.ints.IntSet;

        $r0 = new kodkod.util.collections.IdentityHashSet;

        specialinvoke $r0.<kodkod.util.collections.IdentityHashSet: void <init>()>();

        $r1 = new kodkod.engine.ResolutionBasedProof$1;

        specialinvoke $r1.<kodkod.engine.ResolutionBasedProof$1: void <init>(kodkod.engine.ResolutionBasedProof,kodkod.util.ints.IntSet)>(r2, r3);

        $r4 = virtualinvoke r2.<kodkod.engine.ResolutionBasedProof: kodkod.engine.fol2sat.TranslationLog log()>();

        $r5 = virtualinvoke $r4.<kodkod.engine.fol2sat.TranslationLog: java.util.Iterator replay(kodkod.engine.fol2sat.RecordFilter)>($r1);

        goto label2;

     label1:
        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        $r7 = (kodkod.engine.fol2sat.TranslationRecord) $r6;

        $r8 = virtualinvoke $r7.<kodkod.engine.fol2sat.TranslationRecord: kodkod.ast.Formula translated()>();

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>($r8);

     label2:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        $r9 = new kodkod.util.collections.IdentityHashSet;

        specialinvoke $r9.<kodkod.util.collections.IdentityHashSet: void <init>()>();

        $r10 = new kodkod.engine.ResolutionBasedProof$2;

        specialinvoke $r10.<kodkod.engine.ResolutionBasedProof$2: void <init>(kodkod.engine.ResolutionBasedProof,java.util.Set,java.util.Set)>(r2, $r0, $r9);

        $r11 = virtualinvoke r2.<kodkod.engine.ResolutionBasedProof: kodkod.engine.fol2sat.TranslationLog log()>();

        $r12 = virtualinvoke $r11.<kodkod.engine.fol2sat.TranslationLog: java.util.Set roots()>();

        $r13 = interfaceinvoke $r12.<java.util.Set: java.util.Iterator iterator()>();

        goto label4;

     label3:
        $r14 = interfaceinvoke $r13.<java.util.Iterator: java.lang.Object next()>();

        r15 = (kodkod.ast.Formula) $r14;

        virtualinvoke r15.<kodkod.ast.Formula: void accept(kodkod.ast.visitor.VoidVisitor)>($r10);

     label4:
        $z1 = interfaceinvoke $r13.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label3;

        return $r9;
    }

    public final java.util.Iterator core()
    {
        kodkod.engine.ResolutionBasedProof r0;
        java.util.Iterator $r4;
        kodkod.engine.ResolutionBasedProof$3 $r5;
        kodkod.engine.fol2sat.TranslationLog $r2;
        kodkod.engine.fol2sat.RecordFilter $r1, $r3;

        r0 := @this: kodkod.engine.ResolutionBasedProof;

        $r1 = r0.<kodkod.engine.ResolutionBasedProof: kodkod.engine.fol2sat.RecordFilter coreFilter>;

        if $r1 != null goto label1;

        $r5 = new kodkod.engine.ResolutionBasedProof$3;

        specialinvoke $r5.<kodkod.engine.ResolutionBasedProof$3: void <init>(kodkod.engine.ResolutionBasedProof)>(r0);

        r0.<kodkod.engine.ResolutionBasedProof: kodkod.engine.fol2sat.RecordFilter coreFilter> = $r5;

     label1:
        $r2 = virtualinvoke r0.<kodkod.engine.ResolutionBasedProof: kodkod.engine.fol2sat.TranslationLog log()>();

        $r3 = r0.<kodkod.engine.ResolutionBasedProof: kodkod.engine.fol2sat.RecordFilter coreFilter>;

        $r4 = virtualinvoke $r2.<kodkod.engine.fol2sat.TranslationLog: java.util.Iterator replay(kodkod.engine.fol2sat.RecordFilter)>($r3);

        return $r4;
    }

    public final java.util.Map highLevelCore()
    {
        kodkod.engine.fol2sat.TranslationLog $r6;
        java.util.LinkedHashMap $r4;
        java.util.Map $r1, $r2, $r10, $r13, $r14;
        int $i0;
        kodkod.engine.fol2sat.TranslationRecord r9;
        boolean $z0, $z1;
        kodkod.util.ints.IntTreeSet $r5;
        java.util.Iterator $r7;
        kodkod.engine.ResolutionBasedProof$4 $r3;
        kodkod.ast.Formula $r11;
        kodkod.ast.Node $r12;
        kodkod.engine.ResolutionBasedProof r0;
        java.lang.Object $r8;

        r0 := @this: kodkod.engine.ResolutionBasedProof;

        $r1 = r0.<kodkod.engine.ResolutionBasedProof: java.util.Map coreRoots>;

        if $r1 != null goto label3;

        $r3 = new kodkod.engine.ResolutionBasedProof$4;

        specialinvoke $r3.<kodkod.engine.ResolutionBasedProof$4: void <init>(kodkod.engine.ResolutionBasedProof)>(r0);

        $r4 = new java.util.LinkedHashMap;

        specialinvoke $r4.<java.util.LinkedHashMap: void <init>()>();

        r0.<kodkod.engine.ResolutionBasedProof: java.util.Map coreRoots> = $r4;

        $r5 = new kodkod.util.ints.IntTreeSet;

        specialinvoke $r5.<kodkod.util.ints.IntTreeSet: void <init>()>();

        $r6 = virtualinvoke r0.<kodkod.engine.ResolutionBasedProof: kodkod.engine.fol2sat.TranslationLog log()>();

        $r7 = virtualinvoke $r6.<kodkod.engine.fol2sat.TranslationLog: java.util.Iterator replay(kodkod.engine.fol2sat.RecordFilter)>($r3);

        goto label2;

     label1:
        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r9 = (kodkod.engine.fol2sat.TranslationRecord) $r8;

        $i0 = virtualinvoke r9.<kodkod.engine.fol2sat.TranslationRecord: int literal()>();

        $z0 = interfaceinvoke $r5.<kodkod.util.ints.IntSet: boolean add(int)>($i0);

        if $z0 == 0 goto label2;

        $r10 = r0.<kodkod.engine.ResolutionBasedProof: java.util.Map coreRoots>;

        $r11 = virtualinvoke r9.<kodkod.engine.fol2sat.TranslationRecord: kodkod.ast.Formula translated()>();

        $r12 = virtualinvoke r9.<kodkod.engine.fol2sat.TranslationRecord: kodkod.ast.Node node()>();

        interfaceinvoke $r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r11, $r12);

     label2:
        $z1 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label1;

        $r13 = r0.<kodkod.engine.ResolutionBasedProof: java.util.Map coreRoots>;

        $r14 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>($r13);

        r0.<kodkod.engine.ResolutionBasedProof: java.util.Map coreRoots> = $r14;

     label3:
        $r2 = r0.<kodkod.engine.ResolutionBasedProof: java.util.Map coreRoots>;

        return $r2;
    }

    public void minimize(kodkod.engine.satlab.ReductionStrategy)
    {
        kodkod.engine.ResolutionBasedProof r0;
        kodkod.engine.satlab.SATProver $r2;
        kodkod.engine.satlab.ReductionStrategy r1;

        r0 := @this: kodkod.engine.ResolutionBasedProof;

        r1 := @parameter0: kodkod.engine.satlab.ReductionStrategy;

        $r2 = r0.<kodkod.engine.ResolutionBasedProof: kodkod.engine.satlab.SATProver solver>;

        interfaceinvoke $r2.<kodkod.engine.satlab.SATProver: void reduce(kodkod.engine.satlab.ReductionStrategy)>(r1);

        r0.<kodkod.engine.ResolutionBasedProof: kodkod.engine.fol2sat.RecordFilter coreFilter> = null;

        r0.<kodkod.engine.ResolutionBasedProof: java.util.Map coreRoots> = null;

        return;
    }

    static kodkod.engine.satlab.SATProver access$0(kodkod.engine.ResolutionBasedProof)
    {
        kodkod.engine.ResolutionBasedProof r0;
        kodkod.engine.satlab.SATProver $r1;

        r0 := @parameter0: kodkod.engine.ResolutionBasedProof;

        $r1 = r0.<kodkod.engine.ResolutionBasedProof: kodkod.engine.satlab.SATProver solver>;

        return $r1;
    }

    static java.util.Set access$1(kodkod.engine.ResolutionBasedProof, kodkod.util.ints.IntSet)
    {
        kodkod.engine.ResolutionBasedProof r0;
        kodkod.util.ints.IntSet r1;
        java.util.Set $r2, $r3;

        r0 := @parameter0: kodkod.engine.ResolutionBasedProof;

        r1 := @parameter1: kodkod.util.ints.IntSet;

        $r2 = specialinvoke r0.<kodkod.engine.ResolutionBasedProof: java.util.Set connectedCore(kodkod.util.ints.IntSet)>(r1);

        $r3 = (java.util.Set) $r2;

        return $r3;
    }
}
