public class com.jhlabs.image.ShearFilter extends com.jhlabs.image.TransformFilter
{
    private float xangle;
    private float yangle;
    private float shx;
    private float shy;
    private float xoffset;
    private float yoffset;
    private boolean resize;

    public void <init>()
    {
        com.jhlabs.image.ShearFilter r0;

        r0 := @this: com.jhlabs.image.ShearFilter;

        specialinvoke r0.<com.jhlabs.image.TransformFilter: void <init>()>();

        r0.<com.jhlabs.image.ShearFilter: float xangle> = 0.0F;

        r0.<com.jhlabs.image.ShearFilter: float yangle> = 0.0F;

        r0.<com.jhlabs.image.ShearFilter: float shx> = 0.0F;

        r0.<com.jhlabs.image.ShearFilter: float shy> = 0.0F;

        r0.<com.jhlabs.image.ShearFilter: float xoffset> = 0.0F;

        r0.<com.jhlabs.image.ShearFilter: float yoffset> = 0.0F;

        r0.<com.jhlabs.image.ShearFilter: boolean resize> = 1;

        return;
    }

    public void setResize(boolean)
    {
        com.jhlabs.image.ShearFilter r0;
        boolean z0;

        r0 := @this: com.jhlabs.image.ShearFilter;

        z0 := @parameter0: boolean;

        r0.<com.jhlabs.image.ShearFilter: boolean resize> = z0;

        return;
    }

    public boolean isResize()
    {
        com.jhlabs.image.ShearFilter r0;
        boolean $z0;

        r0 := @this: com.jhlabs.image.ShearFilter;

        $z0 = r0.<com.jhlabs.image.ShearFilter: boolean resize>;

        return $z0;
    }

    public void setXAngle(float)
    {
        com.jhlabs.image.ShearFilter r0;
        float f0;

        r0 := @this: com.jhlabs.image.ShearFilter;

        f0 := @parameter0: float;

        r0.<com.jhlabs.image.ShearFilter: float xangle> = f0;

        specialinvoke r0.<com.jhlabs.image.ShearFilter: void initialize()>();

        return;
    }

    public float getXAngle()
    {
        com.jhlabs.image.ShearFilter r0;
        float $f0;

        r0 := @this: com.jhlabs.image.ShearFilter;

        $f0 = r0.<com.jhlabs.image.ShearFilter: float xangle>;

        return $f0;
    }

    public void setYAngle(float)
    {
        com.jhlabs.image.ShearFilter r0;
        float f0;

        r0 := @this: com.jhlabs.image.ShearFilter;

        f0 := @parameter0: float;

        r0.<com.jhlabs.image.ShearFilter: float yangle> = f0;

        specialinvoke r0.<com.jhlabs.image.ShearFilter: void initialize()>();

        return;
    }

    public float getYAngle()
    {
        com.jhlabs.image.ShearFilter r0;
        float $f0;

        r0 := @this: com.jhlabs.image.ShearFilter;

        $f0 = r0.<com.jhlabs.image.ShearFilter: float yangle>;

        return $f0;
    }

    private void initialize()
    {
        com.jhlabs.image.ShearFilter r0;
        float $f0, $f1, $f2, $f3;
        double $d0, $d1, $d2, $d3;

        r0 := @this: com.jhlabs.image.ShearFilter;

        $f0 = r0.<com.jhlabs.image.ShearFilter: float xangle>;

        $d0 = (double) $f0;

        $d1 = staticinvoke <java.lang.Math: double sin(double)>($d0);

        $f1 = (float) $d1;

        r0.<com.jhlabs.image.ShearFilter: float shx> = $f1;

        $f2 = r0.<com.jhlabs.image.ShearFilter: float yangle>;

        $d2 = (double) $f2;

        $d3 = staticinvoke <java.lang.Math: double sin(double)>($d2);

        $f3 = (float) $d3;

        r0.<com.jhlabs.image.ShearFilter: float shy> = $f3;

        return;
    }

    protected void transformSpace(java.awt.Rectangle)
    {
        byte $b2, $b8;
        com.jhlabs.image.ShearFilter r0;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, f17, f18;
        java.awt.Rectangle r1;
        int $i0, $i1, $i3, $i4, $i5, $i6, $i7, $i9, $i10, $i11, $i12, $i13;
        double $d0, $d1, $d2, $d3, $d4, $d5;

        r0 := @this: com.jhlabs.image.ShearFilter;

        r1 := @parameter0: java.awt.Rectangle;

        $f0 = r0.<com.jhlabs.image.ShearFilter: float xangle>;

        $d0 = (double) $f0;

        $d1 = staticinvoke <java.lang.Math: double tan(double)>($d0);

        f17 = (float) $d1;

        $i0 = r1.<java.awt.Rectangle: int height>;

        $i1 = neg $i0;

        $f1 = (float) $i1;

        $f2 = $f1 * f17;

        r0.<com.jhlabs.image.ShearFilter: float xoffset> = $f2;

        $d2 = (double) f17;

        $b2 = $d2 cmpg 0.0;

        $i12 = (int) $b2;

        if $i12 >= 0 goto label1;

        f17 = neg f17;

     label1:
        $i3 = r1.<java.awt.Rectangle: int height>;

        $f3 = (float) $i3;

        $f5 = $f3 * f17;

        $i4 = r1.<java.awt.Rectangle: int width>;

        $f4 = (float) $i4;

        $f6 = $f5 + $f4;

        $f7 = $f6 + 0.999999F;

        $i5 = (int) $f7;

        r1.<java.awt.Rectangle: int width> = $i5;

        $f8 = r0.<com.jhlabs.image.ShearFilter: float yangle>;

        $d3 = (double) $f8;

        $d4 = staticinvoke <java.lang.Math: double tan(double)>($d3);

        $f16 = (float) $d4;

        f18 = $f16;

        $i6 = r1.<java.awt.Rectangle: int width>;

        $i7 = neg $i6;

        $f9 = (float) $i7;

        $f10 = $f9 * $f16;

        r0.<com.jhlabs.image.ShearFilter: float yoffset> = $f10;

        $d5 = (double) $f16;

        $b8 = $d5 cmpg 0.0;

        $i13 = (int) $b8;

        if $i13 >= 0 goto label2;

        f18 = neg $f16;

     label2:
        $i9 = r1.<java.awt.Rectangle: int width>;

        $f11 = (float) $i9;

        $f13 = $f11 * f18;

        $i10 = r1.<java.awt.Rectangle: int height>;

        $f12 = (float) $i10;

        $f14 = $f13 + $f12;

        $f15 = $f14 + 0.999999F;

        $i11 = (int) $f15;

        r1.<java.awt.Rectangle: int height> = $i11;

        return;
    }

    protected void transformInverse(int, int, float[])
    {
        float[] r0;
        int i0, i1;
        com.jhlabs.image.ShearFilter r1;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13;

        r1 := @this: com.jhlabs.image.ShearFilter;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r0 := @parameter2: float[];

        $f1 = (float) i0;

        $f0 = r1.<com.jhlabs.image.ShearFilter: float xoffset>;

        $f5 = $f1 + $f0;

        $f3 = (float) i1;

        $f2 = r1.<com.jhlabs.image.ShearFilter: float shx>;

        $f4 = $f3 * $f2;

        $f6 = $f5 + $f4;

        r0[0] = $f6;

        $f8 = (float) i1;

        $f7 = r1.<com.jhlabs.image.ShearFilter: float yoffset>;

        $f12 = $f8 + $f7;

        $f10 = (float) i0;

        $f9 = r1.<com.jhlabs.image.ShearFilter: float shy>;

        $f11 = $f10 * $f9;

        $f13 = $f12 + $f11;

        r0[1] = $f13;

        return;
    }

    public java.lang.String toString()
    {
        com.jhlabs.image.ShearFilter r0;

        r0 := @this: com.jhlabs.image.ShearFilter;

        return "Distort/Shear...";
    }
}
