public class org.springframework.scheduling.support.PeriodicTrigger extends java.lang.Object implements org.springframework.scheduling.Trigger
{
    private final long period;
    private final java.util.concurrent.TimeUnit timeUnit;
    private volatile long initialDelay;
    private volatile boolean fixedRate;

    public void <init>(long)
    {
        org.springframework.scheduling.support.PeriodicTrigger r0;
        long l0;

        r0 := @this: org.springframework.scheduling.support.PeriodicTrigger;

        l0 := @parameter0: long;

        specialinvoke r0.<org.springframework.scheduling.support.PeriodicTrigger: void <init>(long,java.util.concurrent.TimeUnit)>(l0, null);

        return;
    }

    public void <init>(long, java.util.concurrent.TimeUnit)
    {
        org.springframework.scheduling.support.PeriodicTrigger r0;
        long l0, $l2;
        java.util.concurrent.TimeUnit r1, $r2, $r3;
        byte $b1;
        int $i3;
        boolean $z0;

        r0 := @this: org.springframework.scheduling.support.PeriodicTrigger;

        l0 := @parameter0: long;

        r1 := @parameter1: java.util.concurrent.TimeUnit;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.springframework.scheduling.support.PeriodicTrigger: long initialDelay> = 0L;

        r0.<org.springframework.scheduling.support.PeriodicTrigger: boolean fixedRate> = 0;

        $b1 = l0 cmp 0L;

        $i3 = (int) $b1;

        if $i3 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.springframework.util.Assert: void isTrue(boolean,java.lang.String)>($z0, "period must not be negative");

        if r1 == null goto label3;

        $r3 = r1;

        goto label4;

     label3:
        $r3 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

     label4:
        r0.<org.springframework.scheduling.support.PeriodicTrigger: java.util.concurrent.TimeUnit timeUnit> = $r3;

        $r2 = r0.<org.springframework.scheduling.support.PeriodicTrigger: java.util.concurrent.TimeUnit timeUnit>;

        $l2 = virtualinvoke $r2.<java.util.concurrent.TimeUnit: long toMillis(long)>(l0);

        r0.<org.springframework.scheduling.support.PeriodicTrigger: long period> = $l2;

        return;
    }

    public void setInitialDelay(long)
    {
        java.util.concurrent.TimeUnit $r1;
        org.springframework.scheduling.support.PeriodicTrigger r0;
        long l0, $l1;

        r0 := @this: org.springframework.scheduling.support.PeriodicTrigger;

        l0 := @parameter0: long;

        $r1 = r0.<org.springframework.scheduling.support.PeriodicTrigger: java.util.concurrent.TimeUnit timeUnit>;

        $l1 = virtualinvoke $r1.<java.util.concurrent.TimeUnit: long toMillis(long)>(l0);

        r0.<org.springframework.scheduling.support.PeriodicTrigger: long initialDelay> = $l1;

        return;
    }

    public void setFixedRate(boolean)
    {
        org.springframework.scheduling.support.PeriodicTrigger r0;
        boolean z0;

        r0 := @this: org.springframework.scheduling.support.PeriodicTrigger;

        z0 := @parameter0: boolean;

        r0.<org.springframework.scheduling.support.PeriodicTrigger: boolean fixedRate> = z0;

        return;
    }

    public java.util.Date nextExecutionTime(org.springframework.scheduling.TriggerContext)
    {
        java.util.Date $r1, $r3, $r4, $r5, $r6, $r7;
        long $l0, $l1, $l2, $l3, $l4, $l5, $l6, $l7, $l8;
        org.springframework.scheduling.TriggerContext r0;
        boolean $z0;
        org.springframework.scheduling.support.PeriodicTrigger r2;

        r2 := @this: org.springframework.scheduling.support.PeriodicTrigger;

        r0 := @parameter0: org.springframework.scheduling.TriggerContext;

        $r1 = interfaceinvoke r0.<org.springframework.scheduling.TriggerContext: java.util.Date lastScheduledExecutionTime()>();

        if $r1 != null goto label1;

        $r7 = new java.util.Date;

        $l6 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l7 = r2.<org.springframework.scheduling.support.PeriodicTrigger: long initialDelay>;

        $l8 = $l6 + $l7;

        specialinvoke $r7.<java.util.Date: void <init>(long)>($l8);

        return $r7;

     label1:
        $z0 = r2.<org.springframework.scheduling.support.PeriodicTrigger: boolean fixedRate>;

        if $z0 == 0 goto label2;

        $r5 = new java.util.Date;

        $r6 = interfaceinvoke r0.<org.springframework.scheduling.TriggerContext: java.util.Date lastScheduledExecutionTime()>();

        $l3 = virtualinvoke $r6.<java.util.Date: long getTime()>();

        $l4 = r2.<org.springframework.scheduling.support.PeriodicTrigger: long period>;

        $l5 = $l3 + $l4;

        specialinvoke $r5.<java.util.Date: void <init>(long)>($l5);

        return $r5;

     label2:
        $r3 = new java.util.Date;

        $r4 = interfaceinvoke r0.<org.springframework.scheduling.TriggerContext: java.util.Date lastCompletionTime()>();

        $l0 = virtualinvoke $r4.<java.util.Date: long getTime()>();

        $l1 = r2.<org.springframework.scheduling.support.PeriodicTrigger: long period>;

        $l2 = $l0 + $l1;

        specialinvoke $r3.<java.util.Date: void <init>(long)>($l2);

        return $r3;
    }

    public boolean equals(java.lang.Object)
    {
        org.springframework.scheduling.support.PeriodicTrigger r0, r2;
        long $l0, $l1, $l3, $l4;
        byte $b2, $b5;
        java.lang.Object r1;
        boolean $z0, $z1, $z2;

        r0 := @this: org.springframework.scheduling.support.PeriodicTrigger;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = r1 instanceof org.springframework.scheduling.support.PeriodicTrigger;

        if $z0 != 0 goto label2;

        return 0;

     label2:
        r2 = (org.springframework.scheduling.support.PeriodicTrigger) r1;

        $z2 = r0.<org.springframework.scheduling.support.PeriodicTrigger: boolean fixedRate>;

        $z1 = r2.<org.springframework.scheduling.support.PeriodicTrigger: boolean fixedRate>;

        if $z2 != $z1 goto label3;

        $l1 = r0.<org.springframework.scheduling.support.PeriodicTrigger: long initialDelay>;

        $l0 = r2.<org.springframework.scheduling.support.PeriodicTrigger: long initialDelay>;

        $b2 = $l1 cmp $l0;

        if $b2 != 0 goto label3;

        $l4 = r0.<org.springframework.scheduling.support.PeriodicTrigger: long period>;

        $l3 = r2.<org.springframework.scheduling.support.PeriodicTrigger: long period>;

        $b5 = $l4 cmp $l3;

        if $b5 != 0 goto label3;

        return 1;

     label3:
        return 0;
    }

    public int hashCode()
    {
        org.springframework.scheduling.support.PeriodicTrigger r0;
        long $l0, $l1, $l3, $l4;
        byte $b8;
        int $i2, $i5, $i6, $i7;
        boolean $z0;

        r0 := @this: org.springframework.scheduling.support.PeriodicTrigger;

        $z0 = r0.<org.springframework.scheduling.support.PeriodicTrigger: boolean fixedRate>;

        if $z0 == 0 goto label1;

        $b8 = 17;

        goto label2;

     label1:
        $b8 = 29;

     label2:
        $l0 = r0.<org.springframework.scheduling.support.PeriodicTrigger: long period>;

        $l1 = 37L * $l0;

        $i2 = (int) $l1;

        $i6 = $b8 + $i2;

        $l3 = r0.<org.springframework.scheduling.support.PeriodicTrigger: long initialDelay>;

        $l4 = 41L * $l3;

        $i5 = (int) $l4;

        $i7 = $i6 + $i5;

        return $i7;
    }
}
