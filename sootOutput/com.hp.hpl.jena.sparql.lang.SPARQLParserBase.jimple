public class com.hp.hpl.jena.sparql.lang.SPARQLParserBase extends com.hp.hpl.jena.sparql.lang.ParserBase
{
    private java.util.Deque stack;
    protected com.hp.hpl.jena.query.Query query;
    private com.hp.hpl.jena.sparql.modify.UpdateSink sink;
    private boolean oldBNodesAreVariables;
    private boolean oldBNodesAreAllowed;
    private int queryLevel;
    private java.util.Deque stackPreviousLabels;
    private java.util.Deque stackCurrentLabels;
    private java.util.List variables;
    private java.util.List values;
    private int currentColumn;

    protected void <init>()
    {
        com.hp.hpl.jena.sparql.lang.SPARQLParserBase r0;
        int $i1, $i3;
        java.util.ArrayDeque $r4, $r5, $r6;

        r0 := @this: com.hp.hpl.jena.sparql.lang.SPARQLParserBase;

        specialinvoke r0.<com.hp.hpl.jena.sparql.lang.ParserBase: void <init>()>();

        $r4 = new java.util.ArrayDeque;

        specialinvoke $r4.<java.util.ArrayDeque: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.lang.SPARQLParserBase: java.util.Deque stack> = $r4;

        r0.<com.hp.hpl.jena.sparql.lang.SPARQLParserBase: com.hp.hpl.jena.sparql.modify.UpdateSink sink> = null;

        $i1 = (int) -1;

        r0.<com.hp.hpl.jena.sparql.lang.SPARQLParserBase: int queryLevel> = $i1;

        $r5 = new java.util.ArrayDeque;

        specialinvoke $r5.<java.util.ArrayDeque: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.lang.SPARQLParserBase: java.util.Deque stackPreviousLabels> = $r5;

        $r6 = new java.util.ArrayDeque;

        specialinvoke $r6.<java.util.ArrayDeque: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.lang.SPARQLParserBase: java.util.Deque stackCurrentLabels> = $r6;

        r0.<com.hp.hpl.jena.sparql.lang.SPARQLParserBase: java.util.List variables> = null;

        r0.<com.hp.hpl.jena.sparql.lang.SPARQLParserBase: java.util.List values> = null;

        $i3 = (int) -1;

        r0.<com.hp.hpl.jena.sparql.lang.SPARQLParserBase: int currentColumn> = $i3;

        return;
    }

    public void setQuery(com.hp.hpl.jena.query.Query)
    {
        com.hp.hpl.jena.query.Query r1;
        com.hp.hpl.jena.sparql.lang.SPARQLParserBase r0;

        r0 := @this: com.hp.hpl.jena.sparql.lang.SPARQLParserBase;

        r1 := @parameter0: com.hp.hpl.jena.query.Query;

        r0.<com.hp.hpl.jena.sparql.lang.SPARQLParserBase: com.hp.hpl.jena.query.Query query> = r1;

        virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.SPARQLParserBase: void setPrologue(com.hp.hpl.jena.sparql.core.Prologue)>(r1);

        return;
    }

    public com.hp.hpl.jena.query.Query getQuery()
    {
        com.hp.hpl.jena.query.Query $r1;
        com.hp.hpl.jena.sparql.lang.SPARQLParserBase r0;

        r0 := @this: com.hp.hpl.jena.sparql.lang.SPARQLParserBase;

        $r1 = r0.<com.hp.hpl.jena.sparql.lang.SPARQLParserBase: com.hp.hpl.jena.query.Query query>;

        return $r1;
    }

    public void setUpdateSink(com.hp.hpl.jena.sparql.modify.UpdateSink)
    {
        com.hp.hpl.jena.sparql.modify.UpdateSink r1;
        com.hp.hpl.jena.query.Query $r2;
        com.hp.hpl.jena.sparql.lang.SPARQLParserBase r0;
        com.hp.hpl.jena.sparql.core.Prologue $r3;

        r0 := @this: com.hp.hpl.jena.sparql.lang.SPARQLParserBase;

        r1 := @parameter0: com.hp.hpl.jena.sparql.modify.UpdateSink;

        r0.<com.hp.hpl.jena.sparql.lang.SPARQLParserBase: com.hp.hpl.jena.sparql.modify.UpdateSink sink> = r1;

        $r2 = new com.hp.hpl.jena.query.Query;

        specialinvoke $r2.<com.hp.hpl.jena.query.Query: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.lang.SPARQLParserBase: com.hp.hpl.jena.query.Query query> = $r2;

        $r3 = interfaceinvoke r1.<com.hp.hpl.jena.sparql.modify.UpdateSink: com.hp.hpl.jena.sparql.core.Prologue getPrologue()>();

        virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.SPARQLParserBase: void setPrologue(com.hp.hpl.jena.sparql.core.Prologue)>($r3);

        return;
    }

    protected void startQuery()
    {
        com.hp.hpl.jena.sparql.lang.SPARQLParserBase r0;

        r0 := @this: com.hp.hpl.jena.sparql.lang.SPARQLParserBase;

        return;
    }

    protected void finishQuery()
    {
        com.hp.hpl.jena.sparql.lang.SPARQLParserBase r0;

        r0 := @this: com.hp.hpl.jena.sparql.lang.SPARQLParserBase;

        return;
    }

    protected void startUpdateRequest()
    {
        com.hp.hpl.jena.sparql.lang.SPARQLParserBase r0;

        r0 := @this: com.hp.hpl.jena.sparql.lang.SPARQLParserBase;

        return;
    }

    protected void finishUpdateRequest()
    {
        com.hp.hpl.jena.sparql.lang.SPARQLParserBase r0;

        r0 := @this: com.hp.hpl.jena.sparql.lang.SPARQLParserBase;

        return;
    }

    protected void startUpdateOperation()
    {
        com.hp.hpl.jena.sparql.lang.SPARQLParserBase r0;

        r0 := @this: com.hp.hpl.jena.sparql.lang.SPARQLParserBase;

        return;
    }

    protected void finishUpdateOperation()
    {
        com.hp.hpl.jena.sparql.lang.SPARQLParserBase r0;

        r0 := @this: com.hp.hpl.jena.sparql.lang.SPARQLParserBase;

        return;
    }

    protected void startModifyUpdate()
    {
        com.hp.hpl.jena.sparql.lang.SPARQLParserBase r0;

        r0 := @this: com.hp.hpl.jena.sparql.lang.SPARQLParserBase;

        return;
    }

    protected void finishModifyUpdate()
    {
        com.hp.hpl.jena.sparql.lang.SPARQLParserBase r0;

        r0 := @this: com.hp.hpl.jena.sparql.lang.SPARQLParserBase;

        return;
    }

    protected void startDataInsert(com.hp.hpl.jena.sparql.modify.request.QuadDataAccSink, int, int)
    {
        com.hp.hpl.jena.sparql.lang.SPARQLParserBase r0;
        int i0, i1;
        com.hp.hpl.jena.sparql.modify.request.QuadDataAccSink r2;
        com.hp.hpl.jena.sparql.util.LabelToNodeMap $r1;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.lang.SPARQLParserBase;

        r2 := @parameter0: com.hp.hpl.jena.sparql.modify.request.QuadDataAccSink;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.SPARQLParserBase: boolean getBNodesAreVariables()>();

        r0.<com.hp.hpl.jena.sparql.lang.SPARQLParserBase: boolean oldBNodesAreVariables> = $z0;

        virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.SPARQLParserBase: void setBNodesAreVariables(boolean)>(0);

        $r1 = r0.<com.hp.hpl.jena.sparql.lang.SPARQLParserBase: com.hp.hpl.jena.sparql.util.LabelToNodeMap activeLabelMap>;

        virtualinvoke $r1.<com.hp.hpl.jena.sparql.util.LabelToNodeMap: void clear()>();

        return;
    }

    protected void finishDataInsert(com.hp.hpl.jena.sparql.modify.request.QuadDataAccSink, int, int)
    {
        com.hp.hpl.jena.sparql.lang.SPARQLParserBase r0;
        java.util.Set $r2, $r3;
        int i0, i1;
        com.hp.hpl.jena.sparql.modify.request.QuadDataAccSink r5;
        com.hp.hpl.jena.sparql.util.LabelToNodeMap $r1, $r4;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.lang.SPARQLParserBase;

        r5 := @parameter0: com.hp.hpl.jena.sparql.modify.request.QuadDataAccSink;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = r0.<com.hp.hpl.jena.sparql.lang.SPARQLParserBase: java.util.Set previousLabels>;

        $r1 = r0.<com.hp.hpl.jena.sparql.lang.SPARQLParserBase: com.hp.hpl.jena.sparql.util.LabelToNodeMap activeLabelMap>;

        $r3 = virtualinvoke $r1.<com.hp.hpl.jena.sparql.util.LabelToNodeMap: java.util.Set getLabels()>();

        interfaceinvoke $r2.<java.util.Set: boolean addAll(java.util.Collection)>($r3);

        $r4 = r0.<com.hp.hpl.jena.sparql.lang.SPARQLParserBase: com.hp.hpl.jena.sparql.util.LabelToNodeMap activeLabelMap>;

        virtualinvoke $r4.<com.hp.hpl.jena.sparql.util.LabelToNodeMap: void clear()>();

        $z0 = r0.<com.hp.hpl.jena.sparql.lang.SPARQLParserBase: boolean oldBNodesAreVariables>;

        virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.SPARQLParserBase: void setBNodesAreVariables(boolean)>($z0);

        return;
    }

    protected void startDataDelete(com.hp.hpl.jena.sparql.modify.request.QuadDataAccSink, int, int)
    {
        com.hp.hpl.jena.sparql.lang.SPARQLParserBase r0;
        int i0, i1;
        com.hp.hpl.jena.sparql.modify.request.QuadDataAccSink r1;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.lang.SPARQLParserBase;

        r1 := @parameter0: com.hp.hpl.jena.sparql.modify.request.QuadDataAccSink;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.SPARQLParserBase: boolean getBNodesAreAllowed()>();

        r0.<com.hp.hpl.jena.sparql.lang.SPARQLParserBase: boolean oldBNodesAreAllowed> = $z0;

        virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.SPARQLParserBase: void setBNodesAreAllowed(boolean)>(0);

        return;
    }

    protected void finishDataDelete(com.hp.hpl.jena.sparql.modify.request.QuadDataAccSink, int, int)
    {
        com.hp.hpl.jena.sparql.lang.SPARQLParserBase r0;
        int i0, i1;
        com.hp.hpl.jena.sparql.modify.request.QuadDataAccSink r1;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.lang.SPARQLParserBase;

        r1 := @parameter0: com.hp.hpl.jena.sparql.modify.request.QuadDataAccSink;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $z0 = r0.<com.hp.hpl.jena.sparql.lang.SPARQLParserBase: boolean oldBNodesAreAllowed>;

        virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.SPARQLParserBase: void setBNodesAreAllowed(boolean)>($z0);

        return;
    }

    protected void startWherePattern()
    {
        com.hp.hpl.jena.sparql.lang.SPARQLParserBase r0;
        int $i0, $i1, $i2;

        r0 := @this: com.hp.hpl.jena.sparql.lang.SPARQLParserBase;

        $i0 = r0.<com.hp.hpl.jena.sparql.lang.SPARQLParserBase: int queryLevel>;

        $i1 = $i0 + 1;

        r0.<com.hp.hpl.jena.sparql.lang.SPARQLParserBase: int queryLevel> = $i1;

        $i2 = r0.<com.hp.hpl.jena.sparql.lang.SPARQLParserBase: int queryLevel>;

        if $i2 != 0 goto label1;

        specialinvoke r0.<com.hp.hpl.jena.sparql.lang.SPARQLParserBase: void pushLabelState()>();

        specialinvoke r0.<com.hp.hpl.jena.sparql.lang.SPARQLParserBase: void clearLabelState()>();

     label1:
        return;
    }

    protected void finishWherePattern()
    {
        com.hp.hpl.jena.sparql.lang.SPARQLParserBase r0;
        int $i0, $i1, $i2;

        r0 := @this: com.hp.hpl.jena.sparql.lang.SPARQLParserBase;

        $i0 = r0.<com.hp.hpl.jena.sparql.lang.SPARQLParserBase: int queryLevel>;

        if $i0 != 0 goto label1;

        specialinvoke r0.<com.hp.hpl.jena.sparql.lang.SPARQLParserBase: void popLabelState()>();

     label1:
        $i1 = r0.<com.hp.hpl.jena.sparql.lang.SPARQLParserBase: int queryLevel>;

        $i2 = $i1 - 1;

        r0.<com.hp.hpl.jena.sparql.lang.SPARQLParserBase: int queryLevel> = $i2;

        return;
    }

    protected void startInsertTemplate(com.hp.hpl.jena.sparql.modify.request.QuadAcc, int, int)
    {
        com.hp.hpl.jena.sparql.modify.request.QuadAcc r1;
        com.hp.hpl.jena.sparql.lang.SPARQLParserBase r0;
        int i0, i1;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.lang.SPARQLParserBase;

        r1 := @parameter0: com.hp.hpl.jena.sparql.modify.request.QuadAcc;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.SPARQLParserBase: boolean getBNodesAreVariables()>();

        r0.<com.hp.hpl.jena.sparql.lang.SPARQLParserBase: boolean oldBNodesAreVariables> = $z0;

        virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.SPARQLParserBase: void setBNodesAreVariables(boolean)>(0);

        specialinvoke r0.<com.hp.hpl.jena.sparql.lang.SPARQLParserBase: void pushLabelState()>();

        return;
    }

    protected void finishInsertTemplate(com.hp.hpl.jena.sparql.modify.request.QuadAcc, int, int)
    {
        com.hp.hpl.jena.sparql.modify.request.QuadAcc r1;
        com.hp.hpl.jena.sparql.lang.SPARQLParserBase r0;
        int i0, i1;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.lang.SPARQLParserBase;

        r1 := @parameter0: com.hp.hpl.jena.sparql.modify.request.QuadAcc;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<com.hp.hpl.jena.sparql.lang.SPARQLParserBase: void popLabelState()>();

        $z0 = r0.<com.hp.hpl.jena.sparql.lang.SPARQLParserBase: boolean oldBNodesAreVariables>;

        virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.SPARQLParserBase: void setBNodesAreVariables(boolean)>($z0);

        return;
    }

    protected void startDeleteTemplate(com.hp.hpl.jena.sparql.modify.request.QuadAcc, int, int)
    {
        com.hp.hpl.jena.sparql.modify.request.QuadAcc r1;
        com.hp.hpl.jena.sparql.lang.SPARQLParserBase r0;
        int i0, i1;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.lang.SPARQLParserBase;

        r1 := @parameter0: com.hp.hpl.jena.sparql.modify.request.QuadAcc;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.SPARQLParserBase: boolean getBNodesAreAllowed()>();

        r0.<com.hp.hpl.jena.sparql.lang.SPARQLParserBase: boolean oldBNodesAreAllowed> = $z0;

        virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.SPARQLParserBase: void setBNodesAreAllowed(boolean)>(0);

        return;
    }

    protected void finishDeleteTemplate(com.hp.hpl.jena.sparql.modify.request.QuadAcc, int, int)
    {
        com.hp.hpl.jena.sparql.modify.request.QuadAcc r1;
        com.hp.hpl.jena.sparql.lang.SPARQLParserBase r0;
        int i0, i1;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.lang.SPARQLParserBase;

        r1 := @parameter0: com.hp.hpl.jena.sparql.modify.request.QuadAcc;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $z0 = r0.<com.hp.hpl.jena.sparql.lang.SPARQLParserBase: boolean oldBNodesAreAllowed>;

        virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.SPARQLParserBase: void setBNodesAreAllowed(boolean)>($z0);

        return;
    }

    protected void emitUpdate(com.hp.hpl.jena.update.Update)
    {
        com.hp.hpl.jena.sparql.modify.UpdateSink $r2;
        com.hp.hpl.jena.update.Update r0;
        com.hp.hpl.jena.sparql.lang.SPARQLParserBase r1;

        r1 := @this: com.hp.hpl.jena.sparql.lang.SPARQLParserBase;

        r0 := @parameter0: com.hp.hpl.jena.update.Update;

        if null == r0 goto label1;

        $r2 = r1.<com.hp.hpl.jena.sparql.lang.SPARQLParserBase: com.hp.hpl.jena.sparql.modify.UpdateSink sink>;

        interfaceinvoke $r2.<com.hp.hpl.jena.sparql.modify.UpdateSink: void send(java.lang.Object)>(r0);

     label1:
        return;
    }

    protected com.hp.hpl.jena.sparql.modify.request.QuadDataAccSink createInsertDataSink()
    {
        com.hp.hpl.jena.sparql.modify.UpdateSink $r1;
        com.hp.hpl.jena.sparql.modify.request.QuadDataAccSink $r2;
        com.hp.hpl.jena.sparql.lang.SPARQLParserBase r0;

        r0 := @this: com.hp.hpl.jena.sparql.lang.SPARQLParserBase;

        $r1 = r0.<com.hp.hpl.jena.sparql.lang.SPARQLParserBase: com.hp.hpl.jena.sparql.modify.UpdateSink sink>;

        $r2 = interfaceinvoke $r1.<com.hp.hpl.jena.sparql.modify.UpdateSink: com.hp.hpl.jena.sparql.modify.request.QuadDataAccSink createInsertDataSink()>();

        return $r2;
    }

    protected com.hp.hpl.jena.sparql.modify.request.QuadDataAccSink createDeleteDataSink()
    {
        com.hp.hpl.jena.sparql.modify.UpdateSink $r1;
        com.hp.hpl.jena.sparql.modify.request.QuadDataAccSink $r2;
        com.hp.hpl.jena.sparql.lang.SPARQLParserBase r0;

        r0 := @this: com.hp.hpl.jena.sparql.lang.SPARQLParserBase;

        $r1 = r0.<com.hp.hpl.jena.sparql.lang.SPARQLParserBase: com.hp.hpl.jena.sparql.modify.UpdateSink sink>;

        $r2 = interfaceinvoke $r1.<com.hp.hpl.jena.sparql.modify.UpdateSink: com.hp.hpl.jena.sparql.modify.request.QuadDataAccSink createDeleteDataSink()>();

        return $r2;
    }

    protected void startSubSelect(int, int)
    {
        com.hp.hpl.jena.query.Query $r1, $r2, $r4;
        com.hp.hpl.jena.sparql.lang.SPARQLParserBase r0;
        com.hp.hpl.jena.sparql.core.Prologue $r5;
        java.util.Deque $r3;
        com.hp.hpl.jena.sparql.ARQInternalErrorException $r6;
        int i0, i1;

        r0 := @this: com.hp.hpl.jena.sparql.lang.SPARQLParserBase;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<com.hp.hpl.jena.sparql.lang.SPARQLParserBase: com.hp.hpl.jena.query.Query query>;

        if $r1 != null goto label1;

        $r6 = new com.hp.hpl.jena.sparql.ARQInternalErrorException;

        specialinvoke $r6.<com.hp.hpl.jena.sparql.ARQInternalErrorException: void <init>(java.lang.String)>("Parser query object is null");

        throw $r6;

     label1:
        $r3 = r0.<com.hp.hpl.jena.sparql.lang.SPARQLParserBase: java.util.Deque stack>;

        $r2 = r0.<com.hp.hpl.jena.sparql.lang.SPARQLParserBase: com.hp.hpl.jena.query.Query query>;

        interfaceinvoke $r3.<java.util.Deque: void push(java.lang.Object)>($r2);

        $r4 = new com.hp.hpl.jena.query.Query;

        $r5 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.SPARQLParserBase: com.hp.hpl.jena.sparql.core.Prologue getPrologue()>();

        specialinvoke $r4.<com.hp.hpl.jena.query.Query: void <init>(com.hp.hpl.jena.sparql.core.Prologue)>($r5);

        r0.<com.hp.hpl.jena.sparql.lang.SPARQLParserBase: com.hp.hpl.jena.query.Query query> = $r4;

        return;
    }

    protected com.hp.hpl.jena.query.Query endSubSelect(int, int)
    {
        com.hp.hpl.jena.query.Query r1, $r4;
        com.hp.hpl.jena.sparql.lang.SPARQLParserBase r0;
        java.util.Deque $r2;
        int i0, i1;
        java.lang.Object $r3;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.lang.SPARQLParserBase;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 = r0.<com.hp.hpl.jena.sparql.lang.SPARQLParserBase: com.hp.hpl.jena.query.Query query>;

        $z0 = virtualinvoke r1.<com.hp.hpl.jena.query.Query: boolean isSelectType()>();

        if $z0 != 0 goto label1;

        staticinvoke <com.hp.hpl.jena.sparql.lang.SPARQLParserBase: void throwParseException(java.lang.String,int,int)>("Subquery not a SELECT query", i0, i1);

     label1:
        $r2 = r0.<com.hp.hpl.jena.sparql.lang.SPARQLParserBase: java.util.Deque stack>;

        $r3 = interfaceinvoke $r2.<java.util.Deque: java.lang.Object pop()>();

        $r4 = (com.hp.hpl.jena.query.Query) $r3;

        r0.<com.hp.hpl.jena.sparql.lang.SPARQLParserBase: com.hp.hpl.jena.query.Query query> = $r4;

        return r1;
    }

    protected void startValuesClause(int, int)
    {
        com.hp.hpl.jena.sparql.lang.SPARQLParserBase r0;
        int i0, i1;
        java.util.ArrayList $r1, $r2;

        r0 := @this: com.hp.hpl.jena.sparql.lang.SPARQLParserBase;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.lang.SPARQLParserBase: java.util.List variables> = $r1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.lang.SPARQLParserBase: java.util.List values> = $r2;

        return;
    }

    protected void finishValuesClause(int, int)
    {
        com.hp.hpl.jena.query.Query $r1;
        java.util.List $r2, $r3;
        com.hp.hpl.jena.sparql.lang.SPARQLParserBase r0;
        int i0, i1;

        r0 := @this: com.hp.hpl.jena.sparql.lang.SPARQLParserBase;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.SPARQLParserBase: com.hp.hpl.jena.query.Query getQuery()>();

        $r3 = r0.<com.hp.hpl.jena.sparql.lang.SPARQLParserBase: java.util.List variables>;

        $r2 = r0.<com.hp.hpl.jena.sparql.lang.SPARQLParserBase: java.util.List values>;

        virtualinvoke $r1.<com.hp.hpl.jena.query.Query: void setValuesDataBlock(java.util.List,java.util.List)>($r3, $r2);

        return;
    }

    protected void startInlineData(java.util.List, java.util.List, int, int)
    {
        java.util.List r1, r2;
        com.hp.hpl.jena.sparql.lang.SPARQLParserBase r0;
        int i0, i1;

        r0 := @this: com.hp.hpl.jena.sparql.lang.SPARQLParserBase;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: java.util.List;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        r0.<com.hp.hpl.jena.sparql.lang.SPARQLParserBase: java.util.List variables> = r1;

        r0.<com.hp.hpl.jena.sparql.lang.SPARQLParserBase: java.util.List values> = r2;

        return;
    }

    protected void finishInlineData(int, int)
    {
        int i0, i1;
        com.hp.hpl.jena.sparql.lang.SPARQLParserBase r0;

        r0 := @this: com.hp.hpl.jena.sparql.lang.SPARQLParserBase;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        return;
    }

    private com.hp.hpl.jena.sparql.engine.binding.BindingMap currentValueRow()
    {
        java.util.List $r1, $r2;
        com.hp.hpl.jena.sparql.lang.SPARQLParserBase r0;
        int $i0, $i1;
        com.hp.hpl.jena.sparql.engine.binding.BindingMap $r4;
        java.lang.Object $r3;

        r0 := @this: com.hp.hpl.jena.sparql.lang.SPARQLParserBase;

        $r2 = r0.<com.hp.hpl.jena.sparql.lang.SPARQLParserBase: java.util.List values>;

        $r1 = r0.<com.hp.hpl.jena.sparql.lang.SPARQLParserBase: java.util.List values>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        $i1 = $i0 - 1;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>($i1);

        $r4 = (com.hp.hpl.jena.sparql.engine.binding.BindingMap) $r3;

        return $r4;
    }

    protected void emitDataBlockVariable(com.hp.hpl.jena.sparql.core.Var)
    {
        java.util.List $r2;
        com.hp.hpl.jena.sparql.core.Var r1;
        com.hp.hpl.jena.sparql.lang.SPARQLParserBase r0;

        r0 := @this: com.hp.hpl.jena.sparql.lang.SPARQLParserBase;

        r1 := @parameter0: com.hp.hpl.jena.sparql.core.Var;

        $r2 = r0.<com.hp.hpl.jena.sparql.lang.SPARQLParserBase: java.util.List variables>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        return;
    }

    protected void startDataBlockValueRow(int, int)
    {
        java.util.List $r1;
        com.hp.hpl.jena.sparql.lang.SPARQLParserBase r0;
        int i0, i1, $i3;
        com.hp.hpl.jena.sparql.engine.binding.BindingMap $r2;

        r0 := @this: com.hp.hpl.jena.sparql.lang.SPARQLParserBase;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<com.hp.hpl.jena.sparql.lang.SPARQLParserBase: java.util.List values>;

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.engine.binding.BindingFactory: com.hp.hpl.jena.sparql.engine.binding.BindingMap create()>();

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r2);

        $i3 = (int) -1;

        r0.<com.hp.hpl.jena.sparql.lang.SPARQLParserBase: int currentColumn> = $i3;

        return;
    }

    protected void emitDataBlockValue(com.hp.hpl.jena.graph.Node, int, int)
    {
        com.hp.hpl.jena.sparql.lang.SPARQLParserBase r0;
        com.hp.hpl.jena.graph.Node r5;
        com.hp.hpl.jena.sparql.core.Var r4;
        java.util.List $r1, $r2;
        int $i0, $i1, $i2, $i3, $i4, i5, i6;
        com.hp.hpl.jena.sparql.engine.binding.BindingMap $r6;
        java.lang.Object $r3;

        r0 := @this: com.hp.hpl.jena.sparql.lang.SPARQLParserBase;

        r5 := @parameter0: com.hp.hpl.jena.graph.Node;

        i5 := @parameter1: int;

        i6 := @parameter2: int;

        $i0 = r0.<com.hp.hpl.jena.sparql.lang.SPARQLParserBase: int currentColumn>;

        $i1 = $i0 + 1;

        r0.<com.hp.hpl.jena.sparql.lang.SPARQLParserBase: int currentColumn> = $i1;

        $i2 = r0.<com.hp.hpl.jena.sparql.lang.SPARQLParserBase: int currentColumn>;

        $r1 = r0.<com.hp.hpl.jena.sparql.lang.SPARQLParserBase: java.util.List variables>;

        $i3 = interfaceinvoke $r1.<java.util.List: int size()>();

        if $i2 < $i3 goto label1;

        return;

     label1:
        $r2 = r0.<com.hp.hpl.jena.sparql.lang.SPARQLParserBase: java.util.List variables>;

        $i4 = r0.<com.hp.hpl.jena.sparql.lang.SPARQLParserBase: int currentColumn>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>($i4);

        r4 = (com.hp.hpl.jena.sparql.core.Var) $r3;

        if r5 == null goto label2;

        $r6 = specialinvoke r0.<com.hp.hpl.jena.sparql.lang.SPARQLParserBase: com.hp.hpl.jena.sparql.engine.binding.BindingMap currentValueRow()>();

        interfaceinvoke $r6.<com.hp.hpl.jena.sparql.engine.binding.BindingMap: void add(com.hp.hpl.jena.sparql.core.Var,com.hp.hpl.jena.graph.Node)>(r4, r5);

     label2:
        return;
    }

    protected void finishDataBlockValueRow(int, int)
    {
        java.lang.Object[] $r2;
        com.hp.hpl.jena.sparql.lang.SPARQLParserBase r0;
        java.lang.Integer $r4, $r5;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, i7;
        java.lang.String $r6, $r7;
        com.hp.hpl.jena.query.QueryParseException $r8;
        java.util.List $r1, $r3;

        r0 := @this: com.hp.hpl.jena.sparql.lang.SPARQLParserBase;

        i6 := @parameter0: int;

        i7 := @parameter1: int;

        $i0 = r0.<com.hp.hpl.jena.sparql.lang.SPARQLParserBase: int currentColumn>;

        $i1 = $i0 + 1;

        $r1 = r0.<com.hp.hpl.jena.sparql.lang.SPARQLParserBase: java.util.List variables>;

        $i2 = interfaceinvoke $r1.<java.util.List: int size()>();

        if $i1 == $i2 goto label1;

        $r2 = newarray (java.lang.Object)[2];

        $r3 = r0.<com.hp.hpl.jena.sparql.lang.SPARQLParserBase: java.util.List variables>;

        $i3 = interfaceinvoke $r3.<java.util.List: int size()>();

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r2[0] = $r4;

        $i4 = r0.<com.hp.hpl.jena.sparql.lang.SPARQLParserBase: int currentColumn>;

        $i5 = $i4 + 1;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i5);

        $r2[1] = $r5;

        $r6 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Mismatch: %d variables but %d values", $r2);

        $r7 = staticinvoke <com.hp.hpl.jena.query.QueryParseException: java.lang.String formatMessage(java.lang.String,int,int)>($r6, i6, i7);

        $r8 = new com.hp.hpl.jena.query.QueryParseException;

        specialinvoke $r8.<com.hp.hpl.jena.query.QueryParseException: void <init>(java.lang.String,int,int)>($r7, i6, i7);

        throw $r8;

     label1:
        return;
    }

    private void pushLabelState()
    {
        java.util.HashSet $r5;
        com.hp.hpl.jena.sparql.lang.SPARQLParserBase r0;
        java.util.Set $r1;
        java.util.Deque $r2, $r4;
        com.hp.hpl.jena.sparql.util.LabelToNodeMap $r3, $r6;

        r0 := @this: com.hp.hpl.jena.sparql.lang.SPARQLParserBase;

        $r2 = r0.<com.hp.hpl.jena.sparql.lang.SPARQLParserBase: java.util.Deque stackPreviousLabels>;

        $r1 = r0.<com.hp.hpl.jena.sparql.lang.SPARQLParserBase: java.util.Set previousLabels>;

        interfaceinvoke $r2.<java.util.Deque: void push(java.lang.Object)>($r1);

        $r4 = r0.<com.hp.hpl.jena.sparql.lang.SPARQLParserBase: java.util.Deque stackCurrentLabels>;

        $r3 = r0.<com.hp.hpl.jena.sparql.lang.SPARQLParserBase: com.hp.hpl.jena.sparql.util.LabelToNodeMap activeLabelMap>;

        interfaceinvoke $r4.<java.util.Deque: void push(java.lang.Object)>($r3);

        $r5 = new java.util.HashSet;

        specialinvoke $r5.<java.util.HashSet: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.lang.SPARQLParserBase: java.util.Set previousLabels> = $r5;

        $r6 = r0.<com.hp.hpl.jena.sparql.lang.SPARQLParserBase: com.hp.hpl.jena.sparql.util.LabelToNodeMap activeLabelMap>;

        virtualinvoke $r6.<com.hp.hpl.jena.sparql.util.LabelToNodeMap: void clear()>();

        return;
    }

    private void popLabelState()
    {
        com.hp.hpl.jena.sparql.lang.SPARQLParserBase r0;
        java.util.Set $r3;
        java.lang.Object $r2, $r5;
        java.util.Deque $r1, $r4;
        com.hp.hpl.jena.sparql.util.LabelToNodeMap $r6;

        r0 := @this: com.hp.hpl.jena.sparql.lang.SPARQLParserBase;

        $r1 = r0.<com.hp.hpl.jena.sparql.lang.SPARQLParserBase: java.util.Deque stackPreviousLabels>;

        $r2 = interfaceinvoke $r1.<java.util.Deque: java.lang.Object pop()>();

        $r3 = (java.util.Set) $r2;

        r0.<com.hp.hpl.jena.sparql.lang.SPARQLParserBase: java.util.Set previousLabels> = $r3;

        $r4 = r0.<com.hp.hpl.jena.sparql.lang.SPARQLParserBase: java.util.Deque stackCurrentLabels>;

        $r5 = interfaceinvoke $r4.<java.util.Deque: java.lang.Object pop()>();

        $r6 = (com.hp.hpl.jena.sparql.util.LabelToNodeMap) $r5;

        r0.<com.hp.hpl.jena.sparql.lang.SPARQLParserBase: com.hp.hpl.jena.sparql.util.LabelToNodeMap activeLabelMap> = $r6;

        return;
    }

    private void clearLabelState()
    {
        java.util.Set $r2;
        com.hp.hpl.jena.sparql.util.LabelToNodeMap $r1;
        com.hp.hpl.jena.sparql.lang.SPARQLParserBase r0;

        r0 := @this: com.hp.hpl.jena.sparql.lang.SPARQLParserBase;

        $r1 = r0.<com.hp.hpl.jena.sparql.lang.SPARQLParserBase: com.hp.hpl.jena.sparql.util.LabelToNodeMap activeLabelMap>;

        virtualinvoke $r1.<com.hp.hpl.jena.sparql.util.LabelToNodeMap: void clear()>();

        $r2 = r0.<com.hp.hpl.jena.sparql.lang.SPARQLParserBase: java.util.Set previousLabels>;

        interfaceinvoke $r2.<java.util.Set: void clear()>();

        return;
    }
}
