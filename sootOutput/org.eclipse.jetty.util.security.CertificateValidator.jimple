public class org.eclipse.jetty.util.security.CertificateValidator extends java.lang.Object
{
    private static final org.eclipse.jetty.util.log.Logger LOG;
    private static java.util.concurrent.atomic.AtomicLong __aliasCount;
    private java.security.KeyStore _trustStore;
    private java.util.Collection _crls;
    private int _maxCertPathLength;
    private boolean _enableCRLDP;
    private boolean _enableOCSP;
    private java.lang.String _ocspResponderURL;

    public void <init>(java.security.KeyStore, java.util.Collection)
    {
        java.security.InvalidParameterException $r4;
        java.util.Collection r2;
        int $i1;
        org.eclipse.jetty.util.security.CertificateValidator r0;
        java.security.KeyStore r1;

        r0 := @this: org.eclipse.jetty.util.security.CertificateValidator;

        r1 := @parameter0: java.security.KeyStore;

        r2 := @parameter1: java.util.Collection;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i1 = (int) -1;

        r0.<org.eclipse.jetty.util.security.CertificateValidator: int _maxCertPathLength> = $i1;

        r0.<org.eclipse.jetty.util.security.CertificateValidator: boolean _enableCRLDP> = 0;

        r0.<org.eclipse.jetty.util.security.CertificateValidator: boolean _enableOCSP> = 0;

        if r1 != null goto label1;

        $r4 = new java.security.InvalidParameterException;

        specialinvoke $r4.<java.security.InvalidParameterException: void <init>(java.lang.String)>("TrustStore must be specified for CertificateValidator.");

        throw $r4;

     label1:
        r0.<org.eclipse.jetty.util.security.CertificateValidator: java.security.KeyStore _trustStore> = r1;

        r0.<org.eclipse.jetty.util.security.CertificateValidator: java.util.Collection _crls> = r2;

        return;
    }

    public void validate(java.security.KeyStore) throws java.security.cert.CertificateException
    {
        java.util.Enumeration $r1;
        java.security.KeyStore r0;
        java.security.KeyStoreException $r5;
        java.security.cert.CertificateException $r6;
        org.eclipse.jetty.util.security.CertificateValidator r4;
        java.lang.Object $r2;
        java.lang.String r3;
        boolean $z0;

        r4 := @this: org.eclipse.jetty.util.security.CertificateValidator;

        r0 := @parameter0: java.security.KeyStore;

     label1:
        $r1 = virtualinvoke r0.<java.security.KeyStore: java.util.Enumeration aliases()>();

     label2:
        $z0 = interfaceinvoke $r1.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 == 0 goto label3;

        $r2 = interfaceinvoke $r1.<java.util.Enumeration: java.lang.Object nextElement()>();

        r3 = (java.lang.String) $r2;

        virtualinvoke r4.<org.eclipse.jetty.util.security.CertificateValidator: java.lang.String validate(java.security.KeyStore,java.lang.String)>(r0, r3);

        goto label2;

     label3:
        goto label5;

     label4:
        $r5 := @caughtexception;

        $r6 = new java.security.cert.CertificateException;

        specialinvoke $r6.<java.security.cert.CertificateException: void <init>(java.lang.String,java.lang.Throwable)>("Unable to retrieve aliases from keystore", $r5);

        throw $r6;

     label5:
        return;

        catch java.security.KeyStoreException from label1 to label3 with label4;
    }

    public java.lang.String validate(java.security.KeyStore, java.lang.String) throws java.security.cert.CertificateException
    {
        java.security.KeyStore r2;
        java.security.KeyStoreException $r4;
        java.security.cert.CertificateException $r6;
        java.security.cert.Certificate $r3;
        org.eclipse.jetty.util.security.CertificateValidator r1;
        java.lang.StringBuilder $r7, $r8, $r9, $r10, $r12;
        java.lang.String r0, $r11, $r13, r14;
        org.eclipse.jetty.util.log.Logger $r5;

        r1 := @this: org.eclipse.jetty.util.security.CertificateValidator;

        r2 := @parameter0: java.security.KeyStore;

        r0 := @parameter1: java.lang.String;

        r14 = null;

        if r0 == null goto label5;

     label1:
        $r3 = virtualinvoke r2.<java.security.KeyStore: java.security.cert.Certificate getCertificate(java.lang.String)>(r0);

        virtualinvoke r1.<org.eclipse.jetty.util.security.CertificateValidator: void validate(java.security.KeyStore,java.security.cert.Certificate)>(r2, $r3);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        $r5 = <org.eclipse.jetty.util.security.CertificateValidator: org.eclipse.jetty.util.log.Logger LOG>;

        interfaceinvoke $r5.<org.eclipse.jetty.util.log.Logger: void debug(java.lang.Throwable)>($r4);

        $r6 = new java.security.cert.CertificateException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to validate certificate for alias [");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]: ");

        $r11 = virtualinvoke $r4.<java.security.KeyStoreException: java.lang.String getMessage()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.security.cert.CertificateException: void <init>(java.lang.String,java.lang.Throwable)>($r13, $r4);

        throw $r6;

     label4:
        r14 = r0;

     label5:
        return r14;

        catch java.security.KeyStoreException from label1 to label2 with label3;
    }

    public void validate(java.security.KeyStore, java.security.cert.Certificate) throws java.security.cert.CertificateException
    {
        java.security.cert.X509Certificate $r1, $r3;
        java.lang.IllegalStateException $r6;
        java.security.KeyStoreException $r17;
        java.security.InvalidParameterException $r16;
        java.lang.Long $r12;
        boolean $z0;
        java.security.KeyStore r2;
        java.security.cert.Certificate r0;
        java.security.cert.Certificate[] $r5;
        java.lang.StringBuilder $r8, $r9, $r14, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r29;
        java.lang.Object[] $r10;
        long $l1;
        int $i0;
        java.lang.String $r4, $r13, $r15, $r28, $r30, r31, $r32;
        java.security.cert.CertificateException $r19;
        java.util.concurrent.atomic.AtomicLong $r11;
        org.eclipse.jetty.util.security.CertificateValidator r7;
        org.eclipse.jetty.util.log.Logger $r18;

        r7 := @this: org.eclipse.jetty.util.security.CertificateValidator;

        r2 := @parameter0: java.security.KeyStore;

        r0 := @parameter1: java.security.cert.Certificate;

        if r0 == null goto label10;

        $z0 = r0 instanceof java.security.cert.X509Certificate;

        if $z0 == 0 goto label10;

        $r1 = (java.security.cert.X509Certificate) r0;

        virtualinvoke $r1.<java.security.cert.X509Certificate: void checkValidity()>();

        r31 = null;

     label01:
        if r2 != null goto label02;

        $r16 = new java.security.InvalidParameterException;

        specialinvoke $r16.<java.security.InvalidParameterException: void <init>(java.lang.String)>("Keystore cannot be null");

        throw $r16;

     label02:
        $r3 = (java.security.cert.X509Certificate) r0;

        $r4 = virtualinvoke r2.<java.security.KeyStore: java.lang.String getCertificateAlias(java.security.cert.Certificate)>($r3);

        r31 = $r4;

        if $r4 != null goto label03;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("JETTY");

        $r10 = newarray (java.lang.Object)[1];

        $r11 = <org.eclipse.jetty.util.security.CertificateValidator: java.util.concurrent.atomic.AtomicLong __aliasCount>;

        $l1 = virtualinvoke $r11.<java.util.concurrent.atomic.AtomicLong: long incrementAndGet()>();

        $r12 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

        $r10[0] = $r12;

        $r13 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%016X", $r10);

        $r14 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        r31 = $r15;

        virtualinvoke r2.<java.security.KeyStore: void setCertificateEntry(java.lang.String,java.security.cert.Certificate)>($r15, r0);

     label03:
        $r5 = virtualinvoke r2.<java.security.KeyStore: java.security.cert.Certificate[] getCertificateChain(java.lang.String)>(r31);

        if $r5 == null goto label04;

        $i0 = lengthof $r5;

        if $i0 != 0 goto label05;

     label04:
        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Unable to retrieve certificate chain");

        throw $r6;

     label05:
        goto label09;

     label06:
        $r17 := @caughtexception;

        $r18 = <org.eclipse.jetty.util.security.CertificateValidator: org.eclipse.jetty.util.log.Logger LOG>;

        interfaceinvoke $r18.<org.eclipse.jetty.util.log.Logger: void debug(java.lang.Throwable)>($r17);

        $r19 = new java.security.cert.CertificateException;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to validate certificate");

        if r31 != null goto label07;

        $r32 = "";

        goto label08;

     label07:
        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for alias [");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r31);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r32 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

     label08:
        $r26 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r32);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r28 = virtualinvoke $r17.<java.security.KeyStoreException: java.lang.String getMessage()>();

        $r29 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r28);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r19.<java.security.cert.CertificateException: void <init>(java.lang.String,java.lang.Throwable)>($r30, $r17);

        throw $r19;

     label09:
        virtualinvoke r7.<org.eclipse.jetty.util.security.CertificateValidator: void validate(java.security.cert.Certificate[])>($r5);

     label10:
        return;

        catch java.security.KeyStoreException from label01 to label05 with label06;
    }

    public void validate(java.security.cert.Certificate[]) throws java.security.cert.CertificateException
    {
        java.security.cert.X509Certificate $r4, $r21;
        java.lang.IllegalStateException $r19, $r22;
        java.security.GeneralSecurityException $r23;
        java.security.cert.CertPathBuilder $r11;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.security.cert.X509CertSelector $r2;
        java.util.Collection $r10, $r15, $r17;
        java.security.cert.CertPathValidator $r13;
        java.security.KeyStore $r7;
        java.security.cert.CertPathBuilderResult $r12;
        java.security.cert.PKIXBuilderParameters $r5;
        java.security.cert.Certificate r20;
        java.security.cert.Certificate[] r1;
        java.lang.StringBuilder $r26, $r27, $r29;
        java.util.ArrayList $r0;
        int $i0, i1, i2;
        java.lang.String $r28, $r30;
        java.security.cert.CertPath $r14;
        java.security.cert.CertificateException $r25;
        java.security.cert.CollectionCertStoreParameters $r8, $r16;
        java.security.cert.CertStore $r9, $r18;
        org.eclipse.jetty.util.security.CertificateValidator r6;
        java.lang.Object $r3;
        org.eclipse.jetty.util.log.Logger $r24;

        r6 := @this: org.eclipse.jetty.util.security.CertificateValidator;

        r1 := @parameter0: java.security.cert.Certificate[];

     label01:
        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        i1 = lengthof r1;

        i2 = 0;

     label02:
        if i2 >= i1 goto label06;

        r20 = r1[i2];

        if r20 != null goto label03;

        goto label05;

     label03:
        $z3 = r20 instanceof java.security.cert.X509Certificate;

        if $z3 != 0 goto label04;

        $r22 = new java.lang.IllegalStateException;

        specialinvoke $r22.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Invalid certificate type in chain");

        throw $r22;

     label04:
        $r21 = (java.security.cert.X509Certificate) r20;

        virtualinvoke $r0.<java.util.ArrayList: boolean add(java.lang.Object)>($r21);

     label05:
        i2 = i2 + 1;

        goto label02;

     label06:
        $z0 = virtualinvoke $r0.<java.util.ArrayList: boolean isEmpty()>();

        if $z0 == 0 goto label07;

        $r19 = new java.lang.IllegalStateException;

        specialinvoke $r19.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Invalid certificate chain");

        throw $r19;

     label07:
        $r2 = new java.security.cert.X509CertSelector;

        specialinvoke $r2.<java.security.cert.X509CertSelector: void <init>()>();

        $r3 = virtualinvoke $r0.<java.util.ArrayList: java.lang.Object get(int)>(0);

        $r4 = (java.security.cert.X509Certificate) $r3;

        virtualinvoke $r2.<java.security.cert.X509CertSelector: void setCertificate(java.security.cert.X509Certificate)>($r4);

        $r5 = new java.security.cert.PKIXBuilderParameters;

        $r7 = r6.<org.eclipse.jetty.util.security.CertificateValidator: java.security.KeyStore _trustStore>;

        specialinvoke $r5.<java.security.cert.PKIXBuilderParameters: void <init>(java.security.KeyStore,java.security.cert.CertSelector)>($r7, $r2);

        $r8 = new java.security.cert.CollectionCertStoreParameters;

        specialinvoke $r8.<java.security.cert.CollectionCertStoreParameters: void <init>(java.util.Collection)>($r0);

        $r9 = staticinvoke <java.security.cert.CertStore: java.security.cert.CertStore getInstance(java.lang.String,java.security.cert.CertStoreParameters)>("Collection", $r8);

        virtualinvoke $r5.<java.security.cert.PKIXBuilderParameters: void addCertStore(java.security.cert.CertStore)>($r9);

        $i0 = r6.<org.eclipse.jetty.util.security.CertificateValidator: int _maxCertPathLength>;

        virtualinvoke $r5.<java.security.cert.PKIXBuilderParameters: void setMaxPathLength(int)>($i0);

        virtualinvoke $r5.<java.security.cert.PKIXBuilderParameters: void setRevocationEnabled(boolean)>(1);

        $r10 = r6.<org.eclipse.jetty.util.security.CertificateValidator: java.util.Collection _crls>;

        if $r10 == null goto label08;

        $r15 = r6.<org.eclipse.jetty.util.security.CertificateValidator: java.util.Collection _crls>;

        $z2 = interfaceinvoke $r15.<java.util.Collection: boolean isEmpty()>();

        if $z2 != 0 goto label08;

        $r16 = new java.security.cert.CollectionCertStoreParameters;

        $r17 = r6.<org.eclipse.jetty.util.security.CertificateValidator: java.util.Collection _crls>;

        specialinvoke $r16.<java.security.cert.CollectionCertStoreParameters: void <init>(java.util.Collection)>($r17);

        $r18 = staticinvoke <java.security.cert.CertStore: java.security.cert.CertStore getInstance(java.lang.String,java.security.cert.CertStoreParameters)>("Collection", $r16);

        virtualinvoke $r5.<java.security.cert.PKIXBuilderParameters: void addCertStore(java.security.cert.CertStore)>($r18);

     label08:
        $z4 = r6.<org.eclipse.jetty.util.security.CertificateValidator: boolean _enableOCSP>;

        if $z4 == 0 goto label09;

        staticinvoke <java.security.Security: void setProperty(java.lang.String,java.lang.String)>("ocsp.enable", "true");

     label09:
        $z1 = r6.<org.eclipse.jetty.util.security.CertificateValidator: boolean _enableCRLDP>;

        if $z1 == 0 goto label10;

        staticinvoke <java.lang.System: java.lang.String setProperty(java.lang.String,java.lang.String)>("com.sun.security.enableCRLDP", "true");

     label10:
        $r11 = staticinvoke <java.security.cert.CertPathBuilder: java.security.cert.CertPathBuilder getInstance(java.lang.String)>("PKIX");

        $r12 = virtualinvoke $r11.<java.security.cert.CertPathBuilder: java.security.cert.CertPathBuilderResult build(java.security.cert.CertPathParameters)>($r5);

        $r13 = staticinvoke <java.security.cert.CertPathValidator: java.security.cert.CertPathValidator getInstance(java.lang.String)>("PKIX");

        $r14 = interfaceinvoke $r12.<java.security.cert.CertPathBuilderResult: java.security.cert.CertPath getCertPath()>();

        virtualinvoke $r13.<java.security.cert.CertPathValidator: java.security.cert.CertPathValidatorResult validate(java.security.cert.CertPath,java.security.cert.CertPathParameters)>($r14, $r5);

     label11:
        goto label13;

     label12:
        $r23 := @caughtexception;

        $r24 = <org.eclipse.jetty.util.security.CertificateValidator: org.eclipse.jetty.util.log.Logger LOG>;

        interfaceinvoke $r24.<org.eclipse.jetty.util.log.Logger: void debug(java.lang.Throwable)>($r23);

        $r25 = new java.security.cert.CertificateException;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to validate certificate: ");

        $r28 = virtualinvoke $r23.<java.security.GeneralSecurityException: java.lang.String getMessage()>();

        $r29 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r28);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r25.<java.security.cert.CertificateException: void <init>(java.lang.String,java.lang.Throwable)>($r30, $r23);

        throw $r25;

     label13:
        return;

        catch java.security.GeneralSecurityException from label01 to label11 with label12;
    }

    public java.security.KeyStore getTrustStore()
    {
        org.eclipse.jetty.util.security.CertificateValidator r0;
        java.security.KeyStore $r1;

        r0 := @this: org.eclipse.jetty.util.security.CertificateValidator;

        $r1 = r0.<org.eclipse.jetty.util.security.CertificateValidator: java.security.KeyStore _trustStore>;

        return $r1;
    }

    public java.util.Collection getCrls()
    {
        org.eclipse.jetty.util.security.CertificateValidator r0;
        java.util.Collection $r1;

        r0 := @this: org.eclipse.jetty.util.security.CertificateValidator;

        $r1 = r0.<org.eclipse.jetty.util.security.CertificateValidator: java.util.Collection _crls>;

        return $r1;
    }

    public int getMaxCertPathLength()
    {
        int $i0;
        org.eclipse.jetty.util.security.CertificateValidator r0;

        r0 := @this: org.eclipse.jetty.util.security.CertificateValidator;

        $i0 = r0.<org.eclipse.jetty.util.security.CertificateValidator: int _maxCertPathLength>;

        return $i0;
    }

    public void setMaxCertPathLength(int)
    {
        int i0;
        org.eclipse.jetty.util.security.CertificateValidator r0;

        r0 := @this: org.eclipse.jetty.util.security.CertificateValidator;

        i0 := @parameter0: int;

        r0.<org.eclipse.jetty.util.security.CertificateValidator: int _maxCertPathLength> = i0;

        return;
    }

    public boolean isEnableCRLDP()
    {
        org.eclipse.jetty.util.security.CertificateValidator r0;
        boolean $z0;

        r0 := @this: org.eclipse.jetty.util.security.CertificateValidator;

        $z0 = r0.<org.eclipse.jetty.util.security.CertificateValidator: boolean _enableCRLDP>;

        return $z0;
    }

    public void setEnableCRLDP(boolean)
    {
        org.eclipse.jetty.util.security.CertificateValidator r0;
        boolean z0;

        r0 := @this: org.eclipse.jetty.util.security.CertificateValidator;

        z0 := @parameter0: boolean;

        r0.<org.eclipse.jetty.util.security.CertificateValidator: boolean _enableCRLDP> = z0;

        return;
    }

    public boolean isEnableOCSP()
    {
        org.eclipse.jetty.util.security.CertificateValidator r0;
        boolean $z0;

        r0 := @this: org.eclipse.jetty.util.security.CertificateValidator;

        $z0 = r0.<org.eclipse.jetty.util.security.CertificateValidator: boolean _enableOCSP>;

        return $z0;
    }

    public void setEnableOCSP(boolean)
    {
        org.eclipse.jetty.util.security.CertificateValidator r0;
        boolean z0;

        r0 := @this: org.eclipse.jetty.util.security.CertificateValidator;

        z0 := @parameter0: boolean;

        r0.<org.eclipse.jetty.util.security.CertificateValidator: boolean _enableOCSP> = z0;

        return;
    }

    public java.lang.String getOcspResponderURL()
    {
        org.eclipse.jetty.util.security.CertificateValidator r0;
        java.lang.String $r1;

        r0 := @this: org.eclipse.jetty.util.security.CertificateValidator;

        $r1 = r0.<org.eclipse.jetty.util.security.CertificateValidator: java.lang.String _ocspResponderURL>;

        return $r1;
    }

    public void setOcspResponderURL(java.lang.String)
    {
        org.eclipse.jetty.util.security.CertificateValidator r0;
        java.lang.String r1;

        r0 := @this: org.eclipse.jetty.util.security.CertificateValidator;

        r1 := @parameter0: java.lang.String;

        r0.<org.eclipse.jetty.util.security.CertificateValidator: java.lang.String _ocspResponderURL> = r1;

        return;
    }

    static void <clinit>()
    {
        java.util.concurrent.atomic.AtomicLong $r1;
        org.eclipse.jetty.util.log.Logger $r0;

        $r0 = staticinvoke <org.eclipse.jetty.util.log.Log: org.eclipse.jetty.util.log.Logger getLogger(java.lang.Class)>(class "Lorg/eclipse/jetty/util/security/CertificateValidator;");

        <org.eclipse.jetty.util.security.CertificateValidator: org.eclipse.jetty.util.log.Logger LOG> = $r0;

        $r1 = new java.util.concurrent.atomic.AtomicLong;

        specialinvoke $r1.<java.util.concurrent.atomic.AtomicLong: void <init>()>();

        <org.eclipse.jetty.util.security.CertificateValidator: java.util.concurrent.atomic.AtomicLong __aliasCount> = $r1;

        return;
    }
}
