public class org.junit.experimental.theories.ParameterSignature extends java.lang.Object
{
    private final java.lang.Class type;
    private final java.lang.'annotation'.Annotation[] annotations;

    public static java.util.ArrayList signatures(java.lang.reflect.Method)
    {
        java.lang.'annotation'.Annotation[][] $r2;
        java.lang.Class[] $r1;
        java.lang.reflect.Method r0;
        java.util.ArrayList $r3;

        r0 := @parameter0: java.lang.reflect.Method;

        $r1 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $r2 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.'annotation'.Annotation[][] getParameterAnnotations()>();

        $r3 = staticinvoke <org.junit.experimental.theories.ParameterSignature: java.util.ArrayList signatures(java.lang.Class[],java.lang.'annotation'.Annotation[][])>($r1, $r2);

        return $r3;
    }

    public static java.util.List signatures(java.lang.reflect.Constructor)
    {
        java.lang.'annotation'.Annotation[][] $r2;
        java.lang.Class[] $r1;
        java.lang.reflect.Constructor r0;
        java.util.ArrayList $r3;

        r0 := @parameter0: java.lang.reflect.Constructor;

        $r1 = virtualinvoke r0.<java.lang.reflect.Constructor: java.lang.Class[] getParameterTypes()>();

        $r2 = virtualinvoke r0.<java.lang.reflect.Constructor: java.lang.'annotation'.Annotation[][] getParameterAnnotations()>();

        $r3 = staticinvoke <org.junit.experimental.theories.ParameterSignature: java.util.ArrayList signatures(java.lang.Class[],java.lang.'annotation'.Annotation[][])>($r1, $r2);

        return $r3;
    }

    private static java.util.ArrayList signatures(java.lang.Class[], java.lang.'annotation'.Annotation[][])
    {
        java.lang.'annotation'.Annotation[][] r3;
        java.lang.Class[] r1;
        java.lang.'annotation'.Annotation[] $r4;
        org.junit.experimental.theories.ParameterSignature $r2;
        java.util.ArrayList $r0;
        int $i0, i1;
        java.lang.Class $r5;

        r1 := @parameter0: java.lang.Class[];

        r3 := @parameter1: java.lang.'annotation'.Annotation[][];

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        i1 = 0;

     label1:
        $i0 = lengthof r1;

        if i1 >= $i0 goto label2;

        $r2 = new org.junit.experimental.theories.ParameterSignature;

        $r5 = r1[i1];

        $r4 = r3[i1];

        specialinvoke $r2.<org.junit.experimental.theories.ParameterSignature: void <init>(java.lang.Class,java.lang.'annotation'.Annotation[])>($r5, $r4);

        virtualinvoke $r0.<java.util.ArrayList: boolean add(java.lang.Object)>($r2);

        i1 = i1 + 1;

        goto label1;

     label2:
        return $r0;
    }

    private void <init>(java.lang.Class, java.lang.'annotation'.Annotation[])
    {
        java.lang.Class r1;
        java.lang.'annotation'.Annotation[] r2;
        org.junit.experimental.theories.ParameterSignature r0;

        r0 := @this: org.junit.experimental.theories.ParameterSignature;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.lang.'annotation'.Annotation[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.junit.experimental.theories.ParameterSignature: java.lang.Class type> = r1;

        r0.<org.junit.experimental.theories.ParameterSignature: java.lang.'annotation'.Annotation[] annotations> = r2;

        return;
    }

    public boolean canAcceptType(java.lang.Class)
    {
        java.lang.Class r1, $r2;
        org.junit.experimental.theories.ParameterSignature r0;
        boolean $z0;

        r0 := @this: org.junit.experimental.theories.ParameterSignature;

        r1 := @parameter0: java.lang.Class;

        $r2 = r0.<org.junit.experimental.theories.ParameterSignature: java.lang.Class type>;

        $z0 = virtualinvoke $r2.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r1);

        return $z0;
    }

    public java.lang.Class getType()
    {
        java.lang.Class $r1;
        org.junit.experimental.theories.ParameterSignature r0;

        r0 := @this: org.junit.experimental.theories.ParameterSignature;

        $r1 = r0.<org.junit.experimental.theories.ParameterSignature: java.lang.Class type>;

        return $r1;
    }

    public java.util.List getAnnotations()
    {
        java.util.List $r2;
        java.lang.'annotation'.Annotation[] $r1;
        org.junit.experimental.theories.ParameterSignature r0;

        r0 := @this: org.junit.experimental.theories.ParameterSignature;

        $r1 = r0.<org.junit.experimental.theories.ParameterSignature: java.lang.'annotation'.Annotation[] annotations>;

        $r2 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r1);

        return $r2;
    }

    public boolean canAcceptArrayType(java.lang.Class)
    {
        java.lang.Class r0, $r2;
        org.junit.experimental.theories.ParameterSignature r1;
        boolean $z0, $z1, $z2;

        r1 := @this: org.junit.experimental.theories.ParameterSignature;

        r0 := @parameter0: java.lang.Class;

        $z0 = virtualinvoke r0.<java.lang.Class: boolean isArray()>();

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke r0.<java.lang.Class: java.lang.Class getComponentType()>();

        $z1 = virtualinvoke r1.<org.junit.experimental.theories.ParameterSignature: boolean canAcceptType(java.lang.Class)>($r2);

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    public boolean hasAnnotation(java.lang.Class)
    {
        java.lang.'annotation'.Annotation $r2;
        java.lang.Class r1;
        org.junit.experimental.theories.ParameterSignature r0;
        boolean $z0;

        r0 := @this: org.junit.experimental.theories.ParameterSignature;

        r1 := @parameter0: java.lang.Class;

        $r2 = virtualinvoke r0.<org.junit.experimental.theories.ParameterSignature: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(r1);

        if $r2 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public java.lang.'annotation'.Annotation findDeepAnnotation(java.lang.Class)
    {
        java.lang.'annotation'.Annotation $r3;
        java.lang.Class r2;
        java.lang.'annotation'.Annotation[] r1;
        org.junit.experimental.theories.ParameterSignature r0;

        r0 := @this: org.junit.experimental.theories.ParameterSignature;

        r2 := @parameter0: java.lang.Class;

        r1 = r0.<org.junit.experimental.theories.ParameterSignature: java.lang.'annotation'.Annotation[] annotations>;

        $r3 = specialinvoke r0.<org.junit.experimental.theories.ParameterSignature: java.lang.'annotation'.Annotation findDeepAnnotation(java.lang.'annotation'.Annotation[],java.lang.Class,int)>(r1, r2, 3);

        return $r3;
    }

    private java.lang.'annotation'.Annotation findDeepAnnotation(java.lang.'annotation'.Annotation[], java.lang.Class, int)
    {
        java.lang.'annotation'.Annotation[] r0, $r5;
        org.junit.experimental.theories.ParameterSignature r3;
        int i0, i1, $i2, i3;
        boolean $z0;
        java.lang.'annotation'.Annotation r1, $r6, $r8, $r10;
        java.lang.Class r2, $r4;
        java.lang.Object $r7, $r9;

        r3 := @this: org.junit.experimental.theories.ParameterSignature;

        r0 := @parameter0: java.lang.'annotation'.Annotation[];

        r2 := @parameter1: java.lang.Class;

        i0 := @parameter2: int;

        if i0 != 0 goto label1;

        return null;

     label1:
        i1 = lengthof r0;

        i3 = 0;

     label2:
        if i3 >= i1 goto label5;

        r1 = r0[i3];

        $z0 = virtualinvoke r2.<java.lang.Class: boolean isInstance(java.lang.Object)>(r1);

        if $z0 == 0 goto label3;

        $r9 = virtualinvoke r2.<java.lang.Class: java.lang.Object cast(java.lang.Object)>(r1);

        $r10 = (java.lang.'annotation'.Annotation) $r9;

        return $r10;

     label3:
        $r4 = interfaceinvoke r1.<java.lang.'annotation'.Annotation: java.lang.Class annotationType()>();

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.'annotation'.Annotation[] getAnnotations()>();

        $i2 = i0 - 1;

        $r6 = specialinvoke r3.<org.junit.experimental.theories.ParameterSignature: java.lang.'annotation'.Annotation findDeepAnnotation(java.lang.'annotation'.Annotation[],java.lang.Class,int)>($r5, r2, $i2);

        if $r6 == null goto label4;

        $r7 = virtualinvoke r2.<java.lang.Class: java.lang.Object cast(java.lang.Object)>($r6);

        $r8 = (java.lang.'annotation'.Annotation) $r7;

        return $r8;

     label4:
        i3 = i3 + 1;

        goto label2;

     label5:
        return null;
    }

    public java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)
    {
        java.util.Iterator $r2;
        org.junit.experimental.theories.ParameterSignature r0;
        java.util.List $r1;
        java.lang.'annotation'.Annotation r4, $r7;
        java.lang.Object $r3, $r6;
        java.lang.Class r5;
        boolean $z0, $z1;

        r0 := @this: org.junit.experimental.theories.ParameterSignature;

        r5 := @parameter0: java.lang.Class;

        $r1 = virtualinvoke r0.<org.junit.experimental.theories.ParameterSignature: java.util.List getAnnotations()>();

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.lang.'annotation'.Annotation) $r3;

        $z1 = virtualinvoke r5.<java.lang.Class: boolean isInstance(java.lang.Object)>(r4);

        if $z1 == 0 goto label2;

        $r6 = virtualinvoke r5.<java.lang.Class: java.lang.Object cast(java.lang.Object)>(r4);

        $r7 = (java.lang.'annotation'.Annotation) $r6;

        return $r7;

     label2:
        goto label1;

     label3:
        return null;
    }
}
