abstract class org.waveprotocol.wave.client.gadget.renderer.GadgetWidget$ElementChangeTask extends java.lang.Object
{
    final org.waveprotocol.wave.client.gadget.renderer.GadgetWidget this$0;

    private void <init>(org.waveprotocol.wave.client.gadget.renderer.GadgetWidget)
    {
        org.waveprotocol.wave.client.gadget.renderer.GadgetWidget r1;
        org.waveprotocol.wave.client.gadget.renderer.GadgetWidget$ElementChangeTask r0;

        r0 := @this: org.waveprotocol.wave.client.gadget.renderer.GadgetWidget$ElementChangeTask;

        r1 := @parameter0: org.waveprotocol.wave.client.gadget.renderer.GadgetWidget;

        r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget$ElementChangeTask: org.waveprotocol.wave.client.gadget.renderer.GadgetWidget this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    void run(org.waveprotocol.wave.client.editor.content.ContentNode)
    {
        org.waveprotocol.wave.client.editor.content.ContentNode r8;
        java.lang.Object[] $r18;
        org.waveprotocol.wave.client.gadget.renderer.Submitter $r17;
        org.waveprotocol.wave.client.gadget.renderer.GadgetUserPrefs $r7, $r12, $r14;
        org.waveprotocol.wave.client.gadget.StateMap $r2, $r4, $r5, $r10;
        boolean $z0, $z1, $z2;
        org.waveprotocol.wave.client.gadget.renderer.GadgetWidget$ElementChangeTask$1 $r15;
        org.waveprotocol.wave.client.gadget.renderer.GadgetWidget$ElementChangeTask r0;
        org.waveprotocol.wave.client.gadget.renderer.GadgetWidget $r1, $r3, $r6, $r9, $r11, $r13, $r16, $r19;

        r0 := @this: org.waveprotocol.wave.client.gadget.renderer.GadgetWidget$ElementChangeTask;

        r8 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentNode;

        $r1 = r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget$ElementChangeTask: org.waveprotocol.wave.client.gadget.renderer.GadgetWidget this$0>;

        $z0 = staticinvoke <org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: boolean access$000(org.waveprotocol.wave.client.gadget.renderer.GadgetWidget)>($r1);

        if $z0 != 0 goto label1;

        $r19 = r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget$ElementChangeTask: org.waveprotocol.wave.client.gadget.renderer.GadgetWidget this$0>;

        $r18 = newarray (java.lang.Object)[1];

        $r18[0] = "Element change event in removed node: ignoring.";

        staticinvoke <org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: void access$100(org.waveprotocol.wave.client.gadget.renderer.GadgetWidget,java.lang.Object[])>($r19, $r18);

        return;

     label1:
        $r2 = staticinvoke <org.waveprotocol.wave.client.gadget.StateMap: org.waveprotocol.wave.client.gadget.StateMap create()>();

        $r3 = r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget$ElementChangeTask: org.waveprotocol.wave.client.gadget.renderer.GadgetWidget this$0>;

        $r4 = staticinvoke <org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: org.waveprotocol.wave.client.gadget.StateMap access$200(org.waveprotocol.wave.client.gadget.renderer.GadgetWidget)>($r3);

        virtualinvoke $r2.<org.waveprotocol.wave.client.gadget.StateMap: void copyFrom(org.waveprotocol.wave.client.gadget.StateMap)>($r4);

        $r5 = staticinvoke <org.waveprotocol.wave.client.gadget.StateMap: org.waveprotocol.wave.client.gadget.StateMap create()>();

        $r6 = r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget$ElementChangeTask: org.waveprotocol.wave.client.gadget.renderer.GadgetWidget this$0>;

        $r7 = staticinvoke <org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: org.waveprotocol.wave.client.gadget.renderer.GadgetUserPrefs access$300(org.waveprotocol.wave.client.gadget.renderer.GadgetWidget)>($r6);

        virtualinvoke $r5.<org.waveprotocol.wave.client.gadget.StateMap: void copyFrom(org.waveprotocol.wave.client.gadget.StateMap)>($r7);

        virtualinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget$ElementChangeTask: void processChange(org.waveprotocol.wave.client.editor.content.ContentNode)>(r8);

        $r9 = r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget$ElementChangeTask: org.waveprotocol.wave.client.gadget.renderer.GadgetWidget this$0>;

        $r10 = staticinvoke <org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: org.waveprotocol.wave.client.gadget.StateMap access$200(org.waveprotocol.wave.client.gadget.renderer.GadgetWidget)>($r9);

        $z1 = virtualinvoke $r10.<org.waveprotocol.wave.client.gadget.StateMap: boolean compare(org.waveprotocol.wave.client.gadget.StateMap)>($r2);

        if $z1 != 0 goto label2;

        $r16 = r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget$ElementChangeTask: org.waveprotocol.wave.client.gadget.renderer.GadgetWidget this$0>;

        $r17 = staticinvoke <org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: org.waveprotocol.wave.client.gadget.renderer.Submitter access$400(org.waveprotocol.wave.client.gadget.renderer.GadgetWidget)>($r16);

        virtualinvoke $r17.<org.waveprotocol.wave.client.gadget.renderer.Submitter: void submit()>();

     label2:
        $r11 = r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget$ElementChangeTask: org.waveprotocol.wave.client.gadget.renderer.GadgetWidget this$0>;

        $r12 = staticinvoke <org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: org.waveprotocol.wave.client.gadget.renderer.GadgetUserPrefs access$300(org.waveprotocol.wave.client.gadget.renderer.GadgetWidget)>($r11);

        $z2 = virtualinvoke $r12.<org.waveprotocol.wave.client.gadget.renderer.GadgetUserPrefs: boolean compare(org.waveprotocol.wave.client.gadget.StateMap)>($r5);

        if $z2 != 0 goto label3;

        $r13 = r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget$ElementChangeTask: org.waveprotocol.wave.client.gadget.renderer.GadgetWidget this$0>;

        $r14 = staticinvoke <org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: org.waveprotocol.wave.client.gadget.renderer.GadgetUserPrefs access$300(org.waveprotocol.wave.client.gadget.renderer.GadgetWidget)>($r13);

        $r15 = new org.waveprotocol.wave.client.gadget.renderer.GadgetWidget$ElementChangeTask$1;

        specialinvoke $r15.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget$ElementChangeTask$1: void <init>(org.waveprotocol.wave.client.gadget.renderer.GadgetWidget$ElementChangeTask,org.waveprotocol.wave.client.gadget.StateMap)>(r0, $r5);

        virtualinvoke $r14.<org.waveprotocol.wave.client.gadget.renderer.GadgetUserPrefs: void each(org.waveprotocol.wave.client.gadget.StateMap$Each)>($r15);

     label3:
        return;
    }

    abstract void processChange(org.waveprotocol.wave.client.editor.content.ContentNode);

    void <init>(org.waveprotocol.wave.client.gadget.renderer.GadgetWidget, org.waveprotocol.wave.client.gadget.renderer.GadgetWidget$1)
    {
        org.waveprotocol.wave.client.gadget.renderer.GadgetWidget r1;
        org.waveprotocol.wave.client.gadget.renderer.GadgetWidget$ElementChangeTask r0;
        org.waveprotocol.wave.client.gadget.renderer.GadgetWidget$1 r2;

        r0 := @this: org.waveprotocol.wave.client.gadget.renderer.GadgetWidget$ElementChangeTask;

        r1 := @parameter0: org.waveprotocol.wave.client.gadget.renderer.GadgetWidget;

        r2 := @parameter1: org.waveprotocol.wave.client.gadget.renderer.GadgetWidget$1;

        specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget$ElementChangeTask: void <init>(org.waveprotocol.wave.client.gadget.renderer.GadgetWidget)>(r1);

        return;
    }
}
