public final class org.apache.lucene.analysis.PerFieldAnalyzerWrapper extends org.apache.lucene.analysis.Analyzer
{
    private final org.apache.lucene.analysis.Analyzer defaultAnalyzer;
    private final java.util.Map analyzerMap;

    public void <init>(org.apache.lucene.analysis.Analyzer)
    {
        org.apache.lucene.analysis.PerFieldAnalyzerWrapper r0;
        org.apache.lucene.analysis.Analyzer r1;

        r0 := @this: org.apache.lucene.analysis.PerFieldAnalyzerWrapper;

        r1 := @parameter0: org.apache.lucene.analysis.Analyzer;

        specialinvoke r0.<org.apache.lucene.analysis.PerFieldAnalyzerWrapper: void <init>(org.apache.lucene.analysis.Analyzer,java.util.Map)>(r1, null);

        return;
    }

    public void <init>(org.apache.lucene.analysis.Analyzer, java.util.Map)
    {
        org.apache.lucene.analysis.PerFieldAnalyzerWrapper r0;
        org.apache.lucene.analysis.Analyzer r2;
        java.util.Map r3, $r4;
        java.util.HashMap $r1;

        r0 := @this: org.apache.lucene.analysis.PerFieldAnalyzerWrapper;

        r2 := @parameter0: org.apache.lucene.analysis.Analyzer;

        r3 := @parameter1: java.util.Map;

        specialinvoke r0.<org.apache.lucene.analysis.Analyzer: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<org.apache.lucene.analysis.PerFieldAnalyzerWrapper: java.util.Map analyzerMap> = $r1;

        r0.<org.apache.lucene.analysis.PerFieldAnalyzerWrapper: org.apache.lucene.analysis.Analyzer defaultAnalyzer> = r2;

        if r3 == null goto label1;

        $r4 = r0.<org.apache.lucene.analysis.PerFieldAnalyzerWrapper: java.util.Map analyzerMap>;

        interfaceinvoke $r4.<java.util.Map: void putAll(java.util.Map)>(r3);

     label1:
        return;
    }

    public void addAnalyzer(java.lang.String, org.apache.lucene.analysis.Analyzer)
    {
        org.apache.lucene.analysis.PerFieldAnalyzerWrapper r0;
        org.apache.lucene.analysis.Analyzer r2;
        java.util.Map $r3;
        java.lang.String r1;

        r0 := @this: org.apache.lucene.analysis.PerFieldAnalyzerWrapper;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.apache.lucene.analysis.Analyzer;

        $r3 = r0.<org.apache.lucene.analysis.PerFieldAnalyzerWrapper: java.util.Map analyzerMap>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        return;
    }

    public org.apache.lucene.analysis.TokenStream tokenStream(java.lang.String, java.io.Reader)
    {
        org.apache.lucene.analysis.PerFieldAnalyzerWrapper r0;
        org.apache.lucene.analysis.TokenStream $r5;
        java.util.Map $r2;
        org.apache.lucene.analysis.Analyzer r6;
        java.lang.Object $r3;
        java.lang.String r1;
        java.io.Reader r4;

        r0 := @this: org.apache.lucene.analysis.PerFieldAnalyzerWrapper;

        r1 := @parameter0: java.lang.String;

        r4 := @parameter1: java.io.Reader;

        $r2 = r0.<org.apache.lucene.analysis.PerFieldAnalyzerWrapper: java.util.Map analyzerMap>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r6 = (org.apache.lucene.analysis.Analyzer) $r3;

        if r6 != null goto label1;

        r6 = r0.<org.apache.lucene.analysis.PerFieldAnalyzerWrapper: org.apache.lucene.analysis.Analyzer defaultAnalyzer>;

     label1:
        $r5 = virtualinvoke r6.<org.apache.lucene.analysis.Analyzer: org.apache.lucene.analysis.TokenStream tokenStream(java.lang.String,java.io.Reader)>(r1, r4);

        return $r5;
    }

    public org.apache.lucene.analysis.TokenStream reusableTokenStream(java.lang.String, java.io.Reader) throws java.io.IOException
    {
        org.apache.lucene.analysis.PerFieldAnalyzerWrapper r0;
        org.apache.lucene.analysis.TokenStream $r5;
        java.util.Map $r2;
        org.apache.lucene.analysis.Analyzer r6;
        java.lang.Object $r3;
        java.lang.String r1;
        java.io.Reader r4;

        r0 := @this: org.apache.lucene.analysis.PerFieldAnalyzerWrapper;

        r1 := @parameter0: java.lang.String;

        r4 := @parameter1: java.io.Reader;

        $r2 = r0.<org.apache.lucene.analysis.PerFieldAnalyzerWrapper: java.util.Map analyzerMap>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r6 = (org.apache.lucene.analysis.Analyzer) $r3;

        if r6 != null goto label1;

        r6 = r0.<org.apache.lucene.analysis.PerFieldAnalyzerWrapper: org.apache.lucene.analysis.Analyzer defaultAnalyzer>;

     label1:
        $r5 = virtualinvoke r6.<org.apache.lucene.analysis.Analyzer: org.apache.lucene.analysis.TokenStream reusableTokenStream(java.lang.String,java.io.Reader)>(r1, r4);

        return $r5;
    }

    public int getPositionIncrementGap(java.lang.String)
    {
        org.apache.lucene.analysis.PerFieldAnalyzerWrapper r0;
        java.util.Map $r2;
        org.apache.lucene.analysis.Analyzer r4;
        int $i0;
        java.lang.Object $r3;
        java.lang.String r1;

        r0 := @this: org.apache.lucene.analysis.PerFieldAnalyzerWrapper;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.apache.lucene.analysis.PerFieldAnalyzerWrapper: java.util.Map analyzerMap>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (org.apache.lucene.analysis.Analyzer) $r3;

        if r4 != null goto label1;

        r4 = r0.<org.apache.lucene.analysis.PerFieldAnalyzerWrapper: org.apache.lucene.analysis.Analyzer defaultAnalyzer>;

     label1:
        $i0 = virtualinvoke r4.<org.apache.lucene.analysis.Analyzer: int getPositionIncrementGap(java.lang.String)>(r1);

        return $i0;
    }

    public int getOffsetGap(org.apache.lucene.document.Fieldable)
    {
        org.apache.lucene.document.Fieldable r1;
        org.apache.lucene.analysis.PerFieldAnalyzerWrapper r0;
        java.util.Map $r2;
        org.apache.lucene.analysis.Analyzer r5;
        int $i0;
        java.lang.Object $r4;
        java.lang.String $r3;

        r0 := @this: org.apache.lucene.analysis.PerFieldAnalyzerWrapper;

        r1 := @parameter0: org.apache.lucene.document.Fieldable;

        $r2 = r0.<org.apache.lucene.analysis.PerFieldAnalyzerWrapper: java.util.Map analyzerMap>;

        $r3 = interfaceinvoke r1.<org.apache.lucene.document.Fieldable: java.lang.String name()>();

        $r4 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r3);

        r5 = (org.apache.lucene.analysis.Analyzer) $r4;

        if r5 != null goto label1;

        r5 = r0.<org.apache.lucene.analysis.PerFieldAnalyzerWrapper: org.apache.lucene.analysis.Analyzer defaultAnalyzer>;

     label1:
        $i0 = virtualinvoke r5.<org.apache.lucene.analysis.Analyzer: int getOffsetGap(org.apache.lucene.document.Fieldable)>(r1);

        return $i0;
    }

    public java.lang.String toString()
    {
        org.apache.lucene.analysis.PerFieldAnalyzerWrapper r2;
        org.apache.lucene.analysis.Analyzer $r6;
        java.util.Map $r3;
        java.lang.StringBuilder $r0, $r1, $r4, $r5, $r7, $r8;
        java.lang.String $r9;

        r2 := @this: org.apache.lucene.analysis.PerFieldAnalyzerWrapper;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("PerFieldAnalyzerWrapper(");

        $r3 = r2.<org.apache.lucene.analysis.PerFieldAnalyzerWrapper: java.util.Map analyzerMap>;

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", default=");

        $r6 = r2.<org.apache.lucene.analysis.PerFieldAnalyzerWrapper: org.apache.lucene.analysis.Analyzer defaultAnalyzer>;

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r9;
    }
}
