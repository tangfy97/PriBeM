public class com.adobe.xmp.impl.XMPUtilsImpl extends java.lang.Object implements com.adobe.xmp.XMPConst
{
    private static final int UCK_NORMAL;
    private static final int UCK_SPACE;
    private static final int UCK_COMMA;
    private static final int UCK_SEMICOLON;
    private static final int UCK_QUOTE;
    private static final int UCK_CONTROL;
    private static final java.lang.String SPACES;
    private static final java.lang.String COMMAS;
    private static final java.lang.String SEMICOLA;
    private static final java.lang.String QUOTES;
    private static final java.lang.String CONTROLS;
    static final boolean $assertionsDisabled;

    private void <init>()
    {
        com.adobe.xmp.impl.XMPUtilsImpl r0;

        r0 := @this: com.adobe.xmp.impl.XMPUtilsImpl;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.String catenateArrayItems(com.adobe.xmp.XMPMeta, java.lang.String, java.lang.String, java.lang.String, java.lang.String, boolean) throws com.adobe.xmp.XMPException
    {
        java.lang.StringBuffer $r6;
        com.adobe.xmp.XMPException $r4, $r13;
        int $i2, $i3;
        com.adobe.xmp.impl.XMPMetaImpl $r16;
        java.lang.String r0, r1, $r8, $r11, $r12, r14, r15;
        boolean $z0, $z1, $z2, $z3, z4, $z5;
        com.adobe.xmp.options.PropertyOptions $r3, $r5, $r10;
        com.adobe.xmp.impl.xpath.XMPPath $r17;
        java.util.Iterator $r7;
        com.adobe.xmp.XMPMeta r2;
        char $c0, $c1;
        com.adobe.xmp.impl.XMPNode $r18, $r19, r20;
        java.lang.Object $r9;

        r2 := @parameter0: com.adobe.xmp.XMPMeta;

        r0 := @parameter1: java.lang.String;

        r1 := @parameter2: java.lang.String;

        r14 := @parameter3: java.lang.String;

        r15 := @parameter4: java.lang.String;

        z4 := @parameter5: boolean;

        staticinvoke <com.adobe.xmp.impl.ParameterAsserts: void assertSchemaNS(java.lang.String)>(r0);

        staticinvoke <com.adobe.xmp.impl.ParameterAsserts: void assertArrayName(java.lang.String)>(r1);

        staticinvoke <com.adobe.xmp.impl.ParameterAsserts: void assertImplementation(com.adobe.xmp.XMPMeta)>(r2);

        if r14 == null goto label01;

        $i3 = virtualinvoke r14.<java.lang.String: int length()>();

        if $i3 != 0 goto label02;

     label01:
        r14 = "; ";

     label02:
        if r15 == null goto label03;

        $i2 = virtualinvoke r15.<java.lang.String: int length()>();

        if $i2 != 0 goto label04;

     label03:
        r15 = "\"";

     label04:
        $r16 = (com.adobe.xmp.impl.XMPMetaImpl) r2;

        $r17 = staticinvoke <com.adobe.xmp.impl.xpath.XMPPathParser: com.adobe.xmp.impl.xpath.XMPPath expandXPath(java.lang.String,java.lang.String)>(r0, r1);

        $r18 = virtualinvoke $r16.<com.adobe.xmp.impl.XMPMetaImpl: com.adobe.xmp.impl.XMPNode getRoot()>();

        $r19 = staticinvoke <com.adobe.xmp.impl.XMPNodeUtils: com.adobe.xmp.impl.XMPNode findNode(com.adobe.xmp.impl.XMPNode,com.adobe.xmp.impl.xpath.XMPPath,boolean,com.adobe.xmp.options.PropertyOptions)>($r18, $r17, 0, null);

        if $r19 != null goto label05;

        return "";

     label05:
        $r3 = virtualinvoke $r19.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions getOptions()>();

        $z0 = virtualinvoke $r3.<com.adobe.xmp.options.PropertyOptions: boolean isArray()>();

        if $z0 == 0 goto label06;

        $r5 = virtualinvoke $r19.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions getOptions()>();

        $z1 = virtualinvoke $r5.<com.adobe.xmp.options.PropertyOptions: boolean isArrayAlternate()>();

        if $z1 == 0 goto label07;

     label06:
        $r4 = new com.adobe.xmp.XMPException;

        specialinvoke $r4.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Named property must be non-alternate array", 4);

        throw $r4;

     label07:
        staticinvoke <com.adobe.xmp.impl.XMPUtilsImpl: void checkSeparator(java.lang.String)>(r14);

        $c0 = virtualinvoke r15.<java.lang.String: char charAt(int)>(0);

        $c1 = staticinvoke <com.adobe.xmp.impl.XMPUtilsImpl: char checkQuotes(java.lang.String,char)>(r15, $c0);

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r7 = virtualinvoke $r19.<com.adobe.xmp.impl.XMPNode: java.util.Iterator iterateChildren()>();

     label08:
        $z2 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label11;

        $r9 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r20 = (com.adobe.xmp.impl.XMPNode) $r9;

        $r10 = virtualinvoke r20.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions getOptions()>();

        $z3 = virtualinvoke $r10.<com.adobe.xmp.options.PropertyOptions: boolean isCompositeProperty()>();

        if $z3 == 0 goto label09;

        $r13 = new com.adobe.xmp.XMPException;

        specialinvoke $r13.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Array items must be simple", 4);

        throw $r13;

     label09:
        $r11 = virtualinvoke r20.<com.adobe.xmp.impl.XMPNode: java.lang.String getValue()>();

        $r12 = staticinvoke <com.adobe.xmp.impl.XMPUtilsImpl: java.lang.String applyQuotes(java.lang.String,char,char,boolean)>($r11, $c0, $c1, z4);

        virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r12);

        $z5 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label10;

        virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r14);

     label10:
        goto label08;

     label11:
        $r8 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r8;
    }

    public static void separateArrayItems(com.adobe.xmp.XMPMeta, java.lang.String, java.lang.String, java.lang.String, com.adobe.xmp.options.PropertyOptions, boolean) throws com.adobe.xmp.XMPException
    {
        boolean $z0, $z1, $z2, z3;
        com.adobe.xmp.options.PropertyOptions r5;
        com.adobe.xmp.XMPMeta r3;
        java.lang.StringBuilder $r11, $r12, $r14, $r15, $r17, $r18, $r22, $r23, $r24;
        com.adobe.xmp.XMPException $r21;
        com.adobe.xmp.impl.XMPMetaImpl r4;
        int $i0, $i3, $i4, $i5, $i8, $i9, $i10, $i12, $i14, i15, i17, i18, i20, i21, i22, i23, $i24, $i25, $i27;
        java.lang.String r0, r1, r2, $r9, r20;
        char $c1, $c2, $c6, $c7, $c11, $c13, c16, c19;
        com.adobe.xmp.impl.XMPNode $r6, $r8, $r25;

        r3 := @parameter0: com.adobe.xmp.XMPMeta;

        r0 := @parameter1: java.lang.String;

        r1 := @parameter2: java.lang.String;

        r2 := @parameter3: java.lang.String;

        r5 := @parameter4: com.adobe.xmp.options.PropertyOptions;

        z3 := @parameter5: boolean;

        staticinvoke <com.adobe.xmp.impl.ParameterAsserts: void assertSchemaNS(java.lang.String)>(r0);

        staticinvoke <com.adobe.xmp.impl.ParameterAsserts: void assertArrayName(java.lang.String)>(r1);

        if r2 != null goto label01;

        $r21 = new com.adobe.xmp.XMPException;

        specialinvoke $r21.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Parameter must not be null", 4);

        throw $r21;

     label01:
        staticinvoke <com.adobe.xmp.impl.ParameterAsserts: void assertImplementation(com.adobe.xmp.XMPMeta)>(r3);

        r4 = (com.adobe.xmp.impl.XMPMetaImpl) r3;

        $r6 = staticinvoke <com.adobe.xmp.impl.XMPUtilsImpl: com.adobe.xmp.impl.XMPNode separateFindCreateArray(java.lang.String,java.lang.String,com.adobe.xmp.options.PropertyOptions,com.adobe.xmp.impl.XMPMetaImpl)>(r0, r1, r5, r4);

        i15 = 0;

        c16 = 0;

        i17 = 0;

        $i0 = virtualinvoke r2.<java.lang.String: int length()>();

     label02:
        if i17 >= $i0 goto label26;

        i18 = i17;

     label03:
        if i18 >= $i0 goto label05;

        $c13 = virtualinvoke r2.<java.lang.String: char charAt(int)>(i18);

        c16 = $c13;

        $i14 = staticinvoke <com.adobe.xmp.impl.XMPUtilsImpl: int classifyCharacter(char)>($c13);

        i15 = $i14;

        if $i14 == 0 goto label05;

        if $i14 != 4 goto label04;

        goto label05;

     label04:
        i18 = i18 + 1;

        goto label03;

     label05:
        if i18 < $i0 goto label06;

        goto label26;

     label06:
        if i15 == 4 goto label12;

        i17 = i18;

     label07:
        if i17 >= $i0 goto label11;

        $c7 = virtualinvoke r2.<java.lang.String: char charAt(int)>(i17);

        c16 = $c7;

        $i8 = staticinvoke <com.adobe.xmp.impl.XMPUtilsImpl: int classifyCharacter(char)>($c7);

        i15 = $i8;

        if $i8 == 0 goto label10;

        if $i8 == 4 goto label10;

        if $i8 != 2 goto label08;

        if z3 == 0 goto label08;

        goto label10;

     label08:
        if $i8 == 1 goto label09;

        goto label11;

     label09:
        $i9 = i17 + 1;

        if $i9 >= $i0 goto label11;

        $i10 = i17 + 1;

        $c11 = virtualinvoke r2.<java.lang.String: char charAt(int)>($i10);

        c16 = $c11;

        $i12 = staticinvoke <com.adobe.xmp.impl.XMPUtilsImpl: int classifyCharacter(char)>($c11);

        if $i12 == 0 goto label10;

        if $i12 == 4 goto label10;

        if $i12 != 2 goto label11;

        if z3 == 0 goto label11;

     label10:
        i17 = i17 + 1;

        goto label07;

     label11:
        r20 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int,int)>(i18, i17);

        goto label21;

     label12:
        c19 = c16;

        $c1 = staticinvoke <com.adobe.xmp.impl.XMPUtilsImpl: char getClosingQuote(char)>(c16);

        i20 = i18 + 1;

        r20 = "";

        i17 = i20;

     label13:
        if i17 >= $i0 goto label21;

        $c2 = virtualinvoke r2.<java.lang.String: char charAt(int)>(i17);

        c16 = $c2;

        $i3 = staticinvoke <com.adobe.xmp.impl.XMPUtilsImpl: int classifyCharacter(char)>($c2);

        i15 = $i3;

        if $i3 != 4 goto label14;

        $z1 = staticinvoke <com.adobe.xmp.impl.XMPUtilsImpl: boolean isSurroundingQuote(char,char,char)>($c2, c19, $c1);

        if $z1 != 0 goto label15;

     label14:
        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r20);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c2);

        r20 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label20;

     label15:
        $i4 = i17 + 1;

        if $i4 >= $i0 goto label16;

        $i5 = i17 + 1;

        $c6 = virtualinvoke r2.<java.lang.String: char charAt(int)>($i5);

        i21 = $c6;

        staticinvoke <com.adobe.xmp.impl.XMPUtilsImpl: int classifyCharacter(char)>($c6);

        goto label17;

     label16:
        i21 = 59;

     label17:
        $i25 = (int) $c2;

        if $i25 != i21 goto label18;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r20);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c2);

        r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        i17 = i17 + 1;

        goto label20;

     label18:
        $z2 = staticinvoke <com.adobe.xmp.impl.XMPUtilsImpl: boolean isClosingingQuote(char,char,char)>($c2, c19, $c1);

        if $z2 != 0 goto label19;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r20);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c2);

        r20 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label20;

     label19:
        i17 = i17 + 1;

        goto label21;

     label20:
        i17 = i17 + 1;

        goto label13;

     label21:
        $i27 = (int) -1;

        i22 = $i27;

        i23 = 1;

     label22:
        $i24 = virtualinvoke $r6.<com.adobe.xmp.impl.XMPNode: int getChildrenLength()>();

        if i23 > $i24 goto label24;

        $r8 = virtualinvoke $r6.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.impl.XMPNode getChild(int)>(i23);

        $r9 = virtualinvoke $r8.<com.adobe.xmp.impl.XMPNode: java.lang.String getValue()>();

        $z0 = virtualinvoke r20.<java.lang.String: boolean equals(java.lang.Object)>($r9);

        if $z0 == 0 goto label23;

        i22 = i23;

        goto label24;

     label23:
        i23 = i23 + 1;

        goto label22;

     label24:
        if i22 >= 0 goto label25;

        $r25 = new com.adobe.xmp.impl.XMPNode;

        specialinvoke $r25.<com.adobe.xmp.impl.XMPNode: void <init>(java.lang.String,java.lang.String,com.adobe.xmp.options.PropertyOptions)>("[]", r20, null);

        virtualinvoke $r6.<com.adobe.xmp.impl.XMPNode: void addChild(com.adobe.xmp.impl.XMPNode)>($r25);

     label25:
        goto label02;

     label26:
        return;
    }

    private static com.adobe.xmp.impl.XMPNode separateFindCreateArray(java.lang.String, java.lang.String, com.adobe.xmp.options.PropertyOptions, com.adobe.xmp.impl.XMPMetaImpl) throws com.adobe.xmp.XMPException
    {
        com.adobe.xmp.XMPException $r10, $r12, $r13, $r14;
        com.adobe.xmp.impl.XMPMetaImpl r4;
        java.lang.String r1, r2;
        boolean $z0, $z1, $z2, $z3;
        com.adobe.xmp.options.PropertyOptions $r0, $r8, $r11, r15;
        com.adobe.xmp.impl.xpath.XMPPath $r3;
        com.adobe.xmp.impl.XMPNode $r5, $r6, $r7, $r9, r16;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r15 := @parameter2: com.adobe.xmp.options.PropertyOptions;

        r4 := @parameter3: com.adobe.xmp.impl.XMPMetaImpl;

        $r0 = staticinvoke <com.adobe.xmp.impl.XMPNodeUtils: com.adobe.xmp.options.PropertyOptions verifySetOptions(com.adobe.xmp.options.PropertyOptions,java.lang.Object)>(r15, null);

        $z0 = virtualinvoke $r0.<com.adobe.xmp.options.PropertyOptions: boolean isOnlyArrayOptions()>();

        if $z0 != 0 goto label1;

        $r14 = new com.adobe.xmp.XMPException;

        specialinvoke $r14.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Options can only provide array form", 103);

        throw $r14;

     label1:
        $r3 = staticinvoke <com.adobe.xmp.impl.xpath.XMPPathParser: com.adobe.xmp.impl.xpath.XMPPath expandXPath(java.lang.String,java.lang.String)>(r1, r2);

        $r5 = virtualinvoke r4.<com.adobe.xmp.impl.XMPMetaImpl: com.adobe.xmp.impl.XMPNode getRoot()>();

        $r6 = staticinvoke <com.adobe.xmp.impl.XMPNodeUtils: com.adobe.xmp.impl.XMPNode findNode(com.adobe.xmp.impl.XMPNode,com.adobe.xmp.impl.xpath.XMPPath,boolean,com.adobe.xmp.options.PropertyOptions)>($r5, $r3, 0, null);

        r16 = $r6;

        if $r6 == null goto label5;

        $r11 = virtualinvoke $r6.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions getOptions()>();

        $z1 = virtualinvoke $r11.<com.adobe.xmp.options.PropertyOptions: boolean isArray()>();

        if $z1 == 0 goto label2;

        $z2 = virtualinvoke $r11.<com.adobe.xmp.options.PropertyOptions: boolean isArrayAlternate()>();

        if $z2 == 0 goto label3;

     label2:
        $r12 = new com.adobe.xmp.XMPException;

        specialinvoke $r12.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Named property must be non-alternate array", 102);

        throw $r12;

     label3:
        $z3 = virtualinvoke $r0.<com.adobe.xmp.options.PropertyOptions: boolean equalArrayTypes(com.adobe.xmp.options.PropertyOptions)>($r11);

        if $z3 == 0 goto label4;

        $r13 = new com.adobe.xmp.XMPException;

        specialinvoke $r13.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Mismatch of specified and existing array form", 102);

        throw $r13;

     label4:
        goto label6;

     label5:
        $r7 = virtualinvoke r4.<com.adobe.xmp.impl.XMPMetaImpl: com.adobe.xmp.impl.XMPNode getRoot()>();

        $r8 = virtualinvoke $r0.<com.adobe.xmp.options.PropertyOptions: com.adobe.xmp.options.PropertyOptions setArray(boolean)>(1);

        $r9 = staticinvoke <com.adobe.xmp.impl.XMPNodeUtils: com.adobe.xmp.impl.XMPNode findNode(com.adobe.xmp.impl.XMPNode,com.adobe.xmp.impl.xpath.XMPPath,boolean,com.adobe.xmp.options.PropertyOptions)>($r7, $r3, 1, $r8);

        r16 = $r9;

        if $r9 != null goto label6;

        $r10 = new com.adobe.xmp.XMPException;

        specialinvoke $r10.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Failed to create named array", 102);

        throw $r10;

     label6:
        return r16;
    }

    public static void removeProperties(com.adobe.xmp.XMPMeta, java.lang.String, java.lang.String, boolean, boolean) throws com.adobe.xmp.XMPException
    {
        com.adobe.xmp.impl.xpath.XMPPathSegment $r26, $r28;
        com.adobe.xmp.properties.XMPAliasInfo r11;
        boolean z0, $z1, z2, $z3, $z4, $z5, $z6, $z7;
        com.adobe.xmp.impl.xpath.XMPPath $r14, $r20;
        com.adobe.xmp.options.PropertyOptions $r24;
        com.adobe.xmp.XMPMeta r0;
        com.adobe.xmp.XMPSchemaRegistry $r9;
        com.adobe.xmp.properties.XMPAliasInfo[] $r10;
        com.adobe.xmp.XMPException $r19;
        com.adobe.xmp.impl.XMPMetaImpl r1;
        int $i0, $i1, $i2, $i3, i4;
        java.lang.String r2, r3, $r12, $r13, $r27, $r29;
        java.util.Iterator $r5;
        com.adobe.xmp.impl.XMPNode $r4, $r7, $r8, $r15, $r16, $r17, $r18, $r21, $r22, $r23, $r25, r30;
        java.lang.Object $r6;

        r0 := @parameter0: com.adobe.xmp.XMPMeta;

        r3 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        z0 := @parameter3: boolean;

        z2 := @parameter4: boolean;

        staticinvoke <com.adobe.xmp.impl.ParameterAsserts: void assertImplementation(com.adobe.xmp.XMPMeta)>(r0);

        r1 = (com.adobe.xmp.impl.XMPMetaImpl) r0;

        if r2 == null goto label05;

        $i2 = virtualinvoke r2.<java.lang.String: int length()>();

        if $i2 <= 0 goto label05;

        if r3 == null goto label01;

        $i3 = virtualinvoke r3.<java.lang.String: int length()>();

        if $i3 != 0 goto label02;

     label01:
        $r19 = new com.adobe.xmp.XMPException;

        specialinvoke $r19.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Property name requires schema namespace", 4);

        throw $r19;

     label02:
        $r20 = staticinvoke <com.adobe.xmp.impl.xpath.XMPPathParser: com.adobe.xmp.impl.xpath.XMPPath expandXPath(java.lang.String,java.lang.String)>(r3, r2);

        $r21 = virtualinvoke r1.<com.adobe.xmp.impl.XMPMetaImpl: com.adobe.xmp.impl.XMPNode getRoot()>();

        $r22 = staticinvoke <com.adobe.xmp.impl.XMPNodeUtils: com.adobe.xmp.impl.XMPNode findNode(com.adobe.xmp.impl.XMPNode,com.adobe.xmp.impl.xpath.XMPPath,boolean,com.adobe.xmp.options.PropertyOptions)>($r21, $r20, 0, null);

        if $r22 == null goto label04;

        if z0 != 0 goto label03;

        $r26 = virtualinvoke $r20.<com.adobe.xmp.impl.xpath.XMPPath: com.adobe.xmp.impl.xpath.XMPPathSegment getSegment(int)>(0);

        $r27 = virtualinvoke $r26.<com.adobe.xmp.impl.xpath.XMPPathSegment: java.lang.String getName()>();

        $r28 = virtualinvoke $r20.<com.adobe.xmp.impl.xpath.XMPPath: com.adobe.xmp.impl.xpath.XMPPathSegment getSegment(int)>(1);

        $r29 = virtualinvoke $r28.<com.adobe.xmp.impl.xpath.XMPPathSegment: java.lang.String getName()>();

        $z6 = staticinvoke <com.adobe.xmp.impl.Utils: boolean isInternalProperty(java.lang.String,java.lang.String)>($r27, $r29);

        if $z6 != 0 goto label04;

     label03:
        $r23 = virtualinvoke $r22.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.impl.XMPNode getParent()>();

        virtualinvoke $r23.<com.adobe.xmp.impl.XMPNode: void removeChild(com.adobe.xmp.impl.XMPNode)>($r22);

        $r24 = virtualinvoke $r23.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions getOptions()>();

        $z4 = virtualinvoke $r24.<com.adobe.xmp.options.PropertyOptions: boolean isSchemaNode()>();

        if $z4 == 0 goto label04;

        $z5 = virtualinvoke $r23.<com.adobe.xmp.impl.XMPNode: boolean hasChildren()>();

        if $z5 != 0 goto label04;

        $r25 = virtualinvoke $r23.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.impl.XMPNode getParent()>();

        virtualinvoke $r25.<com.adobe.xmp.impl.XMPNode: void removeChild(com.adobe.xmp.impl.XMPNode)>($r23);

     label04:
        goto label13;

     label05:
        if r3 == null goto label10;

        $i0 = virtualinvoke r3.<java.lang.String: int length()>();

        if $i0 <= 0 goto label10;

        $r7 = virtualinvoke r1.<com.adobe.xmp.impl.XMPMetaImpl: com.adobe.xmp.impl.XMPNode getRoot()>();

        $r8 = staticinvoke <com.adobe.xmp.impl.XMPNodeUtils: com.adobe.xmp.impl.XMPNode findSchemaNode(com.adobe.xmp.impl.XMPNode,java.lang.String,boolean)>($r7, r3, 0);

        if $r8 == null goto label06;

        $z3 = staticinvoke <com.adobe.xmp.impl.XMPUtilsImpl: boolean removeSchemaChildren(com.adobe.xmp.impl.XMPNode,boolean)>($r8, z0);

        if $z3 == 0 goto label06;

        $r18 = virtualinvoke r1.<com.adobe.xmp.impl.XMPMetaImpl: com.adobe.xmp.impl.XMPNode getRoot()>();

        virtualinvoke $r18.<com.adobe.xmp.impl.XMPNode: void removeChild(com.adobe.xmp.impl.XMPNode)>($r8);

     label06:
        if z2 == 0 goto label09;

        $r9 = staticinvoke <com.adobe.xmp.XMPMetaFactory: com.adobe.xmp.XMPSchemaRegistry getSchemaRegistry()>();

        $r10 = interfaceinvoke $r9.<com.adobe.xmp.XMPSchemaRegistry: com.adobe.xmp.properties.XMPAliasInfo[] findAliases(java.lang.String)>(r3);

        i4 = 0;

     label07:
        $i1 = lengthof $r10;

        if i4 >= $i1 goto label09;

        r11 = $r10[i4];

        $r12 = interfaceinvoke r11.<com.adobe.xmp.properties.XMPAliasInfo: java.lang.String getNamespace()>();

        $r13 = interfaceinvoke r11.<com.adobe.xmp.properties.XMPAliasInfo: java.lang.String getPropName()>();

        $r14 = staticinvoke <com.adobe.xmp.impl.xpath.XMPPathParser: com.adobe.xmp.impl.xpath.XMPPath expandXPath(java.lang.String,java.lang.String)>($r12, $r13);

        $r15 = virtualinvoke r1.<com.adobe.xmp.impl.XMPMetaImpl: com.adobe.xmp.impl.XMPNode getRoot()>();

        $r16 = staticinvoke <com.adobe.xmp.impl.XMPNodeUtils: com.adobe.xmp.impl.XMPNode findNode(com.adobe.xmp.impl.XMPNode,com.adobe.xmp.impl.xpath.XMPPath,boolean,com.adobe.xmp.options.PropertyOptions)>($r15, $r14, 0, null);

        if $r16 == null goto label08;

        $r17 = virtualinvoke $r16.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.impl.XMPNode getParent()>();

        virtualinvoke $r17.<com.adobe.xmp.impl.XMPNode: void removeChild(com.adobe.xmp.impl.XMPNode)>($r16);

     label08:
        i4 = i4 + 1;

        goto label07;

     label09:
        goto label13;

     label10:
        $r4 = virtualinvoke r1.<com.adobe.xmp.impl.XMPMetaImpl: com.adobe.xmp.impl.XMPNode getRoot()>();

        $r5 = virtualinvoke $r4.<com.adobe.xmp.impl.XMPNode: java.util.Iterator iterateChildren()>();

     label11:
        $z7 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z7 == 0 goto label13;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r30 = (com.adobe.xmp.impl.XMPNode) $r6;

        $z1 = staticinvoke <com.adobe.xmp.impl.XMPUtilsImpl: boolean removeSchemaChildren(com.adobe.xmp.impl.XMPNode,boolean)>(r30, z0);

        if $z1 == 0 goto label12;

        interfaceinvoke $r5.<java.util.Iterator: void remove()>();

     label12:
        goto label11;

     label13:
        return;
    }

    public static void appendProperties(com.adobe.xmp.XMPMeta, com.adobe.xmp.XMPMeta, boolean, boolean, boolean) throws com.adobe.xmp.XMPException
    {
        boolean $z0, $z1, z2, z3, z4, $z5, z6, $z7;
        com.adobe.xmp.options.PropertyOptions $r20, $r21;
        com.adobe.xmp.XMPMeta r0, r1;
        com.adobe.xmp.impl.XMPMetaImpl r2, r3;
        java.lang.String $r9, $r15, $r16, $r18, $r19;
        java.util.Iterator $r5, $r11;
        com.adobe.xmp.impl.XMPNode $r4, r7, $r8, $r10, $r12, r14, $r17, $r22, r23;
        java.lang.Object $r6, $r13;

        r0 := @parameter0: com.adobe.xmp.XMPMeta;

        r1 := @parameter1: com.adobe.xmp.XMPMeta;

        z3 := @parameter2: boolean;

        z4 := @parameter3: boolean;

        z2 := @parameter4: boolean;

        staticinvoke <com.adobe.xmp.impl.ParameterAsserts: void assertImplementation(com.adobe.xmp.XMPMeta)>(r0);

        staticinvoke <com.adobe.xmp.impl.ParameterAsserts: void assertImplementation(com.adobe.xmp.XMPMeta)>(r1);

        r2 = (com.adobe.xmp.impl.XMPMetaImpl) r0;

        r3 = (com.adobe.xmp.impl.XMPMetaImpl) r1;

        $r4 = virtualinvoke r2.<com.adobe.xmp.impl.XMPMetaImpl: com.adobe.xmp.impl.XMPNode getRoot()>();

        $r5 = virtualinvoke $r4.<com.adobe.xmp.impl.XMPNode: java.util.Iterator iterateChildren()>();

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label9;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (com.adobe.xmp.impl.XMPNode) $r6;

        $r8 = virtualinvoke r3.<com.adobe.xmp.impl.XMPMetaImpl: com.adobe.xmp.impl.XMPNode getRoot()>();

        $r9 = virtualinvoke r7.<com.adobe.xmp.impl.XMPNode: java.lang.String getName()>();

        $r10 = staticinvoke <com.adobe.xmp.impl.XMPNodeUtils: com.adobe.xmp.impl.XMPNode findSchemaNode(com.adobe.xmp.impl.XMPNode,java.lang.String,boolean)>($r8, $r9, 0);

        r23 = $r10;

        z6 = 0;

        if $r10 != null goto label2;

        $r17 = new com.adobe.xmp.impl.XMPNode;

        $r18 = virtualinvoke r7.<com.adobe.xmp.impl.XMPNode: java.lang.String getName()>();

        $r19 = virtualinvoke r7.<com.adobe.xmp.impl.XMPNode: java.lang.String getValue()>();

        $r20 = new com.adobe.xmp.options.PropertyOptions;

        specialinvoke $r20.<com.adobe.xmp.options.PropertyOptions: void <init>()>();

        $r21 = virtualinvoke $r20.<com.adobe.xmp.options.PropertyOptions: com.adobe.xmp.options.PropertyOptions setSchemaNode(boolean)>(1);

        specialinvoke $r17.<com.adobe.xmp.impl.XMPNode: void <init>(java.lang.String,java.lang.String,com.adobe.xmp.options.PropertyOptions)>($r18, $r19, $r21);

        r23 = $r17;

        $r22 = virtualinvoke r3.<com.adobe.xmp.impl.XMPMetaImpl: com.adobe.xmp.impl.XMPNode getRoot()>();

        virtualinvoke $r22.<com.adobe.xmp.impl.XMPNode: void addChild(com.adobe.xmp.impl.XMPNode)>($r17);

        z6 = 1;

     label2:
        $r11 = virtualinvoke r7.<com.adobe.xmp.impl.XMPNode: java.util.Iterator iterateChildren()>();

     label3:
        $z7 = interfaceinvoke $r11.<java.util.Iterator: boolean hasNext()>();

        if $z7 == 0 goto label6;

        $r13 = interfaceinvoke $r11.<java.util.Iterator: java.lang.Object next()>();

        r14 = (com.adobe.xmp.impl.XMPNode) $r13;

        if z3 != 0 goto label4;

        $r15 = virtualinvoke r7.<com.adobe.xmp.impl.XMPNode: java.lang.String getName()>();

        $r16 = virtualinvoke r14.<com.adobe.xmp.impl.XMPNode: java.lang.String getName()>();

        $z5 = staticinvoke <com.adobe.xmp.impl.Utils: boolean isInternalProperty(java.lang.String,java.lang.String)>($r15, $r16);

        if $z5 != 0 goto label5;

     label4:
        staticinvoke <com.adobe.xmp.impl.XMPUtilsImpl: void appendSubtree(com.adobe.xmp.impl.XMPMetaImpl,com.adobe.xmp.impl.XMPNode,com.adobe.xmp.impl.XMPNode,boolean,boolean)>(r3, r14, r23, z4, z2);

     label5:
        goto label3;

     label6:
        $z1 = virtualinvoke r23.<com.adobe.xmp.impl.XMPNode: boolean hasChildren()>();

        if $z1 != 0 goto label8;

        if z6 != 0 goto label7;

        if z2 == 0 goto label8;

     label7:
        $r12 = virtualinvoke r3.<com.adobe.xmp.impl.XMPMetaImpl: com.adobe.xmp.impl.XMPNode getRoot()>();

        virtualinvoke $r12.<com.adobe.xmp.impl.XMPNode: void removeChild(com.adobe.xmp.impl.XMPNode)>(r23);

     label8:
        goto label1;

     label9:
        return;
    }

    private static boolean removeSchemaChildren(com.adobe.xmp.impl.XMPNode, boolean)
    {
        java.util.Iterator $r1;
        com.adobe.xmp.impl.XMPNode r0, r3;
        java.lang.Object $r2;
        java.lang.String $r4, $r5;
        boolean $z0, $z1, z2, $z3, $z4;

        r0 := @parameter0: com.adobe.xmp.impl.XMPNode;

        z2 := @parameter1: boolean;

        $r1 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: java.util.Iterator iterateChildren()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (com.adobe.xmp.impl.XMPNode) $r2;

        if z2 != 0 goto label2;

        $r4 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: java.lang.String getName()>();

        $r5 = virtualinvoke r3.<com.adobe.xmp.impl.XMPNode: java.lang.String getName()>();

        $z3 = staticinvoke <com.adobe.xmp.impl.Utils: boolean isInternalProperty(java.lang.String,java.lang.String)>($r4, $r5);

        if $z3 != 0 goto label3;

     label2:
        interfaceinvoke $r1.<java.util.Iterator: void remove()>();

     label3:
        goto label1;

     label4:
        $z1 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: boolean hasChildren()>();

        if $z1 != 0 goto label5;

        $z4 = 1;

        goto label6;

     label5:
        $z4 = 0;

     label6:
        return $z4;
    }

    private static void appendSubtree(com.adobe.xmp.impl.XMPMetaImpl, com.adobe.xmp.impl.XMPNode, com.adobe.xmp.impl.XMPNode, boolean, boolean) throws com.adobe.xmp.XMPException
    {
        java.lang.String $r2, $r14, $r16, $r18, $r19, $r21, $r23, $r24, $r26, $r27, $r31, $r37, $r38;
        com.adobe.xmp.impl.XMPNode r0, r1, $r3, r11, $r15, $r17, $r20, $r35, r39, r40, r41, r42, r43, $r44;
        boolean z0, z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, z17, $z18, $z19, z20;
        com.adobe.xmp.options.PropertyOptions $r4, $r5, $r25, $r32, $r36;
        int $i0, $i1, $i2, $i4, $i6;
        com.adobe.xmp.impl.XMPMetaImpl r30;
        java.util.Iterator $r6, $r8, $r12, $r28;
        java.lang.Object $r7, $r9, $r10, $r13, $r29, $r33, $r34;

        r30 := @parameter0: com.adobe.xmp.impl.XMPMetaImpl;

        r1 := @parameter1: com.adobe.xmp.impl.XMPNode;

        r0 := @parameter2: com.adobe.xmp.impl.XMPNode;

        z1 := @parameter3: boolean;

        z0 := @parameter4: boolean;

        $r2 = virtualinvoke r1.<com.adobe.xmp.impl.XMPNode: java.lang.String getName()>();

        $r3 = staticinvoke <com.adobe.xmp.impl.XMPNodeUtils: com.adobe.xmp.impl.XMPNode findChildNode(com.adobe.xmp.impl.XMPNode,java.lang.String,boolean)>(r0, $r2, 0);

        r39 = $r3;

        z17 = 0;

        if z0 == 0 goto label06;

        $r36 = virtualinvoke r1.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions getOptions()>();

        $z15 = virtualinvoke $r36.<com.adobe.xmp.options.PropertyOptions: boolean isSimple()>();

        if $z15 == 0 goto label03;

        $r37 = virtualinvoke r1.<com.adobe.xmp.impl.XMPNode: java.lang.String getValue()>();

        if $r37 == null goto label01;

        $r38 = virtualinvoke r1.<com.adobe.xmp.impl.XMPNode: java.lang.String getValue()>();

        $i2 = virtualinvoke $r38.<java.lang.String: int length()>();

        if $i2 != 0 goto label02;

     label01:
        $z18 = 1;

        goto label05;

     label02:
        $z18 = 0;

        goto label05;

     label03:
        $z16 = virtualinvoke r1.<com.adobe.xmp.impl.XMPNode: boolean hasChildren()>();

        if $z16 != 0 goto label04;

        $z18 = 1;

        goto label05;

     label04:
        $z18 = 0;

     label05:
        z17 = $z18;

     label06:
        if z0 == 0 goto label07;

        if z17 == 0 goto label07;

        if $r3 == null goto label29;

        virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: void removeChild(com.adobe.xmp.impl.XMPNode)>($r3);

        goto label29;

     label07:
        if $r3 != null goto label08;

        $r34 = virtualinvoke r1.<com.adobe.xmp.impl.XMPNode: java.lang.Object clone()>();

        $r35 = (com.adobe.xmp.impl.XMPNode) $r34;

        virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: void addChild(com.adobe.xmp.impl.XMPNode)>($r35);

        goto label29;

     label08:
        if z1 == 0 goto label09;

        $r31 = virtualinvoke r1.<com.adobe.xmp.impl.XMPNode: java.lang.String getValue()>();

        $r32 = virtualinvoke r1.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions getOptions()>();

        virtualinvoke r30.<com.adobe.xmp.impl.XMPMetaImpl: void setNode(com.adobe.xmp.impl.XMPNode,java.lang.Object,com.adobe.xmp.options.PropertyOptions,boolean)>($r3, $r31, $r32, 1);

        virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: void removeChild(com.adobe.xmp.impl.XMPNode)>($r3);

        $r33 = virtualinvoke r1.<com.adobe.xmp.impl.XMPNode: java.lang.Object clone()>();

        r40 = (com.adobe.xmp.impl.XMPNode) $r33;

        virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: void addChild(com.adobe.xmp.impl.XMPNode)>(r40);

        goto label29;

     label09:
        $r4 = virtualinvoke r1.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions getOptions()>();

        $r5 = virtualinvoke $r3.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions getOptions()>();

        if $r4 == $r5 goto label10;

        return;

     label10:
        $z2 = virtualinvoke $r4.<com.adobe.xmp.options.PropertyOptions: boolean isStruct()>();

        if $z2 == 0 goto label14;

        $r28 = virtualinvoke r1.<com.adobe.xmp.impl.XMPNode: java.util.Iterator iterateChildren()>();

     label11:
        $z13 = interfaceinvoke $r28.<java.util.Iterator: boolean hasNext()>();

        if $z13 == 0 goto label13;

        $r29 = interfaceinvoke $r28.<java.util.Iterator: java.lang.Object next()>();

        r41 = (com.adobe.xmp.impl.XMPNode) $r29;

        staticinvoke <com.adobe.xmp.impl.XMPUtilsImpl: void appendSubtree(com.adobe.xmp.impl.XMPMetaImpl,com.adobe.xmp.impl.XMPNode,com.adobe.xmp.impl.XMPNode,boolean,boolean)>(r30, r41, $r3, z1, z0);

        if z0 == 0 goto label12;

        $z14 = virtualinvoke $r3.<com.adobe.xmp.impl.XMPNode: boolean hasChildren()>();

        if $z14 != 0 goto label12;

        virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: void removeChild(com.adobe.xmp.impl.XMPNode)>($r3);

     label12:
        goto label11;

     label13:
        goto label29;

     label14:
        $z3 = virtualinvoke $r4.<com.adobe.xmp.options.PropertyOptions: boolean isArrayAltText()>();

        if $z3 == 0 goto label23;

        $r12 = virtualinvoke r1.<com.adobe.xmp.impl.XMPNode: java.util.Iterator iterateChildren()>();

     label15:
        $z19 = interfaceinvoke $r12.<java.util.Iterator: boolean hasNext()>();

        if $z19 == 0 goto label22;

        $r13 = interfaceinvoke $r12.<java.util.Iterator: java.lang.Object next()>();

        r42 = (com.adobe.xmp.impl.XMPNode) $r13;

        $z8 = virtualinvoke r42.<com.adobe.xmp.impl.XMPNode: boolean hasQualifier()>();

        if $z8 == 0 goto label15;

        $r14 = "xml:lang";

        $r15 = virtualinvoke r42.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.impl.XMPNode getQualifier(int)>(1);

        $r16 = virtualinvoke $r15.<com.adobe.xmp.impl.XMPNode: java.lang.String getName()>();

        $z9 = virtualinvoke $r14.<java.lang.String: boolean equals(java.lang.Object)>($r16);

        if $z9 != 0 goto label16;

        goto label15;

     label16:
        $r17 = virtualinvoke r42.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.impl.XMPNode getQualifier(int)>(1);

        $r18 = virtualinvoke $r17.<com.adobe.xmp.impl.XMPNode: java.lang.String getValue()>();

        $i0 = staticinvoke <com.adobe.xmp.impl.XMPNodeUtils: int lookupLanguageItem(com.adobe.xmp.impl.XMPNode,java.lang.String)>($r3, $r18);

        if z0 == 0 goto label18;

        $r26 = virtualinvoke r42.<com.adobe.xmp.impl.XMPNode: java.lang.String getValue()>();

        if $r26 == null goto label17;

        $r27 = virtualinvoke r42.<com.adobe.xmp.impl.XMPNode: java.lang.String getValue()>();

        $i1 = virtualinvoke $r27.<java.lang.String: int length()>();

        if $i1 != 0 goto label18;

     label17:
        $i4 = (int) -1;

        if $i0 == $i4 goto label21;

        virtualinvoke $r3.<com.adobe.xmp.impl.XMPNode: void removeChild(int)>($i0);

        $z12 = virtualinvoke $r3.<com.adobe.xmp.impl.XMPNode: boolean hasChildren()>();

        if $z12 != 0 goto label21;

        virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: void removeChild(com.adobe.xmp.impl.XMPNode)>($r3);

        goto label21;

     label18:
        $i6 = (int) -1;

        if $i0 != $i6 goto label21;

        $r19 = "x-default";

        $r20 = virtualinvoke r42.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.impl.XMPNode getQualifier(int)>(1);

        $r21 = virtualinvoke $r20.<com.adobe.xmp.impl.XMPNode: java.lang.String getValue()>();

        $z10 = virtualinvoke $r19.<java.lang.String: boolean equals(java.lang.Object)>($r21);

        if $z10 == 0 goto label19;

        $z11 = virtualinvoke $r3.<com.adobe.xmp.impl.XMPNode: boolean hasChildren()>();

        if $z11 != 0 goto label20;

     label19:
        virtualinvoke r42.<com.adobe.xmp.impl.XMPNode: void cloneSubtree(com.adobe.xmp.impl.XMPNode)>($r3);

        goto label21;

     label20:
        $r44 = new com.adobe.xmp.impl.XMPNode;

        $r23 = virtualinvoke r42.<com.adobe.xmp.impl.XMPNode: java.lang.String getName()>();

        $r24 = virtualinvoke r42.<com.adobe.xmp.impl.XMPNode: java.lang.String getValue()>();

        $r25 = virtualinvoke r42.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions getOptions()>();

        specialinvoke $r44.<com.adobe.xmp.impl.XMPNode: void <init>(java.lang.String,java.lang.String,com.adobe.xmp.options.PropertyOptions)>($r23, $r24, $r25);

        virtualinvoke r42.<com.adobe.xmp.impl.XMPNode: void cloneSubtree(com.adobe.xmp.impl.XMPNode)>($r44);

        virtualinvoke $r3.<com.adobe.xmp.impl.XMPNode: void addChild(int,com.adobe.xmp.impl.XMPNode)>(1, $r44);

     label21:
        goto label15;

     label22:
        goto label29;

     label23:
        $z4 = virtualinvoke $r4.<com.adobe.xmp.options.PropertyOptions: boolean isArray()>();

        if $z4 == 0 goto label29;

        $r6 = virtualinvoke r1.<com.adobe.xmp.impl.XMPNode: java.util.Iterator iterateChildren()>();

     label24:
        $z5 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label29;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r43 = (com.adobe.xmp.impl.XMPNode) $r7;

        z20 = 0;

        $r8 = virtualinvoke r39.<com.adobe.xmp.impl.XMPNode: java.util.Iterator iterateChildren()>();

     label25:
        $z6 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z6 == 0 goto label27;

        $r10 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        r11 = (com.adobe.xmp.impl.XMPNode) $r10;

        $z7 = staticinvoke <com.adobe.xmp.impl.XMPUtilsImpl: boolean itemValuesMatch(com.adobe.xmp.impl.XMPNode,com.adobe.xmp.impl.XMPNode)>(r43, r11);

        if $z7 == 0 goto label26;

        z20 = 1;

     label26:
        goto label25;

     label27:
        if z20 != 0 goto label28;

        $r9 = virtualinvoke r43.<com.adobe.xmp.impl.XMPNode: java.lang.Object clone()>();

        r39 = (com.adobe.xmp.impl.XMPNode) $r9;

        virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: void addChild(com.adobe.xmp.impl.XMPNode)>(r39);

     label28:
        goto label24;

     label29:
        return;
    }

    private static boolean itemValuesMatch(com.adobe.xmp.impl.XMPNode, com.adobe.xmp.impl.XMPNode) throws com.adobe.xmp.XMPException
    {
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, z14;
        com.adobe.xmp.options.PropertyOptions $r1, $r3, $r16, $r17, $r18;
        java.lang.AssertionError $r9;
        int $i0, $i1, $i2;
        java.lang.String $r12, $r14, $r15, $r20, $r22;
        java.util.Iterator $r4, $r6, $r10;
        com.adobe.xmp.impl.XMPNode r0, r2, r8, $r13, $r19, $r21, r23, r24;
        java.lang.Object $r5, $r7, $r11;

        r0 := @parameter0: com.adobe.xmp.impl.XMPNode;

        r2 := @parameter1: com.adobe.xmp.impl.XMPNode;

        $r1 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions getOptions()>();

        $r3 = virtualinvoke r2.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions getOptions()>();

        $z0 = virtualinvoke $r1.<com.adobe.xmp.options.PropertyOptions: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label01;

        return 0;

     label01:
        $i0 = virtualinvoke $r1.<com.adobe.xmp.options.PropertyOptions: int getOptions()>();

        if $i0 != 0 goto label04;

        $r14 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: java.lang.String getValue()>();

        $r15 = virtualinvoke r2.<com.adobe.xmp.impl.XMPNode: java.lang.String getValue()>();

        $z8 = virtualinvoke $r14.<java.lang.String: boolean equals(java.lang.Object)>($r15);

        if $z8 != 0 goto label02;

        return 0;

     label02:
        $r16 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions getOptions()>();

        $z9 = virtualinvoke $r16.<com.adobe.xmp.options.PropertyOptions: boolean getHasLanguage()>();

        $r17 = virtualinvoke r2.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions getOptions()>();

        $z10 = virtualinvoke $r17.<com.adobe.xmp.options.PropertyOptions: boolean getHasLanguage()>();

        if $z9 == $z10 goto label03;

        return 0;

     label03:
        $r18 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions getOptions()>();

        $z11 = virtualinvoke $r18.<com.adobe.xmp.options.PropertyOptions: boolean getHasLanguage()>();

        if $z11 == 0 goto label17;

        $r19 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.impl.XMPNode getQualifier(int)>(1);

        $r20 = virtualinvoke $r19.<com.adobe.xmp.impl.XMPNode: java.lang.String getValue()>();

        $r21 = virtualinvoke r2.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.impl.XMPNode getQualifier(int)>(1);

        $r22 = virtualinvoke $r21.<com.adobe.xmp.impl.XMPNode: java.lang.String getValue()>();

        $z12 = virtualinvoke $r20.<java.lang.String: boolean equals(java.lang.Object)>($r22);

        if $z12 != 0 goto label17;

        return 0;

     label04:
        $z1 = virtualinvoke $r1.<com.adobe.xmp.options.PropertyOptions: boolean isStruct()>();

        if $z1 == 0 goto label10;

        $i1 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: int getChildrenLength()>();

        $i2 = virtualinvoke r2.<com.adobe.xmp.impl.XMPNode: int getChildrenLength()>();

        if $i1 == $i2 goto label05;

        return 0;

     label05:
        $r10 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: java.util.Iterator iterateChildren()>();

     label06:
        $z6 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

        if $z6 == 0 goto label09;

        $r11 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        r23 = (com.adobe.xmp.impl.XMPNode) $r11;

        $r12 = virtualinvoke r23.<com.adobe.xmp.impl.XMPNode: java.lang.String getName()>();

        $r13 = staticinvoke <com.adobe.xmp.impl.XMPNodeUtils: com.adobe.xmp.impl.XMPNode findChildNode(com.adobe.xmp.impl.XMPNode,java.lang.String,boolean)>(r2, $r12, 0);

        if $r13 == null goto label07;

        $z7 = staticinvoke <com.adobe.xmp.impl.XMPUtilsImpl: boolean itemValuesMatch(com.adobe.xmp.impl.XMPNode,com.adobe.xmp.impl.XMPNode)>(r23, $r13);

        if $z7 != 0 goto label08;

     label07:
        return 0;

     label08:
        goto label06;

     label09:
        goto label17;

     label10:
        $z2 = <com.adobe.xmp.impl.XMPUtilsImpl: boolean $assertionsDisabled>;

        if $z2 != 0 goto label11;

        $z5 = virtualinvoke $r1.<com.adobe.xmp.options.PropertyOptions: boolean isArray()>();

        if $z5 != 0 goto label11;

        $r9 = new java.lang.AssertionError;

        specialinvoke $r9.<java.lang.AssertionError: void <init>()>();

        throw $r9;

     label11:
        $r4 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: java.util.Iterator iterateChildren()>();

     label12:
        $z13 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z13 == 0 goto label17;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r24 = (com.adobe.xmp.impl.XMPNode) $r5;

        z14 = 0;

        $r6 = virtualinvoke r2.<com.adobe.xmp.impl.XMPNode: java.util.Iterator iterateChildren()>();

     label13:
        $z3 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label15;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r8 = (com.adobe.xmp.impl.XMPNode) $r7;

        $z4 = staticinvoke <com.adobe.xmp.impl.XMPUtilsImpl: boolean itemValuesMatch(com.adobe.xmp.impl.XMPNode,com.adobe.xmp.impl.XMPNode)>(r24, r8);

        if $z4 == 0 goto label14;

        z14 = 1;

        goto label15;

     label14:
        goto label13;

     label15:
        if z14 != 0 goto label16;

        return 0;

     label16:
        goto label12;

     label17:
        return 1;
    }

    private static void checkSeparator(java.lang.String) throws com.adobe.xmp.XMPException
    {
        char $c1;
        com.adobe.xmp.XMPException $r1, $r2, $r3;
        int $i0, $i2, i3;
        java.lang.String r0;
        boolean z0, z1, z2;

        r0 := @parameter0: java.lang.String;

        z0 = 0;

        z2 = 0;

        z1 = 0;

        i3 = 0;

     label1:
        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if i3 >= $i0 goto label5;

        $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i3);

        $i2 = staticinvoke <com.adobe.xmp.impl.XMPUtilsImpl: int classifyCharacter(char)>($c1);

        if $i2 != 3 goto label3;

        if z2 == 0 goto label2;

        $r3 = new com.adobe.xmp.XMPException;

        specialinvoke $r3.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Separator can have only one semicolon", 4);

        throw $r3;

     label2:
        z0 = 1;

        z2 = 1;

        z1 = 1;

        goto label4;

     label3:
        if $i2 == 1 goto label4;

        $r2 = new com.adobe.xmp.XMPException;

        specialinvoke $r2.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Separator can have only spaces and one semicolon", 4);

        throw $r2;

     label4:
        i3 = i3 + 1;

        goto label1;

     label5:
        if z1 != 0 goto label6;

        $r1 = new com.adobe.xmp.XMPException;

        specialinvoke $r1.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Separator must have one semicolon", 4);

        throw $r1;

     label6:
        return;
    }

    private static char checkQuotes(java.lang.String, char) throws com.adobe.xmp.XMPException
    {
        char c0, $c3, $c5, c6;
        com.adobe.xmp.XMPException $r4, $r5, $r6;
        int $i1, $i2, $i4, $i7, $i8;
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        c0 := @parameter1: char;

        $i1 = staticinvoke <com.adobe.xmp.impl.XMPUtilsImpl: int classifyCharacter(char)>(c0);

        if $i1 == 4 goto label1;

        $r4 = new com.adobe.xmp.XMPException;

        specialinvoke $r4.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Invalid quoting character", 4);

        throw $r4;

     label1:
        $i2 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i2 != 1 goto label2;

        c6 = c0;

        goto label3;

     label2:
        $c3 = virtualinvoke r0.<java.lang.String: char charAt(int)>(1);

        c6 = $c3;

        $i4 = staticinvoke <com.adobe.xmp.impl.XMPUtilsImpl: int classifyCharacter(char)>($c3);

        if $i4 == 4 goto label3;

        $r5 = new com.adobe.xmp.XMPException;

        specialinvoke $r5.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Invalid quoting character", 4);

        throw $r5;

     label3:
        $c5 = staticinvoke <com.adobe.xmp.impl.XMPUtilsImpl: char getClosingQuote(char)>(c0);

        $i7 = (int) c6;

        $i8 = (int) $c5;

        if $i7 == $i8 goto label4;

        $r6 = new com.adobe.xmp.XMPException;

        specialinvoke $r6.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Mismatched quote pair", 4);

        throw $r6;

     label4:
        return c6;
    }

    private static int classifyCharacter(char)
    {
        int $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17;
        java.lang.String $r0, $r1, $r2, $r3, $r4;
        char c0;

        c0 := @parameter0: char;

        $r0 = " \u3000\u303f";

        $i6 = (int) c0;

        $i1 = virtualinvoke $r0.<java.lang.String: int indexOf(int)>($i6);

        if $i1 >= 0 goto label1;

        $i7 = (int) c0;

        if 8192 > $i7 goto label2;

        $i8 = (int) c0;

        if $i8 > 8203 goto label2;

     label1:
        return 1;

     label2:
        $r1 = ",\uff0c\uff64\ufe50\ufe51\u3001\u060c\u055d";

        $i9 = (int) c0;

        $i2 = virtualinvoke $r1.<java.lang.String: int indexOf(int)>($i9);

        if $i2 < 0 goto label3;

        return 2;

     label3:
        $r2 = ";\uff1b\ufe54\u061b\u037e";

        $i10 = (int) c0;

        $i3 = virtualinvoke $r2.<java.lang.String: int indexOf(int)>($i10);

        if $i3 < 0 goto label4;

        return 3;

     label4:
        $r3 = "\"\u00ab\u00bb\u301d\u301e\u301f\u2015\u2039\u203a";

        $i11 = (int) c0;

        $i4 = virtualinvoke $r3.<java.lang.String: int indexOf(int)>($i11);

        if $i4 >= 0 goto label6;

        $i12 = (int) c0;

        if 12296 > $i12 goto label5;

        $i13 = (int) c0;

        if $i13 <= 12303 goto label6;

     label5:
        $i14 = (int) c0;

        if 8216 > $i14 goto label7;

        $i15 = (int) c0;

        if $i15 > 8223 goto label7;

     label6:
        return 4;

     label7:
        $i16 = (int) c0;

        if $i16 < 32 goto label8;

        $r4 = "\u2028\u2029";

        $i17 = (int) c0;

        $i5 = virtualinvoke $r4.<java.lang.String: int indexOf(int)>($i17);

        if $i5 < 0 goto label9;

     label8:
        return 5;

     label9:
        return 0;
    }

    private static char getClosingQuote(char)
    {
        int $i1;
        char c0;

        c0 := @parameter0: char;

        $i1 = (int) c0;

        lookupswitch($i1)
        {
            case 34: goto label01;
            case 171: goto label02;
            case 187: goto label03;
            case 8213: goto label04;
            case 8216: goto label05;
            case 8218: goto label06;
            case 8220: goto label07;
            case 8222: goto label08;
            case 8249: goto label09;
            case 8250: goto label10;
            case 12296: goto label11;
            case 12298: goto label12;
            case 12300: goto label13;
            case 12302: goto label14;
            case 12317: goto label15;
            default: goto label16;
        };

     label01:
        return 34;

     label02:
        return 187;

     label03:
        return 171;

     label04:
        return 8213;

     label05:
        return 8217;

     label06:
        return 8219;

     label07:
        return 8221;

     label08:
        return 8223;

     label09:
        return 8250;

     label10:
        return 8249;

     label11:
        return 12297;

     label12:
        return 12299;

     label13:
        return 12301;

     label14:
        return 12303;

     label15:
        return 12319;

     label16:
        return 0;
    }

    private static java.lang.String applyQuotes(java.lang.String, char, char, boolean)
    {
        java.lang.StringBuffer $r0, $r1;
        int $i0, $i1, $i6, $i10, $i12, i13, $i14, $i15, i16, i17, $i18;
        java.lang.String $r2, r3;
        boolean $z0, z1, z2;
        char c2, c3, $c4, $c5, $c7, $c8, $c9, $c11;

        r3 := @parameter0: java.lang.String;

        c2 := @parameter1: char;

        c3 := @parameter2: char;

        z1 := @parameter3: boolean;

        if r3 != null goto label01;

        r3 = "";

     label01:
        z2 = 0;

        i13 = 0;

     label02:
        $i14 = virtualinvoke r3.<java.lang.String: int length()>();

        if i13 >= $i14 goto label07;

        $c11 = virtualinvoke r3.<java.lang.String: char charAt(int)>(i13);

        $i12 = staticinvoke <com.adobe.xmp.impl.XMPUtilsImpl: int classifyCharacter(char)>($c11);

        if i13 != 0 goto label03;

        if $i12 != 4 goto label03;

        goto label07;

     label03:
        if $i12 != 1 goto label05;

        if z2 == 0 goto label04;

        goto label07;

     label04:
        z2 = 1;

        goto label06;

     label05:
        z2 = 0;

        if $i12 == 3 goto label07;

        if $i12 == 5 goto label07;

        if $i12 != 2 goto label06;

        if z1 != 0 goto label06;

        goto label07;

     label06:
        i13 = i13 + 1;

        goto label02;

     label07:
        $i15 = virtualinvoke r3.<java.lang.String: int length()>();

        if i13 >= $i15 goto label14;

        $r0 = new java.lang.StringBuffer;

        $i0 = virtualinvoke r3.<java.lang.String: int length()>();

        $i1 = $i0 + 2;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>(int)>($i1);

        i16 = 0;

     label08:
        if i16 > i13 goto label10;

        $c9 = virtualinvoke r3.<java.lang.String: char charAt(int)>(i13);

        $i10 = staticinvoke <com.adobe.xmp.impl.XMPUtilsImpl: int classifyCharacter(char)>($c9);

        if $i10 != 4 goto label09;

        goto label10;

     label09:
        i16 = i16 + 1;

        goto label08;

     label10:
        $r1 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c2);

        $r2 = virtualinvoke r3.<java.lang.String: java.lang.String substring(int,int)>(0, i16);

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        i17 = i16;

     label11:
        $i18 = virtualinvoke r3.<java.lang.String: int length()>();

        if i17 >= $i18 goto label13;

        $c4 = virtualinvoke r3.<java.lang.String: char charAt(int)>(i17);

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c4);

        $c5 = virtualinvoke r3.<java.lang.String: char charAt(int)>(i17);

        $i6 = staticinvoke <com.adobe.xmp.impl.XMPUtilsImpl: int classifyCharacter(char)>($c5);

        if $i6 != 4 goto label12;

        $c7 = virtualinvoke r3.<java.lang.String: char charAt(int)>(i17);

        $z0 = staticinvoke <com.adobe.xmp.impl.XMPUtilsImpl: boolean isSurroundingQuote(char,char,char)>($c7, c2, c3);

        if $z0 == 0 goto label12;

        $c8 = virtualinvoke r3.<java.lang.String: char charAt(int)>(i17);

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c8);

     label12:
        i17 = i17 + 1;

        goto label11;

     label13:
        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c3);

        r3 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

     label14:
        return r3;
    }

    private static boolean isSurroundingQuote(char, char, char)
    {
        int $i3, $i4;
        char c0, c1, c2;
        boolean $z0, $z1;

        c0 := @parameter0: char;

        c1 := @parameter1: char;

        c2 := @parameter2: char;

        $i3 = (int) c0;

        $i4 = (int) c1;

        if $i3 == $i4 goto label1;

        $z0 = staticinvoke <com.adobe.xmp.impl.XMPUtilsImpl: boolean isClosingingQuote(char,char,char)>(c0, c1, c2);

        if $z0 == 0 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    private static boolean isClosingingQuote(char, char, char)
    {
        char c0, c1, c2;
        int $i3, $i4, $i5, $i6, $i7;
        boolean $z0;

        c0 := @parameter0: char;

        c2 := @parameter1: char;

        c1 := @parameter2: char;

        $i3 = (int) c0;

        $i4 = (int) c1;

        if $i3 == $i4 goto label2;

        $i5 = (int) c2;

        if $i5 != 12317 goto label1;

        $i6 = (int) c0;

        if $i6 == 12318 goto label2;

     label1:
        $i7 = (int) c0;

        if $i7 != 12319 goto label3;

     label2:
        $z0 = 1;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        return $z0;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        <com.adobe.xmp.impl.XMPUtilsImpl: java.lang.String CONTROLS> = "\u2028\u2029";

        <com.adobe.xmp.impl.XMPUtilsImpl: java.lang.String QUOTES> = "\"\u00ab\u00bb\u301d\u301e\u301f\u2015\u2039\u203a";

        <com.adobe.xmp.impl.XMPUtilsImpl: java.lang.String SEMICOLA> = ";\uff1b\ufe54\u061b\u037e";

        <com.adobe.xmp.impl.XMPUtilsImpl: java.lang.String COMMAS> = ",\uff0c\uff64\ufe50\ufe51\u3001\u060c\u055d";

        <com.adobe.xmp.impl.XMPUtilsImpl: java.lang.String SPACES> = " \u3000\u303f";

        <com.adobe.xmp.impl.XMPUtilsImpl: int UCK_CONTROL> = 5;

        <com.adobe.xmp.impl.XMPUtilsImpl: int UCK_QUOTE> = 4;

        <com.adobe.xmp.impl.XMPUtilsImpl: int UCK_SEMICOLON> = 3;

        <com.adobe.xmp.impl.XMPUtilsImpl: int UCK_COMMA> = 2;

        <com.adobe.xmp.impl.XMPUtilsImpl: int UCK_SPACE> = 1;

        <com.adobe.xmp.impl.XMPUtilsImpl: int UCK_NORMAL> = 0;

        $r0 = class "Lcom/adobe/xmp/impl/XMPUtilsImpl;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <com.adobe.xmp.impl.XMPUtilsImpl: boolean $assertionsDisabled> = $z1;

        return;
    }
}
