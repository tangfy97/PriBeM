public abstract class org.apache.batik.ext.awt.image.renderable.AbstractRable extends java.lang.Object implements org.apache.batik.ext.awt.image.renderable.Filter
{
    protected java.util.Vector srcs;
    protected java.util.Map props;
    protected long stamp;

    protected void <init>()
    {
        java.util.HashMap $r1;
        java.util.Vector $r2;
        org.apache.batik.ext.awt.image.renderable.AbstractRable r0;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.AbstractRable;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<org.apache.batik.ext.awt.image.renderable.AbstractRable: java.util.Map props> = $r1;

        r0.<org.apache.batik.ext.awt.image.renderable.AbstractRable: long stamp> = 0L;

        $r2 = new java.util.Vector;

        specialinvoke $r2.<java.util.Vector: void <init>()>();

        r0.<org.apache.batik.ext.awt.image.renderable.AbstractRable: java.util.Vector srcs> = $r2;

        return;
    }

    protected void <init>(org.apache.batik.ext.awt.image.renderable.Filter)
    {
        java.util.HashMap $r1;
        org.apache.batik.ext.awt.image.renderable.AbstractRable r0;
        org.apache.batik.ext.awt.image.renderable.Filter r2;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.AbstractRable;

        r2 := @parameter0: org.apache.batik.ext.awt.image.renderable.Filter;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<org.apache.batik.ext.awt.image.renderable.AbstractRable: java.util.Map props> = $r1;

        r0.<org.apache.batik.ext.awt.image.renderable.AbstractRable: long stamp> = 0L;

        virtualinvoke r0.<org.apache.batik.ext.awt.image.renderable.AbstractRable: void init(org.apache.batik.ext.awt.image.renderable.Filter,java.util.Map)>(r2, null);

        return;
    }

    protected void <init>(org.apache.batik.ext.awt.image.renderable.Filter, java.util.Map)
    {
        java.util.Map r3;
        java.util.HashMap $r1;
        org.apache.batik.ext.awt.image.renderable.AbstractRable r0;
        org.apache.batik.ext.awt.image.renderable.Filter r2;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.AbstractRable;

        r2 := @parameter0: org.apache.batik.ext.awt.image.renderable.Filter;

        r3 := @parameter1: java.util.Map;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<org.apache.batik.ext.awt.image.renderable.AbstractRable: java.util.Map props> = $r1;

        r0.<org.apache.batik.ext.awt.image.renderable.AbstractRable: long stamp> = 0L;

        virtualinvoke r0.<org.apache.batik.ext.awt.image.renderable.AbstractRable: void init(org.apache.batik.ext.awt.image.renderable.Filter,java.util.Map)>(r2, r3);

        return;
    }

    protected void <init>(java.util.List)
    {
        java.util.List r1;
        org.apache.batik.ext.awt.image.renderable.AbstractRable r0;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.AbstractRable;

        r1 := @parameter0: java.util.List;

        specialinvoke r0.<org.apache.batik.ext.awt.image.renderable.AbstractRable: void <init>(java.util.List,java.util.Map)>(r1, null);

        return;
    }

    protected void <init>(java.util.List, java.util.Map)
    {
        java.util.List r2;
        java.util.Map r3;
        java.util.HashMap $r1;
        org.apache.batik.ext.awt.image.renderable.AbstractRable r0;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.AbstractRable;

        r2 := @parameter0: java.util.List;

        r3 := @parameter1: java.util.Map;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<org.apache.batik.ext.awt.image.renderable.AbstractRable: java.util.Map props> = $r1;

        r0.<org.apache.batik.ext.awt.image.renderable.AbstractRable: long stamp> = 0L;

        virtualinvoke r0.<org.apache.batik.ext.awt.image.renderable.AbstractRable: void init(java.util.List,java.util.Map)>(r2, r3);

        return;
    }

    public final void touch()
    {
        long $l0, $l1;
        org.apache.batik.ext.awt.image.renderable.AbstractRable r0;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.AbstractRable;

        $l0 = r0.<org.apache.batik.ext.awt.image.renderable.AbstractRable: long stamp>;

        $l1 = $l0 + 1L;

        r0.<org.apache.batik.ext.awt.image.renderable.AbstractRable: long stamp> = $l1;

        return;
    }

    public long getTimeStamp()
    {
        long $l0;
        org.apache.batik.ext.awt.image.renderable.AbstractRable r0;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.AbstractRable;

        $l0 = r0.<org.apache.batik.ext.awt.image.renderable.AbstractRable: long stamp>;

        return $l0;
    }

    protected void init(org.apache.batik.ext.awt.image.renderable.Filter)
    {
        java.util.Vector $r1, $r3;
        org.apache.batik.ext.awt.image.renderable.AbstractRable r0;
        org.apache.batik.ext.awt.image.renderable.Filter r2;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.AbstractRable;

        r2 := @parameter0: org.apache.batik.ext.awt.image.renderable.Filter;

        virtualinvoke r0.<org.apache.batik.ext.awt.image.renderable.AbstractRable: void touch()>();

        $r1 = new java.util.Vector;

        specialinvoke $r1.<java.util.Vector: void <init>(int)>(1);

        r0.<org.apache.batik.ext.awt.image.renderable.AbstractRable: java.util.Vector srcs> = $r1;

        if r2 == null goto label1;

        $r3 = r0.<org.apache.batik.ext.awt.image.renderable.AbstractRable: java.util.Vector srcs>;

        virtualinvoke $r3.<java.util.Vector: boolean add(java.lang.Object)>(r2);

     label1:
        return;
    }

    protected void init(org.apache.batik.ext.awt.image.renderable.Filter, java.util.Map)
    {
        java.util.Map r2, $r3;
        org.apache.batik.ext.awt.image.renderable.AbstractRable r0;
        org.apache.batik.ext.awt.image.renderable.Filter r1;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.AbstractRable;

        r1 := @parameter0: org.apache.batik.ext.awt.image.renderable.Filter;

        r2 := @parameter1: java.util.Map;

        virtualinvoke r0.<org.apache.batik.ext.awt.image.renderable.AbstractRable: void init(org.apache.batik.ext.awt.image.renderable.Filter)>(r1);

        if r2 == null goto label1;

        $r3 = r0.<org.apache.batik.ext.awt.image.renderable.AbstractRable: java.util.Map props>;

        interfaceinvoke $r3.<java.util.Map: void putAll(java.util.Map)>(r2);

     label1:
        return;
    }

    protected void init(java.util.List)
    {
        java.util.List r2;
        java.util.Vector $r1;
        org.apache.batik.ext.awt.image.renderable.AbstractRable r0;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.AbstractRable;

        r2 := @parameter0: java.util.List;

        virtualinvoke r0.<org.apache.batik.ext.awt.image.renderable.AbstractRable: void touch()>();

        $r1 = new java.util.Vector;

        specialinvoke $r1.<java.util.Vector: void <init>(java.util.Collection)>(r2);

        r0.<org.apache.batik.ext.awt.image.renderable.AbstractRable: java.util.Vector srcs> = $r1;

        return;
    }

    protected void init(java.util.List, java.util.Map)
    {
        java.util.List r1;
        java.util.Map r2, $r3;
        org.apache.batik.ext.awt.image.renderable.AbstractRable r0;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.AbstractRable;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: java.util.Map;

        virtualinvoke r0.<org.apache.batik.ext.awt.image.renderable.AbstractRable: void init(java.util.List)>(r1);

        if r2 == null goto label1;

        $r3 = r0.<org.apache.batik.ext.awt.image.renderable.AbstractRable: java.util.Map props>;

        interfaceinvoke $r3.<java.util.Map: void putAll(java.util.Map)>(r2);

     label1:
        return;
    }

    public java.awt.geom.Rectangle2D getBounds2D()
    {
        java.util.Iterator $r3;
        java.awt.geom.Rectangle2D $r5, $r8, r9;
        org.apache.batik.ext.awt.image.renderable.AbstractRable r0;
        org.apache.batik.ext.awt.image.renderable.Filter r10, r11;
        java.util.Vector $r1, $r2;
        int $i0;
        java.lang.Object $r4, $r6, $r7;
        boolean $z0;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.AbstractRable;

        r9 = null;

        $r1 = r0.<org.apache.batik.ext.awt.image.renderable.AbstractRable: java.util.Vector srcs>;

        $i0 = virtualinvoke $r1.<java.util.Vector: int size()>();

        if $i0 == 0 goto label3;

        $r2 = r0.<org.apache.batik.ext.awt.image.renderable.AbstractRable: java.util.Vector srcs>;

        $r3 = virtualinvoke $r2.<java.util.AbstractList: java.util.Iterator iterator()>();

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r10 = (org.apache.batik.ext.awt.image.renderable.Filter) $r4;

        $r5 = interfaceinvoke r10.<org.apache.batik.ext.awt.image.renderable.Filter: java.awt.geom.Rectangle2D getBounds2D()>();

        $r6 = virtualinvoke $r5.<java.awt.geom.RectangularShape: java.lang.Object clone()>();

        r9 = (java.awt.geom.Rectangle2D) $r6;

        goto label2;

     label1:
        $r7 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r11 = (org.apache.batik.ext.awt.image.renderable.Filter) $r7;

        $r8 = interfaceinvoke r11.<org.apache.batik.ext.awt.image.renderable.Filter: java.awt.geom.Rectangle2D getBounds2D()>();

        staticinvoke <java.awt.geom.Rectangle2D: void union(java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D)>(r9, $r8, r9);

     label2:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

     label3:
        return r9;
    }

    public java.util.Vector getSources()
    {
        java.util.Vector $r1;
        org.apache.batik.ext.awt.image.renderable.AbstractRable r0;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.AbstractRable;

        $r1 = r0.<org.apache.batik.ext.awt.image.renderable.AbstractRable: java.util.Vector srcs>;

        return $r1;
    }

    public java.awt.image.RenderedImage createDefaultRendering()
    {
        org.apache.batik.ext.awt.image.renderable.AbstractRable r0;
        java.awt.image.RenderedImage $r1;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.AbstractRable;

        $r1 = virtualinvoke r0.<org.apache.batik.ext.awt.image.renderable.AbstractRable: java.awt.image.RenderedImage createScaledRendering(int,int,java.awt.RenderingHints)>(100, 100, null);

        return $r1;
    }

    public java.awt.image.RenderedImage createScaledRendering(int, int, java.awt.RenderingHints)
    {
        java.awt.RenderingHints r3;
        org.apache.batik.ext.awt.image.renderable.AbstractRable r0;
        java.awt.image.RenderedImage $r4;
        java.awt.geom.AffineTransform $r1;
        java.awt.image.renderable.RenderContext $r2;
        org.apache.batik.ext.awt.image.rendered.CachableRed $r5;
        float $f0, $f1, f2, $f3, $f4, f5, $f6, $f7, $f8, $f9, f10, $f11, $f12, $f13, f14, $f15, $f16;
        java.awt.Rectangle $r7;
        org.apache.batik.ext.awt.image.rendered.PadRed $r6;
        org.apache.batik.ext.awt.image.PadMode $r8;
        int i0, i1, $i2, $i3;
        double $d0, $d1;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.AbstractRable;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r3 := @parameter2: java.awt.RenderingHints;

        $f0 = (float) i0;

        $f1 = virtualinvoke r0.<org.apache.batik.ext.awt.image.renderable.AbstractRable: float getWidth()>();

        f2 = $f0 / $f1;

        $f3 = (float) i1;

        $f4 = virtualinvoke r0.<org.apache.batik.ext.awt.image.renderable.AbstractRable: float getHeight()>();

        f5 = $f3 / $f4;

        $f6 = staticinvoke <java.lang.Math: float min(float,float)>(f2, f5);

        $d1 = (double) $f6;

        $d0 = (double) $f6;

        $r1 = staticinvoke <java.awt.geom.AffineTransform: java.awt.geom.AffineTransform getScaleInstance(double,double)>($d1, $d0);

        $r2 = new java.awt.image.renderable.RenderContext;

        specialinvoke $r2.<java.awt.image.renderable.RenderContext: void <init>(java.awt.geom.AffineTransform,java.awt.RenderingHints)>($r1, r3);

        $f7 = virtualinvoke r0.<org.apache.batik.ext.awt.image.renderable.AbstractRable: float getWidth()>();

        $f9 = $f7 * $f6;

        $f8 = (float) i0;

        f10 = $f9 - $f8;

        $f11 = virtualinvoke r0.<org.apache.batik.ext.awt.image.renderable.AbstractRable: float getHeight()>();

        $f13 = $f11 * $f6;

        $f12 = (float) i1;

        f14 = $f13 - $f12;

        $r4 = virtualinvoke r0.<org.apache.batik.ext.awt.image.renderable.AbstractRable: java.awt.image.RenderedImage createRendering(java.awt.image.renderable.RenderContext)>($r2);

        $r5 = staticinvoke <org.apache.batik.ext.awt.image.rendered.RenderedImageCachableRed: org.apache.batik.ext.awt.image.rendered.CachableRed wrap(java.awt.image.RenderedImage)>($r4);

        $r6 = new org.apache.batik.ext.awt.image.rendered.PadRed;

        $r7 = new java.awt.Rectangle;

        $f15 = f10 / 2.0F;

        $i3 = (int) $f15;

        $f16 = f14 / 2.0F;

        $i2 = (int) $f16;

        specialinvoke $r7.<java.awt.Rectangle: void <init>(int,int,int,int)>($i3, $i2, i0, i1);

        $r8 = <org.apache.batik.ext.awt.image.PadMode: org.apache.batik.ext.awt.image.PadMode ZERO_PAD>;

        specialinvoke $r6.<org.apache.batik.ext.awt.image.rendered.PadRed: void <init>(org.apache.batik.ext.awt.image.rendered.CachableRed,java.awt.Rectangle,org.apache.batik.ext.awt.image.PadMode,java.awt.RenderingHints)>($r5, $r7, $r8, null);

        return $r6;
    }

    public float getMinX()
    {
        java.awt.geom.Rectangle2D $r1;
        float $f0;
        org.apache.batik.ext.awt.image.renderable.AbstractRable r0;
        double $d0;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.AbstractRable;

        $r1 = virtualinvoke r0.<org.apache.batik.ext.awt.image.renderable.AbstractRable: java.awt.geom.Rectangle2D getBounds2D()>();

        $d0 = virtualinvoke $r1.<java.awt.geom.RectangularShape: double getX()>();

        $f0 = (float) $d0;

        return $f0;
    }

    public float getMinY()
    {
        java.awt.geom.Rectangle2D $r1;
        float $f0;
        org.apache.batik.ext.awt.image.renderable.AbstractRable r0;
        double $d0;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.AbstractRable;

        $r1 = virtualinvoke r0.<org.apache.batik.ext.awt.image.renderable.AbstractRable: java.awt.geom.Rectangle2D getBounds2D()>();

        $d0 = virtualinvoke $r1.<java.awt.geom.RectangularShape: double getY()>();

        $f0 = (float) $d0;

        return $f0;
    }

    public float getWidth()
    {
        java.awt.geom.Rectangle2D $r1;
        float $f0;
        org.apache.batik.ext.awt.image.renderable.AbstractRable r0;
        double $d0;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.AbstractRable;

        $r1 = virtualinvoke r0.<org.apache.batik.ext.awt.image.renderable.AbstractRable: java.awt.geom.Rectangle2D getBounds2D()>();

        $d0 = virtualinvoke $r1.<java.awt.geom.RectangularShape: double getWidth()>();

        $f0 = (float) $d0;

        return $f0;
    }

    public float getHeight()
    {
        java.awt.geom.Rectangle2D $r1;
        float $f0;
        org.apache.batik.ext.awt.image.renderable.AbstractRable r0;
        double $d0;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.AbstractRable;

        $r1 = virtualinvoke r0.<org.apache.batik.ext.awt.image.renderable.AbstractRable: java.awt.geom.Rectangle2D getBounds2D()>();

        $d0 = virtualinvoke $r1.<java.awt.geom.RectangularShape: double getHeight()>();

        $f0 = (float) $d0;

        return $f0;
    }

    public java.lang.Object getProperty(java.lang.String)
    {
        java.util.Iterator $r5;
        org.apache.batik.ext.awt.image.renderable.AbstractRable r0;
        java.util.Vector $r4;
        java.util.Map $r2;
        java.lang.Object $r3, $r6, $r8;
        java.lang.String r1;
        java.awt.image.renderable.RenderableImage r7;
        boolean $z0;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.AbstractRable;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.apache.batik.ext.awt.image.renderable.AbstractRable: java.util.Map props>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        if $r3 == null goto label1;

        return $r3;

     label1:
        $r4 = r0.<org.apache.batik.ext.awt.image.renderable.AbstractRable: java.util.Vector srcs>;

        $r5 = virtualinvoke $r4.<java.util.AbstractList: java.util.Iterator iterator()>();

        goto label3;

     label2:
        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (java.awt.image.renderable.RenderableImage) $r6;

        $r8 = interfaceinvoke r7.<java.awt.image.renderable.RenderableImage: java.lang.Object getProperty(java.lang.String)>(r1);

        if $r8 == null goto label3;

        return $r8;

     label3:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label2;

        return null;
    }

    public java.lang.String[] getPropertyNames()
    {
        java.lang.String[] $r10, r11, r12;
        org.apache.batik.ext.awt.image.renderable.AbstractRable r0;
        java.util.Vector $r6;
        java.util.Map $r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i9;
        java.lang.String $r5;
        java.awt.image.renderable.RenderableImage r9;
        boolean $z0, $z1;
        java.util.Iterator $r3, $r7;
        java.util.Set $r2;
        java.lang.Object $r4, $r8;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.AbstractRable;

        $r1 = r0.<org.apache.batik.ext.awt.image.renderable.AbstractRable: java.util.Map props>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

        $i0 = interfaceinvoke $r2.<java.util.Set: int size()>();

        r12 = newarray (java.lang.String)[$i0];

        i9 = 0;

        goto label2;

     label1:
        $i1 = i9;

        i9 = i9 + 1;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (java.lang.String) $r4;

        r12[$i1] = $r5;

     label2:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        $r6 = r0.<org.apache.batik.ext.awt.image.renderable.AbstractRable: java.util.Vector srcs>;

        $r7 = virtualinvoke $r6.<java.util.AbstractList: java.util.Iterator iterator()>();

        goto label4;

     label3:
        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r9 = (java.awt.image.renderable.RenderableImage) $r8;

        $r10 = interfaceinvoke r9.<java.awt.image.renderable.RenderableImage: java.lang.String[] getPropertyNames()>();

        $i2 = lengthof $r10;

        if $i2 == 0 goto label4;

        $i4 = lengthof r12;

        $i3 = lengthof $r10;

        $i5 = $i4 + $i3;

        r11 = newarray (java.lang.String)[$i5];

        $i6 = lengthof r12;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r12, 0, r11, 0, $i6);

        $i8 = lengthof r12;

        $i7 = lengthof $r10;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r11, $i8, $r10, 0, $i7);

        r12 = r11;

     label4:
        $z1 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label3;

        return r12;
    }

    public boolean isDynamic()
    {
        org.apache.batik.ext.awt.image.renderable.AbstractRable r0;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.AbstractRable;

        return 0;
    }

    public java.awt.Shape getDependencyRegion(int, java.awt.geom.Rectangle2D)
    {
        java.lang.IndexOutOfBoundsException $r0;
        java.awt.geom.Rectangle2D r3, r5, $r6;
        org.apache.batik.ext.awt.image.renderable.AbstractRable r1;
        java.awt.geom.Rectangle2D$Float $r7;
        java.util.Vector $r2;
        int i0, $i1;
        java.lang.Object $r4;
        boolean $z0;

        r1 := @this: org.apache.batik.ext.awt.image.renderable.AbstractRable;

        i0 := @parameter0: int;

        r3 := @parameter1: java.awt.geom.Rectangle2D;

        if i0 < 0 goto label1;

        $r2 = r1.<org.apache.batik.ext.awt.image.renderable.AbstractRable: java.util.Vector srcs>;

        $i1 = virtualinvoke $r2.<java.util.Vector: int size()>();

        if i0 <= $i1 goto label2;

     label1:
        $r0 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r0.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>("Nonexistant source requested.");

        throw $r0;

     label2:
        $r4 = virtualinvoke r3.<java.awt.geom.RectangularShape: java.lang.Object clone()>();

        r5 = (java.awt.geom.Rectangle2D) $r4;

        $r6 = virtualinvoke r1.<org.apache.batik.ext.awt.image.renderable.AbstractRable: java.awt.geom.Rectangle2D getBounds2D()>();

        $z0 = virtualinvoke $r6.<java.awt.geom.RectangularShape: boolean intersects(java.awt.geom.Rectangle2D)>(r5);

        if $z0 != 0 goto label3;

        $r7 = new java.awt.geom.Rectangle2D$Float;

        specialinvoke $r7.<java.awt.geom.Rectangle2D$Float: void <init>()>();

        return $r7;

     label3:
        staticinvoke <java.awt.geom.Rectangle2D: void intersect(java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D)>(r5, $r6, r5);

        return r5;
    }

    public java.awt.Shape getDirtyRegion(int, java.awt.geom.Rectangle2D)
    {
        java.lang.IndexOutOfBoundsException $r0;
        java.awt.geom.Rectangle2D r3, r5, $r6;
        org.apache.batik.ext.awt.image.renderable.AbstractRable r1;
        java.awt.geom.Rectangle2D$Float $r7;
        java.util.Vector $r2;
        int i0, $i1;
        java.lang.Object $r4;
        boolean $z0;

        r1 := @this: org.apache.batik.ext.awt.image.renderable.AbstractRable;

        i0 := @parameter0: int;

        r3 := @parameter1: java.awt.geom.Rectangle2D;

        if i0 < 0 goto label1;

        $r2 = r1.<org.apache.batik.ext.awt.image.renderable.AbstractRable: java.util.Vector srcs>;

        $i1 = virtualinvoke $r2.<java.util.Vector: int size()>();

        if i0 <= $i1 goto label2;

     label1:
        $r0 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r0.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>("Nonexistant source requested.");

        throw $r0;

     label2:
        $r4 = virtualinvoke r3.<java.awt.geom.RectangularShape: java.lang.Object clone()>();

        r5 = (java.awt.geom.Rectangle2D) $r4;

        $r6 = virtualinvoke r1.<org.apache.batik.ext.awt.image.renderable.AbstractRable: java.awt.geom.Rectangle2D getBounds2D()>();

        $z0 = virtualinvoke $r6.<java.awt.geom.RectangularShape: boolean intersects(java.awt.geom.Rectangle2D)>(r5);

        if $z0 != 0 goto label3;

        $r7 = new java.awt.geom.Rectangle2D$Float;

        specialinvoke $r7.<java.awt.geom.Rectangle2D$Float: void <init>()>();

        return $r7;

     label3:
        staticinvoke <java.awt.geom.Rectangle2D: void intersect(java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D)>(r5, $r6, r5);

        return r5;
    }

    public abstract java.awt.image.RenderedImage createRendering(java.awt.image.renderable.RenderContext);
}
