public class com.hp.hpl.jena.util.FileUtils extends java.lang.Object
{
    public static final java.lang.String langXML;
    public static final java.lang.String langXMLAbbrev;
    public static final java.lang.String langNTriple;
    public static final java.lang.String langN3;
    public static final java.lang.String langTurtle;
    public static final java.lang.String encodingUTF8;
    static java.nio.charset.Charset utf8;
    private static int counter;

    public void <init>()
    {
        com.hp.hpl.jena.util.FileUtils r0;

        r0 := @this: com.hp.hpl.jena.util.FileUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.io.Reader asUTF8(java.io.InputStream)
    {
        java.nio.charset.Charset $r2;
        java.nio.charset.CharsetDecoder $r3;
        java.io.InputStreamReader $r0, $r4;
        boolean $z0;
        java.io.InputStream r1;

        r1 := @parameter0: java.io.InputStream;

        $z0 = staticinvoke <com.hp.hpl.jena.JenaRuntime: boolean runUnder(java.lang.String)>("http://jena.hpl.hp.com/2004/07/feature/noCharset");

        if $z0 == 0 goto label1;

        $r4 = new java.io.InputStreamReader;

        specialinvoke $r4.<java.io.InputStreamReader: void <init>(java.io.InputStream)>(r1);

        return $r4;

     label1:
        $r0 = new java.io.InputStreamReader;

        $r2 = <com.hp.hpl.jena.util.FileUtils: java.nio.charset.Charset utf8>;

        $r3 = virtualinvoke $r2.<java.nio.charset.Charset: java.nio.charset.CharsetDecoder newDecoder()>();

        specialinvoke $r0.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.nio.charset.CharsetDecoder)>(r1, $r3);

        return $r0;
    }

    public static java.io.BufferedReader asBufferedUTF8(java.io.InputStream)
    {
        java.io.BufferedReader $r0;
        java.io.Reader $r2;
        java.io.InputStream r1;

        r1 := @parameter0: java.io.InputStream;

        $r0 = new java.io.BufferedReader;

        $r2 = staticinvoke <com.hp.hpl.jena.util.FileUtils: java.io.Reader asUTF8(java.io.InputStream)>(r1);

        specialinvoke $r0.<java.io.BufferedReader: void <init>(java.io.Reader)>($r2);

        return $r0;
    }

    public static java.io.Writer asUTF8(java.io.OutputStream)
    {
        java.io.OutputStream r1;
        java.nio.charset.Charset $r2;
        java.nio.charset.CharsetEncoder $r3;
        java.io.OutputStreamWriter $r0, $r4;
        boolean $z0;

        r1 := @parameter0: java.io.OutputStream;

        $z0 = staticinvoke <com.hp.hpl.jena.JenaRuntime: boolean runUnder(java.lang.String)>("http://jena.hpl.hp.com/2004/07/feature/noCharset");

        if $z0 == 0 goto label1;

        $r4 = new java.io.OutputStreamWriter;

        specialinvoke $r4.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream)>(r1);

        return $r4;

     label1:
        $r0 = new java.io.OutputStreamWriter;

        $r2 = <com.hp.hpl.jena.util.FileUtils: java.nio.charset.Charset utf8>;

        $r3 = virtualinvoke $r2.<java.nio.charset.Charset: java.nio.charset.CharsetEncoder newEncoder()>();

        specialinvoke $r0.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.nio.charset.CharsetEncoder)>(r1, $r3);

        return $r0;
    }

    public static java.io.PrintWriter asPrintWriterUTF8(java.io.OutputStream)
    {
        java.io.PrintWriter $r0;
        java.io.OutputStream r1;
        java.io.Writer $r2;

        r1 := @parameter0: java.io.OutputStream;

        $r0 = new java.io.PrintWriter;

        $r2 = staticinvoke <com.hp.hpl.jena.util.FileUtils: java.io.Writer asUTF8(java.io.OutputStream)>(r1);

        specialinvoke $r0.<java.io.PrintWriter: void <init>(java.io.Writer)>($r2);

        return $r0;
    }

    public static java.lang.String guessLang(java.lang.String, java.lang.String)
    {
        java.lang.String r0, $r1, r2;
        boolean $z0, $z1, $z2, $z3, $z4;

        r0 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r1 = staticinvoke <com.hp.hpl.jena.util.FileUtils: java.lang.String getFilenameExt(java.lang.String)>(r0);

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("n3");

        if $z0 == 0 goto label1;

        return "N3";

     label1:
        $z1 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("nt");

        if $z1 == 0 goto label2;

        return "N-TRIPLE";

     label2:
        $z2 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("ttl");

        if $z2 == 0 goto label3;

        return "TURTLE";

     label3:
        $z3 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("rdf");

        if $z3 == 0 goto label4;

        return "RDF/XML";

     label4:
        $z4 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("owl");

        if $z4 == 0 goto label5;

        return "RDF/XML";

     label5:
        return r2;
    }

    public static java.lang.String guessLang(java.lang.String)
    {
        java.lang.String r0, $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <com.hp.hpl.jena.util.FileUtils: java.lang.String guessLang(java.lang.String,java.lang.String)>(r0, "RDF/XML");

        return $r1;
    }

    public static java.lang.String toFilename(java.lang.String)
    {
        int $i0, $i1, $i2;
        java.lang.String r0, $r1, $r2, $r3, r4, $r5;
        boolean $z0, $z1, $z2, $z3;

        r0 := @parameter0: java.lang.String;

        $z0 = staticinvoke <com.hp.hpl.jena.util.FileUtils: boolean isFile(java.lang.String)>(r0);

        if $z0 != 0 goto label1;

        return null;

     label1:
        $z1 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("file:");

        if $z1 != 0 goto label2;

        return r0;

     label2:
        $z2 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("file:///");

        if $z2 == 0 goto label3;

        $r3 = "file://";

        $i2 = virtualinvoke $r3.<java.lang.String: int length()>();

        r4 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>($i2);

        goto label5;

     label3:
        $z3 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("file://localhost/");

        if $z3 == 0 goto label4;

        $r2 = "file://localhost";

        $i1 = virtualinvoke $r2.<java.lang.String: int length()>();

        r4 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>($i1);

        goto label5;

     label4:
        $r1 = "file:";

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        r4 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>($i0);

     label5:
        $r5 = staticinvoke <com.hp.hpl.jena.util.FileUtils: java.lang.String decodeFileName(java.lang.String)>(r4);

        return $r5;
    }

    public static java.lang.String decodeFileName(java.lang.String)
    {
        char $c2, c6;
        java.lang.StringBuffer $r4;
        int $i0, $i1, $i3, $i4, $i5, i7, $i8;
        java.lang.String r0, $r2, $r3;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(37);

        if $i0 >= 0 goto label1;

        return r0;

     label1:
        $i1 = virtualinvoke r0.<java.lang.String: int length()>();

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>(int)>($i1);

        i7 = 0;

     label2:
        if i7 >= $i1 goto label6;

        $c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i7);

        $i8 = (int) $c2;

        lookupswitch($i8)
        {
            case 37: goto label3;
            default: goto label4;
        };

     label3:
        $i4 = i7 + 1;

        $i3 = i7 + 3;

        $r3 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>($i4, $i3);

        $i5 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>($r3, 16);

        c6 = (char) $i5;

        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c6);

        i7 = i7 + 2;

        goto label5;

     label4:
        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c2);

     label5:
        i7 = i7 + 1;

        goto label2;

     label6:
        $r2 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r2;
    }

    public static java.lang.String toURL(java.lang.String)
    {
        java.io.File $r3;
        int $i0;
        java.lang.StringBuilder $r1, $r2, $r7;
        java.lang.String r0, $r5, $r6, $r8, $r9;
        java.net.URI $r4;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 <= 5 goto label1;

        $r9 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, 5);

        $z0 = virtualinvoke $r9.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("file:");

        if $z0 == 0 goto label1;

        return r0;

     label1:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("file://");

        $r3 = new java.io.File;

        specialinvoke $r3.<java.io.File: void <init>(java.lang.String)>(r0);

        $r4 = virtualinvoke $r3.<java.io.File: java.net.URI toURI()>();

        $r5 = virtualinvoke $r4.<java.net.URI: java.lang.String toString()>();

        $r6 = virtualinvoke $r5.<java.lang.String: java.lang.String substring(int)>(5);

        $r7 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;
    }

    public static java.lang.String encodeFileName(java.lang.String)
    {
        char $c1;
        java.util.Locale $r4;
        java.lang.StringBuffer $r6;
        int $i0, i2, $i3, $i4;
        java.lang.String r0, $r2, $r3, $r5;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>(int)>($i0);

        i2 = 0;

     label1:
        if i2 >= $i0 goto label5;

        $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i2);

        $i3 = (int) $c1;

        lookupswitch($i3)
        {
            case 32: goto label2;
            case 126: goto label2;
            default: goto label3;
        };

     label2:
        virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(37);

        $i4 = (int) $c1;

        $r3 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i4);

        $r4 = <java.util.Locale: java.util.Locale ENGLISH>;

        $r5 = virtualinvoke $r3.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($r4);

        virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        goto label4;

     label3:
        virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c1);

     label4:
        i2 = i2 + 1;

        goto label1;

     label5:
        $r2 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r2;
    }

    public static boolean isFile(java.lang.String)
    {
        int $i0;
        java.lang.String r0, $r1;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <com.hp.hpl.jena.util.FileUtils: java.lang.String getScheme(java.lang.String)>(r0);

        if $r1 != null goto label1;

        return 1;

     label1:
        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("file");

        if $z0 == 0 goto label2;

        return 1;

     label2:
        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i0 != 1 goto label3;

        return 1;

     label3:
        return 0;
    }

    public static boolean isURI(java.lang.String)
    {
        java.lang.String r0, $r1;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <com.hp.hpl.jena.util.FileUtils: java.lang.String getScheme(java.lang.String)>(r0);

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static java.lang.String getScheme(java.lang.String)
    {
        int $i0, i2, $i3;
        char $c1;
        java.lang.String r0, $r1;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        i2 = 0;

     label1:
        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if i2 >= $i0 goto label4;

        $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i2);

        $i3 = (int) $c1;

        if $i3 != 58 goto label2;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, i2);

        return $r1;

     label2:
        $z0 = staticinvoke <com.hp.hpl.jena.util.FileUtils: boolean isASCIILetter(char)>($c1);

        if $z0 != 0 goto label3;

        goto label4;

     label3:
        i2 = i2 + 1;

        goto label1;

     label4:
        return null;
    }

    private static boolean isASCIILetter(char)
    {
        int $i1, $i2, $i3, $i4;
        char c0;
        boolean $z0;

        c0 := @parameter0: char;

        $i1 = (int) c0;

        if $i1 < 97 goto label1;

        $i2 = (int) c0;

        if $i2 <= 122 goto label2;

     label1:
        $i3 = (int) c0;

        if $i3 < 65 goto label3;

        $i4 = (int) c0;

        if $i4 > 90 goto label3;

     label2:
        $z0 = 1;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        return $z0;
    }

    public static java.lang.String getDirname(java.lang.String)
    {
        java.lang.String r1, $r2;
        java.io.File $r0;

        r1 := @parameter0: java.lang.String;

        $r0 = new java.io.File;

        specialinvoke $r0.<java.io.File: void <init>(java.lang.String)>(r1);

        $r2 = virtualinvoke $r0.<java.io.File: java.lang.String getParent()>();

        return $r2;
    }

    public static java.lang.String getFilenameExt(java.lang.String)
    {
        int $i0, $i1, $i2, $i3, i4;
        java.lang.String r0, $r1, $r2;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int lastIndexOf(int)>(47);

        i4 = $i0;

        $i1 = virtualinvoke r0.<java.lang.String: int lastIndexOf(int)>(92);

        $i2 = virtualinvoke r0.<java.lang.String: int lastIndexOf(int)>(46);

        if $i1 <= $i0 goto label1;

        i4 = $i1;

     label1:
        if $i2 <= i4 goto label2;

        $i3 = $i2 + 1;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>($i3);

        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String toLowerCase()>();

        goto label3;

     label2:
        $r2 = "";

     label3:
        return $r2;
    }

    public static java.io.File tempFileName(java.lang.String, java.lang.String)
    {
        java.io.File $r0, $r9;
        int $i0;
        java.lang.StringBuilder $r2, $r4, $r5, $r7;
        java.lang.String $r1, r3, r6, $r8;
        boolean $z0;

        r3 := @parameter0: java.lang.String;

        r6 := @parameter1: java.lang.String;

        $r0 = new java.io.File;

        $r1 = staticinvoke <com.hp.hpl.jena.util.FileUtils: java.lang.String getTempDirectory()>();

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $i0 = staticinvoke <com.hp.hpl.jena.util.FileUtils: int randomNumber()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.io.File: void <init>(java.lang.String,java.lang.String)>($r1, $r8);

        $z0 = virtualinvoke $r0.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label1;

        $r9 = staticinvoke <com.hp.hpl.jena.util.FileUtils: java.io.File tempFileName(java.lang.String,java.lang.String)>(r3, r6);

        return $r9;

     label1:
        virtualinvoke $r0.<java.io.File: void deleteOnExit()>();

        return $r0;
    }

    public static java.io.File getScratchDirectory(java.lang.String)
    {
        com.hp.hpl.jena.shared.JenaException $r7;
        int $i0;
        java.lang.String $r1, r3, $r6, $r11;
        boolean $z0, $z1;
        java.io.File $r0, $r12;
        java.lang.StringBuilder $r2, $r4, $r5, $r8, $r9, $r10;

        r3 := @parameter0: java.lang.String;

        $r0 = new java.io.File;

        $r1 = staticinvoke <com.hp.hpl.jena.util.FileUtils: java.lang.String getTempDirectory()>();

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $i0 = staticinvoke <com.hp.hpl.jena.util.FileUtils: int randomNumber()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.io.File: void <init>(java.lang.String,java.lang.String)>($r1, $r6);

        $z0 = virtualinvoke $r0.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label1;

        $r12 = staticinvoke <com.hp.hpl.jena.util.FileUtils: java.io.File getScratchDirectory(java.lang.String)>(r3);

        return $r12;

     label1:
        $z1 = virtualinvoke $r0.<java.io.File: boolean mkdir()>();

        if $z1 != 0 goto label2;

        $r7 = new com.hp.hpl.jena.shared.JenaException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mkdir failed on ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<com.hp.hpl.jena.shared.JenaException: void <init>(java.lang.String)>($r11);

        throw $r7;

     label2:
        virtualinvoke $r0.<java.io.File: void deleteOnExit()>();

        return $r0;
    }

    public static java.lang.String getTempDirectory()
    {
        java.lang.String $r0;

        $r0 = staticinvoke <com.hp.hpl.jena.JenaRuntime: java.lang.String getSystemProperty(java.lang.String)>("java.io.tmpdir");

        return $r0;
    }

    private static int randomNumber()
    {
        int $i0, $i1;

        $i0 = <com.hp.hpl.jena.util.FileUtils: int counter>;

        $i1 = $i0 + 1;

        <com.hp.hpl.jena.util.FileUtils: int counter> = $i1;

        return $i1;
    }

    public static java.io.BufferedReader openResourceFile(java.lang.String)
    {
        com.hp.hpl.jena.shared.WrappedIOException $r5;
        java.io.IOException $r4;
        java.lang.String r0;
        java.io.BufferedReader $r2;
        java.io.InputStreamReader $r3;
        java.io.InputStream $r1;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <com.hp.hpl.jena.util.FileUtils: java.io.InputStream openResourceFileAsStream(java.lang.String)>(r0);

        $r2 = new java.io.BufferedReader;

        $r3 = new java.io.InputStreamReader;

        specialinvoke $r3.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>($r1, "UTF-8");

        specialinvoke $r2.<java.io.BufferedReader: void <init>(java.io.Reader)>($r3);

     label2:
        return $r2;

     label3:
        $r4 := @caughtexception;

        $r5 = new com.hp.hpl.jena.shared.WrappedIOException;

        specialinvoke $r5.<com.hp.hpl.jena.shared.WrappedIOException: void <init>(java.io.IOException)>($r4);

        throw $r5;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public static java.io.InputStream openResourceFileAsStream(java.lang.String) throws java.io.FileNotFoundException
    {
        java.io.FileInputStream $r10;
        java.lang.StringBuilder $r2, $r4, $r5;
        java.lang.Class $r3, $r8;
        java.lang.String r0, $r6;
        java.io.InputStream $r1, $r7, $r9, r11;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <java.lang.ClassLoader: java.io.InputStream getSystemResourceAsStream(java.lang.String)>(r0);

        r11 = $r1;

        if $r1 != null goto label1;

        $r3 = class "Lcom/hp/hpl/jena/util/FileUtils;";

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = virtualinvoke $r3.<java.lang.Class: java.io.InputStream getResourceAsStream(java.lang.String)>($r6);

        r11 = $r7;

        if $r7 != null goto label1;

        $r8 = class "Lcom/hp/hpl/jena/util/FileUtils;";

        $r9 = virtualinvoke $r8.<java.lang.Class: java.io.InputStream getResourceAsStream(java.lang.String)>(r0);

        r11 = $r9;

        if $r9 != null goto label1;

        $r10 = new java.io.FileInputStream;

        specialinvoke $r10.<java.io.FileInputStream: void <init>(java.lang.String)>(r0);

        r11 = $r10;

     label1:
        return r11;
    }

    public static java.io.BufferedReader readerFromURL(java.lang.String)
    {
        java.net.MalformedURLException $r8;
        java.net.URL $r0;
        java.io.IOException $r4;
        java.io.FileInputStream $r9;
        java.io.FileNotFoundException $r6;
        com.hp.hpl.jena.shared.WrappedIOException $r5, $r7;
        java.lang.String r1;
        java.io.BufferedReader $r3, $r10;
        java.io.InputStream $r2;

        r1 := @parameter0: java.lang.String;

     label1:
        $r0 = new java.net.URL;

        specialinvoke $r0.<java.net.URL: void <init>(java.lang.String)>(r1);

        $r2 = virtualinvoke $r0.<java.net.URL: java.io.InputStream openStream()>();

        $r3 = staticinvoke <com.hp.hpl.jena.util.FileUtils: java.io.BufferedReader asBufferedUTF8(java.io.InputStream)>($r2);

     label2:
        return $r3;

     label3:
        $r8 := @caughtexception;

     label4:
        $r9 = new java.io.FileInputStream;

        specialinvoke $r9.<java.io.FileInputStream: void <init>(java.lang.String)>(r1);

        $r10 = staticinvoke <com.hp.hpl.jena.util.FileUtils: java.io.BufferedReader asBufferedUTF8(java.io.InputStream)>($r9);

     label5:
        return $r10;

     label6:
        $r6 := @caughtexception;

        $r7 = new com.hp.hpl.jena.shared.WrappedIOException;

        specialinvoke $r7.<com.hp.hpl.jena.shared.WrappedIOException: void <init>(java.io.IOException)>($r6);

        throw $r7;

     label7:
        $r4 := @caughtexception;

        $r5 = new com.hp.hpl.jena.shared.WrappedIOException;

        specialinvoke $r5.<com.hp.hpl.jena.shared.WrappedIOException: void <init>(java.io.IOException)>($r4);

        throw $r5;

        catch java.net.MalformedURLException from label1 to label2 with label3;
        catch java.io.FileNotFoundException from label4 to label5 with label6;
        catch java.io.IOException from label1 to label2 with label7;
    }

    public static java.lang.String readWholeFileAsUTF8(java.lang.String) throws java.io.IOException
    {
        java.io.FileInputStream $r0;
        java.lang.String r1, $r2;

        r1 := @parameter0: java.lang.String;

        $r0 = new java.io.FileInputStream;

        specialinvoke $r0.<java.io.FileInputStream: void <init>(java.lang.String)>(r1);

        $r2 = staticinvoke <com.hp.hpl.jena.util.FileUtils: java.lang.String readWholeFileAsUTF8(java.io.InputStream)>($r0);

        return $r2;
    }

    public static java.lang.String readWholeFileAsUTF8(java.io.InputStream) throws java.io.IOException
    {
        java.io.BufferedReader $r0;
        java.io.Reader $r2;
        java.lang.String $r3;
        java.io.InputStream r1;

        r1 := @parameter0: java.io.InputStream;

        $r0 = new java.io.BufferedReader;

        $r2 = staticinvoke <com.hp.hpl.jena.util.FileUtils: java.io.Reader asUTF8(java.io.InputStream)>(r1);

        specialinvoke $r0.<java.io.BufferedReader: void <init>(java.io.Reader,int)>($r2, 1024);

        $r3 = staticinvoke <com.hp.hpl.jena.util.FileUtils: java.lang.String readWholeFileAsUTF8(java.io.Reader)>($r0);

        return $r3;
    }

    private static java.lang.String readWholeFileAsUTF8(java.io.Reader) throws java.io.IOException
    {
        java.io.StringWriter $r4;
        int $i0, $i2;
        char[] r1;
        java.io.Reader r2;
        java.lang.String $r3;

        r2 := @parameter0: java.io.Reader;

        $r4 = new java.io.StringWriter;

        specialinvoke $r4.<java.io.StringWriter: void <init>(int)>(1024);

        r1 = newarray (char)[1024];

     label1:
        $i0 = virtualinvoke r2.<java.io.Reader: int read(char[])>(r1);

        $i2 = (int) -1;

        if $i0 == $i2 goto label3;

        if $i0 > 0 goto label2;

        goto label3;

     label2:
        virtualinvoke $r4.<java.io.StringWriter: void write(char[],int,int)>(r1, 0, $i0);

        goto label1;

     label3:
        virtualinvoke r2.<java.io.Reader: void close()>();

        virtualinvoke $r4.<java.io.StringWriter: void close()>();

        $r3 = virtualinvoke $r4.<java.io.StringWriter: java.lang.String toString()>();

        return $r3;
    }

    static void <clinit>()
    {
        java.lang.Throwable $r1;
        org.slf4j.Logger $r2;
        java.nio.charset.Charset $r0;

        <com.hp.hpl.jena.util.FileUtils: java.lang.String encodingUTF8> = "utf-8";

        <com.hp.hpl.jena.util.FileUtils: java.lang.String langTurtle> = "TURTLE";

        <com.hp.hpl.jena.util.FileUtils: java.lang.String langN3> = "N3";

        <com.hp.hpl.jena.util.FileUtils: java.lang.String langNTriple> = "N-TRIPLE";

        <com.hp.hpl.jena.util.FileUtils: java.lang.String langXMLAbbrev> = "RDF/XML-ABBREV";

        <com.hp.hpl.jena.util.FileUtils: java.lang.String langXML> = "RDF/XML";

        <com.hp.hpl.jena.util.FileUtils: java.nio.charset.Charset utf8> = null;

     label1:
        $r0 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("utf-8");

        <com.hp.hpl.jena.util.FileUtils: java.nio.charset.Charset utf8> = $r0;

     label2:
        goto label4;

     label3:
        $r1 := @caughtexception;

        $r2 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/hp/hpl/jena/util/FileUtils;");

        interfaceinvoke $r2.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>("Failed to get charset for UTF-8", $r1);

     label4:
        <com.hp.hpl.jena.util.FileUtils: int counter> = 0;

        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
}
