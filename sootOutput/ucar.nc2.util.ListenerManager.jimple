public class ucar.nc2.util.ListenerManager extends java.lang.Object
{
    private static final org.slf4j.Logger logger;
    private final java.util.List listeners;
    private final java.lang.reflect.Method method;
    private boolean hasListeners;
    private boolean enabled;

    public void <init>(java.lang.String, java.lang.String, java.lang.String)
    {
        java.lang.String r2, r4, r7, $r19;
        java.lang.reflect.Method $r8;
        org.slf4j.Logger $r11;
        java.lang.Class[] r6;
        java.lang.RuntimeException $r20;
        ucar.nc2.util.ListenerManager r0;
        java.lang.Exception $r9;
        java.lang.Class $r3, $r5;
        java.lang.StringBuilder $r10, $r12, $r13, $r14, $r15, $r16, $r17, $r18;
        java.util.concurrent.CopyOnWriteArrayList $r1;

        r0 := @this: ucar.nc2.util.ListenerManager;

        r2 := @parameter0: java.lang.String;

        r4 := @parameter1: java.lang.String;

        r7 := @parameter2: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.concurrent.CopyOnWriteArrayList;

        specialinvoke $r1.<java.util.concurrent.CopyOnWriteArrayList: void <init>()>();

        r0.<ucar.nc2.util.ListenerManager: java.util.List listeners> = $r1;

        r0.<ucar.nc2.util.ListenerManager: boolean hasListeners> = 0;

        r0.<ucar.nc2.util.ListenerManager: boolean enabled> = 1;

     label1:
        $r3 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r2);

        $r5 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r4);

        r6 = newarray (java.lang.Class)[1];

        r6[0] = $r5;

        $r8 = virtualinvoke $r3.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(r7, r6);

        r0.<ucar.nc2.util.ListenerManager: java.lang.reflect.Method method> = $r8;

     label2:
        goto label4;

     label3:
        $r9 := @caughtexception;

        $r11 = <ucar.nc2.util.ListenerManager: org.slf4j.Logger logger>;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ListenerManager failed on ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("( ");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" )");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r11.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>($r19, $r9);

        $r20 = new java.lang.RuntimeException;

        specialinvoke $r20.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r9);

        throw $r20;

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void setEnabled(boolean)
    {
        ucar.nc2.util.ListenerManager r0;
        boolean z0;

        r0 := @this: ucar.nc2.util.ListenerManager;

        z0 := @parameter0: boolean;

        r0.<ucar.nc2.util.ListenerManager: boolean enabled> = z0;

        return;
    }

    public boolean getEnabled()
    {
        ucar.nc2.util.ListenerManager r0;
        boolean $z0;

        r0 := @this: ucar.nc2.util.ListenerManager;

        $z0 = r0.<ucar.nc2.util.ListenerManager: boolean enabled>;

        return $z0;
    }

    public synchronized void addListener(java.lang.Object)
    {
        org.slf4j.Logger $r4;
        ucar.nc2.util.ListenerManager r0;
        java.util.List $r2, $r8;
        java.lang.Object r1;
        java.lang.StringBuilder $r3, $r5, $r6;
        java.lang.String $r7;
        boolean $z0;

        r0 := @this: ucar.nc2.util.ListenerManager;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<ucar.nc2.util.ListenerManager: java.util.List listeners>;

        $z0 = interfaceinvoke $r2.<java.util.List: boolean contains(java.lang.Object)>(r1);

        if $z0 != 0 goto label1;

        $r8 = r0.<ucar.nc2.util.ListenerManager: java.util.List listeners>;

        interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>(r1);

        r0.<ucar.nc2.util.ListenerManager: boolean hasListeners> = 1;

        goto label2;

     label1:
        $r4 = <ucar.nc2.util.ListenerManager: org.slf4j.Logger logger>;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ListenerManager.addListener already has Listener ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r4.<org.slf4j.Logger: void warn(java.lang.String)>($r7);

     label2:
        return;
    }

    public synchronized void removeListener(java.lang.Object)
    {
        org.slf4j.Logger $r4;
        ucar.nc2.util.ListenerManager r0;
        java.util.List $r2, $r8, $r9;
        int $i0;
        java.lang.Object r1;
        java.lang.StringBuilder $r3, $r5, $r6;
        java.lang.String $r7;
        boolean $z0, $z1;

        r0 := @this: ucar.nc2.util.ListenerManager;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<ucar.nc2.util.ListenerManager: java.util.List listeners>;

        $z0 = interfaceinvoke $r2.<java.util.List: boolean contains(java.lang.Object)>(r1);

        if $z0 == 0 goto label3;

        $r8 = r0.<ucar.nc2.util.ListenerManager: java.util.List listeners>;

        interfaceinvoke $r8.<java.util.List: boolean remove(java.lang.Object)>(r1);

        $r9 = r0.<ucar.nc2.util.ListenerManager: java.util.List listeners>;

        $i0 = interfaceinvoke $r9.<java.util.List: int size()>();

        if $i0 <= 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        r0.<ucar.nc2.util.ListenerManager: boolean hasListeners> = $z1;

        goto label4;

     label3:
        $r4 = <ucar.nc2.util.ListenerManager: org.slf4j.Logger logger>;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ListenerManager.removeListener couldnt find Listener ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r4.<org.slf4j.Logger: void warn(java.lang.String)>($r7);

     label4:
        return;
    }

    public boolean hasListeners()
    {
        ucar.nc2.util.ListenerManager r0;
        boolean $z0;

        r0 := @this: ucar.nc2.util.ListenerManager;

        $z0 = r0.<ucar.nc2.util.ListenerManager: boolean hasListeners>;

        return $z0;
    }

    public void sendEvent(java.util.EventObject)
    {
        java.lang.Throwable $r14;
        java.lang.Object[] r1;
        java.util.ListIterator $r4;
        java.util.EventObject r2;
        java.lang.String $r16;
        java.lang.reflect.Method $r6, $r11;
        boolean $z0, $z1, $z2;
        java.lang.IllegalAccessException $r19;
        org.slf4j.Logger $r9, $r18, $r20;
        java.lang.IllegalArgumentException $r17;
        ucar.nc2.util.ListenerManager r0;
        java.lang.reflect.InvocationTargetException $r7;
        java.util.List $r3;
        java.lang.Object $r5;
        java.lang.StringBuilder $r8, $r10, $r12, $r13, $r15;

        r0 := @this: ucar.nc2.util.ListenerManager;

        r2 := @parameter0: java.util.EventObject;

        $z0 = r0.<ucar.nc2.util.ListenerManager: boolean hasListeners>;

        if $z0 == 0 goto label01;

        $z1 = r0.<ucar.nc2.util.ListenerManager: boolean enabled>;

        if $z1 != 0 goto label02;

     label01:
        return;

     label02:
        r1 = newarray (java.lang.Object)[1];

        r1[0] = r2;

        $r3 = r0.<ucar.nc2.util.ListenerManager: java.util.List listeners>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.ListIterator listIterator()>();

     label03:
        $z2 = interfaceinvoke $r4.<java.util.ListIterator: boolean hasNext()>();

        if $z2 == 0 goto label10;

        $r5 = interfaceinvoke $r4.<java.util.ListIterator: java.lang.Object next()>();

     label04:
        $r6 = r0.<ucar.nc2.util.ListenerManager: java.lang.reflect.Method method>;

        virtualinvoke $r6.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r5, r1);

     label05:
        goto label09;

     label06:
        $r19 := @caughtexception;

        $r20 = <ucar.nc2.util.ListenerManager: org.slf4j.Logger logger>;

        interfaceinvoke $r20.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>("ListenerManager IllegalAccessException", $r19);

        interfaceinvoke $r4.<java.util.ListIterator: void remove()>();

        goto label09;

     label07:
        $r17 := @caughtexception;

        $r18 = <ucar.nc2.util.ListenerManager: org.slf4j.Logger logger>;

        interfaceinvoke $r18.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>("ListenerManager IllegalArgumentException", $r17);

        interfaceinvoke $r4.<java.util.ListIterator: void remove()>();

        goto label09;

     label08:
        $r7 := @caughtexception;

        $r9 = <ucar.nc2.util.ListenerManager: org.slf4j.Logger logger>;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ListenerManager InvocationTargetException on ");

        $r11 = r0.<ucar.nc2.util.ListenerManager: java.lang.reflect.Method method>;

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" threw exception ");

        $r14 = virtualinvoke $r7.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r9.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>($r16, $r7);

     label09:
        goto label03;

     label10:
        return;

        catch java.lang.IllegalAccessException from label04 to label05 with label06;
        catch java.lang.IllegalArgumentException from label04 to label05 with label07;
        catch java.lang.reflect.InvocationTargetException from label04 to label05 with label08;
    }

    public void sendEventExcludeSource(java.util.EventObject)
    {
        java.lang.Throwable $r15;
        java.lang.Object[] r3;
        java.util.ListIterator $r5;
        java.util.EventObject r1;
        java.lang.String $r17;
        java.lang.reflect.Method $r7, $r12;
        boolean $z0, $z1, $z2;
        java.lang.IllegalAccessException $r20;
        org.slf4j.Logger $r10, $r19, $r21;
        java.lang.IllegalArgumentException $r18;
        ucar.nc2.util.ListenerManager r0;
        java.lang.reflect.InvocationTargetException $r8;
        java.util.List $r4;
        java.lang.Object $r2, $r6;
        java.lang.StringBuilder $r9, $r11, $r13, $r14, $r16;

        r0 := @this: ucar.nc2.util.ListenerManager;

        r1 := @parameter0: java.util.EventObject;

        $z0 = r0.<ucar.nc2.util.ListenerManager: boolean hasListeners>;

        if $z0 == 0 goto label01;

        $z1 = r0.<ucar.nc2.util.ListenerManager: boolean enabled>;

        if $z1 != 0 goto label02;

     label01:
        return;

     label02:
        $r2 = virtualinvoke r1.<java.util.EventObject: java.lang.Object getSource()>();

        r3 = newarray (java.lang.Object)[1];

        r3[0] = r1;

        $r4 = r0.<ucar.nc2.util.ListenerManager: java.util.List listeners>;

        $r5 = interfaceinvoke $r4.<java.util.List: java.util.ListIterator listIterator()>();

     label03:
        $z2 = interfaceinvoke $r5.<java.util.ListIterator: boolean hasNext()>();

        if $z2 == 0 goto label10;

        $r6 = interfaceinvoke $r5.<java.util.ListIterator: java.lang.Object next()>();

        if $r6 != $r2 goto label04;

        goto label03;

     label04:
        $r7 = r0.<ucar.nc2.util.ListenerManager: java.lang.reflect.Method method>;

        virtualinvoke $r7.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r6, r3);

     label05:
        goto label09;

     label06:
        $r20 := @caughtexception;

        interfaceinvoke $r5.<java.util.ListIterator: void remove()>();

        $r21 = <ucar.nc2.util.ListenerManager: org.slf4j.Logger logger>;

        interfaceinvoke $r21.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>("ListenerManager IllegalAccessException", $r20);

        goto label09;

     label07:
        $r18 := @caughtexception;

        interfaceinvoke $r5.<java.util.ListIterator: void remove()>();

        $r19 = <ucar.nc2.util.ListenerManager: org.slf4j.Logger logger>;

        interfaceinvoke $r19.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>("ListenerManager IllegalArgumentException", $r18);

        goto label09;

     label08:
        $r8 := @caughtexception;

        interfaceinvoke $r5.<java.util.ListIterator: void remove()>();

        $r10 = <ucar.nc2.util.ListenerManager: org.slf4j.Logger logger>;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ListenerManager InvocationTargetException on ");

        $r12 = r0.<ucar.nc2.util.ListenerManager: java.lang.reflect.Method method>;

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" threw exception ");

        $r15 = virtualinvoke $r8.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r10.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>($r17, $r8);

     label09:
        goto label03;

     label10:
        return;

        catch java.lang.IllegalAccessException from label04 to label05 with label06;
        catch java.lang.IllegalArgumentException from label04 to label05 with label07;
        catch java.lang.reflect.InvocationTargetException from label04 to label05 with label08;
    }

    static void <clinit>()
    {
        org.slf4j.Logger $r0;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lucar/nc2/util/ListenerManager;");

        <ucar.nc2.util.ListenerManager: org.slf4j.Logger logger> = $r0;

        return;
    }
}
