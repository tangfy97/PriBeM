public class org.joda.time.tz.ZoneInfoProvider extends java.lang.Object implements org.joda.time.tz.Provider
{
    private final java.io.File iFileDir;
    private final java.lang.String iResourcePath;
    private final java.lang.ClassLoader iLoader;
    private final java.util.Map iZoneInfoMap;

    public void <init>(java.io.File) throws java.io.IOException
    {
        java.lang.StringBuffer $r5, $r6, $r7, $r10, $r11, $r12;
        java.util.Map $r3;
        org.joda.time.tz.ZoneInfoProvider r0;
        java.lang.String $r8, $r13;
        boolean $z0, $z1;
        java.io.IOException $r4, $r9;
        java.lang.IllegalArgumentException $r14;
        java.io.File r1;
        java.io.InputStream $r2;

        r0 := @this: org.joda.time.tz.ZoneInfoProvider;

        r1 := @parameter0: java.io.File;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if r1 != null goto label1;

        $r14 = new java.lang.IllegalArgumentException;

        specialinvoke $r14.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("No file directory provided");

        throw $r14;

     label1:
        $z0 = virtualinvoke r1.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label2;

        $r9 = new java.io.IOException;

        $r10 = new java.lang.StringBuffer;

        specialinvoke $r10.<java.lang.StringBuffer: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("File directory doesn\'t exist: ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r1);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r9.<java.io.IOException: void <init>(java.lang.String)>($r13);

        throw $r9;

     label2:
        $z1 = virtualinvoke r1.<java.io.File: boolean isDirectory()>();

        if $z1 != 0 goto label3;

        $r4 = new java.io.IOException;

        $r5 = new java.lang.StringBuffer;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("File doesn\'t refer to a directory: ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r4.<java.io.IOException: void <init>(java.lang.String)>($r8);

        throw $r4;

     label3:
        r0.<org.joda.time.tz.ZoneInfoProvider: java.io.File iFileDir> = r1;

        r0.<org.joda.time.tz.ZoneInfoProvider: java.lang.String iResourcePath> = null;

        r0.<org.joda.time.tz.ZoneInfoProvider: java.lang.ClassLoader iLoader> = null;

        $r2 = specialinvoke r0.<org.joda.time.tz.ZoneInfoProvider: java.io.InputStream openResource(java.lang.String)>("ZoneInfoMap");

        $r3 = staticinvoke <org.joda.time.tz.ZoneInfoProvider: java.util.Map loadZoneInfoMap(java.io.InputStream)>($r2);

        r0.<org.joda.time.tz.ZoneInfoProvider: java.util.Map iZoneInfoMap> = $r3;

        return;
    }

    public void <init>(java.lang.String) throws java.io.IOException
    {
        org.joda.time.tz.ZoneInfoProvider r0;
        java.lang.String r1;

        r0 := @this: org.joda.time.tz.ZoneInfoProvider;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.joda.time.tz.ZoneInfoProvider: void <init>(java.lang.String,java.lang.ClassLoader,boolean)>(r1, null, 0);

        return;
    }

    public void <init>(java.lang.String, java.lang.ClassLoader) throws java.io.IOException
    {
        org.joda.time.tz.ZoneInfoProvider r0;
        java.lang.String r1;
        java.lang.ClassLoader r2;

        r0 := @this: org.joda.time.tz.ZoneInfoProvider;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.ClassLoader;

        specialinvoke r0.<org.joda.time.tz.ZoneInfoProvider: void <init>(java.lang.String,java.lang.ClassLoader,boolean)>(r1, r2, 1);

        return;
    }

    private void <init>(java.lang.String, java.lang.ClassLoader, boolean) throws java.io.IOException
    {
        java.lang.IllegalArgumentException $r5;
        java.lang.StringBuffer $r2, $r3, $r4;
        java.util.Map $r9;
        org.joda.time.tz.ZoneInfoProvider r0;
        java.lang.Class $r1;
        java.lang.String r6;
        java.lang.ClassLoader r7;
        boolean $z0, z1;
        java.io.InputStream $r8;

        r0 := @this: org.joda.time.tz.ZoneInfoProvider;

        r6 := @parameter0: java.lang.String;

        r7 := @parameter1: java.lang.ClassLoader;

        z1 := @parameter2: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if r6 != null goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("No resource path provided");

        throw $r5;

     label1:
        $z0 = virtualinvoke r6.<java.lang.String: boolean endsWith(java.lang.String)>("/");

        if $z0 != 0 goto label2;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r6);

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(47);

        r6 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

     label2:
        r0.<org.joda.time.tz.ZoneInfoProvider: java.io.File iFileDir> = null;

        r0.<org.joda.time.tz.ZoneInfoProvider: java.lang.String iResourcePath> = r6;

        if r7 != null goto label3;

        if z1 != 0 goto label3;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        r7 = virtualinvoke $r1.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

     label3:
        r0.<org.joda.time.tz.ZoneInfoProvider: java.lang.ClassLoader iLoader> = r7;

        $r8 = specialinvoke r0.<org.joda.time.tz.ZoneInfoProvider: java.io.InputStream openResource(java.lang.String)>("ZoneInfoMap");

        $r9 = staticinvoke <org.joda.time.tz.ZoneInfoProvider: java.util.Map loadZoneInfoMap(java.io.InputStream)>($r8);

        r0.<org.joda.time.tz.ZoneInfoProvider: java.util.Map iZoneInfoMap> = $r9;

        return;
    }

    public synchronized org.joda.time.DateTimeZone getZone(java.lang.String)
    {
        org.joda.time.DateTimeZone $r5, r8, $r9, $r10;
        java.util.Map $r2;
        org.joda.time.tz.ZoneInfoProvider r1;
        java.lang.Object $r3, $r7;
        java.lang.String r0, $r4;
        java.lang.ref.SoftReference $r6;
        boolean $z0, $z1;

        r1 := @this: org.joda.time.tz.ZoneInfoProvider;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        $r2 = r1.<org.joda.time.tz.ZoneInfoProvider: java.util.Map iZoneInfoMap>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0);

        if $r3 != null goto label2;

        return null;

     label2:
        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label3;

        $r10 = specialinvoke r1.<org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone loadZoneData(java.lang.String)>(r0);

        return $r10;

     label3:
        $z1 = $r3 instanceof java.lang.ref.SoftReference;

        if $z1 == 0 goto label5;

        $r6 = (java.lang.ref.SoftReference) $r3;

        $r7 = virtualinvoke $r6.<java.lang.ref.SoftReference: java.lang.Object get()>();

        r8 = (org.joda.time.DateTimeZone) $r7;

        if r8 == null goto label4;

        return r8;

     label4:
        $r9 = specialinvoke r1.<org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone loadZoneData(java.lang.String)>(r0);

        return $r9;

     label5:
        $r4 = (java.lang.String) $r3;

        $r5 = virtualinvoke r1.<org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone getZone(java.lang.String)>($r4);

        return $r5;
    }

    public synchronized java.util.Set getAvailableIDs()
    {
        java.util.Map $r2;
        org.joda.time.tz.ZoneInfoProvider r1;
        java.util.Set $r3;
        java.util.TreeSet $r0;

        r1 := @this: org.joda.time.tz.ZoneInfoProvider;

        $r0 = new java.util.TreeSet;

        $r2 = r1.<org.joda.time.tz.ZoneInfoProvider: java.util.Map iZoneInfoMap>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Set keySet()>();

        specialinvoke $r0.<java.util.TreeSet: void <init>(java.util.Collection)>($r3);

        return $r0;
    }

    protected void uncaughtException(java.lang.Exception)
    {
        java.lang.Thread $r0;
        org.joda.time.tz.ZoneInfoProvider r3;
        java.lang.ThreadGroup $r1;
        java.lang.Exception r2;

        r3 := @this: org.joda.time.tz.ZoneInfoProvider;

        r2 := @parameter0: java.lang.Exception;

        $r0 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r1 = virtualinvoke $r0.<java.lang.Thread: java.lang.ThreadGroup getThreadGroup()>();

        virtualinvoke $r1.<java.lang.ThreadGroup: void uncaughtException(java.lang.Thread,java.lang.Throwable)>($r0, r2);

        return;
    }

    private java.io.InputStream openResource(java.lang.String) throws java.io.IOException
    {
        java.lang.StringBuffer $r6, $r7, $r8, $r9, $r11;
        org.joda.time.tz.ZoneInfoProvider r0;
        java.lang.String r2, $r3, $r4, $r13, $r20;
        java.io.IOException $r12;
        java.io.FileInputStream $r16;
        java.io.File $r1, $r17, $r18;
        java.lang.ClassLoader $r5, $r10, $r14, $r15;
        java.io.InputStream r19;

        r0 := @this: org.joda.time.tz.ZoneInfoProvider;

        r2 := @parameter0: java.lang.String;

        $r1 = r0.<org.joda.time.tz.ZoneInfoProvider: java.io.File iFileDir>;

        if $r1 == null goto label1;

        $r16 = new java.io.FileInputStream;

        $r17 = new java.io.File;

        $r18 = r0.<org.joda.time.tz.ZoneInfoProvider: java.io.File iFileDir>;

        specialinvoke $r17.<java.io.File: void <init>(java.io.File,java.lang.String)>($r18, r2);

        specialinvoke $r16.<java.io.FileInputStream: void <init>(java.io.File)>($r17);

        r19 = $r16;

        goto label6;

     label1:
        $r3 = r0.<org.joda.time.tz.ZoneInfoProvider: java.lang.String iResourcePath>;

        $r4 = virtualinvoke $r3.<java.lang.String: java.lang.String concat(java.lang.String)>(r2);

        $r5 = r0.<org.joda.time.tz.ZoneInfoProvider: java.lang.ClassLoader iLoader>;

        if $r5 == null goto label2;

        $r15 = r0.<org.joda.time.tz.ZoneInfoProvider: java.lang.ClassLoader iLoader>;

        r19 = virtualinvoke $r15.<java.lang.ClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>($r4);

        goto label3;

     label2:
        r19 = staticinvoke <java.lang.ClassLoader: java.io.InputStream getSystemResourceAsStream(java.lang.String)>($r4);

     label3:
        if r19 != null goto label6;

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>(int)>(40);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Resource not found: \"");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\" ClassLoader: ");

        $r10 = r0.<org.joda.time.tz.ZoneInfoProvider: java.lang.ClassLoader iLoader>;

        if $r10 == null goto label4;

        $r14 = r0.<org.joda.time.tz.ZoneInfoProvider: java.lang.ClassLoader iLoader>;

        $r20 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>();

        goto label5;

     label4:
        $r20 = "system";

     label5:
        $r11 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r20);

        $r12 = new java.io.IOException;

        $r13 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r12.<java.io.IOException: void <init>(java.lang.String)>($r13);

        throw $r12;

     label6:
        return r19;
    }

    private org.joda.time.DateTimeZone loadZoneData(java.lang.String)
    {
        java.lang.Throwable $r9;
        org.joda.time.DateTimeZone $r3;
        java.io.IOException $r6, $r7, $r8, $r10;
        java.util.Map $r5, $r11;
        org.joda.time.tz.ZoneInfoProvider r0;
        java.lang.String r1;
        java.lang.ref.SoftReference $r4;
        java.io.InputStream $r2, r12;

        r0 := @this: org.joda.time.tz.ZoneInfoProvider;

        r1 := @parameter0: java.lang.String;

        r12 = null;

     label01:
        $r2 = specialinvoke r0.<org.joda.time.tz.ZoneInfoProvider: java.io.InputStream openResource(java.lang.String)>(r1);

        r12 = $r2;

        $r3 = staticinvoke <org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone readFrom(java.io.InputStream,java.lang.String)>($r2, r1);

        $r5 = r0.<org.joda.time.tz.ZoneInfoProvider: java.util.Map iZoneInfoMap>;

        $r4 = new java.lang.ref.SoftReference;

        specialinvoke $r4.<java.lang.ref.SoftReference: void <init>(java.lang.Object)>($r3);

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r4);

        goto label07;

     label02:
        return $r3;

     label03:
        $r10 := @caughtexception;

        virtualinvoke r0.<org.joda.time.tz.ZoneInfoProvider: void uncaughtException(java.lang.Exception)>($r10);

        $r11 = r0.<org.joda.time.tz.ZoneInfoProvider: java.util.Map iZoneInfoMap>;

        interfaceinvoke $r11.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

        goto label11;

     label04:
        return null;

     label05:
        $r9 := @caughtexception;

        goto label15;

     label06:
        throw $r9;

     label07:
        if $r2 == null goto label08;

        virtualinvoke $r2.<java.io.InputStream: void close()>();

     label08:
        goto label10;

     label09:
        $r8 := @caughtexception;

     label10:
        goto label02;

     label11:
        if r12 == null goto label12;

        virtualinvoke r12.<java.io.InputStream: void close()>();

     label12:
        goto label14;

     label13:
        $r7 := @caughtexception;

     label14:
        goto label04;

     label15:
        if r12 == null goto label16;

        virtualinvoke r12.<java.io.InputStream: void close()>();

     label16:
        goto label18;

     label17:
        $r6 := @caughtexception;

     label18:
        goto label06;

        catch java.io.IOException from label01 to label02 with label03;
        catch java.lang.Throwable from label01 to label02 with label05;
        catch java.lang.Throwable from label03 to label04 with label05;
        catch java.lang.Throwable from label05 to label06 with label05;
        catch java.io.IOException from label07 to label08 with label09;
        catch java.io.IOException from label11 to label12 with label13;
        catch java.io.IOException from label15 to label16 with label17;
    }

    private static java.util.Map loadZoneInfoMap(java.io.InputStream) throws java.io.IOException
    {
        java.lang.Throwable $r7;
        java.io.DataInputStream $r2;
        org.joda.time.DateTimeZone $r5;
        java.io.IOException $r6, $r8;
        java.util.TreeMap $r0;
        java.lang.ref.SoftReference $r4;
        java.util.Comparator $r1;
        java.io.InputStream r3;

        r3 := @parameter0: java.io.InputStream;

        $r0 = new java.util.TreeMap;

        $r1 = <java.lang.String: java.util.Comparator CASE_INSENSITIVE_ORDER>;

        specialinvoke $r0.<java.util.TreeMap: void <init>(java.util.Comparator)>($r1);

        $r2 = new java.io.DataInputStream;

        specialinvoke $r2.<java.io.DataInputStream: void <init>(java.io.InputStream)>(r3);

     label01:
        staticinvoke <org.joda.time.tz.ZoneInfoProvider: void readZoneInfoMap(java.io.DataInputStream,java.util.Map)>($r2, $r0);

     label02:
        virtualinvoke $r2.<java.io.DataInputStream: void close()>();

     label03:
        goto label10;

     label04:
        $r8 := @caughtexception;

        goto label10;

     label05:
        $r7 := @caughtexception;

     label06:
        virtualinvoke $r2.<java.io.DataInputStream: void close()>();

     label07:
        goto label09;

     label08:
        $r6 := @caughtexception;

     label09:
        throw $r7;

     label10:
        $r4 = new java.lang.ref.SoftReference;

        $r5 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC>;

        specialinvoke $r4.<java.lang.ref.SoftReference: void <init>(java.lang.Object)>($r5);

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("UTC", $r4);

        return $r0;

        catch java.io.IOException from label02 to label03 with label04;
        catch java.lang.Throwable from label01 to label02 with label05;
        catch java.io.IOException from label06 to label07 with label08;
        catch java.lang.Throwable from label05 to label06 with label05;
    }

    private static void readZoneInfoMap(java.io.DataInputStream, java.util.Map) throws java.io.IOException
    {
        java.io.DataInputStream r0;
        java.lang.String[] r1;
        java.io.IOException $r8;
        java.lang.ArrayIndexOutOfBoundsException $r7;
        java.util.Map r2;
        int $i0, $i1, $i2, $i3, i4, i5;
        java.lang.String $r3, $r4, $r5, $r6;

        r0 := @parameter0: java.io.DataInputStream;

        r2 := @parameter1: java.util.Map;

        $i0 = virtualinvoke r0.<java.io.DataInputStream: int readUnsignedShort()>();

        r1 = newarray (java.lang.String)[$i0];

        i4 = 0;

     label1:
        if i4 >= $i0 goto label2;

        $r5 = virtualinvoke r0.<java.io.DataInputStream: java.lang.String readUTF()>();

        $r6 = virtualinvoke $r5.<java.lang.String: java.lang.String intern()>();

        r1[i4] = $r6;

        i4 = i4 + 1;

        goto label1;

     label2:
        $i1 = virtualinvoke r0.<java.io.DataInputStream: int readUnsignedShort()>();

        i5 = 0;

     label3:
        if i5 >= $i1 goto label8;

     label4:
        $i2 = virtualinvoke r0.<java.io.DataInputStream: int readUnsignedShort()>();

        $r3 = r1[$i2];

        $i3 = virtualinvoke r0.<java.io.DataInputStream: int readUnsignedShort()>();

        $r4 = r1[$i3];

        interfaceinvoke r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, $r4);

     label5:
        goto label7;

     label6:
        $r7 := @caughtexception;

        $r8 = new java.io.IOException;

        specialinvoke $r8.<java.io.IOException: void <init>(java.lang.String)>("Corrupt zone info map");

        throw $r8;

     label7:
        i5 = i5 + 1;

        goto label3;

     label8:
        return;

        catch java.lang.ArrayIndexOutOfBoundsException from label4 to label5 with label6;
    }
}
