public abstract class org.apache.lucene.analysis.pt.RSLPStemmerBase extends java.lang.Object
{
    private static final java.util.regex.Pattern headerPattern;
    private static final java.util.regex.Pattern stripPattern;
    private static final java.util.regex.Pattern repPattern;
    private static final java.util.regex.Pattern excPattern;
    static final boolean $assertionsDisabled;

    public void <init>()
    {
        org.apache.lucene.analysis.pt.RSLPStemmerBase r0;

        r0 := @this: org.apache.lucene.analysis.pt.RSLPStemmerBase;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    protected static java.util.Map parse(java.lang.Class, java.lang.String)
    {
        java.io.LineNumberReader $r3;
        java.util.HashMap $r5;
        org.apache.lucene.analysis.pt.RSLPStemmerBase$Step $r7;
        java.io.IOException $r9;
        java.lang.RuntimeException $r10;
        java.io.InputStreamReader $r4;
        java.lang.Class r0;
        java.lang.String r1, $r6, $r8;
        java.io.InputStream $r2;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.String;

     label1:
        $r2 = virtualinvoke r0.<java.lang.Class: java.io.InputStream getResourceAsStream(java.lang.String)>(r1);

        $r3 = new java.io.LineNumberReader;

        $r4 = new java.io.InputStreamReader;

        specialinvoke $r4.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>($r2, "UTF-8");

        specialinvoke $r3.<java.io.LineNumberReader: void <init>(java.io.Reader)>($r4);

        $r5 = new java.util.HashMap;

        specialinvoke $r5.<java.util.HashMap: void <init>()>();

     label2:
        $r6 = staticinvoke <org.apache.lucene.analysis.pt.RSLPStemmerBase: java.lang.String readLine(java.io.LineNumberReader)>($r3);

        if $r6 == null goto label3;

        $r7 = staticinvoke <org.apache.lucene.analysis.pt.RSLPStemmerBase: org.apache.lucene.analysis.pt.RSLPStemmerBase$Step parseStep(java.io.LineNumberReader,java.lang.String)>($r3, $r6);

        $r8 = $r7.<org.apache.lucene.analysis.pt.RSLPStemmerBase$Step: java.lang.String name>;

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r8, $r7);

        goto label2;

     label3:
        virtualinvoke $r3.<java.io.LineNumberReader: void close()>();

     label4:
        return $r5;

     label5:
        $r9 := @caughtexception;

        $r10 = new java.lang.RuntimeException;

        specialinvoke $r10.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r9);

        throw $r10;

        catch java.io.IOException from label1 to label4 with label5;
    }

    private static org.apache.lucene.analysis.pt.RSLPStemmerBase$Step parseStep(java.io.LineNumberReader, java.lang.String) throws java.io.IOException
    {
        java.lang.String[] $r7;
        org.apache.lucene.analysis.pt.RSLPStemmerBase$Rule[] $r9;
        org.apache.lucene.analysis.pt.RSLPStemmerBase$Step $r10;
        java.lang.AssertionError $r11;
        java.util.regex.Matcher $r2;
        int $i0, $i1, $i2, $i3;
        java.lang.String r0, $r3, $r4, $r5, $r6, $r16;
        boolean $z0, $z1;
        java.io.LineNumberReader r8;
        java.lang.RuntimeException $r12;
        java.lang.StringBuilder $r13, $r14, $r15;
        java.util.regex.Pattern $r1;

        r8 := @parameter0: java.io.LineNumberReader;

        r0 := @parameter1: java.lang.String;

        $r1 = <org.apache.lucene.analysis.pt.RSLPStemmerBase: java.util.regex.Pattern headerPattern>;

        $r2 = virtualinvoke $r1.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r0);

        $z0 = virtualinvoke $r2.<java.util.regex.Matcher: boolean find()>();

        if $z0 != 0 goto label1;

        $r12 = new java.lang.RuntimeException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal Step header specified at line ");

        $i3 = virtualinvoke r8.<java.io.LineNumberReader: int getLineNumber()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.lang.RuntimeException: void <init>(java.lang.String)>($r16);

        throw $r12;

     label1:
        $z1 = <org.apache.lucene.analysis.pt.RSLPStemmerBase: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        $i2 = virtualinvoke $r2.<java.util.regex.Matcher: int groupCount()>();

        if $i2 == 4 goto label2;

        $r11 = new java.lang.AssertionError;

        specialinvoke $r11.<java.lang.AssertionError: void <init>()>();

        throw $r11;

     label2:
        $r3 = virtualinvoke $r2.<java.util.regex.Matcher: java.lang.String group(int)>(1);

        $r4 = virtualinvoke $r2.<java.util.regex.Matcher: java.lang.String group(int)>(2);

        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r4);

        $r5 = virtualinvoke $r2.<java.util.regex.Matcher: java.lang.String group(int)>(3);

        $i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r5);

        $r6 = virtualinvoke $r2.<java.util.regex.Matcher: java.lang.String group(int)>(4);

        $r7 = staticinvoke <org.apache.lucene.analysis.pt.RSLPStemmerBase: java.lang.String[] parseList(java.lang.String)>($r6);

        $r9 = staticinvoke <org.apache.lucene.analysis.pt.RSLPStemmerBase: org.apache.lucene.analysis.pt.RSLPStemmerBase$Rule[] parseRules(java.io.LineNumberReader,int)>(r8, $i1);

        $r10 = new org.apache.lucene.analysis.pt.RSLPStemmerBase$Step;

        specialinvoke $r10.<org.apache.lucene.analysis.pt.RSLPStemmerBase$Step: void <init>(java.lang.String,org.apache.lucene.analysis.pt.RSLPStemmerBase$Rule[],int,java.lang.String[])>($r3, $r9, $i0, $r7);

        return $r10;
    }

    private static org.apache.lucene.analysis.pt.RSLPStemmerBase$Rule[] parseRules(java.io.LineNumberReader, int) throws java.io.IOException
    {
        org.apache.lucene.analysis.pt.RSLPStemmerBase$Rule[] $r20, $r22;
        java.util.regex.Matcher $r4, $r6, $r8;
        boolean $z0, $z1, $z2, $z3;
        java.io.LineNumberReader r1;
        java.lang.StringBuilder $r10, $r11, $r12;
        java.util.regex.Pattern $r3, $r5, $r7;
        org.apache.lucene.analysis.pt.RSLPStemmerBase$Rule $r29, $r33;
        java.lang.Object[] $r21;
        java.lang.String[] $r19, $r28;
        java.util.ArrayList $r0;
        org.apache.lucene.analysis.pt.RSLPStemmerBase$RuleWithSetExceptions $r14;
        int $i0, i1, $i2, $i3, $i4, $i5, $i6;
        java.lang.String $r2, $r13, $r15, $r16, $r17, $r18, $r24, $r25, $r26, $r27, $r30, $r31, $r32, $r34, $r35;
        org.apache.lucene.analysis.pt.RSLPStemmerBase$RuleWithSuffixExceptions $r23;
        java.lang.RuntimeException $r9;

        r1 := @parameter0: java.io.LineNumberReader;

        i1 := @parameter1: int;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

     label1:
        $r2 = staticinvoke <org.apache.lucene.analysis.pt.RSLPStemmerBase: java.lang.String readLine(java.io.LineNumberReader)>(r1);

        if $r2 == null goto label8;

        $r3 = <org.apache.lucene.analysis.pt.RSLPStemmerBase: java.util.regex.Pattern stripPattern>;

        $r4 = virtualinvoke $r3.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r2);

        $z0 = virtualinvoke $r4.<java.util.regex.Matcher: boolean matches()>();

        if $z0 == 0 goto label2;

        $r33 = new org.apache.lucene.analysis.pt.RSLPStemmerBase$Rule;

        $r34 = virtualinvoke $r4.<java.util.regex.Matcher: java.lang.String group(int)>(1);

        $r35 = virtualinvoke $r4.<java.util.regex.Matcher: java.lang.String group(int)>(2);

        $i6 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r35);

        specialinvoke $r33.<org.apache.lucene.analysis.pt.RSLPStemmerBase$Rule: void <init>(java.lang.String,int,java.lang.String)>($r34, $i6, "");

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r33);

        goto label6;

     label2:
        $r5 = <org.apache.lucene.analysis.pt.RSLPStemmerBase: java.util.regex.Pattern repPattern>;

        $r6 = virtualinvoke $r5.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r2);

        $z1 = virtualinvoke $r6.<java.util.regex.Matcher: boolean matches()>();

        if $z1 == 0 goto label3;

        $r29 = new org.apache.lucene.analysis.pt.RSLPStemmerBase$Rule;

        $r30 = virtualinvoke $r6.<java.util.regex.Matcher: java.lang.String group(int)>(1);

        $r31 = virtualinvoke $r6.<java.util.regex.Matcher: java.lang.String group(int)>(2);

        $i5 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r31);

        $r32 = virtualinvoke $r6.<java.util.regex.Matcher: java.lang.String group(int)>(3);

        specialinvoke $r29.<org.apache.lucene.analysis.pt.RSLPStemmerBase$Rule: void <init>(java.lang.String,int,java.lang.String)>($r30, $i5, $r32);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r29);

        goto label6;

     label3:
        $r7 = <org.apache.lucene.analysis.pt.RSLPStemmerBase: java.util.regex.Pattern excPattern>;

        $r8 = virtualinvoke $r7.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r2);

        $z2 = virtualinvoke $r8.<java.util.regex.Matcher: boolean matches()>();

        if $z2 == 0 goto label5;

        if i1 != 0 goto label4;

        $r23 = new org.apache.lucene.analysis.pt.RSLPStemmerBase$RuleWithSuffixExceptions;

        $r24 = virtualinvoke $r8.<java.util.regex.Matcher: java.lang.String group(int)>(1);

        $r25 = virtualinvoke $r8.<java.util.regex.Matcher: java.lang.String group(int)>(2);

        $i4 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r25);

        $r26 = virtualinvoke $r8.<java.util.regex.Matcher: java.lang.String group(int)>(3);

        $r27 = virtualinvoke $r8.<java.util.regex.Matcher: java.lang.String group(int)>(4);

        $r28 = staticinvoke <org.apache.lucene.analysis.pt.RSLPStemmerBase: java.lang.String[] parseList(java.lang.String)>($r27);

        specialinvoke $r23.<org.apache.lucene.analysis.pt.RSLPStemmerBase$RuleWithSuffixExceptions: void <init>(java.lang.String,int,java.lang.String,java.lang.String[])>($r24, $i4, $r26, $r28);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r23);

        goto label6;

     label4:
        $r14 = new org.apache.lucene.analysis.pt.RSLPStemmerBase$RuleWithSetExceptions;

        $r15 = virtualinvoke $r8.<java.util.regex.Matcher: java.lang.String group(int)>(1);

        $r16 = virtualinvoke $r8.<java.util.regex.Matcher: java.lang.String group(int)>(2);

        $i2 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r16);

        $r17 = virtualinvoke $r8.<java.util.regex.Matcher: java.lang.String group(int)>(3);

        $r18 = virtualinvoke $r8.<java.util.regex.Matcher: java.lang.String group(int)>(4);

        $r19 = staticinvoke <org.apache.lucene.analysis.pt.RSLPStemmerBase: java.lang.String[] parseList(java.lang.String)>($r18);

        specialinvoke $r14.<org.apache.lucene.analysis.pt.RSLPStemmerBase$RuleWithSetExceptions: void <init>(java.lang.String,int,java.lang.String,java.lang.String[])>($r15, $i2, $r17, $r19);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r14);

        goto label6;

     label5:
        $r9 = new java.lang.RuntimeException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal Step rule specified at line ");

        $i0 = virtualinvoke r1.<java.io.LineNumberReader: int getLineNumber()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.RuntimeException: void <init>(java.lang.String)>($r13);

        throw $r9;

     label6:
        $z3 = virtualinvoke $r2.<java.lang.String: boolean endsWith(java.lang.String)>(";");

        if $z3 == 0 goto label7;

        $i3 = interfaceinvoke $r0.<java.util.List: int size()>();

        $r20 = newarray (org.apache.lucene.analysis.pt.RSLPStemmerBase$Rule)[$i3];

        $r21 = interfaceinvoke $r0.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r20);

        $r22 = (org.apache.lucene.analysis.pt.RSLPStemmerBase$Rule[]) $r21;

        return $r22;

     label7:
        goto label1;

     label8:
        return null;
    }

    private static java.lang.String[] parseList(java.lang.String)
    {
        java.lang.String[] $r1;
        int $i0, $i1, i2;
        java.lang.String r0, $r2, $r3, $r4;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 != 0 goto label1;

        return null;

     label1:
        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String[] split(java.lang.String)>(",");

        i2 = 0;

     label2:
        $i1 = lengthof $r1;

        if i2 >= $i1 goto label3;

        $r2 = $r1[i2];

        $r3 = virtualinvoke $r2.<java.lang.String: java.lang.String trim()>();

        $r4 = staticinvoke <org.apache.lucene.analysis.pt.RSLPStemmerBase: java.lang.String parseString(java.lang.String)>($r3);

        $r1[i2] = $r4;

        i2 = i2 + 1;

        goto label2;

     label3:
        return $r1;
    }

    private static java.lang.String parseString(java.lang.String)
    {
        int $i0, $i1;
        java.lang.String r0, $r1;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        $i1 = $i0 - 1;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(1, $i1);

        return $r1;
    }

    private static java.lang.String readLine(java.io.LineNumberReader) throws java.io.IOException
    {
        int $i0, $i2;
        java.io.LineNumberReader r0;
        char $c1;
        java.lang.String $r1, $r2;

        r0 := @parameter0: java.io.LineNumberReader;

     label1:
        $r2 = virtualinvoke r0.<java.io.LineNumberReader: java.lang.String readLine()>();

        if $r2 == null goto label2;

        $r1 = virtualinvoke $r2.<java.lang.String: java.lang.String trim()>();

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i0 <= 0 goto label1;

        $c1 = virtualinvoke $r1.<java.lang.String: char charAt(int)>(0);

        $i2 = (int) $c1;

        if $i2 == 35 goto label1;

        return $r1;

     label2:
        return $r2;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        java.util.regex.Pattern $r1, $r2, $r3, $r4;
        boolean $z0, $z1;

        $r0 = class "Lorg/apache/lucene/analysis/pt/RSLPStemmerBase;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.lucene.analysis.pt.RSLPStemmerBase: boolean $assertionsDisabled> = $z1;

        $r1 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("^\\{\\s*\"([^\"]*)\",\\s*([0-9]+),\\s*(0|1),\\s*\\{(.*)\\},\\s*$");

        <org.apache.lucene.analysis.pt.RSLPStemmerBase: java.util.regex.Pattern headerPattern> = $r1;

        $r2 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("^\\{\\s*\"([^\"]*)\",\\s*([0-9]+)\\s*\\}\\s*(,|(\\}\\s*;))$");

        <org.apache.lucene.analysis.pt.RSLPStemmerBase: java.util.regex.Pattern stripPattern> = $r2;

        $r3 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("^\\{\\s*\"([^\"]*)\",\\s*([0-9]+),\\s*\"([^\"]*)\"\\}\\s*(,|(\\}\\s*;))$");

        <org.apache.lucene.analysis.pt.RSLPStemmerBase: java.util.regex.Pattern repPattern> = $r3;

        $r4 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("^\\{\\s*\"([^\"]*)\",\\s*([0-9]+),\\s*\"([^\"]*)\",\\s*\\{(.*)\\}\\s*\\}\\s*(,|(\\}\\s*;))$");

        <org.apache.lucene.analysis.pt.RSLPStemmerBase: java.util.regex.Pattern excPattern> = $r4;

        return;
    }
}
