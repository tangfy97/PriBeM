public abstract class org.waveprotocol.wave.model.operation.wave.BlipOperation extends java.lang.Object implements org.waveprotocol.wave.model.operation.ReversibleOperation, org.waveprotocol.wave.model.operation.Visitable
{
    protected final org.waveprotocol.wave.model.operation.wave.WaveletOperationContext context;
    private final boolean isWorthyOfAttribution;

    protected void <init>(org.waveprotocol.wave.model.operation.wave.WaveletOperationContext)
    {
        org.waveprotocol.wave.model.operation.wave.BlipOperation r0;
        org.waveprotocol.wave.model.operation.wave.WaveletOperationContext r1;

        r0 := @this: org.waveprotocol.wave.model.operation.wave.BlipOperation;

        r1 := @parameter0: org.waveprotocol.wave.model.operation.wave.WaveletOperationContext;

        specialinvoke r0.<org.waveprotocol.wave.model.operation.wave.BlipOperation: void <init>(org.waveprotocol.wave.model.operation.wave.WaveletOperationContext,boolean)>(r1, 1);

        return;
    }

    protected void <init>(org.waveprotocol.wave.model.operation.wave.WaveletOperationContext, boolean)
    {
        org.waveprotocol.wave.model.operation.wave.BlipOperation r0;
        org.waveprotocol.wave.model.operation.wave.WaveletOperationContext r1;
        boolean z0;

        r0 := @this: org.waveprotocol.wave.model.operation.wave.BlipOperation;

        r1 := @parameter0: org.waveprotocol.wave.model.operation.wave.WaveletOperationContext;

        z0 := @parameter1: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.waveprotocol.wave.model.operation.wave.BlipOperation: org.waveprotocol.wave.model.operation.wave.WaveletOperationContext context> = r1;

        r0.<org.waveprotocol.wave.model.operation.wave.BlipOperation: boolean isWorthyOfAttribution> = z0;

        return;
    }

    public org.waveprotocol.wave.model.operation.wave.WaveletOperationContext getContext()
    {
        org.waveprotocol.wave.model.operation.wave.BlipOperation r0;
        org.waveprotocol.wave.model.operation.wave.WaveletOperationContext $r1;

        r0 := @this: org.waveprotocol.wave.model.operation.wave.BlipOperation;

        $r1 = r0.<org.waveprotocol.wave.model.operation.wave.BlipOperation: org.waveprotocol.wave.model.operation.wave.WaveletOperationContext context>;

        return $r1;
    }

    public final void apply(org.waveprotocol.wave.model.wave.data.BlipData) throws org.waveprotocol.wave.model.operation.OperationException
    {
        org.waveprotocol.wave.model.operation.wave.BlipOperation r0;
        org.waveprotocol.wave.model.wave.data.BlipData r1;

        r0 := @this: org.waveprotocol.wave.model.operation.wave.BlipOperation;

        r1 := @parameter0: org.waveprotocol.wave.model.wave.data.BlipData;

        virtualinvoke r0.<org.waveprotocol.wave.model.operation.wave.BlipOperation: void doApply(org.waveprotocol.wave.model.wave.data.BlipData)>(r1);

        virtualinvoke r0.<org.waveprotocol.wave.model.operation.wave.BlipOperation: void doUpdate(org.waveprotocol.wave.model.wave.data.BlipData)>(r1);

        return;
    }

    protected abstract void doApply(org.waveprotocol.wave.model.wave.data.BlipData) throws org.waveprotocol.wave.model.operation.OperationException;

    protected abstract void doUpdate(org.waveprotocol.wave.model.wave.data.BlipData);

    protected abstract boolean updatesBlipMetadata(java.lang.String);

    protected final org.waveprotocol.wave.model.operation.wave.WaveletOperationContext createReverseContext(org.waveprotocol.wave.model.wave.data.BlipData, long)
    {
        org.waveprotocol.wave.model.wave.data.BlipData r4;
        long $l0, l1, $l2;
        org.waveprotocol.wave.model.operation.wave.WaveletOperationContext $r0, $r2;
        org.waveprotocol.wave.model.wave.ParticipantId $r3;
        org.waveprotocol.wave.model.operation.wave.BlipOperation r1;

        r1 := @this: org.waveprotocol.wave.model.operation.wave.BlipOperation;

        r4 := @parameter0: org.waveprotocol.wave.model.wave.data.BlipData;

        l1 := @parameter1: long;

        $r0 = new org.waveprotocol.wave.model.operation.wave.WaveletOperationContext;

        $r2 = r1.<org.waveprotocol.wave.model.operation.wave.BlipOperation: org.waveprotocol.wave.model.operation.wave.WaveletOperationContext context>;

        $r3 = virtualinvoke $r2.<org.waveprotocol.wave.model.operation.wave.WaveletOperationContext: org.waveprotocol.wave.model.wave.ParticipantId getCreator()>();

        $l0 = interfaceinvoke r4.<org.waveprotocol.wave.model.wave.data.BlipData: long getLastModifiedTime()>();

        $l2 = neg l1;

        specialinvoke $r0.<org.waveprotocol.wave.model.operation.wave.WaveletOperationContext: void <init>(org.waveprotocol.wave.model.wave.ParticipantId,long,long)>($r3, $l0, $l2);

        return $r0;
    }

    protected final org.waveprotocol.wave.model.operation.wave.WaveletOperationContext createReverseContext(org.waveprotocol.wave.model.wave.data.BlipData)
    {
        org.waveprotocol.wave.model.wave.data.BlipData r1;
        org.waveprotocol.wave.model.operation.wave.BlipOperation r0;
        long $l0;
        org.waveprotocol.wave.model.operation.wave.WaveletOperationContext $r2, $r3;

        r0 := @this: org.waveprotocol.wave.model.operation.wave.BlipOperation;

        r1 := @parameter0: org.waveprotocol.wave.model.wave.data.BlipData;

        $r2 = r0.<org.waveprotocol.wave.model.operation.wave.BlipOperation: org.waveprotocol.wave.model.operation.wave.WaveletOperationContext context>;

        $l0 = virtualinvoke $r2.<org.waveprotocol.wave.model.operation.wave.WaveletOperationContext: long getVersionIncrement()>();

        $r3 = virtualinvoke r0.<org.waveprotocol.wave.model.operation.wave.BlipOperation: org.waveprotocol.wave.model.operation.wave.WaveletOperationContext createReverseContext(org.waveprotocol.wave.model.wave.data.BlipData,long)>(r1, $l0);

        return $r3;
    }

    public boolean isWorthyOfAttribution(java.lang.String)
    {
        org.waveprotocol.wave.model.operation.wave.BlipOperation r0;
        java.lang.String r1;
        boolean $z0, $z1, $z2;

        r0 := @this: org.waveprotocol.wave.model.operation.wave.BlipOperation;

        r1 := @parameter0: java.lang.String;

        $z0 = r0.<org.waveprotocol.wave.model.operation.wave.BlipOperation: boolean isWorthyOfAttribution>;

        if $z0 == 0 goto label1;

        $z1 = staticinvoke <org.waveprotocol.wave.model.operation.wave.WorthyChangeChecker: boolean isBlipIdWorthy(java.lang.String)>(r1);

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    protected final org.waveprotocol.wave.model.operation.wave.BlipOperation$UpdateContributorMethod update(org.waveprotocol.wave.model.wave.data.BlipData, org.waveprotocol.wave.model.operation.wave.BlipOperation$UpdateContributorMethod)
    {
        org.waveprotocol.wave.model.wave.data.BlipData r1;
        long $l2, $l3, $l4, $l5;
        org.waveprotocol.wave.model.wave.ParticipantId $r7, $r10, $r13, $r15;
        int[] $r4;
        org.waveprotocol.wave.model.operation.wave.BlipOperation$UpdateContributorMethod r3, $r16, r17;
        int $i0, $i1;
        org.waveprotocol.wave.model.operation.wave.BlipOperation r0;
        java.lang.String $r2;
        org.waveprotocol.wave.model.wave.data.WaveletData $r18;
        boolean $z0, $z1, $z2, $z3;
        java.util.Set $r5, $r11;
        org.waveprotocol.wave.model.operation.wave.WaveletOperationContext $r6, $r8, $r9, $r12, $r14, $r19, $r20;

        r0 := @this: org.waveprotocol.wave.model.operation.wave.BlipOperation;

        r1 := @parameter0: org.waveprotocol.wave.model.wave.data.BlipData;

        r3 := @parameter1: org.waveprotocol.wave.model.operation.wave.BlipOperation$UpdateContributorMethod;

        $r2 = interfaceinvoke r1.<org.waveprotocol.wave.model.wave.data.BlipData: java.lang.String getId()>();

        $z0 = virtualinvoke r0.<org.waveprotocol.wave.model.operation.wave.BlipOperation: boolean updatesBlipMetadata(java.lang.String)>($r2);

        if $z0 != 0 goto label1;

        $r16 = <org.waveprotocol.wave.model.operation.wave.BlipOperation$UpdateContributorMethod: org.waveprotocol.wave.model.operation.wave.BlipOperation$UpdateContributorMethod NONE>;

        return $r16;

     label1:
        $r4 = <org.waveprotocol.wave.model.operation.wave.BlipOperation$1: int[] $SwitchMap$org$waveprotocol$wave$model$operation$wave$BlipOperation$UpdateContributorMethod>;

        $i0 = virtualinvoke r3.<org.waveprotocol.wave.model.operation.wave.BlipOperation$UpdateContributorMethod: int ordinal()>();

        $i1 = $r4[$i0];

        tableswitch($i1)
        {
            case 1: goto label2;
            case 2: goto label4;
            case 3: goto label6;
            default: goto label6;
        };

     label2:
        $r11 = interfaceinvoke r1.<org.waveprotocol.wave.model.wave.data.BlipData: java.util.Set getContributors()>();

        $r12 = r0.<org.waveprotocol.wave.model.operation.wave.BlipOperation: org.waveprotocol.wave.model.operation.wave.WaveletOperationContext context>;

        $r13 = virtualinvoke $r12.<org.waveprotocol.wave.model.operation.wave.WaveletOperationContext: org.waveprotocol.wave.model.wave.ParticipantId getCreator()>();

        $z2 = interfaceinvoke $r11.<java.util.Set: boolean contains(java.lang.Object)>($r13);

        if $z2 != 0 goto label3;

        $r14 = r0.<org.waveprotocol.wave.model.operation.wave.BlipOperation: org.waveprotocol.wave.model.operation.wave.WaveletOperationContext context>;

        $r15 = virtualinvoke $r14.<org.waveprotocol.wave.model.operation.wave.WaveletOperationContext: org.waveprotocol.wave.model.wave.ParticipantId getCreator()>();

        interfaceinvoke r1.<org.waveprotocol.wave.model.wave.data.BlipData: void addContributor(org.waveprotocol.wave.model.wave.ParticipantId)>($r15);

        r17 = <org.waveprotocol.wave.model.operation.wave.BlipOperation$UpdateContributorMethod: org.waveprotocol.wave.model.operation.wave.BlipOperation$UpdateContributorMethod REMOVE>;

        goto label7;

     label3:
        r17 = <org.waveprotocol.wave.model.operation.wave.BlipOperation$UpdateContributorMethod: org.waveprotocol.wave.model.operation.wave.BlipOperation$UpdateContributorMethod NONE>;

        goto label7;

     label4:
        $r5 = interfaceinvoke r1.<org.waveprotocol.wave.model.wave.data.BlipData: java.util.Set getContributors()>();

        $r6 = r0.<org.waveprotocol.wave.model.operation.wave.BlipOperation: org.waveprotocol.wave.model.operation.wave.WaveletOperationContext context>;

        $r7 = virtualinvoke $r6.<org.waveprotocol.wave.model.operation.wave.WaveletOperationContext: org.waveprotocol.wave.model.wave.ParticipantId getCreator()>();

        $z1 = interfaceinvoke $r5.<java.util.Set: boolean contains(java.lang.Object)>($r7);

        if $z1 == 0 goto label5;

        $r9 = r0.<org.waveprotocol.wave.model.operation.wave.BlipOperation: org.waveprotocol.wave.model.operation.wave.WaveletOperationContext context>;

        $r10 = virtualinvoke $r9.<org.waveprotocol.wave.model.operation.wave.WaveletOperationContext: org.waveprotocol.wave.model.wave.ParticipantId getCreator()>();

        interfaceinvoke r1.<org.waveprotocol.wave.model.wave.data.BlipData: void removeContributor(org.waveprotocol.wave.model.wave.ParticipantId)>($r10);

        r17 = <org.waveprotocol.wave.model.operation.wave.BlipOperation$UpdateContributorMethod: org.waveprotocol.wave.model.operation.wave.BlipOperation$UpdateContributorMethod ADD>;

        goto label7;

     label5:
        r17 = <org.waveprotocol.wave.model.operation.wave.BlipOperation$UpdateContributorMethod: org.waveprotocol.wave.model.operation.wave.BlipOperation$UpdateContributorMethod NONE>;

        goto label7;

     label6:
        r17 = <org.waveprotocol.wave.model.operation.wave.BlipOperation$UpdateContributorMethod: org.waveprotocol.wave.model.operation.wave.BlipOperation$UpdateContributorMethod NONE>;

     label7:
        $r18 = interfaceinvoke r1.<org.waveprotocol.wave.model.wave.data.BlipData: org.waveprotocol.wave.model.wave.data.WaveletData getWavelet()>();

        $l3 = interfaceinvoke $r18.<org.waveprotocol.wave.model.wave.data.WaveletData: long getVersion()>();

        $r19 = r0.<org.waveprotocol.wave.model.operation.wave.BlipOperation: org.waveprotocol.wave.model.operation.wave.WaveletOperationContext context>;

        $l4 = virtualinvoke $r19.<org.waveprotocol.wave.model.operation.wave.WaveletOperationContext: long getVersionIncrement()>();

        $l5 = $l3 + $l4;

        interfaceinvoke r1.<org.waveprotocol.wave.model.wave.data.BlipData: long setLastModifiedVersion(long)>($l5);

        $r20 = r0.<org.waveprotocol.wave.model.operation.wave.BlipOperation: org.waveprotocol.wave.model.operation.wave.WaveletOperationContext context>;

        $z3 = virtualinvoke $r20.<org.waveprotocol.wave.model.operation.wave.WaveletOperationContext: boolean hasTimestamp()>();

        if $z3 == 0 goto label8;

        $r8 = r0.<org.waveprotocol.wave.model.operation.wave.BlipOperation: org.waveprotocol.wave.model.operation.wave.WaveletOperationContext context>;

        $l2 = virtualinvoke $r8.<org.waveprotocol.wave.model.operation.wave.WaveletOperationContext: long getTimestamp()>();

        interfaceinvoke r1.<org.waveprotocol.wave.model.wave.data.BlipData: long setLastModifiedTime(long)>($l2);

     label8:
        return r17;
    }

    public volatile void apply(java.lang.Object) throws org.waveprotocol.wave.model.operation.OperationException
    {
        org.waveprotocol.wave.model.operation.wave.BlipOperation r0;
        java.lang.Object r1;
        org.waveprotocol.wave.model.wave.data.BlipData $r2;

        r0 := @this: org.waveprotocol.wave.model.operation.wave.BlipOperation;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.waveprotocol.wave.model.wave.data.BlipData) r1;

        virtualinvoke r0.<org.waveprotocol.wave.model.operation.wave.BlipOperation: void apply(org.waveprotocol.wave.model.wave.data.BlipData)>($r2);

        return;
    }
}
