public class org.bouncycastle.jce.provider.asymmetric.ec.KeyAgreement extends javax.crypto.KeyAgreementSpi
{
    private static final org.bouncycastle.asn1.x9.X9IntegerConverter converter;
    private static final java.util.Hashtable algorithms;
    private java.lang.String kaAlgorithm;
    private java.math.BigInteger result;
    private org.bouncycastle.crypto.params.ECDomainParameters parameters;
    private org.bouncycastle.crypto.BasicAgreement agreement;
    private org.bouncycastle.crypto.DerivationFunction kdf;

    private byte[] bigIntToBytes(java.math.BigInteger)
    {
        byte[] $r7;
        org.bouncycastle.math.ec.ECFieldElement $r6;
        org.bouncycastle.asn1.x9.X9IntegerConverter $r3, $r4;
        org.bouncycastle.math.ec.ECPoint $r5;
        org.bouncycastle.crypto.params.ECDomainParameters $r2;
        org.bouncycastle.jce.provider.asymmetric.ec.KeyAgreement r1;
        int $i0;
        java.math.BigInteger r0;

        r1 := @this: org.bouncycastle.jce.provider.asymmetric.ec.KeyAgreement;

        r0 := @parameter0: java.math.BigInteger;

        $r3 = <org.bouncycastle.jce.provider.asymmetric.ec.KeyAgreement: org.bouncycastle.asn1.x9.X9IntegerConverter converter>;

        $r4 = <org.bouncycastle.jce.provider.asymmetric.ec.KeyAgreement: org.bouncycastle.asn1.x9.X9IntegerConverter converter>;

        $r2 = r1.<org.bouncycastle.jce.provider.asymmetric.ec.KeyAgreement: org.bouncycastle.crypto.params.ECDomainParameters parameters>;

        $r5 = virtualinvoke $r2.<org.bouncycastle.crypto.params.ECDomainParameters: org.bouncycastle.math.ec.ECPoint getG()>();

        $r6 = virtualinvoke $r5.<org.bouncycastle.math.ec.ECPoint: org.bouncycastle.math.ec.ECFieldElement getX()>();

        $i0 = virtualinvoke $r4.<org.bouncycastle.asn1.x9.X9IntegerConverter: int getByteLength(org.bouncycastle.math.ec.ECFieldElement)>($r6);

        $r7 = virtualinvoke $r3.<org.bouncycastle.asn1.x9.X9IntegerConverter: byte[] integerToBytes(java.math.BigInteger,int)>(r0, $i0);

        return $r7;
    }

    protected void <init>(java.lang.String, org.bouncycastle.crypto.BasicAgreement, org.bouncycastle.crypto.DerivationFunction)
    {
        org.bouncycastle.crypto.DerivationFunction r3;
        org.bouncycastle.crypto.BasicAgreement r2;
        org.bouncycastle.jce.provider.asymmetric.ec.KeyAgreement r0;
        java.lang.String r1;

        r0 := @this: org.bouncycastle.jce.provider.asymmetric.ec.KeyAgreement;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.bouncycastle.crypto.BasicAgreement;

        r3 := @parameter2: org.bouncycastle.crypto.DerivationFunction;

        specialinvoke r0.<javax.crypto.KeyAgreementSpi: void <init>()>();

        r0.<org.bouncycastle.jce.provider.asymmetric.ec.KeyAgreement: java.lang.String kaAlgorithm> = r1;

        r0.<org.bouncycastle.jce.provider.asymmetric.ec.KeyAgreement: org.bouncycastle.crypto.BasicAgreement agreement> = r2;

        r0.<org.bouncycastle.jce.provider.asymmetric.ec.KeyAgreement: org.bouncycastle.crypto.DerivationFunction kdf> = r3;

        return;
    }

    protected java.security.Key engineDoPhase(java.security.Key, boolean) throws java.security.InvalidKeyException, java.lang.IllegalStateException
    {
        java.lang.IllegalStateException $r33, $r39;
        org.bouncycastle.jce.provider.asymmetric.ec.KeyAgreement r0;
        java.math.BigInteger $r6;
        boolean z0, $z1, $z2, $z3;
        org.bouncycastle.crypto.CipherParameters r45;
        java.security.Key r3;
        java.security.InvalidKeyException $r7, $r24;
        java.lang.StringBuilder $r8, $r10, $r11, $r13, $r14, $r25, $r27, $r28, $r30, $r31, $r34, $r36, $r37, $r40, $r42, $r43;
        org.bouncycastle.crypto.params.ECPublicKeyParameters r19, r22;
        org.bouncycastle.crypto.params.AsymmetricKeyParameter $r18, $r21;
        org.bouncycastle.crypto.params.ECDomainParameters $r1;
        java.lang.String $r9, $r12, $r15, $r26, $r29, $r32, $r35, $r38, $r41, $r44;
        org.bouncycastle.crypto.BasicAgreement $r2, $r5;
        org.bouncycastle.crypto.params.MQVPublicParameters $r23;
        java.security.PublicKey $r4, $r17, $r20;
        org.bouncycastle.jce.interfaces.MQVPublicKey r16;

        r0 := @this: org.bouncycastle.jce.provider.asymmetric.ec.KeyAgreement;

        r3 := @parameter0: java.security.Key;

        z0 := @parameter1: boolean;

        $r1 = r0.<org.bouncycastle.jce.provider.asymmetric.ec.KeyAgreement: org.bouncycastle.crypto.params.ECDomainParameters parameters>;

        if $r1 != null goto label1;

        $r39 = new java.lang.IllegalStateException;

        $r40 = new java.lang.StringBuilder;

        specialinvoke $r40.<java.lang.StringBuilder: void <init>()>();

        $r41 = r0.<org.bouncycastle.jce.provider.asymmetric.ec.KeyAgreement: java.lang.String kaAlgorithm>;

        $r42 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r41);

        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not initialised.");

        $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r39.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r44);

        throw $r39;

     label1:
        if z0 != 0 goto label2;

        $r33 = new java.lang.IllegalStateException;

        $r34 = new java.lang.StringBuilder;

        specialinvoke $r34.<java.lang.StringBuilder: void <init>()>();

        $r35 = r0.<org.bouncycastle.jce.provider.asymmetric.ec.KeyAgreement: java.lang.String kaAlgorithm>;

        $r36 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r35);

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" can only be between two parties.");

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r33.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r38);

        throw $r33;

     label2:
        $r2 = r0.<org.bouncycastle.jce.provider.asymmetric.ec.KeyAgreement: org.bouncycastle.crypto.BasicAgreement agreement>;

        $z1 = $r2 instanceof org.bouncycastle.crypto.agreement.ECMQVBasicAgreement;

        if $z1 == 0 goto label4;

        $z3 = r3 instanceof org.bouncycastle.jce.interfaces.MQVPublicKey;

        if $z3 != 0 goto label3;

        $r24 = new java.security.InvalidKeyException;

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        $r26 = r0.<org.bouncycastle.jce.provider.asymmetric.ec.KeyAgreement: java.lang.String kaAlgorithm>;

        $r27 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r26);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" key agreement requires ");

        $r29 = staticinvoke <org.bouncycastle.jce.provider.asymmetric.ec.KeyAgreement: java.lang.String getSimpleName(java.lang.Class)>(class "Lorg/bouncycastle/jce/interfaces/MQVPublicKey;");

        $r30 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r29);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for doPhase");

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r24.<java.security.InvalidKeyException: void <init>(java.lang.String)>($r32);

        throw $r24;

     label3:
        r16 = (org.bouncycastle.jce.interfaces.MQVPublicKey) r3;

        $r17 = interfaceinvoke r16.<org.bouncycastle.jce.interfaces.MQVPublicKey: java.security.PublicKey getStaticKey()>();

        $r18 = staticinvoke <org.bouncycastle.jce.provider.asymmetric.ec.ECUtil: org.bouncycastle.crypto.params.AsymmetricKeyParameter generatePublicKeyParameter(java.security.PublicKey)>($r17);

        r19 = (org.bouncycastle.crypto.params.ECPublicKeyParameters) $r18;

        $r20 = interfaceinvoke r16.<org.bouncycastle.jce.interfaces.MQVPublicKey: java.security.PublicKey getEphemeralKey()>();

        $r21 = staticinvoke <org.bouncycastle.jce.provider.asymmetric.ec.ECUtil: org.bouncycastle.crypto.params.AsymmetricKeyParameter generatePublicKeyParameter(java.security.PublicKey)>($r20);

        r22 = (org.bouncycastle.crypto.params.ECPublicKeyParameters) $r21;

        $r23 = new org.bouncycastle.crypto.params.MQVPublicParameters;

        specialinvoke $r23.<org.bouncycastle.crypto.params.MQVPublicParameters: void <init>(org.bouncycastle.crypto.params.ECPublicKeyParameters,org.bouncycastle.crypto.params.ECPublicKeyParameters)>(r19, r22);

        r45 = $r23;

        goto label6;

     label4:
        $z2 = r3 instanceof org.bouncycastle.jce.interfaces.ECPublicKey;

        if $z2 != 0 goto label5;

        $r7 = new java.security.InvalidKeyException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = r0.<org.bouncycastle.jce.provider.asymmetric.ec.KeyAgreement: java.lang.String kaAlgorithm>;

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" key agreement requires ");

        $r12 = staticinvoke <org.bouncycastle.jce.provider.asymmetric.ec.KeyAgreement: java.lang.String getSimpleName(java.lang.Class)>(class "Lorg/bouncycastle/jce/interfaces/ECPublicKey;");

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for doPhase");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.security.InvalidKeyException: void <init>(java.lang.String)>($r15);

        throw $r7;

     label5:
        $r4 = (java.security.PublicKey) r3;

        r45 = staticinvoke <org.bouncycastle.jce.provider.asymmetric.ec.ECUtil: org.bouncycastle.crypto.params.AsymmetricKeyParameter generatePublicKeyParameter(java.security.PublicKey)>($r4);

     label6:
        $r5 = r0.<org.bouncycastle.jce.provider.asymmetric.ec.KeyAgreement: org.bouncycastle.crypto.BasicAgreement agreement>;

        $r6 = interfaceinvoke $r5.<org.bouncycastle.crypto.BasicAgreement: java.math.BigInteger calculateAgreement(org.bouncycastle.crypto.CipherParameters)>(r45);

        r0.<org.bouncycastle.jce.provider.asymmetric.ec.KeyAgreement: java.math.BigInteger result> = $r6;

        return null;
    }

    protected byte[] engineGenerateSecret() throws java.lang.IllegalStateException
    {
        org.bouncycastle.crypto.DerivationFunction $r1;
        byte[] $r3;
        java.lang.UnsupportedOperationException $r4;
        org.bouncycastle.jce.provider.asymmetric.ec.KeyAgreement r0;
        java.math.BigInteger $r2;

        r0 := @this: org.bouncycastle.jce.provider.asymmetric.ec.KeyAgreement;

        $r1 = r0.<org.bouncycastle.jce.provider.asymmetric.ec.KeyAgreement: org.bouncycastle.crypto.DerivationFunction kdf>;

        if $r1 == null goto label1;

        $r4 = new java.lang.UnsupportedOperationException;

        specialinvoke $r4.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("KDF can only be used when algorithm is known");

        throw $r4;

     label1:
        $r2 = r0.<org.bouncycastle.jce.provider.asymmetric.ec.KeyAgreement: java.math.BigInteger result>;

        $r3 = specialinvoke r0.<org.bouncycastle.jce.provider.asymmetric.ec.KeyAgreement: byte[] bigIntToBytes(java.math.BigInteger)>($r2);

        return $r3;
    }

    protected int engineGenerateSecret(byte[], int) throws java.lang.IllegalStateException, javax.crypto.ShortBufferException
    {
        byte[] $r1, r2;
        org.bouncycastle.jce.provider.asymmetric.ec.KeyAgreement r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6;
        java.lang.String $r5, $r10;
        javax.crypto.ShortBufferException $r3;
        java.lang.StringBuilder $r4, $r6, $r7, $r8, $r9;

        r0 := @this: org.bouncycastle.jce.provider.asymmetric.ec.KeyAgreement;

        r2 := @parameter0: byte[];

        i0 := @parameter1: int;

        $r1 = virtualinvoke r0.<org.bouncycastle.jce.provider.asymmetric.ec.KeyAgreement: byte[] engineGenerateSecret()>();

        $i1 = lengthof r2;

        $i3 = $i1 - i0;

        $i2 = lengthof $r1;

        if $i3 >= $i2 goto label1;

        $r3 = new javax.crypto.ShortBufferException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = r0.<org.bouncycastle.jce.provider.asymmetric.ec.KeyAgreement: java.lang.String kaAlgorithm>;

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" key agreement: need ");

        $i6 = lengthof $r1;

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bytes");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<javax.crypto.ShortBufferException: void <init>(java.lang.String)>($r10);

        throw $r3;

     label1:
        $i4 = lengthof $r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, r2, i0, $i4);

        $i5 = lengthof $r1;

        return $i5;
    }

    protected javax.crypto.SecretKey engineGenerateSecret(java.lang.String) throws java.security.NoSuchAlgorithmException
    {
        byte[] $r2, r12, r20;
        javax.crypto.spec.SecretKeySpec $r4;
        java.lang.Integer $r9;
        org.bouncycastle.jce.provider.asymmetric.ec.KeyAgreement r0;
        int $i0, $i1, $i2;
        java.math.BigInteger $r1;
        java.lang.String r5, $r19;
        java.util.Hashtable $r6, $r7;
        boolean $z0;
        org.bouncycastle.asn1.DERObjectIdentifier $r11;
        org.bouncycastle.crypto.DerivationFunction $r3, $r13, $r14;
        org.bouncycastle.crypto.agreement.kdf.DHKDFParameters $r10;
        java.security.NoSuchAlgorithmException $r15;
        java.lang.Object $r8;
        java.lang.StringBuilder $r16, $r17, $r18;

        r0 := @this: org.bouncycastle.jce.provider.asymmetric.ec.KeyAgreement;

        r5 := @parameter0: java.lang.String;

        $r1 = r0.<org.bouncycastle.jce.provider.asymmetric.ec.KeyAgreement: java.math.BigInteger result>;

        $r2 = specialinvoke r0.<org.bouncycastle.jce.provider.asymmetric.ec.KeyAgreement: byte[] bigIntToBytes(java.math.BigInteger)>($r1);

        r20 = $r2;

        $r3 = r0.<org.bouncycastle.jce.provider.asymmetric.ec.KeyAgreement: org.bouncycastle.crypto.DerivationFunction kdf>;

        if $r3 == null goto label2;

        $r6 = <org.bouncycastle.jce.provider.asymmetric.ec.KeyAgreement: java.util.Hashtable algorithms>;

        $z0 = virtualinvoke $r6.<java.util.Hashtable: boolean containsKey(java.lang.Object)>(r5);

        if $z0 != 0 goto label1;

        $r15 = new java.security.NoSuchAlgorithmException;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unknown algorithm encountered: ");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r15.<java.security.NoSuchAlgorithmException: void <init>(java.lang.String)>($r19);

        throw $r15;

     label1:
        $r7 = <org.bouncycastle.jce.provider.asymmetric.ec.KeyAgreement: java.util.Hashtable algorithms>;

        $r8 = virtualinvoke $r7.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r5);

        $r9 = (java.lang.Integer) $r8;

        $i0 = virtualinvoke $r9.<java.lang.Integer: int intValue()>();

        $r10 = new org.bouncycastle.crypto.agreement.kdf.DHKDFParameters;

        $r11 = new org.bouncycastle.asn1.DERObjectIdentifier;

        specialinvoke $r11.<org.bouncycastle.asn1.DERObjectIdentifier: void <init>(java.lang.String)>(r5);

        specialinvoke $r10.<org.bouncycastle.crypto.agreement.kdf.DHKDFParameters: void <init>(org.bouncycastle.asn1.DERObjectIdentifier,int,byte[])>($r11, $i0, $r2);

        $i1 = $i0 / 8;

        r12 = newarray (byte)[$i1];

        $r13 = r0.<org.bouncycastle.jce.provider.asymmetric.ec.KeyAgreement: org.bouncycastle.crypto.DerivationFunction kdf>;

        interfaceinvoke $r13.<org.bouncycastle.crypto.DerivationFunction: void init(org.bouncycastle.crypto.DerivationParameters)>($r10);

        $r14 = r0.<org.bouncycastle.jce.provider.asymmetric.ec.KeyAgreement: org.bouncycastle.crypto.DerivationFunction kdf>;

        $i2 = lengthof r12;

        interfaceinvoke $r14.<org.bouncycastle.crypto.DerivationFunction: int generateBytes(byte[],int,int)>(r12, 0, $i2);

        r20 = r12;

     label2:
        $r4 = new javax.crypto.spec.SecretKeySpec;

        specialinvoke $r4.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r20, r5);

        return $r4;
    }

    protected void engineInit(java.security.Key, java.security.spec.AlgorithmParameterSpec, java.security.SecureRandom) throws java.security.InvalidKeyException, java.security.InvalidAlgorithmParameterException
    {
        java.security.Key r1;
        java.security.SecureRandom r3;
        org.bouncycastle.jce.provider.asymmetric.ec.KeyAgreement r0;
        java.security.spec.AlgorithmParameterSpec r2;

        r0 := @this: org.bouncycastle.jce.provider.asymmetric.ec.KeyAgreement;

        r1 := @parameter0: java.security.Key;

        r2 := @parameter1: java.security.spec.AlgorithmParameterSpec;

        r3 := @parameter2: java.security.SecureRandom;

        specialinvoke r0.<org.bouncycastle.jce.provider.asymmetric.ec.KeyAgreement: void initFromKey(java.security.Key)>(r1);

        return;
    }

    protected void engineInit(java.security.Key, java.security.SecureRandom) throws java.security.InvalidKeyException
    {
        java.security.Key r1;
        java.security.SecureRandom r2;
        org.bouncycastle.jce.provider.asymmetric.ec.KeyAgreement r0;

        r0 := @this: org.bouncycastle.jce.provider.asymmetric.ec.KeyAgreement;

        r1 := @parameter0: java.security.Key;

        r2 := @parameter1: java.security.SecureRandom;

        specialinvoke r0.<org.bouncycastle.jce.provider.asymmetric.ec.KeyAgreement: void initFromKey(java.security.Key)>(r1);

        return;
    }

    private void initFromKey(java.security.Key) throws java.security.InvalidKeyException
    {
        org.bouncycastle.jce.provider.asymmetric.ec.KeyAgreement r0;
        boolean $z0, $z1, $z2;
        java.security.Key r2;
        java.security.PrivateKey $r3, $r16, $r19;
        org.bouncycastle.crypto.params.MQVPrivateParameters $r23;
        java.security.InvalidKeyException $r7, $r28;
        java.lang.StringBuilder $r8, $r10, $r11, $r13, $r14, $r29, $r31, $r32, $r34, $r35;
        org.bouncycastle.crypto.params.ECPublicKeyParameters r38;
        org.bouncycastle.crypto.params.AsymmetricKeyParameter $r4, $r17, $r20, $r27;
        org.bouncycastle.crypto.params.ECPrivateKeyParameters r18, r21, r39;
        org.bouncycastle.crypto.params.ECDomainParameters $r5, $r24;
        java.lang.String $r9, $r12, $r15, $r30, $r33, $r36;
        org.bouncycastle.crypto.BasicAgreement $r1, $r6, $r25;
        java.security.PublicKey $r22, $r26;
        org.bouncycastle.jce.interfaces.MQVPrivateKey r37;

        r0 := @this: org.bouncycastle.jce.provider.asymmetric.ec.KeyAgreement;

        r2 := @parameter0: java.security.Key;

        $r1 = r0.<org.bouncycastle.jce.provider.asymmetric.ec.KeyAgreement: org.bouncycastle.crypto.BasicAgreement agreement>;

        $z0 = $r1 instanceof org.bouncycastle.crypto.agreement.ECMQVBasicAgreement;

        if $z0 == 0 goto label3;

        $z2 = r2 instanceof org.bouncycastle.jce.interfaces.MQVPrivateKey;

        if $z2 != 0 goto label1;

        $r28 = new java.security.InvalidKeyException;

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        $r30 = r0.<org.bouncycastle.jce.provider.asymmetric.ec.KeyAgreement: java.lang.String kaAlgorithm>;

        $r31 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r30);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" key agreement requires ");

        $r33 = staticinvoke <org.bouncycastle.jce.provider.asymmetric.ec.KeyAgreement: java.lang.String getSimpleName(java.lang.Class)>(class "Lorg/bouncycastle/jce/interfaces/MQVPrivateKey;");

        $r34 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r33);

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for initialisation");

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r28.<java.security.InvalidKeyException: void <init>(java.lang.String)>($r36);

        throw $r28;

     label1:
        r37 = (org.bouncycastle.jce.interfaces.MQVPrivateKey) r2;

        $r16 = interfaceinvoke r37.<org.bouncycastle.jce.interfaces.MQVPrivateKey: java.security.PrivateKey getStaticPrivateKey()>();

        $r17 = staticinvoke <org.bouncycastle.jce.provider.asymmetric.ec.ECUtil: org.bouncycastle.crypto.params.AsymmetricKeyParameter generatePrivateKeyParameter(java.security.PrivateKey)>($r16);

        r18 = (org.bouncycastle.crypto.params.ECPrivateKeyParameters) $r17;

        $r19 = interfaceinvoke r37.<org.bouncycastle.jce.interfaces.MQVPrivateKey: java.security.PrivateKey getEphemeralPrivateKey()>();

        $r20 = staticinvoke <org.bouncycastle.jce.provider.asymmetric.ec.ECUtil: org.bouncycastle.crypto.params.AsymmetricKeyParameter generatePrivateKeyParameter(java.security.PrivateKey)>($r19);

        r21 = (org.bouncycastle.crypto.params.ECPrivateKeyParameters) $r20;

        r38 = null;

        $r22 = interfaceinvoke r37.<org.bouncycastle.jce.interfaces.MQVPrivateKey: java.security.PublicKey getEphemeralPublicKey()>();

        if $r22 == null goto label2;

        $r26 = interfaceinvoke r37.<org.bouncycastle.jce.interfaces.MQVPrivateKey: java.security.PublicKey getEphemeralPublicKey()>();

        $r27 = staticinvoke <org.bouncycastle.jce.provider.asymmetric.ec.ECUtil: org.bouncycastle.crypto.params.AsymmetricKeyParameter generatePublicKeyParameter(java.security.PublicKey)>($r26);

        r38 = (org.bouncycastle.crypto.params.ECPublicKeyParameters) $r27;

     label2:
        $r23 = new org.bouncycastle.crypto.params.MQVPrivateParameters;

        specialinvoke $r23.<org.bouncycastle.crypto.params.MQVPrivateParameters: void <init>(org.bouncycastle.crypto.params.ECPrivateKeyParameters,org.bouncycastle.crypto.params.ECPrivateKeyParameters,org.bouncycastle.crypto.params.ECPublicKeyParameters)>(r18, r21, r38);

        $r24 = virtualinvoke r18.<org.bouncycastle.crypto.params.ECPrivateKeyParameters: org.bouncycastle.crypto.params.ECDomainParameters getParameters()>();

        r0.<org.bouncycastle.jce.provider.asymmetric.ec.KeyAgreement: org.bouncycastle.crypto.params.ECDomainParameters parameters> = $r24;

        $r25 = r0.<org.bouncycastle.jce.provider.asymmetric.ec.KeyAgreement: org.bouncycastle.crypto.BasicAgreement agreement>;

        interfaceinvoke $r25.<org.bouncycastle.crypto.BasicAgreement: void init(org.bouncycastle.crypto.CipherParameters)>($r23);

        goto label5;

     label3:
        $z1 = r2 instanceof org.bouncycastle.jce.interfaces.ECPrivateKey;

        if $z1 != 0 goto label4;

        $r7 = new java.security.InvalidKeyException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = r0.<org.bouncycastle.jce.provider.asymmetric.ec.KeyAgreement: java.lang.String kaAlgorithm>;

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" key agreement requires ");

        $r12 = staticinvoke <org.bouncycastle.jce.provider.asymmetric.ec.KeyAgreement: java.lang.String getSimpleName(java.lang.Class)>(class "Lorg/bouncycastle/jce/interfaces/ECPrivateKey;");

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for initialisation");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.security.InvalidKeyException: void <init>(java.lang.String)>($r15);

        throw $r7;

     label4:
        $r3 = (java.security.PrivateKey) r2;

        $r4 = staticinvoke <org.bouncycastle.jce.provider.asymmetric.ec.ECUtil: org.bouncycastle.crypto.params.AsymmetricKeyParameter generatePrivateKeyParameter(java.security.PrivateKey)>($r3);

        r39 = (org.bouncycastle.crypto.params.ECPrivateKeyParameters) $r4;

        $r5 = virtualinvoke r39.<org.bouncycastle.crypto.params.ECPrivateKeyParameters: org.bouncycastle.crypto.params.ECDomainParameters getParameters()>();

        r0.<org.bouncycastle.jce.provider.asymmetric.ec.KeyAgreement: org.bouncycastle.crypto.params.ECDomainParameters parameters> = $r5;

        $r6 = r0.<org.bouncycastle.jce.provider.asymmetric.ec.KeyAgreement: org.bouncycastle.crypto.BasicAgreement agreement>;

        interfaceinvoke $r6.<org.bouncycastle.crypto.BasicAgreement: void init(org.bouncycastle.crypto.CipherParameters)>(r39);

     label5:
        return;
    }

    private static java.lang.String getSimpleName(java.lang.Class)
    {
        int $i0, $i1;
        java.lang.Class r0;
        java.lang.String $r1, $r2;

        r0 := @parameter0: java.lang.Class;

        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $i0 = virtualinvoke $r1.<java.lang.String: int lastIndexOf(int)>(46);

        $i1 = $i0 + 1;

        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int)>($i1);

        return $r2;
    }

    static void <clinit>()
    {
        java.lang.Integer $r2, $r3, $r4;
        java.lang.String $r7, $r10, $r13, $r16, $r19, $r22, $r25;
        java.util.Hashtable $r1, $r6, $r9, $r12, $r15, $r18, $r21, $r24;
        org.bouncycastle.asn1.DERObjectIdentifier $r5, $r8, $r11, $r14, $r17, $r20, $r23;
        org.bouncycastle.asn1.x9.X9IntegerConverter $r0;

        $r0 = new org.bouncycastle.asn1.x9.X9IntegerConverter;

        specialinvoke $r0.<org.bouncycastle.asn1.x9.X9IntegerConverter: void <init>()>();

        <org.bouncycastle.jce.provider.asymmetric.ec.KeyAgreement: org.bouncycastle.asn1.x9.X9IntegerConverter converter> = $r0;

        $r1 = new java.util.Hashtable;

        specialinvoke $r1.<java.util.Hashtable: void <init>()>();

        <org.bouncycastle.jce.provider.asymmetric.ec.KeyAgreement: java.util.Hashtable algorithms> = $r1;

        $r2 = new java.lang.Integer;

        specialinvoke $r2.<java.lang.Integer: void <init>(int)>(128);

        $r3 = new java.lang.Integer;

        specialinvoke $r3.<java.lang.Integer: void <init>(int)>(192);

        $r4 = new java.lang.Integer;

        specialinvoke $r4.<java.lang.Integer: void <init>(int)>(256);

        $r6 = <org.bouncycastle.jce.provider.asymmetric.ec.KeyAgreement: java.util.Hashtable algorithms>;

        $r5 = <org.bouncycastle.asn1.nist.NISTObjectIdentifiers: org.bouncycastle.asn1.DERObjectIdentifier id_aes128_CBC>;

        $r7 = virtualinvoke $r5.<org.bouncycastle.asn1.DERObjectIdentifier: java.lang.String getId()>();

        virtualinvoke $r6.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, $r2);

        $r9 = <org.bouncycastle.jce.provider.asymmetric.ec.KeyAgreement: java.util.Hashtable algorithms>;

        $r8 = <org.bouncycastle.asn1.nist.NISTObjectIdentifiers: org.bouncycastle.asn1.DERObjectIdentifier id_aes192_CBC>;

        $r10 = virtualinvoke $r8.<org.bouncycastle.asn1.DERObjectIdentifier: java.lang.String getId()>();

        virtualinvoke $r9.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r10, $r3);

        $r12 = <org.bouncycastle.jce.provider.asymmetric.ec.KeyAgreement: java.util.Hashtable algorithms>;

        $r11 = <org.bouncycastle.asn1.nist.NISTObjectIdentifiers: org.bouncycastle.asn1.DERObjectIdentifier id_aes256_CBC>;

        $r13 = virtualinvoke $r11.<org.bouncycastle.asn1.DERObjectIdentifier: java.lang.String getId()>();

        virtualinvoke $r12.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r13, $r4);

        $r15 = <org.bouncycastle.jce.provider.asymmetric.ec.KeyAgreement: java.util.Hashtable algorithms>;

        $r14 = <org.bouncycastle.asn1.nist.NISTObjectIdentifiers: org.bouncycastle.asn1.DERObjectIdentifier id_aes128_wrap>;

        $r16 = virtualinvoke $r14.<org.bouncycastle.asn1.DERObjectIdentifier: java.lang.String getId()>();

        virtualinvoke $r15.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r16, $r2);

        $r18 = <org.bouncycastle.jce.provider.asymmetric.ec.KeyAgreement: java.util.Hashtable algorithms>;

        $r17 = <org.bouncycastle.asn1.nist.NISTObjectIdentifiers: org.bouncycastle.asn1.DERObjectIdentifier id_aes192_wrap>;

        $r19 = virtualinvoke $r17.<org.bouncycastle.asn1.DERObjectIdentifier: java.lang.String getId()>();

        virtualinvoke $r18.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r19, $r3);

        $r21 = <org.bouncycastle.jce.provider.asymmetric.ec.KeyAgreement: java.util.Hashtable algorithms>;

        $r20 = <org.bouncycastle.asn1.nist.NISTObjectIdentifiers: org.bouncycastle.asn1.DERObjectIdentifier id_aes256_wrap>;

        $r22 = virtualinvoke $r20.<org.bouncycastle.asn1.DERObjectIdentifier: java.lang.String getId()>();

        virtualinvoke $r21.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r22, $r4);

        $r24 = <org.bouncycastle.jce.provider.asymmetric.ec.KeyAgreement: java.util.Hashtable algorithms>;

        $r23 = <org.bouncycastle.asn1.pkcs.PKCSObjectIdentifiers: org.bouncycastle.asn1.DERObjectIdentifier id_alg_CMS3DESwrap>;

        $r25 = virtualinvoke $r23.<org.bouncycastle.asn1.DERObjectIdentifier: java.lang.String getId()>();

        virtualinvoke $r24.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r25, $r3);

        return;
    }
}
