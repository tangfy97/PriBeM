public class com.hp.hpl.jena.assembler.AssemblerHelp extends java.lang.Object
{
    protected static final com.hp.hpl.jena.rdf.model.Property ANY;

    public void <init>()
    {
        com.hp.hpl.jena.assembler.AssemblerHelp r0;

        r0 := @this: com.hp.hpl.jena.assembler.AssemblerHelp;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static com.hp.hpl.jena.rdf.model.Resource withFullModel(com.hp.hpl.jena.rdf.model.Resource)
    {
        com.hp.hpl.jena.rdf.model.Model $r1, $r2;
        com.hp.hpl.jena.rdf.model.Resource r0, $r3;

        r0 := @parameter0: com.hp.hpl.jena.rdf.model.Resource;

        $r1 = interfaceinvoke r0.<com.hp.hpl.jena.rdf.model.Resource: com.hp.hpl.jena.rdf.model.Model getModel()>();

        $r2 = staticinvoke <com.hp.hpl.jena.assembler.AssemblerHelp: com.hp.hpl.jena.rdf.model.Model fullModel(com.hp.hpl.jena.rdf.model.Model)>($r1);

        $r3 = interfaceinvoke r0.<com.hp.hpl.jena.rdf.model.Resource: com.hp.hpl.jena.rdf.model.Resource inModel(com.hp.hpl.jena.rdf.model.Model)>($r2);

        return $r3;
    }

    public static com.hp.hpl.jena.rdf.model.Model fullModel(com.hp.hpl.jena.rdf.model.Model)
    {
        com.hp.hpl.jena.rdf.model.Model r0, $r2;
        com.hp.hpl.jena.assembler.ImportManager $r1;

        r0 := @parameter0: com.hp.hpl.jena.rdf.model.Model;

        $r1 = <com.hp.hpl.jena.assembler.ImportManager: com.hp.hpl.jena.assembler.ImportManager instance>;

        $r2 = staticinvoke <com.hp.hpl.jena.assembler.AssemblerHelp: com.hp.hpl.jena.rdf.model.Model fullModel(com.hp.hpl.jena.assembler.ImportManager,com.hp.hpl.jena.rdf.model.Model)>($r1, r0);

        return $r2;
    }

    public static com.hp.hpl.jena.rdf.model.Model fullModel(com.hp.hpl.jena.assembler.ImportManager, com.hp.hpl.jena.rdf.model.Model)
    {
        com.hp.hpl.jena.rdf.model.Property $r2, $r9;
        boolean $z0;
        com.hp.hpl.jena.rdf.model.Resource $r1, $r3, $r8, $r10;
        com.hp.hpl.jena.rdf.model.Model r0, $r5, $r6, $r7, $r11, $r15;
        com.hp.hpl.jena.assembler.ImportManager r4;
        com.hp.hpl.jena.shared.PrefixMapping $r12, $r13, $r14;

        r4 := @parameter0: com.hp.hpl.jena.assembler.ImportManager;

        r0 := @parameter1: com.hp.hpl.jena.rdf.model.Model;

        $r3 = <com.hp.hpl.jena.assembler.JA: com.hp.hpl.jena.rdf.model.Resource This>;

        $r2 = <com.hp.hpl.jena.vocabulary.RDF: com.hp.hpl.jena.rdf.model.Property type>;

        $r1 = <com.hp.hpl.jena.assembler.JA: com.hp.hpl.jena.rdf.model.Resource Expanded>;

        $z0 = interfaceinvoke r0.<com.hp.hpl.jena.rdf.model.Model: boolean contains(com.hp.hpl.jena.rdf.model.Resource,com.hp.hpl.jena.rdf.model.Property,com.hp.hpl.jena.rdf.model.RDFNode)>($r3, $r2, $r1);

        if $z0 == 0 goto label1;

        $r15 = r0;

        goto label2;

     label1:
        $r5 = virtualinvoke r4.<com.hp.hpl.jena.assembler.ImportManager: com.hp.hpl.jena.rdf.model.Model withImports(com.hp.hpl.jena.rdf.model.Model)>(r0);

        $r6 = staticinvoke <com.hp.hpl.jena.assembler.JA: com.hp.hpl.jena.rdf.model.Model getSchema()>();

        $r7 = staticinvoke <com.hp.hpl.jena.assembler.ModelExpansion: com.hp.hpl.jena.rdf.model.Model withSchema(com.hp.hpl.jena.rdf.model.Model,com.hp.hpl.jena.rdf.model.Model)>($r5, $r6);

        $r10 = <com.hp.hpl.jena.assembler.JA: com.hp.hpl.jena.rdf.model.Resource This>;

        $r9 = <com.hp.hpl.jena.vocabulary.RDF: com.hp.hpl.jena.rdf.model.Property type>;

        $r8 = <com.hp.hpl.jena.assembler.JA: com.hp.hpl.jena.rdf.model.Resource Expanded>;

        $r11 = interfaceinvoke $r7.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.rdf.model.Model add(com.hp.hpl.jena.rdf.model.Resource,com.hp.hpl.jena.rdf.model.Property,com.hp.hpl.jena.rdf.model.RDFNode)>($r10, $r9, $r8);

        $r12 = <com.hp.hpl.jena.shared.PrefixMapping: com.hp.hpl.jena.shared.PrefixMapping Extended>;

        $r13 = interfaceinvoke $r11.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.shared.PrefixMapping setNsPrefixes(com.hp.hpl.jena.shared.PrefixMapping)>($r12);

        $r14 = interfaceinvoke $r13.<com.hp.hpl.jena.shared.PrefixMapping: com.hp.hpl.jena.shared.PrefixMapping setNsPrefixes(com.hp.hpl.jena.shared.PrefixMapping)>(r0);

        $r15 = (com.hp.hpl.jena.rdf.model.Model) $r14;

     label2:
        return $r15;
    }

    public static void loadArbitraryClasses(com.hp.hpl.jena.assembler.assemblers.AssemblerGroup, com.hp.hpl.jena.rdf.model.Model)
    {
        com.hp.hpl.jena.assembler.assemblers.AssemblerGroup r4;
        com.hp.hpl.jena.rdf.model.StmtIterator $r3;
        com.hp.hpl.jena.rdf.model.Property $r1, $r2;
        com.hp.hpl.jena.rdf.model.Model r0;
        com.hp.hpl.jena.rdf.model.Statement $r5;
        boolean $z0;

        r4 := @parameter0: com.hp.hpl.jena.assembler.assemblers.AssemblerGroup;

        r0 := @parameter1: com.hp.hpl.jena.rdf.model.Model;

        $r2 = <com.hp.hpl.jena.assembler.JA: com.hp.hpl.jena.rdf.model.Property loadClass>;

        $r1 = <com.hp.hpl.jena.assembler.AssemblerHelp: com.hp.hpl.jena.rdf.model.Property ANY>;

        $r3 = interfaceinvoke r0.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.rdf.model.StmtIterator listStatements(com.hp.hpl.jena.rdf.model.Resource,com.hp.hpl.jena.rdf.model.Property,com.hp.hpl.jena.rdf.model.RDFNode)>(null, $r2, $r1);

     label1:
        $z0 = interfaceinvoke $r3.<com.hp.hpl.jena.rdf.model.StmtIterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r3.<com.hp.hpl.jena.rdf.model.StmtIterator: com.hp.hpl.jena.rdf.model.Statement nextStatement()>();

        staticinvoke <com.hp.hpl.jena.assembler.AssemblerHelp: java.lang.Class loadArbitraryClass(com.hp.hpl.jena.assembler.assemblers.AssemblerGroup,com.hp.hpl.jena.rdf.model.Statement)>(r4, $r5);

        goto label1;

     label2:
        return;
    }

    public static void loadAssemblerClasses(com.hp.hpl.jena.assembler.assemblers.AssemblerGroup, com.hp.hpl.jena.rdf.model.Model)
    {
        com.hp.hpl.jena.rdf.model.Statement $r6;
        com.hp.hpl.jena.assembler.assemblers.AssemblerGroup r5;
        com.hp.hpl.jena.rdf.model.StmtIterator $r4;
        com.hp.hpl.jena.rdf.model.Property $r1, $r2, $r3;
        com.hp.hpl.jena.rdf.model.Model r0;
        boolean $z0;

        r5 := @parameter0: com.hp.hpl.jena.assembler.assemblers.AssemblerGroup;

        r0 := @parameter1: com.hp.hpl.jena.rdf.model.Model;

        $r3 = <com.hp.hpl.jena.assembler.AssemblerHelp: com.hp.hpl.jena.rdf.model.Property ANY>;

        $r2 = <com.hp.hpl.jena.assembler.JA: com.hp.hpl.jena.rdf.model.Property assembler>;

        $r1 = <com.hp.hpl.jena.assembler.AssemblerHelp: com.hp.hpl.jena.rdf.model.Property ANY>;

        $r4 = interfaceinvoke r0.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.rdf.model.StmtIterator listStatements(com.hp.hpl.jena.rdf.model.Resource,com.hp.hpl.jena.rdf.model.Property,com.hp.hpl.jena.rdf.model.RDFNode)>($r3, $r2, $r1);

     label1:
        $z0 = interfaceinvoke $r4.<com.hp.hpl.jena.rdf.model.StmtIterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke $r4.<com.hp.hpl.jena.rdf.model.StmtIterator: com.hp.hpl.jena.rdf.model.Statement nextStatement()>();

        staticinvoke <com.hp.hpl.jena.assembler.AssemblerHelp: void loadAssemblerClass(com.hp.hpl.jena.assembler.assemblers.AssemblerGroup,com.hp.hpl.jena.rdf.model.Statement)>(r5, $r6);

        goto label1;

     label2:
        return;
    }

    private static void loadAssemblerClass(com.hp.hpl.jena.assembler.assemblers.AssemblerGroup, com.hp.hpl.jena.rdf.model.Statement)
    {
        java.lang.Class $r2;
        com.hp.hpl.jena.assembler.assemblers.AssemblerGroup r0;
        com.hp.hpl.jena.rdf.model.Statement r1;

        r0 := @parameter0: com.hp.hpl.jena.assembler.assemblers.AssemblerGroup;

        r1 := @parameter1: com.hp.hpl.jena.rdf.model.Statement;

        $r2 = staticinvoke <com.hp.hpl.jena.assembler.AssemblerHelp: java.lang.Class loadArbitraryClass(com.hp.hpl.jena.assembler.assemblers.AssemblerGroup,com.hp.hpl.jena.rdf.model.Statement)>(r0, r1);

        staticinvoke <com.hp.hpl.jena.assembler.AssemblerHelp: void runAnyAssemblerConstructor(com.hp.hpl.jena.assembler.assemblers.AssemblerGroup,com.hp.hpl.jena.rdf.model.Statement,java.lang.Class)>(r0, r1, $r2);

        return;
    }

    private static java.lang.Class loadArbitraryClass(com.hp.hpl.jena.assembler.assemblers.AssemblerGroup, com.hp.hpl.jena.rdf.model.Statement)
    {
        java.lang.Object[] $r4;
        com.hp.hpl.jena.shared.JenaException $r7;
        java.lang.NoSuchMethodException $r8;
        java.lang.Class[] $r2;
        com.hp.hpl.jena.rdf.model.Statement r0;
        java.lang.Exception $r6;
        com.hp.hpl.jena.assembler.assemblers.AssemblerGroup r5;
        java.lang.Class $r1;
        java.lang.reflect.Method $r3;

        r5 := @parameter0: com.hp.hpl.jena.assembler.assemblers.AssemblerGroup;

        r0 := @parameter1: com.hp.hpl.jena.rdf.model.Statement;

        $r1 = staticinvoke <com.hp.hpl.jena.assembler.AssemblerHelp: java.lang.Class loadClassNamedBy(com.hp.hpl.jena.rdf.model.Statement)>(r0);

     label1:
        $r2 = newarray (java.lang.Class)[1];

        $r2[0] = class "Lcom/hp/hpl/jena/assembler/assemblers/AssemblerGroup;";

        $r3 = virtualinvoke $r1.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>("whenRequiredByAssembler", $r2);

        $r4 = newarray (java.lang.Object)[1];

        $r4[0] = r5;

        virtualinvoke $r3.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r4);

     label2:
        goto label5;

     label3:
        $r8 := @caughtexception;

        goto label5;

     label4:
        $r6 := @caughtexception;

        $r7 = new com.hp.hpl.jena.shared.JenaException;

        specialinvoke $r7.<com.hp.hpl.jena.shared.JenaException: void <init>(java.lang.Throwable)>($r6);

        throw $r7;

     label5:
        return $r1;

        catch java.lang.NoSuchMethodException from label1 to label2 with label3;
        catch java.lang.Exception from label1 to label2 with label4;
    }

    private static java.lang.Class loadClassNamedBy(com.hp.hpl.jena.rdf.model.Statement)
    {
        com.hp.hpl.jena.shared.JenaException $r4;
        java.lang.Class $r2;
        java.lang.String $r1;
        com.hp.hpl.jena.rdf.model.Statement r0;
        java.lang.Exception $r3;

        r0 := @parameter0: com.hp.hpl.jena.rdf.model.Statement;

     label1:
        $r1 = staticinvoke <com.hp.hpl.jena.assembler.AssemblerHelp: java.lang.String getString(com.hp.hpl.jena.rdf.model.Statement)>(r0);

        $r2 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r1);

     label2:
        return $r2;

     label3:
        $r3 := @caughtexception;

        $r4 = new com.hp.hpl.jena.shared.JenaException;

        specialinvoke $r4.<com.hp.hpl.jena.shared.JenaException: void <init>(java.lang.Throwable)>($r3);

        throw $r4;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    private static void runAnyAssemblerConstructor(com.hp.hpl.jena.assembler.assemblers.AssemblerGroup, com.hp.hpl.jena.rdf.model.Statement, java.lang.Class)
    {
        java.lang.Object[] $r5;
        com.hp.hpl.jena.shared.JenaException $r10;
        com.hp.hpl.jena.rdf.model.Statement r0;
        java.lang.reflect.Constructor $r3;
        com.hp.hpl.jena.rdf.model.Resource $r1, $r6;
        java.lang.Exception $r9;
        com.hp.hpl.jena.assembler.assemblers.AssemblerGroup r4;
        java.lang.Class r2;
        java.lang.Object $r7, $r8;

        r4 := @parameter0: com.hp.hpl.jena.assembler.assemblers.AssemblerGroup;

        r0 := @parameter1: com.hp.hpl.jena.rdf.model.Statement;

        r2 := @parameter2: java.lang.Class;

     label1:
        $r1 = interfaceinvoke r0.<com.hp.hpl.jena.rdf.model.Statement: com.hp.hpl.jena.rdf.model.Resource getSubject()>();

        $r3 = staticinvoke <com.hp.hpl.jena.assembler.AssemblerHelp: java.lang.reflect.Constructor getResourcedConstructor(java.lang.Class)>(r2);

        if $r3 != null goto label2;

        $r8 = virtualinvoke r2.<java.lang.Class: java.lang.Object newInstance()>();

        staticinvoke <com.hp.hpl.jena.assembler.AssemblerHelp: void establish(com.hp.hpl.jena.assembler.assemblers.AssemblerGroup,com.hp.hpl.jena.rdf.model.Resource,java.lang.Object)>(r4, $r1, $r8);

        goto label3;

     label2:
        $r5 = newarray (java.lang.Object)[1];

        $r6 = interfaceinvoke r0.<com.hp.hpl.jena.rdf.model.Statement: com.hp.hpl.jena.rdf.model.Resource getSubject()>();

        $r5[0] = $r6;

        $r7 = virtualinvoke $r3.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r5);

        staticinvoke <com.hp.hpl.jena.assembler.AssemblerHelp: void establish(com.hp.hpl.jena.assembler.assemblers.AssemblerGroup,com.hp.hpl.jena.rdf.model.Resource,java.lang.Object)>(r4, $r1, $r7);

     label3:
        goto label5;

     label4:
        $r9 := @caughtexception;

        $r10 = new com.hp.hpl.jena.shared.JenaException;

        specialinvoke $r10.<com.hp.hpl.jena.shared.JenaException: void <init>(java.lang.Throwable)>($r9);

        throw $r10;

     label5:
        return;

        catch java.lang.Exception from label1 to label3 with label4;
    }

    private static void establish(com.hp.hpl.jena.assembler.assemblers.AssemblerGroup, com.hp.hpl.jena.rdf.model.Resource, java.lang.Object)
    {
        com.hp.hpl.jena.assembler.Assembler $r8;
        com.hp.hpl.jena.shared.JenaException $r1;
        com.hp.hpl.jena.rdf.model.Resource r7;
        com.hp.hpl.jena.assembler.assemblers.AssemblerGroup r6;
        java.lang.Object r0;
        java.lang.StringBuilder $r2, $r3, $r4;
        java.lang.String $r5;
        boolean $z0;

        r6 := @parameter0: com.hp.hpl.jena.assembler.assemblers.AssemblerGroup;

        r7 := @parameter1: com.hp.hpl.jena.rdf.model.Resource;

        r0 := @parameter2: java.lang.Object;

        $z0 = r0 instanceof com.hp.hpl.jena.assembler.Assembler;

        if $z0 == 0 goto label1;

        $r8 = (com.hp.hpl.jena.assembler.Assembler) r0;

        virtualinvoke r6.<com.hp.hpl.jena.assembler.assemblers.AssemblerGroup: com.hp.hpl.jena.assembler.assemblers.AssemblerGroup implementWith(com.hp.hpl.jena.rdf.model.Resource,com.hp.hpl.jena.assembler.Assembler)>(r7, $r8);

        goto label2;

     label1:
        $r1 = new com.hp.hpl.jena.shared.JenaException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("constructed entity is not an Assembler: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<com.hp.hpl.jena.shared.JenaException: void <init>(java.lang.String)>($r5);

        throw $r1;

     label2:
        return;
    }

    private static java.lang.reflect.Constructor getResourcedConstructor(java.lang.Class)
    {
        java.lang.NoSuchMethodException $r3;
        java.lang.Class[] $r1;
        java.lang.Class r0;
        java.lang.SecurityException $r4;
        java.lang.reflect.Constructor $r2;

        r0 := @parameter0: java.lang.Class;

     label1:
        $r1 = newarray (java.lang.Class)[1];

        $r1[0] = class "Lcom/hp/hpl/jena/rdf/model/Resource;";

        $r2 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r1);

     label2:
        return $r2;

     label3:
        $r4 := @caughtexception;

        return null;

     label4:
        $r3 := @caughtexception;

        return null;

        catch java.lang.SecurityException from label1 to label2 with label3;
        catch java.lang.NoSuchMethodException from label1 to label2 with label4;
    }

    public static com.hp.hpl.jena.rdf.model.Resource findSpecificType(com.hp.hpl.jena.rdf.model.Resource)
    {
        com.hp.hpl.jena.rdf.model.Resource r0, $r1, $r2;

        r0 := @parameter0: com.hp.hpl.jena.rdf.model.Resource;

        $r1 = <com.hp.hpl.jena.assembler.JA: com.hp.hpl.jena.rdf.model.Resource Object>;

        $r2 = staticinvoke <com.hp.hpl.jena.assembler.AssemblerHelp: com.hp.hpl.jena.rdf.model.Resource findSpecificType(com.hp.hpl.jena.rdf.model.Resource,com.hp.hpl.jena.rdf.model.Resource)>(r0, $r1);

        return $r2;
    }

    public static com.hp.hpl.jena.rdf.model.Resource findSpecificType(com.hp.hpl.jena.rdf.model.Resource, com.hp.hpl.jena.rdf.model.Resource)
    {
        java.util.Iterator $r5;
        java.util.Set $r2;
        com.hp.hpl.jena.assembler.exceptions.AmbiguousSpecificTypeException $r3;
        com.hp.hpl.jena.rdf.model.Resource r0, r1, $r7;
        java.util.ArrayList $r4;
        int $i0, $i1;
        java.lang.Object $r6;

        r0 := @parameter0: com.hp.hpl.jena.rdf.model.Resource;

        r1 := @parameter1: com.hp.hpl.jena.rdf.model.Resource;

        $r2 = staticinvoke <com.hp.hpl.jena.assembler.AssemblerHelp: java.util.Set findSpecificTypes(com.hp.hpl.jena.rdf.model.Resource,com.hp.hpl.jena.rdf.model.Resource)>(r0, r1);

        $i0 = interfaceinvoke $r2.<java.util.Set: int size()>();

        if $i0 != 1 goto label1;

        $r5 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        $r7 = (com.hp.hpl.jena.rdf.model.Resource) $r6;

        return $r7;

     label1:
        $i1 = interfaceinvoke $r2.<java.util.Set: int size()>();

        if $i1 != 0 goto label2;

        return r1;

     label2:
        $r3 = new com.hp.hpl.jena.assembler.exceptions.AmbiguousSpecificTypeException;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>(java.util.Collection)>($r2);

        specialinvoke $r3.<com.hp.hpl.jena.assembler.exceptions.AmbiguousSpecificTypeException: void <init>(com.hp.hpl.jena.rdf.model.Resource,java.util.ArrayList)>(r0, $r4);

        throw $r3;
    }

    public static java.util.Set findSpecificTypes(com.hp.hpl.jena.rdf.model.Resource, com.hp.hpl.jena.rdf.model.Resource)
    {
        com.hp.hpl.jena.util.iterator.Map1 $r3;
        com.hp.hpl.jena.rdf.model.Resource r0, r8, r9;
        java.util.HashSet $r6;
        java.util.List $r5;
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r4;
        com.hp.hpl.jena.rdf.model.StmtIterator $r2;
        com.hp.hpl.jena.rdf.model.Property $r1, $r10;
        int $i0, i1;
        java.lang.Object $r7;
        boolean $z0, $z1;

        r0 := @parameter0: com.hp.hpl.jena.rdf.model.Resource;

        r9 := @parameter1: com.hp.hpl.jena.rdf.model.Resource;

        $r1 = <com.hp.hpl.jena.vocabulary.RDF: com.hp.hpl.jena.rdf.model.Property type>;

        $r2 = interfaceinvoke r0.<com.hp.hpl.jena.rdf.model.Resource: com.hp.hpl.jena.rdf.model.StmtIterator listProperties(com.hp.hpl.jena.rdf.model.Property)>($r1);

        $r3 = <com.hp.hpl.jena.rdf.model.Statement$Util: com.hp.hpl.jena.util.iterator.Map1 getObject>;

        $r4 = interfaceinvoke $r2.<com.hp.hpl.jena.rdf.model.StmtIterator: com.hp.hpl.jena.util.iterator.ExtendedIterator mapWith(com.hp.hpl.jena.util.iterator.Map1)>($r3);

        $r5 = interfaceinvoke $r4.<com.hp.hpl.jena.util.iterator.ExtendedIterator: java.util.List toList()>();

        $r6 = new java.util.HashSet;

        specialinvoke $r6.<java.util.HashSet: void <init>()>();

        i1 = 0;

     label1:
        $i0 = interfaceinvoke $r5.<java.util.List: int size()>();

        if i1 >= $i0 goto label3;

        $r7 = interfaceinvoke $r5.<java.util.List: java.lang.Object get(int)>(i1);

        r8 = (com.hp.hpl.jena.rdf.model.Resource) $r7;

        $r10 = <com.hp.hpl.jena.vocabulary.RDFS: com.hp.hpl.jena.rdf.model.Property subClassOf>;

        $z0 = interfaceinvoke r8.<com.hp.hpl.jena.rdf.model.Resource: boolean hasProperty(com.hp.hpl.jena.rdf.model.Property,com.hp.hpl.jena.rdf.model.RDFNode)>($r10, r9);

        if $z0 == 0 goto label2;

        $z1 = staticinvoke <com.hp.hpl.jena.assembler.AssemblerHelp: boolean hasNoCompetingSubclass(java.util.List,com.hp.hpl.jena.rdf.model.Resource)>($r5, r8);

        if $z1 == 0 goto label2;

        interfaceinvoke $r6.<java.util.Set: boolean add(java.lang.Object)>(r8);

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return $r6;
    }

    private static boolean hasNoCompetingSubclass(java.util.List, com.hp.hpl.jena.rdf.model.Resource)
    {
        com.hp.hpl.jena.rdf.model.Resource r2, r3;
        java.util.List r0;
        com.hp.hpl.jena.rdf.model.Property $r4;
        int $i0, i1;
        java.lang.Object $r1;
        boolean $z0, $z1;

        r0 := @parameter0: java.util.List;

        r3 := @parameter1: com.hp.hpl.jena.rdf.model.Resource;

        i1 = 0;

     label1:
        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        if i1 >= $i0 goto label3;

        $r1 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i1);

        r2 = (com.hp.hpl.jena.rdf.model.Resource) $r1;

        $r4 = <com.hp.hpl.jena.vocabulary.RDFS: com.hp.hpl.jena.rdf.model.Property subClassOf>;

        $z0 = interfaceinvoke r2.<com.hp.hpl.jena.rdf.model.Resource: boolean hasProperty(com.hp.hpl.jena.rdf.model.Property,com.hp.hpl.jena.rdf.model.RDFNode)>($r4, r3);

        if $z0 == 0 goto label2;

        $z1 = interfaceinvoke r3.<com.hp.hpl.jena.rdf.model.Resource: boolean equals(java.lang.Object)>(r2);

        if $z1 != 0 goto label2;

        return 0;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return 1;
    }

    public static com.hp.hpl.jena.rdf.model.Resource getResource(com.hp.hpl.jena.rdf.model.Statement)
    {
        com.hp.hpl.jena.rdf.model.RDFNode $r1;
        com.hp.hpl.jena.rdf.model.Statement r0;
        com.hp.hpl.jena.rdf.model.Resource $r2;
        boolean $z0;
        com.hp.hpl.jena.assembler.BadObjectException $r3;

        r0 := @parameter0: com.hp.hpl.jena.rdf.model.Statement;

        $r1 = interfaceinvoke r0.<com.hp.hpl.jena.rdf.model.Statement: com.hp.hpl.jena.rdf.model.RDFNode getObject()>();

        $z0 = interfaceinvoke $r1.<com.hp.hpl.jena.rdf.model.RDFNode: boolean isLiteral()>();

        if $z0 == 0 goto label1;

        $r3 = new com.hp.hpl.jena.assembler.BadObjectException;

        specialinvoke $r3.<com.hp.hpl.jena.assembler.BadObjectException: void <init>(com.hp.hpl.jena.rdf.model.Statement)>(r0);

        throw $r3;

     label1:
        $r2 = (com.hp.hpl.jena.rdf.model.Resource) $r1;

        return $r2;
    }

    public static java.lang.String getString(com.hp.hpl.jena.rdf.model.Statement)
    {
        com.hp.hpl.jena.rdf.model.RDFNode $r1;
        com.hp.hpl.jena.datatypes.xsd.XSDDatatype $r6;
        com.hp.hpl.jena.rdf.model.Statement r0;
        com.hp.hpl.jena.datatypes.RDFDatatype $r4, $r5;
        java.lang.String $r3, $r8, $r9;
        com.hp.hpl.jena.rdf.model.Literal r2;
        boolean $z0, $z1;
        com.hp.hpl.jena.assembler.BadObjectException $r7, $r10, $r11;

        r0 := @parameter0: com.hp.hpl.jena.rdf.model.Statement;

        $r1 = interfaceinvoke r0.<com.hp.hpl.jena.rdf.model.Statement: com.hp.hpl.jena.rdf.model.RDFNode getObject()>();

        $z0 = interfaceinvoke $r1.<com.hp.hpl.jena.rdf.model.RDFNode: boolean isResource()>();

        if $z0 == 0 goto label1;

        $r11 = new com.hp.hpl.jena.assembler.BadObjectException;

        specialinvoke $r11.<com.hp.hpl.jena.assembler.BadObjectException: void <init>(com.hp.hpl.jena.rdf.model.Statement)>(r0);

        throw $r11;

     label1:
        r2 = (com.hp.hpl.jena.rdf.model.Literal) $r1;

        $r3 = interfaceinvoke r2.<com.hp.hpl.jena.rdf.model.Literal: java.lang.String getLanguage()>();

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z1 != 0 goto label2;

        $r10 = new com.hp.hpl.jena.assembler.BadObjectException;

        specialinvoke $r10.<com.hp.hpl.jena.assembler.BadObjectException: void <init>(com.hp.hpl.jena.rdf.model.Statement)>(r0);

        throw $r10;

     label2:
        $r4 = interfaceinvoke r2.<com.hp.hpl.jena.rdf.model.Literal: com.hp.hpl.jena.datatypes.RDFDatatype getDatatype()>();

        if $r4 != null goto label3;

        $r9 = interfaceinvoke r2.<com.hp.hpl.jena.rdf.model.Literal: java.lang.String getLexicalForm()>();

        return $r9;

     label3:
        $r5 = interfaceinvoke r2.<com.hp.hpl.jena.rdf.model.Literal: com.hp.hpl.jena.datatypes.RDFDatatype getDatatype()>();

        $r6 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDstring>;

        if $r5 != $r6 goto label4;

        $r8 = interfaceinvoke r2.<com.hp.hpl.jena.rdf.model.Literal: java.lang.String getLexicalForm()>();

        return $r8;

     label4:
        $r7 = new com.hp.hpl.jena.assembler.BadObjectException;

        specialinvoke $r7.<com.hp.hpl.jena.assembler.BadObjectException: void <init>(com.hp.hpl.jena.rdf.model.Statement)>(r0);

        throw $r7;
    }

    public static java.lang.String getString(com.hp.hpl.jena.rdf.model.Statement, com.hp.hpl.jena.rdf.model.Literal)
    {
        com.hp.hpl.jena.datatypes.xsd.XSDDatatype $r4;
        com.hp.hpl.jena.rdf.model.Statement r6;
        com.hp.hpl.jena.datatypes.RDFDatatype $r2, $r3;
        java.lang.String $r1, $r7, $r8;
        com.hp.hpl.jena.rdf.model.Literal r0;
        boolean $z0;
        com.hp.hpl.jena.assembler.BadObjectException $r5, $r9;

        r6 := @parameter0: com.hp.hpl.jena.rdf.model.Statement;

        r0 := @parameter1: com.hp.hpl.jena.rdf.model.Literal;

        $r1 = interfaceinvoke r0.<com.hp.hpl.jena.rdf.model.Literal: java.lang.String getLanguage()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z0 != 0 goto label1;

        $r9 = new com.hp.hpl.jena.assembler.BadObjectException;

        specialinvoke $r9.<com.hp.hpl.jena.assembler.BadObjectException: void <init>(com.hp.hpl.jena.rdf.model.Statement)>(r6);

        throw $r9;

     label1:
        $r2 = interfaceinvoke r0.<com.hp.hpl.jena.rdf.model.Literal: com.hp.hpl.jena.datatypes.RDFDatatype getDatatype()>();

        if $r2 != null goto label2;

        $r8 = interfaceinvoke r0.<com.hp.hpl.jena.rdf.model.Literal: java.lang.String getLexicalForm()>();

        return $r8;

     label2:
        $r3 = interfaceinvoke r0.<com.hp.hpl.jena.rdf.model.Literal: com.hp.hpl.jena.datatypes.RDFDatatype getDatatype()>();

        $r4 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDstring>;

        if $r3 != $r4 goto label3;

        $r7 = interfaceinvoke r0.<com.hp.hpl.jena.rdf.model.Literal: java.lang.String getLexicalForm()>();

        return $r7;

     label3:
        $r5 = new com.hp.hpl.jena.assembler.BadObjectException;

        specialinvoke $r5.<com.hp.hpl.jena.assembler.BadObjectException: void <init>(com.hp.hpl.jena.rdf.model.Statement)>(r6);

        throw $r5;
    }

    public static java.util.Set findAssemblerRoots(com.hp.hpl.jena.rdf.model.Model)
    {
        com.hp.hpl.jena.rdf.model.Model r0;
        java.util.Set $r2;
        com.hp.hpl.jena.rdf.model.Resource $r1;

        r0 := @parameter0: com.hp.hpl.jena.rdf.model.Model;

        $r1 = <com.hp.hpl.jena.assembler.JA: com.hp.hpl.jena.rdf.model.Resource Object>;

        $r2 = staticinvoke <com.hp.hpl.jena.assembler.AssemblerHelp: java.util.Set findAssemblerRoots(com.hp.hpl.jena.rdf.model.Model,com.hp.hpl.jena.rdf.model.Resource)>(r0, $r1);

        return $r2;
    }

    public static java.util.Set findAssemblerRoots(com.hp.hpl.jena.rdf.model.Model, com.hp.hpl.jena.rdf.model.Resource)
    {
        com.hp.hpl.jena.rdf.model.Property $r3;
        com.hp.hpl.jena.rdf.model.Model r0, $r1;
        java.util.Set $r5;
        com.hp.hpl.jena.rdf.model.ResIterator $r4;
        com.hp.hpl.jena.rdf.model.Resource r2;

        r0 := @parameter0: com.hp.hpl.jena.rdf.model.Model;

        r2 := @parameter1: com.hp.hpl.jena.rdf.model.Resource;

        $r1 = staticinvoke <com.hp.hpl.jena.assembler.AssemblerHelp: com.hp.hpl.jena.rdf.model.Model fullModel(com.hp.hpl.jena.rdf.model.Model)>(r0);

        $r3 = <com.hp.hpl.jena.vocabulary.RDF: com.hp.hpl.jena.rdf.model.Property type>;

        $r4 = interfaceinvoke $r1.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.rdf.model.ResIterator listResourcesWithProperty(com.hp.hpl.jena.rdf.model.Property,com.hp.hpl.jena.rdf.model.RDFNode)>($r3, r2);

        $r5 = interfaceinvoke $r4.<com.hp.hpl.jena.rdf.model.ResIterator: java.util.Set toSet()>();

        return $r5;
    }

    public static com.hp.hpl.jena.rdf.model.Resource singleModelRoot(com.hp.hpl.jena.rdf.model.Model)
    {
        com.hp.hpl.jena.rdf.model.Model r0;
        com.hp.hpl.jena.rdf.model.Resource $r1, $r2;

        r0 := @parameter0: com.hp.hpl.jena.rdf.model.Model;

        $r1 = <com.hp.hpl.jena.assembler.JA: com.hp.hpl.jena.rdf.model.Resource Model>;

        $r2 = staticinvoke <com.hp.hpl.jena.assembler.AssemblerHelp: com.hp.hpl.jena.rdf.model.Resource singleRoot(com.hp.hpl.jena.rdf.model.Model,com.hp.hpl.jena.rdf.model.Resource)>(r0, $r1);

        return $r2;
    }

    public static com.hp.hpl.jena.rdf.model.Resource singleRoot(com.hp.hpl.jena.rdf.model.Model, com.hp.hpl.jena.rdf.model.Resource)
    {
        java.util.Iterator $r5;
        com.hp.hpl.jena.shared.BadDescriptionNoRootException $r4;
        java.util.Set $r2;
        com.hp.hpl.jena.rdf.model.Resource r1, $r7;
        com.hp.hpl.jena.shared.BadDescriptionMultipleRootsException $r3;
        com.hp.hpl.jena.rdf.model.Model r0;
        int $i0, $i1;
        java.lang.Object $r6;

        r0 := @parameter0: com.hp.hpl.jena.rdf.model.Model;

        r1 := @parameter1: com.hp.hpl.jena.rdf.model.Resource;

        $r2 = staticinvoke <com.hp.hpl.jena.assembler.AssemblerHelp: java.util.Set findAssemblerRoots(com.hp.hpl.jena.rdf.model.Model,com.hp.hpl.jena.rdf.model.Resource)>(r0, r1);

        $i0 = interfaceinvoke $r2.<java.util.Set: int size()>();

        if $i0 != 1 goto label1;

        $r5 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        $r7 = (com.hp.hpl.jena.rdf.model.Resource) $r6;

        return $r7;

     label1:
        $i1 = interfaceinvoke $r2.<java.util.Set: int size()>();

        if $i1 != 0 goto label2;

        $r4 = new com.hp.hpl.jena.shared.BadDescriptionNoRootException;

        specialinvoke $r4.<com.hp.hpl.jena.shared.BadDescriptionNoRootException: void <init>(com.hp.hpl.jena.rdf.model.Model,com.hp.hpl.jena.rdf.model.Resource)>(r0, r1);

        throw $r4;

     label2:
        $r3 = new com.hp.hpl.jena.shared.BadDescriptionMultipleRootsException;

        specialinvoke $r3.<com.hp.hpl.jena.shared.BadDescriptionMultipleRootsException: void <init>(com.hp.hpl.jena.rdf.model.Model,com.hp.hpl.jena.rdf.model.Resource)>(r0, r1);

        throw $r3;
    }

    static void <clinit>()
    {
        <com.hp.hpl.jena.assembler.AssemblerHelp: com.hp.hpl.jena.rdf.model.Property ANY> = null;

        return;
    }
}
