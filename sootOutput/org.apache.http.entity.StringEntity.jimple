public class org.apache.http.entity.StringEntity extends org.apache.http.entity.AbstractHttpEntity implements java.lang.Cloneable
{
    protected final byte[] content;

    public void <init>(java.lang.String, org.apache.http.entity.ContentType)
    {
        byte[] $r4;
        org.apache.http.entity.ContentType r2;
        org.apache.http.entity.StringEntity r0;
        java.lang.IllegalArgumentException $r6;
        java.nio.charset.Charset $r10, r11;
        java.lang.String r1, $r3, $r5, $r9;
        java.nio.charset.UnsupportedCharsetException $r8;
        java.io.UnsupportedEncodingException $r7;

        r0 := @this: org.apache.http.entity.StringEntity;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.apache.http.entity.ContentType;

        specialinvoke r0.<org.apache.http.entity.AbstractHttpEntity: void <init>()>();

        if r1 != null goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Source string may not be null");

        throw $r6;

     label1:
        if r2 == null goto label2;

        $r10 = virtualinvoke r2.<org.apache.http.entity.ContentType: java.nio.charset.Charset getCharset()>();

        goto label3;

     label2:
        $r10 = null;

     label3:
        r11 = $r10;

        if $r10 != null goto label4;

        r11 = <org.apache.http.protocol.HTTP: java.nio.charset.Charset DEF_CONTENT_CHARSET>;

     label4:
        $r3 = virtualinvoke r11.<java.nio.charset.Charset: java.lang.String name()>();

        $r4 = virtualinvoke r1.<java.lang.String: byte[] getBytes(java.lang.String)>($r3);

        r0.<org.apache.http.entity.StringEntity: byte[] content> = $r4;

     label5:
        goto label7;

     label6:
        $r7 := @caughtexception;

        $r8 = new java.nio.charset.UnsupportedCharsetException;

        $r9 = virtualinvoke r11.<java.nio.charset.Charset: java.lang.String name()>();

        specialinvoke $r8.<java.nio.charset.UnsupportedCharsetException: void <init>(java.lang.String)>($r9);

        throw $r8;

     label7:
        if r2 == null goto label8;

        $r5 = virtualinvoke r2.<org.apache.http.entity.ContentType: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.http.entity.StringEntity: void setContentType(java.lang.String)>($r5);

     label8:
        return;

        catch java.io.UnsupportedEncodingException from label4 to label5 with label6;
    }

    public void <init>(java.lang.String, java.lang.String, java.lang.String) throws java.io.UnsupportedEncodingException
    {
        byte[] $r2;
        org.apache.http.entity.StringEntity r0;
        java.lang.IllegalArgumentException $r8;
        java.lang.StringBuilder $r3, $r4, $r5, $r6;
        java.lang.String r1, $r7, r9, r10;

        r0 := @this: org.apache.http.entity.StringEntity;

        r1 := @parameter0: java.lang.String;

        r9 := @parameter1: java.lang.String;

        r10 := @parameter2: java.lang.String;

        specialinvoke r0.<org.apache.http.entity.AbstractHttpEntity: void <init>()>();

        if r1 != null goto label1;

        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Source string may not be null");

        throw $r8;

     label1:
        if r9 != null goto label2;

        r9 = "text/plain";

     label2:
        if r10 != null goto label3;

        r10 = "ISO-8859-1";

     label3:
        $r2 = virtualinvoke r1.<java.lang.String: byte[] getBytes(java.lang.String)>(r10);

        r0.<org.apache.http.entity.StringEntity: byte[] content> = $r2;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r9);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; charset=");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r10);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.http.entity.StringEntity: void setContentType(java.lang.String)>($r7);

        return;
    }

    public void <init>(java.lang.String, java.lang.String) throws java.io.UnsupportedEncodingException
    {
        org.apache.http.entity.ContentType $r2, $r5;
        org.apache.http.entity.StringEntity r0;
        java.lang.String r1, $r3, r4;

        r0 := @this: org.apache.http.entity.StringEntity;

        r1 := @parameter0: java.lang.String;

        r4 := @parameter1: java.lang.String;

        $r2 = <org.apache.http.entity.ContentType: org.apache.http.entity.ContentType TEXT_PLAIN>;

        $r3 = virtualinvoke $r2.<org.apache.http.entity.ContentType: java.lang.String getMimeType()>();

        $r5 = staticinvoke <org.apache.http.entity.ContentType: org.apache.http.entity.ContentType create(java.lang.String,java.lang.String)>($r3, r4);

        specialinvoke r0.<org.apache.http.entity.StringEntity: void <init>(java.lang.String,org.apache.http.entity.ContentType)>(r1, $r5);

        return;
    }

    public void <init>(java.lang.String, java.nio.charset.Charset)
    {
        java.nio.charset.Charset r4;
        org.apache.http.entity.ContentType $r2, $r5;
        org.apache.http.entity.StringEntity r0;
        java.lang.String r1, $r3;

        r0 := @this: org.apache.http.entity.StringEntity;

        r1 := @parameter0: java.lang.String;

        r4 := @parameter1: java.nio.charset.Charset;

        $r2 = <org.apache.http.entity.ContentType: org.apache.http.entity.ContentType TEXT_PLAIN>;

        $r3 = virtualinvoke $r2.<org.apache.http.entity.ContentType: java.lang.String getMimeType()>();

        $r5 = staticinvoke <org.apache.http.entity.ContentType: org.apache.http.entity.ContentType create(java.lang.String,java.nio.charset.Charset)>($r3, r4);

        specialinvoke r0.<org.apache.http.entity.StringEntity: void <init>(java.lang.String,org.apache.http.entity.ContentType)>(r1, $r5);

        return;
    }

    public void <init>(java.lang.String) throws java.io.UnsupportedEncodingException
    {
        org.apache.http.entity.ContentType $r2;
        org.apache.http.entity.StringEntity r0;
        java.lang.String r1;

        r0 := @this: org.apache.http.entity.StringEntity;

        r1 := @parameter0: java.lang.String;

        $r2 = <org.apache.http.entity.ContentType: org.apache.http.entity.ContentType DEFAULT_TEXT>;

        specialinvoke r0.<org.apache.http.entity.StringEntity: void <init>(java.lang.String,org.apache.http.entity.ContentType)>(r1, $r2);

        return;
    }

    public boolean isRepeatable()
    {
        org.apache.http.entity.StringEntity r0;

        r0 := @this: org.apache.http.entity.StringEntity;

        return 1;
    }

    public long getContentLength()
    {
        byte[] $r1;
        int $i0;
        org.apache.http.entity.StringEntity r0;
        long $l1;

        r0 := @this: org.apache.http.entity.StringEntity;

        $r1 = r0.<org.apache.http.entity.StringEntity: byte[] content>;

        $i0 = lengthof $r1;

        $l1 = (long) $i0;

        return $l1;
    }

    public java.io.InputStream getContent() throws java.io.IOException
    {
        org.apache.http.entity.StringEntity r1;
        byte[] $r2;
        java.io.ByteArrayInputStream $r0;

        r1 := @this: org.apache.http.entity.StringEntity;

        $r0 = new java.io.ByteArrayInputStream;

        $r2 = r1.<org.apache.http.entity.StringEntity: byte[] content>;

        specialinvoke $r0.<java.io.ByteArrayInputStream: void <init>(byte[])>($r2);

        return $r0;
    }

    public void writeTo(java.io.OutputStream) throws java.io.IOException
    {
        java.io.OutputStream r0;
        byte[] $r2;
        org.apache.http.entity.StringEntity r1;
        java.lang.IllegalArgumentException $r3;

        r1 := @this: org.apache.http.entity.StringEntity;

        r0 := @parameter0: java.io.OutputStream;

        if r0 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Output stream may not be null");

        throw $r3;

     label1:
        $r2 = r1.<org.apache.http.entity.StringEntity: byte[] content>;

        virtualinvoke r0.<java.io.OutputStream: void write(byte[])>($r2);

        virtualinvoke r0.<java.io.OutputStream: void flush()>();

        return;
    }

    public boolean isStreaming()
    {
        org.apache.http.entity.StringEntity r0;

        r0 := @this: org.apache.http.entity.StringEntity;

        return 0;
    }

    public java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        org.apache.http.entity.StringEntity r0;
        java.lang.Object $r1;

        r0 := @this: org.apache.http.entity.StringEntity;

        $r1 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>();

        return $r1;
    }
}
