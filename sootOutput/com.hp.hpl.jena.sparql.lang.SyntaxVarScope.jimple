public class com.hp.hpl.jena.sparql.lang.SyntaxVarScope extends java.lang.Object
{

    public void <init>()
    {
        com.hp.hpl.jena.sparql.lang.SyntaxVarScope r0;

        r0 := @this: com.hp.hpl.jena.sparql.lang.SyntaxVarScope;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void check(com.hp.hpl.jena.query.Query)
    {
        com.hp.hpl.jena.query.Query r0;
        java.util.Collection $r3;
        com.hp.hpl.jena.sparql.syntax.Element $r1, $r2;

        r0 := @parameter0: com.hp.hpl.jena.query.Query;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.query.Query: com.hp.hpl.jena.sparql.syntax.Element getQueryPattern()>();

        if $r1 != null goto label1;

        return;

     label1:
        $r2 = virtualinvoke r0.<com.hp.hpl.jena.query.Query: com.hp.hpl.jena.sparql.syntax.Element getQueryPattern()>();

        staticinvoke <com.hp.hpl.jena.sparql.lang.SyntaxVarScope: void checkSubQuery(com.hp.hpl.jena.sparql.syntax.Element)>($r2);

        staticinvoke <com.hp.hpl.jena.sparql.lang.SyntaxVarScope: void checkBind(com.hp.hpl.jena.query.Query)>(r0);

        staticinvoke <com.hp.hpl.jena.sparql.lang.SyntaxVarScope: void checkQueryScope(com.hp.hpl.jena.query.Query)>(r0);

        $r3 = staticinvoke <com.hp.hpl.jena.sparql.lang.SyntaxVarScope: java.util.Collection varsOfQuery(com.hp.hpl.jena.query.Query)>(r0);

        staticinvoke <com.hp.hpl.jena.sparql.lang.SyntaxVarScope: void check(com.hp.hpl.jena.query.Query,java.util.Collection)>(r0, $r3);

        return;
    }

    private static void checkBind(com.hp.hpl.jena.query.Query)
    {
        com.hp.hpl.jena.sparql.syntax.Element $r2;
        com.hp.hpl.jena.query.Query r1;
        com.hp.hpl.jena.sparql.lang.SyntaxVarScope$BindScopeChecker $r0;

        r1 := @parameter0: com.hp.hpl.jena.query.Query;

        $r0 = new com.hp.hpl.jena.sparql.lang.SyntaxVarScope$BindScopeChecker;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.lang.SyntaxVarScope$BindScopeChecker: void <init>()>();

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.query.Query: com.hp.hpl.jena.sparql.syntax.Element getQueryPattern()>();

        staticinvoke <com.hp.hpl.jena.sparql.syntax.ElementWalker: void walk(com.hp.hpl.jena.sparql.syntax.Element,com.hp.hpl.jena.sparql.syntax.ElementVisitor)>($r2, $r0);

        return;
    }

    private static void checkSubQuery(com.hp.hpl.jena.sparql.syntax.Element)
    {
        com.hp.hpl.jena.sparql.syntax.Element r1;
        com.hp.hpl.jena.sparql.lang.SyntaxVarScope$SubQueryScopeChecker $r0;

        r1 := @parameter0: com.hp.hpl.jena.sparql.syntax.Element;

        $r0 = new com.hp.hpl.jena.sparql.lang.SyntaxVarScope$SubQueryScopeChecker;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.lang.SyntaxVarScope$SubQueryScopeChecker: void <init>(com.hp.hpl.jena.sparql.lang.SyntaxVarScope$1)>(null);

        staticinvoke <com.hp.hpl.jena.sparql.syntax.ElementWalker: void walk(com.hp.hpl.jena.sparql.syntax.Element,com.hp.hpl.jena.sparql.syntax.ElementVisitor)>(r1, $r0);

        return;
    }

    private static void checkQueryScope(com.hp.hpl.jena.query.Query)
    {
        com.hp.hpl.jena.query.Query r0;
        com.hp.hpl.jena.sparql.core.VarExprList $r2;
        java.util.Collection $r1;

        r0 := @parameter0: com.hp.hpl.jena.query.Query;

        $r1 = staticinvoke <com.hp.hpl.jena.sparql.lang.SyntaxVarScope: java.util.Collection varsOfQuery(com.hp.hpl.jena.query.Query)>(r0);

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.query.Query: com.hp.hpl.jena.sparql.core.VarExprList getProject()>();

        staticinvoke <com.hp.hpl.jena.sparql.lang.SyntaxVarScope: void checkExprListAssignment(java.util.Collection,com.hp.hpl.jena.sparql.core.VarExprList)>($r1, $r2);

        return;
    }

    private static java.util.Collection varsOfQuery(com.hp.hpl.jena.query.Query)
    {
        com.hp.hpl.jena.query.Query r0;
        java.util.List $r3;
        java.util.Collection $r2;
        com.hp.hpl.jena.sparql.syntax.Element $r1;
        boolean $z0;

        r0 := @parameter0: com.hp.hpl.jena.query.Query;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.query.Query: com.hp.hpl.jena.sparql.syntax.Element getQueryPattern()>();

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.syntax.PatternVars: java.util.Collection vars(com.hp.hpl.jena.sparql.syntax.Element)>($r1);

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.query.Query: boolean hasValues()>();

        if $z0 == 0 goto label1;

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.query.Query: java.util.List getValuesVariables()>();

        interfaceinvoke $r2.<java.util.Collection: boolean addAll(java.util.Collection)>($r3);

     label1:
        return $r2;
    }

    private static void check(com.hp.hpl.jena.query.Query, java.util.Collection)
    {
        com.hp.hpl.jena.query.Query r1;
        com.hp.hpl.jena.query.Syntax $r3, $r4;
        java.util.Collection r0;
        int $i1, $i3;
        com.hp.hpl.jena.sparql.core.VarExprList $r2;
        com.hp.hpl.jena.query.QueryParseException $r6;
        boolean $z0, $z1, $z2;

        r1 := @parameter0: com.hp.hpl.jena.query.Query;

        r0 := @parameter1: java.util.Collection;

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.query.Query: com.hp.hpl.jena.sparql.core.VarExprList getProject()>();

        staticinvoke <com.hp.hpl.jena.sparql.lang.SyntaxVarScope: void checkExprListAssignment(java.util.Collection,com.hp.hpl.jena.sparql.core.VarExprList)>(r0, $r2);

        $r3 = <com.hp.hpl.jena.query.Syntax: com.hp.hpl.jena.query.Syntax syntaxARQ>;

        $r4 = virtualinvoke r1.<com.hp.hpl.jena.query.Query: com.hp.hpl.jena.query.Syntax getSyntax()>();

        $z0 = virtualinvoke $r3.<com.hp.hpl.jena.query.Syntax: boolean equals(java.lang.Object)>($r4);

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r1.<com.hp.hpl.jena.query.Query: boolean isQueryResultStar()>();

        if $z1 == 0 goto label1;

        $z2 = virtualinvoke r1.<com.hp.hpl.jena.query.Query: boolean hasGroupBy()>();

        if $z2 == 0 goto label1;

        $r6 = new com.hp.hpl.jena.query.QueryParseException;

        $i1 = (int) -1;

        $i3 = (int) -1;

        specialinvoke $r6.<com.hp.hpl.jena.query.QueryParseException: void <init>(java.lang.String,int,int)>("SELECT * not legal with GROUP BY", $i1, $i3);

        throw $r6;

     label1:
        staticinvoke <com.hp.hpl.jena.sparql.lang.SyntaxVarScope: void checkExprVarUse(com.hp.hpl.jena.query.Query)>(r1);

        return;
    }

    private static void checkExprListAssignment(java.util.Collection, com.hp.hpl.jena.sparql.core.VarExprList)
    {
        java.util.Iterator $r4;
        java.util.Collection r1;
        com.hp.hpl.jena.sparql.core.Var r6;
        java.util.List $r3;
        com.hp.hpl.jena.sparql.expr.Expr $r7;
        com.hp.hpl.jena.sparql.core.VarExprList r2;
        java.lang.Object $r5;
        java.util.LinkedHashSet $r0;
        boolean $z0;

        r1 := @parameter0: java.util.Collection;

        r2 := @parameter1: com.hp.hpl.jena.sparql.core.VarExprList;

        $r0 = new java.util.LinkedHashSet;

        specialinvoke $r0.<java.util.LinkedHashSet: void <init>(java.util.Collection)>(r1);

        $r3 = virtualinvoke r2.<com.hp.hpl.jena.sparql.core.VarExprList: java.util.List getVars()>();

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (com.hp.hpl.jena.sparql.core.Var) $r5;

        $r7 = virtualinvoke r2.<com.hp.hpl.jena.sparql.core.VarExprList: com.hp.hpl.jena.sparql.expr.Expr getExpr(com.hp.hpl.jena.sparql.core.Var)>(r6);

        staticinvoke <com.hp.hpl.jena.sparql.lang.SyntaxVarScope: void checkAssignment(java.util.Collection,com.hp.hpl.jena.sparql.expr.Expr,com.hp.hpl.jena.sparql.core.Var)>($r0, $r7, r6);

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>(r6);

        goto label1;

     label2:
        return;
    }

    private static void checkExprVarUse(com.hp.hpl.jena.query.Query)
    {
        com.hp.hpl.jena.sparql.expr.Expr $r9;
        com.hp.hpl.jena.sparql.core.VarExprList $r1, $r4;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.util.Set $r10;
        java.util.List $r3, $r5;
        java.lang.StringBuilder $r16, $r17, $r18, $r19, $r23, $r24, $r27, $r29;
        com.hp.hpl.jena.query.Query r0;
        java.util.ArrayList $r26;
        int $i1, $i3, $i5, $i7;
        java.lang.String $r20, $r25;
        com.hp.hpl.jena.query.QueryParseException $r28, $r30;
        java.util.Iterator $r6, $r11;
        com.hp.hpl.jena.sparql.core.Var r8, r13;
        java.lang.Object $r7, $r12;

        r0 := @parameter0: com.hp.hpl.jena.query.Query;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.query.Query: boolean hasGroupBy()>();

        if $z0 == 0 goto label6;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.query.Query: com.hp.hpl.jena.sparql.core.VarExprList getGroupBy()>();

        $r26 = new java.util.ArrayList;

        $r3 = virtualinvoke $r1.<com.hp.hpl.jena.sparql.core.VarExprList: java.util.List getVars()>();

        specialinvoke $r26.<java.util.ArrayList: void <init>(java.util.Collection)>($r3);

        $r4 = virtualinvoke r0.<com.hp.hpl.jena.query.Query: com.hp.hpl.jena.sparql.core.VarExprList getProject()>();

        $r5 = virtualinvoke $r4.<com.hp.hpl.jena.sparql.core.VarExprList: java.util.List getVars()>();

        $r6 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label6;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r8 = (com.hp.hpl.jena.sparql.core.Var) $r7;

        $r9 = virtualinvoke $r4.<com.hp.hpl.jena.sparql.core.VarExprList: com.hp.hpl.jena.sparql.expr.Expr getExpr(com.hp.hpl.jena.sparql.core.Var)>(r8);

        if $r9 != null goto label2;

        $z4 = interfaceinvoke $r26.<java.util.List: boolean contains(java.lang.Object)>(r8);

        if $z4 != 0 goto label5;

        $r28 = new com.hp.hpl.jena.query.QueryParseException;

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Non-group key variable in SELECT: ");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r8);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        $i1 = (int) -1;

        $i3 = (int) -1;

        specialinvoke $r28.<com.hp.hpl.jena.query.QueryParseException: void <init>(java.lang.String,int,int)>($r25, $i1, $i3);

        throw $r28;

     label2:
        $r10 = interfaceinvoke $r9.<com.hp.hpl.jena.sparql.expr.Expr: java.util.Set getVarsMentioned()>();

        $r11 = interfaceinvoke $r10.<java.util.Set: java.util.Iterator iterator()>();

     label3:
        $z2 = interfaceinvoke $r11.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label5;

        $r12 = interfaceinvoke $r11.<java.util.Iterator: java.lang.Object next()>();

        r13 = (com.hp.hpl.jena.sparql.core.Var) $r12;

        $z3 = interfaceinvoke $r26.<java.util.List: boolean contains(java.lang.Object)>(r13);

        if $z3 != 0 goto label4;

        $r30 = new com.hp.hpl.jena.query.QueryParseException;

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Non-group key variable in SELECT: ");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r13);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in expression ");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        $i5 = (int) -1;

        $i7 = (int) -1;

        specialinvoke $r30.<com.hp.hpl.jena.query.QueryParseException: void <init>(java.lang.String,int,int)>($r20, $i5, $i7);

        throw $r30;

     label4:
        goto label3;

     label5:
        interfaceinvoke $r26.<java.util.List: boolean add(java.lang.Object)>(r8);

        goto label1;

     label6:
        return;
    }

    private static void checkAssignment(java.util.Collection, com.hp.hpl.jena.sparql.expr.Expr, com.hp.hpl.jena.sparql.core.Var)
    {
        java.util.Collection r1;
        com.hp.hpl.jena.sparql.core.Var r2;
        com.hp.hpl.jena.sparql.expr.Expr r0;
        int $i1, $i3;
        java.lang.StringBuilder $r5, $r6, $r7, $r9, $r11;
        java.lang.String $r8, $r10;
        com.hp.hpl.jena.query.QueryParseException $r12;
        boolean $z0;

        r1 := @parameter0: java.util.Collection;

        r0 := @parameter1: com.hp.hpl.jena.sparql.expr.Expr;

        r2 := @parameter2: com.hp.hpl.jena.sparql.core.Var;

        if r0 != null goto label1;

        return;

     label1:
        $z0 = interfaceinvoke r1.<java.util.Collection: boolean contains(java.lang.Object)>(r2);

        if $z0 == 0 goto label2;

        $r12 = new com.hp.hpl.jena.query.QueryParseException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Variable used when already in-scope: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in ");

        $r8 = staticinvoke <com.hp.hpl.jena.sparql.lang.SyntaxVarScope: java.lang.String fmtAssignment(com.hp.hpl.jena.sparql.expr.Expr,com.hp.hpl.jena.sparql.core.Var)>(r0, r2);

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        $i1 = (int) -1;

        $i3 = (int) -1;

        specialinvoke $r12.<com.hp.hpl.jena.query.QueryParseException: void <init>(java.lang.String,int,int)>($r10, $i1, $i3);

        throw $r12;

     label2:
        return;
    }

    private static java.lang.String fmtExprList(com.hp.hpl.jena.sparql.core.VarExprList)
    {
        java.util.Iterator $r3;
        com.hp.hpl.jena.sparql.core.Var r6;
        java.util.List $r2;
        com.hp.hpl.jena.sparql.expr.Expr $r7;
        java.lang.StringBuilder $r0, $r8, $r9, $r10, $r11;
        com.hp.hpl.jena.sparql.core.VarExprList r1;
        java.lang.Object $r5;
        java.lang.String $r4;
        boolean $z0, z1;

        r1 := @parameter0: com.hp.hpl.jena.sparql.core.VarExprList;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        z1 = 1;

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.sparql.core.VarExprList: java.util.List getVars()>();

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r6 = (com.hp.hpl.jena.sparql.core.Var) $r5;

        $r7 = virtualinvoke r1.<com.hp.hpl.jena.sparql.core.VarExprList: com.hp.hpl.jena.sparql.expr.Expr getExpr(com.hp.hpl.jena.sparql.core.Var)>(r6);

        if z1 != 0 goto label2;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

     label2:
        z1 = 0;

        $r8 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" AS ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r6);

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        goto label1;

     label3:
        $r4 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;
    }

    private static java.lang.String fmtAssignment(com.hp.hpl.jena.sparql.expr.Expr, com.hp.hpl.jena.sparql.core.Var)
    {
        com.hp.hpl.jena.sparql.core.Var r5;
        com.hp.hpl.jena.sparql.expr.Expr r2;
        java.lang.StringBuilder $r0, $r1, $r3, $r4, $r6, $r7;
        java.lang.String $r8;

        r2 := @parameter0: com.hp.hpl.jena.sparql.expr.Expr;

        r5 := @parameter1: com.hp.hpl.jena.sparql.core.Var;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" AS ");

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;
    }

    static void access$100(com.hp.hpl.jena.query.Query)
    {
        com.hp.hpl.jena.query.Query r0;

        r0 := @parameter0: com.hp.hpl.jena.query.Query;

        staticinvoke <com.hp.hpl.jena.sparql.lang.SyntaxVarScope: void checkQueryScope(com.hp.hpl.jena.query.Query)>(r0);

        return;
    }

    static void access$200(java.util.Collection, com.hp.hpl.jena.sparql.expr.Expr, com.hp.hpl.jena.sparql.core.Var)
    {
        com.hp.hpl.jena.sparql.expr.Expr r1;
        com.hp.hpl.jena.sparql.core.Var r2;
        java.util.Collection r0;

        r0 := @parameter0: java.util.Collection;

        r1 := @parameter1: com.hp.hpl.jena.sparql.expr.Expr;

        r2 := @parameter2: com.hp.hpl.jena.sparql.core.Var;

        staticinvoke <com.hp.hpl.jena.sparql.lang.SyntaxVarScope: void checkAssignment(java.util.Collection,com.hp.hpl.jena.sparql.expr.Expr,com.hp.hpl.jena.sparql.core.Var)>(r0, r1, r2);

        return;
    }
}
