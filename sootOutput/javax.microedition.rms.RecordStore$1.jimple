class javax.microedition.rms.RecordStore$1 extends java.lang.Object implements javax.microedition.rms.RecordEnumeration
{
    private int offset;
    private boolean updated;
    final boolean val$keep;
    final java.lang.Integer[] val$keys;
    final javax.microedition.rms.RecordStore this$0;

    void <init>(javax.microedition.rms.RecordStore, boolean, java.lang.Integer[])
    {
        javax.microedition.rms.RecordStore r1;
        javax.microedition.rms.RecordStore$1 r0;
        java.lang.Integer[] r2;
        boolean z0, $z1;

        r0 := @this: javax.microedition.rms.RecordStore$1;

        r1 := @parameter0: javax.microedition.rms.RecordStore;

        z0 := @parameter1: boolean;

        r2 := @parameter2: java.lang.Integer[];

        r0.<javax.microedition.rms.RecordStore$1: javax.microedition.rms.RecordStore this$0> = r1;

        r0.<javax.microedition.rms.RecordStore$1: boolean val$keep> = z0;

        r0.<javax.microedition.rms.RecordStore$1: java.lang.Integer[] val$keys> = r2;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<javax.microedition.rms.RecordStore$1: int offset> = 0;

        $z1 = r0.<javax.microedition.rms.RecordStore$1: boolean val$keep>;

        r0.<javax.microedition.rms.RecordStore$1: boolean updated> = $z1;

        return;
    }

    public void destroy()
    {
        javax.microedition.rms.RecordStore$1 r0;

        r0 := @this: javax.microedition.rms.RecordStore$1;

        return;
    }

    public boolean hasNextElement()
    {
        java.util.Map $r2;
        javax.microedition.rms.RecordStore $r1;
        int $i0, $i1;
        javax.microedition.rms.RecordStore$1 r0;
        boolean $z0;

        r0 := @this: javax.microedition.rms.RecordStore$1;

        $i0 = r0.<javax.microedition.rms.RecordStore$1: int offset>;

        $r1 = r0.<javax.microedition.rms.RecordStore$1: javax.microedition.rms.RecordStore this$0>;

        $r2 = staticinvoke <javax.microedition.rms.RecordStore: java.util.Map access$000(javax.microedition.rms.RecordStore)>($r1);

        $i1 = interfaceinvoke $r2.<java.util.Map: int size()>();

        if $i0 >= $i1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean hasPreviousElement()
    {
        int $i0;
        javax.microedition.rms.RecordStore$1 r0;
        boolean $z0;

        r0 := @this: javax.microedition.rms.RecordStore$1;

        $i0 = r0.<javax.microedition.rms.RecordStore$1: int offset>;

        if $i0 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isKeptUpdated()
    {
        javax.microedition.rms.RecordStore$1 r0;
        boolean $z0;

        r0 := @this: javax.microedition.rms.RecordStore$1;

        $z0 = r0.<javax.microedition.rms.RecordStore$1: boolean updated>;

        return $z0;
    }

    public void keepUpdated(boolean)
    {
        javax.microedition.rms.RecordStore$1 r0;
        boolean z0;

        r0 := @this: javax.microedition.rms.RecordStore$1;

        z0 := @parameter0: boolean;

        r0.<javax.microedition.rms.RecordStore$1: boolean updated> = z0;

        return;
    }

    public byte[] nextRecord() throws javax.microedition.rms.InvalidRecordIDException, javax.microedition.rms.RecordStoreNotOpenException, javax.microedition.rms.RecordStoreException
    {
        byte[] r6;
        javax.microedition.rms.RecordStore$1 r0;
        java.lang.Integer $r4;
        java.util.Map $r2;
        javax.microedition.rms.RecordStore $r1;
        int $i0, $i1, $i2;
        java.lang.Object $r5;
        java.lang.Integer[] $r3;

        r0 := @this: javax.microedition.rms.RecordStore$1;

        $r1 = r0.<javax.microedition.rms.RecordStore$1: javax.microedition.rms.RecordStore this$0>;

        $r2 = staticinvoke <javax.microedition.rms.RecordStore: java.util.Map access$000(javax.microedition.rms.RecordStore)>($r1);

        $r3 = r0.<javax.microedition.rms.RecordStore$1: java.lang.Integer[] val$keys>;

        $i0 = r0.<javax.microedition.rms.RecordStore$1: int offset>;

        $r4 = $r3[$i0];

        $r5 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r4);

        r6 = (byte[]) $r5;

        $i1 = r0.<javax.microedition.rms.RecordStore$1: int offset>;

        $i2 = $i1 + 1;

        r0.<javax.microedition.rms.RecordStore$1: int offset> = $i2;

        return r6;
    }

    public int nextRecordId() throws javax.microedition.rms.InvalidRecordIDException
    {
        int $i0, $i1, $i2, $i3;
        javax.microedition.rms.RecordStore$1 r0;
        java.lang.Integer $r2;
        java.lang.Integer[] $r1;

        r0 := @this: javax.microedition.rms.RecordStore$1;

        $r1 = r0.<javax.microedition.rms.RecordStore$1: java.lang.Integer[] val$keys>;

        $i0 = r0.<javax.microedition.rms.RecordStore$1: int offset>;

        $r2 = $r1[$i0];

        $i1 = virtualinvoke $r2.<java.lang.Integer: int intValue()>();

        $i2 = r0.<javax.microedition.rms.RecordStore$1: int offset>;

        $i3 = $i2 + 1;

        r0.<javax.microedition.rms.RecordStore$1: int offset> = $i3;

        return $i1;
    }

    public int numRecords()
    {
        int $i0;
        javax.microedition.rms.RecordStore$1 r0;
        java.lang.Integer[] $r1;

        r0 := @this: javax.microedition.rms.RecordStore$1;

        $r1 = r0.<javax.microedition.rms.RecordStore$1: java.lang.Integer[] val$keys>;

        $i0 = lengthof $r1;

        return $i0;
    }

    public byte[] previousRecord() throws javax.microedition.rms.InvalidRecordIDException, javax.microedition.rms.RecordStoreNotOpenException, javax.microedition.rms.RecordStoreException
    {
        byte[] r6;
        javax.microedition.rms.RecordStore$1 r0;
        java.lang.Integer $r4;
        java.util.Map $r2;
        javax.microedition.rms.RecordStore $r1;
        int $i0, $i1, $i2;
        java.lang.Object $r5;
        java.lang.Integer[] $r3;

        r0 := @this: javax.microedition.rms.RecordStore$1;

        $r1 = r0.<javax.microedition.rms.RecordStore$1: javax.microedition.rms.RecordStore this$0>;

        $r2 = staticinvoke <javax.microedition.rms.RecordStore: java.util.Map access$000(javax.microedition.rms.RecordStore)>($r1);

        $r3 = r0.<javax.microedition.rms.RecordStore$1: java.lang.Integer[] val$keys>;

        $i0 = r0.<javax.microedition.rms.RecordStore$1: int offset>;

        $r4 = $r3[$i0];

        $r5 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r4);

        r6 = (byte[]) $r5;

        $i1 = r0.<javax.microedition.rms.RecordStore$1: int offset>;

        $i2 = $i1 - 1;

        r0.<javax.microedition.rms.RecordStore$1: int offset> = $i2;

        return r6;
    }

    public int previousRecordId() throws javax.microedition.rms.InvalidRecordIDException
    {
        int $i0, $i1, $i2, $i3;
        javax.microedition.rms.RecordStore$1 r0;
        java.lang.Integer $r2;
        java.lang.Integer[] $r1;

        r0 := @this: javax.microedition.rms.RecordStore$1;

        $r1 = r0.<javax.microedition.rms.RecordStore$1: java.lang.Integer[] val$keys>;

        $i0 = r0.<javax.microedition.rms.RecordStore$1: int offset>;

        $r2 = $r1[$i0];

        $i1 = virtualinvoke $r2.<java.lang.Integer: int intValue()>();

        $i2 = r0.<javax.microedition.rms.RecordStore$1: int offset>;

        $i3 = $i2 - 1;

        r0.<javax.microedition.rms.RecordStore$1: int offset> = $i3;

        return $i1;
    }

    public void rebuild()
    {
        javax.microedition.rms.RecordStore$1 r0;

        r0 := @this: javax.microedition.rms.RecordStore$1;

        return;
    }

    public void reset()
    {
        javax.microedition.rms.RecordStore$1 r0;

        r0 := @this: javax.microedition.rms.RecordStore$1;

        r0.<javax.microedition.rms.RecordStore$1: int offset> = 0;

        return;
    }
}
