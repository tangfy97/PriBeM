class org.apache.lucene.spatial.prefix.ContainsPrefixTreeFilter$SmallDocSet extends org.apache.lucene.search.DocIdSet implements org.apache.lucene.util.Bits
{
    private final org.apache.lucene.util.SentinelIntSet intSet;
    private int maxInt;
    static final boolean $assertionsDisabled;

    public void <init>(int)
    {
        org.apache.lucene.util.SentinelIntSet $r2;
        int i0, $i2;
        org.apache.lucene.spatial.prefix.ContainsPrefixTreeFilter$SmallDocSet r0;

        r0 := @this: org.apache.lucene.spatial.prefix.ContainsPrefixTreeFilter$SmallDocSet;

        i0 := @parameter0: int;

        specialinvoke r0.<org.apache.lucene.search.DocIdSet: void <init>()>();

        r0.<org.apache.lucene.spatial.prefix.ContainsPrefixTreeFilter$SmallDocSet: int maxInt> = 0;

        $r2 = new org.apache.lucene.util.SentinelIntSet;

        $i2 = (int) -1;

        specialinvoke $r2.<org.apache.lucene.util.SentinelIntSet: void <init>(int,int)>(i0, $i2);

        r0.<org.apache.lucene.spatial.prefix.ContainsPrefixTreeFilter$SmallDocSet: org.apache.lucene.util.SentinelIntSet intSet> = $r2;

        return;
    }

    public boolean get(int)
    {
        org.apache.lucene.util.SentinelIntSet $r1;
        int i0;
        org.apache.lucene.spatial.prefix.ContainsPrefixTreeFilter$SmallDocSet r0;
        boolean $z0;

        r0 := @this: org.apache.lucene.spatial.prefix.ContainsPrefixTreeFilter$SmallDocSet;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.lucene.spatial.prefix.ContainsPrefixTreeFilter$SmallDocSet: org.apache.lucene.util.SentinelIntSet intSet>;

        $z0 = virtualinvoke $r1.<org.apache.lucene.util.SentinelIntSet: boolean exists(int)>(i0);

        return $z0;
    }

    public void set(int)
    {
        org.apache.lucene.util.SentinelIntSet $r1;
        int i0, $i1;
        org.apache.lucene.spatial.prefix.ContainsPrefixTreeFilter$SmallDocSet r0;

        r0 := @this: org.apache.lucene.spatial.prefix.ContainsPrefixTreeFilter$SmallDocSet;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.lucene.spatial.prefix.ContainsPrefixTreeFilter$SmallDocSet: org.apache.lucene.util.SentinelIntSet intSet>;

        virtualinvoke $r1.<org.apache.lucene.util.SentinelIntSet: int put(int)>(i0);

        $i1 = r0.<org.apache.lucene.spatial.prefix.ContainsPrefixTreeFilter$SmallDocSet: int maxInt>;

        if i0 <= $i1 goto label1;

        r0.<org.apache.lucene.spatial.prefix.ContainsPrefixTreeFilter$SmallDocSet: int maxInt> = i0;

     label1:
        return;
    }

    public int length()
    {
        int $i0;
        org.apache.lucene.spatial.prefix.ContainsPrefixTreeFilter$SmallDocSet r0;

        r0 := @this: org.apache.lucene.spatial.prefix.ContainsPrefixTreeFilter$SmallDocSet;

        $i0 = r0.<org.apache.lucene.spatial.prefix.ContainsPrefixTreeFilter$SmallDocSet: int maxInt>;

        return $i0;
    }

    public int size()
    {
        int $i0;
        org.apache.lucene.spatial.prefix.ContainsPrefixTreeFilter$SmallDocSet r0;
        org.apache.lucene.util.SentinelIntSet $r1;

        r0 := @this: org.apache.lucene.spatial.prefix.ContainsPrefixTreeFilter$SmallDocSet;

        $r1 = r0.<org.apache.lucene.spatial.prefix.ContainsPrefixTreeFilter$SmallDocSet: org.apache.lucene.util.SentinelIntSet intSet>;

        $i0 = virtualinvoke $r1.<org.apache.lucene.util.SentinelIntSet: int size()>();

        return $i0;
    }

    public org.apache.lucene.spatial.prefix.ContainsPrefixTreeFilter$SmallDocSet union(org.apache.lucene.spatial.prefix.ContainsPrefixTreeFilter$SmallDocSet)
    {
        int[] $r6;
        org.apache.lucene.util.SentinelIntSet $r1, $r3, $r4, $r5;
        int $i0, $i1, i2, $i3, $i4, i5;
        org.apache.lucene.spatial.prefix.ContainsPrefixTreeFilter$SmallDocSet r0, r2, r7, r8;

        r2 := @this: org.apache.lucene.spatial.prefix.ContainsPrefixTreeFilter$SmallDocSet;

        r0 := @parameter0: org.apache.lucene.spatial.prefix.ContainsPrefixTreeFilter$SmallDocSet;

        $r1 = r0.<org.apache.lucene.spatial.prefix.ContainsPrefixTreeFilter$SmallDocSet: org.apache.lucene.util.SentinelIntSet intSet>;

        $i0 = virtualinvoke $r1.<org.apache.lucene.util.SentinelIntSet: int size()>();

        $r3 = r2.<org.apache.lucene.spatial.prefix.ContainsPrefixTreeFilter$SmallDocSet: org.apache.lucene.util.SentinelIntSet intSet>;

        $i1 = virtualinvoke $r3.<org.apache.lucene.util.SentinelIntSet: int size()>();

        if $i0 <= $i1 goto label1;

        r7 = r0;

        r8 = r2;

        goto label2;

     label1:
        r7 = r2;

        r8 = r0;

     label2:
        $r4 = r8.<org.apache.lucene.spatial.prefix.ContainsPrefixTreeFilter$SmallDocSet: org.apache.lucene.util.SentinelIntSet intSet>;

        $r6 = $r4.<org.apache.lucene.util.SentinelIntSet: int[] keys>;

        $i4 = lengthof $r6;

        i5 = 0;

     label3:
        if i5 >= $i4 goto label6;

        i2 = $r6[i5];

        $r5 = r8.<org.apache.lucene.spatial.prefix.ContainsPrefixTreeFilter$SmallDocSet: org.apache.lucene.util.SentinelIntSet intSet>;

        $i3 = $r5.<org.apache.lucene.util.SentinelIntSet: int emptyVal>;

        if i2 != $i3 goto label4;

        goto label5;

     label4:
        virtualinvoke r7.<org.apache.lucene.spatial.prefix.ContainsPrefixTreeFilter$SmallDocSet: void set(int)>(i2);

     label5:
        i5 = i5 + 1;

        goto label3;

     label6:
        return r7;
    }

    public org.apache.lucene.util.Bits bits() throws java.io.IOException
    {
        int $i0;
        org.apache.lucene.spatial.prefix.ContainsPrefixTreeFilter$SmallDocSet r0, $r1;

        r0 := @this: org.apache.lucene.spatial.prefix.ContainsPrefixTreeFilter$SmallDocSet;

        $i0 = virtualinvoke r0.<org.apache.lucene.spatial.prefix.ContainsPrefixTreeFilter$SmallDocSet: int size()>();

        if $i0 <= 4 goto label1;

        $r1 = r0;

        goto label2;

     label1:
        $r1 = null;

     label2:
        return $r1;
    }

    public org.apache.lucene.search.DocIdSetIterator iterator() throws java.io.IOException
    {
        java.lang.AssertionError $r6;
        int[] r2, r8;
        int $i0, $i1, i2, $i3, i4, $i5, $i6, i7, i8;
        boolean $z0;
        org.apache.lucene.spatial.prefix.ContainsPrefixTreeFilter$SmallDocSet$1 $r4;
        org.apache.lucene.util.SentinelIntSet $r1, $r3, $r5, $r7;
        org.apache.lucene.spatial.prefix.ContainsPrefixTreeFilter$SmallDocSet r0;

        r0 := @this: org.apache.lucene.spatial.prefix.ContainsPrefixTreeFilter$SmallDocSet;

        $i0 = virtualinvoke r0.<org.apache.lucene.spatial.prefix.ContainsPrefixTreeFilter$SmallDocSet: int size()>();

        if $i0 != 0 goto label1;

        return null;

     label1:
        i7 = 0;

        $r1 = r0.<org.apache.lucene.spatial.prefix.ContainsPrefixTreeFilter$SmallDocSet: org.apache.lucene.util.SentinelIntSet intSet>;

        $i1 = virtualinvoke $r1.<org.apache.lucene.util.SentinelIntSet: int size()>();

        r2 = newarray (int)[$i1];

        $r3 = r0.<org.apache.lucene.spatial.prefix.ContainsPrefixTreeFilter$SmallDocSet: org.apache.lucene.util.SentinelIntSet intSet>;

        r8 = $r3.<org.apache.lucene.util.SentinelIntSet: int[] keys>;

        i2 = lengthof r8;

        i8 = 0;

     label2:
        if i8 >= i2 goto label5;

        i4 = r8[i8];

        $r7 = r0.<org.apache.lucene.spatial.prefix.ContainsPrefixTreeFilter$SmallDocSet: org.apache.lucene.util.SentinelIntSet intSet>;

        $i5 = $r7.<org.apache.lucene.util.SentinelIntSet: int emptyVal>;

        if i4 != $i5 goto label3;

        goto label4;

     label3:
        $i6 = i7;

        i7 = i7 + 1;

        r2[$i6] = i4;

     label4:
        i8 = i8 + 1;

        goto label2;

     label5:
        $z0 = <org.apache.lucene.spatial.prefix.ContainsPrefixTreeFilter$SmallDocSet: boolean $assertionsDisabled>;

        if $z0 != 0 goto label6;

        $r5 = r0.<org.apache.lucene.spatial.prefix.ContainsPrefixTreeFilter$SmallDocSet: org.apache.lucene.util.SentinelIntSet intSet>;

        $i3 = virtualinvoke $r5.<org.apache.lucene.util.SentinelIntSet: int size()>();

        if i7 == $i3 goto label6;

        $r6 = new java.lang.AssertionError;

        specialinvoke $r6.<java.lang.AssertionError: void <init>()>();

        throw $r6;

     label6:
        staticinvoke <java.util.Arrays: void sort(int[],int,int)>(r2, 0, i7);

        $r4 = new org.apache.lucene.spatial.prefix.ContainsPrefixTreeFilter$SmallDocSet$1;

        specialinvoke $r4.<org.apache.lucene.spatial.prefix.ContainsPrefixTreeFilter$SmallDocSet$1: void <init>(org.apache.lucene.spatial.prefix.ContainsPrefixTreeFilter$SmallDocSet,int,int[])>(r0, i7, r2);

        return $r4;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/apache/lucene/spatial/prefix/ContainsPrefixTreeFilter;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.lucene.spatial.prefix.ContainsPrefixTreeFilter$SmallDocSet: boolean $assertionsDisabled> = $z1;

        return;
    }
}
