class com.jidesoft.plaf.windows.AnimationController extends java.lang.Object implements java.awt.event.ActionListener, java.beans.PropertyChangeListener
{
    private static final boolean VISTA_ANIMATION_DISABLED;
    private static final java.lang.Object ANIMATION_CONTROLLER_KEY;
    private final java.util.Map animationStateMap;
    private final javax.swing.Timer timer;

    private static synchronized com.jidesoft.plaf.windows.AnimationController getAnimationController()
    {
        com.jidesoft.plaf.windows.AnimationController $r3, $r4;
        sun.awt.AppContext $r0;
        java.lang.Object $r1, $r2, $r5, r6;

        $r0 = staticinvoke <sun.awt.AppContext: sun.awt.AppContext getAppContext()>();

        $r1 = <com.jidesoft.plaf.windows.AnimationController: java.lang.Object ANIMATION_CONTROLLER_KEY>;

        $r2 = virtualinvoke $r0.<sun.awt.AppContext: java.lang.Object get(java.lang.Object)>($r1);

        r6 = $r2;

        if $r2 != null goto label1;

        $r4 = new com.jidesoft.plaf.windows.AnimationController;

        specialinvoke $r4.<com.jidesoft.plaf.windows.AnimationController: void <init>()>();

        r6 = $r4;

        $r5 = <com.jidesoft.plaf.windows.AnimationController: java.lang.Object ANIMATION_CONTROLLER_KEY>;

        virtualinvoke $r0.<sun.awt.AppContext: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, $r4);

     label1:
        $r3 = (com.jidesoft.plaf.windows.AnimationController) r6;

        return $r3;
    }

    private void <init>()
    {
        com.jidesoft.plaf.windows.AnimationController r0;
        java.util.WeakHashMap $r1;
        javax.swing.Timer $r2, $r3, $r4;

        r0 := @this: com.jidesoft.plaf.windows.AnimationController;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.WeakHashMap;

        specialinvoke $r1.<java.util.WeakHashMap: void <init>()>();

        r0.<com.jidesoft.plaf.windows.AnimationController: java.util.Map animationStateMap> = $r1;

        $r2 = new javax.swing.Timer;

        specialinvoke $r2.<javax.swing.Timer: void <init>(int,java.awt.event.ActionListener)>(33, r0);

        r0.<com.jidesoft.plaf.windows.AnimationController: javax.swing.Timer timer> = $r2;

        $r3 = r0.<com.jidesoft.plaf.windows.AnimationController: javax.swing.Timer timer>;

        virtualinvoke $r3.<javax.swing.Timer: void setRepeats(boolean)>(1);

        $r4 = r0.<com.jidesoft.plaf.windows.AnimationController: javax.swing.Timer timer>;

        virtualinvoke $r4.<javax.swing.Timer: void setCoalesce(boolean)>(1);

        staticinvoke <javax.swing.UIManager: void addPropertyChangeListener(java.beans.PropertyChangeListener)>(r0);

        return;
    }

    private static void triggerAnimation(javax.swing.JComponent, com.jidesoft.plaf.windows.TMSchema$Part, com.jidesoft.plaf.windows.TMSchema$State)
    {
        javax.swing.JComponent r0;
        com.jidesoft.plaf.windows.AnimationController $r3;
        com.jidesoft.plaf.windows.TMSchema$Part r1, $r2;
        long l0;
        com.jidesoft.plaf.windows.TMSchema$State $r4, r5, $r6, $r7, $r9, $r10, r12;
        com.jidesoft.plaf.windows.XPStyle $r8;
        com.jidesoft.plaf.windows.TMSchema$Prop $r11;
        boolean $z0;

        r0 := @parameter0: javax.swing.JComponent;

        r1 := @parameter1: com.jidesoft.plaf.windows.TMSchema$Part;

        r5 := @parameter2: com.jidesoft.plaf.windows.TMSchema$State;

        $z0 = r0 instanceof javax.swing.JTabbedPane;

        if $z0 != 0 goto label1;

        $r2 = <com.jidesoft.plaf.windows.TMSchema$Part: com.jidesoft.plaf.windows.TMSchema$Part TP_BUTTON>;

        if r1 != $r2 goto label2;

     label1:
        return;

     label2:
        $r3 = staticinvoke <com.jidesoft.plaf.windows.AnimationController: com.jidesoft.plaf.windows.AnimationController getAnimationController()>();

        $r4 = specialinvoke $r3.<com.jidesoft.plaf.windows.AnimationController: com.jidesoft.plaf.windows.TMSchema$State getState(javax.swing.JComponent,com.jidesoft.plaf.windows.TMSchema$Part)>(r0, r1);

        r12 = $r4;

        if $r4 == r5 goto label6;

        specialinvoke $r3.<com.jidesoft.plaf.windows.AnimationController: void putState(javax.swing.JComponent,com.jidesoft.plaf.windows.TMSchema$Part,com.jidesoft.plaf.windows.TMSchema$State)>(r0, r1, r5);

        $r6 = <com.jidesoft.plaf.windows.TMSchema$State: com.jidesoft.plaf.windows.TMSchema$State DEFAULTED>;

        if r5 != $r6 goto label3;

        r12 = <com.jidesoft.plaf.windows.TMSchema$State: com.jidesoft.plaf.windows.TMSchema$State HOT>;

     label3:
        if r12 == null goto label6;

        $r7 = <com.jidesoft.plaf.windows.TMSchema$State: com.jidesoft.plaf.windows.TMSchema$State DEFAULTED>;

        if r5 != $r7 goto label4;

        l0 = 1000L;

        goto label5;

     label4:
        $r8 = staticinvoke <com.jidesoft.plaf.windows.XPStyle: com.jidesoft.plaf.windows.XPStyle getXP()>();

        $r9 = staticinvoke <com.jidesoft.plaf.windows.AnimationController: com.jidesoft.plaf.windows.TMSchema$State normalizeState(com.jidesoft.plaf.windows.TMSchema$State)>(r12);

        $r10 = staticinvoke <com.jidesoft.plaf.windows.AnimationController: com.jidesoft.plaf.windows.TMSchema$State normalizeState(com.jidesoft.plaf.windows.TMSchema$State)>(r5);

        $r11 = <com.jidesoft.plaf.windows.TMSchema$Prop: com.jidesoft.plaf.windows.TMSchema$Prop TRANSITIONDURATIONS>;

        l0 = virtualinvoke $r8.<com.jidesoft.plaf.windows.XPStyle: long getThemeTransitionDuration(java.awt.Component,com.jidesoft.plaf.windows.TMSchema$Part,com.jidesoft.plaf.windows.TMSchema$State,com.jidesoft.plaf.windows.TMSchema$State,com.jidesoft.plaf.windows.TMSchema$Prop)>(r0, r1, $r9, $r10, $r11);

     label5:
        specialinvoke $r3.<com.jidesoft.plaf.windows.AnimationController: void startAnimation(javax.swing.JComponent,com.jidesoft.plaf.windows.TMSchema$Part,com.jidesoft.plaf.windows.TMSchema$State,com.jidesoft.plaf.windows.TMSchema$State,long)>(r0, r1, r12, r5, l0);

     label6:
        return;
    }

    private static com.jidesoft.plaf.windows.TMSchema$State normalizeState(com.jidesoft.plaf.windows.TMSchema$State)
    {
        int[] $r1;
        com.jidesoft.plaf.windows.TMSchema$State r0, r2;
        int $i0, $i1;

        r0 := @parameter0: com.jidesoft.plaf.windows.TMSchema$State;

        $r1 = <com.jidesoft.plaf.windows.AnimationController$1: int[] $SwitchMap$com$jidesoft$plaf$windows$TMSchema$State>;

        $i0 = virtualinvoke r0.<com.jidesoft.plaf.windows.TMSchema$State: int ordinal()>();

        $i1 = $r1[$i0];

        tableswitch($i1)
        {
            case 1: goto label1;
            case 2: goto label1;
            case 3: goto label1;
            case 4: goto label2;
            case 5: goto label2;
            case 6: goto label2;
            case 7: goto label3;
            case 8: goto label3;
            case 9: goto label3;
            case 10: goto label4;
            case 11: goto label4;
            case 12: goto label4;
            default: goto label5;
        };

     label1:
        r2 = <com.jidesoft.plaf.windows.TMSchema$State: com.jidesoft.plaf.windows.TMSchema$State UPPRESSED>;

        goto label6;

     label2:
        r2 = <com.jidesoft.plaf.windows.TMSchema$State: com.jidesoft.plaf.windows.TMSchema$State UPDISABLED>;

        goto label6;

     label3:
        r2 = <com.jidesoft.plaf.windows.TMSchema$State: com.jidesoft.plaf.windows.TMSchema$State UPHOT>;

        goto label6;

     label4:
        r2 = <com.jidesoft.plaf.windows.TMSchema$State: com.jidesoft.plaf.windows.TMSchema$State UPNORMAL>;

        goto label6;

     label5:
        r2 = r0;

     label6:
        return r2;
    }

    private synchronized com.jidesoft.plaf.windows.TMSchema$State getState(javax.swing.JComponent, com.jidesoft.plaf.windows.TMSchema$Part)
    {
        javax.swing.JComponent r0;
        com.jidesoft.plaf.windows.AnimationController r4;
        com.jidesoft.plaf.windows.TMSchema$State r5;
        com.jidesoft.plaf.windows.TMSchema$Part r1;
        com.jidesoft.plaf.windows.AnimationController$PartUIClientPropertyKey $r2;
        java.lang.Object $r3;
        boolean $z0;

        r4 := @this: com.jidesoft.plaf.windows.AnimationController;

        r0 := @parameter0: javax.swing.JComponent;

        r1 := @parameter1: com.jidesoft.plaf.windows.TMSchema$Part;

        r5 = null;

        $r2 = staticinvoke <com.jidesoft.plaf.windows.AnimationController$PartUIClientPropertyKey: com.jidesoft.plaf.windows.AnimationController$PartUIClientPropertyKey getKey(com.jidesoft.plaf.windows.TMSchema$Part)>(r1);

        $r3 = virtualinvoke r0.<javax.swing.JComponent: java.lang.Object getClientProperty(java.lang.Object)>($r2);

        $z0 = $r3 instanceof com.jidesoft.plaf.windows.TMSchema$State;

        if $z0 == 0 goto label1;

        r5 = (com.jidesoft.plaf.windows.TMSchema$State) $r3;

     label1:
        return r5;
    }

    private synchronized void putState(javax.swing.JComponent, com.jidesoft.plaf.windows.TMSchema$Part, com.jidesoft.plaf.windows.TMSchema$State)
    {
        javax.swing.JComponent r0;
        com.jidesoft.plaf.windows.AnimationController r4;
        com.jidesoft.plaf.windows.TMSchema$State r3;
        com.jidesoft.plaf.windows.TMSchema$Part r1;
        com.jidesoft.plaf.windows.AnimationController$PartUIClientPropertyKey $r2;

        r4 := @this: com.jidesoft.plaf.windows.AnimationController;

        r0 := @parameter0: javax.swing.JComponent;

        r1 := @parameter1: com.jidesoft.plaf.windows.TMSchema$Part;

        r3 := @parameter2: com.jidesoft.plaf.windows.TMSchema$State;

        $r2 = staticinvoke <com.jidesoft.plaf.windows.AnimationController$PartUIClientPropertyKey: com.jidesoft.plaf.windows.AnimationController$PartUIClientPropertyKey getKey(com.jidesoft.plaf.windows.TMSchema$Part)>(r1);

        virtualinvoke r0.<javax.swing.JComponent: void putClientProperty(java.lang.Object,java.lang.Object)>($r2, r3);

        return;
    }

    private synchronized void startAnimation(javax.swing.JComponent, com.jidesoft.plaf.windows.TMSchema$Part, com.jidesoft.plaf.windows.TMSchema$State, com.jidesoft.plaf.windows.TMSchema$State, long)
    {
        long l0;
        com.jidesoft.plaf.windows.TMSchema$Part r6;
        byte $b1;
        com.jidesoft.plaf.windows.TMSchema$State r0, $r1, r8;
        java.util.Map $r4, $r12, $r13, $r14, r15;
        int $i2, $i3;
        javax.swing.Timer $r9, $r10;
        boolean $z0, z1;
        javax.swing.JComponent r3;
        java.util.EnumMap $r16;
        com.jidesoft.plaf.windows.AnimationController r2;
        com.jidesoft.plaf.windows.AnimationController$AnimationState $r17;
        java.lang.Object $r5;

        r2 := @this: com.jidesoft.plaf.windows.AnimationController;

        r3 := @parameter0: javax.swing.JComponent;

        r6 := @parameter1: com.jidesoft.plaf.windows.TMSchema$Part;

        r8 := @parameter2: com.jidesoft.plaf.windows.TMSchema$State;

        r0 := @parameter3: com.jidesoft.plaf.windows.TMSchema$State;

        l0 := @parameter4: long;

        z1 = 0;

        $r1 = <com.jidesoft.plaf.windows.TMSchema$State: com.jidesoft.plaf.windows.TMSchema$State DEFAULTED>;

        if r0 != $r1 goto label1;

        z1 = 1;

     label1:
        $r4 = r2.<com.jidesoft.plaf.windows.AnimationController: java.util.Map animationStateMap>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r3);

        $r14 = (java.util.Map) $r5;

        r15 = $r14;

        $b1 = l0 cmp 0L;

        $i3 = (int) $b1;

        if $i3 > 0 goto label3;

        if $r14 == null goto label2;

        interfaceinvoke $r14.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r6);

        $i2 = interfaceinvoke $r14.<java.util.Map: int size()>();

        if $i2 != 0 goto label2;

        $r13 = r2.<com.jidesoft.plaf.windows.AnimationController: java.util.Map animationStateMap>;

        interfaceinvoke $r13.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r3);

     label2:
        return;

     label3:
        if $r14 != null goto label4;

        $r16 = new java.util.EnumMap;

        specialinvoke $r16.<java.util.EnumMap: void <init>(java.lang.Class)>(class "Lcom/jidesoft/plaf/windows/TMSchema$Part;");

        r15 = $r16;

        $r12 = r2.<com.jidesoft.plaf.windows.AnimationController: java.util.Map animationStateMap>;

        interfaceinvoke $r12.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, $r16);

     label4:
        $r17 = new com.jidesoft.plaf.windows.AnimationController$AnimationState;

        specialinvoke $r17.<com.jidesoft.plaf.windows.AnimationController$AnimationState: void <init>(com.jidesoft.plaf.windows.TMSchema$State,long,boolean)>(r8, l0, z1);

        interfaceinvoke r15.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r6, $r17);

        $r9 = r2.<com.jidesoft.plaf.windows.AnimationController: javax.swing.Timer timer>;

        $z0 = virtualinvoke $r9.<javax.swing.Timer: boolean isRunning()>();

        if $z0 != 0 goto label5;

        $r10 = r2.<com.jidesoft.plaf.windows.AnimationController: javax.swing.Timer timer>;

        virtualinvoke $r10.<javax.swing.Timer: void start()>();

     label5:
        return;
    }

    static void paintSkin(javax.swing.JComponent, com.jidesoft.plaf.windows.XPStyle$Skin, java.awt.Graphics, int, int, int, int, com.jidesoft.plaf.windows.TMSchema$State)
    {
        java.lang.Throwable $r11;
        com.jidesoft.plaf.windows.TMSchema$Part $r3, $r9;
        com.jidesoft.plaf.windows.TMSchema$State r2;
        java.util.Map $r5, r7;
        int i0, i1, i2, i3;
        boolean $z0;
        javax.swing.JComponent r0;
        com.jidesoft.plaf.windows.AnimationController $r4;
        com.jidesoft.plaf.windows.AnimationController$AnimationState r12;
        com.jidesoft.plaf.windows.XPStyle$Skin r1;
        java.awt.Graphics r8;
        java.lang.Object $r6, $r10;

        r0 := @parameter0: javax.swing.JComponent;

        r1 := @parameter1: com.jidesoft.plaf.windows.XPStyle$Skin;

        r8 := @parameter2: java.awt.Graphics;

        i0 := @parameter3: int;

        i1 := @parameter4: int;

        i2 := @parameter5: int;

        i3 := @parameter6: int;

        r2 := @parameter7: com.jidesoft.plaf.windows.TMSchema$State;

        $z0 = <com.jidesoft.plaf.windows.AnimationController: boolean VISTA_ANIMATION_DISABLED>;

        if $z0 == 0 goto label1;

        virtualinvoke r1.<com.jidesoft.plaf.windows.XPStyle$Skin: void paintSkinRaw(java.awt.Graphics,int,int,int,int,com.jidesoft.plaf.windows.TMSchema$State)>(r8, i0, i1, i2, i3, r2);

        return;

     label1:
        $r3 = r1.<com.jidesoft.plaf.windows.XPStyle$Skin: com.jidesoft.plaf.windows.TMSchema$Part part>;

        staticinvoke <com.jidesoft.plaf.windows.AnimationController: void triggerAnimation(javax.swing.JComponent,com.jidesoft.plaf.windows.TMSchema$Part,com.jidesoft.plaf.windows.TMSchema$State)>(r0, $r3, r2);

        $r4 = staticinvoke <com.jidesoft.plaf.windows.AnimationController: com.jidesoft.plaf.windows.AnimationController getAnimationController()>();

        entermonitor $r4;

     label2:
        r12 = null;

        $r5 = $r4.<com.jidesoft.plaf.windows.AnimationController: java.util.Map animationStateMap>;

        $r6 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0);

        r7 = (java.util.Map) $r6;

        if r7 == null goto label3;

        $r9 = r1.<com.jidesoft.plaf.windows.XPStyle$Skin: com.jidesoft.plaf.windows.TMSchema$Part part>;

        $r10 = interfaceinvoke r7.<java.util.Map: java.lang.Object get(java.lang.Object)>($r9);

        r12 = (com.jidesoft.plaf.windows.AnimationController$AnimationState) $r10;

     label3:
        if r12 == null goto label4;

        virtualinvoke r12.<com.jidesoft.plaf.windows.AnimationController$AnimationState: void paintSkin(com.jidesoft.plaf.windows.XPStyle$Skin,java.awt.Graphics,int,int,int,int,com.jidesoft.plaf.windows.TMSchema$State)>(r1, r8, i0, i1, i2, i3, r2);

        goto label5;

     label4:
        virtualinvoke r1.<com.jidesoft.plaf.windows.XPStyle$Skin: void paintSkinRaw(java.awt.Graphics,int,int,int,int,com.jidesoft.plaf.windows.TMSchema$State)>(r8, i0, i1, i2, i3, r2);

     label5:
        exitmonitor $r4;

     label6:
        goto label9;

     label7:
        $r11 := @caughtexception;

        exitmonitor $r4;

     label8:
        throw $r11;

     label9:
        return;

        catch java.lang.Throwable from label2 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    public synchronized void propertyChange(java.beans.PropertyChangeEvent)
    {
        com.jidesoft.plaf.windows.AnimationController r3;
        java.lang.Object $r2;
        java.lang.String $r1;
        java.beans.PropertyChangeEvent r0;
        boolean $z0;

        r3 := @this: com.jidesoft.plaf.windows.AnimationController;

        r0 := @parameter0: java.beans.PropertyChangeEvent;

        $r1 = virtualinvoke r0.<java.beans.PropertyChangeEvent: java.lang.String getPropertyName()>();

        if "lookAndFeel" != $r1 goto label1;

        $r2 = virtualinvoke r0.<java.beans.PropertyChangeEvent: java.lang.Object getNewValue()>();

        $z0 = $r2 instanceof com.sun.java.swing.plaf.windows.WindowsLookAndFeel;

        if $z0 != 0 goto label1;

        specialinvoke r3.<com.jidesoft.plaf.windows.AnimationController: void dispose()>();

     label1:
        return;
    }

    public synchronized void actionPerformed(java.awt.event.ActionEvent)
    {
        java.util.Map $r1, $r4, $r8, $r10, $r22;
        javax.swing.Timer $r5;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.util.Set $r2, $r13;
        com.jidesoft.plaf.windows.AnimationController$AnimationState $r20;
        com.jidesoft.plaf.windows.TMSchema$Part r27, r28;
        java.util.ArrayList $r12, $r17, $r21, r24, r25;
        int $i0, $i1, $i2, $i3;
        javax.swing.JComponent r26, r29;
        java.util.Iterator $r3, $r6, $r14, $r15;
        com.jidesoft.plaf.windows.AnimationController r0;
        java.awt.event.ActionEvent r23;
        java.lang.Object $r7, $r9, $r11, $r16, $r18, $r19;

        r0 := @this: com.jidesoft.plaf.windows.AnimationController;

        r23 := @parameter0: java.awt.event.ActionEvent;

        r24 = null;

        r25 = null;

        $r1 = r0.<com.jidesoft.plaf.windows.AnimationController: java.util.Map animationStateMap>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label01:
        $z5 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label14;

        $r9 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r26 = (javax.swing.JComponent) $r9;

        virtualinvoke r26.<javax.swing.JComponent: void repaint()>();

        if r25 == null goto label02;

        interfaceinvoke r25.<java.util.List: void clear()>();

     label02:
        $r10 = r0.<com.jidesoft.plaf.windows.AnimationController: java.util.Map animationStateMap>;

        $r11 = interfaceinvoke $r10.<java.util.Map: java.lang.Object get(java.lang.Object)>(r26);

        $r22 = (java.util.Map) $r11;

        $z1 = virtualinvoke r26.<javax.swing.JComponent: boolean isShowing()>();

        if $z1 == 0 goto label03;

        if $r22 == null goto label03;

        $i1 = interfaceinvoke $r22.<java.util.Map: int size()>();

        if $i1 != 0 goto label05;

     label03:
        if r24 != null goto label04;

        $r12 = new java.util.ArrayList;

        specialinvoke $r12.<java.util.ArrayList: void <init>()>();

        r24 = $r12;

     label04:
        interfaceinvoke r24.<java.util.List: boolean add(java.lang.Object)>(r26);

        goto label01;

     label05:
        $r13 = interfaceinvoke $r22.<java.util.Map: java.util.Set keySet()>();

        $r14 = interfaceinvoke $r13.<java.util.Set: java.util.Iterator iterator()>();

     label06:
        $z2 = interfaceinvoke $r14.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label09;

        $r18 = interfaceinvoke $r14.<java.util.Iterator: java.lang.Object next()>();

        r27 = (com.jidesoft.plaf.windows.TMSchema$Part) $r18;

        $r19 = interfaceinvoke $r22.<java.util.Map: java.lang.Object get(java.lang.Object)>(r27);

        $r20 = (com.jidesoft.plaf.windows.AnimationController$AnimationState) $r19;

        $z4 = virtualinvoke $r20.<com.jidesoft.plaf.windows.AnimationController$AnimationState: boolean isDone()>();

        if $z4 == 0 goto label08;

        if r25 != null goto label07;

        $r21 = new java.util.ArrayList;

        specialinvoke $r21.<java.util.ArrayList: void <init>()>();

        r25 = $r21;

     label07:
        interfaceinvoke r25.<java.util.List: boolean add(java.lang.Object)>(r27);

     label08:
        goto label06;

     label09:
        if r25 == null goto label13;

        $i2 = interfaceinvoke r25.<java.util.List: int size()>();

        $i3 = interfaceinvoke $r22.<java.util.Map: int size()>();

        if $i2 != $i3 goto label11;

        if r24 != null goto label10;

        $r17 = new java.util.ArrayList;

        specialinvoke $r17.<java.util.ArrayList: void <init>()>();

        r24 = $r17;

     label10:
        interfaceinvoke r24.<java.util.List: boolean add(java.lang.Object)>(r26);

        goto label13;

     label11:
        $r15 = interfaceinvoke r25.<java.util.List: java.util.Iterator iterator()>();

     label12:
        $z3 = interfaceinvoke $r15.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label13;

        $r16 = interfaceinvoke $r15.<java.util.Iterator: java.lang.Object next()>();

        r28 = (com.jidesoft.plaf.windows.TMSchema$Part) $r16;

        interfaceinvoke $r22.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r28);

        goto label12;

     label13:
        goto label01;

     label14:
        if r24 == null goto label16;

        $r6 = interfaceinvoke r24.<java.util.List: java.util.Iterator iterator()>();

     label15:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label16;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r29 = (javax.swing.JComponent) $r7;

        $r8 = r0.<com.jidesoft.plaf.windows.AnimationController: java.util.Map animationStateMap>;

        interfaceinvoke $r8.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r29);

        goto label15;

     label16:
        $r4 = r0.<com.jidesoft.plaf.windows.AnimationController: java.util.Map animationStateMap>;

        $i0 = interfaceinvoke $r4.<java.util.Map: int size()>();

        if $i0 != 0 goto label17;

        $r5 = r0.<com.jidesoft.plaf.windows.AnimationController: javax.swing.Timer timer>;

        virtualinvoke $r5.<javax.swing.Timer: void stop()>();

     label17:
        return;
    }

    private synchronized void dispose()
    {
        java.lang.Throwable $r4;
        com.jidesoft.plaf.windows.AnimationController r0;
        sun.awt.AppContext $r2;
        java.lang.Object $r3;
        javax.swing.Timer $r1;

        r0 := @this: com.jidesoft.plaf.windows.AnimationController;

        $r1 = r0.<com.jidesoft.plaf.windows.AnimationController: javax.swing.Timer timer>;

        virtualinvoke $r1.<javax.swing.Timer: void stop()>();

        staticinvoke <javax.swing.UIManager: void removePropertyChangeListener(java.beans.PropertyChangeListener)>(r0);

        entermonitor class "Lcom/jidesoft/plaf/windows/AnimationController;";

     label1:
        $r2 = staticinvoke <sun.awt.AppContext: sun.awt.AppContext getAppContext()>();

        $r3 = <com.jidesoft.plaf.windows.AnimationController: java.lang.Object ANIMATION_CONTROLLER_KEY>;

        virtualinvoke $r2.<sun.awt.AppContext: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, null);

        exitmonitor class "Lcom/jidesoft/plaf/windows/AnimationController;";

     label2:
        goto label5;

     label3:
        $r4 := @caughtexception;

        exitmonitor class "Lcom/jidesoft/plaf/windows/AnimationController;";

     label4:
        throw $r4;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    static void <clinit>()
    {
        sun.security.action.GetBooleanAction $r0;
        java.lang.Boolean $r2;
        java.lang.Object $r1;
        java.lang.StringBuilder $r3;
        boolean $z0;

        $r0 = new sun.security.action.GetBooleanAction;

        specialinvoke $r0.<sun.security.action.GetBooleanAction: void <init>(java.lang.String)>("swing.disablevistaanimation");

        $r1 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r0);

        $r2 = (java.lang.Boolean) $r1;

        $z0 = virtualinvoke $r2.<java.lang.Boolean: boolean booleanValue()>();

        <com.jidesoft.plaf.windows.AnimationController: boolean VISTA_ANIMATION_DISABLED> = $z0;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>("ANIMATION_CONTROLLER_KEY");

        <com.jidesoft.plaf.windows.AnimationController: java.lang.Object ANIMATION_CONTROLLER_KEY> = $r3;

        return;
    }
}
