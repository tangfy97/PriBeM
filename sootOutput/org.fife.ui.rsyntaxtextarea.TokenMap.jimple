public class org.fife.ui.rsyntaxtextarea.TokenMap extends java.lang.Object
{
    private int size;
    private org.fife.ui.rsyntaxtextarea.TokenMap$TokenMapToken[] tokenMap;
    private boolean ignoreCase;
    private static final int DEFAULT_TOKEN_MAP_SIZE;

    public void <init>()
    {
        org.fife.ui.rsyntaxtextarea.TokenMap r0;

        r0 := @this: org.fife.ui.rsyntaxtextarea.TokenMap;

        specialinvoke r0.<org.fife.ui.rsyntaxtextarea.TokenMap: void <init>(int)>(52);

        return;
    }

    public void <init>(int)
    {
        int i0;
        org.fife.ui.rsyntaxtextarea.TokenMap r0;

        r0 := @this: org.fife.ui.rsyntaxtextarea.TokenMap;

        i0 := @parameter0: int;

        specialinvoke r0.<org.fife.ui.rsyntaxtextarea.TokenMap: void <init>(int,boolean)>(i0, 0);

        return;
    }

    public void <init>(boolean)
    {
        org.fife.ui.rsyntaxtextarea.TokenMap r0;
        boolean z0;

        r0 := @this: org.fife.ui.rsyntaxtextarea.TokenMap;

        z0 := @parameter0: boolean;

        specialinvoke r0.<org.fife.ui.rsyntaxtextarea.TokenMap: void <init>(int,boolean)>(52, z0);

        return;
    }

    public void <init>(int, boolean)
    {
        int i0;
        org.fife.ui.rsyntaxtextarea.TokenMap$TokenMapToken[] $r1;
        org.fife.ui.rsyntaxtextarea.TokenMap r0;
        boolean z0;

        r0 := @this: org.fife.ui.rsyntaxtextarea.TokenMap;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.fife.ui.rsyntaxtextarea.TokenMap: int size> = i0;

        $r1 = newarray (org.fife.ui.rsyntaxtextarea.TokenMap$TokenMapToken)[i0];

        r0.<org.fife.ui.rsyntaxtextarea.TokenMap: org.fife.ui.rsyntaxtextarea.TokenMap$TokenMapToken[] tokenMap> = $r1;

        r0.<org.fife.ui.rsyntaxtextarea.TokenMap: boolean ignoreCase> = z0;

        return;
    }

    private void addTokenToBucket(int, org.fife.ui.rsyntaxtextarea.TokenMap$TokenMapToken)
    {
        int i0;
        org.fife.ui.rsyntaxtextarea.TokenMap$TokenMapToken[] $r1, $r4;
        org.fife.ui.rsyntaxtextarea.TokenMap r0;
        org.fife.ui.rsyntaxtextarea.TokenMap$TokenMapToken r2, r3;

        r0 := @this: org.fife.ui.rsyntaxtextarea.TokenMap;

        i0 := @parameter0: int;

        r3 := @parameter1: org.fife.ui.rsyntaxtextarea.TokenMap$TokenMapToken;

        $r1 = r0.<org.fife.ui.rsyntaxtextarea.TokenMap: org.fife.ui.rsyntaxtextarea.TokenMap$TokenMapToken[] tokenMap>;

        r2 = $r1[i0];

        r3.<org.fife.ui.rsyntaxtextarea.TokenMap$TokenMapToken: org.fife.ui.rsyntaxtextarea.TokenMap$TokenMapToken nextToken> = r2;

        $r4 = r0.<org.fife.ui.rsyntaxtextarea.TokenMap: org.fife.ui.rsyntaxtextarea.TokenMap$TokenMapToken[] tokenMap>;

        $r4[i0] = r3;

        return;
    }

    public int get(javax.swing.text.Segment, int, int)
    {
        int i0, i1, $i2;
        char[] $r2;
        javax.swing.text.Segment r1;
        org.fife.ui.rsyntaxtextarea.TokenMap r0;

        r0 := @this: org.fife.ui.rsyntaxtextarea.TokenMap;

        r1 := @parameter0: javax.swing.text.Segment;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = r1.<javax.swing.text.Segment: char[] array>;

        $i2 = virtualinvoke r0.<org.fife.ui.rsyntaxtextarea.TokenMap: int get(char[],int,int)>($r2, i0, i1);

        return $i2;
    }

    public int get(char[], int, int)
    {
        boolean $z0;
        int i0, i1, $i2, i3, $i4, $i5, $i6, $i7, $i8, $i11, $i13, $i14, $i15, $i16, $i17, i20, i21, i22, i23, i24, i25, $i26, $i27, $i28, $i29, $i31;
        org.fife.ui.rsyntaxtextarea.TokenMap r0;
        char $c9, $c10, $c12, $c18, $c19;
        org.fife.ui.rsyntaxtextarea.TokenMap$TokenMapToken[] $r2;
        char[] r1, r4, r5;
        org.fife.ui.rsyntaxtextarea.TokenMap$TokenMapToken r3;

        r0 := @this: org.fife.ui.rsyntaxtextarea.TokenMap;

        r1 := @parameter0: char[];

        i1 := @parameter1: int;

        i0 := @parameter2: int;

        $i2 = i0 - i1;

        i3 = $i2 + 1;

        $i4 = specialinvoke r0.<org.fife.ui.rsyntaxtextarea.TokenMap: int getHashCode(char[],int,int)>(r1, i1, i3);

        $r2 = r0.<org.fife.ui.rsyntaxtextarea.TokenMap: org.fife.ui.rsyntaxtextarea.TokenMap$TokenMapToken[] tokenMap>;

        r3 = $r2[$i4];

        $z0 = r0.<org.fife.ui.rsyntaxtextarea.TokenMap: boolean ignoreCase>;

        if $z0 != 0 goto label5;

     label1:
        if r3 == null goto label9;

        $i13 = r3.<org.fife.ui.rsyntaxtextarea.TokenMap$TokenMapToken: int length>;

        if $i13 != i3 goto label4;

        r4 = r3.<org.fife.ui.rsyntaxtextarea.TokenMap$TokenMapToken: char[] text>;

        i20 = r3.<org.fife.ui.rsyntaxtextarea.TokenMap$TokenMapToken: int offset>;

        i21 = i1;

        i22 = i3;

     label2:
        $i14 = i22;

        i22 = i22 - 1;

        if $i14 <= 0 goto label3;

        $i16 = i21;

        i21 = i21 + 1;

        $c19 = r1[$i16];

        $i17 = i20;

        i20 = i20 + 1;

        $c18 = r4[$i17];

        $i26 = (int) $c19;

        $i27 = (int) $c18;

        if $i26 == $i27 goto label2;

        r3 = r3.<org.fife.ui.rsyntaxtextarea.TokenMap$TokenMapToken: org.fife.ui.rsyntaxtextarea.TokenMap$TokenMapToken nextToken>;

        goto label1;

     label3:
        $i15 = r3.<org.fife.ui.rsyntaxtextarea.TokenMap$TokenMapToken: int tokenType>;

        return $i15;

     label4:
        r3 = r3.<org.fife.ui.rsyntaxtextarea.TokenMap$TokenMapToken: org.fife.ui.rsyntaxtextarea.TokenMap$TokenMapToken nextToken>;

        goto label1;

     label5:
        if r3 == null goto label9;

        $i5 = r3.<org.fife.ui.rsyntaxtextarea.TokenMap$TokenMapToken: int length>;

        if $i5 != i3 goto label8;

        r5 = r3.<org.fife.ui.rsyntaxtextarea.TokenMap$TokenMapToken: char[] text>;

        i23 = r3.<org.fife.ui.rsyntaxtextarea.TokenMap$TokenMapToken: int offset>;

        i24 = i1;

        i25 = i3;

     label6:
        $i6 = i25;

        i25 = i25 - 1;

        if $i6 <= 0 goto label7;

        $i8 = i24;

        i24 = i24 + 1;

        $c9 = r1[$i8];

        $c10 = staticinvoke <org.fife.ui.rsyntaxtextarea.RSyntaxUtilities: char toLowerCase(char)>($c9);

        $i11 = i23;

        i23 = i23 + 1;

        $c12 = r5[$i11];

        $i28 = (int) $c10;

        $i29 = (int) $c12;

        if $i28 == $i29 goto label6;

        r3 = r3.<org.fife.ui.rsyntaxtextarea.TokenMap$TokenMapToken: org.fife.ui.rsyntaxtextarea.TokenMap$TokenMapToken nextToken>;

        goto label5;

     label7:
        $i7 = r3.<org.fife.ui.rsyntaxtextarea.TokenMap$TokenMapToken: int tokenType>;

        return $i7;

     label8:
        r3 = r3.<org.fife.ui.rsyntaxtextarea.TokenMap$TokenMapToken: org.fife.ui.rsyntaxtextarea.TokenMap$TokenMapToken nextToken>;

        goto label5;

     label9:
        $i31 = (int) -1;

        return $i31;
    }

    private final int getHashCode(char[], int, int)
    {
        char $c1, $c2, $c6, $c7;
        int i0, i3, $i4, $i5, $i8, $i9, $i10, $i11, $i12;
        char[] r0;
        org.fife.ui.rsyntaxtextarea.TokenMap r1;

        r1 := @this: org.fife.ui.rsyntaxtextarea.TokenMap;

        r0 := @parameter0: char[];

        i0 := @parameter1: int;

        i3 := @parameter2: int;

        $c1 = r0[i0];

        $c2 = staticinvoke <org.fife.ui.rsyntaxtextarea.RSyntaxUtilities: char toLowerCase(char)>($c1);

        $i4 = i0 + i3;

        $i5 = $i4 - 1;

        $c6 = r0[$i5];

        $c7 = staticinvoke <org.fife.ui.rsyntaxtextarea.RSyntaxUtilities: char toLowerCase(char)>($c6);

        $i11 = (int) $c2;

        $i12 = (int) $c7;

        $i9 = $i11 + $i12;

        $i8 = r1.<org.fife.ui.rsyntaxtextarea.TokenMap: int size>;

        $i10 = $i9 % $i8;

        return $i10;
    }

    protected boolean isIgnoringCase()
    {
        org.fife.ui.rsyntaxtextarea.TokenMap r0;
        boolean $z0;

        r0 := @this: org.fife.ui.rsyntaxtextarea.TokenMap;

        $z0 = r0.<org.fife.ui.rsyntaxtextarea.TokenMap: boolean ignoreCase>;

        return $z0;
    }

    public void put(java.lang.String, int)
    {
        int i0;
        char[] $r2, $r4;
        java.lang.String r1, $r3;
        org.fife.ui.rsyntaxtextarea.TokenMap r0;
        boolean $z0;

        r0 := @this: org.fife.ui.rsyntaxtextarea.TokenMap;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $z0 = virtualinvoke r0.<org.fife.ui.rsyntaxtextarea.TokenMap: boolean isIgnoringCase()>();

        if $z0 == 0 goto label1;

        $r3 = virtualinvoke r1.<java.lang.String: java.lang.String toLowerCase()>();

        $r4 = virtualinvoke $r3.<java.lang.String: char[] toCharArray()>();

        specialinvoke r0.<org.fife.ui.rsyntaxtextarea.TokenMap: void put(char[],int)>($r4, i0);

        goto label2;

     label1:
        $r2 = virtualinvoke r1.<java.lang.String: char[] toCharArray()>();

        specialinvoke r0.<org.fife.ui.rsyntaxtextarea.TokenMap: void put(char[],int)>($r2, i0);

     label2:
        return;
    }

    private void put(char[], int)
    {
        int $i0, $i1, i2;
        char[] r1;
        org.fife.ui.rsyntaxtextarea.TokenMap r0;
        org.fife.ui.rsyntaxtextarea.TokenMap$TokenMapToken $r2;

        r0 := @this: org.fife.ui.rsyntaxtextarea.TokenMap;

        r1 := @parameter0: char[];

        i2 := @parameter1: int;

        $i0 = lengthof r1;

        $i1 = specialinvoke r0.<org.fife.ui.rsyntaxtextarea.TokenMap: int getHashCode(char[],int,int)>(r1, 0, $i0);

        $r2 = new org.fife.ui.rsyntaxtextarea.TokenMap$TokenMapToken;

        specialinvoke $r2.<org.fife.ui.rsyntaxtextarea.TokenMap$TokenMapToken: void <init>(char[],int)>(r1, i2);

        specialinvoke r0.<org.fife.ui.rsyntaxtextarea.TokenMap: void addTokenToBucket(int,org.fife.ui.rsyntaxtextarea.TokenMap$TokenMapToken)>($i1, $r2);

        return;
    }

    public static void <clinit>()
    {
        <org.fife.ui.rsyntaxtextarea.TokenMap: int DEFAULT_TOKEN_MAP_SIZE> = 52;

        return;
    }
}
