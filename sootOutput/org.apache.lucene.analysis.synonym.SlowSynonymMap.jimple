class org.apache.lucene.analysis.synonym.SlowSynonymMap extends java.lang.Object
{
    public org.apache.lucene.analysis.util.CharArrayMap submap;
    public org.apache.lucene.analysis.Token[] synonyms;
    int flags;
    static final int INCLUDE_ORIG;
    static final int IGNORE_CASE;

    public void <init>()
    {
        org.apache.lucene.analysis.synonym.SlowSynonymMap r0;

        r0 := @this: org.apache.lucene.analysis.synonym.SlowSynonymMap;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void <init>(boolean)
    {
        org.apache.lucene.analysis.synonym.SlowSynonymMap r0;
        int $i0, $i1;
        boolean z0;

        r0 := @this: org.apache.lucene.analysis.synonym.SlowSynonymMap;

        z0 := @parameter0: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if z0 == 0 goto label1;

        $i0 = r0.<org.apache.lucene.analysis.synonym.SlowSynonymMap: int flags>;

        $i1 = $i0 | 2;

        r0.<org.apache.lucene.analysis.synonym.SlowSynonymMap: int flags> = $i1;

     label1:
        return;
    }

    public boolean includeOrig()
    {
        org.apache.lucene.analysis.synonym.SlowSynonymMap r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: org.apache.lucene.analysis.synonym.SlowSynonymMap;

        $i0 = r0.<org.apache.lucene.analysis.synonym.SlowSynonymMap: int flags>;

        $i1 = $i0 & 1;

        if $i1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean ignoreCase()
    {
        org.apache.lucene.analysis.synonym.SlowSynonymMap r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: org.apache.lucene.analysis.synonym.SlowSynonymMap;

        $i0 = r0.<org.apache.lucene.analysis.synonym.SlowSynonymMap: int flags>;

        $i1 = $i0 & 2;

        if $i1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void add(java.util.List, java.util.List, boolean, boolean)
    {
        boolean $z0, z1, z2, $z3;
        java.util.List r1, $r6, r7, $r28;
        java.lang.StringBuilder $r12, $r13, $r14;
        org.apache.lucene.analysis.util.CharArrayMap $r18, $r19, $r22, $r23;
        java.lang.Object[] $r9;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        java.lang.String $r15, r17;
        java.util.Iterator $r2;
        org.apache.lucene.analysis.Token[] $r3, $r4, $r5, $r8, $r10;
        java.lang.IllegalArgumentException $r11;
        org.apache.lucene.util.Version $r24;
        org.apache.lucene.analysis.synonym.SlowSynonymMap r0, $r21, $r25, r26, r27;
        java.lang.Object $r16, $r20;

        r0 := @this: org.apache.lucene.analysis.synonym.SlowSynonymMap;

        r1 := @parameter0: java.util.List;

        r7 := @parameter1: java.util.List;

        z1 := @parameter2: boolean;

        z2 := @parameter3: boolean;

        r26 = r0;

        $r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r16 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r17 = (java.lang.String) $r16;

        $r18 = r26.<org.apache.lucene.analysis.synonym.SlowSynonymMap: org.apache.lucene.analysis.util.CharArrayMap submap>;

        if $r18 != null goto label2;

        $r23 = new org.apache.lucene.analysis.util.CharArrayMap;

        $r24 = <org.apache.lucene.util.Version: org.apache.lucene.util.Version LUCENE_40>;

        $z3 = virtualinvoke r0.<org.apache.lucene.analysis.synonym.SlowSynonymMap: boolean ignoreCase()>();

        specialinvoke $r23.<org.apache.lucene.analysis.util.CharArrayMap: void <init>(org.apache.lucene.util.Version,int,boolean)>($r24, 1, $z3);

        r26.<org.apache.lucene.analysis.synonym.SlowSynonymMap: org.apache.lucene.analysis.util.CharArrayMap submap> = $r23;

     label2:
        $r19 = r26.<org.apache.lucene.analysis.synonym.SlowSynonymMap: org.apache.lucene.analysis.util.CharArrayMap submap>;

        $r20 = virtualinvoke $r19.<org.apache.lucene.analysis.util.CharArrayMap: java.lang.Object get(java.lang.CharSequence)>(r17);

        $r25 = (org.apache.lucene.analysis.synonym.SlowSynonymMap) $r20;

        r27 = $r25;

        if $r25 != null goto label3;

        $r21 = new org.apache.lucene.analysis.synonym.SlowSynonymMap;

        specialinvoke $r21.<org.apache.lucene.analysis.synonym.SlowSynonymMap: void <init>()>();

        r27 = $r21;

        $i5 = $r21.<org.apache.lucene.analysis.synonym.SlowSynonymMap: int flags>;

        $i3 = r0.<org.apache.lucene.analysis.synonym.SlowSynonymMap: int flags>;

        $i4 = $i3 & 2;

        $i6 = $i5 | $i4;

        $r21.<org.apache.lucene.analysis.synonym.SlowSynonymMap: int flags> = $i6;

        $r22 = r26.<org.apache.lucene.analysis.synonym.SlowSynonymMap: org.apache.lucene.analysis.util.CharArrayMap submap>;

        virtualinvoke $r22.<org.apache.lucene.analysis.util.CharArrayMap: java.lang.Object put(java.lang.String,java.lang.Object)>(r17, $r21);

     label3:
        r26 = r27;

        goto label1;

     label4:
        $r3 = r26.<org.apache.lucene.analysis.synonym.SlowSynonymMap: org.apache.lucene.analysis.Token[] synonyms>;

        if $r3 == null goto label5;

        if z2 != 0 goto label5;

        $r11 = new java.lang.IllegalArgumentException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SynonymFilter: there is already a mapping for ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r15);

        throw $r11;

     label5:
        $r4 = r26.<org.apache.lucene.analysis.synonym.SlowSynonymMap: org.apache.lucene.analysis.Token[] synonyms>;

        if $r4 != null goto label6;

        $r28 = r7;

        goto label7;

     label6:
        $r5 = r26.<org.apache.lucene.analysis.synonym.SlowSynonymMap: org.apache.lucene.analysis.Token[] synonyms>;

        $r6 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r5);

        $r28 = staticinvoke <org.apache.lucene.analysis.synonym.SlowSynonymMap: java.util.List mergeTokens(java.util.List,java.util.List)>($r6, r7);

     label7:
        $i0 = interfaceinvoke $r28.<java.util.List: int size()>();

        $r8 = newarray (org.apache.lucene.analysis.Token)[$i0];

        $r9 = interfaceinvoke $r28.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r8);

        $r10 = (org.apache.lucene.analysis.Token[]) $r9;

        r26.<org.apache.lucene.analysis.synonym.SlowSynonymMap: org.apache.lucene.analysis.Token[] synonyms> = $r10;

        if z1 == 0 goto label8;

        $i1 = r26.<org.apache.lucene.analysis.synonym.SlowSynonymMap: int flags>;

        $i2 = $i1 | 1;

        r26.<org.apache.lucene.analysis.synonym.SlowSynonymMap: int flags> = $i2;

     label8:
        return;
    }

    public java.lang.String toString()
    {
        org.apache.lucene.analysis.Token[] $r2, $r3, $r4;
        org.apache.lucene.analysis.Token $r5;
        org.apache.lucene.analysis.synonym.SlowSynonymMap r1;
        int $i0, $i1, $i2, i3;
        java.lang.StringBuilder $r0;
        java.lang.String $r7;
        org.apache.lucene.analysis.util.CharArrayMap $r6;

        r1 := @this: org.apache.lucene.analysis.synonym.SlowSynonymMap;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>(java.lang.String)>("<");

        $r2 = r1.<org.apache.lucene.analysis.synonym.SlowSynonymMap: org.apache.lucene.analysis.Token[] synonyms>;

        if $r2 == null goto label5;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[");

        i3 = 0;

     label1:
        $r3 = r1.<org.apache.lucene.analysis.synonym.SlowSynonymMap: org.apache.lucene.analysis.Token[] synonyms>;

        $i0 = lengthof $r3;

        if i3 >= $i0 goto label3;

        if i3 == 0 goto label2;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44);

     label2:
        $r4 = r1.<org.apache.lucene.analysis.synonym.SlowSynonymMap: org.apache.lucene.analysis.Token[] synonyms>;

        $r5 = $r4[i3];

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>($r5);

        i3 = i3 + 1;

        goto label1;

     label3:
        $i1 = r1.<org.apache.lucene.analysis.synonym.SlowSynonymMap: int flags>;

        $i2 = $i1 & 1;

        if $i2 == 0 goto label4;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",ORIG");

     label4:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("],");

     label5:
        $r6 = r1.<org.apache.lucene.analysis.synonym.SlowSynonymMap: org.apache.lucene.analysis.util.CharArrayMap submap>;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">");

        $r7 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;
    }

    public static java.util.List makeTokens(java.util.List)
    {
        java.util.Iterator $r2;
        java.util.ArrayList $r0;
        org.apache.lucene.analysis.Token $r5;
        java.util.List r1;
        int $i0;
        java.lang.Object $r3;
        java.lang.String r4;
        boolean $z0;

        r1 := @parameter0: java.util.List;

        $r0 = new java.util.ArrayList;

        $i0 = interfaceinvoke r1.<java.util.List: int size()>();

        specialinvoke $r0.<java.util.ArrayList: void <init>(int)>($i0);

        $r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.lang.String) $r3;

        $r5 = new org.apache.lucene.analysis.Token;

        specialinvoke $r5.<org.apache.lucene.analysis.Token: void <init>(java.lang.String,int,int,java.lang.String)>(r4, 0, 0, "SYNONYM");

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r5);

        goto label1;

     label2:
        return $r0;
    }

    public static java.util.List mergeTokens(java.util.List, java.util.List)
    {
        boolean $z0, $z1, $z2, $z3;
        java.util.List r1, r2;
        java.util.ArrayList $r0;
        org.apache.lucene.analysis.Token $r5, $r9, $r15, r16, $r17, r18, $r19, $r20;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10, $i11, i12, $i13, i14, $i15, $i16;
        java.lang.String $r6, $r10;
        java.util.Iterator $r3, $r4;
        char[] $r7, $r11;
        java.lang.Object $r8, $r12, $r13, $r14;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: java.util.List;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        if r1 == null goto label01;

        if r2 != null goto label04;

     label01:
        if r2 == null goto label02;

        virtualinvoke $r0.<java.util.ArrayList: boolean addAll(java.util.Collection)>(r2);

     label02:
        if r1 == null goto label03;

        virtualinvoke $r0.<java.util.ArrayList: boolean addAll(java.util.Collection)>(r1);

     label03:
        return $r0;

     label04:
        i10 = 0;

        $r3 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

        $r4 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label05;

        $r14 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r15 = (org.apache.lucene.analysis.Token) $r14;

        goto label06;

     label05:
        $r15 = null;

     label06:
        r16 = $r15;

        $z1 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label07;

        $r13 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r17 = (org.apache.lucene.analysis.Token) $r13;

        goto label08;

     label07:
        $r17 = null;

     label08:
        r18 = $r17;

        if r16 == null goto label09;

        $i11 = virtualinvoke r16.<org.apache.lucene.analysis.Token: int getPositionIncrement()>();

        goto label10;

     label09:
        $i11 = 0;

     label10:
        i12 = $i11;

        if r18 == null goto label11;

        $i13 = virtualinvoke r18.<org.apache.lucene.analysis.Token: int getPositionIncrement()>();

        goto label12;

     label11:
        $i13 = 0;

     label12:
        i14 = $i13;

     label13:
        if r16 != null goto label14;

        if r18 == null goto label26;

     label14:
        if r16 == null goto label20;

        if i12 <= i14 goto label15;

        if r18 != null goto label20;

     label15:
        $r9 = new org.apache.lucene.analysis.Token;

        $i5 = virtualinvoke r16.<org.apache.lucene.analysis.Token: int startOffset()>();

        $i6 = virtualinvoke r16.<org.apache.lucene.analysis.Token: int endOffset()>();

        $r10 = virtualinvoke r16.<org.apache.lucene.analysis.Token: java.lang.String type()>();

        specialinvoke $r9.<org.apache.lucene.analysis.Token: void <init>(int,int,java.lang.String)>($i5, $i6, $r10);

        $r11 = virtualinvoke r16.<org.apache.lucene.analysis.Token: char[] buffer()>();

        $i7 = virtualinvoke r16.<org.apache.lucene.analysis.Token: int length()>();

        virtualinvoke $r9.<org.apache.lucene.analysis.Token: void copyBuffer(char[],int,int)>($r11, 0, $i7);

        $i8 = i12 - i10;

        virtualinvoke $r9.<org.apache.lucene.analysis.Token: void setPositionIncrement(int)>($i8);

        virtualinvoke $r0.<java.util.ArrayList: boolean add(java.lang.Object)>($r9);

        i10 = i12;

        $z3 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label16;

        $r12 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r19 = (org.apache.lucene.analysis.Token) $r12;

        goto label17;

     label16:
        $r19 = null;

     label17:
        r16 = $r19;

        $i9 = i12;

        if $r19 == null goto label18;

        $i15 = virtualinvoke $r19.<org.apache.lucene.analysis.Token: int getPositionIncrement()>();

        goto label19;

     label18:
        $i15 = 0;

     label19:
        i12 = $i9 + $i15;

        goto label14;

     label20:
        if r18 == null goto label13;

        if i14 <= i12 goto label21;

        if r16 != null goto label13;

     label21:
        $r5 = new org.apache.lucene.analysis.Token;

        $i0 = virtualinvoke r18.<org.apache.lucene.analysis.Token: int startOffset()>();

        $i1 = virtualinvoke r18.<org.apache.lucene.analysis.Token: int endOffset()>();

        $r6 = virtualinvoke r18.<org.apache.lucene.analysis.Token: java.lang.String type()>();

        specialinvoke $r5.<org.apache.lucene.analysis.Token: void <init>(int,int,java.lang.String)>($i0, $i1, $r6);

        $r7 = virtualinvoke r18.<org.apache.lucene.analysis.Token: char[] buffer()>();

        $i2 = virtualinvoke r18.<org.apache.lucene.analysis.Token: int length()>();

        virtualinvoke $r5.<org.apache.lucene.analysis.Token: void copyBuffer(char[],int,int)>($r7, 0, $i2);

        $i3 = i14 - i10;

        virtualinvoke $r5.<org.apache.lucene.analysis.Token: void setPositionIncrement(int)>($i3);

        virtualinvoke $r0.<java.util.ArrayList: boolean add(java.lang.Object)>($r5);

        i10 = i14;

        $z2 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label22;

        $r8 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r20 = (org.apache.lucene.analysis.Token) $r8;

        goto label23;

     label22:
        $r20 = null;

     label23:
        r18 = $r20;

        $i4 = i14;

        if $r20 == null goto label24;

        $i16 = virtualinvoke $r20.<org.apache.lucene.analysis.Token: int getPositionIncrement()>();

        goto label25;

     label24:
        $i16 = 0;

     label25:
        i14 = $i4 + $i16;

        goto label20;

     label26:
        return $r0;
    }

    public static void <clinit>()
    {
        <org.apache.lucene.analysis.synonym.SlowSynonymMap: int IGNORE_CASE> = 2;

        <org.apache.lucene.analysis.synonym.SlowSynonymMap: int INCLUDE_ORIG> = 1;

        return;
    }
}
