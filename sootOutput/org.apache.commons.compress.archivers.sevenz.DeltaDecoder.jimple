class org.apache.commons.compress.archivers.sevenz.DeltaDecoder extends org.apache.commons.compress.archivers.sevenz.CoderBase
{

    void <init>()
    {
        java.lang.Class[] $r1;
        org.apache.commons.compress.archivers.sevenz.DeltaDecoder r0;

        r0 := @this: org.apache.commons.compress.archivers.sevenz.DeltaDecoder;

        $r1 = newarray (java.lang.Class)[1];

        $r1[0] = class "Ljava/lang/Number;";

        specialinvoke r0.<org.apache.commons.compress.archivers.sevenz.CoderBase: void <init>(java.lang.Class[])>($r1);

        return;
    }

    java.io.InputStream decode(java.io.InputStream, org.apache.commons.compress.archivers.sevenz.Coder, byte[]) throws java.io.IOException
    {
        byte[] r5;
        org.tukaani.xz.DeltaOptions $r0;
        int $i0;
        org.apache.commons.compress.archivers.sevenz.Coder r2;
        org.apache.commons.compress.archivers.sevenz.DeltaDecoder r1;
        java.io.InputStream r3, $r4;

        r1 := @this: org.apache.commons.compress.archivers.sevenz.DeltaDecoder;

        r3 := @parameter0: java.io.InputStream;

        r2 := @parameter1: org.apache.commons.compress.archivers.sevenz.Coder;

        r5 := @parameter2: byte[];

        $r0 = new org.tukaani.xz.DeltaOptions;

        $i0 = specialinvoke r1.<org.apache.commons.compress.archivers.sevenz.DeltaDecoder: int getOptionsFromCoder(org.apache.commons.compress.archivers.sevenz.Coder)>(r2);

        specialinvoke $r0.<org.tukaani.xz.DeltaOptions: void <init>(int)>($i0);

        $r4 = virtualinvoke $r0.<org.tukaani.xz.DeltaOptions: java.io.InputStream getInputStream(java.io.InputStream)>(r3);

        return $r4;
    }

    java.io.OutputStream encode(java.io.OutputStream, java.lang.Object) throws java.io.IOException
    {
        java.io.OutputStream r3;
        java.io.IOException $r6;
        org.tukaani.xz.FinishableWrapperOutputStream $r2;
        org.tukaani.xz.DeltaOptions $r1;
        org.tukaani.xz.UnsupportedOptionsException $r5;
        int $i0;
        java.lang.Object r0;
        org.tukaani.xz.FinishableOutputStream $r4;
        java.lang.String $r7;
        org.apache.commons.compress.archivers.sevenz.DeltaDecoder r8;

        r8 := @this: org.apache.commons.compress.archivers.sevenz.DeltaDecoder;

        r3 := @parameter0: java.io.OutputStream;

        r0 := @parameter1: java.lang.Object;

        $i0 = staticinvoke <org.apache.commons.compress.archivers.sevenz.DeltaDecoder: int numberOptionOrDefault(java.lang.Object,int)>(r0, 1);

     label1:
        $r1 = new org.tukaani.xz.DeltaOptions;

        specialinvoke $r1.<org.tukaani.xz.DeltaOptions: void <init>(int)>($i0);

        $r2 = new org.tukaani.xz.FinishableWrapperOutputStream;

        specialinvoke $r2.<org.tukaani.xz.FinishableWrapperOutputStream: void <init>(java.io.OutputStream)>(r3);

        $r4 = virtualinvoke $r1.<org.tukaani.xz.DeltaOptions: org.tukaani.xz.FinishableOutputStream getOutputStream(org.tukaani.xz.FinishableOutputStream)>($r2);

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        $r6 = new java.io.IOException;

        $r7 = virtualinvoke $r5.<org.tukaani.xz.UnsupportedOptionsException: java.lang.String getMessage()>();

        specialinvoke $r6.<java.io.IOException: void <init>(java.lang.String)>($r7);

        throw $r6;

        catch org.tukaani.xz.UnsupportedOptionsException from label1 to label2 with label3;
    }

    byte[] getOptionsAsProperties(java.lang.Object)
    {
        byte[] $r0;
        byte $b2;
        int $i0, $i1;
        java.lang.Object r1;
        org.apache.commons.compress.archivers.sevenz.DeltaDecoder r2;

        r2 := @this: org.apache.commons.compress.archivers.sevenz.DeltaDecoder;

        r1 := @parameter0: java.lang.Object;

        $r0 = newarray (byte)[1];

        $i0 = staticinvoke <org.apache.commons.compress.archivers.sevenz.DeltaDecoder: int numberOptionOrDefault(java.lang.Object,int)>(r1, 1);

        $i1 = $i0 - 1;

        $b2 = (byte) $i1;

        $r0[0] = $b2;

        return $r0;
    }

    java.lang.Object getOptionsFromCoder(org.apache.commons.compress.archivers.sevenz.Coder, java.io.InputStream)
    {
        int $i0;
        org.apache.commons.compress.archivers.sevenz.Coder r1;
        java.lang.Integer $r2;
        org.apache.commons.compress.archivers.sevenz.DeltaDecoder r0;
        java.io.InputStream r3;

        r0 := @this: org.apache.commons.compress.archivers.sevenz.DeltaDecoder;

        r1 := @parameter0: org.apache.commons.compress.archivers.sevenz.Coder;

        r3 := @parameter1: java.io.InputStream;

        $i0 = specialinvoke r0.<org.apache.commons.compress.archivers.sevenz.DeltaDecoder: int getOptionsFromCoder(org.apache.commons.compress.archivers.sevenz.Coder)>(r1);

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        return $r2;
    }

    private int getOptionsFromCoder(org.apache.commons.compress.archivers.sevenz.Coder)
    {
        byte[] $r1, $r2, $r3;
        org.apache.commons.compress.archivers.sevenz.Coder r0;
        short $s2, $s4;
        byte $b1;
        int $i0, $i3, $i5;
        org.apache.commons.compress.archivers.sevenz.DeltaDecoder r4;

        r4 := @this: org.apache.commons.compress.archivers.sevenz.DeltaDecoder;

        r0 := @parameter0: org.apache.commons.compress.archivers.sevenz.Coder;

        $r1 = r0.<org.apache.commons.compress.archivers.sevenz.Coder: byte[] properties>;

        if $r1 == null goto label1;

        $r2 = r0.<org.apache.commons.compress.archivers.sevenz.Coder: byte[] properties>;

        $i0 = lengthof $r2;

        if $i0 != 0 goto label2;

     label1:
        return 1;

     label2:
        $r3 = r0.<org.apache.commons.compress.archivers.sevenz.Coder: byte[] properties>;

        $b1 = $r3[0];

        $s4 = (short) $b1;

        $s2 = 255 & $s4;

        $i5 = (int) $s2;

        $i3 = $i5 + 1;

        return $i3;
    }
}
