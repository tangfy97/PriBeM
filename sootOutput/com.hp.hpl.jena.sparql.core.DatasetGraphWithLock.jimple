public class com.hp.hpl.jena.sparql.core.DatasetGraphWithLock extends com.hp.hpl.jena.sparql.core.DatasetGraphTrackActive implements org.apache.jena.atlas.lib.Sync
{
    private final com.hp.hpl.jena.sparql.core.DatasetGraph dsg;
    private final com.hp.hpl.jena.sparql.core.DatasetGraphWithLock$ThreadLocalReadWrite readWrite;
    private final com.hp.hpl.jena.sparql.core.DatasetGraphWithLock$ThreadLocalBoolean inTransaction;

    public void <init>(com.hp.hpl.jena.sparql.core.DatasetGraph)
    {
        com.hp.hpl.jena.sparql.core.DatasetGraphWithLock$ThreadLocalBoolean $r2;
        com.hp.hpl.jena.sparql.core.DatasetGraphWithLock$ThreadLocalReadWrite $r1;
        com.hp.hpl.jena.sparql.core.DatasetGraphWithLock r0;
        com.hp.hpl.jena.sparql.core.DatasetGraph r3;

        r0 := @this: com.hp.hpl.jena.sparql.core.DatasetGraphWithLock;

        r3 := @parameter0: com.hp.hpl.jena.sparql.core.DatasetGraph;

        specialinvoke r0.<com.hp.hpl.jena.sparql.core.DatasetGraphTrackActive: void <init>()>();

        $r1 = new com.hp.hpl.jena.sparql.core.DatasetGraphWithLock$ThreadLocalReadWrite;

        specialinvoke $r1.<com.hp.hpl.jena.sparql.core.DatasetGraphWithLock$ThreadLocalReadWrite: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.core.DatasetGraphWithLock: com.hp.hpl.jena.sparql.core.DatasetGraphWithLock$ThreadLocalReadWrite readWrite> = $r1;

        $r2 = new com.hp.hpl.jena.sparql.core.DatasetGraphWithLock$ThreadLocalBoolean;

        specialinvoke $r2.<com.hp.hpl.jena.sparql.core.DatasetGraphWithLock$ThreadLocalBoolean: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.core.DatasetGraphWithLock: com.hp.hpl.jena.sparql.core.DatasetGraphWithLock$ThreadLocalBoolean inTransaction> = $r2;

        r0.<com.hp.hpl.jena.sparql.core.DatasetGraphWithLock: com.hp.hpl.jena.sparql.core.DatasetGraph dsg> = r3;

        return;
    }

    protected com.hp.hpl.jena.sparql.core.DatasetGraph get()
    {
        com.hp.hpl.jena.sparql.core.DatasetGraphWithLock r0;
        com.hp.hpl.jena.sparql.core.DatasetGraph $r1;

        r0 := @this: com.hp.hpl.jena.sparql.core.DatasetGraphWithLock;

        $r1 = r0.<com.hp.hpl.jena.sparql.core.DatasetGraphWithLock: com.hp.hpl.jena.sparql.core.DatasetGraph dsg>;

        return $r1;
    }

    protected void checkActive()
    {
        com.hp.hpl.jena.sparql.JenaTransactionException $r1;
        com.hp.hpl.jena.sparql.core.DatasetGraphWithLock r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.core.DatasetGraphWithLock;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.core.DatasetGraphWithLock: boolean isInTransaction()>();

        if $z0 != 0 goto label1;

        $r1 = new com.hp.hpl.jena.sparql.JenaTransactionException;

        specialinvoke $r1.<com.hp.hpl.jena.sparql.JenaTransactionException: void <init>(java.lang.String)>("Not in a transaction");

        throw $r1;

     label1:
        return;
    }

    protected void checkNotActive()
    {
        com.hp.hpl.jena.sparql.JenaTransactionException $r1;
        com.hp.hpl.jena.sparql.core.DatasetGraphWithLock r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.core.DatasetGraphWithLock;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.core.DatasetGraphWithLock: boolean isInTransaction()>();

        if $z0 == 0 goto label1;

        $r1 = new com.hp.hpl.jena.sparql.JenaTransactionException;

        specialinvoke $r1.<com.hp.hpl.jena.sparql.JenaTransactionException: void <init>(java.lang.String)>("Currently in a transaction");

        throw $r1;

     label1:
        return;
    }

    public boolean isInTransaction()
    {
        com.hp.hpl.jena.sparql.core.DatasetGraphWithLock$ThreadLocalBoolean $r1;
        java.lang.Boolean $r3;
        java.lang.Object $r2;
        com.hp.hpl.jena.sparql.core.DatasetGraphWithLock r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.core.DatasetGraphWithLock;

        $r1 = r0.<com.hp.hpl.jena.sparql.core.DatasetGraphWithLock: com.hp.hpl.jena.sparql.core.DatasetGraphWithLock$ThreadLocalBoolean inTransaction>;

        $r2 = virtualinvoke $r1.<com.hp.hpl.jena.sparql.core.DatasetGraphWithLock$ThreadLocalBoolean: java.lang.Object get()>();

        $r3 = (java.lang.Boolean) $r2;

        $z0 = virtualinvoke $r3.<java.lang.Boolean: boolean booleanValue()>();

        return $z0;
    }

    protected void _begin(com.hp.hpl.jena.query.ReadWrite)
    {
        com.hp.hpl.jena.sparql.core.DatasetGraphWithLock$ThreadLocalBoolean $r6;
        com.hp.hpl.jena.sparql.core.DatasetGraphWithLock$ThreadLocalReadWrite $r2;
        com.hp.hpl.jena.sparql.core.DatasetGraphWithLock r0;
        com.hp.hpl.jena.sparql.core.DatasetGraph $r4;
        com.hp.hpl.jena.query.ReadWrite r1, $r3;
        java.lang.Boolean $r7;
        com.hp.hpl.jena.shared.Lock $r5;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.core.DatasetGraphWithLock;

        r1 := @parameter0: com.hp.hpl.jena.query.ReadWrite;

        $r2 = r0.<com.hp.hpl.jena.sparql.core.DatasetGraphWithLock: com.hp.hpl.jena.sparql.core.DatasetGraphWithLock$ThreadLocalReadWrite readWrite>;

        virtualinvoke $r2.<com.hp.hpl.jena.sparql.core.DatasetGraphWithLock$ThreadLocalReadWrite: void set(java.lang.Object)>(r1);

        $r3 = <com.hp.hpl.jena.query.ReadWrite: com.hp.hpl.jena.query.ReadWrite READ>;

        if r1 != $r3 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        $r4 = r0.<com.hp.hpl.jena.sparql.core.DatasetGraphWithLock: com.hp.hpl.jena.sparql.core.DatasetGraph dsg>;

        $r5 = interfaceinvoke $r4.<com.hp.hpl.jena.sparql.core.DatasetGraph: com.hp.hpl.jena.shared.Lock getLock()>();

        interfaceinvoke $r5.<com.hp.hpl.jena.shared.Lock: void enterCriticalSection(boolean)>($z0);

        $r6 = r0.<com.hp.hpl.jena.sparql.core.DatasetGraphWithLock: com.hp.hpl.jena.sparql.core.DatasetGraphWithLock$ThreadLocalBoolean inTransaction>;

        $r7 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        virtualinvoke $r6.<com.hp.hpl.jena.sparql.core.DatasetGraphWithLock$ThreadLocalBoolean: void set(java.lang.Object)>($r7);

        return;
    }

    protected void _commit()
    {
        com.hp.hpl.jena.sparql.core.DatasetGraphWithLock$ThreadLocalBoolean $r7;
        com.hp.hpl.jena.sparql.core.DatasetGraphWithLock$ThreadLocalReadWrite $r1, $r6;
        com.hp.hpl.jena.sparql.core.DatasetGraphWithLock r0;
        com.hp.hpl.jena.sparql.core.DatasetGraph $r4;
        com.hp.hpl.jena.query.ReadWrite $r3;
        java.lang.Boolean $r8;
        java.lang.Object $r2;
        com.hp.hpl.jena.shared.Lock $r5;

        r0 := @this: com.hp.hpl.jena.sparql.core.DatasetGraphWithLock;

        $r1 = r0.<com.hp.hpl.jena.sparql.core.DatasetGraphWithLock: com.hp.hpl.jena.sparql.core.DatasetGraphWithLock$ThreadLocalReadWrite readWrite>;

        $r2 = virtualinvoke $r1.<com.hp.hpl.jena.sparql.core.DatasetGraphWithLock$ThreadLocalReadWrite: java.lang.Object get()>();

        $r3 = <com.hp.hpl.jena.query.ReadWrite: com.hp.hpl.jena.query.ReadWrite WRITE>;

        if $r2 != $r3 goto label1;

        virtualinvoke r0.<com.hp.hpl.jena.sparql.core.DatasetGraphWithLock: void sync()>();

     label1:
        $r4 = r0.<com.hp.hpl.jena.sparql.core.DatasetGraphWithLock: com.hp.hpl.jena.sparql.core.DatasetGraph dsg>;

        $r5 = interfaceinvoke $r4.<com.hp.hpl.jena.sparql.core.DatasetGraph: com.hp.hpl.jena.shared.Lock getLock()>();

        interfaceinvoke $r5.<com.hp.hpl.jena.shared.Lock: void leaveCriticalSection()>();

        $r6 = r0.<com.hp.hpl.jena.sparql.core.DatasetGraphWithLock: com.hp.hpl.jena.sparql.core.DatasetGraphWithLock$ThreadLocalReadWrite readWrite>;

        virtualinvoke $r6.<com.hp.hpl.jena.sparql.core.DatasetGraphWithLock$ThreadLocalReadWrite: void set(java.lang.Object)>(null);

        $r7 = r0.<com.hp.hpl.jena.sparql.core.DatasetGraphWithLock: com.hp.hpl.jena.sparql.core.DatasetGraphWithLock$ThreadLocalBoolean inTransaction>;

        $r8 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        virtualinvoke $r7.<com.hp.hpl.jena.sparql.core.DatasetGraphWithLock$ThreadLocalBoolean: void set(java.lang.Object)>($r8);

        return;
    }

    protected void _abort()
    {
        com.hp.hpl.jena.query.ReadWrite $r3;
        com.hp.hpl.jena.sparql.core.DatasetGraphWithLock$ThreadLocalReadWrite $r1;
        java.lang.Object $r2;
        com.hp.hpl.jena.sparql.JenaTransactionException $r4;
        com.hp.hpl.jena.sparql.core.DatasetGraphWithLock r0;

        r0 := @this: com.hp.hpl.jena.sparql.core.DatasetGraphWithLock;

        $r1 = r0.<com.hp.hpl.jena.sparql.core.DatasetGraphWithLock: com.hp.hpl.jena.sparql.core.DatasetGraphWithLock$ThreadLocalReadWrite readWrite>;

        $r2 = virtualinvoke $r1.<com.hp.hpl.jena.sparql.core.DatasetGraphWithLock$ThreadLocalReadWrite: java.lang.Object get()>();

        $r3 = <com.hp.hpl.jena.query.ReadWrite: com.hp.hpl.jena.query.ReadWrite WRITE>;

        if $r2 != $r3 goto label1;

        virtualinvoke r0.<com.hp.hpl.jena.sparql.core.DatasetGraphWithLock: void _end()>();

        $r4 = new com.hp.hpl.jena.sparql.JenaTransactionException;

        specialinvoke $r4.<com.hp.hpl.jena.sparql.JenaTransactionException: void <init>(java.lang.String)>("Can\'t abort a write lock-transaction");

        throw $r4;

     label1:
        virtualinvoke r0.<com.hp.hpl.jena.sparql.core.DatasetGraphWithLock: void _end()>();

        return;
    }

    protected void _end()
    {
        com.hp.hpl.jena.sparql.core.DatasetGraphWithLock$ThreadLocalBoolean $r1;
        java.lang.Boolean $r2;
        com.hp.hpl.jena.shared.Lock $r4;
        com.hp.hpl.jena.sparql.core.DatasetGraphWithLock r0;
        com.hp.hpl.jena.sparql.core.DatasetGraph $r3;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.core.DatasetGraphWithLock;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.core.DatasetGraphWithLock: boolean isInTransaction()>();

        if $z0 == 0 goto label1;

        $r3 = r0.<com.hp.hpl.jena.sparql.core.DatasetGraphWithLock: com.hp.hpl.jena.sparql.core.DatasetGraph dsg>;

        $r4 = interfaceinvoke $r3.<com.hp.hpl.jena.sparql.core.DatasetGraph: com.hp.hpl.jena.shared.Lock getLock()>();

        interfaceinvoke $r4.<com.hp.hpl.jena.shared.Lock: void leaveCriticalSection()>();

     label1:
        $r1 = r0.<com.hp.hpl.jena.sparql.core.DatasetGraphWithLock: com.hp.hpl.jena.sparql.core.DatasetGraphWithLock$ThreadLocalBoolean inTransaction>;

        $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        virtualinvoke $r1.<com.hp.hpl.jena.sparql.core.DatasetGraphWithLock$ThreadLocalBoolean: void set(java.lang.Object)>($r2);

        return;
    }

    protected void _close()
    {
        com.hp.hpl.jena.sparql.core.DatasetGraphWithLock r0;
        com.hp.hpl.jena.sparql.core.DatasetGraph $r1, $r2;

        r0 := @this: com.hp.hpl.jena.sparql.core.DatasetGraphWithLock;

        $r1 = r0.<com.hp.hpl.jena.sparql.core.DatasetGraphWithLock: com.hp.hpl.jena.sparql.core.DatasetGraph dsg>;

        if $r1 == null goto label1;

        $r2 = r0.<com.hp.hpl.jena.sparql.core.DatasetGraphWithLock: com.hp.hpl.jena.sparql.core.DatasetGraph dsg>;

        interfaceinvoke $r2.<com.hp.hpl.jena.sparql.core.DatasetGraph: void close()>();

     label1:
        return;
    }

    public com.hp.hpl.jena.sparql.util.Context getContext()
    {
        com.hp.hpl.jena.sparql.core.DatasetGraphWithLock r0;
        com.hp.hpl.jena.sparql.core.DatasetGraph $r1;
        com.hp.hpl.jena.sparql.util.Context $r2;

        r0 := @this: com.hp.hpl.jena.sparql.core.DatasetGraphWithLock;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.core.DatasetGraphWithLock: com.hp.hpl.jena.sparql.core.DatasetGraph get()>();

        $r2 = interfaceinvoke $r1.<com.hp.hpl.jena.sparql.core.DatasetGraph: com.hp.hpl.jena.sparql.util.Context getContext()>();

        return $r2;
    }

    public void sync()
    {
        com.hp.hpl.jena.sparql.core.DatasetGraphWithLock r0;
        com.hp.hpl.jena.sparql.core.DatasetGraph $r1;

        r0 := @this: com.hp.hpl.jena.sparql.core.DatasetGraphWithLock;

        $r1 = r0.<com.hp.hpl.jena.sparql.core.DatasetGraphWithLock: com.hp.hpl.jena.sparql.core.DatasetGraph dsg>;

        staticinvoke <com.hp.hpl.jena.sparql.SystemARQ: void sync(com.hp.hpl.jena.sparql.core.DatasetGraph)>($r1);

        return;
    }

    public java.lang.String toString()
    {
        java.lang.String $r2, $r4;
        com.hp.hpl.jena.sparql.core.DatasetGraphWithLock r0;
        com.hp.hpl.jena.sparql.core.DatasetGraph $r1;
        java.lang.Exception $r3;

        r0 := @this: com.hp.hpl.jena.sparql.core.DatasetGraphWithLock;

     label1:
        $r1 = r0.<com.hp.hpl.jena.sparql.core.DatasetGraphWithLock: com.hp.hpl.jena.sparql.core.DatasetGraph dsg>;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

     label2:
        return $r2;

     label3:
        $r3 := @caughtexception;

        $r4 = staticinvoke <org.apache.jena.atlas.lib.Lib: java.lang.String className(java.lang.Object)>(r0);

        return $r4;

        catch java.lang.Exception from label1 to label2 with label3;
    }
}
