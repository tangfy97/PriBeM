public class org.eclipse.jetty.util.MultiMap extends java.lang.Object implements java.util.concurrent.ConcurrentMap, java.io.Serializable
{
    private static final long serialVersionUID;
    java.util.Map _map;
    java.util.concurrent.ConcurrentMap _cmap;

    public void <init>()
    {
        java.util.HashMap $r1;
        org.eclipse.jetty.util.MultiMap r0;

        r0 := @this: org.eclipse.jetty.util.MultiMap;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<org.eclipse.jetty.util.MultiMap: java.util.Map _map> = $r1;

        return;
    }

    public void <init>(java.util.Map)
    {
        org.eclipse.jetty.util.MultiMap r0;
        java.util.Map r1;
        java.util.concurrent.ConcurrentHashMap $r3;
        java.util.HashMap $r2;
        boolean $z0;

        r0 := @this: org.eclipse.jetty.util.MultiMap;

        r1 := @parameter0: java.util.Map;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $z0 = r1 instanceof java.util.concurrent.ConcurrentMap;

        if $z0 == 0 goto label1;

        $r3 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r3.<java.util.concurrent.ConcurrentHashMap: void <init>(java.util.Map)>(r1);

        r0.<org.eclipse.jetty.util.MultiMap: java.util.concurrent.ConcurrentMap _cmap> = $r3;

        r0.<org.eclipse.jetty.util.MultiMap: java.util.Map _map> = $r3;

        goto label2;

     label1:
        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>(java.util.Map)>(r1);

        r0.<org.eclipse.jetty.util.MultiMap: java.util.Map _map> = $r2;

     label2:
        return;
    }

    public void <init>(org.eclipse.jetty.util.MultiMap)
    {
        org.eclipse.jetty.util.MultiMap r0, r1;
        java.util.Map $r4;
        java.util.concurrent.ConcurrentHashMap $r5;
        java.util.HashMap $r3;
        java.util.concurrent.ConcurrentMap $r2, $r6;

        r0 := @this: org.eclipse.jetty.util.MultiMap;

        r1 := @parameter0: org.eclipse.jetty.util.MultiMap;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = r1.<org.eclipse.jetty.util.MultiMap: java.util.concurrent.ConcurrentMap _cmap>;

        if $r2 == null goto label1;

        $r5 = new java.util.concurrent.ConcurrentHashMap;

        $r6 = r1.<org.eclipse.jetty.util.MultiMap: java.util.concurrent.ConcurrentMap _cmap>;

        specialinvoke $r5.<java.util.concurrent.ConcurrentHashMap: void <init>(java.util.Map)>($r6);

        r0.<org.eclipse.jetty.util.MultiMap: java.util.concurrent.ConcurrentMap _cmap> = $r5;

        r0.<org.eclipse.jetty.util.MultiMap: java.util.Map _map> = $r5;

        goto label2;

     label1:
        $r3 = new java.util.HashMap;

        $r4 = r1.<org.eclipse.jetty.util.MultiMap: java.util.Map _map>;

        specialinvoke $r3.<java.util.HashMap: void <init>(java.util.Map)>($r4);

        r0.<org.eclipse.jetty.util.MultiMap: java.util.Map _map> = $r3;

     label2:
        return;
    }

    public void <init>(int)
    {
        int i0;
        java.util.HashMap $r1;
        org.eclipse.jetty.util.MultiMap r0;

        r0 := @this: org.eclipse.jetty.util.MultiMap;

        i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>(int)>(i0);

        r0.<org.eclipse.jetty.util.MultiMap: java.util.Map _map> = $r1;

        return;
    }

    public void <init>(boolean)
    {
        org.eclipse.jetty.util.MultiMap r0;
        java.util.concurrent.ConcurrentHashMap $r2;
        java.util.HashMap $r1;
        boolean z0;

        r0 := @this: org.eclipse.jetty.util.MultiMap;

        z0 := @parameter0: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if z0 == 0 goto label1;

        $r2 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r2.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        r0.<org.eclipse.jetty.util.MultiMap: java.util.concurrent.ConcurrentMap _cmap> = $r2;

        r0.<org.eclipse.jetty.util.MultiMap: java.util.Map _map> = $r2;

        goto label2;

     label1:
        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<org.eclipse.jetty.util.MultiMap: java.util.Map _map> = $r1;

     label2:
        return;
    }

    public java.util.List getValues(java.lang.Object)
    {
        java.util.List $r4;
        org.eclipse.jetty.util.MultiMap r0;
        java.util.Map $r2;
        java.lang.Object r1, $r3;

        r0 := @this: org.eclipse.jetty.util.MultiMap;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.eclipse.jetty.util.MultiMap: java.util.Map _map>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = staticinvoke <org.eclipse.jetty.util.LazyList: java.util.List getList(java.lang.Object,boolean)>($r3, 1);

        return $r4;
    }

    public java.lang.Object getValue(java.lang.Object, int)
    {
        org.eclipse.jetty.util.MultiMap r0;
        java.util.Map $r2;
        int i0, $i1;
        java.lang.Object r1, $r3, $r4;

        r0 := @this: org.eclipse.jetty.util.MultiMap;

        r1 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        $r2 = r0.<org.eclipse.jetty.util.MultiMap: java.util.Map _map>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        if i0 != 0 goto label1;

        $i1 = staticinvoke <org.eclipse.jetty.util.LazyList: int size(java.lang.Object)>($r3);

        if $i1 != 0 goto label1;

        return null;

     label1:
        $r4 = staticinvoke <org.eclipse.jetty.util.LazyList: java.lang.Object get(java.lang.Object,int)>($r3, i0);

        return $r4;
    }

    public java.lang.String getString(java.lang.Object)
    {
        org.eclipse.jetty.util.MultiMap r0;
        java.util.Map $r2;
        int $i0, $i1, $i2, i3;
        java.lang.Object r1, $r3, $r4, $r7;
        java.lang.StringBuilder $r5;
        java.lang.String $r6, $r8, $r9;

        r0 := @this: org.eclipse.jetty.util.MultiMap;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.eclipse.jetty.util.MultiMap: java.util.Map _map>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $i0 = staticinvoke <org.eclipse.jetty.util.LazyList: int size(java.lang.Object)>($r3);

        lookupswitch($i0)
        {
            case 0: goto label1;
            case 1: goto label2;
            default: goto label5;
        };

     label1:
        return null;

     label2:
        $r4 = staticinvoke <org.eclipse.jetty.util.LazyList: java.lang.Object get(java.lang.Object,int)>($r3, 0);

        if $r4 != null goto label3;

        $r9 = null;

        goto label4;

     label3:
        $r9 = virtualinvoke $r4.<java.lang.Object: java.lang.String toString()>();

     label4:
        return $r9;

     label5:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(int)>(128);

        i3 = 0;

     label6:
        $i1 = staticinvoke <org.eclipse.jetty.util.LazyList: int size(java.lang.Object)>($r3);

        if i3 >= $i1 goto label9;

        $r7 = staticinvoke <org.eclipse.jetty.util.LazyList: java.lang.Object get(java.lang.Object,int)>($r3, i3);

        if $r7 == null goto label8;

        $i2 = virtualinvoke $r5.<java.lang.StringBuilder: int length()>();

        if $i2 <= 0 goto label7;

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44);

     label7:
        $r8 = virtualinvoke $r7.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

     label8:
        i3 = i3 + 1;

        goto label6;

     label9:
        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    public java.lang.Object get(java.lang.Object)
    {
        java.util.List $r5;
        org.eclipse.jetty.util.MultiMap r0;
        java.util.Map $r2;
        int $i0;
        java.lang.Object r1, $r3, $r4;

        r0 := @this: org.eclipse.jetty.util.MultiMap;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.eclipse.jetty.util.MultiMap: java.util.Map _map>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $i0 = staticinvoke <org.eclipse.jetty.util.LazyList: int size(java.lang.Object)>($r3);

        lookupswitch($i0)
        {
            case 0: goto label1;
            case 1: goto label2;
            default: goto label3;
        };

     label1:
        return null;

     label2:
        $r4 = staticinvoke <org.eclipse.jetty.util.LazyList: java.lang.Object get(java.lang.Object,int)>($r3, 0);

        return $r4;

     label3:
        $r5 = staticinvoke <org.eclipse.jetty.util.LazyList: java.util.List getList(java.lang.Object,boolean)>($r3, 1);

        return $r5;
    }

    public java.lang.Object put(java.lang.Object, java.lang.Object)
    {
        org.eclipse.jetty.util.MultiMap r0;
        java.util.Map $r3;
        java.lang.Object r1, r2, $r4, $r5;

        r0 := @this: org.eclipse.jetty.util.MultiMap;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r3 = r0.<org.eclipse.jetty.util.MultiMap: java.util.Map _map>;

        $r4 = staticinvoke <org.eclipse.jetty.util.LazyList: java.lang.Object add(java.lang.Object,java.lang.Object)>(null, r2);

        $r5 = interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r4);

        return $r5;
    }

    public java.lang.Object putValues(java.lang.Object, java.util.List)
    {
        java.util.List r2;
        org.eclipse.jetty.util.MultiMap r0;
        java.util.Map $r3;
        java.lang.Object r1, $r4;

        r0 := @this: org.eclipse.jetty.util.MultiMap;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.util.List;

        $r3 = r0.<org.eclipse.jetty.util.MultiMap: java.util.Map _map>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        return $r4;
    }

    public transient java.lang.Object putValues(java.lang.Object, java.lang.String[])
    {
        org.eclipse.jetty.util.MultiMap r1;
        java.lang.String[] r0;
        java.util.Map $r3;
        int $i0, i1;
        java.lang.Object r2, $r4, r6;
        java.lang.String $r5;

        r1 := @this: org.eclipse.jetty.util.MultiMap;

        r2 := @parameter0: java.lang.Object;

        r0 := @parameter1: java.lang.String[];

        r6 = null;

        i1 = 0;

     label1:
        $i0 = lengthof r0;

        if i1 >= $i0 goto label2;

        $r5 = r0[i1];

        r6 = staticinvoke <org.eclipse.jetty.util.LazyList: java.lang.Object add(java.lang.Object,java.lang.Object)>(r6, $r5);

        i1 = i1 + 1;

        goto label1;

     label2:
        $r3 = r1.<org.eclipse.jetty.util.MultiMap: java.util.Map _map>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r6);

        return $r4;
    }

    public void add(java.lang.Object, java.lang.Object)
    {
        org.eclipse.jetty.util.MultiMap r0;
        java.util.Map $r2, $r6;
        java.lang.Object r1, $r3, r4, $r5;

        r0 := @this: org.eclipse.jetty.util.MultiMap;

        r1 := @parameter0: java.lang.Object;

        r4 := @parameter1: java.lang.Object;

        $r2 = r0.<org.eclipse.jetty.util.MultiMap: java.util.Map _map>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r5 = staticinvoke <org.eclipse.jetty.util.LazyList: java.lang.Object add(java.lang.Object,java.lang.Object)>($r3, r4);

        if $r3 == $r5 goto label1;

        $r6 = r0.<org.eclipse.jetty.util.MultiMap: java.util.Map _map>;

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r5);

     label1:
        return;
    }

    public void addValues(java.lang.Object, java.util.List)
    {
        java.util.List r4;
        org.eclipse.jetty.util.MultiMap r0;
        java.util.Map $r2, $r6;
        java.lang.Object r1, $r3, $r5;

        r0 := @this: org.eclipse.jetty.util.MultiMap;

        r1 := @parameter0: java.lang.Object;

        r4 := @parameter1: java.util.List;

        $r2 = r0.<org.eclipse.jetty.util.MultiMap: java.util.Map _map>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r5 = staticinvoke <org.eclipse.jetty.util.LazyList: java.lang.Object addCollection(java.lang.Object,java.util.Collection)>($r3, r4);

        if $r3 == $r5 goto label1;

        $r6 = r0.<org.eclipse.jetty.util.MultiMap: java.util.Map _map>;

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r5);

     label1:
        return;
    }

    public void addValues(java.lang.Object, java.lang.String[])
    {
        org.eclipse.jetty.util.MultiMap r0;
        java.lang.String[] r4;
        java.util.List $r5;
        java.util.Map $r2, $r7;
        java.lang.Object r1, $r3, $r6;

        r0 := @this: org.eclipse.jetty.util.MultiMap;

        r1 := @parameter0: java.lang.Object;

        r4 := @parameter1: java.lang.String[];

        $r2 = r0.<org.eclipse.jetty.util.MultiMap: java.util.Map _map>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r5 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r4);

        $r6 = staticinvoke <org.eclipse.jetty.util.LazyList: java.lang.Object addCollection(java.lang.Object,java.util.Collection)>($r3, $r5);

        if $r3 == $r6 goto label1;

        $r7 = r0.<org.eclipse.jetty.util.MultiMap: java.util.Map _map>;

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r6);

     label1:
        return;
    }

    public boolean removeValue(java.lang.Object, java.lang.Object)
    {
        org.eclipse.jetty.util.MultiMap r0;
        java.util.Map $r2, $r6, $r7;
        int $i0, $i1;
        java.lang.Object r1, $r3, r4, $r5, r8;
        boolean $z0;

        r0 := @this: org.eclipse.jetty.util.MultiMap;

        r1 := @parameter0: java.lang.Object;

        r4 := @parameter1: java.lang.Object;

        $r2 = r0.<org.eclipse.jetty.util.MultiMap: java.util.Map _map>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r8 = $r3;

        $i0 = staticinvoke <org.eclipse.jetty.util.LazyList: int size(java.lang.Object)>($r3);

        if $i0 <= 0 goto label2;

        $r5 = staticinvoke <org.eclipse.jetty.util.LazyList: java.lang.Object remove(java.lang.Object,java.lang.Object)>($r3, r4);

        r8 = $r5;

        if $r5 != null goto label1;

        $r7 = r0.<org.eclipse.jetty.util.MultiMap: java.util.Map _map>;

        interfaceinvoke $r7.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

        goto label2;

     label1:
        $r6 = r0.<org.eclipse.jetty.util.MultiMap: java.util.Map _map>;

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r5);

     label2:
        $i1 = staticinvoke <org.eclipse.jetty.util.LazyList: int size(java.lang.Object)>(r8);

        if $i1 == $i0 goto label3;

        $z0 = 1;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        return $z0;
    }

    public void putAll(java.util.Map)
    {
        java.util.Map$Entry r6;
        java.util.Iterator $r4;
        org.eclipse.jetty.util.MultiMap r1;
        java.util.Set $r3;
        java.util.Map r0, $r2, $r7;
        java.lang.Object $r5, $r8, $r9, $r10;
        boolean z0, $z1;

        r1 := @this: org.eclipse.jetty.util.MultiMap;

        r0 := @parameter0: java.util.Map;

        z0 = r0 instanceof org.eclipse.jetty.util.MultiMap;

        if z0 == 0 goto label3;

        $r3 = interfaceinvoke r0.<java.util.Map: java.util.Set entrySet()>();

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.util.Map$Entry) $r5;

        $r7 = r1.<org.eclipse.jetty.util.MultiMap: java.util.Map _map>;

        $r8 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r9 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r10 = staticinvoke <org.eclipse.jetty.util.LazyList: java.lang.Object clone(java.lang.Object)>($r9);

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r8, $r10);

        goto label1;

     label2:
        goto label4;

     label3:
        $r2 = r1.<org.eclipse.jetty.util.MultiMap: java.util.Map _map>;

        interfaceinvoke $r2.<java.util.Map: void putAll(java.util.Map)>(r0);

     label4:
        return;
    }

    public java.util.Map toStringArrayMap()
    {
        java.util.Map$Entry r7;
        java.util.Iterator $r5;
        org.eclipse.jetty.util.MultiMap r1;
        java.util.Set $r4;
        java.lang.String[] $r9;
        org.eclipse.jetty.util.MultiMap$1 $r0;
        java.util.Map $r2, $r3;
        int $i0, $i1, $i2;
        java.lang.Object $r6, $r8, $r10;
        boolean $z0;

        r1 := @this: org.eclipse.jetty.util.MultiMap;

        $r0 = new org.eclipse.jetty.util.MultiMap$1;

        $r2 = r1.<org.eclipse.jetty.util.MultiMap: java.util.Map _map>;

        $i0 = interfaceinvoke $r2.<java.util.Map: int size()>();

        $i1 = $i0 * 3;

        $i2 = $i1 / 2;

        specialinvoke $r0.<org.eclipse.jetty.util.MultiMap$1: void <init>(org.eclipse.jetty.util.MultiMap,int)>(r1, $i2);

        $r3 = r1.<org.eclipse.jetty.util.MultiMap: java.util.Map _map>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.util.Set entrySet()>();

        $r5 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (java.util.Map$Entry) $r6;

        $r8 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r9 = staticinvoke <org.eclipse.jetty.util.LazyList: java.lang.String[] toStringArray(java.lang.Object)>($r8);

        $r10 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getKey()>();

        virtualinvoke $r0.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r10, $r9);

        goto label1;

     label2:
        return $r0;
    }

    public java.lang.String toString()
    {
        org.eclipse.jetty.util.MultiMap r0;
        java.util.Map $r3;
        java.lang.String $r4;
        java.util.concurrent.ConcurrentMap $r1, $r2;

        r0 := @this: org.eclipse.jetty.util.MultiMap;

        $r1 = r0.<org.eclipse.jetty.util.MultiMap: java.util.concurrent.ConcurrentMap _cmap>;

        if $r1 != null goto label1;

        $r3 = r0.<org.eclipse.jetty.util.MultiMap: java.util.Map _map>;

        $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>();

        goto label2;

     label1:
        $r2 = r0.<org.eclipse.jetty.util.MultiMap: java.util.concurrent.ConcurrentMap _cmap>;

        $r4 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>();

     label2:
        return $r4;
    }

    public void clear()
    {
        org.eclipse.jetty.util.MultiMap r0;
        java.util.Map $r1;

        r0 := @this: org.eclipse.jetty.util.MultiMap;

        $r1 = r0.<org.eclipse.jetty.util.MultiMap: java.util.Map _map>;

        interfaceinvoke $r1.<java.util.Map: void clear()>();

        return;
    }

    public boolean containsKey(java.lang.Object)
    {
        org.eclipse.jetty.util.MultiMap r0;
        java.util.Map $r2;
        java.lang.Object r1;
        boolean $z0;

        r0 := @this: org.eclipse.jetty.util.MultiMap;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.eclipse.jetty.util.MultiMap: java.util.Map _map>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        return $z0;
    }

    public boolean containsValue(java.lang.Object)
    {
        org.eclipse.jetty.util.MultiMap r0;
        java.util.Map $r2;
        java.lang.Object r1;
        boolean $z0;

        r0 := @this: org.eclipse.jetty.util.MultiMap;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.eclipse.jetty.util.MultiMap: java.util.Map _map>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsValue(java.lang.Object)>(r1);

        return $z0;
    }

    public java.util.Set entrySet()
    {
        java.util.Set $r2;
        org.eclipse.jetty.util.MultiMap r0;
        java.util.Map $r1;

        r0 := @this: org.eclipse.jetty.util.MultiMap;

        $r1 = r0.<org.eclipse.jetty.util.MultiMap: java.util.Map _map>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set entrySet()>();

        return $r2;
    }

    public boolean equals(java.lang.Object)
    {
        org.eclipse.jetty.util.MultiMap r0;
        java.util.Map $r2;
        java.lang.Object r1;
        boolean $z0;

        r0 := @this: org.eclipse.jetty.util.MultiMap;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.eclipse.jetty.util.MultiMap: java.util.Map _map>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean equals(java.lang.Object)>(r1);

        return $z0;
    }

    public int hashCode()
    {
        int $i0;
        org.eclipse.jetty.util.MultiMap r0;
        java.util.Map $r1;

        r0 := @this: org.eclipse.jetty.util.MultiMap;

        $r1 = r0.<org.eclipse.jetty.util.MultiMap: java.util.Map _map>;

        $i0 = interfaceinvoke $r1.<java.util.Map: int hashCode()>();

        return $i0;
    }

    public boolean isEmpty()
    {
        org.eclipse.jetty.util.MultiMap r0;
        java.util.Map $r1;
        boolean $z0;

        r0 := @this: org.eclipse.jetty.util.MultiMap;

        $r1 = r0.<org.eclipse.jetty.util.MultiMap: java.util.Map _map>;

        $z0 = interfaceinvoke $r1.<java.util.Map: boolean isEmpty()>();

        return $z0;
    }

    public java.util.Set keySet()
    {
        java.util.Set $r2;
        org.eclipse.jetty.util.MultiMap r0;
        java.util.Map $r1;

        r0 := @this: org.eclipse.jetty.util.MultiMap;

        $r1 = r0.<org.eclipse.jetty.util.MultiMap: java.util.Map _map>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>();

        return $r2;
    }

    public java.lang.Object remove(java.lang.Object)
    {
        org.eclipse.jetty.util.MultiMap r0;
        java.util.Map $r2;
        java.lang.Object r1, $r3;

        r0 := @this: org.eclipse.jetty.util.MultiMap;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.eclipse.jetty.util.MultiMap: java.util.Map _map>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

        return $r3;
    }

    public int size()
    {
        int $i0;
        org.eclipse.jetty.util.MultiMap r0;
        java.util.Map $r1;

        r0 := @this: org.eclipse.jetty.util.MultiMap;

        $r1 = r0.<org.eclipse.jetty.util.MultiMap: java.util.Map _map>;

        $i0 = interfaceinvoke $r1.<java.util.Map: int size()>();

        return $i0;
    }

    public java.util.Collection values()
    {
        org.eclipse.jetty.util.MultiMap r0;
        java.util.Map $r1;
        java.util.Collection $r2;

        r0 := @this: org.eclipse.jetty.util.MultiMap;

        $r1 = r0.<org.eclipse.jetty.util.MultiMap: java.util.Map _map>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Collection values()>();

        return $r2;
    }

    public java.lang.Object putIfAbsent(java.lang.Object, java.lang.Object)
    {
        java.lang.UnsupportedOperationException $r6;
        org.eclipse.jetty.util.MultiMap r0;
        java.lang.Object r2, r3, $r5;
        java.util.concurrent.ConcurrentMap $r1, $r4;

        r0 := @this: org.eclipse.jetty.util.MultiMap;

        r2 := @parameter0: java.lang.Object;

        r3 := @parameter1: java.lang.Object;

        $r1 = r0.<org.eclipse.jetty.util.MultiMap: java.util.concurrent.ConcurrentMap _cmap>;

        if $r1 != null goto label1;

        $r6 = new java.lang.UnsupportedOperationException;

        specialinvoke $r6.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r6;

     label1:
        $r4 = r0.<org.eclipse.jetty.util.MultiMap: java.util.concurrent.ConcurrentMap _cmap>;

        $r5 = interfaceinvoke $r4.<java.util.concurrent.ConcurrentMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>(r2, r3);

        return $r5;
    }

    public boolean remove(java.lang.Object, java.lang.Object)
    {
        java.lang.UnsupportedOperationException $r5;
        org.eclipse.jetty.util.MultiMap r0;
        java.lang.Object r2, r3;
        java.util.concurrent.ConcurrentMap $r1, $r4;
        boolean $z0;

        r0 := @this: org.eclipse.jetty.util.MultiMap;

        r2 := @parameter0: java.lang.Object;

        r3 := @parameter1: java.lang.Object;

        $r1 = r0.<org.eclipse.jetty.util.MultiMap: java.util.concurrent.ConcurrentMap _cmap>;

        if $r1 != null goto label1;

        $r5 = new java.lang.UnsupportedOperationException;

        specialinvoke $r5.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r5;

     label1:
        $r4 = r0.<org.eclipse.jetty.util.MultiMap: java.util.concurrent.ConcurrentMap _cmap>;

        $z0 = interfaceinvoke $r4.<java.util.concurrent.ConcurrentMap: boolean remove(java.lang.Object,java.lang.Object)>(r2, r3);

        return $z0;
    }

    public boolean replace(java.lang.Object, java.lang.Object, java.lang.Object)
    {
        java.lang.UnsupportedOperationException $r6;
        org.eclipse.jetty.util.MultiMap r0;
        java.util.concurrent.ConcurrentMap $r1, $r5;
        java.lang.Object r2, r3, r4;
        boolean $z0;

        r0 := @this: org.eclipse.jetty.util.MultiMap;

        r2 := @parameter0: java.lang.Object;

        r3 := @parameter1: java.lang.Object;

        r4 := @parameter2: java.lang.Object;

        $r1 = r0.<org.eclipse.jetty.util.MultiMap: java.util.concurrent.ConcurrentMap _cmap>;

        if $r1 != null goto label1;

        $r6 = new java.lang.UnsupportedOperationException;

        specialinvoke $r6.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r6;

     label1:
        $r5 = r0.<org.eclipse.jetty.util.MultiMap: java.util.concurrent.ConcurrentMap _cmap>;

        $z0 = interfaceinvoke $r5.<java.util.concurrent.ConcurrentMap: boolean replace(java.lang.Object,java.lang.Object,java.lang.Object)>(r2, r3, r4);

        return $z0;
    }

    public java.lang.Object replace(java.lang.Object, java.lang.Object)
    {
        java.lang.UnsupportedOperationException $r6;
        org.eclipse.jetty.util.MultiMap r0;
        java.lang.Object r2, r3, $r5;
        java.util.concurrent.ConcurrentMap $r1, $r4;

        r0 := @this: org.eclipse.jetty.util.MultiMap;

        r2 := @parameter0: java.lang.Object;

        r3 := @parameter1: java.lang.Object;

        $r1 = r0.<org.eclipse.jetty.util.MultiMap: java.util.concurrent.ConcurrentMap _cmap>;

        if $r1 != null goto label1;

        $r6 = new java.lang.UnsupportedOperationException;

        specialinvoke $r6.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r6;

     label1:
        $r4 = r0.<org.eclipse.jetty.util.MultiMap: java.util.concurrent.ConcurrentMap _cmap>;

        $r5 = interfaceinvoke $r4.<java.util.concurrent.ConcurrentMap: java.lang.Object replace(java.lang.Object,java.lang.Object)>(r2, r3);

        return $r5;
    }

    public static void <clinit>()
    {
        <org.eclipse.jetty.util.MultiMap: long serialVersionUID> = -6878723138353851005L;

        return;
    }
}
