public class org.apache.batik.ext.awt.image.codec.png.PNGDecodeParam extends java.lang.Object implements org.apache.batik.ext.awt.image.codec.util.ImageDecodeParam
{
    private boolean suppressAlpha;
    private boolean expandPalette;
    private boolean output8BitGray;
    private boolean performGammaCorrection;
    private float userExponent;
    private float displayExponent;
    private boolean expandGrayAlpha;
    private boolean generateEncodeParam;
    private org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam encodeParam;

    public void <init>()
    {
        org.apache.batik.ext.awt.image.codec.png.PNGDecodeParam r0;

        r0 := @this: org.apache.batik.ext.awt.image.codec.png.PNGDecodeParam;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGDecodeParam: boolean suppressAlpha> = 0;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGDecodeParam: boolean expandPalette> = 0;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGDecodeParam: boolean output8BitGray> = 0;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGDecodeParam: boolean performGammaCorrection> = 1;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGDecodeParam: float userExponent> = 1.0F;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGDecodeParam: float displayExponent> = 2.2F;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGDecodeParam: boolean expandGrayAlpha> = 0;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGDecodeParam: boolean generateEncodeParam> = 0;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGDecodeParam: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam encodeParam> = null;

        return;
    }

    public boolean getSuppressAlpha()
    {
        org.apache.batik.ext.awt.image.codec.png.PNGDecodeParam r0;
        boolean $z0;

        r0 := @this: org.apache.batik.ext.awt.image.codec.png.PNGDecodeParam;

        $z0 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGDecodeParam: boolean suppressAlpha>;

        return $z0;
    }

    public void setSuppressAlpha(boolean)
    {
        org.apache.batik.ext.awt.image.codec.png.PNGDecodeParam r0;
        boolean z0;

        r0 := @this: org.apache.batik.ext.awt.image.codec.png.PNGDecodeParam;

        z0 := @parameter0: boolean;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGDecodeParam: boolean suppressAlpha> = z0;

        return;
    }

    public boolean getExpandPalette()
    {
        org.apache.batik.ext.awt.image.codec.png.PNGDecodeParam r0;
        boolean $z0;

        r0 := @this: org.apache.batik.ext.awt.image.codec.png.PNGDecodeParam;

        $z0 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGDecodeParam: boolean expandPalette>;

        return $z0;
    }

    public void setExpandPalette(boolean)
    {
        org.apache.batik.ext.awt.image.codec.png.PNGDecodeParam r0;
        boolean z0;

        r0 := @this: org.apache.batik.ext.awt.image.codec.png.PNGDecodeParam;

        z0 := @parameter0: boolean;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGDecodeParam: boolean expandPalette> = z0;

        return;
    }

    public boolean getOutput8BitGray()
    {
        org.apache.batik.ext.awt.image.codec.png.PNGDecodeParam r0;
        boolean $z0;

        r0 := @this: org.apache.batik.ext.awt.image.codec.png.PNGDecodeParam;

        $z0 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGDecodeParam: boolean output8BitGray>;

        return $z0;
    }

    public void setOutput8BitGray(boolean)
    {
        org.apache.batik.ext.awt.image.codec.png.PNGDecodeParam r0;
        boolean z0;

        r0 := @this: org.apache.batik.ext.awt.image.codec.png.PNGDecodeParam;

        z0 := @parameter0: boolean;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGDecodeParam: boolean output8BitGray> = z0;

        return;
    }

    public boolean getPerformGammaCorrection()
    {
        org.apache.batik.ext.awt.image.codec.png.PNGDecodeParam r0;
        boolean $z0;

        r0 := @this: org.apache.batik.ext.awt.image.codec.png.PNGDecodeParam;

        $z0 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGDecodeParam: boolean performGammaCorrection>;

        return $z0;
    }

    public void setPerformGammaCorrection(boolean)
    {
        org.apache.batik.ext.awt.image.codec.png.PNGDecodeParam r0;
        boolean z0;

        r0 := @this: org.apache.batik.ext.awt.image.codec.png.PNGDecodeParam;

        z0 := @parameter0: boolean;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGDecodeParam: boolean performGammaCorrection> = z0;

        return;
    }

    public float getUserExponent()
    {
        float $f0;
        org.apache.batik.ext.awt.image.codec.png.PNGDecodeParam r0;

        r0 := @this: org.apache.batik.ext.awt.image.codec.png.PNGDecodeParam;

        $f0 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGDecodeParam: float userExponent>;

        return $f0;
    }

    public void setUserExponent(float)
    {
        org.apache.batik.ext.awt.image.codec.png.PNGDecodeParam r0;
        byte $b0;
        int $i1;
        float f0;
        java.lang.String $r2;
        java.lang.IllegalArgumentException $r3;

        r0 := @this: org.apache.batik.ext.awt.image.codec.png.PNGDecodeParam;

        f0 := @parameter0: float;

        $b0 = f0 cmpg 0.0F;

        $i1 = (int) $b0;

        if $i1 > 0 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        $r2 = staticinvoke <org.apache.batik.ext.awt.image.codec.util.PropertyUtil: java.lang.String getString(java.lang.String)>("PNGDecodeParam0");

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r2);

        throw $r3;

     label1:
        r0.<org.apache.batik.ext.awt.image.codec.png.PNGDecodeParam: float userExponent> = f0;

        return;
    }

    public float getDisplayExponent()
    {
        float $f0;
        org.apache.batik.ext.awt.image.codec.png.PNGDecodeParam r0;

        r0 := @this: org.apache.batik.ext.awt.image.codec.png.PNGDecodeParam;

        $f0 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGDecodeParam: float displayExponent>;

        return $f0;
    }

    public void setDisplayExponent(float)
    {
        org.apache.batik.ext.awt.image.codec.png.PNGDecodeParam r0;
        byte $b0;
        int $i1;
        float f0;
        java.lang.String $r2;
        java.lang.IllegalArgumentException $r3;

        r0 := @this: org.apache.batik.ext.awt.image.codec.png.PNGDecodeParam;

        f0 := @parameter0: float;

        $b0 = f0 cmpg 0.0F;

        $i1 = (int) $b0;

        if $i1 > 0 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        $r2 = staticinvoke <org.apache.batik.ext.awt.image.codec.util.PropertyUtil: java.lang.String getString(java.lang.String)>("PNGDecodeParam1");

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r2);

        throw $r3;

     label1:
        r0.<org.apache.batik.ext.awt.image.codec.png.PNGDecodeParam: float displayExponent> = f0;

        return;
    }

    public boolean getExpandGrayAlpha()
    {
        org.apache.batik.ext.awt.image.codec.png.PNGDecodeParam r0;
        boolean $z0;

        r0 := @this: org.apache.batik.ext.awt.image.codec.png.PNGDecodeParam;

        $z0 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGDecodeParam: boolean expandGrayAlpha>;

        return $z0;
    }

    public void setExpandGrayAlpha(boolean)
    {
        org.apache.batik.ext.awt.image.codec.png.PNGDecodeParam r0;
        boolean z0;

        r0 := @this: org.apache.batik.ext.awt.image.codec.png.PNGDecodeParam;

        z0 := @parameter0: boolean;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGDecodeParam: boolean expandGrayAlpha> = z0;

        return;
    }

    public boolean getGenerateEncodeParam()
    {
        org.apache.batik.ext.awt.image.codec.png.PNGDecodeParam r0;
        boolean $z0;

        r0 := @this: org.apache.batik.ext.awt.image.codec.png.PNGDecodeParam;

        $z0 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGDecodeParam: boolean generateEncodeParam>;

        return $z0;
    }

    public void setGenerateEncodeParam(boolean)
    {
        org.apache.batik.ext.awt.image.codec.png.PNGDecodeParam r0;
        boolean z0;

        r0 := @this: org.apache.batik.ext.awt.image.codec.png.PNGDecodeParam;

        z0 := @parameter0: boolean;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGDecodeParam: boolean generateEncodeParam> = z0;

        return;
    }

    public org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam getEncodeParam()
    {
        org.apache.batik.ext.awt.image.codec.png.PNGDecodeParam r0;
        org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam $r1;

        r0 := @this: org.apache.batik.ext.awt.image.codec.png.PNGDecodeParam;

        $r1 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGDecodeParam: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam encodeParam>;

        return $r1;
    }

    public void setEncodeParam(org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam)
    {
        org.apache.batik.ext.awt.image.codec.png.PNGDecodeParam r0;
        org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam r1;

        r0 := @this: org.apache.batik.ext.awt.image.codec.png.PNGDecodeParam;

        r1 := @parameter0: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGDecodeParam: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam encodeParam> = r1;

        return;
    }
}
