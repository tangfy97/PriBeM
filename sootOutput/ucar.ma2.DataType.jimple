public final enum class ucar.ma2.DataType extends java.lang.Enum
{
    public static final enum ucar.ma2.DataType BOOLEAN;
    public static final enum ucar.ma2.DataType BYTE;
    public static final enum ucar.ma2.DataType CHAR;
    public static final enum ucar.ma2.DataType SHORT;
    public static final enum ucar.ma2.DataType INT;
    public static final enum ucar.ma2.DataType LONG;
    public static final enum ucar.ma2.DataType FLOAT;
    public static final enum ucar.ma2.DataType DOUBLE;
    public static final enum ucar.ma2.DataType SEQUENCE;
    public static final enum ucar.ma2.DataType STRING;
    public static final enum ucar.ma2.DataType STRUCTURE;
    public static final enum ucar.ma2.DataType ENUM1;
    public static final enum ucar.ma2.DataType ENUM2;
    public static final enum ucar.ma2.DataType ENUM4;
    public static final enum ucar.ma2.DataType OPAQUE;
    private java.lang.String niceName;
    private int size;
    private static final ucar.ma2.DataType[] $VALUES;

    public static ucar.ma2.DataType[] values()
    {
        java.lang.Object $r1;
        ucar.ma2.DataType[] $r0, $r2;

        $r0 = <ucar.ma2.DataType: ucar.ma2.DataType[] $VALUES>;

        $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (ucar.ma2.DataType[]) $r1;

        return $r2;
    }

    public static ucar.ma2.DataType valueOf(java.lang.String)
    {
        ucar.ma2.DataType $r2;
        java.lang.String r0;
        java.lang.Enum $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Lucar/ma2/DataType;", r0);

        $r2 = (ucar.ma2.DataType) $r1;

        return $r2;
    }

    private void <init>(java.lang.String, int, java.lang.String, int)
    {
        int i0, i1;
        ucar.ma2.DataType r0;
        java.lang.String r1, r2;

        r0 := @this: ucar.ma2.DataType;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.String;

        i1 := @parameter3: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        r0.<ucar.ma2.DataType: java.lang.String niceName> = r2;

        r0.<ucar.ma2.DataType: int size> = i1;

        return;
    }

    public java.lang.String toString()
    {
        ucar.ma2.DataType r0;
        java.lang.String $r1;

        r0 := @this: ucar.ma2.DataType;

        $r1 = r0.<ucar.ma2.DataType: java.lang.String niceName>;

        return $r1;
    }

    public int getSize()
    {
        int $i0;
        ucar.ma2.DataType r0;

        r0 := @this: ucar.ma2.DataType;

        $i0 = r0.<ucar.ma2.DataType: int size>;

        return $i0;
    }

    public java.lang.Class getClassType()
    {
        ucar.ma2.DataType r0;
        java.lang.Class $r1;

        r0 := @this: ucar.ma2.DataType;

        $r1 = virtualinvoke r0.<ucar.ma2.DataType: java.lang.Class getPrimitiveClassType()>();

        return $r1;
    }

    public java.lang.Class getPrimitiveClassType()
    {
        ucar.ma2.DataType r0, $r1, $r2, $r3, $r5, $r6, $r8, $r9, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18;
        java.lang.Class $r4, $r7, $r10, $r19, $r20, $r21, $r22, $r23;

        r0 := @this: ucar.ma2.DataType;

        $r1 = <ucar.ma2.DataType: ucar.ma2.DataType FLOAT>;

        if r0 != $r1 goto label01;

        $r23 = <java.lang.Float: java.lang.Class TYPE>;

        return $r23;

     label01:
        $r2 = <ucar.ma2.DataType: ucar.ma2.DataType DOUBLE>;

        if r0 != $r2 goto label02;

        $r22 = <java.lang.Double: java.lang.Class TYPE>;

        return $r22;

     label02:
        $r3 = <ucar.ma2.DataType: ucar.ma2.DataType SHORT>;

        if r0 == $r3 goto label03;

        $r5 = <ucar.ma2.DataType: ucar.ma2.DataType ENUM2>;

        if r0 != $r5 goto label04;

     label03:
        $r4 = <java.lang.Short: java.lang.Class TYPE>;

        return $r4;

     label04:
        $r6 = <ucar.ma2.DataType: ucar.ma2.DataType INT>;

        if r0 == $r6 goto label05;

        $r8 = <ucar.ma2.DataType: ucar.ma2.DataType ENUM4>;

        if r0 != $r8 goto label06;

     label05:
        $r7 = <java.lang.Integer: java.lang.Class TYPE>;

        return $r7;

     label06:
        $r9 = <ucar.ma2.DataType: ucar.ma2.DataType BYTE>;

        if r0 == $r9 goto label07;

        $r11 = <ucar.ma2.DataType: ucar.ma2.DataType ENUM1>;

        if r0 != $r11 goto label08;

     label07:
        $r10 = <java.lang.Byte: java.lang.Class TYPE>;

        return $r10;

     label08:
        $r12 = <ucar.ma2.DataType: ucar.ma2.DataType CHAR>;

        if r0 != $r12 goto label09;

        $r21 = <java.lang.Character: java.lang.Class TYPE>;

        return $r21;

     label09:
        $r13 = <ucar.ma2.DataType: ucar.ma2.DataType BOOLEAN>;

        if r0 != $r13 goto label10;

        $r20 = <java.lang.Boolean: java.lang.Class TYPE>;

        return $r20;

     label10:
        $r14 = <ucar.ma2.DataType: ucar.ma2.DataType LONG>;

        if r0 != $r14 goto label11;

        $r19 = <java.lang.Long: java.lang.Class TYPE>;

        return $r19;

     label11:
        $r15 = <ucar.ma2.DataType: ucar.ma2.DataType STRING>;

        if r0 != $r15 goto label12;

        return class "Ljava/lang/String;";

     label12:
        $r16 = <ucar.ma2.DataType: ucar.ma2.DataType STRUCTURE>;

        if r0 != $r16 goto label13;

        return class "Lucar/ma2/StructureData;";

     label13:
        $r17 = <ucar.ma2.DataType: ucar.ma2.DataType SEQUENCE>;

        if r0 != $r17 goto label14;

        return class "Lucar/ma2/StructureDataIterator;";

     label14:
        $r18 = <ucar.ma2.DataType: ucar.ma2.DataType OPAQUE>;

        if r0 != $r18 goto label15;

        return class "Ljava/nio/ByteBuffer;";

     label15:
        return null;
    }

    public boolean isString()
    {
        ucar.ma2.DataType r0, $r1, $r2;
        boolean $z0;

        r0 := @this: ucar.ma2.DataType;

        $r1 = <ucar.ma2.DataType: ucar.ma2.DataType STRING>;

        if r0 == $r1 goto label1;

        $r2 = <ucar.ma2.DataType: ucar.ma2.DataType CHAR>;

        if r0 != $r2 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public boolean isNumeric()
    {
        ucar.ma2.DataType r0, $r1, $r2, $r3, $r4, $r5, $r6;
        boolean $z0;

        r0 := @this: ucar.ma2.DataType;

        $r1 = <ucar.ma2.DataType: ucar.ma2.DataType BYTE>;

        if r0 == $r1 goto label1;

        $r2 = <ucar.ma2.DataType: ucar.ma2.DataType FLOAT>;

        if r0 == $r2 goto label1;

        $r3 = <ucar.ma2.DataType: ucar.ma2.DataType DOUBLE>;

        if r0 == $r3 goto label1;

        $r4 = <ucar.ma2.DataType: ucar.ma2.DataType INT>;

        if r0 == $r4 goto label1;

        $r5 = <ucar.ma2.DataType: ucar.ma2.DataType SHORT>;

        if r0 == $r5 goto label1;

        $r6 = <ucar.ma2.DataType: ucar.ma2.DataType LONG>;

        if r0 != $r6 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public boolean isIntegral()
    {
        ucar.ma2.DataType r0, $r1, $r2, $r3, $r4;
        boolean $z0;

        r0 := @this: ucar.ma2.DataType;

        $r1 = <ucar.ma2.DataType: ucar.ma2.DataType BYTE>;

        if r0 == $r1 goto label1;

        $r2 = <ucar.ma2.DataType: ucar.ma2.DataType INT>;

        if r0 == $r2 goto label1;

        $r3 = <ucar.ma2.DataType: ucar.ma2.DataType SHORT>;

        if r0 == $r3 goto label1;

        $r4 = <ucar.ma2.DataType: ucar.ma2.DataType LONG>;

        if r0 != $r4 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public boolean isFloatingPoint()
    {
        ucar.ma2.DataType r0, $r1, $r2;
        boolean $z0;

        r0 := @this: ucar.ma2.DataType;

        $r1 = <ucar.ma2.DataType: ucar.ma2.DataType FLOAT>;

        if r0 == $r1 goto label1;

        $r2 = <ucar.ma2.DataType: ucar.ma2.DataType DOUBLE>;

        if r0 != $r2 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public boolean isEnum()
    {
        ucar.ma2.DataType r0, $r1, $r2, $r3;
        boolean $z0;

        r0 := @this: ucar.ma2.DataType;

        $r1 = <ucar.ma2.DataType: ucar.ma2.DataType ENUM1>;

        if r0 == $r1 goto label1;

        $r2 = <ucar.ma2.DataType: ucar.ma2.DataType ENUM2>;

        if r0 == $r2 goto label1;

        $r3 = <ucar.ma2.DataType: ucar.ma2.DataType ENUM4>;

        if r0 != $r3 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public static ucar.ma2.DataType getType(java.lang.String)
    {
        ucar.ma2.DataType $r2;
        java.lang.String r0, $r1;
        java.lang.IllegalArgumentException $r3;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String toUpperCase()>();

        $r2 = staticinvoke <ucar.ma2.DataType: ucar.ma2.DataType valueOf(java.lang.String)>($r1);

     label2:
        return $r2;

     label3:
        $r3 := @caughtexception;

        return null;

        catch java.lang.IllegalArgumentException from label1 to label2 with label3;
    }

    public static ucar.ma2.DataType getType(java.lang.Class)
    {
        ucar.ma2.DataType $r2, $r4, $r6, $r8, $r10, $r12, $r14, $r16, $r17, $r18, $r19, $r20;
        java.lang.Class r0, $r1, $r3, $r5, $r7, $r9, $r11, $r13, $r15;

        r0 := @parameter0: java.lang.Class;

        $r1 = <java.lang.Float: java.lang.Class TYPE>;

        if r0 == $r1 goto label01;

        if r0 != class "Ljava/lang/Float;" goto label02;

     label01:
        $r2 = <ucar.ma2.DataType: ucar.ma2.DataType FLOAT>;

        return $r2;

     label02:
        $r3 = <java.lang.Double: java.lang.Class TYPE>;

        if r0 == $r3 goto label03;

        if r0 != class "Ljava/lang/Double;" goto label04;

     label03:
        $r4 = <ucar.ma2.DataType: ucar.ma2.DataType DOUBLE>;

        return $r4;

     label04:
        $r5 = <java.lang.Short: java.lang.Class TYPE>;

        if r0 == $r5 goto label05;

        if r0 != class "Ljava/lang/Short;" goto label06;

     label05:
        $r6 = <ucar.ma2.DataType: ucar.ma2.DataType SHORT>;

        return $r6;

     label06:
        $r7 = <java.lang.Integer: java.lang.Class TYPE>;

        if r0 == $r7 goto label07;

        if r0 != class "Ljava/lang/Integer;" goto label08;

     label07:
        $r8 = <ucar.ma2.DataType: ucar.ma2.DataType INT>;

        return $r8;

     label08:
        $r9 = <java.lang.Byte: java.lang.Class TYPE>;

        if r0 == $r9 goto label09;

        if r0 != class "Ljava/lang/Byte;" goto label10;

     label09:
        $r10 = <ucar.ma2.DataType: ucar.ma2.DataType BYTE>;

        return $r10;

     label10:
        $r11 = <java.lang.Character: java.lang.Class TYPE>;

        if r0 == $r11 goto label11;

        if r0 != class "Ljava/lang/Character;" goto label12;

     label11:
        $r12 = <ucar.ma2.DataType: ucar.ma2.DataType CHAR>;

        return $r12;

     label12:
        $r13 = <java.lang.Boolean: java.lang.Class TYPE>;

        if r0 == $r13 goto label13;

        if r0 != class "Ljava/lang/Boolean;" goto label14;

     label13:
        $r14 = <ucar.ma2.DataType: ucar.ma2.DataType BOOLEAN>;

        return $r14;

     label14:
        $r15 = <java.lang.Long: java.lang.Class TYPE>;

        if r0 == $r15 goto label15;

        if r0 != class "Ljava/lang/Long;" goto label16;

     label15:
        $r16 = <ucar.ma2.DataType: ucar.ma2.DataType LONG>;

        return $r16;

     label16:
        if r0 != class "Ljava/lang/String;" goto label17;

        $r20 = <ucar.ma2.DataType: ucar.ma2.DataType STRING>;

        return $r20;

     label17:
        if r0 != class "Lucar/ma2/StructureData;" goto label18;

        $r19 = <ucar.ma2.DataType: ucar.ma2.DataType STRUCTURE>;

        return $r19;

     label18:
        if r0 != class "Lucar/ma2/StructureDataIterator;" goto label19;

        $r18 = <ucar.ma2.DataType: ucar.ma2.DataType SEQUENCE>;

        return $r18;

     label19:
        if r0 != class "Ljava/nio/ByteBuffer;" goto label20;

        $r17 = <ucar.ma2.DataType: ucar.ma2.DataType OPAQUE>;

        return $r17;

     label20:
        return null;
    }

    public static long unsignedIntToLong(int)
    {
        int i0;
        long $l1, $l2;

        i0 := @parameter0: int;

        if i0 >= 0 goto label1;

        $l1 = (long) i0;

        $l2 = $l1 + 4294967296L;

        goto label2;

     label1:
        $l2 = (long) i0;

     label2:
        return $l2;
    }

    public static int unsignedShortToInt(short)
    {
        short s0;
        int $i1, $i2, $i4;

        s0 := @parameter0: short;

        $i2 = (int) s0;

        $i4 = (int) 65535;

        $i1 = $i2 & $i4;

        return $i1;
    }

    public static short unsignedByteToShort(byte)
    {
        short $s1, $s2, $s3;
        byte b0;

        b0 := @parameter0: byte;

        $s3 = (short) b0;

        $s1 = $s3 & 255;

        $s2 = (short) $s1;

        return $s2;
    }

    static void <clinit>()
    {
        ucar.ma2.DataType[] $r15;
        ucar.ma2.DataType $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r30;

        $r0 = new ucar.ma2.DataType;

        specialinvoke $r0.<ucar.ma2.DataType: void <init>(java.lang.String,int,java.lang.String,int)>("BOOLEAN", 0, "boolean", 1);

        <ucar.ma2.DataType: ucar.ma2.DataType BOOLEAN> = $r0;

        $r1 = new ucar.ma2.DataType;

        specialinvoke $r1.<ucar.ma2.DataType: void <init>(java.lang.String,int,java.lang.String,int)>("BYTE", 1, "byte", 1);

        <ucar.ma2.DataType: ucar.ma2.DataType BYTE> = $r1;

        $r2 = new ucar.ma2.DataType;

        specialinvoke $r2.<ucar.ma2.DataType: void <init>(java.lang.String,int,java.lang.String,int)>("CHAR", 2, "char", 1);

        <ucar.ma2.DataType: ucar.ma2.DataType CHAR> = $r2;

        $r3 = new ucar.ma2.DataType;

        specialinvoke $r3.<ucar.ma2.DataType: void <init>(java.lang.String,int,java.lang.String,int)>("SHORT", 3, "short", 2);

        <ucar.ma2.DataType: ucar.ma2.DataType SHORT> = $r3;

        $r4 = new ucar.ma2.DataType;

        specialinvoke $r4.<ucar.ma2.DataType: void <init>(java.lang.String,int,java.lang.String,int)>("INT", 4, "int", 4);

        <ucar.ma2.DataType: ucar.ma2.DataType INT> = $r4;

        $r5 = new ucar.ma2.DataType;

        specialinvoke $r5.<ucar.ma2.DataType: void <init>(java.lang.String,int,java.lang.String,int)>("LONG", 5, "long", 8);

        <ucar.ma2.DataType: ucar.ma2.DataType LONG> = $r5;

        $r6 = new ucar.ma2.DataType;

        specialinvoke $r6.<ucar.ma2.DataType: void <init>(java.lang.String,int,java.lang.String,int)>("FLOAT", 6, "float", 4);

        <ucar.ma2.DataType: ucar.ma2.DataType FLOAT> = $r6;

        $r7 = new ucar.ma2.DataType;

        specialinvoke $r7.<ucar.ma2.DataType: void <init>(java.lang.String,int,java.lang.String,int)>("DOUBLE", 7, "double", 8);

        <ucar.ma2.DataType: ucar.ma2.DataType DOUBLE> = $r7;

        $r8 = new ucar.ma2.DataType;

        specialinvoke $r8.<ucar.ma2.DataType: void <init>(java.lang.String,int,java.lang.String,int)>("SEQUENCE", 8, "Sequence", 4);

        <ucar.ma2.DataType: ucar.ma2.DataType SEQUENCE> = $r8;

        $r9 = new ucar.ma2.DataType;

        specialinvoke $r9.<ucar.ma2.DataType: void <init>(java.lang.String,int,java.lang.String,int)>("STRING", 9, "String", 4);

        <ucar.ma2.DataType: ucar.ma2.DataType STRING> = $r9;

        $r10 = new ucar.ma2.DataType;

        specialinvoke $r10.<ucar.ma2.DataType: void <init>(java.lang.String,int,java.lang.String,int)>("STRUCTURE", 10, "Structure", 1);

        <ucar.ma2.DataType: ucar.ma2.DataType STRUCTURE> = $r10;

        $r11 = new ucar.ma2.DataType;

        specialinvoke $r11.<ucar.ma2.DataType: void <init>(java.lang.String,int,java.lang.String,int)>("ENUM1", 11, "enum1", 1);

        <ucar.ma2.DataType: ucar.ma2.DataType ENUM1> = $r11;

        $r12 = new ucar.ma2.DataType;

        specialinvoke $r12.<ucar.ma2.DataType: void <init>(java.lang.String,int,java.lang.String,int)>("ENUM2", 12, "enum2", 2);

        <ucar.ma2.DataType: ucar.ma2.DataType ENUM2> = $r12;

        $r13 = new ucar.ma2.DataType;

        specialinvoke $r13.<ucar.ma2.DataType: void <init>(java.lang.String,int,java.lang.String,int)>("ENUM4", 13, "enum4", 4);

        <ucar.ma2.DataType: ucar.ma2.DataType ENUM4> = $r13;

        $r14 = new ucar.ma2.DataType;

        specialinvoke $r14.<ucar.ma2.DataType: void <init>(java.lang.String,int,java.lang.String,int)>("OPAQUE", 14, "opaque", 1);

        <ucar.ma2.DataType: ucar.ma2.DataType OPAQUE> = $r14;

        $r15 = newarray (ucar.ma2.DataType)[15];

        $r16 = <ucar.ma2.DataType: ucar.ma2.DataType BOOLEAN>;

        $r15[0] = $r16;

        $r17 = <ucar.ma2.DataType: ucar.ma2.DataType BYTE>;

        $r15[1] = $r17;

        $r18 = <ucar.ma2.DataType: ucar.ma2.DataType CHAR>;

        $r15[2] = $r18;

        $r19 = <ucar.ma2.DataType: ucar.ma2.DataType SHORT>;

        $r15[3] = $r19;

        $r20 = <ucar.ma2.DataType: ucar.ma2.DataType INT>;

        $r15[4] = $r20;

        $r21 = <ucar.ma2.DataType: ucar.ma2.DataType LONG>;

        $r15[5] = $r21;

        $r22 = <ucar.ma2.DataType: ucar.ma2.DataType FLOAT>;

        $r15[6] = $r22;

        $r23 = <ucar.ma2.DataType: ucar.ma2.DataType DOUBLE>;

        $r15[7] = $r23;

        $r24 = <ucar.ma2.DataType: ucar.ma2.DataType SEQUENCE>;

        $r15[8] = $r24;

        $r25 = <ucar.ma2.DataType: ucar.ma2.DataType STRING>;

        $r15[9] = $r25;

        $r26 = <ucar.ma2.DataType: ucar.ma2.DataType STRUCTURE>;

        $r15[10] = $r26;

        $r27 = <ucar.ma2.DataType: ucar.ma2.DataType ENUM1>;

        $r15[11] = $r27;

        $r28 = <ucar.ma2.DataType: ucar.ma2.DataType ENUM2>;

        $r15[12] = $r28;

        $r29 = <ucar.ma2.DataType: ucar.ma2.DataType ENUM4>;

        $r15[13] = $r29;

        $r30 = <ucar.ma2.DataType: ucar.ma2.DataType OPAQUE>;

        $r15[14] = $r30;

        <ucar.ma2.DataType: ucar.ma2.DataType[] $VALUES> = $r15;

        return;
    }
}
