public abstract class org.apache.poi.openxml4j.opc.OPCPackage extends java.lang.Object implements org.apache.poi.openxml4j.opc.RelationshipSource, java.io.Closeable
{
    private static org.apache.poi.util.POILogger logger;
    protected static final org.apache.poi.openxml4j.opc.PackageAccess defaultPackageAccess;
    private org.apache.poi.openxml4j.opc.PackageAccess packageAccess;
    protected org.apache.poi.openxml4j.opc.PackagePartCollection partList;
    protected org.apache.poi.openxml4j.opc.PackageRelationshipCollection relationships;
    protected java.util.Hashtable partMarshallers;
    protected org.apache.poi.openxml4j.opc.internal.PartMarshaller defaultPartMarshaller;
    protected java.util.Hashtable partUnmarshallers;
    protected org.apache.poi.openxml4j.opc.internal.PackagePropertiesPart packageProperties;
    protected org.apache.poi.openxml4j.opc.internal.ContentTypeManager contentTypeManager;
    protected boolean isDirty;
    protected java.lang.String originalPackagePath;
    protected java.io.OutputStream output;

    void <init>(org.apache.poi.openxml4j.opc.PackageAccess)
    {
        org.apache.poi.openxml4j.opc.OPCPackage r0;
        java.lang.Class $r1;
        org.apache.poi.openxml4j.opc.PackageAccess r2;
        java.lang.IllegalArgumentException $r3;

        r0 := @this: org.apache.poi.openxml4j.opc.OPCPackage;

        r2 := @parameter0: org.apache.poi.openxml4j.opc.PackageAccess;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.poi.openxml4j.opc.OPCPackage: boolean isDirty> = 0;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        if $r1 == class "Lorg/apache/poi/openxml4j/opc/ZipPackage;" goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("PackageBase may not be subclassed");

        throw $r3;

     label1:
        specialinvoke r0.<org.apache.poi.openxml4j.opc.OPCPackage: void init()>();

        r0.<org.apache.poi.openxml4j.opc.OPCPackage: org.apache.poi.openxml4j.opc.PackageAccess packageAccess> = r2;

        return;
    }

    private void init()
    {
        org.apache.poi.openxml4j.opc.internal.ContentType $r3, $r7;
        org.apache.poi.openxml4j.opc.internal.unmarshallers.PackagePropertiesUnmarshaller $r5;
        java.lang.String $r14, $r16;
        java.util.Hashtable $r1, $r2, $r4, $r8;
        org.apache.poi.openxml4j.exceptions.InvalidFormatException $r10;
        org.apache.poi.openxml4j.opc.internal.marshallers.DefaultMarshaller $r6;
        org.apache.poi.openxml4j.opc.internal.marshallers.ZipPackagePropertiesMarshaller $r9;
        org.apache.poi.openxml4j.exceptions.OpenXML4JRuntimeException $r11;
        org.apache.poi.openxml4j.opc.OPCPackage r0;
        java.lang.StringBuilder $r12, $r13, $r15;

        r0 := @this: org.apache.poi.openxml4j.opc.OPCPackage;

        $r1 = new java.util.Hashtable;

        specialinvoke $r1.<java.util.Hashtable: void <init>(int)>(5);

        r0.<org.apache.poi.openxml4j.opc.OPCPackage: java.util.Hashtable partMarshallers> = $r1;

        $r2 = new java.util.Hashtable;

        specialinvoke $r2.<java.util.Hashtable: void <init>(int)>(2);

        r0.<org.apache.poi.openxml4j.opc.OPCPackage: java.util.Hashtable partUnmarshallers> = $r2;

     label1:
        $r4 = r0.<org.apache.poi.openxml4j.opc.OPCPackage: java.util.Hashtable partUnmarshallers>;

        $r3 = new org.apache.poi.openxml4j.opc.internal.ContentType;

        specialinvoke $r3.<org.apache.poi.openxml4j.opc.internal.ContentType: void <init>(java.lang.String)>("application/vnd.openxmlformats-package.core-properties+xml");

        $r5 = new org.apache.poi.openxml4j.opc.internal.unmarshallers.PackagePropertiesUnmarshaller;

        specialinvoke $r5.<org.apache.poi.openxml4j.opc.internal.unmarshallers.PackagePropertiesUnmarshaller: void <init>()>();

        virtualinvoke $r4.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, $r5);

        $r6 = new org.apache.poi.openxml4j.opc.internal.marshallers.DefaultMarshaller;

        specialinvoke $r6.<org.apache.poi.openxml4j.opc.internal.marshallers.DefaultMarshaller: void <init>()>();

        r0.<org.apache.poi.openxml4j.opc.OPCPackage: org.apache.poi.openxml4j.opc.internal.PartMarshaller defaultPartMarshaller> = $r6;

        $r8 = r0.<org.apache.poi.openxml4j.opc.OPCPackage: java.util.Hashtable partMarshallers>;

        $r7 = new org.apache.poi.openxml4j.opc.internal.ContentType;

        specialinvoke $r7.<org.apache.poi.openxml4j.opc.internal.ContentType: void <init>(java.lang.String)>("application/vnd.openxmlformats-package.core-properties+xml");

        $r9 = new org.apache.poi.openxml4j.opc.internal.marshallers.ZipPackagePropertiesMarshaller;

        specialinvoke $r9.<org.apache.poi.openxml4j.opc.internal.marshallers.ZipPackagePropertiesMarshaller: void <init>()>();

        virtualinvoke $r8.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, $r9);

     label2:
        goto label4;

     label3:
        $r10 := @caughtexception;

        $r11 = new org.apache.poi.openxml4j.exceptions.OpenXML4JRuntimeException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Package.init() : this exception should never happen, if you read this message please send a mail to the developers team. : ");

        $r14 = virtualinvoke $r10.<org.apache.poi.openxml4j.exceptions.InvalidFormatException: java.lang.String getMessage()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<org.apache.poi.openxml4j.exceptions.OpenXML4JRuntimeException: void <init>(java.lang.String)>($r16);

        throw $r11;

     label4:
        return;

        catch org.apache.poi.openxml4j.exceptions.InvalidFormatException from label1 to label2 with label3;
    }

    public static org.apache.poi.openxml4j.opc.OPCPackage open(java.lang.String) throws org.apache.poi.openxml4j.exceptions.InvalidFormatException
    {
        java.lang.String r0;
        org.apache.poi.openxml4j.opc.PackageAccess $r1;
        org.apache.poi.openxml4j.opc.OPCPackage $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = <org.apache.poi.openxml4j.opc.OPCPackage: org.apache.poi.openxml4j.opc.PackageAccess defaultPackageAccess>;

        $r2 = staticinvoke <org.apache.poi.openxml4j.opc.OPCPackage: org.apache.poi.openxml4j.opc.OPCPackage open(java.lang.String,org.apache.poi.openxml4j.opc.PackageAccess)>(r0, $r1);

        return $r2;
    }

    public static org.apache.poi.openxml4j.opc.OPCPackage open(java.io.File) throws org.apache.poi.openxml4j.exceptions.InvalidFormatException
    {
        org.apache.poi.openxml4j.opc.PackageAccess $r1;
        org.apache.poi.openxml4j.opc.OPCPackage $r2;
        java.io.File r0;

        r0 := @parameter0: java.io.File;

        $r1 = <org.apache.poi.openxml4j.opc.OPCPackage: org.apache.poi.openxml4j.opc.PackageAccess defaultPackageAccess>;

        $r2 = staticinvoke <org.apache.poi.openxml4j.opc.OPCPackage: org.apache.poi.openxml4j.opc.OPCPackage open(java.io.File,org.apache.poi.openxml4j.opc.PackageAccess)>(r0, $r1);

        return $r2;
    }

    public static org.apache.poi.openxml4j.opc.OPCPackage open(java.lang.String, org.apache.poi.openxml4j.opc.PackageAccess) throws org.apache.poi.openxml4j.exceptions.InvalidFormatException
    {
        org.apache.poi.openxml4j.opc.PackagePartCollection $r7;
        org.apache.poi.openxml4j.opc.PackageAccess r6, $r8;
        java.lang.IllegalArgumentException $r1, $r9;
        java.io.File $r4, $r10;
        java.lang.String r0, $r2, $r3, $r11;
        org.apache.poi.openxml4j.opc.ZipPackage $r5;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: java.lang.String;

        r6 := @parameter1: org.apache.poi.openxml4j.opc.PackageAccess;

        if r0 == null goto label1;

        $r2 = "";

        $r3 = virtualinvoke r0.<java.lang.String: java.lang.String trim()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label2;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("\'path\' must be given");

        throw $r1;

     label2:
        $r4 = new java.io.File;

        specialinvoke $r4.<java.io.File: void <init>(java.lang.String)>(r0);

        $z1 = virtualinvoke $r4.<java.io.File: boolean exists()>();

        if $z1 == 0 goto label3;

        $z2 = virtualinvoke $r4.<java.io.File: boolean isDirectory()>();

        if $z2 == 0 goto label3;

        $r9 = new java.lang.IllegalArgumentException;

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("path must not be a directory");

        throw $r9;

     label3:
        $r5 = new org.apache.poi.openxml4j.opc.ZipPackage;

        specialinvoke $r5.<org.apache.poi.openxml4j.opc.ZipPackage: void <init>(java.lang.String,org.apache.poi.openxml4j.opc.PackageAccess)>(r0, r6);

        $r7 = $r5.<org.apache.poi.openxml4j.opc.OPCPackage: org.apache.poi.openxml4j.opc.PackagePartCollection partList>;

        if $r7 != null goto label4;

        $r8 = <org.apache.poi.openxml4j.opc.PackageAccess: org.apache.poi.openxml4j.opc.PackageAccess WRITE>;

        if r6 == $r8 goto label4;

        virtualinvoke $r5.<org.apache.poi.openxml4j.opc.OPCPackage: java.util.ArrayList getParts()>();

     label4:
        $r10 = new java.io.File;

        specialinvoke $r10.<java.io.File: void <init>(java.lang.String)>(r0);

        $r11 = virtualinvoke $r10.<java.io.File: java.lang.String getAbsolutePath()>();

        $r5.<org.apache.poi.openxml4j.opc.OPCPackage: java.lang.String originalPackagePath> = $r11;

        return $r5;
    }

    public static org.apache.poi.openxml4j.opc.OPCPackage open(java.io.File, org.apache.poi.openxml4j.opc.PackageAccess) throws org.apache.poi.openxml4j.exceptions.InvalidFormatException
    {
        org.apache.poi.openxml4j.opc.PackagePartCollection $r4;
        org.apache.poi.openxml4j.opc.PackageAccess r3, $r5;
        java.lang.IllegalArgumentException $r1, $r6;
        java.io.File r0;
        java.lang.String $r7;
        org.apache.poi.openxml4j.opc.ZipPackage $r2;
        boolean $z0, $z1;

        r0 := @parameter0: java.io.File;

        r3 := @parameter1: org.apache.poi.openxml4j.opc.PackageAccess;

        if r0 != null goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("\'file\' must be given");

        throw $r6;

     label1:
        if r0 == null goto label2;

        $z0 = virtualinvoke r0.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label3;

        $z1 = virtualinvoke r0.<java.io.File: boolean isDirectory()>();

        if $z1 == 0 goto label3;

     label2:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("file must not be a directory");

        throw $r1;

     label3:
        $r2 = new org.apache.poi.openxml4j.opc.ZipPackage;

        specialinvoke $r2.<org.apache.poi.openxml4j.opc.ZipPackage: void <init>(java.io.File,org.apache.poi.openxml4j.opc.PackageAccess)>(r0, r3);

        $r4 = $r2.<org.apache.poi.openxml4j.opc.OPCPackage: org.apache.poi.openxml4j.opc.PackagePartCollection partList>;

        if $r4 != null goto label4;

        $r5 = <org.apache.poi.openxml4j.opc.PackageAccess: org.apache.poi.openxml4j.opc.PackageAccess WRITE>;

        if r3 == $r5 goto label4;

        virtualinvoke $r2.<org.apache.poi.openxml4j.opc.OPCPackage: java.util.ArrayList getParts()>();

     label4:
        $r7 = virtualinvoke r0.<java.io.File: java.lang.String getAbsolutePath()>();

        $r2.<org.apache.poi.openxml4j.opc.OPCPackage: java.lang.String originalPackagePath> = $r7;

        return $r2;
    }

    public static org.apache.poi.openxml4j.opc.OPCPackage open(java.io.InputStream) throws org.apache.poi.openxml4j.exceptions.InvalidFormatException, java.io.IOException
    {
        org.apache.poi.openxml4j.opc.PackagePartCollection $r3;
        org.apache.poi.openxml4j.opc.PackageAccess $r2;
        org.apache.poi.openxml4j.opc.ZipPackage $r0;
        java.io.InputStream r1;

        r1 := @parameter0: java.io.InputStream;

        $r0 = new org.apache.poi.openxml4j.opc.ZipPackage;

        $r2 = <org.apache.poi.openxml4j.opc.PackageAccess: org.apache.poi.openxml4j.opc.PackageAccess READ_WRITE>;

        specialinvoke $r0.<org.apache.poi.openxml4j.opc.ZipPackage: void <init>(java.io.InputStream,org.apache.poi.openxml4j.opc.PackageAccess)>(r1, $r2);

        $r3 = $r0.<org.apache.poi.openxml4j.opc.OPCPackage: org.apache.poi.openxml4j.opc.PackagePartCollection partList>;

        if $r3 != null goto label1;

        virtualinvoke $r0.<org.apache.poi.openxml4j.opc.OPCPackage: java.util.ArrayList getParts()>();

     label1:
        return $r0;
    }

    public static org.apache.poi.openxml4j.opc.OPCPackage openOrCreate(java.io.File) throws org.apache.poi.openxml4j.exceptions.InvalidFormatException
    {
        org.apache.poi.openxml4j.opc.OPCPackage r2;
        java.lang.String $r1;
        java.io.File r0;
        boolean $z0;

        r0 := @parameter0: java.io.File;

        $z0 = virtualinvoke r0.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label1;

        $r1 = virtualinvoke r0.<java.io.File: java.lang.String getAbsolutePath()>();

        r2 = staticinvoke <org.apache.poi.openxml4j.opc.OPCPackage: org.apache.poi.openxml4j.opc.OPCPackage open(java.lang.String)>($r1);

        goto label2;

     label1:
        r2 = staticinvoke <org.apache.poi.openxml4j.opc.OPCPackage: org.apache.poi.openxml4j.opc.OPCPackage create(java.io.File)>(r0);

     label2:
        return r2;
    }

    public static org.apache.poi.openxml4j.opc.OPCPackage create(java.lang.String)
    {
        java.lang.String r1;
        org.apache.poi.openxml4j.opc.OPCPackage $r2;
        java.io.File $r0;

        r1 := @parameter0: java.lang.String;

        $r0 = new java.io.File;

        specialinvoke $r0.<java.io.File: void <init>(java.lang.String)>(r1);

        $r2 = staticinvoke <org.apache.poi.openxml4j.opc.OPCPackage: org.apache.poi.openxml4j.opc.OPCPackage create(java.io.File)>($r0);

        return $r2;
    }

    public static org.apache.poi.openxml4j.opc.OPCPackage create(java.io.File)
    {
        org.apache.poi.openxml4j.exceptions.InvalidOperationException $r4;
        java.lang.IllegalArgumentException $r1;
        java.io.File r0;
        java.lang.String $r3;
        org.apache.poi.openxml4j.opc.ZipPackage $r2;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: java.io.File;

        if r0 == null goto label1;

        $z0 = virtualinvoke r0.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label2;

        $z2 = virtualinvoke r0.<java.io.File: boolean isDirectory()>();

        if $z2 == 0 goto label2;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("file");

        throw $r1;

     label2:
        $z1 = virtualinvoke r0.<java.io.File: boolean exists()>();

        if $z1 == 0 goto label3;

        $r4 = new org.apache.poi.openxml4j.exceptions.InvalidOperationException;

        specialinvoke $r4.<org.apache.poi.openxml4j.exceptions.InvalidOperationException: void <init>(java.lang.String)>("This package (or file) already exists : use the open() method or delete the file.");

        throw $r4;

     label3:
        $r2 = new org.apache.poi.openxml4j.opc.ZipPackage;

        specialinvoke $r2.<org.apache.poi.openxml4j.opc.ZipPackage: void <init>()>();

        $r3 = virtualinvoke r0.<java.io.File: java.lang.String getAbsolutePath()>();

        $r2.<org.apache.poi.openxml4j.opc.OPCPackage: java.lang.String originalPackagePath> = $r3;

        staticinvoke <org.apache.poi.openxml4j.opc.OPCPackage: void configurePackage(org.apache.poi.openxml4j.opc.OPCPackage)>($r2);

        return $r2;
    }

    public static org.apache.poi.openxml4j.opc.OPCPackage create(java.io.OutputStream)
    {
        java.io.OutputStream r1;
        org.apache.poi.openxml4j.opc.ZipPackage $r0;

        r1 := @parameter0: java.io.OutputStream;

        $r0 = new org.apache.poi.openxml4j.opc.ZipPackage;

        specialinvoke $r0.<org.apache.poi.openxml4j.opc.ZipPackage: void <init>()>();

        $r0.<org.apache.poi.openxml4j.opc.OPCPackage: java.lang.String originalPackagePath> = null;

        $r0.<org.apache.poi.openxml4j.opc.OPCPackage: java.io.OutputStream output> = r1;

        staticinvoke <org.apache.poi.openxml4j.opc.OPCPackage: void configurePackage(org.apache.poi.openxml4j.opc.OPCPackage)>($r0);

        return $r0;
    }

    private static void configurePackage(org.apache.poi.openxml4j.opc.OPCPackage)
    {
        org.apache.poi.openxml4j.opc.internal.ZipContentTypeManager $r1;
        java.lang.IllegalStateException $r14;
        org.apache.poi.openxml4j.exceptions.InvalidFormatException $r13;
        org.apache.poi.openxml4j.opc.PackagePartName $r4, $r6, $r8;
        java.util.Date $r11;
        org.apache.poi.openxml4j.util.Nullable $r10;
        org.apache.poi.openxml4j.opc.OPCPackage r0;
        org.apache.poi.openxml4j.opc.internal.PackagePropertiesPart $r7, $r9, $r12;
        org.apache.poi.openxml4j.opc.internal.ContentTypeManager $r3, $r5;
        java.net.URI $r2;

        r0 := @parameter0: org.apache.poi.openxml4j.opc.OPCPackage;

     label1:
        $r1 = new org.apache.poi.openxml4j.opc.internal.ZipContentTypeManager;

        specialinvoke $r1.<org.apache.poi.openxml4j.opc.internal.ZipContentTypeManager: void <init>(java.io.InputStream,org.apache.poi.openxml4j.opc.OPCPackage)>(null, r0);

        r0.<org.apache.poi.openxml4j.opc.OPCPackage: org.apache.poi.openxml4j.opc.internal.ContentTypeManager contentTypeManager> = $r1;

        $r3 = r0.<org.apache.poi.openxml4j.opc.OPCPackage: org.apache.poi.openxml4j.opc.internal.ContentTypeManager contentTypeManager>;

        $r2 = <org.apache.poi.openxml4j.opc.PackagingURIHelper: java.net.URI PACKAGE_RELATIONSHIPS_ROOT_URI>;

        $r4 = staticinvoke <org.apache.poi.openxml4j.opc.PackagingURIHelper: org.apache.poi.openxml4j.opc.PackagePartName createPartName(java.net.URI)>($r2);

        virtualinvoke $r3.<org.apache.poi.openxml4j.opc.internal.ContentTypeManager: void addContentType(org.apache.poi.openxml4j.opc.PackagePartName,java.lang.String)>($r4, "application/vnd.openxmlformats-package.relationships+xml");

        $r5 = r0.<org.apache.poi.openxml4j.opc.OPCPackage: org.apache.poi.openxml4j.opc.internal.ContentTypeManager contentTypeManager>;

        $r6 = staticinvoke <org.apache.poi.openxml4j.opc.PackagingURIHelper: org.apache.poi.openxml4j.opc.PackagePartName createPartName(java.lang.String)>("/default.xml");

        virtualinvoke $r5.<org.apache.poi.openxml4j.opc.internal.ContentTypeManager: void addContentType(org.apache.poi.openxml4j.opc.PackagePartName,java.lang.String)>($r6, "application/xml");

        $r7 = new org.apache.poi.openxml4j.opc.internal.PackagePropertiesPart;

        $r8 = <org.apache.poi.openxml4j.opc.PackagingURIHelper: org.apache.poi.openxml4j.opc.PackagePartName CORE_PROPERTIES_PART_NAME>;

        specialinvoke $r7.<org.apache.poi.openxml4j.opc.internal.PackagePropertiesPart: void <init>(org.apache.poi.openxml4j.opc.OPCPackage,org.apache.poi.openxml4j.opc.PackagePartName)>(r0, $r8);

        r0.<org.apache.poi.openxml4j.opc.OPCPackage: org.apache.poi.openxml4j.opc.internal.PackagePropertiesPart packageProperties> = $r7;

        $r9 = r0.<org.apache.poi.openxml4j.opc.OPCPackage: org.apache.poi.openxml4j.opc.internal.PackagePropertiesPart packageProperties>;

        virtualinvoke $r9.<org.apache.poi.openxml4j.opc.internal.PackagePropertiesPart: void setCreatorProperty(java.lang.String)>("Generated by Apache POI OpenXML4J");

        $r12 = r0.<org.apache.poi.openxml4j.opc.OPCPackage: org.apache.poi.openxml4j.opc.internal.PackagePropertiesPart packageProperties>;

        $r10 = new org.apache.poi.openxml4j.util.Nullable;

        $r11 = new java.util.Date;

        specialinvoke $r11.<java.util.Date: void <init>()>();

        specialinvoke $r10.<org.apache.poi.openxml4j.util.Nullable: void <init>(java.lang.Object)>($r11);

        virtualinvoke $r12.<org.apache.poi.openxml4j.opc.internal.PackagePropertiesPart: void setCreatedProperty(org.apache.poi.openxml4j.util.Nullable)>($r10);

     label2:
        goto label4;

     label3:
        $r13 := @caughtexception;

        $r14 = new java.lang.IllegalStateException;

        specialinvoke $r14.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>($r13);

        throw $r14;

     label4:
        return;

        catch org.apache.poi.openxml4j.exceptions.InvalidFormatException from label1 to label2 with label3;
    }

    public void flush()
    {
        org.apache.poi.openxml4j.opc.OPCPackage r0;
        org.apache.poi.openxml4j.opc.internal.PackagePropertiesPart $r1, $r2;

        r0 := @this: org.apache.poi.openxml4j.opc.OPCPackage;

        virtualinvoke r0.<org.apache.poi.openxml4j.opc.OPCPackage: void throwExceptionIfReadOnly()>();

        $r1 = r0.<org.apache.poi.openxml4j.opc.OPCPackage: org.apache.poi.openxml4j.opc.internal.PackagePropertiesPart packageProperties>;

        if $r1 == null goto label1;

        $r2 = r0.<org.apache.poi.openxml4j.opc.OPCPackage: org.apache.poi.openxml4j.opc.internal.PackagePropertiesPart packageProperties>;

        virtualinvoke $r2.<org.apache.poi.openxml4j.opc.internal.PackagePropertiesPart: void flush()>();

     label1:
        virtualinvoke r0.<org.apache.poi.openxml4j.opc.OPCPackage: void flushImpl()>();

        return;
    }

    public void close() throws java.io.IOException
    {
        java.lang.Throwable $r20;
        org.apache.poi.openxml4j.opc.PackageAccess $r1, $r2;
        java.util.concurrent.locks.ReentrantReadWriteLock $r4;
        java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock $r5, $r21, $r22;
        java.lang.String $r6, $r11, $r12, $r13, $r15, $r16, $r17;
        boolean $z0, $z1, $z2;
        java.io.OutputStream $r7, $r9, $r10;
        org.apache.poi.util.POILogger $r18, $r19;
        java.io.File $r14;
        org.apache.poi.openxml4j.opc.OPCPackage r0;
        org.apache.poi.openxml4j.opc.internal.ContentTypeManager $r3, $r8;

        r0 := @this: org.apache.poi.openxml4j.opc.OPCPackage;

        $r2 = r0.<org.apache.poi.openxml4j.opc.OPCPackage: org.apache.poi.openxml4j.opc.PackageAccess packageAccess>;

        $r1 = <org.apache.poi.openxml4j.opc.PackageAccess: org.apache.poi.openxml4j.opc.PackageAccess READ>;

        if $r2 != $r1 goto label01;

        $r19 = <org.apache.poi.openxml4j.opc.OPCPackage: org.apache.poi.util.POILogger logger>;

        virtualinvoke $r19.<org.apache.poi.util.POILogger: void log(int,java.lang.Object)>(5, "The close() method is intended to SAVE a package. This package is open in READ ONLY mode, use the revert() method instead !");

        virtualinvoke r0.<org.apache.poi.openxml4j.opc.OPCPackage: void revert()>();

        return;

     label01:
        $r3 = r0.<org.apache.poi.openxml4j.opc.OPCPackage: org.apache.poi.openxml4j.opc.internal.ContentTypeManager contentTypeManager>;

        if $r3 != null goto label02;

        $r18 = <org.apache.poi.openxml4j.opc.OPCPackage: org.apache.poi.util.POILogger logger>;

        virtualinvoke $r18.<org.apache.poi.util.POILogger: void log(int,java.lang.Object)>(5, "Unable to call close() on a package that hasn\'t been fully opened yet");

        return;

     label02:
        $r4 = new java.util.concurrent.locks.ReentrantReadWriteLock;

        specialinvoke $r4.<java.util.concurrent.locks.ReentrantReadWriteLock: void <init>()>();

     label03:
        $r5 = virtualinvoke $r4.<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock writeLock()>();

        virtualinvoke $r5.<java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: void lock()>();

        $r6 = r0.<org.apache.poi.openxml4j.opc.OPCPackage: java.lang.String originalPackagePath>;

        if $r6 == null goto label07;

        $r12 = "";

        $r11 = r0.<org.apache.poi.openxml4j.opc.OPCPackage: java.lang.String originalPackagePath>;

        $r13 = virtualinvoke $r11.<java.lang.String: java.lang.String trim()>();

        $z0 = virtualinvoke $r12.<java.lang.String: boolean equals(java.lang.Object)>($r13);

        if $z0 != 0 goto label07;

        $r14 = new java.io.File;

        $r15 = r0.<org.apache.poi.openxml4j.opc.OPCPackage: java.lang.String originalPackagePath>;

        specialinvoke $r14.<java.io.File: void <init>(java.lang.String)>($r15);

        $z1 = virtualinvoke $r14.<java.io.File: boolean exists()>();

        if $z1 == 0 goto label04;

        $r16 = r0.<org.apache.poi.openxml4j.opc.OPCPackage: java.lang.String originalPackagePath>;

        $r17 = virtualinvoke $r14.<java.io.File: java.lang.String getAbsolutePath()>();

        $z2 = virtualinvoke $r16.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r17);

        if $z2 != 0 goto label05;

     label04:
        virtualinvoke r0.<org.apache.poi.openxml4j.opc.OPCPackage: void save(java.io.File)>($r14);

        goto label06;

     label05:
        virtualinvoke r0.<org.apache.poi.openxml4j.opc.OPCPackage: void closeImpl()>();

     label06:
        goto label08;

     label07:
        $r7 = r0.<org.apache.poi.openxml4j.opc.OPCPackage: java.io.OutputStream output>;

        if $r7 == null goto label08;

        $r9 = r0.<org.apache.poi.openxml4j.opc.OPCPackage: java.io.OutputStream output>;

        virtualinvoke r0.<org.apache.poi.openxml4j.opc.OPCPackage: void save(java.io.OutputStream)>($r9);

        $r10 = r0.<org.apache.poi.openxml4j.opc.OPCPackage: java.io.OutputStream output>;

        virtualinvoke $r10.<java.io.OutputStream: void close()>();

     label08:
        $r22 = virtualinvoke $r4.<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock writeLock()>();

        virtualinvoke $r22.<java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: void unlock()>();

        goto label11;

     label09:
        $r20 := @caughtexception;

     label10:
        $r21 = virtualinvoke $r4.<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock writeLock()>();

        virtualinvoke $r21.<java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: void unlock()>();

        throw $r20;

     label11:
        $r8 = r0.<org.apache.poi.openxml4j.opc.OPCPackage: org.apache.poi.openxml4j.opc.internal.ContentTypeManager contentTypeManager>;

        virtualinvoke $r8.<org.apache.poi.openxml4j.opc.internal.ContentTypeManager: void clearAll()>();

        return;

        catch java.lang.Throwable from label03 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    public void revert()
    {
        org.apache.poi.openxml4j.opc.OPCPackage r0;

        r0 := @this: org.apache.poi.openxml4j.opc.OPCPackage;

        virtualinvoke r0.<org.apache.poi.openxml4j.opc.OPCPackage: void revertImpl()>();

        return;
    }

    public void addThumbnail(java.lang.String) throws java.io.IOException
    {
        org.apache.poi.openxml4j.opc.PackagePart $r9, $r10;
        boolean $z0;
        org.apache.poi.openxml4j.exceptions.InvalidFormatException $r21, $r28;
        org.apache.poi.openxml4j.opc.PackagePartName r34;
        org.apache.poi.openxml4j.exceptions.InvalidOperationException $r39, $r41;
        org.apache.poi.openxml4j.opc.OPCPackage r8;
        java.lang.StringBuilder $r5, $r6, $r16, $r17, $r18, $r24, $r25, $r26, $r30, $r32, $r36, $r37, $r38, $r40;
        int $i1, $i2, $i3, $i4, $i5;
        java.lang.String r0, $r1, $r2, $r3, $r7, $r19, $r27, $r31, $r33;
        java.io.OutputStream $r13;
        char $c0;
        java.io.FileInputStream $r42;
        java.lang.IllegalArgumentException $r35;
        org.apache.poi.openxml4j.opc.TargetMode $r11;

        r8 := @this: org.apache.poi.openxml4j.opc.OPCPackage;

        r0 := @parameter0: java.lang.String;

        $r1 = "";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z0 == 0 goto label1;

        $r35 = new java.lang.IllegalArgumentException;

        specialinvoke $r35.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("path");

        throw $r35;

     label1:
        $c0 = <java.io.File: char separatorChar>;

        $i5 = (int) $c0;

        $i1 = virtualinvoke r0.<java.lang.String: int lastIndexOf(int)>($i5);

        $i2 = $i1 + 1;

        $r2 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>($i2);

        $r3 = staticinvoke <org.apache.poi.openxml4j.opc.ContentTypes: java.lang.String getContentTypeFromFileExtension(java.lang.String)>($r2);

     label2:
        $r36 = new java.lang.StringBuilder;

        specialinvoke $r36.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/docProps/");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        r34 = staticinvoke <org.apache.poi.openxml4j.opc.PackagingURIHelper: org.apache.poi.openxml4j.opc.PackagePartName createPartName(java.lang.String)>($r7);

     label3:
        goto label8;

     label4:
        $r28 := @caughtexception;

     label5:
        $r37 = new java.lang.StringBuilder;

        specialinvoke $r37.<java.lang.StringBuilder: void <init>()>();

        $r30 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/docProps/thumbnail");

        $i3 = virtualinvoke r0.<java.lang.String: int lastIndexOf(java.lang.String)>(".");

        $i4 = $i3 + 1;

        $r31 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>($i4);

        $r32 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r31);

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        r34 = staticinvoke <org.apache.poi.openxml4j.opc.PackagingURIHelper: org.apache.poi.openxml4j.opc.PackagePartName createPartName(java.lang.String)>($r33);

     label6:
        goto label8;

     label7:
        $r21 := @caughtexception;

        $r39 = new org.apache.poi.openxml4j.exceptions.InvalidOperationException;

        $r38 = new java.lang.StringBuilder;

        specialinvoke $r38.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t add a thumbnail file named \'");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r39.<org.apache.poi.openxml4j.exceptions.InvalidOperationException: void <init>(java.lang.String)>($r27);

        throw $r39;

     label8:
        $r9 = virtualinvoke r8.<org.apache.poi.openxml4j.opc.OPCPackage: org.apache.poi.openxml4j.opc.PackagePart getPart(org.apache.poi.openxml4j.opc.PackagePartName)>(r34);

        if $r9 == null goto label9;

        $r41 = new org.apache.poi.openxml4j.exceptions.InvalidOperationException;

        $r40 = new java.lang.StringBuilder;

        specialinvoke $r40.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("You already add a thumbnail named \'");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r41.<org.apache.poi.openxml4j.exceptions.InvalidOperationException: void <init>(java.lang.String)>($r19);

        throw $r41;

     label9:
        $r10 = virtualinvoke r8.<org.apache.poi.openxml4j.opc.OPCPackage: org.apache.poi.openxml4j.opc.PackagePart createPart(org.apache.poi.openxml4j.opc.PackagePartName,java.lang.String,boolean)>(r34, $r3, 0);

        $r11 = <org.apache.poi.openxml4j.opc.TargetMode: org.apache.poi.openxml4j.opc.TargetMode INTERNAL>;

        virtualinvoke r8.<org.apache.poi.openxml4j.opc.OPCPackage: org.apache.poi.openxml4j.opc.PackageRelationship addRelationship(org.apache.poi.openxml4j.opc.PackagePartName,org.apache.poi.openxml4j.opc.TargetMode,java.lang.String)>(r34, $r11, "http://schemas.openxmlformats.org/package/2006/relationships/metadata/thumbnail");

        $r42 = new java.io.FileInputStream;

        specialinvoke $r42.<java.io.FileInputStream: void <init>(java.lang.String)>(r0);

        $r13 = virtualinvoke $r10.<org.apache.poi.openxml4j.opc.PackagePart: java.io.OutputStream getOutputStream()>();

        staticinvoke <org.apache.poi.openxml4j.opc.StreamHelper: boolean copyStream(java.io.InputStream,java.io.OutputStream)>($r42, $r13);

        virtualinvoke $r42.<java.io.FileInputStream: void close()>();

        return;

        catch org.apache.poi.openxml4j.exceptions.InvalidFormatException from label2 to label3 with label4;
        catch org.apache.poi.openxml4j.exceptions.InvalidFormatException from label5 to label6 with label7;
    }

    void throwExceptionIfReadOnly() throws org.apache.poi.openxml4j.exceptions.InvalidOperationException
    {
        org.apache.poi.openxml4j.opc.OPCPackage r0;
        org.apache.poi.openxml4j.opc.PackageAccess $r1, $r2;
        org.apache.poi.openxml4j.exceptions.InvalidOperationException $r3;

        r0 := @this: org.apache.poi.openxml4j.opc.OPCPackage;

        $r2 = r0.<org.apache.poi.openxml4j.opc.OPCPackage: org.apache.poi.openxml4j.opc.PackageAccess packageAccess>;

        $r1 = <org.apache.poi.openxml4j.opc.PackageAccess: org.apache.poi.openxml4j.opc.PackageAccess READ>;

        if $r2 != $r1 goto label1;

        $r3 = new org.apache.poi.openxml4j.exceptions.InvalidOperationException;

        specialinvoke $r3.<org.apache.poi.openxml4j.exceptions.InvalidOperationException: void <init>(java.lang.String)>("Operation not allowed, document open in read only mode!");

        throw $r3;

     label1:
        return;
    }

    void throwExceptionIfWriteOnly() throws org.apache.poi.openxml4j.exceptions.InvalidOperationException
    {
        org.apache.poi.openxml4j.opc.OPCPackage r0;
        org.apache.poi.openxml4j.opc.PackageAccess $r1, $r2;
        org.apache.poi.openxml4j.exceptions.InvalidOperationException $r3;

        r0 := @this: org.apache.poi.openxml4j.opc.OPCPackage;

        $r2 = r0.<org.apache.poi.openxml4j.opc.OPCPackage: org.apache.poi.openxml4j.opc.PackageAccess packageAccess>;

        $r1 = <org.apache.poi.openxml4j.opc.PackageAccess: org.apache.poi.openxml4j.opc.PackageAccess WRITE>;

        if $r2 != $r1 goto label1;

        $r3 = new org.apache.poi.openxml4j.exceptions.InvalidOperationException;

        specialinvoke $r3.<org.apache.poi.openxml4j.exceptions.InvalidOperationException: void <init>(java.lang.String)>("Operation not allowed, document open in write only mode!");

        throw $r3;

     label1:
        return;
    }

    public org.apache.poi.openxml4j.opc.PackageProperties getPackageProperties() throws org.apache.poi.openxml4j.exceptions.InvalidFormatException
    {
        org.apache.poi.openxml4j.opc.OPCPackage r0;
        org.apache.poi.openxml4j.opc.internal.PackagePropertiesPart $r1, $r2, $r3;
        org.apache.poi.openxml4j.opc.PackagePartName $r4;

        r0 := @this: org.apache.poi.openxml4j.opc.OPCPackage;

        virtualinvoke r0.<org.apache.poi.openxml4j.opc.OPCPackage: void throwExceptionIfWriteOnly()>();

        $r1 = r0.<org.apache.poi.openxml4j.opc.OPCPackage: org.apache.poi.openxml4j.opc.internal.PackagePropertiesPart packageProperties>;

        if $r1 != null goto label1;

        $r3 = new org.apache.poi.openxml4j.opc.internal.PackagePropertiesPart;

        $r4 = <org.apache.poi.openxml4j.opc.PackagingURIHelper: org.apache.poi.openxml4j.opc.PackagePartName CORE_PROPERTIES_PART_NAME>;

        specialinvoke $r3.<org.apache.poi.openxml4j.opc.internal.PackagePropertiesPart: void <init>(org.apache.poi.openxml4j.opc.OPCPackage,org.apache.poi.openxml4j.opc.PackagePartName)>(r0, $r4);

        r0.<org.apache.poi.openxml4j.opc.OPCPackage: org.apache.poi.openxml4j.opc.internal.PackagePropertiesPart packageProperties> = $r3;

     label1:
        $r2 = r0.<org.apache.poi.openxml4j.opc.OPCPackage: org.apache.poi.openxml4j.opc.internal.PackagePropertiesPart packageProperties>;

        return $r2;
    }

    public org.apache.poi.openxml4j.opc.PackagePart getPart(org.apache.poi.openxml4j.opc.PackagePartName)
    {
        org.apache.poi.openxml4j.exceptions.InvalidFormatException $r5;
        org.apache.poi.openxml4j.opc.OPCPackage r0;
        org.apache.poi.openxml4j.opc.PackagePartName r1;
        org.apache.poi.openxml4j.opc.PackagePartCollection $r2;
        org.apache.poi.openxml4j.opc.PackagePart $r3;
        java.lang.IllegalArgumentException $r4;

        r0 := @this: org.apache.poi.openxml4j.opc.OPCPackage;

        r1 := @parameter0: org.apache.poi.openxml4j.opc.PackagePartName;

        virtualinvoke r0.<org.apache.poi.openxml4j.opc.OPCPackage: void throwExceptionIfWriteOnly()>();

        if r1 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("partName");

        throw $r4;

     label1:
        $r2 = r0.<org.apache.poi.openxml4j.opc.OPCPackage: org.apache.poi.openxml4j.opc.PackagePartCollection partList>;

        if $r2 != null goto label5;

     label2:
        virtualinvoke r0.<org.apache.poi.openxml4j.opc.OPCPackage: java.util.ArrayList getParts()>();

     label3:
        goto label5;

     label4:
        $r5 := @caughtexception;

        return null;

     label5:
        $r3 = virtualinvoke r0.<org.apache.poi.openxml4j.opc.OPCPackage: org.apache.poi.openxml4j.opc.PackagePart getPartImpl(org.apache.poi.openxml4j.opc.PackagePartName)>(r1);

        return $r3;

        catch org.apache.poi.openxml4j.exceptions.InvalidFormatException from label2 to label3 with label4;
    }

    public java.util.ArrayList getPartsByContentType(java.lang.String)
    {
        java.util.Iterator $r4;
        org.apache.poi.openxml4j.opc.PackagePartCollection $r2;
        java.util.Collection $r3;
        java.util.ArrayList $r0;
        org.apache.poi.openxml4j.opc.OPCPackage r1;
        java.lang.Object $r5;
        org.apache.poi.openxml4j.opc.PackagePart r6;
        java.lang.String $r7, r8;
        boolean $z0, $z1;

        r1 := @this: org.apache.poi.openxml4j.opc.OPCPackage;

        r8 := @parameter0: java.lang.String;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r2 = r1.<org.apache.poi.openxml4j.opc.OPCPackage: org.apache.poi.openxml4j.opc.PackagePartCollection partList>;

        $r3 = virtualinvoke $r2.<org.apache.poi.openxml4j.opc.PackagePartCollection: java.util.Collection values()>();

        $r4 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (org.apache.poi.openxml4j.opc.PackagePart) $r5;

        $r7 = virtualinvoke r6.<org.apache.poi.openxml4j.opc.PackagePart: java.lang.String getContentType()>();

        $z1 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>(r8);

        if $z1 == 0 goto label2;

        virtualinvoke $r0.<java.util.ArrayList: boolean add(java.lang.Object)>(r6);

     label2:
        goto label1;

     label3:
        return $r0;
    }

    public java.util.ArrayList getPartsByRelationshipType(java.lang.String)
    {
        java.util.Iterator $r4;
        java.lang.IllegalArgumentException $r8;
        org.apache.poi.openxml4j.opc.PackageRelationship r6;
        java.util.ArrayList $r1;
        org.apache.poi.openxml4j.opc.OPCPackage r2;
        org.apache.poi.openxml4j.opc.PackageRelationshipCollection $r3;
        java.lang.Object $r5;
        org.apache.poi.openxml4j.opc.PackagePart $r7;
        java.lang.String r0;
        boolean $z0;

        r2 := @this: org.apache.poi.openxml4j.opc.OPCPackage;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("relationshipType");

        throw $r8;

     label1:
        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        $r3 = virtualinvoke r2.<org.apache.poi.openxml4j.opc.OPCPackage: org.apache.poi.openxml4j.opc.PackageRelationshipCollection getRelationshipsByType(java.lang.String)>(r0);

        $r4 = virtualinvoke $r3.<org.apache.poi.openxml4j.opc.PackageRelationshipCollection: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (org.apache.poi.openxml4j.opc.PackageRelationship) $r5;

        $r7 = virtualinvoke r2.<org.apache.poi.openxml4j.opc.OPCPackage: org.apache.poi.openxml4j.opc.PackagePart getPart(org.apache.poi.openxml4j.opc.PackageRelationship)>(r6);

        if $r7 == null goto label3;

        virtualinvoke $r1.<java.util.ArrayList: boolean add(java.lang.Object)>($r7);

     label3:
        goto label2;

     label4:
        return $r1;
    }

    public java.util.List getPartsByName(java.util.regex.Pattern)
    {
        java.util.Iterator $r5;
        org.apache.poi.openxml4j.opc.PackagePartName $r8;
        org.apache.poi.openxml4j.opc.PackagePartCollection $r3;
        java.util.Collection $r4;
        java.lang.IllegalArgumentException $r11;
        java.util.ArrayList $r1;
        java.util.regex.Matcher $r10;
        org.apache.poi.openxml4j.opc.OPCPackage r2;
        java.lang.Object $r6;
        org.apache.poi.openxml4j.opc.PackagePart r7;
        java.util.regex.Pattern r0;
        java.lang.String $r9;
        boolean $z0, $z1;

        r2 := @this: org.apache.poi.openxml4j.opc.OPCPackage;

        r0 := @parameter0: java.util.regex.Pattern;

        if r0 != null goto label1;

        $r11 = new java.lang.IllegalArgumentException;

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("name pattern must not be null");

        throw $r11;

     label1:
        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        $r3 = r2.<org.apache.poi.openxml4j.opc.OPCPackage: org.apache.poi.openxml4j.opc.PackagePartCollection partList>;

        $r4 = virtualinvoke $r3.<org.apache.poi.openxml4j.opc.PackagePartCollection: java.util.Collection values()>();

        $r5 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (org.apache.poi.openxml4j.opc.PackagePart) $r6;

        $r8 = virtualinvoke r7.<org.apache.poi.openxml4j.opc.PackagePart: org.apache.poi.openxml4j.opc.PackagePartName getPartName()>();

        $r9 = virtualinvoke $r8.<org.apache.poi.openxml4j.opc.PackagePartName: java.lang.String getName()>();

        $r10 = virtualinvoke r0.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r9);

        $z1 = virtualinvoke $r10.<java.util.regex.Matcher: boolean matches()>();

        if $z1 == 0 goto label3;

        virtualinvoke $r1.<java.util.ArrayList: boolean add(java.lang.Object)>(r7);

     label3:
        goto label2;

     label4:
        return $r1;
    }

    public org.apache.poi.openxml4j.opc.PackagePart getPart(org.apache.poi.openxml4j.opc.PackageRelationship)
    {
        java.util.Iterator $r2;
        org.apache.poi.openxml4j.exceptions.InvalidFormatException $r10;
        org.apache.poi.openxml4j.opc.PackagePartName $r9;
        org.apache.poi.openxml4j.opc.PackageRelationship r4, r6;
        org.apache.poi.openxml4j.opc.OPCPackage r0;
        org.apache.poi.openxml4j.opc.PackageRelationshipCollection $r1;
        java.lang.Object $r3;
        org.apache.poi.openxml4j.opc.PackagePart r11;
        java.lang.String $r5, $r7;
        java.net.URI $r8;
        boolean $z0, $z1;

        r0 := @this: org.apache.poi.openxml4j.opc.OPCPackage;

        r6 := @parameter0: org.apache.poi.openxml4j.opc.PackageRelationship;

        r11 = null;

        virtualinvoke r0.<org.apache.poi.openxml4j.opc.OPCPackage: void ensureRelationships()>();

        $r1 = r0.<org.apache.poi.openxml4j.opc.OPCPackage: org.apache.poi.openxml4j.opc.PackageRelationshipCollection relationships>;

        $r2 = virtualinvoke $r1.<org.apache.poi.openxml4j.opc.PackageRelationshipCollection: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label6;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.apache.poi.openxml4j.opc.PackageRelationship) $r3;

        $r5 = virtualinvoke r4.<org.apache.poi.openxml4j.opc.PackageRelationship: java.lang.String getRelationshipType()>();

        $r7 = virtualinvoke r6.<org.apache.poi.openxml4j.opc.PackageRelationship: java.lang.String getRelationshipType()>();

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r7);

        if $z0 == 0 goto label5;

     label2:
        $r8 = virtualinvoke r4.<org.apache.poi.openxml4j.opc.PackageRelationship: java.net.URI getTargetURI()>();

        $r9 = staticinvoke <org.apache.poi.openxml4j.opc.PackagingURIHelper: org.apache.poi.openxml4j.opc.PackagePartName createPartName(java.net.URI)>($r8);

        r11 = virtualinvoke r0.<org.apache.poi.openxml4j.opc.OPCPackage: org.apache.poi.openxml4j.opc.PackagePart getPart(org.apache.poi.openxml4j.opc.PackagePartName)>($r9);

     label3:
        goto label6;

     label4:
        $r10 := @caughtexception;

        goto label1;

     label5:
        goto label1;

     label6:
        return r11;

        catch org.apache.poi.openxml4j.exceptions.InvalidFormatException from label2 to label3 with label4;
    }

    public java.util.ArrayList getParts() throws org.apache.poi.openxml4j.exceptions.InvalidFormatException
    {
        org.apache.poi.openxml4j.opc.PackagePartCollection $r1, $r3, $r6, $r9, $r12, $r18;
        org.apache.poi.openxml4j.opc.internal.ContentType $r44;
        org.apache.poi.openxml4j.opc.PackagePart[] $r5;
        org.apache.poi.openxml4j.opc.internal.PackagePropertiesPart $r19;
        org.apache.poi.openxml4j.opc.PackagePart r7, $r16;
        boolean $z0, $z1, $z2, z3, z4, z5, z6;
        org.apache.poi.openxml4j.exceptions.InvalidFormatException $r21, $r31, $r34;
        org.apache.poi.openxml4j.opc.PackagePartName $r8, $r11, $r14, $r17, $r24, $r40;
        java.util.Collection $r4;
        org.apache.poi.util.POILogger $r20, $r38;
        org.apache.poi.openxml4j.exceptions.InvalidOperationException $r30, $r33;
        org.apache.poi.openxml4j.opc.OPCPackage r0;
        java.lang.StringBuilder $r22, $r23, $r25, $r26, $r27, $r28, $r37, $r39, $r41;
        java.util.ArrayList $r2;
        int i0, i1;
        java.lang.String $r10, $r29, $r32, $r35, $r42;
        java.util.Hashtable $r43;
        java.io.IOException $r36;
        org.apache.poi.openxml4j.opc.internal.PartUnmarshaller $r46;
        org.apache.poi.openxml4j.opc.internal.unmarshallers.UnmarshallContext $r13;
        java.lang.Object $r45;
        java.io.InputStream $r15;

        r0 := @this: org.apache.poi.openxml4j.opc.OPCPackage;

        virtualinvoke r0.<org.apache.poi.openxml4j.opc.OPCPackage: void throwExceptionIfWriteOnly()>();

        $r1 = r0.<org.apache.poi.openxml4j.opc.OPCPackage: org.apache.poi.openxml4j.opc.PackagePartCollection partList>;

        if $r1 != null goto label14;

        z3 = 0;

        z6 = 0;

        z5 = 0;

        z4 = 1;

        $r5 = virtualinvoke r0.<org.apache.poi.openxml4j.opc.OPCPackage: org.apache.poi.openxml4j.opc.PackagePart[] getPartsImpl()>();

        $r6 = new org.apache.poi.openxml4j.opc.PackagePartCollection;

        specialinvoke $r6.<org.apache.poi.openxml4j.opc.PackagePartCollection: void <init>()>();

        r0.<org.apache.poi.openxml4j.opc.OPCPackage: org.apache.poi.openxml4j.opc.PackagePartCollection partList> = $r6;

        i0 = lengthof $r5;

        i1 = 0;

     label01:
        if i1 >= i0 goto label14;

        r7 = $r5[i1];

        $r9 = r0.<org.apache.poi.openxml4j.opc.OPCPackage: org.apache.poi.openxml4j.opc.PackagePartCollection partList>;

        $r8 = r7.<org.apache.poi.openxml4j.opc.PackagePart: org.apache.poi.openxml4j.opc.PackagePartName _partName>;

        $z0 = virtualinvoke $r9.<org.apache.poi.openxml4j.opc.PackagePartCollection: boolean containsKey(java.lang.Object)>($r8);

        if $z0 == 0 goto label02;

        $r21 = new org.apache.poi.openxml4j.exceptions.InvalidFormatException;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("A part with the name \'");

        $r24 = r7.<org.apache.poi.openxml4j.opc.PackagePart: org.apache.poi.openxml4j.opc.PackagePartName _partName>;

        $r25 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r24);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' already exist : Packages shall not contain equivalent ");

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("part names and package implementers shall neither create ");

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("nor recognize packages with equivalent part names. [M1.12]");

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r21.<org.apache.poi.openxml4j.exceptions.InvalidFormatException: void <init>(java.lang.String)>($r29);

        throw $r21;

     label02:
        $r10 = virtualinvoke r7.<org.apache.poi.openxml4j.opc.PackagePart: java.lang.String getContentType()>();

        $z1 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>("application/vnd.openxmlformats-package.core-properties+xml");

        if $z1 == 0 goto label04;

        if z6 != 0 goto label03;

        z3 = 1;

        z6 = 1;

        z5 = 1;

        goto label04;

     label03:
        $r20 = <org.apache.poi.openxml4j.opc.OPCPackage: org.apache.poi.util.POILogger logger>;

        virtualinvoke $r20.<org.apache.poi.util.POILogger: void log(int,java.lang.Object)>(5, "OPC Compliance error [M4.1]: there is more than one core properties relationship in the package! POI will use only the first, but other software may reject this file.");

     label04:
        $r43 = r0.<org.apache.poi.openxml4j.opc.OPCPackage: java.util.Hashtable partUnmarshallers>;

        $r44 = r7.<org.apache.poi.openxml4j.opc.PackagePart: org.apache.poi.openxml4j.opc.internal.ContentType _contentType>;

        $r45 = virtualinvoke $r43.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>($r44);

        $r46 = (org.apache.poi.openxml4j.opc.internal.PartUnmarshaller) $r45;

        if $r46 == null goto label10;

        $r13 = new org.apache.poi.openxml4j.opc.internal.unmarshallers.UnmarshallContext;

        $r14 = r7.<org.apache.poi.openxml4j.opc.PackagePart: org.apache.poi.openxml4j.opc.PackagePartName _partName>;

        specialinvoke $r13.<org.apache.poi.openxml4j.opc.internal.unmarshallers.UnmarshallContext: void <init>(org.apache.poi.openxml4j.opc.OPCPackage,org.apache.poi.openxml4j.opc.PackagePartName)>(r0, $r14);

     label05:
        $r15 = virtualinvoke r7.<org.apache.poi.openxml4j.opc.PackagePart: java.io.InputStream getInputStream()>();

        $r16 = interfaceinvoke $r46.<org.apache.poi.openxml4j.opc.internal.PartUnmarshaller: org.apache.poi.openxml4j.opc.PackagePart unmarshall(org.apache.poi.openxml4j.opc.internal.unmarshallers.UnmarshallContext,java.io.InputStream)>($r13, $r15);

        $r18 = r0.<org.apache.poi.openxml4j.opc.OPCPackage: org.apache.poi.openxml4j.opc.PackagePartCollection partList>;

        $r17 = $r16.<org.apache.poi.openxml4j.opc.PackagePart: org.apache.poi.openxml4j.opc.PackagePartName _partName>;

        virtualinvoke $r18.<org.apache.poi.openxml4j.opc.PackagePartCollection: org.apache.poi.openxml4j.opc.PackagePart put(org.apache.poi.openxml4j.opc.PackagePartName,org.apache.poi.openxml4j.opc.PackagePart)>($r17, $r16);

        $z2 = $r16 instanceof org.apache.poi.openxml4j.opc.internal.PackagePropertiesPart;

        if $z2 == 0 goto label06;

        if z5 == 0 goto label06;

        if z4 == 0 goto label06;

        $r19 = (org.apache.poi.openxml4j.opc.internal.PackagePropertiesPart) $r16;

        r0.<org.apache.poi.openxml4j.opc.OPCPackage: org.apache.poi.openxml4j.opc.internal.PackagePropertiesPart packageProperties> = $r19;

        z4 = 0;

     label06:
        goto label09;

     label07:
        $r36 := @caughtexception;

        $r38 = <org.apache.poi.openxml4j.opc.OPCPackage: org.apache.poi.util.POILogger logger>;

        $r37 = new java.lang.StringBuilder;

        specialinvoke $r37.<java.lang.StringBuilder: void <init>()>();

        $r39 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unmarshall operation : IOException for ");

        $r40 = r7.<org.apache.poi.openxml4j.opc.PackagePart: org.apache.poi.openxml4j.opc.PackagePartName _partName>;

        $r41 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r40);

        $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r38.<org.apache.poi.util.POILogger: void log(int,java.lang.Object)>(5, $r42);

        goto label13;

     label08:
        $r33 := @caughtexception;

        $r34 = new org.apache.poi.openxml4j.exceptions.InvalidFormatException;

        $r35 = virtualinvoke $r33.<org.apache.poi.openxml4j.exceptions.InvalidOperationException: java.lang.String getMessage()>();

        specialinvoke $r34.<org.apache.poi.openxml4j.exceptions.InvalidFormatException: void <init>(java.lang.String)>($r35);

        throw $r34;

     label09:
        goto label13;

     label10:
        $r12 = r0.<org.apache.poi.openxml4j.opc.OPCPackage: org.apache.poi.openxml4j.opc.PackagePartCollection partList>;

        $r11 = r7.<org.apache.poi.openxml4j.opc.PackagePart: org.apache.poi.openxml4j.opc.PackagePartName _partName>;

        virtualinvoke $r12.<org.apache.poi.openxml4j.opc.PackagePartCollection: org.apache.poi.openxml4j.opc.PackagePart put(org.apache.poi.openxml4j.opc.PackagePartName,org.apache.poi.openxml4j.opc.PackagePart)>($r11, r7);

     label11:
        goto label13;

     label12:
        $r30 := @caughtexception;

        $r31 = new org.apache.poi.openxml4j.exceptions.InvalidFormatException;

        $r32 = virtualinvoke $r30.<org.apache.poi.openxml4j.exceptions.InvalidOperationException: java.lang.String getMessage()>();

        specialinvoke $r31.<org.apache.poi.openxml4j.exceptions.InvalidFormatException: void <init>(java.lang.String)>($r32);

        throw $r31;

     label13:
        i1 = i1 + 1;

        goto label01;

     label14:
        $r2 = new java.util.ArrayList;

        $r3 = r0.<org.apache.poi.openxml4j.opc.OPCPackage: org.apache.poi.openxml4j.opc.PackagePartCollection partList>;

        $r4 = virtualinvoke $r3.<org.apache.poi.openxml4j.opc.PackagePartCollection: java.util.Collection values()>();

        specialinvoke $r2.<java.util.ArrayList: void <init>(java.util.Collection)>($r4);

        return $r2;

        catch java.io.IOException from label05 to label06 with label07;
        catch org.apache.poi.openxml4j.exceptions.InvalidOperationException from label05 to label06 with label08;
        catch org.apache.poi.openxml4j.exceptions.InvalidOperationException from label10 to label11 with label12;
    }

    public org.apache.poi.openxml4j.opc.PackagePart createPart(org.apache.poi.openxml4j.opc.PackagePartName, java.lang.String)
    {
        org.apache.poi.openxml4j.opc.OPCPackage r0;
        org.apache.poi.openxml4j.opc.PackagePartName r1;
        org.apache.poi.openxml4j.opc.PackagePart $r3;
        java.lang.String r2;

        r0 := @this: org.apache.poi.openxml4j.opc.OPCPackage;

        r1 := @parameter0: org.apache.poi.openxml4j.opc.PackagePartName;

        r2 := @parameter1: java.lang.String;

        $r3 = virtualinvoke r0.<org.apache.poi.openxml4j.opc.OPCPackage: org.apache.poi.openxml4j.opc.PackagePart createPart(org.apache.poi.openxml4j.opc.PackagePartName,java.lang.String,boolean)>(r1, r2, 1);

        return $r3;
    }

    org.apache.poi.openxml4j.opc.PackagePart createPart(org.apache.poi.openxml4j.opc.PackagePartName, java.lang.String, boolean)
    {
        org.apache.poi.openxml4j.opc.PackagePartCollection $r4, $r7, $r10;
        org.apache.poi.openxml4j.opc.internal.PackagePropertiesPart $r8;
        org.apache.poi.openxml4j.opc.PackagePart $r5, $r12;
        java.lang.String r2, $r16, $r21;
        boolean $z0, $z1, $z2, z3, $z4;
        org.apache.poi.openxml4j.opc.PackagePartName r1;
        org.apache.poi.openxml4j.exceptions.InvalidOperationException $r9;
        java.lang.IllegalArgumentException $r3, $r22;
        org.apache.poi.openxml4j.exceptions.PartAlreadyExistsException $r13;
        org.apache.poi.openxml4j.opc.OPCPackage r0;
        org.apache.poi.openxml4j.opc.internal.ContentTypeManager $r6;
        java.lang.Object $r11;
        java.lang.StringBuilder $r14, $r15, $r17, $r18, $r19, $r20;

        r0 := @this: org.apache.poi.openxml4j.opc.OPCPackage;

        r1 := @parameter0: org.apache.poi.openxml4j.opc.PackagePartName;

        r2 := @parameter1: java.lang.String;

        z3 := @parameter2: boolean;

        virtualinvoke r0.<org.apache.poi.openxml4j.opc.OPCPackage: void throwExceptionIfReadOnly()>();

        if r1 != null goto label1;

        $r22 = new java.lang.IllegalArgumentException;

        specialinvoke $r22.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("partName");

        throw $r22;

     label1:
        if r2 == null goto label2;

        $z0 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z0 == 0 goto label3;

     label2:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("contentType");

        throw $r3;

     label3:
        $r4 = r0.<org.apache.poi.openxml4j.opc.OPCPackage: org.apache.poi.openxml4j.opc.PackagePartCollection partList>;

        $z1 = virtualinvoke $r4.<org.apache.poi.openxml4j.opc.PackagePartCollection: boolean containsKey(java.lang.Object)>(r1);

        if $z1 == 0 goto label4;

        $r10 = r0.<org.apache.poi.openxml4j.opc.OPCPackage: org.apache.poi.openxml4j.opc.PackagePartCollection partList>;

        $r11 = virtualinvoke $r10.<org.apache.poi.openxml4j.opc.PackagePartCollection: java.lang.Object get(java.lang.Object)>(r1);

        $r12 = (org.apache.poi.openxml4j.opc.PackagePart) $r11;

        $z4 = virtualinvoke $r12.<org.apache.poi.openxml4j.opc.PackagePart: boolean isDeleted()>();

        if $z4 != 0 goto label4;

        $r13 = new org.apache.poi.openxml4j.exceptions.PartAlreadyExistsException;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("A part with the name \'");

        $r16 = virtualinvoke r1.<org.apache.poi.openxml4j.opc.PackagePartName: java.lang.String getName()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" already exists : Packages shall not contain equivalent part names and package");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" implementers shall neither create nor recognize packages with equivalent part names. [M1.12]");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<org.apache.poi.openxml4j.exceptions.PartAlreadyExistsException: void <init>(java.lang.String)>($r21);

        throw $r13;

     label4:
        $z2 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("application/vnd.openxmlformats-package.core-properties+xml");

        if $z2 == 0 goto label5;

        $r8 = r0.<org.apache.poi.openxml4j.opc.OPCPackage: org.apache.poi.openxml4j.opc.internal.PackagePropertiesPart packageProperties>;

        if $r8 == null goto label5;

        $r9 = new org.apache.poi.openxml4j.exceptions.InvalidOperationException;

        specialinvoke $r9.<org.apache.poi.openxml4j.exceptions.InvalidOperationException: void <init>(java.lang.String)>("OPC Compliance error [M4.1]: you try to add more than one core properties relationship in the package !");

        throw $r9;

     label5:
        $r5 = virtualinvoke r0.<org.apache.poi.openxml4j.opc.OPCPackage: org.apache.poi.openxml4j.opc.PackagePart createPartImpl(org.apache.poi.openxml4j.opc.PackagePartName,java.lang.String,boolean)>(r1, r2, z3);

        $r6 = r0.<org.apache.poi.openxml4j.opc.OPCPackage: org.apache.poi.openxml4j.opc.internal.ContentTypeManager contentTypeManager>;

        virtualinvoke $r6.<org.apache.poi.openxml4j.opc.internal.ContentTypeManager: void addContentType(org.apache.poi.openxml4j.opc.PackagePartName,java.lang.String)>(r1, r2);

        $r7 = r0.<org.apache.poi.openxml4j.opc.OPCPackage: org.apache.poi.openxml4j.opc.PackagePartCollection partList>;

        virtualinvoke $r7.<org.apache.poi.openxml4j.opc.PackagePartCollection: org.apache.poi.openxml4j.opc.PackagePart put(org.apache.poi.openxml4j.opc.PackagePartName,org.apache.poi.openxml4j.opc.PackagePart)>(r1, $r5);

        r0.<org.apache.poi.openxml4j.opc.OPCPackage: boolean isDirty> = 1;

        return $r5;
    }

    public org.apache.poi.openxml4j.opc.PackagePart createPart(org.apache.poi.openxml4j.opc.PackagePartName, java.lang.String, java.io.ByteArrayOutputStream)
    {
        java.io.OutputStream $r5;
        byte[] $r6;
        java.io.ByteArrayOutputStream r4;
        org.apache.poi.openxml4j.opc.PackagePartName r1;
        java.io.IOException $r7;
        org.apache.poi.openxml4j.opc.OPCPackage r0;
        int $i0;
        org.apache.poi.openxml4j.opc.PackagePart $r3;
        java.lang.String r2;

        r0 := @this: org.apache.poi.openxml4j.opc.OPCPackage;

        r1 := @parameter0: org.apache.poi.openxml4j.opc.PackagePartName;

        r2 := @parameter1: java.lang.String;

        r4 := @parameter2: java.io.ByteArrayOutputStream;

        $r3 = virtualinvoke r0.<org.apache.poi.openxml4j.opc.OPCPackage: org.apache.poi.openxml4j.opc.PackagePart createPart(org.apache.poi.openxml4j.opc.PackagePartName,java.lang.String)>(r1, r2);

        if $r3 != null goto label1;

        return null;

     label1:
        if r4 == null goto label7;

     label2:
        $r5 = virtualinvoke $r3.<org.apache.poi.openxml4j.opc.PackagePart: java.io.OutputStream getOutputStream()>();

        if $r5 != null goto label4;

     label3:
        return null;

     label4:
        $r6 = virtualinvoke r4.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        $i0 = virtualinvoke r4.<java.io.ByteArrayOutputStream: int size()>();

        virtualinvoke $r5.<java.io.OutputStream: void write(byte[],int,int)>($r6, 0, $i0);

        virtualinvoke $r5.<java.io.OutputStream: void close()>();

     label5:
        goto label8;

     label6:
        $r7 := @caughtexception;

        return null;

     label7:
        return null;

     label8:
        return $r3;

        catch java.io.IOException from label2 to label3 with label6;
        catch java.io.IOException from label4 to label5 with label6;
    }

    protected org.apache.poi.openxml4j.opc.PackagePart addPackagePart(org.apache.poi.openxml4j.opc.PackagePart)
    {
        org.apache.poi.openxml4j.opc.PackagePartCollection $r3, $r5, $r7, $r11;
        org.apache.poi.openxml4j.opc.PackagePart r1, $r9;
        java.lang.String $r16, $r19;
        boolean $z0, $z1;
        org.apache.poi.openxml4j.opc.PackagePartName $r2, $r4, $r6, $r10, $r15;
        org.apache.poi.openxml4j.exceptions.InvalidOperationException $r12;
        java.lang.IllegalArgumentException $r20;
        org.apache.poi.openxml4j.opc.OPCPackage r0;
        java.lang.Object $r8;
        java.lang.StringBuilder $r13, $r14, $r17, $r18;

        r0 := @this: org.apache.poi.openxml4j.opc.OPCPackage;

        r1 := @parameter0: org.apache.poi.openxml4j.opc.PackagePart;

        virtualinvoke r0.<org.apache.poi.openxml4j.opc.OPCPackage: void throwExceptionIfReadOnly()>();

        if r1 != null goto label1;

        $r20 = new java.lang.IllegalArgumentException;

        specialinvoke $r20.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("part");

        throw $r20;

     label1:
        $r3 = r0.<org.apache.poi.openxml4j.opc.OPCPackage: org.apache.poi.openxml4j.opc.PackagePartCollection partList>;

        $r2 = r1.<org.apache.poi.openxml4j.opc.PackagePart: org.apache.poi.openxml4j.opc.PackagePartName _partName>;

        $z0 = virtualinvoke $r3.<org.apache.poi.openxml4j.opc.PackagePartCollection: boolean containsKey(java.lang.Object)>($r2);

        if $z0 == 0 goto label3;

        $r7 = r0.<org.apache.poi.openxml4j.opc.OPCPackage: org.apache.poi.openxml4j.opc.PackagePartCollection partList>;

        $r6 = r1.<org.apache.poi.openxml4j.opc.PackagePart: org.apache.poi.openxml4j.opc.PackagePartName _partName>;

        $r8 = virtualinvoke $r7.<org.apache.poi.openxml4j.opc.PackagePartCollection: java.lang.Object get(java.lang.Object)>($r6);

        $r9 = (org.apache.poi.openxml4j.opc.PackagePart) $r8;

        $z1 = virtualinvoke $r9.<org.apache.poi.openxml4j.opc.PackagePart: boolean isDeleted()>();

        if $z1 != 0 goto label2;

        $r12 = new org.apache.poi.openxml4j.exceptions.InvalidOperationException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("A part with the name \'");

        $r15 = r1.<org.apache.poi.openxml4j.opc.PackagePart: org.apache.poi.openxml4j.opc.PackagePartName _partName>;

        $r16 = virtualinvoke $r15.<org.apache.poi.openxml4j.opc.PackagePartName: java.lang.String getName()>();

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' already exists : Packages shall not contain equivalent part names and package implementers shall neither create nor recognize packages with equivalent part names. [M1.12]");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<org.apache.poi.openxml4j.exceptions.InvalidOperationException: void <init>(java.lang.String)>($r19);

        throw $r12;

     label2:
        virtualinvoke r1.<org.apache.poi.openxml4j.opc.PackagePart: void setDeleted(boolean)>(0);

        $r11 = r0.<org.apache.poi.openxml4j.opc.OPCPackage: org.apache.poi.openxml4j.opc.PackagePartCollection partList>;

        $r10 = r1.<org.apache.poi.openxml4j.opc.PackagePart: org.apache.poi.openxml4j.opc.PackagePartName _partName>;

        virtualinvoke $r11.<org.apache.poi.openxml4j.opc.PackagePartCollection: org.apache.poi.openxml4j.opc.PackagePart remove(java.lang.Object)>($r10);

     label3:
        $r5 = r0.<org.apache.poi.openxml4j.opc.OPCPackage: org.apache.poi.openxml4j.opc.PackagePartCollection partList>;

        $r4 = r1.<org.apache.poi.openxml4j.opc.PackagePart: org.apache.poi.openxml4j.opc.PackagePartName _partName>;

        virtualinvoke $r5.<org.apache.poi.openxml4j.opc.PackagePartCollection: org.apache.poi.openxml4j.opc.PackagePart put(org.apache.poi.openxml4j.opc.PackagePartName,org.apache.poi.openxml4j.opc.PackagePart)>($r4, r1);

        r0.<org.apache.poi.openxml4j.opc.OPCPackage: boolean isDirty> = 1;

        return r1;
    }

    public void removePart(org.apache.poi.openxml4j.opc.PackagePart)
    {
        org.apache.poi.openxml4j.opc.PackagePart r0;
        org.apache.poi.openxml4j.opc.OPCPackage r1;
        org.apache.poi.openxml4j.opc.PackagePartName $r2;

        r1 := @this: org.apache.poi.openxml4j.opc.OPCPackage;

        r0 := @parameter0: org.apache.poi.openxml4j.opc.PackagePart;

        if r0 == null goto label1;

        $r2 = virtualinvoke r0.<org.apache.poi.openxml4j.opc.PackagePart: org.apache.poi.openxml4j.opc.PackagePartName getPartName()>();

        virtualinvoke r1.<org.apache.poi.openxml4j.opc.OPCPackage: void removePart(org.apache.poi.openxml4j.opc.PackagePartName)>($r2);

     label1:
        return;
    }

    public void removePart(org.apache.poi.openxml4j.opc.PackagePartName)
    {
        org.apache.poi.openxml4j.opc.PackagePartCollection $r3, $r11, $r14;
        org.apache.poi.openxml4j.opc.PackagePart $r10, $r13;
        java.net.URI $r5, $r6, $r8, $r9;
        java.lang.String $r21;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.apache.poi.openxml4j.exceptions.InvalidFormatException $r15;
        org.apache.poi.openxml4j.opc.PackagePartName r1, $r7;
        org.apache.poi.util.POILogger $r17;
        java.lang.IllegalArgumentException $r2;
        org.apache.poi.openxml4j.opc.OPCPackage r0;
        org.apache.poi.openxml4j.opc.internal.ContentTypeManager $r4;
        java.lang.Object $r12;
        java.lang.StringBuilder $r16, $r18, $r19, $r20;

        r0 := @this: org.apache.poi.openxml4j.opc.OPCPackage;

        r1 := @parameter0: org.apache.poi.openxml4j.opc.PackagePartName;

        virtualinvoke r0.<org.apache.poi.openxml4j.opc.OPCPackage: void throwExceptionIfReadOnly()>();

        if r1 == null goto label01;

        $z0 = virtualinvoke r0.<org.apache.poi.openxml4j.opc.OPCPackage: boolean containPart(org.apache.poi.openxml4j.opc.PackagePartName)>(r1);

        if $z0 != 0 goto label02;

     label01:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("partName");

        throw $r2;

     label02:
        $r3 = r0.<org.apache.poi.openxml4j.opc.OPCPackage: org.apache.poi.openxml4j.opc.PackagePartCollection partList>;

        $z1 = virtualinvoke $r3.<org.apache.poi.openxml4j.opc.PackagePartCollection: boolean containsKey(java.lang.Object)>(r1);

        if $z1 == 0 goto label03;

        $r11 = r0.<org.apache.poi.openxml4j.opc.OPCPackage: org.apache.poi.openxml4j.opc.PackagePartCollection partList>;

        $r12 = virtualinvoke $r11.<org.apache.poi.openxml4j.opc.PackagePartCollection: java.lang.Object get(java.lang.Object)>(r1);

        $r13 = (org.apache.poi.openxml4j.opc.PackagePart) $r12;

        virtualinvoke $r13.<org.apache.poi.openxml4j.opc.PackagePart: void setDeleted(boolean)>(1);

        virtualinvoke r0.<org.apache.poi.openxml4j.opc.OPCPackage: void removePartImpl(org.apache.poi.openxml4j.opc.PackagePartName)>(r1);

        $r14 = r0.<org.apache.poi.openxml4j.opc.OPCPackage: org.apache.poi.openxml4j.opc.PackagePartCollection partList>;

        virtualinvoke $r14.<org.apache.poi.openxml4j.opc.PackagePartCollection: org.apache.poi.openxml4j.opc.PackagePart remove(java.lang.Object)>(r1);

        goto label04;

     label03:
        virtualinvoke r0.<org.apache.poi.openxml4j.opc.OPCPackage: void removePartImpl(org.apache.poi.openxml4j.opc.PackagePartName)>(r1);

     label04:
        $r4 = r0.<org.apache.poi.openxml4j.opc.OPCPackage: org.apache.poi.openxml4j.opc.internal.ContentTypeManager contentTypeManager>;

        virtualinvoke $r4.<org.apache.poi.openxml4j.opc.internal.ContentTypeManager: void removeContentType(org.apache.poi.openxml4j.opc.PackagePartName)>(r1);

        $z2 = virtualinvoke r1.<org.apache.poi.openxml4j.opc.PackagePartName: boolean isRelationshipPartURI()>();

        if $z2 == 0 goto label10;

        $r5 = virtualinvoke r1.<org.apache.poi.openxml4j.opc.PackagePartName: java.net.URI getURI()>();

        $r6 = staticinvoke <org.apache.poi.openxml4j.opc.PackagingURIHelper: java.net.URI getSourcePartUriFromRelationshipPartUri(java.net.URI)>($r5);

     label05:
        $r7 = staticinvoke <org.apache.poi.openxml4j.opc.PackagingURIHelper: org.apache.poi.openxml4j.opc.PackagePartName createPartName(java.net.URI)>($r6);

     label06:
        goto label08;

     label07:
        $r15 := @caughtexception;

        $r17 = <org.apache.poi.openxml4j.opc.OPCPackage: org.apache.poi.util.POILogger logger>;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Part name URI \'");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is not valid ! This message is not intended to be displayed !");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r17.<org.apache.poi.util.POILogger: void log(int,java.lang.Object)>(7, $r21);

        return;

     label08:
        $r8 = virtualinvoke $r7.<org.apache.poi.openxml4j.opc.PackagePartName: java.net.URI getURI()>();

        $r9 = <org.apache.poi.openxml4j.opc.PackagingURIHelper: java.net.URI PACKAGE_ROOT_URI>;

        $z3 = virtualinvoke $r8.<java.net.URI: boolean equals(java.lang.Object)>($r9);

        if $z3 == 0 goto label09;

        virtualinvoke r0.<org.apache.poi.openxml4j.opc.OPCPackage: void clearRelationships()>();

        goto label10;

     label09:
        $z4 = virtualinvoke r0.<org.apache.poi.openxml4j.opc.OPCPackage: boolean containPart(org.apache.poi.openxml4j.opc.PackagePartName)>($r7);

        if $z4 == 0 goto label10;

        $r10 = virtualinvoke r0.<org.apache.poi.openxml4j.opc.OPCPackage: org.apache.poi.openxml4j.opc.PackagePart getPart(org.apache.poi.openxml4j.opc.PackagePartName)>($r7);

        if $r10 == null goto label10;

        virtualinvoke $r10.<org.apache.poi.openxml4j.opc.PackagePart: void clearRelationships()>();

     label10:
        r0.<org.apache.poi.openxml4j.opc.OPCPackage: boolean isDirty> = 1;

        return;

        catch org.apache.poi.openxml4j.exceptions.InvalidFormatException from label05 to label06 with label07;
    }

    public void removePartRecursive(org.apache.poi.openxml4j.opc.PackagePartName) throws org.apache.poi.openxml4j.exceptions.InvalidFormatException
    {
        org.apache.poi.openxml4j.opc.PackagePartCollection $r2, $r6;
        org.apache.poi.openxml4j.opc.PackageRelationship r14;
        org.apache.poi.openxml4j.opc.PackageRelationshipCollection $r10;
        org.apache.poi.openxml4j.opc.PackagePart r5, r8;
        java.net.URI $r15, $r16, $r17;
        boolean $z0;
        java.util.Iterator $r11;
        org.apache.poi.openxml4j.opc.PackagePartName r1, $r3, $r9, $r12, $r18;
        org.apache.poi.openxml4j.opc.OPCPackage r0;
        java.lang.Object $r4, $r7, $r13;

        r0 := @this: org.apache.poi.openxml4j.opc.OPCPackage;

        r1 := @parameter0: org.apache.poi.openxml4j.opc.PackagePartName;

        $r2 = r0.<org.apache.poi.openxml4j.opc.OPCPackage: org.apache.poi.openxml4j.opc.PackagePartCollection partList>;

        $r3 = staticinvoke <org.apache.poi.openxml4j.opc.PackagingURIHelper: org.apache.poi.openxml4j.opc.PackagePartName getRelationshipPartName(org.apache.poi.openxml4j.opc.PackagePartName)>(r1);

        $r4 = virtualinvoke $r2.<org.apache.poi.openxml4j.opc.PackagePartCollection: java.lang.Object get(java.lang.Object)>($r3);

        r5 = (org.apache.poi.openxml4j.opc.PackagePart) $r4;

        $r6 = r0.<org.apache.poi.openxml4j.opc.OPCPackage: org.apache.poi.openxml4j.opc.PackagePartCollection partList>;

        $r7 = virtualinvoke $r6.<org.apache.poi.openxml4j.opc.PackagePartCollection: java.lang.Object get(java.lang.Object)>(r1);

        r8 = (org.apache.poi.openxml4j.opc.PackagePart) $r7;

        if r5 == null goto label3;

        $r10 = new org.apache.poi.openxml4j.opc.PackageRelationshipCollection;

        specialinvoke $r10.<org.apache.poi.openxml4j.opc.PackageRelationshipCollection: void <init>(org.apache.poi.openxml4j.opc.PackagePart)>(r8);

        $r11 = virtualinvoke $r10.<org.apache.poi.openxml4j.opc.PackageRelationshipCollection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r11.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r13 = interfaceinvoke $r11.<java.util.Iterator: java.lang.Object next()>();

        r14 = (org.apache.poi.openxml4j.opc.PackageRelationship) $r13;

        $r15 = virtualinvoke r14.<org.apache.poi.openxml4j.opc.PackageRelationship: java.net.URI getSourceURI()>();

        $r16 = virtualinvoke r14.<org.apache.poi.openxml4j.opc.PackageRelationship: java.net.URI getTargetURI()>();

        $r17 = staticinvoke <org.apache.poi.openxml4j.opc.PackagingURIHelper: java.net.URI resolvePartUri(java.net.URI,java.net.URI)>($r15, $r16);

        $r18 = staticinvoke <org.apache.poi.openxml4j.opc.PackagingURIHelper: org.apache.poi.openxml4j.opc.PackagePartName createPartName(java.net.URI)>($r17);

        virtualinvoke r0.<org.apache.poi.openxml4j.opc.OPCPackage: void removePart(org.apache.poi.openxml4j.opc.PackagePartName)>($r18);

        goto label1;

     label2:
        $r12 = r5.<org.apache.poi.openxml4j.opc.PackagePart: org.apache.poi.openxml4j.opc.PackagePartName _partName>;

        virtualinvoke r0.<org.apache.poi.openxml4j.opc.OPCPackage: void removePart(org.apache.poi.openxml4j.opc.PackagePartName)>($r12);

     label3:
        $r9 = r8.<org.apache.poi.openxml4j.opc.PackagePart: org.apache.poi.openxml4j.opc.PackagePartName _partName>;

        virtualinvoke r0.<org.apache.poi.openxml4j.opc.OPCPackage: void removePart(org.apache.poi.openxml4j.opc.PackagePartName)>($r9);

        return;
    }

    public void deletePart(org.apache.poi.openxml4j.opc.PackagePartName)
    {
        org.apache.poi.openxml4j.opc.PackagePartName r0, $r2;
        org.apache.poi.openxml4j.opc.OPCPackage r1;
        java.lang.IllegalArgumentException $r3;

        r1 := @this: org.apache.poi.openxml4j.opc.OPCPackage;

        r0 := @parameter0: org.apache.poi.openxml4j.opc.PackagePartName;

        if r0 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("partName");

        throw $r3;

     label1:
        virtualinvoke r1.<org.apache.poi.openxml4j.opc.OPCPackage: void removePart(org.apache.poi.openxml4j.opc.PackagePartName)>(r0);

        $r2 = staticinvoke <org.apache.poi.openxml4j.opc.PackagingURIHelper: org.apache.poi.openxml4j.opc.PackagePartName getRelationshipPartName(org.apache.poi.openxml4j.opc.PackagePartName)>(r0);

        virtualinvoke r1.<org.apache.poi.openxml4j.opc.OPCPackage: void removePart(org.apache.poi.openxml4j.opc.PackagePartName)>($r2);

        return;
    }

    public void deletePartRecursive(org.apache.poi.openxml4j.opc.PackagePartName)
    {
        org.apache.poi.openxml4j.opc.PackageRelationship r8;
        org.apache.poi.openxml4j.opc.PackageRelationshipCollection $r4;
        org.apache.poi.openxml4j.opc.PackagePart $r3;
        java.net.URI $r9, $r10, $r11;
        java.lang.String $r17, $r20, $r22;
        boolean $z0, $z1, $z2;
        java.util.Iterator $r5;
        org.apache.poi.openxml4j.exceptions.InvalidFormatException $r13;
        org.apache.poi.openxml4j.opc.PackagePartName r0, $r6, $r12;
        org.apache.poi.util.POILogger $r15;
        java.lang.IllegalArgumentException $r1;
        org.apache.poi.openxml4j.opc.OPCPackage r2;
        java.lang.Object $r7;
        java.lang.StringBuilder $r14, $r16, $r18, $r19, $r21;

        r2 := @this: org.apache.poi.openxml4j.opc.OPCPackage;

        r0 := @parameter0: org.apache.poi.openxml4j.opc.PackagePartName;

        if r0 == null goto label1;

        $z0 = virtualinvoke r2.<org.apache.poi.openxml4j.opc.OPCPackage: boolean containPart(org.apache.poi.openxml4j.opc.PackagePartName)>(r0);

        if $z0 != 0 goto label2;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("partName");

        throw $r1;

     label2:
        $r3 = virtualinvoke r2.<org.apache.poi.openxml4j.opc.OPCPackage: org.apache.poi.openxml4j.opc.PackagePart getPart(org.apache.poi.openxml4j.opc.PackagePartName)>(r0);

        virtualinvoke r2.<org.apache.poi.openxml4j.opc.OPCPackage: void removePart(org.apache.poi.openxml4j.opc.PackagePartName)>(r0);

     label3:
        $r4 = virtualinvoke $r3.<org.apache.poi.openxml4j.opc.PackagePart: org.apache.poi.openxml4j.opc.PackageRelationshipCollection getRelationships()>();

        $r5 = virtualinvoke $r4.<org.apache.poi.openxml4j.opc.PackageRelationshipCollection: java.util.Iterator iterator()>();

     label4:
        $z1 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label5;

        $r7 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r8 = (org.apache.poi.openxml4j.opc.PackageRelationship) $r7;

        $r9 = virtualinvoke r0.<org.apache.poi.openxml4j.opc.PackagePartName: java.net.URI getURI()>();

        $r10 = virtualinvoke r8.<org.apache.poi.openxml4j.opc.PackageRelationship: java.net.URI getTargetURI()>();

        $r11 = staticinvoke <org.apache.poi.openxml4j.opc.PackagingURIHelper: java.net.URI resolvePartUri(java.net.URI,java.net.URI)>($r9, $r10);

        $r12 = staticinvoke <org.apache.poi.openxml4j.opc.PackagingURIHelper: org.apache.poi.openxml4j.opc.PackagePartName createPartName(java.net.URI)>($r11);

        virtualinvoke r2.<org.apache.poi.openxml4j.opc.OPCPackage: void deletePartRecursive(org.apache.poi.openxml4j.opc.PackagePartName)>($r12);

        goto label4;

     label5:
        goto label7;

     label6:
        $r13 := @caughtexception;

        $r15 = <org.apache.poi.openxml4j.opc.OPCPackage: org.apache.poi.util.POILogger logger>;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("An exception occurs while deleting part \'");

        $r17 = virtualinvoke r0.<org.apache.poi.openxml4j.opc.PackagePartName: java.lang.String getName()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'. Some parts may remain in the package. - ");

        $r20 = virtualinvoke $r13.<org.apache.poi.openxml4j.exceptions.InvalidFormatException: java.lang.String getMessage()>();

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r15.<org.apache.poi.util.POILogger: void log(int,java.lang.Object)>(5, $r22);

        return;

     label7:
        $r6 = staticinvoke <org.apache.poi.openxml4j.opc.PackagingURIHelper: org.apache.poi.openxml4j.opc.PackagePartName getRelationshipPartName(org.apache.poi.openxml4j.opc.PackagePartName)>(r0);

        if $r6 == null goto label8;

        $z2 = virtualinvoke r2.<org.apache.poi.openxml4j.opc.OPCPackage: boolean containPart(org.apache.poi.openxml4j.opc.PackagePartName)>($r6);

        if $z2 == 0 goto label8;

        virtualinvoke r2.<org.apache.poi.openxml4j.opc.OPCPackage: void removePart(org.apache.poi.openxml4j.opc.PackagePartName)>($r6);

     label8:
        return;

        catch org.apache.poi.openxml4j.exceptions.InvalidFormatException from label3 to label5 with label6;
    }

    public boolean containPart(org.apache.poi.openxml4j.opc.PackagePartName)
    {
        org.apache.poi.openxml4j.opc.OPCPackage r0;
        org.apache.poi.openxml4j.opc.PackagePartName r1;
        org.apache.poi.openxml4j.opc.PackagePart $r2;
        boolean $z0;

        r0 := @this: org.apache.poi.openxml4j.opc.OPCPackage;

        r1 := @parameter0: org.apache.poi.openxml4j.opc.PackagePartName;

        $r2 = virtualinvoke r0.<org.apache.poi.openxml4j.opc.OPCPackage: org.apache.poi.openxml4j.opc.PackagePart getPart(org.apache.poi.openxml4j.opc.PackagePartName)>(r1);

        if $r2 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public org.apache.poi.openxml4j.opc.PackageRelationship addRelationship(org.apache.poi.openxml4j.opc.PackagePartName, org.apache.poi.openxml4j.opc.TargetMode, java.lang.String, java.lang.String)
    {
        org.apache.poi.openxml4j.opc.PackagePartName r1;
        org.apache.poi.openxml4j.exceptions.InvalidOperationException $r8, $r10;
        org.apache.poi.openxml4j.opc.PackageRelationship $r7;
        org.apache.poi.openxml4j.opc.TargetMode r5;
        org.apache.poi.openxml4j.opc.OPCPackage r2;
        org.apache.poi.openxml4j.opc.PackageRelationshipCollection $r3;
        org.apache.poi.openxml4j.opc.internal.PackagePropertiesPart $r9;
        java.lang.String r0, r6;
        java.net.URI $r4;
        boolean $z0, $z1;

        r2 := @this: org.apache.poi.openxml4j.opc.OPCPackage;

        r1 := @parameter0: org.apache.poi.openxml4j.opc.PackagePartName;

        r5 := @parameter1: org.apache.poi.openxml4j.opc.TargetMode;

        r0 := @parameter2: java.lang.String;

        r6 := @parameter3: java.lang.String;

        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("http://schemas.openxmlformats.org/package/2006/relationships/metadata/core-properties");

        if $z0 == 0 goto label1;

        $r9 = r2.<org.apache.poi.openxml4j.opc.OPCPackage: org.apache.poi.openxml4j.opc.internal.PackagePropertiesPart packageProperties>;

        if $r9 == null goto label1;

        $r10 = new org.apache.poi.openxml4j.exceptions.InvalidOperationException;

        specialinvoke $r10.<org.apache.poi.openxml4j.exceptions.InvalidOperationException: void <init>(java.lang.String)>("OPC Compliance error [M4.1]: can\'t add another core properties part ! Use the built-in package method instead.");

        throw $r10;

     label1:
        $z1 = virtualinvoke r1.<org.apache.poi.openxml4j.opc.PackagePartName: boolean isRelationshipPartURI()>();

        if $z1 == 0 goto label2;

        $r8 = new org.apache.poi.openxml4j.exceptions.InvalidOperationException;

        specialinvoke $r8.<org.apache.poi.openxml4j.exceptions.InvalidOperationException: void <init>(java.lang.String)>("Rule M1.25: The Relationships part shall not have relationships to any other part.");

        throw $r8;

     label2:
        virtualinvoke r2.<org.apache.poi.openxml4j.opc.OPCPackage: void ensureRelationships()>();

        $r3 = r2.<org.apache.poi.openxml4j.opc.OPCPackage: org.apache.poi.openxml4j.opc.PackageRelationshipCollection relationships>;

        $r4 = virtualinvoke r1.<org.apache.poi.openxml4j.opc.PackagePartName: java.net.URI getURI()>();

        $r7 = virtualinvoke $r3.<org.apache.poi.openxml4j.opc.PackageRelationshipCollection: org.apache.poi.openxml4j.opc.PackageRelationship addRelationship(java.net.URI,org.apache.poi.openxml4j.opc.TargetMode,java.lang.String,java.lang.String)>($r4, r5, r0, r6);

        r2.<org.apache.poi.openxml4j.opc.OPCPackage: boolean isDirty> = 1;

        return $r7;
    }

    public org.apache.poi.openxml4j.opc.PackageRelationship addRelationship(org.apache.poi.openxml4j.opc.PackagePartName, org.apache.poi.openxml4j.opc.TargetMode, java.lang.String)
    {
        org.apache.poi.openxml4j.opc.TargetMode r2;
        org.apache.poi.openxml4j.opc.OPCPackage r0;
        org.apache.poi.openxml4j.opc.PackagePartName r1;
        java.lang.String r3;
        org.apache.poi.openxml4j.opc.PackageRelationship $r4;

        r0 := @this: org.apache.poi.openxml4j.opc.OPCPackage;

        r1 := @parameter0: org.apache.poi.openxml4j.opc.PackagePartName;

        r2 := @parameter1: org.apache.poi.openxml4j.opc.TargetMode;

        r3 := @parameter2: java.lang.String;

        $r4 = virtualinvoke r0.<org.apache.poi.openxml4j.opc.OPCPackage: org.apache.poi.openxml4j.opc.PackageRelationship addRelationship(org.apache.poi.openxml4j.opc.PackagePartName,org.apache.poi.openxml4j.opc.TargetMode,java.lang.String,java.lang.String)>(r1, r2, r3, null);

        return $r4;
    }

    public org.apache.poi.openxml4j.opc.PackageRelationship addExternalRelationship(java.lang.String, java.lang.String)
    {
        org.apache.poi.openxml4j.opc.OPCPackage r0;
        java.lang.String r1, r2;
        org.apache.poi.openxml4j.opc.PackageRelationship $r3;

        r0 := @this: org.apache.poi.openxml4j.opc.OPCPackage;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = virtualinvoke r0.<org.apache.poi.openxml4j.opc.OPCPackage: org.apache.poi.openxml4j.opc.PackageRelationship addExternalRelationship(java.lang.String,java.lang.String,java.lang.String)>(r1, r2, null);

        return $r3;
    }

    public org.apache.poi.openxml4j.opc.PackageRelationship addExternalRelationship(java.lang.String, java.lang.String, java.lang.String)
    {
        java.net.URISyntaxException $r10;
        org.apache.poi.openxml4j.opc.PackageRelationship $r7;
        org.apache.poi.openxml4j.opc.PackageRelationshipCollection $r6;
        java.lang.String r0, r1, r4, $r15;
        java.net.URI $r2;
        java.lang.IllegalArgumentException $r8, $r9, $r11;
        org.apache.poi.openxml4j.opc.TargetMode $r5;
        org.apache.poi.openxml4j.opc.OPCPackage r3;
        java.lang.StringBuilder $r12, $r13, $r14;

        r3 := @this: org.apache.poi.openxml4j.opc.OPCPackage;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        r4 := @parameter2: java.lang.String;

        if r0 != null goto label1;

        $r9 = new java.lang.IllegalArgumentException;

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("target");

        throw $r9;

     label1:
        if r1 != null goto label2;

        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("relationshipType");

        throw $r8;

     label2:
        $r2 = new java.net.URI;

        specialinvoke $r2.<java.net.URI: void <init>(java.lang.String)>(r0);

     label3:
        goto label5;

     label4:
        $r10 := @caughtexception;

        $r11 = new java.lang.IllegalArgumentException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid target - ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r15);

        throw $r11;

     label5:
        virtualinvoke r3.<org.apache.poi.openxml4j.opc.OPCPackage: void ensureRelationships()>();

        $r6 = r3.<org.apache.poi.openxml4j.opc.OPCPackage: org.apache.poi.openxml4j.opc.PackageRelationshipCollection relationships>;

        $r5 = <org.apache.poi.openxml4j.opc.TargetMode: org.apache.poi.openxml4j.opc.TargetMode EXTERNAL>;

        $r7 = virtualinvoke $r6.<org.apache.poi.openxml4j.opc.PackageRelationshipCollection: org.apache.poi.openxml4j.opc.PackageRelationship addRelationship(java.net.URI,org.apache.poi.openxml4j.opc.TargetMode,java.lang.String,java.lang.String)>($r2, $r5, r1, r4);

        r3.<org.apache.poi.openxml4j.opc.OPCPackage: boolean isDirty> = 1;

        return $r7;

        catch java.net.URISyntaxException from label2 to label3 with label4;
    }

    public void removeRelationship(java.lang.String)
    {
        org.apache.poi.openxml4j.opc.OPCPackage r0;
        org.apache.poi.openxml4j.opc.PackageRelationshipCollection $r1, $r3;
        java.lang.String r2;

        r0 := @this: org.apache.poi.openxml4j.opc.OPCPackage;

        r2 := @parameter0: java.lang.String;

        $r1 = r0.<org.apache.poi.openxml4j.opc.OPCPackage: org.apache.poi.openxml4j.opc.PackageRelationshipCollection relationships>;

        if $r1 == null goto label1;

        $r3 = r0.<org.apache.poi.openxml4j.opc.OPCPackage: org.apache.poi.openxml4j.opc.PackageRelationshipCollection relationships>;

        virtualinvoke $r3.<org.apache.poi.openxml4j.opc.PackageRelationshipCollection: void removeRelationship(java.lang.String)>(r2);

        r0.<org.apache.poi.openxml4j.opc.OPCPackage: boolean isDirty> = 1;

     label1:
        return;
    }

    public org.apache.poi.openxml4j.opc.PackageRelationshipCollection getRelationships()
    {
        org.apache.poi.openxml4j.opc.OPCPackage r0;
        org.apache.poi.openxml4j.opc.PackageRelationshipCollection $r1;

        r0 := @this: org.apache.poi.openxml4j.opc.OPCPackage;

        $r1 = specialinvoke r0.<org.apache.poi.openxml4j.opc.OPCPackage: org.apache.poi.openxml4j.opc.PackageRelationshipCollection getRelationshipsHelper(java.lang.String)>(null);

        return $r1;
    }

    public org.apache.poi.openxml4j.opc.PackageRelationshipCollection getRelationshipsByType(java.lang.String)
    {
        org.apache.poi.openxml4j.opc.OPCPackage r0;
        org.apache.poi.openxml4j.opc.PackageRelationshipCollection $r2;
        java.lang.String r1;
        java.lang.IllegalArgumentException $r3;

        r0 := @this: org.apache.poi.openxml4j.opc.OPCPackage;

        r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<org.apache.poi.openxml4j.opc.OPCPackage: void throwExceptionIfWriteOnly()>();

        if r1 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("relationshipType");

        throw $r3;

     label1:
        $r2 = specialinvoke r0.<org.apache.poi.openxml4j.opc.OPCPackage: org.apache.poi.openxml4j.opc.PackageRelationshipCollection getRelationshipsHelper(java.lang.String)>(r1);

        return $r2;
    }

    private org.apache.poi.openxml4j.opc.PackageRelationshipCollection getRelationshipsHelper(java.lang.String)
    {
        org.apache.poi.openxml4j.opc.OPCPackage r0;
        org.apache.poi.openxml4j.opc.PackageRelationshipCollection $r2, $r3;
        java.lang.String r1;

        r0 := @this: org.apache.poi.openxml4j.opc.OPCPackage;

        r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<org.apache.poi.openxml4j.opc.OPCPackage: void throwExceptionIfWriteOnly()>();

        virtualinvoke r0.<org.apache.poi.openxml4j.opc.OPCPackage: void ensureRelationships()>();

        $r2 = r0.<org.apache.poi.openxml4j.opc.OPCPackage: org.apache.poi.openxml4j.opc.PackageRelationshipCollection relationships>;

        $r3 = virtualinvoke $r2.<org.apache.poi.openxml4j.opc.PackageRelationshipCollection: org.apache.poi.openxml4j.opc.PackageRelationshipCollection getRelationships(java.lang.String)>(r1);

        return $r3;
    }

    public void clearRelationships()
    {
        org.apache.poi.openxml4j.opc.OPCPackage r0;
        org.apache.poi.openxml4j.opc.PackageRelationshipCollection $r1, $r2;

        r0 := @this: org.apache.poi.openxml4j.opc.OPCPackage;

        $r1 = r0.<org.apache.poi.openxml4j.opc.OPCPackage: org.apache.poi.openxml4j.opc.PackageRelationshipCollection relationships>;

        if $r1 == null goto label1;

        $r2 = r0.<org.apache.poi.openxml4j.opc.OPCPackage: org.apache.poi.openxml4j.opc.PackageRelationshipCollection relationships>;

        virtualinvoke $r2.<org.apache.poi.openxml4j.opc.PackageRelationshipCollection: void clear()>();

        r0.<org.apache.poi.openxml4j.opc.OPCPackage: boolean isDirty> = 1;

     label1:
        return;
    }

    public void ensureRelationships()
    {
        org.apache.poi.openxml4j.exceptions.InvalidFormatException $r3;
        org.apache.poi.openxml4j.opc.OPCPackage r0;
        org.apache.poi.openxml4j.opc.PackageRelationshipCollection $r1, $r2, $r4;

        r0 := @this: org.apache.poi.openxml4j.opc.OPCPackage;

        $r1 = r0.<org.apache.poi.openxml4j.opc.OPCPackage: org.apache.poi.openxml4j.opc.PackageRelationshipCollection relationships>;

        if $r1 != null goto label4;

     label1:
        $r2 = new org.apache.poi.openxml4j.opc.PackageRelationshipCollection;

        specialinvoke $r2.<org.apache.poi.openxml4j.opc.PackageRelationshipCollection: void <init>(org.apache.poi.openxml4j.opc.OPCPackage)>(r0);

        r0.<org.apache.poi.openxml4j.opc.OPCPackage: org.apache.poi.openxml4j.opc.PackageRelationshipCollection relationships> = $r2;

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        $r4 = new org.apache.poi.openxml4j.opc.PackageRelationshipCollection;

        specialinvoke $r4.<org.apache.poi.openxml4j.opc.PackageRelationshipCollection: void <init>()>();

        r0.<org.apache.poi.openxml4j.opc.OPCPackage: org.apache.poi.openxml4j.opc.PackageRelationshipCollection relationships> = $r4;

     label4:
        return;

        catch org.apache.poi.openxml4j.exceptions.InvalidFormatException from label1 to label2 with label3;
    }

    public org.apache.poi.openxml4j.opc.PackageRelationship getRelationship(java.lang.String)
    {
        org.apache.poi.openxml4j.opc.OPCPackage r0;
        org.apache.poi.openxml4j.opc.PackageRelationshipCollection $r2;
        java.lang.String r1;
        org.apache.poi.openxml4j.opc.PackageRelationship $r3;

        r0 := @this: org.apache.poi.openxml4j.opc.OPCPackage;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.apache.poi.openxml4j.opc.OPCPackage: org.apache.poi.openxml4j.opc.PackageRelationshipCollection relationships>;

        $r3 = virtualinvoke $r2.<org.apache.poi.openxml4j.opc.PackageRelationshipCollection: org.apache.poi.openxml4j.opc.PackageRelationship getRelationshipByID(java.lang.String)>(r1);

        return $r3;
    }

    public boolean hasRelationships()
    {
        org.apache.poi.openxml4j.opc.OPCPackage r0;
        org.apache.poi.openxml4j.opc.PackageRelationshipCollection $r1;
        int $i0;
        boolean $z0;

        r0 := @this: org.apache.poi.openxml4j.opc.OPCPackage;

        $r1 = r0.<org.apache.poi.openxml4j.opc.OPCPackage: org.apache.poi.openxml4j.opc.PackageRelationshipCollection relationships>;

        $i0 = virtualinvoke $r1.<org.apache.poi.openxml4j.opc.PackageRelationshipCollection: int size()>();

        if $i0 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isRelationshipExists(org.apache.poi.openxml4j.opc.PackageRelationship)
    {
        java.util.Iterator $r2;
        org.apache.poi.openxml4j.opc.OPCPackage r0;
        org.apache.poi.openxml4j.opc.PackageRelationshipCollection $r1;
        java.lang.Object $r3;
        org.apache.poi.openxml4j.opc.PackageRelationship r4, r5;
        boolean $z0;

        r0 := @this: org.apache.poi.openxml4j.opc.OPCPackage;

        r5 := @parameter0: org.apache.poi.openxml4j.opc.PackageRelationship;

        $r1 = virtualinvoke r0.<org.apache.poi.openxml4j.opc.OPCPackage: org.apache.poi.openxml4j.opc.PackageRelationshipCollection getRelationships()>();

        $r2 = virtualinvoke $r1.<org.apache.poi.openxml4j.opc.PackageRelationshipCollection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.apache.poi.openxml4j.opc.PackageRelationship) $r3;

        if r4 != r5 goto label2;

        return 1;

     label2:
        goto label1;

     label3:
        return 0;
    }

    public void addMarshaller(java.lang.String, org.apache.poi.openxml4j.opc.internal.PartMarshaller)
    {
        org.apache.poi.openxml4j.exceptions.InvalidFormatException $r5;
        org.apache.poi.openxml4j.opc.internal.ContentType $r1;
        org.apache.poi.util.POILogger $r7;
        org.apache.poi.openxml4j.opc.internal.PartMarshaller r4;
        org.apache.poi.openxml4j.opc.OPCPackage r0;
        java.lang.StringBuilder $r6, $r8, $r10, $r11;
        java.lang.String r2, $r9, $r12;
        java.util.Hashtable $r3;

        r0 := @this: org.apache.poi.openxml4j.opc.OPCPackage;

        r2 := @parameter0: java.lang.String;

        r4 := @parameter1: org.apache.poi.openxml4j.opc.internal.PartMarshaller;

     label1:
        $r3 = r0.<org.apache.poi.openxml4j.opc.OPCPackage: java.util.Hashtable partMarshallers>;

        $r1 = new org.apache.poi.openxml4j.opc.internal.ContentType;

        specialinvoke $r1.<org.apache.poi.openxml4j.opc.internal.ContentType: void <init>(java.lang.String)>(r2);

        virtualinvoke $r3.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, r4);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        $r7 = <org.apache.poi.openxml4j.opc.OPCPackage: org.apache.poi.util.POILogger logger>;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The specified content type is not valid: \'");

        $r9 = virtualinvoke $r5.<org.apache.poi.openxml4j.exceptions.InvalidFormatException: java.lang.String getMessage()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'. The marshaller will not be added !");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r7.<org.apache.poi.util.POILogger: void log(int,java.lang.Object)>(5, $r12);

     label4:
        return;

        catch org.apache.poi.openxml4j.exceptions.InvalidFormatException from label1 to label2 with label3;
    }

    public void addUnmarshaller(java.lang.String, org.apache.poi.openxml4j.opc.internal.PartUnmarshaller)
    {
        org.apache.poi.openxml4j.exceptions.InvalidFormatException $r5;
        org.apache.poi.openxml4j.opc.internal.ContentType $r1;
        org.apache.poi.openxml4j.opc.internal.PartUnmarshaller r4;
        org.apache.poi.util.POILogger $r7;
        org.apache.poi.openxml4j.opc.OPCPackage r0;
        java.lang.StringBuilder $r6, $r8, $r10, $r11;
        java.lang.String r2, $r9, $r12;
        java.util.Hashtable $r3;

        r0 := @this: org.apache.poi.openxml4j.opc.OPCPackage;

        r2 := @parameter0: java.lang.String;

        r4 := @parameter1: org.apache.poi.openxml4j.opc.internal.PartUnmarshaller;

     label1:
        $r3 = r0.<org.apache.poi.openxml4j.opc.OPCPackage: java.util.Hashtable partUnmarshallers>;

        $r1 = new org.apache.poi.openxml4j.opc.internal.ContentType;

        specialinvoke $r1.<org.apache.poi.openxml4j.opc.internal.ContentType: void <init>(java.lang.String)>(r2);

        virtualinvoke $r3.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, r4);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        $r7 = <org.apache.poi.openxml4j.opc.OPCPackage: org.apache.poi.util.POILogger logger>;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The specified content type is not valid: \'");

        $r9 = virtualinvoke $r5.<org.apache.poi.openxml4j.exceptions.InvalidFormatException: java.lang.String getMessage()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'. The unmarshaller will not be added !");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r7.<org.apache.poi.util.POILogger: void log(int,java.lang.Object)>(5, $r12);

     label4:
        return;

        catch org.apache.poi.openxml4j.exceptions.InvalidFormatException from label1 to label2 with label3;
    }

    public void removeMarshaller(java.lang.String)
    {
        java.lang.String r1;
        org.apache.poi.openxml4j.opc.OPCPackage r0;
        java.util.Hashtable $r2;

        r0 := @this: org.apache.poi.openxml4j.opc.OPCPackage;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.apache.poi.openxml4j.opc.OPCPackage: java.util.Hashtable partMarshallers>;

        virtualinvoke $r2.<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>(r1);

        return;
    }

    public void removeUnmarshaller(java.lang.String)
    {
        java.lang.String r1;
        org.apache.poi.openxml4j.opc.OPCPackage r0;
        java.util.Hashtable $r2;

        r0 := @this: org.apache.poi.openxml4j.opc.OPCPackage;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.apache.poi.openxml4j.opc.OPCPackage: java.util.Hashtable partUnmarshallers>;

        virtualinvoke $r2.<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>(r1);

        return;
    }

    public org.apache.poi.openxml4j.opc.PackageAccess getPackageAccess()
    {
        org.apache.poi.openxml4j.opc.PackageAccess $r1;
        org.apache.poi.openxml4j.opc.OPCPackage r0;

        r0 := @this: org.apache.poi.openxml4j.opc.OPCPackage;

        $r1 = r0.<org.apache.poi.openxml4j.opc.OPCPackage: org.apache.poi.openxml4j.opc.PackageAccess packageAccess>;

        return $r1;
    }

    public boolean validatePackage(org.apache.poi.openxml4j.opc.OPCPackage) throws org.apache.poi.openxml4j.exceptions.InvalidFormatException
    {
        org.apache.poi.openxml4j.exceptions.InvalidOperationException $r0;
        org.apache.poi.openxml4j.opc.OPCPackage r1, r2;

        r1 := @this: org.apache.poi.openxml4j.opc.OPCPackage;

        r2 := @parameter0: org.apache.poi.openxml4j.opc.OPCPackage;

        $r0 = new org.apache.poi.openxml4j.exceptions.InvalidOperationException;

        specialinvoke $r0.<org.apache.poi.openxml4j.exceptions.InvalidOperationException: void <init>(java.lang.String)>("Not implemented yet !!!");

        throw $r0;
    }

    public void save(java.io.File) throws java.io.IOException
    {
        java.io.FileOutputStream $r2;
        java.io.IOException $r8;
        org.apache.poi.openxml4j.exceptions.InvalidOperationException $r5;
        java.lang.IllegalArgumentException $r6;
        java.io.File r0;
        java.io.FileNotFoundException $r7;
        org.apache.poi.openxml4j.opc.OPCPackage r1;
        java.lang.String $r3, $r4, $r9;
        boolean $z0, $z1;

        r1 := @this: org.apache.poi.openxml4j.opc.OPCPackage;

        r0 := @parameter0: java.io.File;

        if r0 != null goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("targetFile");

        throw $r6;

     label1:
        virtualinvoke r1.<org.apache.poi.openxml4j.opc.OPCPackage: void throwExceptionIfReadOnly()>();

        $z0 = virtualinvoke r0.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label2;

        $r3 = virtualinvoke r0.<java.io.File: java.lang.String getAbsolutePath()>();

        $r4 = r1.<org.apache.poi.openxml4j.opc.OPCPackage: java.lang.String originalPackagePath>;

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z1 == 0 goto label2;

        $r5 = new org.apache.poi.openxml4j.exceptions.InvalidOperationException;

        specialinvoke $r5.<org.apache.poi.openxml4j.exceptions.InvalidOperationException: void <init>(java.lang.String)>("You can\'t call save(File) to save to the currently open file. To save to the current file, please just call close()");

        throw $r5;

     label2:
        $r2 = new java.io.FileOutputStream;

        specialinvoke $r2.<java.io.FileOutputStream: void <init>(java.io.File)>(r0);

     label3:
        goto label5;

     label4:
        $r7 := @caughtexception;

        $r8 = new java.io.IOException;

        $r9 = virtualinvoke $r7.<java.io.FileNotFoundException: java.lang.String getLocalizedMessage()>();

        specialinvoke $r8.<java.io.IOException: void <init>(java.lang.String)>($r9);

        throw $r8;

     label5:
        virtualinvoke r1.<org.apache.poi.openxml4j.opc.OPCPackage: void save(java.io.OutputStream)>($r2);

        virtualinvoke $r2.<java.io.FileOutputStream: void close()>();

        return;

        catch java.io.FileNotFoundException from label2 to label3 with label4;
    }

    public void save(java.io.OutputStream) throws java.io.IOException
    {
        java.io.OutputStream r1;
        org.apache.poi.openxml4j.opc.OPCPackage r0;

        r0 := @this: org.apache.poi.openxml4j.opc.OPCPackage;

        r1 := @parameter0: java.io.OutputStream;

        virtualinvoke r0.<org.apache.poi.openxml4j.opc.OPCPackage: void throwExceptionIfReadOnly()>();

        virtualinvoke r0.<org.apache.poi.openxml4j.opc.OPCPackage: void saveImpl(java.io.OutputStream)>(r1);

        return;
    }

    protected abstract org.apache.poi.openxml4j.opc.PackagePart createPartImpl(org.apache.poi.openxml4j.opc.PackagePartName, java.lang.String, boolean);

    protected abstract void removePartImpl(org.apache.poi.openxml4j.opc.PackagePartName);

    protected abstract void flushImpl();

    protected abstract void closeImpl() throws java.io.IOException;

    protected abstract void revertImpl();

    protected abstract void saveImpl(java.io.OutputStream) throws java.io.IOException;

    protected abstract org.apache.poi.openxml4j.opc.PackagePart getPartImpl(org.apache.poi.openxml4j.opc.PackagePartName);

    protected abstract org.apache.poi.openxml4j.opc.PackagePart[] getPartsImpl() throws org.apache.poi.openxml4j.exceptions.InvalidFormatException;

    public boolean replaceContentType(java.lang.String, java.lang.String)
    {
        java.util.Iterator $r3;
        org.apache.poi.openxml4j.opc.PackagePartName $r7;
        java.util.ArrayList $r2;
        org.apache.poi.openxml4j.opc.OPCPackage r0;
        org.apache.poi.openxml4j.opc.internal.ContentTypeManager $r9;
        java.lang.Object $r4;
        org.apache.poi.openxml4j.opc.PackagePart r5;
        java.lang.String r1, $r6, r8;
        boolean $z0, $z1, z2;

        r0 := @this: org.apache.poi.openxml4j.opc.OPCPackage;

        r1 := @parameter0: java.lang.String;

        r8 := @parameter1: java.lang.String;

        z2 = 0;

        $r2 = virtualinvoke r0.<org.apache.poi.openxml4j.opc.OPCPackage: java.util.ArrayList getPartsByContentType(java.lang.String)>(r1);

        $r3 = virtualinvoke $r2.<java.util.ArrayList: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.apache.poi.openxml4j.opc.PackagePart) $r4;

        $r6 = virtualinvoke r5.<org.apache.poi.openxml4j.opc.PackagePart: java.lang.String getContentType()>();

        $z1 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z1 == 0 goto label2;

        $r7 = virtualinvoke r5.<org.apache.poi.openxml4j.opc.PackagePart: org.apache.poi.openxml4j.opc.PackagePartName getPartName()>();

        $r9 = r0.<org.apache.poi.openxml4j.opc.OPCPackage: org.apache.poi.openxml4j.opc.internal.ContentTypeManager contentTypeManager>;

        virtualinvoke $r9.<org.apache.poi.openxml4j.opc.internal.ContentTypeManager: void addContentType(org.apache.poi.openxml4j.opc.PackagePartName,java.lang.String)>($r7, r8);

        z2 = 1;

     label2:
        goto label1;

     label3:
        return z2;
    }

    static void <clinit>()
    {
        org.apache.poi.util.POILogger $r0;
        org.apache.poi.openxml4j.opc.PackageAccess $r1;

        $r0 = staticinvoke <org.apache.poi.util.POILogFactory: org.apache.poi.util.POILogger getLogger(java.lang.Class)>(class "Lorg/apache/poi/openxml4j/opc/OPCPackage;");

        <org.apache.poi.openxml4j.opc.OPCPackage: org.apache.poi.util.POILogger logger> = $r0;

        $r1 = <org.apache.poi.openxml4j.opc.PackageAccess: org.apache.poi.openxml4j.opc.PackageAccess READ_WRITE>;

        <org.apache.poi.openxml4j.opc.OPCPackage: org.apache.poi.openxml4j.opc.PackageAccess defaultPackageAccess> = $r1;

        return;
    }
}
