class com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState extends java.lang.Object
{
    byte[] code;
    java.util.ArrayList args;
    int p;
    private java.util.List[] termVarTable;
    private java.util.Map varOccurrence;
    private java.util.List permanentVars;
    private java.util.List tempVars;
    int totalOccurrences;
    java.util.Set seen;
    com.hp.hpl.jena.reasoner.rulesys.Rule rule;

    void <init>(com.hp.hpl.jena.reasoner.rulesys.Rule)
    {
        byte[] $r6;
        com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState r0;
        java.util.HashMap $r1;
        java.util.ArrayList $r2, $r3, $r7;
        java.util.HashSet $r4;
        com.hp.hpl.jena.reasoner.rulesys.Rule r5;
        int $i0, $i1, $i2, $i3, $i4;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState;

        r5 := @parameter0: com.hp.hpl.jena.reasoner.rulesys.Rule;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: java.util.Map varOccurrence> = $r1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: java.util.List permanentVars> = $r2;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: java.util.List tempVars> = $r3;

        r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: int totalOccurrences> = 0;

        $r4 = new java.util.HashSet;

        specialinvoke $r4.<java.util.HashSet: void <init>()>();

        r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: java.util.Set seen> = $r4;

        virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: void classifyVariables(com.hp.hpl.jena.reasoner.rulesys.Rule)>(r5);

        r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: com.hp.hpl.jena.reasoner.rulesys.Rule rule> = r5;

        $i0 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: int totalOccurrences>;

        $i1 = 10 + $i0;

        $i2 = virtualinvoke r5.<com.hp.hpl.jena.reasoner.rulesys.Rule: int bodyLength()>();

        $i3 = $i2 * 10;

        $i4 = $i1 + $i3;

        $r6 = newarray (byte)[$i4];

        r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: byte[] code> = $r6;

        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>()>();

        r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: java.util.ArrayList args> = $r7;

        return;
    }

    int emitBindingTests()
    {
        byte[] $r9, $r10, $r11, $r12;
        com.hp.hpl.jena.graph.Node $r6;
        byte $b7, $b12;
        com.hp.hpl.jena.reasoner.rulesys.ClauseEntry $r3;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i8, $i9, $i10, $i11, i13;
        java.lang.String $r7, $r8;
        boolean $z0, $z1, $z2;
        com.hp.hpl.jena.graph.Node[] $r5;
        com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState r0;
        com.hp.hpl.jena.reasoner.rulesys.Rule $r1, $r2;
        com.hp.hpl.jena.reasoner.rulesys.Functor r4;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState;

        i13 = 0;

     label1:
        $r1 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: com.hp.hpl.jena.reasoner.rulesys.Rule rule>;

        $i0 = virtualinvoke $r1.<com.hp.hpl.jena.reasoner.rulesys.Rule: int bodyLength()>();

        if i13 >= $i0 goto label5;

        $r2 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: com.hp.hpl.jena.reasoner.rulesys.Rule rule>;

        $r3 = virtualinvoke $r2.<com.hp.hpl.jena.reasoner.rulesys.Rule: com.hp.hpl.jena.reasoner.rulesys.ClauseEntry getBodyElement(int)>(i13);

        $z0 = $r3 instanceof com.hp.hpl.jena.reasoner.rulesys.Functor;

        if $z0 == 0 goto label5;

        r4 = (com.hp.hpl.jena.reasoner.rulesys.Functor) $r3;

        $i1 = virtualinvoke r4.<com.hp.hpl.jena.reasoner.rulesys.Functor: int getArgLength()>();

        if $i1 == 1 goto label2;

        goto label5;

     label2:
        $r5 = virtualinvoke r4.<com.hp.hpl.jena.reasoner.rulesys.Functor: com.hp.hpl.jena.graph.Node[] getArgs()>();

        $r6 = $r5[0];

        $i2 = virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: int aIndex(com.hp.hpl.jena.graph.Node)>($r6);

        if $i2 < 0 goto label4;

        $r7 = virtualinvoke r4.<com.hp.hpl.jena.reasoner.rulesys.Functor: java.lang.String getName()>();

        $z1 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>("bound");

        if $z1 == 0 goto label3;

        $r11 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: byte[] code>;

        $i8 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: int p>;

        $i9 = $i8 + 1;

        r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: int p> = $i9;

        $r11[$i8] = 32;

        $r12 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: byte[] code>;

        $i10 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: int p>;

        $i11 = $i10 + 1;

        r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: int p> = $i11;

        $b12 = (byte) $i2;

        $r12[$i10] = $b12;

        goto label4;

     label3:
        $r8 = virtualinvoke r4.<com.hp.hpl.jena.reasoner.rulesys.Functor: java.lang.String getName()>();

        $z2 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>("unbound");

        if $z2 == 0 goto label5;

        $r9 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: byte[] code>;

        $i3 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: int p>;

        $i4 = $i3 + 1;

        r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: int p> = $i4;

        $r9[$i3] = 33;

        $r10 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: byte[] code>;

        $i5 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: int p>;

        $i6 = $i5 + 1;

        r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: int p> = $i6;

        $b7 = (byte) $i2;

        $r10[$i5] = $b7;

     label4:
        i13 = i13 + 1;

        goto label1;

     label5:
        return i13;
    }

    int aIndex(com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState r0;
        com.hp.hpl.jena.graph.Node $r4, r5, $r6, $r7;
        com.hp.hpl.jena.reasoner.rulesys.Rule $r1;
        com.hp.hpl.jena.reasoner.TriplePattern r3;
        com.hp.hpl.jena.reasoner.rulesys.ClauseEntry $r2;
        int $i1;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState;

        r5 := @parameter0: com.hp.hpl.jena.graph.Node;

        $r1 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: com.hp.hpl.jena.reasoner.rulesys.Rule rule>;

        $r2 = virtualinvoke $r1.<com.hp.hpl.jena.reasoner.rulesys.Rule: com.hp.hpl.jena.reasoner.rulesys.ClauseEntry getHeadElement(int)>(0);

        r3 = (com.hp.hpl.jena.reasoner.TriplePattern) $r2;

        $r4 = virtualinvoke r3.<com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node getSubject()>();

        if $r4 != r5 goto label1;

        return 0;

     label1:
        $r6 = virtualinvoke r3.<com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node getPredicate()>();

        if $r6 != r5 goto label2;

        return 1;

     label2:
        $r7 = virtualinvoke r3.<com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node getObject()>();

        if $r7 != r5 goto label3;

        return 2;

     label3:
        $i1 = (int) -1;

        return $i1;
    }

    void emitHead(com.hp.hpl.jena.reasoner.TriplePattern)
    {
        byte[] $r6, $r7;
        com.hp.hpl.jena.graph.Node $r3, $r4, $r5;
        byte $b6;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState r0;
        java.util.List $r1, $r8;
        com.hp.hpl.jena.reasoner.TriplePattern r2;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState;

        r2 := @parameter0: com.hp.hpl.jena.reasoner.TriplePattern;

        $r1 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: java.util.List permanentVars>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        if $i0 <= 0 goto label1;

        $r6 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: byte[] code>;

        $i1 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: int p>;

        $i2 = $i1 + 1;

        r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: int p> = $i2;

        $r6[$i1] = 22;

        $r7 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: byte[] code>;

        $i3 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: int p>;

        $i4 = $i3 + 1;

        r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: int p> = $i4;

        $r8 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: java.util.List permanentVars>;

        $i5 = interfaceinvoke $r8.<java.util.List: int size()>();

        $b6 = (byte) $i5;

        $r7[$i3] = $b6;

     label1:
        $r3 = virtualinvoke r2.<com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node getSubject()>();

        virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: void emitHeadGet(com.hp.hpl.jena.graph.Node,int)>($r3, 0);

        $r4 = virtualinvoke r2.<com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node getPredicate()>();

        virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: void emitHeadGet(com.hp.hpl.jena.graph.Node,int)>($r4, 1);

        $r5 = virtualinvoke r2.<com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node getObject()>();

        virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: void emitHeadGet(com.hp.hpl.jena.graph.Node,int)>($r5, 2);

        return;
    }

    void emitHeadGet(com.hp.hpl.jena.graph.Node, int)
    {
        byte[] $r2, $r3, $r6, $r10, $r12, $r14, $r17, $r18, $r20;
        com.hp.hpl.jena.graph.Node r0, $r9;
        byte $b5, $b15, $b18, $b23, $b26, $b32, $b33;
        java.util.Map $r15;
        com.hp.hpl.jena.graph.Node[] $r8;
        com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState r1;
        java.util.Set $r11, $r29;
        java.util.ArrayList $r4, $r7;
        com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$TermIndex $r22, $r24, $r26;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.util.List $r13, $r19, r28;
        com.hp.hpl.jena.reasoner.rulesys.Functor r30;
        int $i0, $i1, $i2, $i3, i4, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i16, $i17, $i19, $i20, $i21, $i22, $i24, $i25, $i27, $i28, $i29, $i30, $i31, i34;
        com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable r27;
        java.lang.Object $r5, $r16, $r21, $r23, $r25;

        r1 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState;

        r0 := @parameter0: com.hp.hpl.jena.graph.Node;

        i4 := @parameter1: int;

        $z0 = r0 instanceof com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable;

        if $z0 == 0 goto label10;

        r27 = (com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable) r0;

        $z2 = virtualinvoke r1.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: boolean isDummy(com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable)>(r27);

        if $z2 == 0 goto label01;

        return;

     label01:
        $z3 = virtualinvoke r1.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: boolean isTemp(com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable)>(r27);

        if $z3 == 0 goto label06;

        $r15 = r1.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: java.util.Map varOccurrence>;

        $r16 = interfaceinvoke $r15.<java.util.Map: java.lang.Object get(java.lang.Object)>(r27);

        r28 = (java.util.List) $r16;

        $i19 = interfaceinvoke r28.<java.util.List: int size()>();

        if $i19 != 2 goto label02;

        $r21 = interfaceinvoke r28.<java.util.List: java.lang.Object get(int)>(0);

        $r22 = (com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$TermIndex) $r21;

        $i27 = $r22.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$TermIndex: int index>;

        if $i27 > 2 goto label02;

        $r23 = interfaceinvoke r28.<java.util.List: java.lang.Object get(int)>(0);

        $r24 = (com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$TermIndex) $r23;

        $i28 = $r24.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$TermIndex: int index>;

        $r25 = interfaceinvoke r28.<java.util.List: java.lang.Object get(int)>(1);

        $r26 = (com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$TermIndex) $r25;

        $i29 = $r26.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$TermIndex: int index>;

        if $i28 != $i29 goto label02;

        goto label05;

     label02:
        $r17 = r1.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: byte[] code>;

        $i30 = r1.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: int p>;

        $i31 = $i30 + 1;

        r1.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: int p> = $i31;

        $r29 = r1.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: java.util.Set seen>;

        $z5 = interfaceinvoke $r29.<java.util.Set: boolean add(java.lang.Object)>(r27);

        if $z5 == 0 goto label03;

        $b32 = 4;

        goto label04;

     label03:
        $b32 = 18;

     label04:
        $r17[$i30] = $b32;

        $r18 = r1.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: byte[] code>;

        $i20 = r1.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: int p>;

        $i21 = $i20 + 1;

        r1.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: int p> = $i21;

        $r19 = r1.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: java.util.List tempVars>;

        $i22 = interfaceinvoke $r19.<java.util.List: int indexOf(java.lang.Object)>(r27);

        $b23 = (byte) $i22;

        $r18[$i20] = $b23;

        $r20 = r1.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: byte[] code>;

        $i24 = r1.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: int p>;

        $i25 = $i24 + 1;

        r1.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: int p> = $i25;

        $b26 = (byte) i4;

        $r20[$i24] = $b26;

     label05:
        goto label09;

     label06:
        $r10 = r1.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: byte[] code>;

        $i10 = r1.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: int p>;

        $i11 = $i10 + 1;

        r1.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: int p> = $i11;

        $r11 = r1.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: java.util.Set seen>;

        $z4 = interfaceinvoke $r11.<java.util.Set: boolean add(java.lang.Object)>(r27);

        if $z4 == 0 goto label07;

        $b33 = 2;

        goto label08;

     label07:
        $b33 = 3;

     label08:
        $r10[$i10] = $b33;

        $r12 = r1.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: byte[] code>;

        $i12 = r1.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: int p>;

        $i13 = $i12 + 1;

        r1.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: int p> = $i13;

        $r13 = r1.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: java.util.List permanentVars>;

        $i14 = interfaceinvoke $r13.<java.util.List: int indexOf(java.lang.Object)>(r27);

        $b15 = (byte) $i14;

        $r12[$i12] = $b15;

        $r14 = r1.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: byte[] code>;

        $i16 = r1.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: int p>;

        $i17 = $i16 + 1;

        r1.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: int p> = $i17;

        $b18 = (byte) i4;

        $r14[$i16] = $b18;

     label09:
        goto label14;

     label10:
        $z1 = staticinvoke <com.hp.hpl.jena.reasoner.rulesys.Functor: boolean isFunctor(com.hp.hpl.jena.graph.Node)>(r0);

        if $z1 == 0 goto label13;

        $r5 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: java.lang.Object getLiteralValue()>();

        r30 = (com.hp.hpl.jena.reasoner.rulesys.Functor) $r5;

        $r6 = r1.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: byte[] code>;

        $i6 = r1.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: int p>;

        $i7 = $i6 + 1;

        r1.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: int p> = $i7;

        $r6[$i6] = 10;

        $r7 = r1.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: java.util.ArrayList args>;

        virtualinvoke $r7.<java.util.ArrayList: boolean add(java.lang.Object)>(r30);

        $r8 = virtualinvoke r30.<com.hp.hpl.jena.reasoner.rulesys.Functor: com.hp.hpl.jena.graph.Node[] getArgs()>();

        i34 = 0;

     label11:
        $i8 = lengthof $r8;

        if i34 >= $i8 goto label12;

        $r9 = $r8[i34];

        $i9 = i34 + 3;

        virtualinvoke r1.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: void emitHeadGet(com.hp.hpl.jena.graph.Node,int)>($r9, $i9);

        i34 = i34 + 1;

        goto label11;

     label12:
        goto label14;

     label13:
        $r2 = r1.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: byte[] code>;

        $i0 = r1.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: int p>;

        $i1 = $i0 + 1;

        r1.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: int p> = $i1;

        $r2[$i0] = 1;

        $r3 = r1.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: byte[] code>;

        $i2 = r1.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: int p>;

        $i3 = $i2 + 1;

        r1.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: int p> = $i3;

        $b5 = (byte) i4;

        $r3[$i2] = $b5;

        $r4 = r1.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: java.util.ArrayList args>;

        virtualinvoke $r4.<java.util.ArrayList: boolean add(java.lang.Object)>(r0);

     label14:
        return;
    }

    void emitBody(com.hp.hpl.jena.reasoner.TriplePattern, com.hp.hpl.jena.reasoner.rulesys.impl.LPRuleStore)
    {
        byte[] $r7, $r11, $r13, $r14, $r15, $r17;
        com.hp.hpl.jena.graph.Node $r2, $r3, $r4, $r8, $r10, $r12, $r16;
        byte $b14;
        boolean $z0, $z1, $z2, $z3, $z4;
        com.hp.hpl.jena.reasoner.rulesys.impl.LPRuleStore r5;
        com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState r0;
        java.util.List $r6, $r9;
        com.hp.hpl.jena.reasoner.TriplePattern r1;
        java.util.ArrayList $r18;
        com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState$RuleClauseCodeList $r19;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState;

        r1 := @parameter0: com.hp.hpl.jena.reasoner.TriplePattern;

        r5 := @parameter1: com.hp.hpl.jena.reasoner.rulesys.impl.LPRuleStore;

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node getSubject()>();

        virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: void emitBodyPut(com.hp.hpl.jena.graph.Node,int,boolean)>($r2, 0, 0);

        $r3 = virtualinvoke r1.<com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node getPredicate()>();

        virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: void emitBodyPut(com.hp.hpl.jena.graph.Node,int,boolean)>($r3, 1, 0);

        $r4 = virtualinvoke r1.<com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node getObject()>();

        virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: void emitBodyPut(com.hp.hpl.jena.graph.Node,int,boolean)>($r4, 2, 0);

        $r6 = virtualinvoke r5.<com.hp.hpl.jena.reasoner.rulesys.impl.LPRuleStore: java.util.List codeFor(com.hp.hpl.jena.reasoner.TriplePattern)>(r1);

        if $r6 == null goto label01;

        $i2 = interfaceinvoke $r6.<java.util.List: int size()>();

        if $i2 != 0 goto label02;

     label01:
        $r7 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: byte[] code>;

        $i0 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: int p>;

        $i1 = $i0 + 1;

        r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: int p> = $i1;

        $r7[$i0] = 17;

        goto label10;

     label02:
        $r8 = virtualinvoke r1.<com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node getPredicate()>();

        $z0 = virtualinvoke $r8.<com.hp.hpl.jena.graph.Node: boolean isVariable()>();

        if $z0 == 0 goto label03;

        $r17 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: byte[] code>;

        $i12 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: int p>;

        $i13 = $i12 + 1;

        r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: int p> = $i13;

        $r17[$i12] = 24;

        goto label10;

     label03:
        $z1 = virtualinvoke r5.<com.hp.hpl.jena.reasoner.rulesys.impl.LPRuleStore: boolean isTabled(com.hp.hpl.jena.reasoner.TriplePattern)>(r1);

        if $z1 == 0 goto label06;

        $r15 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: byte[] code>;

        $i10 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: int p>;

        $i11 = $i10 + 1;

        r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: int p> = $i11;

        $r16 = virtualinvoke r1.<com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node getPredicate()>();

        $z4 = virtualinvoke $r16.<com.hp.hpl.jena.graph.Node: boolean isVariable()>();

        if $z4 == 0 goto label04;

        $b14 = 25;

        goto label05;

     label04:
        $b14 = 24;

     label05:
        $r15[$i10] = $b14;

        goto label10;

     label06:
        $r9 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: java.util.List permanentVars>;

        $i3 = interfaceinvoke $r9.<java.util.List: int size()>();

        if $i3 != 0 goto label07;

        $r14 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: byte[] code>;

        $i8 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: int p>;

        $i9 = $i8 + 1;

        r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: int p> = $i9;

        $r14[$i8] = 19;

        goto label09;

     label07:
        $r10 = virtualinvoke r1.<com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node getPredicate()>();

        $z2 = virtualinvoke r5.<com.hp.hpl.jena.reasoner.rulesys.impl.LPRuleStore: boolean isIndexedPredicate(com.hp.hpl.jena.graph.Node)>($r10);

        if $z2 == 0 goto label08;

        $r12 = virtualinvoke r1.<com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node getObject()>();

        $z3 = virtualinvoke $r12.<com.hp.hpl.jena.graph.Node: boolean isVariable()>();

        if $z3 == 0 goto label08;

        $r13 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: byte[] code>;

        $i6 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: int p>;

        $i7 = $i6 + 1;

        r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: int p> = $i7;

        $r13[$i6] = 23;

        goto label09;

     label08:
        $r11 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: byte[] code>;

        $i4 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: int p>;

        $i5 = $i4 + 1;

        r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: int p> = $i5;

        $r11[$i4] = 9;

     label09:
        $r18 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: java.util.ArrayList args>;

        $r19 = new com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState$RuleClauseCodeList;

        specialinvoke $r19.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState$RuleClauseCodeList: void <init>(java.util.List)>($r6);

        virtualinvoke $r18.<java.util.ArrayList: boolean add(java.lang.Object)>($r19);

     label10:
        return;
    }

    void emitBodyPut(com.hp.hpl.jena.graph.Node, int, boolean)
    {
        byte[] $r2, $r3, $r7, $r11, $r12, $r14, $r15, $r18, $r19, $r21, $r26, $r27;
        com.hp.hpl.jena.graph.Node r0, $r9;
        byte $b5, $b15, $b18, $b27, $b30, $b37, $b38;
        java.util.Map $r16;
        com.hp.hpl.jena.graph.Node[] $r6;
        com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState r1;
        java.util.Set $r10;
        java.util.ArrayList $r4, $r8;
        com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$TermIndex $r23, $r25;
        boolean $z0, $z1, z2, $z3, $z4, $z5;
        java.util.List $r13, $r20, r31;
        com.hp.hpl.jena.reasoner.rulesys.Functor r32;
        int i0, $i1, $i2, $i3, $i4, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i16, $i17, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i28, $i29, $i31, $i32, $i33, $i34, $i35, $i36, i39;
        com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable r30;
        com.hp.hpl.jena.reasoner.rulesys.Rule $r29;
        com.hp.hpl.jena.reasoner.rulesys.impl.LPRuleSyntaxException $r28;
        java.lang.Object $r5, $r17, $r22, $r24;

        r1 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState;

        r0 := @parameter0: com.hp.hpl.jena.graph.Node;

        i0 := @parameter1: int;

        z2 := @parameter2: boolean;

        if i0 < 8 goto label01;

        $r28 = new com.hp.hpl.jena.reasoner.rulesys.impl.LPRuleSyntaxException;

        $r29 = r1.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: com.hp.hpl.jena.reasoner.rulesys.Rule rule>;

        specialinvoke $r28.<com.hp.hpl.jena.reasoner.rulesys.impl.LPRuleSyntaxException: void <init>(java.lang.String,com.hp.hpl.jena.reasoner.rulesys.Rule)>("Rule too complex for current implementation\nRule clauses are limited to 8 argument variables\n", $r29);

        throw $r28;

     label01:
        $z0 = r0 instanceof com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable;

        if $z0 == 0 goto label11;

        r30 = (com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable) r0;

        $z3 = virtualinvoke r1.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: boolean isDummy(com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable)>(r30);

        if $z3 == 0 goto label02;

        $r26 = r1.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: byte[] code>;

        $i33 = r1.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: int p>;

        $i34 = $i33 + 1;

        r1.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: int p> = $i34;

        $r26[$i33] = 16;

        $r27 = r1.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: byte[] code>;

        $i35 = r1.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: int p>;

        $i36 = $i35 + 1;

        r1.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: int p> = $i36;

        $b37 = (byte) i0;

        $r27[$i35] = $b37;

        return;

     label02:
        $z4 = virtualinvoke r1.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: boolean isTemp(com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable)>(r30);

        if $z4 == 0 goto label05;

        $r16 = r1.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: java.util.Map varOccurrence>;

        $r17 = interfaceinvoke $r16.<java.util.Map: java.lang.Object get(java.lang.Object)>(r30);

        r31 = (java.util.List) $r17;

        $i21 = interfaceinvoke r31.<java.util.List: int size()>();

        if $i21 != 2 goto label03;

        $r22 = interfaceinvoke r31.<java.util.List: java.lang.Object get(int)>(0);

        $r23 = (com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$TermIndex) $r22;

        $i31 = $r23.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$TermIndex: int index>;

        $r24 = interfaceinvoke r31.<java.util.List: java.lang.Object get(int)>(1);

        $r25 = (com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$TermIndex) $r24;

        $i32 = $r25.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$TermIndex: int index>;

        if $i31 != $i32 goto label03;

        goto label04;

     label03:
        $r18 = r1.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: byte[] code>;

        $i22 = r1.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: int p>;

        $i23 = $i22 + 1;

        r1.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: int p> = $i23;

        $r18[$i22] = 8;

        $r19 = r1.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: byte[] code>;

        $i24 = r1.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: int p>;

        $i25 = $i24 + 1;

        r1.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: int p> = $i25;

        $r20 = r1.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: java.util.List tempVars>;

        $i26 = interfaceinvoke $r20.<java.util.List: int indexOf(java.lang.Object)>(r30);

        $b27 = (byte) $i26;

        $r19[$i24] = $b27;

        $r21 = r1.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: byte[] code>;

        $i28 = r1.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: int p>;

        $i29 = $i28 + 1;

        r1.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: int p> = $i29;

        $b30 = (byte) i0;

        $r21[$i28] = $b30;

     label04:
        goto label10;

     label05:
        $r10 = r1.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: java.util.Set seen>;

        $z5 = interfaceinvoke $r10.<java.util.Set: boolean add(java.lang.Object)>(r30);

        if $z5 != 0 goto label08;

        $r15 = r1.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: byte[] code>;

        $i19 = r1.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: int p>;

        $i20 = $i19 + 1;

        r1.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: int p> = $i20;

        if z2 == 0 goto label06;

        $b38 = 20;

        goto label07;

     label06:
        $b38 = 7;

     label07:
        $r15[$i19] = $b38;

        goto label09;

     label08:
        $r11 = r1.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: byte[] code>;

        $i10 = r1.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: int p>;

        $i11 = $i10 + 1;

        r1.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: int p> = $i11;

        $r11[$i10] = 6;

     label09:
        $r12 = r1.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: byte[] code>;

        $i12 = r1.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: int p>;

        $i13 = $i12 + 1;

        r1.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: int p> = $i13;

        $r13 = r1.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: java.util.List permanentVars>;

        $i14 = interfaceinvoke $r13.<java.util.List: int indexOf(java.lang.Object)>(r30);

        $b15 = (byte) $i14;

        $r12[$i12] = $b15;

        $r14 = r1.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: byte[] code>;

        $i16 = r1.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: int p>;

        $i17 = $i16 + 1;

        r1.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: int p> = $i17;

        $b18 = (byte) i0;

        $r14[$i16] = $b18;

     label10:
        goto label15;

     label11:
        $z1 = staticinvoke <com.hp.hpl.jena.reasoner.rulesys.Functor: boolean isFunctor(com.hp.hpl.jena.graph.Node)>(r0);

        if $z1 == 0 goto label14;

        $r5 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: java.lang.Object getLiteralValue()>();

        r32 = (com.hp.hpl.jena.reasoner.rulesys.Functor) $r5;

        $r6 = virtualinvoke r32.<com.hp.hpl.jena.reasoner.rulesys.Functor: com.hp.hpl.jena.graph.Node[] getArgs()>();

        i39 = 0;

     label12:
        $i6 = lengthof $r6;

        if i39 >= $i6 goto label13;

        $r9 = $r6[i39];

        $i9 = i39 + 3;

        virtualinvoke r1.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: void emitBodyPut(com.hp.hpl.jena.graph.Node,int,boolean)>($r9, $i9, z2);

        i39 = i39 + 1;

        goto label12;

     label13:
        $r7 = r1.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: byte[] code>;

        $i7 = r1.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: int p>;

        $i8 = $i7 + 1;

        r1.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: int p> = $i8;

        $r7[$i7] = 12;

        $r8 = r1.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: java.util.ArrayList args>;

        virtualinvoke $r8.<java.util.ArrayList: boolean add(java.lang.Object)>(r32);

        goto label15;

     label14:
        $r2 = r1.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: byte[] code>;

        $i1 = r1.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: int p>;

        $i2 = $i1 + 1;

        r1.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: int p> = $i2;

        $r2[$i1] = 5;

        $r3 = r1.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: byte[] code>;

        $i3 = r1.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: int p>;

        $i4 = $i3 + 1;

        r1.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: int p> = $i4;

        $b5 = (byte) i0;

        $r3[$i3] = $b5;

        $r4 = r1.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: java.util.ArrayList args>;

        virtualinvoke $r4.<java.util.ArrayList: boolean add(java.lang.Object)>(r0);

     label15:
        return;
    }

    void emitBody(com.hp.hpl.jena.reasoner.rulesys.Functor)
    {
        byte[] $r4, $r5;
        com.hp.hpl.jena.graph.Node r7;
        byte $b6;
        com.hp.hpl.jena.graph.Node[] $r1;
        com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState r3;
        java.lang.StringBuilder $r9, $r10, $r12, $r13, $r14, $r15, $r16, $r20, $r21, $r23;
        com.hp.hpl.jena.reasoner.rulesys.Functor r0;
        java.util.ArrayList $r6;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i7, $i8, $i9, $i10, i11, $i12;
        java.lang.String $r11, $r17, $r22, $r24;
        com.hp.hpl.jena.reasoner.rulesys.Rule $r18, $r25;
        com.hp.hpl.jena.reasoner.rulesys.Builtin $r2;
        com.hp.hpl.jena.reasoner.rulesys.impl.LPRuleSyntaxException $r8, $r19;

        r3 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState;

        r0 := @parameter0: com.hp.hpl.jena.reasoner.rulesys.Functor;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.Functor: com.hp.hpl.jena.graph.Node[] getArgs()>();

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.Functor: com.hp.hpl.jena.reasoner.rulesys.Builtin getImplementor()>();

        if $r2 != null goto label1;

        $r19 = new com.hp.hpl.jena.reasoner.rulesys.impl.LPRuleSyntaxException;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown builtin operation ");

        $r22 = virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.Functor: java.lang.String getName()>();

        $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        $r25 = r3.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: com.hp.hpl.jena.reasoner.rulesys.Rule rule>;

        specialinvoke $r19.<com.hp.hpl.jena.reasoner.rulesys.impl.LPRuleSyntaxException: void <init>(java.lang.String,com.hp.hpl.jena.reasoner.rulesys.Rule)>($r24, $r25);

        throw $r19;

     label1:
        $i0 = interfaceinvoke $r2.<com.hp.hpl.jena.reasoner.rulesys.Builtin: int getArgLength()>();

        if $i0 == 0 goto label2;

        $i7 = interfaceinvoke $r2.<com.hp.hpl.jena.reasoner.rulesys.Builtin: int getArgLength()>();

        $i8 = lengthof $r1;

        if $i7 == $i8 goto label2;

        $r8 = new com.hp.hpl.jena.reasoner.rulesys.impl.LPRuleSyntaxException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Wrong number of arguments to functor ");

        $r11 = virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.Functor: java.lang.String getName()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" : got ");

        $i9 = virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.Functor: int getArgLength()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i9);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" : expected ");

        $i10 = interfaceinvoke $r2.<com.hp.hpl.jena.reasoner.rulesys.Builtin: int getArgLength()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i10);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        $r18 = r3.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: com.hp.hpl.jena.reasoner.rulesys.Rule rule>;

        specialinvoke $r8.<com.hp.hpl.jena.reasoner.rulesys.impl.LPRuleSyntaxException: void <init>(java.lang.String,com.hp.hpl.jena.reasoner.rulesys.Rule)>($r17, $r18);

        throw $r8;

     label2:
        i11 = 0;

     label3:
        $i12 = lengthof $r1;

        if i11 >= $i12 goto label4;

        r7 = $r1[i11];

        virtualinvoke r3.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: void emitBodyPut(com.hp.hpl.jena.graph.Node,int,boolean)>(r7, i11, 1);

        i11 = i11 + 1;

        goto label3;

     label4:
        $r4 = r3.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: byte[] code>;

        $i1 = r3.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: int p>;

        $i2 = $i1 + 1;

        r3.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: int p> = $i2;

        $r4[$i1] = 13;

        $r5 = r3.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: byte[] code>;

        $i3 = r3.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: int p>;

        $i4 = $i3 + 1;

        r3.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: int p> = $i4;

        $i5 = lengthof $r1;

        $b6 = (byte) $i5;

        $r5[$i3] = $b6;

        $r6 = r3.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: java.util.ArrayList args>;

        virtualinvoke $r6.<java.util.ArrayList: boolean add(java.lang.Object)>($r2);

        return;
    }

    byte[] getFinalCode()
    {
        byte[] $r1, r2, $r3;
        com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState r0;
        int $i0, $i1, $i2, $i3;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState;

        $r1 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: byte[] code>;

        $i0 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: int p>;

        $i1 = $i0 + 1;

        r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: int p> = $i1;

        $r1[$i0] = 11;

        $i2 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: int p>;

        r2 = newarray (byte)[$i2];

        $r3 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: byte[] code>;

        $i3 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: int p>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, r2, 0, $i3);

        return r2;
    }

    java.lang.Object[] getFinalArgs()
    {
        java.lang.Object[] $r2;
        com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState r0;
        java.util.ArrayList $r1;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState;

        $r1 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: java.util.ArrayList args>;

        $r2 = virtualinvoke $r1.<java.util.ArrayList: java.lang.Object[] toArray()>();

        return $r2;
    }

    void classifyVariables(com.hp.hpl.jena.reasoner.rulesys.Rule)
    {
        com.hp.hpl.jena.graph.Node r35;
        com.hp.hpl.jena.reasoner.rulesys.ClauseEntry $r4, $r21, $r30;
        java.util.Map $r8, $r24, $r28;
        com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState r2;
        java.util.ArrayList $r27;
        java.util.List[] r1, $r3, $r6, $r22, $r29, $r32;
        com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$TermIndex r20, $r26;
        boolean $z0, $z1, $z2, $z3, $z4, z5, z6;
        java.util.Collection $r9;
        java.util.List $r5, $r7, $r11, $r12, $r17, $r18, $r31, $r33, r34, r37, r38;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, i18, i19, i20;
        com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable r36, r39;
        java.util.Iterator $r10, $r16;
        com.hp.hpl.jena.reasoner.rulesys.Rule r0;
        com.hp.hpl.jena.reasoner.rulesys.impl.LPRuleSyntaxException $r13, $r14;
        java.lang.Object $r15, $r19, $r23, $r25;

        r2 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState;

        r0 := @parameter0: com.hp.hpl.jena.reasoner.rulesys.Rule;

        $i0 = virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.Rule: int bodyLength()>();

        $i1 = $i0 + 1;

        r1 = newarray (java.util.List)[$i1];

        r2.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: java.util.List[] termVarTable> = r1;

        $r3 = r2.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: java.util.List[] termVarTable>;

        $r4 = virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.Rule: com.hp.hpl.jena.reasoner.rulesys.ClauseEntry getHeadElement(int)>(0);

        $r5 = specialinvoke r2.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: java.util.List termVars(com.hp.hpl.jena.reasoner.rulesys.ClauseEntry)>($r4);

        $r3[0] = $r5;

        $i2 = r2.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: int totalOccurrences>;

        $r6 = r2.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: java.util.List[] termVarTable>;

        $r7 = $r6[0];

        $i3 = interfaceinvoke $r7.<java.util.List: int size()>();

        $i4 = $i2 + $i3;

        r2.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: int totalOccurrences> = $i4;

        i18 = 0;

     label01:
        $i5 = virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.Rule: int bodyLength()>();

        if i18 >= $i5 goto label02;

        $r29 = r2.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: java.util.List[] termVarTable>;

        $i13 = i18 + 1;

        $r30 = virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.Rule: com.hp.hpl.jena.reasoner.rulesys.ClauseEntry getBodyElement(int)>(i18);

        $r31 = specialinvoke r2.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: java.util.List termVars(com.hp.hpl.jena.reasoner.rulesys.ClauseEntry)>($r30);

        $r29[$i13] = $r31;

        $i15 = r2.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: int totalOccurrences>;

        $r32 = r2.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: java.util.List[] termVarTable>;

        $i14 = i18 + 1;

        $r33 = $r32[$i14];

        $i16 = interfaceinvoke $r33.<java.util.List: int size()>();

        $i17 = $i15 + $i16;

        r2.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: int totalOccurrences> = $i17;

        i18 = i18 + 1;

        goto label01;

     label02:
        i19 = 0;

     label03:
        $i6 = virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.Rule: int bodyLength()>();

        $i7 = $i6 + 1;

        if i19 >= $i7 goto label08;

        $r22 = r2.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: java.util.List[] termVarTable>;

        r34 = $r22[i19];

        i20 = 0;

     label04:
        $i12 = interfaceinvoke r34.<java.util.List: int size()>();

        if i20 >= $i12 goto label07;

        $r23 = interfaceinvoke r34.<java.util.List: java.lang.Object get(int)>(i20);

        r35 = (com.hp.hpl.jena.graph.Node) $r23;

        $z4 = virtualinvoke r35.<com.hp.hpl.jena.graph.Node: boolean isVariable()>();

        if $z4 == 0 goto label06;

        r36 = (com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable) r35;

        $r24 = r2.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: java.util.Map varOccurrence>;

        $r25 = interfaceinvoke $r24.<java.util.Map: java.lang.Object get(java.lang.Object)>(r36);

        r37 = (java.util.List) $r25;

        if r37 != null goto label05;

        $r27 = new java.util.ArrayList;

        specialinvoke $r27.<java.util.ArrayList: void <init>()>();

        r37 = $r27;

        $r28 = r2.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: java.util.Map varOccurrence>;

        interfaceinvoke $r28.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r36, $r27);

     label05:
        $r26 = new com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$TermIndex;

        specialinvoke $r26.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$TermIndex: void <init>(com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable,int,int)>(r36, i19, i20);

        interfaceinvoke r37.<java.util.List: boolean add(java.lang.Object)>($r26);

     label06:
        i20 = i20 + 1;

        goto label04;

     label07:
        i19 = i19 + 1;

        goto label03;

     label08:
        $r8 = r2.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: java.util.Map varOccurrence>;

        $r9 = interfaceinvoke $r8.<java.util.Map: java.util.Collection values()>();

        $r10 = interfaceinvoke $r9.<java.util.Collection: java.util.Iterator iterator()>();

     label09:
        $z0 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label18;

        $r15 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        r38 = (java.util.List) $r15;

        r39 = null;

        z5 = 0;

        z6 = 0;

        $r16 = interfaceinvoke r38.<java.util.List: java.util.Iterator iterator()>();

     label10:
        $z1 = interfaceinvoke $r16.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label14;

        $r19 = interfaceinvoke $r16.<java.util.Iterator: java.lang.Object next()>();

        r20 = (com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$TermIndex) $r19;

        r39 = r20.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$TermIndex: com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable var>;

        i10 = r20.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$TermIndex: int termNumber>;

        if i10 != 0 goto label11;

        z5 = 1;

        goto label12;

     label11:
        if i10 <= 1 goto label12;

        z6 = 1;

     label12:
        if i10 <= 0 goto label13;

        $i11 = i10 - 1;

        $r21 = virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.Rule: com.hp.hpl.jena.reasoner.rulesys.ClauseEntry getBodyElement(int)>($i11);

        $z3 = $r21 instanceof com.hp.hpl.jena.reasoner.rulesys.Functor;

        if $z3 == 0 goto label13;

     label13:
        goto label10;

     label14:
        $z2 = virtualinvoke r2.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: boolean isDummy(com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable)>(r39);

        if $z2 != 0 goto label17;

        if z6 != 0 goto label15;

        if z5 != 0 goto label16;

     label15:
        $r17 = r2.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: java.util.List permanentVars>;

        interfaceinvoke $r17.<java.util.List: boolean add(java.lang.Object)>(r39);

        goto label17;

     label16:
        $r18 = r2.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: java.util.List tempVars>;

        interfaceinvoke $r18.<java.util.List: boolean add(java.lang.Object)>(r39);

     label17:
        goto label09;

     label18:
        $r11 = r2.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: java.util.List permanentVars>;

        $i8 = interfaceinvoke $r11.<java.util.List: int size()>();

        if $i8 <= 15 goto label19;

        $r14 = new com.hp.hpl.jena.reasoner.rulesys.impl.LPRuleSyntaxException;

        specialinvoke $r14.<com.hp.hpl.jena.reasoner.rulesys.impl.LPRuleSyntaxException: void <init>(java.lang.String,com.hp.hpl.jena.reasoner.rulesys.Rule)>("Rule too complex for current implementation\nRule clauses are limited to 15 permanent variables\n", r0);

        throw $r14;

     label19:
        $r12 = r2.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: java.util.List tempVars>;

        $i9 = interfaceinvoke $r12.<java.util.List: int size()>();

        if $i9 <= 8 goto label20;

        $r13 = new com.hp.hpl.jena.reasoner.rulesys.impl.LPRuleSyntaxException;

        specialinvoke $r13.<com.hp.hpl.jena.reasoner.rulesys.impl.LPRuleSyntaxException: void <init>(java.lang.String,com.hp.hpl.jena.reasoner.rulesys.Rule)>("Rule too complex for current implementation\nRule clauses are limited to 8 temporary variables\n", r0);

        throw $r13;

     label20:
        return;
    }

    boolean isTemp(com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable)
    {
        com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable r1;
        java.util.List $r2;
        com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState r0;
        boolean $z0, $z1, $z2;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState;

        r1 := @parameter0: com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: boolean isDummy(com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable)>(r1);

        if $z0 != 0 goto label1;

        $r2 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: java.util.List permanentVars>;

        $z1 = interfaceinvoke $r2.<java.util.List: boolean contains(java.lang.Object)>(r1);

        if $z1 != 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    boolean isDummy(com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable)
    {
        com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable r1;
        java.util.List r4;
        com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState r0;
        java.util.Map $r2;
        int $i0;
        java.lang.Object $r3;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState;

        r1 := @parameter0: com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable;

        $r2 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: java.util.Map varOccurrence>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (java.util.List) $r3;

        if r4 == null goto label1;

        $i0 = interfaceinvoke r4.<java.util.List: int size()>();

        if $i0 > 1 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }

    private java.util.List termVars(com.hp.hpl.jena.reasoner.rulesys.ClauseEntry)
    {
        com.hp.hpl.jena.graph.Node $r4, $r5, $r6, $r7;
        java.util.ArrayList $r0;
        com.hp.hpl.jena.reasoner.rulesys.ClauseEntry r1;
        int $i0, i1;
        boolean $z0, $z1, $z2;
        com.hp.hpl.jena.graph.Node[] $r3;
        com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState r8;
        java.util.List $r11;
        com.hp.hpl.jena.reasoner.TriplePattern r12;
        java.lang.Object $r9;
        com.hp.hpl.jena.reasoner.rulesys.Functor $r2, $r10;

        r8 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState;

        r1 := @parameter0: com.hp.hpl.jena.reasoner.rulesys.ClauseEntry;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $z0 = r1 instanceof com.hp.hpl.jena.reasoner.TriplePattern;

        if $z0 == 0 goto label3;

        r12 = (com.hp.hpl.jena.reasoner.TriplePattern) r1;

        $r5 = virtualinvoke r12.<com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node getSubject()>();

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r5);

        $r6 = virtualinvoke r12.<com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node getPredicate()>();

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r6);

        $r7 = virtualinvoke r12.<com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node getObject()>();

        $z2 = staticinvoke <com.hp.hpl.jena.reasoner.rulesys.Functor: boolean isFunctor(com.hp.hpl.jena.graph.Node)>($r7);

        if $z2 == 0 goto label1;

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r7);

        $r9 = virtualinvoke $r7.<com.hp.hpl.jena.graph.Node: java.lang.Object getLiteralValue()>();

        $r10 = (com.hp.hpl.jena.reasoner.rulesys.Functor) $r9;

        $r11 = specialinvoke r8.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode$CompileState: java.util.List termVars(com.hp.hpl.jena.reasoner.rulesys.ClauseEntry)>($r10);

        interfaceinvoke $r0.<java.util.List: boolean addAll(java.util.Collection)>($r11);

        goto label2;

     label1:
        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r7);

     label2:
        goto label5;

     label3:
        $z1 = r1 instanceof com.hp.hpl.jena.reasoner.rulesys.Functor;

        if $z1 == 0 goto label5;

        $r2 = (com.hp.hpl.jena.reasoner.rulesys.Functor) r1;

        $r3 = virtualinvoke $r2.<com.hp.hpl.jena.reasoner.rulesys.Functor: com.hp.hpl.jena.graph.Node[] getArgs()>();

        i1 = 0;

     label4:
        $i0 = lengthof $r3;

        if i1 >= $i0 goto label5;

        $r4 = $r3[i1];

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r4);

        i1 = i1 + 1;

        goto label4;

     label5:
        return $r0;
    }
}
