public abstract class org.apache.poi.util.LZWDecompresser extends java.lang.Object
{
    private final boolean maskMeansCompressed;
    private final int codeLengthIncrease;
    private final boolean positionIsBigEndian;

    protected void <init>(boolean, int, boolean)
    {
        int i0;
        org.apache.poi.util.LZWDecompresser r0;
        boolean z0, z1;

        r0 := @this: org.apache.poi.util.LZWDecompresser;

        z0 := @parameter0: boolean;

        i0 := @parameter1: int;

        z1 := @parameter2: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.poi.util.LZWDecompresser: boolean maskMeansCompressed> = z0;

        r0.<org.apache.poi.util.LZWDecompresser: int codeLengthIncrease> = i0;

        r0.<org.apache.poi.util.LZWDecompresser: boolean positionIsBigEndian> = z1;

        return;
    }

    protected abstract int populateDictionary(byte[]);

    protected abstract int adjustDictionaryOffset(int);

    public byte[] decompress(java.io.InputStream) throws java.io.IOException
    {
        byte[] $r3;
        java.io.ByteArrayOutputStream $r0;
        org.apache.poi.util.LZWDecompresser r1;
        java.io.InputStream r2;

        r1 := @this: org.apache.poi.util.LZWDecompresser;

        r2 := @parameter0: java.io.InputStream;

        $r0 = new java.io.ByteArrayOutputStream;

        specialinvoke $r0.<java.io.ByteArrayOutputStream: void <init>()>();

        virtualinvoke r1.<org.apache.poi.util.LZWDecompresser: void decompress(java.io.InputStream,java.io.OutputStream)>(r2, $r0);

        $r3 = virtualinvoke $r0.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        return $r3;
    }

    public void decompress(java.io.InputStream, java.io.OutputStream) throws java.io.IOException
    {
        byte[] r0, r2, $r5;
        byte $b13, $b15, $b21, $b22;
        boolean $z0, $z1, $z2, $z3;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, $i8, $i9, $i10, $i11, $i12, $i14, $i16, $i17, $i18, $i19, $i20, i23, $i24, i25, i26, i27, $i29, $i31, $i33, $i35;
        java.io.OutputStream r4;
        org.apache.poi.util.LZWDecompresser r1;
        java.io.InputStream r3;

        r1 := @this: org.apache.poi.util.LZWDecompresser;

        r3 := @parameter0: java.io.InputStream;

        r4 := @parameter1: java.io.OutputStream;

        r0 = newarray (byte)[4096];

        i23 = virtualinvoke r1.<org.apache.poi.util.LZWDecompresser: int populateDictionary(byte[])>(r0);

        $i0 = r1.<org.apache.poi.util.LZWDecompresser: int codeLengthIncrease>;

        $i1 = 16 + $i0;

        r2 = newarray (byte)[$i1];

     label01:
        $i24 = virtualinvoke r3.<java.io.InputStream: int read()>();

        $i29 = (int) -1;

        if $i24 == $i29 goto label12;

        i25 = 1;

     label02:
        if i25 >= 256 goto label01;

        $i2 = $i24 & i25;

        if $i2 <= 0 goto label03;

        $z3 = 1;

        goto label04;

     label03:
        $z3 = 0;

     label04:
        $z0 = r1.<org.apache.poi.util.LZWDecompresser: boolean maskMeansCompressed>;

        $z1 = $z3 ^ $z0;

        if $z1 == 0 goto label05;

        $i19 = virtualinvoke r3.<java.io.InputStream: int read()>();

        $i31 = (int) -1;

        if $i19 == $i31 goto label11;

        $i20 = i23 & 4095;

        $b21 = staticinvoke <org.apache.poi.util.LZWDecompresser: byte fromInt(int)>($i19);

        r0[$i20] = $b21;

        i23 = i23 + 1;

        $r5 = newarray (byte)[1];

        $b22 = staticinvoke <org.apache.poi.util.LZWDecompresser: byte fromInt(int)>($i19);

        $r5[0] = $b22;

        virtualinvoke r4.<java.io.OutputStream: void write(byte[])>($r5);

        goto label11;

     label05:
        $i3 = virtualinvoke r3.<java.io.InputStream: int read()>();

        $i4 = virtualinvoke r3.<java.io.InputStream: int read()>();

        $i33 = (int) -1;

        if $i3 == $i33 goto label01;

        $i35 = (int) -1;

        if $i4 != $i35 goto label06;

        goto label01;

     label06:
        $i6 = $i4 & 15;

        $i5 = r1.<org.apache.poi.util.LZWDecompresser: int codeLengthIncrease>;

        i7 = $i6 + $i5;

        $z2 = r1.<org.apache.poi.util.LZWDecompresser: boolean positionIsBigEndian>;

        if $z2 == 0 goto label07;

        $i18 = $i3 << 4;

        $i17 = $i4 >> 4;

        i26 = $i18 + $i17;

        goto label08;

     label07:
        $i8 = $i4 & 240;

        $i9 = $i8 << 4;

        i26 = $i3 + $i9;

     label08:
        $i10 = virtualinvoke r1.<org.apache.poi.util.LZWDecompresser: int adjustDictionaryOffset(int)>(i26);

        i27 = 0;

     label09:
        if i27 >= i7 goto label10;

        $i11 = $i10 + i27;

        $i12 = $i11 & 4095;

        $b13 = r0[$i12];

        r2[i27] = $b13;

        $i14 = i23 + i27;

        $i16 = $i14 & 4095;

        $b15 = r2[i27];

        r0[$i16] = $b15;

        i27 = i27 + 1;

        goto label09;

     label10:
        virtualinvoke r4.<java.io.OutputStream: void write(byte[],int,int)>(r2, 0, i7);

        i23 = i23 + i7;

     label11:
        i25 = i25 << 1;

        goto label02;

     label12:
        return;
    }

    public static byte fromInt(int)
    {
        byte $b2, $b3;
        int i0, $i1;

        i0 := @parameter0: int;

        if i0 >= 128 goto label1;

        $b3 = (byte) i0;

        return $b3;

     label1:
        $i1 = i0 - 256;

        $b2 = (byte) $i1;

        return $b2;
    }

    public static int fromByte(byte)
    {
        byte b0;
        int $i1, $i2, $i3, $i4;

        b0 := @parameter0: byte;

        $i2 = (int) b0;

        if $i2 < 0 goto label1;

        $i3 = (int) b0;

        return $i3;

     label1:
        $i4 = (int) b0;

        $i1 = $i4 + 256;

        return $i1;
    }
}
