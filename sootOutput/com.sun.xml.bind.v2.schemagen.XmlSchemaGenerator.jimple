public final class com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator extends java.lang.Object
{
    private static final java.util.logging.Logger logger;
    private final java.util.Map namespaces;
    private com.sun.xml.bind.api.ErrorListener errorListener;
    private com.sun.xml.bind.v2.model.nav.Navigator navigator;
    private final com.sun.xml.bind.v2.model.core.TypeInfoSet types;
    private final com.sun.xml.bind.v2.model.core.NonElement stringType;
    private final com.sun.xml.bind.v2.model.core.NonElement anyType;
    private final com.sun.xml.bind.v2.util.CollisionCheckStack collisionChecker;
    private static final java.util.Comparator NAMESPACE_COMPARATOR;
    private static final java.lang.String newline;
    static final boolean $assertionsDisabled;

    public void <init>(com.sun.xml.bind.v2.model.nav.Navigator, com.sun.xml.bind.v2.model.core.TypeInfoSet)
    {
        java.util.Map $r9, $r12, $r15, $r18;
        com.sun.xml.bind.v2.model.core.ElementInfo r26;
        com.sun.xml.bind.v2.util.CollisionCheckStack $r3;
        boolean $z0, $z1, $z2, $z3;
        java.util.Collection $r10, $r13, $r16, $r19;
        com.sun.xml.bind.v2.model.core.NonElement $r7, $r8;
        com.sun.xml.bind.v2.model.core.EnumLeafInfo r27;
        com.sun.xml.bind.v2.model.core.ClassInfo r25;
        com.sun.xml.bind.v2.model.core.ArrayInfo r28;
        java.util.Iterator $r11, $r14, $r17, $r20;
        com.sun.xml.bind.v2.model.core.TypeInfoSet r5;
        java.util.TreeMap $r1;
        com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator r0;
        java.lang.Object $r6, $r21, $r22, $r23, $r24;
        java.util.Comparator $r2;
        com.sun.xml.bind.v2.model.nav.Navigator r4;

        r0 := @this: com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator;

        r4 := @parameter0: com.sun.xml.bind.v2.model.nav.Navigator;

        r5 := @parameter1: com.sun.xml.bind.v2.model.core.TypeInfoSet;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.TreeMap;

        $r2 = <com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator: java.util.Comparator NAMESPACE_COMPARATOR>;

        specialinvoke $r1.<java.util.TreeMap: void <init>(java.util.Comparator)>($r2);

        r0.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator: java.util.Map namespaces> = $r1;

        $r3 = new com.sun.xml.bind.v2.util.CollisionCheckStack;

        specialinvoke $r3.<com.sun.xml.bind.v2.util.CollisionCheckStack: void <init>()>();

        r0.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator: com.sun.xml.bind.v2.util.CollisionCheckStack collisionChecker> = $r3;

        r0.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator: com.sun.xml.bind.v2.model.nav.Navigator navigator> = r4;

        r0.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator: com.sun.xml.bind.v2.model.core.TypeInfoSet types> = r5;

        $r6 = interfaceinvoke r4.<com.sun.xml.bind.v2.model.nav.Navigator: java.lang.Object ref(java.lang.Class)>(class "Ljava/lang/String;");

        $r7 = interfaceinvoke r5.<com.sun.xml.bind.v2.model.core.TypeInfoSet: com.sun.xml.bind.v2.model.core.NonElement getTypeInfo(java.lang.Object)>($r6);

        r0.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator: com.sun.xml.bind.v2.model.core.NonElement stringType> = $r7;

        $r8 = interfaceinvoke r5.<com.sun.xml.bind.v2.model.core.TypeInfoSet: com.sun.xml.bind.v2.model.core.NonElement getAnyTypeInfo()>();

        r0.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator: com.sun.xml.bind.v2.model.core.NonElement anyType> = $r8;

        $r9 = interfaceinvoke r5.<com.sun.xml.bind.v2.model.core.TypeInfoSet: java.util.Map beans()>();

        $r10 = interfaceinvoke $r9.<java.util.Map: java.util.Collection values()>();

        $r11 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r11.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r24 = interfaceinvoke $r11.<java.util.Iterator: java.lang.Object next()>();

        r25 = (com.sun.xml.bind.v2.model.core.ClassInfo) $r24;

        virtualinvoke r0.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator: void add(com.sun.xml.bind.v2.model.core.ClassInfo)>(r25);

        goto label1;

     label2:
        $r12 = interfaceinvoke r5.<com.sun.xml.bind.v2.model.core.TypeInfoSet: java.util.Map getElementMappings(java.lang.Object)>(null);

        $r13 = interfaceinvoke $r12.<java.util.Map: java.util.Collection values()>();

        $r14 = interfaceinvoke $r13.<java.util.Collection: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke $r14.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r23 = interfaceinvoke $r14.<java.util.Iterator: java.lang.Object next()>();

        r26 = (com.sun.xml.bind.v2.model.core.ElementInfo) $r23;

        virtualinvoke r0.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator: void add(com.sun.xml.bind.v2.model.core.ElementInfo)>(r26);

        goto label3;

     label4:
        $r15 = interfaceinvoke r5.<com.sun.xml.bind.v2.model.core.TypeInfoSet: java.util.Map enums()>();

        $r16 = interfaceinvoke $r15.<java.util.Map: java.util.Collection values()>();

        $r17 = interfaceinvoke $r16.<java.util.Collection: java.util.Iterator iterator()>();

     label5:
        $z2 = interfaceinvoke $r17.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label6;

        $r22 = interfaceinvoke $r17.<java.util.Iterator: java.lang.Object next()>();

        r27 = (com.sun.xml.bind.v2.model.core.EnumLeafInfo) $r22;

        virtualinvoke r0.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator: void add(com.sun.xml.bind.v2.model.core.EnumLeafInfo)>(r27);

        goto label5;

     label6:
        $r18 = interfaceinvoke r5.<com.sun.xml.bind.v2.model.core.TypeInfoSet: java.util.Map arrays()>();

        $r19 = interfaceinvoke $r18.<java.util.Map: java.util.Collection values()>();

        $r20 = interfaceinvoke $r19.<java.util.Collection: java.util.Iterator iterator()>();

     label7:
        $z3 = interfaceinvoke $r20.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label8;

        $r21 = interfaceinvoke $r20.<java.util.Iterator: java.lang.Object next()>();

        r28 = (com.sun.xml.bind.v2.model.core.ArrayInfo) $r21;

        virtualinvoke r0.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator: void add(com.sun.xml.bind.v2.model.core.ArrayInfo)>(r28);

        goto label7;

     label8:
        return;
    }

    private com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace getNamespace(java.lang.String)
    {
        java.util.Map $r2, $r5;
        com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator r0;
        java.lang.Object $r3;
        java.lang.String r1;
        com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace $r4, r6;

        r0 := @this: com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator: java.util.Map namespaces>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r6 = (com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace) $r3;

        if r6 != null goto label1;

        $r5 = r0.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator: java.util.Map namespaces>;

        $r4 = new com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace;

        specialinvoke $r4.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace: void <init>(com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator,java.lang.String)>(r0, r1);

        r6 = $r4;

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r4);

     label1:
        return r6;
    }

    public void add(com.sun.xml.bind.v2.model.core.ClassInfo)
    {
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        com.sun.xml.bind.v2.model.core.ElementPropertyInfo r37;
        java.util.Set $r7, $r31;
        java.util.List $r8, $r15;
        javax.xml.namespace.QName $r5, $r11, $r19, $r23, $r24, $r27, $r28, $r32, $r33;
        com.sun.xml.bind.v2.model.core.ClassInfo r0, $r10;
        com.sun.xml.bind.v2.model.core.AttributePropertyInfo r36;
        java.lang.AssertionError $r34;
        com.sun.xml.bind.v2.model.core.TypeRef r18;
        javax.activation.MimeType $r14;
        int $i0, $i1;
        java.lang.String $r20, $r21, $r25, $r29, r35;
        java.util.Iterator $r9, $r16;
        com.sun.xml.bind.v2.model.core.PropertyInfo r13;
        java.lang.Object $r1, $r4, $r12, $r17;
        com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator r2;
        com.sun.xml.bind.v2.model.nav.Navigator $r3;
        com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace $r6, $r22, $r26, $r30;

        r2 := @this: com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator;

        r0 := @parameter0: com.sun.xml.bind.v2.model.core.ClassInfo;

        $z0 = <com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator: boolean $assertionsDisabled>;

        if $z0 != 0 goto label01;

        if r0 != null goto label01;

        $r34 = new java.lang.AssertionError;

        specialinvoke $r34.<java.lang.AssertionError: void <init>()>();

        throw $r34;

     label01:
        r35 = null;

        $r1 = interfaceinvoke r0.<com.sun.xml.bind.v2.model.core.ClassInfo: java.lang.Object getClazz()>();

        $r3 = r2.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator: com.sun.xml.bind.v2.model.nav.Navigator navigator>;

        $r4 = interfaceinvoke $r3.<com.sun.xml.bind.v2.model.nav.Navigator: java.lang.Object asDecl(java.lang.Class)>(class "Lcom/sun/xml/bind/api/CompositeStructure;");

        if $r1 != $r4 goto label02;

        return;

     label02:
        $z1 = interfaceinvoke r0.<com.sun.xml.bind.v2.model.core.ClassInfo: boolean isElement()>();

        if $z1 == 0 goto label03;

        $r28 = interfaceinvoke r0.<com.sun.xml.bind.v2.model.core.ClassInfo: javax.xml.namespace.QName getElementName()>();

        $r29 = virtualinvoke $r28.<javax.xml.namespace.QName: java.lang.String getNamespaceURI()>();

        r35 = $r29;

        $r30 = specialinvoke r2.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator: com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace getNamespace(java.lang.String)>($r29);

        $r31 = staticinvoke <com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace: java.util.Set access$000(com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace)>($r30);

        interfaceinvoke $r31.<java.util.Set: boolean add(java.lang.Object)>(r0);

        $r32 = interfaceinvoke r0.<com.sun.xml.bind.v2.model.core.ClassInfo: javax.xml.namespace.QName getTypeName()>();

        staticinvoke <com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace: void access$100(com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace,javax.xml.namespace.QName)>($r30, $r32);

        $r33 = interfaceinvoke r0.<com.sun.xml.bind.v2.model.core.ClassInfo: javax.xml.namespace.QName getElementName()>();

        virtualinvoke r2.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator: void add(javax.xml.namespace.QName,boolean,com.sun.xml.bind.v2.model.core.NonElement)>($r33, 0, r0);

     label03:
        $r5 = interfaceinvoke r0.<com.sun.xml.bind.v2.model.core.ClassInfo: javax.xml.namespace.QName getTypeName()>();

        if $r5 == null goto label04;

        r35 = virtualinvoke $r5.<javax.xml.namespace.QName: java.lang.String getNamespaceURI()>();

        goto label05;

     label04:
        if r35 != null goto label05;

        return;

     label05:
        $r6 = specialinvoke r2.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator: com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace getNamespace(java.lang.String)>(r35);

        $r7 = staticinvoke <com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace: java.util.Set access$000(com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace)>($r6);

        interfaceinvoke $r7.<java.util.Set: boolean add(java.lang.Object)>(r0);

        $r8 = interfaceinvoke r0.<com.sun.xml.bind.v2.model.core.ClassInfo: java.util.List getProperties()>();

        $r9 = interfaceinvoke $r8.<java.util.List: java.util.Iterator iterator()>();

     label06:
        $z6 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z6 == 0 goto label13;

        $r12 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        r13 = (com.sun.xml.bind.v2.model.core.PropertyInfo) $r12;

        staticinvoke <com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace: void access$200(com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace,com.sun.xml.bind.v2.model.core.PropertyInfo,int)>($r6, r13, 1);

        $z2 = r13 instanceof com.sun.xml.bind.v2.model.core.AttributePropertyInfo;

        if $z2 == 0 goto label07;

        r36 = (com.sun.xml.bind.v2.model.core.AttributePropertyInfo) r13;

        $r24 = interfaceinvoke r36.<com.sun.xml.bind.v2.model.core.AttributePropertyInfo: javax.xml.namespace.QName getXmlName()>();

        $r25 = virtualinvoke $r24.<javax.xml.namespace.QName: java.lang.String getNamespaceURI()>();

        $i1 = virtualinvoke $r25.<java.lang.String: int length()>();

        if $i1 <= 0 goto label07;

        $r26 = specialinvoke r2.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator: com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace getNamespace(java.lang.String)>($r25);

        virtualinvoke $r26.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace: void addGlobalAttribute(com.sun.xml.bind.v2.model.core.AttributePropertyInfo)>(r36);

        $r27 = interfaceinvoke r36.<com.sun.xml.bind.v2.model.core.AttributePropertyInfo: javax.xml.namespace.QName getXmlName()>();

        staticinvoke <com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace: void access$100(com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace,javax.xml.namespace.QName)>($r6, $r27);

     label07:
        $z7 = r13 instanceof com.sun.xml.bind.v2.model.core.ElementPropertyInfo;

        if $z7 == 0 goto label10;

        r37 = (com.sun.xml.bind.v2.model.core.ElementPropertyInfo) r13;

        $r15 = interfaceinvoke r37.<com.sun.xml.bind.v2.model.core.ElementPropertyInfo: java.util.List getTypes()>();

        $r16 = interfaceinvoke $r15.<java.util.List: java.util.Iterator iterator()>();

     label08:
        $z4 = interfaceinvoke $r16.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label10;

        $r17 = interfaceinvoke $r16.<java.util.Iterator: java.lang.Object next()>();

        r18 = (com.sun.xml.bind.v2.model.core.TypeRef) $r17;

        $r19 = interfaceinvoke r18.<com.sun.xml.bind.v2.model.core.TypeRef: javax.xml.namespace.QName getTagName()>();

        $r20 = virtualinvoke $r19.<javax.xml.namespace.QName: java.lang.String getNamespaceURI()>();

        $i0 = virtualinvoke $r20.<java.lang.String: int length()>();

        if $i0 <= 0 goto label09;

        $r21 = $r6.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace: java.lang.String uri>;

        $z5 = virtualinvoke $r20.<java.lang.String: boolean equals(java.lang.Object)>($r21);

        if $z5 != 0 goto label09;

        $r22 = specialinvoke r2.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator: com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace getNamespace(java.lang.String)>($r20);

        virtualinvoke $r22.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace: void addGlobalElement(com.sun.xml.bind.v2.model.core.TypeRef)>(r18);

        $r23 = interfaceinvoke r18.<com.sun.xml.bind.v2.model.core.TypeRef: javax.xml.namespace.QName getTagName()>();

        staticinvoke <com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace: void access$100(com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace,javax.xml.namespace.QName)>($r6, $r23);

     label09:
        goto label08;

     label10:
        $z3 = specialinvoke r2.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator: boolean generateSwaRefAdapter(com.sun.xml.bind.v2.model.core.PropertyInfo)>(r13);

        if $z3 == 0 goto label11;

        staticinvoke <com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace: boolean access$302(com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace,boolean)>($r6, 1);

     label11:
        $r14 = interfaceinvoke r13.<com.sun.xml.bind.v2.model.core.PropertyInfo: javax.activation.MimeType getExpectedMimeType()>();

        if $r14 == null goto label12;

        staticinvoke <com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace: boolean access$402(com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace,boolean)>($r6, 1);

     label12:
        goto label06;

     label13:
        $r10 = interfaceinvoke r0.<com.sun.xml.bind.v2.model.core.ClassInfo: com.sun.xml.bind.v2.model.core.ClassInfo getBaseClass()>();

        if $r10 == null goto label14;

        virtualinvoke r2.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator: void add(com.sun.xml.bind.v2.model.core.ClassInfo)>($r10);

        $r11 = interfaceinvoke $r10.<com.sun.xml.bind.v2.model.core.ClassInfo: javax.xml.namespace.QName getTypeName()>();

        staticinvoke <com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace: void access$100(com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace,javax.xml.namespace.QName)>($r6, $r11);

     label14:
        return;
    }

    public void add(com.sun.xml.bind.v2.model.core.ElementInfo)
    {
        java.lang.AssertionError $r18;
        com.sun.xml.bind.v2.model.core.ElementInfo r0, r19;
        java.lang.String $r3, $r10;
        boolean $z0, z1;
        com.sun.xml.bind.v2.model.core.ElementPropertyInfo $r7, $r13;
        com.sun.xml.bind.v2.model.core.NonElement $r12;
        com.sun.xml.bind.v2.schemagen.MultiMap $r9;
        com.sun.xml.bind.v2.model.core.TypeInfoSet $r6, $r14;
        java.lang.'annotation'.Annotation $r8;
        com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator r2;
        java.lang.Object $r16;
        javax.xml.namespace.QName $r1;
        com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace $r4;
        com.sun.xml.bind.v2.model.core.ClassInfo $r5, $r15;
        com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace$ElementWithType $r11;
        javax.xml.bind.'annotation'.XmlElement $r17;

        r2 := @this: com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator;

        r0 := @parameter0: com.sun.xml.bind.v2.model.core.ElementInfo;

        $z0 = <com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if r0 != null goto label1;

        $r18 = new java.lang.AssertionError;

        specialinvoke $r18.<java.lang.AssertionError: void <init>()>();

        throw $r18;

     label1:
        $r1 = interfaceinvoke r0.<com.sun.xml.bind.v2.model.core.ElementInfo: javax.xml.namespace.QName getElementName()>();

        $r3 = virtualinvoke $r1.<javax.xml.namespace.QName: java.lang.String getNamespaceURI()>();

        $r4 = specialinvoke r2.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator: com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace getNamespace(java.lang.String)>($r3);

        $r5 = interfaceinvoke r0.<com.sun.xml.bind.v2.model.core.ElementInfo: com.sun.xml.bind.v2.model.core.ClassInfo getScope()>();

        if $r5 == null goto label2;

        $r14 = r2.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator: com.sun.xml.bind.v2.model.core.TypeInfoSet types>;

        $r15 = interfaceinvoke r0.<com.sun.xml.bind.v2.model.core.ElementInfo: com.sun.xml.bind.v2.model.core.ClassInfo getScope()>();

        $r16 = interfaceinvoke $r15.<com.sun.xml.bind.v2.model.core.ClassInfo: java.lang.Object getClazz()>();

        r19 = interfaceinvoke $r14.<com.sun.xml.bind.v2.model.core.TypeInfoSet: com.sun.xml.bind.v2.model.core.ElementInfo getElementInfo(java.lang.Object,javax.xml.namespace.QName)>($r16, $r1);

        goto label3;

     label2:
        $r6 = r2.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator: com.sun.xml.bind.v2.model.core.TypeInfoSet types>;

        r19 = interfaceinvoke $r6.<com.sun.xml.bind.v2.model.core.TypeInfoSet: com.sun.xml.bind.v2.model.core.ElementInfo getElementInfo(java.lang.Object,javax.xml.namespace.QName)>(null, $r1);

     label3:
        $r7 = interfaceinvoke r19.<com.sun.xml.bind.v2.model.core.ElementInfo: com.sun.xml.bind.v2.model.core.ElementPropertyInfo getProperty()>();

        $r8 = interfaceinvoke $r7.<com.sun.xml.bind.v2.model.core.ElementPropertyInfo: java.lang.'annotation'.Annotation readAnnotation(java.lang.Class)>(class "Ljavax/xml/bind/annotation/XmlElement;");

        $r17 = (javax.xml.bind.'annotation'.XmlElement) $r8;

        if $r17 != null goto label4;

        z1 = 0;

        goto label5;

     label4:
        z1 = interfaceinvoke $r17.<javax.xml.bind.'annotation'.XmlElement: boolean nillable()>();

     label5:
        $r9 = staticinvoke <com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace: com.sun.xml.bind.v2.schemagen.MultiMap access$500(com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace)>($r4);

        $r10 = virtualinvoke $r1.<javax.xml.namespace.QName: java.lang.String getLocalPart()>();

        $r11 = new com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace$ElementWithType;

        virtualinvoke $r4.<java.lang.Object: java.lang.Class getClass()>();

        $r12 = interfaceinvoke r0.<com.sun.xml.bind.v2.model.core.ElementInfo: com.sun.xml.bind.v2.model.core.NonElement getContentType()>();

        specialinvoke $r11.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace$ElementWithType: void <init>(com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace,boolean,com.sun.xml.bind.v2.model.core.NonElement)>($r4, z1, $r12);

        virtualinvoke $r9.<com.sun.xml.bind.v2.schemagen.MultiMap: java.lang.Object put(java.lang.Comparable,java.lang.Object)>($r10, $r11);

        $r13 = interfaceinvoke r0.<com.sun.xml.bind.v2.model.core.ElementInfo: com.sun.xml.bind.v2.model.core.ElementPropertyInfo getProperty()>();

        staticinvoke <com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace: void access$200(com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace,com.sun.xml.bind.v2.model.core.PropertyInfo,int)>($r4, $r13, 1);

        return;
    }

    public void add(com.sun.xml.bind.v2.model.core.EnumLeafInfo)
    {
        java.lang.AssertionError $r13;
        java.lang.String $r8, r14;
        boolean $z0, $z1;
        com.sun.xml.bind.v2.model.core.NonElement $r5;
        java.util.Set $r4, $r10;
        com.sun.xml.bind.v2.model.core.EnumLeafInfo r0;
        com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator r2;
        javax.xml.namespace.QName $r1, $r6, $r7, $r11, $r12;
        com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace $r3, $r9;

        r2 := @this: com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator;

        r0 := @parameter0: com.sun.xml.bind.v2.model.core.EnumLeafInfo;

        $z0 = <com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if r0 != null goto label1;

        $r13 = new java.lang.AssertionError;

        specialinvoke $r13.<java.lang.AssertionError: void <init>()>();

        throw $r13;

     label1:
        r14 = null;

        $z1 = interfaceinvoke r0.<com.sun.xml.bind.v2.model.core.EnumLeafInfo: boolean isElement()>();

        if $z1 == 0 goto label2;

        $r7 = interfaceinvoke r0.<com.sun.xml.bind.v2.model.core.EnumLeafInfo: javax.xml.namespace.QName getElementName()>();

        $r8 = virtualinvoke $r7.<javax.xml.namespace.QName: java.lang.String getNamespaceURI()>();

        r14 = $r8;

        $r9 = specialinvoke r2.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator: com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace getNamespace(java.lang.String)>($r8);

        $r10 = staticinvoke <com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace: java.util.Set access$600(com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace)>($r9);

        interfaceinvoke $r10.<java.util.Set: boolean add(java.lang.Object)>(r0);

        $r11 = interfaceinvoke r0.<com.sun.xml.bind.v2.model.core.EnumLeafInfo: javax.xml.namespace.QName getTypeName()>();

        staticinvoke <com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace: void access$100(com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace,javax.xml.namespace.QName)>($r9, $r11);

        $r12 = interfaceinvoke r0.<com.sun.xml.bind.v2.model.core.EnumLeafInfo: javax.xml.namespace.QName getElementName()>();

        virtualinvoke r2.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator: void add(javax.xml.namespace.QName,boolean,com.sun.xml.bind.v2.model.core.NonElement)>($r12, 0, r0);

     label2:
        $r1 = interfaceinvoke r0.<com.sun.xml.bind.v2.model.core.EnumLeafInfo: javax.xml.namespace.QName getTypeName()>();

        if $r1 == null goto label3;

        r14 = virtualinvoke $r1.<javax.xml.namespace.QName: java.lang.String getNamespaceURI()>();

        goto label4;

     label3:
        if r14 != null goto label4;

        return;

     label4:
        $r3 = specialinvoke r2.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator: com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace getNamespace(java.lang.String)>(r14);

        $r4 = staticinvoke <com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace: java.util.Set access$600(com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace)>($r3);

        interfaceinvoke $r4.<java.util.Set: boolean add(java.lang.Object)>(r0);

        $r5 = interfaceinvoke r0.<com.sun.xml.bind.v2.model.core.EnumLeafInfo: com.sun.xml.bind.v2.model.core.NonElement getBaseType()>();

        $r6 = interfaceinvoke $r5.<com.sun.xml.bind.v2.model.core.NonElement: javax.xml.namespace.QName getTypeName()>();

        staticinvoke <com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace: void access$100(com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace,javax.xml.namespace.QName)>($r3, $r6);

        return;
    }

    public void add(com.sun.xml.bind.v2.model.core.ArrayInfo)
    {
        com.sun.xml.bind.v2.model.core.ArrayInfo r0;
        com.sun.xml.bind.v2.model.core.NonElement $r6;
        java.util.Set $r5;
        java.lang.AssertionError $r8;
        com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator r3;
        javax.xml.namespace.QName $r1, $r7;
        java.lang.String $r2;
        boolean $z0;
        com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace $r4;

        r3 := @this: com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator;

        r0 := @parameter0: com.sun.xml.bind.v2.model.core.ArrayInfo;

        $z0 = <com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if r0 != null goto label1;

        $r8 = new java.lang.AssertionError;

        specialinvoke $r8.<java.lang.AssertionError: void <init>()>();

        throw $r8;

     label1:
        $r1 = interfaceinvoke r0.<com.sun.xml.bind.v2.model.core.ArrayInfo: javax.xml.namespace.QName getTypeName()>();

        $r2 = virtualinvoke $r1.<javax.xml.namespace.QName: java.lang.String getNamespaceURI()>();

        $r4 = specialinvoke r3.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator: com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace getNamespace(java.lang.String)>($r2);

        $r5 = staticinvoke <com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace: java.util.Set access$700(com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace)>($r4);

        interfaceinvoke $r5.<java.util.Set: boolean add(java.lang.Object)>(r0);

        $r6 = interfaceinvoke r0.<com.sun.xml.bind.v2.model.core.ArrayInfo: com.sun.xml.bind.v2.model.core.NonElement getItemType()>();

        $r7 = interfaceinvoke $r6.<com.sun.xml.bind.v2.model.core.NonElement: javax.xml.namespace.QName getTypeName()>();

        staticinvoke <com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace: void access$100(com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace,javax.xml.namespace.QName)>($r4, $r7);

        return;
    }

    public void add(javax.xml.namespace.QName, boolean, com.sun.xml.bind.v2.model.core.NonElement)
    {
        com.sun.xml.bind.v2.model.core.NonElement r0;
        com.sun.xml.bind.v2.schemagen.MultiMap $r5;
        com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator r1;
        java.lang.Object $r9, $r11;
        javax.xml.namespace.QName r2, $r8;
        java.lang.String $r3, $r6;
        com.sun.xml.bind.v2.model.nav.Navigator $r10;
        com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace $r4;
        com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace$ElementWithType $r7;
        boolean z0;

        r1 := @this: com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator;

        r2 := @parameter0: javax.xml.namespace.QName;

        z0 := @parameter1: boolean;

        r0 := @parameter2: com.sun.xml.bind.v2.model.core.NonElement;

        if r0 == null goto label1;

        $r9 = interfaceinvoke r0.<com.sun.xml.bind.v2.model.core.NonElement: java.lang.Object getType()>();

        $r10 = r1.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator: com.sun.xml.bind.v2.model.nav.Navigator navigator>;

        $r11 = interfaceinvoke $r10.<com.sun.xml.bind.v2.model.nav.Navigator: java.lang.Object ref(java.lang.Class)>(class "Lcom/sun/xml/bind/api/CompositeStructure;");

        if $r9 != $r11 goto label1;

        return;

     label1:
        $r3 = virtualinvoke r2.<javax.xml.namespace.QName: java.lang.String getNamespaceURI()>();

        $r4 = specialinvoke r1.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator: com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace getNamespace(java.lang.String)>($r3);

        $r5 = staticinvoke <com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace: com.sun.xml.bind.v2.schemagen.MultiMap access$500(com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace)>($r4);

        $r6 = virtualinvoke r2.<javax.xml.namespace.QName: java.lang.String getLocalPart()>();

        $r7 = new com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace$ElementWithType;

        virtualinvoke $r4.<java.lang.Object: java.lang.Class getClass()>();

        specialinvoke $r7.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace$ElementWithType: void <init>(com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace,boolean,com.sun.xml.bind.v2.model.core.NonElement)>($r4, z0, r0);

        virtualinvoke $r5.<com.sun.xml.bind.v2.schemagen.MultiMap: java.lang.Object put(java.lang.Comparable,java.lang.Object)>($r6, $r7);

        if r0 == null goto label2;

        $r8 = interfaceinvoke r0.<com.sun.xml.bind.v2.model.core.NonElement: javax.xml.namespace.QName getTypeName()>();

        staticinvoke <com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace: void access$100(com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace,javax.xml.namespace.QName)>($r4, $r8);

     label2:
        return;
    }

    public void writeEpisodeFile(com.sun.xml.txw2.output.XmlSerializer)
    {
        java.util.Map $r4, $r5;
        java.util.Set $r6, $r20, $r24;
        com.sun.xml.bind.v2.model.core.EnumLeafInfo r68;
        java.lang.StringBuilder $r13, $r14, $r15, $r29, $r30, $r31, $r34, $r47, $r48, $r51, $r56, $r57, $r58, $r61;
        javax.xml.namespace.QName $r27, $r32, $r41, $r42, $r44, $r49, $r59;
        com.sun.xml.txw2.TypedXmlWriter $r1;
        java.lang.String r12, $r16, $r33, $r35, $r39, $r43, $r45, $r50, $r52, $r54, $r60, $r62, $r64, r65, $r66, r69, r70, r71;
        java.util.Map$Entry r9;
        com.sun.xml.bind.v2.schemagen.episode.SchemaBindings $r17;
        com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator r3;
        com.sun.xml.bind.v2.model.nav.Navigator $r37;
        com.sun.xml.bind.v2.schemagen.episode.Bindings r2, $r10, $r28, $r46, $r55;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        com.sun.xml.bind.v2.model.core.ClassInfo r67;
        com.sun.xml.txw2.output.XmlSerializer r0;
        java.util.Iterator $r7, $r21, $r25;
        com.sun.xml.bind.v2.schemagen.episode.Klass $r36, $r53, $r63;
        java.lang.Object $r8, $r11, $r18, $r22, $r26, $r38, $r40;
        com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace $r19, $r23;

        r3 := @this: com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator;

        r0 := @parameter0: com.sun.xml.txw2.output.XmlSerializer;

        $r1 = staticinvoke <com.sun.xml.txw2.TXW: com.sun.xml.txw2.TypedXmlWriter create(java.lang.Class,com.sun.xml.txw2.output.XmlSerializer)>(class "Lcom/sun/xml/bind/v2/schemagen/episode/Bindings;", r0);

        r2 = (com.sun.xml.bind.v2.schemagen.episode.Bindings) $r1;

        $r4 = r3.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator: java.util.Map namespaces>;

        $z0 = interfaceinvoke $r4.<java.util.Map: boolean containsKey(java.lang.Object)>("");

        if $z0 == 0 goto label01;

        interfaceinvoke r2.<com.sun.xml.bind.v2.schemagen.episode.Bindings: void _namespace(java.lang.String,java.lang.String)>("http://java.sun.com/xml/ns/jaxb", "jaxb");

     label01:
        interfaceinvoke r2.<com.sun.xml.bind.v2.schemagen.episode.Bindings: void version(java.lang.String)>("2.1");

        $r5 = r3.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator: java.util.Map namespaces>;

        $r6 = interfaceinvoke $r5.<java.util.Map: java.util.Set entrySet()>();

        $r7 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();

     label02:
        $z6 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z6 == 0 goto label15;

        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r9 = (java.util.Map$Entry) $r8;

        $r10 = interfaceinvoke r2.<com.sun.xml.bind.v2.schemagen.episode.Bindings: com.sun.xml.bind.v2.schemagen.episode.Bindings bindings()>();

        $r11 = interfaceinvoke r9.<java.util.Map$Entry: java.lang.Object getKey()>();

        r12 = (java.lang.String) $r11;

        $z1 = virtualinvoke r12.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z1 != 0 goto label03;

        interfaceinvoke $r10.<com.sun.xml.bind.v2.schemagen.episode.Bindings: void _namespace(java.lang.String,java.lang.String)>(r12, "tns");

        r65 = "tns:";

        r71 = "tns:";

        r70 = "tns:";

        r69 = "tns:";

        goto label04;

     label03:
        r65 = "";

        r71 = "";

        r70 = "";

        r69 = "";

     label04:
        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("x-schema::");

        $z2 = virtualinvoke r12.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z2 == 0 goto label05;

        $r66 = "";

        goto label06;

     label05:
        $r66 = "tns";

     label06:
        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r66);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r10.<com.sun.xml.bind.v2.schemagen.episode.Bindings: void scd(java.lang.String)>($r16);

        $r17 = interfaceinvoke $r10.<com.sun.xml.bind.v2.schemagen.episode.Bindings: com.sun.xml.bind.v2.schemagen.episode.SchemaBindings schemaBindings()>();

        interfaceinvoke $r17.<com.sun.xml.bind.v2.schemagen.episode.SchemaBindings: void map(boolean)>(0);

        $r18 = interfaceinvoke r9.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r19 = (com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace) $r18;

        $r20 = staticinvoke <com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace: java.util.Set access$000(com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace)>($r19);

        $r21 = interfaceinvoke $r20.<java.util.Set: java.util.Iterator iterator()>();

     label07:
        $z7 = interfaceinvoke $r21.<java.util.Iterator: boolean hasNext()>();

        if $z7 == 0 goto label11;

        $r40 = interfaceinvoke $r21.<java.util.Iterator: java.lang.Object next()>();

        r67 = (com.sun.xml.bind.v2.model.core.ClassInfo) $r40;

        $r41 = interfaceinvoke r67.<com.sun.xml.bind.v2.model.core.ClassInfo: javax.xml.namespace.QName getTypeName()>();

        if $r41 != null goto label08;

        goto label07;

     label08:
        $r42 = interfaceinvoke r67.<com.sun.xml.bind.v2.model.core.ClassInfo: javax.xml.namespace.QName getTypeName()>();

        $r43 = virtualinvoke $r42.<javax.xml.namespace.QName: java.lang.String getNamespaceURI()>();

        $z3 = virtualinvoke $r43.<java.lang.String: boolean equals(java.lang.Object)>(r12);

        if $z3 == 0 goto label09;

        $r55 = interfaceinvoke $r10.<com.sun.xml.bind.v2.schemagen.episode.Bindings: com.sun.xml.bind.v2.schemagen.episode.Bindings bindings()>();

        $r56 = new java.lang.StringBuilder;

        specialinvoke $r56.<java.lang.StringBuilder: void <init>()>();

        $r57 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(126);

        $r58 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r70);

        $r59 = interfaceinvoke r67.<com.sun.xml.bind.v2.model.core.ClassInfo: javax.xml.namespace.QName getTypeName()>();

        $r60 = virtualinvoke $r59.<javax.xml.namespace.QName: java.lang.String getLocalPart()>();

        $r61 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r60);

        $r62 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r55.<com.sun.xml.bind.v2.schemagen.episode.Bindings: void scd(java.lang.String)>($r62);

        $r63 = interfaceinvoke $r55.<com.sun.xml.bind.v2.schemagen.episode.Bindings: com.sun.xml.bind.v2.schemagen.episode.Klass klass()>();

        $r64 = interfaceinvoke r67.<com.sun.xml.bind.v2.model.core.ClassInfo: java.lang.String getName()>();

        interfaceinvoke $r63.<com.sun.xml.bind.v2.schemagen.episode.Klass: void ref(java.lang.String)>($r64);

     label09:
        $z4 = interfaceinvoke r67.<com.sun.xml.bind.v2.model.core.ClassInfo: boolean isElement()>();

        if $z4 == 0 goto label10;

        $r44 = interfaceinvoke r67.<com.sun.xml.bind.v2.model.core.ClassInfo: javax.xml.namespace.QName getElementName()>();

        $r45 = virtualinvoke $r44.<javax.xml.namespace.QName: java.lang.String getNamespaceURI()>();

        $z5 = virtualinvoke $r45.<java.lang.String: boolean equals(java.lang.Object)>(r12);

        if $z5 == 0 goto label10;

        $r46 = interfaceinvoke $r10.<com.sun.xml.bind.v2.schemagen.episode.Bindings: com.sun.xml.bind.v2.schemagen.episode.Bindings bindings()>();

        $r47 = new java.lang.StringBuilder;

        specialinvoke $r47.<java.lang.StringBuilder: void <init>()>();

        $r48 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r69);

        $r49 = interfaceinvoke r67.<com.sun.xml.bind.v2.model.core.ClassInfo: javax.xml.namespace.QName getElementName()>();

        $r50 = virtualinvoke $r49.<javax.xml.namespace.QName: java.lang.String getLocalPart()>();

        $r51 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r50);

        $r52 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r46.<com.sun.xml.bind.v2.schemagen.episode.Bindings: void scd(java.lang.String)>($r52);

        $r53 = interfaceinvoke $r46.<com.sun.xml.bind.v2.schemagen.episode.Bindings: com.sun.xml.bind.v2.schemagen.episode.Klass klass()>();

        $r54 = interfaceinvoke r67.<com.sun.xml.bind.v2.model.core.ClassInfo: java.lang.String getName()>();

        interfaceinvoke $r53.<com.sun.xml.bind.v2.schemagen.episode.Klass: void ref(java.lang.String)>($r54);

     label10:
        goto label07;

     label11:
        $r22 = interfaceinvoke r9.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r23 = (com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace) $r22;

        $r24 = staticinvoke <com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace: java.util.Set access$600(com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace)>($r23);

        $r25 = interfaceinvoke $r24.<java.util.Set: java.util.Iterator iterator()>();

     label12:
        $z8 = interfaceinvoke $r25.<java.util.Iterator: boolean hasNext()>();

        if $z8 == 0 goto label14;

        $r26 = interfaceinvoke $r25.<java.util.Iterator: java.lang.Object next()>();

        r68 = (com.sun.xml.bind.v2.model.core.EnumLeafInfo) $r26;

        $r27 = interfaceinvoke r68.<com.sun.xml.bind.v2.model.core.EnumLeafInfo: javax.xml.namespace.QName getTypeName()>();

        if $r27 != null goto label13;

        goto label12;

     label13:
        $r28 = interfaceinvoke $r10.<com.sun.xml.bind.v2.schemagen.episode.Bindings: com.sun.xml.bind.v2.schemagen.episode.Bindings bindings()>();

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(126);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r71);

        $r32 = interfaceinvoke r68.<com.sun.xml.bind.v2.model.core.EnumLeafInfo: javax.xml.namespace.QName getTypeName()>();

        $r33 = virtualinvoke $r32.<javax.xml.namespace.QName: java.lang.String getLocalPart()>();

        $r34 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r33);

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r28.<com.sun.xml.bind.v2.schemagen.episode.Bindings: void scd(java.lang.String)>($r35);

        $r36 = interfaceinvoke $r28.<com.sun.xml.bind.v2.schemagen.episode.Bindings: com.sun.xml.bind.v2.schemagen.episode.Klass klass()>();

        $r37 = r3.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator: com.sun.xml.bind.v2.model.nav.Navigator navigator>;

        $r38 = interfaceinvoke r68.<com.sun.xml.bind.v2.model.core.EnumLeafInfo: java.lang.Object getClazz()>();

        $r39 = interfaceinvoke $r37.<com.sun.xml.bind.v2.model.nav.Navigator: java.lang.String getClassName(java.lang.Object)>($r38);

        interfaceinvoke $r36.<com.sun.xml.bind.v2.schemagen.episode.Klass: void ref(java.lang.String)>($r39);

        goto label12;

     label14:
        interfaceinvoke $r10.<com.sun.xml.bind.v2.schemagen.episode.Bindings: void commit(boolean)>(1);

        goto label02;

     label15:
        interfaceinvoke r2.<com.sun.xml.bind.v2.schemagen.episode.Bindings: void commit()>();

        return;
    }

    public void write(javax.xml.bind.SchemaOutputResolver, com.sun.xml.bind.api.ErrorListener) throws java.io.IOException
    {
        com.sun.xml.bind.v2.util.StackRecorder $r41;
        com.sun.xml.bind.api.ErrorListener r4;
        javax.xml.transform.stream.StreamResult $r19, $r21;
        javax.xml.transform.Result $r32, r47;
        com.sun.xml.bind.v2.schemagen.FoolProofResolver $r2;
        java.util.Map $r6, $r9, $r10;
        boolean $z0, $z1, $z2, $z3;
        java.util.Collection $r11;
        java.util.Set $r13;
        java.util.logging.Logger $r1, $r35;
        javax.xml.bind.SchemaOutputResolver r43;
        java.io.Writer $r22;
        java.lang.StringBuilder $r26, $r28, $r29, $r30, $r34, $r37, $r39;
        java.util.HashMap $r7, $r8;
        java.util.logging.Level $r0, $r36;
        int $i0, $i1;
        java.lang.String $r24, $r27, $r31, $r33, $r38, $r40, r45;
        java.io.OutputStream $r20;
        java.util.Map$Entry r46;
        java.util.Iterator $r12, $r14;
        java.lang.IllegalArgumentException $r42;
        com.sun.xml.bind.v2.model.core.TypeInfoSet $r5;
        com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator r3;
        java.lang.Object $r15, $r16, $r17, $r23, $r25;
        com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace $r18, r44;

        r3 := @this: com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator;

        r43 := @parameter0: javax.xml.bind.SchemaOutputResolver;

        r4 := @parameter1: com.sun.xml.bind.api.ErrorListener;

        if r43 != null goto label01;

        $r42 = new java.lang.IllegalArgumentException;

        specialinvoke $r42.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r42;

     label01:
        $r1 = <com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator: java.util.logging.Logger logger>;

        $r0 = <java.util.logging.Level: java.util.logging.Level FINE>;

        $z0 = virtualinvoke $r1.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>($r0);

        if $z0 == 0 goto label02;

        $r35 = <com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator: java.util.logging.Logger logger>;

        $r36 = <java.util.logging.Level: java.util.logging.Level FINE>;

        $r34 = new java.lang.StringBuilder;

        specialinvoke $r34.<java.lang.StringBuilder: void <init>()>();

        $r37 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Wrigin XML Schema for ");

        $r38 = virtualinvoke r3.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator: java.lang.String toString()>();

        $r39 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r38);

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.String toString()>();

        $r41 = new com.sun.xml.bind.v2.util.StackRecorder;

        specialinvoke $r41.<com.sun.xml.bind.v2.util.StackRecorder: void <init>()>();

        virtualinvoke $r35.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r36, $r40, $r41);

     label02:
        $r2 = new com.sun.xml.bind.v2.schemagen.FoolProofResolver;

        specialinvoke $r2.<com.sun.xml.bind.v2.schemagen.FoolProofResolver: void <init>(javax.xml.bind.SchemaOutputResolver)>(r43);

        r3.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator: com.sun.xml.bind.api.ErrorListener errorListener> = r4;

        $r5 = r3.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator: com.sun.xml.bind.v2.model.core.TypeInfoSet types>;

        $r6 = interfaceinvoke $r5.<com.sun.xml.bind.v2.model.core.TypeInfoSet: java.util.Map getSchemaLocations()>();

        $r7 = new java.util.HashMap;

        specialinvoke $r7.<java.util.HashMap: void <init>()>();

        $r8 = new java.util.HashMap;

        specialinvoke $r8.<java.util.HashMap: void <init>()>();

        $r9 = r3.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator: java.util.Map namespaces>;

        interfaceinvoke $r9.<java.util.Map: java.lang.Object remove(java.lang.Object)>("http://www.w3.org/2001/XMLSchema");

        $r10 = r3.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator: java.util.Map namespaces>;

        $r11 = interfaceinvoke $r10.<java.util.Map: java.util.Collection values()>();

        $r12 = interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>();

     label03:
        $z3 = interfaceinvoke $r12.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label06;

        $r23 = interfaceinvoke $r12.<java.util.Iterator: java.lang.Object next()>();

        r44 = (com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace) $r23;

        $r24 = r44.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace: java.lang.String uri>;

        $r25 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>($r24);

        r45 = (java.lang.String) $r25;

        if r45 == null goto label04;

        interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r44, r45);

        goto label05;

     label04:
        $r27 = r44.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace: java.lang.String uri>;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $r28 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("schema");

        $i0 = interfaceinvoke $r7.<java.util.Map: int size()>();

        $i1 = $i0 + 1;

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".xsd");

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        $r32 = virtualinvoke $r2.<javax.xml.bind.SchemaOutputResolver: javax.xml.transform.Result createOutput(java.lang.String,java.lang.String)>($r27, $r31);

        if $r32 == null goto label05;

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r44, $r32);

        $r33 = interfaceinvoke $r32.<javax.xml.transform.Result: java.lang.String getSystemId()>();

        interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r44, $r33);

     label05:
        goto label03;

     label06:
        $r13 = interfaceinvoke $r7.<java.util.Map: java.util.Set entrySet()>();

        $r14 = interfaceinvoke $r13.<java.util.Set: java.util.Iterator iterator()>();

     label07:
        $z1 = interfaceinvoke $r14.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label10;

        $r15 = interfaceinvoke $r14.<java.util.Iterator: java.lang.Object next()>();

        r46 = (java.util.Map$Entry) $r15;

        $r16 = interfaceinvoke r46.<java.util.Map$Entry: java.lang.Object getValue()>();

        r47 = (javax.xml.transform.Result) $r16;

        $r17 = interfaceinvoke r46.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r18 = (com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace) $r17;

        staticinvoke <com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace: void access$800(com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace,javax.xml.transform.Result,java.util.Map)>($r18, r47, $r8);

        $z2 = r47 instanceof javax.xml.transform.stream.StreamResult;

        if $z2 == 0 goto label09;

        $r19 = (javax.xml.transform.stream.StreamResult) r47;

        $r20 = virtualinvoke $r19.<javax.xml.transform.stream.StreamResult: java.io.OutputStream getOutputStream()>();

        if $r20 == null goto label08;

        virtualinvoke $r20.<java.io.OutputStream: void close()>();

        goto label09;

     label08:
        $r21 = (javax.xml.transform.stream.StreamResult) r47;

        $r22 = virtualinvoke $r21.<javax.xml.transform.stream.StreamResult: java.io.Writer getWriter()>();

        if $r22 == null goto label09;

        virtualinvoke $r22.<java.io.Writer: void close()>();

     label09:
        goto label07;

     label10:
        return;
    }

    private boolean generateSwaRefAdapter(com.sun.xml.bind.v2.model.core.NonElementRef)
    {
        com.sun.xml.bind.v2.model.core.PropertyInfo $r2;
        com.sun.xml.bind.v2.model.core.NonElementRef r1;
        com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator r0;
        boolean $z0;

        r0 := @this: com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator;

        r1 := @parameter0: com.sun.xml.bind.v2.model.core.NonElementRef;

        $r2 = interfaceinvoke r1.<com.sun.xml.bind.v2.model.core.NonElementRef: com.sun.xml.bind.v2.model.core.PropertyInfo getSource()>();

        $z0 = specialinvoke r0.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator: boolean generateSwaRefAdapter(com.sun.xml.bind.v2.model.core.PropertyInfo)>($r2);

        return $z0;
    }

    private boolean generateSwaRefAdapter(com.sun.xml.bind.v2.model.core.PropertyInfo)
    {
        com.sun.xml.bind.v2.model.core.PropertyInfo r0;
        com.sun.xml.bind.v2.model.core.Adapter $r1;
        com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator r2;
        java.lang.Object $r4, $r5;
        com.sun.xml.bind.v2.model.nav.Navigator $r3;
        boolean $z0;

        r2 := @this: com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator;

        r0 := @parameter0: com.sun.xml.bind.v2.model.core.PropertyInfo;

        $r1 = interfaceinvoke r0.<com.sun.xml.bind.v2.model.core.PropertyInfo: com.sun.xml.bind.v2.model.core.Adapter getAdapter()>();

        if $r1 != null goto label1;

        return 0;

     label1:
        $r3 = r2.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator: com.sun.xml.bind.v2.model.nav.Navigator navigator>;

        $r4 = interfaceinvoke $r3.<com.sun.xml.bind.v2.model.nav.Navigator: java.lang.Object asDecl(java.lang.Class)>(class "Lcom/sun/xml/bind/v2/runtime/SwaRefAdapter;");

        if $r4 != null goto label2;

        return 0;

     label2:
        $r5 = $r1.<com.sun.xml.bind.v2.model.core.Adapter: java.lang.Object adapterType>;

        $z0 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>($r5);

        return $z0;
    }

    public java.lang.String toString()
    {
        java.util.Map $r2;
        int $i0;
        java.lang.String $r6, $r11, $r14;
        boolean $z0;
        java.util.Iterator $r4;
        java.util.Collection $r3;
        java.lang.StringBuilder $r0, $r5, $r7, $r8, $r9, $r10, $r15, $r16;
        com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator r1;
        java.lang.Object $r12;
        com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace r13;

        r1 := @this: com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = r1.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator: java.util.Map namespaces>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Collection values()>();

        $r4 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r12 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r13 = (com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace) $r12;

        $i0 = virtualinvoke $r0.<java.lang.StringBuilder: int length()>();

        if $i0 <= 0 goto label2;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44);

     label2:
        $r14 = r13.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace: java.lang.String uri>;

        $r15 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(61);

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r13);

        goto label1;

     label3:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = specialinvoke r1.<java.lang.Object: java.lang.String toString()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(91);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(93);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r11;
    }

    private static java.lang.String getProcessContentsModeName(com.sun.xml.bind.v2.model.core.WildcardMode)
    {
        java.lang.IllegalStateException $r4;
        int[] $r1;
        int $i0, $i1;
        com.sun.xml.bind.v2.model.core.WildcardMode r0;
        java.lang.String $r2, $r3;

        r0 := @parameter0: com.sun.xml.bind.v2.model.core.WildcardMode;

        $r1 = <com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$2: int[] $SwitchMap$com$sun$xml$bind$v2$model$core$WildcardMode>;

        $i0 = virtualinvoke r0.<com.sun.xml.bind.v2.model.core.WildcardMode: int ordinal()>();

        $i1 = $r1[$i0];

        tableswitch($i1)
        {
            case 1: goto label1;
            case 2: goto label1;
            case 3: goto label2;
            default: goto label3;
        };

     label1:
        $r2 = virtualinvoke r0.<com.sun.xml.bind.v2.model.core.WildcardMode: java.lang.String name()>();

        $r3 = virtualinvoke $r2.<java.lang.String: java.lang.String toLowerCase()>();

        return $r3;

     label2:
        return null;

     label3:
        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>()>();

        throw $r4;
    }

    protected static java.lang.String relativize(java.lang.String, java.lang.String)
    {
        java.net.URISyntaxException $r24;
        java.lang.InternalError $r25;
        java.net.URI $r1, $r4;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        java.lang.StringBuilder $r15, $r19, $r21, $r26, $r27, $r28, $r29, $r30;
        java.lang.AssertionError $r23;
        java.lang.String r0, r2, $r3, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r16, $r17, $r18, $r20, $r22, $r31, r32;

        r2 := @parameter0: java.lang.String;

        r0 := @parameter1: java.lang.String;

     label01:
        $z0 = <com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator: boolean $assertionsDisabled>;

        if $z0 != 0 goto label02;

        if r2 != null goto label02;

        $r23 = new java.lang.AssertionError;

        specialinvoke $r23.<java.lang.AssertionError: void <init>()>();

        throw $r23;

     label02:
        if r0 != null goto label04;

     label03:
        return r2;

     label04:
        $r1 = new java.net.URI;

        $r3 = staticinvoke <com.sun.xml.bind.v2.schemagen.Util: java.lang.String escapeURI(java.lang.String)>(r2);

        specialinvoke $r1.<java.net.URI: void <init>(java.lang.String)>($r3);

        $r4 = new java.net.URI;

        $r5 = staticinvoke <com.sun.xml.bind.v2.schemagen.Util: java.lang.String escapeURI(java.lang.String)>(r0);

        specialinvoke $r4.<java.net.URI: void <init>(java.lang.String)>($r5);

        $z1 = virtualinvoke $r1.<java.net.URI: boolean isOpaque()>();

        if $z1 != 0 goto label05;

        $z2 = virtualinvoke $r4.<java.net.URI: boolean isOpaque()>();

        if $z2 == 0 goto label06;

     label05:
        return r2;

     label06:
        $r6 = virtualinvoke $r1.<java.net.URI: java.lang.String getScheme()>();

        $r7 = virtualinvoke $r4.<java.net.URI: java.lang.String getScheme()>();

        $z3 = staticinvoke <com.sun.xml.bind.v2.schemagen.Util: boolean equalsIgnoreCase(java.lang.String,java.lang.String)>($r6, $r7);

        if $z3 == 0 goto label07;

        $r8 = virtualinvoke $r1.<java.net.URI: java.lang.String getAuthority()>();

        $r9 = virtualinvoke $r4.<java.net.URI: java.lang.String getAuthority()>();

        $z4 = staticinvoke <com.sun.xml.bind.v2.schemagen.Util: boolean equal(java.lang.String,java.lang.String)>($r8, $r9);

        if $z4 != 0 goto label08;

     label07:
        return r2;

     label08:
        $r10 = virtualinvoke $r1.<java.net.URI: java.lang.String getPath()>();

        $r11 = virtualinvoke $r4.<java.net.URI: java.lang.String getPath()>();

        r32 = $r11;

        $z5 = virtualinvoke $r11.<java.lang.String: boolean endsWith(java.lang.String)>("/");

        if $z5 != 0 goto label09;

        r32 = staticinvoke <com.sun.xml.bind.v2.schemagen.Util: java.lang.String normalizeUriPath(java.lang.String)>($r11);

     label09:
        $z6 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>(r32);

        if $z6 == 0 goto label11;

     label10:
        return ".";

     label11:
        $r12 = virtualinvoke $r1.<java.net.URI: java.lang.String getScheme()>();

        $r13 = staticinvoke <com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator: java.lang.String fixNull(java.lang.String)>($r12);

        $z7 = virtualinvoke $r13.<java.lang.String: boolean equals(java.lang.Object)>("file");

        $r14 = staticinvoke <com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator: java.lang.String calculateRelativePath(java.lang.String,java.lang.String,boolean)>($r10, r32, $z7);

        if $r14 != null goto label13;

     label12:
        return r2;

     label13:
        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r1.<java.net.URI: java.lang.String getQuery()>();

        if $r16 == null goto label14;

        $r21 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(63);

        $r22 = virtualinvoke $r1.<java.net.URI: java.lang.String getQuery()>();

        virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22);

     label14:
        $r17 = virtualinvoke $r1.<java.net.URI: java.lang.String getFragment()>();

        if $r17 == null goto label15;

        $r19 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(35);

        $r20 = virtualinvoke $r1.<java.net.URI: java.lang.String getFragment()>();

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

     label15:
        $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

     label16:
        return $r18;

     label17:
        $r24 := @caughtexception;

        $r25 = new java.lang.InternalError;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error escaping one of these uris:\n\t");

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n\t");

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r25.<java.lang.InternalError: void <init>(java.lang.String)>($r31);

        throw $r25;

        catch java.net.URISyntaxException from label01 to label03 with label17;
        catch java.net.URISyntaxException from label04 to label05 with label17;
        catch java.net.URISyntaxException from label06 to label07 with label17;
        catch java.net.URISyntaxException from label08 to label10 with label17;
        catch java.net.URISyntaxException from label11 to label12 with label17;
        catch java.net.URISyntaxException from label13 to label16 with label17;
    }

    private static java.lang.String fixNull(java.lang.String)
    {
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return "";

     label1:
        return r0;
    }

    private static java.lang.String calculateRelativePath(java.lang.String, java.lang.String, boolean)
    {
        int $i1, $i2;
        java.lang.String r0, r1, $r4, $r5, $r7, $r8;
        boolean z0, $z1, $z2, $z3;
        char $c0;
        java.lang.StringBuilder $r3, $r6, $r9;

        r1 := @parameter0: java.lang.String;

        r0 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        $c0 = <java.io.File: char pathSeparatorChar>;

        $i2 = (int) $c0;

        if $i2 != 59 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        if r0 != null goto label3;

        return null;

     label3:
        if z0 == 0 goto label4;

        if $z2 == 0 goto label4;

        $z1 = staticinvoke <com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator: boolean startsWithIgnoreCase(java.lang.String,java.lang.String)>(r1, r0);

        if $z1 != 0 goto label5;

     label4:
        $z3 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>(r0);

        if $z3 == 0 goto label6;

     label5:
        $i1 = virtualinvoke r0.<java.lang.String: int length()>();

        $r8 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int)>($i1);

        return $r8;

     label6:
        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("../");

        $r4 = staticinvoke <com.sun.xml.bind.v2.schemagen.Util: java.lang.String getParentUriPath(java.lang.String)>(r0);

        $r5 = staticinvoke <com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator: java.lang.String calculateRelativePath(java.lang.String,java.lang.String,boolean)>(r1, $r4, z0);

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;
    }

    private static boolean startsWithIgnoreCase(java.lang.String, java.lang.String)
    {
        java.lang.String r0, $r1, r2, $r3;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String toUpperCase()>();

        $r3 = virtualinvoke r2.<java.lang.String: java.lang.String toUpperCase()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean startsWith(java.lang.String)>($r3);

        return $z0;
    }

    static com.sun.xml.bind.v2.model.core.NonElement access$900(com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator)
    {
        com.sun.xml.bind.v2.model.core.NonElement $r1;
        com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator r0;

        r0 := @parameter0: com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator;

        $r1 = r0.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator: com.sun.xml.bind.v2.model.core.NonElement anyType>;

        return $r1;
    }

    static java.util.Map access$1000(com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator)
    {
        com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator r0;
        java.util.Map $r1;

        r0 := @parameter0: com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator;

        $r1 = r0.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator: java.util.Map namespaces>;

        return $r1;
    }

    static com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace access$1100(com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator, java.lang.String)
    {
        com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator r0;
        java.lang.String r1;
        com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace $r2;

        r0 := @parameter0: com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator;

        r1 := @parameter1: java.lang.String;

        $r2 = specialinvoke r0.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator: com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace getNamespace(java.lang.String)>(r1);

        return $r2;
    }

    static com.sun.xml.bind.v2.model.core.TypeInfoSet access$1200(com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator)
    {
        com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator r0;
        com.sun.xml.bind.v2.model.core.TypeInfoSet $r1;

        r0 := @parameter0: com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator;

        $r1 = r0.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator: com.sun.xml.bind.v2.model.core.TypeInfoSet types>;

        return $r1;
    }

    static com.sun.xml.bind.v2.model.core.NonElement access$1300(com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator)
    {
        com.sun.xml.bind.v2.model.core.NonElement $r1;
        com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator r0;

        r0 := @parameter0: com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator;

        $r1 = r0.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator: com.sun.xml.bind.v2.model.core.NonElement stringType>;

        return $r1;
    }

    static java.util.logging.Logger access$1400()
    {
        java.util.logging.Logger $r0;

        $r0 = <com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator: java.util.logging.Logger logger>;

        return $r0;
    }

    static boolean access$1500(com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator, com.sun.xml.bind.v2.model.core.NonElementRef)
    {
        com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator r0;
        com.sun.xml.bind.v2.model.core.NonElementRef r1;
        boolean $z0;

        r0 := @parameter0: com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator;

        r1 := @parameter1: com.sun.xml.bind.v2.model.core.NonElementRef;

        $z0 = specialinvoke r0.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator: boolean generateSwaRefAdapter(com.sun.xml.bind.v2.model.core.NonElementRef)>(r1);

        return $z0;
    }

    static com.sun.xml.bind.v2.util.CollisionCheckStack access$1600(com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator)
    {
        com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator r0;
        com.sun.xml.bind.v2.util.CollisionCheckStack $r1;

        r0 := @parameter0: com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator;

        $r1 = r0.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator: com.sun.xml.bind.v2.util.CollisionCheckStack collisionChecker>;

        return $r1;
    }

    static com.sun.xml.bind.api.ErrorListener access$1700(com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator)
    {
        com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator r0;
        com.sun.xml.bind.api.ErrorListener $r1;

        r0 := @parameter0: com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator;

        $r1 = r0.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator: com.sun.xml.bind.api.ErrorListener errorListener>;

        return $r1;
    }

    static java.lang.String access$2200(com.sun.xml.bind.v2.model.core.WildcardMode)
    {
        com.sun.xml.bind.v2.model.core.WildcardMode r0;
        java.lang.String $r1;

        r0 := @parameter0: com.sun.xml.bind.v2.model.core.WildcardMode;

        $r1 = staticinvoke <com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator: java.lang.String getProcessContentsModeName(com.sun.xml.bind.v2.model.core.WildcardMode)>(r0);

        return $r1;
    }

    static void <clinit>()
    {
        com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$1 $r2;
        java.lang.Class $r0;
        java.util.logging.Logger $r1;
        boolean $z0, $z1;

        <com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator: java.lang.String newline> = "\n";

        $r0 = class "Lcom/sun/xml/bind/v2/schemagen/XmlSchemaGenerator;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator: boolean $assertionsDisabled> = $z1;

        $r1 = staticinvoke <com.sun.xml.bind.Util: java.util.logging.Logger getClassLogger()>();

        <com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator: java.util.logging.Logger logger> = $r1;

        $r2 = new com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$1;

        specialinvoke $r2.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$1: void <init>()>();

        <com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator: java.util.Comparator NAMESPACE_COMPARATOR> = $r2;

        return;
    }
}
