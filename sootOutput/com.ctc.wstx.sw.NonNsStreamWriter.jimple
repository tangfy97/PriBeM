public class com.ctc.wstx.sw.NonNsStreamWriter extends com.ctc.wstx.sw.BaseStreamWriter
{
    final com.ctc.wstx.util.StringVector mElements;
    java.util.TreeMap mAttrNames;

    public void <init>(com.ctc.wstx.sw.XmlWriter, java.lang.String, com.ctc.wstx.api.WriterConfig)
    {
        com.ctc.wstx.sw.XmlWriter r1;
        com.ctc.wstx.api.WriterConfig r3;
        com.ctc.wstx.util.StringVector $r4;
        com.ctc.wstx.sw.NonNsStreamWriter r0;
        java.lang.String r2;

        r0 := @this: com.ctc.wstx.sw.NonNsStreamWriter;

        r1 := @parameter0: com.ctc.wstx.sw.XmlWriter;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: com.ctc.wstx.api.WriterConfig;

        specialinvoke r0.<com.ctc.wstx.sw.BaseStreamWriter: void <init>(com.ctc.wstx.sw.XmlWriter,java.lang.String,com.ctc.wstx.api.WriterConfig)>(r1, r2, r3);

        $r4 = new com.ctc.wstx.util.StringVector;

        specialinvoke $r4.<com.ctc.wstx.util.StringVector: void <init>(int)>(32);

        r0.<com.ctc.wstx.sw.NonNsStreamWriter: com.ctc.wstx.util.StringVector mElements> = $r4;

        return;
    }

    public javax.xml.namespace.NamespaceContext getNamespaceContext()
    {
        com.ctc.wstx.util.EmptyNamespaceContext $r0;
        com.ctc.wstx.sw.NonNsStreamWriter r1;

        r1 := @this: com.ctc.wstx.sw.NonNsStreamWriter;

        $r0 = staticinvoke <com.ctc.wstx.util.EmptyNamespaceContext: com.ctc.wstx.util.EmptyNamespaceContext getInstance()>();

        return $r0;
    }

    public java.lang.String getPrefix(java.lang.String)
    {
        java.lang.String r1;
        com.ctc.wstx.sw.NonNsStreamWriter r0;

        r0 := @this: com.ctc.wstx.sw.NonNsStreamWriter;

        r1 := @parameter0: java.lang.String;

        return null;
    }

    public void setDefaultNamespace(java.lang.String) throws javax.xml.stream.XMLStreamException
    {
        java.lang.String r1;
        com.ctc.wstx.sw.NonNsStreamWriter r0;

        r0 := @this: com.ctc.wstx.sw.NonNsStreamWriter;

        r1 := @parameter0: java.lang.String;

        staticinvoke <com.ctc.wstx.sw.NonNsStreamWriter: void reportIllegalArg(java.lang.String)>("Can not set default namespace for non-namespace writer.");

        return;
    }

    public void setNamespaceContext(javax.xml.namespace.NamespaceContext)
    {
        javax.xml.namespace.NamespaceContext r1;
        com.ctc.wstx.sw.NonNsStreamWriter r0;

        r0 := @this: com.ctc.wstx.sw.NonNsStreamWriter;

        r1 := @parameter0: javax.xml.namespace.NamespaceContext;

        staticinvoke <com.ctc.wstx.sw.NonNsStreamWriter: void reportIllegalArg(java.lang.String)>("Can not set NamespaceContext for non-namespace writer.");

        return;
    }

    public void setPrefix(java.lang.String, java.lang.String) throws javax.xml.stream.XMLStreamException
    {
        java.lang.String r1, r2;
        com.ctc.wstx.sw.NonNsStreamWriter r0;

        r0 := @this: com.ctc.wstx.sw.NonNsStreamWriter;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        staticinvoke <com.ctc.wstx.sw.NonNsStreamWriter: void reportIllegalArg(java.lang.String)>("Can not set namespace prefix for non-namespace writer.");

        return;
    }

    public void writeAttribute(java.lang.String, java.lang.String) throws javax.xml.stream.XMLStreamException
    {
        com.ctc.wstx.sw.XmlWriter $r3;
        com.ctc.wstx.sw.NonNsStreamWriter r0;
        java.lang.StringBuffer $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16;
        java.lang.String r1, r2, $r4, $r17, $r20;
        boolean $z0, $z1, $z2;
        java.io.IOException $r21;
        org.codehaus.stax2.validation.XMLValidator $r5, $r22;
        java.util.TreeMap $r6, $r7, $r18, $r19;
        java.lang.Object $r8;

        r0 := @this: com.ctc.wstx.sw.NonNsStreamWriter;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $z0 = r0.<com.ctc.wstx.sw.NonNsStreamWriter: boolean mStartElementOpen>;

        if $z0 != 0 goto label1;

        $z1 = r0.<com.ctc.wstx.sw.NonNsStreamWriter: boolean mCheckStructure>;

        if $z1 == 0 goto label1;

        $r20 = <com.ctc.wstx.cfg.ErrorConsts: java.lang.String WERR_ATTR_NO_ELEM>;

        staticinvoke <com.ctc.wstx.sw.NonNsStreamWriter: void reportNwfStructure(java.lang.String)>($r20);

     label1:
        $z2 = r0.<com.ctc.wstx.sw.NonNsStreamWriter: boolean mCheckAttrs>;

        if $z2 == 0 goto label3;

        $r6 = r0.<com.ctc.wstx.sw.NonNsStreamWriter: java.util.TreeMap mAttrNames>;

        if $r6 != null goto label2;

        $r18 = new java.util.TreeMap;

        specialinvoke $r18.<java.util.TreeMap: void <init>()>();

        r0.<com.ctc.wstx.sw.NonNsStreamWriter: java.util.TreeMap mAttrNames> = $r18;

        $r19 = r0.<com.ctc.wstx.sw.NonNsStreamWriter: java.util.TreeMap mAttrNames>;

        virtualinvoke $r19.<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        goto label3;

     label2:
        $r7 = r0.<com.ctc.wstx.sw.NonNsStreamWriter: java.util.TreeMap mAttrNames>;

        $r8 = virtualinvoke $r7.<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        if $r8 == null goto label3;

        $r9 = new java.lang.StringBuffer;

        specialinvoke $r9.<java.lang.StringBuffer: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Trying to write attribute \'");

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1);

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' twice (first value \'");

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r8);

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'; second \'");

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r2);

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\').");

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <com.ctc.wstx.sw.NonNsStreamWriter: void reportNwfAttr(java.lang.String)>($r17);

     label3:
        $r22 = r0.<com.ctc.wstx.sw.NonNsStreamWriter: org.codehaus.stax2.validation.XMLValidator mValidator>;

        if $r22 == null goto label4;

        $r5 = r0.<com.ctc.wstx.sw.NonNsStreamWriter: org.codehaus.stax2.validation.XMLValidator mValidator>;

        $r4 = <com.ctc.wstx.sw.NonNsStreamWriter: java.lang.String NO_PREFIX>;

        virtualinvoke $r5.<org.codehaus.stax2.validation.XMLValidator: java.lang.String validateAttribute(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(r1, "", $r4, r2);

     label4:
        $r3 = r0.<com.ctc.wstx.sw.NonNsStreamWriter: com.ctc.wstx.sw.XmlWriter mWriter>;

        virtualinvoke $r3.<com.ctc.wstx.sw.XmlWriter: void writeAttribute(java.lang.String,java.lang.String)>(r1, r2);

     label5:
        goto label7;

     label6:
        $r21 := @caughtexception;

        staticinvoke <com.ctc.wstx.sw.NonNsStreamWriter: void throwFromIOE(java.io.IOException)>($r21);

     label7:
        return;

        catch java.io.IOException from label4 to label5 with label6;
    }

    public void writeAttribute(java.lang.String, java.lang.String, java.lang.String) throws javax.xml.stream.XMLStreamException
    {
        com.ctc.wstx.sw.NonNsStreamWriter r0;
        java.lang.String r1, r2, r3;

        r0 := @this: com.ctc.wstx.sw.NonNsStreamWriter;

        r3 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        virtualinvoke r0.<com.ctc.wstx.sw.NonNsStreamWriter: void writeAttribute(java.lang.String,java.lang.String)>(r1, r2);

        return;
    }

    public void writeAttribute(java.lang.String, java.lang.String, java.lang.String, java.lang.String) throws javax.xml.stream.XMLStreamException
    {
        com.ctc.wstx.sw.NonNsStreamWriter r0;
        java.lang.String r1, r2, r3, r4;

        r0 := @this: com.ctc.wstx.sw.NonNsStreamWriter;

        r3 := @parameter0: java.lang.String;

        r4 := @parameter1: java.lang.String;

        r1 := @parameter2: java.lang.String;

        r2 := @parameter3: java.lang.String;

        virtualinvoke r0.<com.ctc.wstx.sw.NonNsStreamWriter: void writeAttribute(java.lang.String,java.lang.String)>(r1, r2);

        return;
    }

    public void writeDefaultNamespace(java.lang.String) throws javax.xml.stream.XMLStreamException
    {
        java.lang.String r1;
        com.ctc.wstx.sw.NonNsStreamWriter r0;

        r0 := @this: com.ctc.wstx.sw.NonNsStreamWriter;

        r1 := @parameter0: java.lang.String;

        staticinvoke <com.ctc.wstx.sw.NonNsStreamWriter: void reportIllegalMethod(java.lang.String)>("Can not call writeDefaultNamespace namespaces with non-namespace writer.");

        return;
    }

    public void writeEmptyElement(java.lang.String) throws javax.xml.stream.XMLStreamException
    {
        java.lang.String r1;
        com.ctc.wstx.sw.NonNsStreamWriter r0;

        r0 := @this: com.ctc.wstx.sw.NonNsStreamWriter;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<com.ctc.wstx.sw.NonNsStreamWriter: void doWriteStartElement(java.lang.String)>(r1);

        r0.<com.ctc.wstx.sw.NonNsStreamWriter: boolean mEmptyElement> = 1;

        return;
    }

    public void writeEmptyElement(java.lang.String, java.lang.String) throws javax.xml.stream.XMLStreamException
    {
        java.lang.String r1, r2;
        com.ctc.wstx.sw.NonNsStreamWriter r0;

        r0 := @this: com.ctc.wstx.sw.NonNsStreamWriter;

        r2 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        virtualinvoke r0.<com.ctc.wstx.sw.NonNsStreamWriter: void writeEmptyElement(java.lang.String)>(r1);

        return;
    }

    public void writeEmptyElement(java.lang.String, java.lang.String, java.lang.String) throws javax.xml.stream.XMLStreamException
    {
        com.ctc.wstx.sw.NonNsStreamWriter r0;
        java.lang.String r1, r2, r3;

        r0 := @this: com.ctc.wstx.sw.NonNsStreamWriter;

        r2 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        virtualinvoke r0.<com.ctc.wstx.sw.NonNsStreamWriter: void writeEmptyElement(java.lang.String)>(r1);

        return;
    }

    public void writeEndElement() throws javax.xml.stream.XMLStreamException
    {
        com.ctc.wstx.sw.NonNsStreamWriter r0;
        boolean $z0;

        r0 := @this: com.ctc.wstx.sw.NonNsStreamWriter;

        $z0 = r0.<com.ctc.wstx.sw.NonNsStreamWriter: boolean mCfgAutomaticEmptyElems>;

        specialinvoke r0.<com.ctc.wstx.sw.NonNsStreamWriter: void doWriteEndTag(java.lang.String,boolean)>(null, $z0);

        return;
    }

    public void writeNamespace(java.lang.String, java.lang.String) throws javax.xml.stream.XMLStreamException
    {
        java.lang.String r1, r2;
        com.ctc.wstx.sw.NonNsStreamWriter r0;

        r0 := @this: com.ctc.wstx.sw.NonNsStreamWriter;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        staticinvoke <com.ctc.wstx.sw.NonNsStreamWriter: void reportIllegalMethod(java.lang.String)>("Can not set write namespaces with non-namespace writer.");

        return;
    }

    public void writeStartElement(java.lang.String) throws javax.xml.stream.XMLStreamException
    {
        java.lang.String r1;
        com.ctc.wstx.sw.NonNsStreamWriter r0;

        r0 := @this: com.ctc.wstx.sw.NonNsStreamWriter;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<com.ctc.wstx.sw.NonNsStreamWriter: void doWriteStartElement(java.lang.String)>(r1);

        r0.<com.ctc.wstx.sw.NonNsStreamWriter: boolean mEmptyElement> = 0;

        return;
    }

    public void writeStartElement(java.lang.String, java.lang.String) throws javax.xml.stream.XMLStreamException
    {
        java.lang.String r1, r2;
        com.ctc.wstx.sw.NonNsStreamWriter r0;

        r0 := @this: com.ctc.wstx.sw.NonNsStreamWriter;

        r2 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        virtualinvoke r0.<com.ctc.wstx.sw.NonNsStreamWriter: void writeStartElement(java.lang.String)>(r1);

        return;
    }

    public void writeStartElement(java.lang.String, java.lang.String, java.lang.String) throws javax.xml.stream.XMLStreamException
    {
        com.ctc.wstx.sw.NonNsStreamWriter r0;
        java.lang.String r1, r2, r3;

        r0 := @this: com.ctc.wstx.sw.NonNsStreamWriter;

        r2 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        virtualinvoke r0.<com.ctc.wstx.sw.NonNsStreamWriter: void writeStartElement(java.lang.String)>(r1);

        return;
    }

    public void writeFullEndElement() throws javax.xml.stream.XMLStreamException
    {
        com.ctc.wstx.sw.NonNsStreamWriter r0;

        r0 := @this: com.ctc.wstx.sw.NonNsStreamWriter;

        specialinvoke r0.<com.ctc.wstx.sw.NonNsStreamWriter: void doWriteEndTag(java.lang.String,boolean)>(null, 0);

        return;
    }

    public javax.xml.namespace.QName getCurrentElementName()
    {
        com.ctc.wstx.util.StringVector $r1, $r3;
        com.ctc.wstx.sw.NonNsStreamWriter r0;
        javax.xml.namespace.QName $r2;
        java.lang.String $r4;
        boolean $z0;

        r0 := @this: com.ctc.wstx.sw.NonNsStreamWriter;

        $r1 = r0.<com.ctc.wstx.sw.NonNsStreamWriter: com.ctc.wstx.util.StringVector mElements>;

        $z0 = virtualinvoke $r1.<com.ctc.wstx.util.StringVector: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return null;

     label1:
        $r2 = new javax.xml.namespace.QName;

        $r3 = r0.<com.ctc.wstx.sw.NonNsStreamWriter: com.ctc.wstx.util.StringVector mElements>;

        $r4 = virtualinvoke $r3.<com.ctc.wstx.util.StringVector: java.lang.String getLastString()>();

        specialinvoke $r2.<javax.xml.namespace.QName: void <init>(java.lang.String)>($r4);

        return $r2;
    }

    public java.lang.String getNamespaceURI(java.lang.String)
    {
        java.lang.String r1;
        com.ctc.wstx.sw.NonNsStreamWriter r0;

        r0 := @this: com.ctc.wstx.sw.NonNsStreamWriter;

        r1 := @parameter0: java.lang.String;

        return null;
    }

    public void writeStartElement(javax.xml.stream.events.StartElement) throws javax.xml.stream.XMLStreamException
    {
        java.util.Iterator $r4;
        javax.xml.stream.events.Attribute r6;
        com.ctc.wstx.sw.NonNsStreamWriter r2;
        java.lang.Object $r5;
        javax.xml.stream.events.StartElement r0;
        javax.xml.namespace.QName $r1, $r7;
        java.lang.String $r3, $r8, $r9;
        boolean $z0;

        r2 := @this: com.ctc.wstx.sw.NonNsStreamWriter;

        r0 := @parameter0: javax.xml.stream.events.StartElement;

        $r1 = interfaceinvoke r0.<javax.xml.stream.events.StartElement: javax.xml.namespace.QName getName()>();

        $r3 = virtualinvoke $r1.<javax.xml.namespace.QName: java.lang.String getLocalPart()>();

        virtualinvoke r2.<com.ctc.wstx.sw.NonNsStreamWriter: void writeStartElement(java.lang.String)>($r3);

        $r4 = interfaceinvoke r0.<javax.xml.stream.events.StartElement: java.util.Iterator getAttributes()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (javax.xml.stream.events.Attribute) $r5;

        $r7 = interfaceinvoke r6.<javax.xml.stream.events.Attribute: javax.xml.namespace.QName getName()>();

        $r8 = virtualinvoke $r7.<javax.xml.namespace.QName: java.lang.String getLocalPart()>();

        $r9 = interfaceinvoke r6.<javax.xml.stream.events.Attribute: java.lang.String getValue()>();

        virtualinvoke r2.<com.ctc.wstx.sw.NonNsStreamWriter: void writeAttribute(java.lang.String,java.lang.String)>($r8, $r9);

        goto label1;

     label2:
        return;
    }

    public void writeEndElement(javax.xml.namespace.QName) throws javax.xml.stream.XMLStreamException
    {
        com.ctc.wstx.sw.NonNsStreamWriter r0;
        javax.xml.namespace.QName r1;
        java.lang.String $r2;
        boolean $z0, $z1;

        r0 := @this: com.ctc.wstx.sw.NonNsStreamWriter;

        r1 := @parameter0: javax.xml.namespace.QName;

        $z0 = r0.<com.ctc.wstx.sw.NonNsStreamWriter: boolean mCheckStructure>;

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke r1.<javax.xml.namespace.QName: java.lang.String getLocalPart()>();

        goto label2;

     label1:
        $r2 = null;

     label2:
        $z1 = r0.<com.ctc.wstx.sw.NonNsStreamWriter: boolean mCfgAutomaticEmptyElems>;

        specialinvoke r0.<com.ctc.wstx.sw.NonNsStreamWriter: void doWriteEndTag(java.lang.String,boolean)>($r2, $z1);

        return;
    }

    protected void closeStartElement(boolean) throws javax.xml.stream.XMLStreamException
    {
        com.ctc.wstx.sw.XmlWriter $r2, $r11;
        com.ctc.wstx.sw.NonNsStreamWriter r0;
        int $i0, $i1;
        java.lang.String $r5, $r8;
        boolean z0, $z1;
        java.io.IOException $r13;
        org.codehaus.stax2.validation.XMLValidator $r3, $r7, $r9, $r10;
        java.util.TreeMap $r1, $r12;
        com.ctc.wstx.util.StringVector $r4, $r6;

        r0 := @this: com.ctc.wstx.sw.NonNsStreamWriter;

        z0 := @parameter0: boolean;

        r0.<com.ctc.wstx.sw.NonNsStreamWriter: boolean mStartElementOpen> = 0;

        $r1 = r0.<com.ctc.wstx.sw.NonNsStreamWriter: java.util.TreeMap mAttrNames>;

        if $r1 == null goto label1;

        $r12 = r0.<com.ctc.wstx.sw.NonNsStreamWriter: java.util.TreeMap mAttrNames>;

        virtualinvoke $r12.<java.util.TreeMap: void clear()>();

     label1:
        if z0 == 0 goto label2;

        $r11 = r0.<com.ctc.wstx.sw.NonNsStreamWriter: com.ctc.wstx.sw.XmlWriter mWriter>;

        virtualinvoke $r11.<com.ctc.wstx.sw.XmlWriter: void writeStartTagEmptyEnd()>();

        goto label3;

     label2:
        $r2 = r0.<com.ctc.wstx.sw.NonNsStreamWriter: com.ctc.wstx.sw.XmlWriter mWriter>;

        virtualinvoke $r2.<com.ctc.wstx.sw.XmlWriter: void writeStartTagEnd()>();

     label3:
        goto label5;

     label4:
        $r13 := @caughtexception;

        staticinvoke <com.ctc.wstx.sw.NonNsStreamWriter: void throwFromIOE(java.io.IOException)>($r13);

     label5:
        $r3 = r0.<com.ctc.wstx.sw.NonNsStreamWriter: org.codehaus.stax2.validation.XMLValidator mValidator>;

        if $r3 == null goto label6;

        $r10 = r0.<com.ctc.wstx.sw.NonNsStreamWriter: org.codehaus.stax2.validation.XMLValidator mValidator>;

        $i1 = virtualinvoke $r10.<org.codehaus.stax2.validation.XMLValidator: int validateElementAndAttributes()>();

        r0.<com.ctc.wstx.sw.NonNsStreamWriter: int mVldContent> = $i1;

     label6:
        if z0 == 0 goto label8;

        $r4 = r0.<com.ctc.wstx.sw.NonNsStreamWriter: com.ctc.wstx.util.StringVector mElements>;

        $r5 = virtualinvoke $r4.<com.ctc.wstx.util.StringVector: java.lang.String removeLast()>();

        $r6 = r0.<com.ctc.wstx.sw.NonNsStreamWriter: com.ctc.wstx.util.StringVector mElements>;

        $z1 = virtualinvoke $r6.<com.ctc.wstx.util.StringVector: boolean isEmpty()>();

        if $z1 == 0 goto label7;

        r0.<com.ctc.wstx.sw.NonNsStreamWriter: int mState> = 3;

     label7:
        $r7 = r0.<com.ctc.wstx.sw.NonNsStreamWriter: org.codehaus.stax2.validation.XMLValidator mValidator>;

        if $r7 == null goto label8;

        $r9 = r0.<com.ctc.wstx.sw.NonNsStreamWriter: org.codehaus.stax2.validation.XMLValidator mValidator>;

        $r8 = <com.ctc.wstx.sw.NonNsStreamWriter: java.lang.String NO_PREFIX>;

        $i0 = virtualinvoke $r9.<org.codehaus.stax2.validation.XMLValidator: int validateElementEnd(java.lang.String,java.lang.String,java.lang.String)>($r5, "", $r8);

        r0.<com.ctc.wstx.sw.NonNsStreamWriter: int mVldContent> = $i0;

     label8:
        return;

        catch java.io.IOException from label1 to label3 with label4;
    }

    public void copyStartElement(com.ctc.wstx.sr.InputElementStack, com.ctc.wstx.sr.AttributeCollector) throws java.io.IOException, javax.xml.stream.XMLStreamException
    {
        com.ctc.wstx.sw.XmlWriter $r4;
        com.ctc.wstx.sr.InputElementStack r0;
        com.ctc.wstx.sw.NonNsStreamWriter r2;
        java.lang.StringBuffer $r7, $r8, $r9, $r11, $r12, $r13, $r14;
        int $i0, $i1, $i2, i3, $i4, i5, i6;
        java.lang.String $r1, $r5, $r6, $r10, r15, r16;
        boolean $z0, $z1;
        com.ctc.wstx.sr.AttributeCollector r3;

        r2 := @this: com.ctc.wstx.sw.NonNsStreamWriter;

        r0 := @parameter0: com.ctc.wstx.sr.InputElementStack;

        r3 := @parameter1: com.ctc.wstx.sr.AttributeCollector;

        $r1 = virtualinvoke r0.<com.ctc.wstx.sr.InputElementStack: java.lang.String getLocalName()>();

        r15 = $r1;

        $z0 = virtualinvoke r0.<com.ctc.wstx.sr.InputElementStack: boolean isNamespaceAware()>();

        if $z0 == 0 goto label01;

        $r10 = virtualinvoke r0.<com.ctc.wstx.sr.InputElementStack: java.lang.String getPrefix()>();

        if $r10 == null goto label01;

        $i2 = virtualinvoke $r10.<java.lang.String: int length()>();

        if $i2 <= 0 goto label01;

        $r11 = new java.lang.StringBuffer;

        specialinvoke $r11.<java.lang.StringBuffer: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r10);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(":");

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r1);

        r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.String toString()>();

     label01:
        virtualinvoke r2.<com.ctc.wstx.sw.NonNsStreamWriter: void writeStartElement(java.lang.String)>(r15);

        if $z0 == 0 goto label06;

        $i0 = virtualinvoke r0.<com.ctc.wstx.sr.InputElementStack: int getCurrentNsCount()>();

        if $i0 <= 0 goto label06;

        i3 = 0;

     label02:
        if i3 >= $i0 goto label06;

        $r5 = virtualinvoke r0.<com.ctc.wstx.sr.InputElementStack: java.lang.String getLocalNsPrefix(int)>(i3);

        if $r5 == null goto label03;

        $i1 = virtualinvoke $r5.<java.lang.String: int length()>();

        if $i1 != 0 goto label04;

     label03:
        r16 = "xml";

        goto label05;

     label04:
        $r7 = new java.lang.StringBuffer;

        specialinvoke $r7.<java.lang.StringBuffer: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("xmlns:");

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        r16 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();

     label05:
        $r6 = virtualinvoke r0.<com.ctc.wstx.sr.InputElementStack: java.lang.String getLocalNsURI(int)>(i3);

        virtualinvoke r2.<com.ctc.wstx.sw.NonNsStreamWriter: void writeAttribute(java.lang.String,java.lang.String)>(r16, $r6);

        i3 = i3 + 1;

        goto label02;

     label06:
        $z1 = r2.<com.ctc.wstx.sw.NonNsStreamWriter: boolean mCfgCopyDefaultAttrs>;

        if $z1 == 0 goto label07;

        $i4 = virtualinvoke r3.<com.ctc.wstx.sr.AttributeCollector: int getCount()>();

        goto label08;

     label07:
        $i4 = virtualinvoke r3.<com.ctc.wstx.sr.AttributeCollector: int getSpecifiedCount()>();

     label08:
        i5 = $i4;

        if $i4 <= 0 goto label10;

        i6 = 0;

     label09:
        if i6 >= i5 goto label10;

        $r4 = r2.<com.ctc.wstx.sw.NonNsStreamWriter: com.ctc.wstx.sw.XmlWriter mWriter>;

        virtualinvoke r3.<com.ctc.wstx.sr.AttributeCollector: void writeAttribute(int,com.ctc.wstx.sw.XmlWriter)>(i6, $r4);

        i6 = i6 + 1;

        goto label09;

     label10:
        return;
    }

    protected java.lang.String getTopElementDesc()
    {
        com.ctc.wstx.util.StringVector $r1, $r2;
        com.ctc.wstx.sw.NonNsStreamWriter r0;
        java.lang.String $r3;
        boolean $z0;

        r0 := @this: com.ctc.wstx.sw.NonNsStreamWriter;

        $r1 = r0.<com.ctc.wstx.sw.NonNsStreamWriter: com.ctc.wstx.util.StringVector mElements>;

        $z0 = virtualinvoke $r1.<com.ctc.wstx.util.StringVector: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r3 = "#root";

        goto label2;

     label1:
        $r2 = r0.<com.ctc.wstx.sw.NonNsStreamWriter: com.ctc.wstx.util.StringVector mElements>;

        $r3 = virtualinvoke $r2.<com.ctc.wstx.util.StringVector: java.lang.String getLastString()>();

     label2:
        return $r3;
    }

    private void doWriteStartElement(java.lang.String) throws javax.xml.stream.XMLStreamException
    {
        com.ctc.wstx.sw.XmlWriter $r3;
        java.io.IOException $r7;
        org.codehaus.stax2.validation.XMLValidator $r5, $r8;
        com.ctc.wstx.util.StringVector $r2;
        com.ctc.wstx.sw.NonNsStreamWriter r0;
        int $i0, $i1;
        java.lang.String r1, $r4, $r6;
        boolean $z0, $z1, $z2;

        r0 := @this: com.ctc.wstx.sw.NonNsStreamWriter;

        r1 := @parameter0: java.lang.String;

        r0.<com.ctc.wstx.sw.NonNsStreamWriter: boolean mAnyOutput> = 1;

        $z0 = r0.<com.ctc.wstx.sw.NonNsStreamWriter: boolean mStartElementOpen>;

        if $z0 == 0 goto label1;

        $z2 = r0.<com.ctc.wstx.sw.NonNsStreamWriter: boolean mEmptyElement>;

        virtualinvoke r0.<com.ctc.wstx.sw.NonNsStreamWriter: void closeStartElement(boolean)>($z2);

        goto label4;

     label1:
        $i0 = r0.<com.ctc.wstx.sw.NonNsStreamWriter: int mState>;

        if $i0 != 1 goto label2;

        virtualinvoke r0.<com.ctc.wstx.sw.NonNsStreamWriter: void verifyRootElement(java.lang.String,java.lang.String)>(r1, null);

        goto label4;

     label2:
        $i1 = r0.<com.ctc.wstx.sw.NonNsStreamWriter: int mState>;

        if $i1 != 3 goto label4;

        $z1 = r0.<com.ctc.wstx.sw.NonNsStreamWriter: boolean mCheckStructure>;

        if $z1 == 0 goto label3;

        $r6 = <com.ctc.wstx.cfg.ErrorConsts: java.lang.String WERR_PROLOG_SECOND_ROOT>;

        staticinvoke <com.ctc.wstx.sw.NonNsStreamWriter: void reportNwfStructure(java.lang.String,java.lang.Object)>($r6, r1);

     label3:
        r0.<com.ctc.wstx.sw.NonNsStreamWriter: int mState> = 2;

     label4:
        $r8 = r0.<com.ctc.wstx.sw.NonNsStreamWriter: org.codehaus.stax2.validation.XMLValidator mValidator>;

        if $r8 == null goto label5;

        $r5 = r0.<com.ctc.wstx.sw.NonNsStreamWriter: org.codehaus.stax2.validation.XMLValidator mValidator>;

        $r4 = <com.ctc.wstx.sw.NonNsStreamWriter: java.lang.String NO_PREFIX>;

        virtualinvoke $r5.<org.codehaus.stax2.validation.XMLValidator: void validateElementStart(java.lang.String,java.lang.String,java.lang.String)>(r1, "", $r4);

     label5:
        r0.<com.ctc.wstx.sw.NonNsStreamWriter: boolean mStartElementOpen> = 1;

        $r2 = r0.<com.ctc.wstx.sw.NonNsStreamWriter: com.ctc.wstx.util.StringVector mElements>;

        virtualinvoke $r2.<com.ctc.wstx.util.StringVector: void addString(java.lang.String)>(r1);

     label6:
        $r3 = r0.<com.ctc.wstx.sw.NonNsStreamWriter: com.ctc.wstx.sw.XmlWriter mWriter>;

        virtualinvoke $r3.<com.ctc.wstx.sw.XmlWriter: void writeStartTagStart(java.lang.String)>(r1);

     label7:
        goto label9;

     label8:
        $r7 := @caughtexception;

        staticinvoke <com.ctc.wstx.sw.NonNsStreamWriter: void throwFromIOE(java.io.IOException)>($r7);

     label9:
        return;

        catch java.io.IOException from label6 to label7 with label8;
    }

    private void doWriteEndTag(java.lang.String, boolean) throws javax.xml.stream.XMLStreamException
    {
        com.ctc.wstx.sw.NonNsStreamWriter r0;
        boolean $z0, $z1, $z2, z3, $z4, $z5, $z6, $z7;
        com.ctc.wstx.sw.XmlWriter $r9, $r10, $r27;
        java.lang.StringBuffer $r18, $r19, $r20, $r21, $r22, $r23;
        int $i0, $i1, $i2, $i3;
        java.lang.String $r2, $r5, $r13, r17, $r24;
        java.io.IOException $r25, $r26;
        org.codehaus.stax2.validation.XMLValidator $r4, $r6, $r7, $r12, $r14, $r16;
        java.util.TreeMap $r8, $r15;
        com.ctc.wstx.util.StringVector $r1, $r3, $r11;

        r0 := @this: com.ctc.wstx.sw.NonNsStreamWriter;

        r17 := @parameter0: java.lang.String;

        z3 := @parameter1: boolean;

        $z0 = r0.<com.ctc.wstx.sw.NonNsStreamWriter: boolean mStartElementOpen>;

        if $z0 == 0 goto label01;

        $z6 = r0.<com.ctc.wstx.sw.NonNsStreamWriter: boolean mEmptyElement>;

        if $z6 == 0 goto label01;

        r0.<com.ctc.wstx.sw.NonNsStreamWriter: boolean mEmptyElement> = 0;

        virtualinvoke r0.<com.ctc.wstx.sw.NonNsStreamWriter: void closeStartElement(boolean)>(1);

     label01:
        $i3 = r0.<com.ctc.wstx.sw.NonNsStreamWriter: int mState>;

        if $i3 == 2 goto label02;

        staticinvoke <com.ctc.wstx.sw.NonNsStreamWriter: void reportNwfStructure(java.lang.String)>("No open start element, when trying to write end element");

     label02:
        $r1 = r0.<com.ctc.wstx.sw.NonNsStreamWriter: com.ctc.wstx.util.StringVector mElements>;

        $r2 = virtualinvoke $r1.<com.ctc.wstx.util.StringVector: java.lang.String removeLast()>();

        $z1 = r0.<com.ctc.wstx.sw.NonNsStreamWriter: boolean mCheckStructure>;

        if $z1 == 0 goto label03;

        if r17 == null goto label03;

        $z5 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(r17);

        if $z5 != 0 goto label03;

        $r18 = new java.lang.StringBuffer;

        specialinvoke $r18.<java.lang.StringBuffer: void <init>()>();

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Mismatching close element name, \'");

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'; expected \'");

        $r22 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r17);

        $r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'.");

        $r24 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <com.ctc.wstx.sw.NonNsStreamWriter: void reportNwfStructure(java.lang.String)>($r24);

     label03:
        $z7 = r0.<com.ctc.wstx.sw.NonNsStreamWriter: boolean mStartElementOpen>;

        if $z7 == 0 goto label11;

        $r7 = r0.<com.ctc.wstx.sw.NonNsStreamWriter: org.codehaus.stax2.validation.XMLValidator mValidator>;

        if $r7 == null goto label04;

        $r16 = r0.<com.ctc.wstx.sw.NonNsStreamWriter: org.codehaus.stax2.validation.XMLValidator mValidator>;

        $i2 = virtualinvoke $r16.<org.codehaus.stax2.validation.XMLValidator: int validateElementAndAttributes()>();

        r0.<com.ctc.wstx.sw.NonNsStreamWriter: int mVldContent> = $i2;

     label04:
        r0.<com.ctc.wstx.sw.NonNsStreamWriter: boolean mStartElementOpen> = 0;

        $r8 = r0.<com.ctc.wstx.sw.NonNsStreamWriter: java.util.TreeMap mAttrNames>;

        if $r8 == null goto label05;

        $r15 = r0.<com.ctc.wstx.sw.NonNsStreamWriter: java.util.TreeMap mAttrNames>;

        virtualinvoke $r15.<java.util.TreeMap: void clear()>();

     label05:
        if z3 == 0 goto label08;

        $r10 = r0.<com.ctc.wstx.sw.NonNsStreamWriter: com.ctc.wstx.sw.XmlWriter mWriter>;

        virtualinvoke $r10.<com.ctc.wstx.sw.XmlWriter: void writeStartTagEmptyEnd()>();

        $r11 = r0.<com.ctc.wstx.sw.NonNsStreamWriter: com.ctc.wstx.util.StringVector mElements>;

        $z4 = virtualinvoke $r11.<com.ctc.wstx.util.StringVector: boolean isEmpty()>();

        if $z4 == 0 goto label06;

        r0.<com.ctc.wstx.sw.NonNsStreamWriter: int mState> = 3;

     label06:
        $r12 = r0.<com.ctc.wstx.sw.NonNsStreamWriter: org.codehaus.stax2.validation.XMLValidator mValidator>;

        if $r12 == null goto label07;

        $r14 = r0.<com.ctc.wstx.sw.NonNsStreamWriter: org.codehaus.stax2.validation.XMLValidator mValidator>;

        $r13 = <com.ctc.wstx.sw.NonNsStreamWriter: java.lang.String NO_PREFIX>;

        $i1 = virtualinvoke $r14.<org.codehaus.stax2.validation.XMLValidator: int validateElementEnd(java.lang.String,java.lang.String,java.lang.String)>($r2, "", $r13);

        r0.<com.ctc.wstx.sw.NonNsStreamWriter: int mVldContent> = $i1;

     label07:
        return;

     label08:
        $r9 = r0.<com.ctc.wstx.sw.NonNsStreamWriter: com.ctc.wstx.sw.XmlWriter mWriter>;

        virtualinvoke $r9.<com.ctc.wstx.sw.XmlWriter: void writeStartTagEnd()>();

     label09:
        goto label11;

     label10:
        $r26 := @caughtexception;

        staticinvoke <com.ctc.wstx.sw.NonNsStreamWriter: void throwFromIOE(java.io.IOException)>($r26);

     label11:
        $r27 = r0.<com.ctc.wstx.sw.NonNsStreamWriter: com.ctc.wstx.sw.XmlWriter mWriter>;

        virtualinvoke $r27.<com.ctc.wstx.sw.XmlWriter: void writeEndTag(java.lang.String)>($r2);

     label12:
        goto label14;

     label13:
        $r25 := @caughtexception;

        staticinvoke <com.ctc.wstx.sw.NonNsStreamWriter: void throwFromIOE(java.io.IOException)>($r25);

     label14:
        $r3 = r0.<com.ctc.wstx.sw.NonNsStreamWriter: com.ctc.wstx.util.StringVector mElements>;

        $z2 = virtualinvoke $r3.<com.ctc.wstx.util.StringVector: boolean isEmpty()>();

        if $z2 == 0 goto label15;

        r0.<com.ctc.wstx.sw.NonNsStreamWriter: int mState> = 3;

     label15:
        $r4 = r0.<com.ctc.wstx.sw.NonNsStreamWriter: org.codehaus.stax2.validation.XMLValidator mValidator>;

        if $r4 == null goto label16;

        $r6 = r0.<com.ctc.wstx.sw.NonNsStreamWriter: org.codehaus.stax2.validation.XMLValidator mValidator>;

        $r5 = <com.ctc.wstx.sw.NonNsStreamWriter: java.lang.String NO_PREFIX>;

        $i0 = virtualinvoke $r6.<org.codehaus.stax2.validation.XMLValidator: int validateElementEnd(java.lang.String,java.lang.String,java.lang.String)>($r2, "", $r5);

        r0.<com.ctc.wstx.sw.NonNsStreamWriter: int mVldContent> = $i0;

     label16:
        return;

        catch java.io.IOException from label05 to label07 with label10;
        catch java.io.IOException from label08 to label09 with label10;
        catch java.io.IOException from label11 to label12 with label13;
    }
}
