public class com.hp.hpl.jena.sparql.sse.builders.BuilderTable extends java.lang.Object
{

    public void <init>()
    {
        com.hp.hpl.jena.sparql.sse.builders.BuilderTable r0;

        r0 := @this: com.hp.hpl.jena.sparql.sse.builders.BuilderTable;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static com.hp.hpl.jena.sparql.algebra.Table build(com.hp.hpl.jena.sparql.sse.Item)
    {
        int $i0, $i1, $i2, $i3, i4, $i5;
        java.lang.String $r7;
        boolean $z0, $z1, $z2, $z3, $z4;
        com.hp.hpl.jena.sparql.sse.ItemList $r1, r12;
        com.hp.hpl.jena.sparql.sse.Item r0, $r3, $r5, $r6, $r10;
        com.hp.hpl.jena.sparql.engine.binding.Binding $r4, r15;
        java.util.List r13;
        com.hp.hpl.jena.sparql.algebra.Table $r2, $r8, $r9, $r11, $r14;

        r0 := @parameter0: com.hp.hpl.jena.sparql.sse.Item;

        staticinvoke <com.hp.hpl.jena.sparql.sse.builders.BuilderLib: void checkTagged(com.hp.hpl.jena.sparql.sse.Item,java.lang.String,java.lang.String)>(r0, "table", "Not a (table ...)");

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.sse.Item: com.hp.hpl.jena.sparql.sse.ItemList getList()>();

        r12 = $r1;

        $i0 = virtualinvoke $r1.<com.hp.hpl.jena.sparql.sse.ItemList: int size()>();

        if $i0 != 1 goto label1;

        $r11 = staticinvoke <com.hp.hpl.jena.sparql.algebra.TableFactory: com.hp.hpl.jena.sparql.algebra.Table createEmpty()>();

        return $r11;

     label1:
        r13 = null;

        $i1 = virtualinvoke $r1.<com.hp.hpl.jena.sparql.sse.ItemList: int size()>();

        if $i1 <= 1 goto label2;

        $r10 = virtualinvoke $r1.<com.hp.hpl.jena.sparql.sse.ItemList: com.hp.hpl.jena.sparql.sse.Item get(int)>(1);

        $z4 = virtualinvoke $r10.<com.hp.hpl.jena.sparql.sse.Item: boolean isTagged(java.lang.String)>("vars");

        if $z4 == 0 goto label2;

        r13 = staticinvoke <com.hp.hpl.jena.sparql.sse.builders.BuilderNode: java.util.List buildVarList(com.hp.hpl.jena.sparql.sse.Item)>($r10);

        r12 = virtualinvoke $r1.<com.hp.hpl.jena.sparql.sse.ItemList: com.hp.hpl.jena.sparql.sse.ItemList cdr()>();

     label2:
        $i3 = virtualinvoke r12.<com.hp.hpl.jena.sparql.sse.ItemList: int size()>();

        if $i3 != 2 goto label5;

        $r5 = virtualinvoke r12.<com.hp.hpl.jena.sparql.sse.ItemList: com.hp.hpl.jena.sparql.sse.Item get(int)>(1);

        $z1 = virtualinvoke $r5.<com.hp.hpl.jena.sparql.sse.Item: boolean isSymbol()>();

        if $z1 == 0 goto label5;

        $r6 = virtualinvoke r12.<com.hp.hpl.jena.sparql.sse.ItemList: com.hp.hpl.jena.sparql.sse.Item get(int)>(1);

        $r7 = virtualinvoke $r6.<com.hp.hpl.jena.sparql.sse.Item: java.lang.String getSymbol()>();

        $z2 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>("unit");

        if $z2 == 0 goto label3;

        $r9 = staticinvoke <com.hp.hpl.jena.sparql.algebra.TableFactory: com.hp.hpl.jena.sparql.algebra.Table createUnit()>();

        return $r9;

     label3:
        $z3 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>("empty");

        if $z3 == 0 goto label4;

        $r8 = staticinvoke <com.hp.hpl.jena.sparql.algebra.TableFactory: com.hp.hpl.jena.sparql.algebra.Table createEmpty()>();

        return $r8;

     label4:
        staticinvoke <com.hp.hpl.jena.sparql.sse.builders.BuilderLib: void broken(com.hp.hpl.jena.sparql.sse.ItemList,java.lang.String)>(r12, "Don\'t recognized table symbol");

     label5:
        $r14 = staticinvoke <com.hp.hpl.jena.sparql.algebra.TableFactory: com.hp.hpl.jena.sparql.algebra.Table create(java.util.List)>(r13);

        r15 = null;

        i4 = 1;

     label6:
        $i5 = virtualinvoke r12.<com.hp.hpl.jena.sparql.sse.ItemList: int size()>();

        if i4 >= $i5 goto label7;

        $r3 = virtualinvoke r12.<com.hp.hpl.jena.sparql.sse.ItemList: com.hp.hpl.jena.sparql.sse.Item get(int)>(i4);

        $r4 = staticinvoke <com.hp.hpl.jena.sparql.sse.builders.BuilderBinding: com.hp.hpl.jena.sparql.engine.binding.Binding build(com.hp.hpl.jena.sparql.sse.Item)>($r3);

        interfaceinvoke $r14.<com.hp.hpl.jena.sparql.algebra.Table: void addBinding(com.hp.hpl.jena.sparql.engine.binding.Binding)>($r4);

        r15 = $r4;

        i4 = i4 + 1;

        goto label6;

     label7:
        $i2 = interfaceinvoke $r14.<com.hp.hpl.jena.sparql.algebra.Table: int size()>();

        if $i2 != 1 goto label8;

        $z0 = interfaceinvoke r15.<com.hp.hpl.jena.sparql.engine.binding.Binding: boolean isEmpty()>();

        if $z0 == 0 goto label8;

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.algebra.TableFactory: com.hp.hpl.jena.sparql.algebra.Table createUnit()>();

        return $r2;

     label8:
        return $r14;
    }
}
