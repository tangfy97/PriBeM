final class com.mycila.inject.internal.guava.collect.BstCountBasedBalancePolicies$2 extends java.lang.Object implements com.mycila.inject.internal.guava.collect.BstBalancePolicy
{
    final com.mycila.inject.internal.guava.collect.BstAggregate val$countAggregate;

    void <init>(com.mycila.inject.internal.guava.collect.BstAggregate)
    {
        com.mycila.inject.internal.guava.collect.BstAggregate r1;
        com.mycila.inject.internal.guava.collect.BstCountBasedBalancePolicies$2 r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.BstCountBasedBalancePolicies$2;

        r1 := @parameter0: com.mycila.inject.internal.guava.collect.BstAggregate;

        r0.<com.mycila.inject.internal.guava.collect.BstCountBasedBalancePolicies$2: com.mycila.inject.internal.guava.collect.BstAggregate val$countAggregate> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public com.mycila.inject.internal.guava.collect.BstNode balance(com.mycila.inject.internal.guava.collect.BstNodeFactory, com.mycila.inject.internal.guava.collect.BstNode, com.mycila.inject.internal.guava.collect.BstNode, com.mycila.inject.internal.guava.collect.BstNode)
    {
        com.mycila.inject.internal.guava.collect.BstAggregate $r2, $r4;
        com.mycila.inject.internal.guava.collect.BstNodeFactory r5;
        com.mycila.inject.internal.guava.collect.BstCountBasedBalancePolicies$2 r0;
        com.mycila.inject.internal.guava.collect.BstNode r1, r3, r6, $r7, $r8, $r9;
        int $i0, $i1, $i2, $i3, $i4;

        r0 := @this: com.mycila.inject.internal.guava.collect.BstCountBasedBalancePolicies$2;

        r5 := @parameter0: com.mycila.inject.internal.guava.collect.BstNodeFactory;

        r6 := @parameter1: com.mycila.inject.internal.guava.collect.BstNode;

        r1 := @parameter2: com.mycila.inject.internal.guava.collect.BstNode;

        r3 := @parameter3: com.mycila.inject.internal.guava.collect.BstNode;

        $r2 = r0.<com.mycila.inject.internal.guava.collect.BstCountBasedBalancePolicies$2: com.mycila.inject.internal.guava.collect.BstAggregate val$countAggregate>;

        $i0 = interfaceinvoke $r2.<com.mycila.inject.internal.guava.collect.BstAggregate: int treeValue(com.mycila.inject.internal.guava.collect.BstNode)>(r1);

        $r4 = r0.<com.mycila.inject.internal.guava.collect.BstCountBasedBalancePolicies$2: com.mycila.inject.internal.guava.collect.BstAggregate val$countAggregate>;

        $i1 = interfaceinvoke $r4.<com.mycila.inject.internal.guava.collect.BstAggregate: int treeValue(com.mycila.inject.internal.guava.collect.BstNode)>(r3);

        $i2 = $i0 + $i1;

        if $i2 <= 1 goto label2;

        $i3 = 4 * $i0;

        if $i1 < $i3 goto label1;

        $r9 = specialinvoke r0.<com.mycila.inject.internal.guava.collect.BstCountBasedBalancePolicies$2: com.mycila.inject.internal.guava.collect.BstNode rotateL(com.mycila.inject.internal.guava.collect.BstNodeFactory,com.mycila.inject.internal.guava.collect.BstNode,com.mycila.inject.internal.guava.collect.BstNode,com.mycila.inject.internal.guava.collect.BstNode)>(r5, r6, r1, r3);

        return $r9;

     label1:
        $i4 = 4 * $i1;

        if $i0 < $i4 goto label2;

        $r8 = specialinvoke r0.<com.mycila.inject.internal.guava.collect.BstCountBasedBalancePolicies$2: com.mycila.inject.internal.guava.collect.BstNode rotateR(com.mycila.inject.internal.guava.collect.BstNodeFactory,com.mycila.inject.internal.guava.collect.BstNode,com.mycila.inject.internal.guava.collect.BstNode,com.mycila.inject.internal.guava.collect.BstNode)>(r5, r6, r1, r3);

        return $r8;

     label2:
        $r7 = virtualinvoke r5.<com.mycila.inject.internal.guava.collect.BstNodeFactory: com.mycila.inject.internal.guava.collect.BstNode createNode(com.mycila.inject.internal.guava.collect.BstNode,com.mycila.inject.internal.guava.collect.BstNode,com.mycila.inject.internal.guava.collect.BstNode)>(r6, r1, r3);

        return $r7;
    }

    private com.mycila.inject.internal.guava.collect.BstNode rotateL(com.mycila.inject.internal.guava.collect.BstNodeFactory, com.mycila.inject.internal.guava.collect.BstNode, com.mycila.inject.internal.guava.collect.BstNode, com.mycila.inject.internal.guava.collect.BstNode)
    {
        com.mycila.inject.internal.guava.collect.BstAggregate $r5, $r6;
        com.mycila.inject.internal.guava.collect.BstNodeFactory r7;
        com.mycila.inject.internal.guava.collect.BstCountBasedBalancePolicies$2 r4;
        com.mycila.inject.internal.guava.collect.BstNode $r1, $r3, r8, r9, $r10, r11;
        com.mycila.inject.internal.guava.collect.BstSide $r0, $r2;
        int $i0, $i1, $i2;

        r4 := @this: com.mycila.inject.internal.guava.collect.BstCountBasedBalancePolicies$2;

        r7 := @parameter0: com.mycila.inject.internal.guava.collect.BstNodeFactory;

        r8 := @parameter1: com.mycila.inject.internal.guava.collect.BstNode;

        r9 := @parameter2: com.mycila.inject.internal.guava.collect.BstNode;

        r11 := @parameter3: com.mycila.inject.internal.guava.collect.BstNode;

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r11);

        $r0 = <com.mycila.inject.internal.guava.collect.BstSide: com.mycila.inject.internal.guava.collect.BstSide LEFT>;

        $r1 = virtualinvoke r11.<com.mycila.inject.internal.guava.collect.BstNode: com.mycila.inject.internal.guava.collect.BstNode childOrNull(com.mycila.inject.internal.guava.collect.BstSide)>($r0);

        $r2 = <com.mycila.inject.internal.guava.collect.BstSide: com.mycila.inject.internal.guava.collect.BstSide RIGHT>;

        $r3 = virtualinvoke r11.<com.mycila.inject.internal.guava.collect.BstNode: com.mycila.inject.internal.guava.collect.BstNode childOrNull(com.mycila.inject.internal.guava.collect.BstSide)>($r2);

        $r5 = r4.<com.mycila.inject.internal.guava.collect.BstCountBasedBalancePolicies$2: com.mycila.inject.internal.guava.collect.BstAggregate val$countAggregate>;

        $i0 = interfaceinvoke $r5.<com.mycila.inject.internal.guava.collect.BstAggregate: int treeValue(com.mycila.inject.internal.guava.collect.BstNode)>($r1);

        $r6 = r4.<com.mycila.inject.internal.guava.collect.BstCountBasedBalancePolicies$2: com.mycila.inject.internal.guava.collect.BstAggregate val$countAggregate>;

        $i1 = interfaceinvoke $r6.<com.mycila.inject.internal.guava.collect.BstAggregate: int treeValue(com.mycila.inject.internal.guava.collect.BstNode)>($r3);

        $i2 = 2 * $i1;

        if $i0 < $i2 goto label1;

        r11 = specialinvoke r4.<com.mycila.inject.internal.guava.collect.BstCountBasedBalancePolicies$2: com.mycila.inject.internal.guava.collect.BstNode singleR(com.mycila.inject.internal.guava.collect.BstNodeFactory,com.mycila.inject.internal.guava.collect.BstNode,com.mycila.inject.internal.guava.collect.BstNode,com.mycila.inject.internal.guava.collect.BstNode)>(r7, r11, $r1, $r3);

     label1:
        $r10 = specialinvoke r4.<com.mycila.inject.internal.guava.collect.BstCountBasedBalancePolicies$2: com.mycila.inject.internal.guava.collect.BstNode singleL(com.mycila.inject.internal.guava.collect.BstNodeFactory,com.mycila.inject.internal.guava.collect.BstNode,com.mycila.inject.internal.guava.collect.BstNode,com.mycila.inject.internal.guava.collect.BstNode)>(r7, r8, r9, r11);

        return $r10;
    }

    private com.mycila.inject.internal.guava.collect.BstNode rotateR(com.mycila.inject.internal.guava.collect.BstNodeFactory, com.mycila.inject.internal.guava.collect.BstNode, com.mycila.inject.internal.guava.collect.BstNode, com.mycila.inject.internal.guava.collect.BstNode)
    {
        com.mycila.inject.internal.guava.collect.BstAggregate $r5, $r6;
        com.mycila.inject.internal.guava.collect.BstNodeFactory r7;
        com.mycila.inject.internal.guava.collect.BstCountBasedBalancePolicies$2 r4;
        com.mycila.inject.internal.guava.collect.BstNode $r1, $r3, r8, r9, $r10, r11;
        com.mycila.inject.internal.guava.collect.BstSide $r0, $r2;
        int $i0, $i1, $i2;

        r4 := @this: com.mycila.inject.internal.guava.collect.BstCountBasedBalancePolicies$2;

        r7 := @parameter0: com.mycila.inject.internal.guava.collect.BstNodeFactory;

        r8 := @parameter1: com.mycila.inject.internal.guava.collect.BstNode;

        r11 := @parameter2: com.mycila.inject.internal.guava.collect.BstNode;

        r9 := @parameter3: com.mycila.inject.internal.guava.collect.BstNode;

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r11);

        $r0 = <com.mycila.inject.internal.guava.collect.BstSide: com.mycila.inject.internal.guava.collect.BstSide RIGHT>;

        $r1 = virtualinvoke r11.<com.mycila.inject.internal.guava.collect.BstNode: com.mycila.inject.internal.guava.collect.BstNode childOrNull(com.mycila.inject.internal.guava.collect.BstSide)>($r0);

        $r2 = <com.mycila.inject.internal.guava.collect.BstSide: com.mycila.inject.internal.guava.collect.BstSide LEFT>;

        $r3 = virtualinvoke r11.<com.mycila.inject.internal.guava.collect.BstNode: com.mycila.inject.internal.guava.collect.BstNode childOrNull(com.mycila.inject.internal.guava.collect.BstSide)>($r2);

        $r5 = r4.<com.mycila.inject.internal.guava.collect.BstCountBasedBalancePolicies$2: com.mycila.inject.internal.guava.collect.BstAggregate val$countAggregate>;

        $i0 = interfaceinvoke $r5.<com.mycila.inject.internal.guava.collect.BstAggregate: int treeValue(com.mycila.inject.internal.guava.collect.BstNode)>($r1);

        $r6 = r4.<com.mycila.inject.internal.guava.collect.BstCountBasedBalancePolicies$2: com.mycila.inject.internal.guava.collect.BstAggregate val$countAggregate>;

        $i1 = interfaceinvoke $r6.<com.mycila.inject.internal.guava.collect.BstAggregate: int treeValue(com.mycila.inject.internal.guava.collect.BstNode)>($r3);

        $i2 = 2 * $i1;

        if $i0 < $i2 goto label1;

        r11 = specialinvoke r4.<com.mycila.inject.internal.guava.collect.BstCountBasedBalancePolicies$2: com.mycila.inject.internal.guava.collect.BstNode singleL(com.mycila.inject.internal.guava.collect.BstNodeFactory,com.mycila.inject.internal.guava.collect.BstNode,com.mycila.inject.internal.guava.collect.BstNode,com.mycila.inject.internal.guava.collect.BstNode)>(r7, r11, $r3, $r1);

     label1:
        $r10 = specialinvoke r4.<com.mycila.inject.internal.guava.collect.BstCountBasedBalancePolicies$2: com.mycila.inject.internal.guava.collect.BstNode singleR(com.mycila.inject.internal.guava.collect.BstNodeFactory,com.mycila.inject.internal.guava.collect.BstNode,com.mycila.inject.internal.guava.collect.BstNode,com.mycila.inject.internal.guava.collect.BstNode)>(r7, r8, r11, r9);

        return $r10;
    }

    private com.mycila.inject.internal.guava.collect.BstNode singleL(com.mycila.inject.internal.guava.collect.BstNodeFactory, com.mycila.inject.internal.guava.collect.BstNode, com.mycila.inject.internal.guava.collect.BstNode, com.mycila.inject.internal.guava.collect.BstNode)
    {
        com.mycila.inject.internal.guava.collect.BstNodeFactory r1;
        com.mycila.inject.internal.guava.collect.BstCountBasedBalancePolicies$2 r10;
        com.mycila.inject.internal.guava.collect.BstNode r0, r2, r3, $r5, $r6, $r8, $r9;
        com.mycila.inject.internal.guava.collect.BstSide $r4, $r7;

        r10 := @this: com.mycila.inject.internal.guava.collect.BstCountBasedBalancePolicies$2;

        r1 := @parameter0: com.mycila.inject.internal.guava.collect.BstNodeFactory;

        r2 := @parameter1: com.mycila.inject.internal.guava.collect.BstNode;

        r3 := @parameter2: com.mycila.inject.internal.guava.collect.BstNode;

        r0 := @parameter3: com.mycila.inject.internal.guava.collect.BstNode;

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $r4 = <com.mycila.inject.internal.guava.collect.BstSide: com.mycila.inject.internal.guava.collect.BstSide LEFT>;

        $r5 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.BstNode: com.mycila.inject.internal.guava.collect.BstNode childOrNull(com.mycila.inject.internal.guava.collect.BstSide)>($r4);

        $r6 = virtualinvoke r1.<com.mycila.inject.internal.guava.collect.BstNodeFactory: com.mycila.inject.internal.guava.collect.BstNode createNode(com.mycila.inject.internal.guava.collect.BstNode,com.mycila.inject.internal.guava.collect.BstNode,com.mycila.inject.internal.guava.collect.BstNode)>(r2, r3, $r5);

        $r7 = <com.mycila.inject.internal.guava.collect.BstSide: com.mycila.inject.internal.guava.collect.BstSide RIGHT>;

        $r8 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.BstNode: com.mycila.inject.internal.guava.collect.BstNode childOrNull(com.mycila.inject.internal.guava.collect.BstSide)>($r7);

        $r9 = virtualinvoke r1.<com.mycila.inject.internal.guava.collect.BstNodeFactory: com.mycila.inject.internal.guava.collect.BstNode createNode(com.mycila.inject.internal.guava.collect.BstNode,com.mycila.inject.internal.guava.collect.BstNode,com.mycila.inject.internal.guava.collect.BstNode)>(r0, $r6, $r8);

        return $r9;
    }

    private com.mycila.inject.internal.guava.collect.BstNode singleR(com.mycila.inject.internal.guava.collect.BstNodeFactory, com.mycila.inject.internal.guava.collect.BstNode, com.mycila.inject.internal.guava.collect.BstNode, com.mycila.inject.internal.guava.collect.BstNode)
    {
        com.mycila.inject.internal.guava.collect.BstNodeFactory r1;
        com.mycila.inject.internal.guava.collect.BstCountBasedBalancePolicies$2 r10;
        com.mycila.inject.internal.guava.collect.BstNode r0, $r3, r4, $r6, r7, $r8, $r9;
        com.mycila.inject.internal.guava.collect.BstSide $r2, $r5;

        r10 := @this: com.mycila.inject.internal.guava.collect.BstCountBasedBalancePolicies$2;

        r1 := @parameter0: com.mycila.inject.internal.guava.collect.BstNodeFactory;

        r4 := @parameter1: com.mycila.inject.internal.guava.collect.BstNode;

        r0 := @parameter2: com.mycila.inject.internal.guava.collect.BstNode;

        r7 := @parameter3: com.mycila.inject.internal.guava.collect.BstNode;

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $r2 = <com.mycila.inject.internal.guava.collect.BstSide: com.mycila.inject.internal.guava.collect.BstSide LEFT>;

        $r3 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.BstNode: com.mycila.inject.internal.guava.collect.BstNode childOrNull(com.mycila.inject.internal.guava.collect.BstSide)>($r2);

        $r5 = <com.mycila.inject.internal.guava.collect.BstSide: com.mycila.inject.internal.guava.collect.BstSide RIGHT>;

        $r6 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.BstNode: com.mycila.inject.internal.guava.collect.BstNode childOrNull(com.mycila.inject.internal.guava.collect.BstSide)>($r5);

        $r8 = virtualinvoke r1.<com.mycila.inject.internal.guava.collect.BstNodeFactory: com.mycila.inject.internal.guava.collect.BstNode createNode(com.mycila.inject.internal.guava.collect.BstNode,com.mycila.inject.internal.guava.collect.BstNode,com.mycila.inject.internal.guava.collect.BstNode)>(r4, $r6, r7);

        $r9 = virtualinvoke r1.<com.mycila.inject.internal.guava.collect.BstNodeFactory: com.mycila.inject.internal.guava.collect.BstNode createNode(com.mycila.inject.internal.guava.collect.BstNode,com.mycila.inject.internal.guava.collect.BstNode,com.mycila.inject.internal.guava.collect.BstNode)>(r0, $r3, $r8);

        return $r9;
    }

    public com.mycila.inject.internal.guava.collect.BstNode combine(com.mycila.inject.internal.guava.collect.BstNodeFactory, com.mycila.inject.internal.guava.collect.BstNode, com.mycila.inject.internal.guava.collect.BstNode)
    {
        com.mycila.inject.internal.guava.collect.BstAggregate $r1, $r2;
        com.mycila.inject.internal.guava.collect.BstNodeFactory r3;
        com.mycila.inject.internal.guava.collect.BstCountBasedBalancePolicies$2 r0;
        com.mycila.inject.internal.guava.collect.BstNode $r5, r7, r8, r9;
        int $i0, $i1;
        com.mycila.inject.internal.guava.collect.BstMutationResult $r4, $r6;

        r0 := @this: com.mycila.inject.internal.guava.collect.BstCountBasedBalancePolicies$2;

        r3 := @parameter0: com.mycila.inject.internal.guava.collect.BstNodeFactory;

        r7 := @parameter1: com.mycila.inject.internal.guava.collect.BstNode;

        r8 := @parameter2: com.mycila.inject.internal.guava.collect.BstNode;

        if r7 != null goto label1;

        return r8;

     label1:
        if r8 != null goto label2;

        return r7;

     label2:
        $r1 = r0.<com.mycila.inject.internal.guava.collect.BstCountBasedBalancePolicies$2: com.mycila.inject.internal.guava.collect.BstAggregate val$countAggregate>;

        $i0 = interfaceinvoke $r1.<com.mycila.inject.internal.guava.collect.BstAggregate: int treeValue(com.mycila.inject.internal.guava.collect.BstNode)>(r7);

        $r2 = r0.<com.mycila.inject.internal.guava.collect.BstCountBasedBalancePolicies$2: com.mycila.inject.internal.guava.collect.BstAggregate val$countAggregate>;

        $i1 = interfaceinvoke $r2.<com.mycila.inject.internal.guava.collect.BstAggregate: int treeValue(com.mycila.inject.internal.guava.collect.BstNode)>(r8);

        if $i0 <= $i1 goto label3;

        $r6 = staticinvoke <com.mycila.inject.internal.guava.collect.BstOperations: com.mycila.inject.internal.guava.collect.BstMutationResult extractMax(com.mycila.inject.internal.guava.collect.BstNode,com.mycila.inject.internal.guava.collect.BstNodeFactory,com.mycila.inject.internal.guava.collect.BstBalancePolicy)>(r7, r3, r0);

        r9 = virtualinvoke $r6.<com.mycila.inject.internal.guava.collect.BstMutationResult: com.mycila.inject.internal.guava.collect.BstNode getOriginalTarget()>();

        r7 = virtualinvoke $r6.<com.mycila.inject.internal.guava.collect.BstMutationResult: com.mycila.inject.internal.guava.collect.BstNode getChangedRoot()>();

        goto label4;

     label3:
        $r4 = staticinvoke <com.mycila.inject.internal.guava.collect.BstOperations: com.mycila.inject.internal.guava.collect.BstMutationResult extractMin(com.mycila.inject.internal.guava.collect.BstNode,com.mycila.inject.internal.guava.collect.BstNodeFactory,com.mycila.inject.internal.guava.collect.BstBalancePolicy)>(r8, r3, r0);

        r9 = virtualinvoke $r4.<com.mycila.inject.internal.guava.collect.BstMutationResult: com.mycila.inject.internal.guava.collect.BstNode getOriginalTarget()>();

        r8 = virtualinvoke $r4.<com.mycila.inject.internal.guava.collect.BstMutationResult: com.mycila.inject.internal.guava.collect.BstNode getChangedRoot()>();

     label4:
        $r5 = virtualinvoke r3.<com.mycila.inject.internal.guava.collect.BstNodeFactory: com.mycila.inject.internal.guava.collect.BstNode createNode(com.mycila.inject.internal.guava.collect.BstNode,com.mycila.inject.internal.guava.collect.BstNode,com.mycila.inject.internal.guava.collect.BstNode)>(r9, r7, r8);

        return $r5;
    }
}
