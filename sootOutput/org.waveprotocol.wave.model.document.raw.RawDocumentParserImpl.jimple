public class org.waveprotocol.wave.model.document.raw.RawDocumentParserImpl extends java.lang.Object implements org.waveprotocol.wave.model.document.util.DocumentParser
{
    private final org.waveprotocol.wave.model.document.raw.RawDocument$Factory factory;

    public static org.waveprotocol.wave.model.document.raw.RawDocumentParserImpl create(org.waveprotocol.wave.model.document.raw.RawDocument$Factory)
    {
        org.waveprotocol.wave.model.document.raw.RawDocumentParserImpl $r0;
        org.waveprotocol.wave.model.document.raw.RawDocument$Factory r1;

        r1 := @parameter0: org.waveprotocol.wave.model.document.raw.RawDocument$Factory;

        $r0 = new org.waveprotocol.wave.model.document.raw.RawDocumentParserImpl;

        specialinvoke $r0.<org.waveprotocol.wave.model.document.raw.RawDocumentParserImpl: void <init>(org.waveprotocol.wave.model.document.raw.RawDocument$Factory)>(r1);

        return $r0;
    }

    private void <init>(org.waveprotocol.wave.model.document.raw.RawDocument$Factory)
    {
        org.waveprotocol.wave.model.document.raw.RawDocumentParserImpl r0;
        org.waveprotocol.wave.model.document.raw.RawDocument$Factory r1;

        r0 := @this: org.waveprotocol.wave.model.document.raw.RawDocumentParserImpl;

        r1 := @parameter0: org.waveprotocol.wave.model.document.raw.RawDocument$Factory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.waveprotocol.wave.model.document.raw.RawDocumentParserImpl: org.waveprotocol.wave.model.document.raw.RawDocument$Factory factory> = r1;

        return;
    }

    public org.waveprotocol.wave.model.document.raw.RawDocument parse(java.lang.String)
    {
        org.waveprotocol.wave.model.document.raw.RawDocumentParserImpl r4;
        org.waveprotocol.wave.model.document.parser.XmlParseException $r11;
        org.waveprotocol.wave.model.util.StringMap $r7;
        org.waveprotocol.wave.model.document.raw.RawDocument$Factory $r5;
        java.util.Map $r8;
        java.lang.String r0, $r6, $r16;
        java.lang.RuntimeException $r12;
        org.waveprotocol.wave.model.document.parser.SafeXmlPullParser $r1;
        org.waveprotocol.wave.model.document.raw.RawDocument r17;
        org.waveprotocol.wave.model.document.parser.ItemType $r2, $r3;
        java.lang.Object $r9, $r10;
        java.lang.StringBuilder $r13, $r14, $r15;

        r4 := @this: org.waveprotocol.wave.model.document.raw.RawDocumentParserImpl;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <org.waveprotocol.wave.model.document.parser.XmlParserFactory: org.waveprotocol.wave.model.document.parser.SafeXmlPullParser buffered(java.lang.String)>(r0);

     label2:
        goto label4;

     label3:
        $r11 := @caughtexception;

        $r12 = new java.lang.RuntimeException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot parse xml: ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>($r16, $r11);

        throw $r12;

     label4:
        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.model.document.parser.SafeXmlPullParser: org.waveprotocol.wave.model.document.parser.ItemType getCurrentType()>();

        $r3 = <org.waveprotocol.wave.model.document.parser.ItemType: org.waveprotocol.wave.model.document.parser.ItemType START_ELEMENT>;

        if $r2 == $r3 goto label5;

        interfaceinvoke $r1.<org.waveprotocol.wave.model.document.parser.SafeXmlPullParser: org.waveprotocol.wave.model.document.parser.ItemType next()>();

        goto label4;

     label5:
        $r5 = r4.<org.waveprotocol.wave.model.document.raw.RawDocumentParserImpl: org.waveprotocol.wave.model.document.raw.RawDocument$Factory factory>;

        $r6 = interfaceinvoke $r1.<org.waveprotocol.wave.model.document.parser.SafeXmlPullParser: java.lang.String getTagName()>();

        $r7 = interfaceinvoke $r1.<org.waveprotocol.wave.model.document.parser.SafeXmlPullParser: org.waveprotocol.wave.model.util.StringMap getAttributes()>();

        $r8 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: java.util.Map newJavaMap(org.waveprotocol.wave.model.util.ReadableStringMap)>($r7);

        $r9 = interfaceinvoke $r5.<org.waveprotocol.wave.model.document.raw.RawDocument$Factory: java.lang.Object create(java.lang.String,java.util.Map)>($r6, $r8);

        r17 = (org.waveprotocol.wave.model.document.raw.RawDocument) $r9;

        $r10 = interfaceinvoke r17.<org.waveprotocol.wave.model.document.raw.RawDocument: java.lang.Object getDocumentElement()>();

        specialinvoke r4.<org.waveprotocol.wave.model.document.raw.RawDocumentParserImpl: void parseChildren(org.waveprotocol.wave.model.document.parser.SafeXmlPullParser,org.waveprotocol.wave.model.document.raw.RawDocument,java.lang.Object)>($r1, r17, $r10);

        return r17;

        catch org.waveprotocol.wave.model.document.parser.XmlParseException from label1 to label2 with label3;
    }

    private java.lang.Object parseElement(org.waveprotocol.wave.model.document.parser.SafeXmlPullParser, org.waveprotocol.wave.model.document.raw.RawDocument, java.lang.Object)
    {
        org.waveprotocol.wave.model.document.raw.RawDocumentParserImpl r7;
        org.waveprotocol.wave.model.util.StringMap $r3;
        org.waveprotocol.wave.model.document.parser.SafeXmlPullParser r1;
        org.waveprotocol.wave.model.document.raw.RawDocument r0;
        java.util.Map $r4;
        java.lang.Object r5, $r6;
        java.lang.String $r2;

        r7 := @this: org.waveprotocol.wave.model.document.raw.RawDocumentParserImpl;

        r1 := @parameter0: org.waveprotocol.wave.model.document.parser.SafeXmlPullParser;

        r0 := @parameter1: org.waveprotocol.wave.model.document.raw.RawDocument;

        r5 := @parameter2: java.lang.Object;

        $r2 = interfaceinvoke r1.<org.waveprotocol.wave.model.document.parser.SafeXmlPullParser: java.lang.String getTagName()>();

        $r3 = interfaceinvoke r1.<org.waveprotocol.wave.model.document.parser.SafeXmlPullParser: org.waveprotocol.wave.model.util.StringMap getAttributes()>();

        $r4 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: java.util.Map newJavaMap(org.waveprotocol.wave.model.util.ReadableStringMap)>($r3);

        $r6 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.raw.RawDocument: java.lang.Object createElement(java.lang.String,java.util.Map,java.lang.Object,java.lang.Object)>($r2, $r4, r5, null);

        specialinvoke r7.<org.waveprotocol.wave.model.document.raw.RawDocumentParserImpl: void parseChildren(org.waveprotocol.wave.model.document.parser.SafeXmlPullParser,org.waveprotocol.wave.model.document.raw.RawDocument,java.lang.Object)>(r1, r0, $r6);

        return $r6;
    }

    private void parseChildren(org.waveprotocol.wave.model.document.parser.SafeXmlPullParser, org.waveprotocol.wave.model.document.raw.RawDocument, java.lang.Object)
    {
        org.waveprotocol.wave.model.document.raw.RawDocumentParserImpl r5;
        org.waveprotocol.wave.model.document.parser.SafeXmlPullParser r0;
        org.waveprotocol.wave.model.document.raw.RawDocument r3;
        int[] $r1;
        org.waveprotocol.wave.model.document.parser.ItemType $r2;
        int $i0, $i1;
        java.lang.Object r4, r6;
        boolean $z0, z1;

        r5 := @this: org.waveprotocol.wave.model.document.raw.RawDocumentParserImpl;

        r0 := @parameter0: org.waveprotocol.wave.model.document.parser.SafeXmlPullParser;

        r3 := @parameter1: org.waveprotocol.wave.model.document.raw.RawDocument;

        r4 := @parameter2: java.lang.Object;

        z1 = 0;

     label1:
        r6 = null;

        interfaceinvoke r0.<org.waveprotocol.wave.model.document.parser.SafeXmlPullParser: org.waveprotocol.wave.model.document.parser.ItemType next()>();

        $r1 = <org.waveprotocol.wave.model.document.raw.RawDocumentParserImpl$1: int[] $SwitchMap$org$waveprotocol$wave$model$document$parser$ItemType>;

        $r2 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.parser.SafeXmlPullParser: org.waveprotocol.wave.model.document.parser.ItemType getCurrentType()>();

        $i0 = virtualinvoke $r2.<org.waveprotocol.wave.model.document.parser.ItemType: int ordinal()>();

        $i1 = $r1[$i0];

        tableswitch($i1)
        {
            case 1: goto label2;
            case 2: goto label3;
            case 3: goto label4;
            default: goto label5;
        };

     label2:
        r6 = specialinvoke r5.<org.waveprotocol.wave.model.document.raw.RawDocumentParserImpl: java.lang.Object parseText(org.waveprotocol.wave.model.document.parser.SafeXmlPullParser,org.waveprotocol.wave.model.document.raw.RawDocument,java.lang.Object)>(r0, r3, r4);

        goto label5;

     label3:
        r6 = specialinvoke r5.<org.waveprotocol.wave.model.document.raw.RawDocumentParserImpl: java.lang.Object parseElement(org.waveprotocol.wave.model.document.parser.SafeXmlPullParser,org.waveprotocol.wave.model.document.raw.RawDocument,java.lang.Object)>(r0, r3, r4);

        goto label5;

     label4:
        z1 = 1;

     label5:
        if r6 == null goto label6;

        interfaceinvoke r3.<org.waveprotocol.wave.model.document.raw.RawDocument: java.lang.Object insertBefore(java.lang.Object,java.lang.Object,java.lang.Object)>(r4, r6, null);

     label6:
        if z1 != 0 goto label7;

        $z0 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.parser.SafeXmlPullParser: boolean hasNext()>();

        if $z0 != 0 goto label1;

     label7:
        return;
    }

    private java.lang.Object parseText(org.waveprotocol.wave.model.document.parser.SafeXmlPullParser, org.waveprotocol.wave.model.document.raw.RawDocument, java.lang.Object)
    {
        org.waveprotocol.wave.model.document.parser.SafeXmlPullParser r0;
        org.waveprotocol.wave.model.document.raw.RawDocument r2;
        org.waveprotocol.wave.model.document.raw.RawDocumentParserImpl r4;
        int $i0;
        java.lang.Object r3, r5;
        java.lang.String $r1;

        r4 := @this: org.waveprotocol.wave.model.document.raw.RawDocumentParserImpl;

        r0 := @parameter0: org.waveprotocol.wave.model.document.parser.SafeXmlPullParser;

        r2 := @parameter1: org.waveprotocol.wave.model.document.raw.RawDocument;

        r3 := @parameter2: java.lang.Object;

        $r1 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.parser.SafeXmlPullParser: java.lang.String getText()>();

        r5 = null;

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i0 <= 0 goto label1;

        r5 = interfaceinvoke r2.<org.waveprotocol.wave.model.document.raw.RawDocument: java.lang.Object createTextNode(java.lang.String,java.lang.Object,java.lang.Object)>($r1, r3, null);

     label1:
        return r5;
    }

    public volatile java.lang.Object parse(java.lang.String)
    {
        org.waveprotocol.wave.model.document.raw.RawDocument $r2;
        java.lang.String r1;
        org.waveprotocol.wave.model.document.raw.RawDocumentParserImpl r0;

        r0 := @this: org.waveprotocol.wave.model.document.raw.RawDocumentParserImpl;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.waveprotocol.wave.model.document.raw.RawDocumentParserImpl: org.waveprotocol.wave.model.document.raw.RawDocument parse(java.lang.String)>(r1);

        return $r2;
    }
}
