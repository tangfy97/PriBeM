public final class org.codehaus.jackson.impl.Utf8StreamParser extends org.codehaus.jackson.impl.Utf8NumericParser
{
    static final byte BYTE_LF;
    protected org.codehaus.jackson.ObjectCodec _objectCodec;
    protected final org.codehaus.jackson.sym.BytesToNameCanonicalizer _symbols;
    protected int[] _quadBuffer;

    public void <init>(org.codehaus.jackson.io.IOContext, int, java.io.InputStream, org.codehaus.jackson.ObjectCodec, org.codehaus.jackson.sym.BytesToNameCanonicalizer, byte[], int, int, boolean)
    {
        org.codehaus.jackson.io.IOContext r1;
        byte[] r3;
        org.codehaus.jackson.ObjectCodec r5;
        org.codehaus.jackson.impl.Utf8StreamParser r0;
        org.codehaus.jackson.sym.BytesToNameCanonicalizer r6;
        int[] $r4;
        int i0, i1, i2;
        org.codehaus.jackson.JsonParser$Feature $r7;
        java.io.InputStream r2;
        boolean z0, $z1;

        r0 := @this: org.codehaus.jackson.impl.Utf8StreamParser;

        r1 := @parameter0: org.codehaus.jackson.io.IOContext;

        i0 := @parameter1: int;

        r2 := @parameter2: java.io.InputStream;

        r5 := @parameter3: org.codehaus.jackson.ObjectCodec;

        r6 := @parameter4: org.codehaus.jackson.sym.BytesToNameCanonicalizer;

        r3 := @parameter5: byte[];

        i1 := @parameter6: int;

        i2 := @parameter7: int;

        z0 := @parameter8: boolean;

        specialinvoke r0.<org.codehaus.jackson.impl.Utf8NumericParser: void <init>(org.codehaus.jackson.io.IOContext,int,java.io.InputStream,byte[],int,int,boolean)>(r1, i0, r2, r3, i1, i2, z0);

        $r4 = newarray (int)[32];

        r0.<org.codehaus.jackson.impl.Utf8StreamParser: int[] _quadBuffer> = $r4;

        r0.<org.codehaus.jackson.impl.Utf8StreamParser: org.codehaus.jackson.ObjectCodec _objectCodec> = r5;

        r0.<org.codehaus.jackson.impl.Utf8StreamParser: org.codehaus.jackson.sym.BytesToNameCanonicalizer _symbols> = r6;

        $r7 = <org.codehaus.jackson.JsonParser$Feature: org.codehaus.jackson.JsonParser$Feature CANONICALIZE_FIELD_NAMES>;

        $z1 = virtualinvoke $r7.<org.codehaus.jackson.JsonParser$Feature: boolean enabledIn(int)>(i0);

        if $z1 != 0 goto label1;

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8StreamParser: void _throwInternal()>();

     label1:
        return;
    }

    public org.codehaus.jackson.ObjectCodec getCodec()
    {
        org.codehaus.jackson.impl.Utf8StreamParser r0;
        org.codehaus.jackson.ObjectCodec $r1;

        r0 := @this: org.codehaus.jackson.impl.Utf8StreamParser;

        $r1 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: org.codehaus.jackson.ObjectCodec _objectCodec>;

        return $r1;
    }

    public void setCodec(org.codehaus.jackson.ObjectCodec)
    {
        org.codehaus.jackson.impl.Utf8StreamParser r0;
        org.codehaus.jackson.ObjectCodec r1;

        r0 := @this: org.codehaus.jackson.impl.Utf8StreamParser;

        r1 := @parameter0: org.codehaus.jackson.ObjectCodec;

        r0.<org.codehaus.jackson.impl.Utf8StreamParser: org.codehaus.jackson.ObjectCodec _objectCodec> = r1;

        return;
    }

    public org.codehaus.jackson.JsonToken nextToken() throws java.io.IOException, org.codehaus.jackson.JsonParseException
    {
        org.codehaus.jackson.JsonToken $r1, $r2, $r4, $r7, $r8, $r9, $r15, $r26, $r30, $r31, r33;
        org.codehaus.jackson.impl.Utf8StreamParser r0;
        org.codehaus.jackson.impl.JsonReadContext $r3, $r5, $r6, $r10, $r11, $r13, $r18, $r23, $r24, $r25, $r27, $r28, $r29, $r32;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.StringBuilder $r16, $r17, $r20, $r21;
        org.codehaus.jackson.sym.Name $r12;
        long $l2, $l3, $l4, $l5;
        int $i0, $i1, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, i16;
        java.lang.String $r14, $r19, $r22;

        r0 := @this: org.codehaus.jackson.impl.Utf8StreamParser;

        $r2 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: org.codehaus.jackson.JsonToken _currToken>;

        $r1 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken FIELD_NAME>;

        if $r2 != $r1 goto label01;

        $r31 = specialinvoke r0.<org.codehaus.jackson.impl.Utf8StreamParser: org.codehaus.jackson.JsonToken _nextAfterName()>();

        return $r31;

     label01:
        $z0 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: boolean _tokenIncomplete>;

        if $z0 == 0 goto label02;

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8StreamParser: void _skipString()>();

     label02:
        $i0 = specialinvoke r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _skipWSOrEnd()>();

        i16 = $i0;

        if $i0 >= 0 goto label03;

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8StreamParser: void close()>();

        r0.<org.codehaus.jackson.impl.Utf8StreamParser: org.codehaus.jackson.JsonToken _currToken> = null;

        return null;

     label03:
        $l3 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: long _currInputProcessed>;

        $i1 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr>;

        $l2 = (long) $i1;

        $l4 = $l3 + $l2;

        $l5 = $l4 - 1L;

        r0.<org.codehaus.jackson.impl.Utf8StreamParser: long _tokenInputTotal> = $l5;

        $i6 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _currInputRow>;

        r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _tokenInputRow> = $i6;

        $i8 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr>;

        $i7 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _currInputRowStart>;

        $i9 = $i8 - $i7;

        $i10 = $i9 - 1;

        r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _tokenInputCol> = $i10;

        r0.<org.codehaus.jackson.impl.Utf8StreamParser: byte[] _binaryValue> = null;

        if $i0 != 93 goto label05;

        $r27 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: org.codehaus.jackson.impl.JsonReadContext _parsingContext>;

        $z3 = virtualinvoke $r27.<org.codehaus.jackson.impl.JsonReadContext: boolean inArray()>();

        if $z3 != 0 goto label04;

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8StreamParser: void _reportMismatchedEndMarker(int,char)>($i0, 125);

     label04:
        $r28 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: org.codehaus.jackson.impl.JsonReadContext _parsingContext>;

        $r29 = virtualinvoke $r28.<org.codehaus.jackson.impl.JsonReadContext: org.codehaus.jackson.impl.JsonReadContext getParent()>();

        r0.<org.codehaus.jackson.impl.Utf8StreamParser: org.codehaus.jackson.impl.JsonReadContext _parsingContext> = $r29;

        $r30 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken END_ARRAY>;

        r0.<org.codehaus.jackson.impl.Utf8StreamParser: org.codehaus.jackson.JsonToken _currToken> = $r30;

        return $r30;

     label05:
        if $i0 != 125 goto label07;

        $r23 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: org.codehaus.jackson.impl.JsonReadContext _parsingContext>;

        $z2 = virtualinvoke $r23.<org.codehaus.jackson.impl.JsonReadContext: boolean inObject()>();

        if $z2 != 0 goto label06;

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8StreamParser: void _reportMismatchedEndMarker(int,char)>($i0, 93);

     label06:
        $r24 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: org.codehaus.jackson.impl.JsonReadContext _parsingContext>;

        $r25 = virtualinvoke $r24.<org.codehaus.jackson.impl.JsonReadContext: org.codehaus.jackson.impl.JsonReadContext getParent()>();

        r0.<org.codehaus.jackson.impl.Utf8StreamParser: org.codehaus.jackson.impl.JsonReadContext _parsingContext> = $r25;

        $r26 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken END_OBJECT>;

        r0.<org.codehaus.jackson.impl.Utf8StreamParser: org.codehaus.jackson.JsonToken _currToken> = $r26;

        return $r26;

     label07:
        $r3 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: org.codehaus.jackson.impl.JsonReadContext _parsingContext>;

        $z1 = virtualinvoke $r3.<org.codehaus.jackson.impl.JsonReadContext: boolean expectComma()>();

        if $z1 == 0 goto label09;

        if $i0 == 44 goto label08;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("was expecting comma to separate ");

        $r18 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: org.codehaus.jackson.impl.JsonReadContext _parsingContext>;

        $r19 = virtualinvoke $r18.<org.codehaus.jackson.impl.JsonReadContext: java.lang.String getTypeDesc()>();

        $r20 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" entries");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8StreamParser: void _reportUnexpectedChar(int,java.lang.String)>($i0, $r22);

     label08:
        i16 = specialinvoke r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _skipWS()>();

     label09:
        $r32 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: org.codehaus.jackson.impl.JsonReadContext _parsingContext>;

        $z4 = virtualinvoke $r32.<org.codehaus.jackson.impl.JsonReadContext: boolean inObject()>();

        if $z4 == 0 goto label11;

        $r12 = virtualinvoke r0.<org.codehaus.jackson.impl.Utf8StreamParser: org.codehaus.jackson.sym.Name _parseFieldName(int)>(i16);

        $r13 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: org.codehaus.jackson.impl.JsonReadContext _parsingContext>;

        $r14 = virtualinvoke $r12.<org.codehaus.jackson.sym.Name: java.lang.String getName()>();

        virtualinvoke $r13.<org.codehaus.jackson.impl.JsonReadContext: void setCurrentName(java.lang.String)>($r14);

        $r15 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken FIELD_NAME>;

        r0.<org.codehaus.jackson.impl.Utf8StreamParser: org.codehaus.jackson.JsonToken _currToken> = $r15;

        $i15 = specialinvoke r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _skipWS()>();

        if $i15 == 58 goto label10;

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8StreamParser: void _reportUnexpectedChar(int,java.lang.String)>($i15, "was expecting a colon to separate field name and value");

     label10:
        i16 = specialinvoke r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _skipWS()>();

     label11:
        lookupswitch(i16)
        {
            case 34: goto label12;
            case 45: goto label21;
            case 48: goto label21;
            case 49: goto label21;
            case 50: goto label21;
            case 51: goto label21;
            case 52: goto label21;
            case 53: goto label21;
            case 54: goto label21;
            case 55: goto label21;
            case 56: goto label21;
            case 57: goto label21;
            case 91: goto label13;
            case 93: goto label17;
            case 102: goto label19;
            case 110: goto label20;
            case 116: goto label18;
            case 123: goto label15;
            case 125: goto label17;
            default: goto label22;
        };

     label12:
        r0.<org.codehaus.jackson.impl.Utf8StreamParser: boolean _tokenIncomplete> = 1;

        r33 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_STRING>;

        goto label23;

     label13:
        if $z4 != 0 goto label14;

        $r10 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: org.codehaus.jackson.impl.JsonReadContext _parsingContext>;

        $i14 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _tokenInputRow>;

        $i13 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _tokenInputCol>;

        $r11 = virtualinvoke $r10.<org.codehaus.jackson.impl.JsonReadContext: org.codehaus.jackson.impl.JsonReadContext createChildArrayContext(int,int)>($i14, $i13);

        r0.<org.codehaus.jackson.impl.Utf8StreamParser: org.codehaus.jackson.impl.JsonReadContext _parsingContext> = $r11;

     label14:
        r33 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken START_ARRAY>;

        goto label23;

     label15:
        if $z4 != 0 goto label16;

        $r5 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: org.codehaus.jackson.impl.JsonReadContext _parsingContext>;

        $i12 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _tokenInputRow>;

        $i11 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _tokenInputCol>;

        $r6 = virtualinvoke $r5.<org.codehaus.jackson.impl.JsonReadContext: org.codehaus.jackson.impl.JsonReadContext createChildObjectContext(int,int)>($i12, $i11);

        r0.<org.codehaus.jackson.impl.Utf8StreamParser: org.codehaus.jackson.impl.JsonReadContext _parsingContext> = $r6;

     label16:
        r33 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken START_OBJECT>;

        goto label23;

     label17:
        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8StreamParser: void _reportUnexpectedChar(int,java.lang.String)>(i16, "expected a value");

     label18:
        $r7 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_TRUE>;

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8StreamParser: void _matchToken(org.codehaus.jackson.JsonToken)>($r7);

        r33 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_TRUE>;

        goto label23;

     label19:
        $r9 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_FALSE>;

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8StreamParser: void _matchToken(org.codehaus.jackson.JsonToken)>($r9);

        r33 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_FALSE>;

        goto label23;

     label20:
        $r8 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_NULL>;

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8StreamParser: void _matchToken(org.codehaus.jackson.JsonToken)>($r8);

        r33 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_NULL>;

        goto label23;

     label21:
        r33 = virtualinvoke r0.<org.codehaus.jackson.impl.Utf8StreamParser: org.codehaus.jackson.JsonToken parseNumberText(int)>(i16);

        goto label23;

     label22:
        r33 = virtualinvoke r0.<org.codehaus.jackson.impl.Utf8StreamParser: org.codehaus.jackson.JsonToken _handleUnexpectedValue(int)>(i16);

     label23:
        if $z4 == 0 goto label24;

        r0.<org.codehaus.jackson.impl.Utf8StreamParser: org.codehaus.jackson.JsonToken _nextToken> = r33;

        $r4 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: org.codehaus.jackson.JsonToken _currToken>;

        return $r4;

     label24:
        r0.<org.codehaus.jackson.impl.Utf8StreamParser: org.codehaus.jackson.JsonToken _currToken> = r33;

        return r33;
    }

    private final org.codehaus.jackson.JsonToken _nextAfterName()
    {
        org.codehaus.jackson.JsonToken r1, $r2, $r3;
        org.codehaus.jackson.impl.Utf8StreamParser r0;
        org.codehaus.jackson.impl.JsonReadContext $r4, $r5, $r6, $r7;
        int $i0, $i1, $i2, $i3;

        r0 := @this: org.codehaus.jackson.impl.Utf8StreamParser;

        r0.<org.codehaus.jackson.impl.Utf8StreamParser: boolean _nameCopied> = 0;

        r1 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: org.codehaus.jackson.JsonToken _nextToken>;

        r0.<org.codehaus.jackson.impl.Utf8StreamParser: org.codehaus.jackson.JsonToken _nextToken> = null;

        $r2 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken START_ARRAY>;

        if r1 != $r2 goto label1;

        $r6 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: org.codehaus.jackson.impl.JsonReadContext _parsingContext>;

        $i3 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _tokenInputRow>;

        $i2 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _tokenInputCol>;

        $r7 = virtualinvoke $r6.<org.codehaus.jackson.impl.JsonReadContext: org.codehaus.jackson.impl.JsonReadContext createChildArrayContext(int,int)>($i3, $i2);

        r0.<org.codehaus.jackson.impl.Utf8StreamParser: org.codehaus.jackson.impl.JsonReadContext _parsingContext> = $r7;

        goto label2;

     label1:
        $r3 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken START_OBJECT>;

        if r1 != $r3 goto label2;

        $r4 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: org.codehaus.jackson.impl.JsonReadContext _parsingContext>;

        $i1 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _tokenInputRow>;

        $i0 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _tokenInputCol>;

        $r5 = virtualinvoke $r4.<org.codehaus.jackson.impl.JsonReadContext: org.codehaus.jackson.impl.JsonReadContext createChildObjectContext(int,int)>($i1, $i0);

        r0.<org.codehaus.jackson.impl.Utf8StreamParser: org.codehaus.jackson.impl.JsonReadContext _parsingContext> = $r5;

     label2:
        r0.<org.codehaus.jackson.impl.Utf8StreamParser: org.codehaus.jackson.JsonToken _currToken> = r1;

        return r1;
    }

    public void close() throws java.io.IOException
    {
        org.codehaus.jackson.impl.Utf8StreamParser r0;
        org.codehaus.jackson.sym.BytesToNameCanonicalizer $r1;

        r0 := @this: org.codehaus.jackson.impl.Utf8StreamParser;

        specialinvoke r0.<org.codehaus.jackson.impl.Utf8NumericParser: void close()>();

        $r1 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: org.codehaus.jackson.sym.BytesToNameCanonicalizer _symbols>;

        virtualinvoke $r1.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: void release()>();

        return;
    }

    protected final org.codehaus.jackson.sym.Name _parseFieldName(int) throws java.io.IOException, org.codehaus.jackson.JsonParseException
    {
        byte[] $r2, $r3, $r4, $r5, $r6;
        org.codehaus.jackson.impl.Utf8StreamParser r0;
        byte $b5, $b9, $b14, $b19, $b24;
        short s27, s28, s30, s32, s34, $s35, $s39, $s47, $s52, $s57;
        int[] $r1;
        org.codehaus.jackson.sym.Name $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19;
        int $i0, $i1, $i2, $i3, $i4, $i6, $i7, $i8, $i10, $i11, $i12, $i13, $i15, $i16, $i17, $i18, $i20, $i21, $i22, $i23, $i25, i26, i29, i31, i33, $i36, $i37, $i38, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i48, $i49, $i50, $i51, $i53, $i54, $i55, $i56, $i58, $i59, $i60, $i61;

        r0 := @this: org.codehaus.jackson.impl.Utf8StreamParser;

        i26 := @parameter0: int;

        if i26 == 34 goto label01;

        $r19 = virtualinvoke r0.<org.codehaus.jackson.impl.Utf8StreamParser: org.codehaus.jackson.sym.Name _handleUnusualFieldName(int)>(i26);

        return $r19;

     label01:
        $i1 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputEnd>;

        $i0 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr>;

        $i2 = $i1 - $i0;

        if $i2 >= 9 goto label02;

        $r18 = virtualinvoke r0.<org.codehaus.jackson.impl.Utf8StreamParser: org.codehaus.jackson.sym.Name slowParseFieldName()>();

        return $r18;

     label02:
        $r1 = staticinvoke <org.codehaus.jackson.util.CharTypes: int[] getInputCodeLatin1()>();

        $r2 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: byte[] _inputBuffer>;

        $i3 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr>;

        $i4 = $i3 + 1;

        r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr> = $i4;

        $b5 = $r2[$i3];

        $s35 = (short) $b5;

        s27 = $s35 & 255;

        $i36 = (int) s27;

        $i6 = $r1[$i36];

        if $i6 == 0 goto label04;

        $i37 = (int) s27;

        if $i37 != 34 goto label03;

        $r17 = staticinvoke <org.codehaus.jackson.sym.BytesToNameCanonicalizer: org.codehaus.jackson.sym.Name getEmptyName()>();

        return $r17;

     label03:
        $i38 = (int) s27;

        $r16 = specialinvoke r0.<org.codehaus.jackson.impl.Utf8StreamParser: org.codehaus.jackson.sym.Name parseFieldName(int,int,int)>(0, $i38, 0);

        return $r16;

     label04:
        $r3 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: byte[] _inputBuffer>;

        $i7 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr>;

        $i8 = $i7 + 1;

        r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr> = $i8;

        $b9 = $r3[$i7];

        $s39 = (short) $b9;

        s28 = $s39 & 255;

        $i40 = (int) s28;

        $i10 = $r1[$i40];

        if $i10 == 0 goto label06;

        $i41 = (int) s28;

        if $i41 != 34 goto label05;

        $i42 = (int) s27;

        $r15 = specialinvoke r0.<org.codehaus.jackson.impl.Utf8StreamParser: org.codehaus.jackson.sym.Name findName(int,int)>($i42, 1);

        return $r15;

     label05:
        $i43 = (int) s27;

        $i44 = (int) s28;

        $r14 = specialinvoke r0.<org.codehaus.jackson.impl.Utf8StreamParser: org.codehaus.jackson.sym.Name parseFieldName(int,int,int)>($i43, $i44, 1);

        return $r14;

     label06:
        $i45 = (int) s27;

        $i11 = $i45 << 8;

        $i46 = (int) s28;

        i29 = $i11 | $i46;

        $r4 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: byte[] _inputBuffer>;

        $i12 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr>;

        $i13 = $i12 + 1;

        r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr> = $i13;

        $b14 = $r4[$i12];

        $s47 = (short) $b14;

        s30 = $s47 & 255;

        $i48 = (int) s30;

        $i15 = $r1[$i48];

        if $i15 == 0 goto label08;

        $i49 = (int) s30;

        if $i49 != 34 goto label07;

        $r13 = specialinvoke r0.<org.codehaus.jackson.impl.Utf8StreamParser: org.codehaus.jackson.sym.Name findName(int,int)>(i29, 2);

        return $r13;

     label07:
        $i50 = (int) s30;

        $r12 = specialinvoke r0.<org.codehaus.jackson.impl.Utf8StreamParser: org.codehaus.jackson.sym.Name parseFieldName(int,int,int)>(i29, $i50, 2);

        return $r12;

     label08:
        $i16 = i29 << 8;

        $i51 = (int) s30;

        i31 = $i16 | $i51;

        $r5 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: byte[] _inputBuffer>;

        $i17 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr>;

        $i18 = $i17 + 1;

        r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr> = $i18;

        $b19 = $r5[$i17];

        $s52 = (short) $b19;

        s32 = $s52 & 255;

        $i53 = (int) s32;

        $i20 = $r1[$i53];

        if $i20 == 0 goto label10;

        $i54 = (int) s32;

        if $i54 != 34 goto label09;

        $r11 = specialinvoke r0.<org.codehaus.jackson.impl.Utf8StreamParser: org.codehaus.jackson.sym.Name findName(int,int)>(i31, 3);

        return $r11;

     label09:
        $i55 = (int) s32;

        $r10 = specialinvoke r0.<org.codehaus.jackson.impl.Utf8StreamParser: org.codehaus.jackson.sym.Name parseFieldName(int,int,int)>(i31, $i55, 3);

        return $r10;

     label10:
        $i21 = i31 << 8;

        $i56 = (int) s32;

        i33 = $i21 | $i56;

        $r6 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: byte[] _inputBuffer>;

        $i22 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr>;

        $i23 = $i22 + 1;

        r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr> = $i23;

        $b24 = $r6[$i22];

        $s57 = (short) $b24;

        s34 = $s57 & 255;

        $i58 = (int) s34;

        $i25 = $r1[$i58];

        if $i25 == 0 goto label12;

        $i59 = (int) s34;

        if $i59 != 34 goto label11;

        $r9 = specialinvoke r0.<org.codehaus.jackson.impl.Utf8StreamParser: org.codehaus.jackson.sym.Name findName(int,int)>(i33, 4);

        return $r9;

     label11:
        $i60 = (int) s34;

        $r8 = specialinvoke r0.<org.codehaus.jackson.impl.Utf8StreamParser: org.codehaus.jackson.sym.Name parseFieldName(int,int,int)>(i33, $i60, 4);

        return $r8;

     label12:
        $i61 = (int) s34;

        $r7 = virtualinvoke r0.<org.codehaus.jackson.impl.Utf8StreamParser: org.codehaus.jackson.sym.Name parseMediumFieldName(int,int)>(i33, $i61);

        return $r7;
    }

    protected org.codehaus.jackson.sym.Name parseMediumFieldName(int, int) throws java.io.IOException, org.codehaus.jackson.JsonParseException
    {
        byte[] $r2, $r3, $r4, $r5;
        org.codehaus.jackson.impl.Utf8StreamParser r1;
        byte $b2, $b7, $b12, $b17;
        short s21, s23, s25, s27, $s28, $s33, $s38, $s43;
        int[] $r0, $r6, $r7;
        org.codehaus.jackson.sym.Name $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16;
        int $i0, $i1, $i3, $i4, $i5, $i6, $i8, $i9, $i10, $i11, $i13, $i14, $i15, $i16, $i18, i19, i20, i22, i24, i26, $i29, $i30, $i31, $i32, $i34, $i35, $i36, $i37, $i39, $i40, $i41, $i42, $i44, $i45, $i46, $i47;

        r1 := @this: org.codehaus.jackson.impl.Utf8StreamParser;

        i19 := @parameter0: int;

        i20 := @parameter1: int;

        $r0 = staticinvoke <org.codehaus.jackson.util.CharTypes: int[] getInputCodeLatin1()>();

        $r2 = r1.<org.codehaus.jackson.impl.Utf8StreamParser: byte[] _inputBuffer>;

        $i0 = r1.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr>;

        $i1 = $i0 + 1;

        r1.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr> = $i1;

        $b2 = $r2[$i0];

        $s28 = (short) $b2;

        s21 = $s28 & 255;

        $i29 = (int) s21;

        $i3 = $r0[$i29];

        if $i3 == 0 goto label2;

        $i30 = (int) s21;

        if $i30 != 34 goto label1;

        $r16 = specialinvoke r1.<org.codehaus.jackson.impl.Utf8StreamParser: org.codehaus.jackson.sym.Name findName(int,int,int)>(i19, i20, 1);

        return $r16;

     label1:
        $i31 = (int) s21;

        $r15 = specialinvoke r1.<org.codehaus.jackson.impl.Utf8StreamParser: org.codehaus.jackson.sym.Name parseFieldName(int,int,int,int)>(i19, i20, $i31, 1);

        return $r15;

     label2:
        $i4 = i20 << 8;

        $i32 = (int) s21;

        i22 = $i4 | $i32;

        $r3 = r1.<org.codehaus.jackson.impl.Utf8StreamParser: byte[] _inputBuffer>;

        $i5 = r1.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr>;

        $i6 = $i5 + 1;

        r1.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr> = $i6;

        $b7 = $r3[$i5];

        $s33 = (short) $b7;

        s23 = $s33 & 255;

        $i34 = (int) s23;

        $i8 = $r0[$i34];

        if $i8 == 0 goto label4;

        $i35 = (int) s23;

        if $i35 != 34 goto label3;

        $r14 = specialinvoke r1.<org.codehaus.jackson.impl.Utf8StreamParser: org.codehaus.jackson.sym.Name findName(int,int,int)>(i19, i22, 2);

        return $r14;

     label3:
        $i36 = (int) s23;

        $r13 = specialinvoke r1.<org.codehaus.jackson.impl.Utf8StreamParser: org.codehaus.jackson.sym.Name parseFieldName(int,int,int,int)>(i19, i22, $i36, 2);

        return $r13;

     label4:
        $i9 = i22 << 8;

        $i37 = (int) s23;

        i24 = $i9 | $i37;

        $r4 = r1.<org.codehaus.jackson.impl.Utf8StreamParser: byte[] _inputBuffer>;

        $i10 = r1.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr>;

        $i11 = $i10 + 1;

        r1.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr> = $i11;

        $b12 = $r4[$i10];

        $s38 = (short) $b12;

        s25 = $s38 & 255;

        $i39 = (int) s25;

        $i13 = $r0[$i39];

        if $i13 == 0 goto label6;

        $i40 = (int) s25;

        if $i40 != 34 goto label5;

        $r12 = specialinvoke r1.<org.codehaus.jackson.impl.Utf8StreamParser: org.codehaus.jackson.sym.Name findName(int,int,int)>(i19, i24, 3);

        return $r12;

     label5:
        $i41 = (int) s25;

        $r11 = specialinvoke r1.<org.codehaus.jackson.impl.Utf8StreamParser: org.codehaus.jackson.sym.Name parseFieldName(int,int,int,int)>(i19, i24, $i41, 3);

        return $r11;

     label6:
        $i14 = i24 << 8;

        $i42 = (int) s25;

        i26 = $i14 | $i42;

        $r5 = r1.<org.codehaus.jackson.impl.Utf8StreamParser: byte[] _inputBuffer>;

        $i15 = r1.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr>;

        $i16 = $i15 + 1;

        r1.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr> = $i16;

        $b17 = $r5[$i15];

        $s43 = (short) $b17;

        s27 = $s43 & 255;

        $i44 = (int) s27;

        $i18 = $r0[$i44];

        if $i18 == 0 goto label8;

        $i45 = (int) s27;

        if $i45 != 34 goto label7;

        $r10 = specialinvoke r1.<org.codehaus.jackson.impl.Utf8StreamParser: org.codehaus.jackson.sym.Name findName(int,int,int)>(i19, i26, 4);

        return $r10;

     label7:
        $i46 = (int) s27;

        $r9 = specialinvoke r1.<org.codehaus.jackson.impl.Utf8StreamParser: org.codehaus.jackson.sym.Name parseFieldName(int,int,int,int)>(i19, i26, $i46, 4);

        return $r9;

     label8:
        $r6 = r1.<org.codehaus.jackson.impl.Utf8StreamParser: int[] _quadBuffer>;

        $r6[0] = i19;

        $r7 = r1.<org.codehaus.jackson.impl.Utf8StreamParser: int[] _quadBuffer>;

        $r7[1] = i26;

        $i47 = (int) s27;

        $r8 = virtualinvoke r1.<org.codehaus.jackson.impl.Utf8StreamParser: org.codehaus.jackson.sym.Name parseLongFieldName(int)>($i47);

        return $r8;
    }

    protected org.codehaus.jackson.sym.Name parseLongFieldName(int) throws java.io.IOException, org.codehaus.jackson.JsonParseException
    {
        byte[] $r2, $r3, $r4, $r5;
        org.codehaus.jackson.impl.Utf8StreamParser r1;
        byte $b5, $b10, $b15, $b20;
        short s26, s28, s30, s32, $s33, $s38, $s43, $s48;
        int[] $r0, $r6, $r7, $r8, $r9, $r10, $r12, $r14, $r16, $r18, $r20, $r22, $r24, $r26;
        org.codehaus.jackson.sym.Name $r11, $r13, $r15, $r17, $r19, $r21, $r23, $r25, $r27;
        int $i0, $i1, $i2, $i3, $i4, $i6, $i7, $i8, $i9, $i11, $i12, $i13, $i14, $i16, $i17, $i18, $i19, $i21, $i22, $i23, i24, i25, i27, i29, i31, $i34, $i35, $i36, $i37, $i39, $i40, $i41, $i42, $i44, $i45, $i46, $i47, $i49, $i50, $i51, $i52;

        r1 := @this: org.codehaus.jackson.impl.Utf8StreamParser;

        i24 := @parameter0: int;

        $r0 = staticinvoke <org.codehaus.jackson.util.CharTypes: int[] getInputCodeLatin1()>();

        i25 = 2;

     label01:
        $i1 = r1.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputEnd>;

        $i0 = r1.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr>;

        $i2 = $i1 - $i0;

        if $i2 >= 4 goto label02;

        $r26 = r1.<org.codehaus.jackson.impl.Utf8StreamParser: int[] _quadBuffer>;

        $r27 = virtualinvoke r1.<org.codehaus.jackson.impl.Utf8StreamParser: org.codehaus.jackson.sym.Name parseEscapedFieldName(int[],int,int,int,int)>($r26, i25, 0, i24, 0);

        return $r27;

     label02:
        $r2 = r1.<org.codehaus.jackson.impl.Utf8StreamParser: byte[] _inputBuffer>;

        $i3 = r1.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr>;

        $i4 = $i3 + 1;

        r1.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr> = $i4;

        $b5 = $r2[$i3];

        $s33 = (short) $b5;

        s26 = $s33 & 255;

        $i34 = (int) s26;

        $i6 = $r0[$i34];

        if $i6 == 0 goto label04;

        $i35 = (int) s26;

        if $i35 != 34 goto label03;

        $r24 = r1.<org.codehaus.jackson.impl.Utf8StreamParser: int[] _quadBuffer>;

        $r25 = specialinvoke r1.<org.codehaus.jackson.impl.Utf8StreamParser: org.codehaus.jackson.sym.Name findName(int[],int,int,int)>($r24, i25, i24, 1);

        return $r25;

     label03:
        $r22 = r1.<org.codehaus.jackson.impl.Utf8StreamParser: int[] _quadBuffer>;

        $i36 = (int) s26;

        $r23 = virtualinvoke r1.<org.codehaus.jackson.impl.Utf8StreamParser: org.codehaus.jackson.sym.Name parseEscapedFieldName(int[],int,int,int,int)>($r22, i25, i24, $i36, 1);

        return $r23;

     label04:
        $i7 = i24 << 8;

        $i37 = (int) s26;

        i27 = $i7 | $i37;

        $r3 = r1.<org.codehaus.jackson.impl.Utf8StreamParser: byte[] _inputBuffer>;

        $i8 = r1.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr>;

        $i9 = $i8 + 1;

        r1.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr> = $i9;

        $b10 = $r3[$i8];

        $s38 = (short) $b10;

        s28 = $s38 & 255;

        $i39 = (int) s28;

        $i11 = $r0[$i39];

        if $i11 == 0 goto label06;

        $i40 = (int) s28;

        if $i40 != 34 goto label05;

        $r20 = r1.<org.codehaus.jackson.impl.Utf8StreamParser: int[] _quadBuffer>;

        $r21 = specialinvoke r1.<org.codehaus.jackson.impl.Utf8StreamParser: org.codehaus.jackson.sym.Name findName(int[],int,int,int)>($r20, i25, i27, 2);

        return $r21;

     label05:
        $r18 = r1.<org.codehaus.jackson.impl.Utf8StreamParser: int[] _quadBuffer>;

        $i41 = (int) s28;

        $r19 = virtualinvoke r1.<org.codehaus.jackson.impl.Utf8StreamParser: org.codehaus.jackson.sym.Name parseEscapedFieldName(int[],int,int,int,int)>($r18, i25, i27, $i41, 2);

        return $r19;

     label06:
        $i12 = i27 << 8;

        $i42 = (int) s28;

        i29 = $i12 | $i42;

        $r4 = r1.<org.codehaus.jackson.impl.Utf8StreamParser: byte[] _inputBuffer>;

        $i13 = r1.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr>;

        $i14 = $i13 + 1;

        r1.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr> = $i14;

        $b15 = $r4[$i13];

        $s43 = (short) $b15;

        s30 = $s43 & 255;

        $i44 = (int) s30;

        $i16 = $r0[$i44];

        if $i16 == 0 goto label08;

        $i45 = (int) s30;

        if $i45 != 34 goto label07;

        $r16 = r1.<org.codehaus.jackson.impl.Utf8StreamParser: int[] _quadBuffer>;

        $r17 = specialinvoke r1.<org.codehaus.jackson.impl.Utf8StreamParser: org.codehaus.jackson.sym.Name findName(int[],int,int,int)>($r16, i25, i29, 3);

        return $r17;

     label07:
        $r14 = r1.<org.codehaus.jackson.impl.Utf8StreamParser: int[] _quadBuffer>;

        $i46 = (int) s30;

        $r15 = virtualinvoke r1.<org.codehaus.jackson.impl.Utf8StreamParser: org.codehaus.jackson.sym.Name parseEscapedFieldName(int[],int,int,int,int)>($r14, i25, i29, $i46, 3);

        return $r15;

     label08:
        $i17 = i29 << 8;

        $i47 = (int) s30;

        i31 = $i17 | $i47;

        $r5 = r1.<org.codehaus.jackson.impl.Utf8StreamParser: byte[] _inputBuffer>;

        $i18 = r1.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr>;

        $i19 = $i18 + 1;

        r1.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr> = $i19;

        $b20 = $r5[$i18];

        $s48 = (short) $b20;

        s32 = $s48 & 255;

        $i49 = (int) s32;

        $i21 = $r0[$i49];

        if $i21 == 0 goto label10;

        $i50 = (int) s32;

        if $i50 != 34 goto label09;

        $r12 = r1.<org.codehaus.jackson.impl.Utf8StreamParser: int[] _quadBuffer>;

        $r13 = specialinvoke r1.<org.codehaus.jackson.impl.Utf8StreamParser: org.codehaus.jackson.sym.Name findName(int[],int,int,int)>($r12, i25, i31, 4);

        return $r13;

     label09:
        $r10 = r1.<org.codehaus.jackson.impl.Utf8StreamParser: int[] _quadBuffer>;

        $i51 = (int) s32;

        $r11 = virtualinvoke r1.<org.codehaus.jackson.impl.Utf8StreamParser: org.codehaus.jackson.sym.Name parseEscapedFieldName(int[],int,int,int,int)>($r10, i25, i31, $i51, 4);

        return $r11;

     label10:
        $r6 = r1.<org.codehaus.jackson.impl.Utf8StreamParser: int[] _quadBuffer>;

        $i22 = lengthof $r6;

        if i25 < $i22 goto label11;

        $r8 = r1.<org.codehaus.jackson.impl.Utf8StreamParser: int[] _quadBuffer>;

        $r9 = staticinvoke <org.codehaus.jackson.impl.Utf8StreamParser: int[] growArrayBy(int[],int)>($r8, i25);

        r1.<org.codehaus.jackson.impl.Utf8StreamParser: int[] _quadBuffer> = $r9;

     label11:
        $r7 = r1.<org.codehaus.jackson.impl.Utf8StreamParser: int[] _quadBuffer>;

        $i23 = i25;

        i25 = i25 + 1;

        $r7[$i23] = i31;

        $i52 = (int) s32;

        i24 = $i52;

        goto label01;
    }

    protected org.codehaus.jackson.sym.Name slowParseFieldName() throws java.io.IOException, org.codehaus.jackson.JsonParseException
    {
        byte[] $r4;
        org.codehaus.jackson.sym.Name $r2, $r3;
        org.codehaus.jackson.impl.Utf8StreamParser r0;
        short $s5, $s6;
        byte $b4;
        int[] $r1;
        int $i0, $i1, $i2, $i3, $i7, $i8;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.impl.Utf8StreamParser;

        $i1 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr>;

        $i0 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputEnd>;

        if $i1 < $i0 goto label1;

        $z0 = virtualinvoke r0.<org.codehaus.jackson.impl.Utf8StreamParser: boolean loadMore()>();

        if $z0 != 0 goto label1;

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8StreamParser: void _reportInvalidEOF(java.lang.String)>(": was expecting closing \'\"\' for name");

     label1:
        $r4 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: byte[] _inputBuffer>;

        $i2 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr>;

        $i3 = $i2 + 1;

        r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr> = $i3;

        $b4 = $r4[$i2];

        $s6 = (short) $b4;

        $s5 = $s6 & 255;

        $i7 = (int) $s5;

        if $i7 != 34 goto label2;

        $r3 = staticinvoke <org.codehaus.jackson.sym.BytesToNameCanonicalizer: org.codehaus.jackson.sym.Name getEmptyName()>();

        return $r3;

     label2:
        $r1 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: int[] _quadBuffer>;

        $i8 = (int) $s5;

        $r2 = virtualinvoke r0.<org.codehaus.jackson.impl.Utf8StreamParser: org.codehaus.jackson.sym.Name parseEscapedFieldName(int[],int,int,int,int)>($r1, 0, 0, $i8, 0);

        return $r2;
    }

    private final org.codehaus.jackson.sym.Name parseFieldName(int, int, int) throws java.io.IOException, org.codehaus.jackson.JsonParseException
    {
        org.codehaus.jackson.sym.Name $r2;
        int[] $r1;
        int i0, i1, i2;
        org.codehaus.jackson.impl.Utf8StreamParser r0;

        r0 := @this: org.codehaus.jackson.impl.Utf8StreamParser;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        $r1 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: int[] _quadBuffer>;

        $r2 = virtualinvoke r0.<org.codehaus.jackson.impl.Utf8StreamParser: org.codehaus.jackson.sym.Name parseEscapedFieldName(int[],int,int,int,int)>($r1, 0, i0, i1, i2);

        return $r2;
    }

    private final org.codehaus.jackson.sym.Name parseFieldName(int, int, int, int) throws java.io.IOException, org.codehaus.jackson.JsonParseException
    {
        org.codehaus.jackson.sym.Name $r3;
        org.codehaus.jackson.impl.Utf8StreamParser r0;
        int[] $r1, $r2;
        int i0, i1, i2, i3;

        r0 := @this: org.codehaus.jackson.impl.Utf8StreamParser;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        $r1 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: int[] _quadBuffer>;

        $r1[0] = i0;

        $r2 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: int[] _quadBuffer>;

        $r3 = virtualinvoke r0.<org.codehaus.jackson.impl.Utf8StreamParser: org.codehaus.jackson.sym.Name parseEscapedFieldName(int[],int,int,int,int)>($r2, 1, i1, i2, i3);

        return $r3;
    }

    protected org.codehaus.jackson.sym.Name parseEscapedFieldName(int[], int, int, int, int) throws java.io.IOException, org.codehaus.jackson.JsonParseException
    {
        byte[] $r7;
        org.codehaus.jackson.impl.Utf8StreamParser r1;
        byte $b35;
        int[] $r0, $r2, $r3, $r4, $r5, r6;
        boolean $z0;
        org.codehaus.jackson.sym.Name $r9, r10;
        org.codehaus.jackson.sym.BytesToNameCanonicalizer $r8;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, i20, i21, i22, i23, i24, i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i37, $i38;
        char $c36;

        r1 := @this: org.codehaus.jackson.impl.Utf8StreamParser;

        r6 := @parameter0: int[];

        i20 := @parameter1: int;

        i21 := @parameter2: int;

        i22 := @parameter3: int;

        i23 := @parameter4: int;

        $r0 = staticinvoke <org.codehaus.jackson.util.CharTypes: int[] getInputCodeLatin1()>();

     label01:
        $i0 = $r0[i22];

        if $i0 == 0 goto label11;

        if i22 != 34 goto label02;

        goto label16;

     label02:
        if i22 == 92 goto label03;

        virtualinvoke r1.<org.codehaus.jackson.impl.Utf8StreamParser: void _throwUnquotedSpace(int,java.lang.String)>(i22, "name");

        goto label04;

     label03:
        $c36 = virtualinvoke r1.<org.codehaus.jackson.impl.Utf8StreamParser: char _decodeEscaped()>();

        $i37 = (int) $c36;

        i22 = $i37;

     label04:
        if i22 <= 127 goto label11;

        if i23 < 4 goto label06;

        $i14 = lengthof r6;

        if i20 < $i14 goto label05;

        $i16 = lengthof r6;

        $r4 = staticinvoke <org.codehaus.jackson.impl.Utf8StreamParser: int[] growArrayBy(int[],int)>(r6, $i16);

        r6 = $r4;

        r1.<org.codehaus.jackson.impl.Utf8StreamParser: int[] _quadBuffer> = $r4;

     label05:
        $i15 = i20;

        i20 = i20 + 1;

        r6[$i15] = i21;

        i21 = 0;

        i23 = 0;

     label06:
        if i22 >= 2048 goto label07;

        $i13 = i21 << 8;

        $i11 = i22 >> 6;

        $i12 = 192 | $i11;

        i21 = $i13 | $i12;

        i23 = i23 + 1;

        goto label10;

     label07:
        $i7 = i21 << 8;

        $i5 = i22 >> 12;

        $i6 = 224 | $i5;

        i24 = $i7 | $i6;

        i25 = i23 + 1;

        if i25 < 4 goto label09;

        $i8 = lengthof r6;

        if i20 < $i8 goto label08;

        $i10 = lengthof r6;

        $r3 = staticinvoke <org.codehaus.jackson.impl.Utf8StreamParser: int[] growArrayBy(int[],int)>(r6, $i10);

        r6 = $r3;

        r1.<org.codehaus.jackson.impl.Utf8StreamParser: int[] _quadBuffer> = $r3;

     label08:
        $i9 = i20;

        i20 = i20 + 1;

        r6[$i9] = i24;

        i24 = 0;

        i25 = 0;

     label09:
        $i26 = i24 << 8;

        $i27 = i22 >> 6;

        $i28 = $i27 & 63;

        $i29 = 128 | $i28;

        i21 = $i26 | $i29;

        i23 = i25 + 1;

     label10:
        $i30 = i22 & 63;

        i22 = 128 | $i30;

     label11:
        if i23 >= 4 goto label12;

        i23 = i23 + 1;

        $i4 = i21 << 8;

        i21 = $i4 | i22;

        goto label14;

     label12:
        $i1 = lengthof r6;

        if i20 < $i1 goto label13;

        $i3 = lengthof r6;

        $r2 = staticinvoke <org.codehaus.jackson.impl.Utf8StreamParser: int[] growArrayBy(int[],int)>(r6, $i3);

        r6 = $r2;

        r1.<org.codehaus.jackson.impl.Utf8StreamParser: int[] _quadBuffer> = $r2;

     label13:
        $i2 = i20;

        i20 = i20 + 1;

        r6[$i2] = i21;

        i21 = i22;

        i23 = 1;

     label14:
        $i31 = r1.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr>;

        $i32 = r1.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputEnd>;

        if $i31 < $i32 goto label15;

        $z0 = virtualinvoke r1.<org.codehaus.jackson.impl.Utf8StreamParser: boolean loadMore()>();

        if $z0 != 0 goto label15;

        virtualinvoke r1.<org.codehaus.jackson.impl.Utf8StreamParser: void _reportInvalidEOF(java.lang.String)>(" in field name");

     label15:
        $r7 = r1.<org.codehaus.jackson.impl.Utf8StreamParser: byte[] _inputBuffer>;

        $i33 = r1.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr>;

        $i34 = $i33 + 1;

        r1.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr> = $i34;

        $b35 = $r7[$i33];

        $i38 = (int) $b35;

        i22 = $i38 & 255;

        goto label01;

     label16:
        if i23 <= 0 goto label18;

        $i17 = lengthof r6;

        if i20 < $i17 goto label17;

        $i19 = lengthof r6;

        $r5 = staticinvoke <org.codehaus.jackson.impl.Utf8StreamParser: int[] growArrayBy(int[],int)>(r6, $i19);

        r6 = $r5;

        r1.<org.codehaus.jackson.impl.Utf8StreamParser: int[] _quadBuffer> = $r5;

     label17:
        $i18 = i20;

        i20 = i20 + 1;

        r6[$i18] = i21;

     label18:
        $r8 = r1.<org.codehaus.jackson.impl.Utf8StreamParser: org.codehaus.jackson.sym.BytesToNameCanonicalizer _symbols>;

        $r9 = virtualinvoke $r8.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: org.codehaus.jackson.sym.Name findName(int[],int)>(r6, i20);

        r10 = $r9;

        if $r9 != null goto label19;

        r10 = specialinvoke r1.<org.codehaus.jackson.impl.Utf8StreamParser: org.codehaus.jackson.sym.Name addName(int[],int,int)>(r6, i20, i23);

     label19:
        return r10;
    }

    protected final org.codehaus.jackson.sym.Name _handleUnusualFieldName(int) throws java.io.IOException, org.codehaus.jackson.JsonParseException
    {
        byte[] $r8;
        org.codehaus.jackson.impl.Utf8StreamParser r0;
        byte $b17;
        int[] $r2, $r3, $r4, r7;
        boolean $z0, $z1, $z2;
        org.codehaus.jackson.JsonParser$Feature $r1, $r5;
        org.codehaus.jackson.sym.Name $r6, $r10, r11;
        org.codehaus.jackson.sym.BytesToNameCanonicalizer $r9;
        short $s18, $s20;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10, i11, i12, i13, $i14, $i15, $i16, $i19, $i21, $i22;

        r0 := @this: org.codehaus.jackson.impl.Utf8StreamParser;

        i10 := @parameter0: int;

        if i10 != 39 goto label01;

        $r5 = <org.codehaus.jackson.JsonParser$Feature: org.codehaus.jackson.JsonParser$Feature ALLOW_SINGLE_QUOTES>;

        $z2 = virtualinvoke r0.<org.codehaus.jackson.impl.Utf8StreamParser: boolean isEnabled(org.codehaus.jackson.JsonParser$Feature)>($r5);

        if $z2 == 0 goto label01;

        $r6 = virtualinvoke r0.<org.codehaus.jackson.impl.Utf8StreamParser: org.codehaus.jackson.sym.Name _parseApostropheFieldName()>();

        return $r6;

     label01:
        $r1 = <org.codehaus.jackson.JsonParser$Feature: org.codehaus.jackson.JsonParser$Feature ALLOW_UNQUOTED_FIELD_NAMES>;

        $z0 = virtualinvoke r0.<org.codehaus.jackson.impl.Utf8StreamParser: boolean isEnabled(org.codehaus.jackson.JsonParser$Feature)>($r1);

        if $z0 != 0 goto label02;

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8StreamParser: void _reportUnexpectedChar(int,java.lang.String)>(i10, "was expecting double-quote to start field name");

     label02:
        $r2 = staticinvoke <org.codehaus.jackson.util.CharTypes: int[] getInputCodeUtf8JsNames()>();

        $i0 = $r2[i10];

        if $i0 == 0 goto label03;

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8StreamParser: void _reportUnexpectedChar(int,java.lang.String)>(i10, "was expecting either valid name character (for unquoted name) or double-quote (for quoted) to start field name");

     label03:
        r7 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: int[] _quadBuffer>;

        i11 = 0;

        i12 = 0;

        i13 = 0;

     label04:
        if i13 >= 4 goto label05;

        i13 = i13 + 1;

        $i9 = i12 << 8;

        i12 = $i9 | i10;

        goto label07;

     label05:
        $i1 = lengthof r7;

        if i11 < $i1 goto label06;

        $i8 = lengthof r7;

        $r4 = staticinvoke <org.codehaus.jackson.impl.Utf8StreamParser: int[] growArrayBy(int[],int)>(r7, $i8);

        r7 = $r4;

        r0.<org.codehaus.jackson.impl.Utf8StreamParser: int[] _quadBuffer> = $r4;

     label06:
        $i2 = i11;

        i11 = i11 + 1;

        r7[$i2] = i12;

        i12 = i10;

        i13 = 1;

     label07:
        $i14 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr>;

        $i15 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputEnd>;

        if $i14 < $i15 goto label08;

        $z1 = virtualinvoke r0.<org.codehaus.jackson.impl.Utf8StreamParser: boolean loadMore()>();

        if $z1 != 0 goto label08;

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8StreamParser: void _reportInvalidEOF(java.lang.String)>(" in field name");

     label08:
        $r8 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: byte[] _inputBuffer>;

        $i16 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr>;

        $b17 = $r8[$i16];

        $s20 = (short) $b17;

        $s18 = $s20 & 255;

        $i21 = (int) $s18;

        i10 = $i21;

        $i22 = (int) $s18;

        $i19 = $r2[$i22];

        if $i19 == 0 goto label09;

        goto label10;

     label09:
        $i3 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr>;

        $i4 = $i3 + 1;

        r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr> = $i4;

        goto label04;

     label10:
        if i13 <= 0 goto label12;

        $i5 = lengthof r7;

        if i11 < $i5 goto label11;

        $i7 = lengthof r7;

        $r3 = staticinvoke <org.codehaus.jackson.impl.Utf8StreamParser: int[] growArrayBy(int[],int)>(r7, $i7);

        r7 = $r3;

        r0.<org.codehaus.jackson.impl.Utf8StreamParser: int[] _quadBuffer> = $r3;

     label11:
        $i6 = i11;

        i11 = i11 + 1;

        r7[$i6] = i12;

     label12:
        $r9 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: org.codehaus.jackson.sym.BytesToNameCanonicalizer _symbols>;

        $r10 = virtualinvoke $r9.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: org.codehaus.jackson.sym.Name findName(int[],int)>(r7, i11);

        r11 = $r10;

        if $r10 != null goto label13;

        r11 = specialinvoke r0.<org.codehaus.jackson.impl.Utf8StreamParser: org.codehaus.jackson.sym.Name addName(int[],int,int)>(r7, i11, i13);

     label13:
        return r11;
    }

    protected final org.codehaus.jackson.sym.Name _parseApostropheFieldName() throws java.io.IOException, org.codehaus.jackson.JsonParseException
    {
        byte[] $r7, $r9;
        org.codehaus.jackson.impl.Utf8StreamParser r0;
        byte $b24, $b41;
        int[] $r1, $r2, $r3, $r4, $r5, r8;
        boolean $z0, $z1;
        org.codehaus.jackson.sym.Name $r6, $r11, r12;
        org.codehaus.jackson.sym.BytesToNameCanonicalizer $r10;
        short $s25, $s42;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, i26, i27, i28, i29, i30, i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i43;

        r0 := @this: org.codehaus.jackson.impl.Utf8StreamParser;

        $i1 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr>;

        $i0 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputEnd>;

        if $i1 < $i0 goto label01;

        $z1 = virtualinvoke r0.<org.codehaus.jackson.impl.Utf8StreamParser: boolean loadMore()>();

        if $z1 != 0 goto label01;

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8StreamParser: void _reportInvalidEOF(java.lang.String)>(": was expecting closing \'\'\' for name");

     label01:
        $r7 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: byte[] _inputBuffer>;

        $i22 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr>;

        $i23 = $i22 + 1;

        r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr> = $i23;

        $b24 = $r7[$i22];

        $s42 = (short) $b24;

        $s25 = $s42 & 255;

        i26 = $s25;

        $i43 = (int) $s25;

        if $i43 != 39 goto label02;

        $r6 = staticinvoke <org.codehaus.jackson.sym.BytesToNameCanonicalizer: org.codehaus.jackson.sym.Name getEmptyName()>();

        return $r6;

     label02:
        r8 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: int[] _quadBuffer>;

        i27 = 0;

        i28 = 0;

        i29 = 0;

        $r1 = staticinvoke <org.codehaus.jackson.util.CharTypes: int[] getInputCodeLatin1()>();

     label03:
        if i26 != 39 goto label04;

        goto label18;

     label04:
        if i26 == 34 goto label13;

        $i6 = $r1[i26];

        if $i6 == 0 goto label13;

        if i26 == 92 goto label05;

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8StreamParser: void _throwUnquotedSpace(int,java.lang.String)>(i26, "name");

        goto label06;

     label05:
        i26 = virtualinvoke r0.<org.codehaus.jackson.impl.Utf8StreamParser: char _decodeEscaped()>();

     label06:
        if i26 <= 127 goto label13;

        if i29 < 4 goto label08;

        $i16 = lengthof r8;

        if i27 < $i16 goto label07;

        $i18 = lengthof r8;

        $r4 = staticinvoke <org.codehaus.jackson.impl.Utf8StreamParser: int[] growArrayBy(int[],int)>(r8, $i18);

        r8 = $r4;

        r0.<org.codehaus.jackson.impl.Utf8StreamParser: int[] _quadBuffer> = $r4;

     label07:
        $i17 = i27;

        i27 = i27 + 1;

        r8[$i17] = i28;

        i28 = 0;

        i29 = 0;

     label08:
        if i26 >= 2048 goto label09;

        $i15 = i28 << 8;

        $i13 = i26 >> 6;

        $i14 = 192 | $i13;

        i28 = $i15 | $i14;

        i29 = i29 + 1;

        goto label12;

     label09:
        $i9 = i28 << 8;

        $i7 = i26 >> 12;

        $i8 = 224 | $i7;

        i30 = $i9 | $i8;

        i31 = i29 + 1;

        if i31 < 4 goto label11;

        $i10 = lengthof r8;

        if i27 < $i10 goto label10;

        $i12 = lengthof r8;

        $r3 = staticinvoke <org.codehaus.jackson.impl.Utf8StreamParser: int[] growArrayBy(int[],int)>(r8, $i12);

        r8 = $r3;

        r0.<org.codehaus.jackson.impl.Utf8StreamParser: int[] _quadBuffer> = $r3;

     label10:
        $i11 = i27;

        i27 = i27 + 1;

        r8[$i11] = i30;

        i30 = 0;

        i31 = 0;

     label11:
        $i32 = i30 << 8;

        $i33 = i26 >> 6;

        $i34 = $i33 & 63;

        $i35 = 128 | $i34;

        i28 = $i32 | $i35;

        i29 = i31 + 1;

     label12:
        $i36 = i26 & 63;

        i26 = 128 | $i36;

     label13:
        if i29 >= 4 goto label14;

        i29 = i29 + 1;

        $i5 = i28 << 8;

        i28 = $i5 | i26;

        goto label16;

     label14:
        $i2 = lengthof r8;

        if i27 < $i2 goto label15;

        $i4 = lengthof r8;

        $r2 = staticinvoke <org.codehaus.jackson.impl.Utf8StreamParser: int[] growArrayBy(int[],int)>(r8, $i4);

        r8 = $r2;

        r0.<org.codehaus.jackson.impl.Utf8StreamParser: int[] _quadBuffer> = $r2;

     label15:
        $i3 = i27;

        i27 = i27 + 1;

        r8[$i3] = i28;

        i28 = i26;

        i29 = 1;

     label16:
        $i37 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr>;

        $i38 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputEnd>;

        if $i37 < $i38 goto label17;

        $z0 = virtualinvoke r0.<org.codehaus.jackson.impl.Utf8StreamParser: boolean loadMore()>();

        if $z0 != 0 goto label17;

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8StreamParser: void _reportInvalidEOF(java.lang.String)>(" in field name");

     label17:
        $r9 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: byte[] _inputBuffer>;

        $i39 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr>;

        $i40 = $i39 + 1;

        r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr> = $i40;

        $b41 = $r9[$i39];

        i26 = $b41 & 255;

        goto label03;

     label18:
        if i29 <= 0 goto label20;

        $i19 = lengthof r8;

        if i27 < $i19 goto label19;

        $i21 = lengthof r8;

        $r5 = staticinvoke <org.codehaus.jackson.impl.Utf8StreamParser: int[] growArrayBy(int[],int)>(r8, $i21);

        r8 = $r5;

        r0.<org.codehaus.jackson.impl.Utf8StreamParser: int[] _quadBuffer> = $r5;

     label19:
        $i20 = i27;

        i27 = i27 + 1;

        r8[$i20] = i28;

     label20:
        $r10 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: org.codehaus.jackson.sym.BytesToNameCanonicalizer _symbols>;

        $r11 = virtualinvoke $r10.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: org.codehaus.jackson.sym.Name findName(int[],int)>(r8, i27);

        r12 = $r11;

        if $r11 != null goto label21;

        r12 = specialinvoke r0.<org.codehaus.jackson.impl.Utf8StreamParser: org.codehaus.jackson.sym.Name addName(int[],int,int)>(r8, i27, i29);

     label21:
        return r12;
    }

    private final org.codehaus.jackson.sym.Name findName(int, int) throws org.codehaus.jackson.JsonParseException
    {
        org.codehaus.jackson.sym.Name $r2, $r5;
        org.codehaus.jackson.impl.Utf8StreamParser r0;
        org.codehaus.jackson.sym.BytesToNameCanonicalizer $r1;
        int[] $r3, $r4;
        int i0, i1;

        r0 := @this: org.codehaus.jackson.impl.Utf8StreamParser;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: org.codehaus.jackson.sym.BytesToNameCanonicalizer _symbols>;

        $r2 = virtualinvoke $r1.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: org.codehaus.jackson.sym.Name findName(int)>(i0);

        if $r2 == null goto label1;

        return $r2;

     label1:
        $r3 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: int[] _quadBuffer>;

        $r3[0] = i0;

        $r4 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: int[] _quadBuffer>;

        $r5 = specialinvoke r0.<org.codehaus.jackson.impl.Utf8StreamParser: org.codehaus.jackson.sym.Name addName(int[],int,int)>($r4, 1, i1);

        return $r5;
    }

    private final org.codehaus.jackson.sym.Name findName(int, int, int) throws org.codehaus.jackson.JsonParseException
    {
        org.codehaus.jackson.sym.Name $r2, $r6;
        org.codehaus.jackson.impl.Utf8StreamParser r0;
        org.codehaus.jackson.sym.BytesToNameCanonicalizer $r1;
        int[] $r3, $r4, $r5;
        int i0, i1, i2;

        r0 := @this: org.codehaus.jackson.impl.Utf8StreamParser;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        $r1 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: org.codehaus.jackson.sym.BytesToNameCanonicalizer _symbols>;

        $r2 = virtualinvoke $r1.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: org.codehaus.jackson.sym.Name findName(int,int)>(i0, i1);

        if $r2 == null goto label1;

        return $r2;

     label1:
        $r3 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: int[] _quadBuffer>;

        $r3[0] = i0;

        $r4 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: int[] _quadBuffer>;

        $r4[1] = i1;

        $r5 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: int[] _quadBuffer>;

        $r6 = specialinvoke r0.<org.codehaus.jackson.impl.Utf8StreamParser: org.codehaus.jackson.sym.Name addName(int[],int,int)>($r5, 2, i2);

        return $r6;
    }

    private final org.codehaus.jackson.sym.Name findName(int[], int, int, int) throws org.codehaus.jackson.JsonParseException
    {
        org.codehaus.jackson.sym.Name $r2, $r3;
        org.codehaus.jackson.impl.Utf8StreamParser r0;
        org.codehaus.jackson.sym.BytesToNameCanonicalizer $r1;
        int[] $r4, r5;
        int $i0, i1, i2, $i3, i4, i5;

        r0 := @this: org.codehaus.jackson.impl.Utf8StreamParser;

        r5 := @parameter0: int[];

        i4 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        $i0 = lengthof r5;

        if i4 < $i0 goto label1;

        $i3 = lengthof r5;

        $r4 = staticinvoke <org.codehaus.jackson.impl.Utf8StreamParser: int[] growArrayBy(int[],int)>(r5, $i3);

        r5 = $r4;

        r0.<org.codehaus.jackson.impl.Utf8StreamParser: int[] _quadBuffer> = $r4;

     label1:
        i5 = i4 + 1;

        r5[i4] = i1;

        $r1 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: org.codehaus.jackson.sym.BytesToNameCanonicalizer _symbols>;

        $r2 = virtualinvoke $r1.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: org.codehaus.jackson.sym.Name findName(int[],int)>(r5, i5);

        if $r2 != null goto label2;

        $r3 = specialinvoke r0.<org.codehaus.jackson.impl.Utf8StreamParser: org.codehaus.jackson.sym.Name addName(int[],int,int)>(r5, i5, i2);

        return $r3;

     label2:
        return $r2;
    }

    private final org.codehaus.jackson.sym.Name addName(int[], int, int) throws org.codehaus.jackson.JsonParseException
    {
        org.codehaus.jackson.impl.Utf8StreamParser r0;
        byte b57, b67, b68, b69, b70;
        org.codehaus.jackson.sym.BytesToNameCanonicalizer $r4;
        java.lang.String $r9;
        char[] r8;
        int[] r3;
        org.codehaus.jackson.util.TextBuffer $r1, $r6, $r7;
        org.codehaus.jackson.sym.Name $r5;
        int i0, $i1, i2, $i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, i50, i51, i52, i53, i54, i55, i56, $i58, i59, i60, i61, i62, i63, i64, i65, $i66, $i72, $i74;
        char $c11, $c25;

        r0 := @this: org.codehaus.jackson.impl.Utf8StreamParser;

        r3 := @parameter0: int[];

        i0 := @parameter1: int;

        i2 := @parameter2: int;

        $i1 = i0 << 2;

        $i3 = $i1 - 4;

        i4 = $i3 + i2;

        if i2 >= 4 goto label01;

        $i45 = i0 - 1;

        i50 = r3[$i45];

        $i49 = i0 - 1;

        $i46 = 4 - i2;

        $i47 = $i46 << 3;

        $i48 = i50 << $i47;

        r3[$i49] = $i48;

        goto label02;

     label01:
        i50 = 0;

     label02:
        $r1 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: org.codehaus.jackson.util.TextBuffer _textBuffer>;

        r8 = virtualinvoke $r1.<org.codehaus.jackson.util.TextBuffer: char[] emptyAndGetCurrentSegment()>();

        i51 = 0;

        i52 = 0;

     label03:
        if i52 >= i4 goto label16;

        $i6 = i52 >> 2;

        i53 = r3[$i6];

        i54 = i52 & 3;

        $i7 = 3 - i54;

        $i8 = $i7 << 3;

        $i9 = i53 >> $i8;

        i55 = $i9 & 255;

        i52 = i52 + 1;

        if i55 <= 127 goto label14;

        $i12 = i55 & 224;

        if $i12 != 192 goto label04;

        i56 = i55 & 31;

        b57 = 1;

        b70 = 1;

        b69 = 1;

        b68 = 1;

        b67 = 1;

        goto label07;

     label04:
        $i13 = i55 & 240;

        if $i13 != 224 goto label05;

        i56 = i55 & 15;

        b57 = 2;

        b70 = 2;

        b69 = 2;

        b68 = 2;

        b67 = 2;

        goto label07;

     label05:
        $i14 = i55 & 248;

        if $i14 != 240 goto label06;

        i56 = i55 & 7;

        b57 = 3;

        b70 = 3;

        b69 = 3;

        b68 = 3;

        b67 = 3;

        goto label07;

     label06:
        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8StreamParser: void _reportInvalidInitial(int)>(i55);

        i56 = 1;

        b57 = 1;

        b70 = 1;

        b69 = 1;

        b68 = 1;

        b67 = 1;

     label07:
        $i58 = i52 + b69;

        if $i58 <= i4 goto label08;

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8StreamParser: void _reportInvalidEOF(java.lang.String)>(" in field name");

     label08:
        $i15 = i52 >> 2;

        $i42 = r3[$i15];

        $i43 = i52 & 3;

        $i16 = 3 - $i43;

        $i17 = $i16 << 3;

        $i44 = $i42 >> $i17;

        i52 = i52 + 1;

        $i18 = $i44 & 192;

        if $i18 == 128 goto label09;

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8StreamParser: void _reportInvalidOther(int)>($i44);

     label09:
        $i20 = i56 << 6;

        $i19 = $i44 & 63;

        $i41 = $i20 | $i19;

        i55 = $i41;

        if b67 <= 1 goto label12;

        $i27 = i52 >> 2;

        i59 = r3[$i27];

        i60 = i52 & 3;

        $i28 = 3 - i60;

        $i29 = $i28 << 3;

        i61 = i59 >> $i29;

        i52 = i52 + 1;

        $i30 = i61 & 192;

        if $i30 == 128 goto label10;

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8StreamParser: void _reportInvalidOther(int)>(i61);

     label10:
        $i32 = $i41 << 6;

        $i31 = i61 & 63;

        $i40 = $i32 | $i31;

        i55 = $i40;

        if b68 <= 2 goto label12;

        $i33 = i52 >> 2;

        i62 = r3[$i33];

        i63 = i52 & 3;

        $i34 = 3 - i63;

        $i35 = $i34 << 3;

        i64 = i62 >> $i35;

        i52 = i52 + 1;

        $i36 = i64 & 192;

        if $i36 == 128 goto label11;

        $i39 = i64 & 255;

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8StreamParser: void _reportInvalidOther(int)>($i39);

     label11:
        $i38 = $i40 << 6;

        $i37 = i64 & 63;

        i55 = $i38 | $i37;

     label12:
        if b70 <= 2 goto label14;

        i65 = i55 - 65536;

        $i21 = lengthof r8;

        if i51 < $i21 goto label13;

        $r7 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: org.codehaus.jackson.util.TextBuffer _textBuffer>;

        r8 = virtualinvoke $r7.<org.codehaus.jackson.util.TextBuffer: char[] expandCurrentSegment()>();

     label13:
        $i22 = i51;

        i51 = i51 + 1;

        $i23 = i65 >> 10;

        $i72 = (int) 55296;

        $i24 = $i72 + $i23;

        $c25 = (char) $i24;

        r8[$i22] = $c25;

        $i26 = i65 & 1023;

        $i74 = (int) 56320;

        i55 = $i74 | $i26;

     label14:
        $i66 = lengthof r8;

        if i51 < $i66 goto label15;

        $r6 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: org.codehaus.jackson.util.TextBuffer _textBuffer>;

        r8 = virtualinvoke $r6.<org.codehaus.jackson.util.TextBuffer: char[] expandCurrentSegment()>();

     label15:
        $i10 = i51;

        i51 = i51 + 1;

        $c11 = (char) i55;

        r8[$i10] = $c11;

        goto label03;

     label16:
        $r9 = new java.lang.String;

        specialinvoke $r9.<java.lang.String: void <init>(char[],int,int)>(r8, 0, i51);

        if i2 >= 4 goto label17;

        $i5 = i0 - 1;

        r3[$i5] = i50;

     label17:
        $r4 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: org.codehaus.jackson.sym.BytesToNameCanonicalizer _symbols>;

        $r5 = virtualinvoke $r4.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: org.codehaus.jackson.sym.Name addName(java.lang.String,int[],int)>($r9, r3, i0);

        return $r5;
    }

    protected void _finishString() throws java.io.IOException, org.codehaus.jackson.JsonParseException
    {
        byte[] r3;
        org.codehaus.jackson.impl.Utf8StreamParser r0;
        byte $b4;
        int[] $r2;
        org.codehaus.jackson.util.TextBuffer $r1, $r4, $r5, $r6, $r7;
        int $i0, $i1, $i2, $i3, $i5, $i6, $i8, $i9, $i10, $i11, $i12, $i14, $i15, $i16, $i18, $i19, $i20, $i21, $i22, i23, $i24, i25, $i26, i27, i28, $i29, $i30, $i32, $i34, $i36;
        char $c7, $c13, $c17, $c31;
        char[] r8;

        r0 := @this: org.codehaus.jackson.impl.Utf8StreamParser;

        i23 = 0;

        $r1 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: org.codehaus.jackson.util.TextBuffer _textBuffer>;

        r8 = virtualinvoke $r1.<org.codehaus.jackson.util.TextBuffer: char[] emptyAndGetCurrentSegment()>();

        $r2 = staticinvoke <org.codehaus.jackson.util.CharTypes: int[] getInputCodeUtf8()>();

        r3 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: byte[] _inputBuffer>;

     label01:
        $i24 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr>;

        i25 = $i24;

        $i26 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputEnd>;

        if $i24 < $i26 goto label02;

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8StreamParser: void loadMoreGuaranteed()>();

        i25 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr>;

     label02:
        $i0 = lengthof r8;

        if i23 < $i0 goto label03;

        $r7 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: org.codehaus.jackson.util.TextBuffer _textBuffer>;

        r8 = virtualinvoke $r7.<org.codehaus.jackson.util.TextBuffer: char[] finishCurrentSegment()>();

        i23 = 0;

     label03:
        $i21 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputEnd>;

        i27 = $i21;

        $i1 = lengthof r8;

        $i2 = $i1 - i23;

        $i22 = i25 + $i2;

        if $i22 >= $i21 goto label04;

        i27 = $i22;

     label04:
        if i25 >= i27 goto label06;

        $i3 = i25;

        i25 = i25 + 1;

        $b4 = r3[$i3];

        $i30 = (int) $b4;

        i28 = $i30 & 255;

        $i5 = $r2[i28];

        if $i5 == 0 goto label05;

        r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr> = i25;

        goto label07;

     label05:
        $i6 = i23;

        i23 = i23 + 1;

        $c7 = (char) i28;

        r8[$i6] = $c7;

        goto label04;

     label06:
        r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr> = i25;

        goto label01;

     label07:
        if i28 != 34 goto label08;

        goto label19;

     label08:
        $i8 = $r2[i28];

        tableswitch($i8)
        {
            case 1: goto label09;
            case 2: goto label10;
            case 3: goto label11;
            case 4: goto label13;
            default: goto label15;
        };

     label09:
        $c31 = virtualinvoke r0.<org.codehaus.jackson.impl.Utf8StreamParser: char _decodeEscaped()>();

        $i32 = (int) $c31;

        i28 = $i32;

        goto label17;

     label10:
        i28 = specialinvoke r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _decodeUtf8_2(int)>(i28);

        goto label17;

     label11:
        $i19 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputEnd>;

        $i18 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr>;

        $i20 = $i19 - $i18;

        if $i20 < 2 goto label12;

        i28 = specialinvoke r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _decodeUtf8_3fast(int)>(i28);

        goto label17;

     label12:
        i28 = specialinvoke r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _decodeUtf8_3(int)>(i28);

        goto label17;

     label13:
        $i9 = specialinvoke r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _decodeUtf8_4(int)>(i28);

        $i10 = i23;

        i23 = i23 + 1;

        $i11 = $i9 >> 10;

        $i34 = (int) 55296;

        $i12 = $i34 | $i11;

        $c13 = (char) $i12;

        r8[$i10] = $c13;

        $i14 = lengthof r8;

        if i23 < $i14 goto label14;

        $r5 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: org.codehaus.jackson.util.TextBuffer _textBuffer>;

        r8 = virtualinvoke $r5.<org.codehaus.jackson.util.TextBuffer: char[] finishCurrentSegment()>();

        i23 = 0;

     label14:
        $i15 = $i9 & 1023;

        $i36 = (int) 56320;

        i28 = $i36 | $i15;

        goto label17;

     label15:
        if i28 >= 32 goto label16;

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8StreamParser: void _throwUnquotedSpace(int,java.lang.String)>(i28, "string value");

        goto label17;

     label16:
        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8StreamParser: void _reportInvalidChar(int)>(i28);

     label17:
        $i29 = lengthof r8;

        if i23 < $i29 goto label18;

        $r4 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: org.codehaus.jackson.util.TextBuffer _textBuffer>;

        r8 = virtualinvoke $r4.<org.codehaus.jackson.util.TextBuffer: char[] finishCurrentSegment()>();

        i23 = 0;

     label18:
        $i16 = i23;

        i23 = i23 + 1;

        $c17 = (char) i28;

        r8[$i16] = $c17;

        goto label01;

     label19:
        $r6 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: org.codehaus.jackson.util.TextBuffer _textBuffer>;

        virtualinvoke $r6.<org.codehaus.jackson.util.TextBuffer: void setCurrentLength(int)>(i23);

        return;
    }

    protected void _skipString() throws java.io.IOException, org.codehaus.jackson.JsonParseException
    {
        byte[] r2;
        org.codehaus.jackson.impl.Utf8StreamParser r0;
        short s2, $s9;
        byte $b1;
        int[] $r1;
        int $i0, $i3, $i4, $i5, i6, $i7, i8, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18;

        r0 := @this: org.codehaus.jackson.impl.Utf8StreamParser;

        r0.<org.codehaus.jackson.impl.Utf8StreamParser: boolean _tokenIncomplete> = 0;

        $r1 = staticinvoke <org.codehaus.jackson.util.CharTypes: int[] getInputCodeUtf8()>();

        r2 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: byte[] _inputBuffer>;

     label01:
        $i5 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr>;

        i6 = $i5;

        $i7 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputEnd>;

        i8 = $i7;

        if $i5 < $i7 goto label02;

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8StreamParser: void loadMoreGuaranteed()>();

        i6 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr>;

        i8 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputEnd>;

     label02:
        if i6 >= i8 goto label03;

        $i0 = i6;

        i6 = i6 + 1;

        $b1 = r2[$i0];

        $s9 = (short) $b1;

        s2 = $s9 & 255;

        $i10 = (int) s2;

        $i3 = $r1[$i10];

        if $i3 == 0 goto label02;

        r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr> = i6;

        goto label04;

     label03:
        r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr> = i6;

        goto label01;

     label04:
        $i11 = (int) s2;

        if $i11 != 34 goto label05;

        goto label13;

     label05:
        $i12 = (int) s2;

        $i4 = $r1[$i12];

        tableswitch($i4)
        {
            case 1: goto label06;
            case 2: goto label07;
            case 3: goto label08;
            case 4: goto label09;
            default: goto label10;
        };

     label06:
        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8StreamParser: char _decodeEscaped()>();

        goto label12;

     label07:
        $i13 = (int) s2;

        specialinvoke r0.<org.codehaus.jackson.impl.Utf8StreamParser: void _skipUtf8_2(int)>($i13);

        goto label12;

     label08:
        $i14 = (int) s2;

        specialinvoke r0.<org.codehaus.jackson.impl.Utf8StreamParser: void _skipUtf8_3(int)>($i14);

        goto label12;

     label09:
        $i15 = (int) s2;

        specialinvoke r0.<org.codehaus.jackson.impl.Utf8StreamParser: void _skipUtf8_4(int)>($i15);

        goto label12;

     label10:
        $i16 = (int) s2;

        if $i16 >= 32 goto label11;

        $i17 = (int) s2;

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8StreamParser: void _throwUnquotedSpace(int,java.lang.String)>($i17, "string value");

        goto label12;

     label11:
        $i18 = (int) s2;

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8StreamParser: void _reportInvalidChar(int)>($i18);

     label12:
        goto label01;

     label13:
        return;
    }

    protected final org.codehaus.jackson.JsonToken _handleUnexpectedValue(int) throws java.io.IOException, org.codehaus.jackson.JsonParseException
    {
        byte[] $r10;
        org.codehaus.jackson.JsonToken $r4;
        org.codehaus.jackson.impl.Utf8StreamParser r0;
        byte $b6;
        int[] $r9;
        org.codehaus.jackson.util.TextBuffer $r1, $r2, $r3, $r5, $r7;
        boolean $z0;
        org.codehaus.jackson.JsonParser$Feature $r6;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i7, $i8, $i9, $i10, $i11, $i13, $i14, $i15, $i17, $i18, $i19, $i20, $i21, $i23, $i24, i25, i26, $i27, $i28, i29, $i30, i31, $i32, $i33, $i35, $i37, $i39;
        char $c12, $c16, $c22, $c34;
        char[] r8;

        r0 := @this: org.codehaus.jackson.impl.Utf8StreamParser;

        i25 := @parameter0: int;

        if i25 != 39 goto label01;

        $r6 = <org.codehaus.jackson.JsonParser$Feature: org.codehaus.jackson.JsonParser$Feature ALLOW_SINGLE_QUOTES>;

        $z0 = virtualinvoke r0.<org.codehaus.jackson.impl.Utf8StreamParser: boolean isEnabled(org.codehaus.jackson.JsonParser$Feature)>($r6);

        if $z0 != 0 goto label02;

     label01:
        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8StreamParser: void _reportUnexpectedChar(int,java.lang.String)>(i25, "expected a valid value (number, String, array, object, \'true\', \'false\' or \'null\')");

     label02:
        i26 = 0;

        $r7 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: org.codehaus.jackson.util.TextBuffer _textBuffer>;

        r8 = virtualinvoke $r7.<org.codehaus.jackson.util.TextBuffer: char[] emptyAndGetCurrentSegment()>();

        $r9 = staticinvoke <org.codehaus.jackson.util.CharTypes: int[] getInputCodeUtf8()>();

        $r10 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: byte[] _inputBuffer>;

     label03:
        $i27 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr>;

        $i28 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputEnd>;

        if $i27 < $i28 goto label04;

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8StreamParser: void loadMoreGuaranteed()>();

     label04:
        $i0 = lengthof r8;

        if i26 < $i0 goto label05;

        $r5 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: org.codehaus.jackson.util.TextBuffer _textBuffer>;

        r8 = virtualinvoke $r5.<org.codehaus.jackson.util.TextBuffer: char[] finishCurrentSegment()>();

        i26 = 0;

     label05:
        $i23 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputEnd>;

        i29 = $i23;

        $i3 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr>;

        $i1 = lengthof r8;

        $i2 = $i1 - i26;

        $i24 = $i3 + $i2;

        if $i24 >= $i23 goto label06;

        i29 = $i24;

     label06:
        $i30 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr>;

        if $i30 >= i29 goto label08;

        $i4 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr>;

        $i5 = $i4 + 1;

        r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr> = $i5;

        $b6 = $r10[$i4];

        $i33 = (int) $b6;

        i31 = $i33 & 255;

        if i31 == 39 goto label09;

        $i20 = $r9[i31];

        if $i20 == 0 goto label07;

        goto label09;

     label07:
        $i21 = i26;

        i26 = i26 + 1;

        $c22 = (char) i31;

        r8[$i21] = $c22;

        goto label06;

     label08:
        goto label03;

     label09:
        if i31 != 39 goto label10;

        goto label21;

     label10:
        $i7 = $r9[i31];

        tableswitch($i7)
        {
            case 1: goto label11;
            case 2: goto label12;
            case 3: goto label13;
            case 4: goto label15;
            default: goto label17;
        };

     label11:
        if i31 == 34 goto label19;

        $c34 = virtualinvoke r0.<org.codehaus.jackson.impl.Utf8StreamParser: char _decodeEscaped()>();

        $i35 = (int) $c34;

        i31 = $i35;

        goto label19;

     label12:
        i31 = specialinvoke r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _decodeUtf8_2(int)>(i31);

        goto label19;

     label13:
        $i18 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputEnd>;

        $i17 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr>;

        $i19 = $i18 - $i17;

        if $i19 < 2 goto label14;

        i31 = specialinvoke r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _decodeUtf8_3fast(int)>(i31);

        goto label19;

     label14:
        i31 = specialinvoke r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _decodeUtf8_3(int)>(i31);

        goto label19;

     label15:
        $i8 = specialinvoke r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _decodeUtf8_4(int)>(i31);

        $i9 = i26;

        i26 = i26 + 1;

        $i10 = $i8 >> 10;

        $i37 = (int) 55296;

        $i11 = $i37 | $i10;

        $c12 = (char) $i11;

        r8[$i9] = $c12;

        $i13 = lengthof r8;

        if i26 < $i13 goto label16;

        $r2 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: org.codehaus.jackson.util.TextBuffer _textBuffer>;

        r8 = virtualinvoke $r2.<org.codehaus.jackson.util.TextBuffer: char[] finishCurrentSegment()>();

        i26 = 0;

     label16:
        $i14 = $i8 & 1023;

        $i39 = (int) 56320;

        i31 = $i39 | $i14;

        goto label19;

     label17:
        if i31 >= 32 goto label18;

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8StreamParser: void _throwUnquotedSpace(int,java.lang.String)>(i31, "string value");

     label18:
        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8StreamParser: void _reportInvalidChar(int)>(i31);

     label19:
        $i32 = lengthof r8;

        if i26 < $i32 goto label20;

        $r1 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: org.codehaus.jackson.util.TextBuffer _textBuffer>;

        r8 = virtualinvoke $r1.<org.codehaus.jackson.util.TextBuffer: char[] finishCurrentSegment()>();

        i26 = 0;

     label20:
        $i15 = i26;

        i26 = i26 + 1;

        $c16 = (char) i31;

        r8[$i15] = $c16;

        goto label03;

     label21:
        $r3 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: org.codehaus.jackson.util.TextBuffer _textBuffer>;

        virtualinvoke $r3.<org.codehaus.jackson.util.TextBuffer: void setCurrentLength(int)>(i26);

        $r4 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_STRING>;

        return $r4;
    }

    protected void _matchToken(org.codehaus.jackson.JsonToken) throws java.io.IOException, org.codehaus.jackson.JsonParseException
    {
        byte[] $r1, $r3;
        org.codehaus.jackson.JsonToken r0;
        org.codehaus.jackson.impl.Utf8StreamParser r2;
        byte $b4, $b5;
        int i0, $i1, $i2, $i3, $i6, $i7, i8, $i9, $i10;
        java.lang.String $r4, $r5;

        r2 := @this: org.codehaus.jackson.impl.Utf8StreamParser;

        r0 := @parameter0: org.codehaus.jackson.JsonToken;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.JsonToken: byte[] asByteArray()>();

        i8 = 1;

        i0 = lengthof $r1;

     label1:
        if i8 >= i0 goto label4;

        $i2 = r2.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr>;

        $i1 = r2.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputEnd>;

        if $i2 < $i1 goto label2;

        virtualinvoke r2.<org.codehaus.jackson.impl.Utf8StreamParser: void loadMoreGuaranteed()>();

     label2:
        $b5 = $r1[i8];

        $r3 = r2.<org.codehaus.jackson.impl.Utf8StreamParser: byte[] _inputBuffer>;

        $i3 = r2.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr>;

        $b4 = $r3[$i3];

        $i9 = (int) $b5;

        $i10 = (int) $b4;

        if $i9 == $i10 goto label3;

        $r4 = virtualinvoke r0.<org.codehaus.jackson.JsonToken: java.lang.String asString()>();

        $r5 = virtualinvoke $r4.<java.lang.String: java.lang.String substring(int,int)>(0, i8);

        specialinvoke r2.<org.codehaus.jackson.impl.Utf8StreamParser: void _reportInvalidToken(java.lang.String)>($r5);

     label3:
        $i6 = r2.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr>;

        $i7 = $i6 + 1;

        r2.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr> = $i7;

        i8 = i8 + 1;

        goto label1;

     label4:
        return;
    }

    private void _reportInvalidToken(java.lang.String) throws java.io.IOException, org.codehaus.jackson.JsonParseException
    {
        byte[] $r3;
        org.codehaus.jackson.impl.Utf8StreamParser r2;
        byte $b7;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i9;
        java.lang.String r1, $r6, $r9;
        boolean $z0, $z1;
        char $c8;
        java.lang.StringBuilder $r5, $r7, $r8, $r10, $r11;

        r2 := @this: org.codehaus.jackson.impl.Utf8StreamParser;

        r1 := @parameter0: java.lang.String;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>(java.lang.String)>(r1);

     label1:
        $i1 = r2.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr>;

        $i0 = r2.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputEnd>;

        if $i1 < $i0 goto label2;

        $z1 = virtualinvoke r2.<org.codehaus.jackson.impl.Utf8StreamParser: boolean loadMore()>();

        if $z1 != 0 goto label2;

        goto label4;

     label2:
        $r3 = r2.<org.codehaus.jackson.impl.Utf8StreamParser: byte[] _inputBuffer>;

        $i2 = r2.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr>;

        $i3 = $i2 + 1;

        r2.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr> = $i3;

        $b7 = $r3[$i2];

        $i9 = (int) $b7;

        $i4 = virtualinvoke r2.<org.codehaus.jackson.impl.Utf8StreamParser: int _decodeCharForError(int)>($i9);

        $c8 = (char) $i4;

        $z0 = staticinvoke <java.lang.Character: boolean isJavaIdentifierPart(char)>($c8);

        if $z0 != 0 goto label3;

        goto label4;

     label3:
        $i5 = r2.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr>;

        $i6 = $i5 + 1;

        r2.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr> = $i6;

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c8);

        goto label1;

     label4:
        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unrecognized token \'");

        $r6 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\': was expecting \'null\', \'true\' or \'false\'");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<org.codehaus.jackson.impl.Utf8StreamParser: void _reportError(java.lang.String)>($r9);

        return;
    }

    private final int _skipWS() throws java.io.IOException, org.codehaus.jackson.JsonParseException
    {
        byte[] $r1;
        org.codehaus.jackson.impl.Utf8StreamParser r0;
        short $s5, $s6;
        byte $b4;
        org.codehaus.jackson.impl.JsonReadContext $r4;
        int $i0, $i1, $i2, $i3, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14;
        java.lang.String $r5, $r8;
        boolean $z0;
        org.codehaus.jackson.JsonParseException $r9;
        java.lang.StringBuilder $r3, $r6, $r7, $r10;

        r0 := @this: org.codehaus.jackson.impl.Utf8StreamParser;

     label1:
        $i1 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr>;

        $i0 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputEnd>;

        if $i1 < $i0 goto label2;

        $z0 = virtualinvoke r0.<org.codehaus.jackson.impl.Utf8StreamParser: boolean loadMore()>();

        if $z0 == 0 goto label8;

     label2:
        $r1 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: byte[] _inputBuffer>;

        $i2 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr>;

        $i3 = $i2 + 1;

        r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr> = $i3;

        $b4 = $r1[$i2];

        $s6 = (short) $b4;

        $s5 = $s6 & 255;

        $i7 = (int) $s5;

        if $i7 <= 32 goto label4;

        $i8 = (int) $s5;

        if $i8 == 47 goto label3;

        $i9 = (int) $s5;

        return $i9;

     label3:
        specialinvoke r0.<org.codehaus.jackson.impl.Utf8StreamParser: void _skipComment()>();

        goto label7;

     label4:
        $i10 = (int) $s5;

        if $i10 == 32 goto label7;

        $i11 = (int) $s5;

        if $i11 != 10 goto label5;

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8StreamParser: void _skipLF()>();

        goto label7;

     label5:
        $i12 = (int) $s5;

        if $i12 != 13 goto label6;

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8StreamParser: void _skipCR()>();

        goto label7;

     label6:
        $i13 = (int) $s5;

        if $i13 == 9 goto label7;

        $i14 = (int) $s5;

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8StreamParser: void _throwInvalidSpace(int)>($i14);

     label7:
        goto label1;

     label8:
        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected end-of-input within/between ");

        $r4 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: org.codehaus.jackson.impl.JsonReadContext _parsingContext>;

        $r5 = virtualinvoke $r4.<org.codehaus.jackson.impl.JsonReadContext: java.lang.String getTypeDesc()>();

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" entries");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        $r9 = virtualinvoke r0.<org.codehaus.jackson.impl.Utf8StreamParser: org.codehaus.jackson.JsonParseException _constructError(java.lang.String)>($r8);

        throw $r9;
    }

    private final int _skipWSOrEnd() throws java.io.IOException, org.codehaus.jackson.JsonParseException
    {
        byte[] $r1;
        org.codehaus.jackson.impl.Utf8StreamParser r0;
        short $s5, $s6;
        byte $b4;
        int $i0, $i1, $i2, $i3, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i16;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.impl.Utf8StreamParser;

     label1:
        $i1 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr>;

        $i0 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputEnd>;

        if $i1 < $i0 goto label2;

        $z0 = virtualinvoke r0.<org.codehaus.jackson.impl.Utf8StreamParser: boolean loadMore()>();

        if $z0 == 0 goto label8;

     label2:
        $r1 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: byte[] _inputBuffer>;

        $i2 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr>;

        $i3 = $i2 + 1;

        r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr> = $i3;

        $b4 = $r1[$i2];

        $s6 = (short) $b4;

        $s5 = $s6 & 255;

        $i7 = (int) $s5;

        if $i7 <= 32 goto label4;

        $i8 = (int) $s5;

        if $i8 == 47 goto label3;

        $i9 = (int) $s5;

        return $i9;

     label3:
        specialinvoke r0.<org.codehaus.jackson.impl.Utf8StreamParser: void _skipComment()>();

        goto label7;

     label4:
        $i10 = (int) $s5;

        if $i10 == 32 goto label7;

        $i11 = (int) $s5;

        if $i11 != 10 goto label5;

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8StreamParser: void _skipLF()>();

        goto label7;

     label5:
        $i12 = (int) $s5;

        if $i12 != 13 goto label6;

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8StreamParser: void _skipCR()>();

        goto label7;

     label6:
        $i13 = (int) $s5;

        if $i13 == 9 goto label7;

        $i14 = (int) $s5;

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8StreamParser: void _throwInvalidSpace(int)>($i14);

     label7:
        goto label1;

     label8:
        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8StreamParser: void _handleEOF()>();

        $i16 = (int) -1;

        return $i16;
    }

    private final void _skipComment() throws java.io.IOException, org.codehaus.jackson.JsonParseException
    {
        byte[] $r2;
        org.codehaus.jackson.impl.Utf8StreamParser r0;
        short $s5, $s6;
        byte $b4;
        int $i0, $i1, $i2, $i3, $i7, $i8, $i9;
        org.codehaus.jackson.JsonParser$Feature $r1;
        boolean $z0, $z1;

        r0 := @this: org.codehaus.jackson.impl.Utf8StreamParser;

        $r1 = <org.codehaus.jackson.JsonParser$Feature: org.codehaus.jackson.JsonParser$Feature ALLOW_COMMENTS>;

        $z0 = virtualinvoke r0.<org.codehaus.jackson.impl.Utf8StreamParser: boolean isEnabled(org.codehaus.jackson.JsonParser$Feature)>($r1);

        if $z0 != 0 goto label1;

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8StreamParser: void _reportUnexpectedChar(int,java.lang.String)>(47, "maybe a (non-standard) comment? (not recognized as one since Feature \'ALLOW_COMMENTS\' not enabled for parser)");

     label1:
        $i1 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr>;

        $i0 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputEnd>;

        if $i1 < $i0 goto label2;

        $z1 = virtualinvoke r0.<org.codehaus.jackson.impl.Utf8StreamParser: boolean loadMore()>();

        if $z1 != 0 goto label2;

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8StreamParser: void _reportInvalidEOF(java.lang.String)>(" in a comment");

     label2:
        $r2 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: byte[] _inputBuffer>;

        $i2 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr>;

        $i3 = $i2 + 1;

        r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr> = $i3;

        $b4 = $r2[$i2];

        $s6 = (short) $b4;

        $s5 = $s6 & 255;

        $i7 = (int) $s5;

        if $i7 != 47 goto label3;

        specialinvoke r0.<org.codehaus.jackson.impl.Utf8StreamParser: void _skipCppComment()>();

        goto label5;

     label3:
        $i8 = (int) $s5;

        if $i8 != 42 goto label4;

        specialinvoke r0.<org.codehaus.jackson.impl.Utf8StreamParser: void _skipCComment()>();

        goto label5;

     label4:
        $i9 = (int) $s5;

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8StreamParser: void _reportUnexpectedChar(int,java.lang.String)>($i9, "was expecting either \'*\' or \'/\' for a comment");

     label5:
        return;
    }

    private final void _skipCComment() throws java.io.IOException, org.codehaus.jackson.JsonParseException
    {
        byte[] $r2, $r3;
        org.codehaus.jackson.impl.Utf8StreamParser r1;
        short $s9, $s11;
        byte $b4, $b6;
        int[] $r0;
        int $i0, $i1, $i2, $i3, $i5, $i7, $i8, $i10, $i12, $i13, $i14;
        boolean $z0;

        r1 := @this: org.codehaus.jackson.impl.Utf8StreamParser;

        $r0 = staticinvoke <org.codehaus.jackson.util.CharTypes: int[] getInputCodeComment()>();

     label1:
        $i1 = r1.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr>;

        $i0 = r1.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputEnd>;

        if $i1 < $i0 goto label2;

        $z0 = virtualinvoke r1.<org.codehaus.jackson.impl.Utf8StreamParser: boolean loadMore()>();

        if $z0 == 0 goto label8;

     label2:
        $r2 = r1.<org.codehaus.jackson.impl.Utf8StreamParser: byte[] _inputBuffer>;

        $i2 = r1.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr>;

        $i3 = $i2 + 1;

        r1.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr> = $i3;

        $b4 = $r2[$i2];

        $s11 = (short) $b4;

        $s9 = $s11 & 255;

        $i12 = (int) $s9;

        $i10 = $r0[$i12];

        if $i10 == 0 goto label7;

        lookupswitch($i10)
        {
            case 10: goto label4;
            case 13: goto label5;
            case 42: goto label3;
            default: goto label6;
        };

     label3:
        $r3 = r1.<org.codehaus.jackson.impl.Utf8StreamParser: byte[] _inputBuffer>;

        $i5 = r1.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr>;

        $b6 = $r3[$i5];

        $i13 = (int) $b6;

        if $i13 != 47 goto label7;

        $i7 = r1.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr>;

        $i8 = $i7 + 1;

        r1.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr> = $i8;

        return;

     label4:
        virtualinvoke r1.<org.codehaus.jackson.impl.Utf8StreamParser: void _skipLF()>();

        goto label7;

     label5:
        virtualinvoke r1.<org.codehaus.jackson.impl.Utf8StreamParser: void _skipCR()>();

        goto label7;

     label6:
        $i14 = (int) $s9;

        virtualinvoke r1.<org.codehaus.jackson.impl.Utf8StreamParser: void _reportInvalidChar(int)>($i14);

     label7:
        goto label1;

     label8:
        virtualinvoke r1.<org.codehaus.jackson.impl.Utf8StreamParser: void _reportInvalidEOF(java.lang.String)>(" in a comment");

        return;
    }

    private final void _skipCppComment() throws java.io.IOException, org.codehaus.jackson.JsonParseException
    {
        byte[] $r2;
        org.codehaus.jackson.impl.Utf8StreamParser r1;
        short $s5, $s7;
        byte $b4;
        int[] $r0;
        int $i0, $i1, $i2, $i3, $i6, $i8, $i9;
        boolean $z0;

        r1 := @this: org.codehaus.jackson.impl.Utf8StreamParser;

        $r0 = staticinvoke <org.codehaus.jackson.util.CharTypes: int[] getInputCodeComment()>();

     label1:
        $i1 = r1.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr>;

        $i0 = r1.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputEnd>;

        if $i1 < $i0 goto label2;

        $z0 = virtualinvoke r1.<org.codehaus.jackson.impl.Utf8StreamParser: boolean loadMore()>();

        if $z0 == 0 goto label8;

     label2:
        $r2 = r1.<org.codehaus.jackson.impl.Utf8StreamParser: byte[] _inputBuffer>;

        $i2 = r1.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr>;

        $i3 = $i2 + 1;

        r1.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr> = $i3;

        $b4 = $r2[$i2];

        $s7 = (short) $b4;

        $s5 = $s7 & 255;

        $i8 = (int) $s5;

        $i6 = $r0[$i8];

        if $i6 == 0 goto label7;

        lookupswitch($i6)
        {
            case 10: goto label3;
            case 13: goto label4;
            case 42: goto label5;
            default: goto label6;
        };

     label3:
        virtualinvoke r1.<org.codehaus.jackson.impl.Utf8StreamParser: void _skipLF()>();

        return;

     label4:
        virtualinvoke r1.<org.codehaus.jackson.impl.Utf8StreamParser: void _skipCR()>();

        return;

     label5:
        goto label7;

     label6:
        $i9 = (int) $s5;

        virtualinvoke r1.<org.codehaus.jackson.impl.Utf8StreamParser: void _reportInvalidChar(int)>($i9);

     label7:
        goto label1;

     label8:
        return;
    }

    protected final char _decodeEscaped() throws java.io.IOException, org.codehaus.jackson.JsonParseException
    {
        byte[] $r7, $r8;
        org.codehaus.jackson.impl.Utf8StreamParser r0;
        byte $b10, $b15;
        boolean $z0, $z1;
        java.lang.StringBuilder $r2, $r4, $r5, $r9;
        int $i0, $i1, $i3, $i4, $i5, $i7, $i8, $i9, i11, i12, $i13, $i14, $i16, $i17, $i18, $i19, $i20;
        java.lang.String $r3, $r6;
        char $c2, $c6;

        r0 := @this: org.codehaus.jackson.impl.Utf8StreamParser;

        $i1 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr>;

        $i0 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputEnd>;

        if $i1 < $i0 goto label01;

        $z1 = virtualinvoke r0.<org.codehaus.jackson.impl.Utf8StreamParser: boolean loadMore()>();

        if $z1 != 0 goto label01;

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8StreamParser: void _reportInvalidEOF(java.lang.String)>(" in character escape sequence");

     label01:
        $r7 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: byte[] _inputBuffer>;

        $i8 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr>;

        $i9 = $i8 + 1;

        r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr> = $i9;

        $b10 = $r7[$i8];

        $i17 = (int) $b10;

        lookupswitch($i17)
        {
            case 34: goto label07;
            case 47: goto label07;
            case 92: goto label07;
            case 98: goto label02;
            case 102: goto label05;
            case 110: goto label04;
            case 114: goto label06;
            case 116: goto label03;
            case 117: goto label08;
            default: goto label09;
        };

     label02:
        return 8;

     label03:
        return 9;

     label04:
        return 10;

     label05:
        return 12;

     label06:
        return 13;

     label07:
        $c6 = (char) $b10;

        return $c6;

     label08:
        goto label10;

     label09:
        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unrecognized character escape (\\ followed by ");

        $i18 = (int) $b10;

        $i7 = virtualinvoke r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _decodeCharForError(int)>($i18);

        $r3 = staticinvoke <org.codehaus.jackson.impl.Utf8StreamParser: java.lang.String _getCharDesc(int)>($i7);

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8StreamParser: void _reportError(java.lang.String)>($r6);

     label10:
        i11 = 0;

        i12 = 0;

     label11:
        if i12 >= 4 goto label14;

        $i4 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr>;

        $i3 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputEnd>;

        if $i4 < $i3 goto label12;

        $z0 = virtualinvoke r0.<org.codehaus.jackson.impl.Utf8StreamParser: boolean loadMore()>();

        if $z0 != 0 goto label12;

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8StreamParser: void _reportInvalidEOF(java.lang.String)>(" in character escape sequence");

     label12:
        $r8 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: byte[] _inputBuffer>;

        $i13 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr>;

        $i14 = $i13 + 1;

        r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr> = $i14;

        $b15 = $r8[$i13];

        $i19 = (int) $b15;

        $i16 = staticinvoke <org.codehaus.jackson.util.CharTypes: int charToHex(int)>($i19);

        if $i16 >= 0 goto label13;

        $i20 = (int) $b15;

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8StreamParser: void _reportUnexpectedChar(int,java.lang.String)>($i20, "expected a hex-digit for character escape sequence");

     label13:
        $i5 = i11 << 4;

        i11 = $i5 | $i16;

        i12 = i12 + 1;

        goto label11;

     label14:
        $c2 = (char) i11;

        return $c2;
    }

    protected int _decodeCharForError(int) throws java.io.IOException, org.codehaus.jackson.JsonParseException
    {
        org.codehaus.jackson.impl.Utf8StreamParser r0;
        byte b21, b24, b25;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, i20, $i22, $i23;

        r0 := @this: org.codehaus.jackson.impl.Utf8StreamParser;

        i0 := @parameter0: int;

        i20 = i0;

        if i0 >= 0 goto label8;

        $i1 = i0 & 224;

        if $i1 != 192 goto label1;

        i20 = i0 & 31;

        b21 = 1;

        b25 = 1;

        b24 = 1;

        goto label4;

     label1:
        $i2 = i0 & 240;

        if $i2 != 224 goto label2;

        i20 = i0 & 15;

        b21 = 2;

        b25 = 2;

        b24 = 2;

        goto label4;

     label2:
        $i3 = i0 & 248;

        if $i3 != 240 goto label3;

        i20 = i0 & 7;

        b21 = 3;

        b25 = 3;

        b24 = 3;

        goto label4;

     label3:
        $i4 = i0 & 255;

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8StreamParser: void _reportInvalidInitial(int)>($i4);

        b21 = 1;

        b25 = 1;

        b24 = 1;

     label4:
        $i22 = specialinvoke r0.<org.codehaus.jackson.impl.Utf8StreamParser: int nextByte()>();

        $i23 = $i22 & 192;

        if $i23 == 128 goto label5;

        $i18 = $i22 & 255;

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8StreamParser: void _reportInvalidOther(int)>($i18);

     label5:
        $i6 = i20 << 6;

        $i5 = $i22 & 63;

        $i19 = $i6 | $i5;

        i20 = $i19;

        if b24 <= 1 goto label8;

        $i7 = specialinvoke r0.<org.codehaus.jackson.impl.Utf8StreamParser: int nextByte()>();

        $i8 = $i7 & 192;

        if $i8 == 128 goto label6;

        $i16 = $i7 & 255;

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8StreamParser: void _reportInvalidOther(int)>($i16);

     label6:
        $i10 = $i19 << 6;

        $i9 = $i7 & 63;

        $i17 = $i10 | $i9;

        i20 = $i17;

        if b25 <= 2 goto label8;

        $i11 = specialinvoke r0.<org.codehaus.jackson.impl.Utf8StreamParser: int nextByte()>();

        $i12 = $i11 & 192;

        if $i12 == 128 goto label7;

        $i15 = $i11 & 255;

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8StreamParser: void _reportInvalidOther(int)>($i15);

     label7:
        $i14 = $i17 << 6;

        $i13 = $i11 & 63;

        i20 = $i14 | $i13;

     label8:
        return i20;
    }

    private final int _decodeUtf8_2(int) throws java.io.IOException, org.codehaus.jackson.JsonParseException
    {
        byte[] $r1;
        org.codehaus.jackson.impl.Utf8StreamParser r0;
        short $s4, $s11, $s13, $s15;
        byte $b7, $b12;
        int $i0, $i1, $i2, $i3, i5, $i6, $i8, $i9, $i10, $i14, $i16, $i17;

        r0 := @this: org.codehaus.jackson.impl.Utf8StreamParser;

        i5 := @parameter0: int;

        $i1 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr>;

        $i0 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputEnd>;

        if $i1 < $i0 goto label1;

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8StreamParser: void loadMoreGuaranteed()>();

     label1:
        $r1 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: byte[] _inputBuffer>;

        $i2 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr>;

        $i3 = $i2 + 1;

        r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr> = $i3;

        $b12 = $r1[$i2];

        $s13 = (short) $b12;

        $s4 = $s13 & 192;

        $i14 = (int) $s4;

        if $i14 == 128 goto label2;

        $s15 = (short) $b12;

        $s11 = $s15 & 255;

        $i10 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr>;

        $i16 = (int) $s11;

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8StreamParser: void _reportInvalidOther(int,int)>($i16, $i10);

     label2:
        $i6 = i5 & 31;

        $i8 = $i6 << 6;

        $b7 = $b12 & 63;

        $i17 = (int) $b7;

        $i9 = $i8 | $i17;

        return $i9;
    }

    private final int _decodeUtf8_3(int) throws java.io.IOException, org.codehaus.jackson.JsonParseException
    {
        byte[] $r1, $r2;
        org.codehaus.jackson.impl.Utf8StreamParser r0;
        byte $b5, $b12, $b17, $b22;
        short $s4, $s11, $s15, $s19, $s24, $s26, $s29, $s31;
        int $i0, $i1, $i2, $i3, $i6, $i7, $i8, $i9, $i10, $i13, $i14, $i16, $i18, $i20, $i21, i23, $i25, $i27, $i28, $i30, $i32, $i33;

        r0 := @this: org.codehaus.jackson.impl.Utf8StreamParser;

        i23 := @parameter0: int;

        $i1 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr>;

        $i0 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputEnd>;

        if $i1 < $i0 goto label1;

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8StreamParser: void loadMoreGuaranteed()>();

     label1:
        $i21 = i23 & 15;

        $r1 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: byte[] _inputBuffer>;

        $i2 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr>;

        $i3 = $i2 + 1;

        r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr> = $i3;

        $b22 = $r1[$i2];

        $s24 = (short) $b22;

        $s4 = $s24 & 192;

        $i25 = (int) $s4;

        if $i25 == 128 goto label2;

        $s26 = (short) $b22;

        $s19 = $s26 & 255;

        $i18 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr>;

        $i27 = (int) $s19;

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8StreamParser: void _reportInvalidOther(int,int)>($i27, $i18);

     label2:
        $i6 = $i21 << 6;

        $b5 = $b22 & 63;

        $i28 = (int) $b5;

        $i20 = $i6 | $i28;

        $i8 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr>;

        $i7 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputEnd>;

        if $i8 < $i7 goto label3;

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8StreamParser: void loadMoreGuaranteed()>();

     label3:
        $r2 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: byte[] _inputBuffer>;

        $i9 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr>;

        $i10 = $i9 + 1;

        r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr> = $i10;

        $b17 = $r2[$i9];

        $s29 = (short) $b17;

        $s11 = $s29 & 192;

        $i30 = (int) $s11;

        if $i30 == 128 goto label4;

        $s31 = (short) $b17;

        $s15 = $s31 & 255;

        $i14 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr>;

        $i32 = (int) $s15;

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8StreamParser: void _reportInvalidOther(int,int)>($i32, $i14);

     label4:
        $i13 = $i20 << 6;

        $b12 = $b17 & 63;

        $i33 = (int) $b12;

        $i16 = $i13 | $i33;

        return $i16;
    }

    private final int _decodeUtf8_3fast(int) throws java.io.IOException, org.codehaus.jackson.JsonParseException
    {
        byte[] $r1, $r2;
        org.codehaus.jackson.impl.Utf8StreamParser r0;
        byte $b3, $b8, $b16, b19;
        short $s2, $s7, $s11, $s14, $s20, $s22, $s25, $s27;
        int $i0, $i1, $i4, $i5, $i6, $i9, $i10, $i12, $i13, $i15, i17, i18, $i21, $i23, $i24, $i26, $i28, $i29;

        r0 := @this: org.codehaus.jackson.impl.Utf8StreamParser;

        i17 := @parameter0: int;

        i18 = i17 & 15;

        $r1 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: byte[] _inputBuffer>;

        $i0 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr>;

        $i1 = $i0 + 1;

        r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr> = $i1;

        b19 = $r1[$i0];

        $s20 = (short) b19;

        $s2 = $s20 & 192;

        $i21 = (int) $s2;

        if $i21 == 128 goto label1;

        $s22 = (short) b19;

        $s14 = $s22 & 255;

        $i13 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr>;

        $i23 = (int) $s14;

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8StreamParser: void _reportInvalidOther(int,int)>($i23, $i13);

     label1:
        $i4 = i18 << 6;

        $b3 = b19 & 63;

        $i24 = (int) $b3;

        $i15 = $i4 | $i24;

        $r2 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: byte[] _inputBuffer>;

        $i5 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr>;

        $i6 = $i5 + 1;

        r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr> = $i6;

        $b16 = $r2[$i5];

        $s25 = (short) $b16;

        $s7 = $s25 & 192;

        $i26 = (int) $s7;

        if $i26 == 128 goto label2;

        $s27 = (short) $b16;

        $s11 = $s27 & 255;

        $i10 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr>;

        $i28 = (int) $s11;

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8StreamParser: void _reportInvalidOther(int,int)>($i28, $i10);

     label2:
        $i9 = $i15 << 6;

        $b8 = $b16 & 63;

        $i29 = (int) $b8;

        $i12 = $i9 | $i29;

        return $i12;
    }

    private final int _decodeUtf8_4(int) throws java.io.IOException, org.codehaus.jackson.JsonParseException
    {
        byte[] $r1, $r2, $r3;
        org.codehaus.jackson.impl.Utf8StreamParser r0;
        byte $b6, $b13, $b20, $b26, $b30, $b34;
        short $s4, $s12, $s19, $s25, $s28, $s32, $s36, $s38, $s41, $s43, $s46, $s48;
        int $i0, $i1, $i2, $i3, $i5, $i7, $i8, $i9, $i10, $i11, $i14, $i15, $i16, $i17, $i18, $i21, $i22, $i23, $i24, $i27, $i29, $i31, $i33, i35, $i37, $i39, $i40, $i42, $i44, $i45, $i47, $i49, $i50;

        r0 := @this: org.codehaus.jackson.impl.Utf8StreamParser;

        i35 := @parameter0: int;

        $i1 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr>;

        $i0 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputEnd>;

        if $i1 < $i0 goto label1;

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8StreamParser: void loadMoreGuaranteed()>();

     label1:
        $r1 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: byte[] _inputBuffer>;

        $i2 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr>;

        $i3 = $i2 + 1;

        r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr> = $i3;

        $b34 = $r1[$i2];

        $s36 = (short) $b34;

        $s4 = $s36 & 192;

        $i37 = (int) $s4;

        if $i37 == 128 goto label2;

        $s38 = (short) $b34;

        $s32 = $s38 & 255;

        $i31 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr>;

        $i39 = (int) $s32;

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8StreamParser: void _reportInvalidOther(int,int)>($i39, $i31);

     label2:
        $i5 = i35 & 7;

        $i7 = $i5 << 6;

        $b6 = $b34 & 63;

        $i40 = (int) $b6;

        $i33 = $i7 | $i40;

        $i9 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr>;

        $i8 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputEnd>;

        if $i9 < $i8 goto label3;

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8StreamParser: void loadMoreGuaranteed()>();

     label3:
        $r2 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: byte[] _inputBuffer>;

        $i10 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr>;

        $i11 = $i10 + 1;

        r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr> = $i11;

        $b30 = $r2[$i10];

        $s41 = (short) $b30;

        $s12 = $s41 & 192;

        $i42 = (int) $s12;

        if $i42 == 128 goto label4;

        $s43 = (short) $b30;

        $s28 = $s43 & 255;

        $i27 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr>;

        $i44 = (int) $s28;

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8StreamParser: void _reportInvalidOther(int,int)>($i44, $i27);

     label4:
        $i14 = $i33 << 6;

        $b13 = $b30 & 63;

        $i45 = (int) $b13;

        $i29 = $i14 | $i45;

        $i16 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr>;

        $i15 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputEnd>;

        if $i16 < $i15 goto label5;

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8StreamParser: void loadMoreGuaranteed()>();

     label5:
        $r3 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: byte[] _inputBuffer>;

        $i17 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr>;

        $i18 = $i17 + 1;

        r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr> = $i18;

        $b26 = $r3[$i17];

        $s46 = (short) $b26;

        $s19 = $s46 & 192;

        $i47 = (int) $s19;

        if $i47 == 128 goto label6;

        $s48 = (short) $b26;

        $s25 = $s48 & 255;

        $i24 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr>;

        $i49 = (int) $s25;

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8StreamParser: void _reportInvalidOther(int,int)>($i49, $i24);

     label6:
        $i21 = $i29 << 6;

        $b20 = $b26 & 63;

        $i50 = (int) $b20;

        $i22 = $i21 | $i50;

        $i23 = $i22 - 65536;

        return $i23;
    }

    private final void _skipUtf8_2(int) throws java.io.IOException, org.codehaus.jackson.JsonParseException
    {
        byte[] $r1;
        org.codehaus.jackson.impl.Utf8StreamParser r0;
        short $s4, $s6, $s9, $s11;
        byte $b7;
        int $i0, $i1, $i2, $i3, $i5, i8, $i10, $i12;

        r0 := @this: org.codehaus.jackson.impl.Utf8StreamParser;

        i8 := @parameter0: int;

        $i1 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr>;

        $i0 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputEnd>;

        if $i1 < $i0 goto label1;

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8StreamParser: void loadMoreGuaranteed()>();

     label1:
        $r1 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: byte[] _inputBuffer>;

        $i2 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr>;

        $i3 = $i2 + 1;

        r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr> = $i3;

        $b7 = $r1[$i2];

        $s9 = (short) $b7;

        $s4 = $s9 & 192;

        $i10 = (int) $s4;

        if $i10 == 128 goto label2;

        $s11 = (short) $b7;

        $s6 = $s11 & 255;

        $i5 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr>;

        $i12 = (int) $s6;

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8StreamParser: void _reportInvalidOther(int,int)>($i12, $i5);

     label2:
        return;
    }

    private final void _skipUtf8_3(int) throws java.io.IOException, org.codehaus.jackson.JsonParseException
    {
        byte[] $r1, $r2;
        org.codehaus.jackson.impl.Utf8StreamParser r0;
        short $s4, $s9, $s11, $s14, $s17, $s19, $s21, $s23;
        byte $b12, $b15;
        int $i0, $i1, $i2, $i3, $i5, $i6, $i7, $i8, $i10, $i13, i16, $i18, $i20, $i22, $i24;

        r0 := @this: org.codehaus.jackson.impl.Utf8StreamParser;

        i16 := @parameter0: int;

        $i1 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr>;

        $i0 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputEnd>;

        if $i1 < $i0 goto label1;

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8StreamParser: void loadMoreGuaranteed()>();

     label1:
        $r1 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: byte[] _inputBuffer>;

        $i2 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr>;

        $i3 = $i2 + 1;

        r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr> = $i3;

        $b15 = $r1[$i2];

        $s17 = (short) $b15;

        $s4 = $s17 & 192;

        $i18 = (int) $s4;

        if $i18 == 128 goto label2;

        $s19 = (short) $b15;

        $s14 = $s19 & 255;

        $i13 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr>;

        $i20 = (int) $s14;

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8StreamParser: void _reportInvalidOther(int,int)>($i20, $i13);

     label2:
        $i6 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr>;

        $i5 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputEnd>;

        if $i6 < $i5 goto label3;

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8StreamParser: void loadMoreGuaranteed()>();

     label3:
        $r2 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: byte[] _inputBuffer>;

        $i7 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr>;

        $i8 = $i7 + 1;

        r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr> = $i8;

        $b12 = $r2[$i7];

        $s21 = (short) $b12;

        $s9 = $s21 & 192;

        $i22 = (int) $s9;

        if $i22 == 128 goto label4;

        $s23 = (short) $b12;

        $s11 = $s23 & 255;

        $i10 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr>;

        $i24 = (int) $s11;

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8StreamParser: void _reportInvalidOther(int,int)>($i24, $i10);

     label4:
        return;
    }

    private final void _skipUtf8_4(int) throws java.io.IOException, org.codehaus.jackson.JsonParseException
    {
        byte[] $r1, $r2;
        org.codehaus.jackson.impl.Utf8StreamParser r0;
        byte $b15, $b20;
        short $s4, $s7, $s12, $s14, $s17, $s19, $s22, $s24, $s26, $s28, $s30, $s32;
        int $i0, $i1, $i2, $i3, $i5, $i6, $i8, $i9, $i10, $i11, $i13, $i16, $i18, i21, $i23, $i25, $i27, $i29, $i31, $i33;

        r0 := @this: org.codehaus.jackson.impl.Utf8StreamParser;

        i21 := @parameter0: int;

        $i1 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr>;

        $i0 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputEnd>;

        if $i1 < $i0 goto label1;

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8StreamParser: void loadMoreGuaranteed()>();

     label1:
        $r1 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: byte[] _inputBuffer>;

        $i2 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr>;

        $i3 = $i2 + 1;

        r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr> = $i3;

        $b20 = $r1[$i2];

        $s22 = (short) $b20;

        $s4 = $s22 & 192;

        $i23 = (int) $s4;

        if $i23 == 128 goto label2;

        $s24 = (short) $b20;

        $s19 = $s24 & 255;

        $i18 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr>;

        $i25 = (int) $s19;

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8StreamParser: void _reportInvalidOther(int,int)>($i25, $i18);

     label2:
        $i6 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr>;

        $i5 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputEnd>;

        if $i6 < $i5 goto label3;

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8StreamParser: void loadMoreGuaranteed()>();

     label3:
        $s26 = (short) $b20;

        $s7 = $s26 & 192;

        $i27 = (int) $s7;

        if $i27 == 128 goto label4;

        $s28 = (short) $b20;

        $s17 = $s28 & 255;

        $i16 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr>;

        $i29 = (int) $s17;

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8StreamParser: void _reportInvalidOther(int,int)>($i29, $i16);

     label4:
        $i9 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr>;

        $i8 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputEnd>;

        if $i9 < $i8 goto label5;

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8StreamParser: void loadMoreGuaranteed()>();

     label5:
        $r2 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: byte[] _inputBuffer>;

        $i10 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr>;

        $i11 = $i10 + 1;

        r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr> = $i11;

        $b15 = $r2[$i10];

        $s30 = (short) $b15;

        $s12 = $s30 & 192;

        $i31 = (int) $s12;

        if $i31 == 128 goto label6;

        $s32 = (short) $b15;

        $s14 = $s32 & 255;

        $i13 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr>;

        $i33 = (int) $s14;

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8StreamParser: void _reportInvalidOther(int,int)>($i33, $i13);

     label6:
        return;
    }

    protected final void _skipCR() throws java.io.IOException
    {
        byte[] $r1;
        org.codehaus.jackson.impl.Utf8StreamParser r0;
        byte $b3;
        int $i0, $i1, $i2, $i4, $i5, $i6, $i7, $i8, $i9;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.impl.Utf8StreamParser;

        $i1 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr>;

        $i0 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputEnd>;

        if $i1 < $i0 goto label1;

        $z0 = virtualinvoke r0.<org.codehaus.jackson.impl.Utf8StreamParser: boolean loadMore()>();

        if $z0 == 0 goto label2;

     label1:
        $r1 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: byte[] _inputBuffer>;

        $i2 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr>;

        $b3 = $r1[$i2];

        $i9 = (int) $b3;

        if $i9 != 10 goto label2;

        $i4 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr>;

        $i5 = $i4 + 1;

        r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr> = $i5;

     label2:
        $i6 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _currInputRow>;

        $i7 = $i6 + 1;

        r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _currInputRow> = $i7;

        $i8 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr>;

        r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _currInputRowStart> = $i8;

        return;
    }

    protected final void _skipLF() throws java.io.IOException
    {
        int $i0, $i1, $i2;
        org.codehaus.jackson.impl.Utf8StreamParser r0;

        r0 := @this: org.codehaus.jackson.impl.Utf8StreamParser;

        $i0 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _currInputRow>;

        $i1 = $i0 + 1;

        r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _currInputRow> = $i1;

        $i2 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr>;

        r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _currInputRowStart> = $i2;

        return;
    }

    private int nextByte() throws java.io.IOException, org.codehaus.jackson.JsonParseException
    {
        byte[] $r1;
        org.codehaus.jackson.impl.Utf8StreamParser r0;
        short $s5, $s6;
        byte $b4;
        int $i0, $i1, $i2, $i3, $i7;

        r0 := @this: org.codehaus.jackson.impl.Utf8StreamParser;

        $i1 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr>;

        $i0 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputEnd>;

        if $i1 < $i0 goto label1;

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8StreamParser: void loadMoreGuaranteed()>();

     label1:
        $r1 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: byte[] _inputBuffer>;

        $i2 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr>;

        $i3 = $i2 + 1;

        r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr> = $i3;

        $b4 = $r1[$i2];

        $s6 = (short) $b4;

        $s5 = $s6 & 255;

        $i7 = (int) $s5;

        return $i7;
    }

    protected void _reportInvalidChar(int) throws org.codehaus.jackson.JsonParseException
    {
        int i0;
        org.codehaus.jackson.impl.Utf8StreamParser r0;

        r0 := @this: org.codehaus.jackson.impl.Utf8StreamParser;

        i0 := @parameter0: int;

        if i0 >= 32 goto label1;

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8StreamParser: void _throwInvalidSpace(int)>(i0);

     label1:
        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8StreamParser: void _reportInvalidInitial(int)>(i0);

        return;
    }

    protected void _reportInvalidInitial(int) throws org.codehaus.jackson.JsonParseException
    {
        int i0;
        java.lang.StringBuilder $r1, $r2, $r4;
        java.lang.String $r3, $r5;
        org.codehaus.jackson.impl.Utf8StreamParser r0;

        r0 := @this: org.codehaus.jackson.impl.Utf8StreamParser;

        i0 := @parameter0: int;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid UTF-8 start byte 0x");

        $r3 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i0);

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8StreamParser: void _reportError(java.lang.String)>($r5);

        return;
    }

    protected void _reportInvalidOther(int) throws org.codehaus.jackson.JsonParseException
    {
        int i0;
        java.lang.StringBuilder $r1, $r2, $r4;
        java.lang.String $r3, $r5;
        org.codehaus.jackson.impl.Utf8StreamParser r0;

        r0 := @this: org.codehaus.jackson.impl.Utf8StreamParser;

        i0 := @parameter0: int;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid UTF-8 middle byte 0x");

        $r3 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i0);

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8StreamParser: void _reportError(java.lang.String)>($r5);

        return;
    }

    protected void _reportInvalidOther(int, int) throws org.codehaus.jackson.JsonParseException
    {
        int i0, i1;
        org.codehaus.jackson.impl.Utf8StreamParser r0;

        r0 := @this: org.codehaus.jackson.impl.Utf8StreamParser;

        i1 := @parameter0: int;

        i0 := @parameter1: int;

        r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr> = i0;

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8StreamParser: void _reportInvalidOther(int)>(i1);

        return;
    }

    public static int[] growArrayBy(int[], int)
    {
        int[] $r0, r1, r2;
        int i0, i1, $i2;

        r1 := @parameter0: int[];

        i1 := @parameter1: int;

        if r1 != null goto label1;

        $r0 = newarray (int)[i1];

        return $r0;

     label1:
        i0 = lengthof r1;

        $i2 = i0 + i1;

        r2 = newarray (int)[$i2];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, r2, 0, i0);

        return r2;
    }

    protected byte[] _decodeBase64(org.codehaus.jackson.Base64Variant) throws java.io.IOException, org.codehaus.jackson.JsonParseException
    {
        byte[] $r2, $r4, $r5, $r6, $r8, $r18;
        org.codehaus.jackson.impl.Utf8StreamParser r0;
        byte $b2, $b8, $b15, $b22, $b30;
        org.codehaus.jackson.Base64Variant r3;
        java.lang.StringBuilder $r10, $r11, $r12, $r19;
        short $s25, $s32, $s33, $s34, $s35, $s43, $s48, $s51, $s56, $s59;
        java.lang.String $r13;
        org.codehaus.jackson.util.ByteArrayBuilder $r1;
        boolean $z0;
        int $i0, $i1, $i3, $i4, $i5, $i6, $i7, $i9, $i10, $i11, $i12, $i13, $i14, $i16, $i17, $i18, $i19, $i20, $i21, $i23, $i24, $i26, $i27, $i28, $i29, $i36, $i37, i38, i39, i40, i41, i42, $i44, $i45, $i46, $i47, $i49, $i50, $i52, $i54, $i55, $i57, $i58, $i60, $i62, $i63;
        char $c31;
        java.lang.IllegalArgumentException $r7, $r14, $r15, $r16, $r17;

        r0 := @this: org.codehaus.jackson.impl.Utf8StreamParser;

        r3 := @parameter0: org.codehaus.jackson.Base64Variant;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.impl.Utf8StreamParser: org.codehaus.jackson.util.ByteArrayBuilder _getByteArrayBuilder()>();

     label01:
        $i36 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr>;

        $i37 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputEnd>;

        if $i36 < $i37 goto label02;

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8StreamParser: void loadMoreGuaranteed()>();

     label02:
        $r2 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: byte[] _inputBuffer>;

        $i0 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr>;

        $i1 = $i0 + 1;

        r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr> = $i1;

        $b2 = $r2[$i0];

        $s43 = (short) $b2;

        $s35 = $s43 & 255;

        $i44 = (int) $s35;

        if $i44 <= 32 goto label01;

        $i45 = (int) $s35;

        $i3 = virtualinvoke r3.<org.codehaus.jackson.Base64Variant: int decodeBase64Char(int)>($i45);

        if $i3 >= 0 goto label04;

        $i46 = (int) $s35;

        if $i46 != 34 goto label03;

        $r18 = virtualinvoke $r1.<org.codehaus.jackson.util.ByteArrayBuilder: byte[] toByteArray()>();

        return $r18;

     label03:
        $i47 = (int) $s35;

        $r17 = virtualinvoke r0.<org.codehaus.jackson.impl.Utf8StreamParser: java.lang.IllegalArgumentException reportInvalidChar(org.codehaus.jackson.Base64Variant,int,int)>(r3, $i47, 0);

        throw $r17;

     label04:
        $i5 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr>;

        $i4 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputEnd>;

        if $i5 < $i4 goto label05;

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8StreamParser: void loadMoreGuaranteed()>();

     label05:
        $r4 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: byte[] _inputBuffer>;

        $i6 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr>;

        $i7 = $i6 + 1;

        r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr> = $i7;

        $b8 = $r4[$i6];

        $s48 = (short) $b8;

        $s34 = $s48 & 255;

        $i49 = (int) $s34;

        $i9 = virtualinvoke r3.<org.codehaus.jackson.Base64Variant: int decodeBase64Char(int)>($i49);

        if $i9 >= 0 goto label06;

        $i50 = (int) $s34;

        $r16 = virtualinvoke r0.<org.codehaus.jackson.impl.Utf8StreamParser: java.lang.IllegalArgumentException reportInvalidChar(org.codehaus.jackson.Base64Variant,int,int)>(r3, $i50, 1);

        throw $r16;

     label06:
        $i10 = $i3 << 6;

        i38 = $i10 | $i9;

        $i12 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr>;

        $i11 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputEnd>;

        if $i12 < $i11 goto label07;

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8StreamParser: void loadMoreGuaranteed()>();

     label07:
        $r5 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: byte[] _inputBuffer>;

        $i13 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr>;

        $i14 = $i13 + 1;

        r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr> = $i14;

        $b15 = $r5[$i13];

        $s51 = (short) $b15;

        $s33 = $s51 & 255;

        $i52 = (int) $s33;

        $i16 = virtualinvoke r3.<org.codehaus.jackson.Base64Variant: int decodeBase64Char(int)>($i52);

        if $i16 >= 0 goto label11;

        $i54 = (int) -2;

        if $i16 == $i54 goto label08;

        $i55 = (int) $s33;

        $r15 = virtualinvoke r0.<org.codehaus.jackson.impl.Utf8StreamParser: java.lang.IllegalArgumentException reportInvalidChar(org.codehaus.jackson.Base64Variant,int,int)>(r3, $i55, 2);

        throw $r15;

     label08:
        $i27 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr>;

        $i26 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputEnd>;

        if $i27 < $i26 goto label09;

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8StreamParser: void loadMoreGuaranteed()>();

     label09:
        $r8 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: byte[] _inputBuffer>;

        $i28 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr>;

        $i29 = $i28 + 1;

        r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr> = $i29;

        $b30 = $r8[$i28];

        $s56 = (short) $b30;

        $s32 = $s56 & 255;

        $i57 = (int) $s32;

        $z0 = virtualinvoke r3.<org.codehaus.jackson.Base64Variant: boolean usesPaddingChar(int)>($i57);

        if $z0 != 0 goto label10;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("expected padding character \'");

        $c31 = virtualinvoke r3.<org.codehaus.jackson.Base64Variant: char getPaddingChar()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c31);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        $i58 = (int) $s32;

        $r14 = virtualinvoke r0.<org.codehaus.jackson.impl.Utf8StreamParser: java.lang.IllegalArgumentException reportInvalidChar(org.codehaus.jackson.Base64Variant,int,int,java.lang.String)>(r3, $i58, 3, $r13);

        throw $r14;

     label10:
        i39 = i38 >> 4;

        virtualinvoke $r1.<org.codehaus.jackson.util.ByteArrayBuilder: void append(int)>(i39);

        goto label01;

     label11:
        $i17 = i38 << 6;

        i40 = $i17 | $i16;

        $i19 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr>;

        $i18 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputEnd>;

        if $i19 < $i18 goto label12;

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8StreamParser: void loadMoreGuaranteed()>();

     label12:
        $r6 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: byte[] _inputBuffer>;

        $i20 = r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr>;

        $i21 = $i20 + 1;

        r0.<org.codehaus.jackson.impl.Utf8StreamParser: int _inputPtr> = $i21;

        $b22 = $r6[$i20];

        $s59 = (short) $b22;

        $s25 = $s59 & 255;

        $i60 = (int) $s25;

        $i23 = virtualinvoke r3.<org.codehaus.jackson.Base64Variant: int decodeBase64Char(int)>($i60);

        if $i23 >= 0 goto label14;

        $i62 = (int) -2;

        if $i23 == $i62 goto label13;

        $i63 = (int) $s25;

        $r7 = virtualinvoke r0.<org.codehaus.jackson.impl.Utf8StreamParser: java.lang.IllegalArgumentException reportInvalidChar(org.codehaus.jackson.Base64Variant,int,int)>(r3, $i63, 3);

        throw $r7;

     label13:
        i41 = i40 >> 2;

        virtualinvoke $r1.<org.codehaus.jackson.util.ByteArrayBuilder: void appendTwoBytes(int)>(i41);

        goto label15;

     label14:
        $i24 = i40 << 6;

        i42 = $i24 | $i23;

        virtualinvoke $r1.<org.codehaus.jackson.util.ByteArrayBuilder: void appendThreeBytes(int)>(i42);

     label15:
        goto label01;
    }

    protected java.lang.IllegalArgumentException reportInvalidChar(org.codehaus.jackson.Base64Variant, int, int) throws java.lang.IllegalArgumentException
    {
        org.codehaus.jackson.Base64Variant r1;
        int i0, i1;
        org.codehaus.jackson.impl.Utf8StreamParser r0;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: org.codehaus.jackson.impl.Utf8StreamParser;

        r1 := @parameter0: org.codehaus.jackson.Base64Variant;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = virtualinvoke r0.<org.codehaus.jackson.impl.Utf8StreamParser: java.lang.IllegalArgumentException reportInvalidChar(org.codehaus.jackson.Base64Variant,int,int,java.lang.String)>(r1, i0, i1, null);

        return $r2;
    }

    protected java.lang.IllegalArgumentException reportInvalidChar(org.codehaus.jackson.Base64Variant, int, int, java.lang.String) throws java.lang.IllegalArgumentException
    {
        org.codehaus.jackson.impl.Utf8StreamParser r32;
        org.codehaus.jackson.Base64Variant r0;
        boolean $z0, $z1, $z2;
        java.lang.StringBuilder $r1, $r2, $r4, $r5, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r28, $r29, $r30, $r31;
        int i0, i3, $i4, $i5;
        java.lang.String $r3, r6, $r16, $r27, r33;
        char $c1, $c2;
        java.lang.IllegalArgumentException $r7;

        r32 := @this: org.codehaus.jackson.impl.Utf8StreamParser;

        r0 := @parameter0: org.codehaus.jackson.Base64Variant;

        i0 := @parameter1: int;

        i3 := @parameter2: int;

        r6 := @parameter3: java.lang.String;

        if i0 > 32 goto label1;

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal white space character (code 0x");

        $r27 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i0);

        $r28 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r27);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") as character #");

        $i5 = i3 + 1;

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" of 4-char base64 unit: can only used between units");

        r33 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label5;

     label1:
        $z0 = virtualinvoke r0.<org.codehaus.jackson.Base64Variant: boolean usesPaddingChar(int)>(i0);

        if $z0 == 0 goto label2;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected padding character (\'");

        $c2 = virtualinvoke r0.<org.codehaus.jackson.Base64Variant: char getPaddingChar()>();

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c2);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\') as character #");

        $i4 = i3 + 1;

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" of 4-char base64 unit: padding only legal as 3rd or 4th character");

        r33 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label5;

     label2:
        $z1 = staticinvoke <java.lang.Character: boolean isDefined(int)>(i0);

        if $z1 == 0 goto label3;

        $z2 = staticinvoke <java.lang.Character: boolean isISOControl(int)>(i0);

        if $z2 == 0 goto label4;

     label3:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal character (code 0x");

        $r3 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i0);

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") in base64 content");

        r33 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label5;

     label4:
        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal character \'");

        $c1 = (char) i0;

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c1);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' (code 0x");

        $r16 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i0);

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") in base64 content");

        r33 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

     label5:
        if r6 == null goto label6;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r33);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        r33 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

     label6:
        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(r33);

        return $r7;
    }

    public static void <clinit>()
    {
        <org.codehaus.jackson.impl.Utf8StreamParser: byte BYTE_LF> = 10;

        return;
    }
}
