final class kodkod.util.ints.AbstractSparseSequence$1 extends kodkod.util.ints.AbstractIntSet
{
    final kodkod.util.ints.AbstractSparseSequence this$0;

    void <init>(kodkod.util.ints.AbstractSparseSequence)
    {
        kodkod.util.ints.AbstractSparseSequence$1 r0;
        kodkod.util.ints.AbstractSparseSequence r1;

        r0 := @this: kodkod.util.ints.AbstractSparseSequence$1;

        r1 := @parameter0: kodkod.util.ints.AbstractSparseSequence;

        r0.<kodkod.util.ints.AbstractSparseSequence$1: kodkod.util.ints.AbstractSparseSequence this$0> = r1;

        specialinvoke r0.<kodkod.util.ints.AbstractIntSet: void <init>()>();

        return;
    }

    public kodkod.util.ints.IntIterator iterator(int, int)
    {
        kodkod.util.ints.AbstractSparseSequence$1$1 $r0;
        kodkod.util.ints.AbstractSparseSequence$1 r1;
        int i0, i1;

        r1 := @this: kodkod.util.ints.AbstractSparseSequence$1;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r0 = new kodkod.util.ints.AbstractSparseSequence$1$1;

        specialinvoke $r0.<kodkod.util.ints.AbstractSparseSequence$1$1: void <init>(kodkod.util.ints.AbstractSparseSequence$1,int,int)>(r1, i0, i1);

        return $r0;
    }

    public int size()
    {
        int $i0;
        kodkod.util.ints.AbstractSparseSequence$1 r0;
        kodkod.util.ints.AbstractSparseSequence $r1;

        r0 := @this: kodkod.util.ints.AbstractSparseSequence$1;

        $r1 = r0.<kodkod.util.ints.AbstractSparseSequence$1: kodkod.util.ints.AbstractSparseSequence this$0>;

        $i0 = virtualinvoke $r1.<kodkod.util.ints.AbstractSparseSequence: int size()>();

        return $i0;
    }

    public boolean contains(int)
    {
        kodkod.util.ints.AbstractSparseSequence$1 r0;
        kodkod.util.ints.AbstractSparseSequence $r1;
        int i0;
        boolean $z0;

        r0 := @this: kodkod.util.ints.AbstractSparseSequence$1;

        i0 := @parameter0: int;

        $r1 = r0.<kodkod.util.ints.AbstractSparseSequence$1: kodkod.util.ints.AbstractSparseSequence this$0>;

        $z0 = virtualinvoke $r1.<kodkod.util.ints.AbstractSparseSequence: boolean containsIndex(int)>(i0);

        return $z0;
    }

    public int min()
    {
        kodkod.util.ints.AbstractSparseSequence$1 r0;
        kodkod.util.ints.AbstractSparseSequence $r1;
        kodkod.util.ints.IndexedEntry $r2;
        int $i0;
        java.util.NoSuchElementException $r3;

        r0 := @this: kodkod.util.ints.AbstractSparseSequence$1;

        $r1 = r0.<kodkod.util.ints.AbstractSparseSequence$1: kodkod.util.ints.AbstractSparseSequence this$0>;

        $r2 = virtualinvoke $r1.<kodkod.util.ints.AbstractSparseSequence: kodkod.util.ints.IndexedEntry first()>();

        if $r2 != null goto label1;

        $r3 = new java.util.NoSuchElementException;

        specialinvoke $r3.<java.util.NoSuchElementException: void <init>()>();

        throw $r3;

     label1:
        $i0 = interfaceinvoke $r2.<kodkod.util.ints.IndexedEntry: int index()>();

        return $i0;
    }

    public int max()
    {
        kodkod.util.ints.AbstractSparseSequence$1 r0;
        kodkod.util.ints.AbstractSparseSequence $r1;
        kodkod.util.ints.IndexedEntry $r2;
        int $i0;
        java.util.NoSuchElementException $r3;

        r0 := @this: kodkod.util.ints.AbstractSparseSequence$1;

        $r1 = r0.<kodkod.util.ints.AbstractSparseSequence$1: kodkod.util.ints.AbstractSparseSequence this$0>;

        $r2 = virtualinvoke $r1.<kodkod.util.ints.AbstractSparseSequence: kodkod.util.ints.IndexedEntry last()>();

        if $r2 != null goto label1;

        $r3 = new java.util.NoSuchElementException;

        specialinvoke $r3.<java.util.NoSuchElementException: void <init>()>();

        throw $r3;

     label1:
        $i0 = interfaceinvoke $r2.<kodkod.util.ints.IndexedEntry: int index()>();

        return $i0;
    }

    public boolean remove(int)
    {
        kodkod.util.ints.AbstractSparseSequence$1 r0;
        kodkod.util.ints.AbstractSparseSequence $r1, $r2;
        int i0;
        boolean $z0;

        r0 := @this: kodkod.util.ints.AbstractSparseSequence$1;

        i0 := @parameter0: int;

        $r1 = r0.<kodkod.util.ints.AbstractSparseSequence$1: kodkod.util.ints.AbstractSparseSequence this$0>;

        $z0 = virtualinvoke $r1.<kodkod.util.ints.AbstractSparseSequence: boolean containsIndex(int)>(i0);

        $r2 = r0.<kodkod.util.ints.AbstractSparseSequence$1: kodkod.util.ints.AbstractSparseSequence this$0>;

        virtualinvoke $r2.<kodkod.util.ints.AbstractSparseSequence: java.lang.Object remove(int)>(i0);

        return $z0;
    }

    public int floor(int)
    {
        kodkod.util.ints.AbstractSparseSequence$1 r0;
        kodkod.util.ints.AbstractSparseSequence $r1;
        kodkod.util.ints.IndexedEntry $r2;
        int i0, $i1;
        java.util.NoSuchElementException $r3;

        r0 := @this: kodkod.util.ints.AbstractSparseSequence$1;

        i0 := @parameter0: int;

        $r1 = r0.<kodkod.util.ints.AbstractSparseSequence$1: kodkod.util.ints.AbstractSparseSequence this$0>;

        $r2 = virtualinvoke $r1.<kodkod.util.ints.AbstractSparseSequence: kodkod.util.ints.IndexedEntry floor(int)>(i0);

        if $r2 != null goto label1;

        $r3 = new java.util.NoSuchElementException;

        specialinvoke $r3.<java.util.NoSuchElementException: void <init>()>();

        throw $r3;

     label1:
        $i1 = interfaceinvoke $r2.<kodkod.util.ints.IndexedEntry: int index()>();

        return $i1;
    }

    public int ceil(int)
    {
        kodkod.util.ints.AbstractSparseSequence$1 r0;
        kodkod.util.ints.AbstractSparseSequence $r1;
        kodkod.util.ints.IndexedEntry $r2;
        int i0, $i1;
        java.util.NoSuchElementException $r3;

        r0 := @this: kodkod.util.ints.AbstractSparseSequence$1;

        i0 := @parameter0: int;

        $r1 = r0.<kodkod.util.ints.AbstractSparseSequence$1: kodkod.util.ints.AbstractSparseSequence this$0>;

        $r2 = virtualinvoke $r1.<kodkod.util.ints.AbstractSparseSequence: kodkod.util.ints.IndexedEntry ceil(int)>(i0);

        if $r2 != null goto label1;

        $r3 = new java.util.NoSuchElementException;

        specialinvoke $r3.<java.util.NoSuchElementException: void <init>()>();

        throw $r3;

     label1:
        $i1 = interfaceinvoke $r2.<kodkod.util.ints.IndexedEntry: int index()>();

        return $i1;
    }

    public void clear()
    {
        kodkod.util.ints.AbstractSparseSequence$1 r0;
        kodkod.util.ints.AbstractSparseSequence $r1;

        r0 := @this: kodkod.util.ints.AbstractSparseSequence$1;

        $r1 = r0.<kodkod.util.ints.AbstractSparseSequence$1: kodkod.util.ints.AbstractSparseSequence this$0>;

        virtualinvoke $r1.<kodkod.util.ints.AbstractSparseSequence: void clear()>();

        return;
    }

    public kodkod.util.ints.IntSet clone() throws java.lang.CloneNotSupportedException
    {
        kodkod.util.ints.AbstractSparseSequence$1 r0;
        kodkod.util.ints.IntSet r1;
        int $i0, $i1, $i2;

        r0 := @this: kodkod.util.ints.AbstractSparseSequence$1;

        $i0 = virtualinvoke r0.<kodkod.util.ints.AbstractSparseSequence$1: int size()>();

        if $i0 != 0 goto label1;

        r1 = staticinvoke <kodkod.util.ints.Ints: kodkod.util.ints.IntSet bestSet(int,int)>(-2147483648, 2147483647);

        goto label2;

     label1:
        $i1 = virtualinvoke r0.<kodkod.util.ints.AbstractSparseSequence$1: int min()>();

        $i2 = virtualinvoke r0.<kodkod.util.ints.AbstractSparseSequence$1: int max()>();

        r1 = staticinvoke <kodkod.util.ints.Ints: kodkod.util.ints.IntSet bestSet(int,int)>($i1, $i2);

     label2:
        interfaceinvoke r1.<kodkod.util.ints.IntSet: boolean addAll(kodkod.util.ints.IntCollection)>(r0);

        return r1;
    }

    static kodkod.util.ints.AbstractSparseSequence access$0(kodkod.util.ints.AbstractSparseSequence$1)
    {
        kodkod.util.ints.AbstractSparseSequence$1 r0;
        kodkod.util.ints.AbstractSparseSequence $r1;

        r0 := @parameter0: kodkod.util.ints.AbstractSparseSequence$1;

        $r1 = r0.<kodkod.util.ints.AbstractSparseSequence$1: kodkod.util.ints.AbstractSparseSequence this$0>;

        return $r1;
    }
}
