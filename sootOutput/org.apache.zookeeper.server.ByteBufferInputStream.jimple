public class org.apache.zookeeper.server.ByteBufferInputStream extends java.io.InputStream
{
    java.nio.ByteBuffer bb;

    public void <init>(java.nio.ByteBuffer)
    {
        org.apache.zookeeper.server.ByteBufferInputStream r0;
        java.nio.ByteBuffer r1;

        r0 := @this: org.apache.zookeeper.server.ByteBufferInputStream;

        r1 := @parameter0: java.nio.ByteBuffer;

        specialinvoke r0.<java.io.InputStream: void <init>()>();

        r0.<org.apache.zookeeper.server.ByteBufferInputStream: java.nio.ByteBuffer bb> = r1;

        return;
    }

    public int read() throws java.io.IOException
    {
        org.apache.zookeeper.server.ByteBufferInputStream r0;
        java.nio.ByteBuffer $r1, $r2;
        short $s2, $s5;
        byte $b1;
        int $i0, $i4, $i6;

        r0 := @this: org.apache.zookeeper.server.ByteBufferInputStream;

        $r1 = r0.<org.apache.zookeeper.server.ByteBufferInputStream: java.nio.ByteBuffer bb>;

        $i0 = virtualinvoke $r1.<java.nio.ByteBuffer: int remaining()>();

        if $i0 != 0 goto label1;

        $i4 = (int) -1;

        return $i4;

     label1:
        $r2 = r0.<org.apache.zookeeper.server.ByteBufferInputStream: java.nio.ByteBuffer bb>;

        $b1 = virtualinvoke $r2.<java.nio.ByteBuffer: byte get()>();

        $s5 = (short) $b1;

        $s2 = $s5 & 255;

        $i6 = (int) $s2;

        return $i6;
    }

    public int available() throws java.io.IOException
    {
        int $i0;
        org.apache.zookeeper.server.ByteBufferInputStream r0;
        java.nio.ByteBuffer $r1;

        r0 := @this: org.apache.zookeeper.server.ByteBufferInputStream;

        $r1 = r0.<org.apache.zookeeper.server.ByteBufferInputStream: java.nio.ByteBuffer bb>;

        $i0 = virtualinvoke $r1.<java.nio.ByteBuffer: int remaining()>();

        return $i0;
    }

    public int read(byte[], int, int) throws java.io.IOException
    {
        byte[] r3;
        org.apache.zookeeper.server.ByteBufferInputStream r0;
        java.nio.ByteBuffer $r1, $r2, $r4, $r5;
        int $i0, $i1, i2, i3, $i5;

        r0 := @this: org.apache.zookeeper.server.ByteBufferInputStream;

        r3 := @parameter0: byte[];

        i2 := @parameter1: int;

        i3 := @parameter2: int;

        $r1 = r0.<org.apache.zookeeper.server.ByteBufferInputStream: java.nio.ByteBuffer bb>;

        $i0 = virtualinvoke $r1.<java.nio.ByteBuffer: int remaining()>();

        if $i0 != 0 goto label1;

        $i5 = (int) -1;

        return $i5;

     label1:
        $r2 = r0.<org.apache.zookeeper.server.ByteBufferInputStream: java.nio.ByteBuffer bb>;

        $i1 = virtualinvoke $r2.<java.nio.ByteBuffer: int remaining()>();

        if i3 <= $i1 goto label2;

        $r5 = r0.<org.apache.zookeeper.server.ByteBufferInputStream: java.nio.ByteBuffer bb>;

        i3 = virtualinvoke $r5.<java.nio.ByteBuffer: int remaining()>();

     label2:
        $r4 = r0.<org.apache.zookeeper.server.ByteBufferInputStream: java.nio.ByteBuffer bb>;

        virtualinvoke $r4.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[],int,int)>(r3, i2, i3);

        return i3;
    }

    public int read(byte[]) throws java.io.IOException
    {
        byte[] r1;
        org.apache.zookeeper.server.ByteBufferInputStream r0;
        int $i0, $i1;

        r0 := @this: org.apache.zookeeper.server.ByteBufferInputStream;

        r1 := @parameter0: byte[];

        $i0 = lengthof r1;

        $i1 = virtualinvoke r0.<org.apache.zookeeper.server.ByteBufferInputStream: int read(byte[],int,int)>(r1, 0, $i0);

        return $i1;
    }

    public long skip(long) throws java.io.IOException
    {
        long $l1, l2, $l4, l10;
        java.nio.ByteBuffer $r1, $r2, $r3, $r4, $r5;
        byte $b5;
        int $i0, $i3, $i6, $i7, $i8, $i9, $i11;
        org.apache.zookeeper.server.ByteBufferInputStream r0;

        r0 := @this: org.apache.zookeeper.server.ByteBufferInputStream;

        l10 := @parameter0: long;

        $r1 = r0.<org.apache.zookeeper.server.ByteBufferInputStream: java.nio.ByteBuffer bb>;

        $i0 = virtualinvoke $r1.<java.nio.ByteBuffer: int position()>();

        $l1 = (long) $i0;

        l2 = $l1 + l10;

        $r2 = r0.<org.apache.zookeeper.server.ByteBufferInputStream: java.nio.ByteBuffer bb>;

        $i3 = virtualinvoke $r2.<java.nio.ByteBuffer: int remaining()>();

        $l4 = (long) $i3;

        $b5 = l2 cmp $l4;

        $i11 = (int) $b5;

        if $i11 <= 0 goto label1;

        $r5 = r0.<org.apache.zookeeper.server.ByteBufferInputStream: java.nio.ByteBuffer bb>;

        $i9 = virtualinvoke $r5.<java.nio.ByteBuffer: int remaining()>();

        l10 = (long) $i9;

     label1:
        $r4 = r0.<org.apache.zookeeper.server.ByteBufferInputStream: java.nio.ByteBuffer bb>;

        $r3 = r0.<org.apache.zookeeper.server.ByteBufferInputStream: java.nio.ByteBuffer bb>;

        $i6 = virtualinvoke $r3.<java.nio.ByteBuffer: int position()>();

        $i7 = (int) l10;

        $i8 = $i6 + $i7;

        virtualinvoke $r4.<java.nio.ByteBuffer: java.nio.Buffer position(int)>($i8);

        return l10;
    }

    public static void byteBuffer2Record(java.nio.ByteBuffer, org.apache.jute.Record) throws java.io.IOException
    {
        org.apache.zookeeper.server.ByteBufferInputStream $r0;
        org.apache.jute.Record r3;
        java.nio.ByteBuffer r1;
        org.apache.jute.BinaryInputArchive $r2;

        r1 := @parameter0: java.nio.ByteBuffer;

        r3 := @parameter1: org.apache.jute.Record;

        $r0 = new org.apache.zookeeper.server.ByteBufferInputStream;

        specialinvoke $r0.<org.apache.zookeeper.server.ByteBufferInputStream: void <init>(java.nio.ByteBuffer)>(r1);

        $r2 = staticinvoke <org.apache.jute.BinaryInputArchive: org.apache.jute.BinaryInputArchive getArchive(java.io.InputStream)>($r0);

        interfaceinvoke r3.<org.apache.jute.Record: void deserialize(org.apache.jute.InputArchive,java.lang.String)>($r2, "request");

        return;
    }
}
