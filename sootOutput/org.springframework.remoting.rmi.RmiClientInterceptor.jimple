public class org.springframework.remoting.rmi.RmiClientInterceptor extends org.springframework.remoting.support.RemoteInvocationBasedAccessor implements org.aopalliance.intercept.MethodInterceptor
{
    private boolean lookupStubOnStartup;
    private boolean cacheStub;
    private boolean refreshStubOnConnectFailure;
    private java.rmi.server.RMIClientSocketFactory registryClientSocketFactory;
    private java.rmi.Remote cachedStub;
    private final java.lang.Object stubMonitor;

    public void <init>()
    {
        org.springframework.remoting.rmi.RmiClientInterceptor r0;
        java.lang.Object $r1;

        r0 := @this: org.springframework.remoting.rmi.RmiClientInterceptor;

        specialinvoke r0.<org.springframework.remoting.support.RemoteInvocationBasedAccessor: void <init>()>();

        r0.<org.springframework.remoting.rmi.RmiClientInterceptor: boolean lookupStubOnStartup> = 1;

        r0.<org.springframework.remoting.rmi.RmiClientInterceptor: boolean cacheStub> = 1;

        r0.<org.springframework.remoting.rmi.RmiClientInterceptor: boolean refreshStubOnConnectFailure> = 0;

        $r1 = new java.lang.Object;

        specialinvoke $r1.<java.lang.Object: void <init>()>();

        r0.<org.springframework.remoting.rmi.RmiClientInterceptor: java.lang.Object stubMonitor> = $r1;

        return;
    }

    public void setLookupStubOnStartup(boolean)
    {
        org.springframework.remoting.rmi.RmiClientInterceptor r0;
        boolean z0;

        r0 := @this: org.springframework.remoting.rmi.RmiClientInterceptor;

        z0 := @parameter0: boolean;

        r0.<org.springframework.remoting.rmi.RmiClientInterceptor: boolean lookupStubOnStartup> = z0;

        return;
    }

    public void setCacheStub(boolean)
    {
        org.springframework.remoting.rmi.RmiClientInterceptor r0;
        boolean z0;

        r0 := @this: org.springframework.remoting.rmi.RmiClientInterceptor;

        z0 := @parameter0: boolean;

        r0.<org.springframework.remoting.rmi.RmiClientInterceptor: boolean cacheStub> = z0;

        return;
    }

    public void setRefreshStubOnConnectFailure(boolean)
    {
        org.springframework.remoting.rmi.RmiClientInterceptor r0;
        boolean z0;

        r0 := @this: org.springframework.remoting.rmi.RmiClientInterceptor;

        z0 := @parameter0: boolean;

        r0.<org.springframework.remoting.rmi.RmiClientInterceptor: boolean refreshStubOnConnectFailure> = z0;

        return;
    }

    public void setRegistryClientSocketFactory(java.rmi.server.RMIClientSocketFactory)
    {
        org.springframework.remoting.rmi.RmiClientInterceptor r0;
        java.rmi.server.RMIClientSocketFactory r1;

        r0 := @this: org.springframework.remoting.rmi.RmiClientInterceptor;

        r1 := @parameter0: java.rmi.server.RMIClientSocketFactory;

        r0.<org.springframework.remoting.rmi.RmiClientInterceptor: java.rmi.server.RMIClientSocketFactory registryClientSocketFactory> = r1;

        return;
    }

    public void afterPropertiesSet()
    {
        org.springframework.remoting.rmi.RmiClientInterceptor r0;

        r0 := @this: org.springframework.remoting.rmi.RmiClientInterceptor;

        specialinvoke r0.<org.springframework.remoting.support.RemoteInvocationBasedAccessor: void afterPropertiesSet()>();

        virtualinvoke r0.<org.springframework.remoting.rmi.RmiClientInterceptor: void prepare()>();

        return;
    }

    public void prepare() throws org.springframework.remoting.RemoteLookupFailureException
    {
        org.springframework.remoting.rmi.RmiClientInterceptor r0;
        java.lang.String $r8, $r11, $r16, $r19, $r22, $r23;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.rmi.Remote $r1;
        org.apache.commons.logging.Log $r2, $r6, $r18;
        java.lang.Class $r3, $r4, $r7;
        java.lang.StringBuilder $r5, $r9, $r10, $r12, $r13, $r14, $r15, $r17, $r20, $r21;

        r0 := @this: org.springframework.remoting.rmi.RmiClientInterceptor;

        $z0 = r0.<org.springframework.remoting.rmi.RmiClientInterceptor: boolean lookupStubOnStartup>;

        if $z0 == 0 goto label5;

        $r1 = virtualinvoke r0.<org.springframework.remoting.rmi.RmiClientInterceptor: java.rmi.Remote lookupStub()>();

        $r2 = r0.<org.springframework.remoting.rmi.RmiClientInterceptor: org.apache.commons.logging.Log logger>;

        $z1 = interfaceinvoke $r2.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z1 == 0 goto label4;

        $z2 = $r1 instanceof org.springframework.remoting.rmi.RmiInvocationHandler;

        if $z2 == 0 goto label1;

        $r18 = r0.<org.springframework.remoting.rmi.RmiClientInterceptor: org.apache.commons.logging.Log logger>;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>(java.lang.String)>("RMI stub [");

        $r19 = virtualinvoke r0.<org.springframework.remoting.rmi.RmiClientInterceptor: java.lang.String getServiceUrl()>();

        $r20 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] is an RMI invoker");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r18.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r22);

        goto label4;

     label1:
        $r3 = virtualinvoke r0.<org.springframework.remoting.rmi.RmiClientInterceptor: java.lang.Class getServiceInterface()>();

        if $r3 == null goto label4;

        $r4 = virtualinvoke r0.<org.springframework.remoting.rmi.RmiClientInterceptor: java.lang.Class getServiceInterface()>();

        $z3 = virtualinvoke $r4.<java.lang.Class: boolean isInstance(java.lang.Object)>($r1);

        $r6 = r0.<org.springframework.remoting.rmi.RmiClientInterceptor: org.apache.commons.logging.Log logger>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>("Using service interface [");

        $r7 = virtualinvoke r0.<org.springframework.remoting.rmi.RmiClientInterceptor: java.lang.Class getServiceInterface()>();

        $r8 = virtualinvoke $r7.<java.lang.Class: java.lang.String getName()>();

        $r9 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] for RMI stub [");

        $r11 = virtualinvoke r0.<org.springframework.remoting.rmi.RmiClientInterceptor: java.lang.String getServiceUrl()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] - ");

        if $z3 != 0 goto label2;

        $r23 = "not ";

        goto label3;

     label2:
        $r23 = "";

     label3:
        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("directly implemented");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r6.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r16);

     label4:
        $z4 = r0.<org.springframework.remoting.rmi.RmiClientInterceptor: boolean cacheStub>;

        if $z4 == 0 goto label5;

        r0.<org.springframework.remoting.rmi.RmiClientInterceptor: java.rmi.Remote cachedStub> = $r1;

     label5:
        return;
    }

    protected java.rmi.Remote lookupStub() throws org.springframework.remoting.RemoteLookupFailureException
    {
        java.net.URL $r10;
        java.rmi.registry.Registry $r40;
        java.rmi.NotBoundException $r24;
        boolean $z0, $z1, $z2;
        java.rmi.RemoteException $r22;
        java.lang.StringBuilder $r4, $r7, $r8, $r18, $r19, $r20, $r26, $r28, $r29, $r33, $r35, $r36;
        java.rmi.server.RMIClientSocketFactory $r1, $r39;
        org.springframework.remoting.rmi.RmiClientInterceptor$DummyURLStreamHandler $r12;
        org.springframework.remoting.rmi.RmiClientInterceptor r0;
        int $i0;
        org.springframework.remoting.RemoteLookupFailureException $r23, $r25, $r32;
        java.lang.String $r2, $r6, $r9, $r11, $r13, $r14, $r15, $r16, $r21, $r27, $r30, $r34, $r37, r38;
        java.rmi.Remote r41;
        java.net.MalformedURLException $r17, $r31;
        org.apache.commons.logging.Log $r3, $r5;

        r0 := @this: org.springframework.remoting.rmi.RmiClientInterceptor;

     label1:
        $r1 = r0.<org.springframework.remoting.rmi.RmiClientInterceptor: java.rmi.server.RMIClientSocketFactory registryClientSocketFactory>;

        if $r1 == null goto label4;

        $r10 = new java.net.URL;

        $r11 = virtualinvoke r0.<org.springframework.remoting.rmi.RmiClientInterceptor: java.lang.String getServiceUrl()>();

        $r12 = new org.springframework.remoting.rmi.RmiClientInterceptor$DummyURLStreamHandler;

        specialinvoke $r12.<org.springframework.remoting.rmi.RmiClientInterceptor$DummyURLStreamHandler: void <init>(org.springframework.remoting.rmi.RmiClientInterceptor$DummyURLStreamHandler)>(null);

        specialinvoke $r10.<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>(null, $r11, $r12);

        $r13 = virtualinvoke $r10.<java.net.URL: java.lang.String getProtocol()>();

        if $r13 == null goto label2;

        $r16 = "rmi";

        $z2 = virtualinvoke $r16.<java.lang.String: boolean equals(java.lang.Object)>($r13);

        if $z2 != 0 goto label2;

        $r17 = new java.net.MalformedURLException;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>(java.lang.String)>("Invalid URL scheme \'");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r17.<java.net.MalformedURLException: void <init>(java.lang.String)>($r21);

        throw $r17;

     label2:
        $r14 = virtualinvoke $r10.<java.net.URL: java.lang.String getHost()>();

        $i0 = virtualinvoke $r10.<java.net.URL: int getPort()>();

        $r15 = virtualinvoke $r10.<java.net.URL: java.lang.String getPath()>();

        r38 = $r15;

        if $r15 == null goto label3;

        $z1 = virtualinvoke $r15.<java.lang.String: boolean startsWith(java.lang.String)>("/");

        if $z1 == 0 goto label3;

        r38 = virtualinvoke $r15.<java.lang.String: java.lang.String substring(int)>(1);

     label3:
        $r39 = r0.<org.springframework.remoting.rmi.RmiClientInterceptor: java.rmi.server.RMIClientSocketFactory registryClientSocketFactory>;

        $r40 = staticinvoke <java.rmi.registry.LocateRegistry: java.rmi.registry.Registry getRegistry(java.lang.String,int,java.rmi.server.RMIClientSocketFactory)>($r14, $i0, $r39);

        r41 = interfaceinvoke $r40.<java.rmi.registry.Registry: java.rmi.Remote lookup(java.lang.String)>(r38);

        goto label5;

     label4:
        $r2 = virtualinvoke r0.<org.springframework.remoting.rmi.RmiClientInterceptor: java.lang.String getServiceUrl()>();

        r41 = staticinvoke <java.rmi.Naming: java.rmi.Remote lookup(java.lang.String)>($r2);

     label5:
        $r3 = r0.<org.springframework.remoting.rmi.RmiClientInterceptor: org.apache.commons.logging.Log logger>;

        $z0 = interfaceinvoke $r3.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z0 == 0 goto label6;

        $r5 = r0.<org.springframework.remoting.rmi.RmiClientInterceptor: org.apache.commons.logging.Log logger>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>("Located RMI stub with URL [");

        $r6 = virtualinvoke r0.<org.springframework.remoting.rmi.RmiClientInterceptor: java.lang.String getServiceUrl()>();

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r5.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r9);

     label6:
        return r41;

     label7:
        $r31 := @caughtexception;

        $r32 = new org.springframework.remoting.RemoteLookupFailureException;

        $r33 = new java.lang.StringBuilder;

        specialinvoke $r33.<java.lang.StringBuilder: void <init>(java.lang.String)>("Service URL [");

        $r34 = virtualinvoke r0.<org.springframework.remoting.rmi.RmiClientInterceptor: java.lang.String getServiceUrl()>();

        $r35 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r34);

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] is invalid");

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r32.<org.springframework.remoting.RemoteLookupFailureException: void <init>(java.lang.String,java.lang.Throwable)>($r37, $r31);

        throw $r32;

     label8:
        $r24 := @caughtexception;

        $r25 = new org.springframework.remoting.RemoteLookupFailureException;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>(java.lang.String)>("Could not find RMI service [");

        $r27 = virtualinvoke r0.<org.springframework.remoting.rmi.RmiClientInterceptor: java.lang.String getServiceUrl()>();

        $r28 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r27);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] in RMI registry");

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r25.<org.springframework.remoting.RemoteLookupFailureException: void <init>(java.lang.String,java.lang.Throwable)>($r30, $r24);

        throw $r25;

     label9:
        $r22 := @caughtexception;

        $r23 = new org.springframework.remoting.RemoteLookupFailureException;

        specialinvoke $r23.<org.springframework.remoting.RemoteLookupFailureException: void <init>(java.lang.String,java.lang.Throwable)>("Lookup of RMI stub failed", $r22);

        throw $r23;

        catch java.net.MalformedURLException from label1 to label6 with label7;
        catch java.rmi.NotBoundException from label1 to label6 with label8;
        catch java.rmi.RemoteException from label1 to label6 with label9;
    }

    protected java.rmi.Remote getStub() throws org.springframework.remoting.RemoteLookupFailureException
    {
        java.lang.Throwable $r6;
        java.rmi.Remote $r1, $r3, $r4, $r5, $r7;
        org.springframework.remoting.rmi.RmiClientInterceptor r0;
        java.lang.Object $r2;
        boolean $z0, $z1, $z2;

        r0 := @this: org.springframework.remoting.rmi.RmiClientInterceptor;

        $z0 = r0.<org.springframework.remoting.rmi.RmiClientInterceptor: boolean cacheStub>;

        if $z0 == 0 goto label1;

        $z1 = r0.<org.springframework.remoting.rmi.RmiClientInterceptor: boolean lookupStubOnStartup>;

        if $z1 == 0 goto label4;

        $z2 = r0.<org.springframework.remoting.rmi.RmiClientInterceptor: boolean refreshStubOnConnectFailure>;

        if $z2 != 0 goto label4;

     label1:
        $r1 = r0.<org.springframework.remoting.rmi.RmiClientInterceptor: java.rmi.Remote cachedStub>;

        if $r1 == null goto label2;

        $r7 = r0.<org.springframework.remoting.rmi.RmiClientInterceptor: java.rmi.Remote cachedStub>;

        goto label3;

     label2:
        $r7 = virtualinvoke r0.<org.springframework.remoting.rmi.RmiClientInterceptor: java.rmi.Remote lookupStub()>();

     label3:
        return $r7;

     label4:
        $r2 = r0.<org.springframework.remoting.rmi.RmiClientInterceptor: java.lang.Object stubMonitor>;

        entermonitor $r2;

     label5:
        $r3 = r0.<org.springframework.remoting.rmi.RmiClientInterceptor: java.rmi.Remote cachedStub>;

        if $r3 != null goto label6;

        $r5 = virtualinvoke r0.<org.springframework.remoting.rmi.RmiClientInterceptor: java.rmi.Remote lookupStub()>();

        r0.<org.springframework.remoting.rmi.RmiClientInterceptor: java.rmi.Remote cachedStub> = $r5;

     label6:
        $r4 = r0.<org.springframework.remoting.rmi.RmiClientInterceptor: java.rmi.Remote cachedStub>;

        exitmonitor $r2;

     label7:
        return $r4;

     label8:
        $r6 := @caughtexception;

        exitmonitor $r2;

     label9:
        throw $r6;

        catch java.lang.Throwable from label5 to label7 with label8;
        catch java.lang.Throwable from label8 to label9 with label8;
    }

    public java.lang.Object invoke(org.aopalliance.intercept.MethodInvocation) throws java.lang.Throwable
    {
        java.rmi.Remote $r1;
        java.rmi.RemoteException $r4;
        org.springframework.remoting.rmi.RmiClientInterceptor r0;
        org.aopalliance.intercept.MethodInvocation r2;
        java.lang.Object $r3, $r5, $r7;
        org.springframework.remoting.RemoteConnectFailureException $r6;
        boolean $z0;

        r0 := @this: org.springframework.remoting.rmi.RmiClientInterceptor;

        r2 := @parameter0: org.aopalliance.intercept.MethodInvocation;

        $r1 = virtualinvoke r0.<org.springframework.remoting.rmi.RmiClientInterceptor: java.rmi.Remote getStub()>();

     label1:
        $r3 = virtualinvoke r0.<org.springframework.remoting.rmi.RmiClientInterceptor: java.lang.Object doInvoke(org.aopalliance.intercept.MethodInvocation,java.rmi.Remote)>(r2, $r1);

     label2:
        return $r3;

     label3:
        $r6 := @caughtexception;

        $r7 = specialinvoke r0.<org.springframework.remoting.rmi.RmiClientInterceptor: java.lang.Object handleRemoteConnectFailure(org.aopalliance.intercept.MethodInvocation,java.lang.Exception)>(r2, $r6);

        return $r7;

     label4:
        $r4 := @caughtexception;

        $z0 = virtualinvoke r0.<org.springframework.remoting.rmi.RmiClientInterceptor: boolean isConnectFailure(java.rmi.RemoteException)>($r4);

        if $z0 == 0 goto label5;

        $r5 = specialinvoke r0.<org.springframework.remoting.rmi.RmiClientInterceptor: java.lang.Object handleRemoteConnectFailure(org.aopalliance.intercept.MethodInvocation,java.lang.Exception)>(r2, $r4);

        return $r5;

     label5:
        throw $r4;

        catch org.springframework.remoting.RemoteConnectFailureException from label1 to label2 with label3;
        catch java.rmi.RemoteException from label1 to label2 with label4;
    }

    protected boolean isConnectFailure(java.rmi.RemoteException)
    {
        org.springframework.remoting.rmi.RmiClientInterceptor r1;
        java.rmi.RemoteException r0;
        boolean $z0;

        r1 := @this: org.springframework.remoting.rmi.RmiClientInterceptor;

        r0 := @parameter0: java.rmi.RemoteException;

        $z0 = staticinvoke <org.springframework.remoting.rmi.RmiClientInterceptorUtils: boolean isConnectFailure(java.rmi.RemoteException)>(r0);

        return $z0;
    }

    private java.lang.Object handleRemoteConnectFailure(org.aopalliance.intercept.MethodInvocation, java.lang.Exception) throws java.lang.Throwable
    {
        org.springframework.remoting.rmi.RmiClientInterceptor r0;
        org.aopalliance.intercept.MethodInvocation r9;
        java.lang.String $r3, $r6;
        boolean $z0, $z1, $z2;
        java.lang.Exception r1;
        java.lang.StringBuilder $r2, $r4, $r5;
        org.apache.commons.logging.Log $r7, $r8, $r10, $r11;
        java.lang.Object $r12;

        r0 := @this: org.springframework.remoting.rmi.RmiClientInterceptor;

        r9 := @parameter0: org.aopalliance.intercept.MethodInvocation;

        r1 := @parameter1: java.lang.Exception;

        $z0 = r0.<org.springframework.remoting.rmi.RmiClientInterceptor: boolean refreshStubOnConnectFailure>;

        if $z0 == 0 goto label3;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>("Could not connect to RMI service [");

        $r3 = virtualinvoke r0.<org.springframework.remoting.rmi.RmiClientInterceptor: java.lang.String getServiceUrl()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] - retrying");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = r0.<org.springframework.remoting.rmi.RmiClientInterceptor: org.apache.commons.logging.Log logger>;

        $z1 = interfaceinvoke $r7.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z1 == 0 goto label1;

        $r11 = r0.<org.springframework.remoting.rmi.RmiClientInterceptor: org.apache.commons.logging.Log logger>;

        interfaceinvoke $r11.<org.apache.commons.logging.Log: void warn(java.lang.Object,java.lang.Throwable)>($r6, r1);

        goto label2;

     label1:
        $r8 = r0.<org.springframework.remoting.rmi.RmiClientInterceptor: org.apache.commons.logging.Log logger>;

        $z2 = interfaceinvoke $r8.<org.apache.commons.logging.Log: boolean isWarnEnabled()>();

        if $z2 == 0 goto label2;

        $r10 = r0.<org.springframework.remoting.rmi.RmiClientInterceptor: org.apache.commons.logging.Log logger>;

        interfaceinvoke $r10.<org.apache.commons.logging.Log: void warn(java.lang.Object)>($r6);

     label2:
        $r12 = virtualinvoke r0.<org.springframework.remoting.rmi.RmiClientInterceptor: java.lang.Object refreshAndRetry(org.aopalliance.intercept.MethodInvocation)>(r9);

        return $r12;

     label3:
        throw r1;
    }

    protected java.lang.Object refreshAndRetry(org.aopalliance.intercept.MethodInvocation) throws java.lang.Throwable
    {
        java.lang.Throwable $r5;
        org.springframework.remoting.rmi.RmiClientInterceptor r0;
        java.rmi.Remote $r2;
        org.aopalliance.intercept.MethodInvocation r3;
        java.lang.Object $r1, $r4;
        boolean $z0;

        r0 := @this: org.springframework.remoting.rmi.RmiClientInterceptor;

        r3 := @parameter0: org.aopalliance.intercept.MethodInvocation;

        $r1 = r0.<org.springframework.remoting.rmi.RmiClientInterceptor: java.lang.Object stubMonitor>;

        entermonitor $r1;

     label1:
        r0.<org.springframework.remoting.rmi.RmiClientInterceptor: java.rmi.Remote cachedStub> = null;

        $r2 = virtualinvoke r0.<org.springframework.remoting.rmi.RmiClientInterceptor: java.rmi.Remote lookupStub()>();

        $z0 = r0.<org.springframework.remoting.rmi.RmiClientInterceptor: boolean cacheStub>;

        if $z0 == 0 goto label2;

        r0.<org.springframework.remoting.rmi.RmiClientInterceptor: java.rmi.Remote cachedStub> = $r2;

     label2:
        exitmonitor $r1;

     label3:
        goto label6;

     label4:
        $r5 := @caughtexception;

        exitmonitor $r1;

     label5:
        throw $r5;

     label6:
        $r4 = virtualinvoke r0.<org.springframework.remoting.rmi.RmiClientInterceptor: java.lang.Object doInvoke(org.aopalliance.intercept.MethodInvocation,java.rmi.Remote)>(r3, $r2);

        return $r4;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    protected java.lang.Object doInvoke(org.aopalliance.intercept.MethodInvocation, java.rmi.Remote) throws java.lang.Throwable
    {
        org.aopalliance.intercept.MethodInvocation r1;
        java.lang.reflect.Method $r9, $r15, $r25;
        boolean $z0, $z1, $z2, $z3;
        org.springframework.remoting.RemoteInvocationFailureException $r13;
        java.lang.Exception $r11, $r27;
        java.lang.reflect.InvocationTargetException $r6, $r22;
        java.rmi.RemoteException r8, $r24;
        java.lang.StringBuilder $r14, $r16, $r17, $r19, $r20;
        java.lang.Throwable $r7, $r12, $r23;
        org.springframework.remoting.rmi.RmiClientInterceptor r3;
        java.lang.String $r10, $r18, $r21, $r26;
        java.rmi.Remote r0;
        org.springframework.remoting.rmi.RmiInvocationHandler $r4;
        java.lang.Object $r2, $r5;

        r3 := @this: org.springframework.remoting.rmi.RmiClientInterceptor;

        r1 := @parameter0: org.aopalliance.intercept.MethodInvocation;

        r0 := @parameter1: java.rmi.Remote;

        $z0 = r0 instanceof org.springframework.remoting.rmi.RmiInvocationHandler;

        if $z0 == 0 goto label6;

     label1:
        $r4 = (org.springframework.remoting.rmi.RmiInvocationHandler) r0;

        $r5 = virtualinvoke r3.<org.springframework.remoting.rmi.RmiClientInterceptor: java.lang.Object doInvoke(org.aopalliance.intercept.MethodInvocation,org.springframework.remoting.rmi.RmiInvocationHandler)>(r1, $r4);

     label2:
        return $r5;

     label3:
        $r24 := @caughtexception;

        $r25 = interfaceinvoke r1.<org.aopalliance.intercept.MethodInvocation: java.lang.reflect.Method getMethod()>();

        $z3 = virtualinvoke r3.<org.springframework.remoting.rmi.RmiClientInterceptor: boolean isConnectFailure(java.rmi.RemoteException)>($r24);

        $r26 = virtualinvoke r3.<org.springframework.remoting.rmi.RmiClientInterceptor: java.lang.String getServiceUrl()>();

        $r27 = staticinvoke <org.springframework.remoting.rmi.RmiClientInterceptorUtils: java.lang.Exception convertRmiAccessException(java.lang.reflect.Method,java.rmi.RemoteException,boolean,java.lang.String)>($r25, $r24, $z3, $r26);

        throw $r27;

     label4:
        $r22 := @caughtexception;

        $r23 = virtualinvoke $r22.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>();

        staticinvoke <org.springframework.remoting.support.RemoteInvocationUtils: void fillInClientStackTraceIfPossible(java.lang.Throwable)>($r23);

        throw $r23;

     label5:
        $r12 := @caughtexception;

        $r13 = new org.springframework.remoting.RemoteInvocationFailureException;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>(java.lang.String)>("Invocation of method [");

        $r15 = interfaceinvoke r1.<org.aopalliance.intercept.MethodInvocation: java.lang.reflect.Method getMethod()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] failed in RMI service [");

        $r18 = virtualinvoke r3.<org.springframework.remoting.rmi.RmiClientInterceptor: java.lang.String getServiceUrl()>();

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<org.springframework.remoting.RemoteInvocationFailureException: void <init>(java.lang.String,java.lang.Throwable)>($r21, $r12);

        throw $r13;

     label6:
        $r2 = staticinvoke <org.springframework.remoting.rmi.RmiClientInterceptorUtils: java.lang.Object invokeRemoteMethod(org.aopalliance.intercept.MethodInvocation,java.lang.Object)>(r1, r0);

     label7:
        return $r2;

     label8:
        $r6 := @caughtexception;

        $r7 = virtualinvoke $r6.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>();

        $z1 = $r7 instanceof java.rmi.RemoteException;

        if $z1 == 0 goto label9;

        r8 = (java.rmi.RemoteException) $r7;

        $r9 = interfaceinvoke r1.<org.aopalliance.intercept.MethodInvocation: java.lang.reflect.Method getMethod()>();

        $z2 = virtualinvoke r3.<org.springframework.remoting.rmi.RmiClientInterceptor: boolean isConnectFailure(java.rmi.RemoteException)>(r8);

        $r10 = virtualinvoke r3.<org.springframework.remoting.rmi.RmiClientInterceptor: java.lang.String getServiceUrl()>();

        $r11 = staticinvoke <org.springframework.remoting.rmi.RmiClientInterceptorUtils: java.lang.Exception convertRmiAccessException(java.lang.reflect.Method,java.rmi.RemoteException,boolean,java.lang.String)>($r9, r8, $z2, $r10);

        throw $r11;

     label9:
        throw $r7;

        catch java.rmi.RemoteException from label1 to label2 with label3;
        catch java.lang.reflect.InvocationTargetException from label1 to label2 with label4;
        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.reflect.InvocationTargetException from label6 to label7 with label8;
    }

    protected java.lang.Object doInvoke(org.aopalliance.intercept.MethodInvocation, org.springframework.remoting.rmi.RmiInvocationHandler) throws java.rmi.RemoteException, java.lang.NoSuchMethodException, java.lang.IllegalAccessException, java.lang.reflect.InvocationTargetException
    {
        org.springframework.remoting.rmi.RmiInvocationHandler r2;
        org.springframework.remoting.support.RemoteInvocation $r4;
        org.springframework.remoting.rmi.RmiClientInterceptor r3;
        org.aopalliance.intercept.MethodInvocation r0;
        java.lang.Object $r5;
        java.lang.StringBuilder $r6, $r8, $r9;
        java.lang.String $r7, $r10;
        java.lang.reflect.Method $r1;
        boolean $z0;

        r3 := @this: org.springframework.remoting.rmi.RmiClientInterceptor;

        r0 := @parameter0: org.aopalliance.intercept.MethodInvocation;

        r2 := @parameter1: org.springframework.remoting.rmi.RmiInvocationHandler;

        $r1 = interfaceinvoke r0.<org.aopalliance.intercept.MethodInvocation: java.lang.reflect.Method getMethod()>();

        $z0 = staticinvoke <org.springframework.aop.support.AopUtils: boolean isToStringMethod(java.lang.reflect.Method)>($r1);

        if $z0 == 0 goto label1;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>(java.lang.String)>("RMI invoker proxy for service URL [");

        $r7 = virtualinvoke r3.<org.springframework.remoting.rmi.RmiClientInterceptor: java.lang.String getServiceUrl()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r10;

     label1:
        $r4 = virtualinvoke r3.<org.springframework.remoting.rmi.RmiClientInterceptor: org.springframework.remoting.support.RemoteInvocation createRemoteInvocation(org.aopalliance.intercept.MethodInvocation)>(r0);

        $r5 = interfaceinvoke r2.<org.springframework.remoting.rmi.RmiInvocationHandler: java.lang.Object invoke(org.springframework.remoting.support.RemoteInvocation)>($r4);

        return $r5;
    }
}
