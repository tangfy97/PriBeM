public class org.springframework.remoting.httpinvoker.HttpInvokerClientInterceptor extends org.springframework.remoting.support.RemoteInvocationBasedAccessor implements org.aopalliance.intercept.MethodInterceptor, org.springframework.remoting.httpinvoker.HttpInvokerClientConfiguration
{
    private java.lang.String codebaseUrl;
    private org.springframework.remoting.httpinvoker.HttpInvokerRequestExecutor httpInvokerRequestExecutor;

    public void <init>()
    {
        org.springframework.remoting.httpinvoker.HttpInvokerClientInterceptor r0;

        r0 := @this: org.springframework.remoting.httpinvoker.HttpInvokerClientInterceptor;

        specialinvoke r0.<org.springframework.remoting.support.RemoteInvocationBasedAccessor: void <init>()>();

        return;
    }

    public void setCodebaseUrl(java.lang.String)
    {
        java.lang.String r1;
        org.springframework.remoting.httpinvoker.HttpInvokerClientInterceptor r0;

        r0 := @this: org.springframework.remoting.httpinvoker.HttpInvokerClientInterceptor;

        r1 := @parameter0: java.lang.String;

        r0.<org.springframework.remoting.httpinvoker.HttpInvokerClientInterceptor: java.lang.String codebaseUrl> = r1;

        return;
    }

    public java.lang.String getCodebaseUrl()
    {
        java.lang.String $r1;
        org.springframework.remoting.httpinvoker.HttpInvokerClientInterceptor r0;

        r0 := @this: org.springframework.remoting.httpinvoker.HttpInvokerClientInterceptor;

        $r1 = r0.<org.springframework.remoting.httpinvoker.HttpInvokerClientInterceptor: java.lang.String codebaseUrl>;

        return $r1;
    }

    public void setHttpInvokerRequestExecutor(org.springframework.remoting.httpinvoker.HttpInvokerRequestExecutor)
    {
        org.springframework.remoting.httpinvoker.HttpInvokerRequestExecutor r1;
        org.springframework.remoting.httpinvoker.HttpInvokerClientInterceptor r0;

        r0 := @this: org.springframework.remoting.httpinvoker.HttpInvokerClientInterceptor;

        r1 := @parameter0: org.springframework.remoting.httpinvoker.HttpInvokerRequestExecutor;

        r0.<org.springframework.remoting.httpinvoker.HttpInvokerClientInterceptor: org.springframework.remoting.httpinvoker.HttpInvokerRequestExecutor httpInvokerRequestExecutor> = r1;

        return;
    }

    public org.springframework.remoting.httpinvoker.HttpInvokerRequestExecutor getHttpInvokerRequestExecutor()
    {
        org.springframework.remoting.httpinvoker.HttpInvokerRequestExecutor $r1, $r2;
        org.springframework.remoting.httpinvoker.HttpInvokerClientInterceptor r0;
        java.lang.ClassLoader $r4;
        org.springframework.remoting.httpinvoker.SimpleHttpInvokerRequestExecutor $r3;

        r0 := @this: org.springframework.remoting.httpinvoker.HttpInvokerClientInterceptor;

        $r1 = r0.<org.springframework.remoting.httpinvoker.HttpInvokerClientInterceptor: org.springframework.remoting.httpinvoker.HttpInvokerRequestExecutor httpInvokerRequestExecutor>;

        if $r1 != null goto label1;

        $r3 = new org.springframework.remoting.httpinvoker.SimpleHttpInvokerRequestExecutor;

        specialinvoke $r3.<org.springframework.remoting.httpinvoker.SimpleHttpInvokerRequestExecutor: void <init>()>();

        $r4 = virtualinvoke r0.<org.springframework.remoting.httpinvoker.HttpInvokerClientInterceptor: java.lang.ClassLoader getBeanClassLoader()>();

        virtualinvoke $r3.<org.springframework.remoting.httpinvoker.SimpleHttpInvokerRequestExecutor: void setBeanClassLoader(java.lang.ClassLoader)>($r4);

        r0.<org.springframework.remoting.httpinvoker.HttpInvokerClientInterceptor: org.springframework.remoting.httpinvoker.HttpInvokerRequestExecutor httpInvokerRequestExecutor> = $r3;

     label1:
        $r2 = r0.<org.springframework.remoting.httpinvoker.HttpInvokerClientInterceptor: org.springframework.remoting.httpinvoker.HttpInvokerRequestExecutor httpInvokerRequestExecutor>;

        return $r2;
    }

    public void afterPropertiesSet()
    {
        org.springframework.remoting.httpinvoker.HttpInvokerClientInterceptor r0;

        r0 := @this: org.springframework.remoting.httpinvoker.HttpInvokerClientInterceptor;

        specialinvoke r0.<org.springframework.remoting.support.RemoteInvocationBasedAccessor: void afterPropertiesSet()>();

        virtualinvoke r0.<org.springframework.remoting.httpinvoker.HttpInvokerClientInterceptor: org.springframework.remoting.httpinvoker.HttpInvokerRequestExecutor getHttpInvokerRequestExecutor()>();

        return;
    }

    public java.lang.Object invoke(org.aopalliance.intercept.MethodInvocation) throws java.lang.Throwable
    {
        java.lang.Throwable $r11, $r21;
        org.springframework.remoting.support.RemoteInvocation $r3;
        org.springframework.remoting.RemoteAccessException $r22;
        org.aopalliance.intercept.MethodInvocation r0;
        org.springframework.remoting.support.RemoteInvocationResult $r4;
        java.lang.String $r7, $r10, $r17, $r20;
        java.lang.reflect.Method $r1, $r14;
        boolean $z0, $z1;
        org.springframework.remoting.RemoteInvocationFailureException $r12;
        org.springframework.remoting.httpinvoker.HttpInvokerClientInterceptor r2;
        java.lang.Object $r5;
        java.lang.StringBuilder $r6, $r8, $r9, $r13, $r15, $r16, $r18, $r19;

        r2 := @this: org.springframework.remoting.httpinvoker.HttpInvokerClientInterceptor;

        r0 := @parameter0: org.aopalliance.intercept.MethodInvocation;

        $r1 = interfaceinvoke r0.<org.aopalliance.intercept.MethodInvocation: java.lang.reflect.Method getMethod()>();

        $z0 = staticinvoke <org.springframework.aop.support.AopUtils: boolean isToStringMethod(java.lang.reflect.Method)>($r1);

        if $z0 == 0 goto label1;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>(java.lang.String)>("HTTP invoker proxy for service URL [");

        $r7 = virtualinvoke r2.<org.springframework.remoting.httpinvoker.HttpInvokerClientInterceptor: java.lang.String getServiceUrl()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r10;

     label1:
        $r3 = virtualinvoke r2.<org.springframework.remoting.httpinvoker.HttpInvokerClientInterceptor: org.springframework.remoting.support.RemoteInvocation createRemoteInvocation(org.aopalliance.intercept.MethodInvocation)>(r0);

     label2:
        $r4 = virtualinvoke r2.<org.springframework.remoting.httpinvoker.HttpInvokerClientInterceptor: org.springframework.remoting.support.RemoteInvocationResult executeRequest(org.springframework.remoting.support.RemoteInvocation,org.aopalliance.intercept.MethodInvocation)>($r3, r0);

     label3:
        goto label5;

     label4:
        $r21 := @caughtexception;

        $r22 = virtualinvoke r2.<org.springframework.remoting.httpinvoker.HttpInvokerClientInterceptor: org.springframework.remoting.RemoteAccessException convertHttpInvokerAccessException(java.lang.Throwable)>($r21);

        throw $r22;

     label5:
        $r5 = virtualinvoke r2.<org.springframework.remoting.httpinvoker.HttpInvokerClientInterceptor: java.lang.Object recreateRemoteInvocationResult(org.springframework.remoting.support.RemoteInvocationResult)>($r4);

     label6:
        return $r5;

     label7:
        $r11 := @caughtexception;

        $z1 = virtualinvoke $r4.<org.springframework.remoting.support.RemoteInvocationResult: boolean hasInvocationTargetException()>();

        if $z1 == 0 goto label8;

        throw $r11;

     label8:
        $r12 = new org.springframework.remoting.RemoteInvocationFailureException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>(java.lang.String)>("Invocation of method [");

        $r14 = interfaceinvoke r0.<org.aopalliance.intercept.MethodInvocation: java.lang.reflect.Method getMethod()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] failed in HTTP invoker remote service at [");

        $r17 = virtualinvoke r2.<org.springframework.remoting.httpinvoker.HttpInvokerClientInterceptor: java.lang.String getServiceUrl()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<org.springframework.remoting.RemoteInvocationFailureException: void <init>(java.lang.String,java.lang.Throwable)>($r20, $r11);

        throw $r12;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label7;
    }

    protected org.springframework.remoting.support.RemoteInvocationResult executeRequest(org.springframework.remoting.support.RemoteInvocation, org.aopalliance.intercept.MethodInvocation) throws java.lang.Exception
    {
        org.aopalliance.intercept.MethodInvocation r3;
        org.springframework.remoting.httpinvoker.HttpInvokerClientInterceptor r0;
        org.springframework.remoting.support.RemoteInvocationResult $r2;
        org.springframework.remoting.support.RemoteInvocation r1;

        r0 := @this: org.springframework.remoting.httpinvoker.HttpInvokerClientInterceptor;

        r1 := @parameter0: org.springframework.remoting.support.RemoteInvocation;

        r3 := @parameter1: org.aopalliance.intercept.MethodInvocation;

        $r2 = virtualinvoke r0.<org.springframework.remoting.httpinvoker.HttpInvokerClientInterceptor: org.springframework.remoting.support.RemoteInvocationResult executeRequest(org.springframework.remoting.support.RemoteInvocation)>(r1);

        return $r2;
    }

    protected org.springframework.remoting.support.RemoteInvocationResult executeRequest(org.springframework.remoting.support.RemoteInvocation) throws java.lang.Exception
    {
        org.springframework.remoting.httpinvoker.HttpInvokerRequestExecutor $r1;
        org.springframework.remoting.httpinvoker.HttpInvokerClientInterceptor r0;
        org.springframework.remoting.support.RemoteInvocationResult $r3;
        org.springframework.remoting.support.RemoteInvocation r2;

        r0 := @this: org.springframework.remoting.httpinvoker.HttpInvokerClientInterceptor;

        r2 := @parameter0: org.springframework.remoting.support.RemoteInvocation;

        $r1 = virtualinvoke r0.<org.springframework.remoting.httpinvoker.HttpInvokerClientInterceptor: org.springframework.remoting.httpinvoker.HttpInvokerRequestExecutor getHttpInvokerRequestExecutor()>();

        $r3 = interfaceinvoke $r1.<org.springframework.remoting.httpinvoker.HttpInvokerRequestExecutor: org.springframework.remoting.support.RemoteInvocationResult executeRequest(org.springframework.remoting.httpinvoker.HttpInvokerClientConfiguration,org.springframework.remoting.support.RemoteInvocation)>(r0, r2);

        return $r3;
    }

    protected org.springframework.remoting.RemoteAccessException convertHttpInvokerAccessException(java.lang.Throwable)
    {
        java.lang.Throwable r0;
        org.springframework.remoting.RemoteAccessException $r2, $r14;
        java.lang.String $r4, $r7, $r10, $r13, $r16, $r19;
        org.springframework.remoting.RemoteConnectFailureException $r8;
        boolean $z0, $z1, $z2, $z3;
        org.springframework.remoting.httpinvoker.HttpInvokerClientInterceptor r1;
        java.lang.StringBuilder $r3, $r5, $r6, $r9, $r11, $r12, $r15, $r17, $r18;

        r1 := @this: org.springframework.remoting.httpinvoker.HttpInvokerClientInterceptor;

        r0 := @parameter0: java.lang.Throwable;

        $z0 = r0 instanceof java.net.ConnectException;

        if $z0 == 0 goto label1;

        $r8 = new org.springframework.remoting.RemoteConnectFailureException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>(java.lang.String)>("Could not connect to HTTP invoker remote service at [");

        $r10 = virtualinvoke r1.<org.springframework.remoting.httpinvoker.HttpInvokerClientInterceptor: java.lang.String getServiceUrl()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<org.springframework.remoting.RemoteConnectFailureException: void <init>(java.lang.String,java.lang.Throwable)>($r13, r0);

        throw $r8;

     label1:
        $z1 = r0 instanceof java.lang.ClassNotFoundException;

        if $z1 != 0 goto label2;

        $z2 = r0 instanceof java.lang.NoClassDefFoundError;

        if $z2 != 0 goto label2;

        $z3 = r0 instanceof java.io.InvalidClassException;

        if $z3 == 0 goto label3;

     label2:
        $r14 = new org.springframework.remoting.RemoteAccessException;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>(java.lang.String)>("Could not deserialize result from HTTP invoker remote service [");

        $r16 = virtualinvoke r1.<org.springframework.remoting.httpinvoker.HttpInvokerClientInterceptor: java.lang.String getServiceUrl()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<org.springframework.remoting.RemoteAccessException: void <init>(java.lang.String,java.lang.Throwable)>($r19, r0);

        throw $r14;

     label3:
        $r2 = new org.springframework.remoting.RemoteAccessException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>("Could not access HTTP invoker remote service at [");

        $r4 = virtualinvoke r1.<org.springframework.remoting.httpinvoker.HttpInvokerClientInterceptor: java.lang.String getServiceUrl()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<org.springframework.remoting.RemoteAccessException: void <init>(java.lang.String,java.lang.Throwable)>($r7, r0);

        throw $r2;
    }
}
