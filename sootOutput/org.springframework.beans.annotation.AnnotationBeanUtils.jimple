public abstract class org.springframework.beans.'annotation'.AnnotationBeanUtils extends java.lang.Object
{

    public void <init>()
    {
        org.springframework.beans.'annotation'.AnnotationBeanUtils r0;

        r0 := @this: org.springframework.beans.'annotation'.AnnotationBeanUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static transient void copyPropertiesToBean(java.lang.'annotation'.Annotation, java.lang.Object, java.lang.String[])
    {
        org.springframework.beans.BeanWrapper $r8;
        java.lang.String[] r1;
        java.lang.reflect.Method[] $r6;
        java.util.HashSet $r0;
        int i0, i1;
        java.lang.String $r10;
        java.lang.reflect.Method r9;
        boolean $z0, $z1;
        java.util.Collection $r3;
        java.util.List $r2;
        java.lang.'annotation'.Annotation r4;
        java.lang.Class $r5;
        java.lang.Object r7, $r11;

        r4 := @parameter0: java.lang.'annotation'.Annotation;

        r7 := @parameter1: java.lang.Object;

        r1 := @parameter2: java.lang.String[];

        $r0 = new java.util.HashSet;

        $r2 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r1);

        $r3 = (java.util.Collection) $r2;

        specialinvoke $r0.<java.util.HashSet: void <init>(java.util.Collection)>($r3);

        $r5 = interfaceinvoke r4.<java.lang.'annotation'.Annotation: java.lang.Class annotationType()>();

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>();

        $r8 = staticinvoke <org.springframework.beans.PropertyAccessorFactory: org.springframework.beans.BeanWrapper forBeanPropertyAccess(java.lang.Object)>(r7);

        i0 = lengthof $r6;

        i1 = 0;

        goto label3;

     label1:
        r9 = $r6[i1];

        $r10 = virtualinvoke r9.<java.lang.reflect.Method: java.lang.String getName()>();

        $z0 = interfaceinvoke $r0.<java.util.Set: boolean contains(java.lang.Object)>($r10);

        if $z0 != 0 goto label2;

        $z1 = interfaceinvoke $r8.<org.springframework.beans.BeanWrapper: boolean isWritableProperty(java.lang.String)>($r10);

        if $z1 == 0 goto label2;

        $r11 = staticinvoke <org.springframework.util.ReflectionUtils: java.lang.Object invokeMethod(java.lang.reflect.Method,java.lang.Object)>(r9, r4);

        interfaceinvoke $r8.<org.springframework.beans.BeanWrapper: void setPropertyValue(java.lang.String,java.lang.Object)>($r10, $r11);

     label2:
        i1 = i1 + 1;

     label3:
        if i1 < i0 goto label1;

        return;
    }
}
