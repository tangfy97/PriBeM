class com.mycila.inject.internal.guava.collect.Tables$TransformedTable$CellSet extends com.mycila.inject.internal.guava.collect.Collections2$TransformedCollection implements java.util.Set
{
    final com.mycila.inject.internal.guava.collect.Tables$TransformedTable this$0;

    void <init>(com.mycila.inject.internal.guava.collect.Tables$TransformedTable)
    {
        com.mycila.inject.internal.guava.collect.Tables$TransformedTable$CellSet r0;
        com.mycila.inject.internal.guava.collect.Tables$TransformedTable r1;
        com.mycila.inject.internal.guava.collect.Table $r2;
        java.util.Set $r3;
        com.mycila.inject.internal.guava.base.Function $r4;

        r0 := @this: com.mycila.inject.internal.guava.collect.Tables$TransformedTable$CellSet;

        r1 := @parameter0: com.mycila.inject.internal.guava.collect.Tables$TransformedTable;

        r0.<com.mycila.inject.internal.guava.collect.Tables$TransformedTable$CellSet: com.mycila.inject.internal.guava.collect.Tables$TransformedTable this$0> = r1;

        $r2 = r1.<com.mycila.inject.internal.guava.collect.Tables$TransformedTable: com.mycila.inject.internal.guava.collect.Table fromTable>;

        $r3 = interfaceinvoke $r2.<com.mycila.inject.internal.guava.collect.Table: java.util.Set cellSet()>();

        $r4 = virtualinvoke r1.<com.mycila.inject.internal.guava.collect.Tables$TransformedTable: com.mycila.inject.internal.guava.base.Function cellFunction()>();

        specialinvoke r0.<com.mycila.inject.internal.guava.collect.Collections2$TransformedCollection: void <init>(java.util.Collection,com.mycila.inject.internal.guava.base.Function)>($r3, $r4);

        return;
    }

    public boolean equals(java.lang.Object)
    {
        java.lang.Object r1;
        com.mycila.inject.internal.guava.collect.Tables$TransformedTable$CellSet r0;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.guava.collect.Tables$TransformedTable$CellSet;

        r1 := @parameter0: java.lang.Object;

        $z0 = staticinvoke <com.mycila.inject.internal.guava.collect.Sets: boolean equalsImpl(java.util.Set,java.lang.Object)>(r0, r1);

        return $z0;
    }

    public int hashCode()
    {
        int $i0;
        com.mycila.inject.internal.guava.collect.Tables$TransformedTable$CellSet r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.Tables$TransformedTable$CellSet;

        $i0 = staticinvoke <com.mycila.inject.internal.guava.collect.Sets: int hashCodeImpl(java.util.Set)>(r0);

        return $i0;
    }

    public boolean contains(java.lang.Object)
    {
        com.mycila.inject.internal.guava.collect.Tables$TransformedTable$CellSet r3;
        com.mycila.inject.internal.guava.collect.Table $r10;
        boolean $z0, $z1, $z2, $z3;
        com.mycila.inject.internal.guava.collect.Table$Cell r1;
        com.mycila.inject.internal.guava.collect.Tables$TransformedTable $r4, $r9;
        java.lang.Object r0, $r2, $r5, $r6, $r7, $r8, $r11, $r12;

        r3 := @this: com.mycila.inject.internal.guava.collect.Tables$TransformedTable$CellSet;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof com.mycila.inject.internal.guava.collect.Table$Cell;

        if $z0 == 0 goto label5;

        r1 = (com.mycila.inject.internal.guava.collect.Table$Cell) r0;

        $r2 = interfaceinvoke r1.<com.mycila.inject.internal.guava.collect.Table$Cell: java.lang.Object getValue()>();

        $r4 = r3.<com.mycila.inject.internal.guava.collect.Tables$TransformedTable$CellSet: com.mycila.inject.internal.guava.collect.Tables$TransformedTable this$0>;

        $r5 = interfaceinvoke r1.<com.mycila.inject.internal.guava.collect.Table$Cell: java.lang.Object getRowKey()>();

        $r6 = interfaceinvoke r1.<com.mycila.inject.internal.guava.collect.Table$Cell: java.lang.Object getColumnKey()>();

        $r7 = virtualinvoke $r4.<com.mycila.inject.internal.guava.collect.Tables$TransformedTable: java.lang.Object get(java.lang.Object,java.lang.Object)>($r5, $r6);

        $z1 = staticinvoke <com.mycila.inject.internal.guava.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>($r2, $r7);

        if $z1 != 0 goto label1;

        return 0;

     label1:
        $r8 = interfaceinvoke r1.<com.mycila.inject.internal.guava.collect.Table$Cell: java.lang.Object getValue()>();

        if $r8 != null goto label2;

        $r9 = r3.<com.mycila.inject.internal.guava.collect.Tables$TransformedTable$CellSet: com.mycila.inject.internal.guava.collect.Tables$TransformedTable this$0>;

        $r10 = $r9.<com.mycila.inject.internal.guava.collect.Tables$TransformedTable: com.mycila.inject.internal.guava.collect.Table fromTable>;

        $r11 = interfaceinvoke r1.<com.mycila.inject.internal.guava.collect.Table$Cell: java.lang.Object getRowKey()>();

        $r12 = interfaceinvoke r1.<com.mycila.inject.internal.guava.collect.Table$Cell: java.lang.Object getColumnKey()>();

        $z2 = interfaceinvoke $r10.<com.mycila.inject.internal.guava.collect.Table: boolean contains(java.lang.Object,java.lang.Object)>($r11, $r12);

        if $z2 == 0 goto label3;

     label2:
        $z3 = 1;

        goto label4;

     label3:
        $z3 = 0;

     label4:
        return $z3;

     label5:
        return 0;
    }

    public boolean remove(java.lang.Object)
    {
        com.mycila.inject.internal.guava.collect.Tables$TransformedTable$CellSet r0;
        com.mycila.inject.internal.guava.collect.Table $r4;
        com.mycila.inject.internal.guava.collect.Table$Cell r2;
        com.mycila.inject.internal.guava.collect.Tables$TransformedTable $r3;
        java.lang.Object r1, $r5, $r6;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.guava.collect.Tables$TransformedTable$CellSet;

        r1 := @parameter0: java.lang.Object;

        $z0 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.Tables$TransformedTable$CellSet: boolean contains(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        r2 = (com.mycila.inject.internal.guava.collect.Table$Cell) r1;

        $r3 = r0.<com.mycila.inject.internal.guava.collect.Tables$TransformedTable$CellSet: com.mycila.inject.internal.guava.collect.Tables$TransformedTable this$0>;

        $r4 = $r3.<com.mycila.inject.internal.guava.collect.Tables$TransformedTable: com.mycila.inject.internal.guava.collect.Table fromTable>;

        $r5 = interfaceinvoke r2.<com.mycila.inject.internal.guava.collect.Table$Cell: java.lang.Object getRowKey()>();

        $r6 = interfaceinvoke r2.<com.mycila.inject.internal.guava.collect.Table$Cell: java.lang.Object getColumnKey()>();

        interfaceinvoke $r4.<com.mycila.inject.internal.guava.collect.Table: java.lang.Object remove(java.lang.Object,java.lang.Object)>($r5, $r6);

        return 1;

     label1:
        return 0;
    }
}
