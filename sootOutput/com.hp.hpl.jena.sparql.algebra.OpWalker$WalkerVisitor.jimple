class com.hp.hpl.jena.sparql.algebra.OpWalker$WalkerVisitor extends com.hp.hpl.jena.sparql.algebra.OpVisitorByType
{
    private final com.hp.hpl.jena.sparql.algebra.OpVisitor beforeVisitor;
    private final com.hp.hpl.jena.sparql.algebra.OpVisitor afterVisitor;
    protected final com.hp.hpl.jena.sparql.algebra.OpVisitor visitor;

    public void <init>(com.hp.hpl.jena.sparql.algebra.OpVisitor, com.hp.hpl.jena.sparql.algebra.OpVisitor, com.hp.hpl.jena.sparql.algebra.OpVisitor)
    {
        com.hp.hpl.jena.sparql.algebra.OpWalker$WalkerVisitor r0;
        com.hp.hpl.jena.sparql.algebra.OpVisitor r1, r2, r3;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.OpWalker$WalkerVisitor;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.OpVisitor;

        r2 := @parameter1: com.hp.hpl.jena.sparql.algebra.OpVisitor;

        r3 := @parameter2: com.hp.hpl.jena.sparql.algebra.OpVisitor;

        specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.OpVisitorByType: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.algebra.OpWalker$WalkerVisitor: com.hp.hpl.jena.sparql.algebra.OpVisitor visitor> = r1;

        r0.<com.hp.hpl.jena.sparql.algebra.OpWalker$WalkerVisitor: com.hp.hpl.jena.sparql.algebra.OpVisitor beforeVisitor> = r2;

        r0.<com.hp.hpl.jena.sparql.algebra.OpWalker$WalkerVisitor: com.hp.hpl.jena.sparql.algebra.OpVisitor afterVisitor> = r3;

        return;
    }

    public void <init>(com.hp.hpl.jena.sparql.algebra.OpVisitor)
    {
        com.hp.hpl.jena.sparql.algebra.OpWalker$WalkerVisitor r0;
        com.hp.hpl.jena.sparql.algebra.OpVisitor r1;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.OpWalker$WalkerVisitor;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.OpVisitor;

        specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.OpWalker$WalkerVisitor: void <init>(com.hp.hpl.jena.sparql.algebra.OpVisitor,com.hp.hpl.jena.sparql.algebra.OpVisitor,com.hp.hpl.jena.sparql.algebra.OpVisitor)>(r1, null, null);

        return;
    }

    protected final void before(com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.algebra.OpWalker$WalkerVisitor r0;
        com.hp.hpl.jena.sparql.algebra.Op r2;
        com.hp.hpl.jena.sparql.algebra.OpVisitor $r1, $r3;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.OpWalker$WalkerVisitor;

        r2 := @parameter0: com.hp.hpl.jena.sparql.algebra.Op;

        $r1 = r0.<com.hp.hpl.jena.sparql.algebra.OpWalker$WalkerVisitor: com.hp.hpl.jena.sparql.algebra.OpVisitor beforeVisitor>;

        if $r1 == null goto label1;

        $r3 = r0.<com.hp.hpl.jena.sparql.algebra.OpWalker$WalkerVisitor: com.hp.hpl.jena.sparql.algebra.OpVisitor beforeVisitor>;

        interfaceinvoke r2.<com.hp.hpl.jena.sparql.algebra.Op: void visit(com.hp.hpl.jena.sparql.algebra.OpVisitor)>($r3);

     label1:
        return;
    }

    protected final void after(com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.algebra.OpWalker$WalkerVisitor r0;
        com.hp.hpl.jena.sparql.algebra.Op r2;
        com.hp.hpl.jena.sparql.algebra.OpVisitor $r1, $r3;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.OpWalker$WalkerVisitor;

        r2 := @parameter0: com.hp.hpl.jena.sparql.algebra.Op;

        $r1 = r0.<com.hp.hpl.jena.sparql.algebra.OpWalker$WalkerVisitor: com.hp.hpl.jena.sparql.algebra.OpVisitor afterVisitor>;

        if $r1 == null goto label1;

        $r3 = r0.<com.hp.hpl.jena.sparql.algebra.OpWalker$WalkerVisitor: com.hp.hpl.jena.sparql.algebra.OpVisitor afterVisitor>;

        interfaceinvoke r2.<com.hp.hpl.jena.sparql.algebra.Op: void visit(com.hp.hpl.jena.sparql.algebra.OpVisitor)>($r3);

     label1:
        return;
    }

    protected void visit0(com.hp.hpl.jena.sparql.algebra.op.Op0)
    {
        com.hp.hpl.jena.sparql.algebra.OpWalker$WalkerVisitor r0;
        com.hp.hpl.jena.sparql.algebra.op.Op0 r1;
        com.hp.hpl.jena.sparql.algebra.OpVisitor $r2, $r3;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.OpWalker$WalkerVisitor;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.Op0;

        virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.OpWalker$WalkerVisitor: void before(com.hp.hpl.jena.sparql.algebra.Op)>(r1);

        $r2 = r0.<com.hp.hpl.jena.sparql.algebra.OpWalker$WalkerVisitor: com.hp.hpl.jena.sparql.algebra.OpVisitor visitor>;

        if $r2 == null goto label1;

        $r3 = r0.<com.hp.hpl.jena.sparql.algebra.OpWalker$WalkerVisitor: com.hp.hpl.jena.sparql.algebra.OpVisitor visitor>;

        virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.Op0: void visit(com.hp.hpl.jena.sparql.algebra.OpVisitor)>($r3);

     label1:
        virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.OpWalker$WalkerVisitor: void after(com.hp.hpl.jena.sparql.algebra.Op)>(r1);

        return;
    }

    protected void visit1(com.hp.hpl.jena.sparql.algebra.op.Op1)
    {
        com.hp.hpl.jena.sparql.algebra.OpWalker$WalkerVisitor r0;
        com.hp.hpl.jena.sparql.algebra.op.Op1 r1;
        com.hp.hpl.jena.sparql.algebra.Op $r2, $r5;
        com.hp.hpl.jena.sparql.algebra.OpVisitor $r3, $r4;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.OpWalker$WalkerVisitor;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.Op1;

        virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.OpWalker$WalkerVisitor: void before(com.hp.hpl.jena.sparql.algebra.Op)>(r1);

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.Op1: com.hp.hpl.jena.sparql.algebra.Op getSubOp()>();

        if $r2 == null goto label1;

        $r5 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.Op1: com.hp.hpl.jena.sparql.algebra.Op getSubOp()>();

        interfaceinvoke $r5.<com.hp.hpl.jena.sparql.algebra.Op: void visit(com.hp.hpl.jena.sparql.algebra.OpVisitor)>(r0);

     label1:
        $r3 = r0.<com.hp.hpl.jena.sparql.algebra.OpWalker$WalkerVisitor: com.hp.hpl.jena.sparql.algebra.OpVisitor visitor>;

        if $r3 == null goto label2;

        $r4 = r0.<com.hp.hpl.jena.sparql.algebra.OpWalker$WalkerVisitor: com.hp.hpl.jena.sparql.algebra.OpVisitor visitor>;

        virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.Op1: void visit(com.hp.hpl.jena.sparql.algebra.OpVisitor)>($r4);

     label2:
        virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.OpWalker$WalkerVisitor: void after(com.hp.hpl.jena.sparql.algebra.Op)>(r1);

        return;
    }

    protected void visitFilter(com.hp.hpl.jena.sparql.algebra.op.OpFilter)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpFilter r1;
        com.hp.hpl.jena.sparql.algebra.OpWalker$WalkerVisitor r0;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.OpWalker$WalkerVisitor;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpFilter;

        virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.OpWalker$WalkerVisitor: void visit1(com.hp.hpl.jena.sparql.algebra.op.Op1)>(r1);

        return;
    }

    protected void visit2(com.hp.hpl.jena.sparql.algebra.op.Op2)
    {
        com.hp.hpl.jena.sparql.algebra.op.Op2 r1;
        com.hp.hpl.jena.sparql.algebra.OpWalker$WalkerVisitor r0;
        com.hp.hpl.jena.sparql.algebra.Op $r2, $r3, $r6, $r7;
        com.hp.hpl.jena.sparql.algebra.OpVisitor $r4, $r5;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.OpWalker$WalkerVisitor;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.Op2;

        virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.OpWalker$WalkerVisitor: void before(com.hp.hpl.jena.sparql.algebra.Op)>(r1);

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.Op2: com.hp.hpl.jena.sparql.algebra.Op getLeft()>();

        if $r2 == null goto label1;

        $r7 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.Op2: com.hp.hpl.jena.sparql.algebra.Op getLeft()>();

        interfaceinvoke $r7.<com.hp.hpl.jena.sparql.algebra.Op: void visit(com.hp.hpl.jena.sparql.algebra.OpVisitor)>(r0);

     label1:
        $r3 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.Op2: com.hp.hpl.jena.sparql.algebra.Op getRight()>();

        if $r3 == null goto label2;

        $r6 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.Op2: com.hp.hpl.jena.sparql.algebra.Op getRight()>();

        interfaceinvoke $r6.<com.hp.hpl.jena.sparql.algebra.Op: void visit(com.hp.hpl.jena.sparql.algebra.OpVisitor)>(r0);

     label2:
        $r4 = r0.<com.hp.hpl.jena.sparql.algebra.OpWalker$WalkerVisitor: com.hp.hpl.jena.sparql.algebra.OpVisitor visitor>;

        if $r4 == null goto label3;

        $r5 = r0.<com.hp.hpl.jena.sparql.algebra.OpWalker$WalkerVisitor: com.hp.hpl.jena.sparql.algebra.OpVisitor visitor>;

        virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.Op2: void visit(com.hp.hpl.jena.sparql.algebra.OpVisitor)>($r5);

     label3:
        virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.OpWalker$WalkerVisitor: void after(com.hp.hpl.jena.sparql.algebra.Op)>(r1);

        return;
    }

    protected void visitN(com.hp.hpl.jena.sparql.algebra.op.OpN)
    {
        java.util.Iterator $r2;
        com.hp.hpl.jena.sparql.algebra.OpWalker$WalkerVisitor r0;
        com.hp.hpl.jena.sparql.algebra.op.OpN r1;
        java.lang.Object $r5;
        com.hp.hpl.jena.sparql.algebra.Op r6;
        boolean $z0;
        com.hp.hpl.jena.sparql.algebra.OpVisitor $r3, $r4;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.OpWalker$WalkerVisitor;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpN;

        virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.OpWalker$WalkerVisitor: void before(com.hp.hpl.jena.sparql.algebra.Op)>(r1);

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpN: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r6 = (com.hp.hpl.jena.sparql.algebra.Op) $r5;

        interfaceinvoke r6.<com.hp.hpl.jena.sparql.algebra.Op: void visit(com.hp.hpl.jena.sparql.algebra.OpVisitor)>(r0);

        goto label1;

     label2:
        $r3 = r0.<com.hp.hpl.jena.sparql.algebra.OpWalker$WalkerVisitor: com.hp.hpl.jena.sparql.algebra.OpVisitor visitor>;

        if $r3 == null goto label3;

        $r4 = r0.<com.hp.hpl.jena.sparql.algebra.OpWalker$WalkerVisitor: com.hp.hpl.jena.sparql.algebra.OpVisitor visitor>;

        virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpN: void visit(com.hp.hpl.jena.sparql.algebra.OpVisitor)>($r4);

     label3:
        virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.OpWalker$WalkerVisitor: void after(com.hp.hpl.jena.sparql.algebra.Op)>(r1);

        return;
    }

    protected void visitExt(com.hp.hpl.jena.sparql.algebra.op.OpExt)
    {
        com.hp.hpl.jena.sparql.algebra.OpWalker$WalkerVisitor r0;
        com.hp.hpl.jena.sparql.algebra.op.OpExt r1;
        com.hp.hpl.jena.sparql.algebra.OpVisitor $r2, $r3;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.OpWalker$WalkerVisitor;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpExt;

        virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.OpWalker$WalkerVisitor: void before(com.hp.hpl.jena.sparql.algebra.Op)>(r1);

        $r2 = r0.<com.hp.hpl.jena.sparql.algebra.OpWalker$WalkerVisitor: com.hp.hpl.jena.sparql.algebra.OpVisitor visitor>;

        if $r2 == null goto label1;

        $r3 = r0.<com.hp.hpl.jena.sparql.algebra.OpWalker$WalkerVisitor: com.hp.hpl.jena.sparql.algebra.OpVisitor visitor>;

        virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpExt: void visit(com.hp.hpl.jena.sparql.algebra.OpVisitor)>($r3);

     label1:
        virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.OpWalker$WalkerVisitor: void after(com.hp.hpl.jena.sparql.algebra.Op)>(r1);

        return;
    }
}
