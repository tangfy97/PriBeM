public class org.waveprotocol.wave.client.editor.selection.content.CaretMovementHelperWebkitImpl extends java.lang.Object implements org.waveprotocol.wave.client.editor.selection.content.CaretMovementHelper
{
    private final org.waveprotocol.wave.client.editor.impl.NodeManager nodeManager;

    public void <init>(org.waveprotocol.wave.client.editor.impl.NodeManager)
    {
        org.waveprotocol.wave.client.editor.selection.content.CaretMovementHelperWebkitImpl r0;
        org.waveprotocol.wave.client.editor.impl.NodeManager r1;

        r0 := @this: org.waveprotocol.wave.client.editor.selection.content.CaretMovementHelperWebkitImpl;

        r1 := @parameter0: org.waveprotocol.wave.client.editor.impl.NodeManager;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.waveprotocol.wave.client.editor.selection.content.CaretMovementHelperWebkitImpl: org.waveprotocol.wave.client.editor.impl.NodeManager nodeManager> = r1;

        return;
    }

    public org.waveprotocol.wave.model.document.util.Point getWordBoundary(boolean)
    {
        org.waveprotocol.wave.client.editor.extract.InconsistencyException$HtmlInserted $r9;
        org.waveprotocol.wave.client.editor.selection.content.CaretMovementHelperWebkitImpl r4;
        org.waveprotocol.wave.common.logging.Logger $r11, $r14;
        org.waveprotocol.wave.client.editor.selection.html.SelectionW3CNative $r3;
        int $i0;
        org.waveprotocol.wave.client.editor.selection.html.SelectionWebkit $r0;
        org.waveprotocol.wave.model.document.util.Point r15;
        boolean z0;
        org.waveprotocol.wave.common.logging.LoggerBundle $r10, $r13;
        org.waveprotocol.wave.client.editor.selection.html.SelectionWebkit$Direction $r2, $r8;
        org.waveprotocol.wave.client.editor.extract.InconsistencyException$HtmlMissing $r12;
        org.waveprotocol.wave.client.editor.impl.NodeManager $r5;
        com.google.gwt.dom.client.Node $r6;
        org.waveprotocol.wave.client.editor.selection.html.SelectionWebkit$MoveUnit $r1, $r7;

        r4 := @this: org.waveprotocol.wave.client.editor.selection.content.CaretMovementHelperWebkitImpl;

        z0 := @parameter0: boolean;

        r15 = null;

        $r0 = staticinvoke <org.waveprotocol.wave.client.editor.selection.html.SelectionWebkit: org.waveprotocol.wave.client.editor.selection.html.SelectionWebkit getSelection()>();

        if z0 == 0 goto label1;

        $r8 = <org.waveprotocol.wave.client.editor.selection.html.SelectionWebkit$Direction: org.waveprotocol.wave.client.editor.selection.html.SelectionWebkit$Direction FORWARD>;

        $r7 = <org.waveprotocol.wave.client.editor.selection.html.SelectionWebkit$MoveUnit: org.waveprotocol.wave.client.editor.selection.html.SelectionWebkit$MoveUnit WORD>;

        virtualinvoke $r0.<org.waveprotocol.wave.client.editor.selection.html.SelectionWebkit: void move(org.waveprotocol.wave.client.editor.selection.html.SelectionWebkit$Direction,org.waveprotocol.wave.client.editor.selection.html.SelectionWebkit$MoveUnit)>($r8, $r7);

        goto label2;

     label1:
        $r2 = <org.waveprotocol.wave.client.editor.selection.html.SelectionWebkit$Direction: org.waveprotocol.wave.client.editor.selection.html.SelectionWebkit$Direction BACKWARD>;

        $r1 = <org.waveprotocol.wave.client.editor.selection.html.SelectionWebkit$MoveUnit: org.waveprotocol.wave.client.editor.selection.html.SelectionWebkit$MoveUnit WORD>;

        virtualinvoke $r0.<org.waveprotocol.wave.client.editor.selection.html.SelectionWebkit: void move(org.waveprotocol.wave.client.editor.selection.html.SelectionWebkit$Direction,org.waveprotocol.wave.client.editor.selection.html.SelectionWebkit$MoveUnit)>($r2, $r1);

     label2:
        $r3 = staticinvoke <org.waveprotocol.wave.client.editor.selection.html.SelectionW3CNative: org.waveprotocol.wave.client.editor.selection.html.SelectionW3CNative getSelectionGuarded()>();

        virtualinvoke $r0.<org.waveprotocol.wave.client.editor.selection.html.SelectionWebkit: org.waveprotocol.wave.client.editor.selection.html.JsRange getRangeAt(int)>(0);

        $r5 = r4.<org.waveprotocol.wave.client.editor.selection.content.CaretMovementHelperWebkitImpl: org.waveprotocol.wave.client.editor.impl.NodeManager nodeManager>;

        $r6 = virtualinvoke $r3.<org.waveprotocol.wave.client.editor.selection.html.SelectionW3CNative: com.google.gwt.dom.client.Node focusNode()>();

        $i0 = virtualinvoke $r3.<org.waveprotocol.wave.client.editor.selection.html.SelectionW3CNative: int focusOffset()>();

        r15 = virtualinvoke $r5.<org.waveprotocol.wave.client.editor.impl.NodeManager: org.waveprotocol.wave.model.document.util.Point nodeOffsetToWrapperPoint(com.google.gwt.dom.client.Node,int)>($r6, $i0);

     label3:
        goto label6;

     label4:
        $r12 := @caughtexception;

        $r13 = <org.waveprotocol.wave.client.editor.EditorStaticDeps: org.waveprotocol.wave.common.logging.LoggerBundle logger>;

        $r14 = interfaceinvoke $r13.<org.waveprotocol.wave.common.logging.LoggerBundle: org.waveprotocol.wave.common.logging.Logger fatal()>();

        interfaceinvoke $r14.<org.waveprotocol.wave.common.logging.Logger: void log(java.lang.String,java.lang.Throwable)>("html missing not handled", $r12);

        goto label6;

     label5:
        $r9 := @caughtexception;

        $r10 = <org.waveprotocol.wave.client.editor.EditorStaticDeps: org.waveprotocol.wave.common.logging.LoggerBundle logger>;

        $r11 = interfaceinvoke $r10.<org.waveprotocol.wave.common.logging.LoggerBundle: org.waveprotocol.wave.common.logging.Logger fatal()>();

        interfaceinvoke $r11.<org.waveprotocol.wave.common.logging.Logger: void log(java.lang.String,java.lang.Throwable)>("html inserted not handled", $r9);

     label6:
        return r15;

        catch org.waveprotocol.wave.client.editor.extract.InconsistencyException$HtmlMissing from label2 to label3 with label4;
        catch org.waveprotocol.wave.client.editor.extract.InconsistencyException$HtmlInserted from label2 to label3 with label5;
    }
}
