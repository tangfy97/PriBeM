class org.mozilla.javascript.tools.debugger.EvalTextArea extends javax.swing.JTextArea implements java.awt.event.KeyListener, javax.swing.event.DocumentListener
{
    private static final long serialVersionUID;
    private org.mozilla.javascript.tools.debugger.SwingGui debugGui;
    private java.util.Vector history;
    private int historyIndex;
    private int outputMark;

    public void <init>(org.mozilla.javascript.tools.debugger.SwingGui)
    {
        java.util.Vector $r5;
        org.mozilla.javascript.tools.debugger.EvalTextArea r0;
        java.awt.Font $r6;
        int $i0, $i2;
        javax.swing.text.Document $r3;
        org.mozilla.javascript.tools.debugger.SwingGui r1;

        r0 := @this: org.mozilla.javascript.tools.debugger.EvalTextArea;

        r1 := @parameter0: org.mozilla.javascript.tools.debugger.SwingGui;

        specialinvoke r0.<javax.swing.JTextArea: void <init>()>();

        $i2 = (int) -1;

        r0.<org.mozilla.javascript.tools.debugger.EvalTextArea: int historyIndex> = $i2;

        r0.<org.mozilla.javascript.tools.debugger.EvalTextArea: org.mozilla.javascript.tools.debugger.SwingGui debugGui> = r1;

        $r5 = new java.util.Vector;

        specialinvoke $r5.<java.util.Vector: void <init>()>();

        r0.<org.mozilla.javascript.tools.debugger.EvalTextArea: java.util.Vector history> = $r5;

        $r3 = virtualinvoke r0.<org.mozilla.javascript.tools.debugger.EvalTextArea: javax.swing.text.Document getDocument()>();

        interfaceinvoke $r3.<javax.swing.text.Document: void addDocumentListener(javax.swing.event.DocumentListener)>(r0);

        virtualinvoke r0.<org.mozilla.javascript.tools.debugger.EvalTextArea: void addKeyListener(java.awt.event.KeyListener)>(r0);

        virtualinvoke r0.<org.mozilla.javascript.tools.debugger.EvalTextArea: void setLineWrap(boolean)>(1);

        $r6 = new java.awt.Font;

        specialinvoke $r6.<java.awt.Font: void <init>(java.lang.String,int,int)>("Monospaced", 0, 12);

        virtualinvoke r0.<org.mozilla.javascript.tools.debugger.EvalTextArea: void setFont(java.awt.Font)>($r6);

        virtualinvoke r0.<org.mozilla.javascript.tools.debugger.EvalTextArea: void append(java.lang.String)>("% ");

        $i0 = interfaceinvoke $r3.<javax.swing.text.Document: int getLength()>();

        r0.<org.mozilla.javascript.tools.debugger.EvalTextArea: int outputMark> = $i0;

        return;
    }

    public void select(int, int)
    {
        int i0, i1;
        org.mozilla.javascript.tools.debugger.EvalTextArea r0;

        r0 := @this: org.mozilla.javascript.tools.debugger.EvalTextArea;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<javax.swing.JTextArea: void select(int,int)>(i0, i1);

        return;
    }

    private synchronized void returnPressed()
    {
        java.util.Vector $r10, $r11;
        org.mozilla.javascript.tools.debugger.EvalTextArea r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        java.lang.String $r3, $r6, $r9;
        boolean $z0;
        javax.swing.text.BadLocationException $r12;
        javax.swing.text.Document $r1;
        javax.swing.text.Segment $r2;
        org.mozilla.javascript.tools.debugger.Dim $r5, $r8;
        org.mozilla.javascript.tools.debugger.SwingGui $r4, $r7;

        r0 := @this: org.mozilla.javascript.tools.debugger.EvalTextArea;

        $r1 = virtualinvoke r0.<org.mozilla.javascript.tools.debugger.EvalTextArea: javax.swing.text.Document getDocument()>();

        $i0 = interfaceinvoke $r1.<javax.swing.text.Document: int getLength()>();

        $r2 = new javax.swing.text.Segment;

        specialinvoke $r2.<javax.swing.text.Segment: void <init>()>();

     label1:
        $i3 = r0.<org.mozilla.javascript.tools.debugger.EvalTextArea: int outputMark>;

        $i1 = r0.<org.mozilla.javascript.tools.debugger.EvalTextArea: int outputMark>;

        $i2 = $i0 - $i1;

        interfaceinvoke $r1.<javax.swing.text.Document: void getText(int,int,javax.swing.text.Segment)>($i3, $i2, $r2);

     label2:
        goto label4;

     label3:
        $r12 := @caughtexception;

        virtualinvoke $r12.<javax.swing.text.BadLocationException: void printStackTrace()>();

     label4:
        $r3 = virtualinvoke $r2.<javax.swing.text.Segment: java.lang.String toString()>();

        $r4 = r0.<org.mozilla.javascript.tools.debugger.EvalTextArea: org.mozilla.javascript.tools.debugger.SwingGui debugGui>;

        $r5 = $r4.<org.mozilla.javascript.tools.debugger.SwingGui: org.mozilla.javascript.tools.debugger.Dim dim>;

        $z0 = virtualinvoke $r5.<org.mozilla.javascript.tools.debugger.Dim: boolean stringIsCompilableUnit(java.lang.String)>($r3);

        if $z0 == 0 goto label7;

        $r6 = virtualinvoke $r3.<java.lang.String: java.lang.String trim()>();

        $i4 = virtualinvoke $r6.<java.lang.String: int length()>();

        if $i4 <= 0 goto label5;

        $r10 = r0.<org.mozilla.javascript.tools.debugger.EvalTextArea: java.util.Vector history>;

        virtualinvoke $r10.<java.util.Vector: void addElement(java.lang.Object)>($r3);

        $r11 = r0.<org.mozilla.javascript.tools.debugger.EvalTextArea: java.util.Vector history>;

        $i7 = virtualinvoke $r11.<java.util.Vector: int size()>();

        r0.<org.mozilla.javascript.tools.debugger.EvalTextArea: int historyIndex> = $i7;

     label5:
        virtualinvoke r0.<org.mozilla.javascript.tools.debugger.EvalTextArea: void append(java.lang.String)>("\n");

        $r7 = r0.<org.mozilla.javascript.tools.debugger.EvalTextArea: org.mozilla.javascript.tools.debugger.SwingGui debugGui>;

        $r8 = $r7.<org.mozilla.javascript.tools.debugger.SwingGui: org.mozilla.javascript.tools.debugger.Dim dim>;

        $r9 = virtualinvoke $r8.<org.mozilla.javascript.tools.debugger.Dim: java.lang.String eval(java.lang.String)>($r3);

        $i5 = virtualinvoke $r9.<java.lang.String: int length()>();

        if $i5 <= 0 goto label6;

        virtualinvoke r0.<org.mozilla.javascript.tools.debugger.EvalTextArea: void append(java.lang.String)>($r9);

        virtualinvoke r0.<org.mozilla.javascript.tools.debugger.EvalTextArea: void append(java.lang.String)>("\n");

     label6:
        virtualinvoke r0.<org.mozilla.javascript.tools.debugger.EvalTextArea: void append(java.lang.String)>("% ");

        $i6 = interfaceinvoke $r1.<javax.swing.text.Document: int getLength()>();

        r0.<org.mozilla.javascript.tools.debugger.EvalTextArea: int outputMark> = $i6;

        goto label8;

     label7:
        virtualinvoke r0.<org.mozilla.javascript.tools.debugger.EvalTextArea: void append(java.lang.String)>("\n");

     label8:
        return;

        catch javax.swing.text.BadLocationException from label1 to label2 with label3;
    }

    public synchronized void write(java.lang.String)
    {
        org.mozilla.javascript.tools.debugger.EvalTextArea r0;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.String r1;

        r0 := @this: org.mozilla.javascript.tools.debugger.EvalTextArea;

        r1 := @parameter0: java.lang.String;

        $i0 = r0.<org.mozilla.javascript.tools.debugger.EvalTextArea: int outputMark>;

        virtualinvoke r0.<org.mozilla.javascript.tools.debugger.EvalTextArea: void insert(java.lang.String,int)>(r1, $i0);

        $i1 = virtualinvoke r1.<java.lang.String: int length()>();

        $i2 = r0.<org.mozilla.javascript.tools.debugger.EvalTextArea: int outputMark>;

        $i3 = $i2 + $i1;

        r0.<org.mozilla.javascript.tools.debugger.EvalTextArea: int outputMark> = $i3;

        $i5 = r0.<org.mozilla.javascript.tools.debugger.EvalTextArea: int outputMark>;

        $i4 = r0.<org.mozilla.javascript.tools.debugger.EvalTextArea: int outputMark>;

        virtualinvoke r0.<org.mozilla.javascript.tools.debugger.EvalTextArea: void select(int,int)>($i5, $i4);

        return;
    }

    public void keyPressed(java.awt.event.KeyEvent)
    {
        java.util.Vector $r2, $r4, $r5, $r6, $r8, $r9, $r12;
        org.mozilla.javascript.tools.debugger.EvalTextArea r1;
        boolean $z0, $z1;
        java.awt.event.KeyEvent r0;
        javax.swing.text.Document $r3, $r11;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, i38, i39;
        java.lang.String r13, r14;
        java.lang.Object $r7, $r10;

        r1 := @this: org.mozilla.javascript.tools.debugger.EvalTextArea;

        r0 := @parameter0: java.awt.event.KeyEvent;

        $i0 = virtualinvoke r0.<java.awt.event.KeyEvent: int getKeyCode()>();

        if $i0 == 8 goto label01;

        if $i0 != 37 goto label02;

     label01:
        $i1 = r1.<org.mozilla.javascript.tools.debugger.EvalTextArea: int outputMark>;

        $i2 = virtualinvoke r1.<org.mozilla.javascript.tools.debugger.EvalTextArea: int getCaretPosition()>();

        if $i1 != $i2 goto label16;

        virtualinvoke r0.<java.awt.event.KeyEvent: void consume()>();

        goto label16;

     label02:
        if $i0 != 36 goto label06;

        $i33 = virtualinvoke r1.<org.mozilla.javascript.tools.debugger.EvalTextArea: int getCaretPosition()>();

        $i34 = r1.<org.mozilla.javascript.tools.debugger.EvalTextArea: int outputMark>;

        if $i33 != $i34 goto label03;

        virtualinvoke r0.<java.awt.event.KeyEvent: void consume()>();

        goto label16;

     label03:
        $i35 = r1.<org.mozilla.javascript.tools.debugger.EvalTextArea: int outputMark>;

        if $i33 <= $i35 goto label16;

        $z0 = virtualinvoke r0.<java.awt.event.KeyEvent: boolean isControlDown()>();

        if $z0 != 0 goto label16;

        $z1 = virtualinvoke r0.<java.awt.event.KeyEvent: boolean isShiftDown()>();

        if $z1 == 0 goto label04;

        $i37 = r1.<org.mozilla.javascript.tools.debugger.EvalTextArea: int outputMark>;

        virtualinvoke r1.<org.mozilla.javascript.tools.debugger.EvalTextArea: void moveCaretPosition(int)>($i37);

        goto label05;

     label04:
        $i36 = r1.<org.mozilla.javascript.tools.debugger.EvalTextArea: int outputMark>;

        virtualinvoke r1.<org.mozilla.javascript.tools.debugger.EvalTextArea: void setCaretPosition(int)>($i36);

     label05:
        virtualinvoke r0.<java.awt.event.KeyEvent: void consume()>();

        goto label16;

     label06:
        if $i0 != 10 goto label07;

        specialinvoke r1.<org.mozilla.javascript.tools.debugger.EvalTextArea: void returnPressed()>();

        virtualinvoke r0.<java.awt.event.KeyEvent: void consume()>();

        goto label16;

     label07:
        if $i0 != 38 goto label12;

        $i16 = r1.<org.mozilla.javascript.tools.debugger.EvalTextArea: int historyIndex>;

        $i17 = $i16 - 1;

        r1.<org.mozilla.javascript.tools.debugger.EvalTextArea: int historyIndex> = $i17;

        $i18 = r1.<org.mozilla.javascript.tools.debugger.EvalTextArea: int historyIndex>;

        if $i18 < 0 goto label10;

        $i21 = r1.<org.mozilla.javascript.tools.debugger.EvalTextArea: int historyIndex>;

        $r8 = r1.<org.mozilla.javascript.tools.debugger.EvalTextArea: java.util.Vector history>;

        $i22 = virtualinvoke $r8.<java.util.Vector: int size()>();

        if $i21 < $i22 goto label08;

        $r12 = r1.<org.mozilla.javascript.tools.debugger.EvalTextArea: java.util.Vector history>;

        $i31 = virtualinvoke $r12.<java.util.Vector: int size()>();

        $i32 = $i31 - 1;

        r1.<org.mozilla.javascript.tools.debugger.EvalTextArea: int historyIndex> = $i32;

     label08:
        $i23 = r1.<org.mozilla.javascript.tools.debugger.EvalTextArea: int historyIndex>;

        if $i23 < 0 goto label09;

        $r9 = r1.<org.mozilla.javascript.tools.debugger.EvalTextArea: java.util.Vector history>;

        $i26 = r1.<org.mozilla.javascript.tools.debugger.EvalTextArea: int historyIndex>;

        $r10 = virtualinvoke $r9.<java.util.Vector: java.lang.Object elementAt(int)>($i26);

        r13 = (java.lang.String) $r10;

        $r11 = virtualinvoke r1.<org.mozilla.javascript.tools.debugger.EvalTextArea: javax.swing.text.Document getDocument()>();

        $i27 = interfaceinvoke $r11.<javax.swing.text.Document: int getLength()>();

        $i28 = r1.<org.mozilla.javascript.tools.debugger.EvalTextArea: int outputMark>;

        virtualinvoke r1.<org.mozilla.javascript.tools.debugger.EvalTextArea: void replaceRange(java.lang.String,int,int)>(r13, $i28, $i27);

        $i29 = r1.<org.mozilla.javascript.tools.debugger.EvalTextArea: int outputMark>;

        $i30 = virtualinvoke r13.<java.lang.String: int length()>();

        i38 = $i29 + $i30;

        virtualinvoke r1.<org.mozilla.javascript.tools.debugger.EvalTextArea: void select(int,int)>(i38, i38);

        goto label11;

     label09:
        $i24 = r1.<org.mozilla.javascript.tools.debugger.EvalTextArea: int historyIndex>;

        $i25 = $i24 + 1;

        r1.<org.mozilla.javascript.tools.debugger.EvalTextArea: int historyIndex> = $i25;

        goto label11;

     label10:
        $i19 = r1.<org.mozilla.javascript.tools.debugger.EvalTextArea: int historyIndex>;

        $i20 = $i19 + 1;

        r1.<org.mozilla.javascript.tools.debugger.EvalTextArea: int historyIndex> = $i20;

     label11:
        virtualinvoke r0.<java.awt.event.KeyEvent: void consume()>();

        goto label16;

     label12:
        if $i0 != 40 goto label16;

        i39 = r1.<org.mozilla.javascript.tools.debugger.EvalTextArea: int outputMark>;

        $r2 = r1.<org.mozilla.javascript.tools.debugger.EvalTextArea: java.util.Vector history>;

        $i3 = virtualinvoke $r2.<java.util.Vector: int size()>();

        if $i3 <= 0 goto label15;

        $i4 = r1.<org.mozilla.javascript.tools.debugger.EvalTextArea: int historyIndex>;

        $i5 = $i4 + 1;

        r1.<org.mozilla.javascript.tools.debugger.EvalTextArea: int historyIndex> = $i5;

        $i6 = r1.<org.mozilla.javascript.tools.debugger.EvalTextArea: int historyIndex>;

        if $i6 >= 0 goto label13;

        r1.<org.mozilla.javascript.tools.debugger.EvalTextArea: int historyIndex> = 0;

     label13:
        $r3 = virtualinvoke r1.<org.mozilla.javascript.tools.debugger.EvalTextArea: javax.swing.text.Document getDocument()>();

        $i7 = interfaceinvoke $r3.<javax.swing.text.Document: int getLength()>();

        $i8 = r1.<org.mozilla.javascript.tools.debugger.EvalTextArea: int historyIndex>;

        $r4 = r1.<org.mozilla.javascript.tools.debugger.EvalTextArea: java.util.Vector history>;

        $i9 = virtualinvoke $r4.<java.util.Vector: int size()>();

        if $i8 >= $i9 goto label14;

        $r6 = r1.<org.mozilla.javascript.tools.debugger.EvalTextArea: java.util.Vector history>;

        $i12 = r1.<org.mozilla.javascript.tools.debugger.EvalTextArea: int historyIndex>;

        $r7 = virtualinvoke $r6.<java.util.Vector: java.lang.Object elementAt(int)>($i12);

        r14 = (java.lang.String) $r7;

        $i13 = r1.<org.mozilla.javascript.tools.debugger.EvalTextArea: int outputMark>;

        virtualinvoke r1.<org.mozilla.javascript.tools.debugger.EvalTextArea: void replaceRange(java.lang.String,int,int)>(r14, $i13, $i7);

        $i14 = r1.<org.mozilla.javascript.tools.debugger.EvalTextArea: int outputMark>;

        $i15 = virtualinvoke r14.<java.lang.String: int length()>();

        i39 = $i14 + $i15;

        goto label15;

     label14:
        $r5 = r1.<org.mozilla.javascript.tools.debugger.EvalTextArea: java.util.Vector history>;

        $i10 = virtualinvoke $r5.<java.util.Vector: int size()>();

        r1.<org.mozilla.javascript.tools.debugger.EvalTextArea: int historyIndex> = $i10;

        $i11 = r1.<org.mozilla.javascript.tools.debugger.EvalTextArea: int outputMark>;

        virtualinvoke r1.<org.mozilla.javascript.tools.debugger.EvalTextArea: void replaceRange(java.lang.String,int,int)>("", $i11, $i7);

     label15:
        virtualinvoke r1.<org.mozilla.javascript.tools.debugger.EvalTextArea: void select(int,int)>(i39, i39);

        virtualinvoke r0.<java.awt.event.KeyEvent: void consume()>();

     label16:
        return;
    }

    public void keyTyped(java.awt.event.KeyEvent)
    {
        char $c0;
        java.awt.event.KeyEvent r0;
        org.mozilla.javascript.tools.debugger.EvalTextArea r1;
        int $i1, $i2, $i3, $i4, $i5, $i6;

        r1 := @this: org.mozilla.javascript.tools.debugger.EvalTextArea;

        r0 := @parameter0: java.awt.event.KeyEvent;

        $c0 = virtualinvoke r0.<java.awt.event.KeyEvent: char getKeyChar()>();

        $i6 = (int) $c0;

        if $i6 != 8 goto label1;

        $i4 = r1.<org.mozilla.javascript.tools.debugger.EvalTextArea: int outputMark>;

        $i5 = virtualinvoke r1.<org.mozilla.javascript.tools.debugger.EvalTextArea: int getCaretPosition()>();

        if $i4 != $i5 goto label2;

        virtualinvoke r0.<java.awt.event.KeyEvent: void consume()>();

        goto label2;

     label1:
        $i1 = virtualinvoke r1.<org.mozilla.javascript.tools.debugger.EvalTextArea: int getCaretPosition()>();

        $i2 = r1.<org.mozilla.javascript.tools.debugger.EvalTextArea: int outputMark>;

        if $i1 >= $i2 goto label2;

        $i3 = r1.<org.mozilla.javascript.tools.debugger.EvalTextArea: int outputMark>;

        virtualinvoke r1.<org.mozilla.javascript.tools.debugger.EvalTextArea: void setCaretPosition(int)>($i3);

     label2:
        return;
    }

    public synchronized void keyReleased(java.awt.event.KeyEvent)
    {
        java.awt.event.KeyEvent r1;
        org.mozilla.javascript.tools.debugger.EvalTextArea r0;

        r0 := @this: org.mozilla.javascript.tools.debugger.EvalTextArea;

        r1 := @parameter0: java.awt.event.KeyEvent;

        return;
    }

    public synchronized void insertUpdate(javax.swing.event.DocumentEvent)
    {
        org.mozilla.javascript.tools.debugger.EvalTextArea r1;
        int $i0, $i1, $i2, $i3, $i4;
        javax.swing.event.DocumentEvent r0;

        r1 := @this: org.mozilla.javascript.tools.debugger.EvalTextArea;

        r0 := @parameter0: javax.swing.event.DocumentEvent;

        $i0 = interfaceinvoke r0.<javax.swing.event.DocumentEvent: int getLength()>();

        $i1 = interfaceinvoke r0.<javax.swing.event.DocumentEvent: int getOffset()>();

        $i2 = r1.<org.mozilla.javascript.tools.debugger.EvalTextArea: int outputMark>;

        if $i2 <= $i1 goto label1;

        $i3 = r1.<org.mozilla.javascript.tools.debugger.EvalTextArea: int outputMark>;

        $i4 = $i3 + $i0;

        r1.<org.mozilla.javascript.tools.debugger.EvalTextArea: int outputMark> = $i4;

     label1:
        return;
    }

    public synchronized void removeUpdate(javax.swing.event.DocumentEvent)
    {
        org.mozilla.javascript.tools.debugger.EvalTextArea r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        javax.swing.event.DocumentEvent r0;

        r1 := @this: org.mozilla.javascript.tools.debugger.EvalTextArea;

        r0 := @parameter0: javax.swing.event.DocumentEvent;

        $i0 = interfaceinvoke r0.<javax.swing.event.DocumentEvent: int getLength()>();

        $i1 = interfaceinvoke r0.<javax.swing.event.DocumentEvent: int getOffset()>();

        $i2 = r1.<org.mozilla.javascript.tools.debugger.EvalTextArea: int outputMark>;

        if $i2 <= $i1 goto label2;

        $i4 = r1.<org.mozilla.javascript.tools.debugger.EvalTextArea: int outputMark>;

        $i3 = $i1 + $i0;

        if $i4 < $i3 goto label1;

        $i5 = r1.<org.mozilla.javascript.tools.debugger.EvalTextArea: int outputMark>;

        $i6 = $i5 - $i0;

        r1.<org.mozilla.javascript.tools.debugger.EvalTextArea: int outputMark> = $i6;

        goto label2;

     label1:
        r1.<org.mozilla.javascript.tools.debugger.EvalTextArea: int outputMark> = $i1;

     label2:
        return;
    }

    public synchronized void postUpdateUI()
    {
        org.mozilla.javascript.tools.debugger.EvalTextArea r0;
        int $i0, $i1;
        javax.swing.text.Caret $r1;

        r0 := @this: org.mozilla.javascript.tools.debugger.EvalTextArea;

        $r1 = virtualinvoke r0.<org.mozilla.javascript.tools.debugger.EvalTextArea: javax.swing.text.Caret getCaret()>();

        virtualinvoke r0.<org.mozilla.javascript.tools.debugger.EvalTextArea: void setCaret(javax.swing.text.Caret)>($r1);

        $i1 = r0.<org.mozilla.javascript.tools.debugger.EvalTextArea: int outputMark>;

        $i0 = r0.<org.mozilla.javascript.tools.debugger.EvalTextArea: int outputMark>;

        virtualinvoke r0.<org.mozilla.javascript.tools.debugger.EvalTextArea: void select(int,int)>($i1, $i0);

        return;
    }

    public synchronized void changedUpdate(javax.swing.event.DocumentEvent)
    {
        javax.swing.event.DocumentEvent r1;
        org.mozilla.javascript.tools.debugger.EvalTextArea r0;

        r0 := @this: org.mozilla.javascript.tools.debugger.EvalTextArea;

        r1 := @parameter0: javax.swing.event.DocumentEvent;

        return;
    }

    public static void <clinit>()
    {
        <org.mozilla.javascript.tools.debugger.EvalTextArea: long serialVersionUID> = -3918033649601064194L;

        return;
    }
}
