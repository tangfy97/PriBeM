public class org.apache.lucene.util.packed.PackedInts extends java.lang.Object
{
    public static final float FASTEST;
    public static final float FAST;
    public static final float DEFAULT;
    public static final float COMPACT;
    public static final int DEFAULT_BUFFER_SIZE;
    public static final java.lang.String CODEC_NAME;
    public static final int VERSION_START;
    public static final int VERSION_BYTE_ALIGNED;
    public static final int VERSION_CURRENT;
    static final boolean $assertionsDisabled;

    public void <init>()
    {
        org.apache.lucene.util.packed.PackedInts r0;

        r0 := @this: org.apache.lucene.util.packed.PackedInts;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void checkVersion(int)
    {
        java.lang.IllegalArgumentException $r0, $r6;
        int i0;
        java.lang.StringBuilder $r1, $r2, $r3, $r4, $r7, $r8, $r9, $r10;
        java.lang.String $r5, $r11;

        i0 := @parameter0: int;

        if i0 >= 0 goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Version is too old, should be at least 0 (got ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);

        throw $r6;

     label1:
        if i0 <= 1 goto label2;

        $r0 = new java.lang.IllegalArgumentException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Version is too new, should be at most 1 (got ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r0;

     label2:
        return;
    }

    public static org.apache.lucene.util.packed.PackedInts$FormatAndBits fastestFormatAndBits(int, int, float)
    {
        org.apache.lucene.util.packed.PackedInts$FormatAndBits $r4;
        byte $b2;
        int i0, $i1, $i3, i4, i5, i6, $i8, $i10, $i11;
        boolean $z0;
        org.apache.lucene.util.packed.PackedInts$Format $r0, $r1, r2;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, f7, $f8, f9;

        i4 := @parameter0: int;

        i0 := @parameter1: int;

        f9 := @parameter2: float;

        $i8 = (int) -1;

        if i4 != $i8 goto label01;

        i4 = 2147483647;

     label01:
        $f0 = staticinvoke <java.lang.Math: float max(float,float)>(0.0F, f9);

        $f1 = staticinvoke <java.lang.Math: float min(float,float)>(7.0F, $f0);

        $f2 = (float) i0;

        $f8 = $f1 * $f2;

        $i1 = (int) $f8;

        $i3 = i0 + $i1;

        $i10 = (int) -1;

        i5 = $i10;

        r2 = <org.apache.lucene.util.packed.PackedInts$Format: org.apache.lucene.util.packed.PackedInts$Format PACKED>;

        if i0 > 8 goto label02;

        if $i3 < 8 goto label02;

        i5 = 8;

        goto label11;

     label02:
        if i0 > 16 goto label03;

        if $i3 < 16 goto label03;

        i5 = 16;

        goto label11;

     label03:
        if i0 > 32 goto label04;

        if $i3 < 32 goto label04;

        i5 = 32;

        goto label11;

     label04:
        if i0 > 64 goto label05;

        if $i3 < 64 goto label05;

        i5 = 64;

        goto label11;

     label05:
        if i4 > 715827882 goto label06;

        if i0 > 24 goto label06;

        if $i3 < 24 goto label06;

        i5 = 24;

        goto label11;

     label06:
        if i4 > 715827882 goto label07;

        if i0 > 48 goto label07;

        if $i3 < 48 goto label07;

        i5 = 48;

        goto label11;

     label07:
        i6 = i0;

     label08:
        if i6 > $i3 goto label10;

        $r0 = <org.apache.lucene.util.packed.PackedInts$Format: org.apache.lucene.util.packed.PackedInts$Format PACKED_SINGLE_BLOCK>;

        $z0 = virtualinvoke $r0.<org.apache.lucene.util.packed.PackedInts$Format: boolean isSupported(int)>(i6);

        if $z0 == 0 goto label09;

        $r1 = <org.apache.lucene.util.packed.PackedInts$Format: org.apache.lucene.util.packed.PackedInts$Format PACKED_SINGLE_BLOCK>;

        $f3 = virtualinvoke $r1.<org.apache.lucene.util.packed.PackedInts$Format: float overheadPerValue(int)>(i6);

        $f4 = (float) i0;

        $f6 = $f8 + $f4;

        $f5 = (float) i6;

        f7 = $f6 - $f5;

        $b2 = $f3 cmpg f7;

        $i11 = (int) $b2;

        if $i11 > 0 goto label09;

        i5 = i6;

        r2 = <org.apache.lucene.util.packed.PackedInts$Format: org.apache.lucene.util.packed.PackedInts$Format PACKED_SINGLE_BLOCK>;

        goto label10;

     label09:
        i6 = i6 + 1;

        goto label08;

     label10:
        if i5 >= 0 goto label11;

        i5 = i0;

     label11:
        $r4 = new org.apache.lucene.util.packed.PackedInts$FormatAndBits;

        specialinvoke $r4.<org.apache.lucene.util.packed.PackedInts$FormatAndBits: void <init>(org.apache.lucene.util.packed.PackedInts$Format,int)>(r2, i5);

        return $r4;
    }

    public static org.apache.lucene.util.packed.PackedInts$Decoder getDecoder(org.apache.lucene.util.packed.PackedInts$Format, int, int)
    {
        org.apache.lucene.util.packed.PackedInts$Format r0;
        int i0, i1;
        org.apache.lucene.util.packed.BulkOperation $r1;

        r0 := @parameter0: org.apache.lucene.util.packed.PackedInts$Format;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        staticinvoke <org.apache.lucene.util.packed.PackedInts: void checkVersion(int)>(i0);

        $r1 = staticinvoke <org.apache.lucene.util.packed.BulkOperation: org.apache.lucene.util.packed.BulkOperation of(org.apache.lucene.util.packed.PackedInts$Format,int)>(r0, i1);

        return $r1;
    }

    public static org.apache.lucene.util.packed.PackedInts$Encoder getEncoder(org.apache.lucene.util.packed.PackedInts$Format, int, int)
    {
        org.apache.lucene.util.packed.PackedInts$Format r0;
        int i0, i1;
        org.apache.lucene.util.packed.BulkOperation $r1;

        r0 := @parameter0: org.apache.lucene.util.packed.PackedInts$Format;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        staticinvoke <org.apache.lucene.util.packed.PackedInts: void checkVersion(int)>(i0);

        $r1 = staticinvoke <org.apache.lucene.util.packed.BulkOperation: org.apache.lucene.util.packed.BulkOperation of(org.apache.lucene.util.packed.PackedInts$Format,int)>(r0, i1);

        return $r1;
    }

    public static org.apache.lucene.util.packed.PackedInts$Reader getReaderNoHeader(org.apache.lucene.store.DataInput, org.apache.lucene.util.packed.PackedInts$Format, int, int, int) throws java.io.IOException
    {
        org.apache.lucene.store.DataInput r3;
        java.lang.AssertionError $r10;
        org.apache.lucene.util.packed.Direct8 $r8;
        int[] $r1;
        org.apache.lucene.util.packed.Direct64 $r2;
        int i0, $i1, $i2, i3, i4;
        java.lang.String $r14;
        org.apache.lucene.util.packed.Packed64SingleBlock $r9;
        org.apache.lucene.util.packed.PackedInts$Format r0;
        org.apache.lucene.util.packed.Direct32 $r5;
        java.lang.StringBuilder $r11, $r12, $r13;
        org.apache.lucene.util.packed.Packed16ThreeBlocks $r4;
        org.apache.lucene.util.packed.Direct16 $r7;
        org.apache.lucene.util.packed.Packed8ThreeBlocks $r6;
        org.apache.lucene.util.packed.Packed64 $r15;

        r3 := @parameter0: org.apache.lucene.store.DataInput;

        r0 := @parameter1: org.apache.lucene.util.packed.PackedInts$Format;

        i0 := @parameter2: int;

        i4 := @parameter3: int;

        i3 := @parameter4: int;

        staticinvoke <org.apache.lucene.util.packed.PackedInts: void checkVersion(int)>(i0);

        $r1 = <org.apache.lucene.util.packed.PackedInts$2: int[] $SwitchMap$org$apache$lucene$util$packed$PackedInts$Format>;

        $i1 = virtualinvoke r0.<org.apache.lucene.util.packed.PackedInts$Format: int ordinal()>();

        $i2 = $r1[$i1];

        lookupswitch($i2)
        {
            case 1: goto label01;
            case 2: goto label02;
            default: goto label10;
        };

     label01:
        $r9 = staticinvoke <org.apache.lucene.util.packed.Packed64SingleBlock: org.apache.lucene.util.packed.Packed64SingleBlock create(org.apache.lucene.store.DataInput,int,int)>(r3, i4, i3);

        return $r9;

     label02:
        lookupswitch(i3)
        {
            case 8: goto label03;
            case 16: goto label04;
            case 24: goto label07;
            case 32: goto label05;
            case 48: goto label08;
            case 64: goto label06;
            default: goto label09;
        };

     label03:
        $r8 = new org.apache.lucene.util.packed.Direct8;

        specialinvoke $r8.<org.apache.lucene.util.packed.Direct8: void <init>(int,org.apache.lucene.store.DataInput,int)>(i0, r3, i4);

        return $r8;

     label04:
        $r7 = new org.apache.lucene.util.packed.Direct16;

        specialinvoke $r7.<org.apache.lucene.util.packed.Direct16: void <init>(int,org.apache.lucene.store.DataInput,int)>(i0, r3, i4);

        return $r7;

     label05:
        $r5 = new org.apache.lucene.util.packed.Direct32;

        specialinvoke $r5.<org.apache.lucene.util.packed.Direct32: void <init>(int,org.apache.lucene.store.DataInput,int)>(i0, r3, i4);

        return $r5;

     label06:
        $r2 = new org.apache.lucene.util.packed.Direct64;

        specialinvoke $r2.<org.apache.lucene.util.packed.Direct64: void <init>(int,org.apache.lucene.store.DataInput,int)>(i0, r3, i4);

        return $r2;

     label07:
        if i4 > 715827882 goto label09;

        $r6 = new org.apache.lucene.util.packed.Packed8ThreeBlocks;

        specialinvoke $r6.<org.apache.lucene.util.packed.Packed8ThreeBlocks: void <init>(int,org.apache.lucene.store.DataInput,int)>(i0, r3, i4);

        return $r6;

     label08:
        if i4 > 715827882 goto label09;

        $r4 = new org.apache.lucene.util.packed.Packed16ThreeBlocks;

        specialinvoke $r4.<org.apache.lucene.util.packed.Packed16ThreeBlocks: void <init>(int,org.apache.lucene.store.DataInput,int)>(i0, r3, i4);

        return $r4;

     label09:
        $r15 = new org.apache.lucene.util.packed.Packed64;

        specialinvoke $r15.<org.apache.lucene.util.packed.Packed64: void <init>(int,org.apache.lucene.store.DataInput,int,int)>(i0, r3, i4, i3);

        return $r15;

     label10:
        $r10 = new java.lang.AssertionError;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown Writer format: ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.AssertionError: void <init>(java.lang.Object)>($r14);

        throw $r10;
    }

    public static org.apache.lucene.util.packed.PackedInts$Reader getReaderNoHeader(org.apache.lucene.store.DataInput, org.apache.lucene.util.packed.PackedInts$Header) throws java.io.IOException
    {
        org.apache.lucene.store.DataInput r0;
        org.apache.lucene.util.packed.PackedInts$Reader $r3;
        org.apache.lucene.util.packed.PackedInts$Format $r2;
        int $i0, $i1, $i2;
        org.apache.lucene.util.packed.PackedInts$Header r1;

        r0 := @parameter0: org.apache.lucene.store.DataInput;

        r1 := @parameter1: org.apache.lucene.util.packed.PackedInts$Header;

        $r2 = staticinvoke <org.apache.lucene.util.packed.PackedInts$Header: org.apache.lucene.util.packed.PackedInts$Format access$100(org.apache.lucene.util.packed.PackedInts$Header)>(r1);

        $i0 = staticinvoke <org.apache.lucene.util.packed.PackedInts$Header: int access$200(org.apache.lucene.util.packed.PackedInts$Header)>(r1);

        $i1 = staticinvoke <org.apache.lucene.util.packed.PackedInts$Header: int access$300(org.apache.lucene.util.packed.PackedInts$Header)>(r1);

        $i2 = staticinvoke <org.apache.lucene.util.packed.PackedInts$Header: int access$400(org.apache.lucene.util.packed.PackedInts$Header)>(r1);

        $r3 = staticinvoke <org.apache.lucene.util.packed.PackedInts: org.apache.lucene.util.packed.PackedInts$Reader getReaderNoHeader(org.apache.lucene.store.DataInput,org.apache.lucene.util.packed.PackedInts$Format,int,int,int)>(r0, $r2, $i0, $i1, $i2);

        return $r3;
    }

    public static org.apache.lucene.util.packed.PackedInts$Reader getReader(org.apache.lucene.store.DataInput) throws java.io.IOException
    {
        org.apache.lucene.store.DataInput r0;
        org.apache.lucene.util.packed.PackedInts$Format $r1;
        java.lang.AssertionError $r3;
        org.apache.lucene.util.packed.PackedInts$Reader $r2;
        int $i0, $i1, $i2, $i3;
        java.lang.StringBuilder $r4, $r5, $r6;
        java.lang.String $r7;
        boolean $z0;

        r0 := @parameter0: org.apache.lucene.store.DataInput;

        $i0 = staticinvoke <org.apache.lucene.codecs.CodecUtil: int checkHeader(org.apache.lucene.store.DataInput,java.lang.String,int,int)>(r0, "PackedInts", 0, 1);

        $i1 = virtualinvoke r0.<org.apache.lucene.store.DataInput: int readVInt()>();

        $z0 = <org.apache.lucene.util.packed.PackedInts: boolean $assertionsDisabled>;

        if $z0 != 0 goto label2;

        if $i1 <= 0 goto label1;

        if $i1 <= 64 goto label2;

     label1:
        $r3 = new java.lang.AssertionError;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("bitsPerValue=");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.AssertionError: void <init>(java.lang.Object)>($r7);

        throw $r3;

     label2:
        $i2 = virtualinvoke r0.<org.apache.lucene.store.DataInput: int readVInt()>();

        $i3 = virtualinvoke r0.<org.apache.lucene.store.DataInput: int readVInt()>();

        $r1 = staticinvoke <org.apache.lucene.util.packed.PackedInts$Format: org.apache.lucene.util.packed.PackedInts$Format byId(int)>($i3);

        $r2 = staticinvoke <org.apache.lucene.util.packed.PackedInts: org.apache.lucene.util.packed.PackedInts$Reader getReaderNoHeader(org.apache.lucene.store.DataInput,org.apache.lucene.util.packed.PackedInts$Format,int,int,int)>(r0, $r1, $i0, $i2, $i1);

        return $r2;
    }

    public static org.apache.lucene.util.packed.PackedInts$ReaderIterator getReaderIteratorNoHeader(org.apache.lucene.store.DataInput, org.apache.lucene.util.packed.PackedInts$Format, int, int, int, int)
    {
        org.apache.lucene.util.packed.PackedReaderIterator $r0;
        org.apache.lucene.store.DataInput r2;
        org.apache.lucene.util.packed.PackedInts$Format r1;
        int i0, i1, i2, i3;

        r2 := @parameter0: org.apache.lucene.store.DataInput;

        r1 := @parameter1: org.apache.lucene.util.packed.PackedInts$Format;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        i3 := @parameter5: int;

        staticinvoke <org.apache.lucene.util.packed.PackedInts: void checkVersion(int)>(i0);

        $r0 = new org.apache.lucene.util.packed.PackedReaderIterator;

        specialinvoke $r0.<org.apache.lucene.util.packed.PackedReaderIterator: void <init>(org.apache.lucene.util.packed.PackedInts$Format,int,int,int,org.apache.lucene.store.DataInput,int)>(r1, i0, i1, i2, r2, i3);

        return $r0;
    }

    public static org.apache.lucene.util.packed.PackedInts$ReaderIterator getReaderIterator(org.apache.lucene.store.DataInput, int) throws java.io.IOException
    {
        org.apache.lucene.store.DataInput r0;
        org.apache.lucene.util.packed.PackedInts$Format $r1;
        java.lang.AssertionError $r3;
        org.apache.lucene.util.packed.PackedInts$ReaderIterator $r2;
        int $i0, $i1, $i2, $i3, i4;
        java.lang.StringBuilder $r4, $r5, $r6;
        java.lang.String $r7;
        boolean $z0;

        r0 := @parameter0: org.apache.lucene.store.DataInput;

        i4 := @parameter1: int;

        $i0 = staticinvoke <org.apache.lucene.codecs.CodecUtil: int checkHeader(org.apache.lucene.store.DataInput,java.lang.String,int,int)>(r0, "PackedInts", 0, 1);

        $i1 = virtualinvoke r0.<org.apache.lucene.store.DataInput: int readVInt()>();

        $z0 = <org.apache.lucene.util.packed.PackedInts: boolean $assertionsDisabled>;

        if $z0 != 0 goto label2;

        if $i1 <= 0 goto label1;

        if $i1 <= 64 goto label2;

     label1:
        $r3 = new java.lang.AssertionError;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("bitsPerValue=");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.AssertionError: void <init>(java.lang.Object)>($r7);

        throw $r3;

     label2:
        $i2 = virtualinvoke r0.<org.apache.lucene.store.DataInput: int readVInt()>();

        $i3 = virtualinvoke r0.<org.apache.lucene.store.DataInput: int readVInt()>();

        $r1 = staticinvoke <org.apache.lucene.util.packed.PackedInts$Format: org.apache.lucene.util.packed.PackedInts$Format byId(int)>($i3);

        $r2 = staticinvoke <org.apache.lucene.util.packed.PackedInts: org.apache.lucene.util.packed.PackedInts$ReaderIterator getReaderIteratorNoHeader(org.apache.lucene.store.DataInput,org.apache.lucene.util.packed.PackedInts$Format,int,int,int,int)>(r0, $r1, $i0, $i2, $i1, i4);

        return $r2;
    }

    public static org.apache.lucene.util.packed.PackedInts$Reader getDirectReaderNoHeader(org.apache.lucene.store.IndexInput, org.apache.lucene.util.packed.PackedInts$Format, int, int, int)
    {
        org.apache.lucene.util.packed.DirectPackedReader $r2;
        long $l5, $l6, $l8, $l9;
        java.lang.AssertionError $r5, $r7;
        byte $b7;
        int[] $r1;
        int i0, $i1, $i2, i3, i4;
        java.lang.String $r11;
        boolean $z0;
        org.apache.lucene.store.IndexInput r3;
        org.apache.lucene.util.packed.PackedInts$Format r0;
        org.apache.lucene.util.packed.PackedInts$1 $r4;
        org.apache.lucene.util.packed.DirectPacked64SingleBlockReader $r6;
        java.lang.StringBuilder $r8, $r9, $r10;

        r3 := @parameter0: org.apache.lucene.store.IndexInput;

        r0 := @parameter1: org.apache.lucene.util.packed.PackedInts$Format;

        i0 := @parameter2: int;

        i3 := @parameter3: int;

        i4 := @parameter4: int;

        staticinvoke <org.apache.lucene.util.packed.PackedInts: void checkVersion(int)>(i0);

        $r1 = <org.apache.lucene.util.packed.PackedInts$2: int[] $SwitchMap$org$apache$lucene$util$packed$PackedInts$Format>;

        $i1 = virtualinvoke r0.<org.apache.lucene.util.packed.PackedInts$Format: int ordinal()>();

        $i2 = $r1[$i1];

        lookupswitch($i2)
        {
            case 1: goto label4;
            case 2: goto label1;
            default: goto label5;
        };

     label1:
        $l5 = virtualinvoke r0.<org.apache.lucene.util.packed.PackedInts$Format: long byteCount(int,int,int)>(i0, i3, i4);

        $l6 = virtualinvoke r0.<org.apache.lucene.util.packed.PackedInts$Format: long byteCount(int,int,int)>(1, i3, i4);

        $b7 = $l5 cmp $l6;

        if $b7 == 0 goto label3;

        $z0 = <org.apache.lucene.util.packed.PackedInts: boolean $assertionsDisabled>;

        if $z0 != 0 goto label2;

        if i0 == 0 goto label2;

        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();

        throw $r5;

     label2:
        $l8 = virtualinvoke r3.<org.apache.lucene.store.IndexInput: long getFilePointer()>();

        $l9 = $l8 + $l5;

        $r4 = new org.apache.lucene.util.packed.PackedInts$1;

        specialinvoke $r4.<org.apache.lucene.util.packed.PackedInts$1: void <init>(int,int,org.apache.lucene.store.IndexInput,org.apache.lucene.store.IndexInput,long)>(i4, i3, r3, r3, $l9);

        return $r4;

     label3:
        $r2 = new org.apache.lucene.util.packed.DirectPackedReader;

        specialinvoke $r2.<org.apache.lucene.util.packed.DirectPackedReader: void <init>(int,int,org.apache.lucene.store.IndexInput)>(i4, i3, r3);

        return $r2;

     label4:
        $r6 = new org.apache.lucene.util.packed.DirectPacked64SingleBlockReader;

        specialinvoke $r6.<org.apache.lucene.util.packed.DirectPacked64SingleBlockReader: void <init>(int,int,org.apache.lucene.store.IndexInput)>(i4, i3, r3);

        return $r6;

     label5:
        $r7 = new java.lang.AssertionError;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknwown format: ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.AssertionError: void <init>(java.lang.Object)>($r11);

        throw $r7;
    }

    public static org.apache.lucene.util.packed.PackedInts$Reader getDirectReaderNoHeader(org.apache.lucene.store.IndexInput, org.apache.lucene.util.packed.PackedInts$Header) throws java.io.IOException
    {
        org.apache.lucene.store.IndexInput r0;
        org.apache.lucene.util.packed.PackedInts$Reader $r3;
        org.apache.lucene.util.packed.PackedInts$Format $r2;
        int $i0, $i1, $i2;
        org.apache.lucene.util.packed.PackedInts$Header r1;

        r0 := @parameter0: org.apache.lucene.store.IndexInput;

        r1 := @parameter1: org.apache.lucene.util.packed.PackedInts$Header;

        $r2 = staticinvoke <org.apache.lucene.util.packed.PackedInts$Header: org.apache.lucene.util.packed.PackedInts$Format access$100(org.apache.lucene.util.packed.PackedInts$Header)>(r1);

        $i0 = staticinvoke <org.apache.lucene.util.packed.PackedInts$Header: int access$200(org.apache.lucene.util.packed.PackedInts$Header)>(r1);

        $i1 = staticinvoke <org.apache.lucene.util.packed.PackedInts$Header: int access$300(org.apache.lucene.util.packed.PackedInts$Header)>(r1);

        $i2 = staticinvoke <org.apache.lucene.util.packed.PackedInts$Header: int access$400(org.apache.lucene.util.packed.PackedInts$Header)>(r1);

        $r3 = staticinvoke <org.apache.lucene.util.packed.PackedInts: org.apache.lucene.util.packed.PackedInts$Reader getDirectReaderNoHeader(org.apache.lucene.store.IndexInput,org.apache.lucene.util.packed.PackedInts$Format,int,int,int)>(r0, $r2, $i0, $i1, $i2);

        return $r3;
    }

    public static org.apache.lucene.util.packed.PackedInts$Reader getDirectReader(org.apache.lucene.store.IndexInput) throws java.io.IOException
    {
        org.apache.lucene.store.IndexInput r0;
        org.apache.lucene.util.packed.PackedInts$Format $r1;
        java.lang.AssertionError $r3;
        org.apache.lucene.util.packed.PackedInts$Reader $r2;
        int $i0, $i1, $i2, $i3;
        java.lang.StringBuilder $r4, $r5, $r6;
        java.lang.String $r7;
        boolean $z0;

        r0 := @parameter0: org.apache.lucene.store.IndexInput;

        $i0 = staticinvoke <org.apache.lucene.codecs.CodecUtil: int checkHeader(org.apache.lucene.store.DataInput,java.lang.String,int,int)>(r0, "PackedInts", 0, 1);

        $i1 = virtualinvoke r0.<org.apache.lucene.store.IndexInput: int readVInt()>();

        $z0 = <org.apache.lucene.util.packed.PackedInts: boolean $assertionsDisabled>;

        if $z0 != 0 goto label2;

        if $i1 <= 0 goto label1;

        if $i1 <= 64 goto label2;

     label1:
        $r3 = new java.lang.AssertionError;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("bitsPerValue=");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.AssertionError: void <init>(java.lang.Object)>($r7);

        throw $r3;

     label2:
        $i2 = virtualinvoke r0.<org.apache.lucene.store.IndexInput: int readVInt()>();

        $i3 = virtualinvoke r0.<org.apache.lucene.store.IndexInput: int readVInt()>();

        $r1 = staticinvoke <org.apache.lucene.util.packed.PackedInts$Format: org.apache.lucene.util.packed.PackedInts$Format byId(int)>($i3);

        $r2 = staticinvoke <org.apache.lucene.util.packed.PackedInts: org.apache.lucene.util.packed.PackedInts$Reader getDirectReaderNoHeader(org.apache.lucene.store.IndexInput,org.apache.lucene.util.packed.PackedInts$Format,int,int,int)>(r0, $r1, $i0, $i2, $i1);

        return $r2;
    }

    public static org.apache.lucene.util.packed.PackedInts$Mutable getMutable(int, int, float)
    {
        org.apache.lucene.util.packed.PackedInts$FormatAndBits $r0;
        java.lang.AssertionError $r10, $r11;
        org.apache.lucene.util.packed.Direct8 $r8;
        int[] $r2;
        org.apache.lucene.util.packed.Direct64 $r3;
        int i0, i1, $i2, $i3, $i4, $i5, $i6;
        org.apache.lucene.util.packed.Packed64SingleBlock $r9;
        boolean $z0;
        org.apache.lucene.util.packed.PackedInts$Format $r1;
        float f0;
        org.apache.lucene.util.packed.Direct32 $r5;
        org.apache.lucene.util.packed.Packed16ThreeBlocks $r4;
        org.apache.lucene.util.packed.Direct16 $r7;
        org.apache.lucene.util.packed.Packed8ThreeBlocks $r6;
        org.apache.lucene.util.packed.Packed64 $r12;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        f0 := @parameter2: float;

        $z0 = <org.apache.lucene.util.packed.PackedInts: boolean $assertionsDisabled>;

        if $z0 != 0 goto label01;

        if i0 >= 0 goto label01;

        $r11 = new java.lang.AssertionError;

        specialinvoke $r11.<java.lang.AssertionError: void <init>()>();

        throw $r11;

     label01:
        $r0 = staticinvoke <org.apache.lucene.util.packed.PackedInts: org.apache.lucene.util.packed.PackedInts$FormatAndBits fastestFormatAndBits(int,int,float)>(i0, i1, f0);

        $r2 = <org.apache.lucene.util.packed.PackedInts$2: int[] $SwitchMap$org$apache$lucene$util$packed$PackedInts$Format>;

        $r1 = $r0.<org.apache.lucene.util.packed.PackedInts$FormatAndBits: org.apache.lucene.util.packed.PackedInts$Format format>;

        $i2 = virtualinvoke $r1.<org.apache.lucene.util.packed.PackedInts$Format: int ordinal()>();

        $i3 = $r2[$i2];

        lookupswitch($i3)
        {
            case 1: goto label02;
            case 2: goto label03;
            default: goto label11;
        };

     label02:
        $i5 = $r0.<org.apache.lucene.util.packed.PackedInts$FormatAndBits: int bitsPerValue>;

        $r9 = staticinvoke <org.apache.lucene.util.packed.Packed64SingleBlock: org.apache.lucene.util.packed.Packed64SingleBlock create(int,int)>(i0, $i5);

        return $r9;

     label03:
        $i4 = $r0.<org.apache.lucene.util.packed.PackedInts$FormatAndBits: int bitsPerValue>;

        lookupswitch($i4)
        {
            case 8: goto label04;
            case 16: goto label05;
            case 24: goto label08;
            case 32: goto label06;
            case 48: goto label09;
            case 64: goto label07;
            default: goto label10;
        };

     label04:
        $r8 = new org.apache.lucene.util.packed.Direct8;

        specialinvoke $r8.<org.apache.lucene.util.packed.Direct8: void <init>(int)>(i0);

        return $r8;

     label05:
        $r7 = new org.apache.lucene.util.packed.Direct16;

        specialinvoke $r7.<org.apache.lucene.util.packed.Direct16: void <init>(int)>(i0);

        return $r7;

     label06:
        $r5 = new org.apache.lucene.util.packed.Direct32;

        specialinvoke $r5.<org.apache.lucene.util.packed.Direct32: void <init>(int)>(i0);

        return $r5;

     label07:
        $r3 = new org.apache.lucene.util.packed.Direct64;

        specialinvoke $r3.<org.apache.lucene.util.packed.Direct64: void <init>(int)>(i0);

        return $r3;

     label08:
        if i0 > 715827882 goto label10;

        $r6 = new org.apache.lucene.util.packed.Packed8ThreeBlocks;

        specialinvoke $r6.<org.apache.lucene.util.packed.Packed8ThreeBlocks: void <init>(int)>(i0);

        return $r6;

     label09:
        if i0 > 715827882 goto label10;

        $r4 = new org.apache.lucene.util.packed.Packed16ThreeBlocks;

        specialinvoke $r4.<org.apache.lucene.util.packed.Packed16ThreeBlocks: void <init>(int)>(i0);

        return $r4;

     label10:
        $r12 = new org.apache.lucene.util.packed.Packed64;

        $i6 = $r0.<org.apache.lucene.util.packed.PackedInts$FormatAndBits: int bitsPerValue>;

        specialinvoke $r12.<org.apache.lucene.util.packed.Packed64: void <init>(int,int)>(i0, $i6);

        return $r12;

     label11:
        $r10 = new java.lang.AssertionError;

        specialinvoke $r10.<java.lang.AssertionError: void <init>()>();

        throw $r10;
    }

    public static org.apache.lucene.util.packed.PackedInts$Writer getWriterNoHeader(org.apache.lucene.store.DataOutput, org.apache.lucene.util.packed.PackedInts$Format, int, int, int)
    {
        org.apache.lucene.util.packed.PackedWriter $r0;
        org.apache.lucene.util.packed.PackedInts$Format r1;
        org.apache.lucene.store.DataOutput r2;
        int i0, i1, i2;

        r2 := @parameter0: org.apache.lucene.store.DataOutput;

        r1 := @parameter1: org.apache.lucene.util.packed.PackedInts$Format;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        $r0 = new org.apache.lucene.util.packed.PackedWriter;

        specialinvoke $r0.<org.apache.lucene.util.packed.PackedWriter: void <init>(org.apache.lucene.util.packed.PackedInts$Format,org.apache.lucene.store.DataOutput,int,int,int)>(r1, r2, i0, i1, i2);

        return $r0;
    }

    public static org.apache.lucene.util.packed.PackedInts$Writer getWriter(org.apache.lucene.store.DataOutput, int, int, float) throws java.io.IOException
    {
        org.apache.lucene.store.DataOutput r1;
        org.apache.lucene.util.packed.PackedInts$Format $r2;
        org.apache.lucene.util.packed.PackedInts$FormatAndBits $r0;
        java.lang.AssertionError $r4;
        int i0, i1, $i2;
        float f0;
        org.apache.lucene.util.packed.PackedInts$Writer $r3;
        boolean $z0;

        r1 := @parameter0: org.apache.lucene.store.DataOutput;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        f0 := @parameter3: float;

        $z0 = <org.apache.lucene.util.packed.PackedInts: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if i0 >= 0 goto label1;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label1:
        $r0 = staticinvoke <org.apache.lucene.util.packed.PackedInts: org.apache.lucene.util.packed.PackedInts$FormatAndBits fastestFormatAndBits(int,int,float)>(i0, i1, f0);

        $r2 = $r0.<org.apache.lucene.util.packed.PackedInts$FormatAndBits: org.apache.lucene.util.packed.PackedInts$Format format>;

        $i2 = $r0.<org.apache.lucene.util.packed.PackedInts$FormatAndBits: int bitsPerValue>;

        $r3 = staticinvoke <org.apache.lucene.util.packed.PackedInts: org.apache.lucene.util.packed.PackedInts$Writer getWriterNoHeader(org.apache.lucene.store.DataOutput,org.apache.lucene.util.packed.PackedInts$Format,int,int,int)>(r1, $r2, i0, $i2, 1024);

        virtualinvoke $r3.<org.apache.lucene.util.packed.PackedInts$Writer: void writeHeader()>();

        return $r3;
    }

    public static int bitsRequired(long)
    {
        long l0;
        java.lang.IllegalArgumentException $r7;
        byte $b1;
        int $i2, $i3, $i4, $i5;
        java.lang.StringBuilder $r2, $r3, $r4, $r6;
        java.lang.String $r5;

        l0 := @parameter0: long;

        $b1 = l0 cmp 0L;

        $i5 = (int) $b1;

        if $i5 >= 0 goto label1;

        $r7 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("maxValue must be non-negative (got: ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r7;

     label1:
        $i2 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(l0);

        $i3 = 64 - $i2;

        $i4 = staticinvoke <java.lang.Math: int max(int,int)>(1, $i3);

        return $i4;
    }

    public static long maxValue(int)
    {
        int i0;
        long $l1, $l2;

        i0 := @parameter0: int;

        if i0 != 64 goto label1;

        $l2 = 9223372036854775807L;

        goto label2;

     label1:
        $l1 = -1L << i0;

        $l2 = $l1 ^ -1L;

     label2:
        return $l2;
    }

    public static void copy(org.apache.lucene.util.packed.PackedInts$Reader, int, org.apache.lucene.util.packed.PackedInts$Mutable, int, int, int)
    {
        org.apache.lucene.util.packed.PackedInts$Mutable r0;
        boolean $z0, $z1, $z2, $z3;
        org.apache.lucene.util.packed.PackedInts$Reader r1;
        long $l12;
        java.lang.AssertionError $r2, $r3, $r4, $r5;
        long[] r6;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i13, $i14, $i15, $i16, $i17, i18, i19, i20, i21, i22;

        r1 := @parameter0: org.apache.lucene.util.packed.PackedInts$Reader;

        i18 := @parameter1: int;

        r0 := @parameter2: org.apache.lucene.util.packed.PackedInts$Mutable;

        i19 := @parameter3: int;

        i20 := @parameter4: int;

        i0 := @parameter5: int;

        $z0 = <org.apache.lucene.util.packed.PackedInts: boolean $assertionsDisabled>;

        if $z0 != 0 goto label01;

        $i16 = i18 + i20;

        $i17 = interfaceinvoke r1.<org.apache.lucene.util.packed.PackedInts$Reader: int size()>();

        if $i16 <= $i17 goto label01;

        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();

        throw $r5;

     label01:
        $z1 = <org.apache.lucene.util.packed.PackedInts: boolean $assertionsDisabled>;

        if $z1 != 0 goto label02;

        $i13 = i19 + i20;

        $i14 = interfaceinvoke r0.<org.apache.lucene.util.packed.PackedInts$Mutable: int size()>();

        if $i13 <= $i14 goto label02;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label02:
        $i15 = i0 >>> 3;

        if $i15 != 0 goto label05;

        i21 = 0;

     label03:
        if i21 >= i20 goto label04;

        $i10 = i19;

        i19 = i19 + 1;

        $i11 = i18;

        i18 = i18 + 1;

        $l12 = interfaceinvoke r1.<org.apache.lucene.util.packed.PackedInts$Reader: long get(int)>($i11);

        interfaceinvoke r0.<org.apache.lucene.util.packed.PackedInts$Mutable: void set(int,long)>($i10, $l12);

        i21 = i21 + 1;

        goto label03;

     label04:
        goto label11;

     label05:
        $i1 = staticinvoke <java.lang.Math: int min(int,int)>($i15, i20);

        r6 = newarray (long)[$i1];

        i22 = 0;

     label06:
        if i20 <= 0 goto label10;

        $i3 = lengthof r6;

        $i4 = $i3 - i22;

        $i5 = staticinvoke <java.lang.Math: int min(int,int)>(i20, $i4);

        $i6 = interfaceinvoke r1.<org.apache.lucene.util.packed.PackedInts$Reader: int get(int,long[],int,int)>(i18, r6, i22, $i5);

        $z2 = <org.apache.lucene.util.packed.PackedInts: boolean $assertionsDisabled>;

        if $z2 != 0 goto label07;

        if $i6 > 0 goto label07;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label07:
        i18 = i18 + $i6;

        i20 = i20 - $i6;

        $i9 = i22 + $i6;

        $i7 = interfaceinvoke r0.<org.apache.lucene.util.packed.PackedInts$Mutable: int set(int,long[],int,int)>(i19, r6, 0, $i9);

        $z3 = <org.apache.lucene.util.packed.PackedInts: boolean $assertionsDisabled>;

        if $z3 != 0 goto label08;

        if $i7 > 0 goto label08;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label08:
        i19 = i19 + $i7;

        if $i7 >= $i9 goto label09;

        $i8 = $i9 - $i7;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r6, $i7, r6, 0, $i8);

     label09:
        i22 = $i9 - $i7;

        goto label06;

     label10:
        if i22 <= 0 goto label11;

        $i2 = interfaceinvoke r0.<org.apache.lucene.util.packed.PackedInts$Mutable: int set(int,long[],int,int)>(i19, r6, 0, i22);

        i19 = i19 + $i2;

        i22 = i22 - $i2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r6, $i2, r6, 0, i22);

        goto label10;

     label11:
        return;
    }

    public static org.apache.lucene.util.packed.PackedInts$Header readHeader(org.apache.lucene.store.DataInput) throws java.io.IOException
    {
        org.apache.lucene.store.DataInput r0;
        org.apache.lucene.util.packed.PackedInts$Format $r1;
        java.lang.AssertionError $r3;
        int $i0, $i1, $i2, $i3;
        java.lang.StringBuilder $r4, $r5, $r6;
        org.apache.lucene.util.packed.PackedInts$Header $r2;
        java.lang.String $r7;
        boolean $z0;

        r0 := @parameter0: org.apache.lucene.store.DataInput;

        $i0 = staticinvoke <org.apache.lucene.codecs.CodecUtil: int checkHeader(org.apache.lucene.store.DataInput,java.lang.String,int,int)>(r0, "PackedInts", 0, 1);

        $i1 = virtualinvoke r0.<org.apache.lucene.store.DataInput: int readVInt()>();

        $z0 = <org.apache.lucene.util.packed.PackedInts: boolean $assertionsDisabled>;

        if $z0 != 0 goto label2;

        if $i1 <= 0 goto label1;

        if $i1 <= 64 goto label2;

     label1:
        $r3 = new java.lang.AssertionError;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("bitsPerValue=");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.AssertionError: void <init>(java.lang.Object)>($r7);

        throw $r3;

     label2:
        $i2 = virtualinvoke r0.<org.apache.lucene.store.DataInput: int readVInt()>();

        $i3 = virtualinvoke r0.<org.apache.lucene.store.DataInput: int readVInt()>();

        $r1 = staticinvoke <org.apache.lucene.util.packed.PackedInts$Format: org.apache.lucene.util.packed.PackedInts$Format byId(int)>($i3);

        $r2 = new org.apache.lucene.util.packed.PackedInts$Header;

        specialinvoke $r2.<org.apache.lucene.util.packed.PackedInts$Header: void <init>(org.apache.lucene.util.packed.PackedInts$Format,int,int,int)>($r1, $i2, $i1, $i0);

        return $r2;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        <org.apache.lucene.util.packed.PackedInts: int VERSION_CURRENT> = 1;

        <org.apache.lucene.util.packed.PackedInts: int VERSION_BYTE_ALIGNED> = 1;

        <org.apache.lucene.util.packed.PackedInts: int VERSION_START> = 0;

        <org.apache.lucene.util.packed.PackedInts: java.lang.String CODEC_NAME> = "PackedInts";

        <org.apache.lucene.util.packed.PackedInts: int DEFAULT_BUFFER_SIZE> = 1024;

        <org.apache.lucene.util.packed.PackedInts: float COMPACT> = 0.0F;

        <org.apache.lucene.util.packed.PackedInts: float DEFAULT> = 0.2F;

        <org.apache.lucene.util.packed.PackedInts: float FAST> = 0.5F;

        <org.apache.lucene.util.packed.PackedInts: float FASTEST> = 7.0F;

        $r0 = class "Lorg/apache/lucene/util/packed/PackedInts;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.lucene.util.packed.PackedInts: boolean $assertionsDisabled> = $z1;

        return;
    }
}
