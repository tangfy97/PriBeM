public class org.eclipse.jdt.internal.compiler.ast.SingleTypeReference extends org.eclipse.jdt.internal.compiler.ast.TypeReference
{
    public char[] token;

    public void <init>(char[], long)
    {
        int $i2, $i4;
        char[] r1;
        long l0, $l1, $l3;
        org.eclipse.jdt.internal.compiler.ast.SingleTypeReference r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.SingleTypeReference;

        r1 := @parameter0: char[];

        l0 := @parameter1: long;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.ast.TypeReference: void <init>()>();

        r0.<org.eclipse.jdt.internal.compiler.ast.SingleTypeReference: char[] token> = r1;

        $l1 = l0 >>> 32;

        $i2 = (int) $l1;

        r0.<org.eclipse.jdt.internal.compiler.ast.SingleTypeReference: int sourceStart> = $i2;

        $l3 = l0 & 4294967295L;

        $i4 = (int) $l3;

        r0.<org.eclipse.jdt.internal.compiler.ast.SingleTypeReference: int sourceEnd> = $i4;

        return;
    }

    public org.eclipse.jdt.internal.compiler.ast.TypeReference copyDims(int)
    {
        org.eclipse.jdt.internal.compiler.ast.ArrayTypeReference $r0;
        long $l2, $l4, $l5, $l6;
        int i0, $i1, $i3;
        char[] $r2;
        org.eclipse.jdt.internal.compiler.ast.SingleTypeReference r1;

        r1 := @this: org.eclipse.jdt.internal.compiler.ast.SingleTypeReference;

        i0 := @parameter0: int;

        $r0 = new org.eclipse.jdt.internal.compiler.ast.ArrayTypeReference;

        $r2 = r1.<org.eclipse.jdt.internal.compiler.ast.SingleTypeReference: char[] token>;

        $i1 = r1.<org.eclipse.jdt.internal.compiler.ast.SingleTypeReference: int sourceStart>;

        $l2 = (long) $i1;

        $l5 = $l2 << 32;

        $i3 = r1.<org.eclipse.jdt.internal.compiler.ast.SingleTypeReference: int sourceEnd>;

        $l4 = (long) $i3;

        $l6 = $l5 + $l4;

        specialinvoke $r0.<org.eclipse.jdt.internal.compiler.ast.ArrayTypeReference: void <init>(char[],int,long)>($r2, i0, $l6);

        return $r0;
    }

    public char[] getLastToken()
    {
        char[] $r1;
        org.eclipse.jdt.internal.compiler.ast.SingleTypeReference r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.SingleTypeReference;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.ast.SingleTypeReference: char[] token>;

        return $r1;
    }

    protected org.eclipse.jdt.internal.compiler.lookup.TypeBinding getTypeBinding(org.eclipse.jdt.internal.compiler.lookup.Scope)
    {
        org.eclipse.jdt.internal.compiler.lookup.Scope r2;
        org.eclipse.jdt.internal.compiler.lookup.ClassScope $r7;
        org.eclipse.jdt.internal.compiler.lookup.TypeBinding $r1, $r4, $r5, $r6, $r8, $r9;
        int $i0;
        char[] $r3;
        org.eclipse.jdt.internal.compiler.ast.SingleTypeReference r0;
        boolean $z0, $z1;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.SingleTypeReference;

        r2 := @parameter0: org.eclipse.jdt.internal.compiler.lookup.Scope;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.ast.SingleTypeReference: org.eclipse.jdt.internal.compiler.lookup.TypeBinding resolvedType>;

        if $r1 == null goto label1;

        $r8 = r0.<org.eclipse.jdt.internal.compiler.ast.SingleTypeReference: org.eclipse.jdt.internal.compiler.lookup.TypeBinding resolvedType>;

        return $r8;

     label1:
        $r3 = r0.<org.eclipse.jdt.internal.compiler.ast.SingleTypeReference: char[] token>;

        $r4 = virtualinvoke r2.<org.eclipse.jdt.internal.compiler.lookup.Scope: org.eclipse.jdt.internal.compiler.lookup.TypeBinding getType(char[])>($r3);

        r0.<org.eclipse.jdt.internal.compiler.ast.SingleTypeReference: org.eclipse.jdt.internal.compiler.lookup.TypeBinding resolvedType> = $r4;

        $i0 = r2.<org.eclipse.jdt.internal.compiler.lookup.Scope: int kind>;

        if $i0 != 3 goto label2;

        $r5 = r0.<org.eclipse.jdt.internal.compiler.ast.SingleTypeReference: org.eclipse.jdt.internal.compiler.lookup.TypeBinding resolvedType>;

        $z0 = virtualinvoke $r5.<org.eclipse.jdt.internal.compiler.lookup.TypeBinding: boolean isValidBinding()>();

        if $z0 == 0 goto label2;

        $r7 = (org.eclipse.jdt.internal.compiler.lookup.ClassScope) r2;

        $r6 = r0.<org.eclipse.jdt.internal.compiler.ast.SingleTypeReference: org.eclipse.jdt.internal.compiler.lookup.TypeBinding resolvedType>;

        $z1 = virtualinvoke $r7.<org.eclipse.jdt.internal.compiler.lookup.ClassScope: boolean detectHierarchyCycle(org.eclipse.jdt.internal.compiler.lookup.TypeBinding,org.eclipse.jdt.internal.compiler.ast.TypeReference)>($r6, r0);

        if $z1 == 0 goto label2;

        return null;

     label2:
        $r9 = r0.<org.eclipse.jdt.internal.compiler.ast.SingleTypeReference: org.eclipse.jdt.internal.compiler.lookup.TypeBinding resolvedType>;

        return $r9;
    }

    public char[][] getTypeName()
    {
        char[] $r2;
        char[][] $r0;
        org.eclipse.jdt.internal.compiler.ast.SingleTypeReference r1;

        r1 := @this: org.eclipse.jdt.internal.compiler.ast.SingleTypeReference;

        $r0 = newarray (char[])[1];

        $r2 = r1.<org.eclipse.jdt.internal.compiler.ast.SingleTypeReference: char[] token>;

        $r0[0] = $r2;

        return $r0;
    }

    public java.lang.StringBuffer printExpression(int, java.lang.StringBuffer)
    {
        java.lang.StringBuffer r0, $r3;
        int i0;
        char[] $r2;
        org.eclipse.jdt.internal.compiler.ast.SingleTypeReference r1;

        r1 := @this: org.eclipse.jdt.internal.compiler.ast.SingleTypeReference;

        i0 := @parameter0: int;

        r0 := @parameter1: java.lang.StringBuffer;

        $r2 = r1.<org.eclipse.jdt.internal.compiler.ast.SingleTypeReference: char[] token>;

        $r3 = virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char[])>($r2);

        return $r3;
    }

    public org.eclipse.jdt.internal.compiler.lookup.TypeBinding resolveTypeEnclosing(org.eclipse.jdt.internal.compiler.lookup.BlockScope, org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding)
    {
        org.eclipse.jdt.internal.compiler.lookup.BlockScope r1;
        org.eclipse.jdt.internal.compiler.problem.ProblemReporter $r8, $r9, $r10;
        org.eclipse.jdt.internal.compiler.lookup.TypeBinding $r6, $r12, r13;
        int $i0, $i1, $i2, $i4;
        org.eclipse.jdt.internal.compiler.ast.SingleTypeReference r0;
        boolean $z0, $z1, $z2, z3;
        org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment $r5;
        org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding r2, $r4, $r11;
        char[] $r3;
        org.eclipse.jdt.internal.compiler.impl.CompilerOptions $r7;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.SingleTypeReference;

        r1 := @parameter0: org.eclipse.jdt.internal.compiler.lookup.BlockScope;

        r2 := @parameter1: org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding;

        $r3 = r0.<org.eclipse.jdt.internal.compiler.ast.SingleTypeReference: char[] token>;

        $r4 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.lookup.BlockScope: org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding getMemberType(char[],org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding)>($r3, r2);

        r0.<org.eclipse.jdt.internal.compiler.ast.SingleTypeReference: org.eclipse.jdt.internal.compiler.lookup.TypeBinding resolvedType> = $r4;

        r13 = $r4;

        z3 = 0;

        $z0 = virtualinvoke $r4.<org.eclipse.jdt.internal.compiler.lookup.TypeBinding: boolean isValidBinding()>();

        if $z0 != 0 goto label1;

        z3 = 1;

        $r10 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.lookup.BlockScope: org.eclipse.jdt.internal.compiler.problem.ProblemReporter problemReporter()>();

        virtualinvoke $r10.<org.eclipse.jdt.internal.compiler.problem.ProblemReporter: void invalidEnclosingType(org.eclipse.jdt.internal.compiler.ast.Expression,org.eclipse.jdt.internal.compiler.lookup.TypeBinding,org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding)>(r0, $r4, r2);

        $r11 = (org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding) $r4;

        $r12 = virtualinvoke $r11.<org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding: org.eclipse.jdt.internal.compiler.lookup.TypeBinding closestMatch()>();

        r13 = $r12;

        if $r12 != null goto label1;

        return null;

     label1:
        $z1 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.ast.SingleTypeReference: boolean isTypeUseDeprecated(org.eclipse.jdt.internal.compiler.lookup.TypeBinding,org.eclipse.jdt.internal.compiler.lookup.Scope)>(r13, r1);

        if $z1 == 0 goto label2;

        $r9 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.lookup.BlockScope: org.eclipse.jdt.internal.compiler.problem.ProblemReporter problemReporter()>();

        virtualinvoke $r9.<org.eclipse.jdt.internal.compiler.problem.ProblemReporter: void deprecatedType(org.eclipse.jdt.internal.compiler.lookup.TypeBinding,org.eclipse.jdt.internal.compiler.ast.ASTNode)>(r13, r0);

     label2:
        $r5 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.lookup.BlockScope: org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment environment()>();

        $r6 = virtualinvoke $r5.<org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment: org.eclipse.jdt.internal.compiler.lookup.TypeBinding convertToRawType(org.eclipse.jdt.internal.compiler.lookup.TypeBinding,boolean)>(r13, 0);

        $z2 = virtualinvoke $r6.<org.eclipse.jdt.internal.compiler.lookup.TypeBinding: boolean isRawType()>();

        if $z2 == 0 goto label3;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.ast.SingleTypeReference: int bits>;

        $i1 = $i0 & 1073741824;

        if $i1 != 0 goto label3;

        $r7 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.lookup.BlockScope: org.eclipse.jdt.internal.compiler.impl.CompilerOptions compilerOptions()>();

        $i2 = virtualinvoke $r7.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: int getSeverity(long)>(35184372088832L);

        $i4 = (int) -1;

        if $i2 == $i4 goto label3;

        $r8 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.lookup.BlockScope: org.eclipse.jdt.internal.compiler.problem.ProblemReporter problemReporter()>();

        virtualinvoke $r8.<org.eclipse.jdt.internal.compiler.problem.ProblemReporter: void rawTypeReference(org.eclipse.jdt.internal.compiler.ast.ASTNode,org.eclipse.jdt.internal.compiler.lookup.TypeBinding)>(r0, $r6);

     label3:
        if z3 == 0 goto label4;

        return $r6;

     label4:
        r0.<org.eclipse.jdt.internal.compiler.ast.SingleTypeReference: org.eclipse.jdt.internal.compiler.lookup.TypeBinding resolvedType> = $r6;

        return $r6;
    }

    public void traverse(org.eclipse.jdt.internal.compiler.ASTVisitor, org.eclipse.jdt.internal.compiler.lookup.BlockScope)
    {
        org.eclipse.jdt.internal.compiler.ASTVisitor r0;
        org.eclipse.jdt.internal.compiler.lookup.BlockScope r2;
        org.eclipse.jdt.internal.compiler.ast.SingleTypeReference r1;

        r1 := @this: org.eclipse.jdt.internal.compiler.ast.SingleTypeReference;

        r0 := @parameter0: org.eclipse.jdt.internal.compiler.ASTVisitor;

        r2 := @parameter1: org.eclipse.jdt.internal.compiler.lookup.BlockScope;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.ASTVisitor: boolean visit(org.eclipse.jdt.internal.compiler.ast.SingleTypeReference,org.eclipse.jdt.internal.compiler.lookup.BlockScope)>(r1, r2);

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.ASTVisitor: void endVisit(org.eclipse.jdt.internal.compiler.ast.SingleTypeReference,org.eclipse.jdt.internal.compiler.lookup.BlockScope)>(r1, r2);

        return;
    }

    public void traverse(org.eclipse.jdt.internal.compiler.ASTVisitor, org.eclipse.jdt.internal.compiler.lookup.ClassScope)
    {
        org.eclipse.jdt.internal.compiler.ASTVisitor r0;
        org.eclipse.jdt.internal.compiler.lookup.ClassScope r2;
        org.eclipse.jdt.internal.compiler.ast.SingleTypeReference r1;

        r1 := @this: org.eclipse.jdt.internal.compiler.ast.SingleTypeReference;

        r0 := @parameter0: org.eclipse.jdt.internal.compiler.ASTVisitor;

        r2 := @parameter1: org.eclipse.jdt.internal.compiler.lookup.ClassScope;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.ASTVisitor: boolean visit(org.eclipse.jdt.internal.compiler.ast.SingleTypeReference,org.eclipse.jdt.internal.compiler.lookup.ClassScope)>(r1, r2);

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.ASTVisitor: void endVisit(org.eclipse.jdt.internal.compiler.ast.SingleTypeReference,org.eclipse.jdt.internal.compiler.lookup.ClassScope)>(r1, r2);

        return;
    }
}
