public class org.apache.poi.xssf.extractor.XSSFExportToXml extends java.lang.Object implements java.util.Comparator
{
    private org.apache.poi.xssf.usermodel.XSSFMap map;

    public void <init>(org.apache.poi.xssf.usermodel.XSSFMap)
    {
        org.apache.poi.xssf.extractor.XSSFExportToXml r0;
        org.apache.poi.xssf.usermodel.XSSFMap r1;

        r0 := @this: org.apache.poi.xssf.extractor.XSSFExportToXml;

        r1 := @parameter0: org.apache.poi.xssf.usermodel.XSSFMap;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.poi.xssf.extractor.XSSFExportToXml: org.apache.poi.xssf.usermodel.XSSFMap map> = r1;

        return;
    }

    public void exportToXML(java.io.OutputStream, boolean) throws org.xml.sax.SAXException, javax.xml.parsers.ParserConfigurationException, javax.xml.transform.TransformerException
    {
        org.apache.poi.xssf.extractor.XSSFExportToXml r0;
        java.io.OutputStream r1;
        boolean z0;

        r0 := @this: org.apache.poi.xssf.extractor.XSSFExportToXml;

        r1 := @parameter0: java.io.OutputStream;

        z0 := @parameter1: boolean;

        virtualinvoke r0.<org.apache.poi.xssf.extractor.XSSFExportToXml: void exportToXML(java.io.OutputStream,java.lang.String,boolean)>(r1, "UTF-8", z0);

        return;
    }

    public void exportToXML(java.io.OutputStream, java.lang.String, boolean) throws org.xml.sax.SAXException, javax.xml.parsers.ParserConfigurationException, javax.xml.transform.TransformerException
    {
        javax.xml.transform.stream.StreamResult $r63;
        java.util.Vector $r60;
        org.w3c.dom.Document $r8;
        org.apache.poi.xssf.extractor.XSSFExportToXml r0;
        org.apache.poi.xssf.usermodel.XSSFMap $r1, $r3, $r5;
        javax.xml.transform.dom.DOMSource $r64;
        short $s2, $s3;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTMap $r6;
        java.lang.String $r7, r17, $r29, $r37, $r44, $r45, $r49, $r51, $r52, $r53, r57;
        org.apache.poi.xssf.usermodel.XSSFSheet $r25;
        javax.xml.transform.TransformerFactory $r15;
        javax.xml.transform.Transformer $r16;
        boolean $z0, $z1, $z2, z3, $z4, $z5, $z6, z7;
        java.util.List $r2, $r4, $r24;
        org.apache.poi.xssf.usermodel.helpers.XSSFXmlColumnPr r36;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.STXmlDataType$Enum $r39, $r43;
        java.util.HashMap $r61, $r62;
        org.apache.poi.ss.util.CellReference $r26, $r27, $r32, $r33;
        org.apache.poi.xssf.usermodel.XSSFRow $r28;
        org.apache.poi.xssf.usermodel.helpers.XSSFSingleXmlCell r55, r58;
        org.w3c.dom.Node $r30, $r31, $r38, $r41, $r42, $r46, $r47;
        int $i0, $i1, $i4, i5, i6, i7, $i8, $i9, $i10;
        java.io.OutputStream r19;
        java.util.Iterator $r12, $r13, $r14;
        org.apache.poi.xssf.usermodel.XSSFTable r56, r59;
        org.w3c.dom.Element r54;
        java.lang.Object $r21, $r22, $r23, $r35, $r48, $r50;
        org.apache.poi.xssf.usermodel.XSSFCell $r34, $r40;

        r0 := @this: org.apache.poi.xssf.extractor.XSSFExportToXml;

        r19 := @parameter0: java.io.OutputStream;

        r17 := @parameter1: java.lang.String;

        z3 := @parameter2: boolean;

        $r1 = r0.<org.apache.poi.xssf.extractor.XSSFExportToXml: org.apache.poi.xssf.usermodel.XSSFMap map>;

        $r2 = virtualinvoke $r1.<org.apache.poi.xssf.usermodel.XSSFMap: java.util.List getRelatedSingleXMLCell()>();

        $r3 = r0.<org.apache.poi.xssf.extractor.XSSFExportToXml: org.apache.poi.xssf.usermodel.XSSFMap map>;

        $r4 = virtualinvoke $r3.<org.apache.poi.xssf.usermodel.XSSFMap: java.util.List getRelatedTables()>();

        $r5 = r0.<org.apache.poi.xssf.extractor.XSSFExportToXml: org.apache.poi.xssf.usermodel.XSSFMap map>;

        $r6 = virtualinvoke $r5.<org.apache.poi.xssf.usermodel.XSSFMap: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTMap getCtMap()>();

        $r7 = interfaceinvoke $r6.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTMap: java.lang.String getRootElement()>();

        $r8 = staticinvoke <org.apache.poi.util.DocumentHelper: org.w3c.dom.Document createDocument()>();

        $z0 = specialinvoke r0.<org.apache.poi.xssf.extractor.XSSFExportToXml: boolean isNamespaceDeclared()>();

        if $z0 == 0 goto label01;

        $r53 = specialinvoke r0.<org.apache.poi.xssf.extractor.XSSFExportToXml: java.lang.String getNamespace()>();

        r54 = interfaceinvoke $r8.<org.w3c.dom.Document: org.w3c.dom.Element createElementNS(java.lang.String,java.lang.String)>($r53, $r7);

        goto label02;

     label01:
        r54 = interfaceinvoke $r8.<org.w3c.dom.Document: org.w3c.dom.Element createElementNS(java.lang.String,java.lang.String)>("", $r7);

     label02:
        interfaceinvoke $r8.<org.w3c.dom.Document: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>(r54);

        $r60 = new java.util.Vector;

        specialinvoke $r60.<java.util.Vector: void <init>()>();

        $r61 = new java.util.HashMap;

        specialinvoke $r61.<java.util.HashMap: void <init>()>();

        $r62 = new java.util.HashMap;

        specialinvoke $r62.<java.util.HashMap: void <init>()>();

        $r12 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label03:
        $z6 = interfaceinvoke $r12.<java.util.Iterator: boolean hasNext()>();

        if $z6 == 0 goto label04;

        $r50 = interfaceinvoke $r12.<java.util.Iterator: java.lang.Object next()>();

        r55 = (org.apache.poi.xssf.usermodel.helpers.XSSFSingleXmlCell) $r50;

        $r51 = virtualinvoke r55.<org.apache.poi.xssf.usermodel.helpers.XSSFSingleXmlCell: java.lang.String getXpath()>();

        interfaceinvoke $r60.<java.util.List: boolean add(java.lang.Object)>($r51);

        $r52 = virtualinvoke r55.<org.apache.poi.xssf.usermodel.helpers.XSSFSingleXmlCell: java.lang.String getXpath()>();

        interfaceinvoke $r61.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r52, r55);

        goto label03;

     label04:
        $r13 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label05:
        $z1 = interfaceinvoke $r13.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label06;

        $r48 = interfaceinvoke $r13.<java.util.Iterator: java.lang.Object next()>();

        r56 = (org.apache.poi.xssf.usermodel.XSSFTable) $r48;

        $r49 = virtualinvoke r56.<org.apache.poi.xssf.usermodel.XSSFTable: java.lang.String getCommonXpath()>();

        interfaceinvoke $r60.<java.util.List: boolean add(java.lang.Object)>($r49);

        interfaceinvoke $r62.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r49, r56);

        goto label05;

     label06:
        staticinvoke <java.util.Collections: void sort(java.util.List,java.util.Comparator)>($r60, r0);

        $r14 = interfaceinvoke $r60.<java.util.List: java.util.Iterator iterator()>();

     label07:
        $z2 = interfaceinvoke $r14.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label14;

        $r21 = interfaceinvoke $r14.<java.util.Iterator: java.lang.Object next()>();

        r57 = (java.lang.String) $r21;

        $r22 = interfaceinvoke $r61.<java.util.Map: java.lang.Object get(java.lang.Object)>(r57);

        r58 = (org.apache.poi.xssf.usermodel.helpers.XSSFSingleXmlCell) $r22;

        $r23 = interfaceinvoke $r62.<java.util.Map: java.lang.Object get(java.lang.Object)>(r57);

        r59 = (org.apache.poi.xssf.usermodel.XSSFTable) $r23;

        $z4 = virtualinvoke r57.<java.lang.String: boolean matches(java.lang.String)>(".*\\[.*");

        if $z4 != 0 goto label13;

        if r58 == null goto label08;

        $r40 = virtualinvoke r58.<org.apache.poi.xssf.usermodel.helpers.XSSFSingleXmlCell: org.apache.poi.xssf.usermodel.XSSFCell getReferencedCell()>();

        if $r40 == null goto label08;

        $r41 = interfaceinvoke $r8.<org.w3c.dom.Document: org.w3c.dom.Node getFirstChild()>();

        $r42 = specialinvoke r0.<org.apache.poi.xssf.extractor.XSSFExportToXml: org.w3c.dom.Node getNodeByXPath(java.lang.String,org.w3c.dom.Node,org.w3c.dom.Document,boolean)>(r57, $r41, $r8, 0);

        $r43 = virtualinvoke r58.<org.apache.poi.xssf.usermodel.helpers.XSSFSingleXmlCell: org.openxmlformats.schemas.spreadsheetml.x2006.main.STXmlDataType$Enum getXmlDataType()>();

        specialinvoke r0.<org.apache.poi.xssf.extractor.XSSFExportToXml: void mapCellOnNode(org.apache.poi.xssf.usermodel.XSSFCell,org.w3c.dom.Node,org.openxmlformats.schemas.spreadsheetml.x2006.main.STXmlDataType$Enum)>($r40, $r42, $r43);

        $r44 = "";

        $r45 = interfaceinvoke $r42.<org.w3c.dom.Node: java.lang.String getTextContent()>();

        $z5 = virtualinvoke $r44.<java.lang.String: boolean equals(java.lang.Object)>($r45);

        if $z5 == 0 goto label08;

        $r46 = interfaceinvoke $r42.<org.w3c.dom.Node: org.w3c.dom.Node getParentNode()>();

        if $r46 == null goto label08;

        $r47 = interfaceinvoke $r42.<org.w3c.dom.Node: org.w3c.dom.Node getParentNode()>();

        interfaceinvoke $r47.<org.w3c.dom.Node: org.w3c.dom.Node removeChild(org.w3c.dom.Node)>($r42);

     label08:
        if r59 == null goto label13;

        $r24 = virtualinvoke r59.<org.apache.poi.xssf.usermodel.XSSFTable: java.util.List getXmlColumnPrs()>();

        $r25 = virtualinvoke r59.<org.apache.poi.xssf.usermodel.XSSFTable: org.apache.poi.xssf.usermodel.XSSFSheet getXSSFSheet()>();

        $r26 = virtualinvoke r59.<org.apache.poi.xssf.usermodel.XSSFTable: org.apache.poi.ss.util.CellReference getStartCellReference()>();

        $i0 = virtualinvoke $r26.<org.apache.poi.ss.util.CellReference: int getRow()>();

        i5 = $i0 + 1;

        $r27 = virtualinvoke r59.<org.apache.poi.xssf.usermodel.XSSFTable: org.apache.poi.ss.util.CellReference getEndCellReference()>();

        $i1 = virtualinvoke $r27.<org.apache.poi.ss.util.CellReference: int getRow()>();

        i6 = i5;

     label09:
        if i6 > $i1 goto label13;

        $r28 = virtualinvoke $r25.<org.apache.poi.xssf.usermodel.XSSFSheet: org.apache.poi.xssf.usermodel.XSSFRow getRow(int)>(i6);

        $r29 = virtualinvoke r59.<org.apache.poi.xssf.usermodel.XSSFTable: java.lang.String getCommonXpath()>();

        $r30 = interfaceinvoke $r8.<org.w3c.dom.Document: org.w3c.dom.Node getFirstChild()>();

        $r31 = specialinvoke r0.<org.apache.poi.xssf.extractor.XSSFExportToXml: org.w3c.dom.Node getNodeByXPath(java.lang.String,org.w3c.dom.Node,org.w3c.dom.Document,boolean)>($r29, $r30, $r8, 1);

        $r32 = virtualinvoke r59.<org.apache.poi.xssf.usermodel.XSSFTable: org.apache.poi.ss.util.CellReference getStartCellReference()>();

        $s2 = virtualinvoke $r32.<org.apache.poi.ss.util.CellReference: short getCol()>();

        $i8 = (int) $s2;

        i7 = $i8;

     label10:
        $r33 = virtualinvoke r59.<org.apache.poi.xssf.usermodel.XSSFTable: org.apache.poi.ss.util.CellReference getEndCellReference()>();

        $s3 = virtualinvoke $r33.<org.apache.poi.ss.util.CellReference: short getCol()>();

        $i9 = (int) $s3;

        if i7 > $i9 goto label12;

        $r34 = virtualinvoke $r28.<org.apache.poi.xssf.usermodel.XSSFRow: org.apache.poi.xssf.usermodel.XSSFCell getCell(int)>(i7);

        if $r34 == null goto label11;

        $i10 = (int) $s2;

        $i4 = i7 - $i10;

        $r35 = interfaceinvoke $r24.<java.util.List: java.lang.Object get(int)>($i4);

        r36 = (org.apache.poi.xssf.usermodel.helpers.XSSFXmlColumnPr) $r35;

        $r37 = virtualinvoke r36.<org.apache.poi.xssf.usermodel.helpers.XSSFXmlColumnPr: java.lang.String getLocalXPath()>();

        $r38 = specialinvoke r0.<org.apache.poi.xssf.extractor.XSSFExportToXml: org.w3c.dom.Node getNodeByXPath(java.lang.String,org.w3c.dom.Node,org.w3c.dom.Document,boolean)>($r37, $r31, $r8, 0);

        $r39 = virtualinvoke r36.<org.apache.poi.xssf.usermodel.helpers.XSSFXmlColumnPr: org.openxmlformats.schemas.spreadsheetml.x2006.main.STXmlDataType$Enum getXmlDataType()>();

        specialinvoke r0.<org.apache.poi.xssf.extractor.XSSFExportToXml: void mapCellOnNode(org.apache.poi.xssf.usermodel.XSSFCell,org.w3c.dom.Node,org.openxmlformats.schemas.spreadsheetml.x2006.main.STXmlDataType$Enum)>($r34, $r38, $r39);

     label11:
        i7 = i7 + 1;

        goto label10;

     label12:
        i6 = i6 + 1;

        goto label09;

     label13:
        goto label07;

     label14:
        z7 = 1;

        if z3 == 0 goto label15;

        z7 = specialinvoke r0.<org.apache.poi.xssf.extractor.XSSFExportToXml: boolean isValid(org.w3c.dom.Document)>($r8);

     label15:
        if z7 == 0 goto label16;

        $r15 = staticinvoke <javax.xml.transform.TransformerFactory: javax.xml.transform.TransformerFactory newInstance()>();

        $r16 = virtualinvoke $r15.<javax.xml.transform.TransformerFactory: javax.xml.transform.Transformer newTransformer()>();

        virtualinvoke $r16.<javax.xml.transform.Transformer: void setOutputProperty(java.lang.String,java.lang.String)>("omit-xml-declaration", "yes");

        virtualinvoke $r16.<javax.xml.transform.Transformer: void setOutputProperty(java.lang.String,java.lang.String)>("indent", "yes");

        virtualinvoke $r16.<javax.xml.transform.Transformer: void setOutputProperty(java.lang.String,java.lang.String)>("encoding", r17);

        $r63 = new javax.xml.transform.stream.StreamResult;

        specialinvoke $r63.<javax.xml.transform.stream.StreamResult: void <init>(java.io.OutputStream)>(r19);

        $r64 = new javax.xml.transform.dom.DOMSource;

        specialinvoke $r64.<javax.xml.transform.dom.DOMSource: void <init>(org.w3c.dom.Node)>($r8);

        virtualinvoke $r16.<javax.xml.transform.Transformer: void transform(javax.xml.transform.Source,javax.xml.transform.Result)>($r64, $r63);

     label16:
        return;
    }

    private boolean isValid(org.w3c.dom.Document) throws org.xml.sax.SAXException
    {
        org.apache.poi.xssf.extractor.XSSFExportToXml r2;
        javax.xml.transform.dom.DOMSource $r1, $r7;
        org.apache.poi.xssf.usermodel.XSSFMap $r3;
        javax.xml.validation.SchemaFactory $r0;
        javax.xml.validation.Validator $r6;
        java.io.IOException $r9;
        javax.xml.validation.Schema $r5;
        org.w3c.dom.Document r8;
        org.w3c.dom.Node $r4;

        r2 := @this: org.apache.poi.xssf.extractor.XSSFExportToXml;

        r8 := @parameter0: org.w3c.dom.Document;

     label1:
        $r0 = staticinvoke <javax.xml.validation.SchemaFactory: javax.xml.validation.SchemaFactory newInstance(java.lang.String)>("http://www.w3.org/2001/XMLSchema");

        $r1 = new javax.xml.transform.dom.DOMSource;

        $r3 = r2.<org.apache.poi.xssf.extractor.XSSFExportToXml: org.apache.poi.xssf.usermodel.XSSFMap map>;

        $r4 = virtualinvoke $r3.<org.apache.poi.xssf.usermodel.XSSFMap: org.w3c.dom.Node getSchema()>();

        specialinvoke $r1.<javax.xml.transform.dom.DOMSource: void <init>(org.w3c.dom.Node)>($r4);

        $r5 = virtualinvoke $r0.<javax.xml.validation.SchemaFactory: javax.xml.validation.Schema newSchema(javax.xml.transform.Source)>($r1);

        $r6 = virtualinvoke $r5.<javax.xml.validation.Schema: javax.xml.validation.Validator newValidator()>();

        $r7 = new javax.xml.transform.dom.DOMSource;

        specialinvoke $r7.<javax.xml.transform.dom.DOMSource: void <init>(org.w3c.dom.Node)>(r8);

        virtualinvoke $r6.<javax.xml.validation.Validator: void validate(javax.xml.transform.Source)>($r7);

     label2:
        return 1;

     label3:
        $r9 := @caughtexception;

        virtualinvoke $r9.<java.io.IOException: void printStackTrace()>();

        return 0;

        catch java.io.IOException from label1 to label2 with label3;
    }

    private void mapCellOnNode(org.apache.poi.xssf.usermodel.XSSFCell, org.w3c.dom.Node, org.openxmlformats.schemas.spreadsheetml.x2006.main.STXmlDataType$Enum)
    {
        org.openxmlformats.schemas.spreadsheetml.x2006.main.STXmlDataType$Enum r14;
        org.w3c.dom.Node r1;
        int $i0, $i1;
        java.lang.String $r12, r15;
        boolean $z0, $z1, $z2, $z3;
        double $d0;
        org.apache.poi.xssf.extractor.XSSFExportToXml r9;
        org.w3c.dom.Element r2;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r7, $r8, $r10, $r11, $r13;
        org.apache.poi.xssf.usermodel.XSSFCell r0;

        r9 := @this: org.apache.poi.xssf.extractor.XSSFExportToXml;

        r0 := @parameter0: org.apache.poi.xssf.usermodel.XSSFCell;

        r1 := @parameter1: org.w3c.dom.Node;

        r14 := @parameter2: org.openxmlformats.schemas.spreadsheetml.x2006.main.STXmlDataType$Enum;

        r15 = "";

        $i0 = virtualinvoke r0.<org.apache.poi.xssf.usermodel.XSSFCell: int getCellType()>();

        tableswitch($i0)
        {
            case 0: goto label07;
            case 1: goto label01;
            case 2: goto label04;
            case 3: goto label09;
            case 4: goto label02;
            case 5: goto label03;
            default: goto label09;
        };

     label01:
        r15 = virtualinvoke r0.<org.apache.poi.xssf.usermodel.XSSFCell: java.lang.String getStringCellValue()>();

        goto label09;

     label02:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $z0 = virtualinvoke r0.<org.apache.poi.xssf.usermodel.XSSFCell: boolean getBooleanCellValue()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        r15 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label09;

     label03:
        r15 = virtualinvoke r0.<org.apache.poi.xssf.usermodel.XSSFCell: java.lang.String getErrorCellString()>();

        goto label09;

     label04:
        $i1 = virtualinvoke r0.<org.apache.poi.xssf.usermodel.XSSFCell: int getCachedFormulaResultType()>();

        if $i1 != 1 goto label05;

        r15 = virtualinvoke r0.<org.apache.poi.xssf.usermodel.XSSFCell: java.lang.String getStringCellValue()>();

        goto label09;

     label05:
        $z1 = staticinvoke <org.apache.poi.ss.usermodel.DateUtil: boolean isCellDateFormatted(org.apache.poi.ss.usermodel.Cell)>(r0);

        if $z1 == 0 goto label06;

        r15 = specialinvoke r9.<org.apache.poi.xssf.extractor.XSSFExportToXml: java.lang.String getFormattedDate(org.apache.poi.xssf.usermodel.XSSFCell)>(r0);

        goto label09;

     label06:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $d0 = virtualinvoke r0.<org.apache.poi.xssf.usermodel.XSSFCell: double getNumericCellValue()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d0);

        r15 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label09;

     label07:
        $z2 = staticinvoke <org.apache.poi.ss.usermodel.DateUtil: boolean isCellDateFormatted(org.apache.poi.ss.usermodel.Cell)>(r0);

        if $z2 == 0 goto label08;

        r15 = specialinvoke r9.<org.apache.poi.xssf.extractor.XSSFExportToXml: java.lang.String getFormattedDate(org.apache.poi.xssf.usermodel.XSSFCell)>(r0);

        goto label09;

     label08:
        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $r12 = virtualinvoke r0.<org.apache.poi.xssf.usermodel.XSSFCell: java.lang.String getRawValue()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label09;

     label09:
        $z3 = r1 instanceof org.w3c.dom.Element;

        if $z3 == 0 goto label10;

        r2 = (org.w3c.dom.Element) r1;

        interfaceinvoke r2.<org.w3c.dom.Element: void setTextContent(java.lang.String)>(r15);

        goto label11;

     label10:
        interfaceinvoke r1.<org.w3c.dom.Node: void setNodeValue(java.lang.String)>(r15);

     label11:
        return;
    }

    private java.lang.String removeNamespace(java.lang.String)
    {
        org.apache.poi.xssf.extractor.XSSFExportToXml r2;
        java.lang.String[] $r1;
        java.lang.String r0, $r3;
        boolean $z0;

        r2 := @this: org.apache.poi.xssf.extractor.XSSFExportToXml;

        r0 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<java.lang.String: boolean matches(java.lang.String)>(".*:.*");

        if $z0 == 0 goto label1;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String[] split(java.lang.String)>(":");

        $r3 = $r1[1];

        goto label2;

     label1:
        $r3 = r0;

     label2:
        return $r3;
    }

    private java.lang.String getFormattedDate(org.apache.poi.xssf.usermodel.XSSFCell)
    {
        org.apache.poi.xssf.extractor.XSSFExportToXml r4;
        java.util.Date $r2;
        java.text.SimpleDateFormat $r0;
        java.lang.String $r3;
        org.apache.poi.xssf.usermodel.XSSFCell r1;

        r4 := @this: org.apache.poi.xssf.extractor.XSSFExportToXml;

        r1 := @parameter0: org.apache.poi.xssf.usermodel.XSSFCell;

        $r0 = new java.text.SimpleDateFormat;

        specialinvoke $r0.<java.text.SimpleDateFormat: void <init>(java.lang.String)>("yyyy-MM-dd");

        $r2 = virtualinvoke r1.<org.apache.poi.xssf.usermodel.XSSFCell: java.util.Date getDateCellValue()>();

        $r3 = virtualinvoke $r0.<java.text.DateFormat: java.lang.String format(java.util.Date)>($r2);

        return $r3;
    }

    private org.w3c.dom.Node getNodeByXPath(java.lang.String, org.w3c.dom.Node, org.w3c.dom.Document, boolean)
    {
        java.lang.String[] $r1;
        org.w3c.dom.Document r6;
        org.w3c.dom.Node r2, r8, r9;
        int $i0, $i1, $i2, i3;
        java.lang.String r0, $r4, $r5;
        boolean $z0, z1;
        org.apache.poi.xssf.extractor.XSSFExportToXml r3;
        org.w3c.dom.NodeList $r7;

        r3 := @this: org.apache.poi.xssf.extractor.XSSFExportToXml;

        r0 := @parameter0: java.lang.String;

        r2 := @parameter1: org.w3c.dom.Node;

        r6 := @parameter2: org.w3c.dom.Document;

        z1 := @parameter3: boolean;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String[] split(java.lang.String)>("/");

        r8 = r2;

        i3 = 2;

     label1:
        $i0 = lengthof $r1;

        if i3 >= $i0 goto label7;

        $r4 = $r1[i3];

        $r5 = specialinvoke r3.<org.apache.poi.xssf.extractor.XSSFExportToXml: java.lang.String removeNamespace(java.lang.String)>($r4);

        $z0 = virtualinvoke $r5.<java.lang.String: boolean startsWith(java.lang.String)>("@");

        if $z0 != 0 goto label5;

        $r7 = interfaceinvoke r8.<org.w3c.dom.Node: org.w3c.dom.NodeList getChildNodes()>();

        r9 = null;

        if z1 == 0 goto label2;

        $i1 = lengthof $r1;

        $i2 = $i1 - 1;

        if i3 == $i2 goto label3;

     label2:
        r9 = specialinvoke r3.<org.apache.poi.xssf.extractor.XSSFExportToXml: org.w3c.dom.Node selectNode(java.lang.String,org.w3c.dom.NodeList)>($r5, $r7);

     label3:
        if r9 != null goto label4;

        r9 = specialinvoke r3.<org.apache.poi.xssf.extractor.XSSFExportToXml: org.w3c.dom.Node createElement(org.w3c.dom.Document,org.w3c.dom.Node,java.lang.String)>(r6, r8, $r5);

     label4:
        r8 = r9;

        goto label6;

     label5:
        r8 = specialinvoke r3.<org.apache.poi.xssf.extractor.XSSFExportToXml: org.w3c.dom.Node createAttribute(org.w3c.dom.Document,org.w3c.dom.Node,java.lang.String)>(r6, r8, $r5);

     label6:
        i3 = i3 + 1;

        goto label1;

     label7:
        return r8;
    }

    private org.w3c.dom.Node createAttribute(org.w3c.dom.Document, org.w3c.dom.Node, java.lang.String)
    {
        org.apache.poi.xssf.extractor.XSSFExportToXml r7;
        org.w3c.dom.Attr $r6;
        org.w3c.dom.Document r5;
        org.w3c.dom.Node r2, $r4, r8;
        org.w3c.dom.NamedNodeMap $r3;
        java.lang.String r0, $r1;

        r7 := @this: org.apache.poi.xssf.extractor.XSSFExportToXml;

        r5 := @parameter0: org.w3c.dom.Document;

        r2 := @parameter1: org.w3c.dom.Node;

        r0 := @parameter2: java.lang.String;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>(1);

        $r3 = interfaceinvoke r2.<org.w3c.dom.Node: org.w3c.dom.NamedNodeMap getAttributes()>();

        $r4 = interfaceinvoke $r3.<org.w3c.dom.NamedNodeMap: org.w3c.dom.Node getNamedItem(java.lang.String)>($r1);

        r8 = $r4;

        if $r4 != null goto label1;

        $r6 = interfaceinvoke r5.<org.w3c.dom.Document: org.w3c.dom.Attr createAttributeNS(java.lang.String,java.lang.String)>("", $r1);

        r8 = $r6;

        interfaceinvoke $r3.<org.w3c.dom.NamedNodeMap: org.w3c.dom.Node setNamedItem(org.w3c.dom.Node)>($r6);

     label1:
        return r8;
    }

    private org.w3c.dom.Node createElement(org.w3c.dom.Document, org.w3c.dom.Node, java.lang.String)
    {
        org.apache.poi.xssf.extractor.XSSFExportToXml r0;
        org.w3c.dom.Element r5;
        org.w3c.dom.Document r1;
        org.w3c.dom.Node r3;
        java.lang.String r2, $r4;
        boolean $z0;

        r0 := @this: org.apache.poi.xssf.extractor.XSSFExportToXml;

        r1 := @parameter0: org.w3c.dom.Document;

        r3 := @parameter1: org.w3c.dom.Node;

        r2 := @parameter2: java.lang.String;

        $z0 = specialinvoke r0.<org.apache.poi.xssf.extractor.XSSFExportToXml: boolean isNamespaceDeclared()>();

        if $z0 == 0 goto label1;

        $r4 = specialinvoke r0.<org.apache.poi.xssf.extractor.XSSFExportToXml: java.lang.String getNamespace()>();

        r5 = interfaceinvoke r1.<org.w3c.dom.Document: org.w3c.dom.Element createElementNS(java.lang.String,java.lang.String)>($r4, r2);

        goto label2;

     label1:
        r5 = interfaceinvoke r1.<org.w3c.dom.Document: org.w3c.dom.Element createElementNS(java.lang.String,java.lang.String)>("", r2);

     label2:
        interfaceinvoke r3.<org.w3c.dom.Node: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>(r5);

        return r5;
    }

    private org.w3c.dom.Node selectNode(java.lang.String, org.w3c.dom.NodeList)
    {
        org.apache.poi.xssf.extractor.XSSFExportToXml r4;
        org.w3c.dom.NodeList r0;
        org.w3c.dom.Node $r1, r5;
        int $i0, i1;
        java.lang.String $r2, r3;
        boolean $z0;

        r4 := @this: org.apache.poi.xssf.extractor.XSSFExportToXml;

        r3 := @parameter0: java.lang.String;

        r0 := @parameter1: org.w3c.dom.NodeList;

        r5 = null;

        i1 = 0;

     label1:
        $i0 = interfaceinvoke r0.<org.w3c.dom.NodeList: int getLength()>();

        if i1 >= $i0 goto label3;

        $r1 = interfaceinvoke r0.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(i1);

        $r2 = interfaceinvoke $r1.<org.w3c.dom.Node: java.lang.String getNodeName()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(r3);

        if $z0 == 0 goto label2;

        r5 = $r1;

        goto label3;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return r5;
    }

    private boolean isNamespaceDeclared()
    {
        org.apache.poi.xssf.extractor.XSSFExportToXml r0;
        java.lang.String $r1;
        boolean $z0, $z1;

        r0 := @this: org.apache.poi.xssf.extractor.XSSFExportToXml;

        $r1 = specialinvoke r0.<org.apache.poi.xssf.extractor.XSSFExportToXml: java.lang.String getNamespace()>();

        if $r1 == null goto label1;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    private java.lang.String getNamespace()
    {
        org.apache.poi.xssf.extractor.XSSFExportToXml r0;
        org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSchema $r2;
        org.apache.poi.xssf.usermodel.XSSFMap $r1;
        java.lang.String $r3;

        r0 := @this: org.apache.poi.xssf.extractor.XSSFExportToXml;

        $r1 = r0.<org.apache.poi.xssf.extractor.XSSFExportToXml: org.apache.poi.xssf.usermodel.XSSFMap map>;

        $r2 = virtualinvoke $r1.<org.apache.poi.xssf.usermodel.XSSFMap: org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSchema getCTSchema()>();

        $r3 = interfaceinvoke $r2.<org.openxmlformats.schemas.spreadsheetml.x2006.main.CTSchema: java.lang.String getNamespace()>();

        return $r3;
    }

    public int compare(java.lang.String, java.lang.String)
    {
        org.apache.poi.xssf.usermodel.XSSFMap $r1;
        java.lang.String[] $r4, $r6;
        org.w3c.dom.Node $r2, r9;
        int $i0, $i1, i2, $i3, $i4, $i5, i6, $i8, $i10, $i12;
        java.lang.String r3, r5, r7, r8;
        boolean $z0;
        org.apache.poi.xssf.extractor.XSSFExportToXml r0;

        r0 := @this: org.apache.poi.xssf.extractor.XSSFExportToXml;

        r3 := @parameter0: java.lang.String;

        r5 := @parameter1: java.lang.String;

        $r1 = r0.<org.apache.poi.xssf.extractor.XSSFExportToXml: org.apache.poi.xssf.usermodel.XSSFMap map>;

        $r2 = virtualinvoke $r1.<org.apache.poi.xssf.usermodel.XSSFMap: org.w3c.dom.Node getSchema()>();

        $r4 = virtualinvoke r3.<java.lang.String: java.lang.String[] split(java.lang.String)>("/");

        $r6 = virtualinvoke r5.<java.lang.String: java.lang.String[] split(java.lang.String)>("/");

        $i1 = lengthof $r4;

        $i0 = lengthof $r6;

        if $i1 >= $i0 goto label1;

        $i5 = lengthof $r4;

        goto label2;

     label1:
        $i5 = lengthof $r6;

     label2:
        i2 = $i5;

        r9 = $r2;

        i6 = 1;

     label3:
        if i6 >= i2 goto label7;

        r7 = $r4[i6];

        r8 = $r6[i6];

        $z0 = virtualinvoke r7.<java.lang.String: boolean equals(java.lang.Object)>(r8);

        if $z0 == 0 goto label4;

        r9 = specialinvoke r0.<org.apache.poi.xssf.extractor.XSSFExportToXml: org.w3c.dom.Node getComplexTypeForElement(java.lang.String,org.w3c.dom.Node,org.w3c.dom.Node)>(r7, $r2, r9);

        goto label6;

     label4:
        $i3 = specialinvoke r0.<org.apache.poi.xssf.extractor.XSSFExportToXml: int indexOfElementInComplexType(java.lang.String,org.w3c.dom.Node)>(r7, r9);

        $i4 = specialinvoke r0.<org.apache.poi.xssf.extractor.XSSFExportToXml: int indexOfElementInComplexType(java.lang.String,org.w3c.dom.Node)>(r8, r9);

        $i8 = (int) -1;

        if $i3 == $i8 goto label6;

        $i10 = (int) -1;

        if $i4 == $i10 goto label6;

        if $i3 >= $i4 goto label5;

        $i12 = (int) -1;

        return $i12;

     label5:
        if $i3 <= $i4 goto label6;

        return 1;

     label6:
        i6 = i6 + 1;

        goto label3;

     label7:
        return 0;
    }

    private int indexOfElementInComplexType(java.lang.String, org.w3c.dom.Node)
    {
        org.w3c.dom.Node r0, $r2, $r5;
        int $i0, i1, i2, $i4;
        org.w3c.dom.NamedNodeMap $r4;
        java.lang.String $r3, $r6, r8, $r9;
        boolean $z0, $z1, $z2;
        org.apache.poi.xssf.extractor.XSSFExportToXml r7;
        org.w3c.dom.NodeList $r1;

        r7 := @this: org.apache.poi.xssf.extractor.XSSFExportToXml;

        r8 := @parameter0: java.lang.String;

        r0 := @parameter1: org.w3c.dom.Node;

        $r1 = interfaceinvoke r0.<org.w3c.dom.Node: org.w3c.dom.NodeList getChildNodes()>();

        $i4 = (int) -1;

        i1 = $i4;

        i2 = 0;

     label1:
        $i0 = interfaceinvoke $r1.<org.w3c.dom.NodeList: int getLength()>();

        if i2 >= $i0 goto label3;

        $r2 = interfaceinvoke $r1.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(i2);

        $z0 = $r2 instanceof org.w3c.dom.Element;

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<org.w3c.dom.Node: java.lang.String getLocalName()>();

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("element");

        if $z1 == 0 goto label2;

        $r4 = interfaceinvoke $r2.<org.w3c.dom.Node: org.w3c.dom.NamedNodeMap getAttributes()>();

        $r5 = interfaceinvoke $r4.<org.w3c.dom.NamedNodeMap: org.w3c.dom.Node getNamedItem(java.lang.String)>("name");

        $r6 = interfaceinvoke $r5.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

        $r9 = specialinvoke r7.<org.apache.poi.xssf.extractor.XSSFExportToXml: java.lang.String removeNamespace(java.lang.String)>(r8);

        $z2 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r9);

        if $z2 == 0 goto label2;

        i1 = i2;

        goto label3;

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        return i1;
    }

    private org.w3c.dom.Node getComplexTypeForElement(java.lang.String, org.w3c.dom.Node, org.w3c.dom.Node)
    {
        org.apache.poi.xssf.extractor.XSSFExportToXml r0;
        org.w3c.dom.Node r3, r6, r7;
        java.lang.String r1, $r2, $r4, $r5;
        boolean $z0;

        r0 := @this: org.apache.poi.xssf.extractor.XSSFExportToXml;

        r1 := @parameter0: java.lang.String;

        r6 := @parameter1: org.w3c.dom.Node;

        r3 := @parameter2: org.w3c.dom.Node;

        $r2 = specialinvoke r0.<org.apache.poi.xssf.extractor.XSSFExportToXml: java.lang.String removeNamespace(java.lang.String)>(r1);

        $r4 = specialinvoke r0.<org.apache.poi.xssf.extractor.XSSFExportToXml: java.lang.String getComplexTypeNameFromChildren(org.w3c.dom.Node,java.lang.String)>(r3, $r2);

        r7 = null;

        $r5 = "";

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z0 != 0 goto label1;

        r7 = specialinvoke r0.<org.apache.poi.xssf.extractor.XSSFExportToXml: org.w3c.dom.Node getComplexTypeNodeFromSchemaChildren(org.w3c.dom.Node,org.w3c.dom.Node,java.lang.String)>(r6, null, $r4);

     label1:
        return r7;
    }

    private java.lang.String getComplexTypeNameFromChildren(org.w3c.dom.Node, java.lang.String)
    {
        org.w3c.dom.Node r0, $r2, $r5, $r9;
        int $i0, i1;
        org.w3c.dom.NamedNodeMap $r4, $r8;
        java.lang.String $r3, $r6, r7, r11;
        boolean $z0, $z1, $z2;
        org.apache.poi.xssf.extractor.XSSFExportToXml r10;
        org.w3c.dom.NodeList $r1;

        r10 := @this: org.apache.poi.xssf.extractor.XSSFExportToXml;

        r0 := @parameter0: org.w3c.dom.Node;

        r7 := @parameter1: java.lang.String;

        $r1 = interfaceinvoke r0.<org.w3c.dom.Node: org.w3c.dom.NodeList getChildNodes()>();

        r11 = "";

        i1 = 0;

     label1:
        $i0 = interfaceinvoke $r1.<org.w3c.dom.NodeList: int getLength()>();

        if i1 >= $i0 goto label3;

        $r2 = interfaceinvoke $r1.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(i1);

        $z0 = $r2 instanceof org.w3c.dom.Element;

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<org.w3c.dom.Node: java.lang.String getLocalName()>();

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("element");

        if $z1 == 0 goto label2;

        $r4 = interfaceinvoke $r2.<org.w3c.dom.Node: org.w3c.dom.NamedNodeMap getAttributes()>();

        $r5 = interfaceinvoke $r4.<org.w3c.dom.NamedNodeMap: org.w3c.dom.Node getNamedItem(java.lang.String)>("name");

        $r6 = interfaceinvoke $r5.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

        $z2 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>(r7);

        if $z2 == 0 goto label2;

        $r8 = interfaceinvoke $r2.<org.w3c.dom.Node: org.w3c.dom.NamedNodeMap getAttributes()>();

        $r9 = interfaceinvoke $r8.<org.w3c.dom.NamedNodeMap: org.w3c.dom.Node getNamedItem(java.lang.String)>("type");

        if $r9 == null goto label2;

        r11 = interfaceinvoke $r9.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

        goto label3;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return r11;
    }

    private org.w3c.dom.Node getComplexTypeNodeFromSchemaChildren(org.w3c.dom.Node, org.w3c.dom.Node, java.lang.String)
    {
        org.w3c.dom.Node r0, $r2, $r5, $r9, r13;
        int $i0, $i1, i2, i3;
        org.w3c.dom.NamedNodeMap $r4;
        java.lang.String $r3, $r6, r7, $r10, $r11;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        org.apache.poi.xssf.extractor.XSSFExportToXml r12;
        org.w3c.dom.NodeList $r1, $r8;

        r12 := @this: org.apache.poi.xssf.extractor.XSSFExportToXml;

        r0 := @parameter0: org.w3c.dom.Node;

        r13 := @parameter1: org.w3c.dom.Node;

        r7 := @parameter2: java.lang.String;

        $r1 = interfaceinvoke r0.<org.w3c.dom.Node: org.w3c.dom.NodeList getChildNodes()>();

        i2 = 0;

     label1:
        $i0 = interfaceinvoke $r1.<org.w3c.dom.NodeList: int getLength()>();

        if i2 >= $i0 goto label7;

        $r2 = interfaceinvoke $r1.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(i2);

        $z0 = $r2 instanceof org.w3c.dom.Element;

        if $z0 == 0 goto label6;

        $r3 = interfaceinvoke $r2.<org.w3c.dom.Node: java.lang.String getLocalName()>();

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("complexType");

        if $z1 == 0 goto label6;

        $r4 = interfaceinvoke $r2.<org.w3c.dom.Node: org.w3c.dom.NamedNodeMap getAttributes()>();

        $r5 = interfaceinvoke $r4.<org.w3c.dom.NamedNodeMap: org.w3c.dom.Node getNamedItem(java.lang.String)>("name");

        $r6 = interfaceinvoke $r5.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

        $z2 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>(r7);

        if $z2 == 0 goto label6;

        $r8 = interfaceinvoke $r2.<org.w3c.dom.Node: org.w3c.dom.NodeList getChildNodes()>();

        i3 = 0;

     label2:
        $i1 = interfaceinvoke $r8.<org.w3c.dom.NodeList: int getLength()>();

        if i3 >= $i1 goto label5;

        $r9 = interfaceinvoke $r8.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(i3);

        $z3 = $r9 instanceof org.w3c.dom.Element;

        if $z3 == 0 goto label4;

        $r10 = interfaceinvoke $r9.<org.w3c.dom.Node: java.lang.String getLocalName()>();

        $z4 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>("sequence");

        if $z4 != 0 goto label3;

        $r11 = interfaceinvoke $r9.<org.w3c.dom.Node: java.lang.String getLocalName()>();

        $z5 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>("all");

        if $z5 == 0 goto label4;

     label3:
        r13 = $r9;

        goto label5;

     label4:
        i3 = i3 + 1;

        goto label2;

     label5:
        if r13 == null goto label6;

        goto label7;

     label6:
        i2 = i2 + 1;

        goto label1;

     label7:
        return r13;
    }

    public volatile int compare(java.lang.Object, java.lang.Object)
    {
        org.apache.poi.xssf.extractor.XSSFExportToXml r0;
        int $i0;
        java.lang.Object r1, r2;
        java.lang.String $r3, $r4;

        r0 := @this: org.apache.poi.xssf.extractor.XSSFExportToXml;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (java.lang.String) r1;

        $r3 = (java.lang.String) r2;

        $i0 = virtualinvoke r0.<org.apache.poi.xssf.extractor.XSSFExportToXml: int compare(java.lang.String,java.lang.String)>($r4, $r3);

        return $i0;
    }
}
