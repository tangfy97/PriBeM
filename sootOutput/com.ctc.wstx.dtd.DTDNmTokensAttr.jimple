public final class com.ctc.wstx.dtd.DTDNmTokensAttr extends com.ctc.wstx.dtd.DTDAttribute
{

    public void <init>(com.ctc.wstx.dtd.NameKey, com.ctc.wstx.dtd.DefaultAttrValue, int, boolean, boolean)
    {
        com.ctc.wstx.dtd.DefaultAttrValue r2;
        com.ctc.wstx.dtd.NameKey r1;
        com.ctc.wstx.dtd.DTDNmTokensAttr r0;
        int i0;
        boolean z0, z1;

        r0 := @this: com.ctc.wstx.dtd.DTDNmTokensAttr;

        r1 := @parameter0: com.ctc.wstx.dtd.NameKey;

        r2 := @parameter1: com.ctc.wstx.dtd.DefaultAttrValue;

        i0 := @parameter2: int;

        z0 := @parameter3: boolean;

        z1 := @parameter4: boolean;

        specialinvoke r0.<com.ctc.wstx.dtd.DTDAttribute: void <init>(com.ctc.wstx.dtd.NameKey,com.ctc.wstx.dtd.DefaultAttrValue,int,boolean,boolean)>(r1, r2, i0, z0, z1);

        return;
    }

    public com.ctc.wstx.dtd.DTDAttribute cloneWith(int)
    {
        com.ctc.wstx.dtd.DefaultAttrValue $r2;
        com.ctc.wstx.dtd.NameKey $r3;
        com.ctc.wstx.dtd.DTDNmTokensAttr $r0, r1;
        int i0;
        boolean $z0, $z1;

        r1 := @this: com.ctc.wstx.dtd.DTDNmTokensAttr;

        i0 := @parameter0: int;

        $r0 = new com.ctc.wstx.dtd.DTDNmTokensAttr;

        $r3 = r1.<com.ctc.wstx.dtd.DTDNmTokensAttr: com.ctc.wstx.dtd.NameKey mName>;

        $r2 = r1.<com.ctc.wstx.dtd.DTDNmTokensAttr: com.ctc.wstx.dtd.DefaultAttrValue mDefValue>;

        $z1 = r1.<com.ctc.wstx.dtd.DTDNmTokensAttr: boolean mCfgNsAware>;

        $z0 = r1.<com.ctc.wstx.dtd.DTDNmTokensAttr: boolean mCfgXml11>;

        specialinvoke $r0.<com.ctc.wstx.dtd.DTDNmTokensAttr: void <init>(com.ctc.wstx.dtd.NameKey,com.ctc.wstx.dtd.DefaultAttrValue,int,boolean,boolean)>($r3, $r2, i0, $z1, $z0);

        return $r0;
    }

    public int getValueType()
    {
        com.ctc.wstx.dtd.DTDNmTokensAttr r0;

        r0 := @this: com.ctc.wstx.dtd.DTDNmTokensAttr;

        return 9;
    }

    public java.lang.String validate(com.ctc.wstx.dtd.DTDValidatorBase, char[], int, int, boolean) throws org.codehaus.stax2.validation.XMLValidationException
    {
        com.ctc.wstx.dtd.DTDNmTokensAttr r3;
        com.ctc.wstx.dtd.DTDValidatorBase r4;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11;
        java.lang.StringBuffer r8, $r9;
        int i0, $i1, $i3, $i4, i8, i9, i11, i12, $i14, $i16;
        java.lang.String $r0, $r5, $r6, $r7;
        char $c2, c5, $c6, $c7, c10;
        char[] r1;

        r3 := @this: com.ctc.wstx.dtd.DTDNmTokensAttr;

        r4 := @parameter0: com.ctc.wstx.dtd.DTDValidatorBase;

        r1 := @parameter1: char[];

        i8 := @parameter2: int;

        i9 := @parameter3: int;

        z0 := @parameter4: boolean;

        i0 = i8;

     label01:
        if i8 >= i9 goto label02;

        $c7 = r1[i8];

        $z11 = staticinvoke <com.ctc.wstx.io.WstxInputData: boolean isSpaceChar(char)>($c7);

        if $z11 == 0 goto label02;

        i8 = i8 + 1;

        goto label01;

     label02:
        if i8 < i9 goto label03;

        $r7 = virtualinvoke r3.<com.ctc.wstx.dtd.DTDNmTokensAttr: java.lang.String reportValidationProblem(com.ctc.wstx.dtd.DTDValidatorBase,java.lang.String)>(r4, "Empty NMTOKENS value");

        return $r7;

     label03:
        if z0 != 0 goto label07;

     label04:
        if i8 >= i9 goto label06;

        c10 = r1[i8];

        $z7 = staticinvoke <com.ctc.wstx.io.WstxInputData: boolean isSpaceChar(char)>(c10);

        if $z7 != 0 goto label05;

        $z9 = r3.<com.ctc.wstx.dtd.DTDNmTokensAttr: boolean mCfgNsAware>;

        $z8 = r3.<com.ctc.wstx.dtd.DTDNmTokensAttr: boolean mCfgXml11>;

        $z10 = staticinvoke <com.ctc.wstx.io.WstxInputData: boolean isNameChar(char,boolean,boolean)>(c10, $z9, $z8);

        if $z10 != 0 goto label05;

        $r6 = virtualinvoke r3.<com.ctc.wstx.dtd.DTDNmTokensAttr: java.lang.String reportInvalidChar(com.ctc.wstx.dtd.DTDValidatorBase,char,java.lang.String)>(r4, c10, "not valid as NMTOKENS character");

        return $r6;

     label05:
        i8 = i8 + 1;

        goto label04;

     label06:
        return null;

     label07:
        if i0 == i8 goto label08;

        goto label08;

     label08:
        $i14 = (int) -1;

        i11 = i9 + $i14;

     label09:
        if i11 <= i8 goto label10;

        $c6 = r1[i11];

        $z6 = staticinvoke <com.ctc.wstx.io.WstxInputData: boolean isSpaceChar(char)>($c6);

        if $z6 == 0 goto label10;

        $i16 = (int) -1;

        i11 = i11 + $i16;

        goto label09;

     label10:
        r8 = null;

     label11:
        if i8 > i11 goto label20;

        i12 = i8;

     label12:
        if i12 > i11 goto label15;

        c5 = r1[i12];

        $z2 = staticinvoke <com.ctc.wstx.io.WstxInputData: boolean isSpaceChar(char)>(c5);

        if $z2 == 0 goto label13;

        goto label15;

     label13:
        $z4 = r3.<com.ctc.wstx.dtd.DTDNmTokensAttr: boolean mCfgNsAware>;

        $z3 = r3.<com.ctc.wstx.dtd.DTDNmTokensAttr: boolean mCfgXml11>;

        $z5 = staticinvoke <com.ctc.wstx.io.WstxInputData: boolean isNameChar(char,boolean,boolean)>(c5, $z4, $z3);

        if $z5 != 0 goto label14;

        $r5 = virtualinvoke r3.<com.ctc.wstx.dtd.DTDNmTokensAttr: java.lang.String reportInvalidChar(com.ctc.wstx.dtd.DTDValidatorBase,char,java.lang.String)>(r4, c5, "not valid as an NMTOKENS character");

        return $r5;

     label14:
        i12 = i12 + 1;

        goto label12;

     label15:
        if r8 != null goto label16;

        $r9 = new java.lang.StringBuffer;

        $i3 = i11 - i8;

        $i4 = $i3 + 1;

        specialinvoke $r9.<java.lang.StringBuffer: void <init>(int)>($i4);

        r8 = $r9;

        goto label17;

     label16:
        virtualinvoke r8.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(32);

     label17:
        $i1 = i12 - i8;

        virtualinvoke r8.<java.lang.StringBuffer: java.lang.StringBuffer append(char[],int,int)>(r1, i8, $i1);

        i8 = i12 + 1;

     label18:
        if i8 > i11 goto label19;

        $c2 = r1[i8];

        $z1 = staticinvoke <com.ctc.wstx.io.WstxInputData: boolean isSpaceChar(char)>($c2);

        if $z1 == 0 goto label19;

        i8 = i8 + 1;

        goto label18;

     label19:
        goto label11;

     label20:
        $r0 = virtualinvoke r8.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r0;
    }

    public void validateDefault(com.ctc.wstx.sr.InputProblemReporter, boolean) throws org.codehaus.stax2.validation.XMLValidationException
    {
        com.ctc.wstx.dtd.DTDNmTokensAttr r0;
        boolean z0, $z1, $z2, $z3, $z4;
        com.ctc.wstx.sr.InputProblemReporter r5;
        com.ctc.wstx.dtd.DefaultAttrValue $r1, $r3;
        java.lang.StringBuffer $r6, $r7, $r8, $r9, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r20, $r21, r23;
        int $i0, $i2, $i3, $i4, i6, i7, i9;
        java.lang.String $r2, $r4, $r10, $r11, $r19, $r22;
        char $c1, $c5, c8;

        r0 := @this: com.ctc.wstx.dtd.DTDNmTokensAttr;

        r5 := @parameter0: com.ctc.wstx.sr.InputProblemReporter;

        z0 := @parameter1: boolean;

        $r1 = r0.<com.ctc.wstx.dtd.DTDNmTokensAttr: com.ctc.wstx.dtd.DefaultAttrValue mDefValue>;

        $r2 = virtualinvoke $r1.<com.ctc.wstx.dtd.DefaultAttrValue: java.lang.String getValue()>();

        $i0 = virtualinvoke $r2.<java.lang.String: int length()>();

        r23 = null;

        i6 = 0;

        i7 = 0;

     label01:
        if i7 >= $i0 goto label13;

        c8 = virtualinvoke $r2.<java.lang.String: char charAt(int)>(i7);

     label02:
        $z1 = staticinvoke <com.ctc.wstx.io.WstxInputData: boolean isSpaceChar(char)>(c8);

        if $z1 != 0 goto label03;

        goto label05;

     label03:
        i7 = i7 + 1;

        if i7 < $i0 goto label04;

        goto label13;

     label04:
        c8 = virtualinvoke $r2.<java.lang.String: char charAt(int)>(i7);

        goto label02;

     label05:
        i9 = i7 + 1;

     label06:
        i9 = i9 + 1;

        if i9 < $i0 goto label07;

        goto label08;

     label07:
        $c1 = virtualinvoke $r2.<java.lang.String: char charAt(int)>(i9);

        $z2 = staticinvoke <com.ctc.wstx.io.WstxInputData: boolean isSpaceChar(char)>($c1);

        if $z2 == 0 goto label06;

     label08:
        i6 = i6 + 1;

        $r11 = virtualinvoke $r2.<java.lang.String: java.lang.String substring(int,int)>(i7, i9);

        $z4 = r0.<com.ctc.wstx.dtd.DTDNmTokensAttr: boolean mCfgNsAware>;

        $z3 = r0.<com.ctc.wstx.dtd.DTDNmTokensAttr: boolean mCfgXml11>;

        $i2 = staticinvoke <com.ctc.wstx.io.WstxInputData: int findIllegalNmtokenChar(java.lang.String,boolean,boolean)>($r11, $z4, $z3);

        if $i2 < 0 goto label09;

        $r13 = new java.lang.StringBuffer;

        specialinvoke $r13.<java.lang.StringBuffer: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Invalid default value \'");

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'; character #");

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i2);

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" (");

        $c5 = virtualinvoke $r2.<java.lang.String: char charAt(int)>($i2);

        $r19 = staticinvoke <com.ctc.wstx.io.WstxInputData: java.lang.String getCharDesc(char)>($c5);

        $r20 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r19);

        $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(") not a valid NMTOKENS character");

        $r22 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<com.ctc.wstx.dtd.DTDNmTokensAttr: java.lang.String reportValidationProblem(com.ctc.wstx.sr.InputProblemReporter,java.lang.String)>(r5, $r22);

     label09:
        if z0 == 0 goto label12;

        if r23 != null goto label10;

        $r12 = new java.lang.StringBuffer;

        $i3 = i9 - i7;

        $i4 = $i3 + 32;

        specialinvoke $r12.<java.lang.StringBuffer: void <init>(int)>($i4);

        r23 = $r12;

        goto label11;

     label10:
        virtualinvoke r23.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(32);

     label11:
        virtualinvoke r23.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r11);

     label12:
        i7 = i9 + 1;

        goto label01;

     label13:
        if i6 != 0 goto label14;

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Invalid default value \'");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'; empty String is not a valid NMTOKENS value");

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<com.ctc.wstx.dtd.DTDNmTokensAttr: java.lang.String reportValidationProblem(com.ctc.wstx.sr.InputProblemReporter,java.lang.String)>(r5, $r10);

        return;

     label14:
        if z0 == 0 goto label15;

        $r3 = r0.<com.ctc.wstx.dtd.DTDNmTokensAttr: com.ctc.wstx.dtd.DefaultAttrValue mDefValue>;

        $r4 = virtualinvoke r23.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r3.<com.ctc.wstx.dtd.DefaultAttrValue: void setValue(java.lang.String)>($r4);

     label15:
        return;
    }
}
