public class org.apache.batik.dom.AbstractParentNode$ChildNodes extends java.lang.Object implements org.w3c.dom.NodeList, java.io.Serializable
{
    protected org.apache.batik.dom.ExtendedNode firstChild;
    protected org.apache.batik.dom.ExtendedNode lastChild;
    protected int children;
    protected int elementChildren;
    private final org.apache.batik.dom.AbstractParentNode this$0;

    public void <init>(org.apache.batik.dom.AbstractParentNode)
    {
        org.apache.batik.dom.AbstractParentNode r1;
        org.apache.batik.dom.AbstractParentNode$ChildNodes r0;

        r0 := @this: org.apache.batik.dom.AbstractParentNode$ChildNodes;

        r1 := @parameter0: org.apache.batik.dom.AbstractParentNode;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.batik.dom.AbstractParentNode$ChildNodes: org.apache.batik.dom.AbstractParentNode this$0> = r1;

        return;
    }

    public org.w3c.dom.Node item(int)
    {
        org.apache.batik.dom.AbstractParentNode$ChildNodes r0;
        org.w3c.dom.Node r1, r2;
        int i0, $i1, $i2, $i3, $i4, i5, i6, $i8;

        r0 := @this: org.apache.batik.dom.AbstractParentNode$ChildNodes;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        $i1 = r0.<org.apache.batik.dom.AbstractParentNode$ChildNodes: int children>;

        if i0 < $i1 goto label2;

     label1:
        return null;

     label2:
        $i2 = r0.<org.apache.batik.dom.AbstractParentNode$ChildNodes: int children>;

        $i3 = $i2 >> 1;

        if i0 >= $i3 goto label5;

        r1 = r0.<org.apache.batik.dom.AbstractParentNode$ChildNodes: org.apache.batik.dom.ExtendedNode firstChild>;

        i5 = 0;

        goto label4;

     label3:
        r1 = interfaceinvoke r1.<org.w3c.dom.Node: org.w3c.dom.Node getNextSibling()>();

        i5 = i5 + 1;

     label4:
        if i5 < i0 goto label3;

        return r1;

     label5:
        r2 = r0.<org.apache.batik.dom.AbstractParentNode$ChildNodes: org.apache.batik.dom.ExtendedNode lastChild>;

        $i4 = r0.<org.apache.batik.dom.AbstractParentNode$ChildNodes: int children>;

        i6 = $i4 - 1;

        goto label7;

     label6:
        r2 = interfaceinvoke r2.<org.w3c.dom.Node: org.w3c.dom.Node getPreviousSibling()>();

        $i8 = (int) -1;

        i6 = i6 + $i8;

     label7:
        if i6 > i0 goto label6;

        return r2;
    }

    public int getLength()
    {
        int $i0;
        org.apache.batik.dom.AbstractParentNode$ChildNodes r0;

        r0 := @this: org.apache.batik.dom.AbstractParentNode$ChildNodes;

        $i0 = r0.<org.apache.batik.dom.AbstractParentNode$ChildNodes: int children>;

        return $i0;
    }

    public org.apache.batik.dom.ExtendedNode append(org.apache.batik.dom.ExtendedNode)
    {
        org.apache.batik.dom.AbstractParentNode$ChildNodes r0;
        org.apache.batik.dom.ExtendedNode $r1, r2, $r3, $r4;
        short $s2;
        int $i0, $i1, $i3, $i4;

        r0 := @this: org.apache.batik.dom.AbstractParentNode$ChildNodes;

        r2 := @parameter0: org.apache.batik.dom.ExtendedNode;

        $r1 = r0.<org.apache.batik.dom.AbstractParentNode$ChildNodes: org.apache.batik.dom.ExtendedNode lastChild>;

        if $r1 != null goto label1;

        r0.<org.apache.batik.dom.AbstractParentNode$ChildNodes: org.apache.batik.dom.ExtendedNode firstChild> = r2;

        goto label2;

     label1:
        $r3 = r0.<org.apache.batik.dom.AbstractParentNode$ChildNodes: org.apache.batik.dom.ExtendedNode lastChild>;

        interfaceinvoke $r3.<org.apache.batik.dom.ExtendedNode: void setNextSibling(org.w3c.dom.Node)>(r2);

        $r4 = r0.<org.apache.batik.dom.AbstractParentNode$ChildNodes: org.apache.batik.dom.ExtendedNode lastChild>;

        interfaceinvoke r2.<org.apache.batik.dom.ExtendedNode: void setPreviousSibling(org.w3c.dom.Node)>($r4);

     label2:
        r0.<org.apache.batik.dom.AbstractParentNode$ChildNodes: org.apache.batik.dom.ExtendedNode lastChild> = r2;

        $i0 = r0.<org.apache.batik.dom.AbstractParentNode$ChildNodes: int children>;

        $i1 = $i0 + 1;

        r0.<org.apache.batik.dom.AbstractParentNode$ChildNodes: int children> = $i1;

        $s2 = interfaceinvoke r2.<org.w3c.dom.Node: short getNodeType()>();

        if $s2 != 1 goto label3;

        $i3 = r0.<org.apache.batik.dom.AbstractParentNode$ChildNodes: int elementChildren>;

        $i4 = $i3 + 1;

        r0.<org.apache.batik.dom.AbstractParentNode$ChildNodes: int elementChildren> = $i4;

     label3:
        return r2;
    }

    public org.apache.batik.dom.ExtendedNode insert(org.apache.batik.dom.ExtendedNode, org.apache.batik.dom.ExtendedNode)
    {
        org.apache.batik.dom.AbstractParentNode$ChildNodes r1;
        org.apache.batik.dom.ExtendedNode r0, $r2, $r3, r13, $r15, $r16, $r17, r18, r19;
        java.lang.Integer $r20;
        java.lang.Object[] $r6;
        short $s0, $s3, $s8, $s13;
        org.w3c.dom.Node $r4, $r5, $r11, $r12, $r14;
        org.w3c.dom.DOMException $r10;
        int $i1, $i2, $i4, $i5, $i6, $i7, $i9, $i10, $i11, $i12, $i14, $i15, $i16;
        java.lang.String $r9;
        org.apache.batik.dom.AbstractParentNode $r8;

        r1 := @this: org.apache.batik.dom.AbstractParentNode$ChildNodes;

        r13 := @parameter0: org.apache.batik.dom.ExtendedNode;

        r0 := @parameter1: org.apache.batik.dom.ExtendedNode;

        if r0 != null goto label1;

        $r17 = virtualinvoke r1.<org.apache.batik.dom.AbstractParentNode$ChildNodes: org.apache.batik.dom.ExtendedNode append(org.apache.batik.dom.ExtendedNode)>(r13);

        return $r17;

     label1:
        $r2 = r1.<org.apache.batik.dom.AbstractParentNode$ChildNodes: org.apache.batik.dom.ExtendedNode firstChild>;

        if r0 != $r2 goto label3;

        $r15 = r1.<org.apache.batik.dom.AbstractParentNode$ChildNodes: org.apache.batik.dom.ExtendedNode firstChild>;

        interfaceinvoke $r15.<org.apache.batik.dom.ExtendedNode: void setPreviousSibling(org.w3c.dom.Node)>(r13);

        $r16 = r1.<org.apache.batik.dom.AbstractParentNode$ChildNodes: org.apache.batik.dom.ExtendedNode firstChild>;

        interfaceinvoke r13.<org.apache.batik.dom.ExtendedNode: void setNextSibling(org.w3c.dom.Node)>($r16);

        r1.<org.apache.batik.dom.AbstractParentNode$ChildNodes: org.apache.batik.dom.ExtendedNode firstChild> = r13;

        $i11 = r1.<org.apache.batik.dom.AbstractParentNode$ChildNodes: int children>;

        $i12 = $i11 + 1;

        r1.<org.apache.batik.dom.AbstractParentNode$ChildNodes: int children> = $i12;

        $s13 = interfaceinvoke r13.<org.w3c.dom.Node: short getNodeType()>();

        if $s13 != 1 goto label2;

        $i14 = r1.<org.apache.batik.dom.AbstractParentNode$ChildNodes: int elementChildren>;

        $i15 = $i14 + 1;

        r1.<org.apache.batik.dom.AbstractParentNode$ChildNodes: int elementChildren> = $i15;

     label2:
        return r13;

     label3:
        $r3 = r1.<org.apache.batik.dom.AbstractParentNode$ChildNodes: org.apache.batik.dom.ExtendedNode lastChild>;

        if r0 != $r3 goto label5;

        $r14 = interfaceinvoke r0.<org.w3c.dom.Node: org.w3c.dom.Node getPreviousSibling()>();

        r18 = (org.apache.batik.dom.ExtendedNode) $r14;

        interfaceinvoke r18.<org.apache.batik.dom.ExtendedNode: void setNextSibling(org.w3c.dom.Node)>(r13);

        interfaceinvoke r0.<org.apache.batik.dom.ExtendedNode: void setPreviousSibling(org.w3c.dom.Node)>(r13);

        interfaceinvoke r13.<org.apache.batik.dom.ExtendedNode: void setNextSibling(org.w3c.dom.Node)>(r0);

        interfaceinvoke r13.<org.apache.batik.dom.ExtendedNode: void setPreviousSibling(org.w3c.dom.Node)>(r18);

        $i6 = r1.<org.apache.batik.dom.AbstractParentNode$ChildNodes: int children>;

        $i7 = $i6 + 1;

        r1.<org.apache.batik.dom.AbstractParentNode$ChildNodes: int children> = $i7;

        $s8 = interfaceinvoke r13.<org.w3c.dom.Node: short getNodeType()>();

        if $s8 != 1 goto label4;

        $i9 = r1.<org.apache.batik.dom.AbstractParentNode$ChildNodes: int elementChildren>;

        $i10 = $i9 + 1;

        r1.<org.apache.batik.dom.AbstractParentNode$ChildNodes: int elementChildren> = $i10;

     label4:
        return r13;

     label5:
        $r4 = interfaceinvoke r0.<org.w3c.dom.Node: org.w3c.dom.Node getPreviousSibling()>();

        r19 = (org.apache.batik.dom.ExtendedNode) $r4;

        $r5 = interfaceinvoke r19.<org.w3c.dom.Node: org.w3c.dom.Node getNextSibling()>();

        if $r5 != r0 goto label7;

        $r11 = interfaceinvoke r19.<org.w3c.dom.Node: org.w3c.dom.Node getParentNode()>();

        $r12 = interfaceinvoke r0.<org.w3c.dom.Node: org.w3c.dom.Node getParentNode()>();

        if $r11 != $r12 goto label7;

        interfaceinvoke r19.<org.apache.batik.dom.ExtendedNode: void setNextSibling(org.w3c.dom.Node)>(r13);

        interfaceinvoke r13.<org.apache.batik.dom.ExtendedNode: void setPreviousSibling(org.w3c.dom.Node)>(r19);

        interfaceinvoke r13.<org.apache.batik.dom.ExtendedNode: void setNextSibling(org.w3c.dom.Node)>(r0);

        interfaceinvoke r0.<org.apache.batik.dom.ExtendedNode: void setPreviousSibling(org.w3c.dom.Node)>(r13);

        $i1 = r1.<org.apache.batik.dom.AbstractParentNode$ChildNodes: int children>;

        $i2 = $i1 + 1;

        r1.<org.apache.batik.dom.AbstractParentNode$ChildNodes: int children> = $i2;

        $s3 = interfaceinvoke r13.<org.w3c.dom.Node: short getNodeType()>();

        if $s3 != 1 goto label6;

        $i4 = r1.<org.apache.batik.dom.AbstractParentNode$ChildNodes: int elementChildren>;

        $i5 = $i4 + 1;

        r1.<org.apache.batik.dom.AbstractParentNode$ChildNodes: int elementChildren> = $i5;

     label6:
        return r13;

     label7:
        $r8 = r1.<org.apache.batik.dom.AbstractParentNode$ChildNodes: org.apache.batik.dom.AbstractParentNode this$0>;

        $r6 = newarray (java.lang.Object)[2];

        $r20 = new java.lang.Integer;

        $s0 = interfaceinvoke r0.<org.w3c.dom.Node: short getNodeType()>();

        $i16 = (int) $s0;

        specialinvoke $r20.<java.lang.Integer: void <init>(int)>($i16);

        $r6[0] = $r20;

        $r9 = interfaceinvoke r0.<org.w3c.dom.Node: java.lang.String getNodeName()>();

        $r6[1] = $r9;

        $r10 = virtualinvoke $r8.<org.apache.batik.dom.AbstractNode: org.w3c.dom.DOMException createDOMException(short,java.lang.String,java.lang.Object[])>(8, "child.missing", $r6);

        throw $r10;
    }

    public org.apache.batik.dom.ExtendedNode replace(org.apache.batik.dom.ExtendedNode, org.apache.batik.dom.ExtendedNode)
    {
        org.apache.batik.dom.AbstractParentNode$ChildNodes r1;
        org.apache.batik.dom.ExtendedNode r0, $r2, $r3, r6, r13, $r14, $r16, $r17, $r19, $r20, r21, r22, r23;
        java.lang.Integer $r29;
        java.lang.Object[] $r25;
        short $s0, $s1, $s6, $s7, $s12, $s13, $s18;
        org.w3c.dom.Node $r4, $r5, $r7, $r8, $r9, $r10, $r11, $r12, $r15, $r18;
        org.w3c.dom.DOMException $r28;
        int $i2, $i3, $i4, $i5, $i8, $i9, $i10, $i11, $i14, $i15, $i16, $i17, $i19;
        java.lang.String $r27;
        org.apache.batik.dom.AbstractParentNode $r24;

        r1 := @this: org.apache.batik.dom.AbstractParentNode$ChildNodes;

        r13 := @parameter0: org.apache.batik.dom.ExtendedNode;

        r0 := @parameter1: org.apache.batik.dom.ExtendedNode;

        $r2 = r1.<org.apache.batik.dom.AbstractParentNode$ChildNodes: org.apache.batik.dom.ExtendedNode firstChild>;

        if r0 != $r2 goto label05;

        $r17 = r1.<org.apache.batik.dom.AbstractParentNode$ChildNodes: org.apache.batik.dom.ExtendedNode firstChild>;

        $r18 = interfaceinvoke $r17.<org.w3c.dom.Node: org.w3c.dom.Node getNextSibling()>();

        r21 = (org.apache.batik.dom.ExtendedNode) $r18;

        interfaceinvoke r13.<org.apache.batik.dom.ExtendedNode: void setNextSibling(org.w3c.dom.Node)>(r21);

        $r19 = r1.<org.apache.batik.dom.AbstractParentNode$ChildNodes: org.apache.batik.dom.ExtendedNode lastChild>;

        if r0 != $r19 goto label01;

        r1.<org.apache.batik.dom.AbstractParentNode$ChildNodes: org.apache.batik.dom.ExtendedNode lastChild> = r13;

        goto label02;

     label01:
        interfaceinvoke r21.<org.apache.batik.dom.ExtendedNode: void setPreviousSibling(org.w3c.dom.Node)>(r13);

     label02:
        $r20 = r1.<org.apache.batik.dom.AbstractParentNode$ChildNodes: org.apache.batik.dom.ExtendedNode firstChild>;

        interfaceinvoke $r20.<org.apache.batik.dom.ExtendedNode: void setNextSibling(org.w3c.dom.Node)>(null);

        r1.<org.apache.batik.dom.AbstractParentNode$ChildNodes: org.apache.batik.dom.ExtendedNode firstChild> = r13;

        $s12 = interfaceinvoke r0.<org.w3c.dom.Node: short getNodeType()>();

        if $s12 != 1 goto label03;

        $i16 = r1.<org.apache.batik.dom.AbstractParentNode$ChildNodes: int elementChildren>;

        $i17 = $i16 - 1;

        r1.<org.apache.batik.dom.AbstractParentNode$ChildNodes: int elementChildren> = $i17;

     label03:
        $s13 = interfaceinvoke r13.<org.w3c.dom.Node: short getNodeType()>();

        if $s13 != 1 goto label04;

        $i14 = r1.<org.apache.batik.dom.AbstractParentNode$ChildNodes: int elementChildren>;

        $i15 = $i14 + 1;

        r1.<org.apache.batik.dom.AbstractParentNode$ChildNodes: int elementChildren> = $i15;

     label04:
        return r0;

     label05:
        $r3 = r1.<org.apache.batik.dom.AbstractParentNode$ChildNodes: org.apache.batik.dom.ExtendedNode lastChild>;

        if r0 != $r3 goto label08;

        $r14 = r1.<org.apache.batik.dom.AbstractParentNode$ChildNodes: org.apache.batik.dom.ExtendedNode lastChild>;

        $r15 = interfaceinvoke $r14.<org.w3c.dom.Node: org.w3c.dom.Node getPreviousSibling()>();

        r22 = (org.apache.batik.dom.ExtendedNode) $r15;

        interfaceinvoke r13.<org.apache.batik.dom.ExtendedNode: void setPreviousSibling(org.w3c.dom.Node)>(r22);

        interfaceinvoke r22.<org.apache.batik.dom.ExtendedNode: void setNextSibling(org.w3c.dom.Node)>(r13);

        $r16 = r1.<org.apache.batik.dom.AbstractParentNode$ChildNodes: org.apache.batik.dom.ExtendedNode lastChild>;

        interfaceinvoke $r16.<org.apache.batik.dom.ExtendedNode: void setPreviousSibling(org.w3c.dom.Node)>(null);

        r1.<org.apache.batik.dom.AbstractParentNode$ChildNodes: org.apache.batik.dom.ExtendedNode lastChild> = r13;

        $s6 = interfaceinvoke r0.<org.w3c.dom.Node: short getNodeType()>();

        if $s6 != 1 goto label06;

        $i10 = r1.<org.apache.batik.dom.AbstractParentNode$ChildNodes: int elementChildren>;

        $i11 = $i10 - 1;

        r1.<org.apache.batik.dom.AbstractParentNode$ChildNodes: int elementChildren> = $i11;

     label06:
        $s7 = interfaceinvoke r13.<org.w3c.dom.Node: short getNodeType()>();

        if $s7 != 1 goto label07;

        $i8 = r1.<org.apache.batik.dom.AbstractParentNode$ChildNodes: int elementChildren>;

        $i9 = $i8 + 1;

        r1.<org.apache.batik.dom.AbstractParentNode$ChildNodes: int elementChildren> = $i9;

     label07:
        return r0;

     label08:
        $r4 = interfaceinvoke r0.<org.w3c.dom.Node: org.w3c.dom.Node getPreviousSibling()>();

        r23 = (org.apache.batik.dom.ExtendedNode) $r4;

        $r5 = interfaceinvoke r0.<org.w3c.dom.Node: org.w3c.dom.Node getNextSibling()>();

        r6 = (org.apache.batik.dom.ExtendedNode) $r5;

        $r7 = interfaceinvoke r23.<org.w3c.dom.Node: org.w3c.dom.Node getNextSibling()>();

        if $r7 != r0 goto label11;

        $r8 = interfaceinvoke r6.<org.w3c.dom.Node: org.w3c.dom.Node getPreviousSibling()>();

        if $r8 != r0 goto label11;

        $r9 = interfaceinvoke r23.<org.w3c.dom.Node: org.w3c.dom.Node getParentNode()>();

        $r10 = interfaceinvoke r0.<org.w3c.dom.Node: org.w3c.dom.Node getParentNode()>();

        if $r9 != $r10 goto label11;

        $r11 = interfaceinvoke r6.<org.w3c.dom.Node: org.w3c.dom.Node getParentNode()>();

        $r12 = interfaceinvoke r0.<org.w3c.dom.Node: org.w3c.dom.Node getParentNode()>();

        if $r11 != $r12 goto label11;

        interfaceinvoke r23.<org.apache.batik.dom.ExtendedNode: void setNextSibling(org.w3c.dom.Node)>(r13);

        interfaceinvoke r13.<org.apache.batik.dom.ExtendedNode: void setPreviousSibling(org.w3c.dom.Node)>(r23);

        interfaceinvoke r13.<org.apache.batik.dom.ExtendedNode: void setNextSibling(org.w3c.dom.Node)>(r6);

        interfaceinvoke r6.<org.apache.batik.dom.ExtendedNode: void setPreviousSibling(org.w3c.dom.Node)>(r13);

        interfaceinvoke r0.<org.apache.batik.dom.ExtendedNode: void setPreviousSibling(org.w3c.dom.Node)>(null);

        interfaceinvoke r0.<org.apache.batik.dom.ExtendedNode: void setNextSibling(org.w3c.dom.Node)>(null);

        $s0 = interfaceinvoke r0.<org.w3c.dom.Node: short getNodeType()>();

        if $s0 != 1 goto label09;

        $i4 = r1.<org.apache.batik.dom.AbstractParentNode$ChildNodes: int elementChildren>;

        $i5 = $i4 - 1;

        r1.<org.apache.batik.dom.AbstractParentNode$ChildNodes: int elementChildren> = $i5;

     label09:
        $s1 = interfaceinvoke r13.<org.w3c.dom.Node: short getNodeType()>();

        if $s1 != 1 goto label10;

        $i2 = r1.<org.apache.batik.dom.AbstractParentNode$ChildNodes: int elementChildren>;

        $i3 = $i2 + 1;

        r1.<org.apache.batik.dom.AbstractParentNode$ChildNodes: int elementChildren> = $i3;

     label10:
        return r0;

     label11:
        $r24 = r1.<org.apache.batik.dom.AbstractParentNode$ChildNodes: org.apache.batik.dom.AbstractParentNode this$0>;

        $r25 = newarray (java.lang.Object)[2];

        $r29 = new java.lang.Integer;

        $s18 = interfaceinvoke r0.<org.w3c.dom.Node: short getNodeType()>();

        $i19 = (int) $s18;

        specialinvoke $r29.<java.lang.Integer: void <init>(int)>($i19);

        $r25[0] = $r29;

        $r27 = interfaceinvoke r0.<org.w3c.dom.Node: java.lang.String getNodeName()>();

        $r25[1] = $r27;

        $r28 = virtualinvoke $r24.<org.apache.batik.dom.AbstractNode: org.w3c.dom.DOMException createDOMException(short,java.lang.String,java.lang.Object[])>(8, "child.missing", $r25);

        throw $r28;
    }

    public org.apache.batik.dom.ExtendedNode remove(org.apache.batik.dom.ExtendedNode)
    {
        org.apache.batik.dom.AbstractParentNode$ChildNodes r1;
        org.apache.batik.dom.ExtendedNode r0, $r2, $r3, r5, r7, $r14, $r16, $r17, $r18, $r19, $r21, $r22;
        java.lang.Integer $r28;
        java.lang.Object[] $r24;
        short $s2, $s7, $s10, $s17, $s20;
        org.w3c.dom.Node $r4, $r6, $r8, $r9, $r10, $r11, $r12, $r13, $r15, $r20;
        org.w3c.dom.DOMException $r27;
        int $i0, $i1, $i3, $i4, $i5, $i6, $i8, $i9, $i11, $i12, $i13, $i14, $i15, $i16, $i18, $i19, $i21;
        java.lang.String $r26;
        org.apache.batik.dom.AbstractParentNode $r23;

        r1 := @this: org.apache.batik.dom.AbstractParentNode$ChildNodes;

        r0 := @parameter0: org.apache.batik.dom.ExtendedNode;

        $r2 = r1.<org.apache.batik.dom.AbstractParentNode$ChildNodes: org.apache.batik.dom.ExtendedNode firstChild>;

        if r0 != $r2 goto label4;

        $r18 = r1.<org.apache.batik.dom.AbstractParentNode$ChildNodes: org.apache.batik.dom.ExtendedNode lastChild>;

        if r0 != $r18 goto label2;

        r1.<org.apache.batik.dom.AbstractParentNode$ChildNodes: org.apache.batik.dom.ExtendedNode firstChild> = null;

        r1.<org.apache.batik.dom.AbstractParentNode$ChildNodes: org.apache.batik.dom.ExtendedNode lastChild> = null;

        $i15 = r1.<org.apache.batik.dom.AbstractParentNode$ChildNodes: int children>;

        $i16 = $i15 - 1;

        r1.<org.apache.batik.dom.AbstractParentNode$ChildNodes: int children> = $i16;

        $s17 = interfaceinvoke r0.<org.w3c.dom.Node: short getNodeType()>();

        if $s17 != 1 goto label1;

        $i18 = r1.<org.apache.batik.dom.AbstractParentNode$ChildNodes: int elementChildren>;

        $i19 = $i18 - 1;

        r1.<org.apache.batik.dom.AbstractParentNode$ChildNodes: int elementChildren> = $i19;

     label1:
        return r0;

     label2:
        $r19 = r1.<org.apache.batik.dom.AbstractParentNode$ChildNodes: org.apache.batik.dom.ExtendedNode firstChild>;

        $r20 = interfaceinvoke $r19.<org.w3c.dom.Node: org.w3c.dom.Node getNextSibling()>();

        $r21 = (org.apache.batik.dom.ExtendedNode) $r20;

        r1.<org.apache.batik.dom.AbstractParentNode$ChildNodes: org.apache.batik.dom.ExtendedNode firstChild> = $r21;

        $r22 = r1.<org.apache.batik.dom.AbstractParentNode$ChildNodes: org.apache.batik.dom.ExtendedNode firstChild>;

        interfaceinvoke $r22.<org.apache.batik.dom.ExtendedNode: void setPreviousSibling(org.w3c.dom.Node)>(null);

        interfaceinvoke r0.<org.apache.batik.dom.ExtendedNode: void setNextSibling(org.w3c.dom.Node)>(null);

        $s10 = interfaceinvoke r0.<org.w3c.dom.Node: short getNodeType()>();

        if $s10 != 1 goto label3;

        $i13 = r1.<org.apache.batik.dom.AbstractParentNode$ChildNodes: int elementChildren>;

        $i14 = $i13 - 1;

        r1.<org.apache.batik.dom.AbstractParentNode$ChildNodes: int elementChildren> = $i14;

     label3:
        $i11 = r1.<org.apache.batik.dom.AbstractParentNode$ChildNodes: int children>;

        $i12 = $i11 - 1;

        r1.<org.apache.batik.dom.AbstractParentNode$ChildNodes: int children> = $i12;

        return r0;

     label4:
        $r3 = r1.<org.apache.batik.dom.AbstractParentNode$ChildNodes: org.apache.batik.dom.ExtendedNode lastChild>;

        if r0 != $r3 goto label6;

        $r14 = r1.<org.apache.batik.dom.AbstractParentNode$ChildNodes: org.apache.batik.dom.ExtendedNode lastChild>;

        $r15 = interfaceinvoke $r14.<org.w3c.dom.Node: org.w3c.dom.Node getPreviousSibling()>();

        $r16 = (org.apache.batik.dom.ExtendedNode) $r15;

        r1.<org.apache.batik.dom.AbstractParentNode$ChildNodes: org.apache.batik.dom.ExtendedNode lastChild> = $r16;

        $r17 = r1.<org.apache.batik.dom.AbstractParentNode$ChildNodes: org.apache.batik.dom.ExtendedNode lastChild>;

        interfaceinvoke $r17.<org.apache.batik.dom.ExtendedNode: void setNextSibling(org.w3c.dom.Node)>(null);

        interfaceinvoke r0.<org.apache.batik.dom.ExtendedNode: void setPreviousSibling(org.w3c.dom.Node)>(null);

        $i5 = r1.<org.apache.batik.dom.AbstractParentNode$ChildNodes: int children>;

        $i6 = $i5 - 1;

        r1.<org.apache.batik.dom.AbstractParentNode$ChildNodes: int children> = $i6;

        $s7 = interfaceinvoke r0.<org.w3c.dom.Node: short getNodeType()>();

        if $s7 != 1 goto label5;

        $i8 = r1.<org.apache.batik.dom.AbstractParentNode$ChildNodes: int elementChildren>;

        $i9 = $i8 - 1;

        r1.<org.apache.batik.dom.AbstractParentNode$ChildNodes: int elementChildren> = $i9;

     label5:
        return r0;

     label6:
        $r4 = interfaceinvoke r0.<org.w3c.dom.Node: org.w3c.dom.Node getPreviousSibling()>();

        r5 = (org.apache.batik.dom.ExtendedNode) $r4;

        $r6 = interfaceinvoke r0.<org.w3c.dom.Node: org.w3c.dom.Node getNextSibling()>();

        r7 = (org.apache.batik.dom.ExtendedNode) $r6;

        $r8 = interfaceinvoke r5.<org.w3c.dom.Node: org.w3c.dom.Node getNextSibling()>();

        if $r8 != r0 goto label8;

        $r9 = interfaceinvoke r7.<org.w3c.dom.Node: org.w3c.dom.Node getPreviousSibling()>();

        if $r9 != r0 goto label8;

        $r10 = interfaceinvoke r5.<org.w3c.dom.Node: org.w3c.dom.Node getParentNode()>();

        $r11 = interfaceinvoke r0.<org.w3c.dom.Node: org.w3c.dom.Node getParentNode()>();

        if $r10 != $r11 goto label8;

        $r12 = interfaceinvoke r7.<org.w3c.dom.Node: org.w3c.dom.Node getParentNode()>();

        $r13 = interfaceinvoke r0.<org.w3c.dom.Node: org.w3c.dom.Node getParentNode()>();

        if $r12 != $r13 goto label8;

        interfaceinvoke r5.<org.apache.batik.dom.ExtendedNode: void setNextSibling(org.w3c.dom.Node)>(r7);

        interfaceinvoke r7.<org.apache.batik.dom.ExtendedNode: void setPreviousSibling(org.w3c.dom.Node)>(r5);

        interfaceinvoke r0.<org.apache.batik.dom.ExtendedNode: void setPreviousSibling(org.w3c.dom.Node)>(null);

        interfaceinvoke r0.<org.apache.batik.dom.ExtendedNode: void setNextSibling(org.w3c.dom.Node)>(null);

        $i0 = r1.<org.apache.batik.dom.AbstractParentNode$ChildNodes: int children>;

        $i1 = $i0 - 1;

        r1.<org.apache.batik.dom.AbstractParentNode$ChildNodes: int children> = $i1;

        $s2 = interfaceinvoke r0.<org.w3c.dom.Node: short getNodeType()>();

        if $s2 != 1 goto label7;

        $i3 = r1.<org.apache.batik.dom.AbstractParentNode$ChildNodes: int elementChildren>;

        $i4 = $i3 - 1;

        r1.<org.apache.batik.dom.AbstractParentNode$ChildNodes: int elementChildren> = $i4;

     label7:
        return r0;

     label8:
        $r23 = r1.<org.apache.batik.dom.AbstractParentNode$ChildNodes: org.apache.batik.dom.AbstractParentNode this$0>;

        $r24 = newarray (java.lang.Object)[2];

        $r28 = new java.lang.Integer;

        $s20 = interfaceinvoke r0.<org.w3c.dom.Node: short getNodeType()>();

        $i21 = (int) $s20;

        specialinvoke $r28.<java.lang.Integer: void <init>(int)>($i21);

        $r24[0] = $r28;

        $r26 = interfaceinvoke r0.<org.w3c.dom.Node: java.lang.String getNodeName()>();

        $r24[1] = $r26;

        $r27 = virtualinvoke $r23.<org.apache.batik.dom.AbstractNode: org.w3c.dom.DOMException createDOMException(short,java.lang.String,java.lang.Object[])>(8, "child.missing", $r24);

        throw $r27;
    }
}
