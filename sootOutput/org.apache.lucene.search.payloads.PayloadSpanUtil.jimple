public class org.apache.lucene.search.payloads.PayloadSpanUtil extends java.lang.Object
{
    private org.apache.lucene.index.IndexReaderContext context;

    public void <init>(org.apache.lucene.index.IndexReaderContext)
    {
        org.apache.lucene.search.payloads.PayloadSpanUtil r0;
        org.apache.lucene.index.IndexReaderContext r1;

        r0 := @this: org.apache.lucene.search.payloads.PayloadSpanUtil;

        r1 := @parameter0: org.apache.lucene.index.IndexReaderContext;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.lucene.search.payloads.PayloadSpanUtil: org.apache.lucene.index.IndexReaderContext context> = r1;

        return;
    }

    public java.util.Collection getPayloadsForQuery(org.apache.lucene.search.Query) throws java.io.IOException
    {
        org.apache.lucene.search.payloads.PayloadSpanUtil r1;
        org.apache.lucene.search.Query r2;
        java.util.ArrayList $r0;

        r1 := @this: org.apache.lucene.search.payloads.PayloadSpanUtil;

        r2 := @parameter0: org.apache.lucene.search.Query;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        specialinvoke r1.<org.apache.lucene.search.payloads.PayloadSpanUtil: void queryToSpanQuery(org.apache.lucene.search.Query,java.util.Collection)>(r2, $r0);

        return $r0;
    }

    private void queryToSpanQuery(org.apache.lucene.search.Query, java.util.Collection) throws java.io.IOException
    {
        org.apache.lucene.search.Query r0, $r17, $r19, $r34;
        org.apache.lucene.index.Term r11, $r23, $r29;
        org.apache.lucene.search.PhraseQuery $r24, $r26;
        org.apache.lucene.index.Term[] $r25, r38;
        java.lang.Object[] $r8;
        org.apache.lucene.search.payloads.PayloadSpanUtil r4;
        org.apache.lucene.search.spans.SpanQuery[] $r7, $r9, r35, r40;
        java.util.ArrayList $r13;
        org.apache.lucene.search.MultiPhraseQuery r36;
        org.apache.lucene.search.spans.SpanNearQuery $r3, $r27;
        org.apache.lucene.search.BooleanClause $r32, $r33;
        org.apache.lucene.search.spans.SpanOrQuery $r6;
        java.util.List[] r37;
        int[] $r2;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, z9, $z10;
        java.util.Collection r5;
        java.util.List $r1, r39, r41;
        org.apache.lucene.search.DisjunctionMaxQuery $r14;
        float $f0, $f1, $f2;
        org.apache.lucene.search.spans.SpanTermQuery $r12, $r21, $r28;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, i21, i22, i23, i24, i25, i26, i27, i28, i29, i30;
        org.apache.lucene.search.spans.SpanQuery $r20;
        org.apache.lucene.search.BooleanClause[] $r31;
        org.apache.lucene.search.FilteredQuery $r18;
        java.util.Iterator $r15;
        org.apache.lucene.search.TermQuery $r22;
        org.apache.lucene.search.BooleanQuery $r30;
        java.lang.Object $r10, $r16;

        r4 := @this: org.apache.lucene.search.payloads.PayloadSpanUtil;

        r0 := @parameter0: org.apache.lucene.search.Query;

        r5 := @parameter1: java.util.Collection;

        $z0 = r0 instanceof org.apache.lucene.search.BooleanQuery;

        if $z0 == 0 goto label04;

        $r30 = (org.apache.lucene.search.BooleanQuery) r0;

        $r31 = virtualinvoke $r30.<org.apache.lucene.search.BooleanQuery: org.apache.lucene.search.BooleanClause[] getClauses()>();

        i21 = 0;

     label01:
        $i20 = lengthof $r31;

        if i21 >= $i20 goto label03;

        $r32 = $r31[i21];

        $z8 = virtualinvoke $r32.<org.apache.lucene.search.BooleanClause: boolean isProhibited()>();

        if $z8 != 0 goto label02;

        $r33 = $r31[i21];

        $r34 = virtualinvoke $r33.<org.apache.lucene.search.BooleanClause: org.apache.lucene.search.Query getQuery()>();

        specialinvoke r4.<org.apache.lucene.search.payloads.PayloadSpanUtil: void queryToSpanQuery(org.apache.lucene.search.Query,java.util.Collection)>($r34, r5);

     label02:
        i21 = i21 + 1;

        goto label01;

     label03:
        goto label29;

     label04:
        $z1 = r0 instanceof org.apache.lucene.search.PhraseQuery;

        if $z1 == 0 goto label08;

        $r24 = (org.apache.lucene.search.PhraseQuery) r0;

        $r25 = virtualinvoke $r24.<org.apache.lucene.search.PhraseQuery: org.apache.lucene.index.Term[] getTerms()>();

        $i17 = lengthof $r25;

        r35 = newarray (org.apache.lucene.search.spans.SpanQuery)[$i17];

        i22 = 0;

     label05:
        $i18 = lengthof $r25;

        if i22 >= $i18 goto label06;

        $r28 = new org.apache.lucene.search.spans.SpanTermQuery;

        $r29 = $r25[i22];

        specialinvoke $r28.<org.apache.lucene.search.spans.SpanTermQuery: void <init>(org.apache.lucene.index.Term)>($r29);

        r35[i22] = $r28;

        i22 = i22 + 1;

        goto label05;

     label06:
        $r26 = (org.apache.lucene.search.PhraseQuery) r0;

        $i19 = virtualinvoke $r26.<org.apache.lucene.search.PhraseQuery: int getSlop()>();

        z9 = 0;

        if $i19 != 0 goto label07;

        z9 = 1;

     label07:
        $r27 = new org.apache.lucene.search.spans.SpanNearQuery;

        specialinvoke $r27.<org.apache.lucene.search.spans.SpanNearQuery: void <init>(org.apache.lucene.search.spans.SpanQuery[],int,boolean)>(r35, $i19, z9);

        $f2 = virtualinvoke r0.<org.apache.lucene.search.Query: float getBoost()>();

        virtualinvoke $r27.<org.apache.lucene.search.spans.SpanNearQuery: void setBoost(float)>($f2);

        specialinvoke r4.<org.apache.lucene.search.payloads.PayloadSpanUtil: void getPayloads(java.util.Collection,org.apache.lucene.search.spans.SpanQuery)>(r5, $r27);

        goto label29;

     label08:
        $z2 = r0 instanceof org.apache.lucene.search.TermQuery;

        if $z2 == 0 goto label09;

        $r21 = new org.apache.lucene.search.spans.SpanTermQuery;

        $r22 = (org.apache.lucene.search.TermQuery) r0;

        $r23 = virtualinvoke $r22.<org.apache.lucene.search.TermQuery: org.apache.lucene.index.Term getTerm()>();

        specialinvoke $r21.<org.apache.lucene.search.spans.SpanTermQuery: void <init>(org.apache.lucene.index.Term)>($r23);

        $f1 = virtualinvoke r0.<org.apache.lucene.search.Query: float getBoost()>();

        virtualinvoke $r21.<org.apache.lucene.search.spans.SpanTermQuery: void setBoost(float)>($f1);

        specialinvoke r4.<org.apache.lucene.search.payloads.PayloadSpanUtil: void getPayloads(java.util.Collection,org.apache.lucene.search.spans.SpanQuery)>(r5, $r21);

        goto label29;

     label09:
        $z3 = r0 instanceof org.apache.lucene.search.spans.SpanQuery;

        if $z3 == 0 goto label10;

        $r20 = (org.apache.lucene.search.spans.SpanQuery) r0;

        specialinvoke r4.<org.apache.lucene.search.payloads.PayloadSpanUtil: void getPayloads(java.util.Collection,org.apache.lucene.search.spans.SpanQuery)>(r5, $r20);

        goto label29;

     label10:
        $z4 = r0 instanceof org.apache.lucene.search.FilteredQuery;

        if $z4 == 0 goto label11;

        $r18 = (org.apache.lucene.search.FilteredQuery) r0;

        $r19 = virtualinvoke $r18.<org.apache.lucene.search.FilteredQuery: org.apache.lucene.search.Query getQuery()>();

        specialinvoke r4.<org.apache.lucene.search.payloads.PayloadSpanUtil: void queryToSpanQuery(org.apache.lucene.search.Query,java.util.Collection)>($r19, r5);

        goto label29;

     label11:
        $z5 = r0 instanceof org.apache.lucene.search.DisjunctionMaxQuery;

        if $z5 == 0 goto label14;

        $r14 = (org.apache.lucene.search.DisjunctionMaxQuery) r0;

        $r15 = virtualinvoke $r14.<org.apache.lucene.search.DisjunctionMaxQuery: java.util.Iterator iterator()>();

     label12:
        $z7 = interfaceinvoke $r15.<java.util.Iterator: boolean hasNext()>();

        if $z7 == 0 goto label13;

        $r16 = interfaceinvoke $r15.<java.util.Iterator: java.lang.Object next()>();

        $r17 = (org.apache.lucene.search.Query) $r16;

        specialinvoke r4.<org.apache.lucene.search.payloads.PayloadSpanUtil: void queryToSpanQuery(org.apache.lucene.search.Query,java.util.Collection)>($r17, r5);

        goto label12;

     label13:
        goto label29;

     label14:
        $z6 = r0 instanceof org.apache.lucene.search.MultiPhraseQuery;

        if $z6 == 0 goto label29;

        r36 = (org.apache.lucene.search.MultiPhraseQuery) r0;

        $r1 = virtualinvoke r36.<org.apache.lucene.search.MultiPhraseQuery: java.util.List getTermArrays()>();

        $r2 = virtualinvoke r36.<org.apache.lucene.search.MultiPhraseQuery: int[] getPositions()>();

        $i0 = lengthof $r2;

        if $i0 <= 0 goto label29;

        $i1 = lengthof $r2;

        $i2 = $i1 - 1;

        i23 = $r2[$i2];

        i24 = 0;

     label15:
        $i3 = lengthof $r2;

        $i4 = $i3 - 1;

        if i24 >= $i4 goto label17;

        $i16 = $r2[i24];

        if $i16 <= i23 goto label16;

        i23 = $r2[i24];

     label16:
        i24 = i24 + 1;

        goto label15;

     label17:
        $i5 = i23 + 1;

        r37 = newarray (java.util.List)[$i5];

        i25 = 0;

        i26 = 0;

     label18:
        $i6 = interfaceinvoke $r1.<java.util.List: int size()>();

        if i26 >= $i6 goto label22;

        $r10 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i26);

        r38 = (org.apache.lucene.index.Term[]) $r10;

        $i12 = $r2[i26];

        r39 = r37[$i12];

        if r39 != null goto label19;

        $i14 = $r2[i26];

        $r13 = new java.util.ArrayList;

        $i13 = lengthof r38;

        specialinvoke $r13.<java.util.ArrayList: void <init>(int)>($i13);

        r37[$i14] = $r13;

        r39 = $r13;

        i25 = i25 + 1;

     label19:
        $i15 = lengthof r38;

        i27 = 0;

     label20:
        if i27 >= $i15 goto label21;

        r11 = r38[i27];

        $r12 = new org.apache.lucene.search.spans.SpanTermQuery;

        specialinvoke $r12.<org.apache.lucene.search.spans.SpanTermQuery: void <init>(org.apache.lucene.index.Term)>(r11);

        interfaceinvoke r39.<java.util.List: boolean add(java.lang.Object)>($r12);

        i27 = i27 + 1;

        goto label20;

     label21:
        i26 = i26 + 1;

        goto label18;

     label22:
        i28 = 0;

        i29 = 0;

        r40 = newarray (org.apache.lucene.search.spans.SpanQuery)[i25];

        i30 = 0;

     label23:
        $i7 = lengthof r37;

        if i30 >= $i7 goto label26;

        r41 = r37[i30];

        if r41 == null goto label24;

        $i10 = i29;

        i29 = i29 + 1;

        $r6 = new org.apache.lucene.search.spans.SpanOrQuery;

        $i11 = interfaceinvoke r41.<java.util.List: int size()>();

        $r7 = newarray (org.apache.lucene.search.spans.SpanQuery)[$i11];

        $r8 = interfaceinvoke r41.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r7);

        $r9 = (org.apache.lucene.search.spans.SpanQuery[]) $r8;

        specialinvoke $r6.<org.apache.lucene.search.spans.SpanOrQuery: void <init>(org.apache.lucene.search.spans.SpanQuery[])>($r9);

        r40[$i10] = $r6;

        goto label25;

     label24:
        i28 = i28 + 1;

     label25:
        i30 = i30 + 1;

        goto label23;

     label26:
        $i8 = virtualinvoke r36.<org.apache.lucene.search.MultiPhraseQuery: int getSlop()>();

        if $i8 != 0 goto label27;

        $z10 = 1;

        goto label28;

     label27:
        $z10 = 0;

     label28:
        $r3 = new org.apache.lucene.search.spans.SpanNearQuery;

        $i9 = $i8 + i28;

        specialinvoke $r3.<org.apache.lucene.search.spans.SpanNearQuery: void <init>(org.apache.lucene.search.spans.SpanQuery[],int,boolean)>(r40, $i9, $z10);

        $f0 = virtualinvoke r0.<org.apache.lucene.search.Query: float getBoost()>();

        virtualinvoke $r3.<org.apache.lucene.search.spans.SpanNearQuery: void setBoost(float)>($f0);

        specialinvoke r4.<org.apache.lucene.search.payloads.PayloadSpanUtil: void getPayloads(java.util.Collection,org.apache.lucene.search.spans.SpanQuery)>(r5, $r3);

     label29:
        return;
    }

    private void getPayloads(java.util.Collection, org.apache.lucene.search.spans.SpanQuery) throws java.io.IOException
    {
        byte[] r15;
        org.apache.lucene.search.payloads.PayloadSpanUtil r4;
        org.apache.lucene.index.Term r20;
        java.util.HashMap $r0;
        java.util.TreeSet $r1;
        org.apache.lucene.search.spans.SpanQuery r2;
        org.apache.lucene.util.Bits $r10;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.util.Iterator $r3, $r7, $r13;
        java.util.Collection $r12, r16;
        org.apache.lucene.index.TermContext $r19;
        java.util.List $r6;
        java.lang.Object $r8, $r14, $r17;
        org.apache.lucene.index.AtomicReader $r9;
        org.apache.lucene.search.spans.Spans $r11;
        org.apache.lucene.index.AtomicReaderContext r21;
        org.apache.lucene.index.IndexReaderContext $r5, $r18;

        r4 := @this: org.apache.lucene.search.payloads.PayloadSpanUtil;

        r16 := @parameter0: java.util.Collection;

        r2 := @parameter1: org.apache.lucene.search.spans.SpanQuery;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        $r1 = new java.util.TreeSet;

        specialinvoke $r1.<java.util.TreeSet: void <init>()>();

        virtualinvoke r2.<org.apache.lucene.search.spans.SpanQuery: void extractTerms(java.util.Set)>($r1);

        $r3 = virtualinvoke $r1.<java.util.TreeSet: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r17 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r20 = (org.apache.lucene.index.Term) $r17;

        $r18 = r4.<org.apache.lucene.search.payloads.PayloadSpanUtil: org.apache.lucene.index.IndexReaderContext context>;

        $r19 = staticinvoke <org.apache.lucene.index.TermContext: org.apache.lucene.index.TermContext build(org.apache.lucene.index.IndexReaderContext,org.apache.lucene.index.Term,boolean)>($r18, r20, 1);

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r20, $r19);

        goto label1;

     label2:
        $r5 = r4.<org.apache.lucene.search.payloads.PayloadSpanUtil: org.apache.lucene.index.IndexReaderContext context>;

        $r6 = virtualinvoke $r5.<org.apache.lucene.index.IndexReaderContext: java.util.List leaves()>();

        $r7 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label8;

        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r21 = (org.apache.lucene.index.AtomicReaderContext) $r8;

        $r9 = virtualinvoke r21.<org.apache.lucene.index.AtomicReaderContext: org.apache.lucene.index.AtomicReader reader()>();

        $r10 = virtualinvoke $r9.<org.apache.lucene.index.AtomicReader: org.apache.lucene.util.Bits getLiveDocs()>();

        $r11 = virtualinvoke r2.<org.apache.lucene.search.spans.SpanQuery: org.apache.lucene.search.spans.Spans getSpans(org.apache.lucene.index.AtomicReaderContext,org.apache.lucene.util.Bits,java.util.Map)>(r21, $r10, $r0);

     label4:
        $z4 = virtualinvoke $r11.<org.apache.lucene.search.spans.Spans: boolean next()>();

        if $z4 != 1 goto label7;

        $z2 = virtualinvoke $r11.<org.apache.lucene.search.spans.Spans: boolean isPayloadAvailable()>();

        if $z2 == 0 goto label4;

        $r12 = virtualinvoke $r11.<org.apache.lucene.search.spans.Spans: java.util.Collection getPayload()>();

        $r13 = interfaceinvoke $r12.<java.util.Collection: java.util.Iterator iterator()>();

     label5:
        $z3 = interfaceinvoke $r13.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label6;

        $r14 = interfaceinvoke $r13.<java.util.Iterator: java.lang.Object next()>();

        r15 = (byte[]) $r14;

        interfaceinvoke r16.<java.util.Collection: boolean add(java.lang.Object)>(r15);

        goto label5;

     label6:
        goto label4;

     label7:
        goto label3;

     label8:
        return;
    }
}
