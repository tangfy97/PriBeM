public class org.apache.xalan.templates.ElemNumber extends org.apache.xalan.templates.ElemTemplateElement
{
    private org.apache.xpath.XPath m_countMatchPattern;
    private org.apache.xpath.XPath m_fromMatchPattern;
    private int m_level;
    private org.apache.xpath.XPath m_valueExpr;
    private org.apache.xalan.templates.AVT m_format_avt;
    private org.apache.xalan.templates.AVT m_lang_avt;
    private org.apache.xalan.templates.AVT m_lettervalue_avt;
    private org.apache.xalan.templates.AVT m_groupingSeparator_avt;
    private org.apache.xalan.templates.AVT m_groupingSize_avt;
    private static final org.apache.xalan.transformer.DecimalToRoman[] m_romanConvertTable;
    private static char[] m_alphaCountTable;

    public void <init>()
    {
        org.apache.xalan.templates.ElemNumber r0;

        r0 := @this: org.apache.xalan.templates.ElemNumber;

        specialinvoke r0.<org.apache.xalan.templates.ElemTemplateElement: void <init>()>();

        r0.<org.apache.xalan.templates.ElemNumber: org.apache.xpath.XPath m_countMatchPattern> = null;

        r0.<org.apache.xalan.templates.ElemNumber: org.apache.xpath.XPath m_fromMatchPattern> = null;

        r0.<org.apache.xalan.templates.ElemNumber: int m_level> = 1;

        r0.<org.apache.xalan.templates.ElemNumber: org.apache.xpath.XPath m_valueExpr> = null;

        r0.<org.apache.xalan.templates.ElemNumber: org.apache.xalan.templates.AVT m_format_avt> = null;

        r0.<org.apache.xalan.templates.ElemNumber: org.apache.xalan.templates.AVT m_lang_avt> = null;

        r0.<org.apache.xalan.templates.ElemNumber: org.apache.xalan.templates.AVT m_lettervalue_avt> = null;

        r0.<org.apache.xalan.templates.ElemNumber: org.apache.xalan.templates.AVT m_groupingSeparator_avt> = null;

        r0.<org.apache.xalan.templates.ElemNumber: org.apache.xalan.templates.AVT m_groupingSize_avt> = null;

        return;
    }

    public void setCount(org.apache.xpath.XPath)
    {
        org.apache.xpath.XPath r1;
        org.apache.xalan.templates.ElemNumber r0;

        r0 := @this: org.apache.xalan.templates.ElemNumber;

        r1 := @parameter0: org.apache.xpath.XPath;

        r0.<org.apache.xalan.templates.ElemNumber: org.apache.xpath.XPath m_countMatchPattern> = r1;

        return;
    }

    public org.apache.xpath.XPath getCount()
    {
        org.apache.xpath.XPath $r1;
        org.apache.xalan.templates.ElemNumber r0;

        r0 := @this: org.apache.xalan.templates.ElemNumber;

        $r1 = r0.<org.apache.xalan.templates.ElemNumber: org.apache.xpath.XPath m_countMatchPattern>;

        return $r1;
    }

    public void setFrom(org.apache.xpath.XPath)
    {
        org.apache.xpath.XPath r1;
        org.apache.xalan.templates.ElemNumber r0;

        r0 := @this: org.apache.xalan.templates.ElemNumber;

        r1 := @parameter0: org.apache.xpath.XPath;

        r0.<org.apache.xalan.templates.ElemNumber: org.apache.xpath.XPath m_fromMatchPattern> = r1;

        return;
    }

    public org.apache.xpath.XPath getFrom()
    {
        org.apache.xpath.XPath $r1;
        org.apache.xalan.templates.ElemNumber r0;

        r0 := @this: org.apache.xalan.templates.ElemNumber;

        $r1 = r0.<org.apache.xalan.templates.ElemNumber: org.apache.xpath.XPath m_fromMatchPattern>;

        return $r1;
    }

    public void setLevel(int)
    {
        int i0;
        org.apache.xalan.templates.ElemNumber r0;

        r0 := @this: org.apache.xalan.templates.ElemNumber;

        i0 := @parameter0: int;

        r0.<org.apache.xalan.templates.ElemNumber: int m_level> = i0;

        return;
    }

    public int getLevel()
    {
        int $i0;
        org.apache.xalan.templates.ElemNumber r0;

        r0 := @this: org.apache.xalan.templates.ElemNumber;

        $i0 = r0.<org.apache.xalan.templates.ElemNumber: int m_level>;

        return $i0;
    }

    public void setValue(org.apache.xpath.XPath)
    {
        org.apache.xpath.XPath r1;
        org.apache.xalan.templates.ElemNumber r0;

        r0 := @this: org.apache.xalan.templates.ElemNumber;

        r1 := @parameter0: org.apache.xpath.XPath;

        r0.<org.apache.xalan.templates.ElemNumber: org.apache.xpath.XPath m_valueExpr> = r1;

        return;
    }

    public org.apache.xpath.XPath getValue()
    {
        org.apache.xpath.XPath $r1;
        org.apache.xalan.templates.ElemNumber r0;

        r0 := @this: org.apache.xalan.templates.ElemNumber;

        $r1 = r0.<org.apache.xalan.templates.ElemNumber: org.apache.xpath.XPath m_valueExpr>;

        return $r1;
    }

    public void setFormat(org.apache.xalan.templates.AVT)
    {
        org.apache.xalan.templates.ElemNumber r0;
        org.apache.xalan.templates.AVT r1;

        r0 := @this: org.apache.xalan.templates.ElemNumber;

        r1 := @parameter0: org.apache.xalan.templates.AVT;

        r0.<org.apache.xalan.templates.ElemNumber: org.apache.xalan.templates.AVT m_format_avt> = r1;

        return;
    }

    public org.apache.xalan.templates.AVT getFormat()
    {
        org.apache.xalan.templates.ElemNumber r0;
        org.apache.xalan.templates.AVT $r1;

        r0 := @this: org.apache.xalan.templates.ElemNumber;

        $r1 = r0.<org.apache.xalan.templates.ElemNumber: org.apache.xalan.templates.AVT m_format_avt>;

        return $r1;
    }

    public void setLang(org.apache.xalan.templates.AVT)
    {
        org.apache.xalan.templates.ElemNumber r0;
        org.apache.xalan.templates.AVT r1;

        r0 := @this: org.apache.xalan.templates.ElemNumber;

        r1 := @parameter0: org.apache.xalan.templates.AVT;

        r0.<org.apache.xalan.templates.ElemNumber: org.apache.xalan.templates.AVT m_lang_avt> = r1;

        return;
    }

    public org.apache.xalan.templates.AVT getLang()
    {
        org.apache.xalan.templates.ElemNumber r0;
        org.apache.xalan.templates.AVT $r1;

        r0 := @this: org.apache.xalan.templates.ElemNumber;

        $r1 = r0.<org.apache.xalan.templates.ElemNumber: org.apache.xalan.templates.AVT m_lang_avt>;

        return $r1;
    }

    public void setLetterValue(org.apache.xalan.templates.AVT)
    {
        org.apache.xalan.templates.ElemNumber r0;
        org.apache.xalan.templates.AVT r1;

        r0 := @this: org.apache.xalan.templates.ElemNumber;

        r1 := @parameter0: org.apache.xalan.templates.AVT;

        r0.<org.apache.xalan.templates.ElemNumber: org.apache.xalan.templates.AVT m_lettervalue_avt> = r1;

        return;
    }

    public org.apache.xalan.templates.AVT getLetterValue()
    {
        org.apache.xalan.templates.ElemNumber r0;
        org.apache.xalan.templates.AVT $r1;

        r0 := @this: org.apache.xalan.templates.ElemNumber;

        $r1 = r0.<org.apache.xalan.templates.ElemNumber: org.apache.xalan.templates.AVT m_lettervalue_avt>;

        return $r1;
    }

    public void setGroupingSeparator(org.apache.xalan.templates.AVT)
    {
        org.apache.xalan.templates.ElemNumber r0;
        org.apache.xalan.templates.AVT r1;

        r0 := @this: org.apache.xalan.templates.ElemNumber;

        r1 := @parameter0: org.apache.xalan.templates.AVT;

        r0.<org.apache.xalan.templates.ElemNumber: org.apache.xalan.templates.AVT m_groupingSeparator_avt> = r1;

        return;
    }

    public org.apache.xalan.templates.AVT getGroupingSeparator()
    {
        org.apache.xalan.templates.ElemNumber r0;
        org.apache.xalan.templates.AVT $r1;

        r0 := @this: org.apache.xalan.templates.ElemNumber;

        $r1 = r0.<org.apache.xalan.templates.ElemNumber: org.apache.xalan.templates.AVT m_groupingSeparator_avt>;

        return $r1;
    }

    public void setGroupingSize(org.apache.xalan.templates.AVT)
    {
        org.apache.xalan.templates.ElemNumber r0;
        org.apache.xalan.templates.AVT r1;

        r0 := @this: org.apache.xalan.templates.ElemNumber;

        r1 := @parameter0: org.apache.xalan.templates.AVT;

        r0.<org.apache.xalan.templates.ElemNumber: org.apache.xalan.templates.AVT m_groupingSize_avt> = r1;

        return;
    }

    public org.apache.xalan.templates.AVT getGroupingSize()
    {
        org.apache.xalan.templates.ElemNumber r0;
        org.apache.xalan.templates.AVT $r1;

        r0 := @this: org.apache.xalan.templates.ElemNumber;

        $r1 = r0.<org.apache.xalan.templates.ElemNumber: org.apache.xalan.templates.AVT m_groupingSize_avt>;

        return $r1;
    }

    public void compose(org.apache.xalan.templates.StylesheetRoot) throws javax.xml.transform.TransformerException
    {
        org.apache.xalan.templates.AVT $r5, $r7, $r8, $r9, $r10, $r13, $r14, $r15, $r16, $r18;
        java.util.Vector $r3;
        org.apache.xalan.templates.StylesheetRoot$ComposeState $r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        org.apache.xalan.templates.ElemNumber r0;
        org.apache.xpath.XPath $r4, $r6, $r11, $r12, $r17, $r19;
        org.apache.xalan.templates.StylesheetRoot r1;

        r0 := @this: org.apache.xalan.templates.ElemNumber;

        r1 := @parameter0: org.apache.xalan.templates.StylesheetRoot;

        specialinvoke r0.<org.apache.xalan.templates.ElemTemplateElement: void compose(org.apache.xalan.templates.StylesheetRoot)>(r1);

        $r2 = virtualinvoke r1.<org.apache.xalan.templates.StylesheetRoot: org.apache.xalan.templates.StylesheetRoot$ComposeState getComposeState()>();

        $r3 = virtualinvoke $r2.<org.apache.xalan.templates.StylesheetRoot$ComposeState: java.util.Vector getVariableNames()>();

        $r4 = r0.<org.apache.xalan.templates.ElemNumber: org.apache.xpath.XPath m_countMatchPattern>;

        if null == $r4 goto label1;

        $r19 = r0.<org.apache.xalan.templates.ElemNumber: org.apache.xpath.XPath m_countMatchPattern>;

        $i7 = virtualinvoke $r2.<org.apache.xalan.templates.StylesheetRoot$ComposeState: int getGlobalsSize()>();

        virtualinvoke $r19.<org.apache.xpath.XPath: void fixupVariables(java.util.Vector,int)>($r3, $i7);

     label1:
        $r5 = r0.<org.apache.xalan.templates.ElemNumber: org.apache.xalan.templates.AVT m_format_avt>;

        if null == $r5 goto label2;

        $r18 = r0.<org.apache.xalan.templates.ElemNumber: org.apache.xalan.templates.AVT m_format_avt>;

        $i6 = virtualinvoke $r2.<org.apache.xalan.templates.StylesheetRoot$ComposeState: int getGlobalsSize()>();

        virtualinvoke $r18.<org.apache.xalan.templates.AVT: void fixupVariables(java.util.Vector,int)>($r3, $i6);

     label2:
        $r6 = r0.<org.apache.xalan.templates.ElemNumber: org.apache.xpath.XPath m_fromMatchPattern>;

        if null == $r6 goto label3;

        $r17 = r0.<org.apache.xalan.templates.ElemNumber: org.apache.xpath.XPath m_fromMatchPattern>;

        $i5 = virtualinvoke $r2.<org.apache.xalan.templates.StylesheetRoot$ComposeState: int getGlobalsSize()>();

        virtualinvoke $r17.<org.apache.xpath.XPath: void fixupVariables(java.util.Vector,int)>($r3, $i5);

     label3:
        $r7 = r0.<org.apache.xalan.templates.ElemNumber: org.apache.xalan.templates.AVT m_groupingSeparator_avt>;

        if null == $r7 goto label4;

        $r16 = r0.<org.apache.xalan.templates.ElemNumber: org.apache.xalan.templates.AVT m_groupingSeparator_avt>;

        $i4 = virtualinvoke $r2.<org.apache.xalan.templates.StylesheetRoot$ComposeState: int getGlobalsSize()>();

        virtualinvoke $r16.<org.apache.xalan.templates.AVT: void fixupVariables(java.util.Vector,int)>($r3, $i4);

     label4:
        $r8 = r0.<org.apache.xalan.templates.ElemNumber: org.apache.xalan.templates.AVT m_groupingSize_avt>;

        if null == $r8 goto label5;

        $r15 = r0.<org.apache.xalan.templates.ElemNumber: org.apache.xalan.templates.AVT m_groupingSize_avt>;

        $i3 = virtualinvoke $r2.<org.apache.xalan.templates.StylesheetRoot$ComposeState: int getGlobalsSize()>();

        virtualinvoke $r15.<org.apache.xalan.templates.AVT: void fixupVariables(java.util.Vector,int)>($r3, $i3);

     label5:
        $r9 = r0.<org.apache.xalan.templates.ElemNumber: org.apache.xalan.templates.AVT m_lang_avt>;

        if null == $r9 goto label6;

        $r14 = r0.<org.apache.xalan.templates.ElemNumber: org.apache.xalan.templates.AVT m_lang_avt>;

        $i2 = virtualinvoke $r2.<org.apache.xalan.templates.StylesheetRoot$ComposeState: int getGlobalsSize()>();

        virtualinvoke $r14.<org.apache.xalan.templates.AVT: void fixupVariables(java.util.Vector,int)>($r3, $i2);

     label6:
        $r10 = r0.<org.apache.xalan.templates.ElemNumber: org.apache.xalan.templates.AVT m_lettervalue_avt>;

        if null == $r10 goto label7;

        $r13 = r0.<org.apache.xalan.templates.ElemNumber: org.apache.xalan.templates.AVT m_lettervalue_avt>;

        $i1 = virtualinvoke $r2.<org.apache.xalan.templates.StylesheetRoot$ComposeState: int getGlobalsSize()>();

        virtualinvoke $r13.<org.apache.xalan.templates.AVT: void fixupVariables(java.util.Vector,int)>($r3, $i1);

     label7:
        $r11 = r0.<org.apache.xalan.templates.ElemNumber: org.apache.xpath.XPath m_valueExpr>;

        if null == $r11 goto label8;

        $r12 = r0.<org.apache.xalan.templates.ElemNumber: org.apache.xpath.XPath m_valueExpr>;

        $i0 = virtualinvoke $r2.<org.apache.xalan.templates.StylesheetRoot$ComposeState: int getGlobalsSize()>();

        virtualinvoke $r12.<org.apache.xpath.XPath: void fixupVariables(java.util.Vector,int)>($r3, $i0);

     label8:
        return;
    }

    public int getXSLToken()
    {
        org.apache.xalan.templates.ElemNumber r0;

        r0 := @this: org.apache.xalan.templates.ElemNumber;

        return 35;
    }

    public java.lang.String getNodeName()
    {
        org.apache.xalan.templates.ElemNumber r0;

        r0 := @this: org.apache.xalan.templates.ElemNumber;

        return "number";
    }

    public void execute(org.apache.xalan.transformer.TransformerImpl) throws javax.xml.transform.TransformerException
    {
        java.lang.Throwable $r8;
        javax.xml.transform.TransformerException $r11;
        org.apache.xml.serializer.SerializationHandler $r4;
        org.apache.xalan.trace.TraceManager $r6, $r7, $r9;
        org.apache.xpath.XPathContext $r1;
        int $i0, $i1;
        java.lang.String $r3;
        org.apache.xalan.templates.ElemNumber r2;
        boolean $z0, $z1, $z2;
        org.xml.sax.SAXException $r10;
        char[] $r5;
        org.apache.xalan.transformer.TransformerImpl r0;

        r2 := @this: org.apache.xalan.templates.ElemNumber;

        r0 := @parameter0: org.apache.xalan.transformer.TransformerImpl;

        $z0 = <org.apache.xalan.transformer.TransformerImpl: boolean S_DEBUG>;

        if $z0 == 0 goto label01;

        $r7 = virtualinvoke r0.<org.apache.xalan.transformer.TransformerImpl: org.apache.xalan.trace.TraceManager getTraceManager()>();

        virtualinvoke $r7.<org.apache.xalan.trace.TraceManager: void fireTraceEvent(org.apache.xalan.templates.ElemTemplateElement)>(r2);

     label01:
        $r1 = virtualinvoke r0.<org.apache.xalan.transformer.TransformerImpl: org.apache.xpath.XPathContext getXPathContext()>();

        $i0 = virtualinvoke $r1.<org.apache.xpath.XPathContext: int getCurrentNode()>();

        $r3 = virtualinvoke r2.<org.apache.xalan.templates.ElemNumber: java.lang.String getCountString(org.apache.xalan.transformer.TransformerImpl,int)>(r0, $i0);

     label02:
        $r4 = virtualinvoke r0.<org.apache.xalan.transformer.TransformerImpl: org.apache.xml.serializer.SerializationHandler getResultTreeHandler()>();

        $r5 = virtualinvoke $r3.<java.lang.String: char[] toCharArray()>();

        $i1 = virtualinvoke $r3.<java.lang.String: int length()>();

        interfaceinvoke $r4.<org.xml.sax.ContentHandler: void characters(char[],int,int)>($r5, 0, $i1);

     label03:
        goto label09;

     label04:
        goto label08;

     label05:
        $r10 := @caughtexception;

        $r11 = new javax.xml.transform.TransformerException;

        specialinvoke $r11.<javax.xml.transform.TransformerException: void <init>(java.lang.Throwable)>($r10);

        throw $r11;

     label06:
        $r8 := @caughtexception;

        goto label11;

     label07:
        throw $r8;

     label08:
        return;

     label09:
        $z1 = <org.apache.xalan.transformer.TransformerImpl: boolean S_DEBUG>;

        if $z1 == 0 goto label10;

        $r6 = virtualinvoke r0.<org.apache.xalan.transformer.TransformerImpl: org.apache.xalan.trace.TraceManager getTraceManager()>();

        virtualinvoke $r6.<org.apache.xalan.trace.TraceManager: void fireTraceEndEvent(org.apache.xalan.templates.ElemTemplateElement)>(r2);

     label10:
        goto label04;

     label11:
        $z2 = <org.apache.xalan.transformer.TransformerImpl: boolean S_DEBUG>;

        if $z2 == 0 goto label12;

        $r9 = virtualinvoke r0.<org.apache.xalan.transformer.TransformerImpl: org.apache.xalan.trace.TraceManager getTraceManager()>();

        virtualinvoke $r9.<org.apache.xalan.trace.TraceManager: void fireTraceEndEvent(org.apache.xalan.templates.ElemTemplateElement)>(r2);

     label12:
        goto label07;

        catch org.xml.sax.SAXException from label02 to label03 with label05;
        catch java.lang.Throwable from label02 to label06 with label06;
    }

    public org.apache.xalan.templates.ElemTemplateElement appendChild(org.apache.xalan.templates.ElemTemplateElement)
    {
        java.lang.Object[] $r1;
        org.apache.xalan.templates.ElemTemplateElement r2;
        java.lang.String $r3, $r4;
        org.apache.xalan.templates.ElemNumber r0;

        r0 := @this: org.apache.xalan.templates.ElemNumber;

        r2 := @parameter0: org.apache.xalan.templates.ElemTemplateElement;

        $r1 = newarray (java.lang.Object)[2];

        $r3 = virtualinvoke r2.<org.apache.xalan.templates.ElemTemplateElement: java.lang.String getNodeName()>();

        $r1[0] = $r3;

        $r4 = virtualinvoke r0.<org.apache.xalan.templates.ElemNumber: java.lang.String getNodeName()>();

        $r1[1] = $r4;

        virtualinvoke r0.<org.apache.xalan.templates.ElemTemplateElement: void error(java.lang.String,java.lang.Object[])>("ER_CANNOT_ADD", $r1);

        return null;
    }

    int findAncestor(org.apache.xpath.XPathContext, org.apache.xpath.XPath, org.apache.xpath.XPath, int, org.apache.xalan.templates.ElemNumber) throws javax.xml.transform.TransformerException
    {
        org.apache.xpath.XPath r2, r3;
        byte $b0, $b1;
        org.apache.xpath.XPathContext r0;
        org.apache.xml.dtm.DTM $r1;
        int i2, $i4;
        org.apache.xalan.templates.ElemNumber r4, r5;
        double $d0, $d1;

        r4 := @this: org.apache.xalan.templates.ElemNumber;

        r0 := @parameter0: org.apache.xpath.XPathContext;

        r2 := @parameter1: org.apache.xpath.XPath;

        r3 := @parameter2: org.apache.xpath.XPath;

        i2 := @parameter3: int;

        r5 := @parameter4: org.apache.xalan.templates.ElemNumber;

        $r1 = virtualinvoke r0.<org.apache.xpath.XPathContext: org.apache.xml.dtm.DTM getDTM(int)>(i2);

        goto label4;

     label1:
        if null == r2 goto label2;

        $d1 = virtualinvoke r2.<org.apache.xpath.XPath: double getMatchScore(org.apache.xpath.XPathContext,int)>(r0, i2);

        $b1 = $d1 cmpl #-Infinity;

        if $b1 == 0 goto label2;

        goto label5;

     label2:
        if null == r3 goto label3;

        $d0 = virtualinvoke r3.<org.apache.xpath.XPath: double getMatchScore(org.apache.xpath.XPathContext,int)>(r0, i2);

        $b0 = $d0 cmpl #-Infinity;

        if $b0 == 0 goto label3;

        goto label5;

     label3:
        i2 = interfaceinvoke $r1.<org.apache.xml.dtm.DTM: int getParent(int)>(i2);

     label4:
        $i4 = (int) -1;

        if $i4 != i2 goto label1;

     label5:
        return i2;
    }

    private int findPrecedingOrAncestorOrSelf(org.apache.xpath.XPathContext, org.apache.xpath.XPath, org.apache.xpath.XPath, int, org.apache.xalan.templates.ElemNumber) throws javax.xml.transform.TransformerException
    {
        byte $b2, $b3;
        org.apache.xpath.XPathContext r0;
        int $i0, $i1, i4, $i6, $i8, $i10, $i12;
        org.apache.xalan.templates.ElemNumber r4, r5;
        double $d0, $d1;
        org.apache.xpath.XPath r2, r3;
        org.apache.xml.dtm.DTM $r1;

        r4 := @this: org.apache.xalan.templates.ElemNumber;

        r0 := @parameter0: org.apache.xpath.XPathContext;

        r2 := @parameter1: org.apache.xpath.XPath;

        r3 := @parameter2: org.apache.xpath.XPath;

        i4 := @parameter3: int;

        r5 := @parameter4: org.apache.xalan.templates.ElemNumber;

        $r1 = virtualinvoke r0.<org.apache.xpath.XPathContext: org.apache.xml.dtm.DTM getDTM(int)>(i4);

        goto label5;

     label1:
        if null == r2 goto label2;

        $d1 = virtualinvoke r2.<org.apache.xpath.XPath: double getMatchScore(org.apache.xpath.XPathContext,int)>(r0, i4);

        $b3 = $d1 cmpl #-Infinity;

        if $b3 == 0 goto label2;

        $i6 = (int) -1;

        i4 = $i6;

        goto label6;

     label2:
        if null == r3 goto label3;

        $d0 = virtualinvoke r3.<org.apache.xpath.XPath: double getMatchScore(org.apache.xpath.XPathContext,int)>(r0, i4);

        $b2 = $d0 cmpl #-Infinity;

        if $b2 == 0 goto label3;

        goto label6;

     label3:
        $i0 = interfaceinvoke $r1.<org.apache.xml.dtm.DTM: int getPreviousSibling(int)>(i4);

        $i8 = (int) -1;

        if $i8 != $i0 goto label4;

        i4 = interfaceinvoke $r1.<org.apache.xml.dtm.DTM: int getParent(int)>(i4);

        goto label5;

     label4:
        $i1 = interfaceinvoke $r1.<org.apache.xml.dtm.DTM: int getLastChild(int)>($i0);

        i4 = $i1;

        $i10 = (int) -1;

        if $i1 != $i10 goto label5;

        i4 = $i0;

     label5:
        $i12 = (int) -1;

        if $i12 != i4 goto label1;

     label6:
        return i4;
    }

    org.apache.xpath.XPath getCountMatchPattern(org.apache.xpath.XPathContext, int) throws javax.xml.transform.TransformerException
    {
        org.apache.xpath.XPath r32, $r36, $r38, $r39, $r40, $r41, $r43;
        org.apache.xalan.templates.ElemNumber$MyPrefixResolver r33, $r34, $r35;
        javax.xml.transform.ErrorListener $r4, $r6, $r14, $r16, $r23, $r29;
        short $s1;
        org.apache.xpath.XPathContext r1;
        java.lang.StringBuffer $r9, $r11, $r12, $r19, $r21, $r37, $r42;
        org.w3c.dom.Node $r26, $r31;
        int i0, $i2;
        java.lang.String $r10, $r13, $r20, $r22, $r24, $r28;
        org.apache.xalan.templates.ElemNumber r0;
        org.apache.xml.dtm.DTM $r2;

        r0 := @this: org.apache.xalan.templates.ElemNumber;

        r1 := @parameter0: org.apache.xpath.XPathContext;

        i0 := @parameter1: int;

        r32 = r0.<org.apache.xalan.templates.ElemNumber: org.apache.xpath.XPath m_countMatchPattern>;

        $r2 = virtualinvoke r1.<org.apache.xpath.XPathContext: org.apache.xml.dtm.DTM getDTM(int)>(i0);

        if null != r32 goto label10;

        $s1 = interfaceinvoke $r2.<org.apache.xml.dtm.DTM: short getNodeType(int)>(i0);

        $i2 = (int) $s1;

        tableswitch($i2)
        {
            case 1: goto label01;
            case 2: goto label04;
            case 3: goto label05;
            case 4: goto label05;
            case 5: goto label09;
            case 6: goto label09;
            case 7: goto label08;
            case 8: goto label06;
            case 9: goto label07;
            default: goto label09;
        };

     label01:
        $r24 = interfaceinvoke $r2.<org.apache.xml.dtm.DTM: java.lang.String getNamespaceURI(int)>(i0);

        if $r24 != null goto label02;

        $r34 = new org.apache.xalan.templates.ElemNumber$MyPrefixResolver;

        $r31 = interfaceinvoke $r2.<org.apache.xml.dtm.DTM: org.w3c.dom.Node getNode(int)>(i0);

        specialinvoke $r34.<org.apache.xalan.templates.ElemNumber$MyPrefixResolver: void <init>(org.apache.xalan.templates.ElemNumber,org.w3c.dom.Node,org.apache.xml.dtm.DTM,int,boolean)>(r0, $r31, $r2, i0, 0);

        r33 = $r34;

        goto label03;

     label02:
        $r35 = new org.apache.xalan.templates.ElemNumber$MyPrefixResolver;

        $r26 = interfaceinvoke $r2.<org.apache.xml.dtm.DTM: org.w3c.dom.Node getNode(int)>(i0);

        specialinvoke $r35.<org.apache.xalan.templates.ElemNumber$MyPrefixResolver: void <init>(org.apache.xalan.templates.ElemNumber,org.w3c.dom.Node,org.apache.xml.dtm.DTM,int,boolean)>(r0, $r26, $r2, i0, 1);

        r33 = $r35;

     label03:
        $r36 = new org.apache.xpath.XPath;

        $r28 = interfaceinvoke $r2.<org.apache.xml.dtm.DTM: java.lang.String getNodeName(int)>(i0);

        $r29 = virtualinvoke r1.<org.apache.xpath.XPathContext: javax.xml.transform.ErrorListener getErrorListener()>();

        specialinvoke $r36.<org.apache.xpath.XPath: void <init>(java.lang.String,javax.xml.transform.SourceLocator,org.apache.xml.utils.PrefixResolver,int,javax.xml.transform.ErrorListener)>($r28, r0, r33, 1, $r29);

        r32 = $r36;

        goto label10;

     label04:
        $r38 = new org.apache.xpath.XPath;

        $r37 = new java.lang.StringBuffer;

        specialinvoke $r37.<java.lang.StringBuffer: void <init>()>();

        $r19 = virtualinvoke $r37.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("@");

        $r20 = interfaceinvoke $r2.<org.apache.xml.dtm.DTM: java.lang.String getNodeName(int)>(i0);

        $r21 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r20);

        $r22 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.String toString()>();

        $r23 = virtualinvoke r1.<org.apache.xpath.XPathContext: javax.xml.transform.ErrorListener getErrorListener()>();

        specialinvoke $r38.<org.apache.xpath.XPath: void <init>(java.lang.String,javax.xml.transform.SourceLocator,org.apache.xml.utils.PrefixResolver,int,javax.xml.transform.ErrorListener)>($r22, r0, r0, 1, $r23);

        r32 = $r38;

        goto label10;

     label05:
        $r39 = new org.apache.xpath.XPath;

        $r16 = virtualinvoke r1.<org.apache.xpath.XPathContext: javax.xml.transform.ErrorListener getErrorListener()>();

        specialinvoke $r39.<org.apache.xpath.XPath: void <init>(java.lang.String,javax.xml.transform.SourceLocator,org.apache.xml.utils.PrefixResolver,int,javax.xml.transform.ErrorListener)>("text()", r0, r0, 1, $r16);

        r32 = $r39;

        goto label10;

     label06:
        $r40 = new org.apache.xpath.XPath;

        $r6 = virtualinvoke r1.<org.apache.xpath.XPathContext: javax.xml.transform.ErrorListener getErrorListener()>();

        specialinvoke $r40.<org.apache.xpath.XPath: void <init>(java.lang.String,javax.xml.transform.SourceLocator,org.apache.xml.utils.PrefixResolver,int,javax.xml.transform.ErrorListener)>("comment()", r0, r0, 1, $r6);

        r32 = $r40;

        goto label10;

     label07:
        $r41 = new org.apache.xpath.XPath;

        $r4 = virtualinvoke r1.<org.apache.xpath.XPathContext: javax.xml.transform.ErrorListener getErrorListener()>();

        specialinvoke $r41.<org.apache.xpath.XPath: void <init>(java.lang.String,javax.xml.transform.SourceLocator,org.apache.xml.utils.PrefixResolver,int,javax.xml.transform.ErrorListener)>("/", r0, r0, 1, $r4);

        r32 = $r41;

        goto label10;

     label08:
        $r43 = new org.apache.xpath.XPath;

        $r42 = new java.lang.StringBuffer;

        specialinvoke $r42.<java.lang.StringBuffer: void <init>()>();

        $r9 = virtualinvoke $r42.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("pi(");

        $r10 = interfaceinvoke $r2.<org.apache.xml.dtm.DTM: java.lang.String getNodeName(int)>(i0);

        $r11 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>();

        $r14 = virtualinvoke r1.<org.apache.xpath.XPathContext: javax.xml.transform.ErrorListener getErrorListener()>();

        specialinvoke $r43.<org.apache.xpath.XPath: void <init>(java.lang.String,javax.xml.transform.SourceLocator,org.apache.xml.utils.PrefixResolver,int,javax.xml.transform.ErrorListener)>($r13, r0, r0, 1, $r14);

        r32 = $r43;

        goto label10;

     label09:
        r32 = null;

     label10:
        return r32;
    }

    java.lang.String getCountString(org.apache.xalan.transformer.TransformerImpl, int) throws javax.xml.transform.TransformerException
    {
        org.apache.xml.utils.NodeVector $r5;
        long $l8, $l11, l12;
        long[] r8;
        org.apache.xpath.XPathContext $r1;
        int $i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i9, $i10, i13, $i15;
        java.lang.String $r9;
        org.apache.xalan.templates.ElemNumber r3;
        double $d0, $d1, $d2;
        boolean $z0;
        org.apache.xpath.XPath $r4, $r6;
        org.apache.xpath.objects.XObject $r7;
        org.apache.xalan.transformer.TransformerImpl r0;
        org.apache.xalan.transformer.CountersTable $r2;

        r3 := @this: org.apache.xalan.templates.ElemNumber;

        r0 := @parameter0: org.apache.xalan.transformer.TransformerImpl;

        i1 := @parameter1: int;

        r8 = null;

        $r1 = virtualinvoke r0.<org.apache.xalan.transformer.TransformerImpl: org.apache.xpath.XPathContext getXPathContext()>();

        $r2 = virtualinvoke r0.<org.apache.xalan.transformer.TransformerImpl: org.apache.xalan.transformer.CountersTable getCountersTable()>();

        $r4 = r3.<org.apache.xalan.templates.ElemNumber: org.apache.xpath.XPath m_valueExpr>;

        if null == $r4 goto label1;

        $r6 = r3.<org.apache.xalan.templates.ElemNumber: org.apache.xpath.XPath m_valueExpr>;

        $r7 = virtualinvoke $r6.<org.apache.xpath.XPath: org.apache.xpath.objects.XObject execute(org.apache.xpath.XPathContext,int,org.apache.xml.utils.PrefixResolver)>($r1, i1, r3);

        $d0 = virtualinvoke $r7.<org.apache.xpath.objects.XObject: double num()>();

        $d1 = $d0 + 0.5;

        $d2 = staticinvoke <java.lang.Math: double floor(double)>($d1);

        l12 = (long) $d2;

        r8 = newarray (long)[1];

        r8[0] = l12;

        goto label7;

     label1:
        $i0 = r3.<org.apache.xalan.templates.ElemNumber: int m_level>;

        if 3 != $i0 goto label2;

        r8 = newarray (long)[1];

        $i10 = virtualinvoke $r2.<org.apache.xalan.transformer.CountersTable: int countNode(org.apache.xpath.XPathContext,org.apache.xalan.templates.ElemNumber,int)>($r1, r3, i1);

        $l11 = (long) $i10;

        r8[0] = $l11;

        goto label7;

     label2:
        $i2 = r3.<org.apache.xalan.templates.ElemNumber: int m_level>;

        if 1 != $i2 goto label3;

        $z0 = 1;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        $r5 = virtualinvoke r3.<org.apache.xalan.templates.ElemNumber: org.apache.xml.utils.NodeVector getMatchingAncestors(org.apache.xpath.XPathContext,int,boolean)>($r1, i1, $z0);

        $i3 = virtualinvoke $r5.<org.apache.xml.utils.NodeVector: int size()>();

        $i9 = $i3 - 1;

        if $i9 < 0 goto label7;

        $i4 = $i9 + 1;

        r8 = newarray (long)[$i4];

        i13 = $i9;

        goto label6;

     label5:
        $i5 = virtualinvoke $r5.<org.apache.xml.utils.NodeVector: int elementAt(int)>(i13);

        $i6 = $i9 - i13;

        $i7 = virtualinvoke $r2.<org.apache.xalan.transformer.CountersTable: int countNode(org.apache.xpath.XPathContext,org.apache.xalan.templates.ElemNumber,int)>($r1, r3, $i5);

        $l8 = (long) $i7;

        r8[$i6] = $l8;

        $i15 = (int) -1;

        i13 = i13 + $i15;

     label6:
        if i13 >= 0 goto label5;

     label7:
        if null == r8 goto label8;

        $r9 = virtualinvoke r3.<org.apache.xalan.templates.ElemNumber: java.lang.String formatNumberList(org.apache.xalan.transformer.TransformerImpl,long[],int)>(r0, r8, i1);

        goto label9;

     label8:
        $r9 = "";

     label9:
        return $r9;
    }

    public int getPreviousNode(org.apache.xpath.XPathContext, int) throws javax.xml.transform.TransformerException
    {
        short $s7;
        byte $b2, $b5, $b8;
        org.apache.xpath.XPathContext r1;
        int $i0, $i1, $i3, $i4, $i6, i9, i10, i11, $i13, $i15, $i16, $i18, $i20, $i22, $i24, $i26, $i28, $i30;
        org.apache.xalan.templates.ElemNumber r0;
        double $d0, $d1, $d2;
        org.apache.xpath.XPath $r2, r4;
        org.apache.xml.dtm.DTM $r3;

        r0 := @this: org.apache.xalan.templates.ElemNumber;

        r1 := @parameter0: org.apache.xpath.XPathContext;

        i9 := @parameter1: int;

        $r2 = virtualinvoke r0.<org.apache.xalan.templates.ElemNumber: org.apache.xpath.XPath getCountMatchPattern(org.apache.xpath.XPathContext,int)>(r1, i9);

        $r3 = virtualinvoke r1.<org.apache.xpath.XPathContext: org.apache.xml.dtm.DTM getDTM(int)>(i9);

        $i0 = r0.<org.apache.xalan.templates.ElemNumber: int m_level>;

        if 3 != $i0 goto label11;

        r4 = r0.<org.apache.xalan.templates.ElemNumber: org.apache.xpath.XPath m_fromMatchPattern>;

        goto label08;

     label01:
        $i3 = interfaceinvoke $r3.<org.apache.xml.dtm.DTM: int getPreviousSibling(int)>(i9);

        i10 = $i3;

        $i13 = (int) -1;

        if $i13 != $i3 goto label04;

        $i6 = interfaceinvoke $r3.<org.apache.xml.dtm.DTM: int getParent(int)>(i9);

        i10 = $i6;

        $i15 = (int) -1;

        if $i15 == $i6 goto label07;

        if null == r4 goto label02;

        $d2 = virtualinvoke r4.<org.apache.xpath.XPath: double getMatchScore(org.apache.xpath.XPathContext,int)>(r1, $i6);

        $b8 = $d2 cmpl #-Infinity;

        if $b8 != 0 goto label03;

     label02:
        $s7 = interfaceinvoke $r3.<org.apache.xml.dtm.DTM: short getNodeType(int)>($i6);

        $i16 = (int) $s7;

        if $i16 != 9 goto label07;

     label03:
        $i18 = (int) -1;

        i9 = $i18;

        goto label09;

     label04:
        i11 = $i3;

        goto label06;

     label05:
        $i4 = interfaceinvoke $r3.<org.apache.xml.dtm.DTM: int getLastChild(int)>(i10);

        i11 = $i4;

        $i20 = (int) -1;

        if $i20 == $i4 goto label06;

        i10 = $i4;

     label06:
        $i22 = (int) -1;

        if $i22 != i11 goto label05;

     label07:
        i9 = i10;

        $i24 = (int) -1;

        if $i24 == i10 goto label08;

        if null == $r2 goto label09;

        $d1 = virtualinvoke $r2.<org.apache.xpath.XPath: double getMatchScore(org.apache.xpath.XPathContext,int)>(r1, i10);

        $b5 = $d1 cmpl #-Infinity;

        if $b5 == 0 goto label08;

        goto label09;

     label08:
        $i26 = (int) -1;

        if $i26 != i9 goto label01;

     label09:
        goto label12;

     label10:
        $i1 = interfaceinvoke $r3.<org.apache.xml.dtm.DTM: int getPreviousSibling(int)>(i9);

        i9 = $i1;

        $i28 = (int) -1;

        if $i28 == $i1 goto label11;

        if null == $r2 goto label12;

        $d0 = virtualinvoke $r2.<org.apache.xpath.XPath: double getMatchScore(org.apache.xpath.XPathContext,int)>(r1, $i1);

        $b2 = $d0 cmpl #-Infinity;

        if $b2 == 0 goto label11;

        goto label12;

     label11:
        $i30 = (int) -1;

        if $i30 != i9 goto label10;

     label12:
        return i9;
    }

    public int getTargetNode(org.apache.xpath.XPathContext, int) throws javax.xml.transform.TransformerException
    {
        org.apache.xpath.XPath $r2, $r3, $r4;
        org.apache.xpath.XPathContext r1;
        int i0, $i1, i2;
        org.apache.xalan.templates.ElemNumber r0;

        r0 := @this: org.apache.xalan.templates.ElemNumber;

        r1 := @parameter0: org.apache.xpath.XPathContext;

        i0 := @parameter1: int;

        $r2 = virtualinvoke r0.<org.apache.xalan.templates.ElemNumber: org.apache.xpath.XPath getCountMatchPattern(org.apache.xpath.XPathContext,int)>(r1, i0);

        $i1 = r0.<org.apache.xalan.templates.ElemNumber: int m_level>;

        if 3 != $i1 goto label1;

        $r4 = r0.<org.apache.xalan.templates.ElemNumber: org.apache.xpath.XPath m_fromMatchPattern>;

        i2 = specialinvoke r0.<org.apache.xalan.templates.ElemNumber: int findPrecedingOrAncestorOrSelf(org.apache.xpath.XPathContext,org.apache.xpath.XPath,org.apache.xpath.XPath,int,org.apache.xalan.templates.ElemNumber)>(r1, $r4, $r2, i0, r0);

        goto label2;

     label1:
        $r3 = r0.<org.apache.xalan.templates.ElemNumber: org.apache.xpath.XPath m_fromMatchPattern>;

        i2 = virtualinvoke r0.<org.apache.xalan.templates.ElemNumber: int findAncestor(org.apache.xpath.XPathContext,org.apache.xpath.XPath,org.apache.xpath.XPath,int,org.apache.xalan.templates.ElemNumber)>(r1, $r3, $r2, i0, r0);

     label2:
        return i2;
    }

    org.apache.xml.utils.NodeVector getMatchingAncestors(org.apache.xpath.XPathContext, int, boolean) throws javax.xml.transform.TransformerException
    {
        byte $b0, $b1;
        org.apache.xpath.XPathContext r1;
        int i2, $i4;
        org.apache.xalan.templates.ElemNumber r3;
        double $d0, $d1;
        boolean z0;
        java.io.PrintStream $r7;
        org.apache.xpath.XPath $r4, $r6, $r8;
        org.apache.xpath.NodeSetDTM $r9;
        org.apache.xml.dtm.DTMManager $r2;
        org.apache.xml.dtm.DTM $r5;

        r3 := @this: org.apache.xalan.templates.ElemNumber;

        r1 := @parameter0: org.apache.xpath.XPathContext;

        i2 := @parameter1: int;

        z0 := @parameter2: boolean;

        $r9 = new org.apache.xpath.NodeSetDTM;

        $r2 = virtualinvoke r1.<org.apache.xpath.XPathContext: org.apache.xml.dtm.DTMManager getDTMManager()>();

        specialinvoke $r9.<org.apache.xpath.NodeSetDTM: void <init>(org.apache.xml.dtm.DTMManager)>($r2);

        $r4 = virtualinvoke r3.<org.apache.xalan.templates.ElemNumber: org.apache.xpath.XPath getCountMatchPattern(org.apache.xpath.XPathContext,int)>(r1, i2);

        $r5 = virtualinvoke r1.<org.apache.xpath.XPathContext: org.apache.xml.dtm.DTM getDTM(int)>(i2);

        goto label5;

     label1:
        $r6 = r3.<org.apache.xalan.templates.ElemNumber: org.apache.xpath.XPath m_fromMatchPattern>;

        if null == $r6 goto label2;

        $r8 = r3.<org.apache.xalan.templates.ElemNumber: org.apache.xpath.XPath m_fromMatchPattern>;

        $d1 = virtualinvoke $r8.<org.apache.xpath.XPath: double getMatchScore(org.apache.xpath.XPathContext,int)>(r1, i2);

        $b1 = $d1 cmpl #-Infinity;

        if $b1 == 0 goto label2;

        if z0 != 0 goto label2;

        goto label6;

     label2:
        if null != $r4 goto label3;

        $r7 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r7.<java.io.PrintStream: void println(java.lang.String)>("Programmers error! countMatchPattern should never be null!");

     label3:
        $d0 = virtualinvoke $r4.<org.apache.xpath.XPath: double getMatchScore(org.apache.xpath.XPathContext,int)>(r1, i2);

        $b0 = $d0 cmpl #-Infinity;

        if $b0 == 0 goto label4;

        virtualinvoke $r9.<org.apache.xpath.NodeSetDTM: void addElement(int)>(i2);

        if z0 == 0 goto label4;

        goto label6;

     label4:
        i2 = interfaceinvoke $r5.<org.apache.xml.dtm.DTM: int getParent(int)>(i2);

     label5:
        $i4 = (int) -1;

        if $i4 != i2 goto label1;

     label6:
        return $r9;
    }

    java.util.Locale getLocale(org.apache.xalan.transformer.TransformerImpl, int) throws javax.xml.transform.TransformerException
    {
        java.lang.Object[] $r11;
        org.apache.xalan.templates.AVT $r1, $r4;
        org.apache.xalan.transformer.MsgMgr $r8;
        org.apache.xpath.XPathContext $r3;
        java.util.Locale $r6, r12;
        org.w3c.dom.Node $r10;
        int i0;
        org.apache.xml.dtm.DTM $r9;
        java.lang.String $r5, $r7;
        org.apache.xalan.templates.ElemNumber r0;
        org.apache.xalan.transformer.TransformerImpl r2;

        r0 := @this: org.apache.xalan.templates.ElemNumber;

        r2 := @parameter0: org.apache.xalan.transformer.TransformerImpl;

        i0 := @parameter1: int;

        r12 = null;

        $r1 = r0.<org.apache.xalan.templates.ElemNumber: org.apache.xalan.templates.AVT m_lang_avt>;

        if null == $r1 goto label2;

        $r3 = virtualinvoke r2.<org.apache.xalan.transformer.TransformerImpl: org.apache.xpath.XPathContext getXPathContext()>();

        $r4 = r0.<org.apache.xalan.templates.ElemNumber: org.apache.xalan.templates.AVT m_lang_avt>;

        $r5 = virtualinvoke $r4.<org.apache.xalan.templates.AVT: java.lang.String evaluate(org.apache.xpath.XPathContext,int,org.apache.xml.utils.PrefixResolver)>($r3, i0, r0);

        if null == $r5 goto label1;

        $r6 = new java.util.Locale;

        $r7 = virtualinvoke $r5.<java.lang.String: java.lang.String toUpperCase()>();

        specialinvoke $r6.<java.util.Locale: void <init>(java.lang.String,java.lang.String)>($r7, "");

        r12 = $r6;

        if null != $r6 goto label1;

        $r8 = virtualinvoke r2.<org.apache.xalan.transformer.TransformerImpl: org.apache.xalan.transformer.MsgMgr getMsgMgr()>();

        $r9 = virtualinvoke $r3.<org.apache.xpath.XPathContext: org.apache.xml.dtm.DTM getDTM(int)>(i0);

        $r10 = interfaceinvoke $r9.<org.apache.xml.dtm.DTM: org.w3c.dom.Node getNode(int)>(i0);

        $r11 = newarray (java.lang.Object)[1];

        $r11[0] = $r5;

        virtualinvoke $r8.<org.apache.xalan.transformer.MsgMgr: void warn(javax.xml.transform.SourceLocator,org.w3c.dom.Node,org.w3c.dom.Node,java.lang.String,java.lang.Object[])>(r0, null, $r10, "WG_LOCALE_NOT_FOUND", $r11);

        r12 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

     label1:
        goto label3;

     label2:
        r12 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

     label3:
        return r12;
    }

    private java.text.DecimalFormat getNumberFormatter(org.apache.xalan.transformer.TransformerImpl, int) throws javax.xml.transform.TransformerException
    {
        java.lang.Object[] $r14;
        java.text.DecimalFormatSymbols $r9;
        org.apache.xalan.templates.AVT $r5, $r10, $r12, $r15, $r17, $r22;
        java.lang.Integer $r8;
        java.text.NumberFormat $r7;
        org.apache.xalan.transformer.MsgMgr $r13;
        java.util.Locale $r2, r4;
        org.apache.xpath.XPathContext $r11, $r18;
        int i0, $i1, $i2, $i4;
        java.lang.String r6, $r16, $r21, $r23;
        org.apache.xalan.templates.ElemNumber r0;
        boolean $z0;
        java.text.DecimalFormat r20;
        char $c3;
        java.lang.NumberFormatException $r19;
        java.lang.Object $r3;
        org.apache.xalan.transformer.TransformerImpl r1;

        r0 := @this: org.apache.xalan.templates.ElemNumber;

        r1 := @parameter0: org.apache.xalan.transformer.TransformerImpl;

        i0 := @parameter1: int;

        $r2 = virtualinvoke r0.<org.apache.xalan.templates.ElemNumber: java.util.Locale getLocale(org.apache.xalan.transformer.TransformerImpl,int)>(r1, i0);

        $r3 = virtualinvoke $r2.<java.util.Locale: java.lang.Object clone()>();

        r4 = (java.util.Locale) $r3;

        r20 = null;

        $r5 = r0.<org.apache.xalan.templates.ElemNumber: org.apache.xalan.templates.AVT m_groupingSeparator_avt>;

        if null == $r5 goto label1;

        $r17 = r0.<org.apache.xalan.templates.ElemNumber: org.apache.xalan.templates.AVT m_groupingSeparator_avt>;

        $r18 = virtualinvoke r1.<org.apache.xalan.transformer.TransformerImpl: org.apache.xpath.XPathContext getXPathContext()>();

        $r21 = virtualinvoke $r17.<org.apache.xalan.templates.AVT: java.lang.String evaluate(org.apache.xpath.XPathContext,int,org.apache.xml.utils.PrefixResolver)>($r18, i0, r0);

        goto label2;

     label1:
        $r21 = null;

     label2:
        r6 = $r21;

        if $r21 == null goto label3;

        $r12 = r0.<org.apache.xalan.templates.ElemNumber: org.apache.xalan.templates.AVT m_groupingSeparator_avt>;

        $z0 = virtualinvoke $r12.<org.apache.xalan.templates.AVT: boolean isSimple()>();

        if $z0 != 0 goto label3;

        $i4 = virtualinvoke $r21.<java.lang.String: int length()>();

        if $i4 == 1 goto label3;

        $r13 = virtualinvoke r1.<org.apache.xalan.transformer.TransformerImpl: org.apache.xalan.transformer.MsgMgr getMsgMgr()>();

        $r14 = newarray (java.lang.Object)[2];

        $r14[0] = "name";

        $r15 = r0.<org.apache.xalan.templates.ElemNumber: org.apache.xalan.templates.AVT m_groupingSeparator_avt>;

        $r16 = virtualinvoke $r15.<org.apache.xalan.templates.AVT: java.lang.String getName()>();

        $r14[1] = $r16;

        virtualinvoke $r13.<org.apache.xalan.transformer.MsgMgr: void warn(javax.xml.transform.SourceLocator,java.lang.String,java.lang.Object[])>(r0, "WG_ILLEGAL_ATTRIBUTE_VALUE", $r14);

     label3:
        $r22 = r0.<org.apache.xalan.templates.ElemNumber: org.apache.xalan.templates.AVT m_groupingSize_avt>;

        if null == $r22 goto label4;

        $r10 = r0.<org.apache.xalan.templates.ElemNumber: org.apache.xalan.templates.AVT m_groupingSize_avt>;

        $r11 = virtualinvoke r1.<org.apache.xalan.transformer.TransformerImpl: org.apache.xpath.XPathContext getXPathContext()>();

        $r23 = virtualinvoke $r10.<org.apache.xalan.templates.AVT: java.lang.String evaluate(org.apache.xpath.XPathContext,int,org.apache.xml.utils.PrefixResolver)>($r11, i0, r0);

        goto label5;

     label4:
        $r23 = null;

     label5:
        if null == r6 goto label9;

        if null == $r23 goto label9;

        $i1 = virtualinvoke r6.<java.lang.String: int length()>();

        if $i1 <= 0 goto label9;

     label6:
        $r7 = staticinvoke <java.text.NumberFormat: java.text.NumberFormat getNumberInstance(java.util.Locale)>(r4);

        r20 = (java.text.DecimalFormat) $r7;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(java.lang.String)>($r23);

        $i2 = virtualinvoke $r8.<java.lang.Integer: int intValue()>();

        virtualinvoke r20.<java.text.DecimalFormat: void setGroupingSize(int)>($i2);

        $r9 = virtualinvoke r20.<java.text.DecimalFormat: java.text.DecimalFormatSymbols getDecimalFormatSymbols()>();

        $c3 = virtualinvoke r6.<java.lang.String: char charAt(int)>(0);

        virtualinvoke $r9.<java.text.DecimalFormatSymbols: void setGroupingSeparator(char)>($c3);

        virtualinvoke r20.<java.text.DecimalFormat: void setDecimalFormatSymbols(java.text.DecimalFormatSymbols)>($r9);

        virtualinvoke r20.<java.text.NumberFormat: void setGroupingUsed(boolean)>(1);

     label7:
        goto label9;

     label8:
        $r19 := @caughtexception;

        virtualinvoke r20.<java.text.NumberFormat: void setGroupingUsed(boolean)>(0);

     label9:
        return r20;

        catch java.lang.NumberFormatException from label6 to label7 with label8;
    }

    java.lang.String formatNumberList(org.apache.xalan.transformer.TransformerImpl, long[], int) throws javax.xml.transform.TransformerException
    {
        boolean $z0, $z1, $z2, $z3, $z4, $z5, z6, $z7, z8, z9, z10;
        org.apache.xml.utils.FastStringBuffer $r0;
        java.lang.Throwable $r20;
        org.apache.xalan.templates.ElemNumber$NumberFormatStringTokenizer $r4;
        org.apache.xalan.templates.AVT $r3, $r18;
        long $l12;
        long[] r1;
        java.lang.StringBuffer $r8, $r9, $r10, $r12, $r13, $r14;
        org.apache.xpath.XPathContext $r19;
        int i0, i1, $i2, $i3, $i5, $i6, $i7, $i8, i9, i11;
        java.lang.String $r6, $r7, $r11, $r15, $r16, $r17, r21, r22, r23, $r24, r25;
        org.apache.xalan.templates.ElemNumber r2;
        char $c4, c10;
        org.apache.xalan.transformer.TransformerImpl r5;

        r2 := @this: org.apache.xalan.templates.ElemNumber;

        r5 := @parameter0: org.apache.xalan.transformer.TransformerImpl;

        r1 := @parameter1: long[];

        i1 := @parameter2: int;

        $r0 = staticinvoke <org.apache.xml.utils.StringBufferPool: org.apache.xml.utils.FastStringBuffer get()>();

     label01:
        i0 = lengthof r1;

        i9 = 1;

        c10 = 49;

        r21 = null;

        r22 = null;

        r23 = ".";

        z6 = 1;

        z10 = 1;

        z9 = 1;

        z8 = 1;

        $r3 = r2.<org.apache.xalan.templates.ElemNumber: org.apache.xalan.templates.AVT m_format_avt>;

        if null == $r3 goto label02;

        $r18 = r2.<org.apache.xalan.templates.ElemNumber: org.apache.xalan.templates.AVT m_format_avt>;

        $r19 = virtualinvoke r5.<org.apache.xalan.transformer.TransformerImpl: org.apache.xpath.XPathContext getXPathContext()>();

        $r24 = virtualinvoke $r18.<org.apache.xalan.templates.AVT: java.lang.String evaluate(org.apache.xpath.XPathContext,int,org.apache.xml.utils.PrefixResolver)>($r19, i1, r2);

        goto label03;

     label02:
        $r24 = null;

     label03:
        r25 = $r24;

        if null != $r24 goto label04;

        r25 = "1";

     label04:
        $r4 = new org.apache.xalan.templates.ElemNumber$NumberFormatStringTokenizer;

        specialinvoke $r4.<org.apache.xalan.templates.ElemNumber$NumberFormatStringTokenizer: void <init>(org.apache.xalan.templates.ElemNumber,java.lang.String)>(r2, r25);

        i11 = 0;

        goto label16;

     label05:
        $z0 = virtualinvoke $r4.<org.apache.xalan.templates.ElemNumber$NumberFormatStringTokenizer: boolean hasMoreTokens()>();

        if $z0 == 0 goto label13;

        $r6 = virtualinvoke $r4.<org.apache.xalan.templates.ElemNumber$NumberFormatStringTokenizer: java.lang.String nextToken()>();

        $i2 = virtualinvoke $r6.<java.lang.String: int length()>();

        $i3 = $i2 - 1;

        $c4 = virtualinvoke $r6.<java.lang.String: char charAt(int)>($i3);

        $z1 = staticinvoke <java.lang.Character: boolean isLetterOrDigit(char)>($c4);

        if $z1 == 0 goto label06;

        $i7 = virtualinvoke $r6.<java.lang.String: int length()>();

        i9 = $i7;

        $i8 = $i7 - 1;

        c10 = virtualinvoke $r6.<java.lang.String: char charAt(int)>($i8);

        goto label13;

     label06:
        $z2 = virtualinvoke $r4.<org.apache.xalan.templates.ElemNumber$NumberFormatStringTokenizer: boolean isLetterOrDigitAhead()>();

        if $z2 == 0 goto label10;

        r22 = $r6;

        goto label08;

     label07:
        $r11 = virtualinvoke $r4.<org.apache.xalan.templates.ElemNumber$NumberFormatStringTokenizer: java.lang.String nextToken()>();

        $r12 = new java.lang.StringBuffer;

        specialinvoke $r12.<java.lang.StringBuffer: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r22);

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r11);

        r22 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.String toString()>();

     label08:
        $z4 = virtualinvoke $r4.<org.apache.xalan.templates.ElemNumber$NumberFormatStringTokenizer: boolean nextIsSep()>();

        if $z4 != 0 goto label07;

        if z8 != 0 goto label09;

        r23 = r22;

     label09:
        $r15 = virtualinvoke $r4.<org.apache.xalan.templates.ElemNumber$NumberFormatStringTokenizer: java.lang.String nextToken()>();

        $i5 = virtualinvoke $r15.<java.lang.String: int length()>();

        i9 = $i5;

        $i6 = $i5 - 1;

        c10 = virtualinvoke $r15.<java.lang.String: char charAt(int)>($i6);

        goto label13;

     label10:
        r21 = $r6;

        goto label12;

     label11:
        $r7 = virtualinvoke $r4.<org.apache.xalan.templates.ElemNumber$NumberFormatStringTokenizer: java.lang.String nextToken()>();

        $r8 = new java.lang.StringBuffer;

        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r21);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        r21 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

     label12:
        $z3 = virtualinvoke $r4.<org.apache.xalan.templates.ElemNumber$NumberFormatStringTokenizer: boolean hasMoreTokens()>();

        if $z3 != 0 goto label11;

     label13:
        if null == r22 goto label14;

        if z9 == 0 goto label14;

        virtualinvoke $r0.<org.apache.xml.utils.FastStringBuffer: void append(java.lang.String)>(r22);

        goto label15;

     label14:
        if null == r23 goto label15;

        if z10 != 0 goto label15;

        virtualinvoke $r0.<org.apache.xml.utils.FastStringBuffer: void append(java.lang.String)>(r23);

     label15:
        $l12 = r1[i11];

        specialinvoke r2.<org.apache.xalan.templates.ElemNumber: void getFormattedNumber(org.apache.xalan.transformer.TransformerImpl,int,char,int,long,org.apache.xml.utils.FastStringBuffer)>(r5, i1, c10, i9, $l12, $r0);

        z6 = 0;

        z10 = 0;

        z9 = 0;

        z8 = 0;

        i11 = i11 + 1;

     label16:
        if i11 < i0 goto label05;

        goto label18;

     label17:
        virtualinvoke $r4.<org.apache.xalan.templates.ElemNumber$NumberFormatStringTokenizer: java.lang.String nextToken()>();

     label18:
        $z5 = virtualinvoke $r4.<org.apache.xalan.templates.ElemNumber$NumberFormatStringTokenizer: boolean isLetterOrDigitAhead()>();

        if $z5 != 0 goto label17;

        if r21 == null goto label20;

        virtualinvoke $r0.<org.apache.xml.utils.FastStringBuffer: void append(java.lang.String)>(r21);

        goto label20;

     label19:
        $r16 = virtualinvoke $r4.<org.apache.xalan.templates.ElemNumber$NumberFormatStringTokenizer: java.lang.String nextToken()>();

        virtualinvoke $r0.<org.apache.xml.utils.FastStringBuffer: void append(java.lang.String)>($r16);

     label20:
        $z7 = virtualinvoke $r4.<org.apache.xalan.templates.ElemNumber$NumberFormatStringTokenizer: boolean hasMoreTokens()>();

        if $z7 != 0 goto label19;

        $r17 = virtualinvoke $r0.<org.apache.xml.utils.FastStringBuffer: java.lang.String toString()>();

        goto label25;

     label21:
        goto label24;

     label22:
        $r20 := @caughtexception;

        goto label26;

     label23:
        throw $r20;

     label24:
        return $r17;

     label25:
        staticinvoke <org.apache.xml.utils.StringBufferPool: void free(org.apache.xml.utils.FastStringBuffer)>($r0);

        goto label21;

     label26:
        staticinvoke <org.apache.xml.utils.StringBufferPool: void free(org.apache.xml.utils.FastStringBuffer)>($r0);

        goto label23;

        catch java.lang.Throwable from label01 to label22 with label22;
    }

    private void getFormattedNumber(org.apache.xalan.transformer.TransformerImpl, int, char, int, long, org.apache.xml.utils.FastStringBuffer) throws javax.xml.transform.TransformerException
    {
        org.apache.xml.utils.FastStringBuffer r5, $r67;
        java.lang.Throwable $r85;
        org.apache.xalan.templates.AVT $r1, $r83;
        long l1;
        org.apache.xpath.XPathContext $r84;
        java.lang.String $r7, $r12, $r17, $r18, $r23, $r24, $r29, $r30, $r35, $r36, $r41, $r46, $r51, $r56, $r61, $r62, $r65, $r69, $r71, $r75, r82, $r86, $r89, r90, $r91;
        org.apache.xalan.templates.ElemNumber r0;
        org.apache.xml.utils.res.XResourceBundle $r3, $r9, $r14, $r20, $r26, $r32, $r38, $r43, $r48, $r53, $r58, $r73, $r79;
        char[] $r6, $r11, $r16, $r22, $r28, $r34, $r40, $r45, $r50, $r55, $r60, $r66, $r68, $r76, $r77, r87, r88;
        java.util.Locale $r64, $r70, $r72, $r78, $r92, $r93, $r94, $r95, $r96, $r97, $r98, $r99, $r100, $r101, $r102;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10;
        int i2, i3, $i4, $i5, i6, $i7;
        java.text.DecimalFormat $r81;
        char c0;
        java.lang.Object $r4, $r10, $r15, $r21, $r27, $r33, $r39, $r44, $r49, $r54, $r59, $r74, $r80;
        org.apache.xalan.transformer.TransformerImpl r63;

        r0 := @this: org.apache.xalan.templates.ElemNumber;

        r63 := @parameter0: org.apache.xalan.transformer.TransformerImpl;

        i2 := @parameter1: int;

        c0 := @parameter2: char;

        i3 := @parameter3: int;

        l1 := @parameter4: long;

        r5 := @parameter5: org.apache.xml.utils.FastStringBuffer;

        $r1 = r0.<org.apache.xalan.templates.ElemNumber: org.apache.xalan.templates.AVT m_lettervalue_avt>;

        if $r1 == null goto label01;

        $r83 = r0.<org.apache.xalan.templates.ElemNumber: org.apache.xalan.templates.AVT m_lettervalue_avt>;

        $r84 = virtualinvoke r63.<org.apache.xalan.transformer.TransformerImpl: org.apache.xpath.XPathContext getXPathContext()>();

        $r86 = virtualinvoke $r83.<org.apache.xalan.templates.AVT: java.lang.String evaluate(org.apache.xpath.XPathContext,int,org.apache.xml.utils.PrefixResolver)>($r84, i2, r0);

        goto label02;

     label01:
        $r86 = null;

     label02:
        $i7 = (int) c0;

        lookupswitch($i7)
        {
            case 65: goto label03;
            case 73: goto label11;
            case 97: goto label05;
            case 105: goto label12;
            case 945: goto label31;
            case 1072: goto label33;
            case 1488: goto label27;
            case 3665: goto label25;
            case 4304: goto label29;
            case 12354: goto label13;
            case 12356: goto label15;
            case 12450: goto label17;
            case 12452: goto label19;
            case 19968: goto label21;
            case 22777: goto label23;
            default: goto label35;
        };

     label03:
        $r76 = <org.apache.xalan.templates.ElemNumber: char[] m_alphaCountTable>;

        if $r76 != null goto label04;

        $r78 = virtualinvoke r0.<org.apache.xalan.templates.ElemNumber: java.util.Locale getLocale(org.apache.xalan.transformer.TransformerImpl,int)>(r63, i2);

        $r79 = staticinvoke <org.apache.xml.utils.res.XResourceBundle: org.apache.xml.utils.res.XResourceBundle loadResourceBundle(java.lang.String,java.util.Locale)>("org.apache.xml.utils.res.XResources", $r78);

        $r80 = virtualinvoke $r79.<java.util.ResourceBundle: java.lang.Object getObject(java.lang.String)>("alphabet");

        r87 = (char[]) $r80;

        <org.apache.xalan.templates.ElemNumber: char[] m_alphaCountTable> = r87;

     label04:
        $r77 = <org.apache.xalan.templates.ElemNumber: char[] m_alphaCountTable>;

        virtualinvoke r0.<org.apache.xalan.templates.ElemNumber: void int2alphaCount(long,char[],org.apache.xml.utils.FastStringBuffer)>(l1, $r77, r5);

        goto label42;

     label05:
        $r66 = <org.apache.xalan.templates.ElemNumber: char[] m_alphaCountTable>;

        if $r66 != null goto label06;

        $r72 = virtualinvoke r0.<org.apache.xalan.templates.ElemNumber: java.util.Locale getLocale(org.apache.xalan.transformer.TransformerImpl,int)>(r63, i2);

        $r73 = staticinvoke <org.apache.xml.utils.res.XResourceBundle: org.apache.xml.utils.res.XResourceBundle loadResourceBundle(java.lang.String,java.util.Locale)>("org.apache.xml.utils.res.XResources", $r72);

        $r74 = virtualinvoke $r73.<java.util.ResourceBundle: java.lang.Object getObject(java.lang.String)>("alphabet");

        r88 = (char[]) $r74;

        <org.apache.xalan.templates.ElemNumber: char[] m_alphaCountTable> = r88;

     label06:
        $r67 = staticinvoke <org.apache.xml.utils.StringBufferPool: org.apache.xml.utils.FastStringBuffer get()>();

     label07:
        $r68 = <org.apache.xalan.templates.ElemNumber: char[] m_alphaCountTable>;

        virtualinvoke r0.<org.apache.xalan.templates.ElemNumber: void int2alphaCount(long,char[],org.apache.xml.utils.FastStringBuffer)>(l1, $r68, $r67);

        $r69 = virtualinvoke $r67.<org.apache.xml.utils.FastStringBuffer: java.lang.String toString()>();

        $r70 = virtualinvoke r0.<org.apache.xalan.templates.ElemNumber: java.util.Locale getLocale(org.apache.xalan.transformer.TransformerImpl,int)>(r63, i2);

        $r71 = virtualinvoke $r69.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r70);

        virtualinvoke r5.<org.apache.xml.utils.FastStringBuffer: void append(java.lang.String)>($r71);

        goto label43;

     label08:
        goto label42;

     label09:
        $r85 := @caughtexception;

        goto label44;

     label10:
        throw $r85;

     label11:
        $r75 = virtualinvoke r0.<org.apache.xalan.templates.ElemNumber: java.lang.String long2roman(long,boolean)>(l1, 1);

        virtualinvoke r5.<org.apache.xml.utils.FastStringBuffer: void append(java.lang.String)>($r75);

        goto label42;

     label12:
        $r62 = virtualinvoke r0.<org.apache.xalan.templates.ElemNumber: java.lang.String long2roman(long,boolean)>(l1, 1);

        $r64 = virtualinvoke r0.<org.apache.xalan.templates.ElemNumber: java.util.Locale getLocale(org.apache.xalan.transformer.TransformerImpl,int)>(r63, i2);

        $r65 = virtualinvoke $r62.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r64);

        virtualinvoke r5.<org.apache.xml.utils.FastStringBuffer: void append(java.lang.String)>($r65);

        goto label42;

     label13:
        $r92 = new java.util.Locale;

        specialinvoke $r92.<java.util.Locale: void <init>(java.lang.String,java.lang.String,java.lang.String)>("ja", "JP", "HA");

        $r32 = staticinvoke <org.apache.xml.utils.res.XResourceBundle: org.apache.xml.utils.res.XResourceBundle loadResourceBundle(java.lang.String,java.util.Locale)>("org.apache.xml.utils.res.XResources", $r92);

        if $r86 == null goto label14;

        $z5 = virtualinvoke $r86.<java.lang.String: boolean equals(java.lang.Object)>("traditional");

        if $z5 == 0 goto label14;

        $r36 = virtualinvoke r0.<org.apache.xalan.templates.ElemNumber: java.lang.String tradAlphaCount(long,org.apache.xml.utils.res.XResourceBundle)>(l1, $r32);

        virtualinvoke r5.<org.apache.xml.utils.FastStringBuffer: void append(java.lang.String)>($r36);

        goto label42;

     label14:
        $r33 = virtualinvoke $r32.<java.util.ResourceBundle: java.lang.Object getObject(java.lang.String)>("alphabet");

        $r34 = (char[]) $r33;

        $r35 = virtualinvoke r0.<org.apache.xalan.templates.ElemNumber: java.lang.String int2singlealphaCount(long,char[])>(l1, $r34);

        virtualinvoke r5.<org.apache.xml.utils.FastStringBuffer: void append(java.lang.String)>($r35);

        goto label42;

     label15:
        $r93 = new java.util.Locale;

        specialinvoke $r93.<java.util.Locale: void <init>(java.lang.String,java.lang.String,java.lang.String)>("ja", "JP", "HI");

        $r26 = staticinvoke <org.apache.xml.utils.res.XResourceBundle: org.apache.xml.utils.res.XResourceBundle loadResourceBundle(java.lang.String,java.util.Locale)>("org.apache.xml.utils.res.XResources", $r93);

        if $r86 == null goto label16;

        $z4 = virtualinvoke $r86.<java.lang.String: boolean equals(java.lang.Object)>("traditional");

        if $z4 == 0 goto label16;

        $r30 = virtualinvoke r0.<org.apache.xalan.templates.ElemNumber: java.lang.String tradAlphaCount(long,org.apache.xml.utils.res.XResourceBundle)>(l1, $r26);

        virtualinvoke r5.<org.apache.xml.utils.FastStringBuffer: void append(java.lang.String)>($r30);

        goto label42;

     label16:
        $r27 = virtualinvoke $r26.<java.util.ResourceBundle: java.lang.Object getObject(java.lang.String)>("alphabet");

        $r28 = (char[]) $r27;

        $r29 = virtualinvoke r0.<org.apache.xalan.templates.ElemNumber: java.lang.String int2singlealphaCount(long,char[])>(l1, $r28);

        virtualinvoke r5.<org.apache.xml.utils.FastStringBuffer: void append(java.lang.String)>($r29);

        goto label42;

     label17:
        $r94 = new java.util.Locale;

        specialinvoke $r94.<java.util.Locale: void <init>(java.lang.String,java.lang.String,java.lang.String)>("ja", "JP", "A");

        $r20 = staticinvoke <org.apache.xml.utils.res.XResourceBundle: org.apache.xml.utils.res.XResourceBundle loadResourceBundle(java.lang.String,java.util.Locale)>("org.apache.xml.utils.res.XResources", $r94);

        if $r86 == null goto label18;

        $z3 = virtualinvoke $r86.<java.lang.String: boolean equals(java.lang.Object)>("traditional");

        if $z3 == 0 goto label18;

        $r24 = virtualinvoke r0.<org.apache.xalan.templates.ElemNumber: java.lang.String tradAlphaCount(long,org.apache.xml.utils.res.XResourceBundle)>(l1, $r20);

        virtualinvoke r5.<org.apache.xml.utils.FastStringBuffer: void append(java.lang.String)>($r24);

        goto label42;

     label18:
        $r21 = virtualinvoke $r20.<java.util.ResourceBundle: java.lang.Object getObject(java.lang.String)>("alphabet");

        $r22 = (char[]) $r21;

        $r23 = virtualinvoke r0.<org.apache.xalan.templates.ElemNumber: java.lang.String int2singlealphaCount(long,char[])>(l1, $r22);

        virtualinvoke r5.<org.apache.xml.utils.FastStringBuffer: void append(java.lang.String)>($r23);

        goto label42;

     label19:
        $r95 = new java.util.Locale;

        specialinvoke $r95.<java.util.Locale: void <init>(java.lang.String,java.lang.String,java.lang.String)>("ja", "JP", "I");

        $r14 = staticinvoke <org.apache.xml.utils.res.XResourceBundle: org.apache.xml.utils.res.XResourceBundle loadResourceBundle(java.lang.String,java.util.Locale)>("org.apache.xml.utils.res.XResources", $r95);

        if $r86 == null goto label20;

        $z2 = virtualinvoke $r86.<java.lang.String: boolean equals(java.lang.Object)>("traditional");

        if $z2 == 0 goto label20;

        $r18 = virtualinvoke r0.<org.apache.xalan.templates.ElemNumber: java.lang.String tradAlphaCount(long,org.apache.xml.utils.res.XResourceBundle)>(l1, $r14);

        virtualinvoke r5.<org.apache.xml.utils.FastStringBuffer: void append(java.lang.String)>($r18);

        goto label42;

     label20:
        $r15 = virtualinvoke $r14.<java.util.ResourceBundle: java.lang.Object getObject(java.lang.String)>("alphabet");

        $r16 = (char[]) $r15;

        $r17 = virtualinvoke r0.<org.apache.xalan.templates.ElemNumber: java.lang.String int2singlealphaCount(long,char[])>(l1, $r16);

        virtualinvoke r5.<org.apache.xml.utils.FastStringBuffer: void append(java.lang.String)>($r17);

        goto label42;

     label21:
        $r96 = new java.util.Locale;

        specialinvoke $r96.<java.util.Locale: void <init>(java.lang.String,java.lang.String)>("zh", "CN");

        $r9 = staticinvoke <org.apache.xml.utils.res.XResourceBundle: org.apache.xml.utils.res.XResourceBundle loadResourceBundle(java.lang.String,java.util.Locale)>("org.apache.xml.utils.res.XResources", $r96);

        if $r86 == null goto label22;

        $z1 = virtualinvoke $r86.<java.lang.String: boolean equals(java.lang.Object)>("traditional");

        if $z1 == 0 goto label22;

        $r12 = virtualinvoke r0.<org.apache.xalan.templates.ElemNumber: java.lang.String tradAlphaCount(long,org.apache.xml.utils.res.XResourceBundle)>(l1, $r9);

        virtualinvoke r5.<org.apache.xml.utils.FastStringBuffer: void append(java.lang.String)>($r12);

        goto label42;

     label22:
        $r10 = virtualinvoke $r9.<java.util.ResourceBundle: java.lang.Object getObject(java.lang.String)>("alphabet");

        $r11 = (char[]) $r10;

        virtualinvoke r0.<org.apache.xalan.templates.ElemNumber: void int2alphaCount(long,char[],org.apache.xml.utils.FastStringBuffer)>(l1, $r11, r5);

        goto label42;

     label23:
        $r97 = new java.util.Locale;

        specialinvoke $r97.<java.util.Locale: void <init>(java.lang.String,java.lang.String)>("zh", "TW");

        $r3 = staticinvoke <org.apache.xml.utils.res.XResourceBundle: org.apache.xml.utils.res.XResourceBundle loadResourceBundle(java.lang.String,java.util.Locale)>("org.apache.xml.utils.res.XResources", $r97);

        if $r86 == null goto label24;

        $z0 = virtualinvoke $r86.<java.lang.String: boolean equals(java.lang.Object)>("traditional");

        if $z0 == 0 goto label24;

        $r7 = virtualinvoke r0.<org.apache.xalan.templates.ElemNumber: java.lang.String tradAlphaCount(long,org.apache.xml.utils.res.XResourceBundle)>(l1, $r3);

        virtualinvoke r5.<org.apache.xml.utils.FastStringBuffer: void append(java.lang.String)>($r7);

        goto label42;

     label24:
        $r4 = virtualinvoke $r3.<java.util.ResourceBundle: java.lang.Object getObject(java.lang.String)>("alphabet");

        $r6 = (char[]) $r4;

        virtualinvoke r0.<org.apache.xalan.templates.ElemNumber: void int2alphaCount(long,char[],org.apache.xml.utils.FastStringBuffer)>(l1, $r6, r5);

        goto label42;

     label25:
        $r98 = new java.util.Locale;

        specialinvoke $r98.<java.util.Locale: void <init>(java.lang.String,java.lang.String)>("th", "");

        $r43 = staticinvoke <org.apache.xml.utils.res.XResourceBundle: org.apache.xml.utils.res.XResourceBundle loadResourceBundle(java.lang.String,java.util.Locale)>("org.apache.xml.utils.res.XResources", $r98);

        if $r86 == null goto label26;

        $z7 = virtualinvoke $r86.<java.lang.String: boolean equals(java.lang.Object)>("traditional");

        if $z7 == 0 goto label26;

        $r46 = virtualinvoke r0.<org.apache.xalan.templates.ElemNumber: java.lang.String tradAlphaCount(long,org.apache.xml.utils.res.XResourceBundle)>(l1, $r43);

        virtualinvoke r5.<org.apache.xml.utils.FastStringBuffer: void append(java.lang.String)>($r46);

        goto label42;

     label26:
        $r44 = virtualinvoke $r43.<java.util.ResourceBundle: java.lang.Object getObject(java.lang.String)>("alphabet");

        $r45 = (char[]) $r44;

        virtualinvoke r0.<org.apache.xalan.templates.ElemNumber: void int2alphaCount(long,char[],org.apache.xml.utils.FastStringBuffer)>(l1, $r45, r5);

        goto label42;

     label27:
        $r99 = new java.util.Locale;

        specialinvoke $r99.<java.util.Locale: void <init>(java.lang.String,java.lang.String)>("he", "");

        $r48 = staticinvoke <org.apache.xml.utils.res.XResourceBundle: org.apache.xml.utils.res.XResourceBundle loadResourceBundle(java.lang.String,java.util.Locale)>("org.apache.xml.utils.res.XResources", $r99);

        if $r86 == null goto label28;

        $z8 = virtualinvoke $r86.<java.lang.String: boolean equals(java.lang.Object)>("traditional");

        if $z8 == 0 goto label28;

        $r51 = virtualinvoke r0.<org.apache.xalan.templates.ElemNumber: java.lang.String tradAlphaCount(long,org.apache.xml.utils.res.XResourceBundle)>(l1, $r48);

        virtualinvoke r5.<org.apache.xml.utils.FastStringBuffer: void append(java.lang.String)>($r51);

        goto label42;

     label28:
        $r49 = virtualinvoke $r48.<java.util.ResourceBundle: java.lang.Object getObject(java.lang.String)>("alphabet");

        $r50 = (char[]) $r49;

        virtualinvoke r0.<org.apache.xalan.templates.ElemNumber: void int2alphaCount(long,char[],org.apache.xml.utils.FastStringBuffer)>(l1, $r50, r5);

        goto label42;

     label29:
        $r100 = new java.util.Locale;

        specialinvoke $r100.<java.util.Locale: void <init>(java.lang.String,java.lang.String)>("ka", "");

        $r38 = staticinvoke <org.apache.xml.utils.res.XResourceBundle: org.apache.xml.utils.res.XResourceBundle loadResourceBundle(java.lang.String,java.util.Locale)>("org.apache.xml.utils.res.XResources", $r100);

        if $r86 == null goto label30;

        $z6 = virtualinvoke $r86.<java.lang.String: boolean equals(java.lang.Object)>("traditional");

        if $z6 == 0 goto label30;

        $r41 = virtualinvoke r0.<org.apache.xalan.templates.ElemNumber: java.lang.String tradAlphaCount(long,org.apache.xml.utils.res.XResourceBundle)>(l1, $r38);

        virtualinvoke r5.<org.apache.xml.utils.FastStringBuffer: void append(java.lang.String)>($r41);

        goto label42;

     label30:
        $r39 = virtualinvoke $r38.<java.util.ResourceBundle: java.lang.Object getObject(java.lang.String)>("alphabet");

        $r40 = (char[]) $r39;

        virtualinvoke r0.<org.apache.xalan.templates.ElemNumber: void int2alphaCount(long,char[],org.apache.xml.utils.FastStringBuffer)>(l1, $r40, r5);

        goto label42;

     label31:
        $r101 = new java.util.Locale;

        specialinvoke $r101.<java.util.Locale: void <init>(java.lang.String,java.lang.String)>("el", "");

        $r58 = staticinvoke <org.apache.xml.utils.res.XResourceBundle: org.apache.xml.utils.res.XResourceBundle loadResourceBundle(java.lang.String,java.util.Locale)>("org.apache.xml.utils.res.XResources", $r101);

        if $r86 == null goto label32;

        $z10 = virtualinvoke $r86.<java.lang.String: boolean equals(java.lang.Object)>("traditional");

        if $z10 == 0 goto label32;

        $r61 = virtualinvoke r0.<org.apache.xalan.templates.ElemNumber: java.lang.String tradAlphaCount(long,org.apache.xml.utils.res.XResourceBundle)>(l1, $r58);

        virtualinvoke r5.<org.apache.xml.utils.FastStringBuffer: void append(java.lang.String)>($r61);

        goto label42;

     label32:
        $r59 = virtualinvoke $r58.<java.util.ResourceBundle: java.lang.Object getObject(java.lang.String)>("alphabet");

        $r60 = (char[]) $r59;

        virtualinvoke r0.<org.apache.xalan.templates.ElemNumber: void int2alphaCount(long,char[],org.apache.xml.utils.FastStringBuffer)>(l1, $r60, r5);

        goto label42;

     label33:
        $r102 = new java.util.Locale;

        specialinvoke $r102.<java.util.Locale: void <init>(java.lang.String,java.lang.String)>("cy", "");

        $r53 = staticinvoke <org.apache.xml.utils.res.XResourceBundle: org.apache.xml.utils.res.XResourceBundle loadResourceBundle(java.lang.String,java.util.Locale)>("org.apache.xml.utils.res.XResources", $r102);

        if $r86 == null goto label34;

        $z9 = virtualinvoke $r86.<java.lang.String: boolean equals(java.lang.Object)>("traditional");

        if $z9 == 0 goto label34;

        $r56 = virtualinvoke r0.<org.apache.xalan.templates.ElemNumber: java.lang.String tradAlphaCount(long,org.apache.xml.utils.res.XResourceBundle)>(l1, $r53);

        virtualinvoke r5.<org.apache.xml.utils.FastStringBuffer: void append(java.lang.String)>($r56);

        goto label42;

     label34:
        $r54 = virtualinvoke $r53.<java.util.ResourceBundle: java.lang.Object getObject(java.lang.String)>("alphabet");

        $r55 = (char[]) $r54;

        virtualinvoke r0.<org.apache.xalan.templates.ElemNumber: void int2alphaCount(long,char[],org.apache.xml.utils.FastStringBuffer)>(l1, $r55, r5);

        goto label42;

     label35:
        $r81 = specialinvoke r0.<org.apache.xalan.templates.ElemNumber: java.text.DecimalFormat getNumberFormatter(org.apache.xalan.transformer.TransformerImpl,int)>(r63, i2);

        if $r81 != null goto label36;

        $r89 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(0);

        goto label37;

     label36:
        $r89 = virtualinvoke $r81.<java.text.NumberFormat: java.lang.String format(long)>(0L);

     label37:
        r90 = $r89;

        if $r81 != null goto label38;

        $r91 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>(l1);

        goto label39;

     label38:
        $r91 = virtualinvoke $r81.<java.text.NumberFormat: java.lang.String format(long)>(l1);

     label39:
        r82 = $r91;

        $i4 = virtualinvoke $r91.<java.lang.String: int length()>();

        $i5 = i3 - $i4;

        i6 = 0;

        goto label41;

     label40:
        virtualinvoke r5.<org.apache.xml.utils.FastStringBuffer: void append(java.lang.String)>(r90);

        i6 = i6 + 1;

     label41:
        if i6 < $i5 goto label40;

        virtualinvoke r5.<org.apache.xml.utils.FastStringBuffer: void append(java.lang.String)>(r82);

     label42:
        return;

     label43:
        staticinvoke <org.apache.xml.utils.StringBufferPool: void free(org.apache.xml.utils.FastStringBuffer)>($r67);

        goto label08;

     label44:
        staticinvoke <org.apache.xml.utils.StringBufferPool: void free(org.apache.xml.utils.FastStringBuffer)>($r67);

        goto label10;

        catch java.lang.Throwable from label07 to label09 with label09;
    }

    java.lang.String getZeroString()
    {
        org.apache.xalan.templates.ElemNumber r0;

        r0 := @this: org.apache.xalan.templates.ElemNumber;

        return "0";
    }

    protected java.lang.String int2singlealphaCount(long, char[])
    {
        long l1, $l2;
        char $c6;
        byte $b3;
        java.lang.Character $r5;
        int i0, $i4, $i5, $i7;
        char[] r0;
        java.lang.String $r2, $r4;
        org.apache.xalan.templates.ElemNumber r3;

        r3 := @this: org.apache.xalan.templates.ElemNumber;

        l1 := @parameter0: long;

        r0 := @parameter1: char[];

        i0 = lengthof r0;

        $l2 = (long) i0;

        $b3 = l1 cmp $l2;

        $i7 = (int) $b3;

        if $i7 <= 0 goto label1;

        $r4 = virtualinvoke r3.<org.apache.xalan.templates.ElemNumber: java.lang.String getZeroString()>();

        return $r4;

     label1:
        $r5 = new java.lang.Character;

        $i4 = (int) l1;

        $i5 = $i4 - 1;

        $c6 = r0[$i5];

        specialinvoke $r5.<java.lang.Character: void <init>(char)>($c6);

        $r2 = virtualinvoke $r5.<java.lang.Character: java.lang.String toString()>();

        return $r2;
    }

    protected void int2alphaCount(long, char[], org.apache.xml.utils.FastStringBuffer)
    {
        byte $b11, $b16, $b17;
        org.apache.xml.utils.FastStringBuffer r3;
        long l19, l23, $l24, $l25, $l28, $l29;
        int i0, $i1, $i2, $i3, $i5, $i7, $i8, $i9, $i12, $i13, $i14, $i15, $i18, i20, i21, i22, $i26, $i27, $i31, $i32;
        org.apache.xalan.templates.ElemNumber r4;
        char $c4, $c6, $c10;
        char[] r0, r1, r2;

        r4 := @this: org.apache.xalan.templates.ElemNumber;

        l19 := @parameter0: long;

        r0 := @parameter1: char[];

        r3 := @parameter2: org.apache.xml.utils.FastStringBuffer;

        i0 = lengthof r0;

        $i1 = lengthof r0;

        r1 = newarray (char)[$i1];

        i20 = 0;

        goto label2;

     label1:
        $i5 = i20 + 1;

        $c4 = r0[i20];

        r1[$i5] = $c4;

        i20 = i20 + 1;

     label2:
        $i2 = lengthof r0;

        $i3 = $i2 - 1;

        if i20 < $i3 goto label1;

        $c6 = r0[i20];

        r1[0] = $c6;

        r2 = newarray (char)[100];

        $i7 = lengthof r2;

        i21 = $i7 - 1;

        i22 = 1;

        l23 = 0L;

     label3:
        if i22 == 0 goto label4;

        $b17 = l23 cmp 0L;

        if $b17 == 0 goto label5;

        $i18 = i0 - 1;

        if i22 != $i18 goto label5;

     label4:
        $i8 = i0 - 1;

        $l24 = (long) $i8;

        goto label6;

     label5:
        $l24 = 0L;

     label6:
        l23 = $l24;

        $l25 = l19 + $l24;

        $i26 = (int) $l25;

        $i27 = $i26 % i0;

        i22 = $i27;

        $l28 = (long) i0;

        $l29 = l19 / $l28;

        l19 = $l29;

        if $i27 != 0 goto label7;

        $b16 = $l29 cmp 0L;

        if $b16 != 0 goto label7;

        goto label8;

     label7:
        $i9 = i21;

        $i31 = (int) -1;

        i21 = i21 + $i31;

        $c10 = r1[$i27];

        r2[$i9] = $c10;

        $b11 = $l29 cmp 0L;

        $i32 = (int) $b11;

        if $i32 > 0 goto label3;

     label8:
        $i15 = i21 + 1;

        $i12 = lengthof r2;

        $i13 = $i12 - i21;

        $i14 = $i13 - 1;

        virtualinvoke r3.<org.apache.xml.utils.FastStringBuffer: void append(char[],int,int)>(r2, $i15, $i14);

        return;
    }

    protected java.lang.String tradAlphaCount(long, org.apache.xml.utils.res.XResourceBundle)
    {
        byte $b0, $b4, $b19, $b22, $b24, $b32, $b48, $b57;
        long $l2, $l3, $l15, $l21, $l23, $l25, l26, $l27, $l30, $l31, $l56, l58;
        java.lang.String $r6, $r7, $r10, $r14, $r24;
        org.apache.xalan.templates.ElemNumber r19;
        org.apache.xml.utils.res.XResourceBundle r1;
        char[] r0, r16, $r18, r20, r21, r22, r23;
        int[] r3;
        boolean $z0, $z1;
        java.lang.String[] r5;
        long[] r12;
        int $i1, $i5, $i6, $i7, $i9, $i10, $i12, $i13, $i14, $i16, $i17, $i20, $i28, $i29, $i33, $i34, $i35, $i37, $i38, $i40, $i41, $i42, $i43, $i45, $i46, $i50, $i51, $i54, i59, i60, $i61, i62, i63, i64, i65, $i66, $i67, i68, i69, i70, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $i78, $i79;
        char $c8, $c11, $c18, $c36, $c39, $c44, $c47, $c49, $c52, $c53, $c55;
        java.lang.Object $r2, $r4, $r8, $r11, $r13, $r15, $r17;

        r19 := @this: org.apache.xalan.templates.ElemNumber;

        l58 := @parameter0: long;

        r1 := @parameter1: org.apache.xml.utils.res.XResourceBundle;

        $b0 = l58 cmp 9223372036854775807L;

        $i72 = (int) $b0;

        if $i72 <= 0 goto label01;

        virtualinvoke r19.<org.apache.xalan.templates.ElemTemplateElement: void error(java.lang.String)>("ER_NUMBER_TOO_BIG");

        return "#error";

     label01:
        r0 = newarray (char)[100];

        i59 = 0;

        $r2 = virtualinvoke r1.<java.util.ResourceBundle: java.lang.Object getObject(java.lang.String)>("numberGroups");

        r3 = (int[]) $r2;

        $r4 = virtualinvoke r1.<java.util.ResourceBundle: java.lang.Object getObject(java.lang.String)>("tables");

        r5 = (java.lang.String[]) $r4;

        $r6 = virtualinvoke r1.<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>("numbering");

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>("multiplicative-additive");

        if $z0 == 0 goto label21;

        $r10 = virtualinvoke r1.<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>("multiplierOrder");

        $r11 = virtualinvoke r1.<java.util.ResourceBundle: java.lang.Object getObject(java.lang.String)>("multiplier");

        r12 = (long[]) $r11;

        $r13 = virtualinvoke r1.<java.util.ResourceBundle: java.lang.Object getObject(java.lang.String)>("zero");

        r20 = (char[]) $r13;

        i60 = 0;

        goto label03;

     label02:
        i60 = i60 + 1;

     label03:
        $i20 = lengthof r12;

        if i60 >= $i20 goto label04;

        $l56 = r12[i60];

        $b57 = l58 cmp $l56;

        $i73 = (int) $b57;

        if $i73 < 0 goto label02;

     label04:
        $i61 = lengthof r12;

        if i60 < $i61 goto label05;

        goto label21;

     label05:
        $l21 = r12[i60];

        $b22 = l58 cmp $l21;

        $i74 = (int) $b22;

        if $i74 >= 0 goto label08;

        $i50 = lengthof r20;

        if $i50 != 0 goto label06;

        i60 = i60 + 1;

        goto label20;

     label06:
        $i51 = i59 - 1;

        $c53 = r0[$i51];

        $c52 = r20[0];

        $i75 = (int) $c53;

        $i76 = (int) $c52;

        if $i75 == $i76 goto label07;

        $i54 = i59;

        i59 = i59 + 1;

        $c55 = r20[0];

        r0[$i54] = $c55;

     label07:
        i60 = i60 + 1;

        goto label20;

     label08:
        $l23 = r12[i60];

        $b24 = l58 cmp $l23;

        $i77 = (int) $b24;

        if $i77 < 0 goto label20;

        $l25 = r12[i60];

        l26 = l58 / $l25;

        $l27 = r12[i60];

        l58 = l58 % $l27;

        i62 = 0;

        goto label18;

     label09:
        $i29 = r3[i62];

        $l30 = (long) $i29;

        $l31 = l26 / $l30;

        $b32 = $l31 cmp 0L;

        $i78 = (int) $b32;

        if $i78 > 0 goto label10;

        i62 = i62 + 1;

        goto label18;

     label10:
        $r14 = r5[i62];

        $r15 = virtualinvoke r1.<java.util.ResourceBundle: java.lang.Object getObject(java.lang.String)>($r14);

        r16 = (char[]) $r15;

        $i33 = lengthof r16;

        $i34 = $i33 + 1;

        r21 = newarray (char)[$i34];

        i63 = 0;

        goto label12;

     label11:
        $i37 = i63 + 1;

        $c36 = r16[i63];

        r21[$i37] = $c36;

        i63 = i63 + 1;

     label12:
        $i35 = lengthof r16;

        if i63 < $i35 goto label11;

        $i38 = i63 - 1;

        $c39 = r16[$i38];

        r21[0] = $c39;

        $i41 = (int) l26;

        $i40 = r3[i62];

        i64 = $i41 / $i40;

        if i64 != 0 goto label13;

        $b48 = l26 cmp 0L;

        if $b48 != 0 goto label13;

        goto label19;

     label13:
        $r17 = virtualinvoke r1.<java.util.ResourceBundle: java.lang.Object getObject(java.lang.String)>("multiplierChar");

        $r18 = (char[]) $r17;

        $c49 = $r18[i60];

        $i42 = lengthof r21;

        if i64 >= $i42 goto label17;

        $z1 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>("precedes");

        if $z1 == 0 goto label14;

        i65 = i59 + 1;

        r0[i59] = $c49;

        i59 = i65 + 1;

        $c47 = r21[i64];

        r0[i65] = $c47;

        goto label19;

     label14:
        if i64 != 1 goto label15;

        $i45 = lengthof r12;

        $i46 = $i45 - 1;

        if i60 != $i46 goto label15;

        goto label16;

     label15:
        $i43 = i59;

        i59 = i59 + 1;

        $c44 = r21[i64];

        r0[$i43] = $c44;

     label16:
        $i66 = i59;

        i59 = i59 + 1;

        r0[$i66] = $c49;

        goto label19;

     label17:
        return "#error";

     label18:
        $i28 = lengthof r3;

        if i62 < $i28 goto label09;

     label19:
        i60 = i60 + 1;

     label20:
        $i67 = lengthof r12;

        if i60 < $i67 goto label04;

     label21:
        i68 = 0;

        goto label29;

     label22:
        $i1 = r3[i68];

        $l2 = (long) $i1;

        $l3 = l58 / $l2;

        $b4 = $l3 cmp 0L;

        $i79 = (int) $b4;

        if $i79 > 0 goto label23;

        i68 = i68 + 1;

        goto label29;

     label23:
        $r7 = r5[i68];

        $r8 = virtualinvoke r1.<java.util.ResourceBundle: java.lang.Object getObject(java.lang.String)>($r7);

        r22 = (char[]) $r8;

        $i5 = lengthof r22;

        $i6 = $i5 + 1;

        r23 = newarray (char)[$i6];

        i69 = 0;

        goto label25;

     label24:
        $i9 = i69 + 1;

        $c8 = r22[i69];

        r23[$i9] = $c8;

        i69 = i69 + 1;

     label25:
        $i7 = lengthof r22;

        if i69 < $i7 goto label24;

        $i10 = i69 - 1;

        $c11 = r22[$i10];

        r23[0] = $c11;

        $i13 = (int) l58;

        $i12 = r3[i68];

        i70 = $i13 / $i12;

        $i14 = r3[i68];

        $l15 = (long) $i14;

        l58 = l58 % $l15;

        if i70 != 0 goto label26;

        $b19 = l58 cmp 0L;

        if $b19 != 0 goto label26;

        goto label30;

     label26:
        $i16 = lengthof r23;

        if i70 >= $i16 goto label27;

        $i17 = i59;

        i59 = i59 + 1;

        $c18 = r23[i70];

        r0[$i17] = $c18;

        goto label28;

     label27:
        return "#error";

     label28:
        i68 = i68 + 1;

     label29:
        $i71 = lengthof r3;

        if i68 < $i71 goto label22;

     label30:
        $r24 = new java.lang.String;

        specialinvoke $r24.<java.lang.String: void <init>(char[],int,int)>(r0, 0, i59);

        return $r24;
    }

    protected java.lang.String long2roman(long, boolean)
    {
        byte $b0, $b1, $b4, $b9, $b10;
        org.apache.xalan.transformer.DecimalToRoman $r3, $r7, $r9, $r13, $r17, $r22;
        boolean z0;
        org.apache.xalan.transformer.DecimalToRoman[] $r2, $r6, $r8, $r12, $r16, $r21;
        long $l2, $l3, $l5, l6, $l8;
        java.lang.StringBuffer $r1, $r5, $r11, $r15, $r23, $r24;
        int i7, $i11, $i12, $i13, $i14, $i15;
        java.lang.String $r4, $r14, $r19, r20;
        org.apache.xalan.templates.ElemNumber r18;

        r18 := @this: org.apache.xalan.templates.ElemNumber;

        l6 := @parameter0: long;

        z0 := @parameter1: boolean;

        $b0 = l6 cmp 0L;

        $i11 = (int) $b0;

        if $i11 > 0 goto label1;

        $r19 = virtualinvoke r18.<org.apache.xalan.templates.ElemNumber: java.lang.String getZeroString()>();

        return $r19;

     label1:
        r20 = "";

        i7 = 0;

        $b1 = l6 cmp 3999L;

        $i12 = (int) $b1;

        if $i12 > 0 goto label5;

        goto label3;

     label2:
        $r23 = new java.lang.StringBuffer;

        specialinvoke $r23.<java.lang.StringBuffer: void <init>()>();

        $r1 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r20);

        $r2 = <org.apache.xalan.templates.ElemNumber: org.apache.xalan.transformer.DecimalToRoman[] m_romanConvertTable>;

        $r3 = $r2[i7];

        $r4 = $r3.<org.apache.xalan.transformer.DecimalToRoman: java.lang.String m_postLetter>;

        $r5 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        r20 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        $r6 = <org.apache.xalan.templates.ElemNumber: org.apache.xalan.transformer.DecimalToRoman[] m_romanConvertTable>;

        $r7 = $r6[i7];

        $l2 = $r7.<org.apache.xalan.transformer.DecimalToRoman: long m_postValue>;

        l6 = l6 - $l2;

     label3:
        $r21 = <org.apache.xalan.templates.ElemNumber: org.apache.xalan.transformer.DecimalToRoman[] m_romanConvertTable>;

        $r22 = $r21[i7];

        $l8 = $r22.<org.apache.xalan.transformer.DecimalToRoman: long m_postValue>;

        $b9 = l6 cmp $l8;

        $i13 = (int) $b9;

        if $i13 >= 0 goto label2;

        if z0 == 0 goto label4;

        $r8 = <org.apache.xalan.templates.ElemNumber: org.apache.xalan.transformer.DecimalToRoman[] m_romanConvertTable>;

        $r9 = $r8[i7];

        $l3 = $r9.<org.apache.xalan.transformer.DecimalToRoman: long m_preValue>;

        $b4 = l6 cmp $l3;

        $i14 = (int) $b4;

        if $i14 < 0 goto label4;

        $r24 = new java.lang.StringBuffer;

        specialinvoke $r24.<java.lang.StringBuffer: void <init>()>();

        $r11 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r20);

        $r12 = <org.apache.xalan.templates.ElemNumber: org.apache.xalan.transformer.DecimalToRoman[] m_romanConvertTable>;

        $r13 = $r12[i7];

        $r14 = $r13.<org.apache.xalan.transformer.DecimalToRoman: java.lang.String m_preLetter>;

        $r15 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r14);

        r20 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.String toString()>();

        $r16 = <org.apache.xalan.templates.ElemNumber: org.apache.xalan.transformer.DecimalToRoman[] m_romanConvertTable>;

        $r17 = $r16[i7];

        $l5 = $r17.<org.apache.xalan.transformer.DecimalToRoman: long m_preValue>;

        l6 = l6 - $l5;

     label4:
        i7 = i7 + 1;

        $b10 = l6 cmp 0L;

        $i15 = (int) $b10;

        if $i15 > 0 goto label3;

        goto label6;

     label5:
        r20 = "#error";

     label6:
        return r20;
    }

    public void callChildVisitors(org.apache.xalan.templates.XSLTVisitor, boolean)
    {
        org.apache.xalan.templates.AVT $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14;
        org.apache.xalan.templates.ElemNumber r0;
        boolean z0;
        org.apache.xpath.Expression $r16, $r19, $r22;
        org.apache.xalan.templates.XSLTVisitor r1;
        org.apache.xpath.XPath $r2, $r3, $r4, $r15, $r17, $r18, $r20, $r21, $r23;

        r0 := @this: org.apache.xalan.templates.ElemNumber;

        r1 := @parameter0: org.apache.xalan.templates.XSLTVisitor;

        z0 := @parameter1: boolean;

        if z0 == 0 goto label8;

        $r2 = r0.<org.apache.xalan.templates.ElemNumber: org.apache.xpath.XPath m_countMatchPattern>;

        if null == $r2 goto label1;

        $r21 = r0.<org.apache.xalan.templates.ElemNumber: org.apache.xpath.XPath m_countMatchPattern>;

        $r22 = virtualinvoke $r21.<org.apache.xpath.XPath: org.apache.xpath.Expression getExpression()>();

        $r23 = r0.<org.apache.xalan.templates.ElemNumber: org.apache.xpath.XPath m_countMatchPattern>;

        virtualinvoke $r22.<org.apache.xpath.Expression: void callVisitors(org.apache.xpath.ExpressionOwner,org.apache.xpath.XPathVisitor)>($r23, r1);

     label1:
        $r3 = r0.<org.apache.xalan.templates.ElemNumber: org.apache.xpath.XPath m_fromMatchPattern>;

        if null == $r3 goto label2;

        $r18 = r0.<org.apache.xalan.templates.ElemNumber: org.apache.xpath.XPath m_fromMatchPattern>;

        $r19 = virtualinvoke $r18.<org.apache.xpath.XPath: org.apache.xpath.Expression getExpression()>();

        $r20 = r0.<org.apache.xalan.templates.ElemNumber: org.apache.xpath.XPath m_fromMatchPattern>;

        virtualinvoke $r19.<org.apache.xpath.Expression: void callVisitors(org.apache.xpath.ExpressionOwner,org.apache.xpath.XPathVisitor)>($r20, r1);

     label2:
        $r4 = r0.<org.apache.xalan.templates.ElemNumber: org.apache.xpath.XPath m_valueExpr>;

        if null == $r4 goto label3;

        $r15 = r0.<org.apache.xalan.templates.ElemNumber: org.apache.xpath.XPath m_valueExpr>;

        $r16 = virtualinvoke $r15.<org.apache.xpath.XPath: org.apache.xpath.Expression getExpression()>();

        $r17 = r0.<org.apache.xalan.templates.ElemNumber: org.apache.xpath.XPath m_valueExpr>;

        virtualinvoke $r16.<org.apache.xpath.Expression: void callVisitors(org.apache.xpath.ExpressionOwner,org.apache.xpath.XPathVisitor)>($r17, r1);

     label3:
        $r5 = r0.<org.apache.xalan.templates.ElemNumber: org.apache.xalan.templates.AVT m_format_avt>;

        if null == $r5 goto label4;

        $r14 = r0.<org.apache.xalan.templates.ElemNumber: org.apache.xalan.templates.AVT m_format_avt>;

        virtualinvoke $r14.<org.apache.xalan.templates.AVT: void callVisitors(org.apache.xalan.templates.XSLTVisitor)>(r1);

     label4:
        $r6 = r0.<org.apache.xalan.templates.ElemNumber: org.apache.xalan.templates.AVT m_groupingSeparator_avt>;

        if null == $r6 goto label5;

        $r13 = r0.<org.apache.xalan.templates.ElemNumber: org.apache.xalan.templates.AVT m_groupingSeparator_avt>;

        virtualinvoke $r13.<org.apache.xalan.templates.AVT: void callVisitors(org.apache.xalan.templates.XSLTVisitor)>(r1);

     label5:
        $r7 = r0.<org.apache.xalan.templates.ElemNumber: org.apache.xalan.templates.AVT m_groupingSize_avt>;

        if null == $r7 goto label6;

        $r12 = r0.<org.apache.xalan.templates.ElemNumber: org.apache.xalan.templates.AVT m_groupingSize_avt>;

        virtualinvoke $r12.<org.apache.xalan.templates.AVT: void callVisitors(org.apache.xalan.templates.XSLTVisitor)>(r1);

     label6:
        $r8 = r0.<org.apache.xalan.templates.ElemNumber: org.apache.xalan.templates.AVT m_lang_avt>;

        if null == $r8 goto label7;

        $r11 = r0.<org.apache.xalan.templates.ElemNumber: org.apache.xalan.templates.AVT m_lang_avt>;

        virtualinvoke $r11.<org.apache.xalan.templates.AVT: void callVisitors(org.apache.xalan.templates.XSLTVisitor)>(r1);

     label7:
        $r9 = r0.<org.apache.xalan.templates.ElemNumber: org.apache.xalan.templates.AVT m_lettervalue_avt>;

        if null == $r9 goto label8;

        $r10 = r0.<org.apache.xalan.templates.ElemNumber: org.apache.xalan.templates.AVT m_lettervalue_avt>;

        virtualinvoke $r10.<org.apache.xalan.templates.AVT: void callVisitors(org.apache.xalan.templates.XSLTVisitor)>(r1);

     label8:
        specialinvoke r0.<org.apache.xalan.templates.ElemTemplateElement: void callChildVisitors(org.apache.xalan.templates.XSLTVisitor,boolean)>(r1, z0);

        return;
    }

    static void <clinit>()
    {
        org.apache.xalan.transformer.DecimalToRoman[] $r0;
        org.apache.xalan.transformer.DecimalToRoman $r1, $r2, $r3, $r4, $r5, $r6, $r7;

        $r0 = newarray (org.apache.xalan.transformer.DecimalToRoman)[7];

        $r1 = new org.apache.xalan.transformer.DecimalToRoman;

        specialinvoke $r1.<org.apache.xalan.transformer.DecimalToRoman: void <init>(long,java.lang.String,long,java.lang.String)>(1000L, "M", 900L, "CM");

        $r0[0] = $r1;

        $r2 = new org.apache.xalan.transformer.DecimalToRoman;

        specialinvoke $r2.<org.apache.xalan.transformer.DecimalToRoman: void <init>(long,java.lang.String,long,java.lang.String)>(500L, "D", 400L, "CD");

        $r0[1] = $r2;

        $r3 = new org.apache.xalan.transformer.DecimalToRoman;

        specialinvoke $r3.<org.apache.xalan.transformer.DecimalToRoman: void <init>(long,java.lang.String,long,java.lang.String)>(100L, "C", 90L, "XC");

        $r0[2] = $r3;

        $r4 = new org.apache.xalan.transformer.DecimalToRoman;

        specialinvoke $r4.<org.apache.xalan.transformer.DecimalToRoman: void <init>(long,java.lang.String,long,java.lang.String)>(50L, "L", 40L, "XL");

        $r0[3] = $r4;

        $r5 = new org.apache.xalan.transformer.DecimalToRoman;

        specialinvoke $r5.<org.apache.xalan.transformer.DecimalToRoman: void <init>(long,java.lang.String,long,java.lang.String)>(10L, "X", 9L, "IX");

        $r0[4] = $r5;

        $r6 = new org.apache.xalan.transformer.DecimalToRoman;

        specialinvoke $r6.<org.apache.xalan.transformer.DecimalToRoman: void <init>(long,java.lang.String,long,java.lang.String)>(5L, "V", 4L, "IV");

        $r0[5] = $r6;

        $r7 = new org.apache.xalan.transformer.DecimalToRoman;

        specialinvoke $r7.<org.apache.xalan.transformer.DecimalToRoman: void <init>(long,java.lang.String,long,java.lang.String)>(1L, "I", 1L, "I");

        $r0[6] = $r7;

        <org.apache.xalan.templates.ElemNumber: org.apache.xalan.transformer.DecimalToRoman[] m_romanConvertTable> = $r0;

        <org.apache.xalan.templates.ElemNumber: char[] m_alphaCountTable> = null;

        return;
    }
}
