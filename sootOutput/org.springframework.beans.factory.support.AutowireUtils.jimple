abstract class org.springframework.beans.factory.support.AutowireUtils extends java.lang.Object
{

    void <init>()
    {
        org.springframework.beans.factory.support.AutowireUtils r0;

        r0 := @this: org.springframework.beans.factory.support.AutowireUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void sortConstructors(java.lang.reflect.Constructor[])
    {
        java.lang.reflect.Constructor[] r0;
        org.springframework.beans.factory.support.AutowireUtils$1 $r1;

        r0 := @parameter0: java.lang.reflect.Constructor[];

        $r1 = new org.springframework.beans.factory.support.AutowireUtils$1;

        specialinvoke $r1.<org.springframework.beans.factory.support.AutowireUtils$1: void <init>()>();

        staticinvoke <java.util.Arrays: void sort(java.lang.Object[],java.util.Comparator)>(r0, $r1);

        return;
    }

    public static void sortFactoryMethods(java.lang.reflect.Method[])
    {
        java.lang.reflect.Method[] r0;
        org.springframework.beans.factory.support.AutowireUtils$2 $r1;

        r0 := @parameter0: java.lang.reflect.Method[];

        $r1 = new org.springframework.beans.factory.support.AutowireUtils$2;

        specialinvoke $r1.<org.springframework.beans.factory.support.AutowireUtils$2: void <init>()>();

        staticinvoke <java.util.Arrays: void sort(java.lang.Object[],java.util.Comparator)>(r0, $r1);

        return;
    }

    public static boolean isExcludedFromDependencyCheck(java.beans.PropertyDescriptor)
    {
        java.lang.Class[] $r7;
        java.beans.PropertyDescriptor r0;
        java.lang.Class $r2, $r4, $r5;
        java.lang.String $r3, $r6;
        java.lang.reflect.Method $r1;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: java.beans.PropertyDescriptor;

        $r1 = virtualinvoke r0.<java.beans.PropertyDescriptor: java.lang.reflect.Method getWriteMethod()>();

        if $r1 != null goto label1;

        return 0;

     label1:
        $r2 = virtualinvoke $r1.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        $z0 = virtualinvoke $r3.<java.lang.String: boolean contains(java.lang.CharSequence)>("$$");

        if $z0 != 0 goto label2;

        return 0;

     label2:
        $r4 = virtualinvoke $r1.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>();

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.Class getSuperclass()>();

        $r6 = virtualinvoke $r1.<java.lang.reflect.Method: java.lang.String getName()>();

        $r7 = virtualinvoke $r1.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $z1 = staticinvoke <org.springframework.util.ClassUtils: boolean hasMethod(java.lang.Class,java.lang.String,java.lang.Class[])>($r5, $r6, $r7);

        if $z1 == 0 goto label3;

        $z2 = 0;

        goto label4;

     label3:
        $z2 = 1;

     label4:
        return $z2;
    }

    public static boolean isSetterDefinedInInterface(java.beans.PropertyDescriptor, java.util.Set)
    {
        java.util.Iterator $r4;
        java.util.Set r3;
        java.lang.Class[] $r8;
        java.beans.PropertyDescriptor r0;
        java.lang.Class $r2, r6;
        java.lang.Object $r5;
        java.lang.String $r7;
        java.lang.reflect.Method $r1;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: java.beans.PropertyDescriptor;

        r3 := @parameter1: java.util.Set;

        $r1 = virtualinvoke r0.<java.beans.PropertyDescriptor: java.lang.reflect.Method getWriteMethod()>();

        if $r1 == null goto label3;

        $r2 = virtualinvoke $r1.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>();

        $r4 = interfaceinvoke r3.<java.util.Set: java.util.Iterator iterator()>();

        goto label2;

     label1:
        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.lang.Class) $r5;

        $z0 = virtualinvoke r6.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r2);

        if $z0 == 0 goto label2;

        $r7 = virtualinvoke $r1.<java.lang.reflect.Method: java.lang.String getName()>();

        $r8 = virtualinvoke $r1.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $z1 = staticinvoke <org.springframework.util.ClassUtils: boolean hasMethod(java.lang.Class,java.lang.String,java.lang.Class[])>(r6, $r7, $r8);

        if $z1 == 0 goto label2;

        return 1;

     label2:
        $z2 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z2 != 0 goto label1;

     label3:
        return 0;
    }

    public static java.lang.Object resolveAutowiringValue(java.lang.Object, java.lang.Class)
    {
        java.lang.Class[] $r4;
        org.springframework.beans.factory.ObjectFactory r1;
        org.springframework.beans.factory.support.AutowireUtils$ObjectFactoryDelegatingInvocationHandler $r5;
        java.lang.Class r0;
        java.lang.Object $r2, r6;
        java.lang.ClassLoader $r3;
        boolean $z0, $z1, $z2, $z3;

        r6 := @parameter0: java.lang.Object;

        r0 := @parameter1: java.lang.Class;

        $z0 = r6 instanceof org.springframework.beans.factory.ObjectFactory;

        if $z0 == 0 goto label2;

        $z1 = virtualinvoke r0.<java.lang.Class: boolean isInstance(java.lang.Object)>(r6);

        if $z1 != 0 goto label2;

        r1 = (org.springframework.beans.factory.ObjectFactory) r6;

        $z2 = r6 instanceof java.io.Serializable;

        if $z2 == 0 goto label1;

        $z3 = virtualinvoke r0.<java.lang.Class: boolean isInterface()>();

        if $z3 == 0 goto label1;

        $r3 = virtualinvoke r0.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r4 = newarray (java.lang.Class)[1];

        $r4[0] = r0;

        $r5 = new org.springframework.beans.factory.support.AutowireUtils$ObjectFactoryDelegatingInvocationHandler;

        specialinvoke $r5.<org.springframework.beans.factory.support.AutowireUtils$ObjectFactoryDelegatingInvocationHandler: void <init>(org.springframework.beans.factory.ObjectFactory)>(r1);

        r6 = staticinvoke <java.lang.reflect.Proxy: java.lang.Object newProxyInstance(java.lang.ClassLoader,java.lang.Class[],java.lang.reflect.InvocationHandler)>($r3, $r4, $r5);

        goto label2;

     label1:
        $r2 = interfaceinvoke r1.<org.springframework.beans.factory.ObjectFactory: java.lang.Object getObject()>();

        return $r2;

     label2:
        return r6;
    }
}
