public class com.sun.lwuit.table.TableLayout extends com.sun.lwuit.layouts.Layout
{
    private int currentRow;
    private int currentColumn;
    private static int minimumSizePerColumn;
    private com.sun.lwuit.table.TableLayout$Constraint[][] tablePositions;
    private int[] columnSizes;
    private int[] columnPositions;
    private int[] rowPositions;
    private boolean[] modifableColumnSize;
    private static final com.sun.lwuit.table.TableLayout$Constraint H_SPAN_CONSTRAINT;
    private static final com.sun.lwuit.table.TableLayout$Constraint V_SPAN_CONSTRAINT;
    private static final com.sun.lwuit.table.TableLayout$Constraint VH_SPAN_CONSTRAINT;
    private static int defaultColumnWidth;
    private static int defaultRowHeight;
    private boolean horizontalSpanningExists;
    private boolean verticalSpanningExists;

    public void <init>(int, int)
    {
        com.sun.lwuit.table.TableLayout$Constraint[][] $r1;
        com.sun.lwuit.table.TableLayout r0;
        int i0, i1;

        r0 := @this: com.sun.lwuit.table.TableLayout;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<com.sun.lwuit.layouts.Layout: void <init>()>();

        $r1 = newmultiarray (com.sun.lwuit.table.TableLayout$Constraint)[i0][i1];

        r0.<com.sun.lwuit.table.TableLayout: com.sun.lwuit.table.TableLayout$Constraint[][] tablePositions> = $r1;

        return;
    }

    public com.sun.lwuit.Component getComponentAt(int, int)
    {
        com.sun.lwuit.Component $r4;
        com.sun.lwuit.table.TableLayout$Constraint[] $r2;
        com.sun.lwuit.table.TableLayout$Constraint[][] $r1;
        com.sun.lwuit.table.TableLayout$Constraint $r3;
        com.sun.lwuit.table.TableLayout r0;
        int i0, i1;

        r0 := @this: com.sun.lwuit.table.TableLayout;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<com.sun.lwuit.table.TableLayout: com.sun.lwuit.table.TableLayout$Constraint[][] tablePositions>;

        $r2 = $r1[i0];

        $r3 = $r2[i1];

        $r4 = staticinvoke <com.sun.lwuit.table.TableLayout$Constraint: com.sun.lwuit.Component access$000(com.sun.lwuit.table.TableLayout$Constraint)>($r3);

        return $r4;
    }

    public void layoutContainer(com.sun.lwuit.Container)
    {
        com.sun.lwuit.plaf.Style $r2, $r20;
        boolean[] $r6, $r32, $r33, $r34, $r37, $r43;
        int[] $r5, $r9, $r12, $r13, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r30, $r31, $r35, $r36, $r38, $r39, $r40, $r44, $r45, $r46;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $i64, $i65, i66, i67, $i68, i69, i70, i71, i72, i73, i74, i75, $i76, i77, i78, i79, i80, i81, i82, i83, i84, i85, i86, i87, $i89;
        com.sun.lwuit.table.TableLayout$Constraint[][] $r3, $r7, $r10, $r11, $r14, $r41;
        com.sun.lwuit.table.TableLayout$Constraint $r16, $r17, $r18, r47;
        com.sun.lwuit.table.TableLayout r0;
        com.sun.lwuit.Component $r19;
        com.sun.lwuit.table.TableLayout$Constraint[] $r4, $r8, $r15, $r42;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        float $f0, $f1, $f2, $f3, $f4;
        com.sun.lwuit.Container r1;

        r0 := @this: com.sun.lwuit.table.TableLayout;

        r1 := @parameter0: com.sun.lwuit.Container;

        r0.<com.sun.lwuit.table.TableLayout: boolean verticalSpanningExists> = 0;

        r0.<com.sun.lwuit.table.TableLayout: boolean horizontalSpanningExists> = 0;

        $r2 = virtualinvoke r1.<com.sun.lwuit.Container: com.sun.lwuit.plaf.Style getStyle()>();

        $i0 = virtualinvoke $r2.<com.sun.lwuit.plaf.Style: int getPadding(boolean,int)>(0, 0);

        $z0 = virtualinvoke r1.<com.sun.lwuit.Container: boolean isRTL()>();

        $i1 = virtualinvoke $r2.<com.sun.lwuit.plaf.Style: int getPadding(boolean,int)>($z0, 1);

        $i2 = virtualinvoke $r2.<com.sun.lwuit.plaf.Style: int getPadding(boolean,int)>(0, 2);

        $z1 = virtualinvoke r1.<com.sun.lwuit.Container: boolean isRTL()>();

        $i3 = virtualinvoke $r2.<com.sun.lwuit.plaf.Style: int getPadding(boolean,int)>($z1, 3);

        $z2 = virtualinvoke r1.<com.sun.lwuit.Container: boolean isRTL()>();

        $r3 = r0.<com.sun.lwuit.table.TableLayout: com.sun.lwuit.table.TableLayout$Constraint[][] tablePositions>;

        $r4 = $r3[0];

        $i4 = lengthof $r4;

        $r5 = newarray (int)[$i4];

        r0.<com.sun.lwuit.table.TableLayout: int[] columnSizes> = $r5;

        $r6 = r0.<com.sun.lwuit.table.TableLayout: boolean[] modifableColumnSize>;

        if $r6 != null goto label01;

        $r41 = r0.<com.sun.lwuit.table.TableLayout: com.sun.lwuit.table.TableLayout$Constraint[][] tablePositions>;

        $r42 = $r41[0];

        $i63 = lengthof $r42;

        $r43 = newarray (boolean)[$i63];

        r0.<com.sun.lwuit.table.TableLayout: boolean[] modifableColumnSize> = $r43;

     label01:
        $r7 = r0.<com.sun.lwuit.table.TableLayout: com.sun.lwuit.table.TableLayout$Constraint[][] tablePositions>;

        $r8 = $r7[0];

        $i5 = lengthof $r8;

        $r9 = newarray (int)[$i5];

        r0.<com.sun.lwuit.table.TableLayout: int[] columnPositions> = $r9;

        $r10 = r0.<com.sun.lwuit.table.TableLayout: com.sun.lwuit.table.TableLayout$Constraint[][] tablePositions>;

        $i6 = lengthof $r10;

        $r44 = newarray (int)[$i6];

        $r11 = r0.<com.sun.lwuit.table.TableLayout: com.sun.lwuit.table.TableLayout$Constraint[][] tablePositions>;

        $i7 = lengthof $r11;

        $r12 = newarray (int)[$i7];

        r0.<com.sun.lwuit.table.TableLayout: int[] rowPositions> = $r12;

        $i8 = virtualinvoke r1.<com.sun.lwuit.Container: int getLayoutWidth()>();

        $i9 = virtualinvoke r1.<com.sun.lwuit.Container: int getSideGap()>();

        $i10 = $i8 - $i9;

        $i11 = $i10 - $i1;

        $i64 = $i11 - $i3;

        $i12 = virtualinvoke r1.<com.sun.lwuit.Container: int getLayoutHeight()>();

        $i13 = virtualinvoke r1.<com.sun.lwuit.Container: int getBottomGap()>();

        $i14 = $i12 - $i13;

        $i15 = $i14 - $i0;

        $i65 = $i15 - $i2;

        i66 = $i1;

        i67 = 0;

     label02:
        $r45 = r0.<com.sun.lwuit.table.TableLayout: int[] columnSizes>;

        $i68 = lengthof $r45;

        if i67 >= $i68 goto label03;

        $r40 = r0.<com.sun.lwuit.table.TableLayout: int[] columnSizes>;

        $i62 = specialinvoke r0.<com.sun.lwuit.table.TableLayout: int getColumnWidthPixels(int,int,int)>(i67, $i64, $i64);

        $r40[i67] = $i62;

        i67 = i67 + 1;

        goto label02;

     label03:
        $z3 = virtualinvoke r1.<com.sun.lwuit.Container: boolean isScrollableX()>();

        if $z3 != 0 goto label09;

        i69 = 0;

        i70 = 0;

        i71 = 0;

     label04:
        $r32 = r0.<com.sun.lwuit.table.TableLayout: boolean[] modifableColumnSize>;

        $i56 = lengthof $r32;

        if i71 >= $i56 goto label06;

        $r37 = r0.<com.sun.lwuit.table.TableLayout: boolean[] modifableColumnSize>;

        $z9 = $r37[i71];

        if $z9 == 0 goto label05;

        $r39 = r0.<com.sun.lwuit.table.TableLayout: int[] columnSizes>;

        $i61 = $r39[i71];

        i70 = i70 + $i61;

     label05:
        $r38 = r0.<com.sun.lwuit.table.TableLayout: int[] columnSizes>;

        $i60 = $r38[i71];

        i69 = i69 + $i60;

        i71 = i71 + 1;

        goto label04;

     label06:
        if $i64 >= i69 goto label09;

        i72 = i69 - $i64;

        i73 = i70 - i72;

        i74 = 0;

     label07:
        $r33 = r0.<com.sun.lwuit.table.TableLayout: boolean[] modifableColumnSize>;

        $i57 = lengthof $r33;

        if i74 >= $i57 goto label09;

        $r34 = r0.<com.sun.lwuit.table.TableLayout: boolean[] modifableColumnSize>;

        $z8 = $r34[i74];

        if $z8 == 0 goto label08;

        $r36 = r0.<com.sun.lwuit.table.TableLayout: int[] columnSizes>;

        $r35 = r0.<com.sun.lwuit.table.TableLayout: int[] columnSizes>;

        $i58 = $r35[i74];

        $f1 = (float) $i58;

        $f0 = (float) i70;

        $f3 = $f1 / $f0;

        $f2 = (float) i73;

        $f4 = $f3 * $f2;

        $i59 = (int) $f4;

        $r36[i74] = $i59;

     label08:
        i74 = i74 + 1;

        goto label07;

     label09:
        i75 = 0;

     label10:
        $r46 = r0.<com.sun.lwuit.table.TableLayout: int[] columnSizes>;

        $i76 = lengthof $r46;

        if i75 >= $i76 goto label13;

        if $z2 == 0 goto label11;

        $r30 = r0.<com.sun.lwuit.table.TableLayout: int[] columnSizes>;

        $i54 = $r30[i75];

        i66 = i66 + $i54;

        $r31 = r0.<com.sun.lwuit.table.TableLayout: int[] columnPositions>;

        $i55 = $i64 - i66;

        $r31[i75] = $i55;

        goto label12;

     label11:
        $r28 = r0.<com.sun.lwuit.table.TableLayout: int[] columnPositions>;

        $r28[i75] = i66;

        $r29 = r0.<com.sun.lwuit.table.TableLayout: int[] columnSizes>;

        $i53 = $r29[i75];

        i66 = i66 + $i53;

     label12:
        i75 = i75 + 1;

        goto label10;

     label13:
        i77 = $i0;

        i78 = 0;

     label14:
        $i16 = lengthof $r44;

        if i78 >= $i16 goto label17;

        $z7 = virtualinvoke r1.<com.sun.lwuit.Container: boolean isScrollableY()>();

        if $z7 == 0 goto label15;

        $i89 = (int) -1;

        $i52 = specialinvoke r0.<com.sun.lwuit.table.TableLayout: int getRowHeightPixels(int,int,int)>(i78, $i65, $i89);

        $r44[i78] = $i52;

        goto label16;

     label15:
        $i49 = $i65 - i77;

        $i50 = specialinvoke r0.<com.sun.lwuit.table.TableLayout: int getRowHeightPixels(int,int,int)>(i78, $i65, $i49);

        $r44[i78] = $i50;

     label16:
        $r27 = r0.<com.sun.lwuit.table.TableLayout: int[] rowPositions>;

        $r27[i78] = i77;

        $i51 = $r44[i78];

        i77 = i77 + $i51;

        i78 = i78 + 1;

        goto label14;

     label17:
        i79 = 0;

     label18:
        $i17 = lengthof $r44;

        if i79 >= $i17 goto label31;

        i80 = 0;

     label19:
        $r13 = r0.<com.sun.lwuit.table.TableLayout: int[] columnSizes>;

        $i18 = lengthof $r13;

        if i80 >= $i18 goto label30;

        $r14 = r0.<com.sun.lwuit.table.TableLayout: com.sun.lwuit.table.TableLayout$Constraint[][] tablePositions>;

        $r15 = $r14[i79];

        r47 = $r15[i80];

        if r47 == null goto label29;

        $r16 = <com.sun.lwuit.table.TableLayout: com.sun.lwuit.table.TableLayout$Constraint H_SPAN_CONSTRAINT>;

        if r47 == $r16 goto label29;

        $r17 = <com.sun.lwuit.table.TableLayout: com.sun.lwuit.table.TableLayout$Constraint V_SPAN_CONSTRAINT>;

        if r47 == $r17 goto label29;

        $r18 = <com.sun.lwuit.table.TableLayout: com.sun.lwuit.table.TableLayout$Constraint VH_SPAN_CONSTRAINT>;

        if r47 == $r18 goto label29;

        $r19 = staticinvoke <com.sun.lwuit.table.TableLayout$Constraint: com.sun.lwuit.Component access$000(com.sun.lwuit.table.TableLayout$Constraint)>(r47);

        $r20 = virtualinvoke $r19.<com.sun.lwuit.Component: com.sun.lwuit.plaf.Style getStyle()>();

        $z4 = virtualinvoke r1.<com.sun.lwuit.Container: boolean isRTL()>();

        $i19 = virtualinvoke $r20.<com.sun.lwuit.plaf.Style: int getMargin(boolean,int)>($z4, 1);

        $i20 = virtualinvoke $r20.<com.sun.lwuit.plaf.Style: int getMargin(boolean,int)>(0, 0);

        $i22 = $i1 + $i19;

        $r21 = r0.<com.sun.lwuit.table.TableLayout: int[] columnPositions>;

        $i21 = $r21[i80];

        i81 = $i22 + $i21;

        $i24 = $i0 + $i20;

        $r22 = r0.<com.sun.lwuit.table.TableLayout: int[] rowPositions>;

        $i23 = $r22[i79];

        i25 = $i24 + $i23;

        $i26 = staticinvoke <com.sun.lwuit.table.TableLayout$Constraint: int access$100(com.sun.lwuit.table.TableLayout$Constraint)>(r47);

        if $i26 <= 1 goto label23;

        r0.<com.sun.lwuit.table.TableLayout: boolean horizontalSpanningExists> = 1;

        $r24 = r0.<com.sun.lwuit.table.TableLayout: int[] columnSizes>;

        i82 = $r24[i80];

        i83 = 1;

     label20:
        $i39 = staticinvoke <com.sun.lwuit.table.TableLayout$Constraint: int access$100(com.sun.lwuit.table.TableLayout$Constraint)>(r47);

        if i83 >= $i39 goto label21;

        $r26 = r0.<com.sun.lwuit.table.TableLayout: int[] columnSizes>;

        $i47 = i80 + i83;

        $i48 = $r26[$i47];

        i82 = i82 + $i48;

        i83 = i83 + 1;

        goto label20;

     label21:
        if $z2 == 0 goto label22;

        $i42 = $i1 + $i19;

        $r25 = r0.<com.sun.lwuit.table.TableLayout: int[] columnPositions>;

        $i43 = staticinvoke <com.sun.lwuit.table.TableLayout$Constraint: int access$100(com.sun.lwuit.table.TableLayout$Constraint)>(r47);

        $i44 = i80 + $i43;

        $i45 = $i44 - 1;

        $i46 = $r25[$i45];

        i81 = $i42 + $i46;

     label22:
        $i40 = i82 - $i19;

        $z6 = virtualinvoke r1.<com.sun.lwuit.Container: boolean isRTL()>();

        $i41 = virtualinvoke $r20.<com.sun.lwuit.plaf.Style: int getMargin(boolean,int)>($z6, 3);

        i84 = $i40 - $i41;

        goto label24;

     label23:
        $r23 = r0.<com.sun.lwuit.table.TableLayout: int[] columnSizes>;

        $i27 = $r23[i80];

        $i28 = $i27 - $i19;

        $z5 = virtualinvoke r1.<com.sun.lwuit.Container: boolean isRTL()>();

        $i29 = virtualinvoke $r20.<com.sun.lwuit.plaf.Style: int getMargin(boolean,int)>($z5, 3);

        i84 = $i28 - $i29;

     label24:
        $i30 = staticinvoke <com.sun.lwuit.table.TableLayout$Constraint: int access$200(com.sun.lwuit.table.TableLayout$Constraint)>(r47);

        if $i30 <= 1 goto label27;

        r0.<com.sun.lwuit.table.TableLayout: boolean verticalSpanningExists> = 1;

        i85 = $r44[i79];

        i86 = 1;

     label25:
        $i34 = staticinvoke <com.sun.lwuit.table.TableLayout$Constraint: int access$200(com.sun.lwuit.table.TableLayout$Constraint)>(r47);

        if i86 >= $i34 goto label26;

        $i37 = i79 + i86;

        $i38 = $r44[$i37];

        i85 = i85 + $i38;

        i86 = i86 + 1;

        goto label25;

     label26:
        $i35 = i85 - $i20;

        $i36 = virtualinvoke $r20.<com.sun.lwuit.plaf.Style: int getMargin(boolean,int)>(0, 2);

        i87 = $i35 - $i36;

        goto label28;

     label27:
        $i31 = $r44[i79];

        $i32 = $i31 - $i20;

        $i33 = virtualinvoke $r20.<com.sun.lwuit.plaf.Style: int getMargin(boolean,int)>(0, 2);

        i87 = $i32 - $i33;

     label28:
        specialinvoke r0.<com.sun.lwuit.table.TableLayout: void placeComponent(boolean,com.sun.lwuit.table.TableLayout$Constraint,int,int,int,int)>($z2, r47, i81, i25, i84, i87);

     label29:
        i80 = i80 + 1;

        goto label19;

     label30:
        i79 = i79 + 1;

        goto label18;

     label31:
        return;
    }

    public int getRowPosition(int)
    {
        com.sun.lwuit.table.TableLayout r0;
        int[] $r1, $r2, $r3;
        int i0, $i1, $i2, $i4;

        r0 := @this: com.sun.lwuit.table.TableLayout;

        i0 := @parameter0: int;

        $r1 = r0.<com.sun.lwuit.table.TableLayout: int[] rowPositions>;

        if $r1 == null goto label1;

        $r2 = r0.<com.sun.lwuit.table.TableLayout: int[] rowPositions>;

        $i1 = lengthof $r2;

        if $i1 <= i0 goto label1;

        $r3 = r0.<com.sun.lwuit.table.TableLayout: int[] rowPositions>;

        $i2 = $r3[i0];

        return $i2;

     label1:
        $i4 = (int) -1;

        return $i4;
    }

    public int getColumnPosition(int)
    {
        com.sun.lwuit.table.TableLayout r0;
        int[] $r1, $r2, $r3;
        int i0, $i1, $i2, $i4;

        r0 := @this: com.sun.lwuit.table.TableLayout;

        i0 := @parameter0: int;

        $r1 = r0.<com.sun.lwuit.table.TableLayout: int[] columnPositions>;

        if $r1 == null goto label1;

        $r2 = r0.<com.sun.lwuit.table.TableLayout: int[] columnPositions>;

        $i1 = lengthof $r2;

        if $i1 <= i0 goto label1;

        $r3 = r0.<com.sun.lwuit.table.TableLayout: int[] columnPositions>;

        $i2 = $r3[i0];

        return $i2;

     label1:
        $i4 = (int) -1;

        return $i4;
    }

    private void placeComponent(boolean, com.sun.lwuit.table.TableLayout$Constraint, int, int, int, int)
    {
        com.sun.lwuit.table.TableLayout$Constraint r0;
        com.sun.lwuit.table.TableLayout r19;
        com.sun.lwuit.Component $r1, $r2, $r3, $r4, $r5, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18;
        boolean z0;
        com.sun.lwuit.geom.Dimension $r6;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, i20, i21, i22;

        r19 := @this: com.sun.lwuit.table.TableLayout;

        z0 := @parameter0: boolean;

        r0 := @parameter1: com.sun.lwuit.table.TableLayout$Constraint;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        i3 := @parameter5: int;

        $r1 = staticinvoke <com.sun.lwuit.table.TableLayout$Constraint: com.sun.lwuit.Component access$000(com.sun.lwuit.table.TableLayout$Constraint)>(r0);

        virtualinvoke $r1.<com.sun.lwuit.Component: void setX(int)>(i0);

        $r2 = staticinvoke <com.sun.lwuit.table.TableLayout$Constraint: com.sun.lwuit.Component access$000(com.sun.lwuit.table.TableLayout$Constraint)>(r0);

        virtualinvoke $r2.<com.sun.lwuit.Component: void setY(int)>(i1);

        $r3 = staticinvoke <com.sun.lwuit.table.TableLayout$Constraint: com.sun.lwuit.Component access$000(com.sun.lwuit.table.TableLayout$Constraint)>(r0);

        virtualinvoke $r3.<com.sun.lwuit.Component: void setWidth(int)>(i2);

        $r4 = staticinvoke <com.sun.lwuit.table.TableLayout$Constraint: com.sun.lwuit.Component access$000(com.sun.lwuit.table.TableLayout$Constraint)>(r0);

        virtualinvoke $r4.<com.sun.lwuit.Component: void setHeight(int)>(i3);

        $r5 = staticinvoke <com.sun.lwuit.table.TableLayout$Constraint: com.sun.lwuit.Component access$000(com.sun.lwuit.table.TableLayout$Constraint)>(r0);

        $r6 = virtualinvoke $r5.<com.sun.lwuit.Component: com.sun.lwuit.geom.Dimension getPreferredSize()>();

        $i4 = virtualinvoke $r6.<com.sun.lwuit.geom.Dimension: int getWidth()>();

        $i5 = virtualinvoke $r6.<com.sun.lwuit.geom.Dimension: int getHeight()>();

        if $i4 >= i2 goto label07;

        i20 = i2 - $i4;

        $i13 = staticinvoke <com.sun.lwuit.table.TableLayout$Constraint: int access$300(com.sun.lwuit.table.TableLayout$Constraint)>(r0);

        i21 = $i13;

        if z0 == 0 goto label03;

        lookupswitch($i13)
        {
            case 1: goto label01;
            case 3: goto label02;
            default: goto label03;
        };

     label01:
        i21 = 3;

        goto label03;

     label02:
        i21 = 1;

     label03:
        tableswitch(i21)
        {
            case 1: goto label04;
            case 2: goto label07;
            case 3: goto label05;
            case 4: goto label06;
            default: goto label07;
        };

     label04:
        $r17 = staticinvoke <com.sun.lwuit.table.TableLayout$Constraint: com.sun.lwuit.Component access$000(com.sun.lwuit.table.TableLayout$Constraint)>(r0);

        virtualinvoke $r17.<com.sun.lwuit.Component: void setX(int)>(i0);

        $r18 = staticinvoke <com.sun.lwuit.table.TableLayout$Constraint: com.sun.lwuit.Component access$000(com.sun.lwuit.table.TableLayout$Constraint)>(r0);

        $i19 = i2 - i20;

        virtualinvoke $r18.<com.sun.lwuit.Component: void setWidth(int)>($i19);

        goto label07;

     label05:
        $r15 = staticinvoke <com.sun.lwuit.table.TableLayout$Constraint: com.sun.lwuit.Component access$000(com.sun.lwuit.table.TableLayout$Constraint)>(r0);

        $i17 = i0 + i20;

        virtualinvoke $r15.<com.sun.lwuit.Component: void setX(int)>($i17);

        $r16 = staticinvoke <com.sun.lwuit.table.TableLayout$Constraint: com.sun.lwuit.Component access$000(com.sun.lwuit.table.TableLayout$Constraint)>(r0);

        $i18 = i2 - i20;

        virtualinvoke $r16.<com.sun.lwuit.Component: void setWidth(int)>($i18);

        goto label07;

     label06:
        $r13 = staticinvoke <com.sun.lwuit.table.TableLayout$Constraint: com.sun.lwuit.Component access$000(com.sun.lwuit.table.TableLayout$Constraint)>(r0);

        $i14 = i20 / 2;

        $i15 = i0 + $i14;

        virtualinvoke $r13.<com.sun.lwuit.Component: void setX(int)>($i15);

        $r14 = staticinvoke <com.sun.lwuit.table.TableLayout$Constraint: com.sun.lwuit.Component access$000(com.sun.lwuit.table.TableLayout$Constraint)>(r0);

        $i16 = i2 - i20;

        virtualinvoke $r14.<com.sun.lwuit.Component: void setWidth(int)>($i16);

     label07:
        if $i5 >= i3 goto label11;

        i22 = i3 - $i5;

        $i6 = staticinvoke <com.sun.lwuit.table.TableLayout$Constraint: int access$400(com.sun.lwuit.table.TableLayout$Constraint)>(r0);

        tableswitch($i6)
        {
            case 0: goto label08;
            case 1: goto label11;
            case 2: goto label09;
            case 3: goto label11;
            case 4: goto label10;
            default: goto label11;
        };

     label08:
        $r11 = staticinvoke <com.sun.lwuit.table.TableLayout$Constraint: com.sun.lwuit.Component access$000(com.sun.lwuit.table.TableLayout$Constraint)>(r0);

        virtualinvoke $r11.<com.sun.lwuit.Component: void setY(int)>(i1);

        $r12 = staticinvoke <com.sun.lwuit.table.TableLayout$Constraint: com.sun.lwuit.Component access$000(com.sun.lwuit.table.TableLayout$Constraint)>(r0);

        $i12 = i3 - i22;

        virtualinvoke $r12.<com.sun.lwuit.Component: void setHeight(int)>($i12);

        goto label11;

     label09:
        $r9 = staticinvoke <com.sun.lwuit.table.TableLayout$Constraint: com.sun.lwuit.Component access$000(com.sun.lwuit.table.TableLayout$Constraint)>(r0);

        $i10 = i1 + i22;

        virtualinvoke $r9.<com.sun.lwuit.Component: void setY(int)>($i10);

        $r10 = staticinvoke <com.sun.lwuit.table.TableLayout$Constraint: com.sun.lwuit.Component access$000(com.sun.lwuit.table.TableLayout$Constraint)>(r0);

        $i11 = i3 - i22;

        virtualinvoke $r10.<com.sun.lwuit.Component: void setHeight(int)>($i11);

        goto label11;

     label10:
        $r7 = staticinvoke <com.sun.lwuit.table.TableLayout$Constraint: com.sun.lwuit.Component access$000(com.sun.lwuit.table.TableLayout$Constraint)>(r0);

        $i7 = i22 / 2;

        $i8 = i1 + $i7;

        virtualinvoke $r7.<com.sun.lwuit.Component: void setY(int)>($i8);

        $r8 = staticinvoke <com.sun.lwuit.table.TableLayout$Constraint: com.sun.lwuit.Component access$000(com.sun.lwuit.table.TableLayout$Constraint)>(r0);

        $i9 = i3 - i22;

        virtualinvoke $r8.<com.sun.lwuit.Component: void setHeight(int)>($i9);

     label11:
        return;
    }

    private int getColumnWidthPixels(int, int, int)
    {
        com.sun.lwuit.table.TableLayout$Constraint r4, $r5, $r6, $r7;
        com.sun.lwuit.table.TableLayout r0;
        com.sun.lwuit.Component $r8, $r10;
        com.sun.lwuit.table.TableLayout$Constraint[] $r3, $r14;
        com.sun.lwuit.plaf.Style $r9;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, $i9, i10, $i11, $i12, $i13, i14, i15, $i16, $i18, $i20;
        com.sun.lwuit.table.TableLayout$Constraint[][] $r2, $r13, $r16;
        boolean[] $r1, $r11, $r12, $r15;

        r0 := @this: com.sun.lwuit.table.TableLayout;

        i0 := @parameter0: int;

        i10 := @parameter1: int;

        i8 := @parameter2: int;

        i14 = 0;

        $r1 = r0.<com.sun.lwuit.table.TableLayout: boolean[] modifableColumnSize>;

        if $r1 != null goto label1;

        $r13 = r0.<com.sun.lwuit.table.TableLayout: com.sun.lwuit.table.TableLayout$Constraint[][] tablePositions>;

        $r14 = $r13[0];

        $i13 = lengthof $r14;

        $r15 = newarray (boolean)[$i13];

        r0.<com.sun.lwuit.table.TableLayout: boolean[] modifableColumnSize> = $r15;

     label1:
        i15 = 0;

     label2:
        $r16 = r0.<com.sun.lwuit.table.TableLayout: com.sun.lwuit.table.TableLayout$Constraint[][] tablePositions>;

        $i16 = lengthof $r16;

        if i15 >= $i16 goto label7;

        $r2 = r0.<com.sun.lwuit.table.TableLayout: com.sun.lwuit.table.TableLayout$Constraint[][] tablePositions>;

        $r3 = $r2[i15];

        r4 = $r3[i0];

        if r4 == null goto label6;

        $r5 = <com.sun.lwuit.table.TableLayout: com.sun.lwuit.table.TableLayout$Constraint H_SPAN_CONSTRAINT>;

        if r4 == $r5 goto label6;

        $r6 = <com.sun.lwuit.table.TableLayout: com.sun.lwuit.table.TableLayout$Constraint V_SPAN_CONSTRAINT>;

        if r4 == $r6 goto label6;

        $r7 = <com.sun.lwuit.table.TableLayout: com.sun.lwuit.table.TableLayout$Constraint VH_SPAN_CONSTRAINT>;

        if r4 == $r7 goto label6;

        $i1 = staticinvoke <com.sun.lwuit.table.TableLayout$Constraint: int access$100(com.sun.lwuit.table.TableLayout$Constraint)>(r4);

        if $i1 <= 1 goto label3;

        goto label6;

     label3:
        $i2 = staticinvoke <com.sun.lwuit.table.TableLayout$Constraint: int access$500(com.sun.lwuit.table.TableLayout$Constraint)>(r4);

        if $i2 <= 0 goto label4;

        $i18 = (int) -1;

        if i8 <= $i18 goto label4;

        $i9 = staticinvoke <com.sun.lwuit.table.TableLayout$Constraint: int access$500(com.sun.lwuit.table.TableLayout$Constraint)>(r4);

        $i11 = $i9 * i10;

        $i12 = $i11 / 100;

        i14 = staticinvoke <java.lang.Math: int max(int,int)>(i14, $i12);

        $r12 = r0.<com.sun.lwuit.table.TableLayout: boolean[] modifableColumnSize>;

        $r12[i0] = 0;

        goto label5;

     label4:
        $r8 = staticinvoke <com.sun.lwuit.table.TableLayout$Constraint: com.sun.lwuit.Component access$000(com.sun.lwuit.table.TableLayout$Constraint)>(r4);

        $r9 = virtualinvoke $r8.<com.sun.lwuit.Component: com.sun.lwuit.plaf.Style getStyle()>();

        $r10 = staticinvoke <com.sun.lwuit.table.TableLayout$Constraint: com.sun.lwuit.Component access$000(com.sun.lwuit.table.TableLayout$Constraint)>(r4);

        $i3 = virtualinvoke $r10.<com.sun.lwuit.Component: int getPreferredW()>();

        $i4 = virtualinvoke $r9.<com.sun.lwuit.plaf.Style: int getMargin(boolean,int)>(0, 1);

        $i5 = $i3 + $i4;

        $i6 = virtualinvoke $r9.<com.sun.lwuit.plaf.Style: int getMargin(boolean,int)>(0, 3);

        $i7 = $i5 + $i6;

        i14 = staticinvoke <java.lang.Math: int max(int,int)>(i14, $i7);

        $r11 = r0.<com.sun.lwuit.table.TableLayout: boolean[] modifableColumnSize>;

        $r11[i0] = 1;

     label5:
        $i20 = (int) -1;

        if i8 <= $i20 goto label6;

        i14 = staticinvoke <java.lang.Math: int min(int,int)>(i8, i14);

     label6:
        i15 = i15 + 1;

        goto label2;

     label7:
        return i14;
    }

    private int getRowHeightPixels(int, int, int)
    {
        com.sun.lwuit.table.TableLayout$Constraint r5, $r6, $r7, $r8;
        com.sun.lwuit.table.TableLayout r0;
        com.sun.lwuit.Component $r9, $r11;
        com.sun.lwuit.table.TableLayout$Constraint[] $r2, $r4;
        com.sun.lwuit.plaf.Style $r10;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i9, $i10, i11, $i12, $i13, i14, i15, $i17;
        com.sun.lwuit.table.TableLayout$Constraint[][] $r1, $r3;

        r0 := @this: com.sun.lwuit.table.TableLayout;

        i0 := @parameter0: int;

        i11 := @parameter1: int;

        i9 := @parameter2: int;

        i14 = 0;

        i15 = 0;

     label1:
        $r1 = r0.<com.sun.lwuit.table.TableLayout: com.sun.lwuit.table.TableLayout$Constraint[][] tablePositions>;

        $r2 = $r1[i0];

        $i1 = lengthof $r2;

        if i15 >= $i1 goto label6;

        $r3 = r0.<com.sun.lwuit.table.TableLayout: com.sun.lwuit.table.TableLayout$Constraint[][] tablePositions>;

        $r4 = $r3[i0];

        r5 = $r4[i15];

        if r5 == null goto label5;

        $r6 = <com.sun.lwuit.table.TableLayout: com.sun.lwuit.table.TableLayout$Constraint H_SPAN_CONSTRAINT>;

        if r5 == $r6 goto label5;

        $r7 = <com.sun.lwuit.table.TableLayout: com.sun.lwuit.table.TableLayout$Constraint V_SPAN_CONSTRAINT>;

        if r5 == $r7 goto label5;

        $r8 = <com.sun.lwuit.table.TableLayout: com.sun.lwuit.table.TableLayout$Constraint VH_SPAN_CONSTRAINT>;

        if r5 == $r8 goto label5;

        $i2 = staticinvoke <com.sun.lwuit.table.TableLayout$Constraint: int access$200(com.sun.lwuit.table.TableLayout$Constraint)>(r5);

        if $i2 <= 1 goto label2;

        goto label5;

     label2:
        $i3 = staticinvoke <com.sun.lwuit.table.TableLayout$Constraint: int access$600(com.sun.lwuit.table.TableLayout$Constraint)>(r5);

        if $i3 <= 0 goto label3;

        $i10 = staticinvoke <com.sun.lwuit.table.TableLayout$Constraint: int access$600(com.sun.lwuit.table.TableLayout$Constraint)>(r5);

        $i12 = $i10 * i11;

        $i13 = $i12 / 100;

        i14 = staticinvoke <java.lang.Math: int max(int,int)>(i14, $i13);

        goto label4;

     label3:
        $r9 = staticinvoke <com.sun.lwuit.table.TableLayout$Constraint: com.sun.lwuit.Component access$000(com.sun.lwuit.table.TableLayout$Constraint)>(r5);

        $r10 = virtualinvoke $r9.<com.sun.lwuit.Component: com.sun.lwuit.plaf.Style getStyle()>();

        $r11 = staticinvoke <com.sun.lwuit.table.TableLayout$Constraint: com.sun.lwuit.Component access$000(com.sun.lwuit.table.TableLayout$Constraint)>(r5);

        $i4 = virtualinvoke $r11.<com.sun.lwuit.Component: int getPreferredH()>();

        $i5 = virtualinvoke $r10.<com.sun.lwuit.plaf.Style: int getMargin(boolean,int)>(0, 2);

        $i6 = $i4 + $i5;

        $i7 = virtualinvoke $r10.<com.sun.lwuit.plaf.Style: int getMargin(boolean,int)>(0, 0);

        $i8 = $i6 + $i7;

        i14 = staticinvoke <java.lang.Math: int max(int,int)>(i14, $i8);

     label4:
        $i17 = (int) -1;

        if i9 <= $i17 goto label5;

        i14 = staticinvoke <java.lang.Math: int min(int,int)>(i9, i14);

     label5:
        i15 = i15 + 1;

        goto label1;

     label6:
        return i14;
    }

    public com.sun.lwuit.geom.Dimension getPreferredSize(com.sun.lwuit.Container)
    {
        com.sun.lwuit.table.TableLayout r2;
        com.sun.lwuit.table.TableLayout$Constraint[] $r4;
        com.sun.lwuit.plaf.Style $r1;
        com.sun.lwuit.geom.Dimension $r7;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, i9, i10, i11, $i13, $i15;
        com.sun.lwuit.table.TableLayout$Constraint[][] $r3, $r5;
        com.sun.lwuit.Container r0;

        r2 := @this: com.sun.lwuit.table.TableLayout;

        r0 := @parameter0: com.sun.lwuit.Container;

        $r1 = virtualinvoke r0.<com.sun.lwuit.Container: com.sun.lwuit.plaf.Style getStyle()>();

        $i0 = virtualinvoke $r1.<com.sun.lwuit.plaf.Style: int getPadding(boolean,int)>(0, 1);

        $i1 = virtualinvoke $r1.<com.sun.lwuit.plaf.Style: int getPadding(boolean,int)>(0, 3);

        i8 = $i0 + $i1;

        $i2 = virtualinvoke $r1.<com.sun.lwuit.plaf.Style: int getPadding(boolean,int)>(0, 0);

        $i3 = virtualinvoke $r1.<com.sun.lwuit.plaf.Style: int getPadding(boolean,int)>(0, 2);

        i9 = $i2 + $i3;

        i10 = 0;

     label1:
        $r3 = r2.<com.sun.lwuit.table.TableLayout: com.sun.lwuit.table.TableLayout$Constraint[][] tablePositions>;

        $r4 = $r3[0];

        $i4 = lengthof $r4;

        if i10 >= $i4 goto label2;

        $i13 = (int) -1;

        $i7 = specialinvoke r2.<com.sun.lwuit.table.TableLayout: int getColumnWidthPixels(int,int,int)>(i10, 2147483647, $i13);

        i8 = i8 + $i7;

        i10 = i10 + 1;

        goto label1;

     label2:
        i11 = 0;

     label3:
        $r5 = r2.<com.sun.lwuit.table.TableLayout: com.sun.lwuit.table.TableLayout$Constraint[][] tablePositions>;

        $i5 = lengthof $r5;

        if i11 >= $i5 goto label4;

        $i15 = (int) -1;

        $i6 = specialinvoke r2.<com.sun.lwuit.table.TableLayout: int getRowHeightPixels(int,int,int)>(i11, 2147483647, $i15);

        i9 = i9 + $i6;

        i11 = i11 + 1;

        goto label3;

     label4:
        $r7 = new com.sun.lwuit.geom.Dimension;

        specialinvoke $r7.<com.sun.lwuit.geom.Dimension: void <init>(int,int)>(i8, i9);

        return $r7;
    }

    public int getNextRow()
    {
        com.sun.lwuit.table.TableLayout r0;
        int $i0;

        r0 := @this: com.sun.lwuit.table.TableLayout;

        $i0 = r0.<com.sun.lwuit.table.TableLayout: int currentRow>;

        return $i0;
    }

    public int getNextColumn()
    {
        com.sun.lwuit.table.TableLayout r0;
        int $i0;

        r0 := @this: com.sun.lwuit.table.TableLayout;

        $i0 = r0.<com.sun.lwuit.table.TableLayout: int currentColumn>;

        return $i0;
    }

    public void addLayoutComponent(java.lang.Object, com.sun.lwuit.Component, com.sun.lwuit.Container)
    {
        java.lang.StringBuilder $r22, $r23, $r24, $r25, $r26, $r27;
        java.lang.String $r28;
        com.sun.lwuit.table.TableLayout$Constraint[][] $r4, $r7, $r9, $r12, $r15, $r18;
        com.sun.lwuit.table.TableLayout$Constraint $r6, $r11, $r14, $r17, $r20, r31;
        com.sun.lwuit.table.TableLayout r3;
        com.sun.lwuit.Component $r1, r2;
        com.sun.lwuit.table.TableLayout$Constraint[] $r5, $r8, $r10, $r13, $r16, $r19;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, i31, $i32, i33;
        java.lang.IllegalArgumentException $r21, $r29;
        com.sun.lwuit.Container r30;
        java.lang.Object r0;

        r3 := @this: com.sun.lwuit.table.TableLayout;

        r0 := @parameter0: java.lang.Object;

        r2 := @parameter1: com.sun.lwuit.Component;

        r30 := @parameter2: com.sun.lwuit.Container;

        r31 = (com.sun.lwuit.table.TableLayout$Constraint) r0;

        if r31 != null goto label01;

        r31 = virtualinvoke r3.<com.sun.lwuit.table.TableLayout: com.sun.lwuit.table.TableLayout$Constraint createConstraint()>();

        goto label02;

     label01:
        $r1 = staticinvoke <com.sun.lwuit.table.TableLayout$Constraint: com.sun.lwuit.Component access$000(com.sun.lwuit.table.TableLayout$Constraint)>(r31);

        if $r1 == null goto label02;

        $r29 = new java.lang.IllegalArgumentException;

        specialinvoke $r29.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Constraint already associated with component!");

        throw $r29;

     label02:
        $i0 = staticinvoke <com.sun.lwuit.table.TableLayout$Constraint: int access$700(com.sun.lwuit.table.TableLayout$Constraint)>(r31);

        if $i0 >= 0 goto label03;

        $i30 = r3.<com.sun.lwuit.table.TableLayout: int currentRow>;

        staticinvoke <com.sun.lwuit.table.TableLayout$Constraint: int access$702(com.sun.lwuit.table.TableLayout$Constraint,int)>(r31, $i30);

     label03:
        $i1 = staticinvoke <com.sun.lwuit.table.TableLayout$Constraint: int access$800(com.sun.lwuit.table.TableLayout$Constraint)>(r31);

        if $i1 >= 0 goto label04;

        $i29 = r3.<com.sun.lwuit.table.TableLayout: int currentColumn>;

        staticinvoke <com.sun.lwuit.table.TableLayout$Constraint: int access$802(com.sun.lwuit.table.TableLayout$Constraint,int)>(r31, $i29);

     label04:
        staticinvoke <com.sun.lwuit.table.TableLayout$Constraint: com.sun.lwuit.Component access$002(com.sun.lwuit.table.TableLayout$Constraint,com.sun.lwuit.Component)>(r31, r2);

        $r4 = r3.<com.sun.lwuit.table.TableLayout: com.sun.lwuit.table.TableLayout$Constraint[][] tablePositions>;

        $i2 = staticinvoke <com.sun.lwuit.table.TableLayout$Constraint: int access$700(com.sun.lwuit.table.TableLayout$Constraint)>(r31);

        $r5 = $r4[$i2];

        $i3 = staticinvoke <com.sun.lwuit.table.TableLayout$Constraint: int access$800(com.sun.lwuit.table.TableLayout$Constraint)>(r31);

        $r6 = $r5[$i3];

        if $r6 == null goto label05;

        $r21 = new java.lang.IllegalArgumentException;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Row: ");

        $i27 = staticinvoke <com.sun.lwuit.table.TableLayout$Constraint: int access$700(com.sun.lwuit.table.TableLayout$Constraint)>(r31);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i27);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" and column: ");

        $i28 = staticinvoke <com.sun.lwuit.table.TableLayout$Constraint: int access$800(com.sun.lwuit.table.TableLayout$Constraint)>(r31);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i28);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" already occupied");

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r21.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r28);

        throw $r21;

     label05:
        $r7 = r3.<com.sun.lwuit.table.TableLayout: com.sun.lwuit.table.TableLayout$Constraint[][] tablePositions>;

        $i4 = staticinvoke <com.sun.lwuit.table.TableLayout$Constraint: int access$700(com.sun.lwuit.table.TableLayout$Constraint)>(r31);

        $r8 = $r7[$i4];

        $i5 = staticinvoke <com.sun.lwuit.table.TableLayout$Constraint: int access$800(com.sun.lwuit.table.TableLayout$Constraint)>(r31);

        $r8[$i5] = r31;

        $i6 = staticinvoke <com.sun.lwuit.table.TableLayout$Constraint: int access$100(com.sun.lwuit.table.TableLayout$Constraint)>(r31);

        if $i6 > 1 goto label06;

        $i26 = staticinvoke <com.sun.lwuit.table.TableLayout$Constraint: int access$200(com.sun.lwuit.table.TableLayout$Constraint)>(r31);

        if $i26 <= 1 goto label14;

     label06:
        i31 = 0;

     label07:
        $i32 = staticinvoke <com.sun.lwuit.table.TableLayout$Constraint: int access$100(com.sun.lwuit.table.TableLayout$Constraint)>(r31);

        if i31 >= $i32 goto label14;

        i33 = 0;

     label08:
        $i7 = staticinvoke <com.sun.lwuit.table.TableLayout$Constraint: int access$200(com.sun.lwuit.table.TableLayout$Constraint)>(r31);

        if i33 >= $i7 goto label13;

        if i31 > 0 goto label09;

        if i33 <= 0 goto label12;

     label09:
        $r9 = r3.<com.sun.lwuit.table.TableLayout: com.sun.lwuit.table.TableLayout$Constraint[][] tablePositions>;

        $i8 = staticinvoke <com.sun.lwuit.table.TableLayout$Constraint: int access$700(com.sun.lwuit.table.TableLayout$Constraint)>(r31);

        $i9 = $i8 + i33;

        $r10 = $r9[$i9];

        $i10 = staticinvoke <com.sun.lwuit.table.TableLayout$Constraint: int access$800(com.sun.lwuit.table.TableLayout$Constraint)>(r31);

        $i11 = $i10 + i31;

        $r11 = $r10[$i11];

        if $r11 != null goto label12;

        $i12 = staticinvoke <com.sun.lwuit.table.TableLayout$Constraint: int access$100(com.sun.lwuit.table.TableLayout$Constraint)>(r31);

        if $i12 <= 1 goto label11;

        $i17 = staticinvoke <com.sun.lwuit.table.TableLayout$Constraint: int access$200(com.sun.lwuit.table.TableLayout$Constraint)>(r31);

        if $i17 <= 1 goto label10;

        $r18 = r3.<com.sun.lwuit.table.TableLayout: com.sun.lwuit.table.TableLayout$Constraint[][] tablePositions>;

        $i22 = staticinvoke <com.sun.lwuit.table.TableLayout$Constraint: int access$700(com.sun.lwuit.table.TableLayout$Constraint)>(r31);

        $i23 = $i22 + i33;

        $r19 = $r18[$i23];

        $i24 = staticinvoke <com.sun.lwuit.table.TableLayout$Constraint: int access$800(com.sun.lwuit.table.TableLayout$Constraint)>(r31);

        $i25 = $i24 + i31;

        $r20 = <com.sun.lwuit.table.TableLayout: com.sun.lwuit.table.TableLayout$Constraint VH_SPAN_CONSTRAINT>;

        $r19[$i25] = $r20;

        goto label12;

     label10:
        $r15 = r3.<com.sun.lwuit.table.TableLayout: com.sun.lwuit.table.TableLayout$Constraint[][] tablePositions>;

        $i18 = staticinvoke <com.sun.lwuit.table.TableLayout$Constraint: int access$700(com.sun.lwuit.table.TableLayout$Constraint)>(r31);

        $i19 = $i18 + i33;

        $r16 = $r15[$i19];

        $i20 = staticinvoke <com.sun.lwuit.table.TableLayout$Constraint: int access$800(com.sun.lwuit.table.TableLayout$Constraint)>(r31);

        $i21 = $i20 + i31;

        $r17 = <com.sun.lwuit.table.TableLayout: com.sun.lwuit.table.TableLayout$Constraint V_SPAN_CONSTRAINT>;

        $r16[$i21] = $r17;

        goto label12;

     label11:
        $r12 = r3.<com.sun.lwuit.table.TableLayout: com.sun.lwuit.table.TableLayout$Constraint[][] tablePositions>;

        $i13 = staticinvoke <com.sun.lwuit.table.TableLayout$Constraint: int access$700(com.sun.lwuit.table.TableLayout$Constraint)>(r31);

        $i14 = $i13 + i33;

        $r13 = $r12[$i14];

        $i15 = staticinvoke <com.sun.lwuit.table.TableLayout$Constraint: int access$800(com.sun.lwuit.table.TableLayout$Constraint)>(r31);

        $i16 = $i15 + i31;

        $r14 = <com.sun.lwuit.table.TableLayout: com.sun.lwuit.table.TableLayout$Constraint H_SPAN_CONSTRAINT>;

        $r13[$i16] = $r14;

     label12:
        i33 = i33 + 1;

        goto label08;

     label13:
        i31 = i31 + 1;

        goto label07;

     label14:
        specialinvoke r3.<com.sun.lwuit.table.TableLayout: void updateRowColumn()>();

        return;
    }

    private void updateRowColumn()
    {
        com.sun.lwuit.table.TableLayout$Constraint $r7;
        com.sun.lwuit.table.TableLayout r0;
        com.sun.lwuit.table.TableLayout$Constraint[] $r3, $r6;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;
        com.sun.lwuit.table.TableLayout$Constraint[][] $r1, $r2, $r4, $r5;

        r0 := @this: com.sun.lwuit.table.TableLayout;

        $i1 = r0.<com.sun.lwuit.table.TableLayout: int currentRow>;

        $r1 = r0.<com.sun.lwuit.table.TableLayout: com.sun.lwuit.table.TableLayout$Constraint[][] tablePositions>;

        $i0 = lengthof $r1;

        if $i1 < $i0 goto label1;

        return;

     label1:
        $r5 = r0.<com.sun.lwuit.table.TableLayout: com.sun.lwuit.table.TableLayout$Constraint[][] tablePositions>;

        $i10 = r0.<com.sun.lwuit.table.TableLayout: int currentRow>;

        $r6 = $r5[$i10];

        $i11 = r0.<com.sun.lwuit.table.TableLayout: int currentColumn>;

        $r7 = $r6[$i11];

        if $r7 == null goto label2;

        $i2 = r0.<com.sun.lwuit.table.TableLayout: int currentColumn>;

        $i3 = $i2 + 1;

        r0.<com.sun.lwuit.table.TableLayout: int currentColumn> = $i3;

        $i5 = r0.<com.sun.lwuit.table.TableLayout: int currentColumn>;

        $r2 = r0.<com.sun.lwuit.table.TableLayout: com.sun.lwuit.table.TableLayout$Constraint[][] tablePositions>;

        $r3 = $r2[0];

        $i4 = lengthof $r3;

        if $i5 < $i4 goto label1;

        r0.<com.sun.lwuit.table.TableLayout: int currentColumn> = 0;

        $i6 = r0.<com.sun.lwuit.table.TableLayout: int currentRow>;

        $i7 = $i6 + 1;

        r0.<com.sun.lwuit.table.TableLayout: int currentRow> = $i7;

        $i9 = r0.<com.sun.lwuit.table.TableLayout: int currentRow>;

        $r4 = r0.<com.sun.lwuit.table.TableLayout: com.sun.lwuit.table.TableLayout$Constraint[][] tablePositions>;

        $i8 = lengthof $r4;

        if $i9 < $i8 goto label1;

        return;

     label2:
        return;
    }

    public int getCellHorizontalSpan(int, int)
    {
        com.sun.lwuit.table.TableLayout$Constraint[] $r2;
        com.sun.lwuit.table.TableLayout$Constraint[][] $r1;
        com.sun.lwuit.table.TableLayout$Constraint $r3;
        com.sun.lwuit.table.TableLayout r0;
        int i0, i1, $i2;

        r0 := @this: com.sun.lwuit.table.TableLayout;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<com.sun.lwuit.table.TableLayout: com.sun.lwuit.table.TableLayout$Constraint[][] tablePositions>;

        $r2 = $r1[i0];

        $r3 = $r2[i1];

        $i2 = staticinvoke <com.sun.lwuit.table.TableLayout$Constraint: int access$100(com.sun.lwuit.table.TableLayout$Constraint)>($r3);

        return $i2;
    }

    public int getCellVerticalSpan(int, int)
    {
        com.sun.lwuit.table.TableLayout$Constraint[] $r2;
        com.sun.lwuit.table.TableLayout$Constraint[][] $r1;
        com.sun.lwuit.table.TableLayout$Constraint $r3;
        com.sun.lwuit.table.TableLayout r0;
        int i0, i1, $i2;

        r0 := @this: com.sun.lwuit.table.TableLayout;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<com.sun.lwuit.table.TableLayout: com.sun.lwuit.table.TableLayout$Constraint[][] tablePositions>;

        $r2 = $r1[i0];

        $r3 = $r2[i1];

        $i2 = staticinvoke <com.sun.lwuit.table.TableLayout$Constraint: int access$200(com.sun.lwuit.table.TableLayout$Constraint)>($r3);

        return $i2;
    }

    public boolean isCellSpannedThroughVertically(int, int)
    {
        com.sun.lwuit.table.TableLayout$Constraint[][] $r1, $r5;
        com.sun.lwuit.table.TableLayout$Constraint $r3, $r4, $r7, $r8;
        com.sun.lwuit.table.TableLayout r0;
        com.sun.lwuit.table.TableLayout$Constraint[] $r2, $r6;
        int i0, i1;
        boolean $z0;

        r0 := @this: com.sun.lwuit.table.TableLayout;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<com.sun.lwuit.table.TableLayout: com.sun.lwuit.table.TableLayout$Constraint[][] tablePositions>;

        $r2 = $r1[i0];

        $r4 = $r2[i1];

        $r3 = <com.sun.lwuit.table.TableLayout: com.sun.lwuit.table.TableLayout$Constraint V_SPAN_CONSTRAINT>;

        if $r4 == $r3 goto label1;

        $r5 = r0.<com.sun.lwuit.table.TableLayout: com.sun.lwuit.table.TableLayout$Constraint[][] tablePositions>;

        $r6 = $r5[i0];

        $r8 = $r6[i1];

        $r7 = <com.sun.lwuit.table.TableLayout: com.sun.lwuit.table.TableLayout$Constraint VH_SPAN_CONSTRAINT>;

        if $r8 != $r7 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public boolean isCellSpannedThroughHorizontally(int, int)
    {
        com.sun.lwuit.table.TableLayout$Constraint[][] $r1, $r5;
        com.sun.lwuit.table.TableLayout$Constraint $r3, $r4, $r7, $r8;
        com.sun.lwuit.table.TableLayout r0;
        com.sun.lwuit.table.TableLayout$Constraint[] $r2, $r6;
        int i0, i1;
        boolean $z0;

        r0 := @this: com.sun.lwuit.table.TableLayout;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<com.sun.lwuit.table.TableLayout: com.sun.lwuit.table.TableLayout$Constraint[][] tablePositions>;

        $r2 = $r1[i0];

        $r4 = $r2[i1];

        $r3 = <com.sun.lwuit.table.TableLayout: com.sun.lwuit.table.TableLayout$Constraint H_SPAN_CONSTRAINT>;

        if $r4 == $r3 goto label1;

        $r5 = r0.<com.sun.lwuit.table.TableLayout: com.sun.lwuit.table.TableLayout$Constraint[][] tablePositions>;

        $r6 = $r5[i0];

        $r8 = $r6[i1];

        $r7 = <com.sun.lwuit.table.TableLayout: com.sun.lwuit.table.TableLayout$Constraint VH_SPAN_CONSTRAINT>;

        if $r8 != $r7 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public boolean hasVerticalSpanning()
    {
        com.sun.lwuit.table.TableLayout r0;
        boolean $z0;

        r0 := @this: com.sun.lwuit.table.TableLayout;

        $z0 = r0.<com.sun.lwuit.table.TableLayout: boolean verticalSpanningExists>;

        return $z0;
    }

    public boolean hasHorizontalSpanning()
    {
        com.sun.lwuit.table.TableLayout r0;
        boolean $z0;

        r0 := @this: com.sun.lwuit.table.TableLayout;

        $z0 = r0.<com.sun.lwuit.table.TableLayout: boolean horizontalSpanningExists>;

        return $z0;
    }

    public void removeLayoutComponent(com.sun.lwuit.Component)
    {
        com.sun.lwuit.table.TableLayout$Constraint $r6, $r9;
        com.sun.lwuit.table.TableLayout r0;
        com.sun.lwuit.Component $r10, r11;
        com.sun.lwuit.table.TableLayout$Constraint[] $r3, $r5, $r8, $r13;
        int $i0, $i1, i2, i3;
        com.sun.lwuit.table.TableLayout$Constraint[][] $r1, $r2, $r4, $r7, $r12;

        r0 := @this: com.sun.lwuit.table.TableLayout;

        r11 := @parameter0: com.sun.lwuit.Component;

        i2 = 0;

     label1:
        $r1 = r0.<com.sun.lwuit.table.TableLayout: com.sun.lwuit.table.TableLayout$Constraint[][] tablePositions>;

        $i0 = lengthof $r1;

        if i2 >= $i0 goto label5;

        i3 = 0;

     label2:
        $r2 = r0.<com.sun.lwuit.table.TableLayout: com.sun.lwuit.table.TableLayout$Constraint[][] tablePositions>;

        $r3 = $r2[i2];

        $i1 = lengthof $r3;

        if i3 >= $i1 goto label4;

        $r4 = r0.<com.sun.lwuit.table.TableLayout: com.sun.lwuit.table.TableLayout$Constraint[][] tablePositions>;

        $r5 = $r4[i2];

        $r6 = $r5[i3];

        if $r6 == null goto label3;

        $r7 = r0.<com.sun.lwuit.table.TableLayout: com.sun.lwuit.table.TableLayout$Constraint[][] tablePositions>;

        $r8 = $r7[i2];

        $r9 = $r8[i3];

        $r10 = staticinvoke <com.sun.lwuit.table.TableLayout$Constraint: com.sun.lwuit.Component access$000(com.sun.lwuit.table.TableLayout$Constraint)>($r9);

        if $r10 != r11 goto label3;

        $r12 = r0.<com.sun.lwuit.table.TableLayout: com.sun.lwuit.table.TableLayout$Constraint[][] tablePositions>;

        $r13 = $r12[i2];

        $r13[i3] = null;

        return;

     label3:
        i3 = i3 + 1;

        goto label2;

     label4:
        i2 = i2 + 1;

        goto label1;

     label5:
        return;
    }

    public java.lang.Object getComponentConstraint(com.sun.lwuit.Component)
    {
        com.sun.lwuit.table.TableLayout$Constraint $r6, $r9, $r14;
        com.sun.lwuit.table.TableLayout r0;
        com.sun.lwuit.Component $r10, r11;
        com.sun.lwuit.table.TableLayout$Constraint[] $r3, $r5, $r8, $r13;
        int $i0, $i1, i2, i3;
        com.sun.lwuit.table.TableLayout$Constraint[][] $r1, $r2, $r4, $r7, $r12;

        r0 := @this: com.sun.lwuit.table.TableLayout;

        r11 := @parameter0: com.sun.lwuit.Component;

        i2 = 0;

     label1:
        $r1 = r0.<com.sun.lwuit.table.TableLayout: com.sun.lwuit.table.TableLayout$Constraint[][] tablePositions>;

        $i0 = lengthof $r1;

        if i2 >= $i0 goto label5;

        i3 = 0;

     label2:
        $r2 = r0.<com.sun.lwuit.table.TableLayout: com.sun.lwuit.table.TableLayout$Constraint[][] tablePositions>;

        $r3 = $r2[i2];

        $i1 = lengthof $r3;

        if i3 >= $i1 goto label4;

        $r4 = r0.<com.sun.lwuit.table.TableLayout: com.sun.lwuit.table.TableLayout$Constraint[][] tablePositions>;

        $r5 = $r4[i2];

        $r6 = $r5[i3];

        if $r6 == null goto label3;

        $r7 = r0.<com.sun.lwuit.table.TableLayout: com.sun.lwuit.table.TableLayout$Constraint[][] tablePositions>;

        $r8 = $r7[i2];

        $r9 = $r8[i3];

        $r10 = staticinvoke <com.sun.lwuit.table.TableLayout$Constraint: com.sun.lwuit.Component access$000(com.sun.lwuit.table.TableLayout$Constraint)>($r9);

        if $r10 != r11 goto label3;

        $r12 = r0.<com.sun.lwuit.table.TableLayout: com.sun.lwuit.table.TableLayout$Constraint[][] tablePositions>;

        $r13 = $r12[i2];

        $r14 = $r13[i3];

        return $r14;

     label3:
        i3 = i3 + 1;

        goto label2;

     label4:
        i2 = i2 + 1;

        goto label1;

     label5:
        return null;
    }

    public com.sun.lwuit.table.TableLayout$Constraint createConstraint()
    {
        com.sun.lwuit.table.TableLayout r1;
        com.sun.lwuit.table.TableLayout$Constraint $r0;

        r1 := @this: com.sun.lwuit.table.TableLayout;

        $r0 = new com.sun.lwuit.table.TableLayout$Constraint;

        specialinvoke $r0.<com.sun.lwuit.table.TableLayout$Constraint: void <init>()>();

        return $r0;
    }

    public com.sun.lwuit.table.TableLayout$Constraint createConstraint(int, int)
    {
        com.sun.lwuit.table.TableLayout$Constraint $r1;
        com.sun.lwuit.table.TableLayout r0;
        int i0, i1;

        r0 := @this: com.sun.lwuit.table.TableLayout;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = virtualinvoke r0.<com.sun.lwuit.table.TableLayout: com.sun.lwuit.table.TableLayout$Constraint createConstraint()>();

        staticinvoke <com.sun.lwuit.table.TableLayout$Constraint: int access$702(com.sun.lwuit.table.TableLayout$Constraint,int)>($r1, i0);

        staticinvoke <com.sun.lwuit.table.TableLayout$Constraint: int access$802(com.sun.lwuit.table.TableLayout$Constraint,int)>($r1, i1);

        return $r1;
    }

    public static void setMinimumSizePerColumn(int)
    {
        int i0;

        i0 := @parameter0: int;

        <com.sun.lwuit.table.TableLayout: int minimumSizePerColumn> = i0;

        return;
    }

    public static int getMinimumSizePerColumn()
    {
        int $i0;

        $i0 = <com.sun.lwuit.table.TableLayout: int minimumSizePerColumn>;

        return $i0;
    }

    public static void setDefaultColumnWidth(int)
    {
        int i0;

        i0 := @parameter0: int;

        <com.sun.lwuit.table.TableLayout: int defaultColumnWidth> = i0;

        return;
    }

    public static int getDefaultColumnWidth()
    {
        int $i0;

        $i0 = <com.sun.lwuit.table.TableLayout: int defaultColumnWidth>;

        return $i0;
    }

    public static void setDefaultRowHeight(int)
    {
        int i0;

        i0 := @parameter0: int;

        <com.sun.lwuit.table.TableLayout: int defaultRowHeight> = i0;

        return;
    }

    public static int getDefaultRowHeight()
    {
        int $i0;

        $i0 = <com.sun.lwuit.table.TableLayout: int defaultRowHeight>;

        return $i0;
    }

    static int access$900()
    {
        int $i0;

        $i0 = <com.sun.lwuit.table.TableLayout: int defaultColumnWidth>;

        return $i0;
    }

    static int access$1000()
    {
        int $i0;

        $i0 = <com.sun.lwuit.table.TableLayout: int defaultRowHeight>;

        return $i0;
    }

    static void <clinit>()
    {
        com.sun.lwuit.table.TableLayout$Constraint $r3, $r4, $r5;
        int $i1, $i3;

        <com.sun.lwuit.table.TableLayout: int minimumSizePerColumn> = 10;

        $r3 = new com.sun.lwuit.table.TableLayout$Constraint;

        specialinvoke $r3.<com.sun.lwuit.table.TableLayout$Constraint: void <init>()>();

        <com.sun.lwuit.table.TableLayout: com.sun.lwuit.table.TableLayout$Constraint H_SPAN_CONSTRAINT> = $r3;

        $r4 = new com.sun.lwuit.table.TableLayout$Constraint;

        specialinvoke $r4.<com.sun.lwuit.table.TableLayout$Constraint: void <init>()>();

        <com.sun.lwuit.table.TableLayout: com.sun.lwuit.table.TableLayout$Constraint V_SPAN_CONSTRAINT> = $r4;

        $r5 = new com.sun.lwuit.table.TableLayout$Constraint;

        specialinvoke $r5.<com.sun.lwuit.table.TableLayout$Constraint: void <init>()>();

        <com.sun.lwuit.table.TableLayout: com.sun.lwuit.table.TableLayout$Constraint VH_SPAN_CONSTRAINT> = $r5;

        $i1 = (int) -1;

        <com.sun.lwuit.table.TableLayout: int defaultColumnWidth> = $i1;

        $i3 = (int) -1;

        <com.sun.lwuit.table.TableLayout: int defaultRowHeight> = $i3;

        return;
    }
}
