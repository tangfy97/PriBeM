public class org.apache.xpath.patterns.NodeTest extends org.apache.xpath.Expression
{
    public static final java.lang.String WILD;
    public static final java.lang.String SUPPORTS_PRE_STRIPPING;
    protected int m_whatToShow;
    public static final int SHOW_BYFUNCTION;
    java.lang.String m_namespace;
    protected java.lang.String m_name;
    org.apache.xpath.objects.XNumber m_score;
    public static final org.apache.xpath.objects.XNumber SCORE_NODETEST;
    public static final org.apache.xpath.objects.XNumber SCORE_NSWILD;
    public static final org.apache.xpath.objects.XNumber SCORE_QNAME;
    public static final org.apache.xpath.objects.XNumber SCORE_OTHER;
    public static final org.apache.xpath.objects.XNumber SCORE_NONE;
    private boolean m_isTotallyWild;

    public int getWhatToShow()
    {
        int $i0;
        org.apache.xpath.patterns.NodeTest r0;

        r0 := @this: org.apache.xpath.patterns.NodeTest;

        $i0 = r0.<org.apache.xpath.patterns.NodeTest: int m_whatToShow>;

        return $i0;
    }

    public void setWhatToShow(int)
    {
        int i0;
        org.apache.xpath.patterns.NodeTest r0;

        r0 := @this: org.apache.xpath.patterns.NodeTest;

        i0 := @parameter0: int;

        r0.<org.apache.xpath.patterns.NodeTest: int m_whatToShow> = i0;

        return;
    }

    public java.lang.String getNamespace()
    {
        java.lang.String $r1;
        org.apache.xpath.patterns.NodeTest r0;

        r0 := @this: org.apache.xpath.patterns.NodeTest;

        $r1 = r0.<org.apache.xpath.patterns.NodeTest: java.lang.String m_namespace>;

        return $r1;
    }

    public void setNamespace(java.lang.String)
    {
        java.lang.String r1;
        org.apache.xpath.patterns.NodeTest r0;

        r0 := @this: org.apache.xpath.patterns.NodeTest;

        r1 := @parameter0: java.lang.String;

        r0.<org.apache.xpath.patterns.NodeTest: java.lang.String m_namespace> = r1;

        return;
    }

    public java.lang.String getLocalName()
    {
        java.lang.String $r1, $r2;
        org.apache.xpath.patterns.NodeTest r0;

        r0 := @this: org.apache.xpath.patterns.NodeTest;

        $r1 = r0.<org.apache.xpath.patterns.NodeTest: java.lang.String m_name>;

        if null != $r1 goto label1;

        $r2 = "";

        goto label2;

     label1:
        $r2 = r0.<org.apache.xpath.patterns.NodeTest: java.lang.String m_name>;

     label2:
        return $r2;
    }

    public void setLocalName(java.lang.String)
    {
        java.lang.String r1;
        org.apache.xpath.patterns.NodeTest r0;

        r0 := @this: org.apache.xpath.patterns.NodeTest;

        r1 := @parameter0: java.lang.String;

        r0.<org.apache.xpath.patterns.NodeTest: java.lang.String m_name> = r1;

        return;
    }

    public void <init>(int, java.lang.String, java.lang.String)
    {
        int i0;
        java.lang.String r1, r2;
        org.apache.xpath.patterns.NodeTest r0;

        r0 := @this: org.apache.xpath.patterns.NodeTest;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        specialinvoke r0.<org.apache.xpath.Expression: void <init>()>();

        virtualinvoke r0.<org.apache.xpath.patterns.NodeTest: void initNodeTest(int,java.lang.String,java.lang.String)>(i0, r1, r2);

        return;
    }

    public void <init>(int)
    {
        int i0;
        org.apache.xpath.patterns.NodeTest r0;

        r0 := @this: org.apache.xpath.patterns.NodeTest;

        i0 := @parameter0: int;

        specialinvoke r0.<org.apache.xpath.Expression: void <init>()>();

        virtualinvoke r0.<org.apache.xpath.patterns.NodeTest: void initNodeTest(int)>(i0);

        return;
    }

    public boolean deepEquals(org.apache.xpath.Expression)
    {
        int $i0, $i1;
        java.lang.String $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12;
        org.apache.xpath.patterns.NodeTest r0, r2;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.apache.xpath.Expression r1;

        r0 := @this: org.apache.xpath.patterns.NodeTest;

        r1 := @parameter0: org.apache.xpath.Expression;

        $z0 = virtualinvoke r0.<org.apache.xpath.Expression: boolean isSameClass(org.apache.xpath.Expression)>(r1);

        if $z0 != 0 goto label1;

        return 0;

     label1:
        r2 = (org.apache.xpath.patterns.NodeTest) r1;

        $r3 = r2.<org.apache.xpath.patterns.NodeTest: java.lang.String m_name>;

        if null == $r3 goto label3;

        $r10 = r0.<org.apache.xpath.patterns.NodeTest: java.lang.String m_name>;

        if null != $r10 goto label2;

        return 0;

     label2:
        $r12 = r2.<org.apache.xpath.patterns.NodeTest: java.lang.String m_name>;

        $r11 = r0.<org.apache.xpath.patterns.NodeTest: java.lang.String m_name>;

        $z4 = virtualinvoke $r12.<java.lang.String: boolean equals(java.lang.Object)>($r11);

        if $z4 != 0 goto label4;

        return 0;

     label3:
        $r4 = r0.<org.apache.xpath.patterns.NodeTest: java.lang.String m_name>;

        if null == $r4 goto label4;

        return 0;

     label4:
        $r5 = r2.<org.apache.xpath.patterns.NodeTest: java.lang.String m_namespace>;

        if null == $r5 goto label6;

        $r7 = r0.<org.apache.xpath.patterns.NodeTest: java.lang.String m_namespace>;

        if null != $r7 goto label5;

        return 0;

     label5:
        $r9 = r2.<org.apache.xpath.patterns.NodeTest: java.lang.String m_namespace>;

        $r8 = r0.<org.apache.xpath.patterns.NodeTest: java.lang.String m_namespace>;

        $z3 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>($r8);

        if $z3 != 0 goto label7;

        return 0;

     label6:
        $r6 = r0.<org.apache.xpath.patterns.NodeTest: java.lang.String m_namespace>;

        if null == $r6 goto label7;

        return 0;

     label7:
        $i1 = r0.<org.apache.xpath.patterns.NodeTest: int m_whatToShow>;

        $i0 = r2.<org.apache.xpath.patterns.NodeTest: int m_whatToShow>;

        if $i1 == $i0 goto label8;

        return 0;

     label8:
        $z2 = r0.<org.apache.xpath.patterns.NodeTest: boolean m_isTotallyWild>;

        $z1 = r2.<org.apache.xpath.patterns.NodeTest: boolean m_isTotallyWild>;

        if $z2 == $z1 goto label9;

        return 0;

     label9:
        return 1;
    }

    public void <init>()
    {
        org.apache.xpath.patterns.NodeTest r0;

        r0 := @this: org.apache.xpath.patterns.NodeTest;

        specialinvoke r0.<org.apache.xpath.Expression: void <init>()>();

        return;
    }

    public void initNodeTest(int)
    {
        int i0;
        org.apache.xpath.patterns.NodeTest r0;

        r0 := @this: org.apache.xpath.patterns.NodeTest;

        i0 := @parameter0: int;

        r0.<org.apache.xpath.patterns.NodeTest: int m_whatToShow> = i0;

        virtualinvoke r0.<org.apache.xpath.patterns.NodeTest: void calcScore()>();

        return;
    }

    public void initNodeTest(int, java.lang.String, java.lang.String)
    {
        int i0;
        java.lang.String r1, r2;
        org.apache.xpath.patterns.NodeTest r0;

        r0 := @this: org.apache.xpath.patterns.NodeTest;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        r0.<org.apache.xpath.patterns.NodeTest: int m_whatToShow> = i0;

        r0.<org.apache.xpath.patterns.NodeTest: java.lang.String m_namespace> = r1;

        r0.<org.apache.xpath.patterns.NodeTest: java.lang.String m_name> = r2;

        virtualinvoke r0.<org.apache.xpath.patterns.NodeTest: void calcScore()>();

        return;
    }

    public org.apache.xpath.objects.XNumber getStaticScore()
    {
        org.apache.xpath.patterns.NodeTest r0;
        org.apache.xpath.objects.XNumber $r1;

        r0 := @this: org.apache.xpath.patterns.NodeTest;

        $r1 = r0.<org.apache.xpath.patterns.NodeTest: org.apache.xpath.objects.XNumber m_score>;

        return $r1;
    }

    public void setStaticScore(org.apache.xpath.objects.XNumber)
    {
        org.apache.xpath.patterns.NodeTest r0;
        org.apache.xpath.objects.XNumber r1;

        r0 := @this: org.apache.xpath.patterns.NodeTest;

        r1 := @parameter0: org.apache.xpath.objects.XNumber;

        r0.<org.apache.xpath.patterns.NodeTest: org.apache.xpath.objects.XNumber m_score> = r1;

        return;
    }

    protected void calcScore()
    {
        org.apache.xpath.objects.XNumber $r5, $r8, $r9, $r12;
        java.lang.String $r1, $r2, $r3, $r4, $r6, $r7, $r10, $r11, $r13;
        org.apache.xpath.patterns.NodeTest r0;
        boolean $z0;

        r0 := @this: org.apache.xpath.patterns.NodeTest;

        $r1 = r0.<org.apache.xpath.patterns.NodeTest: java.lang.String m_namespace>;

        if $r1 != null goto label1;

        $r11 = r0.<org.apache.xpath.patterns.NodeTest: java.lang.String m_name>;

        if $r11 != null goto label1;

        $r12 = <org.apache.xpath.patterns.NodeTest: org.apache.xpath.objects.XNumber SCORE_NODETEST>;

        r0.<org.apache.xpath.patterns.NodeTest: org.apache.xpath.objects.XNumber m_score> = $r12;

        goto label5;

     label1:
        $r2 = r0.<org.apache.xpath.patterns.NodeTest: java.lang.String m_namespace>;

        if $r2 == "*" goto label2;

        $r10 = r0.<org.apache.xpath.patterns.NodeTest: java.lang.String m_namespace>;

        if $r10 != null goto label3;

     label2:
        $r3 = r0.<org.apache.xpath.patterns.NodeTest: java.lang.String m_name>;

        if $r3 != "*" goto label3;

        $r9 = <org.apache.xpath.patterns.NodeTest: org.apache.xpath.objects.XNumber SCORE_NODETEST>;

        r0.<org.apache.xpath.patterns.NodeTest: org.apache.xpath.objects.XNumber m_score> = $r9;

        goto label5;

     label3:
        $r4 = r0.<org.apache.xpath.patterns.NodeTest: java.lang.String m_namespace>;

        if $r4 == "*" goto label4;

        $r7 = r0.<org.apache.xpath.patterns.NodeTest: java.lang.String m_name>;

        if $r7 != "*" goto label4;

        $r8 = <org.apache.xpath.patterns.NodeTest: org.apache.xpath.objects.XNumber SCORE_NSWILD>;

        r0.<org.apache.xpath.patterns.NodeTest: org.apache.xpath.objects.XNumber m_score> = $r8;

        goto label5;

     label4:
        $r5 = <org.apache.xpath.patterns.NodeTest: org.apache.xpath.objects.XNumber SCORE_QNAME>;

        r0.<org.apache.xpath.patterns.NodeTest: org.apache.xpath.objects.XNumber m_score> = $r5;

     label5:
        $r13 = r0.<org.apache.xpath.patterns.NodeTest: java.lang.String m_namespace>;

        if $r13 != null goto label6;

        $r6 = r0.<org.apache.xpath.patterns.NodeTest: java.lang.String m_name>;

        if $r6 != "*" goto label6;

        $z0 = 1;

        goto label7;

     label6:
        $z0 = 0;

     label7:
        r0.<org.apache.xpath.patterns.NodeTest: boolean m_isTotallyWild> = $z0;

        return;
    }

    public double getDefaultScore()
    {
        org.apache.xpath.patterns.NodeTest r0;
        org.apache.xpath.objects.XNumber $r1;
        double $d0;

        r0 := @this: org.apache.xpath.patterns.NodeTest;

        $r1 = r0.<org.apache.xpath.patterns.NodeTest: org.apache.xpath.objects.XNumber m_score>;

        $d0 = virtualinvoke $r1.<org.apache.xpath.objects.XNumber: double num()>();

        return $d0;
    }

    public static int getNodeTypeTest(int)
    {
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13;

        i0 := @parameter0: int;

        $i1 = i0 & 1;

        if 0 == $i1 goto label01;

        return 1;

     label01:
        $i2 = i0 & 2;

        if 0 == $i2 goto label02;

        return 2;

     label02:
        $i3 = i0 & 4;

        if 0 == $i3 goto label03;

        return 3;

     label03:
        $i4 = i0 & 256;

        if 0 == $i4 goto label04;

        return 9;

     label04:
        $i5 = i0 & 1024;

        if 0 == $i5 goto label05;

        return 11;

     label05:
        $i6 = i0 & 4096;

        if 0 == $i6 goto label06;

        return 13;

     label06:
        $i7 = i0 & 128;

        if 0 == $i7 goto label07;

        return 8;

     label07:
        $i8 = i0 & 64;

        if 0 == $i8 goto label08;

        return 7;

     label08:
        $i9 = i0 & 512;

        if 0 == $i9 goto label09;

        return 10;

     label09:
        $i10 = i0 & 32;

        if 0 == $i10 goto label10;

        return 6;

     label10:
        $i11 = i0 & 16;

        if 0 == $i11 goto label11;

        return 5;

     label11:
        $i12 = i0 & 2048;

        if 0 == $i12 goto label12;

        return 12;

     label12:
        $i13 = i0 & 8;

        if 0 == $i13 goto label13;

        return 4;

     label13:
        return 0;
    }

    public static void debugWhatToShow(int)
    {
        java.util.Vector $r0;
        java.lang.StringBuffer $r5, $r7, $r8;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, i15;
        java.lang.String $r9;
        java.io.PrintStream $r1, $r3, $r4, $r6;
        java.lang.Object $r2;

        i0 := @parameter0: int;

        $r0 = new java.util.Vector;

        specialinvoke $r0.<java.util.Vector: void <init>()>();

        $i1 = i0 & 2;

        if 0 == $i1 goto label01;

        virtualinvoke $r0.<java.util.Vector: void addElement(java.lang.Object)>("SHOW_ATTRIBUTE");

     label01:
        $i2 = i0 & 4096;

        if 0 == $i2 goto label02;

        virtualinvoke $r0.<java.util.Vector: void addElement(java.lang.Object)>("SHOW_NAMESPACE");

     label02:
        $i3 = i0 & 8;

        if 0 == $i3 goto label03;

        virtualinvoke $r0.<java.util.Vector: void addElement(java.lang.Object)>("SHOW_CDATA_SECTION");

     label03:
        $i4 = i0 & 128;

        if 0 == $i4 goto label04;

        virtualinvoke $r0.<java.util.Vector: void addElement(java.lang.Object)>("SHOW_COMMENT");

     label04:
        $i5 = i0 & 256;

        if 0 == $i5 goto label05;

        virtualinvoke $r0.<java.util.Vector: void addElement(java.lang.Object)>("SHOW_DOCUMENT");

     label05:
        $i6 = i0 & 1024;

        if 0 == $i6 goto label06;

        virtualinvoke $r0.<java.util.Vector: void addElement(java.lang.Object)>("SHOW_DOCUMENT_FRAGMENT");

     label06:
        $i7 = i0 & 512;

        if 0 == $i7 goto label07;

        virtualinvoke $r0.<java.util.Vector: void addElement(java.lang.Object)>("SHOW_DOCUMENT_TYPE");

     label07:
        $i8 = i0 & 1;

        if 0 == $i8 goto label08;

        virtualinvoke $r0.<java.util.Vector: void addElement(java.lang.Object)>("SHOW_ELEMENT");

     label08:
        $i9 = i0 & 32;

        if 0 == $i9 goto label09;

        virtualinvoke $r0.<java.util.Vector: void addElement(java.lang.Object)>("SHOW_ENTITY");

     label09:
        $i10 = i0 & 16;

        if 0 == $i10 goto label10;

        virtualinvoke $r0.<java.util.Vector: void addElement(java.lang.Object)>("SHOW_ENTITY_REFERENCE");

     label10:
        $i11 = i0 & 2048;

        if 0 == $i11 goto label11;

        virtualinvoke $r0.<java.util.Vector: void addElement(java.lang.Object)>("SHOW_NOTATION");

     label11:
        $i12 = i0 & 64;

        if 0 == $i12 goto label12;

        virtualinvoke $r0.<java.util.Vector: void addElement(java.lang.Object)>("SHOW_PROCESSING_INSTRUCTION");

     label12:
        $i13 = i0 & 4;

        if 0 == $i13 goto label13;

        virtualinvoke $r0.<java.util.Vector: void addElement(java.lang.Object)>("SHOW_TEXT");

     label13:
        $i14 = virtualinvoke $r0.<java.util.Vector: int size()>();

        i15 = 0;

        goto label16;

     label14:
        if i15 <= 0 goto label15;

        $r3 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r3.<java.io.PrintStream: void print(java.lang.String)>(" | ");

     label15:
        $r1 = <java.lang.System: java.io.PrintStream out>;

        $r2 = virtualinvoke $r0.<java.util.Vector: java.lang.Object elementAt(int)>(i15);

        virtualinvoke $r1.<java.io.PrintStream: void print(java.lang.Object)>($r2);

        i15 = i15 + 1;

     label16:
        if i15 < $i14 goto label14;

        if 0 != $i14 goto label17;

        $r6 = <java.lang.System: java.io.PrintStream out>;

        $r5 = new java.lang.StringBuffer;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("empty whatToShow: ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r6.<java.io.PrintStream: void print(java.lang.String)>($r9);

     label17:
        $r4 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r4.<java.io.PrintStream: void println()>();

        return;
    }

    private static final boolean subPartMatch(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        if r0 == r1 goto label1;

        if null == r0 goto label2;

        if r1 == "*" goto label1;

        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    private static final boolean subPartMatchNS(java.lang.String, java.lang.String)
    {
        int $i0;
        java.lang.String r0, r1;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        if r0 == r1 goto label6;

        if null == r0 goto label7;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 <= 0 goto label3;

        if r1 == "*" goto label1;

        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label2;

     label1:
        $z1 = 1;

        goto label5;

     label2:
        $z1 = 0;

        goto label5;

     label3:
        if null != r1 goto label4;

        $z1 = 1;

        goto label5;

     label4:
        $z1 = 0;

     label5:
        if $z1 == 0 goto label7;

     label6:
        $z2 = 1;

        goto label8;

     label7:
        $z2 = 0;

     label8:
        return $z2;
    }

    public org.apache.xpath.objects.XObject execute(org.apache.xpath.XPathContext, int) throws javax.xml.transform.TransformerException
    {
        boolean $z0, $z1, $z2, $z3, $z4;
        org.apache.xpath.objects.XNumber $r5, $r6, $r9, $r14, $r15, $r16, $r17, $r18;
        short $s1;
        org.apache.xpath.XPathContext r0;
        int i0, $i2, $i3, $i4, $i5, i6, $i8, $i9;
        java.lang.String $r3, $r4, $r7, $r8, $r10, $r11, $r12, $r13;
        org.apache.xpath.patterns.NodeTest r2;
        org.apache.xml.dtm.DTM $r1;

        r2 := @this: org.apache.xpath.patterns.NodeTest;

        r0 := @parameter0: org.apache.xpath.XPathContext;

        i0 := @parameter1: int;

        $r1 = virtualinvoke r0.<org.apache.xpath.XPathContext: org.apache.xml.dtm.DTM getDTM(int)>(i0);

        $s1 = interfaceinvoke $r1.<org.apache.xml.dtm.DTM: short getNodeType(int)>(i0);

        $i2 = r2.<org.apache.xpath.patterns.NodeTest: int m_whatToShow>;

        $i8 = (int) -1;

        if $i2 != $i8 goto label01;

        $r15 = r2.<org.apache.xpath.patterns.NodeTest: org.apache.xpath.objects.XNumber m_score>;

        return $r15;

     label01:
        $i5 = r2.<org.apache.xpath.patterns.NodeTest: int m_whatToShow>;

        $i9 = (int) $s1;

        $i3 = $i9 - 1;

        $i4 = 1 << $i3;

        i6 = $i5 & $i4;

        lookupswitch(i6)
        {
            case 1: goto label11;
            case 2: goto label11;
            case 4: goto label04;
            case 8: goto label04;
            case 64: goto label05;
            case 128: goto label03;
            case 256: goto label02;
            case 1024: goto label02;
            case 4096: goto label08;
            default: goto label15;
        };

     label02:
        $r5 = <org.apache.xpath.patterns.NodeTest: org.apache.xpath.objects.XNumber SCORE_OTHER>;

        return $r5;

     label03:
        $r6 = r2.<org.apache.xpath.patterns.NodeTest: org.apache.xpath.objects.XNumber m_score>;

        return $r6;

     label04:
        $r9 = r2.<org.apache.xpath.patterns.NodeTest: org.apache.xpath.objects.XNumber m_score>;

        return $r9;

     label05:
        $r7 = interfaceinvoke $r1.<org.apache.xml.dtm.DTM: java.lang.String getNodeName(int)>(i0);

        $r8 = r2.<org.apache.xpath.patterns.NodeTest: java.lang.String m_name>;

        $z1 = staticinvoke <org.apache.xpath.patterns.NodeTest: boolean subPartMatch(java.lang.String,java.lang.String)>($r7, $r8);

        if $z1 == 0 goto label06;

        $r16 = r2.<org.apache.xpath.patterns.NodeTest: org.apache.xpath.objects.XNumber m_score>;

        goto label07;

     label06:
        $r16 = <org.apache.xpath.patterns.NodeTest: org.apache.xpath.objects.XNumber SCORE_NONE>;

     label07:
        return $r16;

     label08:
        $r3 = interfaceinvoke $r1.<org.apache.xml.dtm.DTM: java.lang.String getNodeValue(int)>(i0);

        $r4 = r2.<org.apache.xpath.patterns.NodeTest: java.lang.String m_name>;

        $z0 = staticinvoke <org.apache.xpath.patterns.NodeTest: boolean subPartMatch(java.lang.String,java.lang.String)>($r3, $r4);

        if $z0 == 0 goto label09;

        $r17 = r2.<org.apache.xpath.patterns.NodeTest: org.apache.xpath.objects.XNumber m_score>;

        goto label10;

     label09:
        $r17 = <org.apache.xpath.patterns.NodeTest: org.apache.xpath.objects.XNumber SCORE_NONE>;

     label10:
        return $r17;

     label11:
        $z2 = r2.<org.apache.xpath.patterns.NodeTest: boolean m_isTotallyWild>;

        if $z2 != 0 goto label12;

        $r10 = interfaceinvoke $r1.<org.apache.xml.dtm.DTM: java.lang.String getNamespaceURI(int)>(i0);

        $r11 = r2.<org.apache.xpath.patterns.NodeTest: java.lang.String m_namespace>;

        $z3 = staticinvoke <org.apache.xpath.patterns.NodeTest: boolean subPartMatchNS(java.lang.String,java.lang.String)>($r10, $r11);

        if $z3 == 0 goto label13;

        $r12 = interfaceinvoke $r1.<org.apache.xml.dtm.DTM: java.lang.String getLocalName(int)>(i0);

        $r13 = r2.<org.apache.xpath.patterns.NodeTest: java.lang.String m_name>;

        $z4 = staticinvoke <org.apache.xpath.patterns.NodeTest: boolean subPartMatch(java.lang.String,java.lang.String)>($r12, $r13);

        if $z4 == 0 goto label13;

     label12:
        $r18 = r2.<org.apache.xpath.patterns.NodeTest: org.apache.xpath.objects.XNumber m_score>;

        goto label14;

     label13:
        $r18 = <org.apache.xpath.patterns.NodeTest: org.apache.xpath.objects.XNumber SCORE_NONE>;

     label14:
        return $r18;

     label15:
        $r14 = <org.apache.xpath.patterns.NodeTest: org.apache.xpath.objects.XNumber SCORE_NONE>;

        return $r14;
    }

    public org.apache.xpath.objects.XObject execute(org.apache.xpath.XPathContext, int, org.apache.xml.dtm.DTM, int) throws javax.xml.transform.TransformerException
    {
        boolean $z0, $z1, $z2, $z3, $z4;
        org.apache.xpath.objects.XNumber $r4, $r5, $r8, $r13, $r14, $r16, $r17, $r18;
        short $s3;
        org.apache.xpath.XPathContext r15;
        int $i0, i1, $i2, $i4, $i5, i6, i7, $i9, $i10;
        java.lang.String $r2, $r3, $r6, $r7, $r9, $r10, $r11, $r12;
        org.apache.xpath.patterns.NodeTest r0;
        org.apache.xml.dtm.DTM r1;

        r0 := @this: org.apache.xpath.patterns.NodeTest;

        r15 := @parameter0: org.apache.xpath.XPathContext;

        i1 := @parameter1: int;

        r1 := @parameter2: org.apache.xml.dtm.DTM;

        i7 := @parameter3: int;

        $i0 = r0.<org.apache.xpath.patterns.NodeTest: int m_whatToShow>;

        $i9 = (int) -1;

        if $i0 != $i9 goto label01;

        $r14 = r0.<org.apache.xpath.patterns.NodeTest: org.apache.xpath.objects.XNumber m_score>;

        return $r14;

     label01:
        $i2 = r0.<org.apache.xpath.patterns.NodeTest: int m_whatToShow>;

        $s3 = interfaceinvoke r1.<org.apache.xml.dtm.DTM: short getNodeType(int)>(i1);

        $i10 = (int) $s3;

        $i4 = $i10 - 1;

        $i5 = 1 << $i4;

        i6 = $i2 & $i5;

        lookupswitch(i6)
        {
            case 1: goto label11;
            case 2: goto label11;
            case 4: goto label04;
            case 8: goto label04;
            case 64: goto label05;
            case 128: goto label03;
            case 256: goto label02;
            case 1024: goto label02;
            case 4096: goto label08;
            default: goto label15;
        };

     label02:
        $r4 = <org.apache.xpath.patterns.NodeTest: org.apache.xpath.objects.XNumber SCORE_OTHER>;

        return $r4;

     label03:
        $r5 = r0.<org.apache.xpath.patterns.NodeTest: org.apache.xpath.objects.XNumber m_score>;

        return $r5;

     label04:
        $r8 = r0.<org.apache.xpath.patterns.NodeTest: org.apache.xpath.objects.XNumber m_score>;

        return $r8;

     label05:
        $r6 = interfaceinvoke r1.<org.apache.xml.dtm.DTM: java.lang.String getNodeName(int)>(i1);

        $r7 = r0.<org.apache.xpath.patterns.NodeTest: java.lang.String m_name>;

        $z1 = staticinvoke <org.apache.xpath.patterns.NodeTest: boolean subPartMatch(java.lang.String,java.lang.String)>($r6, $r7);

        if $z1 == 0 goto label06;

        $r16 = r0.<org.apache.xpath.patterns.NodeTest: org.apache.xpath.objects.XNumber m_score>;

        goto label07;

     label06:
        $r16 = <org.apache.xpath.patterns.NodeTest: org.apache.xpath.objects.XNumber SCORE_NONE>;

     label07:
        return $r16;

     label08:
        $r2 = interfaceinvoke r1.<org.apache.xml.dtm.DTM: java.lang.String getNodeValue(int)>(i1);

        $r3 = r0.<org.apache.xpath.patterns.NodeTest: java.lang.String m_name>;

        $z0 = staticinvoke <org.apache.xpath.patterns.NodeTest: boolean subPartMatch(java.lang.String,java.lang.String)>($r2, $r3);

        if $z0 == 0 goto label09;

        $r17 = r0.<org.apache.xpath.patterns.NodeTest: org.apache.xpath.objects.XNumber m_score>;

        goto label10;

     label09:
        $r17 = <org.apache.xpath.patterns.NodeTest: org.apache.xpath.objects.XNumber SCORE_NONE>;

     label10:
        return $r17;

     label11:
        $z2 = r0.<org.apache.xpath.patterns.NodeTest: boolean m_isTotallyWild>;

        if $z2 != 0 goto label12;

        $r9 = interfaceinvoke r1.<org.apache.xml.dtm.DTM: java.lang.String getNamespaceURI(int)>(i1);

        $r10 = r0.<org.apache.xpath.patterns.NodeTest: java.lang.String m_namespace>;

        $z3 = staticinvoke <org.apache.xpath.patterns.NodeTest: boolean subPartMatchNS(java.lang.String,java.lang.String)>($r9, $r10);

        if $z3 == 0 goto label13;

        $r11 = interfaceinvoke r1.<org.apache.xml.dtm.DTM: java.lang.String getLocalName(int)>(i1);

        $r12 = r0.<org.apache.xpath.patterns.NodeTest: java.lang.String m_name>;

        $z4 = staticinvoke <org.apache.xpath.patterns.NodeTest: boolean subPartMatch(java.lang.String,java.lang.String)>($r11, $r12);

        if $z4 == 0 goto label13;

     label12:
        $r18 = r0.<org.apache.xpath.patterns.NodeTest: org.apache.xpath.objects.XNumber m_score>;

        goto label14;

     label13:
        $r18 = <org.apache.xpath.patterns.NodeTest: org.apache.xpath.objects.XNumber SCORE_NONE>;

     label14:
        return $r18;

     label15:
        $r13 = <org.apache.xpath.patterns.NodeTest: org.apache.xpath.objects.XNumber SCORE_NONE>;

        return $r13;
    }

    public org.apache.xpath.objects.XObject execute(org.apache.xpath.XPathContext) throws javax.xml.transform.TransformerException
    {
        org.apache.xpath.XPathContext r1;
        int $i0;
        org.apache.xpath.objects.XObject $r2;
        org.apache.xpath.patterns.NodeTest r0;

        r0 := @this: org.apache.xpath.patterns.NodeTest;

        r1 := @parameter0: org.apache.xpath.XPathContext;

        $i0 = virtualinvoke r1.<org.apache.xpath.XPathContext: int getCurrentNode()>();

        $r2 = virtualinvoke r0.<org.apache.xpath.patterns.NodeTest: org.apache.xpath.objects.XObject execute(org.apache.xpath.XPathContext,int)>(r1, $i0);

        return $r2;
    }

    public void fixupVariables(java.util.Vector, int)
    {
        int i0;
        java.util.Vector r1;
        org.apache.xpath.patterns.NodeTest r0;

        r0 := @this: org.apache.xpath.patterns.NodeTest;

        r1 := @parameter0: java.util.Vector;

        i0 := @parameter1: int;

        return;
    }

    public void callVisitors(org.apache.xpath.ExpressionOwner, org.apache.xpath.XPathVisitor)
    {
        org.apache.xpath.XPathVisitor r2;
        org.apache.xpath.patterns.NodeTest r0;
        org.apache.xpath.ExpressionOwner r1;

        r0 := @this: org.apache.xpath.patterns.NodeTest;

        r1 := @parameter0: org.apache.xpath.ExpressionOwner;

        r2 := @parameter1: org.apache.xpath.XPathVisitor;

        virtualinvoke r0.<org.apache.xpath.Expression: void assertion(boolean,java.lang.String)>(0, "callVisitors should not be called for this object!!!");

        return;
    }

    static void <clinit>()
    {
        org.apache.xpath.objects.XNumber $r0, $r1, $r2, $r3, $r4;

        <org.apache.xpath.patterns.NodeTest: int SHOW_BYFUNCTION> = 65536;

        <org.apache.xpath.patterns.NodeTest: java.lang.String SUPPORTS_PRE_STRIPPING> = "http://xml.apache.org/xpath/features/whitespace-pre-stripping";

        <org.apache.xpath.patterns.NodeTest: java.lang.String WILD> = "*";

        $r0 = new org.apache.xpath.objects.XNumber;

        specialinvoke $r0.<org.apache.xpath.objects.XNumber: void <init>(double)>(-0.5);

        <org.apache.xpath.patterns.NodeTest: org.apache.xpath.objects.XNumber SCORE_NODETEST> = $r0;

        $r1 = new org.apache.xpath.objects.XNumber;

        specialinvoke $r1.<org.apache.xpath.objects.XNumber: void <init>(double)>(-0.25);

        <org.apache.xpath.patterns.NodeTest: org.apache.xpath.objects.XNumber SCORE_NSWILD> = $r1;

        $r2 = new org.apache.xpath.objects.XNumber;

        specialinvoke $r2.<org.apache.xpath.objects.XNumber: void <init>(double)>(0.0);

        <org.apache.xpath.patterns.NodeTest: org.apache.xpath.objects.XNumber SCORE_QNAME> = $r2;

        $r3 = new org.apache.xpath.objects.XNumber;

        specialinvoke $r3.<org.apache.xpath.objects.XNumber: void <init>(double)>(0.5);

        <org.apache.xpath.patterns.NodeTest: org.apache.xpath.objects.XNumber SCORE_OTHER> = $r3;

        $r4 = new org.apache.xpath.objects.XNumber;

        specialinvoke $r4.<org.apache.xpath.objects.XNumber: void <init>(double)>(#-Infinity);

        <org.apache.xpath.patterns.NodeTest: org.apache.xpath.objects.XNumber SCORE_NONE> = $r4;

        return;
    }
}
