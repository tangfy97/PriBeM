class org.waveprotocol.box.server.waveserver.RemoteWaveletContainerImpl extends org.waveprotocol.box.server.waveserver.WaveletContainerImpl implements org.waveprotocol.box.server.waveserver.RemoteWaveletContainer
{
    private static final org.waveprotocol.wave.util.logging.Log LOG;
    private final java.util.NavigableMap pendingDeltas;

    public void <init>(org.waveprotocol.wave.model.id.WaveletName, org.waveprotocol.box.server.waveserver.WaveletNotificationSubscriber, com.google.common.util.concurrent.ListenableFuture, java.util.concurrent.Executor)
    {
        org.waveprotocol.wave.model.id.WaveletName r1;
        org.waveprotocol.box.server.waveserver.WaveletNotificationSubscriber r2;
        com.google.common.util.concurrent.ListenableFuture r3;
        java.util.TreeMap $r5;
        java.util.concurrent.Executor r4;
        org.waveprotocol.box.server.waveserver.RemoteWaveletContainerImpl r0;

        r0 := @this: org.waveprotocol.box.server.waveserver.RemoteWaveletContainerImpl;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveletName;

        r2 := @parameter1: org.waveprotocol.box.server.waveserver.WaveletNotificationSubscriber;

        r3 := @parameter2: com.google.common.util.concurrent.ListenableFuture;

        r4 := @parameter3: java.util.concurrent.Executor;

        specialinvoke r0.<org.waveprotocol.box.server.waveserver.WaveletContainerImpl: void <init>(org.waveprotocol.wave.model.id.WaveletName,org.waveprotocol.box.server.waveserver.WaveletNotificationSubscriber,com.google.common.util.concurrent.ListenableFuture,java.lang.String,java.util.concurrent.Executor)>(r1, r2, r3, null, r4);

        $r5 = staticinvoke <com.google.common.collect.Maps: java.util.TreeMap newTreeMap()>();

        r0.<org.waveprotocol.box.server.waveserver.RemoteWaveletContainerImpl: java.util.NavigableMap pendingDeltas> = $r5;

        return;
    }

    public com.google.common.util.concurrent.ListenableFuture update(java.util.List, java.lang.String, org.waveprotocol.wave.federation.WaveletFederationProvider, org.waveprotocol.box.server.waveserver.CertificateManager)
    {
        org.waveprotocol.box.server.waveserver.CertificateManager r5;
        java.util.List r2;
        org.waveprotocol.wave.federation.WaveletFederationProvider r4;
        org.waveprotocol.box.server.waveserver.RemoteWaveletContainerImpl r1;
        java.lang.String r3;
        com.google.common.util.concurrent.SettableFuture $r0;

        r1 := @this: org.waveprotocol.box.server.waveserver.RemoteWaveletContainerImpl;

        r2 := @parameter0: java.util.List;

        r3 := @parameter1: java.lang.String;

        r4 := @parameter2: org.waveprotocol.wave.federation.WaveletFederationProvider;

        r5 := @parameter3: org.waveprotocol.box.server.waveserver.CertificateManager;

        $r0 = staticinvoke <com.google.common.util.concurrent.SettableFuture: com.google.common.util.concurrent.SettableFuture create()>();

        specialinvoke r1.<org.waveprotocol.box.server.waveserver.RemoteWaveletContainerImpl: void internalUpdate(java.util.List,java.lang.String,org.waveprotocol.wave.federation.WaveletFederationProvider,org.waveprotocol.box.server.waveserver.CertificateManager,com.google.common.util.concurrent.SettableFuture)>(r2, r3, r4, r5, $r0);

        return $r0;
    }

    public void commit(org.waveprotocol.wave.model.version.HashedVersion)
    {
        java.lang.Throwable $r3;
        com.google.common.collect.ImmutableSet $r2;
        org.waveprotocol.wave.model.version.HashedVersion r1;
        org.waveprotocol.box.server.waveserver.RemoteWaveletContainerImpl r0;

        r0 := @this: org.waveprotocol.box.server.waveserver.RemoteWaveletContainerImpl;

        r1 := @parameter0: org.waveprotocol.wave.model.version.HashedVersion;

        virtualinvoke r0.<org.waveprotocol.box.server.waveserver.RemoteWaveletContainerImpl: void acquireWriteLock()>();

     label1:
        $r2 = staticinvoke <com.google.common.collect.ImmutableSet: com.google.common.collect.ImmutableSet of()>();

        virtualinvoke r0.<org.waveprotocol.box.server.waveserver.RemoteWaveletContainerImpl: void persist(org.waveprotocol.wave.model.version.HashedVersion,com.google.common.collect.ImmutableSet)>(r1, $r2);

     label2:
        virtualinvoke r0.<org.waveprotocol.box.server.waveserver.RemoteWaveletContainerImpl: void releaseWriteLock()>();

        goto label5;

     label3:
        $r3 := @caughtexception;

     label4:
        virtualinvoke r0.<org.waveprotocol.box.server.waveserver.RemoteWaveletContainerImpl: void releaseWriteLock()>();

        throw $r3;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private void internalUpdate(java.util.List, java.lang.String, org.waveprotocol.wave.federation.WaveletFederationProvider, org.waveprotocol.box.server.waveserver.CertificateManager, com.google.common.util.concurrent.SettableFuture)
    {
        org.waveprotocol.wave.federation.Proto$ProtocolAppliedWaveletDelta $r20;
        org.waveprotocol.box.server.waveserver.CertificateManager r13;
        byte[] $r33;
        org.waveprotocol.box.server.waveserver.ByteStringMessage r18, $r40;
        com.google.common.util.concurrent.SettableFuture r14;
        java.util.concurrent.atomic.AtomicInteger $r8;
        org.waveprotocol.wave.util.logging.Log $r4, $r30, $r43, $r50;
        org.waveprotocol.box.server.waveserver.RemoteWaveletContainerImpl r10;
        boolean $z0, $z1, $z2;
        org.waveprotocol.wave.model.id.WaveletName $r38, $r52;
        com.google.protobuf.InvalidProtocolBufferException $r41, $r48;
        org.waveprotocol.wave.federation.Proto$ProtocolSignedDelta $r21;
        org.waveprotocol.wave.federation.FederationErrorProto$FederationError $r56;
        com.google.protobuf.ByteString $r27, $r32, $r37, r57;
        java.util.List r1, $r23;
        org.waveprotocol.wave.federation.FederationException $r55;
        java.lang.StringBuilder $r3, $r5, $r6, $r29, $r31, $r35, $r42, $r44, $r45, $r49, $r51, $r53;
        java.lang.Throwable $r47;
        org.waveprotocol.box.server.waveserver.RemoteWaveletContainerImpl$1 $r9;
        org.waveprotocol.wave.federation.Proto$ProtocolSignerInfo $r28;
        java.util.ArrayList $r0;
        org.waveprotocol.wave.model.version.HashedVersion $r22;
        java.lang.String $r7, r11, $r34, $r36, $r46, $r54;
        org.waveprotocol.box.server.waveserver.RemoteWaveletContainerImpl$2 $r15;
        java.util.Iterator $r2, $r16, $r24;
        org.waveprotocol.wave.federation.WaveletFederationProvider r12;
        org.waveprotocol.wave.federation.Proto$ProtocolSignature r26;
        com.google.protobuf.Message $r19;
        java.lang.Object $r17, $r25, $r39;

        r10 := @this: org.waveprotocol.box.server.waveserver.RemoteWaveletContainerImpl;

        r1 := @parameter0: java.util.List;

        r11 := @parameter1: java.lang.String;

        r12 := @parameter2: org.waveprotocol.wave.federation.WaveletFederationProvider;

        r13 := @parameter3: org.waveprotocol.box.server.waveserver.CertificateManager;

        r14 := @parameter4: com.google.common.util.concurrent.SettableFuture;

        $r0 = staticinvoke <com.google.common.collect.Lists: java.util.ArrayList newArrayList()>();

        $r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label11;

        $r39 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r57 = (com.google.protobuf.ByteString) $r39;

     label02:
        $r40 = staticinvoke <org.waveprotocol.box.server.waveserver.ByteStringMessage: org.waveprotocol.box.server.waveserver.ByteStringMessage parseProtocolAppliedWaveletDelta(com.google.protobuf.ByteString)>(r57);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r40);

     label03:
        goto label10;

     label04:
        $r48 := @caughtexception;

        $r50 = <org.waveprotocol.box.server.waveserver.RemoteWaveletContainerImpl: org.waveprotocol.wave.util.logging.Log LOG>;

        $r49 = new java.lang.StringBuilder;

        specialinvoke $r49.<java.lang.StringBuilder: void <init>()>();

        $r51 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid applied delta protobuf for incoming ");

        $r52 = virtualinvoke r10.<org.waveprotocol.box.server.waveserver.RemoteWaveletContainerImpl: org.waveprotocol.wave.model.id.WaveletName getWaveletName()>();

        $r53 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r52);

        $r54 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r50.<org.waveprotocol.wave.util.logging.Log: void info(java.lang.String,java.lang.Throwable)>($r54, $r48);

        virtualinvoke r10.<org.waveprotocol.box.server.waveserver.RemoteWaveletContainerImpl: void acquireWriteLock()>();

     label05:
        virtualinvoke r10.<org.waveprotocol.box.server.waveserver.RemoteWaveletContainerImpl: void markStateCorrupted()>();

     label06:
        virtualinvoke r10.<org.waveprotocol.box.server.waveserver.RemoteWaveletContainerImpl: void releaseWriteLock()>();

        goto label09;

     label07:
        $r47 := @caughtexception;

     label08:
        virtualinvoke r10.<org.waveprotocol.box.server.waveserver.RemoteWaveletContainerImpl: void releaseWriteLock()>();

        throw $r47;

     label09:
        $r55 = new org.waveprotocol.wave.federation.FederationException;

        $r56 = staticinvoke <org.waveprotocol.wave.federation.FederationErrors: org.waveprotocol.wave.federation.FederationErrorProto$FederationError badRequest(java.lang.String)>("Invalid applied delta protocol buffer");

        specialinvoke $r55.<org.waveprotocol.wave.federation.FederationException: void <init>(org.waveprotocol.wave.federation.FederationErrorProto$FederationError)>($r56);

        virtualinvoke r14.<com.google.common.util.concurrent.SettableFuture: boolean setException(java.lang.Throwable)>($r55);

        return;

     label10:
        goto label01;

     label11:
        $r4 = <org.waveprotocol.box.server.waveserver.RemoteWaveletContainerImpl: org.waveprotocol.wave.util.logging.Log LOG>;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Got update: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r4.<org.waveprotocol.wave.util.logging.Log: void info(java.lang.String)>($r7);

        $r8 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke $r8.<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>(1);

        $r9 = new org.waveprotocol.box.server.waveserver.RemoteWaveletContainerImpl$1;

        specialinvoke $r9.<org.waveprotocol.box.server.waveserver.RemoteWaveletContainerImpl$1: void <init>(org.waveprotocol.box.server.waveserver.RemoteWaveletContainerImpl,java.util.concurrent.atomic.AtomicInteger,java.util.List,java.lang.String,org.waveprotocol.wave.federation.WaveletFederationProvider,org.waveprotocol.box.server.waveserver.CertificateManager,com.google.common.util.concurrent.SettableFuture)>(r10, $r8, $r0, r11, r12, r13, r14);

        $r15 = new org.waveprotocol.box.server.waveserver.RemoteWaveletContainerImpl$2;

        specialinvoke $r15.<org.waveprotocol.box.server.waveserver.RemoteWaveletContainerImpl$2: void <init>(org.waveprotocol.box.server.waveserver.RemoteWaveletContainerImpl,java.lang.Runnable)>(r10, $r9);

        $r16 = interfaceinvoke $r0.<java.util.List: java.util.Iterator iterator()>();

     label12:
        $z2 = interfaceinvoke $r16.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label20;

        $r17 = interfaceinvoke $r16.<java.util.Iterator: java.lang.Object next()>();

        r18 = (org.waveprotocol.box.server.waveserver.ByteStringMessage) $r17;

        $r19 = virtualinvoke r18.<org.waveprotocol.box.server.waveserver.ByteStringMessage: com.google.protobuf.Message getMessage()>();

        $r20 = (org.waveprotocol.wave.federation.Proto$ProtocolAppliedWaveletDelta) $r19;

        $r21 = virtualinvoke $r20.<org.waveprotocol.wave.federation.Proto$ProtocolAppliedWaveletDelta: org.waveprotocol.wave.federation.Proto$ProtocolSignedDelta getSignedOriginalDelta()>();

     label13:
        $r22 = staticinvoke <org.waveprotocol.box.server.waveserver.AppliedDeltaUtil: org.waveprotocol.wave.model.version.HashedVersion calculateResultingHashedVersion(org.waveprotocol.box.server.waveserver.ByteStringMessage)>(r18);

     label14:
        goto label16;

     label15:
        $r41 := @caughtexception;

        $r43 = <org.waveprotocol.box.server.waveserver.RemoteWaveletContainerImpl: org.waveprotocol.wave.util.logging.Log LOG>;

        $r42 = new java.lang.StringBuilder;

        specialinvoke $r42.<java.lang.StringBuilder: void <init>()>();

        $r44 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Skipping illformed applied delta ");

        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r18);

        $r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r43.<org.waveprotocol.wave.util.logging.Log: void warning(java.lang.String,java.lang.Throwable)>($r46, $r41);

        goto label12;

     label16:
        $r23 = virtualinvoke $r21.<org.waveprotocol.wave.federation.Proto$ProtocolSignedDelta: java.util.List getSignatureList()>();

        $r24 = interfaceinvoke $r23.<java.util.List: java.util.Iterator iterator()>();

     label17:
        $z1 = interfaceinvoke $r24.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label19;

        $r25 = interfaceinvoke $r24.<java.util.Iterator: java.lang.Object next()>();

        r26 = (org.waveprotocol.wave.federation.Proto$ProtocolSignature) $r25;

        $r27 = virtualinvoke r26.<org.waveprotocol.wave.federation.Proto$ProtocolSignature: com.google.protobuf.ByteString getSignerId()>();

        $r28 = interfaceinvoke r13.<org.waveprotocol.box.server.waveserver.CertificateManager: org.waveprotocol.wave.federation.Proto$ProtocolSignerInfo retrieveSignerInfo(com.google.protobuf.ByteString)>($r27);

        if $r28 != null goto label18;

        $r30 = <org.waveprotocol.box.server.waveserver.RemoteWaveletContainerImpl: org.waveprotocol.wave.util.logging.Log LOG>;

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        $r31 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Fetching signer info ");

        $r32 = virtualinvoke r26.<org.waveprotocol.wave.federation.Proto$ProtocolSignature: com.google.protobuf.ByteString getSignerId()>();

        $r33 = virtualinvoke $r32.<com.google.protobuf.ByteString: byte[] toByteArray()>();

        $r34 = staticinvoke <org.jivesoftware.util.Base64: java.lang.String encodeBytes(byte[])>($r33);

        $r35 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r34);

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r30.<org.waveprotocol.wave.util.logging.Log: void info(java.lang.String)>($r36);

        virtualinvoke $r8.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>();

        $r37 = virtualinvoke r26.<org.waveprotocol.wave.federation.Proto$ProtocolSignature: com.google.protobuf.ByteString getSignerId()>();

        $r38 = virtualinvoke r10.<org.waveprotocol.box.server.waveserver.RemoteWaveletContainerImpl: org.waveprotocol.wave.model.id.WaveletName getWaveletName()>();

        interfaceinvoke r13.<org.waveprotocol.box.server.waveserver.CertificateManager: void prefetchDeltaSignerInfo(org.waveprotocol.wave.federation.WaveletFederationProvider,com.google.protobuf.ByteString,org.waveprotocol.wave.model.id.WaveletName,org.waveprotocol.wave.model.version.HashedVersion,org.waveprotocol.box.server.waveserver.CertificateManager$SignerInfoPrefetchResultListener)>(r12, $r37, $r38, $r22, $r15);

     label18:
        goto label17;

     label19:
        goto label12;

     label20:
        interfaceinvoke $r9.<java.lang.Runnable: void run()>();

        return;

        catch com.google.protobuf.InvalidProtocolBufferException from label02 to label03 with label04;
        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.lang.Throwable from label07 to label08 with label07;
        catch com.google.protobuf.InvalidProtocolBufferException from label13 to label14 with label15;
    }

    private void internalUpdateAfterSignerInfoRetrieval(java.util.List, java.lang.String, org.waveprotocol.wave.federation.WaveletFederationProvider, org.waveprotocol.box.server.waveserver.CertificateManager, com.google.common.util.concurrent.SettableFuture)
    {
        org.waveprotocol.wave.federation.Proto$ProtocolAppliedWaveletDelta $r36, $r48, $r83, $r96;
        byte $b4, $b7, $b14;
        org.waveprotocol.wave.util.logging.Log $r1, $r13, $r14, $r23, $r29, $r38, $r59, $r69, $r78, $r88, $r100, $r115, $r126;
        com.google.protobuf.InvalidProtocolBufferException $r106, $r110, $r112;
        org.waveprotocol.wave.federation.Proto$ProtocolSignedDelta $r84, $r97;
        org.waveprotocol.wave.federation.Proto$ProtocolWaveletDelta $r86;
        java.lang.StringBuilder $r2, $r4, $r5, $r24, $r25, $r30, $r31, $r39, $r40, $r44, $r45, $r46, $r49, $r50, $r54, $r55, $r56, $r60, $r61, $r62, $r63, $r64, $r66, $r79, $r80, $r89, $r90, $r116, $r117, $r118, $r120, $r121, $r127, $r128, $r129, $r131, $r139, $r140, $r142, $r144, $r145, $r147, $r149, $r151, $r152, $r154, $r158;
        long $l2, $l3, $l5, $l6, $l8, $l9, $l10, l11, $l13, $l16, $l17, $l18;
        org.waveprotocol.box.server.waveserver.InvalidHashException $r104;
        com.google.common.util.concurrent.SettableFuture r17;
        org.waveprotocol.box.server.waveserver.WaveletDeltaRecord $r33;
        org.waveprotocol.box.server.waveserver.RemoteWaveletContainerImpl r7;
        com.google.common.collect.ImmutableSet $r16;
        java.util.NavigableMap $r11, $r18, $r27, $r93;
        com.google.protobuf.ByteString $r85;
        com.google.common.collect.ImmutableList $r12, $r15;
        int $i0, $i1, $i12, $i15, $i19;
        org.waveprotocol.box.server.waveserver.RemoteWaveletContainerImpl$3 $r148;
        org.waveprotocol.wave.crypto.SignatureException $r124;
        java.lang.Object $r20, $r21, $r76, $r94;
        org.waveprotocol.wave.model.id.WaveletName $r65, $r70, $r119, $r130;
        org.waveprotocol.wave.federation.FederationErrorProto$FederationError $r103;
        org.waveprotocol.wave.federation.FederationException $r159;
        java.lang.Throwable $r98;
        org.waveprotocol.wave.model.version.HashedVersion $r34, $r92, r134, r137;
        java.lang.String $r6, $r26, $r32, $r41, $r51, $r57, $r67, r71, $r81, $r91, $r102, $r122, $r132;
        java.util.Map$Entry $r19;
        org.waveprotocol.wave.crypto.UnknownSignerException $r113;
        org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion $r72, $r73;
        org.waveprotocol.box.server.waveserver.WaveServerException $r99, $r141, $r143, $r146, $r150, $r155, $r156, $r157;
        org.waveprotocol.box.server.waveserver.CertificateManager r75;
        org.waveprotocol.box.server.waveserver.ByteStringMessage r135, r136, r138;
        boolean $z0, $z1, $z2, $z3, z4;
        java.util.List r3;
        com.google.common.collect.ImmutableList$Builder $r10;
        org.waveprotocol.wave.model.operation.OperationException $r108, $r153;
        java.util.Iterator $r8, $r9;
        org.waveprotocol.wave.federation.WaveletFederationProvider r68;
        com.google.protobuf.Message $r35, $r47, $r82, $r95;

        r7 := @this: org.waveprotocol.box.server.waveserver.RemoteWaveletContainerImpl;

        r3 := @parameter0: java.util.List;

        r71 := @parameter1: java.lang.String;

        r68 := @parameter2: org.waveprotocol.wave.federation.WaveletFederationProvider;

        r75 := @parameter3: org.waveprotocol.box.server.waveserver.CertificateManager;

        r17 := @parameter4: com.google.common.util.concurrent.SettableFuture;

        $r1 = <org.waveprotocol.box.server.waveserver.RemoteWaveletContainerImpl: org.waveprotocol.wave.util.logging.Log LOG>;

        $r139 = new java.lang.StringBuilder;

        specialinvoke $r139.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r139.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Passed signer info check, now applying all ");

        $i0 = interfaceinvoke r3.<java.util.List: int size()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" deltas");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r1.<org.waveprotocol.wave.util.logging.Log: void info(java.lang.String)>($r6);

        virtualinvoke r7.<org.waveprotocol.box.server.waveserver.RemoteWaveletContainerImpl: void acquireWriteLock()>();

     label01:
        virtualinvoke r7.<org.waveprotocol.box.server.waveserver.RemoteWaveletContainerImpl: void checkStateOk()>();

        r134 = virtualinvoke r7.<org.waveprotocol.box.server.waveserver.RemoteWaveletContainerImpl: org.waveprotocol.wave.model.version.HashedVersion getCurrentVersion()>();

        z4 = 0;

        $r8 = interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>();

     label02:
        $z0 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label08;

        $r94 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        r135 = (org.waveprotocol.box.server.waveserver.ByteStringMessage) $r94;

     label03:
        $r95 = virtualinvoke r135.<org.waveprotocol.box.server.waveserver.ByteStringMessage: com.google.protobuf.Message getMessage()>();

        $r96 = (org.waveprotocol.wave.federation.Proto$ProtocolAppliedWaveletDelta) $r95;

        $r97 = virtualinvoke $r96.<org.waveprotocol.wave.federation.Proto$ProtocolAppliedWaveletDelta: org.waveprotocol.wave.federation.Proto$ProtocolSignedDelta getSignedOriginalDelta()>();

        interfaceinvoke r75.<org.waveprotocol.box.server.waveserver.CertificateManager: org.waveprotocol.box.server.waveserver.ByteStringMessage verifyDelta(org.waveprotocol.wave.federation.Proto$ProtocolSignedDelta)>($r97);

     label04:
        goto label07;

     label05:
        $r124 := @caughtexception;

        $r126 = <org.waveprotocol.box.server.waveserver.RemoteWaveletContainerImpl: org.waveprotocol.wave.util.logging.Log LOG>;

        $r140 = new java.lang.StringBuilder;

        specialinvoke $r140.<java.lang.StringBuilder: void <init>()>();

        $r127 = virtualinvoke $r140.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Verification failure for ");

        $r128 = virtualinvoke $r127.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r71);

        $r129 = virtualinvoke $r128.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" incoming ");

        $r130 = virtualinvoke r7.<org.waveprotocol.box.server.waveserver.RemoteWaveletContainerImpl: org.waveprotocol.wave.model.id.WaveletName getWaveletName()>();

        $r131 = virtualinvoke $r129.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r130);

        $r132 = virtualinvoke $r131.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r126.<org.waveprotocol.wave.util.logging.Log: void warning(java.lang.String,java.lang.Throwable)>($r132, $r124);

        $r141 = new org.waveprotocol.box.server.waveserver.WaveServerException;

        specialinvoke $r141.<org.waveprotocol.box.server.waveserver.WaveServerException: void <init>(java.lang.String,java.lang.Throwable)>("Verification failure", $r124);

        throw $r141;

     label06:
        $r113 := @caughtexception;

        $r115 = <org.waveprotocol.box.server.waveserver.RemoteWaveletContainerImpl: org.waveprotocol.wave.util.logging.Log LOG>;

        $r142 = new java.lang.StringBuilder;

        specialinvoke $r142.<java.lang.StringBuilder: void <init>()>();

        $r116 = virtualinvoke $r142.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown signer for ");

        $r117 = virtualinvoke $r116.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r71);

        $r118 = virtualinvoke $r117.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" incoming ");

        $r119 = virtualinvoke r7.<org.waveprotocol.box.server.waveserver.RemoteWaveletContainerImpl: org.waveprotocol.wave.model.id.WaveletName getWaveletName()>();

        $r120 = virtualinvoke $r118.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r119);

        $r121 = virtualinvoke $r120.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", this is BAD! We were supposed to have prefetched it!");

        $r122 = virtualinvoke $r121.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r115.<org.waveprotocol.wave.util.logging.Log: void severe(java.lang.String,java.lang.Throwable)>($r122, $r113);

        $r143 = new org.waveprotocol.box.server.waveserver.WaveServerException;

        specialinvoke $r143.<org.waveprotocol.box.server.waveserver.WaveServerException: void <init>(java.lang.String,java.lang.Throwable)>("Unknown signer", $r113);

        throw $r143;

     label07:
        goto label02;

     label08:
        $r9 = interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>();

     label09:
        $z1 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label17;

        $r76 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        r136 = (org.waveprotocol.box.server.waveserver.ByteStringMessage) $r76;

        $r78 = <org.waveprotocol.box.server.waveserver.RemoteWaveletContainerImpl: org.waveprotocol.wave.util.logging.Log LOG>;

        $r144 = new java.lang.StringBuilder;

        specialinvoke $r144.<java.lang.StringBuilder: void <init>()>();

        $r79 = virtualinvoke $r144.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Delta incoming: ");

        $r80 = virtualinvoke $r79.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r136);

        $r81 = virtualinvoke $r80.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r78.<org.waveprotocol.wave.util.logging.Log: void info(java.lang.String)>($r81);

     label10:
        $r82 = virtualinvoke r136.<org.waveprotocol.box.server.waveserver.ByteStringMessage: com.google.protobuf.Message getMessage()>();

        $r83 = (org.waveprotocol.wave.federation.Proto$ProtocolAppliedWaveletDelta) $r82;

        $r84 = virtualinvoke $r83.<org.waveprotocol.wave.federation.Proto$ProtocolAppliedWaveletDelta: org.waveprotocol.wave.federation.Proto$ProtocolSignedDelta getSignedOriginalDelta()>();

        $r85 = virtualinvoke $r84.<org.waveprotocol.wave.federation.Proto$ProtocolSignedDelta: com.google.protobuf.ByteString getDelta()>();

        $r86 = staticinvoke <org.waveprotocol.wave.federation.Proto$ProtocolWaveletDelta: org.waveprotocol.wave.federation.Proto$ProtocolWaveletDelta parseFrom(com.google.protobuf.ByteString)>($r85);

        $r88 = <org.waveprotocol.box.server.waveserver.RemoteWaveletContainerImpl: org.waveprotocol.wave.util.logging.Log LOG>;

        $r145 = new java.lang.StringBuilder;

        specialinvoke $r145.<java.lang.StringBuilder: void <init>()>();

        $r89 = virtualinvoke $r145.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("actual delta: ");

        $r90 = virtualinvoke $r89.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r86);

        $r91 = virtualinvoke $r90.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r88.<org.waveprotocol.wave.util.logging.Log: void info(java.lang.String)>($r91);

     label11:
        goto label13;

     label12:
        $r112 := @caughtexception;

        virtualinvoke $r112.<com.google.protobuf.InvalidProtocolBufferException: void printStackTrace()>();

     label13:
        $r92 = staticinvoke <org.waveprotocol.box.server.waveserver.AppliedDeltaUtil: org.waveprotocol.wave.model.version.HashedVersion getHashedVersionAppliedAt(org.waveprotocol.box.server.waveserver.ByteStringMessage)>(r136);

     label14:
        goto label16;

     label15:
        $r110 := @caughtexception;

        virtualinvoke r7.<org.waveprotocol.box.server.waveserver.RemoteWaveletContainerImpl: void markStateCorrupted()>();

        $r146 = new org.waveprotocol.box.server.waveserver.WaveServerException;

        specialinvoke $r146.<org.waveprotocol.box.server.waveserver.WaveServerException: void <init>(java.lang.String,java.lang.Throwable)>("Authoritative server sent delta with badly formed original wavelet delta", $r110);

        throw $r146;

     label16:
        $r93 = r7.<org.waveprotocol.box.server.waveserver.RemoteWaveletContainerImpl: java.util.NavigableMap pendingDeltas>;

        interfaceinvoke $r93.<java.util.NavigableMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r92, r136);

        goto label09;

     label17:
        $r10 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList$Builder builder()>();

     label18:
        $r11 = r7.<org.waveprotocol.box.server.waveserver.RemoteWaveletContainerImpl: java.util.NavigableMap pendingDeltas>;

        $i1 = interfaceinvoke $r11.<java.util.NavigableMap: int size()>();

        if $i1 <= 0 goto label31;

        $r18 = r7.<org.waveprotocol.box.server.waveserver.RemoteWaveletContainerImpl: java.util.NavigableMap pendingDeltas>;

        $r19 = interfaceinvoke $r18.<java.util.NavigableMap: java.util.Map$Entry firstEntry()>();

        $r20 = interfaceinvoke $r19.<java.util.Map$Entry: java.lang.Object getKey()>();

        r137 = (org.waveprotocol.wave.model.version.HashedVersion) $r20;

        $r21 = interfaceinvoke $r19.<java.util.Map$Entry: java.lang.Object getValue()>();

        r138 = (org.waveprotocol.box.server.waveserver.ByteStringMessage) $r21;

        $l2 = virtualinvoke r137.<org.waveprotocol.wave.model.version.HashedVersion: long getVersion()>();

        $l3 = virtualinvoke r134.<org.waveprotocol.wave.model.version.HashedVersion: long getVersion()>();

        $b4 = $l2 cmp $l3;

        $i19 = (int) $b4;

        if $i19 <= 0 goto label20;

        $r59 = <org.waveprotocol.box.server.waveserver.RemoteWaveletContainerImpl: org.waveprotocol.wave.util.logging.Log LOG>;

        $r147 = new java.lang.StringBuilder;

        specialinvoke $r147.<java.lang.StringBuilder: void <init>()>();

        $r60 = virtualinvoke $r147.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Missing history from ");

        $l17 = virtualinvoke r134.<org.waveprotocol.wave.model.version.HashedVersion: long getVersion()>();

        $r61 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l17);

        $r62 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-");

        $l18 = virtualinvoke r137.<org.waveprotocol.wave.model.version.HashedVersion: long getVersion()>();

        $r63 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l18);

        $r64 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", requesting from upstream for ");

        $r65 = virtualinvoke r7.<org.waveprotocol.box.server.waveserver.RemoteWaveletContainerImpl: org.waveprotocol.wave.model.id.WaveletName getWaveletName()>();

        $r66 = virtualinvoke $r64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r65);

        $r67 = virtualinvoke $r66.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r59.<org.waveprotocol.wave.util.logging.Log: void info(java.lang.String)>($r67);

        if r68 == null goto label19;

        $r70 = virtualinvoke r7.<org.waveprotocol.box.server.waveserver.RemoteWaveletContainerImpl: org.waveprotocol.wave.model.id.WaveletName getWaveletName()>();

        $r72 = staticinvoke <org.waveprotocol.box.server.common.CoreWaveletOperationSerializer: org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion serialize(org.waveprotocol.wave.model.version.HashedVersion)>(r134);

        $r73 = staticinvoke <org.waveprotocol.box.server.common.CoreWaveletOperationSerializer: org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion serialize(org.waveprotocol.wave.model.version.HashedVersion)>(r137);

        $r148 = new org.waveprotocol.box.server.waveserver.RemoteWaveletContainerImpl$3;

        specialinvoke $r148.<org.waveprotocol.box.server.waveserver.RemoteWaveletContainerImpl$3: void <init>(org.waveprotocol.box.server.waveserver.RemoteWaveletContainerImpl,java.lang.String,org.waveprotocol.wave.federation.WaveletFederationProvider,org.waveprotocol.box.server.waveserver.CertificateManager,com.google.common.util.concurrent.SettableFuture)>(r7, r71, r68, r75, r17);

        interfaceinvoke r68.<org.waveprotocol.wave.federation.WaveletFederationProvider: void requestHistory(org.waveprotocol.wave.model.id.WaveletName,java.lang.String,org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion,org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion,long,org.waveprotocol.wave.federation.WaveletFederationProvider$HistoryResponseListener)>($r70, r71, $r72, $r73, -1L, $r148);

        z4 = 1;

        goto label31;

     label19:
        $r69 = <org.waveprotocol.box.server.waveserver.RemoteWaveletContainerImpl: org.waveprotocol.wave.util.logging.Log LOG>;

        virtualinvoke $r69.<org.waveprotocol.wave.util.logging.Log: void severe(java.lang.String)>("History request resulted in non-contiguous deltas!");

        goto label31;

     label20:
        $l5 = virtualinvoke r137.<org.waveprotocol.wave.model.version.HashedVersion: long getVersion()>();

        $l6 = virtualinvoke r134.<org.waveprotocol.wave.model.version.HashedVersion: long getVersion()>();

        $b7 = $l5 cmp $l6;

        if $b7 != 0 goto label29;

        $z3 = virtualinvoke r137.<org.waveprotocol.wave.model.version.HashedVersion: boolean equals(java.lang.Object)>(r134);

        if $z3 != 0 goto label21;

        virtualinvoke r7.<org.waveprotocol.box.server.waveserver.RemoteWaveletContainerImpl: void markStateCorrupted()>();

        $r150 = new org.waveprotocol.box.server.waveserver.WaveServerException;

        $r149 = new java.lang.StringBuilder;

        specialinvoke $r149.<java.lang.StringBuilder: void <init>()>();

        $r54 = virtualinvoke $r149.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Incoming delta applied at version ");

        $l16 = virtualinvoke r137.<org.waveprotocol.wave.model.version.HashedVersion: long getVersion()>();

        $r55 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l16);

        $r56 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not applied to the correct hash");

        $r57 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r150.<org.waveprotocol.box.server.waveserver.WaveServerException: void <init>(java.lang.String)>($r57);

        throw $r150;

     label21:
        $r29 = <org.waveprotocol.box.server.waveserver.RemoteWaveletContainerImpl: org.waveprotocol.wave.util.logging.Log LOG>;

        $r151 = new java.lang.StringBuilder;

        specialinvoke $r151.<java.lang.StringBuilder: void <init>()>();

        $r30 = virtualinvoke $r151.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Applying delta for version ");

        $l8 = virtualinvoke r137.<org.waveprotocol.wave.model.version.HashedVersion: long getVersion()>();

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l8);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r29.<org.waveprotocol.wave.util.logging.Log: void info(java.lang.String)>($r32);

     label22:
        $r33 = specialinvoke r7.<org.waveprotocol.box.server.waveserver.RemoteWaveletContainerImpl: org.waveprotocol.box.server.waveserver.WaveletDeltaRecord transformAndApplyRemoteDelta(org.waveprotocol.box.server.waveserver.ByteStringMessage)>(r138);

        $r34 = virtualinvoke $r33.<org.waveprotocol.box.server.waveserver.WaveletDeltaRecord: org.waveprotocol.wave.model.version.HashedVersion getResultingVersion()>();

        $l9 = virtualinvoke $r34.<org.waveprotocol.wave.model.version.HashedVersion: long getVersion()>();

        $l10 = virtualinvoke r134.<org.waveprotocol.wave.model.version.HashedVersion: long getVersion()>();

        l11 = $l9 - $l10;

        $r35 = virtualinvoke r138.<org.waveprotocol.box.server.waveserver.ByteStringMessage: com.google.protobuf.Message getMessage()>();

        $r36 = (org.waveprotocol.wave.federation.Proto$ProtocolAppliedWaveletDelta) $r35;

        $i12 = virtualinvoke $r36.<org.waveprotocol.wave.federation.Proto$ProtocolAppliedWaveletDelta: int getOperationsApplied()>();

        $l13 = (long) $i12;

        $b14 = l11 cmp $l13;

        if $b14 == 0 goto label23;

        $r153 = new org.waveprotocol.wave.model.operation.OperationException;

        $r152 = new java.lang.StringBuilder;

        specialinvoke $r152.<java.lang.StringBuilder: void <init>()>();

        $r44 = virtualinvoke $r152.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Operations applied here do not match the authoritative server claim (got ");

        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l11);

        $r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", expected ");

        $r47 = virtualinvoke r138.<org.waveprotocol.box.server.waveserver.ByteStringMessage: com.google.protobuf.Message getMessage()>();

        $r48 = (org.waveprotocol.wave.federation.Proto$ProtocolAppliedWaveletDelta) $r47;

        $i15 = virtualinvoke $r48.<org.waveprotocol.wave.federation.Proto$ProtocolAppliedWaveletDelta: int getOperationsApplied()>();

        $r49 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i15);

        $r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r51 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r153.<org.waveprotocol.wave.model.operation.OperationException: void <init>(java.lang.String)>($r51);

        throw $r153;

     label23:
        virtualinvoke $r10.<com.google.common.collect.ImmutableList$Builder: com.google.common.collect.ImmutableList$Builder add(java.lang.Object)>($r33);

        $r38 = <org.waveprotocol.box.server.waveserver.RemoteWaveletContainerImpl: org.waveprotocol.wave.util.logging.Log LOG>;

        $r154 = new java.lang.StringBuilder;

        specialinvoke $r154.<java.lang.StringBuilder: void <init>()>();

        $r39 = virtualinvoke $r154.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Applied delta: ");

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r138);

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r38.<org.waveprotocol.wave.util.logging.Log: void fine(java.lang.String)>($r41);

     label24:
        goto label28;

     label25:
        $r108 := @caughtexception;

        virtualinvoke r7.<org.waveprotocol.box.server.waveserver.RemoteWaveletContainerImpl: void markStateCorrupted()>();

        $r155 = new org.waveprotocol.box.server.waveserver.WaveServerException;

        specialinvoke $r155.<org.waveprotocol.box.server.waveserver.WaveServerException: void <init>(java.lang.String,java.lang.Throwable)>("Couldn\'t apply authoritative delta", $r108);

        throw $r155;

     label26:
        $r106 := @caughtexception;

        virtualinvoke r7.<org.waveprotocol.box.server.waveserver.RemoteWaveletContainerImpl: void markStateCorrupted()>();

        $r156 = new org.waveprotocol.box.server.waveserver.WaveServerException;

        specialinvoke $r156.<org.waveprotocol.box.server.waveserver.WaveServerException: void <init>(java.lang.String,java.lang.Throwable)>("Couldn\'t apply authoritative delta", $r106);

        throw $r156;

     label27:
        $r104 := @caughtexception;

        virtualinvoke r7.<org.waveprotocol.box.server.waveserver.RemoteWaveletContainerImpl: void markStateCorrupted()>();

        $r157 = new org.waveprotocol.box.server.waveserver.WaveServerException;

        specialinvoke $r157.<org.waveprotocol.box.server.waveserver.WaveServerException: void <init>(java.lang.String,java.lang.Throwable)>("Couldn\'t apply authoritative delta", $r104);

        throw $r157;

     label28:
        r134 = virtualinvoke r7.<org.waveprotocol.box.server.waveserver.RemoteWaveletContainerImpl: org.waveprotocol.wave.model.version.HashedVersion getCurrentVersion()>();

        goto label30;

     label29:
        $r23 = <org.waveprotocol.box.server.waveserver.RemoteWaveletContainerImpl: org.waveprotocol.wave.util.logging.Log LOG>;

        $r158 = new java.lang.StringBuilder;

        specialinvoke $r158.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r158.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Got delta from the past: ");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r138);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r23.<org.waveprotocol.wave.util.logging.Log: void warning(java.lang.String)>($r26);

     label30:
        $r27 = r7.<org.waveprotocol.box.server.waveserver.RemoteWaveletContainerImpl: java.util.NavigableMap pendingDeltas>;

        interfaceinvoke $r27.<java.util.NavigableMap: java.lang.Object remove(java.lang.Object)>(r137);

        goto label18;

     label31:
        if z4 != 0 goto label32;

        $r15 = virtualinvoke $r10.<com.google.common.collect.ImmutableList$Builder: com.google.common.collect.ImmutableList build()>();

        $r16 = staticinvoke <com.google.common.collect.ImmutableSet: com.google.common.collect.ImmutableSet of()>();

        virtualinvoke r7.<org.waveprotocol.box.server.waveserver.RemoteWaveletContainerImpl: void notifyOfDeltas(com.google.common.collect.ImmutableList,com.google.common.collect.ImmutableSet)>($r15, $r16);

        virtualinvoke r17.<com.google.common.util.concurrent.SettableFuture: boolean set(java.lang.Object)>(null);

        goto label34;

     label32:
        $r12 = virtualinvoke $r10.<com.google.common.collect.ImmutableList$Builder: com.google.common.collect.ImmutableList build()>();

        $z2 = virtualinvoke $r12.<com.google.common.collect.ImmutableList: boolean isEmpty()>();

        if $z2 != 0 goto label33;

        $r14 = <org.waveprotocol.box.server.waveserver.RemoteWaveletContainerImpl: org.waveprotocol.wave.util.logging.Log LOG>;

        virtualinvoke $r14.<org.waveprotocol.wave.util.logging.Log: void severe(java.lang.String)>("History requested but non-empty result, non-contiguous deltas?");

        goto label34;

     label33:
        $r13 = <org.waveprotocol.box.server.waveserver.RemoteWaveletContainerImpl: org.waveprotocol.wave.util.logging.Log LOG>;

        virtualinvoke $r13.<org.waveprotocol.wave.util.logging.Log: void info(java.lang.String)>("History requested, ignoring callback");

     label34:
        virtualinvoke r7.<org.waveprotocol.box.server.waveserver.RemoteWaveletContainerImpl: void releaseWriteLock()>();

        goto label39;

     label35:
        $r99 := @caughtexception;

        $r100 = <org.waveprotocol.box.server.waveserver.RemoteWaveletContainerImpl: org.waveprotocol.wave.util.logging.Log LOG>;

        virtualinvoke $r100.<org.waveprotocol.wave.util.logging.Log: void warning(java.lang.String,java.lang.Throwable)>("Update failure", $r99);

        $r159 = new org.waveprotocol.wave.federation.FederationException;

        $r102 = virtualinvoke $r99.<org.waveprotocol.box.server.waveserver.WaveServerException: java.lang.String getMessage()>();

        $r103 = staticinvoke <org.waveprotocol.wave.federation.FederationErrors: org.waveprotocol.wave.federation.FederationErrorProto$FederationError badRequest(java.lang.String)>($r102);

        specialinvoke $r159.<org.waveprotocol.wave.federation.FederationException: void <init>(org.waveprotocol.wave.federation.FederationErrorProto$FederationError)>($r103);

        virtualinvoke r17.<com.google.common.util.concurrent.SettableFuture: boolean setException(java.lang.Throwable)>($r159);

     label36:
        virtualinvoke r7.<org.waveprotocol.box.server.waveserver.RemoteWaveletContainerImpl: void releaseWriteLock()>();

        goto label39;

     label37:
        $r98 := @caughtexception;

     label38:
        virtualinvoke r7.<org.waveprotocol.box.server.waveserver.RemoteWaveletContainerImpl: void releaseWriteLock()>();

        throw $r98;

     label39:
        return;

        catch org.waveprotocol.wave.crypto.SignatureException from label03 to label04 with label05;
        catch org.waveprotocol.wave.crypto.UnknownSignerException from label03 to label04 with label06;
        catch com.google.protobuf.InvalidProtocolBufferException from label10 to label11 with label12;
        catch com.google.protobuf.InvalidProtocolBufferException from label13 to label14 with label15;
        catch org.waveprotocol.wave.model.operation.OperationException from label22 to label24 with label25;
        catch com.google.protobuf.InvalidProtocolBufferException from label22 to label24 with label26;
        catch org.waveprotocol.box.server.waveserver.InvalidHashException from label22 to label24 with label27;
        catch org.waveprotocol.box.server.waveserver.WaveServerException from label01 to label34 with label35;
        catch java.lang.Throwable from label01 to label34 with label37;
        catch java.lang.Throwable from label35 to label36 with label37;
        catch java.lang.Throwable from label37 to label38 with label37;
    }

    private org.waveprotocol.box.server.waveserver.WaveletDeltaRecord transformAndApplyRemoteDelta(org.waveprotocol.box.server.waveserver.ByteStringMessage) throws org.waveprotocol.wave.model.operation.OperationException, org.waveprotocol.box.server.waveserver.AccessControlException, org.waveprotocol.box.server.waveserver.InvalidHashException, com.google.protobuf.InvalidProtocolBufferException, org.waveprotocol.box.server.waveserver.WaveServerException
    {
        org.waveprotocol.wave.federation.Proto$ProtocolAppliedWaveletDelta $r5, $r32;
        org.waveprotocol.box.server.waveserver.ByteStringMessage r0, $r8;
        org.waveprotocol.box.server.waveserver.WaveletDeltaRecord $r16;
        org.waveprotocol.wave.util.logging.Log $r33;
        org.waveprotocol.box.server.waveserver.RemoteWaveletContainerImpl r2;
        boolean $z0, $z1, $z2, $z3;
        org.waveprotocol.wave.federation.Proto$ProtocolSignedDelta $r6;
        org.waveprotocol.wave.federation.Proto$ProtocolWaveletDelta $r10;
        com.google.protobuf.ByteString $r7;
        java.lang.StringBuilder $r18, $r19, $r20, $r21, $r23, $r26, $r27, $r29;
        long $l0, $l1;
        org.waveprotocol.wave.model.version.HashedVersion $r1, $r3, $r13, $r14, $r15, $r22, $r28;
        int $i2;
        java.lang.String $r24, $r30;
        org.waveprotocol.wave.model.operation.wave.WaveletDelta $r11, $r12;
        com.google.protobuf.Message $r4, $r9, $r31;
        org.waveprotocol.box.server.waveserver.WaveServerException $r17, $r25;

        r2 := @this: org.waveprotocol.box.server.waveserver.RemoteWaveletContainerImpl;

        r0 := @parameter0: org.waveprotocol.box.server.waveserver.ByteStringMessage;

        $r1 = staticinvoke <org.waveprotocol.box.server.waveserver.AppliedDeltaUtil: org.waveprotocol.wave.model.version.HashedVersion getHashedVersionAppliedAt(org.waveprotocol.box.server.waveserver.ByteStringMessage)>(r0);

        $r3 = virtualinvoke r2.<org.waveprotocol.box.server.waveserver.RemoteWaveletContainerImpl: org.waveprotocol.wave.model.version.HashedVersion getCurrentVersion()>();

        $z0 = virtualinvoke $r1.<org.waveprotocol.wave.model.version.HashedVersion: boolean equals(java.lang.Object)>($r3);

        staticinvoke <com.google.common.base.Preconditions: void checkState(boolean,java.lang.Object)>($z0, "Applied delta must apply to current version");

        $r4 = virtualinvoke r0.<org.waveprotocol.box.server.waveserver.ByteStringMessage: com.google.protobuf.Message getMessage()>();

        $r5 = (org.waveprotocol.wave.federation.Proto$ProtocolAppliedWaveletDelta) $r4;

        $r6 = virtualinvoke $r5.<org.waveprotocol.wave.federation.Proto$ProtocolAppliedWaveletDelta: org.waveprotocol.wave.federation.Proto$ProtocolSignedDelta getSignedOriginalDelta()>();

        $r7 = virtualinvoke $r6.<org.waveprotocol.wave.federation.Proto$ProtocolSignedDelta: com.google.protobuf.ByteString getDelta()>();

        $r8 = staticinvoke <org.waveprotocol.box.server.waveserver.ByteStringMessage: org.waveprotocol.box.server.waveserver.ByteStringMessage parseProtocolWaveletDelta(com.google.protobuf.ByteString)>($r7);

        $r9 = virtualinvoke $r8.<org.waveprotocol.box.server.waveserver.ByteStringMessage: com.google.protobuf.Message getMessage()>();

        $r10 = (org.waveprotocol.wave.federation.Proto$ProtocolWaveletDelta) $r9;

        $r11 = staticinvoke <org.waveprotocol.box.server.common.CoreWaveletOperationSerializer: org.waveprotocol.wave.model.operation.wave.WaveletDelta deserialize(org.waveprotocol.wave.federation.Proto$ProtocolWaveletDelta)>($r10);

        $r12 = virtualinvoke r2.<org.waveprotocol.box.server.waveserver.RemoteWaveletContainerImpl: org.waveprotocol.wave.model.operation.wave.WaveletDelta maybeTransformSubmittedDelta(org.waveprotocol.wave.model.operation.wave.WaveletDelta)>($r11);

        $r13 = virtualinvoke $r12.<org.waveprotocol.wave.model.operation.wave.WaveletDelta: org.waveprotocol.wave.model.version.HashedVersion getTargetVersion()>();

        $r14 = virtualinvoke $r11.<org.waveprotocol.wave.model.operation.wave.WaveletDelta: org.waveprotocol.wave.model.version.HashedVersion getTargetVersion()>();

        $z1 = virtualinvoke $r13.<org.waveprotocol.wave.model.version.HashedVersion: boolean equals(java.lang.Object)>($r14);

        if $z1 == 0 goto label1;

        $r31 = virtualinvoke r0.<org.waveprotocol.box.server.waveserver.ByteStringMessage: com.google.protobuf.Message getMessage()>();

        $r32 = (org.waveprotocol.wave.federation.Proto$ProtocolAppliedWaveletDelta) $r31;

        $z3 = virtualinvoke $r32.<org.waveprotocol.wave.federation.Proto$ProtocolAppliedWaveletDelta: boolean hasHashedVersionAppliedAt()>();

        if $z3 == 0 goto label1;

        $r33 = <org.waveprotocol.box.server.waveserver.RemoteWaveletContainerImpl: org.waveprotocol.wave.util.logging.Log LOG>;

        virtualinvoke $r33.<org.waveprotocol.wave.util.logging.Log: void warning(java.lang.String)>("Hashes are the same but applied delta has hashed_version_applied_at");

     label1:
        $i2 = virtualinvoke $r12.<org.waveprotocol.wave.model.operation.wave.WaveletDelta: int size()>();

        if $i2 != 0 goto label2;

        virtualinvoke r2.<org.waveprotocol.box.server.waveserver.RemoteWaveletContainerImpl: void markStateCorrupted()>();

        $r25 = new org.waveprotocol.box.server.waveserver.WaveServerException;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t apply authoritative delta, it transformed away at version ");

        $r28 = virtualinvoke $r12.<org.waveprotocol.wave.model.operation.wave.WaveletDelta: org.waveprotocol.wave.model.version.HashedVersion getTargetVersion()>();

        $l1 = virtualinvoke $r28.<org.waveprotocol.wave.model.version.HashedVersion: long getVersion()>();

        $r29 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l1);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r25.<org.waveprotocol.box.server.waveserver.WaveServerException: void <init>(java.lang.String)>($r30);

        throw $r25;

     label2:
        $r15 = virtualinvoke $r12.<org.waveprotocol.wave.model.operation.wave.WaveletDelta: org.waveprotocol.wave.model.version.HashedVersion getTargetVersion()>();

        $z2 = virtualinvoke $r15.<org.waveprotocol.wave.model.version.HashedVersion: boolean equals(java.lang.Object)>($r1);

        if $z2 != 0 goto label3;

        virtualinvoke r2.<org.waveprotocol.box.server.waveserver.RemoteWaveletContainerImpl: void markStateCorrupted()>();

        $r17 = new org.waveprotocol.box.server.waveserver.WaveServerException;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t apply authoritative delta, it transformed to wrong version. Expected ");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", actual ");

        $r22 = virtualinvoke $r12.<org.waveprotocol.wave.model.operation.wave.WaveletDelta: org.waveprotocol.wave.model.version.HashedVersion getTargetVersion()>();

        $l0 = virtualinvoke $r22.<org.waveprotocol.wave.model.version.HashedVersion: long getVersion()>();

        $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r17.<org.waveprotocol.box.server.waveserver.WaveServerException: void <init>(java.lang.String)>($r24);

        throw $r17;

     label3:
        $r16 = virtualinvoke r2.<org.waveprotocol.box.server.waveserver.RemoteWaveletContainerImpl: org.waveprotocol.box.server.waveserver.WaveletDeltaRecord applyDelta(org.waveprotocol.box.server.waveserver.ByteStringMessage,org.waveprotocol.wave.model.operation.wave.WaveletDelta)>(r0, $r12);

        return $r16;
    }

    static void access$000(org.waveprotocol.box.server.waveserver.RemoteWaveletContainerImpl, java.util.List, java.lang.String, org.waveprotocol.wave.federation.WaveletFederationProvider, org.waveprotocol.box.server.waveserver.CertificateManager, com.google.common.util.concurrent.SettableFuture)
    {
        org.waveprotocol.box.server.waveserver.CertificateManager r4;
        java.util.List r1;
        org.waveprotocol.wave.federation.WaveletFederationProvider r3;
        org.waveprotocol.box.server.waveserver.RemoteWaveletContainerImpl r0;
        java.lang.String r2;
        com.google.common.util.concurrent.SettableFuture r5;

        r0 := @parameter0: org.waveprotocol.box.server.waveserver.RemoteWaveletContainerImpl;

        r1 := @parameter1: java.util.List;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: org.waveprotocol.wave.federation.WaveletFederationProvider;

        r4 := @parameter4: org.waveprotocol.box.server.waveserver.CertificateManager;

        r5 := @parameter5: com.google.common.util.concurrent.SettableFuture;

        specialinvoke r0.<org.waveprotocol.box.server.waveserver.RemoteWaveletContainerImpl: void internalUpdateAfterSignerInfoRetrieval(java.util.List,java.lang.String,org.waveprotocol.wave.federation.WaveletFederationProvider,org.waveprotocol.box.server.waveserver.CertificateManager,com.google.common.util.concurrent.SettableFuture)>(r1, r2, r3, r4, r5);

        return;
    }

    static org.waveprotocol.wave.util.logging.Log access$100()
    {
        org.waveprotocol.wave.util.logging.Log $r0;

        $r0 = <org.waveprotocol.box.server.waveserver.RemoteWaveletContainerImpl: org.waveprotocol.wave.util.logging.Log LOG>;

        return $r0;
    }

    static void access$200(org.waveprotocol.box.server.waveserver.RemoteWaveletContainerImpl, java.util.List, java.lang.String, org.waveprotocol.wave.federation.WaveletFederationProvider, org.waveprotocol.box.server.waveserver.CertificateManager, com.google.common.util.concurrent.SettableFuture)
    {
        org.waveprotocol.box.server.waveserver.CertificateManager r4;
        java.util.List r1;
        org.waveprotocol.wave.federation.WaveletFederationProvider r3;
        org.waveprotocol.box.server.waveserver.RemoteWaveletContainerImpl r0;
        java.lang.String r2;
        com.google.common.util.concurrent.SettableFuture r5;

        r0 := @parameter0: org.waveprotocol.box.server.waveserver.RemoteWaveletContainerImpl;

        r1 := @parameter1: java.util.List;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: org.waveprotocol.wave.federation.WaveletFederationProvider;

        r4 := @parameter4: org.waveprotocol.box.server.waveserver.CertificateManager;

        r5 := @parameter5: com.google.common.util.concurrent.SettableFuture;

        specialinvoke r0.<org.waveprotocol.box.server.waveserver.RemoteWaveletContainerImpl: void internalUpdate(java.util.List,java.lang.String,org.waveprotocol.wave.federation.WaveletFederationProvider,org.waveprotocol.box.server.waveserver.CertificateManager,com.google.common.util.concurrent.SettableFuture)>(r1, r2, r3, r4, r5);

        return;
    }

    static void <clinit>()
    {
        org.waveprotocol.wave.util.logging.Log $r0;

        $r0 = staticinvoke <org.waveprotocol.wave.util.logging.Log: org.waveprotocol.wave.util.logging.Log get(java.lang.Class)>(class "Lorg/waveprotocol/box/server/waveserver/RemoteWaveletContainerImpl;");

        <org.waveprotocol.box.server.waveserver.RemoteWaveletContainerImpl: org.waveprotocol.wave.util.logging.Log LOG> = $r0;

        return;
    }
}
