public final class org.apache.commons.httpclient.auth.AuthChallengeParser extends java.lang.Object
{

    public void <init>()
    {
        org.apache.commons.httpclient.auth.AuthChallengeParser r0;

        r0 := @this: org.apache.commons.httpclient.auth.AuthChallengeParser;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.String extractScheme(java.lang.String) throws org.apache.commons.httpclient.auth.MalformedChallengeException
    {
        java.lang.IllegalArgumentException $r9;
        java.lang.StringBuffer $r4, $r5, $r10;
        org.apache.commons.httpclient.auth.MalformedChallengeException $r11;
        int $i0, $i2;
        java.lang.String r0, $r1, $r6, r8;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        $r9 = new java.lang.IllegalArgumentException;

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Challenge may not be null");

        throw $r9;

     label1:
        $i0 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(32);

        $i2 = (int) -1;

        if $i0 != $i2 goto label2;

        r8 = r0;

        goto label3;

     label2:
        r8 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

     label3:
        $z0 = virtualinvoke r8.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z0 == 0 goto label4;

        $r11 = new org.apache.commons.httpclient.auth.MalformedChallengeException;

        $r10 = new java.lang.StringBuffer;

        specialinvoke $r10.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Invalid challenge: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r11.<org.apache.commons.httpclient.auth.MalformedChallengeException: void <init>(java.lang.String)>($r6);

        throw $r11;

     label4:
        $r1 = virtualinvoke r8.<java.lang.String: java.lang.String toLowerCase()>();

        return $r1;
    }

    public static java.util.Map extractParams(java.lang.String) throws org.apache.commons.httpclient.auth.MalformedChallengeException
    {
        java.util.HashMap $r19;
        java.lang.StringBuffer $r12, $r13, $r17;
        org.apache.commons.httpclient.NameValuePair r6;
        int $i0, $i1, $i2, $i3, i4, $i6;
        java.lang.String r0, $r3, $r7, $r8, $r9, $r14;
        java.lang.IllegalArgumentException $r16;
        java.util.List $r4;
        org.apache.commons.httpclient.auth.MalformedChallengeException $r18;
        java.lang.Object $r5;
        org.apache.commons.httpclient.util.ParameterParser $r20;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        $r16 = new java.lang.IllegalArgumentException;

        specialinvoke $r16.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Challenge may not be null");

        throw $r16;

     label1:
        $i0 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(32);

        $i6 = (int) -1;

        if $i0 != $i6 goto label2;

        $r18 = new org.apache.commons.httpclient.auth.MalformedChallengeException;

        $r17 = new java.lang.StringBuffer;

        specialinvoke $r17.<java.lang.StringBuffer: void <init>()>();

        $r12 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Invalid challenge: ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r0);

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r18.<org.apache.commons.httpclient.auth.MalformedChallengeException: void <init>(java.lang.String)>($r14);

        throw $r18;

     label2:
        $r19 = new java.util.HashMap;

        specialinvoke $r19.<java.util.HashMap: void <init>()>();

        $r20 = new org.apache.commons.httpclient.util.ParameterParser;

        specialinvoke $r20.<org.apache.commons.httpclient.util.ParameterParser: void <init>()>();

        $i1 = $i0 + 1;

        $i2 = virtualinvoke r0.<java.lang.String: int length()>();

        $r3 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>($i1, $i2);

        $r4 = virtualinvoke $r20.<org.apache.commons.httpclient.util.ParameterParser: java.util.List parse(java.lang.String,char)>($r3, 44);

        i4 = 0;

     label3:
        $i3 = interfaceinvoke $r4.<java.util.List: int size()>();

        if i4 >= $i3 goto label4;

        $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>(i4);

        r6 = (org.apache.commons.httpclient.NameValuePair) $r5;

        $r7 = virtualinvoke r6.<org.apache.commons.httpclient.NameValuePair: java.lang.String getName()>();

        $r8 = virtualinvoke $r7.<java.lang.String: java.lang.String toLowerCase()>();

        $r9 = virtualinvoke r6.<org.apache.commons.httpclient.NameValuePair: java.lang.String getValue()>();

        interfaceinvoke $r19.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r8, $r9);

        i4 = i4 + 1;

        goto label3;

     label4:
        return $r19;
    }

    public static java.util.Map parseChallenges(org.apache.commons.httpclient.Header[]) throws org.apache.commons.httpclient.auth.MalformedChallengeException
    {
        java.util.HashMap $r1;
        java.lang.IllegalArgumentException $r5;
        org.apache.commons.httpclient.Header $r2;
        int $i0, $i1, i2;
        java.lang.String $r3, $r4;
        org.apache.commons.httpclient.Header[] r0;

        r0 := @parameter0: org.apache.commons.httpclient.Header[];

        if r0 != null goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Array of challenges may not be null");

        throw $r5;

     label1:
        $r1 = new java.util.HashMap;

        $i0 = lengthof r0;

        specialinvoke $r1.<java.util.HashMap: void <init>(int)>($i0);

        i2 = 0;

     label2:
        $i1 = lengthof r0;

        if i2 >= $i1 goto label3;

        $r2 = r0[i2];

        $r3 = virtualinvoke $r2.<org.apache.commons.httpclient.Header: java.lang.String getValue()>();

        $r4 = staticinvoke <org.apache.commons.httpclient.auth.AuthChallengeParser: java.lang.String extractScheme(java.lang.String)>($r3);

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, $r3);

        i2 = i2 + 1;

        goto label2;

     label3:
        return $r1;
    }
}
