abstract class nu.xom.TextWriter extends java.lang.Object
{
    protected final java.io.Writer out;
    protected final java.lang.String encoding;
    private java.lang.String lineSeparator;
    boolean lineSeparatorSet;
    private boolean inDocType;
    private int maxLength;
    private int indent;
    private java.lang.String indentString;
    protected int column;
    private boolean preserveSpace;
    protected boolean normalize;
    protected boolean lastCharacterWasSpace;
    protected boolean skipFollowingLinefeed;
    private char highSurrogate;
    protected boolean justBroke;
    private int fakeIndents;
    private static final java.lang.String _128_SPACES;
    private static final int _128;

    protected void <init>(java.io.Writer, java.lang.String)
    {
        java.io.Writer r1;
        nu.xom.TextWriter r0;
        java.lang.String r2;

        r0 := @this: nu.xom.TextWriter;

        r1 := @parameter0: java.io.Writer;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<nu.xom.TextWriter: java.lang.String lineSeparator> = "\r\n";

        r0.<nu.xom.TextWriter: boolean lineSeparatorSet> = 0;

        r0.<nu.xom.TextWriter: boolean inDocType> = 0;

        r0.<nu.xom.TextWriter: int maxLength> = 0;

        r0.<nu.xom.TextWriter: int indent> = 0;

        r0.<nu.xom.TextWriter: java.lang.String indentString> = "";

        r0.<nu.xom.TextWriter: int column> = 0;

        r0.<nu.xom.TextWriter: boolean preserveSpace> = 0;

        r0.<nu.xom.TextWriter: boolean normalize> = 0;

        r0.<nu.xom.TextWriter: boolean lastCharacterWasSpace> = 0;

        r0.<nu.xom.TextWriter: boolean skipFollowingLinefeed> = 0;

        r0.<nu.xom.TextWriter: boolean justBroke> = 0;

        r0.<nu.xom.TextWriter: int fakeIndents> = 0;

        r0.<nu.xom.TextWriter: java.io.Writer out> = r1;

        r0.<nu.xom.TextWriter: java.lang.String encoding> = r2;

        return;
    }

    void reset()
    {
        nu.xom.TextWriter r0;

        r0 := @this: nu.xom.TextWriter;

        r0.<nu.xom.TextWriter: int column> = 0;

        r0.<nu.xom.TextWriter: int fakeIndents> = 0;

        r0.<nu.xom.TextWriter: boolean lastCharacterWasSpace> = 0;

        r0.<nu.xom.TextWriter: boolean skipFollowingLinefeed> = 0;

        return;
    }

    private boolean isHighSurrogate(int)
    {
        nu.xom.TextWriter r0;
        int i0, $i2, $i4;
        boolean $z0;

        r0 := @this: nu.xom.TextWriter;

        i0 := @parameter0: int;

        $i2 = (int) 55296;

        if i0 < $i2 goto label1;

        $i4 = (int) 56319;

        if i0 > $i4 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private boolean isLowSurrogate(int)
    {
        nu.xom.TextWriter r0;
        int i0, $i2, $i4;
        boolean $z0;

        r0 := @this: nu.xom.TextWriter;

        i0 := @parameter0: int;

        $i2 = (int) 56320;

        if i0 < $i2 goto label1;

        $i4 = (int) 57343;

        if i0 > $i4 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    final void writePCDATA(char) throws java.io.IOException
    {
        nu.xom.TextWriter r0;
        int $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        boolean $z0, $z1, $z2;
        char c0;
        java.io.Writer $r1, $r2, $r3, $r5;
        nu.xom.XMLException $r6;

        r0 := @this: nu.xom.TextWriter;

        c0 := @parameter0: char;

        $i9 = (int) c0;

        tableswitch($i9)
        {
            case 13: goto label01;
            case 14: goto label04;
            case 15: goto label04;
            case 16: goto label04;
            case 17: goto label04;
            case 18: goto label04;
            case 19: goto label04;
            case 20: goto label04;
            case 21: goto label04;
            case 22: goto label04;
            case 23: goto label04;
            case 24: goto label04;
            case 25: goto label04;
            case 26: goto label04;
            case 27: goto label04;
            case 28: goto label04;
            case 29: goto label04;
            case 30: goto label04;
            case 31: goto label04;
            case 32: goto label05;
            case 33: goto label06;
            case 34: goto label07;
            case 35: goto label08;
            case 36: goto label09;
            case 37: goto label10;
            case 38: goto label11;
            case 39: goto label12;
            case 40: goto label13;
            case 41: goto label14;
            case 42: goto label15;
            case 43: goto label16;
            case 44: goto label17;
            case 45: goto label18;
            case 46: goto label19;
            case 47: goto label20;
            case 48: goto label21;
            case 49: goto label22;
            case 50: goto label23;
            case 51: goto label24;
            case 52: goto label25;
            case 53: goto label26;
            case 54: goto label27;
            case 55: goto label28;
            case 56: goto label29;
            case 57: goto label30;
            case 58: goto label31;
            case 59: goto label32;
            case 60: goto label33;
            case 61: goto label34;
            case 62: goto label35;
            default: goto label36;
        };

     label01:
        $z0 = specialinvoke r0.<nu.xom.TextWriter: boolean adjustingWhiteSpace()>();

        if $z0 != 0 goto label02;

        $z1 = r0.<nu.xom.TextWriter: boolean lineSeparatorSet>;

        if $z1 != 0 goto label02;

        $r5 = r0.<nu.xom.TextWriter: java.io.Writer out>;

        virtualinvoke $r5.<java.io.Writer: void write(java.lang.String)>("&#x0D;");

        $i7 = r0.<nu.xom.TextWriter: int column>;

        $i8 = $i7 + 6;

        r0.<nu.xom.TextWriter: int column> = $i8;

        r0.<nu.xom.TextWriter: boolean justBroke> = 0;

        goto label03;

     label02:
        virtualinvoke r0.<nu.xom.TextWriter: void breakLine()>();

        r0.<nu.xom.TextWriter: boolean lastCharacterWasSpace> = 1;

     label03:
        r0.<nu.xom.TextWriter: boolean skipFollowingLinefeed> = 1;

        goto label38;

     label04:
        $r6 = new nu.xom.XMLException;

        specialinvoke $r6.<nu.xom.XMLException: void <init>(java.lang.String)>("Bad character snuck into document");

        throw $r6;

     label05:
        virtualinvoke r0.<nu.xom.TextWriter: void write(char)>(c0);

        goto label38;

     label06:
        virtualinvoke r0.<nu.xom.TextWriter: void write(char)>(c0);

        goto label38;

     label07:
        virtualinvoke r0.<nu.xom.TextWriter: void write(char)>(c0);

        goto label38;

     label08:
        virtualinvoke r0.<nu.xom.TextWriter: void write(char)>(c0);

        goto label38;

     label09:
        virtualinvoke r0.<nu.xom.TextWriter: void write(char)>(c0);

        goto label38;

     label10:
        virtualinvoke r0.<nu.xom.TextWriter: void write(char)>(c0);

        goto label38;

     label11:
        $r3 = r0.<nu.xom.TextWriter: java.io.Writer out>;

        virtualinvoke $r3.<java.io.Writer: void write(java.lang.String)>("&amp;");

        $i5 = r0.<nu.xom.TextWriter: int column>;

        $i6 = $i5 + 5;

        r0.<nu.xom.TextWriter: int column> = $i6;

        r0.<nu.xom.TextWriter: boolean lastCharacterWasSpace> = 0;

        r0.<nu.xom.TextWriter: boolean skipFollowingLinefeed> = 0;

        r0.<nu.xom.TextWriter: boolean justBroke> = 0;

        goto label38;

     label12:
        virtualinvoke r0.<nu.xom.TextWriter: void write(char)>(c0);

        goto label38;

     label13:
        virtualinvoke r0.<nu.xom.TextWriter: void write(char)>(c0);

        goto label38;

     label14:
        virtualinvoke r0.<nu.xom.TextWriter: void write(char)>(c0);

        goto label38;

     label15:
        virtualinvoke r0.<nu.xom.TextWriter: void write(char)>(c0);

        goto label38;

     label16:
        virtualinvoke r0.<nu.xom.TextWriter: void write(char)>(c0);

        goto label38;

     label17:
        virtualinvoke r0.<nu.xom.TextWriter: void write(char)>(c0);

        goto label38;

     label18:
        virtualinvoke r0.<nu.xom.TextWriter: void write(char)>(c0);

        goto label38;

     label19:
        virtualinvoke r0.<nu.xom.TextWriter: void write(char)>(c0);

        goto label38;

     label20:
        virtualinvoke r0.<nu.xom.TextWriter: void write(char)>(c0);

        goto label38;

     label21:
        virtualinvoke r0.<nu.xom.TextWriter: void write(char)>(c0);

        goto label38;

     label22:
        virtualinvoke r0.<nu.xom.TextWriter: void write(char)>(c0);

        goto label38;

     label23:
        virtualinvoke r0.<nu.xom.TextWriter: void write(char)>(c0);

        goto label38;

     label24:
        virtualinvoke r0.<nu.xom.TextWriter: void write(char)>(c0);

        goto label38;

     label25:
        virtualinvoke r0.<nu.xom.TextWriter: void write(char)>(c0);

        goto label38;

     label26:
        virtualinvoke r0.<nu.xom.TextWriter: void write(char)>(c0);

        goto label38;

     label27:
        virtualinvoke r0.<nu.xom.TextWriter: void write(char)>(c0);

        goto label38;

     label28:
        virtualinvoke r0.<nu.xom.TextWriter: void write(char)>(c0);

        goto label38;

     label29:
        virtualinvoke r0.<nu.xom.TextWriter: void write(char)>(c0);

        goto label38;

     label30:
        virtualinvoke r0.<nu.xom.TextWriter: void write(char)>(c0);

        goto label38;

     label31:
        virtualinvoke r0.<nu.xom.TextWriter: void write(char)>(c0);

        goto label38;

     label32:
        virtualinvoke r0.<nu.xom.TextWriter: void write(char)>(c0);

        goto label38;

     label33:
        $r2 = r0.<nu.xom.TextWriter: java.io.Writer out>;

        virtualinvoke $r2.<java.io.Writer: void write(java.lang.String)>("&lt;");

        $i3 = r0.<nu.xom.TextWriter: int column>;

        $i4 = $i3 + 4;

        r0.<nu.xom.TextWriter: int column> = $i4;

        r0.<nu.xom.TextWriter: boolean lastCharacterWasSpace> = 0;

        r0.<nu.xom.TextWriter: boolean skipFollowingLinefeed> = 0;

        r0.<nu.xom.TextWriter: boolean justBroke> = 0;

        goto label38;

     label34:
        virtualinvoke r0.<nu.xom.TextWriter: void write(char)>(c0);

        goto label38;

     label35:
        $r1 = r0.<nu.xom.TextWriter: java.io.Writer out>;

        virtualinvoke $r1.<java.io.Writer: void write(java.lang.String)>("&gt;");

        $i1 = r0.<nu.xom.TextWriter: int column>;

        $i2 = $i1 + 4;

        r0.<nu.xom.TextWriter: int column> = $i2;

        r0.<nu.xom.TextWriter: boolean lastCharacterWasSpace> = 0;

        r0.<nu.xom.TextWriter: boolean skipFollowingLinefeed> = 0;

        r0.<nu.xom.TextWriter: boolean justBroke> = 0;

        goto label38;

     label36:
        $z2 = virtualinvoke r0.<nu.xom.TextWriter: boolean needsEscaping(char)>(c0);

        if $z2 == 0 goto label37;

        specialinvoke r0.<nu.xom.TextWriter: void writeEscapedChar(char)>(c0);

        goto label38;

     label37:
        virtualinvoke r0.<nu.xom.TextWriter: void write(char)>(c0);

     label38:
        return;
    }

    private void writeEscapedChar(char) throws java.io.IOException
    {
        nu.xom.TextWriter r0;
        java.lang.StringBuffer $r2, $r5, $r6, $r10, $r13, $r14, $r17, $r18;
        int $i1, $i2, $i3, $i5, $i6, $i7, $i8, $i9, $i10, $i11;
        java.lang.String $r3, $r4, $r7, $r11, $r12, $r15;
        boolean $z0, $z1;
        char c0, $c4;
        java.io.Writer $r8, $r16;

        r0 := @this: nu.xom.TextWriter;

        c0 := @parameter0: char;

        $i9 = (int) c0;

        $z0 = specialinvoke r0.<nu.xom.TextWriter: boolean isHighSurrogate(int)>($i9);

        if $z0 == 0 goto label1;

        r0.<nu.xom.TextWriter: char highSurrogate> = c0;

        goto label3;

     label1:
        $i10 = (int) c0;

        $z1 = specialinvoke r0.<nu.xom.TextWriter: boolean isLowSurrogate(int)>($i10);

        if $z1 == 0 goto label2;

        $c4 = r0.<nu.xom.TextWriter: char highSurrogate>;

        $i5 = staticinvoke <nu.xom.UnicodeUtil: int combineSurrogatePair(char,char)>($c4, c0);

        $r17 = new java.lang.StringBuffer;

        specialinvoke $r17.<java.lang.StringBuffer: void <init>()>();

        $r10 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("&#x");

        $r11 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i5);

        $r12 = virtualinvoke $r11.<java.lang.String: java.lang.String toUpperCase()>();

        $r13 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(59);

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.String toString()>();

        $r16 = r0.<nu.xom.TextWriter: java.io.Writer out>;

        virtualinvoke $r16.<java.io.Writer: void write(java.lang.String)>($r15);

        $i6 = r0.<nu.xom.TextWriter: int column>;

        $i7 = virtualinvoke $r15.<java.lang.String: int length()>();

        $i8 = $i6 + $i7;

        r0.<nu.xom.TextWriter: int column> = $i8;

        r0.<nu.xom.TextWriter: boolean lastCharacterWasSpace> = 0;

        r0.<nu.xom.TextWriter: boolean skipFollowingLinefeed> = 0;

        r0.<nu.xom.TextWriter: boolean justBroke> = 0;

        goto label3;

     label2:
        $r18 = new java.lang.StringBuffer;

        specialinvoke $r18.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("&#x");

        $i11 = (int) c0;

        $r3 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i11);

        $r4 = virtualinvoke $r3.<java.lang.String: java.lang.String toUpperCase()>();

        $r5 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(59);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        $r8 = r0.<nu.xom.TextWriter: java.io.Writer out>;

        virtualinvoke $r8.<java.io.Writer: void write(java.lang.String)>($r7);

        $i1 = r0.<nu.xom.TextWriter: int column>;

        $i2 = virtualinvoke $r7.<java.lang.String: int length()>();

        $i3 = $i1 + $i2;

        r0.<nu.xom.TextWriter: int column> = $i3;

        r0.<nu.xom.TextWriter: boolean lastCharacterWasSpace> = 0;

        r0.<nu.xom.TextWriter: boolean skipFollowingLinefeed> = 0;

        r0.<nu.xom.TextWriter: boolean justBroke> = 0;

     label3:
        return;
    }

    private boolean adjustingWhiteSpace()
    {
        nu.xom.TextWriter r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: nu.xom.TextWriter;

        $i0 = r0.<nu.xom.TextWriter: int maxLength>;

        if $i0 > 0 goto label1;

        $i1 = r0.<nu.xom.TextWriter: int indent>;

        if $i1 <= 0 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    final void writeAttributeValue(char) throws java.io.IOException
    {
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.io.Writer $r1, $r2, $r3, $r4, $r6, $r7, $r9, $r10, $r11;
        nu.xom.XMLException $r12, $r13;
        nu.xom.TextWriter r0;
        int $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15;
        char c0;

        r0 := @this: nu.xom.TextWriter;

        c0 := @parameter0: char;

        $i15 = (int) c0;

        tableswitch($i15)
        {
            case 9: goto label01;
            case 10: goto label03;
            case 11: goto label08;
            case 12: goto label08;
            case 13: goto label09;
            case 14: goto label12;
            case 15: goto label12;
            case 16: goto label12;
            case 17: goto label12;
            case 18: goto label12;
            case 19: goto label12;
            case 20: goto label12;
            case 21: goto label12;
            case 22: goto label12;
            case 23: goto label12;
            case 24: goto label12;
            case 25: goto label12;
            case 26: goto label12;
            case 27: goto label12;
            case 28: goto label12;
            case 29: goto label12;
            case 30: goto label12;
            case 31: goto label12;
            case 32: goto label13;
            case 33: goto label14;
            case 34: goto label15;
            case 35: goto label16;
            case 36: goto label17;
            case 37: goto label18;
            case 38: goto label19;
            case 39: goto label20;
            case 40: goto label21;
            case 41: goto label22;
            case 42: goto label23;
            case 43: goto label24;
            case 44: goto label25;
            case 45: goto label26;
            case 46: goto label27;
            case 47: goto label28;
            case 48: goto label29;
            case 49: goto label30;
            case 50: goto label31;
            case 51: goto label32;
            case 52: goto label33;
            case 53: goto label34;
            case 54: goto label35;
            case 55: goto label36;
            case 56: goto label37;
            case 57: goto label38;
            case 58: goto label39;
            case 59: goto label40;
            case 60: goto label41;
            case 61: goto label42;
            case 62: goto label43;
            default: goto label44;
        };

     label01:
        $z5 = specialinvoke r0.<nu.xom.TextWriter: boolean adjustingWhiteSpace()>();

        if $z5 != 0 goto label02;

        $r11 = r0.<nu.xom.TextWriter: java.io.Writer out>;

        virtualinvoke $r11.<java.io.Writer: void write(java.lang.String)>("&#x09;");

        $i13 = r0.<nu.xom.TextWriter: int column>;

        $i14 = $i13 + 6;

        r0.<nu.xom.TextWriter: int column> = $i14;

        r0.<nu.xom.TextWriter: boolean lastCharacterWasSpace> = 1;

        r0.<nu.xom.TextWriter: boolean skipFollowingLinefeed> = 0;

        r0.<nu.xom.TextWriter: boolean justBroke> = 0;

        goto label46;

     label02:
        virtualinvoke r0.<nu.xom.TextWriter: void write(char)>(32);

        goto label46;

     label03:
        $z2 = r0.<nu.xom.TextWriter: boolean skipFollowingLinefeed>;

        if $z2 == 0 goto label04;

        r0.<nu.xom.TextWriter: boolean skipFollowingLinefeed> = 0;

        return;

     label04:
        $z3 = specialinvoke r0.<nu.xom.TextWriter: boolean adjustingWhiteSpace()>();

        if $z3 == 0 goto label05;

        $r10 = r0.<nu.xom.TextWriter: java.io.Writer out>;

        virtualinvoke $r10.<java.io.Writer: void write(java.lang.String)>(" ");

        r0.<nu.xom.TextWriter: boolean lastCharacterWasSpace> = 1;

        r0.<nu.xom.TextWriter: boolean justBroke> = 0;

        goto label46;

     label05:
        $z4 = r0.<nu.xom.TextWriter: boolean lineSeparatorSet>;

        if $z4 == 0 goto label06;

        specialinvoke r0.<nu.xom.TextWriter: void escapeBreakLine()>();

        goto label07;

     label06:
        $r9 = r0.<nu.xom.TextWriter: java.io.Writer out>;

        virtualinvoke $r9.<java.io.Writer: void write(java.lang.String)>("&#x0A;");

        $i11 = r0.<nu.xom.TextWriter: int column>;

        $i12 = $i11 + 6;

        r0.<nu.xom.TextWriter: int column> = $i12;

        r0.<nu.xom.TextWriter: boolean justBroke> = 0;

     label07:
        r0.<nu.xom.TextWriter: boolean lastCharacterWasSpace> = 1;

        goto label46;

     label08:
        $r12 = new nu.xom.XMLException;

        specialinvoke $r12.<nu.xom.XMLException: void <init>(java.lang.String)>("Bad character snuck into document");

        throw $r12;

     label09:
        $z0 = specialinvoke r0.<nu.xom.TextWriter: boolean adjustingWhiteSpace()>();

        if $z0 == 0 goto label10;

        $r7 = r0.<nu.xom.TextWriter: java.io.Writer out>;

        virtualinvoke $r7.<java.io.Writer: void write(java.lang.String)>(" ");

        r0.<nu.xom.TextWriter: boolean lastCharacterWasSpace> = 1;

        r0.<nu.xom.TextWriter: boolean skipFollowingLinefeed> = 1;

        r0.<nu.xom.TextWriter: boolean justBroke> = 0;

        goto label46;

     label10:
        $z1 = r0.<nu.xom.TextWriter: boolean lineSeparatorSet>;

        if $z1 == 0 goto label11;

        specialinvoke r0.<nu.xom.TextWriter: void escapeBreakLine()>();

        r0.<nu.xom.TextWriter: boolean skipFollowingLinefeed> = 1;

        goto label46;

     label11:
        $r6 = r0.<nu.xom.TextWriter: java.io.Writer out>;

        virtualinvoke $r6.<java.io.Writer: void write(java.lang.String)>("&#x0D;");

        $i9 = r0.<nu.xom.TextWriter: int column>;

        $i10 = $i9 + 6;

        r0.<nu.xom.TextWriter: int column> = $i10;

        r0.<nu.xom.TextWriter: boolean justBroke> = 0;

        goto label46;

     label12:
        $r13 = new nu.xom.XMLException;

        specialinvoke $r13.<nu.xom.XMLException: void <init>(java.lang.String)>("Bad character snuck into document");

        throw $r13;

     label13:
        virtualinvoke r0.<nu.xom.TextWriter: void write(char)>(c0);

        goto label46;

     label14:
        virtualinvoke r0.<nu.xom.TextWriter: void write(char)>(c0);

        goto label46;

     label15:
        $r4 = r0.<nu.xom.TextWriter: java.io.Writer out>;

        virtualinvoke $r4.<java.io.Writer: void write(java.lang.String)>("&quot;");

        $i7 = r0.<nu.xom.TextWriter: int column>;

        $i8 = $i7 + 6;

        r0.<nu.xom.TextWriter: int column> = $i8;

        r0.<nu.xom.TextWriter: boolean lastCharacterWasSpace> = 0;

        r0.<nu.xom.TextWriter: boolean skipFollowingLinefeed> = 0;

        r0.<nu.xom.TextWriter: boolean justBroke> = 0;

        goto label46;

     label16:
        virtualinvoke r0.<nu.xom.TextWriter: void write(char)>(c0);

        goto label46;

     label17:
        virtualinvoke r0.<nu.xom.TextWriter: void write(char)>(c0);

        goto label46;

     label18:
        virtualinvoke r0.<nu.xom.TextWriter: void write(char)>(c0);

        goto label46;

     label19:
        $r3 = r0.<nu.xom.TextWriter: java.io.Writer out>;

        virtualinvoke $r3.<java.io.Writer: void write(java.lang.String)>("&amp;");

        $i5 = r0.<nu.xom.TextWriter: int column>;

        $i6 = $i5 + 5;

        r0.<nu.xom.TextWriter: int column> = $i6;

        r0.<nu.xom.TextWriter: boolean lastCharacterWasSpace> = 0;

        r0.<nu.xom.TextWriter: boolean skipFollowingLinefeed> = 0;

        r0.<nu.xom.TextWriter: boolean justBroke> = 0;

        goto label46;

     label20:
        virtualinvoke r0.<nu.xom.TextWriter: void write(char)>(c0);

        goto label46;

     label21:
        virtualinvoke r0.<nu.xom.TextWriter: void write(char)>(c0);

        goto label46;

     label22:
        virtualinvoke r0.<nu.xom.TextWriter: void write(char)>(c0);

        goto label46;

     label23:
        virtualinvoke r0.<nu.xom.TextWriter: void write(char)>(c0);

        goto label46;

     label24:
        virtualinvoke r0.<nu.xom.TextWriter: void write(char)>(c0);

        goto label46;

     label25:
        virtualinvoke r0.<nu.xom.TextWriter: void write(char)>(c0);

        goto label46;

     label26:
        virtualinvoke r0.<nu.xom.TextWriter: void write(char)>(c0);

        goto label46;

     label27:
        virtualinvoke r0.<nu.xom.TextWriter: void write(char)>(c0);

        goto label46;

     label28:
        virtualinvoke r0.<nu.xom.TextWriter: void write(char)>(c0);

        goto label46;

     label29:
        virtualinvoke r0.<nu.xom.TextWriter: void write(char)>(c0);

        goto label46;

     label30:
        virtualinvoke r0.<nu.xom.TextWriter: void write(char)>(c0);

        goto label46;

     label31:
        virtualinvoke r0.<nu.xom.TextWriter: void write(char)>(c0);

        goto label46;

     label32:
        virtualinvoke r0.<nu.xom.TextWriter: void write(char)>(c0);

        goto label46;

     label33:
        virtualinvoke r0.<nu.xom.TextWriter: void write(char)>(c0);

        goto label46;

     label34:
        virtualinvoke r0.<nu.xom.TextWriter: void write(char)>(c0);

        goto label46;

     label35:
        virtualinvoke r0.<nu.xom.TextWriter: void write(char)>(c0);

        goto label46;

     label36:
        virtualinvoke r0.<nu.xom.TextWriter: void write(char)>(c0);

        goto label46;

     label37:
        virtualinvoke r0.<nu.xom.TextWriter: void write(char)>(c0);

        goto label46;

     label38:
        virtualinvoke r0.<nu.xom.TextWriter: void write(char)>(c0);

        goto label46;

     label39:
        virtualinvoke r0.<nu.xom.TextWriter: void write(char)>(c0);

        goto label46;

     label40:
        virtualinvoke r0.<nu.xom.TextWriter: void write(char)>(c0);

        goto label46;

     label41:
        $r2 = r0.<nu.xom.TextWriter: java.io.Writer out>;

        virtualinvoke $r2.<java.io.Writer: void write(java.lang.String)>("&lt;");

        $i3 = r0.<nu.xom.TextWriter: int column>;

        $i4 = $i3 + 4;

        r0.<nu.xom.TextWriter: int column> = $i4;

        r0.<nu.xom.TextWriter: boolean lastCharacterWasSpace> = 0;

        r0.<nu.xom.TextWriter: boolean skipFollowingLinefeed> = 0;

        r0.<nu.xom.TextWriter: boolean justBroke> = 0;

        goto label46;

     label42:
        virtualinvoke r0.<nu.xom.TextWriter: void write(char)>(c0);

        goto label46;

     label43:
        $r1 = r0.<nu.xom.TextWriter: java.io.Writer out>;

        virtualinvoke $r1.<java.io.Writer: void write(java.lang.String)>("&gt;");

        $i1 = r0.<nu.xom.TextWriter: int column>;

        $i2 = $i1 + 4;

        r0.<nu.xom.TextWriter: int column> = $i2;

        r0.<nu.xom.TextWriter: boolean lastCharacterWasSpace> = 0;

        r0.<nu.xom.TextWriter: boolean skipFollowingLinefeed> = 0;

        r0.<nu.xom.TextWriter: boolean justBroke> = 0;

        goto label46;

     label44:
        $z6 = virtualinvoke r0.<nu.xom.TextWriter: boolean needsEscaping(char)>(c0);

        if $z6 == 0 goto label45;

        specialinvoke r0.<nu.xom.TextWriter: void writeEscapedChar(char)>(c0);

        goto label46;

     label45:
        virtualinvoke r0.<nu.xom.TextWriter: void write(char)>(c0);

     label46:
        return;
    }

    void write(char) throws java.io.IOException
    {
        nu.xom.TextWriter r0;
        int $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i18, $i19, $i21;
        boolean $z0, $z1, $z2, $z3, $z4;
        char c0;
        java.io.Writer $r1, $r2, $r3;

        r0 := @this: nu.xom.TextWriter;

        c0 := @parameter0: char;

        $i9 = (int) c0;

        if $i9 == 32 goto label01;

        $i10 = (int) c0;

        if $i10 == 10 goto label01;

        $i11 = (int) c0;

        if $i11 != 9 goto label10;

     label01:
        $z4 = specialinvoke r0.<nu.xom.TextWriter: boolean needsBreak()>();

        if $z4 == 0 goto label02;

        virtualinvoke r0.<nu.xom.TextWriter: void breakLine()>();

        r0.<nu.xom.TextWriter: boolean skipFollowingLinefeed> = 0;

        goto label09;

     label02:
        $z0 = r0.<nu.xom.TextWriter: boolean preserveSpace>;

        if $z0 != 0 goto label03;

        $i3 = r0.<nu.xom.TextWriter: int indent>;

        if $i3 > 0 goto label08;

        $i6 = r0.<nu.xom.TextWriter: int maxLength>;

        if $i6 > 0 goto label08;

     label03:
        $i12 = (int) c0;

        if $i12 == 32 goto label04;

        $i13 = (int) c0;

        if $i13 != 9 goto label05;

     label04:
        $r1 = r0.<nu.xom.TextWriter: java.io.Writer out>;

        $i14 = (int) c0;

        virtualinvoke $r1.<java.io.Writer: void write(int)>($i14);

        r0.<nu.xom.TextWriter: boolean skipFollowingLinefeed> = 0;

        $i1 = r0.<nu.xom.TextWriter: int column>;

        $i2 = $i1 + 1;

        r0.<nu.xom.TextWriter: int column> = $i2;

        r0.<nu.xom.TextWriter: boolean justBroke> = 0;

        goto label09;

     label05:
        $z1 = r0.<nu.xom.TextWriter: boolean lineSeparatorSet>;

        if $z1 == 0 goto label06;

        $z2 = r0.<nu.xom.TextWriter: boolean skipFollowingLinefeed>;

        if $z2 != 0 goto label07;

     label06:
        specialinvoke r0.<nu.xom.TextWriter: void writeLineSeparator(char)>(c0);

     label07:
        r0.<nu.xom.TextWriter: boolean skipFollowingLinefeed> = 0;

        r0.<nu.xom.TextWriter: int column> = 0;

        goto label09;

     label08:
        $z3 = r0.<nu.xom.TextWriter: boolean lastCharacterWasSpace>;

        if $z3 != 0 goto label09;

        $r2 = r0.<nu.xom.TextWriter: java.io.Writer out>;

        virtualinvoke $r2.<java.io.Writer: void write(int)>(32);

        $i4 = r0.<nu.xom.TextWriter: int column>;

        $i5 = $i4 + 1;

        r0.<nu.xom.TextWriter: int column> = $i5;

        r0.<nu.xom.TextWriter: boolean skipFollowingLinefeed> = 0;

        r0.<nu.xom.TextWriter: boolean justBroke> = 0;

     label09:
        r0.<nu.xom.TextWriter: boolean lastCharacterWasSpace> = 1;

        goto label13;

     label10:
        $r3 = r0.<nu.xom.TextWriter: java.io.Writer out>;

        $i15 = (int) c0;

        virtualinvoke $r3.<java.io.Writer: void write(int)>($i15);

        $i16 = (int) c0;

        $i18 = (int) 55296;

        if $i16 < $i18 goto label11;

        $i19 = (int) c0;

        $i21 = (int) 56319;

        if $i19 <= $i21 goto label12;

     label11:
        $i7 = r0.<nu.xom.TextWriter: int column>;

        $i8 = $i7 + 1;

        r0.<nu.xom.TextWriter: int column> = $i8;

     label12:
        r0.<nu.xom.TextWriter: boolean lastCharacterWasSpace> = 0;

        r0.<nu.xom.TextWriter: boolean skipFollowingLinefeed> = 0;

        r0.<nu.xom.TextWriter: boolean justBroke> = 0;

     label13:
        return;
    }

    private void writeLineSeparator(char) throws java.io.IOException
    {
        nu.xom.TextWriter r0;
        char c0;
        java.io.Writer $r3, $r4, $r5, $r6;
        int $i1;
        java.lang.String $r1, $r2;
        boolean $z0, $z1, $z2, $z3, $z4;

        r0 := @this: nu.xom.TextWriter;

        c0 := @parameter0: char;

        $z0 = r0.<nu.xom.TextWriter: boolean inDocType>;

        if $z0 != 0 goto label2;

        $z3 = r0.<nu.xom.TextWriter: boolean lineSeparatorSet>;

        if $z3 == 0 goto label1;

        $z4 = r0.<nu.xom.TextWriter: boolean preserveSpace>;

        if $z4 == 0 goto label2;

     label1:
        $r6 = r0.<nu.xom.TextWriter: java.io.Writer out>;

        $i1 = (int) c0;

        virtualinvoke $r6.<java.io.Writer: void write(int)>($i1);

        goto label5;

     label2:
        $r1 = r0.<nu.xom.TextWriter: java.lang.String lineSeparator>;

        $z1 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("\r\n");

        if $z1 == 0 goto label3;

        $r5 = r0.<nu.xom.TextWriter: java.io.Writer out>;

        virtualinvoke $r5.<java.io.Writer: void write(java.lang.String)>("\r\n");

        goto label5;

     label3:
        $r2 = r0.<nu.xom.TextWriter: java.lang.String lineSeparator>;

        $z2 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("\n");

        if $z2 == 0 goto label4;

        $r4 = r0.<nu.xom.TextWriter: java.io.Writer out>;

        virtualinvoke $r4.<java.io.Writer: void write(int)>(10);

        goto label5;

     label4:
        $r3 = r0.<nu.xom.TextWriter: java.io.Writer out>;

        virtualinvoke $r3.<java.io.Writer: void write(int)>(13);

     label5:
        return;
    }

    private boolean needsBreak()
    {
        nu.xom.TextWriter r0;
        int $i0, $i1, $i2, $i3;
        boolean $z0, $z1;

        r0 := @this: nu.xom.TextWriter;

        $i0 = r0.<nu.xom.TextWriter: int maxLength>;

        if $i0 <= 0 goto label1;

        $z0 = r0.<nu.xom.TextWriter: boolean preserveSpace>;

        if $z0 == 0 goto label2;

     label1:
        return 0;

     label2:
        $i3 = r0.<nu.xom.TextWriter: int column>;

        $i1 = r0.<nu.xom.TextWriter: int maxLength>;

        $i2 = $i1 - 10;

        if $i3 < $i2 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        return $z1;
    }

    boolean justBroke()
    {
        nu.xom.TextWriter r0;
        boolean $z0;

        r0 := @this: nu.xom.TextWriter;

        $z0 = r0.<nu.xom.TextWriter: boolean justBroke>;

        return $z0;
    }

    final void breakLine() throws java.io.IOException
    {
        nu.xom.TextWriter r0;
        java.io.Writer $r2, $r4;
        int $i0;
        java.lang.String $r1, $r3, $r5;

        r0 := @this: nu.xom.TextWriter;

        $r2 = r0.<nu.xom.TextWriter: java.io.Writer out>;

        $r1 = r0.<nu.xom.TextWriter: java.lang.String lineSeparator>;

        virtualinvoke $r2.<java.io.Writer: void write(java.lang.String)>($r1);

        $r4 = r0.<nu.xom.TextWriter: java.io.Writer out>;

        $r3 = r0.<nu.xom.TextWriter: java.lang.String indentString>;

        virtualinvoke $r4.<java.io.Writer: void write(java.lang.String)>($r3);

        $r5 = r0.<nu.xom.TextWriter: java.lang.String indentString>;

        $i0 = virtualinvoke $r5.<java.lang.String: int length()>();

        r0.<nu.xom.TextWriter: int column> = $i0;

        r0.<nu.xom.TextWriter: boolean lastCharacterWasSpace> = 1;

        r0.<nu.xom.TextWriter: boolean justBroke> = 1;

        return;
    }

    private final void escapeBreakLine() throws java.io.IOException
    {
        nu.xom.TextWriter r0;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.String $r1, $r2, $r3, $r4;
        boolean $z0, $z1;
        java.io.Writer $r5, $r6, $r7;

        r0 := @this: nu.xom.TextWriter;

        $r2 = "\n";

        $r1 = r0.<nu.xom.TextWriter: java.lang.String lineSeparator>;

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        $r7 = r0.<nu.xom.TextWriter: java.io.Writer out>;

        virtualinvoke $r7.<java.io.Writer: void write(java.lang.String)>("&#x0A;");

        $i4 = r0.<nu.xom.TextWriter: int column>;

        $i5 = $i4 + 6;

        r0.<nu.xom.TextWriter: int column> = $i5;

        goto label3;

     label1:
        $r4 = "\r\n";

        $r3 = r0.<nu.xom.TextWriter: java.lang.String lineSeparator>;

        $z1 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z1 == 0 goto label2;

        $r6 = r0.<nu.xom.TextWriter: java.io.Writer out>;

        virtualinvoke $r6.<java.io.Writer: void write(java.lang.String)>("&#x0D;&#x0A;");

        $i2 = r0.<nu.xom.TextWriter: int column>;

        $i3 = $i2 + 12;

        r0.<nu.xom.TextWriter: int column> = $i3;

        goto label3;

     label2:
        $r5 = r0.<nu.xom.TextWriter: java.io.Writer out>;

        virtualinvoke $r5.<java.io.Writer: void write(java.lang.String)>("&#x0D;");

        $i0 = r0.<nu.xom.TextWriter: int column>;

        $i1 = $i0 + 6;

        r0.<nu.xom.TextWriter: int column> = $i1;

     label3:
        r0.<nu.xom.TextWriter: boolean lastCharacterWasSpace> = 1;

        return;
    }

    final void writeMarkup(char) throws java.io.IOException
    {
        nu.xom.TextWriter r0;
        nu.xom.UnavailableCharacterException $r1;
        char c0;
        java.lang.String $r2;
        boolean $z0;

        r0 := @this: nu.xom.TextWriter;

        c0 := @parameter0: char;

        $z0 = virtualinvoke r0.<nu.xom.TextWriter: boolean needsEscaping(char)>(c0);

        if $z0 == 0 goto label1;

        $r1 = new nu.xom.UnavailableCharacterException;

        $r2 = r0.<nu.xom.TextWriter: java.lang.String encoding>;

        specialinvoke $r1.<nu.xom.UnavailableCharacterException: void <init>(char,java.lang.String)>(c0, $r2);

        throw $r1;

     label1:
        virtualinvoke r0.<nu.xom.TextWriter: void write(char)>(c0);

        return;
    }

    void writePCDATA(java.lang.String) throws java.io.IOException
    {
        nu.xom.TextWriter r0;
        int $i0, i2;
        char $c1;
        java.lang.String $r1, r2;

        r0 := @this: nu.xom.TextWriter;

        r2 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<nu.xom.TextWriter: java.lang.String normalize(java.lang.String)>(r2);

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        i2 = 0;

     label1:
        if i2 >= $i0 goto label2;

        $c1 = virtualinvoke $r1.<java.lang.String: char charAt(int)>(i2);

        virtualinvoke r0.<nu.xom.TextWriter: void writePCDATA(char)>($c1);

        i2 = i2 + 1;

        goto label1;

     label2:
        return;
    }

    void writeAttributeValue(java.lang.String) throws java.io.IOException
    {
        nu.xom.TextWriter r0;
        int $i0, i2;
        char $c1;
        java.lang.String $r1, r2;

        r0 := @this: nu.xom.TextWriter;

        r2 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<nu.xom.TextWriter: java.lang.String normalize(java.lang.String)>(r2);

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        i2 = 0;

     label1:
        if i2 >= $i0 goto label2;

        $c1 = virtualinvoke $r1.<java.lang.String: char charAt(int)>(i2);

        virtualinvoke r0.<nu.xom.TextWriter: void writeAttributeValue(char)>($c1);

        i2 = i2 + 1;

        goto label1;

     label2:
        return;
    }

    void writeMarkup(java.lang.String) throws java.io.IOException
    {
        nu.xom.TextWriter r0;
        int $i0, i2;
        char $c1;
        java.lang.String $r1, r2;

        r0 := @this: nu.xom.TextWriter;

        r2 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<nu.xom.TextWriter: java.lang.String normalize(java.lang.String)>(r2);

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        i2 = 0;

     label1:
        if i2 >= $i0 goto label2;

        $c1 = virtualinvoke $r1.<java.lang.String: char charAt(int)>(i2);

        virtualinvoke r0.<nu.xom.TextWriter: void writeMarkup(char)>($c1);

        i2 = i2 + 1;

        goto label1;

     label2:
        return;
    }

    void writeUncheckedMarkup(java.lang.String) throws java.io.IOException
    {
        nu.xom.TextWriter r1;
        int $i0, i2;
        char $c1;
        java.lang.String r0;

        r1 := @this: nu.xom.TextWriter;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        i2 = 0;

     label1:
        if i2 >= $i0 goto label2;

        $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i2);

        virtualinvoke r1.<nu.xom.TextWriter: void write(char)>($c1);

        i2 = i2 + 1;

        goto label1;

     label2:
        return;
    }

    protected java.lang.String normalize(java.lang.String)
    {
        nu.xom.TextWriter r0;
        java.lang.String r1, $r2;
        boolean $z0;

        r0 := @this: nu.xom.TextWriter;

        r1 := @parameter0: java.lang.String;

        $z0 = r0.<nu.xom.TextWriter: boolean normalize>;

        if $z0 == 0 goto label1;

        $r2 = staticinvoke <nu.xom.UnicodeUtil: java.lang.String normalize(java.lang.String)>(r1);

        return $r2;

     label1:
        return r1;
    }

    boolean isIndenting()
    {
        nu.xom.TextWriter r0;
        int $i0;
        java.lang.String $r1;
        boolean $z0;

        r0 := @this: nu.xom.TextWriter;

        $r1 = r0.<nu.xom.TextWriter: java.lang.String indentString>;

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i0 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    void incrementIndent()
    {
        nu.xom.TextWriter r0;
        java.lang.StringBuffer $r3;
        int $i0, $i1, $i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, i13;
        java.lang.String $r1, $r2, $r4, r5;

        r0 := @this: nu.xom.TextWriter;

        $i0 = r0.<nu.xom.TextWriter: int indent>;

        if $i0 != 0 goto label1;

        return;

     label1:
        $r1 = r0.<nu.xom.TextWriter: java.lang.String indentString>;

        $i1 = virtualinvoke $r1.<java.lang.String: int length()>();

        $i2 = r0.<nu.xom.TextWriter: int indent>;

        i3 = $i1 + $i2;

        $r2 = r0.<nu.xom.TextWriter: java.lang.String indentString>;

        $i4 = virtualinvoke $r2.<java.lang.String: int length()>();

        $i5 = r0.<nu.xom.TextWriter: int indent>;

        $i6 = $i4 + $i5;

        if $i6 >= 128 goto label2;

        $r4 = "                                                                                                                                ";

        r5 = virtualinvoke $r4.<java.lang.String: java.lang.String substring(int,int)>(0, i3);

        goto label5;

     label2:
        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>(int)>(i3);

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("                                                                                                                                ");

        i13 = 128;

     label3:
        if i13 >= i3 goto label4;

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(32);

        i13 = i13 + 1;

        goto label3;

     label4:
        r5 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

     label5:
        $i7 = r0.<nu.xom.TextWriter: int maxLength>;

        if $i7 <= 0 goto label6;

        $i8 = virtualinvoke r5.<java.lang.String: int length()>();

        $i9 = r0.<nu.xom.TextWriter: int maxLength>;

        $i10 = $i9 / 2;

        if $i8 <= $i10 goto label6;

        $i11 = r0.<nu.xom.TextWriter: int fakeIndents>;

        $i12 = $i11 + 1;

        r0.<nu.xom.TextWriter: int fakeIndents> = $i12;

        goto label7;

     label6:
        r0.<nu.xom.TextWriter: java.lang.String indentString> = r5;

     label7:
        return;
    }

    void decrementIndent()
    {
        nu.xom.TextWriter r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        java.lang.String $r1, $r2, $r3;

        r0 := @this: nu.xom.TextWriter;

        $i0 = r0.<nu.xom.TextWriter: int indent>;

        if $i0 != 0 goto label1;

        return;

     label1:
        $i1 = r0.<nu.xom.TextWriter: int fakeIndents>;

        if $i1 <= 0 goto label2;

        $i5 = r0.<nu.xom.TextWriter: int fakeIndents>;

        $i6 = $i5 - 1;

        r0.<nu.xom.TextWriter: int fakeIndents> = $i6;

        goto label3;

     label2:
        $r2 = r0.<nu.xom.TextWriter: java.lang.String indentString>;

        $r1 = r0.<nu.xom.TextWriter: java.lang.String indentString>;

        $i2 = virtualinvoke $r1.<java.lang.String: int length()>();

        $i3 = r0.<nu.xom.TextWriter: int indent>;

        $i4 = $i2 - $i3;

        $r3 = virtualinvoke $r2.<java.lang.String: java.lang.String substring(int,int)>(0, $i4);

        r0.<nu.xom.TextWriter: java.lang.String indentString> = $r3;

     label3:
        return;
    }

    java.lang.String getEncoding()
    {
        nu.xom.TextWriter r0;
        java.lang.String $r1;

        r0 := @this: nu.xom.TextWriter;

        $r1 = r0.<nu.xom.TextWriter: java.lang.String encoding>;

        return $r1;
    }

    java.lang.String getLineSeparator()
    {
        nu.xom.TextWriter r0;
        java.lang.String $r1;

        r0 := @this: nu.xom.TextWriter;

        $r1 = r0.<nu.xom.TextWriter: java.lang.String lineSeparator>;

        return $r1;
    }

    void setLineSeparator(java.lang.String)
    {
        nu.xom.TextWriter r1;
        java.lang.String r0;
        java.lang.IllegalArgumentException $r2;
        boolean $z0, $z1, $z2;

        r1 := @this: nu.xom.TextWriter;

        r0 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("\n");

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("\r");

        if $z1 != 0 goto label1;

        $z2 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("\r\n");

        if $z2 == 0 goto label2;

     label1:
        r1.<nu.xom.TextWriter: java.lang.String lineSeparator> = r0;

        r1.<nu.xom.TextWriter: boolean lineSeparatorSet> = 1;

        goto label3;

     label2:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Illegal Line Separator");

        throw $r2;

     label3:
        return;
    }

    void setInDocType(boolean)
    {
        nu.xom.TextWriter r0;
        boolean z0;

        r0 := @this: nu.xom.TextWriter;

        z0 := @parameter0: boolean;

        r0.<nu.xom.TextWriter: boolean inDocType> = z0;

        return;
    }

    int getIndent()
    {
        int $i0;
        nu.xom.TextWriter r0;

        r0 := @this: nu.xom.TextWriter;

        $i0 = r0.<nu.xom.TextWriter: int indent>;

        return $i0;
    }

    int getMaxLength()
    {
        int $i0;
        nu.xom.TextWriter r0;

        r0 := @this: nu.xom.TextWriter;

        $i0 = r0.<nu.xom.TextWriter: int maxLength>;

        return $i0;
    }

    void setMaxLength(int)
    {
        int i0;
        nu.xom.TextWriter r0;

        r0 := @this: nu.xom.TextWriter;

        i0 := @parameter0: int;

        if i0 >= 0 goto label1;

        i0 = 0;

     label1:
        r0.<nu.xom.TextWriter: int maxLength> = i0;

        return;
    }

    void setIndent(int)
    {
        int i0;
        nu.xom.TextWriter r0;

        r0 := @this: nu.xom.TextWriter;

        i0 := @parameter0: int;

        r0.<nu.xom.TextWriter: int indent> = i0;

        return;
    }

    void flush() throws java.io.IOException
    {
        java.io.Writer $r1;
        nu.xom.TextWriter r0;

        r0 := @this: nu.xom.TextWriter;

        $r1 = r0.<nu.xom.TextWriter: java.io.Writer out>;

        virtualinvoke $r1.<java.io.Writer: void flush()>();

        return;
    }

    abstract boolean needsEscaping(char);

    boolean isPreserveSpace()
    {
        nu.xom.TextWriter r0;
        boolean $z0;

        r0 := @this: nu.xom.TextWriter;

        $z0 = r0.<nu.xom.TextWriter: boolean preserveSpace>;

        return $z0;
    }

    void setPreserveSpace(boolean)
    {
        nu.xom.TextWriter r0;
        boolean z0;

        r0 := @this: nu.xom.TextWriter;

        z0 := @parameter0: boolean;

        r0.<nu.xom.TextWriter: boolean preserveSpace> = z0;

        return;
    }

    int getColumnNumber()
    {
        int $i0;
        nu.xom.TextWriter r0;

        r0 := @this: nu.xom.TextWriter;

        $i0 = r0.<nu.xom.TextWriter: int column>;

        return $i0;
    }

    void setNFC(boolean)
    {
        nu.xom.TextWriter r0;
        boolean z0;

        r0 := @this: nu.xom.TextWriter;

        z0 := @parameter0: boolean;

        r0.<nu.xom.TextWriter: boolean normalize> = z0;

        return;
    }

    boolean getNFC()
    {
        nu.xom.TextWriter r0;
        boolean $z0;

        r0 := @this: nu.xom.TextWriter;

        $z0 = r0.<nu.xom.TextWriter: boolean normalize>;

        return $z0;
    }

    void writeName(java.lang.String) throws java.io.IOException
    {
        nu.xom.TextWriter r0;
        java.lang.String r1;

        r0 := @this: nu.xom.TextWriter;

        r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<nu.xom.TextWriter: void writeMarkup(java.lang.String)>(r1);

        return;
    }

    public static void <clinit>()
    {
        <nu.xom.TextWriter: int _128> = 128;

        <nu.xom.TextWriter: java.lang.String _128_SPACES> = "                                                                                                                                ";

        return;
    }
}
