public class com.jidesoft.plaf.xerto.XertoPainter extends com.jidesoft.plaf.basic.BasicPainter
{
    private static com.jidesoft.plaf.xerto.XertoPainter _instance;
    private static final javax.swing.ImageIcon SELECTED;
    private static final javax.swing.ImageIcon SELECTED_C;
    private static final javax.swing.ImageIcon ROLLOVER;
    private static final javax.swing.ImageIcon ROLLOVER_C;
    private static final javax.swing.ImageIcon PRESSED;
    private static final javax.swing.ImageIcon PRESSED_C;

    public static com.jidesoft.plaf.basic.ThemePainter getInstance()
    {
        com.jidesoft.plaf.xerto.XertoPainter $r0, $r1, $r2;

        $r0 = <com.jidesoft.plaf.xerto.XertoPainter: com.jidesoft.plaf.xerto.XertoPainter _instance>;

        if $r0 != null goto label1;

        $r2 = new com.jidesoft.plaf.xerto.XertoPainter;

        specialinvoke $r2.<com.jidesoft.plaf.xerto.XertoPainter: void <init>()>();

        <com.jidesoft.plaf.xerto.XertoPainter: com.jidesoft.plaf.xerto.XertoPainter _instance> = $r2;

     label1:
        $r1 = <com.jidesoft.plaf.xerto.XertoPainter: com.jidesoft.plaf.xerto.XertoPainter _instance>;

        return $r1;
    }

    protected void <init>()
    {
        com.jidesoft.plaf.xerto.XertoPainter r0;

        r0 := @this: com.jidesoft.plaf.xerto.XertoPainter;

        specialinvoke r0.<com.jidesoft.plaf.basic.BasicPainter: void <init>()>();

        return;
    }

    public void paintCollapsiblePaneTitlePaneBackground(javax.swing.JComponent, java.awt.Graphics, java.awt.Rectangle, int, int)
    {
        javax.swing.JComponent r2;
        java.awt.Color $r3, $r4, $r5, $r6;
        java.awt.Rectangle r7;
        java.awt.Graphics2D r1;
        java.awt.Graphics r0;
        int i0, i1;
        com.jidesoft.plaf.xerto.XertoPainter r8;

        r8 := @this: com.jidesoft.plaf.xerto.XertoPainter;

        r2 := @parameter0: javax.swing.JComponent;

        r0 := @parameter1: java.awt.Graphics;

        r7 := @parameter2: java.awt.Rectangle;

        i0 := @parameter3: int;

        i1 := @parameter4: int;

        r1 = (java.awt.Graphics2D) r0;

        $r3 = virtualinvoke r2.<javax.swing.JComponent: java.awt.Color getBackground()>();

        $r4 = staticinvoke <com.jidesoft.plaf.xerto.XertoUtils: java.awt.Color getHighlightColor(java.awt.Color)>($r3);

        $r5 = virtualinvoke r2.<javax.swing.JComponent: java.awt.Color getBackground()>();

        $r6 = staticinvoke <com.jidesoft.plaf.xerto.XertoUtils: java.awt.Color getLighterColor(java.awt.Color)>($r5);

        staticinvoke <com.jidesoft.swing.JideSwingUtilities: void fillGradient(java.awt.Graphics2D,java.awt.Shape,java.awt.Color,java.awt.Color,boolean)>(r1, r7, $r6, $r4, 1);

        return;
    }

    public void paintCollapsiblePaneTitlePaneBackgroundEmphasized(javax.swing.JComponent, java.awt.Graphics, java.awt.Rectangle, int, int)
    {
        javax.swing.JComponent r2;
        java.awt.Color $r3, $r4, $r5;
        java.awt.Rectangle r6;
        java.awt.Graphics2D r1;
        java.awt.Graphics r0;
        int i0, i1;
        com.jidesoft.plaf.xerto.XertoPainter r7;

        r7 := @this: com.jidesoft.plaf.xerto.XertoPainter;

        r2 := @parameter0: javax.swing.JComponent;

        r0 := @parameter1: java.awt.Graphics;

        r6 := @parameter2: java.awt.Rectangle;

        i0 := @parameter3: int;

        i1 := @parameter4: int;

        r1 = (java.awt.Graphics2D) r0;

        $r3 = virtualinvoke r2.<javax.swing.JComponent: java.awt.Color getBackground()>();

        $r4 = staticinvoke <com.jidesoft.plaf.xerto.XertoUtils: java.awt.Color getEmBaseColor(java.awt.Color)>($r3);

        $r5 = virtualinvoke r2.<javax.swing.JComponent: java.awt.Color getBackground()>();

        staticinvoke <com.jidesoft.swing.JideSwingUtilities: void fillGradient(java.awt.Graphics2D,java.awt.Shape,java.awt.Color,java.awt.Color,boolean)>(r1, r6, $r5, $r4, 1);

        return;
    }

    public void paintMenuItemBackground(javax.swing.JComponent, java.awt.Graphics, java.awt.Rectangle, int, int, boolean)
    {
        javax.swing.JComponent r1;
        java.awt.Rectangle r3;
        java.awt.Graphics r2;
        int i0, i1;
        com.jidesoft.plaf.xerto.XertoPainter r0;
        boolean z0;

        r0 := @this: com.jidesoft.plaf.xerto.XertoPainter;

        r1 := @parameter0: javax.swing.JComponent;

        r2 := @parameter1: java.awt.Graphics;

        r3 := @parameter2: java.awt.Rectangle;

        i0 := @parameter3: int;

        i1 := @parameter4: int;

        z0 := @parameter5: boolean;

        specialinvoke r0.<com.jidesoft.plaf.basic.BasicPainter: void paintMenuItemBackground(javax.swing.JComponent,java.awt.Graphics,java.awt.Rectangle,int,int,boolean)>(r1, r2, r3, i0, i1, z0);

        return;
    }

    public void paintButtonBackground(javax.swing.JComponent, java.awt.Graphics, java.awt.Rectangle, int, int)
    {
        java.awt.Color $r5;
        javax.swing.JComponent r10;
        java.awt.Rectangle r2;
        int i0, i1;
        java.awt.Graphics r1;
        javax.swing.ImageIcon $r3, $r4, $r6, $r7, $r8, $r9;
        com.jidesoft.plaf.xerto.XertoPainter r0;

        r0 := @this: com.jidesoft.plaf.xerto.XertoPainter;

        r10 := @parameter0: javax.swing.JComponent;

        r1 := @parameter1: java.awt.Graphics;

        r2 := @parameter2: java.awt.Rectangle;

        i1 := @parameter3: int;

        i0 := @parameter4: int;

        if i0 != 0 goto label1;

        specialinvoke r0.<com.jidesoft.plaf.basic.BasicPainter: void paintButtonBackground(javax.swing.JComponent,java.awt.Graphics,java.awt.Rectangle,int,int)>(r10, r1, r2, i1, i0);

        goto label4;

     label1:
        if i0 != 2 goto label2;

        $r9 = <com.jidesoft.plaf.xerto.XertoPainter: javax.swing.ImageIcon ROLLOVER>;

        $r8 = <com.jidesoft.plaf.xerto.XertoPainter: javax.swing.ImageIcon ROLLOVER_C>;

        specialinvoke r0.<com.jidesoft.plaf.xerto.XertoPainter: void paintImageBorder(java.awt.Graphics,java.awt.Rectangle,javax.swing.ImageIcon,javax.swing.ImageIcon,java.awt.Color)>(r1, r2, $r9, $r8, null);

        goto label4;

     label2:
        if i0 != 3 goto label3;

        $r7 = <com.jidesoft.plaf.xerto.XertoPainter: javax.swing.ImageIcon SELECTED>;

        $r6 = <com.jidesoft.plaf.xerto.XertoPainter: javax.swing.ImageIcon SELECTED_C>;

        $r5 = <java.awt.Color: java.awt.Color WHITE>;

        specialinvoke r0.<com.jidesoft.plaf.xerto.XertoPainter: void paintImageBorder(java.awt.Graphics,java.awt.Rectangle,javax.swing.ImageIcon,javax.swing.ImageIcon,java.awt.Color)>(r1, r2, $r7, $r6, $r5);

        goto label4;

     label3:
        if i0 != 1 goto label4;

        $r4 = <com.jidesoft.plaf.xerto.XertoPainter: javax.swing.ImageIcon PRESSED>;

        $r3 = <com.jidesoft.plaf.xerto.XertoPainter: javax.swing.ImageIcon PRESSED_C>;

        specialinvoke r0.<com.jidesoft.plaf.xerto.XertoPainter: void paintImageBorder(java.awt.Graphics,java.awt.Rectangle,javax.swing.ImageIcon,javax.swing.ImageIcon,java.awt.Color)>(r1, r2, $r4, $r3, null);

     label4:
        return;
    }

    private void paintImageBorder(java.awt.Graphics, java.awt.Rectangle, javax.swing.ImageIcon, javax.swing.ImageIcon, java.awt.Color)
    {
        java.awt.Color r6, $r7;
        java.awt.Rectangle r2;
        java.awt.Insets $r3;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21;
        javax.swing.ImageIcon r1, r4;
        com.jidesoft.plaf.xerto.XertoPainter r8;
        java.awt.Image $r5;
        java.awt.Graphics r0;

        r8 := @this: com.jidesoft.plaf.xerto.XertoPainter;

        r0 := @parameter0: java.awt.Graphics;

        r2 := @parameter1: java.awt.Rectangle;

        r1 := @parameter2: javax.swing.ImageIcon;

        r4 := @parameter3: javax.swing.ImageIcon;

        r6 := @parameter4: java.awt.Color;

        $r3 = new java.awt.Insets;

        specialinvoke $r3.<java.awt.Insets: void <init>(int,int,int,int)>(4, 4, 4, 4);

        staticinvoke <com.jidesoft.swing.JideSwingUtilities: void drawImageBorder(java.awt.Graphics,javax.swing.ImageIcon,java.awt.Rectangle,java.awt.Insets,boolean)>(r0, r1, r2, $r3, 0);

        if r4 != null goto label1;

        $r7 = virtualinvoke r0.<java.awt.Graphics: java.awt.Color getColor()>();

        virtualinvoke r0.<java.awt.Graphics: void setColor(java.awt.Color)>(r6);

        $i14 = r2.<java.awt.Rectangle: int x>;

        $i21 = $i14 + 4;

        $i15 = r2.<java.awt.Rectangle: int y>;

        $i20 = $i15 + 4;

        $i16 = r2.<java.awt.Rectangle: int width>;

        $i19 = $i16 - 8;

        $i17 = r2.<java.awt.Rectangle: int height>;

        $i18 = $i17 - 8;

        virtualinvoke r0.<java.awt.Graphics: void fillRect(int,int,int,int)>($i21, $i20, $i19, $i18);

        virtualinvoke r0.<java.awt.Graphics: void setColor(java.awt.Color)>($r7);

        goto label2;

     label1:
        $r5 = virtualinvoke r4.<javax.swing.ImageIcon: java.awt.Image getImage()>();

        $i0 = r2.<java.awt.Rectangle: int x>;

        $i8 = $i0 + 4;

        $i1 = r2.<java.awt.Rectangle: int y>;

        $i9 = $i1 + 4;

        $i3 = r2.<java.awt.Rectangle: int x>;

        $i2 = r2.<java.awt.Rectangle: int width>;

        $i4 = $i3 + $i2;

        $i10 = $i4 - 4;

        $i6 = r2.<java.awt.Rectangle: int y>;

        $i5 = r2.<java.awt.Rectangle: int height>;

        $i7 = $i6 + $i5;

        $i11 = $i7 - 4;

        $i12 = virtualinvoke r4.<javax.swing.ImageIcon: int getIconWidth()>();

        $i13 = virtualinvoke r4.<javax.swing.ImageIcon: int getIconHeight()>();

        virtualinvoke r0.<java.awt.Graphics: boolean drawImage(java.awt.Image,int,int,int,int,int,int,int,int,java.awt.Color,java.awt.image.ImageObserver)>($r5, $i8, $i9, $i10, $i11, 0, 0, $i12, $i13, r6, null);

     label2:
        return;
    }

    public void paintGripper(javax.swing.JComponent, java.awt.Graphics, java.awt.Rectangle, int, int)
    {
        java.awt.Color $r3, $r4, $r5, $r6;
        java.awt.Graphics r1;
        java.awt.Rectangle r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, i24, i25, $i26, i27, i28, i29;
        com.jidesoft.plaf.xerto.XertoPainter r2;
        javax.swing.JComponent r7;

        r2 := @this: com.jidesoft.plaf.xerto.XertoPainter;

        r7 := @parameter0: javax.swing.JComponent;

        r1 := @parameter1: java.awt.Graphics;

        r0 := @parameter2: java.awt.Rectangle;

        i25 := @parameter3: int;

        i24 := @parameter4: int;

        $i0 = r0.<java.awt.Rectangle: int width>;

        if $i0 <= 30 goto label1;

        i25 = 1;

     label1:
        if i25 != 0 goto label2;

        $i26 = r0.<java.awt.Rectangle: int height>;

        goto label3;

     label2:
        $i26 = r0.<java.awt.Rectangle: int width>;

     label3:
        $i1 = $i26 - 6;

        $i2 = $i1 / 4;

        $i3 = staticinvoke <java.lang.Math: int min(int,int)>(9, $i2);

        $i22 = r0.<java.awt.Rectangle: int y>;

        $i23 = r0.<java.awt.Rectangle: int x>;

        if i25 != 0 goto label4;

        $i15 = r0.<java.awt.Rectangle: int height>;

        $i17 = $i15 / 2;

        $i16 = $i3 * 2;

        $i18 = $i17 - $i16;

        i27 = $i22 + $i18;

        $i19 = r0.<java.awt.Rectangle: int width>;

        $i20 = $i19 / 2;

        $i21 = $i20 - 1;

        i28 = $i23 + $i21;

        goto label5;

     label4:
        $i4 = r0.<java.awt.Rectangle: int width>;

        $i6 = $i4 / 2;

        $i5 = $i3 * 2;

        $i7 = $i6 - $i5;

        i28 = $i23 + $i7;

        $i8 = r0.<java.awt.Rectangle: int height>;

        $i9 = $i8 / 2;

        $i10 = $i9 - 1;

        i27 = $i22 + $i10;

     label5:
        i29 = 0;

     label6:
        if i29 >= $i3 goto label9;

        $r3 = virtualinvoke r2.<com.jidesoft.plaf.xerto.XertoPainter: java.awt.Color getGripperForegroundLt()>();

        virtualinvoke r1.<java.awt.Graphics: void setColor(java.awt.Color)>($r3);

        $i12 = i28 + 1;

        $i11 = i27 + 1;

        virtualinvoke r1.<java.awt.Graphics: void fillRect(int,int,int,int)>($i12, $i11, 2, 2);

        $r4 = staticinvoke <com.jidesoft.plaf.xerto.XertoUtils: java.awt.Color getControlMidShadowColor()>();

        virtualinvoke r1.<java.awt.Graphics: void setColor(java.awt.Color)>($r4);

        virtualinvoke r1.<java.awt.Graphics: void fillRect(int,int,int,int)>(i28, i27, 2, 2);

        $r5 = staticinvoke <com.jidesoft.plaf.xerto.XertoUtils: java.awt.Color getControlLightShadowColor()>();

        virtualinvoke r1.<java.awt.Graphics: void setColor(java.awt.Color)>($r5);

        virtualinvoke r1.<java.awt.Graphics: void fillRect(int,int,int,int)>(i28, i27, 1, 1);

        $r6 = staticinvoke <com.jidesoft.plaf.xerto.XertoUtils: java.awt.Color getControlDarkShadowColor()>();

        virtualinvoke r1.<java.awt.Graphics: void setColor(java.awt.Color)>($r6);

        $i14 = i28 + 1;

        $i13 = i27 + 1;

        virtualinvoke r1.<java.awt.Graphics: void fillRect(int,int,int,int)>($i14, $i13, 1, 1);

        if i25 != 0 goto label7;

        i27 = i27 + 4;

        goto label8;

     label7:
        i28 = i28 + 4;

     label8:
        i29 = i29 + 1;

        goto label6;

     label9:
        return;
    }

    public void paintDockableFrameTitlePane(javax.swing.JComponent, java.awt.Graphics, java.awt.Rectangle, int, int)
    {
        java.awt.Color $r4, $r5, $r7, $r8;
        java.awt.Rectangle $r2, r3, $r6;
        java.awt.Graphics2D r1;
        int i0, $i1, $i2, $i3, $i4, i5, $i6, $i7, $i8, $i9;
        com.jidesoft.plaf.xerto.XertoPainter r9;
        boolean $z0, $z1;
        javax.swing.JComponent r10;
        java.awt.Graphics r0;

        r9 := @this: com.jidesoft.plaf.xerto.XertoPainter;

        r10 := @parameter0: javax.swing.JComponent;

        r0 := @parameter1: java.awt.Graphics;

        r3 := @parameter2: java.awt.Rectangle;

        i5 := @parameter3: int;

        i0 := @parameter4: int;

        r1 = (java.awt.Graphics2D) r0;

        if 3 != i0 goto label3;

        $r6 = new java.awt.Rectangle;

        $i9 = r3.<java.awt.Rectangle: int x>;

        $i8 = r3.<java.awt.Rectangle: int y>;

        $i7 = r3.<java.awt.Rectangle: int width>;

        $i6 = r3.<java.awt.Rectangle: int height>;

        specialinvoke $r6.<java.awt.Rectangle: void <init>(int,int,int,int)>($i9, $i8, $i7, $i6);

        $r7 = staticinvoke <com.jidesoft.plaf.xerto.XertoUtils: java.awt.Color getFrameActiveTitleTopColor()>();

        $r8 = staticinvoke <com.jidesoft.plaf.xerto.XertoUtils: java.awt.Color getFrameActiveTitleBottomColor()>();

        if i5 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.jidesoft.swing.JideSwingUtilities: void fillGradient(java.awt.Graphics2D,java.awt.Shape,java.awt.Color,java.awt.Color,boolean)>(r1, $r6, $r7, $r8, $z0);

        goto label6;

     label3:
        $r2 = new java.awt.Rectangle;

        $i4 = r3.<java.awt.Rectangle: int x>;

        $i3 = r3.<java.awt.Rectangle: int y>;

        $i2 = r3.<java.awt.Rectangle: int width>;

        $i1 = r3.<java.awt.Rectangle: int height>;

        specialinvoke $r2.<java.awt.Rectangle: void <init>(int,int,int,int)>($i4, $i3, $i2, $i1);

        $r4 = staticinvoke <com.jidesoft.plaf.xerto.XertoUtils: java.awt.Color getFrameInactiveTitleTopColor()>();

        $r5 = staticinvoke <com.jidesoft.plaf.xerto.XertoUtils: java.awt.Color getFrameInactiveTitleBottomColor()>();

        if i5 != 0 goto label4;

        $z1 = 1;

        goto label5;

     label4:
        $z1 = 0;

     label5:
        staticinvoke <com.jidesoft.swing.JideSwingUtilities: void fillGradient(java.awt.Graphics2D,java.awt.Shape,java.awt.Color,java.awt.Color,boolean)>(r1, $r2, $r4, $r5, $z1);

     label6:
        return;
    }

    public void paintStatusBarSeparator(javax.swing.JComponent, java.awt.Graphics, java.awt.Rectangle, int, int)
    {
        java.awt.Color $r3, $r4, $r5, $r6;
        java.awt.Rectangle r1;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, i11, $i12, i13, i14, i15, i16, i17, $i19;
        com.jidesoft.plaf.xerto.XertoPainter r7;
        javax.swing.JComponent r0;
        java.awt.Graphics r2;

        r7 := @this: com.jidesoft.plaf.xerto.XertoPainter;

        r0 := @parameter0: javax.swing.JComponent;

        r2 := @parameter1: java.awt.Graphics;

        r1 := @parameter2: java.awt.Rectangle;

        i0 := @parameter3: int;

        i11 := @parameter4: int;

        if i0 != 0 goto label1;

        $i12 = virtualinvoke r0.<javax.swing.JComponent: int getHeight()>();

        goto label2;

     label1:
        $i12 = virtualinvoke r0.<javax.swing.JComponent: int getWidth()>();

     label2:
        $i19 = (int) -3;

        i13 = $i12 + $i19;

        if i0 != 0 goto label3;

        i14 = r1.<java.awt.Rectangle: int x>;

        $i6 = r1.<java.awt.Rectangle: int y>;

        i15 = $i6 + 1;

        $r5 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.awt.Color getColor(java.lang.Object)>("controlShadow");

        virtualinvoke r2.<java.awt.Graphics: void setColor(java.awt.Color)>($r5);

        $i7 = i15 + i13;

        virtualinvoke r2.<java.awt.Graphics: void drawLine(int,int,int,int)>(i14, i15, i14, $i7);

        $r6 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.awt.Color getColor(java.lang.Object)>("controlLtHighlight");

        virtualinvoke r2.<java.awt.Graphics: void setColor(java.awt.Color)>($r6);

        $i10 = i14 + 1;

        $i9 = i14 + 1;

        $i8 = i15 + i13;

        virtualinvoke r2.<java.awt.Graphics: void drawLine(int,int,int,int)>($i10, i15, $i9, $i8);

        goto label4;

     label3:
        $i1 = r1.<java.awt.Rectangle: int x>;

        i16 = $i1 + 1;

        i17 = r1.<java.awt.Rectangle: int y>;

        $r3 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.awt.Color getColor(java.lang.Object)>("controlShadow");

        virtualinvoke r2.<java.awt.Graphics: void setColor(java.awt.Color)>($r3);

        $i2 = i16 + i13;

        virtualinvoke r2.<java.awt.Graphics: void drawLine(int,int,int,int)>(i16, i17, $i2, i17);

        $r4 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.awt.Color getColor(java.lang.Object)>("controlLtHighlight");

        virtualinvoke r2.<java.awt.Graphics: void setColor(java.awt.Color)>($r4);

        $i5 = i17 + 1;

        $i4 = i16 + i13;

        $i3 = i17 + 1;

        virtualinvoke r2.<java.awt.Graphics: void drawLine(int,int,int,int)>(i16, $i5, $i4, $i3);

     label4:
        return;
    }

    public java.awt.Color getGripperForeground()
    {
        java.awt.Color $r0;
        com.jidesoft.plaf.xerto.XertoPainter r1;

        r1 := @this: com.jidesoft.plaf.xerto.XertoPainter;

        $r0 = staticinvoke <com.jidesoft.plaf.xerto.XertoUtils: java.awt.Color getControlLightShadowColor()>();

        return $r0;
    }

    public java.awt.Color getGripperForegroundLt()
    {
        java.awt.Color $r0;
        com.jidesoft.plaf.xerto.XertoPainter r1;

        r1 := @this: com.jidesoft.plaf.xerto.XertoPainter;

        $r0 = <java.awt.Color: java.awt.Color WHITE>;

        return $r0;
    }

    public java.awt.Color getSelectionSelectedDk()
    {
        java.awt.Color $r0;
        com.jidesoft.plaf.xerto.XertoPainter r1;

        r1 := @this: com.jidesoft.plaf.xerto.XertoPainter;

        $r0 = staticinvoke <com.jidesoft.plaf.xerto.XertoUtils: java.awt.Color getControlMidShadowColor()>();

        return $r0;
    }

    public java.awt.Color getSelectionSelectedLt()
    {
        java.awt.Color $r0;
        com.jidesoft.plaf.xerto.XertoPainter r1;

        r1 := @this: com.jidesoft.plaf.xerto.XertoPainter;

        $r0 = staticinvoke <com.jidesoft.plaf.xerto.XertoUtils: java.awt.Color getControlLightShadowColor()>();

        return $r0;
    }

    static void <clinit>()
    {
        javax.swing.ImageIcon $r0, $r1, $r2, $r3, $r4, $r5;

        $r0 = staticinvoke <com.jidesoft.icons.IconsFactory: javax.swing.ImageIcon getImageIcon(java.lang.Class,java.lang.String)>(class "Lcom/jidesoft/plaf/xerto/XertoPainter;", "icons/selected.gif");

        <com.jidesoft.plaf.xerto.XertoPainter: javax.swing.ImageIcon SELECTED> = $r0;

        $r1 = staticinvoke <com.jidesoft.icons.IconsFactory: javax.swing.ImageIcon getImageIcon(java.lang.Class,java.lang.String)>(class "Lcom/jidesoft/plaf/xerto/XertoPainter;", "icons/selected_c.gif");

        <com.jidesoft.plaf.xerto.XertoPainter: javax.swing.ImageIcon SELECTED_C> = $r1;

        $r2 = staticinvoke <com.jidesoft.icons.IconsFactory: javax.swing.ImageIcon getImageIcon(java.lang.Class,java.lang.String)>(class "Lcom/jidesoft/plaf/xerto/XertoPainter;", "icons/rollover.gif");

        <com.jidesoft.plaf.xerto.XertoPainter: javax.swing.ImageIcon ROLLOVER> = $r2;

        $r3 = staticinvoke <com.jidesoft.icons.IconsFactory: javax.swing.ImageIcon getImageIcon(java.lang.Class,java.lang.String)>(class "Lcom/jidesoft/plaf/xerto/XertoPainter;", "icons/rollover_c.gif");

        <com.jidesoft.plaf.xerto.XertoPainter: javax.swing.ImageIcon ROLLOVER_C> = $r3;

        $r4 = staticinvoke <com.jidesoft.icons.IconsFactory: javax.swing.ImageIcon getImageIcon(java.lang.Class,java.lang.String)>(class "Lcom/jidesoft/plaf/xerto/XertoPainter;", "icons/pressed.gif");

        <com.jidesoft.plaf.xerto.XertoPainter: javax.swing.ImageIcon PRESSED> = $r4;

        $r5 = staticinvoke <com.jidesoft.icons.IconsFactory: javax.swing.ImageIcon getImageIcon(java.lang.Class,java.lang.String)>(class "Lcom/jidesoft/plaf/xerto/XertoPainter;", "icons/pressed_c.gif");

        <com.jidesoft.plaf.xerto.XertoPainter: javax.swing.ImageIcon PRESSED_C> = $r5;

        return;
    }
}
