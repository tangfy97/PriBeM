public class org.sat4j.tools.ExtendedDimacsArrayReader extends org.sat4j.tools.DimacsArrayReader
{
    public static final int FALSE;
    public static final int TRUE;
    public static final int NOT;
    public static final int AND;
    public static final int NAND;
    public static final int OR;
    public static final int NOR;
    public static final int XOR;
    public static final int XNOR;
    public static final int IMPLIES;
    public static final int IFF;
    public static final int IFTHENELSE;
    public static final int ATLEAST;
    public static final int ATMOST;
    public static final int COUNT;
    private static final long serialVersionUID;
    private final org.sat4j.tools.GateTranslator gater;
    static final boolean $assertionsDisabled;

    public void <init>(org.sat4j.specs.ISolver)
    {
        org.sat4j.tools.ExtendedDimacsArrayReader r0;
        org.sat4j.tools.GateTranslator $r2;
        org.sat4j.specs.ISolver r1;

        r0 := @this: org.sat4j.tools.ExtendedDimacsArrayReader;

        r1 := @parameter0: org.sat4j.specs.ISolver;

        specialinvoke r0.<org.sat4j.tools.DimacsArrayReader: void <init>(org.sat4j.specs.ISolver)>(r1);

        $r2 = new org.sat4j.tools.GateTranslator;

        specialinvoke $r2.<org.sat4j.tools.GateTranslator: void <init>(org.sat4j.specs.ISolver)>(r1);

        r0.<org.sat4j.tools.ExtendedDimacsArrayReader: org.sat4j.tools.GateTranslator gater> = $r2;

        return;
    }

    protected boolean handleConstr(int, int, int[]) throws org.sat4j.specs.ContradictionException
    {
        org.sat4j.tools.ExtendedDimacsArrayReader r0;
        int[] r1;
        boolean $z0, $z1, $z2, $z3;
        java.lang.StringBuilder $r19, $r20, $r21, $r22;
        java.lang.AssertionError $r3, $r13, $r15, $r17;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        java.lang.String $r23;
        java.lang.UnsupportedOperationException $r18;
        org.sat4j.tools.GateTranslator $r2, $r5, $r7, $r9, $r11, $r12, $r14, $r16;
        org.sat4j.core.VecInt $r4, $r6, $r8, $r10;

        r0 := @this: org.sat4j.tools.ExtendedDimacsArrayReader;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: int[];

        tableswitch(i0)
        {
            case 1: goto label01;
            case 2: goto label03;
            case 3: goto label06;
            case 4: goto label08;
            case 5: goto label13;
            case 6: goto label05;
            case 7: goto label13;
            case 8: goto label09;
            case 9: goto label13;
            case 10: goto label13;
            case 11: goto label10;
            case 12: goto label11;
            default: goto label13;
        };

     label01:
        $z3 = <org.sat4j.tools.ExtendedDimacsArrayReader: boolean $assertionsDisabled>;

        if $z3 != 0 goto label02;

        $i9 = lengthof r1;

        if $i9 == 0 goto label02;

        $r17 = new java.lang.AssertionError;

        specialinvoke $r17.<java.lang.AssertionError: void <init>()>();

        throw $r17;

     label02:
        $r16 = r0.<org.sat4j.tools.ExtendedDimacsArrayReader: org.sat4j.tools.GateTranslator gater>;

        virtualinvoke $r16.<org.sat4j.tools.GateTranslator: org.sat4j.specs.IConstr gateFalse(int)>(i1);

        goto label14;

     label03:
        $z2 = <org.sat4j.tools.ExtendedDimacsArrayReader: boolean $assertionsDisabled>;

        if $z2 != 0 goto label04;

        $i8 = lengthof r1;

        if $i8 == 0 goto label04;

        $r15 = new java.lang.AssertionError;

        specialinvoke $r15.<java.lang.AssertionError: void <init>()>();

        throw $r15;

     label04:
        $r14 = r0.<org.sat4j.tools.ExtendedDimacsArrayReader: org.sat4j.tools.GateTranslator gater>;

        virtualinvoke $r14.<org.sat4j.tools.GateTranslator: org.sat4j.specs.IConstr gateTrue(int)>(i1);

        goto label14;

     label05:
        $r8 = new org.sat4j.core.VecInt;

        specialinvoke $r8.<org.sat4j.core.VecInt: void <init>(int[])>(r1);

        $r9 = r0.<org.sat4j.tools.ExtendedDimacsArrayReader: org.sat4j.tools.GateTranslator gater>;

        virtualinvoke $r9.<org.sat4j.tools.GateTranslator: org.sat4j.specs.IConstr[] or(int,org.sat4j.specs.IVecInt)>(i1, $r8);

        goto label14;

     label06:
        $z1 = <org.sat4j.tools.ExtendedDimacsArrayReader: boolean $assertionsDisabled>;

        if $z1 != 0 goto label07;

        $i7 = lengthof r1;

        if $i7 == 1 goto label07;

        $r13 = new java.lang.AssertionError;

        specialinvoke $r13.<java.lang.AssertionError: void <init>()>();

        throw $r13;

     label07:
        $r12 = r0.<org.sat4j.tools.ExtendedDimacsArrayReader: org.sat4j.tools.GateTranslator gater>;

        $i6 = r1[0];

        virtualinvoke $r12.<org.sat4j.tools.GateTranslator: org.sat4j.specs.IConstr[] not(int,int)>(i1, $i6);

        goto label14;

     label08:
        $r10 = new org.sat4j.core.VecInt;

        specialinvoke $r10.<org.sat4j.core.VecInt: void <init>(int[])>(r1);

        $r11 = r0.<org.sat4j.tools.ExtendedDimacsArrayReader: org.sat4j.tools.GateTranslator gater>;

        virtualinvoke $r11.<org.sat4j.tools.GateTranslator: org.sat4j.specs.IConstr[] and(int,org.sat4j.specs.IVecInt)>(i1, $r10);

        goto label14;

     label09:
        $r6 = new org.sat4j.core.VecInt;

        specialinvoke $r6.<org.sat4j.core.VecInt: void <init>(int[])>(r1);

        $r7 = r0.<org.sat4j.tools.ExtendedDimacsArrayReader: org.sat4j.tools.GateTranslator gater>;

        virtualinvoke $r7.<org.sat4j.tools.GateTranslator: org.sat4j.specs.IConstr[] xor(int,org.sat4j.specs.IVecInt)>(i1, $r6);

        goto label14;

     label10:
        $r4 = new org.sat4j.core.VecInt;

        specialinvoke $r4.<org.sat4j.core.VecInt: void <init>(int[])>(r1);

        $r5 = r0.<org.sat4j.tools.ExtendedDimacsArrayReader: org.sat4j.tools.GateTranslator gater>;

        virtualinvoke $r5.<org.sat4j.tools.GateTranslator: org.sat4j.specs.IConstr[] iff(int,org.sat4j.specs.IVecInt)>(i1, $r4);

        goto label14;

     label11:
        $z0 = <org.sat4j.tools.ExtendedDimacsArrayReader: boolean $assertionsDisabled>;

        if $z0 != 0 goto label12;

        $i5 = lengthof r1;

        if $i5 == 3 goto label12;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label12:
        $r2 = r0.<org.sat4j.tools.ExtendedDimacsArrayReader: org.sat4j.tools.GateTranslator gater>;

        $i4 = r1[0];

        $i3 = r1[1];

        $i2 = r1[2];

        virtualinvoke $r2.<org.sat4j.tools.GateTranslator: org.sat4j.specs.IConstr[] ite(int,int,int,int)>(i1, $i4, $i3, $i2);

        goto label14;

     label13:
        $r18 = new java.lang.UnsupportedOperationException;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Gate type ");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not handled yet");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r18.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r23);

        throw $r18;

     label14:
        return 1;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        <org.sat4j.tools.ExtendedDimacsArrayReader: long serialVersionUID> = 1L;

        <org.sat4j.tools.ExtendedDimacsArrayReader: int COUNT> = 15;

        <org.sat4j.tools.ExtendedDimacsArrayReader: int ATMOST> = 14;

        <org.sat4j.tools.ExtendedDimacsArrayReader: int ATLEAST> = 13;

        <org.sat4j.tools.ExtendedDimacsArrayReader: int IFTHENELSE> = 12;

        <org.sat4j.tools.ExtendedDimacsArrayReader: int IFF> = 11;

        <org.sat4j.tools.ExtendedDimacsArrayReader: int IMPLIES> = 10;

        <org.sat4j.tools.ExtendedDimacsArrayReader: int XNOR> = 9;

        <org.sat4j.tools.ExtendedDimacsArrayReader: int XOR> = 8;

        <org.sat4j.tools.ExtendedDimacsArrayReader: int NOR> = 7;

        <org.sat4j.tools.ExtendedDimacsArrayReader: int OR> = 6;

        <org.sat4j.tools.ExtendedDimacsArrayReader: int NAND> = 5;

        <org.sat4j.tools.ExtendedDimacsArrayReader: int AND> = 4;

        <org.sat4j.tools.ExtendedDimacsArrayReader: int NOT> = 3;

        <org.sat4j.tools.ExtendedDimacsArrayReader: int TRUE> = 2;

        <org.sat4j.tools.ExtendedDimacsArrayReader: int FALSE> = 1;

        $r0 = class "Lorg/sat4j/tools/ExtendedDimacsArrayReader;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.sat4j.tools.ExtendedDimacsArrayReader: boolean $assertionsDisabled> = $z1;

        return;
    }
}
