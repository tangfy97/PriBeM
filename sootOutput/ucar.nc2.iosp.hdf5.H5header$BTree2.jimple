class ucar.nc2.iosp.hdf5.H5header$BTree2 extends java.lang.Object
{
    private java.lang.String owner;
    private byte btreeType;
    private int nodeSize;
    private short recordSize;
    private short numRecordsRootNode;
    private java.util.List entryList;
    final ucar.nc2.iosp.hdf5.H5header this$0;

    void <init>(ucar.nc2.iosp.hdf5.H5header, java.lang.String, long) throws java.io.IOException
    {
        byte[] r5;
        byte $b2, $b3, $b13;
        ucar.nc2.iosp.hdf5.H5header$BTree2$InternalNode $r53;
        ucar.nc2.iosp.hdf5.H5header r1;
        java.lang.StringBuilder $r22, $r23, $r24, $r25, $r26, $r27, $r31, $r32, $r33, $r34, $r35, $r36, $r37, $r38, $r39, $r40, $r44, $r45, $r49, $r51, $r52;
        ucar.nc2.iosp.hdf5.H5header$BTree2$LeafNode $r54;
        long l0, $l1, $l7, $l9;
        java.util.ArrayList $r47;
        short $s5, $s6, $s8, $s10, $s11, $s12, $s15, $s16;
        java.lang.String r3, $r28, $r41, $r46, $r48;
        java.lang.IllegalStateException $r50;
        ucar.unidata.io.RandomAccessFile $r4, $r6, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16;
        boolean $z0, $z1;
        java.util.List $r18;
        int $i4, $i14, $i17, $i18, $i19, $i20, $i21, $i22, $i23;
        java.io.PrintStream $r20, $r29;
        ucar.nc2.iosp.hdf5.H5header$BTree2 r0;

        r0 := @this: ucar.nc2.iosp.hdf5.H5header$BTree2;

        r1 := @parameter0: ucar.nc2.iosp.hdf5.H5header;

        r3 := @parameter1: java.lang.String;

        l0 := @parameter2: long;

        r0.<ucar.nc2.iosp.hdf5.H5header$BTree2: ucar.nc2.iosp.hdf5.H5header this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r47 = new java.util.ArrayList;

        specialinvoke $r47.<java.util.ArrayList: void <init>()>();

        r0.<ucar.nc2.iosp.hdf5.H5header$BTree2: java.util.List entryList> = $r47;

        r0.<ucar.nc2.iosp.hdf5.H5header$BTree2: java.lang.String owner> = r3;

        $r4 = staticinvoke <ucar.nc2.iosp.hdf5.H5header: ucar.unidata.io.RandomAccessFile access$1400(ucar.nc2.iosp.hdf5.H5header)>(r1);

        $l1 = staticinvoke <ucar.nc2.iosp.hdf5.H5header: long access$100(ucar.nc2.iosp.hdf5.H5header,long)>(r1, l0);

        virtualinvoke $r4.<ucar.unidata.io.RandomAccessFile: void seek(long)>($l1);

        r5 = newarray (byte)[4];

        $r6 = staticinvoke <ucar.nc2.iosp.hdf5.H5header: ucar.unidata.io.RandomAccessFile access$1400(ucar.nc2.iosp.hdf5.H5header)>(r1);

        virtualinvoke $r6.<ucar.unidata.io.RandomAccessFile: int read(byte[])>(r5);

        $r48 = new java.lang.String;

        specialinvoke $r48.<java.lang.String: void <init>(byte[])>(r5);

        $z0 = virtualinvoke $r48.<java.lang.String: boolean equals(java.lang.Object)>("BTHD");

        if $z0 != 0 goto label1;

        $r50 = new java.lang.IllegalStateException;

        $r49 = new java.lang.StringBuilder;

        specialinvoke $r49.<java.lang.StringBuilder: void <init>()>();

        $r44 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r48);

        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" should equal BTHD");

        $r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r50.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r46);

        throw $r50;

     label1:
        $r8 = staticinvoke <ucar.nc2.iosp.hdf5.H5header: ucar.unidata.io.RandomAccessFile access$1400(ucar.nc2.iosp.hdf5.H5header)>(r1);

        $b2 = virtualinvoke $r8.<ucar.unidata.io.RandomAccessFile: byte readByte()>();

        $r9 = staticinvoke <ucar.nc2.iosp.hdf5.H5header: ucar.unidata.io.RandomAccessFile access$1400(ucar.nc2.iosp.hdf5.H5header)>(r1);

        $b3 = virtualinvoke $r9.<ucar.unidata.io.RandomAccessFile: byte readByte()>();

        r0.<ucar.nc2.iosp.hdf5.H5header$BTree2: byte btreeType> = $b3;

        $r10 = staticinvoke <ucar.nc2.iosp.hdf5.H5header: ucar.unidata.io.RandomAccessFile access$1400(ucar.nc2.iosp.hdf5.H5header)>(r1);

        $i4 = virtualinvoke $r10.<ucar.unidata.io.RandomAccessFile: int readInt()>();

        r0.<ucar.nc2.iosp.hdf5.H5header$BTree2: int nodeSize> = $i4;

        $r11 = staticinvoke <ucar.nc2.iosp.hdf5.H5header: ucar.unidata.io.RandomAccessFile access$1400(ucar.nc2.iosp.hdf5.H5header)>(r1);

        $s5 = virtualinvoke $r11.<ucar.unidata.io.RandomAccessFile: short readShort()>();

        r0.<ucar.nc2.iosp.hdf5.H5header$BTree2: short recordSize> = $s5;

        $r12 = staticinvoke <ucar.nc2.iosp.hdf5.H5header: ucar.unidata.io.RandomAccessFile access$1400(ucar.nc2.iosp.hdf5.H5header)>(r1);

        $s6 = virtualinvoke $r12.<ucar.unidata.io.RandomAccessFile: short readShort()>();

        $r13 = staticinvoke <ucar.nc2.iosp.hdf5.H5header: ucar.unidata.io.RandomAccessFile access$1400(ucar.nc2.iosp.hdf5.H5header)>(r1);

        virtualinvoke $r13.<ucar.unidata.io.RandomAccessFile: byte readByte()>();

        $r14 = staticinvoke <ucar.nc2.iosp.hdf5.H5header: ucar.unidata.io.RandomAccessFile access$1400(ucar.nc2.iosp.hdf5.H5header)>(r1);

        virtualinvoke $r14.<ucar.unidata.io.RandomAccessFile: byte readByte()>();

        $l7 = staticinvoke <ucar.nc2.iosp.hdf5.H5header: long access$4000(ucar.nc2.iosp.hdf5.H5header)>(r1);

        $r15 = staticinvoke <ucar.nc2.iosp.hdf5.H5header: ucar.unidata.io.RandomAccessFile access$1400(ucar.nc2.iosp.hdf5.H5header)>(r1);

        $s8 = virtualinvoke $r15.<ucar.unidata.io.RandomAccessFile: short readShort()>();

        r0.<ucar.nc2.iosp.hdf5.H5header$BTree2: short numRecordsRootNode> = $s8;

        $l9 = staticinvoke <ucar.nc2.iosp.hdf5.H5header: long access$3900(ucar.nc2.iosp.hdf5.H5header)>(r1);

        $r16 = staticinvoke <ucar.nc2.iosp.hdf5.H5header: ucar.unidata.io.RandomAccessFile access$1400(ucar.nc2.iosp.hdf5.H5header)>(r1);

        virtualinvoke $r16.<ucar.unidata.io.RandomAccessFile: int readInt()>();

        $z1 = staticinvoke <ucar.nc2.iosp.hdf5.H5header: boolean access$2200()>();

        if $z1 == 0 goto label2;

        $r20 = staticinvoke <ucar.nc2.iosp.hdf5.H5header: java.io.PrintStream access$400(ucar.nc2.iosp.hdf5.H5header)>(r1);

        $r51 = new java.lang.StringBuilder;

        specialinvoke $r51.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("BTree2 version=");

        $i17 = (int) $b2;

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i17);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" type=");

        $b13 = r0.<ucar.nc2.iosp.hdf5.H5header$BTree2: byte btreeType>;

        $i18 = (int) $b13;

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i18);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" treeDepth=");

        $i19 = (int) $s6;

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i19);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r20.<java.io.PrintStream: void println(java.lang.String)>($r28);

        $r29 = staticinvoke <ucar.nc2.iosp.hdf5.H5header: java.io.PrintStream access$400(ucar.nc2.iosp.hdf5.H5header)>(r1);

        $r52 = new java.lang.StringBuilder;

        specialinvoke $r52.<java.lang.StringBuilder: void <init>()>();

        $r31 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" nodeSize=");

        $i14 = r0.<ucar.nc2.iosp.hdf5.H5header$BTree2: int nodeSize>;

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i14);

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" recordSize=");

        $s15 = r0.<ucar.nc2.iosp.hdf5.H5header$BTree2: short recordSize>;

        $i20 = (int) $s15;

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i20);

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" numRecordsRootNode=");

        $s16 = r0.<ucar.nc2.iosp.hdf5.H5header$BTree2: short numRecordsRootNode>;

        $i21 = (int) $s16;

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i21);

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" totalRecords=");

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l9);

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" rootNodeAddress=");

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l7);

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r29.<java.io.PrintStream: void println(java.lang.String)>($r41);

     label2:
        $i22 = (int) $s6;

        if $i22 <= 0 goto label3;

        $r53 = new ucar.nc2.iosp.hdf5.H5header$BTree2$InternalNode;

        $s12 = r0.<ucar.nc2.iosp.hdf5.H5header$BTree2: short numRecordsRootNode>;

        $s11 = r0.<ucar.nc2.iosp.hdf5.H5header$BTree2: short recordSize>;

        $i23 = (int) $s6;

        specialinvoke $r53.<ucar.nc2.iosp.hdf5.H5header$BTree2$InternalNode: void <init>(ucar.nc2.iosp.hdf5.H5header$BTree2,long,short,short,int)>(r0, $l7, $s12, $s11, $i23);

        virtualinvoke $r53.<ucar.nc2.iosp.hdf5.H5header$BTree2$InternalNode: void recurse()>();

        goto label4;

     label3:
        $r54 = new ucar.nc2.iosp.hdf5.H5header$BTree2$LeafNode;

        $s10 = r0.<ucar.nc2.iosp.hdf5.H5header$BTree2: short numRecordsRootNode>;

        specialinvoke $r54.<ucar.nc2.iosp.hdf5.H5header$BTree2$LeafNode: void <init>(ucar.nc2.iosp.hdf5.H5header$BTree2,long,short)>(r0, $l7, $s10);

        $r18 = r0.<ucar.nc2.iosp.hdf5.H5header$BTree2: java.util.List entryList>;

        virtualinvoke $r54.<ucar.nc2.iosp.hdf5.H5header$BTree2$LeafNode: void addEntries(java.util.List)>($r18);

     label4:
        return;
    }

    java.lang.Object readRecord(int) throws java.io.IOException
    {
        ucar.nc2.iosp.hdf5.H5header$BTree2$Record3 $r7;
        ucar.nc2.iosp.hdf5.H5header$BTree2$Record4 $r6;
        java.lang.IllegalStateException $r10;
        ucar.nc2.iosp.hdf5.H5header$BTree2$Record70 $r3;
        ucar.nc2.iosp.hdf5.H5header$BTree2$Record1 $r9;
        ucar.nc2.iosp.hdf5.H5header$BTree2$Record2 $r8;
        ucar.nc2.iosp.hdf5.H5header$BTree2$Record8 $r2;
        ucar.nc2.iosp.hdf5.H5header$BTree2$Record5 $r5;
        ucar.nc2.iosp.hdf5.H5header$BTree2$Record6 $r4;
        ucar.nc2.iosp.hdf5.H5header$BTree2$Record9 $r0;
        ucar.nc2.iosp.hdf5.H5header$BTree2 r1;
        int i0;

        r1 := @this: ucar.nc2.iosp.hdf5.H5header$BTree2;

        i0 := @parameter0: int;

        tableswitch(i0)
        {
            case 1: goto label01;
            case 2: goto label02;
            case 3: goto label03;
            case 4: goto label04;
            case 5: goto label05;
            case 6: goto label06;
            case 7: goto label07;
            case 8: goto label08;
            case 9: goto label09;
            default: goto label10;
        };

     label01:
        $r9 = new ucar.nc2.iosp.hdf5.H5header$BTree2$Record1;

        specialinvoke $r9.<ucar.nc2.iosp.hdf5.H5header$BTree2$Record1: void <init>(ucar.nc2.iosp.hdf5.H5header$BTree2)>(r1);

        return $r9;

     label02:
        $r8 = new ucar.nc2.iosp.hdf5.H5header$BTree2$Record2;

        specialinvoke $r8.<ucar.nc2.iosp.hdf5.H5header$BTree2$Record2: void <init>(ucar.nc2.iosp.hdf5.H5header$BTree2)>(r1);

        return $r8;

     label03:
        $r7 = new ucar.nc2.iosp.hdf5.H5header$BTree2$Record3;

        specialinvoke $r7.<ucar.nc2.iosp.hdf5.H5header$BTree2$Record3: void <init>(ucar.nc2.iosp.hdf5.H5header$BTree2)>(r1);

        return $r7;

     label04:
        $r6 = new ucar.nc2.iosp.hdf5.H5header$BTree2$Record4;

        specialinvoke $r6.<ucar.nc2.iosp.hdf5.H5header$BTree2$Record4: void <init>(ucar.nc2.iosp.hdf5.H5header$BTree2)>(r1);

        return $r6;

     label05:
        $r5 = new ucar.nc2.iosp.hdf5.H5header$BTree2$Record5;

        specialinvoke $r5.<ucar.nc2.iosp.hdf5.H5header$BTree2$Record5: void <init>(ucar.nc2.iosp.hdf5.H5header$BTree2)>(r1);

        return $r5;

     label06:
        $r4 = new ucar.nc2.iosp.hdf5.H5header$BTree2$Record6;

        specialinvoke $r4.<ucar.nc2.iosp.hdf5.H5header$BTree2$Record6: void <init>(ucar.nc2.iosp.hdf5.H5header$BTree2)>(r1);

        return $r4;

     label07:
        $r3 = new ucar.nc2.iosp.hdf5.H5header$BTree2$Record70;

        specialinvoke $r3.<ucar.nc2.iosp.hdf5.H5header$BTree2$Record70: void <init>(ucar.nc2.iosp.hdf5.H5header$BTree2)>(r1);

        return $r3;

     label08:
        $r2 = new ucar.nc2.iosp.hdf5.H5header$BTree2$Record8;

        specialinvoke $r2.<ucar.nc2.iosp.hdf5.H5header$BTree2$Record8: void <init>(ucar.nc2.iosp.hdf5.H5header$BTree2)>(r1);

        return $r2;

     label09:
        $r0 = new ucar.nc2.iosp.hdf5.H5header$BTree2$Record9;

        specialinvoke $r0.<ucar.nc2.iosp.hdf5.H5header$BTree2$Record9: void <init>(ucar.nc2.iosp.hdf5.H5header$BTree2)>(r1);

        return $r0;

     label10:
        $r10 = new java.lang.IllegalStateException;

        specialinvoke $r10.<java.lang.IllegalStateException: void <init>()>();

        throw $r10;
    }

    static java.util.List access$2000(ucar.nc2.iosp.hdf5.H5header$BTree2)
    {
        java.util.List $r1;
        ucar.nc2.iosp.hdf5.H5header$BTree2 r0;

        r0 := @parameter0: ucar.nc2.iosp.hdf5.H5header$BTree2;

        $r1 = r0.<ucar.nc2.iosp.hdf5.H5header$BTree2: java.util.List entryList>;

        return $r1;
    }

    static byte access$2100(ucar.nc2.iosp.hdf5.H5header$BTree2)
    {
        byte $b0;
        ucar.nc2.iosp.hdf5.H5header$BTree2 r0;

        r0 := @parameter0: ucar.nc2.iosp.hdf5.H5header$BTree2;

        $b0 = r0.<ucar.nc2.iosp.hdf5.H5header$BTree2: byte btreeType>;

        return $b0;
    }

    static int access$5600(ucar.nc2.iosp.hdf5.H5header$BTree2)
    {
        int $i0;
        ucar.nc2.iosp.hdf5.H5header$BTree2 r0;

        r0 := @parameter0: ucar.nc2.iosp.hdf5.H5header$BTree2;

        $i0 = r0.<ucar.nc2.iosp.hdf5.H5header$BTree2: int nodeSize>;

        return $i0;
    }

    static short access$5800(ucar.nc2.iosp.hdf5.H5header$BTree2)
    {
        short $s0;
        ucar.nc2.iosp.hdf5.H5header$BTree2 r0;

        r0 := @parameter0: ucar.nc2.iosp.hdf5.H5header$BTree2;

        $s0 = r0.<ucar.nc2.iosp.hdf5.H5header$BTree2: short recordSize>;

        return $s0;
    }
}
