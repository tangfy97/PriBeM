public class org.codehaus.jackson.map.deser.std.UntypedObjectDeserializer extends org.codehaus.jackson.map.deser.std.StdDeserializer
{
    private static final java.lang.Object[] NO_OBJECTS;

    public void <init>()
    {
        org.codehaus.jackson.map.deser.std.UntypedObjectDeserializer r0;

        r0 := @this: org.codehaus.jackson.map.deser.std.UntypedObjectDeserializer;

        specialinvoke r0.<org.codehaus.jackson.map.deser.std.StdDeserializer: void <init>(java.lang.Class)>(class "Ljava/lang/Object;");

        return;
    }

    public java.lang.Object deserialize(org.codehaus.jackson.JsonParser, org.codehaus.jackson.map.DeserializationContext) throws java.io.IOException, org.codehaus.jackson.JsonProcessingException
    {
        org.codehaus.jackson.JsonToken $r2;
        java.lang.Double $r7;
        org.codehaus.jackson.map.DeserializationContext r5;
        java.math.BigDecimal $r8;
        org.codehaus.jackson.map.JsonMappingException $r18;
        int[] $r1;
        int $i0, $i1;
        java.lang.Boolean $r3, $r4;
        java.math.BigInteger $r11;
        java.lang.String $r12;
        java.lang.Number $r10;
        org.codehaus.jackson.JsonParser r0;
        boolean $z0, $z1;
        double $d0;
        org.codehaus.jackson.map.DeserializationConfig$Feature $r6, $r9;
        org.codehaus.jackson.map.deser.std.UntypedObjectDeserializer r14;
        java.lang.Object $r13, $r15, $r16, $r17;

        r14 := @this: org.codehaus.jackson.map.deser.std.UntypedObjectDeserializer;

        r0 := @parameter0: org.codehaus.jackson.JsonParser;

        r5 := @parameter1: org.codehaus.jackson.map.DeserializationContext;

        $r1 = <org.codehaus.jackson.map.deser.std.UntypedObjectDeserializer$1: int[] $SwitchMap$org$codehaus$jackson$JsonToken>;

        $r2 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonToken getCurrentToken()>();

        $i0 = virtualinvoke $r2.<org.codehaus.jackson.JsonToken: int ordinal()>();

        $i1 = $r1[$i0];

        tableswitch($i1)
        {
            case 1: goto label01;
            case 2: goto label02;
            case 3: goto label03;
            case 4: goto label04;
            case 5: goto label05;
            case 6: goto label06;
            case 7: goto label07;
            case 8: goto label08;
            case 9: goto label10;
            case 10: goto label12;
            case 11: goto label13;
            case 12: goto label14;
            default: goto label15;
        };

     label01:
        $r17 = virtualinvoke r14.<org.codehaus.jackson.map.deser.std.UntypedObjectDeserializer: java.lang.Object mapObject(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext)>(r0, r5);

        return $r17;

     label02:
        goto label15;

     label03:
        $r16 = virtualinvoke r14.<org.codehaus.jackson.map.deser.std.UntypedObjectDeserializer: java.lang.Object mapArray(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext)>(r0, r5);

        return $r16;

     label04:
        goto label15;

     label05:
        $r15 = virtualinvoke r14.<org.codehaus.jackson.map.deser.std.UntypedObjectDeserializer: java.lang.Object mapObject(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext)>(r0, r5);

        return $r15;

     label06:
        $r13 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: java.lang.Object getEmbeddedObject()>();

        return $r13;

     label07:
        $r12 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: java.lang.String getText()>();

        return $r12;

     label08:
        $r9 = <org.codehaus.jackson.map.DeserializationConfig$Feature: org.codehaus.jackson.map.DeserializationConfig$Feature USE_BIG_INTEGER_FOR_INTS>;

        $z1 = virtualinvoke r5.<org.codehaus.jackson.map.DeserializationContext: boolean isEnabled(org.codehaus.jackson.map.DeserializationConfig$Feature)>($r9);

        if $z1 == 0 goto label09;

        $r11 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: java.math.BigInteger getBigIntegerValue()>();

        return $r11;

     label09:
        $r10 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: java.lang.Number getNumberValue()>();

        return $r10;

     label10:
        $r6 = <org.codehaus.jackson.map.DeserializationConfig$Feature: org.codehaus.jackson.map.DeserializationConfig$Feature USE_BIG_DECIMAL_FOR_FLOATS>;

        $z0 = virtualinvoke r5.<org.codehaus.jackson.map.DeserializationContext: boolean isEnabled(org.codehaus.jackson.map.DeserializationConfig$Feature)>($r6);

        if $z0 == 0 goto label11;

        $r8 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: java.math.BigDecimal getDecimalValue()>();

        return $r8;

     label11:
        $d0 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: double getDoubleValue()>();

        $r7 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        return $r7;

     label12:
        $r4 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        return $r4;

     label13:
        $r3 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        return $r3;

     label14:
        return null;

     label15:
        $r18 = virtualinvoke r5.<org.codehaus.jackson.map.DeserializationContext: org.codehaus.jackson.map.JsonMappingException mappingException(java.lang.Class)>(class "Ljava/lang/Object;");

        throw $r18;
    }

    public java.lang.Object deserializeWithType(org.codehaus.jackson.JsonParser, org.codehaus.jackson.map.DeserializationContext, org.codehaus.jackson.map.TypeDeserializer) throws java.io.IOException, org.codehaus.jackson.JsonProcessingException
    {
        org.codehaus.jackson.JsonToken $r1;
        java.lang.Double $r7;
        java.lang.Integer $r10;
        org.codehaus.jackson.map.DeserializationContext r5;
        java.math.BigDecimal $r8;
        org.codehaus.jackson.map.JsonMappingException $r16;
        int[] $r2;
        int $i0, $i1, $i2;
        java.lang.Boolean $r3, $r4;
        java.math.BigInteger $r11;
        java.lang.String $r12;
        org.codehaus.jackson.JsonParser r0;
        boolean $z0, $z1;
        double $d0;
        org.codehaus.jackson.map.DeserializationConfig$Feature $r6, $r9;
        org.codehaus.jackson.map.TypeDeserializer r14;
        org.codehaus.jackson.map.deser.std.UntypedObjectDeserializer r17;
        java.lang.Object $r13, $r15;

        r17 := @this: org.codehaus.jackson.map.deser.std.UntypedObjectDeserializer;

        r0 := @parameter0: org.codehaus.jackson.JsonParser;

        r5 := @parameter1: org.codehaus.jackson.map.DeserializationContext;

        r14 := @parameter2: org.codehaus.jackson.map.TypeDeserializer;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonToken getCurrentToken()>();

        $r2 = <org.codehaus.jackson.map.deser.std.UntypedObjectDeserializer$1: int[] $SwitchMap$org$codehaus$jackson$JsonToken>;

        $i0 = virtualinvoke $r1.<org.codehaus.jackson.JsonToken: int ordinal()>();

        $i1 = $r2[$i0];

        tableswitch($i1)
        {
            case 1: goto label01;
            case 2: goto label11;
            case 3: goto label01;
            case 4: goto label11;
            case 5: goto label01;
            case 6: goto label09;
            case 7: goto label02;
            case 8: goto label03;
            case 9: goto label05;
            case 10: goto label07;
            case 11: goto label08;
            case 12: goto label10;
            default: goto label11;
        };

     label01:
        $r15 = virtualinvoke r14.<org.codehaus.jackson.map.TypeDeserializer: java.lang.Object deserializeTypedFromAny(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext)>(r0, r5);

        return $r15;

     label02:
        $r12 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: java.lang.String getText()>();

        return $r12;

     label03:
        $r9 = <org.codehaus.jackson.map.DeserializationConfig$Feature: org.codehaus.jackson.map.DeserializationConfig$Feature USE_BIG_INTEGER_FOR_INTS>;

        $z1 = virtualinvoke r5.<org.codehaus.jackson.map.DeserializationContext: boolean isEnabled(org.codehaus.jackson.map.DeserializationConfig$Feature)>($r9);

        if $z1 == 0 goto label04;

        $r11 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: java.math.BigInteger getBigIntegerValue()>();

        return $r11;

     label04:
        $i2 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: int getIntValue()>();

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        return $r10;

     label05:
        $r6 = <org.codehaus.jackson.map.DeserializationConfig$Feature: org.codehaus.jackson.map.DeserializationConfig$Feature USE_BIG_DECIMAL_FOR_FLOATS>;

        $z0 = virtualinvoke r5.<org.codehaus.jackson.map.DeserializationContext: boolean isEnabled(org.codehaus.jackson.map.DeserializationConfig$Feature)>($r6);

        if $z0 == 0 goto label06;

        $r8 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: java.math.BigDecimal getDecimalValue()>();

        return $r8;

     label06:
        $d0 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: double getDoubleValue()>();

        $r7 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        return $r7;

     label07:
        $r4 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        return $r4;

     label08:
        $r3 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        return $r3;

     label09:
        $r13 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: java.lang.Object getEmbeddedObject()>();

        return $r13;

     label10:
        return null;

     label11:
        $r16 = virtualinvoke r5.<org.codehaus.jackson.map.DeserializationContext: org.codehaus.jackson.map.JsonMappingException mappingException(java.lang.Class)>(class "Ljava/lang/Object;");

        throw $r16;
    }

    protected java.lang.Object mapArray(org.codehaus.jackson.JsonParser, org.codehaus.jackson.map.DeserializationContext) throws java.io.IOException, org.codehaus.jackson.JsonProcessingException
    {
        org.codehaus.jackson.JsonToken $r3, $r4, $r8, $r9;
        java.lang.Object[] $r12, r13;
        org.codehaus.jackson.map.DeserializationContext r0;
        java.util.ArrayList $r10, $r11;
        org.codehaus.jackson.map.util.ObjectBuffer $r5;
        int $i0, $i1, $i2, $i3, $i4, i5, i6;
        org.codehaus.jackson.JsonParser r2;
        boolean $z0;
        org.codehaus.jackson.map.DeserializationConfig$Feature $r1;
        org.codehaus.jackson.map.deser.std.UntypedObjectDeserializer r6;
        java.lang.Object $r7;

        r6 := @this: org.codehaus.jackson.map.deser.std.UntypedObjectDeserializer;

        r2 := @parameter0: org.codehaus.jackson.JsonParser;

        r0 := @parameter1: org.codehaus.jackson.map.DeserializationContext;

        $r1 = <org.codehaus.jackson.map.DeserializationConfig$Feature: org.codehaus.jackson.map.DeserializationConfig$Feature USE_JAVA_ARRAY_FOR_JSON_ARRAY>;

        $z0 = virtualinvoke r0.<org.codehaus.jackson.map.DeserializationContext: boolean isEnabled(org.codehaus.jackson.map.DeserializationConfig$Feature)>($r1);

        if $z0 == 0 goto label1;

        $r12 = virtualinvoke r6.<org.codehaus.jackson.map.deser.std.UntypedObjectDeserializer: java.lang.Object[] mapArrayToArray(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext)>(r2, r0);

        return $r12;

     label1:
        $r3 = virtualinvoke r2.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonToken nextToken()>();

        $r4 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken END_ARRAY>;

        if $r3 != $r4 goto label2;

        $r11 = new java.util.ArrayList;

        specialinvoke $r11.<java.util.ArrayList: void <init>(int)>(4);

        return $r11;

     label2:
        $r5 = virtualinvoke r0.<org.codehaus.jackson.map.DeserializationContext: org.codehaus.jackson.map.util.ObjectBuffer leaseObjectBuffer()>();

        r13 = virtualinvoke $r5.<org.codehaus.jackson.map.util.ObjectBuffer: java.lang.Object[] resetAndStart()>();

        i5 = 0;

        i6 = 0;

     label3:
        $r7 = virtualinvoke r6.<org.codehaus.jackson.map.deser.std.UntypedObjectDeserializer: java.lang.Object deserialize(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext)>(r2, r0);

        i6 = i6 + 1;

        $i0 = lengthof r13;

        if i5 < $i0 goto label4;

        r13 = virtualinvoke $r5.<org.codehaus.jackson.map.util.ObjectBuffer: java.lang.Object[] appendCompletedChunk(java.lang.Object[])>(r13);

        i5 = 0;

     label4:
        $i1 = i5;

        i5 = i5 + 1;

        r13[$i1] = $r7;

        $r8 = virtualinvoke r2.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonToken nextToken()>();

        $r9 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken END_ARRAY>;

        if $r8 != $r9 goto label3;

        $r10 = new java.util.ArrayList;

        $i2 = i6 >> 3;

        $i3 = i6 + $i2;

        $i4 = $i3 + 1;

        specialinvoke $r10.<java.util.ArrayList: void <init>(int)>($i4);

        virtualinvoke $r5.<org.codehaus.jackson.map.util.ObjectBuffer: void completeAndClearBuffer(java.lang.Object[],int,java.util.List)>(r13, i5, $r10);

        return $r10;
    }

    protected java.lang.Object mapObject(org.codehaus.jackson.JsonParser, org.codehaus.jackson.map.DeserializationContext) throws java.io.IOException, org.codehaus.jackson.JsonProcessingException
    {
        org.codehaus.jackson.JsonToken $r1, $r2, $r3, $r8, $r9, $r12, $r13, $r17, $r18, r22;
        org.codehaus.jackson.map.DeserializationContext r6;
        java.util.LinkedHashMap $r14, $r19, $r20, $r21;
        java.lang.String $r4, $r10, $r15;
        org.codehaus.jackson.JsonParser r0;
        org.codehaus.jackson.map.deser.std.UntypedObjectDeserializer r5;
        java.lang.Object $r7, $r11, $r16;

        r5 := @this: org.codehaus.jackson.map.deser.std.UntypedObjectDeserializer;

        r0 := @parameter0: org.codehaus.jackson.JsonParser;

        r6 := @parameter1: org.codehaus.jackson.map.DeserializationContext;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonToken getCurrentToken()>();

        r22 = $r1;

        $r2 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken START_OBJECT>;

        if $r1 != $r2 goto label1;

        r22 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonToken nextToken()>();

     label1:
        $r3 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken FIELD_NAME>;

        if r22 == $r3 goto label2;

        $r21 = new java.util.LinkedHashMap;

        specialinvoke $r21.<java.util.LinkedHashMap: void <init>(int)>(4);

        return $r21;

     label2:
        $r4 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: java.lang.String getText()>();

        virtualinvoke r0.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonToken nextToken()>();

        $r7 = virtualinvoke r5.<org.codehaus.jackson.map.deser.std.UntypedObjectDeserializer: java.lang.Object deserialize(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext)>(r0, r6);

        $r8 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonToken nextToken()>();

        $r9 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken FIELD_NAME>;

        if $r8 == $r9 goto label3;

        $r20 = new java.util.LinkedHashMap;

        specialinvoke $r20.<java.util.LinkedHashMap: void <init>(int)>(4);

        virtualinvoke $r20.<java.util.LinkedHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, $r7);

        return $r20;

     label3:
        $r10 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: java.lang.String getText()>();

        virtualinvoke r0.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonToken nextToken()>();

        $r11 = virtualinvoke r5.<org.codehaus.jackson.map.deser.std.UntypedObjectDeserializer: java.lang.Object deserialize(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext)>(r0, r6);

        $r12 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonToken nextToken()>();

        $r13 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken FIELD_NAME>;

        if $r12 == $r13 goto label4;

        $r19 = new java.util.LinkedHashMap;

        specialinvoke $r19.<java.util.LinkedHashMap: void <init>(int)>(4);

        virtualinvoke $r19.<java.util.LinkedHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, $r7);

        virtualinvoke $r19.<java.util.LinkedHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r10, $r11);

        return $r19;

     label4:
        $r14 = new java.util.LinkedHashMap;

        specialinvoke $r14.<java.util.LinkedHashMap: void <init>()>();

        virtualinvoke $r14.<java.util.LinkedHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, $r7);

        virtualinvoke $r14.<java.util.LinkedHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r10, $r11);

     label5:
        $r15 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: java.lang.String getText()>();

        virtualinvoke r0.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonToken nextToken()>();

        $r16 = virtualinvoke r5.<org.codehaus.jackson.map.deser.std.UntypedObjectDeserializer: java.lang.Object deserialize(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext)>(r0, r6);

        virtualinvoke $r14.<java.util.LinkedHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r15, $r16);

        $r17 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonToken nextToken()>();

        $r18 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken END_OBJECT>;

        if $r17 != $r18 goto label5;

        return $r14;
    }

    protected java.lang.Object[] mapArrayToArray(org.codehaus.jackson.JsonParser, org.codehaus.jackson.map.DeserializationContext) throws java.io.IOException, org.codehaus.jackson.JsonProcessingException
    {
        org.codehaus.jackson.JsonToken $r1, $r2, $r7, $r8;
        java.lang.Object[] $r9, $r10, r11;
        org.codehaus.jackson.map.DeserializationContext r3;
        org.codehaus.jackson.map.util.ObjectBuffer $r4;
        org.codehaus.jackson.map.deser.std.UntypedObjectDeserializer r5;
        int $i0, $i1, i2;
        java.lang.Object $r6;
        org.codehaus.jackson.JsonParser r0;

        r5 := @this: org.codehaus.jackson.map.deser.std.UntypedObjectDeserializer;

        r0 := @parameter0: org.codehaus.jackson.JsonParser;

        r3 := @parameter1: org.codehaus.jackson.map.DeserializationContext;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonToken nextToken()>();

        $r2 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken END_ARRAY>;

        if $r1 != $r2 goto label1;

        $r10 = <org.codehaus.jackson.map.deser.std.UntypedObjectDeserializer: java.lang.Object[] NO_OBJECTS>;

        return $r10;

     label1:
        $r4 = virtualinvoke r3.<org.codehaus.jackson.map.DeserializationContext: org.codehaus.jackson.map.util.ObjectBuffer leaseObjectBuffer()>();

        r11 = virtualinvoke $r4.<org.codehaus.jackson.map.util.ObjectBuffer: java.lang.Object[] resetAndStart()>();

        i2 = 0;

     label2:
        $r6 = virtualinvoke r5.<org.codehaus.jackson.map.deser.std.UntypedObjectDeserializer: java.lang.Object deserialize(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext)>(r0, r3);

        $i0 = lengthof r11;

        if i2 < $i0 goto label3;

        r11 = virtualinvoke $r4.<org.codehaus.jackson.map.util.ObjectBuffer: java.lang.Object[] appendCompletedChunk(java.lang.Object[])>(r11);

        i2 = 0;

     label3:
        $i1 = i2;

        i2 = i2 + 1;

        r11[$i1] = $r6;

        $r7 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonToken nextToken()>();

        $r8 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken END_ARRAY>;

        if $r7 != $r8 goto label2;

        $r9 = virtualinvoke $r4.<org.codehaus.jackson.map.util.ObjectBuffer: java.lang.Object[] completeAndClearBuffer(java.lang.Object[],int)>(r11, i2);

        return $r9;
    }

    static void <clinit>()
    {
        java.lang.Object[] $r0;

        $r0 = newarray (java.lang.Object)[0];

        <org.codehaus.jackson.map.deser.std.UntypedObjectDeserializer: java.lang.Object[] NO_OBJECTS> = $r0;

        return;
    }
}
