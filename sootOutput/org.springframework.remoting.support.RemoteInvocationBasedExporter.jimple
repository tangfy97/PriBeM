public abstract class org.springframework.remoting.support.RemoteInvocationBasedExporter extends org.springframework.remoting.support.RemoteExporter
{
    private org.springframework.remoting.support.RemoteInvocationExecutor remoteInvocationExecutor;

    public void <init>()
    {
        org.springframework.remoting.support.RemoteInvocationBasedExporter r0;
        org.springframework.remoting.support.DefaultRemoteInvocationExecutor $r1;

        r0 := @this: org.springframework.remoting.support.RemoteInvocationBasedExporter;

        specialinvoke r0.<org.springframework.remoting.support.RemoteExporter: void <init>()>();

        $r1 = new org.springframework.remoting.support.DefaultRemoteInvocationExecutor;

        specialinvoke $r1.<org.springframework.remoting.support.DefaultRemoteInvocationExecutor: void <init>()>();

        r0.<org.springframework.remoting.support.RemoteInvocationBasedExporter: org.springframework.remoting.support.RemoteInvocationExecutor remoteInvocationExecutor> = $r1;

        return;
    }

    public void setRemoteInvocationExecutor(org.springframework.remoting.support.RemoteInvocationExecutor)
    {
        org.springframework.remoting.support.RemoteInvocationExecutor r1;
        org.springframework.remoting.support.RemoteInvocationBasedExporter r0;

        r0 := @this: org.springframework.remoting.support.RemoteInvocationBasedExporter;

        r1 := @parameter0: org.springframework.remoting.support.RemoteInvocationExecutor;

        r0.<org.springframework.remoting.support.RemoteInvocationBasedExporter: org.springframework.remoting.support.RemoteInvocationExecutor remoteInvocationExecutor> = r1;

        return;
    }

    public org.springframework.remoting.support.RemoteInvocationExecutor getRemoteInvocationExecutor()
    {
        org.springframework.remoting.support.RemoteInvocationExecutor $r1;
        org.springframework.remoting.support.RemoteInvocationBasedExporter r0;

        r0 := @this: org.springframework.remoting.support.RemoteInvocationBasedExporter;

        $r1 = r0.<org.springframework.remoting.support.RemoteInvocationBasedExporter: org.springframework.remoting.support.RemoteInvocationExecutor remoteInvocationExecutor>;

        return $r1;
    }

    protected java.lang.Object invoke(org.springframework.remoting.support.RemoteInvocation, java.lang.Object) throws java.lang.NoSuchMethodException, java.lang.IllegalAccessException, java.lang.reflect.InvocationTargetException
    {
        java.lang.NoSuchMethodException $r23;
        org.springframework.remoting.support.RemoteInvocation r3;
        boolean $z0, $z1, $z2, $z3;
        java.lang.IllegalAccessException $r17;
        java.lang.reflect.InvocationTargetException $r10;
        java.lang.StringBuilder $r6, $r8, $r12, $r14, $r19, $r21, $r25, $r27;
        java.lang.Throwable $r16;
        org.springframework.remoting.support.RemoteInvocationExecutor $r2;
        java.lang.String $r9, $r15, $r22, $r28;
        org.springframework.remoting.support.RemoteInvocationBasedExporter r0;
        org.apache.commons.logging.Log $r1, $r7, $r11, $r13, $r18, $r20, $r24, $r26;
        java.lang.Object r4, $r5;

        r0 := @this: org.springframework.remoting.support.RemoteInvocationBasedExporter;

        r3 := @parameter0: org.springframework.remoting.support.RemoteInvocation;

        r4 := @parameter1: java.lang.Object;

        $r1 = r0.<org.springframework.remoting.support.RemoteInvocationBasedExporter: org.apache.commons.logging.Log logger>;

        $z0 = interfaceinvoke $r1.<org.apache.commons.logging.Log: boolean isTraceEnabled()>();

        if $z0 == 0 goto label1;

        $r7 = r0.<org.springframework.remoting.support.RemoteInvocationBasedExporter: org.apache.commons.logging.Log logger>;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>(java.lang.String)>("Executing ");

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r7.<org.apache.commons.logging.Log: void trace(java.lang.Object)>($r9);

     label1:
        $r2 = virtualinvoke r0.<org.springframework.remoting.support.RemoteInvocationBasedExporter: org.springframework.remoting.support.RemoteInvocationExecutor getRemoteInvocationExecutor()>();

        $r5 = interfaceinvoke $r2.<org.springframework.remoting.support.RemoteInvocationExecutor: java.lang.Object invoke(org.springframework.remoting.support.RemoteInvocation,java.lang.Object)>(r3, r4);

     label2:
        return $r5;

     label3:
        $r23 := @caughtexception;

        $r24 = r0.<org.springframework.remoting.support.RemoteInvocationBasedExporter: org.apache.commons.logging.Log logger>;

        $z3 = interfaceinvoke $r24.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z3 == 0 goto label4;

        $r26 = r0.<org.springframework.remoting.support.RemoteInvocationBasedExporter: org.apache.commons.logging.Log logger>;

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>(java.lang.String)>("Could not find target method for ");

        $r27 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r26.<org.apache.commons.logging.Log: void warn(java.lang.Object,java.lang.Throwable)>($r28, $r23);

     label4:
        throw $r23;

     label5:
        $r17 := @caughtexception;

        $r18 = r0.<org.springframework.remoting.support.RemoteInvocationBasedExporter: org.apache.commons.logging.Log logger>;

        $z2 = interfaceinvoke $r18.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z2 == 0 goto label6;

        $r20 = r0.<org.springframework.remoting.support.RemoteInvocationBasedExporter: org.apache.commons.logging.Log logger>;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>(java.lang.String)>("Could not access target method for ");

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r20.<org.apache.commons.logging.Log: void warn(java.lang.Object,java.lang.Throwable)>($r22, $r17);

     label6:
        throw $r17;

     label7:
        $r10 := @caughtexception;

        $r11 = r0.<org.springframework.remoting.support.RemoteInvocationBasedExporter: org.apache.commons.logging.Log logger>;

        $z1 = interfaceinvoke $r11.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z1 == 0 goto label8;

        $r13 = r0.<org.springframework.remoting.support.RemoteInvocationBasedExporter: org.apache.commons.logging.Log logger>;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>(java.lang.String)>("Target method failed for ");

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        $r16 = virtualinvoke $r10.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>();

        interfaceinvoke $r13.<org.apache.commons.logging.Log: void debug(java.lang.Object,java.lang.Throwable)>($r15, $r16);

     label8:
        throw $r10;

        catch java.lang.NoSuchMethodException from label1 to label2 with label3;
        catch java.lang.IllegalAccessException from label1 to label2 with label5;
        catch java.lang.reflect.InvocationTargetException from label1 to label2 with label7;
    }

    protected org.springframework.remoting.support.RemoteInvocationResult invokeAndCreateResult(org.springframework.remoting.support.RemoteInvocation, java.lang.Object)
    {
        java.lang.Throwable $r5;
        org.springframework.remoting.support.RemoteInvocationResult $r4, $r6;
        org.springframework.remoting.support.RemoteInvocation r1;
        org.springframework.remoting.support.RemoteInvocationBasedExporter r0;
        java.lang.Object r2, $r3;

        r0 := @this: org.springframework.remoting.support.RemoteInvocationBasedExporter;

        r1 := @parameter0: org.springframework.remoting.support.RemoteInvocation;

        r2 := @parameter1: java.lang.Object;

     label1:
        $r3 = virtualinvoke r0.<org.springframework.remoting.support.RemoteInvocationBasedExporter: java.lang.Object invoke(org.springframework.remoting.support.RemoteInvocation,java.lang.Object)>(r1, r2);

        $r4 = new org.springframework.remoting.support.RemoteInvocationResult;

        specialinvoke $r4.<org.springframework.remoting.support.RemoteInvocationResult: void <init>(java.lang.Object)>($r3);

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        $r6 = new org.springframework.remoting.support.RemoteInvocationResult;

        specialinvoke $r6.<org.springframework.remoting.support.RemoteInvocationResult: void <init>(java.lang.Throwable)>($r5);

        return $r6;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
}
