public abstract class org.springframework.validation.AbstractPropertyBindingResult extends org.springframework.validation.AbstractBindingResult
{
    private org.springframework.core.convert.ConversionService conversionService;

    protected void <init>(java.lang.String)
    {
        org.springframework.validation.AbstractPropertyBindingResult r0;
        java.lang.String r1;

        r0 := @this: org.springframework.validation.AbstractPropertyBindingResult;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.springframework.validation.AbstractBindingResult: void <init>(java.lang.String)>(r1);

        return;
    }

    public void initConversion(org.springframework.core.convert.ConversionService)
    {
        org.springframework.validation.AbstractPropertyBindingResult r1;
        java.lang.Object $r2;
        org.springframework.beans.ConfigurablePropertyAccessor $r3;
        org.springframework.core.convert.ConversionService r0;

        r1 := @this: org.springframework.validation.AbstractPropertyBindingResult;

        r0 := @parameter0: org.springframework.core.convert.ConversionService;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "ConversionService must not be null");

        r1.<org.springframework.validation.AbstractPropertyBindingResult: org.springframework.core.convert.ConversionService conversionService> = r0;

        $r2 = virtualinvoke r1.<org.springframework.validation.AbstractPropertyBindingResult: java.lang.Object getTarget()>();

        if $r2 == null goto label1;

        $r3 = virtualinvoke r1.<org.springframework.validation.AbstractPropertyBindingResult: org.springframework.beans.ConfigurablePropertyAccessor getPropertyAccessor()>();

        interfaceinvoke $r3.<org.springframework.beans.ConfigurablePropertyAccessor: void setConversionService(org.springframework.core.convert.ConversionService)>(r0);

     label1:
        return;
    }

    public org.springframework.beans.PropertyEditorRegistry getPropertyEditorRegistry()
    {
        org.springframework.validation.AbstractPropertyBindingResult r0;
        org.springframework.beans.ConfigurablePropertyAccessor $r1;

        r0 := @this: org.springframework.validation.AbstractPropertyBindingResult;

        $r1 = virtualinvoke r0.<org.springframework.validation.AbstractPropertyBindingResult: org.springframework.beans.ConfigurablePropertyAccessor getPropertyAccessor()>();

        return $r1;
    }

    protected java.lang.String canonicalFieldName(java.lang.String)
    {
        java.lang.String r0, $r1;
        org.springframework.validation.AbstractPropertyBindingResult r2;

        r2 := @this: org.springframework.validation.AbstractPropertyBindingResult;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.springframework.beans.PropertyAccessorUtils: java.lang.String canonicalPropertyName(java.lang.String)>(r0);

        return $r1;
    }

    public java.lang.Class getFieldType(java.lang.String)
    {
        org.springframework.validation.AbstractPropertyBindingResult r0;
        java.lang.Class $r4;
        org.springframework.beans.ConfigurablePropertyAccessor $r1;
        java.lang.String r2, $r3;

        r0 := @this: org.springframework.validation.AbstractPropertyBindingResult;

        r2 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<org.springframework.validation.AbstractPropertyBindingResult: org.springframework.beans.ConfigurablePropertyAccessor getPropertyAccessor()>();

        $r3 = virtualinvoke r0.<org.springframework.validation.AbstractPropertyBindingResult: java.lang.String fixedField(java.lang.String)>(r2);

        $r4 = interfaceinvoke $r1.<org.springframework.beans.ConfigurablePropertyAccessor: java.lang.Class getPropertyType(java.lang.String)>($r3);

        return $r4;
    }

    protected java.lang.Object getActualFieldValue(java.lang.String)
    {
        org.springframework.validation.AbstractPropertyBindingResult r0;
        java.lang.Object $r3;
        org.springframework.beans.ConfigurablePropertyAccessor $r1;
        java.lang.String r2;

        r0 := @this: org.springframework.validation.AbstractPropertyBindingResult;

        r2 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<org.springframework.validation.AbstractPropertyBindingResult: org.springframework.beans.ConfigurablePropertyAccessor getPropertyAccessor()>();

        $r3 = interfaceinvoke $r1.<org.springframework.beans.ConfigurablePropertyAccessor: java.lang.Object getPropertyValue(java.lang.String)>(r2);

        return $r3;
    }

    protected java.lang.Object formatFieldValue(java.lang.String, java.lang.Object)
    {
        java.beans.PropertyEditor $r3;
        org.springframework.validation.AbstractPropertyBindingResult r0;
        org.springframework.core.convert.TypeDescriptor $r7, $r8;
        java.lang.Object r5, $r11;
        java.lang.String r1, $r2, $r12;
        org.springframework.beans.ConfigurablePropertyAccessor $r6;
        org.springframework.core.convert.ConversionService $r4, $r9, $r10;
        boolean $z0;

        r0 := @this: org.springframework.validation.AbstractPropertyBindingResult;

        r1 := @parameter0: java.lang.String;

        r5 := @parameter1: java.lang.Object;

        $r2 = virtualinvoke r0.<org.springframework.validation.AbstractPropertyBindingResult: java.lang.String fixedField(java.lang.String)>(r1);

        $r3 = virtualinvoke r0.<org.springframework.validation.AbstractPropertyBindingResult: java.beans.PropertyEditor getCustomEditor(java.lang.String)>($r2);

        if $r3 == null goto label1;

        interfaceinvoke $r3.<java.beans.PropertyEditor: void setValue(java.lang.Object)>(r5);

        $r12 = interfaceinvoke $r3.<java.beans.PropertyEditor: java.lang.String getAsText()>();

        if $r12 == null goto label1;

        return $r12;

     label1:
        $r4 = r0.<org.springframework.validation.AbstractPropertyBindingResult: org.springframework.core.convert.ConversionService conversionService>;

        if $r4 == null goto label2;

        $r6 = virtualinvoke r0.<org.springframework.validation.AbstractPropertyBindingResult: org.springframework.beans.ConfigurablePropertyAccessor getPropertyAccessor()>();

        $r7 = interfaceinvoke $r6.<org.springframework.beans.ConfigurablePropertyAccessor: org.springframework.core.convert.TypeDescriptor getPropertyTypeDescriptor(java.lang.String)>($r2);

        $r8 = staticinvoke <org.springframework.core.convert.TypeDescriptor: org.springframework.core.convert.TypeDescriptor valueOf(java.lang.Class)>(class "Ljava/lang/String;");

        if $r7 == null goto label2;

        $r9 = r0.<org.springframework.validation.AbstractPropertyBindingResult: org.springframework.core.convert.ConversionService conversionService>;

        $z0 = interfaceinvoke $r9.<org.springframework.core.convert.ConversionService: boolean canConvert(org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>($r7, $r8);

        if $z0 == 0 goto label2;

        $r10 = r0.<org.springframework.validation.AbstractPropertyBindingResult: org.springframework.core.convert.ConversionService conversionService>;

        $r11 = interfaceinvoke $r10.<org.springframework.core.convert.ConversionService: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>(r5, $r7, $r8);

        return $r11;

     label2:
        return r5;
    }

    protected java.beans.PropertyEditor getCustomEditor(java.lang.String)
    {
        java.beans.PropertyEditor $r5, r6;
        org.springframework.validation.AbstractPropertyBindingResult r0;
        java.lang.Class $r3;
        org.springframework.beans.ConfigurablePropertyAccessor $r1, $r4;
        java.lang.String r2;

        r0 := @this: org.springframework.validation.AbstractPropertyBindingResult;

        r2 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<org.springframework.validation.AbstractPropertyBindingResult: org.springframework.beans.ConfigurablePropertyAccessor getPropertyAccessor()>();

        $r3 = interfaceinvoke $r1.<org.springframework.beans.ConfigurablePropertyAccessor: java.lang.Class getPropertyType(java.lang.String)>(r2);

        $r4 = virtualinvoke r0.<org.springframework.validation.AbstractPropertyBindingResult: org.springframework.beans.ConfigurablePropertyAccessor getPropertyAccessor()>();

        $r5 = interfaceinvoke $r4.<org.springframework.beans.ConfigurablePropertyAccessor: java.beans.PropertyEditor findCustomEditor(java.lang.Class,java.lang.String)>($r3, r2);

        r6 = $r5;

        if $r5 != null goto label1;

        r6 = staticinvoke <org.springframework.beans.BeanUtils: java.beans.PropertyEditor findEditorByConvention(java.lang.Class)>($r3);

     label1:
        return r6;
    }

    public java.beans.PropertyEditor findEditor(java.lang.String, java.lang.Class)
    {
        org.springframework.core.convert.support.ConvertingPropertyEditorAdapter $r7;
        org.springframework.core.convert.TypeDescriptor $r6, $r11, r15;
        java.lang.String r2, $r10;
        org.springframework.core.convert.ConversionService $r4, $r5, $r8;
        boolean $z0, $z1;
        java.beans.PropertyEditor $r3, r14;
        org.springframework.validation.AbstractPropertyBindingResult r1;
        java.lang.Class r0, $r12, r13;
        org.springframework.beans.ConfigurablePropertyAccessor $r9;

        r1 := @this: org.springframework.validation.AbstractPropertyBindingResult;

        r2 := @parameter0: java.lang.String;

        r0 := @parameter1: java.lang.Class;

        r13 = r0;

        if r0 != null goto label1;

        r13 = virtualinvoke r1.<org.springframework.validation.AbstractPropertyBindingResult: java.lang.Class getFieldType(java.lang.String)>(r2);

     label1:
        $r3 = specialinvoke r1.<org.springframework.validation.AbstractBindingResult: java.beans.PropertyEditor findEditor(java.lang.String,java.lang.Class)>(r2, r13);

        r14 = $r3;

        if $r3 != null goto label5;

        $r4 = r1.<org.springframework.validation.AbstractPropertyBindingResult: org.springframework.core.convert.ConversionService conversionService>;

        if $r4 == null goto label5;

        r15 = null;

        if r2 == null goto label3;

        $r9 = virtualinvoke r1.<org.springframework.validation.AbstractPropertyBindingResult: org.springframework.beans.ConfigurablePropertyAccessor getPropertyAccessor()>();

        $r10 = virtualinvoke r1.<org.springframework.validation.AbstractPropertyBindingResult: java.lang.String fixedField(java.lang.String)>(r2);

        $r11 = interfaceinvoke $r9.<org.springframework.beans.ConfigurablePropertyAccessor: org.springframework.core.convert.TypeDescriptor getPropertyTypeDescriptor(java.lang.String)>($r10);

        if r0 == null goto label2;

        $r12 = virtualinvoke $r11.<org.springframework.core.convert.TypeDescriptor: java.lang.Class getType()>();

        $z1 = virtualinvoke r0.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r12);

        if $z1 == 0 goto label3;

     label2:
        r15 = $r11;

     label3:
        if r15 != null goto label4;

        r15 = staticinvoke <org.springframework.core.convert.TypeDescriptor: org.springframework.core.convert.TypeDescriptor valueOf(java.lang.Class)>(r13);

     label4:
        $r5 = r1.<org.springframework.validation.AbstractPropertyBindingResult: org.springframework.core.convert.ConversionService conversionService>;

        $r6 = staticinvoke <org.springframework.core.convert.TypeDescriptor: org.springframework.core.convert.TypeDescriptor valueOf(java.lang.Class)>(class "Ljava/lang/String;");

        $z0 = interfaceinvoke $r5.<org.springframework.core.convert.ConversionService: boolean canConvert(org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>($r6, r15);

        if $z0 == 0 goto label5;

        $r7 = new org.springframework.core.convert.support.ConvertingPropertyEditorAdapter;

        $r8 = r1.<org.springframework.validation.AbstractPropertyBindingResult: org.springframework.core.convert.ConversionService conversionService>;

        specialinvoke $r7.<org.springframework.core.convert.support.ConvertingPropertyEditorAdapter: void <init>(org.springframework.core.convert.ConversionService,org.springframework.core.convert.TypeDescriptor)>($r8, r15);

        r14 = $r7;

     label5:
        return r14;
    }

    public abstract org.springframework.beans.ConfigurablePropertyAccessor getPropertyAccessor();
}
