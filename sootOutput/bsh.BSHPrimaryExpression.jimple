class bsh.BSHPrimaryExpression extends bsh.SimpleNode
{

    void <init>(int)
    {
        int i0;
        bsh.BSHPrimaryExpression r0;

        r0 := @this: bsh.BSHPrimaryExpression;

        i0 := @parameter0: int;

        specialinvoke r0.<bsh.SimpleNode: void <init>(int)>(i0);

        return;
    }

    public java.lang.Object eval(bsh.CallStack, bsh.Interpreter) throws bsh.EvalError
    {
        bsh.Interpreter r2;
        bsh.BSHPrimaryExpression r0;
        java.lang.Object $r3;
        bsh.CallStack r1;

        r0 := @this: bsh.BSHPrimaryExpression;

        r1 := @parameter0: bsh.CallStack;

        r2 := @parameter1: bsh.Interpreter;

        $r3 = specialinvoke r0.<bsh.BSHPrimaryExpression: java.lang.Object eval(boolean,bsh.CallStack,bsh.Interpreter)>(0, r1, r2);

        return $r3;
    }

    public bsh.LHS toLHS(bsh.CallStack, bsh.Interpreter) throws bsh.EvalError
    {
        bsh.EvalError $r5;
        bsh.Interpreter r2;
        bsh.BSHPrimaryExpression r0;
        java.lang.Object $r3;
        bsh.CallStack r1;
        boolean $z0;
        bsh.LHS $r4;

        r0 := @this: bsh.BSHPrimaryExpression;

        r1 := @parameter0: bsh.CallStack;

        r2 := @parameter1: bsh.Interpreter;

        $r3 = specialinvoke r0.<bsh.BSHPrimaryExpression: java.lang.Object eval(boolean,bsh.CallStack,bsh.Interpreter)>(1, r1, r2);

        $z0 = $r3 instanceof bsh.LHS;

        if $z0 != 0 goto label1;

        $r5 = new bsh.EvalError;

        specialinvoke $r5.<bsh.EvalError: void <init>(java.lang.String,bsh.SimpleNode,bsh.CallStack)>("Can\'t assign to:", r0, r1);

        throw $r5;

     label1:
        $r4 = (bsh.LHS) $r3;

        return $r4;
    }

    private java.lang.Object eval(boolean, bsh.CallStack, bsh.Interpreter) throws bsh.EvalError
    {
        bsh.UtilEvalError $r11;
        bsh.SimpleNode $r7;
        bsh.CallStack r2;
        bsh.LHS $r5;
        bsh.BSHAmbiguousName $r9, $r10;
        int $i0, i1;
        boolean z0, $z1, $z2, $z3;
        bsh.EvalError $r8, $r12;
        bsh.Interpreter r3;
        bsh.BSHPrimarySuffix $r4;
        bsh.BSHPrimaryExpression r0;
        java.lang.Object $r6, r13;
        bsh.Node $r1;

        r0 := @this: bsh.BSHPrimaryExpression;

        z0 := @parameter0: boolean;

        r2 := @parameter1: bsh.CallStack;

        r3 := @parameter2: bsh.Interpreter;

        r13 = virtualinvoke r0.<bsh.BSHPrimaryExpression: bsh.Node jjtGetChild(int)>(0);

        $i0 = virtualinvoke r0.<bsh.BSHPrimaryExpression: int jjtGetNumChildren()>();

        i1 = 1;

        goto label02;

     label01:
        $r1 = virtualinvoke r0.<bsh.BSHPrimaryExpression: bsh.Node jjtGetChild(int)>(i1);

        $r4 = (bsh.BSHPrimarySuffix) $r1;

        r13 = virtualinvoke $r4.<bsh.BSHPrimarySuffix: java.lang.Object doSuffix(java.lang.Object,boolean,bsh.CallStack,bsh.Interpreter)>(r13, z0, r2, r3);

        i1 = i1 + 1;

     label02:
        if i1 < $i0 goto label01;

        $z1 = r13 instanceof bsh.SimpleNode;

        if $z1 == 0 goto label06;

        $z2 = r13 instanceof bsh.BSHAmbiguousName;

        if $z2 == 0 goto label04;

        if z0 == 0 goto label03;

        $r10 = (bsh.BSHAmbiguousName) r13;

        r13 = virtualinvoke $r10.<bsh.BSHAmbiguousName: bsh.LHS toLHS(bsh.CallStack,bsh.Interpreter)>(r2, r3);

        goto label06;

     label03:
        $r9 = (bsh.BSHAmbiguousName) r13;

        r13 = virtualinvoke $r9.<bsh.BSHAmbiguousName: java.lang.Object toObject(bsh.CallStack,bsh.Interpreter)>(r2, r3);

        goto label06;

     label04:
        if z0 == 0 goto label05;

        $r8 = new bsh.EvalError;

        specialinvoke $r8.<bsh.EvalError: void <init>(java.lang.String,bsh.SimpleNode,bsh.CallStack)>("Can\'t assign to prefix.", r0, r2);

        throw $r8;

     label05:
        $r7 = (bsh.SimpleNode) r13;

        r13 = virtualinvoke $r7.<bsh.SimpleNode: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)>(r2, r3);

     label06:
        $z3 = r13 instanceof bsh.LHS;

        if $z3 == 0 goto label10;

        if z0 == 0 goto label07;

        return r13;

     label07:
        $r5 = (bsh.LHS) r13;

        $r6 = virtualinvoke $r5.<bsh.LHS: java.lang.Object getValue()>();

     label08:
        return $r6;

     label09:
        $r11 := @caughtexception;

        $r12 = virtualinvoke $r11.<bsh.UtilEvalError: bsh.EvalError toEvalError(bsh.SimpleNode,bsh.CallStack)>(r0, r2);

        throw $r12;

     label10:
        return r13;

        catch bsh.UtilEvalError from label07 to label08 with label09;
    }
}
