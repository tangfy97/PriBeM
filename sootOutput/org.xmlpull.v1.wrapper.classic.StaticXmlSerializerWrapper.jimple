public class org.xmlpull.v1.wrapper.classic.StaticXmlSerializerWrapper extends org.xmlpull.v1.wrapper.classic.XmlSerializerDelegate implements org.xmlpull.v1.wrapper.XmlSerializerWrapper
{
    private static final java.lang.String PROPERTY_XMLDECL_STANDALONE;
    private static final boolean TRACE_SIZING;
    protected java.lang.String currentNs;
    protected org.xmlpull.v1.wrapper.XmlPullWrapperFactory wf;
    protected org.xmlpull.v1.wrapper.XmlPullParserWrapper fragmentParser;
    protected int namespaceEnd;
    protected java.lang.String[] namespacePrefix;
    protected java.lang.String[] namespaceUri;
    protected int[] namespaceDepth;

    public void <init>(org.xmlpull.v1.XmlSerializer, org.xmlpull.v1.wrapper.XmlPullWrapperFactory)
    {
        org.xmlpull.v1.wrapper.XmlPullWrapperFactory r7;
        java.lang.String[] $r2, $r3, $r4, $r5;
        org.xmlpull.v1.wrapper.classic.StaticXmlSerializerWrapper r0;
        org.xmlpull.v1.XmlSerializer r1;
        int[] $r6;
        int $i0, $i1;

        r0 := @this: org.xmlpull.v1.wrapper.classic.StaticXmlSerializerWrapper;

        r1 := @parameter0: org.xmlpull.v1.XmlSerializer;

        r7 := @parameter1: org.xmlpull.v1.wrapper.XmlPullWrapperFactory;

        specialinvoke r0.<org.xmlpull.v1.wrapper.classic.XmlSerializerDelegate: void <init>(org.xmlpull.v1.XmlSerializer)>(r1);

        r0.<org.xmlpull.v1.wrapper.classic.StaticXmlSerializerWrapper: int namespaceEnd> = 0;

        $r2 = newarray (java.lang.String)[8];

        r0.<org.xmlpull.v1.wrapper.classic.StaticXmlSerializerWrapper: java.lang.String[] namespacePrefix> = $r2;

        $r3 = r0.<org.xmlpull.v1.wrapper.classic.StaticXmlSerializerWrapper: java.lang.String[] namespacePrefix>;

        $i0 = lengthof $r3;

        $r4 = newarray (java.lang.String)[$i0];

        r0.<org.xmlpull.v1.wrapper.classic.StaticXmlSerializerWrapper: java.lang.String[] namespaceUri> = $r4;

        $r5 = r0.<org.xmlpull.v1.wrapper.classic.StaticXmlSerializerWrapper: java.lang.String[] namespacePrefix>;

        $i1 = lengthof $r5;

        $r6 = newarray (int)[$i1];

        r0.<org.xmlpull.v1.wrapper.classic.StaticXmlSerializerWrapper: int[] namespaceDepth> = $r6;

        r0.<org.xmlpull.v1.wrapper.classic.StaticXmlSerializerWrapper: org.xmlpull.v1.wrapper.XmlPullWrapperFactory wf> = r7;

        return;
    }

    public java.lang.String getCurrentNamespaceForElements()
    {
        java.lang.String $r1;
        org.xmlpull.v1.wrapper.classic.StaticXmlSerializerWrapper r0;

        r0 := @this: org.xmlpull.v1.wrapper.classic.StaticXmlSerializerWrapper;

        $r1 = r0.<org.xmlpull.v1.wrapper.classic.StaticXmlSerializerWrapper: java.lang.String currentNs>;

        return $r1;
    }

    public java.lang.String setCurrentNamespaceForElements(java.lang.String)
    {
        java.lang.String r1, r2;
        org.xmlpull.v1.wrapper.classic.StaticXmlSerializerWrapper r0;

        r0 := @this: org.xmlpull.v1.wrapper.classic.StaticXmlSerializerWrapper;

        r2 := @parameter0: java.lang.String;

        r1 = r0.<org.xmlpull.v1.wrapper.classic.StaticXmlSerializerWrapper: java.lang.String currentNs>;

        r0.<org.xmlpull.v1.wrapper.classic.StaticXmlSerializerWrapper: java.lang.String currentNs> = r2;

        return r1;
    }

    public org.xmlpull.v1.wrapper.XmlSerializerWrapper attribute(java.lang.String, java.lang.String) throws java.io.IOException, java.lang.IllegalArgumentException, java.lang.IllegalStateException
    {
        java.lang.String r1, r2;
        org.xmlpull.v1.wrapper.classic.StaticXmlSerializerWrapper r0;
        org.xmlpull.v1.XmlSerializer $r3;

        r0 := @this: org.xmlpull.v1.wrapper.classic.StaticXmlSerializerWrapper;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = r0.<org.xmlpull.v1.wrapper.classic.XmlSerializerDelegate: org.xmlpull.v1.XmlSerializer xs>;

        interfaceinvoke $r3.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, r1, r2);

        return r0;
    }

    public org.xmlpull.v1.wrapper.XmlSerializerWrapper startTag(java.lang.String) throws java.io.IOException, java.lang.IllegalArgumentException, java.lang.IllegalStateException
    {
        java.lang.String r1, $r2;
        org.xmlpull.v1.wrapper.classic.StaticXmlSerializerWrapper r0;
        org.xmlpull.v1.XmlSerializer $r3;

        r0 := @this: org.xmlpull.v1.wrapper.classic.StaticXmlSerializerWrapper;

        r1 := @parameter0: java.lang.String;

        $r3 = r0.<org.xmlpull.v1.wrapper.classic.XmlSerializerDelegate: org.xmlpull.v1.XmlSerializer xs>;

        $r2 = r0.<org.xmlpull.v1.wrapper.classic.StaticXmlSerializerWrapper: java.lang.String currentNs>;

        interfaceinvoke $r3.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>($r2, r1);

        return r0;
    }

    public org.xmlpull.v1.wrapper.XmlSerializerWrapper endTag(java.lang.String) throws java.io.IOException, java.lang.IllegalArgumentException, java.lang.IllegalStateException
    {
        java.lang.String r1, $r2;
        org.xmlpull.v1.wrapper.classic.StaticXmlSerializerWrapper r0;

        r0 := @this: org.xmlpull.v1.wrapper.classic.StaticXmlSerializerWrapper;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.xmlpull.v1.wrapper.classic.StaticXmlSerializerWrapper: java.lang.String currentNs>;

        virtualinvoke r0.<org.xmlpull.v1.wrapper.classic.XmlSerializerDelegate: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>($r2, r1);

        return r0;
    }

    public org.xmlpull.v1.wrapper.XmlSerializerWrapper element(java.lang.String, java.lang.String) throws java.io.IOException, org.xmlpull.v1.XmlPullParserException
    {
        org.xmlpull.v1.wrapper.XmlSerializerWrapper $r4;
        java.lang.String r1, r2, $r3;
        org.xmlpull.v1.wrapper.classic.StaticXmlSerializerWrapper r0;

        r0 := @this: org.xmlpull.v1.wrapper.classic.StaticXmlSerializerWrapper;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = r0.<org.xmlpull.v1.wrapper.classic.StaticXmlSerializerWrapper: java.lang.String currentNs>;

        $r4 = virtualinvoke r0.<org.xmlpull.v1.wrapper.classic.StaticXmlSerializerWrapper: org.xmlpull.v1.wrapper.XmlSerializerWrapper element(java.lang.String,java.lang.String,java.lang.String)>($r3, r1, r2);

        return $r4;
    }

    public org.xmlpull.v1.wrapper.XmlSerializerWrapper element(java.lang.String, java.lang.String, java.lang.String) throws java.io.IOException, org.xmlpull.v1.XmlPullParserException
    {
        org.xmlpull.v1.wrapper.classic.StaticXmlSerializerWrapper r1;
        org.xmlpull.v1.XmlSerializer $r3, $r5, $r6, $r7;
        org.xmlpull.v1.XmlPullParserException $r8;
        java.lang.String r0, r2, r4;

        r1 := @this: org.xmlpull.v1.wrapper.classic.StaticXmlSerializerWrapper;

        r2 := @parameter0: java.lang.String;

        r0 := @parameter1: java.lang.String;

        r4 := @parameter2: java.lang.String;

        if r0 != null goto label1;

        $r8 = new org.xmlpull.v1.XmlPullParserException;

        specialinvoke $r8.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String)>("name for element can not be null");

        throw $r8;

     label1:
        $r3 = r1.<org.xmlpull.v1.wrapper.classic.XmlSerializerDelegate: org.xmlpull.v1.XmlSerializer xs>;

        interfaceinvoke $r3.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>(r2, r0);

        if r4 != null goto label2;

        $r7 = r1.<org.xmlpull.v1.wrapper.classic.XmlSerializerDelegate: org.xmlpull.v1.XmlSerializer xs>;

        interfaceinvoke $r7.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>("http://www.w3.org/2001/XMLSchema-instance", "nil", "true");

        goto label3;

     label2:
        $r5 = r1.<org.xmlpull.v1.wrapper.classic.XmlSerializerDelegate: org.xmlpull.v1.XmlSerializer xs>;

        interfaceinvoke $r5.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer text(java.lang.String)>(r4);

     label3:
        $r6 = r1.<org.xmlpull.v1.wrapper.classic.XmlSerializerDelegate: org.xmlpull.v1.XmlSerializer xs>;

        interfaceinvoke $r6.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>(r2, r0);

        return r1;
    }

    private void ensureNamespacesCapacity()
    {
        java.lang.String[] $r1, $r2, $r3, $r5, $r6;
        org.xmlpull.v1.wrapper.classic.StaticXmlSerializerWrapper r0;
        int[] $r4, $r7;
        int $i0, $i1, $i2, $i3, $i4, $i5;

        r0 := @this: org.xmlpull.v1.wrapper.classic.StaticXmlSerializerWrapper;

        $i0 = r0.<org.xmlpull.v1.wrapper.classic.StaticXmlSerializerWrapper: int namespaceEnd>;

        if $i0 <= 7 goto label1;

        $i4 = r0.<org.xmlpull.v1.wrapper.classic.StaticXmlSerializerWrapper: int namespaceEnd>;

        $i5 = 2 * $i4;

        goto label2;

     label1:
        $i5 = 8;

     label2:
        $r5 = newarray (java.lang.String)[$i5];

        $r6 = newarray (java.lang.String)[$i5];

        $r7 = newarray (int)[$i5];

        $r1 = r0.<org.xmlpull.v1.wrapper.classic.StaticXmlSerializerWrapper: java.lang.String[] namespacePrefix>;

        if $r1 == null goto label3;

        $r2 = r0.<org.xmlpull.v1.wrapper.classic.StaticXmlSerializerWrapper: java.lang.String[] namespacePrefix>;

        $i1 = r0.<org.xmlpull.v1.wrapper.classic.StaticXmlSerializerWrapper: int namespaceEnd>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, $r5, 0, $i1);

        $r3 = r0.<org.xmlpull.v1.wrapper.classic.StaticXmlSerializerWrapper: java.lang.String[] namespaceUri>;

        $i2 = r0.<org.xmlpull.v1.wrapper.classic.StaticXmlSerializerWrapper: int namespaceEnd>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, $r6, 0, $i2);

        $r4 = r0.<org.xmlpull.v1.wrapper.classic.StaticXmlSerializerWrapper: int[] namespaceDepth>;

        $i3 = r0.<org.xmlpull.v1.wrapper.classic.StaticXmlSerializerWrapper: int namespaceEnd>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, $r7, 0, $i3);

     label3:
        r0.<org.xmlpull.v1.wrapper.classic.StaticXmlSerializerWrapper: java.lang.String[] namespacePrefix> = $r5;

        r0.<org.xmlpull.v1.wrapper.classic.StaticXmlSerializerWrapper: java.lang.String[] namespaceUri> = $r6;

        r0.<org.xmlpull.v1.wrapper.classic.StaticXmlSerializerWrapper: int[] namespaceDepth> = $r7;

        return;
    }

    public void setPrefix(java.lang.String, java.lang.String) throws java.io.IOException, java.lang.IllegalArgumentException, java.lang.IllegalStateException
    {
        java.lang.String[] $r4, $r5, $r6;
        org.xmlpull.v1.wrapper.classic.StaticXmlSerializerWrapper r0;
        org.xmlpull.v1.XmlSerializer $r3;
        int[] $r7;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, i11, $i13;
        java.lang.String r1, r2;

        r0 := @this: org.xmlpull.v1.wrapper.classic.StaticXmlSerializerWrapper;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = r0.<org.xmlpull.v1.wrapper.classic.XmlSerializerDelegate: org.xmlpull.v1.XmlSerializer xs>;

        interfaceinvoke $r3.<org.xmlpull.v1.XmlSerializer: void setPrefix(java.lang.String,java.lang.String)>(r1, r2);

        $i0 = virtualinvoke r0.<org.xmlpull.v1.wrapper.classic.XmlSerializerDelegate: int getDepth()>();

        $i1 = r0.<org.xmlpull.v1.wrapper.classic.StaticXmlSerializerWrapper: int namespaceEnd>;

        i11 = $i1 - 1;

     label1:
        if i11 < 0 goto label3;

        $r7 = r0.<org.xmlpull.v1.wrapper.classic.StaticXmlSerializerWrapper: int[] namespaceDepth>;

        $i8 = $r7[i11];

        if $i8 > $i0 goto label2;

        goto label3;

     label2:
        $i9 = r0.<org.xmlpull.v1.wrapper.classic.StaticXmlSerializerWrapper: int namespaceEnd>;

        $i10 = $i9 - 1;

        r0.<org.xmlpull.v1.wrapper.classic.StaticXmlSerializerWrapper: int namespaceEnd> = $i10;

        $i13 = (int) -1;

        i11 = i11 + $i13;

        goto label1;

     label3:
        $i3 = r0.<org.xmlpull.v1.wrapper.classic.StaticXmlSerializerWrapper: int namespaceEnd>;

        $r4 = r0.<org.xmlpull.v1.wrapper.classic.StaticXmlSerializerWrapper: java.lang.String[] namespacePrefix>;

        $i2 = lengthof $r4;

        if $i3 < $i2 goto label4;

        specialinvoke r0.<org.xmlpull.v1.wrapper.classic.StaticXmlSerializerWrapper: void ensureNamespacesCapacity()>();

     label4:
        $r5 = r0.<org.xmlpull.v1.wrapper.classic.StaticXmlSerializerWrapper: java.lang.String[] namespacePrefix>;

        $i4 = r0.<org.xmlpull.v1.wrapper.classic.StaticXmlSerializerWrapper: int namespaceEnd>;

        $r5[$i4] = r1;

        $r6 = r0.<org.xmlpull.v1.wrapper.classic.StaticXmlSerializerWrapper: java.lang.String[] namespaceUri>;

        $i5 = r0.<org.xmlpull.v1.wrapper.classic.StaticXmlSerializerWrapper: int namespaceEnd>;

        $r6[$i5] = r2;

        $i6 = r0.<org.xmlpull.v1.wrapper.classic.StaticXmlSerializerWrapper: int namespaceEnd>;

        $i7 = $i6 + 1;

        r0.<org.xmlpull.v1.wrapper.classic.StaticXmlSerializerWrapper: int namespaceEnd> = $i7;

        return;
    }

    public void fragment(java.lang.String) throws java.io.IOException, java.lang.IllegalArgumentException, java.lang.IllegalStateException, org.xmlpull.v1.XmlPullParserException
    {
        org.xmlpull.v1.wrapper.classic.StaticXmlSerializerWrapper r2;
        boolean $z0;
        org.xmlpull.v1.wrapper.XmlPullWrapperFactory $r12;
        java.lang.String[] $r14, $r16, $r20;
        java.lang.StringBuffer $r19, $r24;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, i9, $i10, $i12, $i14;
        java.lang.String r1, $r4, r15, $r17, $r18, $r21;
        org.xmlpull.v1.wrapper.XmlPullParserWrapper $r3, $r6, $r7, $r8, $r9, $r10, $r11, $r13, $r22, $r23;
        java.io.StringReader $r25;

        r2 := @this: org.xmlpull.v1.wrapper.classic.StaticXmlSerializerWrapper;

        r1 := @parameter0: java.lang.String;

        $r24 = new java.lang.StringBuffer;

        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        $i1 = r2.<org.xmlpull.v1.wrapper.classic.StaticXmlSerializerWrapper: int namespaceEnd>;

        $i2 = $i1 * 30;

        $i3 = $i0 + $i2;

        specialinvoke $r24.<java.lang.StringBuffer: void <init>(int)>($i3);

        virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("<fragment");

        $i4 = r2.<org.xmlpull.v1.wrapper.classic.StaticXmlSerializerWrapper: int namespaceEnd>;

        i8 = $i4 - 1;

     label01:
        if i8 < 0 goto label07;

        $r14 = r2.<org.xmlpull.v1.wrapper.classic.StaticXmlSerializerWrapper: java.lang.String[] namespacePrefix>;

        r15 = $r14[i8];

        $i6 = r2.<org.xmlpull.v1.wrapper.classic.StaticXmlSerializerWrapper: int namespaceEnd>;

        i9 = $i6 - 1;

     label02:
        if i9 <= i8 goto label04;

        $r20 = r2.<org.xmlpull.v1.wrapper.classic.StaticXmlSerializerWrapper: java.lang.String[] namespacePrefix>;

        $r21 = $r20[i9];

        $z0 = virtualinvoke r15.<java.lang.String: boolean equals(java.lang.Object)>($r21);

        if $z0 == 0 goto label03;

        goto label06;

     label03:
        $i12 = (int) -1;

        i9 = i9 + $i12;

        goto label02;

     label04:
        virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" xmlns");

        $i7 = virtualinvoke r15.<java.lang.String: int length()>();

        if $i7 <= 0 goto label05;

        $r19 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(58);

        virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r15);

     label05:
        virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("=\'");

        $r16 = r2.<org.xmlpull.v1.wrapper.classic.StaticXmlSerializerWrapper: java.lang.String[] namespaceUri>;

        $r17 = $r16[i8];

        $r18 = virtualinvoke r2.<org.xmlpull.v1.wrapper.classic.StaticXmlSerializerWrapper: java.lang.String escapeAttributeValue(java.lang.String)>($r17);

        virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r18);

        virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'");

     label06:
        $i14 = (int) -1;

        i8 = i8 + $i14;

        goto label01;

     label07:
        virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(">");

        virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1);

        virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("</fragment>");

        $r3 = r2.<org.xmlpull.v1.wrapper.classic.StaticXmlSerializerWrapper: org.xmlpull.v1.wrapper.XmlPullParserWrapper fragmentParser>;

        if $r3 != null goto label08;

        $r12 = r2.<org.xmlpull.v1.wrapper.classic.StaticXmlSerializerWrapper: org.xmlpull.v1.wrapper.XmlPullWrapperFactory wf>;

        $r13 = virtualinvoke $r12.<org.xmlpull.v1.wrapper.XmlPullWrapperFactory: org.xmlpull.v1.wrapper.XmlPullParserWrapper newPullParserWrapper()>();

        r2.<org.xmlpull.v1.wrapper.classic.StaticXmlSerializerWrapper: org.xmlpull.v1.wrapper.XmlPullParserWrapper fragmentParser> = $r13;

     label08:
        $r4 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.String toString()>();

        $r6 = r2.<org.xmlpull.v1.wrapper.classic.StaticXmlSerializerWrapper: org.xmlpull.v1.wrapper.XmlPullParserWrapper fragmentParser>;

        $r25 = new java.io.StringReader;

        specialinvoke $r25.<java.io.StringReader: void <init>(java.lang.String)>($r4);

        interfaceinvoke $r6.<org.xmlpull.v1.XmlPullParser: void setInput(java.io.Reader)>($r25);

        $r7 = r2.<org.xmlpull.v1.wrapper.classic.StaticXmlSerializerWrapper: org.xmlpull.v1.wrapper.XmlPullParserWrapper fragmentParser>;

        interfaceinvoke $r7.<org.xmlpull.v1.XmlPullParser: int nextTag()>();

        $r8 = r2.<org.xmlpull.v1.wrapper.classic.StaticXmlSerializerWrapper: org.xmlpull.v1.wrapper.XmlPullParserWrapper fragmentParser>;

        interfaceinvoke $r8.<org.xmlpull.v1.XmlPullParser: void require(int,java.lang.String,java.lang.String)>(2, null, "fragment");

     label09:
        $r22 = r2.<org.xmlpull.v1.wrapper.classic.StaticXmlSerializerWrapper: org.xmlpull.v1.wrapper.XmlPullParserWrapper fragmentParser>;

        interfaceinvoke $r22.<org.xmlpull.v1.XmlPullParser: int nextToken()>();

        $r23 = r2.<org.xmlpull.v1.wrapper.classic.StaticXmlSerializerWrapper: org.xmlpull.v1.wrapper.XmlPullParserWrapper fragmentParser>;

        $i10 = interfaceinvoke $r23.<org.xmlpull.v1.XmlPullParser: int getDepth()>();

        if $i10 != 1 goto label10;

        $r10 = r2.<org.xmlpull.v1.wrapper.classic.StaticXmlSerializerWrapper: org.xmlpull.v1.wrapper.XmlPullParserWrapper fragmentParser>;

        $i5 = interfaceinvoke $r10.<org.xmlpull.v1.XmlPullParser: int getEventType()>();

        if $i5 != 3 goto label10;

        goto label11;

     label10:
        $r9 = r2.<org.xmlpull.v1.wrapper.classic.StaticXmlSerializerWrapper: org.xmlpull.v1.wrapper.XmlPullParserWrapper fragmentParser>;

        virtualinvoke r2.<org.xmlpull.v1.wrapper.classic.StaticXmlSerializerWrapper: void event(org.xmlpull.v1.XmlPullParser)>($r9);

        goto label09;

     label11:
        $r11 = r2.<org.xmlpull.v1.wrapper.classic.StaticXmlSerializerWrapper: org.xmlpull.v1.wrapper.XmlPullParserWrapper fragmentParser>;

        interfaceinvoke $r11.<org.xmlpull.v1.XmlPullParser: void require(int,java.lang.String,java.lang.String)>(3, null, "fragment");

        return;
    }

    public void event(org.xmlpull.v1.XmlPullParser) throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    {
        org.xmlpull.v1.wrapper.classic.StaticXmlSerializerWrapper r1;
        int $i0, $i1;
        java.lang.Boolean r13;
        java.lang.String $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r14;
        org.xmlpull.v1.XmlPullParser r0;
        java.lang.Object $r12;

        r1 := @this: org.xmlpull.v1.wrapper.classic.StaticXmlSerializerWrapper;

        r0 := @parameter0: org.xmlpull.v1.XmlPullParser;

        $i0 = interfaceinvoke r0.<org.xmlpull.v1.XmlPullParser: int getEventType()>();

        tableswitch($i0)
        {
            case 0: goto label01;
            case 1: goto label02;
            case 2: goto label03;
            case 3: goto label04;
            case 4: goto label06;
            case 5: goto label09;
            case 6: goto label08;
            case 7: goto label05;
            case 8: goto label10;
            case 9: goto label11;
            case 10: goto label12;
            default: goto label13;
        };

     label01:
        $r12 = interfaceinvoke r0.<org.xmlpull.v1.XmlPullParser: java.lang.Object getProperty(java.lang.String)>("http://xmlpull.org/v1/doc/features.html#xmldecl-standalone");

        r13 = (java.lang.Boolean) $r12;

        $r14 = interfaceinvoke r0.<org.xmlpull.v1.XmlPullParser: java.lang.String getInputEncoding()>();

        virtualinvoke r1.<org.xmlpull.v1.wrapper.classic.XmlSerializerDelegate: void startDocument(java.lang.String,java.lang.Boolean)>($r14, r13);

        goto label13;

     label02:
        virtualinvoke r1.<org.xmlpull.v1.wrapper.classic.XmlSerializerDelegate: void endDocument()>();

        goto label13;

     label03:
        specialinvoke r1.<org.xmlpull.v1.wrapper.classic.StaticXmlSerializerWrapper: void writeStartTag(org.xmlpull.v1.XmlPullParser)>(r0);

        goto label13;

     label04:
        $r10 = interfaceinvoke r0.<org.xmlpull.v1.XmlPullParser: java.lang.String getNamespace()>();

        $r11 = interfaceinvoke r0.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

        virtualinvoke r1.<org.xmlpull.v1.wrapper.classic.XmlSerializerDelegate: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>($r10, $r11);

        goto label13;

     label05:
        $r5 = interfaceinvoke r0.<org.xmlpull.v1.XmlPullParser: java.lang.String getText()>();

        virtualinvoke r1.<org.xmlpull.v1.wrapper.classic.XmlSerializerDelegate: void ignorableWhitespace(java.lang.String)>($r5);

        goto label13;

     label06:
        $i1 = interfaceinvoke r0.<org.xmlpull.v1.XmlPullParser: int getDepth()>();

        if $i1 <= 0 goto label07;

        $r9 = interfaceinvoke r0.<org.xmlpull.v1.XmlPullParser: java.lang.String getText()>();

        virtualinvoke r1.<org.xmlpull.v1.wrapper.classic.XmlSerializerDelegate: org.xmlpull.v1.XmlSerializer text(java.lang.String)>($r9);

        goto label13;

     label07:
        $r8 = interfaceinvoke r0.<org.xmlpull.v1.XmlPullParser: java.lang.String getText()>();

        virtualinvoke r1.<org.xmlpull.v1.wrapper.classic.XmlSerializerDelegate: void ignorableWhitespace(java.lang.String)>($r8);

        goto label13;

     label08:
        $r6 = interfaceinvoke r0.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

        virtualinvoke r1.<org.xmlpull.v1.wrapper.classic.XmlSerializerDelegate: void entityRef(java.lang.String)>($r6);

        goto label13;

     label09:
        $r7 = interfaceinvoke r0.<org.xmlpull.v1.XmlPullParser: java.lang.String getText()>();

        virtualinvoke r1.<org.xmlpull.v1.wrapper.classic.XmlSerializerDelegate: void cdsect(java.lang.String)>($r7);

        goto label13;

     label10:
        $r4 = interfaceinvoke r0.<org.xmlpull.v1.XmlPullParser: java.lang.String getText()>();

        virtualinvoke r1.<org.xmlpull.v1.wrapper.classic.XmlSerializerDelegate: void processingInstruction(java.lang.String)>($r4);

        goto label13;

     label11:
        $r3 = interfaceinvoke r0.<org.xmlpull.v1.XmlPullParser: java.lang.String getText()>();

        virtualinvoke r1.<org.xmlpull.v1.wrapper.classic.XmlSerializerDelegate: void comment(java.lang.String)>($r3);

        goto label13;

     label12:
        $r2 = interfaceinvoke r0.<org.xmlpull.v1.XmlPullParser: java.lang.String getText()>();

        virtualinvoke r1.<org.xmlpull.v1.wrapper.classic.XmlSerializerDelegate: void docdecl(java.lang.String)>($r2);

     label13:
        return;
    }

    private void writeStartTag(org.xmlpull.v1.XmlPullParser) throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    {
        org.xmlpull.v1.wrapper.classic.StaticXmlSerializerWrapper r1;
        int $i0, $i1, $i2, $i3, $i4, i5, i6, $i7;
        java.lang.String $r2, $r3, $r4, $r5, $r6, $r7, $r8;
        org.xmlpull.v1.XmlPullParser r0;
        boolean $z0;

        r1 := @this: org.xmlpull.v1.wrapper.classic.StaticXmlSerializerWrapper;

        r0 := @parameter0: org.xmlpull.v1.XmlPullParser;

        $z0 = interfaceinvoke r0.<org.xmlpull.v1.XmlPullParser: boolean getFeature(java.lang.String)>("http://xmlpull.org/v1/doc/features.html#report-namespace-prefixes");

        if $z0 != 0 goto label2;

        $i0 = interfaceinvoke r0.<org.xmlpull.v1.XmlPullParser: int getDepth()>();

        $i1 = $i0 - 1;

        $i2 = interfaceinvoke r0.<org.xmlpull.v1.XmlPullParser: int getNamespaceCount(int)>($i1);

        $i3 = interfaceinvoke r0.<org.xmlpull.v1.XmlPullParser: int getDepth()>();

        $i4 = interfaceinvoke r0.<org.xmlpull.v1.XmlPullParser: int getNamespaceCount(int)>($i3);

        i5 = $i2;

     label1:
        if i5 >= $i4 goto label2;

        $r7 = interfaceinvoke r0.<org.xmlpull.v1.XmlPullParser: java.lang.String getNamespacePrefix(int)>(i5);

        $r8 = interfaceinvoke r0.<org.xmlpull.v1.XmlPullParser: java.lang.String getNamespaceUri(int)>(i5);

        virtualinvoke r1.<org.xmlpull.v1.wrapper.classic.StaticXmlSerializerWrapper: void setPrefix(java.lang.String,java.lang.String)>($r7, $r8);

        i5 = i5 + 1;

        goto label1;

     label2:
        $r2 = interfaceinvoke r0.<org.xmlpull.v1.XmlPullParser: java.lang.String getNamespace()>();

        $r3 = interfaceinvoke r0.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

        virtualinvoke r1.<org.xmlpull.v1.wrapper.classic.XmlSerializerDelegate: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>($r2, $r3);

        i6 = 0;

     label3:
        $i7 = interfaceinvoke r0.<org.xmlpull.v1.XmlPullParser: int getAttributeCount()>();

        if i6 >= $i7 goto label4;

        $r4 = interfaceinvoke r0.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeNamespace(int)>(i6);

        $r5 = interfaceinvoke r0.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeName(int)>(i6);

        $r6 = interfaceinvoke r0.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(int)>(i6);

        virtualinvoke r1.<org.xmlpull.v1.wrapper.classic.XmlSerializerDelegate: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>($r4, $r5, $r6);

        i6 = i6 + 1;

        goto label3;

     label4:
        return;
    }

    public java.lang.String escapeAttributeValue(java.lang.String)
    {
        org.xmlpull.v1.wrapper.classic.StaticXmlSerializerWrapper r2;
        java.lang.StringBuffer $r4;
        int $i0, $i1, $i2, $i3, $i5, $i6, i7, $i8, $i10, $i12, $i14, $i16, $i17;
        java.lang.String r0, $r1;
        char $c4;

        r2 := @this: org.xmlpull.v1.wrapper.classic.StaticXmlSerializerWrapper;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(60);

        $i1 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(38);

        $i2 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(34);

        $i3 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(39);

        $i10 = (int) -1;

        if $i0 != $i10 goto label1;

        $i12 = (int) -1;

        if $i1 != $i12 goto label1;

        $i14 = (int) -1;

        if $i2 != $i14 goto label1;

        $i16 = (int) -1;

        if $i3 != $i16 goto label1;

        return r0;

     label1:
        $r4 = new java.lang.StringBuffer;

        $i5 = virtualinvoke r0.<java.lang.String: int length()>();

        $i6 = $i5 + 10;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>(int)>($i6);

        i7 = 0;

        $i8 = virtualinvoke r0.<java.lang.String: int length()>();

     label2:
        if i7 >= $i8 goto label9;

        $c4 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i7);

        $i17 = (int) $c4;

        lookupswitch($i17)
        {
            case 34: goto label6;
            case 38: goto label4;
            case 39: goto label5;
            case 60: goto label3;
            default: goto label7;
        };

     label3:
        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("&lt;");

        goto label8;

     label4:
        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("&amp;");

        goto label8;

     label5:
        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("&apos;");

        goto label8;

     label6:
        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("&quot;");

        goto label8;

     label7:
        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c4);

     label8:
        i7 = i7 + 1;

        goto label2;

     label9:
        $r1 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r1;
    }

    public java.lang.String escapeText(java.lang.String)
    {
        java.lang.IllegalStateException $r18;
        org.xmlpull.v1.wrapper.classic.StaticXmlSerializerWrapper r6;
        java.lang.StringBuffer $r9, $r10, $r11, $r12, $r13, $r14, $r16, $r17;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, i7, i8, $i10, $i12, $i14, $i16, $i18, $i20, $i22, $i24, $i26, $i28;
        java.lang.String r0, $r2, $r3, $r4, $r5, $r15;

        r6 := @this: org.xmlpull.v1.wrapper.classic.StaticXmlSerializerWrapper;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(60);

        i6 = $i0;

        $i1 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(38);

        i7 = $i1;

        $i10 = (int) -1;

        if $i0 != $i10 goto label01;

        $i12 = (int) -1;

        if $i1 != $i12 goto label01;

        return r0;

     label01:
        $r16 = new java.lang.StringBuffer;

        $i2 = virtualinvoke r0.<java.lang.String: int length()>();

        $i3 = $i2 + 10;

        specialinvoke $r16.<java.lang.StringBuffer: void <init>(int)>($i3);

        i8 = 0;

     label02:
        $i14 = (int) -1;

        if i6 != $i14 goto label03;

        $i16 = (int) -1;

        if i7 != $i16 goto label03;

        $r4 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>(i8);

        virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        goto label10;

     label03:
        $i18 = (int) -1;

        if i6 == $i18 goto label04;

        $i20 = (int) -1;

        if i6 == $i20 goto label06;

        $i22 = (int) -1;

        if i7 == $i22 goto label06;

        if i7 >= i6 goto label06;

     label04:
        if i8 >= i7 goto label05;

        $r2 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(i8, i7);

        virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

     label05:
        virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("&amp;");

        $i4 = i7 + 1;

        i8 = $i4;

        i7 = virtualinvoke r0.<java.lang.String: int indexOf(int,int)>(38, $i4);

        goto label02;

     label06:
        $i24 = (int) -1;

        if i7 == $i24 goto label07;

        $i26 = (int) -1;

        if i6 == $i26 goto label09;

        $i28 = (int) -1;

        if i7 == $i28 goto label09;

        if i6 >= i7 goto label09;

     label07:
        if i8 >= i6 goto label08;

        $r3 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(i8, i6);

        virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

     label08:
        virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("&lt;");

        $i5 = i6 + 1;

        i8 = $i5;

        i6 = virtualinvoke r0.<java.lang.String: int indexOf(int,int)>(60, $i5);

        goto label02;

     label09:
        $r18 = new java.lang.IllegalStateException;

        $r17 = new java.lang.StringBuffer;

        specialinvoke $r17.<java.lang.StringBuffer: void <init>()>();

        $r9 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("wrong state posLt=");

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i6);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" posAmp=");

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i7);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" for ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r0);

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r18.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r15);

        throw $r18;

     label10:
        $r5 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r5;
    }

    public void writeDouble(double) throws org.xmlpull.v1.XmlPullParserException, java.io.IOException, java.lang.IllegalArgumentException
    {
        org.xmlpull.v1.wrapper.classic.StaticXmlSerializerWrapper r0;
        org.xmlpull.v1.XmlSerializer $r1, $r3, $r4;
        byte $b0, $b1;
        java.lang.String $r2;
        double d0;

        r0 := @this: org.xmlpull.v1.wrapper.classic.StaticXmlSerializerWrapper;

        d0 := @parameter0: double;

        $b0 = d0 cmpl #Infinity;

        if $b0 != 0 goto label1;

        $r4 = r0.<org.xmlpull.v1.wrapper.classic.XmlSerializerDelegate: org.xmlpull.v1.XmlSerializer xs>;

        interfaceinvoke $r4.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer text(java.lang.String)>("INF");

        goto label3;

     label1:
        $b1 = d0 cmpl #-Infinity;

        if $b1 != 0 goto label2;

        $r3 = r0.<org.xmlpull.v1.wrapper.classic.XmlSerializerDelegate: org.xmlpull.v1.XmlSerializer xs>;

        interfaceinvoke $r3.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer text(java.lang.String)>("-INF");

        goto label3;

     label2:
        $r1 = r0.<org.xmlpull.v1.wrapper.classic.XmlSerializerDelegate: org.xmlpull.v1.XmlSerializer xs>;

        $r2 = staticinvoke <java.lang.Double: java.lang.String toString(double)>(d0);

        interfaceinvoke $r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer text(java.lang.String)>($r2);

     label3:
        return;
    }

    public void writeFloat(float) throws org.xmlpull.v1.XmlPullParserException, java.io.IOException, java.lang.IllegalArgumentException
    {
        org.xmlpull.v1.wrapper.classic.StaticXmlSerializerWrapper r0;
        org.xmlpull.v1.XmlSerializer $r1, $r3, $r4;
        byte $b0, $b1;
        float f0;
        java.lang.String $r2;

        r0 := @this: org.xmlpull.v1.wrapper.classic.StaticXmlSerializerWrapper;

        f0 := @parameter0: float;

        $b0 = f0 cmpl #InfinityF;

        if $b0 != 0 goto label1;

        $r4 = r0.<org.xmlpull.v1.wrapper.classic.XmlSerializerDelegate: org.xmlpull.v1.XmlSerializer xs>;

        interfaceinvoke $r4.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer text(java.lang.String)>("INF");

        goto label3;

     label1:
        $b1 = f0 cmpl #-InfinityF;

        if $b1 != 0 goto label2;

        $r3 = r0.<org.xmlpull.v1.wrapper.classic.XmlSerializerDelegate: org.xmlpull.v1.XmlSerializer xs>;

        interfaceinvoke $r3.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer text(java.lang.String)>("-INF");

        goto label3;

     label2:
        $r1 = r0.<org.xmlpull.v1.wrapper.classic.XmlSerializerDelegate: org.xmlpull.v1.XmlSerializer xs>;

        $r2 = staticinvoke <java.lang.Float: java.lang.String toString(float)>(f0);

        interfaceinvoke $r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer text(java.lang.String)>($r2);

     label3:
        return;
    }

    public void writeInt(int) throws org.xmlpull.v1.XmlPullParserException, java.io.IOException, java.lang.IllegalArgumentException
    {
        int i0;
        java.lang.String $r2;
        org.xmlpull.v1.wrapper.classic.StaticXmlSerializerWrapper r0;
        org.xmlpull.v1.XmlSerializer $r1;

        r0 := @this: org.xmlpull.v1.wrapper.classic.StaticXmlSerializerWrapper;

        i0 := @parameter0: int;

        $r1 = r0.<org.xmlpull.v1.wrapper.classic.XmlSerializerDelegate: org.xmlpull.v1.XmlSerializer xs>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        interfaceinvoke $r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer text(java.lang.String)>($r2);

        return;
    }

    public void writeString(java.lang.String) throws org.xmlpull.v1.XmlPullParserException, java.io.IOException, java.lang.IllegalArgumentException
    {
        java.lang.String r0;
        java.lang.IllegalArgumentException $r3;
        org.xmlpull.v1.wrapper.classic.StaticXmlSerializerWrapper r1;
        org.xmlpull.v1.XmlSerializer $r2;

        r1 := @this: org.xmlpull.v1.wrapper.classic.StaticXmlSerializerWrapper;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("null string can not be written");

        throw $r3;

     label1:
        $r2 = r1.<org.xmlpull.v1.wrapper.classic.XmlSerializerDelegate: org.xmlpull.v1.XmlSerializer xs>;

        interfaceinvoke $r2.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer text(java.lang.String)>(r0);

        return;
    }

    public void writeDoubleElement(java.lang.String, java.lang.String, double) throws org.xmlpull.v1.XmlPullParserException, java.io.IOException, java.lang.IllegalArgumentException
    {
        java.lang.String r1, r2;
        org.xmlpull.v1.wrapper.classic.StaticXmlSerializerWrapper r0;
        org.xmlpull.v1.XmlSerializer $r3, $r4;
        double d0;

        r0 := @this: org.xmlpull.v1.wrapper.classic.StaticXmlSerializerWrapper;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        d0 := @parameter2: double;

        $r3 = r0.<org.xmlpull.v1.wrapper.classic.XmlSerializerDelegate: org.xmlpull.v1.XmlSerializer xs>;

        interfaceinvoke $r3.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>(r1, r2);

        virtualinvoke r0.<org.xmlpull.v1.wrapper.classic.StaticXmlSerializerWrapper: void writeDouble(double)>(d0);

        $r4 = r0.<org.xmlpull.v1.wrapper.classic.XmlSerializerDelegate: org.xmlpull.v1.XmlSerializer xs>;

        interfaceinvoke $r4.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>(r1, r2);

        return;
    }

    public void writeFloatElement(java.lang.String, java.lang.String, float) throws org.xmlpull.v1.XmlPullParserException, java.io.IOException, java.lang.IllegalArgumentException
    {
        float f0;
        java.lang.String r1, r2;
        org.xmlpull.v1.wrapper.classic.StaticXmlSerializerWrapper r0;
        org.xmlpull.v1.XmlSerializer $r3, $r4;

        r0 := @this: org.xmlpull.v1.wrapper.classic.StaticXmlSerializerWrapper;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        f0 := @parameter2: float;

        $r3 = r0.<org.xmlpull.v1.wrapper.classic.XmlSerializerDelegate: org.xmlpull.v1.XmlSerializer xs>;

        interfaceinvoke $r3.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>(r1, r2);

        virtualinvoke r0.<org.xmlpull.v1.wrapper.classic.StaticXmlSerializerWrapper: void writeFloat(float)>(f0);

        $r4 = r0.<org.xmlpull.v1.wrapper.classic.XmlSerializerDelegate: org.xmlpull.v1.XmlSerializer xs>;

        interfaceinvoke $r4.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>(r1, r2);

        return;
    }

    public void writeIntElement(java.lang.String, java.lang.String, int) throws org.xmlpull.v1.XmlPullParserException, java.io.IOException, java.lang.IllegalArgumentException
    {
        int i0;
        java.lang.String r1, r2;
        org.xmlpull.v1.wrapper.classic.StaticXmlSerializerWrapper r0;
        org.xmlpull.v1.XmlSerializer $r3, $r4;

        r0 := @this: org.xmlpull.v1.wrapper.classic.StaticXmlSerializerWrapper;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        $r3 = r0.<org.xmlpull.v1.wrapper.classic.XmlSerializerDelegate: org.xmlpull.v1.XmlSerializer xs>;

        interfaceinvoke $r3.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>(r1, r2);

        virtualinvoke r0.<org.xmlpull.v1.wrapper.classic.StaticXmlSerializerWrapper: void writeInt(int)>(i0);

        $r4 = r0.<org.xmlpull.v1.wrapper.classic.XmlSerializerDelegate: org.xmlpull.v1.XmlSerializer xs>;

        interfaceinvoke $r4.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>(r1, r2);

        return;
    }

    public void writeStringElement(java.lang.String, java.lang.String, java.lang.String) throws org.xmlpull.v1.XmlPullParserException, java.io.IOException, java.lang.IllegalArgumentException
    {
        java.lang.String r1, r2, r4;
        org.xmlpull.v1.wrapper.classic.StaticXmlSerializerWrapper r0;
        org.xmlpull.v1.XmlSerializer $r3, $r5, $r6;

        r0 := @this: org.xmlpull.v1.wrapper.classic.StaticXmlSerializerWrapper;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r4 := @parameter2: java.lang.String;

        $r3 = r0.<org.xmlpull.v1.wrapper.classic.XmlSerializerDelegate: org.xmlpull.v1.XmlSerializer xs>;

        interfaceinvoke $r3.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>(r1, r2);

        if r4 != null goto label1;

        $r6 = r0.<org.xmlpull.v1.wrapper.classic.XmlSerializerDelegate: org.xmlpull.v1.XmlSerializer xs>;

        interfaceinvoke $r6.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>("http://www.w3.org/2001/XMLSchema", "nil", "true");

        goto label2;

     label1:
        virtualinvoke r0.<org.xmlpull.v1.wrapper.classic.StaticXmlSerializerWrapper: void writeString(java.lang.String)>(r4);

     label2:
        $r5 = r0.<org.xmlpull.v1.wrapper.classic.XmlSerializerDelegate: org.xmlpull.v1.XmlSerializer xs>;

        interfaceinvoke $r5.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>(r1, r2);

        return;
    }

    public static void <clinit>()
    {
        <org.xmlpull.v1.wrapper.classic.StaticXmlSerializerWrapper: boolean TRACE_SIZING> = 0;

        <org.xmlpull.v1.wrapper.classic.StaticXmlSerializerWrapper: java.lang.String PROPERTY_XMLDECL_STANDALONE> = "http://xmlpull.org/v1/doc/features.html#xmldecl-standalone";

        return;
    }
}
