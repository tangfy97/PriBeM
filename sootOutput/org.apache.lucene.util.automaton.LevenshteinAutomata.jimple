public class org.apache.lucene.util.automaton.LevenshteinAutomata extends java.lang.Object
{
    public static final int MAXIMUM_SUPPORTED_DISTANCE;
    final int[] word;
    final int[] alphabet;
    final int alphaMax;
    final int[] rangeLower;
    final int[] rangeUpper;
    int numRanges;
    org.apache.lucene.util.automaton.LevenshteinAutomata$ParametricDescription[] descriptions;

    public void <init>(java.lang.String, boolean)
    {
        int[] $r2;
        java.lang.String r1;
        org.apache.lucene.util.automaton.LevenshteinAutomata r0;
        boolean z0;

        r0 := @this: org.apache.lucene.util.automaton.LevenshteinAutomata;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        $r2 = staticinvoke <org.apache.lucene.util.automaton.LevenshteinAutomata: int[] codePoints(java.lang.String)>(r1);

        specialinvoke r0.<org.apache.lucene.util.automaton.LevenshteinAutomata: void <init>(int[],int,boolean)>($r2, 1114111, z0);

        return;
    }

    public void <init>(int[], int, boolean)
    {
        org.apache.lucene.util.automaton.Lev1TParametricDescription $r32;
        java.lang.Integer $r19, $r20;
        int[] r1, $r3, $r5, $r6, $r7, $r8, $r9, $r10, $r12, $r13, $r14, $r15, $r16, $r17;
        boolean z0;
        org.apache.lucene.util.automaton.Lev1ParametricDescription $r33;
        org.apache.lucene.util.automaton.Lev2TParametricDescription $r34;
        java.lang.StringBuilder $r23, $r24, $r25, $r30;
        org.apache.lucene.util.automaton.LevenshteinAutomata r0;
        org.apache.lucene.util.automaton.LevenshteinAutomata$ParametricDescription $r27, $r28;
        java.util.TreeSet $r29;
        org.apache.lucene.util.automaton.LevenshteinAutomata$ParametricDescription[] $r11;
        org.apache.lucene.util.automaton.Lev2ParametricDescription $r35;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, i17, $i18, $i19, $i20, $i21, $i22, $i23, i24, i25, i26, i27, i28;
        java.lang.String $r26;
        java.util.Iterator $r4;
        java.lang.IllegalArgumentException $r31;
        java.lang.Object $r18;

        r0 := @this: org.apache.lucene.util.automaton.LevenshteinAutomata;

        r1 := @parameter0: int[];

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.lucene.util.automaton.LevenshteinAutomata: int numRanges> = 0;

        r0.<org.apache.lucene.util.automaton.LevenshteinAutomata: int[] word> = r1;

        r0.<org.apache.lucene.util.automaton.LevenshteinAutomata: int alphaMax> = i0;

        $r29 = new java.util.TreeSet;

        specialinvoke $r29.<java.util.TreeSet: void <init>()>();

        i24 = 0;

     label01:
        $i1 = lengthof r1;

        if i24 >= $i1 goto label03;

        i25 = r1[i24];

        if i25 <= i0 goto label02;

        $r31 = new java.lang.IllegalArgumentException;

        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("alphaMax exceeded by symbol ");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i25);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in word");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r31.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r26);

        throw $r31;

     label02:
        $r20 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i25);

        interfaceinvoke $r29.<java.util.SortedSet: boolean add(java.lang.Object)>($r20);

        i24 = i24 + 1;

        goto label01;

     label03:
        $i2 = interfaceinvoke $r29.<java.util.SortedSet: int size()>();

        $r3 = newarray (int)[$i2];

        r0.<org.apache.lucene.util.automaton.LevenshteinAutomata: int[] alphabet> = $r3;

        $r4 = interfaceinvoke $r29.<java.util.SortedSet: java.util.Iterator iterator()>();

        i26 = 0;

     label04:
        $r5 = r0.<org.apache.lucene.util.automaton.LevenshteinAutomata: int[] alphabet>;

        $i3 = lengthof $r5;

        if i26 >= $i3 goto label05;

        $r17 = r0.<org.apache.lucene.util.automaton.LevenshteinAutomata: int[] alphabet>;

        $r18 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r19 = (java.lang.Integer) $r18;

        $i23 = virtualinvoke $r19.<java.lang.Integer: int intValue()>();

        $r17[i26] = $i23;

        i26 = i26 + 1;

        goto label04;

     label05:
        $r6 = r0.<org.apache.lucene.util.automaton.LevenshteinAutomata: int[] alphabet>;

        $i4 = lengthof $r6;

        $i5 = $i4 + 2;

        $r7 = newarray (int)[$i5];

        r0.<org.apache.lucene.util.automaton.LevenshteinAutomata: int[] rangeLower> = $r7;

        $r8 = r0.<org.apache.lucene.util.automaton.LevenshteinAutomata: int[] alphabet>;

        $i6 = lengthof $r8;

        $i7 = $i6 + 2;

        $r9 = newarray (int)[$i7];

        r0.<org.apache.lucene.util.automaton.LevenshteinAutomata: int[] rangeUpper> = $r9;

        i27 = 0;

        i28 = 0;

     label06:
        $r10 = r0.<org.apache.lucene.util.automaton.LevenshteinAutomata: int[] alphabet>;

        $i8 = lengthof $r10;

        if i28 >= $i8 goto label08;

        $r14 = r0.<org.apache.lucene.util.automaton.LevenshteinAutomata: int[] alphabet>;

        i17 = $r14[i28];

        if i17 <= i27 goto label07;

        $r15 = r0.<org.apache.lucene.util.automaton.LevenshteinAutomata: int[] rangeLower>;

        $i18 = r0.<org.apache.lucene.util.automaton.LevenshteinAutomata: int numRanges>;

        $r15[$i18] = i27;

        $r16 = r0.<org.apache.lucene.util.automaton.LevenshteinAutomata: int[] rangeUpper>;

        $i20 = r0.<org.apache.lucene.util.automaton.LevenshteinAutomata: int numRanges>;

        $i19 = i17 - 1;

        $r16[$i20] = $i19;

        $i21 = r0.<org.apache.lucene.util.automaton.LevenshteinAutomata: int numRanges>;

        $i22 = $i21 + 1;

        r0.<org.apache.lucene.util.automaton.LevenshteinAutomata: int numRanges> = $i22;

     label07:
        i27 = i17 + 1;

        i28 = i28 + 1;

        goto label06;

     label08:
        if i27 > i0 goto label09;

        $r12 = r0.<org.apache.lucene.util.automaton.LevenshteinAutomata: int[] rangeLower>;

        $i13 = r0.<org.apache.lucene.util.automaton.LevenshteinAutomata: int numRanges>;

        $r12[$i13] = i27;

        $r13 = r0.<org.apache.lucene.util.automaton.LevenshteinAutomata: int[] rangeUpper>;

        $i14 = r0.<org.apache.lucene.util.automaton.LevenshteinAutomata: int numRanges>;

        $r13[$i14] = i0;

        $i15 = r0.<org.apache.lucene.util.automaton.LevenshteinAutomata: int numRanges>;

        $i16 = $i15 + 1;

        r0.<org.apache.lucene.util.automaton.LevenshteinAutomata: int numRanges> = $i16;

     label09:
        $r11 = newarray (org.apache.lucene.util.automaton.LevenshteinAutomata$ParametricDescription)[3];

        $r11[0] = null;

        if z0 == 0 goto label10;

        $r32 = new org.apache.lucene.util.automaton.Lev1TParametricDescription;

        $r27 = $r32;

        $i12 = lengthof r1;

        specialinvoke $r32.<org.apache.lucene.util.automaton.Lev1TParametricDescription: void <init>(int)>($i12);

        goto label11;

     label10:
        $r33 = new org.apache.lucene.util.automaton.Lev1ParametricDescription;

        $r27 = $r33;

        $i9 = lengthof r1;

        specialinvoke $r33.<org.apache.lucene.util.automaton.Lev1ParametricDescription: void <init>(int)>($i9);

     label11:
        $r11[1] = $r27;

        if z0 == 0 goto label12;

        $r34 = new org.apache.lucene.util.automaton.Lev2TParametricDescription;

        $r28 = $r34;

        $i11 = lengthof r1;

        specialinvoke $r34.<org.apache.lucene.util.automaton.Lev2TParametricDescription: void <init>(int)>($i11);

        goto label13;

     label12:
        $r35 = new org.apache.lucene.util.automaton.Lev2ParametricDescription;

        $r28 = $r35;

        $i10 = lengthof r1;

        specialinvoke $r35.<org.apache.lucene.util.automaton.Lev2ParametricDescription: void <init>(int)>($i10);

     label13:
        $r11[2] = $r28;

        r0.<org.apache.lucene.util.automaton.LevenshteinAutomata: org.apache.lucene.util.automaton.LevenshteinAutomata$ParametricDescription[] descriptions> = $r11;

        return;
    }

    private static int[] codePoints(java.lang.String)
    {
        int[] r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, i7;
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        $i1 = staticinvoke <java.lang.Character: int codePointCount(java.lang.CharSequence,int,int)>(r0, 0, $i0);

        r1 = newarray (int)[$i1];

        i6 = 0;

        i7 = 0;

     label1:
        $i2 = virtualinvoke r0.<java.lang.String: int length()>();

        if i6 >= $i2 goto label2;

        $i3 = i7;

        i7 = i7 + 1;

        $i4 = virtualinvoke r0.<java.lang.String: int codePointAt(int)>(i6);

        r1[$i3] = $i4;

        $i5 = staticinvoke <java.lang.Character: int charCount(int)>($i4);

        i6 = i6 + $i5;

        goto label1;

     label2:
        return r1;
    }

    public org.apache.lucene.util.automaton.Automaton toAutomaton(int)
    {
        int[] $r7, $r8, $r10, $r11, $r14, $r21, $r22;
        boolean $z0;
        org.apache.lucene.util.automaton.Automaton $r5, $r23;
        org.apache.lucene.util.automaton.LevenshteinAutomata r0;
        org.apache.lucene.util.automaton.LevenshteinAutomata$ParametricDescription r3;
        org.apache.lucene.util.automaton.LevenshteinAutomata$ParametricDescription[] $r1, $r2;
        int i0, $i1, $i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, i20, i21, i22, i23, i24;
        org.apache.lucene.util.automaton.Transition $r9, $r15;
        org.apache.lucene.util.automaton.State $r6, $r12, $r13, $r16, $r17, $r18, $r19, $r20;
        org.apache.lucene.util.automaton.State[] r4;

        r0 := @this: org.apache.lucene.util.automaton.LevenshteinAutomata;

        i0 := @parameter0: int;

        if i0 != 0 goto label01;

        $r22 = r0.<org.apache.lucene.util.automaton.LevenshteinAutomata: int[] word>;

        $r21 = r0.<org.apache.lucene.util.automaton.LevenshteinAutomata: int[] word>;

        $i19 = lengthof $r21;

        $r23 = staticinvoke <org.apache.lucene.util.automaton.BasicAutomata: org.apache.lucene.util.automaton.Automaton makeString(int[],int,int)>($r22, 0, $i19);

        return $r23;

     label01:
        $r1 = r0.<org.apache.lucene.util.automaton.LevenshteinAutomata: org.apache.lucene.util.automaton.LevenshteinAutomata$ParametricDescription[] descriptions>;

        $i1 = lengthof $r1;

        if i0 < $i1 goto label02;

        return null;

     label02:
        $i2 = 2 * i0;

        i3 = $i2 + 1;

        $r2 = r0.<org.apache.lucene.util.automaton.LevenshteinAutomata: org.apache.lucene.util.automaton.LevenshteinAutomata$ParametricDescription[] descriptions>;

        r3 = $r2[i0];

        $i4 = virtualinvoke r3.<org.apache.lucene.util.automaton.LevenshteinAutomata$ParametricDescription: int size()>();

        r4 = newarray (org.apache.lucene.util.automaton.State)[$i4];

        i20 = 0;

     label03:
        $i5 = lengthof r4;

        if i20 >= $i5 goto label04;

        $r18 = new org.apache.lucene.util.automaton.State;

        specialinvoke $r18.<org.apache.lucene.util.automaton.State: void <init>()>();

        r4[i20] = $r18;

        $r19 = r4[i20];

        $r19.<org.apache.lucene.util.automaton.State: int number> = i20;

        $r20 = r4[i20];

        $z0 = virtualinvoke r3.<org.apache.lucene.util.automaton.LevenshteinAutomata$ParametricDescription: boolean isAccept(int)>(i20);

        virtualinvoke $r20.<org.apache.lucene.util.automaton.State: void setAccept(boolean)>($z0);

        i20 = i20 + 1;

        goto label03;

     label04:
        i21 = 0;

     label05:
        $i6 = lengthof r4;

        if i21 >= $i6 goto label12;

        $i7 = virtualinvoke r3.<org.apache.lucene.util.automaton.LevenshteinAutomata$ParametricDescription: int getPosition(int)>(i21);

        if $i7 >= 0 goto label06;

        goto label11;

     label06:
        $r7 = r0.<org.apache.lucene.util.automaton.LevenshteinAutomata: int[] word>;

        $i8 = lengthof $r7;

        $i9 = $i8 - $i7;

        $i10 = staticinvoke <java.lang.Math: int min(int,int)>($i9, i3);

        i11 = $i7 + $i10;

        i22 = 0;

     label07:
        $r8 = r0.<org.apache.lucene.util.automaton.LevenshteinAutomata: int[] alphabet>;

        $i12 = lengthof $r8;

        if i22 >= $i12 goto label09;

        $r14 = r0.<org.apache.lucene.util.automaton.LevenshteinAutomata: int[] alphabet>;

        i23 = $r14[i22];

        $i17 = virtualinvoke r0.<org.apache.lucene.util.automaton.LevenshteinAutomata: int getVector(int,int,int)>(i23, $i7, i11);

        $i18 = virtualinvoke r3.<org.apache.lucene.util.automaton.LevenshteinAutomata$ParametricDescription: int transition(int,int,int)>(i21, $i7, $i17);

        if $i18 < 0 goto label08;

        $r17 = r4[i21];

        $r15 = new org.apache.lucene.util.automaton.Transition;

        $r16 = r4[$i18];

        specialinvoke $r15.<org.apache.lucene.util.automaton.Transition: void <init>(int,org.apache.lucene.util.automaton.State)>(i23, $r16);

        virtualinvoke $r17.<org.apache.lucene.util.automaton.State: void addTransition(org.apache.lucene.util.automaton.Transition)>($r15);

     label08:
        i22 = i22 + 1;

        goto label07;

     label09:
        $i13 = virtualinvoke r3.<org.apache.lucene.util.automaton.LevenshteinAutomata$ParametricDescription: int transition(int,int,int)>(i21, $i7, 0);

        if $i13 < 0 goto label11;

        i24 = 0;

     label10:
        $i14 = r0.<org.apache.lucene.util.automaton.LevenshteinAutomata: int numRanges>;

        if i24 >= $i14 goto label11;

        $r13 = r4[i21];

        $r9 = new org.apache.lucene.util.automaton.Transition;

        $r10 = r0.<org.apache.lucene.util.automaton.LevenshteinAutomata: int[] rangeLower>;

        $i16 = $r10[i24];

        $r11 = r0.<org.apache.lucene.util.automaton.LevenshteinAutomata: int[] rangeUpper>;

        $i15 = $r11[i24];

        $r12 = r4[$i13];

        specialinvoke $r9.<org.apache.lucene.util.automaton.Transition: void <init>(int,int,org.apache.lucene.util.automaton.State)>($i16, $i15, $r12);

        virtualinvoke $r13.<org.apache.lucene.util.automaton.State: void addTransition(org.apache.lucene.util.automaton.Transition)>($r9);

        i24 = i24 + 1;

        goto label10;

     label11:
        i21 = i21 + 1;

        goto label05;

     label12:
        $r5 = new org.apache.lucene.util.automaton.Automaton;

        $r6 = r4[0];

        specialinvoke $r5.<org.apache.lucene.util.automaton.Automaton: void <init>(org.apache.lucene.util.automaton.State)>($r6);

        virtualinvoke $r5.<org.apache.lucene.util.automaton.Automaton: void setDeterministic(boolean)>(1);

        virtualinvoke $r5.<org.apache.lucene.util.automaton.Automaton: void reduce()>();

        return $r5;
    }

    int getVector(int, int, int)
    {
        int[] $r1;
        int i0, i1, i2, $i3, i4, i5;
        org.apache.lucene.util.automaton.LevenshteinAutomata r0;

        r0 := @this: org.apache.lucene.util.automaton.LevenshteinAutomata;

        i2 := @parameter0: int;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i4 = 0;

        i5 = i0;

     label1:
        if i5 >= i1 goto label3;

        i4 = i4 << 1;

        $r1 = r0.<org.apache.lucene.util.automaton.LevenshteinAutomata: int[] word>;

        $i3 = $r1[i5];

        if $i3 != i2 goto label2;

        i4 = i4 | 1;

     label2:
        i5 = i5 + 1;

        goto label1;

     label3:
        return i4;
    }

    public static void <clinit>()
    {
        <org.apache.lucene.util.automaton.LevenshteinAutomata: int MAXIMUM_SUPPORTED_DISTANCE> = 2;

        return;
    }
}
