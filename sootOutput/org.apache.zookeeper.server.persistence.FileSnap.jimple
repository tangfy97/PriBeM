public class org.apache.zookeeper.server.persistence.FileSnap extends java.lang.Object implements org.apache.zookeeper.server.persistence.SnapShot
{
    java.io.File snapDir;
    private volatile boolean close;
    private static final int VERSION;
    private static final long dbId;
    private static final org.slf4j.Logger LOG;
    public static final int SNAP_MAGIC;

    public void <init>(java.io.File)
    {
        org.apache.zookeeper.server.persistence.FileSnap r0;
        java.io.File r1;

        r0 := @this: org.apache.zookeeper.server.persistence.FileSnap;

        r1 := @parameter0: java.io.File;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.zookeeper.server.persistence.FileSnap: boolean close> = 0;

        r0.<org.apache.zookeeper.server.persistence.FileSnap: java.io.File snapDir> = r1;

        return;
    }

    public long deserialize(org.apache.zookeeper.server.DataTree, java.util.Map) throws java.io.IOException
    {
        java.util.zip.CheckedInputStream $r18, r37;
        java.io.BufferedInputStream $r16, r36;
        java.util.zip.Adler32 $r19;
        byte $b6;
        java.util.Map r21;
        boolean z0;
        java.util.List $r1;
        java.lang.StringBuilder $r5, $r6, $r8, $r11, $r13, $r14, $r24, $r25, $r26, $r30, $r32, $r33;
        org.apache.zookeeper.server.persistence.FileSnap r0;
        java.lang.Throwable $r28;
        long $l2, $l3, $l4, $l5;
        java.util.zip.Checksum $r22;
        int $i0, $i1, i7;
        java.lang.String $r3, $r9, $r15, $r27, $r34;
        org.slf4j.Logger $r12, $r31;
        java.io.IOException $r4, $r23, $r29;
        java.io.FileInputStream $r17;
        java.io.File $r7, r35;
        org.apache.jute.BinaryInputArchive $r20;
        org.apache.zookeeper.server.DataTree r2;
        java.lang.Object $r10;

        r0 := @this: org.apache.zookeeper.server.persistence.FileSnap;

        r2 := @parameter0: org.apache.zookeeper.server.DataTree;

        r21 := @parameter1: java.util.Map;

        $r1 = specialinvoke r0.<org.apache.zookeeper.server.persistence.FileSnap: java.util.List findNValidSnapshots(int)>(100);

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        if $i0 != 0 goto label01;

        return -1L;

     label01:
        r35 = null;

        z0 = 0;

        i7 = 0;

     label02:
        $i1 = interfaceinvoke $r1.<java.util.List: int size()>();

        if i7 >= $i1 goto label11;

        $r10 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i7);

        r35 = (java.io.File) $r10;

        r36 = null;

        r37 = null;

     label03:
        $r12 = <org.apache.zookeeper.server.persistence.FileSnap: org.slf4j.Logger LOG>;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Reading snapshot ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r35);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r12.<org.slf4j.Logger: void info(java.lang.String)>($r15);

        $r16 = new java.io.BufferedInputStream;

        $r17 = new java.io.FileInputStream;

        specialinvoke $r17.<java.io.FileInputStream: void <init>(java.io.File)>(r35);

        specialinvoke $r16.<java.io.BufferedInputStream: void <init>(java.io.InputStream)>($r17);

        r36 = $r16;

        $r18 = new java.util.zip.CheckedInputStream;

        $r19 = new java.util.zip.Adler32;

        specialinvoke $r19.<java.util.zip.Adler32: void <init>()>();

        specialinvoke $r18.<java.util.zip.CheckedInputStream: void <init>(java.io.InputStream,java.util.zip.Checksum)>($r16, $r19);

        r37 = $r18;

        $r20 = staticinvoke <org.apache.jute.BinaryInputArchive: org.apache.jute.BinaryInputArchive getArchive(java.io.InputStream)>($r18);

        virtualinvoke r0.<org.apache.zookeeper.server.persistence.FileSnap: void deserialize(org.apache.zookeeper.server.DataTree,java.util.Map,org.apache.jute.InputArchive)>(r2, r21, $r20);

        $r22 = virtualinvoke $r18.<java.util.zip.CheckedInputStream: java.util.zip.Checksum getChecksum()>();

        $l4 = interfaceinvoke $r22.<java.util.zip.Checksum: long getValue()>();

        $l5 = interfaceinvoke $r20.<org.apache.jute.InputArchive: long readLong(java.lang.String)>("val");

        $b6 = $l5 cmp $l4;

        if $b6 == 0 goto label04;

        $r23 = new java.io.IOException;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CRC corruption in snapshot :  ");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r35);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r23.<java.io.IOException: void <init>(java.lang.String)>($r27);

        throw $r23;

     label04:
        z0 = 1;

        goto label13;

     label05:
        goto label11;

     label06:
        $r29 := @caughtexception;

        $r31 = <org.apache.zookeeper.server.persistence.FileSnap: org.slf4j.Logger LOG>;

        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();

        $r32 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("problem reading snap file ");

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r35);

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r31.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>($r34, $r29);

        goto label16;

     label07:
        goto label10;

     label08:
        $r28 := @caughtexception;

        goto label19;

     label09:
        throw $r28;

     label10:
        i7 = i7 + 1;

        goto label02;

     label11:
        if z0 != 0 goto label12;

        $r4 = new java.io.IOException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not able to find valid snapshots in ");

        $r7 = r0.<org.apache.zookeeper.server.persistence.FileSnap: java.io.File snapDir>;

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.io.IOException: void <init>(java.lang.String)>($r9);

        throw $r4;

     label12:
        $r3 = virtualinvoke r35.<java.io.File: java.lang.String getName()>();

        $l2 = staticinvoke <org.apache.zookeeper.server.persistence.Util: long getZxidFromName(java.lang.String,java.lang.String)>($r3, "snapshot");

        r2.<org.apache.zookeeper.server.DataTree: long lastProcessedZxid> = $l2;

        $l3 = r2.<org.apache.zookeeper.server.DataTree: long lastProcessedZxid>;

        return $l3;

     label13:
        if $r16 == null goto label14;

        virtualinvoke $r16.<java.io.InputStream: void close()>();

     label14:
        if $r18 == null goto label15;

        virtualinvoke $r18.<java.util.zip.CheckedInputStream: void close()>();

     label15:
        goto label05;

     label16:
        if r36 == null goto label17;

        virtualinvoke r36.<java.io.InputStream: void close()>();

     label17:
        if r37 == null goto label18;

        virtualinvoke r37.<java.util.zip.CheckedInputStream: void close()>();

     label18:
        goto label07;

     label19:
        if r36 == null goto label20;

        virtualinvoke r36.<java.io.InputStream: void close()>();

     label20:
        if r37 == null goto label21;

        virtualinvoke r37.<java.util.zip.CheckedInputStream: void close()>();

     label21:
        goto label09;

        catch java.io.IOException from label03 to label05 with label06;
        catch java.lang.Throwable from label03 to label05 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
    }

    public void deserialize(org.apache.zookeeper.server.DataTree, java.util.Map, org.apache.jute.InputArchive) throws java.io.IOException
    {
        org.apache.jute.InputArchive r1;
        java.util.Map r3;
        int $i0, $i1, $i2, $i3;
        java.lang.String $r10;
        org.apache.zookeeper.server.persistence.FileHeader $r0;
        java.io.IOException $r4;
        org.apache.zookeeper.server.DataTree r2;
        java.lang.StringBuilder $r5, $r6, $r7, $r8, $r9;
        org.apache.zookeeper.server.persistence.FileSnap r11;

        r11 := @this: org.apache.zookeeper.server.persistence.FileSnap;

        r2 := @parameter0: org.apache.zookeeper.server.DataTree;

        r3 := @parameter1: java.util.Map;

        r1 := @parameter2: org.apache.jute.InputArchive;

        $r0 = new org.apache.zookeeper.server.persistence.FileHeader;

        specialinvoke $r0.<org.apache.zookeeper.server.persistence.FileHeader: void <init>()>();

        virtualinvoke $r0.<org.apache.zookeeper.server.persistence.FileHeader: void deserialize(org.apache.jute.InputArchive,java.lang.String)>(r1, "fileheader");

        $i0 = virtualinvoke $r0.<org.apache.zookeeper.server.persistence.FileHeader: int getMagic()>();

        $i1 = <org.apache.zookeeper.server.persistence.FileSnap: int SNAP_MAGIC>;

        if $i0 == $i1 goto label1;

        $r4 = new java.io.IOException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mismatching magic headers ");

        $i2 = virtualinvoke $r0.<org.apache.zookeeper.server.persistence.FileHeader: int getMagic()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" !=  ");

        $i3 = <org.apache.zookeeper.server.persistence.FileSnap: int SNAP_MAGIC>;

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.io.IOException: void <init>(java.lang.String)>($r10);

        throw $r4;

     label1:
        staticinvoke <org.apache.zookeeper.server.util.SerializeUtils: void deserializeSnapshot(org.apache.zookeeper.server.DataTree,org.apache.jute.InputArchive,java.util.Map)>(r2, r1, r3);

        return;
    }

    public java.io.File findMostRecentSnapshot() throws java.io.IOException
    {
        java.util.List $r1;
        int $i0;
        java.lang.Object $r2;
        org.apache.zookeeper.server.persistence.FileSnap r0;
        java.io.File $r3;

        r0 := @this: org.apache.zookeeper.server.persistence.FileSnap;

        $r1 = specialinvoke r0.<org.apache.zookeeper.server.persistence.FileSnap: java.util.List findNValidSnapshots(int)>(1);

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        if $i0 != 0 goto label1;

        return null;

     label1:
        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(0);

        $r3 = (java.io.File) $r2;

        return $r3;
    }

    private java.util.List findNValidSnapshots(int) throws java.io.IOException
    {
        java.util.ArrayList $r4;
        int i0, i1;
        java.lang.String $r13;
        boolean $z0, $z1;
        org.slf4j.Logger $r10;
        java.util.Iterator $r5;
        java.io.IOException $r8;
        java.io.File $r1, r7;
        java.util.List $r3;
        java.lang.Object $r6;
        java.lang.StringBuilder $r9, $r11, $r12;
        org.apache.zookeeper.server.persistence.FileSnap r0;
        java.io.File[] $r2;

        r0 := @this: org.apache.zookeeper.server.persistence.FileSnap;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.zookeeper.server.persistence.FileSnap: java.io.File snapDir>;

        $r2 = virtualinvoke $r1.<java.io.File: java.io.File[] listFiles()>();

        $r3 = staticinvoke <org.apache.zookeeper.server.persistence.Util: java.util.List sortDataDir(java.io.File[],java.lang.String,boolean)>($r2, "snapshot", 0);

        i1 = 0;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        $r5 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label7;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (java.io.File) $r6;

     label2:
        $z1 = staticinvoke <org.apache.zookeeper.server.persistence.Util: boolean isValidSnapshot(java.io.File)>(r7);

        if $z1 == 0 goto label4;

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>(r7);

        i1 = i1 + 1;

        if i1 != i0 goto label4;

     label3:
        goto label7;

     label4:
        goto label6;

     label5:
        $r8 := @caughtexception;

        $r10 = <org.apache.zookeeper.server.persistence.FileSnap: org.slf4j.Logger LOG>;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("invalid snapshot ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r7);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r10.<org.slf4j.Logger: void info(java.lang.String,java.lang.Throwable)>($r13, $r8);

     label6:
        goto label1;

     label7:
        return $r4;

        catch java.io.IOException from label2 to label3 with label5;
    }

    public java.util.List findNRecentSnapshots(int) throws java.io.IOException
    {
        java.util.Iterator $r5;
        java.io.File $r1, r7;
        java.util.ArrayList $r4;
        java.util.List $r3;
        int i0, i1;
        java.lang.Object $r6;
        org.apache.zookeeper.server.persistence.FileSnap r0;
        java.io.File[] $r2;
        boolean $z0;

        r0 := @this: org.apache.zookeeper.server.persistence.FileSnap;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.zookeeper.server.persistence.FileSnap: java.io.File snapDir>;

        $r2 = virtualinvoke $r1.<java.io.File: java.io.File[] listFiles()>();

        $r3 = staticinvoke <org.apache.zookeeper.server.persistence.Util: java.util.List sortDataDir(java.io.File[],java.lang.String,boolean)>($r2, "snapshot", 0);

        i1 = 0;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        $r5 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (java.io.File) $r6;

        if i1 != i0 goto label2;

        goto label3;

     label2:
        i1 = i1 + 1;

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>(r7);

        goto label1;

     label3:
        return $r4;
    }

    protected void serialize(org.apache.zookeeper.server.DataTree, java.util.Map, org.apache.jute.OutputArchive, org.apache.zookeeper.server.persistence.FileHeader) throws java.io.IOException
    {
        java.lang.IllegalStateException $r4;
        org.apache.zookeeper.server.persistence.FileHeader r0;
        java.util.Map r3;
        org.apache.jute.OutputArchive r1;
        org.apache.zookeeper.server.DataTree r2;
        org.apache.zookeeper.server.persistence.FileSnap r5;

        r5 := @this: org.apache.zookeeper.server.persistence.FileSnap;

        r2 := @parameter0: org.apache.zookeeper.server.DataTree;

        r3 := @parameter1: java.util.Map;

        r1 := @parameter2: org.apache.jute.OutputArchive;

        r0 := @parameter3: org.apache.zookeeper.server.persistence.FileHeader;

        if r0 != null goto label1;

        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Snapshot\'s not open for writing: uninitialized header");

        throw $r4;

     label1:
        virtualinvoke r0.<org.apache.zookeeper.server.persistence.FileHeader: void serialize(org.apache.jute.OutputArchive,java.lang.String)>(r1, "fileheader");

        staticinvoke <org.apache.zookeeper.server.util.SerializeUtils: void serializeSnapshot(org.apache.zookeeper.server.DataTree,org.apache.jute.OutputArchive,java.util.Map)>(r2, r1, r3);

        return;
    }

    public synchronized void serialize(org.apache.zookeeper.server.DataTree, java.util.Map, java.io.File) throws java.io.IOException
    {
        org.apache.jute.BinaryOutputArchive $r6;
        org.apache.zookeeper.server.persistence.FileHeader $r7;
        java.io.FileOutputStream $r2;
        long $l1;
        java.io.File r3;
        java.io.BufferedOutputStream $r1;
        java.util.zip.Checksum $r10;
        java.util.zip.CheckedOutputStream $r4;
        java.util.zip.Adler32 $r5;
        java.util.Map r9;
        int $i0;
        org.apache.zookeeper.server.DataTree r8;
        org.apache.zookeeper.server.persistence.FileSnap r0;
        boolean $z0;

        r0 := @this: org.apache.zookeeper.server.persistence.FileSnap;

        r8 := @parameter0: org.apache.zookeeper.server.DataTree;

        r9 := @parameter1: java.util.Map;

        r3 := @parameter2: java.io.File;

        $z0 = r0.<org.apache.zookeeper.server.persistence.FileSnap: boolean close>;

        if $z0 != 0 goto label1;

        $r1 = new java.io.BufferedOutputStream;

        $r2 = new java.io.FileOutputStream;

        specialinvoke $r2.<java.io.FileOutputStream: void <init>(java.io.File)>(r3);

        specialinvoke $r1.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>($r2);

        $r4 = new java.util.zip.CheckedOutputStream;

        $r5 = new java.util.zip.Adler32;

        specialinvoke $r5.<java.util.zip.Adler32: void <init>()>();

        specialinvoke $r4.<java.util.zip.CheckedOutputStream: void <init>(java.io.OutputStream,java.util.zip.Checksum)>($r1, $r5);

        $r6 = staticinvoke <org.apache.jute.BinaryOutputArchive: org.apache.jute.BinaryOutputArchive getArchive(java.io.OutputStream)>($r4);

        $r7 = new org.apache.zookeeper.server.persistence.FileHeader;

        $i0 = <org.apache.zookeeper.server.persistence.FileSnap: int SNAP_MAGIC>;

        specialinvoke $r7.<org.apache.zookeeper.server.persistence.FileHeader: void <init>(int,int,long)>($i0, 2, -1L);

        virtualinvoke r0.<org.apache.zookeeper.server.persistence.FileSnap: void serialize(org.apache.zookeeper.server.DataTree,java.util.Map,org.apache.jute.OutputArchive,org.apache.zookeeper.server.persistence.FileHeader)>(r8, r9, $r6, $r7);

        $r10 = virtualinvoke $r4.<java.util.zip.CheckedOutputStream: java.util.zip.Checksum getChecksum()>();

        $l1 = interfaceinvoke $r10.<java.util.zip.Checksum: long getValue()>();

        interfaceinvoke $r6.<org.apache.jute.OutputArchive: void writeLong(long,java.lang.String)>($l1, "val");

        interfaceinvoke $r6.<org.apache.jute.OutputArchive: void writeString(java.lang.String,java.lang.String)>("/", "path");

        virtualinvoke $r1.<java.io.OutputStream: void flush()>();

        virtualinvoke $r4.<java.util.zip.CheckedOutputStream: void close()>();

        virtualinvoke $r1.<java.io.OutputStream: void close()>();

     label1:
        return;
    }

    public synchronized void close() throws java.io.IOException
    {
        org.apache.zookeeper.server.persistence.FileSnap r0;

        r0 := @this: org.apache.zookeeper.server.persistence.FileSnap;

        r0.<org.apache.zookeeper.server.persistence.FileSnap: boolean close> = 1;

        return;
    }

    static void <clinit>()
    {
        byte[] $r2;
        org.slf4j.Logger $r0;
        int $i0;
        java.lang.String $r1;
        java.nio.ByteBuffer $r3;

        <org.apache.zookeeper.server.persistence.FileSnap: long dbId> = -1L;

        <org.apache.zookeeper.server.persistence.FileSnap: int VERSION> = 2;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lorg/apache/zookeeper/server/persistence/FileSnap;");

        <org.apache.zookeeper.server.persistence.FileSnap: org.slf4j.Logger LOG> = $r0;

        $r1 = "ZKSN";

        $r2 = virtualinvoke $r1.<java.lang.String: byte[] getBytes()>();

        $r3 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>($r2);

        $i0 = virtualinvoke $r3.<java.nio.ByteBuffer: int getInt()>();

        <org.apache.zookeeper.server.persistence.FileSnap: int SNAP_MAGIC> = $i0;

        return;
    }
}
