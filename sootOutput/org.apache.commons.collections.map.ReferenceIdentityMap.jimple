public class org.apache.commons.collections.map.ReferenceIdentityMap extends org.apache.commons.collections.map.AbstractReferenceMap implements java.io.Serializable
{
    private static final long serialVersionUID;

    public void <init>()
    {
        org.apache.commons.collections.map.ReferenceIdentityMap r0;

        r0 := @this: org.apache.commons.collections.map.ReferenceIdentityMap;

        specialinvoke r0.<org.apache.commons.collections.map.AbstractReferenceMap: void <init>(int,int,int,float,boolean)>(0, 1, 16, 0.75F, 0);

        return;
    }

    public void <init>(int, int)
    {
        int i0, i1;
        org.apache.commons.collections.map.ReferenceIdentityMap r0;

        r0 := @this: org.apache.commons.collections.map.ReferenceIdentityMap;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<org.apache.commons.collections.map.AbstractReferenceMap: void <init>(int,int,int,float,boolean)>(i0, i1, 16, 0.75F, 0);

        return;
    }

    public void <init>(int, int, boolean)
    {
        int i0, i1;
        org.apache.commons.collections.map.ReferenceIdentityMap r0;
        boolean z0;

        r0 := @this: org.apache.commons.collections.map.ReferenceIdentityMap;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        z0 := @parameter2: boolean;

        specialinvoke r0.<org.apache.commons.collections.map.AbstractReferenceMap: void <init>(int,int,int,float,boolean)>(i0, i1, 16, 0.75F, z0);

        return;
    }

    public void <init>(int, int, int, float)
    {
        int i0, i1, i2;
        float f0;
        org.apache.commons.collections.map.ReferenceIdentityMap r0;

        r0 := @this: org.apache.commons.collections.map.ReferenceIdentityMap;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        f0 := @parameter3: float;

        specialinvoke r0.<org.apache.commons.collections.map.AbstractReferenceMap: void <init>(int,int,int,float,boolean)>(i0, i1, i2, f0, 0);

        return;
    }

    public void <init>(int, int, int, float, boolean)
    {
        int i0, i1, i2;
        float f0;
        org.apache.commons.collections.map.ReferenceIdentityMap r0;
        boolean z0;

        r0 := @this: org.apache.commons.collections.map.ReferenceIdentityMap;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        f0 := @parameter3: float;

        z0 := @parameter4: boolean;

        specialinvoke r0.<org.apache.commons.collections.map.AbstractReferenceMap: void <init>(int,int,int,float,boolean)>(i0, i1, i2, f0, z0);

        return;
    }

    protected int hash(java.lang.Object)
    {
        int $i0;
        java.lang.Object r0;
        org.apache.commons.collections.map.ReferenceIdentityMap r1;

        r1 := @this: org.apache.commons.collections.map.ReferenceIdentityMap;

        r0 := @parameter0: java.lang.Object;

        $i0 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r0);

        return $i0;
    }

    protected int hashEntry(java.lang.Object, java.lang.Object)
    {
        int $i0, $i1, $i2;
        java.lang.Object r0, r1;
        org.apache.commons.collections.map.ReferenceIdentityMap r2;

        r2 := @this: org.apache.commons.collections.map.ReferenceIdentityMap;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        $i0 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r0);

        $i1 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r1);

        $i2 = $i0 ^ $i1;

        return $i2;
    }

    protected boolean isEqualKey(java.lang.Object, java.lang.Object)
    {
        java.lang.ref.Reference $r2;
        int $i0;
        org.apache.commons.collections.map.ReferenceIdentityMap r0;
        java.lang.Object r1, r3, $r4;
        boolean $z0;

        r0 := @this: org.apache.commons.collections.map.ReferenceIdentityMap;

        r1 := @parameter0: java.lang.Object;

        r3 := @parameter1: java.lang.Object;

        $i0 = r0.<org.apache.commons.collections.map.ReferenceIdentityMap: int keyType>;

        if $i0 <= 0 goto label1;

        $r2 = (java.lang.ref.Reference) r3;

        $r4 = virtualinvoke $r2.<java.lang.ref.Reference: java.lang.Object get()>();

        goto label2;

     label1:
        $r4 = r3;

     label2:
        if r1 != $r4 goto label3;

        $z0 = 1;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        return $z0;
    }

    protected boolean isEqualValue(java.lang.Object, java.lang.Object)
    {
        java.lang.Object r0, r1;
        org.apache.commons.collections.map.ReferenceIdentityMap r2;
        boolean $z0;

        r2 := @this: org.apache.commons.collections.map.ReferenceIdentityMap;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        if r0 != r1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException
    {
        java.io.ObjectOutputStream r0;
        org.apache.commons.collections.map.ReferenceIdentityMap r1;

        r1 := @this: org.apache.commons.collections.map.ReferenceIdentityMap;

        r0 := @parameter0: java.io.ObjectOutputStream;

        virtualinvoke r0.<java.io.ObjectOutputStream: void defaultWriteObject()>();

        virtualinvoke r1.<org.apache.commons.collections.map.ReferenceIdentityMap: void doWriteObject(java.io.ObjectOutputStream)>(r0);

        return;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.io.ObjectInputStream r0;
        org.apache.commons.collections.map.ReferenceIdentityMap r1;

        r1 := @this: org.apache.commons.collections.map.ReferenceIdentityMap;

        r0 := @parameter0: java.io.ObjectInputStream;

        virtualinvoke r0.<java.io.ObjectInputStream: void defaultReadObject()>();

        virtualinvoke r1.<org.apache.commons.collections.map.ReferenceIdentityMap: void doReadObject(java.io.ObjectInputStream)>(r0);

        return;
    }

    public static void <clinit>()
    {
        <org.apache.commons.collections.map.ReferenceIdentityMap: long serialVersionUID> = -1266190134568365852L;

        return;
    }
}
