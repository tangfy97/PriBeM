final class org.springframework.core.convert.support.ObjectToObjectConverter extends java.lang.Object implements org.springframework.core.convert.converter.ConditionalGenericConverter
{

    void <init>()
    {
        org.springframework.core.convert.support.ObjectToObjectConverter r0;

        r0 := @this: org.springframework.core.convert.support.ObjectToObjectConverter;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public boolean matches(org.springframework.core.convert.TypeDescriptor, org.springframework.core.convert.TypeDescriptor)
    {
        org.springframework.core.convert.support.ObjectToObjectConverter r4;
        org.springframework.core.convert.TypeDescriptor r0, r2;
        java.lang.Class $r1, $r3;
        boolean $z0, $z1;

        r4 := @this: org.springframework.core.convert.support.ObjectToObjectConverter;

        r0 := @parameter0: org.springframework.core.convert.TypeDescriptor;

        r2 := @parameter1: org.springframework.core.convert.TypeDescriptor;

        $r1 = virtualinvoke r0.<org.springframework.core.convert.TypeDescriptor: java.lang.Class getObjectType()>();

        $r3 = virtualinvoke r2.<org.springframework.core.convert.TypeDescriptor: java.lang.Class getObjectType()>();

        $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r3);

        if $z0 != 0 goto label1;

        $z1 = staticinvoke <org.springframework.core.convert.support.ObjectToObjectConverter: boolean hasValueOfMethodOrConstructor(java.lang.Class,java.lang.Class)>($r3, $r1);

        if $z1 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public java.util.Set getConvertibleTypes()
    {
        org.springframework.core.convert.converter.GenericConverter$ConvertiblePair $r0;
        java.util.Set $r1;
        org.springframework.core.convert.support.ObjectToObjectConverter r2;

        r2 := @this: org.springframework.core.convert.support.ObjectToObjectConverter;

        $r0 = new org.springframework.core.convert.converter.GenericConverter$ConvertiblePair;

        specialinvoke $r0.<org.springframework.core.convert.converter.GenericConverter$ConvertiblePair: void <init>(java.lang.Class,java.lang.Class)>(class "Ljava/lang/Object;", class "Ljava/lang/Object;");

        $r1 = staticinvoke <java.util.Collections: java.util.Set singleton(java.lang.Object)>($r0);

        return $r1;
    }

    public java.lang.Object convert(java.lang.Object, org.springframework.core.convert.TypeDescriptor, org.springframework.core.convert.TypeDescriptor)
    {
        java.lang.Throwable $r22, $r26;
        java.lang.IllegalStateException $r6;
        org.springframework.core.convert.ConversionFailedException $r23, $r25;
        java.lang.Object[] $r17, $r20;
        java.lang.reflect.Constructor $r5;
        org.springframework.core.convert.TypeDescriptor r0, r2;
        java.lang.String $r8, $r11, $r14, $r16;
        java.lang.reflect.Method $r4;
        java.lang.reflect.InvocationTargetException $r24;
        org.springframework.core.convert.support.ObjectToObjectConverter r27;
        java.lang.Class $r1, $r3;
        java.lang.StringBuilder $r7, $r9, $r10, $r12, $r13, $r15;
        java.lang.Object r18, $r19, $r21;

        r27 := @this: org.springframework.core.convert.support.ObjectToObjectConverter;

        r18 := @parameter0: java.lang.Object;

        r0 := @parameter1: org.springframework.core.convert.TypeDescriptor;

        r2 := @parameter2: org.springframework.core.convert.TypeDescriptor;

        $r1 = virtualinvoke r0.<org.springframework.core.convert.TypeDescriptor: java.lang.Class getObjectType()>();

        $r3 = virtualinvoke r2.<org.springframework.core.convert.TypeDescriptor: java.lang.Class getObjectType()>();

        $r4 = staticinvoke <org.springframework.core.convert.support.ObjectToObjectConverter: java.lang.reflect.Method getValueOfMethodOn(java.lang.Class,java.lang.Class)>($r3, $r1);

     label1:
        if $r4 == null goto label3;

        staticinvoke <org.springframework.util.ReflectionUtils: void makeAccessible(java.lang.reflect.Method)>($r4);

        $r20 = newarray (java.lang.Object)[1];

        $r20[0] = r18;

        $r21 = virtualinvoke $r4.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r20);

     label2:
        return $r21;

     label3:
        $r5 = staticinvoke <org.springframework.core.convert.support.ObjectToObjectConverter: java.lang.reflect.Constructor getConstructor(java.lang.Class,java.lang.Class)>($r3, $r1);

        if $r5 == null goto label7;

        $r17 = newarray (java.lang.Object)[1];

        $r17[0] = r18;

        $r19 = virtualinvoke $r5.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r17);

     label4:
        return $r19;

     label5:
        $r24 := @caughtexception;

        $r25 = new org.springframework.core.convert.ConversionFailedException;

        $r26 = virtualinvoke $r24.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>();

        specialinvoke $r25.<org.springframework.core.convert.ConversionFailedException: void <init>(org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor,java.lang.Object,java.lang.Throwable)>(r0, r2, r18, $r26);

        throw $r25;

     label6:
        $r22 := @caughtexception;

        $r23 = new org.springframework.core.convert.ConversionFailedException;

        specialinvoke $r23.<org.springframework.core.convert.ConversionFailedException: void <init>(org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor,java.lang.Object,java.lang.Throwable)>(r0, r2, r18, $r22);

        throw $r23;

     label7:
        $r6 = new java.lang.IllegalStateException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>(java.lang.String)>("No static valueOf(");

        $r8 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") method or Constructor(");

        $r11 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") exists on ");

        $r14 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r16);

        throw $r6;

        catch java.lang.reflect.InvocationTargetException from label1 to label2 with label5;
        catch java.lang.reflect.InvocationTargetException from label3 to label4 with label5;
        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
    }

    public static boolean hasValueOfMethodOrConstructor(java.lang.Class, java.lang.Class)
    {
        java.lang.Class r0, r1;
        java.lang.reflect.Method $r2;
        java.lang.reflect.Constructor $r3;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.Class;

        $r2 = staticinvoke <org.springframework.core.convert.support.ObjectToObjectConverter: java.lang.reflect.Method getValueOfMethodOn(java.lang.Class,java.lang.Class)>(r0, r1);

        if $r2 != null goto label1;

        $r3 = staticinvoke <org.springframework.core.convert.support.ObjectToObjectConverter: java.lang.reflect.Constructor getConstructor(java.lang.Class,java.lang.Class)>(r0, r1);

        if $r3 != null goto label1;

        return 0;

     label1:
        return 1;
    }

    private static java.lang.reflect.Method getValueOfMethodOn(java.lang.Class, java.lang.Class)
    {
        java.lang.Class[] $r1;
        java.lang.Class r0, r2;
        java.lang.reflect.Method $r3;

        r0 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.lang.Class;

        $r1 = newarray (java.lang.Class)[1];

        $r1[0] = r2;

        $r3 = staticinvoke <org.springframework.util.ClassUtils: java.lang.reflect.Method getStaticMethod(java.lang.Class,java.lang.String,java.lang.Class[])>(r0, "valueOf", $r1);

        return $r3;
    }

    private static java.lang.reflect.Constructor getConstructor(java.lang.Class, java.lang.Class)
    {
        java.lang.Class[] $r1;
        java.lang.Class r0, r2;
        java.lang.reflect.Constructor $r3;

        r0 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.lang.Class;

        $r1 = newarray (java.lang.Class)[1];

        $r1[0] = r2;

        $r3 = staticinvoke <org.springframework.util.ClassUtils: java.lang.reflect.Constructor getConstructorIfAvailable(java.lang.Class,java.lang.Class[])>(r0, $r1);

        return $r3;
    }
}
