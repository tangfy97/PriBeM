public class org.waveprotocol.wave.model.testing.MockParticipationHelper$Frame extends java.lang.Object
{
    private final java.util.Set candidates;
    private final org.waveprotocol.wave.model.wave.ParticipantId editor;
    private final org.waveprotocol.wave.model.wave.ParticipantId result;

    public transient void <init>(org.waveprotocol.wave.model.wave.ParticipantId, org.waveprotocol.wave.model.wave.ParticipantId, org.waveprotocol.wave.model.wave.ParticipantId[])
    {
        java.util.HashSet $r3;
        org.waveprotocol.wave.model.testing.MockParticipationHelper$Frame r0;
        java.util.List $r5;
        org.waveprotocol.wave.model.wave.ParticipantId[] r4;
        org.waveprotocol.wave.model.wave.ParticipantId r1, r2;

        r0 := @this: org.waveprotocol.wave.model.testing.MockParticipationHelper$Frame;

        r1 := @parameter0: org.waveprotocol.wave.model.wave.ParticipantId;

        r2 := @parameter1: org.waveprotocol.wave.model.wave.ParticipantId;

        r4 := @parameter2: org.waveprotocol.wave.model.wave.ParticipantId[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.waveprotocol.wave.model.testing.MockParticipationHelper$Frame: org.waveprotocol.wave.model.wave.ParticipantId result> = r1;

        r0.<org.waveprotocol.wave.model.testing.MockParticipationHelper$Frame: org.waveprotocol.wave.model.wave.ParticipantId editor> = r2;

        $r3 = new java.util.HashSet;

        $r5 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r4);

        specialinvoke $r3.<java.util.HashSet: void <init>(java.util.Collection)>($r5);

        r0.<org.waveprotocol.wave.model.testing.MockParticipationHelper$Frame: java.util.Set candidates> = $r3;

        return;
    }

    public org.waveprotocol.wave.model.wave.ParticipantId apply()
    {
        org.waveprotocol.wave.model.testing.MockParticipationHelper$Frame r0;
        java.lang.IllegalStateException $r3;
        org.waveprotocol.wave.model.wave.ParticipantId $r1, $r2;

        r0 := @this: org.waveprotocol.wave.model.testing.MockParticipationHelper$Frame;

        $r1 = r0.<org.waveprotocol.wave.model.testing.MockParticipationHelper$Frame: org.waveprotocol.wave.model.wave.ParticipantId result>;

        if $r1 != null goto label1;

        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Authoriser set to throw exception on this frame.");

        throw $r3;

     label1:
        $r2 = r0.<org.waveprotocol.wave.model.testing.MockParticipationHelper$Frame: org.waveprotocol.wave.model.wave.ParticipantId result>;

        return $r2;
    }

    public boolean matches(org.waveprotocol.wave.model.wave.ParticipantId, java.util.Set)
    {
        java.util.Set r3, $r4;
        org.waveprotocol.wave.model.wave.ParticipantId r0, $r2;
        org.waveprotocol.wave.model.testing.MockParticipationHelper$Frame r1;
        boolean $z0, $z1, $z2;

        r1 := @this: org.waveprotocol.wave.model.testing.MockParticipationHelper$Frame;

        r0 := @parameter0: org.waveprotocol.wave.model.wave.ParticipantId;

        r3 := @parameter1: java.util.Set;

        $r2 = r1.<org.waveprotocol.wave.model.testing.MockParticipationHelper$Frame: org.waveprotocol.wave.model.wave.ParticipantId editor>;

        $z0 = virtualinvoke r0.<org.waveprotocol.wave.model.wave.ParticipantId: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label1;

        $r4 = r1.<org.waveprotocol.wave.model.testing.MockParticipationHelper$Frame: java.util.Set candidates>;

        $z1 = virtualinvoke r3.<java.lang.Object: boolean equals(java.lang.Object)>($r4);

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }
}
