public final class org.waveprotocol.wave.model.testing.OpBasedWaveletFactory extends java.lang.Object implements org.waveprotocol.wave.model.wave.opbased.WaveViewImpl$WaveletFactory, org.waveprotocol.wave.model.testing.Factory
{
    private static final org.waveprotocol.wave.model.wave.ParticipantId FAKE_PARTICIPANT;
    private final org.waveprotocol.wave.model.wave.data.ObservableWaveletData$Factory holderFactory;
    private final org.waveprotocol.wave.model.operation.SilentOperationSink sink;
    private final org.waveprotocol.wave.model.wave.ParticipantId author;
    private org.waveprotocol.wave.model.testing.MockWaveletOperationContextFactory lastContextFactory;
    private org.waveprotocol.wave.model.testing.MockParticipationHelper lastAuthoriser;

    private void <init>(org.waveprotocol.wave.model.wave.data.ObservableWaveletData$Factory, org.waveprotocol.wave.model.operation.SilentOperationSink, org.waveprotocol.wave.model.wave.ParticipantId)
    {
        org.waveprotocol.wave.model.testing.OpBasedWaveletFactory r0;
        org.waveprotocol.wave.model.operation.SilentOperationSink r2;
        org.waveprotocol.wave.model.wave.data.ObservableWaveletData$Factory r1;
        org.waveprotocol.wave.model.wave.ParticipantId r3;

        r0 := @this: org.waveprotocol.wave.model.testing.OpBasedWaveletFactory;

        r1 := @parameter0: org.waveprotocol.wave.model.wave.data.ObservableWaveletData$Factory;

        r2 := @parameter1: org.waveprotocol.wave.model.operation.SilentOperationSink;

        r3 := @parameter2: org.waveprotocol.wave.model.wave.ParticipantId;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.waveprotocol.wave.model.testing.OpBasedWaveletFactory: org.waveprotocol.wave.model.wave.data.ObservableWaveletData$Factory holderFactory> = r1;

        r0.<org.waveprotocol.wave.model.testing.OpBasedWaveletFactory: org.waveprotocol.wave.model.operation.SilentOperationSink sink> = r2;

        r0.<org.waveprotocol.wave.model.testing.OpBasedWaveletFactory: org.waveprotocol.wave.model.wave.ParticipantId author> = r3;

        return;
    }

    public static org.waveprotocol.wave.model.testing.OpBasedWaveletFactory$Builder builder(org.waveprotocol.wave.model.schema.SchemaProvider)
    {
        org.waveprotocol.wave.model.schema.SchemaProvider r1;
        org.waveprotocol.wave.model.testing.OpBasedWaveletFactory$Builder $r0;

        r1 := @parameter0: org.waveprotocol.wave.model.schema.SchemaProvider;

        $r0 = new org.waveprotocol.wave.model.testing.OpBasedWaveletFactory$Builder;

        specialinvoke $r0.<org.waveprotocol.wave.model.testing.OpBasedWaveletFactory$Builder: void <init>(org.waveprotocol.wave.model.schema.SchemaProvider)>(r1);

        return $r0;
    }

    public org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet create()
    {
        org.waveprotocol.wave.model.testing.OpBasedWaveletFactory r1;
        org.waveprotocol.wave.model.id.WaveId $r2;
        org.waveprotocol.wave.model.id.WaveletId $r3;
        org.waveprotocol.wave.model.wave.ParticipantId $r4;
        org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet $r5;
        org.waveprotocol.wave.model.id.IdGenerator $r0;

        r1 := @this: org.waveprotocol.wave.model.testing.OpBasedWaveletFactory;

        $r0 = staticinvoke <org.waveprotocol.wave.model.testing.FakeIdGenerator: org.waveprotocol.wave.model.id.IdGenerator create()>();

        $r2 = interfaceinvoke $r0.<org.waveprotocol.wave.model.id.IdGenerator: org.waveprotocol.wave.model.id.WaveId newWaveId()>();

        $r3 = interfaceinvoke $r0.<org.waveprotocol.wave.model.id.IdGenerator: org.waveprotocol.wave.model.id.WaveletId newConversationWaveletId()>();

        $r4 = <org.waveprotocol.wave.model.testing.OpBasedWaveletFactory: org.waveprotocol.wave.model.wave.ParticipantId FAKE_PARTICIPANT>;

        $r5 = virtualinvoke r1.<org.waveprotocol.wave.model.testing.OpBasedWaveletFactory: org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet create(org.waveprotocol.wave.model.id.WaveId,org.waveprotocol.wave.model.id.WaveletId,org.waveprotocol.wave.model.wave.ParticipantId)>($r2, $r3, $r4);

        return $r5;
    }

    public org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet create(org.waveprotocol.wave.model.id.WaveId, org.waveprotocol.wave.model.id.WaveletId, org.waveprotocol.wave.model.wave.ParticipantId)
    {
        org.waveprotocol.wave.model.testing.OpBasedWaveletFactory r1;
        long $l0;
        org.waveprotocol.wave.model.id.WaveletId r4;
        org.waveprotocol.wave.model.wave.ParticipantId r5, $r10;
        org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet $r16;
        org.waveprotocol.wave.model.wave.data.ReadableWaveletData $r7;
        org.waveprotocol.wave.model.version.HashedVersion $r0;
        org.waveprotocol.wave.model.testing.MockWaveletOperationContextFactory $r9, $r11, $r18;
        org.waveprotocol.wave.model.id.WaveId r3;
        org.waveprotocol.wave.model.wave.data.ObservableWaveletData r8;
        org.waveprotocol.wave.model.wave.data.impl.EmptyWaveletSnapshot $r2;
        org.waveprotocol.wave.model.operation.SilentOperationSink $r13, $r15;
        org.waveprotocol.wave.model.testing.MockParticipationHelper $r12, $r17;
        org.waveprotocol.wave.model.testing.OpBasedWaveletFactory$VersionIncrementingSink $r14;
        org.waveprotocol.wave.model.wave.data.ObservableWaveletData$Factory $r6;

        r1 := @this: org.waveprotocol.wave.model.testing.OpBasedWaveletFactory;

        r3 := @parameter0: org.waveprotocol.wave.model.id.WaveId;

        r4 := @parameter1: org.waveprotocol.wave.model.id.WaveletId;

        r5 := @parameter2: org.waveprotocol.wave.model.wave.ParticipantId;

        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $r0 = staticinvoke <org.waveprotocol.wave.model.version.HashedVersion: org.waveprotocol.wave.model.version.HashedVersion unsigned(long)>(0L);

        $r6 = r1.<org.waveprotocol.wave.model.testing.OpBasedWaveletFactory: org.waveprotocol.wave.model.wave.data.ObservableWaveletData$Factory holderFactory>;

        $r2 = new org.waveprotocol.wave.model.wave.data.impl.EmptyWaveletSnapshot;

        specialinvoke $r2.<org.waveprotocol.wave.model.wave.data.impl.EmptyWaveletSnapshot: void <init>(org.waveprotocol.wave.model.id.WaveId,org.waveprotocol.wave.model.id.WaveletId,org.waveprotocol.wave.model.wave.ParticipantId,org.waveprotocol.wave.model.version.HashedVersion,long)>(r3, r4, r5, $r0, $l0);

        $r7 = interfaceinvoke $r6.<org.waveprotocol.wave.model.wave.data.ObservableWaveletData$Factory: org.waveprotocol.wave.model.wave.data.ReadableWaveletData create(org.waveprotocol.wave.model.wave.data.ReadableWaveletData)>($r2);

        r8 = (org.waveprotocol.wave.model.wave.data.ObservableWaveletData) $r7;

        $r9 = new org.waveprotocol.wave.model.testing.MockWaveletOperationContextFactory;

        specialinvoke $r9.<org.waveprotocol.wave.model.testing.MockWaveletOperationContextFactory: void <init>()>();

        $r10 = r1.<org.waveprotocol.wave.model.testing.OpBasedWaveletFactory: org.waveprotocol.wave.model.wave.ParticipantId author>;

        $r11 = virtualinvoke $r9.<org.waveprotocol.wave.model.testing.MockWaveletOperationContextFactory: org.waveprotocol.wave.model.testing.MockWaveletOperationContextFactory setParticipantId(org.waveprotocol.wave.model.wave.ParticipantId)>($r10);

        r1.<org.waveprotocol.wave.model.testing.OpBasedWaveletFactory: org.waveprotocol.wave.model.testing.MockWaveletOperationContextFactory lastContextFactory> = $r11;

        $r12 = new org.waveprotocol.wave.model.testing.MockParticipationHelper;

        specialinvoke $r12.<org.waveprotocol.wave.model.testing.MockParticipationHelper: void <init>()>();

        r1.<org.waveprotocol.wave.model.testing.OpBasedWaveletFactory: org.waveprotocol.wave.model.testing.MockParticipationHelper lastAuthoriser> = $r12;

        $r13 = staticinvoke <org.waveprotocol.wave.model.operation.SilentOperationSink$Executor: org.waveprotocol.wave.model.operation.SilentOperationSink build(java.lang.Object)>(r8);

        $r14 = new org.waveprotocol.wave.model.testing.OpBasedWaveletFactory$VersionIncrementingSink;

        $r15 = r1.<org.waveprotocol.wave.model.testing.OpBasedWaveletFactory: org.waveprotocol.wave.model.operation.SilentOperationSink sink>;

        specialinvoke $r14.<org.waveprotocol.wave.model.testing.OpBasedWaveletFactory$VersionIncrementingSink: void <init>(org.waveprotocol.wave.model.wave.data.WaveletData,org.waveprotocol.wave.model.operation.SilentOperationSink)>(r8, $r15);

        $r16 = new org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet;

        $r18 = r1.<org.waveprotocol.wave.model.testing.OpBasedWaveletFactory: org.waveprotocol.wave.model.testing.MockWaveletOperationContextFactory lastContextFactory>;

        $r17 = r1.<org.waveprotocol.wave.model.testing.OpBasedWaveletFactory: org.waveprotocol.wave.model.testing.MockParticipationHelper lastAuthoriser>;

        specialinvoke $r16.<org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet: void <init>(org.waveprotocol.wave.model.id.WaveId,org.waveprotocol.wave.model.wave.data.ObservableWaveletData,org.waveprotocol.wave.model.operation.wave.WaveletOperationContext$Factory,org.waveprotocol.wave.model.wave.ParticipationHelper,org.waveprotocol.wave.model.operation.SilentOperationSink,org.waveprotocol.wave.model.operation.SilentOperationSink)>(r3, r8, $r18, $r17, $r13, $r14);

        return $r16;
    }

    public org.waveprotocol.wave.model.testing.MockParticipationHelper getLastAuthoriser()
    {
        org.waveprotocol.wave.model.testing.OpBasedWaveletFactory r0;
        org.waveprotocol.wave.model.testing.MockParticipationHelper $r1;

        r0 := @this: org.waveprotocol.wave.model.testing.OpBasedWaveletFactory;

        $r1 = r0.<org.waveprotocol.wave.model.testing.OpBasedWaveletFactory: org.waveprotocol.wave.model.testing.MockParticipationHelper lastAuthoriser>;

        return $r1;
    }

    public org.waveprotocol.wave.model.testing.MockWaveletOperationContextFactory getLastContextFactory()
    {
        org.waveprotocol.wave.model.testing.OpBasedWaveletFactory r0;
        org.waveprotocol.wave.model.testing.MockWaveletOperationContextFactory $r1;

        r0 := @this: org.waveprotocol.wave.model.testing.OpBasedWaveletFactory;

        $r1 = r0.<org.waveprotocol.wave.model.testing.OpBasedWaveletFactory: org.waveprotocol.wave.model.testing.MockWaveletOperationContextFactory lastContextFactory>;

        return $r1;
    }

    public volatile org.waveprotocol.wave.model.wave.ObservableWavelet create(org.waveprotocol.wave.model.id.WaveId, org.waveprotocol.wave.model.id.WaveletId, org.waveprotocol.wave.model.wave.ParticipantId)
    {
        org.waveprotocol.wave.model.testing.OpBasedWaveletFactory r0;
        org.waveprotocol.wave.model.id.WaveId r1;
        org.waveprotocol.wave.model.id.WaveletId r2;
        org.waveprotocol.wave.model.wave.ParticipantId r3;
        org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet $r4;

        r0 := @this: org.waveprotocol.wave.model.testing.OpBasedWaveletFactory;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveId;

        r2 := @parameter1: org.waveprotocol.wave.model.id.WaveletId;

        r3 := @parameter2: org.waveprotocol.wave.model.wave.ParticipantId;

        $r4 = virtualinvoke r0.<org.waveprotocol.wave.model.testing.OpBasedWaveletFactory: org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet create(org.waveprotocol.wave.model.id.WaveId,org.waveprotocol.wave.model.id.WaveletId,org.waveprotocol.wave.model.wave.ParticipantId)>(r1, r2, r3);

        return $r4;
    }

    public volatile java.lang.Object create()
    {
        org.waveprotocol.wave.model.testing.OpBasedWaveletFactory r0;
        org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet $r1;

        r0 := @this: org.waveprotocol.wave.model.testing.OpBasedWaveletFactory;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.testing.OpBasedWaveletFactory: org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet create()>();

        return $r1;
    }

    static org.waveprotocol.wave.model.wave.ParticipantId access$000()
    {
        org.waveprotocol.wave.model.wave.ParticipantId $r0;

        $r0 = <org.waveprotocol.wave.model.testing.OpBasedWaveletFactory: org.waveprotocol.wave.model.wave.ParticipantId FAKE_PARTICIPANT>;

        return $r0;
    }

    void <init>(org.waveprotocol.wave.model.wave.data.ObservableWaveletData$Factory, org.waveprotocol.wave.model.operation.SilentOperationSink, org.waveprotocol.wave.model.wave.ParticipantId, org.waveprotocol.wave.model.testing.OpBasedWaveletFactory$1)
    {
        org.waveprotocol.wave.model.testing.OpBasedWaveletFactory r0;
        org.waveprotocol.wave.model.operation.SilentOperationSink r2;
        org.waveprotocol.wave.model.testing.OpBasedWaveletFactory$1 r4;
        org.waveprotocol.wave.model.wave.data.ObservableWaveletData$Factory r1;
        org.waveprotocol.wave.model.wave.ParticipantId r3;

        r0 := @this: org.waveprotocol.wave.model.testing.OpBasedWaveletFactory;

        r1 := @parameter0: org.waveprotocol.wave.model.wave.data.ObservableWaveletData$Factory;

        r2 := @parameter1: org.waveprotocol.wave.model.operation.SilentOperationSink;

        r3 := @parameter2: org.waveprotocol.wave.model.wave.ParticipantId;

        r4 := @parameter3: org.waveprotocol.wave.model.testing.OpBasedWaveletFactory$1;

        specialinvoke r0.<org.waveprotocol.wave.model.testing.OpBasedWaveletFactory: void <init>(org.waveprotocol.wave.model.wave.data.ObservableWaveletData$Factory,org.waveprotocol.wave.model.operation.SilentOperationSink,org.waveprotocol.wave.model.wave.ParticipantId)>(r1, r2, r3);

        return;
    }

    static void <clinit>()
    {
        org.waveprotocol.wave.model.wave.ParticipantId $r0;

        $r0 = new org.waveprotocol.wave.model.wave.ParticipantId;

        specialinvoke $r0.<org.waveprotocol.wave.model.wave.ParticipantId: void <init>(java.lang.String)>("fake@example.com");

        <org.waveprotocol.wave.model.testing.OpBasedWaveletFactory: org.waveprotocol.wave.model.wave.ParticipantId FAKE_PARTICIPANT> = $r0;

        return;
    }
}
