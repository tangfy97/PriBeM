public class org.apache.http.impl.pool.BasicConnPool extends org.apache.http.pool.AbstractConnPool
{
    private static java.util.concurrent.atomic.AtomicLong COUNTER;

    public void <init>(org.apache.http.pool.ConnFactory)
    {
        org.apache.http.pool.ConnFactory r1;
        org.apache.http.impl.pool.BasicConnPool r0;

        r0 := @this: org.apache.http.impl.pool.BasicConnPool;

        r1 := @parameter0: org.apache.http.pool.ConnFactory;

        specialinvoke r0.<org.apache.http.pool.AbstractConnPool: void <init>(org.apache.http.pool.ConnFactory,int,int)>(r1, 2, 20);

        return;
    }

    public void <init>(org.apache.http.params.HttpParams)
    {
        org.apache.http.impl.pool.BasicConnFactory $r1;
        org.apache.http.impl.pool.BasicConnPool r0;
        org.apache.http.params.HttpParams r2;

        r0 := @this: org.apache.http.impl.pool.BasicConnPool;

        r2 := @parameter0: org.apache.http.params.HttpParams;

        $r1 = new org.apache.http.impl.pool.BasicConnFactory;

        specialinvoke $r1.<org.apache.http.impl.pool.BasicConnFactory: void <init>(org.apache.http.params.HttpParams)>(r2);

        specialinvoke r0.<org.apache.http.pool.AbstractConnPool: void <init>(org.apache.http.pool.ConnFactory,int,int)>($r1, 2, 20);

        return;
    }

    protected org.apache.http.impl.pool.BasicPoolEntry createEntry(org.apache.http.HttpHost, org.apache.http.HttpClientConnection)
    {
        java.util.concurrent.atomic.AtomicLong $r1;
        org.apache.http.HttpClientConnection r4;
        long $l0;
        java.lang.String $r2;
        org.apache.http.HttpHost r3;
        org.apache.http.impl.pool.BasicPoolEntry $r0;
        org.apache.http.impl.pool.BasicConnPool r5;

        r5 := @this: org.apache.http.impl.pool.BasicConnPool;

        r3 := @parameter0: org.apache.http.HttpHost;

        r4 := @parameter1: org.apache.http.HttpClientConnection;

        $r0 = new org.apache.http.impl.pool.BasicPoolEntry;

        $r1 = <org.apache.http.impl.pool.BasicConnPool: java.util.concurrent.atomic.AtomicLong COUNTER>;

        $l0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLong: long getAndIncrement()>();

        $r2 = staticinvoke <java.lang.Long: java.lang.String toString(long)>($l0);

        specialinvoke $r0.<org.apache.http.impl.pool.BasicPoolEntry: void <init>(java.lang.String,org.apache.http.HttpHost,org.apache.http.HttpClientConnection)>($r2, r3, r4);

        return $r0;
    }

    protected volatile org.apache.http.pool.PoolEntry createEntry(java.lang.Object, java.lang.Object)
    {
        org.apache.http.HttpClientConnection $r3;
        java.lang.Object r1, r2;
        org.apache.http.HttpHost $r4;
        org.apache.http.impl.pool.BasicConnPool r0;
        org.apache.http.impl.pool.BasicPoolEntry $r5;

        r0 := @this: org.apache.http.impl.pool.BasicConnPool;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (org.apache.http.HttpHost) r1;

        $r3 = (org.apache.http.HttpClientConnection) r2;

        $r5 = virtualinvoke r0.<org.apache.http.impl.pool.BasicConnPool: org.apache.http.impl.pool.BasicPoolEntry createEntry(org.apache.http.HttpHost,org.apache.http.HttpClientConnection)>($r4, $r3);

        return $r5;
    }

    static void <clinit>()
    {
        java.util.concurrent.atomic.AtomicLong $r0;

        $r0 = new java.util.concurrent.atomic.AtomicLong;

        specialinvoke $r0.<java.util.concurrent.atomic.AtomicLong: void <init>()>();

        <org.apache.http.impl.pool.BasicConnPool: java.util.concurrent.atomic.AtomicLong COUNTER> = $r0;

        return;
    }
}
