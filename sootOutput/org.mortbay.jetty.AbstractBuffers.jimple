public abstract class org.mortbay.jetty.AbstractBuffers extends org.mortbay.component.AbstractLifeCycle implements org.mortbay.io.Buffers
{
    private int _headerBufferSize;
    private int _requestBufferSize;
    private int _responseBufferSize;
    private static final int __HEADER;
    private static final int __REQUEST;
    private static final int __RESPONSE;
    private static final int __OTHER;
    private final int[] _pool;
    private final java.lang.ThreadLocal _buffers;

    public void <init>()
    {
        org.mortbay.jetty.AbstractBuffers r0;
        int[] $r1;
        org.mortbay.jetty.AbstractBuffers$1 $r2;

        r0 := @this: org.mortbay.jetty.AbstractBuffers;

        specialinvoke r0.<org.mortbay.component.AbstractLifeCycle: void <init>()>();

        r0.<org.mortbay.jetty.AbstractBuffers: int _headerBufferSize> = 4096;

        r0.<org.mortbay.jetty.AbstractBuffers: int _requestBufferSize> = 8192;

        r0.<org.mortbay.jetty.AbstractBuffers: int _responseBufferSize> = 24576;

        $r1 = newarray (int)[4];

        $r1[0] = 2;

        $r1[1] = 1;

        $r1[2] = 1;

        $r1[3] = 2;

        r0.<org.mortbay.jetty.AbstractBuffers: int[] _pool> = $r1;

        $r2 = new org.mortbay.jetty.AbstractBuffers$1;

        specialinvoke $r2.<org.mortbay.jetty.AbstractBuffers$1: void <init>(org.mortbay.jetty.AbstractBuffers)>(r0);

        r0.<org.mortbay.jetty.AbstractBuffers: java.lang.ThreadLocal _buffers> = $r2;

        return;
    }

    public org.mortbay.io.Buffer getBuffer(int)
    {
        org.mortbay.io.Buffer[][] $r6;
        org.mortbay.jetty.AbstractBuffers r0;
        byte $b5;
        org.mortbay.io.Buffer[] $r7;
        int i0, $i1, $i2, $i3, $i4, i6, $i7;
        java.lang.ThreadLocal $r3;
        org.mortbay.io.Buffer $r1, r2;
        org.mortbay.jetty.AbstractBuffers$ThreadBuffers $r5;
        java.lang.Object $r4;

        r0 := @this: org.mortbay.jetty.AbstractBuffers;

        i0 := @parameter0: int;

        $i1 = r0.<org.mortbay.jetty.AbstractBuffers: int _headerBufferSize>;

        if i0 != $i1 goto label1;

        $b5 = 0;

        goto label4;

     label1:
        $i2 = r0.<org.mortbay.jetty.AbstractBuffers: int _responseBufferSize>;

        if i0 != $i2 goto label2;

        $b5 = 2;

        goto label4;

     label2:
        $i3 = r0.<org.mortbay.jetty.AbstractBuffers: int _requestBufferSize>;

        if i0 != $i3 goto label3;

        $b5 = 1;

        goto label4;

     label3:
        $b5 = 3;

     label4:
        $r3 = r0.<org.mortbay.jetty.AbstractBuffers: java.lang.ThreadLocal _buffers>;

        $r4 = virtualinvoke $r3.<java.lang.ThreadLocal: java.lang.Object get()>();

        $r5 = (org.mortbay.jetty.AbstractBuffers$ThreadBuffers) $r4;

        $r6 = $r5.<org.mortbay.jetty.AbstractBuffers$ThreadBuffers: org.mortbay.io.Buffer[][] _buffers>;

        $r7 = $r6[$b5];

        i6 = 0;

     label5:
        $i7 = lengthof $r7;

        if i6 >= $i7 goto label7;

        r2 = $r7[i6];

        if r2 == null goto label6;

        $i4 = interfaceinvoke r2.<org.mortbay.io.Buffer: int capacity()>();

        if $i4 != i0 goto label6;

        $r7[i6] = null;

        return r2;

     label6:
        i6 = i6 + 1;

        goto label5;

     label7:
        $r1 = virtualinvoke r0.<org.mortbay.jetty.AbstractBuffers: org.mortbay.io.Buffer newBuffer(int)>(i0);

        return $r1;
    }

    public void returnBuffer(org.mortbay.io.Buffer)
    {
        org.mortbay.io.Buffer[][] $r6;
        org.mortbay.jetty.AbstractBuffers r1;
        byte $b4;
        org.mortbay.io.Buffer[] $r7;
        int $i0, $i1, $i2, $i3, i5, $i6;
        boolean $z0, $z1;
        java.lang.ThreadLocal $r3;
        org.mortbay.io.Buffer r0, $r2;
        org.mortbay.jetty.AbstractBuffers$ThreadBuffers $r5;
        java.lang.Object $r4;

        r1 := @this: org.mortbay.jetty.AbstractBuffers;

        r0 := @parameter0: org.mortbay.io.Buffer;

        interfaceinvoke r0.<org.mortbay.io.Buffer: void clear()>();

        $z0 = interfaceinvoke r0.<org.mortbay.io.Buffer: boolean isVolatile()>();

        if $z0 != 0 goto label1;

        $z1 = interfaceinvoke r0.<org.mortbay.io.Buffer: boolean isImmutable()>();

        if $z1 == 0 goto label2;

     label1:
        return;

     label2:
        $i0 = interfaceinvoke r0.<org.mortbay.io.Buffer: int capacity()>();

        $i1 = r1.<org.mortbay.jetty.AbstractBuffers: int _headerBufferSize>;

        if $i0 != $i1 goto label3;

        $b4 = 0;

        goto label6;

     label3:
        $i2 = r1.<org.mortbay.jetty.AbstractBuffers: int _responseBufferSize>;

        if $i0 != $i2 goto label4;

        $b4 = 2;

        goto label6;

     label4:
        $i3 = r1.<org.mortbay.jetty.AbstractBuffers: int _requestBufferSize>;

        if $i0 != $i3 goto label5;

        $b4 = 1;

        goto label6;

     label5:
        $b4 = 3;

     label6:
        $r3 = r1.<org.mortbay.jetty.AbstractBuffers: java.lang.ThreadLocal _buffers>;

        $r4 = virtualinvoke $r3.<java.lang.ThreadLocal: java.lang.Object get()>();

        $r5 = (org.mortbay.jetty.AbstractBuffers$ThreadBuffers) $r4;

        $r6 = $r5.<org.mortbay.jetty.AbstractBuffers$ThreadBuffers: org.mortbay.io.Buffer[][] _buffers>;

        $r7 = $r6[$b4];

        i5 = 0;

     label7:
        $i6 = lengthof $r7;

        if i5 >= $i6 goto label9;

        $r2 = $r7[i5];

        if $r2 != null goto label8;

        $r7[i5] = r0;

        return;

     label8:
        i5 = i5 + 1;

        goto label7;

     label9:
        return;
    }

    protected void doStart() throws java.lang.Exception
    {
        int[] $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14;
        org.mortbay.jetty.AbstractBuffers r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23;

        r0 := @this: org.mortbay.jetty.AbstractBuffers;

        specialinvoke r0.<org.mortbay.component.AbstractLifeCycle: void doStart()>();

        $i1 = r0.<org.mortbay.jetty.AbstractBuffers: int _headerBufferSize>;

        $i0 = r0.<org.mortbay.jetty.AbstractBuffers: int _requestBufferSize>;

        if $i1 != $i0 goto label1;

        $i18 = r0.<org.mortbay.jetty.AbstractBuffers: int _headerBufferSize>;

        $i17 = r0.<org.mortbay.jetty.AbstractBuffers: int _responseBufferSize>;

        if $i18 != $i17 goto label1;

        $r10 = r0.<org.mortbay.jetty.AbstractBuffers: int[] _pool>;

        $i22 = $r10[0];

        $r11 = r0.<org.mortbay.jetty.AbstractBuffers: int[] _pool>;

        $i20 = $r11[1];

        $r12 = r0.<org.mortbay.jetty.AbstractBuffers: int[] _pool>;

        $i19 = $r12[2];

        $i21 = $i20 + $i19;

        $i23 = $i22 + $i21;

        $r10[0] = $i23;

        $r13 = r0.<org.mortbay.jetty.AbstractBuffers: int[] _pool>;

        $r13[1] = 0;

        $r14 = r0.<org.mortbay.jetty.AbstractBuffers: int[] _pool>;

        $r14[2] = 0;

        goto label4;

     label1:
        $i3 = r0.<org.mortbay.jetty.AbstractBuffers: int _headerBufferSize>;

        $i2 = r0.<org.mortbay.jetty.AbstractBuffers: int _requestBufferSize>;

        if $i3 != $i2 goto label2;

        $r7 = r0.<org.mortbay.jetty.AbstractBuffers: int[] _pool>;

        $i15 = $r7[0];

        $r8 = r0.<org.mortbay.jetty.AbstractBuffers: int[] _pool>;

        $i14 = $r8[1];

        $i16 = $i15 + $i14;

        $r7[0] = $i16;

        $r9 = r0.<org.mortbay.jetty.AbstractBuffers: int[] _pool>;

        $r9[1] = 0;

        goto label4;

     label2:
        $i5 = r0.<org.mortbay.jetty.AbstractBuffers: int _headerBufferSize>;

        $i4 = r0.<org.mortbay.jetty.AbstractBuffers: int _responseBufferSize>;

        if $i5 != $i4 goto label3;

        $r4 = r0.<org.mortbay.jetty.AbstractBuffers: int[] _pool>;

        $i12 = $r4[0];

        $r5 = r0.<org.mortbay.jetty.AbstractBuffers: int[] _pool>;

        $i11 = $r5[2];

        $i13 = $i12 + $i11;

        $r4[0] = $i13;

        $r6 = r0.<org.mortbay.jetty.AbstractBuffers: int[] _pool>;

        $r6[2] = 0;

        goto label4;

     label3:
        $i7 = r0.<org.mortbay.jetty.AbstractBuffers: int _requestBufferSize>;

        $i6 = r0.<org.mortbay.jetty.AbstractBuffers: int _responseBufferSize>;

        if $i7 != $i6 goto label4;

        $r1 = r0.<org.mortbay.jetty.AbstractBuffers: int[] _pool>;

        $i9 = $r1[2];

        $r2 = r0.<org.mortbay.jetty.AbstractBuffers: int[] _pool>;

        $i8 = $r2[1];

        $i10 = $i9 + $i8;

        $r1[2] = $i10;

        $r3 = r0.<org.mortbay.jetty.AbstractBuffers: int[] _pool>;

        $r3[1] = 0;

     label4:
        return;
    }

    public int getHeaderBufferSize()
    {
        int $i0;
        org.mortbay.jetty.AbstractBuffers r0;

        r0 := @this: org.mortbay.jetty.AbstractBuffers;

        $i0 = r0.<org.mortbay.jetty.AbstractBuffers: int _headerBufferSize>;

        return $i0;
    }

    public void setHeaderBufferSize(int)
    {
        java.lang.IllegalStateException $r1;
        org.mortbay.jetty.AbstractBuffers r0;
        int i0;
        boolean $z0;

        r0 := @this: org.mortbay.jetty.AbstractBuffers;

        i0 := @parameter0: int;

        $z0 = virtualinvoke r0.<org.mortbay.jetty.AbstractBuffers: boolean isStarted()>();

        if $z0 == 0 goto label1;

        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>()>();

        throw $r1;

     label1:
        r0.<org.mortbay.jetty.AbstractBuffers: int _headerBufferSize> = i0;

        return;
    }

    public int getRequestBufferSize()
    {
        int $i0;
        org.mortbay.jetty.AbstractBuffers r0;

        r0 := @this: org.mortbay.jetty.AbstractBuffers;

        $i0 = r0.<org.mortbay.jetty.AbstractBuffers: int _requestBufferSize>;

        return $i0;
    }

    public void setRequestBufferSize(int)
    {
        java.lang.IllegalStateException $r1;
        org.mortbay.jetty.AbstractBuffers r0;
        int i0;
        boolean $z0;

        r0 := @this: org.mortbay.jetty.AbstractBuffers;

        i0 := @parameter0: int;

        $z0 = virtualinvoke r0.<org.mortbay.jetty.AbstractBuffers: boolean isStarted()>();

        if $z0 == 0 goto label1;

        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>()>();

        throw $r1;

     label1:
        r0.<org.mortbay.jetty.AbstractBuffers: int _requestBufferSize> = i0;

        return;
    }

    public int getResponseBufferSize()
    {
        int $i0;
        org.mortbay.jetty.AbstractBuffers r0;

        r0 := @this: org.mortbay.jetty.AbstractBuffers;

        $i0 = r0.<org.mortbay.jetty.AbstractBuffers: int _responseBufferSize>;

        return $i0;
    }

    public void setResponseBufferSize(int)
    {
        java.lang.IllegalStateException $r1;
        org.mortbay.jetty.AbstractBuffers r0;
        int i0;
        boolean $z0;

        r0 := @this: org.mortbay.jetty.AbstractBuffers;

        i0 := @parameter0: int;

        $z0 = virtualinvoke r0.<org.mortbay.jetty.AbstractBuffers: boolean isStarted()>();

        if $z0 == 0 goto label1;

        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>()>();

        throw $r1;

     label1:
        r0.<org.mortbay.jetty.AbstractBuffers: int _responseBufferSize> = i0;

        return;
    }

    protected abstract org.mortbay.io.Buffer newBuffer(int);

    public java.lang.String toString()
    {
        org.mortbay.jetty.AbstractBuffers r2;
        java.lang.StringBuffer $r0, $r1, $r3, $r4, $r5, $r6, $r7, $r8;
        int $i0, $i1, $i2;
        java.lang.String $r9;

        r2 := @this: org.mortbay.jetty.AbstractBuffers;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("{{");

        $i0 = r2.<org.mortbay.jetty.AbstractBuffers: int _headerBufferSize>;

        $r3 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(",");

        $i1 = r2.<org.mortbay.jetty.AbstractBuffers: int _requestBufferSize>;

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(",");

        $i2 = r2.<org.mortbay.jetty.AbstractBuffers: int _responseBufferSize>;

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i2);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("}}");

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r9;
    }

    static int[] access$000(org.mortbay.jetty.AbstractBuffers)
    {
        org.mortbay.jetty.AbstractBuffers r0;
        int[] $r1;

        r0 := @parameter0: org.mortbay.jetty.AbstractBuffers;

        $r1 = r0.<org.mortbay.jetty.AbstractBuffers: int[] _pool>;

        return $r1;
    }

    public static void <clinit>()
    {
        <org.mortbay.jetty.AbstractBuffers: int __OTHER> = 3;

        <org.mortbay.jetty.AbstractBuffers: int __RESPONSE> = 2;

        <org.mortbay.jetty.AbstractBuffers: int __REQUEST> = 1;

        <org.mortbay.jetty.AbstractBuffers: int __HEADER> = 0;

        return;
    }
}
