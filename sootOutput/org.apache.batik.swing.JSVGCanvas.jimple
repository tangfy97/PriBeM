public class org.apache.batik.swing.JSVGCanvas extends org.apache.batik.swing.svg.JSVGComponent
{
    public static final java.lang.String SCROLL_RIGHT_ACTION;
    public static final java.lang.String SCROLL_LEFT_ACTION;
    public static final java.lang.String SCROLL_UP_ACTION;
    public static final java.lang.String SCROLL_DOWN_ACTION;
    public static final java.lang.String FAST_SCROLL_RIGHT_ACTION;
    public static final java.lang.String FAST_SCROLL_LEFT_ACTION;
    public static final java.lang.String FAST_SCROLL_UP_ACTION;
    public static final java.lang.String FAST_SCROLL_DOWN_ACTION;
    public static final java.lang.String ZOOM_IN_ACTION;
    public static final java.lang.String ZOOM_OUT_ACTION;
    public static final java.lang.String RESET_TRANSFORM_ACTION;
    private boolean isZoomInteractorEnabled;
    private boolean isImageZoomInteractorEnabled;
    private boolean isPanInteractorEnabled;
    private boolean isRotateInteractorEnabled;
    private boolean isResetTransformInteractorEnabled;
    protected java.beans.PropertyChangeSupport pcs;
    protected java.lang.String uri;
    protected org.apache.batik.swing.JSVGCanvas$LocationListener locationListener;
    protected java.util.Map toolTipMap;
    protected org.w3c.dom.events.EventListener toolTipListener;
    protected org.w3c.dom.events.EventTarget lastTarget;
    protected java.util.Map toolTipDocs;
    protected static final java.lang.Object MAP_TOKEN;
    protected long lastToolTipEventTimeStamp;
    protected org.w3c.dom.events.EventTarget lastToolTipEventTarget;
    protected org.apache.batik.swing.gvt.Interactor zoomInteractor;
    protected org.apache.batik.swing.gvt.Interactor imageZoomInteractor;
    protected org.apache.batik.swing.gvt.Interactor panInteractor;
    protected org.apache.batik.swing.gvt.Interactor rotateInteractor;
    protected org.apache.batik.swing.gvt.Interactor resetTransformInteractor;

    public void <init>()
    {
        org.apache.batik.swing.JSVGCanvas$LocationListener $r1;
        org.apache.batik.swing.JSVGCanvas r0;

        r0 := @this: org.apache.batik.swing.JSVGCanvas;

        specialinvoke r0.<org.apache.batik.swing.JSVGCanvas: void <init>(org.apache.batik.swing.svg.SVGUserAgent,boolean,boolean)>(null, 1, 1);

        $r1 = r0.<org.apache.batik.swing.JSVGCanvas: org.apache.batik.swing.JSVGCanvas$LocationListener locationListener>;

        virtualinvoke r0.<java.awt.Component: void addMouseMotionListener(java.awt.event.MouseMotionListener)>($r1);

        return;
    }

    public void <init>(org.apache.batik.swing.svg.SVGUserAgent, boolean, boolean)
    {
        org.apache.batik.swing.JSVGCanvas$2 $r5;
        org.apache.batik.swing.JSVGCanvas$1 $r19;
        org.apache.batik.swing.JSVGCanvas$4 $r7;
        org.apache.batik.swing.JSVGCanvas$3 $r6;
        org.apache.batik.swing.JSVGCanvas$ToolTipModifier $r4;
        org.apache.batik.swing.JSVGCanvas r0;
        org.apache.batik.swing.gvt.Interactor $r13, $r14, $r15, $r16, $r17;
        org.apache.batik.swing.svg.SVGUserAgent r1;
        boolean z0, z1;
        java.awt.Dimension $r10, $r11;
        java.util.List $r12;
        org.apache.batik.swing.JSVGCanvas$LocationListener $r3, $r18;
        java.beans.PropertyChangeSupport $r2;
        org.apache.batik.swing.JSVGCanvas$6 $r9;
        org.apache.batik.swing.JSVGCanvas$5 $r8;

        r0 := @this: org.apache.batik.swing.JSVGCanvas;

        r1 := @parameter0: org.apache.batik.swing.svg.SVGUserAgent;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        specialinvoke r0.<org.apache.batik.swing.svg.JSVGComponent: void <init>(org.apache.batik.swing.svg.SVGUserAgent,boolean,boolean)>(r1, z0, z1);

        r0.<org.apache.batik.swing.JSVGCanvas: boolean isZoomInteractorEnabled> = 1;

        r0.<org.apache.batik.swing.JSVGCanvas: boolean isImageZoomInteractorEnabled> = 1;

        r0.<org.apache.batik.swing.JSVGCanvas: boolean isPanInteractorEnabled> = 1;

        r0.<org.apache.batik.swing.JSVGCanvas: boolean isRotateInteractorEnabled> = 1;

        r0.<org.apache.batik.swing.JSVGCanvas: boolean isResetTransformInteractorEnabled> = 1;

        $r2 = new java.beans.PropertyChangeSupport;

        specialinvoke $r2.<java.beans.PropertyChangeSupport: void <init>(java.lang.Object)>(r0);

        r0.<org.apache.batik.swing.JSVGCanvas: java.beans.PropertyChangeSupport pcs> = $r2;

        $r3 = new org.apache.batik.swing.JSVGCanvas$LocationListener;

        specialinvoke $r3.<org.apache.batik.swing.JSVGCanvas$LocationListener: void <init>(org.apache.batik.swing.JSVGCanvas)>(r0);

        r0.<org.apache.batik.swing.JSVGCanvas: org.apache.batik.swing.JSVGCanvas$LocationListener locationListener> = $r3;

        r0.<org.apache.batik.swing.JSVGCanvas: java.util.Map toolTipMap> = null;

        $r4 = new org.apache.batik.swing.JSVGCanvas$ToolTipModifier;

        specialinvoke $r4.<org.apache.batik.swing.JSVGCanvas$ToolTipModifier: void <init>(org.apache.batik.swing.JSVGCanvas)>(r0);

        r0.<org.apache.batik.swing.JSVGCanvas: org.w3c.dom.events.EventListener toolTipListener> = $r4;

        r0.<org.apache.batik.swing.JSVGCanvas: org.w3c.dom.events.EventTarget lastTarget> = null;

        r0.<org.apache.batik.swing.JSVGCanvas: java.util.Map toolTipDocs> = null;

        $r5 = new org.apache.batik.swing.JSVGCanvas$2;

        specialinvoke $r5.<org.apache.batik.swing.JSVGCanvas$2: void <init>(org.apache.batik.swing.JSVGCanvas)>(r0);

        r0.<org.apache.batik.swing.JSVGCanvas: org.apache.batik.swing.gvt.Interactor zoomInteractor> = $r5;

        $r6 = new org.apache.batik.swing.JSVGCanvas$3;

        specialinvoke $r6.<org.apache.batik.swing.JSVGCanvas$3: void <init>(org.apache.batik.swing.JSVGCanvas)>(r0);

        r0.<org.apache.batik.swing.JSVGCanvas: org.apache.batik.swing.gvt.Interactor imageZoomInteractor> = $r6;

        $r7 = new org.apache.batik.swing.JSVGCanvas$4;

        specialinvoke $r7.<org.apache.batik.swing.JSVGCanvas$4: void <init>(org.apache.batik.swing.JSVGCanvas)>(r0);

        r0.<org.apache.batik.swing.JSVGCanvas: org.apache.batik.swing.gvt.Interactor panInteractor> = $r7;

        $r8 = new org.apache.batik.swing.JSVGCanvas$5;

        specialinvoke $r8.<org.apache.batik.swing.JSVGCanvas$5: void <init>(org.apache.batik.swing.JSVGCanvas)>(r0);

        r0.<org.apache.batik.swing.JSVGCanvas: org.apache.batik.swing.gvt.Interactor rotateInteractor> = $r8;

        $r9 = new org.apache.batik.swing.JSVGCanvas$6;

        specialinvoke $r9.<org.apache.batik.swing.JSVGCanvas$6: void <init>(org.apache.batik.swing.JSVGCanvas)>(r0);

        r0.<org.apache.batik.swing.JSVGCanvas: org.apache.batik.swing.gvt.Interactor resetTransformInteractor> = $r9;

        $r10 = new java.awt.Dimension;

        specialinvoke $r10.<java.awt.Dimension: void <init>(int,int)>(200, 200);

        virtualinvoke r0.<javax.swing.JComponent: void setPreferredSize(java.awt.Dimension)>($r10);

        $r11 = new java.awt.Dimension;

        specialinvoke $r11.<java.awt.Dimension: void <init>(int,int)>(100, 100);

        virtualinvoke r0.<javax.swing.JComponent: void setMinimumSize(java.awt.Dimension)>($r11);

        $r12 = virtualinvoke r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: java.util.List getInteractors()>();

        $r13 = r0.<org.apache.batik.swing.JSVGCanvas: org.apache.batik.swing.gvt.Interactor zoomInteractor>;

        interfaceinvoke $r12.<java.util.List: boolean add(java.lang.Object)>($r13);

        $r14 = r0.<org.apache.batik.swing.JSVGCanvas: org.apache.batik.swing.gvt.Interactor imageZoomInteractor>;

        interfaceinvoke $r12.<java.util.List: boolean add(java.lang.Object)>($r14);

        $r15 = r0.<org.apache.batik.swing.JSVGCanvas: org.apache.batik.swing.gvt.Interactor panInteractor>;

        interfaceinvoke $r12.<java.util.List: boolean add(java.lang.Object)>($r15);

        $r16 = r0.<org.apache.batik.swing.JSVGCanvas: org.apache.batik.swing.gvt.Interactor rotateInteractor>;

        interfaceinvoke $r12.<java.util.List: boolean add(java.lang.Object)>($r16);

        $r17 = r0.<org.apache.batik.swing.JSVGCanvas: org.apache.batik.swing.gvt.Interactor resetTransformInteractor>;

        interfaceinvoke $r12.<java.util.List: boolean add(java.lang.Object)>($r17);

        virtualinvoke r0.<org.apache.batik.swing.JSVGCanvas: void installActions()>();

        if z0 == 0 goto label1;

        $r19 = new org.apache.batik.swing.JSVGCanvas$1;

        specialinvoke $r19.<org.apache.batik.swing.JSVGCanvas$1: void <init>(org.apache.batik.swing.JSVGCanvas)>(r0);

        virtualinvoke r0.<java.awt.Component: void addMouseListener(java.awt.event.MouseListener)>($r19);

        virtualinvoke r0.<org.apache.batik.swing.JSVGCanvas: void installKeyboardActions()>();

     label1:
        $r18 = r0.<org.apache.batik.swing.JSVGCanvas: org.apache.batik.swing.JSVGCanvas$LocationListener locationListener>;

        virtualinvoke r0.<java.awt.Component: void addMouseMotionListener(java.awt.event.MouseMotionListener)>($r18);

        return;
    }

    protected void installActions()
    {
        org.apache.batik.swing.JSVGCanvas$ZoomInAction $r10;
        org.apache.batik.swing.JSVGCanvas$ScrollDownAction $r5, $r9;
        org.apache.batik.swing.JSVGCanvas$ZoomOutAction $r11;
        org.apache.batik.swing.JSVGCanvas r0;
        org.apache.batik.swing.JSVGCanvas$ScrollRightAction $r2, $r6;
        org.apache.batik.swing.JSVGCanvas$ScrollUpAction $r4, $r8;
        javax.swing.ActionMap $r1;
        org.apache.batik.swing.JSVGCanvas$ScrollLeftAction $r3, $r7;
        org.apache.batik.swing.JSVGCanvas$ResetTransformAction $r12;

        r0 := @this: org.apache.batik.swing.JSVGCanvas;

        $r1 = virtualinvoke r0.<javax.swing.JComponent: javax.swing.ActionMap getActionMap()>();

        $r2 = new org.apache.batik.swing.JSVGCanvas$ScrollRightAction;

        specialinvoke $r2.<org.apache.batik.swing.JSVGCanvas$ScrollRightAction: void <init>(org.apache.batik.swing.JSVGCanvas,int)>(r0, 10);

        virtualinvoke $r1.<javax.swing.ActionMap: void put(java.lang.Object,javax.swing.Action)>("ScrollRight", $r2);

        $r3 = new org.apache.batik.swing.JSVGCanvas$ScrollLeftAction;

        specialinvoke $r3.<org.apache.batik.swing.JSVGCanvas$ScrollLeftAction: void <init>(org.apache.batik.swing.JSVGCanvas,int)>(r0, 10);

        virtualinvoke $r1.<javax.swing.ActionMap: void put(java.lang.Object,javax.swing.Action)>("ScrollLeft", $r3);

        $r4 = new org.apache.batik.swing.JSVGCanvas$ScrollUpAction;

        specialinvoke $r4.<org.apache.batik.swing.JSVGCanvas$ScrollUpAction: void <init>(org.apache.batik.swing.JSVGCanvas,int)>(r0, 10);

        virtualinvoke $r1.<javax.swing.ActionMap: void put(java.lang.Object,javax.swing.Action)>("ScrollUp", $r4);

        $r5 = new org.apache.batik.swing.JSVGCanvas$ScrollDownAction;

        specialinvoke $r5.<org.apache.batik.swing.JSVGCanvas$ScrollDownAction: void <init>(org.apache.batik.swing.JSVGCanvas,int)>(r0, 10);

        virtualinvoke $r1.<javax.swing.ActionMap: void put(java.lang.Object,javax.swing.Action)>("ScrollDown", $r5);

        $r6 = new org.apache.batik.swing.JSVGCanvas$ScrollRightAction;

        specialinvoke $r6.<org.apache.batik.swing.JSVGCanvas$ScrollRightAction: void <init>(org.apache.batik.swing.JSVGCanvas,int)>(r0, 30);

        virtualinvoke $r1.<javax.swing.ActionMap: void put(java.lang.Object,javax.swing.Action)>("FastScrollRight", $r6);

        $r7 = new org.apache.batik.swing.JSVGCanvas$ScrollLeftAction;

        specialinvoke $r7.<org.apache.batik.swing.JSVGCanvas$ScrollLeftAction: void <init>(org.apache.batik.swing.JSVGCanvas,int)>(r0, 30);

        virtualinvoke $r1.<javax.swing.ActionMap: void put(java.lang.Object,javax.swing.Action)>("FastScrollLeft", $r7);

        $r8 = new org.apache.batik.swing.JSVGCanvas$ScrollUpAction;

        specialinvoke $r8.<org.apache.batik.swing.JSVGCanvas$ScrollUpAction: void <init>(org.apache.batik.swing.JSVGCanvas,int)>(r0, 30);

        virtualinvoke $r1.<javax.swing.ActionMap: void put(java.lang.Object,javax.swing.Action)>("FastScrollUp", $r8);

        $r9 = new org.apache.batik.swing.JSVGCanvas$ScrollDownAction;

        specialinvoke $r9.<org.apache.batik.swing.JSVGCanvas$ScrollDownAction: void <init>(org.apache.batik.swing.JSVGCanvas,int)>(r0, 30);

        virtualinvoke $r1.<javax.swing.ActionMap: void put(java.lang.Object,javax.swing.Action)>("FastScrollDown", $r9);

        $r10 = new org.apache.batik.swing.JSVGCanvas$ZoomInAction;

        specialinvoke $r10.<org.apache.batik.swing.JSVGCanvas$ZoomInAction: void <init>(org.apache.batik.swing.JSVGCanvas)>(r0);

        virtualinvoke $r1.<javax.swing.ActionMap: void put(java.lang.Object,javax.swing.Action)>("ZoomIn", $r10);

        $r11 = new org.apache.batik.swing.JSVGCanvas$ZoomOutAction;

        specialinvoke $r11.<org.apache.batik.swing.JSVGCanvas$ZoomOutAction: void <init>(org.apache.batik.swing.JSVGCanvas)>(r0);

        virtualinvoke $r1.<javax.swing.ActionMap: void put(java.lang.Object,javax.swing.Action)>("ZoomOut", $r11);

        $r12 = new org.apache.batik.swing.JSVGCanvas$ResetTransformAction;

        specialinvoke $r12.<org.apache.batik.swing.JSVGCanvas$ResetTransformAction: void <init>(org.apache.batik.swing.JSVGCanvas)>(r0);

        virtualinvoke $r1.<javax.swing.ActionMap: void put(java.lang.Object,javax.swing.Action)>("ResetTransform", $r12);

        return;
    }

    public void setDisableInteractions(boolean)
    {
        javax.swing.Action $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12;
        org.apache.batik.swing.JSVGCanvas r0;
        javax.swing.ActionMap $r1;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11;

        r0 := @this: org.apache.batik.swing.JSVGCanvas;

        z0 := @parameter0: boolean;

        specialinvoke r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: void setDisableInteractions(boolean)>(z0);

        $r1 = virtualinvoke r0.<javax.swing.JComponent: javax.swing.ActionMap getActionMap()>();

        $r2 = virtualinvoke $r1.<javax.swing.ActionMap: javax.swing.Action get(java.lang.Object)>("ScrollRight");

        if z0 != 0 goto label01;

        $z1 = 1;

        goto label02;

     label01:
        $z1 = 0;

     label02:
        interfaceinvoke $r2.<javax.swing.Action: void setEnabled(boolean)>($z1);

        $r3 = virtualinvoke $r1.<javax.swing.ActionMap: javax.swing.Action get(java.lang.Object)>("ScrollLeft");

        if z0 != 0 goto label03;

        $z2 = 1;

        goto label04;

     label03:
        $z2 = 0;

     label04:
        interfaceinvoke $r3.<javax.swing.Action: void setEnabled(boolean)>($z2);

        $r4 = virtualinvoke $r1.<javax.swing.ActionMap: javax.swing.Action get(java.lang.Object)>("ScrollUp");

        if z0 != 0 goto label05;

        $z3 = 1;

        goto label06;

     label05:
        $z3 = 0;

     label06:
        interfaceinvoke $r4.<javax.swing.Action: void setEnabled(boolean)>($z3);

        $r5 = virtualinvoke $r1.<javax.swing.ActionMap: javax.swing.Action get(java.lang.Object)>("ScrollDown");

        if z0 != 0 goto label07;

        $z4 = 1;

        goto label08;

     label07:
        $z4 = 0;

     label08:
        interfaceinvoke $r5.<javax.swing.Action: void setEnabled(boolean)>($z4);

        $r6 = virtualinvoke $r1.<javax.swing.ActionMap: javax.swing.Action get(java.lang.Object)>("FastScrollRight");

        if z0 != 0 goto label09;

        $z5 = 1;

        goto label10;

     label09:
        $z5 = 0;

     label10:
        interfaceinvoke $r6.<javax.swing.Action: void setEnabled(boolean)>($z5);

        $r7 = virtualinvoke $r1.<javax.swing.ActionMap: javax.swing.Action get(java.lang.Object)>("FastScrollLeft");

        if z0 != 0 goto label11;

        $z6 = 1;

        goto label12;

     label11:
        $z6 = 0;

     label12:
        interfaceinvoke $r7.<javax.swing.Action: void setEnabled(boolean)>($z6);

        $r8 = virtualinvoke $r1.<javax.swing.ActionMap: javax.swing.Action get(java.lang.Object)>("FastScrollUp");

        if z0 != 0 goto label13;

        $z7 = 1;

        goto label14;

     label13:
        $z7 = 0;

     label14:
        interfaceinvoke $r8.<javax.swing.Action: void setEnabled(boolean)>($z7);

        $r9 = virtualinvoke $r1.<javax.swing.ActionMap: javax.swing.Action get(java.lang.Object)>("FastScrollDown");

        if z0 != 0 goto label15;

        $z8 = 1;

        goto label16;

     label15:
        $z8 = 0;

     label16:
        interfaceinvoke $r9.<javax.swing.Action: void setEnabled(boolean)>($z8);

        $r10 = virtualinvoke $r1.<javax.swing.ActionMap: javax.swing.Action get(java.lang.Object)>("ZoomIn");

        if z0 != 0 goto label17;

        $z9 = 1;

        goto label18;

     label17:
        $z9 = 0;

     label18:
        interfaceinvoke $r10.<javax.swing.Action: void setEnabled(boolean)>($z9);

        $r11 = virtualinvoke $r1.<javax.swing.ActionMap: javax.swing.Action get(java.lang.Object)>("ZoomOut");

        if z0 != 0 goto label19;

        $z10 = 1;

        goto label20;

     label19:
        $z10 = 0;

     label20:
        interfaceinvoke $r11.<javax.swing.Action: void setEnabled(boolean)>($z10);

        $r12 = virtualinvoke $r1.<javax.swing.ActionMap: javax.swing.Action get(java.lang.Object)>("ResetTransform");

        if z0 != 0 goto label21;

        $z11 = 1;

        goto label22;

     label21:
        $z11 = 0;

     label22:
        interfaceinvoke $r12.<javax.swing.Action: void setEnabled(boolean)>($z11);

        return;
    }

    protected void installKeyboardActions()
    {
        javax.swing.KeyStroke $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12;
        org.apache.batik.swing.JSVGCanvas r0;
        javax.swing.InputMap $r1;

        r0 := @this: org.apache.batik.swing.JSVGCanvas;

        $r1 = virtualinvoke r0.<javax.swing.JComponent: javax.swing.InputMap getInputMap(int)>(0);

        $r2 = staticinvoke <javax.swing.KeyStroke: javax.swing.KeyStroke getKeyStroke(int,int)>(39, 0);

        virtualinvoke $r1.<javax.swing.InputMap: void put(javax.swing.KeyStroke,java.lang.Object)>($r2, "ScrollRight");

        $r3 = staticinvoke <javax.swing.KeyStroke: javax.swing.KeyStroke getKeyStroke(int,int)>(37, 0);

        virtualinvoke $r1.<javax.swing.InputMap: void put(javax.swing.KeyStroke,java.lang.Object)>($r3, "ScrollLeft");

        $r4 = staticinvoke <javax.swing.KeyStroke: javax.swing.KeyStroke getKeyStroke(int,int)>(38, 0);

        virtualinvoke $r1.<javax.swing.InputMap: void put(javax.swing.KeyStroke,java.lang.Object)>($r4, "ScrollUp");

        $r5 = staticinvoke <javax.swing.KeyStroke: javax.swing.KeyStroke getKeyStroke(int,int)>(40, 0);

        virtualinvoke $r1.<javax.swing.InputMap: void put(javax.swing.KeyStroke,java.lang.Object)>($r5, "ScrollDown");

        $r6 = staticinvoke <javax.swing.KeyStroke: javax.swing.KeyStroke getKeyStroke(int,int)>(39, 1);

        virtualinvoke $r1.<javax.swing.InputMap: void put(javax.swing.KeyStroke,java.lang.Object)>($r6, "FastScrollRight");

        $r7 = staticinvoke <javax.swing.KeyStroke: javax.swing.KeyStroke getKeyStroke(int,int)>(37, 1);

        virtualinvoke $r1.<javax.swing.InputMap: void put(javax.swing.KeyStroke,java.lang.Object)>($r7, "FastScrollLeft");

        $r8 = staticinvoke <javax.swing.KeyStroke: javax.swing.KeyStroke getKeyStroke(int,int)>(38, 1);

        virtualinvoke $r1.<javax.swing.InputMap: void put(javax.swing.KeyStroke,java.lang.Object)>($r8, "FastScrollUp");

        $r9 = staticinvoke <javax.swing.KeyStroke: javax.swing.KeyStroke getKeyStroke(int,int)>(40, 1);

        virtualinvoke $r1.<javax.swing.InputMap: void put(javax.swing.KeyStroke,java.lang.Object)>($r9, "FastScrollDown");

        $r10 = staticinvoke <javax.swing.KeyStroke: javax.swing.KeyStroke getKeyStroke(int,int)>(73, 2);

        virtualinvoke $r1.<javax.swing.InputMap: void put(javax.swing.KeyStroke,java.lang.Object)>($r10, "ZoomIn");

        $r11 = staticinvoke <javax.swing.KeyStroke: javax.swing.KeyStroke getKeyStroke(int,int)>(79, 2);

        virtualinvoke $r1.<javax.swing.InputMap: void put(javax.swing.KeyStroke,java.lang.Object)>($r11, "ZoomOut");

        $r12 = staticinvoke <javax.swing.KeyStroke: javax.swing.KeyStroke getKeyStroke(int,int)>(84, 2);

        virtualinvoke $r1.<javax.swing.InputMap: void put(javax.swing.KeyStroke,java.lang.Object)>($r12, "ResetTransform");

        return;
    }

    public void addPropertyChangeListener(java.beans.PropertyChangeListener)
    {
        java.beans.PropertyChangeSupport $r2;
        java.beans.PropertyChangeListener r1;
        org.apache.batik.swing.JSVGCanvas r0;

        r0 := @this: org.apache.batik.swing.JSVGCanvas;

        r1 := @parameter0: java.beans.PropertyChangeListener;

        $r2 = r0.<org.apache.batik.swing.JSVGCanvas: java.beans.PropertyChangeSupport pcs>;

        virtualinvoke $r2.<java.beans.PropertyChangeSupport: void addPropertyChangeListener(java.beans.PropertyChangeListener)>(r1);

        return;
    }

    public void removePropertyChangeListener(java.beans.PropertyChangeListener)
    {
        java.beans.PropertyChangeSupport $r2;
        java.beans.PropertyChangeListener r1;
        org.apache.batik.swing.JSVGCanvas r0;

        r0 := @this: org.apache.batik.swing.JSVGCanvas;

        r1 := @parameter0: java.beans.PropertyChangeListener;

        $r2 = r0.<org.apache.batik.swing.JSVGCanvas: java.beans.PropertyChangeSupport pcs>;

        virtualinvoke $r2.<java.beans.PropertyChangeSupport: void removePropertyChangeListener(java.beans.PropertyChangeListener)>(r1);

        return;
    }

    public void addPropertyChangeListener(java.lang.String, java.beans.PropertyChangeListener)
    {
        java.beans.PropertyChangeListener r2;
        org.apache.batik.swing.JSVGCanvas r0;
        java.beans.PropertyChangeSupport $r3;
        java.lang.String r1;

        r0 := @this: org.apache.batik.swing.JSVGCanvas;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.beans.PropertyChangeListener;

        $r3 = r0.<org.apache.batik.swing.JSVGCanvas: java.beans.PropertyChangeSupport pcs>;

        virtualinvoke $r3.<java.beans.PropertyChangeSupport: void addPropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)>(r1, r2);

        return;
    }

    public void removePropertyChangeListener(java.lang.String, java.beans.PropertyChangeListener)
    {
        java.beans.PropertyChangeListener r2;
        org.apache.batik.swing.JSVGCanvas r0;
        java.beans.PropertyChangeSupport $r3;
        java.lang.String r1;

        r0 := @this: org.apache.batik.swing.JSVGCanvas;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.beans.PropertyChangeListener;

        $r3 = r0.<org.apache.batik.swing.JSVGCanvas: java.beans.PropertyChangeSupport pcs>;

        virtualinvoke $r3.<java.beans.PropertyChangeSupport: void removePropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)>(r1, r2);

        return;
    }

    public void setEnableZoomInteractor(boolean)
    {
        java.util.List $r1, $r4;
        org.apache.batik.swing.JSVGCanvas r0;
        org.apache.batik.swing.gvt.Interactor $r2, $r5;
        java.beans.PropertyChangeSupport $r3;
        boolean z0, $z1, z2, $z3;

        r0 := @this: org.apache.batik.swing.JSVGCanvas;

        z0 := @parameter0: boolean;

        $z1 = r0.<org.apache.batik.swing.JSVGCanvas: boolean isZoomInteractorEnabled>;

        if $z1 == z0 goto label3;

        z2 = r0.<org.apache.batik.swing.JSVGCanvas: boolean isZoomInteractorEnabled>;

        r0.<org.apache.batik.swing.JSVGCanvas: boolean isZoomInteractorEnabled> = z0;

        $z3 = r0.<org.apache.batik.swing.JSVGCanvas: boolean isZoomInteractorEnabled>;

        if $z3 == 0 goto label1;

        $r4 = virtualinvoke r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: java.util.List getInteractors()>();

        $r5 = r0.<org.apache.batik.swing.JSVGCanvas: org.apache.batik.swing.gvt.Interactor zoomInteractor>;

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r5);

        goto label2;

     label1:
        $r1 = virtualinvoke r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: java.util.List getInteractors()>();

        $r2 = r0.<org.apache.batik.swing.JSVGCanvas: org.apache.batik.swing.gvt.Interactor zoomInteractor>;

        interfaceinvoke $r1.<java.util.List: boolean remove(java.lang.Object)>($r2);

     label2:
        $r3 = r0.<org.apache.batik.swing.JSVGCanvas: java.beans.PropertyChangeSupport pcs>;

        virtualinvoke $r3.<java.beans.PropertyChangeSupport: void firePropertyChange(java.lang.String,boolean,boolean)>("enableZoomInteractor", z2, z0);

     label3:
        return;
    }

    public boolean getEnableZoomInteractor()
    {
        org.apache.batik.swing.JSVGCanvas r0;
        boolean $z0;

        r0 := @this: org.apache.batik.swing.JSVGCanvas;

        $z0 = r0.<org.apache.batik.swing.JSVGCanvas: boolean isZoomInteractorEnabled>;

        return $z0;
    }

    public void setEnableImageZoomInteractor(boolean)
    {
        java.util.List $r1, $r4;
        org.apache.batik.swing.JSVGCanvas r0;
        org.apache.batik.swing.gvt.Interactor $r2, $r5;
        java.beans.PropertyChangeSupport $r3;
        boolean z0, $z1, z2, $z3;

        r0 := @this: org.apache.batik.swing.JSVGCanvas;

        z0 := @parameter0: boolean;

        $z1 = r0.<org.apache.batik.swing.JSVGCanvas: boolean isImageZoomInteractorEnabled>;

        if $z1 == z0 goto label3;

        z2 = r0.<org.apache.batik.swing.JSVGCanvas: boolean isImageZoomInteractorEnabled>;

        r0.<org.apache.batik.swing.JSVGCanvas: boolean isImageZoomInteractorEnabled> = z0;

        $z3 = r0.<org.apache.batik.swing.JSVGCanvas: boolean isImageZoomInteractorEnabled>;

        if $z3 == 0 goto label1;

        $r4 = virtualinvoke r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: java.util.List getInteractors()>();

        $r5 = r0.<org.apache.batik.swing.JSVGCanvas: org.apache.batik.swing.gvt.Interactor imageZoomInteractor>;

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r5);

        goto label2;

     label1:
        $r1 = virtualinvoke r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: java.util.List getInteractors()>();

        $r2 = r0.<org.apache.batik.swing.JSVGCanvas: org.apache.batik.swing.gvt.Interactor imageZoomInteractor>;

        interfaceinvoke $r1.<java.util.List: boolean remove(java.lang.Object)>($r2);

     label2:
        $r3 = r0.<org.apache.batik.swing.JSVGCanvas: java.beans.PropertyChangeSupport pcs>;

        virtualinvoke $r3.<java.beans.PropertyChangeSupport: void firePropertyChange(java.lang.String,boolean,boolean)>("enableImageZoomInteractor", z2, z0);

     label3:
        return;
    }

    public boolean getEnableImageZoomInteractor()
    {
        org.apache.batik.swing.JSVGCanvas r0;
        boolean $z0;

        r0 := @this: org.apache.batik.swing.JSVGCanvas;

        $z0 = r0.<org.apache.batik.swing.JSVGCanvas: boolean isImageZoomInteractorEnabled>;

        return $z0;
    }

    public void setEnablePanInteractor(boolean)
    {
        java.util.List $r1, $r4;
        org.apache.batik.swing.JSVGCanvas r0;
        org.apache.batik.swing.gvt.Interactor $r2, $r5;
        java.beans.PropertyChangeSupport $r3;
        boolean z0, $z1, z2, $z3;

        r0 := @this: org.apache.batik.swing.JSVGCanvas;

        z0 := @parameter0: boolean;

        $z1 = r0.<org.apache.batik.swing.JSVGCanvas: boolean isPanInteractorEnabled>;

        if $z1 == z0 goto label3;

        z2 = r0.<org.apache.batik.swing.JSVGCanvas: boolean isPanInteractorEnabled>;

        r0.<org.apache.batik.swing.JSVGCanvas: boolean isPanInteractorEnabled> = z0;

        $z3 = r0.<org.apache.batik.swing.JSVGCanvas: boolean isPanInteractorEnabled>;

        if $z3 == 0 goto label1;

        $r4 = virtualinvoke r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: java.util.List getInteractors()>();

        $r5 = r0.<org.apache.batik.swing.JSVGCanvas: org.apache.batik.swing.gvt.Interactor panInteractor>;

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r5);

        goto label2;

     label1:
        $r1 = virtualinvoke r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: java.util.List getInteractors()>();

        $r2 = r0.<org.apache.batik.swing.JSVGCanvas: org.apache.batik.swing.gvt.Interactor panInteractor>;

        interfaceinvoke $r1.<java.util.List: boolean remove(java.lang.Object)>($r2);

     label2:
        $r3 = r0.<org.apache.batik.swing.JSVGCanvas: java.beans.PropertyChangeSupport pcs>;

        virtualinvoke $r3.<java.beans.PropertyChangeSupport: void firePropertyChange(java.lang.String,boolean,boolean)>("enablePanInteractor", z2, z0);

     label3:
        return;
    }

    public boolean getEnablePanInteractor()
    {
        org.apache.batik.swing.JSVGCanvas r0;
        boolean $z0;

        r0 := @this: org.apache.batik.swing.JSVGCanvas;

        $z0 = r0.<org.apache.batik.swing.JSVGCanvas: boolean isPanInteractorEnabled>;

        return $z0;
    }

    public void setEnableRotateInteractor(boolean)
    {
        java.util.List $r1, $r4;
        org.apache.batik.swing.JSVGCanvas r0;
        org.apache.batik.swing.gvt.Interactor $r2, $r5;
        java.beans.PropertyChangeSupport $r3;
        boolean z0, $z1, z2, $z3;

        r0 := @this: org.apache.batik.swing.JSVGCanvas;

        z0 := @parameter0: boolean;

        $z1 = r0.<org.apache.batik.swing.JSVGCanvas: boolean isRotateInteractorEnabled>;

        if $z1 == z0 goto label3;

        z2 = r0.<org.apache.batik.swing.JSVGCanvas: boolean isRotateInteractorEnabled>;

        r0.<org.apache.batik.swing.JSVGCanvas: boolean isRotateInteractorEnabled> = z0;

        $z3 = r0.<org.apache.batik.swing.JSVGCanvas: boolean isRotateInteractorEnabled>;

        if $z3 == 0 goto label1;

        $r4 = virtualinvoke r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: java.util.List getInteractors()>();

        $r5 = r0.<org.apache.batik.swing.JSVGCanvas: org.apache.batik.swing.gvt.Interactor rotateInteractor>;

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r5);

        goto label2;

     label1:
        $r1 = virtualinvoke r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: java.util.List getInteractors()>();

        $r2 = r0.<org.apache.batik.swing.JSVGCanvas: org.apache.batik.swing.gvt.Interactor rotateInteractor>;

        interfaceinvoke $r1.<java.util.List: boolean remove(java.lang.Object)>($r2);

     label2:
        $r3 = r0.<org.apache.batik.swing.JSVGCanvas: java.beans.PropertyChangeSupport pcs>;

        virtualinvoke $r3.<java.beans.PropertyChangeSupport: void firePropertyChange(java.lang.String,boolean,boolean)>("enableRotateInteractor", z2, z0);

     label3:
        return;
    }

    public boolean getEnableRotateInteractor()
    {
        org.apache.batik.swing.JSVGCanvas r0;
        boolean $z0;

        r0 := @this: org.apache.batik.swing.JSVGCanvas;

        $z0 = r0.<org.apache.batik.swing.JSVGCanvas: boolean isRotateInteractorEnabled>;

        return $z0;
    }

    public void setEnableResetTransformInteractor(boolean)
    {
        java.util.List $r1, $r4;
        org.apache.batik.swing.JSVGCanvas r0;
        org.apache.batik.swing.gvt.Interactor $r2, $r5;
        java.beans.PropertyChangeSupport $r3;
        boolean z0, $z1, z2, $z3;

        r0 := @this: org.apache.batik.swing.JSVGCanvas;

        z0 := @parameter0: boolean;

        $z1 = r0.<org.apache.batik.swing.JSVGCanvas: boolean isResetTransformInteractorEnabled>;

        if $z1 == z0 goto label3;

        z2 = r0.<org.apache.batik.swing.JSVGCanvas: boolean isResetTransformInteractorEnabled>;

        r0.<org.apache.batik.swing.JSVGCanvas: boolean isResetTransformInteractorEnabled> = z0;

        $z3 = r0.<org.apache.batik.swing.JSVGCanvas: boolean isResetTransformInteractorEnabled>;

        if $z3 == 0 goto label1;

        $r4 = virtualinvoke r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: java.util.List getInteractors()>();

        $r5 = r0.<org.apache.batik.swing.JSVGCanvas: org.apache.batik.swing.gvt.Interactor resetTransformInteractor>;

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r5);

        goto label2;

     label1:
        $r1 = virtualinvoke r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: java.util.List getInteractors()>();

        $r2 = r0.<org.apache.batik.swing.JSVGCanvas: org.apache.batik.swing.gvt.Interactor resetTransformInteractor>;

        interfaceinvoke $r1.<java.util.List: boolean remove(java.lang.Object)>($r2);

     label2:
        $r3 = r0.<org.apache.batik.swing.JSVGCanvas: java.beans.PropertyChangeSupport pcs>;

        virtualinvoke $r3.<java.beans.PropertyChangeSupport: void firePropertyChange(java.lang.String,boolean,boolean)>("enableResetTransformInteractor", z2, z0);

     label3:
        return;
    }

    public boolean getEnableResetTransformInteractor()
    {
        org.apache.batik.swing.JSVGCanvas r0;
        boolean $z0;

        r0 := @this: org.apache.batik.swing.JSVGCanvas;

        $z0 = r0.<org.apache.batik.swing.JSVGCanvas: boolean isResetTransformInteractorEnabled>;

        return $z0;
    }

    public java.lang.String getURI()
    {
        java.lang.String $r1;
        org.apache.batik.swing.JSVGCanvas r0;

        r0 := @this: org.apache.batik.swing.JSVGCanvas;

        $r1 = r0.<org.apache.batik.swing.JSVGCanvas: java.lang.String uri>;

        return $r1;
    }

    public void setURI(java.lang.String)
    {
        org.apache.batik.swing.JSVGCanvas r0;
        java.beans.PropertyChangeSupport $r5;
        java.lang.String r1, r2, $r3, $r4, $r6;

        r0 := @this: org.apache.batik.swing.JSVGCanvas;

        r2 := @parameter0: java.lang.String;

        r1 = r0.<org.apache.batik.swing.JSVGCanvas: java.lang.String uri>;

        r0.<org.apache.batik.swing.JSVGCanvas: java.lang.String uri> = r2;

        $r3 = r0.<org.apache.batik.swing.JSVGCanvas: java.lang.String uri>;

        if $r3 == null goto label1;

        $r6 = r0.<org.apache.batik.swing.JSVGCanvas: java.lang.String uri>;

        virtualinvoke r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: void loadSVGDocument(java.lang.String)>($r6);

        goto label2;

     label1:
        virtualinvoke r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: void setSVGDocument(org.w3c.dom.svg.SVGDocument)>(null);

     label2:
        $r5 = r0.<org.apache.batik.swing.JSVGCanvas: java.beans.PropertyChangeSupport pcs>;

        $r4 = r0.<org.apache.batik.swing.JSVGCanvas: java.lang.String uri>;

        virtualinvoke $r5.<java.beans.PropertyChangeSupport: void firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)>("URI", r1, $r4);

        return;
    }

    protected org.apache.batik.bridge.UserAgent createUserAgent()
    {
        org.apache.batik.swing.JSVGCanvas$CanvasUserAgent $r0;
        org.apache.batik.swing.JSVGCanvas r1;

        r1 := @this: org.apache.batik.swing.JSVGCanvas;

        $r0 = new org.apache.batik.swing.JSVGCanvas$CanvasUserAgent;

        specialinvoke $r0.<org.apache.batik.swing.JSVGCanvas$CanvasUserAgent: void <init>(org.apache.batik.swing.JSVGCanvas)>(r1);

        return $r0;
    }

    protected org.apache.batik.swing.gvt.AbstractJGVTComponent$Listener createListener()
    {
        org.apache.batik.swing.JSVGCanvas$CanvasSVGListener $r0;
        org.apache.batik.swing.JSVGCanvas r1;

        r1 := @this: org.apache.batik.swing.JSVGCanvas;

        $r0 = new org.apache.batik.swing.JSVGCanvas$CanvasSVGListener;

        specialinvoke $r0.<org.apache.batik.swing.JSVGCanvas$CanvasSVGListener: void <init>(org.apache.batik.swing.JSVGCanvas)>(r1);

        return $r0;
    }

    protected void installSVGDocument(org.w3c.dom.svg.SVGDocument)
    {
        java.util.Iterator $r7;
        org.w3c.dom.svg.SVGDocument r3, r9;
        java.util.Set $r6;
        org.apache.batik.dom.events.NodeEventTarget r11;
        org.w3c.dom.events.EventListener $r12, $r13;
        org.apache.batik.swing.JSVGCanvas r0;
        java.util.Map $r1, $r2, $r4, $r5;
        java.lang.Object $r8;
        org.w3c.dom.svg.SVGSVGElement $r10;
        boolean $z0;

        r0 := @this: org.apache.batik.swing.JSVGCanvas;

        r3 := @parameter0: org.w3c.dom.svg.SVGDocument;

        $r1 = r0.<org.apache.batik.swing.JSVGCanvas: java.util.Map toolTipDocs>;

        if $r1 == null goto label5;

        $r5 = r0.<org.apache.batik.swing.JSVGCanvas: java.util.Map toolTipDocs>;

        $r6 = interfaceinvoke $r5.<java.util.Map: java.util.Set keySet()>();

        $r7 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();

        goto label4;

     label1:
        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r9 = (org.w3c.dom.svg.SVGDocument) $r8;

        if r9 != null goto label2;

        goto label4;

     label2:
        $r10 = interfaceinvoke r9.<org.w3c.dom.svg.SVGDocument: org.w3c.dom.svg.SVGSVGElement getRootElement()>();

        r11 = (org.apache.batik.dom.events.NodeEventTarget) $r10;

        if r11 != null goto label3;

        goto label4;

     label3:
        $r12 = r0.<org.apache.batik.swing.JSVGCanvas: org.w3c.dom.events.EventListener toolTipListener>;

        interfaceinvoke r11.<org.apache.batik.dom.events.NodeEventTarget: void removeEventListenerNS(java.lang.String,java.lang.String,org.w3c.dom.events.EventListener,boolean)>("http://www.w3.org/2001/xml-events", "mouseover", $r12, 0);

        $r13 = r0.<org.apache.batik.swing.JSVGCanvas: org.w3c.dom.events.EventListener toolTipListener>;

        interfaceinvoke r11.<org.apache.batik.dom.events.NodeEventTarget: void removeEventListenerNS(java.lang.String,java.lang.String,org.w3c.dom.events.EventListener,boolean)>("http://www.w3.org/2001/xml-events", "mouseout", $r13, 0);

     label4:
        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        r0.<org.apache.batik.swing.JSVGCanvas: java.util.Map toolTipDocs> = null;

     label5:
        r0.<org.apache.batik.swing.JSVGCanvas: org.w3c.dom.events.EventTarget lastTarget> = null;

        $r2 = r0.<org.apache.batik.swing.JSVGCanvas: java.util.Map toolTipMap>;

        if $r2 == null goto label6;

        $r4 = r0.<org.apache.batik.swing.JSVGCanvas: java.util.Map toolTipMap>;

        interfaceinvoke $r4.<java.util.Map: void clear()>();

     label6:
        specialinvoke r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: void installSVGDocument(org.w3c.dom.svg.SVGDocument)>(r3);

        return;
    }

    public void setLastToolTipEvent(long, org.w3c.dom.events.EventTarget)
    {
        long l0;
        org.w3c.dom.events.EventTarget r1;
        org.apache.batik.swing.JSVGCanvas r0;

        r0 := @this: org.apache.batik.swing.JSVGCanvas;

        l0 := @parameter0: long;

        r1 := @parameter1: org.w3c.dom.events.EventTarget;

        r0.<org.apache.batik.swing.JSVGCanvas: long lastToolTipEventTimeStamp> = l0;

        r0.<org.apache.batik.swing.JSVGCanvas: org.w3c.dom.events.EventTarget lastToolTipEventTarget> = r1;

        return;
    }

    public boolean matchLastToolTipEvent(long, org.w3c.dom.events.EventTarget)
    {
        byte $b2;
        org.w3c.dom.events.EventTarget r1, $r2;
        org.apache.batik.swing.JSVGCanvas r0;
        long l0, $l1;
        boolean $z0;

        r0 := @this: org.apache.batik.swing.JSVGCanvas;

        l0 := @parameter0: long;

        r1 := @parameter1: org.w3c.dom.events.EventTarget;

        $l1 = r0.<org.apache.batik.swing.JSVGCanvas: long lastToolTipEventTimeStamp>;

        $b2 = $l1 cmp l0;

        if $b2 != 0 goto label1;

        $r2 = r0.<org.apache.batik.swing.JSVGCanvas: org.w3c.dom.events.EventTarget lastToolTipEventTarget>;

        if $r2 != r1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    static java.lang.String access$003(org.apache.batik.swing.JSVGCanvas, java.lang.String)
    {
        java.lang.String r1;
        org.apache.batik.swing.JSVGCanvas r0;

        r0 := @parameter0: org.apache.batik.swing.JSVGCanvas;

        r1 := @parameter1: java.lang.String;

        r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: java.lang.String fragmentIdentifier> = r1;

        return r1;
    }

    static org.apache.batik.gvt.GraphicsNode access$101(org.apache.batik.swing.JSVGCanvas)
    {
        org.apache.batik.swing.JSVGCanvas r0;
        org.apache.batik.gvt.GraphicsNode $r1;

        r0 := @parameter0: org.apache.batik.swing.JSVGCanvas;

        $r1 = r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: org.apache.batik.gvt.GraphicsNode gvtRoot>;

        return $r1;
    }

    static org.apache.batik.swing.svg.SVGUserAgent access$301(org.apache.batik.swing.JSVGCanvas)
    {
        org.apache.batik.swing.svg.SVGUserAgent $r1;
        org.apache.batik.swing.JSVGCanvas r0;

        r0 := @parameter0: org.apache.batik.swing.JSVGCanvas;

        $r1 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: org.apache.batik.swing.svg.SVGUserAgent svgUserAgent>;

        return $r1;
    }

    static org.apache.batik.swing.svg.SVGUserAgent access$401(org.apache.batik.swing.JSVGCanvas)
    {
        org.apache.batik.swing.svg.SVGUserAgent $r1;
        org.apache.batik.swing.JSVGCanvas r0;

        r0 := @parameter0: org.apache.batik.swing.JSVGCanvas;

        $r1 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: org.apache.batik.swing.svg.SVGUserAgent svgUserAgent>;

        return $r1;
    }

    static void <clinit>()
    {
        java.lang.Object $r0;

        <org.apache.batik.swing.JSVGCanvas: java.lang.String RESET_TRANSFORM_ACTION> = "ResetTransform";

        <org.apache.batik.swing.JSVGCanvas: java.lang.String ZOOM_OUT_ACTION> = "ZoomOut";

        <org.apache.batik.swing.JSVGCanvas: java.lang.String ZOOM_IN_ACTION> = "ZoomIn";

        <org.apache.batik.swing.JSVGCanvas: java.lang.String FAST_SCROLL_DOWN_ACTION> = "FastScrollDown";

        <org.apache.batik.swing.JSVGCanvas: java.lang.String FAST_SCROLL_UP_ACTION> = "FastScrollUp";

        <org.apache.batik.swing.JSVGCanvas: java.lang.String FAST_SCROLL_LEFT_ACTION> = "FastScrollLeft";

        <org.apache.batik.swing.JSVGCanvas: java.lang.String FAST_SCROLL_RIGHT_ACTION> = "FastScrollRight";

        <org.apache.batik.swing.JSVGCanvas: java.lang.String SCROLL_DOWN_ACTION> = "ScrollDown";

        <org.apache.batik.swing.JSVGCanvas: java.lang.String SCROLL_UP_ACTION> = "ScrollUp";

        <org.apache.batik.swing.JSVGCanvas: java.lang.String SCROLL_LEFT_ACTION> = "ScrollLeft";

        <org.apache.batik.swing.JSVGCanvas: java.lang.String SCROLL_RIGHT_ACTION> = "ScrollRight";

        $r0 = new java.lang.Object;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        <org.apache.batik.swing.JSVGCanvas: java.lang.Object MAP_TOKEN> = $r0;

        return;
    }
}
