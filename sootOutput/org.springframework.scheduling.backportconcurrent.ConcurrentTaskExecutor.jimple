public class org.springframework.scheduling.backportconcurrent.ConcurrentTaskExecutor extends java.lang.Object implements org.springframework.scheduling.SchedulingTaskExecutor, edu.emory.mathcs.backport.java.util.concurrent.Executor
{
    private edu.emory.mathcs.backport.java.util.concurrent.Executor concurrentExecutor;

    public void <init>()
    {
        org.springframework.scheduling.backportconcurrent.ConcurrentTaskExecutor r0;

        r0 := @this: org.springframework.scheduling.backportconcurrent.ConcurrentTaskExecutor;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        virtualinvoke r0.<org.springframework.scheduling.backportconcurrent.ConcurrentTaskExecutor: void setConcurrentExecutor(edu.emory.mathcs.backport.java.util.concurrent.Executor)>(null);

        return;
    }

    public void <init>(edu.emory.mathcs.backport.java.util.concurrent.Executor)
    {
        edu.emory.mathcs.backport.java.util.concurrent.Executor r1;
        org.springframework.scheduling.backportconcurrent.ConcurrentTaskExecutor r0;

        r0 := @this: org.springframework.scheduling.backportconcurrent.ConcurrentTaskExecutor;

        r1 := @parameter0: edu.emory.mathcs.backport.java.util.concurrent.Executor;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        virtualinvoke r0.<org.springframework.scheduling.backportconcurrent.ConcurrentTaskExecutor: void setConcurrentExecutor(edu.emory.mathcs.backport.java.util.concurrent.Executor)>(r1);

        return;
    }

    public final void setConcurrentExecutor(edu.emory.mathcs.backport.java.util.concurrent.Executor)
    {
        edu.emory.mathcs.backport.java.util.concurrent.Executor r1, $r3;
        java.lang.Object $r2;
        org.springframework.scheduling.backportconcurrent.ConcurrentTaskExecutor r0;

        r0 := @this: org.springframework.scheduling.backportconcurrent.ConcurrentTaskExecutor;

        r1 := @parameter0: edu.emory.mathcs.backport.java.util.concurrent.Executor;

        if r1 == null goto label1;

        $r2 = r1;

        goto label2;

     label1:
        $r2 = staticinvoke <edu.emory.mathcs.backport.java.util.concurrent.Executors: edu.emory.mathcs.backport.java.util.concurrent.ExecutorService newSingleThreadExecutor()>();

     label2:
        $r3 = (edu.emory.mathcs.backport.java.util.concurrent.Executor) $r2;

        r0.<org.springframework.scheduling.backportconcurrent.ConcurrentTaskExecutor: edu.emory.mathcs.backport.java.util.concurrent.Executor concurrentExecutor> = $r3;

        return;
    }

    public final edu.emory.mathcs.backport.java.util.concurrent.Executor getConcurrentExecutor()
    {
        edu.emory.mathcs.backport.java.util.concurrent.Executor $r1;
        org.springframework.scheduling.backportconcurrent.ConcurrentTaskExecutor r0;

        r0 := @this: org.springframework.scheduling.backportconcurrent.ConcurrentTaskExecutor;

        $r1 = r0.<org.springframework.scheduling.backportconcurrent.ConcurrentTaskExecutor: edu.emory.mathcs.backport.java.util.concurrent.Executor concurrentExecutor>;

        return $r1;
    }

    public void execute(java.lang.Runnable)
    {
        java.lang.Throwable $r3;
        org.springframework.core.task.TaskRejectedException $r4;
        org.springframework.scheduling.backportconcurrent.ConcurrentTaskExecutor r0;
        java.lang.Runnable r1;
        edu.emory.mathcs.backport.java.util.concurrent.Executor $r2, $r6;
        java.lang.StringBuilder $r5, $r7, $r8, $r9;
        java.lang.String $r10;

        r0 := @this: org.springframework.scheduling.backportconcurrent.ConcurrentTaskExecutor;

        r1 := @parameter0: java.lang.Runnable;

     label1:
        $r2 = r0.<org.springframework.scheduling.backportconcurrent.ConcurrentTaskExecutor: edu.emory.mathcs.backport.java.util.concurrent.Executor concurrentExecutor>;

        interfaceinvoke $r2.<edu.emory.mathcs.backport.java.util.concurrent.Executor: void execute(java.lang.Runnable)>(r1);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        $r4 = new org.springframework.core.task.TaskRejectedException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>("Executor [");

        $r6 = r0.<org.springframework.scheduling.backportconcurrent.ConcurrentTaskExecutor: edu.emory.mathcs.backport.java.util.concurrent.Executor concurrentExecutor>;

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] did not accept task: ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<org.springframework.core.task.TaskRejectedException: void <init>(java.lang.String,java.lang.Throwable)>($r10, $r3);

        throw $r4;

     label4:
        return;

        catch edu.emory.mathcs.backport.java.util.concurrent.RejectedExecutionException from label1 to label2 with label3;
    }

    public void execute(java.lang.Runnable, long)
    {
        long l0;
        org.springframework.scheduling.backportconcurrent.ConcurrentTaskExecutor r0;
        java.lang.Runnable r1;

        r0 := @this: org.springframework.scheduling.backportconcurrent.ConcurrentTaskExecutor;

        r1 := @parameter0: java.lang.Runnable;

        l0 := @parameter1: long;

        virtualinvoke r0.<org.springframework.scheduling.backportconcurrent.ConcurrentTaskExecutor: void execute(java.lang.Runnable)>(r1);

        return;
    }

    public java.util.concurrent.Future submit(java.lang.Runnable)
    {
        java.util.concurrent.FutureTask $r0;
        java.lang.Runnable r1;
        org.springframework.scheduling.backportconcurrent.ConcurrentTaskExecutor r2;

        r2 := @this: org.springframework.scheduling.backportconcurrent.ConcurrentTaskExecutor;

        r1 := @parameter0: java.lang.Runnable;

        $r0 = new java.util.concurrent.FutureTask;

        specialinvoke $r0.<java.util.concurrent.FutureTask: void <init>(java.lang.Runnable,java.lang.Object)>(r1, null);

        virtualinvoke r2.<org.springframework.scheduling.backportconcurrent.ConcurrentTaskExecutor: void execute(java.lang.Runnable)>($r0);

        return $r0;
    }

    public java.util.concurrent.Future submit(java.util.concurrent.Callable)
    {
        java.util.concurrent.FutureTask $r0;
        java.util.concurrent.Callable r1;
        org.springframework.scheduling.backportconcurrent.ConcurrentTaskExecutor r2;

        r2 := @this: org.springframework.scheduling.backportconcurrent.ConcurrentTaskExecutor;

        r1 := @parameter0: java.util.concurrent.Callable;

        $r0 = new java.util.concurrent.FutureTask;

        specialinvoke $r0.<java.util.concurrent.FutureTask: void <init>(java.util.concurrent.Callable)>(r1);

        virtualinvoke r2.<org.springframework.scheduling.backportconcurrent.ConcurrentTaskExecutor: void execute(java.lang.Runnable)>($r0);

        return $r0;
    }

    public boolean prefersShortLivedTasks()
    {
        org.springframework.scheduling.backportconcurrent.ConcurrentTaskExecutor r0;

        r0 := @this: org.springframework.scheduling.backportconcurrent.ConcurrentTaskExecutor;

        return 1;
    }
}
