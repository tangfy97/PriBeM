public class com.hp.hpl.jena.reasoner.rulesys.impl.BFRuleContext extends java.lang.Object implements com.hp.hpl.jena.reasoner.rulesys.RuleContext
{
    protected com.hp.hpl.jena.reasoner.rulesys.impl.BindingStack env;
    protected com.hp.hpl.jena.reasoner.rulesys.Rule rule;
    protected com.hp.hpl.jena.reasoner.rulesys.ForwardRuleInfGraphI graph;
    protected java.util.List stack;
    protected java.util.List pending;
    protected java.util.List deletesPending;
    protected com.hp.hpl.jena.graph.Graph pendingCache;
    protected static org.slf4j.Logger logger;

    public void <init>(com.hp.hpl.jena.reasoner.rulesys.ForwardRuleInfGraphI)
    {
        com.hp.hpl.jena.reasoner.rulesys.impl.BindingStack $r3;
        com.hp.hpl.jena.reasoner.rulesys.impl.BFRuleContext r0;
        com.hp.hpl.jena.reasoner.rulesys.ForwardRuleInfGraphI r2;
        com.hp.hpl.jena.graph.Graph $r6;
        java.util.ArrayList $r1, $r4, $r5;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.BFRuleContext;

        r2 := @parameter0: com.hp.hpl.jena.reasoner.rulesys.ForwardRuleInfGraphI;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<com.hp.hpl.jena.reasoner.rulesys.impl.BFRuleContext: java.util.List deletesPending> = $r1;

        r0.<com.hp.hpl.jena.reasoner.rulesys.impl.BFRuleContext: com.hp.hpl.jena.reasoner.rulesys.ForwardRuleInfGraphI graph> = r2;

        $r3 = new com.hp.hpl.jena.reasoner.rulesys.impl.BindingStack;

        specialinvoke $r3.<com.hp.hpl.jena.reasoner.rulesys.impl.BindingStack: void <init>()>();

        r0.<com.hp.hpl.jena.reasoner.rulesys.impl.BFRuleContext: com.hp.hpl.jena.reasoner.rulesys.impl.BindingStack env> = $r3;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r0.<com.hp.hpl.jena.reasoner.rulesys.impl.BFRuleContext: java.util.List stack> = $r4;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        r0.<com.hp.hpl.jena.reasoner.rulesys.impl.BFRuleContext: java.util.List pending> = $r5;

        $r6 = staticinvoke <com.hp.hpl.jena.graph.Factory: com.hp.hpl.jena.graph.Graph createGraphMem()>();

        r0.<com.hp.hpl.jena.reasoner.rulesys.impl.BFRuleContext: com.hp.hpl.jena.graph.Graph pendingCache> = $r6;

        return;
    }

    public com.hp.hpl.jena.reasoner.rulesys.BindingEnvironment getEnv()
    {
        com.hp.hpl.jena.reasoner.rulesys.impl.BindingStack $r1;
        com.hp.hpl.jena.reasoner.rulesys.impl.BFRuleContext r0;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.BFRuleContext;

        $r1 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.BFRuleContext: com.hp.hpl.jena.reasoner.rulesys.impl.BindingStack env>;

        return $r1;
    }

    public com.hp.hpl.jena.reasoner.rulesys.impl.BindingStack getEnvStack()
    {
        com.hp.hpl.jena.reasoner.rulesys.impl.BindingStack $r1;
        com.hp.hpl.jena.reasoner.rulesys.impl.BFRuleContext r0;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.BFRuleContext;

        $r1 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.BFRuleContext: com.hp.hpl.jena.reasoner.rulesys.impl.BindingStack env>;

        return $r1;
    }

    public com.hp.hpl.jena.reasoner.InfGraph getGraph()
    {
        com.hp.hpl.jena.reasoner.rulesys.impl.BFRuleContext r0;
        com.hp.hpl.jena.reasoner.rulesys.ForwardRuleInfGraphI $r1;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.BFRuleContext;

        $r1 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.BFRuleContext: com.hp.hpl.jena.reasoner.rulesys.ForwardRuleInfGraphI graph>;

        return $r1;
    }

    public com.hp.hpl.jena.reasoner.rulesys.Rule getRule()
    {
        com.hp.hpl.jena.reasoner.rulesys.Rule $r1;
        com.hp.hpl.jena.reasoner.rulesys.impl.BFRuleContext r0;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.BFRuleContext;

        $r1 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.BFRuleContext: com.hp.hpl.jena.reasoner.rulesys.Rule rule>;

        return $r1;
    }

    public void setRule(com.hp.hpl.jena.reasoner.rulesys.Rule)
    {
        com.hp.hpl.jena.reasoner.rulesys.Rule r1;
        com.hp.hpl.jena.reasoner.rulesys.impl.BFRuleContext r0;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.BFRuleContext;

        r1 := @parameter0: com.hp.hpl.jena.reasoner.rulesys.Rule;

        r0.<com.hp.hpl.jena.reasoner.rulesys.impl.BFRuleContext: com.hp.hpl.jena.reasoner.rulesys.Rule rule> = r1;

        return;
    }

    public void addTriple(com.hp.hpl.jena.graph.Triple)
    {
        com.hp.hpl.jena.reasoner.rulesys.ForwardRuleInfGraphI $r1;
        java.lang.String $r7, $r9, $r14, $r17, $r19;
        boolean $z0;
        org.slf4j.Logger $r5, $r11;
        com.hp.hpl.jena.graph.Triple r2;
        com.hp.hpl.jena.reasoner.rulesys.Rule $r3, $r13;
        java.util.List $r20;
        com.hp.hpl.jena.reasoner.rulesys.impl.BFRuleContext r0;
        java.lang.StringBuilder $r4, $r6, $r8, $r10, $r12, $r15, $r16, $r18;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.BFRuleContext;

        r2 := @parameter0: com.hp.hpl.jena.graph.Triple;

        $r1 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.BFRuleContext: com.hp.hpl.jena.reasoner.rulesys.ForwardRuleInfGraphI graph>;

        $z0 = interfaceinvoke $r1.<com.hp.hpl.jena.reasoner.rulesys.ForwardRuleInfGraphI: boolean shouldTrace()>();

        if $z0 == 0 goto label2;

        $r3 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.BFRuleContext: com.hp.hpl.jena.reasoner.rulesys.Rule rule>;

        if $r3 == null goto label1;

        $r11 = <com.hp.hpl.jena.reasoner.rulesys.impl.BFRuleContext: org.slf4j.Logger logger>;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Adding to stack (");

        $r13 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.BFRuleContext: com.hp.hpl.jena.reasoner.rulesys.Rule rule>;

        $r14 = virtualinvoke $r13.<com.hp.hpl.jena.reasoner.rulesys.Rule: java.lang.String toShortString()>();

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("): ");

        $r17 = staticinvoke <com.hp.hpl.jena.util.PrintUtil: java.lang.String print(com.hp.hpl.jena.graph.Triple)>(r2);

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r11.<org.slf4j.Logger: void debug(java.lang.String)>($r19);

        goto label2;

     label1:
        $r5 = <com.hp.hpl.jena.reasoner.rulesys.impl.BFRuleContext: org.slf4j.Logger logger>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Adding to stack : ");

        $r7 = staticinvoke <com.hp.hpl.jena.util.PrintUtil: java.lang.String print(com.hp.hpl.jena.graph.Triple)>(r2);

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r5.<org.slf4j.Logger: void debug(java.lang.String)>($r9);

     label2:
        $r20 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.BFRuleContext: java.util.List stack>;

        interfaceinvoke $r20.<java.util.List: boolean add(java.lang.Object)>(r2);

        return;
    }

    public void add(com.hp.hpl.jena.graph.Triple)
    {
        com.hp.hpl.jena.reasoner.rulesys.ForwardRuleInfGraphI $r1;
        java.lang.String $r7, $r9, $r14, $r17, $r19;
        boolean $z0;
        org.slf4j.Logger $r5, $r11;
        com.hp.hpl.jena.graph.Triple r2;
        com.hp.hpl.jena.reasoner.rulesys.Rule $r3, $r13;
        java.util.List $r20;
        com.hp.hpl.jena.reasoner.rulesys.impl.BFRuleContext r0;
        java.lang.StringBuilder $r4, $r6, $r8, $r10, $r12, $r15, $r16, $r18;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.BFRuleContext;

        r2 := @parameter0: com.hp.hpl.jena.graph.Triple;

        $r1 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.BFRuleContext: com.hp.hpl.jena.reasoner.rulesys.ForwardRuleInfGraphI graph>;

        $z0 = interfaceinvoke $r1.<com.hp.hpl.jena.reasoner.rulesys.ForwardRuleInfGraphI: boolean shouldTrace()>();

        if $z0 == 0 goto label2;

        $r3 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.BFRuleContext: com.hp.hpl.jena.reasoner.rulesys.Rule rule>;

        if $r3 == null goto label1;

        $r11 = <com.hp.hpl.jena.reasoner.rulesys.impl.BFRuleContext: org.slf4j.Logger logger>;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Adding to pending (");

        $r13 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.BFRuleContext: com.hp.hpl.jena.reasoner.rulesys.Rule rule>;

        $r14 = virtualinvoke $r13.<com.hp.hpl.jena.reasoner.rulesys.Rule: java.lang.String toShortString()>();

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("): ");

        $r17 = staticinvoke <com.hp.hpl.jena.util.PrintUtil: java.lang.String print(com.hp.hpl.jena.graph.Triple)>(r2);

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r11.<org.slf4j.Logger: void debug(java.lang.String)>($r19);

        goto label2;

     label1:
        $r5 = <com.hp.hpl.jena.reasoner.rulesys.impl.BFRuleContext: org.slf4j.Logger logger>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Adding to pending : ");

        $r7 = staticinvoke <com.hp.hpl.jena.util.PrintUtil: java.lang.String print(com.hp.hpl.jena.graph.Triple)>(r2);

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r5.<org.slf4j.Logger: void debug(java.lang.String)>($r9);

     label2:
        $r20 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.BFRuleContext: java.util.List pending>;

        interfaceinvoke $r20.<java.util.List: boolean add(java.lang.Object)>(r2);

        return;
    }

    public void flushPending()
    {
        com.hp.hpl.jena.reasoner.rulesys.ForwardRuleInfGraphI $r8, $r11;
        boolean $z0, $z1;
        java.util.Iterator $r2, $r5;
        com.hp.hpl.jena.graph.Triple r12, r13;
        java.util.List $r1, $r3, $r4, $r6, $r10;
        com.hp.hpl.jena.reasoner.rulesys.impl.BFRuleContext r0;
        java.lang.Object $r7, $r9;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.BFRuleContext;

        $r1 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.BFRuleContext: java.util.List pending>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r9 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r12 = (com.hp.hpl.jena.graph.Triple) $r9;

        $r10 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.BFRuleContext: java.util.List stack>;

        interfaceinvoke $r10.<java.util.List: boolean add(java.lang.Object)>(r12);

        $r11 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.BFRuleContext: com.hp.hpl.jena.reasoner.rulesys.ForwardRuleInfGraphI graph>;

        interfaceinvoke $r11.<com.hp.hpl.jena.reasoner.rulesys.ForwardRuleInfGraphI: void addDeduction(com.hp.hpl.jena.graph.Triple)>(r12);

        interfaceinvoke $r2.<java.util.Iterator: void remove()>();

        goto label1;

     label2:
        $r3 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.BFRuleContext: java.util.List pending>;

        interfaceinvoke $r3.<java.util.List: void clear()>();

        $r4 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.BFRuleContext: java.util.List deletesPending>;

        $r5 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r7 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r13 = (com.hp.hpl.jena.graph.Triple) $r7;

        $r8 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.BFRuleContext: com.hp.hpl.jena.reasoner.rulesys.ForwardRuleInfGraphI graph>;

        interfaceinvoke $r8.<com.hp.hpl.jena.reasoner.rulesys.ForwardRuleInfGraphI: void delete(com.hp.hpl.jena.graph.Triple)>(r13);

        goto label3;

     label4:
        $r6 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.BFRuleContext: java.util.List deletesPending>;

        interfaceinvoke $r6.<java.util.List: void clear()>();

        return;
    }

    public boolean contains(com.hp.hpl.jena.graph.Triple)
    {
        com.hp.hpl.jena.reasoner.rulesys.impl.BFRuleContext r0;
        com.hp.hpl.jena.graph.Node $r2, $r3, $r4;
        com.hp.hpl.jena.graph.Triple r1;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.BFRuleContext;

        r1 := @parameter0: com.hp.hpl.jena.graph.Triple;

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getSubject()>();

        $r3 = virtualinvoke r1.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getPredicate()>();

        $r4 = virtualinvoke r1.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getObject()>();

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.impl.BFRuleContext: boolean contains(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r2, $r3, $r4);

        return $z0;
    }

    public boolean contains(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.reasoner.rulesys.impl.BFRuleContext r0;
        com.hp.hpl.jena.graph.Node r1, r2, r3;
        com.hp.hpl.jena.util.iterator.ClosableIterator $r4;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.BFRuleContext;

        r1 := @parameter0: com.hp.hpl.jena.graph.Node;

        r2 := @parameter1: com.hp.hpl.jena.graph.Node;

        r3 := @parameter2: com.hp.hpl.jena.graph.Node;

        $r4 = virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.impl.BFRuleContext: com.hp.hpl.jena.util.iterator.ClosableIterator find(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r1, r2, r3);

        $z0 = interfaceinvoke $r4.<com.hp.hpl.jena.util.iterator.ClosableIterator: boolean hasNext()>();

        interfaceinvoke $r4.<com.hp.hpl.jena.util.iterator.ClosableIterator: void close()>();

        return $z0;
    }

    public com.hp.hpl.jena.util.iterator.ClosableIterator find(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r5;
        com.hp.hpl.jena.reasoner.rulesys.impl.BFRuleContext r0;
        com.hp.hpl.jena.reasoner.rulesys.ForwardRuleInfGraphI $r4;
        com.hp.hpl.jena.graph.Node r1, r2, r3;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.BFRuleContext;

        r1 := @parameter0: com.hp.hpl.jena.graph.Node;

        r2 := @parameter1: com.hp.hpl.jena.graph.Node;

        r3 := @parameter2: com.hp.hpl.jena.graph.Node;

        $r4 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.BFRuleContext: com.hp.hpl.jena.reasoner.rulesys.ForwardRuleInfGraphI graph>;

        $r5 = interfaceinvoke $r4.<com.hp.hpl.jena.reasoner.rulesys.ForwardRuleInfGraphI: com.hp.hpl.jena.util.iterator.ExtendedIterator findDataMatches(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r1, r2, r3);

        return $r5;
    }

    public com.hp.hpl.jena.graph.Triple getNextTriple()
    {
        com.hp.hpl.jena.graph.Triple r5;
        java.util.List $r1, $r2, $r3;
        com.hp.hpl.jena.reasoner.rulesys.impl.BFRuleContext r0;
        int $i0, $i1, $i2;
        java.lang.Object $r4;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.BFRuleContext;

        $r1 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.BFRuleContext: java.util.List stack>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        if $i0 <= 0 goto label1;

        $r3 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.BFRuleContext: java.util.List stack>;

        $r2 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.BFRuleContext: java.util.List stack>;

        $i1 = interfaceinvoke $r2.<java.util.List: int size()>();

        $i2 = $i1 - 1;

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object remove(int)>($i2);

        r5 = (com.hp.hpl.jena.graph.Triple) $r4;

        return r5;

     label1:
        return null;
    }

    public void resetEnv(int)
    {
        int i0;
        com.hp.hpl.jena.reasoner.rulesys.impl.BindingStack $r1;
        com.hp.hpl.jena.reasoner.rulesys.impl.BFRuleContext r0;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.BFRuleContext;

        i0 := @parameter0: int;

        $r1 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.BFRuleContext: com.hp.hpl.jena.reasoner.rulesys.impl.BindingStack env>;

        virtualinvoke $r1.<com.hp.hpl.jena.reasoner.rulesys.impl.BindingStack: void reset(int)>(i0);

        return;
    }

    public void silentAdd(com.hp.hpl.jena.graph.Triple)
    {
        com.hp.hpl.jena.reasoner.rulesys.impl.BFRuleContext r0;
        com.hp.hpl.jena.reasoner.rulesys.ForwardRuleInfGraphI $r2;
        com.hp.hpl.jena.graph.Triple r1;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.BFRuleContext;

        r1 := @parameter0: com.hp.hpl.jena.graph.Triple;

        $r2 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.BFRuleContext: com.hp.hpl.jena.reasoner.rulesys.ForwardRuleInfGraphI graph>;

        interfaceinvoke $r2.<com.hp.hpl.jena.reasoner.rulesys.SilentAddI: void silentAdd(com.hp.hpl.jena.graph.Triple)>(r1);

        return;
    }

    public void remove(com.hp.hpl.jena.graph.Triple)
    {
        java.util.List $r2;
        com.hp.hpl.jena.reasoner.rulesys.impl.BFRuleContext r0;
        com.hp.hpl.jena.graph.Triple r1;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.BFRuleContext;

        r1 := @parameter0: com.hp.hpl.jena.graph.Triple;

        $r2 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.BFRuleContext: java.util.List deletesPending>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        return;
    }

    static void <clinit>()
    {
        org.slf4j.Logger $r0;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/hp/hpl/jena/reasoner/rulesys/impl/BFRuleContext;");

        <com.hp.hpl.jena.reasoner.rulesys.impl.BFRuleContext: org.slf4j.Logger logger> = $r0;

        return;
    }
}
