public class javax.wireless.messaging.MessagePart extends java.lang.Object
{
    static int MAX_PART_SIZE_BYTES;
    static final int BUFFER_SIZE;
    byte[] content;
    java.lang.String contentID;
    java.lang.String contentLocation;
    java.lang.String encoding;
    java.lang.String mimeType;
    static final char US_ASCII_LOWEST_VALID_CHAR;
    static final char US_ASCII_VALID_BIT_MASK;

    void construct(byte[], int, int, java.lang.String, java.lang.String, java.lang.String, java.lang.String) throws javax.wireless.messaging.SizeExceededException
    {
        byte[] r3, $r6, $r7;
        int i0, $i1, i2, $i3, $i4;
        java.lang.String r0, r1, r2, r4;
        javax.wireless.messaging.SizeExceededException $r12;
        java.lang.IllegalArgumentException $r8, $r9, $r10, $r11;
        javax.wireless.messaging.MessagePart r5;

        r5 := @this: javax.wireless.messaging.MessagePart;

        r3 := @parameter0: byte[];

        i2 := @parameter1: int;

        i0 := @parameter2: int;

        r0 := @parameter3: java.lang.String;

        r1 := @parameter4: java.lang.String;

        r2 := @parameter5: java.lang.String;

        r4 := @parameter6: java.lang.String;

        $i1 = <javax.wireless.messaging.MessagePart: int MAX_PART_SIZE_BYTES>;

        if i0 <= $i1 goto label1;

        $r12 = new javax.wireless.messaging.SizeExceededException;

        specialinvoke $r12.<javax.wireless.messaging.SizeExceededException: void <init>(java.lang.String)>("InputStream data exceeds MessagePart size limit");

        throw $r12;

     label1:
        if r0 != null goto label2;

        $r11 = new java.lang.IllegalArgumentException;

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("mimeType must be specified");

        throw $r11;

     label2:
        staticinvoke <javax.wireless.messaging.MessagePart: void checkContentID(java.lang.String)>(r1);

        staticinvoke <javax.wireless.messaging.MessagePart: void checkContentLocation(java.lang.String)>(r2);

        if i0 >= 0 goto label3;

        $r10 = new java.lang.IllegalArgumentException;

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("length must be >= 0");

        throw $r10;

     label3:
        if r3 == null goto label4;

        $i4 = i2 + i0;

        $i3 = lengthof r3;

        if $i4 <= $i3 goto label4;

        $r9 = new java.lang.IllegalArgumentException;

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("offset + length exceeds contents length");

        throw $r9;

     label4:
        if i2 >= 0 goto label5;

        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("offset must be >= 0");

        throw $r8;

     label5:
        staticinvoke <javax.wireless.messaging.MessagePart: void checkEncodingScheme(java.lang.String)>(r4);

        if r3 == null goto label6;

        $r6 = newarray (byte)[i0];

        r5.<javax.wireless.messaging.MessagePart: byte[] content> = $r6;

        $r7 = r5.<javax.wireless.messaging.MessagePart: byte[] content>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r3, i2, $r7, 0, i0);

     label6:
        r5.<javax.wireless.messaging.MessagePart: java.lang.String mimeType> = r0;

        r5.<javax.wireless.messaging.MessagePart: java.lang.String contentID> = r1;

        r5.<javax.wireless.messaging.MessagePart: java.lang.String contentLocation> = r2;

        r5.<javax.wireless.messaging.MessagePart: java.lang.String encoding> = r4;

        return;
    }

    public void <init>(byte[], int, int, java.lang.String, java.lang.String, java.lang.String, java.lang.String) throws javax.wireless.messaging.SizeExceededException
    {
        byte[] r1;
        int i0, i1;
        javax.wireless.messaging.MessagePart r0;
        java.lang.String r2, r3, r4, r5;

        r0 := @this: javax.wireless.messaging.MessagePart;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 := @parameter3: java.lang.String;

        r3 := @parameter4: java.lang.String;

        r4 := @parameter5: java.lang.String;

        r5 := @parameter6: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        virtualinvoke r0.<javax.wireless.messaging.MessagePart: void construct(byte[],int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(r1, i0, i1, r2, r3, r4, r5);

        return;
    }

    public void <init>(byte[], java.lang.String, java.lang.String, java.lang.String, java.lang.String) throws javax.wireless.messaging.SizeExceededException
    {
        byte[] r1;
        int $i0;
        javax.wireless.messaging.MessagePart r0;
        java.lang.String r2, r3, r4, r5;

        r0 := @this: javax.wireless.messaging.MessagePart;

        r1 := @parameter0: byte[];

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String;

        r5 := @parameter4: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if r1 != null goto label1;

        $i0 = 0;

        goto label2;

     label1:
        $i0 = lengthof r1;

     label2:
        virtualinvoke r0.<javax.wireless.messaging.MessagePart: void construct(byte[],int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(r1, 0, $i0, r2, r3, r4, r5);

        return;
    }

    public void <init>(java.io.InputStream, java.lang.String, java.lang.String, java.lang.String, java.lang.String) throws java.io.IOException, javax.wireless.messaging.SizeExceededException
    {
        byte[] r7, r8;
        java.io.ByteArrayOutputStream $r9;
        int $i0, $i1, $i3;
        javax.wireless.messaging.MessagePart r0;
        java.lang.String r2, r3, r4, r5;
        java.io.InputStream r1;

        r0 := @this: javax.wireless.messaging.MessagePart;

        r1 := @parameter0: java.io.InputStream;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String;

        r5 := @parameter4: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r8 = newarray (byte)[0];

        if r1 == null goto label3;

        $r9 = new java.io.ByteArrayOutputStream;

        specialinvoke $r9.<java.io.ByteArrayOutputStream: void <init>()>();

        r7 = newarray (byte)[2048];

     label1:
        $i1 = virtualinvoke r1.<java.io.InputStream: int read(byte[])>(r7);

        $i3 = (int) -1;

        if $i1 == $i3 goto label2;

        virtualinvoke $r9.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>(r7, 0, $i1);

        goto label1;

     label2:
        r8 = virtualinvoke $r9.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

     label3:
        $i0 = lengthof r8;

        virtualinvoke r0.<javax.wireless.messaging.MessagePart: void construct(byte[],int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(r8, 0, $i0, r2, r3, r4, r5);

        return;
    }

    public byte[] getContent()
    {
        byte[] $r1, $r2, r3, $r4, $r5;
        int $i0, $i1;
        javax.wireless.messaging.MessagePart r0;

        r0 := @this: javax.wireless.messaging.MessagePart;

        $r1 = r0.<javax.wireless.messaging.MessagePart: byte[] content>;

        if $r1 != null goto label1;

        return null;

     label1:
        $r2 = r0.<javax.wireless.messaging.MessagePart: byte[] content>;

        $i0 = lengthof $r2;

        r3 = newarray (byte)[$i0];

        $r5 = r0.<javax.wireless.messaging.MessagePart: byte[] content>;

        $r4 = r0.<javax.wireless.messaging.MessagePart: byte[] content>;

        $i1 = lengthof $r4;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, 0, r3, 0, $i1);

        return r3;
    }

    public java.io.InputStream getContentAsStream()
    {
        byte[] $r1, $r3, $r5;
        java.io.ByteArrayInputStream $r2, $r4;
        javax.wireless.messaging.MessagePart r0;

        r0 := @this: javax.wireless.messaging.MessagePart;

        $r1 = r0.<javax.wireless.messaging.MessagePart: byte[] content>;

        if $r1 != null goto label1;

        $r4 = new java.io.ByteArrayInputStream;

        $r5 = newarray (byte)[0];

        specialinvoke $r4.<java.io.ByteArrayInputStream: void <init>(byte[])>($r5);

        return $r4;

     label1:
        $r2 = new java.io.ByteArrayInputStream;

        $r3 = r0.<javax.wireless.messaging.MessagePart: byte[] content>;

        specialinvoke $r2.<java.io.ByteArrayInputStream: void <init>(byte[])>($r3);

        return $r2;
    }

    public java.lang.String getContentID()
    {
        javax.wireless.messaging.MessagePart r0;
        java.lang.String $r1;

        r0 := @this: javax.wireless.messaging.MessagePart;

        $r1 = r0.<javax.wireless.messaging.MessagePart: java.lang.String contentID>;

        return $r1;
    }

    public java.lang.String getContentLocation()
    {
        javax.wireless.messaging.MessagePart r0;
        java.lang.String $r1;

        r0 := @this: javax.wireless.messaging.MessagePart;

        $r1 = r0.<javax.wireless.messaging.MessagePart: java.lang.String contentLocation>;

        return $r1;
    }

    public java.lang.String getEncoding()
    {
        javax.wireless.messaging.MessagePart r0;
        java.lang.String $r1;

        r0 := @this: javax.wireless.messaging.MessagePart;

        $r1 = r0.<javax.wireless.messaging.MessagePart: java.lang.String encoding>;

        return $r1;
    }

    public int getLength()
    {
        byte[] $r1, $r2;
        int $i0;
        javax.wireless.messaging.MessagePart r0;

        r0 := @this: javax.wireless.messaging.MessagePart;

        $r1 = r0.<javax.wireless.messaging.MessagePart: byte[] content>;

        if $r1 != null goto label1;

        $i0 = 0;

        goto label2;

     label1:
        $r2 = r0.<javax.wireless.messaging.MessagePart: byte[] content>;

        $i0 = lengthof $r2;

     label2:
        return $i0;
    }

    public java.lang.String getMIMEType()
    {
        javax.wireless.messaging.MessagePart r0;
        java.lang.String $r1;

        r0 := @this: javax.wireless.messaging.MessagePart;

        $r1 = r0.<javax.wireless.messaging.MessagePart: java.lang.String mimeType>;

        return $r1;
    }

    static void checkContentID(java.lang.String) throws java.lang.IllegalArgumentException
    {
        int $i0;
        java.lang.String r0;
        java.lang.IllegalArgumentException $r1, $r2, $r3;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("contentId must be specified");

        throw $r3;

     label1:
        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 <= 100 goto label2;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("contentId exceeds 100 char limit");

        throw $r2;

     label2:
        $z0 = staticinvoke <javax.wireless.messaging.MessagePart: boolean containsNonUSASCII(java.lang.String)>(r0);

        if $z0 == 0 goto label3;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("contentId must not contain non-US-ASCII characters");

        throw $r1;

     label3:
        return;
    }

    static void checkContentLocation(java.lang.String) throws java.lang.IllegalArgumentException
    {
        int $i0;
        java.lang.String r0;
        java.lang.IllegalArgumentException $r1, $r2;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label2;

        $z0 = staticinvoke <javax.wireless.messaging.MessagePart: boolean containsNonUSASCII(java.lang.String)>(r0);

        if $z0 == 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("contentLocation must not contain non-US-ASCII characters");

        throw $r2;

     label1:
        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 <= 100 goto label2;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("contentLocation exceeds 100 char limit");

        throw $r1;

     label2:
        return;
    }

    static void checkEncodingScheme(java.lang.String) throws java.lang.IllegalArgumentException
    {
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        return;
    }

    static boolean containsNonUSASCII(java.lang.String)
    {
        char $c1, $c2;
        int $i0, i3, $i4, $i5, $i6;
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        i3 = 0;

     label1:
        if i3 >= $i0 goto label4;

        $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i3);

        $i4 = (int) $c1;

        if $i4 < 32 goto label2;

        $c2 = $c1 & 127;

        $i5 = (int) $c1;

        $i6 = (int) $c2;

        if $i5 == $i6 goto label3;

     label2:
        return 1;

     label3:
        i3 = i3 + 1;

        goto label1;

     label4:
        return 0;
    }

    static void <clinit>()
    {
        <javax.wireless.messaging.MessagePart: char US_ASCII_VALID_BIT_MASK> = 127;

        <javax.wireless.messaging.MessagePart: char US_ASCII_LOWEST_VALID_CHAR> = 32;

        <javax.wireless.messaging.MessagePart: int BUFFER_SIZE> = 2048;

        <javax.wireless.messaging.MessagePart: int MAX_PART_SIZE_BYTES> = 30720;

        return;
    }
}
