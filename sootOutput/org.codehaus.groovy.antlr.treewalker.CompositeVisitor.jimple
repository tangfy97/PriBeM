public class org.codehaus.groovy.antlr.treewalker.CompositeVisitor extends java.lang.Object implements org.codehaus.groovy.antlr.treewalker.Visitor
{
    final java.util.List visitors;
    final java.util.List backToFrontVisitors;
    private final java.util.Stack stack;

    public void <init>(java.util.List)
    {
        java.util.List r1, $r4, $r5;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        java.util.Stack $r2;
        java.util.ArrayList $r3;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r1 := @parameter0: java.util.List;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.List visitors> = r1;

        $r2 = new java.util.Stack;

        specialinvoke $r2.<java.util.Stack: void <init>()>();

        r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Stack stack> = $r2;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.List backToFrontVisitors> = $r3;

        $r4 = r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.List backToFrontVisitors>;

        interfaceinvoke $r4.<java.util.List: boolean addAll(java.util.Collection)>(r1);

        $r5 = r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.List backToFrontVisitors>;

        staticinvoke <java.util.Collections: void reverse(java.util.List)>($r5);

        return;
    }

    private java.util.Iterator itr(int)
    {
        java.util.List $r1, $r2;
        java.util.Iterator r3;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        i0 := @parameter0: int;

        $r1 = r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.List visitors>;

        r3 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

        if i0 != 4 goto label1;

        $r2 = r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.List backToFrontVisitors>;

        r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        return r3;
    }

    public void setUp()
    {
        java.util.List $r1;
        java.util.Iterator $r2;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r3;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        $r1 = r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.List visitors>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r3;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void setUp()>();

        goto label1;

     label2:
        return;
    }

    public void visitAbstract(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitAbstract(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitAnnotation(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitAnnotation(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitAnnotations(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitAnnotations(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitAnnotationArrayInit(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitAnnotationArrayInit(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitAnnotationDef(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitAnnotationDef(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitAnnotationFieldDef(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitAnnotationFieldDef(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitAnnotationMemberValuePair(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitAnnotationMemberValuePair(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitArrayDeclarator(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitArrayDeclarator(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitAssign(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitAssign(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitAt(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitAt(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitBand(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitBand(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitBandAssign(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitBandAssign(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitBigSuffix(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitBigSuffix(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitBlock(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitBlock(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitBnot(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitBnot(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitBor(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitBor(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitBorAssign(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitBorAssign(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitBsr(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitBsr(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitBsrAssign(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitBsrAssign(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitBxor(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitBxor(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitBxorAssign(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitBxorAssign(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitCaseGroup(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitCaseGroup(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitClassDef(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitClassDef(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitClosedBlock(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitClosedBlock(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitClosureList(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitClosureList(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitClosureOp(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitClosureOp(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitColon(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitColon(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitComma(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitComma(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitCompareTo(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitCompareTo(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitCtorCall(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitCtorCall(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitCtorIdent(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitCtorIdent(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitDec(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitDec(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitDigit(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitDigit(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitDiv(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitDiv(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitDivAssign(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitDivAssign(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitDollar(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitDollar(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitDot(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitDot(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitDynamicMember(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitDynamicMember(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitElist(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitElist(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitEmptyStat(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitEmptyStat(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitEnumConstantDef(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitEnumConstantDef(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitEnumDef(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitEnumDef(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitEof(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitEof(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitEqual(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitEqual(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitEsc(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitEsc(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitExponent(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitExponent(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitExpr(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitExpr(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitExtendsClause(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitExtendsClause(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitFinal(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitFinal(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitFloatSuffix(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitFloatSuffix(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitForCondition(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitForCondition(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitForEachClause(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitForEachClause(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitForInit(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitForInit(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitForInIterable(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitForInIterable(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitForIterator(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitForIterator(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitGe(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitGe(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitGt(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitGt(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitHexDigit(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitHexDigit(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitIdent(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitIdent(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitImplementsClause(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitImplementsClause(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitImplicitParameters(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitImplicitParameters(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitImport(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitImport(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitInc(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitInc(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitIndexOp(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitIndexOp(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitInstanceInit(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitInstanceInit(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitInterfaceDef(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitInterfaceDef(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitLabeledArg(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitLabeledArg(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitLabeledStat(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitLabeledStat(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitLand(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitLand(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitLbrack(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitLbrack(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitLcurly(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitLcurly(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitLe(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitLe(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitLetter(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitLetter(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitListConstructor(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitListConstructor(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitLiteralAs(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitLiteralAs(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitLiteralAssert(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitLiteralAssert(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitLiteralBoolean(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitLiteralBoolean(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitLiteralBreak(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitLiteralBreak(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitLiteralByte(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitLiteralByte(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitLiteralCase(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitLiteralCase(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitLiteralCatch(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitLiteralCatch(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitLiteralChar(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitLiteralChar(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitLiteralClass(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitLiteralClass(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitLiteralContinue(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitLiteralContinue(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitLiteralDef(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitLiteralDef(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitLiteralDefault(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitLiteralDefault(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitLiteralDouble(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitLiteralDouble(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitLiteralElse(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitLiteralElse(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitLiteralEnum(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitLiteralEnum(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitLiteralExtends(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitLiteralExtends(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitLiteralFalse(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitLiteralFalse(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitLiteralFinally(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitLiteralFinally(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitLiteralFloat(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitLiteralFloat(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitLiteralFor(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitLiteralFor(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitLiteralIf(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitLiteralIf(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitLiteralImplements(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitLiteralImplements(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitLiteralImport(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitLiteralImport(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitLiteralIn(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitLiteralIn(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitLiteralInstanceof(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitLiteralInstanceof(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitLiteralInt(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitLiteralInt(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitLiteralInterface(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitLiteralInterface(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitLiteralLong(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitLiteralLong(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitLiteralNative(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitLiteralNative(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitLiteralNew(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitLiteralNew(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitLiteralNull(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitLiteralNull(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitLiteralPackage(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitLiteralPackage(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitLiteralPrivate(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitLiteralPrivate(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitLiteralProtected(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitLiteralProtected(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitLiteralPublic(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitLiteralPublic(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitLiteralReturn(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitLiteralReturn(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitLiteralShort(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitLiteralShort(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitLiteralStatic(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitLiteralStatic(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitLiteralSuper(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitLiteralSuper(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitLiteralSwitch(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitLiteralSwitch(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitLiteralSynchronized(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitLiteralSynchronized(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitLiteralThis(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitLiteralThis(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitLiteralThreadsafe(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitLiteralThreadsafe(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitLiteralThrow(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitLiteralThrow(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitLiteralThrows(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitLiteralThrows(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitLiteralTransient(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitLiteralTransient(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitLiteralTrue(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitLiteralTrue(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitLiteralTry(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitLiteralTry(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitLiteralVoid(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitLiteralVoid(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitLiteralVolatile(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitLiteralVolatile(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitLiteralWhile(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitLiteralWhile(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitLnot(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitLnot(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitLor(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitLor(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitLparen(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitLparen(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitLt(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitLt(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitMapConstructor(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitMapConstructor(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitMemberPointer(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitMemberPointer(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitMethodCall(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitMethodCall(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitMethodDef(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitMethodDef(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitMinus(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitMinus(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitMinusAssign(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitMinusAssign(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitMlComment(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitMlComment(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitMod(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitMod(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitModifiers(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitModifiers(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitModAssign(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitModAssign(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitNls(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitNls(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitNotEqual(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitNotEqual(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitNullTreeLookahead(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitNullTreeLookahead(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitNumBigDecimal(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitNumBigDecimal(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitNumBigInt(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitNumBigInt(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitNumDouble(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitNumDouble(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitNumFloat(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitNumFloat(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitNumInt(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitNumInt(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitNumLong(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitNumLong(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitObjblock(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitObjblock(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitOneNl(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitOneNl(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitOptionalDot(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitOptionalDot(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitPackageDef(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitPackageDef(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitParameters(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitParameters(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitParameterDef(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitParameterDef(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitPlus(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitPlus(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitPlusAssign(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitPlusAssign(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitPostDec(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitPostDec(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitPostInc(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitPostInc(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitQuestion(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitQuestion(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitRangeExclusive(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitRangeExclusive(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitRangeInclusive(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitRangeInclusive(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitRbrack(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitRbrack(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitRcurly(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitRcurly(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitRegexpCtorEnd(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitRegexpCtorEnd(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitRegexpLiteral(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitRegexpLiteral(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitRegexpSymbol(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitRegexpSymbol(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitRegexFind(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitRegexFind(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitRegexMatch(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitRegexMatch(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitRparen(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitRparen(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitSelectSlot(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitSelectSlot(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitSemi(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitSemi(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitShComment(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitShComment(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitSl(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitSl(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitSlist(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitSlist(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitSlAssign(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitSlAssign(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitSlComment(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitSlComment(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitSpreadArg(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitSpreadArg(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitSpreadDot(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitSpreadDot(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitSpreadMapArg(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitSpreadMapArg(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitSr(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitSr(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitSrAssign(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitSrAssign(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitStar(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitStar(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitStarAssign(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitStarAssign(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitStarStar(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitStarStar(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitStarStarAssign(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitStarStarAssign(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitStaticImport(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitStaticImport(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitStaticInit(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitStaticInit(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitStrictfp(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitStrictfp(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitStringCh(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitStringCh(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitStringConstructor(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitStringConstructor(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitStringCtorEnd(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitStringCtorEnd(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitStringCtorMiddle(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitStringCtorMiddle(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitStringCtorStart(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitStringCtorStart(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitStringLiteral(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitStringLiteral(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitStringNl(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitStringNl(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitSuperCtorCall(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitSuperCtorCall(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitTripleDot(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitTripleDot(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitType(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitType(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitTypecast(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitTypecast(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitTypeArgument(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitTypeArgument(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitTypeArguments(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitTypeArguments(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitTypeLowerBounds(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitTypeLowerBounds(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitTypeParameter(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitTypeParameter(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitTypeParameters(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitTypeParameters(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitTypeUpperBounds(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitTypeUpperBounds(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitUnaryMinus(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitUnaryMinus(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitUnaryPlus(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitUnaryPlus(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitUnusedConst(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitUnusedConst(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitUnusedDo(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitUnusedDo(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitUnusedGoto(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitUnusedGoto(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitVariableDef(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitVariableDef(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitVariableParameterDef(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitVariableParameterDef(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitVocab(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitVocab(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitWildcardType(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitWildcardType(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitWs(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitWs(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void visitDefault(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r3;
        java.util.Iterator $r1;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        int i0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r3 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.Iterator itr(int)>(i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r2;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void visitDefault(org.codehaus.groovy.antlr.GroovySourceAST,int)>(r3, i0);

        goto label1;

     label2:
        return;
    }

    public void tearDown()
    {
        java.util.List $r1;
        java.util.Iterator $r2;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r3;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        $r1 = r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.List backToFrontVisitors>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r3;

        interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: void tearDown()>();

        goto label1;

     label2:
        return;
    }

    public void push(org.codehaus.groovy.antlr.GroovySourceAST)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r4;
        java.util.List $r1;
        java.util.Iterator $r2;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r5;
        java.lang.Object $r3;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r4 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        $r1 = r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.List visitors>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r3;

        interfaceinvoke $r5.<org.codehaus.groovy.antlr.treewalker.Visitor: void push(org.codehaus.groovy.antlr.GroovySourceAST)>(r4);

        goto label1;

     label2:
        return;
    }

    public org.codehaus.groovy.antlr.GroovySourceAST pop()
    {
        org.codehaus.groovy.antlr.GroovySourceAST r5;
        java.util.List $r1;
        java.util.Iterator $r2;
        org.codehaus.groovy.antlr.treewalker.CompositeVisitor r0;
        org.codehaus.groovy.antlr.treewalker.Visitor $r4;
        java.lang.Object $r3;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.CompositeVisitor;

        r5 = null;

        $r1 = r0.<org.codehaus.groovy.antlr.treewalker.CompositeVisitor: java.util.List backToFrontVisitors>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.antlr.treewalker.Visitor) $r3;

        r5 = interfaceinvoke $r4.<org.codehaus.groovy.antlr.treewalker.Visitor: org.codehaus.groovy.antlr.GroovySourceAST pop()>();

        goto label1;

     label2:
        return r5;
    }
}
