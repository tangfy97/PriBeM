class com.mycila.inject.internal.guava.cache.CacheBuilder$NullConcurrentMap extends java.util.AbstractMap implements java.util.concurrent.ConcurrentMap, java.io.Serializable
{
    private static final long serialVersionUID;
    private final com.mycila.inject.internal.guava.cache.RemovalListener removalListener;
    private final com.mycila.inject.internal.guava.cache.RemovalCause removalCause;

    void <init>(com.mycila.inject.internal.guava.cache.CacheBuilder)
    {
        com.mycila.inject.internal.guava.cache.RemovalListener $r2;
        com.mycila.inject.internal.guava.cache.RemovalCause $r3;
        com.mycila.inject.internal.guava.cache.CacheBuilder r1;
        com.mycila.inject.internal.guava.cache.CacheBuilder$NullConcurrentMap r0;

        r0 := @this: com.mycila.inject.internal.guava.cache.CacheBuilder$NullConcurrentMap;

        r1 := @parameter0: com.mycila.inject.internal.guava.cache.CacheBuilder;

        specialinvoke r0.<java.util.AbstractMap: void <init>()>();

        $r2 = virtualinvoke r1.<com.mycila.inject.internal.guava.cache.CacheBuilder: com.mycila.inject.internal.guava.cache.RemovalListener getRemovalListener()>();

        r0.<com.mycila.inject.internal.guava.cache.CacheBuilder$NullConcurrentMap: com.mycila.inject.internal.guava.cache.RemovalListener removalListener> = $r2;

        $r3 = r1.<com.mycila.inject.internal.guava.cache.CacheBuilder: com.mycila.inject.internal.guava.cache.RemovalCause nullRemovalCause>;

        r0.<com.mycila.inject.internal.guava.cache.CacheBuilder$NullConcurrentMap: com.mycila.inject.internal.guava.cache.RemovalCause removalCause> = $r3;

        return;
    }

    public boolean containsKey(java.lang.Object)
    {
        java.lang.Object r1;
        com.mycila.inject.internal.guava.cache.CacheBuilder$NullConcurrentMap r0;

        r0 := @this: com.mycila.inject.internal.guava.cache.CacheBuilder$NullConcurrentMap;

        r1 := @parameter0: java.lang.Object;

        return 0;
    }

    public boolean containsValue(java.lang.Object)
    {
        java.lang.Object r1;
        com.mycila.inject.internal.guava.cache.CacheBuilder$NullConcurrentMap r0;

        r0 := @this: com.mycila.inject.internal.guava.cache.CacheBuilder$NullConcurrentMap;

        r1 := @parameter0: java.lang.Object;

        return 0;
    }

    public java.lang.Object get(java.lang.Object)
    {
        java.lang.Object r1;
        com.mycila.inject.internal.guava.cache.CacheBuilder$NullConcurrentMap r0;

        r0 := @this: com.mycila.inject.internal.guava.cache.CacheBuilder$NullConcurrentMap;

        r1 := @parameter0: java.lang.Object;

        return null;
    }

    void notifyRemoval(java.lang.Object, java.lang.Object)
    {
        com.mycila.inject.internal.guava.cache.RemovalNotification $r0;
        com.mycila.inject.internal.guava.cache.RemovalListener $r5;
        com.mycila.inject.internal.guava.cache.RemovalCause $r4;
        java.lang.Object r1, r2;
        com.mycila.inject.internal.guava.cache.CacheBuilder$NullConcurrentMap r3;

        r3 := @this: com.mycila.inject.internal.guava.cache.CacheBuilder$NullConcurrentMap;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r0 = new com.mycila.inject.internal.guava.cache.RemovalNotification;

        $r4 = r3.<com.mycila.inject.internal.guava.cache.CacheBuilder$NullConcurrentMap: com.mycila.inject.internal.guava.cache.RemovalCause removalCause>;

        specialinvoke $r0.<com.mycila.inject.internal.guava.cache.RemovalNotification: void <init>(java.lang.Object,java.lang.Object,com.mycila.inject.internal.guava.cache.RemovalCause)>(r1, r2, $r4);

        $r5 = r3.<com.mycila.inject.internal.guava.cache.CacheBuilder$NullConcurrentMap: com.mycila.inject.internal.guava.cache.RemovalListener removalListener>;

        interfaceinvoke $r5.<com.mycila.inject.internal.guava.cache.RemovalListener: void onRemoval(com.mycila.inject.internal.guava.cache.RemovalNotification)>($r0);

        return;
    }

    public java.lang.Object put(java.lang.Object, java.lang.Object)
    {
        java.lang.Object r0, r1;
        com.mycila.inject.internal.guava.cache.CacheBuilder$NullConcurrentMap r2;

        r2 := @this: com.mycila.inject.internal.guava.cache.CacheBuilder$NullConcurrentMap;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        virtualinvoke r2.<com.mycila.inject.internal.guava.cache.CacheBuilder$NullConcurrentMap: void notifyRemoval(java.lang.Object,java.lang.Object)>(r0, r1);

        return null;
    }

    public java.lang.Object putIfAbsent(java.lang.Object, java.lang.Object)
    {
        java.lang.Object r1, r2, $r3;
        com.mycila.inject.internal.guava.cache.CacheBuilder$NullConcurrentMap r0;

        r0 := @this: com.mycila.inject.internal.guava.cache.CacheBuilder$NullConcurrentMap;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r3 = virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CacheBuilder$NullConcurrentMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        return $r3;
    }

    public java.lang.Object remove(java.lang.Object)
    {
        java.lang.Object r1;
        com.mycila.inject.internal.guava.cache.CacheBuilder$NullConcurrentMap r0;

        r0 := @this: com.mycila.inject.internal.guava.cache.CacheBuilder$NullConcurrentMap;

        r1 := @parameter0: java.lang.Object;

        return null;
    }

    public boolean remove(java.lang.Object, java.lang.Object)
    {
        java.lang.Object r1, r2;
        com.mycila.inject.internal.guava.cache.CacheBuilder$NullConcurrentMap r0;

        r0 := @this: com.mycila.inject.internal.guava.cache.CacheBuilder$NullConcurrentMap;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        return 0;
    }

    public java.lang.Object replace(java.lang.Object, java.lang.Object)
    {
        java.lang.Object r0, r1;
        com.mycila.inject.internal.guava.cache.CacheBuilder$NullConcurrentMap r2;

        r2 := @this: com.mycila.inject.internal.guava.cache.CacheBuilder$NullConcurrentMap;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        return null;
    }

    public boolean replace(java.lang.Object, java.lang.Object, java.lang.Object)
    {
        java.lang.Object r0, r1, r3;
        com.mycila.inject.internal.guava.cache.CacheBuilder$NullConcurrentMap r2;

        r2 := @this: com.mycila.inject.internal.guava.cache.CacheBuilder$NullConcurrentMap;

        r0 := @parameter0: java.lang.Object;

        r3 := @parameter1: java.lang.Object;

        r1 := @parameter2: java.lang.Object;

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        return 0;
    }

    public java.util.Set entrySet()
    {
        java.util.Set $r0;
        com.mycila.inject.internal.guava.cache.CacheBuilder$NullConcurrentMap r1;

        r1 := @this: com.mycila.inject.internal.guava.cache.CacheBuilder$NullConcurrentMap;

        $r0 = staticinvoke <java.util.Collections: java.util.Set emptySet()>();

        return $r0;
    }

    public static void <clinit>()
    {
        <com.mycila.inject.internal.guava.cache.CacheBuilder$NullConcurrentMap: long serialVersionUID> = 0L;

        return;
    }
}
