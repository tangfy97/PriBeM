public class org.apache.poi.poifs.crypt.agile.AgileEncryptionVerifier extends org.apache.poi.poifs.crypt.EncryptionVerifier
{
    private java.util.List certList;

    public void <init>(java.lang.String)
    {
        java.lang.String r1;
        com.microsoft.schemas.office.x2006.encryption.EncryptionDocument $r2;
        org.apache.poi.poifs.crypt.agile.AgileEncryptionVerifier r0;

        r0 := @this: org.apache.poi.poifs.crypt.agile.AgileEncryptionVerifier;

        r1 := @parameter0: java.lang.String;

        $r2 = staticinvoke <org.apache.poi.poifs.crypt.agile.AgileEncryptionInfoBuilder: com.microsoft.schemas.office.x2006.encryption.EncryptionDocument parseDescriptor(java.lang.String)>(r1);

        specialinvoke r0.<org.apache.poi.poifs.crypt.agile.AgileEncryptionVerifier: void <init>(com.microsoft.schemas.office.x2006.encryption.EncryptionDocument)>($r2);

        return;
    }

    protected void <init>(com.microsoft.schemas.office.x2006.encryption.EncryptionDocument)
    {
        com.microsoft.schemas.office.x2006.encryption.CTEncryption $r3;
        byte[] $r17, $r18, $r19, $r20, $r21, $r29, $r30, $r32;
        org.apache.poi.poifs.crypt.agile.AgileEncryptionVerifier$AgileCertificateEntry $r28;
        java.security.GeneralSecurityException $r55;
        com.microsoft.schemas.office.x2006.keyEncryptor.certificate.CTCertificateKeyEncryptor $r27;
        com.microsoft.schemas.office.x2006.encryption.STCipherAlgorithm$Enum $r10;
        com.microsoft.schemas.office.x2006.encryption.CTKeyEncryptor $r8, $r26;
        java.lang.Exception $r57;
        com.microsoft.schemas.office.x2006.encryption.CTKeyEncryptors $r4;
        java.lang.StringBuilder $r38, $r39, $r42, $r46, $r47, $r49, $r50, $r51, $r52;
        org.apache.poi.poifs.crypt.agile.AgileEncryptionVerifier r0;
        long $l0;
        java.util.ArrayList $r1;
        com.microsoft.schemas.office.x2006.keyEncryptor.password.CTPasswordKeyEncryptor $r9;
        java.lang.String $r11, $r14, $r41, $r43, $r53;
        org.apache.poi.poifs.crypt.HashAlgorithm $r15, $r16;
        org.apache.poi.EncryptedDocumentException $r37, $r44, $r45, $r56, $r58;
        com.microsoft.schemas.office.x2006.encryption.EncryptionDocument r2;
        org.apache.poi.poifs.crypt.CipherAlgorithm $r12;
        java.security.cert.X509Certificate $r34;
        java.security.cert.CertificateFactory $r24;
        org.apache.poi.poifs.crypt.ChainingMode $r23, $r36;
        com.microsoft.schemas.office.x2006.encryption.STHashAlgorithm$Enum $r13, $r48;
        java.lang.NullPointerException $r54;
        java.io.ByteArrayInputStream $r31;
        boolean $z0, $z1;
        java.util.List $r5, $r35;
        java.security.cert.Certificate $r33;
        int $i1, $i2, $i3, $i4, $i5, $i6, i7;
        com.microsoft.schemas.office.x2006.encryption.STCipherChaining$Enum $r22, $r40;
        java.util.Iterator $r6;
        java.lang.Object $r7, $r25;

        r0 := @this: org.apache.poi.poifs.crypt.agile.AgileEncryptionVerifier;

        r2 := @parameter0: com.microsoft.schemas.office.x2006.encryption.EncryptionDocument;

        specialinvoke r0.<org.apache.poi.poifs.crypt.EncryptionVerifier: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.poi.poifs.crypt.agile.AgileEncryptionVerifier: java.util.List certList> = $r1;

        $r3 = interfaceinvoke r2.<com.microsoft.schemas.office.x2006.encryption.EncryptionDocument: com.microsoft.schemas.office.x2006.encryption.CTEncryption getEncryption()>();

        $r4 = interfaceinvoke $r3.<com.microsoft.schemas.office.x2006.encryption.CTEncryption: com.microsoft.schemas.office.x2006.encryption.CTKeyEncryptors getKeyEncryptors()>();

        $r5 = interfaceinvoke $r4.<com.microsoft.schemas.office.x2006.encryption.CTKeyEncryptors: java.util.List getKeyEncryptorList()>();

        $r6 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label01:
        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        $r8 = (com.microsoft.schemas.office.x2006.encryption.CTKeyEncryptor) $r7;

        $r9 = interfaceinvoke $r8.<com.microsoft.schemas.office.x2006.encryption.CTKeyEncryptor: com.microsoft.schemas.office.x2006.keyEncryptor.password.CTPasswordKeyEncryptor getEncryptedPasswordKey()>();

        if $r9 != null goto label02;

        $r54 = new java.lang.NullPointerException;

        specialinvoke $r54.<java.lang.NullPointerException: void <init>(java.lang.String)>("encryptedKey not set");

        throw $r54;

     label02:
        goto label04;

     label03:
        $r57 := @caughtexception;

        $r58 = new org.apache.poi.EncryptedDocumentException;

        specialinvoke $r58.<org.apache.poi.EncryptedDocumentException: void <init>(java.lang.String,java.lang.Throwable)>("Unable to parse keyData", $r57);

        throw $r58;

     label04:
        $l0 = interfaceinvoke $r9.<com.microsoft.schemas.office.x2006.keyEncryptor.password.CTPasswordKeyEncryptor: long getKeyBits()>();

        i7 = (int) $l0;

        $r10 = interfaceinvoke $r9.<com.microsoft.schemas.office.x2006.keyEncryptor.password.CTPasswordKeyEncryptor: com.microsoft.schemas.office.x2006.encryption.STCipherAlgorithm$Enum getCipherAlgorithm()>();

        $r11 = virtualinvoke $r10.<com.microsoft.schemas.office.x2006.encryption.STCipherAlgorithm$Enum: java.lang.String toString()>();

        $r12 = staticinvoke <org.apache.poi.poifs.crypt.CipherAlgorithm: org.apache.poi.poifs.crypt.CipherAlgorithm fromXmlId(java.lang.String,int)>($r11, i7);

        virtualinvoke r0.<org.apache.poi.poifs.crypt.agile.AgileEncryptionVerifier: void setCipherAlgorithm(org.apache.poi.poifs.crypt.CipherAlgorithm)>($r12);

        $i1 = interfaceinvoke $r9.<com.microsoft.schemas.office.x2006.keyEncryptor.password.CTPasswordKeyEncryptor: int getHashSize()>();

        $r13 = interfaceinvoke $r9.<com.microsoft.schemas.office.x2006.keyEncryptor.password.CTPasswordKeyEncryptor: com.microsoft.schemas.office.x2006.encryption.STHashAlgorithm$Enum getHashAlgorithm()>();

        $r14 = virtualinvoke $r13.<com.microsoft.schemas.office.x2006.encryption.STHashAlgorithm$Enum: java.lang.String toString()>();

        $r15 = staticinvoke <org.apache.poi.poifs.crypt.HashAlgorithm: org.apache.poi.poifs.crypt.HashAlgorithm fromEcmaId(java.lang.String)>($r14);

        virtualinvoke r0.<org.apache.poi.poifs.crypt.agile.AgileEncryptionVerifier: void setHashAlgorithm(org.apache.poi.poifs.crypt.HashAlgorithm)>($r15);

        $r16 = virtualinvoke r0.<org.apache.poi.poifs.crypt.agile.AgileEncryptionVerifier: org.apache.poi.poifs.crypt.HashAlgorithm getHashAlgorithm()>();

        $i2 = $r16.<org.apache.poi.poifs.crypt.HashAlgorithm: int hashSize>;

        if $i2 == $i1 goto label05;

        $r45 = new org.apache.poi.EncryptedDocumentException;

        $r46 = new java.lang.StringBuilder;

        specialinvoke $r46.<java.lang.StringBuilder: void <init>()>();

        $r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported hash algorithm: ");

        $r48 = interfaceinvoke $r9.<com.microsoft.schemas.office.x2006.keyEncryptor.password.CTPasswordKeyEncryptor: com.microsoft.schemas.office.x2006.encryption.STHashAlgorithm$Enum getHashAlgorithm()>();

        $r49 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r48);

        $r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" @ ");

        $r51 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r52 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bytes");

        $r53 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r45.<org.apache.poi.EncryptedDocumentException: void <init>(java.lang.String)>($r53);

        throw $r45;

     label05:
        $i3 = interfaceinvoke $r9.<com.microsoft.schemas.office.x2006.keyEncryptor.password.CTPasswordKeyEncryptor: int getSpinCount()>();

        virtualinvoke r0.<org.apache.poi.poifs.crypt.agile.AgileEncryptionVerifier: void setSpinCount(int)>($i3);

        $r17 = interfaceinvoke $r9.<com.microsoft.schemas.office.x2006.keyEncryptor.password.CTPasswordKeyEncryptor: byte[] getEncryptedVerifierHashInput()>();

        virtualinvoke r0.<org.apache.poi.poifs.crypt.agile.AgileEncryptionVerifier: void setEncryptedVerifier(byte[])>($r17);

        $r18 = interfaceinvoke $r9.<com.microsoft.schemas.office.x2006.keyEncryptor.password.CTPasswordKeyEncryptor: byte[] getSaltValue()>();

        virtualinvoke r0.<org.apache.poi.poifs.crypt.agile.AgileEncryptionVerifier: void setSalt(byte[])>($r18);

        $r19 = interfaceinvoke $r9.<com.microsoft.schemas.office.x2006.keyEncryptor.password.CTPasswordKeyEncryptor: byte[] getEncryptedKeyValue()>();

        virtualinvoke r0.<org.apache.poi.poifs.crypt.agile.AgileEncryptionVerifier: void setEncryptedKey(byte[])>($r19);

        $r20 = interfaceinvoke $r9.<com.microsoft.schemas.office.x2006.keyEncryptor.password.CTPasswordKeyEncryptor: byte[] getEncryptedVerifierHashValue()>();

        virtualinvoke r0.<org.apache.poi.poifs.crypt.agile.AgileEncryptionVerifier: void setEncryptedVerifierHash(byte[])>($r20);

        $i4 = interfaceinvoke $r9.<com.microsoft.schemas.office.x2006.keyEncryptor.password.CTPasswordKeyEncryptor: int getSaltSize()>();

        $r21 = virtualinvoke r0.<org.apache.poi.poifs.crypt.agile.AgileEncryptionVerifier: byte[] getSalt()>();

        $i5 = lengthof $r21;

        if $i4 == $i5 goto label06;

        $r44 = new org.apache.poi.EncryptedDocumentException;

        specialinvoke $r44.<org.apache.poi.EncryptedDocumentException: void <init>(java.lang.String)>("Invalid salt size");

        throw $r44;

     label06:
        $r22 = interfaceinvoke $r9.<com.microsoft.schemas.office.x2006.keyEncryptor.password.CTPasswordKeyEncryptor: com.microsoft.schemas.office.x2006.encryption.STCipherChaining$Enum getCipherChaining()>();

        $i6 = virtualinvoke $r22.<com.microsoft.schemas.office.x2006.encryption.STCipherChaining$Enum: int intValue()>();

        lookupswitch($i6)
        {
            case 1: goto label07;
            case 2: goto label08;
            default: goto label09;
        };

     label07:
        $r36 = <org.apache.poi.poifs.crypt.ChainingMode: org.apache.poi.poifs.crypt.ChainingMode cbc>;

        virtualinvoke r0.<org.apache.poi.poifs.crypt.agile.AgileEncryptionVerifier: void setChainingMode(org.apache.poi.poifs.crypt.ChainingMode)>($r36);

        goto label10;

     label08:
        $r23 = <org.apache.poi.poifs.crypt.ChainingMode: org.apache.poi.poifs.crypt.ChainingMode cfb>;

        virtualinvoke r0.<org.apache.poi.poifs.crypt.agile.AgileEncryptionVerifier: void setChainingMode(org.apache.poi.poifs.crypt.ChainingMode)>($r23);

        goto label10;

     label09:
        $r37 = new org.apache.poi.EncryptedDocumentException;

        $r38 = new java.lang.StringBuilder;

        specialinvoke $r38.<java.lang.StringBuilder: void <init>()>();

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported chaining mode - ");

        $r40 = interfaceinvoke $r9.<com.microsoft.schemas.office.x2006.keyEncryptor.password.CTPasswordKeyEncryptor: com.microsoft.schemas.office.x2006.encryption.STCipherChaining$Enum getCipherChaining()>();

        $r41 = virtualinvoke $r40.<com.microsoft.schemas.office.x2006.encryption.STCipherChaining$Enum: java.lang.String toString()>();

        $r42 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r41);

        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r37.<org.apache.poi.EncryptedDocumentException: void <init>(java.lang.String)>($r43);

        throw $r37;

     label10:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label11;

        return;

     label11:
        $r24 = staticinvoke <java.security.cert.CertificateFactory: java.security.cert.CertificateFactory getInstance(java.lang.String)>("X.509");

     label12:
        $z1 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label13;

        $r25 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        $r26 = (com.microsoft.schemas.office.x2006.encryption.CTKeyEncryptor) $r25;

        $r27 = interfaceinvoke $r26.<com.microsoft.schemas.office.x2006.encryption.CTKeyEncryptor: com.microsoft.schemas.office.x2006.keyEncryptor.certificate.CTCertificateKeyEncryptor getEncryptedCertificateKey()>();

        $r28 = new org.apache.poi.poifs.crypt.agile.AgileEncryptionVerifier$AgileCertificateEntry;

        specialinvoke $r28.<org.apache.poi.poifs.crypt.agile.AgileEncryptionVerifier$AgileCertificateEntry: void <init>()>();

        $r29 = interfaceinvoke $r27.<com.microsoft.schemas.office.x2006.keyEncryptor.certificate.CTCertificateKeyEncryptor: byte[] getCertVerifier()>();

        $r28.<org.apache.poi.poifs.crypt.agile.AgileEncryptionVerifier$AgileCertificateEntry: byte[] certVerifier> = $r29;

        $r30 = interfaceinvoke $r27.<com.microsoft.schemas.office.x2006.keyEncryptor.certificate.CTCertificateKeyEncryptor: byte[] getEncryptedKeyValue()>();

        $r28.<org.apache.poi.poifs.crypt.agile.AgileEncryptionVerifier$AgileCertificateEntry: byte[] encryptedKey> = $r30;

        $r31 = new java.io.ByteArrayInputStream;

        $r32 = interfaceinvoke $r27.<com.microsoft.schemas.office.x2006.keyEncryptor.certificate.CTCertificateKeyEncryptor: byte[] getX509Certificate()>();

        specialinvoke $r31.<java.io.ByteArrayInputStream: void <init>(byte[])>($r32);

        $r33 = virtualinvoke $r24.<java.security.cert.CertificateFactory: java.security.cert.Certificate generateCertificate(java.io.InputStream)>($r31);

        $r34 = (java.security.cert.X509Certificate) $r33;

        $r28.<org.apache.poi.poifs.crypt.agile.AgileEncryptionVerifier$AgileCertificateEntry: java.security.cert.X509Certificate x509> = $r34;

        $r35 = r0.<org.apache.poi.poifs.crypt.agile.AgileEncryptionVerifier: java.util.List certList>;

        interfaceinvoke $r35.<java.util.List: boolean add(java.lang.Object)>($r28);

        goto label12;

     label13:
        goto label15;

     label14:
        $r55 := @caughtexception;

        $r56 = new org.apache.poi.EncryptedDocumentException;

        specialinvoke $r56.<org.apache.poi.EncryptedDocumentException: void <init>(java.lang.String,java.lang.Throwable)>("can\'t parse X509 certificate", $r55);

        throw $r56;

     label15:
        return;

        catch java.lang.Exception from label01 to label02 with label03;
        catch java.security.GeneralSecurityException from label11 to label13 with label14;
    }

    public void <init>(org.apache.poi.poifs.crypt.CipherAlgorithm, org.apache.poi.poifs.crypt.HashAlgorithm, int, int, org.apache.poi.poifs.crypt.ChainingMode)
    {
        org.apache.poi.poifs.crypt.ChainingMode r4;
        int i0, i1;
        org.apache.poi.poifs.crypt.HashAlgorithm r3;
        org.apache.poi.poifs.crypt.CipherAlgorithm r2;
        org.apache.poi.poifs.crypt.agile.AgileEncryptionVerifier r0;
        java.util.ArrayList $r1;

        r0 := @this: org.apache.poi.poifs.crypt.agile.AgileEncryptionVerifier;

        r2 := @parameter0: org.apache.poi.poifs.crypt.CipherAlgorithm;

        r3 := @parameter1: org.apache.poi.poifs.crypt.HashAlgorithm;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        r4 := @parameter4: org.apache.poi.poifs.crypt.ChainingMode;

        specialinvoke r0.<org.apache.poi.poifs.crypt.EncryptionVerifier: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.poi.poifs.crypt.agile.AgileEncryptionVerifier: java.util.List certList> = $r1;

        virtualinvoke r0.<org.apache.poi.poifs.crypt.agile.AgileEncryptionVerifier: void setCipherAlgorithm(org.apache.poi.poifs.crypt.CipherAlgorithm)>(r2);

        virtualinvoke r0.<org.apache.poi.poifs.crypt.agile.AgileEncryptionVerifier: void setHashAlgorithm(org.apache.poi.poifs.crypt.HashAlgorithm)>(r3);

        virtualinvoke r0.<org.apache.poi.poifs.crypt.agile.AgileEncryptionVerifier: void setChainingMode(org.apache.poi.poifs.crypt.ChainingMode)>(r4);

        virtualinvoke r0.<org.apache.poi.poifs.crypt.agile.AgileEncryptionVerifier: void setSpinCount(int)>(100000);

        return;
    }

    protected void setSalt(byte[])
    {
        byte[] r0;
        org.apache.poi.EncryptedDocumentException $r1;
        int $i0, $i1;
        org.apache.poi.poifs.crypt.CipherAlgorithm $r3;
        org.apache.poi.poifs.crypt.agile.AgileEncryptionVerifier r2;

        r2 := @this: org.apache.poi.poifs.crypt.agile.AgileEncryptionVerifier;

        r0 := @parameter0: byte[];

        if r0 == null goto label1;

        $i0 = lengthof r0;

        $r3 = virtualinvoke r2.<org.apache.poi.poifs.crypt.agile.AgileEncryptionVerifier: org.apache.poi.poifs.crypt.CipherAlgorithm getCipherAlgorithm()>();

        $i1 = $r3.<org.apache.poi.poifs.crypt.CipherAlgorithm: int blockSize>;

        if $i0 == $i1 goto label2;

     label1:
        $r1 = new org.apache.poi.EncryptedDocumentException;

        specialinvoke $r1.<org.apache.poi.EncryptedDocumentException: void <init>(java.lang.String)>("invalid verifier salt");

        throw $r1;

     label2:
        specialinvoke r2.<org.apache.poi.poifs.crypt.EncryptionVerifier: void setSalt(byte[])>(r0);

        return;
    }

    protected void setEncryptedVerifier(byte[])
    {
        byte[] r1;
        org.apache.poi.poifs.crypt.agile.AgileEncryptionVerifier r0;

        r0 := @this: org.apache.poi.poifs.crypt.agile.AgileEncryptionVerifier;

        r1 := @parameter0: byte[];

        specialinvoke r0.<org.apache.poi.poifs.crypt.EncryptionVerifier: void setEncryptedVerifier(byte[])>(r1);

        return;
    }

    protected void setEncryptedVerifierHash(byte[])
    {
        byte[] r1;
        org.apache.poi.poifs.crypt.agile.AgileEncryptionVerifier r0;

        r0 := @this: org.apache.poi.poifs.crypt.agile.AgileEncryptionVerifier;

        r1 := @parameter0: byte[];

        specialinvoke r0.<org.apache.poi.poifs.crypt.EncryptionVerifier: void setEncryptedVerifierHash(byte[])>(r1);

        return;
    }

    protected void setEncryptedKey(byte[])
    {
        byte[] r1;
        org.apache.poi.poifs.crypt.agile.AgileEncryptionVerifier r0;

        r0 := @this: org.apache.poi.poifs.crypt.agile.AgileEncryptionVerifier;

        r1 := @parameter0: byte[];

        specialinvoke r0.<org.apache.poi.poifs.crypt.EncryptionVerifier: void setEncryptedKey(byte[])>(r1);

        return;
    }

    public void addCertificate(java.security.cert.X509Certificate)
    {
        java.security.cert.X509Certificate r1;
        org.apache.poi.poifs.crypt.agile.AgileEncryptionVerifier$AgileCertificateEntry $r0;
        java.util.List $r3;
        org.apache.poi.poifs.crypt.agile.AgileEncryptionVerifier r2;

        r2 := @this: org.apache.poi.poifs.crypt.agile.AgileEncryptionVerifier;

        r1 := @parameter0: java.security.cert.X509Certificate;

        $r0 = new org.apache.poi.poifs.crypt.agile.AgileEncryptionVerifier$AgileCertificateEntry;

        specialinvoke $r0.<org.apache.poi.poifs.crypt.agile.AgileEncryptionVerifier$AgileCertificateEntry: void <init>()>();

        $r0.<org.apache.poi.poifs.crypt.agile.AgileEncryptionVerifier$AgileCertificateEntry: java.security.cert.X509Certificate x509> = r1;

        $r3 = r2.<org.apache.poi.poifs.crypt.agile.AgileEncryptionVerifier: java.util.List certList>;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r0);

        return;
    }

    public java.util.List getCertificates()
    {
        java.util.List $r1;
        org.apache.poi.poifs.crypt.agile.AgileEncryptionVerifier r0;

        r0 := @this: org.apache.poi.poifs.crypt.agile.AgileEncryptionVerifier;

        $r1 = r0.<org.apache.poi.poifs.crypt.agile.AgileEncryptionVerifier: java.util.List certList>;

        return $r1;
    }
}
