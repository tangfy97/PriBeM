public class org.eclipse.jdt.internal.compiler.ast.AssertStatement extends org.eclipse.jdt.internal.compiler.ast.Statement
{
    public org.eclipse.jdt.internal.compiler.ast.Expression assertExpression;
    public org.eclipse.jdt.internal.compiler.ast.Expression exceptionArgument;
    int preAssertInitStateIndex;
    private org.eclipse.jdt.internal.compiler.lookup.FieldBinding assertionSyntheticFieldBinding;

    public void <init>(org.eclipse.jdt.internal.compiler.ast.Expression, org.eclipse.jdt.internal.compiler.ast.Expression, int)
    {
        org.eclipse.jdt.internal.compiler.ast.Expression r1, r2;
        org.eclipse.jdt.internal.compiler.ast.AssertStatement r0;
        int i0, $i1, $i3;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.AssertStatement;

        r2 := @parameter0: org.eclipse.jdt.internal.compiler.ast.Expression;

        r1 := @parameter1: org.eclipse.jdt.internal.compiler.ast.Expression;

        i0 := @parameter2: int;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.ast.Statement: void <init>()>();

        $i3 = (int) -1;

        r0.<org.eclipse.jdt.internal.compiler.ast.AssertStatement: int preAssertInitStateIndex> = $i3;

        r0.<org.eclipse.jdt.internal.compiler.ast.AssertStatement: org.eclipse.jdt.internal.compiler.ast.Expression assertExpression> = r1;

        r0.<org.eclipse.jdt.internal.compiler.ast.AssertStatement: org.eclipse.jdt.internal.compiler.ast.Expression exceptionArgument> = r2;

        r0.<org.eclipse.jdt.internal.compiler.ast.AssertStatement: int sourceStart> = i0;

        $i1 = r2.<org.eclipse.jdt.internal.compiler.ast.Expression: int sourceEnd>;

        r0.<org.eclipse.jdt.internal.compiler.ast.AssertStatement: int sourceEnd> = $i1;

        return;
    }

    public void <init>(org.eclipse.jdt.internal.compiler.ast.Expression, int)
    {
        org.eclipse.jdt.internal.compiler.ast.Expression r1;
        org.eclipse.jdt.internal.compiler.ast.AssertStatement r0;
        int i0, $i1, $i3;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.AssertStatement;

        r1 := @parameter0: org.eclipse.jdt.internal.compiler.ast.Expression;

        i0 := @parameter1: int;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.ast.Statement: void <init>()>();

        $i3 = (int) -1;

        r0.<org.eclipse.jdt.internal.compiler.ast.AssertStatement: int preAssertInitStateIndex> = $i3;

        r0.<org.eclipse.jdt.internal.compiler.ast.AssertStatement: org.eclipse.jdt.internal.compiler.ast.Expression assertExpression> = r1;

        r0.<org.eclipse.jdt.internal.compiler.ast.AssertStatement: int sourceStart> = i0;

        $i1 = r1.<org.eclipse.jdt.internal.compiler.ast.Expression: int sourceEnd>;

        r0.<org.eclipse.jdt.internal.compiler.ast.AssertStatement: int sourceEnd> = $i1;

        return;
    }

    public org.eclipse.jdt.internal.compiler.flow.FlowInfo analyseCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope, org.eclipse.jdt.internal.compiler.flow.FlowContext, org.eclipse.jdt.internal.compiler.flow.FlowInfo)
    {
        org.eclipse.jdt.internal.compiler.lookup.BlockScope r1;
        org.eclipse.jdt.internal.compiler.ast.AssertStatement r0;
        org.eclipse.jdt.internal.compiler.flow.FlowInfo r3, $r12, $r14, $r15, $r19, $r20, $r21;
        org.eclipse.jdt.internal.compiler.lookup.MethodScope $r2;
        org.eclipse.jdt.internal.compiler.ast.Expression $r4, $r8, $r13, $r18;
        org.eclipse.jdt.internal.compiler.flow.FlowContext r7;
        int $i0;
        boolean z0, z1, $z2, $z3, $z4, $z5;
        org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding $r16;
        org.eclipse.jdt.internal.compiler.impl.Constant $r5, $r6, $r17;
        org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo $r9, $r10, $r11, $r22, $r23;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.AssertStatement;

        r1 := @parameter0: org.eclipse.jdt.internal.compiler.lookup.BlockScope;

        r7 := @parameter1: org.eclipse.jdt.internal.compiler.flow.FlowContext;

        r3 := @parameter2: org.eclipse.jdt.internal.compiler.flow.FlowInfo;

        $r2 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.lookup.BlockScope: org.eclipse.jdt.internal.compiler.lookup.MethodScope methodScope()>();

        $i0 = virtualinvoke $r2.<org.eclipse.jdt.internal.compiler.lookup.MethodScope: int recordInitializationStates(org.eclipse.jdt.internal.compiler.flow.FlowInfo)>(r3);

        r0.<org.eclipse.jdt.internal.compiler.ast.AssertStatement: int preAssertInitStateIndex> = $i0;

        $r4 = r0.<org.eclipse.jdt.internal.compiler.ast.AssertStatement: org.eclipse.jdt.internal.compiler.ast.Expression assertExpression>;

        $r5 = virtualinvoke $r4.<org.eclipse.jdt.internal.compiler.ast.Expression: org.eclipse.jdt.internal.compiler.impl.Constant optimizedBooleanConstant()>();

        $r6 = <org.eclipse.jdt.internal.compiler.impl.Constant: org.eclipse.jdt.internal.compiler.impl.Constant NotAConstant>;

        if $r5 == $r6 goto label1;

        $z3 = virtualinvoke $r5.<org.eclipse.jdt.internal.compiler.impl.Constant: boolean booleanValue()>();

        if $z3 == 0 goto label1;

        $z4 = 1;

        goto label2;

     label1:
        $z4 = 0;

     label2:
        z0 = $z4;

        $r17 = <org.eclipse.jdt.internal.compiler.impl.Constant: org.eclipse.jdt.internal.compiler.impl.Constant NotAConstant>;

        if $r5 == $r17 goto label3;

        $z2 = virtualinvoke $r5.<org.eclipse.jdt.internal.compiler.impl.Constant: boolean booleanValue()>();

        if $z2 != 0 goto label3;

        $z5 = 1;

        goto label4;

     label3:
        $z5 = 0;

     label4:
        z1 = $z5;

        $r18 = r0.<org.eclipse.jdt.internal.compiler.ast.AssertStatement: org.eclipse.jdt.internal.compiler.ast.Expression assertExpression>;

        $r19 = virtualinvoke r3.<org.eclipse.jdt.internal.compiler.flow.FlowInfo: org.eclipse.jdt.internal.compiler.flow.FlowInfo copy()>();

        $r20 = virtualinvoke $r18.<org.eclipse.jdt.internal.compiler.ast.Expression: org.eclipse.jdt.internal.compiler.flow.FlowInfo analyseCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.flow.FlowContext,org.eclipse.jdt.internal.compiler.flow.FlowInfo)>(r1, r7, $r19);

        $r21 = virtualinvoke $r20.<org.eclipse.jdt.internal.compiler.flow.FlowInfo: org.eclipse.jdt.internal.compiler.flow.FlowInfo initsWhenTrue()>();

        $r22 = virtualinvoke $r21.<org.eclipse.jdt.internal.compiler.flow.FlowInfo: org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo unconditionalInits()>();

        $r23 = virtualinvoke $r20.<org.eclipse.jdt.internal.compiler.flow.FlowInfo: org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo unconditionalCopy()>();

        if z0 == 0 goto label5;

        virtualinvoke $r23.<org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo: org.eclipse.jdt.internal.compiler.flow.FlowInfo setReachMode(int)>(1);

     label5:
        $r8 = r0.<org.eclipse.jdt.internal.compiler.ast.AssertStatement: org.eclipse.jdt.internal.compiler.ast.Expression exceptionArgument>;

        if $r8 == null goto label6;

        $r13 = r0.<org.eclipse.jdt.internal.compiler.ast.AssertStatement: org.eclipse.jdt.internal.compiler.ast.Expression exceptionArgument>;

        $r14 = virtualinvoke $r23.<org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo: org.eclipse.jdt.internal.compiler.flow.FlowInfo copy()>();

        $r15 = virtualinvoke $r13.<org.eclipse.jdt.internal.compiler.ast.Expression: org.eclipse.jdt.internal.compiler.flow.FlowInfo analyseCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.flow.FlowContext,org.eclipse.jdt.internal.compiler.flow.FlowInfo)>(r1, r7, $r14);

        if z0 != 0 goto label6;

        $r16 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.lookup.BlockScope: org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding getJavaLangAssertionError()>();

        virtualinvoke r7.<org.eclipse.jdt.internal.compiler.flow.FlowContext: void checkExceptionHandlers(org.eclipse.jdt.internal.compiler.lookup.TypeBinding,org.eclipse.jdt.internal.compiler.ast.ASTNode,org.eclipse.jdt.internal.compiler.flow.FlowInfo,org.eclipse.jdt.internal.compiler.lookup.BlockScope)>($r16, r0, $r15, r1);

     label6:
        if z0 != 0 goto label7;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.ast.AssertStatement: void manageSyntheticAccessIfNecessary(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.flow.FlowInfo)>(r1, r3);

     label7:
        if z1 == 0 goto label8;

        return r3;

     label8:
        $r9 = virtualinvoke $r23.<org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo: org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo nullInfoLessUnconditionalCopy()>();

        $r10 = virtualinvoke r3.<org.eclipse.jdt.internal.compiler.flow.FlowInfo: org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo mergedWith(org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo)>($r9);

        $r11 = virtualinvoke $r22.<org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo: org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo discardInitializationInfo()>();

        $r12 = virtualinvoke $r10.<org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo: org.eclipse.jdt.internal.compiler.flow.FlowInfo addInitializationsFrom(org.eclipse.jdt.internal.compiler.flow.FlowInfo)>($r11);

        return $r12;
    }

    public void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope, org.eclipse.jdt.internal.compiler.codegen.CodeStream)
    {
        org.eclipse.jdt.internal.compiler.lookup.BlockScope r3;
        org.eclipse.jdt.internal.compiler.ast.AssertStatement r0;
        org.eclipse.jdt.internal.compiler.lookup.FieldBinding $r2, $r5;
        org.eclipse.jdt.internal.compiler.codegen.BranchLabel $r11, $r12;
        org.eclipse.jdt.internal.compiler.ast.Expression $r7, $r8, $r9, $r10;
        int $i0, $i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i11, $i13;
        org.eclipse.jdt.internal.compiler.codegen.CodeStream r1;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.AssertStatement;

        r3 := @parameter0: org.eclipse.jdt.internal.compiler.lookup.BlockScope;

        r1 := @parameter1: org.eclipse.jdt.internal.compiler.codegen.CodeStream;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.ast.AssertStatement: int bits>;

        $i1 = $i0 & -2147483648;

        if $i1 != 0 goto label1;

        return;

     label1:
        i2 = r1.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: int position>;

        $r2 = r0.<org.eclipse.jdt.internal.compiler.ast.AssertStatement: org.eclipse.jdt.internal.compiler.lookup.FieldBinding assertionSyntheticFieldBinding>;

        if $r2 == null goto label5;

        $r11 = new org.eclipse.jdt.internal.compiler.codegen.BranchLabel;

        specialinvoke $r11.<org.eclipse.jdt.internal.compiler.codegen.BranchLabel: void <init>(org.eclipse.jdt.internal.compiler.codegen.CodeStream)>(r1);

        $r5 = r0.<org.eclipse.jdt.internal.compiler.ast.AssertStatement: org.eclipse.jdt.internal.compiler.lookup.FieldBinding assertionSyntheticFieldBinding>;

        virtualinvoke r1.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void getstatic(org.eclipse.jdt.internal.compiler.lookup.FieldBinding)>($r5);

        virtualinvoke r1.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void ifne(org.eclipse.jdt.internal.compiler.codegen.BranchLabel)>($r11);

        $r7 = r0.<org.eclipse.jdt.internal.compiler.ast.AssertStatement: org.eclipse.jdt.internal.compiler.ast.Expression assertExpression>;

        $r12 = new org.eclipse.jdt.internal.compiler.codegen.BranchLabel;

        specialinvoke $r12.<org.eclipse.jdt.internal.compiler.codegen.BranchLabel: void <init>(org.eclipse.jdt.internal.compiler.codegen.CodeStream)>(r1);

        virtualinvoke $r7.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateOptimizedBoolean(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,org.eclipse.jdt.internal.compiler.codegen.BranchLabel,org.eclipse.jdt.internal.compiler.codegen.BranchLabel,boolean)>(r3, r1, $r12, null, 1);

        virtualinvoke r1.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void newJavaLangAssertionError()>();

        virtualinvoke r1.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void dup()>();

        $r8 = r0.<org.eclipse.jdt.internal.compiler.ast.AssertStatement: org.eclipse.jdt.internal.compiler.ast.Expression exceptionArgument>;

        if $r8 == null goto label2;

        $r9 = r0.<org.eclipse.jdt.internal.compiler.ast.AssertStatement: org.eclipse.jdt.internal.compiler.ast.Expression exceptionArgument>;

        virtualinvoke $r9.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,boolean)>(r3, r1, 1);

        $r10 = r0.<org.eclipse.jdt.internal.compiler.ast.AssertStatement: org.eclipse.jdt.internal.compiler.ast.Expression exceptionArgument>;

        $i7 = $r10.<org.eclipse.jdt.internal.compiler.ast.Expression: int implicitConversion>;

        $i8 = $i7 & 15;

        virtualinvoke r1.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void invokeJavaLangAssertionErrorConstructor(int)>($i8);

        goto label3;

     label2:
        virtualinvoke r1.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void invokeJavaLangAssertionErrorDefaultConstructor()>();

     label3:
        virtualinvoke r1.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void athrow()>();

        $i5 = r0.<org.eclipse.jdt.internal.compiler.ast.AssertStatement: int preAssertInitStateIndex>;

        $i11 = (int) -1;

        if $i5 == $i11 goto label4;

        $i6 = r0.<org.eclipse.jdt.internal.compiler.ast.AssertStatement: int preAssertInitStateIndex>;

        virtualinvoke r1.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void removeNotDefinitelyAssignedVariables(org.eclipse.jdt.internal.compiler.lookup.Scope,int)>(r3, $i6);

     label4:
        virtualinvoke $r12.<org.eclipse.jdt.internal.compiler.codegen.BranchLabel: void place()>();

        virtualinvoke $r11.<org.eclipse.jdt.internal.compiler.codegen.BranchLabel: void place()>();

        goto label6;

     label5:
        $i3 = r0.<org.eclipse.jdt.internal.compiler.ast.AssertStatement: int preAssertInitStateIndex>;

        $i13 = (int) -1;

        if $i3 == $i13 goto label6;

        $i4 = r0.<org.eclipse.jdt.internal.compiler.ast.AssertStatement: int preAssertInitStateIndex>;

        virtualinvoke r1.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void removeNotDefinitelyAssignedVariables(org.eclipse.jdt.internal.compiler.lookup.Scope,int)>(r3, $i4);

     label6:
        $i9 = r0.<org.eclipse.jdt.internal.compiler.ast.AssertStatement: int sourceStart>;

        virtualinvoke r1.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void recordPositionsFrom(int,int)>(i2, $i9);

        return;
    }

    public void resolve(org.eclipse.jdt.internal.compiler.lookup.BlockScope)
    {
        org.eclipse.jdt.internal.compiler.lookup.BlockScope r1;
        org.eclipse.jdt.internal.compiler.ast.AssertStatement r0;
        org.eclipse.jdt.internal.compiler.problem.ProblemReporter $r7;
        org.eclipse.jdt.internal.compiler.lookup.BaseTypeBinding $r2;
        org.eclipse.jdt.internal.compiler.ast.Expression $r3, $r4, $r5, $r8, $r9;
        org.eclipse.jdt.internal.compiler.lookup.TypeBinding $r6;
        int i0, $i1, $i2;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.AssertStatement;

        r1 := @parameter0: org.eclipse.jdt.internal.compiler.lookup.BlockScope;

        $r3 = r0.<org.eclipse.jdt.internal.compiler.ast.AssertStatement: org.eclipse.jdt.internal.compiler.ast.Expression assertExpression>;

        $r2 = <org.eclipse.jdt.internal.compiler.lookup.TypeBinding: org.eclipse.jdt.internal.compiler.lookup.BaseTypeBinding BOOLEAN>;

        virtualinvoke $r3.<org.eclipse.jdt.internal.compiler.ast.Expression: org.eclipse.jdt.internal.compiler.lookup.TypeBinding resolveTypeExpecting(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.lookup.TypeBinding)>(r1, $r2);

        $r4 = r0.<org.eclipse.jdt.internal.compiler.ast.AssertStatement: org.eclipse.jdt.internal.compiler.ast.Expression exceptionArgument>;

        if $r4 == null goto label4;

        $r5 = r0.<org.eclipse.jdt.internal.compiler.ast.AssertStatement: org.eclipse.jdt.internal.compiler.ast.Expression exceptionArgument>;

        $r6 = virtualinvoke $r5.<org.eclipse.jdt.internal.compiler.ast.Expression: org.eclipse.jdt.internal.compiler.lookup.TypeBinding resolveType(org.eclipse.jdt.internal.compiler.lookup.BlockScope)>(r1);

        if $r6 == null goto label4;

        i0 = $r6.<org.eclipse.jdt.internal.compiler.lookup.TypeBinding: int id>;

        tableswitch(i0)
        {
            case 2: goto label3;
            case 3: goto label3;
            case 4: goto label3;
            case 5: goto label3;
            case 6: goto label1;
            case 7: goto label3;
            case 8: goto label3;
            case 9: goto label3;
            case 10: goto label3;
            case 11: goto label3;
            default: goto label2;
        };

     label1:
        $r7 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.lookup.BlockScope: org.eclipse.jdt.internal.compiler.problem.ProblemReporter problemReporter()>();

        $r8 = r0.<org.eclipse.jdt.internal.compiler.ast.AssertStatement: org.eclipse.jdt.internal.compiler.ast.Expression exceptionArgument>;

        virtualinvoke $r7.<org.eclipse.jdt.internal.compiler.problem.ProblemReporter: void illegalVoidExpression(org.eclipse.jdt.internal.compiler.ast.ASTNode)>($r8);

     label2:
        i0 = 1;

     label3:
        $r9 = r0.<org.eclipse.jdt.internal.compiler.ast.AssertStatement: org.eclipse.jdt.internal.compiler.ast.Expression exceptionArgument>;

        $i1 = i0 << 4;

        $i2 = $i1 + i0;

        $r9.<org.eclipse.jdt.internal.compiler.ast.Expression: int implicitConversion> = $i2;

     label4:
        return;
    }

    public void traverse(org.eclipse.jdt.internal.compiler.ASTVisitor, org.eclipse.jdt.internal.compiler.lookup.BlockScope)
    {
        org.eclipse.jdt.internal.compiler.ASTVisitor r0;
        org.eclipse.jdt.internal.compiler.lookup.BlockScope r2;
        org.eclipse.jdt.internal.compiler.ast.Expression $r3, $r4, $r5;
        org.eclipse.jdt.internal.compiler.ast.AssertStatement r1;
        boolean $z0;

        r1 := @this: org.eclipse.jdt.internal.compiler.ast.AssertStatement;

        r0 := @parameter0: org.eclipse.jdt.internal.compiler.ASTVisitor;

        r2 := @parameter1: org.eclipse.jdt.internal.compiler.lookup.BlockScope;

        $z0 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.ASTVisitor: boolean visit(org.eclipse.jdt.internal.compiler.ast.AssertStatement,org.eclipse.jdt.internal.compiler.lookup.BlockScope)>(r1, r2);

        if $z0 == 0 goto label1;

        $r3 = r1.<org.eclipse.jdt.internal.compiler.ast.AssertStatement: org.eclipse.jdt.internal.compiler.ast.Expression assertExpression>;

        virtualinvoke $r3.<org.eclipse.jdt.internal.compiler.ast.Expression: void traverse(org.eclipse.jdt.internal.compiler.ASTVisitor,org.eclipse.jdt.internal.compiler.lookup.BlockScope)>(r0, r2);

        $r4 = r1.<org.eclipse.jdt.internal.compiler.ast.AssertStatement: org.eclipse.jdt.internal.compiler.ast.Expression exceptionArgument>;

        if $r4 == null goto label1;

        $r5 = r1.<org.eclipse.jdt.internal.compiler.ast.AssertStatement: org.eclipse.jdt.internal.compiler.ast.Expression exceptionArgument>;

        virtualinvoke $r5.<org.eclipse.jdt.internal.compiler.ast.Expression: void traverse(org.eclipse.jdt.internal.compiler.ASTVisitor,org.eclipse.jdt.internal.compiler.lookup.BlockScope)>(r0, r2);

     label1:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.ASTVisitor: void endVisit(org.eclipse.jdt.internal.compiler.ast.AssertStatement,org.eclipse.jdt.internal.compiler.lookup.BlockScope)>(r1, r2);

        return;
    }

    public void manageSyntheticAccessIfNecessary(org.eclipse.jdt.internal.compiler.lookup.BlockScope, org.eclipse.jdt.internal.compiler.flow.FlowInfo)
    {
        org.eclipse.jdt.internal.compiler.lookup.BlockScope r1;
        org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding r8;
        org.eclipse.jdt.internal.compiler.ast.AssertStatement r3;
        org.eclipse.jdt.internal.compiler.flow.FlowInfo r0;
        long $l2;
        org.eclipse.jdt.internal.compiler.lookup.FieldBinding $r6, $r9;
        org.eclipse.jdt.internal.compiler.lookup.ClassScope $r10;
        byte $b3;
        int $i0, $i1, i4, $i5, $i6;
        boolean $z0, $z1, $z2, $z3;
        org.eclipse.jdt.internal.compiler.ast.Clinit $r5;
        org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding $r2;
        org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration[] $r12;
        org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration r4;
        org.eclipse.jdt.internal.compiler.impl.CompilerOptions $r7;
        org.eclipse.jdt.internal.compiler.ast.TypeDeclaration $r11;

        r3 := @this: org.eclipse.jdt.internal.compiler.ast.AssertStatement;

        r1 := @parameter0: org.eclipse.jdt.internal.compiler.lookup.BlockScope;

        r0 := @parameter1: org.eclipse.jdt.internal.compiler.flow.FlowInfo;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.flow.FlowInfo: int tagBits>;

        $i1 = $i0 & 1;

        if $i1 != 0 goto label10;

        r8 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.lookup.BlockScope: org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding enclosingSourceType()>();

        goto label03;

     label01:
        $r2 = virtualinvoke r8.<org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding: org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding enclosingType()>();

        if $r2 == null goto label04;

        $z2 = virtualinvoke $r2.<org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding: boolean isInterface()>();

        if $z2 == 0 goto label02;

        goto label04;

     label02:
        r8 = (org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding) $r2;

     label03:
        $z0 = virtualinvoke r8.<org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding: boolean isLocalType()>();

        if $z0 != 0 goto label01;

     label04:
        $r9 = virtualinvoke r8.<org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding: org.eclipse.jdt.internal.compiler.lookup.FieldBinding addSyntheticFieldForAssert(org.eclipse.jdt.internal.compiler.lookup.BlockScope)>(r1);

        r3.<org.eclipse.jdt.internal.compiler.ast.AssertStatement: org.eclipse.jdt.internal.compiler.lookup.FieldBinding assertionSyntheticFieldBinding> = $r9;

        $r10 = r8.<org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding: org.eclipse.jdt.internal.compiler.lookup.ClassScope scope>;

        $r11 = virtualinvoke $r10.<org.eclipse.jdt.internal.compiler.lookup.ClassScope: org.eclipse.jdt.internal.compiler.ast.TypeDeclaration referenceType()>();

        $r12 = $r11.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration[] methods>;

        i4 = 0;

        $i5 = lengthof $r12;

        goto label09;

     label05:
        r4 = $r12[i4];

        $z1 = virtualinvoke r4.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: boolean isClinit()>();

        if $z1 == 0 goto label08;

        $r5 = (org.eclipse.jdt.internal.compiler.ast.Clinit) r4;

        $r6 = r3.<org.eclipse.jdt.internal.compiler.ast.AssertStatement: org.eclipse.jdt.internal.compiler.lookup.FieldBinding assertionSyntheticFieldBinding>;

        $r7 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.lookup.BlockScope: org.eclipse.jdt.internal.compiler.impl.CompilerOptions compilerOptions()>();

        $l2 = $r7.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: long sourceLevel>;

        $b3 = $l2 cmp 3211264L;

        $i6 = (int) $b3;

        if $i6 >= 0 goto label06;

        $z3 = 1;

        goto label07;

     label06:
        $z3 = 0;

     label07:
        virtualinvoke $r5.<org.eclipse.jdt.internal.compiler.ast.Clinit: void setAssertionSupport(org.eclipse.jdt.internal.compiler.lookup.FieldBinding,boolean)>($r6, $z3);

        goto label10;

     label08:
        i4 = i4 + 1;

     label09:
        if i4 < $i5 goto label05;

     label10:
        return;
    }

    public java.lang.StringBuffer printStatement(int, java.lang.StringBuffer)
    {
        org.eclipse.jdt.internal.compiler.ast.Expression $r2, $r3, $r5;
        org.eclipse.jdt.internal.compiler.ast.AssertStatement r1;
        java.lang.StringBuffer r0, $r4;
        int i0;

        r1 := @this: org.eclipse.jdt.internal.compiler.ast.AssertStatement;

        i0 := @parameter0: int;

        r0 := @parameter1: java.lang.StringBuffer;

        staticinvoke <org.eclipse.jdt.internal.compiler.ast.AssertStatement: java.lang.StringBuffer printIndent(int,java.lang.StringBuffer)>(i0, r0);

        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("assert ");

        $r2 = r1.<org.eclipse.jdt.internal.compiler.ast.AssertStatement: org.eclipse.jdt.internal.compiler.ast.Expression assertExpression>;

        virtualinvoke $r2.<org.eclipse.jdt.internal.compiler.ast.Expression: java.lang.StringBuffer printExpression(int,java.lang.StringBuffer)>(0, r0);

        $r3 = r1.<org.eclipse.jdt.internal.compiler.ast.AssertStatement: org.eclipse.jdt.internal.compiler.ast.Expression exceptionArgument>;

        if $r3 == null goto label1;

        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(": ");

        $r5 = r1.<org.eclipse.jdt.internal.compiler.ast.AssertStatement: org.eclipse.jdt.internal.compiler.ast.Expression exceptionArgument>;

        virtualinvoke $r5.<org.eclipse.jdt.internal.compiler.ast.Expression: java.lang.StringBuffer printExpression(int,java.lang.StringBuffer)>(0, r0);

     label1:
        $r4 = virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(59);

        return $r4;
    }
}
