class org.apache.commons.compress.archivers.zip.CircularBuffer extends java.lang.Object
{
    private final int size;
    private final byte[] buffer;
    private int readIndex;
    private int writeIndex;

    void <init>(int)
    {
        int i0;
        byte[] $r1;
        org.apache.commons.compress.archivers.zip.CircularBuffer r0;

        r0 := @this: org.apache.commons.compress.archivers.zip.CircularBuffer;

        i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.compress.archivers.zip.CircularBuffer: int size> = i0;

        $r1 = newarray (byte)[i0];

        r0.<org.apache.commons.compress.archivers.zip.CircularBuffer: byte[] buffer> = $r1;

        return;
    }

    public boolean available()
    {
        int $i0, $i1;
        org.apache.commons.compress.archivers.zip.CircularBuffer r0;
        boolean $z0;

        r0 := @this: org.apache.commons.compress.archivers.zip.CircularBuffer;

        $i1 = r0.<org.apache.commons.compress.archivers.zip.CircularBuffer: int readIndex>;

        $i0 = r0.<org.apache.commons.compress.archivers.zip.CircularBuffer: int writeIndex>;

        if $i1 == $i0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void put(int)
    {
        byte[] $r1;
        org.apache.commons.compress.archivers.zip.CircularBuffer r0;
        byte $b1;
        int i0, $i2, $i3, $i4, $i5, $i6;

        r0 := @this: org.apache.commons.compress.archivers.zip.CircularBuffer;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.commons.compress.archivers.zip.CircularBuffer: byte[] buffer>;

        $i2 = r0.<org.apache.commons.compress.archivers.zip.CircularBuffer: int writeIndex>;

        $b1 = (byte) i0;

        $r1[$i2] = $b1;

        $i3 = r0.<org.apache.commons.compress.archivers.zip.CircularBuffer: int writeIndex>;

        $i5 = $i3 + 1;

        $i4 = r0.<org.apache.commons.compress.archivers.zip.CircularBuffer: int size>;

        $i6 = $i5 % $i4;

        r0.<org.apache.commons.compress.archivers.zip.CircularBuffer: int writeIndex> = $i6;

        return;
    }

    public int get()
    {
        byte[] $r1;
        org.apache.commons.compress.archivers.zip.CircularBuffer r0;
        short $s6, $s7;
        byte b1;
        int $i0, $i2, $i3, $i4, $i5, $i8, $i10;
        boolean $z0;

        r0 := @this: org.apache.commons.compress.archivers.zip.CircularBuffer;

        $z0 = virtualinvoke r0.<org.apache.commons.compress.archivers.zip.CircularBuffer: boolean available()>();

        if $z0 == 0 goto label1;

        $r1 = r0.<org.apache.commons.compress.archivers.zip.CircularBuffer: byte[] buffer>;

        $i0 = r0.<org.apache.commons.compress.archivers.zip.CircularBuffer: int readIndex>;

        b1 = $r1[$i0];

        $i2 = r0.<org.apache.commons.compress.archivers.zip.CircularBuffer: int readIndex>;

        $i4 = $i2 + 1;

        $i3 = r0.<org.apache.commons.compress.archivers.zip.CircularBuffer: int size>;

        $i5 = $i4 % $i3;

        r0.<org.apache.commons.compress.archivers.zip.CircularBuffer: int readIndex> = $i5;

        $s7 = (short) b1;

        $s6 = $s7 & 255;

        $i8 = (int) $s6;

        return $i8;

     label1:
        $i10 = (int) -1;

        return $i10;
    }

    public void copy(int, int)
    {
        byte[] $r1, $r2;
        byte $b9;
        int i0, $i1, i2, i3, i4, $i5, $i6, $i7, $i8, $i10, $i11, $i12, $i13, $i14, i15;
        org.apache.commons.compress.archivers.zip.CircularBuffer r0;

        r0 := @this: org.apache.commons.compress.archivers.zip.CircularBuffer;

        i0 := @parameter0: int;

        i3 := @parameter1: int;

        $i1 = r0.<org.apache.commons.compress.archivers.zip.CircularBuffer: int writeIndex>;

        i2 = $i1 - i0;

        i4 = i2 + i3;

        i15 = i2;

     label1:
        if i15 >= i4 goto label2;

        $r2 = r0.<org.apache.commons.compress.archivers.zip.CircularBuffer: byte[] buffer>;

        $i10 = r0.<org.apache.commons.compress.archivers.zip.CircularBuffer: int writeIndex>;

        $r1 = r0.<org.apache.commons.compress.archivers.zip.CircularBuffer: byte[] buffer>;

        $i5 = r0.<org.apache.commons.compress.archivers.zip.CircularBuffer: int size>;

        $i7 = i15 + $i5;

        $i6 = r0.<org.apache.commons.compress.archivers.zip.CircularBuffer: int size>;

        $i8 = $i7 % $i6;

        $b9 = $r1[$i8];

        $r2[$i10] = $b9;

        $i11 = r0.<org.apache.commons.compress.archivers.zip.CircularBuffer: int writeIndex>;

        $i13 = $i11 + 1;

        $i12 = r0.<org.apache.commons.compress.archivers.zip.CircularBuffer: int size>;

        $i14 = $i13 % $i12;

        r0.<org.apache.commons.compress.archivers.zip.CircularBuffer: int writeIndex> = $i14;

        i15 = i15 + 1;

        goto label1;

     label2:
        return;
    }
}
