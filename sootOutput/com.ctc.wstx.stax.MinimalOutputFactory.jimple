public final class com.ctc.wstx.stax.MinimalOutputFactory extends java.lang.Object implements com.ctc.wstx.cfg.OutputConfigFlags
{
    protected final boolean mIsMinimal;
    protected final com.ctc.wstx.api.WriterConfig mConfig;

    protected void <init>(boolean)
    {
        com.ctc.wstx.api.WriterConfig $r1;
        com.ctc.wstx.stax.MinimalOutputFactory r0;
        boolean z0;

        r0 := @this: com.ctc.wstx.stax.MinimalOutputFactory;

        z0 := @parameter0: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.ctc.wstx.stax.MinimalOutputFactory: boolean mIsMinimal> = z0;

        $r1 = staticinvoke <com.ctc.wstx.api.WriterConfig: com.ctc.wstx.api.WriterConfig createJ2MEDefaults()>();

        r0.<com.ctc.wstx.stax.MinimalOutputFactory: com.ctc.wstx.api.WriterConfig mConfig> = $r1;

        return;
    }

    public static com.ctc.wstx.stax.MinimalOutputFactory newMinimalInstance()
    {
        com.ctc.wstx.stax.MinimalOutputFactory $r0;

        $r0 = new com.ctc.wstx.stax.MinimalOutputFactory;

        specialinvoke $r0.<com.ctc.wstx.stax.MinimalOutputFactory: void <init>(boolean)>(1);

        return $r0;
    }

    public javax.xml.stream.XMLStreamWriter createXMLStreamWriter(java.io.OutputStream) throws javax.xml.stream.XMLStreamException
    {
        java.io.OutputStream r1;
        com.ctc.wstx.sw.BaseStreamWriter $r2;
        com.ctc.wstx.stax.MinimalOutputFactory r0;

        r0 := @this: com.ctc.wstx.stax.MinimalOutputFactory;

        r1 := @parameter0: java.io.OutputStream;

        $r2 = specialinvoke r0.<com.ctc.wstx.stax.MinimalOutputFactory: com.ctc.wstx.sw.BaseStreamWriter createSW(java.io.OutputStream,java.io.Writer,java.lang.String,boolean)>(r1, null, null, 0);

        return $r2;
    }

    public javax.xml.stream.XMLStreamWriter createXMLStreamWriter(java.io.OutputStream, java.lang.String) throws javax.xml.stream.XMLStreamException
    {
        java.io.OutputStream r1;
        com.ctc.wstx.sw.BaseStreamWriter $r3;
        java.lang.String r2;
        com.ctc.wstx.stax.MinimalOutputFactory r0;

        r0 := @this: com.ctc.wstx.stax.MinimalOutputFactory;

        r1 := @parameter0: java.io.OutputStream;

        r2 := @parameter1: java.lang.String;

        $r3 = specialinvoke r0.<com.ctc.wstx.stax.MinimalOutputFactory: com.ctc.wstx.sw.BaseStreamWriter createSW(java.io.OutputStream,java.io.Writer,java.lang.String,boolean)>(r1, null, r2, 0);

        return $r3;
    }

    public javax.xml.stream.XMLStreamWriter createXMLStreamWriter(javax.xml.transform.Result) throws javax.xml.stream.XMLStreamException
    {
        com.ctc.wstx.sw.BaseStreamWriter $r2;
        javax.xml.transform.Result r1;
        com.ctc.wstx.stax.MinimalOutputFactory r0;

        r0 := @this: com.ctc.wstx.stax.MinimalOutputFactory;

        r1 := @parameter0: javax.xml.transform.Result;

        $r2 = specialinvoke r0.<com.ctc.wstx.stax.MinimalOutputFactory: com.ctc.wstx.sw.BaseStreamWriter createSW(javax.xml.transform.Result)>(r1);

        return $r2;
    }

    public javax.xml.stream.XMLStreamWriter createXMLStreamWriter(java.io.Writer) throws javax.xml.stream.XMLStreamException
    {
        java.io.Writer r1;
        com.ctc.wstx.sw.BaseStreamWriter $r2;
        com.ctc.wstx.stax.MinimalOutputFactory r0;

        r0 := @this: com.ctc.wstx.stax.MinimalOutputFactory;

        r1 := @parameter0: java.io.Writer;

        $r2 = specialinvoke r0.<com.ctc.wstx.stax.MinimalOutputFactory: com.ctc.wstx.sw.BaseStreamWriter createSW(java.io.OutputStream,java.io.Writer,java.lang.String,boolean)>(null, r1, null, 0);

        return $r2;
    }

    public javax.xml.stream.XMLStreamWriter createXMLStreamWriter(java.io.Writer, java.lang.String) throws javax.xml.stream.XMLStreamException
    {
        com.ctc.wstx.sw.BaseStreamWriter $r3;
        java.io.Writer r1;
        java.lang.String r2;
        com.ctc.wstx.stax.MinimalOutputFactory r0;

        r0 := @this: com.ctc.wstx.stax.MinimalOutputFactory;

        r1 := @parameter0: java.io.Writer;

        r2 := @parameter1: java.lang.String;

        $r3 = specialinvoke r0.<com.ctc.wstx.stax.MinimalOutputFactory: com.ctc.wstx.sw.BaseStreamWriter createSW(java.io.OutputStream,java.io.Writer,java.lang.String,boolean)>(null, r1, r2, 0);

        return $r3;
    }

    public java.lang.Object getProperty(java.lang.String)
    {
        com.ctc.wstx.api.WriterConfig $r2;
        java.lang.Object $r3;
        java.lang.String r1;
        com.ctc.wstx.stax.MinimalOutputFactory r0;

        r0 := @this: com.ctc.wstx.stax.MinimalOutputFactory;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.ctc.wstx.stax.MinimalOutputFactory: com.ctc.wstx.api.WriterConfig mConfig>;

        $r3 = virtualinvoke $r2.<com.ctc.wstx.api.WriterConfig: java.lang.Object getProperty(java.lang.String)>(r1);

        return $r3;
    }

    public boolean isPropertySupported(java.lang.String)
    {
        com.ctc.wstx.api.WriterConfig $r2;
        java.lang.String r1;
        com.ctc.wstx.stax.MinimalOutputFactory r0;
        boolean $z0;

        r0 := @this: com.ctc.wstx.stax.MinimalOutputFactory;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.ctc.wstx.stax.MinimalOutputFactory: com.ctc.wstx.api.WriterConfig mConfig>;

        $z0 = virtualinvoke $r2.<com.ctc.wstx.api.WriterConfig: boolean isPropertySupported(java.lang.String)>(r1);

        return $z0;
    }

    public void setProperty(java.lang.String, java.lang.Object)
    {
        com.ctc.wstx.api.WriterConfig $r3;
        java.lang.Object r2;
        java.lang.String r1;
        com.ctc.wstx.stax.MinimalOutputFactory r0;

        r0 := @this: com.ctc.wstx.stax.MinimalOutputFactory;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

        $r3 = r0.<com.ctc.wstx.stax.MinimalOutputFactory: com.ctc.wstx.api.WriterConfig mConfig>;

        virtualinvoke $r3.<com.ctc.wstx.api.WriterConfig: boolean setProperty(java.lang.String,java.lang.Object)>(r1, r2);

        return;
    }

    public com.ctc.wstx.api.WriterConfig getConfig()
    {
        com.ctc.wstx.api.WriterConfig $r1;
        com.ctc.wstx.stax.MinimalOutputFactory r0;

        r0 := @this: com.ctc.wstx.stax.MinimalOutputFactory;

        $r1 = r0.<com.ctc.wstx.stax.MinimalOutputFactory: com.ctc.wstx.api.WriterConfig mConfig>;

        return $r1;
    }

    private com.ctc.wstx.sw.BaseStreamWriter createSW(java.io.OutputStream, java.io.Writer, java.lang.String, boolean) throws javax.xml.stream.XMLStreamException
    {
        com.ctc.wstx.sw.XmlWriter r19;
        com.ctc.wstx.io.UTF8Writer $r11;
        com.ctc.wstx.sw.ISOLatin1XmlWriter $r10;
        com.ctc.wstx.stax.MinimalOutputFactory r0;
        com.ctc.wstx.sw.NonNsStreamWriter $r5;
        javax.xml.stream.XMLStreamException $r14, $r16;
        java.io.OutputStreamWriter $r8;
        java.lang.String r18;
        com.ctc.wstx.sw.RepairingNsStreamWriter $r7;
        boolean z0, $z1, $z2;
        java.io.OutputStream r4;
        com.ctc.wstx.sw.SimpleNsStreamWriter $r6;
        java.io.IOException $r13, $r15;
        com.ctc.wstx.sw.BufferingXmlWriter $r3, $r9, $r12;
        com.ctc.wstx.api.WriterConfig $r1, $r2;
        java.io.Writer r17;

        r0 := @this: com.ctc.wstx.stax.MinimalOutputFactory;

        r4 := @parameter0: java.io.OutputStream;

        r17 := @parameter1: java.io.Writer;

        r18 := @parameter2: java.lang.String;

        z0 := @parameter3: boolean;

        $r1 = r0.<com.ctc.wstx.stax.MinimalOutputFactory: com.ctc.wstx.api.WriterConfig mConfig>;

        $r2 = virtualinvoke $r1.<com.ctc.wstx.api.WriterConfig: com.ctc.wstx.api.WriterConfig createNonShared()>();

        if r17 != null goto label07;

        if r18 != null goto label01;

        r18 = "UTF-8";

        goto label02;

     label01:
        r18 = staticinvoke <com.ctc.wstx.io.CharsetNames: java.lang.String normalize(java.lang.String)>(r18);

     label02:
        if r18 != "UTF-8" goto label03;

        $r11 = new com.ctc.wstx.io.UTF8Writer;

        specialinvoke $r11.<com.ctc.wstx.io.UTF8Writer: void <init>(com.ctc.wstx.api.WriterConfig,java.io.OutputStream,boolean)>($r2, r4, z0);

        $r12 = new com.ctc.wstx.sw.BufferingXmlWriter;

        specialinvoke $r12.<com.ctc.wstx.sw.BufferingXmlWriter: void <init>(java.io.Writer,com.ctc.wstx.api.WriterConfig,java.lang.String,boolean,java.io.OutputStream)>($r11, $r2, r18, 1, r4);

        r19 = $r12;

        goto label05;

     label03:
        if r18 != "ISO-8859-1" goto label04;

        $r10 = new com.ctc.wstx.sw.ISOLatin1XmlWriter;

        specialinvoke $r10.<com.ctc.wstx.sw.ISOLatin1XmlWriter: void <init>(java.io.OutputStream,com.ctc.wstx.api.WriterConfig,boolean)>(r4, $r2, z0);

        r19 = $r10;

        goto label05;

     label04:
        $r8 = new java.io.OutputStreamWriter;

        specialinvoke $r8.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.lang.String)>(r4, r18);

        $r9 = new com.ctc.wstx.sw.BufferingXmlWriter;

        specialinvoke $r9.<com.ctc.wstx.sw.BufferingXmlWriter: void <init>(java.io.Writer,com.ctc.wstx.api.WriterConfig,java.lang.String,boolean,java.io.OutputStream)>($r8, $r2, r18, z0, r4);

        r19 = $r9;

     label05:
        goto label11;

     label06:
        $r15 := @caughtexception;

        $r16 = new javax.xml.stream.XMLStreamException;

        specialinvoke $r16.<javax.xml.stream.XMLStreamException: void <init>(java.lang.Throwable)>($r15);

        throw $r16;

     label07:
        if r18 != null goto label08;

        r18 = staticinvoke <com.ctc.wstx.io.CharsetNames: java.lang.String findEncodingFor(java.io.Writer)>(r17);

     label08:
        $r3 = new com.ctc.wstx.sw.BufferingXmlWriter;

        specialinvoke $r3.<com.ctc.wstx.sw.BufferingXmlWriter: void <init>(java.io.Writer,com.ctc.wstx.api.WriterConfig,java.lang.String,boolean,java.io.OutputStream)>(r17, $r2, r18, z0, r4);

        r19 = $r3;

     label09:
        goto label11;

     label10:
        $r13 := @caughtexception;

        $r14 = new javax.xml.stream.XMLStreamException;

        specialinvoke $r14.<javax.xml.stream.XMLStreamException: void <init>(java.lang.Throwable)>($r13);

        throw $r14;

     label11:
        $z1 = virtualinvoke $r2.<com.ctc.wstx.api.WriterConfig: boolean willSupportNamespaces()>();

        if $z1 == 0 goto label13;

        $z2 = virtualinvoke $r2.<com.ctc.wstx.api.WriterConfig: boolean automaticNamespacesEnabled()>();

        if $z2 == 0 goto label12;

        $r7 = new com.ctc.wstx.sw.RepairingNsStreamWriter;

        specialinvoke $r7.<com.ctc.wstx.sw.RepairingNsStreamWriter: void <init>(com.ctc.wstx.sw.XmlWriter,java.lang.String,com.ctc.wstx.api.WriterConfig)>(r19, r18, $r2);

        return $r7;

     label12:
        $r6 = new com.ctc.wstx.sw.SimpleNsStreamWriter;

        specialinvoke $r6.<com.ctc.wstx.sw.SimpleNsStreamWriter: void <init>(com.ctc.wstx.sw.XmlWriter,java.lang.String,com.ctc.wstx.api.WriterConfig)>(r19, r18, $r2);

        return $r6;

     label13:
        $r5 = new com.ctc.wstx.sw.NonNsStreamWriter;

        specialinvoke $r5.<com.ctc.wstx.sw.NonNsStreamWriter: void <init>(com.ctc.wstx.sw.XmlWriter,java.lang.String,com.ctc.wstx.api.WriterConfig)>(r19, r18, $r2);

        return $r5;

        catch java.io.IOException from label02 to label05 with label06;
        catch java.io.IOException from label08 to label09 with label10;
    }

    private com.ctc.wstx.sw.BaseStreamWriter createSW(javax.xml.transform.Result) throws javax.xml.stream.XMLStreamException
    {
        com.ctc.wstx.sw.BaseStreamWriter $r13, $r14;
        javax.xml.transform.stream.StreamResult r21;
        javax.xml.transform.Result r0;
        com.ctc.wstx.stax.MinimalOutputFactory r12;
        java.lang.StringBuffer $r2, $r3, $r5, $r6;
        javax.xml.stream.XMLStreamException $r8, $r9, $r11;
        com.ctc.wstx.exc.WstxIOException $r17;
        java.lang.String $r7;
        boolean $z0, $z1, $z2, $z3, z4, z5, z6;
        java.io.OutputStream $r10, $r15, r20;
        java.io.IOException $r16;
        java.lang.IllegalArgumentException $r1;
        org.codehaus.stax2.io.Stax2Result r19;
        java.io.Writer r18;
        java.lang.Class $r4;

        r12 := @this: com.ctc.wstx.stax.MinimalOutputFactory;

        r0 := @parameter0: javax.xml.transform.Result;

        r18 = null;

        $z0 = r0 instanceof org.codehaus.stax2.io.Stax2Result;

        if $z0 == 0 goto label05;

        r19 = (org.codehaus.stax2.io.Stax2Result) r0;

     label01:
        $r15 = virtualinvoke r19.<org.codehaus.stax2.io.Stax2Result: java.io.OutputStream constructOutputStream()>();

        r20 = $r15;

        if $r15 != null goto label02;

        r18 = virtualinvoke r19.<org.codehaus.stax2.io.Stax2Result: java.io.Writer constructWriter()>();

     label02:
        goto label04;

     label03:
        $r16 := @caughtexception;

        $r17 = new com.ctc.wstx.exc.WstxIOException;

        specialinvoke $r17.<com.ctc.wstx.exc.WstxIOException: void <init>(java.io.IOException)>($r16);

        throw $r17;

     label04:
        z4 = 1;

        z6 = 1;

        z5 = 1;

        goto label10;

     label05:
        $z1 = r0 instanceof javax.xml.transform.stream.StreamResult;

        if $z1 == 0 goto label07;

        r21 = (javax.xml.transform.stream.StreamResult) r0;

        $r10 = virtualinvoke r21.<javax.xml.transform.stream.StreamResult: java.io.OutputStream getOutputStream()>();

        r20 = $r10;

        if $r10 != null goto label06;

        r18 = virtualinvoke r21.<javax.xml.transform.stream.StreamResult: java.io.Writer getWriter()>();

     label06:
        z4 = 0;

        z6 = 0;

        z5 = 0;

        goto label10;

     label07:
        $z2 = r0 instanceof javax.xml.transform.sax.SAXResult;

        if $z2 == 0 goto label08;

        $r9 = new javax.xml.stream.XMLStreamException;

        specialinvoke $r9.<javax.xml.stream.XMLStreamException: void <init>(java.lang.String)>("Can not create a STaX writer for a SAXResult -- not implemented.");

        throw $r9;

     label08:
        $z3 = r0 instanceof javax.xml.transform.dom.DOMResult;

        if $z3 == 0 goto label09;

        $r8 = new javax.xml.stream.XMLStreamException;

        specialinvoke $r8.<javax.xml.stream.XMLStreamException: void <init>(java.lang.String)>("Can not create a STaX writer for a DOMResult -- not (yet?) implemented.");

        throw $r8;

     label09:
        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Can not instantiate a writer for XML result type ");

        $r4 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" (unrecognized type)");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r1;

     label10:
        if r20 == null goto label11;

        $r14 = specialinvoke r12.<com.ctc.wstx.stax.MinimalOutputFactory: com.ctc.wstx.sw.BaseStreamWriter createSW(java.io.OutputStream,java.io.Writer,java.lang.String,boolean)>(r20, null, null, z6);

        return $r14;

     label11:
        if r18 == null goto label12;

        $r13 = specialinvoke r12.<com.ctc.wstx.stax.MinimalOutputFactory: com.ctc.wstx.sw.BaseStreamWriter createSW(java.io.OutputStream,java.io.Writer,java.lang.String,boolean)>(null, r18, null, z5);

        return $r13;

     label12:
        $r11 = new javax.xml.stream.XMLStreamException;

        specialinvoke $r11.<javax.xml.stream.XMLStreamException: void <init>(java.lang.String)>("Can not create StAX writer for passed-in Result -- neither writer nor output stream was accessible");

        throw $r11;

        catch java.io.IOException from label01 to label02 with label03;
    }
}
