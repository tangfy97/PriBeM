public class org.apache.cxf.attachment.AttachmentDeserializer extends java.lang.Object
{
    public static final java.lang.String ATTACHMENT_DIRECTORY;
    public static final java.lang.String ATTACHMENT_MEMORY_THRESHOLD;
    public static final java.lang.String ATTACHMENT_MAX_SIZE;
    public static final int THRESHOLD;
    private static final java.util.regex.Pattern CONTENT_TYPE_BOUNDARY_PATTERN;
    private static final java.util.regex.Pattern INPUT_STREAM_BOUNDARY_PATTERN;
    private boolean lazyLoading;
    private int pbAmount;
    private java.io.PushbackInputStream stream;
    private int createCount;
    private int closedCount;
    private boolean closed;
    private byte[] boundary;
    private java.lang.String contentType;
    private org.apache.cxf.attachment.LazyAttachmentCollection attachments;
    private org.apache.cxf.message.Message message;
    private java.io.InputStream body;
    private java.util.Set loaded;
    private java.util.List supportedTypes;

    public void <init>(org.apache.cxf.message.Message)
    {
        java.util.List $r2;
        org.apache.cxf.message.Message r1;
        org.apache.cxf.attachment.AttachmentDeserializer r0;

        r0 := @this: org.apache.cxf.attachment.AttachmentDeserializer;

        r1 := @parameter0: org.apache.cxf.message.Message;

        $r2 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>("multipart/related");

        specialinvoke r0.<org.apache.cxf.attachment.AttachmentDeserializer: void <init>(org.apache.cxf.message.Message,java.util.List)>(r1, $r2);

        return;
    }

    public void <init>(org.apache.cxf.message.Message, java.util.List)
    {
        java.util.HashSet $r1;
        java.util.List r3;
        org.apache.cxf.message.Message r2;
        org.apache.cxf.attachment.AttachmentDeserializer r0;

        r0 := @this: org.apache.cxf.attachment.AttachmentDeserializer;

        r2 := @parameter0: org.apache.cxf.message.Message;

        r3 := @parameter1: java.util.List;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.cxf.attachment.AttachmentDeserializer: boolean lazyLoading> = 1;

        r0.<org.apache.cxf.attachment.AttachmentDeserializer: int pbAmount> = 2048;

        $r1 = new java.util.HashSet;

        specialinvoke $r1.<java.util.HashSet: void <init>()>();

        r0.<org.apache.cxf.attachment.AttachmentDeserializer: java.util.Set loaded> = $r1;

        r0.<org.apache.cxf.attachment.AttachmentDeserializer: org.apache.cxf.message.Message message> = r2;

        r0.<org.apache.cxf.attachment.AttachmentDeserializer: java.util.List supportedTypes> = r3;

        return;
    }

    public void initializeAttachments() throws java.io.IOException
    {
        org.apache.cxf.attachment.LazyAttachmentCollection $r1, $r2;
        org.apache.cxf.message.Message $r3;
        org.apache.cxf.attachment.AttachmentDeserializer r0;

        r0 := @this: org.apache.cxf.attachment.AttachmentDeserializer;

        virtualinvoke r0.<org.apache.cxf.attachment.AttachmentDeserializer: void initializeRootMessage()>();

        $r1 = new org.apache.cxf.attachment.LazyAttachmentCollection;

        specialinvoke $r1.<org.apache.cxf.attachment.LazyAttachmentCollection: void <init>(org.apache.cxf.attachment.AttachmentDeserializer)>(r0);

        r0.<org.apache.cxf.attachment.AttachmentDeserializer: org.apache.cxf.attachment.LazyAttachmentCollection attachments> = $r1;

        $r3 = r0.<org.apache.cxf.attachment.AttachmentDeserializer: org.apache.cxf.message.Message message>;

        $r2 = r0.<org.apache.cxf.attachment.AttachmentDeserializer: org.apache.cxf.attachment.LazyAttachmentCollection attachments>;

        interfaceinvoke $r3.<org.apache.cxf.message.Message: void setAttachments(java.util.Collection)>($r2);

        return;
    }

    protected void initializeRootMessage() throws java.io.IOException
    {
        byte[] $r12, $r17, $r27;
        java.lang.IllegalStateException $r41, $r42;
        java.io.PushbackInputStream $r13, $r18, $r20, $r28;
        javax.mail.MessagingException $r43;
        org.apache.cxf.attachment.AttachmentDeserializer r0;
        boolean $z0, $z1, $z2, $z3;
        java.util.List $r9;
        java.lang.StringBuilder $r36, $r37, $r38;
        org.apache.cxf.attachment.DelegatingInputStream $r25;
        int $i0, $i1, $i2, $i3;
        java.lang.String $r3, $r4, $r7, $r8, $r10, $r11, $r23, $r24, $r31, $r33, $r34, $r39, r45;
        org.apache.cxf.attachment.MimeBodyPartInputStream $r26;
        org.apache.cxf.message.Message $r1, $r5, $r14, $r22, $r30, $r32;
        java.io.IOException $r35, $r40;
        java.lang.RuntimeException $r44;
        javax.mail.internet.InternetHeaders $r19;
        java.lang.Object $r2, $r6, $r15;
        java.lang.Class $r21;
        java.io.InputStream $r16, $r29;

        r0 := @this: org.apache.cxf.attachment.AttachmentDeserializer;

        $r1 = r0.<org.apache.cxf.attachment.AttachmentDeserializer: org.apache.cxf.message.Message message>;

        $r2 = interfaceinvoke $r1.<org.apache.cxf.message.Message: java.lang.Object get(java.lang.Object)>("Content-Type");

        $r3 = (java.lang.String) $r2;

        r0.<org.apache.cxf.attachment.AttachmentDeserializer: java.lang.String contentType> = $r3;

        $r4 = r0.<org.apache.cxf.attachment.AttachmentDeserializer: java.lang.String contentType>;

        if $r4 != null goto label1;

        $r42 = new java.lang.IllegalStateException;

        specialinvoke $r42.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Content-Type can not be empty!");

        throw $r42;

     label1:
        $r5 = r0.<org.apache.cxf.attachment.AttachmentDeserializer: org.apache.cxf.message.Message message>;

        $r6 = interfaceinvoke $r5.<org.apache.cxf.message.Message: java.lang.Object getContent(java.lang.Class)>(class "Ljava/io/InputStream;");

        if $r6 != null goto label2;

        $r41 = new java.lang.IllegalStateException;

        specialinvoke $r41.<java.lang.IllegalStateException: void <init>(java.lang.String)>("An InputStream must be provided!");

        throw $r41;

     label2:
        $r7 = r0.<org.apache.cxf.attachment.AttachmentDeserializer: java.lang.String contentType>;

        $r8 = virtualinvoke $r7.<java.lang.String: java.lang.String toLowerCase()>();

        $r9 = r0.<org.apache.cxf.attachment.AttachmentDeserializer: java.util.List supportedTypes>;

        $z0 = staticinvoke <org.apache.cxf.attachment.AttachmentUtil: boolean isTypeSupported(java.lang.String,java.util.List)>($r8, $r9);

        if $z0 == 0 goto label9;

        $r10 = r0.<org.apache.cxf.attachment.AttachmentDeserializer: java.lang.String contentType>;

        $r11 = specialinvoke r0.<org.apache.cxf.attachment.AttachmentDeserializer: java.lang.String findBoundaryFromContentType(java.lang.String)>($r10);

        r45 = $r11;

        if null != $r11 goto label3;

        r45 = specialinvoke r0.<org.apache.cxf.attachment.AttachmentDeserializer: java.lang.String findBoundaryFromInputStream()>();

     label3:
        if null != r45 goto label4;

        $r40 = new java.io.IOException;

        specialinvoke $r40.<java.io.IOException: void <init>(java.lang.String)>("Couldn\'t determine the boundary from the message!");

        throw $r40;

     label4:
        $r12 = virtualinvoke r45.<java.lang.String: byte[] getBytes(java.lang.String)>("utf-8");

        r0.<org.apache.cxf.attachment.AttachmentDeserializer: byte[] boundary> = $r12;

        $r13 = new java.io.PushbackInputStream;

        $r14 = r0.<org.apache.cxf.attachment.AttachmentDeserializer: org.apache.cxf.message.Message message>;

        $r15 = interfaceinvoke $r14.<org.apache.cxf.message.Message: java.lang.Object getContent(java.lang.Class)>(class "Ljava/io/InputStream;");

        $r16 = (java.io.InputStream) $r15;

        $i0 = r0.<org.apache.cxf.attachment.AttachmentDeserializer: int pbAmount>;

        specialinvoke $r13.<java.io.PushbackInputStream: void <init>(java.io.InputStream,int)>($r16, $i0);

        r0.<org.apache.cxf.attachment.AttachmentDeserializer: java.io.PushbackInputStream stream> = $r13;

        $r18 = r0.<org.apache.cxf.attachment.AttachmentDeserializer: java.io.PushbackInputStream stream>;

        $r17 = r0.<org.apache.cxf.attachment.AttachmentDeserializer: byte[] boundary>;

        $z1 = staticinvoke <org.apache.cxf.attachment.AttachmentDeserializer: boolean readTillFirstBoundary(java.io.PushbackInputStream,byte[])>($r18, $r17);

        if $z1 != 0 goto label5;

        $r35 = new java.io.IOException;

        $r36 = new java.lang.StringBuilder;

        specialinvoke $r36.<java.lang.StringBuilder: void <init>()>();

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t find MIME boundary: ");

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r45);

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r35.<java.io.IOException: void <init>(java.lang.String)>($r39);

        throw $r35;

     label5:
        $r19 = new javax.mail.internet.InternetHeaders;

        $r20 = r0.<org.apache.cxf.attachment.AttachmentDeserializer: java.io.PushbackInputStream stream>;

        specialinvoke $r19.<javax.mail.internet.InternetHeaders: void <init>(java.io.InputStream)>($r20);

        $r22 = r0.<org.apache.cxf.attachment.AttachmentDeserializer: org.apache.cxf.message.Message message>;

        $r21 = class "Ljavax/mail/internet/InternetHeaders;";

        $r23 = virtualinvoke $r21.<java.lang.Class: java.lang.String getName()>();

        interfaceinvoke $r22.<org.apache.cxf.message.Message: java.lang.Object put(java.lang.Object,java.lang.Object)>($r23, $r19);

        $r24 = virtualinvoke $r19.<javax.mail.internet.InternetHeaders: java.lang.String getHeader(java.lang.String,java.lang.String)>("Content-Type", "; ");

        $z2 = staticinvoke <org.apache.cxf.common.util.StringUtils: boolean isEmpty(java.lang.String)>($r24);

        if $z2 != 0 goto label6;

        $r31 = staticinvoke <org.apache.cxf.helpers.HttpHeaderHelper: java.lang.String findCharset(java.lang.String)>($r24);

        $z3 = staticinvoke <org.apache.cxf.common.util.StringUtils: boolean isEmpty(java.lang.String)>($r31);

        if $z3 != 0 goto label6;

        $r32 = r0.<org.apache.cxf.attachment.AttachmentDeserializer: org.apache.cxf.message.Message message>;

        $r33 = <org.apache.cxf.message.Message: java.lang.String ENCODING>;

        $r34 = staticinvoke <org.apache.cxf.helpers.HttpHeaderHelper: java.lang.String mapCharset(java.lang.String)>($r31);

        interfaceinvoke $r32.<org.apache.cxf.message.Message: java.lang.Object put(java.lang.Object,java.lang.Object)>($r33, $r34);

     label6:
        goto label8;

     label7:
        $r43 := @caughtexception;

        $r44 = new java.lang.RuntimeException;

        specialinvoke $r44.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r43);

        throw $r44;

     label8:
        $r25 = new org.apache.cxf.attachment.DelegatingInputStream;

        $r26 = new org.apache.cxf.attachment.MimeBodyPartInputStream;

        $r28 = r0.<org.apache.cxf.attachment.AttachmentDeserializer: java.io.PushbackInputStream stream>;

        $r27 = r0.<org.apache.cxf.attachment.AttachmentDeserializer: byte[] boundary>;

        $i1 = r0.<org.apache.cxf.attachment.AttachmentDeserializer: int pbAmount>;

        specialinvoke $r26.<org.apache.cxf.attachment.MimeBodyPartInputStream: void <init>(java.io.PushbackInputStream,byte[],int)>($r28, $r27, $i1);

        specialinvoke $r25.<org.apache.cxf.attachment.DelegatingInputStream: void <init>(java.io.InputStream,org.apache.cxf.attachment.AttachmentDeserializer)>($r26, r0);

        r0.<org.apache.cxf.attachment.AttachmentDeserializer: java.io.InputStream body> = $r25;

        $i2 = r0.<org.apache.cxf.attachment.AttachmentDeserializer: int createCount>;

        $i3 = $i2 + 1;

        r0.<org.apache.cxf.attachment.AttachmentDeserializer: int createCount> = $i3;

        $r30 = r0.<org.apache.cxf.attachment.AttachmentDeserializer: org.apache.cxf.message.Message message>;

        $r29 = r0.<org.apache.cxf.attachment.AttachmentDeserializer: java.io.InputStream body>;

        interfaceinvoke $r30.<org.apache.cxf.message.Message: void setContent(java.lang.Class,java.lang.Object)>(class "Ljava/io/InputStream;", $r29);

     label9:
        return;

        catch javax.mail.MessagingException from label5 to label6 with label7;
    }

    private java.lang.String findBoundaryFromContentType(java.lang.String) throws java.io.IOException
    {
        org.apache.cxf.attachment.AttachmentDeserializer r7;
        java.util.regex.Matcher $r2;
        java.lang.StringBuilder $r3, $r4, $r6;
        java.lang.String r0, $r5, $r8;
        java.util.regex.Pattern $r1;
        boolean $z0;

        r7 := @this: org.apache.cxf.attachment.AttachmentDeserializer;

        r0 := @parameter0: java.lang.String;

        $r1 = <org.apache.cxf.attachment.AttachmentDeserializer: java.util.regex.Pattern CONTENT_TYPE_BOUNDARY_PATTERN>;

        $r2 = virtualinvoke $r1.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r0);

        $z0 = virtualinvoke $r2.<java.util.regex.Matcher: boolean find()>();

        if $z0 == 0 goto label1;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("--");

        $r5 = virtualinvoke $r2.<java.util.regex.Matcher: java.lang.String group(int)>(1);

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label2;

     label1:
        $r8 = null;

     label2:
        return $r8;
    }

    private java.lang.String findBoundaryFromInputStream() throws java.io.IOException
    {
        byte[] r5;
        java.io.PushbackInputStream $r4;
        org.apache.cxf.attachment.AttachmentDeserializer r0;
        java.util.regex.Matcher $r9;
        int $i0;
        java.lang.String $r6, $r12, $r14;
        boolean $z0;
        org.apache.cxf.message.Message $r1, $r7;
        java.lang.Object $r2;
        java.lang.StringBuilder $r10, $r11, $r13;
        java.util.regex.Pattern $r8;
        java.io.InputStream r3;

        r0 := @this: org.apache.cxf.attachment.AttachmentDeserializer;

        $r1 = r0.<org.apache.cxf.attachment.AttachmentDeserializer: org.apache.cxf.message.Message message>;

        $r2 = interfaceinvoke $r1.<org.apache.cxf.message.Message: java.lang.Object getContent(java.lang.Class)>(class "Ljava/io/InputStream;");

        r3 = (java.io.InputStream) $r2;

        $r4 = new java.io.PushbackInputStream;

        specialinvoke $r4.<java.io.PushbackInputStream: void <init>(java.io.InputStream,int)>(r3, 4096);

        r5 = newarray (byte)[2048];

        $i0 = virtualinvoke $r4.<java.io.PushbackInputStream: int read(byte[])>(r5);

        $r6 = staticinvoke <org.apache.cxf.helpers.IOUtils: java.lang.String newStringFromBytes(byte[],int,int)>(r5, 0, $i0);

        virtualinvoke $r4.<java.io.PushbackInputStream: void unread(byte[],int,int)>(r5, 0, $i0);

        $r7 = r0.<org.apache.cxf.attachment.AttachmentDeserializer: org.apache.cxf.message.Message message>;

        interfaceinvoke $r7.<org.apache.cxf.message.Message: void setContent(java.lang.Class,java.lang.Object)>(class "Ljava/io/InputStream;", $r4);

        $r8 = <org.apache.cxf.attachment.AttachmentDeserializer: java.util.regex.Pattern INPUT_STREAM_BOUNDARY_PATTERN>;

        $r9 = virtualinvoke $r8.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r6);

        $z0 = virtualinvoke $r9.<java.util.regex.Matcher: boolean find()>();

        if $z0 == 0 goto label1;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("--");

        $r12 = virtualinvoke $r9.<java.util.regex.Matcher: java.lang.String group(int)>(1);

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label2;

     label1:
        $r14 = null;

     label2:
        return $r14;
    }

    public org.apache.cxf.attachment.AttachmentImpl readNext() throws java.io.IOException
    {
        java.io.PushbackInputStream $r1, $r2, $r4;
        javax.mail.MessagingException $r7;
        java.lang.RuntimeException $r10;
        org.apache.cxf.attachment.AttachmentDeserializer r0;
        org.apache.cxf.message.Attachment $r5;
        javax.mail.internet.InternetHeaders $r9;
        int $i0, $i2;
        org.apache.cxf.attachment.AttachmentImpl $r6;
        boolean $z0;

        r0 := @this: org.apache.cxf.attachment.AttachmentDeserializer;

        specialinvoke r0.<org.apache.cxf.attachment.AttachmentDeserializer: void cacheStreamedAttachments()>();

        $z0 = r0.<org.apache.cxf.attachment.AttachmentDeserializer: boolean closed>;

        if $z0 == 0 goto label1;

        return null;

     label1:
        $r1 = r0.<org.apache.cxf.attachment.AttachmentDeserializer: java.io.PushbackInputStream stream>;

        $i0 = virtualinvoke $r1.<java.io.PushbackInputStream: int read()>();

        $i2 = (int) -1;

        if $i0 != $i2 goto label2;

        return null;

     label2:
        $r2 = r0.<org.apache.cxf.attachment.AttachmentDeserializer: java.io.PushbackInputStream stream>;

        virtualinvoke $r2.<java.io.PushbackInputStream: void unread(int)>($i0);

     label3:
        $r9 = new javax.mail.internet.InternetHeaders;

        $r4 = r0.<org.apache.cxf.attachment.AttachmentDeserializer: java.io.PushbackInputStream stream>;

        specialinvoke $r9.<javax.mail.internet.InternetHeaders: void <init>(java.io.InputStream)>($r4);

     label4:
        goto label6;

     label5:
        $r7 := @caughtexception;

        $r10 = new java.lang.RuntimeException;

        specialinvoke $r10.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r7);

        throw $r10;

     label6:
        $r5 = specialinvoke r0.<org.apache.cxf.attachment.AttachmentDeserializer: org.apache.cxf.message.Attachment createAttachment(javax.mail.internet.InternetHeaders)>($r9);

        $r6 = (org.apache.cxf.attachment.AttachmentImpl) $r5;

        return $r6;

        catch javax.mail.MessagingException from label3 to label4 with label5;
    }

    private void cacheStreamedAttachments() throws java.io.IOException
    {
        org.apache.cxf.attachment.AttachmentDataSource r9;
        org.apache.cxf.attachment.DelegatingInputStream $r8, $r12, $r14;
        javax.activation.DataHandler $r4;
        org.apache.cxf.attachment.AttachmentDeserializer r0;
        java.util.ArrayList $r15;
        org.apache.cxf.message.Attachment r3;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.util.Iterator $r18;
        org.apache.cxf.message.Message $r10;
        org.apache.cxf.attachment.LazyAttachmentCollection $r16;
        java.util.List $r17;
        javax.activation.DataSource $r5;
        java.lang.Object $r2;
        java.io.InputStream $r1, $r6, $r7, $r11, $r13;

        r0 := @this: org.apache.cxf.attachment.AttachmentDeserializer;

        $r1 = r0.<org.apache.cxf.attachment.AttachmentDeserializer: java.io.InputStream body>;

        $z0 = $r1 instanceof org.apache.cxf.attachment.DelegatingInputStream;

        if $z0 == 0 goto label1;

        $r11 = r0.<org.apache.cxf.attachment.AttachmentDeserializer: java.io.InputStream body>;

        $r12 = (org.apache.cxf.attachment.DelegatingInputStream) $r11;

        $z4 = virtualinvoke $r12.<org.apache.cxf.attachment.DelegatingInputStream: boolean isClosed()>();

        if $z4 != 0 goto label1;

        $r13 = r0.<org.apache.cxf.attachment.AttachmentDeserializer: java.io.InputStream body>;

        $r14 = (org.apache.cxf.attachment.DelegatingInputStream) $r13;

        specialinvoke r0.<org.apache.cxf.attachment.AttachmentDeserializer: void cache(org.apache.cxf.attachment.DelegatingInputStream,boolean)>($r14, 1);

     label1:
        $r15 = new java.util.ArrayList;

        $r16 = r0.<org.apache.cxf.attachment.AttachmentDeserializer: org.apache.cxf.attachment.LazyAttachmentCollection attachments>;

        $r17 = virtualinvoke $r16.<org.apache.cxf.attachment.LazyAttachmentCollection: java.util.List getLoadedAttachments()>();

        specialinvoke $r15.<java.util.ArrayList: void <init>(java.util.Collection)>($r17);

        $r18 = interfaceinvoke $r15.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z5 = interfaceinvoke $r18.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label6;

        $r2 = interfaceinvoke $r18.<java.util.Iterator: java.lang.Object next()>();

        r3 = (org.apache.cxf.message.Attachment) $r2;

        $r4 = interfaceinvoke r3.<org.apache.cxf.message.Attachment: javax.activation.DataHandler getDataHandler()>();

        $r5 = virtualinvoke $r4.<javax.activation.DataHandler: javax.activation.DataSource getDataSource()>();

        $z1 = $r5 instanceof org.apache.cxf.attachment.AttachmentDataSource;

        if $z1 == 0 goto label4;

        r9 = (org.apache.cxf.attachment.AttachmentDataSource) $r5;

        $z3 = virtualinvoke r9.<org.apache.cxf.attachment.AttachmentDataSource: boolean isCached()>();

        if $z3 != 0 goto label3;

        $r10 = r0.<org.apache.cxf.attachment.AttachmentDeserializer: org.apache.cxf.message.Message message>;

        virtualinvoke r9.<org.apache.cxf.attachment.AttachmentDataSource: void cache(org.apache.cxf.message.Message)>($r10);

     label3:
        goto label5;

     label4:
        $r6 = interfaceinvoke $r5.<javax.activation.DataSource: java.io.InputStream getInputStream()>();

        $z2 = $r6 instanceof org.apache.cxf.attachment.DelegatingInputStream;

        if $z2 == 0 goto label5;

        $r7 = interfaceinvoke $r5.<javax.activation.DataSource: java.io.InputStream getInputStream()>();

        $r8 = (org.apache.cxf.attachment.DelegatingInputStream) $r7;

        specialinvoke r0.<org.apache.cxf.attachment.AttachmentDeserializer: void cache(org.apache.cxf.attachment.DelegatingInputStream,boolean)>($r8, 0);

     label5:
        goto label2;

     label6:
        return;
    }

    private void cache(org.apache.cxf.attachment.DelegatingInputStream, boolean) throws java.io.IOException
    {
        java.lang.Throwable $r8;
        org.apache.cxf.message.Message $r6;
        java.util.Set $r2, $r3;
        org.apache.cxf.attachment.DelegatingInputStream r1;
        org.apache.cxf.attachment.AttachmentDeserializer r0;
        org.apache.cxf.io.CachedOutputStream $r5, r9;
        boolean $z0, z1;
        java.io.InputStream $r4, $r7;

        r0 := @this: org.apache.cxf.attachment.AttachmentDeserializer;

        r1 := @parameter0: org.apache.cxf.attachment.DelegatingInputStream;

        z1 := @parameter1: boolean;

        $r2 = r0.<org.apache.cxf.attachment.AttachmentDeserializer: java.util.Set loaded>;

        $z0 = interfaceinvoke $r2.<java.util.Set: boolean contains(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        return;

     label1:
        $r3 = r0.<org.apache.cxf.attachment.AttachmentDeserializer: java.util.Set loaded>;

        interfaceinvoke $r3.<java.util.Set: boolean add(java.lang.Object)>(r1);

        r9 = null;

        $r4 = virtualinvoke r1.<org.apache.cxf.attachment.DelegatingInputStream: java.io.InputStream getInputStream()>();

     label2:
        $r5 = new org.apache.cxf.io.CachedOutputStream;

        specialinvoke $r5.<org.apache.cxf.io.CachedOutputStream: void <init>()>();

        r9 = $r5;

        $r6 = r0.<org.apache.cxf.attachment.AttachmentDeserializer: org.apache.cxf.message.Message message>;

        staticinvoke <org.apache.cxf.attachment.AttachmentUtil: void setStreamedAttachmentProperties(org.apache.cxf.message.Message,org.apache.cxf.io.CachedOutputStream)>($r6, $r5);

        staticinvoke <org.apache.cxf.helpers.IOUtils: int copy(java.io.InputStream,java.io.OutputStream)>(r1, $r5);

        $r7 = virtualinvoke $r5.<org.apache.cxf.io.CachedOutputStream: java.io.InputStream getInputStream()>();

        virtualinvoke r1.<org.apache.cxf.attachment.DelegatingInputStream: void setInputStream(java.io.InputStream)>($r7);

        virtualinvoke $r4.<java.io.InputStream: void close()>();

     label3:
        if $r5 == null goto label7;

        virtualinvoke $r5.<org.apache.cxf.io.CachedOutputStream: void close()>();

        goto label7;

     label4:
        $r8 := @caughtexception;

     label5:
        if r9 == null goto label6;

        virtualinvoke r9.<org.apache.cxf.io.CachedOutputStream: void close()>();

     label6:
        throw $r8;

     label7:
        return;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    private static boolean readTillFirstBoundary(java.io.PushbackInputStream, byte[]) throws java.io.IOException
    {
        byte[] r1;
        java.io.PushbackInputStream r0;
        byte $b2, $b3, $b5, $b6;
        int $i0, $i1, $i4, $i7, i8, i9, $i10, $i12, $i13, $i14, $i16, $i17, $i18, $i20;
        java.io.IOException $r3;

        r0 := @parameter0: java.io.PushbackInputStream;

        r1 := @parameter1: byte[];

        $i0 = virtualinvoke r0.<java.io.PushbackInputStream: int read()>();

        i8 = $i0;

        virtualinvoke r0.<java.io.PushbackInputStream: void unread(int)>($i0);

     label1:
        $i12 = (int) -1;

        if i8 == $i12 goto label7;

        $i1 = virtualinvoke r0.<java.io.PushbackInputStream: int read()>();

        i8 = $i1;

        $b3 = (byte) $i1;

        $b2 = r1[0];

        $i13 = (int) $b3;

        $i14 = (int) $b2;

        if $i13 != $i14 goto label1;

        i9 = 0;

     label2:
        $i16 = (int) -1;

        if i8 == $i16 goto label4;

        $i4 = lengthof r1;

        if i9 >= $i4 goto label4;

        $b6 = (byte) i8;

        $b5 = r1[i9];

        $i17 = (int) $b6;

        $i18 = (int) $b5;

        if $i17 != $i18 goto label4;

        $i7 = virtualinvoke r0.<java.io.PushbackInputStream: int read()>();

        i8 = $i7;

        $i20 = (int) -1;

        if $i7 != $i20 goto label3;

        $r3 = new java.io.IOException;

        specialinvoke $r3.<java.io.IOException: void <init>(java.lang.String)>("Unexpected End while searching for first Mime Boundary");

        throw $r3;

     label3:
        i9 = i9 + 1;

        goto label2;

     label4:
        $i10 = lengthof r1;

        if i9 != $i10 goto label6;

        if i8 != 13 goto label5;

        virtualinvoke r0.<java.io.PushbackInputStream: int read()>();

     label5:
        return 1;

     label6:
        goto label1;

     label7:
        return 0;
    }

    private org.apache.cxf.message.Attachment createAttachment(javax.mail.internet.InternetHeaders) throws java.io.IOException
    {
        byte[] $r3;
        java.io.PushbackInputStream $r4;
        org.apache.cxf.attachment.DelegatingInputStream $r0;
        org.apache.cxf.attachment.AttachmentDeserializer r2;
        org.apache.cxf.message.Attachment $r6;
        javax.mail.internet.InternetHeaders r5;
        int $i0, $i1, $i2;
        org.apache.cxf.attachment.MimeBodyPartInputStream $r1;

        r2 := @this: org.apache.cxf.attachment.AttachmentDeserializer;

        r5 := @parameter0: javax.mail.internet.InternetHeaders;

        $r0 = new org.apache.cxf.attachment.DelegatingInputStream;

        $r1 = new org.apache.cxf.attachment.MimeBodyPartInputStream;

        $r4 = r2.<org.apache.cxf.attachment.AttachmentDeserializer: java.io.PushbackInputStream stream>;

        $r3 = r2.<org.apache.cxf.attachment.AttachmentDeserializer: byte[] boundary>;

        $i0 = r2.<org.apache.cxf.attachment.AttachmentDeserializer: int pbAmount>;

        specialinvoke $r1.<org.apache.cxf.attachment.MimeBodyPartInputStream: void <init>(java.io.PushbackInputStream,byte[],int)>($r4, $r3, $i0);

        specialinvoke $r0.<org.apache.cxf.attachment.DelegatingInputStream: void <init>(java.io.InputStream,org.apache.cxf.attachment.AttachmentDeserializer)>($r1, r2);

        $i1 = r2.<org.apache.cxf.attachment.AttachmentDeserializer: int createCount>;

        $i2 = $i1 + 1;

        r2.<org.apache.cxf.attachment.AttachmentDeserializer: int createCount> = $i2;

        $r6 = staticinvoke <org.apache.cxf.attachment.AttachmentUtil: org.apache.cxf.message.Attachment createAttachment(java.io.InputStream,javax.mail.internet.InternetHeaders)>($r0, r5);

        return $r6;
    }

    public boolean isLazyLoading()
    {
        org.apache.cxf.attachment.AttachmentDeserializer r0;
        boolean $z0;

        r0 := @this: org.apache.cxf.attachment.AttachmentDeserializer;

        $z0 = r0.<org.apache.cxf.attachment.AttachmentDeserializer: boolean lazyLoading>;

        return $z0;
    }

    public void setLazyLoading(boolean)
    {
        org.apache.cxf.attachment.AttachmentDeserializer r0;
        boolean z0;

        r0 := @this: org.apache.cxf.attachment.AttachmentDeserializer;

        z0 := @parameter0: boolean;

        r0.<org.apache.cxf.attachment.AttachmentDeserializer: boolean lazyLoading> = z0;

        return;
    }

    public void markClosed(org.apache.cxf.attachment.DelegatingInputStream) throws java.io.IOException
    {
        java.io.PushbackInputStream $r2, $r3, $r4;
        org.apache.cxf.attachment.DelegatingInputStream r5;
        org.apache.cxf.attachment.AttachmentDeserializer r0;
        org.apache.cxf.attachment.LazyAttachmentCollection $r1;
        int $i0, $i1, $i2, $i3, i4, $i6;
        boolean $z0;

        r0 := @this: org.apache.cxf.attachment.AttachmentDeserializer;

        r5 := @parameter0: org.apache.cxf.attachment.DelegatingInputStream;

        $i0 = r0.<org.apache.cxf.attachment.AttachmentDeserializer: int closedCount>;

        $i1 = $i0 + 1;

        r0.<org.apache.cxf.attachment.AttachmentDeserializer: int closedCount> = $i1;

        $i3 = r0.<org.apache.cxf.attachment.AttachmentDeserializer: int closedCount>;

        $i2 = r0.<org.apache.cxf.attachment.AttachmentDeserializer: int createCount>;

        if $i3 != $i2 goto label3;

        $r1 = r0.<org.apache.cxf.attachment.AttachmentDeserializer: org.apache.cxf.attachment.LazyAttachmentCollection attachments>;

        $z0 = virtualinvoke $r1.<org.apache.cxf.attachment.LazyAttachmentCollection: boolean hasNext(boolean)>(0);

        if $z0 != 0 goto label3;

        $r2 = r0.<org.apache.cxf.attachment.AttachmentDeserializer: java.io.PushbackInputStream stream>;

        i4 = virtualinvoke $r2.<java.io.PushbackInputStream: int read()>();

     label1:
        $i6 = (int) -1;

        if i4 == $i6 goto label2;

        $r4 = r0.<org.apache.cxf.attachment.AttachmentDeserializer: java.io.PushbackInputStream stream>;

        i4 = virtualinvoke $r4.<java.io.PushbackInputStream: int read()>();

        goto label1;

     label2:
        $r3 = r0.<org.apache.cxf.attachment.AttachmentDeserializer: java.io.PushbackInputStream stream>;

        virtualinvoke $r3.<java.io.PushbackInputStream: void close()>();

        r0.<org.apache.cxf.attachment.AttachmentDeserializer: boolean closed> = 1;

     label3:
        return;
    }

    public boolean hasNext() throws java.io.IOException
    {
        java.io.PushbackInputStream $r1, $r2;
        int $i0, $i2;
        org.apache.cxf.attachment.AttachmentDeserializer r0;
        boolean $z0;

        r0 := @this: org.apache.cxf.attachment.AttachmentDeserializer;

        specialinvoke r0.<org.apache.cxf.attachment.AttachmentDeserializer: void cacheStreamedAttachments()>();

        $z0 = r0.<org.apache.cxf.attachment.AttachmentDeserializer: boolean closed>;

        if $z0 == 0 goto label1;

        return 0;

     label1:
        $r1 = r0.<org.apache.cxf.attachment.AttachmentDeserializer: java.io.PushbackInputStream stream>;

        $i0 = virtualinvoke $r1.<java.io.PushbackInputStream: int read()>();

        $i2 = (int) -1;

        if $i0 != $i2 goto label2;

        return 0;

     label2:
        $r2 = r0.<org.apache.cxf.attachment.AttachmentDeserializer: java.io.PushbackInputStream stream>;

        virtualinvoke $r2.<java.io.PushbackInputStream: void unread(int)>($i0);

        return 1;
    }

    static void <clinit>()
    {
        java.util.regex.Pattern $r0, $r1;

        <org.apache.cxf.attachment.AttachmentDeserializer: int THRESHOLD> = 102400;

        <org.apache.cxf.attachment.AttachmentDeserializer: java.lang.String ATTACHMENT_MAX_SIZE> = "attachment-max-size";

        <org.apache.cxf.attachment.AttachmentDeserializer: java.lang.String ATTACHMENT_MEMORY_THRESHOLD> = "attachment-memory-threshold";

        <org.apache.cxf.attachment.AttachmentDeserializer: java.lang.String ATTACHMENT_DIRECTORY> = "attachment-directory";

        $r0 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("boundary=\"?([^\";]*)");

        <org.apache.cxf.attachment.AttachmentDeserializer: java.util.regex.Pattern CONTENT_TYPE_BOUNDARY_PATTERN> = $r0;

        $r1 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String,int)>("^--(\\S*)$", 8);

        <org.apache.cxf.attachment.AttachmentDeserializer: java.util.regex.Pattern INPUT_STREAM_BOUNDARY_PATTERN> = $r1;

        return;
    }
}
