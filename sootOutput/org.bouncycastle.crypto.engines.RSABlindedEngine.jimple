public class org.bouncycastle.crypto.engines.RSABlindedEngine extends java.lang.Object implements org.bouncycastle.crypto.AsymmetricBlockCipher
{
    private static java.math.BigInteger ONE;
    private org.bouncycastle.crypto.engines.RSACoreEngine core;
    private org.bouncycastle.crypto.params.RSAKeyParameters key;
    private java.security.SecureRandom random;

    public void <init>()
    {
        org.bouncycastle.crypto.engines.RSACoreEngine $r1;
        org.bouncycastle.crypto.engines.RSABlindedEngine r0;

        r0 := @this: org.bouncycastle.crypto.engines.RSABlindedEngine;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new org.bouncycastle.crypto.engines.RSACoreEngine;

        specialinvoke $r1.<org.bouncycastle.crypto.engines.RSACoreEngine: void <init>()>();

        r0.<org.bouncycastle.crypto.engines.RSABlindedEngine: org.bouncycastle.crypto.engines.RSACoreEngine core> = $r1;

        return;
    }

    public void init(boolean, org.bouncycastle.crypto.CipherParameters)
    {
        org.bouncycastle.crypto.engines.RSABlindedEngine r0;
        java.security.SecureRandom $r4, $r8;
        org.bouncycastle.crypto.engines.RSACoreEngine $r2;
        org.bouncycastle.crypto.params.RSAKeyParameters $r3, $r7;
        org.bouncycastle.crypto.params.ParametersWithRandom r5;
        boolean z0, $z1;
        org.bouncycastle.crypto.CipherParameters r1, $r6;

        r0 := @this: org.bouncycastle.crypto.engines.RSABlindedEngine;

        z0 := @parameter0: boolean;

        r1 := @parameter1: org.bouncycastle.crypto.CipherParameters;

        $r2 = r0.<org.bouncycastle.crypto.engines.RSABlindedEngine: org.bouncycastle.crypto.engines.RSACoreEngine core>;

        virtualinvoke $r2.<org.bouncycastle.crypto.engines.RSACoreEngine: void init(boolean,org.bouncycastle.crypto.CipherParameters)>(z0, r1);

        $z1 = r1 instanceof org.bouncycastle.crypto.params.ParametersWithRandom;

        if $z1 == 0 goto label1;

        r5 = (org.bouncycastle.crypto.params.ParametersWithRandom) r1;

        $r6 = virtualinvoke r5.<org.bouncycastle.crypto.params.ParametersWithRandom: org.bouncycastle.crypto.CipherParameters getParameters()>();

        $r7 = (org.bouncycastle.crypto.params.RSAKeyParameters) $r6;

        r0.<org.bouncycastle.crypto.engines.RSABlindedEngine: org.bouncycastle.crypto.params.RSAKeyParameters key> = $r7;

        $r8 = virtualinvoke r5.<org.bouncycastle.crypto.params.ParametersWithRandom: java.security.SecureRandom getRandom()>();

        r0.<org.bouncycastle.crypto.engines.RSABlindedEngine: java.security.SecureRandom random> = $r8;

        goto label2;

     label1:
        $r3 = (org.bouncycastle.crypto.params.RSAKeyParameters) r1;

        r0.<org.bouncycastle.crypto.engines.RSABlindedEngine: org.bouncycastle.crypto.params.RSAKeyParameters key> = $r3;

        $r4 = new java.security.SecureRandom;

        specialinvoke $r4.<java.security.SecureRandom: void <init>()>();

        r0.<org.bouncycastle.crypto.engines.RSABlindedEngine: java.security.SecureRandom random> = $r4;

     label2:
        return;
    }

    public int getInputBlockSize()
    {
        int $i0;
        org.bouncycastle.crypto.engines.RSACoreEngine $r1;
        org.bouncycastle.crypto.engines.RSABlindedEngine r0;

        r0 := @this: org.bouncycastle.crypto.engines.RSABlindedEngine;

        $r1 = r0.<org.bouncycastle.crypto.engines.RSABlindedEngine: org.bouncycastle.crypto.engines.RSACoreEngine core>;

        $i0 = virtualinvoke $r1.<org.bouncycastle.crypto.engines.RSACoreEngine: int getInputBlockSize()>();

        return $i0;
    }

    public int getOutputBlockSize()
    {
        int $i0;
        org.bouncycastle.crypto.engines.RSACoreEngine $r1;
        org.bouncycastle.crypto.engines.RSABlindedEngine r0;

        r0 := @this: org.bouncycastle.crypto.engines.RSABlindedEngine;

        $r1 = r0.<org.bouncycastle.crypto.engines.RSABlindedEngine: org.bouncycastle.crypto.engines.RSACoreEngine core>;

        $i0 = virtualinvoke $r1.<org.bouncycastle.crypto.engines.RSACoreEngine: int getOutputBlockSize()>();

        return $i0;
    }

    public byte[] processBlock(byte[], int, int)
    {
        byte[] r2, $r8;
        java.lang.IllegalStateException $r26;
        org.bouncycastle.crypto.params.RSAPrivateCrtKeyParameters r10;
        java.security.SecureRandom $r17;
        org.bouncycastle.crypto.engines.RSACoreEngine $r3, $r6, $r7, $r12, $r22;
        org.bouncycastle.crypto.params.RSAKeyParameters $r1, $r5, $r9;
        int i0, i1;
        java.math.BigInteger $r4, $r11, $r13, $r14, $r15, $r16, $r18, $r19, $r20, $r21, $r23, $r24, $r25, r27;
        boolean $z0;
        org.bouncycastle.crypto.engines.RSABlindedEngine r0;

        r0 := @this: org.bouncycastle.crypto.engines.RSABlindedEngine;

        r2 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r1 = r0.<org.bouncycastle.crypto.engines.RSABlindedEngine: org.bouncycastle.crypto.params.RSAKeyParameters key>;

        if $r1 != null goto label1;

        $r26 = new java.lang.IllegalStateException;

        specialinvoke $r26.<java.lang.IllegalStateException: void <init>(java.lang.String)>("RSA engine not initialised");

        throw $r26;

     label1:
        $r3 = r0.<org.bouncycastle.crypto.engines.RSABlindedEngine: org.bouncycastle.crypto.engines.RSACoreEngine core>;

        $r4 = virtualinvoke $r3.<org.bouncycastle.crypto.engines.RSACoreEngine: java.math.BigInteger convertInput(byte[],int,int)>(r2, i0, i1);

        $r5 = r0.<org.bouncycastle.crypto.engines.RSABlindedEngine: org.bouncycastle.crypto.params.RSAKeyParameters key>;

        $z0 = $r5 instanceof org.bouncycastle.crypto.params.RSAPrivateCrtKeyParameters;

        if $z0 == 0 goto label4;

        $r9 = r0.<org.bouncycastle.crypto.engines.RSABlindedEngine: org.bouncycastle.crypto.params.RSAKeyParameters key>;

        r10 = (org.bouncycastle.crypto.params.RSAPrivateCrtKeyParameters) $r9;

        $r11 = virtualinvoke r10.<org.bouncycastle.crypto.params.RSAPrivateCrtKeyParameters: java.math.BigInteger getPublicExponent()>();

        if $r11 == null goto label2;

        $r13 = virtualinvoke r10.<org.bouncycastle.crypto.params.RSAPrivateCrtKeyParameters: java.math.BigInteger getModulus()>();

        $r15 = <org.bouncycastle.crypto.engines.RSABlindedEngine: java.math.BigInteger ONE>;

        $r14 = <org.bouncycastle.crypto.engines.RSABlindedEngine: java.math.BigInteger ONE>;

        $r16 = virtualinvoke $r13.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r14);

        $r17 = r0.<org.bouncycastle.crypto.engines.RSABlindedEngine: java.security.SecureRandom random>;

        $r18 = staticinvoke <org.bouncycastle.util.BigIntegers: java.math.BigInteger createRandomInRange(java.math.BigInteger,java.math.BigInteger,java.security.SecureRandom)>($r15, $r16, $r17);

        $r19 = virtualinvoke $r18.<java.math.BigInteger: java.math.BigInteger modPow(java.math.BigInteger,java.math.BigInteger)>($r11, $r13);

        $r20 = virtualinvoke $r19.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r4);

        $r21 = virtualinvoke $r20.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>($r13);

        $r22 = r0.<org.bouncycastle.crypto.engines.RSABlindedEngine: org.bouncycastle.crypto.engines.RSACoreEngine core>;

        $r23 = virtualinvoke $r22.<org.bouncycastle.crypto.engines.RSACoreEngine: java.math.BigInteger processBlock(java.math.BigInteger)>($r21);

        $r24 = virtualinvoke $r18.<java.math.BigInteger: java.math.BigInteger modInverse(java.math.BigInteger)>($r13);

        $r25 = virtualinvoke $r23.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r24);

        r27 = virtualinvoke $r25.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>($r13);

        goto label3;

     label2:
        $r12 = r0.<org.bouncycastle.crypto.engines.RSABlindedEngine: org.bouncycastle.crypto.engines.RSACoreEngine core>;

        r27 = virtualinvoke $r12.<org.bouncycastle.crypto.engines.RSACoreEngine: java.math.BigInteger processBlock(java.math.BigInteger)>($r4);

     label3:
        goto label5;

     label4:
        $r6 = r0.<org.bouncycastle.crypto.engines.RSABlindedEngine: org.bouncycastle.crypto.engines.RSACoreEngine core>;

        r27 = virtualinvoke $r6.<org.bouncycastle.crypto.engines.RSACoreEngine: java.math.BigInteger processBlock(java.math.BigInteger)>($r4);

     label5:
        $r7 = r0.<org.bouncycastle.crypto.engines.RSABlindedEngine: org.bouncycastle.crypto.engines.RSACoreEngine core>;

        $r8 = virtualinvoke $r7.<org.bouncycastle.crypto.engines.RSACoreEngine: byte[] convertOutput(java.math.BigInteger)>(r27);

        return $r8;
    }

    static void <clinit>()
    {
        java.math.BigInteger $r0;

        $r0 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(1L);

        <org.bouncycastle.crypto.engines.RSABlindedEngine: java.math.BigInteger ONE> = $r0;

        return;
    }
}
