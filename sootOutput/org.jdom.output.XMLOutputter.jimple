public class org.jdom.output.XMLOutputter extends java.lang.Object implements java.lang.Cloneable
{
    private static final java.lang.String CVS_ID;
    private org.jdom.output.Format userFormat;
    protected static final org.jdom.output.Format preserveFormat;
    protected org.jdom.output.Format currentFormat;
    private boolean escapeOutput;

    static void <clinit>()
    {
        org.jdom.output.Format $r0;

        <org.jdom.output.XMLOutputter: java.lang.String CVS_ID> = "@(#) $RCSfile: XMLOutputter.java,v $ $Revision: 1.112 $ $Date: 2004/09/01 06:08:18 $ $Name: jdom_1_0 $";

        $r0 = staticinvoke <org.jdom.output.Format: org.jdom.output.Format getRawFormat()>();

        <org.jdom.output.XMLOutputter: org.jdom.output.Format preserveFormat> = $r0;

        return;
    }

    public void <init>()
    {
        org.jdom.output.Format $r1, $r2;
        org.jdom.output.XMLOutputter r0;

        r0 := @this: org.jdom.output.XMLOutputter;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = staticinvoke <org.jdom.output.Format: org.jdom.output.Format getRawFormat()>();

        r0.<org.jdom.output.XMLOutputter: org.jdom.output.Format userFormat> = $r1;

        $r2 = r0.<org.jdom.output.XMLOutputter: org.jdom.output.Format userFormat>;

        r0.<org.jdom.output.XMLOutputter: org.jdom.output.Format currentFormat> = $r2;

        r0.<org.jdom.output.XMLOutputter: boolean escapeOutput> = 1;

        return;
    }

    public void <init>(org.jdom.output.Format)
    {
        org.jdom.output.Format $r1, $r2, r3, $r5, $r6;
        java.lang.Object $r4;
        org.jdom.output.XMLOutputter r0;

        r0 := @this: org.jdom.output.XMLOutputter;

        r3 := @parameter0: org.jdom.output.Format;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = staticinvoke <org.jdom.output.Format: org.jdom.output.Format getRawFormat()>();

        r0.<org.jdom.output.XMLOutputter: org.jdom.output.Format userFormat> = $r1;

        $r2 = r0.<org.jdom.output.XMLOutputter: org.jdom.output.Format userFormat>;

        r0.<org.jdom.output.XMLOutputter: org.jdom.output.Format currentFormat> = $r2;

        r0.<org.jdom.output.XMLOutputter: boolean escapeOutput> = 1;

        $r4 = virtualinvoke r3.<org.jdom.output.Format: java.lang.Object clone()>();

        $r5 = (org.jdom.output.Format) $r4;

        r0.<org.jdom.output.XMLOutputter: org.jdom.output.Format userFormat> = $r5;

        $r6 = r0.<org.jdom.output.XMLOutputter: org.jdom.output.Format userFormat>;

        r0.<org.jdom.output.XMLOutputter: org.jdom.output.Format currentFormat> = $r6;

        return;
    }

    public void <init>(org.jdom.output.XMLOutputter)
    {
        org.jdom.output.Format $r1, $r2, $r4, $r6, $r7;
        org.jdom.output.XMLOutputter r0, r3;
        java.lang.Object $r5;

        r0 := @this: org.jdom.output.XMLOutputter;

        r3 := @parameter0: org.jdom.output.XMLOutputter;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = staticinvoke <org.jdom.output.Format: org.jdom.output.Format getRawFormat()>();

        r0.<org.jdom.output.XMLOutputter: org.jdom.output.Format userFormat> = $r1;

        $r2 = r0.<org.jdom.output.XMLOutputter: org.jdom.output.Format userFormat>;

        r0.<org.jdom.output.XMLOutputter: org.jdom.output.Format currentFormat> = $r2;

        r0.<org.jdom.output.XMLOutputter: boolean escapeOutput> = 1;

        $r4 = r3.<org.jdom.output.XMLOutputter: org.jdom.output.Format userFormat>;

        $r5 = virtualinvoke $r4.<org.jdom.output.Format: java.lang.Object clone()>();

        $r6 = (org.jdom.output.Format) $r5;

        r0.<org.jdom.output.XMLOutputter: org.jdom.output.Format userFormat> = $r6;

        $r7 = r0.<org.jdom.output.XMLOutputter: org.jdom.output.Format userFormat>;

        r0.<org.jdom.output.XMLOutputter: org.jdom.output.Format currentFormat> = $r7;

        return;
    }

    public java.lang.Object clone()
    {
        java.lang.Object $r1;
        org.jdom.output.XMLOutputter r0;
        java.lang.RuntimeException $r3;
        java.lang.String $r4;
        java.lang.CloneNotSupportedException $r2;

        r0 := @this: org.jdom.output.XMLOutputter;

     label1:
        $r1 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>();

        return $r1;

     label2:
        $r2 := @caughtexception;

        $r3 = new java.lang.RuntimeException;

        $r4 = virtualinvoke $r2.<java.lang.Throwable: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.String)>($r4);

        throw $r3;

        catch java.lang.CloneNotSupportedException from label1 to label2 with label2;
    }

    private org.jdom.output.XMLOutputter$NamespaceStack createNamespaceStack()
    {
        org.jdom.output.XMLOutputter r1;
        org.jdom.output.XMLOutputter$NamespaceStack $r0;

        r1 := @this: org.jdom.output.XMLOutputter;

        $r0 = new org.jdom.output.XMLOutputter$NamespaceStack;

        specialinvoke $r0.<org.jdom.output.XMLOutputter$NamespaceStack: void <init>(org.jdom.output.XMLOutputter)>(r1);

        return $r0;
    }

    private boolean endsWithWhite(java.lang.String)
    {
        int $i0, $i1, $i2;
        char $c3;
        java.lang.String r0;
        org.jdom.output.XMLOutputter r1;
        boolean $z0;

        r1 := @this: org.jdom.output.XMLOutputter;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 <= 0 goto label1;

        $i1 = virtualinvoke r0.<java.lang.String: int length()>();

        $i2 = $i1 - 1;

        $c3 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i2);

        $z0 = staticinvoke <org.jdom.output.XMLOutputter: boolean isWhitespace(char)>($c3);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public java.lang.String escapeAttributeEntities(java.lang.String)
    {
        org.jdom.output.Format $r1;
        org.jdom.output.XMLOutputter r0;
        java.lang.StringBuffer $r8, $r9, r10, $r13, $r14;
        int $i1, $i2, i3, $i4, $i5, $i6;
        java.lang.String r3, $r5, $r7, r11, $r12;
        boolean $z0;
        char $c0;
        org.jdom.output.EscapeStrategy r2;

        r0 := @this: org.jdom.output.XMLOutputter;

        r3 := @parameter0: java.lang.String;

        $r1 = r0.<org.jdom.output.XMLOutputter: org.jdom.output.Format currentFormat>;

        r2 = $r1.<org.jdom.output.Format: org.jdom.output.EscapeStrategy escapeStrategy>;

        r10 = null;

        i3 = 0;

        goto label15;

     label01:
        $c0 = virtualinvoke r3.<java.lang.String: char charAt(int)>(i3);

        $i5 = (int) $c0;

        lookupswitch($i5)
        {
            case 9: goto label07;
            case 10: goto label08;
            case 13: goto label06;
            case 34: goto label04;
            case 38: goto label05;
            case 60: goto label02;
            case 62: goto label03;
            default: goto label09;
        };

     label02:
        r11 = "&lt;";

        goto label11;

     label03:
        r11 = "&gt;";

        goto label11;

     label04:
        r11 = "&quot;";

        goto label11;

     label05:
        r11 = "&amp;";

        goto label11;

     label06:
        r11 = "&#xD;";

        goto label11;

     label07:
        r11 = "&#x9;";

        goto label11;

     label08:
        r11 = "&#xA;";

        goto label11;

     label09:
        $z0 = interfaceinvoke r2.<org.jdom.output.EscapeStrategy: boolean shouldEscape(char)>($c0);

        if $z0 == 0 goto label10;

        $r13 = new java.lang.StringBuffer;

        specialinvoke $r13.<java.lang.StringBuffer: void <init>(java.lang.String)>("&#x");

        $i6 = (int) $c0;

        $r7 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i6);

        $r8 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(";");

        r11 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();

        goto label11;

     label10:
        r11 = null;

     label11:
        if r10 != null goto label12;

        if r11 == null goto label14;

        $r14 = new java.lang.StringBuffer;

        $i1 = virtualinvoke r3.<java.lang.String: int length()>();

        $i2 = $i1 + 20;

        specialinvoke $r14.<java.lang.StringBuffer: void <init>(int)>($i2);

        r10 = $r14;

        $r5 = virtualinvoke r3.<java.lang.String: java.lang.String substring(int,int)>(0, i3);

        virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r11);

        goto label14;

     label12:
        if r11 != null goto label13;

        virtualinvoke r10.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c0);

        goto label14;

     label13:
        virtualinvoke r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r11);

     label14:
        i3 = i3 + 1;

     label15:
        $i4 = virtualinvoke r3.<java.lang.String: int length()>();

        if i3 < $i4 goto label01;

        if r10 != null goto label16;

        $r12 = r3;

        goto label17;

     label16:
        $r12 = virtualinvoke r10.<java.lang.StringBuffer: java.lang.String toString()>();

     label17:
        return $r12;
    }

    public java.lang.String escapeElementEntities(java.lang.String)
    {
        org.jdom.output.Format $r1, $r6;
        org.jdom.output.XMLOutputter r0;
        java.lang.StringBuffer $r9, $r10, r11, $r14, $r15;
        int $i1, $i2, i3, $i4, $i5, $i6;
        java.lang.String r3, $r5, $r8, r12, $r13;
        boolean $z0, $z1;
        char $c0;
        org.jdom.output.EscapeStrategy r2;

        r0 := @this: org.jdom.output.XMLOutputter;

        r3 := @parameter0: java.lang.String;

        $z0 = r0.<org.jdom.output.XMLOutputter: boolean escapeOutput>;

        if $z0 != 0 goto label01;

        return r3;

     label01:
        $r1 = r0.<org.jdom.output.XMLOutputter: org.jdom.output.Format currentFormat>;

        r2 = $r1.<org.jdom.output.Format: org.jdom.output.EscapeStrategy escapeStrategy>;

        r11 = null;

        i3 = 0;

        goto label14;

     label02:
        $c0 = virtualinvoke r3.<java.lang.String: char charAt(int)>(i3);

        $i5 = (int) $c0;

        lookupswitch($i5)
        {
            case 10: goto label07;
            case 13: goto label06;
            case 38: goto label05;
            case 60: goto label03;
            case 62: goto label04;
            default: goto label08;
        };

     label03:
        r12 = "&lt;";

        goto label10;

     label04:
        r12 = "&gt;";

        goto label10;

     label05:
        r12 = "&amp;";

        goto label10;

     label06:
        r12 = "&#xD;";

        goto label10;

     label07:
        $r6 = r0.<org.jdom.output.XMLOutputter: org.jdom.output.Format currentFormat>;

        r12 = $r6.<org.jdom.output.Format: java.lang.String lineSeparator>;

        goto label10;

     label08:
        $z1 = interfaceinvoke r2.<org.jdom.output.EscapeStrategy: boolean shouldEscape(char)>($c0);

        if $z1 == 0 goto label09;

        $r14 = new java.lang.StringBuffer;

        specialinvoke $r14.<java.lang.StringBuffer: void <init>(java.lang.String)>("&#x");

        $i6 = (int) $c0;

        $r8 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i6);

        $r9 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(";");

        r12 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

        goto label10;

     label09:
        r12 = null;

     label10:
        if r11 != null goto label11;

        if r12 == null goto label13;

        $r15 = new java.lang.StringBuffer;

        $i1 = virtualinvoke r3.<java.lang.String: int length()>();

        $i2 = $i1 + 20;

        specialinvoke $r15.<java.lang.StringBuffer: void <init>(int)>($i2);

        r11 = $r15;

        $r5 = virtualinvoke r3.<java.lang.String: java.lang.String substring(int,int)>(0, i3);

        virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r12);

        goto label13;

     label11:
        if r12 != null goto label12;

        virtualinvoke r11.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c0);

        goto label13;

     label12:
        virtualinvoke r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r12);

     label13:
        i3 = i3 + 1;

     label14:
        $i4 = virtualinvoke r3.<java.lang.String: int length()>();

        if i3 < $i4 goto label02;

        if r11 != null goto label15;

        $r13 = r3;

        goto label16;

     label15:
        $r13 = virtualinvoke r11.<java.lang.StringBuffer: java.lang.String toString()>();

     label16:
        return $r13;
    }

    public org.jdom.output.Format getFormat()
    {
        org.jdom.output.Format $r1, $r3;
        java.lang.Object $r2;
        org.jdom.output.XMLOutputter r0;

        r0 := @this: org.jdom.output.XMLOutputter;

        $r1 = r0.<org.jdom.output.XMLOutputter: org.jdom.output.Format userFormat>;

        $r2 = virtualinvoke $r1.<org.jdom.output.Format: java.lang.Object clone()>();

        $r3 = (org.jdom.output.Format) $r2;

        return $r3;
    }

    private void indent(java.io.Writer, int) throws java.io.IOException
    {
        org.jdom.output.Format $r1, $r3, $r6;
        org.jdom.output.XMLOutputter r0;
        int i0, i1;
        java.io.Writer r5;
        java.lang.String $r2, $r4, $r7;
        boolean $z0;

        r0 := @this: org.jdom.output.XMLOutputter;

        r5 := @parameter0: java.io.Writer;

        i0 := @parameter1: int;

        $r1 = r0.<org.jdom.output.XMLOutputter: org.jdom.output.Format currentFormat>;

        $r2 = $r1.<org.jdom.output.Format: java.lang.String indent>;

        if $r2 == null goto label1;

        $r3 = r0.<org.jdom.output.XMLOutputter: org.jdom.output.Format currentFormat>;

        $r4 = $r3.<org.jdom.output.Format: java.lang.String indent>;

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z0 == 0 goto label2;

     label1:
        return;

     label2:
        i1 = 0;

        goto label4;

     label3:
        $r6 = r0.<org.jdom.output.XMLOutputter: org.jdom.output.Format currentFormat>;

        $r7 = $r6.<org.jdom.output.Format: java.lang.String indent>;

        virtualinvoke r5.<java.io.Writer: void write(java.lang.String)>($r7);

        i1 = i1 + 1;

     label4:
        if i1 < i0 goto label3;

        return;
    }

    private boolean isAllWhitespace(java.lang.Object)
    {
        org.jdom.Text $r1;
        char $c1;
        org.jdom.output.XMLOutputter r2;
        int $i0, i2;
        java.lang.Object r0;
        java.lang.String r3;
        boolean $z0, $z1, $z2, $z3;

        r2 := @this: org.jdom.output.XMLOutputter;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof java.lang.String;

        if $z0 == 0 goto label1;

        r3 = (java.lang.String) r0;

        goto label4;

     label1:
        $z1 = r0 instanceof org.jdom.Text;

        if $z1 == 0 goto label2;

        $r1 = (org.jdom.Text) r0;

        r3 = virtualinvoke $r1.<org.jdom.Text: java.lang.String getText()>();

        goto label4;

     label2:
        $z2 = r0 instanceof org.jdom.EntityRef;

        if $z2 == 0 goto label3;

        return 0;

     label3:
        return 0;

     label4:
        i2 = 0;

        goto label7;

     label5:
        $c1 = virtualinvoke r3.<java.lang.String: char charAt(int)>(i2);

        $z3 = staticinvoke <org.jdom.output.XMLOutputter: boolean isWhitespace(char)>($c1);

        if $z3 != 0 goto label6;

        return 0;

     label6:
        i2 = i2 + 1;

     label7:
        $i0 = virtualinvoke r3.<java.lang.String: int length()>();

        if i2 < $i0 goto label5;

        return 1;
    }

    private static boolean isWhitespace(char)
    {
        int $i1, $i2, $i3, $i4;
        char c0;

        c0 := @parameter0: char;

        $i1 = (int) c0;

        if $i1 == 32 goto label1;

        $i2 = (int) c0;

        if $i2 == 10 goto label1;

        $i3 = (int) c0;

        if $i3 == 9 goto label1;

        $i4 = (int) c0;

        if $i4 != 13 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }

    private java.io.Writer makeWriter(java.io.OutputStream) throws java.io.UnsupportedEncodingException
    {
        java.io.OutputStream r0;
        java.io.Writer $r4;
        org.jdom.output.Format $r2;
        org.jdom.output.XMLOutputter r1;
        java.lang.String $r3;

        r1 := @this: org.jdom.output.XMLOutputter;

        r0 := @parameter0: java.io.OutputStream;

        $r2 = r1.<org.jdom.output.XMLOutputter: org.jdom.output.Format userFormat>;

        $r3 = $r2.<org.jdom.output.Format: java.lang.String encoding>;

        $r4 = staticinvoke <org.jdom.output.XMLOutputter: java.io.Writer makeWriter(java.io.OutputStream,java.lang.String)>(r0, $r3);

        return $r4;
    }

    private static java.io.Writer makeWriter(java.io.OutputStream, java.lang.String) throws java.io.UnsupportedEncodingException
    {
        java.io.OutputStream r4;
        java.io.BufferedWriter $r1;
        java.io.OutputStreamWriter $r2;
        java.lang.String $r0, r5;
        boolean $z0;
        java.io.BufferedOutputStream $r3;

        r4 := @parameter0: java.io.OutputStream;

        r5 := @parameter1: java.lang.String;

        $r0 = "UTF-8";

        $z0 = virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>(r5);

        if $z0 == 0 goto label1;

        r5 = "UTF8";

     label1:
        $r1 = new java.io.BufferedWriter;

        $r2 = new java.io.OutputStreamWriter;

        $r3 = new java.io.BufferedOutputStream;

        specialinvoke $r3.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>(r4);

        specialinvoke $r2.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.lang.String)>($r3, r5);

        specialinvoke $r1.<java.io.BufferedWriter: void <init>(java.io.Writer)>($r2);

        return $r1;
    }

    private void newline(java.io.Writer) throws java.io.IOException
    {
        java.io.Writer r3;
        org.jdom.output.Format $r1, $r4;
        org.jdom.output.XMLOutputter r0;
        java.lang.String $r2, $r5;

        r0 := @this: org.jdom.output.XMLOutputter;

        r3 := @parameter0: java.io.Writer;

        $r1 = r0.<org.jdom.output.XMLOutputter: org.jdom.output.Format currentFormat>;

        $r2 = $r1.<org.jdom.output.Format: java.lang.String indent>;

        if $r2 == null goto label1;

        $r4 = r0.<org.jdom.output.XMLOutputter: org.jdom.output.Format currentFormat>;

        $r5 = $r4.<org.jdom.output.Format: java.lang.String lineSeparator>;

        virtualinvoke r3.<java.io.Writer: void write(java.lang.String)>($r5);

     label1:
        return;
    }

    private static int nextNonText(java.util.List, int)
    {
        java.util.List r0;
        int $i0, i1, i2;
        java.lang.Object $r1;
        boolean $z0, $z1;

        r0 := @parameter0: java.util.List;

        i1 := @parameter1: int;

        if i1 >= 0 goto label1;

        i1 = 0;

     label1:
        i2 = i1;

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        goto label4;

     label2:
        $r1 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i2);

        $z0 = $r1 instanceof org.jdom.Text;

        if $z0 != 0 goto label3;

        $z1 = $r1 instanceof org.jdom.EntityRef;

        if $z1 != 0 goto label3;

        return i2;

     label3:
        i2 = i2 + 1;

     label4:
        if i2 < $i0 goto label2;

        return $i0;
    }

    public void output(java.util.List, java.io.OutputStream) throws java.io.IOException
    {
        java.io.OutputStream r1;
        java.util.List r3;
        java.io.Writer $r2;
        org.jdom.output.XMLOutputter r0;

        r0 := @this: org.jdom.output.XMLOutputter;

        r3 := @parameter0: java.util.List;

        r1 := @parameter1: java.io.OutputStream;

        $r2 = specialinvoke r0.<org.jdom.output.XMLOutputter: java.io.Writer makeWriter(java.io.OutputStream)>(r1);

        virtualinvoke r0.<org.jdom.output.XMLOutputter: void output(java.util.List,java.io.Writer)>(r3, $r2);

        return;
    }

    public void output(java.util.List, java.io.Writer) throws java.io.IOException
    {
        java.util.List r2;
        java.io.Writer r1;
        int $i0;
        org.jdom.output.XMLOutputter r0;
        org.jdom.output.XMLOutputter$NamespaceStack $r3;

        r0 := @this: org.jdom.output.XMLOutputter;

        r2 := @parameter0: java.util.List;

        r1 := @parameter1: java.io.Writer;

        $i0 = interfaceinvoke r2.<java.util.List: int size()>();

        $r3 = specialinvoke r0.<org.jdom.output.XMLOutputter: org.jdom.output.XMLOutputter$NamespaceStack createNamespaceStack()>();

        specialinvoke r0.<org.jdom.output.XMLOutputter: void printContentRange(java.io.Writer,java.util.List,int,int,int,org.jdom.output.XMLOutputter$NamespaceStack)>(r1, r2, 0, $i0, 0, $r3);

        virtualinvoke r1.<java.io.Writer: void flush()>();

        return;
    }

    public void output(org.jdom.CDATA, java.io.OutputStream) throws java.io.IOException
    {
        java.io.OutputStream r1;
        org.jdom.CDATA r3;
        java.io.Writer $r2;
        org.jdom.output.XMLOutputter r0;

        r0 := @this: org.jdom.output.XMLOutputter;

        r3 := @parameter0: org.jdom.CDATA;

        r1 := @parameter1: java.io.OutputStream;

        $r2 = specialinvoke r0.<org.jdom.output.XMLOutputter: java.io.Writer makeWriter(java.io.OutputStream)>(r1);

        virtualinvoke r0.<org.jdom.output.XMLOutputter: void output(org.jdom.CDATA,java.io.Writer)>(r3, $r2);

        return;
    }

    public void output(org.jdom.CDATA, java.io.Writer) throws java.io.IOException
    {
        java.io.Writer r1;
        org.jdom.CDATA r2;
        org.jdom.output.XMLOutputter r0;

        r0 := @this: org.jdom.output.XMLOutputter;

        r2 := @parameter0: org.jdom.CDATA;

        r1 := @parameter1: java.io.Writer;

        virtualinvoke r0.<org.jdom.output.XMLOutputter: void printCDATA(java.io.Writer,org.jdom.CDATA)>(r1, r2);

        virtualinvoke r1.<java.io.Writer: void flush()>();

        return;
    }

    public void output(org.jdom.Comment, java.io.OutputStream) throws java.io.IOException
    {
        java.io.OutputStream r1;
        org.jdom.Comment r3;
        java.io.Writer $r2;
        org.jdom.output.XMLOutputter r0;

        r0 := @this: org.jdom.output.XMLOutputter;

        r3 := @parameter0: org.jdom.Comment;

        r1 := @parameter1: java.io.OutputStream;

        $r2 = specialinvoke r0.<org.jdom.output.XMLOutputter: java.io.Writer makeWriter(java.io.OutputStream)>(r1);

        virtualinvoke r0.<org.jdom.output.XMLOutputter: void output(org.jdom.Comment,java.io.Writer)>(r3, $r2);

        return;
    }

    public void output(org.jdom.Comment, java.io.Writer) throws java.io.IOException
    {
        java.io.Writer r1;
        org.jdom.output.XMLOutputter r0;
        org.jdom.Comment r2;

        r0 := @this: org.jdom.output.XMLOutputter;

        r2 := @parameter0: org.jdom.Comment;

        r1 := @parameter1: java.io.Writer;

        virtualinvoke r0.<org.jdom.output.XMLOutputter: void printComment(java.io.Writer,org.jdom.Comment)>(r1, r2);

        virtualinvoke r1.<java.io.Writer: void flush()>();

        return;
    }

    public void output(org.jdom.DocType, java.io.OutputStream) throws java.io.IOException
    {
        java.io.OutputStream r1;
        java.io.Writer $r2;
        org.jdom.DocType r3;
        org.jdom.output.XMLOutputter r0;

        r0 := @this: org.jdom.output.XMLOutputter;

        r3 := @parameter0: org.jdom.DocType;

        r1 := @parameter1: java.io.OutputStream;

        $r2 = specialinvoke r0.<org.jdom.output.XMLOutputter: java.io.Writer makeWriter(java.io.OutputStream)>(r1);

        virtualinvoke r0.<org.jdom.output.XMLOutputter: void output(org.jdom.DocType,java.io.Writer)>(r3, $r2);

        return;
    }

    public void output(org.jdom.DocType, java.io.Writer) throws java.io.IOException
    {
        java.io.Writer r1;
        org.jdom.DocType r2;
        org.jdom.output.XMLOutputter r0;

        r0 := @this: org.jdom.output.XMLOutputter;

        r2 := @parameter0: org.jdom.DocType;

        r1 := @parameter1: java.io.Writer;

        virtualinvoke r0.<org.jdom.output.XMLOutputter: void printDocType(java.io.Writer,org.jdom.DocType)>(r1, r2);

        virtualinvoke r1.<java.io.Writer: void flush()>();

        return;
    }

    public void output(org.jdom.Document, java.io.OutputStream) throws java.io.IOException
    {
        java.io.OutputStream r1;
        org.jdom.Document r3;
        java.io.Writer $r2;
        org.jdom.output.XMLOutputter r0;

        r0 := @this: org.jdom.output.XMLOutputter;

        r3 := @parameter0: org.jdom.Document;

        r1 := @parameter1: java.io.OutputStream;

        $r2 = specialinvoke r0.<org.jdom.output.XMLOutputter: java.io.Writer makeWriter(java.io.OutputStream)>(r1);

        virtualinvoke r0.<org.jdom.output.XMLOutputter: void output(org.jdom.Document,java.io.Writer)>(r3, $r2);

        return;
    }

    public void output(org.jdom.Document, java.io.Writer) throws java.io.IOException
    {
        org.jdom.Comment $r11;
        org.jdom.output.Format $r3, $r8, $r14;
        org.jdom.output.XMLOutputter r0;
        org.jdom.output.XMLOutputter$NamespaceStack $r13;
        org.jdom.Document r2;
        int $i0, i1;
        org.jdom.DocType $r7;
        java.lang.String $r4, $r9, $r15;
        boolean $z0, $z1, $z2, $z3;
        org.jdom.ProcessingInstruction $r10;
        java.util.List $r5;
        java.io.Writer r1;
        java.lang.Object $r6;
        org.jdom.Element $r12;

        r0 := @this: org.jdom.output.XMLOutputter;

        r2 := @parameter0: org.jdom.Document;

        r1 := @parameter1: java.io.Writer;

        $r3 = r0.<org.jdom.output.XMLOutputter: org.jdom.output.Format userFormat>;

        $r4 = $r3.<org.jdom.output.Format: java.lang.String encoding>;

        virtualinvoke r0.<org.jdom.output.XMLOutputter: void printDeclaration(java.io.Writer,org.jdom.Document,java.lang.String)>(r1, r2, $r4);

        $r5 = virtualinvoke r2.<org.jdom.Document: java.util.List getContent()>();

        $i0 = interfaceinvoke $r5.<java.util.List: int size()>();

        i1 = 0;

        goto label6;

     label1:
        $r6 = interfaceinvoke $r5.<java.util.List: java.lang.Object get(int)>(i1);

        $z0 = $r6 instanceof org.jdom.Element;

        if $z0 == 0 goto label2;

        $r12 = virtualinvoke r2.<org.jdom.Document: org.jdom.Element getRootElement()>();

        $r13 = specialinvoke r0.<org.jdom.output.XMLOutputter: org.jdom.output.XMLOutputter$NamespaceStack createNamespaceStack()>();

        virtualinvoke r0.<org.jdom.output.XMLOutputter: void printElement(java.io.Writer,org.jdom.Element,int,org.jdom.output.XMLOutputter$NamespaceStack)>(r1, $r12, 0, $r13);

        goto label5;

     label2:
        $z1 = $r6 instanceof org.jdom.Comment;

        if $z1 == 0 goto label3;

        $r11 = (org.jdom.Comment) $r6;

        virtualinvoke r0.<org.jdom.output.XMLOutputter: void printComment(java.io.Writer,org.jdom.Comment)>(r1, $r11);

        goto label5;

     label3:
        $z2 = $r6 instanceof org.jdom.ProcessingInstruction;

        if $z2 == 0 goto label4;

        $r10 = (org.jdom.ProcessingInstruction) $r6;

        virtualinvoke r0.<org.jdom.output.XMLOutputter: void printProcessingInstruction(java.io.Writer,org.jdom.ProcessingInstruction)>(r1, $r10);

        goto label5;

     label4:
        $z3 = $r6 instanceof org.jdom.DocType;

        if $z3 == 0 goto label5;

        $r7 = virtualinvoke r2.<org.jdom.Document: org.jdom.DocType getDocType()>();

        virtualinvoke r0.<org.jdom.output.XMLOutputter: void printDocType(java.io.Writer,org.jdom.DocType)>(r1, $r7);

        $r8 = r0.<org.jdom.output.XMLOutputter: org.jdom.output.Format currentFormat>;

        $r9 = $r8.<org.jdom.output.Format: java.lang.String lineSeparator>;

        virtualinvoke r1.<java.io.Writer: void write(java.lang.String)>($r9);

     label5:
        specialinvoke r0.<org.jdom.output.XMLOutputter: void newline(java.io.Writer)>(r1);

        specialinvoke r0.<org.jdom.output.XMLOutputter: void indent(java.io.Writer,int)>(r1, 0);

        i1 = i1 + 1;

     label6:
        if i1 < $i0 goto label1;

        $r14 = r0.<org.jdom.output.XMLOutputter: org.jdom.output.Format currentFormat>;

        $r15 = $r14.<org.jdom.output.Format: java.lang.String lineSeparator>;

        virtualinvoke r1.<java.io.Writer: void write(java.lang.String)>($r15);

        virtualinvoke r1.<java.io.Writer: void flush()>();

        return;
    }

    public void output(org.jdom.Element, java.io.OutputStream) throws java.io.IOException
    {
        java.io.OutputStream r1;
        java.io.Writer $r2;
        org.jdom.output.XMLOutputter r0;
        org.jdom.Element r3;

        r0 := @this: org.jdom.output.XMLOutputter;

        r3 := @parameter0: org.jdom.Element;

        r1 := @parameter1: java.io.OutputStream;

        $r2 = specialinvoke r0.<org.jdom.output.XMLOutputter: java.io.Writer makeWriter(java.io.OutputStream)>(r1);

        virtualinvoke r0.<org.jdom.output.XMLOutputter: void output(org.jdom.Element,java.io.Writer)>(r3, $r2);

        return;
    }

    public void output(org.jdom.Element, java.io.Writer) throws java.io.IOException
    {
        java.io.Writer r1;
        org.jdom.output.XMLOutputter r0;
        org.jdom.Element r2;
        org.jdom.output.XMLOutputter$NamespaceStack $r3;

        r0 := @this: org.jdom.output.XMLOutputter;

        r2 := @parameter0: org.jdom.Element;

        r1 := @parameter1: java.io.Writer;

        $r3 = specialinvoke r0.<org.jdom.output.XMLOutputter: org.jdom.output.XMLOutputter$NamespaceStack createNamespaceStack()>();

        virtualinvoke r0.<org.jdom.output.XMLOutputter: void printElement(java.io.Writer,org.jdom.Element,int,org.jdom.output.XMLOutputter$NamespaceStack)>(r1, r2, 0, $r3);

        virtualinvoke r1.<java.io.Writer: void flush()>();

        return;
    }

    public void output(org.jdom.EntityRef, java.io.OutputStream) throws java.io.IOException
    {
        java.io.OutputStream r1;
        java.io.Writer $r2;
        org.jdom.EntityRef r3;
        org.jdom.output.XMLOutputter r0;

        r0 := @this: org.jdom.output.XMLOutputter;

        r3 := @parameter0: org.jdom.EntityRef;

        r1 := @parameter1: java.io.OutputStream;

        $r2 = specialinvoke r0.<org.jdom.output.XMLOutputter: java.io.Writer makeWriter(java.io.OutputStream)>(r1);

        virtualinvoke r0.<org.jdom.output.XMLOutputter: void output(org.jdom.EntityRef,java.io.Writer)>(r3, $r2);

        return;
    }

    public void output(org.jdom.EntityRef, java.io.Writer) throws java.io.IOException
    {
        java.io.Writer r1;
        org.jdom.EntityRef r2;
        org.jdom.output.XMLOutputter r0;

        r0 := @this: org.jdom.output.XMLOutputter;

        r2 := @parameter0: org.jdom.EntityRef;

        r1 := @parameter1: java.io.Writer;

        virtualinvoke r0.<org.jdom.output.XMLOutputter: void printEntityRef(java.io.Writer,org.jdom.EntityRef)>(r1, r2);

        virtualinvoke r1.<java.io.Writer: void flush()>();

        return;
    }

    public void output(org.jdom.ProcessingInstruction, java.io.OutputStream) throws java.io.IOException
    {
        java.io.OutputStream r1;
        org.jdom.ProcessingInstruction r3;
        java.io.Writer $r2;
        org.jdom.output.XMLOutputter r0;

        r0 := @this: org.jdom.output.XMLOutputter;

        r3 := @parameter0: org.jdom.ProcessingInstruction;

        r1 := @parameter1: java.io.OutputStream;

        $r2 = specialinvoke r0.<org.jdom.output.XMLOutputter: java.io.Writer makeWriter(java.io.OutputStream)>(r1);

        virtualinvoke r0.<org.jdom.output.XMLOutputter: void output(org.jdom.ProcessingInstruction,java.io.Writer)>(r3, $r2);

        return;
    }

    public void output(org.jdom.ProcessingInstruction, java.io.Writer) throws java.io.IOException
    {
        org.jdom.ProcessingInstruction r4;
        java.io.Writer r3;
        org.jdom.output.Format $r1, $r2, $r5;
        org.jdom.output.XMLOutputter r0;
        boolean z0;

        r0 := @this: org.jdom.output.XMLOutputter;

        r4 := @parameter0: org.jdom.ProcessingInstruction;

        r3 := @parameter1: java.io.Writer;

        $r1 = r0.<org.jdom.output.XMLOutputter: org.jdom.output.Format currentFormat>;

        z0 = $r1.<org.jdom.output.Format: boolean ignoreTrAXEscapingPIs>;

        $r2 = r0.<org.jdom.output.XMLOutputter: org.jdom.output.Format currentFormat>;

        virtualinvoke $r2.<org.jdom.output.Format: void setIgnoreTrAXEscapingPIs(boolean)>(1);

        virtualinvoke r0.<org.jdom.output.XMLOutputter: void printProcessingInstruction(java.io.Writer,org.jdom.ProcessingInstruction)>(r3, r4);

        $r5 = r0.<org.jdom.output.XMLOutputter: org.jdom.output.Format currentFormat>;

        virtualinvoke $r5.<org.jdom.output.Format: void setIgnoreTrAXEscapingPIs(boolean)>(z0);

        virtualinvoke r3.<java.io.Writer: void flush()>();

        return;
    }

    public void output(org.jdom.Text, java.io.OutputStream) throws java.io.IOException
    {
        java.io.OutputStream r1;
        java.io.Writer $r2;
        org.jdom.Text r3;
        org.jdom.output.XMLOutputter r0;

        r0 := @this: org.jdom.output.XMLOutputter;

        r3 := @parameter0: org.jdom.Text;

        r1 := @parameter1: java.io.OutputStream;

        $r2 = specialinvoke r0.<org.jdom.output.XMLOutputter: java.io.Writer makeWriter(java.io.OutputStream)>(r1);

        virtualinvoke r0.<org.jdom.output.XMLOutputter: void output(org.jdom.Text,java.io.Writer)>(r3, $r2);

        return;
    }

    public void output(org.jdom.Text, java.io.Writer) throws java.io.IOException
    {
        java.io.Writer r1;
        org.jdom.Text r2;
        org.jdom.output.XMLOutputter r0;

        r0 := @this: org.jdom.output.XMLOutputter;

        r2 := @parameter0: org.jdom.Text;

        r1 := @parameter1: java.io.Writer;

        virtualinvoke r0.<org.jdom.output.XMLOutputter: void printText(java.io.Writer,org.jdom.Text)>(r1, r2);

        virtualinvoke r1.<java.io.Writer: void flush()>();

        return;
    }

    public void outputElementContent(org.jdom.Element, java.io.OutputStream) throws java.io.IOException
    {
        java.io.OutputStream r1;
        java.io.Writer $r2;
        org.jdom.output.XMLOutputter r0;
        org.jdom.Element r3;

        r0 := @this: org.jdom.output.XMLOutputter;

        r3 := @parameter0: org.jdom.Element;

        r1 := @parameter1: java.io.OutputStream;

        $r2 = specialinvoke r0.<org.jdom.output.XMLOutputter: java.io.Writer makeWriter(java.io.OutputStream)>(r1);

        virtualinvoke r0.<org.jdom.output.XMLOutputter: void outputElementContent(org.jdom.Element,java.io.Writer)>(r3, $r2);

        return;
    }

    public void outputElementContent(org.jdom.Element, java.io.Writer) throws java.io.IOException
    {
        java.util.List $r1;
        java.io.Writer r3;
        int $i0;
        org.jdom.output.XMLOutputter r2;
        org.jdom.Element r0;
        org.jdom.output.XMLOutputter$NamespaceStack $r4;

        r2 := @this: org.jdom.output.XMLOutputter;

        r0 := @parameter0: org.jdom.Element;

        r3 := @parameter1: java.io.Writer;

        $r1 = virtualinvoke r0.<org.jdom.Element: java.util.List getContent()>();

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        $r4 = specialinvoke r2.<org.jdom.output.XMLOutputter: org.jdom.output.XMLOutputter$NamespaceStack createNamespaceStack()>();

        specialinvoke r2.<org.jdom.output.XMLOutputter: void printContentRange(java.io.Writer,java.util.List,int,int,int,org.jdom.output.XMLOutputter$NamespaceStack)>(r3, $r1, 0, $i0, 0, $r4);

        virtualinvoke r3.<java.io.Writer: void flush()>();

        return;
    }

    public java.lang.String outputString(java.util.List)
    {
        java.util.List r2;
        java.io.StringWriter $r0;
        java.io.IOException $r4;
        org.jdom.output.XMLOutputter r1;
        java.lang.String $r3;

        r1 := @this: org.jdom.output.XMLOutputter;

        r2 := @parameter0: java.util.List;

        $r0 = new java.io.StringWriter;

        specialinvoke $r0.<java.io.StringWriter: void <init>()>();

     label1:
        virtualinvoke r1.<org.jdom.output.XMLOutputter: void output(java.util.List,java.io.Writer)>(r2, $r0);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

     label4:
        $r3 = virtualinvoke $r0.<java.io.StringWriter: java.lang.String toString()>();

        return $r3;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public java.lang.String outputString(org.jdom.CDATA)
    {
        org.jdom.CDATA r2;
        java.io.StringWriter $r0;
        java.io.IOException $r4;
        org.jdom.output.XMLOutputter r1;
        java.lang.String $r3;

        r1 := @this: org.jdom.output.XMLOutputter;

        r2 := @parameter0: org.jdom.CDATA;

        $r0 = new java.io.StringWriter;

        specialinvoke $r0.<java.io.StringWriter: void <init>()>();

     label1:
        virtualinvoke r1.<org.jdom.output.XMLOutputter: void output(org.jdom.CDATA,java.io.Writer)>(r2, $r0);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

     label4:
        $r3 = virtualinvoke $r0.<java.io.StringWriter: java.lang.String toString()>();

        return $r3;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public java.lang.String outputString(org.jdom.Comment)
    {
        org.jdom.Comment r2;
        java.io.StringWriter $r0;
        java.io.IOException $r4;
        org.jdom.output.XMLOutputter r1;
        java.lang.String $r3;

        r1 := @this: org.jdom.output.XMLOutputter;

        r2 := @parameter0: org.jdom.Comment;

        $r0 = new java.io.StringWriter;

        specialinvoke $r0.<java.io.StringWriter: void <init>()>();

     label1:
        virtualinvoke r1.<org.jdom.output.XMLOutputter: void output(org.jdom.Comment,java.io.Writer)>(r2, $r0);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

     label4:
        $r3 = virtualinvoke $r0.<java.io.StringWriter: java.lang.String toString()>();

        return $r3;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public java.lang.String outputString(org.jdom.DocType)
    {
        java.io.StringWriter $r0;
        org.jdom.DocType r2;
        java.io.IOException $r4;
        org.jdom.output.XMLOutputter r1;
        java.lang.String $r3;

        r1 := @this: org.jdom.output.XMLOutputter;

        r2 := @parameter0: org.jdom.DocType;

        $r0 = new java.io.StringWriter;

        specialinvoke $r0.<java.io.StringWriter: void <init>()>();

     label1:
        virtualinvoke r1.<org.jdom.output.XMLOutputter: void output(org.jdom.DocType,java.io.Writer)>(r2, $r0);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

     label4:
        $r3 = virtualinvoke $r0.<java.io.StringWriter: java.lang.String toString()>();

        return $r3;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public java.lang.String outputString(org.jdom.Document)
    {
        org.jdom.Document r2;
        java.io.StringWriter $r0;
        java.io.IOException $r4;
        org.jdom.output.XMLOutputter r1;
        java.lang.String $r3;

        r1 := @this: org.jdom.output.XMLOutputter;

        r2 := @parameter0: org.jdom.Document;

        $r0 = new java.io.StringWriter;

        specialinvoke $r0.<java.io.StringWriter: void <init>()>();

     label1:
        virtualinvoke r1.<org.jdom.output.XMLOutputter: void output(org.jdom.Document,java.io.Writer)>(r2, $r0);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

     label4:
        $r3 = virtualinvoke $r0.<java.io.StringWriter: java.lang.String toString()>();

        return $r3;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public java.lang.String outputString(org.jdom.Element)
    {
        java.io.StringWriter $r0;
        java.io.IOException $r4;
        org.jdom.output.XMLOutputter r1;
        java.lang.String $r3;
        org.jdom.Element r2;

        r1 := @this: org.jdom.output.XMLOutputter;

        r2 := @parameter0: org.jdom.Element;

        $r0 = new java.io.StringWriter;

        specialinvoke $r0.<java.io.StringWriter: void <init>()>();

     label1:
        virtualinvoke r1.<org.jdom.output.XMLOutputter: void output(org.jdom.Element,java.io.Writer)>(r2, $r0);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

     label4:
        $r3 = virtualinvoke $r0.<java.io.StringWriter: java.lang.String toString()>();

        return $r3;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public java.lang.String outputString(org.jdom.EntityRef)
    {
        java.io.StringWriter $r0;
        org.jdom.EntityRef r2;
        java.io.IOException $r4;
        org.jdom.output.XMLOutputter r1;
        java.lang.String $r3;

        r1 := @this: org.jdom.output.XMLOutputter;

        r2 := @parameter0: org.jdom.EntityRef;

        $r0 = new java.io.StringWriter;

        specialinvoke $r0.<java.io.StringWriter: void <init>()>();

     label1:
        virtualinvoke r1.<org.jdom.output.XMLOutputter: void output(org.jdom.EntityRef,java.io.Writer)>(r2, $r0);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

     label4:
        $r3 = virtualinvoke $r0.<java.io.StringWriter: java.lang.String toString()>();

        return $r3;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public java.lang.String outputString(org.jdom.ProcessingInstruction)
    {
        org.jdom.ProcessingInstruction r2;
        java.io.StringWriter $r0;
        java.io.IOException $r4;
        org.jdom.output.XMLOutputter r1;
        java.lang.String $r3;

        r1 := @this: org.jdom.output.XMLOutputter;

        r2 := @parameter0: org.jdom.ProcessingInstruction;

        $r0 = new java.io.StringWriter;

        specialinvoke $r0.<java.io.StringWriter: void <init>()>();

     label1:
        virtualinvoke r1.<org.jdom.output.XMLOutputter: void output(org.jdom.ProcessingInstruction,java.io.Writer)>(r2, $r0);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

     label4:
        $r3 = virtualinvoke $r0.<java.io.StringWriter: java.lang.String toString()>();

        return $r3;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public java.lang.String outputString(org.jdom.Text)
    {
        java.io.StringWriter $r0;
        org.jdom.Text r2;
        java.io.IOException $r4;
        org.jdom.output.XMLOutputter r1;
        java.lang.String $r3;

        r1 := @this: org.jdom.output.XMLOutputter;

        r2 := @parameter0: org.jdom.Text;

        $r0 = new java.io.StringWriter;

        specialinvoke $r0.<java.io.StringWriter: void <init>()>();

     label1:
        virtualinvoke r1.<org.jdom.output.XMLOutputter: void output(org.jdom.Text,java.io.Writer)>(r2, $r0);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

     label4:
        $r3 = virtualinvoke $r0.<java.io.StringWriter: java.lang.String toString()>();

        return $r3;

        catch java.io.IOException from label1 to label2 with label3;
    }

    private void printAdditionalNamespaces(java.io.Writer, org.jdom.Element, org.jdom.output.XMLOutputter$NamespaceStack) throws java.io.IOException
    {
        org.jdom.output.XMLOutputter r4;
        org.jdom.output.XMLOutputter$NamespaceStack r6;
        java.util.List $r1;
        int $i0, i1;
        java.io.Writer r5;
        java.lang.Object $r2;
        org.jdom.Namespace r3;
        org.jdom.Element r0;

        r4 := @this: org.jdom.output.XMLOutputter;

        r5 := @parameter0: java.io.Writer;

        r0 := @parameter1: org.jdom.Element;

        r6 := @parameter2: org.jdom.output.XMLOutputter$NamespaceStack;

        $r1 = virtualinvoke r0.<org.jdom.Element: java.util.List getAdditionalNamespaces()>();

        if $r1 == null goto label3;

        i1 = 0;

        goto label2;

     label1:
        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i1);

        r3 = (org.jdom.Namespace) $r2;

        specialinvoke r4.<org.jdom.output.XMLOutputter: void printNamespace(java.io.Writer,org.jdom.Namespace,org.jdom.output.XMLOutputter$NamespaceStack)>(r5, r3, r6);

        i1 = i1 + 1;

     label2:
        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        if i1 < $i0 goto label1;

     label3:
        return;
    }

    protected void printAttributes(java.io.Writer, java.util.List, org.jdom.Element, org.jdom.output.XMLOutputter$NamespaceStack) throws java.io.IOException
    {
        org.jdom.Attribute r2;
        org.jdom.output.XMLOutputter r6;
        org.jdom.output.XMLOutputter$NamespaceStack r8;
        java.util.List r0;
        java.io.Writer r5;
        int i0, $i1;
        java.lang.Object $r1;
        org.jdom.Namespace $r3, $r4, $r7;
        java.lang.String $r10, $r11;
        org.jdom.Element r9;

        r6 := @this: org.jdom.output.XMLOutputter;

        r5 := @parameter0: java.io.Writer;

        r0 := @parameter1: java.util.List;

        r9 := @parameter2: org.jdom.Element;

        r8 := @parameter3: org.jdom.output.XMLOutputter$NamespaceStack;

        i0 = 0;

        goto label3;

     label1:
        $r1 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i0);

        r2 = (org.jdom.Attribute) $r1;

        $r3 = virtualinvoke r2.<org.jdom.Attribute: org.jdom.Namespace getNamespace()>();

        $r4 = <org.jdom.Namespace: org.jdom.Namespace NO_NAMESPACE>;

        if $r3 == $r4 goto label2;

        $r7 = <org.jdom.Namespace: org.jdom.Namespace XML_NAMESPACE>;

        if $r3 == $r7 goto label2;

        specialinvoke r6.<org.jdom.output.XMLOutputter: void printNamespace(java.io.Writer,org.jdom.Namespace,org.jdom.output.XMLOutputter$NamespaceStack)>(r5, $r3, r8);

     label2:
        virtualinvoke r5.<java.io.Writer: void write(java.lang.String)>(" ");

        specialinvoke r6.<org.jdom.output.XMLOutputter: void printQualifiedName(java.io.Writer,org.jdom.Attribute)>(r5, r2);

        virtualinvoke r5.<java.io.Writer: void write(java.lang.String)>("=");

        virtualinvoke r5.<java.io.Writer: void write(java.lang.String)>("\"");

        $r10 = virtualinvoke r2.<org.jdom.Attribute: java.lang.String getValue()>();

        $r11 = virtualinvoke r6.<org.jdom.output.XMLOutputter: java.lang.String escapeAttributeEntities(java.lang.String)>($r10);

        virtualinvoke r5.<java.io.Writer: void write(java.lang.String)>($r11);

        virtualinvoke r5.<java.io.Writer: void write(java.lang.String)>("\"");

        i0 = i0 + 1;

     label3:
        $i1 = interfaceinvoke r0.<java.util.List: int size()>();

        if i0 < $i1 goto label1;

        return;
    }

    protected void printCDATA(java.io.Writer, org.jdom.CDATA) throws java.io.IOException
    {
        org.jdom.output.Format$TextMode $r2, $r3, $r5, $r6;
        org.jdom.output.Format $r1, $r4;
        org.jdom.output.XMLOutputter r0;
        org.jdom.CDATA r7;
        java.io.Writer r8;
        java.lang.String $r9, $r10;

        r0 := @this: org.jdom.output.XMLOutputter;

        r8 := @parameter0: java.io.Writer;

        r7 := @parameter1: org.jdom.CDATA;

        $r1 = r0.<org.jdom.output.XMLOutputter: org.jdom.output.Format currentFormat>;

        $r3 = $r1.<org.jdom.output.Format: org.jdom.output.Format$TextMode mode>;

        $r2 = <org.jdom.output.Format$TextMode: org.jdom.output.Format$TextMode NORMALIZE>;

        if $r3 != $r2 goto label1;

        $r10 = virtualinvoke r7.<org.jdom.Text: java.lang.String getTextNormalize()>();

        goto label3;

     label1:
        $r4 = r0.<org.jdom.output.XMLOutputter: org.jdom.output.Format currentFormat>;

        $r6 = $r4.<org.jdom.output.Format: org.jdom.output.Format$TextMode mode>;

        $r5 = <org.jdom.output.Format$TextMode: org.jdom.output.Format$TextMode TRIM>;

        if $r6 != $r5 goto label2;

        $r9 = virtualinvoke r7.<org.jdom.Text: java.lang.String getText()>();

        $r10 = virtualinvoke $r9.<java.lang.String: java.lang.String trim()>();

        goto label3;

     label2:
        $r10 = virtualinvoke r7.<org.jdom.Text: java.lang.String getText()>();

     label3:
        virtualinvoke r8.<java.io.Writer: void write(java.lang.String)>("<![CDATA[");

        virtualinvoke r8.<java.io.Writer: void write(java.lang.String)>($r10);

        virtualinvoke r8.<java.io.Writer: void write(java.lang.String)>("]]>");

        return;
    }

    protected void printComment(java.io.Writer, org.jdom.Comment) throws java.io.IOException
    {
        org.jdom.Comment r1;
        java.io.Writer r0;
        java.lang.String $r2;
        org.jdom.output.XMLOutputter r3;

        r3 := @this: org.jdom.output.XMLOutputter;

        r0 := @parameter0: java.io.Writer;

        r1 := @parameter1: org.jdom.Comment;

        virtualinvoke r0.<java.io.Writer: void write(java.lang.String)>("<!--");

        $r2 = virtualinvoke r1.<org.jdom.Comment: java.lang.String getText()>();

        virtualinvoke r0.<java.io.Writer: void write(java.lang.String)>($r2);

        virtualinvoke r0.<java.io.Writer: void write(java.lang.String)>("-->");

        return;
    }

    private void printContentRange(java.io.Writer, java.util.List, int, int, int, org.jdom.output.XMLOutputter$NamespaceStack) throws java.io.IOException
    {
        org.jdom.Comment $r7;
        org.jdom.output.XMLOutputter r2;
        org.jdom.output.XMLOutputter$NamespaceStack r5;
        int i0, i1, $i2, $i3, i4, i5;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z7, $z8;
        org.jdom.ProcessingInstruction $r4;
        java.util.List r0;
        java.io.Writer r3;
        java.lang.Object $r1;
        org.jdom.Element $r6;

        r2 := @this: org.jdom.output.XMLOutputter;

        r3 := @parameter0: java.io.Writer;

        r0 := @parameter1: java.util.List;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        i4 := @parameter4: int;

        r5 := @parameter5: org.jdom.output.XMLOutputter$NamespaceStack;

        i5 = i0;

        goto label11;

     label01:
        if i5 != i0 goto label02;

        $z8 = 1;

        $z7 = 1;

        goto label03;

     label02:
        $z8 = 0;

        $z7 = 0;

     label03:
        z0 = $z8;

        $r1 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i5);

        $z1 = $r1 instanceof org.jdom.Text;

        if $z1 != 0 goto label04;

        $z2 = $r1 instanceof org.jdom.EntityRef;

        if $z2 == 0 goto label06;

     label04:
        $i2 = specialinvoke r2.<org.jdom.output.XMLOutputter: int skipLeadingWhite(java.util.List,int)>(r0, i5);

        $i3 = staticinvoke <org.jdom.output.XMLOutputter: int nextNonText(java.util.List,int)>(r0, $i2);

        i5 = $i3;

        if $i2 >= $i3 goto label11;

        if z0 != 0 goto label05;

        specialinvoke r2.<org.jdom.output.XMLOutputter: void newline(java.io.Writer)>(r3);

     label05:
        specialinvoke r2.<org.jdom.output.XMLOutputter: void indent(java.io.Writer,int)>(r3, i4);

        specialinvoke r2.<org.jdom.output.XMLOutputter: void printTextRange(java.io.Writer,java.util.List,int,int)>(r3, r0, $i2, $i3);

        goto label11;

     label06:
        if $z7 != 0 goto label07;

        specialinvoke r2.<org.jdom.output.XMLOutputter: void newline(java.io.Writer)>(r3);

     label07:
        specialinvoke r2.<org.jdom.output.XMLOutputter: void indent(java.io.Writer,int)>(r3, i4);

        $z3 = $r1 instanceof org.jdom.Comment;

        if $z3 == 0 goto label08;

        $r7 = (org.jdom.Comment) $r1;

        virtualinvoke r2.<org.jdom.output.XMLOutputter: void printComment(java.io.Writer,org.jdom.Comment)>(r3, $r7);

        goto label10;

     label08:
        $z4 = $r1 instanceof org.jdom.Element;

        if $z4 == 0 goto label09;

        $r6 = (org.jdom.Element) $r1;

        virtualinvoke r2.<org.jdom.output.XMLOutputter: void printElement(java.io.Writer,org.jdom.Element,int,org.jdom.output.XMLOutputter$NamespaceStack)>(r3, $r6, i4, r5);

        goto label10;

     label09:
        $z5 = $r1 instanceof org.jdom.ProcessingInstruction;

        if $z5 == 0 goto label10;

        $r4 = (org.jdom.ProcessingInstruction) $r1;

        virtualinvoke r2.<org.jdom.output.XMLOutputter: void printProcessingInstruction(java.io.Writer,org.jdom.ProcessingInstruction)>(r3, $r4);

     label10:
        i5 = i5 + 1;

     label11:
        if i5 < i1 goto label01;

        return;
    }

    protected void printDeclaration(java.io.Writer, org.jdom.Document, java.lang.String) throws java.io.IOException
    {
        org.jdom.output.Format $r1, $r3, $r4;
        org.jdom.output.XMLOutputter r0;
        org.jdom.Document r11;
        java.lang.StringBuffer $r6, $r8, $r9;
        java.io.Writer r2;
        java.lang.String $r5, r7, $r10;
        boolean $z0, $z1;

        r0 := @this: org.jdom.output.XMLOutputter;

        r2 := @parameter0: java.io.Writer;

        r11 := @parameter1: org.jdom.Document;

        r7 := @parameter2: java.lang.String;

        $r1 = r0.<org.jdom.output.XMLOutputter: org.jdom.output.Format userFormat>;

        $z0 = $r1.<org.jdom.output.Format: boolean omitDeclaration>;

        if $z0 != 0 goto label2;

        virtualinvoke r2.<java.io.Writer: void write(java.lang.String)>("<?xml version=\"1.0\"");

        $r3 = r0.<org.jdom.output.XMLOutputter: org.jdom.output.Format userFormat>;

        $z1 = $r3.<org.jdom.output.Format: boolean omitEncoding>;

        if $z1 != 0 goto label1;

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>(java.lang.String)>(" encoding=\"");

        $r8 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\"");

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r2.<java.io.Writer: void write(java.lang.String)>($r10);

     label1:
        virtualinvoke r2.<java.io.Writer: void write(java.lang.String)>("?>");

        $r4 = r0.<org.jdom.output.XMLOutputter: org.jdom.output.Format currentFormat>;

        $r5 = $r4.<org.jdom.output.Format: java.lang.String lineSeparator>;

        virtualinvoke r2.<java.io.Writer: void write(java.lang.String)>($r5);

     label2:
        return;
    }

    protected void printDocType(java.io.Writer, org.jdom.DocType) throws java.io.IOException
    {
        org.jdom.output.Format $r7;
        org.jdom.output.XMLOutputter r6;
        org.jdom.DocType r0;
        java.io.Writer r4;
        java.lang.String $r1, $r2, $r3, $r5, $r8, $r9;
        boolean $z0, z1;

        r6 := @this: org.jdom.output.XMLOutputter;

        r4 := @parameter0: java.io.Writer;

        r0 := @parameter1: org.jdom.DocType;

        $r1 = virtualinvoke r0.<org.jdom.DocType: java.lang.String getPublicID()>();

        $r2 = virtualinvoke r0.<org.jdom.DocType: java.lang.String getSystemID()>();

        $r3 = virtualinvoke r0.<org.jdom.DocType: java.lang.String getInternalSubset()>();

        z1 = 0;

        virtualinvoke r4.<java.io.Writer: void write(java.lang.String)>("<!DOCTYPE ");

        $r5 = virtualinvoke r0.<org.jdom.DocType: java.lang.String getElementName()>();

        virtualinvoke r4.<java.io.Writer: void write(java.lang.String)>($r5);

        if $r1 == null goto label1;

        virtualinvoke r4.<java.io.Writer: void write(java.lang.String)>(" PUBLIC \"");

        virtualinvoke r4.<java.io.Writer: void write(java.lang.String)>($r1);

        virtualinvoke r4.<java.io.Writer: void write(java.lang.String)>("\"");

        z1 = 1;

     label1:
        if $r2 == null goto label3;

        if z1 != 0 goto label2;

        virtualinvoke r4.<java.io.Writer: void write(java.lang.String)>(" SYSTEM");

     label2:
        virtualinvoke r4.<java.io.Writer: void write(java.lang.String)>(" \"");

        virtualinvoke r4.<java.io.Writer: void write(java.lang.String)>($r2);

        virtualinvoke r4.<java.io.Writer: void write(java.lang.String)>("\"");

     label3:
        if $r3 == null goto label4;

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z0 != 0 goto label4;

        virtualinvoke r4.<java.io.Writer: void write(java.lang.String)>(" [");

        $r7 = r6.<org.jdom.output.XMLOutputter: org.jdom.output.Format currentFormat>;

        $r8 = $r7.<org.jdom.output.Format: java.lang.String lineSeparator>;

        virtualinvoke r4.<java.io.Writer: void write(java.lang.String)>($r8);

        $r9 = virtualinvoke r0.<org.jdom.DocType: java.lang.String getInternalSubset()>();

        virtualinvoke r4.<java.io.Writer: void write(java.lang.String)>($r9);

        virtualinvoke r4.<java.io.Writer: void write(java.lang.String)>("]");

     label4:
        virtualinvoke r4.<java.io.Writer: void write(java.lang.String)>(">");

        return;
    }

    protected void printElement(java.io.Writer, org.jdom.Element, int, org.jdom.output.XMLOutputter$NamespaceStack) throws java.io.IOException
    {
        org.jdom.output.Format $r8, $r9, $r10, $r12;
        org.jdom.output.XMLOutputter r3;
        org.jdom.output.XMLOutputter$NamespaceStack r7;
        int $i0, $i1, $i2, i3, $i4, $i5, $i6;
        org.jdom.Namespace $r11;
        java.lang.String $r4, $r5, r13;
        boolean $z0, $z1, $z2;
        java.util.List $r1, $r2;
        java.io.Writer r6;
        org.jdom.Element r0;

        r3 := @this: org.jdom.output.XMLOutputter;

        r6 := @parameter0: java.io.Writer;

        r0 := @parameter1: org.jdom.Element;

        i3 := @parameter2: int;

        r7 := @parameter3: org.jdom.output.XMLOutputter$NamespaceStack;

        $r1 = virtualinvoke r0.<org.jdom.Element: java.util.List getAttributes()>();

        $r2 = virtualinvoke r0.<org.jdom.Element: java.util.List getContent()>();

        r13 = null;

        if $r1 == null goto label01;

        $r11 = <org.jdom.Namespace: org.jdom.Namespace XML_NAMESPACE>;

        r13 = virtualinvoke r0.<org.jdom.Element: java.lang.String getAttributeValue(java.lang.String,org.jdom.Namespace)>("space", $r11);

     label01:
        $r12 = r3.<org.jdom.output.XMLOutputter: org.jdom.output.Format currentFormat>;

        $r4 = "default";

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>(r13);

        if $z0 == 0 goto label02;

        $r10 = r3.<org.jdom.output.XMLOutputter: org.jdom.output.Format userFormat>;

        r3.<org.jdom.output.XMLOutputter: org.jdom.output.Format currentFormat> = $r10;

        goto label03;

     label02:
        $r5 = "preserve";

        $z1 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>(r13);

        if $z1 == 0 goto label03;

        $r9 = <org.jdom.output.XMLOutputter: org.jdom.output.Format preserveFormat>;

        r3.<org.jdom.output.XMLOutputter: org.jdom.output.Format currentFormat> = $r9;

     label03:
        virtualinvoke r6.<java.io.Writer: void write(java.lang.String)>("<");

        specialinvoke r3.<org.jdom.output.XMLOutputter: void printQualifiedName(java.io.Writer,org.jdom.Element)>(r6, r0);

        $i5 = virtualinvoke r7.<org.jdom.output.NamespaceStack: int size()>();

        specialinvoke r3.<org.jdom.output.XMLOutputter: void printElementNamespace(java.io.Writer,org.jdom.Element,org.jdom.output.XMLOutputter$NamespaceStack)>(r6, r0, r7);

        specialinvoke r3.<org.jdom.output.XMLOutputter: void printAdditionalNamespaces(java.io.Writer,org.jdom.Element,org.jdom.output.XMLOutputter$NamespaceStack)>(r6, r0, r7);

        if $r1 == null goto label04;

        virtualinvoke r3.<org.jdom.output.XMLOutputter: void printAttributes(java.io.Writer,java.util.List,org.jdom.Element,org.jdom.output.XMLOutputter$NamespaceStack)>(r6, $r1, r0, r7);

     label04:
        $i0 = specialinvoke r3.<org.jdom.output.XMLOutputter: int skipLeadingWhite(java.util.List,int)>($r2, 0);

        $i1 = interfaceinvoke $r2.<java.util.List: int size()>();

        if $i0 < $i1 goto label06;

        $r8 = r3.<org.jdom.output.XMLOutputter: org.jdom.output.Format currentFormat>;

        $z2 = $r8.<org.jdom.output.Format: boolean expandEmptyElements>;

        if $z2 == 0 goto label05;

        virtualinvoke r6.<java.io.Writer: void write(java.lang.String)>("></");

        specialinvoke r3.<org.jdom.output.XMLOutputter: void printQualifiedName(java.io.Writer,org.jdom.Element)>(r6, r0);

        virtualinvoke r6.<java.io.Writer: void write(java.lang.String)>(">");

        goto label10;

     label05:
        virtualinvoke r6.<java.io.Writer: void write(java.lang.String)>(" />");

        goto label10;

     label06:
        virtualinvoke r6.<java.io.Writer: void write(java.lang.String)>(">");

        $i2 = staticinvoke <org.jdom.output.XMLOutputter: int nextNonText(java.util.List,int)>($r2, $i0);

        if $i2 >= $i1 goto label07;

        specialinvoke r3.<org.jdom.output.XMLOutputter: void newline(java.io.Writer)>(r6);

        $i4 = i3 + 1;

        specialinvoke r3.<org.jdom.output.XMLOutputter: void printContentRange(java.io.Writer,java.util.List,int,int,int,org.jdom.output.XMLOutputter$NamespaceStack)>(r6, $r2, $i0, $i1, $i4, r7);

        specialinvoke r3.<org.jdom.output.XMLOutputter: void newline(java.io.Writer)>(r6);

        specialinvoke r3.<org.jdom.output.XMLOutputter: void indent(java.io.Writer,int)>(r6, i3);

        goto label08;

     label07:
        specialinvoke r3.<org.jdom.output.XMLOutputter: void printTextRange(java.io.Writer,java.util.List,int,int)>(r6, $r2, $i0, $i1);

     label08:
        virtualinvoke r6.<java.io.Writer: void write(java.lang.String)>("</");

        specialinvoke r3.<org.jdom.output.XMLOutputter: void printQualifiedName(java.io.Writer,org.jdom.Element)>(r6, r0);

        virtualinvoke r6.<java.io.Writer: void write(java.lang.String)>(">");

        goto label10;

     label09:
        virtualinvoke r7.<org.jdom.output.NamespaceStack: java.lang.String pop()>();

     label10:
        $i6 = virtualinvoke r7.<org.jdom.output.NamespaceStack: int size()>();

        if $i6 > $i5 goto label09;

        r3.<org.jdom.output.XMLOutputter: org.jdom.output.Format currentFormat> = $r12;

        return;
    }

    private void printElementNamespace(java.io.Writer, org.jdom.Element, org.jdom.output.XMLOutputter$NamespaceStack) throws java.io.IOException
    {
        org.jdom.output.XMLOutputter r4;
        org.jdom.output.XMLOutputter$NamespaceStack r6;
        java.io.Writer r5;
        org.jdom.Namespace $r1, $r2, $r3;
        java.lang.String $r7;
        org.jdom.Element r0;

        r4 := @this: org.jdom.output.XMLOutputter;

        r5 := @parameter0: java.io.Writer;

        r0 := @parameter1: org.jdom.Element;

        r6 := @parameter2: org.jdom.output.XMLOutputter$NamespaceStack;

        $r1 = virtualinvoke r0.<org.jdom.Element: org.jdom.Namespace getNamespace()>();

        $r2 = <org.jdom.Namespace: org.jdom.Namespace XML_NAMESPACE>;

        if $r1 != $r2 goto label1;

        return;

     label1:
        $r3 = <org.jdom.Namespace: org.jdom.Namespace NO_NAMESPACE>;

        if $r1 != $r3 goto label2;

        $r7 = virtualinvoke r6.<org.jdom.output.NamespaceStack: java.lang.String getURI(java.lang.String)>("");

        if $r7 == null goto label3;

     label2:
        specialinvoke r4.<org.jdom.output.XMLOutputter: void printNamespace(java.io.Writer,org.jdom.Namespace,org.jdom.output.XMLOutputter$NamespaceStack)>(r5, $r1, r6);

     label3:
        return;
    }

    protected void printEntityRef(java.io.Writer, org.jdom.EntityRef) throws java.io.IOException
    {
        java.io.Writer r0;
        org.jdom.EntityRef r1;
        java.lang.String $r2;
        org.jdom.output.XMLOutputter r3;

        r3 := @this: org.jdom.output.XMLOutputter;

        r0 := @parameter0: java.io.Writer;

        r1 := @parameter1: org.jdom.EntityRef;

        virtualinvoke r0.<java.io.Writer: void write(java.lang.String)>("&");

        $r2 = virtualinvoke r1.<org.jdom.EntityRef: java.lang.String getName()>();

        virtualinvoke r0.<java.io.Writer: void write(java.lang.String)>($r2);

        virtualinvoke r0.<java.io.Writer: void write(java.lang.String)>(";");

        return;
    }

    private void printNamespace(java.io.Writer, org.jdom.Namespace, org.jdom.output.XMLOutputter$NamespaceStack) throws java.io.IOException
    {
        org.jdom.output.XMLOutputter r6;
        org.jdom.output.XMLOutputter$NamespaceStack r3;
        java.io.Writer r5;
        org.jdom.Namespace r0;
        java.lang.String $r1, $r2, $r4;
        boolean $z0, $z1;

        r6 := @this: org.jdom.output.XMLOutputter;

        r5 := @parameter0: java.io.Writer;

        r0 := @parameter1: org.jdom.Namespace;

        r3 := @parameter2: org.jdom.output.XMLOutputter$NamespaceStack;

        $r1 = virtualinvoke r0.<org.jdom.Namespace: java.lang.String getPrefix()>();

        $r2 = virtualinvoke r0.<org.jdom.Namespace: java.lang.String getURI()>();

        $r4 = virtualinvoke r3.<org.jdom.output.NamespaceStack: java.lang.String getURI(java.lang.String)>($r1);

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label1;

        return;

     label1:
        virtualinvoke r5.<java.io.Writer: void write(java.lang.String)>(" xmlns");

        $z1 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z1 != 0 goto label2;

        virtualinvoke r5.<java.io.Writer: void write(java.lang.String)>(":");

        virtualinvoke r5.<java.io.Writer: void write(java.lang.String)>($r1);

     label2:
        virtualinvoke r5.<java.io.Writer: void write(java.lang.String)>("=\"");

        virtualinvoke r5.<java.io.Writer: void write(java.lang.String)>($r2);

        virtualinvoke r5.<java.io.Writer: void write(java.lang.String)>("\"");

        virtualinvoke r3.<org.jdom.output.NamespaceStack: void push(org.jdom.Namespace)>(r0);

        return;
    }

    protected void printProcessingInstruction(java.io.Writer, org.jdom.ProcessingInstruction) throws java.io.IOException
    {
        org.jdom.ProcessingInstruction r0;
        org.jdom.output.Format $r3;
        org.jdom.output.XMLOutputter r2;
        java.io.Writer r6;
        java.lang.String $r1, $r4, $r5;
        boolean $z0, $z1, $z2, $z3, z4;

        r2 := @this: org.jdom.output.XMLOutputter;

        r6 := @parameter0: java.io.Writer;

        r0 := @parameter1: org.jdom.ProcessingInstruction;

        $r1 = virtualinvoke r0.<org.jdom.ProcessingInstruction: java.lang.String getTarget()>();

        z4 = 0;

        $r3 = r2.<org.jdom.output.XMLOutputter: org.jdom.output.Format currentFormat>;

        $z0 = $r3.<org.jdom.output.Format: boolean ignoreTrAXEscapingPIs>;

        if $z0 != 0 goto label2;

        $z2 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("javax.xml.transform.disable-output-escaping");

        if $z2 == 0 goto label1;

        r2.<org.jdom.output.XMLOutputter: boolean escapeOutput> = 0;

        z4 = 1;

        goto label2;

     label1:
        $z3 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("javax.xml.transform.enable-output-escaping");

        if $z3 == 0 goto label2;

        r2.<org.jdom.output.XMLOutputter: boolean escapeOutput> = 1;

        z4 = 1;

     label2:
        if z4 != 0 goto label4;

        $r4 = virtualinvoke r0.<org.jdom.ProcessingInstruction: java.lang.String getData()>();

        $r5 = "";

        $z1 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z1 != 0 goto label3;

        virtualinvoke r6.<java.io.Writer: void write(java.lang.String)>("<?");

        virtualinvoke r6.<java.io.Writer: void write(java.lang.String)>($r1);

        virtualinvoke r6.<java.io.Writer: void write(java.lang.String)>(" ");

        virtualinvoke r6.<java.io.Writer: void write(java.lang.String)>($r4);

        virtualinvoke r6.<java.io.Writer: void write(java.lang.String)>("?>");

        goto label4;

     label3:
        virtualinvoke r6.<java.io.Writer: void write(java.lang.String)>("<?");

        virtualinvoke r6.<java.io.Writer: void write(java.lang.String)>($r1);

        virtualinvoke r6.<java.io.Writer: void write(java.lang.String)>("?>");

     label4:
        return;
    }

    private void printQualifiedName(java.io.Writer, org.jdom.Attribute) throws java.io.IOException
    {
        org.jdom.Attribute r0;
        org.jdom.output.XMLOutputter r6;
        java.io.Writer r3;
        org.jdom.Namespace $r1;
        java.lang.String $r2, $r4, $r5;
        boolean $z0;

        r6 := @this: org.jdom.output.XMLOutputter;

        r3 := @parameter0: java.io.Writer;

        r0 := @parameter1: org.jdom.Attribute;

        $r1 = virtualinvoke r0.<org.jdom.Attribute: org.jdom.Namespace getNamespace()>();

        $r2 = virtualinvoke $r1.<org.jdom.Namespace: java.lang.String getPrefix()>();

        if $r2 == null goto label1;

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z0 != 0 goto label1;

        virtualinvoke r3.<java.io.Writer: void write(java.lang.String)>($r2);

        virtualinvoke r3.<java.io.Writer: void write(int)>(58);

        $r5 = virtualinvoke r0.<org.jdom.Attribute: java.lang.String getName()>();

        virtualinvoke r3.<java.io.Writer: void write(java.lang.String)>($r5);

        goto label2;

     label1:
        $r4 = virtualinvoke r0.<org.jdom.Attribute: java.lang.String getName()>();

        virtualinvoke r3.<java.io.Writer: void write(java.lang.String)>($r4);

     label2:
        return;
    }

    private void printQualifiedName(java.io.Writer, org.jdom.Element) throws java.io.IOException
    {
        org.jdom.output.XMLOutputter r8;
        int $i0;
        java.io.Writer r3;
        org.jdom.Namespace $r1, $r4;
        java.lang.String $r2, $r5, $r6, $r7;
        org.jdom.Element r0;

        r8 := @this: org.jdom.output.XMLOutputter;

        r3 := @parameter0: java.io.Writer;

        r0 := @parameter1: org.jdom.Element;

        $r1 = virtualinvoke r0.<org.jdom.Element: org.jdom.Namespace getNamespace()>();

        $r2 = virtualinvoke $r1.<org.jdom.Namespace: java.lang.String getPrefix()>();

        $i0 = virtualinvoke $r2.<java.lang.String: int length()>();

        if $i0 != 0 goto label1;

        $r7 = virtualinvoke r0.<org.jdom.Element: java.lang.String getName()>();

        virtualinvoke r3.<java.io.Writer: void write(java.lang.String)>($r7);

        goto label2;

     label1:
        $r4 = virtualinvoke r0.<org.jdom.Element: org.jdom.Namespace getNamespace()>();

        $r5 = virtualinvoke $r4.<org.jdom.Namespace: java.lang.String getPrefix()>();

        virtualinvoke r3.<java.io.Writer: void write(java.lang.String)>($r5);

        virtualinvoke r3.<java.io.Writer: void write(int)>(58);

        $r6 = virtualinvoke r0.<org.jdom.Element: java.lang.String getName()>();

        virtualinvoke r3.<java.io.Writer: void write(java.lang.String)>($r6);

     label2:
        return;
    }

    private void printString(java.io.Writer, java.lang.String) throws java.io.IOException
    {
        org.jdom.output.Format$TextMode $r2, $r3, $r5, $r6;
        org.jdom.output.Format $r1, $r4;
        org.jdom.output.XMLOutputter r0;
        java.io.Writer r7;
        java.lang.String r8, $r9;

        r0 := @this: org.jdom.output.XMLOutputter;

        r7 := @parameter0: java.io.Writer;

        r8 := @parameter1: java.lang.String;

        $r1 = r0.<org.jdom.output.XMLOutputter: org.jdom.output.Format currentFormat>;

        $r3 = $r1.<org.jdom.output.Format: org.jdom.output.Format$TextMode mode>;

        $r2 = <org.jdom.output.Format$TextMode: org.jdom.output.Format$TextMode NORMALIZE>;

        if $r3 != $r2 goto label1;

        r8 = staticinvoke <org.jdom.Text: java.lang.String normalizeString(java.lang.String)>(r8);

        goto label2;

     label1:
        $r4 = r0.<org.jdom.output.XMLOutputter: org.jdom.output.Format currentFormat>;

        $r6 = $r4.<org.jdom.output.Format: org.jdom.output.Format$TextMode mode>;

        $r5 = <org.jdom.output.Format$TextMode: org.jdom.output.Format$TextMode TRIM>;

        if $r6 != $r5 goto label2;

        r8 = virtualinvoke r8.<java.lang.String: java.lang.String trim()>();

     label2:
        $r9 = virtualinvoke r0.<org.jdom.output.XMLOutputter: java.lang.String escapeElementEntities(java.lang.String)>(r8);

        virtualinvoke r7.<java.io.Writer: void write(java.lang.String)>($r9);

        return;
    }

    protected void printText(java.io.Writer, org.jdom.Text) throws java.io.IOException
    {
        org.jdom.output.Format$TextMode $r2, $r3, $r5, $r6;
        org.jdom.Text r7;
        org.jdom.output.Format $r1, $r4;
        org.jdom.output.XMLOutputter r0;
        java.io.Writer r8;
        java.lang.String $r9, $r10, $r11;

        r0 := @this: org.jdom.output.XMLOutputter;

        r8 := @parameter0: java.io.Writer;

        r7 := @parameter1: org.jdom.Text;

        $r1 = r0.<org.jdom.output.XMLOutputter: org.jdom.output.Format currentFormat>;

        $r3 = $r1.<org.jdom.output.Format: org.jdom.output.Format$TextMode mode>;

        $r2 = <org.jdom.output.Format$TextMode: org.jdom.output.Format$TextMode NORMALIZE>;

        if $r3 != $r2 goto label1;

        $r10 = virtualinvoke r7.<org.jdom.Text: java.lang.String getTextNormalize()>();

        goto label3;

     label1:
        $r4 = r0.<org.jdom.output.XMLOutputter: org.jdom.output.Format currentFormat>;

        $r6 = $r4.<org.jdom.output.Format: org.jdom.output.Format$TextMode mode>;

        $r5 = <org.jdom.output.Format$TextMode: org.jdom.output.Format$TextMode TRIM>;

        if $r6 != $r5 goto label2;

        $r9 = virtualinvoke r7.<org.jdom.Text: java.lang.String getText()>();

        $r10 = virtualinvoke $r9.<java.lang.String: java.lang.String trim()>();

        goto label3;

     label2:
        $r10 = virtualinvoke r7.<org.jdom.Text: java.lang.String getText()>();

     label3:
        $r11 = virtualinvoke r0.<org.jdom.output.XMLOutputter: java.lang.String escapeElementEntities(java.lang.String)>($r10);

        virtualinvoke r8.<java.io.Writer: void write(java.lang.String)>($r11);

        return;
    }

    private void printTextRange(java.io.Writer, java.util.List, int, int) throws java.io.IOException
    {
        java.lang.IllegalStateException $r3;
        org.jdom.output.XMLOutputter r0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        org.jdom.Text $r19;
        java.util.List r1;
        java.io.Writer r10;
        org.jdom.output.Format$TextMode $r14, $r15, $r17, $r18;
        org.jdom.output.Format $r13, $r16;
        org.jdom.CDATA $r12;
        java.lang.StringBuffer $r4, $r7, $r8;
        int $i0, $i1, $i2, i3, i4, i5;
        java.lang.String $r6, $r9, r20, r21;
        org.jdom.EntityRef $r5, $r11;
        java.lang.Object $r2;

        r0 := @this: org.jdom.output.XMLOutputter;

        r10 := @parameter0: java.io.Writer;

        r1 := @parameter1: java.util.List;

        i3 := @parameter2: int;

        i4 := @parameter3: int;

        r20 = null;

        $i0 = specialinvoke r0.<org.jdom.output.XMLOutputter: int skipLeadingWhite(java.util.List,int)>(r1, i3);

        $i1 = interfaceinvoke r1.<java.util.List: int size()>();

        if $i0 >= $i1 goto label14;

        $i2 = specialinvoke r0.<org.jdom.output.XMLOutputter: int skipTrailingWhite(java.util.List,int)>(r1, i4);

        i5 = $i0;

        goto label13;

     label01:
        $r2 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i5);

        $z0 = $r2 instanceof org.jdom.Text;

        if $z0 == 0 goto label02;

        $r19 = (org.jdom.Text) $r2;

        r21 = virtualinvoke $r19.<org.jdom.Text: java.lang.String getText()>();

        goto label04;

     label02:
        $z1 = $r2 instanceof org.jdom.EntityRef;

        if $z1 == 0 goto label03;

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>(java.lang.String)>("&");

        $r5 = (org.jdom.EntityRef) $r2;

        $r6 = virtualinvoke $r5.<org.jdom.EntityRef: java.lang.String getValue()>();

        $r7 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(";");

        r21 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        goto label04;

     label03:
        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Should see only CDATA, Text, or EntityRef");

        throw $r3;

     label04:
        if r21 == null goto label12;

        $r9 = "";

        $z2 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>(r21);

        if $z2 == 0 goto label05;

        goto label12;

     label05:
        if r20 == null goto label08;

        $r13 = r0.<org.jdom.output.XMLOutputter: org.jdom.output.Format currentFormat>;

        $r15 = $r13.<org.jdom.output.Format: org.jdom.output.Format$TextMode mode>;

        $r14 = <org.jdom.output.Format$TextMode: org.jdom.output.Format$TextMode NORMALIZE>;

        if $r15 == $r14 goto label06;

        $r16 = r0.<org.jdom.output.XMLOutputter: org.jdom.output.Format currentFormat>;

        $r18 = $r16.<org.jdom.output.Format: org.jdom.output.Format$TextMode mode>;

        $r17 = <org.jdom.output.Format$TextMode: org.jdom.output.Format$TextMode TRIM>;

        if $r18 != $r17 goto label08;

     label06:
        $z4 = specialinvoke r0.<org.jdom.output.XMLOutputter: boolean endsWithWhite(java.lang.String)>(r20);

        if $z4 != 0 goto label07;

        $z5 = specialinvoke r0.<org.jdom.output.XMLOutputter: boolean startsWithWhite(java.lang.String)>(r21);

        if $z5 == 0 goto label08;

     label07:
        virtualinvoke r10.<java.io.Writer: void write(java.lang.String)>(" ");

     label08:
        $z6 = $r2 instanceof org.jdom.CDATA;

        if $z6 == 0 goto label09;

        $r12 = (org.jdom.CDATA) $r2;

        virtualinvoke r0.<org.jdom.output.XMLOutputter: void printCDATA(java.io.Writer,org.jdom.CDATA)>(r10, $r12);

        goto label11;

     label09:
        $z3 = $r2 instanceof org.jdom.EntityRef;

        if $z3 == 0 goto label10;

        $r11 = (org.jdom.EntityRef) $r2;

        virtualinvoke r0.<org.jdom.output.XMLOutputter: void printEntityRef(java.io.Writer,org.jdom.EntityRef)>(r10, $r11);

        goto label11;

     label10:
        specialinvoke r0.<org.jdom.output.XMLOutputter: void printString(java.io.Writer,java.lang.String)>(r10, r21);

     label11:
        r20 = r21;

     label12:
        i5 = i5 + 1;

     label13:
        if i5 < $i2 goto label01;

     label14:
        return;
    }

    public void setFormat(org.jdom.output.Format)
    {
        org.jdom.output.Format r1, $r3, $r4;
        java.lang.Object $r2;
        org.jdom.output.XMLOutputter r0;

        r0 := @this: org.jdom.output.XMLOutputter;

        r1 := @parameter0: org.jdom.output.Format;

        $r2 = virtualinvoke r1.<org.jdom.output.Format: java.lang.Object clone()>();

        $r3 = (org.jdom.output.Format) $r2;

        r0.<org.jdom.output.XMLOutputter: org.jdom.output.Format userFormat> = $r3;

        $r4 = r0.<org.jdom.output.XMLOutputter: org.jdom.output.Format userFormat>;

        r0.<org.jdom.output.XMLOutputter: org.jdom.output.Format currentFormat> = $r4;

        return;
    }

    private int skipLeadingWhite(java.util.List, int)
    {
        org.jdom.output.Format$TextMode $r3, $r4, $r7, $r8, $r10, $r11;
        org.jdom.output.Format $r2, $r6, $r9;
        org.jdom.output.XMLOutputter r1;
        int $i0, i1, i2;
        boolean $z0;
        java.util.List r0;
        java.lang.Object $r5;

        r1 := @this: org.jdom.output.XMLOutputter;

        r0 := @parameter0: java.util.List;

        i1 := @parameter1: int;

        if i1 >= 0 goto label1;

        i1 = 0;

     label1:
        i2 = i1;

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        $r2 = r1.<org.jdom.output.XMLOutputter: org.jdom.output.Format currentFormat>;

        $r4 = $r2.<org.jdom.output.Format: org.jdom.output.Format$TextMode mode>;

        $r3 = <org.jdom.output.Format$TextMode: org.jdom.output.Format$TextMode TRIM_FULL_WHITE>;

        if $r4 == $r3 goto label4;

        $r6 = r1.<org.jdom.output.XMLOutputter: org.jdom.output.Format currentFormat>;

        $r8 = $r6.<org.jdom.output.Format: org.jdom.output.Format$TextMode mode>;

        $r7 = <org.jdom.output.Format$TextMode: org.jdom.output.Format$TextMode NORMALIZE>;

        if $r8 == $r7 goto label4;

        $r9 = r1.<org.jdom.output.XMLOutputter: org.jdom.output.Format currentFormat>;

        $r11 = $r9.<org.jdom.output.Format: org.jdom.output.Format$TextMode mode>;

        $r10 = <org.jdom.output.Format$TextMode: org.jdom.output.Format$TextMode TRIM>;

        if $r11 != $r10 goto label5;

        goto label4;

     label2:
        $r5 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i2);

        $z0 = specialinvoke r1.<org.jdom.output.XMLOutputter: boolean isAllWhitespace(java.lang.Object)>($r5);

        if $z0 != 0 goto label3;

        return i2;

     label3:
        i2 = i2 + 1;

     label4:
        if i2 < $i0 goto label2;

     label5:
        return i2;
    }

    private int skipTrailingWhite(java.util.List, int)
    {
        org.jdom.output.Format$TextMode $r3, $r4, $r7, $r8, $r10, $r11;
        org.jdom.output.Format $r2, $r6, $r9;
        org.jdom.output.XMLOutputter r1;
        int $i0, $i1, i2, i3, $i5;
        boolean $z0;
        java.util.List r0;
        java.lang.Object $r5;

        r1 := @this: org.jdom.output.XMLOutputter;

        r0 := @parameter0: java.util.List;

        i2 := @parameter1: int;

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        if i2 <= $i0 goto label1;

        i2 = $i0;

     label1:
        i3 = i2;

        $r2 = r1.<org.jdom.output.XMLOutputter: org.jdom.output.Format currentFormat>;

        $r4 = $r2.<org.jdom.output.Format: org.jdom.output.Format$TextMode mode>;

        $r3 = <org.jdom.output.Format$TextMode: org.jdom.output.Format$TextMode TRIM_FULL_WHITE>;

        if $r4 == $r3 goto label3;

        $r6 = r1.<org.jdom.output.XMLOutputter: org.jdom.output.Format currentFormat>;

        $r8 = $r6.<org.jdom.output.Format: org.jdom.output.Format$TextMode mode>;

        $r7 = <org.jdom.output.Format$TextMode: org.jdom.output.Format$TextMode NORMALIZE>;

        if $r8 == $r7 goto label3;

        $r9 = r1.<org.jdom.output.XMLOutputter: org.jdom.output.Format currentFormat>;

        $r11 = $r9.<org.jdom.output.Format: org.jdom.output.Format$TextMode mode>;

        $r10 = <org.jdom.output.Format$TextMode: org.jdom.output.Format$TextMode TRIM>;

        if $r11 != $r10 goto label4;

        goto label3;

     label2:
        $i1 = i3 - 1;

        $r5 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>($i1);

        $z0 = specialinvoke r1.<org.jdom.output.XMLOutputter: boolean isAllWhitespace(java.lang.Object)>($r5);

        if $z0 == 0 goto label4;

        $i5 = (int) -1;

        i3 = i3 + $i5;

     label3:
        if i3 >= 0 goto label2;

     label4:
        return i3;
    }

    private boolean startsWithWhite(java.lang.String)
    {
        int $i0;
        char $c1;
        java.lang.String r0;
        org.jdom.output.XMLOutputter r1;
        boolean $z0;

        r1 := @this: org.jdom.output.XMLOutputter;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 <= 0 goto label1;

        $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(0);

        $z0 = staticinvoke <org.jdom.output.XMLOutputter: boolean isWhitespace(char)>($c1);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public java.lang.String toString()
    {
        org.jdom.output.XMLOutputter r1;
        boolean $z0, $z1, $z2;
        org.jdom.output.Format$TextMode $r37;
        org.jdom.output.Format $r2, $r9, $r13, $r18, $r22, $r28, $r36, $r41;
        java.lang.StringBuffer $r5, $r6, $r10, $r11, $r12, $r15, $r16, $r17, $r19, $r20, $r21, $r24, $r25, $r26, $r27, $r29, $r30, $r31, $r33, $r34, $r35, $r38, $r39, $r43, $r44, $r45;
        int i1, $i2, $i3, $i4;
        java.lang.String $r3, $r7, $r14, $r23, $r32, $r40, $r42;
        char $c0;

        r1 := @this: org.jdom.output.XMLOutputter;

        $r43 = new java.lang.StringBuffer;

        specialinvoke $r43.<java.lang.StringBuffer: void <init>()>();

        i1 = 0;

        goto label7;

     label1:
        $r2 = r1.<org.jdom.output.XMLOutputter: org.jdom.output.Format userFormat>;

        $r3 = $r2.<org.jdom.output.Format: java.lang.String lineSeparator>;

        $c0 = virtualinvoke $r3.<java.lang.String: char charAt(int)>(i1);

        $i3 = (int) $c0;

        tableswitch($i3)
        {
            case 9: goto label4;
            case 10: goto label3;
            case 11: goto label5;
            case 12: goto label5;
            case 13: goto label2;
            default: goto label5;
        };

     label2:
        virtualinvoke $r43.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\\r");

        goto label6;

     label3:
        virtualinvoke $r43.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\\n");

        goto label6;

     label4:
        virtualinvoke $r43.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\\t");

        goto label6;

     label5:
        $r44 = new java.lang.StringBuffer;

        specialinvoke $r44.<java.lang.StringBuffer: void <init>(java.lang.String)>("[");

        $i4 = (int) $c0;

        $r5 = virtualinvoke $r44.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("]");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r43.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        goto label6;

     label6:
        i1 = i1 + 1;

     label7:
        $r41 = r1.<org.jdom.output.XMLOutputter: org.jdom.output.Format userFormat>;

        $r42 = $r41.<org.jdom.output.Format: java.lang.String lineSeparator>;

        $i2 = virtualinvoke $r42.<java.lang.String: int length()>();

        if i1 < $i2 goto label1;

        $r45 = new java.lang.StringBuffer;

        specialinvoke $r45.<java.lang.StringBuffer: void <init>(java.lang.String)>("XMLOutputter[omitDeclaration = ");

        $r9 = r1.<org.jdom.output.XMLOutputter: org.jdom.output.Format userFormat>;

        $z0 = $r9.<org.jdom.output.Format: boolean omitDeclaration>;

        $r10 = virtualinvoke $r45.<java.lang.StringBuffer: java.lang.StringBuffer append(boolean)>($z0);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("encoding = ");

        $r13 = r1.<org.jdom.output.XMLOutputter: org.jdom.output.Format userFormat>;

        $r14 = $r13.<org.jdom.output.Format: java.lang.String encoding>;

        $r15 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", ");

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("omitEncoding = ");

        $r18 = r1.<org.jdom.output.XMLOutputter: org.jdom.output.Format userFormat>;

        $z1 = $r18.<org.jdom.output.Format: boolean omitEncoding>;

        $r19 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(boolean)>($z1);

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", ");

        $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("indent = \'");

        $r22 = r1.<org.jdom.output.XMLOutputter: org.jdom.output.Format userFormat>;

        $r23 = $r22.<org.jdom.output.Format: java.lang.String indent>;

        $r24 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r23);

        $r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'");

        $r26 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", ");

        $r27 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("expandEmptyElements = ");

        $r28 = r1.<org.jdom.output.XMLOutputter: org.jdom.output.Format userFormat>;

        $z2 = $r28.<org.jdom.output.Format: boolean expandEmptyElements>;

        $r29 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.StringBuffer append(boolean)>($z2);

        $r30 = virtualinvoke $r29.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", ");

        $r31 = virtualinvoke $r30.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("lineSeparator = \'");

        $r32 = virtualinvoke $r43.<java.lang.StringBuffer: java.lang.String toString()>();

        $r33 = virtualinvoke $r31.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r32);

        $r34 = virtualinvoke $r33.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\', ");

        $r35 = virtualinvoke $r34.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("textMode = ");

        $r36 = r1.<org.jdom.output.XMLOutputter: org.jdom.output.Format userFormat>;

        $r37 = $r36.<org.jdom.output.Format: org.jdom.output.Format$TextMode mode>;

        $r38 = virtualinvoke $r35.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r37);

        $r39 = virtualinvoke $r38.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("]");

        $r40 = virtualinvoke $r39.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r40;
    }
}
