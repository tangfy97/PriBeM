public class org.eclipse.jdt.internal.compiler.ast.LabeledStatement extends org.eclipse.jdt.internal.compiler.ast.Statement
{
    public org.eclipse.jdt.internal.compiler.ast.Statement statement;
    public char[] label;
    public org.eclipse.jdt.internal.compiler.codegen.BranchLabel targetLabel;
    public int labelEnd;
    int mergedInitStateIndex;

    public void <init>(char[], org.eclipse.jdt.internal.compiler.ast.Statement, long, int)
    {
        long l0, $l1;
        org.eclipse.jdt.internal.compiler.ast.Statement r1;
        int $i2, $i3, i4, $i5, $i6, $i8;
        char[] r2;
        org.eclipse.jdt.internal.compiler.ast.LabeledStatement r0;
        boolean $z0;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.LabeledStatement;

        r2 := @parameter0: char[];

        r1 := @parameter1: org.eclipse.jdt.internal.compiler.ast.Statement;

        l0 := @parameter2: long;

        i4 := @parameter3: int;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.ast.Statement: void <init>()>();

        $i8 = (int) -1;

        r0.<org.eclipse.jdt.internal.compiler.ast.LabeledStatement: int mergedInitStateIndex> = $i8;

        r0.<org.eclipse.jdt.internal.compiler.ast.LabeledStatement: org.eclipse.jdt.internal.compiler.ast.Statement statement> = r1;

        $z0 = r1 instanceof org.eclipse.jdt.internal.compiler.ast.EmptyStatement;

        if $z0 == 0 goto label1;

        $i5 = r1.<org.eclipse.jdt.internal.compiler.ast.Statement: int bits>;

        $i6 = $i5 | 1;

        r1.<org.eclipse.jdt.internal.compiler.ast.Statement: int bits> = $i6;

     label1:
        r0.<org.eclipse.jdt.internal.compiler.ast.LabeledStatement: char[] label> = r2;

        $l1 = l0 >>> 32;

        $i2 = (int) $l1;

        r0.<org.eclipse.jdt.internal.compiler.ast.LabeledStatement: int sourceStart> = $i2;

        $i3 = (int) l0;

        r0.<org.eclipse.jdt.internal.compiler.ast.LabeledStatement: int labelEnd> = $i3;

        r0.<org.eclipse.jdt.internal.compiler.ast.LabeledStatement: int sourceEnd> = i4;

        return;
    }

    public org.eclipse.jdt.internal.compiler.flow.FlowInfo analyseCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope, org.eclipse.jdt.internal.compiler.flow.FlowContext, org.eclipse.jdt.internal.compiler.flow.FlowInfo)
    {
        org.eclipse.jdt.internal.compiler.lookup.BlockScope r2;
        org.eclipse.jdt.internal.compiler.problem.ProblemReporter $r11;
        org.eclipse.jdt.internal.compiler.flow.FlowInfo r8, $r9, $r14;
        org.eclipse.jdt.internal.compiler.codegen.BranchLabel $r5;
        org.eclipse.jdt.internal.compiler.lookup.MethodScope $r10;
        org.eclipse.jdt.internal.compiler.ast.Statement $r1, $r6;
        org.eclipse.jdt.internal.compiler.flow.FlowContext r4;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        org.eclipse.jdt.internal.compiler.ast.LabeledStatement r0;
        boolean $z0;
        org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo $r12, $r13, $r15, $r16, $r17, $r18, $r19;
        char[] $r7;
        org.eclipse.jdt.internal.compiler.flow.LabelFlowContext $r3;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.LabeledStatement;

        r2 := @parameter0: org.eclipse.jdt.internal.compiler.lookup.BlockScope;

        r4 := @parameter1: org.eclipse.jdt.internal.compiler.flow.FlowContext;

        r8 := @parameter2: org.eclipse.jdt.internal.compiler.flow.FlowInfo;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.ast.LabeledStatement: org.eclipse.jdt.internal.compiler.ast.Statement statement>;

        if $r1 != null goto label1;

        return r8;

     label1:
        $r6 = r0.<org.eclipse.jdt.internal.compiler.ast.LabeledStatement: org.eclipse.jdt.internal.compiler.ast.Statement statement>;

        $r3 = new org.eclipse.jdt.internal.compiler.flow.LabelFlowContext;

        $r7 = r0.<org.eclipse.jdt.internal.compiler.ast.LabeledStatement: char[] label>;

        $r5 = new org.eclipse.jdt.internal.compiler.codegen.BranchLabel;

        specialinvoke $r5.<org.eclipse.jdt.internal.compiler.codegen.BranchLabel: void <init>()>();

        r0.<org.eclipse.jdt.internal.compiler.ast.LabeledStatement: org.eclipse.jdt.internal.compiler.codegen.BranchLabel targetLabel> = $r5;

        specialinvoke $r3.<org.eclipse.jdt.internal.compiler.flow.LabelFlowContext: void <init>(org.eclipse.jdt.internal.compiler.flow.FlowContext,org.eclipse.jdt.internal.compiler.ast.ASTNode,char[],org.eclipse.jdt.internal.compiler.codegen.BranchLabel,org.eclipse.jdt.internal.compiler.lookup.BlockScope)>(r4, r0, $r7, $r5, r2);

        $r9 = virtualinvoke $r6.<org.eclipse.jdt.internal.compiler.ast.Statement: org.eclipse.jdt.internal.compiler.flow.FlowInfo analyseCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.flow.FlowContext,org.eclipse.jdt.internal.compiler.flow.FlowInfo)>(r2, $r3, r8);

        $i0 = $r9.<org.eclipse.jdt.internal.compiler.flow.FlowInfo: int tagBits>;

        $i1 = $i0 & 1;

        if $i1 == 0 goto label2;

        $r17 = $r3.<org.eclipse.jdt.internal.compiler.flow.LabelFlowContext: org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo initsOnBreak>;

        $i5 = $r17.<org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo: int tagBits>;

        $i6 = $i5 & 1;

        if $i6 != 0 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        $r18 = $r3.<org.eclipse.jdt.internal.compiler.flow.LabelFlowContext: org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo initsOnBreak>;

        $r19 = virtualinvoke $r9.<org.eclipse.jdt.internal.compiler.flow.FlowInfo: org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo mergedWith(org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo)>($r18);

        if $z0 == 0 goto label4;

        $r12 = (org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo) $r19;

        $r13 = virtualinvoke r8.<org.eclipse.jdt.internal.compiler.flow.FlowInfo: org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo unconditionalFieldLessCopy()>();

        $r14 = virtualinvoke $r12.<org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo: org.eclipse.jdt.internal.compiler.flow.FlowInfo addInitializationsFrom(org.eclipse.jdt.internal.compiler.flow.FlowInfo)>($r13);

        $r15 = $r3.<org.eclipse.jdt.internal.compiler.flow.LabelFlowContext: org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo initsOnBreak>;

        $r16 = virtualinvoke $r15.<org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo: org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo unconditionalFieldLessCopy()>();

        virtualinvoke $r14.<org.eclipse.jdt.internal.compiler.flow.FlowInfo: org.eclipse.jdt.internal.compiler.flow.FlowInfo addInitializationsFrom(org.eclipse.jdt.internal.compiler.flow.FlowInfo)>($r16);

     label4:
        $r10 = virtualinvoke r2.<org.eclipse.jdt.internal.compiler.lookup.BlockScope: org.eclipse.jdt.internal.compiler.lookup.MethodScope methodScope()>();

        $i2 = virtualinvoke $r10.<org.eclipse.jdt.internal.compiler.lookup.MethodScope: int recordInitializationStates(org.eclipse.jdt.internal.compiler.flow.FlowInfo)>($r19);

        r0.<org.eclipse.jdt.internal.compiler.ast.LabeledStatement: int mergedInitStateIndex> = $i2;

        $i3 = r0.<org.eclipse.jdt.internal.compiler.ast.LabeledStatement: int bits>;

        $i4 = $i3 & 64;

        if $i4 != 0 goto label5;

        $r11 = virtualinvoke r2.<org.eclipse.jdt.internal.compiler.lookup.BlockScope: org.eclipse.jdt.internal.compiler.problem.ProblemReporter problemReporter()>();

        virtualinvoke $r11.<org.eclipse.jdt.internal.compiler.problem.ProblemReporter: void unusedLabel(org.eclipse.jdt.internal.compiler.ast.LabeledStatement)>(r0);

     label5:
        return $r19;
    }

    public org.eclipse.jdt.internal.compiler.ast.ASTNode concreteStatement()
    {
        org.eclipse.jdt.internal.compiler.ast.Statement $r1;
        org.eclipse.jdt.internal.compiler.ast.LabeledStatement r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.LabeledStatement;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.ast.LabeledStatement: org.eclipse.jdt.internal.compiler.ast.Statement statement>;

        return $r1;
    }

    public void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope, org.eclipse.jdt.internal.compiler.codegen.CodeStream)
    {
        org.eclipse.jdt.internal.compiler.lookup.BlockScope r3;
        org.eclipse.jdt.internal.compiler.codegen.BranchLabel $r2, $r4, $r6;
        org.eclipse.jdt.internal.compiler.ast.Statement $r5, $r7;
        int $i0, $i1, i2, $i3, $i4, $i5, $i6, $i8;
        org.eclipse.jdt.internal.compiler.ast.LabeledStatement r0;
        org.eclipse.jdt.internal.compiler.codegen.CodeStream r1;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.LabeledStatement;

        r3 := @parameter0: org.eclipse.jdt.internal.compiler.lookup.BlockScope;

        r1 := @parameter1: org.eclipse.jdt.internal.compiler.codegen.CodeStream;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.ast.LabeledStatement: int bits>;

        $i1 = $i0 & -2147483648;

        if $i1 != 0 goto label1;

        return;

     label1:
        i2 = r1.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: int position>;

        $r2 = r0.<org.eclipse.jdt.internal.compiler.ast.LabeledStatement: org.eclipse.jdt.internal.compiler.codegen.BranchLabel targetLabel>;

        if $r2 == null goto label3;

        $r4 = r0.<org.eclipse.jdt.internal.compiler.ast.LabeledStatement: org.eclipse.jdt.internal.compiler.codegen.BranchLabel targetLabel>;

        virtualinvoke $r4.<org.eclipse.jdt.internal.compiler.codegen.BranchLabel: void initialize(org.eclipse.jdt.internal.compiler.codegen.CodeStream)>(r1);

        $r5 = r0.<org.eclipse.jdt.internal.compiler.ast.LabeledStatement: org.eclipse.jdt.internal.compiler.ast.Statement statement>;

        if $r5 == null goto label2;

        $r7 = r0.<org.eclipse.jdt.internal.compiler.ast.LabeledStatement: org.eclipse.jdt.internal.compiler.ast.Statement statement>;

        virtualinvoke $r7.<org.eclipse.jdt.internal.compiler.ast.Statement: void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream)>(r3, r1);

     label2:
        $r6 = r0.<org.eclipse.jdt.internal.compiler.ast.LabeledStatement: org.eclipse.jdt.internal.compiler.codegen.BranchLabel targetLabel>;

        virtualinvoke $r6.<org.eclipse.jdt.internal.compiler.codegen.BranchLabel: void place()>();

     label3:
        $i6 = r0.<org.eclipse.jdt.internal.compiler.ast.LabeledStatement: int mergedInitStateIndex>;

        $i8 = (int) -1;

        if $i6 == $i8 goto label4;

        $i4 = r0.<org.eclipse.jdt.internal.compiler.ast.LabeledStatement: int mergedInitStateIndex>;

        virtualinvoke r1.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void removeNotDefinitelyAssignedVariables(org.eclipse.jdt.internal.compiler.lookup.Scope,int)>(r3, $i4);

        $i5 = r0.<org.eclipse.jdt.internal.compiler.ast.LabeledStatement: int mergedInitStateIndex>;

        virtualinvoke r1.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void addDefinitelyAssignedVariables(org.eclipse.jdt.internal.compiler.lookup.Scope,int)>(r3, $i5);

     label4:
        $i3 = r0.<org.eclipse.jdt.internal.compiler.ast.LabeledStatement: int sourceStart>;

        virtualinvoke r1.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void recordPositionsFrom(int,int)>(i2, $i3);

        return;
    }

    public java.lang.StringBuffer printStatement(int, java.lang.StringBuffer)
    {
        org.eclipse.jdt.internal.compiler.ast.Statement $r5, $r6;
        java.lang.StringBuffer r0, $r1, $r4;
        int i0;
        char[] $r3;
        org.eclipse.jdt.internal.compiler.ast.LabeledStatement r2;

        r2 := @this: org.eclipse.jdt.internal.compiler.ast.LabeledStatement;

        i0 := @parameter0: int;

        r0 := @parameter1: java.lang.StringBuffer;

        $r1 = staticinvoke <org.eclipse.jdt.internal.compiler.ast.LabeledStatement: java.lang.StringBuffer printIndent(int,java.lang.StringBuffer)>(i0, r0);

        $r3 = r2.<org.eclipse.jdt.internal.compiler.ast.LabeledStatement: char[] label>;

        $r4 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char[])>($r3);

        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(": ");

        $r5 = r2.<org.eclipse.jdt.internal.compiler.ast.LabeledStatement: org.eclipse.jdt.internal.compiler.ast.Statement statement>;

        if $r5 != null goto label1;

        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(59);

        goto label2;

     label1:
        $r6 = r2.<org.eclipse.jdt.internal.compiler.ast.LabeledStatement: org.eclipse.jdt.internal.compiler.ast.Statement statement>;

        virtualinvoke $r6.<org.eclipse.jdt.internal.compiler.ast.Statement: java.lang.StringBuffer printStatement(int,java.lang.StringBuffer)>(0, r0);

     label2:
        return r0;
    }

    public void resolve(org.eclipse.jdt.internal.compiler.lookup.BlockScope)
    {
        org.eclipse.jdt.internal.compiler.ast.Statement $r1, $r3;
        org.eclipse.jdt.internal.compiler.lookup.BlockScope r2;
        org.eclipse.jdt.internal.compiler.ast.LabeledStatement r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.LabeledStatement;

        r2 := @parameter0: org.eclipse.jdt.internal.compiler.lookup.BlockScope;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.ast.LabeledStatement: org.eclipse.jdt.internal.compiler.ast.Statement statement>;

        if $r1 == null goto label1;

        $r3 = r0.<org.eclipse.jdt.internal.compiler.ast.LabeledStatement: org.eclipse.jdt.internal.compiler.ast.Statement statement>;

        virtualinvoke $r3.<org.eclipse.jdt.internal.compiler.ast.Statement: void resolve(org.eclipse.jdt.internal.compiler.lookup.BlockScope)>(r2);

     label1:
        return;
    }

    public void traverse(org.eclipse.jdt.internal.compiler.ASTVisitor, org.eclipse.jdt.internal.compiler.lookup.BlockScope)
    {
        org.eclipse.jdt.internal.compiler.ASTVisitor r0;
        org.eclipse.jdt.internal.compiler.lookup.BlockScope r2;
        org.eclipse.jdt.internal.compiler.ast.Statement $r3, $r4;
        org.eclipse.jdt.internal.compiler.ast.LabeledStatement r1;
        boolean $z0;

        r1 := @this: org.eclipse.jdt.internal.compiler.ast.LabeledStatement;

        r0 := @parameter0: org.eclipse.jdt.internal.compiler.ASTVisitor;

        r2 := @parameter1: org.eclipse.jdt.internal.compiler.lookup.BlockScope;

        $z0 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.ASTVisitor: boolean visit(org.eclipse.jdt.internal.compiler.ast.LabeledStatement,org.eclipse.jdt.internal.compiler.lookup.BlockScope)>(r1, r2);

        if $z0 == 0 goto label1;

        $r3 = r1.<org.eclipse.jdt.internal.compiler.ast.LabeledStatement: org.eclipse.jdt.internal.compiler.ast.Statement statement>;

        if $r3 == null goto label1;

        $r4 = r1.<org.eclipse.jdt.internal.compiler.ast.LabeledStatement: org.eclipse.jdt.internal.compiler.ast.Statement statement>;

        virtualinvoke $r4.<org.eclipse.jdt.internal.compiler.ast.Statement: void traverse(org.eclipse.jdt.internal.compiler.ASTVisitor,org.eclipse.jdt.internal.compiler.lookup.BlockScope)>(r0, r2);

     label1:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.ASTVisitor: void endVisit(org.eclipse.jdt.internal.compiler.ast.LabeledStatement,org.eclipse.jdt.internal.compiler.lookup.BlockScope)>(r1, r2);

        return;
    }
}
