public class com.hp.hpl.jena.tdb.transaction.Transaction extends java.lang.Object
{
    private final long id;
    private final java.lang.String label;
    private final com.hp.hpl.jena.tdb.transaction.TransactionManager txnMgr;
    private final com.hp.hpl.jena.tdb.transaction.Journal journal;
    private final com.hp.hpl.jena.query.ReadWrite mode;
    private final java.util.List nodeTableTrans;
    private final java.util.List blkMgrs;
    private final com.hp.hpl.jena.tdb.store.DatasetGraphTDB basedsg;
    private final java.util.List iterators;
    private com.hp.hpl.jena.tdb.transaction.DatasetGraphTxn activedsg;
    private com.hp.hpl.jena.tdb.transaction.TxnState state;
    private com.hp.hpl.jena.tdb.transaction.Transaction$TxnOutcome outcome;
    private boolean changesPending;

    public void <init>(com.hp.hpl.jena.tdb.store.DatasetGraphTDB, com.hp.hpl.jena.query.ReadWrite, long, java.lang.String, com.hp.hpl.jena.tdb.transaction.TransactionManager)
    {
        long l0;
        com.hp.hpl.jena.tdb.store.DatasetGraphTDB r15;
        java.util.ArrayList $r1, $r2, $r16;
        int[] $r10;
        com.hp.hpl.jena.tdb.transaction.Transaction$TxnOutcome $r18;
        int $i1, $i2;
        java.lang.String $r8, r23, r24;
        com.hp.hpl.jena.tdb.transaction.Transaction r0;
        com.hp.hpl.jena.tdb.transaction.Journal $r25;
        boolean $z0;
        com.hp.hpl.jena.tdb.transaction.TransactionManager r14;
        com.hp.hpl.jena.tdb.transaction.TxnState $r17;
        com.hp.hpl.jena.query.ReadWrite r9, $r19;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r7, $r11, $r12, $r13, $r20, $r21, $r22;

        r0 := @this: com.hp.hpl.jena.tdb.transaction.Transaction;

        r15 := @parameter0: com.hp.hpl.jena.tdb.store.DatasetGraphTDB;

        r9 := @parameter1: com.hp.hpl.jena.query.ReadWrite;

        l0 := @parameter2: long;

        r23 := @parameter3: java.lang.String;

        r14 := @parameter4: com.hp.hpl.jena.tdb.transaction.TransactionManager;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<com.hp.hpl.jena.tdb.transaction.Transaction: java.util.List nodeTableTrans> = $r1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<com.hp.hpl.jena.tdb.transaction.Transaction: java.util.List blkMgrs> = $r2;

        r0.<com.hp.hpl.jena.tdb.transaction.Transaction: long id> = l0;

        if r23 != null goto label1;

        r23 = "Txn";

     label1:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r23);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        r24 = $r8;

        $r10 = <com.hp.hpl.jena.tdb.transaction.Transaction$1: int[] $SwitchMap$com$hp$hpl$jena$query$ReadWrite>;

        $i1 = virtualinvoke r9.<com.hp.hpl.jena.query.ReadWrite: int ordinal()>();

        $i2 = $r10[$i1];

        lookupswitch($i2)
        {
            case 1: goto label2;
            case 2: goto label3;
            default: goto label4;
        };

     label2:
        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/R");

        r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label4;

     label3:
        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/W");

        r24 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

     label4:
        r0.<com.hp.hpl.jena.tdb.transaction.Transaction: java.lang.String label> = r24;

        r0.<com.hp.hpl.jena.tdb.transaction.Transaction: com.hp.hpl.jena.tdb.transaction.TransactionManager txnMgr> = r14;

        r0.<com.hp.hpl.jena.tdb.transaction.Transaction: com.hp.hpl.jena.tdb.store.DatasetGraphTDB basedsg> = r15;

        r0.<com.hp.hpl.jena.tdb.transaction.Transaction: com.hp.hpl.jena.query.ReadWrite mode> = r9;

        if r14 != null goto label5;

        $r25 = null;

        goto label6;

     label5:
        $r25 = virtualinvoke r14.<com.hp.hpl.jena.tdb.transaction.TransactionManager: com.hp.hpl.jena.tdb.transaction.Journal getJournal()>();

     label6:
        r0.<com.hp.hpl.jena.tdb.transaction.Transaction: com.hp.hpl.jena.tdb.transaction.Journal journal> = $r25;

        r0.<com.hp.hpl.jena.tdb.transaction.Transaction: com.hp.hpl.jena.tdb.transaction.DatasetGraphTxn activedsg> = null;

        $r16 = new java.util.ArrayList;

        specialinvoke $r16.<java.util.ArrayList: void <init>()>();

        r0.<com.hp.hpl.jena.tdb.transaction.Transaction: java.util.List iterators> = $r16;

        $r17 = <com.hp.hpl.jena.tdb.transaction.TxnState: com.hp.hpl.jena.tdb.transaction.TxnState ACTIVE>;

        r0.<com.hp.hpl.jena.tdb.transaction.Transaction: com.hp.hpl.jena.tdb.transaction.TxnState state> = $r17;

        $r18 = <com.hp.hpl.jena.tdb.transaction.Transaction$TxnOutcome: com.hp.hpl.jena.tdb.transaction.Transaction$TxnOutcome UNFINISHED>;

        r0.<com.hp.hpl.jena.tdb.transaction.Transaction: com.hp.hpl.jena.tdb.transaction.Transaction$TxnOutcome outcome> = $r18;

        $r19 = <com.hp.hpl.jena.query.ReadWrite: com.hp.hpl.jena.query.ReadWrite WRITE>;

        if r9 != $r19 goto label7;

        $z0 = 1;

        goto label8;

     label7:
        $z0 = 0;

     label8:
        r0.<com.hp.hpl.jena.tdb.transaction.Transaction: boolean changesPending> = $z0;

        return;
    }

    public void commit()
    {
        com.hp.hpl.jena.tdb.sys.FileRef $r5;
        int[] $r2;
        com.hp.hpl.jena.tdb.transaction.Transaction$TxnOutcome $r9, $r12;
        com.hp.hpl.jena.tdb.transaction.TDBTransactionException $r11, $r15, $r25, $r34;
        com.hp.hpl.jena.tdb.transaction.Transaction r0;
        com.hp.hpl.jena.tdb.transaction.Journal $r7, $r8;
        boolean $z0, $z1, $z2;
        com.hp.hpl.jena.tdb.transaction.TxnState $r3, $r4, $r37, $r44;
        com.hp.hpl.jena.query.ReadWrite $r1;
        java.lang.StringBuilder $r16, $r18, $r20, $r26, $r28, $r30, $r38, $r40, $r42;
        java.lang.Throwable $r22;
        int $i0, $i1;
        java.lang.String $r19, $r21, $r29, $r31, $r41, $r43;
        com.hp.hpl.jena.tdb.transaction.JournalEntryType $r6;
        org.slf4j.Logger $r14, $r17, $r24, $r27, $r33, $r36, $r39;
        com.hp.hpl.jena.tdb.transaction.TransactionManager $r10;
        java.lang.RuntimeException $r13, $r23, $r32, $r35;

        r0 := @this: com.hp.hpl.jena.tdb.transaction.Transaction;

        entermonitor r0;

     label01:
        $r2 = <com.hp.hpl.jena.tdb.transaction.Transaction$1: int[] $SwitchMap$com$hp$hpl$jena$query$ReadWrite>;

        $r1 = r0.<com.hp.hpl.jena.tdb.transaction.Transaction: com.hp.hpl.jena.query.ReadWrite mode>;

        $i0 = virtualinvoke $r1.<com.hp.hpl.jena.query.ReadWrite: int ordinal()>();

        $i1 = $r2[$i0];

        lookupswitch($i1)
        {
            case 1: goto label02;
            case 2: goto label03;
            default: goto label19;
        };

     label02:
        $r12 = <com.hp.hpl.jena.tdb.transaction.Transaction$TxnOutcome: com.hp.hpl.jena.tdb.transaction.Transaction$TxnOutcome R_COMMITED>;

        r0.<com.hp.hpl.jena.tdb.transaction.Transaction: com.hp.hpl.jena.tdb.transaction.Transaction$TxnOutcome outcome> = $r12;

        goto label19;

     label03:
        $r4 = r0.<com.hp.hpl.jena.tdb.transaction.Transaction: com.hp.hpl.jena.tdb.transaction.TxnState state>;

        $r3 = <com.hp.hpl.jena.tdb.transaction.TxnState: com.hp.hpl.jena.tdb.transaction.TxnState ACTIVE>;

        if $r4 == $r3 goto label04;

        $r11 = new com.hp.hpl.jena.tdb.transaction.TDBTransactionException;

        specialinvoke $r11.<com.hp.hpl.jena.tdb.transaction.TDBTransactionException: void <init>(java.lang.String)>("Transaction has already committed or aborted");

        throw $r11;

     label04:
        specialinvoke r0.<com.hp.hpl.jena.tdb.transaction.Transaction: void prepare()>();

     label05:
        goto label13;

     label06:
        $r35 := @caughtexception;

        $z2 = specialinvoke r0.<com.hp.hpl.jena.tdb.transaction.Transaction: boolean isIOException(java.lang.Throwable)>($r35);

        if $z2 == 0 goto label07;

        $r39 = <com.hp.hpl.jena.tdb.sys.SystemTDB: org.slf4j.Logger errlog>;

        $r38 = new java.lang.StringBuilder;

        specialinvoke $r38.<java.lang.StringBuilder: void <init>()>();

        $r40 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("IOException during \'prepare\' : attempting transaction abort: ");

        $r41 = virtualinvoke $r35.<java.lang.RuntimeException: java.lang.String getMessage()>();

        $r42 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r41);

        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r39.<org.slf4j.Logger: void warn(java.lang.String)>($r43);

        goto label08;

     label07:
        $r36 = <com.hp.hpl.jena.tdb.sys.SystemTDB: org.slf4j.Logger errlog>;

        interfaceinvoke $r36.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>("Exception during \'prepare\' : attempting transaction abort", $r35);

     label08:
        $r37 = <com.hp.hpl.jena.tdb.transaction.TxnState: com.hp.hpl.jena.tdb.transaction.TxnState ACTIVE>;

        r0.<com.hp.hpl.jena.tdb.transaction.Transaction: com.hp.hpl.jena.tdb.transaction.TxnState state> = $r37;

     label09:
        virtualinvoke r0.<com.hp.hpl.jena.tdb.transaction.Transaction: void abort()>();

     label10:
        goto label12;

     label11:
        $r32 := @caughtexception;

        $r33 = <com.hp.hpl.jena.tdb.sys.SystemTDB: org.slf4j.Logger errlog>;

        interfaceinvoke $r33.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>("Exception during \'abort\' after \'prepare\'", $r32);

     label12:
        $r34 = new com.hp.hpl.jena.tdb.transaction.TDBTransactionException;

        specialinvoke $r34.<com.hp.hpl.jena.tdb.transaction.TDBTransactionException: void <init>(java.lang.String,java.lang.Throwable)>("Abort during prepare - transaction did not commit", $r35);

        throw $r34;

     label13:
        $r7 = r0.<com.hp.hpl.jena.tdb.transaction.Transaction: com.hp.hpl.jena.tdb.transaction.Journal journal>;

        $r6 = <com.hp.hpl.jena.tdb.transaction.JournalEntryType: com.hp.hpl.jena.tdb.transaction.JournalEntryType Commit>;

        $r5 = <com.hp.hpl.jena.tdb.sys.FileRef: com.hp.hpl.jena.tdb.sys.FileRef Journal>;

        virtualinvoke $r7.<com.hp.hpl.jena.tdb.transaction.Journal: long write(com.hp.hpl.jena.tdb.transaction.JournalEntryType,com.hp.hpl.jena.tdb.sys.FileRef,com.hp.hpl.jena.tdb.base.block.Block)>($r6, $r5, null);

        $r8 = r0.<com.hp.hpl.jena.tdb.transaction.Transaction: com.hp.hpl.jena.tdb.transaction.Journal journal>;

        virtualinvoke $r8.<com.hp.hpl.jena.tdb.transaction.Journal: void sync()>();

     label14:
        goto label18;

     label15:
        $r23 := @caughtexception;

        $z1 = specialinvoke r0.<com.hp.hpl.jena.tdb.transaction.Transaction: boolean isIOException(java.lang.Throwable)>($r23);

        if $z1 == 0 goto label16;

        $r27 = <com.hp.hpl.jena.tdb.sys.SystemTDB: org.slf4j.Logger errlog>;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $r28 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("IOException during \'commit\' : transaction status not known (but not a partial commit): ");

        $r29 = virtualinvoke $r23.<java.lang.RuntimeException: java.lang.String getMessage()>();

        $r30 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r29);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r27.<org.slf4j.Logger: void warn(java.lang.String)>($r31);

        goto label17;

     label16:
        $r24 = <com.hp.hpl.jena.tdb.sys.SystemTDB: org.slf4j.Logger errlog>;

        interfaceinvoke $r24.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>("Exception during \'commit\' : transaction status not known (but not a partial commit): ", $r23);

     label17:
        $r25 = new com.hp.hpl.jena.tdb.transaction.TDBTransactionException;

        specialinvoke $r25.<com.hp.hpl.jena.tdb.transaction.TDBTransactionException: void <init>(java.lang.String,java.lang.Throwable)>("Exception at commit point", $r23);

        throw $r25;

     label18:
        $r9 = <com.hp.hpl.jena.tdb.transaction.Transaction$TxnOutcome: com.hp.hpl.jena.tdb.transaction.Transaction$TxnOutcome W_COMMITED>;

        r0.<com.hp.hpl.jena.tdb.transaction.Transaction: com.hp.hpl.jena.tdb.transaction.Transaction$TxnOutcome outcome> = $r9;

     label19:
        $r44 = <com.hp.hpl.jena.tdb.transaction.TxnState: com.hp.hpl.jena.tdb.transaction.TxnState COMMITED>;

        r0.<com.hp.hpl.jena.tdb.transaction.Transaction: com.hp.hpl.jena.tdb.transaction.TxnState state> = $r44;

        exitmonitor r0;

     label20:
        goto label23;

     label21:
        $r22 := @caughtexception;

        exitmonitor r0;

     label22:
        throw $r22;

     label23:
        $r10 = r0.<com.hp.hpl.jena.tdb.transaction.Transaction: com.hp.hpl.jena.tdb.transaction.TransactionManager txnMgr>;

        virtualinvoke $r10.<com.hp.hpl.jena.tdb.transaction.TransactionManager: void notifyCommit(com.hp.hpl.jena.tdb.transaction.Transaction)>(r0);

     label24:
        goto label28;

     label25:
        $r13 := @caughtexception;

        $z0 = specialinvoke r0.<com.hp.hpl.jena.tdb.transaction.Transaction: boolean isIOException(java.lang.Throwable)>($r13);

        if $z0 == 0 goto label26;

        $r17 = <com.hp.hpl.jena.tdb.sys.SystemTDB: org.slf4j.Logger errlog>;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("IOException after commit point : transaction commited but internal status not recorded properly : ");

        $r19 = virtualinvoke $r13.<java.lang.RuntimeException: java.lang.String getMessage()>();

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r17.<org.slf4j.Logger: void warn(java.lang.String)>($r21);

        goto label27;

     label26:
        $r14 = <com.hp.hpl.jena.tdb.sys.SystemTDB: org.slf4j.Logger errlog>;

        interfaceinvoke $r14.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>("Exception after commit point : transaction commited but internal status not recorded properly", $r13);

     label27:
        $r15 = new com.hp.hpl.jena.tdb.transaction.TDBTransactionException;

        specialinvoke $r15.<com.hp.hpl.jena.tdb.transaction.TDBTransactionException: void <init>(java.lang.String,java.lang.Throwable)>("Exception after commit point - transaction did commit", $r13);

        throw $r15;

     label28:
        return;

        catch java.lang.RuntimeException from label04 to label05 with label06;
        catch java.lang.RuntimeException from label09 to label10 with label11;
        catch java.lang.RuntimeException from label13 to label14 with label15;
        catch java.lang.Throwable from label01 to label20 with label21;
        catch java.lang.Throwable from label21 to label22 with label21;
        catch java.lang.RuntimeException from label23 to label24 with label25;
    }

    private boolean isIOException(java.lang.Throwable)
    {
        java.lang.Throwable r1;
        boolean $z0;
        com.hp.hpl.jena.tdb.transaction.Transaction r0;

        r0 := @this: com.hp.hpl.jena.tdb.transaction.Transaction;

        r1 := @parameter0: java.lang.Throwable;

     label1:
        if r1 == null goto label3;

        $z0 = r1 instanceof java.io.IOException;

        if $z0 == 0 goto label2;

        return 1;

     label2:
        r1 = virtualinvoke r1.<java.lang.Throwable: java.lang.Throwable getCause()>();

        goto label1;

     label3:
        return 0;
    }

    private void prepare()
    {
        java.util.Iterator $r3, $r5;
        java.util.List $r2, $r4;
        com.hp.hpl.jena.tdb.transaction.NodeTableTrans r9;
        com.hp.hpl.jena.tdb.transaction.BlockMgrJournal r8;
        com.hp.hpl.jena.tdb.transaction.TxnState $r1;
        java.lang.Object $r6, $r7;
        com.hp.hpl.jena.tdb.transaction.Transaction r0;
        boolean $z0, $z1;

        r0 := @this: com.hp.hpl.jena.tdb.transaction.Transaction;

        $r1 = <com.hp.hpl.jena.tdb.transaction.TxnState: com.hp.hpl.jena.tdb.transaction.TxnState PREPARING>;

        r0.<com.hp.hpl.jena.tdb.transaction.Transaction: com.hp.hpl.jena.tdb.transaction.TxnState state> = $r1;

        $r2 = r0.<com.hp.hpl.jena.tdb.transaction.Transaction: java.util.List blkMgrs>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r7 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r8 = (com.hp.hpl.jena.tdb.transaction.BlockMgrJournal) $r7;

        virtualinvoke r8.<com.hp.hpl.jena.tdb.transaction.BlockMgrJournal: void commitPrepare(com.hp.hpl.jena.tdb.transaction.Transaction)>(r0);

        goto label1;

     label2:
        $r4 = r0.<com.hp.hpl.jena.tdb.transaction.Transaction: java.util.List nodeTableTrans>;

        $r5 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r9 = (com.hp.hpl.jena.tdb.transaction.NodeTableTrans) $r6;

        virtualinvoke r9.<com.hp.hpl.jena.tdb.transaction.NodeTableTrans: void commitPrepare(com.hp.hpl.jena.tdb.transaction.Transaction)>(r0);

        goto label3;

     label4:
        return;
    }

    public void abort()
    {
        com.hp.hpl.jena.tdb.transaction.BlockMgrJournal r36;
        int[] $r2;
        com.hp.hpl.jena.tdb.transaction.Transaction$TxnOutcome $r10, $r16;
        com.hp.hpl.jena.tdb.transaction.TDBTransactionException $r14, $r19, $r29;
        com.hp.hpl.jena.tdb.transaction.Transaction r0;
        boolean $z0, $z1, $z2, $z3;
        java.util.List $r5, $r7;
        com.hp.hpl.jena.tdb.transaction.NodeTableTrans r37;
        com.hp.hpl.jena.tdb.transaction.TxnState $r3, $r4, $r9, $r15;
        com.hp.hpl.jena.query.ReadWrite $r1;
        java.lang.StringBuilder $r20, $r22, $r24, $r30, $r32, $r34;
        java.lang.Throwable $r26;
        int $i0, $i1;
        java.lang.String $r23, $r25, $r33, $r35;
        org.slf4j.Logger $r18, $r21, $r28, $r31;
        java.util.Iterator $r6, $r8;
        com.hp.hpl.jena.tdb.transaction.TransactionManager $r11;
        java.lang.RuntimeException $r17, $r27;
        java.lang.Object $r12, $r13;

        r0 := @this: com.hp.hpl.jena.tdb.transaction.Transaction;

        entermonitor r0;

     label01:
        $r2 = <com.hp.hpl.jena.tdb.transaction.Transaction$1: int[] $SwitchMap$com$hp$hpl$jena$query$ReadWrite>;

        $r1 = r0.<com.hp.hpl.jena.tdb.transaction.Transaction: com.hp.hpl.jena.query.ReadWrite mode>;

        $i0 = virtualinvoke $r1.<com.hp.hpl.jena.query.ReadWrite: int ordinal()>();

        $i1 = $r2[$i0];

        lookupswitch($i1)
        {
            case 1: goto label02;
            case 2: goto label03;
            default: goto label13;
        };

     label02:
        $r15 = <com.hp.hpl.jena.tdb.transaction.TxnState: com.hp.hpl.jena.tdb.transaction.TxnState ABORTED>;

        r0.<com.hp.hpl.jena.tdb.transaction.Transaction: com.hp.hpl.jena.tdb.transaction.TxnState state> = $r15;

        $r16 = <com.hp.hpl.jena.tdb.transaction.Transaction$TxnOutcome: com.hp.hpl.jena.tdb.transaction.Transaction$TxnOutcome R_ABORTED>;

        r0.<com.hp.hpl.jena.tdb.transaction.Transaction: com.hp.hpl.jena.tdb.transaction.Transaction$TxnOutcome outcome> = $r16;

        goto label13;

     label03:
        $r4 = r0.<com.hp.hpl.jena.tdb.transaction.Transaction: com.hp.hpl.jena.tdb.transaction.TxnState state>;

        $r3 = <com.hp.hpl.jena.tdb.transaction.TxnState: com.hp.hpl.jena.tdb.transaction.TxnState ACTIVE>;

        if $r4 == $r3 goto label04;

        $r14 = new com.hp.hpl.jena.tdb.transaction.TDBTransactionException;

        specialinvoke $r14.<com.hp.hpl.jena.tdb.transaction.TDBTransactionException: void <init>(java.lang.String)>("Transaction has already committed or aborted");

        throw $r14;

     label04:
        $r5 = r0.<com.hp.hpl.jena.tdb.transaction.Transaction: java.util.List blkMgrs>;

        $r6 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label05:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label06;

        $r13 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r36 = (com.hp.hpl.jena.tdb.transaction.BlockMgrJournal) $r13;

        virtualinvoke r36.<com.hp.hpl.jena.tdb.transaction.BlockMgrJournal: void abort(com.hp.hpl.jena.tdb.transaction.Transaction)>(r0);

        goto label05;

     label06:
        $r7 = r0.<com.hp.hpl.jena.tdb.transaction.Transaction: java.util.List nodeTableTrans>;

        $r8 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>();

     label07:
        $z1 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label08;

        $r12 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        r37 = (com.hp.hpl.jena.tdb.transaction.NodeTableTrans) $r12;

        virtualinvoke r37.<com.hp.hpl.jena.tdb.transaction.NodeTableTrans: void abort(com.hp.hpl.jena.tdb.transaction.Transaction)>(r0);

        goto label07;

     label08:
        goto label12;

     label09:
        $r27 := @caughtexception;

        $z3 = specialinvoke r0.<com.hp.hpl.jena.tdb.transaction.Transaction: boolean isIOException(java.lang.Throwable)>($r27);

        if $z3 == 0 goto label10;

        $r31 = <com.hp.hpl.jena.tdb.sys.SystemTDB: org.slf4j.Logger errlog>;

        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();

        $r32 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("IOException during \'abort\' : ");

        $r33 = virtualinvoke $r27.<java.lang.RuntimeException: java.lang.String getMessage()>();

        $r34 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r33);

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r31.<org.slf4j.Logger: void warn(java.lang.String)>($r35);

        goto label11;

     label10:
        $r28 = <com.hp.hpl.jena.tdb.sys.SystemTDB: org.slf4j.Logger errlog>;

        interfaceinvoke $r28.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>("Exception during \'abort\'", $r27);

     label11:
        $r29 = new com.hp.hpl.jena.tdb.transaction.TDBTransactionException;

        specialinvoke $r29.<com.hp.hpl.jena.tdb.transaction.TDBTransactionException: void <init>(java.lang.String,java.lang.Throwable)>("Exception during abort - transaction did abort", $r27);

        throw $r29;

     label12:
        $r9 = <com.hp.hpl.jena.tdb.transaction.TxnState: com.hp.hpl.jena.tdb.transaction.TxnState ABORTED>;

        r0.<com.hp.hpl.jena.tdb.transaction.Transaction: com.hp.hpl.jena.tdb.transaction.TxnState state> = $r9;

        $r10 = <com.hp.hpl.jena.tdb.transaction.Transaction$TxnOutcome: com.hp.hpl.jena.tdb.transaction.Transaction$TxnOutcome W_ABORTED>;

        r0.<com.hp.hpl.jena.tdb.transaction.Transaction: com.hp.hpl.jena.tdb.transaction.Transaction$TxnOutcome outcome> = $r10;

     label13:
        exitmonitor r0;

     label14:
        goto label17;

     label15:
        $r26 := @caughtexception;

        exitmonitor r0;

     label16:
        throw $r26;

     label17:
        $r11 = r0.<com.hp.hpl.jena.tdb.transaction.Transaction: com.hp.hpl.jena.tdb.transaction.TransactionManager txnMgr>;

        virtualinvoke $r11.<com.hp.hpl.jena.tdb.transaction.TransactionManager: void notifyAbort(com.hp.hpl.jena.tdb.transaction.Transaction)>(r0);

     label18:
        goto label22;

     label19:
        $r17 := @caughtexception;

        $z2 = specialinvoke r0.<com.hp.hpl.jena.tdb.transaction.Transaction: boolean isIOException(java.lang.Throwable)>($r17);

        if $z2 == 0 goto label20;

        $r21 = <com.hp.hpl.jena.tdb.sys.SystemTDB: org.slf4j.Logger errlog>;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("IOException during post-abort (transaction did abort): ");

        $r23 = virtualinvoke $r17.<java.lang.RuntimeException: java.lang.String getMessage()>();

        $r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r21.<org.slf4j.Logger: void warn(java.lang.String)>($r25);

        goto label21;

     label20:
        $r18 = <com.hp.hpl.jena.tdb.sys.SystemTDB: org.slf4j.Logger errlog>;

        interfaceinvoke $r18.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>("Exception during post-abort (transaction did abort)", $r17);

     label21:
        $r19 = new com.hp.hpl.jena.tdb.transaction.TDBTransactionException;

        specialinvoke $r19.<com.hp.hpl.jena.tdb.transaction.TDBTransactionException: void <init>(java.lang.String,java.lang.Throwable)>("Exception after abort point - transaction did abort", $r17);

        throw $r19;

     label22:
        return;

        catch java.lang.RuntimeException from label04 to label08 with label09;
        catch java.lang.Throwable from label01 to label14 with label15;
        catch java.lang.Throwable from label15 to label16 with label15;
        catch java.lang.RuntimeException from label17 to label18 with label19;
    }

    public void close()
    {
        java.lang.Throwable $r12;
        int[] $r2;
        com.hp.hpl.jena.tdb.transaction.Transaction$TxnOutcome $r11;
        int $i0, $i1;
        java.lang.String $r9;
        com.hp.hpl.jena.tdb.transaction.Transaction r0;
        org.slf4j.Logger $r6;
        com.hp.hpl.jena.tdb.transaction.TransactionManager $r10;
        java.util.List $r14;
        com.hp.hpl.jena.tdb.transaction.TxnState $r1, $r13;
        com.hp.hpl.jena.query.ReadWrite $r3, $r4;
        java.lang.StringBuilder $r5, $r7, $r8;

        r0 := @this: com.hp.hpl.jena.tdb.transaction.Transaction;

        entermonitor r0;

     label01:
        $r2 = <com.hp.hpl.jena.tdb.transaction.Transaction$1: int[] $SwitchMap$com$hp$hpl$jena$tdb$transaction$TxnState>;

        $r1 = r0.<com.hp.hpl.jena.tdb.transaction.Transaction: com.hp.hpl.jena.tdb.transaction.TxnState state>;

        $i0 = virtualinvoke $r1.<com.hp.hpl.jena.tdb.transaction.TxnState: int ordinal()>();

        $i1 = $r2[$i0];

        lookupswitch($i1)
        {
            case 1: goto label02;
            case 2: goto label04;
            default: goto label06;
        };

     label02:
        exitmonitor r0;

     label03:
        return;

     label04:
        $r4 = r0.<com.hp.hpl.jena.tdb.transaction.Transaction: com.hp.hpl.jena.query.ReadWrite mode>;

        $r3 = <com.hp.hpl.jena.query.ReadWrite: com.hp.hpl.jena.query.ReadWrite READ>;

        if $r4 != $r3 goto label05;

        virtualinvoke r0.<com.hp.hpl.jena.tdb.transaction.Transaction: void commit()>();

        $r11 = <com.hp.hpl.jena.tdb.transaction.Transaction$TxnOutcome: com.hp.hpl.jena.tdb.transaction.Transaction$TxnOutcome R_CLOSED>;

        r0.<com.hp.hpl.jena.tdb.transaction.Transaction: com.hp.hpl.jena.tdb.transaction.Transaction$TxnOutcome outcome> = $r11;

        goto label06;

     label05:
        $r6 = <com.hp.hpl.jena.tdb.sys.SystemTDB: org.slf4j.Logger errlog>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Transaction not commited or aborted: ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r6.<org.slf4j.Logger: void warn(java.lang.String)>($r9);

        virtualinvoke r0.<com.hp.hpl.jena.tdb.transaction.Transaction: void abort()>();

        goto label06;

     label06:
        $r13 = <com.hp.hpl.jena.tdb.transaction.TxnState: com.hp.hpl.jena.tdb.transaction.TxnState CLOSED>;

        r0.<com.hp.hpl.jena.tdb.transaction.Transaction: com.hp.hpl.jena.tdb.transaction.TxnState state> = $r13;

        $r14 = r0.<com.hp.hpl.jena.tdb.transaction.Transaction: java.util.List iterators>;

        interfaceinvoke $r14.<java.util.List: void clear()>();

        exitmonitor r0;

     label07:
        goto label10;

     label08:
        $r12 := @caughtexception;

        exitmonitor r0;

     label09:
        throw $r12;

     label10:
        $r10 = r0.<com.hp.hpl.jena.tdb.transaction.Transaction: com.hp.hpl.jena.tdb.transaction.TransactionManager txnMgr>;

        virtualinvoke $r10.<com.hp.hpl.jena.tdb.transaction.TransactionManager: void notifyClose(com.hp.hpl.jena.tdb.transaction.Transaction)>(r0);

        return;

        catch java.lang.Throwable from label01 to label03 with label08;
        catch java.lang.Throwable from label04 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
    }

    void signalEnacted()
    {
        java.lang.Throwable $r1;
        com.hp.hpl.jena.tdb.transaction.Transaction r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.tdb.transaction.Transaction;

        entermonitor r0;

     label1:
        $z0 = r0.<com.hp.hpl.jena.tdb.transaction.Transaction: boolean changesPending>;

        if $z0 != 0 goto label2;

        staticinvoke <org.apache.jena.atlas.logging.Log: void warn(java.lang.Object,java.lang.String)>(r0, "Transaction was a read transaction or a write transaction that has already been flushed");

     label2:
        r0.<com.hp.hpl.jena.tdb.transaction.Transaction: boolean changesPending> = 0;

        exitmonitor r0;

     label3:
        goto label6;

     label4:
        $r1 := @caughtexception;

        exitmonitor r0;

     label5:
        throw $r1;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public com.hp.hpl.jena.query.ReadWrite getMode()
    {
        com.hp.hpl.jena.query.ReadWrite $r1;
        com.hp.hpl.jena.tdb.transaction.Transaction r0;

        r0 := @this: com.hp.hpl.jena.tdb.transaction.Transaction;

        $r1 = r0.<com.hp.hpl.jena.tdb.transaction.Transaction: com.hp.hpl.jena.query.ReadWrite mode>;

        return $r1;
    }

    public boolean isRead()
    {
        com.hp.hpl.jena.query.ReadWrite $r1, $r2;
        com.hp.hpl.jena.tdb.transaction.Transaction r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.tdb.transaction.Transaction;

        $r2 = r0.<com.hp.hpl.jena.tdb.transaction.Transaction: com.hp.hpl.jena.query.ReadWrite mode>;

        $r1 = <com.hp.hpl.jena.query.ReadWrite: com.hp.hpl.jena.query.ReadWrite READ>;

        if $r2 != $r1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public com.hp.hpl.jena.tdb.transaction.TxnState getState()
    {
        com.hp.hpl.jena.tdb.transaction.TxnState $r1;
        com.hp.hpl.jena.tdb.transaction.Transaction r0;

        r0 := @this: com.hp.hpl.jena.tdb.transaction.Transaction;

        $r1 = r0.<com.hp.hpl.jena.tdb.transaction.Transaction: com.hp.hpl.jena.tdb.transaction.TxnState state>;

        return $r1;
    }

    public long getTxnId()
    {
        long $l0;
        com.hp.hpl.jena.tdb.transaction.Transaction r0;

        r0 := @this: com.hp.hpl.jena.tdb.transaction.Transaction;

        $l0 = r0.<com.hp.hpl.jena.tdb.transaction.Transaction: long id>;

        return $l0;
    }

    public com.hp.hpl.jena.tdb.transaction.TransactionManager getTxnMgr()
    {
        com.hp.hpl.jena.tdb.transaction.TransactionManager $r1;
        com.hp.hpl.jena.tdb.transaction.Transaction r0;

        r0 := @this: com.hp.hpl.jena.tdb.transaction.Transaction;

        $r1 = r0.<com.hp.hpl.jena.tdb.transaction.Transaction: com.hp.hpl.jena.tdb.transaction.TransactionManager txnMgr>;

        return $r1;
    }

    public com.hp.hpl.jena.tdb.transaction.DatasetGraphTxn getActiveDataset()
    {
        com.hp.hpl.jena.tdb.transaction.Transaction r0;
        com.hp.hpl.jena.tdb.transaction.DatasetGraphTxn $r1;

        r0 := @this: com.hp.hpl.jena.tdb.transaction.Transaction;

        $r1 = r0.<com.hp.hpl.jena.tdb.transaction.Transaction: com.hp.hpl.jena.tdb.transaction.DatasetGraphTxn activedsg>;

        return $r1;
    }

    public void setActiveDataset(com.hp.hpl.jena.tdb.transaction.DatasetGraphTxn)
    {
        java.lang.StringBuilder $r3, $r4, $r5;
        java.lang.String $r6;
        com.hp.hpl.jena.tdb.transaction.Transaction r0, $r2;
        com.hp.hpl.jena.tdb.transaction.DatasetGraphTxn r1;

        r0 := @this: com.hp.hpl.jena.tdb.transaction.Transaction;

        r1 := @parameter0: com.hp.hpl.jena.tdb.transaction.DatasetGraphTxn;

        r0.<com.hp.hpl.jena.tdb.transaction.Transaction: com.hp.hpl.jena.tdb.transaction.DatasetGraphTxn activedsg> = r1;

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.tdb.transaction.DatasetGraphTxn: com.hp.hpl.jena.tdb.transaction.Transaction getTransaction()>();

        if $r2 == r0 goto label1;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Active DSG does not point to this transaction; ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.jena.atlas.logging.Log: void warn(java.lang.Object,java.lang.String)>(r0, $r6);

     label1:
        return;
    }

    public com.hp.hpl.jena.tdb.transaction.Journal getJournal()
    {
        com.hp.hpl.jena.tdb.transaction.Transaction r0;
        com.hp.hpl.jena.tdb.transaction.Journal $r1;

        r0 := @this: com.hp.hpl.jena.tdb.transaction.Transaction;

        $r1 = r0.<com.hp.hpl.jena.tdb.transaction.Transaction: com.hp.hpl.jena.tdb.transaction.Journal journal>;

        return $r1;
    }

    public java.util.List iterators()
    {
        java.util.List $r1, $r2;
        com.hp.hpl.jena.tdb.transaction.Transaction r0;

        r0 := @this: com.hp.hpl.jena.tdb.transaction.Transaction;

        $r1 = r0.<com.hp.hpl.jena.tdb.transaction.Transaction: java.util.List iterators>;

        $r2 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r1);

        return $r2;
    }

    public void addIterator(java.util.Iterator)
    {
        java.util.List $r2;
        java.util.Iterator r1;
        com.hp.hpl.jena.tdb.transaction.Transaction r0;

        r0 := @this: com.hp.hpl.jena.tdb.transaction.Transaction;

        r1 := @parameter0: java.util.Iterator;

        $r2 = r0.<com.hp.hpl.jena.tdb.transaction.Transaction: java.util.List iterators>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        return;
    }

    public void removeIterator(java.util.Iterator)
    {
        java.util.List $r2;
        java.util.Iterator r1;
        com.hp.hpl.jena.tdb.transaction.Transaction r0;

        r0 := @this: com.hp.hpl.jena.tdb.transaction.Transaction;

        r1 := @parameter0: java.util.Iterator;

        $r2 = r0.<com.hp.hpl.jena.tdb.transaction.Transaction: java.util.List iterators>;

        interfaceinvoke $r2.<java.util.List: boolean remove(java.lang.Object)>(r1);

        return;
    }

    public java.util.List lifecycleComponents()
    {
        java.util.List $r2, $r3;
        java.util.ArrayList $r0;
        com.hp.hpl.jena.tdb.transaction.Transaction r1;

        r1 := @this: com.hp.hpl.jena.tdb.transaction.Transaction;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r2 = r1.<com.hp.hpl.jena.tdb.transaction.Transaction: java.util.List nodeTableTrans>;

        interfaceinvoke $r0.<java.util.List: boolean addAll(java.util.Collection)>($r2);

        $r3 = r1.<com.hp.hpl.jena.tdb.transaction.Transaction: java.util.List blkMgrs>;

        interfaceinvoke $r0.<java.util.List: boolean addAll(java.util.Collection)>($r3);

        return $r0;
    }

    public void addComponent(com.hp.hpl.jena.tdb.transaction.NodeTableTrans)
    {
        com.hp.hpl.jena.tdb.transaction.NodeTableTrans r1;
        java.util.List $r2;
        com.hp.hpl.jena.tdb.transaction.Transaction r0;

        r0 := @this: com.hp.hpl.jena.tdb.transaction.Transaction;

        r1 := @parameter0: com.hp.hpl.jena.tdb.transaction.NodeTableTrans;

        $r2 = r0.<com.hp.hpl.jena.tdb.transaction.Transaction: java.util.List nodeTableTrans>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        return;
    }

    public void addComponent(com.hp.hpl.jena.tdb.transaction.BlockMgrJournal)
    {
        java.util.List $r2;
        com.hp.hpl.jena.tdb.transaction.BlockMgrJournal r1;
        com.hp.hpl.jena.tdb.transaction.Transaction r0;

        r0 := @this: com.hp.hpl.jena.tdb.transaction.Transaction;

        r1 := @parameter0: com.hp.hpl.jena.tdb.transaction.BlockMgrJournal;

        $r2 = r0.<com.hp.hpl.jena.tdb.transaction.Transaction: java.util.List blkMgrs>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        return;
    }

    public com.hp.hpl.jena.tdb.store.DatasetGraphTDB getBaseDataset()
    {
        com.hp.hpl.jena.tdb.store.DatasetGraphTDB $r1;
        com.hp.hpl.jena.tdb.transaction.Transaction r0;

        r0 := @this: com.hp.hpl.jena.tdb.transaction.Transaction;

        $r1 = r0.<com.hp.hpl.jena.tdb.transaction.Transaction: com.hp.hpl.jena.tdb.store.DatasetGraphTDB basedsg>;

        return $r1;
    }

    public java.lang.String toString()
    {
        long $l0;
        com.hp.hpl.jena.tdb.store.DatasetGraphTDB $r11;
        com.hp.hpl.jena.tdb.base.file.Location $r12;
        java.lang.String $r13, $r15;
        com.hp.hpl.jena.tdb.transaction.Transaction r2;
        com.hp.hpl.jena.tdb.transaction.TxnState $r8;
        com.hp.hpl.jena.query.ReadWrite $r5;
        java.lang.StringBuilder $r0, $r1, $r3, $r4, $r6, $r7, $r9, $r10, $r14;

        r2 := @this: com.hp.hpl.jena.tdb.transaction.Transaction;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Transaction: ");

        $l0 = r2.<com.hp.hpl.jena.tdb.transaction.Transaction: long id>;

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" : Mode=");

        $r5 = r2.<com.hp.hpl.jena.tdb.transaction.Transaction: com.hp.hpl.jena.query.ReadWrite mode>;

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" : State=");

        $r8 = r2.<com.hp.hpl.jena.tdb.transaction.Transaction: com.hp.hpl.jena.tdb.transaction.TxnState state>;

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" : ");

        $r11 = r2.<com.hp.hpl.jena.tdb.transaction.Transaction: com.hp.hpl.jena.tdb.store.DatasetGraphTDB basedsg>;

        $r12 = virtualinvoke $r11.<com.hp.hpl.jena.tdb.store.DatasetGraphTDB: com.hp.hpl.jena.tdb.base.file.Location getLocation()>();

        $r13 = virtualinvoke $r12.<com.hp.hpl.jena.tdb.base.file.Location: java.lang.String getDirectoryPath()>();

        $r14 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r15;
    }

    public java.lang.String getLabel()
    {
        java.lang.String $r1;
        com.hp.hpl.jena.tdb.transaction.Transaction r0;

        r0 := @this: com.hp.hpl.jena.tdb.transaction.Transaction;

        $r1 = r0.<com.hp.hpl.jena.tdb.transaction.Transaction: java.lang.String label>;

        return $r1;
    }
}
