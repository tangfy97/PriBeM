public class org.springframework.core.type.filter.AnnotationTypeFilter extends org.springframework.core.type.filter.AbstractTypeHierarchyTraversingFilter
{
    private final java.lang.Class annotationType;
    private final boolean considerMetaAnnotations;

    public void <init>(java.lang.Class)
    {
        java.lang.Class r1;
        org.springframework.core.type.filter.AnnotationTypeFilter r0;

        r0 := @this: org.springframework.core.type.filter.AnnotationTypeFilter;

        r1 := @parameter0: java.lang.Class;

        specialinvoke r0.<org.springframework.core.type.filter.AnnotationTypeFilter: void <init>(java.lang.Class,boolean)>(r1, 1);

        return;
    }

    public void <init>(java.lang.Class, boolean)
    {
        java.lang.Class r1;
        org.springframework.core.type.filter.AnnotationTypeFilter r0;
        boolean $z0, z1;

        r0 := @this: org.springframework.core.type.filter.AnnotationTypeFilter;

        r1 := @parameter0: java.lang.Class;

        z1 := @parameter1: boolean;

        $z0 = virtualinvoke r1.<java.lang.Class: boolean isAnnotationPresent(java.lang.Class)>(class "Ljava/lang/annotation/Inherited;");

        specialinvoke r0.<org.springframework.core.type.filter.AbstractTypeHierarchyTraversingFilter: void <init>(boolean,boolean)>($z0, 0);

        r0.<org.springframework.core.type.filter.AnnotationTypeFilter: java.lang.Class annotationType> = r1;

        r0.<org.springframework.core.type.filter.AnnotationTypeFilter: boolean considerMetaAnnotations> = z1;

        return;
    }

    protected boolean matchSelf(org.springframework.core.type.classreading.MetadataReader)
    {
        org.springframework.core.type.AnnotationMetadata $r1;
        org.springframework.core.type.classreading.MetadataReader r0;
        java.lang.Class $r3, $r5;
        java.lang.String $r4, $r6;
        org.springframework.core.type.filter.AnnotationTypeFilter r2;
        boolean $z0, $z1, $z2;

        r2 := @this: org.springframework.core.type.filter.AnnotationTypeFilter;

        r0 := @parameter0: org.springframework.core.type.classreading.MetadataReader;

        $r1 = interfaceinvoke r0.<org.springframework.core.type.classreading.MetadataReader: org.springframework.core.type.AnnotationMetadata getAnnotationMetadata()>();

        $r3 = r2.<org.springframework.core.type.filter.AnnotationTypeFilter: java.lang.Class annotationType>;

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>();

        $z0 = interfaceinvoke $r1.<org.springframework.core.type.AnnotationMetadata: boolean hasAnnotation(java.lang.String)>($r4);

        if $z0 != 0 goto label2;

        $z1 = r2.<org.springframework.core.type.filter.AnnotationTypeFilter: boolean considerMetaAnnotations>;

        if $z1 == 0 goto label1;

        $r5 = r2.<org.springframework.core.type.filter.AnnotationTypeFilter: java.lang.Class annotationType>;

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        $z2 = interfaceinvoke $r1.<org.springframework.core.type.AnnotationMetadata: boolean hasMetaAnnotation(java.lang.String)>($r6);

        if $z2 != 0 goto label2;

     label1:
        return 0;

     label2:
        return 1;
    }

    protected java.lang.Boolean matchSuperClass(java.lang.String)
    {
        java.lang.'annotation'.Annotation $r8;
        java.lang.Boolean $r9, $r10, $r11;
        java.lang.Class $r0, $r4, $r6, $r7;
        java.lang.ClassNotFoundException $r12;
        java.lang.String $r1, r2;
        java.lang.ClassLoader $r5;
        boolean $z0, $z1;
        org.springframework.core.type.filter.AnnotationTypeFilter r3;

        r3 := @this: org.springframework.core.type.filter.AnnotationTypeFilter;

        r2 := @parameter0: java.lang.String;

        $r0 = class "Ljava/lang/Object;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getName()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z0 == 0 goto label1;

        $r11 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        return $r11;

     label1:
        $z1 = virtualinvoke r2.<java.lang.String: boolean startsWith(java.lang.String)>("java.");

        if $z1 == 0 goto label6;

     label2:
        $r4 = virtualinvoke r3.<java.lang.Object: java.lang.Class getClass()>();

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r6 = virtualinvoke $r5.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(r2);

        $r7 = r3.<org.springframework.core.type.filter.AnnotationTypeFilter: java.lang.Class annotationType>;

        $r8 = virtualinvoke $r6.<java.lang.Class: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>($r7);

        if $r8 == null goto label3;

        $r10 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        return $r10;

     label3:
        $r9 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

     label4:
        return $r9;

     label5:
        $r12 := @caughtexception;

     label6:
        return null;

        catch java.lang.ClassNotFoundException from label2 to label4 with label5;
    }
}
