public class groovyjarjarantlr.HTMLCodeGenerator extends groovyjarjarantlr.CodeGenerator
{
    protected int syntacticPredLevel;
    protected boolean doingLexRules;
    protected boolean firstElementInAlt;
    protected groovyjarjarantlr.AlternativeElement prevAltElem;

    public void <init>()
    {
        groovyjarjarantlr.JavaCharFormatter $r1;
        groovyjarjarantlr.HTMLCodeGenerator r0;

        r0 := @this: groovyjarjarantlr.HTMLCodeGenerator;

        specialinvoke r0.<groovyjarjarantlr.CodeGenerator: void <init>()>();

        r0.<groovyjarjarantlr.HTMLCodeGenerator: int syntacticPredLevel> = 0;

        r0.<groovyjarjarantlr.HTMLCodeGenerator: boolean doingLexRules> = 0;

        r0.<groovyjarjarantlr.HTMLCodeGenerator: groovyjarjarantlr.AlternativeElement prevAltElem> = null;

        $r1 = new groovyjarjarantlr.JavaCharFormatter;

        specialinvoke $r1.<groovyjarjarantlr.JavaCharFormatter: void <init>()>();

        r0.<groovyjarjarantlr.HTMLCodeGenerator: groovyjarjarantlr.CharFormatter charFormatter> = $r1;

        return;
    }

    static java.lang.String HTMLEncode(java.lang.String)
    {
        char $c1;
        java.lang.StringBuffer $r3;
        int $i0, i2, $i3, $i4, $i5, $i6, $i7;
        java.lang.String r1, $r2;

        r1 := @parameter0: java.lang.String;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        i2 = 0;

        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

     label1:
        if i2 >= $i0 goto label8;

        $c1 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i2);

        $i3 = (int) $c1;

        if $i3 != 38 goto label2;

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("&amp;");

        goto label7;

     label2:
        $i4 = (int) $c1;

        if $i4 != 34 goto label3;

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("&quot;");

        goto label7;

     label3:
        $i5 = (int) $c1;

        if $i5 != 39 goto label4;

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("&#039;");

        goto label7;

     label4:
        $i6 = (int) $c1;

        if $i6 != 60 goto label5;

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("&lt;");

        goto label7;

     label5:
        $i7 = (int) $c1;

        if $i7 != 62 goto label6;

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("&gt;");

        goto label7;

     label6:
        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c1);

     label7:
        i2 = i2 + 1;

        goto label1;

     label8:
        $r2 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r2;
    }

    public void gen()
    {
        java.util.Enumeration $r3;
        groovyjarjarantlr.HTMLCodeGenerator r0;
        java.io.IOException $r8;
        groovyjarjarantlr.Grammar r5;
        groovyjarjarantlr.Tool $r6, $r7, $r9;
        java.lang.Object $r4;
        groovyjarjarantlr.DefineGrammarSymbols $r1;
        java.util.Hashtable $r2;
        boolean $z0, $z1;

        r0 := @this: groovyjarjarantlr.HTMLCodeGenerator;

     label1:
        $r1 = r0.<groovyjarjarantlr.HTMLCodeGenerator: groovyjarjarantlr.DefineGrammarSymbols behavior>;

        $r2 = $r1.<groovyjarjarantlr.DefineGrammarSymbols: java.util.Hashtable grammars>;

        $r3 = virtualinvoke $r2.<java.util.Hashtable: java.util.Enumeration elements()>();

     label2:
        $z1 = interfaceinvoke $r3.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z1 == 0 goto label3;

        $r4 = interfaceinvoke $r3.<java.util.Enumeration: java.lang.Object nextElement()>();

        r5 = (groovyjarjarantlr.Grammar) $r4;

        virtualinvoke r5.<groovyjarjarantlr.Grammar: void setCodeGenerator(groovyjarjarantlr.CodeGenerator)>(r0);

        virtualinvoke r5.<groovyjarjarantlr.Grammar: void generate()>();

        $r6 = r0.<groovyjarjarantlr.HTMLCodeGenerator: groovyjarjarantlr.Tool antlrTool>;

        $z0 = virtualinvoke $r6.<groovyjarjarantlr.Tool: boolean hasError()>();

        if $z0 == 0 goto label2;

        $r7 = r0.<groovyjarjarantlr.HTMLCodeGenerator: groovyjarjarantlr.Tool antlrTool>;

        virtualinvoke $r7.<groovyjarjarantlr.Tool: void fatalError(java.lang.String)>("Exiting due to errors.");

        goto label2;

     label3:
        goto label5;

     label4:
        $r8 := @caughtexception;

        $r9 = r0.<groovyjarjarantlr.HTMLCodeGenerator: groovyjarjarantlr.Tool antlrTool>;

        virtualinvoke $r9.<groovyjarjarantlr.Tool: void reportException(java.lang.Exception,java.lang.String)>($r8, null);

     label5:
        return;

        catch java.io.IOException from label1 to label3 with label4;
    }

    public void gen(groovyjarjarantlr.ActionElement)
    {
        groovyjarjarantlr.ActionElement r1;
        groovyjarjarantlr.HTMLCodeGenerator r0;

        r0 := @this: groovyjarjarantlr.HTMLCodeGenerator;

        r1 := @parameter0: groovyjarjarantlr.ActionElement;

        return;
    }

    public void gen(groovyjarjarantlr.AlternativeBlock)
    {
        groovyjarjarantlr.AlternativeBlock r1;
        groovyjarjarantlr.HTMLCodeGenerator r0;

        r0 := @this: groovyjarjarantlr.HTMLCodeGenerator;

        r1 := @parameter0: groovyjarjarantlr.AlternativeBlock;

        virtualinvoke r0.<groovyjarjarantlr.HTMLCodeGenerator: void genGenericBlock(groovyjarjarantlr.AlternativeBlock,java.lang.String)>(r1, "");

        return;
    }

    public void gen(groovyjarjarantlr.BlockEndElement)
    {
        groovyjarjarantlr.BlockEndElement r1;
        groovyjarjarantlr.HTMLCodeGenerator r0;

        r0 := @this: groovyjarjarantlr.HTMLCodeGenerator;

        r1 := @parameter0: groovyjarjarantlr.BlockEndElement;

        return;
    }

    public void gen(groovyjarjarantlr.CharLiteralElement)
    {
        groovyjarjarantlr.HTMLCodeGenerator r1;
        groovyjarjarantlr.CharLiteralElement r0;
        java.lang.StringBuffer $r2, $r5, $r6;
        java.lang.String $r3, $r4, $r7;
        boolean $z0;

        r1 := @this: groovyjarjarantlr.HTMLCodeGenerator;

        r0 := @parameter0: groovyjarjarantlr.CharLiteralElement;

        $z0 = r0.<groovyjarjarantlr.CharLiteralElement: boolean not>;

        if $z0 == 0 goto label1;

        virtualinvoke r1.<groovyjarjarantlr.HTMLCodeGenerator: void _print(java.lang.String)>("~");

     label1:
        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r3 = r0.<groovyjarjarantlr.CharLiteralElement: java.lang.String atomText>;

        $r4 = staticinvoke <groovyjarjarantlr.HTMLCodeGenerator: java.lang.String HTMLEncode(java.lang.String)>($r3);

        $r5 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r1.<groovyjarjarantlr.HTMLCodeGenerator: void _print(java.lang.String)>($r7);

        return;
    }

    public void gen(groovyjarjarantlr.CharRangeElement)
    {
        groovyjarjarantlr.HTMLCodeGenerator r0;
        groovyjarjarantlr.CharRangeElement r2;
        java.lang.StringBuffer $r1, $r4, $r5, $r7, $r8;
        java.lang.String $r3, $r6, $r9;

        r0 := @this: groovyjarjarantlr.HTMLCodeGenerator;

        r2 := @parameter0: groovyjarjarantlr.CharRangeElement;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r3 = r2.<groovyjarjarantlr.CharRangeElement: java.lang.String beginText>;

        $r4 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("..");

        $r6 = r2.<groovyjarjarantlr.CharRangeElement: java.lang.String endText>;

        $r7 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.HTMLCodeGenerator: void print(java.lang.String)>($r9);

        return;
    }

    public void gen(groovyjarjarantlr.LexerGrammar) throws java.io.IOException
    {
        java.util.Enumeration $r33;
        groovyjarjarantlr.Grammar $r5, $r12, $r18, $r22, $r26, $r31, $r38;
        groovyjarjarantlr.collections.impl.Vector $r32;
        boolean $z0, $z1;
        java.io.PrintWriter $r17, $r34;
        groovyjarjarantlr.HTMLCodeGenerator r0;
        groovyjarjarantlr.LexerGrammar r1;
        groovyjarjarantlr.Tool $r3, $r11;
        java.lang.StringBuffer $r2, $r4, $r7, $r8, $r10, $r14, $r15, $r20, $r21, $r24, $r25, $r28, $r29;
        java.lang.String $r6, $r9, $r13, $r16, $r19, $r23, $r27, $r30, $r37, $r39, $r40;
        groovyjarjarantlr.RuleSymbol r36;
        java.lang.Object $r35;

        r0 := @this: groovyjarjarantlr.HTMLCodeGenerator;

        r1 := @parameter0: groovyjarjarantlr.LexerGrammar;

        virtualinvoke r0.<groovyjarjarantlr.HTMLCodeGenerator: void setGrammar(groovyjarjarantlr.Grammar)>(r1);

        $r3 = r0.<groovyjarjarantlr.HTMLCodeGenerator: groovyjarjarantlr.Tool antlrTool>;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Generating ");

        $r5 = r0.<groovyjarjarantlr.HTMLCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r6 = virtualinvoke $r5.<groovyjarjarantlr.Grammar: java.lang.String getClassName()>();

        $r7 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".html");

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r3.<groovyjarjarantlr.Tool: void reportProgress(java.lang.String)>($r9);

        $r11 = r0.<groovyjarjarantlr.HTMLCodeGenerator: groovyjarjarantlr.Tool antlrTool>;

        $r10 = new java.lang.StringBuffer;

        specialinvoke $r10.<java.lang.StringBuffer: void <init>()>();

        $r12 = r0.<groovyjarjarantlr.HTMLCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r13 = virtualinvoke $r12.<groovyjarjarantlr.Grammar: java.lang.String getClassName()>();

        $r14 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".html");

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.String toString()>();

        $r17 = virtualinvoke $r11.<groovyjarjarantlr.Tool: java.io.PrintWriter openOutputFile(java.lang.String)>($r16);

        r0.<groovyjarjarantlr.HTMLCodeGenerator: java.io.PrintWriter currentOutput> = $r17;

        r0.<groovyjarjarantlr.HTMLCodeGenerator: int tabs> = 0;

        r0.<groovyjarjarantlr.HTMLCodeGenerator: boolean doingLexRules> = 1;

        virtualinvoke r0.<groovyjarjarantlr.HTMLCodeGenerator: void genHeader()>();

        virtualinvoke r0.<groovyjarjarantlr.HTMLCodeGenerator: void println(java.lang.String)>("");

        $r18 = r0.<groovyjarjarantlr.HTMLCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r19 = $r18.<groovyjarjarantlr.Grammar: java.lang.String comment>;

        if $r19 == null goto label1;

        $r38 = r0.<groovyjarjarantlr.HTMLCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r39 = $r38.<groovyjarjarantlr.Grammar: java.lang.String comment>;

        $r40 = staticinvoke <groovyjarjarantlr.HTMLCodeGenerator: java.lang.String HTMLEncode(java.lang.String)>($r39);

        virtualinvoke r0.<groovyjarjarantlr.HTMLCodeGenerator: void _println(java.lang.String)>($r40);

     label1:
        $r20 = new java.lang.StringBuffer;

        specialinvoke $r20.<java.lang.StringBuffer: void <init>()>();

        $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Definition of lexer ");

        $r22 = r0.<groovyjarjarantlr.HTMLCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r23 = virtualinvoke $r22.<groovyjarjarantlr.Grammar: java.lang.String getClassName()>();

        $r24 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r23);

        $r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", which is a subclass of ");

        $r26 = r0.<groovyjarjarantlr.HTMLCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r27 = virtualinvoke $r26.<groovyjarjarantlr.Grammar: java.lang.String getSuperClass()>();

        $r28 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r27);

        $r29 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".");

        $r30 = virtualinvoke $r29.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.HTMLCodeGenerator: void println(java.lang.String)>($r30);

        virtualinvoke r0.<groovyjarjarantlr.HTMLCodeGenerator: void genNextToken()>();

        $r31 = r0.<groovyjarjarantlr.HTMLCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r32 = $r31.<groovyjarjarantlr.Grammar: groovyjarjarantlr.collections.impl.Vector rules>;

        $r33 = virtualinvoke $r32.<groovyjarjarantlr.collections.impl.Vector: java.util.Enumeration elements()>();

     label2:
        $z1 = interfaceinvoke $r33.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z1 == 0 goto label3;

        $r35 = interfaceinvoke $r33.<java.util.Enumeration: java.lang.Object nextElement()>();

        r36 = (groovyjarjarantlr.RuleSymbol) $r35;

        $r37 = r36.<groovyjarjarantlr.RuleSymbol: java.lang.String id>;

        $z0 = virtualinvoke $r37.<java.lang.String: boolean equals(java.lang.Object)>("mnextToken");

        if $z0 != 0 goto label2;

        virtualinvoke r0.<groovyjarjarantlr.HTMLCodeGenerator: void genRule(groovyjarjarantlr.RuleSymbol)>(r36);

        goto label2;

     label3:
        $r34 = r0.<groovyjarjarantlr.HTMLCodeGenerator: java.io.PrintWriter currentOutput>;

        virtualinvoke $r34.<java.io.PrintWriter: void close()>();

        r0.<groovyjarjarantlr.HTMLCodeGenerator: java.io.PrintWriter currentOutput> = null;

        r0.<groovyjarjarantlr.HTMLCodeGenerator: boolean doingLexRules> = 0;

        return;
    }

    public void gen(groovyjarjarantlr.OneOrMoreBlock)
    {
        groovyjarjarantlr.OneOrMoreBlock r1;
        groovyjarjarantlr.HTMLCodeGenerator r0;

        r0 := @this: groovyjarjarantlr.HTMLCodeGenerator;

        r1 := @parameter0: groovyjarjarantlr.OneOrMoreBlock;

        virtualinvoke r0.<groovyjarjarantlr.HTMLCodeGenerator: void genGenericBlock(groovyjarjarantlr.AlternativeBlock,java.lang.String)>(r1, "+");

        return;
    }

    public void gen(groovyjarjarantlr.ParserGrammar) throws java.io.IOException
    {
        java.util.Enumeration $r33;
        groovyjarjarantlr.Grammar $r5, $r12, $r18, $r22, $r26, $r31, $r38;
        groovyjarjarantlr.collections.impl.Vector $r32;
        boolean $z0, $z1;
        java.io.PrintWriter $r17, $r34;
        groovyjarjarantlr.HTMLCodeGenerator r0;
        groovyjarjarantlr.GrammarSymbol r36;
        groovyjarjarantlr.Tool $r3, $r11;
        java.lang.StringBuffer $r2, $r4, $r7, $r8, $r10, $r14, $r15, $r20, $r21, $r24, $r25, $r28, $r29;
        int $i0, $i1;
        java.lang.String $r6, $r9, $r13, $r16, $r19, $r23, $r27, $r30, $r39, $r40;
        groovyjarjarantlr.RuleSymbol $r37;
        groovyjarjarantlr.ParserGrammar r1;
        java.lang.Object $r35;

        r0 := @this: groovyjarjarantlr.HTMLCodeGenerator;

        r1 := @parameter0: groovyjarjarantlr.ParserGrammar;

        virtualinvoke r0.<groovyjarjarantlr.HTMLCodeGenerator: void setGrammar(groovyjarjarantlr.Grammar)>(r1);

        $r3 = r0.<groovyjarjarantlr.HTMLCodeGenerator: groovyjarjarantlr.Tool antlrTool>;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Generating ");

        $r5 = r0.<groovyjarjarantlr.HTMLCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r6 = virtualinvoke $r5.<groovyjarjarantlr.Grammar: java.lang.String getClassName()>();

        $r7 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".html");

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r3.<groovyjarjarantlr.Tool: void reportProgress(java.lang.String)>($r9);

        $r11 = r0.<groovyjarjarantlr.HTMLCodeGenerator: groovyjarjarantlr.Tool antlrTool>;

        $r10 = new java.lang.StringBuffer;

        specialinvoke $r10.<java.lang.StringBuffer: void <init>()>();

        $r12 = r0.<groovyjarjarantlr.HTMLCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r13 = virtualinvoke $r12.<groovyjarjarantlr.Grammar: java.lang.String getClassName()>();

        $r14 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".html");

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.String toString()>();

        $r17 = virtualinvoke $r11.<groovyjarjarantlr.Tool: java.io.PrintWriter openOutputFile(java.lang.String)>($r16);

        r0.<groovyjarjarantlr.HTMLCodeGenerator: java.io.PrintWriter currentOutput> = $r17;

        r0.<groovyjarjarantlr.HTMLCodeGenerator: int tabs> = 0;

        virtualinvoke r0.<groovyjarjarantlr.HTMLCodeGenerator: void genHeader()>();

        virtualinvoke r0.<groovyjarjarantlr.HTMLCodeGenerator: void println(java.lang.String)>("");

        $r18 = r0.<groovyjarjarantlr.HTMLCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r19 = $r18.<groovyjarjarantlr.Grammar: java.lang.String comment>;

        if $r19 == null goto label1;

        $r38 = r0.<groovyjarjarantlr.HTMLCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r39 = $r38.<groovyjarjarantlr.Grammar: java.lang.String comment>;

        $r40 = staticinvoke <groovyjarjarantlr.HTMLCodeGenerator: java.lang.String HTMLEncode(java.lang.String)>($r39);

        virtualinvoke r0.<groovyjarjarantlr.HTMLCodeGenerator: void _println(java.lang.String)>($r40);

     label1:
        $r20 = new java.lang.StringBuffer;

        specialinvoke $r20.<java.lang.StringBuffer: void <init>()>();

        $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Definition of parser ");

        $r22 = r0.<groovyjarjarantlr.HTMLCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r23 = virtualinvoke $r22.<groovyjarjarantlr.Grammar: java.lang.String getClassName()>();

        $r24 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r23);

        $r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", which is a subclass of ");

        $r26 = r0.<groovyjarjarantlr.HTMLCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r27 = virtualinvoke $r26.<groovyjarjarantlr.Grammar: java.lang.String getSuperClass()>();

        $r28 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r27);

        $r29 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".");

        $r30 = virtualinvoke $r29.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.HTMLCodeGenerator: void println(java.lang.String)>($r30);

        $r31 = r0.<groovyjarjarantlr.HTMLCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r32 = $r31.<groovyjarjarantlr.Grammar: groovyjarjarantlr.collections.impl.Vector rules>;

        $r33 = virtualinvoke $r32.<groovyjarjarantlr.collections.impl.Vector: java.util.Enumeration elements()>();

     label2:
        $z1 = interfaceinvoke $r33.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z1 == 0 goto label3;

        virtualinvoke r0.<groovyjarjarantlr.HTMLCodeGenerator: void println(java.lang.String)>("");

        $r35 = interfaceinvoke $r33.<java.util.Enumeration: java.lang.Object nextElement()>();

        r36 = (groovyjarjarantlr.GrammarSymbol) $r35;

        $z0 = r36 instanceof groovyjarjarantlr.RuleSymbol;

        if $z0 == 0 goto label2;

        $r37 = (groovyjarjarantlr.RuleSymbol) r36;

        virtualinvoke r0.<groovyjarjarantlr.HTMLCodeGenerator: void genRule(groovyjarjarantlr.RuleSymbol)>($r37);

        goto label2;

     label3:
        $i0 = r0.<groovyjarjarantlr.HTMLCodeGenerator: int tabs>;

        $i1 = $i0 - 1;

        r0.<groovyjarjarantlr.HTMLCodeGenerator: int tabs> = $i1;

        virtualinvoke r0.<groovyjarjarantlr.HTMLCodeGenerator: void println(java.lang.String)>("");

        virtualinvoke r0.<groovyjarjarantlr.HTMLCodeGenerator: void genTail()>();

        $r34 = r0.<groovyjarjarantlr.HTMLCodeGenerator: java.io.PrintWriter currentOutput>;

        virtualinvoke $r34.<java.io.PrintWriter: void close()>();

        r0.<groovyjarjarantlr.HTMLCodeGenerator: java.io.PrintWriter currentOutput> = null;

        return;
    }

    public void gen(groovyjarjarantlr.RuleRefElement)
    {
        groovyjarjarantlr.Grammar $r3, $r8;
        java.lang.StringBuffer $r6, $r7, $r10, $r11, $r13, $r14;
        groovyjarjarantlr.RuleRefElement r1;
        java.lang.String $r2, $r9, $r12, $r15, $r16;
        groovyjarjarantlr.HTMLCodeGenerator r0;
        groovyjarjarantlr.RuleSymbol r5;
        groovyjarjarantlr.GrammarSymbol $r4;

        r0 := @this: groovyjarjarantlr.HTMLCodeGenerator;

        r1 := @parameter0: groovyjarjarantlr.RuleRefElement;

        $r3 = r0.<groovyjarjarantlr.HTMLCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r2 = r1.<groovyjarjarantlr.RuleRefElement: java.lang.String targetRule>;

        $r4 = virtualinvoke $r3.<groovyjarjarantlr.Grammar: groovyjarjarantlr.GrammarSymbol getSymbol(java.lang.String)>($r2);

        r5 = (groovyjarjarantlr.RuleSymbol) $r4;

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("<a href=\"");

        $r8 = r0.<groovyjarjarantlr.HTMLCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r9 = virtualinvoke $r8.<groovyjarjarantlr.Grammar: java.lang.String getClassName()>();

        $r10 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".html#");

        $r12 = r1.<groovyjarjarantlr.RuleRefElement: java.lang.String targetRule>;

        $r13 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\">");

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.HTMLCodeGenerator: void _print(java.lang.String)>($r15);

        $r16 = r1.<groovyjarjarantlr.RuleRefElement: java.lang.String targetRule>;

        virtualinvoke r0.<groovyjarjarantlr.HTMLCodeGenerator: void _print(java.lang.String)>($r16);

        virtualinvoke r0.<groovyjarjarantlr.HTMLCodeGenerator: void _print(java.lang.String)>("</a>");

        virtualinvoke r0.<groovyjarjarantlr.HTMLCodeGenerator: void _print(java.lang.String)>(" ");

        return;
    }

    public void gen(groovyjarjarantlr.StringLiteralElement)
    {
        groovyjarjarantlr.HTMLCodeGenerator r1;
        java.lang.String $r2, $r3;
        groovyjarjarantlr.StringLiteralElement r0;
        boolean $z0;

        r1 := @this: groovyjarjarantlr.HTMLCodeGenerator;

        r0 := @parameter0: groovyjarjarantlr.StringLiteralElement;

        $z0 = r0.<groovyjarjarantlr.StringLiteralElement: boolean not>;

        if $z0 == 0 goto label1;

        virtualinvoke r1.<groovyjarjarantlr.HTMLCodeGenerator: void _print(java.lang.String)>("~");

     label1:
        $r2 = r0.<groovyjarjarantlr.StringLiteralElement: java.lang.String atomText>;

        $r3 = staticinvoke <groovyjarjarantlr.HTMLCodeGenerator: java.lang.String HTMLEncode(java.lang.String)>($r2);

        virtualinvoke r1.<groovyjarjarantlr.HTMLCodeGenerator: void _print(java.lang.String)>($r3);

        virtualinvoke r1.<groovyjarjarantlr.HTMLCodeGenerator: void _print(java.lang.String)>(" ");

        return;
    }

    public void gen(groovyjarjarantlr.TokenRangeElement)
    {
        groovyjarjarantlr.HTMLCodeGenerator r0;
        groovyjarjarantlr.TokenRangeElement r2;
        java.lang.StringBuffer $r1, $r4, $r5, $r7, $r8;
        java.lang.String $r3, $r6, $r9;

        r0 := @this: groovyjarjarantlr.HTMLCodeGenerator;

        r2 := @parameter0: groovyjarjarantlr.TokenRangeElement;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r3 = r2.<groovyjarjarantlr.TokenRangeElement: java.lang.String beginText>;

        $r4 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("..");

        $r6 = r2.<groovyjarjarantlr.TokenRangeElement: java.lang.String endText>;

        $r7 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.HTMLCodeGenerator: void print(java.lang.String)>($r9);

        return;
    }

    public void gen(groovyjarjarantlr.TokenRefElement)
    {
        groovyjarjarantlr.HTMLCodeGenerator r1;
        groovyjarjarantlr.TokenRefElement r0;
        java.lang.String $r2;
        boolean $z0;

        r1 := @this: groovyjarjarantlr.HTMLCodeGenerator;

        r0 := @parameter0: groovyjarjarantlr.TokenRefElement;

        $z0 = r0.<groovyjarjarantlr.TokenRefElement: boolean not>;

        if $z0 == 0 goto label1;

        virtualinvoke r1.<groovyjarjarantlr.HTMLCodeGenerator: void _print(java.lang.String)>("~");

     label1:
        $r2 = r0.<groovyjarjarantlr.TokenRefElement: java.lang.String atomText>;

        virtualinvoke r1.<groovyjarjarantlr.HTMLCodeGenerator: void _print(java.lang.String)>($r2);

        virtualinvoke r1.<groovyjarjarantlr.HTMLCodeGenerator: void _print(java.lang.String)>(" ");

        return;
    }

    public void gen(groovyjarjarantlr.TreeElement)
    {
        java.lang.StringBuffer $r1, $r3, $r4;
        groovyjarjarantlr.HTMLCodeGenerator r0;
        groovyjarjarantlr.TreeElement r2;
        java.lang.String $r5;

        r0 := @this: groovyjarjarantlr.HTMLCodeGenerator;

        r2 := @parameter0: groovyjarjarantlr.TreeElement;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.HTMLCodeGenerator: void print(java.lang.String)>($r5);

        return;
    }

    public void gen(groovyjarjarantlr.TreeWalkerGrammar) throws java.io.IOException
    {
        java.util.Enumeration $r33;
        groovyjarjarantlr.Grammar $r5, $r12, $r18, $r22, $r26, $r31, $r38;
        groovyjarjarantlr.collections.impl.Vector $r32;
        boolean $z0, $z1;
        java.io.PrintWriter $r17, $r34;
        groovyjarjarantlr.HTMLCodeGenerator r0;
        groovyjarjarantlr.GrammarSymbol r36;
        groovyjarjarantlr.Tool $r3, $r11;
        java.lang.StringBuffer $r2, $r4, $r7, $r8, $r10, $r14, $r15, $r20, $r21, $r24, $r25, $r28, $r29;
        int $i0, $i1, $i2, $i3;
        java.lang.String $r6, $r9, $r13, $r16, $r19, $r23, $r27, $r30, $r39, $r40;
        groovyjarjarantlr.RuleSymbol $r37;
        groovyjarjarantlr.TreeWalkerGrammar r1;
        java.lang.Object $r35;

        r0 := @this: groovyjarjarantlr.HTMLCodeGenerator;

        r1 := @parameter0: groovyjarjarantlr.TreeWalkerGrammar;

        virtualinvoke r0.<groovyjarjarantlr.HTMLCodeGenerator: void setGrammar(groovyjarjarantlr.Grammar)>(r1);

        $r3 = r0.<groovyjarjarantlr.HTMLCodeGenerator: groovyjarjarantlr.Tool antlrTool>;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Generating ");

        $r5 = r0.<groovyjarjarantlr.HTMLCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r6 = virtualinvoke $r5.<groovyjarjarantlr.Grammar: java.lang.String getClassName()>();

        $r7 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".html");

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r3.<groovyjarjarantlr.Tool: void reportProgress(java.lang.String)>($r9);

        $r11 = r0.<groovyjarjarantlr.HTMLCodeGenerator: groovyjarjarantlr.Tool antlrTool>;

        $r10 = new java.lang.StringBuffer;

        specialinvoke $r10.<java.lang.StringBuffer: void <init>()>();

        $r12 = r0.<groovyjarjarantlr.HTMLCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r13 = virtualinvoke $r12.<groovyjarjarantlr.Grammar: java.lang.String getClassName()>();

        $r14 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".html");

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.String toString()>();

        $r17 = virtualinvoke $r11.<groovyjarjarantlr.Tool: java.io.PrintWriter openOutputFile(java.lang.String)>($r16);

        r0.<groovyjarjarantlr.HTMLCodeGenerator: java.io.PrintWriter currentOutput> = $r17;

        r0.<groovyjarjarantlr.HTMLCodeGenerator: int tabs> = 0;

        virtualinvoke r0.<groovyjarjarantlr.HTMLCodeGenerator: void genHeader()>();

        virtualinvoke r0.<groovyjarjarantlr.HTMLCodeGenerator: void println(java.lang.String)>("");

        virtualinvoke r0.<groovyjarjarantlr.HTMLCodeGenerator: void println(java.lang.String)>("");

        $r18 = r0.<groovyjarjarantlr.HTMLCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r19 = $r18.<groovyjarjarantlr.Grammar: java.lang.String comment>;

        if $r19 == null goto label1;

        $r38 = r0.<groovyjarjarantlr.HTMLCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r39 = $r38.<groovyjarjarantlr.Grammar: java.lang.String comment>;

        $r40 = staticinvoke <groovyjarjarantlr.HTMLCodeGenerator: java.lang.String HTMLEncode(java.lang.String)>($r39);

        virtualinvoke r0.<groovyjarjarantlr.HTMLCodeGenerator: void _println(java.lang.String)>($r40);

     label1:
        $r20 = new java.lang.StringBuffer;

        specialinvoke $r20.<java.lang.StringBuffer: void <init>()>();

        $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Definition of tree parser ");

        $r22 = r0.<groovyjarjarantlr.HTMLCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r23 = virtualinvoke $r22.<groovyjarjarantlr.Grammar: java.lang.String getClassName()>();

        $r24 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r23);

        $r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", which is a subclass of ");

        $r26 = r0.<groovyjarjarantlr.HTMLCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r27 = virtualinvoke $r26.<groovyjarjarantlr.Grammar: java.lang.String getSuperClass()>();

        $r28 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r27);

        $r29 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".");

        $r30 = virtualinvoke $r29.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.HTMLCodeGenerator: void println(java.lang.String)>($r30);

        virtualinvoke r0.<groovyjarjarantlr.HTMLCodeGenerator: void println(java.lang.String)>("");

        $i0 = r0.<groovyjarjarantlr.HTMLCodeGenerator: int tabs>;

        $i1 = $i0 + 1;

        r0.<groovyjarjarantlr.HTMLCodeGenerator: int tabs> = $i1;

        $r31 = r0.<groovyjarjarantlr.HTMLCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r32 = $r31.<groovyjarjarantlr.Grammar: groovyjarjarantlr.collections.impl.Vector rules>;

        $r33 = virtualinvoke $r32.<groovyjarjarantlr.collections.impl.Vector: java.util.Enumeration elements()>();

     label2:
        $z1 = interfaceinvoke $r33.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z1 == 0 goto label3;

        virtualinvoke r0.<groovyjarjarantlr.HTMLCodeGenerator: void println(java.lang.String)>("");

        $r35 = interfaceinvoke $r33.<java.util.Enumeration: java.lang.Object nextElement()>();

        r36 = (groovyjarjarantlr.GrammarSymbol) $r35;

        $z0 = r36 instanceof groovyjarjarantlr.RuleSymbol;

        if $z0 == 0 goto label2;

        $r37 = (groovyjarjarantlr.RuleSymbol) r36;

        virtualinvoke r0.<groovyjarjarantlr.HTMLCodeGenerator: void genRule(groovyjarjarantlr.RuleSymbol)>($r37);

        goto label2;

     label3:
        $i2 = r0.<groovyjarjarantlr.HTMLCodeGenerator: int tabs>;

        $i3 = $i2 - 1;

        r0.<groovyjarjarantlr.HTMLCodeGenerator: int tabs> = $i3;

        virtualinvoke r0.<groovyjarjarantlr.HTMLCodeGenerator: void println(java.lang.String)>("");

        $r34 = r0.<groovyjarjarantlr.HTMLCodeGenerator: java.io.PrintWriter currentOutput>;

        virtualinvoke $r34.<java.io.PrintWriter: void close()>();

        r0.<groovyjarjarantlr.HTMLCodeGenerator: java.io.PrintWriter currentOutput> = null;

        return;
    }

    public void gen(groovyjarjarantlr.WildcardElement)
    {
        groovyjarjarantlr.HTMLCodeGenerator r0;
        groovyjarjarantlr.WildcardElement r1;

        r0 := @this: groovyjarjarantlr.HTMLCodeGenerator;

        r1 := @parameter0: groovyjarjarantlr.WildcardElement;

        virtualinvoke r0.<groovyjarjarantlr.HTMLCodeGenerator: void _print(java.lang.String)>(". ");

        return;
    }

    public void gen(groovyjarjarantlr.ZeroOrMoreBlock)
    {
        groovyjarjarantlr.ZeroOrMoreBlock r1;
        groovyjarjarantlr.HTMLCodeGenerator r0;

        r0 := @this: groovyjarjarantlr.HTMLCodeGenerator;

        r1 := @parameter0: groovyjarjarantlr.ZeroOrMoreBlock;

        virtualinvoke r0.<groovyjarjarantlr.HTMLCodeGenerator: void genGenericBlock(groovyjarjarantlr.AlternativeBlock,java.lang.String)>(r1, "*");

        return;
    }

    protected void genAlt(groovyjarjarantlr.Alternative)
    {
        groovyjarjarantlr.HTMLCodeGenerator r2;
        java.lang.String $r4;
        groovyjarjarantlr.Token $r1, $r3;
        groovyjarjarantlr.Alternative r0;
        groovyjarjarantlr.AlternativeElement r5;
        boolean $z0;

        r2 := @this: groovyjarjarantlr.HTMLCodeGenerator;

        r0 := @parameter0: groovyjarjarantlr.Alternative;

        $r1 = virtualinvoke r0.<groovyjarjarantlr.Alternative: groovyjarjarantlr.Token getTreeSpecifier()>();

        if $r1 == null goto label1;

        $r3 = virtualinvoke r0.<groovyjarjarantlr.Alternative: groovyjarjarantlr.Token getTreeSpecifier()>();

        $r4 = virtualinvoke $r3.<groovyjarjarantlr.Token: java.lang.String getText()>();

        virtualinvoke r2.<groovyjarjarantlr.HTMLCodeGenerator: void _print(java.lang.String)>($r4);

     label1:
        r2.<groovyjarjarantlr.HTMLCodeGenerator: groovyjarjarantlr.AlternativeElement prevAltElem> = null;

        r5 = r0.<groovyjarjarantlr.Alternative: groovyjarjarantlr.AlternativeElement head>;

     label2:
        $z0 = r5 instanceof groovyjarjarantlr.BlockEndElement;

        if $z0 != 0 goto label3;

        virtualinvoke r5.<groovyjarjarantlr.AlternativeElement: void generate()>();

        r2.<groovyjarjarantlr.HTMLCodeGenerator: boolean firstElementInAlt> = 0;

        r2.<groovyjarjarantlr.HTMLCodeGenerator: groovyjarjarantlr.AlternativeElement prevAltElem> = r5;

        r5 = r5.<groovyjarjarantlr.AlternativeElement: groovyjarjarantlr.AlternativeElement next>;

        goto label2;

     label3:
        return;
    }

    public void genCommonBlock(groovyjarjarantlr.AlternativeBlock)
    {
        groovyjarjarantlr.AlternativeBlock r0;
        groovyjarjarantlr.HTMLCodeGenerator r4;
        groovyjarjarantlr.Alternative $r2;
        int $i0, $i1, i2, $i3, $i4, $i5, $i6;
        groovyjarjarantlr.collections.impl.Vector $r1, $r5;
        groovyjarjarantlr.AlternativeElement r3;
        boolean $z0;

        r4 := @this: groovyjarjarantlr.HTMLCodeGenerator;

        r0 := @parameter0: groovyjarjarantlr.AlternativeBlock;

        i2 = 0;

     label1:
        $r1 = r0.<groovyjarjarantlr.AlternativeBlock: groovyjarjarantlr.collections.impl.Vector alternatives>;

        $i0 = virtualinvoke $r1.<groovyjarjarantlr.collections.impl.Vector: int size()>();

        if i2 >= $i0 goto label3;

        $r2 = virtualinvoke r0.<groovyjarjarantlr.AlternativeBlock: groovyjarjarantlr.Alternative getAlternativeAt(int)>(i2);

        r3 = $r2.<groovyjarjarantlr.Alternative: groovyjarjarantlr.AlternativeElement head>;

        if i2 <= 0 goto label2;

        $r5 = r0.<groovyjarjarantlr.AlternativeBlock: groovyjarjarantlr.collections.impl.Vector alternatives>;

        $i1 = virtualinvoke $r5.<groovyjarjarantlr.collections.impl.Vector: int size()>();

        if $i1 <= 1 goto label2;

        virtualinvoke r4.<groovyjarjarantlr.HTMLCodeGenerator: void _println(java.lang.String)>("");

        virtualinvoke r4.<groovyjarjarantlr.HTMLCodeGenerator: void print(java.lang.String)>("|\t");

     label2:
        $z0 = r4.<groovyjarjarantlr.HTMLCodeGenerator: boolean firstElementInAlt>;

        r4.<groovyjarjarantlr.HTMLCodeGenerator: boolean firstElementInAlt> = 1;

        $i3 = r4.<groovyjarjarantlr.HTMLCodeGenerator: int tabs>;

        $i4 = $i3 + 1;

        r4.<groovyjarjarantlr.HTMLCodeGenerator: int tabs> = $i4;

        virtualinvoke r4.<groovyjarjarantlr.HTMLCodeGenerator: void genAlt(groovyjarjarantlr.Alternative)>($r2);

        $i5 = r4.<groovyjarjarantlr.HTMLCodeGenerator: int tabs>;

        $i6 = $i5 - 1;

        r4.<groovyjarjarantlr.HTMLCodeGenerator: int tabs> = $i6;

        r4.<groovyjarjarantlr.HTMLCodeGenerator: boolean firstElementInAlt> = $z0;

        i2 = i2 + 1;

        goto label1;

     label3:
        return;
    }

    public void genFollowSetForRuleBlock(groovyjarjarantlr.RuleBlock)
    {
        groovyjarjarantlr.RuleBlock r2;
        groovyjarjarantlr.HTMLCodeGenerator r0;
        groovyjarjarantlr.LLkGrammarAnalyzer $r4;
        groovyjarjarantlr.Grammar $r1, $r6;
        groovyjarjarantlr.RuleEndElement $r3;
        groovyjarjarantlr.Lookahead $r5;
        int $i0;

        r0 := @this: groovyjarjarantlr.HTMLCodeGenerator;

        r2 := @parameter0: groovyjarjarantlr.RuleBlock;

        $r1 = r0.<groovyjarjarantlr.HTMLCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r4 = $r1.<groovyjarjarantlr.Grammar: groovyjarjarantlr.LLkGrammarAnalyzer theLLkAnalyzer>;

        $r3 = r2.<groovyjarjarantlr.RuleBlock: groovyjarjarantlr.RuleEndElement endNode>;

        $r5 = interfaceinvoke $r4.<groovyjarjarantlr.LLkGrammarAnalyzer: groovyjarjarantlr.Lookahead FOLLOW(int,groovyjarjarantlr.RuleEndElement)>(1, $r3);

        $r6 = r0.<groovyjarjarantlr.HTMLCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $i0 = $r6.<groovyjarjarantlr.Grammar: int maxk>;

        virtualinvoke r0.<groovyjarjarantlr.HTMLCodeGenerator: void printSet(int,int,groovyjarjarantlr.Lookahead)>($i0, 1, $r5);

        return;
    }

    protected void genGenericBlock(groovyjarjarantlr.AlternativeBlock, java.lang.String)
    {
        groovyjarjarantlr.AlternativeBlock r0, $r18;
        java.lang.StringBuffer $r3, $r4, $r6, $r7, $r9, $r10, $r11, $r12;
        int $i0, $i1, $i2;
        java.lang.String r5, $r8, $r13;
        groovyjarjarantlr.collections.impl.Vector $r1, $r19, $r20;
        boolean $z0, $z1, $z2;
        groovyjarjarantlr.HTMLCodeGenerator r2;
        groovyjarjarantlr.AlternativeElement $r14, $r15, $r16, $r17;

        r2 := @this: groovyjarjarantlr.HTMLCodeGenerator;

        r0 := @parameter0: groovyjarjarantlr.AlternativeBlock;

        r5 := @parameter1: java.lang.String;

        $r1 = r0.<groovyjarjarantlr.AlternativeBlock: groovyjarjarantlr.collections.impl.Vector alternatives>;

        $i0 = virtualinvoke $r1.<groovyjarjarantlr.collections.impl.Vector: int size()>();

        if $i0 <= 1 goto label4;

        $z1 = r2.<groovyjarjarantlr.HTMLCodeGenerator: boolean firstElementInAlt>;

        if $z1 != 0 goto label3;

        $r15 = r2.<groovyjarjarantlr.HTMLCodeGenerator: groovyjarjarantlr.AlternativeElement prevAltElem>;

        if $r15 == null goto label1;

        $r16 = r2.<groovyjarjarantlr.HTMLCodeGenerator: groovyjarjarantlr.AlternativeElement prevAltElem>;

        $z2 = $r16 instanceof groovyjarjarantlr.AlternativeBlock;

        if $z2 == 0 goto label1;

        $r17 = r2.<groovyjarjarantlr.HTMLCodeGenerator: groovyjarjarantlr.AlternativeElement prevAltElem>;

        $r18 = (groovyjarjarantlr.AlternativeBlock) $r17;

        $r19 = $r18.<groovyjarjarantlr.AlternativeBlock: groovyjarjarantlr.collections.impl.Vector alternatives>;

        $i1 = virtualinvoke $r19.<groovyjarjarantlr.collections.impl.Vector: int size()>();

        if $i1 != 1 goto label2;

     label1:
        virtualinvoke r2.<groovyjarjarantlr.HTMLCodeGenerator: void _println(java.lang.String)>("");

        virtualinvoke r2.<groovyjarjarantlr.HTMLCodeGenerator: void print(java.lang.String)>("(\t");

        goto label5;

     label2:
        virtualinvoke r2.<groovyjarjarantlr.HTMLCodeGenerator: void _print(java.lang.String)>("(\t");

        goto label5;

     label3:
        virtualinvoke r2.<groovyjarjarantlr.HTMLCodeGenerator: void _print(java.lang.String)>("(\t");

        goto label5;

     label4:
        virtualinvoke r2.<groovyjarjarantlr.HTMLCodeGenerator: void _print(java.lang.String)>("( ");

     label5:
        virtualinvoke r2.<groovyjarjarantlr.HTMLCodeGenerator: void genCommonBlock(groovyjarjarantlr.AlternativeBlock)>(r0);

        $r20 = r0.<groovyjarjarantlr.AlternativeBlock: groovyjarjarantlr.collections.impl.Vector alternatives>;

        $i2 = virtualinvoke $r20.<groovyjarjarantlr.collections.impl.Vector: int size()>();

        if $i2 <= 1 goto label6;

        virtualinvoke r2.<groovyjarjarantlr.HTMLCodeGenerator: void _println(java.lang.String)>("");

        $r9 = new java.lang.StringBuffer;

        specialinvoke $r9.<java.lang.StringBuffer: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r5);

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r2.<groovyjarjarantlr.HTMLCodeGenerator: void print(java.lang.String)>($r13);

        $r14 = r0.<groovyjarjarantlr.AlternativeBlock: groovyjarjarantlr.AlternativeElement next>;

        $z0 = $r14 instanceof groovyjarjarantlr.BlockEndElement;

        if $z0 != 0 goto label7;

        virtualinvoke r2.<groovyjarjarantlr.HTMLCodeGenerator: void _println(java.lang.String)>("");

        virtualinvoke r2.<groovyjarjarantlr.HTMLCodeGenerator: void print(java.lang.String)>("");

        goto label7;

     label6:
        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r6 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r2.<groovyjarjarantlr.HTMLCodeGenerator: void _print(java.lang.String)>($r8);

     label7:
        return;
    }

    protected void genHeader()
    {
        groovyjarjarantlr.Grammar $r10;
        groovyjarjarantlr.Tool $r3, $r17;
        java.lang.StringBuffer $r1, $r2, $r5, $r6, $r8, $r9, $r12, $r13, $r15, $r16, $r19, $r21, $r22, $r24, $r25;
        java.lang.String $r4, $r7, $r11, $r14, $r18, $r20, $r23, $r26;
        groovyjarjarantlr.HTMLCodeGenerator r0;

        r0 := @this: groovyjarjarantlr.HTMLCodeGenerator;

        virtualinvoke r0.<groovyjarjarantlr.HTMLCodeGenerator: void println(java.lang.String)>("<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\">");

        virtualinvoke r0.<groovyjarjarantlr.HTMLCodeGenerator: void println(java.lang.String)>("<HTML>");

        virtualinvoke r0.<groovyjarjarantlr.HTMLCodeGenerator: void println(java.lang.String)>("<HEAD>");

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("<TITLE>Grammar ");

        $r3 = r0.<groovyjarjarantlr.HTMLCodeGenerator: groovyjarjarantlr.Tool antlrTool>;

        $r4 = $r3.<groovyjarjarantlr.Tool: java.lang.String grammarFile>;

        $r5 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("</TITLE>");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.HTMLCodeGenerator: void println(java.lang.String)>($r7);

        virtualinvoke r0.<groovyjarjarantlr.HTMLCodeGenerator: void println(java.lang.String)>("</HEAD>");

        virtualinvoke r0.<groovyjarjarantlr.HTMLCodeGenerator: void println(java.lang.String)>("<BODY>");

        virtualinvoke r0.<groovyjarjarantlr.HTMLCodeGenerator: void println(java.lang.String)>("<table summary=\"\" border=\"1\" cellpadding=\"5\">");

        virtualinvoke r0.<groovyjarjarantlr.HTMLCodeGenerator: void println(java.lang.String)>("<tr>");

        virtualinvoke r0.<groovyjarjarantlr.HTMLCodeGenerator: void println(java.lang.String)>("<td>");

        $r8 = new java.lang.StringBuffer;

        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("<font size=\"+2\">Grammar ");

        $r10 = r0.<groovyjarjarantlr.HTMLCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r11 = virtualinvoke $r10.<groovyjarjarantlr.Grammar: java.lang.String getClassName()>();

        $r12 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("</font><br>");

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.HTMLCodeGenerator: void println(java.lang.String)>($r14);

        $r15 = new java.lang.StringBuffer;

        specialinvoke $r15.<java.lang.StringBuffer: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("<a href=\"http://www.ANTLR.org\">ANTLR</a>-generated HTML file from ");

        $r17 = r0.<groovyjarjarantlr.HTMLCodeGenerator: groovyjarjarantlr.Tool antlrTool>;

        $r18 = $r17.<groovyjarjarantlr.Tool: java.lang.String grammarFile>;

        $r19 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r18);

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.HTMLCodeGenerator: void println(java.lang.String)>($r20);

        virtualinvoke r0.<groovyjarjarantlr.HTMLCodeGenerator: void println(java.lang.String)>("<p>");

        virtualinvoke r0.<groovyjarjarantlr.HTMLCodeGenerator: void println(java.lang.String)>("Terence Parr, <a href=\"http://www.magelang.com\">MageLang Institute</a>");

        $r21 = new java.lang.StringBuffer;

        specialinvoke $r21.<java.lang.StringBuffer: void <init>()>();

        $r22 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("<br>ANTLR Version ");

        $r23 = <groovyjarjarantlr.Tool: java.lang.String version>;

        $r24 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r23);

        $r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("; 1989-2005");

        $r26 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.HTMLCodeGenerator: void println(java.lang.String)>($r26);

        virtualinvoke r0.<groovyjarjarantlr.HTMLCodeGenerator: void println(java.lang.String)>("</td>");

        virtualinvoke r0.<groovyjarjarantlr.HTMLCodeGenerator: void println(java.lang.String)>("</tr>");

        virtualinvoke r0.<groovyjarjarantlr.HTMLCodeGenerator: void println(java.lang.String)>("</table>");

        virtualinvoke r0.<groovyjarjarantlr.HTMLCodeGenerator: void println(java.lang.String)>("<PRE>");

        return;
    }

    protected void genLookaheadSetForAlt(groovyjarjarantlr.Alternative)
    {
        groovyjarjarantlr.HTMLCodeGenerator r0;
        groovyjarjarantlr.Lookahead[] $r2, $r5;
        groovyjarjarantlr.Grammar $r4;
        groovyjarjarantlr.Alternative r1;
        groovyjarjarantlr.Lookahead r3, $r6;
        int $i0, i1, i2;
        boolean $z0, $z1;

        r0 := @this: groovyjarjarantlr.HTMLCodeGenerator;

        r1 := @parameter0: groovyjarjarantlr.Alternative;

        $z0 = r0.<groovyjarjarantlr.HTMLCodeGenerator: boolean doingLexRules>;

        if $z0 == 0 goto label1;

        $r5 = r1.<groovyjarjarantlr.Alternative: groovyjarjarantlr.Lookahead[] cache>;

        $r6 = $r5[1];

        $z1 = virtualinvoke $r6.<groovyjarjarantlr.Lookahead: boolean containsEpsilon()>();

        if $z1 == 0 goto label1;

        virtualinvoke r0.<groovyjarjarantlr.HTMLCodeGenerator: void println(java.lang.String)>("MATCHES ALL");

        return;

     label1:
        $i0 = r1.<groovyjarjarantlr.Alternative: int lookaheadDepth>;

        i1 = $i0;

        if $i0 != 2147483647 goto label2;

        $r4 = r0.<groovyjarjarantlr.HTMLCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        i1 = $r4.<groovyjarjarantlr.Grammar: int maxk>;

     label2:
        i2 = 1;

     label3:
        if i2 > i1 goto label4;

        $r2 = r1.<groovyjarjarantlr.Alternative: groovyjarjarantlr.Lookahead[] cache>;

        r3 = $r2[i2];

        virtualinvoke r0.<groovyjarjarantlr.HTMLCodeGenerator: void printSet(int,int,groovyjarjarantlr.Lookahead)>(i1, i2, r3);

        i2 = i2 + 1;

        goto label3;

     label4:
        return;
    }

    public void genLookaheadSetForBlock(groovyjarjarantlr.AlternativeBlock)
    {
        groovyjarjarantlr.AlternativeBlock r0;
        groovyjarjarantlr.HTMLCodeGenerator r2;
        groovyjarjarantlr.LLkGrammarAnalyzer $r4;
        groovyjarjarantlr.Grammar $r3, $r7;
        groovyjarjarantlr.Alternative $r6;
        groovyjarjarantlr.Lookahead $r5;
        int $i0, $i1, $i2, i3, i4, i5;
        groovyjarjarantlr.collections.impl.Vector $r1;

        r2 := @this: groovyjarjarantlr.HTMLCodeGenerator;

        r0 := @parameter0: groovyjarjarantlr.AlternativeBlock;

        i3 = 0;

        i4 = 0;

     label1:
        $r1 = r0.<groovyjarjarantlr.AlternativeBlock: groovyjarjarantlr.collections.impl.Vector alternatives>;

        $i0 = virtualinvoke $r1.<groovyjarjarantlr.collections.impl.Vector: int size()>();

        if i4 >= $i0 goto label4;

        $r6 = virtualinvoke r0.<groovyjarjarantlr.AlternativeBlock: groovyjarjarantlr.Alternative getAlternativeAt(int)>(i4);

        $i1 = $r6.<groovyjarjarantlr.Alternative: int lookaheadDepth>;

        if $i1 != 2147483647 goto label2;

        $r7 = r2.<groovyjarjarantlr.HTMLCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        i3 = $r7.<groovyjarjarantlr.Grammar: int maxk>;

        goto label4;

     label2:
        $i2 = $r6.<groovyjarjarantlr.Alternative: int lookaheadDepth>;

        if i3 >= $i2 goto label3;

        i3 = $r6.<groovyjarjarantlr.Alternative: int lookaheadDepth>;

     label3:
        i4 = i4 + 1;

        goto label1;

     label4:
        i5 = 1;

     label5:
        if i5 > i3 goto label6;

        $r3 = r2.<groovyjarjarantlr.HTMLCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r4 = $r3.<groovyjarjarantlr.Grammar: groovyjarjarantlr.LLkGrammarAnalyzer theLLkAnalyzer>;

        $r5 = interfaceinvoke $r4.<groovyjarjarantlr.LLkGrammarAnalyzer: groovyjarjarantlr.Lookahead look(int,groovyjarjarantlr.AlternativeBlock)>(i5, r0);

        virtualinvoke r2.<groovyjarjarantlr.HTMLCodeGenerator: void printSet(int,int,groovyjarjarantlr.Lookahead)>(i3, i5, $r5);

        i5 = i5 + 1;

        goto label5;

     label6:
        return;
    }

    public void genNextToken()
    {
        groovyjarjarantlr.RuleBlock $r4;
        groovyjarjarantlr.HTMLCodeGenerator r0;
        groovyjarjarantlr.Grammar $r1, $r3, $r6;
        groovyjarjarantlr.collections.impl.Vector $r2;
        groovyjarjarantlr.RuleSymbol $r5;

        r0 := @this: groovyjarjarantlr.HTMLCodeGenerator;

        virtualinvoke r0.<groovyjarjarantlr.HTMLCodeGenerator: void println(java.lang.String)>("");

        virtualinvoke r0.<groovyjarjarantlr.HTMLCodeGenerator: void println(java.lang.String)>("/** Lexer nextToken rule:");

        virtualinvoke r0.<groovyjarjarantlr.HTMLCodeGenerator: void println(java.lang.String)>(" *  The lexer nextToken rule is synthesized from all of the user-defined");

        virtualinvoke r0.<groovyjarjarantlr.HTMLCodeGenerator: void println(java.lang.String)>(" *  lexer rules.  It logically consists of one big alternative block with");

        virtualinvoke r0.<groovyjarjarantlr.HTMLCodeGenerator: void println(java.lang.String)>(" *  each user-defined rule being an alternative.");

        virtualinvoke r0.<groovyjarjarantlr.HTMLCodeGenerator: void println(java.lang.String)>(" */");

        $r3 = r0.<groovyjarjarantlr.HTMLCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r1 = r0.<groovyjarjarantlr.HTMLCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r2 = $r1.<groovyjarjarantlr.Grammar: groovyjarjarantlr.collections.impl.Vector rules>;

        $r4 = staticinvoke <groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.RuleBlock createNextTokenRule(groovyjarjarantlr.Grammar,groovyjarjarantlr.collections.impl.Vector,java.lang.String)>($r3, $r2, "nextToken");

        $r5 = new groovyjarjarantlr.RuleSymbol;

        specialinvoke $r5.<groovyjarjarantlr.RuleSymbol: void <init>(java.lang.String)>("mnextToken");

        virtualinvoke $r5.<groovyjarjarantlr.RuleSymbol: void setDefined()>();

        virtualinvoke $r5.<groovyjarjarantlr.RuleSymbol: void setBlock(groovyjarjarantlr.RuleBlock)>($r4);

        $r5.<groovyjarjarantlr.RuleSymbol: java.lang.String access> = "private";

        $r6 = r0.<groovyjarjarantlr.HTMLCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        virtualinvoke $r6.<groovyjarjarantlr.Grammar: void define(groovyjarjarantlr.RuleSymbol)>($r5);

        virtualinvoke r0.<groovyjarjarantlr.HTMLCodeGenerator: void genCommonBlock(groovyjarjarantlr.AlternativeBlock)>($r4);

        return;
    }

    public void genRule(groovyjarjarantlr.RuleSymbol)
    {
        java.lang.StringBuffer $r5, $r7, $r8, $r12, $r13, $r15, $r16;
        int $i0, $i1, $i2, $i3, $i4;
        java.lang.String $r2, $r3, $r4, $r6, $r9, $r10, $r11, $r14, $r17, $r18;
        boolean $z0, $z1;
        groovyjarjarantlr.RuleBlock $r19;
        groovyjarjarantlr.HTMLCodeGenerator r1;
        groovyjarjarantlr.RuleSymbol r0;

        r1 := @this: groovyjarjarantlr.HTMLCodeGenerator;

        r0 := @parameter0: groovyjarjarantlr.RuleSymbol;

        if r0 == null goto label1;

        $z0 = virtualinvoke r0.<groovyjarjarantlr.RuleSymbol: boolean isDefined()>();

        if $z0 != 0 goto label2;

     label1:
        return;

     label2:
        virtualinvoke r1.<groovyjarjarantlr.HTMLCodeGenerator: void println(java.lang.String)>("");

        $r2 = r0.<groovyjarjarantlr.RuleSymbol: java.lang.String comment>;

        if $r2 == null goto label3;

        $r10 = r0.<groovyjarjarantlr.RuleSymbol: java.lang.String comment>;

        $r11 = staticinvoke <groovyjarjarantlr.HTMLCodeGenerator: java.lang.String HTMLEncode(java.lang.String)>($r10);

        virtualinvoke r1.<groovyjarjarantlr.HTMLCodeGenerator: void _println(java.lang.String)>($r11);

     label3:
        $r3 = r0.<groovyjarjarantlr.RuleSymbol: java.lang.String access>;

        $i0 = virtualinvoke $r3.<java.lang.String: int length()>();

        if $i0 == 0 goto label4;

        $r4 = r0.<groovyjarjarantlr.RuleSymbol: java.lang.String access>;

        $z1 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("public");

        if $z1 != 0 goto label4;

        $r5 = new java.lang.StringBuffer;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();

        $r6 = r0.<groovyjarjarantlr.RuleSymbol: java.lang.String access>;

        $r7 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r1.<groovyjarjarantlr.HTMLCodeGenerator: void _print(java.lang.String)>($r9);

     label4:
        $r12 = new java.lang.StringBuffer;

        specialinvoke $r12.<java.lang.StringBuffer: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("<a name=\"");

        $r14 = virtualinvoke r0.<groovyjarjarantlr.RuleSymbol: java.lang.String getId()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\">");

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r1.<groovyjarjarantlr.HTMLCodeGenerator: void _print(java.lang.String)>($r17);

        $r18 = virtualinvoke r0.<groovyjarjarantlr.RuleSymbol: java.lang.String getId()>();

        virtualinvoke r1.<groovyjarjarantlr.HTMLCodeGenerator: void _print(java.lang.String)>($r18);

        virtualinvoke r1.<groovyjarjarantlr.HTMLCodeGenerator: void _print(java.lang.String)>("</a>");

        $r19 = virtualinvoke r0.<groovyjarjarantlr.RuleSymbol: groovyjarjarantlr.RuleBlock getBlock()>();

        virtualinvoke r1.<groovyjarjarantlr.HTMLCodeGenerator: void _println(java.lang.String)>("");

        $i1 = r1.<groovyjarjarantlr.HTMLCodeGenerator: int tabs>;

        $i2 = $i1 + 1;

        r1.<groovyjarjarantlr.HTMLCodeGenerator: int tabs> = $i2;

        virtualinvoke r1.<groovyjarjarantlr.HTMLCodeGenerator: void print(java.lang.String)>(":\t");

        virtualinvoke r1.<groovyjarjarantlr.HTMLCodeGenerator: void genCommonBlock(groovyjarjarantlr.AlternativeBlock)>($r19);

        virtualinvoke r1.<groovyjarjarantlr.HTMLCodeGenerator: void _println(java.lang.String)>("");

        virtualinvoke r1.<groovyjarjarantlr.HTMLCodeGenerator: void println(java.lang.String)>(";");

        $i3 = r1.<groovyjarjarantlr.HTMLCodeGenerator: int tabs>;

        $i4 = $i3 - 1;

        r1.<groovyjarjarantlr.HTMLCodeGenerator: int tabs> = $i4;

        return;
    }

    protected void genSynPred(groovyjarjarantlr.SynPredBlock)
    {
        groovyjarjarantlr.HTMLCodeGenerator r0;
        int $i0, $i1, $i2, $i3;
        groovyjarjarantlr.SynPredBlock r1;

        r0 := @this: groovyjarjarantlr.HTMLCodeGenerator;

        r1 := @parameter0: groovyjarjarantlr.SynPredBlock;

        $i0 = r0.<groovyjarjarantlr.HTMLCodeGenerator: int syntacticPredLevel>;

        $i1 = $i0 + 1;

        r0.<groovyjarjarantlr.HTMLCodeGenerator: int syntacticPredLevel> = $i1;

        virtualinvoke r0.<groovyjarjarantlr.HTMLCodeGenerator: void genGenericBlock(groovyjarjarantlr.AlternativeBlock,java.lang.String)>(r1, " =>");

        $i2 = r0.<groovyjarjarantlr.HTMLCodeGenerator: int syntacticPredLevel>;

        $i3 = $i2 - 1;

        r0.<groovyjarjarantlr.HTMLCodeGenerator: int syntacticPredLevel> = $i3;

        return;
    }

    public void genTail()
    {
        groovyjarjarantlr.HTMLCodeGenerator r0;

        r0 := @this: groovyjarjarantlr.HTMLCodeGenerator;

        virtualinvoke r0.<groovyjarjarantlr.HTMLCodeGenerator: void println(java.lang.String)>("</PRE>");

        virtualinvoke r0.<groovyjarjarantlr.HTMLCodeGenerator: void println(java.lang.String)>("</BODY>");

        virtualinvoke r0.<groovyjarjarantlr.HTMLCodeGenerator: void println(java.lang.String)>("</HTML>");

        return;
    }

    protected void genTokenTypes(groovyjarjarantlr.TokenManager) throws java.io.IOException
    {
        groovyjarjarantlr.TokenManager r4;
        groovyjarjarantlr.collections.impl.Vector $r22;
        java.io.PrintWriter $r21, $r23;
        groovyjarjarantlr.HTMLCodeGenerator r0;
        groovyjarjarantlr.Tool $r2, $r13;
        java.lang.StringBuffer $r1, $r3, $r6, $r8, $r10, $r12, $r15, $r17, $r19, $r26, $r27, $r28, $r29;
        int $i0, $i1, $i2, $i3, $i4, i5;
        java.lang.String $r5, $r7, $r9, $r11, $r14, $r16, $r18, $r20, r25, $r30;
        java.lang.Object $r24;

        r0 := @this: groovyjarjarantlr.HTMLCodeGenerator;

        r4 := @parameter0: groovyjarjarantlr.TokenManager;

        $r2 = r0.<groovyjarjarantlr.HTMLCodeGenerator: groovyjarjarantlr.Tool antlrTool>;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Generating ");

        $r5 = interfaceinvoke r4.<groovyjarjarantlr.TokenManager: java.lang.String getName()>();

        $r6 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r7 = <groovyjarjarantlr.HTMLCodeGenerator: java.lang.String TokenTypesFileSuffix>;

        $r8 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r9 = <groovyjarjarantlr.HTMLCodeGenerator: java.lang.String TokenTypesFileExt>;

        $r10 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r2.<groovyjarjarantlr.Tool: void reportProgress(java.lang.String)>($r11);

        $r13 = r0.<groovyjarjarantlr.HTMLCodeGenerator: groovyjarjarantlr.Tool antlrTool>;

        $r12 = new java.lang.StringBuffer;

        specialinvoke $r12.<java.lang.StringBuffer: void <init>()>();

        $r14 = interfaceinvoke r4.<groovyjarjarantlr.TokenManager: java.lang.String getName()>();

        $r15 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r14);

        $r16 = <groovyjarjarantlr.HTMLCodeGenerator: java.lang.String TokenTypesFileSuffix>;

        $r17 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r16);

        $r18 = <groovyjarjarantlr.HTMLCodeGenerator: java.lang.String TokenTypesFileExt>;

        $r19 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r18);

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.String toString()>();

        $r21 = virtualinvoke $r13.<groovyjarjarantlr.Tool: java.io.PrintWriter openOutputFile(java.lang.String)>($r20);

        r0.<groovyjarjarantlr.HTMLCodeGenerator: java.io.PrintWriter currentOutput> = $r21;

        r0.<groovyjarjarantlr.HTMLCodeGenerator: int tabs> = 0;

        virtualinvoke r0.<groovyjarjarantlr.HTMLCodeGenerator: void genHeader()>();

        virtualinvoke r0.<groovyjarjarantlr.HTMLCodeGenerator: void println(java.lang.String)>("");

        virtualinvoke r0.<groovyjarjarantlr.HTMLCodeGenerator: void println(java.lang.String)>("*** Tokens used by the parser");

        virtualinvoke r0.<groovyjarjarantlr.HTMLCodeGenerator: void println(java.lang.String)>("This is a list of the token numeric values and the corresponding");

        virtualinvoke r0.<groovyjarjarantlr.HTMLCodeGenerator: void println(java.lang.String)>("token identifiers.  Some tokens are literals, and because of that");

        virtualinvoke r0.<groovyjarjarantlr.HTMLCodeGenerator: void println(java.lang.String)>("they have no identifiers.  Literals are double-quoted.");

        $i0 = r0.<groovyjarjarantlr.HTMLCodeGenerator: int tabs>;

        $i1 = $i0 + 1;

        r0.<groovyjarjarantlr.HTMLCodeGenerator: int tabs> = $i1;

        $r22 = interfaceinvoke r4.<groovyjarjarantlr.TokenManager: groovyjarjarantlr.collections.impl.Vector getVocabulary()>();

        i5 = 4;

     label1:
        $i2 = virtualinvoke $r22.<groovyjarjarantlr.collections.impl.Vector: int size()>();

        if i5 >= $i2 goto label3;

        $r24 = virtualinvoke $r22.<groovyjarjarantlr.collections.impl.Vector: java.lang.Object elementAt(int)>(i5);

        r25 = (java.lang.String) $r24;

        if r25 == null goto label2;

        $r26 = new java.lang.StringBuffer;

        specialinvoke $r26.<java.lang.StringBuffer: void <init>()>();

        $r27 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r25);

        $r28 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" = ");

        $r29 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i5);

        $r30 = virtualinvoke $r29.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.HTMLCodeGenerator: void println(java.lang.String)>($r30);

     label2:
        i5 = i5 + 1;

        goto label1;

     label3:
        $i3 = r0.<groovyjarjarantlr.HTMLCodeGenerator: int tabs>;

        $i4 = $i3 - 1;

        r0.<groovyjarjarantlr.HTMLCodeGenerator: int tabs> = $i4;

        virtualinvoke r0.<groovyjarjarantlr.HTMLCodeGenerator: void println(java.lang.String)>("*** End of tokens used by the parser");

        $r23 = r0.<groovyjarjarantlr.HTMLCodeGenerator: java.io.PrintWriter currentOutput>;

        virtualinvoke $r23.<java.io.PrintWriter: void close()>();

        r0.<groovyjarjarantlr.HTMLCodeGenerator: java.io.PrintWriter currentOutput> = null;

        return;
    }

    public java.lang.String getASTCreateString(groovyjarjarantlr.collections.impl.Vector)
    {
        groovyjarjarantlr.collections.impl.Vector r1;
        groovyjarjarantlr.HTMLCodeGenerator r0;

        r0 := @this: groovyjarjarantlr.HTMLCodeGenerator;

        r1 := @parameter0: groovyjarjarantlr.collections.impl.Vector;

        return null;
    }

    public java.lang.String getASTCreateString(groovyjarjarantlr.GrammarAtom, java.lang.String)
    {
        java.lang.String r2;
        groovyjarjarantlr.HTMLCodeGenerator r0;
        groovyjarjarantlr.GrammarAtom r1;

        r0 := @this: groovyjarjarantlr.HTMLCodeGenerator;

        r1 := @parameter0: groovyjarjarantlr.GrammarAtom;

        r2 := @parameter1: java.lang.String;

        return null;
    }

    public java.lang.String mapTreeId(java.lang.String, groovyjarjarantlr.ActionTransInfo)
    {
        java.lang.String r0;
        groovyjarjarantlr.ActionTransInfo r2;
        groovyjarjarantlr.HTMLCodeGenerator r1;

        r1 := @this: groovyjarjarantlr.HTMLCodeGenerator;

        r0 := @parameter0: java.lang.String;

        r2 := @parameter1: groovyjarjarantlr.ActionTransInfo;

        return r0;
    }

    protected java.lang.String processActionForSpecialSymbols(java.lang.String, int, groovyjarjarantlr.RuleBlock, groovyjarjarantlr.ActionTransInfo)
    {
        groovyjarjarantlr.RuleBlock r2;
        groovyjarjarantlr.HTMLCodeGenerator r1;
        int i0;
        java.lang.String r0;
        groovyjarjarantlr.ActionTransInfo r3;

        r1 := @this: groovyjarjarantlr.HTMLCodeGenerator;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: groovyjarjarantlr.RuleBlock;

        r3 := @parameter3: groovyjarjarantlr.ActionTransInfo;

        return r0;
    }

    public void printSet(int, int, groovyjarjarantlr.Lookahead)
    {
        groovyjarjarantlr.Grammar $r4;
        groovyjarjarantlr.CharFormatter $r9;
        int[] $r2;
        groovyjarjarantlr.TokenManager $r5;
        groovyjarjarantlr.collections.impl.Vector $r6;
        boolean $z0;
        groovyjarjarantlr.HTMLCodeGenerator r3;
        groovyjarjarantlr.collections.impl.BitSet $r1;
        java.lang.StringBuffer $r11, $r12, $r13, $r14;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, i11, i12, i13, $i14;
        java.lang.String $r8, $r10, $r15;
        groovyjarjarantlr.Lookahead r0;
        java.lang.Object $r7;

        r3 := @this: groovyjarjarantlr.HTMLCodeGenerator;

        i0 := @parameter0: int;

        i11 := @parameter1: int;

        r0 := @parameter2: groovyjarjarantlr.Lookahead;

        $r1 = r0.<groovyjarjarantlr.Lookahead: groovyjarjarantlr.collections.impl.BitSet fset>;

        $r2 = virtualinvoke $r1.<groovyjarjarantlr.collections.impl.BitSet: int[] toArray()>();

        if i0 == 1 goto label01;

        $r11 = new java.lang.StringBuffer;

        specialinvoke $r11.<java.lang.StringBuffer: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("k==");

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i11);

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(": {");

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r3.<groovyjarjarantlr.HTMLCodeGenerator: void print(java.lang.String)>($r15);

        goto label02;

     label01:
        virtualinvoke r3.<groovyjarjarantlr.HTMLCodeGenerator: void print(java.lang.String)>("{ ");

     label02:
        $i1 = lengthof $r2;

        if $i1 <= 5 goto label03;

        virtualinvoke r3.<groovyjarjarantlr.HTMLCodeGenerator: void _println(java.lang.String)>("");

        $i9 = r3.<groovyjarjarantlr.HTMLCodeGenerator: int tabs>;

        $i10 = $i9 + 1;

        r3.<groovyjarjarantlr.HTMLCodeGenerator: int tabs> = $i10;

        virtualinvoke r3.<groovyjarjarantlr.HTMLCodeGenerator: void print(java.lang.String)>("");

     label03:
        i12 = 0;

        i13 = 0;

     label04:
        $i14 = lengthof $r2;

        if i13 >= $i14 goto label09;

        i12 = i12 + 1;

        if i12 <= 5 goto label05;

        virtualinvoke r3.<groovyjarjarantlr.HTMLCodeGenerator: void _println(java.lang.String)>("");

        virtualinvoke r3.<groovyjarjarantlr.HTMLCodeGenerator: void print(java.lang.String)>("");

        i12 = 0;

     label05:
        $z0 = r3.<groovyjarjarantlr.HTMLCodeGenerator: boolean doingLexRules>;

        if $z0 == 0 goto label06;

        $r9 = r3.<groovyjarjarantlr.HTMLCodeGenerator: groovyjarjarantlr.CharFormatter charFormatter>;

        $i8 = $r2[i13];

        $r10 = interfaceinvoke $r9.<groovyjarjarantlr.CharFormatter: java.lang.String literalChar(int)>($i8);

        virtualinvoke r3.<groovyjarjarantlr.HTMLCodeGenerator: void _print(java.lang.String)>($r10);

        goto label07;

     label06:
        $r4 = r3.<groovyjarjarantlr.HTMLCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r5 = $r4.<groovyjarjarantlr.Grammar: groovyjarjarantlr.TokenManager tokenManager>;

        $r6 = interfaceinvoke $r5.<groovyjarjarantlr.TokenManager: groovyjarjarantlr.collections.impl.Vector getVocabulary()>();

        $i5 = $r2[i13];

        $r7 = virtualinvoke $r6.<groovyjarjarantlr.collections.impl.Vector: java.lang.Object elementAt(int)>($i5);

        $r8 = (java.lang.String) $r7;

        virtualinvoke r3.<groovyjarjarantlr.HTMLCodeGenerator: void _print(java.lang.String)>($r8);

     label07:
        $i6 = lengthof $r2;

        $i7 = $i6 - 1;

        if i13 == $i7 goto label08;

        virtualinvoke r3.<groovyjarjarantlr.HTMLCodeGenerator: void _print(java.lang.String)>(", ");

     label08:
        i13 = i13 + 1;

        goto label04;

     label09:
        $i2 = lengthof $r2;

        if $i2 <= 5 goto label10;

        virtualinvoke r3.<groovyjarjarantlr.HTMLCodeGenerator: void _println(java.lang.String)>("");

        $i3 = r3.<groovyjarjarantlr.HTMLCodeGenerator: int tabs>;

        $i4 = $i3 - 1;

        r3.<groovyjarjarantlr.HTMLCodeGenerator: int tabs> = $i4;

        virtualinvoke r3.<groovyjarjarantlr.HTMLCodeGenerator: void print(java.lang.String)>("");

     label10:
        virtualinvoke r3.<groovyjarjarantlr.HTMLCodeGenerator: void _println(java.lang.String)>(" }");

        return;
    }
}
