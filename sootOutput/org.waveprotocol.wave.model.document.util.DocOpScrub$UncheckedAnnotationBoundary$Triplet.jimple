class org.waveprotocol.wave.model.document.util.DocOpScrub$UncheckedAnnotationBoundary$Triplet extends java.lang.Object implements java.lang.Comparable
{
    private final java.lang.String key;
    private final java.lang.String oldVal;
    private final java.lang.String newVal;

    private void <init>(java.lang.String, java.lang.String, java.lang.String)
    {
        java.lang.String r1, r2, r3;
        org.waveprotocol.wave.model.document.util.DocOpScrub$UncheckedAnnotationBoundary$Triplet r0;

        r0 := @this: org.waveprotocol.wave.model.document.util.DocOpScrub$UncheckedAnnotationBoundary$Triplet;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "triplet key");

        r0.<org.waveprotocol.wave.model.document.util.DocOpScrub$UncheckedAnnotationBoundary$Triplet: java.lang.String key> = r1;

        r0.<org.waveprotocol.wave.model.document.util.DocOpScrub$UncheckedAnnotationBoundary$Triplet: java.lang.String oldVal> = r2;

        r0.<org.waveprotocol.wave.model.document.util.DocOpScrub$UncheckedAnnotationBoundary$Triplet: java.lang.String newVal> = r3;

        return;
    }

    public int compareTo(org.waveprotocol.wave.model.document.util.DocOpScrub$UncheckedAnnotationBoundary$Triplet)
    {
        int $i0;
        java.lang.String $r2, $r3;
        org.waveprotocol.wave.model.document.util.DocOpScrub$UncheckedAnnotationBoundary$Triplet r0, r1;

        r0 := @this: org.waveprotocol.wave.model.document.util.DocOpScrub$UncheckedAnnotationBoundary$Triplet;

        r1 := @parameter0: org.waveprotocol.wave.model.document.util.DocOpScrub$UncheckedAnnotationBoundary$Triplet;

        $r3 = r0.<org.waveprotocol.wave.model.document.util.DocOpScrub$UncheckedAnnotationBoundary$Triplet: java.lang.String key>;

        $r2 = r1.<org.waveprotocol.wave.model.document.util.DocOpScrub$UncheckedAnnotationBoundary$Triplet: java.lang.String key>;

        $i0 = virtualinvoke $r3.<java.lang.String: int compareTo(java.lang.String)>($r2);

        return $i0;
    }

    public volatile int compareTo(java.lang.Object)
    {
        int $i0;
        java.lang.Object r1;
        org.waveprotocol.wave.model.document.util.DocOpScrub$UncheckedAnnotationBoundary$Triplet r0, $r2;

        r0 := @this: org.waveprotocol.wave.model.document.util.DocOpScrub$UncheckedAnnotationBoundary$Triplet;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.waveprotocol.wave.model.document.util.DocOpScrub$UncheckedAnnotationBoundary$Triplet) r1;

        $i0 = virtualinvoke r0.<org.waveprotocol.wave.model.document.util.DocOpScrub$UncheckedAnnotationBoundary$Triplet: int compareTo(org.waveprotocol.wave.model.document.util.DocOpScrub$UncheckedAnnotationBoundary$Triplet)>($r2);

        return $i0;
    }

    void <init>(java.lang.String, java.lang.String, java.lang.String, org.waveprotocol.wave.model.document.util.DocOpScrub$1)
    {
        java.lang.String r1, r2, r3;
        org.waveprotocol.wave.model.document.util.DocOpScrub$1 r4;
        org.waveprotocol.wave.model.document.util.DocOpScrub$UncheckedAnnotationBoundary$Triplet r0;

        r0 := @this: org.waveprotocol.wave.model.document.util.DocOpScrub$UncheckedAnnotationBoundary$Triplet;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: org.waveprotocol.wave.model.document.util.DocOpScrub$1;

        specialinvoke r0.<org.waveprotocol.wave.model.document.util.DocOpScrub$UncheckedAnnotationBoundary$Triplet: void <init>(java.lang.String,java.lang.String,java.lang.String)>(r1, r2, r3);

        return;
    }

    static java.lang.String access$100(org.waveprotocol.wave.model.document.util.DocOpScrub$UncheckedAnnotationBoundary$Triplet)
    {
        java.lang.String $r1;
        org.waveprotocol.wave.model.document.util.DocOpScrub$UncheckedAnnotationBoundary$Triplet r0;

        r0 := @parameter0: org.waveprotocol.wave.model.document.util.DocOpScrub$UncheckedAnnotationBoundary$Triplet;

        $r1 = r0.<org.waveprotocol.wave.model.document.util.DocOpScrub$UncheckedAnnotationBoundary$Triplet: java.lang.String key>;

        return $r1;
    }

    static java.lang.String access$200(org.waveprotocol.wave.model.document.util.DocOpScrub$UncheckedAnnotationBoundary$Triplet)
    {
        java.lang.String $r1;
        org.waveprotocol.wave.model.document.util.DocOpScrub$UncheckedAnnotationBoundary$Triplet r0;

        r0 := @parameter0: org.waveprotocol.wave.model.document.util.DocOpScrub$UncheckedAnnotationBoundary$Triplet;

        $r1 = r0.<org.waveprotocol.wave.model.document.util.DocOpScrub$UncheckedAnnotationBoundary$Triplet: java.lang.String newVal>;

        return $r1;
    }

    static java.lang.String access$300(org.waveprotocol.wave.model.document.util.DocOpScrub$UncheckedAnnotationBoundary$Triplet)
    {
        java.lang.String $r1;
        org.waveprotocol.wave.model.document.util.DocOpScrub$UncheckedAnnotationBoundary$Triplet r0;

        r0 := @parameter0: org.waveprotocol.wave.model.document.util.DocOpScrub$UncheckedAnnotationBoundary$Triplet;

        $r1 = r0.<org.waveprotocol.wave.model.document.util.DocOpScrub$UncheckedAnnotationBoundary$Triplet: java.lang.String oldVal>;

        return $r1;
    }
}
