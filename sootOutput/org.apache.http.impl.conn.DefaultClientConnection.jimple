public class org.apache.http.impl.conn.DefaultClientConnection extends org.apache.http.impl.SocketHttpClientConnection implements org.apache.http.conn.OperatedClientConnection, org.apache.http.protocol.HttpContext
{
    private final org.apache.commons.logging.Log log;
    private final org.apache.commons.logging.Log headerLog;
    private final org.apache.commons.logging.Log wireLog;
    private volatile java.net.Socket socket;
    private org.apache.http.HttpHost targetHost;
    private boolean connSecure;
    private volatile boolean shutdown;
    private final java.util.Map attributes;

    public void <init>()
    {
        org.apache.http.impl.conn.DefaultClientConnection r0;
        java.lang.Class $r1;
        org.apache.commons.logging.Log $r2, $r3, $r4;
        java.util.HashMap $r5;

        r0 := @this: org.apache.http.impl.conn.DefaultClientConnection;

        specialinvoke r0.<org.apache.http.impl.SocketHttpClientConnection: void <init>()>();

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>($r1);

        r0.<org.apache.http.impl.conn.DefaultClientConnection: org.apache.commons.logging.Log log> = $r2;

        $r3 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.String)>("org.apache.http.headers");

        r0.<org.apache.http.impl.conn.DefaultClientConnection: org.apache.commons.logging.Log headerLog> = $r3;

        $r4 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.String)>("org.apache.http.wire");

        r0.<org.apache.http.impl.conn.DefaultClientConnection: org.apache.commons.logging.Log wireLog> = $r4;

        $r5 = new java.util.HashMap;

        specialinvoke $r5.<java.util.HashMap: void <init>()>();

        r0.<org.apache.http.impl.conn.DefaultClientConnection: java.util.Map attributes> = $r5;

        return;
    }

    public final org.apache.http.HttpHost getTargetHost()
    {
        org.apache.http.impl.conn.DefaultClientConnection r0;
        org.apache.http.HttpHost $r1;

        r0 := @this: org.apache.http.impl.conn.DefaultClientConnection;

        $r1 = r0.<org.apache.http.impl.conn.DefaultClientConnection: org.apache.http.HttpHost targetHost>;

        return $r1;
    }

    public final boolean isSecure()
    {
        org.apache.http.impl.conn.DefaultClientConnection r0;
        boolean $z0;

        r0 := @this: org.apache.http.impl.conn.DefaultClientConnection;

        $z0 = r0.<org.apache.http.impl.conn.DefaultClientConnection: boolean connSecure>;

        return $z0;
    }

    public final java.net.Socket getSocket()
    {
        org.apache.http.impl.conn.DefaultClientConnection r0;
        java.net.Socket $r1;

        r0 := @this: org.apache.http.impl.conn.DefaultClientConnection;

        $r1 = r0.<org.apache.http.impl.conn.DefaultClientConnection: java.net.Socket socket>;

        return $r1;
    }

    public void opening(java.net.Socket, org.apache.http.HttpHost) throws java.io.IOException
    {
        org.apache.http.impl.conn.DefaultClientConnection r0;
        java.net.Socket r1;
        org.apache.http.HttpHost r2;
        java.io.InterruptedIOException $r3;
        boolean $z0;

        r0 := @this: org.apache.http.impl.conn.DefaultClientConnection;

        r1 := @parameter0: java.net.Socket;

        r2 := @parameter1: org.apache.http.HttpHost;

        virtualinvoke r0.<org.apache.http.impl.conn.DefaultClientConnection: void assertNotOpen()>();

        r0.<org.apache.http.impl.conn.DefaultClientConnection: java.net.Socket socket> = r1;

        r0.<org.apache.http.impl.conn.DefaultClientConnection: org.apache.http.HttpHost targetHost> = r2;

        $z0 = r0.<org.apache.http.impl.conn.DefaultClientConnection: boolean shutdown>;

        if $z0 == 0 goto label1;

        virtualinvoke r1.<java.net.Socket: void close()>();

        $r3 = new java.io.InterruptedIOException;

        specialinvoke $r3.<java.io.InterruptedIOException: void <init>(java.lang.String)>("Connection already shutdown");

        throw $r3;

     label1:
        return;
    }

    public void openCompleted(boolean, org.apache.http.params.HttpParams) throws java.io.IOException
    {
        org.apache.http.impl.conn.DefaultClientConnection r0;
        java.net.Socket $r2;
        org.apache.http.params.HttpParams r1;
        java.lang.IllegalArgumentException $r3;
        boolean z0;

        r0 := @this: org.apache.http.impl.conn.DefaultClientConnection;

        z0 := @parameter0: boolean;

        r1 := @parameter1: org.apache.http.params.HttpParams;

        virtualinvoke r0.<org.apache.http.impl.conn.DefaultClientConnection: void assertNotOpen()>();

        if r1 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Parameters must not be null.");

        throw $r3;

     label1:
        r0.<org.apache.http.impl.conn.DefaultClientConnection: boolean connSecure> = z0;

        $r2 = r0.<org.apache.http.impl.conn.DefaultClientConnection: java.net.Socket socket>;

        virtualinvoke r0.<org.apache.http.impl.conn.DefaultClientConnection: void bind(java.net.Socket,org.apache.http.params.HttpParams)>($r2, r1);

        return;
    }

    public void shutdown() throws java.io.IOException
    {
        org.apache.http.impl.conn.DefaultClientConnection r0;
        java.net.Socket $r8;
        java.io.IOException $r9;
        org.apache.commons.logging.Log $r1, $r3, $r10;
        java.lang.StringBuilder $r2, $r4, $r5, $r6;
        java.lang.String $r7;
        boolean $z0;

        r0 := @this: org.apache.http.impl.conn.DefaultClientConnection;

        r0.<org.apache.http.impl.conn.DefaultClientConnection: boolean shutdown> = 1;

     label1:
        specialinvoke r0.<org.apache.http.impl.SocketHttpClientConnection: void shutdown()>();

        $r1 = r0.<org.apache.http.impl.conn.DefaultClientConnection: org.apache.commons.logging.Log log>;

        $z0 = interfaceinvoke $r1.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z0 == 0 goto label2;

        $r3 = r0.<org.apache.http.impl.conn.DefaultClientConnection: org.apache.commons.logging.Log log>;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Connection ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" shut down");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r3.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r7);

     label2:
        $r8 = r0.<org.apache.http.impl.conn.DefaultClientConnection: java.net.Socket socket>;

        if $r8 == null goto label3;

        virtualinvoke $r8.<java.net.Socket: void close()>();

     label3:
        goto label5;

     label4:
        $r9 := @caughtexception;

        $r10 = r0.<org.apache.http.impl.conn.DefaultClientConnection: org.apache.commons.logging.Log log>;

        interfaceinvoke $r10.<org.apache.commons.logging.Log: void debug(java.lang.Object,java.lang.Throwable)>("I/O error shutting down connection", $r9);

     label5:
        return;

        catch java.io.IOException from label1 to label3 with label4;
    }

    public void close() throws java.io.IOException
    {
        org.apache.http.impl.conn.DefaultClientConnection r0;
        java.io.IOException $r8;
        org.apache.commons.logging.Log $r1, $r3, $r9;
        java.lang.StringBuilder $r2, $r4, $r5, $r6;
        java.lang.String $r7;
        boolean $z0;

        r0 := @this: org.apache.http.impl.conn.DefaultClientConnection;

     label1:
        specialinvoke r0.<org.apache.http.impl.SocketHttpClientConnection: void close()>();

        $r1 = r0.<org.apache.http.impl.conn.DefaultClientConnection: org.apache.commons.logging.Log log>;

        $z0 = interfaceinvoke $r1.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z0 == 0 goto label2;

        $r3 = r0.<org.apache.http.impl.conn.DefaultClientConnection: org.apache.commons.logging.Log log>;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Connection ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" closed");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r3.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r7);

     label2:
        goto label4;

     label3:
        $r8 := @caughtexception;

        $r9 = r0.<org.apache.http.impl.conn.DefaultClientConnection: org.apache.commons.logging.Log log>;

        interfaceinvoke $r9.<org.apache.commons.logging.Log: void debug(java.lang.Object,java.lang.Throwable)>("I/O error closing connection", $r8);

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    protected org.apache.http.io.SessionInputBuffer createSessionInputBuffer(java.net.Socket, int, org.apache.http.params.HttpParams) throws java.io.IOException
    {
        org.apache.http.impl.conn.DefaultClientConnection r0;
        java.net.Socket r1;
        org.apache.http.io.SessionInputBuffer $r3, r9;
        org.apache.http.impl.conn.Wire $r10;
        org.apache.http.impl.conn.LoggingSessionInputBuffer $r11;
        org.apache.http.params.HttpParams r2;
        int i0, $i2;
        org.apache.commons.logging.Log $r4, $r7;
        java.lang.String $r8;
        boolean $z0;

        r0 := @this: org.apache.http.impl.conn.DefaultClientConnection;

        r1 := @parameter0: java.net.Socket;

        i0 := @parameter1: int;

        r2 := @parameter2: org.apache.http.params.HttpParams;

        $i2 = (int) -1;

        if i0 != $i2 goto label1;

        i0 = 8192;

     label1:
        $r3 = specialinvoke r0.<org.apache.http.impl.SocketHttpClientConnection: org.apache.http.io.SessionInputBuffer createSessionInputBuffer(java.net.Socket,int,org.apache.http.params.HttpParams)>(r1, i0, r2);

        r9 = $r3;

        $r4 = r0.<org.apache.http.impl.conn.DefaultClientConnection: org.apache.commons.logging.Log wireLog>;

        $z0 = interfaceinvoke $r4.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z0 == 0 goto label2;

        $r11 = new org.apache.http.impl.conn.LoggingSessionInputBuffer;

        $r10 = new org.apache.http.impl.conn.Wire;

        $r7 = r0.<org.apache.http.impl.conn.DefaultClientConnection: org.apache.commons.logging.Log wireLog>;

        specialinvoke $r10.<org.apache.http.impl.conn.Wire: void <init>(org.apache.commons.logging.Log)>($r7);

        $r8 = staticinvoke <org.apache.http.params.HttpProtocolParams: java.lang.String getHttpElementCharset(org.apache.http.params.HttpParams)>(r2);

        specialinvoke $r11.<org.apache.http.impl.conn.LoggingSessionInputBuffer: void <init>(org.apache.http.io.SessionInputBuffer,org.apache.http.impl.conn.Wire,java.lang.String)>($r3, $r10, $r8);

        r9 = $r11;

     label2:
        return r9;
    }

    protected org.apache.http.io.SessionOutputBuffer createSessionOutputBuffer(java.net.Socket, int, org.apache.http.params.HttpParams) throws java.io.IOException
    {
        org.apache.http.impl.conn.DefaultClientConnection r0;
        java.net.Socket r1;
        org.apache.http.impl.conn.LoggingSessionOutputBuffer $r11;
        org.apache.http.impl.conn.Wire $r10;
        org.apache.http.io.SessionOutputBuffer $r3, r9;
        org.apache.http.params.HttpParams r2;
        int i0, $i2;
        org.apache.commons.logging.Log $r4, $r7;
        java.lang.String $r8;
        boolean $z0;

        r0 := @this: org.apache.http.impl.conn.DefaultClientConnection;

        r1 := @parameter0: java.net.Socket;

        i0 := @parameter1: int;

        r2 := @parameter2: org.apache.http.params.HttpParams;

        $i2 = (int) -1;

        if i0 != $i2 goto label1;

        i0 = 8192;

     label1:
        $r3 = specialinvoke r0.<org.apache.http.impl.SocketHttpClientConnection: org.apache.http.io.SessionOutputBuffer createSessionOutputBuffer(java.net.Socket,int,org.apache.http.params.HttpParams)>(r1, i0, r2);

        r9 = $r3;

        $r4 = r0.<org.apache.http.impl.conn.DefaultClientConnection: org.apache.commons.logging.Log wireLog>;

        $z0 = interfaceinvoke $r4.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z0 == 0 goto label2;

        $r11 = new org.apache.http.impl.conn.LoggingSessionOutputBuffer;

        $r10 = new org.apache.http.impl.conn.Wire;

        $r7 = r0.<org.apache.http.impl.conn.DefaultClientConnection: org.apache.commons.logging.Log wireLog>;

        specialinvoke $r10.<org.apache.http.impl.conn.Wire: void <init>(org.apache.commons.logging.Log)>($r7);

        $r8 = staticinvoke <org.apache.http.params.HttpProtocolParams: java.lang.String getHttpElementCharset(org.apache.http.params.HttpParams)>(r2);

        specialinvoke $r11.<org.apache.http.impl.conn.LoggingSessionOutputBuffer: void <init>(org.apache.http.io.SessionOutputBuffer,org.apache.http.impl.conn.Wire,java.lang.String)>($r3, $r10, $r8);

        r9 = $r11;

     label2:
        return r9;
    }

    protected org.apache.http.io.HttpMessageParser createResponseParser(org.apache.http.io.SessionInputBuffer, org.apache.http.HttpResponseFactory, org.apache.http.params.HttpParams)
    {
        org.apache.http.impl.conn.DefaultClientConnection r4;
        org.apache.http.impl.conn.DefaultHttpResponseParser $r0;
        org.apache.http.params.HttpParams r3;
        org.apache.http.io.SessionInputBuffer r1;
        org.apache.http.HttpResponseFactory r2;

        r4 := @this: org.apache.http.impl.conn.DefaultClientConnection;

        r1 := @parameter0: org.apache.http.io.SessionInputBuffer;

        r2 := @parameter1: org.apache.http.HttpResponseFactory;

        r3 := @parameter2: org.apache.http.params.HttpParams;

        $r0 = new org.apache.http.impl.conn.DefaultHttpResponseParser;

        specialinvoke $r0.<org.apache.http.impl.conn.DefaultHttpResponseParser: void <init>(org.apache.http.io.SessionInputBuffer,org.apache.http.message.LineParser,org.apache.http.HttpResponseFactory,org.apache.http.params.HttpParams)>(r1, null, r2, r3);

        return $r0;
    }

    public void update(java.net.Socket, org.apache.http.HttpHost, boolean, org.apache.http.params.HttpParams) throws java.io.IOException
    {
        org.apache.http.impl.conn.DefaultClientConnection r0;
        java.net.Socket r3;
        org.apache.http.params.HttpParams r2;
        java.lang.IllegalArgumentException $r4, $r5;
        org.apache.http.HttpHost r1;
        boolean z0;

        r0 := @this: org.apache.http.impl.conn.DefaultClientConnection;

        r3 := @parameter0: java.net.Socket;

        r1 := @parameter1: org.apache.http.HttpHost;

        z0 := @parameter2: boolean;

        r2 := @parameter3: org.apache.http.params.HttpParams;

        virtualinvoke r0.<org.apache.http.impl.conn.DefaultClientConnection: void assertOpen()>();

        if r1 != null goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Target host must not be null.");

        throw $r5;

     label1:
        if r2 != null goto label2;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Parameters must not be null.");

        throw $r4;

     label2:
        if r3 == null goto label3;

        r0.<org.apache.http.impl.conn.DefaultClientConnection: java.net.Socket socket> = r3;

        virtualinvoke r0.<org.apache.http.impl.conn.DefaultClientConnection: void bind(java.net.Socket,org.apache.http.params.HttpParams)>(r3, r2);

     label3:
        r0.<org.apache.http.impl.conn.DefaultClientConnection: org.apache.http.HttpHost targetHost> = r1;

        r0.<org.apache.http.impl.conn.DefaultClientConnection: boolean connSecure> = z0;

        return;
    }

    public org.apache.http.HttpResponse receiveResponseHeader() throws org.apache.http.HttpException, java.io.IOException
    {
        org.apache.http.StatusLine $r7, $r22;
        org.apache.http.Header r12;
        int i0, i1;
        java.lang.String $r8, $r10, $r16, $r18, $r24;
        boolean $z0, $z1;
        org.apache.http.Header[] $r11;
        org.apache.http.impl.conn.DefaultClientConnection r0;
        org.apache.http.HttpResponse $r1;
        org.apache.commons.logging.Log $r2, $r3, $r5, $r14, $r20;
        java.lang.StringBuilder $r4, $r6, $r9, $r13, $r15, $r17, $r19, $r21, $r23;

        r0 := @this: org.apache.http.impl.conn.DefaultClientConnection;

        $r1 = specialinvoke r0.<org.apache.http.impl.SocketHttpClientConnection: org.apache.http.HttpResponse receiveResponseHeader()>();

        $r2 = r0.<org.apache.http.impl.conn.DefaultClientConnection: org.apache.commons.logging.Log log>;

        $z0 = interfaceinvoke $r2.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z0 == 0 goto label1;

        $r20 = r0.<org.apache.http.impl.conn.DefaultClientConnection: org.apache.commons.logging.Log log>;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Receiving response: ");

        $r22 = interfaceinvoke $r1.<org.apache.http.HttpResponse: org.apache.http.StatusLine getStatusLine()>();

        $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r22);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r20.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r24);

     label1:
        $r3 = r0.<org.apache.http.impl.conn.DefaultClientConnection: org.apache.commons.logging.Log headerLog>;

        $z1 = interfaceinvoke $r3.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z1 == 0 goto label3;

        $r5 = r0.<org.apache.http.impl.conn.DefaultClientConnection: org.apache.commons.logging.Log headerLog>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<< ");

        $r7 = interfaceinvoke $r1.<org.apache.http.HttpResponse: org.apache.http.StatusLine getStatusLine()>();

        $r8 = virtualinvoke $r7.<java.lang.Object: java.lang.String toString()>();

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r5.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r10);

        $r11 = interfaceinvoke $r1.<org.apache.http.HttpResponse: org.apache.http.Header[] getAllHeaders()>();

        i0 = lengthof $r11;

        i1 = 0;

     label2:
        if i1 >= i0 goto label3;

        r12 = $r11[i1];

        $r14 = r0.<org.apache.http.impl.conn.DefaultClientConnection: org.apache.commons.logging.Log headerLog>;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<< ");

        $r16 = virtualinvoke r12.<java.lang.Object: java.lang.String toString()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r14.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r18);

        i1 = i1 + 1;

        goto label2;

     label3:
        return $r1;
    }

    public void sendRequestHeader(org.apache.http.HttpRequest) throws org.apache.http.HttpException, java.io.IOException
    {
        org.apache.http.Header r12;
        org.apache.http.RequestLine $r7, $r22;
        int i0, i1;
        java.lang.String $r8, $r10, $r16, $r18, $r24;
        boolean $z0, $z1;
        org.apache.http.Header[] $r11;
        org.apache.http.impl.conn.DefaultClientConnection r0;
        org.apache.http.HttpRequest r2;
        org.apache.commons.logging.Log $r1, $r3, $r5, $r14, $r20;
        java.lang.StringBuilder $r4, $r6, $r9, $r13, $r15, $r17, $r19, $r21, $r23;

        r0 := @this: org.apache.http.impl.conn.DefaultClientConnection;

        r2 := @parameter0: org.apache.http.HttpRequest;

        $r1 = r0.<org.apache.http.impl.conn.DefaultClientConnection: org.apache.commons.logging.Log log>;

        $z0 = interfaceinvoke $r1.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z0 == 0 goto label1;

        $r20 = r0.<org.apache.http.impl.conn.DefaultClientConnection: org.apache.commons.logging.Log log>;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Sending request: ");

        $r22 = interfaceinvoke r2.<org.apache.http.HttpRequest: org.apache.http.RequestLine getRequestLine()>();

        $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r22);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r20.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r24);

     label1:
        specialinvoke r0.<org.apache.http.impl.SocketHttpClientConnection: void sendRequestHeader(org.apache.http.HttpRequest)>(r2);

        $r3 = r0.<org.apache.http.impl.conn.DefaultClientConnection: org.apache.commons.logging.Log headerLog>;

        $z1 = interfaceinvoke $r3.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z1 == 0 goto label3;

        $r5 = r0.<org.apache.http.impl.conn.DefaultClientConnection: org.apache.commons.logging.Log headerLog>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">> ");

        $r7 = interfaceinvoke r2.<org.apache.http.HttpRequest: org.apache.http.RequestLine getRequestLine()>();

        $r8 = virtualinvoke $r7.<java.lang.Object: java.lang.String toString()>();

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r5.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r10);

        $r11 = interfaceinvoke r2.<org.apache.http.HttpRequest: org.apache.http.Header[] getAllHeaders()>();

        i0 = lengthof $r11;

        i1 = 0;

     label2:
        if i1 >= i0 goto label3;

        r12 = $r11[i1];

        $r14 = r0.<org.apache.http.impl.conn.DefaultClientConnection: org.apache.commons.logging.Log headerLog>;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">> ");

        $r16 = virtualinvoke r12.<java.lang.Object: java.lang.String toString()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r14.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r18);

        i1 = i1 + 1;

        goto label2;

     label3:
        return;
    }

    public java.lang.Object getAttribute(java.lang.String)
    {
        org.apache.http.impl.conn.DefaultClientConnection r0;
        java.util.Map $r2;
        java.lang.Object $r3;
        java.lang.String r1;

        r0 := @this: org.apache.http.impl.conn.DefaultClientConnection;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.apache.http.impl.conn.DefaultClientConnection: java.util.Map attributes>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        return $r3;
    }

    public java.lang.Object removeAttribute(java.lang.String)
    {
        org.apache.http.impl.conn.DefaultClientConnection r0;
        java.util.Map $r2;
        java.lang.Object $r3;
        java.lang.String r1;

        r0 := @this: org.apache.http.impl.conn.DefaultClientConnection;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.apache.http.impl.conn.DefaultClientConnection: java.util.Map attributes>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

        return $r3;
    }

    public void setAttribute(java.lang.String, java.lang.Object)
    {
        org.apache.http.impl.conn.DefaultClientConnection r0;
        java.util.Map $r3;
        java.lang.Object r2;
        java.lang.String r1;

        r0 := @this: org.apache.http.impl.conn.DefaultClientConnection;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

        $r3 = r0.<org.apache.http.impl.conn.DefaultClientConnection: java.util.Map attributes>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        return;
    }
}
