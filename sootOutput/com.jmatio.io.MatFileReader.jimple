public class com.jmatio.io.MatFileReader extends java.lang.Object
{
    public static final int MEMORY_MAPPED_FILE;
    public static final int DIRECT_BYTE_BUFFER;
    public static final int HEAP_BYTE_BUFFER;
    private com.jmatio.io.MatFileHeader matFileHeader;
    private java.util.Map data;
    private java.nio.ByteOrder byteOrder;
    private com.jmatio.io.MatFileFilter filter;
    private static final int DIRECT_BUFFER_LIMIT;

    public void <init>(java.lang.String) throws java.io.FileNotFoundException, java.io.IOException
    {
        com.jmatio.io.MatFileReader r0;
        java.lang.String r2;
        com.jmatio.io.MatFileFilter $r3;
        java.io.File $r1;

        r0 := @this: com.jmatio.io.MatFileReader;

        r2 := @parameter0: java.lang.String;

        $r1 = new java.io.File;

        specialinvoke $r1.<java.io.File: void <init>(java.lang.String)>(r2);

        $r3 = new com.jmatio.io.MatFileFilter;

        specialinvoke $r3.<com.jmatio.io.MatFileFilter: void <init>()>();

        specialinvoke r0.<com.jmatio.io.MatFileReader: void <init>(java.io.File,com.jmatio.io.MatFileFilter)>($r1, $r3);

        return;
    }

    public void <init>(java.lang.String, com.jmatio.io.MatFileFilter) throws java.io.IOException
    {
        com.jmatio.io.MatFileReader r0;
        java.lang.String r2;
        com.jmatio.io.MatFileFilter r3;
        java.io.File $r1;

        r0 := @this: com.jmatio.io.MatFileReader;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: com.jmatio.io.MatFileFilter;

        $r1 = new java.io.File;

        specialinvoke $r1.<java.io.File: void <init>(java.lang.String)>(r2);

        specialinvoke r0.<com.jmatio.io.MatFileReader: void <init>(java.io.File,com.jmatio.io.MatFileFilter)>($r1, r3);

        return;
    }

    public void <init>(java.io.File) throws java.io.IOException
    {
        com.jmatio.io.MatFileFilter $r2;
        com.jmatio.io.MatFileReader r0;
        java.io.File r1;

        r0 := @this: com.jmatio.io.MatFileReader;

        r1 := @parameter0: java.io.File;

        $r2 = new com.jmatio.io.MatFileFilter;

        specialinvoke $r2.<com.jmatio.io.MatFileFilter: void <init>()>();

        specialinvoke r0.<com.jmatio.io.MatFileReader: void <init>(java.io.File,com.jmatio.io.MatFileFilter)>(r1, $r2);

        return;
    }

    public void <init>(java.io.File, com.jmatio.io.MatFileFilter) throws java.io.IOException
    {
        com.jmatio.io.MatFileFilter r2;
        com.jmatio.io.MatFileReader r0;
        java.io.File r1;

        r0 := @this: com.jmatio.io.MatFileReader;

        r1 := @parameter0: java.io.File;

        r2 := @parameter1: com.jmatio.io.MatFileFilter;

        specialinvoke r0.<com.jmatio.io.MatFileReader: void <init>()>();

        virtualinvoke r0.<com.jmatio.io.MatFileReader: java.util.Map read(java.io.File,com.jmatio.io.MatFileFilter,int)>(r1, r2, 1);

        return;
    }

    public void <init>()
    {
        java.util.LinkedHashMap $r2;
        com.jmatio.io.MatFileFilter $r1;
        com.jmatio.io.MatFileReader r0;

        r0 := @this: com.jmatio.io.MatFileReader;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new com.jmatio.io.MatFileFilter;

        specialinvoke $r1.<com.jmatio.io.MatFileFilter: void <init>()>();

        r0.<com.jmatio.io.MatFileReader: com.jmatio.io.MatFileFilter filter> = $r1;

        $r2 = new java.util.LinkedHashMap;

        specialinvoke $r2.<java.util.LinkedHashMap: void <init>()>();

        r0.<com.jmatio.io.MatFileReader: java.util.Map data> = $r2;

        return;
    }

    public synchronized java.util.Map read(java.io.File) throws java.io.IOException
    {
        com.jmatio.io.MatFileReader r0;
        java.util.Map $r3;
        com.jmatio.io.MatFileFilter $r2;
        java.io.File r1;

        r0 := @this: com.jmatio.io.MatFileReader;

        r1 := @parameter0: java.io.File;

        $r2 = new com.jmatio.io.MatFileFilter;

        specialinvoke $r2.<com.jmatio.io.MatFileFilter: void <init>()>();

        $r3 = virtualinvoke r0.<com.jmatio.io.MatFileReader: java.util.Map read(java.io.File,com.jmatio.io.MatFileFilter,int)>(r1, $r2, 1);

        return $r3;
    }

    public synchronized java.util.Map read(java.io.File, int) throws java.io.IOException
    {
        com.jmatio.io.MatFileReader r0;
        java.util.Map $r3;
        int i0;
        com.jmatio.io.MatFileFilter $r2;
        java.io.File r1;

        r0 := @this: com.jmatio.io.MatFileReader;

        r1 := @parameter0: java.io.File;

        i0 := @parameter1: int;

        $r2 = new com.jmatio.io.MatFileFilter;

        specialinvoke $r2.<com.jmatio.io.MatFileFilter: void <init>()>();

        $r3 = virtualinvoke r0.<com.jmatio.io.MatFileReader: java.util.Map read(java.io.File,com.jmatio.io.MatFileFilter,int)>(r1, $r2, i0);

        return $r3;
    }

    public synchronized java.util.Map read(java.io.File, com.jmatio.io.MatFileFilter, int) throws java.io.IOException
    {
        java.io.RandomAccessFile r27, $r30;
        java.nio.channels.FileChannel$MapMode $r12;
        java.nio.ByteBuffer $r8, $r10, $r11, r28;
        byte $b16, $b21;
        java.util.Map $r2, $r9, $r18;
        boolean $z0, $z1;
        java.util.Set $r3;
        java.lang.Exception $r19, $r21;
        java.lang.Throwable $r23;
        long $l1, $l5, $l7, $l9, $l11, $l12, $l13, $l14, $l15, $l17, $l18, $l19, $l20;
        int i0, $i2, $i3, $i4, $i6, $i8, $i10, i22, i23, $i24, $i25, $i26;
        java.lang.String r25;
        java.lang.ref.WeakReference r29, $r31;
        java.util.Iterator $r4;
        java.io.IOException $r24;
        java.lang.IllegalArgumentException $r32;
        java.io.File r6;
        com.jmatio.io.MatFileReader r0;
        java.lang.Object $r17, $r20, $r22;
        com.jmatio.io.MatFileFilter r1;
        java.nio.channels.FileChannel $r7, r26;
        java.nio.MappedByteBuffer $r13, $r15;

        r0 := @this: com.jmatio.io.MatFileReader;

        r6 := @parameter0: java.io.File;

        r1 := @parameter1: com.jmatio.io.MatFileFilter;

        i0 := @parameter2: int;

        r0.<com.jmatio.io.MatFileReader: com.jmatio.io.MatFileFilter filter> = r1;

        $r2 = r0.<com.jmatio.io.MatFileReader: java.util.Map data>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Set keySet()>();

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label02;

        $r17 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r25 = (java.lang.String) $r17;

        $r18 = r0.<com.jmatio.io.MatFileReader: java.util.Map data>;

        interfaceinvoke $r18.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r25);

        goto label01;

     label02:
        r26 = null;

        r27 = null;

        r28 = null;

        r29 = null;

     label03:
        $r30 = new java.io.RandomAccessFile;

        specialinvoke $r30.<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>(r6, "r");

        r27 = $r30;

        $r7 = virtualinvoke $r30.<java.io.RandomAccessFile: java.nio.channels.FileChannel getChannel()>();

        r26 = $r7;

        tableswitch(i0)
        {
            case 1: goto label12;
            case 2: goto label04;
            case 3: goto label13;
            case 4: goto label05;
            default: goto label13;
        };

     label04:
        $l7 = virtualinvoke $r7.<java.nio.channels.FileChannel: long size()>();

        $i8 = (int) $l7;

        $r11 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocateDirect(int)>($i8);

        r28 = $r11;

        virtualinvoke $r7.<java.nio.channels.FileChannel: int read(java.nio.ByteBuffer,long)>($r11, 0L);

        virtualinvoke $r11.<java.nio.ByteBuffer: java.nio.Buffer rewind()>();

        goto label14;

     label05:
        $l1 = virtualinvoke $r7.<java.nio.channels.FileChannel: long size()>();

        i22 = (int) $l1;

        staticinvoke <java.lang.System: void gc()>();

        $r8 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>(i22);

        r28 = $r8;

        $i3 = i22 / 33554432;

        $i2 = i22 % 33554432;

        if $i2 <= 0 goto label06;

        $z1 = 1;

        goto label07;

     label06:
        $z1 = 0;

     label07:
        $i6 = $i3 + $z1;

        if $i6 <= 1 goto label10;

        $r10 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocateDirect(int)>(33554432);

        i23 = 0;

     label08:
        if i23 >= $i6 goto label09;

        virtualinvoke $r10.<java.nio.ByteBuffer: java.nio.Buffer clear()>();

        $i4 = i23 * 33554432;

        $l5 = (long) $i4;

        virtualinvoke $r7.<java.nio.channels.FileChannel: int read(java.nio.ByteBuffer,long)>($r10, $l5);

        virtualinvoke $r10.<java.nio.ByteBuffer: java.nio.Buffer flip()>();

        virtualinvoke $r8.<java.nio.ByteBuffer: java.nio.ByteBuffer put(java.nio.ByteBuffer)>($r10);

        i23 = i23 + 1;

        goto label08;

     label09:
        goto label11;

     label10:
        virtualinvoke $r7.<java.nio.channels.FileChannel: int read(java.nio.ByteBuffer,long)>($r8, 0L);

     label11:
        virtualinvoke $r8.<java.nio.ByteBuffer: java.nio.Buffer rewind()>();

        goto label14;

     label12:
        $r12 = <java.nio.channels.FileChannel$MapMode: java.nio.channels.FileChannel$MapMode READ_ONLY>;

        $l9 = virtualinvoke $r7.<java.nio.channels.FileChannel: long size()>();

        $i10 = (int) $l9;

        $l11 = (long) $i10;

        $r13 = virtualinvoke $r7.<java.nio.channels.FileChannel: java.nio.MappedByteBuffer map(java.nio.channels.FileChannel$MapMode,long,long)>($r12, 0L, $l11);

        r28 = $r13;

        $r31 = new java.lang.ref.WeakReference;

        $r15 = (java.nio.MappedByteBuffer) $r13;

        specialinvoke $r31.<java.lang.ref.WeakReference: void <init>(java.lang.Object)>($r15);

        r29 = $r31;

        goto label14;

     label13:
        $r32 = new java.lang.IllegalArgumentException;

        specialinvoke $r32.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Unknown file allocation policy");

        throw $r32;

     label14:
        specialinvoke r0.<com.jmatio.io.MatFileReader: void readHeader(java.nio.ByteBuffer)>(r28);

     label15:
        $i24 = virtualinvoke r28.<java.nio.ByteBuffer: int remaining()>();

        if $i24 <= 0 goto label16;

        specialinvoke r0.<com.jmatio.io.MatFileReader: void readData(java.nio.ByteBuffer)>(r28);

        goto label15;

     label16:
        $r9 = virtualinvoke r0.<com.jmatio.io.MatFileReader: java.util.Map getContent()>();

        goto label21;

     label17:
        return $r9;

     label18:
        $r24 := @caughtexception;

        throw $r24;

     label19:
        $r23 := @caughtexception;

        goto label30;

     label20:
        throw $r23;

     label21:
        if $r7 == null goto label22;

        virtualinvoke $r7.<java.nio.channels.FileChannel: void close()>();

     label22:
        if $r30 == null goto label23;

        virtualinvoke $r30.<java.io.RandomAccessFile: void close()>();

     label23:
        if r28 == null goto label29;

        if r29 == null goto label29;

        if i0 != 1 goto label29;

     label24:
        specialinvoke r0.<com.jmatio.io.MatFileReader: void clean(java.lang.Object)>(r28);

     label25:
        goto label29;

     label26:
        $r21 := @caughtexception;

        $l17 = staticinvoke <java.lang.System: long currentTimeMillis()>();

     label27:
        $r22 = virtualinvoke r29.<java.lang.ref.WeakReference: java.lang.Object get()>();

        if $r22 == null goto label29;

        $l18 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l20 = $l18 - $l17;

        $l19 = (long) 1000;

        $b21 = $l20 cmp $l19;

        $i25 = (int) $b21;

        if $i25 <= 0 goto label28;

        goto label29;

     label28:
        staticinvoke <java.lang.System: void gc()>();

        staticinvoke <java.lang.Thread: void yield()>();

        goto label27;

     label29:
        goto label17;

     label30:
        if r26 == null goto label31;

        virtualinvoke r26.<java.nio.channels.FileChannel: void close()>();

     label31:
        if r27 == null goto label32;

        virtualinvoke r27.<java.io.RandomAccessFile: void close()>();

     label32:
        if r28 == null goto label38;

        if r29 == null goto label38;

        if i0 != 1 goto label38;

     label33:
        specialinvoke r0.<com.jmatio.io.MatFileReader: void clean(java.lang.Object)>(r28);

     label34:
        goto label38;

     label35:
        $r19 := @caughtexception;

        $l12 = staticinvoke <java.lang.System: long currentTimeMillis()>();

     label36:
        $r20 = virtualinvoke r29.<java.lang.ref.WeakReference: java.lang.Object get()>();

        if $r20 == null goto label38;

        $l13 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l15 = $l13 - $l12;

        $l14 = (long) 1000;

        $b16 = $l15 cmp $l14;

        $i26 = (int) $b16;

        if $i26 <= 0 goto label37;

        goto label38;

     label37:
        staticinvoke <java.lang.System: void gc()>();

        staticinvoke <java.lang.Thread: void yield()>();

        goto label36;

     label38:
        goto label20;

        catch java.io.IOException from label03 to label17 with label18;
        catch java.lang.Throwable from label03 to label17 with label19;
        catch java.lang.Throwable from label18 to label20 with label19;
        catch java.lang.Exception from label24 to label25 with label26;
        catch java.lang.Exception from label33 to label34 with label35;
    }

    private void clean(java.lang.Object) throws java.lang.Exception
    {
        java.lang.Object r2;
        com.jmatio.io.MatFileReader$1 $r0;
        com.jmatio.io.MatFileReader r1;

        r1 := @this: com.jmatio.io.MatFileReader;

        r2 := @parameter0: java.lang.Object;

        $r0 = new com.jmatio.io.MatFileReader$1;

        specialinvoke $r0.<com.jmatio.io.MatFileReader$1: void <init>(com.jmatio.io.MatFileReader,java.lang.Object)>(r1, r2);

        staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r0);

        return;
    }

    public com.jmatio.io.MatFileHeader getMatFileHeader()
    {
        com.jmatio.io.MatFileReader r0;
        com.jmatio.io.MatFileHeader $r1;

        r0 := @this: com.jmatio.io.MatFileReader;

        $r1 = r0.<com.jmatio.io.MatFileReader: com.jmatio.io.MatFileHeader matFileHeader>;

        return $r1;
    }

    public java.util.ArrayList getData()
    {
        com.jmatio.io.MatFileReader r1;
        java.util.Map $r2;
        java.util.Collection $r3;
        java.util.ArrayList $r0;

        r1 := @this: com.jmatio.io.MatFileReader;

        $r0 = new java.util.ArrayList;

        $r2 = r1.<com.jmatio.io.MatFileReader: java.util.Map data>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Collection values()>();

        specialinvoke $r0.<java.util.ArrayList: void <init>(java.util.Collection)>($r3);

        return $r0;
    }

    public com.jmatio.types.MLArray getMLArray(java.lang.String)
    {
        com.jmatio.types.MLArray $r4;
        com.jmatio.io.MatFileReader r0;
        java.util.Map $r2;
        java.lang.Object $r3;
        java.lang.String r1;

        r0 := @this: com.jmatio.io.MatFileReader;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.jmatio.io.MatFileReader: java.util.Map data>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (com.jmatio.types.MLArray) $r3;

        return $r4;
    }

    public java.util.Map getContent()
    {
        com.jmatio.io.MatFileReader r0;
        java.util.Map $r1;

        r0 := @this: com.jmatio.io.MatFileReader;

        $r1 = r0.<com.jmatio.io.MatFileReader: java.util.Map data>;

        return $r1;
    }

    private void readData(java.nio.ByteBuffer) throws java.io.IOException
    {
        byte[] r4;
        com.jmatio.io.MatlabIOException $r9, $r11, $r21, $r30;
        java.nio.ByteBuffer r1, $r6;
        java.util.Map $r17, $r19;
        com.jmatio.io.ByteBufferInputStream $r3;
        boolean $z0;
        java.nio.ByteOrder $r8;
        com.jmatio.types.MLArray $r10;
        com.jmatio.io.MatFileReader$ISMatTag $r0;
        java.lang.StringBuilder $r12, $r13, $r14, $r15, $r22, $r23, $r24, $r31, $r32, $r33;
        java.lang.Throwable $r26, $r28;
        java.util.zip.InflaterInputStream $r2;
        int $i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16;
        java.lang.String $r16, $r18, $r20, $r25, $r34;
        java.io.IOException $r27, $r29;
        com.jmatio.io.MatFileReader r7;
        com.jmatio.io.HeapBufferDataOutputStream $r5;

        r7 := @this: com.jmatio.io.MatFileReader;

        r1 := @parameter0: java.nio.ByteBuffer;

        $r0 = new com.jmatio.io.MatFileReader$ISMatTag;

        specialinvoke $r0.<com.jmatio.io.MatFileReader$ISMatTag: void <init>(java.nio.ByteBuffer)>(r1);

        $i0 = $r0.<com.jmatio.io.MatFileReader$ISMatTag: int type>;

        lookupswitch($i0)
        {
            case 14: goto label17;
            case 15: goto label01;
            default: goto label20;
        };

     label01:
        i1 = $r0.<com.jmatio.io.MatFileReader$ISMatTag: int size>;

        $i2 = virtualinvoke r1.<java.nio.ByteBuffer: int remaining()>();

        if $i2 >= i1 goto label02;

        $r9 = new com.jmatio.io.MatlabIOException;

        specialinvoke $r9.<com.jmatio.io.MatlabIOException: void <init>(java.lang.String)>("Compressed buffer length miscalculated!");

        throw $r9;

     label02:
        $r2 = new java.util.zip.InflaterInputStream;

        $r3 = new com.jmatio.io.ByteBufferInputStream;

        specialinvoke $r3.<com.jmatio.io.ByteBufferInputStream: void <init>(java.nio.ByteBuffer,int)>(r1, i1);

        specialinvoke $r2.<java.util.zip.InflaterInputStream: void <init>(java.io.InputStream)>($r3);

        r4 = newarray (byte)[1024];

        $r5 = new com.jmatio.io.HeapBufferDataOutputStream;

        specialinvoke $r5.<com.jmatio.io.HeapBufferDataOutputStream: void <init>()>();

     label03:
        $i3 = lengthof r4;

        $i4 = virtualinvoke $r2.<java.util.zip.InflaterInputStream: int read(byte[],int,int)>(r4, 0, $i3);

        $i5 = staticinvoke <java.lang.Math: int max(int,int)>(0, $i4);

        virtualinvoke $r5.<com.jmatio.io.HeapBufferDataOutputStream: void write(byte[],int,int)>(r4, 0, $i5);

        if $i4 > 0 goto label03;

     label04:
        goto label22;

     label05:
        goto label09;

     label06:
        $r29 := @caughtexception;

        $r30 = new com.jmatio.io.MatlabIOException;

        $r31 = new java.lang.StringBuilder;

        specialinvoke $r31.<java.lang.StringBuilder: void <init>()>();

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not decompress data: ");

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r29);

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r30.<com.jmatio.io.MatlabIOException: void <init>(java.lang.String)>($r34);

        throw $r30;

     label07:
        $r28 := @caughtexception;

        goto label23;

     label08:
        throw $r28;

     label09:
        $r6 = virtualinvoke $r5.<com.jmatio.io.HeapBufferDataOutputStream: java.nio.ByteBuffer getByteBuffer()>();

        $r8 = r7.<com.jmatio.io.MatFileReader: java.nio.ByteOrder byteOrder>;

        virtualinvoke $r6.<java.nio.ByteBuffer: java.nio.ByteBuffer order(java.nio.ByteOrder)>($r8);

     label10:
        specialinvoke r7.<com.jmatio.io.MatFileReader: void readData(java.nio.ByteBuffer)>($r6);

     label11:
        goto label24;

     label12:
        goto label16;

     label13:
        $r27 := @caughtexception;

        throw $r27;

     label14:
        $r26 := @caughtexception;

        goto label25;

     label15:
        throw $r26;

     label16:
        goto label21;

     label17:
        $i6 = virtualinvoke r1.<java.nio.ByteBuffer: int position()>();

        $r10 = specialinvoke r7.<com.jmatio.io.MatFileReader: com.jmatio.types.MLArray readMatrix(java.nio.ByteBuffer,boolean)>(r1, 1);

        if $r10 == null goto label18;

        $r17 = r7.<com.jmatio.io.MatFileReader: java.util.Map data>;

        $r18 = virtualinvoke $r10.<com.jmatio.types.MLArray: java.lang.String getName()>();

        $z0 = interfaceinvoke $r17.<java.util.Map: boolean containsKey(java.lang.Object)>($r18);

        if $z0 != 0 goto label18;

        $r19 = r7.<com.jmatio.io.MatFileReader: java.util.Map data>;

        $r20 = virtualinvoke $r10.<com.jmatio.types.MLArray: java.lang.String getName()>();

        interfaceinvoke $r19.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r20, $r10);

        goto label19;

     label18:
        $i7 = virtualinvoke r1.<java.nio.ByteBuffer: int position()>();

        $i11 = $i7 - $i6;

        $i8 = $r0.<com.jmatio.io.MatFileReader$ISMatTag: int size>;

        $i12 = $i8 - $i11;

        $i9 = virtualinvoke r1.<java.nio.ByteBuffer: int position()>();

        $i10 = $i9 + $i12;

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.Buffer position(int)>($i10);

     label19:
        $i13 = virtualinvoke r1.<java.nio.ByteBuffer: int position()>();

        $i14 = $i13 - $i6;

        $i15 = $r0.<com.jmatio.io.MatFileReader$ISMatTag: int size>;

        $i16 = $i15 - $i14;

        if $i16 == 0 goto label21;

        $r11 = new com.jmatio.io.MatlabIOException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Matrix was not red fully! ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i16);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" remaining in the buffer.");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<com.jmatio.io.MatlabIOException: void <init>(java.lang.String)>($r16);

        throw $r11;

     label20:
        $r21 = new com.jmatio.io.MatlabIOException;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Incorrect data tag: ");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r21.<com.jmatio.io.MatlabIOException: void <init>(java.lang.String)>($r25);

        throw $r21;

     label21:
        return;

     label22:
        virtualinvoke $r2.<java.util.zip.InflaterInputStream: void close()>();

        virtualinvoke $r5.<com.jmatio.io.HeapBufferDataOutputStream: void flush()>();

        goto label05;

     label23:
        virtualinvoke $r2.<java.util.zip.InflaterInputStream: void close()>();

        virtualinvoke $r5.<com.jmatio.io.HeapBufferDataOutputStream: void flush()>();

        goto label08;

     label24:
        virtualinvoke $r5.<com.jmatio.io.HeapBufferDataOutputStream: void close()>();

        goto label12;

     label25:
        virtualinvoke $r5.<com.jmatio.io.HeapBufferDataOutputStream: void close()>();

        goto label15;

        catch java.io.IOException from label03 to label04 with label06;
        catch java.lang.Throwable from label03 to label05 with label07;
        catch java.lang.Throwable from label06 to label08 with label07;
        catch java.io.IOException from label10 to label11 with label13;
        catch java.lang.Throwable from label10 to label12 with label14;
        catch java.lang.Throwable from label13 to label15 with label14;
    }

    private com.jmatio.types.MLArray readMatrix(java.nio.ByteBuffer, boolean) throws java.io.IOException
    {
        byte[] r148, r150, r153;
        byte $b9;
        com.jmatio.types.MLInt32 $r44;
        com.jmatio.io.ByteBufferInputStream $r12;
        com.jmatio.types.MLChar $r109;
        com.jmatio.types.MLUInt64 $r17;
        java.lang.StringBuilder $r138, $r139, $r141;
        com.jmatio.types.MLCell $r133;
        com.jmatio.types.MLUInt32 $r35;
        com.jmatio.types.MLInt16 $r53;
        java.io.IOException $r9, $r146;
        com.jmatio.types.MLJavaObject $r16;
        com.jmatio.io.MatFileReader r0;
        com.jmatio.io.MatlabIOException $r137;
        java.io.ObjectInputStream $r11;
        com.jmatio.types.MLDouble $r89;
        int[] $r2, $r3, $r100, $r102;
        com.jmatio.types.MLArray $r10, $r121, $r130, $r136, r149;
        com.jmatio.types.MLInt8 $r71;
        int $i0, i1, $i2, i3, $i4, $i5, $i6, $i7, $i8, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, i42, i43, i44, i45, i46, i47, i48, i49, i50, i51, i52, i53, i54, i55, i56;
        com.jmatio.types.MLSingle $r80;
        com.jmatio.types.MLSparse $r98;
        java.lang.Object $r15;
        com.jmatio.types.MLStructure $r114, $r124;
        java.lang.Exception $r145;
        java.lang.Throwable $r144;
        java.lang.Double $r107, $r108;
        double[] $r104, $r106;
        java.lang.String $r4, $r6, $r7, $r111, $r113, $r120, $r122, $r123, $r129, $r131, $r132, $r140, $r142;
        com.jmatio.types.MLObject $r117;
        java.nio.ByteBuffer r1, $r13, $r14, $r20, $r24, $r29, $r33, $r38, $r42, $r47, $r51, $r56, $r60, $r65, $r69, $r74, $r78, $r83, $r87, $r92, $r96;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11;
        com.jmatio.io.MatFileReader$ISMatTag $r5, $r8, $r18, $r22, $r27, $r31, $r36, $r40, $r45, $r49, $r54, $r58, $r63, $r67, $r72, $r76, $r81, $r85, $r90, $r94, $r99, $r101, $r103, $r105, $r110, $r112, $r115, $r116, $r118, $r125, $r126, $r127, $r134;
        com.jmatio.types.MLInt64 $r26;
        java.lang.String[] r147, r152;
        com.jmatio.types.MLUInt8 $r62, r151;
        double $d0, $d1;
        char $c19;
        com.jmatio.types.MLEmptyArray $r119, $r128, $r135;
        com.jmatio.types.MLNumericArray $r19, $r21, $r23, $r25, $r28, $r30, $r32, $r34, $r37, $r39, $r41, $r43, $r46, $r48, $r50, $r52, $r55, $r57, $r59, $r61, $r64, $r66, $r68, $r70, $r73, $r75, $r77, $r79, $r82, $r84, $r86, $r88, $r91, $r93, $r95, $r97;
        com.jmatio.io.MatFileFilter $r143;

        r0 := @this: com.jmatio.io.MatFileReader;

        r1 := @parameter0: java.nio.ByteBuffer;

        z0 := @parameter1: boolean;

        $r2 = specialinvoke r0.<com.jmatio.io.MatFileReader: int[] readFlags(java.nio.ByteBuffer)>(r1);

        $i0 = lengthof $r2;

        if $i0 == 0 goto label01;

        $i40 = $r2[0];

        goto label02;

     label01:
        $i40 = 0;

     label02:
        i1 = $i40;

        $i2 = lengthof $r2;

        if $i2 == 0 goto label03;

        $i41 = $r2[1];

        goto label04;

     label03:
        $i41 = 0;

     label04:
        i3 = $i41;

        $i39 = i1 & 255;

        $r3 = specialinvoke r0.<com.jmatio.io.MatFileReader: int[] readDimension(java.nio.ByteBuffer)>(r1);

        $r4 = specialinvoke r0.<com.jmatio.io.MatFileReader: java.lang.String readName(java.nio.ByteBuffer)>(r1);

        if z0 == 0 goto label05;

        $r143 = r0.<com.jmatio.io.MatFileReader: com.jmatio.io.MatFileFilter filter>;

        $z11 = virtualinvoke $r143.<com.jmatio.io.MatFileFilter: boolean matches(java.lang.String)>($r4);

        if $z11 != 0 goto label05;

        return null;

     label05:
        tableswitch($i39)
        {
            case 1: goto label15;
            case 2: goto label06;
            case 3: goto label52;
            case 4: goto label29;
            case 5: goto label32;
            case 6: goto label20;
            case 7: goto label21;
            case 8: goto label23;
            case 9: goto label22;
            case 10: goto label24;
            case 11: goto label61;
            case 12: goto label25;
            case 13: goto label26;
            case 14: goto label27;
            case 15: goto label28;
            case 16: goto label61;
            case 17: goto label41;
            default: goto label61;
        };

     label06:
        $r124 = new com.jmatio.types.MLStructure;

        specialinvoke $r124.<com.jmatio.types.MLStructure: void <init>(java.lang.String,int[],int,int)>($r4, $r3, $i39, i1);

        $r125 = new com.jmatio.io.MatFileReader$ISMatTag;

        specialinvoke $r125.<com.jmatio.io.MatFileReader$ISMatTag: void <init>(java.nio.ByteBuffer)>(r1);

        $i26 = virtualinvoke r1.<java.nio.ByteBuffer: int getInt()>();

        $r126 = new com.jmatio.io.MatFileReader$ISMatTag;

        specialinvoke $r126.<com.jmatio.io.MatFileReader$ISMatTag: void <init>(java.nio.ByteBuffer)>(r1);

        $i27 = $r126.<com.jmatio.io.MatFileReader$ISMatTag: int size>;

        i42 = $i27 / $i26;

        r147 = newarray (java.lang.String)[i42];

        i43 = 0;

     label07:
        if i43 >= i42 goto label08;

        r148 = newarray (byte)[$i26];

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[])>(r148);

        $r132 = specialinvoke r0.<com.jmatio.io.MatFileReader: java.lang.String zeroEndByteArrayToString(byte[])>(r148);

        r147[i43] = $r132;

        i43 = i43 + 1;

        goto label07;

     label08:
        $i28 = virtualinvoke r1.<java.nio.ByteBuffer: int position()>();

        $i29 = staticinvoke <com.jmatio.io.MatFileReader$ISMatTag: int access$000(com.jmatio.io.MatFileReader$ISMatTag)>($r126);

        $i30 = $i28 + $i29;

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.Buffer position(int)>($i30);

        i44 = 0;

     label09:
        $i31 = virtualinvoke $r124.<com.jmatio.types.MLStructure: int getM()>();

        $i32 = virtualinvoke $r124.<com.jmatio.types.MLStructure: int getN()>();

        $i33 = $i31 * $i32;

        if i44 >= $i33 goto label14;

        i45 = 0;

     label10:
        if i45 >= i42 goto label13;

        $r127 = new com.jmatio.io.MatFileReader$ISMatTag;

        specialinvoke $r127.<com.jmatio.io.MatFileReader$ISMatTag: void <init>(java.nio.ByteBuffer)>(r1);

        $i34 = $r127.<com.jmatio.io.MatFileReader$ISMatTag: int size>;

        if $i34 <= 0 goto label11;

        $r130 = specialinvoke r0.<com.jmatio.io.MatFileReader: com.jmatio.types.MLArray readMatrix(java.nio.ByteBuffer,boolean)>(r1, 0);

        $r131 = r147[i45];

        virtualinvoke $r124.<com.jmatio.types.MLStructure: void setField(java.lang.String,com.jmatio.types.MLArray,int)>($r131, $r130, i44);

        goto label12;

     label11:
        $r129 = r147[i45];

        $r128 = new com.jmatio.types.MLEmptyArray;

        specialinvoke $r128.<com.jmatio.types.MLEmptyArray: void <init>()>();

        virtualinvoke $r124.<com.jmatio.types.MLStructure: void setField(java.lang.String,com.jmatio.types.MLArray,int)>($r129, $r128, i44);

     label12:
        i45 = i45 + 1;

        goto label10;

     label13:
        i44 = i44 + 1;

        goto label09;

     label14:
        r149 = $r124;

        goto label62;

     label15:
        $r133 = new com.jmatio.types.MLCell;

        specialinvoke $r133.<com.jmatio.types.MLCell: void <init>(java.lang.String,int[],int,int)>($r4, $r3, $i39, i1);

        i46 = 0;

     label16:
        $i35 = virtualinvoke $r133.<com.jmatio.types.MLCell: int getM()>();

        $i36 = virtualinvoke $r133.<com.jmatio.types.MLCell: int getN()>();

        $i37 = $i35 * $i36;

        if i46 >= $i37 goto label19;

        $r134 = new com.jmatio.io.MatFileReader$ISMatTag;

        specialinvoke $r134.<com.jmatio.io.MatFileReader$ISMatTag: void <init>(java.nio.ByteBuffer)>(r1);

        $i38 = $r134.<com.jmatio.io.MatFileReader$ISMatTag: int size>;

        if $i38 <= 0 goto label17;

        $r136 = specialinvoke r0.<com.jmatio.io.MatFileReader: com.jmatio.types.MLArray readMatrix(java.nio.ByteBuffer,boolean)>(r1, 0);

        virtualinvoke $r133.<com.jmatio.types.MLCell: void set(com.jmatio.types.MLArray,int)>($r136, i46);

        goto label18;

     label17:
        $r135 = new com.jmatio.types.MLEmptyArray;

        specialinvoke $r135.<com.jmatio.types.MLEmptyArray: void <init>()>();

        virtualinvoke $r133.<com.jmatio.types.MLCell: void set(com.jmatio.types.MLArray,int)>($r135, i46);

     label18:
        i46 = i46 + 1;

        goto label16;

     label19:
        r149 = $r133;

        goto label62;

     label20:
        $r89 = new com.jmatio.types.MLDouble;

        specialinvoke $r89.<com.jmatio.types.MLDouble: void <init>(java.lang.String,int[],int,int)>($r4, $r3, $i39, i1);

        r149 = $r89;

        $r90 = new com.jmatio.io.MatFileReader$ISMatTag;

        specialinvoke $r90.<com.jmatio.io.MatFileReader$ISMatTag: void <init>(java.nio.ByteBuffer)>(r1);

        $r91 = (com.jmatio.types.MLNumericArray) $r89;

        $r92 = virtualinvoke $r91.<com.jmatio.types.MLNumericArray: java.nio.ByteBuffer getRealByteBuffer()>();

        $r93 = (com.jmatio.types.MLNumericArray) $r89;

        virtualinvoke $r90.<com.jmatio.io.MatFileReader$ISMatTag: void readToByteBuffer(java.nio.ByteBuffer,com.jmatio.types.ByteStorageSupport)>($r92, $r93);

        $z9 = virtualinvoke $r89.<com.jmatio.types.MLArray: boolean isComplex()>();

        if $z9 == 0 goto label62;

        $r94 = new com.jmatio.io.MatFileReader$ISMatTag;

        specialinvoke $r94.<com.jmatio.io.MatFileReader$ISMatTag: void <init>(java.nio.ByteBuffer)>(r1);

        $r95 = (com.jmatio.types.MLNumericArray) $r89;

        $r96 = virtualinvoke $r95.<com.jmatio.types.MLNumericArray: java.nio.ByteBuffer getImaginaryByteBuffer()>();

        $r97 = (com.jmatio.types.MLNumericArray) $r89;

        virtualinvoke $r94.<com.jmatio.io.MatFileReader$ISMatTag: void readToByteBuffer(java.nio.ByteBuffer,com.jmatio.types.ByteStorageSupport)>($r96, $r97);

        goto label62;

     label21:
        $r80 = new com.jmatio.types.MLSingle;

        specialinvoke $r80.<com.jmatio.types.MLSingle: void <init>(java.lang.String,int[],int,int)>($r4, $r3, $i39, i1);

        r149 = $r80;

        $r81 = new com.jmatio.io.MatFileReader$ISMatTag;

        specialinvoke $r81.<com.jmatio.io.MatFileReader$ISMatTag: void <init>(java.nio.ByteBuffer)>(r1);

        $r82 = (com.jmatio.types.MLNumericArray) $r80;

        $r83 = virtualinvoke $r82.<com.jmatio.types.MLNumericArray: java.nio.ByteBuffer getRealByteBuffer()>();

        $r84 = (com.jmatio.types.MLNumericArray) $r80;

        virtualinvoke $r81.<com.jmatio.io.MatFileReader$ISMatTag: void readToByteBuffer(java.nio.ByteBuffer,com.jmatio.types.ByteStorageSupport)>($r83, $r84);

        $z8 = virtualinvoke $r80.<com.jmatio.types.MLArray: boolean isComplex()>();

        if $z8 == 0 goto label62;

        $r85 = new com.jmatio.io.MatFileReader$ISMatTag;

        specialinvoke $r85.<com.jmatio.io.MatFileReader$ISMatTag: void <init>(java.nio.ByteBuffer)>(r1);

        $r86 = (com.jmatio.types.MLNumericArray) $r80;

        $r87 = virtualinvoke $r86.<com.jmatio.types.MLNumericArray: java.nio.ByteBuffer getImaginaryByteBuffer()>();

        $r88 = (com.jmatio.types.MLNumericArray) $r80;

        virtualinvoke $r85.<com.jmatio.io.MatFileReader$ISMatTag: void readToByteBuffer(java.nio.ByteBuffer,com.jmatio.types.ByteStorageSupport)>($r87, $r88);

        goto label62;

     label22:
        $r62 = new com.jmatio.types.MLUInt8;

        specialinvoke $r62.<com.jmatio.types.MLUInt8: void <init>(java.lang.String,int[],int,int)>($r4, $r3, $i39, i1);

        r149 = $r62;

        $r63 = new com.jmatio.io.MatFileReader$ISMatTag;

        specialinvoke $r63.<com.jmatio.io.MatFileReader$ISMatTag: void <init>(java.nio.ByteBuffer)>(r1);

        $r64 = (com.jmatio.types.MLNumericArray) $r62;

        $r65 = virtualinvoke $r64.<com.jmatio.types.MLNumericArray: java.nio.ByteBuffer getRealByteBuffer()>();

        $r66 = (com.jmatio.types.MLNumericArray) $r62;

        virtualinvoke $r63.<com.jmatio.io.MatFileReader$ISMatTag: void readToByteBuffer(java.nio.ByteBuffer,com.jmatio.types.ByteStorageSupport)>($r65, $r66);

        $z6 = virtualinvoke $r62.<com.jmatio.types.MLArray: boolean isComplex()>();

        if $z6 == 0 goto label62;

        $r67 = new com.jmatio.io.MatFileReader$ISMatTag;

        specialinvoke $r67.<com.jmatio.io.MatFileReader$ISMatTag: void <init>(java.nio.ByteBuffer)>(r1);

        $r68 = (com.jmatio.types.MLNumericArray) $r62;

        $r69 = virtualinvoke $r68.<com.jmatio.types.MLNumericArray: java.nio.ByteBuffer getImaginaryByteBuffer()>();

        $r70 = (com.jmatio.types.MLNumericArray) $r62;

        virtualinvoke $r67.<com.jmatio.io.MatFileReader$ISMatTag: void readToByteBuffer(java.nio.ByteBuffer,com.jmatio.types.ByteStorageSupport)>($r69, $r70);

        goto label62;

     label23:
        $r71 = new com.jmatio.types.MLInt8;

        specialinvoke $r71.<com.jmatio.types.MLInt8: void <init>(java.lang.String,int[],int,int)>($r4, $r3, $i39, i1);

        r149 = $r71;

        $r72 = new com.jmatio.io.MatFileReader$ISMatTag;

        specialinvoke $r72.<com.jmatio.io.MatFileReader$ISMatTag: void <init>(java.nio.ByteBuffer)>(r1);

        $r73 = (com.jmatio.types.MLNumericArray) $r71;

        $r74 = virtualinvoke $r73.<com.jmatio.types.MLNumericArray: java.nio.ByteBuffer getRealByteBuffer()>();

        $r75 = (com.jmatio.types.MLNumericArray) $r71;

        virtualinvoke $r72.<com.jmatio.io.MatFileReader$ISMatTag: void readToByteBuffer(java.nio.ByteBuffer,com.jmatio.types.ByteStorageSupport)>($r74, $r75);

        $z7 = virtualinvoke $r71.<com.jmatio.types.MLArray: boolean isComplex()>();

        if $z7 == 0 goto label62;

        $r76 = new com.jmatio.io.MatFileReader$ISMatTag;

        specialinvoke $r76.<com.jmatio.io.MatFileReader$ISMatTag: void <init>(java.nio.ByteBuffer)>(r1);

        $r77 = (com.jmatio.types.MLNumericArray) $r71;

        $r78 = virtualinvoke $r77.<com.jmatio.types.MLNumericArray: java.nio.ByteBuffer getImaginaryByteBuffer()>();

        $r79 = (com.jmatio.types.MLNumericArray) $r71;

        virtualinvoke $r76.<com.jmatio.io.MatFileReader$ISMatTag: void readToByteBuffer(java.nio.ByteBuffer,com.jmatio.types.ByteStorageSupport)>($r78, $r79);

        goto label62;

     label24:
        $r53 = new com.jmatio.types.MLInt16;

        specialinvoke $r53.<com.jmatio.types.MLInt16: void <init>(java.lang.String,int[],int,int)>($r4, $r3, $i39, i1);

        r149 = $r53;

        $r54 = new com.jmatio.io.MatFileReader$ISMatTag;

        specialinvoke $r54.<com.jmatio.io.MatFileReader$ISMatTag: void <init>(java.nio.ByteBuffer)>(r1);

        $r55 = (com.jmatio.types.MLNumericArray) $r53;

        $r56 = virtualinvoke $r55.<com.jmatio.types.MLNumericArray: java.nio.ByteBuffer getRealByteBuffer()>();

        $r57 = (com.jmatio.types.MLNumericArray) $r53;

        virtualinvoke $r54.<com.jmatio.io.MatFileReader$ISMatTag: void readToByteBuffer(java.nio.ByteBuffer,com.jmatio.types.ByteStorageSupport)>($r56, $r57);

        $z5 = virtualinvoke $r53.<com.jmatio.types.MLArray: boolean isComplex()>();

        if $z5 == 0 goto label62;

        $r58 = new com.jmatio.io.MatFileReader$ISMatTag;

        specialinvoke $r58.<com.jmatio.io.MatFileReader$ISMatTag: void <init>(java.nio.ByteBuffer)>(r1);

        $r59 = (com.jmatio.types.MLNumericArray) $r53;

        $r60 = virtualinvoke $r59.<com.jmatio.types.MLNumericArray: java.nio.ByteBuffer getImaginaryByteBuffer()>();

        $r61 = (com.jmatio.types.MLNumericArray) $r53;

        virtualinvoke $r58.<com.jmatio.io.MatFileReader$ISMatTag: void readToByteBuffer(java.nio.ByteBuffer,com.jmatio.types.ByteStorageSupport)>($r60, $r61);

        goto label62;

     label25:
        $r44 = new com.jmatio.types.MLInt32;

        specialinvoke $r44.<com.jmatio.types.MLInt32: void <init>(java.lang.String,int[],int,int)>($r4, $r3, $i39, i1);

        r149 = $r44;

        $r45 = new com.jmatio.io.MatFileReader$ISMatTag;

        specialinvoke $r45.<com.jmatio.io.MatFileReader$ISMatTag: void <init>(java.nio.ByteBuffer)>(r1);

        $r46 = (com.jmatio.types.MLNumericArray) $r44;

        $r47 = virtualinvoke $r46.<com.jmatio.types.MLNumericArray: java.nio.ByteBuffer getRealByteBuffer()>();

        $r48 = (com.jmatio.types.MLNumericArray) $r44;

        virtualinvoke $r45.<com.jmatio.io.MatFileReader$ISMatTag: void readToByteBuffer(java.nio.ByteBuffer,com.jmatio.types.ByteStorageSupport)>($r47, $r48);

        $z4 = virtualinvoke $r44.<com.jmatio.types.MLArray: boolean isComplex()>();

        if $z4 == 0 goto label62;

        $r49 = new com.jmatio.io.MatFileReader$ISMatTag;

        specialinvoke $r49.<com.jmatio.io.MatFileReader$ISMatTag: void <init>(java.nio.ByteBuffer)>(r1);

        $r50 = (com.jmatio.types.MLNumericArray) $r44;

        $r51 = virtualinvoke $r50.<com.jmatio.types.MLNumericArray: java.nio.ByteBuffer getImaginaryByteBuffer()>();

        $r52 = (com.jmatio.types.MLNumericArray) $r44;

        virtualinvoke $r49.<com.jmatio.io.MatFileReader$ISMatTag: void readToByteBuffer(java.nio.ByteBuffer,com.jmatio.types.ByteStorageSupport)>($r51, $r52);

        goto label62;

     label26:
        $r35 = new com.jmatio.types.MLUInt32;

        specialinvoke $r35.<com.jmatio.types.MLUInt32: void <init>(java.lang.String,int[],int,int)>($r4, $r3, $i39, i1);

        r149 = $r35;

        $r36 = new com.jmatio.io.MatFileReader$ISMatTag;

        specialinvoke $r36.<com.jmatio.io.MatFileReader$ISMatTag: void <init>(java.nio.ByteBuffer)>(r1);

        $r37 = (com.jmatio.types.MLNumericArray) $r35;

        $r38 = virtualinvoke $r37.<com.jmatio.types.MLNumericArray: java.nio.ByteBuffer getRealByteBuffer()>();

        $r39 = (com.jmatio.types.MLNumericArray) $r35;

        virtualinvoke $r36.<com.jmatio.io.MatFileReader$ISMatTag: void readToByteBuffer(java.nio.ByteBuffer,com.jmatio.types.ByteStorageSupport)>($r38, $r39);

        $z3 = virtualinvoke $r35.<com.jmatio.types.MLArray: boolean isComplex()>();

        if $z3 == 0 goto label62;

        $r40 = new com.jmatio.io.MatFileReader$ISMatTag;

        specialinvoke $r40.<com.jmatio.io.MatFileReader$ISMatTag: void <init>(java.nio.ByteBuffer)>(r1);

        $r41 = (com.jmatio.types.MLNumericArray) $r35;

        $r42 = virtualinvoke $r41.<com.jmatio.types.MLNumericArray: java.nio.ByteBuffer getImaginaryByteBuffer()>();

        $r43 = (com.jmatio.types.MLNumericArray) $r35;

        virtualinvoke $r40.<com.jmatio.io.MatFileReader$ISMatTag: void readToByteBuffer(java.nio.ByteBuffer,com.jmatio.types.ByteStorageSupport)>($r42, $r43);

        goto label62;

     label27:
        $r26 = new com.jmatio.types.MLInt64;

        specialinvoke $r26.<com.jmatio.types.MLInt64: void <init>(java.lang.String,int[],int,int)>($r4, $r3, $i39, i1);

        r149 = $r26;

        $r27 = new com.jmatio.io.MatFileReader$ISMatTag;

        specialinvoke $r27.<com.jmatio.io.MatFileReader$ISMatTag: void <init>(java.nio.ByteBuffer)>(r1);

        $r28 = (com.jmatio.types.MLNumericArray) $r26;

        $r29 = virtualinvoke $r28.<com.jmatio.types.MLNumericArray: java.nio.ByteBuffer getRealByteBuffer()>();

        $r30 = (com.jmatio.types.MLNumericArray) $r26;

        virtualinvoke $r27.<com.jmatio.io.MatFileReader$ISMatTag: void readToByteBuffer(java.nio.ByteBuffer,com.jmatio.types.ByteStorageSupport)>($r29, $r30);

        $z2 = virtualinvoke $r26.<com.jmatio.types.MLArray: boolean isComplex()>();

        if $z2 == 0 goto label62;

        $r31 = new com.jmatio.io.MatFileReader$ISMatTag;

        specialinvoke $r31.<com.jmatio.io.MatFileReader$ISMatTag: void <init>(java.nio.ByteBuffer)>(r1);

        $r32 = (com.jmatio.types.MLNumericArray) $r26;

        $r33 = virtualinvoke $r32.<com.jmatio.types.MLNumericArray: java.nio.ByteBuffer getImaginaryByteBuffer()>();

        $r34 = (com.jmatio.types.MLNumericArray) $r26;

        virtualinvoke $r31.<com.jmatio.io.MatFileReader$ISMatTag: void readToByteBuffer(java.nio.ByteBuffer,com.jmatio.types.ByteStorageSupport)>($r33, $r34);

        goto label62;

     label28:
        $r17 = new com.jmatio.types.MLUInt64;

        specialinvoke $r17.<com.jmatio.types.MLUInt64: void <init>(java.lang.String,int[],int,int)>($r4, $r3, $i39, i1);

        r149 = $r17;

        $r18 = new com.jmatio.io.MatFileReader$ISMatTag;

        specialinvoke $r18.<com.jmatio.io.MatFileReader$ISMatTag: void <init>(java.nio.ByteBuffer)>(r1);

        $r19 = (com.jmatio.types.MLNumericArray) $r17;

        $r20 = virtualinvoke $r19.<com.jmatio.types.MLNumericArray: java.nio.ByteBuffer getRealByteBuffer()>();

        $r21 = (com.jmatio.types.MLNumericArray) $r17;

        virtualinvoke $r18.<com.jmatio.io.MatFileReader$ISMatTag: void readToByteBuffer(java.nio.ByteBuffer,com.jmatio.types.ByteStorageSupport)>($r20, $r21);

        $z1 = virtualinvoke $r17.<com.jmatio.types.MLArray: boolean isComplex()>();

        if $z1 == 0 goto label62;

        $r22 = new com.jmatio.io.MatFileReader$ISMatTag;

        specialinvoke $r22.<com.jmatio.io.MatFileReader$ISMatTag: void <init>(java.nio.ByteBuffer)>(r1);

        $r23 = (com.jmatio.types.MLNumericArray) $r17;

        $r24 = virtualinvoke $r23.<com.jmatio.types.MLNumericArray: java.nio.ByteBuffer getImaginaryByteBuffer()>();

        $r25 = (com.jmatio.types.MLNumericArray) $r17;

        virtualinvoke $r22.<com.jmatio.io.MatFileReader$ISMatTag: void readToByteBuffer(java.nio.ByteBuffer,com.jmatio.types.ByteStorageSupport)>($r24, $r25);

        goto label62;

     label29:
        $r109 = new com.jmatio.types.MLChar;

        specialinvoke $r109.<com.jmatio.types.MLChar: void <init>(java.lang.String,int[],int,int)>($r4, $r3, $i39, i1);

        $r110 = new com.jmatio.io.MatFileReader$ISMatTag;

        specialinvoke $r110.<com.jmatio.io.MatFileReader$ISMatTag: void <init>(java.nio.ByteBuffer)>(r1);

        $r111 = virtualinvoke $r110.<com.jmatio.io.MatFileReader$ISMatTag: java.lang.String readToString()>();

        i47 = 0;

     label30:
        $i18 = virtualinvoke $r111.<java.lang.String: int length()>();

        if i47 >= $i18 goto label31;

        $c19 = virtualinvoke $r111.<java.lang.String: char charAt(int)>(i47);

        virtualinvoke $r109.<com.jmatio.types.MLChar: void setChar(char,int)>($c19, i47);

        i47 = i47 + 1;

        goto label30;

     label31:
        r149 = $r109;

        goto label62;

     label32:
        $r98 = new com.jmatio.types.MLSparse;

        specialinvoke $r98.<com.jmatio.types.MLSparse: void <init>(java.lang.String,int[],int,int)>($r4, $r3, i1, i3);

        $r99 = new com.jmatio.io.MatFileReader$ISMatTag;

        specialinvoke $r99.<com.jmatio.io.MatFileReader$ISMatTag: void <init>(java.nio.ByteBuffer)>(r1);

        $r100 = virtualinvoke $r99.<com.jmatio.io.MatFileReader$ISMatTag: int[] readToIntArray()>();

        $r101 = new com.jmatio.io.MatFileReader$ISMatTag;

        specialinvoke $r101.<com.jmatio.io.MatFileReader$ISMatTag: void <init>(java.nio.ByteBuffer)>(r1);

        $r102 = virtualinvoke $r101.<com.jmatio.io.MatFileReader$ISMatTag: int[] readToIntArray()>();

        $r103 = new com.jmatio.io.MatFileReader$ISMatTag;

        specialinvoke $r103.<com.jmatio.io.MatFileReader$ISMatTag: void <init>(java.nio.ByteBuffer)>(r1);

        $r104 = virtualinvoke $r103.<com.jmatio.io.MatFileReader$ISMatTag: double[] readToDoubleArray()>();

        i48 = 0;

        i49 = 0;

     label33:
        $i10 = virtualinvoke $r98.<com.jmatio.types.MLSparse: int getN()>();

        if i49 >= $i10 goto label36;

     label34:
        $i15 = i49 + 1;

        $i16 = $r102[$i15];

        if i48 >= $i16 goto label35;

        $d1 = $r104[i48];

        $r108 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d1);

        $i17 = $r100[i48];

        virtualinvoke $r98.<com.jmatio.types.MLSparse: void setReal(java.lang.Double,int,int)>($r108, $i17, i49);

        i48 = i48 + 1;

        goto label34;

     label35:
        i49 = i49 + 1;

        goto label33;

     label36:
        $z10 = virtualinvoke $r98.<com.jmatio.types.MLSparse: boolean isComplex()>();

        if $z10 == 0 goto label40;

        $r105 = new com.jmatio.io.MatFileReader$ISMatTag;

        specialinvoke $r105.<com.jmatio.io.MatFileReader$ISMatTag: void <init>(java.nio.ByteBuffer)>(r1);

        $r106 = virtualinvoke $r105.<com.jmatio.io.MatFileReader$ISMatTag: double[] readToDoubleArray()>();

        i50 = 0;

        i51 = 0;

     label37:
        $i11 = virtualinvoke $r98.<com.jmatio.types.MLSparse: int getN()>();

        if i51 >= $i11 goto label40;

     label38:
        $i12 = i51 + 1;

        $i13 = $r102[$i12];

        if i50 >= $i13 goto label39;

        $d0 = $r106[i50];

        $r107 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $i14 = $r100[i50];

        virtualinvoke $r98.<com.jmatio.types.MLSparse: void setImaginary(java.lang.Double,int,int)>($r107, $i14, i51);

        i50 = i50 + 1;

        goto label38;

     label39:
        i51 = i51 + 1;

        goto label37;

     label40:
        r149 = $r98;

        goto label62;

     label41:
        $r5 = new com.jmatio.io.MatFileReader$ISMatTag;

        specialinvoke $r5.<com.jmatio.io.MatFileReader$ISMatTag: void <init>(java.nio.ByteBuffer)>(r1);

        $r6 = virtualinvoke $r5.<com.jmatio.io.MatFileReader$ISMatTag: java.lang.String readToString()>();

        $i4 = lengthof $r3;

        r150 = newarray (byte)[$i4];

        i52 = 0;

     label42:
        $i5 = lengthof $r3;

        if i52 >= $i5 goto label43;

        $i8 = $r3[i52];

        $b9 = (byte) $i8;

        r150[i52] = $b9;

        i52 = i52 + 1;

        goto label42;

     label43:
        $r7 = new java.lang.String;

        specialinvoke $r7.<java.lang.String: void <init>(byte[])>(r150);

        $r8 = new com.jmatio.io.MatFileReader$ISMatTag;

        specialinvoke $r8.<com.jmatio.io.MatFileReader$ISMatTag: void <init>(java.nio.ByteBuffer)>(r1);

        $i6 = $r8.<com.jmatio.io.MatFileReader$ISMatTag: int type>;

        if $i6 != 14 goto label51;

        $r10 = specialinvoke r0.<com.jmatio.io.MatFileReader: com.jmatio.types.MLArray readMatrix(java.nio.ByteBuffer,boolean)>(r1, 0);

        r151 = (com.jmatio.types.MLUInt8) $r10;

        $r11 = new java.io.ObjectInputStream;

        $r12 = new com.jmatio.io.ByteBufferInputStream;

        $r13 = virtualinvoke r151.<com.jmatio.types.MLUInt8: java.nio.ByteBuffer getRealByteBuffer()>();

        $r14 = virtualinvoke r151.<com.jmatio.types.MLUInt8: java.nio.ByteBuffer getRealByteBuffer()>();

        $i7 = virtualinvoke $r14.<java.nio.ByteBuffer: int limit()>();

        specialinvoke $r12.<com.jmatio.io.ByteBufferInputStream: void <init>(java.nio.ByteBuffer,int)>($r13, $i7);

        specialinvoke $r11.<java.io.ObjectInputStream: void <init>(java.io.InputStream)>($r12);

     label44:
        $r15 = virtualinvoke $r11.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        $r16 = new com.jmatio.types.MLJavaObject;

        specialinvoke $r16.<com.jmatio.types.MLJavaObject: void <init>(java.lang.String,java.lang.String,java.lang.Object)>($r7, $r6, $r15);

        r149 = $r16;

     label45:
        goto label63;

     label46:
        goto label50;

     label47:
        $r145 := @caughtexception;

        $r146 = new java.io.IOException;

        specialinvoke $r146.<java.io.IOException: void <init>(java.lang.Throwable)>($r145);

        throw $r146;

     label48:
        $r144 := @caughtexception;

        goto label64;

     label49:
        throw $r144;

     label50:
        goto label62;

     label51:
        $r9 = new java.io.IOException;

        specialinvoke $r9.<java.io.IOException: void <init>(java.lang.String)>("Unexpected java object content");

        throw $r9;

     label52:
        $r112 = new com.jmatio.io.MatFileReader$ISMatTag;

        specialinvoke $r112.<com.jmatio.io.MatFileReader$ISMatTag: void <init>(java.nio.ByteBuffer)>(r1);

        $r113 = virtualinvoke $r112.<com.jmatio.io.MatFileReader$ISMatTag: java.lang.String readToString()>();

        $r114 = new com.jmatio.types.MLStructure;

        specialinvoke $r114.<com.jmatio.types.MLStructure: void <init>(java.lang.String,int[],int,int)>($r4, $r3, $i39, i1);

        $r115 = new com.jmatio.io.MatFileReader$ISMatTag;

        specialinvoke $r115.<com.jmatio.io.MatFileReader$ISMatTag: void <init>(java.nio.ByteBuffer)>(r1);

        $i20 = virtualinvoke r1.<java.nio.ByteBuffer: int getInt()>();

        $r116 = new com.jmatio.io.MatFileReader$ISMatTag;

        specialinvoke $r116.<com.jmatio.io.MatFileReader$ISMatTag: void <init>(java.nio.ByteBuffer)>(r1);

        $i21 = $r116.<com.jmatio.io.MatFileReader$ISMatTag: int size>;

        i53 = $i21 / $i20;

        r152 = newarray (java.lang.String)[i53];

        i54 = 0;

     label53:
        if i54 >= i53 goto label54;

        r153 = newarray (byte)[$i20];

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[])>(r153);

        $r123 = specialinvoke r0.<com.jmatio.io.MatFileReader: java.lang.String zeroEndByteArrayToString(byte[])>(r153);

        r152[i54] = $r123;

        i54 = i54 + 1;

        goto label53;

     label54:
        $i22 = virtualinvoke r1.<java.nio.ByteBuffer: int position()>();

        $i23 = staticinvoke <com.jmatio.io.MatFileReader$ISMatTag: int access$000(com.jmatio.io.MatFileReader$ISMatTag)>($r116);

        $i24 = $i22 + $i23;

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.Buffer position(int)>($i24);

        i55 = 0;

     label55:
        if i55 >= 1 goto label60;

        i56 = 0;

     label56:
        if i56 >= i53 goto label59;

        $r118 = new com.jmatio.io.MatFileReader$ISMatTag;

        specialinvoke $r118.<com.jmatio.io.MatFileReader$ISMatTag: void <init>(java.nio.ByteBuffer)>(r1);

        $i25 = $r118.<com.jmatio.io.MatFileReader$ISMatTag: int size>;

        if $i25 <= 0 goto label57;

        $r121 = specialinvoke r0.<com.jmatio.io.MatFileReader: com.jmatio.types.MLArray readMatrix(java.nio.ByteBuffer,boolean)>(r1, 0);

        $r122 = r152[i56];

        virtualinvoke $r114.<com.jmatio.types.MLStructure: void setField(java.lang.String,com.jmatio.types.MLArray,int)>($r122, $r121, i55);

        goto label58;

     label57:
        $r120 = r152[i56];

        $r119 = new com.jmatio.types.MLEmptyArray;

        specialinvoke $r119.<com.jmatio.types.MLEmptyArray: void <init>()>();

        virtualinvoke $r114.<com.jmatio.types.MLStructure: void setField(java.lang.String,com.jmatio.types.MLArray,int)>($r120, $r119, i55);

     label58:
        i56 = i56 + 1;

        goto label56;

     label59:
        i55 = i55 + 1;

        goto label55;

     label60:
        $r117 = new com.jmatio.types.MLObject;

        specialinvoke $r117.<com.jmatio.types.MLObject: void <init>(java.lang.String,java.lang.String,com.jmatio.types.MLStructure)>($r4, $r113, $r114);

        r149 = $r117;

        goto label62;

     label61:
        $r137 = new com.jmatio.io.MatlabIOException;

        $r138 = new java.lang.StringBuilder;

        specialinvoke $r138.<java.lang.StringBuilder: void <init>()>();

        $r139 = virtualinvoke $r138.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Incorrect matlab array class: ");

        $r140 = staticinvoke <com.jmatio.types.MLArray: java.lang.String typeToString(int)>($i39);

        $r141 = virtualinvoke $r139.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r140);

        $r142 = virtualinvoke $r141.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r137.<com.jmatio.io.MatlabIOException: void <init>(java.lang.String)>($r142);

        throw $r137;

     label62:
        return r149;

     label63:
        virtualinvoke $r11.<java.io.ObjectInputStream: void close()>();

        goto label46;

     label64:
        virtualinvoke $r11.<java.io.ObjectInputStream: void close()>();

        goto label49;

        catch java.lang.Exception from label44 to label45 with label47;
        catch java.lang.Throwable from label44 to label46 with label48;
        catch java.lang.Throwable from label47 to label49 with label48;
    }

    private java.lang.String zeroEndByteArrayToString(byte[]) throws java.io.IOException
    {
        byte[] r0;
        byte $b1;
        com.jmatio.io.MatFileReader r2;
        int $i0, i2;
        java.lang.String $r1;

        r2 := @this: com.jmatio.io.MatFileReader;

        r0 := @parameter0: byte[];

        i2 = 0;

     label1:
        $i0 = lengthof r0;

        if i2 >= $i0 goto label2;

        $b1 = r0[i2];

        if $b1 == 0 goto label2;

        i2 = i2 + 1;

        goto label1;

     label2:
        $r1 = new java.lang.String;

        specialinvoke $r1.<java.lang.String: void <init>(byte[],int,int)>(r0, 0, i2);

        return $r1;
    }

    private int[] readFlags(java.nio.ByteBuffer) throws java.io.IOException
    {
        com.jmatio.io.MatFileReader$ISMatTag $r0;
        int[] $r2;
        com.jmatio.io.MatFileReader r3;
        java.nio.ByteBuffer r1;

        r3 := @this: com.jmatio.io.MatFileReader;

        r1 := @parameter0: java.nio.ByteBuffer;

        $r0 = new com.jmatio.io.MatFileReader$ISMatTag;

        specialinvoke $r0.<com.jmatio.io.MatFileReader$ISMatTag: void <init>(java.nio.ByteBuffer)>(r1);

        $r2 = virtualinvoke $r0.<com.jmatio.io.MatFileReader$ISMatTag: int[] readToIntArray()>();

        return $r2;
    }

    private int[] readDimension(java.nio.ByteBuffer) throws java.io.IOException
    {
        com.jmatio.io.MatFileReader$ISMatTag $r0;
        int[] $r2;
        com.jmatio.io.MatFileReader r3;
        java.nio.ByteBuffer r1;

        r3 := @this: com.jmatio.io.MatFileReader;

        r1 := @parameter0: java.nio.ByteBuffer;

        $r0 = new com.jmatio.io.MatFileReader$ISMatTag;

        specialinvoke $r0.<com.jmatio.io.MatFileReader$ISMatTag: void <init>(java.nio.ByteBuffer)>(r1);

        $r2 = virtualinvoke $r0.<com.jmatio.io.MatFileReader$ISMatTag: int[] readToIntArray()>();

        return $r2;
    }

    private java.lang.String readName(java.nio.ByteBuffer) throws java.io.IOException
    {
        com.jmatio.io.MatFileReader$ISMatTag $r0;
        com.jmatio.io.MatFileReader r3;
        java.lang.String $r2;
        java.nio.ByteBuffer r1;

        r3 := @this: com.jmatio.io.MatFileReader;

        r1 := @parameter0: java.nio.ByteBuffer;

        $r0 = new com.jmatio.io.MatFileReader$ISMatTag;

        specialinvoke $r0.<com.jmatio.io.MatFileReader$ISMatTag: void <init>(java.nio.ByteBuffer)>(r1);

        $r2 = virtualinvoke $r0.<com.jmatio.io.MatFileReader$ISMatTag: java.lang.String readToString()>();

        return $r2;
    }

    private void readHeader(java.nio.ByteBuffer) throws java.io.IOException
    {
        byte[] r0, r1, r5;
        com.jmatio.io.MatlabIOException $r11;
        java.nio.ByteBuffer r2;
        byte $b2, $b4, $b5, $b8, $b10, $b11;
        boolean $z0;
        java.nio.ByteOrder $r6, $r7, $r9;
        com.jmatio.io.MatFileHeader $r12;
        short $s7, $s13, $s17, $s20;
        int $i0, $i1, $i6, $i12, i14, $i15, $i16, $i18, $i19, $i21, $i22;
        java.lang.String $r4;
        char $c3, $c9;
        com.jmatio.io.MatFileReader r3;

        r3 := @this: com.jmatio.io.MatFileReader;

        r2 := @parameter0: java.nio.ByteBuffer;

        r0 = newarray (byte)[2];

        r1 = newarray (byte)[116];

        virtualinvoke r2.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[])>(r1);

        $r4 = specialinvoke r3.<com.jmatio.io.MatFileReader: java.lang.String zeroEndByteArrayToString(byte[])>(r1);

        $z0 = virtualinvoke $r4.<java.lang.String: boolean matches(java.lang.String)>("MATLAB 5.0 MAT-file.*");

        if $z0 != 0 goto label1;

        $r11 = new com.jmatio.io.MatlabIOException;

        specialinvoke $r11.<com.jmatio.io.MatlabIOException: void <init>(java.lang.String)>("This is not a valid MATLAB 5.0 MAT-file.");

        throw $r11;

     label1:
        $i0 = virtualinvoke r2.<java.nio.ByteBuffer: int position()>();

        $i1 = $i0 + 8;

        virtualinvoke r2.<java.nio.ByteBuffer: java.nio.Buffer position(int)>($i1);

        r5 = newarray (byte)[2];

        virtualinvoke r2.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[])>(r5);

        virtualinvoke r2.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[])>(r0);

        $b2 = r0[0];

        $c3 = (char) $b2;

        $i15 = (int) $c3;

        if $i15 != 73 goto label2;

        $b8 = r0[1];

        $c9 = (char) $b8;

        $i16 = (int) $c9;

        if $i16 != 77 goto label2;

        $r7 = <java.nio.ByteOrder: java.nio.ByteOrder LITTLE_ENDIAN>;

        r3.<com.jmatio.io.MatFileReader: java.nio.ByteOrder byteOrder> = $r7;

        $b10 = r5[1];

        $s17 = (short) $b10;

        $s13 = $s17 & 255;

        $b11 = r5[0];

        $i18 = (int) $b11;

        $i12 = $i18 << 8;

        $i19 = (int) $s13;

        i14 = $i19 | $i12;

        goto label3;

     label2:
        $r6 = <java.nio.ByteOrder: java.nio.ByteOrder BIG_ENDIAN>;

        r3.<com.jmatio.io.MatFileReader: java.nio.ByteOrder byteOrder> = $r6;

        $b4 = r5[0];

        $s20 = (short) $b4;

        $s7 = $s20 & 255;

        $b5 = r5[1];

        $i21 = (int) $b5;

        $i6 = $i21 << 8;

        $i22 = (int) $s7;

        i14 = $i22 | $i6;

     label3:
        $r9 = r3.<com.jmatio.io.MatFileReader: java.nio.ByteOrder byteOrder>;

        virtualinvoke r2.<java.nio.ByteBuffer: java.nio.ByteBuffer order(java.nio.ByteOrder)>($r9);

        $r12 = new com.jmatio.io.MatFileHeader;

        specialinvoke $r12.<com.jmatio.io.MatFileHeader: void <init>(java.lang.String,int,byte[])>($r4, i14, r0);

        r3.<com.jmatio.io.MatFileReader: com.jmatio.io.MatFileHeader matFileHeader> = $r12;

        return;
    }

    public static void <clinit>()
    {
        <com.jmatio.io.MatFileReader: int DIRECT_BUFFER_LIMIT> = 33554432;

        <com.jmatio.io.MatFileReader: int HEAP_BYTE_BUFFER> = 4;

        <com.jmatio.io.MatFileReader: int DIRECT_BYTE_BUFFER> = 2;

        <com.jmatio.io.MatFileReader: int MEMORY_MAPPED_FILE> = 1;

        return;
    }
}
