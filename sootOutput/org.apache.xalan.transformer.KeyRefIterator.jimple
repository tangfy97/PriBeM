public class org.apache.xalan.transformer.KeyRefIterator extends org.apache.xpath.axes.ChildTestIterator
{
    org.apache.xml.dtm.DTMIterator m_keysNodes;
    protected org.apache.xml.utils.XMLString m_ref;
    protected org.apache.xml.utils.QName m_name;
    protected java.util.Vector m_keyDeclarations;

    public void <init>(org.apache.xml.utils.QName, org.apache.xml.utils.XMLString, java.util.Vector, org.apache.xml.dtm.DTMIterator)
    {
        org.apache.xalan.transformer.KeyRefIterator r0;
        org.apache.xml.utils.QName r1;
        java.util.Vector r3;
        int $i1;
        org.apache.xml.dtm.DTMIterator r4;
        org.apache.xml.utils.XMLString r2;

        r0 := @this: org.apache.xalan.transformer.KeyRefIterator;

        r1 := @parameter0: org.apache.xml.utils.QName;

        r2 := @parameter1: org.apache.xml.utils.XMLString;

        r3 := @parameter2: java.util.Vector;

        r4 := @parameter3: org.apache.xml.dtm.DTMIterator;

        specialinvoke r0.<org.apache.xpath.axes.ChildTestIterator: void <init>(org.apache.xml.dtm.DTMAxisTraverser)>(null);

        r0.<org.apache.xalan.transformer.KeyRefIterator: org.apache.xml.utils.QName m_name> = r1;

        r0.<org.apache.xalan.transformer.KeyRefIterator: org.apache.xml.utils.XMLString m_ref> = r2;

        r0.<org.apache.xalan.transformer.KeyRefIterator: java.util.Vector m_keyDeclarations> = r3;

        r0.<org.apache.xalan.transformer.KeyRefIterator: org.apache.xml.dtm.DTMIterator m_keysNodes> = r4;

        $i1 = (int) -1;

        virtualinvoke r0.<org.apache.xpath.patterns.NodeTest: void setWhatToShow(int)>($i1);

        return;
    }

    protected int getNextNode()
    {
        org.apache.xalan.transformer.KeyRefIterator r0;
        short $s1;
        int $i0, $i3;
        org.apache.xml.dtm.DTMIterator $r1;

        r0 := @this: org.apache.xalan.transformer.KeyRefIterator;

        goto label2;

     label1:
        $s1 = virtualinvoke r0.<org.apache.xalan.transformer.KeyRefIterator: short filterNode(int)>($i0);

        if 1 != $s1 goto label2;

        goto label3;

     label2:
        $r1 = r0.<org.apache.xalan.transformer.KeyRefIterator: org.apache.xml.dtm.DTMIterator m_keysNodes>;

        $i0 = interfaceinvoke $r1.<org.apache.xml.dtm.DTMIterator: int nextNode()>();

        $i3 = (int) -1;

        if $i3 != $i0 goto label1;

     label3:
        r0.<org.apache.xpath.axes.LocPathIterator: int m_lastFetched> = $i0;

        return $i0;
    }

    public short filterNode(int)
    {
        org.apache.xml.utils.XMLString $r17, $r18, $r23;
        java.util.Vector r1;
        boolean $z0, $z1, $z2, z3;
        org.apache.xalan.transformer.KeyIterator r6;
        org.apache.xml.utils.QName r2, $r10;
        org.apache.xpath.objects.XNodeSet $r4, $r14;
        org.apache.xpath.XPath $r11;
        org.apache.xml.dtm.DTMIterator $r3, $r5, $r15;
        org.apache.xpath.objects.XObject $r13;
        java.lang.Object[] $r20;
        javax.xml.transform.TransformerException $r24;
        org.apache.xalan.templates.KeyDeclaration r9;
        org.apache.xpath.XPathContext $r7;
        int $i0, i1, $i2, i3, $i4, $i6;
        java.lang.String $r21, $r22;
        org.apache.xalan.transformer.KeyRefIterator r0;
        org.apache.xml.utils.WrappedRuntimeException $r26;
        java.lang.RuntimeException $r27;
        org.apache.xml.dtm.DTM $r16;
        java.lang.Object $r8;
        org.apache.xml.utils.PrefixResolver $r12;

        r0 := @this: org.apache.xalan.transformer.KeyRefIterator;

        i1 := @parameter0: int;

        z3 = 0;

        r1 = r0.<org.apache.xalan.transformer.KeyRefIterator: java.util.Vector m_keyDeclarations>;

        r2 = r0.<org.apache.xalan.transformer.KeyRefIterator: org.apache.xml.utils.QName m_name>;

        $r3 = r0.<org.apache.xalan.transformer.KeyRefIterator: org.apache.xml.dtm.DTMIterator m_keysNodes>;

        $r4 = (org.apache.xpath.objects.XNodeSet) $r3;

        $r5 = virtualinvoke $r4.<org.apache.xpath.axes.NodeSequence: org.apache.xml.dtm.DTMIterator getContainedIter()>();

        r6 = (org.apache.xalan.transformer.KeyIterator) $r5;

        $r7 = virtualinvoke r6.<org.apache.xpath.axes.LocPathIterator: org.apache.xpath.XPathContext getXPathContext()>();

        if null != $r7 goto label01;

        virtualinvoke r0.<org.apache.xpath.Expression: void assertion(boolean,java.lang.String)>(0, "xctxt can not be null here!");

     label01:
        $r23 = r0.<org.apache.xalan.transformer.KeyRefIterator: org.apache.xml.utils.XMLString m_ref>;

        $i0 = virtualinvoke r1.<java.util.Vector: int size()>();

        i3 = 0;

        goto label09;

     label02:
        $r8 = virtualinvoke r1.<java.util.Vector: java.lang.Object elementAt(int)>(i3);

        r9 = (org.apache.xalan.templates.KeyDeclaration) $r8;

        $r10 = virtualinvoke r9.<org.apache.xalan.templates.KeyDeclaration: org.apache.xml.utils.QName getName()>();

        $z0 = virtualinvoke $r10.<org.apache.xml.utils.QName: boolean equals(java.lang.Object)>(r2);

        if $z0 != 0 goto label03;

        goto label08;

     label03:
        z3 = 1;

        $r11 = virtualinvoke r9.<org.apache.xalan.templates.KeyDeclaration: org.apache.xpath.XPath getUse()>();

        $r12 = virtualinvoke r6.<org.apache.xpath.axes.LocPathIterator: org.apache.xml.utils.PrefixResolver getPrefixResolver()>();

        $r13 = virtualinvoke $r11.<org.apache.xpath.XPath: org.apache.xpath.objects.XObject execute(org.apache.xpath.XPathContext,int,org.apache.xml.utils.PrefixResolver)>($r7, i1, $r12);

        $i2 = virtualinvoke $r13.<org.apache.xpath.objects.XObject: int getType()>();

        if $i2 == 4 goto label05;

        $r18 = virtualinvoke $r13.<org.apache.xpath.objects.XObject: org.apache.xml.utils.XMLString xstr()>();

        $z2 = interfaceinvoke $r23.<org.apache.xml.utils.XMLString: boolean equals(org.apache.xml.utils.XMLString)>($r18);

        if $z2 == 0 goto label04;

        return 1;

     label04:
        goto label08;

     label05:
        $r14 = (org.apache.xpath.objects.XNodeSet) $r13;

        $r15 = virtualinvoke $r14.<org.apache.xpath.objects.XNodeSet: org.apache.xml.dtm.DTMIterator iterRaw()>();

        goto label07;

     label06:
        $r16 = virtualinvoke r0.<org.apache.xpath.axes.LocPathIterator: org.apache.xml.dtm.DTM getDTM(int)>($i4);

        $r17 = interfaceinvoke $r16.<org.apache.xml.dtm.DTM: org.apache.xml.utils.XMLString getStringValue(int)>($i4);

        if null == $r17 goto label07;

        $z1 = interfaceinvoke $r23.<org.apache.xml.utils.XMLString: boolean equals(org.apache.xml.utils.XMLString)>($r17);

        if $z1 == 0 goto label07;

        return 1;

     label07:
        $i4 = interfaceinvoke $r15.<org.apache.xml.dtm.DTMIterator: int nextNode()>();

        $i6 = (int) -1;

        if $i6 != $i4 goto label06;

     label08:
        i3 = i3 + 1;

     label09:
        if i3 < $i0 goto label02;

     label10:
        goto label12;

     label11:
        $r24 := @caughtexception;

        $r26 = new org.apache.xml.utils.WrappedRuntimeException;

        specialinvoke $r26.<org.apache.xml.utils.WrappedRuntimeException: void <init>(java.lang.Exception)>($r24);

        throw $r26;

     label12:
        if z3 != 0 goto label13;

        $r27 = new java.lang.RuntimeException;

        $r20 = newarray (java.lang.Object)[1];

        $r21 = virtualinvoke r2.<org.apache.xml.utils.QName: java.lang.String getLocalName()>();

        $r20[0] = $r21;

        $r22 = staticinvoke <org.apache.xalan.res.XSLMessages: java.lang.String createMessage(java.lang.String,java.lang.Object[])>("ER_NO_XSLKEY_DECLARATION", $r20);

        specialinvoke $r27.<java.lang.RuntimeException: void <init>(java.lang.String)>($r22);

        throw $r27;

     label13:
        return 2;

        catch javax.xml.transform.TransformerException from label01 to label10 with label11;
    }
}
