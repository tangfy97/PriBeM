class org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ReferenceQueueThread extends java.lang.Thread
{
    private volatile boolean shutdown;

    public void <init>()
    {
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ReferenceQueueThread r0;

        r0 := @this: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ReferenceQueueThread;

        specialinvoke r0.<java.lang.Thread: void <init>()>();

        r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ReferenceQueueThread: boolean shutdown> = 0;

        virtualinvoke r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ReferenceQueueThread: void setDaemon(boolean)>(1);

        virtualinvoke r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ReferenceQueueThread: void setName(java.lang.String)>("MultiThreadedHttpConnectionManager cleanup");

        return;
    }

    public void shutdown()
    {
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ReferenceQueueThread r0;

        r0 := @this: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ReferenceQueueThread;

        r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ReferenceQueueThread: boolean shutdown> = 1;

        virtualinvoke r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ReferenceQueueThread: void interrupt()>();

        return;
    }

    private void handleReference(java.lang.ref.Reference)
    {
        java.lang.Throwable $r13;
        org.apache.commons.httpclient.HostConfiguration $r5, $r10;
        java.lang.StringBuffer $r8, $r9, $r11;
        java.util.Map $r0, $r1;
        java.lang.String $r12;
        boolean $z0;
        java.lang.ref.Reference r2;
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ReferenceQueueThread r14;
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionSource r15;
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool $r6;
        java.lang.Object $r3;
        org.apache.commons.logging.Log $r4, $r7;

        r14 := @this: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ReferenceQueueThread;

        r2 := @parameter0: java.lang.ref.Reference;

        $r0 = staticinvoke <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: java.util.Map access$1400()>();

        entermonitor $r0;

     label1:
        $r1 = staticinvoke <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: java.util.Map access$1400()>();

        $r3 = interfaceinvoke $r1.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r2);

        r15 = (org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionSource) $r3;

        exitmonitor $r0;

     label2:
        goto label5;

     label3:
        $r13 := @caughtexception;

        exitmonitor $r0;

     label4:
        throw $r13;

     label5:
        if r15 == null goto label7;

        $r4 = staticinvoke <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.logging.Log access$700()>();

        $z0 = interfaceinvoke $r4.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z0 == 0 goto label6;

        $r7 = staticinvoke <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.logging.Log access$700()>();

        $r8 = new java.lang.StringBuffer;

        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Connection reclaimed by garbage collector, hostConfig=");

        $r10 = r15.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionSource: org.apache.commons.httpclient.HostConfiguration hostConfiguration>;

        $r11 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r7.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r12);

     label6:
        $r6 = r15.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionSource: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool connectionPool>;

        $r5 = r15.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionSource: org.apache.commons.httpclient.HostConfiguration hostConfiguration>;

        virtualinvoke $r6.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool: void handleLostConnection(org.apache.commons.httpclient.HostConfiguration)>($r5);

     label7:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void run()
    {
        java.lang.ref.Reference $r2;
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ReferenceQueueThread r0;
        java.lang.InterruptedException $r3;
        org.apache.commons.logging.Log $r4;
        java.lang.ref.ReferenceQueue $r1;
        boolean $z0;

        r0 := @this: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ReferenceQueueThread;

     label1:
        $z0 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ReferenceQueueThread: boolean shutdown>;

        if $z0 != 0 goto label5;

     label2:
        $r1 = staticinvoke <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: java.lang.ref.ReferenceQueue access$1500()>();

        $r2 = virtualinvoke $r1.<java.lang.ref.ReferenceQueue: java.lang.ref.Reference remove()>();

        if $r2 == null goto label3;

        specialinvoke r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ReferenceQueueThread: void handleReference(java.lang.ref.Reference)>($r2);

     label3:
        goto label1;

     label4:
        $r3 := @caughtexception;

        $r4 = staticinvoke <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.logging.Log access$700()>();

        interfaceinvoke $r4.<org.apache.commons.logging.Log: void debug(java.lang.Object,java.lang.Throwable)>("ReferenceQueueThread interrupted", $r3);

        goto label1;

     label5:
        return;

        catch java.lang.InterruptedException from label2 to label3 with label4;
    }
}
