public class org.springframework.http.converter.xml.SourceHttpMessageConverter extends org.springframework.http.converter.xml.AbstractXmlHttpMessageConverter
{

    public void <init>()
    {
        org.springframework.http.converter.xml.SourceHttpMessageConverter r0;

        r0 := @this: org.springframework.http.converter.xml.SourceHttpMessageConverter;

        specialinvoke r0.<org.springframework.http.converter.xml.AbstractXmlHttpMessageConverter: void <init>()>();

        return;
    }

    public boolean supports(java.lang.Class)
    {
        org.springframework.http.converter.xml.SourceHttpMessageConverter r5;
        java.lang.Class r0, $r1, $r2, $r3, $r4;
        boolean $z0, $z1, $z2, $z3;

        r5 := @this: org.springframework.http.converter.xml.SourceHttpMessageConverter;

        r0 := @parameter0: java.lang.Class;

        $r1 = class "Ljavax/xml/transform/dom/DOMSource;";

        $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>(r0);

        if $z0 != 0 goto label1;

        $r2 = class "Ljavax/xml/transform/sax/SAXSource;";

        $z1 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>(r0);

        if $z1 != 0 goto label1;

        $r3 = class "Ljavax/xml/transform/stream/StreamSource;";

        $z2 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>(r0);

        if $z2 != 0 goto label1;

        $r4 = class "Ljavax/xml/transform/Source;";

        $z3 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>(r0);

        if $z3 != 0 goto label1;

        return 0;

     label1:
        return 1;
    }

    protected javax.xml.transform.Source readFromSource(java.lang.Class, org.springframework.http.HttpHeaders, javax.xml.transform.Source) throws java.io.IOException
    {
        org.springframework.http.converter.HttpMessageConversionException $r9;
        java.io.ByteArrayInputStream $r6, $r14;
        boolean $z0, $z1, $z2, $z3;
        org.springframework.http.HttpHeaders r28;
        org.springframework.http.converter.xml.SourceHttpMessageConverter r4;
        java.lang.StringBuilder $r10, $r11, $r12, $r22, $r23, $r24, $r25, $r26;
        javax.xml.transform.dom.DOMSource $r18;
        javax.xml.transform.TransformerException $r20;
        javax.xml.transform.stream.StreamSource $r7;
        javax.xml.transform.Source r5;
        org.w3c.dom.Node $r19;
        java.lang.String $r13, $r27;
        org.xml.sax.InputSource $r16;
        org.springframework.http.converter.HttpMessageNotReadableException $r21;
        javax.xml.transform.sax.SAXSource $r15;
        java.lang.Class r0, $r1, $r2, $r3, $r8;
        javax.xml.transform.dom.DOMResult $r17;

        r4 := @this: org.springframework.http.converter.xml.SourceHttpMessageConverter;

        r0 := @parameter0: java.lang.Class;

        r28 := @parameter1: org.springframework.http.HttpHeaders;

        r5 := @parameter2: javax.xml.transform.Source;

     label1:
        $r1 = class "Ljavax/xml/transform/dom/DOMSource;";

        $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>(r0);

        if $z0 == 0 goto label3;

        $r17 = new javax.xml.transform.dom.DOMResult;

        specialinvoke $r17.<javax.xml.transform.dom.DOMResult: void <init>()>();

        virtualinvoke r4.<org.springframework.http.converter.xml.SourceHttpMessageConverter: void transform(javax.xml.transform.Source,javax.xml.transform.Result)>(r5, $r17);

        $r18 = new javax.xml.transform.dom.DOMSource;

        $r19 = virtualinvoke $r17.<javax.xml.transform.dom.DOMResult: org.w3c.dom.Node getNode()>();

        specialinvoke $r18.<javax.xml.transform.dom.DOMSource: void <init>(org.w3c.dom.Node)>($r19);

     label2:
        return $r18;

     label3:
        $r2 = class "Ljavax/xml/transform/sax/SAXSource;";

        $z1 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>(r0);

        if $z1 == 0 goto label5;

        $r14 = specialinvoke r4.<org.springframework.http.converter.xml.SourceHttpMessageConverter: java.io.ByteArrayInputStream transformToByteArrayInputStream(javax.xml.transform.Source)>(r5);

        $r15 = new javax.xml.transform.sax.SAXSource;

        $r16 = new org.xml.sax.InputSource;

        specialinvoke $r16.<org.xml.sax.InputSource: void <init>(java.io.InputStream)>($r14);

        specialinvoke $r15.<javax.xml.transform.sax.SAXSource: void <init>(org.xml.sax.InputSource)>($r16);

     label4:
        return $r15;

     label5:
        $r3 = class "Ljavax/xml/transform/stream/StreamSource;";

        $z2 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>(r0);

        if $z2 != 0 goto label6;

        $r8 = class "Ljavax/xml/transform/Source;";

        $z3 = virtualinvoke $r8.<java.lang.Object: boolean equals(java.lang.Object)>(r0);

        if $z3 == 0 goto label8;

     label6:
        $r6 = specialinvoke r4.<org.springframework.http.converter.xml.SourceHttpMessageConverter: java.io.ByteArrayInputStream transformToByteArrayInputStream(javax.xml.transform.Source)>(r5);

        $r7 = new javax.xml.transform.stream.StreamSource;

        specialinvoke $r7.<javax.xml.transform.stream.StreamSource: void <init>(java.io.InputStream)>($r6);

     label7:
        return $r7;

     label8:
        $r9 = new org.springframework.http.converter.HttpMessageConversionException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>(java.lang.String)>("Could not read class [");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]. Only DOMSource, SAXSource, and StreamSource are supported.");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<org.springframework.http.converter.HttpMessageConversionException: void <init>(java.lang.String)>($r13);

        throw $r9;

     label9:
        $r20 := @caughtexception;

        $r21 = new org.springframework.http.converter.HttpMessageNotReadableException;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>(java.lang.String)>("Could not transform from [");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r5);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] to [");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r21.<org.springframework.http.converter.HttpMessageNotReadableException: void <init>(java.lang.String,java.lang.Throwable)>($r27, $r20);

        throw $r21;

        catch javax.xml.transform.TransformerException from label1 to label2 with label9;
        catch javax.xml.transform.TransformerException from label3 to label4 with label9;
        catch javax.xml.transform.TransformerException from label5 to label7 with label9;
        catch javax.xml.transform.TransformerException from label8 to label9 with label9;
    }

    private java.io.ByteArrayInputStream transformToByteArrayInputStream(javax.xml.transform.Source) throws javax.xml.transform.TransformerException
    {
        org.springframework.http.converter.xml.SourceHttpMessageConverter r1;
        byte[] $r5;
        java.io.ByteArrayOutputStream $r0;
        java.io.ByteArrayInputStream $r4;
        javax.xml.transform.stream.StreamResult $r3;
        javax.xml.transform.Source r2;

        r1 := @this: org.springframework.http.converter.xml.SourceHttpMessageConverter;

        r2 := @parameter0: javax.xml.transform.Source;

        $r0 = new java.io.ByteArrayOutputStream;

        specialinvoke $r0.<java.io.ByteArrayOutputStream: void <init>()>();

        $r3 = new javax.xml.transform.stream.StreamResult;

        specialinvoke $r3.<javax.xml.transform.stream.StreamResult: void <init>(java.io.OutputStream)>($r0);

        virtualinvoke r1.<org.springframework.http.converter.xml.SourceHttpMessageConverter: void transform(javax.xml.transform.Source,javax.xml.transform.Result)>(r2, $r3);

        $r4 = new java.io.ByteArrayInputStream;

        $r5 = virtualinvoke $r0.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        specialinvoke $r4.<java.io.ByteArrayInputStream: void <init>(byte[])>($r5);

        return $r4;
    }

    protected void writeToResult(javax.xml.transform.Source, org.springframework.http.HttpHeaders, javax.xml.transform.Result) throws java.io.IOException
    {
        javax.xml.transform.TransformerException $r3;
        org.springframework.http.HttpHeaders r11;
        javax.xml.transform.Result r2;
        javax.xml.transform.Source r1;
        org.springframework.http.converter.HttpMessageNotWritableException $r4;
        org.springframework.http.converter.xml.SourceHttpMessageConverter r0;
        java.lang.StringBuilder $r5, $r6, $r7, $r8, $r9;
        java.lang.String $r10;

        r0 := @this: org.springframework.http.converter.xml.SourceHttpMessageConverter;

        r1 := @parameter0: javax.xml.transform.Source;

        r11 := @parameter1: org.springframework.http.HttpHeaders;

        r2 := @parameter2: javax.xml.transform.Result;

     label1:
        virtualinvoke r0.<org.springframework.http.converter.xml.SourceHttpMessageConverter: void transform(javax.xml.transform.Source,javax.xml.transform.Result)>(r1, r2);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        $r4 = new org.springframework.http.converter.HttpMessageNotWritableException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>("Could not transform [");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] to [");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<org.springframework.http.converter.HttpMessageNotWritableException: void <init>(java.lang.String,java.lang.Throwable)>($r10, $r3);

        throw $r4;

     label4:
        return;

        catch javax.xml.transform.TransformerException from label1 to label2 with label3;
    }

    protected volatile java.lang.Object readFromSource(java.lang.Class, org.springframework.http.HttpHeaders, javax.xml.transform.Source) throws java.io.IOException
    {
        org.springframework.http.converter.xml.SourceHttpMessageConverter r0;
        org.springframework.http.HttpHeaders r2;
        java.lang.Class r1, $r4;
        javax.xml.transform.Source r3, $r5;

        r0 := @this: org.springframework.http.converter.xml.SourceHttpMessageConverter;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: org.springframework.http.HttpHeaders;

        r3 := @parameter2: javax.xml.transform.Source;

        $r4 = (java.lang.Class) r1;

        $r5 = virtualinvoke r0.<org.springframework.http.converter.xml.SourceHttpMessageConverter: javax.xml.transform.Source readFromSource(java.lang.Class,org.springframework.http.HttpHeaders,javax.xml.transform.Source)>($r4, r2, r3);

        return $r5;
    }

    protected volatile void writeToResult(java.lang.Object, org.springframework.http.HttpHeaders, javax.xml.transform.Result) throws java.io.IOException
    {
        org.springframework.http.converter.xml.SourceHttpMessageConverter r0;
        org.springframework.http.HttpHeaders r2;
        java.lang.Object r1;
        javax.xml.transform.Result r3;
        javax.xml.transform.Source $r4;

        r0 := @this: org.springframework.http.converter.xml.SourceHttpMessageConverter;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.springframework.http.HttpHeaders;

        r3 := @parameter2: javax.xml.transform.Result;

        $r4 = (javax.xml.transform.Source) r1;

        virtualinvoke r0.<org.springframework.http.converter.xml.SourceHttpMessageConverter: void writeToResult(javax.xml.transform.Source,org.springframework.http.HttpHeaders,javax.xml.transform.Result)>($r4, r2, r3);

        return;
    }
}
