public class org.mozilla.javascript.regexp.RegExpImpl extends java.lang.Object implements org.mozilla.javascript.RegExpProxy
{
    java.lang.String input;
    boolean multiline;
    org.mozilla.javascript.regexp.SubString[] parens;
    org.mozilla.javascript.regexp.SubString lastMatch;
    org.mozilla.javascript.regexp.SubString lastParen;
    org.mozilla.javascript.regexp.SubString leftContext;
    org.mozilla.javascript.regexp.SubString rightContext;

    public void <init>()
    {
        org.mozilla.javascript.regexp.RegExpImpl r0;

        r0 := @this: org.mozilla.javascript.regexp.RegExpImpl;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public boolean isRegExp(org.mozilla.javascript.Scriptable)
    {
        org.mozilla.javascript.Scriptable r0;
        boolean $z0;
        org.mozilla.javascript.regexp.RegExpImpl r1;

        r1 := @this: org.mozilla.javascript.regexp.RegExpImpl;

        r0 := @parameter0: org.mozilla.javascript.Scriptable;

        $z0 = r0 instanceof org.mozilla.javascript.regexp.NativeRegExp;

        return $z0;
    }

    public java.lang.Object compileRegExp(org.mozilla.javascript.Context, java.lang.String, java.lang.String)
    {
        org.mozilla.javascript.Context r4;
        org.mozilla.javascript.regexp.RegExpImpl r3;
        java.lang.Object $r2;
        java.lang.String r0, r1;

        r3 := @this: org.mozilla.javascript.regexp.RegExpImpl;

        r4 := @parameter0: org.mozilla.javascript.Context;

        r0 := @parameter1: java.lang.String;

        r1 := @parameter2: java.lang.String;

        $r2 = staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: java.lang.Object compileRE(java.lang.String,java.lang.String,boolean)>(r0, r1, 0);

        return $r2;
    }

    public org.mozilla.javascript.Scriptable wrapRegExp(org.mozilla.javascript.Context, org.mozilla.javascript.Scriptable, java.lang.Object)
    {
        org.mozilla.javascript.regexp.NativeRegExp $r0;
        org.mozilla.javascript.Scriptable r1;
        org.mozilla.javascript.Context r4;
        org.mozilla.javascript.regexp.RegExpImpl r3;
        java.lang.Object r2;

        r3 := @this: org.mozilla.javascript.regexp.RegExpImpl;

        r4 := @parameter0: org.mozilla.javascript.Context;

        r1 := @parameter1: org.mozilla.javascript.Scriptable;

        r2 := @parameter2: java.lang.Object;

        $r0 = new org.mozilla.javascript.regexp.NativeRegExp;

        specialinvoke $r0.<org.mozilla.javascript.regexp.NativeRegExp: void <init>(org.mozilla.javascript.Scriptable,java.lang.Object)>(r1, r2);

        return $r0;
    }

    public java.lang.Object action(org.mozilla.javascript.Context, org.mozilla.javascript.Scriptable, org.mozilla.javascript.Scriptable, java.lang.Object[], int)
    {
        boolean $z0, $z1, $z2;
        org.mozilla.javascript.Scriptable r2, r3, $r17;
        org.mozilla.javascript.regexp.GlobData $r24;
        java.lang.Object[] r4;
        java.lang.StringBuffer $r8, $r10, $r11;
        org.mozilla.javascript.regexp.RegExpImpl r5;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i8;
        java.lang.Boolean $r13;
        org.mozilla.javascript.Function r22;
        java.lang.String $r12, r21, $r23;
        org.mozilla.javascript.Context r1;
        java.lang.RuntimeException $r18;
        char[] $r9;
        java.lang.Object $r6, $r7, $r16, $r19, $r20;
        org.mozilla.javascript.regexp.SubString r14, $r15;

        r5 := @this: org.mozilla.javascript.regexp.RegExpImpl;

        r1 := @parameter0: org.mozilla.javascript.Context;

        r2 := @parameter1: org.mozilla.javascript.Scriptable;

        r3 := @parameter2: org.mozilla.javascript.Scriptable;

        r4 := @parameter3: java.lang.Object[];

        i0 := @parameter4: int;

        $r24 = new org.mozilla.javascript.regexp.GlobData;

        specialinvoke $r24.<org.mozilla.javascript.regexp.GlobData: void <init>()>();

        $r24.<org.mozilla.javascript.regexp.GlobData: int mode> = i0;

        tableswitch(i0)
        {
            case 1: goto label01;
            case 2: goto label05;
            case 3: goto label04;
            default: goto label15;
        };

     label01:
        $r24.<org.mozilla.javascript.regexp.GlobData: int optarg> = 1;

        $r16 = staticinvoke <org.mozilla.javascript.regexp.RegExpImpl: java.lang.Object matchOrReplace(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,org.mozilla.javascript.Scriptable,java.lang.Object[],org.mozilla.javascript.regexp.RegExpImpl,org.mozilla.javascript.regexp.GlobData,boolean)>(r1, r2, r3, r4, r5, $r24, 0);

        $r17 = $r24.<org.mozilla.javascript.regexp.GlobData: org.mozilla.javascript.Scriptable arrayobj>;

        if $r17 != null goto label02;

        $r19 = $r16;

        goto label03;

     label02:
        $r19 = $r24.<org.mozilla.javascript.regexp.GlobData: org.mozilla.javascript.Scriptable arrayobj>;

     label03:
        return $r19;

     label04:
        $r24.<org.mozilla.javascript.regexp.GlobData: int optarg> = 1;

        $r6 = staticinvoke <org.mozilla.javascript.regexp.RegExpImpl: java.lang.Object matchOrReplace(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,org.mozilla.javascript.Scriptable,java.lang.Object[],org.mozilla.javascript.regexp.RegExpImpl,org.mozilla.javascript.regexp.GlobData,boolean)>(r1, r2, r3, r4, r5, $r24, 0);

        return $r6;

     label05:
        $i1 = lengthof r4;

        if $i1 >= 2 goto label06;

        $r20 = <org.mozilla.javascript.Undefined: java.lang.Object instance>;

        goto label07;

     label06:
        $r20 = r4[1];

     label07:
        r21 = null;

        r22 = null;

        $z0 = $r20 instanceof org.mozilla.javascript.Function;

        if $z0 == 0 goto label08;

        r22 = (org.mozilla.javascript.Function) $r20;

        goto label09;

     label08:
        r21 = staticinvoke <org.mozilla.javascript.ScriptRuntime: java.lang.String toString(java.lang.Object)>($r20);

     label09:
        $r24.<org.mozilla.javascript.regexp.GlobData: int optarg> = 2;

        $r24.<org.mozilla.javascript.regexp.GlobData: org.mozilla.javascript.Function lambda> = r22;

        $r24.<org.mozilla.javascript.regexp.GlobData: java.lang.String repstr> = r21;

        if r21 != null goto label10;

        $i8 = (int) -1;

        $i6 = $i8;

        goto label11;

     label10:
        $i6 = virtualinvoke r21.<java.lang.String: int indexOf(int)>(36);

     label11:
        $r24.<org.mozilla.javascript.regexp.GlobData: int dollar> = $i6;

        $r24.<org.mozilla.javascript.regexp.GlobData: java.lang.StringBuffer charBuf> = null;

        $r24.<org.mozilla.javascript.regexp.GlobData: int leftIndex> = 0;

        $r7 = staticinvoke <org.mozilla.javascript.regexp.RegExpImpl: java.lang.Object matchOrReplace(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,org.mozilla.javascript.Scriptable,java.lang.Object[],org.mozilla.javascript.regexp.RegExpImpl,org.mozilla.javascript.regexp.GlobData,boolean)>(r1, r2, r3, r4, r5, $r24, 1);

        $r15 = r5.<org.mozilla.javascript.regexp.RegExpImpl: org.mozilla.javascript.regexp.SubString rightContext>;

        $r8 = $r24.<org.mozilla.javascript.regexp.GlobData: java.lang.StringBuffer charBuf>;

        if $r8 != null goto label14;

        $z1 = $r24.<org.mozilla.javascript.regexp.GlobData: boolean global>;

        if $z1 != 0 goto label12;

        if $r7 == null goto label12;

        $r13 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        $z2 = virtualinvoke $r7.<java.lang.Object: boolean equals(java.lang.Object)>($r13);

        if $z2 != 0 goto label13;

     label12:
        $r23 = $r24.<org.mozilla.javascript.regexp.GlobData: java.lang.String str>;

        return $r23;

     label13:
        r14 = r5.<org.mozilla.javascript.regexp.RegExpImpl: org.mozilla.javascript.regexp.SubString leftContext>;

        $i5 = r14.<org.mozilla.javascript.regexp.SubString: int index>;

        $i4 = r14.<org.mozilla.javascript.regexp.SubString: int length>;

        staticinvoke <org.mozilla.javascript.regexp.RegExpImpl: void replace_glob(org.mozilla.javascript.regexp.GlobData,org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,org.mozilla.javascript.regexp.RegExpImpl,int,int)>($r24, r1, r2, r5, $i5, $i4);

     label14:
        $r10 = $r24.<org.mozilla.javascript.regexp.GlobData: java.lang.StringBuffer charBuf>;

        $r9 = $r15.<org.mozilla.javascript.regexp.SubString: char[] charArray>;

        $i3 = $r15.<org.mozilla.javascript.regexp.SubString: int index>;

        $i2 = $r15.<org.mozilla.javascript.regexp.SubString: int length>;

        virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(char[],int,int)>($r9, $i3, $i2);

        $r11 = $r24.<org.mozilla.javascript.regexp.GlobData: java.lang.StringBuffer charBuf>;

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r12;

     label15:
        $r18 = staticinvoke <org.mozilla.javascript.Kit: java.lang.RuntimeException codeBug()>();

        throw $r18;
    }

    private static java.lang.Object matchOrReplace(org.mozilla.javascript.Context, org.mozilla.javascript.Scriptable, org.mozilla.javascript.Scriptable, java.lang.Object[], org.mozilla.javascript.regexp.RegExpImpl, org.mozilla.javascript.regexp.GlobData, boolean)
    {
        java.lang.Integer $r33, $r34;
        byte $b25;
        java.lang.Object[] r5;
        java.lang.String $r1, $r8, r28;
        org.mozilla.javascript.Context r12;
        org.mozilla.javascript.regexp.SubString $r17, $r22, $r30;
        int[] $r11;
        boolean $z0, z1, $z2, $z3, $z4, $z5;
        org.mozilla.javascript.Scriptable r0, r3, $r4;
        org.mozilla.javascript.regexp.GlobData r2;
        org.mozilla.javascript.regexp.RegExpImpl r13;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, i23, $i24, $i27;
        java.lang.Boolean $r16, $r20;
        org.mozilla.javascript.regexp.NativeRegExp $r14, r27, $r31, $r32;
        java.lang.Object $r6, $r7, $r9, $r15, $r18, $r23, $r24, $r25, r29;

        r12 := @parameter0: org.mozilla.javascript.Context;

        r3 := @parameter1: org.mozilla.javascript.Scriptable;

        r0 := @parameter2: org.mozilla.javascript.Scriptable;

        r5 := @parameter3: java.lang.Object[];

        r13 := @parameter4: org.mozilla.javascript.regexp.RegExpImpl;

        r2 := @parameter5: org.mozilla.javascript.regexp.GlobData;

        z1 := @parameter6: boolean;

        $r1 = staticinvoke <org.mozilla.javascript.ScriptRuntime: java.lang.String toString(java.lang.Object)>(r0);

        r2.<org.mozilla.javascript.regexp.GlobData: java.lang.String str> = $r1;

        $r4 = staticinvoke <org.mozilla.javascript.ScriptableObject: org.mozilla.javascript.Scriptable getTopLevelScope(org.mozilla.javascript.Scriptable)>(r3);

        $i0 = lengthof r5;

        if $i0 != 0 goto label01;

        $r25 = staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: java.lang.Object compileRE(java.lang.String,java.lang.String,boolean)>("", "", 0);

        $r31 = new org.mozilla.javascript.regexp.NativeRegExp;

        specialinvoke $r31.<org.mozilla.javascript.regexp.NativeRegExp: void <init>(org.mozilla.javascript.Scriptable,java.lang.Object)>($r4, $r25);

        r27 = $r31;

        goto label05;

     label01:
        $r6 = r5[0];

        $z0 = $r6 instanceof org.mozilla.javascript.regexp.NativeRegExp;

        if $z0 == 0 goto label02;

        $r24 = r5[0];

        r27 = (org.mozilla.javascript.regexp.NativeRegExp) $r24;

        goto label05;

     label02:
        $r7 = r5[0];

        $r8 = staticinvoke <org.mozilla.javascript.ScriptRuntime: java.lang.String toString(java.lang.Object)>($r7);

        $i2 = r2.<org.mozilla.javascript.regexp.GlobData: int optarg>;

        $i1 = lengthof r5;

        if $i2 >= $i1 goto label03;

        r5[0] = $r8;

        $i20 = r2.<org.mozilla.javascript.regexp.GlobData: int optarg>;

        $r23 = r5[$i20];

        r28 = staticinvoke <org.mozilla.javascript.ScriptRuntime: java.lang.String toString(java.lang.Object)>($r23);

        goto label04;

     label03:
        r28 = null;

     label04:
        $r9 = staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: java.lang.Object compileRE(java.lang.String,java.lang.String,boolean)>($r8, r28, z1);

        $r32 = new org.mozilla.javascript.regexp.NativeRegExp;

        specialinvoke $r32.<org.mozilla.javascript.regexp.NativeRegExp: void <init>(org.mozilla.javascript.Scriptable,java.lang.Object)>($r4, $r9);

        r27 = $r32;

     label05:
        r2.<org.mozilla.javascript.regexp.GlobData: org.mozilla.javascript.regexp.NativeRegExp regexp> = r27;

        $i21 = virtualinvoke r27.<org.mozilla.javascript.regexp.NativeRegExp: int getFlags()>();

        $i22 = $i21 & 1;

        if $i22 == 0 goto label06;

        $z5 = 1;

        goto label07;

     label06:
        $z5 = 0;

     label07:
        r2.<org.mozilla.javascript.regexp.GlobData: boolean global> = $z5;

        $r11 = newarray (int)[1];

        $r11[0] = 0;

        r29 = null;

        $i3 = r2.<org.mozilla.javascript.regexp.GlobData: int mode>;

        if $i3 != 3 goto label09;

        $r18 = virtualinvoke r27.<org.mozilla.javascript.regexp.NativeRegExp: java.lang.Object executeRegExp(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,org.mozilla.javascript.regexp.RegExpImpl,java.lang.String,int[],int)>(r12, r3, r13, $r1, $r11, 0);

        if $r18 == null goto label08;

        $r20 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        $z4 = virtualinvoke $r18.<java.lang.Object: boolean equals(java.lang.Object)>($r20);

        if $z4 == 0 goto label08;

        $r33 = new java.lang.Integer;

        $r22 = r13.<org.mozilla.javascript.regexp.RegExpImpl: org.mozilla.javascript.regexp.SubString leftContext>;

        $i19 = $r22.<org.mozilla.javascript.regexp.SubString: int length>;

        specialinvoke $r33.<java.lang.Integer: void <init>(int)>($i19);

        r29 = $r33;

        goto label20;

     label08:
        $r34 = new java.lang.Integer;

        $i27 = (int) -1;

        specialinvoke $r34.<java.lang.Integer: void <init>(int)>($i27);

        r29 = $r34;

        goto label20;

     label09:
        $z2 = r2.<org.mozilla.javascript.regexp.GlobData: boolean global>;

        if $z2 == 0 goto label17;

        r27.<org.mozilla.javascript.regexp.NativeRegExp: double lastIndex> = 0.0;

        i23 = 0;

     label10:
        $i5 = $r11[0];

        $i6 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i5 > $i6 goto label20;

        $r15 = virtualinvoke r27.<org.mozilla.javascript.regexp.NativeRegExp: java.lang.Object executeRegExp(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,org.mozilla.javascript.regexp.RegExpImpl,java.lang.String,int[],int)>(r12, r3, r13, $r1, $r11, 0);

        r29 = $r15;

        if $r15 == null goto label20;

        $r16 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        $z3 = virtualinvoke $r15.<java.lang.Object: boolean equals(java.lang.Object)>($r16);

        if $z3 != 0 goto label11;

        goto label20;

     label11:
        $i7 = r2.<org.mozilla.javascript.regexp.GlobData: int mode>;

        if $i7 != 1 goto label12;

        staticinvoke <org.mozilla.javascript.regexp.RegExpImpl: void match_glob(org.mozilla.javascript.regexp.GlobData,org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,int,org.mozilla.javascript.regexp.RegExpImpl)>(r2, r12, r3, i23, r13);

        goto label14;

     label12:
        $i8 = r2.<org.mozilla.javascript.regexp.GlobData: int mode>;

        if $i8 == 2 goto label13;

        staticinvoke <org.mozilla.javascript.Kit: java.lang.RuntimeException codeBug()>();

     label13:
        $r17 = r13.<org.mozilla.javascript.regexp.RegExpImpl: org.mozilla.javascript.regexp.SubString lastMatch>;

        $i17 = r2.<org.mozilla.javascript.regexp.GlobData: int leftIndex>;

        $i9 = $r17.<org.mozilla.javascript.regexp.SubString: int index>;

        $i18 = $i9 - $i17;

        $i11 = $r17.<org.mozilla.javascript.regexp.SubString: int index>;

        $i10 = $r17.<org.mozilla.javascript.regexp.SubString: int length>;

        $i12 = $i11 + $i10;

        r2.<org.mozilla.javascript.regexp.GlobData: int leftIndex> = $i12;

        staticinvoke <org.mozilla.javascript.regexp.RegExpImpl: void replace_glob(org.mozilla.javascript.regexp.GlobData,org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,org.mozilla.javascript.regexp.RegExpImpl,int,int)>(r2, r12, r3, r13, $i17, $i18);

     label14:
        $r30 = r13.<org.mozilla.javascript.regexp.RegExpImpl: org.mozilla.javascript.regexp.SubString lastMatch>;

        $i24 = $r30.<org.mozilla.javascript.regexp.SubString: int length>;

        if $i24 != 0 goto label16;

        $i13 = $r11[0];

        $i14 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i13 != $i14 goto label15;

        goto label20;

     label15:
        $i15 = $r11[0];

        $i16 = $i15 + 1;

        $r11[0] = $i16;

     label16:
        i23 = i23 + 1;

        goto label10;

     label17:
        $r14 = r27;

        $i4 = r2.<org.mozilla.javascript.regexp.GlobData: int mode>;

        if $i4 != 2 goto label18;

        $b25 = 0;

        goto label19;

     label18:
        $b25 = 1;

     label19:
        r29 = virtualinvoke $r14.<org.mozilla.javascript.regexp.NativeRegExp: java.lang.Object executeRegExp(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,org.mozilla.javascript.regexp.RegExpImpl,java.lang.String,int[],int)>(r12, r3, r13, $r1, $r11, $b25);

     label20:
        return r29;
    }

    public int find_split(org.mozilla.javascript.Context, org.mozilla.javascript.Scriptable, java.lang.String, java.lang.String, org.mozilla.javascript.Scriptable, int[], int[], boolean[], java.lang.String[][])
    {
        int[] r0, r10;
        org.mozilla.javascript.Scriptable r3, r5;
        java.lang.String[] $r13, $r15;
        org.mozilla.javascript.regexp.RegExpImpl r6;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, i8, i9, $i10, i11, i12, $i14;
        java.lang.Boolean $r8;
        java.lang.String r1, $r16, r17;
        org.mozilla.javascript.regexp.NativeRegExp r4;
        org.mozilla.javascript.Context r2;
        boolean[] r9;
        org.mozilla.javascript.regexp.SubString[] $r11, $r19;
        java.lang.Object $r7;
        org.mozilla.javascript.regexp.SubString $r14, r18;
        java.lang.String[][] r12;

        r6 := @this: org.mozilla.javascript.regexp.RegExpImpl;

        r2 := @parameter0: org.mozilla.javascript.Context;

        r5 := @parameter1: org.mozilla.javascript.Scriptable;

        r1 := @parameter2: java.lang.String;

        r17 := @parameter3: java.lang.String;

        r3 := @parameter4: org.mozilla.javascript.Scriptable;

        r0 := @parameter5: int[];

        r10 := @parameter6: int[];

        r9 := @parameter7: boolean[];

        r12 := @parameter8: java.lang.String[][];

        i7 = r0[0];

        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        $i1 = virtualinvoke r2.<org.mozilla.javascript.Context: int getLanguageVersion()>();

        r4 = (org.mozilla.javascript.regexp.NativeRegExp) r3;

     label01:
        $i6 = r0[0];

        r0[0] = i7;

        $r7 = virtualinvoke r4.<org.mozilla.javascript.regexp.NativeRegExp: java.lang.Object executeRegExp(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,org.mozilla.javascript.regexp.RegExpImpl,java.lang.String,int[],int)>(r2, r5, r6, r1, r0, 0);

        $r8 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        if $r7 == $r8 goto label02;

        r0[0] = $i6;

        r10[0] = 1;

        r9[0] = 0;

        return $i0;

     label02:
        i8 = r0[0];

        r0[0] = $i6;

        r9[0] = 1;

        r18 = r6.<org.mozilla.javascript.regexp.RegExpImpl: org.mozilla.javascript.regexp.SubString lastMatch>;

        $i2 = r18.<org.mozilla.javascript.regexp.SubString: int length>;

        r10[0] = $i2;

        $i3 = r10[0];

        if $i3 != 0 goto label05;

        $i5 = r0[0];

        if i8 != $i5 goto label05;

        if i8 != $i0 goto label04;

        if $i1 != 120 goto label03;

        r10[0] = 1;

        i9 = i8;

        goto label06;

     label03:
        $i14 = (int) -1;

        i9 = $i14;

        goto label06;

     label04:
        i7 = i8 + 1;

        goto label01;

     label05:
        $i4 = r10[0];

        i9 = i8 - $i4;

        goto label06;

     label06:
        $r19 = r6.<org.mozilla.javascript.regexp.RegExpImpl: org.mozilla.javascript.regexp.SubString[] parens>;

        if $r19 != null goto label07;

        $i10 = 0;

        goto label08;

     label07:
        $r11 = r6.<org.mozilla.javascript.regexp.RegExpImpl: org.mozilla.javascript.regexp.SubString[] parens>;

        $i10 = lengthof $r11;

     label08:
        i11 = $i10;

        $r13 = newarray (java.lang.String)[$i10];

        r12[0] = $r13;

        i12 = 0;

     label09:
        if i12 >= i11 goto label10;

        $r14 = virtualinvoke r6.<org.mozilla.javascript.regexp.RegExpImpl: org.mozilla.javascript.regexp.SubString getParenSubString(int)>(i12);

        $r15 = r12[0];

        $r16 = virtualinvoke $r14.<org.mozilla.javascript.regexp.SubString: java.lang.String toString()>();

        $r15[i12] = $r16;

        i12 = i12 + 1;

        goto label09;

     label10:
        return i9;
    }

    org.mozilla.javascript.regexp.SubString getParenSubString(int)
    {
        org.mozilla.javascript.regexp.SubString[] $r1, $r2, $r3;
        org.mozilla.javascript.regexp.RegExpImpl r0;
        int i0, $i1;
        org.mozilla.javascript.regexp.SubString r4, $r5;

        r0 := @this: org.mozilla.javascript.regexp.RegExpImpl;

        i0 := @parameter0: int;

        $r1 = r0.<org.mozilla.javascript.regexp.RegExpImpl: org.mozilla.javascript.regexp.SubString[] parens>;

        if $r1 == null goto label1;

        $r2 = r0.<org.mozilla.javascript.regexp.RegExpImpl: org.mozilla.javascript.regexp.SubString[] parens>;

        $i1 = lengthof $r2;

        if i0 >= $i1 goto label1;

        $r3 = r0.<org.mozilla.javascript.regexp.RegExpImpl: org.mozilla.javascript.regexp.SubString[] parens>;

        r4 = $r3[i0];

        if r4 == null goto label1;

        return r4;

     label1:
        $r5 = <org.mozilla.javascript.regexp.SubString: org.mozilla.javascript.regexp.SubString emptySubString>;

        return $r5;
    }

    private static void match_glob(org.mozilla.javascript.regexp.GlobData, org.mozilla.javascript.Context, org.mozilla.javascript.Scriptable, int, org.mozilla.javascript.regexp.RegExpImpl)
    {
        org.mozilla.javascript.regexp.GlobData r0;
        org.mozilla.javascript.Context r8;
        org.mozilla.javascript.Scriptable $r1, $r4, $r5, r6, $r7, $r9;
        org.mozilla.javascript.regexp.RegExpImpl r2;
        int i0;
        java.lang.String $r3;
        org.mozilla.javascript.regexp.SubString $r10;

        r0 := @parameter0: org.mozilla.javascript.regexp.GlobData;

        r8 := @parameter1: org.mozilla.javascript.Context;

        r6 := @parameter2: org.mozilla.javascript.Scriptable;

        i0 := @parameter3: int;

        r2 := @parameter4: org.mozilla.javascript.regexp.RegExpImpl;

        $r1 = r0.<org.mozilla.javascript.regexp.GlobData: org.mozilla.javascript.Scriptable arrayobj>;

        if $r1 != null goto label1;

        $r7 = staticinvoke <org.mozilla.javascript.ScriptableObject: org.mozilla.javascript.Scriptable getTopLevelScope(org.mozilla.javascript.Scriptable)>(r6);

        $r9 = staticinvoke <org.mozilla.javascript.ScriptRuntime: org.mozilla.javascript.Scriptable newObject(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,java.lang.String,java.lang.Object[])>(r8, $r7, "Array", null);

        r0.<org.mozilla.javascript.regexp.GlobData: org.mozilla.javascript.Scriptable arrayobj> = $r9;

     label1:
        $r10 = r2.<org.mozilla.javascript.regexp.RegExpImpl: org.mozilla.javascript.regexp.SubString lastMatch>;

        $r3 = virtualinvoke $r10.<org.mozilla.javascript.regexp.SubString: java.lang.String toString()>();

        $r5 = r0.<org.mozilla.javascript.regexp.GlobData: org.mozilla.javascript.Scriptable arrayobj>;

        $r4 = r0.<org.mozilla.javascript.regexp.GlobData: org.mozilla.javascript.Scriptable arrayobj>;

        interfaceinvoke $r5.<org.mozilla.javascript.Scriptable: void put(int,org.mozilla.javascript.Scriptable,java.lang.Object)>(i0, $r4, $r3);

        return;
    }

    private static void replace_glob(org.mozilla.javascript.regexp.GlobData, org.mozilla.javascript.Context, org.mozilla.javascript.Scriptable, org.mozilla.javascript.regexp.RegExpImpl, int, int)
    {
        java.lang.Integer $r15;
        int[] r33;
        boolean $z0;
        org.mozilla.javascript.RegExpProxy $r18;
        org.mozilla.javascript.Scriptable r21, $r22;
        java.lang.Throwable $r29;
        org.mozilla.javascript.regexp.GlobData r0;
        java.lang.Object[] $r28;
        java.lang.StringBuffer $r4, $r9, $r35, r36;
        org.mozilla.javascript.regexp.RegExpImpl r3, $r19;
        int $i0, i1, $i2, $i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, i17, i18, i19, i20, i21, $i22, $i23, $i24;
        org.mozilla.javascript.Function $r1, $r7, $r23;
        java.lang.String $r2, $r10, $r12, $r14, $r17, $r20, $r25, $r27, r32;
        org.mozilla.javascript.Context r8;
        org.mozilla.javascript.regexp.SubString[] r30;
        char[] $r6;
        java.lang.Object $r24, $r26;
        org.mozilla.javascript.regexp.SubString $r5, $r11, $r13, $r16, r31, $r34;

        r0 := @parameter0: org.mozilla.javascript.regexp.GlobData;

        r8 := @parameter1: org.mozilla.javascript.Context;

        r21 := @parameter2: org.mozilla.javascript.Scriptable;

        r3 := @parameter3: org.mozilla.javascript.regexp.RegExpImpl;

        i4 := @parameter4: int;

        i1 := @parameter5: int;

        $r1 = r0.<org.mozilla.javascript.regexp.GlobData: org.mozilla.javascript.Function lambda>;

        if $r1 == null goto label13;

        r30 = r3.<org.mozilla.javascript.regexp.RegExpImpl: org.mozilla.javascript.regexp.SubString[] parens>;

        if r30 != null goto label01;

        $i16 = 0;

        goto label02;

     label01:
        $i16 = lengthof r30;

     label02:
        i17 = $i16;

        $i10 = $i16 + 3;

        $r28 = newarray (java.lang.Object)[$i10];

        $r13 = r3.<org.mozilla.javascript.regexp.RegExpImpl: org.mozilla.javascript.regexp.SubString lastMatch>;

        $r14 = virtualinvoke $r13.<org.mozilla.javascript.regexp.SubString: java.lang.String toString()>();

        $r28[0] = $r14;

        i18 = 0;

     label03:
        if i18 >= i17 goto label06;

        r31 = r30[i18];

        if r31 == null goto label04;

        $i15 = i18 + 1;

        $r27 = virtualinvoke r31.<org.mozilla.javascript.regexp.SubString: java.lang.String toString()>();

        $r28[$i15] = $r27;

        goto label05;

     label04:
        $i14 = i18 + 1;

        $r26 = <org.mozilla.javascript.Undefined: java.lang.Object instance>;

        $r28[$i14] = $r26;

     label05:
        i18 = i18 + 1;

        goto label03;

     label06:
        $i12 = i17 + 1;

        $r15 = new java.lang.Integer;

        $r16 = r3.<org.mozilla.javascript.regexp.RegExpImpl: org.mozilla.javascript.regexp.SubString leftContext>;

        $i11 = $r16.<org.mozilla.javascript.regexp.SubString: int length>;

        specialinvoke $r15.<java.lang.Integer: void <init>(int)>($i11);

        $r28[$i12] = $r15;

        $i13 = i17 + 2;

        $r17 = r0.<org.mozilla.javascript.regexp.GlobData: java.lang.String str>;

        $r28[$i13] = $r17;

        $r18 = staticinvoke <org.mozilla.javascript.ScriptRuntime: org.mozilla.javascript.RegExpProxy getRegExpProxy(org.mozilla.javascript.Context)>(r8);

        if r3 == $r18 goto label07;

        staticinvoke <org.mozilla.javascript.Kit: java.lang.RuntimeException codeBug()>();

     label07:
        $r19 = new org.mozilla.javascript.regexp.RegExpImpl;

        specialinvoke $r19.<org.mozilla.javascript.regexp.RegExpImpl: void <init>()>();

        $z0 = r3.<org.mozilla.javascript.regexp.RegExpImpl: boolean multiline>;

        $r19.<org.mozilla.javascript.regexp.RegExpImpl: boolean multiline> = $z0;

        $r20 = r3.<org.mozilla.javascript.regexp.RegExpImpl: java.lang.String input>;

        $r19.<org.mozilla.javascript.regexp.RegExpImpl: java.lang.String input> = $r20;

        staticinvoke <org.mozilla.javascript.ScriptRuntime: void setRegExpProxy(org.mozilla.javascript.Context,org.mozilla.javascript.RegExpProxy)>(r8, $r19);

     label08:
        $r22 = staticinvoke <org.mozilla.javascript.ScriptableObject: org.mozilla.javascript.Scriptable getTopLevelScope(org.mozilla.javascript.Scriptable)>(r21);

        $r23 = r0.<org.mozilla.javascript.regexp.GlobData: org.mozilla.javascript.Function lambda>;

        $r24 = interfaceinvoke $r23.<org.mozilla.javascript.Function: java.lang.Object call(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,org.mozilla.javascript.Scriptable,java.lang.Object[])>(r8, $r22, $r22, $r28);

        $r25 = staticinvoke <org.mozilla.javascript.ScriptRuntime: java.lang.String toString(java.lang.Object)>($r24);

        r32 = $r25;

     label09:
        staticinvoke <org.mozilla.javascript.ScriptRuntime: void setRegExpProxy(org.mozilla.javascript.Context,org.mozilla.javascript.RegExpProxy)>(r8, r3);

        goto label12;

     label10:
        $r29 := @caughtexception;

     label11:
        staticinvoke <org.mozilla.javascript.ScriptRuntime: void setRegExpProxy(org.mozilla.javascript.Context,org.mozilla.javascript.RegExpProxy)>(r8, r3);

        throw $r29;

     label12:
        i19 = virtualinvoke $r25.<java.lang.String: int length()>();

        goto label17;

     label13:
        r32 = null;

        $r2 = r0.<org.mozilla.javascript.regexp.GlobData: java.lang.String repstr>;

        i19 = virtualinvoke $r2.<java.lang.String: int length()>();

        $i0 = r0.<org.mozilla.javascript.regexp.GlobData: int dollar>;

        if $i0 < 0 goto label17;

        r33 = newarray (int)[1];

        i20 = r0.<org.mozilla.javascript.regexp.GlobData: int dollar>;

     label14:
        $r10 = r0.<org.mozilla.javascript.regexp.GlobData: java.lang.String repstr>;

        $r11 = staticinvoke <org.mozilla.javascript.regexp.RegExpImpl: org.mozilla.javascript.regexp.SubString interpretDollar(org.mozilla.javascript.Context,org.mozilla.javascript.regexp.RegExpImpl,java.lang.String,int,int[])>(r8, r3, $r10, i20, r33);

        if $r11 == null goto label15;

        $i7 = $r11.<org.mozilla.javascript.regexp.SubString: int length>;

        $i6 = r33[0];

        $i8 = $i7 - $i6;

        i19 = i19 + $i8;

        $i9 = r33[0];

        i21 = i20 + $i9;

        goto label16;

     label15:
        i21 = i20 + 1;

     label16:
        $r12 = r0.<org.mozilla.javascript.regexp.GlobData: java.lang.String repstr>;

        $i5 = virtualinvoke $r12.<java.lang.String: int indexOf(int,int)>(36, i21);

        i20 = $i5;

        if $i5 >= 0 goto label14;

     label17:
        $i22 = i1 + i19;

        $r34 = r3.<org.mozilla.javascript.regexp.RegExpImpl: org.mozilla.javascript.regexp.SubString rightContext>;

        $i23 = $r34.<org.mozilla.javascript.regexp.SubString: int length>;

        $i24 = $i22 + $i23;

        $r35 = r0.<org.mozilla.javascript.regexp.GlobData: java.lang.StringBuffer charBuf>;

        r36 = $r35;

        if $r35 != null goto label18;

        $r9 = new java.lang.StringBuffer;

        specialinvoke $r9.<java.lang.StringBuffer: void <init>(int)>($i24);

        r36 = $r9;

        r0.<org.mozilla.javascript.regexp.GlobData: java.lang.StringBuffer charBuf> = $r9;

        goto label19;

     label18:
        $r4 = r0.<org.mozilla.javascript.regexp.GlobData: java.lang.StringBuffer charBuf>;

        $i2 = virtualinvoke $r4.<java.lang.StringBuffer: int length()>();

        $i3 = $i2 + $i24;

        virtualinvoke $r35.<java.lang.StringBuffer: void ensureCapacity(int)>($i3);

     label19:
        $r5 = r3.<org.mozilla.javascript.regexp.RegExpImpl: org.mozilla.javascript.regexp.SubString leftContext>;

        $r6 = $r5.<org.mozilla.javascript.regexp.SubString: char[] charArray>;

        virtualinvoke r36.<java.lang.StringBuffer: java.lang.StringBuffer append(char[],int,int)>($r6, i4, i1);

        $r7 = r0.<org.mozilla.javascript.regexp.GlobData: org.mozilla.javascript.Function lambda>;

        if $r7 == null goto label20;

        virtualinvoke r36.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r32);

        goto label21;

     label20:
        staticinvoke <org.mozilla.javascript.regexp.RegExpImpl: void do_replace(org.mozilla.javascript.regexp.GlobData,org.mozilla.javascript.Context,org.mozilla.javascript.regexp.RegExpImpl)>(r0, r8, r3);

     label21:
        return;

        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
    }

    private static org.mozilla.javascript.regexp.SubString interpretDollar(org.mozilla.javascript.Context, org.mozilla.javascript.regexp.RegExpImpl, java.lang.String, int, int[])
    {
        int[] r2;
        boolean $z0, $z1, $z2;
        org.mozilla.javascript.regexp.RegExpImpl r3;
        int i0, $i2, $i3, $i5, $i6, $i7, $i9, $i10, $i11, $i13, $i14, $i15, $i17, $i18, i19, i20, i21, $i22, i23, i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i33, $i34;
        java.lang.String r0;
        org.mozilla.javascript.Context r1;
        char $c1, $c4, $c8, $c12, $c16;
        org.mozilla.javascript.regexp.SubString[] $r12, $r13;
        org.mozilla.javascript.regexp.SubString $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r14, $r15;

        r1 := @parameter0: org.mozilla.javascript.Context;

        r3 := @parameter1: org.mozilla.javascript.regexp.RegExpImpl;

        r0 := @parameter2: java.lang.String;

        i0 := @parameter3: int;

        r2 := @parameter4: int[];

        $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i0);

        $i26 = (int) $c1;

        if $i26 == 36 goto label01;

        staticinvoke <org.mozilla.javascript.Kit: java.lang.RuntimeException codeBug()>();

     label01:
        $i2 = virtualinvoke r1.<org.mozilla.javascript.Context: int getLanguageVersion()>();

        if $i2 == 0 goto label02;

        if $i2 > 140 goto label02;

        if i0 <= 0 goto label02;

        $i15 = i0 - 1;

        $c16 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i15);

        $i27 = (int) $c16;

        if $i27 != 92 goto label02;

        return null;

     label02:
        $i17 = virtualinvoke r0.<java.lang.String: int length()>();

        $i18 = i0 + 1;

        if $i18 < $i17 goto label03;

        return null;

     label03:
        $i3 = i0 + 1;

        $c4 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i3);

        $z0 = staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: boolean isDigit(char)>($c4);

        if $z0 == 0 goto label13;

        if $i2 == 0 goto label07;

        if $i2 > 140 goto label07;

        $i28 = (int) $c4;

        if $i28 != 48 goto label04;

        return null;

     label04:
        i19 = 0;

        i20 = i0;

     label05:
        i20 = i20 + 1;

        if i20 >= $i17 goto label12;

        $c12 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i20);

        $z2 = staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: boolean isDigit(char)>($c12);

        if $z2 == 0 goto label12;

        $i14 = 10 * i19;

        $i29 = (int) $c12;

        $i13 = $i29 - 48;

        i21 = $i14 + $i13;

        if i21 >= i19 goto label06;

        goto label12;

     label06:
        i19 = i21;

        goto label05;

     label07:
        $r12 = r3.<org.mozilla.javascript.regexp.RegExpImpl: org.mozilla.javascript.regexp.SubString[] parens>;

        if $r12 != null goto label08;

        $i22 = 0;

        goto label09;

     label08:
        $r13 = r3.<org.mozilla.javascript.regexp.RegExpImpl: org.mozilla.javascript.regexp.SubString[] parens>;

        $i22 = lengthof $r13;

     label09:
        $i30 = (int) $c4;

        $i11 = $i30 - 48;

        i19 = $i11;

        if $i11 <= $i22 goto label10;

        return null;

     label10:
        i20 = i0 + 2;

        $i6 = i0 + 2;

        if $i6 >= $i17 goto label11;

        $i7 = i0 + 2;

        $c8 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i7);

        $z1 = staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: boolean isDigit(char)>($c8);

        if $z1 == 0 goto label11;

        $i10 = 10 * $i11;

        $i31 = (int) $c8;

        $i9 = $i31 - 48;

        i23 = $i10 + $i9;

        if i23 > $i22 goto label11;

        i20 = i20 + 1;

        i19 = i23;

     label11:
        if i19 != 0 goto label12;

        return null;

     label12:
        $i33 = (int) -1;

        i24 = i19 + $i33;

        $i25 = i20 - i0;

        r2[0] = $i25;

        $r14 = virtualinvoke r3.<org.mozilla.javascript.regexp.RegExpImpl: org.mozilla.javascript.regexp.SubString getParenSubString(int)>(i24);

        return $r14;

     label13:
        r2[0] = 2;

        $i34 = (int) $c4;

        lookupswitch($i34)
        {
            case 36: goto label14;
            case 38: goto label15;
            case 39: goto label19;
            case 43: goto label16;
            case 96: goto label17;
            default: goto label20;
        };

     label14:
        $r15 = new org.mozilla.javascript.regexp.SubString;

        specialinvoke $r15.<org.mozilla.javascript.regexp.SubString: void <init>(java.lang.String)>("$");

        return $r15;

     label15:
        $r10 = r3.<org.mozilla.javascript.regexp.RegExpImpl: org.mozilla.javascript.regexp.SubString lastMatch>;

        return $r10;

     label16:
        $r8 = r3.<org.mozilla.javascript.regexp.RegExpImpl: org.mozilla.javascript.regexp.SubString lastParen>;

        return $r8;

     label17:
        if $i2 != 120 goto label18;

        $r5 = r3.<org.mozilla.javascript.regexp.RegExpImpl: org.mozilla.javascript.regexp.SubString leftContext>;

        $r5.<org.mozilla.javascript.regexp.SubString: int index> = 0;

        $r7 = r3.<org.mozilla.javascript.regexp.RegExpImpl: org.mozilla.javascript.regexp.SubString leftContext>;

        $r6 = r3.<org.mozilla.javascript.regexp.RegExpImpl: org.mozilla.javascript.regexp.SubString lastMatch>;

        $i5 = $r6.<org.mozilla.javascript.regexp.SubString: int index>;

        $r7.<org.mozilla.javascript.regexp.SubString: int length> = $i5;

     label18:
        $r4 = r3.<org.mozilla.javascript.regexp.RegExpImpl: org.mozilla.javascript.regexp.SubString leftContext>;

        return $r4;

     label19:
        $r9 = r3.<org.mozilla.javascript.regexp.RegExpImpl: org.mozilla.javascript.regexp.SubString rightContext>;

        return $r9;

     label20:
        return null;
    }

    private static void do_replace(org.mozilla.javascript.regexp.GlobData, org.mozilla.javascript.Context, org.mozilla.javascript.regexp.RegExpImpl)
    {
        org.mozilla.javascript.regexp.GlobData r0;
        int[] r9;
        java.lang.StringBuffer r1;
        org.mozilla.javascript.regexp.RegExpImpl r6;
        int $i0, $i1, $i2, $i3, $i4, i5, i6, i7, i8, $i10;
        java.lang.String r2, $r3, $r4;
        org.mozilla.javascript.Context r5;
        char[] $r8;
        org.mozilla.javascript.regexp.SubString $r7;

        r0 := @parameter0: org.mozilla.javascript.regexp.GlobData;

        r5 := @parameter1: org.mozilla.javascript.Context;

        r6 := @parameter2: org.mozilla.javascript.regexp.RegExpImpl;

        r1 = r0.<org.mozilla.javascript.regexp.GlobData: java.lang.StringBuffer charBuf>;

        i5 = 0;

        r2 = r0.<org.mozilla.javascript.regexp.GlobData: java.lang.String repstr>;

        i6 = r0.<org.mozilla.javascript.regexp.GlobData: int dollar>;

        $i10 = (int) -1;

        if i6 == $i10 goto label5;

        r9 = newarray (int)[1];

     label1:
        $r4 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int,int)>(i5, i6);

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        i5 = i6;

        $r7 = staticinvoke <org.mozilla.javascript.regexp.RegExpImpl: org.mozilla.javascript.regexp.SubString interpretDollar(org.mozilla.javascript.Context,org.mozilla.javascript.regexp.RegExpImpl,java.lang.String,int,int[])>(r5, r6, r2, i6, r9);

        if $r7 == null goto label3;

        i7 = $r7.<org.mozilla.javascript.regexp.SubString: int length>;

        if i7 <= 0 goto label2;

        $r8 = $r7.<org.mozilla.javascript.regexp.SubString: char[] charArray>;

        $i4 = $r7.<org.mozilla.javascript.regexp.SubString: int index>;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char[],int,int)>($r8, $i4, i7);

     label2:
        $i2 = r9[0];

        i5 = i5 + $i2;

        $i3 = r9[0];

        i8 = i6 + $i3;

        goto label4;

     label3:
        i8 = i6 + 1;

     label4:
        $i1 = virtualinvoke r2.<java.lang.String: int indexOf(int,int)>(36, i8);

        i6 = $i1;

        if $i1 >= 0 goto label1;

     label5:
        $i0 = virtualinvoke r2.<java.lang.String: int length()>();

        if $i0 <= i5 goto label6;

        $r3 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int,int)>(i5, $i0);

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

     label6:
        return;
    }
}
