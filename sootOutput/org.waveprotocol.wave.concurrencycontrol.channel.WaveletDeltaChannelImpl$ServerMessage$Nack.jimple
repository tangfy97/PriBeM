final class org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$ServerMessage$Nack extends org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$ServerMessage
{
    private final org.waveprotocol.wave.concurrencycontrol.common.ResponseCode responseCode;
    private final java.lang.String errorString;

    void <init>(long, org.waveprotocol.wave.concurrencycontrol.common.ResponseCode, java.lang.String)
    {
        org.waveprotocol.wave.concurrencycontrol.common.ResponseCode r1, $r2;
        org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$ServerMessage$Nack r0;
        long l0;
        java.lang.String r3;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$ServerMessage$Nack;

        l0 := @parameter0: long;

        r1 := @parameter1: org.waveprotocol.wave.concurrencycontrol.common.ResponseCode;

        r3 := @parameter2: java.lang.String;

        specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$ServerMessage: void <init>(long,long)>(l0, l0);

        $r2 = <org.waveprotocol.wave.concurrencycontrol.common.ResponseCode: org.waveprotocol.wave.concurrencycontrol.common.ResponseCode OK>;

        if r1 == $r2 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z0, "Shouldn\'t build NACK message for response with status OK");

        r0.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$ServerMessage$Nack: org.waveprotocol.wave.concurrencycontrol.common.ResponseCode responseCode> = r1;

        r0.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$ServerMessage$Nack: java.lang.String errorString> = r3;

        return;
    }

    void deliverTo(org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannel$Receiver) throws org.waveprotocol.wave.concurrencycontrol.common.ChannelException
    {
        org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannel$Receiver r0;
        org.waveprotocol.wave.concurrencycontrol.common.ResponseCode $r2;
        org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$ServerMessage$Nack r1;
        long $l0;
        java.lang.String $r3;

        r1 := @this: org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$ServerMessage$Nack;

        r0 := @parameter0: org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannel$Receiver;

        $r2 = r1.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$ServerMessage$Nack: org.waveprotocol.wave.concurrencycontrol.common.ResponseCode responseCode>;

        $r3 = r1.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$ServerMessage$Nack: java.lang.String errorString>;

        $l0 = virtualinvoke r1.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$ServerMessage$Nack: long endVersion()>();

        interfaceinvoke r0.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannel$Receiver: void onNack(org.waveprotocol.wave.concurrencycontrol.common.ResponseCode,java.lang.String,long)>($r2, $r3, $l0);

        return;
    }

    public java.lang.String toString()
    {
        org.waveprotocol.wave.concurrencycontrol.common.ResponseCode $r5;
        long $l0;
        java.lang.StringBuilder $r0, $r1, $r3, $r4, $r6, $r7, $r9, $r10;
        org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$ServerMessage$Nack r2;
        java.lang.String $r8, $r11;

        r2 := @this: org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$ServerMessage$Nack;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Nack(");

        $l0 = virtualinvoke r2.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$ServerMessage$Nack: long endVersion()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", code ");

        $r5 = r2.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$ServerMessage$Nack: org.waveprotocol.wave.concurrencycontrol.common.ResponseCode responseCode>;

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", \"");

        $r8 = r2.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$ServerMessage$Nack: java.lang.String errorString>;

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\")");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r11;
    }

    public volatile int compareTo(java.lang.Object)
    {
        org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$ServerMessage $r2;
        int $i0;
        org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$ServerMessage$Nack r0;
        java.lang.Object r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$ServerMessage$Nack;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$ServerMessage) r1;

        $i0 = specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$ServerMessage: int compareTo(org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$ServerMessage)>($r2);

        return $i0;
    }
}
