public final class com.google.inject.internal.util.$MapMaker extends java.lang.Object
{
    private com.google.inject.internal.util.$MapMaker$Strength keyStrength;
    private com.google.inject.internal.util.$MapMaker$Strength valueStrength;
    private long expirationNanos;
    private boolean useCustomMap;
    private final com.google.inject.internal.util.$CustomConcurrentHashMap$Builder builder;
    private static final com.google.inject.internal.util.$MapMaker$ValueReference COMPUTING;

    public void <init>()
    {
        com.google.inject.internal.util.$MapMaker r0;
        com.google.inject.internal.util.$MapMaker$Strength $r1, $r2;
        com.google.inject.internal.util.$CustomConcurrentHashMap$Builder $r3;

        r0 := @this: com.google.inject.internal.util.$MapMaker;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = <com.google.inject.internal.util.$MapMaker$Strength: com.google.inject.internal.util.$MapMaker$Strength STRONG>;

        r0.<com.google.inject.internal.util.$MapMaker: com.google.inject.internal.util.$MapMaker$Strength keyStrength> = $r1;

        $r2 = <com.google.inject.internal.util.$MapMaker$Strength: com.google.inject.internal.util.$MapMaker$Strength STRONG>;

        r0.<com.google.inject.internal.util.$MapMaker: com.google.inject.internal.util.$MapMaker$Strength valueStrength> = $r2;

        r0.<com.google.inject.internal.util.$MapMaker: long expirationNanos> = 0L;

        $r3 = new com.google.inject.internal.util.$CustomConcurrentHashMap$Builder;

        specialinvoke $r3.<com.google.inject.internal.util.$CustomConcurrentHashMap$Builder: void <init>()>();

        r0.<com.google.inject.internal.util.$MapMaker: com.google.inject.internal.util.$CustomConcurrentHashMap$Builder builder> = $r3;

        return;
    }

    public com.google.inject.internal.util.$MapMaker initialCapacity(int)
    {
        int i0;
        com.google.inject.internal.util.$MapMaker r0;
        com.google.inject.internal.util.$CustomConcurrentHashMap$Builder $r1;

        r0 := @this: com.google.inject.internal.util.$MapMaker;

        i0 := @parameter0: int;

        $r1 = r0.<com.google.inject.internal.util.$MapMaker: com.google.inject.internal.util.$CustomConcurrentHashMap$Builder builder>;

        virtualinvoke $r1.<com.google.inject.internal.util.$CustomConcurrentHashMap$Builder: com.google.inject.internal.util.$CustomConcurrentHashMap$Builder initialCapacity(int)>(i0);

        return r0;
    }

    public com.google.inject.internal.util.$MapMaker loadFactor(float)
    {
        com.google.inject.internal.util.$MapMaker r0;
        float f0;
        com.google.inject.internal.util.$CustomConcurrentHashMap$Builder $r1;

        r0 := @this: com.google.inject.internal.util.$MapMaker;

        f0 := @parameter0: float;

        $r1 = r0.<com.google.inject.internal.util.$MapMaker: com.google.inject.internal.util.$CustomConcurrentHashMap$Builder builder>;

        virtualinvoke $r1.<com.google.inject.internal.util.$CustomConcurrentHashMap$Builder: com.google.inject.internal.util.$CustomConcurrentHashMap$Builder loadFactor(float)>(f0);

        return r0;
    }

    public com.google.inject.internal.util.$MapMaker concurrencyLevel(int)
    {
        int i0;
        com.google.inject.internal.util.$MapMaker r0;
        com.google.inject.internal.util.$CustomConcurrentHashMap$Builder $r1;

        r0 := @this: com.google.inject.internal.util.$MapMaker;

        i0 := @parameter0: int;

        $r1 = r0.<com.google.inject.internal.util.$MapMaker: com.google.inject.internal.util.$CustomConcurrentHashMap$Builder builder>;

        virtualinvoke $r1.<com.google.inject.internal.util.$CustomConcurrentHashMap$Builder: com.google.inject.internal.util.$CustomConcurrentHashMap$Builder concurrencyLevel(int)>(i0);

        return r0;
    }

    public com.google.inject.internal.util.$MapMaker weakKeys()
    {
        com.google.inject.internal.util.$MapMaker r0, $r2;
        com.google.inject.internal.util.$MapMaker$Strength $r1;

        r0 := @this: com.google.inject.internal.util.$MapMaker;

        $r1 = <com.google.inject.internal.util.$MapMaker$Strength: com.google.inject.internal.util.$MapMaker$Strength WEAK>;

        $r2 = specialinvoke r0.<com.google.inject.internal.util.$MapMaker: com.google.inject.internal.util.$MapMaker setKeyStrength(com.google.inject.internal.util.$MapMaker$Strength)>($r1);

        return $r2;
    }

    public com.google.inject.internal.util.$MapMaker softKeys()
    {
        com.google.inject.internal.util.$MapMaker r0, $r2;
        com.google.inject.internal.util.$MapMaker$Strength $r1;

        r0 := @this: com.google.inject.internal.util.$MapMaker;

        $r1 = <com.google.inject.internal.util.$MapMaker$Strength: com.google.inject.internal.util.$MapMaker$Strength SOFT>;

        $r2 = specialinvoke r0.<com.google.inject.internal.util.$MapMaker: com.google.inject.internal.util.$MapMaker setKeyStrength(com.google.inject.internal.util.$MapMaker$Strength)>($r1);

        return $r2;
    }

    private com.google.inject.internal.util.$MapMaker setKeyStrength(com.google.inject.internal.util.$MapMaker$Strength)
    {
        java.lang.IllegalStateException $r4;
        com.google.inject.internal.util.$MapMaker$Strength $r1, $r2, r3, $r7;
        com.google.inject.internal.util.$MapMaker r0;
        java.lang.StringBuilder $r5, $r6, $r8, $r9;
        java.lang.String $r10;

        r0 := @this: com.google.inject.internal.util.$MapMaker;

        r3 := @parameter0: com.google.inject.internal.util.$MapMaker$Strength;

        $r2 = r0.<com.google.inject.internal.util.$MapMaker: com.google.inject.internal.util.$MapMaker$Strength keyStrength>;

        $r1 = <com.google.inject.internal.util.$MapMaker$Strength: com.google.inject.internal.util.$MapMaker$Strength STRONG>;

        if $r2 == $r1 goto label1;

        $r4 = new java.lang.IllegalStateException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Key strength was already set to ");

        $r7 = r0.<com.google.inject.internal.util.$MapMaker: com.google.inject.internal.util.$MapMaker$Strength keyStrength>;

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r10);

        throw $r4;

     label1:
        r0.<com.google.inject.internal.util.$MapMaker: com.google.inject.internal.util.$MapMaker$Strength keyStrength> = r3;

        r0.<com.google.inject.internal.util.$MapMaker: boolean useCustomMap> = 1;

        return r0;
    }

    public com.google.inject.internal.util.$MapMaker weakValues()
    {
        com.google.inject.internal.util.$MapMaker r0, $r2;
        com.google.inject.internal.util.$MapMaker$Strength $r1;

        r0 := @this: com.google.inject.internal.util.$MapMaker;

        $r1 = <com.google.inject.internal.util.$MapMaker$Strength: com.google.inject.internal.util.$MapMaker$Strength WEAK>;

        $r2 = specialinvoke r0.<com.google.inject.internal.util.$MapMaker: com.google.inject.internal.util.$MapMaker setValueStrength(com.google.inject.internal.util.$MapMaker$Strength)>($r1);

        return $r2;
    }

    public com.google.inject.internal.util.$MapMaker softValues()
    {
        com.google.inject.internal.util.$MapMaker r0, $r2;
        com.google.inject.internal.util.$MapMaker$Strength $r1;

        r0 := @this: com.google.inject.internal.util.$MapMaker;

        $r1 = <com.google.inject.internal.util.$MapMaker$Strength: com.google.inject.internal.util.$MapMaker$Strength SOFT>;

        $r2 = specialinvoke r0.<com.google.inject.internal.util.$MapMaker: com.google.inject.internal.util.$MapMaker setValueStrength(com.google.inject.internal.util.$MapMaker$Strength)>($r1);

        return $r2;
    }

    private com.google.inject.internal.util.$MapMaker setValueStrength(com.google.inject.internal.util.$MapMaker$Strength)
    {
        java.lang.IllegalStateException $r4;
        com.google.inject.internal.util.$MapMaker$Strength $r1, $r2, r3, $r7;
        com.google.inject.internal.util.$MapMaker r0;
        java.lang.StringBuilder $r5, $r6, $r8, $r9;
        java.lang.String $r10;

        r0 := @this: com.google.inject.internal.util.$MapMaker;

        r3 := @parameter0: com.google.inject.internal.util.$MapMaker$Strength;

        $r2 = r0.<com.google.inject.internal.util.$MapMaker: com.google.inject.internal.util.$MapMaker$Strength valueStrength>;

        $r1 = <com.google.inject.internal.util.$MapMaker$Strength: com.google.inject.internal.util.$MapMaker$Strength STRONG>;

        if $r2 == $r1 goto label1;

        $r4 = new java.lang.IllegalStateException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Value strength was already set to ");

        $r7 = r0.<com.google.inject.internal.util.$MapMaker: com.google.inject.internal.util.$MapMaker$Strength valueStrength>;

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r10);

        throw $r4;

     label1:
        r0.<com.google.inject.internal.util.$MapMaker: com.google.inject.internal.util.$MapMaker$Strength valueStrength> = r3;

        r0.<com.google.inject.internal.util.$MapMaker: boolean useCustomMap> = 1;

        return r0;
    }

    public com.google.inject.internal.util.$MapMaker expiration(long, java.util.concurrent.TimeUnit)
    {
        java.lang.IllegalStateException $r14;
        long $l0, l2, $l4, $l5;
        byte $b1, $b3;
        int $i6;
        com.google.inject.internal.util.$MapMaker r0;
        java.lang.String $r6, $r12;
        java.lang.IllegalArgumentException $r16;
        java.util.concurrent.TimeUnit r1;
        java.lang.StringBuilder $r4, $r5, $r9, $r10, $r11, $r13, $r15;

        r0 := @this: com.google.inject.internal.util.$MapMaker;

        l2 := @parameter0: long;

        r1 := @parameter1: java.util.concurrent.TimeUnit;

        $l0 = r0.<com.google.inject.internal.util.$MapMaker: long expirationNanos>;

        $b1 = $l0 cmp 0L;

        if $b1 == 0 goto label1;

        $r14 = new java.lang.IllegalStateException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("expiration time of ");

        $l5 = r0.<com.google.inject.internal.util.$MapMaker: long expirationNanos>;

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l5);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ns was already set");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r12);

        throw $r14;

     label1:
        $b3 = l2 cmp 0L;

        $i6 = (int) $b3;

        if $i6 > 0 goto label2;

        $r16 = new java.lang.IllegalArgumentException;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("invalid duration: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l2);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r16;

     label2:
        $l4 = virtualinvoke r1.<java.util.concurrent.TimeUnit: long toNanos(long)>(l2);

        r0.<com.google.inject.internal.util.$MapMaker: long expirationNanos> = $l4;

        r0.<com.google.inject.internal.util.$MapMaker: boolean useCustomMap> = 1;

        return r0;
    }

    public java.util.concurrent.ConcurrentMap makeMap()
    {
        com.google.inject.internal.util.$MapMaker$StrategyImpl $r6;
        java.util.concurrent.ConcurrentHashMap $r7;
        com.google.inject.internal.util.$CustomConcurrentHashMap$Builder $r1, $r2, $r3;
        java.util.concurrent.ConcurrentMap $r5;
        int $i0, $i1;
        com.google.inject.internal.util.$MapMaker r0;
        float $f0;
        boolean $z0;

        r0 := @this: com.google.inject.internal.util.$MapMaker;

        $z0 = r0.<com.google.inject.internal.util.$MapMaker: boolean useCustomMap>;

        if $z0 == 0 goto label1;

        $r6 = new com.google.inject.internal.util.$MapMaker$StrategyImpl;

        specialinvoke $r6.<com.google.inject.internal.util.$MapMaker$StrategyImpl: void <init>(com.google.inject.internal.util.$MapMaker)>(r0);

        $r5 = $r6.<com.google.inject.internal.util.$MapMaker$StrategyImpl: java.util.concurrent.ConcurrentMap map>;

        goto label2;

     label1:
        $r7 = new java.util.concurrent.ConcurrentHashMap;

        $r5 = $r7;

        $r1 = r0.<com.google.inject.internal.util.$MapMaker: com.google.inject.internal.util.$CustomConcurrentHashMap$Builder builder>;

        $i1 = $r1.<com.google.inject.internal.util.$CustomConcurrentHashMap$Builder: int initialCapacity>;

        $r2 = r0.<com.google.inject.internal.util.$MapMaker: com.google.inject.internal.util.$CustomConcurrentHashMap$Builder builder>;

        $f0 = $r2.<com.google.inject.internal.util.$CustomConcurrentHashMap$Builder: float loadFactor>;

        $r3 = r0.<com.google.inject.internal.util.$MapMaker: com.google.inject.internal.util.$CustomConcurrentHashMap$Builder builder>;

        $i0 = $r3.<com.google.inject.internal.util.$CustomConcurrentHashMap$Builder: int concurrencyLevel>;

        specialinvoke $r7.<java.util.concurrent.ConcurrentHashMap: void <init>(int,float,int)>($i1, $f0, $i0);

     label2:
        return $r5;
    }

    public java.util.concurrent.ConcurrentMap makeComputingMap(com.google.inject.internal.util.$Function)
    {
        com.google.inject.internal.util.$MapMaker$StrategyImpl $r0;
        com.google.inject.internal.util.$Function r2;
        com.google.inject.internal.util.$MapMaker r1;
        java.util.concurrent.ConcurrentMap $r3;

        r1 := @this: com.google.inject.internal.util.$MapMaker;

        r2 := @parameter0: com.google.inject.internal.util.$Function;

        $r0 = new com.google.inject.internal.util.$MapMaker$StrategyImpl;

        specialinvoke $r0.<com.google.inject.internal.util.$MapMaker$StrategyImpl: void <init>(com.google.inject.internal.util.$MapMaker,com.google.inject.internal.util.$Function)>(r1, r2);

        $r3 = $r0.<com.google.inject.internal.util.$MapMaker$StrategyImpl: java.util.concurrent.ConcurrentMap map>;

        return $r3;
    }

    private static com.google.inject.internal.util.$MapMaker$ValueReference computing()
    {
        com.google.inject.internal.util.$MapMaker$ValueReference $r0;

        $r0 = <com.google.inject.internal.util.$MapMaker: com.google.inject.internal.util.$MapMaker$ValueReference COMPUTING>;

        return $r0;
    }

    static com.google.inject.internal.util.$MapMaker$Strength access$100(com.google.inject.internal.util.$MapMaker)
    {
        com.google.inject.internal.util.$MapMaker r0;
        com.google.inject.internal.util.$MapMaker$Strength $r1;

        r0 := @parameter0: com.google.inject.internal.util.$MapMaker;

        $r1 = r0.<com.google.inject.internal.util.$MapMaker: com.google.inject.internal.util.$MapMaker$Strength keyStrength>;

        return $r1;
    }

    static com.google.inject.internal.util.$MapMaker$Strength access$200(com.google.inject.internal.util.$MapMaker)
    {
        com.google.inject.internal.util.$MapMaker r0;
        com.google.inject.internal.util.$MapMaker$Strength $r1;

        r0 := @parameter0: com.google.inject.internal.util.$MapMaker;

        $r1 = r0.<com.google.inject.internal.util.$MapMaker: com.google.inject.internal.util.$MapMaker$Strength valueStrength>;

        return $r1;
    }

    static long access$300(com.google.inject.internal.util.$MapMaker)
    {
        com.google.inject.internal.util.$MapMaker r0;
        long $l0;

        r0 := @parameter0: com.google.inject.internal.util.$MapMaker;

        $l0 = r0.<com.google.inject.internal.util.$MapMaker: long expirationNanos>;

        return $l0;
    }

    static com.google.inject.internal.util.$CustomConcurrentHashMap$Builder access$400(com.google.inject.internal.util.$MapMaker)
    {
        com.google.inject.internal.util.$MapMaker r0;
        com.google.inject.internal.util.$CustomConcurrentHashMap$Builder $r1;

        r0 := @parameter0: com.google.inject.internal.util.$MapMaker;

        $r1 = r0.<com.google.inject.internal.util.$MapMaker: com.google.inject.internal.util.$CustomConcurrentHashMap$Builder builder>;

        return $r1;
    }

    static com.google.inject.internal.util.$MapMaker$ValueReference access$500()
    {
        com.google.inject.internal.util.$MapMaker$ValueReference $r0;

        $r0 = <com.google.inject.internal.util.$MapMaker: com.google.inject.internal.util.$MapMaker$ValueReference COMPUTING>;

        return $r0;
    }

    static com.google.inject.internal.util.$MapMaker$ValueReference access$600()
    {
        com.google.inject.internal.util.$MapMaker$ValueReference $r0;

        $r0 = staticinvoke <com.google.inject.internal.util.$MapMaker: com.google.inject.internal.util.$MapMaker$ValueReference computing()>();

        return $r0;
    }

    static void <clinit>()
    {
        com.google.inject.internal.util.$MapMaker$1 $r0;

        $r0 = new com.google.inject.internal.util.$MapMaker$1;

        specialinvoke $r0.<com.google.inject.internal.util.$MapMaker$1: void <init>()>();

        <com.google.inject.internal.util.$MapMaker: com.google.inject.internal.util.$MapMaker$ValueReference COMPUTING> = $r0;

        return;
    }
}
