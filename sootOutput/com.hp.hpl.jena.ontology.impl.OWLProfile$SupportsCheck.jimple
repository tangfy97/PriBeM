public class com.hp.hpl.jena.ontology.impl.OWLProfile$SupportsCheck extends java.lang.Object
{

    protected void <init>()
    {
        com.hp.hpl.jena.ontology.impl.OWLProfile$SupportsCheck r0;

        r0 := @this: com.hp.hpl.jena.ontology.impl.OWLProfile$SupportsCheck;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public boolean doCheck(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.enhanced.EnhGraph)
    {
        com.hp.hpl.jena.graph.Node r1;
        com.hp.hpl.jena.ontology.impl.OWLProfile$SupportsCheck r0;
        com.hp.hpl.jena.enhanced.EnhGraph r2;

        r0 := @this: com.hp.hpl.jena.ontology.impl.OWLProfile$SupportsCheck;

        r1 := @parameter0: com.hp.hpl.jena.graph.Node;

        r2 := @parameter1: com.hp.hpl.jena.enhanced.EnhGraph;

        return 1;
    }

    public java.util.Set allTypes(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Graph)
    {
        com.hp.hpl.jena.graph.Node r2, $r4, $r5, $r9;
        com.hp.hpl.jena.ontology.impl.OWLProfile$SupportsCheck r10;
        com.hp.hpl.jena.graph.Triple $r8;
        java.util.HashSet $r0;
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r6;
        com.hp.hpl.jena.rdf.model.Property $r3;
        java.lang.Object $r7;
        com.hp.hpl.jena.graph.Graph r1;
        boolean $z0;

        r10 := @this: com.hp.hpl.jena.ontology.impl.OWLProfile$SupportsCheck;

        r2 := @parameter0: com.hp.hpl.jena.graph.Node;

        r1 := @parameter1: com.hp.hpl.jena.graph.Graph;

        $r0 = new java.util.HashSet;

        specialinvoke $r0.<java.util.HashSet: void <init>()>();

        $r3 = <com.hp.hpl.jena.vocabulary.RDF: com.hp.hpl.jena.rdf.model.Property type>;

        $r4 = interfaceinvoke $r3.<com.hp.hpl.jena.rdf.model.Property: com.hp.hpl.jena.graph.Node asNode()>();

        $r5 = <com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.Node ANY>;

        $r6 = interfaceinvoke r1.<com.hp.hpl.jena.graph.Graph: com.hp.hpl.jena.util.iterator.ExtendedIterator find(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r2, $r4, $r5);

     label1:
        $z0 = interfaceinvoke $r6.<com.hp.hpl.jena.util.iterator.ExtendedIterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r7 = interfaceinvoke $r6.<com.hp.hpl.jena.util.iterator.ExtendedIterator: java.lang.Object next()>();

        $r8 = (com.hp.hpl.jena.graph.Triple) $r7;

        $r9 = virtualinvoke $r8.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getObject()>();

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>($r9);

        goto label1;

     label2:
        return $r0;
    }

    public boolean intersect(java.util.Set, com.hp.hpl.jena.rdf.model.Resource[])
    {
        java.util.Set r2;
        com.hp.hpl.jena.graph.Node $r3;
        com.hp.hpl.jena.ontology.impl.OWLProfile$SupportsCheck r4;
        com.hp.hpl.jena.rdf.model.Resource r1;
        int i0, i1;
        com.hp.hpl.jena.rdf.model.Resource[] r0;
        boolean $z0;

        r4 := @this: com.hp.hpl.jena.ontology.impl.OWLProfile$SupportsCheck;

        r2 := @parameter0: java.util.Set;

        r0 := @parameter1: com.hp.hpl.jena.rdf.model.Resource[];

        i0 = lengthof r0;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r1 = r0[i1];

        $r3 = interfaceinvoke r1.<com.hp.hpl.jena.rdf.model.Resource: com.hp.hpl.jena.graph.Node asNode()>();

        $z0 = interfaceinvoke r2.<java.util.Set: boolean contains(java.lang.Object)>($r3);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return 0;
    }

    public boolean hasType(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.enhanced.EnhGraph, com.hp.hpl.jena.rdf.model.Resource[])
    {
        java.util.Set $r4;
        com.hp.hpl.jena.graph.Node r3, $r8, $r9;
        com.hp.hpl.jena.ontology.impl.OWLProfile$SupportsCheck r2;
        com.hp.hpl.jena.rdf.model.Resource r6;
        com.hp.hpl.jena.enhanced.EnhGraph r0;
        com.hp.hpl.jena.rdf.model.Property $r7;
        int i0, i1;
        com.hp.hpl.jena.rdf.model.Resource[] r5;
        com.hp.hpl.jena.graph.Graph $r1;
        boolean $z0, $z1, $z2;

        r2 := @this: com.hp.hpl.jena.ontology.impl.OWLProfile$SupportsCheck;

        r3 := @parameter0: com.hp.hpl.jena.graph.Node;

        r0 := @parameter1: com.hp.hpl.jena.enhanced.EnhGraph;

        r5 := @parameter2: com.hp.hpl.jena.rdf.model.Resource[];

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.enhanced.EnhGraph: com.hp.hpl.jena.graph.Graph asGraph()>();

        $z0 = virtualinvoke r2.<com.hp.hpl.jena.ontology.impl.OWLProfile$SupportsCheck: boolean isInferenceGraph(com.hp.hpl.jena.graph.Graph)>($r1);

        if $z0 == 0 goto label4;

        i0 = lengthof r5;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r6 = r5[i1];

        $r7 = <com.hp.hpl.jena.vocabulary.RDF: com.hp.hpl.jena.rdf.model.Property type>;

        $r8 = interfaceinvoke $r7.<com.hp.hpl.jena.rdf.model.Property: com.hp.hpl.jena.graph.Node asNode()>();

        $r9 = interfaceinvoke r6.<com.hp.hpl.jena.rdf.model.Resource: com.hp.hpl.jena.graph.Node asNode()>();

        $z2 = interfaceinvoke $r1.<com.hp.hpl.jena.graph.Graph: boolean contains(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r3, $r8, $r9);

        if $z2 == 0 goto label2;

        return 1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return 0;

     label4:
        $r4 = virtualinvoke r2.<com.hp.hpl.jena.ontology.impl.OWLProfile$SupportsCheck: java.util.Set allTypes(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Graph)>(r3, $r1);

        $z1 = virtualinvoke r2.<com.hp.hpl.jena.ontology.impl.OWLProfile$SupportsCheck: boolean intersect(java.util.Set,com.hp.hpl.jena.rdf.model.Resource[])>($r4, r5);

        return $z1;
    }

    public boolean isInferenceGraph(com.hp.hpl.jena.graph.Graph)
    {
        com.hp.hpl.jena.ontology.impl.OWLProfile$SupportsCheck r3;
        com.hp.hpl.jena.graph.compose.Polyadic $r1;
        com.hp.hpl.jena.graph.Graph r0, $r2;
        boolean $z0, $z1, $z2, $z3;

        r3 := @this: com.hp.hpl.jena.ontology.impl.OWLProfile$SupportsCheck;

        r0 := @parameter0: com.hp.hpl.jena.graph.Graph;

        $z0 = r0 instanceof com.hp.hpl.jena.reasoner.InfGraph;

        if $z0 != 0 goto label1;

        $z1 = r0 instanceof com.hp.hpl.jena.graph.compose.Polyadic;

        if $z1 == 0 goto label2;

        $r1 = (com.hp.hpl.jena.graph.compose.Polyadic) r0;

        $r2 = virtualinvoke $r1.<com.hp.hpl.jena.graph.compose.Polyadic: com.hp.hpl.jena.graph.Graph getBaseGraph()>();

        $z2 = $r2 instanceof com.hp.hpl.jena.reasoner.InfGraph;

        if $z2 == 0 goto label2;

     label1:
        $z3 = 1;

        goto label3;

     label2:
        $z3 = 0;

     label3:
        return $z3;
    }
}
