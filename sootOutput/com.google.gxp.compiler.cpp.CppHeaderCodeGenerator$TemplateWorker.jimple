class com.google.gxp.compiler.cpp.CppHeaderCodeGenerator$TemplateWorker extends com.google.gxp.compiler.cpp.BaseCppCodeGenerator$TemplateWorker
{
    private final com.google.gxp.com.google.common.collect.ImmutableSet extraIncludess;

    public void <init>(java.lang.Appendable, com.google.gxp.compiler.alerts.AlertSink, com.google.gxp.compiler.base.Template, java.util.Set)
    {
        com.google.gxp.com.google.common.collect.ImmutableSet $r5;
        com.google.gxp.compiler.alerts.AlertSink r2;
        com.google.gxp.compiler.cpp.CppHeaderCodeGenerator$TemplateWorker r0;
        java.lang.Appendable r1;
        java.util.Set r4;
        com.google.gxp.compiler.base.Template r3;

        r0 := @this: com.google.gxp.compiler.cpp.CppHeaderCodeGenerator$TemplateWorker;

        r1 := @parameter0: java.lang.Appendable;

        r2 := @parameter1: com.google.gxp.compiler.alerts.AlertSink;

        r3 := @parameter2: com.google.gxp.compiler.base.Template;

        r4 := @parameter3: java.util.Set;

        specialinvoke r0.<com.google.gxp.compiler.cpp.BaseCppCodeGenerator$TemplateWorker: void <init>(java.lang.Appendable,com.google.gxp.compiler.alerts.AlertSink,com.google.gxp.compiler.base.Template)>(r1, r2, r3);

        $r5 = staticinvoke <com.google.gxp.com.google.common.collect.ImmutableSet: com.google.gxp.com.google.common.collect.ImmutableSet copyOf(java.lang.Iterable)>(r4);

        r0.<com.google.gxp.compiler.cpp.CppHeaderCodeGenerator$TemplateWorker: com.google.gxp.com.google.common.collect.ImmutableSet extraIncludess> = $r5;

        return;
    }

    protected void appendClass()
    {
        java.lang.Object[] $r8;
        com.google.gxp.compiler.base.TemplateName$FullyQualified $r4;
        java.lang.String $r9, $r11, $r14, $r16, $r19;
        com.google.gxp.compiler.base.Template $r1, $r3, $r5, $r7, $r20;
        com.google.gxp.compiler.alerts.SourcePosition $r2;
        com.google.gxp.compiler.cpp.CppHeaderCodeGenerator$TemplateWorker r0;
        com.google.gxp.com.google.common.collect.ImmutableSet $r6;
        java.lang.StringBuilder $r10, $r12, $r13, $r15, $r17, $r18;

        r0 := @this: com.google.gxp.compiler.cpp.CppHeaderCodeGenerator$TemplateWorker;

        $r1 = r0.<com.google.gxp.compiler.cpp.CppHeaderCodeGenerator$TemplateWorker: com.google.gxp.compiler.base.Template template>;

        $r2 = virtualinvoke $r1.<com.google.gxp.compiler.base.Template: com.google.gxp.compiler.alerts.SourcePosition getSourcePosition()>();

        $r3 = r0.<com.google.gxp.compiler.cpp.CppHeaderCodeGenerator$TemplateWorker: com.google.gxp.compiler.base.Template template>;

        $r4 = virtualinvoke $r3.<com.google.gxp.compiler.base.Template: com.google.gxp.compiler.base.TemplateName$FullyQualified getName()>();

        $r5 = r0.<com.google.gxp.compiler.cpp.CppHeaderCodeGenerator$TemplateWorker: com.google.gxp.compiler.base.Template template>;

        virtualinvoke r0.<com.google.gxp.compiler.cpp.CppHeaderCodeGenerator$TemplateWorker: void appendIfdefGuardStart(com.google.gxp.compiler.base.Root)>($r5);

        virtualinvoke r0.<com.google.gxp.compiler.cpp.CppHeaderCodeGenerator$TemplateWorker: void appendLine()>();

        virtualinvoke r0.<com.google.gxp.compiler.cpp.CppHeaderCodeGenerator$TemplateWorker: void appendLine(java.lang.CharSequence)>("#include \"gxp/base/base.h\"");

        $r7 = r0.<com.google.gxp.compiler.cpp.CppHeaderCodeGenerator$TemplateWorker: com.google.gxp.compiler.base.Template template>;

        $r6 = r0.<com.google.gxp.compiler.cpp.CppHeaderCodeGenerator$TemplateWorker: com.google.gxp.com.google.common.collect.ImmutableSet extraIncludess>;

        virtualinvoke r0.<com.google.gxp.compiler.cpp.CppHeaderCodeGenerator$TemplateWorker: void appendImports(com.google.gxp.compiler.base.Root,java.util.Set)>($r7, $r6);

        virtualinvoke r0.<com.google.gxp.compiler.cpp.CppHeaderCodeGenerator$TemplateWorker: void appendLine()>();

        virtualinvoke r0.<com.google.gxp.compiler.cpp.CppHeaderCodeGenerator$TemplateWorker: void appendNamespacesOpen(com.google.gxp.compiler.base.TemplateName)>($r4);

        $r8 = newarray (java.lang.Object)[1];

        $r9 = virtualinvoke r0.<com.google.gxp.compiler.cpp.CppHeaderCodeGenerator$TemplateWorker: java.lang.String getClassName(com.google.gxp.compiler.base.TemplateName)>($r4);

        $r8[0] = $r9;

        virtualinvoke r0.<com.google.gxp.compiler.cpp.CppHeaderCodeGenerator$TemplateWorker: void formatLine(com.google.gxp.compiler.alerts.SourcePosition,java.lang.String,java.lang.Object[])>($r2, "class %s : public GxpTemplate {", $r8);

        virtualinvoke r0.<com.google.gxp.compiler.cpp.CppHeaderCodeGenerator$TemplateWorker: void appendLine(java.lang.CharSequence)>("public:");

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke r0.<com.google.gxp.compiler.cpp.CppHeaderCodeGenerator$TemplateWorker: java.lang.String getWriteMethodSignature(boolean,boolean)>(0, 1);

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(";");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<com.google.gxp.compiler.cpp.CppHeaderCodeGenerator$TemplateWorker: void appendLine(com.google.gxp.compiler.alerts.SourcePosition,java.lang.CharSequence)>($r2, $r14);

        virtualinvoke r0.<com.google.gxp.compiler.cpp.CppHeaderCodeGenerator$TemplateWorker: void appendLine()>();

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke r0.<com.google.gxp.compiler.cpp.CppHeaderCodeGenerator$TemplateWorker: java.lang.String getGetGxpClosureMethodSignature(boolean,boolean)>(0, 1);

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(";");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<com.google.gxp.compiler.cpp.CppHeaderCodeGenerator$TemplateWorker: void appendLine(com.google.gxp.compiler.alerts.SourcePosition,java.lang.CharSequence)>($r2, $r19);

        virtualinvoke r0.<com.google.gxp.compiler.cpp.CppHeaderCodeGenerator$TemplateWorker: void appendLine()>();

        virtualinvoke r0.<com.google.gxp.compiler.cpp.CppHeaderCodeGenerator$TemplateWorker: void appendExtraWriteMethods(boolean)>(1);

        virtualinvoke r0.<com.google.gxp.compiler.cpp.CppHeaderCodeGenerator$TemplateWorker: void appendLine()>();

        virtualinvoke r0.<com.google.gxp.compiler.cpp.CppHeaderCodeGenerator$TemplateWorker: void appendInterface()>();

        virtualinvoke r0.<com.google.gxp.compiler.cpp.CppHeaderCodeGenerator$TemplateWorker: void appendLine()>();

        virtualinvoke r0.<com.google.gxp.compiler.cpp.CppHeaderCodeGenerator$TemplateWorker: void appendInstance()>();

        virtualinvoke r0.<com.google.gxp.compiler.cpp.CppHeaderCodeGenerator$TemplateWorker: void appendLine(java.lang.CharSequence)>("};");

        virtualinvoke r0.<com.google.gxp.compiler.cpp.CppHeaderCodeGenerator$TemplateWorker: void appendNamespacesClose(com.google.gxp.compiler.base.TemplateName)>($r4);

        virtualinvoke r0.<com.google.gxp.compiler.cpp.CppHeaderCodeGenerator$TemplateWorker: void appendLine()>();

        $r20 = r0.<com.google.gxp.compiler.cpp.CppHeaderCodeGenerator$TemplateWorker: com.google.gxp.compiler.base.Template template>;

        virtualinvoke r0.<com.google.gxp.compiler.cpp.CppHeaderCodeGenerator$TemplateWorker: void appendIfdefGuardEnd(com.google.gxp.compiler.base.Root)>($r20);

        return;
    }

    protected void appendExtraWriteMethods(boolean)
    {
        java.lang.Object[] $r15;
        java.lang.Iterable $r20, $r21;
        com.google.gxp.com.google.common.base.Function $r19;
        java.lang.String $r10, $r11, $r14, $r16;
        com.google.gxp.compiler.base.Template $r1, $r3, $r22;
        boolean z0, $z1;
        com.google.gxp.compiler.alerts.SourcePosition $r2;
        java.util.Iterator $r6;
        com.google.gxp.compiler.cpp.CppHeaderCodeGenerator$TemplateWorker r0;
        java.util.Set $r18;
        com.google.gxp.compiler.cpp.BaseCppCodeGenerator$Worker$ExtraOutType r8;
        java.util.List r4, $r5, $r23;
        java.lang.Object $r7;
        java.lang.StringBuilder $r9, $r12, $r13, $r17;

        r0 := @this: com.google.gxp.compiler.cpp.CppHeaderCodeGenerator$TemplateWorker;

        z0 := @parameter0: boolean;

        $r1 = r0.<com.google.gxp.compiler.cpp.CppHeaderCodeGenerator$TemplateWorker: com.google.gxp.compiler.base.Template template>;

        $r2 = virtualinvoke $r1.<com.google.gxp.compiler.base.Template: com.google.gxp.compiler.alerts.SourcePosition getSourcePosition()>();

        if z0 == 0 goto label1;

        $r22 = r0.<com.google.gxp.compiler.cpp.CppHeaderCodeGenerator$TemplateWorker: com.google.gxp.compiler.base.Template template>;

        $r23 = virtualinvoke $r22.<com.google.gxp.compiler.base.Template: java.util.List getAllParameters()>();

        goto label2;

     label1:
        $r3 = r0.<com.google.gxp.compiler.cpp.CppHeaderCodeGenerator$TemplateWorker: com.google.gxp.compiler.base.Template template>;

        $r23 = virtualinvoke $r3.<com.google.gxp.compiler.base.Template: java.util.List getParameters()>();

     label2:
        r4 = $r23;

        $r5 = r0.<com.google.gxp.compiler.cpp.CppHeaderCodeGenerator$TemplateWorker: java.util.List extraOutTypes>;

        $r6 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r8 = (com.google.gxp.compiler.cpp.BaseCppCodeGenerator$Worker$ExtraOutType) $r7;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke r8.<com.google.gxp.compiler.cpp.BaseCppCodeGenerator$Worker$ExtraOutType: java.lang.String getOutType()>();

        $r11 = virtualinvoke r0.<com.google.gxp.compiler.cpp.CppHeaderCodeGenerator$TemplateWorker: java.lang.String getWriteMethodSignature(java.lang.String,boolean,boolean)>($r10, 0, z0);

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" {");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<com.google.gxp.compiler.cpp.CppHeaderCodeGenerator$TemplateWorker: void appendLine(com.google.gxp.compiler.alerts.SourcePosition,java.lang.CharSequence)>($r2, $r14);

        $r15 = newarray (java.lang.Object)[2];

        $r16 = virtualinvoke r8.<com.google.gxp.compiler.cpp.BaseCppCodeGenerator$Worker$ExtraOutType: java.lang.String getOutWrapper()>();

        $r15[0] = $r16;

        $r15[1] = "gxp_out";

        virtualinvoke r0.<com.google.gxp.compiler.cpp.CppHeaderCodeGenerator$TemplateWorker: void formatLine(com.google.gxp.compiler.alerts.SourcePosition,java.lang.String,java.lang.Object[])>($r2, "%s gxp_wrapper(%s);", $r15);

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>(java.lang.String)>("Write(");

        $r18 = staticinvoke <java.util.Collections: java.util.Set singleton(java.lang.Object)>("&gxp_wrapper, gxp_context");

        $r19 = r0.<com.google.gxp.compiler.cpp.CppHeaderCodeGenerator$TemplateWorker: com.google.gxp.com.google.common.base.Function paramToCallName>;

        $r20 = staticinvoke <com.google.gxp.com.google.common.collect.Iterables: java.lang.Iterable transform(java.lang.Iterable,com.google.gxp.com.google.common.base.Function)>(r4, $r19);

        $r21 = staticinvoke <com.google.gxp.com.google.common.collect.Iterables: java.lang.Iterable concat(java.lang.Iterable,java.lang.Iterable)>($r18, $r20);

        staticinvoke <com.google.gxp.com.google.common.base.Join: java.lang.Appendable join(java.lang.Appendable,java.lang.String,java.lang.Iterable)>($r17, ", ", $r21);

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(");");

        virtualinvoke r0.<com.google.gxp.compiler.cpp.CppHeaderCodeGenerator$TemplateWorker: void appendLine(com.google.gxp.compiler.alerts.SourcePosition,java.lang.CharSequence)>($r2, $r17);

        virtualinvoke r0.<com.google.gxp.compiler.cpp.CppHeaderCodeGenerator$TemplateWorker: void appendLine(java.lang.CharSequence)>("}");

        goto label3;

     label4:
        return;
    }

    protected void appendInterface()
    {
        java.lang.String $r7, $r10, $r13, $r16;
        com.google.gxp.compiler.base.Template $r1, $r3;
        com.google.gxp.compiler.alerts.SourcePosition $r2;
        com.google.gxp.compiler.cpp.CppHeaderCodeGenerator$TemplateWorker r0;
        java.util.List $r4;
        java.lang.StringBuilder $r5, $r6, $r8, $r9, $r11, $r12, $r14, $r15;

        r0 := @this: com.google.gxp.compiler.cpp.CppHeaderCodeGenerator$TemplateWorker;

        $r1 = r0.<com.google.gxp.compiler.cpp.CppHeaderCodeGenerator$TemplateWorker: com.google.gxp.compiler.base.Template template>;

        $r2 = virtualinvoke $r1.<com.google.gxp.compiler.base.Template: com.google.gxp.compiler.alerts.SourcePosition getSourcePosition()>();

        virtualinvoke r0.<com.google.gxp.compiler.cpp.CppHeaderCodeGenerator$TemplateWorker: void appendLine(java.lang.CharSequence)>("//");

        virtualinvoke r0.<com.google.gxp.compiler.cpp.CppHeaderCodeGenerator$TemplateWorker: void appendLine(java.lang.CharSequence)>("// Interface that defines a strategy for writing this GXP");

        virtualinvoke r0.<com.google.gxp.compiler.cpp.CppHeaderCodeGenerator$TemplateWorker: void appendLine(java.lang.CharSequence)>("//");

        $r3 = r0.<com.google.gxp.compiler.cpp.CppHeaderCodeGenerator$TemplateWorker: com.google.gxp.compiler.base.Template template>;

        $r4 = virtualinvoke $r3.<com.google.gxp.compiler.base.Template: java.util.List getFormalTypeParameters()>();

        virtualinvoke r0.<com.google.gxp.compiler.cpp.CppHeaderCodeGenerator$TemplateWorker: void appendCppFormalTypeParameters(boolean,java.util.List)>(1, $r4);

        virtualinvoke r0.<com.google.gxp.compiler.cpp.CppHeaderCodeGenerator$TemplateWorker: void appendLine(java.lang.CharSequence)>("class Interface {");

        virtualinvoke r0.<com.google.gxp.compiler.cpp.CppHeaderCodeGenerator$TemplateWorker: void appendLine(java.lang.CharSequence)>("public:");

        virtualinvoke r0.<com.google.gxp.compiler.cpp.CppHeaderCodeGenerator$TemplateWorker: void appendLine(com.google.gxp.compiler.alerts.SourcePosition,java.lang.CharSequence)>($r2, "virtual ~Interface() {}");

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("virtual ");

        $r7 = virtualinvoke r0.<com.google.gxp.compiler.cpp.CppHeaderCodeGenerator$TemplateWorker: java.lang.String getWriteMethodSignature(boolean,boolean)>(0, 0);

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" = 0;");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<com.google.gxp.compiler.cpp.CppHeaderCodeGenerator$TemplateWorker: void appendLine(com.google.gxp.compiler.alerts.SourcePosition,java.lang.CharSequence)>($r2, $r10);

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("virtual ");

        $r13 = virtualinvoke r0.<com.google.gxp.compiler.cpp.CppHeaderCodeGenerator$TemplateWorker: java.lang.String getGetGxpClosureMethodSignature(boolean,boolean)>(0, 0);

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" = 0;");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<com.google.gxp.compiler.cpp.CppHeaderCodeGenerator$TemplateWorker: void appendLine(com.google.gxp.compiler.alerts.SourcePosition,java.lang.CharSequence)>($r2, $r16);

        virtualinvoke r0.<com.google.gxp.compiler.cpp.CppHeaderCodeGenerator$TemplateWorker: void appendLine()>();

        virtualinvoke r0.<com.google.gxp.compiler.cpp.CppHeaderCodeGenerator$TemplateWorker: void appendExtraWriteMethods(boolean)>(0);

        virtualinvoke r0.<com.google.gxp.compiler.cpp.CppHeaderCodeGenerator$TemplateWorker: void appendLine(java.lang.CharSequence)>("};");

        return;
    }

    protected void appendInstance()
    {
        com.google.gxp.compiler.base.TemplateName$FullyQualified $r20, $r35;
        com.google.gxp.com.google.common.base.Function $r11, $r25, $r39, $r49;
        com.google.gxp.compiler.base.Parameter r43;
        boolean $z0, $z1, $z2;
        com.google.gxp.compiler.base.Constructor $r2;
        com.google.gxp.compiler.cpp.CppHeaderCodeGenerator$TemplateWorker r0;
        java.util.Set $r22;
        com.google.gxp.compiler.base.Type $r46;
        java.util.List $r3, $r6, $r9, $r24, $r38;
        java.lang.StringBuilder $r7, $r10, $r13, $r15, $r16, $r18, $r28, $r30, $r31, $r33;
        java.lang.Object[] $r45;
        java.lang.Iterable $r12, $r26, $r27, $r40, $r50;
        java.lang.String $r14, $r17, $r21, $r29, $r32, $r36, $r47, $r48;
        com.google.gxp.compiler.base.Template $r1, $r5, $r8, $r19, $r23, $r34, $r37;
        com.google.gxp.compiler.alerts.SourcePosition $r4, $r44;
        java.util.Iterator $r41;
        java.lang.Object $r42;

        r0 := @this: com.google.gxp.compiler.cpp.CppHeaderCodeGenerator$TemplateWorker;

        $r1 = r0.<com.google.gxp.compiler.cpp.CppHeaderCodeGenerator$TemplateWorker: com.google.gxp.compiler.base.Template template>;

        $r2 = virtualinvoke $r1.<com.google.gxp.compiler.base.Template: com.google.gxp.compiler.base.Constructor getConstructor()>();

        $r3 = virtualinvoke $r2.<com.google.gxp.compiler.base.Constructor: java.util.List getParameters()>();

        $r4 = virtualinvoke $r2.<com.google.gxp.compiler.base.Constructor: com.google.gxp.compiler.alerts.SourcePosition getSourcePosition()>();

        virtualinvoke r0.<com.google.gxp.compiler.cpp.CppHeaderCodeGenerator$TemplateWorker: void appendLine(java.lang.CharSequence)>("//");

        virtualinvoke r0.<com.google.gxp.compiler.cpp.CppHeaderCodeGenerator$TemplateWorker: void appendLine(java.lang.CharSequence)>("// Instantiable instance of this GXP");

        virtualinvoke r0.<com.google.gxp.compiler.cpp.CppHeaderCodeGenerator$TemplateWorker: void appendLine(java.lang.CharSequence)>("//");

        $r5 = r0.<com.google.gxp.compiler.cpp.CppHeaderCodeGenerator$TemplateWorker: com.google.gxp.compiler.base.Template template>;

        $r6 = virtualinvoke $r5.<com.google.gxp.compiler.base.Template: java.util.List getFormalTypeParameters()>();

        virtualinvoke r0.<com.google.gxp.compiler.cpp.CppHeaderCodeGenerator$TemplateWorker: void appendCppFormalTypeParameters(boolean,java.util.List)>(1, $r6);

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>(java.lang.String)>("class Instance : public Interface");

        $r8 = r0.<com.google.gxp.compiler.cpp.CppHeaderCodeGenerator$TemplateWorker: com.google.gxp.compiler.base.Template template>;

        $r9 = virtualinvoke $r8.<com.google.gxp.compiler.base.Template: java.util.List getFormalTypeParameters()>();

        virtualinvoke r0.<com.google.gxp.compiler.cpp.CppHeaderCodeGenerator$TemplateWorker: void appendCppFormalTypeParameters(java.lang.StringBuilder,boolean,java.util.List)>($r7, 0, $r9);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" {");

        virtualinvoke r0.<com.google.gxp.compiler.cpp.CppHeaderCodeGenerator$TemplateWorker: void appendLine(com.google.gxp.compiler.alerts.SourcePosition,java.lang.CharSequence)>($r4, $r7);

        virtualinvoke r0.<com.google.gxp.compiler.cpp.CppHeaderCodeGenerator$TemplateWorker: void appendLine(java.lang.CharSequence)>("public:");

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>(java.lang.String)>("Instance(");

        $r11 = r0.<com.google.gxp.compiler.cpp.CppHeaderCodeGenerator$TemplateWorker: com.google.gxp.com.google.common.base.Function parameterToCallName>;

        $r12 = staticinvoke <com.google.gxp.com.google.common.collect.Iterables: java.lang.Iterable transform(java.lang.Iterable,com.google.gxp.com.google.common.base.Function)>($r3, $r11);

        staticinvoke <com.google.gxp.com.google.common.base.Join: java.lang.Appendable join(java.lang.Appendable,java.lang.String,java.lang.Iterable)>($r10, ", ", $r12);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $z0 = interfaceinvoke $r3.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n  : ");

        $r49 = r0.<com.google.gxp.compiler.cpp.CppHeaderCodeGenerator$TemplateWorker: com.google.gxp.com.google.common.base.Function parameterToInitializer>;

        $r50 = staticinvoke <com.google.gxp.com.google.common.collect.Iterables: java.lang.Iterable transform(java.lang.Iterable,com.google.gxp.com.google.common.base.Function)>($r3, $r49);

        staticinvoke <com.google.gxp.com.google.common.base.Join: java.lang.Appendable join(java.lang.Appendable,java.lang.String,java.lang.Iterable)>($r10, ", ", $r50);

     label1:
        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" {");

        virtualinvoke r0.<com.google.gxp.compiler.cpp.CppHeaderCodeGenerator$TemplateWorker: void appendLine(java.lang.CharSequence)>($r10);

        virtualinvoke r0.<com.google.gxp.compiler.cpp.CppHeaderCodeGenerator$TemplateWorker: void appendLine(java.lang.CharSequence)>("}");

        virtualinvoke r0.<com.google.gxp.compiler.cpp.CppHeaderCodeGenerator$TemplateWorker: void appendLine()>();

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke r0.<com.google.gxp.compiler.cpp.CppHeaderCodeGenerator$TemplateWorker: java.lang.String getWriteMethodSignature(boolean,boolean)>(0, 0);

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" {");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<com.google.gxp.compiler.cpp.CppHeaderCodeGenerator$TemplateWorker: void appendLine(java.lang.CharSequence)>($r17);

        $r18 = new java.lang.StringBuilder;

        $r19 = r0.<com.google.gxp.compiler.cpp.CppHeaderCodeGenerator$TemplateWorker: com.google.gxp.compiler.base.Template template>;

        $r20 = virtualinvoke $r19.<com.google.gxp.compiler.base.Template: com.google.gxp.compiler.base.TemplateName$FullyQualified getName()>();

        $r21 = virtualinvoke r0.<com.google.gxp.compiler.cpp.CppHeaderCodeGenerator$TemplateWorker: java.lang.String getClassName(com.google.gxp.compiler.base.TemplateName)>($r20);

        specialinvoke $r18.<java.lang.StringBuilder: void <init>(java.lang.String)>($r21);

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("::Write(");

        $r22 = staticinvoke <java.util.Collections: java.util.Set singleton(java.lang.Object)>("gxp_out, gxp_context");

        $r23 = r0.<com.google.gxp.compiler.cpp.CppHeaderCodeGenerator$TemplateWorker: com.google.gxp.compiler.base.Template template>;

        $r24 = virtualinvoke $r23.<com.google.gxp.compiler.base.Template: java.util.List getAllParameters()>();

        $r25 = r0.<com.google.gxp.compiler.cpp.CppHeaderCodeGenerator$TemplateWorker: com.google.gxp.com.google.common.base.Function paramToCallName>;

        $r26 = staticinvoke <com.google.gxp.com.google.common.collect.Iterables: java.lang.Iterable transform(java.lang.Iterable,com.google.gxp.com.google.common.base.Function)>($r24, $r25);

        $r27 = staticinvoke <com.google.gxp.com.google.common.collect.Iterables: java.lang.Iterable concat(java.lang.Iterable,java.lang.Iterable)>($r22, $r26);

        staticinvoke <com.google.gxp.com.google.common.base.Join: java.lang.Appendable join(java.lang.Appendable,java.lang.String,java.lang.Iterable)>($r18, ", ", $r27);

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(");");

        virtualinvoke r0.<com.google.gxp.compiler.cpp.CppHeaderCodeGenerator$TemplateWorker: void appendLine(com.google.gxp.compiler.alerts.SourcePosition,java.lang.CharSequence)>($r4, $r18);

        virtualinvoke r0.<com.google.gxp.compiler.cpp.CppHeaderCodeGenerator$TemplateWorker: void appendLine(java.lang.CharSequence)>("}");

        virtualinvoke r0.<com.google.gxp.compiler.cpp.CppHeaderCodeGenerator$TemplateWorker: void appendLine()>();

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        $r29 = virtualinvoke r0.<com.google.gxp.compiler.cpp.CppHeaderCodeGenerator$TemplateWorker: java.lang.String getGetGxpClosureMethodSignature(boolean,boolean)>(0, 0);

        $r30 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r29);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" {");

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<com.google.gxp.compiler.cpp.CppHeaderCodeGenerator$TemplateWorker: void appendLine(com.google.gxp.compiler.alerts.SourcePosition,java.lang.CharSequence)>(null, $r32);

        $r33 = new java.lang.StringBuilder;

        specialinvoke $r33.<java.lang.StringBuilder: void <init>(java.lang.String)>("return ");

        $r34 = r0.<com.google.gxp.compiler.cpp.CppHeaderCodeGenerator$TemplateWorker: com.google.gxp.compiler.base.Template template>;

        $r35 = virtualinvoke $r34.<com.google.gxp.compiler.base.Template: com.google.gxp.compiler.base.TemplateName$FullyQualified getName()>();

        $r36 = virtualinvoke r0.<com.google.gxp.compiler.cpp.CppHeaderCodeGenerator$TemplateWorker: java.lang.String getClassName(com.google.gxp.compiler.base.TemplateName)>($r35);

        virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r36);

        virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("::GetGxpClosure(");

        $r37 = r0.<com.google.gxp.compiler.cpp.CppHeaderCodeGenerator$TemplateWorker: com.google.gxp.compiler.base.Template template>;

        $r38 = virtualinvoke $r37.<com.google.gxp.compiler.base.Template: java.util.List getAllParameters()>();

        $r39 = r0.<com.google.gxp.compiler.cpp.CppHeaderCodeGenerator$TemplateWorker: com.google.gxp.com.google.common.base.Function paramToCallName>;

        $r40 = staticinvoke <com.google.gxp.com.google.common.collect.Iterables: java.lang.Iterable transform(java.lang.Iterable,com.google.gxp.com.google.common.base.Function)>($r38, $r39);

        staticinvoke <com.google.gxp.com.google.common.base.Join: java.lang.Appendable join(java.lang.Appendable,java.lang.String,java.lang.Iterable)>($r33, ", ", $r40);

        virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(");");

        virtualinvoke r0.<com.google.gxp.compiler.cpp.CppHeaderCodeGenerator$TemplateWorker: void appendLine(com.google.gxp.compiler.alerts.SourcePosition,java.lang.CharSequence)>($r4, $r33);

        virtualinvoke r0.<com.google.gxp.compiler.cpp.CppHeaderCodeGenerator$TemplateWorker: void appendLine(java.lang.CharSequence)>("}");

        $z1 = interfaceinvoke $r3.<java.util.List: boolean isEmpty()>();

        if $z1 != 0 goto label3;

        virtualinvoke r0.<com.google.gxp.compiler.cpp.CppHeaderCodeGenerator$TemplateWorker: void appendLine(java.lang.CharSequence)>("private:");

        $r41 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z2 = interfaceinvoke $r41.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label3;

        $r42 = interfaceinvoke $r41.<java.util.Iterator: java.lang.Object next()>();

        r43 = (com.google.gxp.compiler.base.Parameter) $r42;

        $r44 = virtualinvoke r43.<com.google.gxp.compiler.base.Parameter: com.google.gxp.compiler.alerts.SourcePosition getSourcePosition()>();

        $r45 = newarray (java.lang.Object)[2];

        $r46 = virtualinvoke r43.<com.google.gxp.compiler.base.Parameter: com.google.gxp.compiler.base.Type getType()>();

        $r47 = virtualinvoke r0.<com.google.gxp.compiler.cpp.CppHeaderCodeGenerator$TemplateWorker: java.lang.String toCppType(com.google.gxp.compiler.base.Type)>($r46);

        $r45[0] = $r47;

        $r48 = virtualinvoke r43.<com.google.gxp.compiler.base.Parameter: java.lang.String getPrimaryName()>();

        $r45[1] = $r48;

        virtualinvoke r0.<com.google.gxp.compiler.cpp.CppHeaderCodeGenerator$TemplateWorker: void formatLine(com.google.gxp.compiler.alerts.SourcePosition,java.lang.String,java.lang.Object[])>($r44, "%s %s;", $r45);

        goto label2;

     label3:
        virtualinvoke r0.<com.google.gxp.compiler.cpp.CppHeaderCodeGenerator$TemplateWorker: void appendLine(java.lang.CharSequence)>("};");

        return;
    }
}
