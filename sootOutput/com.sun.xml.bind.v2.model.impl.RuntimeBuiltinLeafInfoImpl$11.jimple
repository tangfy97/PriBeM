final class com.sun.xml.bind.v2.model.impl.RuntimeBuiltinLeafInfoImpl$11 extends com.sun.xml.bind.v2.model.impl.RuntimeBuiltinLeafInfoImpl$PcdataImpl
{

    transient void <init>(java.lang.Class, javax.xml.namespace.QName[])
    {
        java.lang.Class r1;
        javax.xml.namespace.QName[] r2;
        com.sun.xml.bind.v2.model.impl.RuntimeBuiltinLeafInfoImpl$11 r0;

        r0 := @this: com.sun.xml.bind.v2.model.impl.RuntimeBuiltinLeafInfoImpl$11;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: javax.xml.namespace.QName[];

        specialinvoke r0.<com.sun.xml.bind.v2.model.impl.RuntimeBuiltinLeafInfoImpl$PcdataImpl: void <init>(java.lang.Class,javax.xml.namespace.QName[])>(r1, r2);

        return;
    }

    public javax.xml.transform.Source parse(java.lang.CharSequence) throws org.xml.sax.SAXException
    {
        byte[] $r3;
        java.lang.CharSequence r0;
        com.sun.xml.bind.v2.model.impl.RuntimeBuiltinLeafInfoImpl$11 r11;
        com.sun.xml.bind.v2.runtime.unmarshaller.Base64Data $r7;
        javax.activation.DataHandler $r8;
        javax.activation.MimeTypeParseException $r9;
        com.sun.istack.ByteArrayDataSource $r2;
        com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext $r4, $r10;
        com.sun.xml.bind.v2.util.DataSourceSource $r1, $r6;
        java.lang.String $r5;
        boolean $z0;

        r11 := @this: com.sun.xml.bind.v2.model.impl.RuntimeBuiltinLeafInfoImpl$11;

        r0 := @parameter0: java.lang.CharSequence;

     label1:
        $z0 = r0 instanceof com.sun.xml.bind.v2.runtime.unmarshaller.Base64Data;

        if $z0 == 0 goto label3;

        $r6 = new com.sun.xml.bind.v2.util.DataSourceSource;

        $r7 = (com.sun.xml.bind.v2.runtime.unmarshaller.Base64Data) r0;

        $r8 = virtualinvoke $r7.<com.sun.xml.bind.v2.runtime.unmarshaller.Base64Data: javax.activation.DataHandler getDataHandler()>();

        specialinvoke $r6.<com.sun.xml.bind.v2.util.DataSourceSource: void <init>(javax.activation.DataHandler)>($r8);

     label2:
        return $r6;

     label3:
        $r1 = new com.sun.xml.bind.v2.util.DataSourceSource;

        $r2 = new com.sun.istack.ByteArrayDataSource;

        $r3 = staticinvoke <com.sun.xml.bind.v2.model.impl.RuntimeBuiltinLeafInfoImpl: byte[] access$100(java.lang.CharSequence)>(r0);

        $r4 = staticinvoke <com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext: com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext getInstance()>();

        $r5 = virtualinvoke $r4.<com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext: java.lang.String getXMIMEContentType()>();

        specialinvoke $r2.<com.sun.istack.ByteArrayDataSource: void <init>(byte[],java.lang.String)>($r3, $r5);

        specialinvoke $r1.<com.sun.xml.bind.v2.util.DataSourceSource: void <init>(javax.activation.DataSource)>($r2);

     label4:
        return $r1;

     label5:
        $r9 := @caughtexception;

        $r10 = staticinvoke <com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext: com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext getInstance()>();

        virtualinvoke $r10.<com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext: void handleError(java.lang.Exception)>($r9);

        return null;

        catch javax.activation.MimeTypeParseException from label1 to label2 with label5;
        catch javax.activation.MimeTypeParseException from label3 to label4 with label5;
    }

    public com.sun.xml.bind.v2.runtime.unmarshaller.Base64Data print(javax.xml.transform.Source)
    {
        com.sun.xml.bind.v2.util.ByteArrayOutputStreamEx $r4;
        javax.xml.transform.Transformer $r5;
        byte[] $r19;
        javax.xml.transform.TransformerException $r20;
        com.sun.xml.bind.v2.model.impl.RuntimeBuiltinLeafInfoImpl$11 r22;
        javax.xml.transform.stream.StreamResult $r7;
        javax.xml.transform.Source r3;
        javax.activation.DataHandler $r16;
        javax.activation.MimeType $r17, r23;
        java.io.OutputStreamWriter $r8;
        com.sun.xml.bind.v2.util.DataSourceSource $r13;
        java.lang.String $r2, $r6, $r12, $r15, r24;
        boolean $z0, $z1;
        com.sun.xml.bind.v2.runtime.unmarshaller.Base64Data $r1;
        javax.activation.MimeTypeParseException $r21;
        com.sun.xml.bind.v2.runtime.XMLSerializer $r0;
        javax.activation.DataSource $r14;
        java.lang.StringBuilder $r9, $r10, $r11;
        java.io.UnsupportedEncodingException $r18;

        r22 := @this: com.sun.xml.bind.v2.model.impl.RuntimeBuiltinLeafInfoImpl$11;

        r3 := @parameter0: javax.xml.transform.Source;

        $r0 = staticinvoke <com.sun.xml.bind.v2.runtime.XMLSerializer: com.sun.xml.bind.v2.runtime.XMLSerializer getInstance()>();

        $r1 = new com.sun.xml.bind.v2.runtime.unmarshaller.Base64Data;

        specialinvoke $r1.<com.sun.xml.bind.v2.runtime.unmarshaller.Base64Data: void <init>()>();

        $r2 = virtualinvoke $r0.<com.sun.xml.bind.v2.runtime.XMLSerializer: java.lang.String getXMIMEContentType()>();

        r23 = null;

        if $r2 == null goto label04;

     label01:
        $r17 = new javax.activation.MimeType;

        specialinvoke $r17.<javax.activation.MimeType: void <init>(java.lang.String)>($r2);

        r23 = $r17;

     label02:
        goto label04;

     label03:
        $r21 := @caughtexception;

        virtualinvoke $r0.<com.sun.xml.bind.v2.runtime.XMLSerializer: boolean handleError(java.lang.Exception)>($r21);

     label04:
        $z1 = r3 instanceof com.sun.xml.bind.v2.util.DataSourceSource;

        if $z1 == 0 goto label06;

        $r13 = (com.sun.xml.bind.v2.util.DataSourceSource) r3;

        $r14 = virtualinvoke $r13.<com.sun.xml.bind.v2.util.DataSourceSource: javax.activation.DataSource getDataSource()>();

        $r15 = interfaceinvoke $r14.<javax.activation.DataSource: java.lang.String getContentType()>();

        if $r15 == null goto label06;

        if $r2 == null goto label05;

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r15);

        if $z0 == 0 goto label06;

     label05:
        $r16 = new javax.activation.DataHandler;

        specialinvoke $r16.<javax.activation.DataHandler: void <init>(javax.activation.DataSource)>($r14);

        virtualinvoke $r1.<com.sun.xml.bind.v2.runtime.unmarshaller.Base64Data: void set(javax.activation.DataHandler)>($r16);

        return $r1;

     label06:
        r24 = null;

        if r23 == null goto label07;

        r24 = virtualinvoke r23.<javax.activation.MimeType: java.lang.String getParameter(java.lang.String)>("charset");

     label07:
        if r24 != null goto label08;

        r24 = "UTF-8";

     label08:
        $r4 = new com.sun.xml.bind.v2.util.ByteArrayOutputStreamEx;

        specialinvoke $r4.<com.sun.xml.bind.v2.util.ByteArrayOutputStreamEx: void <init>()>();

        $r5 = virtualinvoke $r0.<com.sun.xml.bind.v2.runtime.XMLSerializer: javax.xml.transform.Transformer getIdentityTransformer()>();

        $r6 = virtualinvoke $r5.<javax.xml.transform.Transformer: java.lang.String getOutputProperty(java.lang.String)>("encoding");

        virtualinvoke $r5.<javax.xml.transform.Transformer: void setOutputProperty(java.lang.String,java.lang.String)>("encoding", r24);

        $r7 = new javax.xml.transform.stream.StreamResult;

        $r8 = new java.io.OutputStreamWriter;

        specialinvoke $r8.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.lang.String)>($r4, r24);

        specialinvoke $r7.<javax.xml.transform.stream.StreamResult: void <init>(java.io.Writer)>($r8);

        virtualinvoke $r5.<javax.xml.transform.Transformer: void transform(javax.xml.transform.Source,javax.xml.transform.Result)>(r3, $r7);

        virtualinvoke $r5.<javax.xml.transform.Transformer: void setOutputProperty(java.lang.String,java.lang.String)>("encoding", $r6);

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("application/xml; charset=");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r24);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r4.<com.sun.xml.bind.v2.util.ByteArrayOutputStreamEx: void set(com.sun.xml.bind.v2.runtime.unmarshaller.Base64Data,java.lang.String)>($r1, $r12);

     label09:
        return $r1;

     label10:
        $r20 := @caughtexception;

        virtualinvoke $r0.<com.sun.xml.bind.v2.runtime.XMLSerializer: boolean handleError(java.lang.Exception)>($r20);

        goto label12;

     label11:
        $r18 := @caughtexception;

        virtualinvoke $r0.<com.sun.xml.bind.v2.runtime.XMLSerializer: boolean handleError(java.lang.Exception)>($r18);

     label12:
        $r19 = newarray (byte)[0];

        virtualinvoke $r1.<com.sun.xml.bind.v2.runtime.unmarshaller.Base64Data: void set(byte[],java.lang.String)>($r19, "application/xml");

        return $r1;

        catch javax.activation.MimeTypeParseException from label01 to label02 with label03;
        catch javax.xml.transform.TransformerException from label08 to label09 with label10;
        catch java.io.UnsupportedEncodingException from label08 to label09 with label11;
    }

    public volatile com.sun.xml.bind.v2.runtime.output.Pcdata print(java.lang.Object) throws com.sun.xml.bind.api.AccessorException
    {
        com.sun.xml.bind.v2.model.impl.RuntimeBuiltinLeafInfoImpl$11 r0;
        java.lang.Object r1;
        javax.xml.transform.Source $r2;
        com.sun.xml.bind.v2.runtime.unmarshaller.Base64Data $r3;

        r0 := @this: com.sun.xml.bind.v2.model.impl.RuntimeBuiltinLeafInfoImpl$11;

        r1 := @parameter0: java.lang.Object;

        $r2 = (javax.xml.transform.Source) r1;

        $r3 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.RuntimeBuiltinLeafInfoImpl$11: com.sun.xml.bind.v2.runtime.unmarshaller.Base64Data print(javax.xml.transform.Source)>($r2);

        return $r3;
    }

    public volatile java.lang.Object parse(java.lang.CharSequence) throws com.sun.xml.bind.api.AccessorException, org.xml.sax.SAXException
    {
        javax.xml.transform.Source $r2;
        java.lang.CharSequence r1;
        com.sun.xml.bind.v2.model.impl.RuntimeBuiltinLeafInfoImpl$11 r0;

        r0 := @this: com.sun.xml.bind.v2.model.impl.RuntimeBuiltinLeafInfoImpl$11;

        r1 := @parameter0: java.lang.CharSequence;

        $r2 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.RuntimeBuiltinLeafInfoImpl$11: javax.xml.transform.Source parse(java.lang.CharSequence)>(r1);

        return $r2;
    }

    public volatile java.lang.CharSequence print(java.lang.Object) throws com.sun.xml.bind.api.AccessorException
    {
        com.sun.xml.bind.v2.model.impl.RuntimeBuiltinLeafInfoImpl$11 r0;
        java.lang.Object r1;
        javax.xml.transform.Source $r2;
        com.sun.xml.bind.v2.runtime.unmarshaller.Base64Data $r3;

        r0 := @this: com.sun.xml.bind.v2.model.impl.RuntimeBuiltinLeafInfoImpl$11;

        r1 := @parameter0: java.lang.Object;

        $r2 = (javax.xml.transform.Source) r1;

        $r3 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.RuntimeBuiltinLeafInfoImpl$11: com.sun.xml.bind.v2.runtime.unmarshaller.Base64Data print(javax.xml.transform.Source)>($r2);

        return $r3;
    }
}
