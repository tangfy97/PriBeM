public class org.codehaus.jackson.map.util.StdDateFormat extends java.text.DateFormat
{
    protected static final java.lang.String DATE_FORMAT_STR_ISO8601;
    protected static final java.lang.String DATE_FORMAT_STR_ISO8601_Z;
    protected static final java.lang.String DATE_FORMAT_STR_PLAIN;
    protected static final java.lang.String DATE_FORMAT_STR_RFC1123;
    protected static final java.lang.String[] ALL_FORMATS;
    protected static final java.text.DateFormat DATE_FORMAT_RFC1123;
    protected static final java.text.DateFormat DATE_FORMAT_ISO8601;
    protected static final java.text.DateFormat DATE_FORMAT_ISO8601_Z;
    protected static final java.text.DateFormat DATE_FORMAT_PLAIN;
    public static final org.codehaus.jackson.map.util.StdDateFormat instance;
    protected transient java.text.DateFormat _formatRFC1123;
    protected transient java.text.DateFormat _formatISO8601;
    protected transient java.text.DateFormat _formatISO8601_z;
    protected transient java.text.DateFormat _formatPlain;

    public void <init>()
    {
        org.codehaus.jackson.map.util.StdDateFormat r0;

        r0 := @this: org.codehaus.jackson.map.util.StdDateFormat;

        specialinvoke r0.<java.text.DateFormat: void <init>()>();

        return;
    }

    public org.codehaus.jackson.map.util.StdDateFormat clone()
    {
        org.codehaus.jackson.map.util.StdDateFormat $r0, r1;

        r1 := @this: org.codehaus.jackson.map.util.StdDateFormat;

        $r0 = new org.codehaus.jackson.map.util.StdDateFormat;

        specialinvoke $r0.<org.codehaus.jackson.map.util.StdDateFormat: void <init>()>();

        return $r0;
    }

    public static java.text.DateFormat getBlueprintISO8601Format()
    {
        java.text.DateFormat $r0;

        $r0 = <org.codehaus.jackson.map.util.StdDateFormat: java.text.DateFormat DATE_FORMAT_ISO8601>;

        return $r0;
    }

    public static java.text.DateFormat getISO8601Format(java.util.TimeZone)
    {
        java.util.TimeZone r3;
        java.lang.Object $r1;
        java.text.DateFormat $r0, r2;

        r3 := @parameter0: java.util.TimeZone;

        $r0 = <org.codehaus.jackson.map.util.StdDateFormat: java.text.DateFormat DATE_FORMAT_ISO8601>;

        $r1 = virtualinvoke $r0.<java.text.DateFormat: java.lang.Object clone()>();

        r2 = (java.text.DateFormat) $r1;

        virtualinvoke r2.<java.text.DateFormat: void setTimeZone(java.util.TimeZone)>(r3);

        return r2;
    }

    public static java.text.DateFormat getBlueprintRFC1123Format()
    {
        java.text.DateFormat $r0;

        $r0 = <org.codehaus.jackson.map.util.StdDateFormat: java.text.DateFormat DATE_FORMAT_RFC1123>;

        return $r0;
    }

    public static java.text.DateFormat getRFC1123Format(java.util.TimeZone)
    {
        java.util.TimeZone r3;
        java.lang.Object $r1;
        java.text.DateFormat $r0, r2;

        r3 := @parameter0: java.util.TimeZone;

        $r0 = <org.codehaus.jackson.map.util.StdDateFormat: java.text.DateFormat DATE_FORMAT_RFC1123>;

        $r1 = virtualinvoke $r0.<java.text.DateFormat: java.lang.Object clone()>();

        r2 = (java.text.DateFormat) $r1;

        virtualinvoke r2.<java.text.DateFormat: void setTimeZone(java.util.TimeZone)>(r3);

        return r2;
    }

    public java.util.Date parse(java.lang.String) throws java.text.ParseException
    {
        java.lang.Object[] $r7;
        java.util.Date $r3;
        java.text.ParsePosition $r1;
        org.codehaus.jackson.map.util.StdDateFormat r2;
        java.lang.String[] r5;
        int i0, $i1, $i2, i3;
        java.lang.String $r0, $r8, $r9, r10, r11;
        java.text.ParseException $r6;
        java.lang.StringBuilder $r4;

        r2 := @this: org.codehaus.jackson.map.util.StdDateFormat;

        r11 := @parameter0: java.lang.String;

        $r0 = virtualinvoke r11.<java.lang.String: java.lang.String trim()>();

        $r1 = new java.text.ParsePosition;

        specialinvoke $r1.<java.text.ParsePosition: void <init>(int)>(0);

        $r3 = virtualinvoke r2.<org.codehaus.jackson.map.util.StdDateFormat: java.util.Date parse(java.lang.String,java.text.ParsePosition)>($r0, $r1);

        if $r3 == null goto label1;

        return $r3;

     label1:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        r5 = <org.codehaus.jackson.map.util.StdDateFormat: java.lang.String[] ALL_FORMATS>;

        i0 = lengthof r5;

        i3 = 0;

     label2:
        if i3 >= i0 goto label5;

        r10 = r5[i3];

        $i2 = virtualinvoke $r4.<java.lang.StringBuilder: int length()>();

        if $i2 <= 0 goto label3;

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\", \"");

        goto label4;

     label3:
        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(34);

     label4:
        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r10);

        i3 = i3 + 1;

        goto label2;

     label5:
        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(34);

        $r6 = new java.text.ParseException;

        $r7 = newarray (java.lang.Object)[2];

        $r7[0] = $r0;

        $r8 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7[1] = $r8;

        $r9 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Can not parse date \"%s\": not compatible with any of standard forms (%s)", $r7);

        $i1 = virtualinvoke $r1.<java.text.ParsePosition: int getErrorIndex()>();

        specialinvoke $r6.<java.text.ParseException: void <init>(java.lang.String,int)>($r9, $i1);

        throw $r6;
    }

    public java.util.Date parse(java.lang.String, java.text.ParsePosition)
    {
        java.util.Date $r3, $r5, $r6;
        java.text.ParsePosition r2;
        org.codehaus.jackson.map.util.StdDateFormat r0;
        long $l0;
        char $c1;
        int i2, $i4, $i5, $i6;
        java.lang.String r1;
        boolean $z0, $z1;

        r0 := @this: org.codehaus.jackson.map.util.StdDateFormat;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.text.ParsePosition;

        $z0 = virtualinvoke r0.<org.codehaus.jackson.map.util.StdDateFormat: boolean looksLikeISO8601(java.lang.String)>(r1);

        if $z0 == 0 goto label1;

        $r5 = virtualinvoke r0.<org.codehaus.jackson.map.util.StdDateFormat: java.util.Date parseAsISO8601(java.lang.String,java.text.ParsePosition)>(r1, r2);

        return $r5;

     label1:
        i2 = virtualinvoke r1.<java.lang.String: int length()>();

     label2:
        $i4 = (int) -1;

        i2 = i2 + $i4;

        if i2 < 0 goto label4;

        $c1 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i2);

        $i5 = (int) $c1;

        if $i5 < 48 goto label4;

        $i6 = (int) $c1;

        if $i6 <= 57 goto label3;

        goto label4;

     label3:
        goto label2;

     label4:
        if i2 >= 0 goto label5;

        $z1 = staticinvoke <org.codehaus.jackson.io.NumberInput: boolean inLongRange(java.lang.String,boolean)>(r1, 0);

        if $z1 == 0 goto label5;

        $r6 = new java.util.Date;

        $l0 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>(r1);

        specialinvoke $r6.<java.util.Date: void <init>(long)>($l0);

        return $r6;

     label5:
        $r3 = virtualinvoke r0.<org.codehaus.jackson.map.util.StdDateFormat: java.util.Date parseAsRFC1123(java.lang.String,java.text.ParsePosition)>(r1, r2);

        return $r3;
    }

    public java.lang.StringBuffer format(java.util.Date, java.lang.StringBuffer, java.text.FieldPosition)
    {
        java.util.Date r2;
        org.codehaus.jackson.map.util.StdDateFormat r0;
        java.text.FieldPosition r4;
        java.lang.StringBuffer r3, $r6;
        java.lang.Object $r8;
        java.text.DateFormat $r1, $r5, $r7, $r9;

        r0 := @this: org.codehaus.jackson.map.util.StdDateFormat;

        r2 := @parameter0: java.util.Date;

        r3 := @parameter1: java.lang.StringBuffer;

        r4 := @parameter2: java.text.FieldPosition;

        $r1 = r0.<org.codehaus.jackson.map.util.StdDateFormat: java.text.DateFormat _formatISO8601>;

        if $r1 != null goto label1;

        $r7 = <org.codehaus.jackson.map.util.StdDateFormat: java.text.DateFormat DATE_FORMAT_ISO8601>;

        $r8 = virtualinvoke $r7.<java.text.DateFormat: java.lang.Object clone()>();

        $r9 = (java.text.DateFormat) $r8;

        r0.<org.codehaus.jackson.map.util.StdDateFormat: java.text.DateFormat _formatISO8601> = $r9;

     label1:
        $r5 = r0.<org.codehaus.jackson.map.util.StdDateFormat: java.text.DateFormat _formatISO8601>;

        $r6 = virtualinvoke $r5.<java.text.DateFormat: java.lang.StringBuffer format(java.util.Date,java.lang.StringBuffer,java.text.FieldPosition)>(r2, r3, r4);

        return $r6;
    }

    protected boolean looksLikeISO8601(java.lang.String)
    {
        org.codehaus.jackson.map.util.StdDateFormat r1;
        char $c1, $c2, $c3;
        int $i0, $i4;
        java.lang.String r0;
        boolean $z0, $z1;

        r1 := @this: org.codehaus.jackson.map.util.StdDateFormat;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 < 5 goto label1;

        $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(0);

        $z0 = staticinvoke <java.lang.Character: boolean isDigit(char)>($c1);

        if $z0 == 0 goto label1;

        $c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(3);

        $z1 = staticinvoke <java.lang.Character: boolean isDigit(char)>($c2);

        if $z1 == 0 goto label1;

        $c3 = virtualinvoke r0.<java.lang.String: char charAt(int)>(4);

        $i4 = (int) $c3;

        if $i4 != 45 goto label1;

        return 1;

     label1:
        return 0;
    }

    protected java.util.Date parseAsISO8601(java.lang.String, java.text.ParsePosition)
    {
        java.util.Date $r25;
        org.codehaus.jackson.map.util.StdDateFormat r1;
        java.text.DateFormat $r3, $r5, $r6, $r10, $r11, $r13, $r17, $r19, $r20, $r22, r24;
        boolean $z0, $z1, $z2;
        java.lang.StringBuilder $r8, $r9, $r26, $r27, $r28, $r29, $r30;
        java.text.ParsePosition r2;
        int $i0, $i1, $i3, $i4, i5, $i6, $i8, $i9, $i10, $i11, $i13, $i14, $i15, $i17, $i18, $i19, $i20, $i21;
        java.lang.String r23;
        char $c2, $c7, $c12, $c16;
        java.lang.Object $r4, $r12, $r18, $r21;

        r1 := @this: org.codehaus.jackson.map.util.StdDateFormat;

        r23 := @parameter0: java.lang.String;

        r2 := @parameter1: java.text.ParsePosition;

        $i0 = virtualinvoke r23.<java.lang.String: int length()>();

        $i1 = $i0 - 1;

        $c2 = virtualinvoke r23.<java.lang.String: char charAt(int)>($i1);

        if $i0 > 10 goto label01;

        $z1 = staticinvoke <java.lang.Character: boolean isDigit(char)>($c2);

        if $z1 == 0 goto label01;

        r24 = r1.<org.codehaus.jackson.map.util.StdDateFormat: java.text.DateFormat _formatPlain>;

        if r24 != null goto label10;

        $r20 = <org.codehaus.jackson.map.util.StdDateFormat: java.text.DateFormat DATE_FORMAT_PLAIN>;

        $r21 = virtualinvoke $r20.<java.text.DateFormat: java.lang.Object clone()>();

        $r22 = (java.text.DateFormat) $r21;

        r1.<org.codehaus.jackson.map.util.StdDateFormat: java.text.DateFormat _formatPlain> = $r22;

        r24 = $r22;

        goto label10;

     label01:
        $i17 = (int) $c2;

        if $i17 != 90 goto label03;

        r24 = r1.<org.codehaus.jackson.map.util.StdDateFormat: java.text.DateFormat _formatISO8601_z>;

        if r24 != null goto label02;

        $r17 = <org.codehaus.jackson.map.util.StdDateFormat: java.text.DateFormat DATE_FORMAT_ISO8601_Z>;

        $r18 = virtualinvoke $r17.<java.text.DateFormat: java.lang.Object clone()>();

        $r19 = (java.text.DateFormat) $r18;

        r1.<org.codehaus.jackson.map.util.StdDateFormat: java.text.DateFormat _formatISO8601_z> = $r19;

        r24 = $r19;

     label02:
        $i11 = $i0 - 4;

        $c12 = virtualinvoke r23.<java.lang.String: char charAt(int)>($i11);

        $i18 = (int) $c12;

        if $i18 != 58 goto label10;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>(java.lang.String)>(r23);

        $i13 = $i0 - 1;

        virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder insert(int,java.lang.String)>($i13, ".000");

        r23 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label10;

     label03:
        $z0 = staticinvoke <org.codehaus.jackson.map.util.StdDateFormat: boolean hasTimeZone(java.lang.String)>(r23);

        if $z0 == 0 goto label08;

        $i6 = $i0 - 3;

        $c7 = virtualinvoke r23.<java.lang.String: char charAt(int)>($i6);

        $i19 = (int) $c7;

        if $i19 != 58 goto label04;

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>(java.lang.String)>(r23);

        $i10 = $i0 - 3;

        $i9 = $i0 - 2;

        virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder delete(int,int)>($i10, $i9);

        r23 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label06;

     label04:
        $i20 = (int) $c7;

        if $i20 == 43 goto label05;

        $i21 = (int) $c7;

        if $i21 != 45 goto label06;

     label05:
        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r23);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("00");

        r23 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

     label06:
        $i14 = virtualinvoke r23.<java.lang.String: int length()>();

        $i15 = $i14 - 9;

        $c16 = virtualinvoke r23.<java.lang.String: char charAt(int)>($i15);

        $z2 = staticinvoke <java.lang.Character: boolean isDigit(char)>($c16);

        if $z2 == 0 goto label07;

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>(java.lang.String)>(r23);

        $i8 = $i14 - 5;

        virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder insert(int,java.lang.String)>($i8, ".000");

        r23 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

     label07:
        r24 = r1.<org.codehaus.jackson.map.util.StdDateFormat: java.text.DateFormat _formatISO8601>;

        $r10 = r1.<org.codehaus.jackson.map.util.StdDateFormat: java.text.DateFormat _formatISO8601>;

        if $r10 != null goto label10;

        $r11 = <org.codehaus.jackson.map.util.StdDateFormat: java.text.DateFormat DATE_FORMAT_ISO8601>;

        $r12 = virtualinvoke $r11.<java.text.DateFormat: java.lang.Object clone()>();

        $r13 = (java.text.DateFormat) $r12;

        r1.<org.codehaus.jackson.map.util.StdDateFormat: java.text.DateFormat _formatISO8601> = $r13;

        r24 = $r13;

        goto label10;

     label08:
        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>(java.lang.String)>(r23);

        $i3 = virtualinvoke r23.<java.lang.String: int lastIndexOf(int)>(84);

        $i4 = $i0 - $i3;

        i5 = $i4 - 1;

        if i5 > 8 goto label09;

        virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".000");

     label09:
        virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(90);

        r23 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = r1.<org.codehaus.jackson.map.util.StdDateFormat: java.text.DateFormat _formatISO8601_z>;

        r24 = $r6;

        if $r6 != null goto label10;

        $r3 = <org.codehaus.jackson.map.util.StdDateFormat: java.text.DateFormat DATE_FORMAT_ISO8601_Z>;

        $r4 = virtualinvoke $r3.<java.text.DateFormat: java.lang.Object clone()>();

        $r5 = (java.text.DateFormat) $r4;

        r1.<org.codehaus.jackson.map.util.StdDateFormat: java.text.DateFormat _formatISO8601_z> = $r5;

        r24 = $r5;

     label10:
        $r25 = virtualinvoke r24.<java.text.DateFormat: java.util.Date parse(java.lang.String,java.text.ParsePosition)>(r23, r2);

        return $r25;
    }

    protected java.util.Date parseAsRFC1123(java.lang.String, java.text.ParsePosition)
    {
        java.util.Date $r5;
        java.text.ParsePosition r3;
        org.codehaus.jackson.map.util.StdDateFormat r0;
        java.lang.Object $r7;
        java.lang.String r2;
        java.text.DateFormat $r1, $r4, $r6, $r8;

        r0 := @this: org.codehaus.jackson.map.util.StdDateFormat;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.text.ParsePosition;

        $r1 = r0.<org.codehaus.jackson.map.util.StdDateFormat: java.text.DateFormat _formatRFC1123>;

        if $r1 != null goto label1;

        $r6 = <org.codehaus.jackson.map.util.StdDateFormat: java.text.DateFormat DATE_FORMAT_RFC1123>;

        $r7 = virtualinvoke $r6.<java.text.DateFormat: java.lang.Object clone()>();

        $r8 = (java.text.DateFormat) $r7;

        r0.<org.codehaus.jackson.map.util.StdDateFormat: java.text.DateFormat _formatRFC1123> = $r8;

     label1:
        $r4 = r0.<org.codehaus.jackson.map.util.StdDateFormat: java.text.DateFormat _formatRFC1123>;

        $r5 = virtualinvoke $r4.<java.text.DateFormat: java.util.Date parse(java.lang.String,java.text.ParsePosition)>(r2, r3);

        return $r5;
    }

    private static final boolean hasTimeZone(java.lang.String)
    {
        char $c2, $c4, $c6;
        int $i0, $i1, $i3, $i5, $i7, $i8, $i9, $i10, $i11, $i12;
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 < 6 goto label6;

        $i1 = $i0 - 6;

        $c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i1);

        $i7 = (int) $c2;

        if $i7 == 43 goto label1;

        $i8 = (int) $c2;

        if $i8 != 45 goto label2;

     label1:
        return 1;

     label2:
        $i3 = $i0 - 5;

        $c4 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i3);

        $i9 = (int) $c4;

        if $i9 == 43 goto label3;

        $i10 = (int) $c4;

        if $i10 != 45 goto label4;

     label3:
        return 1;

     label4:
        $i5 = $i0 - 3;

        $c6 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i5);

        $i11 = (int) $c6;

        if $i11 == 43 goto label5;

        $i12 = (int) $c6;

        if $i12 != 45 goto label6;

     label5:
        return 1;

     label6:
        return 0;
    }

    public volatile java.lang.Object clone()
    {
        org.codehaus.jackson.map.util.StdDateFormat r0, $r1;

        r0 := @this: org.codehaus.jackson.map.util.StdDateFormat;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.map.util.StdDateFormat: org.codehaus.jackson.map.util.StdDateFormat clone()>();

        return $r1;
    }

    static void <clinit>()
    {
        java.util.TimeZone $r1;
        java.text.SimpleDateFormat $r2, $r4, $r6, $r8;
        org.codehaus.jackson.map.util.StdDateFormat $r10;
        java.lang.String[] $r0;
        java.text.DateFormat $r3, $r5, $r7, $r9;

        <org.codehaus.jackson.map.util.StdDateFormat: java.lang.String DATE_FORMAT_STR_RFC1123> = "EEE, dd MMM yyyy HH:mm:ss zzz";

        <org.codehaus.jackson.map.util.StdDateFormat: java.lang.String DATE_FORMAT_STR_PLAIN> = "yyyy-MM-dd";

        <org.codehaus.jackson.map.util.StdDateFormat: java.lang.String DATE_FORMAT_STR_ISO8601_Z> = "yyyy-MM-dd\'T\'HH:mm:ss.SSS\'Z\'";

        <org.codehaus.jackson.map.util.StdDateFormat: java.lang.String DATE_FORMAT_STR_ISO8601> = "yyyy-MM-dd\'T\'HH:mm:ss.SSSZ";

        $r0 = newarray (java.lang.String)[4];

        $r0[0] = "yyyy-MM-dd\'T\'HH:mm:ss.SSSZ";

        $r0[1] = "yyyy-MM-dd\'T\'HH:mm:ss.SSS\'Z\'";

        $r0[2] = "EEE, dd MMM yyyy HH:mm:ss zzz";

        $r0[3] = "yyyy-MM-dd";

        <org.codehaus.jackson.map.util.StdDateFormat: java.lang.String[] ALL_FORMATS> = $r0;

        $r1 = staticinvoke <java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>("GMT");

        $r2 = new java.text.SimpleDateFormat;

        specialinvoke $r2.<java.text.SimpleDateFormat: void <init>(java.lang.String)>("EEE, dd MMM yyyy HH:mm:ss zzz");

        <org.codehaus.jackson.map.util.StdDateFormat: java.text.DateFormat DATE_FORMAT_RFC1123> = $r2;

        $r3 = <org.codehaus.jackson.map.util.StdDateFormat: java.text.DateFormat DATE_FORMAT_RFC1123>;

        virtualinvoke $r3.<java.text.DateFormat: void setTimeZone(java.util.TimeZone)>($r1);

        $r4 = new java.text.SimpleDateFormat;

        specialinvoke $r4.<java.text.SimpleDateFormat: void <init>(java.lang.String)>("yyyy-MM-dd\'T\'HH:mm:ss.SSSZ");

        <org.codehaus.jackson.map.util.StdDateFormat: java.text.DateFormat DATE_FORMAT_ISO8601> = $r4;

        $r5 = <org.codehaus.jackson.map.util.StdDateFormat: java.text.DateFormat DATE_FORMAT_ISO8601>;

        virtualinvoke $r5.<java.text.DateFormat: void setTimeZone(java.util.TimeZone)>($r1);

        $r6 = new java.text.SimpleDateFormat;

        specialinvoke $r6.<java.text.SimpleDateFormat: void <init>(java.lang.String)>("yyyy-MM-dd\'T\'HH:mm:ss.SSS\'Z\'");

        <org.codehaus.jackson.map.util.StdDateFormat: java.text.DateFormat DATE_FORMAT_ISO8601_Z> = $r6;

        $r7 = <org.codehaus.jackson.map.util.StdDateFormat: java.text.DateFormat DATE_FORMAT_ISO8601_Z>;

        virtualinvoke $r7.<java.text.DateFormat: void setTimeZone(java.util.TimeZone)>($r1);

        $r8 = new java.text.SimpleDateFormat;

        specialinvoke $r8.<java.text.SimpleDateFormat: void <init>(java.lang.String)>("yyyy-MM-dd");

        <org.codehaus.jackson.map.util.StdDateFormat: java.text.DateFormat DATE_FORMAT_PLAIN> = $r8;

        $r9 = <org.codehaus.jackson.map.util.StdDateFormat: java.text.DateFormat DATE_FORMAT_PLAIN>;

        virtualinvoke $r9.<java.text.DateFormat: void setTimeZone(java.util.TimeZone)>($r1);

        $r10 = new org.codehaus.jackson.map.util.StdDateFormat;

        specialinvoke $r10.<org.codehaus.jackson.map.util.StdDateFormat: void <init>()>();

        <org.codehaus.jackson.map.util.StdDateFormat: org.codehaus.jackson.map.util.StdDateFormat instance> = $r10;

        return;
    }
}
