final class test.translator.WriteCNF extends java.lang.Object implements kodkod.engine.satlab.SATSolver
{
    private final java.io.RandomAccessFile cnf;
    private final java.lang.StringBuilder buffer;
    private static final int capacity;
    private int vars;
    private int clauses;

    public static final kodkod.engine.satlab.SATFactory factory(java.lang.String)
    {
        java.lang.String r1;
        test.translator.WriteCNF$1 $r0;

        r1 := @parameter0: java.lang.String;

        $r0 = new test.translator.WriteCNF$1;

        specialinvoke $r0.<test.translator.WriteCNF$1: void <init>(java.lang.String)>(r1);

        return $r0;
    }

    private void <init>(java.lang.String)
    {
        java.io.RandomAccessFile $r3, $r10;
        java.lang.RuntimeException $r12;
        java.lang.Exception $r8;
        int $i0, $i1, i2, $i4;
        test.translator.WriteCNF r0;
        java.lang.StringBuilder $r6, $r7, $r11;
        java.lang.String r2, $r5;

        r0 := @this: test.translator.WriteCNF;

        r2 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<test.translator.WriteCNF: int vars> = 0;

        r0.<test.translator.WriteCNF: int clauses> = 0;

     label1:
        $r10 = new java.io.RandomAccessFile;

        specialinvoke $r10.<java.io.RandomAccessFile: void <init>(java.lang.String,java.lang.String)>(r2, "rw");

        r0.<test.translator.WriteCNF: java.io.RandomAccessFile cnf> = $r10;

        $r3 = r0.<test.translator.WriteCNF: java.io.RandomAccessFile cnf>;

        virtualinvoke $r3.<java.io.RandomAccessFile: void setLength(long)>(0L);

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>(int)>(8192);

        r0.<test.translator.WriteCNF: java.lang.StringBuilder buffer> = $r11;

        $r5 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(2147483647);

        $i0 = virtualinvoke $r5.<java.lang.String: int length()>();

        $i1 = $i0 * 2;

        i2 = $i1 + 8;

        goto label3;

     label2:
        $r6 = r0.<test.translator.WriteCNF: java.lang.StringBuilder buffer>;

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

        $i4 = (int) -1;

        i2 = i2 + $i4;

     label3:
        if i2 > 0 goto label2;

        $r7 = r0.<test.translator.WriteCNF: java.lang.StringBuilder buffer>;

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);

     label4:
        goto label6;

     label5:
        $r8 := @caughtexception;

        $r12 = new java.lang.RuntimeException;

        specialinvoke $r12.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("WriteCNF failed.", $r8);

        throw $r12;

     label6:
        return;

        catch java.lang.Exception from label1 to label4 with label5;
    }

    private void flush()
    {
        java.io.RandomAccessFile $r2;
        test.translator.WriteCNF r0;
        java.lang.StringBuilder $r1, $r4;
        java.io.IOException $r5;
        java.lang.String $r3;
        java.lang.RuntimeException $r6;

        r0 := @this: test.translator.WriteCNF;

     label1:
        $r2 = r0.<test.translator.WriteCNF: java.io.RandomAccessFile cnf>;

        $r1 = r0.<test.translator.WriteCNF: java.lang.StringBuilder buffer>;

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<java.io.RandomAccessFile: void writeBytes(java.lang.String)>($r3);

        $r4 = r0.<test.translator.WriteCNF: java.lang.StringBuilder buffer>;

        virtualinvoke $r4.<java.lang.StringBuilder: void setLength(int)>(0);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        $r6 = new java.lang.RuntimeException;

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("WriteCNF failed.", $r5);

        throw $r6;

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    protected void finalize() throws java.lang.Throwable
    {
        test.translator.WriteCNF r0;

        r0 := @this: test.translator.WriteCNF;

        specialinvoke r0.<java.lang.Object: void finalize()>();

        virtualinvoke r0.<test.translator.WriteCNF: void free()>();

        return;
    }

    public void free()
    {
        test.translator.WriteCNF r0;
        java.io.RandomAccessFile $r1;

        r0 := @this: test.translator.WriteCNF;

        $r1 = r0.<test.translator.WriteCNF: java.io.RandomAccessFile cnf>;

        staticinvoke <minalloy.Util: boolean close(java.io.Closeable)>($r1);

        return;
    }

    public void addVariables(int)
    {
        int i0, $i1, $i2;
        test.translator.WriteCNF r0;

        r0 := @this: test.translator.WriteCNF;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        $i1 = r0.<test.translator.WriteCNF: int vars>;

        $i2 = $i1 + i0;

        r0.<test.translator.WriteCNF: int vars> = $i2;

     label1:
        return;
    }

    public boolean addClause(int[])
    {
        int[] r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6;
        test.translator.WriteCNF r1;
        java.lang.StringBuilder $r2, $r3, $r4, $r5;

        r1 := @this: test.translator.WriteCNF;

        r0 := @parameter0: int[];

        $i0 = lengthof r0;

        if $i0 <= 0 goto label4;

        $i1 = r1.<test.translator.WriteCNF: int clauses>;

        $i2 = $i1 + 1;

        r1.<test.translator.WriteCNF: int clauses> = $i2;

        $r2 = r1.<test.translator.WriteCNF: java.lang.StringBuilder buffer>;

        $i3 = virtualinvoke $r2.<java.lang.StringBuilder: int length()>();

        if $i3 <= 8192 goto label1;

        specialinvoke r1.<test.translator.WriteCNF: void flush()>();

     label1:
        i6 = 0;

        goto label3;

     label2:
        $r3 = r1.<test.translator.WriteCNF: java.lang.StringBuilder buffer>;

        $i5 = r0[i6];

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

        i6 = i6 + 1;

     label3:
        $i4 = lengthof r0;

        if i6 < $i4 goto label2;

        $r5 = r1.<test.translator.WriteCNF: java.lang.StringBuilder buffer>;

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("0\n");

        return 1;

     label4:
        return 0;
    }

    public int numberOfVariables()
    {
        int $i0;
        test.translator.WriteCNF r0;

        r0 := @this: test.translator.WriteCNF;

        $i0 = r0.<test.translator.WriteCNF: int vars>;

        return $i0;
    }

    public int numberOfClauses()
    {
        int $i0;
        test.translator.WriteCNF r0;

        r0 := @this: test.translator.WriteCNF;

        $i0 = r0.<test.translator.WriteCNF: int clauses>;

        return $i0;
    }

    public boolean solve()
    {
        java.io.RandomAccessFile $r1, $r3, $r8;
        java.lang.RuntimeException $r11;
        java.lang.Exception $r10;
        int $i0, $i1;
        test.translator.WriteCNF r0;
        java.lang.StringBuilder $r2, $r4, $r5, $r6;
        test.translator.WriteCNF$WriteCNFCompleted $r9;
        java.lang.String $r7;

        r0 := @this: test.translator.WriteCNF;

     label1:
        specialinvoke r0.<test.translator.WriteCNF: void flush()>();

        $r1 = r0.<test.translator.WriteCNF: java.io.RandomAccessFile cnf>;

        virtualinvoke $r1.<java.io.RandomAccessFile: void seek(long)>(0L);

        $r3 = r0.<test.translator.WriteCNF: java.io.RandomAccessFile cnf>;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>("p cnf ");

        $i0 = r0.<test.translator.WriteCNF: int vars>;

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $i1 = r0.<test.translator.WriteCNF: int clauses>;

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r3.<java.io.RandomAccessFile: void writeBytes(java.lang.String)>($r7);

        $r8 = r0.<test.translator.WriteCNF: java.io.RandomAccessFile cnf>;

        virtualinvoke $r8.<java.io.RandomAccessFile: void close()>();

     label2:
        goto label4;

     label3:
        $r10 := @caughtexception;

        $r11 = new java.lang.RuntimeException;

        specialinvoke $r11.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("WriteCNF failed.", $r10);

        throw $r11;

     label4:
        $r9 = new test.translator.WriteCNF$WriteCNFCompleted;

        specialinvoke $r9.<test.translator.WriteCNF$WriteCNFCompleted: void <init>()>();

        throw $r9;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public boolean valueOf(int)
    {
        int i0;
        java.lang.IllegalStateException $r0;
        test.translator.WriteCNF r1;

        r1 := @this: test.translator.WriteCNF;

        i0 := @parameter0: int;

        $r0 = new java.lang.IllegalStateException;

        specialinvoke $r0.<java.lang.IllegalStateException: void <init>(java.lang.String)>("This solver just writes the CNF without solving them.");

        throw $r0;
    }

    void <init>(java.lang.String, test.translator.WriteCNF)
    {
        test.translator.WriteCNF r0, r2;
        java.lang.String r1;

        r0 := @this: test.translator.WriteCNF;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: test.translator.WriteCNF;

        specialinvoke r0.<test.translator.WriteCNF: void <init>(java.lang.String)>(r1);

        return;
    }

    public static void <clinit>()
    {
        <test.translator.WriteCNF: int capacity> = 8192;

        return;
    }
}
