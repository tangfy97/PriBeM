class org.apache.batik.ext.awt.image.codec.imageio.AbstractImageIORegistryEntry$1 extends java.lang.Thread
{
    private final java.io.InputStream val$is;
    private final org.apache.batik.ext.awt.image.renderable.DeferRable val$dr;
    private final java.lang.String val$errCode;
    private final java.lang.Object[] val$errParam;
    private final org.apache.batik.ext.awt.image.codec.imageio.AbstractImageIORegistryEntry this$0;

    void <init>(org.apache.batik.ext.awt.image.codec.imageio.AbstractImageIORegistryEntry, java.io.InputStream, org.apache.batik.ext.awt.image.renderable.DeferRable, java.lang.String, java.lang.Object[])
    {
        org.apache.batik.ext.awt.image.renderable.DeferRable r3;
        java.lang.Object[] r5;
        org.apache.batik.ext.awt.image.codec.imageio.AbstractImageIORegistryEntry$1 r0;
        org.apache.batik.ext.awt.image.codec.imageio.AbstractImageIORegistryEntry r1;
        java.lang.String r4;
        java.io.InputStream r2;

        r0 := @this: org.apache.batik.ext.awt.image.codec.imageio.AbstractImageIORegistryEntry$1;

        r1 := @parameter0: org.apache.batik.ext.awt.image.codec.imageio.AbstractImageIORegistryEntry;

        r2 := @parameter1: java.io.InputStream;

        r3 := @parameter2: org.apache.batik.ext.awt.image.renderable.DeferRable;

        r4 := @parameter3: java.lang.String;

        r5 := @parameter4: java.lang.Object[];

        specialinvoke r0.<java.lang.Thread: void <init>()>();

        r0.<org.apache.batik.ext.awt.image.codec.imageio.AbstractImageIORegistryEntry$1: org.apache.batik.ext.awt.image.codec.imageio.AbstractImageIORegistryEntry this$0> = r1;

        r0.<org.apache.batik.ext.awt.image.codec.imageio.AbstractImageIORegistryEntry$1: java.io.InputStream val$is> = r2;

        r0.<org.apache.batik.ext.awt.image.codec.imageio.AbstractImageIORegistryEntry$1: org.apache.batik.ext.awt.image.renderable.DeferRable val$dr> = r3;

        r0.<org.apache.batik.ext.awt.image.codec.imageio.AbstractImageIORegistryEntry$1: java.lang.String val$errCode> = r4;

        r0.<org.apache.batik.ext.awt.image.codec.imageio.AbstractImageIORegistryEntry$1: java.lang.Object[] val$errParam> = r5;

        return;
    }

    public void run()
    {
        org.apache.batik.ext.awt.image.codec.imageio.AbstractImageIORegistryEntry$1 r0;
        org.apache.batik.ext.awt.image.rendered.FormatRed $r15;
        java.awt.geom.Rectangle2D$Double $r10;
        boolean $z0, $z1;
        org.apache.batik.ext.awt.image.renderable.DeferRable $r11, $r40, $r46;
        java.awt.image.BufferedImage $r12, $r20;
        org.apache.batik.ext.awt.image.renderable.RedRable $r22;
        org.apache.batik.ext.awt.image.codec.imageio.AbstractImageIORegistryEntry $r1, $r26, $r34, $r38, $r44;
        org.apache.batik.ext.awt.image.renderable.Filter $r39, r45;
        javax.imageio.stream.ImageInputStream $r9;
        java.lang.ThreadDeath $r35;
        java.util.List $r2;
        org.apache.batik.ext.awt.image.rendered.CachableRed $r13, $r21;
        java.lang.Throwable $r31;
        java.lang.Object[] $r32, $r36, $r42;
        java.lang.StringBuffer $r24, $r25, $r28, $r29;
        int $i0, $i1;
        java.awt.image.Raster $r17;
        java.lang.String $r4, $r27, $r30, $r33, $r37, $r43;
        double $d0, $d1;
        java.lang.UnsupportedOperationException $r23;
        javax.imageio.ImageReader r7;
        java.util.Iterator $r5;
        java.io.IOException $r41;
        java.awt.image.ColorModel $r16, $r19;
        java.lang.Object $r3, $r6;
        java.awt.image.WritableRaster r18;
        org.apache.batik.ext.awt.image.rendered.Any2sRGBRed $r14;
        java.io.InputStream $r8;

        r0 := @this: org.apache.batik.ext.awt.image.codec.imageio.AbstractImageIORegistryEntry$1;

     label1:
        $r1 = r0.<org.apache.batik.ext.awt.image.codec.imageio.AbstractImageIORegistryEntry$1: org.apache.batik.ext.awt.image.codec.imageio.AbstractImageIORegistryEntry this$0>;

        $r2 = virtualinvoke $r1.<org.apache.batik.ext.awt.image.codec.imageio.AbstractImageIORegistryEntry: java.util.List getMimeTypes()>();

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(0);

        $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>();

        $r5 = staticinvoke <javax.imageio.ImageIO: java.util.Iterator getImageReadersByMIMEType(java.lang.String)>($r4);

        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label2;

        $r23 = new java.lang.UnsupportedOperationException;

        $r24 = new java.lang.StringBuffer;

        specialinvoke $r24.<java.lang.StringBuffer: void <init>()>();

        $r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("No image reader for ");

        $r26 = r0.<org.apache.batik.ext.awt.image.codec.imageio.AbstractImageIORegistryEntry$1: org.apache.batik.ext.awt.image.codec.imageio.AbstractImageIORegistryEntry this$0>;

        $r27 = virtualinvoke $r26.<org.apache.batik.ext.awt.image.codec.imageio.AbstractImageIORegistryEntry: java.lang.String getFormatName()>();

        $r28 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r27);

        $r29 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" available!");

        $r30 = virtualinvoke $r29.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r23.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r30);

        throw $r23;

     label2:
        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (javax.imageio.ImageReader) $r6;

        $r8 = r0.<org.apache.batik.ext.awt.image.codec.imageio.AbstractImageIORegistryEntry$1: java.io.InputStream val$is>;

        $r9 = staticinvoke <javax.imageio.ImageIO: javax.imageio.stream.ImageInputStream createImageInputStream(java.lang.Object)>($r8);

        virtualinvoke r7.<javax.imageio.ImageReader: void setInput(java.lang.Object,boolean)>($r9, 1);

        $r11 = r0.<org.apache.batik.ext.awt.image.codec.imageio.AbstractImageIORegistryEntry$1: org.apache.batik.ext.awt.image.renderable.DeferRable val$dr>;

        $r10 = new java.awt.geom.Rectangle2D$Double;

        $i0 = virtualinvoke r7.<javax.imageio.ImageReader: int getWidth(int)>(0);

        $d0 = (double) $i0;

        $i1 = virtualinvoke r7.<javax.imageio.ImageReader: int getHeight(int)>(0);

        $d1 = (double) $i1;

        specialinvoke $r10.<java.awt.geom.Rectangle2D$Double: void <init>(double,double,double,double)>(0.0, 0.0, $d0, $d1);

        virtualinvoke $r11.<org.apache.batik.ext.awt.image.renderable.DeferRable: void setBounds(java.awt.geom.Rectangle2D)>($r10);

        $r12 = virtualinvoke r7.<javax.imageio.ImageReader: java.awt.image.BufferedImage read(int)>(0);

        $r13 = staticinvoke <org.apache.batik.ext.awt.image.GraphicsUtil: org.apache.batik.ext.awt.image.rendered.CachableRed wrap(java.awt.image.RenderedImage)>($r12);

        $r14 = new org.apache.batik.ext.awt.image.rendered.Any2sRGBRed;

        specialinvoke $r14.<org.apache.batik.ext.awt.image.rendered.Any2sRGBRed: void <init>(org.apache.batik.ext.awt.image.rendered.CachableRed)>($r13);

        $r15 = new org.apache.batik.ext.awt.image.rendered.FormatRed;

        $r16 = <org.apache.batik.ext.awt.image.GraphicsUtil: java.awt.image.ColorModel sRGB_Unpre>;

        specialinvoke $r15.<org.apache.batik.ext.awt.image.rendered.FormatRed: void <init>(org.apache.batik.ext.awt.image.rendered.CachableRed,java.awt.image.ColorModel)>($r14, $r16);

        $r17 = interfaceinvoke $r15.<org.apache.batik.ext.awt.image.rendered.CachableRed: java.awt.image.Raster getData()>();

        r18 = (java.awt.image.WritableRaster) $r17;

        $r19 = interfaceinvoke $r15.<org.apache.batik.ext.awt.image.rendered.CachableRed: java.awt.image.ColorModel getColorModel()>();

        $r20 = new java.awt.image.BufferedImage;

        $z1 = virtualinvoke $r19.<java.awt.image.ColorModel: boolean isAlphaPremultiplied()>();

        specialinvoke $r20.<java.awt.image.BufferedImage: void <init>(java.awt.image.ColorModel,java.awt.image.WritableRaster,boolean,java.util.Hashtable)>($r19, r18, $z1, null);

        $r21 = staticinvoke <org.apache.batik.ext.awt.image.GraphicsUtil: org.apache.batik.ext.awt.image.rendered.CachableRed wrap(java.awt.image.RenderedImage)>($r20);

        $r22 = new org.apache.batik.ext.awt.image.renderable.RedRable;

        specialinvoke $r22.<org.apache.batik.ext.awt.image.renderable.RedRable: void <init>(org.apache.batik.ext.awt.image.rendered.CachableRed)>($r21);

        r45 = $r22;

     label3:
        goto label7;

     label4:
        $r41 := @caughtexception;

        $r44 = r0.<org.apache.batik.ext.awt.image.codec.imageio.AbstractImageIORegistryEntry$1: org.apache.batik.ext.awt.image.codec.imageio.AbstractImageIORegistryEntry this$0>;

        $r43 = r0.<org.apache.batik.ext.awt.image.codec.imageio.AbstractImageIORegistryEntry$1: java.lang.String val$errCode>;

        $r42 = r0.<org.apache.batik.ext.awt.image.codec.imageio.AbstractImageIORegistryEntry$1: java.lang.Object[] val$errParam>;

        r45 = staticinvoke <org.apache.batik.ext.awt.image.spi.ImageTagRegistry: org.apache.batik.ext.awt.image.renderable.Filter getBrokenLinkImage(java.lang.Object,java.lang.String,java.lang.Object[])>($r44, $r43, $r42);

        goto label7;

     label5:
        $r35 := @caughtexception;

        $r38 = r0.<org.apache.batik.ext.awt.image.codec.imageio.AbstractImageIORegistryEntry$1: org.apache.batik.ext.awt.image.codec.imageio.AbstractImageIORegistryEntry this$0>;

        $r37 = r0.<org.apache.batik.ext.awt.image.codec.imageio.AbstractImageIORegistryEntry$1: java.lang.String val$errCode>;

        $r36 = r0.<org.apache.batik.ext.awt.image.codec.imageio.AbstractImageIORegistryEntry$1: java.lang.Object[] val$errParam>;

        $r39 = staticinvoke <org.apache.batik.ext.awt.image.spi.ImageTagRegistry: org.apache.batik.ext.awt.image.renderable.Filter getBrokenLinkImage(java.lang.Object,java.lang.String,java.lang.Object[])>($r38, $r37, $r36);

        $r40 = r0.<org.apache.batik.ext.awt.image.codec.imageio.AbstractImageIORegistryEntry$1: org.apache.batik.ext.awt.image.renderable.DeferRable val$dr>;

        virtualinvoke $r40.<org.apache.batik.ext.awt.image.renderable.DeferRable: void setSource(org.apache.batik.ext.awt.image.renderable.Filter)>($r39);

        throw $r35;

     label6:
        $r31 := @caughtexception;

        $r34 = r0.<org.apache.batik.ext.awt.image.codec.imageio.AbstractImageIORegistryEntry$1: org.apache.batik.ext.awt.image.codec.imageio.AbstractImageIORegistryEntry this$0>;

        $r33 = r0.<org.apache.batik.ext.awt.image.codec.imageio.AbstractImageIORegistryEntry$1: java.lang.String val$errCode>;

        $r32 = r0.<org.apache.batik.ext.awt.image.codec.imageio.AbstractImageIORegistryEntry$1: java.lang.Object[] val$errParam>;

        r45 = staticinvoke <org.apache.batik.ext.awt.image.spi.ImageTagRegistry: org.apache.batik.ext.awt.image.renderable.Filter getBrokenLinkImage(java.lang.Object,java.lang.String,java.lang.Object[])>($r34, $r33, $r32);

     label7:
        $r46 = r0.<org.apache.batik.ext.awt.image.codec.imageio.AbstractImageIORegistryEntry$1: org.apache.batik.ext.awt.image.renderable.DeferRable val$dr>;

        virtualinvoke $r46.<org.apache.batik.ext.awt.image.renderable.DeferRable: void setSource(org.apache.batik.ext.awt.image.renderable.Filter)>(r45);

        return;

        catch java.io.IOException from label1 to label3 with label4;
        catch java.lang.ThreadDeath from label1 to label3 with label5;
        catch java.lang.Throwable from label1 to label3 with label6;
    }
}
