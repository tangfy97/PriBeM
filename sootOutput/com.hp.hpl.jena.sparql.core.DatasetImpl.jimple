public class com.hp.hpl.jena.sparql.core.DatasetImpl extends java.lang.Object implements com.hp.hpl.jena.query.Dataset
{
    protected com.hp.hpl.jena.sparql.core.DatasetGraph dsg;
    private com.hp.hpl.jena.sparql.core.Transactional transactional;
    private org.apache.jena.atlas.lib.Cache cache;
    private java.lang.Object internalLock;

    protected void <init>(com.hp.hpl.jena.sparql.core.DatasetGraph)
    {
        com.hp.hpl.jena.sparql.core.Transactional $r4;
        org.apache.jena.atlas.lib.Cache $r1;
        com.hp.hpl.jena.sparql.core.DatasetImpl r0;
        java.lang.Object $r2;
        com.hp.hpl.jena.sparql.core.DatasetGraph r3;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.core.DatasetImpl;

        r3 := @parameter0: com.hp.hpl.jena.sparql.core.DatasetGraph;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.core.DatasetImpl: com.hp.hpl.jena.sparql.core.DatasetGraph dsg> = null;

        r0.<com.hp.hpl.jena.sparql.core.DatasetImpl: com.hp.hpl.jena.sparql.core.Transactional transactional> = null;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.core.DatasetImpl: org.apache.jena.atlas.lib.Cache createCache()>();

        r0.<com.hp.hpl.jena.sparql.core.DatasetImpl: org.apache.jena.atlas.lib.Cache cache> = $r1;

        $r2 = new java.lang.Object;

        specialinvoke $r2.<java.lang.Object: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.core.DatasetImpl: java.lang.Object internalLock> = $r2;

        r0.<com.hp.hpl.jena.sparql.core.DatasetImpl: com.hp.hpl.jena.sparql.core.DatasetGraph dsg> = r3;

        $z0 = r3 instanceof com.hp.hpl.jena.sparql.core.Transactional;

        if $z0 == 0 goto label1;

        $r4 = (com.hp.hpl.jena.sparql.core.Transactional) r3;

        r0.<com.hp.hpl.jena.sparql.core.DatasetImpl: com.hp.hpl.jena.sparql.core.Transactional transactional> = $r4;

     label1:
        return;
    }

    public static com.hp.hpl.jena.query.Dataset wrap(com.hp.hpl.jena.sparql.core.DatasetGraph)
    {
        com.hp.hpl.jena.sparql.core.DatasetImpl $r0;
        com.hp.hpl.jena.sparql.core.DatasetGraph r1;

        r1 := @parameter0: com.hp.hpl.jena.sparql.core.DatasetGraph;

        $r0 = new com.hp.hpl.jena.sparql.core.DatasetImpl;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.core.DatasetImpl: void <init>(com.hp.hpl.jena.sparql.core.DatasetGraph)>(r1);

        return $r0;
    }

    public static com.hp.hpl.jena.query.Dataset cloneStructure(com.hp.hpl.jena.sparql.core.DatasetGraph)
    {
        com.hp.hpl.jena.sparql.core.DatasetGraphMap $r1;
        com.hp.hpl.jena.sparql.core.DatasetImpl $r0;
        com.hp.hpl.jena.sparql.core.DatasetGraph r2;

        r2 := @parameter0: com.hp.hpl.jena.sparql.core.DatasetGraph;

        $r0 = new com.hp.hpl.jena.sparql.core.DatasetImpl;

        $r1 = new com.hp.hpl.jena.sparql.core.DatasetGraphMap;

        specialinvoke $r1.<com.hp.hpl.jena.sparql.core.DatasetGraphMap: void <init>(com.hp.hpl.jena.sparql.core.DatasetGraph)>(r2);

        specialinvoke $r0.<com.hp.hpl.jena.sparql.core.DatasetImpl: void <init>(com.hp.hpl.jena.sparql.core.DatasetGraph)>($r1);

        return $r0;
    }

    public void <init>(com.hp.hpl.jena.rdf.model.Model)
    {
        org.apache.jena.atlas.lib.Cache $r1;
        com.hp.hpl.jena.sparql.core.DatasetImpl r0;
        com.hp.hpl.jena.rdf.model.Model r3;
        java.lang.Object $r2;
        com.hp.hpl.jena.sparql.core.DatasetGraph $r5;
        com.hp.hpl.jena.graph.Graph $r4;

        r0 := @this: com.hp.hpl.jena.sparql.core.DatasetImpl;

        r3 := @parameter0: com.hp.hpl.jena.rdf.model.Model;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.core.DatasetImpl: com.hp.hpl.jena.sparql.core.DatasetGraph dsg> = null;

        r0.<com.hp.hpl.jena.sparql.core.DatasetImpl: com.hp.hpl.jena.sparql.core.Transactional transactional> = null;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.core.DatasetImpl: org.apache.jena.atlas.lib.Cache createCache()>();

        r0.<com.hp.hpl.jena.sparql.core.DatasetImpl: org.apache.jena.atlas.lib.Cache cache> = $r1;

        $r2 = new java.lang.Object;

        specialinvoke $r2.<java.lang.Object: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.core.DatasetImpl: java.lang.Object internalLock> = $r2;

        virtualinvoke r0.<com.hp.hpl.jena.sparql.core.DatasetImpl: void addToCache(com.hp.hpl.jena.rdf.model.Model)>(r3);

        $r4 = interfaceinvoke r3.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.graph.Graph getGraph()>();

        $r5 = staticinvoke <com.hp.hpl.jena.sparql.core.DatasetGraphFactory: com.hp.hpl.jena.sparql.core.DatasetGraph create(com.hp.hpl.jena.graph.Graph)>($r4);

        r0.<com.hp.hpl.jena.sparql.core.DatasetImpl: com.hp.hpl.jena.sparql.core.DatasetGraph dsg> = $r5;

        return;
    }

    public void <init>(com.hp.hpl.jena.query.Dataset)
    {
        org.apache.jena.atlas.lib.Cache $r1;
        com.hp.hpl.jena.sparql.core.DatasetImpl r0;
        com.hp.hpl.jena.query.Dataset r3;
        java.lang.Object $r2;
        com.hp.hpl.jena.sparql.core.DatasetGraph $r4, $r5;

        r0 := @this: com.hp.hpl.jena.sparql.core.DatasetImpl;

        r3 := @parameter0: com.hp.hpl.jena.query.Dataset;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.core.DatasetImpl: com.hp.hpl.jena.sparql.core.DatasetGraph dsg> = null;

        r0.<com.hp.hpl.jena.sparql.core.DatasetImpl: com.hp.hpl.jena.sparql.core.Transactional transactional> = null;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.core.DatasetImpl: org.apache.jena.atlas.lib.Cache createCache()>();

        r0.<com.hp.hpl.jena.sparql.core.DatasetImpl: org.apache.jena.atlas.lib.Cache cache> = $r1;

        $r2 = new java.lang.Object;

        specialinvoke $r2.<java.lang.Object: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.core.DatasetImpl: java.lang.Object internalLock> = $r2;

        $r4 = interfaceinvoke r3.<com.hp.hpl.jena.query.Dataset: com.hp.hpl.jena.sparql.core.DatasetGraph asDatasetGraph()>();

        $r5 = staticinvoke <com.hp.hpl.jena.sparql.core.DatasetGraphFactory: com.hp.hpl.jena.sparql.core.DatasetGraph create(com.hp.hpl.jena.sparql.core.DatasetGraph)>($r4);

        r0.<com.hp.hpl.jena.sparql.core.DatasetImpl: com.hp.hpl.jena.sparql.core.DatasetGraph dsg> = $r5;

        return;
    }

    public com.hp.hpl.jena.rdf.model.Model getDefaultModel()
    {
        java.lang.Throwable $r5;
        com.hp.hpl.jena.sparql.core.DatasetImpl r0;
        com.hp.hpl.jena.rdf.model.Model $r4;
        java.lang.Object $r1;
        com.hp.hpl.jena.sparql.core.DatasetGraph $r2;
        com.hp.hpl.jena.graph.Graph $r3;

        r0 := @this: com.hp.hpl.jena.sparql.core.DatasetImpl;

        $r1 = r0.<com.hp.hpl.jena.sparql.core.DatasetImpl: java.lang.Object internalLock>;

        entermonitor $r1;

     label1:
        $r2 = r0.<com.hp.hpl.jena.sparql.core.DatasetImpl: com.hp.hpl.jena.sparql.core.DatasetGraph dsg>;

        $r3 = interfaceinvoke $r2.<com.hp.hpl.jena.sparql.core.DatasetGraph: com.hp.hpl.jena.graph.Graph getDefaultGraph()>();

        $r4 = virtualinvoke r0.<com.hp.hpl.jena.sparql.core.DatasetImpl: com.hp.hpl.jena.rdf.model.Model graph2model(com.hp.hpl.jena.graph.Graph)>($r3);

        exitmonitor $r1;

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        exitmonitor $r1;

     label4:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public com.hp.hpl.jena.shared.Lock getLock()
    {
        com.hp.hpl.jena.shared.Lock $r2;
        com.hp.hpl.jena.sparql.core.DatasetImpl r0;
        com.hp.hpl.jena.sparql.core.DatasetGraph $r1;

        r0 := @this: com.hp.hpl.jena.sparql.core.DatasetImpl;

        $r1 = r0.<com.hp.hpl.jena.sparql.core.DatasetImpl: com.hp.hpl.jena.sparql.core.DatasetGraph dsg>;

        $r2 = interfaceinvoke $r1.<com.hp.hpl.jena.sparql.core.DatasetGraph: com.hp.hpl.jena.shared.Lock getLock()>();

        return $r2;
    }

    public com.hp.hpl.jena.sparql.util.Context getContext()
    {
        com.hp.hpl.jena.sparql.core.DatasetImpl r0;
        com.hp.hpl.jena.sparql.core.DatasetGraph $r1;
        com.hp.hpl.jena.sparql.util.Context $r2;

        r0 := @this: com.hp.hpl.jena.sparql.core.DatasetImpl;

        $r1 = r0.<com.hp.hpl.jena.sparql.core.DatasetImpl: com.hp.hpl.jena.sparql.core.DatasetGraph dsg>;

        $r2 = interfaceinvoke $r1.<com.hp.hpl.jena.sparql.core.DatasetGraph: com.hp.hpl.jena.sparql.util.Context getContext()>();

        return $r2;
    }

    public boolean supportsTransactions()
    {
        com.hp.hpl.jena.sparql.core.Transactional $r1;
        com.hp.hpl.jena.sparql.core.DatasetImpl r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.core.DatasetImpl;

        $r1 = r0.<com.hp.hpl.jena.sparql.core.DatasetImpl: com.hp.hpl.jena.sparql.core.Transactional transactional>;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void begin(com.hp.hpl.jena.query.ReadWrite)
    {
        com.hp.hpl.jena.sparql.core.Transactional $r1, $r3;
        java.lang.UnsupportedOperationException $r4;
        com.hp.hpl.jena.sparql.core.DatasetImpl r0;
        com.hp.hpl.jena.query.ReadWrite r2;

        r0 := @this: com.hp.hpl.jena.sparql.core.DatasetImpl;

        r2 := @parameter0: com.hp.hpl.jena.query.ReadWrite;

        $r1 = r0.<com.hp.hpl.jena.sparql.core.DatasetImpl: com.hp.hpl.jena.sparql.core.Transactional transactional>;

        if $r1 != null goto label1;

        $r4 = new java.lang.UnsupportedOperationException;

        specialinvoke $r4.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Transactions not supported");

        throw $r4;

     label1:
        $r3 = r0.<com.hp.hpl.jena.sparql.core.DatasetImpl: com.hp.hpl.jena.sparql.core.Transactional transactional>;

        interfaceinvoke $r3.<com.hp.hpl.jena.sparql.core.Transactional: void begin(com.hp.hpl.jena.query.ReadWrite)>(r2);

        return;
    }

    public boolean isInTransaction()
    {
        com.hp.hpl.jena.sparql.core.Transactional $r1, $r2;
        java.lang.UnsupportedOperationException $r3;
        com.hp.hpl.jena.sparql.core.DatasetImpl r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.core.DatasetImpl;

        $r1 = r0.<com.hp.hpl.jena.sparql.core.DatasetImpl: com.hp.hpl.jena.sparql.core.Transactional transactional>;

        if $r1 != null goto label1;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Transactions not supported");

        throw $r3;

     label1:
        $r2 = r0.<com.hp.hpl.jena.sparql.core.DatasetImpl: com.hp.hpl.jena.sparql.core.Transactional transactional>;

        $z0 = interfaceinvoke $r2.<com.hp.hpl.jena.sparql.core.Transactional: boolean isInTransaction()>();

        return $z0;
    }

    public void commit()
    {
        com.hp.hpl.jena.sparql.core.Transactional $r1, $r2;
        java.lang.UnsupportedOperationException $r3;
        com.hp.hpl.jena.sparql.core.DatasetImpl r0;

        r0 := @this: com.hp.hpl.jena.sparql.core.DatasetImpl;

        $r1 = r0.<com.hp.hpl.jena.sparql.core.DatasetImpl: com.hp.hpl.jena.sparql.core.Transactional transactional>;

        if $r1 != null goto label1;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Transactions not supported");

        throw $r3;

     label1:
        $r2 = r0.<com.hp.hpl.jena.sparql.core.DatasetImpl: com.hp.hpl.jena.sparql.core.Transactional transactional>;

        interfaceinvoke $r2.<com.hp.hpl.jena.sparql.core.Transactional: void commit()>();

        return;
    }

    public void abort()
    {
        com.hp.hpl.jena.sparql.core.Transactional $r1, $r2;
        java.lang.UnsupportedOperationException $r3;
        com.hp.hpl.jena.sparql.core.DatasetImpl r0;

        r0 := @this: com.hp.hpl.jena.sparql.core.DatasetImpl;

        $r1 = r0.<com.hp.hpl.jena.sparql.core.DatasetImpl: com.hp.hpl.jena.sparql.core.Transactional transactional>;

        if $r1 != null goto label1;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Transactions not supported");

        throw $r3;

     label1:
        $r2 = r0.<com.hp.hpl.jena.sparql.core.DatasetImpl: com.hp.hpl.jena.sparql.core.Transactional transactional>;

        interfaceinvoke $r2.<com.hp.hpl.jena.sparql.core.Transactional: void abort()>();

        return;
    }

    public void end()
    {
        com.hp.hpl.jena.sparql.core.Transactional $r1, $r2;
        java.lang.UnsupportedOperationException $r3;
        com.hp.hpl.jena.sparql.core.DatasetImpl r0;

        r0 := @this: com.hp.hpl.jena.sparql.core.DatasetImpl;

        $r1 = r0.<com.hp.hpl.jena.sparql.core.DatasetImpl: com.hp.hpl.jena.sparql.core.Transactional transactional>;

        if $r1 != null goto label1;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Transactions not supported");

        throw $r3;

     label1:
        $r2 = r0.<com.hp.hpl.jena.sparql.core.DatasetImpl: com.hp.hpl.jena.sparql.core.Transactional transactional>;

        interfaceinvoke $r2.<com.hp.hpl.jena.sparql.core.Transactional: void end()>();

        return;
    }

    public com.hp.hpl.jena.sparql.core.DatasetGraph asDatasetGraph()
    {
        com.hp.hpl.jena.sparql.core.DatasetImpl r0;
        com.hp.hpl.jena.sparql.core.DatasetGraph $r1;

        r0 := @this: com.hp.hpl.jena.sparql.core.DatasetImpl;

        $r1 = r0.<com.hp.hpl.jena.sparql.core.DatasetImpl: com.hp.hpl.jena.sparql.core.DatasetGraph dsg>;

        return $r1;
    }

    public com.hp.hpl.jena.rdf.model.Model getNamedModel(java.lang.String)
    {
        java.lang.Throwable $r7;
        com.hp.hpl.jena.sparql.core.DatasetImpl r2;
        com.hp.hpl.jena.graph.Node $r1;
        com.hp.hpl.jena.sparql.core.DatasetGraph $r4;
        com.hp.hpl.jena.rdf.model.Model $r6;
        java.lang.Object $r3;
        java.lang.String r0;
        com.hp.hpl.jena.graph.Graph $r5;

        r2 := @this: com.hp.hpl.jena.sparql.core.DatasetImpl;

        r0 := @parameter0: java.lang.String;

        staticinvoke <com.hp.hpl.jena.sparql.core.DatasetImpl: void checkGraphName(java.lang.String)>(r0);

        $r1 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createURI(java.lang.String)>(r0);

        $r3 = r2.<com.hp.hpl.jena.sparql.core.DatasetImpl: java.lang.Object internalLock>;

        entermonitor $r3;

     label1:
        $r4 = r2.<com.hp.hpl.jena.sparql.core.DatasetImpl: com.hp.hpl.jena.sparql.core.DatasetGraph dsg>;

        $r5 = interfaceinvoke $r4.<com.hp.hpl.jena.sparql.core.DatasetGraph: com.hp.hpl.jena.graph.Graph getGraph(com.hp.hpl.jena.graph.Node)>($r1);

        if $r5 != null goto label3;

        exitmonitor $r3;

     label2:
        return null;

     label3:
        $r6 = virtualinvoke r2.<com.hp.hpl.jena.sparql.core.DatasetImpl: com.hp.hpl.jena.rdf.model.Model graph2model(com.hp.hpl.jena.graph.Graph)>($r5);

        exitmonitor $r3;

     label4:
        return $r6;

     label5:
        $r7 := @caughtexception;

        exitmonitor $r3;

     label6:
        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public void addNamedModel(java.lang.String, com.hp.hpl.jena.rdf.model.Model) throws com.hp.hpl.jena.query.LabelExistsException
    {
        com.hp.hpl.jena.sparql.core.DatasetImpl r1;
        com.hp.hpl.jena.rdf.model.Model r2;
        java.lang.String r0;
        com.hp.hpl.jena.graph.Node $r3;
        com.hp.hpl.jena.sparql.core.DatasetGraph $r4;
        com.hp.hpl.jena.graph.Graph $r5;

        r1 := @this: com.hp.hpl.jena.sparql.core.DatasetImpl;

        r0 := @parameter0: java.lang.String;

        r2 := @parameter1: com.hp.hpl.jena.rdf.model.Model;

        staticinvoke <com.hp.hpl.jena.sparql.core.DatasetImpl: void checkGraphName(java.lang.String)>(r0);

        virtualinvoke r1.<com.hp.hpl.jena.sparql.core.DatasetImpl: void addToCache(com.hp.hpl.jena.rdf.model.Model)>(r2);

        $r3 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createURI(java.lang.String)>(r0);

        $r4 = r1.<com.hp.hpl.jena.sparql.core.DatasetImpl: com.hp.hpl.jena.sparql.core.DatasetGraph dsg>;

        $r5 = interfaceinvoke r2.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.graph.Graph getGraph()>();

        interfaceinvoke $r4.<com.hp.hpl.jena.sparql.core.DatasetGraph: void addGraph(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Graph)>($r3, $r5);

        return;
    }

    public void removeNamedModel(java.lang.String)
    {
        com.hp.hpl.jena.sparql.core.DatasetImpl r2;
        java.lang.String r0;
        com.hp.hpl.jena.graph.Node $r1;
        com.hp.hpl.jena.sparql.core.DatasetGraph $r3, $r5;
        com.hp.hpl.jena.graph.Graph $r4;

        r2 := @this: com.hp.hpl.jena.sparql.core.DatasetImpl;

        r0 := @parameter0: java.lang.String;

        staticinvoke <com.hp.hpl.jena.sparql.core.DatasetImpl: void checkGraphName(java.lang.String)>(r0);

        $r1 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createURI(java.lang.String)>(r0);

        $r3 = r2.<com.hp.hpl.jena.sparql.core.DatasetImpl: com.hp.hpl.jena.sparql.core.DatasetGraph dsg>;

        $r4 = interfaceinvoke $r3.<com.hp.hpl.jena.sparql.core.DatasetGraph: com.hp.hpl.jena.graph.Graph getGraph(com.hp.hpl.jena.graph.Node)>($r1);

        virtualinvoke r2.<com.hp.hpl.jena.sparql.core.DatasetImpl: void removeFromCache(com.hp.hpl.jena.graph.Graph)>($r4);

        $r5 = r2.<com.hp.hpl.jena.sparql.core.DatasetImpl: com.hp.hpl.jena.sparql.core.DatasetGraph dsg>;

        interfaceinvoke $r5.<com.hp.hpl.jena.sparql.core.DatasetGraph: void removeGraph(com.hp.hpl.jena.graph.Node)>($r1);

        return;
    }

    public void replaceNamedModel(java.lang.String, com.hp.hpl.jena.rdf.model.Model)
    {
        com.hp.hpl.jena.sparql.core.DatasetImpl r2;
        com.hp.hpl.jena.graph.Node $r1;
        com.hp.hpl.jena.sparql.core.DatasetGraph $r3, $r5, $r7;
        com.hp.hpl.jena.rdf.model.Model r6;
        java.lang.String r0;
        com.hp.hpl.jena.graph.Graph $r4, $r8;

        r2 := @this: com.hp.hpl.jena.sparql.core.DatasetImpl;

        r0 := @parameter0: java.lang.String;

        r6 := @parameter1: com.hp.hpl.jena.rdf.model.Model;

        staticinvoke <com.hp.hpl.jena.sparql.core.DatasetImpl: void checkGraphName(java.lang.String)>(r0);

        $r1 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createURI(java.lang.String)>(r0);

        $r3 = r2.<com.hp.hpl.jena.sparql.core.DatasetImpl: com.hp.hpl.jena.sparql.core.DatasetGraph dsg>;

        $r4 = interfaceinvoke $r3.<com.hp.hpl.jena.sparql.core.DatasetGraph: com.hp.hpl.jena.graph.Graph getGraph(com.hp.hpl.jena.graph.Node)>($r1);

        virtualinvoke r2.<com.hp.hpl.jena.sparql.core.DatasetImpl: void removeFromCache(com.hp.hpl.jena.graph.Graph)>($r4);

        $r5 = r2.<com.hp.hpl.jena.sparql.core.DatasetImpl: com.hp.hpl.jena.sparql.core.DatasetGraph dsg>;

        interfaceinvoke $r5.<com.hp.hpl.jena.sparql.core.DatasetGraph: void removeGraph(com.hp.hpl.jena.graph.Node)>($r1);

        virtualinvoke r2.<com.hp.hpl.jena.sparql.core.DatasetImpl: void addToCache(com.hp.hpl.jena.rdf.model.Model)>(r6);

        $r7 = r2.<com.hp.hpl.jena.sparql.core.DatasetImpl: com.hp.hpl.jena.sparql.core.DatasetGraph dsg>;

        $r8 = interfaceinvoke r6.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.graph.Graph getGraph()>();

        interfaceinvoke $r7.<com.hp.hpl.jena.sparql.core.DatasetGraph: void addGraph(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Graph)>($r1, $r8);

        return;
    }

    public void setDefaultModel(com.hp.hpl.jena.rdf.model.Model)
    {
        com.hp.hpl.jena.sparql.core.DatasetImpl r0;
        com.hp.hpl.jena.rdf.model.Model r5;
        com.hp.hpl.jena.sparql.core.DatasetGraph $r1, $r3;
        com.hp.hpl.jena.graph.Graph $r2, $r4;

        r0 := @this: com.hp.hpl.jena.sparql.core.DatasetImpl;

        r5 := @parameter0: com.hp.hpl.jena.rdf.model.Model;

        if r5 != null goto label1;

        r5 = staticinvoke <com.hp.hpl.jena.rdf.model.ModelFactory: com.hp.hpl.jena.rdf.model.Model createDefaultModel()>();

     label1:
        $r1 = r0.<com.hp.hpl.jena.sparql.core.DatasetImpl: com.hp.hpl.jena.sparql.core.DatasetGraph dsg>;

        $r2 = interfaceinvoke $r1.<com.hp.hpl.jena.sparql.core.DatasetGraph: com.hp.hpl.jena.graph.Graph getDefaultGraph()>();

        virtualinvoke r0.<com.hp.hpl.jena.sparql.core.DatasetImpl: void removeFromCache(com.hp.hpl.jena.graph.Graph)>($r2);

        virtualinvoke r0.<com.hp.hpl.jena.sparql.core.DatasetImpl: void addToCache(com.hp.hpl.jena.rdf.model.Model)>(r5);

        $r3 = r0.<com.hp.hpl.jena.sparql.core.DatasetImpl: com.hp.hpl.jena.sparql.core.DatasetGraph dsg>;

        $r4 = interfaceinvoke r5.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.graph.Graph getGraph()>();

        interfaceinvoke $r3.<com.hp.hpl.jena.sparql.core.DatasetGraph: void setDefaultGraph(com.hp.hpl.jena.graph.Graph)>($r4);

        return;
    }

    public boolean containsNamedModel(java.lang.String)
    {
        com.hp.hpl.jena.sparql.core.DatasetImpl r2;
        java.lang.String r0;
        com.hp.hpl.jena.graph.Node $r1;
        com.hp.hpl.jena.sparql.core.DatasetGraph $r3;
        boolean $z0;

        r2 := @this: com.hp.hpl.jena.sparql.core.DatasetImpl;

        r0 := @parameter0: java.lang.String;

        staticinvoke <com.hp.hpl.jena.sparql.core.DatasetImpl: void checkGraphName(java.lang.String)>(r0);

        $r1 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createURI(java.lang.String)>(r0);

        $r3 = r2.<com.hp.hpl.jena.sparql.core.DatasetImpl: com.hp.hpl.jena.sparql.core.DatasetGraph dsg>;

        $z0 = interfaceinvoke $r3.<com.hp.hpl.jena.sparql.core.DatasetGraph: boolean containsGraph(com.hp.hpl.jena.graph.Node)>($r1);

        return $z0;
    }

    public java.util.Iterator listNames()
    {
        com.hp.hpl.jena.sparql.core.DatasetImpl r0;
        java.util.Iterator $r2, $r3;
        com.hp.hpl.jena.sparql.core.DatasetGraph $r1;

        r0 := @this: com.hp.hpl.jena.sparql.core.DatasetImpl;

        $r1 = r0.<com.hp.hpl.jena.sparql.core.DatasetImpl: com.hp.hpl.jena.sparql.core.DatasetGraph dsg>;

        $r2 = interfaceinvoke $r1.<com.hp.hpl.jena.sparql.core.DatasetGraph: java.util.Iterator listGraphNodes()>();

        $r3 = staticinvoke <com.hp.hpl.jena.sparql.util.NodeUtils: java.util.Iterator nodesToURIs(java.util.Iterator)>($r2);

        return $r3;
    }

    public void close()
    {
        com.hp.hpl.jena.sparql.core.DatasetImpl r0;
        com.hp.hpl.jena.sparql.core.DatasetGraph $r1;

        r0 := @this: com.hp.hpl.jena.sparql.core.DatasetImpl;

        $r1 = r0.<com.hp.hpl.jena.sparql.core.DatasetImpl: com.hp.hpl.jena.sparql.core.DatasetGraph dsg>;

        interfaceinvoke $r1.<com.hp.hpl.jena.sparql.core.DatasetGraph: void close()>();

        r0.<com.hp.hpl.jena.sparql.core.DatasetImpl: org.apache.jena.atlas.lib.Cache cache> = null;

        return;
    }

    protected org.apache.jena.atlas.lib.Cache createCache()
    {
        org.apache.jena.atlas.lib.Cache $r0;
        com.hp.hpl.jena.sparql.core.DatasetImpl r1;

        r1 := @this: com.hp.hpl.jena.sparql.core.DatasetImpl;

        $r0 = staticinvoke <org.apache.jena.atlas.lib.CacheFactory: org.apache.jena.atlas.lib.Cache createCache(float,int)>(0.75F, 20);

        return $r0;
    }

    protected void removeFromCache(com.hp.hpl.jena.graph.Graph)
    {
        org.apache.jena.atlas.lib.Cache $r2;
        com.hp.hpl.jena.sparql.core.DatasetImpl r1;
        com.hp.hpl.jena.graph.Graph r0;

        r1 := @this: com.hp.hpl.jena.sparql.core.DatasetImpl;

        r0 := @parameter0: com.hp.hpl.jena.graph.Graph;

        if r0 != null goto label1;

        return;

     label1:
        $r2 = r1.<com.hp.hpl.jena.sparql.core.DatasetImpl: org.apache.jena.atlas.lib.Cache cache>;

        interfaceinvoke $r2.<org.apache.jena.atlas.lib.Cache: boolean remove(java.lang.Object)>(r0);

        return;
    }

    protected void addToCache(com.hp.hpl.jena.rdf.model.Model)
    {
        org.apache.jena.atlas.lib.Cache $r2;
        com.hp.hpl.jena.sparql.core.DatasetImpl r0;
        com.hp.hpl.jena.rdf.model.Model r1;
        com.hp.hpl.jena.graph.Graph $r3;

        r0 := @this: com.hp.hpl.jena.sparql.core.DatasetImpl;

        r1 := @parameter0: com.hp.hpl.jena.rdf.model.Model;

        $r2 = r0.<com.hp.hpl.jena.sparql.core.DatasetImpl: org.apache.jena.atlas.lib.Cache cache>;

        $r3 = interfaceinvoke r1.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.graph.Graph getGraph()>();

        interfaceinvoke $r2.<org.apache.jena.atlas.lib.Cache: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, r1);

        return;
    }

    protected com.hp.hpl.jena.rdf.model.Model graph2model(com.hp.hpl.jena.graph.Graph)
    {
        org.apache.jena.atlas.lib.Cache $r2, $r5;
        com.hp.hpl.jena.sparql.core.DatasetImpl r0;
        com.hp.hpl.jena.rdf.model.Model $r4, r6;
        java.lang.Object $r3;
        com.hp.hpl.jena.graph.Graph r1;

        r0 := @this: com.hp.hpl.jena.sparql.core.DatasetImpl;

        r1 := @parameter0: com.hp.hpl.jena.graph.Graph;

        $r2 = r0.<com.hp.hpl.jena.sparql.core.DatasetImpl: org.apache.jena.atlas.lib.Cache cache>;

        $r3 = interfaceinvoke $r2.<org.apache.jena.atlas.lib.Cache: java.lang.Object get(java.lang.Object)>(r1);

        r6 = (com.hp.hpl.jena.rdf.model.Model) $r3;

        if r6 != null goto label1;

        $r4 = staticinvoke <com.hp.hpl.jena.rdf.model.ModelFactory: com.hp.hpl.jena.rdf.model.Model createModelForGraph(com.hp.hpl.jena.graph.Graph)>(r1);

        r6 = $r4;

        $r5 = r0.<com.hp.hpl.jena.sparql.core.DatasetImpl: org.apache.jena.atlas.lib.Cache cache>;

        interfaceinvoke $r5.<org.apache.jena.atlas.lib.Cache: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r4);

     label1:
        return r6;
    }

    protected static void checkGraphName(java.lang.String)
    {
        java.lang.String r0;
        com.hp.hpl.jena.sparql.ARQException $r1;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        $r1 = new com.hp.hpl.jena.sparql.ARQException;

        specialinvoke $r1.<com.hp.hpl.jena.sparql.ARQException: void <init>(java.lang.String)>("null for graph name");

        throw $r1;

     label1:
        return;
    }
}
