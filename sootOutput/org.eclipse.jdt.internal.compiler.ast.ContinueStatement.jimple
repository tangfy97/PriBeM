public class org.eclipse.jdt.internal.compiler.ast.ContinueStatement extends org.eclipse.jdt.internal.compiler.ast.BranchStatement
{

    public void <init>(char[], int, int)
    {
        int i0, i1;
        char[] r1;
        org.eclipse.jdt.internal.compiler.ast.ContinueStatement r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.ContinueStatement;

        r1 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.ast.BranchStatement: void <init>(char[],int,int)>(r1, i0, i1);

        return;
    }

    public org.eclipse.jdt.internal.compiler.flow.FlowInfo analyseCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope, org.eclipse.jdt.internal.compiler.flow.FlowContext, org.eclipse.jdt.internal.compiler.flow.FlowInfo)
    {
        org.eclipse.jdt.internal.compiler.problem.ProblemReporter $r23, $r25, $r26;
        org.eclipse.jdt.internal.compiler.lookup.MethodScope $r7;
        org.eclipse.jdt.internal.compiler.flow.FlowContext r2, r4, $r5, $r27, r28, $r29;
        org.eclipse.jdt.internal.compiler.ast.ContinueStatement r0;
        boolean $z0, $z1, $z2;
        org.eclipse.jdt.internal.compiler.ast.TryStatement r17;
        org.eclipse.jdt.internal.compiler.lookup.BlockScope r6;
        org.eclipse.jdt.internal.compiler.flow.FlowInfo r8;
        org.eclipse.jdt.internal.compiler.ast.SubRoutineStatement $r11;
        org.eclipse.jdt.internal.compiler.ast.ASTNode r16;
        org.eclipse.jdt.internal.compiler.codegen.BranchLabel $r9;
        int $i0, $i1, $i2, $i3, i4, $i5;
        org.eclipse.jdt.internal.compiler.ast.SubRoutineStatement[] $r10, $r14, $r15, $r19, $r20, $r21, $r22, $r30;
        org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo $r12, $r13, $r18;
        char[] $r1, $r3, $r24;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.ContinueStatement;

        r6 := @parameter0: org.eclipse.jdt.internal.compiler.lookup.BlockScope;

        r2 := @parameter1: org.eclipse.jdt.internal.compiler.flow.FlowContext;

        r8 := @parameter2: org.eclipse.jdt.internal.compiler.flow.FlowInfo;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.ast.ContinueStatement: char[] label>;

        if $r1 != null goto label01;

        $r27 = virtualinvoke r2.<org.eclipse.jdt.internal.compiler.flow.FlowContext: org.eclipse.jdt.internal.compiler.flow.FlowContext getTargetContextForDefaultContinue()>();

        goto label02;

     label01:
        $r3 = r0.<org.eclipse.jdt.internal.compiler.ast.ContinueStatement: char[] label>;

        $r27 = virtualinvoke r2.<org.eclipse.jdt.internal.compiler.flow.FlowContext: org.eclipse.jdt.internal.compiler.flow.FlowContext getTargetContextForContinueLabel(char[])>($r3);

     label02:
        r4 = $r27;

        if $r27 != null goto label05;

        $r24 = r0.<org.eclipse.jdt.internal.compiler.ast.ContinueStatement: char[] label>;

        if $r24 != null goto label03;

        $r26 = virtualinvoke r6.<org.eclipse.jdt.internal.compiler.lookup.BlockScope: org.eclipse.jdt.internal.compiler.problem.ProblemReporter problemReporter()>();

        virtualinvoke $r26.<org.eclipse.jdt.internal.compiler.problem.ProblemReporter: void invalidContinue(org.eclipse.jdt.internal.compiler.ast.ASTNode)>(r0);

        goto label04;

     label03:
        $r25 = virtualinvoke r6.<org.eclipse.jdt.internal.compiler.lookup.BlockScope: org.eclipse.jdt.internal.compiler.problem.ProblemReporter problemReporter()>();

        virtualinvoke $r25.<org.eclipse.jdt.internal.compiler.problem.ProblemReporter: void undefinedLabel(org.eclipse.jdt.internal.compiler.ast.BranchStatement)>(r0);

     label04:
        return r8;

     label05:
        $r5 = <org.eclipse.jdt.internal.compiler.flow.FlowContext: org.eclipse.jdt.internal.compiler.flow.FlowContext NotContinuableContext>;

        if $r27 != $r5 goto label06;

        $r23 = virtualinvoke r6.<org.eclipse.jdt.internal.compiler.lookup.BlockScope: org.eclipse.jdt.internal.compiler.problem.ProblemReporter problemReporter()>();

        virtualinvoke $r23.<org.eclipse.jdt.internal.compiler.problem.ProblemReporter: void invalidContinue(org.eclipse.jdt.internal.compiler.ast.ASTNode)>(r0);

        return r8;

     label06:
        $r7 = virtualinvoke r6.<org.eclipse.jdt.internal.compiler.lookup.BlockScope: org.eclipse.jdt.internal.compiler.lookup.MethodScope methodScope()>();

        $i0 = virtualinvoke $r7.<org.eclipse.jdt.internal.compiler.lookup.MethodScope: int recordInitializationStates(org.eclipse.jdt.internal.compiler.flow.FlowInfo)>(r8);

        r0.<org.eclipse.jdt.internal.compiler.ast.ContinueStatement: int initStateIndex> = $i0;

        $r9 = virtualinvoke $r27.<org.eclipse.jdt.internal.compiler.flow.FlowContext: org.eclipse.jdt.internal.compiler.codegen.BranchLabel continueLabel()>();

        r0.<org.eclipse.jdt.internal.compiler.ast.ContinueStatement: org.eclipse.jdt.internal.compiler.codegen.BranchLabel targetLabel> = $r9;

        r28 = r2;

        i4 = 0;

        $r10 = newarray (org.eclipse.jdt.internal.compiler.ast.SubRoutineStatement)[5];

        r0.<org.eclipse.jdt.internal.compiler.ast.ContinueStatement: org.eclipse.jdt.internal.compiler.ast.SubRoutineStatement[] subroutines> = $r10;

     label07:
        $r11 = virtualinvoke r28.<org.eclipse.jdt.internal.compiler.flow.FlowContext: org.eclipse.jdt.internal.compiler.ast.SubRoutineStatement subroutine()>();

        if $r11 == null goto label09;

        $r19 = r0.<org.eclipse.jdt.internal.compiler.ast.ContinueStatement: org.eclipse.jdt.internal.compiler.ast.SubRoutineStatement[] subroutines>;

        $i1 = lengthof $r19;

        if i4 != $i1 goto label08;

        $r22 = r0.<org.eclipse.jdt.internal.compiler.ast.ContinueStatement: org.eclipse.jdt.internal.compiler.ast.SubRoutineStatement[] subroutines>;

        $i3 = i4 * 2;

        $r21 = newarray (org.eclipse.jdt.internal.compiler.ast.SubRoutineStatement)[$i3];

        r0.<org.eclipse.jdt.internal.compiler.ast.ContinueStatement: org.eclipse.jdt.internal.compiler.ast.SubRoutineStatement[] subroutines> = $r21;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r22, 0, $r21, 0, i4);

     label08:
        $r20 = r0.<org.eclipse.jdt.internal.compiler.ast.ContinueStatement: org.eclipse.jdt.internal.compiler.ast.SubRoutineStatement[] subroutines>;

        $i2 = i4;

        i4 = i4 + 1;

        $r20[$i2] = $r11;

        $z2 = virtualinvoke $r11.<org.eclipse.jdt.internal.compiler.ast.SubRoutineStatement: boolean isSubRoutineEscaping()>();

        if $z2 == 0 goto label09;

        goto label12;

     label09:
        $r12 = virtualinvoke r8.<org.eclipse.jdt.internal.compiler.flow.FlowInfo: org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo unconditionalInits()>();

        virtualinvoke r28.<org.eclipse.jdt.internal.compiler.flow.FlowContext: void recordReturnFrom(org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo)>($r12);

        $z0 = r28 instanceof org.eclipse.jdt.internal.compiler.flow.InsideSubRoutineFlowContext;

        if $z0 == 0 goto label10;

        r16 = r28.<org.eclipse.jdt.internal.compiler.flow.FlowContext: org.eclipse.jdt.internal.compiler.ast.ASTNode associatedNode>;

        $z1 = r16 instanceof org.eclipse.jdt.internal.compiler.ast.TryStatement;

        if $z1 == 0 goto label11;

        r17 = (org.eclipse.jdt.internal.compiler.ast.TryStatement) r16;

        $r18 = r17.<org.eclipse.jdt.internal.compiler.ast.TryStatement: org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo subRoutineInits>;

        virtualinvoke r8.<org.eclipse.jdt.internal.compiler.flow.FlowInfo: org.eclipse.jdt.internal.compiler.flow.FlowInfo addInitializationsFrom(org.eclipse.jdt.internal.compiler.flow.FlowInfo)>($r18);

        goto label11;

     label10:
        if r28 != r4 goto label11;

        virtualinvoke r4.<org.eclipse.jdt.internal.compiler.flow.FlowContext: void recordContinueFrom(org.eclipse.jdt.internal.compiler.flow.FlowContext,org.eclipse.jdt.internal.compiler.flow.FlowInfo)>(r2, r8);

        goto label12;

     label11:
        $r29 = r28.<org.eclipse.jdt.internal.compiler.flow.FlowContext: org.eclipse.jdt.internal.compiler.flow.FlowContext parent>;

        r28 = $r29;

        if $r29 != null goto label07;

     label12:
        $r30 = r0.<org.eclipse.jdt.internal.compiler.ast.ContinueStatement: org.eclipse.jdt.internal.compiler.ast.SubRoutineStatement[] subroutines>;

        $i5 = lengthof $r30;

        if i4 == $i5 goto label13;

        $r15 = r0.<org.eclipse.jdt.internal.compiler.ast.ContinueStatement: org.eclipse.jdt.internal.compiler.ast.SubRoutineStatement[] subroutines>;

        $r14 = newarray (org.eclipse.jdt.internal.compiler.ast.SubRoutineStatement)[i4];

        r0.<org.eclipse.jdt.internal.compiler.ast.ContinueStatement: org.eclipse.jdt.internal.compiler.ast.SubRoutineStatement[] subroutines> = $r14;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r15, 0, $r14, 0, i4);

     label13:
        $r13 = <org.eclipse.jdt.internal.compiler.flow.FlowInfo: org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo DEAD_END>;

        return $r13;
    }

    public java.lang.StringBuffer printStatement(int, java.lang.StringBuffer)
    {
        java.lang.StringBuffer r0, $r1, $r4;
        int i0;
        char[] $r3, $r5;
        org.eclipse.jdt.internal.compiler.ast.ContinueStatement r2;

        r2 := @this: org.eclipse.jdt.internal.compiler.ast.ContinueStatement;

        i0 := @parameter0: int;

        r0 := @parameter1: java.lang.StringBuffer;

        $r1 = staticinvoke <org.eclipse.jdt.internal.compiler.ast.ContinueStatement: java.lang.StringBuffer printIndent(int,java.lang.StringBuffer)>(i0, r0);

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("continue ");

        $r3 = r2.<org.eclipse.jdt.internal.compiler.ast.ContinueStatement: char[] label>;

        if $r3 == null goto label1;

        $r5 = r2.<org.eclipse.jdt.internal.compiler.ast.ContinueStatement: char[] label>;

        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char[])>($r5);

     label1:
        $r4 = virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(59);

        return $r4;
    }

    public void traverse(org.eclipse.jdt.internal.compiler.ASTVisitor, org.eclipse.jdt.internal.compiler.lookup.BlockScope)
    {
        org.eclipse.jdt.internal.compiler.ASTVisitor r0;
        org.eclipse.jdt.internal.compiler.lookup.BlockScope r2;
        org.eclipse.jdt.internal.compiler.ast.ContinueStatement r1;

        r1 := @this: org.eclipse.jdt.internal.compiler.ast.ContinueStatement;

        r0 := @parameter0: org.eclipse.jdt.internal.compiler.ASTVisitor;

        r2 := @parameter1: org.eclipse.jdt.internal.compiler.lookup.BlockScope;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.ASTVisitor: boolean visit(org.eclipse.jdt.internal.compiler.ast.ContinueStatement,org.eclipse.jdt.internal.compiler.lookup.BlockScope)>(r1, r2);

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.ASTVisitor: void endVisit(org.eclipse.jdt.internal.compiler.ast.ContinueStatement,org.eclipse.jdt.internal.compiler.lookup.BlockScope)>(r1, r2);

        return;
    }
}
