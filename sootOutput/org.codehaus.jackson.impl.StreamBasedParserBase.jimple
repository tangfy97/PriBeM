public abstract class org.codehaus.jackson.impl.StreamBasedParserBase extends org.codehaus.jackson.impl.JsonNumericParserBase
{
    protected java.io.InputStream _inputStream;
    protected byte[] _inputBuffer;
    protected boolean _bufferRecyclable;

    protected void <init>(org.codehaus.jackson.io.IOContext, int, java.io.InputStream, byte[], int, int, boolean)
    {
        org.codehaus.jackson.io.IOContext r1;
        byte[] r3;
        org.codehaus.jackson.impl.StreamBasedParserBase r0;
        int i0, i1, i2;
        java.io.InputStream r2;
        boolean z0;

        r0 := @this: org.codehaus.jackson.impl.StreamBasedParserBase;

        r1 := @parameter0: org.codehaus.jackson.io.IOContext;

        i0 := @parameter1: int;

        r2 := @parameter2: java.io.InputStream;

        r3 := @parameter3: byte[];

        i1 := @parameter4: int;

        i2 := @parameter5: int;

        z0 := @parameter6: boolean;

        specialinvoke r0.<org.codehaus.jackson.impl.JsonNumericParserBase: void <init>(org.codehaus.jackson.io.IOContext,int)>(r1, i0);

        r0.<org.codehaus.jackson.impl.StreamBasedParserBase: java.io.InputStream _inputStream> = r2;

        r0.<org.codehaus.jackson.impl.StreamBasedParserBase: byte[] _inputBuffer> = r3;

        r0.<org.codehaus.jackson.impl.StreamBasedParserBase: int _inputPtr> = i1;

        r0.<org.codehaus.jackson.impl.StreamBasedParserBase: int _inputEnd> = i2;

        r0.<org.codehaus.jackson.impl.StreamBasedParserBase: boolean _bufferRecyclable> = z0;

        return;
    }

    protected final boolean loadMore() throws java.io.IOException
    {
        byte[] $r2, $r3;
        long $l1, $l2, $l3;
        org.codehaus.jackson.impl.StreamBasedParserBase r0;
        int $i0, $i4, $i5, $i6, $i7, $i8, $i9;
        java.lang.String $r9;
        java.io.IOException $r5;
        java.lang.StringBuilder $r6, $r7, $r8;
        java.io.InputStream $r1, $r4;

        r0 := @this: org.codehaus.jackson.impl.StreamBasedParserBase;

        $l2 = r0.<org.codehaus.jackson.impl.StreamBasedParserBase: long _currInputProcessed>;

        $i0 = r0.<org.codehaus.jackson.impl.StreamBasedParserBase: int _inputEnd>;

        $l1 = (long) $i0;

        $l3 = $l2 + $l1;

        r0.<org.codehaus.jackson.impl.StreamBasedParserBase: long _currInputProcessed> = $l3;

        $i5 = r0.<org.codehaus.jackson.impl.StreamBasedParserBase: int _currInputRowStart>;

        $i4 = r0.<org.codehaus.jackson.impl.StreamBasedParserBase: int _inputEnd>;

        $i6 = $i5 - $i4;

        r0.<org.codehaus.jackson.impl.StreamBasedParserBase: int _currInputRowStart> = $i6;

        $r1 = r0.<org.codehaus.jackson.impl.StreamBasedParserBase: java.io.InputStream _inputStream>;

        if $r1 == null goto label2;

        $r4 = r0.<org.codehaus.jackson.impl.StreamBasedParserBase: java.io.InputStream _inputStream>;

        $r3 = r0.<org.codehaus.jackson.impl.StreamBasedParserBase: byte[] _inputBuffer>;

        $r2 = r0.<org.codehaus.jackson.impl.StreamBasedParserBase: byte[] _inputBuffer>;

        $i7 = lengthof $r2;

        $i8 = virtualinvoke $r4.<java.io.InputStream: int read(byte[],int,int)>($r3, 0, $i7);

        if $i8 <= 0 goto label1;

        r0.<org.codehaus.jackson.impl.StreamBasedParserBase: int _inputPtr> = 0;

        r0.<org.codehaus.jackson.impl.StreamBasedParserBase: int _inputEnd> = $i8;

        return 1;

     label1:
        virtualinvoke r0.<org.codehaus.jackson.impl.StreamBasedParserBase: void _closeInput()>();

        if $i8 != 0 goto label2;

        $r5 = new java.io.IOException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Reader returned 0 characters when trying to read ");

        $i9 = r0.<org.codehaus.jackson.impl.StreamBasedParserBase: int _inputEnd>;

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i9);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.io.IOException: void <init>(java.lang.String)>($r9);

        throw $r5;

     label2:
        return 0;
    }

    protected void _closeInput() throws java.io.IOException
    {
        org.codehaus.jackson.io.IOContext $r2;
        org.codehaus.jackson.impl.StreamBasedParserBase r0;
        org.codehaus.jackson.JsonParser$Feature $r4;
        java.io.InputStream $r1, $r3;
        boolean $z0, $z1;

        r0 := @this: org.codehaus.jackson.impl.StreamBasedParserBase;

        $r1 = r0.<org.codehaus.jackson.impl.StreamBasedParserBase: java.io.InputStream _inputStream>;

        if $r1 == null goto label3;

        $r2 = r0.<org.codehaus.jackson.impl.StreamBasedParserBase: org.codehaus.jackson.io.IOContext _ioContext>;

        $z0 = virtualinvoke $r2.<org.codehaus.jackson.io.IOContext: boolean isResourceManaged()>();

        if $z0 != 0 goto label1;

        $r4 = <org.codehaus.jackson.JsonParser$Feature: org.codehaus.jackson.JsonParser$Feature AUTO_CLOSE_SOURCE>;

        $z1 = virtualinvoke r0.<org.codehaus.jackson.impl.StreamBasedParserBase: boolean isEnabled(org.codehaus.jackson.JsonParser$Feature)>($r4);

        if $z1 == 0 goto label2;

     label1:
        $r3 = r0.<org.codehaus.jackson.impl.StreamBasedParserBase: java.io.InputStream _inputStream>;

        virtualinvoke $r3.<java.io.InputStream: void close()>();

     label2:
        r0.<org.codehaus.jackson.impl.StreamBasedParserBase: java.io.InputStream _inputStream> = null;

     label3:
        return;
    }

    protected void _releaseBuffers() throws java.io.IOException
    {
        byte[] r1;
        org.codehaus.jackson.io.IOContext $r2;
        org.codehaus.jackson.impl.StreamBasedParserBase r0;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.impl.StreamBasedParserBase;

        specialinvoke r0.<org.codehaus.jackson.impl.JsonNumericParserBase: void _releaseBuffers()>();

        $z0 = r0.<org.codehaus.jackson.impl.StreamBasedParserBase: boolean _bufferRecyclable>;

        if $z0 == 0 goto label1;

        r1 = r0.<org.codehaus.jackson.impl.StreamBasedParserBase: byte[] _inputBuffer>;

        if r1 == null goto label1;

        r0.<org.codehaus.jackson.impl.StreamBasedParserBase: byte[] _inputBuffer> = null;

        $r2 = r0.<org.codehaus.jackson.impl.StreamBasedParserBase: org.codehaus.jackson.io.IOContext _ioContext>;

        virtualinvoke $r2.<org.codehaus.jackson.io.IOContext: void releaseReadIOBuffer(byte[])>(r1);

     label1:
        return;
    }
}
