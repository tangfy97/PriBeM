public class org.mozilla.universalchardet.prober.SingleByteCharsetProber extends org.mozilla.universalchardet.prober.CharsetProber
{
    public static final int SAMPLE_SIZE;
    public static final int SB_ENOUGH_REL_THRESHOLD;
    public static final float POSITIVE_SHORTCUT_THRESHOLD;
    public static final float NEGATIVE_SHORTCUT_THRESHOLD;
    public static final int SYMBOL_CAT_ORDER;
    public static final int NUMBER_OF_SEQ_CAT;
    public static final int POSITIVE_CAT;
    public static final int NEGATIVE_CAT;
    private org.mozilla.universalchardet.prober.CharsetProber$ProbingState state;
    private org.mozilla.universalchardet.prober.sequence.SequenceModel model;
    private boolean reversed;
    private short lastOrder;
    private int totalSeqs;
    private int[] seqCounters;
    private int totalChar;
    private int freqChar;
    private org.mozilla.universalchardet.prober.CharsetProber nameProber;

    public void <init>(org.mozilla.universalchardet.prober.sequence.SequenceModel)
    {
        org.mozilla.universalchardet.prober.SingleByteCharsetProber r0;
        org.mozilla.universalchardet.prober.sequence.SequenceModel r1;
        int[] $r2;

        r0 := @this: org.mozilla.universalchardet.prober.SingleByteCharsetProber;

        r1 := @parameter0: org.mozilla.universalchardet.prober.sequence.SequenceModel;

        specialinvoke r0.<org.mozilla.universalchardet.prober.CharsetProber: void <init>()>();

        r0.<org.mozilla.universalchardet.prober.SingleByteCharsetProber: org.mozilla.universalchardet.prober.sequence.SequenceModel model> = r1;

        r0.<org.mozilla.universalchardet.prober.SingleByteCharsetProber: boolean reversed> = 0;

        r0.<org.mozilla.universalchardet.prober.SingleByteCharsetProber: org.mozilla.universalchardet.prober.CharsetProber nameProber> = null;

        $r2 = newarray (int)[4];

        r0.<org.mozilla.universalchardet.prober.SingleByteCharsetProber: int[] seqCounters> = $r2;

        virtualinvoke r0.<org.mozilla.universalchardet.prober.SingleByteCharsetProber: void reset()>();

        return;
    }

    public void <init>(org.mozilla.universalchardet.prober.sequence.SequenceModel, boolean, org.mozilla.universalchardet.prober.CharsetProber)
    {
        org.mozilla.universalchardet.prober.SingleByteCharsetProber r0;
        org.mozilla.universalchardet.prober.sequence.SequenceModel r1;
        org.mozilla.universalchardet.prober.CharsetProber r2;
        int[] $r3;
        boolean z0;

        r0 := @this: org.mozilla.universalchardet.prober.SingleByteCharsetProber;

        r1 := @parameter0: org.mozilla.universalchardet.prober.sequence.SequenceModel;

        z0 := @parameter1: boolean;

        r2 := @parameter2: org.mozilla.universalchardet.prober.CharsetProber;

        specialinvoke r0.<org.mozilla.universalchardet.prober.CharsetProber: void <init>()>();

        r0.<org.mozilla.universalchardet.prober.SingleByteCharsetProber: org.mozilla.universalchardet.prober.sequence.SequenceModel model> = r1;

        r0.<org.mozilla.universalchardet.prober.SingleByteCharsetProber: boolean reversed> = z0;

        r0.<org.mozilla.universalchardet.prober.SingleByteCharsetProber: org.mozilla.universalchardet.prober.CharsetProber nameProber> = r2;

        $r3 = newarray (int)[4];

        r0.<org.mozilla.universalchardet.prober.SingleByteCharsetProber: int[] seqCounters> = $r3;

        virtualinvoke r0.<org.mozilla.universalchardet.prober.SingleByteCharsetProber: void reset()>();

        return;
    }

    boolean keepEnglishLetters()
    {
        org.mozilla.universalchardet.prober.SingleByteCharsetProber r0;
        org.mozilla.universalchardet.prober.sequence.SequenceModel $r1;
        boolean $z0;

        r0 := @this: org.mozilla.universalchardet.prober.SingleByteCharsetProber;

        $r1 = r0.<org.mozilla.universalchardet.prober.SingleByteCharsetProber: org.mozilla.universalchardet.prober.sequence.SequenceModel model>;

        $z0 = virtualinvoke $r1.<org.mozilla.universalchardet.prober.sequence.SequenceModel: boolean getKeepEnglishLetter()>();

        return $z0;
    }

    public java.lang.String getCharSetName()
    {
        org.mozilla.universalchardet.prober.SingleByteCharsetProber r0;
        org.mozilla.universalchardet.prober.CharsetProber $r1, $r2;
        org.mozilla.universalchardet.prober.sequence.SequenceModel $r4;
        java.lang.String $r3, $r5;

        r0 := @this: org.mozilla.universalchardet.prober.SingleByteCharsetProber;

        $r1 = r0.<org.mozilla.universalchardet.prober.SingleByteCharsetProber: org.mozilla.universalchardet.prober.CharsetProber nameProber>;

        if $r1 != null goto label1;

        $r4 = r0.<org.mozilla.universalchardet.prober.SingleByteCharsetProber: org.mozilla.universalchardet.prober.sequence.SequenceModel model>;

        $r5 = virtualinvoke $r4.<org.mozilla.universalchardet.prober.sequence.SequenceModel: java.lang.String getCharsetName()>();

        return $r5;

     label1:
        $r2 = r0.<org.mozilla.universalchardet.prober.SingleByteCharsetProber: org.mozilla.universalchardet.prober.CharsetProber nameProber>;

        $r3 = virtualinvoke $r2.<org.mozilla.universalchardet.prober.CharsetProber: java.lang.String getCharSetName()>();

        return $r3;
    }

    public float getConfidence()
    {
        byte $b5;
        int[] $r1;
        int $i0, $i1, $i2, $i3, $i4, $i6;
        org.mozilla.universalchardet.prober.SingleByteCharsetProber r0;
        org.mozilla.universalchardet.prober.sequence.SequenceModel $r2;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, f8, f9;

        r0 := @this: org.mozilla.universalchardet.prober.SingleByteCharsetProber;

        $i0 = r0.<org.mozilla.universalchardet.prober.SingleByteCharsetProber: int totalSeqs>;

        if $i0 <= 0 goto label2;

        $r1 = r0.<org.mozilla.universalchardet.prober.SingleByteCharsetProber: int[] seqCounters>;

        $i1 = $r1[3];

        $f0 = (float) $i1;

        $f2 = 1.0F * $f0;

        $i2 = r0.<org.mozilla.universalchardet.prober.SingleByteCharsetProber: int totalSeqs>;

        $f1 = (float) $i2;

        $f3 = $f2 / $f1;

        $r2 = r0.<org.mozilla.universalchardet.prober.SingleByteCharsetProber: org.mozilla.universalchardet.prober.sequence.SequenceModel model>;

        $f4 = virtualinvoke $r2.<org.mozilla.universalchardet.prober.sequence.SequenceModel: float getTypicalPositiveRatio()>();

        f8 = $f3 / $f4;

        $i3 = r0.<org.mozilla.universalchardet.prober.SingleByteCharsetProber: int freqChar>;

        $f5 = (float) $i3;

        $f7 = f8 * $f5;

        $i4 = r0.<org.mozilla.universalchardet.prober.SingleByteCharsetProber: int totalChar>;

        $f6 = (float) $i4;

        f9 = $f7 / $f6;

        $b5 = f9 cmpl 1.0F;

        $i6 = (int) $b5;

        if $i6 < 0 goto label1;

        f9 = 0.99F;

     label1:
        return f9;

     label2:
        return 0.01F;
    }

    public org.mozilla.universalchardet.prober.CharsetProber$ProbingState getState()
    {
        org.mozilla.universalchardet.prober.SingleByteCharsetProber r0;
        org.mozilla.universalchardet.prober.CharsetProber$ProbingState $r1;

        r0 := @this: org.mozilla.universalchardet.prober.SingleByteCharsetProber;

        $r1 = r0.<org.mozilla.universalchardet.prober.SingleByteCharsetProber: org.mozilla.universalchardet.prober.CharsetProber$ProbingState state>;

        return $r1;
    }

    public org.mozilla.universalchardet.prober.CharsetProber$ProbingState handleData(byte[], int, int)
    {
        byte[] r5;
        byte $b4, $b5, $b6, $b16, $b22;
        int[] $r8, $r10;
        boolean $z0;
        org.mozilla.universalchardet.prober.CharsetProber$ProbingState $r1, $r2, $r3, $r4, $r11;
        org.mozilla.universalchardet.prober.sequence.SequenceModel $r6, $r7, $r9;
        float $f0;
        short $s7, $s10, $s13, $s19;
        int i0, i1, i2, $i3, $i8, $i9, $i11, $i12, $i14, $i15, $i17, $i18, $i20, $i21, $i23, $i24, $i25, $i26, i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40;
        org.mozilla.universalchardet.prober.SingleByteCharsetProber r0;

        r0 := @this: org.mozilla.universalchardet.prober.SingleByteCharsetProber;

        r5 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 = i0 + i1;

        i27 = i0;

     label1:
        if i27 >= i2 goto label5;

        $r6 = r0.<org.mozilla.universalchardet.prober.SingleByteCharsetProber: org.mozilla.universalchardet.prober.sequence.SequenceModel model>;

        $b6 = r5[i27];

        $s7 = virtualinvoke $r6.<org.mozilla.universalchardet.prober.sequence.SequenceModel: short getOrder(byte)>($b6);

        $i28 = (int) $s7;

        if $i28 >= 250 goto label2;

        $i25 = r0.<org.mozilla.universalchardet.prober.SingleByteCharsetProber: int totalChar>;

        $i26 = $i25 + 1;

        r0.<org.mozilla.universalchardet.prober.SingleByteCharsetProber: int totalChar> = $i26;

     label2:
        $i29 = (int) $s7;

        if $i29 >= 64 goto label4;

        $i8 = r0.<org.mozilla.universalchardet.prober.SingleByteCharsetProber: int freqChar>;

        $i9 = $i8 + 1;

        r0.<org.mozilla.universalchardet.prober.SingleByteCharsetProber: int freqChar> = $i9;

        $s10 = r0.<org.mozilla.universalchardet.prober.SingleByteCharsetProber: short lastOrder>;

        $i30 = (int) $s10;

        if $i30 >= 64 goto label4;

        $i11 = r0.<org.mozilla.universalchardet.prober.SingleByteCharsetProber: int totalSeqs>;

        $i12 = $i11 + 1;

        r0.<org.mozilla.universalchardet.prober.SingleByteCharsetProber: int totalSeqs> = $i12;

        $z0 = r0.<org.mozilla.universalchardet.prober.SingleByteCharsetProber: boolean reversed>;

        if $z0 != 0 goto label3;

        $r10 = r0.<org.mozilla.universalchardet.prober.SingleByteCharsetProber: int[] seqCounters>;

        $r9 = r0.<org.mozilla.universalchardet.prober.SingleByteCharsetProber: org.mozilla.universalchardet.prober.sequence.SequenceModel model>;

        $s19 = r0.<org.mozilla.universalchardet.prober.SingleByteCharsetProber: short lastOrder>;

        $i31 = (int) $s19;

        $i20 = $i31 * 64;

        $i32 = (int) $s7;

        $i21 = $i20 + $i32;

        $b22 = virtualinvoke $r9.<org.mozilla.universalchardet.prober.sequence.SequenceModel: byte getPrecedence(int)>($i21);

        $i33 = (int) $b22;

        $i23 = $r10[$i33];

        $i24 = $i23 + 1;

        $i34 = (int) $b22;

        $r10[$i34] = $i24;

        goto label4;

     label3:
        $r8 = r0.<org.mozilla.universalchardet.prober.SingleByteCharsetProber: int[] seqCounters>;

        $r7 = r0.<org.mozilla.universalchardet.prober.SingleByteCharsetProber: org.mozilla.universalchardet.prober.sequence.SequenceModel model>;

        $i35 = (int) $s7;

        $i14 = $i35 * 64;

        $s13 = r0.<org.mozilla.universalchardet.prober.SingleByteCharsetProber: short lastOrder>;

        $i36 = (int) $s13;

        $i15 = $i14 + $i36;

        $b16 = virtualinvoke $r7.<org.mozilla.universalchardet.prober.sequence.SequenceModel: byte getPrecedence(int)>($i15);

        $i37 = (int) $b16;

        $i17 = $r8[$i37];

        $i18 = $i17 + 1;

        $i38 = (int) $b16;

        $r8[$i38] = $i18;

     label4:
        r0.<org.mozilla.universalchardet.prober.SingleByteCharsetProber: short lastOrder> = $s7;

        i27 = i27 + 1;

        goto label1;

     label5:
        $r2 = r0.<org.mozilla.universalchardet.prober.SingleByteCharsetProber: org.mozilla.universalchardet.prober.CharsetProber$ProbingState state>;

        $r1 = <org.mozilla.universalchardet.prober.CharsetProber$ProbingState: org.mozilla.universalchardet.prober.CharsetProber$ProbingState DETECTING>;

        if $r2 != $r1 goto label7;

        $i3 = r0.<org.mozilla.universalchardet.prober.SingleByteCharsetProber: int totalSeqs>;

        if $i3 <= 1024 goto label7;

        $f0 = virtualinvoke r0.<org.mozilla.universalchardet.prober.SingleByteCharsetProber: float getConfidence()>();

        $b4 = $f0 cmpl 0.95F;

        $i39 = (int) $b4;

        if $i39 <= 0 goto label6;

        $r4 = <org.mozilla.universalchardet.prober.CharsetProber$ProbingState: org.mozilla.universalchardet.prober.CharsetProber$ProbingState FOUND_IT>;

        r0.<org.mozilla.universalchardet.prober.SingleByteCharsetProber: org.mozilla.universalchardet.prober.CharsetProber$ProbingState state> = $r4;

        goto label7;

     label6:
        $b5 = $f0 cmpg 0.05F;

        $i40 = (int) $b5;

        if $i40 >= 0 goto label7;

        $r3 = <org.mozilla.universalchardet.prober.CharsetProber$ProbingState: org.mozilla.universalchardet.prober.CharsetProber$ProbingState NOT_ME>;

        r0.<org.mozilla.universalchardet.prober.SingleByteCharsetProber: org.mozilla.universalchardet.prober.CharsetProber$ProbingState state> = $r3;

     label7:
        $r11 = r0.<org.mozilla.universalchardet.prober.SingleByteCharsetProber: org.mozilla.universalchardet.prober.CharsetProber$ProbingState state>;

        return $r11;
    }

    public void reset()
    {
        org.mozilla.universalchardet.prober.SingleByteCharsetProber r0;
        org.mozilla.universalchardet.prober.CharsetProber$ProbingState $r1;
        int[] $r2;
        int i0;

        r0 := @this: org.mozilla.universalchardet.prober.SingleByteCharsetProber;

        $r1 = <org.mozilla.universalchardet.prober.CharsetProber$ProbingState: org.mozilla.universalchardet.prober.CharsetProber$ProbingState DETECTING>;

        r0.<org.mozilla.universalchardet.prober.SingleByteCharsetProber: org.mozilla.universalchardet.prober.CharsetProber$ProbingState state> = $r1;

        r0.<org.mozilla.universalchardet.prober.SingleByteCharsetProber: short lastOrder> = 255;

        i0 = 0;

     label1:
        if i0 >= 4 goto label2;

        $r2 = r0.<org.mozilla.universalchardet.prober.SingleByteCharsetProber: int[] seqCounters>;

        $r2[i0] = 0;

        i0 = i0 + 1;

        goto label1;

     label2:
        r0.<org.mozilla.universalchardet.prober.SingleByteCharsetProber: int totalSeqs> = 0;

        r0.<org.mozilla.universalchardet.prober.SingleByteCharsetProber: int totalChar> = 0;

        r0.<org.mozilla.universalchardet.prober.SingleByteCharsetProber: int freqChar> = 0;

        return;
    }

    public void setOption()
    {
        org.mozilla.universalchardet.prober.SingleByteCharsetProber r0;

        r0 := @this: org.mozilla.universalchardet.prober.SingleByteCharsetProber;

        return;
    }

    public static void <clinit>()
    {
        <org.mozilla.universalchardet.prober.SingleByteCharsetProber: int NEGATIVE_CAT> = 0;

        <org.mozilla.universalchardet.prober.SingleByteCharsetProber: int POSITIVE_CAT> = 3;

        <org.mozilla.universalchardet.prober.SingleByteCharsetProber: int NUMBER_OF_SEQ_CAT> = 4;

        <org.mozilla.universalchardet.prober.SingleByteCharsetProber: int SYMBOL_CAT_ORDER> = 250;

        <org.mozilla.universalchardet.prober.SingleByteCharsetProber: float NEGATIVE_SHORTCUT_THRESHOLD> = 0.05F;

        <org.mozilla.universalchardet.prober.SingleByteCharsetProber: float POSITIVE_SHORTCUT_THRESHOLD> = 0.95F;

        <org.mozilla.universalchardet.prober.SingleByteCharsetProber: int SB_ENOUGH_REL_THRESHOLD> = 1024;

        <org.mozilla.universalchardet.prober.SingleByteCharsetProber: int SAMPLE_SIZE> = 64;

        return;
    }
}
