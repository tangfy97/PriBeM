public class com.adobe.xmp.XMPUtils extends java.lang.Object
{

    private void <init>()
    {
        com.adobe.xmp.XMPUtils r0;

        r0 := @this: com.adobe.xmp.XMPUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.String catenateArrayItems(com.adobe.xmp.XMPMeta, java.lang.String, java.lang.String, java.lang.String, java.lang.String, boolean) throws com.adobe.xmp.XMPException
    {
        com.adobe.xmp.XMPMeta r0;
        java.lang.String r1, r2, r3, r4, $r5;
        boolean z0;

        r0 := @parameter0: com.adobe.xmp.XMPMeta;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.String;

        r4 := @parameter4: java.lang.String;

        z0 := @parameter5: boolean;

        $r5 = staticinvoke <com.adobe.xmp.impl.XMPUtilsImpl: java.lang.String catenateArrayItems(com.adobe.xmp.XMPMeta,java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)>(r0, r1, r2, r3, r4, z0);

        return $r5;
    }

    public static void separateArrayItems(com.adobe.xmp.XMPMeta, java.lang.String, java.lang.String, java.lang.String, com.adobe.xmp.options.PropertyOptions, boolean) throws com.adobe.xmp.XMPException
    {
        com.adobe.xmp.options.PropertyOptions r4;
        com.adobe.xmp.XMPMeta r0;
        java.lang.String r1, r2, r3;
        boolean z0;

        r0 := @parameter0: com.adobe.xmp.XMPMeta;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.String;

        r4 := @parameter4: com.adobe.xmp.options.PropertyOptions;

        z0 := @parameter5: boolean;

        staticinvoke <com.adobe.xmp.impl.XMPUtilsImpl: void separateArrayItems(com.adobe.xmp.XMPMeta,java.lang.String,java.lang.String,java.lang.String,com.adobe.xmp.options.PropertyOptions,boolean)>(r0, r1, r2, r3, r4, z0);

        return;
    }

    public static void removeProperties(com.adobe.xmp.XMPMeta, java.lang.String, java.lang.String, boolean, boolean) throws com.adobe.xmp.XMPException
    {
        com.adobe.xmp.XMPMeta r0;
        java.lang.String r1, r2;
        boolean z0, z1;

        r0 := @parameter0: com.adobe.xmp.XMPMeta;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        z0 := @parameter3: boolean;

        z1 := @parameter4: boolean;

        staticinvoke <com.adobe.xmp.impl.XMPUtilsImpl: void removeProperties(com.adobe.xmp.XMPMeta,java.lang.String,java.lang.String,boolean,boolean)>(r0, r1, r2, z0, z1);

        return;
    }

    public static void appendProperties(com.adobe.xmp.XMPMeta, com.adobe.xmp.XMPMeta, boolean, boolean) throws com.adobe.xmp.XMPException
    {
        com.adobe.xmp.XMPMeta r0, r1;
        boolean z0, z1;

        r0 := @parameter0: com.adobe.xmp.XMPMeta;

        r1 := @parameter1: com.adobe.xmp.XMPMeta;

        z0 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        staticinvoke <com.adobe.xmp.XMPUtils: void appendProperties(com.adobe.xmp.XMPMeta,com.adobe.xmp.XMPMeta,boolean,boolean,boolean)>(r0, r1, z0, z1, 0);

        return;
    }

    public static void appendProperties(com.adobe.xmp.XMPMeta, com.adobe.xmp.XMPMeta, boolean, boolean, boolean) throws com.adobe.xmp.XMPException
    {
        com.adobe.xmp.XMPMeta r0, r1;
        boolean z0, z1, z2;

        r0 := @parameter0: com.adobe.xmp.XMPMeta;

        r1 := @parameter1: com.adobe.xmp.XMPMeta;

        z0 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        z2 := @parameter4: boolean;

        staticinvoke <com.adobe.xmp.impl.XMPUtilsImpl: void appendProperties(com.adobe.xmp.XMPMeta,com.adobe.xmp.XMPMeta,boolean,boolean,boolean)>(r0, r1, z0, z1, z2);

        return;
    }

    public static boolean convertToBoolean(java.lang.String) throws com.adobe.xmp.XMPException
    {
        com.adobe.xmp.XMPException $r0;
        int $i0, $i1;
        java.lang.String $r1, $r3, $r4, $r5, $r6, r7;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.lang.NumberFormatException $r2;

        r7 := @parameter0: java.lang.String;

        if r7 == null goto label1;

        $i0 = virtualinvoke r7.<java.lang.String: int length()>();

        if $i0 != 0 goto label2;

     label1:
        $r0 = new com.adobe.xmp.XMPException;

        specialinvoke $r0.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Empty convert-string", 5);

        throw $r0;

     label2:
        $r1 = virtualinvoke r7.<java.lang.String: java.lang.String toLowerCase()>();

     label3:
        $i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r1);

        if $i1 == 0 goto label4;

        $z4 = 1;

        goto label5;

     label4:
        $z4 = 0;

     label5:
        return $z4;

     label6:
        $r2 := @caughtexception;

        $r3 = "true";

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 != 0 goto label7;

        $r4 = "t";

        $z1 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z1 != 0 goto label7;

        $r5 = "on";

        $z2 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z2 != 0 goto label7;

        $r6 = "yes";

        $z3 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z3 == 0 goto label8;

     label7:
        $z5 = 1;

        goto label9;

     label8:
        $z5 = 0;

     label9:
        return $z5;

        catch java.lang.NumberFormatException from label3 to label5 with label6;
    }

    public static java.lang.String convertFromBoolean(boolean)
    {
        java.lang.String $r0;
        boolean z0;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        $r0 = "True";

        goto label2;

     label1:
        $r0 = "False";

     label2:
        return $r0;
    }

    public static int convertToInteger(java.lang.String) throws com.adobe.xmp.XMPException
    {
        java.lang.NumberFormatException $r3;
        com.adobe.xmp.XMPException $r1, $r4;
        int $i0, $i1, $i2;
        java.lang.String r0, $r2;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

     label1:
        if r0 == null goto label2;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 != 0 goto label3;

     label2:
        $r1 = new com.adobe.xmp.XMPException;

        specialinvoke $r1.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Empty convert-string", 5);

        throw $r1;

     label3:
        $z0 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("0x");

        if $z0 == 0 goto label5;

        $r2 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>(2);

        $i2 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>($r2, 16);

     label4:
        return $i2;

     label5:
        $i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r0);

     label6:
        return $i1;

     label7:
        $r3 := @caughtexception;

        $r4 = new com.adobe.xmp.XMPException;

        specialinvoke $r4.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Invalid integer string", 5);

        throw $r4;

        catch java.lang.NumberFormatException from label1 to label4 with label7;
        catch java.lang.NumberFormatException from label5 to label6 with label7;
    }

    public static java.lang.String convertFromInteger(int)
    {
        int i0;
        java.lang.String $r0;

        i0 := @parameter0: int;

        $r0 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(i0);

        return $r0;
    }

    public static long convertToLong(java.lang.String) throws com.adobe.xmp.XMPException
    {
        long $l1, $l2;
        java.lang.NumberFormatException $r3;
        com.adobe.xmp.XMPException $r1, $r4;
        int $i0;
        java.lang.String r0, $r2;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

     label1:
        if r0 == null goto label2;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 != 0 goto label3;

     label2:
        $r1 = new com.adobe.xmp.XMPException;

        specialinvoke $r1.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Empty convert-string", 5);

        throw $r1;

     label3:
        $z0 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("0x");

        if $z0 == 0 goto label5;

        $r2 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>(2);

        $l2 = staticinvoke <java.lang.Long: long parseLong(java.lang.String,int)>($r2, 16);

     label4:
        return $l2;

     label5:
        $l1 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>(r0);

     label6:
        return $l1;

     label7:
        $r3 := @caughtexception;

        $r4 = new com.adobe.xmp.XMPException;

        specialinvoke $r4.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Invalid long string", 5);

        throw $r4;

        catch java.lang.NumberFormatException from label1 to label4 with label7;
        catch java.lang.NumberFormatException from label5 to label6 with label7;
    }

    public static java.lang.String convertFromLong(long)
    {
        long l0;
        java.lang.String $r0;

        l0 := @parameter0: long;

        $r0 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>(l0);

        return $r0;
    }

    public static double convertToDouble(java.lang.String) throws com.adobe.xmp.XMPException
    {
        com.adobe.xmp.XMPException $r1, $r3;
        int $i0;
        java.lang.NumberFormatException $r2;
        java.lang.String r0;
        double $d0;

        r0 := @parameter0: java.lang.String;

     label1:
        if r0 == null goto label2;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 != 0 goto label3;

     label2:
        $r1 = new com.adobe.xmp.XMPException;

        specialinvoke $r1.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Empty convert-string", 5);

        throw $r1;

     label3:
        $d0 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>(r0);

     label4:
        return $d0;

     label5:
        $r2 := @caughtexception;

        $r3 = new com.adobe.xmp.XMPException;

        specialinvoke $r3.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Invalid double string", 5);

        throw $r3;

        catch java.lang.NumberFormatException from label1 to label4 with label5;
    }

    public static java.lang.String convertFromDouble(double)
    {
        java.lang.String $r0;
        double d0;

        d0 := @parameter0: double;

        $r0 = staticinvoke <java.lang.String: java.lang.String valueOf(double)>(d0);

        return $r0;
    }

    public static com.adobe.xmp.XMPDateTime convertToDate(java.lang.String) throws com.adobe.xmp.XMPException
    {
        com.adobe.xmp.XMPDateTime $r2;
        com.adobe.xmp.XMPException $r1;
        int $i0;
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 != 0 goto label2;

     label1:
        $r1 = new com.adobe.xmp.XMPException;

        specialinvoke $r1.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Empty convert-string", 5);

        throw $r1;

     label2:
        $r2 = staticinvoke <com.adobe.xmp.impl.ISO8601Converter: com.adobe.xmp.XMPDateTime parse(java.lang.String)>(r0);

        return $r2;
    }

    public static java.lang.String convertFromDate(com.adobe.xmp.XMPDateTime)
    {
        com.adobe.xmp.XMPDateTime r0;
        java.lang.String $r1;

        r0 := @parameter0: com.adobe.xmp.XMPDateTime;

        $r1 = staticinvoke <com.adobe.xmp.impl.ISO8601Converter: java.lang.String render(com.adobe.xmp.XMPDateTime)>(r0);

        return $r1;
    }

    public static java.lang.String encodeBase64(byte[])
    {
        byte[] r1, $r2;
        java.lang.String $r0;

        r1 := @parameter0: byte[];

        $r0 = new java.lang.String;

        $r2 = staticinvoke <com.adobe.xmp.impl.Base64: byte[] encode(byte[])>(r1);

        specialinvoke $r0.<java.lang.String: void <init>(byte[])>($r2);

        return $r0;
    }

    public static byte[] decodeBase64(java.lang.String) throws com.adobe.xmp.XMPException
    {
        java.lang.Throwable $r3;
        byte[] $r1, $r2;
        com.adobe.xmp.XMPException $r4;
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = virtualinvoke r0.<java.lang.String: byte[] getBytes()>();

        $r2 = staticinvoke <com.adobe.xmp.impl.Base64: byte[] decode(byte[])>($r1);

     label2:
        return $r2;

     label3:
        $r3 := @caughtexception;

        $r4 = new com.adobe.xmp.XMPException;

        specialinvoke $r4.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int,java.lang.Throwable)>("Invalid base64 string", 5, $r3);

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
}
