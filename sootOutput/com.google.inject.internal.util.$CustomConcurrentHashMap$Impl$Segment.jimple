final class com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment extends java.util.concurrent.locks.ReentrantLock
{
    volatile int count;
    int modCount;
    int threshold;
    volatile java.util.concurrent.atomic.AtomicReferenceArray table;
    final com.google.inject.internal.util.$CustomConcurrentHashMap$Impl this$0;

    void <init>(com.google.inject.internal.util.$CustomConcurrentHashMap$Impl, int)
    {
        com.google.inject.internal.util.$CustomConcurrentHashMap$Impl r1;
        com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment r0;
        int i0;
        java.util.concurrent.atomic.AtomicReferenceArray $r2;

        r0 := @this: com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment;

        r1 := @parameter0: com.google.inject.internal.util.$CustomConcurrentHashMap$Impl;

        i0 := @parameter1: int;

        r0.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment: com.google.inject.internal.util.$CustomConcurrentHashMap$Impl this$0> = r1;

        specialinvoke r0.<java.util.concurrent.locks.ReentrantLock: void <init>()>();

        $r2 = virtualinvoke r0.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment: java.util.concurrent.atomic.AtomicReferenceArray newEntryArray(int)>(i0);

        virtualinvoke r0.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment: void setTable(java.util.concurrent.atomic.AtomicReferenceArray)>($r2);

        return;
    }

    java.util.concurrent.atomic.AtomicReferenceArray newEntryArray(int)
    {
        int i0;
        com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment r1;
        java.util.concurrent.atomic.AtomicReferenceArray $r0;

        r1 := @this: com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment;

        i0 := @parameter0: int;

        $r0 = new java.util.concurrent.atomic.AtomicReferenceArray;

        specialinvoke $r0.<java.util.concurrent.atomic.AtomicReferenceArray: void <init>(int)>(i0);

        return $r0;
    }

    void setTable(java.util.concurrent.atomic.AtomicReferenceArray)
    {
        java.util.concurrent.atomic.AtomicReferenceArray r1;
        com.google.inject.internal.util.$CustomConcurrentHashMap$Impl $r2;
        com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment r0;
        int $i0, $i1;
        float $f0, $f1, $f2;

        r0 := @this: com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment;

        r1 := @parameter0: java.util.concurrent.atomic.AtomicReferenceArray;

        $i0 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicReferenceArray: int length()>();

        $f1 = (float) $i0;

        $r2 = r0.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment: com.google.inject.internal.util.$CustomConcurrentHashMap$Impl this$0>;

        $f0 = $r2.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl: float loadFactor>;

        $f2 = $f1 * $f0;

        $i1 = (int) $f2;

        r0.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment: int threshold> = $i1;

        r0.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment: java.util.concurrent.atomic.AtomicReferenceArray table> = r1;

        return;
    }

    java.lang.Object getFirst(int)
    {
        com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment r0;
        int i0, $i1, $i2, $i3;
        java.lang.Object $r2;
        java.util.concurrent.atomic.AtomicReferenceArray r1;

        r0 := @this: com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment;

        i0 := @parameter0: int;

        r1 = r0.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment: java.util.concurrent.atomic.AtomicReferenceArray table>;

        $i1 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicReferenceArray: int length()>();

        $i2 = $i1 - 1;

        $i3 = i0 & $i2;

        $r2 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicReferenceArray: java.lang.Object get(int)>($i3);

        return $r2;
    }

    public java.lang.Object getEntry(java.lang.Object, int)
    {
        com.google.inject.internal.util.$CustomConcurrentHashMap$Strategy r2;
        com.google.inject.internal.util.$CustomConcurrentHashMap$Impl $r1;
        com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment r0;
        int $i0, i1, $i2;
        java.lang.Object $r3, r4, r5;
        boolean $z0;

        r0 := @this: com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment;

        r4 := @parameter0: java.lang.Object;

        i1 := @parameter1: int;

        $r1 = r0.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment: com.google.inject.internal.util.$CustomConcurrentHashMap$Impl this$0>;

        r2 = $r1.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl: com.google.inject.internal.util.$CustomConcurrentHashMap$Strategy strategy>;

        $i0 = r0.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment: int count>;

        if $i0 == 0 goto label5;

        r5 = virtualinvoke r0.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment: java.lang.Object getFirst(int)>(i1);

     label1:
        if r5 == null goto label5;

        $i2 = interfaceinvoke r2.<com.google.inject.internal.util.$CustomConcurrentHashMap$Strategy: int getHash(java.lang.Object)>(r5);

        if $i2 == i1 goto label2;

        goto label4;

     label2:
        $r3 = interfaceinvoke r2.<com.google.inject.internal.util.$CustomConcurrentHashMap$Strategy: java.lang.Object getKey(java.lang.Object)>(r5);

        if $r3 != null goto label3;

        goto label4;

     label3:
        $z0 = interfaceinvoke r2.<com.google.inject.internal.util.$CustomConcurrentHashMap$Strategy: boolean equalKeys(java.lang.Object,java.lang.Object)>($r3, r4);

        if $z0 == 0 goto label4;

        return r5;

     label4:
        r5 = interfaceinvoke r2.<com.google.inject.internal.util.$CustomConcurrentHashMap$Strategy: java.lang.Object getNext(java.lang.Object)>(r5);

        goto label1;

     label5:
        return null;
    }

    java.lang.Object get(java.lang.Object, int)
    {
        com.google.inject.internal.util.$CustomConcurrentHashMap$Strategy $r4;
        com.google.inject.internal.util.$CustomConcurrentHashMap$Impl $r3;
        com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment r0;
        int i0;
        java.lang.Object r1, $r2, $r5;

        r0 := @this: com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment;

        r1 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        $r2 = virtualinvoke r0.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment: java.lang.Object getEntry(java.lang.Object,int)>(r1, i0);

        if $r2 != null goto label1;

        return null;

     label1:
        $r3 = r0.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment: com.google.inject.internal.util.$CustomConcurrentHashMap$Impl this$0>;

        $r4 = $r3.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl: com.google.inject.internal.util.$CustomConcurrentHashMap$Strategy strategy>;

        $r5 = interfaceinvoke $r4.<com.google.inject.internal.util.$CustomConcurrentHashMap$Strategy: java.lang.Object getValue(java.lang.Object)>($r2);

        return $r5;
    }

    boolean containsKey(java.lang.Object, int)
    {
        com.google.inject.internal.util.$CustomConcurrentHashMap$Strategy r2;
        com.google.inject.internal.util.$CustomConcurrentHashMap$Impl $r1;
        com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment r0;
        int $i0, i1, $i2;
        java.lang.Object $r3, r4, $r5, r6;
        boolean $z0, $z1;

        r0 := @this: com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment;

        r4 := @parameter0: java.lang.Object;

        i1 := @parameter1: int;

        $r1 = r0.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment: com.google.inject.internal.util.$CustomConcurrentHashMap$Impl this$0>;

        r2 = $r1.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl: com.google.inject.internal.util.$CustomConcurrentHashMap$Strategy strategy>;

        $i0 = r0.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment: int count>;

        if $i0 == 0 goto label7;

        r6 = virtualinvoke r0.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment: java.lang.Object getFirst(int)>(i1);

     label1:
        if r6 == null goto label7;

        $i2 = interfaceinvoke r2.<com.google.inject.internal.util.$CustomConcurrentHashMap$Strategy: int getHash(java.lang.Object)>(r6);

        if $i2 == i1 goto label2;

        goto label6;

     label2:
        $r3 = interfaceinvoke r2.<com.google.inject.internal.util.$CustomConcurrentHashMap$Strategy: java.lang.Object getKey(java.lang.Object)>(r6);

        if $r3 != null goto label3;

        goto label6;

     label3:
        $z0 = interfaceinvoke r2.<com.google.inject.internal.util.$CustomConcurrentHashMap$Strategy: boolean equalKeys(java.lang.Object,java.lang.Object)>($r3, r4);

        if $z0 == 0 goto label6;

        $r5 = interfaceinvoke r2.<com.google.inject.internal.util.$CustomConcurrentHashMap$Strategy: java.lang.Object getValue(java.lang.Object)>(r6);

        if $r5 == null goto label4;

        $z1 = 1;

        goto label5;

     label4:
        $z1 = 0;

     label5:
        return $z1;

     label6:
        r6 = interfaceinvoke r2.<com.google.inject.internal.util.$CustomConcurrentHashMap$Strategy: java.lang.Object getNext(java.lang.Object)>(r6);

        goto label1;

     label7:
        return 0;
    }

    boolean containsValue(java.lang.Object)
    {
        java.util.concurrent.atomic.AtomicReferenceArray r3;
        com.google.inject.internal.util.$CustomConcurrentHashMap$Strategy r2;
        com.google.inject.internal.util.$CustomConcurrentHashMap$Impl $r1;
        com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment r0;
        int $i0, $i1, i2;
        java.lang.Object $r4, r5, r6;
        boolean $z0;

        r0 := @this: com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment;

        r5 := @parameter0: java.lang.Object;

        $r1 = r0.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment: com.google.inject.internal.util.$CustomConcurrentHashMap$Impl this$0>;

        r2 = $r1.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl: com.google.inject.internal.util.$CustomConcurrentHashMap$Strategy strategy>;

        $i0 = r0.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment: int count>;

        if $i0 == 0 goto label6;

        r3 = r0.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment: java.util.concurrent.atomic.AtomicReferenceArray table>;

        $i1 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicReferenceArray: int length()>();

        i2 = 0;

     label1:
        if i2 >= $i1 goto label6;

        r6 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicReferenceArray: java.lang.Object get(int)>(i2);

     label2:
        if r6 == null goto label5;

        $r4 = interfaceinvoke r2.<com.google.inject.internal.util.$CustomConcurrentHashMap$Strategy: java.lang.Object getValue(java.lang.Object)>(r6);

        if $r4 != null goto label3;

        goto label4;

     label3:
        $z0 = interfaceinvoke r2.<com.google.inject.internal.util.$CustomConcurrentHashMap$Strategy: boolean equalValues(java.lang.Object,java.lang.Object)>($r4, r5);

        if $z0 == 0 goto label4;

        return 1;

     label4:
        r6 = interfaceinvoke r2.<com.google.inject.internal.util.$CustomConcurrentHashMap$Strategy: java.lang.Object getNext(java.lang.Object)>(r6);

        goto label2;

     label5:
        i2 = i2 + 1;

        goto label1;

     label6:
        return 0;
    }

    boolean replace(java.lang.Object, int, java.lang.Object, java.lang.Object)
    {
        java.lang.Throwable $r8;
        com.google.inject.internal.util.$CustomConcurrentHashMap$Strategy r2;
        com.google.inject.internal.util.$CustomConcurrentHashMap$Impl $r1;
        com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment r0;
        int i0, $i1;
        java.lang.Object $r3, r4, $r5, r6, r7, r9;
        boolean $z0, $z1;

        r0 := @this: com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment;

        r4 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        r6 := @parameter2: java.lang.Object;

        r7 := @parameter3: java.lang.Object;

        $r1 = r0.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment: com.google.inject.internal.util.$CustomConcurrentHashMap$Impl this$0>;

        r2 = $r1.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl: com.google.inject.internal.util.$CustomConcurrentHashMap$Strategy strategy>;

        virtualinvoke r0.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment: void lock()>();

     label1:
        r9 = virtualinvoke r0.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment: java.lang.Object getFirst(int)>(i0);

     label2:
        if r9 == null goto label7;

        $r3 = interfaceinvoke r2.<com.google.inject.internal.util.$CustomConcurrentHashMap$Strategy: java.lang.Object getKey(java.lang.Object)>(r9);

        $i1 = interfaceinvoke r2.<com.google.inject.internal.util.$CustomConcurrentHashMap$Strategy: int getHash(java.lang.Object)>(r9);

        if $i1 != i0 goto label6;

        if $r3 == null goto label6;

        $z0 = interfaceinvoke r2.<com.google.inject.internal.util.$CustomConcurrentHashMap$Strategy: boolean equalKeys(java.lang.Object,java.lang.Object)>(r4, $r3);

        if $z0 == 0 goto label6;

        $r5 = interfaceinvoke r2.<com.google.inject.internal.util.$CustomConcurrentHashMap$Strategy: java.lang.Object getValue(java.lang.Object)>(r9);

        if $r5 != null goto label4;

     label3:
        virtualinvoke r0.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment: void unlock()>();

        return 0;

     label4:
        $z1 = interfaceinvoke r2.<com.google.inject.internal.util.$CustomConcurrentHashMap$Strategy: boolean equalValues(java.lang.Object,java.lang.Object)>($r5, r6);

        if $z1 == 0 goto label6;

        interfaceinvoke r2.<com.google.inject.internal.util.$CustomConcurrentHashMap$Strategy: void setValue(java.lang.Object,java.lang.Object)>(r9, r7);

     label5:
        virtualinvoke r0.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment: void unlock()>();

        return 1;

     label6:
        r9 = interfaceinvoke r2.<com.google.inject.internal.util.$CustomConcurrentHashMap$Strategy: java.lang.Object getNext(java.lang.Object)>(r9);

        goto label2;

     label7:
        virtualinvoke r0.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment: void unlock()>();

        return 0;

     label8:
        $r8 := @caughtexception;

     label9:
        virtualinvoke r0.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment: void unlock()>();

        throw $r8;

        catch java.lang.Throwable from label1 to label3 with label8;
        catch java.lang.Throwable from label4 to label5 with label8;
        catch java.lang.Throwable from label6 to label7 with label8;
        catch java.lang.Throwable from label8 to label9 with label8;
    }

    java.lang.Object replace(java.lang.Object, int, java.lang.Object)
    {
        java.lang.Throwable $r7;
        com.google.inject.internal.util.$CustomConcurrentHashMap$Strategy r2;
        com.google.inject.internal.util.$CustomConcurrentHashMap$Impl $r1;
        com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment r0;
        int i0, $i1;
        java.lang.Object $r3, r4, $r5, r6, r8;
        boolean $z0;

        r0 := @this: com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment;

        r4 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        r6 := @parameter2: java.lang.Object;

        $r1 = r0.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment: com.google.inject.internal.util.$CustomConcurrentHashMap$Impl this$0>;

        r2 = $r1.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl: com.google.inject.internal.util.$CustomConcurrentHashMap$Strategy strategy>;

        virtualinvoke r0.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment: void lock()>();

     label1:
        r8 = virtualinvoke r0.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment: java.lang.Object getFirst(int)>(i0);

     label2:
        if r8 == null goto label7;

        $r3 = interfaceinvoke r2.<com.google.inject.internal.util.$CustomConcurrentHashMap$Strategy: java.lang.Object getKey(java.lang.Object)>(r8);

        $i1 = interfaceinvoke r2.<com.google.inject.internal.util.$CustomConcurrentHashMap$Strategy: int getHash(java.lang.Object)>(r8);

        if $i1 != i0 goto label6;

        if $r3 == null goto label6;

        $z0 = interfaceinvoke r2.<com.google.inject.internal.util.$CustomConcurrentHashMap$Strategy: boolean equalKeys(java.lang.Object,java.lang.Object)>(r4, $r3);

        if $z0 == 0 goto label6;

        $r5 = interfaceinvoke r2.<com.google.inject.internal.util.$CustomConcurrentHashMap$Strategy: java.lang.Object getValue(java.lang.Object)>(r8);

        if $r5 != null goto label4;

     label3:
        virtualinvoke r0.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment: void unlock()>();

        return null;

     label4:
        interfaceinvoke r2.<com.google.inject.internal.util.$CustomConcurrentHashMap$Strategy: void setValue(java.lang.Object,java.lang.Object)>(r8, r6);

     label5:
        virtualinvoke r0.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment: void unlock()>();

        return $r5;

     label6:
        r8 = interfaceinvoke r2.<com.google.inject.internal.util.$CustomConcurrentHashMap$Strategy: java.lang.Object getNext(java.lang.Object)>(r8);

        goto label2;

     label7:
        virtualinvoke r0.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment: void unlock()>();

        return null;

     label8:
        $r7 := @caughtexception;

     label9:
        virtualinvoke r0.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment: void unlock()>();

        throw $r7;

        catch java.lang.Throwable from label1 to label3 with label8;
        catch java.lang.Throwable from label4 to label5 with label8;
        catch java.lang.Throwable from label6 to label7 with label8;
        catch java.lang.Throwable from label8 to label9 with label8;
    }

    java.lang.Object put(java.lang.Object, int, java.lang.Object, boolean)
    {
        java.lang.Throwable $r10;
        java.util.concurrent.atomic.AtomicReferenceArray $r9;
        com.google.inject.internal.util.$CustomConcurrentHashMap$Impl $r1;
        int $i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, i9;
        boolean $z0, z1;
        com.google.inject.internal.util.$CustomConcurrentHashMap$Strategy r2;
        com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment r0;
        java.lang.Object $r3, r4, $r5, r6, $r7, $r8, r11;

        r0 := @this: com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment;

        r4 := @parameter0: java.lang.Object;

        i1 := @parameter1: int;

        r6 := @parameter2: java.lang.Object;

        z1 := @parameter3: boolean;

        $r1 = r0.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment: com.google.inject.internal.util.$CustomConcurrentHashMap$Impl this$0>;

        r2 = $r1.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl: com.google.inject.internal.util.$CustomConcurrentHashMap$Strategy strategy>;

        virtualinvoke r0.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment: void lock()>();

     label01:
        i8 = r0.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment: int count>;

        i9 = i8 + 1;

        $i0 = r0.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment: int threshold>;

        if i8 <= $i0 goto label02;

        virtualinvoke r0.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment: void expand()>();

     label02:
        $r9 = r0.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment: java.util.concurrent.atomic.AtomicReferenceArray table>;

        $i2 = virtualinvoke $r9.<java.util.concurrent.atomic.AtomicReferenceArray: int length()>();

        $i3 = $i2 - 1;

        $i7 = i1 & $i3;

        $r3 = virtualinvoke $r9.<java.util.concurrent.atomic.AtomicReferenceArray: java.lang.Object get(int)>($i7);

        r11 = $r3;

     label03:
        if r11 == null goto label08;

        $r7 = interfaceinvoke r2.<com.google.inject.internal.util.$CustomConcurrentHashMap$Strategy: java.lang.Object getKey(java.lang.Object)>(r11);

        $i6 = interfaceinvoke r2.<com.google.inject.internal.util.$CustomConcurrentHashMap$Strategy: int getHash(java.lang.Object)>(r11);

        if $i6 != i1 goto label07;

        if $r7 == null goto label07;

        $z0 = interfaceinvoke r2.<com.google.inject.internal.util.$CustomConcurrentHashMap$Strategy: boolean equalKeys(java.lang.Object,java.lang.Object)>(r4, $r7);

        if $z0 == 0 goto label07;

        $r8 = interfaceinvoke r2.<com.google.inject.internal.util.$CustomConcurrentHashMap$Strategy: java.lang.Object getValue(java.lang.Object)>(r11);

        if z1 == 0 goto label05;

        if $r8 == null goto label05;

     label04:
        virtualinvoke r0.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment: void unlock()>();

        return $r8;

     label05:
        interfaceinvoke r2.<com.google.inject.internal.util.$CustomConcurrentHashMap$Strategy: void setValue(java.lang.Object,java.lang.Object)>(r11, r6);

     label06:
        virtualinvoke r0.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment: void unlock()>();

        return $r8;

     label07:
        r11 = interfaceinvoke r2.<com.google.inject.internal.util.$CustomConcurrentHashMap$Strategy: java.lang.Object getNext(java.lang.Object)>(r11);

        goto label03;

     label08:
        $i4 = r0.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment: int modCount>;

        $i5 = $i4 + 1;

        r0.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment: int modCount> = $i5;

        $r5 = interfaceinvoke r2.<com.google.inject.internal.util.$CustomConcurrentHashMap$Strategy: java.lang.Object newEntry(java.lang.Object,int,java.lang.Object)>(r4, i1, $r3);

        interfaceinvoke r2.<com.google.inject.internal.util.$CustomConcurrentHashMap$Strategy: void setValue(java.lang.Object,java.lang.Object)>($r5, r6);

        virtualinvoke $r9.<java.util.concurrent.atomic.AtomicReferenceArray: void set(int,java.lang.Object)>($i7, $r5);

        r0.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment: int count> = i9;

     label09:
        virtualinvoke r0.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment: void unlock()>();

        return null;

     label10:
        $r10 := @caughtexception;

     label11:
        virtualinvoke r0.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment: void unlock()>();

        throw $r10;

        catch java.lang.Throwable from label01 to label04 with label10;
        catch java.lang.Throwable from label05 to label06 with label10;
        catch java.lang.Throwable from label07 to label09 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
    }

    void expand()
    {
        java.util.concurrent.atomic.AtomicReferenceArray r1, $r4;
        com.google.inject.internal.util.$CustomConcurrentHashMap$Impl $r2, $r5;
        int $i0, $i1, $i2, $i3, $i4, i5, $i6, i7, $i8, i9, $i10, i11, i12, i13;
        com.google.inject.internal.util.$CustomConcurrentHashMap$Strategy r3;
        com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment r0;
        float $f0, $f1, $f2;
        java.lang.Object $r6, $r7, $r8, $r9, $r10, r11, r12, r13;

        r0 := @this: com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment;

        r1 = r0.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment: java.util.concurrent.atomic.AtomicReferenceArray table>;

        $i0 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicReferenceArray: int length()>();

        if $i0 < 1073741824 goto label01;

        return;

     label01:
        $r2 = r0.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment: com.google.inject.internal.util.$CustomConcurrentHashMap$Impl this$0>;

        r3 = $r2.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl: com.google.inject.internal.util.$CustomConcurrentHashMap$Strategy strategy>;

        $i1 = $i0 << 1;

        $r4 = virtualinvoke r0.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment: java.util.concurrent.atomic.AtomicReferenceArray newEntryArray(int)>($i1);

        $i2 = virtualinvoke $r4.<java.util.concurrent.atomic.AtomicReferenceArray: int length()>();

        $f1 = (float) $i2;

        $r5 = r0.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment: com.google.inject.internal.util.$CustomConcurrentHashMap$Impl this$0>;

        $f0 = $r5.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl: float loadFactor>;

        $f2 = $f1 * $f0;

        $i3 = (int) $f2;

        r0.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment: int threshold> = $i3;

        $i4 = virtualinvoke $r4.<java.util.concurrent.atomic.AtomicReferenceArray: int length()>();

        i5 = $i4 - 1;

        i11 = 0;

     label02:
        if i11 >= $i0 goto label10;

        $r6 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicReferenceArray: java.lang.Object get(int)>(i11);

        if $r6 == null goto label09;

        $r7 = interfaceinvoke r3.<com.google.inject.internal.util.$CustomConcurrentHashMap$Strategy: java.lang.Object getNext(java.lang.Object)>($r6);

        $i6 = interfaceinvoke r3.<com.google.inject.internal.util.$CustomConcurrentHashMap$Strategy: int getHash(java.lang.Object)>($r6);

        i7 = $i6 & i5;

        if $r7 != null goto label03;

        virtualinvoke $r4.<java.util.concurrent.atomic.AtomicReferenceArray: void set(int,java.lang.Object)>(i7, $r6);

        goto label09;

     label03:
        r11 = $r6;

        i12 = i7;

        r12 = $r7;

     label04:
        if r12 == null goto label06;

        $i10 = interfaceinvoke r3.<com.google.inject.internal.util.$CustomConcurrentHashMap$Strategy: int getHash(java.lang.Object)>(r12);

        i13 = $i10 & i5;

        if i13 == i12 goto label05;

        i12 = i13;

        r11 = r12;

     label05:
        r12 = interfaceinvoke r3.<com.google.inject.internal.util.$CustomConcurrentHashMap$Strategy: java.lang.Object getNext(java.lang.Object)>(r12);

        goto label04;

     label06:
        virtualinvoke $r4.<java.util.concurrent.atomic.AtomicReferenceArray: void set(int,java.lang.Object)>(i12, r11);

        r13 = $r6;

     label07:
        if r13 == r11 goto label09;

        $r8 = interfaceinvoke r3.<com.google.inject.internal.util.$CustomConcurrentHashMap$Strategy: java.lang.Object getKey(java.lang.Object)>(r13);

        if $r8 == null goto label08;

        $i8 = interfaceinvoke r3.<com.google.inject.internal.util.$CustomConcurrentHashMap$Strategy: int getHash(java.lang.Object)>(r13);

        i9 = $i8 & i5;

        $r9 = virtualinvoke $r4.<java.util.concurrent.atomic.AtomicReferenceArray: java.lang.Object get(int)>(i9);

        $r10 = interfaceinvoke r3.<com.google.inject.internal.util.$CustomConcurrentHashMap$Strategy: java.lang.Object copyEntry(java.lang.Object,java.lang.Object,java.lang.Object)>($r8, r13, $r9);

        virtualinvoke $r4.<java.util.concurrent.atomic.AtomicReferenceArray: void set(int,java.lang.Object)>(i9, $r10);

     label08:
        r13 = interfaceinvoke r3.<com.google.inject.internal.util.$CustomConcurrentHashMap$Strategy: java.lang.Object getNext(java.lang.Object)>(r13);

        goto label07;

     label09:
        i11 = i11 + 1;

        goto label02;

     label10:
        r0.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment: java.util.concurrent.atomic.AtomicReferenceArray table> = $r4;

        return;
    }

    java.lang.Object remove(java.lang.Object, int)
    {
        java.lang.Throwable $r11;
        java.util.concurrent.atomic.AtomicReferenceArray r3;
        com.google.inject.internal.util.$CustomConcurrentHashMap$Impl $r1, $r7;
        int $i0, i1, i2, $i3, $i4, i5, $i6, $i7, $i8;
        boolean $z0;
        com.google.inject.internal.util.$CustomConcurrentHashMap$Strategy r2, $r8;
        com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment r0;
        java.lang.Object $r4, $r5, r6, $r9, $r10, r12, r13, r14;

        r0 := @this: com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment;

        r6 := @parameter0: java.lang.Object;

        i2 := @parameter1: int;

        $r1 = r0.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment: com.google.inject.internal.util.$CustomConcurrentHashMap$Impl this$0>;

        r2 = $r1.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl: com.google.inject.internal.util.$CustomConcurrentHashMap$Strategy strategy>;

        virtualinvoke r0.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment: void lock()>();

     label01:
        $i0 = r0.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment: int count>;

        i1 = $i0 - 1;

        r3 = r0.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment: java.util.concurrent.atomic.AtomicReferenceArray table>;

        $i3 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicReferenceArray: int length()>();

        $i4 = $i3 - 1;

        i5 = i2 & $i4;

        $r4 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicReferenceArray: java.lang.Object get(int)>(i5);

        r12 = $r4;

     label02:
        if r12 == null goto label08;

        $r5 = interfaceinvoke r2.<com.google.inject.internal.util.$CustomConcurrentHashMap$Strategy: java.lang.Object getKey(java.lang.Object)>(r12);

        $i6 = interfaceinvoke r2.<com.google.inject.internal.util.$CustomConcurrentHashMap$Strategy: int getHash(java.lang.Object)>(r12);

        if $i6 != i2 goto label07;

        if $r5 == null goto label07;

        $z0 = interfaceinvoke r2.<com.google.inject.internal.util.$CustomConcurrentHashMap$Strategy: boolean equalKeys(java.lang.Object,java.lang.Object)>($r5, r6);

        if $z0 == 0 goto label07;

        $r7 = r0.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment: com.google.inject.internal.util.$CustomConcurrentHashMap$Impl this$0>;

        $r8 = $r7.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl: com.google.inject.internal.util.$CustomConcurrentHashMap$Strategy strategy>;

        $r9 = interfaceinvoke $r8.<com.google.inject.internal.util.$CustomConcurrentHashMap$Strategy: java.lang.Object getValue(java.lang.Object)>(r12);

        $i7 = r0.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment: int modCount>;

        $i8 = $i7 + 1;

        r0.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment: int modCount> = $i8;

        r13 = interfaceinvoke r2.<com.google.inject.internal.util.$CustomConcurrentHashMap$Strategy: java.lang.Object getNext(java.lang.Object)>(r12);

        r14 = $r4;

     label03:
        if r14 == r12 goto label05;

        $r10 = interfaceinvoke r2.<com.google.inject.internal.util.$CustomConcurrentHashMap$Strategy: java.lang.Object getKey(java.lang.Object)>(r14);

        if $r10 == null goto label04;

        r13 = interfaceinvoke r2.<com.google.inject.internal.util.$CustomConcurrentHashMap$Strategy: java.lang.Object copyEntry(java.lang.Object,java.lang.Object,java.lang.Object)>($r10, r14, r13);

     label04:
        r14 = interfaceinvoke r2.<com.google.inject.internal.util.$CustomConcurrentHashMap$Strategy: java.lang.Object getNext(java.lang.Object)>(r14);

        goto label03;

     label05:
        virtualinvoke r3.<java.util.concurrent.atomic.AtomicReferenceArray: void set(int,java.lang.Object)>(i5, r13);

        r0.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment: int count> = i1;

     label06:
        virtualinvoke r0.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment: void unlock()>();

        return $r9;

     label07:
        r12 = interfaceinvoke r2.<com.google.inject.internal.util.$CustomConcurrentHashMap$Strategy: java.lang.Object getNext(java.lang.Object)>(r12);

        goto label02;

     label08:
        virtualinvoke r0.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment: void unlock()>();

        return null;

     label09:
        $r11 := @caughtexception;

     label10:
        virtualinvoke r0.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment: void unlock()>();

        throw $r11;

        catch java.lang.Throwable from label01 to label06 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    boolean remove(java.lang.Object, int, java.lang.Object)
    {
        java.lang.Throwable $r12;
        java.util.concurrent.atomic.AtomicReferenceArray r3;
        com.google.inject.internal.util.$CustomConcurrentHashMap$Impl $r1, $r7;
        int $i0, i1, i2, $i3, $i4, i5, $i6, $i7, $i8;
        boolean $z0, $z1;
        com.google.inject.internal.util.$CustomConcurrentHashMap$Strategy r2, $r8;
        com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment r0;
        java.lang.Object $r4, $r5, r6, $r9, r10, $r11, r13, r14, r15;

        r0 := @this: com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment;

        r6 := @parameter0: java.lang.Object;

        i2 := @parameter1: int;

        r10 := @parameter2: java.lang.Object;

        $r1 = r0.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment: com.google.inject.internal.util.$CustomConcurrentHashMap$Impl this$0>;

        r2 = $r1.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl: com.google.inject.internal.util.$CustomConcurrentHashMap$Strategy strategy>;

        virtualinvoke r0.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment: void lock()>();

     label01:
        $i0 = r0.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment: int count>;

        i1 = $i0 - 1;

        r3 = r0.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment: java.util.concurrent.atomic.AtomicReferenceArray table>;

        $i3 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicReferenceArray: int length()>();

        $i4 = $i3 - 1;

        i5 = i2 & $i4;

        $r4 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicReferenceArray: java.lang.Object get(int)>(i5);

        r13 = $r4;

     label02:
        if r13 == null goto label10;

        $r5 = interfaceinvoke r2.<com.google.inject.internal.util.$CustomConcurrentHashMap$Strategy: java.lang.Object getKey(java.lang.Object)>(r13);

        $i6 = interfaceinvoke r2.<com.google.inject.internal.util.$CustomConcurrentHashMap$Strategy: int getHash(java.lang.Object)>(r13);

        if $i6 != i2 goto label09;

        if $r5 == null goto label09;

        $z0 = interfaceinvoke r2.<com.google.inject.internal.util.$CustomConcurrentHashMap$Strategy: boolean equalKeys(java.lang.Object,java.lang.Object)>($r5, r6);

        if $z0 == 0 goto label09;

        $r7 = r0.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment: com.google.inject.internal.util.$CustomConcurrentHashMap$Impl this$0>;

        $r8 = $r7.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl: com.google.inject.internal.util.$CustomConcurrentHashMap$Strategy strategy>;

        $r9 = interfaceinvoke $r8.<com.google.inject.internal.util.$CustomConcurrentHashMap$Strategy: java.lang.Object getValue(java.lang.Object)>(r13);

        if r10 == $r9 goto label03;

        if r10 == null goto label08;

        if $r9 == null goto label08;

        $z1 = interfaceinvoke r2.<com.google.inject.internal.util.$CustomConcurrentHashMap$Strategy: boolean equalValues(java.lang.Object,java.lang.Object)>($r9, r10);

        if $z1 == 0 goto label08;

     label03:
        $i7 = r0.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment: int modCount>;

        $i8 = $i7 + 1;

        r0.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment: int modCount> = $i8;

        r14 = interfaceinvoke r2.<com.google.inject.internal.util.$CustomConcurrentHashMap$Strategy: java.lang.Object getNext(java.lang.Object)>(r13);

        r15 = $r4;

     label04:
        if r15 == r13 goto label06;

        $r11 = interfaceinvoke r2.<com.google.inject.internal.util.$CustomConcurrentHashMap$Strategy: java.lang.Object getKey(java.lang.Object)>(r15);

        if $r11 == null goto label05;

        r14 = interfaceinvoke r2.<com.google.inject.internal.util.$CustomConcurrentHashMap$Strategy: java.lang.Object copyEntry(java.lang.Object,java.lang.Object,java.lang.Object)>($r11, r15, r14);

     label05:
        r15 = interfaceinvoke r2.<com.google.inject.internal.util.$CustomConcurrentHashMap$Strategy: java.lang.Object getNext(java.lang.Object)>(r15);

        goto label04;

     label06:
        virtualinvoke r3.<java.util.concurrent.atomic.AtomicReferenceArray: void set(int,java.lang.Object)>(i5, r14);

        r0.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment: int count> = i1;

     label07:
        virtualinvoke r0.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment: void unlock()>();

        return 1;

     label08:
        virtualinvoke r0.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment: void unlock()>();

        return 0;

     label09:
        r13 = interfaceinvoke r2.<com.google.inject.internal.util.$CustomConcurrentHashMap$Strategy: java.lang.Object getNext(java.lang.Object)>(r13);

        goto label02;

     label10:
        virtualinvoke r0.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment: void unlock()>();

        return 0;

     label11:
        $r12 := @caughtexception;

     label12:
        virtualinvoke r0.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment: void unlock()>();

        throw $r12;

        catch java.lang.Throwable from label01 to label07 with label11;
        catch java.lang.Throwable from label09 to label10 with label11;
        catch java.lang.Throwable from label11 to label12 with label11;
    }

    public boolean removeEntry(java.lang.Object, int, java.lang.Object)
    {
        java.lang.Throwable $r9;
        java.util.concurrent.atomic.AtomicReferenceArray r3;
        com.google.inject.internal.util.$CustomConcurrentHashMap$Impl $r1;
        int $i0, i1, i2, $i3, $i4, i5, $i6, $i7, $i8;
        boolean $z0, $z1;
        com.google.inject.internal.util.$CustomConcurrentHashMap$Strategy r2;
        com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment r0;
        java.lang.Object $r4, r5, $r6, r7, $r8, r10, r11, r12;

        r0 := @this: com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment;

        r5 := @parameter0: java.lang.Object;

        i2 := @parameter1: int;

        r7 := @parameter2: java.lang.Object;

        $r1 = r0.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment: com.google.inject.internal.util.$CustomConcurrentHashMap$Impl this$0>;

        r2 = $r1.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl: com.google.inject.internal.util.$CustomConcurrentHashMap$Strategy strategy>;

        virtualinvoke r0.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment: void lock()>();

     label01:
        $i0 = r0.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment: int count>;

        i1 = $i0 - 1;

        r3 = r0.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment: java.util.concurrent.atomic.AtomicReferenceArray table>;

        $i3 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicReferenceArray: int length()>();

        $i4 = $i3 - 1;

        i5 = i2 & $i4;

        $r4 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicReferenceArray: java.lang.Object get(int)>(i5);

        r10 = $r4;

     label02:
        if r10 == null goto label10;

        $i6 = interfaceinvoke r2.<com.google.inject.internal.util.$CustomConcurrentHashMap$Strategy: int getHash(java.lang.Object)>(r10);

        if $i6 != i2 goto label09;

        $z0 = virtualinvoke r5.<java.lang.Object: boolean equals(java.lang.Object)>(r10);

        if $z0 == 0 goto label09;

        $r6 = interfaceinvoke r2.<com.google.inject.internal.util.$CustomConcurrentHashMap$Strategy: java.lang.Object getValue(java.lang.Object)>(r10);

        if $r6 == r7 goto label03;

        if r7 == null goto label08;

        $z1 = interfaceinvoke r2.<com.google.inject.internal.util.$CustomConcurrentHashMap$Strategy: boolean equalValues(java.lang.Object,java.lang.Object)>($r6, r7);

        if $z1 == 0 goto label08;

     label03:
        $i7 = r0.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment: int modCount>;

        $i8 = $i7 + 1;

        r0.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment: int modCount> = $i8;

        r11 = interfaceinvoke r2.<com.google.inject.internal.util.$CustomConcurrentHashMap$Strategy: java.lang.Object getNext(java.lang.Object)>(r10);

        r12 = $r4;

     label04:
        if r12 == r10 goto label06;

        $r8 = interfaceinvoke r2.<com.google.inject.internal.util.$CustomConcurrentHashMap$Strategy: java.lang.Object getKey(java.lang.Object)>(r12);

        if $r8 == null goto label05;

        r11 = interfaceinvoke r2.<com.google.inject.internal.util.$CustomConcurrentHashMap$Strategy: java.lang.Object copyEntry(java.lang.Object,java.lang.Object,java.lang.Object)>($r8, r12, r11);

     label05:
        r12 = interfaceinvoke r2.<com.google.inject.internal.util.$CustomConcurrentHashMap$Strategy: java.lang.Object getNext(java.lang.Object)>(r12);

        goto label04;

     label06:
        virtualinvoke r3.<java.util.concurrent.atomic.AtomicReferenceArray: void set(int,java.lang.Object)>(i5, r11);

        r0.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment: int count> = i1;

     label07:
        virtualinvoke r0.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment: void unlock()>();

        return 1;

     label08:
        virtualinvoke r0.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment: void unlock()>();

        return 0;

     label09:
        r10 = interfaceinvoke r2.<com.google.inject.internal.util.$CustomConcurrentHashMap$Strategy: java.lang.Object getNext(java.lang.Object)>(r10);

        goto label02;

     label10:
        virtualinvoke r0.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment: void unlock()>();

        return 0;

     label11:
        $r9 := @caughtexception;

     label12:
        virtualinvoke r0.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment: void unlock()>();

        throw $r9;

        catch java.lang.Throwable from label01 to label07 with label11;
        catch java.lang.Throwable from label09 to label10 with label11;
        catch java.lang.Throwable from label11 to label12 with label11;
    }

    public boolean removeEntry(java.lang.Object, int)
    {
        java.lang.Throwable $r7;
        java.util.concurrent.atomic.AtomicReferenceArray r3;
        com.google.inject.internal.util.$CustomConcurrentHashMap$Impl $r1;
        int $i0, i1, i2, $i3, $i4, i5, $i6, $i7, $i8;
        boolean $z0;
        com.google.inject.internal.util.$CustomConcurrentHashMap$Strategy r2;
        com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment r0;
        java.lang.Object $r4, r5, $r6, r8, r9, r10;

        r0 := @this: com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment;

        r5 := @parameter0: java.lang.Object;

        i2 := @parameter1: int;

        $r1 = r0.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment: com.google.inject.internal.util.$CustomConcurrentHashMap$Impl this$0>;

        r2 = $r1.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl: com.google.inject.internal.util.$CustomConcurrentHashMap$Strategy strategy>;

        virtualinvoke r0.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment: void lock()>();

     label01:
        $i0 = r0.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment: int count>;

        i1 = $i0 - 1;

        r3 = r0.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment: java.util.concurrent.atomic.AtomicReferenceArray table>;

        $i3 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicReferenceArray: int length()>();

        $i4 = $i3 - 1;

        i5 = i2 & $i4;

        $r4 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicReferenceArray: java.lang.Object get(int)>(i5);

        r8 = $r4;

     label02:
        if r8 == null goto label08;

        $i6 = interfaceinvoke r2.<com.google.inject.internal.util.$CustomConcurrentHashMap$Strategy: int getHash(java.lang.Object)>(r8);

        if $i6 != i2 goto label07;

        $z0 = virtualinvoke r5.<java.lang.Object: boolean equals(java.lang.Object)>(r8);

        if $z0 == 0 goto label07;

        $i7 = r0.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment: int modCount>;

        $i8 = $i7 + 1;

        r0.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment: int modCount> = $i8;

        r9 = interfaceinvoke r2.<com.google.inject.internal.util.$CustomConcurrentHashMap$Strategy: java.lang.Object getNext(java.lang.Object)>(r8);

        r10 = $r4;

     label03:
        if r10 == r8 goto label05;

        $r6 = interfaceinvoke r2.<com.google.inject.internal.util.$CustomConcurrentHashMap$Strategy: java.lang.Object getKey(java.lang.Object)>(r10);

        if $r6 == null goto label04;

        r9 = interfaceinvoke r2.<com.google.inject.internal.util.$CustomConcurrentHashMap$Strategy: java.lang.Object copyEntry(java.lang.Object,java.lang.Object,java.lang.Object)>($r6, r10, r9);

     label04:
        r10 = interfaceinvoke r2.<com.google.inject.internal.util.$CustomConcurrentHashMap$Strategy: java.lang.Object getNext(java.lang.Object)>(r10);

        goto label03;

     label05:
        virtualinvoke r3.<java.util.concurrent.atomic.AtomicReferenceArray: void set(int,java.lang.Object)>(i5, r9);

        r0.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment: int count> = i1;

     label06:
        virtualinvoke r0.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment: void unlock()>();

        return 1;

     label07:
        r8 = interfaceinvoke r2.<com.google.inject.internal.util.$CustomConcurrentHashMap$Strategy: java.lang.Object getNext(java.lang.Object)>(r8);

        goto label02;

     label08:
        virtualinvoke r0.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment: void unlock()>();

        return 0;

     label09:
        $r7 := @caughtexception;

     label10:
        virtualinvoke r0.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment: void unlock()>();

        throw $r7;

        catch java.lang.Throwable from label01 to label06 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    void clear()
    {
        java.lang.Throwable $r2;
        java.util.concurrent.atomic.AtomicReferenceArray r1;
        com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment r0;
        int $i0, $i1, $i2, $i3, i4;

        r0 := @this: com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment;

        $i0 = r0.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment: int count>;

        if $i0 == 0 goto label7;

        virtualinvoke r0.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment: void lock()>();

     label1:
        r1 = r0.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment: java.util.concurrent.atomic.AtomicReferenceArray table>;

        i4 = 0;

     label2:
        $i1 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicReferenceArray: int length()>();

        if i4 >= $i1 goto label3;

        virtualinvoke r1.<java.util.concurrent.atomic.AtomicReferenceArray: void set(int,java.lang.Object)>(i4, null);

        i4 = i4 + 1;

        goto label2;

     label3:
        $i2 = r0.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment: int modCount>;

        $i3 = $i2 + 1;

        r0.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment: int modCount> = $i3;

        r0.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment: int count> = 0;

     label4:
        virtualinvoke r0.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment: void unlock()>();

        goto label7;

     label5:
        $r2 := @caughtexception;

     label6:
        virtualinvoke r0.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment: void unlock()>();

        throw $r2;

     label7:
        return;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }
}
