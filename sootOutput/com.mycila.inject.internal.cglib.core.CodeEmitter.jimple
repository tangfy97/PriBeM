public class com.mycila.inject.internal.cglib.core.CodeEmitter extends com.mycila.inject.internal.cglib.core.LocalVariablesSorter
{
    private static final com.mycila.inject.internal.cglib.core.Signature BOOLEAN_VALUE;
    private static final com.mycila.inject.internal.cglib.core.Signature CHAR_VALUE;
    private static final com.mycila.inject.internal.cglib.core.Signature LONG_VALUE;
    private static final com.mycila.inject.internal.cglib.core.Signature DOUBLE_VALUE;
    private static final com.mycila.inject.internal.cglib.core.Signature FLOAT_VALUE;
    private static final com.mycila.inject.internal.cglib.core.Signature INT_VALUE;
    private static final com.mycila.inject.internal.cglib.core.Signature CSTRUCT_NULL;
    private static final com.mycila.inject.internal.cglib.core.Signature CSTRUCT_STRING;
    public static final int ADD;
    public static final int MUL;
    public static final int XOR;
    public static final int USHR;
    public static final int SUB;
    public static final int DIV;
    public static final int NEG;
    public static final int REM;
    public static final int AND;
    public static final int OR;
    public static final int GT;
    public static final int LT;
    public static final int GE;
    public static final int LE;
    public static final int NE;
    public static final int EQ;
    private com.mycila.inject.internal.cglib.core.ClassEmitter ce;
    private com.mycila.inject.internal.cglib.core.CodeEmitter$State state;

    void <init>(com.mycila.inject.internal.cglib.core.ClassEmitter, com.mycila.inject.internal.asm.MethodVisitor, int, com.mycila.inject.internal.cglib.core.Signature, com.mycila.inject.internal.asm.Type[])
    {
        com.mycila.inject.internal.cglib.core.Signature r1;
        com.mycila.inject.internal.cglib.core.CodeEmitter r0;
        com.mycila.inject.internal.cglib.core.ClassEmitter r4;
        com.mycila.inject.internal.asm.MethodVisitor r3;
        com.mycila.inject.internal.cglib.core.CodeEmitter$State $r5;
        int i0;
        java.lang.String $r2;
        com.mycila.inject.internal.asm.Type[] r7;
        com.mycila.inject.internal.cglib.core.ClassInfo $r6;

        r0 := @this: com.mycila.inject.internal.cglib.core.CodeEmitter;

        r4 := @parameter0: com.mycila.inject.internal.cglib.core.ClassEmitter;

        r3 := @parameter1: com.mycila.inject.internal.asm.MethodVisitor;

        i0 := @parameter2: int;

        r1 := @parameter3: com.mycila.inject.internal.cglib.core.Signature;

        r7 := @parameter4: com.mycila.inject.internal.asm.Type[];

        $r2 = virtualinvoke r1.<com.mycila.inject.internal.cglib.core.Signature: java.lang.String getDescriptor()>();

        specialinvoke r0.<com.mycila.inject.internal.cglib.core.LocalVariablesSorter: void <init>(int,java.lang.String,com.mycila.inject.internal.asm.MethodVisitor)>(i0, $r2, r3);

        r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.cglib.core.ClassEmitter ce> = r4;

        $r5 = new com.mycila.inject.internal.cglib.core.CodeEmitter$State;

        $r6 = virtualinvoke r4.<com.mycila.inject.internal.cglib.core.ClassEmitter: com.mycila.inject.internal.cglib.core.ClassInfo getClassInfo()>();

        specialinvoke $r5.<com.mycila.inject.internal.cglib.core.CodeEmitter$State: void <init>(com.mycila.inject.internal.cglib.core.ClassInfo,int,com.mycila.inject.internal.cglib.core.Signature,com.mycila.inject.internal.asm.Type[])>($r6, i0, r1, r7);

        r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.cglib.core.CodeEmitter$State state> = $r5;

        return;
    }

    public void <init>(com.mycila.inject.internal.cglib.core.CodeEmitter)
    {
        com.mycila.inject.internal.cglib.core.ClassEmitter $r2;
        com.mycila.inject.internal.cglib.core.CodeEmitter$State $r3;
        com.mycila.inject.internal.cglib.core.CodeEmitter r0, r1;

        r0 := @this: com.mycila.inject.internal.cglib.core.CodeEmitter;

        r1 := @parameter0: com.mycila.inject.internal.cglib.core.CodeEmitter;

        specialinvoke r0.<com.mycila.inject.internal.cglib.core.LocalVariablesSorter: void <init>(com.mycila.inject.internal.cglib.core.LocalVariablesSorter)>(r1);

        $r2 = r1.<com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.cglib.core.ClassEmitter ce>;

        r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.cglib.core.ClassEmitter ce> = $r2;

        $r3 = r1.<com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.cglib.core.CodeEmitter$State state>;

        r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.cglib.core.CodeEmitter$State state> = $r3;

        return;
    }

    public boolean isStaticHook()
    {
        com.mycila.inject.internal.cglib.core.CodeEmitter r0;

        r0 := @this: com.mycila.inject.internal.cglib.core.CodeEmitter;

        return 0;
    }

    public com.mycila.inject.internal.cglib.core.Signature getSignature()
    {
        com.mycila.inject.internal.cglib.core.CodeEmitter r0;
        com.mycila.inject.internal.cglib.core.CodeEmitter$State $r1;
        com.mycila.inject.internal.cglib.core.Signature $r2;

        r0 := @this: com.mycila.inject.internal.cglib.core.CodeEmitter;

        $r1 = r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.cglib.core.CodeEmitter$State state>;

        $r2 = $r1.<com.mycila.inject.internal.cglib.core.CodeEmitter$State: com.mycila.inject.internal.cglib.core.Signature sig>;

        return $r2;
    }

    public com.mycila.inject.internal.asm.Type getReturnType()
    {
        com.mycila.inject.internal.cglib.core.CodeEmitter$State $r1;
        com.mycila.inject.internal.cglib.core.Signature $r2;
        com.mycila.inject.internal.asm.Type $r3;
        com.mycila.inject.internal.cglib.core.CodeEmitter r0;

        r0 := @this: com.mycila.inject.internal.cglib.core.CodeEmitter;

        $r1 = r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.cglib.core.CodeEmitter$State state>;

        $r2 = $r1.<com.mycila.inject.internal.cglib.core.CodeEmitter$State: com.mycila.inject.internal.cglib.core.Signature sig>;

        $r3 = virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.Signature: com.mycila.inject.internal.asm.Type getReturnType()>();

        return $r3;
    }

    public com.mycila.inject.internal.cglib.core.MethodInfo getMethodInfo()
    {
        com.mycila.inject.internal.cglib.core.CodeEmitter r0;
        com.mycila.inject.internal.cglib.core.CodeEmitter$State $r1;

        r0 := @this: com.mycila.inject.internal.cglib.core.CodeEmitter;

        $r1 = r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.cglib.core.CodeEmitter$State state>;

        return $r1;
    }

    public com.mycila.inject.internal.cglib.core.ClassEmitter getClassEmitter()
    {
        com.mycila.inject.internal.cglib.core.ClassEmitter $r1;
        com.mycila.inject.internal.cglib.core.CodeEmitter r0;

        r0 := @this: com.mycila.inject.internal.cglib.core.CodeEmitter;

        $r1 = r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.cglib.core.ClassEmitter ce>;

        return $r1;
    }

    public void end_method()
    {
        com.mycila.inject.internal.cglib.core.CodeEmitter r0;

        r0 := @this: com.mycila.inject.internal.cglib.core.CodeEmitter;

        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void visitMaxs(int,int)>(0, 0);

        return;
    }

    public com.mycila.inject.internal.cglib.core.Block begin_block()
    {
        com.mycila.inject.internal.cglib.core.Block $r0;
        com.mycila.inject.internal.cglib.core.CodeEmitter r1;

        r1 := @this: com.mycila.inject.internal.cglib.core.CodeEmitter;

        $r0 = new com.mycila.inject.internal.cglib.core.Block;

        specialinvoke $r0.<com.mycila.inject.internal.cglib.core.Block: void <init>(com.mycila.inject.internal.cglib.core.CodeEmitter)>(r1);

        return $r0;
    }

    public void catch_exception(com.mycila.inject.internal.cglib.core.Block, com.mycila.inject.internal.asm.Type)
    {
        com.mycila.inject.internal.cglib.core.Block r0;
        java.lang.IllegalStateException $r9;
        com.mycila.inject.internal.asm.Type r7;
        com.mycila.inject.internal.cglib.core.CodeEmitter r2;
        com.mycila.inject.internal.asm.MethodVisitor $r3;
        com.mycila.inject.internal.asm.Label $r1, $r4, $r5, $r6;
        java.lang.String $r8;

        r2 := @this: com.mycila.inject.internal.cglib.core.CodeEmitter;

        r0 := @parameter0: com.mycila.inject.internal.cglib.core.Block;

        r7 := @parameter1: com.mycila.inject.internal.asm.Type;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.cglib.core.Block: com.mycila.inject.internal.asm.Label getEnd()>();

        if $r1 != null goto label1;

        $r9 = new java.lang.IllegalStateException;

        specialinvoke $r9.<java.lang.IllegalStateException: void <init>(java.lang.String)>("end of block is unset");

        throw $r9;

     label1:
        $r3 = r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        $r4 = virtualinvoke r0.<com.mycila.inject.internal.cglib.core.Block: com.mycila.inject.internal.asm.Label getStart()>();

        $r5 = virtualinvoke r0.<com.mycila.inject.internal.cglib.core.Block: com.mycila.inject.internal.asm.Label getEnd()>();

        $r6 = virtualinvoke r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.asm.Label mark()>();

        $r8 = virtualinvoke r7.<com.mycila.inject.internal.asm.Type: java.lang.String getInternalName()>();

        interfaceinvoke $r3.<com.mycila.inject.internal.asm.MethodVisitor: void visitTryCatchBlock(com.mycila.inject.internal.asm.Label,com.mycila.inject.internal.asm.Label,com.mycila.inject.internal.asm.Label,java.lang.String)>($r4, $r5, $r6, $r8);

        return;
    }

    public void goTo(com.mycila.inject.internal.asm.Label)
    {
        com.mycila.inject.internal.asm.Label r1;
        com.mycila.inject.internal.cglib.core.CodeEmitter r0;
        com.mycila.inject.internal.asm.MethodVisitor $r2;

        r0 := @this: com.mycila.inject.internal.cglib.core.CodeEmitter;

        r1 := @parameter0: com.mycila.inject.internal.asm.Label;

        $r2 = r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        interfaceinvoke $r2.<com.mycila.inject.internal.asm.MethodVisitor: void visitJumpInsn(int,com.mycila.inject.internal.asm.Label)>(167, r1);

        return;
    }

    public void ifnull(com.mycila.inject.internal.asm.Label)
    {
        com.mycila.inject.internal.asm.Label r1;
        com.mycila.inject.internal.cglib.core.CodeEmitter r0;
        com.mycila.inject.internal.asm.MethodVisitor $r2;

        r0 := @this: com.mycila.inject.internal.cglib.core.CodeEmitter;

        r1 := @parameter0: com.mycila.inject.internal.asm.Label;

        $r2 = r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        interfaceinvoke $r2.<com.mycila.inject.internal.asm.MethodVisitor: void visitJumpInsn(int,com.mycila.inject.internal.asm.Label)>(198, r1);

        return;
    }

    public void ifnonnull(com.mycila.inject.internal.asm.Label)
    {
        com.mycila.inject.internal.asm.Label r1;
        com.mycila.inject.internal.cglib.core.CodeEmitter r0;
        com.mycila.inject.internal.asm.MethodVisitor $r2;

        r0 := @this: com.mycila.inject.internal.cglib.core.CodeEmitter;

        r1 := @parameter0: com.mycila.inject.internal.asm.Label;

        $r2 = r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        interfaceinvoke $r2.<com.mycila.inject.internal.asm.MethodVisitor: void visitJumpInsn(int,com.mycila.inject.internal.asm.Label)>(199, r1);

        return;
    }

    public void if_jump(int, com.mycila.inject.internal.asm.Label)
    {
        com.mycila.inject.internal.asm.MethodVisitor $r2;
        int i0;
        com.mycila.inject.internal.asm.Label r1;
        com.mycila.inject.internal.cglib.core.CodeEmitter r0;

        r0 := @this: com.mycila.inject.internal.cglib.core.CodeEmitter;

        i0 := @parameter0: int;

        r1 := @parameter1: com.mycila.inject.internal.asm.Label;

        $r2 = r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        interfaceinvoke $r2.<com.mycila.inject.internal.asm.MethodVisitor: void visitJumpInsn(int,com.mycila.inject.internal.asm.Label)>(i0, r1);

        return;
    }

    public void if_icmp(int, com.mycila.inject.internal.asm.Label)
    {
        int i0;
        com.mycila.inject.internal.asm.Label r1;
        com.mycila.inject.internal.asm.Type $r2;
        com.mycila.inject.internal.cglib.core.CodeEmitter r0;

        r0 := @this: com.mycila.inject.internal.cglib.core.CodeEmitter;

        i0 := @parameter0: int;

        r1 := @parameter1: com.mycila.inject.internal.asm.Label;

        $r2 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type INT_TYPE>;

        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void if_cmp(com.mycila.inject.internal.asm.Type,int,com.mycila.inject.internal.asm.Label)>($r2, i0, r1);

        return;
    }

    public void if_cmp(com.mycila.inject.internal.asm.Type, int, com.mycila.inject.internal.asm.Label)
    {
        com.mycila.inject.internal.asm.Type r0;
        com.mycila.inject.internal.cglib.core.CodeEmitter r1;
        short s1;
        com.mycila.inject.internal.asm.MethodVisitor $r3, $r4, $r10, $r11, $r12, $r13;
        java.lang.StringBuffer $r6, $r7, $r8;
        int i0, i2, $i3;
        java.lang.String $r9;
        java.lang.IllegalArgumentException $r5;
        com.mycila.inject.internal.asm.Label r2;

        r1 := @this: com.mycila.inject.internal.cglib.core.CodeEmitter;

        r0 := @parameter0: com.mycila.inject.internal.asm.Type;

        i0 := @parameter1: int;

        r2 := @parameter2: com.mycila.inject.internal.asm.Label;

        s1 = -1;

        i2 = i0;

        lookupswitch(i0)
        {
            case 156: goto label01;
            case 158: goto label02;
            default: goto label03;
        };

     label01:
        i2 = 155;

        goto label03;

     label02:
        i2 = 157;

     label03:
        $i3 = virtualinvoke r0.<com.mycila.inject.internal.asm.Type: int getSort()>();

        tableswitch($i3)
        {
            case 6: goto label06;
            case 7: goto label04;
            case 8: goto label05;
            case 9: goto label07;
            case 10: goto label07;
            default: goto label11;
        };

     label04:
        $r11 = r1.<com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        interfaceinvoke $r11.<com.mycila.inject.internal.asm.MethodVisitor: void visitInsn(int)>(148);

        goto label19;

     label05:
        $r10 = r1.<com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        interfaceinvoke $r10.<com.mycila.inject.internal.asm.MethodVisitor: void visitInsn(int)>(152);

        goto label19;

     label06:
        $r12 = r1.<com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        interfaceinvoke $r12.<com.mycila.inject.internal.asm.MethodVisitor: void visitInsn(int)>(150);

        goto label19;

     label07:
        lookupswitch(i0)
        {
            case 153: goto label08;
            case 154: goto label09;
            default: goto label10;
        };

     label08:
        $r4 = r1.<com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        interfaceinvoke $r4.<com.mycila.inject.internal.asm.MethodVisitor: void visitJumpInsn(int,com.mycila.inject.internal.asm.Label)>(165, r2);

        return;

     label09:
        $r3 = r1.<com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        interfaceinvoke $r3.<com.mycila.inject.internal.asm.MethodVisitor: void visitJumpInsn(int,com.mycila.inject.internal.asm.Label)>(166, r2);

        return;

     label10:
        $r5 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Bad comparison for type ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r5;

     label11:
        tableswitch(i0)
        {
            case 153: goto label12;
            case 154: goto label13;
            case 155: goto label15;
            case 156: goto label14;
            case 157: goto label17;
            case 158: goto label16;
            default: goto label18;
        };

     label12:
        s1 = 159;

        goto label18;

     label13:
        s1 = 160;

        goto label18;

     label14:
        virtualinvoke r1.<com.mycila.inject.internal.cglib.core.CodeEmitter: void swap()>();

     label15:
        s1 = 161;

        goto label18;

     label16:
        virtualinvoke r1.<com.mycila.inject.internal.cglib.core.CodeEmitter: void swap()>();

     label17:
        s1 = 163;

     label18:
        $r13 = r1.<com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        interfaceinvoke $r13.<com.mycila.inject.internal.asm.MethodVisitor: void visitJumpInsn(int,com.mycila.inject.internal.asm.Label)>(s1, r2);

        return;

     label19:
        virtualinvoke r1.<com.mycila.inject.internal.cglib.core.CodeEmitter: void if_jump(int,com.mycila.inject.internal.asm.Label)>(i2, r2);

        return;
    }

    public void pop()
    {
        com.mycila.inject.internal.cglib.core.CodeEmitter r0;
        com.mycila.inject.internal.asm.MethodVisitor $r1;

        r0 := @this: com.mycila.inject.internal.cglib.core.CodeEmitter;

        $r1 = r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        interfaceinvoke $r1.<com.mycila.inject.internal.asm.MethodVisitor: void visitInsn(int)>(87);

        return;
    }

    public void pop2()
    {
        com.mycila.inject.internal.cglib.core.CodeEmitter r0;
        com.mycila.inject.internal.asm.MethodVisitor $r1;

        r0 := @this: com.mycila.inject.internal.cglib.core.CodeEmitter;

        $r1 = r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        interfaceinvoke $r1.<com.mycila.inject.internal.asm.MethodVisitor: void visitInsn(int)>(88);

        return;
    }

    public void dup()
    {
        com.mycila.inject.internal.cglib.core.CodeEmitter r0;
        com.mycila.inject.internal.asm.MethodVisitor $r1;

        r0 := @this: com.mycila.inject.internal.cglib.core.CodeEmitter;

        $r1 = r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        interfaceinvoke $r1.<com.mycila.inject.internal.asm.MethodVisitor: void visitInsn(int)>(89);

        return;
    }

    public void dup2()
    {
        com.mycila.inject.internal.cglib.core.CodeEmitter r0;
        com.mycila.inject.internal.asm.MethodVisitor $r1;

        r0 := @this: com.mycila.inject.internal.cglib.core.CodeEmitter;

        $r1 = r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        interfaceinvoke $r1.<com.mycila.inject.internal.asm.MethodVisitor: void visitInsn(int)>(92);

        return;
    }

    public void dup_x1()
    {
        com.mycila.inject.internal.cglib.core.CodeEmitter r0;
        com.mycila.inject.internal.asm.MethodVisitor $r1;

        r0 := @this: com.mycila.inject.internal.cglib.core.CodeEmitter;

        $r1 = r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        interfaceinvoke $r1.<com.mycila.inject.internal.asm.MethodVisitor: void visitInsn(int)>(90);

        return;
    }

    public void dup_x2()
    {
        com.mycila.inject.internal.cglib.core.CodeEmitter r0;
        com.mycila.inject.internal.asm.MethodVisitor $r1;

        r0 := @this: com.mycila.inject.internal.cglib.core.CodeEmitter;

        $r1 = r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        interfaceinvoke $r1.<com.mycila.inject.internal.asm.MethodVisitor: void visitInsn(int)>(91);

        return;
    }

    public void dup2_x1()
    {
        com.mycila.inject.internal.cglib.core.CodeEmitter r0;
        com.mycila.inject.internal.asm.MethodVisitor $r1;

        r0 := @this: com.mycila.inject.internal.cglib.core.CodeEmitter;

        $r1 = r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        interfaceinvoke $r1.<com.mycila.inject.internal.asm.MethodVisitor: void visitInsn(int)>(93);

        return;
    }

    public void dup2_x2()
    {
        com.mycila.inject.internal.cglib.core.CodeEmitter r0;
        com.mycila.inject.internal.asm.MethodVisitor $r1;

        r0 := @this: com.mycila.inject.internal.cglib.core.CodeEmitter;

        $r1 = r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        interfaceinvoke $r1.<com.mycila.inject.internal.asm.MethodVisitor: void visitInsn(int)>(94);

        return;
    }

    public void swap()
    {
        com.mycila.inject.internal.cglib.core.CodeEmitter r0;
        com.mycila.inject.internal.asm.MethodVisitor $r1;

        r0 := @this: com.mycila.inject.internal.cglib.core.CodeEmitter;

        $r1 = r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        interfaceinvoke $r1.<com.mycila.inject.internal.asm.MethodVisitor: void visitInsn(int)>(95);

        return;
    }

    public void aconst_null()
    {
        com.mycila.inject.internal.cglib.core.CodeEmitter r0;
        com.mycila.inject.internal.asm.MethodVisitor $r1;

        r0 := @this: com.mycila.inject.internal.cglib.core.CodeEmitter;

        $r1 = r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        interfaceinvoke $r1.<com.mycila.inject.internal.asm.MethodVisitor: void visitInsn(int)>(1);

        return;
    }

    public void swap(com.mycila.inject.internal.asm.Type, com.mycila.inject.internal.asm.Type)
    {
        int $i0, $i1, $i2;
        com.mycila.inject.internal.asm.Type r0, r1;
        com.mycila.inject.internal.cglib.core.CodeEmitter r2;

        r2 := @this: com.mycila.inject.internal.cglib.core.CodeEmitter;

        r1 := @parameter0: com.mycila.inject.internal.asm.Type;

        r0 := @parameter1: com.mycila.inject.internal.asm.Type;

        $i0 = virtualinvoke r0.<com.mycila.inject.internal.asm.Type: int getSize()>();

        if $i0 != 1 goto label2;

        $i2 = virtualinvoke r1.<com.mycila.inject.internal.asm.Type: int getSize()>();

        if $i2 != 1 goto label1;

        virtualinvoke r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void swap()>();

        goto label4;

     label1:
        virtualinvoke r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void dup_x2()>();

        virtualinvoke r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void pop()>();

        goto label4;

     label2:
        $i1 = virtualinvoke r1.<com.mycila.inject.internal.asm.Type: int getSize()>();

        if $i1 != 1 goto label3;

        virtualinvoke r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void dup2_x1()>();

        virtualinvoke r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void pop2()>();

        goto label4;

     label3:
        virtualinvoke r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void dup2_x2()>();

        virtualinvoke r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void pop2()>();

     label4:
        return;
    }

    public void monitorenter()
    {
        com.mycila.inject.internal.cglib.core.CodeEmitter r0;
        com.mycila.inject.internal.asm.MethodVisitor $r1;

        r0 := @this: com.mycila.inject.internal.cglib.core.CodeEmitter;

        $r1 = r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        interfaceinvoke $r1.<com.mycila.inject.internal.asm.MethodVisitor: void visitInsn(int)>(194);

        return;
    }

    public void monitorexit()
    {
        com.mycila.inject.internal.cglib.core.CodeEmitter r0;
        com.mycila.inject.internal.asm.MethodVisitor $r1;

        r0 := @this: com.mycila.inject.internal.cglib.core.CodeEmitter;

        $r1 = r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        interfaceinvoke $r1.<com.mycila.inject.internal.asm.MethodVisitor: void visitInsn(int)>(195);

        return;
    }

    public void math(int, com.mycila.inject.internal.asm.Type)
    {
        com.mycila.inject.internal.asm.MethodVisitor $r2;
        int i0, $i1;
        com.mycila.inject.internal.asm.Type r1;
        com.mycila.inject.internal.cglib.core.CodeEmitter r0;

        r0 := @this: com.mycila.inject.internal.cglib.core.CodeEmitter;

        i0 := @parameter0: int;

        r1 := @parameter1: com.mycila.inject.internal.asm.Type;

        $r2 = r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        $i1 = virtualinvoke r1.<com.mycila.inject.internal.asm.Type: int getOpcode(int)>(i0);

        interfaceinvoke $r2.<com.mycila.inject.internal.asm.MethodVisitor: void visitInsn(int)>($i1);

        return;
    }

    public void array_load(com.mycila.inject.internal.asm.Type)
    {
        com.mycila.inject.internal.asm.MethodVisitor $r2;
        int $i0;
        com.mycila.inject.internal.asm.Type r1;
        com.mycila.inject.internal.cglib.core.CodeEmitter r0;

        r0 := @this: com.mycila.inject.internal.cglib.core.CodeEmitter;

        r1 := @parameter0: com.mycila.inject.internal.asm.Type;

        $r2 = r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        $i0 = virtualinvoke r1.<com.mycila.inject.internal.asm.Type: int getOpcode(int)>(46);

        interfaceinvoke $r2.<com.mycila.inject.internal.asm.MethodVisitor: void visitInsn(int)>($i0);

        return;
    }

    public void array_store(com.mycila.inject.internal.asm.Type)
    {
        com.mycila.inject.internal.asm.MethodVisitor $r2;
        int $i0;
        com.mycila.inject.internal.asm.Type r1;
        com.mycila.inject.internal.cglib.core.CodeEmitter r0;

        r0 := @this: com.mycila.inject.internal.cglib.core.CodeEmitter;

        r1 := @parameter0: com.mycila.inject.internal.asm.Type;

        $r2 = r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        $i0 = virtualinvoke r1.<com.mycila.inject.internal.asm.Type: int getOpcode(int)>(79);

        interfaceinvoke $r2.<com.mycila.inject.internal.asm.MethodVisitor: void visitInsn(int)>($i0);

        return;
    }

    public void cast_numeric(com.mycila.inject.internal.asm.Type, com.mycila.inject.internal.asm.Type)
    {
        com.mycila.inject.internal.asm.MethodVisitor $r12, $r13, $r14, $r15, $r16, $r17, $r20, $r22, $r23, $r26, $r28, $r29, $r32, $r34, $r35;
        com.mycila.inject.internal.asm.Type r0, r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r18, $r19, $r21, $r24, $r25, $r27, $r30, $r31, $r33;
        com.mycila.inject.internal.cglib.core.CodeEmitter r11;

        r11 := @this: com.mycila.inject.internal.cglib.core.CodeEmitter;

        r0 := @parameter0: com.mycila.inject.internal.asm.Type;

        r1 := @parameter1: com.mycila.inject.internal.asm.Type;

        if r0 == r1 goto label15;

        $r2 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type DOUBLE_TYPE>;

        if r0 != $r2 goto label03;

        $r30 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type FLOAT_TYPE>;

        if r1 != $r30 goto label01;

        $r35 = r11.<com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        interfaceinvoke $r35.<com.mycila.inject.internal.asm.MethodVisitor: void visitInsn(int)>(144);

        goto label15;

     label01:
        $r31 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type LONG_TYPE>;

        if r1 != $r31 goto label02;

        $r34 = r11.<com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        interfaceinvoke $r34.<com.mycila.inject.internal.asm.MethodVisitor: void visitInsn(int)>(143);

        goto label15;

     label02:
        $r32 = r11.<com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        interfaceinvoke $r32.<com.mycila.inject.internal.asm.MethodVisitor: void visitInsn(int)>(142);

        $r33 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type INT_TYPE>;

        virtualinvoke r11.<com.mycila.inject.internal.cglib.core.CodeEmitter: void cast_numeric(com.mycila.inject.internal.asm.Type,com.mycila.inject.internal.asm.Type)>($r33, r1);

        goto label15;

     label03:
        $r3 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type FLOAT_TYPE>;

        if r0 != $r3 goto label06;

        $r24 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type DOUBLE_TYPE>;

        if r1 != $r24 goto label04;

        $r29 = r11.<com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        interfaceinvoke $r29.<com.mycila.inject.internal.asm.MethodVisitor: void visitInsn(int)>(141);

        goto label15;

     label04:
        $r25 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type LONG_TYPE>;

        if r1 != $r25 goto label05;

        $r28 = r11.<com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        interfaceinvoke $r28.<com.mycila.inject.internal.asm.MethodVisitor: void visitInsn(int)>(140);

        goto label15;

     label05:
        $r26 = r11.<com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        interfaceinvoke $r26.<com.mycila.inject.internal.asm.MethodVisitor: void visitInsn(int)>(139);

        $r27 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type INT_TYPE>;

        virtualinvoke r11.<com.mycila.inject.internal.cglib.core.CodeEmitter: void cast_numeric(com.mycila.inject.internal.asm.Type,com.mycila.inject.internal.asm.Type)>($r27, r1);

        goto label15;

     label06:
        $r4 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type LONG_TYPE>;

        if r0 != $r4 goto label09;

        $r18 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type DOUBLE_TYPE>;

        if r1 != $r18 goto label07;

        $r23 = r11.<com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        interfaceinvoke $r23.<com.mycila.inject.internal.asm.MethodVisitor: void visitInsn(int)>(138);

        goto label15;

     label07:
        $r19 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type FLOAT_TYPE>;

        if r1 != $r19 goto label08;

        $r22 = r11.<com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        interfaceinvoke $r22.<com.mycila.inject.internal.asm.MethodVisitor: void visitInsn(int)>(137);

        goto label15;

     label08:
        $r20 = r11.<com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        interfaceinvoke $r20.<com.mycila.inject.internal.asm.MethodVisitor: void visitInsn(int)>(136);

        $r21 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type INT_TYPE>;

        virtualinvoke r11.<com.mycila.inject.internal.cglib.core.CodeEmitter: void cast_numeric(com.mycila.inject.internal.asm.Type,com.mycila.inject.internal.asm.Type)>($r21, r1);

        goto label15;

     label09:
        $r5 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type BYTE_TYPE>;

        if r1 != $r5 goto label10;

        $r17 = r11.<com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        interfaceinvoke $r17.<com.mycila.inject.internal.asm.MethodVisitor: void visitInsn(int)>(145);

        goto label15;

     label10:
        $r6 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type CHAR_TYPE>;

        if r1 != $r6 goto label11;

        $r16 = r11.<com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        interfaceinvoke $r16.<com.mycila.inject.internal.asm.MethodVisitor: void visitInsn(int)>(146);

        goto label15;

     label11:
        $r7 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type DOUBLE_TYPE>;

        if r1 != $r7 goto label12;

        $r15 = r11.<com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        interfaceinvoke $r15.<com.mycila.inject.internal.asm.MethodVisitor: void visitInsn(int)>(135);

        goto label15;

     label12:
        $r8 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type FLOAT_TYPE>;

        if r1 != $r8 goto label13;

        $r14 = r11.<com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        interfaceinvoke $r14.<com.mycila.inject.internal.asm.MethodVisitor: void visitInsn(int)>(134);

        goto label15;

     label13:
        $r9 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type LONG_TYPE>;

        if r1 != $r9 goto label14;

        $r13 = r11.<com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        interfaceinvoke $r13.<com.mycila.inject.internal.asm.MethodVisitor: void visitInsn(int)>(133);

        goto label15;

     label14:
        $r10 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type SHORT_TYPE>;

        if r1 != $r10 goto label15;

        $r12 = r11.<com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        interfaceinvoke $r12.<com.mycila.inject.internal.asm.MethodVisitor: void visitInsn(int)>(147);

     label15:
        return;
    }

    public void push(int)
    {
        com.mycila.inject.internal.cglib.core.CodeEmitter r0;
        java.lang.Integer $r8, $r9;
        com.mycila.inject.internal.asm.MethodVisitor $r2, $r3, $r4, $r5, $r7;
        int i0, $i1, $i3;

        r0 := @this: com.mycila.inject.internal.cglib.core.CodeEmitter;

        i0 := @parameter0: int;

        $i3 = (int) -1;

        if i0 >= $i3 goto label1;

        $r7 = r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        $r8 = new java.lang.Integer;

        specialinvoke $r8.<java.lang.Integer: void <init>(int)>(i0);

        interfaceinvoke $r7.<com.mycila.inject.internal.asm.MethodVisitor: void visitLdcInsn(java.lang.Object)>($r8);

        goto label5;

     label1:
        if i0 > 5 goto label2;

        $r5 = r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        $i1 = staticinvoke <com.mycila.inject.internal.cglib.core.TypeUtils: int ICONST(int)>(i0);

        interfaceinvoke $r5.<com.mycila.inject.internal.asm.MethodVisitor: void visitInsn(int)>($i1);

        goto label5;

     label2:
        if i0 > 127 goto label3;

        $r4 = r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        interfaceinvoke $r4.<com.mycila.inject.internal.asm.MethodVisitor: void visitIntInsn(int,int)>(16, i0);

        goto label5;

     label3:
        if i0 > 32767 goto label4;

        $r3 = r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        interfaceinvoke $r3.<com.mycila.inject.internal.asm.MethodVisitor: void visitIntInsn(int,int)>(17, i0);

        goto label5;

     label4:
        $r2 = r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        $r9 = new java.lang.Integer;

        specialinvoke $r9.<java.lang.Integer: void <init>(int)>(i0);

        interfaceinvoke $r2.<com.mycila.inject.internal.asm.MethodVisitor: void visitLdcInsn(java.lang.Object)>($r9);

     label5:
        return;
    }

    public void push(long)
    {
        long l0;
        com.mycila.inject.internal.cglib.core.CodeEmitter r0;
        byte $b1, $b3;
        com.mycila.inject.internal.asm.MethodVisitor $r1, $r3;
        java.lang.Long $r2;
        int $i2;

        r0 := @this: com.mycila.inject.internal.cglib.core.CodeEmitter;

        l0 := @parameter0: long;

        $b1 = l0 cmp 0L;

        if $b1 == 0 goto label1;

        $b3 = l0 cmp 1L;

        if $b3 != 0 goto label2;

     label1:
        $r1 = r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        $i2 = staticinvoke <com.mycila.inject.internal.cglib.core.TypeUtils: int LCONST(long)>(l0);

        interfaceinvoke $r1.<com.mycila.inject.internal.asm.MethodVisitor: void visitInsn(int)>($i2);

        goto label3;

     label2:
        $r3 = r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        $r2 = new java.lang.Long;

        specialinvoke $r2.<java.lang.Long: void <init>(long)>(l0);

        interfaceinvoke $r3.<com.mycila.inject.internal.asm.MethodVisitor: void visitLdcInsn(java.lang.Object)>($r2);

     label3:
        return;
    }

    public void push(float)
    {
        java.lang.Float $r1;
        com.mycila.inject.internal.cglib.core.CodeEmitter r0;
        byte $b0, $b1, $b2;
        com.mycila.inject.internal.asm.MethodVisitor $r2, $r3;
        int $i3;
        float f0;

        r0 := @this: com.mycila.inject.internal.cglib.core.CodeEmitter;

        f0 := @parameter0: float;

        $b0 = f0 cmpl 0.0F;

        if $b0 == 0 goto label1;

        $b1 = f0 cmpl 1.0F;

        if $b1 == 0 goto label1;

        $b2 = f0 cmpl 2.0F;

        if $b2 != 0 goto label2;

     label1:
        $r3 = r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        $i3 = staticinvoke <com.mycila.inject.internal.cglib.core.TypeUtils: int FCONST(float)>(f0);

        interfaceinvoke $r3.<com.mycila.inject.internal.asm.MethodVisitor: void visitInsn(int)>($i3);

        goto label3;

     label2:
        $r2 = r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        $r1 = new java.lang.Float;

        specialinvoke $r1.<java.lang.Float: void <init>(float)>(f0);

        interfaceinvoke $r2.<com.mycila.inject.internal.asm.MethodVisitor: void visitLdcInsn(java.lang.Object)>($r1);

     label3:
        return;
    }

    public void push(double)
    {
        java.lang.Double $r2;
        com.mycila.inject.internal.cglib.core.CodeEmitter r0;
        byte $b0, $b2;
        com.mycila.inject.internal.asm.MethodVisitor $r1, $r3;
        int $i1;
        double d0;

        r0 := @this: com.mycila.inject.internal.cglib.core.CodeEmitter;

        d0 := @parameter0: double;

        $b0 = d0 cmpl 0.0;

        if $b0 == 0 goto label1;

        $b2 = d0 cmpl 1.0;

        if $b2 != 0 goto label2;

     label1:
        $r1 = r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        $i1 = staticinvoke <com.mycila.inject.internal.cglib.core.TypeUtils: int DCONST(double)>(d0);

        interfaceinvoke $r1.<com.mycila.inject.internal.asm.MethodVisitor: void visitInsn(int)>($i1);

        goto label3;

     label2:
        $r3 = r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        $r2 = new java.lang.Double;

        specialinvoke $r2.<java.lang.Double: void <init>(double)>(d0);

        interfaceinvoke $r3.<com.mycila.inject.internal.asm.MethodVisitor: void visitLdcInsn(java.lang.Object)>($r2);

     label3:
        return;
    }

    public void push(java.lang.String)
    {
        com.mycila.inject.internal.cglib.core.CodeEmitter r0;
        java.lang.String r1;
        com.mycila.inject.internal.asm.MethodVisitor $r2;

        r0 := @this: com.mycila.inject.internal.cglib.core.CodeEmitter;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        interfaceinvoke $r2.<com.mycila.inject.internal.asm.MethodVisitor: void visitLdcInsn(java.lang.Object)>(r1);

        return;
    }

    public void 'newarray'()
    {
        com.mycila.inject.internal.asm.Type $r1;
        com.mycila.inject.internal.cglib.core.CodeEmitter r0;

        r0 := @this: com.mycila.inject.internal.cglib.core.CodeEmitter;

        $r1 = <com.mycila.inject.internal.cglib.core.Constants: com.mycila.inject.internal.asm.Type TYPE_OBJECT>;

        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void 'newarray'(com.mycila.inject.internal.asm.Type)>($r1);

        return;
    }

    public void 'newarray'(com.mycila.inject.internal.asm.Type)
    {
        com.mycila.inject.internal.asm.MethodVisitor $r2;
        int $i0;
        com.mycila.inject.internal.asm.Type r0;
        com.mycila.inject.internal.cglib.core.CodeEmitter r1;
        boolean $z0;

        r1 := @this: com.mycila.inject.internal.cglib.core.CodeEmitter;

        r0 := @parameter0: com.mycila.inject.internal.asm.Type;

        $z0 = staticinvoke <com.mycila.inject.internal.cglib.core.TypeUtils: boolean isPrimitive(com.mycila.inject.internal.asm.Type)>(r0);

        if $z0 == 0 goto label1;

        $r2 = r1.<com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        $i0 = staticinvoke <com.mycila.inject.internal.cglib.core.TypeUtils: int NEWARRAY(com.mycila.inject.internal.asm.Type)>(r0);

        interfaceinvoke $r2.<com.mycila.inject.internal.asm.MethodVisitor: void visitIntInsn(int,int)>(188, $i0);

        goto label2;

     label1:
        specialinvoke r1.<com.mycila.inject.internal.cglib.core.CodeEmitter: void emit_type(int,com.mycila.inject.internal.asm.Type)>(189, r0);

     label2:
        return;
    }

    public void arraylength()
    {
        com.mycila.inject.internal.cglib.core.CodeEmitter r0;
        com.mycila.inject.internal.asm.MethodVisitor $r1;

        r0 := @this: com.mycila.inject.internal.cglib.core.CodeEmitter;

        $r1 = r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        interfaceinvoke $r1.<com.mycila.inject.internal.asm.MethodVisitor: void visitInsn(int)>(190);

        return;
    }

    public void load_this()
    {
        java.lang.IllegalStateException $r3;
        com.mycila.inject.internal.asm.MethodVisitor $r2;
        com.mycila.inject.internal.cglib.core.CodeEmitter$State $r1;
        int $i0;
        com.mycila.inject.internal.cglib.core.CodeEmitter r0;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.cglib.core.CodeEmitter;

        $r1 = r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.cglib.core.CodeEmitter$State state>;

        $i0 = $r1.<com.mycila.inject.internal.cglib.core.CodeEmitter$State: int access>;

        $z0 = staticinvoke <com.mycila.inject.internal.cglib.core.TypeUtils: boolean isStatic(int)>($i0);

        if $z0 == 0 goto label1;

        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("no \'this\' pointer within static method");

        throw $r3;

     label1:
        $r2 = r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        interfaceinvoke $r2.<com.mycila.inject.internal.asm.MethodVisitor: void visitVarInsn(int,int)>(25, 0);

        return;
    }

    public void load_args()
    {
        com.mycila.inject.internal.cglib.core.CodeEmitter$State $r1;
        int $i0;
        com.mycila.inject.internal.cglib.core.CodeEmitter r0;
        com.mycila.inject.internal.asm.Type[] $r2;

        r0 := @this: com.mycila.inject.internal.cglib.core.CodeEmitter;

        $r1 = r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.cglib.core.CodeEmitter$State state>;

        $r2 = $r1.<com.mycila.inject.internal.cglib.core.CodeEmitter$State: com.mycila.inject.internal.asm.Type[] argumentTypes>;

        $i0 = lengthof $r2;

        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void load_args(int,int)>(0, $i0);

        return;
    }

    public void load_arg(int)
    {
        com.mycila.inject.internal.asm.Type $r4;
        com.mycila.inject.internal.cglib.core.CodeEmitter r0;
        com.mycila.inject.internal.cglib.core.CodeEmitter$State $r1, $r3;
        int i0, $i1, $i2, $i3;
        com.mycila.inject.internal.asm.Type[] $r2;

        r0 := @this: com.mycila.inject.internal.cglib.core.CodeEmitter;

        i0 := @parameter0: int;

        $r1 = r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.cglib.core.CodeEmitter$State state>;

        $r2 = $r1.<com.mycila.inject.internal.cglib.core.CodeEmitter$State: com.mycila.inject.internal.asm.Type[] argumentTypes>;

        $r4 = $r2[i0];

        $r3 = r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.cglib.core.CodeEmitter$State state>;

        $i1 = $r3.<com.mycila.inject.internal.cglib.core.CodeEmitter$State: int localOffset>;

        $i2 = specialinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: int skipArgs(int)>(i0);

        $i3 = $i1 + $i2;

        specialinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void load_local(com.mycila.inject.internal.asm.Type,int)>($r4, $i3);

        return;
    }

    public void load_args(int, int)
    {
        com.mycila.inject.internal.asm.Type r4;
        com.mycila.inject.internal.cglib.core.CodeEmitter r0;
        com.mycila.inject.internal.cglib.core.CodeEmitter$State $r1, $r2;
        int i0, $i1, $i2, i3, $i4, $i5, i6, i7;
        com.mycila.inject.internal.asm.Type[] $r3;

        r0 := @this: com.mycila.inject.internal.cglib.core.CodeEmitter;

        i0 := @parameter0: int;

        i3 := @parameter1: int;

        $r1 = r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.cglib.core.CodeEmitter$State state>;

        $i1 = $r1.<com.mycila.inject.internal.cglib.core.CodeEmitter$State: int localOffset>;

        $i2 = specialinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: int skipArgs(int)>(i0);

        i6 = $i1 + $i2;

        i7 = 0;

     label1:
        if i7 >= i3 goto label2;

        $r2 = r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.cglib.core.CodeEmitter$State state>;

        $r3 = $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter$State: com.mycila.inject.internal.asm.Type[] argumentTypes>;

        $i4 = i0 + i7;

        r4 = $r3[$i4];

        specialinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void load_local(com.mycila.inject.internal.asm.Type,int)>(r4, i6);

        $i5 = virtualinvoke r4.<com.mycila.inject.internal.asm.Type: int getSize()>();

        i6 = i6 + $i5;

        i7 = i7 + 1;

        goto label1;

     label2:
        return;
    }

    private int skipArgs(int)
    {
        com.mycila.inject.internal.asm.Type $r3;
        com.mycila.inject.internal.cglib.core.CodeEmitter r0;
        com.mycila.inject.internal.cglib.core.CodeEmitter$State $r1;
        int i0, $i1, i2, i3;
        com.mycila.inject.internal.asm.Type[] $r2;

        r0 := @this: com.mycila.inject.internal.cglib.core.CodeEmitter;

        i0 := @parameter0: int;

        i2 = 0;

        i3 = 0;

     label1:
        if i3 >= i0 goto label2;

        $r1 = r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.cglib.core.CodeEmitter$State state>;

        $r2 = $r1.<com.mycila.inject.internal.cglib.core.CodeEmitter$State: com.mycila.inject.internal.asm.Type[] argumentTypes>;

        $r3 = $r2[i3];

        $i1 = virtualinvoke $r3.<com.mycila.inject.internal.asm.Type: int getSize()>();

        i2 = i2 + $i1;

        i3 = i3 + 1;

        goto label1;

     label2:
        return i2;
    }

    private void load_local(com.mycila.inject.internal.asm.Type, int)
    {
        com.mycila.inject.internal.asm.MethodVisitor $r2;
        int $i0, i1;
        com.mycila.inject.internal.asm.Type r1;
        com.mycila.inject.internal.cglib.core.CodeEmitter r0;

        r0 := @this: com.mycila.inject.internal.cglib.core.CodeEmitter;

        r1 := @parameter0: com.mycila.inject.internal.asm.Type;

        i1 := @parameter1: int;

        $r2 = r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        $i0 = virtualinvoke r1.<com.mycila.inject.internal.asm.Type: int getOpcode(int)>(21);

        interfaceinvoke $r2.<com.mycila.inject.internal.asm.MethodVisitor: void visitVarInsn(int,int)>($i0, i1);

        return;
    }

    private void store_local(com.mycila.inject.internal.asm.Type, int)
    {
        com.mycila.inject.internal.asm.MethodVisitor $r2;
        int $i0, i1;
        com.mycila.inject.internal.asm.Type r1;
        com.mycila.inject.internal.cglib.core.CodeEmitter r0;

        r0 := @this: com.mycila.inject.internal.cglib.core.CodeEmitter;

        r1 := @parameter0: com.mycila.inject.internal.asm.Type;

        i1 := @parameter1: int;

        $r2 = r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        $i0 = virtualinvoke r1.<com.mycila.inject.internal.asm.Type: int getOpcode(int)>(54);

        interfaceinvoke $r2.<com.mycila.inject.internal.asm.MethodVisitor: void visitVarInsn(int,int)>($i0, i1);

        return;
    }

    public void iinc(com.mycila.inject.internal.cglib.core.Local, int)
    {
        com.mycila.inject.internal.cglib.core.Local r1;
        com.mycila.inject.internal.asm.MethodVisitor $r2;
        int $i0, i1;
        com.mycila.inject.internal.cglib.core.CodeEmitter r0;

        r0 := @this: com.mycila.inject.internal.cglib.core.CodeEmitter;

        r1 := @parameter0: com.mycila.inject.internal.cglib.core.Local;

        i1 := @parameter1: int;

        $r2 = r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        $i0 = virtualinvoke r1.<com.mycila.inject.internal.cglib.core.Local: int getIndex()>();

        interfaceinvoke $r2.<com.mycila.inject.internal.asm.MethodVisitor: void visitIincInsn(int,int)>($i0, i1);

        return;
    }

    public void store_local(com.mycila.inject.internal.cglib.core.Local)
    {
        com.mycila.inject.internal.cglib.core.Local r1;
        int $i0;
        com.mycila.inject.internal.asm.Type $r2;
        com.mycila.inject.internal.cglib.core.CodeEmitter r0;

        r0 := @this: com.mycila.inject.internal.cglib.core.CodeEmitter;

        r1 := @parameter0: com.mycila.inject.internal.cglib.core.Local;

        $r2 = virtualinvoke r1.<com.mycila.inject.internal.cglib.core.Local: com.mycila.inject.internal.asm.Type getType()>();

        $i0 = virtualinvoke r1.<com.mycila.inject.internal.cglib.core.Local: int getIndex()>();

        specialinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void store_local(com.mycila.inject.internal.asm.Type,int)>($r2, $i0);

        return;
    }

    public void load_local(com.mycila.inject.internal.cglib.core.Local)
    {
        com.mycila.inject.internal.cglib.core.Local r1;
        int $i0;
        com.mycila.inject.internal.asm.Type $r2;
        com.mycila.inject.internal.cglib.core.CodeEmitter r0;

        r0 := @this: com.mycila.inject.internal.cglib.core.CodeEmitter;

        r1 := @parameter0: com.mycila.inject.internal.cglib.core.Local;

        $r2 = virtualinvoke r1.<com.mycila.inject.internal.cglib.core.Local: com.mycila.inject.internal.asm.Type getType()>();

        $i0 = virtualinvoke r1.<com.mycila.inject.internal.cglib.core.Local: int getIndex()>();

        specialinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void load_local(com.mycila.inject.internal.asm.Type,int)>($r2, $i0);

        return;
    }

    public void return_value()
    {
        com.mycila.inject.internal.asm.MethodVisitor $r3;
        com.mycila.inject.internal.cglib.core.CodeEmitter$State $r1;
        com.mycila.inject.internal.cglib.core.Signature $r2;
        int $i0;
        com.mycila.inject.internal.asm.Type $r4;
        com.mycila.inject.internal.cglib.core.CodeEmitter r0;

        r0 := @this: com.mycila.inject.internal.cglib.core.CodeEmitter;

        $r3 = r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        $r1 = r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.cglib.core.CodeEmitter$State state>;

        $r2 = $r1.<com.mycila.inject.internal.cglib.core.CodeEmitter$State: com.mycila.inject.internal.cglib.core.Signature sig>;

        $r4 = virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.Signature: com.mycila.inject.internal.asm.Type getReturnType()>();

        $i0 = virtualinvoke $r4.<com.mycila.inject.internal.asm.Type: int getOpcode(int)>(172);

        interfaceinvoke $r3.<com.mycila.inject.internal.asm.MethodVisitor: void visitInsn(int)>($i0);

        return;
    }

    public void getfield(java.lang.String)
    {
        com.mycila.inject.internal.asm.Type $r5, $r6;
        com.mycila.inject.internal.cglib.core.CodeEmitter r0;
        com.mycila.inject.internal.cglib.core.ClassEmitter $r2, $r4;
        short $s1;
        com.mycila.inject.internal.cglib.core.ClassEmitter$FieldInfo $r3;
        int $i0;
        java.lang.String r1;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.cglib.core.CodeEmitter;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.cglib.core.ClassEmitter ce>;

        $r3 = virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.ClassEmitter: com.mycila.inject.internal.cglib.core.ClassEmitter$FieldInfo getFieldInfo(java.lang.String)>(r1);

        $i0 = $r3.<com.mycila.inject.internal.cglib.core.ClassEmitter$FieldInfo: int access>;

        $z0 = staticinvoke <com.mycila.inject.internal.cglib.core.TypeUtils: boolean isStatic(int)>($i0);

        if $z0 == 0 goto label1;

        $s1 = 178;

        goto label2;

     label1:
        $s1 = 180;

     label2:
        $r4 = r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.cglib.core.ClassEmitter ce>;

        $r5 = virtualinvoke $r4.<com.mycila.inject.internal.cglib.core.ClassEmitter: com.mycila.inject.internal.asm.Type getClassType()>();

        $r6 = $r3.<com.mycila.inject.internal.cglib.core.ClassEmitter$FieldInfo: com.mycila.inject.internal.asm.Type type>;

        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void emit_field(int,com.mycila.inject.internal.asm.Type,java.lang.String,com.mycila.inject.internal.asm.Type)>($s1, $r5, r1, $r6);

        return;
    }

    public void putfield(java.lang.String)
    {
        com.mycila.inject.internal.asm.Type $r5, $r6;
        com.mycila.inject.internal.cglib.core.CodeEmitter r0;
        com.mycila.inject.internal.cglib.core.ClassEmitter $r2, $r4;
        short $s1;
        com.mycila.inject.internal.cglib.core.ClassEmitter$FieldInfo $r3;
        int $i0;
        java.lang.String r1;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.cglib.core.CodeEmitter;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.cglib.core.ClassEmitter ce>;

        $r3 = virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.ClassEmitter: com.mycila.inject.internal.cglib.core.ClassEmitter$FieldInfo getFieldInfo(java.lang.String)>(r1);

        $i0 = $r3.<com.mycila.inject.internal.cglib.core.ClassEmitter$FieldInfo: int access>;

        $z0 = staticinvoke <com.mycila.inject.internal.cglib.core.TypeUtils: boolean isStatic(int)>($i0);

        if $z0 == 0 goto label1;

        $s1 = 179;

        goto label2;

     label1:
        $s1 = 181;

     label2:
        $r4 = r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.cglib.core.ClassEmitter ce>;

        $r5 = virtualinvoke $r4.<com.mycila.inject.internal.cglib.core.ClassEmitter: com.mycila.inject.internal.asm.Type getClassType()>();

        $r6 = $r3.<com.mycila.inject.internal.cglib.core.ClassEmitter$FieldInfo: com.mycila.inject.internal.asm.Type type>;

        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void emit_field(int,com.mycila.inject.internal.asm.Type,java.lang.String,com.mycila.inject.internal.asm.Type)>($s1, $r5, r1, $r6);

        return;
    }

    public void super_getfield(java.lang.String, com.mycila.inject.internal.asm.Type)
    {
        com.mycila.inject.internal.cglib.core.ClassEmitter $r1;
        com.mycila.inject.internal.asm.Type $r2, r4;
        com.mycila.inject.internal.cglib.core.CodeEmitter r0;
        java.lang.String r3;

        r0 := @this: com.mycila.inject.internal.cglib.core.CodeEmitter;

        r3 := @parameter0: java.lang.String;

        r4 := @parameter1: com.mycila.inject.internal.asm.Type;

        $r1 = r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.cglib.core.ClassEmitter ce>;

        $r2 = virtualinvoke $r1.<com.mycila.inject.internal.cglib.core.ClassEmitter: com.mycila.inject.internal.asm.Type getSuperType()>();

        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void emit_field(int,com.mycila.inject.internal.asm.Type,java.lang.String,com.mycila.inject.internal.asm.Type)>(180, $r2, r3, r4);

        return;
    }

    public void super_putfield(java.lang.String, com.mycila.inject.internal.asm.Type)
    {
        com.mycila.inject.internal.cglib.core.ClassEmitter $r1;
        com.mycila.inject.internal.asm.Type $r2, r4;
        com.mycila.inject.internal.cglib.core.CodeEmitter r0;
        java.lang.String r3;

        r0 := @this: com.mycila.inject.internal.cglib.core.CodeEmitter;

        r3 := @parameter0: java.lang.String;

        r4 := @parameter1: com.mycila.inject.internal.asm.Type;

        $r1 = r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.cglib.core.ClassEmitter ce>;

        $r2 = virtualinvoke $r1.<com.mycila.inject.internal.cglib.core.ClassEmitter: com.mycila.inject.internal.asm.Type getSuperType()>();

        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void emit_field(int,com.mycila.inject.internal.asm.Type,java.lang.String,com.mycila.inject.internal.asm.Type)>(181, $r2, r3, r4);

        return;
    }

    public void super_getstatic(java.lang.String, com.mycila.inject.internal.asm.Type)
    {
        com.mycila.inject.internal.cglib.core.ClassEmitter $r1;
        com.mycila.inject.internal.asm.Type $r2, r4;
        com.mycila.inject.internal.cglib.core.CodeEmitter r0;
        java.lang.String r3;

        r0 := @this: com.mycila.inject.internal.cglib.core.CodeEmitter;

        r3 := @parameter0: java.lang.String;

        r4 := @parameter1: com.mycila.inject.internal.asm.Type;

        $r1 = r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.cglib.core.ClassEmitter ce>;

        $r2 = virtualinvoke $r1.<com.mycila.inject.internal.cglib.core.ClassEmitter: com.mycila.inject.internal.asm.Type getSuperType()>();

        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void emit_field(int,com.mycila.inject.internal.asm.Type,java.lang.String,com.mycila.inject.internal.asm.Type)>(178, $r2, r3, r4);

        return;
    }

    public void super_putstatic(java.lang.String, com.mycila.inject.internal.asm.Type)
    {
        com.mycila.inject.internal.cglib.core.ClassEmitter $r1;
        com.mycila.inject.internal.asm.Type $r2, r4;
        com.mycila.inject.internal.cglib.core.CodeEmitter r0;
        java.lang.String r3;

        r0 := @this: com.mycila.inject.internal.cglib.core.CodeEmitter;

        r3 := @parameter0: java.lang.String;

        r4 := @parameter1: com.mycila.inject.internal.asm.Type;

        $r1 = r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.cglib.core.ClassEmitter ce>;

        $r2 = virtualinvoke $r1.<com.mycila.inject.internal.cglib.core.ClassEmitter: com.mycila.inject.internal.asm.Type getSuperType()>();

        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void emit_field(int,com.mycila.inject.internal.asm.Type,java.lang.String,com.mycila.inject.internal.asm.Type)>(179, $r2, r3, r4);

        return;
    }

    public void getfield(com.mycila.inject.internal.asm.Type, java.lang.String, com.mycila.inject.internal.asm.Type)
    {
        com.mycila.inject.internal.asm.Type r1, r3;
        com.mycila.inject.internal.cglib.core.CodeEmitter r0;
        java.lang.String r2;

        r0 := @this: com.mycila.inject.internal.cglib.core.CodeEmitter;

        r1 := @parameter0: com.mycila.inject.internal.asm.Type;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: com.mycila.inject.internal.asm.Type;

        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void emit_field(int,com.mycila.inject.internal.asm.Type,java.lang.String,com.mycila.inject.internal.asm.Type)>(180, r1, r2, r3);

        return;
    }

    public void putfield(com.mycila.inject.internal.asm.Type, java.lang.String, com.mycila.inject.internal.asm.Type)
    {
        com.mycila.inject.internal.asm.Type r1, r3;
        com.mycila.inject.internal.cglib.core.CodeEmitter r0;
        java.lang.String r2;

        r0 := @this: com.mycila.inject.internal.cglib.core.CodeEmitter;

        r1 := @parameter0: com.mycila.inject.internal.asm.Type;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: com.mycila.inject.internal.asm.Type;

        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void emit_field(int,com.mycila.inject.internal.asm.Type,java.lang.String,com.mycila.inject.internal.asm.Type)>(181, r1, r2, r3);

        return;
    }

    public void getstatic(com.mycila.inject.internal.asm.Type, java.lang.String, com.mycila.inject.internal.asm.Type)
    {
        com.mycila.inject.internal.asm.Type r1, r3;
        com.mycila.inject.internal.cglib.core.CodeEmitter r0;
        java.lang.String r2;

        r0 := @this: com.mycila.inject.internal.cglib.core.CodeEmitter;

        r1 := @parameter0: com.mycila.inject.internal.asm.Type;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: com.mycila.inject.internal.asm.Type;

        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void emit_field(int,com.mycila.inject.internal.asm.Type,java.lang.String,com.mycila.inject.internal.asm.Type)>(178, r1, r2, r3);

        return;
    }

    public void putstatic(com.mycila.inject.internal.asm.Type, java.lang.String, com.mycila.inject.internal.asm.Type)
    {
        com.mycila.inject.internal.asm.Type r1, r3;
        com.mycila.inject.internal.cglib.core.CodeEmitter r0;
        java.lang.String r2;

        r0 := @this: com.mycila.inject.internal.cglib.core.CodeEmitter;

        r1 := @parameter0: com.mycila.inject.internal.asm.Type;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: com.mycila.inject.internal.asm.Type;

        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void emit_field(int,com.mycila.inject.internal.asm.Type,java.lang.String,com.mycila.inject.internal.asm.Type)>(179, r1, r2, r3);

        return;
    }

    void emit_field(int, com.mycila.inject.internal.asm.Type, java.lang.String, com.mycila.inject.internal.asm.Type)
    {
        com.mycila.inject.internal.asm.Type r1, r5;
        com.mycila.inject.internal.cglib.core.CodeEmitter r0;
        com.mycila.inject.internal.asm.MethodVisitor $r2;
        int i0;
        java.lang.String $r3, r4, $r6;

        r0 := @this: com.mycila.inject.internal.cglib.core.CodeEmitter;

        i0 := @parameter0: int;

        r1 := @parameter1: com.mycila.inject.internal.asm.Type;

        r4 := @parameter2: java.lang.String;

        r5 := @parameter3: com.mycila.inject.internal.asm.Type;

        $r2 = r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        $r3 = virtualinvoke r1.<com.mycila.inject.internal.asm.Type: java.lang.String getInternalName()>();

        $r6 = virtualinvoke r5.<com.mycila.inject.internal.asm.Type: java.lang.String getDescriptor()>();

        interfaceinvoke $r2.<com.mycila.inject.internal.asm.MethodVisitor: void visitFieldInsn(int,java.lang.String,java.lang.String,java.lang.String)>(i0, $r3, r4, $r6);

        return;
    }

    public void super_invoke()
    {
        com.mycila.inject.internal.cglib.core.CodeEmitter r0;
        com.mycila.inject.internal.cglib.core.CodeEmitter$State $r1;
        com.mycila.inject.internal.cglib.core.Signature $r2;

        r0 := @this: com.mycila.inject.internal.cglib.core.CodeEmitter;

        $r1 = r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.cglib.core.CodeEmitter$State state>;

        $r2 = $r1.<com.mycila.inject.internal.cglib.core.CodeEmitter$State: com.mycila.inject.internal.cglib.core.Signature sig>;

        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void super_invoke(com.mycila.inject.internal.cglib.core.Signature)>($r2);

        return;
    }

    public void super_invoke(com.mycila.inject.internal.cglib.core.Signature)
    {
        com.mycila.inject.internal.cglib.core.ClassEmitter $r1;
        com.mycila.inject.internal.cglib.core.Signature r3;
        com.mycila.inject.internal.asm.Type $r2;
        com.mycila.inject.internal.cglib.core.CodeEmitter r0;

        r0 := @this: com.mycila.inject.internal.cglib.core.CodeEmitter;

        r3 := @parameter0: com.mycila.inject.internal.cglib.core.Signature;

        $r1 = r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.cglib.core.ClassEmitter ce>;

        $r2 = virtualinvoke $r1.<com.mycila.inject.internal.cglib.core.ClassEmitter: com.mycila.inject.internal.asm.Type getSuperType()>();

        specialinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void emit_invoke(int,com.mycila.inject.internal.asm.Type,com.mycila.inject.internal.cglib.core.Signature)>(183, $r2, r3);

        return;
    }

    public void invoke_constructor(com.mycila.inject.internal.asm.Type)
    {
        com.mycila.inject.internal.asm.Type r1;
        com.mycila.inject.internal.cglib.core.CodeEmitter r0;
        com.mycila.inject.internal.cglib.core.Signature $r2;

        r0 := @this: com.mycila.inject.internal.cglib.core.CodeEmitter;

        r1 := @parameter0: com.mycila.inject.internal.asm.Type;

        $r2 = <com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.cglib.core.Signature CSTRUCT_NULL>;

        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void invoke_constructor(com.mycila.inject.internal.asm.Type,com.mycila.inject.internal.cglib.core.Signature)>(r1, $r2);

        return;
    }

    public void super_invoke_constructor()
    {
        com.mycila.inject.internal.cglib.core.ClassEmitter $r1;
        com.mycila.inject.internal.asm.Type $r2;
        com.mycila.inject.internal.cglib.core.CodeEmitter r0;

        r0 := @this: com.mycila.inject.internal.cglib.core.CodeEmitter;

        $r1 = r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.cglib.core.ClassEmitter ce>;

        $r2 = virtualinvoke $r1.<com.mycila.inject.internal.cglib.core.ClassEmitter: com.mycila.inject.internal.asm.Type getSuperType()>();

        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void invoke_constructor(com.mycila.inject.internal.asm.Type)>($r2);

        return;
    }

    public void invoke_constructor_this()
    {
        com.mycila.inject.internal.cglib.core.ClassEmitter $r1;
        com.mycila.inject.internal.asm.Type $r2;
        com.mycila.inject.internal.cglib.core.CodeEmitter r0;

        r0 := @this: com.mycila.inject.internal.cglib.core.CodeEmitter;

        $r1 = r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.cglib.core.ClassEmitter ce>;

        $r2 = virtualinvoke $r1.<com.mycila.inject.internal.cglib.core.ClassEmitter: com.mycila.inject.internal.asm.Type getClassType()>();

        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void invoke_constructor(com.mycila.inject.internal.asm.Type)>($r2);

        return;
    }

    private void emit_invoke(int, com.mycila.inject.internal.asm.Type, com.mycila.inject.internal.cglib.core.Signature)
    {
        com.mycila.inject.internal.cglib.core.Signature r0;
        com.mycila.inject.internal.asm.Type r3;
        com.mycila.inject.internal.cglib.core.CodeEmitter r2;
        com.mycila.inject.internal.asm.MethodVisitor $r4;
        int i0;
        java.lang.String $r1, $r5, $r6, $r7;
        boolean $z0;

        r2 := @this: com.mycila.inject.internal.cglib.core.CodeEmitter;

        i0 := @parameter0: int;

        r3 := @parameter1: com.mycila.inject.internal.asm.Type;

        r0 := @parameter2: com.mycila.inject.internal.cglib.core.Signature;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.cglib.core.Signature: java.lang.String getName()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("<init>");

        if $z0 == 0 goto label1;

        if i0 == 182 goto label1;

        if i0 != 184 goto label1;

     label1:
        $r4 = r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        $r5 = virtualinvoke r3.<com.mycila.inject.internal.asm.Type: java.lang.String getInternalName()>();

        $r6 = virtualinvoke r0.<com.mycila.inject.internal.cglib.core.Signature: java.lang.String getName()>();

        $r7 = virtualinvoke r0.<com.mycila.inject.internal.cglib.core.Signature: java.lang.String getDescriptor()>();

        interfaceinvoke $r4.<com.mycila.inject.internal.asm.MethodVisitor: void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String)>(i0, $r5, $r6, $r7);

        return;
    }

    public void invoke_interface(com.mycila.inject.internal.asm.Type, com.mycila.inject.internal.cglib.core.Signature)
    {
        com.mycila.inject.internal.asm.Type r1;
        com.mycila.inject.internal.cglib.core.CodeEmitter r0;
        com.mycila.inject.internal.cglib.core.Signature r2;

        r0 := @this: com.mycila.inject.internal.cglib.core.CodeEmitter;

        r1 := @parameter0: com.mycila.inject.internal.asm.Type;

        r2 := @parameter1: com.mycila.inject.internal.cglib.core.Signature;

        specialinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void emit_invoke(int,com.mycila.inject.internal.asm.Type,com.mycila.inject.internal.cglib.core.Signature)>(185, r1, r2);

        return;
    }

    public void invoke_virtual(com.mycila.inject.internal.asm.Type, com.mycila.inject.internal.cglib.core.Signature)
    {
        com.mycila.inject.internal.asm.Type r1;
        com.mycila.inject.internal.cglib.core.CodeEmitter r0;
        com.mycila.inject.internal.cglib.core.Signature r2;

        r0 := @this: com.mycila.inject.internal.cglib.core.CodeEmitter;

        r1 := @parameter0: com.mycila.inject.internal.asm.Type;

        r2 := @parameter1: com.mycila.inject.internal.cglib.core.Signature;

        specialinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void emit_invoke(int,com.mycila.inject.internal.asm.Type,com.mycila.inject.internal.cglib.core.Signature)>(182, r1, r2);

        return;
    }

    public void invoke_static(com.mycila.inject.internal.asm.Type, com.mycila.inject.internal.cglib.core.Signature)
    {
        com.mycila.inject.internal.asm.Type r1;
        com.mycila.inject.internal.cglib.core.CodeEmitter r0;
        com.mycila.inject.internal.cglib.core.Signature r2;

        r0 := @this: com.mycila.inject.internal.cglib.core.CodeEmitter;

        r1 := @parameter0: com.mycila.inject.internal.asm.Type;

        r2 := @parameter1: com.mycila.inject.internal.cglib.core.Signature;

        specialinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void emit_invoke(int,com.mycila.inject.internal.asm.Type,com.mycila.inject.internal.cglib.core.Signature)>(184, r1, r2);

        return;
    }

    public void invoke_virtual_this(com.mycila.inject.internal.cglib.core.Signature)
    {
        com.mycila.inject.internal.cglib.core.ClassEmitter $r1;
        com.mycila.inject.internal.cglib.core.Signature r3;
        com.mycila.inject.internal.asm.Type $r2;
        com.mycila.inject.internal.cglib.core.CodeEmitter r0;

        r0 := @this: com.mycila.inject.internal.cglib.core.CodeEmitter;

        r3 := @parameter0: com.mycila.inject.internal.cglib.core.Signature;

        $r1 = r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.cglib.core.ClassEmitter ce>;

        $r2 = virtualinvoke $r1.<com.mycila.inject.internal.cglib.core.ClassEmitter: com.mycila.inject.internal.asm.Type getClassType()>();

        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void invoke_virtual(com.mycila.inject.internal.asm.Type,com.mycila.inject.internal.cglib.core.Signature)>($r2, r3);

        return;
    }

    public void invoke_static_this(com.mycila.inject.internal.cglib.core.Signature)
    {
        com.mycila.inject.internal.cglib.core.ClassEmitter $r1;
        com.mycila.inject.internal.cglib.core.Signature r3;
        com.mycila.inject.internal.asm.Type $r2;
        com.mycila.inject.internal.cglib.core.CodeEmitter r0;

        r0 := @this: com.mycila.inject.internal.cglib.core.CodeEmitter;

        r3 := @parameter0: com.mycila.inject.internal.cglib.core.Signature;

        $r1 = r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.cglib.core.ClassEmitter ce>;

        $r2 = virtualinvoke $r1.<com.mycila.inject.internal.cglib.core.ClassEmitter: com.mycila.inject.internal.asm.Type getClassType()>();

        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void invoke_static(com.mycila.inject.internal.asm.Type,com.mycila.inject.internal.cglib.core.Signature)>($r2, r3);

        return;
    }

    public void invoke_constructor(com.mycila.inject.internal.asm.Type, com.mycila.inject.internal.cglib.core.Signature)
    {
        com.mycila.inject.internal.asm.Type r1;
        com.mycila.inject.internal.cglib.core.CodeEmitter r0;
        com.mycila.inject.internal.cglib.core.Signature r2;

        r0 := @this: com.mycila.inject.internal.cglib.core.CodeEmitter;

        r1 := @parameter0: com.mycila.inject.internal.asm.Type;

        r2 := @parameter1: com.mycila.inject.internal.cglib.core.Signature;

        specialinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void emit_invoke(int,com.mycila.inject.internal.asm.Type,com.mycila.inject.internal.cglib.core.Signature)>(183, r1, r2);

        return;
    }

    public void invoke_constructor_this(com.mycila.inject.internal.cglib.core.Signature)
    {
        com.mycila.inject.internal.cglib.core.ClassEmitter $r1;
        com.mycila.inject.internal.cglib.core.Signature r3;
        com.mycila.inject.internal.asm.Type $r2;
        com.mycila.inject.internal.cglib.core.CodeEmitter r0;

        r0 := @this: com.mycila.inject.internal.cglib.core.CodeEmitter;

        r3 := @parameter0: com.mycila.inject.internal.cglib.core.Signature;

        $r1 = r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.cglib.core.ClassEmitter ce>;

        $r2 = virtualinvoke $r1.<com.mycila.inject.internal.cglib.core.ClassEmitter: com.mycila.inject.internal.asm.Type getClassType()>();

        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void invoke_constructor(com.mycila.inject.internal.asm.Type,com.mycila.inject.internal.cglib.core.Signature)>($r2, r3);

        return;
    }

    public void super_invoke_constructor(com.mycila.inject.internal.cglib.core.Signature)
    {
        com.mycila.inject.internal.cglib.core.ClassEmitter $r1;
        com.mycila.inject.internal.cglib.core.Signature r3;
        com.mycila.inject.internal.asm.Type $r2;
        com.mycila.inject.internal.cglib.core.CodeEmitter r0;

        r0 := @this: com.mycila.inject.internal.cglib.core.CodeEmitter;

        r3 := @parameter0: com.mycila.inject.internal.cglib.core.Signature;

        $r1 = r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.cglib.core.ClassEmitter ce>;

        $r2 = virtualinvoke $r1.<com.mycila.inject.internal.cglib.core.ClassEmitter: com.mycila.inject.internal.asm.Type getSuperType()>();

        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void invoke_constructor(com.mycila.inject.internal.asm.Type,com.mycila.inject.internal.cglib.core.Signature)>($r2, r3);

        return;
    }

    public void new_instance_this()
    {
        com.mycila.inject.internal.cglib.core.ClassEmitter $r1;
        com.mycila.inject.internal.asm.Type $r2;
        com.mycila.inject.internal.cglib.core.CodeEmitter r0;

        r0 := @this: com.mycila.inject.internal.cglib.core.CodeEmitter;

        $r1 = r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.cglib.core.ClassEmitter ce>;

        $r2 = virtualinvoke $r1.<com.mycila.inject.internal.cglib.core.ClassEmitter: com.mycila.inject.internal.asm.Type getClassType()>();

        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void new_instance(com.mycila.inject.internal.asm.Type)>($r2);

        return;
    }

    public void new_instance(com.mycila.inject.internal.asm.Type)
    {
        com.mycila.inject.internal.asm.Type r1;
        com.mycila.inject.internal.cglib.core.CodeEmitter r0;

        r0 := @this: com.mycila.inject.internal.cglib.core.CodeEmitter;

        r1 := @parameter0: com.mycila.inject.internal.asm.Type;

        specialinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void emit_type(int,com.mycila.inject.internal.asm.Type)>(187, r1);

        return;
    }

    private void emit_type(int, com.mycila.inject.internal.asm.Type)
    {
        com.mycila.inject.internal.asm.MethodVisitor $r2;
        int i0;
        com.mycila.inject.internal.asm.Type r0;
        com.mycila.inject.internal.cglib.core.CodeEmitter r1;
        java.lang.String r3;
        boolean $z0;

        r1 := @this: com.mycila.inject.internal.cglib.core.CodeEmitter;

        i0 := @parameter0: int;

        r0 := @parameter1: com.mycila.inject.internal.asm.Type;

        $z0 = staticinvoke <com.mycila.inject.internal.cglib.core.TypeUtils: boolean isArray(com.mycila.inject.internal.asm.Type)>(r0);

        if $z0 == 0 goto label1;

        r3 = virtualinvoke r0.<com.mycila.inject.internal.asm.Type: java.lang.String getDescriptor()>();

        goto label2;

     label1:
        r3 = virtualinvoke r0.<com.mycila.inject.internal.asm.Type: java.lang.String getInternalName()>();

     label2:
        $r2 = r1.<com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        interfaceinvoke $r2.<com.mycila.inject.internal.asm.MethodVisitor: void visitTypeInsn(int,java.lang.String)>(i0, r3);

        return;
    }

    public void aaload(int)
    {
        int i0;
        com.mycila.inject.internal.cglib.core.CodeEmitter r0;

        r0 := @this: com.mycila.inject.internal.cglib.core.CodeEmitter;

        i0 := @parameter0: int;

        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void push(int)>(i0);

        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void aaload()>();

        return;
    }

    public void aaload()
    {
        com.mycila.inject.internal.cglib.core.CodeEmitter r0;
        com.mycila.inject.internal.asm.MethodVisitor $r1;

        r0 := @this: com.mycila.inject.internal.cglib.core.CodeEmitter;

        $r1 = r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        interfaceinvoke $r1.<com.mycila.inject.internal.asm.MethodVisitor: void visitInsn(int)>(50);

        return;
    }

    public void aastore()
    {
        com.mycila.inject.internal.cglib.core.CodeEmitter r0;
        com.mycila.inject.internal.asm.MethodVisitor $r1;

        r0 := @this: com.mycila.inject.internal.cglib.core.CodeEmitter;

        $r1 = r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        interfaceinvoke $r1.<com.mycila.inject.internal.asm.MethodVisitor: void visitInsn(int)>(83);

        return;
    }

    public void athrow()
    {
        com.mycila.inject.internal.cglib.core.CodeEmitter r0;
        com.mycila.inject.internal.asm.MethodVisitor $r1;

        r0 := @this: com.mycila.inject.internal.cglib.core.CodeEmitter;

        $r1 = r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        interfaceinvoke $r1.<com.mycila.inject.internal.asm.MethodVisitor: void visitInsn(int)>(191);

        return;
    }

    public com.mycila.inject.internal.asm.Label make_label()
    {
        com.mycila.inject.internal.asm.Label $r0;
        com.mycila.inject.internal.cglib.core.CodeEmitter r1;

        r1 := @this: com.mycila.inject.internal.cglib.core.CodeEmitter;

        $r0 = new com.mycila.inject.internal.asm.Label;

        specialinvoke $r0.<com.mycila.inject.internal.asm.Label: void <init>()>();

        return $r0;
    }

    public com.mycila.inject.internal.cglib.core.Local make_local()
    {
        com.mycila.inject.internal.asm.Type $r1;
        com.mycila.inject.internal.cglib.core.Local $r2;
        com.mycila.inject.internal.cglib.core.CodeEmitter r0;

        r0 := @this: com.mycila.inject.internal.cglib.core.CodeEmitter;

        $r1 = <com.mycila.inject.internal.cglib.core.Constants: com.mycila.inject.internal.asm.Type TYPE_OBJECT>;

        $r2 = virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.cglib.core.Local make_local(com.mycila.inject.internal.asm.Type)>($r1);

        return $r2;
    }

    public com.mycila.inject.internal.cglib.core.Local make_local(com.mycila.inject.internal.asm.Type)
    {
        com.mycila.inject.internal.cglib.core.Local $r0;
        int $i0, $i1;
        com.mycila.inject.internal.asm.Type r2;
        com.mycila.inject.internal.cglib.core.CodeEmitter r1;

        r1 := @this: com.mycila.inject.internal.cglib.core.CodeEmitter;

        r2 := @parameter0: com.mycila.inject.internal.asm.Type;

        $r0 = new com.mycila.inject.internal.cglib.core.Local;

        $i0 = virtualinvoke r2.<com.mycila.inject.internal.asm.Type: int getSize()>();

        $i1 = virtualinvoke r1.<com.mycila.inject.internal.cglib.core.CodeEmitter: int newLocal(int)>($i0);

        specialinvoke $r0.<com.mycila.inject.internal.cglib.core.Local: void <init>(int,com.mycila.inject.internal.asm.Type)>($i1, r2);

        return $r0;
    }

    public void checkcast_this()
    {
        com.mycila.inject.internal.cglib.core.ClassEmitter $r1;
        com.mycila.inject.internal.asm.Type $r2;
        com.mycila.inject.internal.cglib.core.CodeEmitter r0;

        r0 := @this: com.mycila.inject.internal.cglib.core.CodeEmitter;

        $r1 = r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.cglib.core.ClassEmitter ce>;

        $r2 = virtualinvoke $r1.<com.mycila.inject.internal.cglib.core.ClassEmitter: com.mycila.inject.internal.asm.Type getClassType()>();

        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void checkcast(com.mycila.inject.internal.asm.Type)>($r2);

        return;
    }

    public void checkcast(com.mycila.inject.internal.asm.Type)
    {
        com.mycila.inject.internal.asm.Type r0, $r1;
        com.mycila.inject.internal.cglib.core.CodeEmitter r2;
        boolean $z0;

        r2 := @this: com.mycila.inject.internal.cglib.core.CodeEmitter;

        r0 := @parameter0: com.mycila.inject.internal.asm.Type;

        $r1 = <com.mycila.inject.internal.cglib.core.Constants: com.mycila.inject.internal.asm.Type TYPE_OBJECT>;

        $z0 = virtualinvoke r0.<com.mycila.inject.internal.asm.Type: boolean equals(java.lang.Object)>($r1);

        if $z0 != 0 goto label1;

        specialinvoke r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void emit_type(int,com.mycila.inject.internal.asm.Type)>(192, r0);

     label1:
        return;
    }

    public void instance_of(com.mycila.inject.internal.asm.Type)
    {
        com.mycila.inject.internal.asm.Type r1;
        com.mycila.inject.internal.cglib.core.CodeEmitter r0;

        r0 := @this: com.mycila.inject.internal.cglib.core.CodeEmitter;

        r1 := @parameter0: com.mycila.inject.internal.asm.Type;

        specialinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void emit_type(int,com.mycila.inject.internal.asm.Type)>(193, r1);

        return;
    }

    public void instance_of_this()
    {
        com.mycila.inject.internal.cglib.core.ClassEmitter $r1;
        com.mycila.inject.internal.asm.Type $r2;
        com.mycila.inject.internal.cglib.core.CodeEmitter r0;

        r0 := @this: com.mycila.inject.internal.cglib.core.CodeEmitter;

        $r1 = r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.cglib.core.ClassEmitter ce>;

        $r2 = virtualinvoke $r1.<com.mycila.inject.internal.cglib.core.ClassEmitter: com.mycila.inject.internal.asm.Type getClassType()>();

        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void instance_of(com.mycila.inject.internal.asm.Type)>($r2);

        return;
    }

    public void process_switch(int[], com.mycila.inject.internal.cglib.core.ProcessSwitchCallback)
    {
        com.mycila.inject.internal.cglib.core.CodeEmitter r1;
        byte $b8;
        int[] r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i9;
        boolean $z0;
        com.mycila.inject.internal.cglib.core.ProcessSwitchCallback r2;
        float $f0, $f1, f2;

        r1 := @this: com.mycila.inject.internal.cglib.core.CodeEmitter;

        r0 := @parameter0: int[];

        r2 := @parameter1: com.mycila.inject.internal.cglib.core.ProcessSwitchCallback;

        $i0 = lengthof r0;

        if $i0 != 0 goto label1;

        f2 = 0.0F;

        goto label2;

     label1:
        $i1 = lengthof r0;

        $f1 = (float) $i1;

        $i2 = lengthof r0;

        $i3 = $i2 - 1;

        $i5 = r0[$i3];

        $i4 = r0[0];

        $i6 = $i5 - $i4;

        $i7 = $i6 + 1;

        $f0 = (float) $i7;

        f2 = $f1 / $f0;

     label2:
        $b8 = f2 cmpl 0.5F;

        $i9 = (int) $b8;

        if $i9 < 0 goto label3;

        $z0 = 1;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        virtualinvoke r1.<com.mycila.inject.internal.cglib.core.CodeEmitter: void process_switch(int[],com.mycila.inject.internal.cglib.core.ProcessSwitchCallback,boolean)>(r0, r2, $z0);

        return;
    }

    public void process_switch(int[], com.mycila.inject.internal.cglib.core.ProcessSwitchCallback, boolean)
    {
        int[] r0;
        com.mycila.inject.internal.asm.MethodVisitor $r5, $r8;
        boolean $z0, z1;
        com.mycila.inject.internal.cglib.core.CodeGenerationException $r13;
        java.lang.Exception $r12;
        java.lang.Error $r14;
        com.mycila.inject.internal.cglib.core.CodeEmitter r1;
        com.mycila.inject.internal.asm.Label[] r16, r17;
        int $i0, i1, $i2, i3, $i4, i5, $i6, $i7, $i8, $i9, i10, i11, i12, i13, i14;
        java.lang.RuntimeException $r15;
        java.lang.IllegalArgumentException $r11;
        com.mycila.inject.internal.cglib.core.ProcessSwitchCallback r4;
        com.mycila.inject.internal.asm.Label $r2, $r3, $r6, $r7, r9, $r10;

        r1 := @this: com.mycila.inject.internal.cglib.core.CodeEmitter;

        r0 := @parameter0: int[];

        r4 := @parameter1: com.mycila.inject.internal.cglib.core.ProcessSwitchCallback;

        z1 := @parameter2: boolean;

        $z0 = staticinvoke <com.mycila.inject.internal.cglib.core.CodeEmitter: boolean isSorted(int[])>(r0);

        if $z0 != 0 goto label01;

        $r11 = new java.lang.IllegalArgumentException;

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("keys to switch must be sorted ascending");

        throw $r11;

     label01:
        $r2 = virtualinvoke r1.<com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.asm.Label make_label()>();

        $r3 = virtualinvoke r1.<com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.asm.Label make_label()>();

     label02:
        $i0 = lengthof r0;

        if $i0 <= 0 goto label12;

        i10 = lengthof r0;

        i1 = r0[0];

        $i2 = i10 - 1;

        i3 = r0[$i2];

        $i4 = i3 - i1;

        i5 = $i4 + 1;

        if z1 == 0 goto label08;

        r16 = newarray (com.mycila.inject.internal.asm.Label)[i5];

        staticinvoke <java.util.Arrays: void fill(java.lang.Object[],java.lang.Object)>(r16, $r2);

        i11 = 0;

     label03:
        if i11 >= i10 goto label04;

        $i8 = r0[i11];

        $i9 = $i8 - i1;

        $r10 = virtualinvoke r1.<com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.asm.Label make_label()>();

        r16[$i9] = $r10;

        i11 = i11 + 1;

        goto label03;

     label04:
        $r8 = r1.<com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        interfaceinvoke $r8.<com.mycila.inject.internal.asm.MethodVisitor: void visitTableSwitchInsn(int,int,com.mycila.inject.internal.asm.Label,com.mycila.inject.internal.asm.Label[])>(i1, i3, $r2, r16);

        i12 = 0;

     label05:
        if i12 >= i5 goto label07;

        r9 = r16[i12];

        if r9 == $r2 goto label06;

        virtualinvoke r1.<com.mycila.inject.internal.cglib.core.CodeEmitter: void mark(com.mycila.inject.internal.asm.Label)>(r9);

        $i7 = i12 + i1;

        interfaceinvoke r4.<com.mycila.inject.internal.cglib.core.ProcessSwitchCallback: void processCase(int,com.mycila.inject.internal.asm.Label)>($i7, $r3);

     label06:
        i12 = i12 + 1;

        goto label05;

     label07:
        goto label12;

     label08:
        r17 = newarray (com.mycila.inject.internal.asm.Label)[i10];

        i13 = 0;

     label09:
        if i13 >= i10 goto label10;

        $r7 = virtualinvoke r1.<com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.asm.Label make_label()>();

        r17[i13] = $r7;

        i13 = i13 + 1;

        goto label09;

     label10:
        $r5 = r1.<com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        interfaceinvoke $r5.<com.mycila.inject.internal.asm.MethodVisitor: void visitLookupSwitchInsn(com.mycila.inject.internal.asm.Label,int[],com.mycila.inject.internal.asm.Label[])>($r2, r0, r17);

        i14 = 0;

     label11:
        if i14 >= i10 goto label12;

        $r6 = r17[i14];

        virtualinvoke r1.<com.mycila.inject.internal.cglib.core.CodeEmitter: void mark(com.mycila.inject.internal.asm.Label)>($r6);

        $i6 = r0[i14];

        interfaceinvoke r4.<com.mycila.inject.internal.cglib.core.ProcessSwitchCallback: void processCase(int,com.mycila.inject.internal.asm.Label)>($i6, $r3);

        i14 = i14 + 1;

        goto label11;

     label12:
        virtualinvoke r1.<com.mycila.inject.internal.cglib.core.CodeEmitter: void mark(com.mycila.inject.internal.asm.Label)>($r2);

        interfaceinvoke r4.<com.mycila.inject.internal.cglib.core.ProcessSwitchCallback: void processDefault()>();

        virtualinvoke r1.<com.mycila.inject.internal.cglib.core.CodeEmitter: void mark(com.mycila.inject.internal.asm.Label)>($r3);

     label13:
        goto label17;

     label14:
        $r15 := @caughtexception;

        throw $r15;

     label15:
        $r14 := @caughtexception;

        throw $r14;

     label16:
        $r12 := @caughtexception;

        $r13 = new com.mycila.inject.internal.cglib.core.CodeGenerationException;

        specialinvoke $r13.<com.mycila.inject.internal.cglib.core.CodeGenerationException: void <init>(java.lang.Throwable)>($r12);

        throw $r13;

     label17:
        return;

        catch java.lang.RuntimeException from label02 to label13 with label14;
        catch java.lang.Error from label02 to label13 with label15;
        catch java.lang.Exception from label02 to label13 with label16;
    }

    private static boolean isSorted(int[])
    {
        int[] r0;
        int $i0, $i1, $i2, $i3, i4;

        r0 := @parameter0: int[];

        i4 = 1;

     label1:
        $i0 = lengthof r0;

        if i4 >= $i0 goto label3;

        $i3 = r0[i4];

        $i1 = i4 - 1;

        $i2 = r0[$i1];

        if $i3 >= $i2 goto label2;

        return 0;

     label2:
        i4 = i4 + 1;

        goto label1;

     label3:
        return 1;
    }

    public void mark(com.mycila.inject.internal.asm.Label)
    {
        com.mycila.inject.internal.asm.Label r1;
        com.mycila.inject.internal.cglib.core.CodeEmitter r0;
        com.mycila.inject.internal.asm.MethodVisitor $r2;

        r0 := @this: com.mycila.inject.internal.cglib.core.CodeEmitter;

        r1 := @parameter0: com.mycila.inject.internal.asm.Label;

        $r2 = r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        interfaceinvoke $r2.<com.mycila.inject.internal.asm.MethodVisitor: void visitLabel(com.mycila.inject.internal.asm.Label)>(r1);

        return;
    }

    com.mycila.inject.internal.asm.Label mark()
    {
        com.mycila.inject.internal.asm.Label $r1;
        com.mycila.inject.internal.cglib.core.CodeEmitter r0;
        com.mycila.inject.internal.asm.MethodVisitor $r2;

        r0 := @this: com.mycila.inject.internal.cglib.core.CodeEmitter;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.asm.Label make_label()>();

        $r2 = r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        interfaceinvoke $r2.<com.mycila.inject.internal.asm.MethodVisitor: void visitLabel(com.mycila.inject.internal.asm.Label)>($r1);

        return $r1;
    }

    public void push(boolean)
    {
        com.mycila.inject.internal.cglib.core.CodeEmitter r0;
        byte $b0;
        boolean z0;

        r0 := @this: com.mycila.inject.internal.cglib.core.CodeEmitter;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        $b0 = 1;

        goto label2;

     label1:
        $b0 = 0;

     label2:
        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void push(int)>($b0);

        return;
    }

    public void not()
    {
        com.mycila.inject.internal.asm.Type $r1;
        com.mycila.inject.internal.cglib.core.CodeEmitter r0;

        r0 := @this: com.mycila.inject.internal.cglib.core.CodeEmitter;

        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void push(int)>(1);

        $r1 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type INT_TYPE>;

        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void math(int,com.mycila.inject.internal.asm.Type)>(130, $r1);

        return;
    }

    public void throw_exception(com.mycila.inject.internal.asm.Type, java.lang.String)
    {
        com.mycila.inject.internal.cglib.core.Signature $r3;
        com.mycila.inject.internal.asm.Type r1;
        com.mycila.inject.internal.cglib.core.CodeEmitter r0;
        java.lang.String r2;

        r0 := @this: com.mycila.inject.internal.cglib.core.CodeEmitter;

        r1 := @parameter0: com.mycila.inject.internal.asm.Type;

        r2 := @parameter1: java.lang.String;

        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void new_instance(com.mycila.inject.internal.asm.Type)>(r1);

        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void dup()>();

        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void push(java.lang.String)>(r2);

        $r3 = <com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.cglib.core.Signature CSTRUCT_STRING>;

        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void invoke_constructor(com.mycila.inject.internal.asm.Type,com.mycila.inject.internal.cglib.core.Signature)>(r1, $r3);

        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void athrow()>();

        return;
    }

    public void box(com.mycila.inject.internal.asm.Type)
    {
        com.mycila.inject.internal.cglib.core.Signature $r4;
        com.mycila.inject.internal.asm.Type r0, $r1, $r2, $r6;
        com.mycila.inject.internal.cglib.core.CodeEmitter r3;
        int $i0;
        com.mycila.inject.internal.asm.Type[] $r5;
        boolean $z0;

        r3 := @this: com.mycila.inject.internal.cglib.core.CodeEmitter;

        r0 := @parameter0: com.mycila.inject.internal.asm.Type;

        $z0 = staticinvoke <com.mycila.inject.internal.cglib.core.TypeUtils: boolean isPrimitive(com.mycila.inject.internal.asm.Type)>(r0);

        if $z0 == 0 goto label4;

        $r1 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type VOID_TYPE>;

        if r0 != $r1 goto label1;

        virtualinvoke r3.<com.mycila.inject.internal.cglib.core.CodeEmitter: void aconst_null()>();

        goto label4;

     label1:
        $r2 = staticinvoke <com.mycila.inject.internal.cglib.core.TypeUtils: com.mycila.inject.internal.asm.Type getBoxedType(com.mycila.inject.internal.asm.Type)>(r0);

        virtualinvoke r3.<com.mycila.inject.internal.cglib.core.CodeEmitter: void new_instance(com.mycila.inject.internal.asm.Type)>($r2);

        $i0 = virtualinvoke r0.<com.mycila.inject.internal.asm.Type: int getSize()>();

        if $i0 != 2 goto label2;

        virtualinvoke r3.<com.mycila.inject.internal.cglib.core.CodeEmitter: void dup_x2()>();

        virtualinvoke r3.<com.mycila.inject.internal.cglib.core.CodeEmitter: void dup_x2()>();

        virtualinvoke r3.<com.mycila.inject.internal.cglib.core.CodeEmitter: void pop()>();

        goto label3;

     label2:
        virtualinvoke r3.<com.mycila.inject.internal.cglib.core.CodeEmitter: void dup_x1()>();

        virtualinvoke r3.<com.mycila.inject.internal.cglib.core.CodeEmitter: void swap()>();

     label3:
        $r4 = new com.mycila.inject.internal.cglib.core.Signature;

        $r6 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type VOID_TYPE>;

        $r5 = newarray (com.mycila.inject.internal.asm.Type)[1];

        $r5[0] = r0;

        specialinvoke $r4.<com.mycila.inject.internal.cglib.core.Signature: void <init>(java.lang.String,com.mycila.inject.internal.asm.Type,com.mycila.inject.internal.asm.Type[])>("<init>", $r6, $r5);

        virtualinvoke r3.<com.mycila.inject.internal.cglib.core.CodeEmitter: void invoke_constructor(com.mycila.inject.internal.asm.Type,com.mycila.inject.internal.cglib.core.Signature)>($r2, $r4);

     label4:
        return;
    }

    public void unbox(com.mycila.inject.internal.asm.Type)
    {
        com.mycila.inject.internal.cglib.core.Signature r3;
        int $i0;
        com.mycila.inject.internal.asm.Type r0, r2;
        com.mycila.inject.internal.cglib.core.CodeEmitter r1;

        r1 := @this: com.mycila.inject.internal.cglib.core.CodeEmitter;

        r0 := @parameter0: com.mycila.inject.internal.asm.Type;

        r2 = <com.mycila.inject.internal.cglib.core.Constants: com.mycila.inject.internal.asm.Type TYPE_NUMBER>;

        r3 = null;

        $i0 = virtualinvoke r0.<com.mycila.inject.internal.asm.Type: int getSort()>();

        tableswitch($i0)
        {
            case 0: goto label01;
            case 1: goto label03;
            case 2: goto label02;
            case 3: goto label07;
            case 4: goto label07;
            case 5: goto label07;
            case 6: goto label05;
            case 7: goto label06;
            case 8: goto label04;
            default: goto label08;
        };

     label01:
        return;

     label02:
        r2 = <com.mycila.inject.internal.cglib.core.Constants: com.mycila.inject.internal.asm.Type TYPE_CHARACTER>;

        r3 = <com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.cglib.core.Signature CHAR_VALUE>;

        goto label08;

     label03:
        r2 = <com.mycila.inject.internal.cglib.core.Constants: com.mycila.inject.internal.asm.Type TYPE_BOOLEAN>;

        r3 = <com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.cglib.core.Signature BOOLEAN_VALUE>;

        goto label08;

     label04:
        r3 = <com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.cglib.core.Signature DOUBLE_VALUE>;

        goto label08;

     label05:
        r3 = <com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.cglib.core.Signature FLOAT_VALUE>;

        goto label08;

     label06:
        r3 = <com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.cglib.core.Signature LONG_VALUE>;

        goto label08;

     label07:
        r3 = <com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.cglib.core.Signature INT_VALUE>;

     label08:
        if r3 != null goto label09;

        virtualinvoke r1.<com.mycila.inject.internal.cglib.core.CodeEmitter: void checkcast(com.mycila.inject.internal.asm.Type)>(r0);

        goto label10;

     label09:
        virtualinvoke r1.<com.mycila.inject.internal.cglib.core.CodeEmitter: void checkcast(com.mycila.inject.internal.asm.Type)>(r2);

        virtualinvoke r1.<com.mycila.inject.internal.cglib.core.CodeEmitter: void invoke_virtual(com.mycila.inject.internal.asm.Type,com.mycila.inject.internal.cglib.core.Signature)>(r2, r3);

     label10:
        return;
    }

    public void create_arg_array()
    {
        com.mycila.inject.internal.asm.Type $r7;
        com.mycila.inject.internal.cglib.core.CodeEmitter r0;
        com.mycila.inject.internal.cglib.core.CodeEmitter$State $r1, $r3, $r5;
        int $i0, $i1, i2;
        com.mycila.inject.internal.asm.Type[] $r2, $r4, $r6;

        r0 := @this: com.mycila.inject.internal.cglib.core.CodeEmitter;

        $r1 = r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.cglib.core.CodeEmitter$State state>;

        $r2 = $r1.<com.mycila.inject.internal.cglib.core.CodeEmitter$State: com.mycila.inject.internal.asm.Type[] argumentTypes>;

        $i0 = lengthof $r2;

        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void push(int)>($i0);

        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void 'newarray'()>();

        i2 = 0;

     label1:
        $r3 = r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.cglib.core.CodeEmitter$State state>;

        $r4 = $r3.<com.mycila.inject.internal.cglib.core.CodeEmitter$State: com.mycila.inject.internal.asm.Type[] argumentTypes>;

        $i1 = lengthof $r4;

        if i2 >= $i1 goto label2;

        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void dup()>();

        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void push(int)>(i2);

        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void load_arg(int)>(i2);

        $r5 = r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.cglib.core.CodeEmitter$State state>;

        $r6 = $r5.<com.mycila.inject.internal.cglib.core.CodeEmitter$State: com.mycila.inject.internal.asm.Type[] argumentTypes>;

        $r7 = $r6[i2];

        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void box(com.mycila.inject.internal.asm.Type)>($r7);

        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void aastore()>();

        i2 = i2 + 1;

        goto label1;

     label2:
        return;
    }

    public void zero_or_null(com.mycila.inject.internal.asm.Type)
    {
        int $i0;
        com.mycila.inject.internal.asm.Type r0;
        com.mycila.inject.internal.cglib.core.CodeEmitter r1;
        boolean $z0;

        r1 := @this: com.mycila.inject.internal.cglib.core.CodeEmitter;

        r0 := @parameter0: com.mycila.inject.internal.asm.Type;

        $z0 = staticinvoke <com.mycila.inject.internal.cglib.core.TypeUtils: boolean isPrimitive(com.mycila.inject.internal.asm.Type)>(r0);

        if $z0 == 0 goto label6;

        $i0 = virtualinvoke r0.<com.mycila.inject.internal.asm.Type: int getSort()>();

        tableswitch($i0)
        {
            case 0: goto label4;
            case 1: goto label5;
            case 2: goto label5;
            case 3: goto label5;
            case 4: goto label5;
            case 5: goto label5;
            case 6: goto label3;
            case 7: goto label2;
            case 8: goto label1;
            default: goto label5;
        };

     label1:
        virtualinvoke r1.<com.mycila.inject.internal.cglib.core.CodeEmitter: void push(double)>(0.0);

        goto label7;

     label2:
        virtualinvoke r1.<com.mycila.inject.internal.cglib.core.CodeEmitter: void push(long)>(0L);

        goto label7;

     label3:
        virtualinvoke r1.<com.mycila.inject.internal.cglib.core.CodeEmitter: void push(float)>(0.0F);

        goto label7;

     label4:
        virtualinvoke r1.<com.mycila.inject.internal.cglib.core.CodeEmitter: void aconst_null()>();

     label5:
        virtualinvoke r1.<com.mycila.inject.internal.cglib.core.CodeEmitter: void push(int)>(0);

        goto label7;

     label6:
        virtualinvoke r1.<com.mycila.inject.internal.cglib.core.CodeEmitter: void aconst_null()>();

     label7:
        return;
    }

    public void unbox_or_zero(com.mycila.inject.internal.asm.Type)
    {
        com.mycila.inject.internal.asm.Label $r3, $r4;
        com.mycila.inject.internal.asm.Type r0, $r2;
        com.mycila.inject.internal.cglib.core.CodeEmitter r1;
        boolean $z0;

        r1 := @this: com.mycila.inject.internal.cglib.core.CodeEmitter;

        r0 := @parameter0: com.mycila.inject.internal.asm.Type;

        $z0 = staticinvoke <com.mycila.inject.internal.cglib.core.TypeUtils: boolean isPrimitive(com.mycila.inject.internal.asm.Type)>(r0);

        if $z0 == 0 goto label1;

        $r2 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type VOID_TYPE>;

        if r0 == $r2 goto label2;

        $r3 = virtualinvoke r1.<com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.asm.Label make_label()>();

        $r4 = virtualinvoke r1.<com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.asm.Label make_label()>();

        virtualinvoke r1.<com.mycila.inject.internal.cglib.core.CodeEmitter: void dup()>();

        virtualinvoke r1.<com.mycila.inject.internal.cglib.core.CodeEmitter: void ifnonnull(com.mycila.inject.internal.asm.Label)>($r3);

        virtualinvoke r1.<com.mycila.inject.internal.cglib.core.CodeEmitter: void pop()>();

        virtualinvoke r1.<com.mycila.inject.internal.cglib.core.CodeEmitter: void zero_or_null(com.mycila.inject.internal.asm.Type)>(r0);

        virtualinvoke r1.<com.mycila.inject.internal.cglib.core.CodeEmitter: void goTo(com.mycila.inject.internal.asm.Label)>($r4);

        virtualinvoke r1.<com.mycila.inject.internal.cglib.core.CodeEmitter: void mark(com.mycila.inject.internal.asm.Label)>($r3);

        virtualinvoke r1.<com.mycila.inject.internal.cglib.core.CodeEmitter: void unbox(com.mycila.inject.internal.asm.Type)>(r0);

        virtualinvoke r1.<com.mycila.inject.internal.cglib.core.CodeEmitter: void mark(com.mycila.inject.internal.asm.Label)>($r4);

        goto label2;

     label1:
        virtualinvoke r1.<com.mycila.inject.internal.cglib.core.CodeEmitter: void checkcast(com.mycila.inject.internal.asm.Type)>(r0);

     label2:
        return;
    }

    public void visitMaxs(int, int)
    {
        com.mycila.inject.internal.asm.MethodVisitor $r2;
        com.mycila.inject.internal.cglib.core.CodeEmitter$State $r1;
        int $i0, i1, i2;
        com.mycila.inject.internal.cglib.core.CodeEmitter r0;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.cglib.core.CodeEmitter;

        i1 := @parameter0: int;

        i2 := @parameter1: int;

        $r1 = r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.cglib.core.CodeEmitter$State state>;

        $i0 = $r1.<com.mycila.inject.internal.cglib.core.CodeEmitter$State: int access>;

        $z0 = staticinvoke <com.mycila.inject.internal.cglib.core.TypeUtils: boolean isAbstract(int)>($i0);

        if $z0 != 0 goto label1;

        $r2 = r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        interfaceinvoke $r2.<com.mycila.inject.internal.asm.MethodVisitor: void visitMaxs(int,int)>(0, 0);

     label1:
        return;
    }

    public void invoke(com.mycila.inject.internal.cglib.core.MethodInfo, com.mycila.inject.internal.asm.Type)
    {
        com.mycila.inject.internal.cglib.core.Signature $r3;
        com.mycila.inject.internal.asm.Type $r2, r6;
        com.mycila.inject.internal.cglib.core.CodeEmitter r5;
        com.mycila.inject.internal.cglib.core.MethodInfo r0;
        int $i0, $i1;
        java.lang.String $r4;
        com.mycila.inject.internal.cglib.core.ClassInfo $r1;
        boolean $z0, $z1, $z2;

        r5 := @this: com.mycila.inject.internal.cglib.core.CodeEmitter;

        r0 := @parameter0: com.mycila.inject.internal.cglib.core.MethodInfo;

        r6 := @parameter1: com.mycila.inject.internal.asm.Type;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.cglib.core.MethodInfo: com.mycila.inject.internal.cglib.core.ClassInfo getClassInfo()>();

        $r2 = virtualinvoke $r1.<com.mycila.inject.internal.cglib.core.ClassInfo: com.mycila.inject.internal.asm.Type getType()>();

        $r3 = virtualinvoke r0.<com.mycila.inject.internal.cglib.core.MethodInfo: com.mycila.inject.internal.cglib.core.Signature getSignature()>();

        $r4 = virtualinvoke $r3.<com.mycila.inject.internal.cglib.core.Signature: java.lang.String getName()>();

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("<init>");

        if $z0 == 0 goto label1;

        virtualinvoke r5.<com.mycila.inject.internal.cglib.core.CodeEmitter: void invoke_constructor(com.mycila.inject.internal.asm.Type,com.mycila.inject.internal.cglib.core.Signature)>($r2, $r3);

        goto label4;

     label1:
        $i0 = virtualinvoke $r1.<com.mycila.inject.internal.cglib.core.ClassInfo: int getModifiers()>();

        $z1 = staticinvoke <com.mycila.inject.internal.cglib.core.TypeUtils: boolean isInterface(int)>($i0);

        if $z1 == 0 goto label2;

        virtualinvoke r5.<com.mycila.inject.internal.cglib.core.CodeEmitter: void invoke_interface(com.mycila.inject.internal.asm.Type,com.mycila.inject.internal.cglib.core.Signature)>($r2, $r3);

        goto label4;

     label2:
        $i1 = virtualinvoke r0.<com.mycila.inject.internal.cglib.core.MethodInfo: int getModifiers()>();

        $z2 = staticinvoke <com.mycila.inject.internal.cglib.core.TypeUtils: boolean isStatic(int)>($i1);

        if $z2 == 0 goto label3;

        virtualinvoke r5.<com.mycila.inject.internal.cglib.core.CodeEmitter: void invoke_static(com.mycila.inject.internal.asm.Type,com.mycila.inject.internal.cglib.core.Signature)>($r2, $r3);

        goto label4;

     label3:
        virtualinvoke r5.<com.mycila.inject.internal.cglib.core.CodeEmitter: void invoke_virtual(com.mycila.inject.internal.asm.Type,com.mycila.inject.internal.cglib.core.Signature)>(r6, $r3);

     label4:
        return;
    }

    public void invoke(com.mycila.inject.internal.cglib.core.MethodInfo)
    {
        com.mycila.inject.internal.asm.Type $r3;
        com.mycila.inject.internal.cglib.core.CodeEmitter r0;
        com.mycila.inject.internal.cglib.core.ClassInfo $r2;
        com.mycila.inject.internal.cglib.core.MethodInfo r1;

        r0 := @this: com.mycila.inject.internal.cglib.core.CodeEmitter;

        r1 := @parameter0: com.mycila.inject.internal.cglib.core.MethodInfo;

        $r2 = virtualinvoke r1.<com.mycila.inject.internal.cglib.core.MethodInfo: com.mycila.inject.internal.cglib.core.ClassInfo getClassInfo()>();

        $r3 = virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.ClassInfo: com.mycila.inject.internal.asm.Type getType()>();

        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void invoke(com.mycila.inject.internal.cglib.core.MethodInfo,com.mycila.inject.internal.asm.Type)>(r1, $r3);

        return;
    }

    static void <clinit>()
    {
        com.mycila.inject.internal.cglib.core.Signature $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7;

        <com.mycila.inject.internal.cglib.core.CodeEmitter: int EQ> = 153;

        <com.mycila.inject.internal.cglib.core.CodeEmitter: int NE> = 154;

        <com.mycila.inject.internal.cglib.core.CodeEmitter: int LE> = 158;

        <com.mycila.inject.internal.cglib.core.CodeEmitter: int GE> = 156;

        <com.mycila.inject.internal.cglib.core.CodeEmitter: int LT> = 155;

        <com.mycila.inject.internal.cglib.core.CodeEmitter: int GT> = 157;

        <com.mycila.inject.internal.cglib.core.CodeEmitter: int OR> = 128;

        <com.mycila.inject.internal.cglib.core.CodeEmitter: int AND> = 126;

        <com.mycila.inject.internal.cglib.core.CodeEmitter: int REM> = 112;

        <com.mycila.inject.internal.cglib.core.CodeEmitter: int NEG> = 116;

        <com.mycila.inject.internal.cglib.core.CodeEmitter: int DIV> = 108;

        <com.mycila.inject.internal.cglib.core.CodeEmitter: int SUB> = 100;

        <com.mycila.inject.internal.cglib.core.CodeEmitter: int USHR> = 124;

        <com.mycila.inject.internal.cglib.core.CodeEmitter: int XOR> = 130;

        <com.mycila.inject.internal.cglib.core.CodeEmitter: int MUL> = 104;

        <com.mycila.inject.internal.cglib.core.CodeEmitter: int ADD> = 96;

        $r0 = staticinvoke <com.mycila.inject.internal.cglib.core.TypeUtils: com.mycila.inject.internal.cglib.core.Signature parseSignature(java.lang.String)>("boolean booleanValue()");

        <com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.cglib.core.Signature BOOLEAN_VALUE> = $r0;

        $r1 = staticinvoke <com.mycila.inject.internal.cglib.core.TypeUtils: com.mycila.inject.internal.cglib.core.Signature parseSignature(java.lang.String)>("char charValue()");

        <com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.cglib.core.Signature CHAR_VALUE> = $r1;

        $r2 = staticinvoke <com.mycila.inject.internal.cglib.core.TypeUtils: com.mycila.inject.internal.cglib.core.Signature parseSignature(java.lang.String)>("long longValue()");

        <com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.cglib.core.Signature LONG_VALUE> = $r2;

        $r3 = staticinvoke <com.mycila.inject.internal.cglib.core.TypeUtils: com.mycila.inject.internal.cglib.core.Signature parseSignature(java.lang.String)>("double doubleValue()");

        <com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.cglib.core.Signature DOUBLE_VALUE> = $r3;

        $r4 = staticinvoke <com.mycila.inject.internal.cglib.core.TypeUtils: com.mycila.inject.internal.cglib.core.Signature parseSignature(java.lang.String)>("float floatValue()");

        <com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.cglib.core.Signature FLOAT_VALUE> = $r4;

        $r5 = staticinvoke <com.mycila.inject.internal.cglib.core.TypeUtils: com.mycila.inject.internal.cglib.core.Signature parseSignature(java.lang.String)>("int intValue()");

        <com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.cglib.core.Signature INT_VALUE> = $r5;

        $r6 = staticinvoke <com.mycila.inject.internal.cglib.core.TypeUtils: com.mycila.inject.internal.cglib.core.Signature parseConstructor(java.lang.String)>("");

        <com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.cglib.core.Signature CSTRUCT_NULL> = $r6;

        $r7 = staticinvoke <com.mycila.inject.internal.cglib.core.TypeUtils: com.mycila.inject.internal.cglib.core.Signature parseConstructor(java.lang.String)>("String");

        <com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.cglib.core.Signature CSTRUCT_STRING> = $r7;

        return;
    }
}
