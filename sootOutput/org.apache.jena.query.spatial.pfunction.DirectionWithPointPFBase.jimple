public abstract class org.apache.jena.query.spatial.pfunction.DirectionWithPointPFBase extends org.apache.jena.query.spatial.pfunction.SpatialOperationPFBase
{
    private static org.slf4j.Logger log;

    public void <init>()
    {
        org.apache.jena.query.spatial.pfunction.DirectionWithPointPFBase r0;

        r0 := @this: org.apache.jena.query.spatial.pfunction.DirectionWithPointPFBase;

        specialinvoke r0.<org.apache.jena.query.spatial.pfunction.SpatialOperationPFBase: void <init>()>();

        return;
    }

    public void build(com.hp.hpl.jena.sparql.pfunction.PropFuncArg, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.sparql.pfunction.PropFuncArg, com.hp.hpl.jena.sparql.engine.ExecutionContext)
    {
        com.hp.hpl.jena.query.QueryBuildException $r6, $r11, $r12;
        com.hp.hpl.jena.graph.Node r2;
        com.hp.hpl.jena.sparql.pfunction.PropFuncArg r1, r3;
        int $i0, $i1;
        org.apache.jena.query.spatial.pfunction.DirectionWithPointPFBase r0;
        com.hp.hpl.jena.sparql.engine.ExecutionContext r4;
        java.lang.String $r10, $r16;
        boolean $z0, $z1;
        java.util.List $r5;
        java.lang.StringBuilder $r7, $r8, $r9, $r13, $r14, $r15;

        r0 := @this: org.apache.jena.query.spatial.pfunction.DirectionWithPointPFBase;

        r1 := @parameter0: com.hp.hpl.jena.sparql.pfunction.PropFuncArg;

        r2 := @parameter1: com.hp.hpl.jena.graph.Node;

        r3 := @parameter2: com.hp.hpl.jena.sparql.pfunction.PropFuncArg;

        r4 := @parameter3: com.hp.hpl.jena.sparql.engine.ExecutionContext;

        specialinvoke r0.<org.apache.jena.query.spatial.pfunction.SpatialOperationPFBase: void build(com.hp.hpl.jena.sparql.pfunction.PropFuncArg,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.pfunction.PropFuncArg,com.hp.hpl.jena.sparql.engine.ExecutionContext)>(r1, r2, r3, r4);

        $z0 = virtualinvoke r1.<com.hp.hpl.jena.sparql.pfunction.PropFuncArg: boolean isNode()>();

        if $z0 != 0 goto label1;

        $r12 = new com.hp.hpl.jena.query.QueryBuildException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Subject is not a single node: ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<com.hp.hpl.jena.query.QueryBuildException: void <init>(java.lang.String)>($r16);

        throw $r12;

     label1:
        $z1 = virtualinvoke r3.<com.hp.hpl.jena.sparql.pfunction.PropFuncArg: boolean isList()>();

        if $z1 == 0 goto label3;

        $r5 = virtualinvoke r3.<com.hp.hpl.jena.sparql.pfunction.PropFuncArg: java.util.List getArgList()>();

        $i0 = interfaceinvoke $r5.<java.util.List: int size()>();

        if $i0 >= 2 goto label2;

        $r11 = new com.hp.hpl.jena.query.QueryBuildException;

        specialinvoke $r11.<com.hp.hpl.jena.query.QueryBuildException: void <init>(java.lang.String)>("Not enough arguments in list");

        throw $r11;

     label2:
        $i1 = interfaceinvoke $r5.<java.util.List: int size()>();

        if $i1 <= 3 goto label3;

        $r6 = new com.hp.hpl.jena.query.QueryBuildException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Too many arguments in list : ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<com.hp.hpl.jena.query.QueryBuildException: void <init>(java.lang.String)>($r10);

        throw $r6;

     label3:
        return;
    }

    protected org.apache.jena.query.spatial.pfunction.SpatialMatch objectToStruct(com.hp.hpl.jena.sparql.pfunction.PropFuncArg)
    {
        com.hp.hpl.jena.graph.Node r63, r64, r65;
        java.lang.StringBuilder $r16, $r18, $r25, $r26, $r30, $r31, $r35, $r36, $r40, $r41, $r45, $r46, $r50, $r51, $r55, $r56, $r60, $r61, $r66, $r68, $r69, $r70, $r71, $r72, $r73, $r74, $r75;
        java.lang.Double $r6, $r10;
        com.hp.hpl.jena.sparql.pfunction.PropFuncArg r0;
        java.lang.String $r5, $r9, $r17, $r19, $r27, $r32, $r37, $r42, $r47, $r52, $r57, $r62;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        java.util.List $r1;
        com.hp.hpl.jena.graph.impl.LiteralLabel $r4, $r8, $r21;
        int $i0, $i1, $i2, $i3, $i4, i5, $i6, $i8, $i10;
        org.apache.jena.query.spatial.pfunction.DirectionWithPointPFBase r11;
        org.apache.jena.query.spatial.SpatialIndexException $r67;
        double $d0, $d1;
        org.slf4j.Logger $r13, $r15, $r24, $r29, $r34, $r39, $r44, $r49, $r54, $r59;
        com.hp.hpl.jena.datatypes.xsd.XSDDatatype $r22;
        java.lang.Object $r3, $r7, $r20;
        org.apache.jena.query.spatial.pfunction.SpatialMatch $r12;

        r11 := @this: org.apache.jena.query.spatial.pfunction.DirectionWithPointPFBase;

        r0 := @parameter0: com.hp.hpl.jena.sparql.pfunction.PropFuncArg;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.pfunction.PropFuncArg: boolean isNode()>();

        if $z0 == 0 goto label01;

        $r59 = <org.apache.jena.query.spatial.pfunction.DirectionWithPointPFBase: org.slf4j.Logger log>;

        $r66 = new java.lang.StringBuilder;

        specialinvoke $r66.<java.lang.StringBuilder: void <init>()>();

        $r60 = virtualinvoke $r66.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Object not a List: ");

        $r61 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r62 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r59.<org.slf4j.Logger: void warn(java.lang.String)>($r62);

        return null;

     label01:
        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.pfunction.PropFuncArg: java.util.List getArgList()>();

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        if $i0 < 2 goto label02;

        $i1 = interfaceinvoke $r1.<java.util.List: int size()>();

        if $i1 <= 3 goto label03;

     label02:
        $r67 = new org.apache.jena.query.spatial.SpatialIndexException;

        specialinvoke $r67.<org.apache.jena.query.spatial.SpatialIndexException: void <init>(java.lang.String)>("Change in object list size");

        throw $r67;

     label03:
        $r3 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(0);

        r63 = (com.hp.hpl.jena.graph.Node) $r3;

        $z1 = virtualinvoke r63.<com.hp.hpl.jena.graph.Node: boolean isLiteral()>();

        if $z1 != 0 goto label04;

        $r54 = <org.apache.jena.query.spatial.pfunction.DirectionWithPointPFBase: org.slf4j.Logger log>;

        $r68 = new java.lang.StringBuilder;

        specialinvoke $r68.<java.lang.StringBuilder: void <init>()>();

        $r55 = virtualinvoke $r68.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Latitude is not a literal ");

        $r56 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r57 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r54.<org.slf4j.Logger: void warn(java.lang.String)>($r57);

        return null;

     label04:
        $r4 = virtualinvoke r63.<com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.impl.LiteralLabel getLiteral()>();

        $z2 = staticinvoke <org.apache.jena.query.spatial.SpatialValueUtil: boolean isDecimal(com.hp.hpl.jena.graph.impl.LiteralLabel)>($r4);

        if $z2 != 0 goto label05;

        $r49 = <org.apache.jena.query.spatial.pfunction.DirectionWithPointPFBase: org.slf4j.Logger log>;

        $r69 = new java.lang.StringBuilder;

        specialinvoke $r69.<java.lang.StringBuilder: void <init>()>();

        $r50 = virtualinvoke $r69.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Latitude is not a decimal ");

        $r51 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r52 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r49.<org.slf4j.Logger: void warn(java.lang.String)>($r52);

        return null;

     label05:
        $r5 = virtualinvoke r63.<com.hp.hpl.jena.graph.Node: java.lang.String getLiteralLexicalForm()>();

        $d0 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>($r5);

        $r6 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $r7 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(1);

        r64 = (com.hp.hpl.jena.graph.Node) $r7;

        $z3 = virtualinvoke r64.<com.hp.hpl.jena.graph.Node: boolean isLiteral()>();

        if $z3 != 0 goto label06;

        $r44 = <org.apache.jena.query.spatial.pfunction.DirectionWithPointPFBase: org.slf4j.Logger log>;

        $r70 = new java.lang.StringBuilder;

        specialinvoke $r70.<java.lang.StringBuilder: void <init>()>();

        $r45 = virtualinvoke $r70.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Longitude is not a literal ");

        $r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r44.<org.slf4j.Logger: void warn(java.lang.String)>($r47);

        return null;

     label06:
        $r8 = virtualinvoke r64.<com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.impl.LiteralLabel getLiteral()>();

        $z4 = staticinvoke <org.apache.jena.query.spatial.SpatialValueUtil: boolean isDecimal(com.hp.hpl.jena.graph.impl.LiteralLabel)>($r8);

        if $z4 != 0 goto label07;

        $r39 = <org.apache.jena.query.spatial.pfunction.DirectionWithPointPFBase: org.slf4j.Logger log>;

        $r71 = new java.lang.StringBuilder;

        specialinvoke $r71.<java.lang.StringBuilder: void <init>()>();

        $r40 = virtualinvoke $r71.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Longitude is not a decimal ");

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r39.<org.slf4j.Logger: void warn(java.lang.String)>($r42);

        return null;

     label07:
        $r9 = virtualinvoke r64.<com.hp.hpl.jena.graph.Node: java.lang.String getLiteralLexicalForm()>();

        $d1 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>($r9);

        $r10 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d1);

        $i8 = (int) -1;

        i5 = $i8;

        $i2 = interfaceinvoke $r1.<java.util.List: int size()>();

        if 2 >= $i2 goto label12;

        $r20 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(2);

        r65 = (com.hp.hpl.jena.graph.Node) $r20;

        $z6 = virtualinvoke r65.<com.hp.hpl.jena.graph.Node: boolean isLiteral()>();

        if $z6 != 0 goto label08;

        $r34 = <org.apache.jena.query.spatial.pfunction.DirectionWithPointPFBase: org.slf4j.Logger log>;

        $r72 = new java.lang.StringBuilder;

        specialinvoke $r72.<java.lang.StringBuilder: void <init>()>();

        $r35 = virtualinvoke $r72.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Limit is not a literal ");

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r34.<org.slf4j.Logger: void warn(java.lang.String)>($r37);

        return null;

     label08:
        $r21 = virtualinvoke r65.<com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.impl.LiteralLabel getLiteral()>();

        $r22 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDinteger>;

        $z7 = virtualinvoke $r22.<com.hp.hpl.jena.datatypes.xsd.XSDDatatype: boolean isValidLiteral(com.hp.hpl.jena.graph.impl.LiteralLabel)>($r21);

        if $z7 != 0 goto label09;

        $r29 = <org.apache.jena.query.spatial.pfunction.DirectionWithPointPFBase: org.slf4j.Logger log>;

        $r73 = new java.lang.StringBuilder;

        specialinvoke $r73.<java.lang.StringBuilder: void <init>()>();

        $r30 = virtualinvoke $r73.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Limit is not an integer ");

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r29.<org.slf4j.Logger: void warn(java.lang.String)>($r32);

        return null;

     label09:
        $i3 = staticinvoke <com.hp.hpl.jena.sparql.util.NodeFactoryExtra: int nodeToInt(com.hp.hpl.jena.graph.Node)>(r65);

        if $i3 >= 0 goto label10;

        $i10 = (int) -1;

        $i6 = $i10;

        goto label11;

     label10:
        $i6 = $i3;

     label11:
        i5 = $i6;

        $i4 = interfaceinvoke $r1.<java.util.List: int size()>();

        if 3 >= $i4 goto label12;

        $r24 = <org.apache.jena.query.spatial.pfunction.DirectionWithPointPFBase: org.slf4j.Logger log>;

        $r74 = new java.lang.StringBuilder;

        specialinvoke $r74.<java.lang.StringBuilder: void <init>()>();

        $r25 = virtualinvoke $r74.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Limit is not the last parameter ");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r24.<org.slf4j.Logger: void warn(java.lang.String)>($r27);

        return null;

     label12:
        $r12 = virtualinvoke r11.<org.apache.jena.query.spatial.pfunction.DirectionWithPointPFBase: org.apache.jena.query.spatial.pfunction.SpatialMatch getSpatialMatch(java.lang.Double,java.lang.Double,int)>($r6, $r10, i5);

        $r13 = <org.apache.jena.query.spatial.pfunction.DirectionWithPointPFBase: org.slf4j.Logger log>;

        $z5 = interfaceinvoke $r13.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $z5 == 0 goto label13;

        $r15 = <org.apache.jena.query.spatial.pfunction.DirectionWithPointPFBase: org.slf4j.Logger log>;

        $r75 = new java.lang.StringBuilder;

        specialinvoke $r75.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r75.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Trying SpatialMatch: ");

        $r17 = virtualinvoke $r12.<org.apache.jena.query.spatial.pfunction.SpatialMatch: java.lang.String toString()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r15.<org.slf4j.Logger: void debug(java.lang.String)>($r19);

     label13:
        return $r12;
    }

    protected abstract org.apache.jena.query.spatial.pfunction.SpatialMatch getSpatialMatch(java.lang.Double, java.lang.Double, int);

    protected org.apache.lucene.spatial.query.SpatialOperation getSpatialOperation()
    {
        org.apache.jena.query.spatial.pfunction.DirectionWithPointPFBase r1;
        org.apache.lucene.spatial.query.SpatialOperation $r0;

        r1 := @this: org.apache.jena.query.spatial.pfunction.DirectionWithPointPFBase;

        $r0 = <org.apache.lucene.spatial.query.SpatialOperation: org.apache.lucene.spatial.query.SpatialOperation IsWithin>;

        return $r0;
    }

    static void <clinit>()
    {
        org.slf4j.Logger $r0;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lorg/apache/jena/query/spatial/pfunction/DirectionWithPointPFBase;");

        <org.apache.jena.query.spatial.pfunction.DirectionWithPointPFBase: org.slf4j.Logger log> = $r0;

        return;
    }
}
