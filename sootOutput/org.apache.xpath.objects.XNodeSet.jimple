public class org.apache.xpath.objects.XNodeSet extends org.apache.xpath.axes.NodeSequence
{
    static org.apache.xpath.objects.LessThanComparator S_LT;
    static org.apache.xpath.objects.LessThanOrEqualComparator S_LTE;
    static org.apache.xpath.objects.GreaterThanComparator S_GT;
    static org.apache.xpath.objects.GreaterThanOrEqualComparator S_GTE;
    static org.apache.xpath.objects.EqualComparator S_EQ;
    static org.apache.xpath.objects.NotEqualComparator S_NEQ;

    protected void <init>()
    {
        org.apache.xpath.objects.XNodeSet r0;

        r0 := @this: org.apache.xpath.objects.XNodeSet;

        specialinvoke r0.<org.apache.xpath.axes.NodeSequence: void <init>()>();

        return;
    }

    public void <init>(org.apache.xml.dtm.DTMIterator)
    {
        org.apache.xpath.objects.XNodeSet r0, $r2, $r4, $r6, $r7, $r8, $r10;
        org.apache.xml.dtm.DTMIterator r1, $r3;
        org.apache.xml.dtm.DTMManager $r5;
        int $i0;
        java.lang.Object $r9;
        boolean $z0, $z1;

        r0 := @this: org.apache.xpath.objects.XNodeSet;

        r1 := @parameter0: org.apache.xml.dtm.DTMIterator;

        specialinvoke r0.<org.apache.xpath.axes.NodeSequence: void <init>()>();

        $z0 = r1 instanceof org.apache.xpath.objects.XNodeSet;

        if $z0 == 0 goto label2;

        $r2 = (org.apache.xpath.objects.XNodeSet) r1;

        $r3 = $r2.<org.apache.xpath.axes.NodeSequence: org.apache.xml.dtm.DTMIterator m_iter>;

        virtualinvoke r0.<org.apache.xpath.axes.NodeSequence: void setIter(org.apache.xml.dtm.DTMIterator)>($r3);

        $r4 = (org.apache.xpath.objects.XNodeSet) r1;

        $r5 = $r4.<org.apache.xpath.axes.NodeSequence: org.apache.xml.dtm.DTMManager m_dtmMgr>;

        r0.<org.apache.xpath.axes.NodeSequence: org.apache.xml.dtm.DTMManager m_dtmMgr> = $r5;

        $r6 = (org.apache.xpath.objects.XNodeSet) r1;

        $i0 = $r6.<org.apache.xpath.axes.NodeSequence: int m_last>;

        r0.<org.apache.xpath.axes.NodeSequence: int m_last> = $i0;

        $r7 = (org.apache.xpath.objects.XNodeSet) r1;

        $z1 = virtualinvoke $r7.<org.apache.xpath.axes.NodeSequence: boolean hasCache()>();

        if $z1 != 0 goto label1;

        $r10 = (org.apache.xpath.objects.XNodeSet) r1;

        virtualinvoke $r10.<org.apache.xpath.axes.NodeSequence: void setShouldCacheNodes(boolean)>(1);

     label1:
        $r8 = (org.apache.xpath.objects.XNodeSet) r1;

        $r9 = $r8.<org.apache.xpath.objects.XObject: java.lang.Object m_obj>;

        r0.<org.apache.xpath.objects.XObject: java.lang.Object m_obj> = $r9;

        goto label3;

     label2:
        virtualinvoke r0.<org.apache.xpath.axes.NodeSequence: void setIter(org.apache.xml.dtm.DTMIterator)>(r1);

     label3:
        return;
    }

    public void <init>(org.apache.xpath.objects.XNodeSet)
    {
        org.apache.xpath.objects.XNodeSet r0, r1;
        org.apache.xml.dtm.DTMManager $r3;
        int $i0;
        org.apache.xml.dtm.DTMIterator $r2;
        java.lang.Object $r4;
        boolean $z0;

        r0 := @this: org.apache.xpath.objects.XNodeSet;

        r1 := @parameter0: org.apache.xpath.objects.XNodeSet;

        specialinvoke r0.<org.apache.xpath.axes.NodeSequence: void <init>()>();

        $r2 = r1.<org.apache.xpath.axes.NodeSequence: org.apache.xml.dtm.DTMIterator m_iter>;

        virtualinvoke r0.<org.apache.xpath.axes.NodeSequence: void setIter(org.apache.xml.dtm.DTMIterator)>($r2);

        $r3 = r1.<org.apache.xpath.axes.NodeSequence: org.apache.xml.dtm.DTMManager m_dtmMgr>;

        r0.<org.apache.xpath.axes.NodeSequence: org.apache.xml.dtm.DTMManager m_dtmMgr> = $r3;

        $i0 = r1.<org.apache.xpath.axes.NodeSequence: int m_last>;

        r0.<org.apache.xpath.axes.NodeSequence: int m_last> = $i0;

        $z0 = virtualinvoke r1.<org.apache.xpath.axes.NodeSequence: boolean hasCache()>();

        if $z0 != 0 goto label1;

        virtualinvoke r1.<org.apache.xpath.axes.NodeSequence: void setShouldCacheNodes(boolean)>(1);

     label1:
        $r4 = r1.<org.apache.xpath.objects.XObject: java.lang.Object m_obj>;

        r0.<org.apache.xpath.objects.XObject: java.lang.Object m_obj> = $r4;

        return;
    }

    public void <init>(org.apache.xml.dtm.DTMManager)
    {
        int $i1;
        org.apache.xpath.objects.XNodeSet r0;
        org.apache.xml.dtm.DTMManager r1;

        r0 := @this: org.apache.xpath.objects.XNodeSet;

        r1 := @parameter0: org.apache.xml.dtm.DTMManager;

        $i1 = (int) -1;

        specialinvoke r0.<org.apache.xpath.objects.XNodeSet: void <init>(int,org.apache.xml.dtm.DTMManager)>($i1, r1);

        return;
    }

    public void <init>(int, org.apache.xml.dtm.DTMManager)
    {
        org.apache.xpath.objects.XNodeSet r0;
        org.apache.xpath.NodeSetDTM $r4, $r5;
        org.apache.xml.dtm.DTMManager r2;
        int i0, $i2;
        java.lang.Object $r3;

        r0 := @this: org.apache.xpath.objects.XNodeSet;

        i0 := @parameter0: int;

        r2 := @parameter1: org.apache.xml.dtm.DTMManager;

        $r5 = new org.apache.xpath.NodeSetDTM;

        specialinvoke $r5.<org.apache.xpath.NodeSetDTM: void <init>(org.apache.xml.dtm.DTMManager)>(r2);

        specialinvoke r0.<org.apache.xpath.axes.NodeSequence: void <init>(java.lang.Object)>($r5);

        r0.<org.apache.xpath.axes.NodeSequence: org.apache.xml.dtm.DTMManager m_dtmMgr> = r2;

        $i2 = (int) -1;

        if $i2 == i0 goto label1;

        $r3 = r0.<org.apache.xpath.objects.XObject: java.lang.Object m_obj>;

        $r4 = (org.apache.xpath.NodeSetDTM) $r3;

        virtualinvoke $r4.<org.apache.xpath.NodeSetDTM: void addNode(int)>(i0);

        r0.<org.apache.xpath.axes.NodeSequence: int m_last> = 1;

        goto label2;

     label1:
        r0.<org.apache.xpath.axes.NodeSequence: int m_last> = 0;

     label2:
        return;
    }

    public int getType()
    {
        org.apache.xpath.objects.XNodeSet r0;

        r0 := @this: org.apache.xpath.objects.XNodeSet;

        return 4;
    }

    public java.lang.String getTypeString()
    {
        org.apache.xpath.objects.XNodeSet r0;

        r0 := @this: org.apache.xpath.objects.XNodeSet;

        return "#NODESET";
    }

    public double getNumberFromNode(int)
    {
        org.apache.xpath.objects.XNodeSet r0;
        org.apache.xml.dtm.DTMManager $r1;
        int i0;
        org.apache.xml.dtm.DTM $r2;
        org.apache.xml.utils.XMLString $r3;
        double $d0;

        r0 := @this: org.apache.xpath.objects.XNodeSet;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.xpath.axes.NodeSequence: org.apache.xml.dtm.DTMManager m_dtmMgr>;

        $r2 = virtualinvoke $r1.<org.apache.xml.dtm.DTMManager: org.apache.xml.dtm.DTM getDTM(int)>(i0);

        $r3 = interfaceinvoke $r2.<org.apache.xml.dtm.DTM: org.apache.xml.utils.XMLString getStringValue(int)>(i0);

        $d0 = interfaceinvoke $r3.<org.apache.xml.utils.XMLString: double toDouble()>();

        return $d0;
    }

    public double num()
    {
        org.apache.xpath.objects.XNodeSet r0;
        int $i0, $i2;
        double $d0;

        r0 := @this: org.apache.xpath.objects.XNodeSet;

        $i0 = virtualinvoke r0.<org.apache.xpath.axes.NodeSequence: int item(int)>(0);

        $i2 = (int) -1;

        if $i0 == $i2 goto label1;

        $d0 = virtualinvoke r0.<org.apache.xpath.objects.XNodeSet: double getNumberFromNode(int)>($i0);

        goto label2;

     label1:
        $d0 = #NaN;

     label2:
        return $d0;
    }

    public double numWithSideEffects()
    {
        org.apache.xpath.objects.XNodeSet r0;
        int $i0, $i2;
        double $d0;

        r0 := @this: org.apache.xpath.objects.XNodeSet;

        $i0 = virtualinvoke r0.<org.apache.xpath.axes.NodeSequence: int nextNode()>();

        $i2 = (int) -1;

        if $i0 == $i2 goto label1;

        $d0 = virtualinvoke r0.<org.apache.xpath.objects.XNodeSet: double getNumberFromNode(int)>($i0);

        goto label2;

     label1:
        $d0 = #NaN;

     label2:
        return $d0;
    }

    public boolean bool()
    {
        org.apache.xpath.objects.XNodeSet r0;
        int $i0, $i2;
        boolean $z0;

        r0 := @this: org.apache.xpath.objects.XNodeSet;

        $i0 = virtualinvoke r0.<org.apache.xpath.axes.NodeSequence: int item(int)>(0);

        $i2 = (int) -1;

        if $i0 == $i2 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean boolWithSideEffects()
    {
        org.apache.xpath.objects.XNodeSet r0;
        int $i0, $i2;
        boolean $z0;

        r0 := @this: org.apache.xpath.objects.XNodeSet;

        $i0 = virtualinvoke r0.<org.apache.xpath.axes.NodeSequence: int nextNode()>();

        $i2 = (int) -1;

        if $i0 == $i2 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public org.apache.xml.utils.XMLString getStringFromNode(int)
    {
        org.apache.xpath.objects.XNodeSet r1;
        org.apache.xml.dtm.DTMManager $r2;
        int i0, $i2;
        org.apache.xml.dtm.DTM $r3;
        org.apache.xpath.objects.XString $r0;
        org.apache.xml.utils.XMLString $r4;

        r1 := @this: org.apache.xpath.objects.XNodeSet;

        i0 := @parameter0: int;

        $i2 = (int) -1;

        if $i2 == i0 goto label1;

        $r2 = r1.<org.apache.xpath.axes.NodeSequence: org.apache.xml.dtm.DTMManager m_dtmMgr>;

        $r3 = virtualinvoke $r2.<org.apache.xml.dtm.DTMManager: org.apache.xml.dtm.DTM getDTM(int)>(i0);

        $r4 = interfaceinvoke $r3.<org.apache.xml.dtm.DTM: org.apache.xml.utils.XMLString getStringValue(int)>(i0);

        return $r4;

     label1:
        $r0 = <org.apache.xpath.objects.XString: org.apache.xpath.objects.XString EMPTYSTRING>;

        return $r0;
    }

    public void dispatchCharactersEvents(org.xml.sax.ContentHandler) throws org.xml.sax.SAXException
    {
        org.apache.xpath.objects.XNodeSet r0;
        org.apache.xml.dtm.DTMManager $r1;
        int $i0, $i2;
        org.apache.xml.dtm.DTM $r2;
        org.xml.sax.ContentHandler r3;

        r0 := @this: org.apache.xpath.objects.XNodeSet;

        r3 := @parameter0: org.xml.sax.ContentHandler;

        $i0 = virtualinvoke r0.<org.apache.xpath.axes.NodeSequence: int item(int)>(0);

        $i2 = (int) -1;

        if $i0 == $i2 goto label1;

        $r1 = r0.<org.apache.xpath.axes.NodeSequence: org.apache.xml.dtm.DTMManager m_dtmMgr>;

        $r2 = virtualinvoke $r1.<org.apache.xml.dtm.DTMManager: org.apache.xml.dtm.DTM getDTM(int)>($i0);

        interfaceinvoke $r2.<org.apache.xml.dtm.DTM: void dispatchCharactersEvents(int,org.xml.sax.ContentHandler,boolean)>($i0, r3, 0);

     label1:
        return;
    }

    public org.apache.xml.utils.XMLString xstr()
    {
        org.apache.xpath.objects.XNodeSet r0;
        int $i0, $i2;
        org.apache.xml.utils.XMLString $r1;

        r0 := @this: org.apache.xpath.objects.XNodeSet;

        $i0 = virtualinvoke r0.<org.apache.xpath.axes.NodeSequence: int item(int)>(0);

        $i2 = (int) -1;

        if $i0 == $i2 goto label1;

        $r1 = virtualinvoke r0.<org.apache.xpath.objects.XNodeSet: org.apache.xml.utils.XMLString getStringFromNode(int)>($i0);

        goto label2;

     label1:
        $r1 = <org.apache.xpath.objects.XString: org.apache.xpath.objects.XString EMPTYSTRING>;

     label2:
        return $r1;
    }

    public void appendToFsb(org.apache.xml.utils.FastStringBuffer)
    {
        org.apache.xpath.objects.XNodeSet r0;
        org.apache.xml.utils.FastStringBuffer r3;
        org.apache.xml.utils.XMLString $r1;
        org.apache.xpath.objects.XString r2;

        r0 := @this: org.apache.xpath.objects.XNodeSet;

        r3 := @parameter0: org.apache.xml.utils.FastStringBuffer;

        $r1 = virtualinvoke r0.<org.apache.xpath.objects.XNodeSet: org.apache.xml.utils.XMLString xstr()>();

        r2 = (org.apache.xpath.objects.XString) $r1;

        virtualinvoke r2.<org.apache.xpath.objects.XObject: void appendToFsb(org.apache.xml.utils.FastStringBuffer)>(r3);

        return;
    }

    public java.lang.String str()
    {
        org.apache.xpath.objects.XNodeSet r0;
        int $i0, $i2;
        java.lang.String $r2;
        org.apache.xml.utils.XMLString $r1;

        r0 := @this: org.apache.xpath.objects.XNodeSet;

        $i0 = virtualinvoke r0.<org.apache.xpath.axes.NodeSequence: int item(int)>(0);

        $i2 = (int) -1;

        if $i0 == $i2 goto label1;

        $r1 = virtualinvoke r0.<org.apache.xpath.objects.XNodeSet: org.apache.xml.utils.XMLString getStringFromNode(int)>($i0);

        $r2 = interfaceinvoke $r1.<org.apache.xml.utils.XMLString: java.lang.String toString()>();

        goto label2;

     label1:
        $r2 = "";

     label2:
        return $r2;
    }

    public java.lang.Object object()
    {
        java.lang.Object $r1, $r2;
        org.apache.xpath.objects.XNodeSet r0;

        r0 := @this: org.apache.xpath.objects.XNodeSet;

        $r1 = r0.<org.apache.xpath.objects.XObject: java.lang.Object m_obj>;

        if null != $r1 goto label1;

        return r0;

     label1:
        $r2 = r0.<org.apache.xpath.objects.XObject: java.lang.Object m_obj>;

        return $r2;
    }

    public org.w3c.dom.traversal.NodeIterator nodeset() throws javax.xml.transform.TransformerException
    {
        org.apache.xml.dtm.DTMIterator $r2;
        org.apache.xpath.objects.XNodeSet r1;
        org.apache.xml.dtm.ref.DTMNodeIterator $r0;

        r1 := @this: org.apache.xpath.objects.XNodeSet;

        $r0 = new org.apache.xml.dtm.ref.DTMNodeIterator;

        $r2 = virtualinvoke r1.<org.apache.xpath.objects.XNodeSet: org.apache.xml.dtm.DTMIterator iter()>();

        specialinvoke $r0.<org.apache.xml.dtm.ref.DTMNodeIterator: void <init>(org.apache.xml.dtm.DTMIterator)>($r2);

        return $r0;
    }

    public org.w3c.dom.NodeList nodelist() throws javax.xml.transform.TransformerException
    {
        org.apache.xpath.objects.XNodeSet r1, r3;
        org.apache.xml.utils.NodeVector $r4;
        org.apache.xml.dtm.ref.DTMNodeList $r0;
        org.apache.xml.dtm.DTMIterator $r2;

        r1 := @this: org.apache.xpath.objects.XNodeSet;

        $r0 = new org.apache.xml.dtm.ref.DTMNodeList;

        specialinvoke $r0.<org.apache.xml.dtm.ref.DTMNodeList: void <init>(org.apache.xml.dtm.DTMIterator)>(r1);

        $r2 = virtualinvoke $r0.<org.apache.xml.dtm.ref.DTMNodeList: org.apache.xml.dtm.DTMIterator getDTMIterator()>();

        r3 = (org.apache.xpath.objects.XNodeSet) $r2;

        $r4 = virtualinvoke r3.<org.apache.xpath.axes.NodeSequence: org.apache.xml.utils.NodeVector getVector()>();

        virtualinvoke r1.<org.apache.xpath.axes.NodeSequence: void SetVector(org.apache.xml.utils.NodeVector)>($r4);

        return $r0;
    }

    public org.apache.xml.dtm.DTMIterator iterRaw()
    {
        org.apache.xpath.objects.XNodeSet r0;

        r0 := @this: org.apache.xpath.objects.XNodeSet;

        return r0;
    }

    public void release(org.apache.xml.dtm.DTMIterator)
    {
        org.apache.xml.dtm.DTMIterator r1;
        org.apache.xpath.objects.XNodeSet r0;

        r0 := @this: org.apache.xpath.objects.XNodeSet;

        r1 := @parameter0: org.apache.xml.dtm.DTMIterator;

        return;
    }

    public org.apache.xml.dtm.DTMIterator iter()
    {
        org.apache.xpath.objects.XNodeSet r0;
        org.apache.xml.dtm.DTMIterator $r1;
        java.lang.RuntimeException $r3;
        java.lang.String $r4;
        java.lang.CloneNotSupportedException $r2;
        boolean $z0;

        r0 := @this: org.apache.xpath.objects.XNodeSet;

     label1:
        $z0 = virtualinvoke r0.<org.apache.xpath.axes.NodeSequence: boolean hasCache()>();

        if $z0 == 0 goto label2;

        $r1 = virtualinvoke r0.<org.apache.xpath.axes.NodeSequence: org.apache.xml.dtm.DTMIterator cloneWithReset()>();

        return $r1;

     label2:
        return r0;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.RuntimeException;

        $r4 = virtualinvoke $r2.<java.lang.Throwable: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.String)>($r4);

        throw $r3;

        catch java.lang.CloneNotSupportedException from label1 to label3 with label3;
    }

    public org.apache.xpath.objects.XObject getFresh()
    {
        org.apache.xpath.objects.XNodeSet r0;
        org.apache.xpath.objects.XObject $r2;
        org.apache.xml.dtm.DTMIterator $r1;
        java.lang.RuntimeException $r4;
        java.lang.String $r5;
        java.lang.CloneNotSupportedException $r3;
        boolean $z0;

        r0 := @this: org.apache.xpath.objects.XNodeSet;

     label1:
        $z0 = virtualinvoke r0.<org.apache.xpath.axes.NodeSequence: boolean hasCache()>();

        if $z0 == 0 goto label2;

        $r1 = virtualinvoke r0.<org.apache.xpath.axes.NodeSequence: org.apache.xml.dtm.DTMIterator cloneWithReset()>();

        $r2 = (org.apache.xpath.objects.XObject) $r1;

        return $r2;

     label2:
        return r0;

     label3:
        $r3 := @caughtexception;

        $r4 = new java.lang.RuntimeException;

        $r5 = virtualinvoke $r3.<java.lang.Throwable: java.lang.String getMessage()>();

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.String)>($r5);

        throw $r4;

        catch java.lang.CloneNotSupportedException from label1 to label3 with label3;
    }

    public org.apache.xpath.NodeSetDTM mutableNodeset()
    {
        org.apache.xpath.objects.XNodeSet r0;
        org.apache.xpath.NodeSetDTM $r2, r5;
        java.lang.Object $r1, $r4;
        org.apache.xml.dtm.DTMIterator $r3;
        boolean $z0;

        r0 := @this: org.apache.xpath.objects.XNodeSet;

        $r1 = r0.<org.apache.xpath.objects.XObject: java.lang.Object m_obj>;

        $z0 = $r1 instanceof org.apache.xpath.NodeSetDTM;

        if $z0 == 0 goto label1;

        $r4 = r0.<org.apache.xpath.objects.XObject: java.lang.Object m_obj>;

        r5 = (org.apache.xpath.NodeSetDTM) $r4;

        goto label2;

     label1:
        $r2 = new org.apache.xpath.NodeSetDTM;

        $r3 = virtualinvoke r0.<org.apache.xpath.objects.XNodeSet: org.apache.xml.dtm.DTMIterator iter()>();

        specialinvoke $r2.<org.apache.xpath.NodeSetDTM: void <init>(org.apache.xml.dtm.DTMIterator)>($r3);

        r5 = $r2;

        r0.<org.apache.xpath.objects.XObject: java.lang.Object m_obj> = $r2;

        virtualinvoke r0.<org.apache.xpath.axes.NodeSequence: void setCurrentPos(int)>(0);

     label2:
        return r5;
    }

    public boolean compare(org.apache.xpath.objects.XObject, org.apache.xpath.objects.Comparator) throws javax.xml.transform.TransformerException
    {
        org.apache.xml.utils.XMLString $r3, $r5, $r6, $r8, $r13, $r15, $r16;
        java.util.Vector r18, $r19;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, z6;
        org.apache.xpath.objects.XNodeSet r2, $r11;
        org.apache.xml.dtm.DTMIterator $r4, $r7, $r9, $r10, $r12;
        org.apache.xpath.objects.XObject r0;
        org.apache.xpath.objects.Comparator r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, $i7, $i9, $i11, $i13, $i15, $i17;
        double $d0, $d1, $d2, $d3, $d4, $d5;
        java.lang.Object $r14;

        r2 := @this: org.apache.xpath.objects.XNodeSet;

        r0 := @parameter0: org.apache.xpath.objects.XObject;

        r1 := @parameter1: org.apache.xpath.objects.Comparator;

        z6 = 0;

        $i0 = virtualinvoke r0.<org.apache.xpath.objects.XObject: int getType()>();

        if 4 != $i0 goto label12;

        $r10 = virtualinvoke r2.<org.apache.xpath.objects.XNodeSet: org.apache.xml.dtm.DTMIterator iterRaw()>();

        $r11 = (org.apache.xpath.objects.XNodeSet) r0;

        $r12 = virtualinvoke $r11.<org.apache.xpath.objects.XNodeSet: org.apache.xml.dtm.DTMIterator iterRaw()>();

        r18 = null;

        goto label11;

     label01:
        $r13 = virtualinvoke r2.<org.apache.xpath.objects.XNodeSet: org.apache.xml.utils.XMLString getStringFromNode(int)>($i7);

        if null != r18 goto label07;

        goto label05;

     label02:
        $r16 = virtualinvoke r2.<org.apache.xpath.objects.XNodeSet: org.apache.xml.utils.XMLString getStringFromNode(int)>($i5);

        $z5 = virtualinvoke r1.<org.apache.xpath.objects.Comparator: boolean compareStrings(org.apache.xml.utils.XMLString,org.apache.xml.utils.XMLString)>($r13, $r16);

        if $z5 == 0 goto label03;

        z6 = 1;

        goto label06;

     label03:
        if null != r18 goto label04;

        $r19 = new java.util.Vector;

        specialinvoke $r19.<java.util.Vector: void <init>()>();

        r18 = $r19;

     label04:
        virtualinvoke r18.<java.util.Vector: void addElement(java.lang.Object)>($r16);

     label05:
        $i5 = interfaceinvoke $r12.<org.apache.xml.dtm.DTMIterator: int nextNode()>();

        $i9 = (int) -1;

        if $i9 != $i5 goto label02;

     label06:
        goto label11;

     label07:
        $i4 = virtualinvoke r18.<java.util.Vector: int size()>();

        i6 = 0;

        goto label10;

     label08:
        $r14 = virtualinvoke r18.<java.util.Vector: java.lang.Object elementAt(int)>(i6);

        $r15 = (org.apache.xml.utils.XMLString) $r14;

        $z4 = virtualinvoke r1.<org.apache.xpath.objects.Comparator: boolean compareStrings(org.apache.xml.utils.XMLString,org.apache.xml.utils.XMLString)>($r13, $r15);

        if $z4 == 0 goto label09;

        z6 = 1;

        goto label11;

     label09:
        i6 = i6 + 1;

     label10:
        if i6 < $i4 goto label08;

     label11:
        $i7 = interfaceinvoke $r10.<org.apache.xml.dtm.DTMIterator: int nextNode()>();

        $i11 = (int) -1;

        if $i11 != $i7 goto label01;

        interfaceinvoke $r10.<org.apache.xml.dtm.DTMIterator: void reset()>();

        interfaceinvoke $r12.<org.apache.xml.dtm.DTMIterator: void reset()>();

        goto label28;

     label12:
        if 1 != $i0 goto label15;

        $z3 = virtualinvoke r2.<org.apache.xpath.objects.XNodeSet: boolean bool()>();

        if $z3 == 0 goto label13;

        $d5 = 1.0;

        goto label14;

     label13:
        $d5 = 0.0;

     label14:
        $d4 = virtualinvoke r0.<org.apache.xpath.objects.XObject: double num()>();

        z6 = virtualinvoke r1.<org.apache.xpath.objects.Comparator: boolean compareNumbers(double,double)>($d5, $d4);

        goto label28;

     label15:
        if 2 != $i0 goto label19;

        $r9 = virtualinvoke r2.<org.apache.xpath.objects.XNodeSet: org.apache.xml.dtm.DTMIterator iterRaw()>();

        $d2 = virtualinvoke r0.<org.apache.xpath.objects.XObject: double num()>();

        goto label17;

     label16:
        $d3 = virtualinvoke r2.<org.apache.xpath.objects.XNodeSet: double getNumberFromNode(int)>($i3);

        $z2 = virtualinvoke r1.<org.apache.xpath.objects.Comparator: boolean compareNumbers(double,double)>($d3, $d2);

        if $z2 == 0 goto label17;

        z6 = 1;

        goto label18;

     label17:
        $i3 = interfaceinvoke $r9.<org.apache.xml.dtm.DTMIterator: int nextNode()>();

        $i13 = (int) -1;

        if $i13 != $i3 goto label16;

     label18:
        interfaceinvoke $r9.<org.apache.xml.dtm.DTMIterator: void reset()>();

        goto label28;

     label19:
        if 5 != $i0 goto label23;

        $r6 = virtualinvoke r0.<org.apache.xpath.objects.XObject: org.apache.xml.utils.XMLString xstr()>();

        $r7 = virtualinvoke r2.<org.apache.xpath.objects.XNodeSet: org.apache.xml.dtm.DTMIterator iterRaw()>();

        goto label21;

     label20:
        $r8 = virtualinvoke r2.<org.apache.xpath.objects.XNodeSet: org.apache.xml.utils.XMLString getStringFromNode(int)>($i2);

        $z1 = virtualinvoke r1.<org.apache.xpath.objects.Comparator: boolean compareStrings(org.apache.xml.utils.XMLString,org.apache.xml.utils.XMLString)>($r8, $r6);

        if $z1 == 0 goto label21;

        z6 = 1;

        goto label22;

     label21:
        $i2 = interfaceinvoke $r7.<org.apache.xml.dtm.DTMIterator: int nextNode()>();

        $i15 = (int) -1;

        if $i15 != $i2 goto label20;

     label22:
        interfaceinvoke $r7.<org.apache.xml.dtm.DTMIterator: void reset()>();

        goto label28;

     label23:
        if 3 != $i0 goto label27;

        $r3 = virtualinvoke r0.<org.apache.xpath.objects.XObject: org.apache.xml.utils.XMLString xstr()>();

        $r4 = virtualinvoke r2.<org.apache.xpath.objects.XNodeSet: org.apache.xml.dtm.DTMIterator iterRaw()>();

        goto label25;

     label24:
        $r5 = virtualinvoke r2.<org.apache.xpath.objects.XNodeSet: org.apache.xml.utils.XMLString getStringFromNode(int)>($i1);

        $z0 = virtualinvoke r1.<org.apache.xpath.objects.Comparator: boolean compareStrings(org.apache.xml.utils.XMLString,org.apache.xml.utils.XMLString)>($r5, $r3);

        if $z0 == 0 goto label25;

        z6 = 1;

        goto label26;

     label25:
        $i1 = interfaceinvoke $r4.<org.apache.xml.dtm.DTMIterator: int nextNode()>();

        $i17 = (int) -1;

        if $i17 != $i1 goto label24;

     label26:
        interfaceinvoke $r4.<org.apache.xml.dtm.DTMIterator: void reset()>();

        goto label28;

     label27:
        $d0 = virtualinvoke r2.<org.apache.xpath.objects.XNodeSet: double num()>();

        $d1 = virtualinvoke r0.<org.apache.xpath.objects.XObject: double num()>();

        z6 = virtualinvoke r1.<org.apache.xpath.objects.Comparator: boolean compareNumbers(double,double)>($d0, $d1);

     label28:
        return z6;
    }

    public boolean lessThan(org.apache.xpath.objects.XObject) throws javax.xml.transform.TransformerException
    {
        org.apache.xpath.objects.XNodeSet r0;
        org.apache.xpath.objects.XObject r1;
        org.apache.xpath.objects.LessThanComparator $r2;
        boolean $z0;

        r0 := @this: org.apache.xpath.objects.XNodeSet;

        r1 := @parameter0: org.apache.xpath.objects.XObject;

        $r2 = <org.apache.xpath.objects.XNodeSet: org.apache.xpath.objects.LessThanComparator S_LT>;

        $z0 = virtualinvoke r0.<org.apache.xpath.objects.XNodeSet: boolean compare(org.apache.xpath.objects.XObject,org.apache.xpath.objects.Comparator)>(r1, $r2);

        return $z0;
    }

    public boolean lessThanOrEqual(org.apache.xpath.objects.XObject) throws javax.xml.transform.TransformerException
    {
        org.apache.xpath.objects.XNodeSet r0;
        org.apache.xpath.objects.XObject r1;
        org.apache.xpath.objects.LessThanOrEqualComparator $r2;
        boolean $z0;

        r0 := @this: org.apache.xpath.objects.XNodeSet;

        r1 := @parameter0: org.apache.xpath.objects.XObject;

        $r2 = <org.apache.xpath.objects.XNodeSet: org.apache.xpath.objects.LessThanOrEqualComparator S_LTE>;

        $z0 = virtualinvoke r0.<org.apache.xpath.objects.XNodeSet: boolean compare(org.apache.xpath.objects.XObject,org.apache.xpath.objects.Comparator)>(r1, $r2);

        return $z0;
    }

    public boolean greaterThan(org.apache.xpath.objects.XObject) throws javax.xml.transform.TransformerException
    {
        org.apache.xpath.objects.XNodeSet r0;
        org.apache.xpath.objects.GreaterThanComparator $r2;
        org.apache.xpath.objects.XObject r1;
        boolean $z0;

        r0 := @this: org.apache.xpath.objects.XNodeSet;

        r1 := @parameter0: org.apache.xpath.objects.XObject;

        $r2 = <org.apache.xpath.objects.XNodeSet: org.apache.xpath.objects.GreaterThanComparator S_GT>;

        $z0 = virtualinvoke r0.<org.apache.xpath.objects.XNodeSet: boolean compare(org.apache.xpath.objects.XObject,org.apache.xpath.objects.Comparator)>(r1, $r2);

        return $z0;
    }

    public boolean greaterThanOrEqual(org.apache.xpath.objects.XObject) throws javax.xml.transform.TransformerException
    {
        org.apache.xpath.objects.XNodeSet r0;
        org.apache.xpath.objects.GreaterThanOrEqualComparator $r2;
        org.apache.xpath.objects.XObject r1;
        boolean $z0;

        r0 := @this: org.apache.xpath.objects.XNodeSet;

        r1 := @parameter0: org.apache.xpath.objects.XObject;

        $r2 = <org.apache.xpath.objects.XNodeSet: org.apache.xpath.objects.GreaterThanOrEqualComparator S_GTE>;

        $z0 = virtualinvoke r0.<org.apache.xpath.objects.XNodeSet: boolean compare(org.apache.xpath.objects.XObject,org.apache.xpath.objects.Comparator)>(r1, $r2);

        return $z0;
    }

    public boolean equals(org.apache.xpath.objects.XObject)
    {
        org.apache.xpath.objects.EqualComparator $r2;
        org.apache.xml.utils.WrappedRuntimeException $r4;
        org.apache.xpath.objects.XNodeSet r0;
        javax.xml.transform.TransformerException $r3;
        org.apache.xpath.objects.XObject r1;
        boolean $z0;

        r0 := @this: org.apache.xpath.objects.XNodeSet;

        r1 := @parameter0: org.apache.xpath.objects.XObject;

     label1:
        $r2 = <org.apache.xpath.objects.XNodeSet: org.apache.xpath.objects.EqualComparator S_EQ>;

        $z0 = virtualinvoke r0.<org.apache.xpath.objects.XNodeSet: boolean compare(org.apache.xpath.objects.XObject,org.apache.xpath.objects.Comparator)>(r1, $r2);

        return $z0;

     label2:
        $r3 := @caughtexception;

        $r4 = new org.apache.xml.utils.WrappedRuntimeException;

        specialinvoke $r4.<org.apache.xml.utils.WrappedRuntimeException: void <init>(java.lang.Exception)>($r3);

        throw $r4;

        catch javax.xml.transform.TransformerException from label1 to label2 with label2;
    }

    public boolean notEquals(org.apache.xpath.objects.XObject) throws javax.xml.transform.TransformerException
    {
        org.apache.xpath.objects.XNodeSet r0;
        org.apache.xpath.objects.XObject r1;
        org.apache.xpath.objects.NotEqualComparator $r2;
        boolean $z0;

        r0 := @this: org.apache.xpath.objects.XNodeSet;

        r1 := @parameter0: org.apache.xpath.objects.XObject;

        $r2 = <org.apache.xpath.objects.XNodeSet: org.apache.xpath.objects.NotEqualComparator S_NEQ>;

        $z0 = virtualinvoke r0.<org.apache.xpath.objects.XNodeSet: boolean compare(org.apache.xpath.objects.XObject,org.apache.xpath.objects.Comparator)>(r1, $r2);

        return $z0;
    }

    static void <clinit>()
    {
        org.apache.xpath.objects.EqualComparator $r4;
        org.apache.xpath.objects.GreaterThanComparator $r2;
        org.apache.xpath.objects.GreaterThanOrEqualComparator $r3;
        org.apache.xpath.objects.LessThanComparator $r0;
        org.apache.xpath.objects.NotEqualComparator $r5;
        org.apache.xpath.objects.LessThanOrEqualComparator $r1;

        $r0 = new org.apache.xpath.objects.LessThanComparator;

        specialinvoke $r0.<org.apache.xpath.objects.LessThanComparator: void <init>()>();

        <org.apache.xpath.objects.XNodeSet: org.apache.xpath.objects.LessThanComparator S_LT> = $r0;

        $r1 = new org.apache.xpath.objects.LessThanOrEqualComparator;

        specialinvoke $r1.<org.apache.xpath.objects.LessThanOrEqualComparator: void <init>()>();

        <org.apache.xpath.objects.XNodeSet: org.apache.xpath.objects.LessThanOrEqualComparator S_LTE> = $r1;

        $r2 = new org.apache.xpath.objects.GreaterThanComparator;

        specialinvoke $r2.<org.apache.xpath.objects.GreaterThanComparator: void <init>()>();

        <org.apache.xpath.objects.XNodeSet: org.apache.xpath.objects.GreaterThanComparator S_GT> = $r2;

        $r3 = new org.apache.xpath.objects.GreaterThanOrEqualComparator;

        specialinvoke $r3.<org.apache.xpath.objects.GreaterThanOrEqualComparator: void <init>()>();

        <org.apache.xpath.objects.XNodeSet: org.apache.xpath.objects.GreaterThanOrEqualComparator S_GTE> = $r3;

        $r4 = new org.apache.xpath.objects.EqualComparator;

        specialinvoke $r4.<org.apache.xpath.objects.EqualComparator: void <init>()>();

        <org.apache.xpath.objects.XNodeSet: org.apache.xpath.objects.EqualComparator S_EQ> = $r4;

        $r5 = new org.apache.xpath.objects.NotEqualComparator;

        specialinvoke $r5.<org.apache.xpath.objects.NotEqualComparator: void <init>()>();

        <org.apache.xpath.objects.XNodeSet: org.apache.xpath.objects.NotEqualComparator S_NEQ> = $r5;

        return;
    }
}
