public final class com.ctc.wstx.sr.NonNsInputElementStack extends com.ctc.wstx.sr.InputElementStack
{
    static final java.lang.String INT_ERR_UNEXPECTED_CALL;
    protected final com.ctc.wstx.sr.NonNsAttributeCollector mAttrCollector;
    protected java.lang.String[] mElements;
    protected int mSize;
    protected java.lang.String mLastLocalName;
    protected javax.xml.namespace.QName mLastName;

    public void <init>(int, com.ctc.wstx.api.ReaderConfig)
    {
        int i0;
        com.ctc.wstx.sr.NonNsAttributeCollector $r3;
        java.lang.String[] $r2;
        com.ctc.wstx.sr.NonNsInputElementStack r0;
        com.ctc.wstx.api.ReaderConfig r1;

        r0 := @this: com.ctc.wstx.sr.NonNsInputElementStack;

        i0 := @parameter0: int;

        r1 := @parameter1: com.ctc.wstx.api.ReaderConfig;

        specialinvoke r0.<com.ctc.wstx.sr.InputElementStack: void <init>(com.ctc.wstx.api.ReaderConfig)>(r1);

        r0.<com.ctc.wstx.sr.NonNsInputElementStack: java.lang.String mLastLocalName> = null;

        r0.<com.ctc.wstx.sr.NonNsInputElementStack: javax.xml.namespace.QName mLastName> = null;

        r0.<com.ctc.wstx.sr.NonNsInputElementStack: int mSize> = 0;

        if i0 >= 4 goto label1;

        i0 = 4;

     label1:
        $r2 = newarray (java.lang.String)[i0];

        r0.<com.ctc.wstx.sr.NonNsInputElementStack: java.lang.String[] mElements> = $r2;

        $r3 = new com.ctc.wstx.sr.NonNsAttributeCollector;

        specialinvoke $r3.<com.ctc.wstx.sr.NonNsAttributeCollector: void <init>(com.ctc.wstx.api.ReaderConfig)>(r1);

        r0.<com.ctc.wstx.sr.NonNsInputElementStack: com.ctc.wstx.sr.NonNsAttributeCollector mAttrCollector> = $r3;

        return;
    }

    protected void setAutomaticDTDValidator(org.codehaus.stax2.validation.XMLValidator, com.ctc.wstx.sr.NsDefaultProvider)
    {
        org.codehaus.stax2.validation.XMLValidator r1;
        com.ctc.wstx.sr.NonNsInputElementStack r0;
        com.ctc.wstx.sr.NsDefaultProvider r2;

        r0 := @this: com.ctc.wstx.sr.NonNsInputElementStack;

        r1 := @parameter0: org.codehaus.stax2.validation.XMLValidator;

        r2 := @parameter1: com.ctc.wstx.sr.NsDefaultProvider;

        virtualinvoke r0.<com.ctc.wstx.sr.NonNsInputElementStack: org.codehaus.stax2.validation.XMLValidator addValidator(org.codehaus.stax2.validation.XMLValidator)>(r1);

        return;
    }

    public final void push(java.lang.String, java.lang.String)
    {
        java.lang.Error $r0;
        java.lang.String r2, r3;
        com.ctc.wstx.sr.NonNsInputElementStack r1;

        r1 := @this: com.ctc.wstx.sr.NonNsInputElementStack;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        $r0 = new java.lang.Error;

        specialinvoke $r0.<java.lang.Error: void <init>(java.lang.String)>("Internal error: method should never be called for non-namespace element stack.");

        throw $r0;
    }

    public final void push(java.lang.String)
    {
        java.lang.String[] $r1, $r3, r5, $r6, $r7;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        com.ctc.wstx.sr.NonNsAttributeCollector $r4;
        java.lang.String r2;
        com.ctc.wstx.sr.NonNsInputElementStack r0;

        r0 := @this: com.ctc.wstx.sr.NonNsInputElementStack;

        r2 := @parameter0: java.lang.String;

        $i1 = r0.<com.ctc.wstx.sr.NonNsInputElementStack: int mSize>;

        $r1 = r0.<com.ctc.wstx.sr.NonNsInputElementStack: java.lang.String[] mElements>;

        $i0 = lengthof $r1;

        if $i1 != $i0 goto label1;

        r5 = r0.<com.ctc.wstx.sr.NonNsInputElementStack: java.lang.String[] mElements>;

        $i5 = lengthof r5;

        $i6 = $i5 + 32;

        $r6 = newarray (java.lang.String)[$i6];

        r0.<com.ctc.wstx.sr.NonNsInputElementStack: java.lang.String[] mElements> = $r6;

        $r7 = r0.<com.ctc.wstx.sr.NonNsInputElementStack: java.lang.String[] mElements>;

        $i7 = lengthof r5;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r5, 0, $r7, 0, $i7);

     label1:
        $r3 = r0.<com.ctc.wstx.sr.NonNsInputElementStack: java.lang.String[] mElements>;

        $i2 = r0.<com.ctc.wstx.sr.NonNsInputElementStack: int mSize>;

        $r3[$i2] = r2;

        $i3 = r0.<com.ctc.wstx.sr.NonNsInputElementStack: int mSize>;

        $i4 = $i3 + 1;

        r0.<com.ctc.wstx.sr.NonNsInputElementStack: int mSize> = $i4;

        $r4 = r0.<com.ctc.wstx.sr.NonNsInputElementStack: com.ctc.wstx.sr.NonNsAttributeCollector mAttrCollector>;

        virtualinvoke $r4.<com.ctc.wstx.sr.NonNsAttributeCollector: void reset()>();

        return;
    }

    public int pop() throws javax.xml.stream.XMLStreamException
    {
        java.lang.IllegalStateException $r7;
        java.lang.String[] $r2, $r5, $r6;
        org.codehaus.stax2.validation.XMLValidator $r1, $r4;
        int $i0, $i1, i2, $i3, $i4, $i5;
        java.lang.String $r3;
        com.ctc.wstx.sr.NonNsInputElementStack r0;

        r0 := @this: com.ctc.wstx.sr.NonNsInputElementStack;

        $i0 = r0.<com.ctc.wstx.sr.NonNsInputElementStack: int mSize>;

        if $i0 != 0 goto label1;

        $r7 = new java.lang.IllegalStateException;

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Popping from empty stack.");

        throw $r7;

     label1:
        $r1 = r0.<com.ctc.wstx.sr.NonNsInputElementStack: org.codehaus.stax2.validation.XMLValidator mValidator>;

        if $r1 != null goto label2;

        $r6 = r0.<com.ctc.wstx.sr.NonNsInputElementStack: java.lang.String[] mElements>;

        $i4 = r0.<com.ctc.wstx.sr.NonNsInputElementStack: int mSize>;

        $i5 = $i4 - 1;

        r0.<com.ctc.wstx.sr.NonNsInputElementStack: int mSize> = $i5;

        $r6[$i5] = null;

        return 3;

     label2:
        $i1 = r0.<com.ctc.wstx.sr.NonNsInputElementStack: int mSize>;

        i2 = $i1 - 1;

        $r4 = r0.<com.ctc.wstx.sr.NonNsInputElementStack: org.codehaus.stax2.validation.XMLValidator mValidator>;

        $r2 = r0.<com.ctc.wstx.sr.NonNsInputElementStack: java.lang.String[] mElements>;

        $r3 = $r2[i2];

        $i3 = virtualinvoke $r4.<org.codehaus.stax2.validation.XMLValidator: int validateElementEnd(java.lang.String,java.lang.String,java.lang.String)>($r3, null, null);

        r0.<com.ctc.wstx.sr.NonNsInputElementStack: int mSize> = i2;

        $r5 = r0.<com.ctc.wstx.sr.NonNsInputElementStack: java.lang.String[] mElements>;

        $r5[i2] = null;

        return $i3;
    }

    public int resolveAndValidateElement() throws javax.xml.stream.XMLStreamException
    {
        java.lang.String[] $r4, $r9;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8;
        com.ctc.wstx.sr.NonNsAttributeCollector r1;
        java.lang.String $r5, $r13, $r14;
        com.ctc.wstx.sr.NonNsInputElementStack r0;
        com.ctc.wstx.util.TextBuilder $r10;
        org.codehaus.stax2.validation.XMLValidator $r3, $r6, $r7, $r12;
        com.ctc.wstx.util.StringVector $r8;
        com.ctc.wstx.sr.InputProblemReporter $r2;
        char[] $r11;

        r0 := @this: com.ctc.wstx.sr.NonNsInputElementStack;

        r1 = r0.<com.ctc.wstx.sr.NonNsInputElementStack: com.ctc.wstx.sr.NonNsAttributeCollector mAttrCollector>;

        $r2 = r0.<com.ctc.wstx.sr.NonNsInputElementStack: com.ctc.wstx.sr.InputProblemReporter mReporter>;

        $i0 = virtualinvoke r1.<com.ctc.wstx.sr.NonNsAttributeCollector: int resolveValues(com.ctc.wstx.sr.InputProblemReporter)>($r2);

        r0.<com.ctc.wstx.sr.NonNsInputElementStack: int mIdAttrIndex> = $i0;

        $r3 = r0.<com.ctc.wstx.sr.NonNsInputElementStack: org.codehaus.stax2.validation.XMLValidator mValidator>;

        if $r3 != null goto label2;

        if $i0 < 0 goto label1;

        virtualinvoke r0.<com.ctc.wstx.sr.NonNsInputElementStack: void normalizeXmlIdAttr(com.ctc.wstx.sr.AttributeCollector,int)>(r1, $i0);

     label1:
        return 3;

     label2:
        $r6 = r0.<com.ctc.wstx.sr.NonNsInputElementStack: org.codehaus.stax2.validation.XMLValidator mValidator>;

        $r4 = r0.<com.ctc.wstx.sr.NonNsInputElementStack: java.lang.String[] mElements>;

        $i1 = r0.<com.ctc.wstx.sr.NonNsInputElementStack: int mSize>;

        $i2 = $i1 - 1;

        $r5 = $r4[$i2];

        virtualinvoke $r6.<org.codehaus.stax2.validation.XMLValidator: void validateElementStart(java.lang.String,java.lang.String,java.lang.String)>($r5, null, null);

        $i3 = virtualinvoke r1.<com.ctc.wstx.sr.NonNsAttributeCollector: int getCount()>();

        if $i3 <= 0 goto label5;

        $r8 = virtualinvoke r1.<com.ctc.wstx.sr.NonNsAttributeCollector: com.ctc.wstx.util.StringVector getNameList()>();

        $r9 = virtualinvoke $r8.<com.ctc.wstx.util.StringVector: java.lang.String[] getInternalArray()>();

        $r10 = virtualinvoke r1.<com.ctc.wstx.sr.NonNsAttributeCollector: com.ctc.wstx.util.TextBuilder getAttrBuilder()>();

        $r11 = virtualinvoke $r10.<com.ctc.wstx.util.TextBuilder: char[] getCharBuffer()>();

        i8 = 0;

     label3:
        if i8 >= $i3 goto label5;

        $r12 = r0.<com.ctc.wstx.sr.NonNsInputElementStack: org.codehaus.stax2.validation.XMLValidator mValidator>;

        $r13 = $r9[i8];

        $i5 = virtualinvoke $r10.<com.ctc.wstx.util.TextBuilder: int getOffset(int)>(i8);

        $i6 = i8 + 1;

        $i7 = virtualinvoke $r10.<com.ctc.wstx.util.TextBuilder: int getOffset(int)>($i6);

        $r14 = virtualinvoke $r12.<org.codehaus.stax2.validation.XMLValidator: java.lang.String validateAttribute(java.lang.String,java.lang.String,java.lang.String,char[],int,int)>($r13, null, null, $r11, $i5, $i7);

        if $r14 == null goto label4;

        virtualinvoke r1.<com.ctc.wstx.sr.NonNsAttributeCollector: void setNormalizedValue(int,java.lang.String)>(i8, $r14);

     label4:
        i8 = i8 + 1;

        goto label3;

     label5:
        $r7 = r0.<com.ctc.wstx.sr.NonNsInputElementStack: org.codehaus.stax2.validation.XMLValidator mValidator>;

        $i4 = virtualinvoke $r7.<org.codehaus.stax2.validation.XMLValidator: int validateElementAndAttributes()>();

        return $i4;
    }

    public final boolean isNamespaceAware()
    {
        com.ctc.wstx.sr.NonNsInputElementStack r0;

        r0 := @this: com.ctc.wstx.sr.NonNsInputElementStack;

        return 0;
    }

    public final int getDepth()
    {
        int $i0;
        com.ctc.wstx.sr.NonNsInputElementStack r0;

        r0 := @this: com.ctc.wstx.sr.NonNsInputElementStack;

        $i0 = r0.<com.ctc.wstx.sr.NonNsInputElementStack: int mSize>;

        return $i0;
    }

    public final com.ctc.wstx.sr.AttributeCollector getAttrCollector()
    {
        com.ctc.wstx.sr.NonNsAttributeCollector $r1;
        com.ctc.wstx.sr.NonNsInputElementStack r0;

        r0 := @this: com.ctc.wstx.sr.NonNsInputElementStack;

        $r1 = r0.<com.ctc.wstx.sr.NonNsInputElementStack: com.ctc.wstx.sr.NonNsAttributeCollector mAttrCollector>;

        return $r1;
    }

    public final com.ctc.wstx.util.BaseNsContext createNonTransientNsContext(javax.xml.stream.Location)
    {
        com.ctc.wstx.util.EmptyNamespaceContext $r0;
        com.ctc.wstx.sr.NonNsInputElementStack r1;
        javax.xml.stream.Location r2;

        r1 := @this: com.ctc.wstx.sr.NonNsInputElementStack;

        r2 := @parameter0: javax.xml.stream.Location;

        $r0 = staticinvoke <com.ctc.wstx.util.EmptyNamespaceContext: com.ctc.wstx.util.EmptyNamespaceContext getInstance()>();

        return $r0;
    }

    public final java.lang.String getNamespaceURI(java.lang.String)
    {
        java.lang.String r1;
        com.ctc.wstx.sr.NonNsInputElementStack r0;

        r0 := @this: com.ctc.wstx.sr.NonNsInputElementStack;

        r1 := @parameter0: java.lang.String;

        return null;
    }

    public final java.lang.String getPrefix(java.lang.String)
    {
        java.lang.String r1;
        com.ctc.wstx.sr.NonNsInputElementStack r0;

        r0 := @this: com.ctc.wstx.sr.NonNsInputElementStack;

        r1 := @parameter0: java.lang.String;

        return null;
    }

    public final java.util.Iterator getPrefixes(java.lang.String)
    {
        com.ctc.wstx.util.EmptyIterator $r0;
        java.lang.String r2;
        com.ctc.wstx.sr.NonNsInputElementStack r1;

        r1 := @this: com.ctc.wstx.sr.NonNsInputElementStack;

        r2 := @parameter0: java.lang.String;

        $r0 = staticinvoke <com.ctc.wstx.util.EmptyIterator: com.ctc.wstx.util.EmptyIterator getInstance()>();

        return $r0;
    }

    public final int getAttributeCount()
    {
        int $i0;
        com.ctc.wstx.sr.NonNsAttributeCollector $r1;
        com.ctc.wstx.sr.NonNsInputElementStack r0;

        r0 := @this: com.ctc.wstx.sr.NonNsInputElementStack;

        $r1 = r0.<com.ctc.wstx.sr.NonNsInputElementStack: com.ctc.wstx.sr.NonNsAttributeCollector mAttrCollector>;

        $i0 = virtualinvoke $r1.<com.ctc.wstx.sr.NonNsAttributeCollector: int getCount()>();

        return $i0;
    }

    public final int findAttributeIndex(java.lang.String, java.lang.String)
    {
        int $i0, $i1, $i3;
        com.ctc.wstx.sr.NonNsAttributeCollector $r3;
        java.lang.String r0, r2;
        com.ctc.wstx.sr.NonNsInputElementStack r1;

        r1 := @this: com.ctc.wstx.sr.NonNsInputElementStack;

        r0 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        if r0 == null goto label1;

        $i1 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i1 <= 0 goto label1;

        $i3 = (int) -1;

        return $i3;

     label1:
        $r3 = r1.<com.ctc.wstx.sr.NonNsInputElementStack: com.ctc.wstx.sr.NonNsAttributeCollector mAttrCollector>;

        $i0 = virtualinvoke $r3.<com.ctc.wstx.sr.NonNsAttributeCollector: int findIndex(java.lang.String)>(r2);

        return $i0;
    }

    public final javax.xml.namespace.QName getCurrentElementName()
    {
        java.lang.String[] $r1;
        int $i0, $i1, $i2;
        java.lang.String r2, $r3;
        javax.xml.namespace.QName $r4, $r5;
        com.ctc.wstx.sr.NonNsInputElementStack r0;

        r0 := @this: com.ctc.wstx.sr.NonNsInputElementStack;

        $i0 = r0.<com.ctc.wstx.sr.NonNsInputElementStack: int mSize>;

        if $i0 != 0 goto label1;

        return null;

     label1:
        $r1 = r0.<com.ctc.wstx.sr.NonNsInputElementStack: java.lang.String[] mElements>;

        $i1 = r0.<com.ctc.wstx.sr.NonNsInputElementStack: int mSize>;

        $i2 = $i1 - 1;

        r2 = $r1[$i2];

        $r3 = r0.<com.ctc.wstx.sr.NonNsInputElementStack: java.lang.String mLastLocalName>;

        if r2 != $r3 goto label2;

        $r5 = r0.<com.ctc.wstx.sr.NonNsInputElementStack: javax.xml.namespace.QName mLastName>;

        return $r5;

     label2:
        $r4 = new javax.xml.namespace.QName;

        specialinvoke $r4.<javax.xml.namespace.QName: void <init>(java.lang.String)>(r2);

        r0.<com.ctc.wstx.sr.NonNsInputElementStack: java.lang.String mLastLocalName> = r2;

        r0.<com.ctc.wstx.sr.NonNsInputElementStack: javax.xml.namespace.QName mLastName> = $r4;

        return $r4;
    }

    public int addDefaultAttribute(java.lang.String, java.lang.String, java.lang.String, java.lang.String)
    {
        int $i0;
        com.ctc.wstx.sr.NonNsAttributeCollector $r3;
        java.lang.String r1, r2, r4, r5;
        com.ctc.wstx.sr.NonNsInputElementStack r0;

        r0 := @this: com.ctc.wstx.sr.NonNsInputElementStack;

        r1 := @parameter0: java.lang.String;

        r4 := @parameter1: java.lang.String;

        r5 := @parameter2: java.lang.String;

        r2 := @parameter3: java.lang.String;

        $r3 = r0.<com.ctc.wstx.sr.NonNsInputElementStack: com.ctc.wstx.sr.NonNsAttributeCollector mAttrCollector>;

        $i0 = virtualinvoke $r3.<com.ctc.wstx.sr.NonNsAttributeCollector: int addDefaultAttribute(java.lang.String,java.lang.String)>(r1, r2);

        return $i0;
    }

    public boolean isPrefixLocallyDeclared(java.lang.String)
    {
        java.lang.String r1;
        com.ctc.wstx.sr.NonNsInputElementStack r0;

        r0 := @this: com.ctc.wstx.sr.NonNsInputElementStack;

        r1 := @parameter0: java.lang.String;

        return 0;
    }

    public void addNsBinding(java.lang.String, java.lang.String)
    {
        java.lang.String r1, r2;
        com.ctc.wstx.sr.NonNsInputElementStack r0;

        r0 := @this: com.ctc.wstx.sr.NonNsInputElementStack;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        return;
    }

    public final boolean isEmpty()
    {
        int $i0;
        com.ctc.wstx.sr.NonNsInputElementStack r0;
        boolean $z0;

        r0 := @this: com.ctc.wstx.sr.NonNsInputElementStack;

        $i0 = r0.<com.ctc.wstx.sr.NonNsInputElementStack: int mSize>;

        if $i0 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public final java.lang.String getDefaultNsURI()
    {
        com.ctc.wstx.sr.NonNsInputElementStack r0;

        r0 := @this: com.ctc.wstx.sr.NonNsInputElementStack;

        return null;
    }

    public final java.lang.String getNsURI()
    {
        com.ctc.wstx.sr.NonNsInputElementStack r0;

        r0 := @this: com.ctc.wstx.sr.NonNsInputElementStack;

        return null;
    }

    public final java.lang.String getPrefix()
    {
        com.ctc.wstx.sr.NonNsInputElementStack r0;

        r0 := @this: com.ctc.wstx.sr.NonNsInputElementStack;

        return null;
    }

    public final java.lang.String getLocalName()
    {
        java.lang.IllegalStateException $r3;
        int $i0, $i1, $i2;
        java.lang.String[] $r1;
        java.lang.String $r2;
        com.ctc.wstx.sr.NonNsInputElementStack r0;

        r0 := @this: com.ctc.wstx.sr.NonNsInputElementStack;

        $i0 = r0.<com.ctc.wstx.sr.NonNsInputElementStack: int mSize>;

        if $i0 != 0 goto label1;

        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Illegal access, empty stack.");

        throw $r3;

     label1:
        $r1 = r0.<com.ctc.wstx.sr.NonNsInputElementStack: java.lang.String[] mElements>;

        $i1 = r0.<com.ctc.wstx.sr.NonNsInputElementStack: int mSize>;

        $i2 = $i1 - 1;

        $r2 = $r1[$i2];

        return $r2;
    }

    public final boolean matches(java.lang.String, java.lang.String)
    {
        java.lang.IllegalStateException $r5;
        java.lang.String[] $r2;
        int $i0, $i1, $i2, $i3;
        java.lang.String r1, r3, $r4;
        com.ctc.wstx.sr.NonNsInputElementStack r0;
        boolean $z0, $z1;

        r0 := @this: com.ctc.wstx.sr.NonNsInputElementStack;

        r1 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        $i0 = r0.<com.ctc.wstx.sr.NonNsInputElementStack: int mSize>;

        if $i0 != 0 goto label1;

        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Illegal access, empty stack.");

        throw $r5;

     label1:
        if r1 == null goto label2;

        $i3 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i3 <= 0 goto label2;

        return 0;

     label2:
        $r2 = r0.<com.ctc.wstx.sr.NonNsInputElementStack: java.lang.String[] mElements>;

        $i1 = r0.<com.ctc.wstx.sr.NonNsInputElementStack: int mSize>;

        $i2 = $i1 - 1;

        $r4 = $r2[$i2];

        if $r4 == r3 goto label3;

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>(r3);

        if $z0 == 0 goto label4;

     label3:
        $z1 = 1;

        goto label5;

     label4:
        $z1 = 0;

     label5:
        return $z1;
    }

    public final java.lang.String getTopElementDesc()
    {
        java.lang.IllegalStateException $r3;
        int $i0, $i1, $i2;
        java.lang.String[] $r1;
        java.lang.String $r2;
        com.ctc.wstx.sr.NonNsInputElementStack r0;

        r0 := @this: com.ctc.wstx.sr.NonNsInputElementStack;

        $i0 = r0.<com.ctc.wstx.sr.NonNsInputElementStack: int mSize>;

        if $i0 != 0 goto label1;

        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Illegal access, empty stack.");

        throw $r3;

     label1:
        $r1 = r0.<com.ctc.wstx.sr.NonNsInputElementStack: java.lang.String[] mElements>;

        $i1 = r0.<com.ctc.wstx.sr.NonNsInputElementStack: int mSize>;

        $i2 = $i1 - 1;

        $r2 = $r1[$i2];

        return $r2;
    }

    public final int getTotalNsCount()
    {
        com.ctc.wstx.sr.NonNsInputElementStack r0;

        r0 := @this: com.ctc.wstx.sr.NonNsInputElementStack;

        return 0;
    }

    public final int getCurrentNsCount()
    {
        com.ctc.wstx.sr.NonNsInputElementStack r0;

        r0 := @this: com.ctc.wstx.sr.NonNsInputElementStack;

        return 0;
    }

    public final java.lang.String getLocalNsPrefix(int)
    {
        int i0;
        com.ctc.wstx.sr.NonNsInputElementStack r0;

        r0 := @this: com.ctc.wstx.sr.NonNsInputElementStack;

        i0 := @parameter0: int;

        staticinvoke <com.ctc.wstx.sr.NonNsInputElementStack: void throwIllegalIndex(int)>(i0);

        return null;
    }

    public final java.lang.String getLocalNsURI(int)
    {
        int i0;
        com.ctc.wstx.sr.NonNsInputElementStack r0;

        r0 := @this: com.ctc.wstx.sr.NonNsInputElementStack;

        i0 := @parameter0: int;

        staticinvoke <com.ctc.wstx.sr.NonNsInputElementStack: void throwIllegalIndex(int)>(i0);

        return null;
    }

    private static void throwIllegalIndex(int)
    {
        java.lang.StringBuffer $r1, $r2, $r3, $r4;
        int i0;
        java.lang.String $r5;
        java.lang.IllegalArgumentException $r0;

        i0 := @parameter0: int;

        $r0 = new java.lang.IllegalArgumentException;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Illegal namespace index ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("; current scope has no namespace declarations.");

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r0;
    }

    public static void <clinit>()
    {
        <com.ctc.wstx.sr.NonNsInputElementStack: java.lang.String INT_ERR_UNEXPECTED_CALL> = "Internal error: method should never be called for non-namespace element stack.";

        return;
    }
}
