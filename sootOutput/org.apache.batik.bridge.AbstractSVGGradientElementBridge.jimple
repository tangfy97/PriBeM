public abstract class org.apache.batik.bridge.AbstractSVGGradientElementBridge extends org.apache.batik.bridge.AnimatableGenericSVGBridge implements org.apache.batik.bridge.PaintBridge, org.apache.batik.bridge.ErrorConstants
{

    protected void <init>()
    {
        org.apache.batik.bridge.AbstractSVGGradientElementBridge r0;

        r0 := @this: org.apache.batik.bridge.AbstractSVGGradientElementBridge;

        specialinvoke r0.<org.apache.batik.bridge.AnimatableGenericSVGBridge: void <init>()>();

        return;
    }

    public java.awt.Paint createPaint(org.apache.batik.bridge.BridgeContext, org.w3c.dom.Element, org.w3c.dom.Element, org.apache.batik.gvt.GraphicsNode, float)
    {
        java.awt.Color $r7, $r18;
        org.apache.batik.ext.awt.MultipleGradientPaint$CycleMethodEnum r20;
        float[] r3;
        int $i0, $i1, $i2, i3;
        java.lang.String $r8, $r10;
        boolean $z0;
        java.util.Iterator $r5;
        org.apache.batik.gvt.GraphicsNode r14;
        org.apache.batik.bridge.AbstractSVGGradientElementBridge$Stop $r17, r19;
        org.apache.batik.bridge.BridgeContext r1;
        java.awt.geom.AffineTransform $r11, r21;
        org.apache.batik.bridge.AbstractSVGGradientElementBridge r12;
        org.apache.batik.ext.awt.MultipleGradientPaint$ColorSpaceEnum $r9;
        java.util.List $r2;
        org.w3c.dom.Element r0, r13;
        java.awt.Paint $r15;
        float f0, $f1;
        java.lang.Object $r6, $r16;
        java.awt.Color[] r4;

        r12 := @this: org.apache.batik.bridge.AbstractSVGGradientElementBridge;

        r1 := @parameter0: org.apache.batik.bridge.BridgeContext;

        r0 := @parameter1: org.w3c.dom.Element;

        r13 := @parameter2: org.w3c.dom.Element;

        r14 := @parameter3: org.apache.batik.gvt.GraphicsNode;

        f0 := @parameter4: float;

        $r2 = staticinvoke <org.apache.batik.bridge.AbstractSVGGradientElementBridge: java.util.List extractStop(org.w3c.dom.Element,float,org.apache.batik.bridge.BridgeContext)>(r0, f0, r1);

        if $r2 != null goto label1;

        return null;

     label1:
        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        if $i0 != 1 goto label2;

        $r16 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(0);

        $r17 = (org.apache.batik.bridge.AbstractSVGGradientElementBridge$Stop) $r16;

        $r18 = $r17.<org.apache.batik.bridge.AbstractSVGGradientElementBridge$Stop: java.awt.Color color>;

        return $r18;

     label2:
        r3 = newarray (float)[$i0];

        r4 = newarray (java.awt.Color)[$i0];

        $r5 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

        i3 = 0;

        goto label4;

     label3:
        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r19 = (org.apache.batik.bridge.AbstractSVGGradientElementBridge$Stop) $r6;

        $f1 = r19.<org.apache.batik.bridge.AbstractSVGGradientElementBridge$Stop: float offset>;

        r3[i3] = $f1;

        $r7 = r19.<org.apache.batik.bridge.AbstractSVGGradientElementBridge$Stop: java.awt.Color color>;

        r4[i3] = $r7;

        i3 = i3 + 1;

     label4:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label3;

        r20 = <org.apache.batik.ext.awt.MultipleGradientPaint: org.apache.batik.ext.awt.MultipleGradientPaint$CycleMethodEnum NO_CYCLE>;

        $r8 = staticinvoke <org.apache.batik.bridge.SVGUtilities: java.lang.String getChainableAttributeNS(org.w3c.dom.Element,java.lang.String,java.lang.String,org.apache.batik.bridge.BridgeContext)>(r0, null, "spreadMethod", r1);

        $i1 = virtualinvoke $r8.<java.lang.String: int length()>();

        if $i1 == 0 goto label5;

        r20 = staticinvoke <org.apache.batik.bridge.AbstractSVGGradientElementBridge: org.apache.batik.ext.awt.MultipleGradientPaint$CycleMethodEnum convertSpreadMethod(org.w3c.dom.Element,java.lang.String,org.apache.batik.bridge.BridgeContext)>(r0, $r8, r1);

     label5:
        $r9 = staticinvoke <org.apache.batik.bridge.CSSUtilities: org.apache.batik.ext.awt.MultipleGradientPaint$ColorSpaceEnum convertColorInterpolation(org.w3c.dom.Element)>(r0);

        $r10 = staticinvoke <org.apache.batik.bridge.SVGUtilities: java.lang.String getChainableAttributeNS(org.w3c.dom.Element,java.lang.String,java.lang.String,org.apache.batik.bridge.BridgeContext)>(r0, null, "gradientTransform", r1);

        $i2 = virtualinvoke $r10.<java.lang.String: int length()>();

        if $i2 == 0 goto label6;

        r21 = staticinvoke <org.apache.batik.bridge.SVGUtilities: java.awt.geom.AffineTransform convertTransform(org.w3c.dom.Element,java.lang.String,java.lang.String,org.apache.batik.bridge.BridgeContext)>(r0, "gradientTransform", $r10, r1);

        goto label7;

     label6:
        $r11 = new java.awt.geom.AffineTransform;

        specialinvoke $r11.<java.awt.geom.AffineTransform: void <init>()>();

        r21 = $r11;

     label7:
        $r15 = virtualinvoke r12.<org.apache.batik.bridge.AbstractSVGGradientElementBridge: java.awt.Paint buildGradient(org.w3c.dom.Element,org.w3c.dom.Element,org.apache.batik.gvt.GraphicsNode,org.apache.batik.ext.awt.MultipleGradientPaint$CycleMethodEnum,org.apache.batik.ext.awt.MultipleGradientPaint$ColorSpaceEnum,java.awt.geom.AffineTransform,java.awt.Color[],float[],org.apache.batik.bridge.BridgeContext)>(r0, r13, r14, r20, $r9, r21, r4, r3, r1);

        return $r15;
    }

    protected abstract java.awt.Paint buildGradient(org.w3c.dom.Element, org.w3c.dom.Element, org.apache.batik.gvt.GraphicsNode, org.apache.batik.ext.awt.MultipleGradientPaint$CycleMethodEnum, org.apache.batik.ext.awt.MultipleGradientPaint$ColorSpaceEnum, java.awt.geom.AffineTransform, java.awt.Color[], float[], org.apache.batik.bridge.BridgeContext);

    protected static org.apache.batik.ext.awt.MultipleGradientPaint$CycleMethodEnum convertSpreadMethod(org.w3c.dom.Element, java.lang.String, org.apache.batik.bridge.BridgeContext)
    {
        org.apache.batik.ext.awt.MultipleGradientPaint$CycleMethodEnum $r8, $r9, $r10;
        java.lang.Object[] $r7;
        org.apache.batik.bridge.BridgeException $r4;
        org.apache.batik.bridge.BridgeContext r5;
        org.w3c.dom.Element r6;
        java.lang.String r0, $r1, $r2, $r3;
        boolean $z0, $z1, $z2;

        r6 := @parameter0: org.w3c.dom.Element;

        r0 := @parameter1: java.lang.String;

        r5 := @parameter2: org.apache.batik.bridge.BridgeContext;

        $r1 = "repeat";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z0 == 0 goto label1;

        $r10 = <org.apache.batik.ext.awt.MultipleGradientPaint: org.apache.batik.ext.awt.MultipleGradientPaint$CycleMethodEnum REPEAT>;

        return $r10;

     label1:
        $r2 = "reflect";

        $z1 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z1 == 0 goto label2;

        $r9 = <org.apache.batik.ext.awt.MultipleGradientPaint: org.apache.batik.ext.awt.MultipleGradientPaint$CycleMethodEnum REFLECT>;

        return $r9;

     label2:
        $r3 = "pad";

        $z2 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z2 == 0 goto label3;

        $r8 = <org.apache.batik.ext.awt.MultipleGradientPaint: org.apache.batik.ext.awt.MultipleGradientPaint$CycleMethodEnum NO_CYCLE>;

        return $r8;

     label3:
        $r4 = new org.apache.batik.bridge.BridgeException;

        $r7 = newarray (java.lang.Object)[2];

        $r7[0] = "spreadMethod";

        $r7[1] = r0;

        specialinvoke $r4.<org.apache.batik.bridge.BridgeException: void <init>(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element,java.lang.String,java.lang.Object[])>(r5, r6, "attribute.malformed", $r7);

        throw $r4;
    }

    protected static java.util.List extractStop(org.w3c.dom.Element, float, org.apache.batik.bridge.BridgeContext)
    {
        java.lang.Object[] $r8;
        org.apache.batik.bridge.BridgeException $r7;
        org.apache.batik.bridge.BridgeContext r1;
        java.util.List $r2;
        org.apache.batik.dom.AbstractNode $r4;
        org.w3c.dom.Element r9;
        org.apache.batik.util.ParsedURL $r6;
        int $i0;
        float f0;
        java.lang.String $r3, $r5;
        java.util.LinkedList $r0;
        boolean $z0;

        r9 := @parameter0: org.w3c.dom.Element;

        f0 := @parameter1: float;

        r1 := @parameter2: org.apache.batik.bridge.BridgeContext;

        $r0 = new java.util.LinkedList;

        specialinvoke $r0.<java.util.LinkedList: void <init>()>();

        goto label1;

     label1:
        $r2 = staticinvoke <org.apache.batik.bridge.AbstractSVGGradientElementBridge: java.util.List extractLocalStop(org.w3c.dom.Element,float,org.apache.batik.bridge.BridgeContext)>(r9, f0, r1);

        if $r2 == null goto label2;

        return $r2;

     label2:
        $r3 = staticinvoke <org.apache.batik.dom.util.XLinkSupport: java.lang.String getXLinkHref(org.w3c.dom.Element)>(r9);

        $i0 = virtualinvoke $r3.<java.lang.String: int length()>();

        if $i0 != 0 goto label3;

        return null;

     label3:
        $r4 = (org.apache.batik.dom.AbstractNode) r9;

        $r5 = virtualinvoke $r4.<org.apache.batik.dom.AbstractNode: java.lang.String getBaseURI()>();

        $r6 = new org.apache.batik.util.ParsedURL;

        specialinvoke $r6.<org.apache.batik.util.ParsedURL: void <init>(java.lang.String,java.lang.String)>($r5, $r3);

        $z0 = staticinvoke <org.apache.batik.bridge.AbstractSVGGradientElementBridge: boolean contains(java.util.List,org.apache.batik.util.ParsedURL)>($r0, $r6);

        if $z0 == 0 goto label4;

        $r7 = new org.apache.batik.bridge.BridgeException;

        $r8 = newarray (java.lang.Object)[1];

        $r8[0] = $r3;

        specialinvoke $r7.<org.apache.batik.bridge.BridgeException: void <init>(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element,java.lang.String,java.lang.Object[])>(r1, r9, "xlink.href.circularDependencies", $r8);

        throw $r7;

     label4:
        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r6);

        r9 = virtualinvoke r1.<org.apache.batik.bridge.BridgeContext: org.w3c.dom.Element getReferencedElement(org.w3c.dom.Element,java.lang.String)>(r9, $r3);

        goto label1;
    }

    protected static java.util.List extractLocalStop(org.w3c.dom.Element, float, org.apache.batik.bridge.BridgeContext)
    {
        org.apache.batik.bridge.AbstractSVGGradientElementBridge$SVGStopElementBridge $r4;
        short $s0;
        byte $b1;
        org.w3c.dom.Node r9;
        int $i2;
        java.util.LinkedList r7, $r10;
        boolean $z0;
        org.apache.batik.bridge.AbstractSVGGradientElementBridge$Stop $r5, r8;
        org.apache.batik.bridge.BridgeContext r2;
        org.apache.batik.bridge.Bridge $r3;
        org.w3c.dom.Element r0, r1;
        float f0, $f1, $f2, $f3;

        r0 := @parameter0: org.w3c.dom.Element;

        f0 := @parameter1: float;

        r2 := @parameter2: org.apache.batik.bridge.BridgeContext;

        r7 = null;

        r8 = null;

        r9 = interfaceinvoke r0.<org.w3c.dom.Node: org.w3c.dom.Node getFirstChild()>();

        goto label7;

     label1:
        $s0 = interfaceinvoke r9.<org.w3c.dom.Node: short getNodeType()>();

        if $s0 == 1 goto label2;

        goto label6;

     label2:
        r1 = (org.w3c.dom.Element) r9;

        $r3 = virtualinvoke r2.<org.apache.batik.bridge.BridgeContext: org.apache.batik.bridge.Bridge getBridge(org.w3c.dom.Element)>(r1);

        if $r3 == null goto label6;

        $z0 = $r3 instanceof org.apache.batik.bridge.AbstractSVGGradientElementBridge$SVGStopElementBridge;

        if $z0 != 0 goto label3;

        goto label6;

     label3:
        $r4 = (org.apache.batik.bridge.AbstractSVGGradientElementBridge$SVGStopElementBridge) $r3;

        $r5 = virtualinvoke $r4.<org.apache.batik.bridge.AbstractSVGGradientElementBridge$SVGStopElementBridge: org.apache.batik.bridge.AbstractSVGGradientElementBridge$Stop createStop(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element,org.w3c.dom.Element,float)>(r2, r0, r1, f0);

        if r7 != null goto label4;

        $r10 = new java.util.LinkedList;

        specialinvoke $r10.<java.util.LinkedList: void <init>()>();

        r7 = $r10;

     label4:
        if r8 == null goto label5;

        $f2 = $r5.<org.apache.batik.bridge.AbstractSVGGradientElementBridge$Stop: float offset>;

        $f1 = r8.<org.apache.batik.bridge.AbstractSVGGradientElementBridge$Stop: float offset>;

        $b1 = $f2 cmpg $f1;

        $i2 = (int) $b1;

        if $i2 >= 0 goto label5;

        $f3 = r8.<org.apache.batik.bridge.AbstractSVGGradientElementBridge$Stop: float offset>;

        $r5.<org.apache.batik.bridge.AbstractSVGGradientElementBridge$Stop: float offset> = $f3;

     label5:
        virtualinvoke r7.<java.util.LinkedList: boolean add(java.lang.Object)>($r5);

        r8 = $r5;

     label6:
        r9 = interfaceinvoke r9.<org.w3c.dom.Node: org.w3c.dom.Node getNextSibling()>();

     label7:
        if r9 != null goto label1;

        return r7;
    }

    private static boolean contains(java.util.List, org.apache.batik.util.ParsedURL)
    {
        java.util.List r0;
        java.util.Iterator $r1;
        org.apache.batik.util.ParsedURL r2;
        java.lang.Object $r3;
        boolean $z0, $z1;

        r0 := @parameter0: java.util.List;

        r2 := @parameter1: org.apache.batik.util.ParsedURL;

        $r1 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

        goto label2;

     label1:
        $r3 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $z1 = virtualinvoke r2.<org.apache.batik.util.ParsedURL: boolean equals(java.lang.Object)>($r3);

        if $z1 == 0 goto label2;

        return 1;

     label2:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        return 0;
    }
}
