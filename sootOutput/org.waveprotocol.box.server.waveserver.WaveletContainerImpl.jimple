abstract class org.waveprotocol.box.server.waveserver.WaveletContainerImpl extends java.lang.Object implements org.waveprotocol.box.server.waveserver.WaveletContainer
{
    private static final org.waveprotocol.wave.util.logging.Log LOG;
    private static final int AWAIT_LOAD_TIMEOUT_SECONDS;
    private final java.util.concurrent.Executor storageContinuationExecutor;
    private final java.util.concurrent.locks.Lock readLock;
    private final java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock writeLock;
    private final org.waveprotocol.wave.model.id.WaveletName waveletName;
    private final org.waveprotocol.box.server.waveserver.WaveletNotificationSubscriber notifiee;
    private final org.waveprotocol.wave.model.wave.ParticipantId sharedDomainParticipantId;
    private final java.util.concurrent.CountDownLatch loadLatch;
    private org.waveprotocol.box.server.waveserver.WaveletState waveletState;
    private org.waveprotocol.box.server.waveserver.WaveletContainerImpl$State state;

    public void <init>(org.waveprotocol.wave.model.id.WaveletName, org.waveprotocol.box.server.waveserver.WaveletNotificationSubscriber, com.google.common.util.concurrent.ListenableFuture, java.lang.String, java.util.concurrent.Executor)
    {
        org.waveprotocol.wave.model.id.WaveletName r3;
        org.waveprotocol.box.server.waveserver.WaveletContainerImpl$State $r2;
        com.google.common.util.concurrent.ListenableFuture r10;
        org.waveprotocol.box.server.waveserver.WaveletContainerImpl$1 $r11;
        java.util.concurrent.Executor r6;
        java.util.concurrent.locks.ReentrantReadWriteLock $r7;
        org.waveprotocol.wave.model.wave.ParticipantId $r12;
        java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock $r9;
        java.util.concurrent.CountDownLatch $r1;
        org.waveprotocol.box.server.waveserver.WaveletNotificationSubscriber r4;
        java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock $r8;
        java.lang.String r5;
        org.waveprotocol.box.server.waveserver.WaveletContainerImpl r0;

        r0 := @this: org.waveprotocol.box.server.waveserver.WaveletContainerImpl;

        r3 := @parameter0: org.waveprotocol.wave.model.id.WaveletName;

        r4 := @parameter1: org.waveprotocol.box.server.waveserver.WaveletNotificationSubscriber;

        r10 := @parameter2: com.google.common.util.concurrent.ListenableFuture;

        r5 := @parameter3: java.lang.String;

        r6 := @parameter4: java.util.concurrent.Executor;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.concurrent.CountDownLatch;

        specialinvoke $r1.<java.util.concurrent.CountDownLatch: void <init>(int)>(1);

        r0.<org.waveprotocol.box.server.waveserver.WaveletContainerImpl: java.util.concurrent.CountDownLatch loadLatch> = $r1;

        $r2 = <org.waveprotocol.box.server.waveserver.WaveletContainerImpl$State: org.waveprotocol.box.server.waveserver.WaveletContainerImpl$State LOADING>;

        r0.<org.waveprotocol.box.server.waveserver.WaveletContainerImpl: org.waveprotocol.box.server.waveserver.WaveletContainerImpl$State state> = $r2;

        r0.<org.waveprotocol.box.server.waveserver.WaveletContainerImpl: org.waveprotocol.wave.model.id.WaveletName waveletName> = r3;

        r0.<org.waveprotocol.box.server.waveserver.WaveletContainerImpl: org.waveprotocol.box.server.waveserver.WaveletNotificationSubscriber notifiee> = r4;

        if r5 == null goto label1;

        $r12 = staticinvoke <org.waveprotocol.wave.model.wave.ParticipantIdUtil: org.waveprotocol.wave.model.wave.ParticipantId makeUnsafeSharedDomainParticipantId(java.lang.String)>(r5);

        goto label2;

     label1:
        $r12 = null;

     label2:
        r0.<org.waveprotocol.box.server.waveserver.WaveletContainerImpl: org.waveprotocol.wave.model.wave.ParticipantId sharedDomainParticipantId> = $r12;

        r0.<org.waveprotocol.box.server.waveserver.WaveletContainerImpl: java.util.concurrent.Executor storageContinuationExecutor> = r6;

        $r7 = new java.util.concurrent.locks.ReentrantReadWriteLock;

        specialinvoke $r7.<java.util.concurrent.locks.ReentrantReadWriteLock: void <init>()>();

        $r8 = virtualinvoke $r7.<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock readLock()>();

        r0.<org.waveprotocol.box.server.waveserver.WaveletContainerImpl: java.util.concurrent.locks.Lock readLock> = $r8;

        $r9 = virtualinvoke $r7.<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock writeLock()>();

        r0.<org.waveprotocol.box.server.waveserver.WaveletContainerImpl: java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock writeLock> = $r9;

        $r11 = new org.waveprotocol.box.server.waveserver.WaveletContainerImpl$1;

        specialinvoke $r11.<org.waveprotocol.box.server.waveserver.WaveletContainerImpl$1: void <init>(org.waveprotocol.box.server.waveserver.WaveletContainerImpl,com.google.common.util.concurrent.ListenableFuture)>(r0, r10);

        interfaceinvoke r10.<com.google.common.util.concurrent.ListenableFuture: void addListener(java.lang.Runnable,java.util.concurrent.Executor)>($r11, r6);

        return;
    }

    protected void acquireReadLock()
    {
        java.util.concurrent.locks.Lock $r1;
        org.waveprotocol.box.server.waveserver.WaveletContainerImpl r0;

        r0 := @this: org.waveprotocol.box.server.waveserver.WaveletContainerImpl;

        $r1 = r0.<org.waveprotocol.box.server.waveserver.WaveletContainerImpl: java.util.concurrent.locks.Lock readLock>;

        interfaceinvoke $r1.<java.util.concurrent.locks.Lock: void lock()>();

        return;
    }

    protected void releaseReadLock()
    {
        java.util.concurrent.locks.Lock $r1;
        org.waveprotocol.box.server.waveserver.WaveletContainerImpl r0;

        r0 := @this: org.waveprotocol.box.server.waveserver.WaveletContainerImpl;

        $r1 = r0.<org.waveprotocol.box.server.waveserver.WaveletContainerImpl: java.util.concurrent.locks.Lock readLock>;

        interfaceinvoke $r1.<java.util.concurrent.locks.Lock: void unlock()>();

        return;
    }

    protected void acquireWriteLock()
    {
        org.waveprotocol.box.server.waveserver.WaveletContainerImpl r0;
        java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock $r1;

        r0 := @this: org.waveprotocol.box.server.waveserver.WaveletContainerImpl;

        $r1 = r0.<org.waveprotocol.box.server.waveserver.WaveletContainerImpl: java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock writeLock>;

        virtualinvoke $r1.<java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: void lock()>();

        return;
    }

    protected void releaseWriteLock()
    {
        org.waveprotocol.box.server.waveserver.WaveletContainerImpl r0;
        java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock $r1;

        r0 := @this: org.waveprotocol.box.server.waveserver.WaveletContainerImpl;

        $r1 = r0.<org.waveprotocol.box.server.waveserver.WaveletContainerImpl: java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock writeLock>;

        virtualinvoke $r1.<java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: void unlock()>();

        return;
    }

    protected void notifyOfDeltas(com.google.common.collect.ImmutableList, com.google.common.collect.ImmutableSet)
    {
        java.lang.Object[] $r7;
        java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock $r1;
        org.waveprotocol.wave.model.wave.data.ReadableWaveletData $r10;
        com.google.common.collect.ImmutableList r2;
        org.waveprotocol.box.server.waveserver.WaveletNotificationSubscriber $r9;
        int $i0, $i1;
        org.waveprotocol.wave.model.version.HashedVersion $r5, $r6;
        org.waveprotocol.box.server.waveserver.WaveletDeltaRecord $r4;
        org.waveprotocol.box.server.waveserver.WaveletContainerImpl r0;
        boolean $z0, $z1, $z2, $z3;
        com.google.common.collect.ImmutableSet r11;
        org.waveprotocol.box.server.waveserver.WaveletState $r8;
        java.lang.Object $r3;

        r0 := @this: org.waveprotocol.box.server.waveserver.WaveletContainerImpl;

        r2 := @parameter0: com.google.common.collect.ImmutableList;

        r11 := @parameter1: com.google.common.collect.ImmutableSet;

        $r1 = r0.<org.waveprotocol.box.server.waveserver.WaveletContainerImpl: java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock writeLock>;

        $z0 = virtualinvoke $r1.<java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: boolean isHeldByCurrentThread()>();

        staticinvoke <com.google.common.base.Preconditions: void checkState(boolean,java.lang.Object)>($z0, "must hold write lock");

        $z1 = virtualinvoke r2.<com.google.common.collect.ImmutableList: boolean isEmpty()>();

        if $z1 != 0 goto label1;

        $z3 = 1;

        goto label2;

     label1:
        $z3 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z3, "empty deltas");

        $i0 = virtualinvoke r2.<com.google.common.collect.ImmutableList: int size()>();

        $i1 = $i0 - 1;

        $r3 = virtualinvoke r2.<com.google.common.collect.ImmutableList: java.lang.Object get(int)>($i1);

        $r4 = (org.waveprotocol.box.server.waveserver.WaveletDeltaRecord) $r3;

        $r5 = virtualinvoke $r4.<org.waveprotocol.box.server.waveserver.WaveletDeltaRecord: org.waveprotocol.wave.model.version.HashedVersion getResultingVersion()>();

        $r6 = virtualinvoke r0.<org.waveprotocol.box.server.waveserver.WaveletContainerImpl: org.waveprotocol.wave.model.version.HashedVersion getCurrentVersion()>();

        $z2 = virtualinvoke $r5.<org.waveprotocol.wave.model.version.HashedVersion: boolean equals(java.lang.Object)>($r6);

        $r7 = newarray (java.lang.Object)[2];

        $r7[0] = $r5;

        $r7[1] = $r6;

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object[])>($z2, "cannot notify of deltas ending in %s != current version %s", $r7);

        $r9 = r0.<org.waveprotocol.box.server.waveserver.WaveletContainerImpl: org.waveprotocol.box.server.waveserver.WaveletNotificationSubscriber notifiee>;

        $r8 = r0.<org.waveprotocol.box.server.waveserver.WaveletContainerImpl: org.waveprotocol.box.server.waveserver.WaveletState waveletState>;

        $r10 = interfaceinvoke $r8.<org.waveprotocol.box.server.waveserver.WaveletState: org.waveprotocol.wave.model.wave.data.ReadableWaveletData getSnapshot()>();

        interfaceinvoke $r9.<org.waveprotocol.box.server.waveserver.WaveletNotificationSubscriber: void waveletUpdate(org.waveprotocol.wave.model.wave.data.ReadableWaveletData,com.google.common.collect.ImmutableList,com.google.common.collect.ImmutableSet)>($r10, r2, r11);

        return;
    }

    protected void notifyOfCommit(org.waveprotocol.wave.model.version.HashedVersion, com.google.common.collect.ImmutableSet)
    {
        org.waveprotocol.wave.model.id.WaveletName $r3;
        com.google.common.collect.ImmutableSet r5;
        org.waveprotocol.box.server.waveserver.WaveletNotificationSubscriber $r2;
        org.waveprotocol.wave.model.version.HashedVersion r4;
        org.waveprotocol.box.server.waveserver.WaveletContainerImpl r0;
        java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock $r1;
        boolean $z0;

        r0 := @this: org.waveprotocol.box.server.waveserver.WaveletContainerImpl;

        r4 := @parameter0: org.waveprotocol.wave.model.version.HashedVersion;

        r5 := @parameter1: com.google.common.collect.ImmutableSet;

        $r1 = r0.<org.waveprotocol.box.server.waveserver.WaveletContainerImpl: java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock writeLock>;

        $z0 = virtualinvoke $r1.<java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: boolean isHeldByCurrentThread()>();

        staticinvoke <com.google.common.base.Preconditions: void checkState(boolean,java.lang.Object)>($z0, "must hold write lock");

        $r2 = r0.<org.waveprotocol.box.server.waveserver.WaveletContainerImpl: org.waveprotocol.box.server.waveserver.WaveletNotificationSubscriber notifiee>;

        $r3 = virtualinvoke r0.<org.waveprotocol.box.server.waveserver.WaveletContainerImpl: org.waveprotocol.wave.model.id.WaveletName getWaveletName()>();

        interfaceinvoke $r2.<org.waveprotocol.box.server.waveserver.WaveletNotificationSubscriber: void waveletCommitted(org.waveprotocol.wave.model.id.WaveletName,org.waveprotocol.wave.model.version.HashedVersion,com.google.common.collect.ImmutableSet)>($r3, r4, r5);

        return;
    }

    protected void awaitLoad() throws org.waveprotocol.box.server.waveserver.WaveletStateException
    {
        java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock $r1;
        java.util.concurrent.TimeUnit $r2;
        java.util.concurrent.CountDownLatch $r3;
        java.lang.InterruptedException $r5;
        org.waveprotocol.box.server.waveserver.WaveletStateException $r4, $r7;
        java.lang.Thread $r6;
        org.waveprotocol.box.server.waveserver.WaveletContainerImpl r0;
        boolean $z0, $z1, $z2;

        r0 := @this: org.waveprotocol.box.server.waveserver.WaveletContainerImpl;

        $r1 = r0.<org.waveprotocol.box.server.waveserver.WaveletContainerImpl: java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock writeLock>;

        $z0 = virtualinvoke $r1.<java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: boolean isHeldByCurrentThread()>();

        if $z0 != 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkState(boolean,java.lang.Object)>($z2, "should not hold write lock");

     label3:
        $r3 = r0.<org.waveprotocol.box.server.waveserver.WaveletContainerImpl: java.util.concurrent.CountDownLatch loadLatch>;

        $r2 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        $z1 = virtualinvoke $r3.<java.util.concurrent.CountDownLatch: boolean await(long,java.util.concurrent.TimeUnit)>(1000L, $r2);

        if $z1 != 0 goto label4;

        $r4 = new org.waveprotocol.box.server.waveserver.WaveletStateException;

        specialinvoke $r4.<org.waveprotocol.box.server.waveserver.WaveletStateException: void <init>(java.lang.String)>("Timed out waiting for wavelet to load");

        throw $r4;

     label4:
        goto label6;

     label5:
        $r5 := @caughtexception;

        $r6 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r6.<java.lang.Thread: void interrupt()>();

        $r7 = new org.waveprotocol.box.server.waveserver.WaveletStateException;

        specialinvoke $r7.<org.waveprotocol.box.server.waveserver.WaveletStateException: void <init>(java.lang.String)>("Interrupted waiting for wavelet to load");

        throw $r7;

     label6:
        return;

        catch java.lang.InterruptedException from label3 to label4 with label5;
    }

    protected void checkStateOk() throws org.waveprotocol.box.server.waveserver.WaveletStateException
    {
        org.waveprotocol.box.server.waveserver.WaveletContainerImpl$State $r1, $r2, $r6;
        org.waveprotocol.box.server.waveserver.WaveletStateException $r3;
        java.lang.StringBuilder $r4, $r5, $r7;
        java.lang.String $r8;
        org.waveprotocol.box.server.waveserver.WaveletContainerImpl r0;

        r0 := @this: org.waveprotocol.box.server.waveserver.WaveletContainerImpl;

        $r2 = r0.<org.waveprotocol.box.server.waveserver.WaveletContainerImpl: org.waveprotocol.box.server.waveserver.WaveletContainerImpl$State state>;

        $r1 = <org.waveprotocol.box.server.waveserver.WaveletContainerImpl$State: org.waveprotocol.box.server.waveserver.WaveletContainerImpl$State OK>;

        if $r2 == $r1 goto label1;

        $r3 = new org.waveprotocol.box.server.waveserver.WaveletStateException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The wavelet is in an unusable state: ");

        $r6 = r0.<org.waveprotocol.box.server.waveserver.WaveletContainerImpl: org.waveprotocol.box.server.waveserver.WaveletContainerImpl$State state>;

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<org.waveprotocol.box.server.waveserver.WaveletStateException: void <init>(java.lang.String)>($r8);

        throw $r3;

     label1:
        return;
    }

    protected void markStateCorrupted()
    {
        org.waveprotocol.box.server.waveserver.WaveletContainerImpl$State $r2;
        org.waveprotocol.box.server.waveserver.WaveletContainerImpl r0;
        java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock $r1;
        boolean $z0;

        r0 := @this: org.waveprotocol.box.server.waveserver.WaveletContainerImpl;

        $r1 = r0.<org.waveprotocol.box.server.waveserver.WaveletContainerImpl: java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock writeLock>;

        $z0 = virtualinvoke $r1.<java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: boolean isHeldByCurrentThread()>();

        staticinvoke <com.google.common.base.Preconditions: void checkState(boolean,java.lang.Object)>($z0, "must hold write lock");

        $r2 = <org.waveprotocol.box.server.waveserver.WaveletContainerImpl$State: org.waveprotocol.box.server.waveserver.WaveletContainerImpl$State CORRUPTED>;

        r0.<org.waveprotocol.box.server.waveserver.WaveletContainerImpl: org.waveprotocol.box.server.waveserver.WaveletContainerImpl$State state> = $r2;

        return;
    }

    protected void persist(org.waveprotocol.wave.model.version.HashedVersion, com.google.common.collect.ImmutableSet)
    {
        com.google.common.collect.ImmutableSet r6;
        com.google.common.util.concurrent.ListenableFuture $r4;
        java.util.concurrent.Executor $r7;
        org.waveprotocol.box.server.waveserver.WaveletContainerImpl$2 $r5;
        java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock $r1;
        org.waveprotocol.box.server.waveserver.WaveletState $r3;
        org.waveprotocol.wave.model.version.HashedVersion r2;
        org.waveprotocol.box.server.waveserver.WaveletContainerImpl r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.box.server.waveserver.WaveletContainerImpl;

        r2 := @parameter0: org.waveprotocol.wave.model.version.HashedVersion;

        r6 := @parameter1: com.google.common.collect.ImmutableSet;

        $r1 = r0.<org.waveprotocol.box.server.waveserver.WaveletContainerImpl: java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock writeLock>;

        $z0 = virtualinvoke $r1.<java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: boolean isHeldByCurrentThread()>();

        staticinvoke <com.google.common.base.Preconditions: void checkState(boolean,java.lang.Object)>($z0, "must hold write lock");

        $r3 = r0.<org.waveprotocol.box.server.waveserver.WaveletContainerImpl: org.waveprotocol.box.server.waveserver.WaveletState waveletState>;

        $r4 = interfaceinvoke $r3.<org.waveprotocol.box.server.waveserver.WaveletState: com.google.common.util.concurrent.ListenableFuture persist(org.waveprotocol.wave.model.version.HashedVersion)>(r2);

        $r5 = new org.waveprotocol.box.server.waveserver.WaveletContainerImpl$2;

        specialinvoke $r5.<org.waveprotocol.box.server.waveserver.WaveletContainerImpl$2: void <init>(org.waveprotocol.box.server.waveserver.WaveletContainerImpl,com.google.common.util.concurrent.ListenableFuture,org.waveprotocol.wave.model.version.HashedVersion,com.google.common.collect.ImmutableSet)>(r0, $r4, r2, r6);

        $r7 = r0.<org.waveprotocol.box.server.waveserver.WaveletContainerImpl: java.util.concurrent.Executor storageContinuationExecutor>;

        interfaceinvoke $r4.<com.google.common.util.concurrent.ListenableFuture: void addListener(java.lang.Runnable,java.util.concurrent.Executor)>($r5, $r7);

        return;
    }

    public org.waveprotocol.wave.model.id.WaveletName getWaveletName()
    {
        org.waveprotocol.wave.model.id.WaveletName $r1;
        org.waveprotocol.box.server.waveserver.WaveletContainerImpl r0;

        r0 := @this: org.waveprotocol.box.server.waveserver.WaveletContainerImpl;

        $r1 = r0.<org.waveprotocol.box.server.waveserver.WaveletContainerImpl: org.waveprotocol.wave.model.id.WaveletName waveletName>;

        return $r1;
    }

    public boolean checkAccessPermission(org.waveprotocol.wave.model.wave.ParticipantId) throws org.waveprotocol.box.server.waveserver.WaveletStateException
    {
        java.lang.Throwable $r5;
        org.waveprotocol.wave.model.wave.data.ReadableWaveletData $r2;
        org.waveprotocol.wave.model.wave.ParticipantId r3, $r4;
        org.waveprotocol.box.server.waveserver.WaveletContainerImpl r0;
        org.waveprotocol.box.server.waveserver.WaveletState $r1;
        boolean $z0;

        r0 := @this: org.waveprotocol.box.server.waveserver.WaveletContainerImpl;

        r3 := @parameter0: org.waveprotocol.wave.model.wave.ParticipantId;

        virtualinvoke r0.<org.waveprotocol.box.server.waveserver.WaveletContainerImpl: void awaitLoad()>();

        virtualinvoke r0.<org.waveprotocol.box.server.waveserver.WaveletContainerImpl: void acquireReadLock()>();

     label1:
        virtualinvoke r0.<org.waveprotocol.box.server.waveserver.WaveletContainerImpl: void checkStateOk()>();

        $r1 = r0.<org.waveprotocol.box.server.waveserver.WaveletContainerImpl: org.waveprotocol.box.server.waveserver.WaveletState waveletState>;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.box.server.waveserver.WaveletState: org.waveprotocol.wave.model.wave.data.ReadableWaveletData getSnapshot()>();

        $r4 = r0.<org.waveprotocol.box.server.waveserver.WaveletContainerImpl: org.waveprotocol.wave.model.wave.ParticipantId sharedDomainParticipantId>;

        $z0 = staticinvoke <org.waveprotocol.box.server.util.WaveletDataUtil: boolean checkAccessPermission(org.waveprotocol.wave.model.wave.data.ReadableWaveletData,org.waveprotocol.wave.model.wave.ParticipantId,org.waveprotocol.wave.model.wave.ParticipantId)>($r2, r3, $r4);

     label2:
        virtualinvoke r0.<org.waveprotocol.box.server.waveserver.WaveletContainerImpl: void releaseReadLock()>();

        return $z0;

     label3:
        $r5 := @caughtexception;

     label4:
        virtualinvoke r0.<org.waveprotocol.box.server.waveserver.WaveletContainerImpl: void releaseReadLock()>();

        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public org.waveprotocol.wave.model.version.HashedVersion getLastCommittedVersion() throws org.waveprotocol.box.server.waveserver.WaveletStateException
    {
        java.lang.Throwable $r3;
        org.waveprotocol.wave.model.version.HashedVersion $r2;
        org.waveprotocol.box.server.waveserver.WaveletContainerImpl r0;
        org.waveprotocol.box.server.waveserver.WaveletState $r1;

        r0 := @this: org.waveprotocol.box.server.waveserver.WaveletContainerImpl;

        virtualinvoke r0.<org.waveprotocol.box.server.waveserver.WaveletContainerImpl: void awaitLoad()>();

        virtualinvoke r0.<org.waveprotocol.box.server.waveserver.WaveletContainerImpl: void acquireReadLock()>();

     label1:
        virtualinvoke r0.<org.waveprotocol.box.server.waveserver.WaveletContainerImpl: void checkStateOk()>();

        $r1 = r0.<org.waveprotocol.box.server.waveserver.WaveletContainerImpl: org.waveprotocol.box.server.waveserver.WaveletState waveletState>;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.box.server.waveserver.WaveletState: org.waveprotocol.wave.model.version.HashedVersion getLastPersistedVersion()>();

     label2:
        virtualinvoke r0.<org.waveprotocol.box.server.waveserver.WaveletContainerImpl: void releaseReadLock()>();

        return $r2;

     label3:
        $r3 := @caughtexception;

     label4:
        virtualinvoke r0.<org.waveprotocol.box.server.waveserver.WaveletContainerImpl: void releaseReadLock()>();

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public org.waveprotocol.wave.model.wave.data.ObservableWaveletData copyWaveletData() throws org.waveprotocol.box.server.waveserver.WaveletStateException
    {
        java.lang.Throwable $r4;
        org.waveprotocol.wave.model.wave.data.ReadableWaveletData $r2;
        org.waveprotocol.wave.model.wave.data.ObservableWaveletData $r3;
        org.waveprotocol.box.server.waveserver.WaveletContainerImpl r0;
        org.waveprotocol.box.server.waveserver.WaveletState $r1;

        r0 := @this: org.waveprotocol.box.server.waveserver.WaveletContainerImpl;

        virtualinvoke r0.<org.waveprotocol.box.server.waveserver.WaveletContainerImpl: void awaitLoad()>();

        virtualinvoke r0.<org.waveprotocol.box.server.waveserver.WaveletContainerImpl: void acquireReadLock()>();

     label1:
        virtualinvoke r0.<org.waveprotocol.box.server.waveserver.WaveletContainerImpl: void checkStateOk()>();

        $r1 = r0.<org.waveprotocol.box.server.waveserver.WaveletContainerImpl: org.waveprotocol.box.server.waveserver.WaveletState waveletState>;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.box.server.waveserver.WaveletState: org.waveprotocol.wave.model.wave.data.ReadableWaveletData getSnapshot()>();

        $r3 = staticinvoke <org.waveprotocol.box.server.util.WaveletDataUtil: org.waveprotocol.wave.model.wave.data.ObservableWaveletData copyWavelet(org.waveprotocol.wave.model.wave.data.ReadableWaveletData)>($r2);

     label2:
        virtualinvoke r0.<org.waveprotocol.box.server.waveserver.WaveletContainerImpl: void releaseReadLock()>();

        return $r3;

     label3:
        $r4 := @caughtexception;

     label4:
        virtualinvoke r0.<org.waveprotocol.box.server.waveserver.WaveletContainerImpl: void releaseReadLock()>();

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public org.waveprotocol.box.server.frontend.CommittedWaveletSnapshot getSnapshot() throws org.waveprotocol.box.server.waveserver.WaveletStateException
    {
        java.lang.Throwable $r6;
        org.waveprotocol.box.server.frontend.CommittedWaveletSnapshot $r1;
        org.waveprotocol.wave.model.wave.data.ReadableWaveletData $r3;
        org.waveprotocol.wave.model.version.HashedVersion $r5;
        org.waveprotocol.box.server.waveserver.WaveletContainerImpl r0;
        org.waveprotocol.box.server.waveserver.WaveletState $r2, $r4;

        r0 := @this: org.waveprotocol.box.server.waveserver.WaveletContainerImpl;

        virtualinvoke r0.<org.waveprotocol.box.server.waveserver.WaveletContainerImpl: void awaitLoad()>();

        virtualinvoke r0.<org.waveprotocol.box.server.waveserver.WaveletContainerImpl: void acquireReadLock()>();

     label1:
        virtualinvoke r0.<org.waveprotocol.box.server.waveserver.WaveletContainerImpl: void checkStateOk()>();

        $r1 = new org.waveprotocol.box.server.frontend.CommittedWaveletSnapshot;

        $r2 = r0.<org.waveprotocol.box.server.waveserver.WaveletContainerImpl: org.waveprotocol.box.server.waveserver.WaveletState waveletState>;

        $r3 = interfaceinvoke $r2.<org.waveprotocol.box.server.waveserver.WaveletState: org.waveprotocol.wave.model.wave.data.ReadableWaveletData getSnapshot()>();

        $r4 = r0.<org.waveprotocol.box.server.waveserver.WaveletContainerImpl: org.waveprotocol.box.server.waveserver.WaveletState waveletState>;

        $r5 = interfaceinvoke $r4.<org.waveprotocol.box.server.waveserver.WaveletState: org.waveprotocol.wave.model.version.HashedVersion getLastPersistedVersion()>();

        specialinvoke $r1.<org.waveprotocol.box.server.frontend.CommittedWaveletSnapshot: void <init>(org.waveprotocol.wave.model.wave.data.ReadableWaveletData,org.waveprotocol.wave.model.version.HashedVersion)>($r3, $r5);

     label2:
        virtualinvoke r0.<org.waveprotocol.box.server.waveserver.WaveletContainerImpl: void releaseReadLock()>();

        return $r1;

     label3:
        $r6 := @caughtexception;

     label4:
        virtualinvoke r0.<org.waveprotocol.box.server.waveserver.WaveletContainerImpl: void releaseReadLock()>();

        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public java.lang.Object applyFunction(com.google.common.base.Function) throws org.waveprotocol.box.server.waveserver.WaveletStateException
    {
        java.lang.Throwable $r5;
        org.waveprotocol.wave.model.wave.data.ReadableWaveletData $r3;
        com.google.common.base.Function r1;
        java.lang.Object $r4;
        org.waveprotocol.box.server.waveserver.WaveletContainerImpl r0;
        org.waveprotocol.box.server.waveserver.WaveletState $r2;

        r0 := @this: org.waveprotocol.box.server.waveserver.WaveletContainerImpl;

        r1 := @parameter0: com.google.common.base.Function;

        virtualinvoke r0.<org.waveprotocol.box.server.waveserver.WaveletContainerImpl: void awaitLoad()>();

        virtualinvoke r0.<org.waveprotocol.box.server.waveserver.WaveletContainerImpl: void acquireReadLock()>();

     label1:
        virtualinvoke r0.<org.waveprotocol.box.server.waveserver.WaveletContainerImpl: void checkStateOk()>();

        $r2 = r0.<org.waveprotocol.box.server.waveserver.WaveletContainerImpl: org.waveprotocol.box.server.waveserver.WaveletState waveletState>;

        $r3 = interfaceinvoke $r2.<org.waveprotocol.box.server.waveserver.WaveletState: org.waveprotocol.wave.model.wave.data.ReadableWaveletData getSnapshot()>();

        $r4 = interfaceinvoke r1.<com.google.common.base.Function: java.lang.Object apply(java.lang.Object)>($r3);

     label2:
        virtualinvoke r0.<org.waveprotocol.box.server.waveserver.WaveletContainerImpl: void releaseReadLock()>();

        return $r4;

     label3:
        $r5 := @caughtexception;

     label4:
        virtualinvoke r0.<org.waveprotocol.box.server.waveserver.WaveletContainerImpl: void releaseReadLock()>();

        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    protected org.waveprotocol.wave.model.operation.wave.WaveletDelta maybeTransformSubmittedDelta(org.waveprotocol.wave.model.operation.wave.WaveletDelta) throws org.waveprotocol.box.server.waveserver.InvalidHashException, org.waveprotocol.wave.model.operation.OperationException
    {
        long $l0, $l1;
        byte $b2;
        org.waveprotocol.wave.model.version.HashedVersion $r1, $r3;
        org.waveprotocol.wave.util.logging.Log $r6;
        java.lang.String $r12;
        org.waveprotocol.box.server.waveserver.WaveletContainerImpl r2;
        boolean $z0;
        org.waveprotocol.wave.model.operation.wave.WaveletDelta r0, $r4;
        java.lang.StringBuilder $r5, $r7, $r8, $r9, $r10, $r11;
        org.waveprotocol.box.server.waveserver.InvalidHashException $r13;

        r2 := @this: org.waveprotocol.box.server.waveserver.WaveletContainerImpl;

        r0 := @parameter0: org.waveprotocol.wave.model.operation.wave.WaveletDelta;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.operation.wave.WaveletDelta: org.waveprotocol.wave.model.version.HashedVersion getTargetVersion()>();

        $r3 = virtualinvoke r2.<org.waveprotocol.box.server.waveserver.WaveletContainerImpl: org.waveprotocol.wave.model.version.HashedVersion getCurrentVersion()>();

        $z0 = virtualinvoke $r1.<org.waveprotocol.wave.model.version.HashedVersion: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label1;

        return r0;

     label1:
        $l0 = virtualinvoke $r1.<org.waveprotocol.wave.model.version.HashedVersion: long getVersion()>();

        $l1 = virtualinvoke $r3.<org.waveprotocol.wave.model.version.HashedVersion: long getVersion()>();

        $b2 = $l0 cmp $l1;

        if $b2 != 0 goto label2;

        $r6 = <org.waveprotocol.box.server.waveserver.WaveletContainerImpl: org.waveprotocol.wave.util.logging.Log LOG>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Mismatched hash, expected ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") but delta targets (");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r6.<org.waveprotocol.wave.util.logging.Log: void warning(java.lang.String)>($r12);

        $r13 = new org.waveprotocol.box.server.waveserver.InvalidHashException;

        specialinvoke $r13.<org.waveprotocol.box.server.waveserver.InvalidHashException: void <init>(org.waveprotocol.wave.model.version.HashedVersion,org.waveprotocol.wave.model.version.HashedVersion)>($r3, $r1);

        throw $r13;

     label2:
        $r4 = specialinvoke r2.<org.waveprotocol.box.server.waveserver.WaveletContainerImpl: org.waveprotocol.wave.model.operation.wave.WaveletDelta transformSubmittedDelta(org.waveprotocol.wave.model.operation.wave.WaveletDelta)>(r0);

        return $r4;
    }

    private org.waveprotocol.wave.model.operation.wave.WaveletDelta transformSubmittedDelta(org.waveprotocol.wave.model.operation.wave.WaveletDelta) throws org.waveprotocol.wave.model.operation.OperationException, org.waveprotocol.box.server.waveserver.InvalidHashException
    {
        org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta r11;
        org.waveprotocol.wave.model.wave.ParticipantId $r7, $r12;
        org.waveprotocol.wave.util.logging.Log $r16;
        org.waveprotocol.box.server.waveserver.WaveletContainerImpl r2;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        java.util.List r22;
        java.lang.StringBuilder $r15, $r17, $r18;
        java.lang.Object[] $r6;
        org.waveprotocol.box.common.DeltaSequence $r5;
        org.waveprotocol.wave.model.version.HashedVersion $r1, $r3, r21;
        java.lang.String $r19;
        java.util.Iterator $r8;
        org.waveprotocol.wave.model.operation.wave.WaveletDelta r0, $r9, $r13, $r14;
        org.waveprotocol.box.server.waveserver.WaveletState $r4;
        java.lang.Object $r10;
        org.waveprotocol.box.server.waveserver.InvalidHashException $r20;

        r2 := @this: org.waveprotocol.box.server.waveserver.WaveletContainerImpl;

        r0 := @parameter0: org.waveprotocol.wave.model.operation.wave.WaveletDelta;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.operation.wave.WaveletDelta: org.waveprotocol.wave.model.version.HashedVersion getTargetVersion()>();

        r21 = $r1;

        $r3 = virtualinvoke r2.<org.waveprotocol.box.server.waveserver.WaveletContainerImpl: org.waveprotocol.wave.model.version.HashedVersion getCurrentVersion()>();

        $z0 = virtualinvoke $r1.<org.waveprotocol.wave.model.version.HashedVersion: boolean equals(java.lang.Object)>($r3);

        if $z0 != 0 goto label1;

        $z6 = 1;

        goto label2;

     label1:
        $z6 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean)>($z6);

        $r4 = r2.<org.waveprotocol.box.server.waveserver.WaveletContainerImpl: org.waveprotocol.box.server.waveserver.WaveletState waveletState>;

        $r5 = interfaceinvoke $r4.<org.waveprotocol.box.server.waveserver.WaveletState: org.waveprotocol.box.common.DeltaSequence getTransformedDeltaHistory(org.waveprotocol.wave.model.version.HashedVersion,org.waveprotocol.wave.model.version.HashedVersion)>($r1, $r3);

        if $r5 != null goto label3;

        $r16 = <org.waveprotocol.box.server.waveserver.WaveletContainerImpl: org.waveprotocol.wave.util.logging.Log LOG>;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attempt to apply delta at unknown hashed version ");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r16.<org.waveprotocol.wave.util.logging.Log: void warning(java.lang.String)>($r19);

        $r20 = new org.waveprotocol.box.server.waveserver.InvalidHashException;

        specialinvoke $r20.<org.waveprotocol.box.server.waveserver.InvalidHashException: void <init>(org.waveprotocol.wave.model.version.HashedVersion,org.waveprotocol.wave.model.version.HashedVersion)>($r3, $r1);

        throw $r20;

     label3:
        $z1 = virtualinvoke $r5.<org.waveprotocol.box.common.DeltaSequence: boolean isEmpty()>();

        if $z1 != 0 goto label4;

        $z7 = 1;

        goto label5;

     label4:
        $z7 = 0;

     label5:
        $r6 = newarray (java.lang.Object)[2];

        $r6[0] = $r1;

        $r6[1] = $r3;

        staticinvoke <com.google.common.base.Preconditions: void checkState(boolean,java.lang.String,java.lang.Object[])>($z7, "No deltas between valid versions %s and %s", $r6);

        $r7 = virtualinvoke r0.<org.waveprotocol.wave.model.operation.wave.WaveletDelta: org.waveprotocol.wave.model.wave.ParticipantId getAuthor()>();

        r22 = staticinvoke <com.google.common.collect.Lists: java.util.ArrayList newArrayList(java.lang.Iterable)>(r0);

        $r8 = virtualinvoke $r5.<org.waveprotocol.box.common.DeltaSequence: java.util.Iterator iterator()>();

     label6:
        $z8 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z8 == 0 goto label9;

        $r10 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        r11 = (org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta) $r10;

        $z3 = interfaceinvoke r22.<java.util.List: boolean isEmpty()>();

        if $z3 == 0 goto label7;

        $r14 = new org.waveprotocol.wave.model.operation.wave.WaveletDelta;

        specialinvoke $r14.<org.waveprotocol.wave.model.operation.wave.WaveletDelta: void <init>(org.waveprotocol.wave.model.wave.ParticipantId,org.waveprotocol.wave.model.version.HashedVersion,java.lang.Iterable)>($r7, r21, r22);

        return $r14;

     label7:
        $r12 = virtualinvoke r11.<org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta: org.waveprotocol.wave.model.wave.ParticipantId getAuthor()>();

        $z4 = virtualinvoke $r7.<org.waveprotocol.wave.model.wave.ParticipantId: boolean equals(java.lang.Object)>($r12);

        if $z4 == 0 goto label8;

        $z5 = virtualinvoke r22.<java.lang.Object: boolean equals(java.lang.Object)>(r11);

        if $z5 == 0 goto label8;

        $r13 = new org.waveprotocol.wave.model.operation.wave.WaveletDelta;

        specialinvoke $r13.<org.waveprotocol.wave.model.operation.wave.WaveletDelta: void <init>(org.waveprotocol.wave.model.wave.ParticipantId,org.waveprotocol.wave.model.version.HashedVersion,java.lang.Iterable)>($r7, r21, r22);

        return $r13;

     label8:
        r22 = specialinvoke r2.<org.waveprotocol.box.server.waveserver.WaveletContainerImpl: java.util.List transformOps(java.util.List,java.util.List)>(r22, r11);

        r21 = virtualinvoke r11.<org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta: org.waveprotocol.wave.model.version.HashedVersion getResultingVersion()>();

        goto label6;

     label9:
        $z2 = virtualinvoke r21.<org.waveprotocol.wave.model.version.HashedVersion: boolean equals(java.lang.Object)>($r3);

        staticinvoke <com.google.common.base.Preconditions: void checkState(boolean)>($z2);

        $r9 = new org.waveprotocol.wave.model.operation.wave.WaveletDelta;

        specialinvoke $r9.<org.waveprotocol.wave.model.operation.wave.WaveletDelta: void <init>(org.waveprotocol.wave.model.wave.ParticipantId,org.waveprotocol.wave.model.version.HashedVersion,java.lang.Iterable)>($r7, r21, r22);

        return $r9;
    }

    private java.util.List transformOps(java.util.List, java.util.List) throws org.waveprotocol.wave.model.operation.OperationException
    {
        org.waveprotocol.wave.model.operation.wave.WaveletOperation r7, r13;
        org.waveprotocol.wave.model.operation.TransformException $r10;
        java.util.ArrayList $r0;
        org.waveprotocol.wave.model.operation.OperationException $r11;
        org.waveprotocol.box.server.waveserver.WaveletContainerImpl r12;
        boolean $z0, $z1;
        java.util.Iterator $r2, $r5;
        org.waveprotocol.wave.model.operation.OperationPair $r8;
        java.util.List r1, r4;
        java.lang.Object $r3, $r6, $r9;

        r12 := @this: org.waveprotocol.box.server.waveserver.WaveletContainerImpl;

        r1 := @parameter0: java.util.List;

        r4 := @parameter1: java.util.List;

        $r0 = staticinvoke <com.google.common.collect.Lists: java.util.ArrayList newArrayList()>();

        $r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label8;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r13 = (org.waveprotocol.wave.model.operation.wave.WaveletOperation) $r3;

        $r5 = interfaceinvoke r4.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label7;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (org.waveprotocol.wave.model.operation.wave.WaveletOperation) $r6;

     label3:
        $r8 = staticinvoke <org.waveprotocol.wave.model.operation.wave.Transform: org.waveprotocol.wave.model.operation.OperationPair transform(org.waveprotocol.wave.model.operation.wave.WaveletOperation,org.waveprotocol.wave.model.operation.wave.WaveletOperation)>(r13, r7);

     label4:
        goto label6;

     label5:
        $r10 := @caughtexception;

        $r11 = new org.waveprotocol.wave.model.operation.OperationException;

        specialinvoke $r11.<org.waveprotocol.wave.model.operation.OperationException: void <init>(java.lang.Throwable)>($r10);

        throw $r11;

     label6:
        $r9 = virtualinvoke $r8.<org.waveprotocol.wave.model.operation.OperationPair: java.lang.Object clientOp()>();

        r13 = (org.waveprotocol.wave.model.operation.wave.WaveletOperation) $r9;

        goto label2;

     label7:
        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(r13);

        goto label1;

     label8:
        return $r0;

        catch org.waveprotocol.wave.model.operation.TransformException from label3 to label4 with label5;
    }

    protected org.waveprotocol.box.server.waveserver.WaveletDeltaRecord applyDelta(org.waveprotocol.box.server.waveserver.ByteStringMessage, org.waveprotocol.wave.model.operation.wave.WaveletDelta) throws com.google.protobuf.InvalidProtocolBufferException, org.waveprotocol.wave.model.operation.OperationException
    {
        org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta $r2;
        org.waveprotocol.wave.model.operation.wave.WaveletDelta r1;
        org.waveprotocol.box.server.waveserver.ByteStringMessage r0;
        org.waveprotocol.box.server.waveserver.WaveletState $r4;
        org.waveprotocol.wave.model.version.HashedVersion $r5, $r7;
        org.waveprotocol.box.server.waveserver.WaveletDeltaRecord $r6;
        org.waveprotocol.box.server.waveserver.WaveletContainerImpl r3;

        r3 := @this: org.waveprotocol.box.server.waveserver.WaveletContainerImpl;

        r0 := @parameter0: org.waveprotocol.box.server.waveserver.ByteStringMessage;

        r1 := @parameter1: org.waveprotocol.wave.model.operation.wave.WaveletDelta;

        $r2 = staticinvoke <org.waveprotocol.box.server.waveserver.AppliedDeltaUtil: org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta buildTransformedDelta(org.waveprotocol.box.server.waveserver.ByteStringMessage,org.waveprotocol.wave.model.operation.wave.WaveletDelta)>(r0, r1);

        $r4 = r3.<org.waveprotocol.box.server.waveserver.WaveletContainerImpl: org.waveprotocol.box.server.waveserver.WaveletState waveletState>;

        $r5 = virtualinvoke r1.<org.waveprotocol.wave.model.operation.wave.WaveletDelta: org.waveprotocol.wave.model.version.HashedVersion getTargetVersion()>();

        interfaceinvoke $r4.<org.waveprotocol.box.server.waveserver.WaveletState: void appendDelta(org.waveprotocol.wave.model.version.HashedVersion,org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta,org.waveprotocol.box.server.waveserver.ByteStringMessage)>($r5, $r2, r0);

        $r6 = new org.waveprotocol.box.server.waveserver.WaveletDeltaRecord;

        $r7 = virtualinvoke r1.<org.waveprotocol.wave.model.operation.wave.WaveletDelta: org.waveprotocol.wave.model.version.HashedVersion getTargetVersion()>();

        specialinvoke $r6.<org.waveprotocol.box.server.waveserver.WaveletDeltaRecord: void <init>(org.waveprotocol.wave.model.version.HashedVersion,org.waveprotocol.box.server.waveserver.ByteStringMessage,org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta)>($r7, r0, $r2);

        return $r6;
    }

    protected org.waveprotocol.box.server.waveserver.ByteStringMessage lookupAppliedDelta(org.waveprotocol.wave.model.version.HashedVersion)
    {
        org.waveprotocol.wave.model.version.HashedVersion r1;
        org.waveprotocol.box.server.waveserver.ByteStringMessage $r3;
        org.waveprotocol.box.server.waveserver.WaveletContainerImpl r0;
        org.waveprotocol.box.server.waveserver.WaveletState $r2;

        r0 := @this: org.waveprotocol.box.server.waveserver.WaveletContainerImpl;

        r1 := @parameter0: org.waveprotocol.wave.model.version.HashedVersion;

        $r2 = r0.<org.waveprotocol.box.server.waveserver.WaveletContainerImpl: org.waveprotocol.box.server.waveserver.WaveletState waveletState>;

        $r3 = interfaceinvoke $r2.<org.waveprotocol.box.server.waveserver.WaveletState: org.waveprotocol.box.server.waveserver.ByteStringMessage getAppliedDelta(org.waveprotocol.wave.model.version.HashedVersion)>(r1);

        return $r3;
    }

    protected org.waveprotocol.box.server.waveserver.ByteStringMessage lookupAppliedDeltaByEndVersion(org.waveprotocol.wave.model.version.HashedVersion)
    {
        org.waveprotocol.wave.model.version.HashedVersion r1;
        org.waveprotocol.box.server.waveserver.ByteStringMessage $r3;
        org.waveprotocol.box.server.waveserver.WaveletContainerImpl r0;
        org.waveprotocol.box.server.waveserver.WaveletState $r2;

        r0 := @this: org.waveprotocol.box.server.waveserver.WaveletContainerImpl;

        r1 := @parameter0: org.waveprotocol.wave.model.version.HashedVersion;

        $r2 = r0.<org.waveprotocol.box.server.waveserver.WaveletContainerImpl: org.waveprotocol.box.server.waveserver.WaveletState waveletState>;

        $r3 = interfaceinvoke $r2.<org.waveprotocol.box.server.waveserver.WaveletState: org.waveprotocol.box.server.waveserver.ByteStringMessage getAppliedDeltaByEndVersion(org.waveprotocol.wave.model.version.HashedVersion)>(r1);

        return $r3;
    }

    protected org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta lookupTransformedDelta(org.waveprotocol.wave.model.version.HashedVersion)
    {
        org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta $r3;
        org.waveprotocol.wave.model.version.HashedVersion r1;
        org.waveprotocol.box.server.waveserver.WaveletContainerImpl r0;
        org.waveprotocol.box.server.waveserver.WaveletState $r2;

        r0 := @this: org.waveprotocol.box.server.waveserver.WaveletContainerImpl;

        r1 := @parameter0: org.waveprotocol.wave.model.version.HashedVersion;

        $r2 = r0.<org.waveprotocol.box.server.waveserver.WaveletContainerImpl: org.waveprotocol.box.server.waveserver.WaveletState waveletState>;

        $r3 = interfaceinvoke $r2.<org.waveprotocol.box.server.waveserver.WaveletState: org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta getTransformedDelta(org.waveprotocol.wave.model.version.HashedVersion)>(r1);

        return $r3;
    }

    private void checkVersionIsDeltaBoundary(org.waveprotocol.wave.model.version.HashedVersion, java.lang.String) throws org.waveprotocol.box.server.waveserver.AccessControlException
    {
        long $l0, $l1;
        org.waveprotocol.wave.model.version.HashedVersion r1, $r3;
        org.waveprotocol.wave.util.logging.Log $r5;
        java.lang.String r7, $r13, $r20;
        org.waveprotocol.box.server.waveserver.WaveletContainerImpl r0;
        boolean $z0;
        org.waveprotocol.box.server.waveserver.AccessControlException $r14;
        org.waveprotocol.box.server.waveserver.WaveletState $r2;
        java.lang.StringBuilder $r4, $r6, $r8, $r9, $r10, $r11, $r12, $r15, $r16, $r17, $r18, $r19;

        r0 := @this: org.waveprotocol.box.server.waveserver.WaveletContainerImpl;

        r1 := @parameter0: org.waveprotocol.wave.model.version.HashedVersion;

        r7 := @parameter1: java.lang.String;

        $r2 = r0.<org.waveprotocol.box.server.waveserver.WaveletContainerImpl: org.waveprotocol.box.server.waveserver.WaveletState waveletState>;

        $l0 = virtualinvoke r1.<org.waveprotocol.wave.model.version.HashedVersion: long getVersion()>();

        $r3 = interfaceinvoke $r2.<org.waveprotocol.box.server.waveserver.WaveletState: org.waveprotocol.wave.model.version.HashedVersion getHashedVersion(long)>($l0);

        $z0 = virtualinvoke r1.<org.waveprotocol.wave.model.version.HashedVersion: boolean equals(java.lang.Object)>($r3);

        if $z0 != 0 goto label1;

        $r5 = <org.waveprotocol.box.server.waveserver.WaveletContainerImpl: org.waveprotocol.wave.util.logging.Log LOG>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unrecognized ");

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" at version ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", actual ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r5.<org.waveprotocol.wave.util.logging.Log: void info(java.lang.String)>($r13);

        $r14 = new org.waveprotocol.box.server.waveserver.AccessControlException;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unrecognized ");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" at version ");

        $l1 = virtualinvoke r1.<org.waveprotocol.wave.model.version.HashedVersion: long getVersion()>();

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l1);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<org.waveprotocol.box.server.waveserver.AccessControlException: void <init>(java.lang.String)>($r20);

        throw $r14;

     label1:
        return;
    }

    public java.util.Collection requestHistory(org.waveprotocol.wave.model.version.HashedVersion, org.waveprotocol.wave.model.version.HashedVersion) throws org.waveprotocol.box.server.waveserver.AccessControlException, org.waveprotocol.box.server.waveserver.WaveletStateException
    {
        java.lang.Throwable $r5;
        java.util.Collection $r4;
        org.waveprotocol.wave.model.version.HashedVersion r1, r2;
        org.waveprotocol.box.server.waveserver.WaveletContainerImpl r0;
        org.waveprotocol.box.server.waveserver.WaveletState $r3;

        r0 := @this: org.waveprotocol.box.server.waveserver.WaveletContainerImpl;

        r1 := @parameter0: org.waveprotocol.wave.model.version.HashedVersion;

        r2 := @parameter1: org.waveprotocol.wave.model.version.HashedVersion;

        virtualinvoke r0.<org.waveprotocol.box.server.waveserver.WaveletContainerImpl: void acquireReadLock()>();

     label1:
        virtualinvoke r0.<org.waveprotocol.box.server.waveserver.WaveletContainerImpl: void checkStateOk()>();

        specialinvoke r0.<org.waveprotocol.box.server.waveserver.WaveletContainerImpl: void checkVersionIsDeltaBoundary(org.waveprotocol.wave.model.version.HashedVersion,java.lang.String)>(r1, "start version");

        specialinvoke r0.<org.waveprotocol.box.server.waveserver.WaveletContainerImpl: void checkVersionIsDeltaBoundary(org.waveprotocol.wave.model.version.HashedVersion,java.lang.String)>(r2, "end version");

        $r3 = r0.<org.waveprotocol.box.server.waveserver.WaveletContainerImpl: org.waveprotocol.box.server.waveserver.WaveletState waveletState>;

        $r4 = interfaceinvoke $r3.<org.waveprotocol.box.server.waveserver.WaveletState: java.util.Collection getAppliedDeltaHistory(org.waveprotocol.wave.model.version.HashedVersion,org.waveprotocol.wave.model.version.HashedVersion)>(r1, r2);

     label2:
        virtualinvoke r0.<org.waveprotocol.box.server.waveserver.WaveletContainerImpl: void releaseReadLock()>();

        return $r4;

     label3:
        $r5 := @caughtexception;

     label4:
        virtualinvoke r0.<org.waveprotocol.box.server.waveserver.WaveletContainerImpl: void releaseReadLock()>();

        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public java.util.Collection requestTransformedHistory(org.waveprotocol.wave.model.version.HashedVersion, org.waveprotocol.wave.model.version.HashedVersion) throws org.waveprotocol.box.server.waveserver.AccessControlException, org.waveprotocol.box.server.waveserver.WaveletStateException
    {
        java.lang.Throwable $r5;
        org.waveprotocol.wave.model.version.HashedVersion r1, r2;
        org.waveprotocol.box.server.waveserver.WaveletContainerImpl r0;
        org.waveprotocol.box.server.waveserver.WaveletState $r3;
        org.waveprotocol.box.common.DeltaSequence $r4;

        r0 := @this: org.waveprotocol.box.server.waveserver.WaveletContainerImpl;

        r1 := @parameter0: org.waveprotocol.wave.model.version.HashedVersion;

        r2 := @parameter1: org.waveprotocol.wave.model.version.HashedVersion;

        virtualinvoke r0.<org.waveprotocol.box.server.waveserver.WaveletContainerImpl: void awaitLoad()>();

        virtualinvoke r0.<org.waveprotocol.box.server.waveserver.WaveletContainerImpl: void acquireReadLock()>();

     label1:
        virtualinvoke r0.<org.waveprotocol.box.server.waveserver.WaveletContainerImpl: void checkStateOk()>();

        specialinvoke r0.<org.waveprotocol.box.server.waveserver.WaveletContainerImpl: void checkVersionIsDeltaBoundary(org.waveprotocol.wave.model.version.HashedVersion,java.lang.String)>(r1, "start version");

        specialinvoke r0.<org.waveprotocol.box.server.waveserver.WaveletContainerImpl: void checkVersionIsDeltaBoundary(org.waveprotocol.wave.model.version.HashedVersion,java.lang.String)>(r2, "end version");

        $r3 = r0.<org.waveprotocol.box.server.waveserver.WaveletContainerImpl: org.waveprotocol.box.server.waveserver.WaveletState waveletState>;

        $r4 = interfaceinvoke $r3.<org.waveprotocol.box.server.waveserver.WaveletState: org.waveprotocol.box.common.DeltaSequence getTransformedDeltaHistory(org.waveprotocol.wave.model.version.HashedVersion,org.waveprotocol.wave.model.version.HashedVersion)>(r1, r2);

     label2:
        virtualinvoke r0.<org.waveprotocol.box.server.waveserver.WaveletContainerImpl: void releaseReadLock()>();

        return $r4;

     label3:
        $r5 := @caughtexception;

     label4:
        virtualinvoke r0.<org.waveprotocol.box.server.waveserver.WaveletContainerImpl: void releaseReadLock()>();

        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public boolean hasParticipant(org.waveprotocol.wave.model.wave.ParticipantId) throws org.waveprotocol.box.server.waveserver.WaveletStateException
    {
        java.lang.Throwable $r5;
        java.util.Set $r3;
        org.waveprotocol.wave.model.wave.ParticipantId r4;
        org.waveprotocol.box.server.waveserver.WaveletState $r1;
        org.waveprotocol.wave.model.wave.data.ReadableWaveletData $r2;
        org.waveprotocol.box.server.waveserver.WaveletContainerImpl r0;
        boolean $z0, $z1;

        r0 := @this: org.waveprotocol.box.server.waveserver.WaveletContainerImpl;

        r4 := @parameter0: org.waveprotocol.wave.model.wave.ParticipantId;

        virtualinvoke r0.<org.waveprotocol.box.server.waveserver.WaveletContainerImpl: void awaitLoad()>();

        virtualinvoke r0.<org.waveprotocol.box.server.waveserver.WaveletContainerImpl: void acquireReadLock()>();

     label1:
        virtualinvoke r0.<org.waveprotocol.box.server.waveserver.WaveletContainerImpl: void checkStateOk()>();

        $r1 = r0.<org.waveprotocol.box.server.waveserver.WaveletContainerImpl: org.waveprotocol.box.server.waveserver.WaveletState waveletState>;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.box.server.waveserver.WaveletState: org.waveprotocol.wave.model.wave.data.ReadableWaveletData getSnapshot()>();

        if $r2 == null goto label2;

        $r3 = interfaceinvoke $r2.<org.waveprotocol.wave.model.wave.data.ReadableWaveletData: java.util.Set getParticipants()>();

        $z0 = interfaceinvoke $r3.<java.util.Set: boolean contains(java.lang.Object)>(r4);

        if $z0 == 0 goto label2;

        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        virtualinvoke r0.<org.waveprotocol.box.server.waveserver.WaveletContainerImpl: void releaseReadLock()>();

        return $z1;

     label4:
        $r5 := @caughtexception;

     label5:
        virtualinvoke r0.<org.waveprotocol.box.server.waveserver.WaveletContainerImpl: void releaseReadLock()>();

        throw $r5;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public org.waveprotocol.wave.model.wave.ParticipantId getSharedDomainParticipant()
    {
        org.waveprotocol.wave.model.wave.ParticipantId $r1;
        org.waveprotocol.box.server.waveserver.WaveletContainerImpl r0;

        r0 := @this: org.waveprotocol.box.server.waveserver.WaveletContainerImpl;

        $r1 = r0.<org.waveprotocol.box.server.waveserver.WaveletContainerImpl: org.waveprotocol.wave.model.wave.ParticipantId sharedDomainParticipantId>;

        return $r1;
    }

    public org.waveprotocol.wave.model.wave.ParticipantId getCreator()
    {
        org.waveprotocol.wave.model.wave.data.ReadableWaveletData $r2;
        org.waveprotocol.wave.model.wave.ParticipantId $r3;
        org.waveprotocol.box.server.waveserver.WaveletContainerImpl r0;
        org.waveprotocol.box.server.waveserver.WaveletState $r1;

        r0 := @this: org.waveprotocol.box.server.waveserver.WaveletContainerImpl;

        $r1 = r0.<org.waveprotocol.box.server.waveserver.WaveletContainerImpl: org.waveprotocol.box.server.waveserver.WaveletState waveletState>;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.box.server.waveserver.WaveletState: org.waveprotocol.wave.model.wave.data.ReadableWaveletData getSnapshot()>();

        if $r2 == null goto label1;

        $r3 = interfaceinvoke $r2.<org.waveprotocol.wave.model.wave.data.ReadableWaveletData: org.waveprotocol.wave.model.wave.ParticipantId getCreator()>();

        goto label2;

     label1:
        $r3 = null;

     label2:
        return $r3;
    }

    public boolean isEmpty() throws org.waveprotocol.box.server.waveserver.WaveletStateException
    {
        java.lang.Throwable $r3;
        org.waveprotocol.wave.model.wave.data.ReadableWaveletData $r2;
        org.waveprotocol.box.server.waveserver.WaveletContainerImpl r0;
        org.waveprotocol.box.server.waveserver.WaveletState $r1;
        boolean $z0;

        r0 := @this: org.waveprotocol.box.server.waveserver.WaveletContainerImpl;

        virtualinvoke r0.<org.waveprotocol.box.server.waveserver.WaveletContainerImpl: void awaitLoad()>();

        virtualinvoke r0.<org.waveprotocol.box.server.waveserver.WaveletContainerImpl: void acquireReadLock()>();

     label1:
        virtualinvoke r0.<org.waveprotocol.box.server.waveserver.WaveletContainerImpl: void checkStateOk()>();

        $r1 = r0.<org.waveprotocol.box.server.waveserver.WaveletContainerImpl: org.waveprotocol.box.server.waveserver.WaveletState waveletState>;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.box.server.waveserver.WaveletState: org.waveprotocol.wave.model.wave.data.ReadableWaveletData getSnapshot()>();

        if $r2 != null goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        virtualinvoke r0.<org.waveprotocol.box.server.waveserver.WaveletContainerImpl: void releaseReadLock()>();

        return $z0;

     label4:
        $r3 := @caughtexception;

     label5:
        virtualinvoke r0.<org.waveprotocol.box.server.waveserver.WaveletContainerImpl: void releaseReadLock()>();

        throw $r3;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    protected org.waveprotocol.wave.model.version.HashedVersion getCurrentVersion()
    {
        org.waveprotocol.wave.model.version.HashedVersion $r2;
        org.waveprotocol.box.server.waveserver.WaveletContainerImpl r0;
        org.waveprotocol.box.server.waveserver.WaveletState $r1;

        r0 := @this: org.waveprotocol.box.server.waveserver.WaveletContainerImpl;

        $r1 = r0.<org.waveprotocol.box.server.waveserver.WaveletContainerImpl: org.waveprotocol.box.server.waveserver.WaveletState waveletState>;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.box.server.waveserver.WaveletState: org.waveprotocol.wave.model.version.HashedVersion getCurrentVersion()>();

        return $r2;
    }

    protected org.waveprotocol.wave.model.wave.data.ReadableWaveletData accessSnapshot()
    {
        org.waveprotocol.wave.model.wave.data.ReadableWaveletData $r2;
        org.waveprotocol.box.server.waveserver.WaveletContainerImpl r0;
        org.waveprotocol.box.server.waveserver.WaveletState $r1;

        r0 := @this: org.waveprotocol.box.server.waveserver.WaveletContainerImpl;

        $r1 = r0.<org.waveprotocol.box.server.waveserver.WaveletContainerImpl: org.waveprotocol.box.server.waveserver.WaveletState waveletState>;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.box.server.waveserver.WaveletState: org.waveprotocol.wave.model.wave.data.ReadableWaveletData getSnapshot()>();

        return $r2;
    }

    static org.waveprotocol.box.server.waveserver.WaveletState access$000(org.waveprotocol.box.server.waveserver.WaveletContainerImpl)
    {
        org.waveprotocol.box.server.waveserver.WaveletContainerImpl r0;
        org.waveprotocol.box.server.waveserver.WaveletState $r1;

        r0 := @parameter0: org.waveprotocol.box.server.waveserver.WaveletContainerImpl;

        $r1 = r0.<org.waveprotocol.box.server.waveserver.WaveletContainerImpl: org.waveprotocol.box.server.waveserver.WaveletState waveletState>;

        return $r1;
    }

    static org.waveprotocol.box.server.waveserver.WaveletContainerImpl$State access$100(org.waveprotocol.box.server.waveserver.WaveletContainerImpl)
    {
        org.waveprotocol.box.server.waveserver.WaveletContainerImpl r0;
        org.waveprotocol.box.server.waveserver.WaveletContainerImpl$State $r1;

        r0 := @parameter0: org.waveprotocol.box.server.waveserver.WaveletContainerImpl;

        $r1 = r0.<org.waveprotocol.box.server.waveserver.WaveletContainerImpl: org.waveprotocol.box.server.waveserver.WaveletContainerImpl$State state>;

        return $r1;
    }

    static org.waveprotocol.box.server.waveserver.WaveletState access$002(org.waveprotocol.box.server.waveserver.WaveletContainerImpl, org.waveprotocol.box.server.waveserver.WaveletState)
    {
        org.waveprotocol.box.server.waveserver.WaveletContainerImpl r0;
        org.waveprotocol.box.server.waveserver.WaveletState r1;

        r0 := @parameter0: org.waveprotocol.box.server.waveserver.WaveletContainerImpl;

        r1 := @parameter1: org.waveprotocol.box.server.waveserver.WaveletState;

        r0.<org.waveprotocol.box.server.waveserver.WaveletContainerImpl: org.waveprotocol.box.server.waveserver.WaveletState waveletState> = r1;

        return r1;
    }

    static org.waveprotocol.box.server.waveserver.WaveletContainerImpl$State access$102(org.waveprotocol.box.server.waveserver.WaveletContainerImpl, org.waveprotocol.box.server.waveserver.WaveletContainerImpl$State)
    {
        org.waveprotocol.box.server.waveserver.WaveletContainerImpl r0;
        org.waveprotocol.box.server.waveserver.WaveletContainerImpl$State r1;

        r0 := @parameter0: org.waveprotocol.box.server.waveserver.WaveletContainerImpl;

        r1 := @parameter1: org.waveprotocol.box.server.waveserver.WaveletContainerImpl$State;

        r0.<org.waveprotocol.box.server.waveserver.WaveletContainerImpl: org.waveprotocol.box.server.waveserver.WaveletContainerImpl$State state> = r1;

        return r1;
    }

    static org.waveprotocol.wave.util.logging.Log access$200()
    {
        org.waveprotocol.wave.util.logging.Log $r0;

        $r0 = <org.waveprotocol.box.server.waveserver.WaveletContainerImpl: org.waveprotocol.wave.util.logging.Log LOG>;

        return $r0;
    }

    static java.util.concurrent.CountDownLatch access$300(org.waveprotocol.box.server.waveserver.WaveletContainerImpl)
    {
        java.util.concurrent.CountDownLatch $r1;
        org.waveprotocol.box.server.waveserver.WaveletContainerImpl r0;

        r0 := @parameter0: org.waveprotocol.box.server.waveserver.WaveletContainerImpl;

        $r1 = r0.<org.waveprotocol.box.server.waveserver.WaveletContainerImpl: java.util.concurrent.CountDownLatch loadLatch>;

        return $r1;
    }

    static void <clinit>()
    {
        org.waveprotocol.wave.util.logging.Log $r0;

        <org.waveprotocol.box.server.waveserver.WaveletContainerImpl: int AWAIT_LOAD_TIMEOUT_SECONDS> = 1000;

        $r0 = staticinvoke <org.waveprotocol.wave.util.logging.Log: org.waveprotocol.wave.util.logging.Log get(java.lang.Class)>(class "Lorg/waveprotocol/box/server/waveserver/WaveletContainerImpl;");

        <org.waveprotocol.box.server.waveserver.WaveletContainerImpl: org.waveprotocol.wave.util.logging.Log LOG> = $r0;

        return;
    }
}
