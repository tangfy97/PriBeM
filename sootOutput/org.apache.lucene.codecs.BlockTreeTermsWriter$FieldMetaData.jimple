class org.apache.lucene.codecs.BlockTreeTermsWriter$FieldMetaData extends java.lang.Object
{
    public final org.apache.lucene.index.FieldInfo fieldInfo;
    public final org.apache.lucene.util.BytesRef rootCode;
    public final long numTerms;
    public final long indexStartFP;
    public final long sumTotalTermFreq;
    public final long sumDocFreq;
    public final int docCount;
    static final boolean $assertionsDisabled;

    public void <init>(org.apache.lucene.index.FieldInfo, org.apache.lucene.util.BytesRef, long, long, long, long, int)
    {
        long l0, l1, l2, l3;
        java.lang.AssertionError $r12, $r14;
        byte $b5;
        org.apache.lucene.codecs.BlockTreeTermsWriter$FieldMetaData r0;
        int i4, $i6;
        java.lang.String $r6, $r10;
        boolean $z0, $z1;
        org.apache.lucene.util.BytesRef r2;
        org.apache.lucene.index.FieldInfo r1;
        java.lang.StringBuilder $r5, $r7, $r8, $r9, $r13;

        r0 := @this: org.apache.lucene.codecs.BlockTreeTermsWriter$FieldMetaData;

        r1 := @parameter0: org.apache.lucene.index.FieldInfo;

        r2 := @parameter1: org.apache.lucene.util.BytesRef;

        l1 := @parameter2: long;

        l0 := @parameter3: long;

        l2 := @parameter4: long;

        l3 := @parameter5: long;

        i4 := @parameter6: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $z0 = <org.apache.lucene.codecs.BlockTreeTermsWriter$FieldMetaData: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $b5 = l1 cmp 0L;

        $i6 = (int) $b5;

        if $i6 > 0 goto label1;

        $r12 = new java.lang.AssertionError;

        specialinvoke $r12.<java.lang.AssertionError: void <init>()>();

        throw $r12;

     label1:
        r0.<org.apache.lucene.codecs.BlockTreeTermsWriter$FieldMetaData: org.apache.lucene.index.FieldInfo fieldInfo> = r1;

        $z1 = <org.apache.lucene.codecs.BlockTreeTermsWriter$FieldMetaData: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        if r2 != null goto label2;

        $r14 = new java.lang.AssertionError;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("field=");

        $r6 = r1.<org.apache.lucene.index.FieldInfo: java.lang.String name>;

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" numTerms=");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<java.lang.AssertionError: void <init>(java.lang.Object)>($r10);

        throw $r14;

     label2:
        r0.<org.apache.lucene.codecs.BlockTreeTermsWriter$FieldMetaData: org.apache.lucene.util.BytesRef rootCode> = r2;

        r0.<org.apache.lucene.codecs.BlockTreeTermsWriter$FieldMetaData: long indexStartFP> = l0;

        r0.<org.apache.lucene.codecs.BlockTreeTermsWriter$FieldMetaData: long numTerms> = l1;

        r0.<org.apache.lucene.codecs.BlockTreeTermsWriter$FieldMetaData: long sumTotalTermFreq> = l2;

        r0.<org.apache.lucene.codecs.BlockTreeTermsWriter$FieldMetaData: long sumDocFreq> = l3;

        r0.<org.apache.lucene.codecs.BlockTreeTermsWriter$FieldMetaData: int docCount> = i4;

        return;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/apache/lucene/codecs/BlockTreeTermsWriter;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.lucene.codecs.BlockTreeTermsWriter$FieldMetaData: boolean $assertionsDisabled> = $z1;

        return;
    }
}
