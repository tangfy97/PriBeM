public class org.apache.poi.hssf.converter.ExcelToHtmlConverter extends org.apache.poi.hssf.converter.AbstractExcelConverter
{
    private static final org.apache.poi.util.POILogger logger;
    private java.lang.String cssClassContainerCell;
    private java.lang.String cssClassContainerDiv;
    private java.lang.String cssClassPrefixCell;
    private java.lang.String cssClassPrefixDiv;
    private java.lang.String cssClassPrefixRow;
    private java.lang.String cssClassPrefixTable;
    private java.util.Map excelStyleToClass;
    private final org.apache.poi.hwpf.converter.HtmlDocumentFacade htmlDocumentFacade;
    private boolean useDivsToSpan;

    public static void main(java.lang.String[])
    {
        javax.xml.transform.dom.DOMSource $r18;
        javax.xml.transform.Transformer $r21;
        javax.xml.transform.stream.StreamResult $r19;
        java.lang.String[] r0;
        org.w3c.dom.Document $r15;
        int $i0;
        java.lang.String $r4, $r6, $r10, $r12, $r14, $r17;
        java.io.PrintStream $r2, $r8, $r22;
        java.io.FileWriter $r16;
        java.io.File $r13;
        java.lang.Exception $r23;
        java.lang.StringBuilder $r1, $r3, $r5, $r7, $r9, $r11;
        javax.xml.transform.TransformerFactory $r20;

        r0 := @parameter0: java.lang.String[];

        $i0 = lengthof r0;

        if $i0 >= 2 goto label1;

        $r22 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r22.<java.io.PrintStream: void println(java.lang.String)>("Usage: ExcelToHtmlConverter <inputFile.xls> <saveTo.html>");

        return;

     label1:
        $r2 = <java.lang.System: java.io.PrintStream out>;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Converting ");

        $r4 = r0[0];

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>($r6);

        $r8 = <java.lang.System: java.io.PrintStream out>;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Saving output to ");

        $r10 = r0[1];

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r8.<java.io.PrintStream: void println(java.lang.String)>($r12);

     label2:
        $r13 = new java.io.File;

        $r14 = r0[0];

        specialinvoke $r13.<java.io.File: void <init>(java.lang.String)>($r14);

        $r15 = staticinvoke <org.apache.poi.hssf.converter.ExcelToHtmlConverter: org.w3c.dom.Document process(java.io.File)>($r13);

        $r16 = new java.io.FileWriter;

        $r17 = r0[1];

        specialinvoke $r16.<java.io.FileWriter: void <init>(java.lang.String)>($r17);

        $r18 = new javax.xml.transform.dom.DOMSource;

        specialinvoke $r18.<javax.xml.transform.dom.DOMSource: void <init>(org.w3c.dom.Node)>($r15);

        $r19 = new javax.xml.transform.stream.StreamResult;

        specialinvoke $r19.<javax.xml.transform.stream.StreamResult: void <init>(java.io.Writer)>($r16);

        $r20 = staticinvoke <javax.xml.transform.TransformerFactory: javax.xml.transform.TransformerFactory newInstance()>();

        $r21 = virtualinvoke $r20.<javax.xml.transform.TransformerFactory: javax.xml.transform.Transformer newTransformer()>();

        virtualinvoke $r21.<javax.xml.transform.Transformer: void setOutputProperty(java.lang.String,java.lang.String)>("encoding", "UTF-8");

        virtualinvoke $r21.<javax.xml.transform.Transformer: void setOutputProperty(java.lang.String,java.lang.String)>("indent", "no");

        virtualinvoke $r21.<javax.xml.transform.Transformer: void setOutputProperty(java.lang.String,java.lang.String)>("method", "html");

        virtualinvoke $r21.<javax.xml.transform.Transformer: void transform(javax.xml.transform.Source,javax.xml.transform.Result)>($r18, $r19);

        virtualinvoke $r16.<java.io.FileWriter: void close()>();

     label3:
        goto label5;

     label4:
        $r23 := @caughtexception;

        virtualinvoke $r23.<java.lang.Exception: void printStackTrace()>();

     label5:
        return;

        catch java.lang.Exception from label2 to label3 with label4;
    }

    public static org.w3c.dom.Document process(java.io.File) throws java.lang.Exception
    {
        org.apache.poi.hssf.converter.ExcelToHtmlConverter $r2;
        org.w3c.dom.Document $r5, $r6;
        javax.xml.parsers.DocumentBuilder $r4;
        javax.xml.parsers.DocumentBuilderFactory $r3;
        org.apache.poi.hssf.usermodel.HSSFWorkbook $r1;
        java.io.File r0;

        r0 := @parameter0: java.io.File;

        $r1 = staticinvoke <org.apache.poi.hssf.converter.ExcelToHtmlUtils: org.apache.poi.hssf.usermodel.HSSFWorkbook loadXls(java.io.File)>(r0);

        $r2 = new org.apache.poi.hssf.converter.ExcelToHtmlConverter;

        $r3 = staticinvoke <org.apache.poi.util.XMLHelper: javax.xml.parsers.DocumentBuilderFactory getDocumentBuilderFactory()>();

        $r4 = virtualinvoke $r3.<javax.xml.parsers.DocumentBuilderFactory: javax.xml.parsers.DocumentBuilder newDocumentBuilder()>();

        $r5 = virtualinvoke $r4.<javax.xml.parsers.DocumentBuilder: org.w3c.dom.Document newDocument()>();

        specialinvoke $r2.<org.apache.poi.hssf.converter.ExcelToHtmlConverter: void <init>(org.w3c.dom.Document)>($r5);

        virtualinvoke $r2.<org.apache.poi.hssf.converter.ExcelToHtmlConverter: void processWorkbook(org.apache.poi.hssf.usermodel.HSSFWorkbook)>($r1);

        $r6 = virtualinvoke $r2.<org.apache.poi.hssf.converter.ExcelToHtmlConverter: org.w3c.dom.Document getDocument()>();

        return $r6;
    }

    public void <init>(org.w3c.dom.Document)
    {
        java.util.LinkedHashMap $r1;
        org.apache.poi.hssf.converter.ExcelToHtmlConverter r0;
        org.apache.poi.hwpf.converter.HtmlDocumentFacade $r2;
        org.w3c.dom.Document r3;

        r0 := @this: org.apache.poi.hssf.converter.ExcelToHtmlConverter;

        r3 := @parameter0: org.w3c.dom.Document;

        specialinvoke r0.<org.apache.poi.hssf.converter.AbstractExcelConverter: void <init>()>();

        r0.<org.apache.poi.hssf.converter.ExcelToHtmlConverter: java.lang.String cssClassContainerCell> = null;

        r0.<org.apache.poi.hssf.converter.ExcelToHtmlConverter: java.lang.String cssClassContainerDiv> = null;

        r0.<org.apache.poi.hssf.converter.ExcelToHtmlConverter: java.lang.String cssClassPrefixCell> = "c";

        r0.<org.apache.poi.hssf.converter.ExcelToHtmlConverter: java.lang.String cssClassPrefixDiv> = "d";

        r0.<org.apache.poi.hssf.converter.ExcelToHtmlConverter: java.lang.String cssClassPrefixRow> = "r";

        r0.<org.apache.poi.hssf.converter.ExcelToHtmlConverter: java.lang.String cssClassPrefixTable> = "t";

        $r1 = new java.util.LinkedHashMap;

        specialinvoke $r1.<java.util.LinkedHashMap: void <init>()>();

        r0.<org.apache.poi.hssf.converter.ExcelToHtmlConverter: java.util.Map excelStyleToClass> = $r1;

        r0.<org.apache.poi.hssf.converter.ExcelToHtmlConverter: boolean useDivsToSpan> = 0;

        $r2 = new org.apache.poi.hwpf.converter.HtmlDocumentFacade;

        specialinvoke $r2.<org.apache.poi.hwpf.converter.HtmlDocumentFacade: void <init>(org.w3c.dom.Document)>(r3);

        r0.<org.apache.poi.hssf.converter.ExcelToHtmlConverter: org.apache.poi.hwpf.converter.HtmlDocumentFacade htmlDocumentFacade> = $r2;

        return;
    }

    public void <init>(org.apache.poi.hwpf.converter.HtmlDocumentFacade)
    {
        java.util.LinkedHashMap $r1;
        org.apache.poi.hssf.converter.ExcelToHtmlConverter r0;
        org.apache.poi.hwpf.converter.HtmlDocumentFacade r2;

        r0 := @this: org.apache.poi.hssf.converter.ExcelToHtmlConverter;

        r2 := @parameter0: org.apache.poi.hwpf.converter.HtmlDocumentFacade;

        specialinvoke r0.<org.apache.poi.hssf.converter.AbstractExcelConverter: void <init>()>();

        r0.<org.apache.poi.hssf.converter.ExcelToHtmlConverter: java.lang.String cssClassContainerCell> = null;

        r0.<org.apache.poi.hssf.converter.ExcelToHtmlConverter: java.lang.String cssClassContainerDiv> = null;

        r0.<org.apache.poi.hssf.converter.ExcelToHtmlConverter: java.lang.String cssClassPrefixCell> = "c";

        r0.<org.apache.poi.hssf.converter.ExcelToHtmlConverter: java.lang.String cssClassPrefixDiv> = "d";

        r0.<org.apache.poi.hssf.converter.ExcelToHtmlConverter: java.lang.String cssClassPrefixRow> = "r";

        r0.<org.apache.poi.hssf.converter.ExcelToHtmlConverter: java.lang.String cssClassPrefixTable> = "t";

        $r1 = new java.util.LinkedHashMap;

        specialinvoke $r1.<java.util.LinkedHashMap: void <init>()>();

        r0.<org.apache.poi.hssf.converter.ExcelToHtmlConverter: java.util.Map excelStyleToClass> = $r1;

        r0.<org.apache.poi.hssf.converter.ExcelToHtmlConverter: boolean useDivsToSpan> = 0;

        r0.<org.apache.poi.hssf.converter.ExcelToHtmlConverter: org.apache.poi.hwpf.converter.HtmlDocumentFacade htmlDocumentFacade> = r2;

        return;
    }

    protected java.lang.String buildStyle(org.apache.poi.hssf.usermodel.HSSFWorkbook, org.apache.poi.hssf.usermodel.HSSFCellStyle)
    {
        org.apache.poi.hssf.util.HSSFColor $r2, $r11;
        short $s0, $s1, $s2, $s3, $s4, $s5, $s6, $s7, $s8, $s9, $s10;
        org.apache.poi.hssf.converter.ExcelToHtmlConverter r3;
        java.lang.String $r7, $r10, $r14, $r17, $r19;
        org.apache.poi.hssf.usermodel.HSSFCellStyle r1;
        java.lang.StringBuilder $r0, $r5, $r6, $r8, $r9, $r12, $r13, $r15, $r16;
        org.apache.poi.hssf.usermodel.HSSFFont $r18;
        org.apache.poi.hssf.usermodel.HSSFWorkbook r4;

        r3 := @this: org.apache.poi.hssf.converter.ExcelToHtmlConverter;

        r4 := @parameter0: org.apache.poi.hssf.usermodel.HSSFWorkbook;

        r1 := @parameter1: org.apache.poi.hssf.usermodel.HSSFCellStyle;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("white-space:pre-wrap;");

        $s0 = virtualinvoke r1.<org.apache.poi.hssf.usermodel.HSSFCellStyle: short getAlignment()>();

        staticinvoke <org.apache.poi.hssf.converter.ExcelToHtmlUtils: void appendAlign(java.lang.StringBuilder,short)>($r0, $s0);

        $s1 = virtualinvoke r1.<org.apache.poi.hssf.usermodel.HSSFCellStyle: short getFillPattern()>();

        if $s1 != 0 goto label1;

        goto label4;

     label1:
        $s2 = virtualinvoke r1.<org.apache.poi.hssf.usermodel.HSSFCellStyle: short getFillPattern()>();

        if $s2 != 1 goto label3;

        $r11 = virtualinvoke r1.<org.apache.poi.hssf.usermodel.HSSFCellStyle: org.apache.poi.hssf.util.HSSFColor getFillForegroundColorColor()>();

        if $r11 == null goto label2;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("background-color:");

        $r14 = staticinvoke <org.apache.poi.hssf.converter.ExcelToHtmlUtils: java.lang.String getColor(org.apache.poi.hssf.util.HSSFColor)>($r11);

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(";");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

     label2:
        goto label4;

     label3:
        $r2 = virtualinvoke r1.<org.apache.poi.hssf.usermodel.HSSFCellStyle: org.apache.poi.hssf.util.HSSFColor getFillBackgroundColorColor()>();

        if $r2 == null goto label4;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("background-color:");

        $r7 = staticinvoke <org.apache.poi.hssf.converter.ExcelToHtmlUtils: java.lang.String getColor(org.apache.poi.hssf.util.HSSFColor)>($r2);

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(";");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

     label4:
        $s3 = virtualinvoke r1.<org.apache.poi.hssf.usermodel.HSSFCellStyle: short getBorderTop()>();

        $s4 = virtualinvoke r1.<org.apache.poi.hssf.usermodel.HSSFCellStyle: short getTopBorderColor()>();

        specialinvoke r3.<org.apache.poi.hssf.converter.ExcelToHtmlConverter: void buildStyle_border(org.apache.poi.hssf.usermodel.HSSFWorkbook,java.lang.StringBuilder,java.lang.String,short,short)>(r4, $r0, "top", $s3, $s4);

        $s5 = virtualinvoke r1.<org.apache.poi.hssf.usermodel.HSSFCellStyle: short getBorderRight()>();

        $s6 = virtualinvoke r1.<org.apache.poi.hssf.usermodel.HSSFCellStyle: short getRightBorderColor()>();

        specialinvoke r3.<org.apache.poi.hssf.converter.ExcelToHtmlConverter: void buildStyle_border(org.apache.poi.hssf.usermodel.HSSFWorkbook,java.lang.StringBuilder,java.lang.String,short,short)>(r4, $r0, "right", $s5, $s6);

        $s7 = virtualinvoke r1.<org.apache.poi.hssf.usermodel.HSSFCellStyle: short getBorderBottom()>();

        $s8 = virtualinvoke r1.<org.apache.poi.hssf.usermodel.HSSFCellStyle: short getBottomBorderColor()>();

        specialinvoke r3.<org.apache.poi.hssf.converter.ExcelToHtmlConverter: void buildStyle_border(org.apache.poi.hssf.usermodel.HSSFWorkbook,java.lang.StringBuilder,java.lang.String,short,short)>(r4, $r0, "bottom", $s7, $s8);

        $s9 = virtualinvoke r1.<org.apache.poi.hssf.usermodel.HSSFCellStyle: short getBorderLeft()>();

        $s10 = virtualinvoke r1.<org.apache.poi.hssf.usermodel.HSSFCellStyle: short getLeftBorderColor()>();

        specialinvoke r3.<org.apache.poi.hssf.converter.ExcelToHtmlConverter: void buildStyle_border(org.apache.poi.hssf.usermodel.HSSFWorkbook,java.lang.StringBuilder,java.lang.String,short,short)>(r4, $r0, "left", $s9, $s10);

        $r18 = virtualinvoke r1.<org.apache.poi.hssf.usermodel.HSSFCellStyle: org.apache.poi.hssf.usermodel.HSSFFont getFont(org.apache.poi.ss.usermodel.Workbook)>(r4);

        virtualinvoke r3.<org.apache.poi.hssf.converter.ExcelToHtmlConverter: void buildStyle_font(org.apache.poi.hssf.usermodel.HSSFWorkbook,java.lang.StringBuilder,org.apache.poi.hssf.usermodel.HSSFFont)>(r4, $r0, $r18);

        $r19 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r19;
    }

    private void buildStyle_border(org.apache.poi.hssf.usermodel.HSSFWorkbook, java.lang.StringBuilder, java.lang.String, short, short)
    {
        org.apache.poi.hssf.util.HSSFColor $r5;
        short s0, s1;
        org.apache.poi.hssf.converter.ExcelToHtmlConverter r16;
        java.lang.String $r1, $r2, r9, $r14, $r15;
        org.apache.poi.hssf.usermodel.HSSFPalette $r4;
        java.lang.StringBuilder $r0, r6, $r7, $r8, $r10, $r11, $r12, $r13;
        org.apache.poi.hssf.usermodel.HSSFWorkbook r3;

        r16 := @this: org.apache.poi.hssf.converter.ExcelToHtmlConverter;

        r3 := @parameter0: org.apache.poi.hssf.usermodel.HSSFWorkbook;

        r6 := @parameter1: java.lang.StringBuilder;

        r9 := @parameter2: java.lang.String;

        s0 := @parameter3: short;

        s1 := @parameter4: short;

        if s0 != 0 goto label1;

        return;

     label1:
        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = staticinvoke <org.apache.poi.hssf.converter.ExcelToHtmlUtils: java.lang.String getBorderWidth(short)>(s0);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

        $r2 = staticinvoke <org.apache.poi.hssf.converter.ExcelToHtmlUtils: java.lang.String getBorderStyle(short)>(s0);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke r3.<org.apache.poi.hssf.usermodel.HSSFWorkbook: org.apache.poi.hssf.usermodel.HSSFPalette getCustomPalette()>();

        $r5 = virtualinvoke $r4.<org.apache.poi.hssf.usermodel.HSSFPalette: org.apache.poi.hssf.util.HSSFColor getColor(short)>(s1);

        if $r5 == null goto label2;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

        $r15 = staticinvoke <org.apache.poi.hssf.converter.ExcelToHtmlUtils: java.lang.String getColor(org.apache.poi.hssf.util.HSSFColor)>($r5);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

     label2:
        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("border-");

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(";");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        return;
    }

    void buildStyle_font(org.apache.poi.hssf.usermodel.HSSFWorkbook, java.lang.StringBuilder, org.apache.poi.hssf.usermodel.HSSFFont)
    {
        org.apache.poi.hssf.util.HSSFColor $r4;
        short $s0, $s1, $s2, $s3;
        org.apache.poi.hssf.converter.ExcelToHtmlConverter r16;
        int $i4, $i5;
        java.lang.String $r9, $r12, $r15;
        org.apache.poi.hssf.usermodel.HSSFPalette $r3;
        boolean $z0;
        java.lang.StringBuilder r1, $r6, $r7, $r8, $r11, $r13, $r14, $r17, $r18;
        org.apache.poi.hssf.usermodel.HSSFFont r0;
        org.apache.poi.hssf.usermodel.HSSFWorkbook r2;

        r16 := @this: org.apache.poi.hssf.converter.ExcelToHtmlConverter;

        r2 := @parameter0: org.apache.poi.hssf.usermodel.HSSFWorkbook;

        r1 := @parameter1: java.lang.StringBuilder;

        r0 := @parameter2: org.apache.poi.hssf.usermodel.HSSFFont;

        $s0 = virtualinvoke r0.<org.apache.poi.hssf.usermodel.HSSFFont: short getBoldweight()>();

        $i4 = (int) $s0;

        lookupswitch($i4)
        {
            case 400: goto label2;
            case 700: goto label1;
            default: goto label2;
        };

     label1:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("font-weight:bold;");

        goto label2;

     label2:
        $r3 = virtualinvoke r2.<org.apache.poi.hssf.usermodel.HSSFWorkbook: org.apache.poi.hssf.usermodel.HSSFPalette getCustomPalette()>();

        $s1 = virtualinvoke r0.<org.apache.poi.hssf.usermodel.HSSFFont: short getColor()>();

        $r4 = virtualinvoke $r3.<org.apache.poi.hssf.usermodel.HSSFPalette: org.apache.poi.hssf.util.HSSFColor getColor(short)>($s1);

        if $r4 == null goto label3;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("color: ");

        $r12 = staticinvoke <org.apache.poi.hssf.converter.ExcelToHtmlUtils: java.lang.String getColor(org.apache.poi.hssf.util.HSSFColor)>($r4);

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

     label3:
        $s2 = virtualinvoke r0.<org.apache.poi.hssf.usermodel.HSSFFont: short getFontHeightInPoints()>();

        if $s2 == 0 goto label4;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("font-size:");

        $s3 = virtualinvoke r0.<org.apache.poi.hssf.usermodel.HSSFFont: short getFontHeightInPoints()>();

        $i5 = (int) $s3;

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("pt;");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

     label4:
        $z0 = virtualinvoke r0.<org.apache.poi.hssf.usermodel.HSSFFont: boolean getItalic()>();

        if $z0 == 0 goto label5;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("font-style:italic;");

     label5:
        return;
    }

    public java.lang.String getCssClassPrefixCell()
    {
        java.lang.String $r1;
        org.apache.poi.hssf.converter.ExcelToHtmlConverter r0;

        r0 := @this: org.apache.poi.hssf.converter.ExcelToHtmlConverter;

        $r1 = r0.<org.apache.poi.hssf.converter.ExcelToHtmlConverter: java.lang.String cssClassPrefixCell>;

        return $r1;
    }

    public java.lang.String getCssClassPrefixDiv()
    {
        java.lang.String $r1;
        org.apache.poi.hssf.converter.ExcelToHtmlConverter r0;

        r0 := @this: org.apache.poi.hssf.converter.ExcelToHtmlConverter;

        $r1 = r0.<org.apache.poi.hssf.converter.ExcelToHtmlConverter: java.lang.String cssClassPrefixDiv>;

        return $r1;
    }

    public java.lang.String getCssClassPrefixRow()
    {
        java.lang.String $r1;
        org.apache.poi.hssf.converter.ExcelToHtmlConverter r0;

        r0 := @this: org.apache.poi.hssf.converter.ExcelToHtmlConverter;

        $r1 = r0.<org.apache.poi.hssf.converter.ExcelToHtmlConverter: java.lang.String cssClassPrefixRow>;

        return $r1;
    }

    public java.lang.String getCssClassPrefixTable()
    {
        java.lang.String $r1;
        org.apache.poi.hssf.converter.ExcelToHtmlConverter r0;

        r0 := @this: org.apache.poi.hssf.converter.ExcelToHtmlConverter;

        $r1 = r0.<org.apache.poi.hssf.converter.ExcelToHtmlConverter: java.lang.String cssClassPrefixTable>;

        return $r1;
    }

    public org.w3c.dom.Document getDocument()
    {
        org.apache.poi.hssf.converter.ExcelToHtmlConverter r0;
        org.apache.poi.hwpf.converter.HtmlDocumentFacade $r1;
        org.w3c.dom.Document $r2;

        r0 := @this: org.apache.poi.hssf.converter.ExcelToHtmlConverter;

        $r1 = r0.<org.apache.poi.hssf.converter.ExcelToHtmlConverter: org.apache.poi.hwpf.converter.HtmlDocumentFacade htmlDocumentFacade>;

        $r2 = virtualinvoke $r1.<org.apache.poi.hwpf.converter.HtmlDocumentFacade: org.w3c.dom.Document getDocument()>();

        return $r2;
    }

    protected java.lang.String getStyleClassName(org.apache.poi.hssf.usermodel.HSSFWorkbook, org.apache.poi.hssf.usermodel.HSSFCellStyle)
    {
        org.apache.poi.hssf.usermodel.HSSFCellStyle r0;
        short $s0;
        org.apache.poi.hssf.converter.ExcelToHtmlConverter r2;
        org.apache.poi.hwpf.converter.HtmlDocumentFacade $r9;
        java.lang.Short $r1;
        java.util.Map $r3, $r11;
        java.lang.Object $r4;
        java.lang.String r5, $r7, $r8, $r10;
        org.apache.poi.hssf.usermodel.HSSFWorkbook r6;

        r2 := @this: org.apache.poi.hssf.converter.ExcelToHtmlConverter;

        r6 := @parameter0: org.apache.poi.hssf.usermodel.HSSFWorkbook;

        r0 := @parameter1: org.apache.poi.hssf.usermodel.HSSFCellStyle;

        $s0 = virtualinvoke r0.<org.apache.poi.hssf.usermodel.HSSFCellStyle: short getIndex()>();

        $r1 = staticinvoke <java.lang.Short: java.lang.Short valueOf(short)>($s0);

        $r3 = r2.<org.apache.poi.hssf.converter.ExcelToHtmlConverter: java.util.Map excelStyleToClass>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        r5 = (java.lang.String) $r4;

        if r5 == null goto label1;

        return r5;

     label1:
        $r7 = virtualinvoke r2.<org.apache.poi.hssf.converter.ExcelToHtmlConverter: java.lang.String buildStyle(org.apache.poi.hssf.usermodel.HSSFWorkbook,org.apache.poi.hssf.usermodel.HSSFCellStyle)>(r6, r0);

        $r9 = r2.<org.apache.poi.hssf.converter.ExcelToHtmlConverter: org.apache.poi.hwpf.converter.HtmlDocumentFacade htmlDocumentFacade>;

        $r8 = r2.<org.apache.poi.hssf.converter.ExcelToHtmlConverter: java.lang.String cssClassPrefixCell>;

        $r10 = virtualinvoke $r9.<org.apache.poi.hwpf.converter.HtmlDocumentFacade: java.lang.String getOrCreateCssClass(java.lang.String,java.lang.String)>($r8, $r7);

        $r11 = r2.<org.apache.poi.hssf.converter.ExcelToHtmlConverter: java.util.Map excelStyleToClass>;

        interfaceinvoke $r11.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r10);

        return $r10;
    }

    public boolean isUseDivsToSpan()
    {
        org.apache.poi.hssf.converter.ExcelToHtmlConverter r0;
        boolean $z0;

        r0 := @this: org.apache.poi.hssf.converter.ExcelToHtmlConverter;

        $z0 = r0.<org.apache.poi.hssf.converter.ExcelToHtmlConverter: boolean useDivsToSpan>;

        return $z0;
    }

    protected boolean processCell(org.apache.poi.hssf.usermodel.HSSFCell, org.w3c.dom.Element, int, int, float)
    {
        org.w3c.dom.Text $r44;
        org.apache.poi.hssf.usermodel.HSSFRow $r15;
        byte $b1, $b11;
        org.apache.poi.hssf.usermodel.HSSFSheet $r16;
        org.apache.poi.hssf.usermodel.HSSFRichTextString $r25, $r34;
        java.lang.StringBuilder $r20, $r21, $r23, $r30, $r31, $r32, $r38, $r39, $r40, $r45, $r46, $r47, $r48, $r49;
        org.apache.poi.hssf.usermodel.HSSFWorkbook $r17;
        short $s4, $s13, $s16;
        org.apache.poi.hwpf.converter.HtmlDocumentFacade $r4, $r7, $r10, $r43;
        java.lang.String $r6, $r11, $r12, $r14, $r18, $r22, $r24, $r27, $r33, $r41, r42;
        org.apache.poi.hssf.usermodel.HSSFDataFormatter $r26, $r35;
        org.apache.poi.hssf.usermodel.HSSFCell r0;
        org.apache.poi.hssf.converter.ExcelToHtmlConverter r2;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, z8, $z9, $z10, $z11, $z12;
        org.apache.poi.util.POILogger $r29, $r37;
        float f0;
        int $i0, i2, i3, $i5, $i6, $i7, $i8, $i10, $i12, $i14, $i15, i17, $i18, $i19, $i20, $i21;
        double $d0, $d1;
        char $c9;
        org.apache.poi.hssf.usermodel.HSSFCellStyle $r1;
        org.w3c.dom.Element r3, $r5, $r8;

        r2 := @this: org.apache.poi.hssf.converter.ExcelToHtmlConverter;

        r0 := @parameter0: org.apache.poi.hssf.usermodel.HSSFCell;

        r3 := @parameter1: org.w3c.dom.Element;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        f0 := @parameter4: float;

        $r1 = virtualinvoke r0.<org.apache.poi.hssf.usermodel.HSSFCell: org.apache.poi.hssf.usermodel.HSSFCellStyle getCellStyle()>();

        $i0 = virtualinvoke r0.<org.apache.poi.hssf.usermodel.HSSFCell: int getCellType()>();

        tableswitch($i0)
        {
            case 0: goto label12;
            case 1: goto label01;
            case 2: goto label02;
            case 3: goto label11;
            case 4: goto label13;
            case 5: goto label14;
            default: goto label15;
        };

     label01:
        $r34 = virtualinvoke r0.<org.apache.poi.hssf.usermodel.HSSFCell: org.apache.poi.hssf.usermodel.HSSFRichTextString getRichStringCellValue()>();

        r42 = virtualinvoke $r34.<org.apache.poi.hssf.usermodel.HSSFRichTextString: java.lang.String getString()>();

        goto label16;

     label02:
        $i10 = virtualinvoke r0.<org.apache.poi.hssf.usermodel.HSSFCell: int getCachedFormulaResultType()>();

        tableswitch($i10)
        {
            case 0: goto label05;
            case 1: goto label03;
            case 2: goto label09;
            case 3: goto label09;
            case 4: goto label07;
            case 5: goto label08;
            default: goto label09;
        };

     label03:
        $r25 = virtualinvoke r0.<org.apache.poi.hssf.usermodel.HSSFCell: org.apache.poi.hssf.usermodel.HSSFRichTextString getRichStringCellValue()>();

        if $r25 == null goto label04;

        $i12 = virtualinvoke $r25.<org.apache.poi.hssf.usermodel.HSSFRichTextString: int length()>();

        if $i12 <= 0 goto label04;

        r42 = virtualinvoke $r25.<org.apache.poi.hssf.usermodel.HSSFRichTextString: java.lang.String toString()>();

        goto label10;

     label04:
        r42 = "";

        goto label10;

     label05:
        if $r1 != null goto label06;

        $d1 = virtualinvoke r0.<org.apache.poi.hssf.usermodel.HSSFCell: double getNumericCellValue()>();

        r42 = staticinvoke <java.lang.String: java.lang.String valueOf(double)>($d1);

        goto label10;

     label06:
        $r26 = r2.<org.apache.poi.hssf.converter.ExcelToHtmlConverter: org.apache.poi.hssf.usermodel.HSSFDataFormatter _formatter>;

        $d0 = virtualinvoke r0.<org.apache.poi.hssf.usermodel.HSSFCell: double getNumericCellValue()>();

        $s13 = virtualinvoke $r1.<org.apache.poi.hssf.usermodel.HSSFCellStyle: short getDataFormat()>();

        $r27 = virtualinvoke $r1.<org.apache.poi.hssf.usermodel.HSSFCellStyle: java.lang.String getDataFormatString()>();

        $i18 = (int) $s13;

        r42 = virtualinvoke $r26.<org.apache.poi.hssf.usermodel.HSSFDataFormatter: java.lang.String formatRawCellContents(double,int,java.lang.String)>($d0, $i18, $r27);

        goto label10;

     label07:
        $z5 = virtualinvoke r0.<org.apache.poi.hssf.usermodel.HSSFCell: boolean getBooleanCellValue()>();

        r42 = staticinvoke <java.lang.String: java.lang.String valueOf(boolean)>($z5);

        goto label10;

     label08:
        $b11 = virtualinvoke r0.<org.apache.poi.hssf.usermodel.HSSFCell: byte getErrorCellValue()>();

        $i19 = (int) $b11;

        r42 = staticinvoke <org.apache.poi.ss.formula.eval.ErrorEval: java.lang.String getText(int)>($i19);

        goto label10;

     label09:
        $r29 = <org.apache.poi.hssf.converter.ExcelToHtmlConverter: org.apache.poi.util.POILogger logger>;

        $r45 = new java.lang.StringBuilder;

        specialinvoke $r45.<java.lang.StringBuilder: void <init>()>();

        $r30 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected cell cachedFormulaResultType (");

        $i14 = virtualinvoke r0.<org.apache.poi.hssf.usermodel.HSSFCell: int getCachedFormulaResultType()>();

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i14);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r29.<org.apache.poi.util.POILogger: void log(int,java.lang.Object)>(5, $r33);

        r42 = "";

     label10:
        goto label16;

     label11:
        r42 = "";

        goto label16;

     label12:
        $r35 = r2.<org.apache.poi.hssf.converter.ExcelToHtmlConverter: org.apache.poi.hssf.usermodel.HSSFDataFormatter _formatter>;

        r42 = virtualinvoke $r35.<org.apache.poi.hssf.usermodel.HSSFDataFormatter: java.lang.String formatCellValue(org.apache.poi.ss.usermodel.Cell)>(r0);

        goto label16;

     label13:
        $z4 = virtualinvoke r0.<org.apache.poi.hssf.usermodel.HSSFCell: boolean getBooleanCellValue()>();

        r42 = staticinvoke <java.lang.String: java.lang.String valueOf(boolean)>($z4);

        goto label16;

     label14:
        $b1 = virtualinvoke r0.<org.apache.poi.hssf.usermodel.HSSFCell: byte getErrorCellValue()>();

        $i20 = (int) $b1;

        r42 = staticinvoke <org.apache.poi.ss.formula.eval.ErrorEval: java.lang.String getText(int)>($i20);

        goto label16;

     label15:
        $r37 = <org.apache.poi.hssf.converter.ExcelToHtmlConverter: org.apache.poi.util.POILogger logger>;

        $r46 = new java.lang.StringBuilder;

        specialinvoke $r46.<java.lang.StringBuilder: void <init>()>();

        $r38 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected cell type (");

        $i15 = virtualinvoke r0.<org.apache.poi.hssf.usermodel.HSSFCell: int getCellType()>();

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i15);

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r37.<org.apache.poi.util.POILogger: void log(int,java.lang.Object)>(5, $r41);

        return 1;

     label16:
        $z6 = staticinvoke <org.apache.poi.hssf.converter.ExcelToHtmlUtils: boolean isEmpty(java.lang.String)>(r42);

        if $z6 != 0 goto label17;

        $z2 = virtualinvoke r2.<org.apache.poi.hssf.converter.ExcelToHtmlConverter: boolean isUseDivsToSpan()>();

        if $z2 == 0 goto label17;

        $z3 = virtualinvoke $r1.<org.apache.poi.hssf.usermodel.HSSFCellStyle: boolean getWrapText()>();

        if $z3 != 0 goto label17;

        $z12 = 1;

        $z11 = 1;

        goto label18;

     label17:
        $z12 = 0;

        $z11 = 0;

     label18:
        z8 = $z12;

        $s16 = virtualinvoke $r1.<org.apache.poi.hssf.usermodel.HSSFCellStyle: short getIndex()>();

        if $s16 == 0 goto label21;

        $r15 = virtualinvoke r0.<org.apache.poi.hssf.usermodel.HSSFCell: org.apache.poi.hssf.usermodel.HSSFRow getRow()>();

        $r16 = virtualinvoke $r15.<org.apache.poi.hssf.usermodel.HSSFRow: org.apache.poi.hssf.usermodel.HSSFSheet getSheet()>();

        $r17 = virtualinvoke $r16.<org.apache.poi.hssf.usermodel.HSSFSheet: org.apache.poi.hssf.usermodel.HSSFWorkbook getWorkbook()>();

        $r18 = virtualinvoke r2.<org.apache.poi.hssf.converter.ExcelToHtmlConverter: java.lang.String getStyleClassName(org.apache.poi.hssf.usermodel.HSSFWorkbook,org.apache.poi.hssf.usermodel.HSSFCellStyle)>($r17, $r1);

        if $z11 == 0 goto label19;

        $r47 = new java.lang.StringBuilder;

        specialinvoke $r47.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r22 = r2.<org.apache.poi.hssf.converter.ExcelToHtmlConverter: java.lang.String cssClassContainerCell>;

        $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r3.<org.w3c.dom.Element: void setAttribute(java.lang.String,java.lang.String)>("class", $r24);

        goto label20;

     label19:
        interfaceinvoke r3.<org.w3c.dom.Element: void setAttribute(java.lang.String,java.lang.String)>("class", $r18);

     label20:
        if $z6 == 0 goto label21;

        r42 = "\u00a0";

     label21:
        $z9 = virtualinvoke r2.<org.apache.poi.hssf.converter.ExcelToHtmlConverter: boolean isOutputLeadingSpacesAsNonBreaking()>();

        if $z9 == 0 goto label26;

        $z1 = virtualinvoke r42.<java.lang.String: boolean startsWith(java.lang.String)>(" ");

        if $z1 == 0 goto label26;

        $r48 = new java.lang.StringBuilder;

        specialinvoke $r48.<java.lang.StringBuilder: void <init>()>();

        i17 = 0;

     label22:
        $i5 = virtualinvoke r42.<java.lang.String: int length()>();

        if i17 >= $i5 goto label24;

        $c9 = virtualinvoke r42.<java.lang.String: char charAt(int)>(i17);

        $i21 = (int) $c9;

        if $i21 == 32 goto label23;

        goto label24;

     label23:
        virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(160);

        i17 = i17 + 1;

        goto label22;

     label24:
        $i6 = virtualinvoke r42.<java.lang.String: int length()>();

        $i7 = virtualinvoke $r48.<java.lang.StringBuilder: int length()>();

        if $i6 == $i7 goto label25;

        $i8 = virtualinvoke $r48.<java.lang.StringBuilder: int length()>();

        $r14 = virtualinvoke r42.<java.lang.String: java.lang.String substring(int)>($i8);

        virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

     label25:
        r42 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.String toString()>();

     label26:
        $r43 = r2.<org.apache.poi.hssf.converter.ExcelToHtmlConverter: org.apache.poi.hwpf.converter.HtmlDocumentFacade htmlDocumentFacade>;

        $r44 = virtualinvoke $r43.<org.apache.poi.hwpf.converter.HtmlDocumentFacade: org.w3c.dom.Text createText(java.lang.String)>(r42);

        if z8 == 0 goto label28;

        $r4 = r2.<org.apache.poi.hssf.converter.ExcelToHtmlConverter: org.apache.poi.hwpf.converter.HtmlDocumentFacade htmlDocumentFacade>;

        $r5 = virtualinvoke $r4.<org.apache.poi.hwpf.converter.HtmlDocumentFacade: org.w3c.dom.Element createBlock()>();

        $r6 = r2.<org.apache.poi.hssf.converter.ExcelToHtmlConverter: java.lang.String cssClassContainerDiv>;

        interfaceinvoke $r5.<org.w3c.dom.Element: void setAttribute(java.lang.String,java.lang.String)>("class", $r6);

        $r7 = r2.<org.apache.poi.hssf.converter.ExcelToHtmlConverter: org.apache.poi.hwpf.converter.HtmlDocumentFacade htmlDocumentFacade>;

        $r8 = virtualinvoke $r7.<org.apache.poi.hwpf.converter.HtmlDocumentFacade: org.w3c.dom.Element createBlock()>();

        $r49 = new java.lang.StringBuilder;

        specialinvoke $r49.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("position:absolute;min-width:");

        virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("px;");

        if i3 == 2147483647 goto label27;

        virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("max-width:");

        virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3);

        virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("px;");

     label27:
        virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("overflow:hidden;max-height:");

        virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>(f0);

        virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("pt;white-space:nowrap;");

        $s4 = virtualinvoke $r1.<org.apache.poi.hssf.usermodel.HSSFCellStyle: short getAlignment()>();

        staticinvoke <org.apache.poi.hssf.converter.ExcelToHtmlUtils: void appendAlign(java.lang.StringBuilder,short)>($r49, $s4);

        $r10 = r2.<org.apache.poi.hssf.converter.ExcelToHtmlConverter: org.apache.poi.hwpf.converter.HtmlDocumentFacade htmlDocumentFacade>;

        $r11 = r2.<org.apache.poi.hssf.converter.ExcelToHtmlConverter: java.lang.String cssClassPrefixDiv>;

        $r12 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r10.<org.apache.poi.hwpf.converter.HtmlDocumentFacade: void addStyleClass(org.w3c.dom.Element,java.lang.String,java.lang.String)>($r5, $r11, $r12);

        interfaceinvoke $r8.<org.w3c.dom.Element: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r44);

        interfaceinvoke $r5.<org.w3c.dom.Element: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r8);

        interfaceinvoke r3.<org.w3c.dom.Element: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r5);

        goto label29;

     label28:
        interfaceinvoke r3.<org.w3c.dom.Element: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r44);

     label29:
        $z0 = staticinvoke <org.apache.poi.hssf.converter.ExcelToHtmlUtils: boolean isEmpty(java.lang.String)>(r42);

        if $z0 == 0 goto label30;

        if $s16 != 0 goto label30;

        $z10 = 1;

        goto label31;

     label30:
        $z10 = 0;

     label31:
        return $z10;
    }

    protected void processColumnHeaders(org.apache.poi.hssf.usermodel.HSSFSheet, int, org.w3c.dom.Element)
    {
        org.w3c.dom.Text $r10;
        org.apache.poi.hssf.converter.ExcelToHtmlConverter r0;
        org.apache.poi.hwpf.converter.HtmlDocumentFacade $r1, $r4, $r6, $r9, $r12;
        int i0, i1;
        org.apache.poi.hssf.usermodel.HSSFSheet r11;
        java.lang.String $r8;
        boolean $z0, $z1, $z2;
        org.w3c.dom.Element $r2, r3, $r5, $r7, $r13;

        r0 := @this: org.apache.poi.hssf.converter.ExcelToHtmlConverter;

        r11 := @parameter0: org.apache.poi.hssf.usermodel.HSSFSheet;

        i0 := @parameter1: int;

        r3 := @parameter2: org.w3c.dom.Element;

        $r1 = r0.<org.apache.poi.hssf.converter.ExcelToHtmlConverter: org.apache.poi.hwpf.converter.HtmlDocumentFacade htmlDocumentFacade>;

        $r2 = virtualinvoke $r1.<org.apache.poi.hwpf.converter.HtmlDocumentFacade: org.w3c.dom.Element createTableHeader()>();

        interfaceinvoke r3.<org.w3c.dom.Element: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r2);

        $r4 = r0.<org.apache.poi.hssf.converter.ExcelToHtmlConverter: org.apache.poi.hwpf.converter.HtmlDocumentFacade htmlDocumentFacade>;

        $r5 = virtualinvoke $r4.<org.apache.poi.hwpf.converter.HtmlDocumentFacade: org.w3c.dom.Element createTableRow()>();

        $z0 = virtualinvoke r0.<org.apache.poi.hssf.converter.ExcelToHtmlConverter: boolean isOutputRowNumbers()>();

        if $z0 == 0 goto label1;

        $r12 = r0.<org.apache.poi.hssf.converter.ExcelToHtmlConverter: org.apache.poi.hwpf.converter.HtmlDocumentFacade htmlDocumentFacade>;

        $r13 = virtualinvoke $r12.<org.apache.poi.hwpf.converter.HtmlDocumentFacade: org.w3c.dom.Element createTableHeaderCell()>();

        interfaceinvoke $r5.<org.w3c.dom.Element: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r13);

     label1:
        i1 = 0;

     label2:
        if i1 >= i0 goto label5;

        $z1 = virtualinvoke r0.<org.apache.poi.hssf.converter.ExcelToHtmlConverter: boolean isOutputHiddenColumns()>();

        if $z1 != 0 goto label3;

        $z2 = virtualinvoke r11.<org.apache.poi.hssf.usermodel.HSSFSheet: boolean isColumnHidden(int)>(i1);

        if $z2 == 0 goto label3;

        goto label4;

     label3:
        $r6 = r0.<org.apache.poi.hssf.converter.ExcelToHtmlConverter: org.apache.poi.hwpf.converter.HtmlDocumentFacade htmlDocumentFacade>;

        $r7 = virtualinvoke $r6.<org.apache.poi.hwpf.converter.HtmlDocumentFacade: org.w3c.dom.Element createTableHeaderCell()>();

        $r8 = virtualinvoke r0.<org.apache.poi.hssf.converter.ExcelToHtmlConverter: java.lang.String getColumnName(int)>(i1);

        $r9 = r0.<org.apache.poi.hssf.converter.ExcelToHtmlConverter: org.apache.poi.hwpf.converter.HtmlDocumentFacade htmlDocumentFacade>;

        $r10 = virtualinvoke $r9.<org.apache.poi.hwpf.converter.HtmlDocumentFacade: org.w3c.dom.Text createText(java.lang.String)>($r8);

        interfaceinvoke $r7.<org.w3c.dom.Element: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r10);

        interfaceinvoke $r5.<org.w3c.dom.Element: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r7);

     label4:
        i1 = i1 + 1;

        goto label2;

     label5:
        interfaceinvoke $r2.<org.w3c.dom.Element: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r5);

        return;
    }

    protected void processColumnWidths(org.apache.poi.hssf.usermodel.HSSFSheet, int, org.w3c.dom.Element)
    {
        org.apache.poi.hssf.converter.ExcelToHtmlConverter r0;
        org.apache.poi.hwpf.converter.HtmlDocumentFacade $r1, $r4, $r8;
        int i0, $i1, i2;
        org.apache.poi.hssf.usermodel.HSSFSheet r6;
        java.lang.String $r7;
        boolean $z0, $z1, $z2;
        org.w3c.dom.Element $r2, r3, $r5, $r9;

        r0 := @this: org.apache.poi.hssf.converter.ExcelToHtmlConverter;

        r6 := @parameter0: org.apache.poi.hssf.usermodel.HSSFSheet;

        i0 := @parameter1: int;

        r3 := @parameter2: org.w3c.dom.Element;

        $r1 = r0.<org.apache.poi.hssf.converter.ExcelToHtmlConverter: org.apache.poi.hwpf.converter.HtmlDocumentFacade htmlDocumentFacade>;

        $r2 = virtualinvoke $r1.<org.apache.poi.hwpf.converter.HtmlDocumentFacade: org.w3c.dom.Element createTableColumnGroup()>();

        $z0 = virtualinvoke r0.<org.apache.poi.hssf.converter.ExcelToHtmlConverter: boolean isOutputRowNumbers()>();

        if $z0 == 0 goto label1;

        $r8 = r0.<org.apache.poi.hssf.converter.ExcelToHtmlConverter: org.apache.poi.hwpf.converter.HtmlDocumentFacade htmlDocumentFacade>;

        $r9 = virtualinvoke $r8.<org.apache.poi.hwpf.converter.HtmlDocumentFacade: org.w3c.dom.Element createTableColumn()>();

        interfaceinvoke $r2.<org.w3c.dom.Element: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r9);

     label1:
        i2 = 0;

     label2:
        if i2 >= i0 goto label5;

        $z1 = virtualinvoke r0.<org.apache.poi.hssf.converter.ExcelToHtmlConverter: boolean isOutputHiddenColumns()>();

        if $z1 != 0 goto label3;

        $z2 = virtualinvoke r6.<org.apache.poi.hssf.usermodel.HSSFSheet: boolean isColumnHidden(int)>(i2);

        if $z2 == 0 goto label3;

        goto label4;

     label3:
        $r4 = r0.<org.apache.poi.hssf.converter.ExcelToHtmlConverter: org.apache.poi.hwpf.converter.HtmlDocumentFacade htmlDocumentFacade>;

        $r5 = virtualinvoke $r4.<org.apache.poi.hwpf.converter.HtmlDocumentFacade: org.w3c.dom.Element createTableColumn()>();

        $i1 = staticinvoke <org.apache.poi.hssf.converter.ExcelToHtmlConverter: int getColumnWidth(org.apache.poi.hssf.usermodel.HSSFSheet,int)>(r6, i2);

        $r7 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i1);

        interfaceinvoke $r5.<org.w3c.dom.Element: void setAttribute(java.lang.String,java.lang.String)>("width", $r7);

        interfaceinvoke $r2.<org.w3c.dom.Element: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r5);

     label4:
        i2 = i2 + 1;

        goto label2;

     label5:
        interfaceinvoke r3.<org.w3c.dom.Element: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r2);

        return;
    }

    protected void processDocumentInformation(org.apache.poi.hpsf.SummaryInformation)
    {
        org.apache.poi.hpsf.SummaryInformation r0;
        org.apache.poi.hssf.converter.ExcelToHtmlConverter r5;
        org.apache.poi.hwpf.converter.HtmlDocumentFacade $r6, $r8, $r10, $r12;
        java.lang.String $r1, $r2, $r3, $r4, $r7, $r9, $r11, $r13;
        boolean $z0, $z1, $z2, $z3;

        r5 := @this: org.apache.poi.hssf.converter.ExcelToHtmlConverter;

        r0 := @parameter0: org.apache.poi.hpsf.SummaryInformation;

        $r1 = virtualinvoke r0.<org.apache.poi.hpsf.SummaryInformation: java.lang.String getTitle()>();

        $z0 = staticinvoke <org.apache.poi.hssf.converter.ExcelToHtmlUtils: boolean isNotEmpty(java.lang.String)>($r1);

        if $z0 == 0 goto label1;

        $r12 = r5.<org.apache.poi.hssf.converter.ExcelToHtmlConverter: org.apache.poi.hwpf.converter.HtmlDocumentFacade htmlDocumentFacade>;

        $r13 = virtualinvoke r0.<org.apache.poi.hpsf.SummaryInformation: java.lang.String getTitle()>();

        virtualinvoke $r12.<org.apache.poi.hwpf.converter.HtmlDocumentFacade: void setTitle(java.lang.String)>($r13);

     label1:
        $r2 = virtualinvoke r0.<org.apache.poi.hpsf.SummaryInformation: java.lang.String getAuthor()>();

        $z1 = staticinvoke <org.apache.poi.hssf.converter.ExcelToHtmlUtils: boolean isNotEmpty(java.lang.String)>($r2);

        if $z1 == 0 goto label2;

        $r10 = r5.<org.apache.poi.hssf.converter.ExcelToHtmlConverter: org.apache.poi.hwpf.converter.HtmlDocumentFacade htmlDocumentFacade>;

        $r11 = virtualinvoke r0.<org.apache.poi.hpsf.SummaryInformation: java.lang.String getAuthor()>();

        virtualinvoke $r10.<org.apache.poi.hwpf.converter.HtmlDocumentFacade: void addAuthor(java.lang.String)>($r11);

     label2:
        $r3 = virtualinvoke r0.<org.apache.poi.hpsf.SummaryInformation: java.lang.String getKeywords()>();

        $z2 = staticinvoke <org.apache.poi.hssf.converter.ExcelToHtmlUtils: boolean isNotEmpty(java.lang.String)>($r3);

        if $z2 == 0 goto label3;

        $r8 = r5.<org.apache.poi.hssf.converter.ExcelToHtmlConverter: org.apache.poi.hwpf.converter.HtmlDocumentFacade htmlDocumentFacade>;

        $r9 = virtualinvoke r0.<org.apache.poi.hpsf.SummaryInformation: java.lang.String getKeywords()>();

        virtualinvoke $r8.<org.apache.poi.hwpf.converter.HtmlDocumentFacade: void addKeywords(java.lang.String)>($r9);

     label3:
        $r4 = virtualinvoke r0.<org.apache.poi.hpsf.SummaryInformation: java.lang.String getComments()>();

        $z3 = staticinvoke <org.apache.poi.hssf.converter.ExcelToHtmlUtils: boolean isNotEmpty(java.lang.String)>($r4);

        if $z3 == 0 goto label4;

        $r6 = r5.<org.apache.poi.hssf.converter.ExcelToHtmlConverter: org.apache.poi.hwpf.converter.HtmlDocumentFacade htmlDocumentFacade>;

        $r7 = virtualinvoke r0.<org.apache.poi.hpsf.SummaryInformation: java.lang.String getComments()>();

        virtualinvoke $r6.<org.apache.poi.hwpf.converter.HtmlDocumentFacade: void addDescription(java.lang.String)>($r7);

     label4:
        return;
    }

    protected int processRow(org.apache.poi.ss.util.CellRangeAddress[][], org.apache.poi.hssf.usermodel.HSSFRow, org.w3c.dom.Element)
    {
        org.apache.poi.hssf.usermodel.HSSFCell $r6, $r13, $r14;
        org.apache.poi.hssf.usermodel.HSSFRow r0;
        org.apache.poi.hssf.converter.ExcelToHtmlConverter r3;
        org.apache.poi.hssf.usermodel.HSSFSheet $r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, z8, z9;
        org.apache.poi.ss.util.CellRangeAddress $r5;
        float $f0, $f1;
        java.util.ArrayList $r19;
        short $s0, $s4;
        org.apache.poi.hwpf.converter.HtmlDocumentFacade $r15, $r17;
        int $i1, $i2, $i3, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, i21, i22, i23, i24, $i25, $i26, $i27, $i28;
        java.lang.String $r11, $r12;
        org.apache.poi.ss.util.CellRangeAddress[][] r4;
        java.util.Iterator $r7;
        org.w3c.dom.Element r8, r10, $r16, $r18;
        java.lang.Object $r9;

        r3 := @this: org.apache.poi.hssf.converter.ExcelToHtmlConverter;

        r4 := @parameter0: org.apache.poi.ss.util.CellRangeAddress[][];

        r0 := @parameter1: org.apache.poi.hssf.usermodel.HSSFRow;

        r8 := @parameter2: org.w3c.dom.Element;

        $r1 = virtualinvoke r0.<org.apache.poi.hssf.usermodel.HSSFRow: org.apache.poi.hssf.usermodel.HSSFSheet getSheet()>();

        $s0 = virtualinvoke r0.<org.apache.poi.hssf.usermodel.HSSFRow: short getLastCellNum()>();

        $i25 = (int) $s0;

        if $i25 > 0 goto label01;

        return 0;

     label01:
        $r19 = new java.util.ArrayList;

        $i26 = (int) $s0;

        specialinvoke $r19.<java.util.ArrayList: void <init>(int)>($i26);

        $z0 = virtualinvoke r3.<org.apache.poi.hssf.converter.ExcelToHtmlConverter: boolean isOutputRowNumbers()>();

        if $z0 == 0 goto label02;

        $r15 = r3.<org.apache.poi.hssf.converter.ExcelToHtmlConverter: org.apache.poi.hwpf.converter.HtmlDocumentFacade htmlDocumentFacade>;

        $r16 = virtualinvoke $r15.<org.apache.poi.hwpf.converter.HtmlDocumentFacade: org.w3c.dom.Element createTableHeaderCell()>();

        virtualinvoke r3.<org.apache.poi.hssf.converter.ExcelToHtmlConverter: void processRowNumber(org.apache.poi.hssf.usermodel.HSSFRow,org.w3c.dom.Element)>(r0, $r16);

        interfaceinvoke $r19.<java.util.List: boolean add(java.lang.Object)>($r16);

     label02:
        i21 = 0;

        i22 = 0;

     label03:
        $i27 = (int) $s0;

        if i22 >= $i27 goto label20;

        $z1 = virtualinvoke r3.<org.apache.poi.hssf.converter.ExcelToHtmlConverter: boolean isOutputHiddenColumns()>();

        if $z1 != 0 goto label04;

        $z7 = virtualinvoke $r1.<org.apache.poi.hssf.usermodel.HSSFSheet: boolean isColumnHidden(int)>(i22);

        if $z7 == 0 goto label04;

        goto label19;

     label04:
        $i2 = virtualinvoke r0.<org.apache.poi.hssf.usermodel.HSSFRow: int getRowNum()>();

        $r5 = staticinvoke <org.apache.poi.hssf.converter.ExcelToHtmlUtils: org.apache.poi.ss.util.CellRangeAddress getMergedRange(org.apache.poi.ss.util.CellRangeAddress[][],int,int)>(r4, $i2, i22);

        if $r5 == null goto label05;

        $i18 = virtualinvoke $r5.<org.apache.poi.ss.util.CellRangeAddress: int getFirstColumn()>();

        if $i18 != i22 goto label19;

        $i19 = virtualinvoke $r5.<org.apache.poi.ss.util.CellRangeAddress: int getFirstRow()>();

        $i20 = virtualinvoke r0.<org.apache.poi.hssf.usermodel.HSSFRow: int getRowNum()>();

        if $i19 == $i20 goto label05;

        goto label19;

     label05:
        $r6 = virtualinvoke r0.<org.apache.poi.hssf.usermodel.HSSFRow: org.apache.poi.hssf.usermodel.HSSFCell getCell(int)>(i22);

        i23 = 0;

        $z2 = virtualinvoke r3.<org.apache.poi.hssf.converter.ExcelToHtmlConverter: boolean isUseDivsToSpan()>();

        if $z2 == 0 goto label11;

        i23 = staticinvoke <org.apache.poi.hssf.converter.ExcelToHtmlConverter: int getColumnWidth(org.apache.poi.hssf.usermodel.HSSFSheet,int)>($r1, i22);

        z8 = 0;

        i24 = i22 + 1;

     label06:
        $i28 = (int) $s0;

        if i24 >= $i28 goto label10;

        $z4 = virtualinvoke r3.<org.apache.poi.hssf.converter.ExcelToHtmlConverter: boolean isOutputHiddenColumns()>();

        if $z4 != 0 goto label07;

        $z6 = virtualinvoke $r1.<org.apache.poi.hssf.usermodel.HSSFSheet: boolean isColumnHidden(int)>(i24);

        if $z6 == 0 goto label07;

        goto label09;

     label07:
        $r13 = virtualinvoke r0.<org.apache.poi.hssf.usermodel.HSSFRow: org.apache.poi.hssf.usermodel.HSSFCell getCell(int)>(i24);

        if $r13 == null goto label08;

        $r14 = virtualinvoke r0.<org.apache.poi.hssf.usermodel.HSSFRow: org.apache.poi.hssf.usermodel.HSSFCell getCell(int)>(i24);

        $z5 = virtualinvoke r3.<org.apache.poi.hssf.converter.ExcelToHtmlConverter: boolean isTextEmpty(org.apache.poi.hssf.usermodel.HSSFCell)>($r14);

        if $z5 != 0 goto label08;

        z8 = 1;

        goto label10;

     label08:
        $i17 = staticinvoke <org.apache.poi.hssf.converter.ExcelToHtmlConverter: int getColumnWidth(org.apache.poi.hssf.usermodel.HSSFSheet,int)>($r1, i24);

        i23 = i23 + $i17;

     label09:
        i24 = i24 + 1;

        goto label06;

     label10:
        if z8 != 0 goto label11;

        i23 = 2147483647;

     label11:
        $r17 = r3.<org.apache.poi.hssf.converter.ExcelToHtmlConverter: org.apache.poi.hwpf.converter.HtmlDocumentFacade htmlDocumentFacade>;

        $r18 = virtualinvoke $r17.<org.apache.poi.hwpf.converter.HtmlDocumentFacade: org.w3c.dom.Element createTableCell()>();

        if $r5 == null goto label13;

        $i5 = virtualinvoke $r5.<org.apache.poi.ss.util.CellRangeAddress: int getFirstColumn()>();

        $i6 = virtualinvoke $r5.<org.apache.poi.ss.util.CellRangeAddress: int getLastColumn()>();

        if $i5 == $i6 goto label12;

        $i13 = virtualinvoke $r5.<org.apache.poi.ss.util.CellRangeAddress: int getLastColumn()>();

        $i14 = virtualinvoke $r5.<org.apache.poi.ss.util.CellRangeAddress: int getFirstColumn()>();

        $i15 = $i13 - $i14;

        $i16 = $i15 + 1;

        $r12 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i16);

        interfaceinvoke $r18.<org.w3c.dom.Element: void setAttribute(java.lang.String,java.lang.String)>("colspan", $r12);

     label12:
        $i7 = virtualinvoke $r5.<org.apache.poi.ss.util.CellRangeAddress: int getFirstRow()>();

        $i8 = virtualinvoke $r5.<org.apache.poi.ss.util.CellRangeAddress: int getLastRow()>();

        if $i7 == $i8 goto label13;

        $i9 = virtualinvoke $r5.<org.apache.poi.ss.util.CellRangeAddress: int getLastRow()>();

        $i10 = virtualinvoke $r5.<org.apache.poi.ss.util.CellRangeAddress: int getFirstRow()>();

        $i11 = $i9 - $i10;

        $i12 = $i11 + 1;

        $r11 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i12);

        interfaceinvoke $r18.<org.w3c.dom.Element: void setAttribute(java.lang.String,java.lang.String)>("rowspan", $r11);

     label13:
        if $r6 == null goto label14;

        $i3 = staticinvoke <org.apache.poi.hssf.converter.ExcelToHtmlConverter: int getColumnWidth(org.apache.poi.hssf.usermodel.HSSFSheet,int)>($r1, i22);

        $s4 = virtualinvoke r0.<org.apache.poi.hssf.usermodel.HSSFRow: short getHeight()>();

        $f0 = (float) $s4;

        $f1 = $f0 / 20.0F;

        z9 = virtualinvoke r3.<org.apache.poi.hssf.converter.ExcelToHtmlConverter: boolean processCell(org.apache.poi.hssf.usermodel.HSSFCell,org.w3c.dom.Element,int,int,float)>($r6, $r18, $i3, i23, $f1);

        goto label15;

     label14:
        z9 = 1;

     label15:
        if z9 == 0 goto label16;

        interfaceinvoke $r19.<java.util.List: boolean add(java.lang.Object)>($r18);

        goto label19;

     label16:
        $r7 = interfaceinvoke $r19.<java.util.List: java.util.Iterator iterator()>();

     label17:
        $z3 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label18;

        $r9 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r10 = (org.w3c.dom.Element) $r9;

        interfaceinvoke r8.<org.w3c.dom.Element: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>(r10);

        goto label17;

     label18:
        interfaceinvoke $r19.<java.util.List: void clear()>();

        interfaceinvoke r8.<org.w3c.dom.Element: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r18);

        i21 = i22;

     label19:
        i22 = i22 + 1;

        goto label03;

     label20:
        $i1 = i21 + 1;

        return $i1;
    }

    protected void processRowNumber(org.apache.poi.hssf.usermodel.HSSFRow, org.w3c.dom.Element)
    {
        org.w3c.dom.Text $r5;
        org.w3c.dom.Element r0;
        org.apache.poi.hssf.converter.ExcelToHtmlConverter r1;
        org.apache.poi.hwpf.converter.HtmlDocumentFacade $r3;
        java.lang.String $r4;
        org.apache.poi.hssf.usermodel.HSSFRow r2;

        r1 := @this: org.apache.poi.hssf.converter.ExcelToHtmlConverter;

        r2 := @parameter0: org.apache.poi.hssf.usermodel.HSSFRow;

        r0 := @parameter1: org.w3c.dom.Element;

        interfaceinvoke r0.<org.w3c.dom.Element: void setAttribute(java.lang.String,java.lang.String)>("class", "rownumber");

        $r3 = r1.<org.apache.poi.hssf.converter.ExcelToHtmlConverter: org.apache.poi.hwpf.converter.HtmlDocumentFacade htmlDocumentFacade>;

        $r4 = virtualinvoke r1.<org.apache.poi.hssf.converter.ExcelToHtmlConverter: java.lang.String getRowName(org.apache.poi.hssf.usermodel.HSSFRow)>(r2);

        $r5 = virtualinvoke $r3.<org.apache.poi.hwpf.converter.HtmlDocumentFacade: org.w3c.dom.Text createText(java.lang.String)>($r4);

        interfaceinvoke r0.<org.w3c.dom.Element: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r5);

        return;
    }

    protected void processSheet(org.apache.poi.hssf.usermodel.HSSFSheet)
    {
        org.apache.poi.hssf.usermodel.HSSFRow $r14;
        org.apache.poi.hssf.converter.ExcelToHtmlConverter r0;
        org.apache.poi.hssf.usermodel.HSSFSheet r3;
        boolean $z0, $z1, $z2, $z3, $z4;
        float $f0, $f1;
        java.lang.StringBuilder $r17, $r20, $r21, $r22;
        java.util.ArrayList $r11;
        short $s2;
        org.apache.poi.hwpf.converter.HtmlDocumentFacade $r1, $r4, $r7, $r8, $r12, $r15, $r18;
        int $i0, $i1, $i3, i4, i5;
        java.lang.String $r6, $r19, $r23;
        org.apache.poi.ss.util.CellRangeAddress[][] $r10;
        java.util.Iterator $r24;
        org.w3c.dom.Element $r2, $r5, $r9, $r13, $r16, r26;
        java.lang.Object $r25;

        r0 := @this: org.apache.poi.hssf.converter.ExcelToHtmlConverter;

        r3 := @parameter0: org.apache.poi.hssf.usermodel.HSSFSheet;

        $r1 = r0.<org.apache.poi.hssf.converter.ExcelToHtmlConverter: org.apache.poi.hwpf.converter.HtmlDocumentFacade htmlDocumentFacade>;

        $r2 = virtualinvoke $r1.<org.apache.poi.hwpf.converter.HtmlDocumentFacade: org.w3c.dom.Element getBody()>();

        virtualinvoke r0.<org.apache.poi.hssf.converter.ExcelToHtmlConverter: void processSheetHeader(org.w3c.dom.Element,org.apache.poi.hssf.usermodel.HSSFSheet)>($r2, r3);

        $i0 = virtualinvoke r3.<org.apache.poi.hssf.usermodel.HSSFSheet: int getPhysicalNumberOfRows()>();

        if $i0 > 0 goto label01;

        return;

     label01:
        $r4 = r0.<org.apache.poi.hssf.converter.ExcelToHtmlConverter: org.apache.poi.hwpf.converter.HtmlDocumentFacade htmlDocumentFacade>;

        $r5 = virtualinvoke $r4.<org.apache.poi.hwpf.converter.HtmlDocumentFacade: org.w3c.dom.Element createTable()>();

        $r7 = r0.<org.apache.poi.hssf.converter.ExcelToHtmlConverter: org.apache.poi.hwpf.converter.HtmlDocumentFacade htmlDocumentFacade>;

        $r6 = r0.<org.apache.poi.hssf.converter.ExcelToHtmlConverter: java.lang.String cssClassPrefixTable>;

        virtualinvoke $r7.<org.apache.poi.hwpf.converter.HtmlDocumentFacade: void addStyleClass(org.w3c.dom.Element,java.lang.String,java.lang.String)>($r5, $r6, "border-collapse:collapse;border-spacing:0;");

        $r8 = r0.<org.apache.poi.hssf.converter.ExcelToHtmlConverter: org.apache.poi.hwpf.converter.HtmlDocumentFacade htmlDocumentFacade>;

        $r9 = virtualinvoke $r8.<org.apache.poi.hwpf.converter.HtmlDocumentFacade: org.w3c.dom.Element createTableBody()>();

        $r10 = staticinvoke <org.apache.poi.hssf.converter.ExcelToHtmlUtils: org.apache.poi.ss.util.CellRangeAddress[][] buildMergedRangesMap(org.apache.poi.hssf.usermodel.HSSFSheet)>(r3);

        $r11 = new java.util.ArrayList;

        specialinvoke $r11.<java.util.ArrayList: void <init>(int)>($i0);

        i4 = 1;

        i5 = virtualinvoke r3.<org.apache.poi.hssf.usermodel.HSSFSheet: int getFirstRowNum()>();

     label02:
        $i1 = virtualinvoke r3.<org.apache.poi.hssf.usermodel.HSSFSheet: int getLastRowNum()>();

        if i5 > $i1 goto label11;

        $r14 = virtualinvoke r3.<org.apache.poi.hssf.usermodel.HSSFSheet: org.apache.poi.hssf.usermodel.HSSFRow getRow(int)>(i5);

        if $r14 != null goto label03;

        goto label10;

     label03:
        $z1 = virtualinvoke r0.<org.apache.poi.hssf.converter.ExcelToHtmlConverter: boolean isOutputHiddenRows()>();

        if $z1 != 0 goto label04;

        $z4 = virtualinvoke $r14.<org.apache.poi.hssf.usermodel.HSSFRow: boolean getZeroHeight()>();

        if $z4 == 0 goto label04;

        goto label10;

     label04:
        $r15 = r0.<org.apache.poi.hssf.converter.ExcelToHtmlConverter: org.apache.poi.hwpf.converter.HtmlDocumentFacade htmlDocumentFacade>;

        $r16 = virtualinvoke $r15.<org.apache.poi.hwpf.converter.HtmlDocumentFacade: org.w3c.dom.Element createTableRow()>();

        $r18 = r0.<org.apache.poi.hssf.converter.ExcelToHtmlConverter: org.apache.poi.hwpf.converter.HtmlDocumentFacade htmlDocumentFacade>;

        $r19 = r0.<org.apache.poi.hssf.converter.ExcelToHtmlConverter: java.lang.String cssClassPrefixRow>;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("height:");

        $s2 = virtualinvoke $r14.<org.apache.poi.hssf.usermodel.HSSFRow: short getHeight()>();

        $f0 = (float) $s2;

        $f1 = $f0 / 20.0F;

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f1);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("pt;");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r18.<org.apache.poi.hwpf.converter.HtmlDocumentFacade: void addStyleClass(org.w3c.dom.Element,java.lang.String,java.lang.String)>($r16, $r19, $r23);

        $i3 = virtualinvoke r0.<org.apache.poi.hssf.converter.ExcelToHtmlConverter: int processRow(org.apache.poi.ss.util.CellRangeAddress[][],org.apache.poi.hssf.usermodel.HSSFRow,org.w3c.dom.Element)>($r10, $r14, $r16);

        if $i3 != 0 goto label05;

        interfaceinvoke $r11.<java.util.List: boolean add(java.lang.Object)>($r16);

        goto label09;

     label05:
        $z2 = interfaceinvoke $r11.<java.util.List: boolean isEmpty()>();

        if $z2 != 0 goto label08;

        $r24 = interfaceinvoke $r11.<java.util.List: java.util.Iterator iterator()>();

     label06:
        $z3 = interfaceinvoke $r24.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label07;

        $r25 = interfaceinvoke $r24.<java.util.Iterator: java.lang.Object next()>();

        r26 = (org.w3c.dom.Element) $r25;

        interfaceinvoke $r9.<org.w3c.dom.Element: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>(r26);

        goto label06;

     label07:
        interfaceinvoke $r11.<java.util.List: void clear()>();

     label08:
        interfaceinvoke $r9.<org.w3c.dom.Element: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r16);

     label09:
        i4 = staticinvoke <java.lang.Math: int max(int,int)>(i4, $i3);

     label10:
        i5 = i5 + 1;

        goto label02;

     label11:
        virtualinvoke r0.<org.apache.poi.hssf.converter.ExcelToHtmlConverter: void processColumnWidths(org.apache.poi.hssf.usermodel.HSSFSheet,int,org.w3c.dom.Element)>(r3, i4, $r5);

        $z0 = virtualinvoke r0.<org.apache.poi.hssf.converter.ExcelToHtmlConverter: boolean isOutputColumnHeaders()>();

        if $z0 == 0 goto label12;

        virtualinvoke r0.<org.apache.poi.hssf.converter.ExcelToHtmlConverter: void processColumnHeaders(org.apache.poi.hssf.usermodel.HSSFSheet,int,org.w3c.dom.Element)>(r3, i4, $r5);

     label12:
        interfaceinvoke $r5.<org.w3c.dom.Element: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r9);

        $r12 = r0.<org.apache.poi.hssf.converter.ExcelToHtmlConverter: org.apache.poi.hwpf.converter.HtmlDocumentFacade htmlDocumentFacade>;

        $r13 = virtualinvoke $r12.<org.apache.poi.hwpf.converter.HtmlDocumentFacade: org.w3c.dom.Element getBody()>();

        interfaceinvoke $r13.<org.w3c.dom.Element: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r5);

        return;
    }

    protected void processSheetHeader(org.w3c.dom.Element, org.apache.poi.hssf.usermodel.HSSFSheet)
    {
        org.w3c.dom.Text $r6;
        org.w3c.dom.Element $r2, r7;
        org.apache.poi.hssf.converter.ExcelToHtmlConverter r0;
        org.apache.poi.hwpf.converter.HtmlDocumentFacade $r1, $r4;
        org.apache.poi.hssf.usermodel.HSSFSheet r3;
        java.lang.String $r5;

        r0 := @this: org.apache.poi.hssf.converter.ExcelToHtmlConverter;

        r7 := @parameter0: org.w3c.dom.Element;

        r3 := @parameter1: org.apache.poi.hssf.usermodel.HSSFSheet;

        $r1 = r0.<org.apache.poi.hssf.converter.ExcelToHtmlConverter: org.apache.poi.hwpf.converter.HtmlDocumentFacade htmlDocumentFacade>;

        $r2 = virtualinvoke $r1.<org.apache.poi.hwpf.converter.HtmlDocumentFacade: org.w3c.dom.Element createHeader2()>();

        $r4 = r0.<org.apache.poi.hssf.converter.ExcelToHtmlConverter: org.apache.poi.hwpf.converter.HtmlDocumentFacade htmlDocumentFacade>;

        $r5 = virtualinvoke r3.<org.apache.poi.hssf.usermodel.HSSFSheet: java.lang.String getSheetName()>();

        $r6 = virtualinvoke $r4.<org.apache.poi.hwpf.converter.HtmlDocumentFacade: org.w3c.dom.Text createText(java.lang.String)>($r5);

        interfaceinvoke $r2.<org.w3c.dom.Element: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r6);

        interfaceinvoke r7.<org.w3c.dom.Element: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r2);

        return;
    }

    public void processWorkbook(org.apache.poi.hssf.usermodel.HSSFWorkbook)
    {
        org.apache.poi.hpsf.SummaryInformation $r1;
        org.apache.poi.hssf.converter.ExcelToHtmlConverter r2;
        org.apache.poi.hwpf.converter.HtmlDocumentFacade $r3, $r6, $r9;
        org.apache.poi.hssf.usermodel.HSSFSheet $r4;
        int i0, $i1;
        java.lang.String $r5, $r7, $r8, $r10;
        org.apache.poi.hssf.usermodel.HSSFWorkbook r0;
        boolean $z0;

        r2 := @this: org.apache.poi.hssf.converter.ExcelToHtmlConverter;

        r0 := @parameter0: org.apache.poi.hssf.usermodel.HSSFWorkbook;

        $r1 = virtualinvoke r0.<org.apache.poi.hssf.usermodel.HSSFWorkbook: org.apache.poi.hpsf.SummaryInformation getSummaryInformation()>();

        if $r1 == null goto label1;

        virtualinvoke r2.<org.apache.poi.hssf.converter.ExcelToHtmlConverter: void processDocumentInformation(org.apache.poi.hpsf.SummaryInformation)>($r1);

     label1:
        $z0 = virtualinvoke r2.<org.apache.poi.hssf.converter.ExcelToHtmlConverter: boolean isUseDivsToSpan()>();

        if $z0 == 0 goto label2;

        $r6 = r2.<org.apache.poi.hssf.converter.ExcelToHtmlConverter: org.apache.poi.hwpf.converter.HtmlDocumentFacade htmlDocumentFacade>;

        $r5 = r2.<org.apache.poi.hssf.converter.ExcelToHtmlConverter: java.lang.String cssClassPrefixCell>;

        $r7 = virtualinvoke $r6.<org.apache.poi.hwpf.converter.HtmlDocumentFacade: java.lang.String getOrCreateCssClass(java.lang.String,java.lang.String)>($r5, "padding:0;margin:0;align:left;vertical-align:top;");

        r2.<org.apache.poi.hssf.converter.ExcelToHtmlConverter: java.lang.String cssClassContainerCell> = $r7;

        $r9 = r2.<org.apache.poi.hssf.converter.ExcelToHtmlConverter: org.apache.poi.hwpf.converter.HtmlDocumentFacade htmlDocumentFacade>;

        $r8 = r2.<org.apache.poi.hssf.converter.ExcelToHtmlConverter: java.lang.String cssClassPrefixDiv>;

        $r10 = virtualinvoke $r9.<org.apache.poi.hwpf.converter.HtmlDocumentFacade: java.lang.String getOrCreateCssClass(java.lang.String,java.lang.String)>($r8, "position:relative;");

        r2.<org.apache.poi.hssf.converter.ExcelToHtmlConverter: java.lang.String cssClassContainerDiv> = $r10;

     label2:
        i0 = 0;

     label3:
        $i1 = virtualinvoke r0.<org.apache.poi.hssf.usermodel.HSSFWorkbook: int getNumberOfSheets()>();

        if i0 >= $i1 goto label4;

        $r4 = virtualinvoke r0.<org.apache.poi.hssf.usermodel.HSSFWorkbook: org.apache.poi.hssf.usermodel.HSSFSheet getSheetAt(int)>(i0);

        virtualinvoke r2.<org.apache.poi.hssf.converter.ExcelToHtmlConverter: void processSheet(org.apache.poi.hssf.usermodel.HSSFSheet)>($r4);

        i0 = i0 + 1;

        goto label3;

     label4:
        $r3 = r2.<org.apache.poi.hssf.converter.ExcelToHtmlConverter: org.apache.poi.hwpf.converter.HtmlDocumentFacade htmlDocumentFacade>;

        virtualinvoke $r3.<org.apache.poi.hwpf.converter.HtmlDocumentFacade: void updateStylesheet()>();

        return;
    }

    public void setCssClassPrefixCell(java.lang.String)
    {
        java.lang.String r1;
        org.apache.poi.hssf.converter.ExcelToHtmlConverter r0;

        r0 := @this: org.apache.poi.hssf.converter.ExcelToHtmlConverter;

        r1 := @parameter0: java.lang.String;

        r0.<org.apache.poi.hssf.converter.ExcelToHtmlConverter: java.lang.String cssClassPrefixCell> = r1;

        return;
    }

    public void setCssClassPrefixDiv(java.lang.String)
    {
        java.lang.String r1;
        org.apache.poi.hssf.converter.ExcelToHtmlConverter r0;

        r0 := @this: org.apache.poi.hssf.converter.ExcelToHtmlConverter;

        r1 := @parameter0: java.lang.String;

        r0.<org.apache.poi.hssf.converter.ExcelToHtmlConverter: java.lang.String cssClassPrefixDiv> = r1;

        return;
    }

    public void setCssClassPrefixRow(java.lang.String)
    {
        java.lang.String r1;
        org.apache.poi.hssf.converter.ExcelToHtmlConverter r0;

        r0 := @this: org.apache.poi.hssf.converter.ExcelToHtmlConverter;

        r1 := @parameter0: java.lang.String;

        r0.<org.apache.poi.hssf.converter.ExcelToHtmlConverter: java.lang.String cssClassPrefixRow> = r1;

        return;
    }

    public void setCssClassPrefixTable(java.lang.String)
    {
        java.lang.String r1;
        org.apache.poi.hssf.converter.ExcelToHtmlConverter r0;

        r0 := @this: org.apache.poi.hssf.converter.ExcelToHtmlConverter;

        r1 := @parameter0: java.lang.String;

        r0.<org.apache.poi.hssf.converter.ExcelToHtmlConverter: java.lang.String cssClassPrefixTable> = r1;

        return;
    }

    public void setUseDivsToSpan(boolean)
    {
        org.apache.poi.hssf.converter.ExcelToHtmlConverter r0;
        boolean z0;

        r0 := @this: org.apache.poi.hssf.converter.ExcelToHtmlConverter;

        z0 := @parameter0: boolean;

        r0.<org.apache.poi.hssf.converter.ExcelToHtmlConverter: boolean useDivsToSpan> = z0;

        return;
    }

    static void <clinit>()
    {
        org.apache.poi.util.POILogger $r0;

        $r0 = staticinvoke <org.apache.poi.util.POILogFactory: org.apache.poi.util.POILogger getLogger(java.lang.Class)>(class "Lorg/apache/poi/hssf/converter/ExcelToHtmlConverter;");

        <org.apache.poi.hssf.converter.ExcelToHtmlConverter: org.apache.poi.util.POILogger logger> = $r0;

        return;
    }
}
