public abstract class com.google.common.collect.ImmutableMap extends java.lang.Object implements java.util.Map, java.io.Serializable
{

    public static com.google.common.collect.ImmutableMap of()
    {
        com.google.common.collect.EmptyImmutableMap $r0;

        $r0 = <com.google.common.collect.EmptyImmutableMap: com.google.common.collect.EmptyImmutableMap INSTANCE>;

        return $r0;
    }

    public static com.google.common.collect.ImmutableMap of(java.lang.Object, java.lang.Object)
    {
        com.google.common.collect.SingletonImmutableMap $r0;
        java.lang.Object r1, $r2, r3, $r4;

        r1 := @parameter0: java.lang.Object;

        r3 := @parameter1: java.lang.Object;

        $r0 = new com.google.common.collect.SingletonImmutableMap;

        $r2 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r4 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r3);

        specialinvoke $r0.<com.google.common.collect.SingletonImmutableMap: void <init>(java.lang.Object,java.lang.Object)>($r2, $r4);

        return $r0;
    }

    public static com.google.common.collect.ImmutableMap of(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)
    {
        java.util.Map$Entry $r4, $r7;
        com.google.common.collect.RegularImmutableMap $r0;
        java.lang.Object r2, r3, r5, r6;
        java.util.Map$Entry[] $r1;

        r2 := @parameter0: java.lang.Object;

        r3 := @parameter1: java.lang.Object;

        r5 := @parameter2: java.lang.Object;

        r6 := @parameter3: java.lang.Object;

        $r0 = new com.google.common.collect.RegularImmutableMap;

        $r1 = newarray (java.util.Map$Entry)[2];

        $r4 = staticinvoke <com.google.common.collect.ImmutableMap: java.util.Map$Entry entryOf(java.lang.Object,java.lang.Object)>(r2, r3);

        $r1[0] = $r4;

        $r7 = staticinvoke <com.google.common.collect.ImmutableMap: java.util.Map$Entry entryOf(java.lang.Object,java.lang.Object)>(r5, r6);

        $r1[1] = $r7;

        specialinvoke $r0.<com.google.common.collect.RegularImmutableMap: void <init>(java.util.Map$Entry[])>($r1);

        return $r0;
    }

    public static com.google.common.collect.ImmutableMap of(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)
    {
        java.util.Map$Entry $r4, $r7, $r10;
        com.google.common.collect.RegularImmutableMap $r0;
        java.lang.Object r2, r3, r5, r6, r8, r9;
        java.util.Map$Entry[] $r1;

        r2 := @parameter0: java.lang.Object;

        r3 := @parameter1: java.lang.Object;

        r5 := @parameter2: java.lang.Object;

        r6 := @parameter3: java.lang.Object;

        r8 := @parameter4: java.lang.Object;

        r9 := @parameter5: java.lang.Object;

        $r0 = new com.google.common.collect.RegularImmutableMap;

        $r1 = newarray (java.util.Map$Entry)[3];

        $r4 = staticinvoke <com.google.common.collect.ImmutableMap: java.util.Map$Entry entryOf(java.lang.Object,java.lang.Object)>(r2, r3);

        $r1[0] = $r4;

        $r7 = staticinvoke <com.google.common.collect.ImmutableMap: java.util.Map$Entry entryOf(java.lang.Object,java.lang.Object)>(r5, r6);

        $r1[1] = $r7;

        $r10 = staticinvoke <com.google.common.collect.ImmutableMap: java.util.Map$Entry entryOf(java.lang.Object,java.lang.Object)>(r8, r9);

        $r1[2] = $r10;

        specialinvoke $r0.<com.google.common.collect.RegularImmutableMap: void <init>(java.util.Map$Entry[])>($r1);

        return $r0;
    }

    public static com.google.common.collect.ImmutableMap of(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)
    {
        java.util.Map$Entry $r4, $r7, $r10, $r13;
        com.google.common.collect.RegularImmutableMap $r0;
        java.lang.Object r2, r3, r5, r6, r8, r9, r11, r12;
        java.util.Map$Entry[] $r1;

        r2 := @parameter0: java.lang.Object;

        r3 := @parameter1: java.lang.Object;

        r5 := @parameter2: java.lang.Object;

        r6 := @parameter3: java.lang.Object;

        r8 := @parameter4: java.lang.Object;

        r9 := @parameter5: java.lang.Object;

        r11 := @parameter6: java.lang.Object;

        r12 := @parameter7: java.lang.Object;

        $r0 = new com.google.common.collect.RegularImmutableMap;

        $r1 = newarray (java.util.Map$Entry)[4];

        $r4 = staticinvoke <com.google.common.collect.ImmutableMap: java.util.Map$Entry entryOf(java.lang.Object,java.lang.Object)>(r2, r3);

        $r1[0] = $r4;

        $r7 = staticinvoke <com.google.common.collect.ImmutableMap: java.util.Map$Entry entryOf(java.lang.Object,java.lang.Object)>(r5, r6);

        $r1[1] = $r7;

        $r10 = staticinvoke <com.google.common.collect.ImmutableMap: java.util.Map$Entry entryOf(java.lang.Object,java.lang.Object)>(r8, r9);

        $r1[2] = $r10;

        $r13 = staticinvoke <com.google.common.collect.ImmutableMap: java.util.Map$Entry entryOf(java.lang.Object,java.lang.Object)>(r11, r12);

        $r1[3] = $r13;

        specialinvoke $r0.<com.google.common.collect.RegularImmutableMap: void <init>(java.util.Map$Entry[])>($r1);

        return $r0;
    }

    public static com.google.common.collect.ImmutableMap of(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)
    {
        java.util.Map$Entry[] $r1;
        java.util.Map$Entry $r4, $r7, $r10, $r13, $r16;
        com.google.common.collect.RegularImmutableMap $r0;
        java.lang.Object r2, r3, r5, r6, r8, r9, r11, r12, r14, r15;

        r2 := @parameter0: java.lang.Object;

        r3 := @parameter1: java.lang.Object;

        r5 := @parameter2: java.lang.Object;

        r6 := @parameter3: java.lang.Object;

        r8 := @parameter4: java.lang.Object;

        r9 := @parameter5: java.lang.Object;

        r11 := @parameter6: java.lang.Object;

        r12 := @parameter7: java.lang.Object;

        r14 := @parameter8: java.lang.Object;

        r15 := @parameter9: java.lang.Object;

        $r0 = new com.google.common.collect.RegularImmutableMap;

        $r1 = newarray (java.util.Map$Entry)[5];

        $r4 = staticinvoke <com.google.common.collect.ImmutableMap: java.util.Map$Entry entryOf(java.lang.Object,java.lang.Object)>(r2, r3);

        $r1[0] = $r4;

        $r7 = staticinvoke <com.google.common.collect.ImmutableMap: java.util.Map$Entry entryOf(java.lang.Object,java.lang.Object)>(r5, r6);

        $r1[1] = $r7;

        $r10 = staticinvoke <com.google.common.collect.ImmutableMap: java.util.Map$Entry entryOf(java.lang.Object,java.lang.Object)>(r8, r9);

        $r1[2] = $r10;

        $r13 = staticinvoke <com.google.common.collect.ImmutableMap: java.util.Map$Entry entryOf(java.lang.Object,java.lang.Object)>(r11, r12);

        $r1[3] = $r13;

        $r16 = staticinvoke <com.google.common.collect.ImmutableMap: java.util.Map$Entry entryOf(java.lang.Object,java.lang.Object)>(r14, r15);

        $r1[4] = $r16;

        specialinvoke $r0.<com.google.common.collect.RegularImmutableMap: void <init>(java.util.Map$Entry[])>($r1);

        return $r0;
    }

    public static com.google.common.collect.ImmutableMap$Builder builder()
    {
        com.google.common.collect.ImmutableMap$Builder $r0;

        $r0 = new com.google.common.collect.ImmutableMap$Builder;

        specialinvoke $r0.<com.google.common.collect.ImmutableMap$Builder: void <init>()>();

        return $r0;
    }

    static java.util.Map$Entry entryOf(java.lang.Object, java.lang.Object)
    {
        java.util.Map$Entry $r4;
        java.lang.Object r0, $r1, r2, $r3;

        r0 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r1 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r0, "null key");

        $r3 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r2, "null value");

        $r4 = staticinvoke <com.google.common.collect.Maps: java.util.Map$Entry immutableEntry(java.lang.Object,java.lang.Object)>($r1, $r3);

        return $r4;
    }

    public static com.google.common.collect.ImmutableMap copyOf(java.util.Map)
    {
        com.google.common.collect.SingletonImmutableMap $r1;
        java.lang.Object[] $r17;
        java.util.Map r0;
        int $i0, $i1, i2;
        java.util.Map$Entry[] $r16, $r18;
        boolean $z0, $z1, $z2;
        java.util.Map$Entry $r2, $r4, $r6, $r9, $r11, $r13;
        com.google.common.collect.ImmutableMap $r7, r14;
        com.google.common.collect.RegularImmutableMap $r8;
        java.util.Set $r15;
        java.lang.Object $r3, $r5, $r10, $r12;

        r0 := @parameter0: java.util.Map;

        $z0 = r0 instanceof com.google.common.collect.ImmutableMap;

        if $z0 == 0 goto label1;

        $z1 = r0 instanceof com.google.common.collect.ImmutableSortedMap;

        if $z1 != 0 goto label1;

        r14 = (com.google.common.collect.ImmutableMap) r0;

        $z2 = virtualinvoke r14.<com.google.common.collect.ImmutableMap: boolean isPartialView()>();

        if $z2 != 0 goto label1;

        return r14;

     label1:
        $r15 = interfaceinvoke r0.<java.util.Map: java.util.Set entrySet()>();

        $r16 = newarray (java.util.Map$Entry)[0];

        $r17 = interfaceinvoke $r15.<java.util.Set: java.lang.Object[] toArray(java.lang.Object[])>($r16);

        $r18 = (java.util.Map$Entry[]) $r17;

        $i1 = lengthof $r18;

        lookupswitch($i1)
        {
            case 0: goto label2;
            case 1: goto label3;
            default: goto label4;
        };

     label2:
        $r7 = staticinvoke <com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableMap of()>();

        return $r7;

     label3:
        $r1 = new com.google.common.collect.SingletonImmutableMap;

        $r2 = $r18[0];

        $r3 = interfaceinvoke $r2.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r4 = $r18[0];

        $r5 = interfaceinvoke $r4.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r6 = staticinvoke <com.google.common.collect.ImmutableMap: java.util.Map$Entry entryOf(java.lang.Object,java.lang.Object)>($r3, $r5);

        specialinvoke $r1.<com.google.common.collect.SingletonImmutableMap: void <init>(java.util.Map$Entry)>($r6);

        return $r1;

     label4:
        i2 = 0;

     label5:
        $i0 = lengthof $r18;

        if i2 >= $i0 goto label6;

        $r9 = $r18[i2];

        $r10 = interfaceinvoke $r9.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r11 = $r18[i2];

        $r12 = interfaceinvoke $r11.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r13 = staticinvoke <com.google.common.collect.ImmutableMap: java.util.Map$Entry entryOf(java.lang.Object,java.lang.Object)>($r10, $r12);

        $r18[i2] = $r13;

        i2 = i2 + 1;

        goto label5;

     label6:
        $r8 = new com.google.common.collect.RegularImmutableMap;

        specialinvoke $r8.<com.google.common.collect.RegularImmutableMap: void <init>(java.util.Map$Entry[])>($r18);

        return $r8;
    }

    void <init>()
    {
        com.google.common.collect.ImmutableMap r0;

        r0 := @this: com.google.common.collect.ImmutableMap;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public final java.lang.Object put(java.lang.Object, java.lang.Object)
    {
        java.lang.UnsupportedOperationException $r0;
        com.google.common.collect.ImmutableMap r1;
        java.lang.Object r2, r3;

        r1 := @this: com.google.common.collect.ImmutableMap;

        r2 := @parameter0: java.lang.Object;

        r3 := @parameter1: java.lang.Object;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public final java.lang.Object remove(java.lang.Object)
    {
        java.lang.UnsupportedOperationException $r0;
        java.lang.Object r2;
        com.google.common.collect.ImmutableMap r1;

        r1 := @this: com.google.common.collect.ImmutableMap;

        r2 := @parameter0: java.lang.Object;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public final void putAll(java.util.Map)
    {
        java.lang.UnsupportedOperationException $r0;
        com.google.common.collect.ImmutableMap r1;
        java.util.Map r2;

        r1 := @this: com.google.common.collect.ImmutableMap;

        r2 := @parameter0: java.util.Map;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public final void clear()
    {
        java.lang.UnsupportedOperationException $r0;
        com.google.common.collect.ImmutableMap r1;

        r1 := @this: com.google.common.collect.ImmutableMap;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public boolean isEmpty()
    {
        int $i0;
        com.google.common.collect.ImmutableMap r0;
        boolean $z0;

        r0 := @this: com.google.common.collect.ImmutableMap;

        $i0 = virtualinvoke r0.<com.google.common.collect.ImmutableMap: int size()>();

        if $i0 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean containsKey(java.lang.Object)
    {
        com.google.common.collect.ImmutableMap r0;
        java.lang.Object r1, $r2;
        boolean $z0;

        r0 := @this: com.google.common.collect.ImmutableMap;

        r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<com.google.common.collect.ImmutableMap: java.lang.Object get(java.lang.Object)>(r1);

        if $r2 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public abstract boolean containsValue(java.lang.Object);

    public abstract java.lang.Object get(java.lang.Object);

    public abstract com.google.common.collect.ImmutableSet entrySet();

    public abstract com.google.common.collect.ImmutableSet keySet();

    public abstract com.google.common.collect.ImmutableCollection values();

    public boolean equals(java.lang.Object)
    {
        com.google.common.collect.ImmutableSet $r3;
        com.google.common.collect.ImmutableMap r1;
        java.util.Map r2;
        java.util.Set $r4;
        java.lang.Object r0;
        boolean $z0, $z1;

        r1 := @this: com.google.common.collect.ImmutableMap;

        r0 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = r0 instanceof java.util.Map;

        if $z0 == 0 goto label2;

        r2 = (java.util.Map) r0;

        $r3 = virtualinvoke r1.<com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableSet entrySet()>();

        $r4 = interfaceinvoke r2.<java.util.Map: java.util.Set entrySet()>();

        $z1 = virtualinvoke $r3.<com.google.common.collect.ImmutableSet: boolean equals(java.lang.Object)>($r4);

        return $z1;

     label2:
        return 0;
    }

    abstract boolean isPartialView();

    public int hashCode()
    {
        int $i0;
        com.google.common.collect.ImmutableSet $r1;
        com.google.common.collect.ImmutableMap r0;

        r0 := @this: com.google.common.collect.ImmutableMap;

        $r1 = virtualinvoke r0.<com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableSet entrySet()>();

        $i0 = virtualinvoke $r1.<com.google.common.collect.ImmutableSet: int hashCode()>();

        return $i0;
    }

    public java.lang.String toString()
    {
        java.lang.String $r1;
        com.google.common.collect.ImmutableMap r0;

        r0 := @this: com.google.common.collect.ImmutableMap;

        $r1 = staticinvoke <com.google.common.collect.Maps: java.lang.String toStringImpl(java.util.Map)>(r0);

        return $r1;
    }

    java.lang.Object writeReplace()
    {
        com.google.common.collect.ImmutableMap$SerializedForm $r0;
        com.google.common.collect.ImmutableMap r1;

        r1 := @this: com.google.common.collect.ImmutableMap;

        $r0 = new com.google.common.collect.ImmutableMap$SerializedForm;

        specialinvoke $r0.<com.google.common.collect.ImmutableMap$SerializedForm: void <init>(com.google.common.collect.ImmutableMap)>(r1);

        return $r0;
    }

    public volatile java.util.Set entrySet()
    {
        com.google.common.collect.ImmutableSet $r1;
        com.google.common.collect.ImmutableMap r0;

        r0 := @this: com.google.common.collect.ImmutableMap;

        $r1 = virtualinvoke r0.<com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableSet entrySet()>();

        return $r1;
    }

    public volatile java.util.Collection values()
    {
        com.google.common.collect.ImmutableCollection $r1;
        com.google.common.collect.ImmutableMap r0;

        r0 := @this: com.google.common.collect.ImmutableMap;

        $r1 = virtualinvoke r0.<com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableCollection values()>();

        return $r1;
    }

    public volatile java.util.Set keySet()
    {
        com.google.common.collect.ImmutableSet $r1;
        com.google.common.collect.ImmutableMap r0;

        r0 := @this: com.google.common.collect.ImmutableMap;

        $r1 = virtualinvoke r0.<com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableSet keySet()>();

        return $r1;
    }
}
