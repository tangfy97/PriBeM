public class org.waveprotocol.wave.model.document.indexed.ObservableIndexedDocument extends org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl
{
    private int depth;
    private final java.util.List events;
    private final java.util.List splitElementStack;
    private final org.waveprotocol.wave.model.document.indexed.DocumentHandler handler;
    private org.waveprotocol.wave.model.document.indexed.DocumentEvent$ContentDeleted$Builder deletion;
    private static final java.lang.Object ONE_OBJECT;
    private static final java.lang.Object ANOTHER_OBJECT;
    static final boolean $assertionsDisabled;

    public void <init>(org.waveprotocol.wave.model.document.indexed.DocumentHandler, org.waveprotocol.wave.model.document.raw.RawDocument, org.waveprotocol.wave.model.document.indexed.RawAnnotationSet, org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema)
    {
        org.waveprotocol.wave.model.document.indexed.RawAnnotationSet r2;
        org.waveprotocol.wave.model.document.raw.RawDocument r1;
        org.waveprotocol.wave.model.document.indexed.ObservableIndexedDocument r0;
        org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema r3;
        org.waveprotocol.wave.model.document.indexed.DocumentHandler r6;
        java.util.ArrayList $r4, $r5;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.ObservableIndexedDocument;

        r6 := @parameter0: org.waveprotocol.wave.model.document.indexed.DocumentHandler;

        r1 := @parameter1: org.waveprotocol.wave.model.document.raw.RawDocument;

        r2 := @parameter2: org.waveprotocol.wave.model.document.indexed.RawAnnotationSet;

        r3 := @parameter3: org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema;

        specialinvoke r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: void <init>(org.waveprotocol.wave.model.document.raw.RawDocument,org.waveprotocol.wave.model.document.indexed.RawAnnotationSet,org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema)>(r1, r2, r3);

        r0.<org.waveprotocol.wave.model.document.indexed.ObservableIndexedDocument: int depth> = 0;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r0.<org.waveprotocol.wave.model.document.indexed.ObservableIndexedDocument: java.util.List events> = $r4;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        r0.<org.waveprotocol.wave.model.document.indexed.ObservableIndexedDocument: java.util.List splitElementStack> = $r5;

        r0.<org.waveprotocol.wave.model.document.indexed.ObservableIndexedDocument: org.waveprotocol.wave.model.document.indexed.DocumentHandler handler> = r6;

        return;
    }

    public void <init>(org.waveprotocol.wave.model.document.indexed.DocumentHandler, org.waveprotocol.wave.model.document.raw.RawDocument, org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema)
    {
        org.waveprotocol.wave.model.document.raw.RawDocument r2;
        org.waveprotocol.wave.model.document.indexed.ObservableIndexedDocument r0;
        org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema r6;
        java.lang.Object $r4, $r5;
        org.waveprotocol.wave.model.document.indexed.DocumentHandler r1;
        org.waveprotocol.wave.model.document.indexed.AnnotationTree $r3;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.ObservableIndexedDocument;

        r1 := @parameter0: org.waveprotocol.wave.model.document.indexed.DocumentHandler;

        r2 := @parameter1: org.waveprotocol.wave.model.document.raw.RawDocument;

        r6 := @parameter2: org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema;

        $r3 = new org.waveprotocol.wave.model.document.indexed.AnnotationTree;

        $r5 = <org.waveprotocol.wave.model.document.indexed.ObservableIndexedDocument: java.lang.Object ONE_OBJECT>;

        $r4 = <org.waveprotocol.wave.model.document.indexed.ObservableIndexedDocument: java.lang.Object ANOTHER_OBJECT>;

        specialinvoke $r3.<org.waveprotocol.wave.model.document.indexed.AnnotationTree: void <init>(java.lang.Object,java.lang.Object,org.waveprotocol.wave.model.document.indexed.AnnotationSetListener)>($r5, $r4, null);

        specialinvoke r0.<org.waveprotocol.wave.model.document.indexed.ObservableIndexedDocument: void <init>(org.waveprotocol.wave.model.document.indexed.DocumentHandler,org.waveprotocol.wave.model.document.raw.RawDocument,org.waveprotocol.wave.model.document.indexed.AnnotationTree,org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema)>(r1, r2, $r3, r6);

        return;
    }

    private void <init>(org.waveprotocol.wave.model.document.indexed.DocumentHandler, org.waveprotocol.wave.model.document.raw.RawDocument, org.waveprotocol.wave.model.document.indexed.AnnotationTree, org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema r3;
        org.waveprotocol.wave.model.document.indexed.AnnotationTree r2;
        org.waveprotocol.wave.model.document.indexed.ObservableIndexedDocument$1 $r6;
        java.util.ArrayList $r4, $r5;
        org.waveprotocol.wave.model.document.raw.RawDocument r1;
        org.waveprotocol.wave.model.document.indexed.ObservableIndexedDocument r0;
        org.waveprotocol.wave.model.document.indexed.DocumentHandler r7;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.ObservableIndexedDocument;

        r7 := @parameter0: org.waveprotocol.wave.model.document.indexed.DocumentHandler;

        r1 := @parameter1: org.waveprotocol.wave.model.document.raw.RawDocument;

        r2 := @parameter2: org.waveprotocol.wave.model.document.indexed.AnnotationTree;

        r3 := @parameter3: org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema;

        specialinvoke r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: void <init>(org.waveprotocol.wave.model.document.raw.RawDocument,org.waveprotocol.wave.model.document.indexed.RawAnnotationSet,org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema)>(r1, r2, r3);

        r0.<org.waveprotocol.wave.model.document.indexed.ObservableIndexedDocument: int depth> = 0;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r0.<org.waveprotocol.wave.model.document.indexed.ObservableIndexedDocument: java.util.List events> = $r4;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        r0.<org.waveprotocol.wave.model.document.indexed.ObservableIndexedDocument: java.util.List splitElementStack> = $r5;

        $r6 = new org.waveprotocol.wave.model.document.indexed.ObservableIndexedDocument$1;

        specialinvoke $r6.<org.waveprotocol.wave.model.document.indexed.ObservableIndexedDocument$1: void <init>(org.waveprotocol.wave.model.document.indexed.ObservableIndexedDocument)>(r0);

        virtualinvoke r2.<org.waveprotocol.wave.model.document.indexed.AnnotationTree: void setListener(org.waveprotocol.wave.model.document.indexed.AnnotationSetListener)>($r6);

        r0.<org.waveprotocol.wave.model.document.indexed.ObservableIndexedDocument: org.waveprotocol.wave.model.document.indexed.DocumentHandler handler> = r7;

        return;
    }

    protected void beforeBegin()
    {
        java.lang.AssertionError $r2, $r4, $r5;
        java.util.List $r1, $r3;
        org.waveprotocol.wave.model.document.indexed.ObservableIndexedDocument r0;
        int $i0;
        boolean $z0, $z1, $z2, $z3, $z4;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.ObservableIndexedDocument;

        $z0 = <org.waveprotocol.wave.model.document.indexed.ObservableIndexedDocument: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $i0 = r0.<org.waveprotocol.wave.model.document.indexed.ObservableIndexedDocument: int depth>;

        if $i0 == 0 goto label1;

        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();

        throw $r5;

     label1:
        $z1 = <org.waveprotocol.wave.model.document.indexed.ObservableIndexedDocument: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        $r3 = r0.<org.waveprotocol.wave.model.document.indexed.ObservableIndexedDocument: java.util.List events>;

        $z4 = interfaceinvoke $r3.<java.util.List: boolean isEmpty()>();

        if $z4 != 0 goto label2;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label2:
        $z2 = <org.waveprotocol.wave.model.document.indexed.ObservableIndexedDocument: boolean $assertionsDisabled>;

        if $z2 != 0 goto label3;

        $r1 = r0.<org.waveprotocol.wave.model.document.indexed.ObservableIndexedDocument: java.util.List splitElementStack>;

        $z3 = interfaceinvoke $r1.<java.util.List: boolean isEmpty()>();

        if $z3 != 0 goto label3;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label3:
        specialinvoke r0.<org.waveprotocol.wave.model.document.indexed.ObservableIndexedDocument: void push()>();

        return;
    }

    protected void afterFinish()
    {
        org.waveprotocol.wave.model.document.indexed.EventBundleImpl$Builder $r6;
        java.lang.AssertionError $r9, $r10, $r12;
        org.waveprotocol.wave.model.document.indexed.ObservableIndexedDocument r0;
        int $i0, $i1;
        org.waveprotocol.wave.model.document.indexed.DocumentHandler $r1, $r4;
        boolean $z0, $z1, $z2, $z3;
        java.util.List $r2, $r3, $r8, $r11;
        org.waveprotocol.wave.model.document.indexed.EventBundleImpl $r7;
        java.lang.Object $r5;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.ObservableIndexedDocument;

        $z0 = <org.waveprotocol.wave.model.document.indexed.ObservableIndexedDocument: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r11 = r0.<org.waveprotocol.wave.model.document.indexed.ObservableIndexedDocument: java.util.List events>;

        $i1 = interfaceinvoke $r11.<java.util.List: int size()>();

        if $i1 == 1 goto label1;

        $r12 = new java.lang.AssertionError;

        specialinvoke $r12.<java.lang.AssertionError: void <init>()>();

        throw $r12;

     label1:
        $z1 = <org.waveprotocol.wave.model.document.indexed.ObservableIndexedDocument: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        $i0 = r0.<org.waveprotocol.wave.model.document.indexed.ObservableIndexedDocument: int depth>;

        if $i0 == 0 goto label2;

        $r10 = new java.lang.AssertionError;

        specialinvoke $r10.<java.lang.AssertionError: void <init>()>();

        throw $r10;

     label2:
        $z2 = <org.waveprotocol.wave.model.document.indexed.ObservableIndexedDocument: boolean $assertionsDisabled>;

        if $z2 != 0 goto label3;

        $r8 = r0.<org.waveprotocol.wave.model.document.indexed.ObservableIndexedDocument: java.util.List splitElementStack>;

        $z3 = interfaceinvoke $r8.<java.util.List: boolean isEmpty()>();

        if $z3 != 0 goto label3;

        $r9 = new java.lang.AssertionError;

        specialinvoke $r9.<java.lang.AssertionError: void <init>()>();

        throw $r9;

     label3:
        $r1 = r0.<org.waveprotocol.wave.model.document.indexed.ObservableIndexedDocument: org.waveprotocol.wave.model.document.indexed.DocumentHandler handler>;

        if $r1 == null goto label4;

        $r4 = r0.<org.waveprotocol.wave.model.document.indexed.ObservableIndexedDocument: org.waveprotocol.wave.model.document.indexed.DocumentHandler handler>;

        $r3 = r0.<org.waveprotocol.wave.model.document.indexed.ObservableIndexedDocument: java.util.List events>;

        $r5 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(0);

        $r6 = (org.waveprotocol.wave.model.document.indexed.EventBundleImpl$Builder) $r5;

        $r7 = virtualinvoke $r6.<org.waveprotocol.wave.model.document.indexed.EventBundleImpl$Builder: org.waveprotocol.wave.model.document.indexed.EventBundleImpl build()>();

        interfaceinvoke $r4.<org.waveprotocol.wave.model.document.indexed.DocumentHandler: void onDocumentEvents(org.waveprotocol.wave.model.document.indexed.DocumentHandler$EventBundle)>($r7);

     label4:
        $r2 = r0.<org.waveprotocol.wave.model.document.indexed.ObservableIndexedDocument: java.util.List events>;

        interfaceinvoke $r2.<java.util.List: void clear()>();

        return;
    }

    protected void onElementStart(java.lang.Object)
    {
        org.waveprotocol.wave.model.document.indexed.ObservableIndexedDocument r0;
        int $i0, $i1, $i2;
        java.lang.Object r1;
        org.waveprotocol.wave.model.document.indexed.DocumentEvent$ContentInserted $r2;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.ObservableIndexedDocument;

        r1 := @parameter0: java.lang.Object;

        $i0 = r0.<org.waveprotocol.wave.model.document.indexed.ObservableIndexedDocument: int depth>;

        if $i0 != 0 goto label1;

        $r2 = new org.waveprotocol.wave.model.document.indexed.DocumentEvent$ContentInserted;

        specialinvoke $r2.<org.waveprotocol.wave.model.document.indexed.DocumentEvent$ContentInserted: void <init>(java.lang.Object)>(r1);

        specialinvoke r0.<org.waveprotocol.wave.model.document.indexed.ObservableIndexedDocument: void event(org.waveprotocol.wave.model.document.indexed.DocumentEvent)>($r2);

     label1:
        specialinvoke r0.<org.waveprotocol.wave.model.document.indexed.ObservableIndexedDocument: void inserted(java.lang.Object)>(r1);

        $i1 = r0.<org.waveprotocol.wave.model.document.indexed.ObservableIndexedDocument: int depth>;

        $i2 = $i1 + 1;

        r0.<org.waveprotocol.wave.model.document.indexed.ObservableIndexedDocument: int depth> = $i2;

        return;
    }

    protected void onElementEnd()
    {
        int $i0, $i1;
        org.waveprotocol.wave.model.document.indexed.ObservableIndexedDocument r0;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.ObservableIndexedDocument;

        $i0 = r0.<org.waveprotocol.wave.model.document.indexed.ObservableIndexedDocument: int depth>;

        $i1 = $i0 - 1;

        r0.<org.waveprotocol.wave.model.document.indexed.ObservableIndexedDocument: int depth> = $i1;

        return;
    }

    protected void onDeleteElementStart(int, java.lang.Object)
    {
        java.lang.AssertionError $r7;
        org.waveprotocol.wave.model.document.indexed.DocumentEvent$ContentDeleted$Builder $r2, $r5, $r6;
        org.waveprotocol.wave.model.document.indexed.ObservableIndexedDocument r0;
        java.util.Map $r4;
        int $i0, $i1, $i2, i3, $i4;
        java.lang.String $r3;
        boolean $z0, $z1, $z2;
        java.lang.Object r1;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.ObservableIndexedDocument;

        i3 := @parameter0: int;

        r1 := @parameter1: java.lang.Object;

        $z0 = <org.waveprotocol.wave.model.document.indexed.ObservableIndexedDocument: boolean $assertionsDisabled>;

        if $z0 != 0 goto label5;

        $r6 = r0.<org.waveprotocol.wave.model.document.indexed.ObservableIndexedDocument: org.waveprotocol.wave.model.document.indexed.DocumentEvent$ContentDeleted$Builder deletion>;

        if $r6 != null goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        $i4 = r0.<org.waveprotocol.wave.model.document.indexed.ObservableIndexedDocument: int depth>;

        if $i4 != 0 goto label3;

        $z2 = 1;

        goto label4;

     label3:
        $z2 = 0;

     label4:
        if $z1 == $z2 goto label5;

        $r7 = new java.lang.AssertionError;

        specialinvoke $r7.<java.lang.AssertionError: void <init>()>();

        throw $r7;

     label5:
        $i0 = r0.<org.waveprotocol.wave.model.document.indexed.ObservableIndexedDocument: int depth>;

        if $i0 != 0 goto label6;

        $r5 = new org.waveprotocol.wave.model.document.indexed.DocumentEvent$ContentDeleted$Builder;

        specialinvoke $r5.<org.waveprotocol.wave.model.document.indexed.DocumentEvent$ContentDeleted$Builder: void <init>(int,java.lang.Object)>(i3, r1);

        r0.<org.waveprotocol.wave.model.document.indexed.ObservableIndexedDocument: org.waveprotocol.wave.model.document.indexed.DocumentEvent$ContentDeleted$Builder deletion> = $r5;

     label6:
        $i1 = r0.<org.waveprotocol.wave.model.document.indexed.ObservableIndexedDocument: int depth>;

        $i2 = $i1 + 1;

        r0.<org.waveprotocol.wave.model.document.indexed.ObservableIndexedDocument: int depth> = $i2;

        specialinvoke r0.<org.waveprotocol.wave.model.document.indexed.ObservableIndexedDocument: void deleted(java.lang.Object)>(r1);

        $r2 = r0.<org.waveprotocol.wave.model.document.indexed.ObservableIndexedDocument: org.waveprotocol.wave.model.document.indexed.DocumentEvent$ContentDeleted$Builder deletion>;

        $r3 = virtualinvoke r0.<org.waveprotocol.wave.model.document.indexed.ObservableIndexedDocument: java.lang.String getTagName(java.lang.Object)>(r1);

        $r4 = virtualinvoke r0.<org.waveprotocol.wave.model.document.indexed.ObservableIndexedDocument: java.util.Map getAttributes(java.lang.Object)>(r1);

        virtualinvoke $r2.<org.waveprotocol.wave.model.document.indexed.DocumentEvent$ContentDeleted$Builder: void addElementStart(java.lang.String,java.util.Map)>($r3, $r4);

        return;
    }

    protected void onDeleteElementEnd()
    {
        java.lang.AssertionError $r5;
        org.waveprotocol.wave.model.document.indexed.DocumentEvent$ContentDeleted $r3;
        org.waveprotocol.wave.model.document.indexed.DocumentEvent$ContentDeleted$Builder $r1, $r2, $r4;
        org.waveprotocol.wave.model.document.indexed.ObservableIndexedDocument r0;
        int $i0, $i1, $i2;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.ObservableIndexedDocument;

        $z0 = <org.waveprotocol.wave.model.document.indexed.ObservableIndexedDocument: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r4 = r0.<org.waveprotocol.wave.model.document.indexed.ObservableIndexedDocument: org.waveprotocol.wave.model.document.indexed.DocumentEvent$ContentDeleted$Builder deletion>;

        if $r4 != null goto label1;

        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();

        throw $r5;

     label1:
        $r1 = r0.<org.waveprotocol.wave.model.document.indexed.ObservableIndexedDocument: org.waveprotocol.wave.model.document.indexed.DocumentEvent$ContentDeleted$Builder deletion>;

        virtualinvoke $r1.<org.waveprotocol.wave.model.document.indexed.DocumentEvent$ContentDeleted$Builder: void addElementEnd()>();

        $i0 = r0.<org.waveprotocol.wave.model.document.indexed.ObservableIndexedDocument: int depth>;

        $i1 = $i0 - 1;

        r0.<org.waveprotocol.wave.model.document.indexed.ObservableIndexedDocument: int depth> = $i1;

        $i2 = r0.<org.waveprotocol.wave.model.document.indexed.ObservableIndexedDocument: int depth>;

        if $i2 != 0 goto label2;

        $r2 = r0.<org.waveprotocol.wave.model.document.indexed.ObservableIndexedDocument: org.waveprotocol.wave.model.document.indexed.DocumentEvent$ContentDeleted$Builder deletion>;

        $r3 = virtualinvoke $r2.<org.waveprotocol.wave.model.document.indexed.DocumentEvent$ContentDeleted$Builder: org.waveprotocol.wave.model.document.indexed.DocumentEvent$ContentDeleted build()>();

        specialinvoke r0.<org.waveprotocol.wave.model.document.indexed.ObservableIndexedDocument: void event(org.waveprotocol.wave.model.document.indexed.DocumentEvent)>($r3);

        r0.<org.waveprotocol.wave.model.document.indexed.ObservableIndexedDocument: org.waveprotocol.wave.model.document.indexed.DocumentEvent$ContentDeleted$Builder deletion> = null;

     label2:
        return;
    }

    protected void onModifyAttributes(java.lang.Object, org.waveprotocol.wave.model.document.operation.AttributesUpdate)
    {
        org.waveprotocol.wave.model.document.indexed.ObservableIndexedDocument r0;
        java.lang.Object r2;
        org.waveprotocol.wave.model.document.indexed.DocumentEvent$AttributesModified $r1;
        org.waveprotocol.wave.model.document.operation.AttributesUpdate r3;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.ObservableIndexedDocument;

        r2 := @parameter0: java.lang.Object;

        r3 := @parameter1: org.waveprotocol.wave.model.document.operation.AttributesUpdate;

        $r1 = new org.waveprotocol.wave.model.document.indexed.DocumentEvent$AttributesModified;

        specialinvoke $r1.<org.waveprotocol.wave.model.document.indexed.DocumentEvent$AttributesModified: void <init>(java.lang.Object,org.waveprotocol.wave.model.document.operation.AttributesUpdate)>(r2, r3);

        specialinvoke r0.<org.waveprotocol.wave.model.document.indexed.ObservableIndexedDocument: void event(org.waveprotocol.wave.model.document.indexed.DocumentEvent)>($r1);

        return;
    }

    protected void onModifyAttributes(java.lang.Object, org.waveprotocol.wave.model.document.operation.Attributes, org.waveprotocol.wave.model.document.operation.Attributes)
    {
        org.waveprotocol.wave.model.document.indexed.ObservableIndexedDocument r0;
        java.lang.Object r2;
        org.waveprotocol.wave.model.document.indexed.DocumentEvent$AttributesModified $r1;
        org.waveprotocol.wave.model.document.operation.Attributes r3, r4;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.ObservableIndexedDocument;

        r2 := @parameter0: java.lang.Object;

        r3 := @parameter1: org.waveprotocol.wave.model.document.operation.Attributes;

        r4 := @parameter2: org.waveprotocol.wave.model.document.operation.Attributes;

        $r1 = new org.waveprotocol.wave.model.document.indexed.DocumentEvent$AttributesModified;

        specialinvoke $r1.<org.waveprotocol.wave.model.document.indexed.DocumentEvent$AttributesModified: void <init>(java.lang.Object,java.util.Map,java.util.Map)>(r2, r3, r4);

        specialinvoke r0.<org.waveprotocol.wave.model.document.indexed.ObservableIndexedDocument: void event(org.waveprotocol.wave.model.document.indexed.DocumentEvent)>($r1);

        return;
    }

    protected void onCharacters(int, java.lang.String)
    {
        org.waveprotocol.wave.model.document.indexed.ObservableIndexedDocument r0;
        int $i0, i1;
        java.lang.String r2;
        org.waveprotocol.wave.model.document.indexed.DocumentEvent$TextInserted $r1;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.ObservableIndexedDocument;

        i1 := @parameter0: int;

        r2 := @parameter1: java.lang.String;

        $i0 = r0.<org.waveprotocol.wave.model.document.indexed.ObservableIndexedDocument: int depth>;

        if $i0 != 0 goto label1;

        $r1 = new org.waveprotocol.wave.model.document.indexed.DocumentEvent$TextInserted;

        specialinvoke $r1.<org.waveprotocol.wave.model.document.indexed.DocumentEvent$TextInserted: void <init>(int,java.lang.String)>(i1, r2);

        specialinvoke r0.<org.waveprotocol.wave.model.document.indexed.ObservableIndexedDocument: void event(org.waveprotocol.wave.model.document.indexed.DocumentEvent)>($r1);

     label1:
        return;
    }

    protected void onDeleteCharacters(int, java.lang.String)
    {
        org.waveprotocol.wave.model.document.indexed.DocumentEvent$TextDeleted $r4;
        org.waveprotocol.wave.model.document.indexed.ObservableIndexedDocument r0;
        int $i0, i1;
        java.lang.String r2;
        org.waveprotocol.wave.model.document.indexed.DocumentEvent$ContentDeleted$Builder $r1, $r3;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.ObservableIndexedDocument;

        i1 := @parameter0: int;

        r2 := @parameter1: java.lang.String;

        $i0 = r0.<org.waveprotocol.wave.model.document.indexed.ObservableIndexedDocument: int depth>;

        if $i0 != 0 goto label1;

        $r4 = new org.waveprotocol.wave.model.document.indexed.DocumentEvent$TextDeleted;

        specialinvoke $r4.<org.waveprotocol.wave.model.document.indexed.DocumentEvent$TextDeleted: void <init>(int,java.lang.String)>(i1, r2);

        specialinvoke r0.<org.waveprotocol.wave.model.document.indexed.ObservableIndexedDocument: void event(org.waveprotocol.wave.model.document.indexed.DocumentEvent)>($r4);

     label1:
        $r1 = r0.<org.waveprotocol.wave.model.document.indexed.ObservableIndexedDocument: org.waveprotocol.wave.model.document.indexed.DocumentEvent$ContentDeleted$Builder deletion>;

        if $r1 == null goto label2;

        $r3 = r0.<org.waveprotocol.wave.model.document.indexed.ObservableIndexedDocument: org.waveprotocol.wave.model.document.indexed.DocumentEvent$ContentDeleted$Builder deletion>;

        virtualinvoke $r3.<org.waveprotocol.wave.model.document.indexed.DocumentEvent$ContentDeleted$Builder: void addText(java.lang.String)>(r2);

     label2:
        return;
    }

    private void inserted(java.lang.Object)
    {
        org.waveprotocol.wave.model.document.indexed.EventBundleImpl$Builder $r1;
        java.lang.Object r2;
        org.waveprotocol.wave.model.document.indexed.ObservableIndexedDocument r0;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.ObservableIndexedDocument;

        r2 := @parameter0: java.lang.Object;

        $r1 = specialinvoke r0.<org.waveprotocol.wave.model.document.indexed.ObservableIndexedDocument: org.waveprotocol.wave.model.document.indexed.EventBundleImpl$Builder currentEvent()>();

        virtualinvoke $r1.<org.waveprotocol.wave.model.document.indexed.EventBundleImpl$Builder: void addInsertedElement(java.lang.Object)>(r2);

        return;
    }

    private void deleted(java.lang.Object)
    {
        org.waveprotocol.wave.model.document.indexed.EventBundleImpl$Builder $r1;
        java.lang.Object r2;
        org.waveprotocol.wave.model.document.indexed.ObservableIndexedDocument r0;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.ObservableIndexedDocument;

        r2 := @parameter0: java.lang.Object;

        $r1 = specialinvoke r0.<org.waveprotocol.wave.model.document.indexed.ObservableIndexedDocument: org.waveprotocol.wave.model.document.indexed.EventBundleImpl$Builder currentEvent()>();

        virtualinvoke $r1.<org.waveprotocol.wave.model.document.indexed.EventBundleImpl$Builder: void addDeletedElement(java.lang.Object)>(r2);

        return;
    }

    private void event(org.waveprotocol.wave.model.document.indexed.DocumentEvent)
    {
        org.waveprotocol.wave.model.document.indexed.EventBundleImpl$Builder $r1;
        org.waveprotocol.wave.model.document.indexed.DocumentEvent r2;
        org.waveprotocol.wave.model.document.indexed.ObservableIndexedDocument r0;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.ObservableIndexedDocument;

        r2 := @parameter0: org.waveprotocol.wave.model.document.indexed.DocumentEvent;

        $r1 = specialinvoke r0.<org.waveprotocol.wave.model.document.indexed.ObservableIndexedDocument: org.waveprotocol.wave.model.document.indexed.EventBundleImpl$Builder currentEvent()>();

        virtualinvoke $r1.<org.waveprotocol.wave.model.document.indexed.EventBundleImpl$Builder: void addComponent(org.waveprotocol.wave.model.document.indexed.DocumentEvent)>(r2);

        return;
    }

    private org.waveprotocol.wave.model.document.indexed.EventBundleImpl$Builder currentEvent()
    {
        java.util.List $r1, $r2;
        org.waveprotocol.wave.model.document.indexed.ObservableIndexedDocument r0;
        int $i0, $i1;
        org.waveprotocol.wave.model.document.indexed.EventBundleImpl$Builder $r4;
        java.lang.Object $r3;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.ObservableIndexedDocument;

        $r2 = r0.<org.waveprotocol.wave.model.document.indexed.ObservableIndexedDocument: java.util.List events>;

        $r1 = r0.<org.waveprotocol.wave.model.document.indexed.ObservableIndexedDocument: java.util.List events>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        $i1 = $i0 - 1;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>($i1);

        $r4 = (org.waveprotocol.wave.model.document.indexed.EventBundleImpl$Builder) $r3;

        return $r4;
    }

    private void push()
    {
        org.waveprotocol.wave.model.document.indexed.EventBundleImpl$Builder $r1;
        java.util.List $r2;
        org.waveprotocol.wave.model.document.indexed.ObservableIndexedDocument r0;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.ObservableIndexedDocument;

        $r2 = r0.<org.waveprotocol.wave.model.document.indexed.ObservableIndexedDocument: java.util.List events>;

        $r1 = new org.waveprotocol.wave.model.document.indexed.EventBundleImpl$Builder;

        specialinvoke $r1.<org.waveprotocol.wave.model.document.indexed.EventBundleImpl$Builder: void <init>()>();

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r1);

        return;
    }

    static void access$000(org.waveprotocol.wave.model.document.indexed.ObservableIndexedDocument, org.waveprotocol.wave.model.document.indexed.DocumentEvent)
    {
        org.waveprotocol.wave.model.document.indexed.DocumentEvent r1;
        org.waveprotocol.wave.model.document.indexed.ObservableIndexedDocument r0;

        r0 := @parameter0: org.waveprotocol.wave.model.document.indexed.ObservableIndexedDocument;

        r1 := @parameter1: org.waveprotocol.wave.model.document.indexed.DocumentEvent;

        specialinvoke r0.<org.waveprotocol.wave.model.document.indexed.ObservableIndexedDocument: void event(org.waveprotocol.wave.model.document.indexed.DocumentEvent)>(r1);

        return;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.Object $r1, $r2;
        boolean $z0, $z1;

        $r0 = class "Lorg/waveprotocol/wave/model/document/indexed/ObservableIndexedDocument;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.waveprotocol.wave.model.document.indexed.ObservableIndexedDocument: boolean $assertionsDisabled> = $z1;

        $r1 = new java.lang.Object;

        specialinvoke $r1.<java.lang.Object: void <init>()>();

        <org.waveprotocol.wave.model.document.indexed.ObservableIndexedDocument: java.lang.Object ONE_OBJECT> = $r1;

        $r2 = new java.lang.Object;

        specialinvoke $r2.<java.lang.Object: void <init>()>();

        <org.waveprotocol.wave.model.document.indexed.ObservableIndexedDocument: java.lang.Object ANOTHER_OBJECT> = $r2;

        return;
    }
}
