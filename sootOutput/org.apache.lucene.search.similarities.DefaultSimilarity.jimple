public class org.apache.lucene.search.similarities.DefaultSimilarity extends org.apache.lucene.search.similarities.TFIDFSimilarity
{
    protected boolean discountOverlaps;

    public void <init>()
    {
        org.apache.lucene.search.similarities.DefaultSimilarity r0;

        r0 := @this: org.apache.lucene.search.similarities.DefaultSimilarity;

        specialinvoke r0.<org.apache.lucene.search.similarities.TFIDFSimilarity: void <init>()>();

        r0.<org.apache.lucene.search.similarities.DefaultSimilarity: boolean discountOverlaps> = 1;

        return;
    }

    public float coord(int, int)
    {
        org.apache.lucene.search.similarities.DefaultSimilarity r0;
        int i0, i1;
        float $f0, $f1, $f2;

        r0 := @this: org.apache.lucene.search.similarities.DefaultSimilarity;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $f1 = (float) i0;

        $f0 = (float) i1;

        $f2 = $f1 / $f0;

        return $f2;
    }

    public float queryNorm(float)
    {
        org.apache.lucene.search.similarities.DefaultSimilarity r0;
        float f0, $f1;
        double $d0, $d1, $d2;

        r0 := @this: org.apache.lucene.search.similarities.DefaultSimilarity;

        f0 := @parameter0: float;

        $d0 = (double) f0;

        $d1 = staticinvoke <java.lang.Math: double sqrt(double)>($d0);

        $d2 = 1.0 / $d1;

        $f1 = (float) $d2;

        return $f1;
    }

    public float lengthNorm(org.apache.lucene.index.FieldInvertState)
    {
        org.apache.lucene.search.similarities.DefaultSimilarity r0;
        org.apache.lucene.index.FieldInvertState r1;
        int $i0, $i1, i2;
        float $f0, $f1, $f2;
        boolean $z0;
        double $d0, $d1, $d2;

        r0 := @this: org.apache.lucene.search.similarities.DefaultSimilarity;

        r1 := @parameter0: org.apache.lucene.index.FieldInvertState;

        $z0 = r0.<org.apache.lucene.search.similarities.DefaultSimilarity: boolean discountOverlaps>;

        if $z0 == 0 goto label1;

        $i0 = virtualinvoke r1.<org.apache.lucene.index.FieldInvertState: int getLength()>();

        $i1 = virtualinvoke r1.<org.apache.lucene.index.FieldInvertState: int getNumOverlap()>();

        i2 = $i0 - $i1;

        goto label2;

     label1:
        i2 = virtualinvoke r1.<org.apache.lucene.index.FieldInvertState: int getLength()>();

     label2:
        $f0 = virtualinvoke r1.<org.apache.lucene.index.FieldInvertState: float getBoost()>();

        $d0 = (double) i2;

        $d1 = staticinvoke <java.lang.Math: double sqrt(double)>($d0);

        $d2 = 1.0 / $d1;

        $f1 = (float) $d2;

        $f2 = $f0 * $f1;

        return $f2;
    }

    public float tf(float)
    {
        org.apache.lucene.search.similarities.DefaultSimilarity r0;
        float f0, $f1;
        double $d0, $d1;

        r0 := @this: org.apache.lucene.search.similarities.DefaultSimilarity;

        f0 := @parameter0: float;

        $d0 = (double) f0;

        $d1 = staticinvoke <java.lang.Math: double sqrt(double)>($d0);

        $f1 = (float) $d1;

        return $f1;
    }

    public float sloppyFreq(int)
    {
        org.apache.lucene.search.similarities.DefaultSimilarity r0;
        int i0, $i1;
        float $f0, $f1;

        r0 := @this: org.apache.lucene.search.similarities.DefaultSimilarity;

        i0 := @parameter0: int;

        $i1 = i0 + 1;

        $f0 = (float) $i1;

        $f1 = 1.0F / $f0;

        return $f1;
    }

    public float scorePayload(int, int, int, org.apache.lucene.util.BytesRef)
    {
        org.apache.lucene.search.similarities.DefaultSimilarity r0;
        org.apache.lucene.util.BytesRef r1;
        int i0, i1, i2;

        r0 := @this: org.apache.lucene.search.similarities.DefaultSimilarity;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        r1 := @parameter3: org.apache.lucene.util.BytesRef;

        return 1.0F;
    }

    public float idf(long, long)
    {
        org.apache.lucene.search.similarities.DefaultSimilarity r0;
        long l0, l1, $l2;
        float $f0;
        double $d0, $d1, $d2, $d3, $d4;

        r0 := @this: org.apache.lucene.search.similarities.DefaultSimilarity;

        l1 := @parameter0: long;

        l0 := @parameter1: long;

        $d1 = (double) l0;

        $l2 = l1 + 1L;

        $d0 = (double) $l2;

        $d2 = $d1 / $d0;

        $d3 = staticinvoke <java.lang.Math: double log(double)>($d2);

        $d4 = $d3 + 1.0;

        $f0 = (float) $d4;

        return $f0;
    }

    public void setDiscountOverlaps(boolean)
    {
        org.apache.lucene.search.similarities.DefaultSimilarity r0;
        boolean z0;

        r0 := @this: org.apache.lucene.search.similarities.DefaultSimilarity;

        z0 := @parameter0: boolean;

        r0.<org.apache.lucene.search.similarities.DefaultSimilarity: boolean discountOverlaps> = z0;

        return;
    }

    public boolean getDiscountOverlaps()
    {
        org.apache.lucene.search.similarities.DefaultSimilarity r0;
        boolean $z0;

        r0 := @this: org.apache.lucene.search.similarities.DefaultSimilarity;

        $z0 = r0.<org.apache.lucene.search.similarities.DefaultSimilarity: boolean discountOverlaps>;

        return $z0;
    }

    public java.lang.String toString()
    {
        org.apache.lucene.search.similarities.DefaultSimilarity r0;

        r0 := @this: org.apache.lucene.search.similarities.DefaultSimilarity;

        return "DefaultSimilarity";
    }
}
