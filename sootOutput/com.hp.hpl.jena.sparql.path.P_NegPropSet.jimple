public class com.hp.hpl.jena.sparql.path.P_NegPropSet extends com.hp.hpl.jena.sparql.path.PathBase
{
    java.util.List nodes;
    java.util.List forwardNodes;
    java.util.List backwardNodes;

    public void <init>()
    {
        com.hp.hpl.jena.sparql.path.P_NegPropSet r0;
        java.util.ArrayList $r1, $r2, $r3;

        r0 := @this: com.hp.hpl.jena.sparql.path.P_NegPropSet;

        specialinvoke r0.<com.hp.hpl.jena.sparql.path.PathBase: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.path.P_NegPropSet: java.util.List nodes> = $r1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.path.P_NegPropSet: java.util.List forwardNodes> = $r2;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.path.P_NegPropSet: java.util.List backwardNodes> = $r3;

        return;
    }

    public void add(com.hp.hpl.jena.sparql.path.P_Path0)
    {
        com.hp.hpl.jena.sparql.path.P_Path0 r1;
        com.hp.hpl.jena.sparql.path.P_NegPropSet r0;
        com.hp.hpl.jena.graph.Node $r4, $r6;
        java.util.List $r2, $r3, $r5;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.path.P_NegPropSet;

        r1 := @parameter0: com.hp.hpl.jena.sparql.path.P_Path0;

        $r2 = r0.<com.hp.hpl.jena.sparql.path.P_NegPropSet: java.util.List nodes>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        $z0 = virtualinvoke r1.<com.hp.hpl.jena.sparql.path.P_Path0: boolean isForward()>();

        if $z0 == 0 goto label1;

        $r5 = r0.<com.hp.hpl.jena.sparql.path.P_NegPropSet: java.util.List forwardNodes>;

        $r6 = virtualinvoke r1.<com.hp.hpl.jena.sparql.path.P_Path0: com.hp.hpl.jena.graph.Node getNode()>();

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r6);

        goto label2;

     label1:
        $r3 = r0.<com.hp.hpl.jena.sparql.path.P_NegPropSet: java.util.List backwardNodes>;

        $r4 = virtualinvoke r1.<com.hp.hpl.jena.sparql.path.P_Path0: com.hp.hpl.jena.graph.Node getNode()>();

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r4);

     label2:
        return;
    }

    public java.util.List getNodes()
    {
        java.util.List $r1;
        com.hp.hpl.jena.sparql.path.P_NegPropSet r0;

        r0 := @this: com.hp.hpl.jena.sparql.path.P_NegPropSet;

        $r1 = r0.<com.hp.hpl.jena.sparql.path.P_NegPropSet: java.util.List nodes>;

        return $r1;
    }

    public java.util.List getFwdNodes()
    {
        java.util.List $r1;
        com.hp.hpl.jena.sparql.path.P_NegPropSet r0;

        r0 := @this: com.hp.hpl.jena.sparql.path.P_NegPropSet;

        $r1 = r0.<com.hp.hpl.jena.sparql.path.P_NegPropSet: java.util.List forwardNodes>;

        return $r1;
    }

    public java.util.List getBwdNodes()
    {
        java.util.List $r1;
        com.hp.hpl.jena.sparql.path.P_NegPropSet r0;

        r0 := @this: com.hp.hpl.jena.sparql.path.P_NegPropSet;

        $r1 = r0.<com.hp.hpl.jena.sparql.path.P_NegPropSet: java.util.List backwardNodes>;

        return $r1;
    }

    public void visit(com.hp.hpl.jena.sparql.path.PathVisitor)
    {
        com.hp.hpl.jena.sparql.path.PathVisitor r0;
        com.hp.hpl.jena.sparql.path.P_NegPropSet r1;

        r1 := @this: com.hp.hpl.jena.sparql.path.P_NegPropSet;

        r0 := @parameter0: com.hp.hpl.jena.sparql.path.PathVisitor;

        interfaceinvoke r0.<com.hp.hpl.jena.sparql.path.PathVisitor: void visit(com.hp.hpl.jena.sparql.path.P_NegPropSet)>(r1);

        return;
    }

    public boolean equalTo(com.hp.hpl.jena.sparql.path.Path, com.hp.hpl.jena.sparql.util.NodeIsomorphismMap)
    {
        com.hp.hpl.jena.sparql.path.P_NegPropSet r1, r2;
        java.util.List $r3, $r4;
        com.hp.hpl.jena.sparql.path.Path r0;
        com.hp.hpl.jena.sparql.util.NodeIsomorphismMap r5;
        boolean $z0, $z1;

        r2 := @this: com.hp.hpl.jena.sparql.path.P_NegPropSet;

        r0 := @parameter0: com.hp.hpl.jena.sparql.path.Path;

        r5 := @parameter1: com.hp.hpl.jena.sparql.util.NodeIsomorphismMap;

        $z0 = r0 instanceof com.hp.hpl.jena.sparql.path.P_NegPropSet;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        r1 = (com.hp.hpl.jena.sparql.path.P_NegPropSet) r0;

        $r4 = r2.<com.hp.hpl.jena.sparql.path.P_NegPropSet: java.util.List nodes>;

        $r3 = r1.<com.hp.hpl.jena.sparql.path.P_NegPropSet: java.util.List nodes>;

        $z1 = interfaceinvoke $r4.<java.util.List: boolean equals(java.lang.Object)>($r3);

        return $z1;
    }

    public int hashCode()
    {
        java.util.List $r1;
        int $i0, $i1;
        com.hp.hpl.jena.sparql.path.P_NegPropSet r0;

        r0 := @this: com.hp.hpl.jena.sparql.path.P_NegPropSet;

        $r1 = r0.<com.hp.hpl.jena.sparql.path.P_NegPropSet: java.util.List nodes>;

        $i0 = interfaceinvoke $r1.<java.util.List: int hashCode()>();

        $i1 = $i0 ^ 404;

        return $i1;
    }
}
