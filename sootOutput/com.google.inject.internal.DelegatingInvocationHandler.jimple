class com.google.inject.internal.DelegatingInvocationHandler extends java.lang.Object implements java.lang.reflect.InvocationHandler
{
    private java.lang.Object delegate;

    void <init>()
    {
        com.google.inject.internal.DelegatingInvocationHandler r0;

        r0 := @this: com.google.inject.internal.DelegatingInvocationHandler;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public java.lang.Object invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[]) throws java.lang.Throwable
    {
        java.lang.Throwable $r8;
        java.lang.IllegalStateException $r6;
        java.lang.IllegalAccessException $r11;
        java.lang.Object[] r3;
        com.google.inject.internal.DelegatingInvocationHandler r0;
        java.lang.RuntimeException $r10, $r12;
        java.lang.IllegalArgumentException $r9;
        java.lang.reflect.InvocationTargetException $r7;
        java.lang.Object $r1, $r4, $r5, r13;
        java.lang.reflect.Method r2;

        r0 := @this: com.google.inject.internal.DelegatingInvocationHandler;

        r13 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.reflect.Method;

        r3 := @parameter2: java.lang.Object[];

        $r1 = r0.<com.google.inject.internal.DelegatingInvocationHandler: java.lang.Object delegate>;

        if $r1 != null goto label1;

        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>("This is a proxy used to support circular references involving constructors. The object we\'re proxying is not constructed yet. Please wait until after injection has completed to use this object.");

        throw $r6;

     label1:
        $r4 = r0.<com.google.inject.internal.DelegatingInvocationHandler: java.lang.Object delegate>;

        $r5 = virtualinvoke r2.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r4, r3);

     label2:
        return $r5;

     label3:
        $r11 := @caughtexception;

        $r12 = new java.lang.RuntimeException;

        specialinvoke $r12.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r11);

        throw $r12;

     label4:
        $r9 := @caughtexception;

        $r10 = new java.lang.RuntimeException;

        specialinvoke $r10.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r9);

        throw $r10;

     label5:
        $r7 := @caughtexception;

        $r8 = virtualinvoke $r7.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>();

        throw $r8;

        catch java.lang.IllegalAccessException from label1 to label2 with label3;
        catch java.lang.IllegalArgumentException from label1 to label2 with label4;
        catch java.lang.reflect.InvocationTargetException from label1 to label2 with label5;
    }

    public java.lang.Object getDelegate()
    {
        java.lang.Object $r1;
        com.google.inject.internal.DelegatingInvocationHandler r0;

        r0 := @this: com.google.inject.internal.DelegatingInvocationHandler;

        $r1 = r0.<com.google.inject.internal.DelegatingInvocationHandler: java.lang.Object delegate>;

        return $r1;
    }

    void setDelegate(java.lang.Object)
    {
        java.lang.Object r1;
        com.google.inject.internal.DelegatingInvocationHandler r0;

        r0 := @this: com.google.inject.internal.DelegatingInvocationHandler;

        r1 := @parameter0: java.lang.Object;

        r0.<com.google.inject.internal.DelegatingInvocationHandler: java.lang.Object delegate> = r1;

        return;
    }
}
