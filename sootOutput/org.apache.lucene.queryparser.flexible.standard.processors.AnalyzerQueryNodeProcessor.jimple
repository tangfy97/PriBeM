public class org.apache.lucene.queryparser.flexible.standard.processors.AnalyzerQueryNodeProcessor extends org.apache.lucene.queryparser.flexible.core.processors.QueryNodeProcessorImpl
{
    private org.apache.lucene.analysis.Analyzer analyzer;
    private boolean positionIncrementsEnabled;
    static final boolean $assertionsDisabled;

    public void <init>()
    {
        org.apache.lucene.queryparser.flexible.standard.processors.AnalyzerQueryNodeProcessor r0;

        r0 := @this: org.apache.lucene.queryparser.flexible.standard.processors.AnalyzerQueryNodeProcessor;

        specialinvoke r0.<org.apache.lucene.queryparser.flexible.core.processors.QueryNodeProcessorImpl: void <init>()>();

        return;
    }

    public org.apache.lucene.queryparser.flexible.core.nodes.QueryNode process(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode) throws org.apache.lucene.queryparser.flexible.core.QueryNodeException
    {
        org.apache.lucene.queryparser.flexible.standard.processors.AnalyzerQueryNodeProcessor r0;
        org.apache.lucene.queryparser.flexible.core.config.ConfigurationKey $r2, $r7;
        org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler $r1, $r6;
        org.apache.lucene.analysis.Analyzer r4, $r10;
        java.lang.Boolean r9;
        java.lang.Object $r3, $r8;
        org.apache.lucene.queryparser.flexible.core.nodes.QueryNode r5, $r11;
        boolean $z0;

        r0 := @this: org.apache.lucene.queryparser.flexible.standard.processors.AnalyzerQueryNodeProcessor;

        r5 := @parameter0: org.apache.lucene.queryparser.flexible.core.nodes.QueryNode;

        $r1 = virtualinvoke r0.<org.apache.lucene.queryparser.flexible.standard.processors.AnalyzerQueryNodeProcessor: org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler getQueryConfigHandler()>();

        $r2 = <org.apache.lucene.queryparser.flexible.standard.config.StandardQueryConfigHandler$ConfigurationKeys: org.apache.lucene.queryparser.flexible.core.config.ConfigurationKey ANALYZER>;

        $r3 = virtualinvoke $r1.<org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler: java.lang.Object get(org.apache.lucene.queryparser.flexible.core.config.ConfigurationKey)>($r2);

        r4 = (org.apache.lucene.analysis.Analyzer) $r3;

        if r4 == null goto label2;

        r0.<org.apache.lucene.queryparser.flexible.standard.processors.AnalyzerQueryNodeProcessor: org.apache.lucene.analysis.Analyzer analyzer> = r4;

        r0.<org.apache.lucene.queryparser.flexible.standard.processors.AnalyzerQueryNodeProcessor: boolean positionIncrementsEnabled> = 0;

        $r6 = virtualinvoke r0.<org.apache.lucene.queryparser.flexible.standard.processors.AnalyzerQueryNodeProcessor: org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler getQueryConfigHandler()>();

        $r7 = <org.apache.lucene.queryparser.flexible.standard.config.StandardQueryConfigHandler$ConfigurationKeys: org.apache.lucene.queryparser.flexible.core.config.ConfigurationKey ENABLE_POSITION_INCREMENTS>;

        $r8 = virtualinvoke $r6.<org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler: java.lang.Object get(org.apache.lucene.queryparser.flexible.core.config.ConfigurationKey)>($r7);

        r9 = (java.lang.Boolean) $r8;

        if r9 == null goto label1;

        $z0 = virtualinvoke r9.<java.lang.Boolean: boolean booleanValue()>();

        r0.<org.apache.lucene.queryparser.flexible.standard.processors.AnalyzerQueryNodeProcessor: boolean positionIncrementsEnabled> = $z0;

     label1:
        $r10 = r0.<org.apache.lucene.queryparser.flexible.standard.processors.AnalyzerQueryNodeProcessor: org.apache.lucene.analysis.Analyzer analyzer>;

        if $r10 == null goto label2;

        $r11 = specialinvoke r0.<org.apache.lucene.queryparser.flexible.core.processors.QueryNodeProcessorImpl: org.apache.lucene.queryparser.flexible.core.nodes.QueryNode process(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode)>(r5);

        return $r11;

     label2:
        return r5;
    }

    protected org.apache.lucene.queryparser.flexible.core.nodes.QueryNode postProcessNode(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode) throws org.apache.lucene.queryparser.flexible.core.QueryNodeException
    {
        org.apache.lucene.queryparser.flexible.core.nodes.QueryNode r0, $r1;
        org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute r39;
        org.apache.lucene.util.Attribute $r10, $r30;
        java.lang.AssertionError $r52, $r54, $r60, $r63;
        org.apache.lucene.queryparser.flexible.core.nodes.FieldQueryNode r2, r22, r45, $r55, $r61, $r64;
        java.util.ArrayList $r59;
        org.apache.lucene.analysis.CachingTokenFilter $r49;
        java.lang.String $r3, $r4, r41, r42, r43, r46;
        org.apache.lucene.analysis.TokenStream $r8;
        org.apache.lucene.analysis.Analyzer $r7;
        java.io.IOException $r31, $r32, $r33, $r34, $r35, $r36, $r37;
        java.lang.RuntimeException $r48;
        java.io.StringReader $r47;
        org.apache.lucene.queryparser.flexible.core.nodes.TokenizedPhraseQueryNode $r62;
        org.apache.lucene.queryparser.flexible.core.nodes.NoTokenFoundQueryNode $r50, $r51;
        org.apache.lucene.queryparser.flexible.core.nodes.GroupQueryNode $r57;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z21, z22, $z23, $z24;
        int $i0, i1, i2, $i3, i4, i5, i6, i7, i8, i9, i10, i11, $i13, $i15, $i17, $i19, $i21, $i23, $i25, $i27;
        java.util.LinkedList $r53;
        org.apache.lucene.queryparser.flexible.standard.processors.AnalyzerQueryNodeProcessor r5;
        org.apache.lucene.analysis.tokenattributes.CharTermAttribute r40;
        java.util.Iterator $r18, $r20;
        org.apache.lucene.queryparser.flexible.standard.nodes.MultiPhraseQueryNode $r58;
        java.lang.Object $r19, $r21;
        org.apache.lucene.queryparser.flexible.standard.nodes.StandardBooleanQueryNode $r56;

        r5 := @this: org.apache.lucene.queryparser.flexible.standard.processors.AnalyzerQueryNodeProcessor;

        r0 := @parameter0: org.apache.lucene.queryparser.flexible.core.nodes.QueryNode;

        $z0 = r0 instanceof org.apache.lucene.queryparser.flexible.core.nodes.TextableQueryNode;

        if $z0 == 0 goto label62;

        $z1 = r0 instanceof org.apache.lucene.queryparser.flexible.standard.nodes.WildcardQueryNode;

        if $z1 != 0 goto label62;

        $z2 = r0 instanceof org.apache.lucene.queryparser.flexible.core.nodes.FuzzyQueryNode;

        if $z2 != 0 goto label62;

        $z3 = r0 instanceof org.apache.lucene.queryparser.flexible.standard.nodes.RegexpQueryNode;

        if $z3 != 0 goto label62;

        $r1 = interfaceinvoke r0.<org.apache.lucene.queryparser.flexible.core.nodes.QueryNode: org.apache.lucene.queryparser.flexible.core.nodes.QueryNode getParent()>();

        $z4 = $r1 instanceof org.apache.lucene.queryparser.flexible.core.nodes.RangeQueryNode;

        if $z4 != 0 goto label62;

        r2 = (org.apache.lucene.queryparser.flexible.core.nodes.FieldQueryNode) r0;

        $r3 = virtualinvoke r2.<org.apache.lucene.queryparser.flexible.core.nodes.FieldQueryNode: java.lang.String getTextAsString()>();

        $r4 = virtualinvoke r2.<org.apache.lucene.queryparser.flexible.core.nodes.FieldQueryNode: java.lang.String getFieldAsString()>();

     label01:
        $r7 = r5.<org.apache.lucene.queryparser.flexible.standard.processors.AnalyzerQueryNodeProcessor: org.apache.lucene.analysis.Analyzer analyzer>;

        $r47 = new java.io.StringReader;

        specialinvoke $r47.<java.io.StringReader: void <init>(java.lang.String)>($r3);

        $r8 = virtualinvoke $r7.<org.apache.lucene.analysis.Analyzer: org.apache.lucene.analysis.TokenStream tokenStream(java.lang.String,java.io.Reader)>($r4, $r47);

        virtualinvoke $r8.<org.apache.lucene.analysis.TokenStream: void reset()>();

     label02:
        goto label04;

     label03:
        $r37 := @caughtexception;

        $r48 = new java.lang.RuntimeException;

        specialinvoke $r48.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r37);

        throw $r48;

     label04:
        $r49 = new org.apache.lucene.analysis.CachingTokenFilter;

        specialinvoke $r49.<org.apache.lucene.analysis.CachingTokenFilter: void <init>(org.apache.lucene.analysis.TokenStream)>($r8);

        r39 = null;

        i1 = 0;

        i2 = 0;

        z22 = 0;

        $z5 = virtualinvoke $r49.<org.apache.lucene.analysis.CachingTokenFilter: boolean hasAttribute(java.lang.Class)>(class "Lorg/apache/lucene/analysis/tokenattributes/PositionIncrementAttribute;");

        if $z5 == 0 goto label05;

        $r30 = virtualinvoke $r49.<org.apache.lucene.analysis.CachingTokenFilter: org.apache.lucene.util.Attribute getAttribute(java.lang.Class)>(class "Lorg/apache/lucene/analysis/tokenattributes/PositionIncrementAttribute;");

        r39 = (org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute) $r30;

     label05:
        $z23 = virtualinvoke $r49.<org.apache.lucene.analysis.CachingTokenFilter: boolean incrementToken()>();

        if $z23 == 0 goto label10;

        i1 = i1 + 1;

        if r39 == null goto label06;

        $i3 = interfaceinvoke r39.<org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute: int getPositionIncrement()>();

        goto label07;

     label06:
        $i3 = 1;

     label07:
        if $i3 == 0 goto label08;

        i2 = i2 + $i3;

        goto label09;

     label08:
        z22 = 1;

     label09:
        goto label05;

     label10:
        goto label12;

     label11:
        $r36 := @caughtexception;

     label12:
        virtualinvoke $r49.<org.apache.lucene.analysis.CachingTokenFilter: void reset()>();

        virtualinvoke $r8.<org.apache.lucene.analysis.TokenStream: void close()>();

     label13:
        goto label15;

     label14:
        $r35 := @caughtexception;

     label15:
        $z6 = virtualinvoke $r49.<org.apache.lucene.analysis.CachingTokenFilter: boolean hasAttribute(java.lang.Class)>(class "Lorg/apache/lucene/analysis/tokenattributes/CharTermAttribute;");

        if $z6 != 0 goto label16;

        $r50 = new org.apache.lucene.queryparser.flexible.core.nodes.NoTokenFoundQueryNode;

        specialinvoke $r50.<org.apache.lucene.queryparser.flexible.core.nodes.NoTokenFoundQueryNode: void <init>()>();

        return $r50;

     label16:
        $r10 = virtualinvoke $r49.<org.apache.lucene.analysis.CachingTokenFilter: org.apache.lucene.util.Attribute getAttribute(java.lang.Class)>(class "Lorg/apache/lucene/analysis/tokenattributes/CharTermAttribute;");

        r40 = (org.apache.lucene.analysis.tokenattributes.CharTermAttribute) $r10;

        if i1 != 0 goto label17;

        $r51 = new org.apache.lucene.queryparser.flexible.core.nodes.NoTokenFoundQueryNode;

        specialinvoke $r51.<org.apache.lucene.queryparser.flexible.core.nodes.NoTokenFoundQueryNode: void <init>()>();

        return $r51;

     label17:
        if i1 != 1 goto label23;

        r41 = null;

     label18:
        $z20 = virtualinvoke $r49.<org.apache.lucene.analysis.CachingTokenFilter: boolean incrementToken()>();

        $z21 = <org.apache.lucene.queryparser.flexible.standard.processors.AnalyzerQueryNodeProcessor: boolean $assertionsDisabled>;

        if $z21 != 0 goto label19;

        if $z20 == 1 goto label19;

        $r52 = new java.lang.AssertionError;

        specialinvoke $r52.<java.lang.AssertionError: void <init>()>();

        throw $r52;

     label19:
        r41 = virtualinvoke r40.<java.lang.Object: java.lang.String toString()>();

     label20:
        goto label22;

     label21:
        $r34 := @caughtexception;

     label22:
        virtualinvoke r2.<org.apache.lucene.queryparser.flexible.core.nodes.FieldQueryNode: void setText(java.lang.CharSequence)>(r41);

        return r2;

     label23:
        if z22 != 0 goto label24;

        $z16 = r0 instanceof org.apache.lucene.queryparser.flexible.core.nodes.QuotedFieldQueryNode;

        if $z16 != 0 goto label52;

     label24:
        if i2 == 1 goto label25;

        $z9 = r0 instanceof org.apache.lucene.queryparser.flexible.core.nodes.QuotedFieldQueryNode;

        if $z9 != 0 goto label35;

     label25:
        $r53 = new java.util.LinkedList;

        specialinvoke $r53.<java.util.LinkedList: void <init>()>();

        i4 = 0;

     label26:
        if i4 >= i1 goto label32;

        r42 = null;

     label27:
        $z7 = virtualinvoke $r49.<org.apache.lucene.analysis.CachingTokenFilter: boolean incrementToken()>();

        $z8 = <org.apache.lucene.queryparser.flexible.standard.processors.AnalyzerQueryNodeProcessor: boolean $assertionsDisabled>;

        if $z8 != 0 goto label28;

        if $z7 == 1 goto label28;

        $r54 = new java.lang.AssertionError;

        specialinvoke $r54.<java.lang.AssertionError: void <init>()>();

        throw $r54;

     label28:
        r42 = virtualinvoke r40.<java.lang.Object: java.lang.String toString()>();

     label29:
        goto label31;

     label30:
        $r33 := @caughtexception;

     label31:
        $r55 = new org.apache.lucene.queryparser.flexible.core.nodes.FieldQueryNode;

        $i13 = (int) -1;

        $i15 = (int) -1;

        specialinvoke $r55.<org.apache.lucene.queryparser.flexible.core.nodes.FieldQueryNode: void <init>(java.lang.CharSequence,java.lang.CharSequence,int,int)>($r4, r42, $i13, $i15);

        virtualinvoke $r53.<java.util.LinkedList: boolean add(java.lang.Object)>($r55);

        i4 = i4 + 1;

        goto label26;

     label32:
        $r57 = new org.apache.lucene.queryparser.flexible.core.nodes.GroupQueryNode;

        $r56 = new org.apache.lucene.queryparser.flexible.standard.nodes.StandardBooleanQueryNode;

        if i2 != 1 goto label33;

        $z24 = 1;

        goto label34;

     label33:
        $z24 = 0;

     label34:
        specialinvoke $r56.<org.apache.lucene.queryparser.flexible.standard.nodes.StandardBooleanQueryNode: void <init>(java.util.List,boolean)>($r53, $z24);

        specialinvoke $r57.<org.apache.lucene.queryparser.flexible.core.nodes.GroupQueryNode: void <init>(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode)>($r56);

        return $r57;

     label35:
        $r58 = new org.apache.lucene.queryparser.flexible.standard.nodes.MultiPhraseQueryNode;

        specialinvoke $r58.<org.apache.lucene.queryparser.flexible.standard.nodes.MultiPhraseQueryNode: void <init>()>();

        $r59 = new java.util.ArrayList;

        specialinvoke $r59.<java.util.ArrayList: void <init>()>();

        $i17 = (int) -1;

        i5 = $i17;

        i6 = 0;

        i7 = 0;

     label36:
        if i6 >= i1 goto label47;

        r43 = null;

        i8 = 1;

     label37:
        $z12 = virtualinvoke $r49.<org.apache.lucene.analysis.CachingTokenFilter: boolean incrementToken()>();

        $z13 = <org.apache.lucene.queryparser.flexible.standard.processors.AnalyzerQueryNodeProcessor: boolean $assertionsDisabled>;

        if $z13 != 0 goto label38;

        if $z12 == 1 goto label38;

        $r60 = new java.lang.AssertionError;

        specialinvoke $r60.<java.lang.AssertionError: void <init>()>();

        throw $r60;

     label38:
        r43 = virtualinvoke r40.<java.lang.Object: java.lang.String toString()>();

        if r39 == null goto label39;

        i8 = interfaceinvoke r39.<org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute: int getPositionIncrement()>();

     label39:
        goto label41;

     label40:
        $r32 := @caughtexception;

     label41:
        if i8 <= 0 goto label46;

        $i0 = interfaceinvoke $r59.<java.util.List: int size()>();

        if $i0 <= 0 goto label46;

        $r20 = interfaceinvoke $r59.<java.util.List: java.util.Iterator iterator()>();

     label42:
        $z14 = interfaceinvoke $r20.<java.util.Iterator: boolean hasNext()>();

        if $z14 == 0 goto label45;

        $r21 = interfaceinvoke $r20.<java.util.Iterator: java.lang.Object next()>();

        r22 = (org.apache.lucene.queryparser.flexible.core.nodes.FieldQueryNode) $r21;

        $z15 = r5.<org.apache.lucene.queryparser.flexible.standard.processors.AnalyzerQueryNodeProcessor: boolean positionIncrementsEnabled>;

        if $z15 == 0 goto label43;

        virtualinvoke r22.<org.apache.lucene.queryparser.flexible.core.nodes.FieldQueryNode: void setPositionIncrement(int)>(i5);

        goto label44;

     label43:
        virtualinvoke r22.<org.apache.lucene.queryparser.flexible.core.nodes.FieldQueryNode: void setPositionIncrement(int)>(i7);

     label44:
        virtualinvoke $r58.<org.apache.lucene.queryparser.flexible.standard.nodes.MultiPhraseQueryNode: void add(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode)>(r22);

        goto label42;

     label45:
        i7 = i7 + 1;

        interfaceinvoke $r59.<java.util.List: void clear()>();

     label46:
        i5 = i5 + i8;

        $r61 = new org.apache.lucene.queryparser.flexible.core.nodes.FieldQueryNode;

        $i19 = (int) -1;

        $i21 = (int) -1;

        specialinvoke $r61.<org.apache.lucene.queryparser.flexible.core.nodes.FieldQueryNode: void <init>(java.lang.CharSequence,java.lang.CharSequence,int,int)>($r4, r43, $i19, $i21);

        interfaceinvoke $r59.<java.util.List: boolean add(java.lang.Object)>($r61);

        i6 = i6 + 1;

        goto label36;

     label47:
        $r18 = interfaceinvoke $r59.<java.util.List: java.util.Iterator iterator()>();

     label48:
        $z10 = interfaceinvoke $r18.<java.util.Iterator: boolean hasNext()>();

        if $z10 == 0 goto label51;

        $r19 = interfaceinvoke $r18.<java.util.Iterator: java.lang.Object next()>();

        r45 = (org.apache.lucene.queryparser.flexible.core.nodes.FieldQueryNode) $r19;

        $z11 = r5.<org.apache.lucene.queryparser.flexible.standard.processors.AnalyzerQueryNodeProcessor: boolean positionIncrementsEnabled>;

        if $z11 == 0 goto label49;

        virtualinvoke r45.<org.apache.lucene.queryparser.flexible.core.nodes.FieldQueryNode: void setPositionIncrement(int)>(i5);

        goto label50;

     label49:
        virtualinvoke r45.<org.apache.lucene.queryparser.flexible.core.nodes.FieldQueryNode: void setPositionIncrement(int)>(i7);

     label50:
        virtualinvoke $r58.<org.apache.lucene.queryparser.flexible.standard.nodes.MultiPhraseQueryNode: void add(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode)>(r45);

        goto label48;

     label51:
        return $r58;

     label52:
        $r62 = new org.apache.lucene.queryparser.flexible.core.nodes.TokenizedPhraseQueryNode;

        specialinvoke $r62.<org.apache.lucene.queryparser.flexible.core.nodes.TokenizedPhraseQueryNode: void <init>()>();

        $i23 = (int) -1;

        i9 = $i23;

        i10 = 0;

     label53:
        if i10 >= i1 goto label61;

        r46 = null;

        i11 = 1;

     label54:
        $z17 = virtualinvoke $r49.<org.apache.lucene.analysis.CachingTokenFilter: boolean incrementToken()>();

        $z18 = <org.apache.lucene.queryparser.flexible.standard.processors.AnalyzerQueryNodeProcessor: boolean $assertionsDisabled>;

        if $z18 != 0 goto label55;

        if $z17 == 1 goto label55;

        $r63 = new java.lang.AssertionError;

        specialinvoke $r63.<java.lang.AssertionError: void <init>()>();

        throw $r63;

     label55:
        r46 = virtualinvoke r40.<java.lang.Object: java.lang.String toString()>();

        if r39 == null goto label56;

        i11 = interfaceinvoke r39.<org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute: int getPositionIncrement()>();

     label56:
        goto label58;

     label57:
        $r31 := @caughtexception;

     label58:
        $r64 = new org.apache.lucene.queryparser.flexible.core.nodes.FieldQueryNode;

        $i25 = (int) -1;

        $i27 = (int) -1;

        specialinvoke $r64.<org.apache.lucene.queryparser.flexible.core.nodes.FieldQueryNode: void <init>(java.lang.CharSequence,java.lang.CharSequence,int,int)>($r4, r46, $i25, $i27);

        $z19 = r5.<org.apache.lucene.queryparser.flexible.standard.processors.AnalyzerQueryNodeProcessor: boolean positionIncrementsEnabled>;

        if $z19 == 0 goto label59;

        i9 = i9 + i11;

        virtualinvoke $r64.<org.apache.lucene.queryparser.flexible.core.nodes.FieldQueryNode: void setPositionIncrement(int)>(i9);

        goto label60;

     label59:
        virtualinvoke $r64.<org.apache.lucene.queryparser.flexible.core.nodes.FieldQueryNode: void setPositionIncrement(int)>(i10);

     label60:
        virtualinvoke $r62.<org.apache.lucene.queryparser.flexible.core.nodes.TokenizedPhraseQueryNode: void add(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode)>($r64);

        i10 = i10 + 1;

        goto label53;

     label61:
        return $r62;

     label62:
        return r0;

        catch java.io.IOException from label01 to label02 with label03;
        catch java.io.IOException from label05 to label10 with label11;
        catch java.io.IOException from label12 to label13 with label14;
        catch java.io.IOException from label18 to label20 with label21;
        catch java.io.IOException from label27 to label29 with label30;
        catch java.io.IOException from label37 to label39 with label40;
        catch java.io.IOException from label54 to label56 with label57;
    }

    protected org.apache.lucene.queryparser.flexible.core.nodes.QueryNode preProcessNode(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode) throws org.apache.lucene.queryparser.flexible.core.QueryNodeException
    {
        org.apache.lucene.queryparser.flexible.standard.processors.AnalyzerQueryNodeProcessor r1;
        org.apache.lucene.queryparser.flexible.core.nodes.QueryNode r0;

        r1 := @this: org.apache.lucene.queryparser.flexible.standard.processors.AnalyzerQueryNodeProcessor;

        r0 := @parameter0: org.apache.lucene.queryparser.flexible.core.nodes.QueryNode;

        return r0;
    }

    protected java.util.List setChildrenOrder(java.util.List) throws org.apache.lucene.queryparser.flexible.core.QueryNodeException
    {
        org.apache.lucene.queryparser.flexible.standard.processors.AnalyzerQueryNodeProcessor r1;
        java.util.List r0;

        r1 := @this: org.apache.lucene.queryparser.flexible.standard.processors.AnalyzerQueryNodeProcessor;

        r0 := @parameter0: java.util.List;

        return r0;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/apache/lucene/queryparser/flexible/standard/processors/AnalyzerQueryNodeProcessor;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.lucene.queryparser.flexible.standard.processors.AnalyzerQueryNodeProcessor: boolean $assertionsDisabled> = $z1;

        return;
    }
}
