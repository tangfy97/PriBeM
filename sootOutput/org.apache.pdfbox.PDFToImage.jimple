public class org.apache.pdfbox.PDFToImage extends java.lang.Object
{
    private static final java.lang.String PASSWORD;
    private static final java.lang.String START_PAGE;
    private static final java.lang.String END_PAGE;
    private static final java.lang.String IMAGE_FORMAT;
    private static final java.lang.String OUTPUT_PREFIX;
    private static final java.lang.String COLOR;
    private static final java.lang.String RESOLUTION;
    private static final java.lang.String CROPBOX;
    private static final java.lang.String NONSEQ;

    private void <init>()
    {
        org.apache.pdfbox.PDFToImage r0;

        r0 := @this: org.apache.pdfbox.PDFToImage;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void main(java.lang.String[]) throws java.lang.Exception
    {
        java.lang.Float $r25, $r27, $r29, $r31;
        byte $b0, $b1, $b2, b15, $b16;
        org.apache.pdfbox.pdmodel.PDDocument $r2, r44;
        java.lang.Exception $r36;
        java.lang.StringBuilder $r8, $r10, $r11, $r12;
        java.lang.Throwable $r35;
        java.lang.String $r3, $r4, $r5, $r6, $r13, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r26, $r28, $r30, $r32, $r33, $r34, r39, r40, r41, r42, r43, $r45;
        java.io.File $r14;
        java.awt.HeadlessException $r38;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, z14, $z15, $z16;
        org.apache.pdfbox.util.PDFImageWriter $r46;
        float f0, f1, f2, f3;
        java.awt.Toolkit $r0;
        java.lang.String[] r1;
        int $i3, $i4, $i5, $i6, i7, i8, i9, i10, $i11, i12, i13, i14;
        java.io.PrintStream $r7, $r9, $r37;

        r1 := @parameter0: java.lang.String[];

        z14 = 0;

        r39 = "";

        r40 = null;

        r41 = null;

        r42 = "jpg";

        i7 = 1;

        i8 = 2147483647;

        r43 = "rgb";

        f0 = 0.0F;

        f1 = 0.0F;

        f2 = 0.0F;

        f3 = 0.0F;

     label01:
        $r0 = staticinvoke <java.awt.Toolkit: java.awt.Toolkit getDefaultToolkit()>();

        i9 = virtualinvoke $r0.<java.awt.Toolkit: int getScreenResolution()>();

     label02:
        goto label04;

     label03:
        $r38 := @caughtexception;

        i9 = 96;

     label04:
        i10 = 0;

     label05:
        $i11 = lengthof r1;

        if i10 >= $i11 goto label19;

        $r15 = r1[i10];

        $z5 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>("-password");

        if $z5 == 0 goto label07;

        i10 = i10 + 1;

        $i6 = lengthof r1;

        if i10 < $i6 goto label06;

        staticinvoke <org.apache.pdfbox.PDFToImage: void usage()>();

     label06:
        r39 = r1[i10];

        goto label18;

     label07:
        $r16 = r1[i10];

        $z6 = virtualinvoke $r16.<java.lang.String: boolean equals(java.lang.Object)>("-startPage");

        if $z6 == 0 goto label09;

        i10 = i10 + 1;

        $i5 = lengthof r1;

        if i10 < $i5 goto label08;

        staticinvoke <org.apache.pdfbox.PDFToImage: void usage()>();

     label08:
        $r34 = r1[i10];

        i7 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r34);

        goto label18;

     label09:
        $r17 = r1[i10];

        $z7 = virtualinvoke $r17.<java.lang.String: boolean equals(java.lang.Object)>("-endPage");

        if $z7 == 0 goto label11;

        i10 = i10 + 1;

        $i4 = lengthof r1;

        if i10 < $i4 goto label10;

        staticinvoke <org.apache.pdfbox.PDFToImage: void usage()>();

     label10:
        $r33 = r1[i10];

        i8 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r33);

        goto label18;

     label11:
        $r18 = r1[i10];

        $z8 = virtualinvoke $r18.<java.lang.String: boolean equals(java.lang.Object)>("-imageType");

        if $z8 == 0 goto label12;

        i10 = i10 + 1;

        r42 = r1[i10];

        goto label18;

     label12:
        $r19 = r1[i10];

        $z9 = virtualinvoke $r19.<java.lang.String: boolean equals(java.lang.Object)>("-outputPrefix");

        if $z9 == 0 goto label13;

        i10 = i10 + 1;

        r41 = r1[i10];

        goto label18;

     label13:
        $r20 = r1[i10];

        $z10 = virtualinvoke $r20.<java.lang.String: boolean equals(java.lang.Object)>("-color");

        if $z10 == 0 goto label14;

        i10 = i10 + 1;

        r43 = r1[i10];

        goto label18;

     label14:
        $r21 = r1[i10];

        $z11 = virtualinvoke $r21.<java.lang.String: boolean equals(java.lang.Object)>("-resolution");

        if $z11 == 0 goto label15;

        i10 = i10 + 1;

        $r32 = r1[i10];

        i9 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r32);

        goto label18;

     label15:
        $r22 = r1[i10];

        $z12 = virtualinvoke $r22.<java.lang.String: boolean equals(java.lang.Object)>("-cropbox");

        if $z12 == 0 goto label16;

        i12 = i10 + 1;

        $r24 = r1[i12];

        $r25 = staticinvoke <java.lang.Float: java.lang.Float valueOf(java.lang.String)>($r24);

        f0 = virtualinvoke $r25.<java.lang.Float: float floatValue()>();

        i13 = i12 + 1;

        $r26 = r1[i13];

        $r27 = staticinvoke <java.lang.Float: java.lang.Float valueOf(java.lang.String)>($r26);

        f1 = virtualinvoke $r27.<java.lang.Float: float floatValue()>();

        i14 = i13 + 1;

        $r28 = r1[i14];

        $r29 = staticinvoke <java.lang.Float: java.lang.Float valueOf(java.lang.String)>($r28);

        f2 = virtualinvoke $r29.<java.lang.Float: float floatValue()>();

        i10 = i14 + 1;

        $r30 = r1[i10];

        $r31 = staticinvoke <java.lang.Float: java.lang.Float valueOf(java.lang.String)>($r30);

        f3 = virtualinvoke $r31.<java.lang.Float: float floatValue()>();

        goto label18;

     label16:
        $r23 = r1[i10];

        $z13 = virtualinvoke $r23.<java.lang.String: boolean equals(java.lang.Object)>("-nonSeq");

        if $z13 == 0 goto label17;

        z14 = 1;

        goto label18;

     label17:
        if r40 != null goto label18;

        r40 = r1[i10];

     label18:
        i10 = i10 + 1;

        goto label05;

     label19:
        if r40 != null goto label20;

        staticinvoke <org.apache.pdfbox.PDFToImage: void usage()>();

        goto label39;

     label20:
        if r41 != null goto label21;

        $i3 = virtualinvoke r40.<java.lang.String: int lastIndexOf(int)>(46);

        r41 = virtualinvoke r40.<java.lang.String: java.lang.String substring(int,int)>(0, $i3);

     label21:
        r44 = null;

     label22:
        if z14 == 0 goto label23;

        $r14 = new java.io.File;

        specialinvoke $r14.<java.io.File: void <init>(java.lang.String)>(r40);

        r44 = staticinvoke <org.apache.pdfbox.pdmodel.PDDocument: org.apache.pdfbox.pdmodel.PDDocument loadNonSeq(java.io.File,org.apache.pdfbox.io.RandomAccess,java.lang.String)>($r14, null, r39);

        goto label24;

     label23:
        $r2 = staticinvoke <org.apache.pdfbox.pdmodel.PDDocument: org.apache.pdfbox.pdmodel.PDDocument load(java.lang.String)>(r40);

        r44 = $r2;

        $z0 = virtualinvoke $r2.<org.apache.pdfbox.pdmodel.PDDocument: boolean isEncrypted()>();

        if $z0 == 0 goto label24;

        virtualinvoke $r2.<org.apache.pdfbox.pdmodel.PDDocument: void decrypt(java.lang.String)>(r39);

     label24:
        b15 = 24;

        $r45 = "bilevel";

        $z15 = virtualinvoke $r45.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r43);

        if $z15 == 0 goto label25;

        b15 = 12;

        goto label30;

     label25:
        $r3 = "indexed";

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r43);

        if $z1 == 0 goto label26;

        b15 = 13;

        goto label30;

     label26:
        $r4 = "gray";

        $z2 = virtualinvoke $r4.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r43);

        if $z2 == 0 goto label27;

        b15 = 10;

        goto label30;

     label27:
        $r5 = "rgb";

        $z3 = virtualinvoke $r5.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r43);

        if $z3 == 0 goto label28;

        b15 = 1;

        goto label30;

     label28:
        $r6 = "rgba";

        $z4 = virtualinvoke $r6.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r43);

        if $z4 == 0 goto label29;

        b15 = 2;

        goto label30;

     label29:
        $r7 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r7.<java.io.PrintStream: void println(java.lang.String)>("Error: the number of bits per pixel must be 1, 8 or 24.");

        staticinvoke <java.lang.System: void exit(int)>(2);

     label30:
        $b16 = f0 cmpl 0.0F;

        if $b16 != 0 goto label31;

        $b0 = f1 cmpl 0.0F;

        if $b0 != 0 goto label31;

        $b1 = f2 cmpl 0.0F;

        if $b1 != 0 goto label31;

        $b2 = f3 cmpl 0.0F;

        if $b2 == 0 goto label32;

     label31:
        staticinvoke <org.apache.pdfbox.PDFToImage: void changeCropBoxes(org.apache.pdfbox.pdmodel.PDDocument,float,float,float,float)>(r44, f0, f1, f2, f3);

     label32:
        $r46 = new org.apache.pdfbox.util.PDFImageWriter;

        specialinvoke $r46.<org.apache.pdfbox.util.PDFImageWriter: void <init>()>();

        $z16 = virtualinvoke $r46.<org.apache.pdfbox.util.PDFImageWriter: boolean writeImage(org.apache.pdfbox.pdmodel.PDDocument,java.lang.String,java.lang.String,int,int,java.lang.String,int,int)>(r44, r42, r39, i7, i8, r41, b15, i9);

        if $z16 != 0 goto label33;

        $r9 = <java.lang.System: java.io.PrintStream err>;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error: no writer found for image format \'");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r42);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>($r13);

        staticinvoke <java.lang.System: void exit(int)>(1);

     label33:
        if r44 == null goto label39;

        virtualinvoke r44.<org.apache.pdfbox.pdmodel.PDDocument: void close()>();

        goto label39;

     label34:
        $r36 := @caughtexception;

        $r37 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r37.<java.io.PrintStream: void println(java.lang.Object)>($r36);

     label35:
        if r44 == null goto label39;

        virtualinvoke r44.<org.apache.pdfbox.pdmodel.PDDocument: void close()>();

        goto label39;

     label36:
        $r35 := @caughtexception;

     label37:
        if r44 == null goto label38;

        virtualinvoke r44.<org.apache.pdfbox.pdmodel.PDDocument: void close()>();

     label38:
        throw $r35;

     label39:
        return;

        catch java.awt.HeadlessException from label01 to label02 with label03;
        catch java.lang.Exception from label22 to label33 with label34;
        catch java.lang.Throwable from label22 to label33 with label36;
        catch java.lang.Throwable from label34 to label35 with label36;
        catch java.lang.Throwable from label36 to label37 with label36;
    }

    private static void usage()
    {
        java.io.PrintStream $r1;
        java.lang.StringBuilder $r0, $r2, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13;
        java.lang.String $r3, $r14;

        $r1 = <java.lang.System: java.io.PrintStream err>;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Usage: java -jar pdfbox-app-x.y.z.jar PDFToImage [OPTIONS] <PDF file>\n  -password  <password>          Password to decrypt document\n  -imageType <image type>        (");

        $r3 = staticinvoke <org.apache.pdfbox.PDFToImage: java.lang.String getImageFormats()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")\n");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  -outputPrefix <output prefix>  Filename prefix for image files\n");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  -startPage <number>            The first page to start extraction(1 based)\n");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  -endPage <number>              The last page to extract(inclusive)\n");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  -color <string>                The color depth (valid: bilevel, indexed, gray, rgb, rgba)\n");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  -resolution <number>           The bitmap resolution in dpi\n");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  -cropbox <number> <number> <number> <number> The page area to export\n");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  -nonSeq                        Enables the new non-sequential parser\n");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  <PDF file>                     The PDF document to use\n");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>($r14);

        staticinvoke <java.lang.System: void exit(int)>(1);

        return;
    }

    private static java.lang.String getImageFormats()
    {
        java.lang.String[] $r1;
        java.lang.StringBuffer $r0;
        int $i0, $i1, $i2, i3;
        java.lang.String $r2, $r3;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r1 = staticinvoke <javax.imageio.ImageIO: java.lang.String[] getReaderFormatNames()>();

        i3 = 0;

     label1:
        $i0 = lengthof $r1;

        if i3 >= $i0 goto label3;

        $r3 = $r1[i3];

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $i2 = i3 + 1;

        $i1 = lengthof $r1;

        if $i2 >= $i1 goto label2;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(",");

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        $r2 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r2;
    }

    private static void changeCropBoxes(org.apache.pdfbox.pdmodel.PDDocument, float, float, float, float)
    {
        org.apache.pdfbox.pdmodel.PDDocumentCatalog $r1;
        java.io.PrintStream $r3;
        org.apache.pdfbox.pdmodel.PDDocument r0;
        org.apache.pdfbox.pdmodel.common.PDRectangle $r6;
        java.util.List $r2;
        int $i0, i1;
        float f0, f1, f2, f3;
        java.lang.Object $r4;
        org.apache.pdfbox.pdmodel.PDPage r5;

        r0 := @parameter0: org.apache.pdfbox.pdmodel.PDDocument;

        f0 := @parameter1: float;

        f1 := @parameter2: float;

        f2 := @parameter3: float;

        f3 := @parameter4: float;

        $r1 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.PDDocument: org.apache.pdfbox.pdmodel.PDDocumentCatalog getDocumentCatalog()>();

        $r2 = virtualinvoke $r1.<org.apache.pdfbox.pdmodel.PDDocumentCatalog: java.util.List getAllPages()>();

        i1 = 0;

     label1:
        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        if i1 >= $i0 goto label2;

        $r3 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>("resizing page");

        $r4 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(i1);

        r5 = (org.apache.pdfbox.pdmodel.PDPage) $r4;

        $r6 = new org.apache.pdfbox.pdmodel.common.PDRectangle;

        specialinvoke $r6.<org.apache.pdfbox.pdmodel.common.PDRectangle: void <init>()>();

        virtualinvoke $r6.<org.apache.pdfbox.pdmodel.common.PDRectangle: void setLowerLeftX(float)>(f0);

        virtualinvoke $r6.<org.apache.pdfbox.pdmodel.common.PDRectangle: void setLowerLeftY(float)>(f1);

        virtualinvoke $r6.<org.apache.pdfbox.pdmodel.common.PDRectangle: void setUpperRightX(float)>(f2);

        virtualinvoke $r6.<org.apache.pdfbox.pdmodel.common.PDRectangle: void setUpperRightY(float)>(f3);

        virtualinvoke r5.<org.apache.pdfbox.pdmodel.PDPage: void setMediaBox(org.apache.pdfbox.pdmodel.common.PDRectangle)>($r6);

        virtualinvoke r5.<org.apache.pdfbox.pdmodel.PDPage: void setCropBox(org.apache.pdfbox.pdmodel.common.PDRectangle)>($r6);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public static void <clinit>()
    {
        <org.apache.pdfbox.PDFToImage: java.lang.String NONSEQ> = "-nonSeq";

        <org.apache.pdfbox.PDFToImage: java.lang.String CROPBOX> = "-cropbox";

        <org.apache.pdfbox.PDFToImage: java.lang.String RESOLUTION> = "-resolution";

        <org.apache.pdfbox.PDFToImage: java.lang.String COLOR> = "-color";

        <org.apache.pdfbox.PDFToImage: java.lang.String OUTPUT_PREFIX> = "-outputPrefix";

        <org.apache.pdfbox.PDFToImage: java.lang.String IMAGE_FORMAT> = "-imageType";

        <org.apache.pdfbox.PDFToImage: java.lang.String END_PAGE> = "-endPage";

        <org.apache.pdfbox.PDFToImage: java.lang.String START_PAGE> = "-startPage";

        <org.apache.pdfbox.PDFToImage: java.lang.String PASSWORD> = "-password";

        return;
    }
}
