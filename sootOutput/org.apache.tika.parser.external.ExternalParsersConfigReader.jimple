public final class org.apache.tika.parser.external.ExternalParsersConfigReader extends java.lang.Object implements org.apache.tika.parser.external.ExternalParsersConfigReaderMetKeys
{

    public void <init>()
    {
        org.apache.tika.parser.external.ExternalParsersConfigReader r0;

        r0 := @this: org.apache.tika.parser.external.ExternalParsersConfigReader;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.util.List read(java.io.InputStream) throws org.apache.tika.exception.TikaException, java.io.IOException
    {
        org.xml.sax.InputSource $r2;
        java.util.List $r5;
        org.apache.tika.exception.TikaException $r7, $r9;
        javax.xml.parsers.ParserConfigurationException $r8;
        org.w3c.dom.Document $r4;
        javax.xml.parsers.DocumentBuilder $r1;
        org.xml.sax.SAXException $r6;
        javax.xml.parsers.DocumentBuilderFactory $r0;
        java.io.InputStream r3;

        r3 := @parameter0: java.io.InputStream;

     label1:
        $r0 = staticinvoke <javax.xml.parsers.DocumentBuilderFactory: javax.xml.parsers.DocumentBuilderFactory newInstance()>();

        $r1 = virtualinvoke $r0.<javax.xml.parsers.DocumentBuilderFactory: javax.xml.parsers.DocumentBuilder newDocumentBuilder()>();

        $r2 = new org.xml.sax.InputSource;

        specialinvoke $r2.<org.xml.sax.InputSource: void <init>(java.io.InputStream)>(r3);

        $r4 = virtualinvoke $r1.<javax.xml.parsers.DocumentBuilder: org.w3c.dom.Document parse(org.xml.sax.InputSource)>($r2);

        $r5 = staticinvoke <org.apache.tika.parser.external.ExternalParsersConfigReader: java.util.List read(org.w3c.dom.Document)>($r4);

     label2:
        return $r5;

     label3:
        $r8 := @caughtexception;

        $r9 = new org.apache.tika.exception.TikaException;

        specialinvoke $r9.<org.apache.tika.exception.TikaException: void <init>(java.lang.String,java.lang.Throwable)>("Unable to create an XML parser", $r8);

        throw $r9;

     label4:
        $r6 := @caughtexception;

        $r7 = new org.apache.tika.exception.TikaException;

        specialinvoke $r7.<org.apache.tika.exception.TikaException: void <init>(java.lang.String,java.lang.Throwable)>("Invalid parser configuration", $r6);

        throw $r7;

        catch javax.xml.parsers.ParserConfigurationException from label1 to label2 with label3;
        catch org.xml.sax.SAXException from label1 to label2 with label4;
    }

    public static java.util.List read(org.w3c.dom.Document) throws org.apache.tika.exception.TikaException, java.io.IOException
    {
        java.util.List $r2;
        org.w3c.dom.Element $r1;
        org.w3c.dom.Document r0;

        r0 := @parameter0: org.w3c.dom.Document;

        $r1 = interfaceinvoke r0.<org.w3c.dom.Document: org.w3c.dom.Element getDocumentElement()>();

        $r2 = staticinvoke <org.apache.tika.parser.external.ExternalParsersConfigReader: java.util.List read(org.w3c.dom.Element)>($r1);

        return $r2;
    }

    public static java.util.List read(org.w3c.dom.Element) throws org.apache.tika.exception.TikaException, java.io.IOException
    {
        org.apache.tika.parser.external.ExternalParser $r13;
        java.util.ArrayList $r0;
        short $s1;
        org.w3c.dom.Node $r10;
        int $i0, i2;
        java.lang.String $r5, $r7, $r8, $r12;
        boolean $z0, $z1;
        org.w3c.dom.NodeList $r9;
        org.w3c.dom.Element r1, r11;
        java.lang.StringBuilder $r3, $r4, $r6;
        org.apache.tika.mime.MimeTypeException $r2;

        r1 := @parameter0: org.w3c.dom.Element;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        if r1 == null goto label4;

        $r8 = interfaceinvoke r1.<org.w3c.dom.Element: java.lang.String getTagName()>();

        $z0 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>("external-parsers");

        if $z0 == 0 goto label4;

        $r9 = interfaceinvoke r1.<org.w3c.dom.Element: org.w3c.dom.NodeList getChildNodes()>();

        i2 = 0;

     label1:
        $i0 = interfaceinvoke $r9.<org.w3c.dom.NodeList: int getLength()>();

        if i2 >= $i0 goto label3;

        $r10 = interfaceinvoke $r9.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(i2);

        $s1 = interfaceinvoke $r10.<org.w3c.dom.Node: short getNodeType()>();

        if $s1 != 1 goto label2;

        r11 = (org.w3c.dom.Element) $r10;

        $r12 = interfaceinvoke r11.<org.w3c.dom.Element: java.lang.String getTagName()>();

        $z1 = virtualinvoke $r12.<java.lang.String: boolean equals(java.lang.Object)>("parser");

        if $z1 == 0 goto label2;

        $r13 = staticinvoke <org.apache.tika.parser.external.ExternalParsersConfigReader: org.apache.tika.parser.external.ExternalParser readParser(org.w3c.dom.Element)>(r11);

        if $r13 == null goto label2;

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r13);

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        goto label5;

     label4:
        $r2 = new org.apache.tika.mime.MimeTypeException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not a <external-parsers/> configuration document: ");

        $r5 = interfaceinvoke r1.<org.w3c.dom.Element: java.lang.String getTagName()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<org.apache.tika.mime.MimeTypeException: void <init>(java.lang.String)>($r7);

        throw $r2;

     label5:
        return $r0;
    }

    private static org.apache.tika.parser.external.ExternalParser readParser(org.w3c.dom.Element) throws org.apache.tika.exception.TikaException
    {
        org.apache.tika.parser.external.ExternalParser $r0;
        java.lang.String[] $r11;
        short $s1;
        org.w3c.dom.Node $r3;
        java.util.Map $r9;
        int $i0, i2;
        java.lang.String $r5, $r6, $r7, $r8, $r12;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.w3c.dom.NodeList $r2;
        java.util.Set $r10;
        org.w3c.dom.Element r1, r4;

        r1 := @parameter0: org.w3c.dom.Element;

        $r0 = new org.apache.tika.parser.external.ExternalParser;

        specialinvoke $r0.<org.apache.tika.parser.external.ExternalParser: void <init>()>();

        $r2 = interfaceinvoke r1.<org.w3c.dom.Element: org.w3c.dom.NodeList getChildNodes()>();

        i2 = 0;

     label1:
        $i0 = interfaceinvoke $r2.<org.w3c.dom.NodeList: int getLength()>();

        if i2 >= $i0 goto label7;

        $r3 = interfaceinvoke $r2.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(i2);

        $s1 = interfaceinvoke $r3.<org.w3c.dom.Node: short getNodeType()>();

        if $s1 != 1 goto label6;

        r4 = (org.w3c.dom.Element) $r3;

        $r5 = interfaceinvoke r4.<org.w3c.dom.Element: java.lang.String getTagName()>();

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>("check");

        if $z0 == 0 goto label3;

        $z4 = staticinvoke <org.apache.tika.parser.external.ExternalParsersConfigReader: boolean readCheckTagAndCheck(org.w3c.dom.Element)>(r4);

        if $z4 != 0 goto label2;

        return null;

     label2:
        goto label6;

     label3:
        $r6 = interfaceinvoke r4.<org.w3c.dom.Element: java.lang.String getTagName()>();

        $z1 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>("command");

        if $z1 == 0 goto label4;

        $r11 = newarray (java.lang.String)[1];

        $r12 = staticinvoke <org.apache.tika.parser.external.ExternalParsersConfigReader: java.lang.String getString(org.w3c.dom.Element)>(r4);

        $r11[0] = $r12;

        virtualinvoke $r0.<org.apache.tika.parser.external.ExternalParser: void setCommand(java.lang.String[])>($r11);

        goto label6;

     label4:
        $r7 = interfaceinvoke r4.<org.w3c.dom.Element: java.lang.String getTagName()>();

        $z2 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>("mime-types");

        if $z2 == 0 goto label5;

        $r10 = staticinvoke <org.apache.tika.parser.external.ExternalParsersConfigReader: java.util.Set readMimeTypes(org.w3c.dom.Element)>(r4);

        virtualinvoke $r0.<org.apache.tika.parser.external.ExternalParser: void setSupportedTypes(java.util.Set)>($r10);

        goto label6;

     label5:
        $r8 = interfaceinvoke r4.<org.w3c.dom.Element: java.lang.String getTagName()>();

        $z3 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>("metadata");

        if $z3 == 0 goto label6;

        $r9 = staticinvoke <org.apache.tika.parser.external.ExternalParsersConfigReader: java.util.Map readMetadataPatterns(org.w3c.dom.Element)>(r4);

        virtualinvoke $r0.<org.apache.tika.parser.external.ExternalParser: void setMetadataExtractionPatterns(java.util.Map)>($r9);

     label6:
        i2 = i2 + 1;

        goto label1;

     label7:
        return $r0;
    }

    private static java.util.Set readMimeTypes(org.w3c.dom.Element)
    {
        org.w3c.dom.NodeList $r2;
        org.apache.tika.mime.MediaType $r7;
        java.util.HashSet $r0;
        short $s1;
        org.w3c.dom.Element r1, r4;
        org.w3c.dom.Node $r3;
        int $i0, i2;
        java.lang.String $r5, $r6;
        boolean $z0;

        r1 := @parameter0: org.w3c.dom.Element;

        $r0 = new java.util.HashSet;

        specialinvoke $r0.<java.util.HashSet: void <init>()>();

        $r2 = interfaceinvoke r1.<org.w3c.dom.Element: org.w3c.dom.NodeList getChildNodes()>();

        i2 = 0;

     label1:
        $i0 = interfaceinvoke $r2.<org.w3c.dom.NodeList: int getLength()>();

        if i2 >= $i0 goto label3;

        $r3 = interfaceinvoke $r2.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(i2);

        $s1 = interfaceinvoke $r3.<org.w3c.dom.Node: short getNodeType()>();

        if $s1 != 1 goto label2;

        r4 = (org.w3c.dom.Element) $r3;

        $r5 = interfaceinvoke r4.<org.w3c.dom.Element: java.lang.String getTagName()>();

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>("mime-type");

        if $z0 == 0 goto label2;

        $r6 = staticinvoke <org.apache.tika.parser.external.ExternalParsersConfigReader: java.lang.String getString(org.w3c.dom.Element)>(r4);

        $r7 = staticinvoke <org.apache.tika.mime.MediaType: org.apache.tika.mime.MediaType parse(java.lang.String)>($r6);

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>($r7);

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        return $r0;
    }

    private static java.util.Map readMetadataPatterns(org.w3c.dom.Element)
    {
        org.w3c.dom.NodeList $r2;
        java.util.HashMap $r0;
        short $s1;
        org.w3c.dom.Element r1, r4;
        org.w3c.dom.Node $r3;
        int $i0, i2;
        java.lang.String $r5, $r6, $r7;
        java.util.regex.Pattern $r8;
        boolean $z0;

        r1 := @parameter0: org.w3c.dom.Element;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        $r2 = interfaceinvoke r1.<org.w3c.dom.Element: org.w3c.dom.NodeList getChildNodes()>();

        i2 = 0;

     label1:
        $i0 = interfaceinvoke $r2.<org.w3c.dom.NodeList: int getLength()>();

        if i2 >= $i0 goto label3;

        $r3 = interfaceinvoke $r2.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(i2);

        $s1 = interfaceinvoke $r3.<org.w3c.dom.Node: short getNodeType()>();

        if $s1 != 1 goto label2;

        r4 = (org.w3c.dom.Element) $r3;

        $r5 = interfaceinvoke r4.<org.w3c.dom.Element: java.lang.String getTagName()>();

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>("match");

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke r4.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("key");

        $r7 = staticinvoke <org.apache.tika.parser.external.ExternalParsersConfigReader: java.lang.String getString(org.w3c.dom.Element)>(r4);

        $r8 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>($r7);

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r8, $r6);

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        return $r0;
    }

    private static boolean readCheckTagAndCheck(org.w3c.dom.Element)
    {
        java.lang.Integer $r4, $r12;
        java.util.ArrayList $r0;
        short $s4;
        int[] r15;
        java.util.StringTokenizer $r10;
        org.w3c.dom.Node $r5;
        int $i0, $i1, $i2, $i3, $i5, i6, i7;
        java.lang.String $r7, $r8, $r9, $r11, r14;
        boolean $z0, $z1, $z2, $z3;
        org.w3c.dom.NodeList $r2;
        java.lang.NumberFormatException $r13;
        org.w3c.dom.Element r1, r6;
        java.lang.Object $r3;

        r1 := @parameter0: org.w3c.dom.Element;

        r14 = null;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r2 = interfaceinvoke r1.<org.w3c.dom.Element: org.w3c.dom.NodeList getChildNodes()>();

        i6 = 0;

     label01:
        $i0 = interfaceinvoke $r2.<org.w3c.dom.NodeList: int getLength()>();

        if i6 >= $i0 goto label08;

        $r5 = interfaceinvoke $r2.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(i6);

        $s4 = interfaceinvoke $r5.<org.w3c.dom.Node: short getNodeType()>();

        if $s4 != 1 goto label07;

        r6 = (org.w3c.dom.Element) $r5;

        $r7 = interfaceinvoke r6.<org.w3c.dom.Element: java.lang.String getTagName()>();

        $z1 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>("command");

        if $z1 == 0 goto label02;

        r14 = staticinvoke <org.apache.tika.parser.external.ExternalParsersConfigReader: java.lang.String getString(org.w3c.dom.Element)>(r6);

     label02:
        $r8 = interfaceinvoke r6.<org.w3c.dom.Element: java.lang.String getTagName()>();

        $z2 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>("error-codes");

        if $z2 == 0 goto label07;

        $r9 = staticinvoke <org.apache.tika.parser.external.ExternalParsersConfigReader: java.lang.String getString(org.w3c.dom.Element)>(r6);

        $r10 = new java.util.StringTokenizer;

        specialinvoke $r10.<java.util.StringTokenizer: void <init>(java.lang.String)>($r9);

     label03:
        $z3 = virtualinvoke $r10.<java.util.StringTokenizer: boolean hasMoreElements()>();

        if $z3 == 0 goto label07;

     label04:
        $r11 = virtualinvoke $r10.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $i5 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r11);

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i5);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r12);

     label05:
        goto label03;

     label06:
        $r13 := @caughtexception;

        goto label03;

     label07:
        i6 = i6 + 1;

        goto label01;

     label08:
        if r14 == null goto label11;

        $i1 = interfaceinvoke $r0.<java.util.List: int size()>();

        r15 = newarray (int)[$i1];

        i7 = 0;

     label09:
        $i2 = lengthof r15;

        if i7 >= $i2 goto label10;

        $r3 = interfaceinvoke $r0.<java.util.List: java.lang.Object get(int)>(i7);

        $r4 = (java.lang.Integer) $r3;

        $i3 = virtualinvoke $r4.<java.lang.Integer: int intValue()>();

        r15[i7] = $i3;

        i7 = i7 + 1;

        goto label09;

     label10:
        $z0 = staticinvoke <org.apache.tika.parser.external.ExternalParser: boolean check(java.lang.String,int[])>(r14, r15);

        return $z0;

     label11:
        return 1;

        catch java.lang.NumberFormatException from label04 to label05 with label06;
    }

    private static java.lang.String getString(org.w3c.dom.Element)
    {
        org.w3c.dom.NodeList $r2;
        short $s1;
        org.w3c.dom.Element r1;
        java.lang.StringBuffer $r6;
        org.w3c.dom.Node $r4;
        int $i0, i2, $i3;
        java.lang.String $r3, $r5;

        r1 := @parameter0: org.w3c.dom.Element;

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r2 = interfaceinvoke r1.<org.w3c.dom.Element: org.w3c.dom.NodeList getChildNodes()>();

        i2 = 0;

     label1:
        $i0 = interfaceinvoke $r2.<org.w3c.dom.NodeList: int getLength()>();

        if i2 >= $i0 goto label3;

        $r4 = interfaceinvoke $r2.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(i2);

        $s1 = interfaceinvoke $r4.<org.w3c.dom.Node: short getNodeType()>();

        $i3 = (int) $s1;

        if $i3 != 3 goto label2;

        $r5 = interfaceinvoke $r4.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

        virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        $r3 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r3;
    }
}
