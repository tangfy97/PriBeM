public abstract class org.apache.velocity.runtime.parser.node.AbstractExecutor extends java.lang.Object
{
    protected org.apache.velocity.runtime.log.Log log;
    private java.lang.reflect.Method method;

    public void <init>()
    {
        org.apache.velocity.runtime.parser.node.AbstractExecutor r0;

        r0 := @this: org.apache.velocity.runtime.parser.node.AbstractExecutor;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.velocity.runtime.parser.node.AbstractExecutor: org.apache.velocity.runtime.log.Log log> = null;

        r0.<org.apache.velocity.runtime.parser.node.AbstractExecutor: java.lang.reflect.Method method> = null;

        return;
    }

    public abstract java.lang.Object execute(java.lang.Object) throws java.lang.IllegalAccessException, java.lang.reflect.InvocationTargetException;

    public boolean isAlive()
    {
        org.apache.velocity.runtime.parser.node.AbstractExecutor r0;
        java.lang.reflect.Method $r1;
        boolean $z0;

        r0 := @this: org.apache.velocity.runtime.parser.node.AbstractExecutor;

        $r1 = r0.<org.apache.velocity.runtime.parser.node.AbstractExecutor: java.lang.reflect.Method method>;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public java.lang.reflect.Method getMethod()
    {
        org.apache.velocity.runtime.parser.node.AbstractExecutor r0;
        java.lang.reflect.Method $r1;

        r0 := @this: org.apache.velocity.runtime.parser.node.AbstractExecutor;

        $r1 = r0.<org.apache.velocity.runtime.parser.node.AbstractExecutor: java.lang.reflect.Method method>;

        return $r1;
    }

    protected void setMethod(java.lang.reflect.Method)
    {
        org.apache.velocity.runtime.parser.node.AbstractExecutor r0;
        java.lang.reflect.Method r1;

        r0 := @this: org.apache.velocity.runtime.parser.node.AbstractExecutor;

        r1 := @parameter0: java.lang.reflect.Method;

        r0.<org.apache.velocity.runtime.parser.node.AbstractExecutor: java.lang.reflect.Method method> = r1;

        return;
    }
}
