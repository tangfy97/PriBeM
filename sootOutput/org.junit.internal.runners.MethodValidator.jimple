public class org.junit.internal.runners.MethodValidator extends java.lang.Object
{
    private final java.util.List fErrors;
    private org.junit.internal.runners.TestClass fTestClass;

    public void <init>(org.junit.internal.runners.TestClass)
    {
        org.junit.internal.runners.TestClass r2;
        org.junit.internal.runners.MethodValidator r0;
        java.util.ArrayList $r1;

        r0 := @this: org.junit.internal.runners.MethodValidator;

        r2 := @parameter0: org.junit.internal.runners.TestClass;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<org.junit.internal.runners.MethodValidator: java.util.List fErrors> = $r1;

        r0.<org.junit.internal.runners.MethodValidator: org.junit.internal.runners.TestClass fTestClass> = r2;

        return;
    }

    public void validateInstanceMethods()
    {
        java.util.List $r2, $r4;
        org.junit.internal.runners.MethodValidator r0;
        int $i0;
        org.junit.internal.runners.TestClass $r1;
        java.lang.Exception $r3;

        r0 := @this: org.junit.internal.runners.MethodValidator;

        specialinvoke r0.<org.junit.internal.runners.MethodValidator: void validateTestMethods(java.lang.Class,boolean)>(class "Lorg/junit/After;", 0);

        specialinvoke r0.<org.junit.internal.runners.MethodValidator: void validateTestMethods(java.lang.Class,boolean)>(class "Lorg/junit/Before;", 0);

        specialinvoke r0.<org.junit.internal.runners.MethodValidator: void validateTestMethods(java.lang.Class,boolean)>(class "Lorg/junit/Test;", 0);

        $r1 = r0.<org.junit.internal.runners.MethodValidator: org.junit.internal.runners.TestClass fTestClass>;

        $r2 = virtualinvoke $r1.<org.junit.internal.runners.TestClass: java.util.List getAnnotatedMethods(java.lang.Class)>(class "Lorg/junit/Test;");

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        if $i0 != 0 goto label1;

        $r4 = r0.<org.junit.internal.runners.MethodValidator: java.util.List fErrors>;

        $r3 = new java.lang.Exception;

        specialinvoke $r3.<java.lang.Exception: void <init>(java.lang.String)>("No runnable methods");

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r3);

     label1:
        return;
    }

    public void validateStaticMethods()
    {
        org.junit.internal.runners.MethodValidator r0;

        r0 := @this: org.junit.internal.runners.MethodValidator;

        specialinvoke r0.<org.junit.internal.runners.MethodValidator: void validateTestMethods(java.lang.Class,boolean)>(class "Lorg/junit/BeforeClass;", 1);

        specialinvoke r0.<org.junit.internal.runners.MethodValidator: void validateTestMethods(java.lang.Class,boolean)>(class "Lorg/junit/AfterClass;", 1);

        return;
    }

    public java.util.List validateMethodsForDefaultRunner()
    {
        java.util.List $r1;
        org.junit.internal.runners.MethodValidator r0;

        r0 := @this: org.junit.internal.runners.MethodValidator;

        virtualinvoke r0.<org.junit.internal.runners.MethodValidator: void validateNoArgConstructor()>();

        virtualinvoke r0.<org.junit.internal.runners.MethodValidator: void validateStaticMethods()>();

        virtualinvoke r0.<org.junit.internal.runners.MethodValidator: void validateInstanceMethods()>();

        $r1 = r0.<org.junit.internal.runners.MethodValidator: java.util.List fErrors>;

        return $r1;
    }

    public void assertValid() throws org.junit.internal.runners.InitializationError
    {
        java.util.List $r1, $r3;
        org.junit.internal.runners.MethodValidator r0;
        boolean $z0;
        org.junit.internal.runners.InitializationError $r2;

        r0 := @this: org.junit.internal.runners.MethodValidator;

        $r1 = r0.<org.junit.internal.runners.MethodValidator: java.util.List fErrors>;

        $z0 = interfaceinvoke $r1.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $r2 = new org.junit.internal.runners.InitializationError;

        $r3 = r0.<org.junit.internal.runners.MethodValidator: java.util.List fErrors>;

        specialinvoke $r2.<org.junit.internal.runners.InitializationError: void <init>(java.util.List)>($r3);

        throw $r2;

     label1:
        return;
    }

    public void validateNoArgConstructor()
    {
        java.util.List $r4;
        org.junit.internal.runners.MethodValidator r0;
        org.junit.internal.runners.TestClass $r1;
        java.lang.Exception $r2, $r3;

        r0 := @this: org.junit.internal.runners.MethodValidator;

     label1:
        $r1 = r0.<org.junit.internal.runners.MethodValidator: org.junit.internal.runners.TestClass fTestClass>;

        virtualinvoke $r1.<org.junit.internal.runners.TestClass: java.lang.reflect.Constructor getConstructor()>();

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        $r4 = r0.<org.junit.internal.runners.MethodValidator: java.util.List fErrors>;

        $r3 = new java.lang.Exception;

        specialinvoke $r3.<java.lang.Exception: void <init>(java.lang.String,java.lang.Throwable)>("Test class should have public zero-argument constructor", $r2);

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r3);

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    private void validateTestMethods(java.lang.Class, boolean)
    {
        java.lang.Exception $r10, $r18, $r26, $r34, $r43;
        java.lang.StringBuilder $r11, $r13, $r15, $r16, $r19, $r21, $r23, $r24, $r27, $r29, $r31, $r32, $r35, $r37, $r40, $r41, $r44, $r46, $r48, $r49, $r50, $r51;
        java.lang.String $r14, $r17, $r22, $r25, $r30, $r33, $r39, $r42, $r47, $r52, $r53;
        java.lang.Class[] $r9;
        java.lang.reflect.Method r6;
        boolean $z0, $z1, z2, $z3, $z4;
        java.util.List $r3, $r12, $r20, $r28, $r36, $r45;
        org.junit.internal.runners.TestClass $r2;
        org.junit.internal.runners.MethodValidator r0;
        int $i0, $i1, $i2, $i3;
        java.util.Iterator $r4;
        java.lang.Class r1, $r7, $r8, $r38, $r54;
        java.lang.Object $r5;

        r0 := @this: org.junit.internal.runners.MethodValidator;

        r1 := @parameter0: java.lang.Class;

        z2 := @parameter1: boolean;

        $r2 = r0.<org.junit.internal.runners.MethodValidator: org.junit.internal.runners.TestClass fTestClass>;

        $r3 = virtualinvoke $r2.<org.junit.internal.runners.TestClass: java.util.List getAnnotatedMethods(java.lang.Class)>(r1);

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label9;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.lang.reflect.Method) $r5;

        $i0 = virtualinvoke r6.<java.lang.reflect.Method: int getModifiers()>();

        $z1 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>($i0);

        if $z1 == z2 goto label4;

        if z2 == 0 goto label2;

        $r53 = "should";

        goto label3;

     label2:
        $r53 = "should not";

     label3:
        $r45 = r0.<org.junit.internal.runners.MethodValidator: java.util.List fErrors>;

        $r43 = new java.lang.Exception;

        $r44 = new java.lang.StringBuilder;

        specialinvoke $r44.<java.lang.StringBuilder: void <init>()>();

        $r46 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Method ");

        $r47 = virtualinvoke r6.<java.lang.reflect.Method: java.lang.String getName()>();

        $r48 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r47);

        $r49 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("() ");

        $r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r53);

        $r51 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" be static");

        $r52 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r43.<java.lang.Exception: void <init>(java.lang.String)>($r52);

        interfaceinvoke $r45.<java.util.List: boolean add(java.lang.Object)>($r43);

     label4:
        $r54 = virtualinvoke r6.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>();

        $i3 = virtualinvoke $r54.<java.lang.Class: int getModifiers()>();

        $z4 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>($i3);

        if $z4 != 0 goto label5;

        $r36 = r0.<org.junit.internal.runners.MethodValidator: java.util.List fErrors>;

        $r34 = new java.lang.Exception;

        $r35 = new java.lang.StringBuilder;

        specialinvoke $r35.<java.lang.StringBuilder: void <init>()>();

        $r37 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Class ");

        $r38 = virtualinvoke r6.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>();

        $r39 = virtualinvoke $r38.<java.lang.Class: java.lang.String getName()>();

        $r40 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r39);

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" should be public");

        $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r34.<java.lang.Exception: void <init>(java.lang.String)>($r42);

        interfaceinvoke $r36.<java.util.List: boolean add(java.lang.Object)>($r34);

     label5:
        $i1 = virtualinvoke r6.<java.lang.reflect.Method: int getModifiers()>();

        $z3 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>($i1);

        if $z3 != 0 goto label6;

        $r28 = r0.<org.junit.internal.runners.MethodValidator: java.util.List fErrors>;

        $r26 = new java.lang.Exception;

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>()>();

        $r29 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Method ");

        $r30 = virtualinvoke r6.<java.lang.reflect.Method: java.lang.String getName()>();

        $r31 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r30);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" should be public");

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r26.<java.lang.Exception: void <init>(java.lang.String)>($r33);

        interfaceinvoke $r28.<java.util.List: boolean add(java.lang.Object)>($r26);

     label6:
        $r7 = virtualinvoke r6.<java.lang.reflect.Method: java.lang.Class getReturnType()>();

        $r8 = <java.lang.Void: java.lang.Class TYPE>;

        if $r7 == $r8 goto label7;

        $r20 = r0.<org.junit.internal.runners.MethodValidator: java.util.List fErrors>;

        $r18 = new java.lang.Exception;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Method ");

        $r22 = virtualinvoke r6.<java.lang.reflect.Method: java.lang.String getName()>();

        $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" should be void");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r18.<java.lang.Exception: void <init>(java.lang.String)>($r25);

        interfaceinvoke $r20.<java.util.List: boolean add(java.lang.Object)>($r18);

     label7:
        $r9 = virtualinvoke r6.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $i2 = lengthof $r9;

        if $i2 == 0 goto label8;

        $r12 = r0.<org.junit.internal.runners.MethodValidator: java.util.List fErrors>;

        $r10 = new java.lang.Exception;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Method ");

        $r14 = virtualinvoke r6.<java.lang.reflect.Method: java.lang.String getName()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" should have no parameters");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.Exception: void <init>(java.lang.String)>($r17);

        interfaceinvoke $r12.<java.util.List: boolean add(java.lang.Object)>($r10);

     label8:
        goto label1;

     label9:
        return;
    }
}
