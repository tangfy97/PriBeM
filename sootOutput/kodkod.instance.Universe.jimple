public final class kodkod.instance.Universe extends java.lang.Object implements java.lang.Iterable
{
    private final java.lang.Object[] atoms;
    private final java.util.Map indices;
    private final kodkod.instance.TupleFactory factory;

    public void <init>(java.util.Collection)
    {
        java.lang.Object[] $r2, $r9;
        java.util.HashMap $r3;
        java.lang.Integer $r8;
        java.util.Map $r6, $r7;
        int $i0, i1;
        kodkod.instance.Universe r0;
        java.lang.String $r14;
        kodkod.instance.TupleFactory $r15;
        boolean $z0, $z1, $z2;
        java.util.Iterator $r4;
        java.util.Collection r1;
        java.lang.IllegalArgumentException $r10, $r16;
        java.lang.Object $r5;
        java.lang.StringBuilder $r11, $r12, $r13;

        r0 := @this: kodkod.instance.Universe;

        r1 := @parameter0: java.util.Collection;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $z0 = interfaceinvoke r1.<java.util.Collection: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r16 = new java.lang.IllegalArgumentException;

        specialinvoke $r16.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Cannot create an empty universe.");

        throw $r16;

     label1:
        $i0 = interfaceinvoke r1.<java.util.Collection: int size()>();

        $r2 = newarray (java.lang.Object)[$i0];

        r0.<kodkod.instance.Universe: java.lang.Object[] atoms> = $r2;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        r0.<kodkod.instance.Universe: java.util.Map indices> = $r3;

        i1 = 0;

        $r4 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

        goto label4;

     label2:
        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r6 = r0.<kodkod.instance.Universe: java.util.Map indices>;

        $z2 = interfaceinvoke $r6.<java.util.Map: boolean containsKey(java.lang.Object)>($r5);

        if $z2 == 0 goto label3;

        $r10 = new java.lang.IllegalArgumentException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" appears multiple times.");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r14);

        throw $r10;

     label3:
        $r7 = r0.<kodkod.instance.Universe: java.util.Map indices>;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, $r8);

        $r9 = r0.<kodkod.instance.Universe: java.lang.Object[] atoms>;

        $r9[i1] = $r5;

        i1 = i1 + 1;

     label4:
        $z1 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label2;

        $r15 = new kodkod.instance.TupleFactory;

        specialinvoke $r15.<kodkod.instance.TupleFactory: void <init>(kodkod.instance.Universe)>(r0);

        r0.<kodkod.instance.Universe: kodkod.instance.TupleFactory factory> = $r15;

        return;
    }

    public transient void <init>(java.lang.Object[])
    {
        java.lang.Object[] r1, $r2, $r3;
        java.util.HashMap $r4;
        java.lang.Integer $r9;
        java.util.Map $r6, $r7;
        int $i0, $i1, $i2, i3;
        kodkod.instance.Universe r0;
        java.lang.String $r15;
        kodkod.instance.TupleFactory $r16;
        boolean $z0;
        java.lang.IllegalArgumentException $r10, $r17;
        java.lang.Object $r5, $r8, $r12;
        java.lang.StringBuilder $r11, $r13, $r14;

        r0 := @this: kodkod.instance.Universe;

        r1 := @parameter0: java.lang.Object[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i0 = lengthof r1;

        if $i0 != 0 goto label1;

        $r17 = new java.lang.IllegalArgumentException;

        specialinvoke $r17.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Cannot create an empty universe.");

        throw $r17;

     label1:
        $i1 = lengthof r1;

        $r2 = newarray (java.lang.Object)[$i1];

        $r3 = staticinvoke <kodkod.util.collections.Containers: java.lang.Object[] copy(java.lang.Object[],java.lang.Object[])>(r1, $r2);

        r0.<kodkod.instance.Universe: java.lang.Object[] atoms> = $r3;

        $r4 = new java.util.HashMap;

        specialinvoke $r4.<java.util.HashMap: void <init>()>();

        r0.<kodkod.instance.Universe: java.util.Map indices> = $r4;

        i3 = 0;

        goto label4;

     label2:
        $r6 = r0.<kodkod.instance.Universe: java.util.Map indices>;

        $r5 = r1[i3];

        $z0 = interfaceinvoke $r6.<java.util.Map: boolean containsKey(java.lang.Object)>($r5);

        if $z0 == 0 goto label3;

        $r10 = new java.lang.IllegalArgumentException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = r1[i3];

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" appears multiple times.");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r15);

        throw $r10;

     label3:
        $r7 = r0.<kodkod.instance.Universe: java.util.Map indices>;

        $r8 = r1[i3];

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i3);

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r8, $r9);

        i3 = i3 + 1;

     label4:
        $i2 = lengthof r1;

        if i3 < $i2 goto label2;

        $r16 = new kodkod.instance.TupleFactory;

        specialinvoke $r16.<kodkod.instance.TupleFactory: void <init>(kodkod.instance.Universe)>(r0);

        r0.<kodkod.instance.Universe: kodkod.instance.TupleFactory factory> = $r16;

        return;
    }

    public kodkod.instance.TupleFactory factory()
    {
        kodkod.instance.Universe r0;
        kodkod.instance.TupleFactory $r1;

        r0 := @this: kodkod.instance.Universe;

        $r1 = r0.<kodkod.instance.Universe: kodkod.instance.TupleFactory factory>;

        return $r1;
    }

    public int size()
    {
        int $i0;
        kodkod.instance.Universe r0;
        java.lang.Object[] $r1;

        r0 := @this: kodkod.instance.Universe;

        $r1 = r0.<kodkod.instance.Universe: java.lang.Object[] atoms>;

        $i0 = lengthof $r1;

        return $i0;
    }

    public boolean contains(java.lang.Object)
    {
        java.util.Map $r2;
        java.lang.Object r1;
        kodkod.instance.Universe r0;
        boolean $z0;

        r0 := @this: kodkod.instance.Universe;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<kodkod.instance.Universe: java.util.Map indices>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        return $z0;
    }

    public java.lang.Object atom(int)
    {
        java.lang.IndexOutOfBoundsException $r0;
        java.lang.Object[] $r2, $r3;
        int i0, $i1;
        java.lang.Object $r4;
        kodkod.instance.Universe r1;

        r1 := @this: kodkod.instance.Universe;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        $r2 = r1.<kodkod.instance.Universe: java.lang.Object[] atoms>;

        $i1 = lengthof $r2;

        if i0 < $i1 goto label2;

     label1:
        $r0 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r0.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r0;

     label2:
        $r3 = r1.<kodkod.instance.Universe: java.lang.Object[] atoms>;

        $r4 = $r3[i0];

        return $r4;
    }

    public int index(java.lang.Object)
    {
        java.lang.IllegalArgumentException $r3;
        java.lang.Integer $r9;
        java.util.Map $r2, $r7;
        int $i0;
        java.lang.Object r1, $r8;
        java.lang.StringBuilder $r4, $r5;
        kodkod.instance.Universe r0;
        java.lang.String $r6;
        boolean $z0;

        r0 := @this: kodkod.instance.Universe;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<kodkod.instance.Universe: java.util.Map indices>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r7 = r0.<kodkod.instance.Universe: java.util.Map indices>;

        $r8 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r9 = (java.lang.Integer) $r8;

        $i0 = virtualinvoke $r9.<java.lang.Integer: int intValue()>();

        return $i0;

     label1:
        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>("no this.atoms.");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r3;
    }

    public java.util.Iterator iterator()
    {
        kodkod.instance.Universe r0;
        java.lang.Object[] $r1;
        java.util.Iterator $r2;

        r0 := @this: kodkod.instance.Universe;

        $r1 = r0.<kodkod.instance.Universe: java.lang.Object[] atoms>;

        $r2 = staticinvoke <kodkod.util.collections.Containers: java.util.Iterator iterate(java.lang.Object[])>($r1);

        return $r2;
    }

    public java.lang.String toString()
    {
        kodkod.instance.Universe r0;
        java.lang.Object[] $r1;
        java.lang.String $r2;

        r0 := @this: kodkod.instance.Universe;

        $r1 = r0.<kodkod.instance.Universe: java.lang.Object[] atoms>;

        $r2 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>($r1);

        return $r2;
    }
}
