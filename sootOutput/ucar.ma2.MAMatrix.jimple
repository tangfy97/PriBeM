public class ucar.ma2.MAMatrix extends java.lang.Object
{
    private ucar.ma2.Array a;
    private int nrows;
    private int ncols;
    private ucar.ma2.Index ima;

    public void <init>(int, int)
    {
        ucar.ma2.ArrayDouble$D2 $r1;
        ucar.ma2.Index $r3;
        int i0, i1;
        ucar.ma2.MAMatrix r0;
        ucar.ma2.Array $r2;

        r0 := @this: ucar.ma2.MAMatrix;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new ucar.ma2.ArrayDouble$D2;

        specialinvoke $r1.<ucar.ma2.ArrayDouble$D2: void <init>(int,int)>(i0, i1);

        r0.<ucar.ma2.MAMatrix: ucar.ma2.Array a> = $r1;

        r0.<ucar.ma2.MAMatrix: int nrows> = i0;

        r0.<ucar.ma2.MAMatrix: int ncols> = i1;

        $r2 = r0.<ucar.ma2.MAMatrix: ucar.ma2.Array a>;

        $r3 = virtualinvoke $r2.<ucar.ma2.Array: ucar.ma2.Index getIndex()>();

        r0.<ucar.ma2.MAMatrix: ucar.ma2.Index ima> = $r3;

        return;
    }

    public void <init>(ucar.ma2.Array)
    {
        java.lang.IllegalArgumentException $r5;
        ucar.ma2.Array r1;
        int[] $r2, $r3;
        ucar.ma2.Index $r4;
        int $i0, $i1, $i2, $i3;
        ucar.ma2.MAMatrix r0;
        java.lang.StringBuilder $r6, $r7, $r8;
        java.lang.String $r9;

        r0 := @this: ucar.ma2.MAMatrix;

        r1 := @parameter0: ucar.ma2.Array;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<ucar.ma2.MAMatrix: ucar.ma2.Array a> = r1;

        $i0 = virtualinvoke r1.<ucar.ma2.Array: int getRank()>();

        if $i0 == 2 goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("rank != 2, instead = ");

        $i3 = virtualinvoke r1.<ucar.ma2.Array: int getRank()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r5;

     label1:
        $r2 = virtualinvoke r1.<ucar.ma2.Array: int[] getShape()>();

        $i1 = $r2[0];

        r0.<ucar.ma2.MAMatrix: int nrows> = $i1;

        $r3 = virtualinvoke r1.<ucar.ma2.Array: int[] getShape()>();

        $i2 = $r3[1];

        r0.<ucar.ma2.MAMatrix: int ncols> = $i2;

        $r4 = virtualinvoke r1.<ucar.ma2.Array: ucar.ma2.Index getIndex()>();

        r0.<ucar.ma2.MAMatrix: ucar.ma2.Index ima> = $r4;

        return;
    }

    public int getNrows()
    {
        int $i0;
        ucar.ma2.MAMatrix r0;

        r0 := @this: ucar.ma2.MAMatrix;

        $i0 = r0.<ucar.ma2.MAMatrix: int nrows>;

        return $i0;
    }

    public int getNcols()
    {
        int $i0;
        ucar.ma2.MAMatrix r0;

        r0 := @this: ucar.ma2.MAMatrix;

        $i0 = r0.<ucar.ma2.MAMatrix: int ncols>;

        return $i0;
    }

    public double getDouble(int, int)
    {
        ucar.ma2.Index $r1, $r3;
        int i0, i1;
        ucar.ma2.MAMatrix r0;
        ucar.ma2.Array $r2;
        double $d0;

        r0 := @this: ucar.ma2.MAMatrix;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r2 = r0.<ucar.ma2.MAMatrix: ucar.ma2.Array a>;

        $r1 = r0.<ucar.ma2.MAMatrix: ucar.ma2.Index ima>;

        $r3 = virtualinvoke $r1.<ucar.ma2.Index: ucar.ma2.Index set(int,int)>(i0, i1);

        $d0 = virtualinvoke $r2.<ucar.ma2.Array: double getDouble(ucar.ma2.Index)>($r3);

        return $d0;
    }

    public void setDouble(int, int, double)
    {
        ucar.ma2.Index $r1, $r3;
        int i0, i1;
        ucar.ma2.MAMatrix r0;
        ucar.ma2.Array $r2;
        double d0;

        r0 := @this: ucar.ma2.MAMatrix;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        d0 := @parameter2: double;

        $r2 = r0.<ucar.ma2.MAMatrix: ucar.ma2.Array a>;

        $r1 = r0.<ucar.ma2.MAMatrix: ucar.ma2.Index ima>;

        $r3 = virtualinvoke $r1.<ucar.ma2.Index: ucar.ma2.Index set(int,int)>(i0, i1);

        virtualinvoke $r2.<ucar.ma2.Array: void setDouble(ucar.ma2.Index,double)>($r3, d0);

        return;
    }

    public ucar.ma2.MAMatrix copy()
    {
        ucar.ma2.MAMatrix $r0, r1;
        ucar.ma2.Array $r2, $r3;

        r1 := @this: ucar.ma2.MAMatrix;

        $r0 = new ucar.ma2.MAMatrix;

        $r2 = r1.<ucar.ma2.MAMatrix: ucar.ma2.Array a>;

        $r3 = virtualinvoke $r2.<ucar.ma2.Array: ucar.ma2.Array copy()>();

        specialinvoke $r0.<ucar.ma2.MAMatrix: void <init>(ucar.ma2.Array)>($r3);

        return $r0;
    }

    public ucar.ma2.MAMatrix transpose()
    {
        ucar.ma2.MAMatrix $r0, r1;
        ucar.ma2.Array $r2, $r3;

        r1 := @this: ucar.ma2.MAMatrix;

        $r0 = new ucar.ma2.MAMatrix;

        $r2 = r1.<ucar.ma2.MAMatrix: ucar.ma2.Array a>;

        $r3 = virtualinvoke $r2.<ucar.ma2.Array: ucar.ma2.Array transpose(int,int)>(0, 1);

        specialinvoke $r0.<ucar.ma2.MAMatrix: void <init>(ucar.ma2.Array)>($r3);

        return $r0;
    }

    public ucar.ma2.MAVector column(int)
    {
        int i0;
        ucar.ma2.MAMatrix r1;
        ucar.ma2.MAVector $r0;
        ucar.ma2.Array $r2, $r3;

        r1 := @this: ucar.ma2.MAMatrix;

        i0 := @parameter0: int;

        $r0 = new ucar.ma2.MAVector;

        $r2 = r1.<ucar.ma2.MAMatrix: ucar.ma2.Array a>;

        $r3 = virtualinvoke $r2.<ucar.ma2.Array: ucar.ma2.Array slice(int,int)>(1, i0);

        specialinvoke $r0.<ucar.ma2.MAVector: void <init>(ucar.ma2.Array)>($r3);

        return $r0;
    }

    public ucar.ma2.MAVector row(int)
    {
        int i0;
        ucar.ma2.MAMatrix r1;
        ucar.ma2.MAVector $r0;
        ucar.ma2.Array $r2, $r3;

        r1 := @this: ucar.ma2.MAMatrix;

        i0 := @parameter0: int;

        $r0 = new ucar.ma2.MAVector;

        $r2 = r1.<ucar.ma2.MAMatrix: ucar.ma2.Array a>;

        $r3 = virtualinvoke $r2.<ucar.ma2.Array: ucar.ma2.Array slice(int,int)>(0, i0);

        specialinvoke $r0.<ucar.ma2.MAVector: void <init>(ucar.ma2.Array)>($r3);

        return $r0;
    }

    public ucar.ma2.MAVector dot(ucar.ma2.MAVector)
    {
        ucar.ma2.MAVector r1, $r4;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, i8;
        ucar.ma2.MAMatrix r0;
        java.lang.String $r12;
        double $d0, $d1, $d2, d3;
        java.lang.IllegalArgumentException $r6;
        ucar.ma2.ArrayDouble$D1 $r2;
        ucar.ma2.Index $r3, $r5;
        java.lang.StringBuilder $r7, $r8, $r9, $r10, $r11;

        r0 := @this: ucar.ma2.MAMatrix;

        r1 := @parameter0: ucar.ma2.MAVector;

        $i0 = r0.<ucar.ma2.MAMatrix: int ncols>;

        $i1 = virtualinvoke r1.<ucar.ma2.MAVector: int getNelems()>();

        if $i0 == $i1 goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("MAMatrix.dot ");

        $i5 = r0.<ucar.ma2.MAMatrix: int ncols>;

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" != ");

        $i6 = virtualinvoke r1.<ucar.ma2.MAVector: int getNelems()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r12);

        throw $r6;

     label1:
        $r2 = new ucar.ma2.ArrayDouble$D1;

        $i2 = r0.<ucar.ma2.MAMatrix: int nrows>;

        specialinvoke $r2.<ucar.ma2.ArrayDouble$D1: void <init>(int)>($i2);

        $r3 = virtualinvoke $r2.<ucar.ma2.ArrayDouble$D1: ucar.ma2.Index getIndex()>();

        i7 = 0;

     label2:
        $i3 = r0.<ucar.ma2.MAMatrix: int nrows>;

        if i7 >= $i3 goto label5;

        d3 = 0.0;

        i8 = 0;

     label3:
        $i4 = r0.<ucar.ma2.MAMatrix: int ncols>;

        if i8 >= $i4 goto label4;

        $d0 = virtualinvoke r0.<ucar.ma2.MAMatrix: double getDouble(int,int)>(i7, i8);

        $d1 = virtualinvoke r1.<ucar.ma2.MAVector: double getDouble(int)>(i8);

        $d2 = $d0 * $d1;

        d3 = d3 + $d2;

        i8 = i8 + 1;

        goto label3;

     label4:
        $r5 = virtualinvoke $r3.<ucar.ma2.Index: ucar.ma2.Index set(int)>(i7);

        virtualinvoke $r2.<ucar.ma2.ArrayDouble$D1: void setDouble(ucar.ma2.Index,double)>($r5, d3);

        i7 = i7 + 1;

        goto label2;

     label5:
        $r4 = new ucar.ma2.MAVector;

        specialinvoke $r4.<ucar.ma2.MAVector: void <init>(ucar.ma2.Array)>($r2);

        return $r4;
    }

    public static ucar.ma2.MAMatrix multiply(ucar.ma2.MAMatrix, ucar.ma2.MAMatrix)
    {
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i9, i10, i11;
        ucar.ma2.MAMatrix r0, r1, $r4;
        java.lang.String $r12;
        double $d0, $d1, $d2, d3;
        java.lang.IllegalArgumentException $r6;
        ucar.ma2.ArrayDouble$D2 $r2;
        ucar.ma2.Index $r3, $r5;
        java.lang.StringBuilder $r7, $r8, $r9, $r10, $r11;

        r0 := @parameter0: ucar.ma2.MAMatrix;

        r1 := @parameter1: ucar.ma2.MAMatrix;

        $i0 = virtualinvoke r0.<ucar.ma2.MAMatrix: int getNcols()>();

        $i1 = virtualinvoke r1.<ucar.ma2.MAMatrix: int getNrows()>();

        if $i0 == $i1 goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("MAMatrix.multiply ");

        $i7 = virtualinvoke r0.<ucar.ma2.MAMatrix: int getNcols()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" != ");

        $i8 = virtualinvoke r1.<ucar.ma2.MAMatrix: int getNrows()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i8);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r12);

        throw $r6;

     label1:
        $i2 = virtualinvoke r0.<ucar.ma2.MAMatrix: int getNcols()>();

        $r2 = new ucar.ma2.ArrayDouble$D2;

        $i3 = virtualinvoke r0.<ucar.ma2.MAMatrix: int getNrows()>();

        $i4 = virtualinvoke r1.<ucar.ma2.MAMatrix: int getNcols()>();

        specialinvoke $r2.<ucar.ma2.ArrayDouble$D2: void <init>(int,int)>($i3, $i4);

        $r3 = virtualinvoke $r2.<ucar.ma2.ArrayDouble$D2: ucar.ma2.Index getIndex()>();

        i9 = 0;

     label2:
        $i5 = virtualinvoke r0.<ucar.ma2.MAMatrix: int getNrows()>();

        if i9 >= $i5 goto label7;

        i10 = 0;

     label3:
        $i6 = virtualinvoke r1.<ucar.ma2.MAMatrix: int getNcols()>();

        if i10 >= $i6 goto label6;

        d3 = 0.0;

        i11 = 0;

     label4:
        if i11 >= $i2 goto label5;

        $d0 = virtualinvoke r0.<ucar.ma2.MAMatrix: double getDouble(int,int)>(i9, i11);

        $d1 = virtualinvoke r1.<ucar.ma2.MAMatrix: double getDouble(int,int)>(i11, i10);

        $d2 = $d0 * $d1;

        d3 = d3 + $d2;

        i11 = i11 + 1;

        goto label4;

     label5:
        $r5 = virtualinvoke $r3.<ucar.ma2.Index: ucar.ma2.Index set(int,int)>(i9, i10);

        virtualinvoke $r2.<ucar.ma2.ArrayDouble$D2: void setDouble(ucar.ma2.Index,double)>($r5, d3);

        i10 = i10 + 1;

        goto label3;

     label6:
        i9 = i9 + 1;

        goto label2;

     label7:
        $r4 = new ucar.ma2.MAMatrix;

        specialinvoke $r4.<ucar.ma2.MAMatrix: void <init>(ucar.ma2.Array)>($r2);

        return $r4;
    }

    public void postMultiplyDiagonal(ucar.ma2.MAVector)
    {
        ucar.ma2.MAVector r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, i7;
        ucar.ma2.MAMatrix r0;
        java.lang.String $r13;
        double $d0, $d1, d2;
        java.lang.IllegalArgumentException $r7;
        ucar.ma2.Array $r3, $r6;
        ucar.ma2.Index $r2, $r4, $r5;
        java.lang.StringBuilder $r8, $r9, $r10, $r11, $r12;

        r0 := @this: ucar.ma2.MAMatrix;

        r1 := @parameter0: ucar.ma2.MAVector;

        $i0 = r0.<ucar.ma2.MAMatrix: int ncols>;

        $i1 = virtualinvoke r1.<ucar.ma2.MAVector: int getNelems()>();

        if $i0 == $i1 goto label1;

        $r7 = new java.lang.IllegalArgumentException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("MAMatrix.postMultiplyDiagonal ");

        $i4 = r0.<ucar.ma2.MAMatrix: int ncols>;

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" != ");

        $i5 = virtualinvoke r1.<ucar.ma2.MAVector: int getNelems()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r13);

        throw $r7;

     label1:
        i6 = 0;

     label2:
        $i2 = r0.<ucar.ma2.MAMatrix: int nrows>;

        if i6 >= $i2 goto label5;

        i7 = 0;

     label3:
        $i3 = r0.<ucar.ma2.MAMatrix: int ncols>;

        if i7 >= $i3 goto label4;

        $r3 = r0.<ucar.ma2.MAMatrix: ucar.ma2.Array a>;

        $r2 = r0.<ucar.ma2.MAMatrix: ucar.ma2.Index ima>;

        $r4 = virtualinvoke $r2.<ucar.ma2.Index: ucar.ma2.Index set(int,int)>(i6, i7);

        $d0 = virtualinvoke $r3.<ucar.ma2.Array: double getDouble(ucar.ma2.Index)>($r4);

        $d1 = virtualinvoke r1.<ucar.ma2.MAVector: double getDouble(int)>(i7);

        d2 = $d0 * $d1;

        $r6 = r0.<ucar.ma2.MAMatrix: ucar.ma2.Array a>;

        $r5 = r0.<ucar.ma2.MAMatrix: ucar.ma2.Index ima>;

        virtualinvoke $r6.<ucar.ma2.Array: void setDouble(ucar.ma2.Index,double)>($r5, d2);

        i7 = i7 + 1;

        goto label3;

     label4:
        i6 = i6 + 1;

        goto label2;

     label5:
        return;
    }

    public void preMultiplyDiagonal(ucar.ma2.MAVector)
    {
        ucar.ma2.MAVector r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, i7;
        ucar.ma2.MAMatrix r0;
        java.lang.String $r13;
        double $d0, $d1, d2;
        java.lang.IllegalArgumentException $r7;
        ucar.ma2.Array $r3, $r6;
        ucar.ma2.Index $r2, $r4, $r5;
        java.lang.StringBuilder $r8, $r9, $r10, $r11, $r12;

        r0 := @this: ucar.ma2.MAMatrix;

        r1 := @parameter0: ucar.ma2.MAVector;

        $i0 = r0.<ucar.ma2.MAMatrix: int nrows>;

        $i1 = virtualinvoke r1.<ucar.ma2.MAVector: int getNelems()>();

        if $i0 == $i1 goto label1;

        $r7 = new java.lang.IllegalArgumentException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("MAMatrix.preMultiplyDiagonal ");

        $i4 = r0.<ucar.ma2.MAMatrix: int nrows>;

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" != ");

        $i5 = virtualinvoke r1.<ucar.ma2.MAVector: int getNelems()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r13);

        throw $r7;

     label1:
        i6 = 0;

     label2:
        $i2 = r0.<ucar.ma2.MAMatrix: int nrows>;

        if i6 >= $i2 goto label5;

        i7 = 0;

     label3:
        $i3 = r0.<ucar.ma2.MAMatrix: int ncols>;

        if i7 >= $i3 goto label4;

        $r3 = r0.<ucar.ma2.MAMatrix: ucar.ma2.Array a>;

        $r2 = r0.<ucar.ma2.MAMatrix: ucar.ma2.Index ima>;

        $r4 = virtualinvoke $r2.<ucar.ma2.Index: ucar.ma2.Index set(int,int)>(i6, i7);

        $d0 = virtualinvoke $r3.<ucar.ma2.Array: double getDouble(ucar.ma2.Index)>($r4);

        $d1 = virtualinvoke r1.<ucar.ma2.MAVector: double getDouble(int)>(i6);

        d2 = $d0 * $d1;

        $r6 = r0.<ucar.ma2.MAMatrix: ucar.ma2.Array a>;

        $r5 = r0.<ucar.ma2.MAMatrix: ucar.ma2.Index ima>;

        virtualinvoke $r6.<ucar.ma2.Array: void setDouble(ucar.ma2.Index,double)>($r5, d2);

        i7 = i7 + 1;

        goto label3;

     label4:
        i6 = i6 + 1;

        goto label2;

     label5:
        return;
    }
}
