public class org.springframework.aop.aspectj.AspectJAfterReturningAdvice extends org.springframework.aop.aspectj.AbstractAspectJAdvice implements org.springframework.aop.AfterReturningAdvice, org.springframework.aop.AfterAdvice
{

    public void <init>(java.lang.reflect.Method, org.springframework.aop.aspectj.AspectJExpressionPointcut, org.springframework.aop.aspectj.AspectInstanceFactory)
    {
        org.springframework.aop.aspectj.AspectJAfterReturningAdvice r0;
        org.springframework.aop.aspectj.AspectInstanceFactory r3;
        java.lang.reflect.Method r1;
        org.springframework.aop.aspectj.AspectJExpressionPointcut r2;

        r0 := @this: org.springframework.aop.aspectj.AspectJAfterReturningAdvice;

        r1 := @parameter0: java.lang.reflect.Method;

        r2 := @parameter1: org.springframework.aop.aspectj.AspectJExpressionPointcut;

        r3 := @parameter2: org.springframework.aop.aspectj.AspectInstanceFactory;

        specialinvoke r0.<org.springframework.aop.aspectj.AbstractAspectJAdvice: void <init>(java.lang.reflect.Method,org.springframework.aop.aspectj.AspectJExpressionPointcut,org.springframework.aop.aspectj.AspectInstanceFactory)>(r1, r2, r3);

        return;
    }

    public boolean isBeforeAdvice()
    {
        org.springframework.aop.aspectj.AspectJAfterReturningAdvice r0;

        r0 := @this: org.springframework.aop.aspectj.AspectJAfterReturningAdvice;

        return 0;
    }

    public boolean isAfterAdvice()
    {
        org.springframework.aop.aspectj.AspectJAfterReturningAdvice r0;

        r0 := @this: org.springframework.aop.aspectj.AspectJAfterReturningAdvice;

        return 1;
    }

    public void setReturningName(java.lang.String)
    {
        org.springframework.aop.aspectj.AspectJAfterReturningAdvice r0;
        java.lang.String r1;

        r0 := @this: org.springframework.aop.aspectj.AspectJAfterReturningAdvice;

        r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<org.springframework.aop.aspectj.AspectJAfterReturningAdvice: void setReturningNameNoCheck(java.lang.String)>(r1);

        return;
    }

    public void afterReturning(java.lang.Object, java.lang.reflect.Method, java.lang.Object[], java.lang.Object) throws java.lang.Throwable
    {
        org.springframework.aop.aspectj.AspectJAfterReturningAdvice r0;
        java.lang.Object[] r4;
        org.aspectj.weaver.tools.JoinPointMatch $r3;
        java.lang.Object r2, r5;
        java.lang.reflect.Method r1;
        boolean $z0;

        r0 := @this: org.springframework.aop.aspectj.AspectJAfterReturningAdvice;

        r2 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.reflect.Method;

        r4 := @parameter2: java.lang.Object[];

        r5 := @parameter3: java.lang.Object;

        $z0 = specialinvoke r0.<org.springframework.aop.aspectj.AspectJAfterReturningAdvice: boolean shouldInvokeOnReturnValueOf(java.lang.reflect.Method,java.lang.Object)>(r1, r2);

        if $z0 == 0 goto label1;

        $r3 = virtualinvoke r0.<org.springframework.aop.aspectj.AspectJAfterReturningAdvice: org.aspectj.weaver.tools.JoinPointMatch getJoinPointMatch()>();

        virtualinvoke r0.<org.springframework.aop.aspectj.AspectJAfterReturningAdvice: java.lang.Object invokeAdviceMethod(org.aspectj.weaver.tools.JoinPointMatch,java.lang.Object,java.lang.Throwable)>($r3, r2, null);

     label1:
        return;
    }

    private boolean shouldInvokeOnReturnValueOf(java.lang.reflect.Method, java.lang.Object)
    {
        org.springframework.aop.aspectj.AspectJAfterReturningAdvice r0;
        java.lang.reflect.Type $r2, $r5;
        java.lang.Class $r1;
        java.lang.Object r3;
        java.lang.reflect.Method r4;
        boolean $z0, $z1;

        r0 := @this: org.springframework.aop.aspectj.AspectJAfterReturningAdvice;

        r4 := @parameter0: java.lang.reflect.Method;

        r3 := @parameter1: java.lang.Object;

        $r1 = virtualinvoke r0.<org.springframework.aop.aspectj.AspectJAfterReturningAdvice: java.lang.Class getDiscoveredReturningType()>();

        $r2 = virtualinvoke r0.<org.springframework.aop.aspectj.AspectJAfterReturningAdvice: java.lang.reflect.Type getDiscoveredReturningGenericType()>();

        $z0 = staticinvoke <org.springframework.util.ClassUtils: boolean isAssignableValue(java.lang.Class,java.lang.Object)>($r1, r3);

        if $z0 == 0 goto label2;

        if $r2 == null goto label1;

        if $r2 == $r1 goto label1;

        $r5 = virtualinvoke r4.<java.lang.reflect.Method: java.lang.reflect.Type getGenericReturnType()>();

        $z1 = staticinvoke <org.springframework.util.TypeUtils: boolean isAssignable(java.lang.reflect.Type,java.lang.reflect.Type)>($r2, $r5);

        if $z1 == 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }
}
