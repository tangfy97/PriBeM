abstract class com.hp.hpl.jena.rdf.arp.states.AbsWantLiteralValueOrDescription extends com.hp.hpl.jena.rdf.arp.states.WantDescription
{
    private java.lang.StringBuffer buf;
    private boolean checkComposingChar;

    public void <init>(com.hp.hpl.jena.rdf.arp.states.FrameI, com.hp.hpl.jena.rdf.arp.impl.AbsXMLContext)
    {
        com.hp.hpl.jena.rdf.arp.states.AbsWantLiteralValueOrDescription r0;
        com.hp.hpl.jena.rdf.arp.states.FrameI r1;
        com.hp.hpl.jena.rdf.arp.impl.AbsXMLContext r2;

        r0 := @this: com.hp.hpl.jena.rdf.arp.states.AbsWantLiteralValueOrDescription;

        r1 := @parameter0: com.hp.hpl.jena.rdf.arp.states.FrameI;

        r2 := @parameter1: com.hp.hpl.jena.rdf.arp.impl.AbsXMLContext;

        specialinvoke r0.<com.hp.hpl.jena.rdf.arp.states.WantDescription: void <init>(com.hp.hpl.jena.rdf.arp.states.FrameI,com.hp.hpl.jena.rdf.arp.impl.AbsXMLContext)>(r1, r2);

        r0.<com.hp.hpl.jena.rdf.arp.states.AbsWantLiteralValueOrDescription: boolean checkComposingChar> = 1;

        return;
    }

    public void <init>(com.hp.hpl.jena.rdf.arp.states.FrameI, com.hp.hpl.jena.rdf.arp.impl.AttributeLexer) throws org.xml.sax.SAXParseException
    {
        com.hp.hpl.jena.rdf.arp.impl.AttributeLexer r2;
        com.hp.hpl.jena.rdf.arp.states.AbsWantLiteralValueOrDescription r0;
        com.hp.hpl.jena.rdf.arp.states.FrameI r1;

        r0 := @this: com.hp.hpl.jena.rdf.arp.states.AbsWantLiteralValueOrDescription;

        r1 := @parameter0: com.hp.hpl.jena.rdf.arp.states.FrameI;

        r2 := @parameter1: com.hp.hpl.jena.rdf.arp.impl.AttributeLexer;

        specialinvoke r0.<com.hp.hpl.jena.rdf.arp.states.WantDescription: void <init>(com.hp.hpl.jena.rdf.arp.states.FrameI,com.hp.hpl.jena.rdf.arp.impl.AttributeLexer)>(r1, r2);

        r0.<com.hp.hpl.jena.rdf.arp.states.AbsWantLiteralValueOrDescription: boolean checkComposingChar> = 1;

        return;
    }

    public void characters(char[], int, int) throws org.xml.sax.SAXParseException
    {
        com.hp.hpl.jena.rdf.arp.states.AbsWantLiteralValueOrDescription r0;
        com.hp.hpl.jena.rdf.arp.impl.Taint $r5;
        java.lang.StringBuffer $r1, $r2, $r4;
        int i0, i1;
        char[] r3;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.rdf.arp.states.AbsWantLiteralValueOrDescription;

        r3 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $z0 = r0.<com.hp.hpl.jena.rdf.arp.states.AbsWantLiteralValueOrDescription: boolean checkComposingChar>;

        if $z0 == 0 goto label1;

        $r5 = r0.<com.hp.hpl.jena.rdf.arp.states.AbsWantLiteralValueOrDescription: com.hp.hpl.jena.rdf.arp.impl.Taint taint>;

        virtualinvoke r0.<com.hp.hpl.jena.rdf.arp.states.AbsWantLiteralValueOrDescription: void checkComposingChar(com.hp.hpl.jena.rdf.arp.impl.Taint,char[],int,int)>($r5, r3, i0, i1);

     label1:
        r0.<com.hp.hpl.jena.rdf.arp.states.AbsWantLiteralValueOrDescription: boolean checkComposingChar> = 0;

        $r1 = r0.<com.hp.hpl.jena.rdf.arp.states.AbsWantLiteralValueOrDescription: java.lang.StringBuffer buf>;

        if $r1 != null goto label2;

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>(int)>(i1);

        r0.<com.hp.hpl.jena.rdf.arp.states.AbsWantLiteralValueOrDescription: java.lang.StringBuffer buf> = $r4;

     label2:
        $r2 = virtualinvoke r0.<com.hp.hpl.jena.rdf.arp.states.AbsWantLiteralValueOrDescription: java.lang.StringBuffer getBuf()>();

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(char[],int,int)>(r3, i0, i1);

        return;
    }

    void setBuf(java.lang.StringBuffer)
    {
        com.hp.hpl.jena.rdf.arp.states.AbsWantLiteralValueOrDescription r0;
        java.lang.StringBuffer r1;

        r0 := @this: com.hp.hpl.jena.rdf.arp.states.AbsWantLiteralValueOrDescription;

        r1 := @parameter0: java.lang.StringBuffer;

        r0.<com.hp.hpl.jena.rdf.arp.states.AbsWantLiteralValueOrDescription: java.lang.StringBuffer buf> = r1;

        return;
    }

    java.lang.StringBuffer getBuf()
    {
        com.hp.hpl.jena.rdf.arp.states.AbsWantLiteralValueOrDescription r0;
        java.lang.StringBuffer $r1, $r2, $r3;

        r0 := @this: com.hp.hpl.jena.rdf.arp.states.AbsWantLiteralValueOrDescription;

        $r1 = r0.<com.hp.hpl.jena.rdf.arp.states.AbsWantLiteralValueOrDescription: java.lang.StringBuffer buf>;

        if $r1 != null goto label1;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>(int)>(0);

        r0.<com.hp.hpl.jena.rdf.arp.states.AbsWantLiteralValueOrDescription: java.lang.StringBuffer buf> = $r3;

     label1:
        $r2 = r0.<com.hp.hpl.jena.rdf.arp.states.AbsWantLiteralValueOrDescription: java.lang.StringBuffer buf>;

        return $r2;
    }

    boolean bufIsSet()
    {
        com.hp.hpl.jena.rdf.arp.states.AbsWantLiteralValueOrDescription r0;
        java.lang.StringBuffer $r1;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.rdf.arp.states.AbsWantLiteralValueOrDescription;

        $r1 = r0.<com.hp.hpl.jena.rdf.arp.states.AbsWantLiteralValueOrDescription: java.lang.StringBuffer buf>;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public com.hp.hpl.jena.rdf.arp.states.FrameI startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes) throws org.xml.sax.SAXParseException
    {
        com.hp.hpl.jena.rdf.arp.states.AbsWantLiteralValueOrDescription r0;
        com.hp.hpl.jena.rdf.arp.states.FrameI $r5;
        org.xml.sax.Attributes r4;
        java.lang.String r1, r2, r3;

        r0 := @this: com.hp.hpl.jena.rdf.arp.states.AbsWantLiteralValueOrDescription;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: org.xml.sax.Attributes;

        r0.<com.hp.hpl.jena.rdf.arp.states.AbsWantLiteralValueOrDescription: boolean checkComposingChar> = 1;

        $r5 = specialinvoke r0.<com.hp.hpl.jena.rdf.arp.states.WantDescription: com.hp.hpl.jena.rdf.arp.states.FrameI startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)>(r1, r2, r3, r4);

        return $r5;
    }

    public void comment(char[], int, int)
    {
        com.hp.hpl.jena.rdf.arp.states.AbsWantLiteralValueOrDescription r0;
        int i0, i1;
        char[] r1;

        r0 := @this: com.hp.hpl.jena.rdf.arp.states.AbsWantLiteralValueOrDescription;

        r1 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r0.<com.hp.hpl.jena.rdf.arp.states.AbsWantLiteralValueOrDescription: boolean checkComposingChar> = 1;

        return;
    }

    public void processingInstruction(java.lang.String, java.lang.String) throws org.xml.sax.SAXParseException
    {
        com.hp.hpl.jena.rdf.arp.states.AbsWantLiteralValueOrDescription r0;
        java.lang.String r1, r2;

        r0 := @this: com.hp.hpl.jena.rdf.arp.states.AbsWantLiteralValueOrDescription;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r0.<com.hp.hpl.jena.rdf.arp.states.AbsWantLiteralValueOrDescription: boolean checkComposingChar> = 1;

        specialinvoke r0.<com.hp.hpl.jena.rdf.arp.states.WantDescription: void processingInstruction(java.lang.String,java.lang.String)>(r1, r2);

        return;
    }
}
