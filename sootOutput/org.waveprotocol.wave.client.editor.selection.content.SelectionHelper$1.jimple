final class org.waveprotocol.wave.client.editor.selection.content.SelectionHelper$1 extends java.lang.Object implements org.waveprotocol.wave.client.editor.selection.content.SelectionHelper
{

    void <init>()
    {
        org.waveprotocol.wave.client.editor.selection.content.SelectionHelper$1 r0;

        r0 := @this: org.waveprotocol.wave.client.editor.selection.content.SelectionHelper$1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void clearSelection()
    {
        org.waveprotocol.wave.client.editor.selection.content.SelectionHelper$1 r0;

        r0 := @this: org.waveprotocol.wave.client.editor.selection.content.SelectionHelper$1;

        return;
    }

    public org.waveprotocol.wave.model.document.util.Point getFirstValidSelectionPoint()
    {
        org.waveprotocol.wave.client.editor.selection.content.SelectionHelper$1 r0;

        r0 := @this: org.waveprotocol.wave.client.editor.selection.content.SelectionHelper$1;

        return null;
    }

    public org.waveprotocol.wave.model.document.util.Point getLastValidSelectionPoint()
    {
        org.waveprotocol.wave.client.editor.selection.content.SelectionHelper$1 r0;

        r0 := @this: org.waveprotocol.wave.client.editor.selection.content.SelectionHelper$1;

        return null;
    }

    public org.waveprotocol.wave.client.editor.content.ContentRange getOrderedSelectionPoints()
    {
        org.waveprotocol.wave.client.editor.selection.content.SelectionHelper$1 r0;

        r0 := @this: org.waveprotocol.wave.client.editor.selection.content.SelectionHelper$1;

        return null;
    }

    public org.waveprotocol.wave.model.document.util.Range getOrderedSelectionRange()
    {
        org.waveprotocol.wave.client.editor.selection.content.SelectionHelper$1 r0;

        r0 := @this: org.waveprotocol.wave.client.editor.selection.content.SelectionHelper$1;

        return null;
    }

    public org.waveprotocol.wave.client.editor.content.FocusedContentRange getSelectionPoints()
    {
        org.waveprotocol.wave.client.editor.selection.content.SelectionHelper$1 r0;

        r0 := @this: org.waveprotocol.wave.client.editor.selection.content.SelectionHelper$1;

        return null;
    }

    public org.waveprotocol.wave.model.document.util.FocusedRange getSelectionRange()
    {
        org.waveprotocol.wave.client.editor.selection.content.SelectionHelper$1 r0;

        r0 := @this: org.waveprotocol.wave.client.editor.selection.content.SelectionHelper$1;

        return null;
    }

    public boolean isValidSelectionPoint(org.waveprotocol.wave.model.document.util.Point)
    {
        org.waveprotocol.wave.client.editor.selection.content.SelectionHelper$1 r0;
        org.waveprotocol.wave.model.document.util.Point r1;

        r0 := @this: org.waveprotocol.wave.client.editor.selection.content.SelectionHelper$1;

        r1 := @parameter0: org.waveprotocol.wave.model.document.util.Point;

        return 0;
    }

    public void setCaret(int)
    {
        int i0;
        org.waveprotocol.wave.client.editor.selection.content.SelectionHelper$1 r0;

        r0 := @this: org.waveprotocol.wave.client.editor.selection.content.SelectionHelper$1;

        i0 := @parameter0: int;

        return;
    }

    public void setCaret(org.waveprotocol.wave.model.document.util.Point)
    {
        org.waveprotocol.wave.client.editor.selection.content.SelectionHelper$1 r0;
        org.waveprotocol.wave.model.document.util.Point r1;

        r0 := @this: org.waveprotocol.wave.client.editor.selection.content.SelectionHelper$1;

        r1 := @parameter0: org.waveprotocol.wave.model.document.util.Point;

        return;
    }

    public void setSelectionPoints(org.waveprotocol.wave.model.document.util.Point, org.waveprotocol.wave.model.document.util.Point)
    {
        org.waveprotocol.wave.client.editor.selection.content.SelectionHelper$1 r0;
        org.waveprotocol.wave.model.document.util.Point r1, r2;

        r0 := @this: org.waveprotocol.wave.client.editor.selection.content.SelectionHelper$1;

        r1 := @parameter0: org.waveprotocol.wave.model.document.util.Point;

        r2 := @parameter1: org.waveprotocol.wave.model.document.util.Point;

        return;
    }

    public void setSelectionRange(org.waveprotocol.wave.model.document.util.FocusedRange)
    {
        org.waveprotocol.wave.client.editor.selection.content.SelectionHelper$1 r0;
        org.waveprotocol.wave.model.document.util.FocusedRange r1;

        r0 := @this: org.waveprotocol.wave.client.editor.selection.content.SelectionHelper$1;

        r1 := @parameter0: org.waveprotocol.wave.model.document.util.FocusedRange;

        return;
    }
}
