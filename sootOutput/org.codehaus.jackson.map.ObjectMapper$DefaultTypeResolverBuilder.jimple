public class org.codehaus.jackson.map.ObjectMapper$DefaultTypeResolverBuilder extends org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder
{
    protected final org.codehaus.jackson.map.ObjectMapper$DefaultTyping _appliesFor;

    public void <init>(org.codehaus.jackson.map.ObjectMapper$DefaultTyping)
    {
        org.codehaus.jackson.map.ObjectMapper$DefaultTyping r1;
        org.codehaus.jackson.map.ObjectMapper$DefaultTypeResolverBuilder r0;

        r0 := @this: org.codehaus.jackson.map.ObjectMapper$DefaultTypeResolverBuilder;

        r1 := @parameter0: org.codehaus.jackson.map.ObjectMapper$DefaultTyping;

        specialinvoke r0.<org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder: void <init>()>();

        r0.<org.codehaus.jackson.map.ObjectMapper$DefaultTypeResolverBuilder: org.codehaus.jackson.map.ObjectMapper$DefaultTyping _appliesFor> = r1;

        return;
    }

    public org.codehaus.jackson.map.TypeDeserializer buildTypeDeserializer(org.codehaus.jackson.map.DeserializationConfig, org.codehaus.jackson.type.JavaType, java.util.Collection, org.codehaus.jackson.map.BeanProperty)
    {
        org.codehaus.jackson.map.TypeDeserializer $r5;
        java.util.Collection r3;
        org.codehaus.jackson.type.JavaType r1;
        org.codehaus.jackson.map.DeserializationConfig r2;
        org.codehaus.jackson.map.ObjectMapper$DefaultTypeResolverBuilder r0;
        org.codehaus.jackson.map.BeanProperty r4;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.map.ObjectMapper$DefaultTypeResolverBuilder;

        r2 := @parameter0: org.codehaus.jackson.map.DeserializationConfig;

        r1 := @parameter1: org.codehaus.jackson.type.JavaType;

        r3 := @parameter2: java.util.Collection;

        r4 := @parameter3: org.codehaus.jackson.map.BeanProperty;

        $z0 = virtualinvoke r0.<org.codehaus.jackson.map.ObjectMapper$DefaultTypeResolverBuilder: boolean useForType(org.codehaus.jackson.type.JavaType)>(r1);

        if $z0 == 0 goto label1;

        $r5 = specialinvoke r0.<org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder: org.codehaus.jackson.map.TypeDeserializer buildTypeDeserializer(org.codehaus.jackson.map.DeserializationConfig,org.codehaus.jackson.type.JavaType,java.util.Collection,org.codehaus.jackson.map.BeanProperty)>(r2, r1, r3, r4);

        goto label2;

     label1:
        $r5 = null;

     label2:
        return $r5;
    }

    public org.codehaus.jackson.map.TypeSerializer buildTypeSerializer(org.codehaus.jackson.map.SerializationConfig, org.codehaus.jackson.type.JavaType, java.util.Collection, org.codehaus.jackson.map.BeanProperty)
    {
        org.codehaus.jackson.map.TypeSerializer $r5;
        java.util.Collection r3;
        org.codehaus.jackson.type.JavaType r1;
        org.codehaus.jackson.map.SerializationConfig r2;
        org.codehaus.jackson.map.ObjectMapper$DefaultTypeResolverBuilder r0;
        org.codehaus.jackson.map.BeanProperty r4;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.map.ObjectMapper$DefaultTypeResolverBuilder;

        r2 := @parameter0: org.codehaus.jackson.map.SerializationConfig;

        r1 := @parameter1: org.codehaus.jackson.type.JavaType;

        r3 := @parameter2: java.util.Collection;

        r4 := @parameter3: org.codehaus.jackson.map.BeanProperty;

        $z0 = virtualinvoke r0.<org.codehaus.jackson.map.ObjectMapper$DefaultTypeResolverBuilder: boolean useForType(org.codehaus.jackson.type.JavaType)>(r1);

        if $z0 == 0 goto label1;

        $r5 = specialinvoke r0.<org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder: org.codehaus.jackson.map.TypeSerializer buildTypeSerializer(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.type.JavaType,java.util.Collection,org.codehaus.jackson.map.BeanProperty)>(r2, r1, r3, r4);

        goto label2;

     label1:
        $r5 = null;

     label2:
        return $r5;
    }

    public boolean useForType(org.codehaus.jackson.type.JavaType)
    {
        org.codehaus.jackson.map.ObjectMapper$DefaultTyping $r1;
        int[] $r2;
        int $i0, $i1;
        org.codehaus.jackson.type.JavaType r5;
        java.lang.Class $r3, $r4;
        org.codehaus.jackson.map.ObjectMapper$DefaultTypeResolverBuilder r0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;

        r0 := @this: org.codehaus.jackson.map.ObjectMapper$DefaultTypeResolverBuilder;

        r5 := @parameter0: org.codehaus.jackson.type.JavaType;

        $r2 = <org.codehaus.jackson.map.ObjectMapper$2: int[] $SwitchMap$org$codehaus$jackson$map$ObjectMapper$DefaultTyping>;

        $r1 = r0.<org.codehaus.jackson.map.ObjectMapper$DefaultTypeResolverBuilder: org.codehaus.jackson.map.ObjectMapper$DefaultTyping _appliesFor>;

        $i0 = virtualinvoke $r1.<org.codehaus.jackson.map.ObjectMapper$DefaultTyping: int ordinal()>();

        $i1 = $r2[$i0];

        tableswitch($i1)
        {
            case 1: goto label01;
            case 2: goto label02;
            case 3: goto label06;
            default: goto label10;
        };

     label01:
        $z3 = virtualinvoke r5.<org.codehaus.jackson.type.JavaType: boolean isArrayType()>();

        if $z3 == 0 goto label02;

        r5 = virtualinvoke r5.<org.codehaus.jackson.type.JavaType: org.codehaus.jackson.type.JavaType getContentType()>();

        goto label01;

     label02:
        $r3 = virtualinvoke r5.<org.codehaus.jackson.type.JavaType: java.lang.Class getRawClass()>();

        if $r3 == class "Ljava/lang/Object;" goto label03;

        $z2 = virtualinvoke r5.<org.codehaus.jackson.type.JavaType: boolean isConcrete()>();

        if $z2 != 0 goto label04;

     label03:
        $z4 = 1;

        goto label05;

     label04:
        $z4 = 0;

     label05:
        return $z4;

     label06:
        $z0 = virtualinvoke r5.<org.codehaus.jackson.type.JavaType: boolean isArrayType()>();

        if $z0 == 0 goto label07;

        r5 = virtualinvoke r5.<org.codehaus.jackson.type.JavaType: org.codehaus.jackson.type.JavaType getContentType()>();

        goto label06;

     label07:
        $z1 = virtualinvoke r5.<org.codehaus.jackson.type.JavaType: boolean isFinal()>();

        if $z1 != 0 goto label08;

        $z5 = 1;

        goto label09;

     label08:
        $z5 = 0;

     label09:
        return $z5;

     label10:
        $r4 = virtualinvoke r5.<org.codehaus.jackson.type.JavaType: java.lang.Class getRawClass()>();

        if $r4 != class "Ljava/lang/Object;" goto label11;

        $z6 = 1;

        goto label12;

     label11:
        $z6 = 0;

     label12:
        return $z6;
    }
}
