abstract class org.codehaus.jackson.map.deser.std.BaseNodeDeserializer extends org.codehaus.jackson.map.deser.std.StdDeserializer
{

    public void <init>(java.lang.Class)
    {
        org.codehaus.jackson.map.deser.std.BaseNodeDeserializer r0;
        java.lang.Class r1;

        r0 := @this: org.codehaus.jackson.map.deser.std.BaseNodeDeserializer;

        r1 := @parameter0: java.lang.Class;

        specialinvoke r0.<org.codehaus.jackson.map.deser.std.StdDeserializer: void <init>(java.lang.Class)>(r1);

        return;
    }

    public java.lang.Object deserializeWithType(org.codehaus.jackson.JsonParser, org.codehaus.jackson.map.DeserializationContext, org.codehaus.jackson.map.TypeDeserializer) throws java.io.IOException, org.codehaus.jackson.JsonProcessingException
    {
        org.codehaus.jackson.map.TypeDeserializer r0;
        org.codehaus.jackson.map.deser.std.BaseNodeDeserializer r4;
        java.lang.Object $r3;
        org.codehaus.jackson.JsonParser r1;
        org.codehaus.jackson.map.DeserializationContext r2;

        r4 := @this: org.codehaus.jackson.map.deser.std.BaseNodeDeserializer;

        r1 := @parameter0: org.codehaus.jackson.JsonParser;

        r2 := @parameter1: org.codehaus.jackson.map.DeserializationContext;

        r0 := @parameter2: org.codehaus.jackson.map.TypeDeserializer;

        $r3 = virtualinvoke r0.<org.codehaus.jackson.map.TypeDeserializer: java.lang.Object deserializeTypedFromAny(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext)>(r1, r2);

        return $r3;
    }

    protected void _reportProblem(org.codehaus.jackson.JsonParser, java.lang.String) throws org.codehaus.jackson.map.JsonMappingException
    {
        org.codehaus.jackson.map.JsonMappingException $r0;
        org.codehaus.jackson.map.deser.std.BaseNodeDeserializer r4;
        java.lang.String r1;
        org.codehaus.jackson.JsonLocation $r3;
        org.codehaus.jackson.JsonParser r2;

        r4 := @this: org.codehaus.jackson.map.deser.std.BaseNodeDeserializer;

        r2 := @parameter0: org.codehaus.jackson.JsonParser;

        r1 := @parameter1: java.lang.String;

        $r0 = new org.codehaus.jackson.map.JsonMappingException;

        $r3 = virtualinvoke r2.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonLocation getTokenLocation()>();

        specialinvoke $r0.<org.codehaus.jackson.map.JsonMappingException: void <init>(java.lang.String,org.codehaus.jackson.JsonLocation)>(r1, $r3);

        throw $r0;
    }

    protected void _handleDuplicateField(java.lang.String, org.codehaus.jackson.node.ObjectNode, org.codehaus.jackson.JsonNode, org.codehaus.jackson.JsonNode) throws org.codehaus.jackson.JsonProcessingException
    {
        org.codehaus.jackson.map.deser.std.BaseNodeDeserializer r0;
        java.lang.String r1;
        org.codehaus.jackson.JsonNode r3, r4;
        org.codehaus.jackson.node.ObjectNode r2;

        r0 := @this: org.codehaus.jackson.map.deser.std.BaseNodeDeserializer;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.codehaus.jackson.node.ObjectNode;

        r3 := @parameter2: org.codehaus.jackson.JsonNode;

        r4 := @parameter3: org.codehaus.jackson.JsonNode;

        return;
    }

    protected final org.codehaus.jackson.node.ObjectNode deserializeObject(org.codehaus.jackson.JsonParser, org.codehaus.jackson.map.DeserializationContext, org.codehaus.jackson.node.JsonNodeFactory) throws java.io.IOException, org.codehaus.jackson.JsonProcessingException
    {
        org.codehaus.jackson.JsonToken $r3, $r4, $r7, r11, $r12;
        org.codehaus.jackson.JsonNode r13, $r14;
        org.codehaus.jackson.map.DeserializationContext r10;
        org.codehaus.jackson.map.deser.std.BaseNodeDeserializer r9;
        org.codehaus.jackson.node.JsonNodeFactory r0;
        int[] $r6;
        int $i0, $i1;
        java.lang.String $r5, $r8;
        org.codehaus.jackson.JsonParser r2;
        org.codehaus.jackson.node.ObjectNode $r1;

        r9 := @this: org.codehaus.jackson.map.deser.std.BaseNodeDeserializer;

        r2 := @parameter0: org.codehaus.jackson.JsonParser;

        r10 := @parameter1: org.codehaus.jackson.map.DeserializationContext;

        r0 := @parameter2: org.codehaus.jackson.node.JsonNodeFactory;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.node.JsonNodeFactory: org.codehaus.jackson.node.ObjectNode objectNode()>();

        $r3 = virtualinvoke r2.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonToken getCurrentToken()>();

        r11 = $r3;

        $r4 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken START_OBJECT>;

        if $r3 != $r4 goto label1;

        r11 = virtualinvoke r2.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonToken nextToken()>();

     label1:
        $r12 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken FIELD_NAME>;

        if r11 != $r12 goto label8;

        $r5 = virtualinvoke r2.<org.codehaus.jackson.JsonParser: java.lang.String getCurrentName()>();

        $r6 = <org.codehaus.jackson.map.deser.std.BaseNodeDeserializer$1: int[] $SwitchMap$org$codehaus$jackson$JsonToken>;

        $r7 = virtualinvoke r2.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonToken nextToken()>();

        $i0 = virtualinvoke $r7.<org.codehaus.jackson.JsonToken: int ordinal()>();

        $i1 = $r6[$i0];

        tableswitch($i1)
        {
            case 1: goto label2;
            case 2: goto label3;
            case 3: goto label4;
            default: goto label5;
        };

     label2:
        r13 = virtualinvoke r9.<org.codehaus.jackson.map.deser.std.BaseNodeDeserializer: org.codehaus.jackson.node.ObjectNode deserializeObject(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext,org.codehaus.jackson.node.JsonNodeFactory)>(r2, r10, r0);

        goto label6;

     label3:
        r13 = virtualinvoke r9.<org.codehaus.jackson.map.deser.std.BaseNodeDeserializer: org.codehaus.jackson.node.ArrayNode deserializeArray(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext,org.codehaus.jackson.node.JsonNodeFactory)>(r2, r10, r0);

        goto label6;

     label4:
        $r8 = virtualinvoke r2.<org.codehaus.jackson.JsonParser: java.lang.String getText()>();

        r13 = virtualinvoke r0.<org.codehaus.jackson.node.JsonNodeFactory: org.codehaus.jackson.node.TextNode textNode(java.lang.String)>($r8);

        goto label6;

     label5:
        r13 = virtualinvoke r9.<org.codehaus.jackson.map.deser.std.BaseNodeDeserializer: org.codehaus.jackson.JsonNode deserializeAny(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext,org.codehaus.jackson.node.JsonNodeFactory)>(r2, r10, r0);

     label6:
        $r14 = virtualinvoke $r1.<org.codehaus.jackson.node.ObjectNode: org.codehaus.jackson.JsonNode put(java.lang.String,org.codehaus.jackson.JsonNode)>($r5, r13);

        if $r14 == null goto label7;

        virtualinvoke r9.<org.codehaus.jackson.map.deser.std.BaseNodeDeserializer: void _handleDuplicateField(java.lang.String,org.codehaus.jackson.node.ObjectNode,org.codehaus.jackson.JsonNode,org.codehaus.jackson.JsonNode)>($r5, $r1, $r14, r13);

     label7:
        r11 = virtualinvoke r2.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonToken nextToken()>();

        goto label1;

     label8:
        return $r1;
    }

    protected final org.codehaus.jackson.node.ArrayNode deserializeArray(org.codehaus.jackson.JsonParser, org.codehaus.jackson.map.DeserializationContext, org.codehaus.jackson.node.JsonNodeFactory) throws java.io.IOException, org.codehaus.jackson.JsonProcessingException
    {
        org.codehaus.jackson.JsonToken $r11;
        org.codehaus.jackson.node.TextNode $r4;
        org.codehaus.jackson.JsonNode $r9;
        org.codehaus.jackson.map.DeserializationContext r6;
        org.codehaus.jackson.node.ArrayNode $r1, $r7;
        org.codehaus.jackson.map.deser.std.BaseNodeDeserializer r5;
        org.codehaus.jackson.node.JsonNodeFactory r0;
        int[] $r10;
        int $i0, $i1;
        java.lang.String $r3;
        org.codehaus.jackson.JsonParser r2;
        org.codehaus.jackson.node.ObjectNode $r8;

        r5 := @this: org.codehaus.jackson.map.deser.std.BaseNodeDeserializer;

        r2 := @parameter0: org.codehaus.jackson.JsonParser;

        r6 := @parameter1: org.codehaus.jackson.map.DeserializationContext;

        r0 := @parameter2: org.codehaus.jackson.node.JsonNodeFactory;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.node.JsonNodeFactory: org.codehaus.jackson.node.ArrayNode arrayNode()>();

     label1:
        $r10 = <org.codehaus.jackson.map.deser.std.BaseNodeDeserializer$1: int[] $SwitchMap$org$codehaus$jackson$JsonToken>;

        $r11 = virtualinvoke r2.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonToken nextToken()>();

        $i0 = virtualinvoke $r11.<org.codehaus.jackson.JsonToken: int ordinal()>();

        $i1 = $r10[$i0];

        tableswitch($i1)
        {
            case 1: goto label2;
            case 2: goto label3;
            case 3: goto label5;
            case 4: goto label4;
            default: goto label6;
        };

     label2:
        $r8 = virtualinvoke r5.<org.codehaus.jackson.map.deser.std.BaseNodeDeserializer: org.codehaus.jackson.node.ObjectNode deserializeObject(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext,org.codehaus.jackson.node.JsonNodeFactory)>(r2, r6, r0);

        virtualinvoke $r1.<org.codehaus.jackson.node.ArrayNode: void add(org.codehaus.jackson.JsonNode)>($r8);

        goto label1;

     label3:
        $r7 = virtualinvoke r5.<org.codehaus.jackson.map.deser.std.BaseNodeDeserializer: org.codehaus.jackson.node.ArrayNode deserializeArray(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext,org.codehaus.jackson.node.JsonNodeFactory)>(r2, r6, r0);

        virtualinvoke $r1.<org.codehaus.jackson.node.ArrayNode: void add(org.codehaus.jackson.JsonNode)>($r7);

        goto label1;

     label4:
        return $r1;

     label5:
        $r3 = virtualinvoke r2.<org.codehaus.jackson.JsonParser: java.lang.String getText()>();

        $r4 = virtualinvoke r0.<org.codehaus.jackson.node.JsonNodeFactory: org.codehaus.jackson.node.TextNode textNode(java.lang.String)>($r3);

        virtualinvoke $r1.<org.codehaus.jackson.node.ArrayNode: void add(org.codehaus.jackson.JsonNode)>($r4);

        goto label1;

     label6:
        $r9 = virtualinvoke r5.<org.codehaus.jackson.map.deser.std.BaseNodeDeserializer: org.codehaus.jackson.JsonNode deserializeAny(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext,org.codehaus.jackson.node.JsonNodeFactory)>(r2, r6, r0);

        virtualinvoke $r1.<org.codehaus.jackson.node.ArrayNode: void add(org.codehaus.jackson.JsonNode)>($r9);

        goto label1;
    }

    protected final org.codehaus.jackson.JsonNode deserializeAny(org.codehaus.jackson.JsonParser, org.codehaus.jackson.map.DeserializationContext, org.codehaus.jackson.node.JsonNodeFactory) throws java.io.IOException, org.codehaus.jackson.JsonProcessingException
    {
        byte[] $r25, $r26;
        org.codehaus.jackson.JsonToken $r2;
        org.codehaus.jackson.node.NumericNode $r10, $r13, $r17, $r20, $r21;
        java.math.BigDecimal $r9;
        int[] $r1;
        java.math.BigInteger $r16;
        boolean $z0, $z1;
        org.codehaus.jackson.node.BinaryNode $r27;
        org.codehaus.jackson.node.ArrayNode $r33;
        org.codehaus.jackson.node.POJONode $r24;
        org.codehaus.jackson.node.TextNode $r32;
        long $l2;
        org.codehaus.jackson.map.DeserializationContext r11;
        org.codehaus.jackson.map.deser.std.BaseNodeDeserializer r29;
        org.codehaus.jackson.map.JsonMappingException $r36;
        org.codehaus.jackson.node.JsonNodeFactory r3;
        int $i0, $i1, $i3;
        java.lang.String $r31;
        org.codehaus.jackson.JsonParser r0;
        double $d0;
        org.codehaus.jackson.node.ObjectNode $r30, $r34;
        org.codehaus.jackson.node.NullNode $r4, $r28;
        org.codehaus.jackson.node.BooleanNode $r5, $r6;
        org.codehaus.jackson.map.DeserializationConfig$Feature $r12, $r18;
        org.codehaus.jackson.JsonParser$NumberType $r7, $r8, $r14, $r15, $r19;
        java.lang.Object $r22;
        java.lang.Class $r23, $r35;

        r29 := @this: org.codehaus.jackson.map.deser.std.BaseNodeDeserializer;

        r0 := @parameter0: org.codehaus.jackson.JsonParser;

        r11 := @parameter1: org.codehaus.jackson.map.DeserializationContext;

        r3 := @parameter2: org.codehaus.jackson.node.JsonNodeFactory;

        $r1 = <org.codehaus.jackson.map.deser.std.BaseNodeDeserializer$1: int[] $SwitchMap$org$codehaus$jackson$JsonToken>;

        $r2 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonToken getCurrentToken()>();

        $i0 = virtualinvoke $r2.<org.codehaus.jackson.JsonToken: int ordinal()>();

        $i1 = $r1[$i0];

        tableswitch($i1)
        {
            case 1: goto label01;
            case 2: goto label02;
            case 3: goto label07;
            case 4: goto label18;
            case 5: goto label03;
            case 6: goto label04;
            case 7: goto label08;
            case 8: goto label12;
            case 9: goto label15;
            case 10: goto label16;
            case 11: goto label17;
            default: goto label18;
        };

     label01:
        $r34 = virtualinvoke r29.<org.codehaus.jackson.map.deser.std.BaseNodeDeserializer: org.codehaus.jackson.node.ObjectNode deserializeObject(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext,org.codehaus.jackson.node.JsonNodeFactory)>(r0, r11, r3);

        return $r34;

     label02:
        $r33 = virtualinvoke r29.<org.codehaus.jackson.map.deser.std.BaseNodeDeserializer: org.codehaus.jackson.node.ArrayNode deserializeArray(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext,org.codehaus.jackson.node.JsonNodeFactory)>(r0, r11, r3);

        return $r33;

     label03:
        $r30 = virtualinvoke r29.<org.codehaus.jackson.map.deser.std.BaseNodeDeserializer: org.codehaus.jackson.node.ObjectNode deserializeObject(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext,org.codehaus.jackson.node.JsonNodeFactory)>(r0, r11, r3);

        return $r30;

     label04:
        $r22 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: java.lang.Object getEmbeddedObject()>();

        if $r22 != null goto label05;

        $r28 = virtualinvoke r3.<org.codehaus.jackson.node.JsonNodeFactory: org.codehaus.jackson.node.NullNode nullNode()>();

        return $r28;

     label05:
        $r23 = virtualinvoke $r22.<java.lang.Object: java.lang.Class getClass()>();

        if $r23 != class "[B" goto label06;

        $r25 = (byte[]) $r22;

        $r26 = (byte[]) $r25;

        $r27 = virtualinvoke r3.<org.codehaus.jackson.node.JsonNodeFactory: org.codehaus.jackson.node.BinaryNode binaryNode(byte[])>($r26);

        return $r27;

     label06:
        $r24 = virtualinvoke r3.<org.codehaus.jackson.node.JsonNodeFactory: org.codehaus.jackson.node.POJONode POJONode(java.lang.Object)>($r22);

        return $r24;

     label07:
        $r31 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: java.lang.String getText()>();

        $r32 = virtualinvoke r3.<org.codehaus.jackson.node.JsonNodeFactory: org.codehaus.jackson.node.TextNode textNode(java.lang.String)>($r31);

        return $r32;

     label08:
        $r14 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonParser$NumberType getNumberType()>();

        $r15 = <org.codehaus.jackson.JsonParser$NumberType: org.codehaus.jackson.JsonParser$NumberType BIG_INTEGER>;

        if $r14 == $r15 goto label09;

        $r18 = <org.codehaus.jackson.map.DeserializationConfig$Feature: org.codehaus.jackson.map.DeserializationConfig$Feature USE_BIG_INTEGER_FOR_INTS>;

        $z1 = virtualinvoke r11.<org.codehaus.jackson.map.DeserializationContext: boolean isEnabled(org.codehaus.jackson.map.DeserializationConfig$Feature)>($r18);

        if $z1 == 0 goto label10;

     label09:
        $r16 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: java.math.BigInteger getBigIntegerValue()>();

        $r17 = virtualinvoke r3.<org.codehaus.jackson.node.JsonNodeFactory: org.codehaus.jackson.node.NumericNode numberNode(java.math.BigInteger)>($r16);

        return $r17;

     label10:
        $r19 = <org.codehaus.jackson.JsonParser$NumberType: org.codehaus.jackson.JsonParser$NumberType INT>;

        if $r14 != $r19 goto label11;

        $i3 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: int getIntValue()>();

        $r21 = virtualinvoke r3.<org.codehaus.jackson.node.JsonNodeFactory: org.codehaus.jackson.node.NumericNode numberNode(int)>($i3);

        return $r21;

     label11:
        $l2 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: long getLongValue()>();

        $r20 = virtualinvoke r3.<org.codehaus.jackson.node.JsonNodeFactory: org.codehaus.jackson.node.NumericNode numberNode(long)>($l2);

        return $r20;

     label12:
        $r7 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonParser$NumberType getNumberType()>();

        $r8 = <org.codehaus.jackson.JsonParser$NumberType: org.codehaus.jackson.JsonParser$NumberType BIG_DECIMAL>;

        if $r7 == $r8 goto label13;

        $r12 = <org.codehaus.jackson.map.DeserializationConfig$Feature: org.codehaus.jackson.map.DeserializationConfig$Feature USE_BIG_DECIMAL_FOR_FLOATS>;

        $z0 = virtualinvoke r11.<org.codehaus.jackson.map.DeserializationContext: boolean isEnabled(org.codehaus.jackson.map.DeserializationConfig$Feature)>($r12);

        if $z0 == 0 goto label14;

     label13:
        $r9 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: java.math.BigDecimal getDecimalValue()>();

        $r10 = virtualinvoke r3.<org.codehaus.jackson.node.JsonNodeFactory: org.codehaus.jackson.node.NumericNode numberNode(java.math.BigDecimal)>($r9);

        return $r10;

     label14:
        $d0 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: double getDoubleValue()>();

        $r13 = virtualinvoke r3.<org.codehaus.jackson.node.JsonNodeFactory: org.codehaus.jackson.node.NumericNode numberNode(double)>($d0);

        return $r13;

     label15:
        $r6 = virtualinvoke r3.<org.codehaus.jackson.node.JsonNodeFactory: org.codehaus.jackson.node.BooleanNode booleanNode(boolean)>(1);

        return $r6;

     label16:
        $r5 = virtualinvoke r3.<org.codehaus.jackson.node.JsonNodeFactory: org.codehaus.jackson.node.BooleanNode booleanNode(boolean)>(0);

        return $r5;

     label17:
        $r4 = virtualinvoke r3.<org.codehaus.jackson.node.JsonNodeFactory: org.codehaus.jackson.node.NullNode nullNode()>();

        return $r4;

     label18:
        $r35 = virtualinvoke r29.<org.codehaus.jackson.map.deser.std.BaseNodeDeserializer: java.lang.Class getValueClass()>();

        $r36 = virtualinvoke r11.<org.codehaus.jackson.map.DeserializationContext: org.codehaus.jackson.map.JsonMappingException mappingException(java.lang.Class)>($r35);

        throw $r36;
    }
}
