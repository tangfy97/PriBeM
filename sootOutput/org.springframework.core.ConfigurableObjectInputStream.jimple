public class org.springframework.core.ConfigurableObjectInputStream extends java.io.ObjectInputStream
{
    private final java.lang.ClassLoader classLoader;
    private final boolean acceptProxyClasses;

    public void <init>(java.io.InputStream, java.lang.ClassLoader) throws java.io.IOException
    {
        org.springframework.core.ConfigurableObjectInputStream r0;
        java.lang.ClassLoader r2;
        java.io.InputStream r1;

        r0 := @this: org.springframework.core.ConfigurableObjectInputStream;

        r1 := @parameter0: java.io.InputStream;

        r2 := @parameter1: java.lang.ClassLoader;

        specialinvoke r0.<org.springframework.core.ConfigurableObjectInputStream: void <init>(java.io.InputStream,java.lang.ClassLoader,boolean)>(r1, r2, 1);

        return;
    }

    public void <init>(java.io.InputStream, java.lang.ClassLoader, boolean) throws java.io.IOException
    {
        org.springframework.core.ConfigurableObjectInputStream r0;
        java.lang.ClassLoader r2;
        java.io.InputStream r1;
        boolean z0;

        r0 := @this: org.springframework.core.ConfigurableObjectInputStream;

        r1 := @parameter0: java.io.InputStream;

        r2 := @parameter1: java.lang.ClassLoader;

        z0 := @parameter2: boolean;

        specialinvoke r0.<java.io.ObjectInputStream: void <init>(java.io.InputStream)>(r1);

        r0.<org.springframework.core.ConfigurableObjectInputStream: java.lang.ClassLoader classLoader> = r2;

        r0.<org.springframework.core.ConfigurableObjectInputStream: boolean acceptProxyClasses> = z0;

        return;
    }

    protected java.lang.Class resolveClass(java.io.ObjectStreamClass) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        org.springframework.core.ConfigurableObjectInputStream r0;
        java.io.ObjectStreamClass r2;
        java.lang.Class $r3, $r6, $r9;
        java.lang.ClassNotFoundException $r7;
        java.lang.ClassLoader $r1, $r5;
        java.lang.String $r4, $r8;

        r0 := @this: org.springframework.core.ConfigurableObjectInputStream;

        r2 := @parameter0: java.io.ObjectStreamClass;

     label1:
        $r1 = r0.<org.springframework.core.ConfigurableObjectInputStream: java.lang.ClassLoader classLoader>;

        if $r1 == null goto label3;

        $r4 = virtualinvoke r2.<java.io.ObjectStreamClass: java.lang.String getName()>();

        $r5 = r0.<org.springframework.core.ConfigurableObjectInputStream: java.lang.ClassLoader classLoader>;

        $r6 = staticinvoke <org.springframework.util.ClassUtils: java.lang.Class forName(java.lang.String,java.lang.ClassLoader)>($r4, $r5);

     label2:
        return $r6;

     label3:
        $r3 = specialinvoke r0.<java.io.ObjectInputStream: java.lang.Class resolveClass(java.io.ObjectStreamClass)>(r2);

     label4:
        return $r3;

     label5:
        $r7 := @caughtexception;

        $r8 = virtualinvoke r2.<java.io.ObjectStreamClass: java.lang.String getName()>();

        $r9 = virtualinvoke r0.<org.springframework.core.ConfigurableObjectInputStream: java.lang.Class resolveFallbackIfPossible(java.lang.String,java.lang.ClassNotFoundException)>($r8, $r7);

        return $r9;

        catch java.lang.ClassNotFoundException from label1 to label2 with label5;
        catch java.lang.ClassNotFoundException from label3 to label4 with label5;
    }

    protected java.lang.Class resolveProxyClass(java.lang.String[]) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.lang.String[] r2;
        int $i0, $i1, $i2, i3, $i4, i5;
        java.lang.String $r5, $r11, $r18;
        boolean $z0;
        org.springframework.core.ConfigurableObjectInputStream r0;
        java.lang.Class[] r20, r21;
        java.io.NotSerializableException $r9;
        java.lang.IllegalArgumentException $r15;
        java.lang.Class $r3, $r6, $r8, $r12, $r14, $r19;
        java.lang.ClassNotFoundException $r10, $r16, $r17;
        java.lang.ClassLoader $r1, $r4, $r7, $r13;

        r0 := @this: org.springframework.core.ConfigurableObjectInputStream;

        r2 := @parameter0: java.lang.String[];

        $z0 = r0.<org.springframework.core.ConfigurableObjectInputStream: boolean acceptProxyClasses>;

        if $z0 != 0 goto label01;

        $r9 = new java.io.NotSerializableException;

        specialinvoke $r9.<java.io.NotSerializableException: void <init>(java.lang.String)>("Not allowed to accept serialized proxy classes");

        throw $r9;

     label01:
        $r1 = r0.<org.springframework.core.ConfigurableObjectInputStream: java.lang.ClassLoader classLoader>;

        if $r1 == null goto label10;

        $i0 = lengthof r2;

        r20 = newarray (java.lang.Class)[$i0];

        i3 = 0;

        goto label06;

     label02:
        $r5 = r2[i3];

        $r4 = r0.<org.springframework.core.ConfigurableObjectInputStream: java.lang.ClassLoader classLoader>;

        $r6 = staticinvoke <org.springframework.util.ClassUtils: java.lang.Class forName(java.lang.String,java.lang.ClassLoader)>($r5, $r4);

        r20[i3] = $r6;

     label03:
        goto label05;

     label04:
        $r17 := @caughtexception;

        $r18 = r2[i3];

        $r19 = virtualinvoke r0.<org.springframework.core.ConfigurableObjectInputStream: java.lang.Class resolveFallbackIfPossible(java.lang.String,java.lang.ClassNotFoundException)>($r18, $r17);

        r20[i3] = $r19;

     label05:
        i3 = i3 + 1;

     label06:
        $i4 = lengthof r2;

        if i3 < $i4 goto label02;

     label07:
        $r7 = r0.<org.springframework.core.ConfigurableObjectInputStream: java.lang.ClassLoader classLoader>;

        $r8 = staticinvoke <java.lang.reflect.Proxy: java.lang.Class getProxyClass(java.lang.ClassLoader,java.lang.Class[])>($r7, r20);

     label08:
        return $r8;

     label09:
        $r15 := @caughtexception;

        $r16 = new java.lang.ClassNotFoundException;

        specialinvoke $r16.<java.lang.ClassNotFoundException: void <init>(java.lang.String,java.lang.Throwable)>(null, $r15);

        throw $r16;

     label10:
        $r3 = specialinvoke r0.<java.io.ObjectInputStream: java.lang.Class resolveProxyClass(java.lang.String[])>(r2);

     label11:
        return $r3;

     label12:
        $r10 := @caughtexception;

        $i1 = lengthof r2;

        r21 = newarray (java.lang.Class)[$i1];

        i5 = 0;

        goto label14;

     label13:
        $r11 = r2[i5];

        $r12 = virtualinvoke r0.<org.springframework.core.ConfigurableObjectInputStream: java.lang.Class resolveFallbackIfPossible(java.lang.String,java.lang.ClassNotFoundException)>($r11, $r10);

        r21[i5] = $r12;

        i5 = i5 + 1;

     label14:
        $i2 = lengthof r2;

        if i5 < $i2 goto label13;

        $r13 = virtualinvoke r0.<org.springframework.core.ConfigurableObjectInputStream: java.lang.ClassLoader getFallbackClassLoader()>();

        $r14 = staticinvoke <java.lang.reflect.Proxy: java.lang.Class getProxyClass(java.lang.ClassLoader,java.lang.Class[])>($r13, r21);

        return $r14;

        catch java.lang.ClassNotFoundException from label02 to label03 with label04;
        catch java.lang.IllegalArgumentException from label07 to label08 with label09;
        catch java.lang.ClassNotFoundException from label10 to label11 with label12;
    }

    protected java.lang.Class resolveFallbackIfPossible(java.lang.String, java.lang.ClassNotFoundException) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        org.springframework.core.ConfigurableObjectInputStream r1;
        java.lang.ClassNotFoundException r0;
        java.lang.String r2;

        r1 := @this: org.springframework.core.ConfigurableObjectInputStream;

        r2 := @parameter0: java.lang.String;

        r0 := @parameter1: java.lang.ClassNotFoundException;

        throw r0;
    }

    protected java.lang.ClassLoader getFallbackClassLoader() throws java.io.IOException
    {
        org.springframework.core.ConfigurableObjectInputStream r0;

        r0 := @this: org.springframework.core.ConfigurableObjectInputStream;

        return null;
    }
}
