public class org.apache.lucene.codecs.BlockTreeTermsReader$Stats extends java.lang.Object
{
    public long indexNodeCount;
    public long indexArcCount;
    public long indexNumBytes;
    public long totalTermCount;
    public long totalTermBytes;
    public int nonFloorBlockCount;
    public int floorBlockCount;
    public int floorSubBlockCount;
    public int mixedBlockCount;
    public int termsOnlyBlockCount;
    public int subBlocksOnlyBlockCount;
    public int totalBlockCount;
    public int[] blockCountByPrefixLen;
    private int startBlockCount;
    private int endBlockCount;
    public long totalBlockSuffixBytes;
    public long totalBlockStatsBytes;
    public long totalBlockOtherBytes;
    public final java.lang.String segment;
    public final java.lang.String field;
    static final boolean $assertionsDisabled;

    void <init>(java.lang.String, java.lang.String)
    {
        int[] $r1;
        org.apache.lucene.codecs.BlockTreeTermsReader$Stats r0;
        java.lang.String r2, r3;

        r0 := @this: org.apache.lucene.codecs.BlockTreeTermsReader$Stats;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = newarray (int)[10];

        r0.<org.apache.lucene.codecs.BlockTreeTermsReader$Stats: int[] blockCountByPrefixLen> = $r1;

        r0.<org.apache.lucene.codecs.BlockTreeTermsReader$Stats: java.lang.String segment> = r2;

        r0.<org.apache.lucene.codecs.BlockTreeTermsReader$Stats: java.lang.String field> = r3;

        return;
    }

    void startBlock(org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$SegmentTermsEnum$Frame, boolean)
    {
        org.apache.lucene.store.ByteArrayDataInput $r4, $r5;
        byte $b23;
        int[] $r1, $r3, $r6, $r7;
        boolean z0;
        org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$SegmentTermsEnum$Frame r2;
        org.apache.lucene.codecs.BlockTreeTermsReader$Stats r0;
        long $l11, $l13, $l14, $l15, $l17, $l18, $l21, $l22;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i12, $i16, $i19, $i20, $i24, $i25, $i26, $i27;

        r0 := @this: org.apache.lucene.codecs.BlockTreeTermsReader$Stats;

        r2 := @parameter0: org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$SegmentTermsEnum$Frame;

        z0 := @parameter1: boolean;

        $i0 = r0.<org.apache.lucene.codecs.BlockTreeTermsReader$Stats: int totalBlockCount>;

        $i1 = $i0 + 1;

        r0.<org.apache.lucene.codecs.BlockTreeTermsReader$Stats: int totalBlockCount> = $i1;

        if z0 == 0 goto label2;

        $l22 = r2.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$SegmentTermsEnum$Frame: long fp>;

        $l21 = r2.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$SegmentTermsEnum$Frame: long fpOrig>;

        $b23 = $l22 cmp $l21;

        if $b23 != 0 goto label1;

        $i26 = r0.<org.apache.lucene.codecs.BlockTreeTermsReader$Stats: int floorBlockCount>;

        $i27 = $i26 + 1;

        r0.<org.apache.lucene.codecs.BlockTreeTermsReader$Stats: int floorBlockCount> = $i27;

     label1:
        $i24 = r0.<org.apache.lucene.codecs.BlockTreeTermsReader$Stats: int floorSubBlockCount>;

        $i25 = $i24 + 1;

        r0.<org.apache.lucene.codecs.BlockTreeTermsReader$Stats: int floorSubBlockCount> = $i25;

        goto label3;

     label2:
        $i2 = r0.<org.apache.lucene.codecs.BlockTreeTermsReader$Stats: int nonFloorBlockCount>;

        $i3 = $i2 + 1;

        r0.<org.apache.lucene.codecs.BlockTreeTermsReader$Stats: int nonFloorBlockCount> = $i3;

     label3:
        $r1 = r0.<org.apache.lucene.codecs.BlockTreeTermsReader$Stats: int[] blockCountByPrefixLen>;

        $i5 = lengthof $r1;

        $i4 = r2.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$SegmentTermsEnum$Frame: int prefix>;

        if $i5 > $i4 goto label4;

        $r6 = r0.<org.apache.lucene.codecs.BlockTreeTermsReader$Stats: int[] blockCountByPrefixLen>;

        $i19 = r2.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$SegmentTermsEnum$Frame: int prefix>;

        $i20 = 1 + $i19;

        $r7 = staticinvoke <org.apache.lucene.util.ArrayUtil: int[] grow(int[],int)>($r6, $i20);

        r0.<org.apache.lucene.codecs.BlockTreeTermsReader$Stats: int[] blockCountByPrefixLen> = $r7;

     label4:
        $r3 = r0.<org.apache.lucene.codecs.BlockTreeTermsReader$Stats: int[] blockCountByPrefixLen>;

        $i6 = r2.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$SegmentTermsEnum$Frame: int prefix>;

        $i7 = $r3[$i6];

        $i8 = $i7 + 1;

        $r3[$i6] = $i8;

        $i9 = r0.<org.apache.lucene.codecs.BlockTreeTermsReader$Stats: int startBlockCount>;

        $i10 = $i9 + 1;

        r0.<org.apache.lucene.codecs.BlockTreeTermsReader$Stats: int startBlockCount> = $i10;

        $l11 = r0.<org.apache.lucene.codecs.BlockTreeTermsReader$Stats: long totalBlockSuffixBytes>;

        $r4 = r2.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$SegmentTermsEnum$Frame: org.apache.lucene.store.ByteArrayDataInput suffixesReader>;

        $i12 = virtualinvoke $r4.<org.apache.lucene.store.ByteArrayDataInput: int length()>();

        $l13 = (long) $i12;

        $l14 = $l11 + $l13;

        r0.<org.apache.lucene.codecs.BlockTreeTermsReader$Stats: long totalBlockSuffixBytes> = $l14;

        $l15 = r0.<org.apache.lucene.codecs.BlockTreeTermsReader$Stats: long totalBlockStatsBytes>;

        $r5 = r2.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$SegmentTermsEnum$Frame: org.apache.lucene.store.ByteArrayDataInput statsReader>;

        $i16 = virtualinvoke $r5.<org.apache.lucene.store.ByteArrayDataInput: int length()>();

        $l17 = (long) $i16;

        $l18 = $l15 + $l17;

        r0.<org.apache.lucene.codecs.BlockTreeTermsReader$Stats: long totalBlockStatsBytes> = $l18;

        return;
    }

    void endBlock(org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$SegmentTermsEnum$Frame)
    {
        java.lang.IllegalStateException $r15;
        org.apache.lucene.store.ByteArrayDataInput $r13, $r14;
        byte $b9;
        boolean $z0, $z1;
        org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$SegmentTermsEnum$Frame r0;
        org.apache.lucene.codecs.BlockTermState $r1;
        org.apache.lucene.codecs.BlockTreeTermsReader$Stats r2;
        java.lang.StringBuilder $r6, $r7, $r8, $r9, $r10, $r11, $r16;
        long $l2, $l3, $l4, $l7, $l8, $l10, $l11, $l20, $l21, $l22, $l24, $l25, $l27, $l28;
        java.lang.AssertionError $r17;
        int i0, $i1, $i5, $i6, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i23, $i26, $i29;
        java.lang.String $r12;

        r2 := @this: org.apache.lucene.codecs.BlockTreeTermsReader$Stats;

        r0 := @parameter0: org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$SegmentTermsEnum$Frame;

        $z0 = r0.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$SegmentTermsEnum$Frame: boolean isLeafBlock>;

        if $z0 == 0 goto label1;

        $i17 = r0.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$SegmentTermsEnum$Frame: int entCount>;

        goto label2;

     label1:
        $r1 = r0.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$SegmentTermsEnum$Frame: org.apache.lucene.codecs.BlockTermState state>;

        $i17 = $r1.<org.apache.lucene.codecs.BlockTermState: int termBlockOrd>;

     label2:
        i0 = $i17;

        $i1 = r0.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$SegmentTermsEnum$Frame: int entCount>;

        $i16 = $i1 - $i17;

        $l3 = r2.<org.apache.lucene.codecs.BlockTreeTermsReader$Stats: long totalTermCount>;

        $l2 = (long) $i17;

        $l4 = $l3 + $l2;

        r2.<org.apache.lucene.codecs.BlockTreeTermsReader$Stats: long totalTermCount> = $l4;

        if $i17 == 0 goto label3;

        if $i16 == 0 goto label3;

        $i14 = r2.<org.apache.lucene.codecs.BlockTreeTermsReader$Stats: int mixedBlockCount>;

        $i15 = $i14 + 1;

        r2.<org.apache.lucene.codecs.BlockTreeTermsReader$Stats: int mixedBlockCount> = $i15;

        goto label6;

     label3:
        if i0 == 0 goto label4;

        $i12 = r2.<org.apache.lucene.codecs.BlockTreeTermsReader$Stats: int termsOnlyBlockCount>;

        $i13 = $i12 + 1;

        r2.<org.apache.lucene.codecs.BlockTreeTermsReader$Stats: int termsOnlyBlockCount> = $i13;

        goto label6;

     label4:
        if $i16 == 0 goto label5;

        $i5 = r2.<org.apache.lucene.codecs.BlockTreeTermsReader$Stats: int subBlocksOnlyBlockCount>;

        $i6 = $i5 + 1;

        r2.<org.apache.lucene.codecs.BlockTreeTermsReader$Stats: int subBlocksOnlyBlockCount> = $i6;

        goto label6;

     label5:
        $r15 = new java.lang.IllegalStateException;

        specialinvoke $r15.<java.lang.IllegalStateException: void <init>()>();

        throw $r15;

     label6:
        $i18 = r2.<org.apache.lucene.codecs.BlockTreeTermsReader$Stats: int endBlockCount>;

        $i19 = $i18 + 1;

        r2.<org.apache.lucene.codecs.BlockTreeTermsReader$Stats: int endBlockCount> = $i19;

        $l20 = r0.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$SegmentTermsEnum$Frame: long fpEnd>;

        $l21 = r0.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$SegmentTermsEnum$Frame: long fp>;

        $l22 = $l20 - $l21;

        $r13 = r0.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$SegmentTermsEnum$Frame: org.apache.lucene.store.ByteArrayDataInput suffixesReader>;

        $i23 = virtualinvoke $r13.<org.apache.lucene.store.ByteArrayDataInput: int length()>();

        $l24 = (long) $i23;

        $l25 = $l22 - $l24;

        $r14 = r0.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$SegmentTermsEnum$Frame: org.apache.lucene.store.ByteArrayDataInput statsReader>;

        $i26 = virtualinvoke $r14.<org.apache.lucene.store.ByteArrayDataInput: int length()>();

        $l27 = (long) $i26;

        $l28 = $l25 - $l27;

        $z1 = <org.apache.lucene.codecs.BlockTreeTermsReader$Stats: boolean $assertionsDisabled>;

        if $z1 != 0 goto label7;

        $b9 = $l28 cmp 0L;

        $i29 = (int) $b9;

        if $i29 > 0 goto label7;

        $r17 = new java.lang.AssertionError;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("otherBytes=");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l28);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" frame.fp=");

        $l10 = r0.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$SegmentTermsEnum$Frame: long fp>;

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l10);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" frame.fpEnd=");

        $l11 = r0.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$SegmentTermsEnum$Frame: long fpEnd>;

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l11);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r17.<java.lang.AssertionError: void <init>(java.lang.Object)>($r12);

        throw $r17;

     label7:
        $l7 = r2.<org.apache.lucene.codecs.BlockTreeTermsReader$Stats: long totalBlockOtherBytes>;

        $l8 = $l7 + $l28;

        r2.<org.apache.lucene.codecs.BlockTreeTermsReader$Stats: long totalBlockOtherBytes> = $l8;

        return;
    }

    void term(org.apache.lucene.util.BytesRef)
    {
        org.apache.lucene.util.BytesRef r1;
        int $i0;
        org.apache.lucene.codecs.BlockTreeTermsReader$Stats r0;
        long $l1, $l2, $l3;

        r0 := @this: org.apache.lucene.codecs.BlockTreeTermsReader$Stats;

        r1 := @parameter0: org.apache.lucene.util.BytesRef;

        $l2 = r0.<org.apache.lucene.codecs.BlockTreeTermsReader$Stats: long totalTermBytes>;

        $i0 = r1.<org.apache.lucene.util.BytesRef: int length>;

        $l1 = (long) $i0;

        $l3 = $l2 + $l1;

        r0.<org.apache.lucene.codecs.BlockTreeTermsReader$Stats: long totalTermBytes> = $l3;

        return;
    }

    void finish()
    {
        boolean $z0, $z1, $z2;
        org.apache.lucene.codecs.BlockTreeTermsReader$Stats r0;
        java.lang.StringBuilder $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r22, $r23, $r24, $r25, $r26;
        java.lang.AssertionError $r1, $r12, $r21;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20;
        java.lang.String $r11, $r20, $r27;

        r0 := @this: org.apache.lucene.codecs.BlockTreeTermsReader$Stats;

        $z0 = <org.apache.lucene.codecs.BlockTreeTermsReader$Stats: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $i18 = r0.<org.apache.lucene.codecs.BlockTreeTermsReader$Stats: int startBlockCount>;

        $i17 = r0.<org.apache.lucene.codecs.BlockTreeTermsReader$Stats: int endBlockCount>;

        if $i18 == $i17 goto label1;

        $r21 = new java.lang.AssertionError;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("startBlockCount=");

        $i19 = r0.<org.apache.lucene.codecs.BlockTreeTermsReader$Stats: int startBlockCount>;

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i19);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" endBlockCount=");

        $i20 = r0.<org.apache.lucene.codecs.BlockTreeTermsReader$Stats: int endBlockCount>;

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i20);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r21.<java.lang.AssertionError: void <init>(java.lang.Object)>($r27);

        throw $r21;

     label1:
        $z1 = <org.apache.lucene.codecs.BlockTreeTermsReader$Stats: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        $i13 = r0.<org.apache.lucene.codecs.BlockTreeTermsReader$Stats: int totalBlockCount>;

        $i11 = r0.<org.apache.lucene.codecs.BlockTreeTermsReader$Stats: int floorSubBlockCount>;

        $i10 = r0.<org.apache.lucene.codecs.BlockTreeTermsReader$Stats: int nonFloorBlockCount>;

        $i12 = $i11 + $i10;

        if $i13 == $i12 goto label2;

        $r12 = new java.lang.AssertionError;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("floorSubBlockCount=");

        $i14 = r0.<org.apache.lucene.codecs.BlockTreeTermsReader$Stats: int floorSubBlockCount>;

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" nonFloorBlockCount=");

        $i15 = r0.<org.apache.lucene.codecs.BlockTreeTermsReader$Stats: int nonFloorBlockCount>;

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i15);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" totalBlockCount=");

        $i16 = r0.<org.apache.lucene.codecs.BlockTreeTermsReader$Stats: int totalBlockCount>;

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i16);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.lang.AssertionError: void <init>(java.lang.Object)>($r20);

        throw $r12;

     label2:
        $z2 = <org.apache.lucene.codecs.BlockTreeTermsReader$Stats: boolean $assertionsDisabled>;

        if $z2 != 0 goto label3;

        $i5 = r0.<org.apache.lucene.codecs.BlockTreeTermsReader$Stats: int totalBlockCount>;

        $i1 = r0.<org.apache.lucene.codecs.BlockTreeTermsReader$Stats: int mixedBlockCount>;

        $i0 = r0.<org.apache.lucene.codecs.BlockTreeTermsReader$Stats: int termsOnlyBlockCount>;

        $i3 = $i1 + $i0;

        $i2 = r0.<org.apache.lucene.codecs.BlockTreeTermsReader$Stats: int subBlocksOnlyBlockCount>;

        $i4 = $i3 + $i2;

        if $i5 == $i4 goto label3;

        $r1 = new java.lang.AssertionError;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("totalBlockCount=");

        $i6 = r0.<org.apache.lucene.codecs.BlockTreeTermsReader$Stats: int totalBlockCount>;

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" mixedBlockCount=");

        $i7 = r0.<org.apache.lucene.codecs.BlockTreeTermsReader$Stats: int mixedBlockCount>;

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" subBlocksOnlyBlockCount=");

        $i8 = r0.<org.apache.lucene.codecs.BlockTreeTermsReader$Stats: int subBlocksOnlyBlockCount>;

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i8);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" termsOnlyBlockCount=");

        $i9 = r0.<org.apache.lucene.codecs.BlockTreeTermsReader$Stats: int termsOnlyBlockCount>;

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.AssertionError: void <init>(java.lang.Object)>($r11);

        throw $r1;

     label3:
        return;
    }

    public java.lang.String toString()
    {
        java.lang.Integer $r89;
        byte $b6;
        java.lang.StringBuilder $r2, $r3, $r5, $r6, $r8, $r9, $r10, $r11, $r13, $r14, $r15, $r16, $r18, $r19, $r20, $r21, $r23, $r24, $r25, $r26, $r27, $r29, $r30, $r31, $r32, $r34, $r35, $r36, $r37, $r39, $r40, $r41, $r42, $r44, $r45, $r46, $r47, $r49, $r50, $r51, $r52, $r54, $r55, $r56, $r57, $r59, $r60, $r61, $r62, $r64, $r65, $r66, $r67, $r68, $r70, $r71, $r72, $r73, $r74, $r76, $r77, $r78, $r79, $r80, $r85, $r86, $r91, $r92, $r93, $r95, $r96, $r101, $r102, $r103, $r104, $r109, $r110, $r111, $r112, $r117, $r118, $r119, $r120, $r125, $r126;
        java.lang.Object[] $r87, $r97, $r105, $r113, $r121;
        java.io.ByteArrayOutputStream $r0;
        long $l0, $l1, $l2, $l3, $l4, $l5, $l16, $l18, $l20, $l26, $l28, $l30, $l32, $l33;
        int[] $r82, $r84;
        java.util.Locale $r88, $r98, $r106, $r114, $r122;
        int $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i17, $i19, $i21, $i22, $i23, $i24, i25, $i27, $i29, $i31, i34, i35;
        java.io.PrintStream $r1;
        org.apache.lucene.codecs.BlockTreeTermsReader$Stats r4;
        java.lang.Double $r99, $r107, $r115, $r123;
        java.lang.AssertionError $r83;
        java.lang.String $r7, $r12, $r17, $r22, $r28, $r33, $r38, $r43, $r48, $r53, $r58, $r63, $r69, $r75, $r81, $r90, $r94, $r100, $r108, $r116, $r124, $r131, $r132, $r133, $r134, $r135;
        java.lang.RuntimeException $r128, $r130;
        boolean $z0;
        java.io.UnsupportedEncodingException $r127, $r129;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11;

        r4 := @this: org.apache.lucene.codecs.BlockTreeTermsReader$Stats;

        $r0 = new java.io.ByteArrayOutputStream;

        specialinvoke $r0.<java.io.ByteArrayOutputStream: void <init>(int)>(1024);

     label01:
        $r1 = new java.io.PrintStream;

        specialinvoke $r1.<java.io.PrintStream: void <init>(java.io.OutputStream,boolean,java.lang.String)>($r0, 0, "UTF-8");

     label02:
        goto label04;

     label03:
        $r129 := @caughtexception;

        $r130 = new java.lang.RuntimeException;

        specialinvoke $r130.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r129);

        throw $r130;

     label04:
        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>("  index FST:");

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    ");

        $l0 = r4.<org.apache.lucene.codecs.BlockTreeTermsReader$Stats: long indexNodeCount>;

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" nodes");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>($r7);

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    ");

        $l1 = r4.<org.apache.lucene.codecs.BlockTreeTermsReader$Stats: long indexArcCount>;

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l1);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" arcs");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>($r12);

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    ");

        $l2 = r4.<org.apache.lucene.codecs.BlockTreeTermsReader$Stats: long indexNumBytes>;

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l2);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bytes");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>($r17);

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>("  terms:");

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    ");

        $l3 = r4.<org.apache.lucene.codecs.BlockTreeTermsReader$Stats: long totalTermCount>;

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l3);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" terms");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>($r22);

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    ");

        $l4 = r4.<org.apache.lucene.codecs.BlockTreeTermsReader$Stats: long totalTermBytes>;

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l4);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bytes");

        $l5 = r4.<org.apache.lucene.codecs.BlockTreeTermsReader$Stats: long totalTermCount>;

        $b6 = $l5 cmp 0L;

        if $b6 == 0 goto label05;

        $r119 = new java.lang.StringBuilder;

        specialinvoke $r119.<java.lang.StringBuilder: void <init>()>();

        $r120 = virtualinvoke $r119.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (");

        $r122 = <java.util.Locale: java.util.Locale ROOT>;

        $r121 = newarray (java.lang.Object)[1];

        $l32 = r4.<org.apache.lucene.codecs.BlockTreeTermsReader$Stats: long totalTermBytes>;

        $d10 = (double) $l32;

        $l33 = r4.<org.apache.lucene.codecs.BlockTreeTermsReader$Stats: long totalTermCount>;

        $d9 = (double) $l33;

        $d11 = $d10 / $d9;

        $r123 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d11);

        $r121[0] = $r123;

        $r124 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r122, "%.1f", $r121);

        $r125 = virtualinvoke $r120.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r124);

        $r126 = virtualinvoke $r125.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bytes/term)");

        $r131 = virtualinvoke $r126.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label06;

     label05:
        $r131 = "";

     label06:
        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r131);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>($r28);

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>("  blocks:");

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    ");

        $i7 = r4.<org.apache.lucene.codecs.BlockTreeTermsReader$Stats: int totalBlockCount>;

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" blocks");

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>($r33);

        $r34 = new java.lang.StringBuilder;

        specialinvoke $r34.<java.lang.StringBuilder: void <init>()>();

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    ");

        $i8 = r4.<org.apache.lucene.codecs.BlockTreeTermsReader$Stats: int termsOnlyBlockCount>;

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i8);

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" terms-only blocks");

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>($r38);

        $r39 = new java.lang.StringBuilder;

        specialinvoke $r39.<java.lang.StringBuilder: void <init>()>();

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    ");

        $i9 = r4.<org.apache.lucene.codecs.BlockTreeTermsReader$Stats: int subBlocksOnlyBlockCount>;

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i9);

        $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" sub-block-only blocks");

        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>($r43);

        $r44 = new java.lang.StringBuilder;

        specialinvoke $r44.<java.lang.StringBuilder: void <init>()>();

        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    ");

        $i10 = r4.<org.apache.lucene.codecs.BlockTreeTermsReader$Stats: int mixedBlockCount>;

        $r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i10);

        $r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" mixed blocks");

        $r48 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>($r48);

        $r49 = new java.lang.StringBuilder;

        specialinvoke $r49.<java.lang.StringBuilder: void <init>()>();

        $r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    ");

        $i11 = r4.<org.apache.lucene.codecs.BlockTreeTermsReader$Stats: int floorBlockCount>;

        $r51 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i11);

        $r52 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" floor blocks");

        $r53 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>($r53);

        $r54 = new java.lang.StringBuilder;

        specialinvoke $r54.<java.lang.StringBuilder: void <init>()>();

        $r55 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    ");

        $i13 = r4.<org.apache.lucene.codecs.BlockTreeTermsReader$Stats: int totalBlockCount>;

        $i12 = r4.<org.apache.lucene.codecs.BlockTreeTermsReader$Stats: int floorSubBlockCount>;

        $i14 = $i13 - $i12;

        $r56 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i14);

        $r57 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" non-floor blocks");

        $r58 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>($r58);

        $r59 = new java.lang.StringBuilder;

        specialinvoke $r59.<java.lang.StringBuilder: void <init>()>();

        $r60 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    ");

        $i15 = r4.<org.apache.lucene.codecs.BlockTreeTermsReader$Stats: int floorSubBlockCount>;

        $r61 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i15);

        $r62 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" floor sub-blocks");

        $r63 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>($r63);

        $r64 = new java.lang.StringBuilder;

        specialinvoke $r64.<java.lang.StringBuilder: void <init>()>();

        $r65 = virtualinvoke $r64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    ");

        $l16 = r4.<org.apache.lucene.codecs.BlockTreeTermsReader$Stats: long totalBlockSuffixBytes>;

        $r66 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l16);

        $r67 = virtualinvoke $r66.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" term suffix bytes");

        $i17 = r4.<org.apache.lucene.codecs.BlockTreeTermsReader$Stats: int totalBlockCount>;

        if $i17 == 0 goto label07;

        $r111 = new java.lang.StringBuilder;

        specialinvoke $r111.<java.lang.StringBuilder: void <init>()>();

        $r112 = virtualinvoke $r111.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (");

        $r114 = <java.util.Locale: java.util.Locale ROOT>;

        $r113 = newarray (java.lang.Object)[1];

        $l30 = r4.<org.apache.lucene.codecs.BlockTreeTermsReader$Stats: long totalBlockSuffixBytes>;

        $d7 = (double) $l30;

        $i31 = r4.<org.apache.lucene.codecs.BlockTreeTermsReader$Stats: int totalBlockCount>;

        $d6 = (double) $i31;

        $d8 = $d7 / $d6;

        $r115 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d8);

        $r113[0] = $r115;

        $r116 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r114, "%.1f", $r113);

        $r117 = virtualinvoke $r112.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r116);

        $r118 = virtualinvoke $r117.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" suffix-bytes/block)");

        $r132 = virtualinvoke $r118.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label08;

     label07:
        $r132 = "";

     label08:
        $r68 = virtualinvoke $r67.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r132);

        $r69 = virtualinvoke $r68.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>($r69);

        $r70 = new java.lang.StringBuilder;

        specialinvoke $r70.<java.lang.StringBuilder: void <init>()>();

        $r71 = virtualinvoke $r70.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    ");

        $l18 = r4.<org.apache.lucene.codecs.BlockTreeTermsReader$Stats: long totalBlockStatsBytes>;

        $r72 = virtualinvoke $r71.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l18);

        $r73 = virtualinvoke $r72.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" term stats bytes");

        $i19 = r4.<org.apache.lucene.codecs.BlockTreeTermsReader$Stats: int totalBlockCount>;

        if $i19 == 0 goto label09;

        $r103 = new java.lang.StringBuilder;

        specialinvoke $r103.<java.lang.StringBuilder: void <init>()>();

        $r104 = virtualinvoke $r103.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (");

        $r106 = <java.util.Locale: java.util.Locale ROOT>;

        $r105 = newarray (java.lang.Object)[1];

        $l28 = r4.<org.apache.lucene.codecs.BlockTreeTermsReader$Stats: long totalBlockStatsBytes>;

        $d4 = (double) $l28;

        $i29 = r4.<org.apache.lucene.codecs.BlockTreeTermsReader$Stats: int totalBlockCount>;

        $d3 = (double) $i29;

        $d5 = $d4 / $d3;

        $r107 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d5);

        $r105[0] = $r107;

        $r108 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r106, "%.1f", $r105);

        $r109 = virtualinvoke $r104.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r108);

        $r110 = virtualinvoke $r109.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" stats-bytes/block)");

        $r133 = virtualinvoke $r110.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label10;

     label09:
        $r133 = "";

     label10:
        $r74 = virtualinvoke $r73.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r133);

        $r75 = virtualinvoke $r74.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>($r75);

        $r76 = new java.lang.StringBuilder;

        specialinvoke $r76.<java.lang.StringBuilder: void <init>()>();

        $r77 = virtualinvoke $r76.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    ");

        $l20 = r4.<org.apache.lucene.codecs.BlockTreeTermsReader$Stats: long totalBlockOtherBytes>;

        $r78 = virtualinvoke $r77.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l20);

        $r79 = virtualinvoke $r78.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" other bytes");

        $i21 = r4.<org.apache.lucene.codecs.BlockTreeTermsReader$Stats: int totalBlockCount>;

        if $i21 == 0 goto label11;

        $r95 = new java.lang.StringBuilder;

        specialinvoke $r95.<java.lang.StringBuilder: void <init>()>();

        $r96 = virtualinvoke $r95.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (");

        $r98 = <java.util.Locale: java.util.Locale ROOT>;

        $r97 = newarray (java.lang.Object)[1];

        $l26 = r4.<org.apache.lucene.codecs.BlockTreeTermsReader$Stats: long totalBlockOtherBytes>;

        $d1 = (double) $l26;

        $i27 = r4.<org.apache.lucene.codecs.BlockTreeTermsReader$Stats: int totalBlockCount>;

        $d0 = (double) $i27;

        $d2 = $d1 / $d0;

        $r99 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d2);

        $r97[0] = $r99;

        $r100 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r98, "%.1f", $r97);

        $r101 = virtualinvoke $r96.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r100);

        $r102 = virtualinvoke $r101.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" other-bytes/block)");

        $r134 = virtualinvoke $r102.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label12;

     label11:
        $r134 = "";

     label12:
        $r80 = virtualinvoke $r79.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r134);

        $r81 = virtualinvoke $r80.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>($r81);

        $i22 = r4.<org.apache.lucene.codecs.BlockTreeTermsReader$Stats: int totalBlockCount>;

        if $i22 == 0 goto label16;

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>("    by prefix length:");

        i34 = 0;

        i35 = 0;

     label13:
        $r82 = r4.<org.apache.lucene.codecs.BlockTreeTermsReader$Stats: int[] blockCountByPrefixLen>;

        $i23 = lengthof $r82;

        if i35 >= $i23 goto label15;

        $r84 = r4.<org.apache.lucene.codecs.BlockTreeTermsReader$Stats: int[] blockCountByPrefixLen>;

        i25 = $r84[i35];

        i34 = i34 + i25;

        if i25 == 0 goto label14;

        $r85 = new java.lang.StringBuilder;

        specialinvoke $r85.<java.lang.StringBuilder: void <init>()>();

        $r86 = virtualinvoke $r85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("      ");

        $r88 = <java.util.Locale: java.util.Locale ROOT>;

        $r87 = newarray (java.lang.Object)[1];

        $r89 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i35);

        $r87[0] = $r89;

        $r90 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r88, "%2d", $r87);

        $r91 = virtualinvoke $r86.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r90);

        $r92 = virtualinvoke $r91.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r93 = virtualinvoke $r92.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i25);

        $r94 = virtualinvoke $r93.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>($r94);

     label14:
        i35 = i35 + 1;

        goto label13;

     label15:
        $z0 = <org.apache.lucene.codecs.BlockTreeTermsReader$Stats: boolean $assertionsDisabled>;

        if $z0 != 0 goto label16;

        $i24 = r4.<org.apache.lucene.codecs.BlockTreeTermsReader$Stats: int totalBlockCount>;

        if $i24 == i34 goto label16;

        $r83 = new java.lang.AssertionError;

        specialinvoke $r83.<java.lang.AssertionError: void <init>()>();

        throw $r83;

     label16:
        $r135 = virtualinvoke $r0.<java.io.ByteArrayOutputStream: java.lang.String toString(java.lang.String)>("UTF-8");

     label17:
        return $r135;

     label18:
        $r127 := @caughtexception;

        $r128 = new java.lang.RuntimeException;

        specialinvoke $r128.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r127);

        throw $r128;

        catch java.io.UnsupportedEncodingException from label01 to label02 with label03;
        catch java.io.UnsupportedEncodingException from label16 to label17 with label18;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/apache/lucene/codecs/BlockTreeTermsReader;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.lucene.codecs.BlockTreeTermsReader$Stats: boolean $assertionsDisabled> = $z1;

        return;
    }
}
