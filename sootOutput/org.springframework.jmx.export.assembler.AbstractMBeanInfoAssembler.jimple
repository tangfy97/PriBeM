public abstract class org.springframework.jmx.export.assembler.AbstractMBeanInfoAssembler extends java.lang.Object implements org.springframework.jmx.export.assembler.MBeanInfoAssembler
{

    public void <init>()
    {
        org.springframework.jmx.export.assembler.AbstractMBeanInfoAssembler r0;

        r0 := @this: org.springframework.jmx.export.assembler.AbstractMBeanInfoAssembler;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public javax.management.modelmbean.ModelMBeanInfo getMBeanInfo(java.lang.Object, java.lang.String) throws javax.management.JMException
    {
        javax.management.modelmbean.ModelMBeanConstructorInfo[] $r7;
        javax.management.Descriptor $r10;
        javax.management.modelmbean.ModelMBeanAttributeInfo[] $r6;
        org.springframework.jmx.export.assembler.AbstractMBeanInfoAssembler r0;
        javax.management.modelmbean.ModelMBeanOperationInfo[] $r8;
        javax.management.modelmbean.ModelMBeanInfoSupport $r2;
        javax.management.modelmbean.ModelMBeanNotificationInfo[] $r9;
        java.lang.Object r1;
        java.lang.String r3, $r4, $r5;

        r0 := @this: org.springframework.jmx.export.assembler.AbstractMBeanInfoAssembler;

        r1 := @parameter0: java.lang.Object;

        r3 := @parameter1: java.lang.String;

        virtualinvoke r0.<org.springframework.jmx.export.assembler.AbstractMBeanInfoAssembler: void checkManagedBean(java.lang.Object)>(r1);

        $r2 = new javax.management.modelmbean.ModelMBeanInfoSupport;

        $r4 = virtualinvoke r0.<org.springframework.jmx.export.assembler.AbstractMBeanInfoAssembler: java.lang.String getClassName(java.lang.Object,java.lang.String)>(r1, r3);

        $r5 = virtualinvoke r0.<org.springframework.jmx.export.assembler.AbstractMBeanInfoAssembler: java.lang.String getDescription(java.lang.Object,java.lang.String)>(r1, r3);

        $r6 = virtualinvoke r0.<org.springframework.jmx.export.assembler.AbstractMBeanInfoAssembler: javax.management.modelmbean.ModelMBeanAttributeInfo[] getAttributeInfo(java.lang.Object,java.lang.String)>(r1, r3);

        $r7 = virtualinvoke r0.<org.springframework.jmx.export.assembler.AbstractMBeanInfoAssembler: javax.management.modelmbean.ModelMBeanConstructorInfo[] getConstructorInfo(java.lang.Object,java.lang.String)>(r1, r3);

        $r8 = virtualinvoke r0.<org.springframework.jmx.export.assembler.AbstractMBeanInfoAssembler: javax.management.modelmbean.ModelMBeanOperationInfo[] getOperationInfo(java.lang.Object,java.lang.String)>(r1, r3);

        $r9 = virtualinvoke r0.<org.springframework.jmx.export.assembler.AbstractMBeanInfoAssembler: javax.management.modelmbean.ModelMBeanNotificationInfo[] getNotificationInfo(java.lang.Object,java.lang.String)>(r1, r3);

        specialinvoke $r2.<javax.management.modelmbean.ModelMBeanInfoSupport: void <init>(java.lang.String,java.lang.String,javax.management.modelmbean.ModelMBeanAttributeInfo[],javax.management.modelmbean.ModelMBeanConstructorInfo[],javax.management.modelmbean.ModelMBeanOperationInfo[],javax.management.modelmbean.ModelMBeanNotificationInfo[])>($r4, $r5, $r6, $r7, $r8, $r9);

        $r10 = interfaceinvoke $r2.<javax.management.modelmbean.ModelMBeanInfo: javax.management.Descriptor getMBeanDescriptor()>();

        virtualinvoke r0.<org.springframework.jmx.export.assembler.AbstractMBeanInfoAssembler: void populateMBeanDescriptor(javax.management.Descriptor,java.lang.Object,java.lang.String)>($r10, r1, r3);

        interfaceinvoke $r2.<javax.management.modelmbean.ModelMBeanInfo: void setMBeanDescriptor(javax.management.Descriptor)>($r10);

        return $r2;
    }

    protected void checkManagedBean(java.lang.Object) throws java.lang.IllegalArgumentException
    {
        java.lang.Object r1;
        org.springframework.jmx.export.assembler.AbstractMBeanInfoAssembler r0;

        r0 := @this: org.springframework.jmx.export.assembler.AbstractMBeanInfoAssembler;

        r1 := @parameter0: java.lang.Object;

        return;
    }

    protected java.lang.Class getTargetClass(java.lang.Object)
    {
        java.lang.Object r0;
        java.lang.Class $r1;
        org.springframework.jmx.export.assembler.AbstractMBeanInfoAssembler r2;

        r2 := @this: org.springframework.jmx.export.assembler.AbstractMBeanInfoAssembler;

        r0 := @parameter0: java.lang.Object;

        $r1 = staticinvoke <org.springframework.aop.support.AopUtils: java.lang.Class getTargetClass(java.lang.Object)>(r0);

        return $r1;
    }

    protected java.lang.Class getClassToExpose(java.lang.Object)
    {
        java.lang.Object r0;
        java.lang.Class $r1;
        org.springframework.jmx.export.assembler.AbstractMBeanInfoAssembler r2;

        r2 := @this: org.springframework.jmx.export.assembler.AbstractMBeanInfoAssembler;

        r0 := @parameter0: java.lang.Object;

        $r1 = staticinvoke <org.springframework.jmx.support.JmxUtils: java.lang.Class getClassToExpose(java.lang.Object)>(r0);

        return $r1;
    }

    protected java.lang.Class getClassToExpose(java.lang.Class)
    {
        java.lang.Class r0, $r1;
        org.springframework.jmx.export.assembler.AbstractMBeanInfoAssembler r2;

        r2 := @this: org.springframework.jmx.export.assembler.AbstractMBeanInfoAssembler;

        r0 := @parameter0: java.lang.Class;

        $r1 = staticinvoke <org.springframework.jmx.support.JmxUtils: java.lang.Class getClassToExpose(java.lang.Class)>(r0);

        return $r1;
    }

    protected java.lang.String getClassName(java.lang.Object, java.lang.String) throws javax.management.JMException
    {
        java.lang.Object r1;
        java.lang.Class $r2;
        java.lang.String $r3, r4;
        org.springframework.jmx.export.assembler.AbstractMBeanInfoAssembler r0;

        r0 := @this: org.springframework.jmx.export.assembler.AbstractMBeanInfoAssembler;

        r1 := @parameter0: java.lang.Object;

        r4 := @parameter1: java.lang.String;

        $r2 = virtualinvoke r0.<org.springframework.jmx.export.assembler.AbstractMBeanInfoAssembler: java.lang.Class getTargetClass(java.lang.Object)>(r1);

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        return $r3;
    }

    protected java.lang.String getDescription(java.lang.Object, java.lang.String) throws javax.management.JMException
    {
        org.springframework.jmx.export.assembler.AbstractMBeanInfoAssembler r0;
        java.lang.Object r1;
        java.lang.Class $r2;
        java.lang.StringBuilder $r4, $r5;
        java.lang.String $r3, $r6, r7;
        boolean $z0;

        r0 := @this: org.springframework.jmx.export.assembler.AbstractMBeanInfoAssembler;

        r1 := @parameter0: java.lang.Object;

        r7 := @parameter1: java.lang.String;

        $r2 = virtualinvoke r0.<org.springframework.jmx.export.assembler.AbstractMBeanInfoAssembler: java.lang.Class getTargetClass(java.lang.Object)>(r1);

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        $z0 = staticinvoke <org.springframework.aop.support.AopUtils: boolean isAopProxy(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>("Proxy for ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;

     label1:
        return $r3;
    }

    protected void populateMBeanDescriptor(javax.management.Descriptor, java.lang.Object, java.lang.String) throws javax.management.JMException
    {
        javax.management.Descriptor r1;
        java.lang.Object r2;
        java.lang.String r3;
        org.springframework.jmx.export.assembler.AbstractMBeanInfoAssembler r0;

        r0 := @this: org.springframework.jmx.export.assembler.AbstractMBeanInfoAssembler;

        r1 := @parameter0: javax.management.Descriptor;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.String;

        return;
    }

    protected javax.management.modelmbean.ModelMBeanConstructorInfo[] getConstructorInfo(java.lang.Object, java.lang.String) throws javax.management.JMException
    {
        javax.management.modelmbean.ModelMBeanConstructorInfo[] $r0;
        java.lang.Object r2;
        java.lang.String r3;
        org.springframework.jmx.export.assembler.AbstractMBeanInfoAssembler r1;

        r1 := @this: org.springframework.jmx.export.assembler.AbstractMBeanInfoAssembler;

        r2 := @parameter0: java.lang.Object;

        r3 := @parameter1: java.lang.String;

        $r0 = newarray (javax.management.modelmbean.ModelMBeanConstructorInfo)[0];

        return $r0;
    }

    protected javax.management.modelmbean.ModelMBeanNotificationInfo[] getNotificationInfo(java.lang.Object, java.lang.String) throws javax.management.JMException
    {
        javax.management.modelmbean.ModelMBeanNotificationInfo[] $r0;
        java.lang.Object r2;
        java.lang.String r3;
        org.springframework.jmx.export.assembler.AbstractMBeanInfoAssembler r1;

        r1 := @this: org.springframework.jmx.export.assembler.AbstractMBeanInfoAssembler;

        r2 := @parameter0: java.lang.Object;

        r3 := @parameter1: java.lang.String;

        $r0 = newarray (javax.management.modelmbean.ModelMBeanNotificationInfo)[0];

        return $r0;
    }

    protected abstract javax.management.modelmbean.ModelMBeanAttributeInfo[] getAttributeInfo(java.lang.Object, java.lang.String) throws javax.management.JMException;

    protected abstract javax.management.modelmbean.ModelMBeanOperationInfo[] getOperationInfo(java.lang.Object, java.lang.String) throws javax.management.JMException;
}
